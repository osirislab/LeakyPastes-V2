id,title,username,language,date,content
ADnHhxvi,wrl s2 teams playoffs,matp93,JSON,Thursday 19th of June 2025 12:27:30 PM CDT,"[
  {
    ""Id"": ""Shorkies"",
    ""Name"": ""Shorkies"",
    ""ShortName"": ""SHRK"",
    ""LogoUrl"": ""https://i.ibb.co/PGQjNPYz/Shorkies.png"",
    ""Players"": [
      {
        ""Name"": ""Vingummi101"",
        ""AccountId"": ""7efb8fcc-b664-44ec-a3c8-02b5e377539c""
      },
      {
        ""Name"": ""SF-lnko"",
        ""AccountId"": ""d9f06d37-3300-4468-97b2-5de8404e0e92"",
        ""PhotoUrl"": ""https://i.ibb.co/V0wB61J0/lnko.png""
      },
      {
        ""Name"": ""Aluji"",
        ""AccountId"": ""725b7e1a-dec8-4a04-b302-51e17a89a602""
      }
    ]
  },
  {
    ""Id"": ""Apex Predators"",
    ""Name"": ""Apex Predators"",
    ""ShortName"": ""APEX"",
    ""LogoUrl"": ""https://i.ibb.co/LBF7T3L/Apex-Predators.png"",
    ""Players"": [
      {
        ""Name"": ""Liz.TM"",
        ""AccountId"": ""b49ae4fe-75e9-4a5c-a4b6-ce0d06c5c772"",
        ""PhotoUrl"": ""https://i.ibb.co/pvxQVHZq/Liz.png""
      },
      {
        ""Name"": ""CatBagasm"",
        ""AccountId"": ""b89e8368-945b-457e-ab88-d9250f75eabd""
      }
    ]
  },
  {
    ""Id"": ""Lunaena"",
    ""Name"": ""Lunaena"",
    ""ShortName"": ""LUA"",
    ""Players"": [
      {
        ""Name"": ""deluluna_"",
        ""AccountId"": ""d3557ada-6d0c-40be-9208-8587d9293dff""
      },
      {
        ""Name"": ""Seliaste"",
        ""AccountId"": ""5dafce24-de74-4d58-bdf8-68d9c6c65387""
      },
      {
        ""AccountId"": ""1f2e8ca1-9d2d-48eb-a873-945cb6d7e9c5""
      }
    ]
  },
  {
    ""Id"": ""Holy Dynasty"",
    ""Name"": ""Holy Dynasty"",
    ""ShortName"": ""HD"",
    ""LogoUrl"": ""https://i.ibb.co/TDBym1pS/HD-allmode.png"",
    ""Players"": [
      {
        ""Name"": ""Neoranto"",
        ""AccountId"": ""ff66a79d-53d8-4cfa-8c0f-779463b5acf7"",
        ""PhotoUrl"": ""https://i.ibb.co/7djXWLTT/Neoranto.png""
      },
      {
        ""Name"": ""prowe.ss"",
        ""AccountId"": ""4ff4f9e1-7360-4000-bf88-aef578b05ffe""
      },
      {
        ""Name"": ""chloe.iwnl"",
        ""AccountId"": ""8542c707-6300-4b4c-ae78-58406469e064""
      }
    ]
  },
  {
    ""Id"": ""Molotov Gaming"",
    ""Name"": ""Molotov Gaming"",
    ""ShortName"": ""MLTV"",
    ""LogoUrl"": ""https://i.ibb.co/PZXTC2KB/Molotov-Gaming.png"",
    ""Players"": [
      {
        ""Name"": ""Anderin_tm"",
        ""AccountId"": ""db7e8268-b434-4f51-9038-4dd15202550f"",
        ""PhotoUrl"": ""https://i.ibb.co/ndxRPS1/Anderin_tm.png""
      },
      {
        ""Name"": ""cozzer04"",
        ""AccountId"": ""1683525a-bcfb-41ee-9aba-f6cafca4a27f""
      },
      {
        ""Name"": ""xephyr.chris"",
        ""AccountId"": ""cdd5c408-0602-4ba5-b010-5e754e25cbe4""
      }
    ]
  },
  {
    ""Id"": ""AFAB"",
    ""Name"": ""Assigned Fast At Birth"",
    ""ShortName"": ""AFAB"",
    ""LogoUrl"": ""https://i.ibb.co/0RbN2mr0/Assigned-Fast-At-Birth.png"",
    ""Players"": [
      {
        ""Name"": ""Laina_."",
        ""AccountId"": ""fd6ca975-d21b-43db-a416-cd36a1be75fc"",
        ""PhotoUrl"": ""https://i.ibb.co/pjTvXznC/laina.png""
      },
      {
        ""Name"": ""Stelaa.nyan"",
        ""AccountId"": ""98d2e8b1-16a5-4edb-9a64-41c5ebe4860c""
      },
      {
        ""Name"": ""Mariina"",
        ""AccountId"": ""711036bf-d90b-4fa4-9be5-964eb3912256"",
        ""PhotoUrl"": ""https://i.ibb.co/LDPCKbs4/Marie.png""
      },
      {
        ""Name"": ""zayshaa"",
        ""AccountId"": ""90dc7c06-3fad-42ad-b92e-a230efb8f088""
      }
    ]
  },
  {
    ""Id"": ""MEOW_"",
    ""Name"": ""MEOW_"",
    ""ShortName"": ""MEOW"",
    ""LogoUrl"": ""https://i.ibb.co/wNQYSMmJ/mewo.png"",
    ""Players"": [
      {
        ""Name"": ""ya"",
        ""AccountId"": ""2aae8132-2f40-40f3-9808-55bd9a3e56bf"",
        ""PhotoUrl"": ""https://i.ibb.co/kgRDszwM/ya.png""
      },
      {
        ""Name"": ""ZaraStocher"",
        ""AccountId"": ""7789c1c5-75b6-484e-bbee-11f914865247"",
        ""PhotoUrl"": ""https://i.ibb.co/xRz5wBW/Zara.png""
      },
      {
        ""Name"": ""Lina_Kitty"",
        ""AccountId"": ""497403f2-4b50-4424-89a9-b81dcb34a6c0""
      }
    ]
  },
  {
    ""Id"": ""Big Bonkers"",
    ""Name"": ""Big Bonkers"",
    ""ShortName"": ""BONK"",
    ""LogoUrl"": ""https://i.ibb.co/YFBNCQ7T/BIGBONKERSLOGO.png"",
    ""Players"": [
      {
        ""Name"": ""SneakyAnnie"",
        ""AccountId"": ""ce414ab7-2193-4613-a85d-317dbcbe480c""
      },
      {
        ""Name"": ""Majijej"",
        ""AccountId"": ""bfcf62ff-0f9e-40aa-b924-11b9c70b8a09"",
        ""PhotoUrl"": ""https://i.ibb.co/mVZnGvg5/Maji.png""
      },
      {
        ""Name"": ""leabdd"",
        ""AccountId"": ""34050419-362c-41a7-afcd-f8e2b9e753f3"",
        ""PhotoUrl"": ""https://i.ibb.co/209D43k2/Lea.png""
      }
    ]
  },
  {
    ""Id"": ""EQNX"",
    ""Name"": ""EQNX"",
    ""ShortName"": ""EQNX"",
    ""LogoUrl"": ""https://i.ibb.co/HTh9d53F/EQNX.png"",
    ""Players"": [
      {
        ""Name"": ""Shorty_GrayTM"",
        ""AccountId"": ""c210e96e-35be-4cb6-9224-0f73cab9dab5"",
        ""PhotoUrl"": ""https://i.ibb.co/FP7Kct2/Shorty.png""
      },
      {
        ""Name"": ""ieva."",
        ""AccountId"": ""43a1db59-380c-4d2f-8a72-9fbfbe52c749"",
        ""PhotoUrl"": ""https://i.ibb.co/sdMgczTG/Ieva.png""
      }
    ]
  }
]"
vAjf48zt,MultiTF_CandleOverlayEA,cjmt2,C++,Thursday 19th of June 2025 12:08:52 PM CDT,"//+-------------------------------------------------------------------------------------+
//|                                                         MultiTF_CandleOverlayEA.mq5 |
//|                        Expert pentru multiple timeframe overlay și trade management |
//+-------------------------------------------------------------------------------------+
#property copyright ""ChatGPT""
#property version   ""1.00""
#property strict
#define ColorAqua clrAqua
#define ColorRed clrRed

input double Lots       = 0.1;
input double SL_Points  = 100;    // stop loss in points
input double TP_Points  = 200;    // take profit in points
input double TrailStart = 50;     // trailing start in points
input double TrailStep  = 20;     // trailing step in points

//--- simbolul curent
string symbol;

//--- handle-uri pentru timeframe-uri
ENUM_TIMEFRAMES tfH1 = PERIOD_H1;
ENUM_TIMEFRAMES tfH4 = PERIOD_H4;
ENUM_TIMEFRAMES tfD1 = PERIOD_D1;
ENUM_TIMEFRAMES tfW1 = PERIOD_W1;

//--- nume obiecte grafice
string objNameH1 = ""Candle_H1"";
string objNameH4 = ""Candle_H4"";
string objNameD1 = ""Candle_D1"";
string objNameW1 = ""Candle_W1"";

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   symbol = _Symbol;
   //ChartSetInteger(0, CHART_SHOW_PERIOD_SEPARATORS, false); // ascunde liniile perioadelor pentru claritate

   // curata obiecte vechi
   ObjectDelete(0,objNameH1);
   ObjectDelete(0,objNameH4);
   ObjectDelete(0,objNameD1);
   ObjectDelete(0,objNameW1);

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Functie pentru obtinerea valorilor OHLC pentru o anumita TF      |
//+------------------------------------------------------------------+
bool GetOHLC(ENUM_TIMEFRAMES tf, datetime &time_open, double &open, double &high, double &low, double &close)
  {
   MqlRates rates[];
   if(CopyRates(symbol, tf, 0, 1, rates) != 1)
     return(false);

   time_open = rates[0].time;
   open  = rates[0].open;
   high  = rates[0].high;
   low   = rates[0].low;
   close = rates[0].close;
   return(true);
  }

//+------------------------------------------------------------------+
//| Functie desenare candela suprapusa pe M1                         |
//+------------------------------------------------------------------+
void DrawCandleOverlay(string name, datetime time_open, double open, double high, double low, double close, color col)
  {
   // Șterge obiectul vechi daca exista
   ObjectDelete(0,name);

   // Creaza un obiect rectangle pe grafic cu următoarele coordonate:
   // pe orizontala, de la time_open pana la timpul curent (acum)
   // pe verticala, intre low si high

   datetime time_now = TimeCurrent();

   // creeaza rectangle
   if(!ObjectCreate(0, name, OBJ_RECTANGLE, 0, time_open, high, time_now, low))
     {
      Print(""Eroare la crearea obiectului "", name);
      return;
     }

   // setari vizuale
   ObjectSetInteger(0, name, OBJPROP_COLOR, col);
   ObjectSetInteger(0, name, OBJPROP_BACK, true);      // sa fie in spate
   ObjectSetInteger(0, name, OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, name, OBJPROP_WIDTH, 2);

   // Opacitate in functie de close > open
   if(close > open)
      ObjectSetInteger(0, name, OBJPROP_BGCOLOR, ColorToARGB(ColorAqua, 60));
   else
      ObjectSetInteger(0, name, OBJPROP_BGCOLOR, ColorToARGB(ColorRed, 60));
  }

//+------------------------------------------------------------------+
//| Functie pentru conversia culorii cu opacitate                   |
//+------------------------------------------------------------------+
ulong ColorToARGBAlpha(color c, uchar alpha)
  {
   return(((ulong)alpha << 24) | ((ulong)c & 0xFFFFFF));
  }

//+------------------------------------------------------------------+
//| Verifica regula simpla de intrare                                 |
//+------------------------------------------------------------------+
int CheckTradeSignal()
  {
   datetime t_open;
   double open, high, low, close;

   // Preluam OHLC pentru fiecare timeframe
   if(!GetOHLC(tfH1, t_open, open, high, low, close)) return 0;
   bool h1Buy  = (close > open);
   bool h1Sell = (close < open);

   if(!GetOHLC(tfH4, t_open, open, high, low, close)) return 0;
   bool h4Buy  = (close > open);
   bool h4Sell = (close < open);

   if(!GetOHLC(tfD1, t_open, open, high, low, close)) return 0;
   bool d1Buy  = (close > open);
   bool d1Sell = (close < open);

   if(!GetOHLC(tfW1, t_open, open, high, low, close)) return 0;
   bool w1Buy  = (close > open);
   bool w1Sell = (close < open);

   // Conditii pentru BUY: toate in sus
   if(h1Buy && h4Buy && d1Buy && w1Buy) return 1;

   // Conditii pentru SELL: toate in jos
   if(h1Sell && h4Sell && d1Sell && w1Sell) return -1;

   return 0; // fara semnal clar
  }

//+------------------------------------------------------------------+
//| Functie executie ordine BUY                                       |
//+------------------------------------------------------------------+
bool OpenBuy()
  {
   double price = SymbolInfoDouble(symbol, SYMBOL_ASK);
   double sl    = price - SL_Points * _Point;
   double tp    = price + TP_Points * _Point;

   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action   = TRADE_ACTION_DEAL;
   request.symbol   = symbol;
   request.volume   = Lots;
   request.type     = ORDER_TYPE_BUY;
   request.price    = price;
   request.sl       = sl;
   request.tp       = tp;
   request.deviation= 10;
   request.magic    = 123456;
   request.comment  = ""MultiTF_Buy"";

   if(!OrderSend(request, result))
     {
      Print(""Eroare la deschiderea BUY: "", GetLastError());
      return false;
     }
   Print(""Buy deschis la "", price);
   return true;
  }

//+------------------------------------------------------------------+
//| Functie executie ordine SELL                                      |
//+------------------------------------------------------------------+
bool OpenSell()
  {
   double price = SymbolInfoDouble(symbol, SYMBOL_BID);
   double sl    = price + SL_Points * _Point;
   double tp    = price - TP_Points * _Point;

   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action   = TRADE_ACTION_DEAL;
   request.symbol   = symbol;
   request.volume   = Lots;
   request.type     = ORDER_TYPE_SELL;
   request.price    = price;
   request.sl       = sl;
   request.tp       = tp;
   request.deviation= 10;
   request.magic    = 123456;
   request.comment  = ""MultiTF_Sell"";

   if(!OrderSend(request, result))
     {
      Print(""Eroare la deschiderea SELL: "", GetLastError());
      return false;
     }
   Print(""Sell deschis la "", price);
   return true;
  }

//+------------------------------------------------------------------+
//| Functie de gestionare a trailing stop                            |
//+------------------------------------------------------------------+
void ManageTrailingStop()
  {
   ulong magic = 123456;
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionGetInteger(POSITION_MAGIC) != magic) continue;
      if(PositionGetString(POSITION_SYMBOL) != symbol) continue;

      double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
      double current_price = SymbolInfoDouble(symbol, (PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY) ? SYMBOL_BID : SYMBOL_ASK);
      double sl = PositionGetDouble(POSITION_SL);
      ENUM_POSITION_TYPE pos_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

      // Calculate profit in points
      double profit_points = (pos_type==POSITION_TYPE_BUY) ? (current_price - open_price)/_Point : (open_price - current_price)/_Point;

      if(profit_points > TrailStart)
        {
         double new_sl;
         if(pos_type==POSITION_TYPE_BUY)
           {
            new_sl = current_price - TrailStep * _Point;
            if(new_sl > sl)
              {
               // modifica SL in trailing
               ModifyPositionSL(ticket, new_sl);
              }
           }
         else
           {
            new_sl = current_price + TrailStep * _Point;
            if(new_sl < sl || sl==0)
              {
               ModifyPositionSL(ticket, new_sl);
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| Modificare SL pozitie                                            |
//+------------------------------------------------------------------+
void ModifyPositionSL(ulong ticket, double new_sl)
  {
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action   = TRADE_ACTION_SLTP;
   request.position = ticket;
   request.sl       = new_sl;
   request.tp       = PositionGetDouble(POSITION_TP);

   if(!OrderSend(request, result))
     {
      Print(""Eroare la modificarea SL: "", GetLastError());
     }
   else
      Print(""SL modificat la "", DoubleToString(new_sl, _Digits));
  }

//+------------------------------------------------------------------+
//| Functia principala OnTick                                        |
//+------------------------------------------------------------------+
void OnTick()
  {
   // 1. Afisare candela suprapusa pe fiecare timeframe
   datetime t_open; double open, high, low, close;
   if(GetOHLC(tfH1, t_open, open, high, low, close))
      DrawCandleOverlay(objNameH1, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   if(GetOHLC(tfH4, t_open, open, high, low, close))
      DrawCandleOverlay(objNameH4, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   if(GetOHLC(tfD1, t_open, open, high, low, close))
      DrawCandleOverlay(objNameD1, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   if(GetOHLC(tfW1, t_open, open, high, low, close))
      DrawCandleOverlay(objNameW1, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   // 2. Verificam semnalul
   int signal = CheckTradeSignal();

   // 3. Managementul pozitiei
   ulong magic = 123456;
   bool hasPosition = false;
   ENUM_POSITION_TYPE pos_type = POSITION_TYPE_BUY;

   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetInteger(POSITION_MAGIC) != magic) continue;
      if(PositionGetString(POSITION_SYMBOL) != symbol) continue;

      hasPosition = true;
      pos_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
      break;
     }

   // 4. Executie ordine conform semnalului si pozitiei existente
   if(signal == 1)  // BUY
     {
      if(!hasPosition || pos_type == POSITION_TYPE_SELL)
        {
         // inchidem sell daca exista
         if(hasPosition && pos_type == POSITION_TYPE_SELL)
           ClosePosition(symbol, POSITION_TYPE_SELL);

         // deschidem BUY
         OpenBuy();
        }
     }
   else if(signal == -1) // SELL
     {
      if(!hasPosition || pos_type == POSITION_TYPE_BUY)
        {
         // inchidem buy daca exista
         if(hasPosition && pos_type == POSITION_TYPE_BUY)
           ClosePosition(symbol, POSITION_TYPE_BUY);

         // deschidem SELL
         OpenSell();
        }
     }
   else
     {
      // fara semnal inchidem toate pozitiile noastre
      if(hasPosition)
        CloseAllPositions(symbol, magic);
     }

   // 5. Management trailing stop
   ManageTrailingStop();
  }

//+------------------------------------------------------------------+
//| Inchide pozitie dupa tip                                          |
//+------------------------------------------------------------------+
void ClosePosition(string symb, ENUM_POSITION_TYPE type)
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetInteger(POSITION_MAGIC) != 123456) continue;
      if(PositionGetString(POSITION_SYMBOL) != symb) continue;
      if(PositionGetInteger(POSITION_TYPE) != type) continue;

      ulong ticket = PositionGetTicket(i);
      ClosePositionByTicket(ticket);
     }
  }

//+------------------------------------------------------------------+
//| Inchide toate pozitiile pentru simbol si magic                   |
//+------------------------------------------------------------------+
void CloseAllPositions(string symb, ulong magic)
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetInteger(POSITION_MAGIC) != magic) continue;
      if(PositionGetString(POSITION_SYMBOL) != symb) continue;

      ulong ticket = PositionGetTicket(i);
      ClosePositionByTicket(ticket);
     }
  }

//+------------------------------------------------------------------+
//| Inchide pozitia dupa ticket                                       |
//+------------------------------------------------------------------+
void ClosePositionByTicket(ulong ticket)
  {
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_CLOSE_BY;
   request.position = ticket;

   if(!OrderSend(request,result))
     Print(""Eroare inchidere pozitie: "", GetLastError());
   else
     Print(""Pozitie inchisa, ticket: "", ticket);
  }
//+------------------------------------------------------------------+
"
XdEMnm0V,2025-06-19T18:44:55.853,powerampache,PHP,Thursday 19th of June 2025 11:44:55 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":93},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448069266,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
ttZtPyyw,2025-06-19T18:44:55.456,powerampache,PHP,Thursday 19th of June 2025 11:44:55 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":93},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448068830,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
byZK6NKq,2025-06-19T18:44:54.893,powerampache,PHP,Thursday 19th of June 2025 11:44:54 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":93},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448068158,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
YPMtJdvx,2025-06-19T18:44:54.546,powerampache,PHP,Thursday 19th of June 2025 11:44:54 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448067957,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
g3zzgwAp,2025-06-19T18:44:54.338,powerampache,PHP,Thursday 19th of June 2025 11:44:53 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448067747,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
ZqpRFari,2025-06-19T18:44:53.944,powerampache,PHP,Thursday 19th of June 2025 11:44:53 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448067362,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
ddSSZMEp,2025-06-19T18:44:53.625,powerampache,PHP,Thursday 19th of June 2025 11:44:53 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448067030,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
B3gW66dN,2025-06-19T18:44:53.243,powerampache,PHP,Thursday 19th of June 2025 11:44:52 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448066660,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
9eB6ry3X,2025-06-19T18:44:52.894,powerampache,PHP,Thursday 19th of June 2025 11:44:52 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448066307,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
canmUASd,2025-06-19T18:44:52.456,powerampache,PHP,Thursday 19th of June 2025 11:44:52 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448065874,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
8HNjVTMF,2025-06-19T18:44:51.987,powerampache,PHP,Thursday 19th of June 2025 11:44:51 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448065394,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
2bk0JVuq,2025-06-19T18:44:51.528,powerampache,PHP,Thursday 19th of June 2025 11:44:51 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException
	at androidx.media3.datasource.DefaultHttpDataSource.skipFully(DefaultHttpDataSource.java:744)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:455)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2008. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":3448064801,""cause"":{""dataSpec"":{""absoluteStreamPosition"":5910036,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":5910036,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":92},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":3448064801,""cause"":{""dataSpec"":{""absoluteStreamPosition"":5910036,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":5910036,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
xLZ4dGpx,Thingino Camera Grid,metalx1000,Bash,Thursday 19th of June 2025 11:18:49 AM CDT,"#!/bin/bash
######################################################################
#Copyright (C) 2025 Kris Occhipinti
#https://filmsbykris.com
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################

# Stream a grid of videos from cameras

#channel 1 is a lower resolution on thingino over channel 0
# this is better for streaming multiple cameras
cam_01=""rtsp://thingino:thingino@camera-01:554/ch1""
cam_02=""rtsp://thingino:thingino@camera-02:554/ch1""
cam_03=""rtsp://thingino:thingino@camera-03:554/ch1""

# I only have 3 cameras so create black video to fill last spot
# Create a black video source
black=""color=c=black:s=640x360"" # adjust resolution to match other videos

top_row=""[0:v][1:v]hstack=inputs=2[top];""
bottom_row=""[2:v][3:v]hstack=inputs=2[bottom];""

stack=""[top][bottom]vstack=inputs=2[v]""

ffmpeg -i ""$cam_01"" -i ""$cam_02"" -i ""$cam_03"" -f lavfi -i ""$black"" \
  -filter_complex ""${top_row}${bottom_row}${stack}"" \
  -map ""[v]"" -c:v libx264 -f nut - | ffplay -i -
"
Yt6MJM8y,Feriados,TORMENTOSOSO,JSON,Thursday 19th of June 2025 11:05:03 AM CDT,"[
    { ""dia"": 1, ""mes"": 1 },
    { ""dia"": 3, ""mes"": 3 },
    { ""dia"": 4, ""mes"": 3 },
    { ""dia"": 24, ""mes"": 3 },
    { ""dia"": 2, ""mes"": 4 },
    { ""dia"": 18, ""mes"": 4 },
    { ""dia"": 1, ""mes"": 5 },
    { ""dia"": 2, ""mes"": 5 },
    { ""dia"": 25, ""mes"": 5 },
    { ""dia"": 16, ""mes"": 6 },
    { ""dia"": 20, ""mes"": 6 },
    { ""dia"": 9, ""mes"": 7 },
    { ""dia"": 15, ""mes"": 8 },
    { ""dia"": 21, ""mes"": 11 },
    { ""dia"": 24, ""mes"": 11 },
    { ""dia"": 8, ""mes"": 12 },
    { ""dia"": 24, ""mes"": 12 },
    { ""dia"": 25, ""mes"": 12 },
    { ""dia"": 31, ""mes"": 12 }
]"
Avz5s4yB,Server,MRKERO,C++,Thursday 19th of June 2025 10:46:23 AM CDT,"ImGui::Checkbox(""Ignore Bot"", &Config.AimBot.IgnoreBot);"
p9F9BH1W,Untitled,vandanamanturgekar,HTML,Thursday 19th of June 2025 10:05:14 AM CDT,"Chromatography Reagents Market Demand, Key Players, Trends & Forecast, 2021–2032

The global chromatography reagents market size was USD 6.00 Billion in 2022 and is expected to register a steady revenue CAGR of 5.3% during the forecast period, according to latest analysis by Emergen Research. Increasing concerns about food safety and rising usage of chromatography reagents in the development of cancer drugs are factors expected to drive market revenue growth.

Global Chromatography Reagents Market research report delivers a comprehensive analysis of the market outlook, regulatory framework, and macro- and micro-economic factors influencing the growth of the market. The report is formulated through extensive research and surveys to offer accurate and authentic information about the market size, market share, product portfolio, revenue generation, and projected market growth. The report offers key insights into the competitive and regional landscape of the market to assist the stakeholders and investors in formulating strategic business plans.

Get a sample of the report from @https://www.emergenresearch.com/request-sample/1663

 Key companies profiled in the report include:

Agilent Technologies, Inc., Avantor, Inc., Bio-Rad Laboratories, Inc., General Electric Company, Kanto Kagaku Singapore Pte Ltd., Regis Technologies Inc., Merck KGaA, Tosoh Corporation, Santa Cruz Biotechnology, Inc., and Lobachemie Pvt. Ltd

Key Questions Answered by the Report:

Which region is expected to dominate the market in the coming years?

What are the recent technological and product advancements occurring in the market?

What are the key strategies adopted by the prominent players in the Chromatography Reagents market?

What are the key product types and applications of the Chromatography Reagents industry?

What is the outcome of SWOT analysis and Porter’s Five Forces analysis?

How is the competitive landscape of the Chromatography Reagents market?

Who are the key players in the industry?

What is the growth rate of the industry over the coming years?

What will be the valuation of the Chromatography Reagents Market by 2027?

Click to access the Report Study, read key highlights of the Report and Look at Projected Trends: https://www.emergenresearch.com/industry-report/chromatography-reagents-market

 Market Segmentation

Type Outlook (Revenue, USD Billion; 2019-2032)

Buffers
Solvents
HPLC-Grade Solvents
GC-Grade Solvents
Others
Derivatization Reagents
Silylation Reagents
Alkylation and Esterification Reagents
Acylation Reagents
Ion Pair Reagents
Acidic Ion-Pair Reagents
Basic Ion-Pair Reagents
Separation Mechanism Outlook (Revenue, USD Billion; 2019-2032)
Adsorption Chromatography
Partition Chromatography
Ion-Exchange Chromatography
Size-Exclusion Chromatography
Affinity Chromatography
Others
Technology Outlook (Revenue, USD Billion; 2019-2032)
Gas Chromatography Reagents
Liquid Chromatography Reagents
High Pressure Liquid Chromatography (HPLC) Reagents
Ultra High Pressure Liquid Chromatography (UHPLC) Reagents
Low Pressure Liquid Chromatography (LPLC) Reagents
Super Critical Fluid Chromatography Reagents
Thin Layer Chromatography Reagents
Paper Chromatography Reagents
Others
Regional Analysis:

Regional analysis includes an in-depth study of the key geographical regions to gain a better understanding of the market and provide an accurate analysis. The regional analysis covers North America, Latin America, Europe, Asia Pacific, and Middle East Africa. The regional analysis covers the analysis of key market segments, including revenue, CAGR, import/export, supply and demand ratio, production and consumption ratio, industrial chain analysis, and market dynamics in each region of the geographies.

Enquire for customization in Report @ https://www.emergenresearch.com/request-for-customization/1663

ToC of the report:

Chapter 1: Market overview and scope

Chapter 2: Market outlook

Chapter 3: Impact analysis of COVID-19 pandemic

Chapter 4: Competitive Landscape

Chapter 5: Drivers, Constraints, Opportunities, Limitations

Chapter 6: Key manufacturers of the industry

Chapter 7: Regional analysis

Chapter 8: Market segmentation based on type applications

Chapter 9: Current and Future Trends

Thank you for reading the report. The report can be customized as per the requirements of the clients. For further information or query about customization, please reach out to us, and we will offer you the report best suited for your needs.

Browse More Relate Reports

 

About Us:

Emergen Research is a market research and consulting company that provides syndicated research reports, customized research reports, and consulting services. Our solutions purely focus on your purpose to locate, target, and analyse consumer behavior shifts across demographics, across industries, and help clients make smarter business decisions. We offer market intelligence studies ensuring relevant and fact-based research across multiple industries, including Healthcare, Touch Points, Chemicals, Types, and Energy. We consistently update our research offerings to ensure our clients are aware of the latest trends existent in the market. Emergen Research has a strong base of experienced analysts from varied areas of expertise. Our industry experience and ability to develop a concrete solution to any research problems provides our clients with the ability to secure an edge over their respective competitors.

Contact Us:

Eric Lee

Corporate Sales Specialist

Emergen Research | Web: www.emergenresearch.com

Direct Line: +1 (604) 757-9756

E-mail: sales@emergenresearch.com

Visit for More Insights: https://www.emergenresearch.com/insights

Explore Our Custom Intelligence services | Growth Consulting Services

 "
BBXXypev,zip.c,DrAungWinHtut,C,Thursday 19th of June 2025 09:33:06 AM CDT,"#include <stdio.h>  //pound sign printf()
#include <stdlib.h> // system()

int main()
{
    system(""cls""); // This line is used to clear the console window
    printf(""Creating Zip file Hello.zip\n"");
    system(""7za a hello.zip *.*""); // This line is used to pause the console window until a key is pressed
    printf(""Zip file created successfully.\n"");
    printf(""Press any key to See File List...\n"");
    system(""pause""); // This line is used to pause the console window until a key is pressed
    system(""dir"");   // This line is used to display the list of files in the current directory
    printf(""Press any key to exit...\n"");
    system(""pause""); // This line is used to pause the console window until a key is pressed
    printf(""Exiting...\n"");
    system(""cls""); // This line is used to clear the console window
    return 0;
}"
Uke8V7q8,just_shop,SwellzD,Lua,Thursday 19th of June 2025 08:53:44 AM CDT,"-- Configuration
local CHEST_SIDE = ""top""
local MONITOR_SIDE = ""right""
local PLAYER_CHEST_SIDE = ""back""
local ADMIN_PASSWORD = ""sanabi""
local FIXED_PRICE_FACTOR = 0.1
local BUTTON_HIGHLIGHT_TIME = 0.3

-- System settings
local data = {}
local monitor = peripheral.wrap(MONITOR_SIDE)
local chest = peripheral.wrap(CHEST_SIDE)
local playerChest = peripheral.wrap(PLAYER_CHEST_SIDE)
monitor.setTextScale(0.5)
local lastHighlight = 0
local highlightedButton = nil
local inTransaction = false

-- Sync resources with chest
local function syncWithChest()
    -- Reset amounts
    for _, resource in pairs(data.resources) do
        resource.amount = 0
    end
    
    -- Scan chest
    for slot, stack in pairs(chest.list()) do
        if data.resources[stack.name] then
            data.resources[stack.name].amount = data.resources[stack.name].amount + stack.count
        end
    end
end

-- Initialize data
local function initData()
    data = {
        resources = {
            [""minecraft:iron_ingot""] = {name = ""Iron"", base = 1, amount = 0},
            [""minecraft:gold_ingot""] = {name = ""Gold"", base = 1, amount = 0},
            [""minecraft:diamond""] = {name = ""Diamond"", base = 1, amount = 0},
            [""minecraft:emerald""] = {name = ""Emerald"", base = 1, amount = 0}
        },
        balance = 0,
        discount = 1,
        selectedItem = """"
    }
    syncWithChest()
end

-- Calculate prices
local function calculatePrices()
    syncWithChest() -- Always sync before calculating
    
    local total = 0
    for _, res in pairs(data.resources) do
        total = total + res.amount
    end

    local prices = {}
    for id, res in pairs(data.resources) do
        if res.amount == 0 then
            prices[id] = {
                buy = math.huge,
                sell = res.base * FIXED_PRICE_FACTOR
            }
        else
            local buyPrice = (total / (res.amount + 1)) * res.base
            prices[id] = {
                buy = buyPrice,
                sell = buyPrice * data.discount
            }
        end
    end
    return prices
end

-- Draw numeric keyboard with cancel button
local function drawNumericKeyboard()
    local keys = {
        ""7"",""8"",""9"",
        ""4"",""5"",""6"",
        ""1"",""2"",""3"",
        ""0"",""<"",""OK""
    }
    
    local w, h = monitor.getSize()
    local keyWidth = 4
    local keyHeight = 2
    local startX = math.floor((w - 3 * keyWidth) / 2)
    local startY = h - 15
    
    for i, key in ipairs(keys) do
        local row = math.floor((i-1)/3)
        local col = (i-1) % 3
        
        local x = startX + col * (keyWidth + 1)
        local y = startY + row * (keyHeight + 1)
        
        monitor.setCursorPos(x, y)
        monitor.write(""[""..key..""]"")
    end
    
    -- Cancel button at bottom
    monitor.setCursorPos(math.floor(w/2)-5, h-2)
    monitor.write(""[ Cancel ]"")
end

-- Highlight button temporarily
local function highlightButton(name, x, y, width)
    monitor.setCursorPos(x, y)
    monitor.setBackgroundColor(colors.gray)
    monitor.write(string.rep("" "", width))
    monitor.setCursorPos(x, y)
    monitor.write(name)
    monitor.setBackgroundColor(colors.black)
    highlightedButton = {name = name, x = x, y = y, width = width}
    lastHighlight = os.clock()
end

-- Highlight key on keyboard
local function highlightKey(x, y, key)
    monitor.setCursorPos(x, y)
    monitor.setBackgroundColor(colors.gray)
    monitor.write(""[""..key..""]"")
    monitor.setBackgroundColor(colors.black)
end

-- Draw UI with button highlighting
local function drawUI(prices)
    monitor.clear()
    local w, h = monitor.getSize()
    
    -- Header with balance
    monitor.setCursorPos(1, 1)
    monitor.write(""SHOP"")
    monitor.setCursorPos(w - 10, 1)
    monitor.write(""$:""..data.balance)
    
    -- Resources list
    local y = 3
    for id, res in pairs(data.resources) do
        local isSelected = (id == data.selectedItem)
        if isSelected then
            monitor.setBackgroundColor(colors.gray)
        end
        
        monitor.setCursorPos(1, y)
        if prices[id].buy == math.huge then
            monitor.write(string.format(""%s: Sold out"", res.name))
        else
            monitor.write(string.format(""%s: buy %.1f"", res.name, prices[id].buy))
        end
        
        monitor.setCursorPos(1, y+1)
        monitor.write(string.format(""  sell: %.1f"", prices[id].sell))
        
        if isSelected then
            monitor.setBackgroundColor(colors.black)
        end
        y = y + 3
    end
    
    -- Buttons with highlighting - moved down
    local now = os.clock()
    if highlightedButton and (now - lastHighlight < BUTTON_HIGHLIGHT_TIME) then
        monitor.setCursorPos(highlightedButton.x, highlightedButton.y)
        monitor.setBackgroundColor(colors.gray)
        monitor.write(highlightedButton.name)
        monitor.setBackgroundColor(colors.black)
    else
        highlightedButton = nil
        -- Moved buttons down one line
        monitor.setCursorPos(1, h-4)
        monitor.write(""[Buy] [Sell]"")
        
        -- Admin button in bottom right corner
        monitor.setCursorPos(w - 7, h-1)
        monitor.write(""[Admin]"")
    end
end

-- Process transaction
local function processTransaction(isBuy)
    if data.selectedItem == """" then
        monitor.clear()
        monitor.setCursorPos(1, 1)
        monitor.write(""Select an item first!"")
        sleep(2)
        return
    end
    
    local resID = data.selectedItem
    inTransaction = true
    
    while inTransaction do
        monitor.clear()
        monitor.setCursorPos(1, 1)
        monitor.write(isBuy and ""BUY"" or ""SELL"")
        monitor.setCursorPos(1, 2)
        monitor.write(""Item: ""..data.resources[resID].name)
        
        local count = 0
        local inputStr = """"
        local w, h = monitor.getSize()
        local startX = math.floor((w - 3 * 4) / 2)
        local startY = h - 15
        
        -- Input amount with numeric keyboard
        local inputActive = true
        while inputActive do
            -- Clear input area
            monitor.setCursorPos(1, 3)
            monitor.write(""Amount: ""..inputStr..string.rep("" "", 10))
            
            drawNumericKeyboard()
            
            local event, side, x, y = os.pullEvent(""monitor_touch"")
            
            -- Check if Cancel button pressed
            if y >= h-3 and y <= h-1 and x >= math.floor(w/2)-5 and x <= math.floor(w/2)+5 then
                inTransaction = false
                return
            end
            
            -- Calculate which key was pressed
            local row = math.floor((y - startY) / 3)
            local col = math.floor((x - startX) / 5)
            
            if row >= 0 and col >= 0 and row <= 3 and col <= 2 then
                local keyIndex = row * 3 + col + 1
                local keys = {""7"",""8"",""9"",""4"",""5"",""6"",""1"",""2"",""3"",""0"",""<"",""OK""}
                
                if keyIndex >= 1 and keyIndex <= #keys then
                    local key = keys[keyIndex]
                    
                    -- Highlight the key briefly
                    highlightKey(startX + col * 5, startY + row * 3, key)
                    sleep(0.1) -- Make highlight visible
                    
                    if key == ""<"" then
                        inputStr = inputStr:sub(1, -2)
                    elseif key == ""OK"" then
                        count = tonumber(inputStr)
                        if count and count > 0 then
                            inputActive = false
                        end
                    else
                        inputStr = inputStr .. key
                    end
                end
            end
        end
        
        local prices = calculatePrices()
        
        if isBuy then
            if prices[resID].buy == math.huge then
                monitor.clear()
                monitor.setCursorPos(1, 1)
                monitor.write(""Error: item sold out!"")
                sleep(2)
                return
            end
            
            local cost = math.floor(prices[resID].buy * count)
            if data.balance < cost then
                monitor.clear()
                monitor.setCursorPos(1, 1)
                monitor.write(""Not enough points!"")
                sleep(2)
                return
            end
            
            -- Check stock
            local available = 0
            for _, stack in pairs(chest.list()) do
                if stack.name == resID then
                    available = available + stack.count
                end
            end
            
            if available < count then
                monitor.clear()
                monitor.setCursorPos(1, 1)
                monitor.write(""Not enough items in shop!"")
                sleep(2)
                return
            end
            
            -- Complete purchase (move to player chest)
            local moved = 0
            for slot, stack in pairs(chest.list()) do
                if stack.name == resID and count > 0 then
                    local toTake = math.min(count, stack.count)
                    -- Move to player chest
                    local transferred = chest.pushItems(peripheral.getName(playerChest), slot, toTake)
                    if transferred > 0 then
                        moved = moved + transferred
                        count = count - transferred
                        if count == 0 then break end
                    end
                end
            end
            
            if moved == 0 then
                monitor.clear()
                monitor.setCursorPos(1, 1)
                monitor.write(""Error: no space in player chest!"")
                sleep(2)
                return
            end
            
            data.balance = data.balance - math.floor(prices[resID].buy * moved)
            
            monitor.clear()
            monitor.setCursorPos(1, 1)
            monitor.write(""Success! Charged: ""..(math.floor(prices[resID].buy * moved)))
            monitor.setCursorPos(1, 2)
            monitor.write(""Balance: ""..data.balance)
            sleep(3)
            inTransaction = false
        else
            -- Sell items
            local reward = math.floor(prices[resID].sell * count)
            
            -- Check player inventory
            local available = 0
            for _, stack in pairs(playerChest.list()) do
                if stack.name == resID then
                    available = available + stack.count
                end
            end
            
            if available < count then
                monitor.clear()
                monitor.setCursorPos(1, 1)
                monitor.write(""Not enough items!"")
                sleep(2)
                return
            end
            
            -- Complete sale (move to shop chest)
            local moved = 0
            for slot, stack in pairs(playerChest.list()) do
                if stack.name == resID and count > 0 then
                    local toSell = math.min(count, stack.count)
                    -- Move to shop chest
                    local transferred = playerChest.pushItems(peripheral.getName(chest), slot, toSell)
                    if transferred > 0 then
                        moved = moved + transferred
                        count = count - transferred
                        if count == 0 then break end
                    end
                end
            end
            
            if moved == 0 then
                monitor.clear()
                monitor.setCursorPos(1, 1)
                monitor.write(""Error: no space in shop chest!"")
                sleep(2)
                return
            end
            
            data.balance = data.balance + math.floor(prices[resID].sell * moved)
            
            monitor.clear()
            monitor.setCursorPos(1, 1)
            monitor.write(""Success! Added: ""..(math.floor(prices[resID].sell * moved)))
            monitor.setCursorPos(1, 2)
            monitor.write(""Balance: ""..data.balance)
            sleep(3)
            inTransaction = false
        end
    end
    
    syncWithChest() -- Update after transaction
end

-- Admin panel
local function adminPanel()
    local adminActive = true
    while adminActive do
        monitor.clear()
        monitor.setCursorPos(1, 1)
        monitor.write(""ADMIN PANEL"")
        monitor.setCursorPos(1, 2)
        monitor.write(""Password: "")
        local inputPass = read(""*"")
        
        if inputPass ~= ADMIN_PASSWORD then
            monitor.setCursorPos(1, 3)
            monitor.write(""Wrong password!"")
            sleep(2)
            return
        end
        
        local choice = 0
        while choice ~= 4 do
            monitor.clear()
            monitor.setCursorPos(1, 1)
            monitor.write(""1. Add resource"")
            monitor.setCursorPos(1, 2)
            monitor.write(""2. Change discount"")
            monitor.setCursorPos(1, 3)
            monitor.write(""3. Set balance"")
            monitor.setCursorPos(1, 4)
            monitor.write(""4. Back"")
            
            choice = tonumber(read())
            if choice == 1 then
                monitor.setCursorPos(1, 5)
                monitor.write(""Item ID: "")
                local id = read()
                
                monitor.setCursorPos(1, 6)
                monitor.write(""Name: "")
                local name = read()
                
                monitor.setCursorPos(1, 7)
                monitor.write(""Base price: "")
                local base = tonumber(read())
                
                if id and name and base then
                    data.resources[id] = {
                        name = name,
                        base = base,
                        amount = 0
                    }
                    monitor.setCursorPos(1, 8)
                    monitor.write(""Resource added!"")
                    sleep(2)
                end
            elseif choice == 2 then
                monitor.setCursorPos(1, 5)
                monitor.write(""New discount (0.1-0.9): "")
                local discount = tonumber(read())
                
                if discount and discount >= 0.1 and discount <= 0.9 then
                    data.discount = discount
                    monitor.setCursorPos(1, 6)
                    monitor.write(""Discount updated!"")
                    sleep(2)
                end
            elseif choice == 3 then
                monitor.setCursorPos(1, 5)
                monitor.write(""New balance: "")
                local newBalance = tonumber(read())
                
                if newBalance then
                    data.balance = newBalance
                    monitor.setCursorPos(1, 6)
                    monitor.write(""Balance updated!"")
                    sleep(2)
                end
            elseif choice == 4 then
                adminActive = false
            end
        end
    end
end

-- Main loop
initData()

while true do
    local prices = calculatePrices()
    drawUI(prices)
    
    local event, side, x, y = os.pullEvent(""monitor_touch"")
    local w, h = monitor.getSize()
    
    -- Resource selection
    if y >= 3 and y <= h-5 then
        local resourceY = 3
        for id, res in pairs(data.resources) do
            if y >= resourceY and y < resourceY + 2 then
                data.selectedItem = id
                break
            end
            resourceY = resourceY + 3
        end
    end
    
    -- Button handling with highlighting
    if not inTransaction then
        -- Buy/Sell buttons moved down to h-4
        if y >= h-4 and y <= h-3 then
            if x >= 1 and x <= 4 then -- Buy
                highlightButton(""Buy"", 1, h-4, 4)
                processTransaction(true)
            elseif x >= 6 and x <= 10 then -- Sell
                highlightButton(""Sell"", 6, h-4, 4)
                processTransaction(false)
            end
        -- Admin button in bottom right corner
        elseif y >= h-1 and x >= w-7 and x <= w-1 then
            highlightButton(""Admin"", w-7, h-1, 7)
            adminPanel()
        end
    end
end"
ZWYgqjZz,2025-06-19T16:39:33.747,powerampache,PHP,Thursday 19th of June 2025 08:39:34 AM CDT,"1.00-68 (68) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
XF6a1n9z,Convertis un nombre en hexadécimal ou en binaire,AntonioVillanueva,C++,Thursday 19th of June 2025 08:00:55 AM CDT,"//Decimal to bin & hex Antonio Villanueva Segura
//#include <cstdlib>
#include <iomanip>
#include <iostream>
using namespace std;

class Converts{
	public:
	Converts(int n):num(n){};
	
	string inToBin(){
		string tmp="""";
		int bit=1;
		
		while ( bit <=num){	//Convertis un nombre en binaire		
			tmp += ( num^bit) ? ""1"":""0"";
			bit = ( bit<<1 );// bit*2
		}
		return tmp;		
	}
	
	string intToHex(){//Convertis un nombre en hexadécimal 
		std::stringstream ss;
		ss << ""0x""<<std::hex<< num;
		return ss.str();
	}
	
	private:
	int num;
	
};

int main(int argc, char *argv[])
{
	
	Converts x(16);
	cout <<x.intToHex()<<endl;//Convertis un nombre en hexadécimal
	cout << x.inToBin() << endl;//Convertis un nombre en binaire
	
	return 0;
}

"
LUdp9Z0f,Untitled,Glenpl,C++,Thursday 19th of June 2025 07:58:45 AM CDT,"

pon
Bezpieczeństwo systemów bazodanowych i pracy w chmurze 11:30 - 13:00 | 13:15 - 14:45
[LOW] Ochrona danych i prywatności w Internecie | 13:15 - 14:45
[LOW] Przetwarzanie języka naturalnego i sztuczna inteligencja 13:15 - 14:45 | 15:00 - 16:30
[LOW] [WYK] Wprowadzenie do bezpieczeństwa IoT 16:45 - 18:15

wt

sr
[LOW] [?] [KON] Web 2.0 i media społecznościowe 8:00 - 9:30
[LOW] [KON] Nowoczesne trendy zarządzania przedsiębiorstwem 9:45 - 11:15
[[mider stare 9:45 - 11:15 i 11:30 - 13:00]] -- bierz grupę drugą 
[PRIO] Bezpieczeństwo systemów 11:30 - 14:45 | 15:00 - 18:15 

czw

pt

"
3hBAMT1d,StorageUserInput,Blackhome,Lua,Thursday 19th of June 2025 07:52:19 AM CDT,"-- pastebin get 3hBAMT1d UserInput

-- === User Interface für Lagerabfrage ===
local STORAGE_DISK_LABEL = ""Data Storage""
local USER_DISK_LABEL = ""User Task""

-- === Utility-Funktionen ===
local function getDiskByLabel(label)
    for _, side in ipairs(peripheral.getNames()) do
        if peripheral.getType(side) == ""drive"" then
            local disk = peripheral.wrap(side)
            if disk.getDiskLabel() == label then
                return disk, disk.getMountPath()
            end
        end
    end
    return nil, nil
end


local function loadStoredItems()
    local _, path = getDiskByLabel(STORAGE_DISK_LABEL)
    if not path then
        error(""Storage Disk nicht gefunden."")
    end
    local filePath = fs.combine(path, ""storedItems.txt"")
    if not fs.exists(filePath) then
        error(""Keine gespeicherten Items vorhanden."")
    end
    local file = fs.open(filePath, ""r"")
    local data = textutils.unserialize(file.readAll())
    file.close()
    return data or {}
end

local function getTaskList(path)
    if not fs.exists(path) then return {} end
    local file = fs.open(path, ""r"")
    local data = textutils.unserialize(file.readAll())
    file.close()
    return data or {}
end

local function saveTaskList(path, taskList)
    local file = fs.open(path, ""w"")
    file.write(textutils.serialize(taskList))
    file.close()
end

local function addTaskToList(path, task)
    local tasks = getTaskList(path)
    table.insert(tasks, task)
    saveTaskList(path, tasks)
end

local function saveTaskToUserDisk(task)
    local _, path = getDiskByLabel(USER_DISK_LABEL)
    if not path then
        error(""User Disk nicht gefunden."")
    end
    local filePath = fs.combine(path, ""task_list.txt"")

    addTaskToList(filePath, task)
end

function isTaskSlotFree()
    local disk, path = getDiskByLabel(USER_DISK_LABEL)

    if not path then
        error(""No disk detected under the computer!"")
        return false
    end

    local fullPath = fs.combine(path, ""task_list.txt"")
    local taskList = getTaskList(fullPath)

    if #taskList == 0 then
        return true
    end
    return false
end

-- === Eingabebehandlung ===
local function classifyInput(input)
    if input:find("":"") then
        return ""itemName""
    elseif input:match(""^[A-Z]"") then
        return ""displayName""
    else
        return ""bareItemName""
    end
end

-- === Hauptprogramm ===
local function main()
    if not isTaskSlotFree() then
        sleep(0.5)
        return
    end
    term.clear()
    term.setCursorPos(1, 1)
    print(""Was möchtest du aus dem Lager holen?"")
    io.write(""> "")
    local userInput = read()

    local inputType = classifyInput(userInput)
    local storedItems = loadStoredItems()

    local matchedItem = nil

    for _, item in ipairs(storedItems) do
        if inputType == ""displayName"" and item.itemDisplayName == userInput then
            matchedItem = item
            break
        elseif inputType == ""itemName"" and item.itemName == userInput then
            matchedItem = item
            break
        elseif inputType == ""bareItemName"" and item.itemName == ""minecraft:"" .. userInput then
            matchedItem = item
            break
        end
    end

    if not matchedItem then
        print(""Item nicht im Lager gefunden."")
        return
    end

    local available = matchedItem.itemCount - (matchedItem.itemOutgoingAmount or 0)
    print(""Verfügbare Anzahl von \"""" .. matchedItem.itemDisplayName .. ""\"": "" .. available)

    io.write(""Wie viele möchtest du?: "")
    local requested = tonumber(read())

    if not requested or requested <= 0 then
        print(""Ungültige Anzahl."")
        return
    elseif requested > available then
        print(""Nicht genügend im Lager vorhanden."")
        return
    end

    -- Task erzeugen
    local task = {
        taskType = ""get_items"",
        itemName = matchedItem.itemName,
        itemDisplayName = matchedItem.itemDisplayName,
        itemCount = requested,
        itemStackSize = matchedItem.stackSize
    }

    saveTaskToUserDisk(task)

    print(""Task erfolgreich erstellt."")
    sleep(1)
end

while true do
    main()
end"
xZFhAcuR,edit WP single post appending /edit to the URL,digitalfastmind,PHP,Thursday 19th of June 2025 07:45:25 AM CDT,"//edit single post via /edit on post
function redirect_to_editor() {
    // Check if the request contains /edit
    if (strpos($_SERVER['REQUEST_URI'], '/edit') !== false) {
        // Get the current URL without the /edit part
        $current_url = $_SERVER['REQUEST_URI'];
        $edit_url = str_replace('/edit', '', $current_url);

        // Remove any trailing slashes to prevent issues
        $edit_url = rtrim($edit_url, '/');

        // Log the edit URL for debugging
        error_log('Edit URL: ' . $edit_url);

        // Get the post ID from the URL
        $post_id = url_to_postid($edit_url);

        // Log the post ID for debugging
        error_log('Post ID: ' . $post_id);

        // Check if a valid post ID is found
        if ($post_id) {
            // Redirect to the post editor
            wp_redirect(admin_url('post.php?post=' . $post_id . '&action=edit'));
            exit;
        } else {
            // If post ID is not found, return a 404
            global $wp_query;
            $wp_query->set_404();
            status_header(404);
            nocache_headers();
            include(get_404_template());
            exit;
        }
    }
}
add_action('template_redirect', 'redirect_to_editor');"
DxP94B0P,Untitled,thewitchking,Java,Thursday 19th of June 2025 07:33:44 AM CDT,"public static Map<String, Double> calculateNetBalances(List<Expense> expenses) {
    Map<String, Double> netBalances = new HashMap<>();

    for (Expense expense : expenses) {
        String paidBy = expense.paidBy;

        // Total amount paid by this user (credited)
        double totalAmount = 0;
        for (ExpenseSplit split : expense.splits) {
            totalAmount += split.amount;
        }

        // Credit the payer
        netBalances.put(paidBy, netBalances.getOrDefault(paidBy, 0.0) + totalAmount);

        // Debit each participant
        for (ExpenseSplit split : expense.splits) {
            netBalances.put(split.user, netBalances.getOrDefault(split.user, 0.0) - split.amount);
        }
    }

    return netBalances;
}"
fXJyGVUB,2025-06-19T15:28:15.780496,powerampache,PHP,Thursday 19th of June 2025 07:28:17 AM CDT,"1.01-76 (76) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
dkzdrrck,Untitled,thewitchking,Java,Thursday 19th of June 2025 07:27:02 AM CDT,"public static List<Settlement> simplifyDebts(Map<String, Double> netBalances) {

        // Max-heap for creditors
        PriorityQueue<UserBalance> creditors = new PriorityQueue<>(
            (a, b) -> Double.compare(b.amount, a.amount)
        );

        // Min-heap for debtors
        PriorityQueue<UserBalance> debtors = new PriorityQueue<>(
            Comparator.comparingDouble(a -> a.amount)
        );

        // Divide users into creditors and debtors
        for (Map.Entry<String, Double> entry : netBalances.entrySet()) {
            if (entry.getValue() > 0) {
                creditors.add(new UserBalance(entry.getKey(), entry.getValue()));
            } else if (entry.getValue() < 0) {
                debtors.add(new UserBalance(entry.getKey(), entry.getValue()));
            }
        }

        List<Settlement> settlements = new ArrayList<>();

        while (!creditors.isEmpty() && !debtors.isEmpty()) {
            UserBalance creditor = creditors.poll();
            UserBalance debtor = debtors.poll();

            double settlementAmount = Math.min(creditor.amount, -debtor.amount);

            settlements.add(new Settlement(debtor.user, creditor.user, settlementAmount));

            creditor.amount -= settlementAmount;
            debtor.amount += settlementAmount;

            // Push them back if there's remaining balance
            if (creditor.amount > 0) creditors.add(creditor);
            if (debtor.amount < 0) debtors.add(debtor);
        }

        return settlements;
    }"
crn1VAaE,Untitled,gravitiq,Go,Thursday 19th of June 2025 06:48:18 AM CDT,"package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/mattn/go-sqlite3""

	""github.com/nats-io/nats.go""
)

// Storage — структура хранилища с клиентом *sql.DB
type Storage struct {
	db *sql.DB
}

// NewStorage — конструктор хранилища, сам создает клиент *sql.DB
func NewStorage(dsn string) (*Storage, error) {
	db, err := sql.Open(""sqlite3"", dsn)
	if err != nil {
		return nil, err
	}

	s := &Storage{
		db: db,
	}
	return s, nil
}

func (s *Storage) Set(key, value string) error {
	_, err := s.db.Exec(`CREATE TABLE IF NOT EXISTS data (k TEXT PRIMARY KEY, v TEXT)`)
	if err != nil {
		return err
	}

	_, err = s.db.Exec(`INSERT OR REPLACE INTO data(k, v) VALUES (?, ?)`, key, value)
	if err != nil {
		return err
	}

	return nil
}

func (s *Storage) Get(key string) (string, error) {
	row := s.db.QueryRow(`SELECT v FROM data WHERE k = ?`, key)

	var value string

	err := row.Scan(&value)
	if err != nil {
		return """", err
	}

	return value, nil
}

// NATS — структура NATS с клиентом *nats.Conn
type NATS struct {
	conn *nats.Conn
}

// NewNATS — конструктор, сам создает клиента *nats.Conn
func NewNATS(url string) (*NATS, error) {
	conn, err := nats.Connect(url)
	if err != nil {
		return nil, err
	}

	n := &NATS{
		conn: conn,
	}
	return n, nil
}

func (n *NATS) Publish(subject, message string) error {
	err := n.conn.Publish(subject, []byte(message))
	if err != nil {
		return err
	}

	return nil
}

// Service — бизнес логика
type Service struct {
	storage *Storage
	nats    *NATS
}

func NewService(storage *Storage, nats *NATS) *Service {
	s := &Service{
		storage: storage,
		nats:    nats,
	}
	return s
}

func (s *Service) SaveData(key, value string) error {
	err := s.storage.Set(key, value)
	if err != nil {
		return err
	}

	err = s.nats.Publish(""updates"", fmt.Sprintf(""%s=%s"", key, value))
	if err != nil {
		return err
	}

	return nil
}

// Handlers — структура хендлеров
type Handlers struct {
	service *Service
}

func NewHandlers(service *Service) *Handlers {
	h := &Handlers{
		service: service,
	}
	return h
}

func (h *Handlers) HandleRequest(key, value string) error {
	err := h.service.SaveData(key, value)
	if err != nil {
		return err
	}

	fmt.Println(""Request handled"")
	return nil
}

func main() {
	storage, err := NewStorage("":memory:"")
	if err != nil {
		log.Fatal(err)
	}

	natsConn, err := NewNATS(nats.DefaultURL)
	if err != nil {
		log.Fatal(err)
	}

	service := NewService(storage, natsConn)
	handlers := NewHandlers(service)

	err = handlers.HandleRequest(""foo"", ""bar"")
	if err != nil {
		log.Fatal(err)
	}

	value, err := storage.Get(""foo"")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf(""Stored value: %s\n"", value)
}
"
gSTKwmfN,dataNone,TestGuy1,JSON,Thursday 19th of June 2025 06:00:04 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c81050fda84d6b87b8e25e096cf4b4a935a4d9aff8523f9b95b835f9b5ec9dddd0732b0d5443b37b632d3f550964599d591f24169ee4528ef5a4a6442dea27024396e9cad55c05c1cdfdca3dffc45fe72bfddf951c5625518b4e33f8ef4731a91a062699172b63952728ac4fc44564d6926960229f0636823cc9abc804729d7b',
  otherdata: [
    '3a18bd44e67f56894a846321bf37a92e',
    '6ee5f21870d5541d9e334f8938acd2d2',
    '69eb0014b78fb3bd65d454a24518de42',
    '91c51ad8f728e478258c2f898d775ed0',
    '5686d5452cb2b33736ad7b3da324c77d',
    '87a18ac9bc7386fc9ee88d994ece0ee3',
    'fa55ebfe716aa68babfbf875fd11721a',
    '00105a489ac24c8efc4bed71d3763266'
  ]
}"
5PEva6nU,Min number in an Array,Anonymous0069,C++,Thursday 19th of June 2025 05:49:08 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int size;
    cout << ""Enter the number of numbers you want to enter: "";
    cin >> size;

    int num[size];
    cout << ""Enter the numbers: "";

    for (int i = 0; i < size; i++) {
        cin >> num[i];
    }

    int minNum = num[0];  // assume first is minimum

    for (int i = 1; i < size; i++) {
        if (num[i] < minNum) {
            minNum = num[i];
        }
    }

    cout << ""The minimum number is: "" << minNum << endl;

    return 0;
}
"
5MUtE9rb,Untitled,DeEskalator,Swift,Thursday 19th of June 2025 05:35:55 AM CDT,"/// Process an image and return the first table detected
    func extractTable(from image: Data) async throws -> DocumentObservation.Container.Table {
        
        // The Vision request.
        let request = RecognizeDocumentsRequest()
        
        // Perform the request on the image data and return the results.
        let observations = try await request.perform(on: image)

        // Get the first observation from the array.
        guard let document = observations.first?.document else {
            throw AppError.noDocument
        }
        
        // Extract the first table detected.
        guard let table = document.tables.first else {
            throw AppError.noTable
        }
        
        return table
    }
    
    /// Extract name, email addresses, and phone number from a table into a list of contacts.
    private func parseTable(_ table: DocumentObservation.Container.Table) {
        var foundItems = [Contact]()
        
        // Iterate over each row in the table.
        for row in table.rows {
            // The contact name will be taken from the first column.
            guard let firstCell = row.first else {
                continue
            }
            // Extract the text content from the transcript.
            let name = firstCell.content.text.transcript
            
            // Look for emails and phone numbers in the remaining cells.
            var detectedPhone: String? = nil
            var detectedEmail: String? = nil
            
            for cell in row.dropFirst() {
                // Get all detected data in the cell, then match emails and phone numbers.
                let allDetectedData = cell.content.text.detectedData
                for data in allDetectedData {
                    switch data.match.details {
                    case .emailAddress(let email):
                        detectedEmail = email.emailAddress
                    case .phoneNumber(let phoneNumber):
                        detectedPhone = phoneNumber.phoneNumber
                    default:
                        break
                    }
                }
            }
            // Create a contact if an email was detected.
            if let email = detectedEmail {
                let contact = Contact(name: name, email: email, phoneNumber: detectedPhone)
                foundItems.append(contact)
            }
        }
        contacts = foundItems
    }"
EJSLtg7B,Смяна дата на плащане,horozov86,SQL,Thursday 19th of June 2025 05:25:23 AM CDT,"select * from aopkopf where belegnummer='523736';
 
select * from aopkopf where idparent=83449636;

update aopkopf
set aopkopf.belegdatum = '19-JUN-25'
WHERE idparent=83449636"
bXGtbjwB,Ejercico vectores,AntonioVillanueva,C++,Thursday 19th of June 2025 04:58:58 AM CDT,"#include <cstdlib>
#include <iomanip>
 /*
Antonio Villanueva Segura
Array exercise 
You are given two arrays arr1 and arr2, where arr2 always contains integers.
Write a function such that:
For arr1 = ['a', 'a', 'a', 'a', 'a'], arr2 = [2, 4] the function returns ['a', 'a']
For arr1 = [0, 1, 5, 2, 1, 8, 9, 1, 5], arr2 = [1, 4, 7] the function returns [1, 1, 1]
For arr1 = [0, 3, 4], arr2 = [2, 6] the function returns [4]
For arr1=[""a"",""b"",""c"",""d""] , arr2=[2,2,2], the function returns [""c"",""c"",""c""]
For arr1=[""a"",""b"",""c"",""d""], arr2=[3,0,2] the function returns [""d"",""a"",""c""]
Note that when an element inside arr2 is greater than the index of the last element of arr1 no element of arr1 should be added to the resulting array. If either arr1 or arr2 is empty, you should return an empty arr (empty list in python, empty vector in c++). Note for c++ use std::vector arr1, arr2.

  */

#include <iostream>
#include <vector>
using namespace std;

template <typename T,typename U>
class Arrays {

public:

  // Constructeur
  Arrays(const std::vector<T>& a , const std::vector<U>& b) : chaine(a),index(b) {}
 
  void printVector(){
	  printVector(chaine);
	  printVector(index);	  
  }
  
 std::vector<T> cutVector(){
	  std::vector<T> tmp; 
	  for (const auto& i : index) {
		  try{
				chaine.at(i);
				tmp.push_back (chaine[i]);
			}catch (const std::out_of_range& e){
			}
	  }
	  return tmp;
  }
  
  template <typename V>
  void printVector (const std::vector<V>& v){ //Print vector  
	
    for (const auto& elem : v) {
      std::cout << elem << "","";
    }       
    std::cout <<"" - "";
  } 
  

private:
   std::vector<T> chaine;
   std::vector<U> index;   
};
  
 


int main(int argc, char *argv[])
{
  
  std::vector <char> arr1_a  {'a', 'a', 'a', 'a', 'a'};//arr2 = [2, 4] the function returns ['a', 'a']
  std::vector<int>  arr2_a  {2, 4} ;
  
  std::vector <int> arr1_b  {0, 1, 5, 2, 1, 8, 9, 1, 5};// arr2 = [1, 4, 7] the function returns [1, 1, 1]
  std::vector<int> arr2_b {1, 4, 7};
  
  std::vector <int> arr1_c {0, 3, 4};// arr2 = [2, 6] the function returns [4]
  std::vector<int> arr2_c {2, 6};
  
  std::vector <char> arr1_d {'a','b','c','d'} ;// arr2=[2,2,2], the function returns [""c"",""c"",""c""]
  std::vector<int> arr2_d {2,2,2};
  
  std::vector <char>  arr1_e {'a','b','c','d'};// arr2=[3,0,2] the function returns [""d"",""a"",""c""]
  std::vector<int>  arr2_e {3,0,2};
  
 
  Arrays <char,int> a (arr1_a,arr2_a);
  a.printVector (a.cutVector());
    
  Arrays <int,int> b (arr1_b,arr2_b);
  b.printVector (b.cutVector());  
  
  Arrays <int,int> c (arr1_c,arr2_c);
  c.printVector (c.cutVector());   
  
  Arrays <char,int> d (arr1_d,arr2_d);
  d.printVector (d.cutVector());   
  
  Arrays <char,int> e (arr1_e,arr2_e);
  e.printVector (e.cutVector());   
  

  
}
"
KHqQdZvn,Untitled,zn4v_,Lua,Thursday 19th of June 2025 04:20:16 AM CDT,"local OrionLib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/jensonhirst/Orion/main/source""))()
local Players = game:GetService(""Players"")
local player = Players.LocalPlayer

-- مفتاح التفعيل الصحيح
local correctKey = ""XlCOw-5mcj3q3yo-2Teff0b34""

-- نافذة طلب مفتاح التفعيل
local KeyWindow = OrionLib:MakeWindow({
    Name = ""Fltr Hub - Activation"",
    HidePremium = true,
    SaveConfig = false,
    IntroEnabled = false,
    NoClose = true,
})

local keyValid = false

KeyWindow:MakeTab({
    Name = ""Activation"",
}):AddTextbox({
    Name = ""Enter Key"",
    PlaceholderText = ""ادخل مفتاح التفعيل هنا"",
    Callback = function(inputKey)
        if inputKey == correctKey then
            keyValid = true
            OrionLib:MakeNotification({
                Name = ""Success"",
                Content = ""تم التفعيل بنجاح! جاري فتح الواجهة..."",
                Image = ""rbxassetid://4483345998"",
                Time = 3
            })
            KeyWindow:Destroy() -- إغلاق نافذة التفعيل
        else
            OrionLib:MakeNotification({
                Name = ""Error"",
                Content = ""المفتاح غير صحيح، حاول مرة أخرى."",
                Image = ""rbxassetid://4483345998"",
                Time = 3
            })
        end
    end,
})

-- نوقف تنفيذ السكربت حتى يدخل المستخدم المفتاح الصحيح
repeat
    wait()
until keyValid

-- الآن يستمر السكربت الأصلي (واجهة الـ Hub)
-- Fltr Hub | Created by Majid (مجودي)
-- تم تجميع السكربتات كاملة بدون روابط

-- المكتبات والخدمات
local OrionLib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/jensonhirst/Orion/main/source""))()
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")
local player = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- واجهة الهب
local Window = OrionLib:MakeWindow({
Name = ""Fltr Hub"",
HidePremium = false,
SaveConfig = true,
ConfigFolder = ""FltrHubConfig"",
IntroEnabled = true,
IntroText = ""Welcome to Fltr Hub 💀"",
Icon = ""rbxassetid://4483345998"",
IntroIcon = ""rbxassetid://4483345998""
})


---

-- 🎯 Aimbot Tab

local AimbotTab = Window:MakeTab({ Name = ""🎯 Aimbot"", Icon = """", PremiumOnly = false })

local aimbotEnabled = false
local aimButtonGui

AimbotTab:AddButton({
Name = ""🔫 تفعيل Aimbot"",
Callback = function()
aimbotEnabled = not aimbotEnabled

if aimButtonGui == nil then  
		aimButtonGui = Instance.new(""ScreenGui"", game.CoreGui)  
		local btn = Instance.new(""TextButton"", aimButtonGui)  
		btn.Size = UDim2.new(0, 150, 0, 40)  
		btn.Position = UDim2.new(0.5, -75, 0.9, 0)  
		btn.Text = ""Aimbot: OFF""  
		btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)  
		btn.TextColor3 = Color3.new(1, 1, 1)  
		btn.TextSize = 18  
		btn.MouseButton1Click:Connect(function()  
			aimbotEnabled = not aimbotEnabled  
			btn.Text = aimbotEnabled and ""Aimbot: ON"" or ""Aimbot: OFF""  
		end)  
	end  

	RunService.RenderStepped:Connect(function()  
		if aimbotEnabled then  
			local closest, dist = nil, math.huge  
			for _, p in pairs(Players:GetPlayers()) do  
				if p ~= player and p.Character and p.Character:FindFirstChild(""Head"") then  
					local mag = (p.Character.Head.Position - player.Character.Head.Position).Magnitude  
					if mag < dist then  
						closest = p  
						dist = mag  
					end  
				end  
			end  
			if closest then  
				Camera.CFrame = CFrame.new(Camera.CFrame.Position, closest.Character.Head.Position)  
			end  
		end  
	end)  
end

})

local circleVisible, circleRadius = false, 100
local circleObj

AimbotTab:AddToggle({
Name = ""⭕ إظهار دائرة التصويب"",
Default = false,
Callback = function(val)
circleVisible = val
if val then
circleObj = Drawing.new(""Circle"")
circleObj.Thickness = 2
circleObj.Radius = circleRadius
circleObj.Color = Color3.new(1, 0, 0)
circleObj.Filled = false
circleObj.Visible = true
RunService.RenderStepped:Connect(function()
if circleVisible and circleObj then
circleObj.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end
end)
elseif circleObj then
circleObj:Remove()
circleObj = nil
end
end
})

AimbotTab:AddTextbox({
Name = ""🎯 حجم الدائرة"",
Default = ""100"",
Callback = function(val)
local num = tonumber(val)
if num and circleObj then
circleObj.Radius = num
end
end
})

AimbotTab:AddButton({
Name = ""🌈 تغيير لون الدائرة (RGB)"",
Callback = function()
spawn(function()
while circleVisible and circleObj do
for i = 0, 1, 0.01 do
circleObj.Color = Color3.fromHSV(i, 1, 1)
wait()
end
end
end)
end
})

AimbotTab:AddButton({
Name = ""🎯 تصغير مؤشر السلاح"",
Callback = function()
if player.PlayerGui:FindFirstChild(""Crosshair"") then
player.PlayerGui.Crosshair.Size = UDim2.new(0, 15, 0, 15)
end
end
})


---

-- 👁️ ESP Tab

local ESPTab = Window:MakeTab({ Name = ""👁️ ESP"", Icon = """", PremiumOnly = false })

ESPTab:AddButton({
Name = ""👤 إظهار معلومات اللاعب"",
Callback = function()
for _, p in pairs(Players:GetPlayers()) do
if p ~= player and p.Character and p.Character:FindFirstChild(""Head"") then
local bill = Instance.new(""BillboardGui"", p.Character.Head)
bill.Size = UDim2.new(0, 200, 0, 50)
bill.AlwaysOnTop = true
bill.Name = ""ESP_Info""
local label = Instance.new(""TextLabel"", bill)
label.Size = UDim2.new(1, 0, 1, 0)
label.Text = string.format(""%s | ID: %d"", p.Name, p.UserId)
label.BackgroundTransparency = 1
label.TextColor3 = Color3.new(1, 1, 1)
end
end
end
})


---

-- 🧍 Player Tab

local PlayerTab = Window:MakeTab({ Name = ""🧍 Player"", Icon = """", PremiumOnly = false })

PlayerTab:AddButton({
Name = ""🔁 إعادة تعيين اللاعب"",
Callback = function()
local hum = player.Character and player.Character:FindFirstChild(""Humanoid"")
if hum then hum.Health = 0 end
end
})

PlayerTab:AddButton({
Name = ""🚪 تفعيل Noclip"",
Callback = function()
RunService.Stepped:Connect(function()
for _, part in ipairs(player.Character:GetDescendants()) do
if part:IsA(""BasePart"") then
part.CanCollide = false
end
end
end)
end
})

PlayerTab:AddButton({
Name = ""❤️ منع الموت"",
Callback = function()
local hum = player.Character:WaitForChild(""Humanoid"")
hum:GetPropertyChangedSignal(""Health""):Connect(function()
if hum.Health < 100 then hum.Health = 100 end
end)
end
})

-- 🚗 Car Tab

local CarTab = Window:MakeTab({ Name = ""🚗 Car"", Icon = """", PremiumOnly = false })

CarTab:AddButton({
Name = ""⬆️ رفع السيارة"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength += 1.5
end
end
end
})

CarTab:AddButton({
Name = ""⬇️ خفض السيارة"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength -= 1.5
end
end
end
})

CarTab:AddButton({
Name = ""🔁 إعادة السيارة للوضع الطبيعي"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength = 2.5
end
end
end
})

CarTab:AddButton({
Name = ""🚘 رسبنة السيارة أمامك"",
Callback = function()
local carModel = game.ReplicatedStorage:WaitForChild(""MyCar""):Clone()
carModel.Parent = Workspace
carModel:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -10))
end
})

CarTab:AddButton({
Name = ""🪑 الجلوس تلقائي في السيارة"",
Callback = function()
local seat = Workspace:FindFirstChildWhichIsA(""VehicleSeat"", true)
if seat then
player.Character:MoveTo(seat.Position)
wait(1)
seat:Sit(player.Character:WaitForChild(""Humanoid""))
end
end
})


---

-- 🏦 Robbery Status Tab

local RobberyTab = Window:MakeTab({ Name = ""🏦 Robbery"", Icon = """", PremiumOnly = false })

RobberyTab:AddButton({
Name = ""💰 التحقق من حالة البنك والمجوهرات"",
Callback = function()
--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")

local jewelryUIs = {}

local function createShadow(frame)
    local shadow = Instance.new(""ImageLabel"")
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, 5, 0, 5)
    shadow.BackgroundTransparency = 1
    shadow.Image = ""rbxassetid://6014261993"" 
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.ZIndex = 0
    shadow.Parent = frame
end

local player = Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local existingGui = playerGui:FindFirstChild(""RobberyNotifier"")
if existingGui then
    existingGui:Destroy()
end

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""RobberyNotifier""
screenGui.Parent = playerGui

local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 400, 0, 60)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.new(30/255, 30/255, 30/255)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local uiCorner = Instance.new(""UICorner"")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = frame

local uiGradient = Instance.new(""UIGradient"")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.new(40/255, 40/255, 40/255)),
    ColorSequenceKeypoint.new(1, Color3.new(50/255, 50/255, 50/255))
}
uiGradient.Parent = frame

createShadow(frame) 

local bankLabel = Instance.new(""TextLabel"")
bankLabel.Size = UDim2.new(1, -20, 1, 0)
bankLabel.Position = UDim2.new(0, 10, 0, 0)
bankLabel.BackgroundTransparency = 1
bankLabel.TextColor3 = Color3.new(255/255, 255/255, 255/255)
bankLabel.Text = ""Bank Status: Checking...""
bankLabel.Font = Enum.Font.Gotham
bankLabel.TextSize = 18
bankLabel.Parent = frame

local bankRobbery = Workspace.Robberies:WaitForChild(""BankRobbery"")
local lightGreen = bankRobbery:WaitForChild(""LightGreen"")
local lightRed = bankRobbery:WaitForChild(""LightRed"")
local jewelerRobbery = Workspace.Robberies:WaitForChild(""JewelerRobbery"")
local robbables = jewelerRobbery:WaitForChild(""Robbables"")

local bankWasClosed = false

local function checkBankStatus()
    local greenBrickColor = lightGreen.BrickColor
    local redColor = lightRed.Color

    if greenBrickColor == BrickColor.new(""Camo"") then
        bankLabel.Text = ""Bank Status: Open""
        bankLabel.TextColor3 = Color3.new(0/255, 255/255, 0/255)
        if bankWasClosed then
            bankLabel.Text = ""Bank Status: Open (Just Opened!)""
            spawn(function()
                wait(3)
                if bankLabel.Text == ""Bank Status: Open (Just Opened!)"" then
                    bankLabel.Text = ""Bank Status: Open""
                end
            end)
        end
        bankWasClosed = false
    else
        bankLabel.Text = ""Bank Status: Closed""
        bankLabel.TextColor3 = Color3.new(255/255, 255/255, 0/255)
        bankWasClosed = true
    end
end

local function checkJewelryStatus()
    for model, uiFrame in pairs(jewelryUIs) do
        if model:GetAttribute(""Broken"") then
            uiFrame:Destroy()
            jewelryUIs[model] = nil
        end
    end

    task.spawn(function() 
        for _, model in pairs(robbables:GetChildren()) do
            if model:IsA(""Model"") then
                local enabled = model:GetAttribute(""Enabled"")
                local broken = model:GetAttribute(""Broken"")
    
                if enabled and not broken and not jewelryUIs[model] then
                    local uiFrame = Instance.new(""Frame"")
                    uiFrame.Size = UDim2.new(0, 400, 0, 50)
                    uiFrame.Position = UDim2.new(0, 10, 0, 80 + (#jewelryUIs * 60))
                    uiFrame.BackgroundColor3 = Color3.new(40/255, 40/255, 40/255)
                    uiFrame.BorderSizePixel = 0
                    uiFrame.Parent = screenGui
    
                    local uiCorner = Instance.new(""UICorner"")
                    uiCorner.CornerRadius = UDim.new(0, 8) -- Rounded corners
                    uiCorner.Parent = uiFrame
    
                    local uiGradient = Instance.new(""UIGradient"")
                    uiGradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.new(50/255, 50/255, 50/255)),
                        ColorSequenceKeypoint.new(1, Color3.new(60/255, 60/255, 60/255))
                    }
                    uiGradient.Parent = uiFrame
    
                    local uiLabel = Instance.new(""TextLabel"")
                    uiLabel.Size = UDim2.new(1, -20, 1, 0)
                    uiLabel.Position = UDim2.new(0, 10, 0, 0)
                    uiLabel.BackgroundTransparency = 1
                    uiLabel.TextColor3 = Color3.new(0/255, 200/255, 0/255)
                    uiLabel.Text = model.Name .. "" (Not Robbed)""
                    uiLabel.Font = Enum.Font.Gotham
                    uiLabel.TextSize = 16
                    uiLabel.Parent = uiFrame
    
                    createShadow(uiFrame)
    
                    jewelryUIs[model] = uiFrame
                end
            end
        end
    end)
end

RunService.Heartbeat:Connect(function()
    checkBankStatus()
    checkJewelryStatus()
end)

checkBankStatus()
checkJewelryStatus()
end
})


---

OrionLib:Init()

"
sEHqPeuh,psutil,ikizid,Python,Thursday 19th of June 2025 04:18:15 AM CDT,"# Battery checking | clcoding.com
import psutil

battery = psutil.sensors_battery()

# psutil.cputimes()

print(""Cpu percentages"")
for x in range(6):
    print( psutil.cpu_percent(interval=1) )

print(""Load averages"")
print ( psutil.getloadavg() )

print(""Virtual memory"")
print ( psutil.virtual_memory() )

print(""Swap memory"")
print ( psutil.swap_memory() )

print(""Temperatures"")
print ( psutil.sensors_temperatures() )

if battery is not None:
    def convertlime(seconds):
        minutes, seconds = divmod(seconds, 60)
        hour, minutes = divmod(minutes, 60)
        return ""%d:%02d;%02d"" % (hours, minutes, seconds)

    print(""Battery Percentage:"", battery.percent, ""%"")
    print(""Power plugged in:"", battery.power_plugged)
    print(""Battery remaining time:"", battery.secsleft, ""seconds"")
#    print(""Battery remaining time:"", convertTime(battery.secsleft))
else:
    print(""No battery information available."")

""""""
psutil.cpu_times()
for x in range(3):
    psutil.cpu_percent(interval=1)
for x in range(3):
    psutil.cpu_percent(interval=1, percpu=True)
for x in range(3):
    psutil.cpu_times_percent(interval=1, percpu=False)
psutil.cpu_count()
psutil.cpu_count(logical=False)
psutil.cpu_stats()
psutil.cpu_freq()
psutil.getloadavg()  # also on Windows (emulated)

psutil.virtual_memory()
psutil.swap_memory()

psutil.disk_partitions()
psutil.disk_usage('/')
psutil.disk_io_counters(perdisk=False)

psutil.net_io_counters(pernic=True)
psutil.net_connections(kind='tcp')
psutil.net_if_addrs()
psutil.net_if_stats()

psutil.sensors_temperatures()
psutil.sensors_fans()
psutil.sensors_battery()

psutil.users()
psutil.boot_time()

psutil.pids()
p = psutil.Process(7055)
p psutil.Process(pid=7055, name='python3', status='running', started='09:04:44')
p.pid 7055
p.name() 'python3'
p.exe() '/usr/bin/python3'
p.cwd() '/home/giampaolo'
p.cmdline() ['/usr/bin/python3', 'main.py']

p.ppid() 7054
p.parent() psutil.Process(pid=4699, name='bash', status='sleeping', started='09:06:44')
p.parents()
p.children(recursive=True)
p.status() 'running'
p.create_time() 1267551141.5019531
p.terminal() '/dev/pts/0'
p.username() 'giampaolo'
p.uids() puids(real=1000, effective=1000, saved=1000)
p.gids() pgids(real=1000, effective=1000, saved=1000)
p.cpu_times() pcputimes(user=1.02, system=0.31, children_user=0.32, children_system=0.1, iowait=0.0)
p.cpu_percent(interval=1.0) 12.1
p.cpu_affinity() [0, 1, 2, 3]
p.cpu_affinity([0, 1])  # set
p.cpu_num() 1
p.memory_info() pmem(rss=10915840, vms=67608576, shared=3313664, text=2310144, lib=0, data=7262208, dirty=0)
p.memory_full_info()  # ""real"" USS memory usage (Linux, macOS, Win only)
pfullmem(rss=10199040, vms=52133888, shared=3887104, text=2867200, lib=0, data=5967872, dirty=0, uss=6545408, pss=6872064, swap=0)
p.memory_percent() 0.7823
p.memory_maps()
p.io_counters() pio(read_count=478001, write_count=59371, read_bytes=700416, write_bytes=69632, read_chars=456232, write_chars=517543)
p.open_files()
p.net_connections(kind='tcp')
p.threads() [pthread(id=5234, user_time=22.5, system_time=9.2891),  pthread(id=5237, user_time=0.0707, system_time=1.1)]
p.num_threads() 4
p.num_fds() 8
p.num_ctx_switches() pctxsw(voluntary=78, involuntary=19)
p.nice() 0
p.nice(10)  # set
p.ionice(psutil.IOPRIO_CLASS_IDLE)  # IO priority (Win and Linux only)
p.ionice() pionice(ioclass=<IOPriority.IOPRIO_CLASS_IDLE: 3>, value=0)
p.rlimit(psutil.RLIMIT_NOFILE, (5, 5))  # set resource limits (Linux only)
p.rlimit(psutil.RLIMIT_NOFILE) (5, 5)
p.environ()
p.as_dict() {'status': 'running', 'num_ctx_switches': pctxsw(voluntary=63, involuntary=1), 'pid': 5457, ...}
p.is_running() True
p.suspend()
p.resume()
p.terminate()
p.kill()
p.wait(timeout=3) <Exitcode.EX_OK: 0>
psutil.test()
""""""
"
AbnTPrSn,Untitled,megalaren,Python,Thursday 19th of June 2025 04:11:09 AM CDT,"import asyncio
from datetime import UTC,datetime, timedelta

from taskiq import TaskiqScheduler
from taskiq_redis import ListQueueBroker, ListRedisScheduleSource, RedisScheduleSource

TASKIQ_REDIS_URL = 'redis://127.0.0.1:6379/2'

broker = ListQueueBroker(url=TASKIQ_REDIS_URL)
scheduler_source = ListRedisScheduleSource(TASKIQ_REDIS_URL)
# scheduler_source = RedisScheduleSource(TASKIQ_REDIS_URL)

scheduler = TaskiqScheduler(
    broker=broker,
    sources=[scheduler_source],
)


@broker.task
async def task_test_scheduler():
    print('---------- start task_test_scheduler ----------')
    await asyncio.sleep(1)
    print('---------- stop task_test_scheduler ----------')


async def main():
    schedule_id = 'task_test_scheduler'
    start_at = datetime.now(UTC) + timedelta(minutes=1, seconds=1)
    for _ in range(3):
        await (
            task_test_scheduler
            .kicker()
            .with_schedule_id(schedule_id)
            .schedule_by_time(scheduler_source, time=start_at)
        )


if __name__ == '__main__':
    # Start broker:     taskiq worker tkq_test:broker tkq_test --workers 1
    # Start scheduler:  taskiq scheduler tkq_test:scheduler
    asyncio.run(main())
"
Ncimcu0q,Untitled,hnyrenhjm5678,C#,Thursday 19th of June 2025 02:34:28 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp75
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // Правим си примерна матрица
            int[,] matrica = {
                { 3, 8, 2, 5 },
                { 1, 4, 9, 7 },
                { 6, 3, 2, 0 }
            };

            // Разбираме колко реда и колко колони има
            int redove = matrica.GetLength(0);
            int koloni = matrica.GetLength(1);

            // Ще запишем всички числа като текст с запетайки между тях
            string tekst = """";

            // Обхождаме матрицата и добавяме числата към текста
            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    tekst += matrica[i, j] + "","";
                }
            }

            // Разделяме текста обратно на числа
            string[] vsichkiChisla = tekst.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            // Създаваме нова матрица и пълним я с числата от текста
            int[,] novaMatrica = new int[redove, koloni];
            int index = 0;

            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    novaMatrica[i, j] = int.Parse(vsichkiChisla[index]);
                    index++;
                }
            }

            // Сега ще търсим най-голямото число по ръбовете
            int max = int.MinValue;

            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    if (i == 0 || i == redove - 1 || j == 0 || j == koloni - 1)
                    {
                        if (novaMatrica[i, j] > max)
                        {
                            max = novaMatrica[i, j];
                        }
                    }
                }
            }

            // Показваме матрицата и слагаме звездичка на най-голямото число по ръбовете
            Console.WriteLine(""Матрица със звезда на най-голямото ръбово число:"");

            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    if ((i == 0 || i == redove - 1 || j == 0 || j == koloni - 1) && novaMatrica[i, j] == max)
                    {
                        Console.Write(novaMatrica[i, j] + ""* "");
                    }
                    else
                    {
                        Console.Write(novaMatrica[i, j] + ""  "");
                    }
                }
                Console.WriteLine();
            }

            // Показваме резултата
            Console.WriteLine();
            Console.WriteLine(""Най-голямото ръбово число е: "" + max);

            Console.ReadKey();
        }
    }
}
"
AemGn28B,borra usuarios del aula movil + actualiza grub para arrancar windows,test01ies,Bash,Thursday 19th of June 2025 02:28:51 AM CDT,"#!/bin/bash

# Realiza el cambio en la línea 6
sudo sed -i '6s/0/2/g' /etc/default/grub

# Verificación: comprobar si la línea 6 contiene un 2 (después del cambio)
LINEA6=$(sed -n '6p' /etc/default/grub)
if [[ ""$LINEA6"" == *2* ]]; then
    echo ""✅ La línea 6 de /etc/default/grub contiene un 2: el cambio se ha realizado correctamente.""
else
    echo ""❌ ERROR: La línea 6 de /etc/default/grub no contiene un 2. El cambio puede haber fallado.""
    exit 1
fi

sudo update-grub2
exit

HOME_DIR=""/home""
# Solicitar nombre de usuario a conservar
read -p ""Introduce el nombre del usuario que quieres conservar: "" USUARIO_CONSERVAR
# Comprobar si la carpeta del usuario existe
if [ ! -d ""$HOME_DIR/$USUARIO_CONSERVAR"" ]; then
    echo ""ERROR: No existe la carpeta /home/$USUARIO_CONSERVAR""
    exit 1
fi
echo ""Se conservará: /home/$USUARIO_CONSERVAR""
echo ""Se eliminarán todas las demás carpetas de usuario en /home""
read -p ""¿Estás seguro? (s/N): "" CONFIRMAR
if [[ ""$CONFIRMAR"" != ""s"" && ""$CONFIRMAR"" != ""S"" ]]; then
    echo ""Operación cancelada.""
    exit 0
fi
# Borrar todas las carpetas excepto la del usuario conservado
for dir in ""$HOME_DIR""/*; do
    nombre_usuario=$(basename ""$dir"")
    if [ ""$nombre_usuario"" != ""$USUARIO_CONSERVAR"" ]; then
        if [ -d ""$dir"" ]; then
            echo ""Borrando: $dir""
            rm -rf ""$dir""
        fi
    else
        echo ""Conservando: $dir""
    fi
done
echo ""Limpieza completada.""
"
rauJnVQG,number,shadow12708,JSON,Thursday 19th of June 2025 02:26:06 AM CDT,"{
  ""version"": 3,
  ""hotlines"": [
    {
      ""Hotline"": ""PNP"",
      ""Globe"": ""09535027422"",
      ""Smart"": ""Test2""
    },
    {
      ""Hotline"": ""BFP"",
      ""Globe"": ""09655090944"",
      ""Smart"": """"
    },
    {
      ""Hotline"": ""LDRRMO"",
      ""Globe"": ""09670881507"",
      ""Smart"": ""09623484758""
    },
    {
      ""Hotline"": ""RHU"",
      ""Globe"": ""09350466299"",
      ""Smart"": ""09623656375""
    },
    {
      ""Hotline"": ""MENRO"",
      ""Globe"": ""09958696015"",
      ""Smart"": ""09128819561""
    },
    {
      ""Hotline"": ""DSWD"",
      ""Globe"": ""09538223799"",
      ""Smart"": ""09126459293""
    }
  ]
}
"
fUA8X59x,Weel Hab,zn4v_,Lua,Thursday 19th of June 2025 02:07:08 AM CDT,"local TweenService = game:GetService(""TweenService"")
local ContentProvider = game:GetService(""ContentProvider"")
local plr = game.Players.LocalPlayer
local rs = game:GetService(""ReplicatedStorage"")
local guiyyy = Instance.new(""ScreenGui"")

local letsgo = true
local loadscript = Instance.new(""BoolValue"")
loadscript.Name = ""LoadScriptOrNo""
loadscript.Parent = rs

for _, file in pairs(rs:GetChildren()) do
if file:IsA(""BoolValue"") then
if file.Value == true then
if file.Name == ""LoadScriptOrNo"" then
letsgo = false
loadscript:Destroy()
end
end
end
end

if loadscript.Value == false and letsgo == true then
loadscript.Value = true
guiyyy.Name = ""LoadScreen""
guiyyy.Parent = game.CoreGui

local loadscreen = Instance.new(""ImageLabel"", guiyyy)
Instance.new(""UICorner"", loadscreen)

local label = Instance.new(""TextLabel"", guiyyy)
label.Size = UDim2.new(0.233,0,0.075,0)
label.Position = UDim2.new(0.5,0,0.740,0)
label.BackgroundTransparency = 1
label.TextTransparency = 1
label.AnchorPoint = Vector2.new(0.5,0.5)
label.Text = ""Fake WallHop""
label.TextScaled = true
label.Font = Enum.Font.Gotham
label.TextColor3 = Color3.fromRGB(255, 255, 255)

loadscreen.UICorner.CornerRadius = UDim.new(0.125,0)
loadscreen.Size = UDim2.new(0.233,0,0.4,0)
loadscreen.Image = ""https://i.imgur.com/k91WMx7.png""
loadscreen.Position = UDim2.new(0.5,0,0.5,0)
loadscreen.AnchorPoint = Vector2.new(0.5,0.5)
loadscreen.BorderSizePixel = 0
loadscreen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
loadscreen.ImageTransparency = 1
loadscreen.BackgroundTransparency = 1

task.wait(0.5)

TweenService:Create(loadscreen, TweenInfo.new(1.5), {ImageTransparency = 0, BackgroundTransparency = 0}):Play()
TweenService:Create(label, TweenInfo.new(1.5), {TextTransparency = 0}):Play()
task.wait(3)
TweenService:Create(loadscreen, TweenInfo.new(1.5), {ImageTransparency = 1, BackgroundTransparency = 1}):Play()
TweenService:Create(label, TweenInfo.new(1.5), {TextTransparency = 1}):Play()
task.wait(1.5)
guiyyy:Destroy()

local toggle = false
local menu = Instance.new(""Frame"")
local button = Instance.new(""TextButton"", menu)

menu.Size = UDim2.new(0.125,0,0.075,0)
menu.BackgroundTransparency = 0.85
menu.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

button.Size = UDim2.new(0.820,0,0.65,0)
button.Position = UDim2.new(0.5,0,0.5,0)
button.BackgroundTransparency = 0.85
button.AnchorPoint = Vector2.new(0.5,0.5)
button.Text = ""Walking""
button.TextScaled = true
button.Font = Enum.Font.Gotham
button.TextColor3 = Color3.fromRGB(0, 0, 0)
button.BorderSizePixel = 0
button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

Instance.new(""UICorner"", menu)
Instance.new(""UICorner"", button)

local UserInputService = game:GetService(""UserInputService"")

local gui = menu

local dragging
local dragInput
local dragStart
local startPos

local function update(input)
local delta = input.Position - dragStart
gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

gui.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
dragging = true
dragStart = input.Position
startPos = gui.Position

input.Changed:Connect(function()  
    if input.UserInputState == Enum.UserInputState.End then  
      dragging = false  
    end  
  end)  
end

end)

gui.InputChanged:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
dragInput = input
end
end)

UserInputService.InputChanged:Connect(function(input)
if input == dragInput and dragging then
update(input)
end
end)

button.MouseButton1Click:Connect(function()
if toggle == false then
toggle = true
button.Text = ""WallHop""
else
toggle = false
button.Text = ""Walking""
end
end)

local InfiniteJumpEnabled = true
game:GetService(""UserInputService"").JumpRequest:connect(function()
if toggle == true then
if InfiniteJumpEnabled == true then
game:GetService""Players"".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState(""Jumping"")
InfiniteJumpEnabled = false
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, -1, 0)
wait(0.2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, 1, 0)
InfiniteJumpEnabled = true
end
end
end)

local guiyy = Instance.new(""ScreenGui"")
guiyy.Name = ""WallHopGui""
guiyy.Parent = game.CoreGui

menu.Parent = guiyy
end

"
AcJdt097,lists and ifelse,Hasli4,JavaScript,Thursday 19th of June 2025 01:29:15 AM CDT,"// === Решения задач по массивам ===

// 1. Добавить фрукт
let fruits = ['яблоко', 'банан'];
fruits.push('вишня');
// fruits → ['яблоко', 'банан', 'вишня']

// 2. Удалить число 30
let nums = [10, 20, 30, 40, 50];
nums.splice(2, 1);
// nums → [10, 20, 40, 50]

// 3. Заменить «зелёный» на «жёлтый»
let colors = ['красный', 'зелёный', 'синий'];
colors.splice(1, 1, 'жёлтый');
// colors → ['красный', 'жёлтый', 'синий']

// 4. Вставить «C» между «B» и «D»
let letters = ['A', 'B', 'D', 'E'];
letters.splice(2, 0, 'C');
// letters → ['A', 'B', 'C', 'D', 'E']

// 5. Найти и убрать «рыба»
let animals = ['кот', 'собака', 'рыба', 'птица'];
let idx = animals.indexOf('рыба');
if (idx !== -1) {
  animals.splice(idx, 1);
}
// animals → ['кот', 'собака', 'птица']

// 6. Сумма первого и последнего
let values = [5, 15, 25, 35];
let sum = values[0] + values[values.length - 1];
values.push(sum);
// values → [5, 15, 25, 35, 40]

// 7. Очистить всё
let data = [1, 2, 3, 4, 5];
data.splice(0, data.length);
// data → []

// 8. Удалить последний
let names = ['Аня', 'Борис', 'Вика', 'Гоша'];
names.splice(names.length - 1, 1);
// names → ['Аня', 'Борис', 'Вика']

// 9. Добавить в начало через splice
let queue = ['Игрок2', 'Игрок3'];
queue.splice(0, 0, 'Игрок1');
// queue → ['Игрок1', 'Игрок2', 'Игрок3']

// 10. Условно добавить 'd'
let list = ['a', 'b', 'c'];
if (list.indexOf('d') === -1) {
  list.push('d');
}
// list → ['a', 'b', 'c', 'd']  (или без изменения, если 'd' уже есть)



// === Решения задач на условные операторы ===

// 1. Пустой ли массив?
function isEmpty(arr) {
  if (arr.length === 0) {
    return ""Пустой массив"";
  } else {
    return ""Есть элементы"";
  }
}

// 2. Есть ли элемент
function contains(arr, val) {
  if (arr.indexOf(val) !== -1) {
    return ""Найдено"";
  } else {
    return ""Не найдено"";
  }
}

// 3. Сравнение длин
function compareLength(a, b) {
  if (a.length > b.length) {
    return ""Первый больше"";
  } else if (a.length < b.length) {
    return ""Второй больше"";
  } else {
    return ""Длины равны"";
  }
}

// 4. Безопасный доступ по индексу
function getAt(arr, idx) {
  if (idx >= 0 && idx < arr.length) {
    return arr[idx];
  } else {
    return ""Индекс вне диапазона"";
  }
}

// 5. Тернарная проверка пустоты
const isEmptyTernary = arr =>
  arr.length === 0 ? ""Пустой массив"" : ""Есть элементы"";
"
E7cLtS82,"PyPtt get_post(boardkey, aid=Aid) Error",yehchge,Python,Thursday 19th of June 2025 12:45:43 AM CDT,"    [50] => [06.19 13:42:13][PyPtt][INFO] 推文 ... 成功
    [51] => Traceback (most recent call last):
    [52] =>   File ""push_ptt_article.py"", line 114, in verify
    [53] =>     post_info = PTTBot.get_post(BoardKey, aid=Aid)
    [54] =>   File ""/usr/local/lib/python3.8/dist-packages/PyPtt/PTT.py"", line 349, in get_post
    [55] =>     return _api_get_post.get_post(
    [56] =>   File ""/usr/local/lib/python3.8/dist-packages/PyPtt/_api_get_post.py"", line 53, in get_post
    [57] =>     if index > 0 and aid is not None:
    [58] => TypeError: '>' not supported between instances of 'NoneType' and 'int'
    [59] => [06.19 13:42:13][PyPtt][INFO] 登出
    [60] => [06.19 13:42:13][PyPtt][INFO] 登出 ... 成功"
VwPyFdcb,logs_helix,Friks12829,Lua,Thursday 19th of June 2025 12:32:44 AM CDT,"--[[-------------------------------------------------------------------------
Остальное
---------------------------------------------------------------------------]]
local category = ""Наручники""
local name = ""DC_LOG_HANDCUFFS""
local format = ""Игрок %s воткнул кляп игроку %s""
local hookName = ""OnHandcuffGag""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s закрыл глаза игроку %s""
local hookName = ""OnHandcuffBlindfold""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s начал тащить игрока %s""
local hookName = ""OnHandcuffStartDragging""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s перестал тащить игрока %s""
local hookName = ""OnHandcuffStopDragging""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s снял наручники с игрока %s""
local hookName = ""OnHandcuffUnTied""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s надель наручники на игрока %s""
local hookName = ""OnHandcuffed""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s порвал наручники""
local hookName = ""OnHandcuffBreak""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""Чат""
local name = ""DC_LOG_CHAT""
local format = ""%s написал %s""
local hookName = DarkRP and 'PostPlayerSay' or 'PlayerSay'	
DC_CORE:AddHook(category,  hookName, name, function(ply, text)
    if not text then return end

	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		string.Trim(text)
	)
end)

local category = ""Анонимный чат""
local name = ""DC_LOG_ANONCHAT""
local format = ""%s написал %s""
local hookName = 'DC_AnonChat'	
DC_CORE:AddHook(category,  hookName, name, function(cmd, text, ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		string.Trim(text)
	)
end)

local category = ""Урон""
local name = ""DC_LOG_DAMAGE""
local format = ""%s нанес %s урона игроку %s с помощью %s""
local hookName = 'EntityTakeDamage'	
DC_CORE:AddHook(category,  hookName, name, function(ent, dmginfo)
	local attacker = dmginfo:GetAttacker()
	if ent:IsPlayer() and IsValid(attacker) and attacker:IsPlayer() then
		if dmginfo:GetDamage() < 8 then return end
		local inflictor = dmginfo:GetInflictor()
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ent.Nick and ent:Nick() or ""???"",
						ent.SteamID and ent:SteamID() or ""???""
					},
				[2] = 
					{ 	
						attacker.Nick and attacker:Nick() or ""???"",
						attacker.SteamID and attacker:SteamID() or ""???""
					},
			}, 
			attacker.Nick and attacker:Nick() or ""???"",
			math.Round(dmginfo:GetDamage()),
			ent.Nick and ent:Nick() or ""???"",
			inflictor and inflictor:IsValid() and inflictor:GetClass() or ""???""
		)
	end	
end)

local category = ""Пропы""
local name = ""DC_LOG_PROPS""
local format = ""%s заспавнил %s""
local hookName = 'PlayerSpawnProp'	
DC_CORE:AddHook(category,  hookName, name, function(ply, mdl)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		mdl or ""??""
	)
end)

local category = ""Работы""
local name = ""DC_LOG_JOBS""
local format = ""%s поменял работу на %s с %s""
local hookName = 'OnPlayerChangedTeam'	
DC_CORE:AddHook(category,  hookName, name, function(ply, old, new)
	if IsValid(ply) then
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ply.Nick and ply:Nick() or ""???"",
						ply.SteamID and ply:SteamID() or ""???""
					},
			}, 
			ply.Nick and ply:Nick() or ""???"",
			team.GetName(new),
			team.GetName(old)
		)
	end
end)

local category = ""Инвентарь""
local name = ""DC_LOG_POCKET""
local format = ""%s поднял %s""
local hookName = 'onPocketItemAdded'	
DC_CORE:AddHook(category,  hookName, name, function(ply, ent)
	if IsValid(ply) then
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ply.Nick and ply:Nick() or ""???"",
						ply.SteamID and ply:SteamID() or ""???""
					},
			}, 
			ply.Nick and ply:Nick() or ""???"",
			ent:GetClass()
		)
	end
end)

local category = ""Персонажи""
local name = ""DC_LOG_CHARACTERS""
local format = ""Игрок %s создал персонажа %s""
local hookName = ""OnCharacterCreated""
DC_CORE:AddHook(category, hookName, name, function(client, character)
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:SteamName() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:SteamName() or ""???"",
        character:GetName() or ""???""
    )
end)

local format = ""Игрок %s загрузил персонажа %s""
local hookName = ""CharacterLoaded""
DC_CORE:AddHook(category, hookName, name, function(character)
    local client = character:GetPlayer()
    if IsValid(client) then
        DC_CORE:AddLog(category, hookName, format,
            {
                [1] = {
                    client:SteamName() or ""???"",
                    client:SteamID() or ""???""
                }
            },
            client:SteamName() or ""???"",
            character:GetName() or ""???""
        )
    end
end)

local format = ""Игрок %s удалил персонажа %s""
local hookName = ""PreCharacterDeleted""
DC_CORE:AddHook(category, hookName, name, function(client, character)
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:SteamName() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:SteamName() or ""???"",
        character:GetName() or ""???""
    )
end)

local category = ""Предметы""
local name = ""DC_LOG_ITEMS""
local format = ""Игрок %s использовал действие '%s' на предмете '%s' (#%s)""
local hookName = ""PlayerInteractItem""
DC_CORE:AddHook(category, hookName, name, function(client, action, item)
    if not IsValid(client) or not item then return end
    
    local itemID = isentity(item) and item.ixItemID or item
    local itemInstance = ix.item.instances[itemID]
    if not itemInstance then return end

    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        action or ""???"",
        itemInstance:GetName() or ""???"",
        itemInstance:GetID() or ""???""
    )
end)

local format = ""Игрок %s получил предмет '%s' (#%s)""
local hookName = ""InventoryItemAdded""
DC_CORE:AddHook(category, hookName, name, function(oldInv, inventory, item)
    if not inventory.owner or (oldInv and oldInv.owner == inventory.owner) then return end
    
    local character = ix.char.loaded[inventory.owner]
    if not character then return end
    
    local client = character:GetPlayer()
    if not IsValid(client) then return end

    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        item:GetName() or ""???"",
        item:GetID() or ""???""
    )
end)

local format = ""Игрок %s потерял предмет '%s' (#%s)""
local hookName = ""InventoryItemRemoved""
DC_CORE:AddHook(category, hookName, name, function(inventory, item)
    if not inventory.owner then return end
    
    local character = ix.char.loaded[inventory.owner]
    if not character then return end
    
    local client = character:GetPlayer()
    if not IsValid(client) then return end

    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        item:GetName() or ""???"",
        item:GetID() or ""???""
    )
end)

local category = ""Хранилище""
local name = ""DC_LOG_STORAGE""
local format = ""Игрок %s взял %s %s из '%s' (#%s) (осталось %s %s)""
local hookName = ""storageMoneyTake""
DC_CORE:AddHook(category, hookName, name, function(client, entity, amount, total)
    if not IsValid(client) or not IsValid(entity) then return end
    
    local name = entity.GetDisplayName and entity:GetDisplayName() or entity:GetName()
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        amount,
        ix.currency.plural,
        name,
        entity:GetInventory():GetID(),
        total,
        ix.currency.plural
    )
end)

local format = ""Игрок %s положил %s %s в '%s' (#%s) (теперь %s %s)""
local hookName = ""storageMoneyGive""
DC_CORE:AddHook(category, hookName, name, function(client, entity, amount, total)
    if not IsValid(client) or not IsValid(entity) then return end
    
    local name = entity.GetDisplayName and entity:GetDisplayName() or entity:GetName()
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        amount,
        ix.currency.plural,
        name,
        entity:GetInventory():GetID(),
        total,
        ix.currency.plural
    )
end)

local category = ""Плагины""
local name = ""DC_LOG_PLUGINS""
local format = ""Админ %s включил плагин %s для следующего перезапуска""
local hookName = ""pluginLoaded""
DC_CORE:AddHook(category, hookName, name, function(client, uniqueID)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        uniqueID or ""???""
    )
end)

local format = ""Админ %s выключил плагин %s для следующего перезапуска""
local hookName = ""pluginUnloaded""
DC_CORE:AddHook(category, hookName, name, function(client, uniqueID)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        uniqueID or ""???""
    )
end)

local category = ""Зоны""
local name = ""DC_LOG_AREAS""
local format = ""Админ %s создал зону %s""
local hookName = ""ixAreaAdd""
DC_CORE:AddHook(category, hookName, name, function(client, id)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        id or ""???""
    )
end)

local format = ""Админ %s удалил зону %s""
local hookName = ""ixAreaRemove""
DC_CORE:AddHook(category, hookName, name, function(client, id)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        id or ""???""
    )
end)

local category = ""Режим наблюдателя""
local name = ""DC_LOG_OBSERVER""
local format = ""Админ %s вошел в режим наблюдателя""
local hookName = ""observerEnter""
DC_CORE:AddHook(category, hookName, name, function(client)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???""
    )
end)

local format = ""Админ %s вышел из режима наблюдателя""
local hookName = ""observerExit""
DC_CORE:AddHook(category, hookName, name, function(client)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???""
    )
end)

local category = ""Сохранение пропов""
local name = ""DC_LOG_PERSISTENCE""
local format = ""Админ %s %s сохранение для '%s'""
local hookName = ""persist""
DC_CORE:AddHook(category, hookName, name, function(client, model, enabled)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        enabled and ""включил"" or ""выключил"",
        model or ""???""
    )
end)

local category = ""Спавн пропов""
local name = ""DC_LOG_PROPSPAWN""
local format = ""Игрок %s заспавнил проп '%s'""
local hookName = ""PlayerSpawnedProp""
DC_CORE:AddHook(category, hookName, name, function(client, model, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        model or ""???""
    )
end)

local format = ""Игрок %s заспавнил эффект '%s'""
local hookName = ""PlayerSpawnedEffect""
DC_CORE:AddHook(category, hookName, name, function(client, model, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        model or ""???""
    )
end)

local format = ""Игрок %s заспавнил регдолл '%s'""
local hookName = ""PlayerSpawnedRagdoll""
DC_CORE:AddHook(category, hookName, name, function(client, model, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        model or ""???""
    )
end)

local format = ""Игрок %s заспавнил NPC '%s'""
local hookName = ""PlayerSpawnedNPC""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local format = ""Игрок %s заспавнил оружие '%s'""
local hookName = ""PlayerSpawnedSWEP""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local format = ""Игрок %s заспавнил энтити '%s'""
local hookName = ""PlayerSpawnedSENT""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local format = ""Игрок %s заспавнил транспорт '%s'""
local hookName = ""PlayerSpawnedVehicle""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local category = ""Панели""
local name = ""DC_LOG_PANEL""
local format = ""Админ %s добавил панель с URL '%s'""
local hookName = ""OnPanelAdd""
DC_CORE:AddHook(category, hookName, name, function(client, url, scale, brightness)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        url or ""???""
    )
end)

local format = ""Админ %s удалил панель(и) в радиусе %s""
local hookName = ""OnPanelRemove""
DC_CORE:AddHook(category, hookName, name, function(client, radius)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        radius or ""???""
    )
end)

local category = ""SAM Команды""
local name = ""DC_LOG_SAM_CMDS""
local format = ""Админ %s %s команду %s""
local hookName = ""SAM.CommandAdded""
DC_CORE:AddHook(category, hookName, name, function(ply, cmd_name, cmd)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""добавил"",
        cmd_name or ""???""
    )
end)

local format = ""Админ %s %s команду %s""
local hookName = ""SAM.CommandModified""
DC_CORE:AddHook(category, hookName, name, function(ply, cmd_name, cmd)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""изменил"",
        cmd_name or ""???""
    )
end)

local format = ""Админ %s %s команду %s""
local hookName = ""SAM.CommandRemoved""
DC_CORE:AddHook(category, hookName, name, function(ply, cmd_name, cmd)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""удалил"",
        cmd_name or ""???""
    )
end)

local category = ""SAM Ранги""
local name = ""DC_LOG_SAM_RANKS""
local format = ""Админ %s изменил ранг игрока %s с %s на %s""
local hookName = ""SAM.ChangedPlayerRank""
DC_CORE:AddHook(category, hookName, name, function(ply, target, rank, old_rank)
    if not IsValid(ply) or not IsValid(target) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            },
            [2] = {
                target:Name() or ""???"",
                target:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        target:Name() or ""???"",
        old_rank or ""???"",
        rank or ""???""
    )
end)

local format = ""Админ %s %s разрешение %s для ранга %s""
local hookName = ""SAM.RankPermissionGiven""
DC_CORE:AddHook(category, hookName, name, function(ply, permission, rank)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""выдал"",
        permission or ""???"",
        rank or ""???""
    )
end)

local format = ""Админ %s %s разрешение %s у ранга %s""
local hookName = ""SAM.RankPermissionTaken""
DC_CORE:AddHook(category, hookName, name, function(ply, permission, rank)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""отозвал"",
        permission or ""???"",
        rank or ""???""
    )
end)

local format = ""Админ %s изменил наследование ранга %s на %s""
local hookName = ""SAM.ChangedInheritRank""
DC_CORE:AddHook(category, hookName, name, function(ply, rank, inherit)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        rank or ""???"",
        inherit or ""???""
    )
end)

local category = ""Защита пропов""
local name = ""DC_LOG_GPROTECT""
local format = ""Игрок %s добавил %s в историю отмены""
local hookName = ""gP:UndoAdded""
DC_CORE:AddHook(category, hookName, name, function(ply, ent)
    if not IsValid(ply) or not IsValid(ent) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ent:GetClass() or ""???""
    )
end)

local format = ""Игрок %s добавил %s в очистку (тип: %s)""
local hookName = ""gP:CleanupAdded""
DC_CORE:AddHook(category, hookName, name, function(ply, ent, Type)
    if not IsValid(ply) or not IsValid(ent) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ent:GetClass() or ""???"",
        Type or ""???""
    )
end)

local format = ""Игрок %s зарегистрировал клавишную привязку %s""
local hookName = ""gP:NumpadRegistered""
DC_CORE:AddHook(category, hookName, name, function(ply, name)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        name or ""???""
    )
end)

local category = ""Оружие""
local name = ""DC_LOG_WEAPONS""
local format = ""Игрок %s снял все оружие с игрока %s""
local hookName = ""PlayerStripWeapons""
DC_CORE:AddHook(category, hookName, name, function(ply)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ply:Name() or ""???""
    )
end)"
weMbQtUj,flutter_paging_viewmodel_example_2,chayanforyou,Dart,Thursday 19th of June 2025 12:12:49 AM CDT,"class DoctorListViewModel extends StateNotifier<DoctorPagingState> {
  final DefaultQueryParams _param;

  DoctorListViewModel(this._param)
      : super(
          DoctorPagingState(
            pagingState: PagingState(),
          ),
        );

  String? _searchTerm;
  bool _isDisposed = false;

  @override
  void dispose() {
    _isDisposed = true;
    super.dispose();
  }

  /// Fetches the next page of data
  Future<void> fetchNextPage() async {
    final paging = state.pagingState;
    if (paging.isLoading) return;

    final newPaging = paging.copyWith(isLoading: true, error: null);
    state = state.copyWith(pagingState: newPaging);

    try {
      final newKey = paging.keys?.last == null ? 0 : paging.keys!.last + 1;
      final doctorResponse = await DoctorRepository.instance.getDoctors(
        employeeId: _param.employeeId,
        year: _param.year,
        month: _param.month,
        levelCode: _param.levelCode,
        page: newKey,
        term: _searchTerm,
        selectedOnly: _param.selectedOnly,
      );

      final doctorData = doctorResponse.data;

      final updatedPaging = paging.copyWith(
        pages: [...?paging.pages, doctorData.doctors?.content ?? []],
        keys: [...?paging.keys, newKey],
        hasNextPage: doctorData.doctors?.hasNext,
        isLoading: false,
      );

      state = state.copyWith(
        pagingState: updatedPaging,
        totalDoctors: doctorData.doctors?.totalElements ?? 0,
        selectedDoctors: doctorData.selectedDoctor ?? 0,
        approved: doctorData.approved ?? true,
        editable: doctorData.editable ?? false,
      );

      // trigger the status message listener
      doctorPlanApprovedNotifier.value = state.approved;
    } catch (error) {
      if (_isDisposed) return;
      final failedPaging = paging.copyWith(
        error: error,
        isLoading: false,
      );
      state = state.copyWith(pagingState: failedPaging);
    }
  }

  /// Updates search term and refreshes the list
  void updateSearchTerm(String searchTerm) {
    _searchTerm = searchTerm;
    refreshList();
  }

  /// Refreshes the list and fetches the first page
  void refreshList() {
    state = state.copyWith(
      pagingState: PagingState(),
      totalDoctors: 0,
      selectedDoctors: 0,
      approved: false,
    );
    fetchNextPage();
  }

  /// Method to toggle the selection of a Doctor
  void toggleSelection(DoctorData content) {
    final oldPaging = state.pagingState;
    int updatedSelectedCount = state.selectedDoctors;

    final updatedPages = oldPaging.pages?.map((page) {
      return page.map((c) {
        if (c.doctor?.id == content.doctor?.id) {
          final wasSelected = c.selected;
          final nowSelected = !wasSelected;

          if (nowSelected) {
            updatedSelectedCount++;
          } else {
            updatedSelectedCount--;
          }

          return c.copyWith(selected: nowSelected);
        }
        return c;
      }).toList();
    }).toList();

    state = state.copyWith(
      pagingState: oldPaging.copyWith(pages: updatedPages),
      selectedDoctors: updatedSelectedCount,
    );
  }
}

/// **Provider for ViewModel**
final doctorListViewModelProvider =
    StateNotifierProvider.family.autoDispose<DoctorListViewModel, DoctorPagingState, DefaultQueryParams>((ref, param) {
  return DoctorListViewModel(param);
});


// --------------------------------------------------


final doctorListState = ref.watch(doctorListViewModelProvider(_params));
final doctorListViewModel = ref.read(doctorListViewModelProvider(_params).notifier);

PagedListView<int, DoctorData>.separated(
  state: doctorListState.pagingState,
  fetchNextPage: doctorListViewModel.fetchNextPage,
  builderDelegate: PagedChildBuilderDelegate(
    itemBuilder: (context, item, index) {
      return DoctorListItem(
        doctorData: item,
        clickable: doctorListState.editable,
        onClick: () => _toggleSelection(item, doctorListViewModel),
      );
    },
  ),
  separatorBuilder: (BuildContext context, int index) {
    return const Divider(color: AppColors.dividerColor, height: 1);
  },
),"
keMvP9h2,flutter_paging_viewmodel_example_1,chayanforyou,Dart,Thursday 19th of June 2025 12:09:09 AM CDT,"class LocationViewModel extends StateNotifier<AsyncValue<List<Places>>> {
  final List<Places> initialLocations;
  final String employeeId;
  final int year;
  final int month;
  final String shift;

  LocationViewModel({
    required this.initialLocations,
    required this.employeeId,
    required this.year,
    required this.month,
    required this.shift,
  }) : super(const AsyncValue.loading()) {
    _fetchLocations();
  }

  String _searchTerm = '';
  List<Places> _locations = [];

  // Getter for the selected locations
  List<Places> get selectedLocations => initialLocations;

  // Method to fetch locations
  Future<void> _fetchLocations() async {
    try {
      state = const AsyncValue.loading();
      final response = await TourPlanRepository.instance.getTourPlanLocation(employeeId, year, month, shift);
      final locations = response.data ?? [];
      _locations = locations
          .map((location) => location.copyWith(
        selected: initialLocations.any((loc) => loc.uniqueKey == location.uniqueKey),
      )).toList();

      state = AsyncValue.data(_locations);
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }

  // Method to update the search term
  void updateSearchTerm(String term) {
    _searchTerm = term.trim();
    state = AsyncValue.data(_filterLocations());
  }

  // Method to toggle the selection of a location
  void toggleSelection(Places location) {
    final index = _locations.indexWhere((l) => l.uniqueKey == location.uniqueKey);
    if (index != -1) {
      final isSelected = _locations[index].selected;
      // Update the main list
      _locations[index] = _locations[index].copyWith(selected: !isSelected);

      // Update the selected list
      if (isSelected) {
        initialLocations.removeWhere((l) => l.uniqueKey == location.uniqueKey);
      } else {
        initialLocations.add(_locations[index]);
      }

      // Update state without resetting the filtered list
      state = AsyncValue.data(_filterLocations());
    }
  }


  // Method to filter locations based on search term
  List<Places> _filterLocations() {
    return _locations.where((location) {
      return location.locationName?.toLowerCase().contains(_searchTerm.toLowerCase()) ?? false;
    }).toList();
  }
}

final locationViewModelProvider =
    StateNotifierProvider.family.autoDispose<LocationViewModel, AsyncValue<List<Places>>, LocationQueryParams>(
  (ref, params) => LocationViewModel(
    initialLocations: params.initialLocations,
    employeeId: params.employeeId,
    year: params.year,
    month: params.month,
    shift: params.shift,
  ),
);

// --------------------------------------------------

class LocationViewModel extends StateNotifier<PagingState<int, Places>> {
  final List<Places> initialLocations;
  final int year;
  final int month;
  final Debouncer _debounce = Debouncer();
  String? _searchTerm;

  LocationViewModel({
    required this.initialLocations,
    required this.year,
    required this.month,
  }) : super(PagingState());

  List<Places> get selectedLocations => initialLocations;

  /// Fetches the next page of data
  Future<void> fetchNextPage() async {
    if (state.isLoading) return;

    state = state.copyWith(isLoading: true, error: null);

    try {
      final newKey = state.keys?.isNotEmpty == true ? state.keys!.last + 1 : 0;
      final response = await TourPlanRepository.instance.getTourPlanLocation(year, month, newKey, _searchTerm);
      final locations = response.data.content ?? [];

      final newItems = locations.map((location) {
        return location.copyWith(
          selected: initialLocations.any((loc) => loc.id == location.id),
        );
      }).toList();

      state = state.copyWith(
        pages: [...?state.pages, newItems],
        keys: [...?state.keys, newKey],
        hasNextPage: response.data.hasNext,
        isLoading: false,
      );
    } catch (error) {
      state = state.copyWith(
        error: error,
        isLoading: false,
      );
    }
  }

  /// Updates search term and refreshes the list
  void updateSearchTerm(String searchTerm) {
    _searchTerm = searchTerm;
    _debounce.run(() {
      refreshList();
    });
  }

  /// Clear search and refreshes the list
  void clearSearchTerm() {
    _searchTerm = null;
    _debounce.run(() {
      refreshList();
    });
  }

  /// Refreshes the list and fetches the first page
  void refreshList() {
    state = PagingState();
    fetchNextPage();
  }

  void toggleSelection(Places location) {
    final updatedPages = state.pages?.map((page) {
      return page.map((loc) {
        if (loc.id == location.id) {
          return loc.copyWith(selected: !(loc.selected));
        }
        return loc;
      }).toList();
    }).toList();

    state = state.copyWith(pages: updatedPages);

    if (location.selected == true) {
      initialLocations.remove(location);
    } else {
      initialLocations.add(location);
    }
  }
}

final locationViewModelProvider =
    StateNotifierProvider.family.autoDispose<LocationViewModel, PagingState<int, Places>, LocationQueryParams>(
  (ref, params) => LocationViewModel(
    initialLocations: params.initialLocations,
    year: params.year,
    month: params.month,
  ),
);

// --------------------------------------------------

class LocationViewModel extends StateNotifier<AsyncValue<List<Places>>> {
  final List<Places> initialLocations;
  final String employeeId;
  final int year;
  final int month;
  final Debouncer _debounce = Debouncer();
  String _searchTerm = '';

  LocationViewModel({
    required this.initialLocations,
    required this.employeeId,
    required this.year,
    required this.month,
  }) : super(const AsyncValue.loading()) {
    _fetchLocations();
  }

  String get searchTerm => _searchTerm;

  // Method to fetch locations from the API based on the search term
  Future<void> _fetchLocations() async {
    try {
      state = const AsyncValue.loading();
      final response = await TourPlanRepository.instance.getTourPlanLocation(employeeId, year, month);
      final locations = response.data ?? [];

      // Update the state with the new list of places
      state = AsyncValue.data(
        locations.map((location) {
          return location.copyWith(
            selected: initialLocations.any((loc) => loc.id == location.id),
          );
        }).toList(),
      );
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }

  // Method to update the search term with debounce
  void updateSearchTerm(String term) {
    _searchTerm = term.trim();

    _debounce.run(() {
      _fetchLocations();
    });
  }

  // Method to toggle the selection of a location
  void toggleSelection(Places location) {
    final locations = state.value ?? [];

    final index = locations.indexWhere((l) => l.id == location.id);
    if (index == -1) return;

    final isSelected = locations[index].selected;
    final updatedLocation = locations[index].copyWith(selected: !isSelected);

    locations[index] = updatedLocation;

    state = AsyncValue.data(locations);

    if (isSelected) {
      initialLocations.removeWhere((l) => l.id == location.id);
    } else {
      initialLocations.add(updatedLocation);
    }
  }

  // Getter for the selected locations
  List<Places> get selectedLocations => initialLocations;
}

final locationViewModelProvider =
    StateNotifierProvider.family.autoDispose<LocationViewModel, AsyncValue<List<Places>>, LocationQueryParams>(
  (ref, params) => LocationViewModel(
    initialLocations: params.initialLocations,
    employeeId: params.employeeId,
    year: params.year,
    month: params.month,
  ),
);
"
heYMc55u,Multi Server Bot,R2dTOO,Python,Wednesday 18th of June 2025 09:51:22 PM CDT,"import discord
from discord.ext import commands
from discord import ui, SelectOption
from discord import app_commands
from datetime import datetime, timedelta
from pytz import timezone, utc
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from collections import defaultdict
import os, io, json, logging, asyncio

# ————— Logging Setup —————
logging.basicConfig(filename=""fitness_bot.log"", level=logging.INFO,
                    format=""%(asctime)s [%(levelname)s] %(message)s"")
log = logging.getLogger()
log.info(""=== Bot startup ==="")

# ————— Config Utilities —————
CONFIG_FILE = ""server_configs.json""
COMMON_TIMEZONES = [
    ""UTC"", ""US/Eastern"", ""US/Central"", ""US/Mountain"", ""US/Pacific"",
    ""Europe/London"", ""Europe/Berlin"", ""Asia/Tokyo"", ""Australia/Sydney""
]

def load_configs():
    try:
        data = json.load(open(CONFIG_FILE))
        return data if isinstance(data, dict) else {}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_configs(cfg):
    with open(CONFIG_FILE, ""w"") as f:
        json.dump(cfg, f, indent=2)

server_configs = load_configs()
daily_log_cache = defaultdict(set)

# ————— Google Sheets Setup —————
CREDENTIALS_FILE = '/home/r23dprinting/fitness-challenge-462612-78786b6edf2e.json'
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)

# ————— Helpers —————
def is_admin(ctx, cfg):
    return ctx.user.guild_permissions.administrator or any(
        r.name == cfg.get(""admin_role"") for r in ctx.user.roles
    )

# ————— Config Flow Modals —————
CONFIG_KEYS = [
    (""sheet_name"", ""Google Sheet name""),
    (""thread_name"", ""Exact thread name""),
    (""channel_name"", ""Parent channel name""),
    (""admin_role"", ""Admin role name""),
    (""hashtag"", ""Hashtag (#include, or leave blank)""),
    (""timezone"", ""Timezone""),
    (""start_date"", ""Challenge start date (YYYY-MM-DD)""),
    (""end_date"", ""Challenge end date (YYYY-MM-DD)""),
    (""goal_days"", ""Goal days (number)""),
    (""auto_summaries"", ""Send auto-summaries? (yes/no)"")
]

class ConfigFlow:
    def __init__(self, guild_id, existing=None):
        self.guild_id = guild_id
        self.data = existing.copy() if existing else {}
        self.step = 0

class InputModal(ui.Modal):
    def __init__(self, flow: ConfigFlow, key, label):
        super().__init__(title=f""Set {label}"")
        self.flow = flow
        self.key = key
        default_val = self.flow.data.get(self.key, """")
        self.add_item(ui.TextInput(label=label, style=discord.TextStyle.short, default=default_val))

    async def on_submit(self, interaction):
        val = self.children[0].value.strip()
        if self.key == ""goal_days"" and not val.isdigit():
            return await interaction.response.send_message(""❌ Must be a number."", ephemeral=True)
        if self.key == ""auto_summaries"":
            lv = val.lower()
            if lv not in (""yes"", ""no""):
                return await interaction.response.send_message(""❌ Enter yes or no."", ephemeral=True)
            val = (lv == ""yes"")
        self.flow.data[self.key] = val
        self.flow.step += 1
        if self.flow.step < len(CONFIG_KEYS):
            nk, nl = CONFIG_KEYS[self.flow.step]
            if nk == ""timezone"":
                await interaction.response.send_modal(TimezoneModal(self.flow))
            else:
                await interaction.response.send_modal(InputModal(self.flow, nk, nl))
        else:
            server_configs[str(self.flow.guild_id)] = self.flow.data
            save_configs(server_configs)
            await interaction.response.send_message(""✅ Configuration saved & reloaded!"", ephemeral=True)

class TimezoneModal(ui.Modal):
    def __init__(self, flow: ConfigFlow):
        super().__init__(title=""Enter Timezone (e.g. US/Eastern)"")
        self.flow = flow
        self.add_item(ui.TextInput(label=""Timezone"", placeholder=""e.g. US/Eastern""))

    async def on_submit(self, interaction: discord.Interaction):
        val = self.children[0].value.strip()
        if val not in COMMON_TIMEZONES:
            return await interaction.response.send_message(
                ""❌ Invalid timezone. Must be one of:\n"" +
                "", "".join(COMMON_TIMEZONES), ephemeral=True
            )
        self.flow.data[""timezone""] = val
        self.flow.step += 1
        nk, nl = CONFIG_KEYS[self.flow.step]
        await interaction.response.send_modal(InputModal(self.flow, nk, nl))

# ————— Bot Init —————
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix=""!"", intents=intents)

@bot.event
async def on_ready():
    log.info(""Bot is online and ready"")
    try:
        synced = await bot.tree.sync()
        log.info(f""Synced {len(synced)} application commands"")
    except Exception as e:
        log.error(f""Slash sync failed: {e}"")
    asyncio.create_task(summary_scheduler())

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot or not message.guild:
        return
    cfg = server_configs.get(str(message.guild.id))
    if not cfg:
        return
    thread = message.channel if isinstance(message.channel, discord.Thread) else None
    if not thread or thread.name != cfg[""thread_name""] or thread.parent.name != cfg[""channel_name""]:
        return
    if not (message.attachments or cfg.get(""hashtag"", """").lower() in message.content.lower()):
        return

    tz = timezone(cfg[""timezone""])
    now = utc.localize(datetime.utcnow()).astimezone(tz)
    try:
        sd = datetime.fromisoformat(cfg[""start_date""]).date()
        ed = datetime.fromisoformat(cfg[""end_date""]).date()
    except:
        log.error(f""Invalid dates for guild {message.guild.id}"")
        return

    if not (sd <= now.date() <= ed):
        try:
            await message.author.send(
                f""💪 Good job staying active!\nYour activity in **{message.guild.name}** wasn’t logged — ""
                f""challenge runs **{sd.strftime('%b %d')} to {ed.strftime('%b %d')} ({tz.zone})**.""
            )
            log.info(f""Sent DM to {message.author}"")
        except discord.Forbidden:
            log.warning(f""Cannot DM {message.author}"")
        return

    dstr = now.date().isoformat()
    uid = str(message.author.id)
    if uid not in daily_log_cache[dstr]:
        try:
            client.open(cfg[""sheet_name""]).sheet1.append_row([uid, str(message.author), now.isoformat()])
            daily_log_cache[dstr].add(uid)
            log.info(f""Logged {message.author}"")
        except Exception as e:
            log.error(f""Sheet append failed: {e}"")

    await bot.process_commands(message)


# ————— Slash (Tree) Commands —————
@bot.tree.command(name=""progress"", description=""Your monthly activity count"")
async def progress(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    sheet = client.open(cfg[""sheet_name""]).sheet1
    days = {r['Timestamp'].split(""T"")[0] for r in sheet.get_all_records() if r['UserID'] == str(interaction.user.id)}
    await interaction.response.send_message(f""You’ve logged {len(days)} day(s) this challenge! 💪"", ephemeral=True)

@bot.tree.command(name=""streak"", description=""Your current activity streak"")
async def streak(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    sheet = client.open(cfg[""sheet_name""]).sheet1
    recs = sorted(sheet.get_all_records(), key=lambda r: r['Timestamp'])
    days = sorted({r['Timestamp'].split(""T"")[0] for r in recs if r['UserID'] == str(interaction.user.id)}, reverse=True)
    streak_count = 0
    today = datetime.utcnow().date()
    for d in days:
        if datetime.fromisoformat(d).date() == today - timedelta(days=streak_count):
            streak_count += 1
        else:
            break
    await interaction.response.send_message(f""🔥 Your current streak: {streak_count} day(s)"", ephemeral=True)

@bot.tree.command(name=""check"", description=""ADMIN: Check another member’s log days"")
async def check(interaction: discord.Interaction, member: discord.Member):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    sheet = client.open(cfg[""sheet_name""]).sheet1
    days = {r['Timestamp'].split(""T"")[0] for r in sheet.get_all_records() if r['UserID'] == str(member.id)}
    await interaction.response.send_message(f""{member.display_name} has logged {len(days)} day(s)."", ephemeral=True)

@bot.tree.command(name=""leaderboard"", description=""ADMIN: View top participants"")
async def leaderboard(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    sheet = client.open(cfg[""sheet_name""]).sheet1
    counts = defaultdict(set)
    for r in sheet.get_all_records():
        counts[r['UserID']].add(r['Timestamp'].split(""T"")[0])
    sorted_lb = sorted(counts.items(), key=lambda x: len(x[1]), reverse=True)
    msg = ""🏆 Leaderboard:\n""
    for i, (uid, ds) in enumerate(sorted_lb[:10]):
        member = interaction.guild.get_member(int(uid))
        name = member.display_name if member else uid
        msg += f""{i+1}. {name} – {len(ds)} day(s)\n""
    await interaction.response.send_message(msg, ephemeral=True)

@bot.tree.command(name=""export"", description=""ADMIN: Export logs to CSV"")
async def export(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    csv_content = ""\n"".join("","".join(r) for r in client.open(cfg[""sheet_name""]).sheet1.get_all_values())
    await interaction.response.send_message(file=discord.File(fp=io.StringIO(csv_content), filename=""fitness_log.csv""), ephemeral=True)

@bot.tree.command(name=""reset_cache"", description=""ADMIN: Reset today’s in-memory log cache"")
async def reset_cache(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    today = datetime.utcnow().date().isoformat()
    if today in daily_log_cache:
        del daily_log_cache[today]
        await interaction.response.send_message(""♻️ Today’s log cache has been reset."", ephemeral=True)
    else:
        await interaction.response.send_message(""ℹ️ No cached entries today."", ephemeral=True)

@bot.tree.command(name=""reload_config"", description=""ADMIN: Reload JSON config file"")
async def reload_config(interaction: discord.Interaction):
    global server_configs  # <- move this line to the top
    cfg = server_configs.get(str(interaction.guild.id))
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    server_configs = load_configs()
    await interaction.response.send_message(""🔄 Configuration reloaded."", ephemeral=True)

class ConfigPromptView(ui.View):
    def __init__(self, interaction, cfg):
        super().__init__(timeout=60)
        self.cfg = cfg

    @ui.button(label=""Edit Settings"", style=discord.ButtonStyle.primary)
    async def edit(self, interaction: discord.Interaction, button: discord.ui.Button):
        flow = ConfigFlow(interaction.guild.id, self.cfg)
        nk, nl = CONFIG_KEYS[0]
        await interaction.response.send_modal(InputModal(flow, nk, nl))
        self.stop()

    @ui.button(label=""Keep Current Settings"", style=discord.ButtonStyle.secondary)
    async def keep(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(""✅ Keeping existing configuration."", ephemeral=True)
        self.stop()

@bot.tree.command(name=""configure"", description=""ADMIN: Setup or update this server"")
async def configure(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message(""❌ Admins only."", ephemeral=True)

    cfg = server_configs.get(str(interaction.guild.id))
    if not cfg:
        await interaction.response.send_message(""🆕 Starting new server setup..."", ephemeral=True)
        flow = ConfigFlow(interaction.guild.id)
        nk, nl = CONFIG_KEYS[0]
        return await interaction.response.send_modal(InputModal(flow, nk, nl))

    summary = (
        f""**Current Configuration:**\n""
        f""- Sheet: `{cfg.get('sheet_name', 'N/A')}`\n""
        f""- Channel: `{cfg.get('channel_name', 'N/A')}`\n""
        f""- Thread: `{cfg.get('thread_name', 'N/A')}`\n""
        f""- Admin role: `{cfg.get('admin_role', 'N/A')}`\n""
        f""- Hashtag: `{cfg.get('hashtag', 'None')}`\n""
        f""- Timezone: `{cfg.get('timezone', 'N/A')}`\n""
        f""- Challenge: {cfg.get('start_date', 'N/A')} → {cfg.get('end_date', 'N/A')} ""
        f""(Goal: {cfg.get('goal_days','n/a')}, AutoSummaries: {cfg.get('auto_summaries','yes')})\n\n""
        f""🔧 Do you want to edit this configuration?""
    )
    await interaction.response.send_message(summary, view=ConfigPromptView(interaction, cfg), ephemeral=True)

@bot.tree.command(name=""view_config"", description=""ADMIN: View current configuration"")
async def view_config(interaction: discord.Interaction):
    cfg = server_configs.get(str(interaction.guild.id))
    if not cfg or not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message(""❌ No permission or not configured."", ephemeral=True)

    await interaction.response.send_message(
        f""**Configuration for {interaction.guild.name}:**\n""
        f""- Sheet: `{cfg.get('sheet_name', 'N/A')}`\n""
        f""- Channel: `{cfg.get('channel_name', 'N/A')}`\n""
        f""- Thread: `{cfg.get('thread_name', 'N/A')}`\n""
        f""- Admin role: `{cfg.get('admin_role', 'N/A')}`\n""
        f""- Hashtag: `{cfg.get('hashtag', 'None')}`\n""
        f""- Timezone: `{cfg.get('timezone', 'N/A')}`\n""
        f""- Challenge: {cfg.get('start_date', 'N/A')} → {cfg.get('end_date', 'N/A')} ""
        f""(Goal: {cfg.get('goal_days','n/a')}, AutoSummaries: {cfg.get('auto_summaries','yes')})\n\n""
        f""🔑 Make sure your sheet is shared with `{creds.service_account_email}` as Editor."",
        ephemeral=True
    )

@bot.tree.command(name=""help"", description=""Show available commands"")
async def _help(interaction: discord.Interaction):
    cfg = server_configs.get(str(interaction.guild.id))
    admin = cfg and is_admin(interaction, cfg)
    lines = [""**Available Commands:**"",
             ""• /progress – Your monthly log count"",
             ""• /streak – Your current activity streak""]
    if admin:
        lines += [
            """", ""**Admin Commands:**"",
            ""• /check @user – View another user’s stats"",
            ""• /leaderboard – View top participants"",
            ""• /export – Export logs to CSV"",
            ""• /reset_cache – Clear today’s cache"",
            ""• /reload_config – Reload config file"",
            ""• /configure – Setup/update this server"",
            ""• /view_config – View current settings""
        ]
    lines.append(""• /help – Show this help message"")
    await interaction.response.send_message(""\n"".join(lines), ephemeral=True)

# ————— Summary Scheduler (stub) —————
async def summary_scheduler():
    await bot.wait_until_ready()
    while True:
        await asyncio.sleep(86400)
        # future summary/notification logic happens here

# ————— Run the Bot —————
bot.run(os.getenv(""DISCORD_BOT_TOKEN""))"
YDKRE7q4,Untitled,thelebaron,C#,Wednesday 18th of June 2025 09:13:48 PM CDT,"public static void ConstructData(this ref BlobBuilder builder, ref DenseClip root, Animator animator, AnimationClip clip,
                                         Dictionary<string, EditorCurveBinding> curveDict)
        {
            int                           ratio   = curveDict.Count <= UseBucketCapacityRatioOfThreeUpTo ? 3 : 2;
            List<Tuple<string, string[]>> mapping = HumanoidRemapping.BoneToMuscleList;
   
            int capacity       = curveDict.Count;
            int bucketCapacity = math.ceilpow2(capacity * ratio);

            // bucketCapacityMask is neccessary for retrieval so set it on the data too
            int bucketCapacityMask = bucketCapacity - 1;
            int keyCapacity        = capacity;
            
            BlobBuilderArray<BlobArray<BlobCurve>> values  = builder.Allocate(ref root.HumanoidCurveData.data.values, capacity);
            BlobBuilderArray<uint>                 keys    = builder.Allocate(ref root.HumanoidCurveData.data.keys, capacity);
            BlobBuilderArray<int>                  next    = builder.Allocate(ref root.HumanoidCurveData.data.next, capacity);
            BlobBuilderArray<int>                  buckets = builder.Allocate(ref root.HumanoidCurveData.data.buckets, bucketCapacity);

            Debug.Log($"" values {values.Length}"");

            // so far the only way I've found to modify the true count on the data itself (without using unsafe code)
            // is by storing it in an array we can still access in the Add method.
            // count is only used in GetKeyArray and GetValueArray to size the array to the true count instead of capacity
            // count and keyCapacity are like
            BlobBuilderArray<int> count = builder.Allocate(ref root.HumanoidCurveData.data.count, 1);
            // Clear
            for (int i = 0; i < buckets.Length; i++)
                buckets[i] = -1;
            for (int i = 0; i < next.Length; i++)
                next[i] = -1;

            // Add logic
            for (var index = 0; index < mapping.Count; index++)
            {
                Tuple<string, string[]> boneMap       = mapping[index];
                uint      key           = mathex.CalculateHash32(boneMap.Item1);
                string[] propertyNames = boneMap.Item2;

                ref int c      = ref count[0];
                int     bucket = key.GetHashCode() & bucketCapacityMask;
                int     bucketIndex  = c++;

                int                         propertyCount     = 3;
                BlobBuilderArray<BlobCurve> curveArrayBuilder = builder.Allocate(ref values[index], propertyCount);

                for (int i = 0; i < propertyCount; i++)
                {
                    // we just add an empty key for missing properties
                    if (propertyNames[i].Equals(""""))
                    {
                        // Allocate single keyframe if no actual data
                        BlobBuilderArray<Key> emptyKeyframeBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, 1);
                        emptyKeyframeBuilder[0] = new Key();
                        continue;
                    }

                    // Get the curve for the property
                    AnimationCurve        curve            = AnimationUtility.GetEditorCurve(clip, curveDict.GetValueOrDefault(propertyNames[i]));
                    BlobBuilderArray<Key> keyframesBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, curve.keys.Length);

                    // Directly populate the blob array from curve keys
                    for (int kIndex = 0; kIndex < curve.keys.Length; kIndex++)
                    {
                        keyframesBuilder[kIndex] = new Key(curve.keys[kIndex]);
                    }
                }

                keys[index] = key;
                //values[index] =
                next[index]     = buckets[bucket];
                buckets[bucket] = index;
            }
        }"
CTaqVgdh,Untitled,thelebaron,C#,Wednesday 18th of June 2025 09:02:58 PM CDT,"public static void ConstructData(this ref BlobBuilder builder, ref DenseClip root, Animator animator, AnimationClip clip,
                                         Dictionary<string, EditorCurveBinding> curveDict)
        {
            int ratio = curveDict.Count <= UseBucketCapacityRatioOfThreeUpTo ? 3 : 2;
            var mapping = HumanoidRemapping.BoneToMuscleList;
   
            var capacity       = curveDict.Count;
            int bucketCapacity = math.ceilpow2(capacity * ratio);

            // bucketCapacityMask is neccessary for retrieval so set it on the data too
            var bucketCapacityMask = bucketCapacity - 1;
            var keyCapacity        = capacity;
            
            BlobBuilderArray<BlobArray<BlobCurve>> values  = builder.Allocate(ref root.HumanoidCurveData.data.values, capacity);
            var                keys    = builder.Allocate(ref root.HumanoidCurveData.data.keys, capacity);
            var                next    = builder.Allocate(ref root.HumanoidCurveData.data.next, capacity);
            var                buckets = builder.Allocate(ref root.HumanoidCurveData.data.buckets, bucketCapacity);

            // so far the only way I've found to modify the true count on the data itself (without using unsafe code)
            // is by storing it in an array we can still access in the Add method.
            // count is only used in GetKeyArray and GetValueArray to size the array to the true count instead of capacity
            // count and keyCapacity are like
            var count = builder.Allocate(ref root.HumanoidCurveData.data.count, 1);
            // Clear
            for (int i = 0; i < buckets.Length; i++)
                buckets[i] = -1;
            for (int i = 0; i < next.Length; i++)
                next[i] = -1;

            // Add logic
            foreach (Tuple<string, string[]> boneMap in mapping)
            {
                var      key           = mathex.CalculateHash32(boneMap.Item1);
                string[] propertyNames = boneMap.Item2;
                
                ref int c      = ref count[0];
                int     bucket = key.GetHashCode() & bucketCapacityMask;
                int     index  = c++;

                var propertyCount     = 3;
                var curveArrayBuilder = builder.Allocate(ref values[index], propertyCount);

                for (int i = 0; i < propertyCount; i++)
                {
                    // we just add an empty key for missing properties
                    if (propertyNames[i].Equals(""""))
                    {
                        // Allocate single keyframe if no actual data
                        var emptyKeyframeBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, 1);
                        emptyKeyframeBuilder[0] = new Key();
                        continue;
                    }

                    // Get the curve for the property
                    var curve = AnimationUtility.GetEditorCurve(clip, curveDict.GetValueOrDefault(propertyNames[i]));
                    var keyframesBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, curve.keys.Length);
                    
                    // Directly populate the blob array from curve keys
                    for (int kIndex = 0; kIndex < curve.keys.Length; kIndex++)
                    {
                        keyframesBuilder[kIndex] = new Key(curve.keys[kIndex]);
                    }
                }

                keys[index] = key;
                //values[index] =
                next[index] = buckets[bucket];
                buckets[bucket] = index;
            }
        }"
zRUgtcVm,cc-wheat-farm,asianhaydenxd,Lua,Wednesday 18th of June 2025 08:50:43 PM CDT,"local function findInInventory(itemName)
    local item = turtle.getItemDetail()
    if item and item.name == itemName then
        return
    end
    
    for i=1,16 do
        turtle.select(i)
        local item = turtle.getItemDetail()
        if item and item.name == itemName then
            return
        end
    end
end

local function replant()
    local success, data = turtle.inspectDown()
    if not success then return end
    if data.name ~= ""minecraft:wheat"" then return end
    if data.state.age ~= 7 then return end
    turtle.digDown()
    findInInventory(""minecraft:wheat_seeds"")
    turtle.placeDown()
end

local function harvestLayer()
    -- Turtle should be over belt facing towards the farm.
    for i=1,2 do
        turtle.forward()
    end

    for i=1,4 do
        replant()
        for i=1,8 do
            turtle.forward()
            replant()
        end
        turtle.turnRight()
        turtle.forward()
        turtle.turnRight()

        replant()
        for i=1,8 do
            turtle.forward()
            replant()
        end
        turtle.turnLeft()
        turtle.forward()
        turtle.turnLeft()
    end
    replant()
    for i=1,8 do
        turtle.forward()
        replant()
    end

    turtle.turnLeft()
    for i=1,8 do
        turtle.forward()
    end
    turtle.turnLeft()
    for i=1,10 do
        turtle.forward()
    end
    for i=1,2 do
        turtle.turnLeft()
    end
end

local function dropAll(itemName)
    for i=1,16 do
        turtle.select(i)
        local item = turtle.getItemDetail()
        if item and item.name == itemName then
            turtle.dropDown()
        end
    end
end

local function harvestAll()
    harvestLayer()
    for i=1,2 do
        for i=1,4 do
            turtle.up()
        end
        harvestLayer()
    end
    for i=1,8 do
        turtle.down()
    end
    dropAll(""minecraft:wheat"")
    turtle.turnLeft()
    for i=1,2 do turtle.forward() end
    dropAll(""minecraft:wheat_seeds"")
    for i=1,2 do turtle.turnRight() end
    for i=1,2 do turtle.forward() end
    turtle.turnLeft()
end

turtle.select(1)

while true do
    harvestAll()
end"
