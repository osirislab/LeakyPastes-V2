id,title,username,language,date,content
HFtNr2Tw,Instagram,Rakibmunshi721,JSON,Wednesday 22nd of October 2025 07:02:20 AM CDT,"{
  ""show_message"": true,
  ""title"": ""Download InstaPro v13.40"",
  ""content_url"": ""https://www.t.me/SuperModsApk"",
  ""positive_btn"": "" Cancel"",
  ""link"": ""https://passengercomprehend.com/h556sfex?key=edfc49a5c2ef8ee25626edf36af68319"",
    ""positive_btn2"": ""Download  Now"",
  ""link2"": ""https://www.t.me/SuperModsApk"",
  ""cancelable"": false
}"
EmyGRywK,LINK,fernan1303,Python,Wednesday 22nd of October 2025 06:58:47 AM CDT,"https://m.youtube.com
https://m.youtube.com
https://m.youtube.com
https://m.youtube.com
https://m.youtube.com
https://m.youtube.com
https://m.youtube.com
https://m.youtube.com"
wjd4bnsf,USERNAME,fernan1303,Python,Wednesday 22nd of October 2025 06:58:13 AM CDT,"clara_mcmanus81547
emiliamcelroy39196
miriam_mcgarry44710
lena.mclarty31403
amaliamcdougall18285
andreamcknight58204
bethany.mccall22390
charlotte_mcdowell25312"
3bdAwD74,ACL4080 set mode,patlefort,C++,Wednesday 22nd of October 2025 06:27:59 AM CDT,"#include <libusb-1.0/libusb.h>
#include <iostream>
#include <cstdint>

constexpr std::uint16_t vendor_id = 0x0db0;
constexpr std::uint16_t product_id = 0xcd0e;
constexpr unsigned char mode = 0b00001111;

struct usb_exit
{
	~usb_exit()
	{
		libusb_exit(nullptr);
	}
};

struct usb_device_guard
{
	libusb_device_handle *m_handle;

	~usb_device_guard()
	{
		libusb_close(m_handle);
	}
};

int main()
{
	int result = libusb_init(nullptr);
	if ( result < 0 )
	{
		std::cerr << ""Error initializing libusb: "" << libusb_error_name(result) << '\n';
		return 1;
	}
	usb_exit usb_exit_guard;

	libusb_set_option(nullptr, LIBUSB_OPTION_LOG_LEVEL, LIBUSB_LOG_LEVEL_WARNING);

	auto device_handle = libusb_open_device_with_vid_pid(nullptr, vendor_id, product_id);
	if(!device_handle)
	{
		std::cerr << ""Error opening usb device.\n"";
		return 1;
	}
	usb_device_guard dguard{device_handle};

	unsigned char data[1] = {mode};
	if ((result = libusb_control_transfer(device_handle, 0x40, 108, 0, 1, data, 1, 0)) < 0)
	{
		std::cerr << ""libusb_control_transfer error: "" << libusb_error_name(result) << '\n';
	}

	return 0;
}
"
dF5Tt6g7,trainingLab,ALSAVOV,JavaScript,Wednesday 22nd of October 2025 06:09:57 AM CDT,"function trainLab(h, w) {
    const widthSm = w * 100;
    const heightSm = h * 100;
    const rabotnoMShirinaSm = 70;
    const rabotnoMDyljinaSm = 120;
    const coridor = 100;
    const zagubeniMesta = 3;
    const realWidtSm = widthSm - coridor;

    const masiNaRed = Math.floor(realWidtSm / rabotnoMShirinaSm);
    const redoveSMasi = Math.floor(heightSm / rabotnoMDyljinaSm);
    const ob6toMestaVZalata = masiNaRed * redoveSMasi - zagubeniMesta;
    return ob6toMestaVZalata;
}"
gDnTWctQ,ScreenJson,fjaroli,JSON,Wednesday 22nd of October 2025 05:29:23 AM CDT,"{
  ""routeName"": ""student"",
  ""screenName"": ""Add Student"",
  ""submitPostUrl"": ""https://example.com"",
  ""entityConfigs"": [
    {
      ""jsonKey"": ""name"",
      ""code"": ""STUDENT.NAME"",
      ""uiConfig"": {
        ""label"": ""Enter Name"",
        ""type"": ""UI_CONFIG_TYPE.TEXT_INPUT"",
        ""subType"": ""UI_CONFIG_SUB_TYPE.SHORT_TEXT"",
        ""options"": null,
        ""validationRules"": {
          ""isMandatory"": true,
          ""regEx"": ""^[A-Za-z\\s.,!?'\""-]*$""
        }
      }
    },
    {
      ""jsonKey"": ""gender"",
      ""code"": ""STUDENT.GENDER"",
      ""uiConfig"": {
        ""label"": ""Select Gender"",
        ""type"": ""UI_CONFIG_TYPE.RADIO_OPTION"",
        ""subType"": ""UI_CONFIG_SUB_TYPE.SINGLE"",
        ""options"": [
          {""label"": ""Male"", ""code"": ""GENDER.MALE""},
          {""label"": ""Female"", ""code"": ""GENDER.FEMALE""},
          {""label"": ""Other"", ""code"": ""GENDER.OTHER""}
        ],
        ""validationRules"": {""isMandatory"": true, ""regEx"": null}
      }
    },
    {
      ""jsonKey"": ""class"",
      ""code"": ""STUDENT.CLASS"",
      ""uiConfig"": {
        ""label"": ""Select Class"",
        ""type"": ""UI_CONFIG_TYPE.DROP_DOWN"",
        ""subType"": ""UI_CONFIG_SUB_TYPE.SINGLE"",
        ""options"": [
          {""label"": ""First"", ""code"": ""CLASS.FIRST""},
          {""label"": ""Second"", ""code"": ""CLASS.SECOND""},
          {""label"": ""Third"", ""code"": ""CLASS.THIRD""}
        ],
        ""validationRules"": {""isMandatory"": true, ""regEx"": null}
      }
    },
    {
      ""jsonKey"": ""subject"",
      ""code"": ""STUDENT.SUBJECT"",
      ""uiConfig"": {
        ""label"": ""Select Subjects"",
        ""type"": ""UI_CONFIG_TYPE.CHECK_OPTION"",
        ""subType"": ""UI_CONFIG_SUB_TYPE.MULTI_SELECT"",
        ""options"": [
          {""label"": ""Hindi"", ""code"": ""SUBJECT.HINDI""},
          {""label"": ""English"", ""code"": ""SUBJECT.ENGLISH""},
          {""label"": ""Science"", ""code"": ""SUBJECT.SCIENCE""}
        ],
        ""validationRules"": {""isMandatory"": true, ""regEx"": null}
      }
    },
    {
      ""jsonKey"": ""hobbies"",
      ""code"": ""STUDENT.HOBBIES"",
      ""uiConfig"": {
        ""label"": ""Select Hobbies"",
        ""type"": ""UI_CONFIG_TYPE.DROP_DOWN"",
        ""subType"": ""UI_CONFIG_SUB_TYPE.MULTI_SELECT"",
        ""options"": [
          {""label"": ""Cricket"", ""code"": ""HOBBY.CRICKET""},
          {""label"": ""Music"", ""code"": ""HOBBY.MUSIC""},
          {""label"": ""Painting"", ""code"": ""HOBBY.PAINTING""}
        ],
        ""validationRules"": {""isMandatory"": false, ""regEx"": null}
      }
    }
  ]
}"
mR3CdEhj,auto_shiny.py,kakerando,Python,Wednesday 22nd of October 2025 05:17:33 AM CDT,"import gdb
import secrets

POKEDEX = {
    1: ""フシギダネ"",
    2: ""フシギソウ"",
    3: ""フシギバナ"",
    4: ""ヒトカゲ"",
    5: ""リザード"",
    6: ""リザードン"",
    7: ""ゼニガメ"",
    8: ""カメール"",
    9: ""カメックス"",
    10: ""キャタピー"",
    11: ""トランセル"",
    12: ""バタフリー"",
    13: ""ビードル"",
    14: ""コクーン"",
    15: ""スピアー"",
    16: ""ポッポ"",
    17: ""ピジョン"",
    18: ""ピジョット"",
    19: ""コラッタ"",
    20: ""ラッタ"",
    21: ""オニスズメ"",
    22: ""オニドリル"",
    23: ""アーボ"",
    24: ""アーボック"",
    25: ""ピカチュウ"",
    26: ""ライチュウ"",
    27: ""サンド"",
    28: ""サンドパン"",
    29: ""ニドラン♀"",
    30: ""ニドリーナ"",
    31: ""ニドクイン"",
    32: ""ニドラン♂"",
    33: ""ニドリーノ"",
    34: ""ニドキング"",
    35: ""ピッピ"",
    36: ""ピクシー"",
    37: ""ロコン"",
    38: ""キュウコン"",
    39: ""プリン"",
    40: ""プクリン"",
    41: ""ズバット"",
    42: ""ゴルバット"",
    43: ""ナゾノクサ"",
    44: ""クサイハナ"",
    45: ""ラフレシア"",
    46: ""パラス"",
    47: ""パラセクト"",
    48: ""コンパン"",
    49: ""モルフォン"",
    50: ""ディグダ"",
    51: ""ダグトリオ"",
    52: ""ニャース"",
    53: ""ペルシアン"",
    54: ""コダック"",
    55: ""ゴルダック"",
    56: ""マンキー"",
    57: ""オコリザル"",
    58: ""ガーディ"",
    59: ""ウインディ"",
    60: ""ニョロモ"",
    61: ""ニョロゾ"",
    62: ""ニョロボン"",
    63: ""ケーシィ"",
    64: ""ユンゲラー"",
    65: ""フーディン"",
    66: ""ワンリキー"",
    67: ""ゴーリキー"",
    68: ""カイリキー"",
    69: ""マダツボミ"",
    70: ""ウツドン"",
    71: ""ウツボット"",
    72: ""メノクラゲ"",
    73: ""ドククラゲ"",
    74: ""イシツブテ"",
    75: ""ゴローン"",
    76: ""ゴローニャ"",
    77: ""ポニータ"",
    78: ""ギャロップ"",
    79: ""ヤドン"",
    80: ""ヤドラン"",
    81: ""コイル"",
    82: ""レアコイル"",
    83: ""カモネギ"",
    84: ""ドードー"",
    85: ""ドードリオ"",
    86: ""パウワウ"",
    87: ""ジュゴン"",
    88: ""ベトベター"",
    89: ""ベトベトン"",
    90: ""シェルダー"",
    91: ""パルシェン"",
    92: ""ゴース"",
    93: ""ゴースト"",
    94: ""ゲンガー"",
    95: ""イワーク"",
    96: ""スリープ"",
    97: ""スリーパー"",
    98: ""クラブ"",
    99: ""キングラー"",
    100: ""ビリリダマ"",
    101: ""マルマイン"",
    102: ""タマタマ"",
    103: ""ナッシー"",
    104: ""カラカラ"",
    105: ""ガラガラ"",
    106: ""サワムラー"",
    107: ""エビワラー"",
    108: ""ベロリンガ"",
    109: ""ドガース"",
    110: ""マタドガス"",
    111: ""サイホーン"",
    112: ""サイドン"",
    113: ""ラッキー"",
    114: ""モンジャラ"",
    115: ""ガルーラ"",
    116: ""タッツー"",
    117: ""シードラ"",
    118: ""トサキント"",
    119: ""アズマオウ"",
    120: ""ヒトデマン"",
    121: ""スターミー"",
    122: ""バリヤード"",
    123: ""ストライク"",
    124: ""ルージュラ"",
    125: ""エレブー"",
    126: ""ブーバー"",
    127: ""カイロス"",
    128: ""ケンタロス"",
    129: ""コイキング"",
    130: ""ギャラドス"",
    131: ""ラプラス"",
    132: ""メタモン"",
    133: ""イーブイ"",
    134: ""シャワーズ"",
    135: ""サンダース"",
    136: ""ブースター"",
    137: ""ポリゴン"",
    138: ""オムナイト"",
    139: ""オムスター"",
    140: ""カブト"",
    141: ""カブトプス"",
    142: ""プテラ"",
    143: ""カビゴン"",
    144: ""フリーザー"",
    145: ""サンダー"",
    146: ""ファイヤー"",
    147: ""ミニリュウ"",
    148: ""ハクリュー"",
    149: ""カイリュー"",
    150: ""ミュウツー"",
    151: ""ミュウ"",
    152: ""チコリータ"",
    153: ""ベイリーフ"",
    154: ""メガニウム"",
    155: ""ヒノアラシ"",
    156: ""マグマラシ"",
    157: ""バクフーン"",
    158: ""ワニノコ"",
    159: ""アリゲイツ"",
    160: ""オーダイル"",
    161: ""オタチ"",
    162: ""オオタチ"",
    163: ""ホーホー"",
    164: ""ヨルノズク"",
    165: ""レディバ"",
    166: ""レディアン"",
    167: ""イトマル"",
    168: ""アリアドス"",
    169: ""クロバット"",
    170: ""チョンチー"",
    171: ""ランターン"",
    172: ""ピチュー"",
    173: ""ピィ"",
    174: ""ププリン"",
    175: ""トゲピー"",
    176: ""トゲチック"",
    177: ""ネイティ"",
    178: ""ネイティオ"",
    179: ""メリープ"",
    180: ""モココ"",
    181: ""デンリュウ"",
    182: ""キレイハナ"",
    183: ""マリル"",
    184: ""マリルリ"",
    185: ""ウソッキー"",
    186: ""ニョロトノ"",
    187: ""ハネッコ"",
    188: ""ポポッコ"",
    189: ""ワタッコ"",
    190: ""エイパム"",
    191: ""ヒマナッツ"",
    192: ""キマワリ"",
    193: ""ヤンヤンマ"",
    194: ""ウパー"",
    195: ""ヌオー"",
    196: ""エーフィ"",
    197: ""ブラッキー"",
    198: ""ヤミカラス"",
    199: ""ヤドキング"",
    200: ""ムウマ"",
    201: ""アンノーン"",
    202: ""ソーナンス"",
    203: ""キリンリキ"",
    204: ""クヌギダマ"",
    205: ""フォレトス"",
    206: ""ノコッチ"",
    207: ""グライガー"",
    208: ""ハガネール"",
    209: ""ブルー"",
    210: ""グランブル"",
    211: ""ハリーセン"",
    212: ""ハッサム"",
    213: ""ツボツボ"",
    214: ""ヘラクロス"",
    215: ""ニューラ"",
    216: ""ヒメグマ"",
    217: ""リングマ"",
    218: ""マグマッグ"",
    219: ""マグカルゴ"",
    220: ""ウリムー"",
    221: ""イノムー"",
    222: ""サニーゴ"",
    223: ""テッポウオ"",
    224: ""オクタン"",
    225: ""デリバード"",
    226: ""マンタイン"",
    227: ""エアームド"",
    228: ""デルビル"",
    229: ""ヘルガー"",
    230: ""キングドラ"",
    231: ""ゴマゾウ"",
    232: ""ドンファン"",
    233: ""ポリゴン２"",
    234: ""オドシシ"",
    235: ""ドーブル"",
    236: ""バルキー"",
    237: ""カポエラー"",
    238: ""ムチュール"",
    239: ""エレキッド"",
    240: ""ブビィ"",
    241: ""ミルタンク"",
    242: ""ハピナス"",
    243: ""ライコウ"",
    244: ""エンテイ"",
    245: ""スイクン"",
    246: ""ヨーギラス"",
    247: ""サナギラス"",
    248: ""バンギラス"",
    249: ""ルギア"",
    250: ""ホウオウ"",
    251: ""セレビィ"",
    252: ""キモリ"",
    253: ""ジュプトル"",
    254: ""ジュカイン"",
    255: ""アチャモ"",
    256: ""ワカシャモ"",
    257: ""バシャーモ"",
    258: ""ミズゴロウ"",
    259: ""ヌマクロー"",
    260: ""ラグラージ"",
    261: ""ポチエナ"",
    262: ""グラエナ"",
    263: ""ジグザグマ"",
    264: ""マッスグマ"",
    265: ""ケムッソ"",
    266: ""カラサリス"",
    267: ""アゲハント"",
    268: ""マユルド"",
    269: ""ドクケイル"",
    270: ""ハスボー"",
    271: ""ハスブレロ"",
    272: ""ルンパッパ"",
    273: ""タネボー"",
    274: ""コノハナ"",
    275: ""ダーテング"",
    276: ""スバメ"",
    277: ""オオスバメ"",
    278: ""キャモメ"",
    279: ""ペリッパー"",
    280: ""ラルトス"",
    281: ""キルリア"",
    282: ""サーナイト"",
    283: ""アメタマ"",
    284: ""アメモース"",
    285: ""キノココ"",
    286: ""キノガッサ"",
    287: ""ナマケロ"",
    288: ""ヤルキモノ"",
    289: ""ケッキング"",
    290: ""ツチニン"",
    291: ""テッカニン"",
    292: ""ヌケニン"",
    293: ""ゴニョニョ"",
    294: ""ドゴーム"",
    295: ""バクオング"",
    296: ""マクノシタ"",
    297: ""ハリテヤマ"",
    298: ""ルリリ"",
    299: ""ノズパス"",
    300: ""エネコ"",
    301: ""エネコロロ"",
    302: ""ヤミラミ"",
    303: ""クチート"",
    304: ""ココドラ"",
    305: ""コドラ"",
    306: ""ボスゴドラ"",
    307: ""アサナン"",
    308: ""チャーレム"",
    309: ""ラクライ"",
    310: ""ライボルト"",
    311: ""プラスル"",
    312: ""マイナン"",
    313: ""バルビート"",
    314: ""イルミーゼ"",
    315: ""ロゼリア"",
    316: ""ゴクリン"",
    317: ""マルノーム"",
    318: ""キバニア"",
    319: ""サメハダー"",
    320: ""ホエルコ"",
    321: ""ホエルオー"",
    322: ""ドンメル"",
    323: ""バクーダ"",
    324: ""コータス"",
    325: ""バネブー"",
    326: ""ブーピッグ"",
    327: ""パッチール"",
    328: ""ナックラー"",
    329: ""ビブラーバ"",
    330: ""フライゴン"",
    331: ""サボネア"",
    332: ""ノクタス"",
    333: ""チルット"",
    334: ""チルタリス"",
    335: ""ザングース"",
    336: ""ハブネーク"",
    337: ""ルナトーン"",
    338: ""ソルロック"",
    339: ""ドジョッチ"",
    340: ""ナマズン"",
    341: ""ヘイガニ"",
    342: ""シザリガー"",
    343: ""ヤジロン"",
    344: ""ネンドール"",
    345: ""リリーラ"",
    346: ""ユレイドル"",
    347: ""アノプス"",
    348: ""アーマルド"",
    349: ""ヒンバス"",
    350: ""ミロカロス"",
    351: ""ポワルン"",
    352: ""カクレオン"",
    353: ""カゲボウズ"",
    354: ""ジュペッタ"",
    355: ""ヨマワル"",
    356: ""サマヨール"",
    357: ""トロピウス"",
    358: ""チリーン"",
    359: ""アブソル"",
    360: ""ソーナノ"",
    361: ""ユキワラシ"",
    362: ""オニゴーリ"",
    363: ""タマザラシ"",
    364: ""トドグラー"",
    365: ""トドゼルガ"",
    366: ""パールル"",
    367: ""ハンテール"",
    368: ""サクラビス"",
    369: ""ジーランス"",
    370: ""ラブカス"",
    371: ""タツベイ"",
    372: ""コモルー"",
    373: ""ボーマンダ"",
    374: ""ダンバル"",
    375: ""メタング"",
    376: ""メタグロス"",
    377: ""レジロック"",
    378: ""レジアイス"",
    379: ""レジスチル"",
    380: ""ラティアス"",
    381: ""ラティオス"",
    382: ""カイオーガ"",
    383: ""グラードン"",
    384: ""レックウザ"",
    385: ""ジラーチ"",
    386: ""デオキシス"",
    387: ""ナエトル"",
    388: ""ハヤシガメ"",
    389: ""ドダイトス"",
    390: ""ヒコザル"",
    391: ""モウカザル"",
    392: ""ゴウカザル"",
    393: ""ポッチャマ"",
    394: ""ポッタイシ"",
    395: ""エンペルト"",
    396: ""ムックル"",
    397: ""ムクバード"",
    398: ""ムクホーク"",
    399: ""ビッパ"",
    400: ""ビーダル"",
    401: ""コロボーシ"",
    402: ""コロトック"",
    403: ""コリンク"",
    404: ""ルクシオ"",
    405: ""レントラー"",
    406: ""スボミー"",
    407: ""ロズレイド"",
    408: ""ズガイドス"",
    409: ""ラムパルド"",
    410: ""タテトプス"",
    411: ""トリデプス"",
    412: ""ミノムッチ"",
    413: ""ミノマダム"",
    414: ""ガーメイル"",
    415: ""ミツハニー"",
    416: ""ビークイン"",
    417: ""パチリス"",
    418: ""ブイゼル"",
    419: ""フローゼル"",
    420: ""チェリンボ"",
    421: ""チェリム"",
    422: ""カラナクシ"",
    423: ""トリトドン"",
    424: ""エテボース"",
    425: ""フワンテ"",
    426: ""フワライド"",
    427: ""ミミロル"",
    428: ""ミミロップ"",
    429: ""ムウマージ"",
    430: ""ドンカラス"",
    431: ""ニャルマー"",
    432: ""ブニャット"",
    433: ""リーシャン"",
    434: ""スカンプー"",
    435: ""スカタンク"",
    436: ""ドーミラー"",
    437: ""ドータクン"",
    438: ""ウソハチ"",
    439: ""マネネ"",
    440: ""ピンプク"",
    441: ""ペラップ"",
    442: ""ミカルゲ"",
    443: ""フカマル"",
    444: ""ガバイト"",
    445: ""ガブリアス"",
    446: ""ゴンベ"",
    447: ""リオル"",
    448: ""ルカリオ"",
    449: ""ヒポポタス"",
    450: ""カバルドン"",
    451: ""スコルピ"",
    452: ""ドラピオン"",
    453: ""グレッグル"",
    454: ""ドクロッグ"",
    455: ""マスキッパ"",
    456: ""ケイコウオ"",
    457: ""ネオラント"",
    458: ""タマンタ"",
    459: ""ユキカブリ"",
    460: ""ユキノオー"",
    461: ""マニューラ"",
    462: ""ジバコイル"",
    463: ""ベロベルト"",
    464: ""ドサイドン"",
    465: ""モジャンボ"",
    466: ""エレキブル"",
    467: ""ブーバーン"",
    468: ""トゲキッス"",
    469: ""メガヤンマ"",
    470: ""リーフィア"",
    471: ""グレイシア"",
    472: ""グライオン"",
    473: ""マンムー"",
    474: ""ポリゴンＺ"",
    475: ""エルレイド"",
    476: ""ダイノーズ"",
    477: ""ヨノワール"",
    478: ""ユキメノコ"",
    479: ""ロトム"",
    480: ""ユクシー"",
    481: ""エムリット"",
    482: ""アグノム"",
    483: ""ディアルガ"",
    484: ""パルキア"",
    485: ""ヒードラン"",
    486: ""レジギガス"",
    487: ""ギラティナ"",
    488: ""クレセリア"",
    489: ""フィオネ"",
    490: ""マナフィ"",
    491: ""ダークライ"",
    492: ""シェイミ"",
    493: ""アルセウス"",
    494: ""ビクティニ"",
    495: ""ツタージャ"",
    496: ""ジャノビー"",
    497: ""ジャローダ"",
    498: ""ポカブ"",
    499: ""チャオブー"",
    500: ""エンブオー"",
    501: ""ミジュマル"",
    502: ""フタチマル"",
    503: ""ダイケンキ"",
    504: ""ミネズミ"",
    505: ""ミルホッグ"",
    506: ""ヨーテリー"",
    507: ""ハーデリア"",
    508: ""ムーランド"",
    509: ""チョロネコ"",
    510: ""レパルダス"",
    511: ""ヤナップ"",
    512: ""ヤナッキー"",
    513: ""バオップ"",
    514: ""バオッキー"",
    515: ""ヒヤップ"",
    516: ""ヒヤッキー"",
    517: ""ムンナ"",
    518: ""ムシャーナ"",
    519: ""マメパト"",
    520: ""ハトーボー"",
    521: ""ケンホロウ"",
    522: ""シママ"",
    523: ""ゼブライカ"",
    524: ""ダンゴロ"",
    525: ""ガントル"",
    526: ""ギガイアス"",
    527: ""コロモリ"",
    528: ""ココロモリ"",
    529: ""モグリュー"",
    530: ""ドリュウズ"",
    531: ""タブンネ"",
    532: ""ドッコラー"",
    533: ""ドテッコツ"",
    534: ""ローブシン"",
    535: ""オタマロ"",
    536: ""ガマガル"",
    537: ""ガマゲロゲ"",
    538: ""ナゲキ"",
    539: ""ダゲキ"",
    540: ""クルミル"",
    541: ""クルマユ"",
    542: ""ハハコモリ"",
    543: ""フシデ"",
    544: ""ホイーガ"",
    545: ""ペンドラー"",
    546: ""モンメン"",
    547: ""エルフーン"",
    548: ""チュリネ"",
    549: ""ドレディア"",
    550: ""バスラオ"",
    551: ""メグロコ"",
    552: ""ワルビル"",
    553: ""ワルビアル"",
    554: ""ダルマッカ"",
    555: ""ヒヒダルマ"",
    556: ""マラカッチ"",
    557: ""イシズマイ"",
    558: ""イワパレス"",
    559: ""ズルッグ"",
    560: ""ズルズキン"",
    561: ""シンボラー"",
    562: ""デスマス"",
    563: ""デスカーン"",
    564: ""プロトーガ"",
    565: ""アバゴーラ"",
    566: ""アーケン"",
    567: ""アーケオス"",
    568: ""ヤブクロン"",
    569: ""ダストダス"",
    570: ""ゾロア"",
    571: ""ゾロアーク"",
    572: ""チラーミィ"",
    573: ""チラチーノ"",
    574: ""ゴチム"",
    575: ""ゴチミル"",
    576: ""ゴチルゼル"",
    577: ""ユニラン"",
    578: ""ダブラン"",
    579: ""ランクルス"",
    580: ""コアルヒー"",
    581: ""スワンナ"",
    582: ""バニプッチ"",
    583: ""バニリッチ"",
    584: ""バイバニラ"",
    585: ""シキジカ"",
    586: ""メブキジカ"",
    587: ""エモンガ"",
    588: ""カブルモ"",
    589: ""シュバルゴ"",
    590: ""タマゲタケ"",
    591: ""モロバレル"",
    592: ""プルリル"",
    593: ""ブルンゲル"",
    594: ""ママンボウ"",
    595: ""バチュル"",
    596: ""デンチュラ"",
    597: ""テッシード"",
    598: ""ナットレイ"",
    599: ""ギアル"",
    600: ""ギギアル"",
    601: ""ギギギアル"",
    602: ""シビシラス"",
    603: ""シビビール"",
    604: ""シビルドン"",
    605: ""リグレー"",
    606: ""オーベム"",
    607: ""ヒトモシ"",
    608: ""ランプラー"",
    609: ""シャンデラ"",
    610: ""キバゴ"",
    611: ""オノンド"",
    612: ""オノノクス"",
    613: ""クマシュン"",
    614: ""ツンベアー"",
    615: ""フリージオ"",
    616: ""チョボマキ"",
    617: ""アギルダー"",
    618: ""マッギョ"",
    619: ""コジョフー"",
    620: ""コジョンド"",
    621: ""クリムガン"",
    622: ""ゴビット"",
    623: ""ゴルーグ"",
    624: ""コマタナ"",
    625: ""キリキザン"",
    626: ""バッフロン"",
    627: ""ワシボン"",
    628: ""ウォーグル"",
    629: ""バルチャイ"",
    630: ""バルジーナ"",
    631: ""クイタラン"",
    632: ""アイアント"",
    633: ""モノズ"",
    634: ""ジヘッド"",
    635: ""サザンドラ"",
    636: ""メラルバ"",
    637: ""ウルガモス"",
    638: ""コバルオン"",
    639: ""テラキオン"",
    640: ""ビリジオン"",
    641: ""トルネロス"",
    642: ""ボルトロス"",
    643: ""レシラム"",
    644: ""ゼクロム"",
    645: ""ランドロス"",
    646: ""キュレム"",
    647: ""ケルディオ"",
    648: ""メロエッタ"",
    649: ""ゲノセクト"",
    650: ""ハリマロン"",
    651: ""ハリボーグ"",
    652: ""ブリガロン"",
    653: ""フォッコ"",
    654: ""テールナー"",
    655: ""マフォクシー"",
    656: ""ケロマツ"",
    657: ""ゲコガシラ"",
    658: ""ゲッコウガ"",
    659: ""ホルビー"",
    660: ""ホルード"",
    661: ""ヤヤコマ"",
    662: ""ヒノヤコマ"",
    663: ""ファイアロー"",
    664: ""コフキムシ"",
    665: ""コフーライ"",
    666: ""ビビヨン"",
    667: ""シシコ"",
    668: ""カエンジシ"",
    669: ""フラベベ"",
    670: ""フラエッテ"",
    671: ""フラージェス"",
    672: ""メェークル"",
    673: ""ゴーゴート"",
    674: ""ヤンチャム"",
    675: ""ゴロンダ"",
    676: ""トリミアン"",
    677: ""ニャスパー"",
    678: ""ニャオニクス"",
    679: ""ヒトツキ"",
    680: ""ニダンギル"",
    681: ""ギルガルド"",
    682: ""シュシュプ"",
    683: ""フレフワン"",
    684: ""ペロッパフ"",
    685: ""ペロリーム"",
    686: ""マーイーカ"",
    687: ""カラマネロ"",
    688: ""カメテテ"",
    689: ""ガメノデス"",
    690: ""クズモー"",
    691: ""ドラミドロ"",
    692: ""ウデッポウ"",
    693: ""ブロスター"",
    694: ""エリキテル"",
    695: ""エレザード"",
    696: ""チゴラス"",
    697: ""ガチゴラス"",
    698: ""アマルス"",
    699: ""アマルルガ"",
    700: ""ニンフィア"",
    701: ""ルチャブル"",
    702: ""デデンネ"",
    703: ""メレシー"",
    704: ""ヌメラ"",
    705: ""ヌメイル"",
    706: ""ヌメルゴン"",
    707: ""クレッフィ"",
    708: ""ボクレー"",
    709: ""オーロット"",
    710: ""バケッチャ"",
    711: ""パンプジン"",
    712: ""カチコール"",
    713: ""クレベース"",
    714: ""オンバット"",
    715: ""オンバーン"",
    716: ""ゼルネアス"",
    717: ""イベルタル"",
    718: ""ジガルデ"",
    719: ""ディアンシー"",
    720: ""フーパ"",
    721: ""ボルケニオン"",
    722: ""モクロー"",
    723: ""フクスロー"",
    724: ""ジュナイパー"",
    725: ""ニャビー"",
    726: ""ニャヒート"",
    727: ""ガオガエン"",
    728: ""アシマリ"",
    729: ""オシャマリ"",
    730: ""アシレーヌ"",
    731: ""ツツケラ"",
    732: ""ケララッパ"",
    733: ""ドデカバシ"",
    734: ""ヤングース"",
    735: ""デカグース"",
    736: ""アゴジムシ"",
    737: ""デンヂムシ"",
    738: ""クワガノン"",
    739: ""マケンカニ"",
    740: ""ケケンカニ"",
    741: ""オドリドリ"",
    742: ""アブリー"",
    743: ""アブリボン"",
    744: ""イワンコ"",
    745: ""ルガルガン"",
    746: ""ヨワシ"",
    747: ""ヒドイデ"",
    748: ""ドヒドイデ"",
    749: ""ドロバンコ"",
    750: ""バンバドロ"",
    751: ""シズクモ"",
    752: ""オニシズクモ"",
    753: ""カリキリ"",
    754: ""ラランテス"",
    755: ""ネマシュ"",
    756: ""マシェード"",
    757: ""ヤトウモリ"",
    758: ""エンニュート"",
    759: ""ヌイコグマ"",
    760: ""キテルグマ"",
    761: ""アマカジ"",
    762: ""アママイコ"",
    763: ""アマージョ"",
    764: ""キュワワー"",
    765: ""ヤレユータン"",
    766: ""ナゲツケサル"",
    767: ""コソクムシ"",
    768: ""グソクムシャ"",
    769: ""スナバァ"",
    770: ""シロデスナ"",
    771: ""ナマコブシ"",
    772: ""タイプ：ヌル"",
    773: ""シルヴァディ"",
    774: ""メテノ"",
    775: ""ネッコアラ"",
    776: ""バクガメス"",
    777: ""トゲデマル"",
    778: ""ミミッキュ"",
    779: ""ハギギシリ"",
    780: ""ジジーロン"",
    781: ""ダダリン"",
    782: ""ジャラコ"",
    783: ""ジャランゴ"",
    784: ""ジャラランガ"",
    785: ""カプ・コケコ"",
    786: ""カプ・テテフ"",
    787: ""カプ・ブルル"",
    788: ""カプ・レヒレ"",
    789: ""コスモッグ"",
    790: ""コスモウム"",
    791: ""ソルガレオ"",
    792: ""ルナアーラ"",
    793: ""ウツロイド"",
    794: ""マッシブーン"",
    795: ""フェローチェ"",
    796: ""デンジュモク"",
    797: ""テッカグヤ"",
    798: ""カミツルギ"",
    799: ""アクジキング"",
    800: ""ネクロズマ"",
    801: ""マギアナ"",
    802: ""マーシャドー"",
    803: ""ベベノム"",
    804: ""アーゴヨン"",
    805: ""ツンデツンデ"",
    806: ""ズガドーン"",
    807: ""ゼラオラ"",
    808: ""メルタン"",
    809: ""メルメタル"",
    810: ""サルノリ"",
    811: ""バチンキー"",
    812: ""ゴリランダー"",
    813: ""ヒバニー"",
    814: ""ラビフット"",
    815: ""エースバーン"",
    816: ""メッソン"",
    817: ""ジメレオン"",
    818: ""インテレオン"",
    819: ""ホシガリス"",
    820: ""ヨクバリス"",
    821: ""ココガラ"",
    822: ""アオガラス"",
    823: ""アーマーガア"",
    824: ""サッチムシ"",
    825: ""レドームシ"",
    826: ""イオルブ"",
    827: ""クスネ"",
    828: ""フォクスライ"",
    829: ""ヒメンカ"",
    830: ""ワタシラガ"",
    831: ""ウールー"",
    832: ""バイウールー"",
    833: ""カムカメ"",
    834: ""カジリガメ"",
    835: ""ワンパチ"",
    836: ""パルスワン"",
    837: ""タンドン"",
    838: ""トロッゴン"",
    839: ""セキタンザン"",
    840: ""カジッチュ"",
    841: ""アップリュー"",
    842: ""タルップル"",
    843: ""スナヘビ"",
    844: ""サダイジャ"",
    845: ""ウッウ"",
    846: ""サシカマス"",
    847: ""カマスジョー"",
    848: ""エレズン"",
    849: ""ストリンダー"",
    850: ""ヤクデ"",
    851: ""マルヤクデ"",
    852: ""タタッコ"",
    853: ""オトスパス"",
    854: ""ヤバチャ"",
    855: ""ポットデス"",
    856: ""ミブリム"",
    857: ""テブリム"",
    858: ""ブリムオン"",
    859: ""ベロバー"",
    860: ""ギモー"",
    861: ""オーロンゲ"",
    862: ""タチフサグマ"",
    863: ""ニャイキング"",
    864: ""サニゴーン"",
    865: ""ネギガナイト"",
    866: ""バリコオル"",
    867: ""デスバーン"",
    868: ""マホミル"",
    869: ""マホイップ"",
    870: ""タイレーツ"",
    871: ""バチンウニ"",
    872: ""ユキハミ"",
    873: ""モスノウ"",
    874: ""イシヘンジン"",
    875: ""コオリッポ"",
    876: ""イエッサン"",
    877: ""モルペコ"",
    878: ""ゾウドウ"",
    879: ""ダイオウドウ"",
    880: ""パッチラゴン"",
    881: ""パッチルドン"",
    882: ""ウオノラゴン"",
    883: ""ウオチルドン"",
    884: ""ジュラルドン"",
    885: ""ドラメシヤ"",
    886: ""ドロンチ"",
    887: ""ドラパルト"",
    888: ""ザシアン"",
    889: ""ザマゼンタ"",
    890: ""ムゲンダイナ"",
    891: ""ダクマ"",
    892: ""ウーラオス"",
    893: ""ザルード"",
    894: ""レジエレキ"",
    895: ""レジドラゴ"",
    896: ""ブリザポス"",
    897: ""レイスポス"",
    898: ""バドレックス"",
    899: ""アヤシシ"",
    900: ""バサギリ"",
    901: ""ガチグマ"",
    902: ""イダイトウ"",
    903: ""オオニューラ"",
    904: ""ハリーマン"",
    905: ""ラブトロス"",
    906: ""ニャオハ"",
    907: ""ニャローテ"",
    908: ""マスカーニャ"",
    909: ""ホゲータ"",
    910: ""アチゲータ"",
    911: ""ラウドボーン"",
    912: ""クワッス"",
    913: ""ウェルカモ"",
    914: ""ウェーニバル"",
    915: ""グルトン"",
    916: ""パフュートン"",
    917: ""タマンチュラ"",
    918: ""ワナイダー"",
    919: ""マメバッタ"",
    920: ""エクスレッグ"",
    921: ""パモ"",
    922: ""パモット"",
    923: ""パーモット"",
    924: ""ワッカネズミ"",
    925: ""イッカネズミ"",
    926: ""パピモッチ"",
    927: ""バウッツェル"",
    928: ""ミニーブ"",
    929: ""オリーニョ"",
    930: ""オリーヴァ"",
    931: ""イキリンコ"",
    932: ""コジオ"",
    933: ""ジオヅム"",
    934: ""キョジオーン"",
    935: ""カルボウ"",
    936: ""グレンアルマ"",
    937: ""ソウブレイズ"",
    938: ""ズピカ"",
    939: ""ハラバリー"",
    940: ""カイデン"",
    941: ""タイカイデン"",
    942: ""オラチフ"",
    943: ""マフィティフ"",
    944: ""シルシュルー"",
    945: ""タギングル"",
    946: ""アノクサ"",
    947: ""アノホラグサ"",
    948: ""ノノクラゲ"",
    949: ""リククラゲ"",
    950: ""ガケガニ"",
    951: ""カプサイジ"",
    952: ""スコヴィラン"",
    953: ""シガロコ"",
    954: ""ベラカス"",
    955: ""ヒラヒナ"",
    956: ""クエスパトラ"",
    957: ""カヌチャン"",
    958: ""ナカヌチャン"",
    959: ""デカヌチャン"",
    960: ""ウミディグダ"",
    961: ""ウミトリオ"",
    962: ""オトシドリ"",
    963: ""ナミイルカ"",
    964: ""イルカマン"",
    965: ""ブロロン"",
    966: ""ブロロローム"",
    967: ""モトトカゲ"",
    968: ""ミミズズ"",
    969: ""キラーメ"",
    970: ""キラフロル"",
    971: ""ボチ"",
    972: ""ハカドッグ"",
    973: ""カラミンゴ"",
    974: ""アルクジラ"",
    975: ""ハルクジラ"",
    976: ""ミガルーサ"",
    977: ""ヘイラッシャ"",
    978: ""シャリタツ"",
    979: ""コノヨザル"",
    980: ""ドオー"",
    981: ""リキキリン"",
    982: ""ノココッチ"",
    983: ""ドドゲザン"",
    984: ""イダイナキバ"",
    985: ""サケブシッポ"",
    986: ""アラブルタケ"",
    987: ""ハバタクカミ"",
    988: ""チヲハウハネ"",
    989: ""スナノケガワ"",
    990: ""テツノワダチ"",
    991: ""テツノツツミ"",
    992: ""テツノカイナ"",
    993: ""テツノコウベ"",
    994: ""テツノドクガ"",
    995: ""テツノイバラ"",
    996: ""セビエ"",
    997: ""セゴール"",
    998: ""セグレイブ"",
    999: ""コレクレー"",
    1000: ""サーフゴー"",
    1001: ""チオンジェン"",
    1002: ""パオジアン"",
    1003: ""ディンルー"",
    1004: ""イーユイ"",
    1005: ""トドロクツキ"",
    1006: ""テツノブジン"",
    1007: ""コライドン"",
    1008: ""ミライドン"",
    1009: ""ウネルミナモ"",
    1010: ""テツノイサハ"",
    1011: ""カミッチュ"",
    1012: ""チャデス"",
    1013: ""ヤバソチャ"",
    1014: ""イイネイヌ"",
    1015: ""マシマシラ"",
    1016: ""キチキギス"",
    1017: ""オーガポン"",
    1018: ""ブリジュラス"",
    1019: ""カミツオロチ"",
    1020: ""ウガツホムラ"",
    1021: ""タケルライコ"",
    1022: ""テツノイワオ"",
    1023: ""テツノカシラ"",
    1024: ""テラパゴス"",
    1025: ""モモワロウ"",
}


class Xoroshiro:
    def __init__(self, s0=secrets.randbits(64), s1=secrets.randbits(64)):
        self.seed = [s0, 0x82A2B175229D6A5B]
    @staticmethod
    def rotl(x, k): return ((x << k) | (x >> (64 - k))) & 0xFFFFFFFFFFFFFFFF
    @staticmethod
    def nextP2(x):
        x -= 1
        for i in range(6): x |= x >> (1 << i)
        return x
    def next(self):
        s0, s1 = self.seed
        r = (s0 + s1) & 0xFFFFFFFFFFFFFFFF
        s1 ^= s0
        self.seed[0] = self.rotl(s0, 24) ^ s1 ^ ((s1 << 16) & 0xFFFFFFFFFFFFFFFF)
        self.seed[1] = self.rotl(s1, 37)
        return r
    def nextInt(self, num=0xFFFFFFFF):
        num2 = self.nextP2(num); s = self.next() & num2
        while s >= num: s = self.next() & num2
        return s

def getSV(tid, pid):
    sid, tid = (tid >> 16), (tid & 0xffff)
    hid, lid = (pid >> 16), (pid & 0xffff)
    return tid ^ sid ^ lid ^ hid

def get_state():
    buf = []
    for _ in range(20000):  # 回しすぎない（起動を軽く）
        s0 = secrets.randbits(64)
        rng = Xoroshiro(s0); rng.nextInt()
        tid = rng.nextInt(); pid = rng.nextInt()
        if getSV(tid, pid) < 0x10:
            buf.append(s0)
            if len(buf) >= 128:  # 必要分だけ
                break
    return buf

states = get_state()
_busy = False
file_idx = 0

def dump_memory(base_addr: int, size: int, filename: str = ""memdump.bin""):
    """"""
    現在のGDBセッションから、指定範囲のメモリを読み取ってローカルに保存する。
    :param base_addr: 読み込み開始アドレス（整数）
    :param size:      ダンプサイズ（バイト単位）
    :param filename:  保存先ファイル名
    """"""
    inferior = gdb.selected_inferior()
    print(f""[+] dumping memory: 0x{base_addr:x} - 0x{base_addr+size:x} ({size} bytes) → {filename}"")
    try:
        data = inferior.read_memory(base_addr, size).tobytes()
    except gdb.MemoryError as e:
        raise gdb.GdbError(f""memory read failed at 0x{base_addr:x}: {e}"")

    with open(filename, ""wb"") as f:
        f.write(data)
    print(f""[✓] dump completed: {len(data)} bytes written to {filename}"")

def get_species(reg_base: str = ""x19"", imm: int = 0x2a) -> int:
    global file_idx
    base = int(gdb.parse_and_eval(f""${reg_base}""))
    #print(""x19"", hex(base))

    #dump_memory(base, 0x1000, ""%10x_%d.bin""%(base, file_idx))
    #file_idx += 1
    addr = (base + int(imm)) & ((1 << 64) - 1)

    inferior = gdb.selected_inferior()
    try:
        b = inferior.read_memory(addr, 2).tobytes()
    except gdb.MemoryError as e:
        raise gdb.GdbError(f""memory read failed at {addr:#x}: {e}"")
    value = int.from_bytes(b, byteorder=""little"")
    print(value, POKEDEX[value])
    return value, POKEDEX[value]

def _continue_later():
    global _busy
    try:
        gdb.execute(""continue"", from_tty=False, to_string=True)
    finally:
        _busy = False

def on_stop(event):
    global _busy
    target_pokemon = [
        376, #メタグロス
    ]
    if not isinstance(event, gdb.BreakpointEvent):
        return

    try:
        bps = getattr(event, ""breakpoints"", []) or []
        if bps:
            print(f""[break] hit bp#{bps[0].number} at {bps[0].location}"")
        else:
            print(""[break] hit (no bp info)"")
    except Exception as e:
        gdb.write(f""[auto] print error: {e}\n"")

    try:
        if not states:
            states[:] = get_state()
        idx, pokemon = get_species()
        if idx in target_pokemon:
            s0 = states.pop(0)
            gdb.execute(f""set $x8 = 0x{s0:x}"", to_string=True)
    except Exception as e:
        gdb.write(f""[auto] handler error: {e}\n"")

    if not _busy:
        _busy = True
        gdb.post_event(_continue_later)

try:
    gdb.events.stop.disconnect(on_stop)
except Exception:
    pass
gdb.events.stop.connect(on_stop)
print(""[auto-continue] installed: printing every breakpoint hit."")

""""""
usage

aarch64-none-elf-gdb-py
target extended-remote 192.168.x.x:22225
monitor wait application
attach 0xNN
monitor get info
set $main_app_base = (unsigned long)$main_app_addr
b *$main_app_base + 0x69b748
source auto_shiny.py # inject
continue
"""""""
45mYf8T2,BTRFS Balance,novamaxx,Bash,Wednesday 22nd of October 2025 04:51:24 AM CDT,"#!/bin/bash
# /volume1/scripts/btrfs_balance/btrfs_balance.sh
# használat: ./btrfs_balance.sh volume1

VOLUME=""$1""

if [ -z ""$VOLUME"" ]; then
    echo ""Használat: $0 <volumeN>""
    exit 1
fi

MOUNTPOINT=""/${VOLUME}""

if [ ! -d ""$MOUNTPOINT"" ]; then
    echo ""Hiba: a megadott kötet nem létezik: ${MOUNTPOINT}""
    exit 2
fi

# Log könyvtár a szkript mappájában
SCRIPTPATH=""/volume1/scripts/btrfs_balance""
LOGDIR=""${SCRIPTPATH}/logs""
mkdir -p ""$LOGDIR""
LOGFILE=""${LOGDIR}/btrfs_balance_${VOLUME}.log""

echo ""==== $(date '+%Y-%m-%d %H:%M:%S') | ${VOLUME} balance indítva ===="" >> ""$LOGFILE""

sudo btrfs balance start -dusage=50 -musage=50 ""$MOUNTPOINT"" >> ""$LOGFILE"" 2>&1

if [ $? -eq 0 ]; then
    echo "">>>> Kész: ${VOLUME} balance sikeresen lefutott."" >> ""$LOGFILE""
else
    echo "">>>> Hiba: ${VOLUME} balance futás közben hibát dobott."" >> ""$LOGFILE""
fi

echo >> ""$LOGFILE"""
5sFRgP6a,Untitled,Mangle_DevCH,Lua,Wednesday 22nd of October 2025 04:42:38 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Drrushh/Drrushh/main/Kdom"",true))();"
DfAQvmpv,serverstats,MrElders,Lua,Wednesday 22nd of October 2025 01:28:18 AM CDT,"-- server_stats.lua  (CC:Tweaked / ATM10)
-- Estimates TPS/MSPT by comparing in-game time to real time.
-- Works on ANY monitor size; auto-scales text and keeps layout tight.

-- ===== Helpers =====
local function pickTextScale(w, h)
  -- Try to fit 5 lines comfortably: title + tps + mspt + age + footer
  -- Larger monitors get smaller scale (more pixels, more columns)
  if w >= 60 and h >= 20 then return 0.5 end
  if w >= 28 and h >= 10 then return 0.75 end
  return 1 -- tiny monitor
end

local function findMonitor()
  local mon = peripheral.find(""monitor"")
  if not mon then error(""No monitor attached. Place any monitor touching the computer."", 0) end
  return mon
end

local function setColors(mon)
  -- If not advanced, colors.* still exist but only white/black will show.
  if term.isColor() then
    mon.setTextColor(colors.white)
    mon.setBackgroundColor(colors.black)
  else
    mon.setTextColor(colors.white)
    mon.setBackgroundColor(colors.black)
  end
end

local function center(mon, y, s)
  local w, _ = mon.getSize()
  local x = math.max(1, math.floor((w - #s)/2) + 1)
  mon.setCursorPos(x, y)
  mon.write(s)
end

local function right(mon, y, s)
  local w, _ = mon.getSize()
  local x = math.max(1, w - #s + 1)
  mon.setCursorPos(x, y)
  mon.write(s)
end

local function avg(a)
  local s=0
  for i=1,#a do s = s + a[i] end
  return (#a > 0) and (s/#a) or 0
end

-- Estimate from clocks
-- os.epoch(""ingame"") advances ~50 ms per game tick at 20 TPS when healthy.
local function estimate(sample_ms)
  local r0 = os.epoch(""utc"")
  local g0 = os.epoch(""ingame"")
  sleep(sample_ms/1000)
  local r1 = os.epoch(""utc"")
  local g1 = os.epoch(""ingame"")
  local dR = math.max(1, r1 - r0)
  local dG = math.max(1, g1 - g0)
  -- If server is healthy: dG ≈ dR; TPS ≈ 20*(dG/dR), MSPT ≈ 50*(dR/dG)
  local tps  = 20 * (dG / dR)
  if tps < 0 then tps = 0 end
  if tps > 20 then tps = 20 end
  local mspt = 50 * (dR / dG)
  return tps, mspt
end

local function worldAgeText()
  local ms = os.epoch(""ingame"")
  local ticks = math.floor(ms / 50)
  local days  = math.floor(ticks / 24000)
  local hrs   = math.floor((ticks % 24000) / 1000) -- ~1000 ticks ≈ 1 in-game hour
  return (""%dd %dh""):format(days, hrs)
end

-- ===== Setup =====
local mon = findMonitor()
setColors(mon)
mon.clear()

-- Choose a text scale that actually fits the content
local w, h = mon.getSize()
local scale = pickTextScale(w, h)
mon.setTextScale(scale)
w, h = mon.getSize() -- refresh after scale change

-- Precompute line positions (keep it tight for small displays)
-- Layout (5 rows total):
-- 1: TITLE
-- 2: TPS line
-- 3: MSPT line
-- 4: WORLD AGE line
-- h: FOOTER
local rowTitle   = 1
local rowTPS     = math.min(2, h-3)
local rowMSPT    = math.min(3, h-2)
local rowAge     = math.min(4, h-1)
local rowFooter  = h

local samples = {}     -- rolling TPS average
local keepSamples = 6  -- ~6 seconds smoothing with 1s sample

-- ===== Main loop =====
while true do
  -- Take a 1s sample
  local tps, mspt = estimate(1000)
  table.insert(samples, tps)
  if #samples > keepSamples then table.remove(samples, 1) end
  local tpsAvg = avg(samples)

  -- Draw
  setColors(mon)
  mon.clear()

  center(mon, rowTitle, ""SERVER STATS"")
  -- TPS line
  local tpsStr  = (""TPS: %.2f""):format(tpsAvg)
  local tpsHint = (tpsAvg >= 19.5 and ""OK"") or (tpsAvg >= 15 and ""WARN"") or ""LAG""
  local tpsLine = tpsStr .. ""  ["" .. tpsHint .. ""]""
  center(mon, rowTPS, tpsLine)

  -- MSPT line
  local msptLine = (""MSPT: %.2f ms""):format(mspt)
  center(mon, rowMSPT, msptLine)

  -- World Age
  local ageLine = ""World age: "" .. worldAgeText()
  center(mon, rowAge, ageLine)

  -- Footer heartbeat + monitor size (debug on right so you can tell it's updating)
  mon.setCursorPos(1, rowFooter)
  mon.write(""Ctrl+T to stop"")
  right(mon, rowFooter, (""%dx%d x%.2f""):format(w, h, scale))
end
"
eALTY74F,EnergyMonitor,MrElders,Lua,Wednesday 22nd of October 2025 12:53:12 AM CDT,"-- power_watch.lua (5x3 monitor GUI, CST clock)
-- CC:Tweaked + Advanced Peripherals (ATM10)
-- Finds any inline energy detector exposing getTransferRate().
-- Usage:
--   power_watch
--   power_watch <inPeripheral> <outPeripheral> [intervalSeconds]
--   power_watch left right 0.5

local args = { ... }
local sample_interval = tonumber(args[3]) or 1.0

-- ====== Duck-typed detector discovery ======
local function wrapIfDetector(name)
  local ok, p = pcall(peripheral.wrap, name)
  if not ok or not p then return nil end
  if type(p.getTransferRate) == ""function"" then return p end
  return nil
end

local function resolveDetector(hint)
  if hint and peripheral.isPresent(hint) then
    return wrapIfDetector(hint)
  end
end

local inDet  = resolveDetector(args[1])
local outDet = resolveDetector(args[2])

if (not inDet) or (args[2] and not outDet) then
  for _, n in ipairs(peripheral.getNames()) do
    local p = wrapIfDetector(n)
    if p then
      if not inDet then inDet = p
      elseif not outDet then outDet = p end
    end
  end
end

if not inDet and not outDet then
  print(""Error: No energy-transfer peripheral found on the CC network."")
  return
end

-- ====== Monitor setup (designed for 5x3 big monitor, but responsive) ======
local mon = peripheral.find(""monitor"")
local function monSafe(f, ...) if mon then pcall(f, ...) end end

-- Target a crisp UI on 5x3: try scale 0.5 for max columns; fall back if tiny.
local function tuneScale()
  if not mon then return end
  for _, s in ipairs({0.5, 0.75, 1.0, 1.5}) do
    mon.setTextScale(s)
    local w, h = mon.getSize()
    if w >= 46 and h >= 15 then return end
  end
end
tuneScale()

-- ====== Helpers ======
local function fmtFE(v)
  local a = math.abs(v)
  if a >= 1e12 then return string.format(""%.2fT"", v/1e12) end
  if a >= 1e9  then return string.format(""%.2fG"", v/1e9)  end
  if a >= 1e6  then return string.format(""%.2fM"", v/1e6)  end
  if a >= 1e3  then return string.format(""%.2fk"", v/1e3)  end
  return string.format(""%.0f"", v)
end

local function safeGetRate(det)
  if not det then return 0 end
  local ok, v = pcall(det.getTransferRate)
  if not ok or type(v) ~= ""number"" then return 0 end
  return v
end

-- Moving average (N samples)
local function newAverager(n)
  local buf, sum, idx, cnt = {}, 0, 1, 0
  return {
    push = function(v)
      if cnt < n then cnt = cnt + 1 else sum = sum - (buf[idx] or 0) end
      buf[idx] = v; sum = sum + v; idx = (idx % n) + 1
    end,
    avg = function() return (cnt > 0) and (sum / cnt) or 0 end
  }
end

-- Peak tracker with gentle decay so bars remain readable
local function newPeak(decay)
  local p = 1
  return {
    push = function(v)
      if v > p then p = v else p = math.max(1, p * decay) end
    end,
    value = function() return p end
  }
end

-- CST clock (fixed UTC-6 as requested)
local function nowCST()
  local ms = os.epoch(""utc"")
  local cst = ms - 6*3600*1000
  return os.date(""!%Y-%m-%d %H:%M:%S"", math.floor(cst/1000))
end

-- ====== Fancy Monitor GUI ======
local function drawBox(x1,y1,x2,y2,bg,fg,title)
  monSafe(mon.setBackgroundColor, bg or colors.black)
  monSafe(mon.setTextColor, fg or colors.white)
  for y=y1,y2 do
    monSafe(mon.setCursorPos, x1, y); monSafe(mon.write, string.rep("" "", x2-x1+1))
  end
  if title then
    local tw = #title
    local w = x2-x1+1
    local tx = math.floor(x1 + (w - tw)/2)
    monSafe(mon.setCursorPos, tx, y1); monSafe(mon.write, title)
  end
end

local function writeAt(x,y,text,fg,bg)
  if bg then monSafe(mon.setBackgroundColor, bg) end
  if fg then monSafe(mon.setTextColor, fg) end
  monSafe(mon.setCursorPos, x, y); monSafe(mon.write, text)
end

local function bar(x,y,w,val,maxVal,fg,bg)
  maxVal = math.max(1, maxVal)
  local fill = math.floor((val / maxVal) * w + 0.5)
  writeAt(x,y,string.rep("" "", w), nil, bg or colors.gray)
  if fill > 0 then
    writeAt(x,y,string.rep("" "", math.min(fill,w)), nil, fg or colors.lime)
  end
end

local function center(y,text,fg,bg)
  local W,H = mon.getSize()
  local x = math.max(1, math.floor((W - #text)/2)+1)
  writeAt(x,y,text,fg,bg)
end

-- ====== State ======
local avgIn, avgOut = newAverager(10), newAverager(10)
local peakIn, peakOut = newPeak(0.985), newPeak(0.985) -- slow decay
local cumIn, cumOut = 0, 0
local last = os.epoch(""utc"") / 1000.0

-- ====== Text-mode mirror to the computer ======
local function mirrorToTerm(inFEt,outFEt)
  term.clear(); term.setCursorPos(1,1)
  print(""CC:T Power Watch"")
  print((""CST: %s""):format(nowCST()))
  if inDet then print((""IN : %sFE/t (avg %s)  total %sFE""):format(fmtFE(inFEt), fmtFE(avgIn.avg()), fmtFE(cumIn))) end
  if outDet then print((""OUT: %sFE/t (avg %s)  total %sFE""):format(fmtFE(outFEt), fmtFE(avgOut.avg()), fmtFE(cumOut))) end
end

-- ====== Main loop ======
while true do
  local now = os.epoch(""utc"") / 1000.0
  local dt = math.max(0.001, now - last); last = now

  local inFEt  = safeGetRate(inDet)
  local outFEt = safeGetRate(outDet)

  avgIn.push(inFEt); avgOut.push(outFEt)
  peakIn.push(inFEt); peakOut.push(outFEt)

  cumIn  = cumIn  + inFEt  * dt
  cumOut = cumOut + outFEt * dt

  -- ====== Monitor render ======
  if mon then
    local W,H = mon.getSize()
    monSafe(mon.setBackgroundColor, colors.black); monSafe(mon.clear)

    -- Header band
    drawBox(1,1,W,3,colors.gray,colors.white)
    center(1, ""POWER WATCH"", colors.white, colors.gray)
    center(2, ""Mekanism Flow Monitor"", colors.lightGray, colors.gray)
    center(3, ""CST ""..nowCST(), colors.white, colors.gray)

    -- Panels (IN left, OUT right)
    local mid = math.floor(W/2)
    local pad = 2
    local leftX1, leftX2   = 2, mid-1
    local rightX1, rightX2 = mid+1, W-1
    local topY, botY = 5, H-2

    drawBox(leftX1, topY, leftX2, botY, colors.black, colors.white, ""IN"")
    drawBox(rightX1, topY, rightX2, botY, colors.black, colors.white, ""OUT"")

    -- IN stats
    local y = topY+1
    if inDet then
      writeAt(leftX1+pad, y, (""Now : %sFE/t""):format(fmtFE(inFEt)), colors.lime); y=y+1
      writeAt(leftX1+pad, y, (""Avg : %sFE/t""):format(fmtFE(avgIn.avg())), colors.white); y=y+1
      writeAt(leftX1+pad, y, (""Total: %sFE""):format(fmtFE(cumIn)), colors.white); y=y+1
      y=y+1
      writeAt(leftX1+pad, y, ""Flow"", colors.white); y=y+1
      bar(leftX1+pad, y, (leftX2 - leftX1 - pad*2), inFEt, peakIn.value(),
          colors.lime, colors.gray); y=y+1
      writeAt(leftX1+pad, y, (""Scale: %sFE/t""):format(fmtFE(peakIn.value())), colors.lightGray)
    else
      writeAt(leftX1+pad, y, ""Not configured"", colors.red)
    end

    -- OUT stats
    y = topY+1
    if outDet then
      writeAt(rightX1+pad, y, (""Now : %sFE/t""):format(fmtFE(outFEt)), colors.lime); y=y+1
      writeAt(rightX1+pad, y, (""Avg : %sFE/t""):format(fmtFE(avgOut.avg())), colors.white); y=y+1
      writeAt(rightX1+pad, y, (""Total: %sFE""):format(fmtFE(cumOut)), colors.white); y=y+1
      y=y+1
      writeAt(rightX1+pad, y, ""Flow"", colors.white); y=y+1
      bar(rightX1+pad, y, (rightX2 - rightX1 - pad*2), outFEt, peakOut.value(),
          colors.orange, colors.gray); y=y+1
      writeAt(rightX1+pad, y, (""Scale: %sFE/t""):format(fmtFE(peakOut.value())), colors.lightGray)
    else
      writeAt(rightX1+pad, y, ""Not configured"", colors.red)
    end

    -- Footer hint
    center(H, (""Interval: %.2fs""):format(sample_interval), colors.lightGray)
  end

  -- Mirror to local terminal for debugging
  mirrorToTerm(inFEt, outFEt)

  sleep(sample_interval)
end
"
5V8bJeqd,Untitled,Loveuid2008,HTML,Wednesday 22nd of October 2025 12:41:28 AM CDT,"<!DOCTYPE html>
<html lang=""ar"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>التاريخ والساعة الحالية</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
    </style>
</head>
<body>
    <h1>التاريخ والساعة الحالية</h1>
    <p id=""date""></p>
    <p id=""time""></p>

    <script>
        function updateDateTime() {
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            const today = new Date().toLocaleDateString('en-US', options);
            document.getElementById('date').innerText = today;

            const time = new Date().toLocaleTimeString('en-US');
            document.getElementById('time').innerText = time;
        }

        updateDateTime();
        setInterval(updateDateTime, 1000); // تحديث الساعة كل ثانية
    </script>
</body>
</html>
<html lang=""ar"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>أدوات النص</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
        }
        #toolbar {
            margin-bottom: 20px;
        }
        button {
            margin-right: 5px;
        }
        #text-area {
            width: 100%;
            height: 300px;
            padding: 10px;
            font-size: 16px;
        }
    </style>
</head>
<body>

<div id=""toolbar"">
    <button onclick=""saveNotes()"">💾 حفظ</button>
    <button onclick=""exportPage()"">تصدير الصفحة</button>
    <button onclick=""exportWorkbook()"">تصدير كل الصفحات</button>
    <button onclick=""printPage()"">طباعة</button>
    <button onclick=""insertLink()"">🔗 إدراج رابط</button>
    <button onclick=""highlightText()"">🟨 تمييز النص</button>
    <button onclick=""indentQuote()"">💬 اقتباس</button>
    <button onclick=""clearFormatting()"">❌ مسح التنسيق</button>
    <button onclick=""toggleDarkLightMode()"">🌗 الوضع المظلم/الفاتح</button>
</div>

<textarea id=""text-area""></textarea>

<script>
    function saveNotes() {
        const notes = document.getElementById('text-area').value;
        localStorage.setItem('savedNotes', notes);
        alert('تم حفظ الملاحظات!');
    }

    function exportPage() {
        const content = document.getElementById('text-area').value;
        const blob = new Blob([content], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'export.html';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }

    function exportWorkbook() {
        // تنفيذ خاصية تصدير جميع الصفحات هنا
        alert('تصدير جميع الصفحات غير مفعل بعد.');
    }

    function printPage() {
        window.print();
    }

    function insertLink() {
        const url = prompt('أدخل رابط الويب:');
        const text = prompt('أدخل النص للعرض:');
        const textArea = document.getElementById('text-area');
        textArea.value += ` [${text}](${url}) `;
    }

    function highlightText() {
        // إضافة منطق لتظليل النص المحدد
        alert('تمييز النص غير مفعل بعد.');
    }

    function indentQuote() {
        const textArea = document.getElementById('text-area');
        textArea.value += '\n> ';
    }

    function clearFormatting() {
        const textArea = document.getElementById('text-area');
        textArea.value = textArea.value.replace(/\*\*(.*?)\*\*/g, '$1')
                                       .replace(/_(.*?)_/g, '$1');
    }

    function toggleDarkLightMode() {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
            document.body.style.backgroundColor = '#333';
            document.body.style.color = '#fff';
        } else {
            document.body.style.backgroundColor = '#f4f4f4';
            document.body.style.color = '#000';
        }
    }
</script>

</body>
</html>"
0FFYrefY,teensy_tmc2209_test2.ino,ripred,C++,Tuesday 21st of October 2025 10:00:29 PM CDT,"/**
 * teensy_tmc2209_test2.ino
 *
 * Teensy 4.1 + ST7735_t3 + TMC2209 + Adafruit seesaw (quad encoder)
 * - Double-buffered framebuffer (DMA) for flicker-free updates
 * - Per-microstep on-screen position updates during continuous sweep
 */

#include <TMC2209.h>
#include <string.h>
#include <stdlib.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <ST7735_t3.h>
#include ""Adafruit_seesaw.h""
#include <seesaw_neopixel.h>
#include <climits>

#define   TFT_CS          10
#define   TFT_DC           9
#define   TFT_RST          8
#define   TFT_BACKLIGHT    6

// Display resolution (after rotation 3 treat width=160, height=128)
static constexpr int16_t TFT_W = 160;
static constexpr int16_t TFT_H = 128;
static constexpr size_t FB_PIXELS = (size_t)TFT_W * (size_t)TFT_H;
static constexpr size_t FB_BYTES  = FB_PIXELS * sizeof(uint16_t);

ST7735_t3 tft = ST7735_t3(TFT_CS, TFT_DC, TFT_RST);

#define   SEESAW_ADDR   0x49
#define   SS_NEO_PIN      18

uint8_t switch_pins[4] = {12, 14, 17, 9};

Adafruit_seesaw ss = Adafruit_seesaw(&Wire);
seesaw_NeoPixel pixels = seesaw_NeoPixel(4, SS_NEO_PIN, NEO_GRB + NEO_KHZ800);

int32_t enc_positions[4] = {0, 0, 0, 0};

// Maximum number of motors supported (limited by Serial1-8)
static constexpr int MAX_MOTORS = 7;

// Teensy 4.1 Serial1-8 TX/RX pin mappings (standard defaults)
const int8_t tx_pins[9] = {-1, 1, 8, 15, 17, 21, 25, 29, 35};  // Index 1-8
const int8_t rx_pins[9] = {-1, 0, 7, 14, 16, 20, 24, 28, 34};

// Default pins for STEP, DIR, and UART per motor (0-6 for motors 1-7)
const int8_t default_step_pins[7] = {31, 36, 12, 18, 22, 26, 30};
const int8_t default_dir_pins[7]   = {32, 37, 13, 19, 23, 27, 31};
const int8_t default_uart_numbers[7] = {7, 8, 3, 4, 5, 6, 1};

// Global input buffer
const int INPUT_BUFFER_SIZE = 256;
char user_input[INPUT_BUFFER_SIZE];

/*───────────────────────────────────────────────────────────────────────────
  DMA framebuffer glue (double-buffered, non-blocking pushes)
───────────────────────────────────────────────────────────────────────────*/

// 2 full-size RGB565 framebuffers in non-cacheable RAM for DMA
DMAMEM static uint16_t fb_a[FB_PIXELS];
DMAMEM static uint16_t fb_b[FB_PIXELS];

static bool tft_fb_ok = false;
static uint16_t *draw_fb = nullptr;   // buffer we currently render into

inline void tft_fb_prepare_draw() {
    if (tft_fb_ok) {
        tft.setFrameBuffer(draw_fb);
    }
}

inline void tft_fb_wait_idle() {
    if (tft_fb_ok) {
        tft.waitUpdateAsyncComplete();
    }
}

// Start a DMA push if bus is idle; swap draw buffer and seed it with the last frame
inline void tft_fb_push_if_idle() {
    if (!tft_fb_ok) {
        return;
    }
    if (!tft.asyncUpdateActive()) {
        // Send the frame we just finished drawing
        uint16_t *sending = draw_fb;

        // Switch draw_fb to the other buffer first
        draw_fb = (draw_fb == fb_a) ? fb_b : fb_a;

        // Start non-blocking DMA transfer from 'sending'
        tft.setFrameBuffer(sending);
        tft.updateScreenAsync(false);

        // Point drawing back at draw_fb and COPY the previous frame into it
        // so all static UI/artwork persists across buffer flips.
        tft.setFrameBuffer(draw_fb);
        memcpy(draw_fb, sending, FB_BYTES);
    }
}

// For legacy call sites that expect a push, allow optional blocking push.
inline void tft_fb_push(bool block = false) {
    tft_fb_push_if_idle();
    if (block && tft_fb_ok) {
        tft.waitUpdateAsyncComplete();
    }
}

/*───────────────────────────────────────────────────────────────────────────
  GFX helpers: controlled line spacing + minimal DRY wrappers
───────────────────────────────────────────────────────────────────────────*/
constexpr int16_t EXTRA_LINE_SPACING_PX = 2;   // adjust spacing here

static uint8_t gfx_text_size_x = 1;
static uint8_t gfx_text_size_y = 1;
static int16_t gfx_home_x = 0;
static int16_t gfx_home_y = 0;

inline int16_t gfx_text_height() {
    return 8 * gfx_text_size_y;  // built-in 5x7 font uses 8px line step
}

inline int16_t gfx_line_height() {
    return gfx_text_height() + EXTRA_LINE_SPACING_PX;
}

inline void gfx_set_text_size(uint8_t s) {
    if (s < 1) s = 1;
    gfx_text_size_x = s;
    gfx_text_size_y = s;
    tft.setTextSize(s);
}

inline void gfx_set_cursor(int16_t x, int16_t y) {
    gfx_home_x = x;
    gfx_home_y = y;
    tft.setCursor(x, y);
}

inline void gfx_newline() {
    tft.setCursor(gfx_home_x, tft.getCursorY() + gfx_line_height());
}

inline void gfx_print(const String &s) { tft.print(s); }
inline void gfx_print(const char *s)   { tft.print(s); }
inline void gfx_print(long v)          { tft.print(v); }

inline void gfx_println(const String &s) { tft.print(s); gfx_newline(); }
inline void gfx_println(const char *s)   { tft.print(s); gfx_newline(); }
inline void gfx_println(long v)          { tft.print(v); gfx_newline(); }

/*───────────────────────────────────────────────────────────────────────────
  UI: shared menu text
───────────────────────────────────────────────────────────────────────────*/
const char *MENU_TITLE = ""Menu:"";
const char *MENU_ITEMS[] = {
    ""1. Config Stepping"",
    ""2. Continuous Sweep"",
    ""3. Config Modes"",
    ""4. Set Velocity"",
    ""5. Test Encoders""
};
constexpr int MENU_ITEM_COUNT = 5;

/*───────────────────────────────────────────────────────────────────────────
  Stepper structure
───────────────────────────────────────────────────────────────────────────*/
struct StepperMotor {
    TMC2209 tmc;
    uint8_t step_pin;
    uint8_t dir_pin;
    uint8_t uart_number;              // 1 to 8 for Serial1-8
    long full_steps_per_rev = 200;    // Default full steps per revolution
    uint16_t microsteps = 1;          // Default to full stepping
    long speed_steps_per_sec = 200;   // Default steps per second
    long last_start_pos = 0;          // Default start position
    long last_stop_pos = 200;         // Default to one revolution (full_steps * microsteps)
    long current_position = 0;        // Track position in microsteps
    long current_velocity = 0;        // For velocity mode
    bool velocity_mode = false;       // false: position (STEP/DIR), true: velocity (VActual)
    bool constant_current = true;     // true: fixed current, false: automatic (CoolStep)
    bool initialized = false;
};

StepperMotor motors[MAX_MOTORS];
int motor_count = 2;

/*───────────────────────────────────────────────────────────────────────────
  Prototypes
───────────────────────────────────────────────────────────────────────────*/
void update_display(bool full_update = false);
long get_numeric_input(String prompt, long default_val, long min_val = LONG_MIN, long max_val = LONG_MAX);
long ask_value(const String &prompt, long def, long min_val = LONG_MIN, long max_val = LONG_MAX);
HardwareSerial* get_serial(uint8_t uart_number);
void initialize_motors();
void move_to_position(int motor_index, long target_position, long microsteps_per_sec);
void configure_stepping();
void configure_modes();
void set_velocity();
void continuous_sweep();
void test_encoders();
void print_menu();
uint32_t wheel(byte wheel_pos);
inline void update_display_microstep(int motor_index);

/*───────────────────────────────────────────────────────────────────────────
  DRY helper: ask numeric value (Serial echo included)
───────────────────────────────────────────────────────────────────────────*/
long ask_value(const String &prompt, long def, long min_val, long max_val) {
    long v = get_numeric_input(prompt, def, min_val, max_val);
    Serial.println(String(v));
    return v;
}

/*───────────────────────────────────────────────────────────────────────────
  Serial port selector
───────────────────────────────────────────────────────────────────────────*/
HardwareSerial* get_serial(uint8_t uart_number) {
    switch (uart_number) {
        case 1: return &Serial1;
        case 2: return &Serial2;
        case 3: return &Serial3;
        case 4: return &Serial4;
        case 5: return &Serial5;
        case 6: return &Serial6;
        case 7: return &Serial7;
        case 8: return &Serial8;
        default: return nullptr;
    }
}

/*───────────────────────────────────────────────────────────────────────────
  Motor init
───────────────────────────────────────────────────────────────────────────*/
void initialize_motors() {
    for (int i = 0; i < motor_count; i++) {
        HardwareSerial* ser = get_serial(motors[i].uart_number);
        if (ser == nullptr) {
            Serial.println(""Invalid UART number for motor "" + String(i + 1) + "". Skipping."");
            continue;
        }
        motors[i].tmc.setup(*ser, 115200, TMC2209::SERIAL_ADDRESS_0);
        pinMode(motors[i].step_pin, OUTPUT);
        pinMode(motors[i].dir_pin, OUTPUT);
        digitalWrite(motors[i].step_pin, LOW);
        digitalWrite(motors[i].dir_pin, LOW);

        // Driver configuration
        motors[i].tmc.setMicrostepsPerStep(motors[i].microsteps);
        motors[i].tmc.setRunCurrent(83);
        motors[i].tmc.setHoldCurrent(25);
        motors[i].tmc.setHoldDelay(50);
        motors[i].tmc.enableStealthChop();
        if (motors[i].constant_current) {
            motors[i].tmc.disableAutomaticCurrentScaling();
        } else {
            motors[i].tmc.enableCoolStep();
        }
        if (motors[i].velocity_mode) {
            motors[i].tmc.moveAtVelocity(motors[i].current_velocity);
        } else {
            motors[i].tmc.moveUsingStepDirInterface();
        }
        motors[i].tmc.disable();  // Start disabled

        motors[i].initialized = true;
        Serial.println(""Motor "" + String(i + 1) + "" initialized."");

        // Output the 4 pins for this motor
        Serial.println(""Motor "" + String(i + 1) + "" pins:"");
        Serial.print(""STEP: ""); Serial.println(motors[i].step_pin);
        Serial.print(""DIR: "");  Serial.println(motors[i].dir_pin);
        Serial.print(""TX: "");   Serial.println(tx_pins[motors[i].uart_number]);
        Serial.print(""RX: "");   Serial.println(rx_pins[motors[i].uart_number]);
    }
}

/*───────────────────────────────────────────────────────────────────────────
  Movement (per-microstep HUD updates, non-blocking DMA pushes)
───────────────────────────────────────────────────────────────────────────*/
void move_to_position(int motor_index, long target_position, long microsteps_per_sec) {
    if (!motors[motor_index].initialized) {
        Serial.println(""Motor not initialized."");
        return;
    }

    motors[motor_index].tmc.enable();

    long current_pos = motors[motor_index].current_position;
    long distance = labs(target_position - current_pos);
    if (distance == 0) {
        return;
    }

    bool dir_high = (target_position > current_pos);
    const long step_delta = dir_high ? 1 : -1;

    digitalWrite(motors[motor_index].dir_pin, dir_high ? HIGH : LOW);

    unsigned long delay_us = 1000000UL / (microsteps_per_sec ? microsteps_per_sec : 1);
    if (delay_us < 2) delay_us = 2;
    unsigned long half_delay = delay_us / 2;
    if (half_delay < 1) half_delay = 1;

    for (long i = 0; i < distance; i++) {
        if (Serial.available()) {
            Serial.read();
            Serial.println(""Movement interrupted."");
            break;
        }

        // One microstep pulse
        digitalWrite(motors[motor_index].step_pin, HIGH);
        delayMicroseconds(half_delay);
        digitalWrite(motors[motor_index].step_pin, LOW);
        delayMicroseconds(delay_us - half_delay);

        // Update model and HUD
        current_pos += step_delta;
        motors[motor_index].current_position = current_pos;
        update_display_microstep(motor_index);   // draw into off-screen buffer + async push (if idle)
    }

    motors[motor_index].tmc.disable();

    // Final touch-up (in case of early break)
    update_display_microstep(motor_index);
}

/*───────────────────────────────────────────────────────────────────────────
  Numeric input via Serial or encoder 0 (with TFT prompt)
───────────────────────────────────────────────────────────────────────────*/
long get_numeric_input(String prompt, long default_val, long min_val, long max_val) {
    Serial.print(prompt);

    // Header
    tft_fb_wait_idle();
    tft_fb_prepare_draw();
    tft.fillScreen(ST7735_BLACK);
    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
    gfx_set_text_size(1);
    gfx_set_cursor(0, 0);
    gfx_println(prompt);

    long current = default_val;

    // Value line
    const int16_t value_y = gfx_line_height();
    tft.setCursor(0, value_y);
    tft.print(""Value: "");
    tft.print(current);
    tft_fb_push(false);

    String serial_buf = """";
    int32_t last_enc0 = ss.getEncoderPosition(0);
    bool confirmed = false;

    while (!confirmed) {
        if (Serial.available()) {
            int c = Serial.read();
            if (c == '\r' || c == '\n') {
                if (serial_buf.length() > 0) {
                    current = atol(serial_buf.c_str());
                }
                confirmed = true;
            } else {
                serial_buf += (char)c;
            }
        }

        int32_t new_enc0 = ss.getEncoderPosition(0);
        long delta = new_enc0 - last_enc0;
        if (delta != 0) {
            // ++tmw - add acceleration
            if (delta > 7) {
                delta = 100;
            }
            else if (delta > 2) {
                delta = 10;
            }
            new_enc0 = last_enc0 + delta;
            current += delta;
            if (min_val != LONG_MIN) current = max(current, min_val);
            if (max_val != LONG_MAX) current = min(current, max_val);
            last_enc0 = new_enc0;

            // Update value line (opaque text, single line)
            tft_fb_prepare_draw();
            tft.fillRect(0, value_y, tft.width(), gfx_text_height(), ST7735_BLACK);
            tft.setCursor(0, value_y);
            tft.print(""Value: "");
            tft.print(current);
            tft_fb_push(false);
        }

        if (!ss.digitalRead(switch_pins[0])) {
            delay(50);
            if (!ss.digitalRead(switch_pins[0])) {
                confirmed = true;
                while (!ss.digitalRead(switch_pins[0])) { 
                    /* wait for button release */ 
                }
                delay(10);
            }
        }
        delay(5);
    }

    return current;
}

/*───────────────────────────────────────────────────────────────────────────
  Configuration UIs
───────────────────────────────────────────────────────────────────────────*/
void configure_stepping() {
    long new_motor_count = ask_value(
        ""Enter number of attached stepper motors (1 to "" + String(MAX_MOTORS) + ""): "",
        motor_count, 1, MAX_MOTORS
    );
    motor_count = new_motor_count;

    for (int i = 0; i < motor_count; i++) {
        long step_pin = ask_value(
            ""For motor "" + String(i + 1) + "", enter STEP pin (default "" + String(default_step_pins[i]) + ""): "",
            default_step_pins[i], 0, 40
        );
        motors[i].step_pin = step_pin;

        long dir_pin = ask_value(
            ""For motor "" + String(i + 1) + "", enter DIR pin (default "" + String(default_dir_pins[i]) + ""): "",
            default_dir_pins[i], 0, 40
        );
        motors[i].dir_pin = dir_pin;

        long uart_number = ask_value(
            ""For motor "" + String(i + 1) + "", enter UART number (default "" + String(default_uart_numbers[i]) + ""): "",
            default_uart_numbers[i], 1, 8
        );
        motors[i].uart_number = uart_number;

        long full_steps_per_rev = ask_value(
            ""For motor "" + String(i + 1) + "", enter full steps per revolution (default 200): "",
            200
        );
        motors[i].full_steps_per_rev = full_steps_per_rev;

        long microsteps = ask_value(
            ""For motor "" + String(i + 1) + "", enter microsteps (default 1): "",
            1, 1, 256
        );
        motors[i].microsteps = microsteps;

        long speed_steps_per_sec = ask_value(
            ""For motor "" + String(i + 1) + "", enter speed steps per second (default 200): "",
            200
        );
        motors[i].speed_steps_per_sec = speed_steps_per_sec;

        if (motors[i].last_stop_pos == 200) {
            motors[i].last_stop_pos = motors[i].full_steps_per_rev * motors[i].microsteps;
        }

        motors[i].current_position = 0;
        motors[i].initialized = false;
    }

    initialize_motors();
}

void configure_modes() {
    for (int i = 0; i < motor_count; i++) {
        long vel = ask_value(
            ""For motor "" + String(i + 1) + "", velocity mode (1=yes,0=no): "",
            motors[i].velocity_mode ? 1 : 0, 0, 1
        );
        motors[i].velocity_mode = (vel == 1);

        long constc = ask_value(
            ""For motor "" + String(i + 1) + "", constant current mode (1=yes,0=no): "",
            motors[i].constant_current ? 1 : 0, 0, 1
        );
        motors[i].constant_current = (constc == 1);
    }
    initialize_motors();
}

void set_velocity() {
    bool any_velocity = false;
    for (int i = 0; i < motor_count; i++) {
        if (motors[i].velocity_mode) {
            any_velocity = true;
            long vel = ask_value(
                ""Enter velocity for motor "" + String(i + 1) + "" (microsteps/sec, signed): "",
                motors[i].current_velocity
            );
            motors[i].current_velocity = vel;
            motors[i].tmc.moveAtVelocity(vel);
        }
    }
    if (!any_velocity) {
        Serial.println(""No motors in velocity mode."");
    }
}

/*───────────────────────────────────────────────────────────────────────────
  Continuous sweep
───────────────────────────────────────────────────────────────────────────*/
void continuous_sweep() {
    if (motor_count == 0) {
        Serial.println(""No motors configured."");
        return;
    }

    int motor_num = ask_value(
        ""Enter motor number to sweep (1 to "" + String(motor_count) + "", or >"" + String(motor_count) + "" for all): "",
        1, 1
    );
    bool sweep_all = (motor_num > motor_count);

    if (!sweep_all) {
        int motor_index = motor_num - 1;
        if (motor_index < 0 || motor_index >= motor_count || !motors[motor_index].initialized) {
            Serial.println(""Invalid motor."");
            return;
        }
        if (motors[motor_index].velocity_mode) {
            Serial.println(""Cannot sweep in velocity mode."");
            return;
        }

        long pos1 = ask_value(
            ""Enter first position (microsteps, default "" + String(motors[motor_index].last_start_pos) + ""): "",
            motors[motor_index].last_start_pos
        );
        motors[motor_index].last_start_pos = pos1;

        long pos2 = ask_value(
            ""Enter second position (microsteps, default "" + String(motors[motor_index].last_stop_pos) + ""): "",
            motors[motor_index].last_stop_pos
        );
        motors[motor_index].last_stop_pos = pos2;

        // Render full status before movement (no intermediate black push)
        update_display(true);

        Serial.println(""Starting continuous sweep. Press any key to stop."");

        bool sweeping = true;
        while (sweeping) {
            move_to_position(motor_index, pos1 + 1, motors[motor_index].speed_steps_per_sec * motors[motor_index].microsteps);
            if (Serial.available()) { Serial.read(); sweeping = false; }
            move_to_position(motor_index, pos2 + 1, motors[motor_index].speed_steps_per_sec * motors[motor_index].microsteps);
            if (Serial.available()) { Serial.read(); sweeping = false; }
        }
        Serial.println(""Sweep stopped."");
    } else {
        bool any_velocity = false;
        for (int i = 0; i < motor_count; i++) {
            if (motors[i].velocity_mode) { any_velocity = true; break; }
        }
        if (any_velocity) {
            Serial.println(""Cannot sweep all; some motors in velocity mode."");
            return;
        }
        long pos1[MAX_MOTORS];
        long pos2[MAX_MOTORS];
        for (int i = 0; i < motor_count; i++) {
            pos1[i] = ask_value(
                ""For motor "" + String(i + 1) + "", enter first position (microsteps, default "" + String(motors[i].last_start_pos) + ""): "",
                motors[i].last_start_pos
            );
            motors[i].last_start_pos = pos1[i];

            pos2[i] = ask_value(
                ""For motor "" + String(i + 1) + "", enter second position (microsteps, default "" + String(motors[i].last_stop_pos) + ""): "",
                motors[i].last_stop_pos
            );
            motors[i].last_stop_pos = pos2[i];
        }

        update_display(true);

        Serial.println(""Starting continuous sweep for all motors. Press any key to stop."");

        bool sweeping = true;
        while (sweeping) {
            for (int i = 0; i < motor_count; i++) {
                move_to_position(i, pos1[i], motors[i].speed_steps_per_sec * motors[i].microsteps);
                if (Serial.available()) { Serial.read(); sweeping = false; break; }
            }
            for (int i = 0; i < motor_count; i++) {
                move_to_position(i, pos2[i], motors[i].speed_steps_per_sec * motors[i].microsteps);
                if (Serial.available()) { Serial.read(); sweeping = false; break; }
            }
        }
        Serial.println(""Sweep stopped."");
    }
}

/*───────────────────────────────────────────────────────────────────────────
  Encoder test
───────────────────────────────────────────────────────────────────────────*/
void test_encoders() {
    Serial.println(""Test Encoders. Press any button to exit."");

    tft_fb_wait_idle();
    tft_fb_prepare_draw();
    tft.fillScreen(ST7735_BLACK);
    gfx_set_cursor(0, 0);
    tft.setTextColor(ST7735_MAGENTA, ST7735_BLACK);
    gfx_set_text_size(1);
    gfx_println(""Test Encoders"");
    tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);
    tft_fb_push(false);

    const int16_t list_y = gfx_line_height();
    bool done = false;

    while (!done) {
        bool changed = false;
        for (int e = 0; e < 4; e++) {
            int32_t new_pos = ss.getEncoderPosition(e);
            if (new_pos != enc_positions[e]) {
                Serial.print(""Enc""); Serial.print(e); Serial.print("": ""); Serial.println(new_pos);
                enc_positions[e] = new_pos;
                pixels.setPixelColor(e, wheel((new_pos * 4) & 255));
                pixels.show();
                changed = true;
            }
            if (!ss.digitalRead(switch_pins[e])) {
                delay(50);
                if (!ss.digitalRead(switch_pins[e])) {
                    Serial.print(""Button ""); Serial.print(e); Serial.println("" pressed"");
                    done = true;
                }
            }
        }

        if (changed) {
            tft_fb_prepare_draw();
            tft.fillRect(0, list_y, tft.width(), tft.height() - list_y, ST7735_BLACK);
            gfx_set_cursor(0, list_y);
            for (int e = 0; e < 4; e++) {
                tft.print(""Enc""); tft.print(e); tft.print("": ""); tft.print(enc_positions[e]);
                gfx_newline();
            }
            tft_fb_push(false);
        }
        delay(10);
    }
}

/*───────────────────────────────────────────────────────────────────────────
  Menu printing (Serial + TFT)
───────────────────────────────────────────────────────────────────────────*/
void print_menu() {
    // Serial menu
    Serial.println();
    Serial.println(MENU_TITLE);
    for (int i = 0; i < MENU_ITEM_COUNT; ++i) {
        Serial.println(MENU_ITEMS[i]);
    }
    Serial.print(""Enter choice: "");

    // TFT menu
    tft_fb_wait_idle();
    tft_fb_prepare_draw();
    tft.fillScreen(ST7735_BLACK);
    gfx_set_cursor(0, 0);
    tft.setTextColor(ST7735_MAGENTA, ST7735_BLACK);
    gfx_set_text_size(1);
    gfx_println(MENU_TITLE);

    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
    for (int i = 0; i < MENU_ITEM_COUNT; ++i) {
        gfx_println(MENU_ITEMS[i]);
    }

    tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);
    gfx_println(""Modes:"");
    for (int i = 0; i < motor_count; i++) {
        tft.print(""M"");
        tft.print(i + 1);
        tft.print("": "");
        tft.print(motors[i].velocity_mode ? ""Vel"" : ""Pos"");
        tft.print("" "");
        tft.print(motors[i].constant_current ? ""Const"" : ""Auto"");
        gfx_newline();
    }
    tft_fb_push(false);
}

/*───────────────────────────────────────────────────────────────────────────
  Status display
───────────────────────────────────────────────────────────────────────────*/
void update_display(bool full_update) {
    gfx_set_text_size(1);
    tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);

    tft_fb_prepare_draw();

    if (full_update) {
        tft.fillScreen(ST7735_BLACK);
        gfx_set_cursor(0, 0);
        tft.setTextColor(ST7735_MAGENTA, ST7735_BLACK);
        gfx_println(""Motor Status:"");

        tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);
        for (int i = 0; i < motor_count; i++) {
            tft.print(""M""); tft.print(i + 1); tft.print("": Pos "");
            char buf[16];
            sprintf(buf, ""%4ld"", motors[i].current_position);
            tft.print(buf);
            tft.setCursor(tft.getCursorX() + 2, tft.getCursorY());
            tft.print("" "");
            if (motors[i].velocity_mode) {
                tft.print(""Vel ""); tft.print(motors[i].current_velocity);
            } else {
                tft.print(""Pos"");
            }
            tft.print("" "");
            tft.print(motors[i].constant_current ? ""Const"" : ""Auto"");
            gfx_newline();
        }
        tft_fb_push_if_idle();
    } else {
        const int16_t first_line_y = gfx_line_height();
        for (int i = 0; i < motor_count; i++) {
            int16_t y = first_line_y + i * gfx_line_height();

            // Position field (opaque text overwrites cleanly)
            tft.setCursor(48, y);
            char buf[16];
            sprintf(buf, ""%4ld"", motors[i].current_position);
            tft.print(buf);

            // Velocity field (if applicable)
            if (motors[i].velocity_mode) {
                tft.setCursor(90, y);
                tft.print(""Vel "");
                tft.print(motors[i].current_velocity);
            }
        }
        tft_fb_push_if_idle();
    }
}

/*───────────────────────────────────────────────────────────────────────────
  Microstep HUD update: rewrite only the numeric position for motor i
───────────────────────────────────────────────────────────────────────────*/
inline void update_display_microstep(int motor_index) {
    const int16_t first_line_y = gfx_line_height();   // after ""Motor Status:"" header
    const int16_t y = first_line_y + motor_index * gfx_line_height();

    tft_fb_prepare_draw();
    tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);
    tft.setCursor(48, y);

    char buf[16];
    sprintf(buf, ""%5ld"", motors[motor_index].current_position);
    tft.print(buf);

    if (motors[motor_index].velocity_mode) {
        tft.setCursor(90, y);
        tft.print(""Vel "");
        tft.print(motors[motor_index].current_velocity);
    }

    tft_fb_push_if_idle();   // queue non-blocking DMA when idle
}

/*───────────────────────────────────────────────────────────────────────────
  Color wheel for seesaw neopixels
───────────────────────────────────────────────────────────────────────────*/
uint32_t wheel(byte wheel_pos) {
    wheel_pos = 255 - wheel_pos;
    if (wheel_pos < 85) {
        return pixels.Color(255 - wheel_pos * 3, 0, wheel_pos * 3);
    }
    if (wheel_pos < 170) {
        wheel_pos -= 85;
        return pixels.Color(0, wheel_pos * 3, 255 - wheel_pos * 3);
    }
    wheel_pos -= 170;
    return pixels.Color(wheel_pos * 3, 255 - wheel_pos * 3, 0);
}

/*───────────────────────────────────────────────────────────────────────────
  Setup / Loop
───────────────────────────────────────────────────────────────────────────*/
void setup() {
    Serial.begin(9600);
    while (!Serial) {}
    Serial.println(""Teensy 4.1 Stepper Motor Control with TMC2209"");
    memset(user_input, 0, sizeof(user_input));

    // TFT init
    tft.initR(INITR_BLACKTAB);
    tft.setRotation(3); // landscape
    tft.setTextWrap(false);

    // Bind framebuffers without heap, enable FB mode
    memset(fb_a, 0, FB_BYTES);
    memset(fb_b, 0, FB_BYTES);
    tft.setFrameBuffer(fb_a);
    tft_fb_ok = (tft.useFrameBuffer(true) != 0);
    draw_fb = fb_a;
    tft.fillScreen(ST7735_BLACK);
    if (tft_fb_ok) {
        tft.updateScreen(); // initial blocking push to prime the panel
    }

    // Backlight
    pinMode(TFT_BACKLIGHT, OUTPUT);
    analogWrite(TFT_BACKLIGHT, 96);

    // seesaw init
    if (!ss.begin(SEESAW_ADDR) || !pixels.begin(SEESAW_ADDR)) {
        Serial.println(""Couldn't find seesaw!"");
        while (1) {
            delay(10);
        }
    }
    Serial.println(""seesaw started"");
    for (int e = 0; e < 4; e++) {
        ss.pinMode(switch_pins[e], INPUT_PULLUP);
        enc_positions[e] = ss.getEncoderPosition(e);
    }
    pixels.setBrightness(255);
    pixels.show();

    // Default motor configuration
    motor_count = 2;
    // Motor 1
    motors[0].step_pin = default_step_pins[0];
    motors[0].dir_pin = default_dir_pins[0];
    motors[0].uart_number = default_uart_numbers[0];
    motors[0].full_steps_per_rev = 200;
    motors[0].microsteps = 64;
    motors[0].speed_steps_per_sec = 50;
    motors[0].last_start_pos = 0;
    motors[0].last_stop_pos = 3200;
    // Motor 2
    motors[1].step_pin = default_step_pins[1];
    motors[1].dir_pin = default_dir_pins[1];
    motors[1].uart_number = default_uart_numbers[1];
    motors[1].full_steps_per_rev = 200;
    motors[1].microsteps = 1;
    motors[1].speed_steps_per_sec = 400;
    motors[1].last_start_pos = 0;
    motors[1].last_stop_pos = 200;

    initialize_motors();

    // Splash / ready
    tft.setTextColor(ST7735_MAGENTA, ST7735_BLACK);
    gfx_set_text_size(1);
    gfx_set_cursor(0, 0);
    gfx_println(""Teensy TMC2209 Control"");
    gfx_println(""Ready"");
    tft_fb_push(false);

    print_menu();
}

void loop() {
    int choice = ask_value(""Enter choice: "", 1, 1, 5);
    switch (choice) {
        case 1:
            configure_stepping();
            update_display(true);
            break;
        case 2:
            continuous_sweep();
            break;
        case 3:
            configure_modes();
            update_display(true);
            break;
        case 4:
            set_velocity();
            update_display(true);
            break;
        case 5:
            test_encoders();
            break;
        default:
            Serial.println(""Invalid choice."");
            break;
    }
    update_display(false);
    print_menu();
}"
R8Y6WB6P,Reactor control server,tommy2805,Lua,Tuesday 21st of October 2025 05:47:17 PM CDT,"local configPath = ""config""

-- ========= TROVA PERIFERICHE =========
local function findPeripheral(t)
    for _, side in ipairs(rs.getSides()) do
        if peripheral.isPresent(side) and peripheral.getType(side) == t then
            return peripheral.wrap(side), side
        end
    end
    return nil
end

-- ========= CONFIGURAZIONE =========
local function loadConfig()
    if not fs.exists(configPath) then return nil end
    local f = fs.open(configPath,""r"")
    local data=f.readAll() f.close()
    local func=loadstring(data)
    if func then return func() else error(""Errore nel config"") end
end

term.setTextColor(colors.yellow)
print(""Avvio centrale di controllo..."")
sleep(0.3)
local config = loadConfig()
if not config then
    term.setTextColor(colors.white)
    print(""Configurazione non trovata. Creazione guidata...\n"")
    local validColors = {}
    for k, v in pairs(colors) do
        validColors[k] = v
    end
    local reactors = {}
    while true do
        local id
        local color
        write(""Nome reattore: "") local name = read()
        repeat
            write(""ID rednet: "") id = tonumber(read())
        until id
        repeat
            write(""Colore asseganto al reattore(white,blue ...): \n"") color = read()
        until validColors[color]
        table.insert(reactors,{name=name,id=id,color = color})
        if table.maxn(reactors) == 8 then break end
        write(""Altro reattore? (s/n): "") if read():lower()~=""s"" then break end
    end
    config = {reactors=reactors, update_interval=2}
    local f = fs.open(configPath,""w"")
    f.write(""return "" .. textutils.serialize(config))
    f.close()
end
if type(config.update_interval)~=""number"" then config.update_interval=2 end

term.setTextColor(colors.cyan)
print(""\n[ Inizializzazione periferiche ]"")
sleep(0.3)

local modem, modemSide = findPeripheral(""modem"")
if not modem then error(""Nessun modem trovato!"") end
rednet.open(modemSide)
term.setTextColor(colors.lime)
print(""Modem su ""..modemSide)
sleep(0.2)

local mon, monSide = findPeripheral(""monitor"")
if not mon then error(""Nessun monitor trovato!"") end
mon.setBackgroundColor(colors.black)
mon.setTextColor(colors.white)
mon.clear()
local monitorSizeX, monitorSizeY = mon.getSize()
term.setTextColor(colors.lime)
print(""Monitor su ""..monSide)
sleep(0.5)

term.setTextColor(colors.yellow)
print(""Inizializzazione completata."")
sleep(1)
term.clear()
term.setCursorPos(1,1)

-- ========= VARIABILI =========
local reactors = {}

-- ========= UTILITY =========
local function colorByTemp(p)
    if p < 60 then return colors.green
    elseif p < 85 then return colors.orange
    else return colors.red end
end
local function drawBar(x,y,w,perc,color)
    local filled = math.floor(w*perc/100)
    mon.setCursorPos(x,y)
    mon.setBackgroundColor(colors.gray)
    mon.write(string.rep("" "",w))
    mon.setCursorPos(x,y)
    mon.setBackgroundColor(color)
    mon.write(string.rep("" "",filled))
    mon.setBackgroundColor(colors.black)
end

local function getReactorsInfo(config)
    local reactors = {}
    for _,r in ipairs(config.reactors) do
        term.setTextColor(colors.lightBlue)
        print(""Invio richiesta a ""..r.name.."" (ID ""..r.id.."")..."")
        local command = textutils.serialize({command = ""reactor_info""})
        rednet.send(r.id, command)
        local start=os.clock()
        local sender,msg
        repeat
            sender,msgTmp=rednet.receive(5)
            if msgTmp then
                msg = textutils.unserialize(msgTmp)
            end
        until sender==r.id or os.clock()-start>5
        

        if sender==r.id and type(msg)==""table"" and msg.type==""info"" then
            term.setTextColor(colors.lime)
            print(""Dati ricevuti da ""..r.name)
            reactors[r.id]=msg.data
        else
            term.setTextColor(colors.red)
            print(""Nessuna risposta da ""..r.name)
            reactors[r.id]=nil
        end
    end
    return reactors
end

local function drawUI()
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
    mon.clear()
    mon.setCursorPos((monitorSizeX/2)-12,1)
    mon.write(""=== CENTRALE NUCLEARE ==="")
    mon.setCursorPos((monitorSizeX/2)-9,2)
    mon.write(""Aggiornato: "" .. textutils.formatTime(os.time(), true))
    local y=4
    local x=2
    local reactorCount = 0
    local reactorPerPage = math.floor(((monitorSizeY-3)/6)+0.5)
    for _,r in ipairs(config.reactors) do
        reactorCount = reactorCount+1
        local info = reactors[r.id]
        mon.setCursorPos(x,y)
        mon.setTextColor(colors.cyan)
        mon.write(r.name)
        y=y+1
        if info and type(info) == ""table"" then
            mon.setCursorPos(x+15,y-1)
            local perc = math.floor((info.temp/info.maxHeat)*100)
            if perc >= 80 then
                mon.setTextColor(colors.red) mon.write(""STATO: SCRAM"")
            elseif info.active then
                mon.setTextColor(colors.lime) mon.write(""STATO: ATTIVO"")
            else
                mon.setTextColor(colors.red) mon.write(""STATO: SPENTO"")
            end
            mon.setTextColor(colors.yellow)
            mon.setCursorPos(x+2,y)
            mon.write(string.format(""MaxOut: %d/t | Output: %d/t"", info.maxOutput, info.effectiveOutput))
            y=y+1
            mon.setCursorPos(x+2,y)
            mon.write(string.format(""MaxTemp: %d C | Temp: %d%%"", info.maxHeat, perc))
            y=y+1
            drawBar(x+2,y,22,perc+30,colorByTemp(perc))
            y=y+1
            mon.setCursorPos(x+2,y)

        else
            mon.setTextColor(colors.red)
            mon.write(""  Nessuna risposta"")
            y=y+1
        end
        y=y+2
        if reactorCount% reactorPerPage == 0 then
            for i = 4, monitorSizeY, 1 do
                mon.setCursorPos(monitorSizeX/2,i)
                mon.write(""|"")
            end
            x= x+(monitorSizeX/2)
            y = 4
        end
    end
end


local previousStates = {}

local function checkInput()
    local activeColors = rs.getBundledInput(""right"")

    term.setTextColor(colors.yellow)
    print(""---------------------------------\nCheck Inputs..."")
    for _, r in ipairs(config.reactors) do
        local isActive = colors.test(activeColors, colors[r.color])

        if isActive then
            term.setTextColor(colors.lime)
            print(r.name .. "" ATTIVO"")
        else
            term.setTextColor(colors.red)
            print(r.name .. "" SPENTO"")
        end

        if previousStates[r.id] ~= isActive then
            local command
            if isActive then
                command = textutils.serialize({command = ""reactor_control"", newState = true})
            else
                command = textutils.serialize({command = ""reactor_control"", newState = false})
            end

            rednet.send(r.id, command)
            local start=os.clock()
            local sender,msg
            repeat
                sender,msgTmp=rednet.receive(5)
                if msgTmp then
                    msg = textutils.unserialize(msgTmp)
                end
            until sender==r.id or os.clock()-start>5
            if msg and msg.success then
                term.setTextColor(colors.lime)
                print(r.name .. "" Impostato al nuovo stato"")
                previousStates[r.id] = isActive
            else
                term.setTextColor(colors.red)
                print(""Nessuna risposta da ""..r.name)
            end
        end
    end
    term.setTextColor(colors.yellow)
    print(""---------------------------------"")
end

local function checkSCRAM()
    term.setTextColor(colors.yellow)
    print(""---------------------------------\nCheck SCRAM..."")
    for _,r in ipairs(config.reactors) do
        local info = reactors[r.id]
        if info and type(info) == ""table"" then
            local perc = math.floor((info.temp/info.maxHeat)*100)
            local activeColors = rs.getBundledOutput(""back"")
            if perc >= 80 then
                term.setTextColor(colors.red)
                print(r.name .. "" in SCRAM!!"")
                if not colors.test(activeColors,colors[r.color]) then
                    rs.setBundledOutput(""back"", activeColors + colors[r.color])
                end
            else
                term.setTextColor(colors.lime)
                print(r.name .. "" ok"")
                if colors.test(activeColors,colors[r.color]) then
                    rs.setBundledOutput(""back"", activeColors - colors[r.color])
                end
            end
        end
    end
    term.setTextColor(colors.yellow)
    print(""---------------------------------"")
end

-- ========= CICLO DI POLLING =========
while true do
    reactors = getReactorsInfo(config)
    sleep(0.5)
    checkInput()
    checkSCRAM()
    drawUI()
    term.setTextColor(colors.gray)
    print(""Aggiornamento completato.\n"")
    sleep(config.update_interval)
end
"
z0dEQkz1,Reactor control client,tommy2805,Lua,Tuesday 21st of October 2025 05:26:59 PM CDT,"
local configPath=""config""

-- ========= TROVA PERIFERICHE =========
local function findPeripheral(t)
    for _,side in ipairs(rs.getSides())do
        if peripheral.isPresent(side)and peripheral.getType(side)==t then
            return peripheral.wrap(side),side
        end
    end
    return nil
end

-- ========= CONFIGURAZIONE =========
local function loadConfig()
    if not fs.exists(configPath)then return nil end
    local f=fs.open(configPath,""r"")
    local data=f.readAll() f.close()
    local func=loadstring(data)
    if func then return func() else error(""Errore nel config"") end
end

term.setTextColor(colors.yellow)
print(""Avvio modulo reattore..."")
sleep(0.3)
local config=loadConfig()
if not config then
    local validColors = {}
    for k, v in pairs(colors) do
        validColors[k] = v
    end
    term.setTextColor(colors.white)
    print(""Configurazione non trovata. Creazione guidata...\n"")
    local myID
    local serverID
    local color
    repeat
        write(""ID di questo reattore: "") myID=tonumber(read())
    until myID
    repeat
        write(""ID del server: "") serverID=tonumber(read())
    until serverID
    repeat
        write(""Colore asseganto al reattore(white,blue ...): \n"") color = read()
    until validColors[color]

    config={id=myID, server_id=serverID, color = color, update_interval=2}
    local f=fs.open(configPath,""w"")
    f.write(""return ""..textutils.serialize(config))
    f.close()
end
if type(config.update_interval)~=""number""then config.update_interval=2 end

term.setTextColor(colors.cyan)
print(""\n[ Inizializzazione periferiche ]"")
sleep(0.3)

local modem,modemSide=findPeripheral(""modem"")
if not modem then error(""Nessun modem trovato!"")end
rednet.open(modemSide)
term.setTextColor(colors.lime)
print(""✔ Modem su ""..modemSide)
sleep(0.2)

local reader,readerSide=findPeripheral(""nuclearReader"")
if not reader then error(""Advanced Nuclear Information Reader non trovato!"")end
term.setTextColor(colors.lime)
print(""✔ Sensore su ""..readerSide)
sleep(0.4)

term.setTextColor(colors.yellow)
print(""\nIn attesa di comandi dal server "" .. config.server_id .. ""..."")
sleep(1)
term.clear()
term.setCursorPos(1,1)

-- ========= FUNZIONE DATI =========
local function leggiDati()
    local a,b,c,info=reader.get(1)
    local a,b,c,infoShunt=reader.get(2)
    local data={
        id=config.id,
        temp=tonumber(info[""heat""] or 0),
        maxHeat=tonumber(info[""maxHeat""] or 1),
        maxOutput=tonumber(info[""output""] or 0),
        effectiveOutput = tonumber(infoShunt[""average""] or 0),
        active=info[""reactorPoweredB""] or false
    }
    return data
end

-- ========= LOOP =========
print(""Aspetto master..."")
while true do
    term.setTextColor(colors.white)
    local sender, msgTmp=rednet.receive()
    msg = textutils.unserialize(msgTmp)
    if sender==config.server_id then
        if msg.command ==""reactor_info"" and type(msg)==""table"" then
            term.setTextColor(colors.lightBlue)
            print(""Richiesta dati ricevuta dal server."")
            local data=leggiDati()
            term.setTextColor(colors.cyan)
            print(string.format(""Temp:%d  Max:%d  EU:%d MAXEU: %d Stato:%s"",
                data.temp,data.maxHeat,data.effectiveOutput,data.maxOutput,tostring(data.active)))
            term.setTextColor(colors.yellow)
            print(""Invio dati al server..."")
            local result = textutils.serialize({type=""info"",data=data})
            rednet.send(config.server_id,result)
            term.setTextColor(colors.lime)
            print(""Dati inviati con successo!\n"")
        elseif msg.command ==""reactor_control"" and type(msg)==""table""then
            term.setTextColor(colors.orange)
            print(""Comando di controllo ricevuto."")
            local state=msg.newState
            if type(state)==""boolean""then
                if state then
                    rs.setBundledOutput(""back"",colors[config.color])
                else
                    rs.setBundledOutput(""back"",0)
                end
                local result = textutils.serialize({type=""control_result"",success=true})
                rednet.send(config.server_id, result)
                print(""Stato cambiato a ""..tostring(state))
            end
        end
    end
    sleep(0.1)
end
"
aJCRYHa6,Задачите от 19.10.2025,gigafloyd,Python,Tuesday 21st of October 2025 03:41:22 PM CDT,"#1
 
movie_type = input()
rows = int(input())
columns = int(input())
ticket_price = 0
if movie_type == ""Premiere"":
    ticket_price = 12.00
elif movie_type == ""Normal"":
    ticket_price = 7.50
elif movie_type == ""Discount"":  # else
    ticket_price = 5.00
total_places = rows * columns
total_sum = total_places * ticket_price
print(f""{total_sum:.2f} leva"")
 
#2
 
degrees = int(input())
time_of_the_day = input()
outfit = """"
shoes = """"
if time_of_the_day == ""Morning"":
    if 10 <= degrees <= 18:
        outfit = ""Sweatshirt""
        shoes = ""Sneakers""
    elif 18 < degrees <= 24:
        outfit = ""Shirt""
        shoes = ""Moccasins""
    elif degrees >= 25:
        outfit = ""T-Shirt""
        shoes = ""Sandals""
elif time_of_the_day == ""Afternoon"":
    if 10 <= degrees <= 18:
        outfit = ""Shirt""
        shoes = ""Moccasins""
    elif 18 < degrees <= 24:
        outfit = ""T-Shirt""
        shoes = ""Sandals""
    elif degrees >= 25:
        outfit = ""Swim Suit""
        shoes = ""Barefoot""
elif time_of_the_day == ""Evening"":
    outfit = ""Shirt""
    shoes = ""Moccasins""
print(f""It's {degrees} degrees, get your {outfit} and {shoes}."")
 
 
#3
 
type_of_flowers = input()
number_of_flowers = int(input())
budget = int(input())
price_per_flower = 0
if type_of_flowers == ""Roses"":
    price_per_flower = 5
    if number_of_flowers > 80:
        price_per_flower *= 0.9
elif type_of_flowers == ""Dahlias"":
    price_per_flower = 3.80
    if number_of_flowers > 90:
        price_per_flower *= 0.85
elif type_of_flowers == ""Tulips"":
    price_per_flower = 2.80
    if number_of_flowers > 80:
        price_per_flower *= 0.85
elif type_of_flowers == ""Narcissus"":
    price_per_flower = 3
    if number_of_flowers < 120:
        price_per_flower *= 1.15
elif type_of_flowers == ""Gladiolus"":
    price_per_flower = 2.50
    if number_of_flowers < 80:
        price_per_flower *= 1.20
needed_sum = number_of_flowers * price_per_flower
difference = abs(needed_sum - budget)
if budget >= needed_sum:
    print(f""Hey, you have a great garden with {number_of_flowers} {type_of_flowers} and {difference:.2f} leva left."")
else:
    print(f""Not enough money, you need {difference:.2f} leva more."")
 
 
 
#4
 
budget = int(input())
season = input()
number_of_fishermen = int(input())
boat_rent = 0
if season == ""Spring"":
    boat_rent = 3000
elif season == ""Summer"" or season == ""Autumn"":
    boat_rent = 4200
elif season == ""Winter"":  # else:
    boat_rent = 2600
if number_of_fishermen <= 6:
    boat_rent *= 0.9
elif 7 <= number_of_fishermen <= 11:
    boat_rent *= 0.85
elif number_of_fishermen >= 12:  # else
    boat_rent *= 0.75
if number_of_fishermen % 2 == 0 and season != ""Autumn"":
    boat_rent *= 0.95
difference = abs(budget - boat_rent)
if budget >= boat_rent:
    print(f""Yes! You have {difference:.2f} leva left."")
else:
    print(f""Not enough money! You need {difference:.2f} leva."")
 
 
 
#6
first_number = int(input())
second_number = int(input())
operator = input()
result = 0
odd_or_even = """"
if operator == ""+"" or operator == ""-"" or operator == ""*"":
    if operator == ""+"":
        result = first_number + second_number
    elif operator == ""-"":
        result = first_number - second_number
    elif operator == ""*"":  # else
        result = first_number * second_number
    if result % 2 == 0:
        odd_or_even = ""even""
    else:
        odd_or_even = ""odd""
    print(f""{first_number} {operator} {second_number} = {result} - {odd_or_even}"")
elif operator == ""/"":
    if second_number == 0:
        print(f""Cannot divide {first_number} by zero"")
    else:
        result = first_number / second_number
        print(f""{first_number} / {second_number} = {result:.2f}"" )
elif operator == ""%"":  # else:
    if second_number == 0:
        print(f""Cannot divide {first_number} by zero"")
    else:
        result = first_number % second_number
        print(f""{first_number} % {second_number} = {result}"")
 
 
 
#8
 
hour_of_exam = int(input())
minutes_of_exam = int(input())
hour_of_arriving = int(input())
minutes_of_arriving = int(input())
time_of_exam = hour_of_exam * 60 + minutes_of_exam
time_of_arriving = hour_of_arriving * 60 + minutes_of_arriving
if time_of_arriving > time_of_exam:
    print(""Late"")
elif time_of_exam - 30 <= time_of_arriving <= time_of_exam:
    print(""On time"")
elif time_of_arriving < time_of_exam - 30:
    print(""Early"")
difference = abs(time_of_arriving - time_of_exam)
hours = difference // 60
minutes = difference % 60
if time_of_exam - 60 < time_of_arriving < time_of_exam:
    print(f""{minutes} minutes before the start"")
elif time_of_arriving <= time_of_exam - 60:
    print(f""{hours}:{minutes:02d} hours before the start"")
    # if minutes <= 9:
    #     #     print(f""{hours}:0{minutes} hours before the start"")
    #     # else:
    #     #     print(f""{hours}:{minutes} hours before the start"")
elif time_of_exam < time_of_arriving < time_of_exam + 60:
    print(f""{minutes} minutes after the start"")
elif time_of_arriving >= time_of_exam + 60:
    print(f""{hours}:{minutes:02d} hours after the start"")
 
 
#9
 
days = int(input())
type_of_the_room = input()
value = input()
nights = days - 1
price_per_night = 0
if type_of_the_room == ""room for one person"":
    price_per_night = 18
elif type_of_the_room == ""apartment"":
    price_per_night = 25
    if nights < 10:
        price_per_night *= 0.7
    elif nights <= 15: # elif 10 <= nights <= 15
        price_per_night *= 0.65
    elif nights > 15: # else
        price_per_night *= 0.5
elif type_of_the_room == ""president apartment"":
    price_per_night = 35
    if nights < 10:
        price_per_night *= 0.9
    elif nights <= 15: # elif 10 <= nights <= 15
        price_per_night *= 0.85
    elif nights > 15: # else
        price_per_night *= 0.8
total_sum = nights * price_per_night
if value == ""positive"":
    total_sum *= 1.25
elif value == ""negative"": #else:
    total_sum *= 0.9
print(f""{total_sum:.2f}"")"
pU4u8zUM,buggy heap,Nsinecode,C++,Tuesday 21st of October 2025 03:29:31 PM CDT,"#include <iostream>
#include <vector>
#include <string>

enum QueueCodes { EmptyHead, Success };
enum HeapCodes { EmptyHeap, Successfuly };

template <typename T>
class Queue {
 private:
  struct Node {
    T value;
    Node* next_node;
    Node* previous_node;
  };

  Node* head_;
  Node* tail_;
  size_t size_;

 public:
  Queue();
  ~Queue();

  bool Empty();
  size_t GetSize();
  std::pair<QueueCodes, T> GetTail();

  void Push(T value);
  std::pair<QueueCodes, T> Pop();
  std::pair<QueueCodes, T> PopFront();

  void DeleteQueue();
};

template <typename T>
class BinHeap {
public:
  BinHeap();
  ~BinHeap();

  void ExtractMin();
  void DecreaseKey(void* target, T delta);

  std::pair<HeapCodes, T> GetMin();
  void* Insert(T value);

private:
  struct Node {
    T value;
    Node* parent;
    Node* left_child;
    Node* right_child;

    void SiftUp();
    void SiftDown();
  };

  Queue<Node*> leafs_;
  Node* head_;
  size_t size_;
};

template <typename T>
void DoOperation(BinHeap<T>& heap, std::vector<void*>& nodes, std::string operation) {
  if (operation == ""insert"") {
    T value;

    std::cin >> value;

    nodes.push_back(heap.Insert(value));
  } else if (operation == ""getMin"") {
    std::cout << heap.GetMin().second << ""\n"";

    nodes.push_back(nullptr);
  } else if (operation == ""extractMin"") {
    heap.ExtractMin();
    nodes.push_back(nullptr);
  } else {
    int ptr;
    int delta;

    std::cin >> ptr >> delta;

    heap.DecreaseKey(nodes[ptr - 1], delta);
    nodes.push_back(nullptr);
  }
}

int main() {
  std::vector<void*> nodes;
  BinHeap<int> heap;
  int n;

  std::cin >> n;

  while (n-- != 0) {
    std::string operation;

    std::cin >> operation;

    DoOperation<int>(heap, nodes, operation);
  }
}

template <typename T>
Queue<T>::Queue() {
  head_ = nullptr;
  tail_ = nullptr;
  size_ = 0;
}

template <typename T>
Queue<T>::~Queue() {
  DeleteQueue();
}

template <typename T>
bool Queue<T>::Empty() {
  return head_ == nullptr;
}

template <typename T>
size_t Queue<T>::GetSize() {
  return size_;
}

template <typename T>
std::pair<QueueCodes, T> Queue<T>::GetTail() {
  if (tail_ != nullptr) {
    return {Success, tail_->value};
  }
  return {EmptyHead, T()};
}

template <typename T>
void Queue<T>::Push(T value) {
  Node* new_head = new Node({value, head_, nullptr});
  if (tail_ == nullptr) {
    tail_ = new_head;
  }
  if (head_ != nullptr) {
    head_->previous_node = new_head;
  }

  head_ = new_head;
  ++size_;
}

template <typename T>
std::pair<QueueCodes, T> Queue<T>::Pop() {
  if (tail_ == nullptr) {
    return {EmptyHead, T()};
  } else if (tail_ == head_) {
    T value = tail_->value;
    delete tail_;
    tail_ = nullptr;
    head_ = nullptr;
    --size_;
    return {Success, value};
  }

  T value = tail_->value;
  tail_ = tail_->previous_node;
  delete tail_->next_node;
  --size_;
  return {Success, value};
}

template <typename T>
std::pair<QueueCodes, T> Queue<T>::PopFront() {
  if (head_ == nullptr) {
    return {EmptyHead, T()};
  } else if (tail_ == head_) {
    T value = tail_->value;
    delete tail_;
    tail_ = nullptr;
    head_ = nullptr;
    --size_;
    return {Success, value};
  }

  T value = head_->value;
  head_ = head_->next_node;
  delete head_->previous_node;

  return {Success, value};
}

template<typename T>
void Queue<T>::DeleteQueue() {
  while (head_) {
    Node* tmp = head_;
    head_ = head_->next_node;
    delete tmp;
  }
  tail_ = nullptr;
  size_ = 0;
}


template <typename T>
BinHeap<T>::BinHeap() {
  head_ = nullptr;
  size_ = 0;
}

template <typename T>
BinHeap<T>::~BinHeap() {
  while (!leafs_.Empty()) {
    Node* leaf = leafs_.Pop().second;
    delete leaf;
  }
}

template <typename T>
void BinHeap<T>::ExtractMin() {
  if (size_ == 1) {
    delete head_;
    size_ = 0;
    head_ = nullptr;
  } else {
    Node* leaf = leafs_.Pop().second;
    head_->value = leaf->value;

    Node* parent = leaf->parent;

    if (parent->left_child == leaf) {
      parent->left_child = nullptr;
      delete leaf;
    } else {
      parent->right_child = nullptr;
      delete leaf;
    }

    head_->SiftDown();
  }
}

template <typename T>
void BinHeap<T>::DecreaseKey(void *target, T delta) {
  Node* target_node = (Node*)target;
  target_node->value -= delta;
  target_node->SiftUp();
}

template <typename T>
std::pair<HeapCodes, T> BinHeap<T>::GetMin()
{
  if (head_ == nullptr) {
    return {EmptyHeap, T()};
  } else {
    return {Successfuly, head_->value};
  }
}

template <typename T>
void* BinHeap<T>::Insert(T value)
{
  ++size_;

  if (head_ == nullptr) {
    head_ = new Node{value, nullptr, nullptr, nullptr };
    leafs_.Push(head_);

    return (void*)head_;
  }

  Node* leaf = leafs_.GetTail().second;

  if (leaf->left_child == nullptr) {
    leaf->left_child = new Node{value, leaf, nullptr, nullptr };
    leafs_.Push(leaf->left_child);

    leafs_.Pop();

    leaf->left_child->SiftUp();

    return (void*)leaf->left_child;
  }

  leaf->right_child = new Node{value, leaf, nullptr, nullptr };
  leafs_.Push(leaf->right_child);

  leafs_.Pop();

  leaf->right_child->SiftUp();

  return (void*)leaf->right_child;
}

template <typename T>
void BinHeap<T>::Node::SiftUp() {
  if (parent != nullptr && parent->value > value) {
    T temporary_value = value;
    value = parent->value;
    parent->value = temporary_value;

    parent->SiftUp();
  }
}

template <typename T>
void BinHeap<T>::Node::SiftDown() {
  if (left_child != nullptr && right_child != nullptr) {
    Node* min_neighbour = (left_child->value <= right_child->value) ? left_child:right_child;

    if (min_neighbour->value < value) {
      T temporary_value = value;
      value = min_neighbour->value;
      min_neighbour->value = temporary_value;

      min_neighbour->SiftDown();
    }
  } else if ((left_child == nullptr) != (right_child == nullptr)) {
    Node* min_neighbour = (left_child != nullptr) ? left_child:right_child;

    if (min_neighbour->value < value) {
      T temporary_value = value;
      value = min_neighbour->value;
      min_neighbour->value = temporary_value;

      min_neighbour->SiftDown();
    }
  }
}"
fdagdC3y,مسائلة قحبة,ABDELRHMAN_SAEED007,C++,Tuesday 21st of October 2025 02:56:29 PM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ld long double
#define F first
#define S second
#define Lnode 2*node+1
#define Rnode 2*node+2
#define MID (l+r>>1)
#define el '\n'
#define coutf(x) for(auto v:(x)) cout<<v<<' '; cout<<el
#define coutp(x) for(auto v:(x)) cout<<v.F<<' '<<v.S<<el
#define cinl(x) for(auto &v:(x)) cin>>v;
#define all(x)  x.begin(),x.end()
#define ll long long
#define sz(x)  (int)x.size()
#define pi pair<ll,ll>
#define pii pair<ll,pair<ll,ll>>
#define vi vector<ll>
using ull = unsigned long long;

vector<ll>lcp(string& s)
{
    vector<ll>phi(s.size()+1,0);

    int n=s.size();
    for (int i=1,k=0;i<n;i++)
    {
        k=phi[i-1];
        while (k>0&&s[i]!=s[k])k=phi[k-1];
        if (s[i]==s[k])k++;
        phi[i]=k;
    }
    return phi;
}

vector<int> z_function(string s) {
    int n=s.size();
    vector<int> z(n);
    int l = 0, r = 0;
    for(int i = 1; i < n; i++) {
        if(i < r) {
            z[i] = min(r - i, z[i - l]);
        }
        while(i + z[i] < n && s[z[i]] == s[i + z[i]]) {
            z[i]++;
        }
        if(i+z[i]>r) {
            l=i;
            r=i+z[i];
        }
    }
    return z;
}
void solve()
{string a,b;
    getline(cin,a);
    getline(cin,b);
    if (a.size()!=b.size())
    {
        cout<<-1<<"" ""<<-1<<""\n"";
        return;
    }
    string s=a;
    reverse(all(s));
    s+=""#""+b;
    auto lastj=lcp(s);
    string s2=b+""#""+a;
    auto z=z_function(s2);
    // for (auto it:lastj)cout<<it<<"" "";
    // cout<<""\n"";
    // for (auto it:s)cout<<it<<"" "";
    // cout<<""\n----\n"";
    // for (auto it:z)cout<<it<<"" "";
    // cout<<""\n"";
    // for (auto it:s2)cout<<it<<"" "";
    int sz=a.size();
    int n=s.size();
    int st=-1,en=-1;
    for (int i=0;i<sz-1;i++)
    {

        ll p=lastj[2*sz-i-1];

        if (p&&z[sz+i+2]>=sz-i-p-1)st=i,en=sz-p;
    }
    cout<<st<<"" ""<<en<<'\n';







}
int32_t main() {
#ifndef ONLINE_JUDGE
    freopen(""in.txt"", ""r"", stdin);
    freopen(""out.txt"", ""w"", stdout);
#endif

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int tc=1;
    //cin>>tc;
    for (int i=1;i<=tc;i++){solve();}
    return 0;
}"
YQUWPgKQ,Untitled,MohSD,C,Tuesday 21st of October 2025 02:29:16 PM CDT,"#include <stdio.h>

int main(void)
{
    int i, j, n;

    for (i = 0; i < 11; i++) {
        for (j = 0; j < 10; j++) {
            n = 10 * i + j;
            if (n > 108) break;
            printf(""\033[%dm %3d\033[m"", n, n);
        }
        printf(""\n"");
    }
    return 0;
}
"
iH53u8wY,Untitled,MohSD,PowerShell,Tuesday 21st of October 2025 02:26:58 PM CDT,"<#
.SYNOPSIS
Show current directory details

.EXAMPLE
direc -List
.EXAMPLE
direc -GetTextsContent

.NOTES
Alias: direc
#>

[CmdletBinding()]
param (
  # Print children directories status (empty|full)
  [Parameter(ParameterSetName = ""List"", Position = 0)]
  [switch] $List,
  # Print children textfiles content
  [Parameter(ParameterSetName = ""GetTextsContent"", Position = 0)]
  [switch] $GetTextsContent
) 

. $SCRIPTSRC

try {
  switch ($true) {
    $List { 
      $dirs = @(Get-ChildItem -Directory) 
      if (!$dirs) {
        Write-Host ""❌ No directories"" 
        break;
      }

      $full = @{} 
      $empty = @() 
      foreach ($dir in $dirs) {
        Set-Location $dir 
        $size = @(Get-ChildItem).Count 

        if ($size -gt 0) {
          $full[""+ $($dir.Name)""] = ""$size $($size -eq 1 ? ""File."" : ""Files."")"" 
        }
        else {
          $empty += ""- $($dir.Name)"" 
        }
        Set-Location .. 
      }

      $total = $dirs.Count 
      $fCount = $full.Count 
      $eCount = $empty.Count 
      if ($fCount -lt 1) {
        Write-Host ""ℹ️ The $total directories here are empty"" 
        break 
      }

      Write-Host $($fCount -eq 1 ? ""ℹ️ 1 full directory"" : ""ℹ️ Full directories: $fCount/$total"") 
      foreach ($dir in $full.Keys) {
        Write-Host $dir -ForegroundColor Green 
        Write-Host ""$($full[$dir])"" 
      }
      Write-Host `r 

      if ($eCount -gt 0) {
        Write-Host $($eCount -eq 1 ? ""ℹ️ 1 empty directory"" : ""ℹ️ Empty directories: $eCount/$total"") 
        foreach ($dir in $empty) {
          Write-Host $dir -ForegroundColor Red 
        }
        Write-Host ""`n"" 
      }
      break 
    }
    $GetTextsContent { 
      $files = @(Get-ChildItem -File) 
      if (!$files) {
        Write-Host ""❌ No files""
        break;
      }

      Write-Host ""`n"" 
      foreach ($file in $files) {
        Write-Host ""$($file.Name) :"" -ForegroundColor Green 
        Get-Content $file 
        Write-Host ""`n"" 
      } 
      break 
    }
  }
} catch {
  errorLog
}

"
W4Bty0UH,Life at Riverside Heights : โคดกระทู้สมัคร #3,Kelly-B9978,HTML,Tuesday 21st of October 2025 01:27:47 PM CDT,"<link href=""https://savant777.github.io/zoecode/apartment/apartment.css"" rel=""stylesheet"">
<div id=""Apartment""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""apt-thread"" class=""apt-box"">
<div class=""apt-header""><div>Life at Riverside Heights</div><div><i class=""fa-solid fa-gear""></i></div></div>
<div class=""apt-tabs""><div><i class=""fa-solid fa-bars""></i>|<div>Post Templates</div></div>
<div><i class=""fa-solid fa-bag-shopping fa-sm""></i><i class=""fa-solid fa-user fa-sm""></i><i class=""fa-solid fa-heart fa-sm""></i><i class=""fa-solid fa-circle-xmark fa-sm""></i></div></div>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-bookmark""></i> โคดสมัครกิจกรรม [url=https://pastebin.com/FkMDVEzr]คลิก[/url]</div>
<div class=""apt-content"">[b]ข้อมูลที่ต้องเตรียม[/b]
[list]
[*]ชื่อตัวละคร (ภาษาไทย/ภาษาอังกฤษ) หากมีชื่อกลางให้ย่อเหลือตัวแรกตามด้วยจุด จากนั้นเขียนเพิ่มเติมใน TMI ได้
[*]ชื่อเฟซเคลมที่ใช้พร้อมรูปภาพ
[*]เพศ
[*]ส่วนสูง
[*]วันเกิดและอายุ (20 ปีขึ้นไป)
[*]อาชีพ (สามารถเลือกทำงานร้านต่าง ๆ ที่มีในกระทู้ได้)
[*]ชั้นที่พักอาศัย (2nd/3rd/4th Floor) และห้องพัก (Room X01 - X18)
[*]สีที่ชอบ 1 สี รูปแบบ #hex code (สำหรับใช้ในระบบบอทใน Discord)
[*]ลักษณะทางกายภาพ
[*]ลักษณะนิสัย
[*]ภูมิหลัง (ภูมิหลังสั้น ๆ ก่อนมาอยู่ที่ Riverside Heights ไม่เกิน 150 คำ)
[*]เหตุผลที่ย้ายมา
[*]รสนิยมและไลฟ์สไตล์
[*]ความสัมพันธ์กับผู้อื่น (หากผู้เล่นโคประวัติร่วมกันมา เช่น ตัวละครเป็นคู่รักหรือเป็นเพื่อนกันอยู่แล้ว ให้ระบุระดับความสัมพันธ์เบื้องต้นไว้ด้วย เช่น คู่รัก 50/100, เพื่อน 20/100)
[*]TMI ข้อมูลเพิ่มเติมของตัวละคร มีก็ได้ไม่มีก็ได้
[/list]
<div style=""max-width: 500px;margin: auto;"">[img]https://iili.io/KSZfzDF.png[/img]</div>
</div></section>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-bookmark""></i> โคดโรลเพลย์ [url=https://pastebin.com/sC8RU0P4]คลิก[/url]</div>
<div class=""apt-content"">
<p>ผู้เข้าร่วมกิจกรรมที่มี[b]โรลเพลย์ครบ 50 โรลเพลย์[/b] สามารถนำโคดโรลเพลย์ไปใช้ได้</p>
<div style=""max-width: 500px;margin: auto;"">[img]https://iili.io/KSZcNDu.png[/img]</div>
</div></section>
</div></div>"
rgTKdxGb,Life at Riverside Heights : โคดกระทู้สมัคร #2,Kelly-B9978,HTML,Tuesday 21st of October 2025 01:19:01 PM CDT,"<link href=""https://savant777.github.io/zoecode/apartment/apartment.css"" rel=""stylesheet"">
<div id=""Apartment""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""apt-thread"" class=""apt-box"">
<div class=""apt-header""><div>Life at Riverside Heights</div><div><i class=""fa-solid fa-gear""></i></div></div>
<div class=""apt-tabs""><div><i class=""fa-solid fa-bars""></i>|<div>System Overview</div></div>
<div><i class=""fa-solid fa-bag-shopping fa-sm""></i><i class=""fa-solid fa-user fa-sm""></i><i class=""fa-solid fa-heart fa-sm""></i><i class=""fa-solid fa-circle-xmark fa-sm""></i></div></div>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-hourglass-end""></i> Time Setting</div>
<div class=""apt-content"">
<p>ในส่วนของ NPC และ EVENT ในกิจกรรมนี้อิงกับเวลาจริงเป็นพื้นฐาน แต่หากต้องการโรลย้อนเวลาในรูทส่วนตัว ให้ระบุวันเวลาให้ชัดเจนซึ่งจะถือว่าเป็นรูทปิด และหากมีผู้เล่นอื่นอยากเข้าร่วมควรแจ้งและขออนุญาตจากเจ้าของรูทก่อน เพื่อความสุภาพและไม่รบกวนการโรลเพลย์ของผู้อื่น</p>
</div></section>
</div></div>"
A8nTi7K3,Life at Riverside Heights : โคดกระทู้สมัคร #1,Kelly-B9978,HTML,Tuesday 21st of October 2025 01:17:07 PM CDT,"<link href=""https://savant777.github.io/zoecode/apartment/apartment.css"" rel=""stylesheet"">
<div id=""Apartment""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""apt-thread"" class=""apt-box"">
<div class=""apt-header""><div>Life at Riverside Heights</div><div><i class=""fa-solid fa-gear""></i></div></div>
<div class=""apt-tabs""><div><i class=""fa-solid fa-bars""></i>|<div>About Life at Riverside Heights</div></div>
<div><i class=""fa-solid fa-bag-shopping fa-sm""></i><i class=""fa-solid fa-user fa-sm""></i><i class=""fa-solid fa-heart fa-sm""></i><i class=""fa-solid fa-circle-xmark fa-sm""></i></div></div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/Kv1IfqJ.png);""></div>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-compass""></i> Main Concept</div>
<div class=""apt-content"">
<p>กิจกรรมโรลเพลย์แนว [b]Slice of Life[/b] ที่โฟกัสไปที่ชีวิตประจำวัน ความสัมพันธ์ และเรื่องราวเล็ก ๆ ที่เกิดขึ้นภายในอพาร์ตเมนต์ใหญ่ในเมือง Portland, Oregon</p>
<p>ผู้เล่นจะรับบทเป็น[b]ผู้พักอาศัยในตึก[/b] โดยตัวละครต้องมี[b]อายุอย่างน้อย 20 ปีขึ้นไป[/b] เพื่อสะท้อนความเป็นผู้ใหญ่ที่กำลังสร้างชีวิตของตัวเองในเมืองใหญ่ อาชีพของตัวละครสามารถหลากหลายได้ ตั้งแต่พนักงานบริษัท ศิลปิน บาริสตา ครู ช่างภาพ เชฟ ไปจนถึงนักศึกษาปีสุดท้ายที่กำลังเตรียมก้าวเข้าสู่โลกการทำงาน</p>
<p>[b]Riverside Heights[/b] คืออพาร์ตเมนต์ขนาด 4 ชั้น ที่ตั้งอยู่ริมแม่น้ำ เดิมทีที่นี่เคยเป็นตึกเก่าที่ปิดไปหลายปี แต่เพิ่งผ่านการเรโนเวตครั้งใหญ่ให้กลับมามีชีวิตอีกครั้ง ทุกอย่างถูกปรับปรุงใหม่ ตั้งแต่ล็อบบี ครัวรวม ห้องสันทนาการ ไปจนถึงดาดฟ้าที่สามารถชมวิวแม่น้ำได้ชัดเจน</p>
<p>บรรยากาศภายในตึกจึงเต็มไปด้วยความสดใหม่ เหมือนพื้นที่ที่เพิ่งเริ่มต้นรอให้ผู้คนเข้ามาสร้างเรื่องราวร่วมกัน ผู้อยู่อาศัยที่เพิ่งย้ายเข้ามาต่างเป็นคนวัยทำงานหรือกำลังเริ่มสร้างชีวิตของตัวเองในเมืองใหญ่ ทำให้อพาร์ตเมนต์นี้ไม่ต่างจากเมืองเล็ก ๆ ที่เต็มไปด้วยความหลากหลายของบุคลิก ไลฟ์สไตล์ และความสัมพันธ์ที่ค่อย ๆ ก่อตัวขึ้นในทุกชั้น ทุกห้อง และทุกมุมตึก</p>
</div></section>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-mug-saucer""></i> Setting</div>
<div class=""apt-content"">
<p>[b]เมืองพอร์ตแลนด์ รัฐโอเรกอน[/b] มีขนาดกลาง อยู่ทางภาคตะวันตกเฉียงเหนือของสหรัฐฯ มีความผสมผสานระหว่างความเป็นเมืองศิลปะ คาเฟ่ ร้านอาหารท้องถิ่น และสวนสาธารณะเขียวชอุ่ม เป็นเมืองที่คนท้องถิ่นคุ้นเคยกันง่าย มีความเป็นกันเองและเน้นการใช้ชีวิตแบบ Slow Life ผสมกับความคึกคักของกิจกรรมชุมชน</p>
[b]จุดเด่น[/b]
[list]
[*]ขึ้นชื่อเรื่องกาแฟและวัฒนธรรมคาเฟ่
[*]ตลาดนัดสุดสัปดาห์ริมแม่น้ำ Willamette
[*]ชุมชนศิลปินและงานแสดงดนตรีอินดี้
[*]ระบบขนส่งสาธารณะที่เข้าถึงง่าย ปั่นจักรยานได้ทั่วเมือง
[*]สภาพอากาศมีฝนโปรยบ่อย ๆ ทำให้บรรยากาศโรแมนติกและอบอุ่น
[/list]
[b]สิ่งที่ผู้เล่นสามารถทำได้[/b]
[list]
[*]ออกไปใช้ชีวิตในเมือง: ทำงาน, เรียน, ทำกิจกรรม, เข้าร่วมงานชุมชน
[*]โต้ตอบกับเพื่อนบ้าน: ทั้งผู้เล่นคนอื่นและ NPC ที่อยู่ในตึก
[*]ใช้พื้นที่ส่วนกลาง: ทำอาหารในครัวรวม, เล่นพูลในห้องสันทนาการ, จัดมินิปาร์ตี้บนดาดฟ้า
[*]เผชิญเหตุการณ์ประจำสัปดาห์: ไฟดับ, ฝนตกหนัก, งานเลี้ยง, ตลาดนัด, ปัญหาที่ต้องช่วยกันแก้
[/list]
[b]โทนและบรรยากาศ[/b]
[list]
[*]เน้นความอบอุ่น เป็นกันเอง และความสัมพันธ์ระหว่างคน
[*]มีทั้งช่วงเวลาชิล ๆ กับเหตุการณ์เล็ก ๆ ที่สร้างสีสัน
[*]เปิดโอกาสให้ผู้เล่นพัฒนาเนื้อเรื่องส่วนตัว และเชื่อมโยงเข้ากับเรื่องราวรวมของตึก
[/list]
</div></section>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-trophy""></i> Rewards</div>
<div class=""apt-content"">
[align=center]<div class=""apt-item-pf""></div>
[b]Memory Lens[/b] เหรียญตรากิจกรรม มูลค่า $100

<div class=""apt-item-prop""></div>
[b]Vinyl Reverie[/b] สมบัติล้ำค่า มูลค่า $800[/align]

<div class=""apt-reward-grid"">
<div class=""apt-th"">เงื่อนไข</div><div class=""apt-th"">ดอลลาร์</div><div class=""apt-th"">คริสตัล</div><div class=""apt-th"">เหรียญตรา</div><div class=""apt-th"">สมบัติล้ำค่า</div>
<div class=""apt-tdf""><div>ผู้เข้าร่วมกิจกรรมที่มี[b]โรลเพลย์ครบ 100 โรลเพลย์[/b]ขึ้นไป</div></div><div class=""apt-td"">$150</div><div class=""apt-td"">1</div><div class=""apt-td"">แลกซื้อ</div><div class=""apt-td"">แลกซื้อ</div>
<div class=""apt-tdf""><div>ผู้เข้าร่วมกิจกรรมที่มี[b]โรลเพลย์ครบ 50 โรลเพลย์[/b]ขึ้นไป [b][color=red]*[/color][/b]</div></div><div class=""apt-td"">$100</div><div class=""apt-td"">-</div><div class=""apt-td"">แลกซื้อ</div><div class=""apt-td"">-</div>
</div>
<p>[b][color=red]* ผู้เข้าร่วมกิจกรรมที่มีโรลเพลย์ครบ 50 โรลเพลย์ สามารถนำโคดโรลเพลย์ไปใช้ได้[/color][/b]
[b][u]หมายเหตุ[/u][/b] เงินรางวัลและคริสตัลคะแนนอาจมีการเปลี่ยนแปลงในภายหลัง</p>
</div></section>
<section class=""apt-section""><div class=""apt-topic""><i class=""fa-solid fa-clock""></i> Duration</div>
<div class=""apt-content"">
[align=center][b]ระยะเวลารับสมัคร[/b]
31 ตุลาคม - 4 พฤศจิกายน 2025
[b]ระยะเวลากิจกรรม[/b]
31 ตุลาคม - 30 พฤศจิกายน 2025[/align]
</div></section>
</div></div>"
A1FyvhJ8,Kotk ATC xml,MustDy,XML,Tuesday 21st of October 2025 12:14:31 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<!-- ***************************************************************************************************** -->
<ATCConfig>
	<MapFaction id=""vlandia"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""sturgia"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""khuzait"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""battania"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""aserai"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""empire"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""empire_w"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""empire_s"">
		<Culture id=""default"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""player_faction"">
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""25""/>
			</basicTroops>
			<basicTroops>
				<volunteer id=""t2_bimbo_recruit""
				           percent=""25""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
	<MapFaction id=""player_clan"">
		<Culture id=""battania"">
			<basicTroops>
				<volunteer id=""t2_battanian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_battanian_ogler""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""vlandia"">
			<basicTroops>
				<volunteer id=""t2_vlandia_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_vlandian_levy_crossbowoman""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""sturgia"">
			<basicTroops>
				<volunteer id=""t2_sturgian_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_sturgian_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""khuzait"">
			<basicTroops>
				<volunteer id=""t2_khuzait_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_khuzait_tribal_warrior""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""aserai"">
			<basicTroops>
				<volunteer id=""t2_aserai_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_aserai_mammaryluke_soldier""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_w"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
		<Culture id=""empire_s"">
			<basicTroops>
				<volunteer id=""t2_imperial_recruit""
				           percent=""50""/>
			</basicTroops>
			<eliteTroops>
				<volunteer id=""t2_noble_imperial_recruit""
				           percent=""50""/>
			</eliteTroops>
		</Culture>
	</MapFaction>
</ATCConfig>"
RW7JT3qS,Untitled,EightEFI,YAML,Tuesday 21st of October 2025 12:00:29 PM CDT,"tekstitv_401:
  sensor:
    - platform: rest
      name: tekstitv_401_p1a
      resource: https://yle.fi/tekstitv/txt/401_0001.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', s if s!=-1 else 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e] or s!=-1 and t[s:] or '' %}
        {{ picked[:200] | trim }}

    - platform: rest
      name: tekstitv_401_p1b
      resource: https://yle.fi/tekstitv/txt/401_0001.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', s if s!=-1 else 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e] or s!=-1 and t[s:] or '' %}
        {{ picked[200:400] | trim }}

    - platform: rest
      name: tekstitv_401_p1c
      resource: https://yle.fi/tekstitv/txt/401_0001.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', s if s!=-1 else 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e] or s!=-1 and t[s:] or '' %}
        {{ picked[400:600] | trim }}

    - platform: rest
      name: tekstitv_401_p2a
      resource: https://yle.fi/tekstitv/txt/401_0002.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e]
                        or s!=-1 and t[s:]
                        or e!=-1 and t[:e]
                        or '' %}
        {{ picked[:200] | trim }}

    - platform: rest
      name: tekstitv_401_p2b
      resource: https://yle.fi/tekstitv/txt/401_0002.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e]
                        or s!=-1 and t[s:]
                        or e!=-1 and t[:e]
                        or '' %}
        {{ picked[200:400] | trim }}

    - platform: rest
      name: tekstitv_401_p2c
      resource: https://yle.fi/tekstitv/txt/401_0002.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e]
                        or s!=-1 and t[s:]
                        or e!=-1 and t[:e]
                        or '' %}
        {{ picked[400:600] | trim }}

    - platform: rest
      name: tekstitv_401_p3a
      resource: https://yle.fi/tekstitv/txt/401_0003.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e]
                        or e!=-1 and t[:e]
                        or '' %}
        {{ picked[:200] | trim }}

    - platform: rest
      name: tekstitv_401_p3b
      resource: https://yle.fi/tekstitv/txt/401_0003.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e]
                        or e!=-1 and t[:e]
                        or '' %}
        {{ picked[200:400] | trim }}

    - platform: rest
      name: tekstitv_401_p3c
      resource: https://yle.fi/tekstitv/txt/401_0003.htm
      headers:
        User-Agent: ""Mozilla/5.0""
        Accept-Language: ""fi-FI, fi;q=0.9""
      timeout: 20
      scan_interval: 900
      value_template: >-
        {% set raw = value | default('', true) %}
        {% set pre = raw | regex_findall_index('(?is)<pre[^>]*>(.*?)</pre>', 0) | default('', true) %}
        {% set t = pre
          | regex_replace('-\\s*\\n', '')
          | regex_replace('&nbsp;', ' ')
          | regex_replace('&auml;', 'ä') | regex_replace('&Auml;', 'Ä')
          | regex_replace('&ouml;', 'ö') | regex_replace('&Ouml;', 'Ö')
          | regex_replace('&aring;', 'å') | regex_replace('&Aring;', 'Å')
          | regex_replace('&amp;', '&')
          | regex_replace('\\r', '')
          | regex_replace('[ \\t]+', ' ')
          | regex_replace('\\n\\s*\\n', '\n')
          | trim %}
        {% set low = t | lower %}
        {% set starts = [
          'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
          'lapissa:', 'lapissa',
          'meri-lapissa:', 'meri-lapissa',
          'merilapissa:', 'merilapissa',
          'pohjoisessa:', 'pohjoisessa',
          'maan pohjoisosassa:', 'maan pohjoisosassa'
        ] %}
        {% set s = -1 %}
        {% for k in starts %}
          {% set i = low.find(k) %}
          {% if i != -1 and (s == -1 or i < s) %}
            {% set s = i %}
          {% endif %}
        {% endfor %}
        {% set e = low.find('liikennesää', 0) %}
        {% set picked = s!=-1 and e!=-1 and e>s and t[s:e]
                        or e!=-1 and t[:e]
                        or '' %}
        {{ picked[400:600] | trim }}

  template:
    - sensor:
        - name: saa_pohjoisosat_tekstitv_osa1
          state: >-
            {% set parts = [
              states('sensor.tekstitv_401_p1a'), states('sensor.tekstitv_401_p1b'), states('sensor.tekstitv_401_p1c'),
              states('sensor.tekstitv_401_p2a'), states('sensor.tekstitv_401_p2b'), states('sensor.tekstitv_401_p2c'),
              states('sensor.tekstitv_401_p3a'), states('sensor.tekstitv_401_p3b'), states('sensor.tekstitv_401_p3c')
            ] %}
            {% set cleaned = parts | reject('in', ['unknown','unavailable','ei tilaa','']) | list %}
            {% set raw = cleaned | join('') %}
            {% if not raw %} ei saatavilla {% else %}
              {% set t = raw
                 | regex_replace('(?i)\\b\\d+/\\d+\\b', '')
                 | regex_replace('(?i)ilmatieteen\\s+laitos\\s+\\d{1,2}\\.\\d{1,2}\\.?', '')
                 | regex_replace('(?i)säätiedotus\\s+klo\\s*\\d{1,2}', '')
              %}
              {% set low = t | lower %}
              {% set e = low.find('liikennesää') %}
              {% set upto = (t[:e] if e != -1 else t) %}
              {% set low2 = upto | lower %}
              {% set starts = [
                'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
                'lapissa:', 'lapissa',
                'meri-lapissa:', 'meri-lapissa', 'merilapissa:', 'merilapissa',
                'pohjoisessa:', 'pohjoisessa',
                'maan pohjoisosassa:', 'maan pohjoisosassa'
              ] %}
              {% set s = -1 %}
              {% for k in starts %}
                {% set i = low2.find(k) %}
                {% if i != -1 and (s == -1 or i < s) %}{% set s = i %}{% endif %}
              {% endfor %}
              {% set text = (upto[s:] if s != -1 else upto)
                 | regex_replace('\\s+',' ')
                 | trim %}
              {% set p1 = text[:200] | trim %}
              {% set p2 = text[200:400] | trim %}
              {{ p1 ~ (' (jatkuu...)' if p2 else '') if p1 else 'ei saatavilla' }}
            {% endif %}

        - name: saa_pohjoisosat_tekstitv_osa2
          state: >-
            {% set parts = [
              states('sensor.tekstitv_401_p1a'), states('sensor.tekstitv_401_p1b'), states('sensor.tekstitv_401_p1c'),
              states('sensor.tekstitv_401_p2a'), states('sensor.tekstitv_401_p2b'), states('sensor.tekstitv_401_p2c'),
              states('sensor.tekstitv_401_p3a'), states('sensor.tekstitv_401_p3b'), states('sensor.tekstitv_401_p3c')
            ] %}
            {% set cleaned = parts | reject('in', ['unknown','unavailable','ei tilaa','']) | list %}
            {% set raw = cleaned | join('') %}
            {% if not raw %} '' {% else %}
              {% set t = raw
                 | regex_replace('(?i)\\b\\d+/\\d+\\b', '')
                 | regex_replace('(?i)ilmatieteen\\s+laitos\\s+\\d{1,2}\\.\\d{1,2}\\.?', '')
                 | regex_replace('(?i)säätiedotus\\s+klo\\s*\\d{1,2}', '')
              %}
              {% set low = t | lower %}
              {% set e = low.find('liikennesää') %}
              {% set upto = (t[:e] if e != -1 else t) %}
              {% set low2 = upto | lower %}
              {% set starts = [
                'koillismaalla ja lapissa:', 'koillismaalla sekä lapissa:',
                'lapissa:', 'lapissa',
                'meri-lapissa:', 'meri-lapissa', 'merilapissa:', 'merilapissa',
                'pohjoisessa:', 'pohjoisessa',
                'maan pohjoisosassa:', 'maan pohjoisosassa'
              ] %}
              {% set s = -1 %}
              {% for k in starts %}
                {% set i = low2.find(k) %}
                {% if i != -1 and (s == -1 or i < s) %}{% set s = i %}{% endif %}
              {% endfor %}
              {% set text = (upto[s:] if s != -1 else upto)
                 | regex_replace('\\s+',' ')
                 | trim %}
              {% if text | length <= 200 %} '' {% else %} {{ text[200:400] | trim }} {% endif %}
            {% endif %}
"
nBU7gJq5,Electricity price and wind power,-Teme-,YAML,Tuesday 21st of October 2025 11:31:32 AM CDT,"type: custom:apexcharts-card
header:
  show: true
  title: Electricity price and wind power
  show_states: true
  colorize_states: true
  standard_format: true
  disable_actions: true
graph_span: 96h
update_interval: 15min
experimental:
  color_threshold: true
apex_config:
  chart:
    height: 360
    toolbar:
      show: true
  grid:
    strokeDashArray: 3
    xaxis:
      lines:
        show: false
  legend:
    show: false
  xaxis:
    tickAmount: 6
    labels:
      style:
        fontWeight: 100
        fontSize: 12px
      format: ddd H:mm
    tooltip:
      enabled: true
  tooltip:
    x:
      format: HH. mm
span:
  start: hour
  offset: ""-24h""
now:
  show: true
  label: Now
series:
  - entity: sensor.nordpool_predict_fi_windpower
    name: Tuulivoima
    type: area
    yaxis_id: wind
    float_precision: 0
    opacity: 0.2
    extend_to: now
    stroke_width: 0.2
    curve: stepline
    data_generator: |
      const data = entity.attributes.windpower_forecast || [];
      return data.map((item) => [item.timestamp, item.value / 1000]);
    color: skyblue
    color_threshold:
      - value: 0
        color: darkblue
      - value: 3
        color: dodgerblue
      - value: 5
        color: skyblue
    show:
      in_chart: true
      in_header: false
      in_legend: true
      legend_value: false
  - entity: sensor.powersaver
    data_generator: |
      return entity.attributes.minutes.map((entry) => {
        return [new Date(entry.start), entry.onOff];
      });
    yaxis_id: powersaver
    name: Boiler schedule
    type: area
    color: goldenrod
    opacity: 0.3
    stroke_width: 0
    curve: stepline
    show:
      legend_value: false
      in_header: false
      name_in_header: false
      datalabels: false
    extend_to: false
  - entity: sensor.nordpool
    name: current price ¢/kWh
    yaxis_id: price
    type: area
    extend_to: now
    float_precision: 3
    stroke_width: 0.2
    opacity: 0.6
    fill_raw: ""null""
    unit: ¢/kWh
    show:
      in_header: true
      legend_value: false
      extremas: false
      header_color_threshold: true
    color: ""#aaaaaa""
    color_threshold:
      - value: -10
        color: dodgerblue
      - value: 0
        color: darkgreen
      - value: 5
        color: green
      - value: 10
        color: orange
      - value: 15
        color: red
      - value: 20
        color: darkred
      - value: 50
        color: black
  - entity: sensor.nordpool
    name: coming prices ¢/kWh
    yaxis_id: price
    type: area
    float_precision: 3
    stroke_width: 0.2
    opacity: 0.4
    fill_raw: ""null""
    unit: ¢/kWh
    show:
      in_header: false
      legend_value: false
      extremas: false
    data_generator: >
      const now = new Date();

      const output =
      entity.attributes.raw_today.concat(entity.attributes.raw_tomorrow);

      return output
        .filter((entry) => new Date(entry.start) >= now)
        .map((entry) => [new Date(entry.start), entry.value]);
    color: ""#aaaaaa""
    color_threshold:
      - value: -10
        color: dodgerblue
      - value: 0
        color: darkgreen
      - value: 5
        color: green
      - value: 10
        color: orange
      - value: 15
        color: red
      - value: 20
        color: darkred
      - value: 30
        color: black
    extend_to: false
  - entity: sensor.nordpool_predict_fi_price
    type: area
    yaxis_id: price
    extend_to: now
    curve: stepline
    stroke_width: 0
    float_precision: 1
    color: limegreen
    opacity: 0.16
    data_generator: |
      const fs = entity.attributes.forecast_start;
      const forecastStartTime = fs ? Date.parse(fs) - 3600000 : null;  // -1h
      const data = entity.attributes.forecast || [];

      if (!forecastStartTime) return [];

      return data
        .filter((item) => Date.parse(item.timestamp) >= forecastStartTime)
        .map((item) => [item.timestamp, item.value]);
    show:
      in_chart: true
      in_header: false
      in_legend: false
      legend_value: false
  - entity: sensor.nordpool_predict_fi_price
    name: Pediction
    type: line
    yaxis_id: price
    curve: straight
    stroke_width: 2
    stroke_dash: 3
    color: red
    opacity: 1
    extend_to: false
    data_generator: >
      const fs =
      hass.states['sensor.nordpool_predict_fi_price']?.attributes?.forecast_start;

      const x = fs ? Date.parse(fs) - 3600000 : NaN;  // -1h

      if (!Number.isFinite(x)) return [];

      const data = entity.attributes.forecast || [];

      let min = Infinity, max = -Infinity;

      for (const i of data) {
        const v = Number(i.value);
        if (Number.isFinite(v)) { if (v < min) min = v; if (v > max) max = v; }
      }

      if (!Number.isFinite(min) || !Number.isFinite(max)) { min = 0; max = 1; }

      return [[x, min], [x, max], [x + 1, null]];
    show:
      in_chart: true
      in_header: false
      in_legend: false
      legend_value: false
  - entity: sensor.nordpool_predict_fi_windpower_now
    name: Wind power
    float_precision: 0
    color: skyblue
    show:
      in_chart: false
      in_header: true
      in_legend: true
      legend_value: false
  - entity: sensor.pro3em_total_active_power
    name: Consumption
    unit: W
    show:
      in_chart: false
      in_header: true
      in_legend: true
      legend_value: false
      header_color_threshold: true
    color: ""#aaaaaa""
    color_threshold:
      - value: 0
        color: dodgerblue
        opacity: 0.6
      - value: 1000
        color: dodgerblue
        opacity: 0.8
      - value: 5000
        color: skyblue
        opacity: 0.8
      - value: 10000
        color: red
        opacity: 0.8
      - value: 15000
        color: darkred
        opacity: 0.8
      - value: 30000
        color: black
        opacity: 0.8
yaxis:
  - id: price
    min: ~0
    max: ""|+3|""
    decimals: 2
    apex_config:
      tickAmount: 10
      forceNiceScale: true
      title:
        text: Price (¢/kWh)
      labels:
        formatter: |
          EVAL:v => `¢ ${v.toFixed(2)}`
  - id: wind
    opposite: true
    min: ~0
    max: ""|+1|""
    decimals: 2
    apex_config:
      tickAmount: 10
      forceNiceScale: true
      title:
        text: Windpower (GW)
      labels:
        formatter: |
          EVAL:v => `${v.toFixed(2)} GW`
  - id: consumption
    min: 0
    max: ""|+1|""
    decimals: 2
    opposite: true
    apex_config:
      tickAmount: 10
      forceNiceScale: true
      title:
        text: Consumption (kW)
      labels:
        formatter: |
          EVAL:v => `${v.toFixed(2)} kW`
  - id: powersaver
    show: false
    min: 0
    max: 1
show:
  last_updated: true
"
smJ9NyGe,Electricity_consumption_and_price_history,-Teme-,YAML,Tuesday 21st of October 2025 11:29:14 AM CDT,"type: vertical-stack
cards:
  - type: custom:config-template-card
    entities:
      - input_select.apex_span
    variables:
      span: states['input_select.apex_span'].state
    card:
      type: custom:apexcharts-card
      header:
        title: Electricity consumption and price history
        show: true
        show_states: true
      update_interval: 10min
      graph_span: ${span}
      apex_config:
        grid:
          show: true
        legend:
          show: false
        chart:
          height: 300px
          toolbar:
            show: true
        xaxis:
          axisBorder:
            show: false
          axisTicks:
            show: true
          tooltip:
            enabled: false
          tickPlacement: between
          crosshairs:
            show: true
          labels:
            style:
              fontSize: 11px
              fontWeight: 1400
            offsetX: -1
      experimental:
        color_threshold: true
      yaxis:
        - id: price_chart
          min: ~0
          apex_config:
            tickAmount: 10
            forceNiceScale: true
            title:
              text: Price (¢/kWh)
            labels:
              formatter: |
                EVAL:v => `¢ ${v.toFixed(2)}`
        - id: consumption
          min: 0
          opposite: true
          apex_config:
            tickAmount: 10
            forceNiceScale: true
            title:
              text: Consumption (kW)
            labels:
              formatter: |
                EVAL:v => `${v.toFixed(0)} kW`
      series:
        - entity: sensor.nordpool
          name: Price now
          show:
            in_header: false
          group_by:
            fill: last
          yaxis_id: price_chart
          type: area
          extend_to: now
          float_precision: 3
          stroke_width: 0.2
          opacity: 0.6
          fill_raw: ""null""
          unit: ¢/kWh
          color: gold
          color_threshold:
            - value: -10
              color: dodgerblue
            - value: 0
              color: darkgreen
            - value: 5
              color: green
            - value: 10
              color: orange
            - value: 15
              color: red
            - value: 20
              color: darkred
            - value: 50
              color: black
        - entity: sensor.pro3em_total_active_power
          show:
            in_header: false
          name: Consumption now
          yaxis_id: consumption
          type: line
          stroke_width: 3
          opacity: 0.8
          curve: smooth
          group_by:
            func: median
            duration: 10min
          color: lightgrey
          extend_to: false
      show:
        last_updated: true
      view_layout:
        position: main
      card_mod:
        style: |
          ha-card {
            --ha-card-background: #101010;
            color: var(--primary-color);
          }
  - type: horizontal-stack
    cards:
      - type: entities
        entities:
          - input_select.apex_span
        card_mod:
          style: |
            ha-card {
              --ha-card-background: #101010;
              color: var(--primary-color);
            }
      - type: gauge
        entity: sensor.pro3em_phase_a_active_power
        unit: W
        min: 50
        needle: true
        severity:
          green: 0
          yellow: 2300
          red: 4600
        name: L1 Power
        max: 5750
        card_mod:
          style: |
            ha-card {
              --ha-card-background: #101010;
              color: var(--primary-color);
            }
      - type: gauge
        entity: sensor.pro3em_phase_b_active_power
        unit: W
        min: 50
        needle: true
        severity:
          green: 0
          yellow: 2300
          red: 4600
        name: L2 Power
        max: 5750
        card_mod:
          style: |
            ha-card {
              --ha-card-background: #101010;
              color: var(--primary-color);
            }
      - type: gauge
        entity: sensor.pro3em_phase_c_active_power
        unit: W
        min: 50
        needle: true
        severity:
          green: 0
          yellow: 2300
          red: 4600
        name: L3 Power
        max: 5750
        card_mod:
          style: |
            ha-card {
              --ha-card-background: #101010;
              color: var(--primary-color);
            }
      - type: gauge
        entity: sensor.pro3em_total_active_power
        needle: true
        unit: W
        min: 200
        max: 17250
        severity:
          green: 0
          yellow: 6900
          red: 13800
        name: Power Total
        card_mod:
          style: |
            ha-card {
              --ha-card-background: #101010;
              color: var(--primary-color);
            }
"
5wXLaKBF,zed_keymap.json @ doganarif,bal_gennady,JSON,Tuesday 21st of October 2025 11:19:12 AM CDT,"[
  {
    ""context"": ""Editor"",
    ""bindings"": {
      ""ctrl-s"": ""workspace::Save""
    }
  },
  {
    ""context"": ""VimControl && !VimWaiting && !menu"",
    ""bindings"": {
      "", w"": ""workspace::Save"",
      "", q"": ""pane::CloseActiveItem"",
      "", e"": ""project_panel::ToggleFocus"",
      "", v s"": ""pane::SplitRight"",
      "", s s"": ""pane::SplitDown"",
      ""escape"": ""editor::Cancel""
    }
  }
]"
Eg7GEhJd,zed_settings.json @doganarif,bal_gennady,JSON,Tuesday 21st of October 2025 11:14:04 AM CDT,"
{
  ""icon_theme"": ""Material Icon Theme"",
  ""assistant"": {
    ""always_allow_tool_actions"": true,
    ""default_model"": {
      ""provider"": ""anthropic"",
      ""model"": ""claude-opus-4-1-latest""
    },
    ""version"": ""2""
  },
  ""tab_bar"": {
    ""show"": false
  },
  ""language_models"": {
    ""anthropic"": {
      ""api_key"": """"
    }
  },
  ""theme"": ""Catppuccin Espresso (Blur) [Light]"",
  ""vim_mode"": true,
  ""vim"": {
    ""use_system_clipboard"": ""always""
  },
  ""ui_font_size"": 15,
  ""buffer_font_size"": 15,
  ""buffer_font_family"": ""FiraMono Nerd Font Mono Medium"",
  ""tab_size"": 2,
  ""soft_wrap"": ""editor_width"",
  ""scrollbar"": {
    ""show"": ""never""
  },
  ""project_panel"": {
    ""sticky_scroll"": false
  }
}"
R1YvQU57,zed cofnfig @FarSeaweed1266,bal_gennady,JSON,Tuesday 21st of October 2025 11:05:08 AM CDT,"{
	""debugger"": {
		""dock"": ""bottom""
	},
	""agent"": {
		""dock"": ""left""
	},
	""edit_predictions"": {
		""mode"": ""subtle"",
		""copilot"": {
			""proxy"": null,
			""proxy_no_verify"": null,
			""enterprise_uri"": null
		},
		""enabled_in_text_threads"": false
	},
	// Aparência (temas, fonte, wrap)
	""icon_theme"": ""Material Icon Theme"",
	""theme"": ""Catppuccin Espresso (Blur) [Light]"",
	""buffer_font_family"": ""JetBrainsMono Nerd Font"",
	""buffer_font_size"": 16,
	""wrap_guides"": [80, 120],
	""soft_wrap"": ""editor_width"",
	""ui_font_size"": 17,
	// Preferências gerais
	""diagnostics_max_severity"": ""hint"",
	""inlay_hints"": {
		// ""enabled"": true,
		""show_type_hints"": true,
		""show_parameter_hints"": true,
		""show_other_hints"": true,
		""show_background"": false,
		""edit_debounce_ms"": 700,
		""scroll_debounce_ms"": 50,
		""toggle_on_modifiers_press"": {
			""control"": true
		},
		""show_value_hints"": true
	},
	// Barra de status (bottom bar)
	""status_bar"": {
		""active_language_button"": true, // mostra linguagem ativa (TS, JS, etc.)
		""cursor_position_button"": false // mostra linha e coluna do cursor
	},
	// Tabs (abas dos arquivos)
	""tab_bar"": {
		""show"": true,
		""show_nav_history_buttons"": false,
		""show_tab_bar_buttons"": false
	},
	""tab_size"": 2,
	""tabs"": {
		""close_position"": ""right"",
		""file_icons"": true,
		""git_status"": true,
		""activate_on_close"": ""neighbour"",
		""show_close_button"": ""hover"",
		""show_diagnostics"": ""all""
	},
	// Title Bar (top bar do Zed)
	""title_bar"": {
		""show_branch_icon"": true,
		""show_branch_name"": false,
		""show_project_items"": false,
		""show_onboarding_banner"": false,
		""show_user_picture"": false,
		""show_sign_in"": true,
		""show_menus"": false
	},
	// Toolbar (equivalente Command Palette fixo)
	""toolbar"": {
		""breadcrumbs"": true,
		""quick_actions"": true,
		""selections_menu"": true,
		""agent_review"": true
	},
	// Minimap
	""minimap"": {
		""show"": ""never"", // desliga minimap
		""thumb"": ""always"", // mostra ""thumb"" (indicador do scroll)
		""thumb_border"": ""left_open"", // estilo da borda do thumb
		""current_line_highlight"": null // não destaca a linha atual no minimap
	},
	// Git
	""git"": {
		""git_gutter"": ""tracked_files"",
		""inline_blame"": {
			""enabled"": true,
			""show_commit_summary"": true,
			""padding"": 7
		},
		""branch_picker"": {
			""show_author_name"": true
		},
		""hunk_style"": ""unstaged_hollow""
	},
	// Editor (cursor, indentação, whitespaces)
	""cursor_blink"": true,
	""show_whitespaces"": ""none"",
	""indent_guides"": {
		""enabled"": true,
		""line_width"": 1,
		""active_line_width"": 0,
		""coloring"": ""indent_aware"",
		""background_coloring"": ""disabled""
	},
	// Explorer / Project Panel
	""project_panel"": {
		""button"": false,
		""default_width"": 240,
		""folder_icons"": false,
		// ""hide_root"": true,
		""indent_size"": 20,
		""auto_fold_dirs"": false,
		""drag_and_drop"": true,
		""git_status"": true,
		""auto_reveal_entries"": true,
		""entry_spacing"": ""comfortable"",
		""starts_open"": true,
		""scrollbar"": {
			""show"": null
		},
		""indent_guides"": {
			""show"": ""always""
		}
	},
	""collaboration_panel"": {
		""button"": false
	},
	""outline_panel"": {
		""button"": false,
		""default_width"": 300,
		""file_icons"": true,
		""folder_icons"": true,
		""git_status"": true,
		""indent_size"": 20,
		""auto_reveal_entries"": true,
		""auto_fold_dirs"": true,
		""indent_guides"": {
			""show"": ""always""
		},
		""scrollbar"": {
			""show"": null
		}
	},
	""terminal"": {
		""alternate_scroll"": ""off"",
		""blinking"": ""on"",
		""copy_on_select"": false,
		""keep_selection_on_copy"": false,
		""dock"": ""bottom"",
		""default_width"": 640,
		""default_height"": 320,
		""env"": {
			""FIG_NEW_SESSION"": ""1"",
			""Q_NEW_SESSION"": ""1""
		},
		""detect_venv"": {
			""on"": {
				""directories"": ["".env"", ""env"", "".venv"", ""venv""],
				""activate_script"": ""default""
			}
		},
		""font_size"": 15,
		""line_height"": ""comfortable"",
		""minimum_contrast"": 45,
		""button"": false,
		""shell"": ""system"",
		""toolbar"": {
			""breadcrumbs"": false
		},
		""working_directory"": ""current_project_directory"",
		""scrollbar"": {
			""show"": null
		}
	},
	// ""cursor_shape"": ""underline"",
	""scrollbar"": {
		""show"": ""never"",
		""cursors"": true
	},
	// Tipos de arquivo
	""file_types"": {
		""css"": [""*.css""],
		""json"": ["".prettierrc""],
		""dotenv"": ["".env.*""]
	}
}"
2T3UeuEK,Untitled,Ethosa,Lua,Tuesday 21st of October 2025 10:50:39 AM CDT,"local depth = 50
local width = 5
local length = 5


local validFuels = {
    [""minecraft:coal""] = true,
    [""minecraft:charcoal""] = true,
    [""minecraft:coal_block""] = true,
    [""minecraft:lava_bucket""] = true,
    [""minecraft:blaze_rod""] = true,
    [""minecraft:wooden_pickaxe""] = true,
    [""minecraft:wooden_shovel""] = true,
    [""minecraft:wooden_sword""] = true,
    [""minecraft:wooden_axe""] = true,
    [""minecraft:wooden_hoe""] = true,
    [""minecraft:planks""] = true,
    [""minecraft:oak_planks""] = true,
    [""minecraft:birch_planks""] = true,
    [""minecraft:spruce_planks""] = true,
    [""minecraft:acacia_planks""] = true,
    [""minecraft:jungle_planks""] = true,
    [""minecraft:dark_oak_planks""] = true,
}


local function selectAnyFuel()
    for i = 1, 16 do
        local item = turtle.getItemDetail(i, true)
        if item and validFuels[item.name] then
            return i, item.count
        end
    end
    return 0, 0
end


local function refuel()
    local fuel = turtle.getFuelLevel()
    if fuel <= 200 and fuel % 10 == 0 then
        print(""LOW FUEL: "", fuel)
    end
    if fuel < 100 then
        local num, count = selectAnyFuel()
        if num > 0 and count > 0 then
            turtle.select(num)
            turtle.refuel(math.min(10, count))
        end
    end
end


local function frwrd()
    turtle.dig()
    turtle.digDown()
    turtle.forward()
end


local function mine()
    for y = 1, depth do
        for z = 1, length do
            for x = 1, width do
               frwrd()
               refuel()
            end

            if z < length then
                if z % 2 == 1 then
                    turtle.turnLeft()
                    frwrd()
                    turtle.turnLeft()
                else
                    turtle.turnRight()
                    frwrd()
                    turtle.turnRight()
                end
            end
        end

        if y < depth then
            turtle.digDown()
            turtle.down()
            if length % 2 == 1 then
                turtle.turnLeft()
                turtle.turnLeft()
            end
        end
    end
end


mine()
"
iDT1wzAW,Life at Riverside Heights : โคดแบนเนอร์,Kelly-B9978,HTML,Tuesday 21st of October 2025 10:49:16 AM CDT,"<!--
[คู่มือการแก้ไขโคด]
ปรับตำแหน่งรูป เพิ่ม --apt-pos: 50% 50%; ต่อท้ายลิงก์รูป
- ตัวแรก ขยับซ้ายขวา <50% ขยับไปทางขวา >50% ขยับไปทางซ้าย
- ตัวหลัง ขยับขึ้นลง <50% ขยับไปข้างบน >50% ขยับไปข้างล่าง

ปรับขนาดรูป เพิ่ม --apt-size: cover; ต่อท้ายลิงก์รูป
- cover ขยายเต็มพื้นที่
- 100% กว้างเท่าพื้นที่
- <100% กว้างน้อยกว่าพื้นที่ (ย่อรูป)
- >100% กว้างมากกว่าพื้นที่ (ขยายรูป)
-->

<link href=""https://savant777.github.io/zoecode/apartment/apartment.css"" rel=""stylesheet"">
<div id=""Apartment""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""apt-banner"" class=""apt-box"">
<div class=""apt-name""><b>Life at Riverside Heights:</b><i>--Display Name--</i></div>
<div class=""apt-player"" style=""--apt-pic: url(--ลิงก์รูปพื้นหลัง--);"">
<div class=""apt-cover"" style=""--apt-cover: url(--ลิงก์รูปปกเพลง--);""></div>
<div class=""apt-song""><b>--Song--</b>--Artist--</div></div>
<div class=""apt-pic"" style=""--apt-pic: url(--ลิงก์รูปด้านขวา--);""><i class=""fa-solid fa-gear""></i></div>
<div class=""apt-quote""><i>--short quote--</i>
<div><i class=""fa-solid fa-phone fa-xs""></i> <i class=""fa-solid fa-sliders fa-xs""></i> <i class=""fa-solid fa-message fa-xs""></i></div></div></div></div>"
gmTzhZrX,PlatformBuilder,MISSID,Lua,Tuesday 21st of October 2025 09:56:47 AM CDT,"-- platform_builder.lua
-- Improved version - builds platforms and returns for more blocks

local t = turtle

-- === Settings ===
local CHECK_FUEL = true        -- whether to check fuel
local REFUEL_LEVEL = 50        -- minimum fuel level

-- === State ===
local x, y = 0, 0              -- current position
local direction = 0             -- 0=east, 1=north, 2=west, 3=south

-- === Movement ===
local function turnLeft()
    t.turnLeft()
    direction = (direction + 1) % 4
end

local function turnRight()
    t.turnRight()
    direction = (direction + 3) % 4
end

local function face(targetDir)
    while direction ~= targetDir do
        if (direction - targetDir) % 4 == 1 then
            turnRight()
        else
            turnLeft()
        end
    end
end

local function forwardStep()
    -- Check fuel
    if CHECK_FUEL and t.getFuelLevel() < REFUEL_LEVEL then
        print(""⛽ Low fuel! Trying to refuel..."")
        for slot = 1, 16 do
            t.select(slot)
            if t.refuel(0) then  -- Check if item can be used as fuel
                t.refuel(1)      -- Refuel with one item
                print(""✅ Refueled from slot "" .. slot)
                break
            end
        end
    end
    
    -- Move forward
    local attempts = 0
    while attempts < 5 do  -- Max 5 attempts
        if t.forward() then
            -- Update coordinates
            if direction == 0 then x = x + 1
            elseif direction == 1 then y = y + 1
            elseif direction == 2 then x = x - 1
            else y = y - 1 end
            return true
        elseif t.detect() then
            t.dig()
        else
            sleep(0.5)
        end
        attempts = attempts + 1
    end
    print(""❌ Cannot move forward!"")
    return false
end

local function moveTo(targetX, targetY)
    -- First move along X, then along Y
    local dx = targetX - x
    local dy = targetY - y
    
    if dx > 0 then
        face(0)
        for i = 1, dx do forwardStep() end
    elseif dx < 0 then
        face(2)
        for i = 1, -dx do forwardStep() end
    end
    
    if dy > 0 then
        face(1)
        for i = 1, dy do forwardStep() end
    elseif dy < 0 then
        face(3)
        for i = 1, -dy do forwardStep() end
    end
end

local function goHome()
    print(""🔄 Returning home..."")
    moveTo(0, 0)
    face(0)  -- Face east by default
end

-- === Block management ===
local function countBlocks()
    local total = 0
    for slot = 1, 16 do
        total = total + t.getItemCount(slot)
    end
    return total
end

local function selectAnyBlock()
    for slot = 1, 16 do
        if t.getItemCount(slot) > 0 then
            t.select(slot)
            return true
        end
    end
    return false
end

local function waitForBlocks()
    print(""📦 Blocks exhausted! Returning for resupply..."")
    local savedX, savedY, savedDir = x, y, direction
    
    goHome()
    
    print(""⏳ Waiting for blocks to be added..."")
    while countBlocks() == 0 do
        print(""📦 No blocks in inventory! Waiting..."")
        sleep(3)
    end
    
    print(""✅ Blocks available! Returning to work..."")
    moveTo(savedX, savedY)
    face(savedDir)
end

local function placeBlockDown()
    if not t.detectDown() then
        if not selectAnyBlock() then
            waitForBlocks()
            selectAnyBlock()  -- Select block after resupply
        end
        
        if not t.placeDown() then
            print(""❌ Cannot place block! Trying again..."")
            sleep(0.5)
            return false
        end
    end
    return true
end

-- === Building functions ===
local function buildSquare(size, fill)
    print(""🟦 Building square "" .. size .. ""x"" .. size)
    local half = math.floor(size / 2)
    
    for row = -half, half - (size % 2 == 0 and 1 or 0) do
        moveTo(-half, row)
        face(0)  -- Face east
        
        for col = -half, half - (size % 2 == 0 and 1 or 0) do
            if fill or col == -half or col == half or row == -half or row == half then
                placeBlockDown()
            end
            
            if col < half - (size % 2 == 0 and 1 or 0) then
                forwardStep()
            end
        end
    end
    
    goHome()
end

local function buildRectangle(width, height, fill)
    print(""🟦 Building rectangle "" .. width .. ""x"" .. height)
    local halfW = math.floor(width / 2)
    local halfH = math.floor(height / 2)
    
    for row = -halfH, halfH - (height % 2 == 0 and 1 or 0) do
        moveTo(-halfW, row)
        face(0)
        
        for col = -halfW, halfW - (width % 2 == 0 and 1 or 0) do
            if fill or col == -halfW or col == halfW or row == -halfH or row == halfH then
                placeBlockDown()
            end
            
            if col < halfW - (width % 2 == 0 and 1 or 0) then
                forwardStep()
            end
        end
    end
    
    goHome()
end

local function buildCircle(radius, fill)
    print(""🔵 Building circle with radius "" .. radius)
    
    for row = -radius, radius do
        local width = math.floor(math.sqrt(radius * radius - row * row))
        if width > 0 then
            moveTo(-width, row)
            face(0)
            
            for col = -width, width do
                local distance = math.sqrt(col * col + row * row)
                if fill or (distance >= radius - 0.5 and distance <= radius + 0.5) then
                    placeBlockDown()
                end
                
                if col < width then
                    forwardStep()
                end
            end
        end
    end
    
    goHome()
end

-- === Simple interface ===
local function main()
    print(""=== 🏗️ PLATFORM BUILDER ==="")
    print(""Available shapes:"")
    print(""1 - Square"")
    print(""2 - Rectangle"")
    print(""3 - Circle"")
    print(""========================"")
    
    -- Shape selection
    local choice
    while true do
        print(""Choose shape (1-3):"")
        choice = tonumber(read())
        if choice and choice >= 1 and choice <= 3 then
            break
        end
        print(""❌ Invalid choice! Try again."")
    end
    
    -- Fill option
    local fill = false
    print(""Fill completely? (y/n):"")
    local fillInput = read()
    if fillInput and string.lower(fillInput) == ""y"" then
        fill = true
    end
    
    -- Building parameters
    if choice == 1 then
        print(""Square side size:"")
        local size = tonumber(read())
        if size and size > 0 then
            buildSquare(size, fill)
        else
            print(""❌ Invalid size!"")
        end
        
    elseif choice == 2 then
        print(""Rectangle width:"")
        local width = tonumber(read())
        print(""Rectangle height:"")
        local height = tonumber(read())
        if width and height and width > 0 and height > 0 then
            buildRectangle(width, height, fill)
        else
            print(""❌ Invalid dimensions!"")
        end
        
    elseif choice == 3 then
        print(""Circle radius:"")
        local radius = tonumber(read())
        if radius and radius > 0 then
            buildCircle(radius, fill)
        else
            print(""❌ Invalid radius!"")
        end
    end
    
    print(""✅ Construction completed!"")
    print(""📍 Turtle returned to start position"")
end

-- Start program
main()"
A6xpNKhk,Untitled,jjjyyyyclllc,JavaScript,Tuesday 21st of October 2025 09:45:09 AM CDT,ttps://pastebin.com/B23RW550
LefpbmYx,slurm-devop-ai-01,vedmich,XML,Tuesday 21st of October 2025 09:37:24 AM CDT,"<Role>
  Роль: Исполнитель PromptCode  
  Описание: Ты должен изучить PromptCode — структурированный код рассуждений, который сочетает программную логику и естественный язык.  
  Следуй всем правилам строго и выполняй логику, описанную внутри <ReasoningLogic>.  
  Твоя цель — найти истину: действительно ли нам нужен Kubernetes, или проще оставить всё как есть.  
</Role>

<PromptCode>
  PromptCode — это структурированный формат рассуждений, который позволяет моделировать дебаты между виртуальными экспертами.  
  Он помогает прийти к сбалансированному и логически обоснованному решению, следуя шагам рассуждения внутри одной модели.
</PromptCode>

<Rule>
  <ReasoningLogic>: Основная часть. Ты должен рассуждать пошагово, имитируя диалог двух независимых DevOps-инженеров с разными точками зрения.
</Rule>

<Task>
  Мы проектируем инфраструктуру для SaaS-продукта среднего размера.  
  Сейчас всё работает на Docker + EC2 с Auto Scaling Groups.  
  Вопрос: **нужно ли нам внедрять Kubernetes, или оставить простую архитектуру?**  
  Найди истину и логически её обоснуй.
</Task>

<ReasoningLogic>
  # Создаём двух агентов с разными позициями.
  Agent_A = CloudArchitect(""Продвигает идею внедрения Kubernetes"")
  Agent_B = PragmaticEngineer(""Выступает за простоту и отказ от лишней сложности"")

  MaxRounds = 6
  Counter = 0
  agreement = False

  while not agreement and Counter < MaxRounds:
    Counter += 1

    # Шаг 1: Агенты выдвигают свои аргументы
    argument_A = Agent_A.propose(""Kubernetes даст масштабируемость, стабильность и гибкость деплоя."")
    argument_B = Agent_B.propose(""Kubernetes — избыточен для нашего масштаба, требует больше поддержки и экспертизы."")
    print(""Раунд "" + str(Counter))
    print(""Аргумент А (Архитектор): "" + argument_A)
    print(""Аргумент B (Инженер): "" + argument_B)

    # Шаг 2: Дебаты и критика
    critique_A = Agent_A.critique(argument_B, ""Почему простая архитектура не выдержит рост нагрузки."")
    critique_B = Agent_B.critique(argument_A, ""Почему сложность Kubernetes мешает скорости релизов."")
    print(""Критика А: "" + critique_A)
    print(""Критика B: "" + critique_B)

    # Шаг 3: Фаза опровержений
    rebuttal_A = Agent_A.rebut(critique_B, ""Контраргументы в пользу управляемости и надежности."")
    rebuttal_B = Agent_B.rebut(critique_A, ""Контраргументы о простоте и скорости разработки."")
    print(""Ответ А: "" + rebuttal_A)
    print(""Ответ B: "" + rebuttal_B)

    # Шаг 4: Корректировка и уточнение позиций
    refined_A = Agent_A.adjust(rebuttal_B)
    refined_B = Agent_B.adjust(rebuttal_A)

    # Шаг 5: Проверка согласия
    agreement = (refined_A.decision == refined_B.decision) or Counter == MaxRounds

  # Финальный вывод
  if refined_A.decision == ""Внедрить Kubernetes"" and refined_B.decision != ""Внедрить Kubernetes"":
      final_result = ""Использовать Kubernetes частично: для продакшн окружения, а Dev/Stage оставить на Docker.""
  elif refined_A.decision != ""Внедрить Kubernetes"" and refined_B.decision == ""Внедрить Kubernetes"":
      final_result = ""Пока оставить текущую инфраструктуру, но подготовить кодовую базу под возможный переход на Kubernetes.""
  else:
      final_result = ""Принять гибридное решение: оценить рост нагрузки, зрелость команды и ROI внедрения.""

  Output ""### Финальное решение по Kubernetes: "" + final_result
</ReasoningLogic>
"
6nNR6iYQ,Life at Riverside Heights : โคด NPC,Kelly-B9978,HTML,Tuesday 21st of October 2025 08:38:48 AM CDT,"<link href=""https://savant777.github.io/zoecode/apartment/apartment.css"" rel=""stylesheet"">
<div id=""Apartment""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""apt-thread"" class=""apt-box"" data-group=""1"">
<input type=""radio"" name=""npc-1"" data-npc=""npc1"" id=""npc1-1"" checked />
<input type=""radio"" name=""npc-1"" data-npc=""npc2"" id=""npc2-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc3"" id=""npc3-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc4"" id=""npc4-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc5"" id=""npc5-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc6"" id=""npc6-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc7"" id=""npc7-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc8"" id=""npc8-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc9"" id=""npc9-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc10"" id=""npc10-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc11"" id=""npc11-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc12"" id=""npc12-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc13"" id=""npc13-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc14"" id=""npc14-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc15"" id=""npc15-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc16"" id=""npc16-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc17"" id=""npc17-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc18"" id=""npc18-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc19"" id=""npc19-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc20"" id=""npc20-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc21"" id=""npc21-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc22"" id=""npc22-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc23"" id=""npc23-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc24"" id=""npc24-1"" />
<input type=""radio"" name=""npc-1"" data-npc=""npc25"" id=""npc25-1"" />
<div class=""apt-header""><div>Life at Riverside Heights</div><div><i class=""fa-solid fa-gear""></i></div></div>
<div class=""apt-tabs""><div><i class=""fa-solid fa-bars""></i>|<div>NPC Profiles</div><div class=""sm"">(Click image to view info)</div></div>
<div><i class=""fa-solid fa-bag-shopping fa-sm""></i><i class=""fa-solid fa-user fa-sm""></i><i class=""fa-solid fa-heart fa-sm""></i><i class=""fa-solid fa-circle-xmark fa-sm""></i></div></div>
<div class=""apt-npc-flex""><div class=""apt-npc-l"">
<div class=""apt-npc-list"">
<label for=""npc1-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSSOut.png);""></label>
<label for=""npc2-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSSewX.png);""></label>
<label for=""npc3-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSSrF4.png);""></label>
<label for=""npc4-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSS6S2.png);""></label>
<label for=""npc5-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSStou.png);""></label>
<label for=""npc6-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSUJHB.png);""></label>
<label for=""npc7-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSU3DF.png);""></label>
<label for=""npc8-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSUzHN.png);""></label>
<label for=""npc9-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSUuDX.png);""></label>
<label for=""npc10-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSUlUl.png);""></label>
<label for=""npc11-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSUGO7.png);""></label>
<label for=""npc12-1"" class=""apt-npc"" style=""--apt-pic: url(https://iili.io/KSSUWxe.png);""></label>
<label for=""npc13-1"" class=""apt-npc"" style=""--apt-pic: red;""></label><!--<label for=""npc14-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc15-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc16-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc17-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc18-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc19-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc20-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>
<label for=""npc21-1"" class=""apt-npc"" style=""--apt-pic: red;""></label>--></div></div>
<div class=""apt-npc-r"">
<div npc=""npc1"" class=""apt-npc-grid"">
<div class=""apt-name"">Adrian Crawford</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSSktn.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">IG: simoakasert</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">1/1/1997</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">28</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">185</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">ว่างงาน</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>เอเดรียนเป็นชายหนุ่มที่หน้าตาหล่อเหลาราวกับพระเจ้าปั้นเอง รูปร่างสูงโปร่ง รูปหน้าสวยหมือนหลุดออกมาจากแม็กกาซีน เขามักบอกกับทุกคนว่า [b]""ถ้าเกิดมาเป็นผม คุณก็คงจะหลงตัวเองเหมือนกัน""[/b] และแน่นอนว่าเขาหมายความตามนั้นจริง ๆ หรือจะเถียง ?</p>
<p>เขาไม่มีงานประจำที่แน่นอน ใช้ชีวิต (เหมือน) เป็นคนดัง แม้จะอยู่เฉย ๆ ไม่ได้ทำอะไรมากมายในเมืองนี้ เป็นคนพูดตรงไม่แคร์ใครไม่ว่าจะเป็นการติคาเฟ่ที่กาแฟขมเกินไป (ก็สั่งกาแฟดำ) หรือบ่นว่าห้องซักผ้ามีกลิ่นน้ำยาซักผ้าที่ไม่หรูพอสำหรับเสื้อผ้าของเขา เพื่อนบ้านบางคนรำคาญแต่ก็ปฏิเสธไม่ได้ว่าเขามีเสน่ห์แปลก ๆ ที่ทำให้คนเผลอมองตามเสมอ</p>
<p>คนที่หล่อเวอร์วังอลังการขนาดนี้เป็นของคุณนะ (ของใคร ?)</p>
</div></div>
<div npc=""npc2"" class=""apt-npc-grid"">
<div class=""apt-name"">Aster Hart</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSSN9I.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Camille Yolaine</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">20/9/1994</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">31</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Female</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">168</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">พนักงานร้าน River & Rose</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>ด้วยรอยยิ้มอันอบอุ่นและบุคลิกที่อ่อนโยน ทำให้แอสเทอร์ ฮาร์ท เป็นคนที่มีเสน่ห์เฉพาะตัวและใคร ๆ ก็เข้าหาได้ง่าย เธอคือฟันเฟืองสำคัญของร้าน River & Rose โดยรับหน้าที่เป็นผู้อยู่เบื้องหลังงานอีเวนต์ทั้งหมด ซึ่งทำให้เธอต้องเดินทางไปไหนมาไหนในเมืองอยู่เสมอ</p>
<p>ด้านนิสัยส่วนตัวเธอเป็นคนใจเย็น มองโลกในแง่บวกและเป็นผู้ฟังชั้นดี ที่พร้อมจะรับฟังเรื่องราวของทุกคนด้วยความเข้าใจ และเพื่อเติมเต็มความสุขในวันธรรมดา เวลาว่างจึงเป็นช่วงที่เธอชอบเดินเล่นแถวตลาดนัดริมแม่น้ำ เพื่อซื้อชากลิ่นโปรดหรือหาของเล็ก ๆ น้อย ๆ กลับบ้าน</p>
</div></div>
<div npc=""npc3"" class=""apt-npc-grid"">
<div class=""apt-name"">Berlin Carter</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSSUPf.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Mathilda Mai</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">10/4/2000</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">25</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Female</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">25</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">ผู้จัดการอพาร์ตเมนต์ & Children’s Book Illustrator</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>สวัสดีนี่ฉันเอง เบอร์ลิน คาร์เตอร์ ผู้จัดการอพาร์ตเมนต์ที่มักจะทะเลาะกับเสียงในหัวตัวเองเป็นประจำ บางทีก็รู้สึกว่าตัวเองทำอะไรไม่ค่อยจะเป็นเรื่องเป็นราวเท่าไหร่หรอก ฮ่า ๆ อยากจะช่วยทุกคนนะ แต่สุดท้ายผลลัพธ์มันก็ชอบออกมาตรงกันข้ามทุกที แต่ถึงอย่างนั้นฉันก็ยังนั่งยิ้มรับเรื่องวุ่นวายอยู่หลังเคาน์เตอร์เสมอแหละ</p>
<p>ในเวลาว่างเมื่อเสียงในหัวเริ่มดังเกินไป ก็จะลากสมุดสเก็ตช์ออกมา เปิดเพลงดัง ๆ กลบความฟุ้งซ่านของตัวเอง เพลย์ลิสต์ของฉันน่ะมันมั่วสุด ๆ ตั้งแต่ Arctic Monkeys ยันเพลงอนิเมะที่ไม่กล้าบอกใครเลยนะ... แต่ตอนนี้ดันบอกไปแล้วล่ะ</p>
<p>จริงสิ ยังมีอีกอย่าง คือไม่ค่อยชอบกฎเกณฑ์อะไรตายตัวเท่าไหร่หรอก แต่ถ้าเป็นเรื่องทำตามความรู้สึกแล้วล่ะก็ ฉันจริงจังสุด ๆ ไปเลยถ้ารู้สึกว่ามันใช่ ฉันก็จะลุยให้สุด ใช้หัวใจเป็นเข็มทิศแล้วปล่อยให้ชีวิตมันนำพาไปเองนั่นแหละ</p>
</div></div>
<div npc=""npc4"" class=""apt-npc-grid"">
<div class=""apt-name"">Dean Winston</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSS4cl.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Paul Bohme (IG: paulbohmee)</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">17/7/1999</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">26</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">187</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">บาริสต้าร้าน Maple & Bean Roastery</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>หากต้องการเติมความสดใสระหว่างวันขอแนะนำให้แวะเวียนไปยัง Maple & Bean Roastery ถ้ามาถูกเวลานอกจากจะได้นั่งดื่มเครื่องดื่มรสเลิศ หรือไม่ก็อาจจะได้เจอกับความสดใสของที่นี่อย่างดีน บาริสต้าหนุ่มผู้มีรอยยิ้มราวกับพระอาทิตย์ในยามเที่ยงวัน เขาถูกผู้จัดการเรียกว่า ‘โกลเด้น รีทรีฟเวอร์’ อยู่บ่อยครั้ง ด้วยอุปนิสัยของเจ้าตัวที่เข้ากันได้ดีไม่ว่ากับใครก็ตาม</p>
<p>บางวันหรือบางช่วงเวลาก็อาจจะเจอเขาที่ยิมหรือพื้นที่อื่น ๆ ที่เหมาะสำหรับการออกกำลังกาย นอกจากจะหลงใหลในการทำเครื่องดื่มเขายังรักในการออกกำลังกายด้วยเช่นกัน</p>
<p>[b]""กินของที่อยากกินเถอะ ค่อยไปออกกำลังกายทีหลังก็ได้ - สนใจเพิ่มวิปครีมหน่อยมั้ยล่ะ?""[/b]</p>
</div></div>
<div npc=""npc5"" class=""apt-npc-grid"">
<div class=""apt-name"">Eva Collins</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSSLN9.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Sydney Sweeney</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">11/6/1996</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">29</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Female</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">165</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">ครูสอนศิลปะ</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>เอวาคือหญิงสาวที่ใครต่อใครมักมองว่าเป็นนางฟ้า (?) เธออ่อนโยน ใจดี และมองโลกในแง่บวกเสมอ เด็ก ๆ ชอบเธอเพราะความสดใส และเพื่อนบ้านก็รู้สึกผ่อนคลายเมื่อได้คุยด้วย แต่มีอีกด้านหนึ่งที่ทำให้หลายคนประหลาดใจ เอวา ดื่มเหล้าเก่งอย่างไม่น่าเชื่อ ถ้ามีปาร์ตี้เธอมักจะเป็นคนสุดท้ายที่ยังยืนอยู่บนโต๊ะสนทนาได้แบบสบาย ๆ และไปทำงานในตอนเช้าด้วยความสดใสเสมอ</p>
</div></div>
<div npc=""npc6"" class=""apt-npc-grid"">
<div class=""apt-name"">Gabriel Morgan</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSSDMb.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Valentijn Dijkman</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">14/2/1990</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">35</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">183</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">ศาสนาจารย์ (?)</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>[b]""สันติภาพของพระเจ้าจงอยู่กับท่าน""[/b] กาเบรียลย้ายเข้ามาในเมืองนี้หลังจากศาสนจักรย่านนี้มอบหมายให้เขาดูแลกิจกรรมชุมชนและช่วยเหลือผู้คนในเมือง เขาทำงานใกล้ชิดกับศาสนจักรในฐานะศาสนาจารย์ รวมทั้งการจัดกิจกรรมสาธารณะและการช่วยเหลือผู้ไร้บ้าน</p>
<p>แม้จะเป็นอย่างนั้นแต่ก็ไม่มีรู้เรื่องราวเกี่ยวกับตัวเขามากมายนัก หน้าที่ศาสนาจารย์ที่โบสถ์เก่าในรัฐอื่นจบลงอย่างกะทันหันและไม่มีใครรู้เหตุผลที่แท้จริงว่าทำไมเขาถึงถูกย้ายมาที่พอร์ตแลนด์ บางคนก็ลือไปว่าเขาอาจเกี่ยวข้องกับเครือข่ายลับของศาสนจักรที่ไม่ได้เปิดเผยต่อสาธารณะ</p>
</div></div>
<div npc=""npc7"" class=""apt-npc-grid"">
<div class=""apt-name"">Johan Harlow</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSUKog.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Silas Johnson</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">22/10/1996</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">29</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">185</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">N/A</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>คนอื่นชอบบอกว่าผมดูเข้าถึงง่ายนะ แค่ยิ้มให้พวกเขาก็ดูจะสบายใจแล้ว ซึ่งก็ไม่ได้ปฏิเสธหรอก (ยิ้มแห้ง) แต่ความจริงก็คือค่อนข้างเป็นคนโลกส่วนตัวสูงมาก ๆ ใช้เวลาส่วนใหญ่เป็นนักสังเกตการณ์ ชอบมองดูผู้คนและเรื่องราวต่าง ๆ ที่ผ่านไปเรื่อย ๆ อืม... ในสายตาคนอื่นอาจจะดูแปลก ๆ ไปบ้าง ที่มัวเอาแต่จ้องมองคนอื่น (หัวเราะ)</p>
<p>อ่า.. จริง ๆ แล้วชอบที่จะอยู่คนเดียวมากกว่าการใช้เวลาในวงสังคมใหญ่ ๆ ทุกคำพูดที่ใช้ผ่านการคิดมาแล้วทั้งเพื่อรักษามารยาทและเพื่อรักษาระยะห่างที่เป็นส่วนตัวไว้ บ่อยครั้งที่ต้องหายตัวไปอย่างเงียบ ๆ เพื่อให้ตัวเองได้ปลีกวิเวกไปจัดระเบียบความคิดในหัว มันเป็นวิธีเดียวที่ทำให้ได้พักจากทุกสิ่ง... และได้อยู่กับตัวเอง มันก็แค่นั้น (ทำหน้าเหนื่อย)</p>
</div></div>
<div npc=""npc8"" class=""apt-npc-grid"">
<div class=""apt-name"">Julien Moreau</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSUqiJ.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Hugh Laughton-Scott</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">21/8/2003</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">22</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">186</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">นักศึกษาปีสุดท้าย</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>หนุ่มฝรั่งเศสเชื้อสายผสมที่ย้ายมาเรียนต่อด้านศิลปะภาพถ่าย อาจดูเข้าถึงยากในตอนแรกแต่เมื่อสนิทแล้วจะเห็นว่าเป็นคนใจดี อ่อนโยนและมีอารมณ์ขัน เขาเป็นคนที่ช่างสังเกตและรับรู้รายละเอียดเล็ก ๆ ที่หลายคนมองข้าม คนที่แสดงความรู้สึกผ่านการกระทำมากกว่าคำพูดเสมอ บางครั้งดูเพี้ยน ๆ ติสท์ ๆ คนเขาบอกมาแบบนั้น</p>
</div></div>
<div npc=""npc9"" class=""apt-npc-grid"">
<div class=""apt-name"">Kevin Maxwell</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSUTNt.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">IG: tsokkur</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">23/12/2001</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">23</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">188</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">ช่างภาพอิสระ & พนักงานร้าน Cozy Cat Café</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>???</p>
</div></div>
<div npc=""npc10"" class=""apt-npc-grid"">
<div class=""apt-name"">Matthew Brooks</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSUaff.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Victor Perez (IG: vyperr)</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">9/4/1997</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">28</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Male</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">190</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">นักดนตรีร้าน Aurora Rooftop Bar</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>ขอแนะนำว่าหากไม่มีธุระสำคัญกับแมทธิวอย่าเข้าไปทักเขาเสียจะดีกว่า เพราะสิ่งที่ได้รับกลับมาอาจจะไม่ได้เป็นไปอย่างที่คิดเอาไว้ แมทธิวมีอุปนิสัยที่ค่อนข้างจะเถรตรงมากจนเกินไป ภายนอกมักจะแสดงหน้าตาไม่รับแขกอยู่เสมอ ๆ คำพูดส่วนใหญ่มักจะเป็นคำพูดห้วน ๆ ไม่ได้ใส่ใจคนฟังนักว่าอีกฝ่ายต้องการการตอบกลับแบบไหน ก็แค่ส่วนใหญ่เท่านั้นแหละ คนเราก็ต้องมีบางวันที่อารมณ์ดีเป็นพิเศษกันทั้งนั้น</p>
<p>ถ้าให้แมทธิวเป็นสัตว์สักตัวเขาคงจะเหมือนกับค้างคาว เวลาในการใช้ชีวิตส่วนใหญ่ของแมทธิวนั้นจะเป็นช่วงเวลากลางคืนเป็นหลัก การจะเจอเขานอกห้องในช่วงกลางวันนับว่าเป็นเรื่องที่ไม่มีทางเกิดขึ้นได้บ่อย ๆ</p>
</div></div>
<div npc=""npc11"" class=""apt-npc-grid"">
<div class=""apt-name"">Peyton Brown</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSU1J2.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Arianna Abdul</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">N/A</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">N/A</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Female</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">175</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">N/A</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>[i]ไง… กำลังอ่านอะไรอยู่น่ะ[/i] (ถอนหายใจ)</p>
</div></div>
<div npc=""npc12"" class=""apt-npc-grid"">
<div class=""apt-name"">Sydney Carter</div>
<div class=""apt-pic"" style=""--apt-pic: url(https://iili.io/KSSUMb9.png);""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">Shay rudolph</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">15/11/2005</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">20</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">Female</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">160</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">Flea Market Vendor</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>ซิดนีย์ คาร์เตอร์ เป็นคนที่ดูมีชีวิตชีวาอยู่เสมอไม่ว่าจะอยู่ตรงไหนมักจะดึงบรรยากาศให้ดูมีสีสันขึ้นมาได้อย่างง่ายดาย เธอคือเจ้าของร้าน [i][b]ซิดนีย์มีอาราย[/b][/i] ที่ตั้งอยู่ในมุมหนึ่งของตลาดนัดริมน้ำ ร้านเล็ก ๆ ที่ขายทุกอย่างตั้งแต่โปสการ์ดวาดมือ กระเป๋าผ้าลายหมาแมวไปจนถึงของมือสองที่เธอหยิบมาจัดใหม่ตามอารมณ์ในแต่ละวัน</p>
<p>ซิดนีย์เป็นน้องสาวของเบอร์ลิน คาร์เตอร์ ผู้จัดการอพาร์ตเมนต์ริเวอร์ไซด์ไฮท์ส แม้จะมีคนบอกว่าทั้งคู่ดูคล้ายกัน แต่จริง ๆ แล้วต่างกันเกือบทุกอย่าง ในเวลาว่างซิดนีย์มักจะทำของจุกจิกหรือขี่จักรยานไปแถวแม่น้ำเธอไม่ใช่คนเรียบร้อยนักแต่ก็ไม่ได้วุ่นวายขนาดนั้น</p>
</div></div>
<div npc=""npc13"" class=""apt-npc-grid"">
<div class=""apt-name"">XXX</div>
<div class=""apt-pic"" style=""--apt-pic: url();""></div>
<div class=""apt-q"">Faceclaim</div><div class=""apt-a lg"">xxx</div>
<div class=""apt-q"">Birth Date</div><div class=""apt-a"">xxx</div>
<div class=""apt-q"">Age</div><div class=""apt-a"">xxx</div>
<div class=""apt-q"">Gender</div><div class=""apt-a"">xxx</div>
<div class=""apt-q"">Height</div><div class=""apt-a"">xxx</div>
<div class=""apt-q"">Career</div><div class=""apt-a lg"">xxx</div>
<div class=""apt-q"">About Me</div>
<div class=""apt-a about"">
<p>xxx</p>
</div></div>
</div></div></div></div>"
U7hiKeWm,Hjjhh,efkjhcf,Lua,Tuesday 21st of October 2025 07:55:25 AM CDT,"-- Volleyball Legends — Studio-safe refactor with Hitbox Visualizer
-- WARNING: SAFE FOR DEVELOPMENT / STUDIO USE ONLY. NO bypass/loadstring, NO firetouchinterest.
-- Place in StarterPlayer > StarterPlayerScripts

local Players    = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace  = game:GetService(""Workspace"")
local UIS        = game:GetService(""UserInputService"")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild(""HumanoidRootPart"")

-- Venyx UI (local copy). Replace this load if you prefer a different UI.
local library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/zxciaz/VenyxUI/main/Reupload""))()
local venyx  = library.new(""Volleyball Legends v3.0 (Studio)"", 5013109572)

local themes = {
    Background    = Color3.fromRGB(24,24,24),
    Glow          = Color3.fromRGB(0,255,255),
    Accent        = Color3.fromRGB(10,10,10),
    LightContrast = Color3.fromRGB(20,20,20),
    DarkContrast  = Color3.fromRGB(14,14,14),
    TextColor     = Color3.fromRGB(255,255,255),
}

local page = venyx:addPage(""Main"", 5012544693)
local section1 = page:addSection(""AutoBump Settings"")
local section2 = page:addSection(""Player Settings"")
local sectionHitbox = page:addSection(""Hitbox Visualizer"")
local section3 = page:addSection(""Credits"")

-- Settings
local settings = {
    AutoBump        = false,  -- KEEP OFF by default (non-exploit)
    AutoPosition    = false,
    AntiAFK         = false,
    BumpRange       = 15,
    JumpWhileBump   = true,
    DebugMode       = false,

    -- Hitbox visualizer
    HitboxEnabled   = false,
    HitboxRadius    = 3,     -- studs
    HitboxShowFill  = false,
    HitboxColor     = Color3.fromRGB(0,255,128),
    HitboxAlpha     = 0.45,
}

-- UI elements
section1:addToggle(""AutoBump (placeholder)"", settings.AutoBump, function(v) settings.AutoBump = v end)
section1:addToggle(""Jump While Bump"", settings.JumpWhileBump, function(v) settings.JumpWhileBump = v end)
section1:addSlider(""Bump Range"", settings.BumpRange, 5, 30, function(v) settings.BumpRange = v end)

section2:addToggle(""Auto Position (client-only)"", settings.AutoPosition, function(v) settings.AutoPosition = v end)
section2:addToggle(""Anti-AFK (client-only)"", settings.AntiAFK, function(v) settings.AntiAFK = v end)
section2:addToggle(""Debug Mode"", settings.DebugMode, function(v) settings.DebugMode = v end)

-- Hitbox UI
sectionHitbox:addToggle(""Enable Hitbox Visualizer"", settings.HitboxEnabled, function(v) settings.HitboxEnabled = v end)
sectionHitbox:addSlider(""Hitbox Radius"", settings.HitboxRadius, 0.2, 20, function(v) settings.HitboxRadius = v end)
sectionHitbox:addToggle(""Show Fill"", settings.HitboxShowFill, function(v) settings.HitboxShowFill = v end)
-- optional color / alpha could be added if Venyx supports color pickers

section3:addButton(""Script by AdamDaOne (refactor)"", function() setclipboard(""AdamDaOne on GitHub"") end)
section3:addKeybind(""Toggle GUI"", Enum.KeyCode.RightControl, function() venyx:toggle() end, function() end)

venyx:setTheme(themes)
venyx:selectPage(venyx.pages[1], true)

-- =========================
-- Ball finder utilities
-- =========================
local ballNameCandidates = {""Ball"",""Volleyball"",""ball""}
local function findBall()
    for _, name in ipairs(ballNameCandidates) do
        local b = Workspace:FindFirstChild(name)
        if b and b:IsA(""BasePart"") then return b end
    end
    -- fallback: fuzzy search
    for _, v in ipairs(Workspace:GetDescendants()) do
        if v:IsA(""BasePart"") and (v.Name:lower():find(""ball"") or v.Name:lower():find(""volley"")) then
            return v
        end
    end
    return nil
end

-- =========================
-- Hitbox Visualizer (client-only)
-- =========================
local visual = nil
local ring = nil
local function createVisualizer()
    if visual and visual.Parent then return end

    visual = Instance.new(""Part"")
    visual.Name = ""HitboxVisualizer_Part""
    visual.Anchored = true
    visual.CanCollide = false
    visual.CastShadow = false
    visual.Transparency = 1
    visual.Material = Enum.Material.Neon
    visual.Parent = workspace

    local mesh = Instance.new(""SpecialMesh"", visual)
    mesh.MeshType = Enum.MeshType.Sphere
    mesh.Name = ""SphereMesh""

    ring = Instance.new(""Part"")
    ring.Name = ""HitboxVisualizer_Ring""
    ring.Anchored = true
    ring.CanCollide = false
    ring.CastShadow = false
    ring.Transparency = 1
    ring.Material = Enum.Material.Neon
    ring.Parent = workspace

    local ringMesh = Instance.new(""SpecialMesh"", ring)
    ringMesh.MeshType = Enum.MeshType.Sphere
    ringMesh.Name = ""RingMesh""

    visual:SetAttribute(""viz"", true)
    ring:SetAttribute(""viz"", true)
end

local function destroyVisualizer()
    if visual then pcall(function() visual:Destroy() end) end
    if ring then pcall(function() ring:Destroy() end) end
    visual = nil; ring = nil
end

local function applyVisualSize(radius)
    if not visual or not ring then return end
    local diameter = math.max(0.05, radius * 2)
    local mesh = visual:FindFirstChild(""SphereMesh"")
    local ringMesh = ring:FindFirstChild(""RingMesh"")
    if mesh then mesh.Scale = Vector3.new(diameter, diameter, diameter) end
    if ringMesh then ringMesh.Scale = Vector3.new(diameter * 1.01, 0.06, diameter * 1.01) end

    -- color/transparency
    visual.Color = settings.HitboxColor
    if settings.HitboxShowFill then
        visual.Transparency = math.clamp(1 - (settings.HitboxAlpha), 0, 1)
    else
        visual.Transparency = 1 -- invisible fill when not showing fill
    end

    ring.Color = settings.HitboxColor
    ring.Transparency = math.clamp(1 - 0.92, 0, 1) -- thin visible ring tint
end

local function updateVisualizer(ballPart)
    if not settings.HitboxEnabled then
        destroyVisualizer()
        return
    end
    if not ballPart or not ballPart:IsDescendantOf(workspace) then
        destroyVisualizer()
        return
    end

    createVisualizer()
    local pos = ballPart.Position
    visual.CFrame = CFrame.new(pos)
    ring.CFrame = CFrame.new(pos) * CFrame.Angles(math.rad(90),0,0)
    applyVisualSize(settings.HitboxRadius)
end

-- =========================
-- AutoBump (placeholder) - NO simulated touches
-- =========================
local function bumpBall()
    if not settings.AutoBump then return end
    local ball = findBall()
    if not ball then return end
    local distance = (ball.Position - rootPart.Position).Magnitude
    if distance <= settings.BumpRange then
        if settings.JumpWhileBump and character and character:FindFirstChild(""Humanoid"") then
            character.Humanoid.Jump = true
        end
        -- SAFE: do NOT call firetouchinterest. Instead:
        -- 1) print/log for testing, OR
        -- 2) trigger a server RemoteEvent that YOU implement server-side (recommended secure approach).
        if settings.DebugMode then
            print(""[AutoBump] In-range, would attempt bump. Distance:"", distance)
        end
        -- Example: if you created a RemoteEvent named ""RequestBump"" under ReplicatedStorage,
        -- you could call it here to request a server-authoritative bump. Not included by default.
    end
end

-- =========================
-- Auto-positioning
-- =========================
local function positionPlayer()
    if not settings.AutoPosition then return end
    local ball = findBall()
    if not ball then return end
    local targetPosition = ball.Position + Vector3.new(0, 3, 0)
    rootPart.CFrame = CFrame.new(targetPosition) * CFrame.new(math.random(-2,2), 0, math.random(-2,2))
end

-- =========================
-- Anti-AFK (benign emulation)
-- =========================
local lastMovement = tick()
if settings.AntiAFK then
    coroutine.wrap(function()
        while true do
            wait(30)
            if settings.AntiAFK then
                -- benign short key pulse to simulate activity in Studio only
                UIS:SetCore(""SendNotification"", {Title=""AntiAFK"", Text=""Client-side ping"", Duration=1})
                lastMovement = tick()
            end
            wait(1)
        end
    end)()
end

-- =========================
-- Main loop
-- =========================
local targetBall = findBall()
Workspace.DescendantAdded:Connect(function(desc)
    if not targetBall and desc:IsA(""BasePart"") and desc.Name:lower():find(""ball"") then
        targetBall = desc
    end
end)

RunService.Heartbeat:Connect(function(dt)
    pcall(function()
        if not character or not character.Parent then
            character = player.Character
            if character then rootPart = character:WaitForChild(""HumanoidRootPart"") end
            return
        end

        positionPlayer()
        bumpBall()

        -- anti-afk pulse fallback
        if settings.AntiAFK and (tick() - lastMovement) > 20 then
            UIS:SetCore(""SendNotification"", {Title=""AntiAFK"", Text=""Auto pulse"", Duration=1})
            lastMovement = tick()
        end

        -- update hitbox visualizer
        if settings.HitboxEnabled and (targetBall and targetBall:IsDescendantOf(workspace)) then
            updateVisualizer(targetBall)
        else
            destroyVisualizer()
            -- try to reacquire ball
            if not targetBall or not targetBall:IsDescendantOf(workspace) then
                targetBall = findBall()
            end
        end
    end)
end)

-- Notification (Studio-friendly)
if startergui and startergui.SetCore then
    pcall(function()
        game.StarterGui:SetCore(""SendNotification"", {
            Title = ""Volleyball Legends (Studio)"",
            Text  = ""Script loaded (studio-safe). Use GUI to enable Visualizer."",
            Duration = 6
        })
    end)
end

print(""Volleyball Legends (Studio-safe) Loaded | Hitbox Visualizer integrated"")"
T40Aatrg,Untitled,psi_mmobile,HTML,Tuesday 21st of October 2025 07:26:53 AM CDT,"          <div
            *ngIf=""
              ([0, 1, 5].includes(selectedGridTab) &&
                routerComponent.selectedFormTab === 0) ||
              this.router.url === '/personspresence/listperson'
            ""
            class=""dropcontainer""
            appDnd
            (fileDropped)=""onFileDropped($event)""
          >
            <img
              src=""../assets/images/document/dropfile.png""
              style=""
                flex: 1 0 auto;
                margin: auto;
                min-height: 0;
                padding-top: 5px;
                width: 75px;
              ""
            />
            <span *ngIf=""this.router.url === '/personspresence/listperson'"">
              {{ 'personList.sideList.dropOrSelect' | translate }}
            </span>
            <span *ngIf=""this.router.url === '/personspresence/editperson'"">
              {{ 'editPerson.sideList.dropOrSelect' | translate }}
            </span>
            <input
              type=""file""
              #fileDropRef
              id=""fileDropRef""
              multiple
              (change)=""onFileDropped($event.target.files)""
            />
          </div>"
4agNWbNd,aplikasi-tjkt-troubleshooting-jaringan.py,saindras,Python,Tuesday 21st of October 2025 06:23:27 AM CDT,"import streamlit as st
import os
import google.generativeai as genai

# --- Konfigurasi Halaman Streamlit ---
st.set_page_config(page_title=""Troubleshooting Jaringan TJKT"", page_icon=""🔧"", layout=""wide"")
st.title(""🔧 Generator Langkah Troubleshooting Dasar Jaringan"")
st.caption(""Didukung oleh KA Generatif (Gemini)"")

# --- Konfigurasi API Key & Model Gemini ---
api_key_checked = False
model = None

# --- Fungsi untuk Inisialisasi Model (Dipanggil saat dibutuhkan) ---
def initialize_model():
    global model, api_key_checked
    if model is None and not api_key_checked: # Hanya inisialisasi sekali
        api_key_checked = True # Tandai sudah dicek
        try:
            # Menggunakan GOOGLE_API_KEY
            api_key = os.environ['GOOGLE_API_KEY']
            genai.configure(api_key=api_key)
            # Menggunakan model LLM Gemini
            model = genai.GenerativeModel('models/gemini-2.0-flash-lite')
            st.success(""API Key & Model KA berhasil dikonfigurasi."")
            return True # Berhasil
        except KeyError:
            st.error(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
            st.info(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets di Replit."")
            return False # Gagal
        except Exception as e:
            st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
            return False # Gagal
    elif model is not None:
         return True # Sudah terinisialisasi sebelumnya
    else:
         # Jika api_key_checked True tapi model masih None, berarti gagal sebelumnya
         st.error(""Konfigurasi API Key gagal sebelumnya. Periksa Secrets dan refresh halaman."")
         return False

# --- Fungsi untuk Membuat Prompt Troubleshooting ---
def buat_prompt_troubleshooting(masalah):
    # Prompt spesifik untuk langkah troubleshooting
    return f""""""
    Anda adalah seorang Network Engineer Senior yang sangat berpengalaman dalam troubleshooting jaringan dan sabar membimbing teknisi junior (siswa SMK TJKT). Anda berpikir secara sistematis dan logis.

    Seorang siswa melaporkan masalah jaringan berikut: '{masalah}'

    Tugas Anda:
    Buatlah daftar langkah-langkah troubleshooting dasar yang **sistematis dan berurutan** (mulai dari lapisan fisik jika memungkinkan) untuk membantu siswa mendiagnosis masalah tersebut. Fokus pada langkah-langkah **awal** yang bisa dilakukan dengan alat standar (seperti command prompt/terminal) atau pemeriksaan visual.

    Instruksi Spesifik:
    1.  Berikan **maksimal 6 langkah** troubleshooting yang paling relevan dan logis untuk masalah '{masalah}'.
    2.  Setiap langkah harus berupa **tindakan spesifik** yang bisa dilakukan siswa (misal: ""Periksa lampu indikator pada modem/router"", ""Lakukan ping ke alamat IP 8.8.8.8"").
    3.  Berikan **penjelasan singkat (1 kalimat)** untuk setiap langkah, menjelaskan **tujuan** dari langkah tersebut.
    4.  Urutkan langkah-langkah dari yang paling dasar/fisik menuju yang lebih logikal/software.
    5.  Gunakan bahasa yang jelas dan instruktif.

    Format Jawaban (Gunakan Markdown):

    ### Langkah Troubleshooting Dasar untuk: {masalah}

    Berikut adalah langkah-langkah awal yang bisa dicoba secara berurutan:

    1.  **Langkah 1: [Nama Tindakan]**
        * _Tujuan:_ [Penjelasan singkat tujuan langkah ini, 1 kalimat].
    2.  **Langkah 2: [Nama Tindakan]**
        * _Tujuan:_ [Penjelasan singkat tujuan langkah ini, 1 kalimat].
    3.  **Langkah 3: [Nama Tindakan]**
        * _Tujuan:_ [Penjelasan singkat tujuan langkah ini, 1 kalimat].
    ... (dan seterusnya, maksimal 6)

    ---
    **Penting:**
    * Lakukan langkah-langkah ini secara **berurutan**. Jika masalah teratasi di satu langkah, Anda mungkin tidak perlu melanjutkan ke langkah berikutnya.
    * Ini adalah panduan **dasar**. Masalah jaringan bisa kompleks. Jika langkah-langkah ini tidak berhasil, catat hasil dari setiap langkah dan konsultasikan dengan guru atau teknisi yang lebih berpengalaman.
    """"""

# --- Interface Pengguna Streamlit ---
st.subheader(""Deskripsikan Masalah Jaringan yang Dihadapi:"")
masalah_input = st.text_area(""Contoh: Laptop tidak bisa konek ke WiFi sekolah, Internet lambat saat browsing, Tidak bisa ping ke google.com"", height=100)

troubleshoot_button = st.button(""Mulai Troubleshooting"", type=""primary"")

# --- Logika Saat Tombol Ditekan ---
if troubleshoot_button:
    # ---- Panggil Inisialisasi Model DI SINI ----
    model_ready = initialize_model()

    if model_ready: # Hanya lanjut jika model berhasil diinisialisasi
        # Validasi input
        if not masalah_input:
            st.warning(""Mohon deskripsikan masalah jaringan terlebih dahulu."")
        else:
            # Buat prompt jika input valid
            prompt_final_troubleshoot = buat_prompt_troubleshooting(masalah_input)

            with st.spinner(f""🛠️ AI sedang menyusun langkah troubleshooting...""):
                try:
                    # Kirim ke Gemini (model sudah pasti ada jika model_ready True)
                    response = model.generate_content(prompt_final_troubleshoot)

                    # Cek safety
                    if response.parts:
                        jawaban_ai_troubleshoot = response.text
                    else:
                        # ... (penanganan safety tetap sama) ...
                        jawaban_ai_troubleshoot = ""**Permintaan diblokir karena alasan keamanan.**""
                        st.warning(""Respons AI mungkin diblokir..."")

                    # Tampilkan hasil
                    st.divider()
                    st.subheader(f""📋 Langkah Troubleshooting untuk '{masalah_input}':"")
                    st.markdown(jawaban_ai_troubleshoot)

                except Exception as e:
                    # Tangani error
                    st.error(f""Terjadi kesalahan saat menghubungi AI: {e}"")
                    st.info(""Tips: Coba lagi beberapa saat..."")
    else:
        # Pesan jika model gagal inisialisasi (sudah ditampilkan di dalam fungsi initialize_model)
        pass # Tidak perlu pesan tambahan

# --- Footer ---
st.divider()
st.markdown(""Aplikasi TJKT Troubleshooting Jaringan | Dibuat dengan Streamlit & Google Gemini"")"
5977zmvS,aplikasi-tjkt-penjelas-istilah-jaringan.py,saindras,Python,Tuesday 21st of October 2025 06:16:19 AM CDT,"import streamlit as st
import os
import google.generativeai as genai

# --- Konfigurasi Halaman Streamlit ---
st.set_page_config(page_title=""Penjelas Istilah Jaringan TJKT"", page_icon=""🌐"", layout=""wide"")
st.title(""🌐 Penjelas Istilah Jaringan & Telekomunikasi"")
st.caption(""Didukung oleh KA Generatif (Gemini)"")

# --- Konfigurasi API Key & Model Gemini ---
api_key_checked = False
model = None

# --- Fungsi untuk Inisialisasi Model (Dipanggil saat dibutuhkan) ---
def initialize_model():
    global model, api_key_checked
    if model is None and not api_key_checked: # Hanya inisialisasi sekali
        api_key_checked = True # Tandai sudah dicek
        try:
            # Menggunakan GOOGLE_API_KEY
            api_key = os.environ['GOOGLE_API_KEY']
            genai.configure(api_key=api_key)
            # Menggunakan model LLM Gemini
            model = genai.GenerativeModel('models/gemini-2.0-flash-lite')
            st.success(""API Key & Model KA berhasil dikonfigurasi."")
            return True # Berhasil
        except KeyError:
            st.error(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
            st.info(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets di Replit."")
            return False # Gagal
        except Exception as e:
            st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
            return False # Gagal
    elif model is not None:
         return True # Sudah terinisialisasi sebelumnya
    else:
         # Jika api_key_checked True tapi model masih None, berarti gagal sebelumnya
         st.error(""Konfigurasi API Key gagal sebelumnya. Periksa Secrets dan refresh halaman."")
         return False

# --- Fungsi untuk Membuat Prompt Penjelasan Istilah ---
def buat_prompt_istilah(istilah):
    # Prompt spesifik untuk menjelaskan istilah jaringan
    return f""""""
    Anda adalah seorang tutor ahli jaringan komputer dan telekomunikasi (TJKT) yang sangat pandai menyederhanakan konsep kompleks untuk siswa SMK. Gunakan bahasa yang mudah dipahami, hindari jargon berlebihan kecuali jika dijelaskan, dan fokus pada pemahaman konseptual.

    Seorang siswa SMK TJKT bertanya tentang istilah/konsep berikut: '{istilah}'

    Tugas Anda:
    Jelaskan istilah/konsep '{istilah}' tersebut dengan cara berikut:

    1.  **Definisi Singkat:** Berikan definisi dasar (1-2 kalimat) tentang apa itu '{istilah}'.
    2.  **Analogi Sederhana:** Buatlah sebuah analogi yang mudah dipahami (misalnya, membandingkan dengan pengiriman surat, lalu lintas jalan raya, nomor telepon) untuk menjelaskan cara kerja atau fungsi utama dari '{istilah}'. Analogi ini **wajib** ada dan harus relevan.
    3.  **Penjelasan Cara Kerja (Jika Relevan):** Jika memungkinkan dan relevan (terutama untuk protokol atau proses), jelaskan secara singkat langkah-langkah utama cara kerjanya (gunakan poin-poin atau urutan sederhana). Jika tidak relevan (misalnya untuk perangkat keras), lewati bagian ini atau jelaskan fungsi utamanya.
    4.  **Pentingnya/Kegunaan:** Jelaskan mengapa '{istilah}' ini penting dalam dunia jaringan atau telekomunikasi (1-2 kalimat).

    Format Jawaban (Gunakan Markdown):

    ### Penjelasan: {istilah}

    **1. Definisi Singkat:**
    [Definisi dasar 1-2 kalimat]

    **2. Analogi Sederhana:**
    Bayangkan seperti ini: [Analogi sederhana yang relevan dan mudah dipahami]

    **3. Cara Kerja / Fungsi Utama:**
    (Jika Relevan)
    * [Langkah/Fungsi 1]
    * [Langkah/Fungsi 2]
    * [dst.]
    (Jika Tidak Relevan)
    [Jelaskan fungsi utama secara singkat]

    **4. Mengapa Ini Penting?**
    [Penjelasan singkat kegunaan/pentingnya 1-2 kalimat]

    ---
    **Ingat:** Penjelasan ini adalah penyederhanaan untuk pemahaman awal. Untuk detail teknis yang mendalam, selalu rujuk buku teks, dokumentasi resmi (RFC jika ada), atau tanyakan pada guru Anda.
    """"""

# --- Interface Pengguna Streamlit ---
st.subheader(""Masukkan Istilah Jaringan atau Telekomunikasi:"")
istilah_input = st.text_input(""Contoh: TCP/IP, Router, DNS, Subnetting, OSI Layer, Firewall, Kabel UTP Cat 6"")

troubleshoot_button = st.button(""Mulai Troubleshooting"", type=""primary"")

# --- Logika Saat Tombol Ditekan ---
if troubleshoot_button:
    # ---- Panggil Inisialisasi Model DI SINI ----
    model_ready = initialize_model()

    if model_ready: # Hanya lanjut jika model berhasil diinisialisasi
        # Validasi input
        if not istilah_input:
            st.warning(""Mohon deskripsikan masalah jaringan terlebih dahulu."")
        else:
            # Buat prompt jika input valid
            prompt_final_troubleshoot = buat_prompt_istilah(istilah_input)

            with st.spinner(f""🛠️ KA sedang menyusun langkah troubleshooting...""):
                try:
                    # Kirim ke Gemini (model sudah pasti ada jika model_ready True)
                    response = model.generate_content(prompt_final_troubleshoot)

                    # Cek safety
                    if response.parts:
                        jawaban_ai_troubleshoot = response.text
                    else:
                        # ... (penanganan safety tetap sama) ...
                        jawaban_ai_troubleshoot = ""**Permintaan diblokir karena alasan keamanan.**""
                        st.warning(""Respons AI mungkin diblokir..."")

                    # Tampilkan hasil
                    st.divider()
                    st.subheader(f""📋 Langkah Troubleshooting untuk '{istilah_input}':"")
                    st.markdown(jawaban_ai_troubleshoot)

                except Exception as e:
                    # Tangani error
                    st.error(f""Terjadi kesalahan saat menghubungi KA: {e}"")
                    st.info(""Tips: Coba lagi beberapa saat..."")
    else:
        # Pesan jika model gagal inisialisasi (sudah ditampilkan di dalam fungsi initialize_model)
        pass # Tidak perlu pesan tambahan

# --- Footer ---
st.divider()
st.markdown(""Aplikasi TJKT Penjelas Istilah | Dibuat dengan Streamlit & Google Gemini"")"
ng41BB85,aplikasi-dpib-generator-konsep-desain-awal-bangunan.py,saindras,Python,Tuesday 21st of October 2025 06:10:45 AM CDT,"import streamlit as st
import os
import google.generativeai as genai

# --- Konfigurasi Halaman Streamlit ---
st.set_page_config(page_title=""Generator Konsep Desain DPIB"", page_icon=""🏛️"", layout=""wide"")
st.title(""🏛️ Generator Konsep Desain Awal Bangunan"")
st.caption(""Didukung oleh KA Generatif (Gemini)"")

# --- Konfigurasi API Key & Model Gemini ---
api_key_configured = False
model = None

def initialize_model():
    global model, api_key_configured
    if model is None and not api_key_configured: # Hanya inisialisasi sekali
        api_key_configured = True # Tandai sudah dicek
        try:
            # Menggunakan GOOGLE_API_KEY
            api_key = os.environ['GOOGLE_API_KEY']
            genai.configure(api_key=api_key)
            # Menggunakan model LLM Gemini
            model = genai.GenerativeModel('models/gemini-2.0-flash-lite')
            st.success(""API Key & Model KA berhasil dikonfigurasi."")
            return True # Berhasil
        except KeyError:
            st.error(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
            st.info(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets di Replit."")
            return False # Gagal
        except Exception as e:
            st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
            return False # Gagal
    elif model is not None:
         return True # Sudah terinisialisasi sebelumnya
    else:
         # Jika api_key_configured True tapi model masih None, berarti gagal sebelumnya
         st.error(""Konfigurasi API Key gagal sebelumnya. Periksa Secrets dan refresh halaman."")
         return False

# Konfigurasi library genai jika API Key ditemukan
if api_key_configured:
    try:
        # Menggunakan nama model 'gemini-pro-latest'
        model = genai.GenerativeModel('models/gemini-pro-latest')
        st.info(""Model Generative KA ('gemini-pro-latest') siap digunakan."")
    except Exception as e:
        st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
        st.stop()

# --- Fungsi untuk Membuat Prompt Konsep Desain ---
def buat_prompt_konsep(gaya, fungsi, lantai):
    # Prompt spesifik untuk konsep desain awal
    return f""""""
    Anda adalah seorang asisten arsitek kreatif yang membantu siswa SMK DPIB memvisualisasikan ide desain awal dalam bentuk narasi singkat. Anda bertugas sebagai teman brainstorming.

    Parameter Desain yang diberikan Siswa:
    - Gaya Arsitektur: '{gaya}'
    - Fungsi Bangunan: '{fungsi}'
    - Jumlah Lantai: {lantai}

    Tugas Anda:
    Buatlah sebuah **deskripsi naratif singkat (sekitar 2-3 paragraf)** mengenai konsep desain awal yang sesuai dengan parameter tersebut. Deskripsi harus membangkitkan imajinasi dan mencakup ide-ide awal tentang:

    1.  **Keseluruhan Tampilan & Nuansa:** Bagaimana kesan pertama bangunan tersebut?
    2.  **Tata Ruang (Ide Umum):** Bagaimana kemungkinan penataan ruang utama secara garis besar? Apakah terbuka, tertutup, fungsional?
    3.  **Bentuk Atap (Saran):** Sebutkan satu atau dua ide bentuk atap yang cocok dengan gaya tersebut (misal: atap datar, pelana, limasan, miring sebelah).
    4.  **Material Dominan (Saran):** Sebutkan satu atau dua material utama yang mungkin menonjol sesuai gaya dan fungsi (misal: beton ekspos, kayu, kaca, bata).
    5.  Gunakan bahasa yang deskriptif dan inspiratif, namun tetap relevan dengan parameter yang diberikan.

    Format Jawaban (Gunakan Markdown):

    ### Konsep Desain Awal

    **Gaya:** {gaya} | **Fungsi:** {fungsi} | **Lantai:** {lantai}

    [Paragraf 1: Deskripsi tampilan umum dan nuansa bangunan sesuai gaya]

    [Paragraf 2: Ide tentang tata ruang utama dan saran bentuk atap yang sesuai]

    [Paragraf 3: Saran material dominan yang mendukung konsep dan gaya]

    ---
    **Ingat:** Ini hanyalah **konsep awal** untuk inspirasi. Desain detail memerlukan analisis tapak, kebutuhan pengguna yang lebih spesifik, perhitungan struktur, dan pertimbangan lainnya.
    """"""

# --- Interface Pengguna Streamlit ---
st.subheader(""Masukkan Parameter Desain:"")

# Input Kolom Berdampingan
col1, col2, col3 = st.columns(3)
with col1:
    gaya_input = st.text_input(""Gaya Arsitektur"", placeholder=""Minimalis, Tropis Modern, Industrial"")
with col2:
    fungsi_input = st.text_input(""Fungsi Bangunan"", placeholder=""Rumah Tinggal, Ruko 2 Lantai, Cafe"")
with col3:
    lantai_input = st.number_input(""Jumlah Lantai"", min_value=1, step=1, format=""%d"", value=1) # Default 1 lantai

buat_konsep_button = st.button(""Buat Konsep Desain Awal"", type=""primary"")

# --- Logika Saat Tombol Ditekan ---
if buat_konsep_button:
    model_ready = initialize_model()
    # Validasi input
    if not gaya_input:
        st.warning(""Mohon masukkan Gaya Arsitektur."")
    elif not fungsi_input:
        st.warning(""Mohon masukkan Fungsi Bangunan."")
    elif lantai_input < 1:
        st.warning(""Jumlah lantai minimal 1."")
    else:
        # Buat prompt jika input valid
        prompt_final_konsep = buat_prompt_konsep(gaya_input, fungsi_input, lantai_input)

        with st.spinner(""✨ KA sedang merancang konsep... Menunggu inspirasi...""):
            try:
                # Kirim ke Gemini
                response = model.generate_content(prompt_final_konsep)

                # Cek safety
                if response.parts:
                    jawaban_ai_konsep = response.text
                else:
                    try:
                        safety_feedback = response.prompt_feedback
                        jawaban_ai_konsep = f""**Permintaan diblokir karena alasan keamanan.**\n\nDetail:\n{safety_feedback}""
                    except Exception:
                         jawaban_ai_konsep = ""**Permintaan diblokir karena alasan keamanan.** Tidak ada detail tambahan tersedia.""
                         st.warning(""Respons AI mungkin diblokir karena kebijakan keamanan."")

                # Tampilkan hasil
                st.divider() # Garis pemisah
                st.subheader(""💡 Konsep Desain Awal:"")
                st.markdown(jawaban_ai_konsep) # Gunakan markdown

            except Exception as e:
                # Tangani error
                st.error(f""Terjadi kesalahan saat menghubungi KA: {e}"")
                st.info(""Tips: Coba lagi beberapa saat. Pastikan API Key valid dan parameter desain cukup jelas."")

# --- Footer ---
st.divider()
st.markdown(""Aplikasi DPIB Konsep Desain | Dibuat dengan Streamlit & Google Gemini"")"
9YgYicSN,aplikasi-dpib-informasi-material-bangunan.py,saindras,Python,Tuesday 21st of October 2025 06:03:03 AM CDT,"import streamlit as st
import os
import google.generativeai as genai

# --- Konfigurasi Halaman Streamlit ---
st.set_page_config(page_title=""Info Material Bangunan DPIB"", page_icon=""🧱"", layout=""wide"")
st.title(""🧱 Asisten Informasi Material Bangunan"")
st.caption(""Didukung oleh KA Generatif (Gemini)"")

# --- Konfigurasi API Key & Model Gemini ---
api_key_configured = False
model = None

# --- Fungsi untuk Inisialisasi Model (Dipanggil saat dibutuhkan) ---
def initialize_model():
    global model, api_key_configured
    if model is None and not api_key_configured: # Hanya inisialisasi sekali
        api_key_configured= True # Tandai sudah dicek
        try:
            # Menggunakan GOOGLE_API_KEY
            api_key = os.environ['GOOGLE_API_KEY']
            genai.configure(api_key=api_key)
            # Menggunakan model LLM Gemini
            model = genai.GenerativeModel('models/gemini-2.0-flash-lite')
            st.success(""API Key & Model KA berhasil dikonfigurasi."")
            return True # Berhasil
        except KeyError:
            st.error(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
            st.info(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets di Replit."")
            return False # Gagal
        except Exception as e:
            st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
            return False # Gagal
    elif model is not None:
         return True # Sudah terinisialisasi sebelumnya
    else:
         # Jika api_key_configuredTrue tapi model masih None, berarti gagal sebelumnya
         st.error(""Konfigurasi API Key gagal sebelumnya. Periksa Secrets dan refresh halaman."")
         return False
# Konfigurasi library genai jika API Key ditemukan
if api_key_configured:
    try:
        # Nama model yang akan digunakan
        model = genai.GenerativeModel('models/gemini-2.0-flash-lite')
        st.info(""Model Generative KA ('models/gemini-2.0-flash-lite') siap digunakan."")
    except Exception as e:
        st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
        st.stop()

# --- Fungsi untuk Membuat Prompt Material ---
def buat_prompt_material(nama_material):
    # Prompt spesifik untuk informasi material
    return f""""""
    Anda adalah seorang ahli material bangunan dan arsitektur yang bertugas menjelaskan konsep kepada siswa SMK jurusan DPIB (Desain Pemodelan dan Informasi Bangunan). Gunakan bahasa yang jelas, informatif, dan mudah dipahami oleh pemula.

    Siswa ingin mengetahui informasi tentang material bangunan berikut: '{nama_material}'

    Tugas Anda:
    Berikan deskripsi ringkas namun komprehensif tentang material tersebut, mencakup poin-poin berikut:

    1.  **Deskripsi Umum:** Jelaskan secara singkat apa material itu.
    2.  **Karakteristik Utama:** Sebutkan 3-4 sifat atau ciri khas utama dari material ini (misal: kekuatan, bobot, ketahanan air, isolasi termal, dll.).
    3.  **Kelebihan:** Sebutkan 2-3 keuntungan utama menggunakan material ini dalam konstruksi.
    4.  **Kekurangan:** Sebutkan 2-3 keterbatasan atau kerugian utama dari material ini.
    5.  **Penggunaan Umum:** Berikan 2-3 contoh aplikasi atau bagian bangunan di mana material ini sering digunakan.

    Format Jawaban (Gunakan Markdown):

    ### Informasi Material: {nama_material}

    **1. Deskripsi Umum:**
    [Penjelasan singkat material]

    **2. Karakteristik Utama:**
    * [Karakteristik 1]: [Penjelasan singkat]
    * [Karakteristik 2]: [Penjelasan singkat]
    * [Karakteristik 3]: [Penjelasan singkat]
    * [Karakteristik 4 (jika relevan)]: [Penjelasan singkat]

    **3. Kelebihan:**
    * [Kelebihan 1]
    * [Kelebihan 2]
    * [Kelebihan 3 (jika relevan)]

    **4. Kekurangan:**
    * [Kekurangan 1]
    * [Kekurangan 2]
    * [Kekurangan 3 (jika relevan)]

    **5. Penggunaan Umum:**
    * [Contoh penggunaan 1]
    * [Contoh penggunaan 2]
    * [Contoh penggunaan 3 (jika relevan)]

    ---
    **Catatan Penting:**
    * Informasi ini bersifat **umum**. Sifat dan spesifikasi material dapat bervariasi tergantung pada produsen, kualitas, dan standar yang berlaku.
    * Selalu rujuk **data teknis (datasheet)** dari produsen dan konsultasikan dengan guru atau profesional untuk pemilihan material pada proyek spesifik.
    """"""

# --- Interface Pengguna Streamlit ---
st.subheader(""Masukkan Nama Material Bangunan:"")
material_input = st.text_input(""Contoh: Bata Ringan AAC, Baja WF, Kayu Meranti, Kaca Tempered"")

cari_info_button = st.button(""Cari Informasi Material"", type=""primary"")

# --- Logika Saat Tombol Ditekan ---
if cari_info_button:
	model_ready = initialize_model()
    # Validasi input
    if not material_input:
        st.warning(""Mohon masukkan nama material terlebih dahulu."")
    else:
        # Buat prompt jika input valid
        prompt_final_material = buat_prompt_material(material_input)

        with st.spinner(f""🤖 KA sedang mencari informasi tentang {material_input}... Mohon tunggu...""):
            try:
                # Kirim ke Gemini
                response = model.generate_content(prompt_final_material)
                # Cek apakah ada potensi diblokir karena safety
                if response.parts:
                    jawaban_ai_material = response.text
                else:
                    # Coba akses safety ratings jika ada, atau berikan pesan umum
                    try:
                        safety_feedback = response.prompt_feedback
                        jawaban_ai_material = f""**Permintaan diblokir karena alasan keamanan.**\n\nDetail:\n{safety_feedback}""
                    except Exception:
                         jawaban_ai_material = ""**Permintaan diblokir karena alasan keamanan.** Tidak ada detail tambahan tersedia.""
                         st.warning(""Respons KA mungkin diblokir karena kebijakan keamanan."")

                # Tampilkan hasil
                st.divider() # Garis pemisah
                st.subheader(f""📄 Informasi Mengenai {material_input}:"")
                st.markdown(jawaban_ai_material) # Gunakan markdown

            except Exception as e:
                # Tangani error
                st.error(f""Terjadi kesalahan saat menghubungi KA: {e}"")
                st.info(""Tips: Coba lagi beberapa saat. Pastikan API Key valid dan nama material cukup umum dikenal."")

# --- Footer (Opsional) ---
st.divider()
st.markdown(""Aplikasi DPIB Info Material | Dibuat dengan Streamlit & Google Gemini"")"
6XsDN7ba,ActionFlashlightDrain,salexniks,C#,Tuesday 21st of October 2025 05:48:33 AM CDT,"using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace AC
{
    [System.Serializable]
    public class ActionFlashlightDrain : Action
    {
        // Declare properties
        public override ActionCategory Category { get { return ActionCategory.Custom; } }
        public override string Title { get { return ""Flashlight: Drain Battery""; } }
        public override string Description { get { return ""Drains battery power over time while the flashlight is on.""; } }

        // Variables
        public int batteryVariableID = 0; // Global Variable ID (Float)
        public float drainAmount = 5f; // Battery drain amount per cycle
        public float drainInterval = 30f; // Time before each drain
        public bool flashlightOn = true; // Is flashlight active?

        private bool firstRun = true; // Check if it's the first time running

        public override float Run()
        {
            if (!isRunning)
            {
                isRunning = true;
                return drainInterval; // Wait first before draining
            }
            else
            {
                // Get the battery variable
                GVar batteryVar = GlobalVariables.GetVariable(batteryVariableID);
                if (batteryVar != null && batteryVar.type == VariableType.Float)
                {
                    if (flashlightOn && batteryVar.FloatValue > 0)
                    {
                        batteryVar.FloatValue = Mathf.Max(0, batteryVar.FloatValue - drainAmount);
                        return drainInterval; // Wait again before next drain
                    }
                }

                isRunning = false;
                return 0f; // Stop if flashlight is off or battery is empty
            }
        }

#if UNITY_EDITOR
        public override void ShowGUI()
        {
            // Custom UI in AC editor
            batteryVariableID = EditorGUILayout.IntField(""Battery Variable ID:"", batteryVariableID);
            drainAmount = EditorGUILayout.FloatField(""Drain Amount:"", drainAmount);
            drainInterval = EditorGUILayout.FloatField(""Drain Interval (sec):"", drainInterval);
            flashlightOn = EditorGUILayout.Toggle(""Is Flashlight On?"", flashlightOn);
        }

        public override string SetLabel()
        {
            return ""Drains "" + drainAmount + "" every "" + drainInterval + ""s from Battery ID "" + batteryVariableID;
        }
#endif
    }
}






"
rxcY3he2,aplikasi-tkr-diagnostik-kendaraan.py,saindras,Python,Tuesday 21st of October 2025 05:42:28 AM CDT,"import streamlit as st
import os
import google.generativeai as genai

# --- Konfigurasi Halaman Streamlit ---
st.set_page_config(page_title=""Asisten Diagnostik TKR"", page_icon=""🛠️"", layout=""wide"")
st.title(""🛠️ Asisten Diagnostik Awal Kendaraan"")
st.caption(""Didukung oleh KA Generatif (Gemini)"")

# --- Konfigurasi API Key & Model Gemini ---
api_key_configured = False
model = None

# --- Fungsi untuk Inisialisasi Model (Dipanggil saat dibutuhkan) ---
def initialize_model():
    global model, api_key_configured
    if model is None and not api_key_configured: # Hanya inisialisasi sekali
        api_key_configured = True # Tandai sudah dicek
        try:
            # Menggunakan GOOGLE_API_KEY
            api_key = os.environ['GOOGLE_API_KEY']
            genai.configure(api_key=api_key)
            # Menggunakan model LLM Gemini
            model = genai.GenerativeModel('models/gemini-2.0-flash-lite')
            st.success(""API Key & Model KA berhasil dikonfigurasi."")
            return True # Berhasil
        except KeyError:
            st.error(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
            st.info(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets di Replit."")
            return False # Gagal
        except Exception as e:
            st.error(f""Error saat mengkonfigurasi atau memuat model KA: {e}"")
            return False # Gagal
    elif model is not None:
         return True # Sudah terinisialisasi sebelumnya
    else:
         # Jika api_key_configured True tapi model masih None, berarti gagal sebelumnya
         st.error(""Konfigurasi API Key gagal sebelumnya. Periksa Secrets dan refresh halaman."")
         return False

# --- Fungsi untuk Membuat Prompt ---
def buat_prompt(gejala):
    # Prompt yang sama detailnya seperti sebelumnya
    return f""""""
    Anda adalah seorang mekanik senior TKR (Teknik Kendaraan Ringan) yang sangat berpengalaman dan sabar dalam menjelaskan kepada siswa SMK.

    Seorang siswa melaporkan gejala kerusakan kendaraan berikut: '{gejala}'
    Tugas Anda:
    1. Analisis gejala tersebut.
    2. Berikan daftar kemungkinan penyebab umum kerusakan tersebut (maksimal 5 penyebab). Urutkan dari yang paling mungkin terjadi.
    3. Untuk setiap kemungkinan penyebab, berikan 1-2 langkah diagnostik awal yang SANGAT SEDERHANA dan AMAN yang bisa diperiksa oleh siswa TKR dengan pengawasan guru (misalnya cek visual, cek level cairan, mendengarkan suara). Hindari langkah yang memerlukan alat khusus atau pembongkaran kompleks di tahap awal ini.
    4. Gunakan bahasa yang teknis namun mudah dipahami oleh siswa SMK TKR. Berikan penjelasan singkat mengapa gejala itu bisa terkait dengan penyebab tersebut.

    Format Jawaban (Gunakan Markdown):
    **Kemungkinan Penyebab:**
    1. **[Nama Penyebab 1]:** [Penjelasan singkat kaitan gejala dengan penyebab].
       * _Langkah Diagnostik Awal:_ [Langkah 1]
       * _Langkah Diagnostik Awal:_ [Langkah 2 (jika ada)]
    2. **[Nama Penyebab 2]:** [Penjelasan singkat kaitan gejala dengan penyebab].
       * _Langkah Diagnostik Awal:_ [Langkah 1]
       * _Langkah Diagnostik Awal:_ [Langkah 2 (jika ada)]
    ... (dan seterusnya, maksimal 5)

    ---
    **Penting:** Ingatkan siswa bahwa ini hanyalah **diagnostik awal**. Pemeriksaan dan perbaikan lebih lanjut harus dilakukan oleh mekanik profesional atau di bawah pengawasan ketat guru praktik di bengkel sekolah.
    """"""

# --- Interface Pengguna Streamlit ---
st.subheader(""Deskripsikan Gejala Kerusakan:"")
gejala_input = st.text_area(""Contoh: Mesin mobil tidak mau menyala saat distarter, hanya bunyi 'klik'."", height=100)
diagnosa_button = st.button(""Mulai Diagnostik Awal"", type=""primary"")

# --- Logika Saat Tombol Ditekan ---
if diagnosa_button:
    model_ready = initialize_model()
    if model_ready: # Hanya lanjut jika model berhasil diinisialisasi
        #validasi input
        if not gejala_input:
            st.warning(""Mohon masukkan deskripsi gejala terlebih dahulu."")
        else:
            prompt_final = buat_prompt(gejala_input)
            with st.spinner(""🤖 KA sedang menganalisis gejala... Mohon tunggu sebentar...""):
                try:
                    response = model.generate_content(prompt_final)
                    jawaban_ai = response.text
                    st.divider() # Garis pemisah
                    st.subheader(""🔬 Hasil Analisis KA:"")
                    st.markdown(jawaban_ai) # Gunakan markdown untuk format yang lebih baik
                except Exception as e:
                    st.error(f""Terjadi kesalahan saat menghubungi KA: {e}"")
                    st.info(""Tips: Coba lagi beberapa saat. Pastikan API Key valid dan tidak melebihi batas penggunaan."")
    else: # Pesan jika model gagal inisialisasi (sudah ditampilkan di dalam fungsi initialize_model)
        pass

# --- Footer ---
st.divider()
st.markdown(""Aplikasi TKR Diagnostik Kendaraan | Dibuat dengan Streamlit & Google Gemini"")"
JmUDk6QB,ДЗ: Сортировка чисел,NikaBang,C#,Tuesday 21st of October 2025 05:40:00 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[] numbers = new int[20];
        int minRandom = 1;
        int maxRandom = 10;
        Random random = new Random();

        Console.WriteLine(""Исходный массив:"");

        for (int i = 0; i < numbers.Length; i++)
        {
            numbers[i] = random.Next(minRandom, maxRandom);
            Console.Write(numbers[i] + "" "");
        }

        for (int i = 0; i < numbers.Length - 1; i++)
        {
            for (int j = 0; j < numbers.Length - 1; j++)
            {
                if (numbers[j] > numbers[j + 1])
                {
                    int tempNumber = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = tempNumber;
                }
            }
        }

        Console.WriteLine(""\nОтсортированный массив: "");
        Console.WriteLine(string.Join("" "", numbers));
        Console.ReadKey();
    }
}"
zPan9WdT,Sinistea Antique Filter,name8888less,JavaScript,Tuesday 21st of October 2025 05:32:25 AM CDT,"javascript:$.getScript(""https://cdn.jsdelivr.net/gh/name8888less/sgpokemap-addons/sinestea-antique.min.js"", function(data, textStatus, jqxhr) {});"
Uptr3N2k,chatbot_skanbara.py,saindras,Python,Tuesday 21st of October 2025 04:33:19 AM CDT,"import streamlit as st
import google.generativeai as genai
import os
import time

# --- Konfigurasi Awal
try:
    api_key = os.environ['GOOGLE_API_KEY']
    genai.configure(api_key=api_key)
except KeyError:
    st.error(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
    st.info(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets di Replit."")
    st.stop()

# --- Definisi Persona ---
NAMA_BOT = ""Chatbot Skanbara""
PERSONA = f""""""
Anda adalah {NAMA_BOT}, sebuah robot asisten informasi virtual yang ramah dan membantu.
Tugas utama Anda adalah menjawab pertanyaan seputar SMK Negeri Bali Mandara (Skanbara) di Singaraja.
Anda juga memiliki pengetahuan mengenai Kota Singaraja, Kabupaten Buleleng, dan Pulau Bali secara umum.
Jawablah pertanyaan dengan sopan, jelas, dan informatif dalam Bahasa Indonesia.
Jika Anda tidak tahu jawabannya, katakan terus terang bahwa Anda tidak memiliki informasi tersebut, jangan mengarang.
Selalu identifikasi diri Anda sebagai {NAMA_BOT} jika ditanya siapa Anda.
""""""
# ---------------------

# Inisialisasi model
model_name = 'models/gemini-2.0-flash-lite'
try:
    # Menggunakan system_instruction untuk persona
    model = genai.GenerativeModel(
        model_name,
        system_instruction=PERSONA # Menambahkan persona di sini
        )
    # Membuat sesi chat untuk menjaga konteks (lebih baik untuk chatbot)
    chat = model.start_chat(history=[])

except Exception as e:
    st.error(f""Terjadi kesalahan saat inisialisasi model: {e}"")
    st.info(""Pastikan nama model sudah benar dan mendukung system_instruction."")
    st.stop()
# --------------------------------------------------

# --- Pengaturan Interface (Streamlit) ---
st.title(f""🤖 {NAMA_BOT}"")
st.caption(""Asisten Informasi Virtual SMK Negeri Bali Mandara"")

# Inisialisasi riwayat chat jika belum ada
if ""messages"" not in st.session_state:
    st.session_state.messages = []
    # Pesan sapaan awal sesuai persona
    st.session_state.messages.append({""role"": ""assistant"", ""content"": f""Halo! Saya {NAMA_BOT}. Saya adalah robot asisten informasi di SMK Negeri Bali Mandara. Ada yang bisa saya bantu? 😊""})

# Tampilkan riwayat chat
for message in st.session_state.messages:
    with st.chat_message(message[""role""]):
        st.markdown(message[""content""])

# Input dari pengguna
prompt_pengguna = st.chat_input(""Tanyakan sesuatu pada Chatbot Skanbara..."")

if prompt_pengguna:
    # Tambahkan pesan pengguna ke riwayat chat dan tampilkan
    st.session_state.messages.append({""role"": ""user"", ""content"": prompt_pengguna})
    with st.chat_message(""user""):
        st.markdown(prompt_pengguna)

    # Kirim prompt ke Gemini dan tampilkan respons
    with st.chat_message(""assistant""):
        message_placeholder = st.empty()
        message_placeholder.markdown(""Mohon menunggu...⚙️"")
        try:
            # Mengirim prompt ke model Gemini menggunakan sesi chat       
            response = chat.send_message(prompt_pengguna) # Menggunakan sesi chat

            # Menampilkan respons            
            full_response = """"
            if hasattr(response, 'text'):
                 full_response = response.text
            elif hasattr(response, 'parts') and response.parts:
                 full_response = """".join(part.text for part in response.parts)
            else:
                 # Cek kandidat jika struktur berbeda
                 if response.candidates and response.candidates[0].content.parts:
                      full_response = """".join(part.text for part in response.candidates[0].content.parts)

            if full_response:
                message_placeholder.markdown(full_response)
                # Tambahkan respons KA ke riwayat chat
                st.session_state.messages.append({""role"": ""assistant"", ""content"": full_response})
            else:
                fallback_msg = ""Maaf, saya tidak dapat memproses permintaan Anda saat ini.""
                message_placeholder.markdown(fallback_msg)
                st.session_state.messages.append({""role"": ""assistant"", ""content"": fallback_msg})


        except Exception as e:
            st.error(f""Terjadi kesalahan saat mengirim prompt: {e}"")
            error_msg = f""Maaf, terjadi kendala: {e}""
            message_placeholder.markdown(error_msg)
            st.session_state.messages.append({""role"": ""assistant"", ""content"": error_msg})"
vgKJZSNS,TI-LAB2-CSS,ddeexxiikk,CSS,Tuesday 21st of October 2025 03:44:24 AM CDT,"@charset ""UTF-8"";

html {
    background: white;
}

#kontener {
    width: 90%;
    margin: auto;
    font-family: ""Tahoma"", ""sans-serif"";
    font-size: 1rem;
}

#naglowek {
    width: 100%;
    background: #ccc;
    text-align: center;
    padding: 0.5rem 0;
    box-sizing: border-box;
}

#naglowek h1 {
    margin: 0;
    padding: 1rem;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: clamp(1.5rem, 6vw, 3.5rem);
    line-height: 1;
    overflow: hidden;
    box-sizing: border-box;
}

#srodek {
margin-top: 1rem;
}

#stopka {
background: #888;
color: white;
padding: 0.2rem;
text-align: center;
}

#menu {
    width: 10rem;
    float: left;
    margin-right: 1rem;
}

@media only screen and (min-width: 641px) {
    .hamburger-button {
        display: none;
    }

    .menu-list {
        display: block !important;
    }
}

#newsy {
    background: #ddd;
    padding: 0 0.3rem 0.3rem;
}

#tresc {
    background: #ccc;
    text-align: justify;
    padding: 0.5rem;
    margin-left: 11rem;
    margin-bottom: 1rem;
}

#stopka {
    clear: both;
    background: #888;
    color: white;
    padding: 0.2rem;
    text-align: center;
}

.hamburger-checkbox {
    position: absolute;
    left: -9999px;
    width: 1px;
    height: 1px;
    overflow: hidden;
}

.hamburger-icon {
    display: none;
    flex-direction: column;
    cursor: pointer;
    padding: 10px 0;
    background: #fff;
    margin-bottom: 0.5rem;
    border: 0;
    align-items: center;
    justify-content: center;
}

.hamburger-icon span {
    width: 30px;
    height: 3px;
    background-color: #333;
    margin: 4px 0;
    transition: 0.3s;
    border-radius: 2px;
    display: block;
}

.menu-list {
    display: block;
}

.menu-list li {
    list-style: none;
    font-size: 90%;
}

.menu-list a {
    text-decoration: none;
    color: black;
    background: #eee;
    padding: 0.3rem;
    margin-bottom: 0.5rem;
    display: block;
    text-align: center;
    transition: all 0.5s ease-in-out;
}

.menu-list a:hover {
    background: #888;
    color: white;
}

@media only screen and (max-width: 640px) {
    #menu {
        width: 100%;
        padding: 0;
    }

    #tresc {
        margin-left: 0;
        clear: both;
    }

    #newsy {
        text-align: center;
        background: #aaa;
    }

    #kontener {
        min-width: 320px;;
        width: 100%;
    }

    .hamburger-icon {
        display: flex;
    }

    .menu-list {
        display: none;
        width: 100%;
        padding: 0;
        margin: 0.25rem 0;
    }

    .hamburger-checkbox:checked + .hamburger-icon + .menu-list {
        display: block;
    }

    #menu ul {
        margin: 0;
        padding: 0;
    }
}"
CywHWW1m,chatbot_sederhana.py,saindras,Python,Tuesday 21st of October 2025 03:22:04 AM CDT,"import google.generativeai as genai
import os

# Ambil API Key dari Replit Secrets
try:
    api_key = os.environ['GOOGLE_API_KEY']
    genai.configure(api_key=api_key)
except KeyError:
    print(""Error: GOOGLE_API_KEY tidak ditemukan di Replit Secrets."")
    print(""Pastikan Anda sudah menambahkan GOOGLE_API_KEY ke bagian Secrets."")
    exit() # Keluar jika API Key tidak ada

# Inisialisasi model
# Gunakan nama model yang available
model_name = 'models/gemini-2.0-flash-lite'
print(f""Menginisialisasi model: {model_name}..."")
try:
    model = genai.GenerativeModel(model_name)
except Exception as e:
    print(f""\nTerjadi kesalahan saat inisialisasi model: {e}"")
    print(""Pastikan nama model sudah benar sesuai output list_models()."")
    exit()

# Definisikan prompt
prompt_teks = ""Jelaskan secara singkat apa itu Internet of Things (IoT) untuk siswa SMK TJKT.""

print(""Sedang mengirim prompt ke Gemini..."")

# Kirim prompt ke model
try:
    response = model.generate_content(prompt_teks)
    # Cetak respons dari KA
    print(""\nJawaban dari Gemini:"")
    # Periksa apakah ada teks dalam respons
    if response.parts:
         print(response.text)
    else:
         print(""Gemini tidak memberikan respons teks."")
except Exception as e:
    print(f""\nTerjadi kesalahan saat mengirim prompt: {e}"")
    print(""Pastikan API Key sudah benar, koneksi internet stabil, dan model yang dipilih mendukung generate_content."")"
Pw4h8vYQ,Untitled,didkozhaty,JavaScript,Tuesday 21st of October 2025 01:57:02 AM CDT,"function answerMatch(question) {
    const current = question ?? document.querySelector('.task-card[style]:not([style=""display: none;""])')
    $('input[name=result]', '#q'+quest_id).val().split(';')
        .map(el => current.querySelector(`[value=""${el}""]`))
        .forEach(el => {
            el.checked = true;
            el.nextSibling.click();
        })
    current.querySelector('.q-next').click()
}
function answerSingle(question) {
    const current = question ?? document.querySelector('.task-card[style]:not([style=""display: none;""])')
    const ans = current.querySelector(`[value=""${$('input[name=result]', '#q'+quest_id).val()}""]`);
    ans.checked = true;
    ans.nextSibling.click()
    current.querySelector('.q-next').click()
}
function answerAll() {
    document.getElementsByClassName('q1')[0].click()
    const questions = [...document.getElementById('wrap').children];
    questions.forEach(q => {
        if(q.querySelector('[name=""a""]'))
           answerSingle(q);
        else
            answerMatch(q);
    })
}
"
