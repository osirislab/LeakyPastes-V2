id,title,username,language,date,content
FPJYSFWq,Untitled,Josif_tepe,C++,Sunday 8th of June 2025 06:48:16 AM CDT,"#include <iostream>
#include <cstring>
using namespace std;
string a, b;
int dp[1001][1001];
int rec(int i, int j) {
    if(i < 0 or j < 0) {
        return 0;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    int res = 0;
    res = max(res, rec(i - 1, j));
    res = max(res, rec(i, j - 1));
    
    if(a[i] == b[j]) {
        res = max(res, rec(i - 1, j - 1) + 1);
    }
    dp[i][j] = res;
    return res;
}
int main()
{
    cin >> a >> b;
    memset(dp, -1, sizeof dp);
    cout << rec(a.size() - 1, b.size() - 1) << endl;
    
    return 0;
}
"
jLkmp8Ut,2025-06-08T13:40:04.280,powerampache,PHP,Sunday 8th of June 2025 06:40:04 AM CDT,"1.01-76 (76) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:938)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loop(Looper.java:236)
	at android.app.ActivityThread.main(ActivityThread.java:8061)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:656)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:967)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[],""suppressedExceptions"":[]}"
c9qu21NJ,dataNone,TestGuy1,JSON,Sunday 8th of June 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'aba446e77af8139e94254921546491b56ec24e4cc0ffa41b66baf423de826b2ce83dcb57c9bd18420e8ac71044d6f86511913556a95c39427d044361b0848e089047ae6993926f687bbe4146c89644b6ede3c989f73577e39e3e38db0b9bb13b8cb2bfa5d1b0614ad3a23f7d839b2e6dfa6b5877e6383b374c674f8bb7679535',
  otherdata: [
    '6612463442001a95108d500499c3809a',
    '6d85b241abdfbd500a18828ecdfef785',
    'ba5b12b133e246806ff13610847a755f',
    '8ab6f3edfc6d0a70818d5ac5e0230200',
    '8d927bae514f48692688744e823233bd',
    '8546011254e8e6bcc0467b299405fd64',
    'abb1e78c402d9c3966614b53ebd32611',
    'eb8e7bf3f1efa7cbec38c57f132456f6'
  ]
}"
uhvjbgt3,CLI Bludit,snick512,Bash,Sunday 8th of June 2025 05:05:38 AM CDT,"#!/bin/bash
# Create .page_config
# API_URL=""https://example.com/api/pages""
# TOKEN=""""
# AUTH=""""
# 
set -euo pipefail

# Load secure configuration
CONFIG_FILE="".page_config""
if [[ ! -f ""$CONFIG_FILE"" ]]; then
    echo ""❌ Missing .page_config file. Please create it with API_URL, TOKEN, and AUTH.""
    exit 1
fi
source ""$CONFIG_FILE""

# --- Parse command-line arguments ---
TITLE=""""
TAGS=""""
while [[ ""$#"" -gt 0 ]]; do
    case ""$1"" in
        --title)
            TITLE=""$2""
            shift 2
            ;;
        --tags)
            TAGS=""$2""
            shift 2
            ;;
        *)
            echo ""❌ Unknown option: $1""
            echo ""Usage: $0 --title \""My Title\"" --tags \""tag1,tag2\""""
            exit 1
            ;;
    esac
done

# --- Validate input ---
if [[ -z ""$TITLE"" || -z ""$TAGS"" ]]; then
    echo ""❌ Error: Both --title and --tags are required.""
    exit 1
fi

# --- Sanitize title into slug ---
SLUG=$(echo ""$TITLE"" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9 ]//g' | tr ' ' '-' | sed 's/-\+/-/g' | sed 's/^-//;s/-$//')

# --- Secure temp file for markdown input ---
TMP_FILE=$(mktemp ""/tmp/markdown_XXXXXX.md"")
trap 'shred -u ""$TMP_FILE"" 2>/dev/null' EXIT

echo ""# Replace with your content"" > ""$TMP_FILE""
${EDITOR:-nano} ""$TMP_FILE""

# --- Read Markdown content ---
CONTENT=$(<""$TMP_FILE"")

# --- Secure JSON construction (no temp payload file) ---
JSON=$(jq -n \
    --arg token ""$TOKEN"" \
    --arg auth ""$AUTH"" \
    --arg title ""$TITLE"" \
    --arg content ""$CONTENT"" \
    --arg slug ""$SLUG"" \
    --arg tags ""$TAGS"" \
    '{
      token: $token,
      authentication: $auth,
      title: $title,
      content: $content,
      slug: $slug,
      tags: $tags
    }')

# --- Send POST request ---
echo ""🚀 Posting securely to $API_URL ...""
RESPONSE=$(curl -s -X POST ""$API_URL"" \
    -H ""Content-Type: application/json"" \
    -d ""$JSON"")

# --- Show response ---
echo ""📬 Response:""
echo ""$RESPONSE""
"
uCG9MLHL,Gagaga,Kyirxuz,Lua,Sunday 8th of June 2025 04:35:05 AM CDT,"local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")
local TweenService = game:GetService(""TweenService"")

local CONFIG = {
    TRIGGER_KEY = Enum.KeyCode.X,
    CAMERA_POINTS = {
        Vector3.new(284, 25, 257),
        Vector3.new(248, 25, 257),
        Vector3.new(248, 25, -226),
        Vector3.new(283, 25, -226)
    },
    INDICATOR_SIZE = UDim2.new(0, 20, 0, 20),
    SMOOTHING_SPEED = 0.2,
    MAX_OFFSET = 180,        
    OFFSET_SCALING = .7,
    GUI_TOGGLE_KEY = Enum.KeyCode.G -- Key to toggle the GUI
}

local camera = workspace.CurrentCamera
local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- State tracking
local isKeyHeld = false
local selectedPoint = nil
local indicators = {}
local initialLookVector = nil
local isAHeld = false
local isDHeld = false
local scriptEnabled = true
local settingsGui = nil

-- Key name mappings for display
local keyNames = {
    [Enum.KeyCode.A] = ""A"", [Enum.KeyCode.B] = ""B"", [Enum.KeyCode.C] = ""C"", [Enum.KeyCode.D] = ""D"",
    [Enum.KeyCode.E] = ""E"", [Enum.KeyCode.F] = ""F"", [Enum.KeyCode.G] = ""G"", [Enum.KeyCode.H] = ""H"",
    [Enum.KeyCode.I] = ""I"", [Enum.KeyCode.J] = ""J"", [Enum.KeyCode.K] = ""K"", [Enum.KeyCode.L] = ""L"",
    [Enum.KeyCode.M] = ""M"", [Enum.KeyCode.N] = ""N"", [Enum.KeyCode.O] = ""O"", [Enum.KeyCode.P] = ""P"",
    [Enum.KeyCode.Q] = ""Q"", [Enum.KeyCode.R] = ""R"", [Enum.KeyCode.S] = ""S"", [Enum.KeyCode.T] = ""T"",
    [Enum.KeyCode.U] = ""U"", [Enum.KeyCode.V] = ""V"", [Enum.KeyCode.W] = ""W"", [Enum.KeyCode.X] = ""X"",
    [Enum.KeyCode.Y] = ""Y"", [Enum.KeyCode.Z] = ""Z"",
    [Enum.KeyCode.One] = ""1"", [Enum.KeyCode.Two] = ""2"", [Enum.KeyCode.Three] = ""3"", [Enum.KeyCode.Four] = ""4"",
    [Enum.KeyCode.Five] = ""5"", [Enum.KeyCode.Six] = ""6"", [Enum.KeyCode.Seven] = ""7"", [Enum.KeyCode.Eight] = ""8"",
    [Enum.KeyCode.Nine] = ""9"", [Enum.KeyCode.Zero] = ""0"",
    [Enum.KeyCode.LeftShift] = ""L-Shift"", [Enum.KeyCode.RightShift] = ""R-Shift"",
    [Enum.KeyCode.LeftControl] = ""L-Ctrl"", [Enum.KeyCode.RightControl] = ""R-Ctrl"",
    [Enum.KeyCode.LeftAlt] = ""L-Alt"", [Enum.KeyCode.RightAlt] = ""R-Alt"",
    [Enum.KeyCode.Space] = ""Space"", [Enum.KeyCode.Tab] = ""Tab""
}

local function createSettingsGui()
    local screenGui = Instance.new(""ScreenGui"")
    screenGui.Name = ""CameraControlSettings""
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Main frame
    local mainFrame = Instance.new(""Frame"")
    mainFrame.Name = ""MainFrame""
    mainFrame.Size = UDim2.new(0, 300, 0, 350)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -175)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui

    local mainCorner = Instance.new(""UICorner"")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = mainFrame

    -- Title
    local titleLabel = Instance.new(""TextLabel"")
    titleLabel.Name = ""Title""
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = ""Camera Control Settings""
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = mainFrame

    -- Close button
    local closeButton = Instance.new(""TextButton"")
    closeButton.Name = ""CloseButton""
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = ""X""
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = mainFrame

    local closeCorner = Instance.new(""UICorner"")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeButton

    -- Enable/Disable Toggle
    local enableFrame = Instance.new(""Frame"")
    enableFrame.Size = UDim2.new(1, -20, 0, 50)
    enableFrame.Position = UDim2.new(0, 10, 0, 50)
    enableFrame.BackgroundTransparency = 1
    enableFrame.Parent = mainFrame

    local enableLabel = Instance.new(""TextLabel"")
    enableLabel.Size = UDim2.new(0.6, 0, 1, 0)
    enableLabel.Position = UDim2.new(0, 0, 0, 0)
    enableLabel.BackgroundTransparency = 1
    enableLabel.Text = ""Script Enabled:""
    enableLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    enableLabel.TextScaled = true
    enableLabel.Font = Enum.Font.SourceSans
    enableLabel.TextXAlignment = Enum.TextXAlignment.Left
    enableLabel.Parent = enableFrame

    local enableToggle = Instance.new(""TextButton"")
    enableToggle.Name = ""EnableToggle""
    enableToggle.Size = UDim2.new(0.3, 0, 0, 30)
    enableToggle.Position = UDim2.new(0.65, 0, 0, 10)
    enableToggle.BackgroundColor3 = scriptEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
    enableToggle.Text = scriptEnabled and ""ON"" or ""OFF""
    enableToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    enableToggle.TextScaled = true
    enableToggle.Font = Enum.Font.SourceSansBold
    enableToggle.Parent = enableFrame

    local enableCorner = Instance.new(""UICorner"")
    enableCorner.CornerRadius = UDim.new(0, 4)
    enableCorner.Parent = enableToggle

    -- Trigger Key Setting
    local keyFrame = Instance.new(""Frame"")
    keyFrame.Size = UDim2.new(1, -20, 0, 50)
    keyFrame.Position = UDim2.new(0, 10, 0, 110)
    keyFrame.BackgroundTransparency = 1
    keyFrame.Parent = mainFrame

    local keyLabel = Instance.new(""TextLabel"")
    keyLabel.Size = UDim2.new(0.5, 0, 1, 0)
    keyLabel.Position = UDim2.new(0, 0, 0, 0)
    keyLabel.BackgroundTransparency = 1
    keyLabel.Text = ""Trigger Key:""
    keyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    keyLabel.TextScaled = true
    keyLabel.Font = Enum.Font.SourceSans
    keyLabel.TextXAlignment = Enum.TextXAlignment.Left
    keyLabel.Parent = keyFrame

    local keyButton = Instance.new(""TextButton"")
    keyButton.Name = ""KeyButton""
    keyButton.Size = UDim2.new(0.4, 0, 0, 30)
    keyButton.Position = UDim2.new(0.55, 0, 0, 10)
    keyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    keyButton.Text = keyNames[CONFIG.TRIGGER_KEY] or ""X""
    keyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    keyButton.TextScaled = true
    keyButton.Font = Enum.Font.SourceSans
    keyButton.Parent = keyFrame

    local keyCorner = Instance.new(""UICorner"")
    keyCorner.CornerRadius = UDim.new(0, 4)
    keyCorner.Parent = keyButton

    -- Max Offset Setting
    local offsetFrame = Instance.new(""Frame"")
    offsetFrame.Size = UDim2.new(1, -20, 0, 70)
    offsetFrame.Position = UDim2.new(0, 10, 0, 170)
    offsetFrame.BackgroundTransparency = 1
    offsetFrame.Parent = mainFrame

    local offsetLabel = Instance.new(""TextLabel"")
    offsetLabel.Size = UDim2.new(1, 0, 0, 30)
    offsetLabel.Position = UDim2.new(0, 0, 0, 0)
    offsetLabel.BackgroundTransparency = 1
    offsetLabel.Text = ""Max Offset: "" .. CONFIG.MAX_OFFSET
    offsetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    offsetLabel.TextScaled = true
    offsetLabel.Font = Enum.Font.SourceSans
    offsetLabel.TextXAlignment = Enum.TextXAlignment.Left
    offsetLabel.Parent = offsetFrame

    local offsetTextBox = Instance.new(""TextBox"")
    offsetTextBox.Name = ""OffsetTextBox""
    offsetTextBox.Size = UDim2.new(1, 0, 0, 30)
    offsetTextBox.Position = UDim2.new(0, 0, 0, 35)
    offsetTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    offsetTextBox.Text = tostring(CONFIG.MAX_OFFSET)
    offsetTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    offsetTextBox.TextScaled = true
    offsetTextBox.Font = Enum.Font.SourceSans
    offsetTextBox.PlaceholderText = ""Enter max offset value""
    offsetTextBox.Parent = offsetFrame

    local offsetBoxCorner = Instance.new(""UICorner"")
    offsetBoxCorner.CornerRadius = UDim.new(0, 4)
    offsetBoxCorner.Parent = offsetTextBox

    -- Offset Scaling Setting
    local scalingFrame = Instance.new(""Frame"")
    scalingFrame.Size = UDim2.new(1, -20, 0, 70)
    scalingFrame.Position = UDim2.new(0, 10, 0, 250)
    scalingFrame.BackgroundTransparency = 1
    scalingFrame.Parent = mainFrame

    local scalingLabel = Instance.new(""TextLabel"")
    scalingLabel.Size = UDim2.new(1, 0, 0, 30)
    scalingLabel.Position = UDim2.new(0, 0, 0, 0)
    scalingLabel.BackgroundTransparency = 1
    scalingLabel.Text = ""Offset Scaling: "" .. CONFIG.OFFSET_SCALING
    scalingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    scalingLabel.TextScaled = true
    scalingLabel.Font = Enum.Font.SourceSans
    scalingLabel.TextXAlignment = Enum.TextXAlignment.Left
    scalingLabel.Parent = scalingFrame

    local scalingTextBox = Instance.new(""TextBox"")
    scalingTextBox.Name = ""ScalingTextBox""
    scalingTextBox.Size = UDim2.new(1, 0, 0, 30)
    scalingTextBox.Position = UDim2.new(0, 0, 0, 35)
    scalingTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    scalingTextBox.Text = tostring(CONFIG.OFFSET_SCALING)
    scalingTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    scalingTextBox.TextScaled = true
    scalingTextBox.Font = Enum.Font.SourceSans
    scalingTextBox.PlaceholderText = ""Enter scaling value (0.1 - 2.0)""
    scalingTextBox.Parent = scalingFrame

    local scalingBoxCorner = Instance.new(""UICorner"")
    scalingBoxCorner.CornerRadius = UDim.new(0, 4)
    scalingBoxCorner.Parent = scalingTextBox

    -- Event connections
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
        settingsGui = nil
    end)

    enableToggle.MouseButton1Click:Connect(function()
        scriptEnabled = not scriptEnabled
        enableToggle.BackgroundColor3 = scriptEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
        enableToggle.Text = scriptEnabled and ""ON"" or ""OFF""
        
        if not scriptEnabled and isKeyHeld then
            -- Stop camera control if script is disabled
            isKeyHeld = false
            selectedPoint = nil
            local indicatorsGui = player.PlayerGui:FindFirstChild(""CameraPointIndicators"")
            if indicatorsGui then
                indicatorsGui:Destroy()
            end
            RunService:UnbindFromRenderStep(""ProximityCameraControl"")
        end
    end)

    local isWaitingForKey = false
    keyButton.MouseButton1Click:Connect(function()
        if isWaitingForKey then return end
        isWaitingForKey = true
        keyButton.Text = ""Press Key...""
        keyButton.BackgroundColor3 = Color3.fromRGB(100, 100, 120)
        
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.Keyboard then
                CONFIG.TRIGGER_KEY = input.KeyCode
                keyButton.Text = keyNames[input.KeyCode] or input.KeyCode.Name
                keyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
                isWaitingForKey = false
                connection:Disconnect()
            end
        end)
    end)

    offsetTextBox.FocusLost:Connect(function()
        local newValue = tonumber(offsetTextBox.Text)
        if newValue and newValue >= 0 and newValue <= 1000 then
            CONFIG.MAX_OFFSET = newValue
            offsetLabel.Text = ""Max Offset: "" .. CONFIG.MAX_OFFSET
        else
            offsetTextBox.Text = tostring(CONFIG.MAX_OFFSET)
        end
    end)

    scalingTextBox.FocusLost:Connect(function()
        local newValue = tonumber(scalingTextBox.Text)
        if newValue and newValue >= 0.1 and newValue <= 2.0 then
            CONFIG.OFFSET_SCALING = newValue
            scalingLabel.Text = ""Offset Scaling: "" .. CONFIG.OFFSET_SCALING
        else
            scalingTextBox.Text = tostring(CONFIG.OFFSET_SCALING)
        end
    end)

    screenGui.Parent = player.PlayerGui
    return screenGui
end

local function createIndicators()
    local screenGui = Instance.new(""ScreenGui"")
    screenGui.Name = ""CameraPointIndicators""
    screenGui.ResetOnSpawn = false

    for i, point in ipairs(CONFIG.CAMERA_POINTS) do
        local frame = Instance.new(""Frame"")
        frame.Size = CONFIG.INDICATOR_SIZE
        frame.AnchorPoint = Vector2.new(0.5, 0.5)
        frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) 
        frame.BorderSizePixel = 0

        local corner = Instance.new(""UICorner"")
        corner.CornerRadius = UDim.new(1, 0) 
        corner.Parent = frame

        frame.Parent = screenGui
        indicators[i] = frame
    end

    screenGui.Parent = player.PlayerGui
    return screenGui
end

local function updateIndicators()
    for i, point in ipairs(CONFIG.CAMERA_POINTS) do
        local screenPos, isOnScreen = camera:WorldToScreenPoint(point)
        local indicator = indicators[i]

        if isOnScreen then
            indicator.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y)
            indicator.Visible = true
            
            indicator.BackgroundColor3 = (point == selectedPoint)
                and Color3.fromRGB(0, 255, 0)  
                or Color3.fromRGB(255, 0, 0)   
        else
            indicator.Visible = false
        end
    end
end

local function findClosestPoint()
    local closestPoint = CONFIG.CAMERA_POINTS[1]
    local closestDistance = math.huge

    for _, point in ipairs(CONFIG.CAMERA_POINTS) do
        local screenPos, isOnScreen = camera:WorldToScreenPoint(point)
        if isOnScreen then
            local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPoint = point
            end
        end
    end

    return closestPoint
end

local function updateCamera()
    if not isKeyHeld or not selectedPoint or not scriptEnabled then return end
    
    updateIndicators()

    local characterPosition = player.Character and player.Character:FindFirstChild(""HumanoidRootPart"")
        and player.Character.HumanoidRootPart.Position
        or camera.CFrame.Position

    local distanceToPoint = (characterPosition - selectedPoint).Magnitude

    local offsetAmount
    if distanceToPoint <= 13 then
        offsetAmount = 0
    else
        offsetAmount = math.min(distanceToPoint * CONFIG.OFFSET_SCALING, CONFIG.MAX_OFFSET)
    end

    local offsetPosition = selectedPoint

    local dir = (selectedPoint - characterPosition)
    dir = Vector3.new(dir.X, 0, dir.Z).Unit

    local rightVector = dir:Cross(Vector3.new(0, 1, 0)).Unit

    local distanceToPoint = (characterPosition - selectedPoint).Magnitude
    local offsetAmount
    if distanceToPoint <= 13 then
        offsetAmount = 0
    else
        offsetAmount = math.min(distanceToPoint * CONFIG.OFFSET_SCALING, CONFIG.MAX_OFFSET) * 1.07
    end

    local offsetPosition = selectedPoint

    if isAHeld then
        offsetPosition = offsetPosition 
            + Vector3.new(0, offsetAmount, 0)        
            + rightVector * offsetAmount            
    elseif isDHeld then
        offsetPosition = offsetPosition 
            + Vector3.new(0, offsetAmount, 0)        
            - rightVector * offsetAmount            
    end

    local targetCFrame = CFrame.lookAt(characterPosition, offsetPosition)
    local currentCFrame = camera.CFrame
    local newCFrame = currentCFrame:Lerp(targetCFrame, CONFIG.SMOOTHING_SPEED)
    camera.CFrame = CFrame.new(currentCFrame.Position) * CFrame.fromOrientation(newCFrame:ToOrientation())

    local targetCFrame = CFrame.lookAt(characterPosition, offsetPosition)

    local currentCFrame = camera.CFrame
    local newCFrame = currentCFrame:Lerp(targetCFrame, CONFIG.SMOOTHING_SPEED)
    camera.CFrame = CFrame.new(currentCFrame.Position) * CFrame.fromOrientation(newCFrame:ToOrientation())
end

local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == CONFIG.GUI_TOGGLE_KEY then
        if settingsGui then
            settingsGui:Destroy()
            settingsGui = nil
        else
            settingsGui = createSettingsGui()
        end
        return
    end

    if not scriptEnabled then return end

    if input.KeyCode == CONFIG.TRIGGER_KEY then
        isKeyHeld = true
        selectedPoint = findClosestPoint()
        initialLookVector = camera.CFrame.LookVector

        if not player.PlayerGui:FindFirstChild(""CameraPointIndicators"") then
            createIndicators()
        end

        RunService:BindToRenderStep(
            ""ProximityCameraControl"",
            Enum.RenderPriority.Camera.Value,
            updateCamera
        )
    elseif input.KeyCode == Enum.KeyCode.A then
        isAHeld = true
    elseif input.KeyCode == Enum.KeyCode.D then
        isDHeld = true
    end
end

local function onInputEnded(input, gameProcessed)
    if input.KeyCode == CONFIG.TRIGGER_KEY then
        isKeyHeld = false
        selectedPoint = nil

        local indicatorsGui = player.PlayerGui:FindFirstChild(""CameraPointIndicators"")
        if indicatorsGui then
            indicatorsGui:Destroy()
        end

        RunService:UnbindFromRenderStep(""ProximityCameraControl"")
    elseif input.KeyCode == Enum.KeyCode.A then
        isAHeld = false
    elseif input.KeyCode == Enum.KeyCode.D then
        isDHeld = false
    end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)

game:BindToClose(function()
    local indicatorsGui = player.PlayerGui:FindFirstChild(""CameraPointIndicators"")
    if indicatorsGui then
        indicatorsGui:Destroy()
    end
    if settingsGui then
        settingsGui:Destroy()
    end
end)"
MjrnsytH,Browser support for TinyVG,honey_the_codewitch,JavaScript,Sunday 8th of June 2025 03:47:47 AM CDT,"// TinyVG Renderer 
// Copyright (C) by honey the codewitch
// MIT License
// To use, pass am ArrayBuffer with the
// TVG document to tvgDimensions
// or tvgRender. With render,
// you place an empty SVG element, 
// ex: <svg id=""..."" xmlms=""..."" />
// and pass the id of it to the render
// method. At that point, the SVG tag
// will be populated and rendered by
// the browser.

const tvgInit = (data, id) => {
    return {
        data: data,
        view: new DataView(data),
        cursor: 0,
        scale: 0,
        color_encoding: 0,
        coord_range: 0,
        width: 0, height: 0,
        colors_size: 0,
        colors: [],
        doc: document.getElementById(id), //SVGSVGElement
        elem: undefined, // SVGElement
        gradIndex: 0
    };
}
const tvgDistance = (pointLhs, pointRhs) => {
    const xd = pointRhs.x - pointLhs.x;
    const yd = pointRhs.y - pointLhs.y;
    return Math.sqrt((xd * xd) + (yd * yd));
}
const tvgAdvCoord = (rangeOrCtx) => {
    let range = rangeOrCtx;
    if (rangeOrCtx.coord_range) {
        range = rangeOrCtx.range;
    }
    switch (range) {
        case 0://""default""
            return 2;
        case 1://""reduced"":
            return 1;
        case 2://""extended""
            return 4;
    }
}
const tvgMapZeroToMax = (rangeOrCtx, value) => {
    let range = rangeOrCtx;
    if (rangeOrCtx.coord_range) {
        range = rangeOrCtx.range;
    }
    if (0 == value) {
        switch (range) {
            case 0: //""default""
                return 0xFFFF;
            case 1: //""reduced""
                return 0xFF;
            case 2: //""extended""
                return 0xFFFFFFFF;
        }
        return undefined;
    }
    return value;
}
const tvgReadCoordBI = (range, startIndex, data) => {
    const view = new DataView(data);
    switch (range) {
        case 0: //""default""
            return view.getUint16(startIndex, true);

        case 1: //""reduced""
            return view.getUint8(startIndex);

        case 2: //""extended""
            return view.getUint32(startIndex, true);
    }
    return undefined;
}
const tvgReadCoord = (ctx) => {
    let result = undefined;
    switch (ctx.coord_range) {
        case 0: //""default""
            result = ctx.view.getUint16(ctx.cursor, true);
            ctx.cursor += 2;
            break;
        case 1: //""reduced""
            result = ctx.view.getUint8(ctx.cursor);
            ctx.cursor += 1;
            break;
        case 2: //""extended""
            result = ctx.view.getUint32(ctx.cursor, true);
            ctx.cursor += 4;
            break;
    }
    return result;
}
const tvgReadU32 = (ctx) => {
    let count = 0;
    let result = 0;
    var byte;
    while (true) {
        byte = ctx.view.getUint8(ctx.cursor++);
        const val = (byte & 0x7F) << (7 * count);
        result |= val;
        if ((byte & 0x80) === 0)
            break;
        ++count;
    }
    return result;
}
const tvgDownscaleCoord = (ctx, coord) => {
    const factor = (1) << ctx.scale;
    return coord / factor;
}
const tvgReadUnit = (ctx) => {
    const val = tvgReadCoord(ctx);
    return tvgDownscaleCoord(ctx, val);
}
const tvgReadPoint = (ctx) => {
    const x = tvgReadUnit(ctx);
    const y = tvgReadUnit(ctx);
    return { x: x, y: y };
}
const tvgReadColor = (ctx) => {
    switch (ctx.color_encoding) {
        case 2: { // TVG_COLOR_F32:
            // read four values
            const data = [];
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            return { r: data[0], g: data[1], b: data[2], a: data[3] };
        }
        case 1: { // TVG_COLOR_U565: 
            const data = ctx.view.getUint16(ctx.cursor, true);
            ctx.cursor += 2;
            return {
                r: (data & 0x1F) / 15.0,
                g: ((data >>> 5) & 0x3F) / 31.0,
                b: ((data >>> 11) & 0x1F) / 15.0,
                a: 1.0
            };
        }
        case 0: { // TVG_COLOR_U8888: 
            // read four values
            const data = [];
            data.push(ctx.view.getUint8(ctx.cursor++));
            data.push(ctx.view.getUint8(ctx.cursor++));
            data.push(ctx.view.getUint8(ctx.cursor++));
            data.push(ctx.view.getUint8(ctx.cursor++));
            return { r: data[0] / 255.0, g: data[1] / 255.0, b: data[2] / 255.0, a: data[3] / 255.0 };
        }
        case 3: // TVG_COLOR_CUSTOM
            throw ""TinyVG: Custom color table not supported"";
        default:
            throw ""TinyVG: Invalid color format"";
    }
}
const tvgParseGradient = (ctx) => {
    const point0 = tvgReadPoint(ctx);
    const point1 = tvgReadPoint(ctx);
    const color0 = tvgReadU32(ctx);
    const color1 = tvgReadU32(ctx);
    return { point0: point0, point1: point1, color0: color0, color1: color1 };
}
const tvgParseStyle = (ctx, kind) => {
    switch (kind) {
        case 0: // TVG_STYLE_FLAT:
            return { kind: kind, flat: tvgReadU32(ctx) };
        case 1: // TVG_STYLE_LINEAR:
            return { kind: kind, linear: tvgParseGradient(ctx) };
        case 2: //TVG_STYLE_RADIAL:
            return { kind: kind, radial: tvgParseGradient(ctx) };
        default:
            throw ""TinyVG: Invalid format parsing style"";
    }
}
const tvgParseFillHeader = (ctx, kind) => {
    const u32 = tvgReadU32(ctx);
    const size = u32 + 1;
    //out_header->size = count;
    const style = tvgParseStyle(ctx, kind);
    return { size: size, style: style };
}
const tvgParseLineHeader = (ctx, kind) => {
    const u32 = tvgReadU32(ctx);
    const size = u32 + 1;

    const style = tvgParseStyle(ctx, kind);
    const line_width = tvgReadUnit(ctx);

    return { size: size, style: style, line_width: line_width };
}

const tvgParseLineFillHeader = (ctx, kind) => {

    var d = ctx.view.getUint8(ctx.cursor++);
    const size = (d & 0x3F) + 1;
    const fill_style = tvgParseStyle(ctx, kind);
    const line_style = tvgParseStyle(ctx, (d >>> 6) & 0x03);
    const line_width = tvgReadUnit(ctx);
    return { size: size, fill_style: fill_style, line_style: line_style, line_width: line_width };
}
const tvgParsePathD = (ctx, size) => {
    var st, cur;
    var pt;
    var u32;
    var f32;
    var d;
    let result = """";
    pt = tvgReadPoint(ctx);
    result += `M${pt.x} ${pt.y}`;
    st = pt;
    cur = pt;
    for (let j = 0; j < size; ++j) {
        d = ctx.view.getUint8(ctx.cursor++);
        if (((d >>> 4) & 1) !== 0) { // has line
            tvgReadUnit(ctx); // throw away line width (future use)
        }
        switch (d & 7) {
            case 0: // TVG_PATH_LINE:
                pt = tvgReadPoint(ctx);
                result += ` L${pt.x} ${pt.y}`
                cur = pt;
                break;
            case 1: // TVG_PATH_HLINE:
                pt.x = tvgReadUnit(ctx);;
                pt.y = cur.y;
                result += ` H${pt.x}`;
                cur = pt;
                break;
            case 2: // TVG_PATH_VLINE:
                pt.x = cur.x;
                pt.y = tvgReadUnit(ctx);
                result += ` V${pt.y}`;
                cur = pt;
                break;
            case 3: { // TVG_PATH_CUBIC: 
                const ctrl1 = tvgReadPoint(ctx);
                const ctrl2 = tvgReadPoint(ctx);
                const endp = tvgReadPoint(ctx);
                result += ` C${ctrl1.x} ${ctrl1.y} ${ctrl2.x} ${ctrl2.y} ${endp.x} ${endp.y}`;
                cur = endp;
            } break;
            case 4: { // TVG_PATH_ARC_CIRCLE: {
                d = ctx.view.getUint8(ctx.cursor++);
                const radius = tvgReadUnit(ctx);
                pt = tvgReadPoint(ctx);
                result += ` A${radius} ${radius} 0 ${d & 1} ${1 - ((d >>> 1) & 1)} ${pt.x} ${pt.y}`;
                cur = pt;
            } break;
            case 5: { // TVG_PATH_ARC_ELLIPSE: 
                d = ctx.view.getUint8(ctx.cursor++);
                const radius_x = tvgReadUnit(ctx);
                const radius_y = tvgReadUnit(ctx);
                const rotation = tvgReadUnit(ctx);
                pt = tvgReadPoint(ctx);
                result += ` A${radius_x} ${radius_y} ${rotation} ${d & 1} ${1 - ((d >>> 1) & 1)} ${pt.x} ${pt.y}`;
                cur = pt;
            } break;
            case 6: // TVG_PATH_CLOSE:
                result += ' Z';
                cur = st;
                break;
            case 7: { // TVG_PATH_QUAD:
                const ctrl = tvgReadPoint(ctx);
                const endp = tvgReadPoint(ctx);
                result += ` Q${ctrl.x} ${ctrl.y} ${endp.x} ${endp.y}`
                cur = endp;
            } break;
            default:
                throw ""TinyVG: Unrecognized command parsing path"";
        }
    }
    return result;
}
const tvgParseRect = (ctx) => {
    const pt = tvgReadPoint(ctx);
    const w = tvgReadUnit(ctx);
    const h = tvgReadUnit(ctx);
    return { x: pt.x, y: pt.y, width: w, height: h };
}
const tvgToHex = (code) => {
    let result = code.toString(16);
    if (result.length === 1) {
        return ""0"" + result;
    }
    return result;
}
const tvgColorToSvgColorAndOpacity = (col) => {
    return { color: `#${tvgToHex(col.r * 255)}${tvgToHex(col.g * 255)}${tvgToHex(col.b * 255)}`, opacity: col.a };
}
const tvgCreateSvgNode = (n, v) => {
    n = document.createElementNS(""http://www.w3.org/2000/svg"", n);
    if (v) {
        for (let p in v) {
            n.setAttributeNS(null, p.replace(/[A-Z]/g, function (m, p, o, s) { return ""-"" + m.toLowerCase(); }), v[p]);
        }
    }
    return n;
}
const tvgAddSvgAttribute = (n, a, v) => {
    n.setAttributeNS(null, a, v);
}
const tvgCreateSvgGradient = (ctx, style) => {
    let da = ctx.doc.getElementsByTagNameNS(""http://www.w3.org/2000/svg"", ""defs"");
    var defs;
    if (da.length == 0) {
        defs = tvgCreateSvgNode(""defs"");
        ctx.doc.prepend(defs);
    } else {
        defs = da[0];
    }
    if (style.kind === 1) {
        const node = tvgCreateSvgNode(""linearGradient"",
            {
                id: `TvgGradient${ctx.gradIndex + 1}`,
                x1: style.linear.point0.x,
                y1: style.linear.point0.y,
                x2: style.linear.point1.x,
                y2: style.linear.point1.y
            });
        node.setAttributeNS(null, ""gradientUnits"", ""userSpaceOnUse"");
        node.setAttributeNS(null, ""spreadMethod"", ""pad"");
        let col = tvgColorToSvgColorAndOpacity(ctx.colors[style.linear.color0]);
        const stop1 = tvgCreateSvgNode(""stop"", { offset: ""0%"", stopColor: col.color });//, stopOpacity: col.opacity});
        node.appendChild(stop1);
        col = tvgColorToSvgColorAndOpacity(ctx.colors[style.linear.color1]);
        const stop2 = tvgCreateSvgNode(""stop"", { offset: ""100%"", stopColor: col.color });//, stopOpacity: col.opacity});
        node.appendChild(stop2);
        defs.appendChild(node);
        ++ctx.gradIndex;
        return node.getAttributeNS(null, ""id"");
    } else if (style.kind === 2) {
        const r = tvgDistance(style.radial.point0, style.radial.point1);
        const node = tvgCreateSvgNode(""radialGradient"",
            {
                id: `TvgGradient${ctx.gradIndex + 1}`,
                cx: style.radial.point0.x,
                cy: style.radial.point0.y,
                fx: style.radial.point0.x,
                fy: style.radial.point0.y,
                r: r
            });
        node.setAttributeNS(null, ""gradientUnits"", ""userSpaceOnUse"");
        node.setAttributeNS(null, ""spreadMethod"", ""pad"");
        let col = tvgColorToSvgColorAndOpacity(ctx.colors[style.radial.color0]);
        const stop1 = tvgCreateSvgNode(""stop"", { offset: ""0%"", stopColor: col.color, stopOpacity: col.opacity });
        node.appendChild(stop1);
        col = tvgColorToSvgColorAndOpacity(ctx.colors[style.radial.color1]);
        const stop2 = tvgCreateSvgNode(""stop"", { offset: ""100%"", stopColor: col.color, stopOpacity: col.opacity });
        node.appendChild(stop2);
        defs.appendChild(node);
        ++ctx.gradIndex;
        return node.getAttributeNS(null, ""id"");
    } else if (style.kind === 0) throw ""TinyVG: attempt to pass flat style to create gradient"";
    else throw ""TinyVG: attempt to pass an invalid style to create gradient"";
}
const tvgApplyStyle = (ctx, style, isFill) => {
    if (style.kind === 0) { // flat
        const col = tvgColorToSvgColorAndOpacity(ctx.colors[style.flat]);
        if (isFill) {
            tvgAddSvgAttribute(ctx.elem, ""fill"", col.color);
            tvgAddSvgAttribute(ctx.elem, ""fill-opacity"", col.opacity);
        } else {
            tvgAddSvgAttribute(ctx.elem, ""stroke"", col.color);
            tvgAddSvgAttribute(ctx.elem, ""stroke-opacity"", col.opacity);
        }
    } else if (style.kind === 1 || style.kind === 2) { // linear
        const grad = tvgCreateSvgGradient(ctx, style);
        if (isFill) {
            tvgAddSvgAttribute(ctx.elem, ""fill"", `url(#${grad})`);
        } else {
            tvgAddSvgAttribute(ctx.elem, ""stroke"", `url(#${grad})`);
        }
    } else throw ""TinyVG: attempt to apply invalid style"";
}
const tvgParseFillRectangles = (ctx, size, fill_style) => {
    let count = size;
    if (count === 0) throw ""TinyVG: Invalid zero length filled rectangles entry"";
    let rect = tvgParseRect(ctx);
    let r = tvgCreateSvgNode(""rect"", rect);
    ctx.doc.appendChild(r);
    ctx.elem = r;
    tvgAddSvgAttribute(ctx.elem, ""fill-rule"", ""evenodd"");
    tvgApplyStyle(ctx, fill_style, true);
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    if (fill_style.kind !== 0) {
        attrs.fill = r.getAttributeNS(null, ""fill"")
    } else {
        attrs.fill = r.getAttributeNS(null, ""fill"")
        attrs.fillOpacity = r.getAttributeNS(null, ""fill-opacity"");
    }
    --count;
    while (count--) {
        rect = tvgParseRect(ctx);
        const localAttrs = { ...attrs, ...rect };
        r = tvgCreateSvgNode(""rect"", localAttrs);
        ctx.doc.appendChild(r);
        ctx.elem = r;
    }
}
const tvgParseLineFillRectangles = (ctx, size, fill_style, line_style, line_width) => {
    let count = size;
    if (count === 0) throw ""TinyVG: Invalid zero length line filled rectangles entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    let rect = tvgParseRect(ctx);
    let r = tvgCreateSvgNode(""rect"", rect);
    ctx.doc.appendChild(r);
    ctx.elem = r;
    tvgAddSvgAttribute(ctx.elem, ""fill-rule"", ""evenodd"");
    tvgAddSvgAttribute(ctx.elem, ""stroke-width"", line_width);
    tvgApplyStyle(ctx, fill_style, true);
    tvgApplyStyle(ctx, line_style, false);
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    if (fill_style.kind !== 0) {
        attrs.fill = r.getAttributeNS(null, ""fill"");
    } else {
        attrs.fill = r.getAttributeNS(null, ""fill"");
        attrs.fillOpacity = r.getAttributeNS(null, ""fill-opacity"");
    }
    if (line_style.kind !== 0) {
        attrs.stroke = r.getAttributeNS(null, ""stroke"");
    } else {
        attrs.stroke = r.getAttributeNS(null, ""stroke"");
        attrs.strokeOpacity = r.getAttributeNS(null, ""stroke-opacity"");
    }
    attrs.strokeWidth = line_width;
    --count;
    while (count--) {
        rect = tvgParseRect(ctx);
        const localAttrs = { ...attrs, ...rect };
        r = tvgCreateSvgNode(""rect"", localAttrs);
        ctx.doc.appendChild(r);
        ctx.elem = r;
    }
}
const tvgParseFillPaths = (ctx, size, style) => {
    if (size === 0) throw ""TinyVG: Invalid zero filled paths entry"";
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    attrs.strokeOpacity = 0;
    attrs.strokeWidth = 0;
    const sizes = [];
    for (let i = 0; i < size; ++i) {
        sizes.push(tvgReadU32(ctx) + 1);
    }
    let p = tvgCreateSvgNode(""path"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, style, true);
    if (style.kind !== 0) {
        attrs.fill = p.getAttributeNS(null, ""fill"");
    } else {
        attrs.fill = p.getAttributeNS(null, ""fill"");
        attrs.fillOpacity = p.getAttributeNS(null, ""fill-opacity"");
    }
    let d = tvgParsePathD(ctx, sizes[0]);
    for (let i = 1; i < size; ++i) {
        d+= ` ${tvgParsePathD(ctx, sizes[i])}`;
    }
    tvgAddSvgAttribute(p, ""d"", d);
}
const tvgParseLinePaths = (ctx, size, line_style, line_width) => {
    if (size === 0) throw ""TinyVG: Invalid zero line paths entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    const attrs = {};
    const sizes = [];
    for (let i = 0; i < size; ++i) {
        sizes.push(tvgReadU32(ctx) + 1);
    }
    let p = tvgCreateSvgNode(""path"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgAddSvgAttribute(ctx.elem, ""fill-opacity"", 0);
    tvgAddSvgAttribute(ctx.elem, ""stroke-width"", line_width);
    tvgApplyStyle(ctx, line_style, false);
    if (line_style.kind !== 0) {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
    } else {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
        attrs.strokeOpacity = p.getAttributeNS(null, ""stroke-opacity"");
    }
    attrs.strokeWidth = line_width;
    attrs.fillOpacity = 0;
    let d = tvgParsePathD(ctx, sizes[0]);
    for (let i = 1; i < size; ++i) {
        d+= ` ${tvgParsePathD(ctx, sizes[i])}`;
    }
    tvgAddSvgAttribute(p, ""d"", d);
}
const tvgParseLineFillPaths = (ctx, size, fill_style, line_style, line_width) => {
    if (size === 0) throw ""TinyVG: Invalid zero line filled paths entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    const sizes = [];
    for (let i = 0; i < size; ++i) {
        sizes.push(tvgReadU32(ctx) + 1);
    }
    let p = tvgCreateSvgNode(""path"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, fill_style, true);
    if (fill_style.kind !== 0) {
        attrs.fill = p.getAttributeNS(null, ""fill"");
    } else {
        attrs.fill = p.getAttributeNS(null, ""fill"");
        attrs.fillOpacity = p.getAttributeNS(null, ""fill-opacity"");
    }
    tvgApplyStyle(ctx, line_style, false);
    if (line_style.kind !== 0) {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
    } else {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
        attrs.strokeOpacity = p.getAttributeNS(null, ""stroke-opacity"");
    }
    attrs.strokeWidth = line_width;
    tvgAddSvgAttribute(p, ""stroke-width"", line_width);
    let d = tvgParsePathD(ctx, sizes[0]);
    for (let i = 1; i < size; ++i) {
        d+= ` ${tvgParsePathD(ctx, sizes[i])}`;
    }
    tvgAddSvgAttribute(p, ""d"", d);
}
const tvgParseFillPolygon = (ctx, size, fill_style) => {
    if (size === 0) throw ""TinyVG: Invalid zero polygon entry"";
    let count = size;
    let points = """";
    let pt = tvgReadPoint(ctx);
    points += `${pt.x},${pt.y}`;
    while (--count) {
        pt = tvgReadPoint(ctx);
        points += ` ${pt.x},${pt.y}`;
    }
    const attrs = { fillRule: ""evenodd"", points: points };
    let p = tvgCreateSvgNode(""polygon"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, fill_style, true);
}
const tvgParsePolyline = (ctx, size, line_style, line_width, close) => {
    if (size === 0) throw ""TinyVG: Invalid zero polyline entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    let count = size;
    let points = """";
    let pt = tvgReadPoint(ctx);
    points += `${pt.x},${pt.y}`;
    while (--count) {
        pt = tvgReadPoint(ctx);
        points += ` ${pt.x},${pt.y}`;
    }
    const attrs = { points: points, lineWidth: line_width, fillOpacity: 0 };
    let p = tvgCreateSvgNode(close ? ""polygon"" : ""polyline"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, line_style, false);
}
const tvgParseLineFillPolyline = (ctx, size, fill_style, line_style, line_width, close) => {
    if (size === 0) throw ""TinyVG: Invalid zero line fill polyline entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    let count = size;
    let points = """";
    let pt = tvgReadPoint(ctx);
    points += `${pt.x},${pt.y}`;
    while (--count) {
        pt = tvgReadPoint(ctx);
        points += ` ${pt.x},${pt.y}`;
    }
    const attrs = { points: points, lineWidth: line_width, fillRule: ""evenodd"" };
    let p = tvgCreateSvgNode(close ? ""polygon"" : ""polyline"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, fill_style, true);
    tvgApplyStyle(ctx, line_style, false);
}
const tvgParseLines = (ctx, size, line_style, line_width) => {
    if (size === 0) throw ""TinyVG: Invalid zero lines entry"";
    for (let i = 0; i < size; ++i) {
        const pt1 = tvgReadPoint(ctx);
        const pt2 = tvgReadPoint(ctx);
        const attrs = { x1: pt1.x, y1: pt1.y, x2: pt2.x, y2: pt2.y, strokeWidth: line_width };
        let l = tvgCreateSvgNode(""line"", attrs);
        ctx.doc.appendChild(l);
        ctx.elem = l;
        tvgApplyStyle(ctx, line_style, false);
    }
}
const tvgParseCommands = (ctx) => {
    let cmd = 255;
    while (cmd != 0) {
        cmd = ctx.view.getUint8(ctx.cursor++);
        switch (cmd & 0x3F) {
            case 0: // TVG_CMD_END_DOCUMENT:
                // console.log(""TVG END"");
                break;
            case 1: { // TVG_CMD_FILL_POLYGON: 
                // console.log(""TVG FILL POLYGON"");
                const data = tvgParseFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseFillPolygon(ctx, data.size, data.style);
            } break;
            case 2: { // TVG_CMD_FILL_RECTANGLES: 
                // console.log(""TVG FILL RECTANGLES"");
                const data = tvgParseFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseFillRectangles(ctx, data.size, data.style);
            } break;
            case 3: { // TVG_CMD_FILL_PATH: 
                // console.log(""TVG FILL PATH"");
                const data = tvgParseFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseFillPaths(ctx, data.size, data.style);
            } break;
            case 4: { // TVG_CMD_DRAW_LINES: 
                // console.log(""TVG LINES"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLines(ctx, data.size, data.style, data.line_width);
            } break;
            case 5: { // TVG_CMD_DRAW_LINE_LOOP: 
                // console.log(""TVG LINE LOOP"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParsePolyline(ctx, data.size, data.style, data.line_width, true);
            } break;
            case 6: { // TVG_CMD_DRAW_LINE_STRIP:
                // console.log(""TVG LINE STRIP"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParsePolyline(ctx, data.size, data.style, data.line_width, false);
            } break;
            case 7: { // TVG_CMD_DRAW_LINE_PATH: 
                // console.log(""TVG LINE PATH"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLinePaths(ctx, data.size, data.style, data.line_width);
            } break;
            case 8: { // TVG_CMD_OUTLINE_FILL_POLYGON: 
                // console.log(""TVG OUTLINE FILL POLYGON"");
                const data = tvgParseLineFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLineFillPolyline(ctx, data.size, data.fill_style, data.line_style, data.line_width, true);
            } break;
            case 9: { // TVG_CMD_OUTLINE_FILL_RECTANGLES:
                // console.log(""TVG OUTLINE FILL RECTANGLES"");
                const data = tvgParseLineFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLineFillRectangles(ctx, data.size, data.fill_style, data.line_style, data.line_width);
            } break;
            case 10: { // TVG_CMD_OUTLINE_FILL_PATH: 
                // console.log(""TVG OUTLINE FILL PATH"");
                const data = tvgParseLineFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLineFillPaths(ctx, data.size, data.fill_style, data.line_style, data.line_width);
            } break;
            default:
                throw `TinyVG: Invalid command in document (0x${tvgToHex(cmd)})`;
        }
    }
}
// get the {width, height} of a TVG in an arraybuffer
export const tvgDimensions = (data) => {
    if (data) {
        const view = new DataView(data);
        if (view.byteLength > 5) {
            // check for TVG v 1.0 header
            if (view.getUint8(0) == 0x72 && view.getUint8(1) == 0x56 && view.getUint8(2) == 1) {
                const flags = view.getUint8(3);
                const range = (flags >>> 6) & 0x03;
                const w = tvgReadCoordBI(range, 4, data);
                const h = tvgReadCoordBI(range, 4 + tvgAdvCoord(range), data);
                const dim = {
                    width: tvgMapZeroToMax(range, w),
                    height: tvgMapZeroToMax(range, h)
                };
                return dim;
            }
        }
    }
    return undefined;
}
// Render a TVG in an arraybuffer (data) to an SVG tag indicated by the id
export const tvgRender = (id, data) => {
    if (!id) throw ""TinyVG: Must specify the id of an SVG element"";
    if (!data) throw ""TinyVG: Must provide an ArrayBuffer with TVG data"";
    const view = new DataView(data);
    if (view.byteLength > 5) {
        if (view.getUint8(0) == 0x72 && view.getUint8(1) == 0x56 && view.getUint8(2) == 1) {
            const ctx = tvgInit(data, id);
            if (ctx.doc) {
                const flags = view.getUint8(3);
                ctx.scale = (flags & 0xF);
                ctx.color_encoding = ((flags >>> 4) & 0x3);
                ctx.coord_range = (flags >>> 6) & 0x03;
                ctx.cursor = 4;
                const w = tvgReadCoord(ctx);
                const h = tvgReadCoord(ctx);
                ctx.width = tvgMapZeroToMax(ctx, w);
                ctx.height = tvgMapZeroToMax(ctx, h);
                const colcount = tvgReadU32(ctx);
                if (!colcount || colcount === 0) throw ""TinyVG: invalid format - color table contains nothing"";
                for (let i = 0; i < colcount; ++i) {
                    ctx.colors.push(tvgReadColor(ctx));
                }
                while (ctx.doc.firstChild) {
                    ctx.doc.removeChild(ctx.doc.lastChild);
                }
                tvgAddSvgAttribute(ctx.doc, ""width"", w.toString(10));
                tvgAddSvgAttribute(ctx.doc, ""height"", h.toString(10));
                tvgAddSvgAttribute(ctx.doc, ""viewBox"", `0 0 ${w} ${h}`);
                tvgParseCommands(ctx);
                return;
            }
        }
    }
    throw ""TinyVG: Not a valid TinyVG file"";
}"
tRGHxFcG,OLT-zte send_telegram,skybetik,Python,Sunday 8th of June 2025 03:00:28 AM CDT,"import re
import os
import requests
import time
from datetime import datetime, date
from collections import defaultdict
import configparser
import logging
import schedule
import threading
import sys

# Налаштування логів
LOG_FILE_PATH = '/opt/olt_monitor/olt_monitor.log'
LAN_EVENTS_LOG = '/opt/olt_monitor/lan_events.log'  
SENT_MESSAGES_FILE = '/opt/olt_monitor/sent_messages.txt'
LAST_RESET_FILE = '/opt/olt_monitor/last_log_reset.txt'
LAST_ACTIVATION_FILE = '/opt/olt_monitor/last_activation.txt'

# Створення lan_events.log при старті, якщо не існує
if not os.path.exists(LAN_EVENTS_LOG):
    try:
        with open(LAN_EVENTS_LOG, 'w', encoding='utf-8') as f:
            f.write('')
        logging.info(f""Створено файл {LAN_EVENTS_LOG}"")
    except Exception as e:
        logging.error(f""Помилка створення {LAN_EVENTS_LOG}: {e}"")
        raise

# Налаштування логгера для lan_events.log
lan_logger = logging.getLogger('lan_events')
lan_handler = logging.FileHandler(LAN_EVENTS_LOG, encoding='utf-8')
lan_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
lan_logger.addHandler(lan_handler)
lan_logger.setLevel(logging.INFO)

# Змінна для відстеження часу попереджень
last_size_warning = {}

# Налаштування логування в консоль і olt_monitor.log
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler(LOG_FILE_PATH, encoding='utf-8')]
)

# Завантаження конфігурації
config = configparser.ConfigParser()
try:
    config.read('/opt/olt_monitor/config.ini')
except Exception as e:
    logging.error(f""Помилка читання config.ini: {e}"")
    raise

# Конфігурація
try:
    TELEGRAM_BOT_TOKEN = config.get('Settings', 'TelegramBotToken')
    TELEGRAM_CHAT_IDS = config.get('Settings', 'TelegramChatIDs').split(',')
    REPORT_TIME = config.get('Settings', 'ReportTime', fallback='06:00')
    LOG_FILE = config.get('Settings', 'LogFile', fallback='/var/log/zte.log')
    LAST_POSITION_FILE = config.get('Settings', 'LastPositionFile', fallback='/opt/olt_monitor/last_position.txt')
    CHECK_INTERVAL = config.getint('Settings', 'CheckInterval', fallback=5)
except Exception as e:
    logging.error(f""Помилка парсингу конфігурації: {e}"")
    raise

# Завантажуємо відправлені повідомлення
def load_sent_messages():
    if not os.path.exists(SENT_MESSAGES_FILE):
        return set()
    try:
        with open(SENT_MESSAGES_FILE, 'r', encoding='utf-8') as f:
            return set(line.strip() for line in f if line.strip())
    except Exception as e:
        logging.error(f""Помилка читання файлу {SENT_MESSAGES_FILE}: {e}"")
        return set()

# Зберігаємо нове повідомлення
def save_sent_message(msg, sent_messages):
    try:
        with open(SENT_MESSAGES_FILE, 'a', encoding='utf-8') as f:
            f.write(msg + '\n')
        sent_messages.add(msg)
    except Exception as e:
        logging.error(f""Помилка збереження повідомлення в {SENT_MESSAGES_FILE}: {e}"")

# Перевірка часу останнього повідомлення про активацію
def can_send_activation():
    if not os.path.exists(LAST_ACTIVATION_FILE):
        return True
    try:
        with open(LAST_ACTIVATION_FILE, 'r') as f:
            last_time = float(f.read().strip())
        return (time.time() - last_time) > 300  # 5 хвилин
    except Exception as e:
        logging.error(f""Помилка читання {LAST_ACTIVATION_FILE}: {e}"")
        return True

# Зберігаємо час активації
def save_activation_time():
    try:
        with open(LAST_ACTIVATION_FILE, 'w') as f:
            f.write(str(time.time()))
    except Exception as e:
        logging.error(f""Помилка збереження {LAST_ACTIVATION_FILE}: {e}"")

# Відправка повідомлення в Telegram
def send_telegram(msg, sent_messages):
    if msg in sent_messages:
        logging.warning(f""Повідомлення вже відправлено, пропущено: {msg}"")
        return
    url = f""https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage""
    for chat_id in TELEGRAM_CHAT_IDS:
        try:
            response = requests.post(url, data={""chat_id"": chat_id.strip(), ""text"": msg}, timeout=10)
            response.raise_for_status()
            logging.info(f""Повідомлення успішно відправлено в Telegram (chat_id: {chat_id}): {msg}"")
            save_sent_message(msg, sent_messages)
        except requests.RequestException as e:
            error_msg = f""Помилка відправки в Telegram для chat_id {chat_id}: {e}, response: {response.text if 'response' in locals() else 'немає відповіді'}""
            logging.error(error_msg)
            critical_msg = f""⚠️ Критична помилка в olt_monitor.py:\n{error_msg}""
            if critical_msg not in sent_messages:
                try:
                    for critical_chat_id in TELEGRAM_CHAT_IDS:
                        requests.post(url, data={""chat_id"": critical_chat_id.strip(), ""text"": critical_msg}, timeout=10)
                    save_sent_message(critical_msg, sent_messages)
                except Exception as critical_e:
                    logging.error(f""Не вдалося відправити критичну помилку в Telegram: {critical_e}"")

# Відправка звіту про події LAN у Telegram (з очищенням lan_events.log)
def send_lan_summary_to_telegram(sent_messages):
    logging.info(""Початок створення звіту про події LAN"")
    summary = defaultdict(lambda: {'los': 0, 'restore': 0})
    today = str(date.today())

    try:
        if not os.path.exists(LAN_EVENTS_LOG):
            logging.info(f""Файл {LAN_EVENTS_LOG} не існує"")
        else:
            with open(LAN_EVENTS_LOG, 'r', encoding='utf-8') as f:
                lines_processed = 0
                current_entry = []
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    # Начало новой записи определяется по временной метке (YYYY-MM-DD HH:MM:SS, с опциональными миллисекундами)
                    if re.match(r""\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:,\d+)?"", line):
                        if current_entry:  # Обрабатываем предыдущую запись
                            lines_processed += 1
                            entry_text = '\n'.join(current_entry)
                            logging.debug(f""Обробка запису у {LAN_EVENTS_LOG}: {entry_text}"")
                            # Извлекаем порт, OLT и номер ONU
                            port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                            olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                            onu_match = re.search(r""ONU №(\d+)"", entry_text)
                            if port_match and olt_match and onu_match:
                                port = port_match.group(1)
                                olt_name = olt_match.group(1)
                                olt_ip = olt_match.group(2)
                                onu_number = onu_match.group(1)
                                key = (port, olt_name, olt_ip, onu_number)
                                if ""LAN LOS знайдено"" in entry_text:
                                    summary[key]['los'] += 1
                                    logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                                elif ""LAN LOS Restore знайдено"" in entry_text:
                                    summary[key]['restore'] += 1
                                    logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                            else:
                                logging.debug(f""Запис не відповідає формату port/olt/onu: {entry_text}"")
                            current_entry = []
                        current_entry.append(line)
                    else:
                        current_entry.append(line)

                # Обработка последней записи
                if current_entry:
                    lines_processed += 1
                    entry_text = '\n'.join(current_entry)
                    logging.debug(f""Обробка останнього запису у {LAN_EVENTS_LOG}: {entry_text}"")
                    port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                    olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                    onu_match = re.search(r""ONU №(\d+)"", entry_text)
                    if port_match and olt_match and onu_match:
                        port = port_match.group(1)
                        olt_name = olt_match.group(1)
                        olt_ip = olt_match.group(2)
                        onu_number = onu_match.group(1)
                        key = (port, olt_name, olt_ip, onu_number)
                        if ""LAN LOS знайдено"" in entry_text:
                            summary[key]['los'] += 1
                            logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                        elif ""LAN LOS Restore знайдено"" in entry_text:
                            summary[key]['restore'] += 1
                            logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                    else:
                        logging.debug(f""Останній запис не відповідає формату: {entry_text}"")

                logging.info(f""Оброблено {lines_processed} записів у {LAN_EVENTS_LOG}"")

        # Формирование отчета
        if summary:
            msg = f""📊 Звіт подій LAN за {today}:\n\n""
            for (port, olt_name, olt_ip, onu_number), counts in sorted(summary.items()):
                total = counts['los'] + counts['restore']
                msg += (
                    f""🔢 ONU №{onu_number}\n""
                    f""📍 Порт: {port}\n""
                    f""🖥 OLT: {olt_name} ({olt_ip})\n""
                    f""🔴 Втрата LAN: {counts['los']}\n""
                    f""🟢 LAN відновлено: {counts['restore']}\n""
                    f""🔢 Загалом: {total}\n\n""
                )
        else:
            msg = f""📊 Звіт подій LAN за {today}:\n\n⚠️ Подій LAN LOS або Restore не знайдено""

        send_telegram(msg.strip(), sent_messages)
        logging.info(""Звіт про події LAN відправлено в Telegram"")

        # Очищаем lan_events.log после отправки
        try:
            with open(LAN_EVENTS_LOG, 'w', encoding='utf-8') as f:
                f.write('')
            logging.info(f""Файл {LAN_EVENTS_LOG} очищено після відправки звіту"")
        except Exception as e:
            logging.error(f""Помилка очищення {LAN_EVENTS_LOG}: {e}"")

    except Exception as e:
        logging.error(f""Помилка створення звіту LAN: {e}"")

# Ручна перевірка звіту без очищення lan_events.log
def manual_lan_summary():
    sent_messages = load_sent_messages()
    logging.info(""Початок ручної перевірки звіту про події LAN"")
    summary = defaultdict(lambda: {'los': 0, 'restore': 0})
    today = str(date.today())

    try:
        if not os.path.exists(LAN_EVENTS_LOG):
            logging.info(f""Файл {LAN_EVENTS_LOG} не існує"")
        else:
            with open(LAN_EVENTS_LOG, 'r', encoding='utf-8') as f:
                lines_processed = 0
                current_entry = []
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    # Начало новой записи определяется по временной метке
                    if re.match(r""\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:,\d+)?"", line):
                        if current_entry:  # Обрабатываем предыдущую запись
                            lines_processed += 1
                            entry_text = '\n'.join(current_entry)
                            logging.debug(f""Обробка запису у {LAN_EVENTS_LOG}: {entry_text}"")
                            port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                            olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                            onu_match = re.search(r""ONU №(\d+)"", entry_text)
                            if port_match and olt_match and onu_match:
                                port = port_match.group(1)
                                olt_name = olt_match.group(1)
                                olt_ip = olt_match.group(2)
                                onu_number = onu_match.group(1)
                                key = (port, olt_name, olt_ip, onu_number)
                                if ""LAN LOS знайдено"" in entry_text:
                                    summary[key]['los'] += 1
                                    logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                                elif ""LAN LOS Restore знайдено"" in entry_text:
                                    summary[key]['restore'] += 1
                                    logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                            else:
                                logging.debug(f""Запис не відповідає формату port/olt/onu: {entry_text}"")
                            current_entry = []
                        current_entry.append(line)
                    else:
                        current_entry.append(line)

                # Обработка последней записи
                if current_entry:
                    lines_processed += 1
                    entry_text = '\n'.join(current_entry)
                    logging.debug(f""Обробка останнього запису у {LAN_EVENTS_LOG}: {entry_text}"")
                    port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                    olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                    onu_match = re.search(r""ONU №(\d+)"", entry_text)
                    if port_match and olt_match and onu_match:
                        port = port_match.group(1)
                        olt_name = olt_match.group(1)
                        olt_ip = olt_match.group(2)
                        onu_number = onu_match.group(1)
                        key = (port, olt_name, olt_ip, onu_number)
                        if ""LAN LOS знайдено"" in entry_text:
                            summary[key]['los'] += 1
                            logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                        elif ""LAN LOS Restore знайдено"" in entry_text:
                            summary[key]['restore'] += 1
                            logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                    else:
                        logging.debug(f""Останній запис не відповідає формату: {entry_text}"")

                logging.info(f""Оброблено {lines_processed} записів у {LAN_EVENTS_LOG}"")

        # Формирование отчета
        if summary:
            msg = f""📊 Ручний звіт подій LAN за {today}:\n\n""
            for (port, olt_name, olt_ip, onu_number), counts in sorted(summary.items()):
                total = counts['los'] + counts['restore']
                msg += (
                    f""🔢 ONU №{onu_number}\n""
                    f""📍 Порт: {port}\n""
                    f""🖥 OLT: {olt_name} ({olt_ip})\n""
                    f""🔴 Втрата LAN: {counts['los']}\n""
                    f""🟢 LAN відновлено: {counts['restore']}\n""
                    f""🔢 Загалом: {total}\n\n""
                )
        else:
            msg = f""📊 Ручний звіт подій LAN за {today}:\n\n⚠️ Подій LAN LOS або Restore не знайдено""

        send_telegram(msg.strip(), sent_messages)
        logging.info(""Ручний звіт про події LAN відправлено в Telegram"")

    except Exception as e:
        logging.error(f""Помилка створення ручного звіту LAN: {e}"")

# Налаштування логування та перезапису файлів
def setup_logging_and_messages():
    try:
        logging.info(""Початок налаштування логування"")
        last_reset_date = None
        if os.path.exists(LAST_RESET_FILE):
            with open(LAST_RESET_FILE, 'r') as f:
                last_reset_date = f.read().strip()
            logging.info(f""Прочитано дату останнього перезапису: {last_reset_date}"")
        else:
            logging.info(f""Файл {LAST_RESET_FILE} не існує, буде створено"")
        today = str(date.today())
        logging.info(f""Поточна дата: {today}"")

        # Перевірка розміру логу
        log_size_mb = os.path.getsize(LOG_FILE_PATH) / (1024 * 1024) if os.path.exists(LOG_FILE_PATH) else 0
        logging.info(""Розмір логу: "" + str(round(log_size_mb, 2)) + "" МБ"")

        if last_reset_date != today:
            sent_messages = load_sent_messages()
            try:
                logging.basicConfig(
                    filename=LOG_FILE_PATH,
                    level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(message)s',
                    filemode='w',
                    force=True
                )
                logging.info(f""Лог перезаписано для нової доби (size={log_size_mb:.2f} МБ)"")
                with open(SENT_MESSAGES_FILE, 'w', encoding='utf-8') as f:
                    f.write('')
                logging.info(""Файл sent_messages.txt перезаписано для нової доби"")
                with open(LAST_RESET_FILE, 'w') as f:
                    f.write(today)
                logging.info(f""Оновлено {LAST_RESET_FILE} з датою {today}"")
            except Exception as e:
                logging.error(f""Помилка при перезаписі файлів: {e}"")
                raise
        else:
            logging.basicConfig(
                filename=LOG_FILE_PATH,
                level=logging.INFO,
                format='%(asctime)s [%(levelname)s] %(message)s',
                filemode='a',
                force=True
            )
            logging.info(""Дата не змінилася, використовується режим додавання"")
    except Exception as e:
        logging.error(f""Критична помилка налаштування: {e}"")
        print(f""Критична помилка налаштування: {e}"")
        raise

# Перевірка розміру файлів
def check_file_size(file_path, file_name, max_size_mb=10):
    try:
        if os.path.exists(file_path):
            size_mb = os.path.getsize(file_path) / (1024 * 1024)
            if size_mb > max_size_mb:
                current_time = time.time()
                last_warning_time = last_size_warning.get(file_name, 0)
                if current_time - last_warning_time > 600:
                    logging.warning(f""Розмір {file_name} перевищує {max_size_mb} МБ: {size_mb:.2f} МБ"")
                    last_size_warning[file_name] = current_time
    except Exception as e:
        logging.error(f""Помилка перевірки розміру {file_name}: {e}"")

# Глобальні змінні
current_interface = None
current_olt_name = None
current_olt_ip = None
current_description = None
onu_add_buffer = defaultdict(dict)

# Завантажуємо останню позицію
def load_last_position():
    if not os.path.exists(LAST_POSITION_FILE):
        return 0, os.stat(LOG_FILE).st_ino if os.path.exists(LOG_FILE) else 0
    try:
        with open(LAST_POSITION_FILE, 'r') as f:
            pos = f.read().strip()
            if pos == '':
                return 0, os.stat(LOG_FILE).st_ino
            return int(pos), os.stat(LOG_FILE).st_ino
    except Exception as e:
        logging.error(f""Помилка читання позиції з {LAST_POSITION_FILE}: {e}"")
        return 0, os.stat(LOG_FILE).st_ino if os.path.exists(LOG_FILE) else 0

# Зберігаємо останню позицію
def save_last_position(position):
    try:
        with open(LAST_POSITION_FILE, 'w') as f:
            f.write(str(position))
    except Exception as e:
        logging.error(f""Помилка збереження позиції в {LAST_POSITION_FILE}: {e}"")

# Парсинг логу
def parse_log(file_obj, start_pos, sent_messages):
    global current_interface, current_olt_name, current_olt_ip, current_description
    try:
        file_obj.seek(start_pos)
        file_size = os.path.getsize(LOG_FILE)
        if start_pos > file_size:
            logging.warning(f""start_pos ({start_pos}) більше file_size ({file_size}), скидаємо на 0"")
            start_pos = 0
            file_obj.seek(0)
        lines = file_obj.readlines()
        end_pos = file_obj.tell()
    except Exception as e:
        logging.error(f""Помилка читання файлу логу: {e}"")
        return start_pos

    for line in lines:
        line = line.strip().replace('#012', '').replace('#015', '')
        if not line:
            continue

        # Витягуємо ім'я та IP OLT
        m_olt = re.search(r""\[(\S+) (\d+\.\d+\.\d+\.\d+)\]"", line)
        if m_olt:
            current_olt_name = m_olt.group(1)
            current_olt_ip = m_olt.group(2)

        # Витягуємо час
        time_match = re.match(r""^\w+\s+\d+\s+(\d{2}:\d{2}:\d{2})"", line)
        time_str = time_match.group(1) if time_match else datetime.now().strftime(""%H:%M:%S"")
        try:
            event_time = datetime.strptime(time_str, ""%H:%M:%S"")
            event_time = event_time.replace(year=datetime.now().year, month=datetime.now().month, day=datetime.now().day)
        except ValueError as e:
            logging.error(f""Помилка формату часу {time_str}: {e}"")
            continue

        # Перевіряємо OLT перед обробкою подій
        if not current_olt_name or not current_olt_ip:
            logging.warning(f""Пропущено подію через відсутність OLT: {line}"")
            continue

        # Витягуємо інтерфейс
        m_intf = re.search(r""(?:interface\s+)(gpon-olt_\d+/\d+/\d+|gpon-onu_\d+/\d+/\d+:\d+)"", line, re.IGNORECASE)
        if m_intf:
            current_interface = m_intf.group(1)
            continue

        # Витягуємо description
        m_desc = re.search(r""description\s+(\S+)"", line, re.IGNORECASE)
        if m_desc:
            current_description = m_desc.group(1)
            for key, data in list(onu_add_buffer.items()):
                if key[2] == current_interface or key[2].replace(""gpon-olt_"", ""gpon-onu_"") + f"":{key[3]}"" == current_interface:
                    data['description'] = current_description
                    desc_str = f""\n🏷 Опис: {data['description']}"" if data['description'] else """"
                    msg = (
                        f""✅ ONU додано\n\n""
                        f""🕒 Час: {data['time_str']}\n""
                        f""🔢 ONU №{data['onu_number']}\n""
                        f""📍 Порт: {data['onu_iface']}{desc_str}\n""
                        f""🖥 OLT: {key[0]} ({key[1]})""
                    )
                    send_telegram(msg, sent_messages)
                    del onu_add_buffer[key]
            continue

        # LAN LOS Alarm
        m_lan_los = re.search(r""(?:GponRm notify:.*)?<gpon-onu_\d+/\d+/\d+:\d+>\s*SubType:\d+\s*Pos:\d+\s*ONU Uni lan los\. alarm"", line, re.IGNORECASE)
        if m_lan_los:
            m_iface_num = re.search(r""<(gpon-onu_\d+/\d+/\d+):(\d+)>"", line)
            if m_iface_num:
                onu_iface = m_iface_num.group(1)
                onu_num = m_iface_num.group(2)
                desc_str = f""\n🏷 Опис: {current_description}"" if current_description and current_interface == onu_iface else """"
                msg = (
                    f""🔴 Втрата LAN-з'єднання\n\n""
                    f""🕒 Час: {time_str}\n""
                    f""🔢 ONU №{onu_num}\n""
                    f""📍 Порт: {onu_iface}{desc_str}\n""
                    f""🖥 OLT: {current_olt_name} ({current_olt_ip})""
                )
                lan_logger.warning(f""LAN LOS знайдено: {msg}"")  # Записываем только в lan_events.log
                current_description = None
            continue

        # LAN LOS Restore
        m_lan_restore = re.search(r""(?:GponRm notify:.*)?<gpon-onu_\d+/\d+/\d+:\d+>\s*SubType:\d+\s*Pos:\d+\s*ONU Uni lan los\. restore"", line, re.IGNORECASE)
        if m_lan_restore:
            m_iface_num = re.search(r""<(gpon-onu_\d+/\d+/\d+):(\d+)>"", line)
            if m_iface_num:
                onu_iface = m_iface_num.group(1)
                onu_num = m_iface_num.group(2)
                desc_str = f""\n🏷 Опис: {current_description}"" if current_description and current_interface == onu_iface else """"
                msg = (
                    f""🟢 LAN-з'єднання відновлено\n\n""
                    f""🕒 Час: {time_str}\n""
                    f""🔢 ONU №{onu_num}\n""
                    f""📍 Порт: {onu_iface}{desc_str}\n""
                    f""🖥 OLT: {current_olt_name} ({current_olt_ip})""
                )
                lan_logger.warning(f""LAN LOS Restore знайдено: {msg}"")  # Записываем только в lan_events.log
                current_description = None
            continue

        # Видалення ONU
        m_no_onu = re.search(r""\b(?:no\s+onu|ont delete)\s+(\d+)(?:\s+\d+)?|ont delete\s+(\d+/\d+/\d+)\s+(\d+)"", line, re.IGNORECASE)
        if m_no_onu:
            onu_iface = m_no_onu.group(2) or current_interface or ""невідомий""
            onu_number = m_no_onu.group(1) or m_no_onu.group(3)
            desc_str = f""\n🏷 Опис: {current_description}"" if current_description and current_interface == onu_iface else """"
            msg = (
                f""❌ ONU видалено\n\n""
                f""🕒 Час: {time_str}\n""
                f""🔢 ONU №{onu_number}\n""
                f""📍 Порт: {onu_iface}{desc_str}\n""
                f""🖥 OLT: {current_olt_name} ({current_olt_ip})""
            )
            send_telegram(msg, sent_messages)
            current_description = None
            key = (current_olt_name, current_olt_ip, onu_iface, onu_number)
            if key in onu_add_buffer:
                del onu_add_buffer[key]
            continue

        # Додавання ONU
        m_add_onu = re.search(r""\b(?:onu\s+add|ont add)\s+(\d+)\s+(\d+)|ont add\s+(\d+/\d+/\d+)\s+(\d+)|onu\s+(\d+)\s+type\s+\S+\s+sn\s+\S+"", line, re.IGNORECASE)
        if m_add_onu:
            onu_iface = m_add_onu.group(1) or m_add_onu.group(3) or current_interface or ""невідомий""
            onu_number = m_add_onu.group(2) or m_add_onu.group(4) or m_add_onu.group(5)
            key = (current_olt_name, current_olt_ip, onu_iface, onu_number)
            onu_add_buffer[key] = {
                'time_str': time_str,
                'onu_iface': onu_iface,
                'onu_number': onu_number,
                'description': current_description if current_interface == onu_iface else None,
                'timestamp': datetime.now()
            }
            current_description = None
            continue

    # Обробка відкладених подій ONU
    current_time = datetime.now()
    for key, data in list(onu_add_buffer.items()):
        if (current_time - data['timestamp']).seconds >= 5:
            desc_str = f""\n🏷 Опис: {data['description']}"" if data['description'] else """"
            msg = (
                f""✅ ONU додано\n\n""
                f""🕒 Час: {data['time_str']}\n""
                f""🔢 ONU №{data['onu_number']}\n""
                f""📍 Порт: {data['onu_iface']}{desc_str}\n""
                f""🖥 OLT: {key[0]} ({key[1]})""
            )
            send_telegram(msg, sent_messages)
            del onu_add_buffer[key]

    return end_pos

# Моніторинг логу
def monitor_log():
    sent_messages = load_sent_messages()
    if can_send_activation():
        test_msg = f""🔔 Моніторинг OLT активовано\n\n🕒 Час: {datetime.now().strftime('%H:%M:%S')}""
        send_telegram(test_msg, sent_messages)
        save_activation_time()
    last_pos, last_inode = load_last_position()

    while True:
        try:
            check_file_size(LOG_FILE_PATH, ""olt_monitor.log"", max_size_mb=10)
            check_file_size(SENT_MESSAGES_FILE, ""sent_messages.txt"", max_size_mb=10)
            check_file_size(LAN_EVENTS_LOG, ""lan_events.log"", max_size_mb=10)
            if not os.path.exists(LOG_FILE):
                logging.error(f""Файл логу {LOG_FILE} не існує. Очікування 60 секунд"")
                time.sleep(60)
                continue
            current_inode = os.stat(LOG_FILE).st_ino
            if current_inode != last_inode:
                logging.info(f""Виявлено новий inode для {LOG_FILE}, скидання позиції"")
                last_pos, last_inode = 0, current_inode
            with open(LOG_FILE, ""r"", encoding=""utf-8"") as f:
                new_pos = parse_log(f, last_pos, sent_messages)
                if new_pos != last_pos:
                    save_last_position(new_pos)
                    last_pos = new_pos
            time.sleep(CHECK_INTERVAL)
        except Exception as e:
            logging.error(f""Критична помилка при обробці логу: {e}"")
            time.sleep(60)

# Планувальник для щоденного звіту
def run_scheduler():
    sent_messages = load_sent_messages()
    schedule.every().day.at(REPORT_TIME).do(send_lan_summary_to_telegram, sent_messages)
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == ""__main__"":
    try:
        setup_logging_and_messages()
        # Перевіряємо аргумент командного рядка
        if len(sys.argv) > 1 and sys.argv[1] == ""--manual-report"":
            manual_lan_summary()
        else:
            # Запускаємо планувальник у окремому потоці
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()
            monitor_log()
    except Exception as e:
        logging.error(f""Помилка запуску програми: {e}"")
        raise
"
ECabTkfG,IP address configuration,gio_aggiustatutto,YAML,Sunday 8th of June 2025 02:31:21 AM CDT,"wifi:
  ssid: your_wifi_ssid
  password: your_wifi_password

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.253
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0"
njCSfB5z,Example code,gio_aggiustatutto,YAML,Sunday 8th of June 2025 02:28:33 AM CDT,"esphome:
  name: smart-watering-system
  friendly_name: Smart Watering System

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""generated_automatically""

ota:
  - platform: esphome
    password: ""generated_automatically""

wifi:
  ssid: your_wifi_ssid
  password: your_wifi_password

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.253
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""Smart-Watering-System""
    password: ""generated_automatically""

captive_portal:

switch:
  - platform: gpio
    pin: GPIO16
    name: ""Water pump""
    id: water_pump
    on_turn_on: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_on: blue_led
            else:
              - delay: 1s
              - switch.turn_off: water_pump       
    on_turn_off: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_off: blue_led

button:
  - platform: template
    name: Start Watering
    id: button_start
    icon: ""mdi:power-on""
    on_press:
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - switch.turn_on: water_pump
              - delay: !lambda ""return id(watering_time).state*60*1000;""
              - switch.turn_off: water_pump
            else:
              - switch.turn_off: water_pump

  - platform: template
    name: Stop Watering
    id: button_stop
    icon: ""mdi:power-off""
    on_press:
      then:
        - switch.turn_off: water_pump
      

number:
  - platform: template
    name: Full Distance
    icon: mdi:arrow-collapse-vertical
    entity_category: config
    id: full_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Empty Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: empty_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Safe Level Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: safe_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Watering Time
    icon: mdi:clock-edit
    id: watering_time
    min_value: 1
    max_value: 60
    initial_value: 10
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: minutes
    mode: box

output:
  - platform: gpio
    pin: GPIO26
    id: red_led_output
  - platform: gpio
    pin: GPIO23
    id: yellow_led_1_output
  - platform: gpio
    pin: GPIO18
    id: yellow_led_2_output
  - platform: gpio
    pin: GPIO19
    id: green_led_output
  - platform: gpio
    pin: GPIO27
    id: blue_led_output

light:
  - platform: binary
    name: ""Red LED""
    id: red_led
    disabled_by_default: True
    output: red_led_output
    internal: False
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - strobe:
          name: Blink
          colors:
            - state: true
              brightness: 100%
              duration: 500ms
            - state: false
              duration: 500ms
  - platform: binary
    name: ""Yellow LED 1""
    id: yellow_led_1
    disabled_by_default: True
    output: yellow_led_1_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Yellow LED 2""
    id: yellow_led_2
    disabled_by_default: True
    output: yellow_led_2_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Green LED""
    id: green_led
    disabled_by_default: True
    output: green_led_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Blue LED""
    id: blue_led
    disabled_by_default: True
    output: blue_led_output
    effects:
      - strobe:
          name: Double Blink
          colors:
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 200ms
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 500ms

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO33
      mode:
        input: true
        pullup: true
      inverted: true
    name: ""Pushbutton""
    id: start_button
    filters:
      - delayed_on: 100ms
    on_press: 
      then:
        - if:
            condition:
              - switch.is_off: water_pump
            then:
              - button.press: button_start
              - delay: 1s
            else:
              - button.press: button_stop
              - delay: 1s
        

  - platform: template
    name: ""Water Level OK""
    id: water_level_ok
    lambda: |-
      if (id(ultrasonic_sensor_distance).state < id(safe_distance_m).state) {
        //there is enough water
        return true;
      } else {
        //there is not enough water
        return false;
      }
    on_state:
      then:
        - lambda: |-
            if (x == false) {
              id(blue_led).turn_on().set_effect(""Double Blink"").perform();
              id(water_pump).turn_off();
            } else {
              //do nothing
            }
    on_press: 
      then:
        - light.turn_off: blue_led
        
  - platform: template
    name: ""Pump Status""
    id: pump_status
    device_class: running
    lambda: |-
      return id(water_pump).state;

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO22
    echo_pin: GPIO21
    name: ""Level Sensor Distance""
    id: ultrasonic_sensor_distance
    device_class: distance
    update_interval: 1s
    pulse_time: 10us
    timeout: 20m
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15

  - platform: template
    name: ""Water Level""
    id: water_level
    lambda: |-
        return id(ultrasonic_sensor_distance).state;
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: ""%""
    filters:
      - lambda: return ((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * x + (100 - (((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * id(full_distance_m).state));
      - clamp:
          min_value: 0
          max_value: 100
          ignore_out_of_range: false
    on_value_range: 
      - below: 20
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
          - light.turn_on:
              id: red_led
              effect: Blink          
      - above: 20
        then:
          - light.turn_on:
              id: red_led
              effect: None
      - below: 40
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
      - above: 40
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
      - below: 60
        then:
          - light.turn_off: yellow_led_2
          - light.turn_off: green_led
      - above: 60
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
      - below: 80
        then:
          - light.turn_off: green_led

      - above: 80
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
          - light.turn_on: green_led"
cEcMSsnR,Code to be added below the one provided by ESPHome,gio_aggiustatutto,YAML,Sunday 8th of June 2025 02:24:48 AM CDT,"switch:
  - platform: gpio
    pin: GPIO16
    name: ""Water pump""
    id: water_pump
    on_turn_on: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_on: blue_led
            else:
              - delay: 1s
              - switch.turn_off: water_pump       
    on_turn_off: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_off: blue_led

button:
  - platform: template
    name: Start Watering
    id: button_start
    icon: ""mdi:power-on""
    on_press:
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - switch.turn_on: water_pump
              - delay: !lambda ""return id(watering_time).state*60*1000;""
              - switch.turn_off: water_pump
            else:
              - switch.turn_off: water_pump

  - platform: template
    name: Stop Watering
    id: button_stop
    icon: ""mdi:power-off""
    on_press:
      then:
        - switch.turn_off: water_pump
      

number:
  - platform: template
    name: Full Distance
    icon: mdi:arrow-collapse-vertical
    entity_category: config
    id: full_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Empty Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: empty_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Safe Level Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: safe_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Watering Time
    icon: mdi:clock-edit
    id: watering_time
    min_value: 1
    max_value: 60
    initial_value: 10
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: minutes
    mode: box

output:
  - platform: gpio
    pin: GPIO26
    id: red_led_output
  - platform: gpio
    pin: GPIO23
    id: yellow_led_1_output
  - platform: gpio
    pin: GPIO18
    id: yellow_led_2_output
  - platform: gpio
    pin: GPIO19
    id: green_led_output
  - platform: gpio
    pin: GPIO27
    id: blue_led_output

light:
  - platform: binary
    name: ""Red LED""
    id: red_led
    disabled_by_default: True
    output: red_led_output
    internal: False
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - strobe:
          name: Blink
          colors:
            - state: true
              brightness: 100%
              duration: 500ms
            - state: false
              duration: 500ms
  - platform: binary
    name: ""Yellow LED 1""
    id: yellow_led_1
    disabled_by_default: True
    output: yellow_led_1_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Yellow LED 2""
    id: yellow_led_2
    disabled_by_default: True
    output: yellow_led_2_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Green LED""
    id: green_led
    disabled_by_default: True
    output: green_led_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Blue LED""
    id: blue_led
    disabled_by_default: True
    output: blue_led_output
    effects:
      - strobe:
          name: Double Blink
          colors:
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 200ms
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 500ms

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO33
      mode:
        input: true
        pullup: true
      inverted: true
    name: ""Pushbutton""
    id: start_button
    filters:
      - delayed_on: 100ms
    on_press: 
      then:
        - if:
            condition:
              - switch.is_off: water_pump
            then:
              - button.press: button_start
              - delay: 1s
            else:
              - button.press: button_stop
              - delay: 1s
        

  - platform: template
    name: ""Water Level OK""
    id: water_level_ok
    lambda: |-
      if (id(ultrasonic_sensor_distance).state < id(safe_distance_m).state) {
        //there is enough water
        return true;
      } else {
        //there is not enough water
        return false;
      }
    on_state:
      then:
        - lambda: |-
            if (x == false) {
              id(blue_led).turn_on().set_effect(""Double Blink"").perform();
              id(water_pump).turn_off();
            } else {
              //do nothing
            }
    on_press: 
      then:
        - light.turn_off: blue_led
        
  - platform: template
    name: ""Pump Status""
    id: pump_status
    device_class: running
    lambda: |-
      return id(water_pump).state;

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO22
    echo_pin: GPIO21
    name: ""Level Sensor Distance""
    id: ultrasonic_sensor_distance
    device_class: distance
    update_interval: 1s
    pulse_time: 10us
    timeout: 20m
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15

  - platform: template
    name: ""Water Level""
    id: water_level
    lambda: |-
        return id(ultrasonic_sensor_distance).state;
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: ""%""
    filters:
      - lambda: return ((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * x + (100 - (((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * id(full_distance_m).state));
      - clamp:
          min_value: 0
          max_value: 100
          ignore_out_of_range: false
    on_value_range: 
      - below: 20
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
          - light.turn_on:
              id: red_led
              effect: Blink          
      - above: 20
        then:
          - light.turn_on:
              id: red_led
              effect: None
      - below: 40
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
      - above: 40
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
      - below: 60
        then:
          - light.turn_off: yellow_led_2
          - light.turn_off: green_led
      - above: 60
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
      - below: 80
        then:
          - light.turn_off: green_led

      - above: 80
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
          - light.turn_on: green_led"
phMPqnsw,hopold,Daeho,Lua,Sunday 8th of June 2025 01:33:28 AM CDT,"if not game:IsLoaded() then game.Loaded:Wait() end
loadstring(game:HttpGet(""https://raw.githubusercontent.com/uzu01/arise/refs/heads/main/global.lua""))()

_G.JxereasExistingHooks  = {GuiDetectionBypass  = true}

local notification = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua"", true))()
local replicated_storage = game:GetService(""ReplicatedStorage"")
local data_service = require(replicated_storage.Modules.DataService)
local lowest_odd = 1000
local highest_weight = 0
local garden

function send_webhook(url, text, ...)
    return request({
        Url = (""%*?wait=true""):format(url),
        Method = ""POST"",
        Headers = {[""Content-Type""] = ""application/json""},
        Body = game:GetService(""HttpService""):JSONEncode({embeds = {...}, content = text})
    })
end

task.wait(3)

for i, v in workspace.Farm:GetChildren() do
    if v.Important.Data.Owner.Value ~= player.Name then continue end
    garden = v
end

function get_egg(uid)
    for i, v in garden.Important.Objects_Physical:GetChildren() do
        if v.Name:match(""PetEgg"") and v:GetAttribute(""OBJECT_UUID"") == uid then
            return v
        end
    end
    return nil
end

for i, v in data_service:GetData().SavedObjects do
    local data = v.Data
    local egg = data and data.EggName

    if not egg then continue end
    if not data.RandomPetData then continue end

    if data.RandomPetData.ItemOdd < lowest_odd then
        lowest_odd = data.RandomPetData.ItemOdd
    end

    if data.BaseWeight > highest_weight then
        highest_weight = data.BaseWeight
    end

    if webhook_url then
        send_webhook(webhook_url, (""> name: **%s** (%.2f%%)\n> weight: **%.2f kg**\n""):format(data.Type, data.RandomPetData.ItemOdd, data.BaseWeight), nil)
    end

    if data.RandomPetData.ItemOdd < 1 then
        print(data.Type, get_egg(i))
        replicated_storage.GameEvents.PetEggService:FireServer(""HatchPet"", get_egg(i))
    end

    notification.new(""info"", ""Pet"", data.Type)
end

if lowest_odd >= 1 then
    game:GetService(""TeleportService""):Teleport(game.PlaceId)
end

queue_on_teleport('loadstring(game:HttpGet(""https://pastebin.com/raw/BE36f3z8))()')"
T9UTdbRP,2025-06-08T07:43:13.727,powerampache,PHP,Saturday 7th of June 2025 11:43:15 PM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to snappsisnappes.mercusysddns.com/78.36.104.194:443"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

"
7wYtraWh,Paid script online,ZeroX_Carxstreet,Lua,Saturday 7th of June 2025 11:10:16 PM CDT,"function HOME()
speek = gg.choice({
""ENGLISH"",
""عربي "",
""🛑🛑EXIT/خروج🛑🛑"",
}, nil, (os.date("" • welcom to script ROOT FR •                        • اهلين بيك في سكربت ROOT FR • "")))


if speek == 1 then MK1() end
if speek == 2 then MK2() end 
if speek == 3 then Exit() end
speek = -1
end



function MK1()
  SN = gg.multiChoice({
  ""Unlimited Money And Gold 🤯🔥"",
  ""Hack Level Max🔥"",
    ""Unlimited Nitro ⚡️☠️"",
    ""Unlimited fuel ⛽"",
  ""Speed Hack V1 "",
  "" Speed Hack 🚀 V2 1000km"",
  "" Speed Hack V3 Pawor 1000km"",
  ""Magic Cambra 180🤯"",  
  ""Power Hp🏎"",
  ""Big Magic Wheel"",
   ""Big Wheel 🔼 "",  
   ""Speed Game ⏩️"",
   ""Unlock All Car Premium $🏎"",
  ""🛑🛑Back language🛑🛑"",
   }, nil, (os.date("" script update : 1.11.0                      🔥  Telegram Developer : ROOT FR @crn62 🔥 \n • %A, %d %B %Y                                  %H:%M%p • "")))
  if SN == nil then
  else
  if SN[1] == true then
    a1()
  end
  if SN[2] == true then
    a2()
  end
  if SN[3] == true then
    a3()
  end
  if SN[4] == true then
    a4()
  end
  if SN[5] == true then
    a5()
  end
    if SN[6] == true then
    a6()
  end
    if SN[7] == true then
    a7()
  end
    if SN[8] == true then
    a8()
  end
  if SN[9] == true then
    a9()
  end
    if SN[10] == true then
    a10()
  end
    if SN[11] == true then
    a11()
  end
   if SN[12] == true then
    a12()
  end
  if SN[13] == true then
    a13()
  end
   if SN[14] == true then
   HOME()
  end
end
  XGCK = -1
end

--gg.refineNumber(""-125000"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
function a1()
gg.alert(""⚠️Notice you have to get select code hack⚠️"")

Rootfr = gg.choice({
""get code"",
""get hack "",
""🛑🛑Back Menu🛑🛑"",
}, nil, (os.date("" •Select code hack then go hack • "")))

if Rootfr == 1 then R1() end 
if Rootfr == 2 then R2() end 
if Rootfr == 3 then HOME() end 
end

function R1()
gg.alert(""🟢 This is code hack search for ID remember or screenshot : bbhyw6v7 🟢"")
end

function R2()
gg.searchNumber(""29400;11"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""Done Hack ✅"")
end
function a2()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""2000;10"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(200, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""300;5"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""1500;10"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(200, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""1700;10"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(200, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""The level has been hacked, complete a mission, and the Level Max will be raised successfully ✅"")

end
function a3()
gg.alert(""⚠️Note Go to a gas station ⚠️"")
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""0.02999999933F;20.0F;40.0F"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.refineNumber(""20"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""100000000000000000"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""536870912"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""100000000000000000"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""Done Hack Unlimited nitro ✅"")

end

function a4()
gg.alert(""⚠️Note Go to a gas station ⚠️"")
gg.searchNumber(""0.00800000038F;40.0F"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
--[[ found: 0 ]]
gg.processResume()
gg.refineNumber(""40"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
--[[ found: 0 ]]
gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
--[[ count: 0 ]]
gg.editAll(""400"", gg.TYPE_FLOAT)
gg.editAll(""400"", gg.TYPE_FLOAT)
gg.alert(""📒 Notes: This unlimited fuel cannot be used forever or stored. It is only available when you use the ⚠️ script."")
gg.toast(""Done Hack Unlimited Fuel ✅"")
end
function a5()
gg.alert(""⚠️ Note Watch an explanation video to know how to hack ⚠️"")
gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""2.5"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""-0.4"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-6"", gg.TYPE_FLOAT)
gg.clearResults()
  gg.alert(""✅️Done Hack speed car exit garage and back again✅️"")
end
function a6()
gg.alert(""⚠️ Note Watch an explanation video to know how to hack ⚠️"")
gg.setRanges(gg.REGION_ANONYMOUS)
  gg.searchNumber(""-0.4"", gg.TYPE_FLOAT)
  gg.getResults(1000)
  gg.editAll(""-12"", gg.TYPE_FLOAT)  
  gg.clearResults(1000)
gg.processResume()
gg.processResume()
gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""10"", gg.TYPE_FLOAT)
gg.processResume()
  gg.alert(""✅️Done Hack speed car exit garage and back again✅️"")

  gg.toast(""Done Speed 1000km"")
end


function a7()
gg.alert(""⚠️ Note Watch an explanation video to know how to hack ⚠️"")
gg.searchNumber(""2.4375"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""-0.4"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-12"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""3.75"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""70"", gg.TYPE_FLOAT)
gg.clearResults()  

gg.searchNumber(""-0.0525"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-30"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""369.59878540039"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""6000"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_FLOAT)
gg.clearResults() 

gg.clearResults()
gg.searchNumber(""13.5"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""20"", gg.TYPE_FLOAT)
gg.clearResults()
  gg.alert(""✅️Done Hack speed car exit garage and back again✅️"")
end






function a8()
--magic camera
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""-7.5"", gg.TYPE_FLOAT)
--[[ found: 0 ]]
gg.getResults(400)
--[[ count: 0 ]]
gg.editAll(""-70"", gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""-6"", gg.TYPE_FLOAT)
--[[ found: 118 ]]
gg.getResults(400)
--[[ count: 118 ]]
gg.editAll(""-70"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""👉exit garage and back again👈"")
--[[ return: 0 ]]
gg.toast(""🎉Activated✅️"")
gg.setVisible(false)

end
function a9()
gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_FLOAT)
gg.clearResults()
end



function a10()
--big wheel
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""215"", gg.TYPE_FLOAT)
--[[ found: 0 ]]
gg.getResults(1000)
--[[ count: 0 ]]
gg.editAll(""600"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""📒 Notes: This Big Wheel Magic cannot be used forever or stored. It is only available when you use the script ⚠️👈"")
--[[ return: 1 ]]
gg.toast(""🎉"")
end




function a11()
CRN62 = gg.choice({
""S80"",
""LMH "",
""🛑🛑Back Menu🛑🛑"",
}, nil, (os.date("" • Choose a car to hack wheel lengthening • "")))






if CRN62 == 1 then C1() end 
if CRN62 == 2 then C2() end 
if CRN62 == 3 then HOME() end 
end







function C1()
gg.searchNumber(""0.0432"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""1"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""👉exit garage and back again👈"")
gg.toast(""🎉Activated✅️"")
end

function C2()
gg.searchNumber(""0.03599999845"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""1"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""0.03240000084"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""1"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""👉exit garage and back again👈"")
gg.toast(""🎉Activated✅️"")
end



function a12()
gg.alert(""🔴 🔴 Note, the entire game will be accelerated, as you will see that the computer cars will also be fast, and the speed of the car is greater than the number shown on the speedometer 🔴,🔴Okay🔴"")
ZeroX = gg.choice({
""⚡ Speed game X2 ⚡"",
""⚡❌ Disable X2 ❌⚡ "",
""⚡ Speed game X3 ⚡"",
""⚡❌ Disable X3 ❌⚡ "",
""🛑🛑Back Menu🛑🛑"",
}, nil, (os.date(""  "")))






if ZeroX == 1 then A1() end 
if ZeroX == 2 then A2() end 
if ZeroX == 3 then A3() end 
if ZeroX == 4 then A4() end 
if ZeroX == 5 then HOME() end 
end



function A1()
gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""0.60000002384"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.20001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
    
    
    
    gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.40001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.20001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡ Activated X2 ⚡"")
end

function A2()
gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.20001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""0.60000002384"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡❌ Done Disabled X2 ❌⚡"")
end

function A3()
gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""0.60000002384"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.40001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
    
    
      gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.20001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.40001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡ Activated X3 ⚡"")
end


function A4()
gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.40001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""0.60000002384"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡❌ Done Disabled X3 ❌⚡"")
end


function a13()
gg.searchNumber(""28429462274048004"", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""28429462274048000"", gg.TYPE_QWORD)
gg.processResume()
gg.clearResults()
gg.alert("" Unlock All By Root Fr"")
gg.toast(""🎉Activated✅️"")
end

function MK2()
  VE = gg.multiChoice({
  ""تهكير فلوس لا نهايه و ذهب🤯🔥"",
  ""تهكير ليفل ماكس 50🤯🔥"",
    ""تهكير ناترو لا نهايه ☠️😱"",
    ""وقود لا نهائيه⛽"",
  ""تهكير سرعة V1 سياره😂🤯🔥"",
  "" تهكير سرعه سياره 🚀 1000km V2"",
  "" تهكير سرعه سياره V3 قوة 1000km"",
  ""ماجيك كامبر 180🤯"",  
  ""Power Hp🏎"",
  ""🔥عجلة ماجيك كبير⚙️"",
   ""تكبير عجلة 🔼 "",  
   "" تسريع لعبه ⏩️"",
   "" تهكير سيارات بريمر $🏎"",
  ""🛑🛑رجوع لغة🛑🛑"",
   }, nil, (os.date("" script update : 1.11.0                 🔥 Telegram: @crn62  🔥 (مطور سكربت : ROOT FR) \n • %A, %d %B %Y                                  %H:%M%p • "")))
  if VE == nil then
  else
  if VE[1] == true then
    n1()
  end
  if VE[2] == true then
    n2()
  end
  if VE[3] == true then
    n3()
  end
  if VE[4] == true then
    n4()
  end
  if VE[5] == true then
    n5()
  end
  if VE[6] == true then
    n6()
  end
  if VE[7] == true then
    n7()
  end
  if VE[8] == true then
    n8()
  end
  if VE[9] == true then
    n9()
  end
  if VE[10] == true then
    n10()
  end
  if VE[11] == true then
    n11()
  end
  if VE[12] == true then
    n12()
  end
  if VE[13] == true then
    n13()
  end
   if VE[14] == true then
   HOME()
  end
end
  XGCK = -1
end

--gg.refineNumber(""-125000"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
function n1()
gg.alert(""⚠️ ملاحظه يجيب اختيار خيار حصول كود بعدين اختار تهكير⚠️"")

GGROOT = gg.choice({
""get code"",
""get hack "",
""🛑🛑Back Menu🛑🛑"",
}, nil, (os.date("" •اختار كود بعدين قوم اختيار تهكير • "")))

if GGROOT == 1 then F1() end 
if GGROOT == 2 then F2() end 
if GGROOT == 3 then HOME() end 
end

function F1()
gg.alert(""🟢 هذا هو الكود اذكر او احفظ او التقط صوره بعدين روح كلمه ID و سوي بحث هذا هو الكود : bbhyw6v7 🟢"")
end

function F2()
gg.searchNumber(""29400;11"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""Done Hack ✅"")
end
function n2()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""2000;10"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(200, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""300;5"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""1500;10"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(200, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""1700;10"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(200, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9999999999"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""تم تهكير ليفل يجيب لعبه مهمه و انتهاء و سيتم رفع ليفل ماكس بنجاح ✅"")

end
function n3()
gg.alert(""⚠️ملاحظه اذهب مكان محطة بنزين ⚠️"")
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""0.02999999933F;20.0F;40.0F"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.refineNumber(""20"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""100000000000000000"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""536870912"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""100000000000000000"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""تم تهكير ناترو لا نهائيه ✅"")

end

function n4()
gg.alert(""⚠️ملاحظه اذهب مكان محطة بنزين ⚠️"")
gg.searchNumber(""0.00800000038F;40.0F"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
--[[ found: 0 ]]
gg.processResume()
gg.refineNumber(""40"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
--[[ found: 0 ]]
gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
--[[ count: 0 ]]
gg.editAll(""400"", gg.TYPE_FLOAT)
gg.alert(""📒 ملاحظات: لا يمكن استخدام هذا الوقود غير المحدود إلى الأبد أو تخزينه. إنه متاح فقط عندما تستخدم سكربت ⚠️."")
gg.toast(""تم تهكير وقود لا نهائيه ✅"")
end
function n5()
gg.alert(""⚠️ملاحظه يجيب مشاهده فيديو شرح لكي تعرف طريقه تهكير⚠️"")
gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""2.5"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""-0.4"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-6"", gg.TYPE_FLOAT)
gg.clearResults()
  gg.alert(""✅تم تفعيل سرعه سياره اخرج من كراج و ادخل مره ثانيه✅"")
end
function n6()
gg.alert(""⚠️ملاحظه يجيب مشاهده فيديو شرح لكي تعرف طريقه تهكير⚠️"")
gg.setRanges(gg.REGION_ANONYMOUS)
  gg.searchNumber(""-0.4"", gg.TYPE_FLOAT)
  gg.getResults(1000)
  gg.editAll(""-12"", gg.TYPE_FLOAT)  
  gg.clearResults(1000)
gg.processResume()
gg.processResume()
gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""10"", gg.TYPE_FLOAT)
gg.processResume()
  gg.alert(""✅تم تفعيل سرعه سياره اخرج من كراج و ادخل مره ثانيه✅"")
  gg.toast(""تم تسريع 1000km"")
end


function n7()
gg.alert(""⚠️ملاحظه يجيب مشاهده فيديو شرح لكي تعرف طريقه تهكير⚠️"")
gg.searchNumber(""2.4375"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""-0.4"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-12"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""3.75"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""70"", gg.TYPE_FLOAT)
gg.clearResults()  

gg.searchNumber(""-0.0525"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""-30"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""369.59878540039"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""6000"", gg.TYPE_FLOAT)
gg.clearResults()

gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_FLOAT)
gg.clearResults() 

gg.clearResults()
gg.searchNumber(""13.5"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""20"", gg.TYPE_FLOAT)
gg.clearResults()
  gg.alert(""✅تم تفعيل سرعه سياره اخرج من كراج و ادخل مره ثانيه✅"")
end






function n8()
--magic camera
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""-7.5"", gg.TYPE_FLOAT)
--[[ found: 0 ]]
gg.getResults(400)
--[[ count: 0 ]]
gg.editAll(""-70"", gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""-6"", gg.TYPE_FLOAT)
--[[ found: 118 ]]
gg.getResults(400)
--[[ count: 118 ]]
gg.editAll(""-70"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""👈اخرج من كراج و ادخل مره ثانيه👉"")
--[[ return: 0 ]]
gg.toast(""🎉تم تفعيل✅"")
gg.setVisible(false)

end
function n9()
gg.searchNumber(""0.0648"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_FLOAT)
gg.clearResults()
end



function n10()
--big wheel
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber(""215"", gg.TYPE_FLOAT)
--[[ found: 0 ]]
gg.getResults(1000)
--[[ count: 0 ]]
gg.editAll(""600"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""📒 ملاحظات: لا يمكن استخدام ماجيك العجلة الكبيرة هذا إلى الأبد أو تخزينه. إنه متاح فقط عندما تستخدم سكربت ⚠️👈"")
--[[ return: 1 ]]
gg.toast(""🎉"")
end




function n11()
CRN62 = gg.choice({
""S80"",
""LMH "",
""🛑🛑رجوع🛑🛑"",
}, nil, (os.date("" • اختار سياره لتهكير تطويل عجلة • "")))






if CRN62 == 1 then C1() end 
if CRN62 == 2 then C2() end 
if CRN62 == 3 then HOME() end 
end







function C1()
gg.searchNumber(""0.0432"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""1"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""👈اخرج من كراج و ادخل مره ثانيه👉"")
gg.toast(""🎉تم تفعيل✅"")
end

function C2()
gg.searchNumber(""0.03599999845"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""1"", gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber(""0.03240000084"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""1"", gg.TYPE_FLOAT)
gg.clearResults()
gg.alert(""👈اخرج من كراج و ادخل مره ثانيه👉"")
gg.toast(""🎉تم تفعيل✅"")
end



function n12()
gg.alert(""🔴 ملاحظة ، سوف يتم تسريع اللعبة بالكامل ، حيث سترى أن سيارات الكمبيوتر ستكون سريعه أيضا، وسرعة السياره اكبر من الرقم الظاهر في عداد السرعة 🔴,🔴حسنا🔴"")
ZeroX = gg.choice({
""⚡ تسريع X2 ⚡"",
""⚡❌ X2 تعطيل ❌⚡ "",
""⚡ تسريع X3 ⚡"",
""⚡❌ X3 تعطيل ❌⚡ "",
""🛑🛑رجوع🛑🛑"",
}, nil, (os.date(""  "")))






if ZeroX == 1 then O1() end 
if ZeroX == 2 then O2() end 
if ZeroX == 3 then O3() end 
if ZeroX == 4 then O4() end 
if ZeroX == 5 then HOME() end 
end



function O1()
gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""0.60000002384"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.20001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
    
    
    
    gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.40001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.20001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡ X2 تم التفعيل ⚡"")
end

function O2()
gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.20001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""0.60000002384"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡❌ X2 تم التعطيل ❌⚡"")
end

function O3()
gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""0.60000002384"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.40001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
    
    
      gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.20001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""1.40001234567899"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡ X3 تم التفعيل ⚡"")
end


function O4()
gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber(""1.40001234567899"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
  local results = gg.getResults(8000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll(""0.60000002384"", gg.TYPE_FLOAT)
    gg.processResume()
    gg.clearResults()
gg.alert(""⚡❌ X3 تم التعطيل ❌⚡"")
end

function n13()
gg.searchNumber(""28429462274048004"", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""28429462274048000"", gg.TYPE_QWORD)
gg.processResume()
gg.clearResults()
gg.alert("" تم فتح بريمر من Root Fr"")
gg.toast(""🎉تم تفعيل ✅️"")
end







function Exit()
gg.alert("" (Good Bay 👋)  (وداعا 👋) "")
gg.toast("" (Thanks use my script) (شكرآ استخدم سكربت ) "")
gg.getResults(gg.getResultsCount())
gg.clearResults()
os.exit()
end
while true do
if gg.isVisible(true) then
speek = 1
gg.setVisible(false)
end
gg.clearResults()
if speek == 1 then
HOME()
end
end
"
A8jXScvd,BG Eraser Photo Editor,Awokawok123,HTML,Saturday 7th of June 2025 10:31:28 PM CDT,"<head>
<meta name=""update_title"" content=""Update Tersedia!!!""/>
<meta name=""update_description"" content=""<p>Versi terbaru 2.26.77 telah tersedia dalam blogger...</p><p><b>Yang Baru:</b><br>• Tidak ada penjelasan khusus dari developer, jadi silakan update saja jika memang perlu...</p>""/>
<meta name=""update_light_color"" content=""#FFFFFF""/>
<meta name=""update_dark_color"" content=""#000000""/>
<meta name=""update_url"" content=""https://modded-by-yadi.blogspot.com/2023/09/BG-Eraser-RemoveBG.html""/>
<meta name=""update_show_skip"" content=""true""/>
<meta name=""update_force"" content=""false""/>
<meta name=""update_version"" content=""2.26.77""/>
<meta name=""update_skip_text"" content=""Lewati update ini""/>
<meta name=""update_cancel_text"" content=""NANTI""/>
<meta name=""update_update_text"" content=""UPDATE""/>
<meta name=""update_checkbox_color_light"" content=""#212121""/>
<meta name=""update_checkbox_color_dark"" content=""#FFFFFF""/>
<meta name=""update_button_text_color_light"" content=""#000000""/>
<meta name=""update_button_text_color_dark"" content=""#FFFFFF""/>
<meta name=""update_title_text_color_light"" content=""#212121""/>
<meta name=""update_title_text_color_dark"" content=""#FFFFFF""/>
<meta name=""update_desc_text_color_light"" content=""#424242""/>
<meta name=""update_desc_text_color_dark"" content=""#EEEEEE""/>
</head>"
0pXKTHun,bridge and house,Ogare65z,HTML,Saturday 7th of June 2025 10:15:37 PM CDT,"<map width=""25"" height=""25"" exporter=""DeedPlanner 3.1.1 ALPHA"">
  <tile x=""0"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""0"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""1"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""2"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""3"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""4"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""4"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <hWall id=""wArch"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wArch"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
  </tile>
  <tile x=""4"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wArch"" reversed=""true"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""4"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""4"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
  </tile>
  <tile x=""4"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""4"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""5"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""5"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""5"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""5"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""5"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""5"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
  </tile>
  <tile x=""5"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""5"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wArch"" reversed=""true"" />
    </level>
    <level value=""4"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""6"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""6"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""6"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""6"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""6"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <vWall id=""wArch"" reversed=""true"" />
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wWall"" reversed=""false"" />
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""6"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""6"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""7"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""7"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""7"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""7"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
  </tile>
  <tile x=""7"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""7"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wdDoor"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <vWall id=""wArch"" reversed=""false"" />
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""8"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""8"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""8"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""8"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""8"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wArch"" reversed=""false"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <vWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""8"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
  </tile>
  <tile x=""8"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""8"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wdDoor"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""9"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""9"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
      <hWall id=""wArch"" reversed=""false"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wWall"" reversed=""true"" />
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""9"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""9"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wArch"" reversed=""true"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
      <hWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""9"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""1"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""2"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""3"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""4"">
      <floor id=""wFloor"" orientation=""DOWN"" />
    </level>
    <level value=""5"">
      <roof id=""wRoof"" />
    </level>
  </tile>
  <tile x=""9"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""1"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""2"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""3"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
    <level value=""4"">
      <hWall id=""wWall"" reversed=""false"" />
    </level>
  </tile>
  <tile x=""9"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""9"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""10"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""10"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""10"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
    <level value=""0"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""1"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""2"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""3"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
    <level value=""4"">
      <vWall id=""wWall"" reversed=""true"" />
    </level>
  </tile>
  <tile x=""10"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""10"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""11"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""12"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""13"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""14"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""15"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""16"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""17"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""18"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""19"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""20"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""21"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""22"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""23"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""24"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""0"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""1"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""2"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""3"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""4"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""5"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""6"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""7"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""8"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""9"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""10"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""11"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""12"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""13"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""14"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""15"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""16"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""17"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""18"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""19"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""20"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""21"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""22"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""23"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""24"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
  <tile x=""25"" y=""25"" height=""0"" caveHeight=""0"" caveSize=""0"">
    <ground id=""gr"" />
    <cave id=""sw"" />
  </tile>
</map>"
Tsqdtdph,Untitled,ngnhtrg,Latex,Saturday 7th of June 2025 07:39:17 PM CDT,"\begin{frame}[fragile]{Vẽ tam giác}
\textcolor{blue}{\textbf{Asymptote code:}}
\begin{multicols}{2}
\begin{minted}[fontsize=\scriptsize]{asymptote}
size(5cm,0);
pair A = (0.8, 1.5);
pair B = (0, 0);
pair C = (2, 0);
pair D = (B + C)/2;
pair E = (2*A + C)/3;
pair F = (A + 3*B)/4;
pair M = (A+D)/2;
pair N = (2*B+E)/3;
pair P = (3*C+4*F)/7;
fill(M -- N -- P -- cycle, lightblue);
draw(A -- B -- C -- cycle);
draw(A -- D);
draw(B -- E);
draw(C -- F);
label(""$A$"", A, N);
label(""$B$"", B, W);
label(""$C$"", C, E);
label(""$D$"", D, S);
label(""$E$"", E, NE);
label(""$F$"", F, NW);
\end{minted}
 
\columnbreak
\begin{center}
\begin{asy}
size(5cm,0);
pair A = (0.8, 1.5);
pair B = (0, 0);
pair C = (2, 0);
pair D = (B + C)/2;
pair E = (2*A + C)/3;
pair F = (A + 3*B)/4;
fill((3*C+4*F)/7 -- (A+D)/2 -- (2*B+E)/3 -- cycle, lightblue);
draw(A -- B -- C -- cycle);
draw(A -- D);
draw(B -- E);
draw(C -- F);
label(""$A$"", A, N);
label(""$B$"", B, W);
label(""$C$"", C, E);
label(""$D$"", D, S);
label(""$E$"", E, NE);
label(""$F$"", F, NW);
\end{asy}
\end{center}
\end{multicols}
\end{frame}

\begin{frame}[fragile]{Vẽ tam giác}
\textcolor{blue}{\textbf{TikZ code:}}
\begin{multicols}{2}
\begin{minted}[fontsize=\scriptsize]{LaTeX}
\coordinate (A) at (0.8, 1.5);
\coordinate (B) at (0, 0);
\coordinate (C) at (2, 0);
\coordinate (D) at ($(B)!0.5!(C)$);
\coordinate (E) at ($(A)!1/3!(C)$);
\coordinate (F) at ($(A)!3/4!(B)$);
\fill[blue!20]
  ($(C)!3/7!(F)$) --
  ($(A)!0.5!(D)$) --
  ($(B)!2/3!(E)$) -- 
  cycle;
\draw (A) -- (B) -- (C) -- cycle;
\draw (A) -- (D);
\draw (B) -- (E);
\draw (C) -- (F);
\node[above] at (A) {$A$};
\node[below left] at (B) {$B$};
\node[below right] at (C) {$C$};
\node[below] at (D) {$D$};
\node[above right] at (E) {$E$};
\node[above left] at (F) {$F$};
\end{minted}

\columnbreak
 
\begin{center}
\begin{tikzpicture}[scale=2]
\coordinate (A) at (0.8, 1.5);
\coordinate (B) at (0, 0);
\coordinate (C) at (2, 0);
\coordinate (D) at ($(B)!0.5!(C)$);
\coordinate (E) at ($(A)!1/3!(C)$);
\coordinate (F) at ($(A)!3/4!(B)$);
\fill[blue!20] ($(C)!4/7!(F)$) -- ($(A)!0.5!(D)$) -- ($(B)!1/3!(E)$) -- cycle;
\draw (A) -- (B) -- (C) -- cycle;
\draw (A) -- (D);
\draw (B) -- (E);
\draw (C) -- (F);
\node[above] at (A) {$A$};
\node[below left] at (B) {$B$};
\node[below right] at (C) {$C$};
\node[below] at (D) {$D$};
\node[above right] at (E) {$E$};
\node[above left] at (F) {$F$};
\end{tikzpicture}   
\end{center}
\end{multicols}
\end{frame}

\begin{frame}[fragile]{Vẽ lưới}
\textcolor{blue}{\textbf{Asymptote code:}}
\begin{multicols}{2}
\begin{minted}[fontsize=\scriptsize]{asymptote}
size(5cm);
pair A = (2.5, 2.5);

fill(A--(5,4)--(4,4)--(4,5)--cycle, mediumgray);
fill(A--(1,5)--(1,4)--(0,4)--cycle, mediumgray);
fill(A--(0,1)--(1,1)--(1,0)--cycle, mediumgray);
fill(A--(4,0)--(4,1)--(5,1)--cycle, mediumgray);

for (int i = 0; i <= 5; ++i)
  draw((i, 0)--(i, 5));

for (int j = 0; j <= 5; ++j)
  draw((0, j)--(5, j));

draw((0, 1)--(5, 4));
draw((1, 0)--(4, 5));
draw((0, 4)--(5, 1));
draw((4, 0)--(1, 5));
\end{minted}
 
\columnbreak
\begin{center}
\begin{asy}
size(3.5cm);
pair A = (2.5, 2.5);

fill(A--(5,4)--(4,4)--(4,5)--cycle, mediumgray);
fill(A--(1,5)--(1,4)--(0,4)--cycle, mediumgray);
fill(A--(0,1)--(1,1)--(1,0)--cycle, mediumgray);
fill(A--(4,0)--(4,1)--(5,1)--cycle, mediumgray);

for (int i = 0; i <= 5; ++i)
  draw((i, 0)--(i, 5));

for (int j = 0; j <= 5; ++j)
  draw((0, j)--(5, j));

draw((0, 1)--(5, 4));
draw((1, 0)--(4, 5));
draw((0, 4)--(5, 1));
draw((4, 0)--(1, 5));
\end{asy}
\end{center}
\end{multicols}
\end{frame}

\begin{frame}[fragile]{Vẽ lưới}
\textcolor{blue}{\textbf{TikZ code:}}
\begin{multicols}{2}
\begin{minted}[fontsize=\scriptsize]{LaTeX}
\coordinate (A) at (2.5, 2.5);

\fill[gray!60] (A)--(5,4)--(4,4)--(4,5)--cycle;
\fill[gray!60] (A)--(1,5)--(1,4)--(0,4)--cycle;
\fill[gray!60] (A)--(0,1)--(1,1)--(1,0)--cycle;
\fill[gray!60] (A)--(4,0)--(4,1)--(5,1)--cycle;

\foreach \i in {0,...,5} {
  \draw (\i,0) -- (\i,5);
  \draw (0,\i) -- (5,\i);
}

\draw (0,1) -- (5,4);
\draw (1,0) -- (4,5);
\draw (0,4) -- (5,1);
\draw (4,0) -- (1,5);
\end{minted}

\columnbreak
 
\begin{center}
\begin{tikzpicture}[scale=0.8]
\coordinate (A) at (2.5, 2.5);

\fill[gray!60] (A)--(5,4)--(4,4)--(4,5)--cycle;
\fill[gray!60] (A)--(1,5)--(1,4)--(0,4)--cycle;
\fill[gray!60] (A)--(0,1)--(1,1)--(1,0)--cycle;
\fill[gray!60] (A)--(4,0)--(4,1)--(5,1)--cycle;

\foreach \i in {0,...,5} {
  \draw (\i,0) -- (\i,5);
  \draw (0,\i) -- (5,\i);
}

\draw (0,1) -- (5,4);
\draw (1,0) -- (4,5);
\draw (0,4) -- (5,1);
\draw (4,0) -- (1,5);
\end{tikzpicture}
\end{center}
\end{multicols}
\end{frame}"
DBDVUHnf,wordle_scores,sementry,C++,Saturday 7th of June 2025 07:31:05 PM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <cmath>
#include <algorithm>
#include <fstream>
#include <codecvt>


enum class LetterInfo {
    GREY,
    YELLOW,
    GREEN
};

LetterInfo get_letter_info(wchar_t letter, size_t pos, const std::wstring& ans) {
    auto it = std::find(ans.begin(), ans.end(), letter);
    if (it != ans.end()) {
        return ans[pos] == letter ? LetterInfo::GREEN : LetterInfo::YELLOW;
    } else {
        return LetterInfo::GREY;
    }
}

std::vector<std::pair<wchar_t, LetterInfo>> try_guess(const std::wstring& guess, const std::wstring& ans) {
    std::vector<std::pair<wchar_t, LetterInfo>> result;
    for (size_t i = 0; i < guess.size(); ++i) {
        result.emplace_back(guess[i], get_letter_info(guess[i], i, ans));
    }
    return result;
}

bool compatible(const std::wstring& noun, const std::vector<std::pair<wchar_t, LetterInfo>>& guess_info) {
    for (size_t i = 0; i < guess_info.size(); ++i) {
        wchar_t letter = guess_info[i].first;
        LetterInfo info = guess_info[i].second;

        bool in_noun = noun.find(letter) != std::wstring::npos;
        if ((info == LetterInfo::GREY) ^ (!in_noun)) {
            return false;
        }

        if (info != LetterInfo::GREY) {
            bool is_green = noun[i] == letter;
            if ((info == LetterInfo::GREEN) ^ is_green) {
                return false;
            }
        }
    }
    return true;
}

double score_fixed_guess(const std::vector<std::wstring>& nouns, const std::wstring& opener, const std::wstring& ans) {
    auto guess_info = try_guess(opener, ans);
    size_t total = nouns.size();
    size_t total_compatible = 0;

    for (const auto& noun : nouns) {
        if (compatible(noun, guess_info)) {
            ++total_compatible;
        }
    }

    return std::log2(static_cast<double>(total) / total_compatible);
}

double score(const std::vector<std::wstring>& nouns, const std::wstring& opener) {
    double total_score = 0.0;
    for (const auto& ans : nouns) {
        total_score += score_fixed_guess(nouns, opener, ans);
    }
    return total_score / nouns.size();
}

std::unordered_map<std::wstring, double> get_scores(const std::vector<std::wstring>& nouns) {
    std::unordered_map<std::wstring, double> scores;
    for (const auto& opener : nouns) {
        scores[opener] = score(nouns, opener);

        if (scores.size() % 100 == 0) { 
            std::wcerr << ""DBG: progress "" << scores.size() << ""/"" << nouns.size() << ""\n"";
        }
    }
    return scores;
}

std::vector<std::wstring> read_nouns(std::string path) {
    std::ifstream infile(path);

    if (!infile) {
        std::cerr << ""Error: Could not open file '"" << path << ""'\n"";
        return {};
    }

    std::vector<std::wstring> nouns;
    std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;
    std::string line;

    while (std::getline(infile, line)) {
        if (!line.empty()) {
            nouns.push_back(converter.from_bytes(line));
        }
    }

    infile.close();
    return nouns;
}

void write_scores(std::unordered_map<std::wstring, double> scores, std::string path) {
    std::vector<std::pair<std::wstring, double>> scores_vec;
    for (auto entry : scores) {
        scores_vec.push_back(entry);
    }
    sort(scores_vec.begin(), scores_vec.end(), [](auto& a, auto& b) {return a.second > b.second; });

    std::ofstream outfile(path);

    if (!outfile) {
        std::cerr << ""Error: Could not open file '"" << path << ""'\n"";
        return;
    }

    std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;

    for (const auto& entry : scores_vec) {
        outfile << entry.second << "" "" << converter.to_bytes(entry.first) << ""\n"";
    }

    outfile.close();
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << ""Usage: opener_scores <words> <output>\n"";
        return 0;
    }

    auto nouns = read_nouns(argv[1]);
    auto scores = get_scores(nouns);
    write_scores(scores, argv[2]);
}"
TykUkKrJ,2025-06-07_stats.json,rdp_snitch,JSON,Saturday 7th of June 2025 07:18:29 PM CDT,"{
  ""ip"": {
    ""167.172.131.118"": 8514,
    ""143.198.221.164"": 456,
    ""103.56.5.14"": 267,
    ""62.3.42.167"": 6,
    ""45.227.254.130"": 9,
    ""91.238.181.91"": 6,
    ""147.185.132.158"": 12,
    ""45.227.254.152"": 6,
    ""80.94.95.203"": 9,
    ""205.210.31.200"": 9,
    ""47.120.47.93"": 3,
    ""193.142.146.227"": 9,
    ""92.63.197.23"": 9,
    ""129.227.230.73"": 3,
    ""172.184.144.136"": 6,
    ""91.202.233.4"": 12,
    ""198.235.24.236"": 9,
    ""152.42.212.148"": 7077,
    ""104.236.244.191"": 9,
    ""165.232.170.129"": 41703,
    ""128.199.168.88"": 4998,
    ""198.235.24.233"": 9,
    ""88.214.25.121"": 6,
    ""91.238.181.94"": 6,
    ""167.99.236.65"": 15,
    ""147.185.132.61"": 9,
    ""47.236.157.151"": 3
  },
  ""asn"": {
    ""AS14061"": 62772,
    ""AS140599"": 267,
    ""AS61173"": 6,
    ""AS267784"": 15,
    ""AS49434"": 12,
    ""AS396982"": 48,
    ""AS204428"": 9,
    ""AS37963"": 3,
    ""AS213438"": 9,
    ""AS210848"": 9,
    ""AS21859"": 3,
    ""AS8075"": 6,
    ""AS200593"": 12,
    ""AS35042"": 6,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 62772,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Flyservers S.A."": 15,
    ""Datacenter location PAR1 France"": 12,
    ""Google LLC"": 48,
    ""SS-Net"": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""ColocaTel Inc."": 9,
    ""Telkom Internet LTD"": 9,
    ""Zenlayer Inc"": 3,
    ""Microsoft"": 6,
    ""Prospero OOO"": 12,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 62757,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Xwin Universal LTD"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""Palo Alto Networks, Inc"": 48,
    ""Unmanaged LTD"": 9,
    ""Alibaba.com LLC"": 6,
    ""ColocaTel Inc"": 9,
    ""Korotkij Denis Aleksandrovich"": 9,
    ""NetProtect LLC"": 3,
    ""Microsoft Azure Cloud (westus)"": 6,
    ""Prospero OOO"": 12,
    ""Digital Ocean"": 15
  },
  ""regionName"": {
    ""New Jersey"": 8538,
    ""South West"": 54234,
    ""Metro Manila"": 267,
    ""Razavi Khorasan"": 6,
    ""Vilnius"": 15,
    ""\u00cele-de-France"": 12,
    ""California"": 54,
    ""Budapest"": 9,
    ""Guangdong"": 3,
    ""North Holland"": 18,
    ""Bangkok"": 3,
    ""Ashgabat"": 12,
    ""Kowloon City"": 6,
    ""North West"": 3
  },
  ""country"": {
    ""United States"": 8592,
    ""Singapore"": 54237,
    ""Philippines"": 267,
    ""Iran"": 6,
    ""Lithuania"": 15,
    ""France"": 12,
    ""Hungary"": 9,
    ""China"": 3,
    ""The Netherlands"": 18,
    ""Thailand"": 3,
    ""Turkmenistan"": 12,
    ""Hong Kong"": 6
  },
  ""account"": {
    ""hello"": 63057,
    ""Domain"": 18,
    ""Test"": 27,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""Administr"": 30,
    ""dRMIARzYe"": 3,
    ""ZzDQaL"": 3,
    ""TYPoLW"": 3,
    ""PVSCsdRvF"": 3,
    ""wVhDlN"": 3,
    ""SoFYtc"": 3,
    ""dFAyiNgDf"": 3,
    ""NRWHgv"": 3,
    ""hxudXJ"": 3,
    ""HgZvDBanI"": 3,
    ""TGZddU"": 3,
    ""VKzioF"": 3
  },
  ""keyboard"": {
    ""Unknown"": 63180
  },
  ""client_build"": {
    ""Unknown"": 63180
  },
  ""client_name"": {
    ""Unknown"": 63180
  },
  ""ip_type"": {
    ""hosting"": 62850,
    ""Unknown"": 327,
    ""mobile & hosting & proxy"": 3
  }
}"
tejE7yDu,2025-06-07_stats.json,rdp_snitch,JSON,Saturday 7th of June 2025 07:16:11 PM CDT,"{
  ""ip"": {
    ""167.172.131.118"": 5676,
    ""143.198.221.164"": 304,
    ""103.56.5.14"": 178,
    ""62.3.42.167"": 4,
    ""45.227.254.130"": 6,
    ""91.238.181.91"": 4,
    ""147.185.132.158"": 8,
    ""45.227.254.152"": 4,
    ""80.94.95.203"": 6,
    ""205.210.31.200"": 6,
    ""47.120.47.93"": 2,
    ""193.142.146.227"": 6,
    ""92.63.197.23"": 6,
    ""129.227.230.73"": 2,
    ""172.184.144.136"": 4,
    ""91.202.233.4"": 8,
    ""198.235.24.236"": 6,
    ""152.42.212.148"": 4718,
    ""104.236.244.191"": 6,
    ""165.232.170.129"": 27802,
    ""128.199.168.88"": 3332,
    ""198.235.24.233"": 6,
    ""88.214.25.121"": 4,
    ""91.238.181.94"": 4,
    ""167.99.236.65"": 10,
    ""147.185.132.61"": 6,
    ""47.236.157.151"": 2
  },
  ""asn"": {
    ""AS14061"": 41848,
    ""AS140599"": 178,
    ""AS61173"": 4,
    ""AS267784"": 10,
    ""AS49434"": 8,
    ""AS396982"": 32,
    ""AS204428"": 6,
    ""AS37963"": 2,
    ""AS213438"": 6,
    ""AS210848"": 6,
    ""AS21859"": 2,
    ""AS8075"": 4,
    ""AS200593"": 8,
    ""AS35042"": 4,
    ""AS45102"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 41848,
    ""Comfac Corporation"": 178,
    ""Green Web Samaneh Novin PJSC"": 4,
    ""Flyservers S.A."": 10,
    ""Datacenter location PAR1 France"": 8,
    ""Google LLC"": 32,
    ""SS-Net"": 6,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 2,
    ""ColocaTel Inc."": 6,
    ""Telkom Internet LTD"": 6,
    ""Zenlayer Inc"": 2,
    ""Microsoft"": 4,
    ""Prospero OOO"": 8,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Alibaba (US) Technology Co., Ltd."": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 41838,
    ""Comfac Corporation"": 178,
    ""Green Web Samaneh Novin PJSC"": 4,
    ""Xwin Universal LTD"": 10,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Palo Alto Networks, Inc"": 32,
    ""Unmanaged LTD"": 6,
    ""Alibaba.com LLC"": 4,
    ""ColocaTel Inc"": 6,
    ""Korotkij Denis Aleksandrovich"": 6,
    ""NetProtect LLC"": 2,
    ""Microsoft Azure Cloud (westus)"": 4,
    ""Prospero OOO"": 8,
    ""Digital Ocean"": 10
  },
  ""regionName"": {
    ""New Jersey"": 5692,
    ""South West"": 36156,
    ""Metro Manila"": 178,
    ""Razavi Khorasan"": 4,
    ""Vilnius"": 10,
    ""\u00cele-de-France"": 8,
    ""California"": 36,
    ""Budapest"": 6,
    ""Guangdong"": 2,
    ""North Holland"": 12,
    ""Bangkok"": 2,
    ""Ashgabat"": 8,
    ""Kowloon City"": 4,
    ""North West"": 2
  },
  ""country"": {
    ""United States"": 5728,
    ""Singapore"": 36158,
    ""Philippines"": 178,
    ""Iran"": 4,
    ""Lithuania"": 10,
    ""France"": 8,
    ""Hungary"": 6,
    ""China"": 2,
    ""The Netherlands"": 12,
    ""Thailand"": 2,
    ""Turkmenistan"": 8,
    ""Hong Kong"": 4
  },
  ""account"": {
    ""hello"": 42038,
    ""Domain"": 12,
    ""Test"": 18,
    ""yhDxyQONx"": 4,
    ""nmap"": 2,
    ""naap"": 2,
    ""Administr"": 20,
    ""dRMIARzYe"": 2,
    ""ZzDQaL"": 2,
    ""TYPoLW"": 2,
    ""PVSCsdRvF"": 2,
    ""wVhDlN"": 2,
    ""SoFYtc"": 2,
    ""dFAyiNgDf"": 2,
    ""NRWHgv"": 2,
    ""hxudXJ"": 2,
    ""HgZvDBanI"": 2,
    ""TGZddU"": 2,
    ""VKzioF"": 2
  },
  ""keyboard"": {
    ""Unknown"": 42120
  },
  ""client_build"": {
    ""Unknown"": 42120
  },
  ""client_name"": {
    ""Unknown"": 42120
  },
  ""ip_type"": {
    ""hosting"": 41900,
    ""Unknown"": 218,
    ""mobile & hosting & proxy"": 2
  }
}"
QiyZp6PK,2025-06-07_stats.json,rdp_snitch,JSON,Saturday 7th of June 2025 07:15:12 PM CDT,"{
  ""ip"": {
    ""167.172.131.118"": 2838,
    ""143.198.221.164"": 152,
    ""103.56.5.14"": 89,
    ""62.3.42.167"": 2,
    ""45.227.254.130"": 3,
    ""91.238.181.91"": 2,
    ""147.185.132.158"": 4,
    ""45.227.254.152"": 2,
    ""80.94.95.203"": 3,
    ""205.210.31.200"": 3,
    ""47.120.47.93"": 1,
    ""193.142.146.227"": 3,
    ""92.63.197.23"": 3,
    ""129.227.230.73"": 1,
    ""172.184.144.136"": 2,
    ""91.202.233.4"": 4,
    ""198.235.24.236"": 3,
    ""152.42.212.148"": 2359,
    ""104.236.244.191"": 3,
    ""165.232.170.129"": 13901,
    ""128.199.168.88"": 1666,
    ""198.235.24.233"": 3,
    ""88.214.25.121"": 2,
    ""91.238.181.94"": 2,
    ""167.99.236.65"": 5,
    ""147.185.132.61"": 3,
    ""47.236.157.151"": 1
  },
  ""asn"": {
    ""AS14061"": 20924,
    ""AS140599"": 89,
    ""AS61173"": 2,
    ""AS267784"": 5,
    ""AS49434"": 4,
    ""AS396982"": 16,
    ""AS204428"": 3,
    ""AS37963"": 1,
    ""AS213438"": 3,
    ""AS210848"": 3,
    ""AS21859"": 1,
    ""AS8075"": 2,
    ""AS200593"": 4,
    ""AS35042"": 2,
    ""AS45102"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 20924,
    ""Comfac Corporation"": 89,
    ""Green Web Samaneh Novin PJSC"": 2,
    ""Flyservers S.A."": 5,
    ""Datacenter location PAR1 France"": 4,
    ""Google LLC"": 16,
    ""SS-Net"": 3,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 1,
    ""ColocaTel Inc."": 3,
    ""Telkom Internet LTD"": 3,
    ""Zenlayer Inc"": 1,
    ""Microsoft"": 2,
    ""Prospero OOO"": 4,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Alibaba (US) Technology Co., Ltd."": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 20919,
    ""Comfac Corporation"": 89,
    ""Green Web Samaneh Novin PJSC"": 2,
    ""Xwin Universal LTD"": 5,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Palo Alto Networks, Inc"": 16,
    ""Unmanaged LTD"": 3,
    ""Alibaba.com LLC"": 2,
    ""ColocaTel Inc"": 3,
    ""Korotkij Denis Aleksandrovich"": 3,
    ""NetProtect LLC"": 1,
    ""Microsoft Azure Cloud (westus)"": 2,
    ""Prospero OOO"": 4,
    ""Digital Ocean"": 5
  },
  ""regionName"": {
    ""New Jersey"": 2846,
    ""South West"": 18078,
    ""Metro Manila"": 89,
    ""Razavi Khorasan"": 2,
    ""Vilnius"": 5,
    ""\u00cele-de-France"": 4,
    ""California"": 18,
    ""Budapest"": 3,
    ""Guangdong"": 1,
    ""North Holland"": 6,
    ""Bangkok"": 1,
    ""Ashgabat"": 4,
    ""Kowloon City"": 2,
    ""North West"": 1
  },
  ""country"": {
    ""United States"": 2864,
    ""Singapore"": 18079,
    ""Philippines"": 89,
    ""Iran"": 2,
    ""Lithuania"": 5,
    ""France"": 4,
    ""Hungary"": 3,
    ""China"": 1,
    ""The Netherlands"": 6,
    ""Thailand"": 1,
    ""Turkmenistan"": 4,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""hello"": 21019,
    ""Domain"": 6,
    ""Test"": 9,
    ""yhDxyQONx"": 2,
    ""nmap"": 1,
    ""naap"": 1,
    ""Administr"": 10,
    ""dRMIARzYe"": 1,
    ""ZzDQaL"": 1,
    ""TYPoLW"": 1,
    ""PVSCsdRvF"": 1,
    ""wVhDlN"": 1,
    ""SoFYtc"": 1,
    ""dFAyiNgDf"": 1,
    ""NRWHgv"": 1,
    ""hxudXJ"": 1,
    ""HgZvDBanI"": 1,
    ""TGZddU"": 1,
    ""VKzioF"": 1
  },
  ""keyboard"": {
    ""Unknown"": 21060
  },
  ""client_build"": {
    ""Unknown"": 21060
  },
  ""client_name"": {
    ""Unknown"": 21060
  },
  ""ip_type"": {
    ""hosting"": 20950,
    ""Unknown"": 109,
    ""mobile & hosting & proxy"": 1
  }
}"
XEFdaVwN,install p7zip,jcofer555,Bash,Saturday 7th of June 2025 06:28:24 PM CDT,"#!/bin/bash

# Ensure extra folder on flash drive exists
echo ""Checking if extra exists on the flash drive""
if [ -d ""/boot/extra"" ]; then
    echo ""Extra folder already exists on the flash drive""
else
    echo ""Extra folder does not exist, Attempting to create it on the flash drive""
    if mkdir -p ""/boot/extra""; then
        echo ""Successfully created the extra folder on the flash drive""
    else
        echo ""Failed to create the extra folder on the flash drive""
        exit 1
    fi
fi

# Function to download a package if it doesn't already exist
download_package() {
    local pkg_name=$1
    local pkg_url=$2
    local pkg_path=""/boot/extra/$pkg_name""

    if [ -f ""$pkg_path"" ]; then
        echo ""Package $pkg_name already exists in /boot/extra/, skipping download""
    else
        echo ""Downloading $pkg_name""
        if wget -q -O ""$pkg_path"" ""$pkg_url""; then
            echo ""Successfully downloaded $pkg_name to the flash drive extra folder""
        else
            echo ""Failed to download $pkg_name from $pkg_url""
            return 1
        fi
    fi
}

# Function to install a package after verifying it exists and format is correct
install_package() {
    local pkg_name=$1
    local pkg_url=$2
    local pkg_path=""/boot/extra/$pkg_name""
    local check_cmd=$3

    # Ensure the package exists before checking installation status
    if [ -f ""$pkg_path"" ]; then
        echo ""Package $pkg_name already exists in /boot/extra""
    else
        echo ""Package $pkg_name not found in /boot/extra/, attempting to download""
        if ! download_package ""$pkg_name"" ""$pkg_url""; then
            echo ""Failed to retrieve $pkg_name, aborting installation""
            return 1
        fi
    fi

    # Check if the file is empty. If empty delete and redownload
    if [ ! -s ""$pkg_path"" ]; then
        echo ""Error: $pkg_name exists but is empty. Deleting and redownloading""
        rm -f ""$pkg_path""
        if ! download_package ""$pkg_name"" ""$pkg_url""; then
            echo ""Failed to re-download $pkg_name, aborting installation""
            return 1
        fi
    else
        echo ""Package $pkg_name is valid""
    fi

    # Verify the package format. If incorrect format delete and redownload
    if file ""$pkg_path"" | grep -q 'XZ compressed data\|gzip compressed data'; then
        echo ""Package $pkg_name format is correct""
    else
        echo ""Error: $pkg_name does not appear to be a valid Slackware package. Deleting and redownloading""
        rm -f ""$pkg_path""
        if ! download_package ""$pkg_name"" ""$pkg_url""; then
            echo ""Failed to re-download $pkg_name, aborting installation""
            return 1
        fi
    fi

    # Check if package is already installed before proceeding
    if eval ""$check_cmd""; then
        echo ""$pkg_name is already installed, skipping installation""
        return 0
    fi

    # Attempt installation
    echo ""Installing $pkg_name""
    if installpkg ""$pkg_path"" >/dev/null 2>&1; then
        echo ""$pkg_name has been successfully installed""
    else
        echo ""Failed to install $pkg_name""
        return 1
    fi
}

# Define package variables
pkg_name=""p7zip-17.05-x86_64-3cf.txz""
pkg_url=""https://github.com/jcofer555/unraid_packages/raw/refs/heads/main/$pkg_name""
pkg_path=""/boot/extra/$pkg_name""
pkg_check=""command -v 7z >/dev/null 2>&1""

# Install p7zip if missing
install_package ""$pkg_name"" ""$pkg_url"" ""$pkg_check"""
ywsZmFLH,install jdupes,jcofer555,Bash,Saturday 7th of June 2025 06:27:28 PM CDT,"#!/bin/bash

# Ensure extra folder on flash drive exists
echo ""Checking if extra exists on the flash drive""
if [ -d ""/boot/extra"" ]; then
    echo ""Extra folder already exists on the flash drive""
else
    echo ""Extra folder does not exist, Attempting to create it on the flash drive""
    if mkdir -p ""/boot/extra""; then
        echo ""Successfully created the extra folder on the flash drive""
    else
        echo ""Failed to create the extra folder on the flash drive""
        exit 1
    fi
fi

# Function to download a package if it doesn't already exist
download_package() {
    local pkg_name=$1
    local pkg_url=$2
    local pkg_path=""/boot/extra/$pkg_name""

    if [ -f ""$pkg_path"" ]; then
        echo ""Package $pkg_name already exists in /boot/extra/, skipping download""
    else
        echo ""Downloading $pkg_name""
        if wget -q -O ""$pkg_path"" ""$pkg_url""; then
            echo ""Successfully downloaded $pkg_name to the flash drive extra folder""
        else
            echo ""Failed to download $pkg_name from $pkg_url""
            return 1
        fi
    fi
}

# Function to install a package after verifying it exists and format is correct
install_package() {
    local pkg_name=$1
    local pkg_url=$2
    local pkg_path=""/boot/extra/$pkg_name""
    local check_cmd=$3

    # Ensure the package exists before checking installation status
    if [ -f ""$pkg_path"" ]; then
        echo ""Package $pkg_name already exists in /boot/extra""
    else
        echo ""Package $pkg_name not found in /boot/extra/, attempting to download""
        if ! download_package ""$pkg_name"" ""$pkg_url""; then
            echo ""Failed to retrieve $pkg_name, aborting installation""
            return 1
        fi
    fi

    # Check if the file is empty. If empty delete it and redownload
    if [ ! -s ""$pkg_path"" ]; then
        echo ""Error: $pkg_name exists but is empty. Deleting and redownloading""
        rm -f ""$pkg_path""
        if ! download_package ""$pkg_name"" ""$pkg_url""; then
            echo ""Failed to re-download $pkg_name, aborting installation""
            return 1
        fi
    else
        echo ""Package $pkg_name is valid""
    fi

    # Verify the package format. If incorrect delete it and redownload
    if file ""$pkg_path"" | grep -q 'XZ compressed data\|gzip compressed data'; then
        echo ""Package $pkg_name format is correct.""
    else
        echo ""Error: $pkg_name does not appear to be a valid Slackware package. Deleting and redownloading""
        rm -f ""$pkg_path""
        if ! download_package ""$pkg_name"" ""$pkg_url""; then
            echo ""Failed to re-download $pkg_name, aborting installation""
            return 1
        fi
    fi

    # Check if package is already installed before proceeding
    if eval ""$check_cmd""; then
        echo ""$pkg_name is already installed, skipping installation""
        return 0
    fi

    # Attempt installation
    echo ""Installing $pkg_name...""
    if installpkg ""$pkg_path"" >/dev/null 2>&1; then
        echo ""$pkg_name has been successfully installed""
    else
        echo ""Failed to install $pkg_name""
        return 1
    fi
}

# Define package variables
libjody_pkg=""libjodycode-3.1.1-x86_64-2_SBo.tgz""
libjody_url=""https://github.com/jcofer555/unraid_packages/raw/refs/heads/main/libjodycode-3.1.1-x86_64-2_SBo.tgz""
libjody_check=""ldconfig -p | grep -q libjodycode.so.3""

jdupes_pkg=""jdupes-1.28.0-x86_64-2_SBo.tgz""
jdupes_url=""https://github.com/jcofer555/unraid_packages/raw/refs/heads/main/jdupes-1.28.0-x86_64-2_SBo.tgz""
jdupes_check=""which jdupes >/dev/null 2>&1""

# Install libjodycode if missing
install_package ""$libjody_pkg"" ""$libjody_url"" ""$libjody_check""

# Install jdupes if missing
install_package ""$jdupes_pkg"" ""$jdupes_url"" ""$jdupes_check"""
tRefnh1A,LeetCode 46. Permutations,AmbushedRaccoon,C++,Saturday 7th of June 2025 05:59:31 PM CDT,"class Solution46 {
public:
    std::vector<std::vector<int>> permute(std::vector<int> nums)
    {
        std::vector<std::vector<int>> result;
        
        std::sort(nums.begin(), nums.end());
        int swapIndex;
        do
        {
            swapIndex = -1;
            result.push_back(nums);
            for (int i = nums.size() - 2; i >= 0; --i)
            {
                if (nums[i] < nums[i + 1])
                {
                    swapIndex = i;
                    break;
                }
            }
            if (swapIndex != -1)
            {
                for (int i = nums.size() - 1; i >= 0; --i)
                {
                    if (nums[i] > nums[swapIndex])
                    {
                        std::swap(nums[i], nums[swapIndex]);
                        break;
                    }
                }
                std::reverse(nums.begin() + swapIndex + 1, nums.end());
            }
        } while (swapIndex != -1);
        return result;
    }
};"
yw2bPSUA,solar_remote_monitor,DanFrmSpace,Lua,Saturday 7th of June 2025 05:48:10 PM CDT,"-- Remote Energy Farm Monitor Script
-- Receives wireless data and displays on monitor

local WIRELESS_CHANNEL = 100
local MONITOR_SIDE = ""top"" -- Change this to match your monitor position
local REFRESH_TIMEOUT = 30 -- seconds before showing ""no data"" warning

-- Initialize peripherals
local wirelessModem = peripheral.find(""modem"", function(name, modem)
    return modem.isWireless()
end)

if not wirelessModem then
    error(""No wireless modem found"")
end

print(""Found wireless modem: "" .. peripheral.getName(wirelessModem))

local monitor = peripheral.wrap(MONITOR_SIDE)
if not monitor then
    error(""No monitor found on "" .. MONITOR_SIDE)
end

-- Open wireless channel
wirelessModem.open(WIRELESS_CHANNEL)
print(""Opened wireless channel "" .. WIRELESS_CHANNEL)

-- Monitor setup
monitor.setTextScale(0.5)
local monitorWidth, monitorHeight = monitor.getSize()

-- Color definitions
local colorScheme = {
    background = colors.black,
    header = colors.yellow,
    good = colors.green,
    warning = colors.orange,
    critical = colors.red,
    info = colors.white,
    accent = colors.cyan
}

-- Data storage
local lastData = nil
local lastUpdateTime = 0

-- Function to format energy values
local function formatEnergy(energy)
    if energy >= 1000000000 then
        return string.format(""%.2fGFE"", energy / 1000000000)
    elseif energy >= 1000000 then
        return string.format(""%.2fMFE"", energy / 1000000)
    elseif energy >= 1000 then
        return string.format(""%.2fkFE"", energy / 1000)
    else
        return string.format(""%.0fFE"", energy)
    end
end

-- Function to get color based on percentage
local function getPercentageColor(percentage)
    if percentage >= 80 then
        return colorScheme.good
    elseif percentage >= 50 then
        return colorScheme.warning
    else
        return colorScheme.critical
    end
end

-- Function to draw a progress bar
local function drawProgressBar(x, y, width, percentage, label)
    local fillWidth = math.floor((percentage / 100) * width)
    
    monitor.setCursorPos(x, y)
    monitor.setTextColor(colorScheme.info)
    monitor.write(label .. "":"")
    
    monitor.setCursorPos(x, y + 1)
    monitor.setBackgroundColor(colors.gray)
    monitor.write(string.rep("" "", width))
    
    monitor.setCursorPos(x, y + 1)
    monitor.setBackgroundColor(getPercentageColor(percentage))
    monitor.write(string.rep("" "", fillWidth))
    
    monitor.setCursorPos(x + width + 1, y + 1)
    monitor.setBackgroundColor(colorScheme.background)
    monitor.setTextColor(colorScheme.info)
    monitor.write(string.format("" %.1f%%"", percentage))
end

-- Function to draw header
local function drawHeader()
    monitor.setBackgroundColor(colorScheme.background)
    monitor.clear()
    
    monitor.setCursorPos(1, 1)
    monitor.setTextColor(colorScheme.header)
    monitor.setBackgroundColor(colorScheme.background)
    
    local title = ""ENERGY FARM MONITORING SYSTEM""
    local centerX = math.floor((monitorWidth - string.len(title)) / 2) + 1
    monitor.setCursorPos(centerX, 1)
    monitor.write(title)
    
    monitor.setCursorPos(1, 2)
    monitor.setTextColor(colorScheme.accent)
    monitor.write(string.rep(""="", monitorWidth))
end

-- Function to draw connection status
local function drawConnectionStatus()
    local currentTime = os.epoch(""utc"") / 1000
    local timeSinceUpdate = currentTime - lastUpdateTime
    
    monitor.setCursorPos(1, 3)
    monitor.setTextColor(colorScheme.info)
    monitor.write(""Status: "")
    
    if timeSinceUpdate > REFRESH_TIMEOUT then
        monitor.setTextColor(colorScheme.critical)
        monitor.write(""NO DATA - Connection Lost"")
    elseif timeSinceUpdate > 10 then
        monitor.setTextColor(colorScheme.warning)
        monitor.write(""Delayed - "" .. math.floor(timeSinceUpdate) .. ""s ago"")
    else
        monitor.setTextColor(colorScheme.good)
        monitor.write(""Connected - Live Data"")
    end
    
    monitor.setCursorPos(monitorWidth - 19, 3)
    monitor.setTextColor(colorScheme.info)
    monitor.write(""Time: "" .. textutils.formatTime(os.time(), true))
end

-- Function to draw solar panel section
local function drawSolarSection(stats, startY)
    monitor.setCursorPos(1, startY)
    monitor.setTextColor(colorScheme.header)
    monitor.write(""SOLAR PANELS"")
    
    local y = startY + 1
    monitor.setCursorPos(1, y)
    monitor.setTextColor(colorScheme.info)
    monitor.write(""Energy: "" .. formatEnergy(stats.solar.totalEnergy) .. "" / "" .. formatEnergy(stats.solar.totalMaxEnergy))
    
    y = y + 1
    monitor.setCursorPos(1, y)
    monitor.write(""Production: "" .. formatEnergy(stats.solar.totalProductionRate) .. ""/t"")
    
    y = y + 1
    monitor.setCursorPos(1, y)
    monitor.setTextColor(stats.solar.panelsSeeSun == stats.solar.totalPanels and colorScheme.good or colorScheme.warning)
    monitor.write(""Sun Visibility: "" .. stats.solar.panelsSeeSun .. ""/"" .. stats.solar.totalPanels .. "" panels"")
    
    y = y + 2
    drawProgressBar(1, y, 30, stats.solar.averagePercentage, ""Solar Fill Level"")
    
    return y + 3
end

-- Function to draw energy cube section
local function drawCubeSection(stats, startY)
    monitor.setCursorPos(1, startY)
    monitor.setTextColor(colorScheme.header)
    monitor.write(""ENERGY STORAGE"")
    
    local y = startY + 1
    monitor.setCursorPos(1, y)
    monitor.setTextColor(colorScheme.info)
    monitor.write(""Energy: "" .. formatEnergy(stats.cubes.totalEnergy) .. "" / "" .. formatEnergy(stats.cubes.totalMaxEnergy))
    
    y = y + 1
    monitor.setCursorPos(1, y)
    monitor.setTextColor(stats.cubes.ejectingCubes > 0 and colorScheme.good or colorScheme.warning)
    monitor.write(""Ejecting: "" .. stats.cubes.ejectingCubes .. ""/"" .. stats.cubes.totalCubes .. "" cubes"")
    
    y = y + 2
    drawProgressBar(1, y, 30, stats.cubes.averagePercentage, ""Storage Fill Level"")
    
    return y + 3
end

-- Function to draw system overview
local function drawSystemOverview(stats, startY)
    monitor.setCursorPos(1, startY)
    monitor.setTextColor(colorScheme.header)
    monitor.write(""SYSTEM OVERVIEW"")
    
    local y = startY + 1
    monitor.setCursorPos(1, y)
    monitor.setTextColor(colorScheme.info)
    monitor.write(""Total Energy: "" .. formatEnergy(stats.system.totalSystemEnergy))
    
    y = y + 1
    monitor.setCursorPos(1, y)
    monitor.write(""Total Capacity: "" .. formatEnergy(stats.system.totalSystemCapacity))
    
    y = y + 2
    drawProgressBar(1, y, 40, stats.system.systemPercentage, ""System Fill Level"")
    
    return y + 3
end

-- Function to draw individual device details
local function drawDeviceDetails(data, startY)
    if startY >= monitorHeight - 2 then
        return startY
    end
    
    monitor.setCursorPos(1, startY)
    monitor.setTextColor(colorScheme.header)
    monitor.write(""DEVICE STATUS"")
    
    local y = startY + 1
    local col1 = 1
    local col2 = math.floor(monitorWidth / 2) + 1
    
    -- Solar panels column
    monitor.setCursorPos(col1, y)
    monitor.setTextColor(colorScheme.accent)
    monitor.write(""Solar Panels:"")
    y = y + 1
    
    local solarCount = 0
    for name, panelData in pairs(data.solar) do
        if y >= monitorHeight then break end
        solarCount = solarCount + 1
        if solarCount <= 5 then -- Show first 5 panels
            monitor.setCursorPos(col1, y)
            monitor.setTextColor(panelData.canSeeSun and colorScheme.good or colorScheme.warning)
            local shortName = string.gsub(name, ""advancedSolarGenerator_"", ""S"")
            monitor.write(shortName .. "": "" .. string.format(""%.0f%%"", panelData.energyPercentage))
            y = y + 1
        end
    end
    
    -- Energy cubes column
    y = startY + 1
    monitor.setCursorPos(col2, y)
    monitor.setTextColor(colorScheme.accent)
    monitor.write(""Energy Cubes:"")
    y = y + 1
    
    local cubeCount = 0
    for name, cubeData in pairs(data.cubes) do
        if y >= monitorHeight then break end
        cubeCount = cubeCount + 1
        if cubeCount <= 5 then -- Show first 5 cubes
            monitor.setCursorPos(col2, y)
            monitor.setTextColor(cubeData.isEjecting and colorScheme.good or colorScheme.info)
            local shortName = string.gsub(name, ""advancedEnergyCube_"", ""C"")
            monitor.write(shortName .. "": "" .. string.format(""%.0f%%"", cubeData.energyPercentage))
            y = y + 1
        end
    end
    
    return math.max(startY + 7, y)
end

-- Function to update display
local function updateDisplay()
    if not lastData then
        drawHeader()
        drawConnectionStatus()
        monitor.setCursorPos(1, 5)
        monitor.setTextColor(colorScheme.warning)
        monitor.write(""Waiting for data from energy farm..."")
        return
    end
    
    drawHeader()
    drawConnectionStatus()
    
    local y = 5
    y = drawSolarSection(lastData.stats, y)
    y = drawCubeSection(lastData.stats, y)
    y = drawSystemOverview(lastData.stats, y)
    
    if y < monitorHeight - 5 then
        drawDeviceDetails(lastData, y)
    end
end

-- Function to handle incoming messages
local function handleMessage(message)
    print(""Received message: "" .. textutils.serialize(message))
    if type(message) == ""table"" and message.data and message.source == ""computer_1"" then
        lastData = message.data
        lastUpdateTime = os.epoch(""utc"") / 1000
        updateDisplay()
        print(""Data updated successfully"")
    else
        print(""Message format invalid or wrong source"")
    end
end

-- Main program loop
local function main()
    print(""Starting Remote Energy Monitor..."")
    print(""Listening on channel: "" .. WIRELESS_CHANNEL)
    print(""Monitor size: "" .. monitorWidth .. ""x"" .. monitorHeight)
    
    -- Initial display
    updateDisplay()
    
    while true do
        local event, side, channel, replyChannel, message, distance = os.pullEvent()
        
        if event == ""modem_message"" then
            print(""Modem message received on channel "" .. channel .. "" (listening on "" .. WIRELESS_CHANNEL .. "")"")
            if channel == WIRELESS_CHANNEL then
                handleMessage(message)
            end
        elseif event == ""timer"" then
            -- Periodic update to refresh connection status
            updateDisplay()
        end
        
        -- Set a timer for periodic updates
        os.startTimer(5)
    end
end

-- Error handling wrapper
local function runWithErrorHandling()
    local success, error = pcall(main)
    if not success then
        monitor.setBackgroundColor(colors.black)
        monitor.clear()
        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.red)
        monitor.write(""ERROR: "" .. tostring(error))
        print(""Error occurred: "" .. tostring(error))
        print(""Restarting in 5 seconds..."")
        sleep(5)
        runWithErrorHandling()
    end
end

-- Start the program
runWithErrorHandling() "
8Z9qR3e1,energy_farm_monitor,DanFrmSpace,Lua,Saturday 7th of June 2025 05:46:23 PM CDT,"-- Energy Farm Data Collection Script
-- Collects data from solar panels and energy cubes, transmits to remote monitor

local WIRELESS_CHANNEL = 100
local UPDATE_INTERVAL = 5 -- seconds
local COMPUTER_ID = ""computer_1""

-- Initialize wireless modem
local wirelessModem = peripheral.wrap(""left"")
if not wirelessModem then
    error(""No wireless modem found on left of computer"")
end
wirelessModem.open(WIRELESS_CHANNEL)

-- Function to safely get peripheral data
local function safeGetData(peripheral, method, default)
    local success, result = pcall(function()
        return peripheral[method]()
    end)
    return success and result or default
end

-- Function to collect solar panel data
local function collectSolarData()
    local solarData = {}
    
    for i = 0, 9 do
        local panelName = ""advancedSolarGenerator_"" .. i
        local panel = peripheral.wrap(panelName)
        
        if panel then
            solarData[panelName] = {
                energy = safeGetData(panel, ""getEnergy"", 0),
                maxEnergy = safeGetData(panel, ""getMaxEnergy"", 0),
                energyPercentage = safeGetData(panel, ""getEnergyFilledPercentage"", 0),
                productionRate = safeGetData(panel, ""getProductionRate"", 0),
                maxOutput = safeGetData(panel, ""getMaxOutput"", 0),
                canSeeSun = safeGetData(panel, ""canSeeSun"", false),
                energyNeeded = safeGetData(panel, ""getEnergyNeeded"", 0),
                comparatorLevel = safeGetData(panel, ""getComparatorLevel"", 0)
            }
        else
            print(""Warning: Solar panel "" .. panelName .. "" not found"")
        end
    end
    
    return solarData
end

-- Function to collect energy cube data
local function collectEnergyCubeData()
    local cubeData = {}
    
    for i = 0, 5 do
        local cubeName = ""advancedEnergyCube_"" .. i
        local cube = peripheral.wrap(cubeName)
        
        if cube then
            cubeData[cubeName] = {
                energy = safeGetData(cube, ""getEnergy"", 0),
                maxEnergy = safeGetData(cube, ""getMaxEnergy"", 0),
                energyPercentage = safeGetData(cube, ""getEnergyFilledPercentage"", 0),
                isEjecting = safeGetData(cube, ""isEjecting"", false),
                mode = safeGetData(cube, ""getMode"", ""Unknown""),
                inputColor = safeGetData(cube, ""getInputColor"", ""None""),
                outputColor = safeGetData(cube, ""getOutputColor"", ""None""),
                comparatorLevel = safeGetData(cube, ""getComparatorLevel"", 0),
                canEject = safeGetData(cube, ""canEject"", false),
                hasStrictInput = safeGetData(cube, ""hasStrictInput"", false)
            }
        else
            print(""Warning: Energy cube "" .. cubeName .. "" not found"")
        end
    end
    
    return cubeData
end

-- Function to calculate totals and statistics
local function calculateStats(solarData, cubeData)
    local stats = {
        solar = {
            totalEnergy = 0,
            totalMaxEnergy = 0,
            totalProductionRate = 0,
            averagePercentage = 0,
            panelsSeeSun = 0,
            totalPanels = 0
        },
        cubes = {
            totalEnergy = 0,
            totalMaxEnergy = 0,
            averagePercentage = 0,
            ejectingCubes = 0,
            totalCubes = 0
        },
        system = {
            totalSystemEnergy = 0,
            totalSystemCapacity = 0,
            systemPercentage = 0
        }
    }
    
    -- Calculate solar stats
    for name, data in pairs(solarData) do
        stats.solar.totalEnergy = stats.solar.totalEnergy + data.energy
        stats.solar.totalMaxEnergy = stats.solar.totalMaxEnergy + data.maxEnergy
        stats.solar.totalProductionRate = stats.solar.totalProductionRate + data.productionRate
        stats.solar.averagePercentage = stats.solar.averagePercentage + data.energyPercentage
        if data.canSeeSun then
            stats.solar.panelsSeeSun = stats.solar.panelsSeeSun + 1
        end
        stats.solar.totalPanels = stats.solar.totalPanels + 1
    end
    
    if stats.solar.totalPanels > 0 then
        stats.solar.averagePercentage = stats.solar.averagePercentage / stats.solar.totalPanels
    end
    
    -- Calculate cube stats
    for name, data in pairs(cubeData) do
        stats.cubes.totalEnergy = stats.cubes.totalEnergy + data.energy
        stats.cubes.totalMaxEnergy = stats.cubes.totalMaxEnergy + data.maxEnergy
        stats.cubes.averagePercentage = stats.cubes.averagePercentage + data.energyPercentage
        if data.isEjecting then
            stats.cubes.ejectingCubes = stats.cubes.ejectingCubes + 1
        end
        stats.cubes.totalCubes = stats.cubes.totalCubes + 1
    end
    
    if stats.cubes.totalCubes > 0 then
        stats.cubes.averagePercentage = stats.cubes.averagePercentage / stats.cubes.totalCubes
    end
    
    -- Calculate system totals
    stats.system.totalSystemEnergy = stats.solar.totalEnergy + stats.cubes.totalEnergy
    stats.system.totalSystemCapacity = stats.solar.totalMaxEnergy + stats.cubes.totalMaxEnergy
    if stats.system.totalSystemCapacity > 0 then
        stats.system.systemPercentage = (stats.system.totalSystemEnergy / stats.system.totalSystemCapacity) * 100
    end
    
    return stats
end

-- Function to format energy values for display
local function formatEnergy(energy)
    if energy >= 1000000000 then
        return string.format(""%.2fGFE"", energy / 1000000000)
    elseif energy >= 1000000 then
        return string.format(""%.2fMFE"", energy / 1000000)
    elseif energy >= 1000 then
        return string.format(""%.2fkFE"", energy / 1000)
    else
        return string.format(""%.0fFE"", energy)
    end
end

-- Function to transmit data
local function transmitData(data)
    local message = {
        timestamp = os.epoch(""utc""),
        source = COMPUTER_ID,
        data = data
    }
    
    wirelessModem.transmit(WIRELESS_CHANNEL, WIRELESS_CHANNEL, message)
    print(""Data transmitted on channel "" .. WIRELESS_CHANNEL)
end

-- Function to display local status
local function displayLocalStatus(stats)
    term.clear()
    term.setCursorPos(1, 1)
    
    print(""=== ENERGY FARM MONITOR ==="")
    print(""Time: "" .. textutils.formatTime(os.time(), true))
    print("""")
    
    print(""SOLAR PANELS:"")
    print(""  Total Energy: "" .. formatEnergy(stats.solar.totalEnergy))
    print(""  Capacity: "" .. formatEnergy(stats.solar.totalMaxEnergy))
    print(""  Production: "" .. formatEnergy(stats.solar.totalProductionRate) .. ""/t"")
    print(""  Average Fill: "" .. string.format(""%.1f%%"", stats.solar.averagePercentage))
    print(""  Sun Visible: "" .. stats.solar.panelsSeeSun .. ""/"" .. stats.solar.totalPanels)
    print("""")
    
    print(""ENERGY CUBES:"")
    print(""  Total Energy: "" .. formatEnergy(stats.cubes.totalEnergy))
    print(""  Capacity: "" .. formatEnergy(stats.cubes.totalMaxEnergy))
    print(""  Average Fill: "" .. string.format(""%.1f%%"", stats.cubes.averagePercentage))
    print(""  Ejecting: "" .. stats.cubes.ejectingCubes .. ""/"" .. stats.cubes.totalCubes)
    print("""")
    
    print(""SYSTEM TOTAL:"")
    print(""  Energy: "" .. formatEnergy(stats.system.totalSystemEnergy))
    print(""  Capacity: "" .. formatEnergy(stats.system.totalSystemCapacity))
    print(""  Fill Level: "" .. string.format(""%.1f%%"", stats.system.systemPercentage))
    print("""")
    
    print(""Next update in "" .. UPDATE_INTERVAL .. "" seconds..."")
end

-- Main monitoring loop
local function main()
    print(""Starting Energy Farm Monitor..."")
    print(""Wireless channel: "" .. WIRELESS_CHANNEL)
    print(""Update interval: "" .. UPDATE_INTERVAL .. "" seconds"")
    print("""")
    
    while true do
        local solarData = collectSolarData()
        local cubeData = collectEnergyCubeData()
        local stats = calculateStats(solarData, cubeData)
        
        local fullData = {
            solar = solarData,
            cubes = cubeData,
            stats = stats
        }
        
        transmitData(fullData)
        displayLocalStatus(stats)
        
        sleep(UPDATE_INTERVAL)
    end
end

-- Error handling wrapper
local function runWithErrorHandling()
    local success, error = pcall(main)
    if not success then
        print(""Error occurred: "" .. tostring(error))
        print(""Restarting in 5 seconds..."")
        sleep(5)
        runWithErrorHandling()
    end
end

-- Start the program
runWithErrorHandling() "
yqV7nmRF,Calculador de IMC,Claudio51,HTML,Saturday 7th of June 2025 05:15:57 PM CDT,"
<!DOCTYPE html><!-- by claudioadventista@hotmail.com -->
<html lang=""pt-br"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Calculadora de IMC</title>
    <style>
        body{
            background-color:#e3e4e0;
        }
        .tab{
            font-family: 'Trebuchet MS', sans-serif;
            background-color:#fff;
            width: 300px;
            margin: 5px auto;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 5px 20px 15px 20px;
        }
        #tabela{
            display:none;
        }
        #tabCredito{
            display:none;
        }
        #historico{
            display: none;
        }
        #tabHistorico{
            width:86%;
            height:219px;
            background-color:#eee7be;
            border:1px solid #ccc;
            padding:20px;
            overflow: auto;
            margin-bottom: 4px;
            font-size: 0.8em;
        }
        label{
            display: block;
            margin-bottom: 10px;
            text-align: center;
        }
        input[type=""text""]{
            width: 84%;
            height: 25px;
            margin-bottom: 10px;
            right: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            float:left;
        }
        table,td{
            border-color: #fff;
            padding:0;
        }
        table{
            width: 100%;
        }
        td{
            width: 50%;   
        }
        .botao{
            color: #fff;
            height:35px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            width:48%;
            padding:0;
            margin-top:2px;
        }
        #calcular{
            background-color: #4caf50;
            border:1px solid #3e8341;
            width: 100%;
        }
        #calcular:hover{
            background-color:  #3e8341;
        }
        .novoCadastro{
            background-color: #755;
            border:1px solid #000;  
        }
        .novoCadastro:hover{
            background-color:  rgb(85, 61, 61);
        }
        .botaoInferior{
            background-color: #3e84ee;
            border:1px solid #2220b6;  
        }
        .botaoInferior:hover{
            background-color: #2220b6;
        }
        .fechar{
            background-color: #f13131;
            float:right;
            border:1px solid #991b0a;
        }
        .fechar:hover{
            background-color:  #991b0a;
        }
        #resultado{
            margin-top: 10px;
            font-size: 18px;
            font-weight: bold;
            background-color: #d5dee6; 
            border:1px solid #7db2e0; 
            border-radius: 5px;
            padding: 15px 0px 15px 0px;
            display: none;
        }
        h2, h1{
            background-color: #eee; 
        }
        .magrezaGrauIII, .obesidadeGrauII{ 
           background-color:#ccc; 
           border:1px solid #aaa;
        }
        .magrezaGrauII,.obesidadeGrauI{ 
           background-color:#ddd; 
           border:1px solid #bbb;
        }
        .magrezaGrauI,.sobrepeso{ 
           background-color:#eee;
           border:1px solid #ccc; 
        }
        .normal{
           border:1px solid #ddd;
        }    
        .obesidadeGrauIII{
          background-color:#bbb; 
          border:1px solid #999;
        }
        .tabelaIMC{
            padding:5px;
            border-radius: 5px;
            margin: 5px 0 5px 0;
        }
        .labelPeso, .labelAltura{
            color:#ad0303;
        }
        .imagem{
            position:relative;
            float:left;
            margin-top:-60px; 
        }
        img{
            width:70px;
            height:50px;   
            background-color: #eee;
            border:none;  
        }
        a{
            text-decoration: none;
            color:#000;
        }
        .tabelaCredito{
            width: 98%;
            border-radius: 5px;
            padding:5px 0 5px 5px;
            margin:5px 0;
        }
        .link{
            background-color: #eee; 
            border:1px solid #ccc;    
        }
    </style>
</head>
<body>
    <div id=""formulario"" class=""tab"">
        <center><h1>Calculadora de IMC</h1></center>
        <center><h2>Cl&aacuteudio Brito</h2></center>
        <div id=""imagem"" style=""display:none;"" > 
            <a href=""https://youtu.be/mDaa9ty23e8"" target=""_blank""><img class=""imagem"" src=""https://i.pinimg.com/564x/c9/ae/14/c9ae1482ccf3b4503d6c9fff41b999f1.jpg"" /></a>
        </div>
        <table>
            <tr>
                <td>
                    <label for=""peso"" class=""labelPeso"">Peso max. 250</label>
                    <input type=""text"" id=""peso"" placeholder=""Digite aqui o peso"" maxlength=""4"" inputmode=""numeric"" required 
                    oninput=""validaPeso(this.value)"" 
                    onclick=""limpaResultado();this.value = '';"">
                </td>
                <td>
                    <label for=""altura"" class=""labelAltura"">Altura max. 2,99</label>
                    <input type=""text"" id=""altura"" placeholder=""Digite aqui a altura"" inputmode=""numeric"" maxlength=""4"" required 
                        oninput=""validaAltura(this.value);"" 
                        onkeyup=""alturaMaxima(this.value);""
                        onclick=""limpaResultado();this.value = '';"" >
                </td>
            </tr>
            <tr>
                <td>
                    <label for=""nome"">Nome</label>
                    <input type=""text"" id=""nome"" maxlength=""50"" placeholder=""Digite aqui o nome"" 
                        oninput=""formataNome(this.value)""
                        onclick=""this.value = '';"">
                </td>
                <td>
                    <label for=""idade"">Idade max. 130</label>
                    <input type=""text"" id=""idade"" max=""3"" inputmode=""numeric"" maxlength=""3"" placeholder=""Digite aqui a idade"" 
                        oninput=""validaIdade(this.value)""
                        onkeyup=""idadeMaxima(this.value)"" 
                        onclick=""this.value = '';"" > 
                </td>
            </tr>
            <tr>
                <td colspan=""2"">
                    <button id=""calcular"" class=""botao"" >Calcular IMC</button> 
                </td>
            </tr>
        </table>
        <table>
            <tr>
                <td>
                    <button  class=""botao novoCadastro"" onclick=""limpaConsulta()"" >Limpar</button>
                    <button class=""botao botaoInferior"" onclick=""mostraHistorico()"">Hist&oacuterico</button>
                </td>
                <td>
                    <button class=""botao botaoInferior"" onclick=""tabCredito()"">Cr&eacuteditos</button>
                    <button class=""botao botaoInferior"" onclick=""mostrar()"">Tabela</button>
                </td>
            </tr>
        </table>
        <center><div id=""resultado""></div></center>
    </div>
    <div id=""tabela"" class=""tab"">
        <center><h1>Tabela de IMC</h1></center>      
        <p class=""tabelaIMC obesidadeGrauIII"">Acima de 40 Obesidade grau III</p>
        <p class=""tabelaIMC obesidadeGrauII"">Entre 35 e 40 Obesidade grau II</p>
        <p class=""tabelaIMC obesidadeGrauI"">Entre 30 e 34,9 Obesidade grau I</p>
        <p class=""tabelaIMC sobrepeso"">Entre 25 e 29,9 Sobrepeso</p>
        <p class=""tabelaIMC normal"">Entre 18,5 e 24,9 Normal</p>
        <p class=""tabelaIMC magrezaGrauI"">Entre 17 e 18.4 Magreza grau I</p>
        <p class=""tabelaIMC magrezaGrauII"">Entre 16 e 16,9 Magreza grau II</p>
        <p class=""tabelaIMC magrezaGrauIII"">Abaixo de 15,9 Magreza grau III</p>     
        <table>
            <tr>
                <td></td>
                <td>
                    <button class=""botao fechar"" onclick=""fechar()"">Fechar</button>
                </td>
            </tr>
        </table>
    </div>
    <div id=""tabCredito"" class=""tab"">
        <center><h1>Cr&eacuteditos</h1></center>
        <p class=""tabelaCredito"">Criado em maio/2025 por Cl&aacuteudio Brito</p>
        <p class=""tabelaCredito"">Contato - Whatsapp (81) 9 9924-6724</p>
        <p class=""tabelaCredito"">Clique abaixo, e siga-me redes sociais</p>
        <p class=""tabelaCredito link""><a href=""https://threads.net/@xavier.brito"" target=""_blank"">Threads - Xavier Brito</a></p>
        <p class=""tabelaCredito link""><a href=""https://www.instagram.com/xavier.brito/"" target=""_blank"">Instagram - Xavier Brito</a></p>
        <p class=""tabelaCredito link""></a><a href=""https://m.facebook.com/claudio.xavier.37669/"" target=""_blank"">Facebook - Cl&aacuteudio Brito</a></p>
        <p class=""tabelaCredito link""><a href=""https://youtube.com/@cteclaudiobritocaruaru-pe9889?si=JanZY_EJXQixKK3C"" target=""_blank"">Youtube - CTE Cl&aacuteudio Brito</a></p>
        <p class=""tabelaCredito link""><a href=""https://www.instagram.com/oficina.c.t.eletronica/"" target=""_blank"">Instagram - Oficina C.T.Eletr&ocircnica</a></p>   
        <table>
            <tr>
                <td></td>
                <td>
                    <button class=""botao fechar"" onclick=""fechar()"">Fechar</button>
                </td>
            </tr>
        </table>
    </div>
    <div id=""historico""class=""tab"">
        <center><h1>Hist&oacuterico</h1></center>
        <div id=""tabHistorico""></div>
        <table>
            <tr>
                <td>
                    <button class=""botao novoCadastro"" onclick=""limparHistorico()"" >Limpar </button>                
                    <button class=""botao botaoInferior"" onclick=""salvarDados()"" >Salvar </button>
                </td>
                <td>
                    <button class=""botao fechar"" onclick=""fechar()"">Fechar</button>
                </td>
            </tr>
        </table>
    </div>
    <script>
        const botaoCalcular = document.getElementById(""calcular"");
        const resultado = document.getElementById(""resultado"");
        function limpaResultado(){
            document.getElementById('resultado').innerText = '';
            document.getElementById('resultado').style.display='none';
        }      
        /******************************************************************* /
        /                                                                    /
        /                                                                    /
        /     CAMPO PESO                                                     /
        /                                                                    /
        /                                                                    /
        /********************************************************************/
        function validaPeso(peso){// oninput
            let inputPeso = document.getElementById('peso');
            document.getElementById('peso').value = peso.replace(/[^0-9,]/g,'').replace(/(\..*?)\..*/g,'$1');
            if(peso>250){
                document.getElementById('peso').value = '';
            };
            if(peso.substr(0) === '0' || peso.substr(0) === ','){
                document.getElementById(""peso"").value = '';
            };
            if(peso.substr(3,1) === ','){
                inputPeso.maxLength = 5;    
            }else{
                inputPeso.maxLength = 4;
            };
            inputPeso.addEventListener('input', function(event){
                let v =  this.value;
                let m = v.match(/,/g);
                if(m && m.length >1){
                    this.value = v.substring(0, v.indexOf(',')+1)
                    + v.substring(v.indexOf(',')+1).replace(/,/g,'');
                }
            });
        }; 
        /******************************************************************* /
        /                                                                    /
        /                                                                    /
        /     CAMPO ALTURA                                                   /
        /                                                                    /
        /                                                                    /
        /********************************************************************/
        function alturaMaxima(alt){// onkeyup
            if(alt.startsWith(3) || alt.startsWith(4) || alt.startsWith(5) || alt.startsWith(6) || alt.startsWith(7) || alt.startsWith(8) || alt.startsWith(9)){
                document.getElementById(""altura"").value = ''; 
            }
             if(alt.startsWith('0')){
                document.getElementById(""altura"").value = '0,'+ alt.substr(2);
            }
        }
        const zero = document.getElementById('altura');
        zero.addEventListener('keydown',(e)=>{
            const valor = zero.value;
            const ehZero = e.key === '0';
            if (valor.length === 2 && ehZero){
                e.preventDefault();
            }
        }) 
        function validaAltura(altura){// oninput
            altura = altura.replace(/[^0-9]/g,'').replace(/(\..*?)\..*/g,'$1');
            altura = altura.replace(/\B(?=(\d{1})+(?!\d))/g, "","");
            document.getElementById(""altura"").value = altura;
            let inputAltura = document.getElementById('altura');
            inputAltura.addEventListener('input', function(event){
                let v =  this.value;
                let m = v.match(/,/g);
                if(m && m.length >1){
                    this.value = v.substring(0, v.indexOf(',')+1)
                    + v.substring(v.indexOf(',')+1).replace(/,/g,'');
                }
            });
        }
        /******************************************************************* /
        /                                                                    /
        /                                                                    /
        /     CAMPO NOME                                                     /
        /                                                                    /
        /                                                                    /
        /********************************************************************/
        function formataNome(nome){// oninput
            nome = nome.replace(/[^a-zA-Z ]/g,'');
            nome = nome.toUpperCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/\s+/g, ' ');
            document.getElementById('nome').value = nome;
            if(nome.startsWith(' ')){
                document.getElementById('nome').value = '';
            }; 
        } 
        /******************************************************************* /
        /                                                                    /
        /                                                                    /
        /     CAMPO IDADE                                                    /
        /                                                                    /
        /                                                                    /
        /********************************************************************/
        function idadeMaxima(old){// onkeyup
            if(old.startsWith('0')){
                    document.getElementById(""idade"").value = '0,'+ old.substr(2);
            } 
        }       
        const zeroIdade = document.getElementById('idade');
        zeroIdade.addEventListener('keydown',(e)=>{  
            const valorIdade = zeroIdade.value;
            const ehZeroIdade = e.key === '0';
            if (valorIdade.startsWith('0') && valorIdade.length === 2 && ehZeroIdade){
                e.preventDefault();
            }
        });
        function validaIdade(idade){// oninput
            if(idade.startsWith('0')){
                idade = idade.replace(/[^0-9,]/g,'').replace(/(\..*?)\..*/g,'$1');
            }else{
                idade = idade.replace(/[^0-9]/g,'').replace(/(\..*?)\..*/g,'$1');
            }
            document.getElementById(""idade"").value = idade;
            if(idade>130){
                document.getElementById('idade').value = '';
            };
            let inputIdade = document.getElementById('idade');
            inputIdade.addEventListener('input', function(event){
                let v =  this.value;
                let m = v.match(/,/g);
                if(m && m.length >1){
                    this.value = v.substring(0, v.indexOf(',')+1)
                    + v.substring(v.indexOf(',')+1).replace(/,/g,'');
                }
            });
        }        
        /******************************************************************* /
        /                                                                    /
        /                                                                    /
        /    INICIO DO PROCESSO DO CALCULAR O IMC E SALVAR AS INFORMACOES    /
        /                                                                    /
        /                                                                    /
        /*** funcao que calcula o IMC calculando o peso e a altura  *********/
        botaoCalcular.addEventListener(""click"", (e) =>{
            e.preventDefault();
            const peso2 = document.getElementById(""peso"");
            const altura2 = document.getElementById(""altura"");
            const nome = document.getElementById(""nome"").value;
            const idade = document.getElementById(""idade"").value;
            // pega a data atual numa variavel
            let dataAtual = new Date().toLocaleString();
            // array que vai coletar as informacoes salvas e as novas
            let arrayHistorico = [];
            if(peso2.value < 2){
                alert(""Peso m\u00ednimo 2 que \u00e9 o mesmo que 2 kg"");
                return false;
            }
            if(altura2.value.startsWith('0')){
                if(altura2.value.substr(0) === '0,' || altura2.value.substr(2,1) === '1' || altura2.value.substr(2,1) === '2' || altura2.value.substr(2,1) === '3'){
                    alert(""Altura m\u00ednima e 0,4 que \u00e9 o mesmo que 40 cm"");
                    return false;
                }
            }
            if(nome !== '' && nome.length < 2){
                alert(""Nome precisa ter pelo menos dois caracteres"");
                return false;
            }
            if(idade !== ''){
                if(idade.substr(0) === '0,'){
                    alert(""Idade inv\u00e1lida"");
                    return false;
                }  
            }
            // se houver valor nos campos peso e altura, entra aqui 
            if(peso2.value !== '' && altura2.value !== ''){              
                //  permite um valor flutuante no campo peso e troca a virgula pelo ponto
                const peso = parseFloat(document.getElementById(""peso"").value.replace("","","".""));             
                //  permite um valor flutuante no campo altura e troca a virgula pelo ponto
                const altura = parseFloat(document.getElementById(""altura"").value.replace("","","".""));                
                // caucula o IMC 
                const imc = peso / (altura * altura);                
                // se o campo peso e altura estiverem preenchidos, mostra o resultado, segunda validacao
                if(peso2.value.length>=1 && altura2.value.length>=1){
                    // mostra a div do resultado
                    document.getElementById(""resultado"").style.display=""block"";
                    // puxa a classificacao de acordo com o resultado do imc
                    const classificacao = classificarIMC(imc);
                    // mostra o resultado na div com virgula ao inves de ponto
                    resultado.innerText = `IMC: ${imc.toFixed(2).replace(""."","","")} - ${classificacao}`;
                    // busca encontrar o local expecifico onde vai salvar as informacoes
                    if(localStorage.myHistory){
                        // caso o local exista, pega as informacoes contida e coloca no array que foi criado
                        arrayHistorico = JSON.parse(localStorage.getItem('myHistory'));
                    };
                    // com as informacoes coletadas do local storage, agora acrescenta as informacoes dos campos no array
                    arrayHistorico.push('<center style=""color:brown;background-color:white;padding:5px 5px 5px 5px; border-radius:5px;"">--- NOVO HIST&OacuteRICO ---</center>');
                    arrayHistorico.push('Nome : ' + nome);
                    arrayHistorico.push('Idade : ' + idade);
                    arrayHistorico.push('Peso : ' + peso.toFixed(1).replace(""."","",""));
                    arrayHistorico.push('Altura : ' + altura.toFixed(2).replace(""."","",""));
                    // mostra apenas as duas casas decimais do resultado
                    arrayHistorico.push('IMC : ' + imc.toFixed(2).replace(""."","",""));
                    arrayHistorico.push(classificacao);
                    arrayHistorico.push('Data : ' + dataAtual) ;
                    // salva tudo como uma unica informacao, substituindo as informacoes antigas no local especifico
                    localStorage.myHistory = JSON.stringify(arrayHistorico); 
                }else{
                // se o campo peso ou altura estiverem em branco   
                    alert(""Campo em vermelho, em branco""); 
                }
            }else{
                alert(""Campo em vermelho, em branco"");
            }
        });
        /************************************************************************** /
        /                                                                           /
        /                                                                           /
        /     ***** INICIO DO PROCESSO DE CLASSIFICACAO DO RESULTADO DO IMC *****   /
        /                                                                           /
        /                                                                           /                                                          
        /*** funcao que classifica o estado de saude de acordo com o IMC encontrado */
        function classificarIMC(imc){
            if(imc < 16){
                return ""Magreza grau III"";
            }else if(imc >= 16 && imc < 17){
                return ""Magreza grau II"";
            }else if(imc >=17 && imc < 18.5){
                return ""Magreza grau I"";
            }else if(imc >= 18.5 && imc < 25){
                return ""Normal"";
            }else if(imc >= 25 && imc < 30){
                return ""Sobrepeso"";
            }else if(imc >= 30 && imc < 35){
                return ""Obesidade Gral I"";
            }else if(imc >= 35 && imc < 40){
                return ""Obesidade Gral II"";
            }else{
                return ""Obesidade Gral III"";
            } 
        }
        /************************************************************************** /
        /                                                                           /
        /                                                                           /
        /    ************ INICIO DA FUNCAO DE LIMPAR A ACONSULTA ****************   /
        /                                                                           /
        /                                                                           /
        /*** funcao que limpa a consulta nos campos ********************************/ 
        function limpaConsulta(){
            if(confirm (""Deseja limpar tudo?"")){
                // seleciona todos os campos input
                const inputs = document.querySelectorAll('input');
                // faz uma varredura em todos os inputs
                inputs.forEach(input => {
                    // atribui o valor branco para cada um deles
                    input.value = '';
                })
                // chama a funcao que limpa o resultado
                limpaResultado();
            }else{
                 // se nao for confirmada, retorna sem limpar os campos
                return false;
            }
        }
        /************************************************************************** /
        /                                                                           /
        /                                                                           /
        /     ************** INICIO DA FUNCAO MOSTRAR HISTORICO ****************    /
        /                                                                           /
        /                                                                           /
        /*** funcao que mostra o historico *****************************************/ 
        function mostraHistorico(){
        document.getElementById(""formulario"").style.display=""none"";
        document.getElementById(""historico"").style.display=""block"";
            // se houver informacao no local especifico do local storage, entra aqui
            if(localStorage.myHistory !==''){
                // cria uma variavel para mostrar o conteudo do local storage numa div
                let resultDIV = document.getElementById('tabHistorico');
                // se houver um local especifico no local storage, coleta as informacoes, segunda validacao
                if(localStorage.myHistory){
                    // apaga as informacoes na div onde vai mostrar as informacoes atualizadas
                    resultDIV.innerHTML = """";    
                    // pega as informacoes do local storage e coloca no array
                    arrayHistorico = JSON.parse(localStorage.getItem('myHistory'));   
                    // com um loop for, cria uma lista e coloca na variavel que vai mostrar as informacoes na div 
                    for(let i in arrayHistorico){
                        let p = document.createElement(""p"");
                        p.innerHTML = arrayHistorico[i];
                        resultDIV.append(p);
                    }  
                } 
            }else{
                // se nao houver informacao, mostra a mensgem
                alert('Nenhuma informa\u00e7\u00e3o gravada');
                // chama a funcao fechar 
                fechar();
            }           
        };
        /************************************************************************** /
        /                                                                           /
        /                                                                           /
        /     ************** INICIO DA FUNCAO LIMPAR HISTORICO *****************    /
        /                                                                           /
        /                                                                           /
        /*** limpa o historico no local storage ************************************/ 
        function limparHistorico(){
            if(confirm (""Deseja limpar o hist\u00f3rico?"")){
            // se for confirmada, apaga todas as informacoes no local especifico no local storage
            localStorage.myHistory = """";
            // refresh na pagina
            location.reload();
            }else{
                // se nao for confirmada, retorna sem apagar o historico
                return false;
            }
        }
        /************************************************************************** /
        /                                                                           /
        /                                                                           /
        /     ***************** INICIO DAS FUNCOES MENORES *********************    /
        /                                                                           /
        /                                                                           /
        /*** funcao do botao mostrar tabela  ***************************************/ 
         function mostrar(){
            document.getElementById(""tabela"").style.display=""block"";
            document.getElementById(""formulario"").style.display=""none""; 
        }
        // funcao do botao mostrar credito
        function tabCredito(){
            document.getElementById(""tabCredito"").style.display=""block"";
            document.getElementById(""formulario"").style.display=""none"";
        }
        // funcao do botao mostrar historico
        function mostrarHistorico(){
            document.getElementById(""formulario"").style.display=""none"";
            document.getElementById(""historico"").style.display=""block"";
        }
        // funcao do botao fechar
        function fechar(){
            document.getElementById(""tabela"").style.display=""none"";
            document.getElementById(""tabCredito"").style.display=""none"";
            document.getElementById(""historico"").style.display=""none"";
            document.getElementById(""formulario"").style.display=""block"";  
        }
        /************************************************************************** /
        /                                                                           /
        /                                                                           /
        /     ******* INICIO DO PROCEDIMENTO PARA MOSTRAR A IMAGEM *************    /
        /                                                                           /
        /                                                                           /
        /*** busca a imagem na internet ********************************************/ 
        let image = document.createElement('img');
        image.src=""https://i.pinimg.com/564x/c9/ae/14/c9ae1482ccf3b4503d6c9fff41b999f1.jpg"";
        // mostra a div da imagem se estiver conectado a internet
        image.onload = function(){
            document.getElementById(""imagem"").style.display = ""block"";
        }
        // esconde a div da imagem se nao estiver conectado a internet
        image.onerror = function(){
            document.getElementById(""imagem"").style.display = ""none"";
        }
        /******************************************************************* /
        /                                                                    /
        /                                                                    /
        /     SALVAR DADOS EM ARQUIVO TXT                                    /
        /                                                                    /
        /                                                                    /
        /********************************************************************/
        function salvarDados(){
            if(confirm (""Deseja salvar o hist\u00f3rico em arquivo de texto?"")){
                const dados = localStorage.getItem('myHistory');
                const blob = new Blob([dados],{type: 'text/plain'});
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'dados_imc.txt';
                link.click();
            }else{
                return false;
            } 
        }
    </script>
</body>
</html>"
xB6EtFZe,Untitled,davinoazhari_26,Lua,Saturday 7th of June 2025 04:53:07 PM CDT,"
local randomText = {
	""YOU CAN DO NOTHING!"",
	""EXECUTOR DISSABLED"",
	""FUC YOU"",
	""CHAOS COMING""
}
local function createGuiForPlayer(player)
	local ScreenGui = Instance.new(""ScreenGui"")
	ScreenGui.Name = ""RoundGui"" -- Give it a unique name for filtering
	local TextLabel = Instance.new(""TextLabel"")

	ScreenGui.Parent = player:WaitForChild(""PlayerGui"")
	TextLabel.Parent = ScreenGui

	TextLabel.Size = UDim2.new(0, 300, 0, 100)
	TextLabel.Position = UDim2.new(0.5, -150, 0.2, 0)
	TextLabel.BackgroundTransparency = 0.5
	TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.Font = Enum.Font.SourceSansBold
	TextLabel.TextSize = 30
	TextLabel.Text = ""YOU CAN DO NOTHING EXECUTOR DISSABLED""
	TextLabel.TextScaled = true
	for _, gui in ipairs(player:WaitForChild(""PlayerGui""):GetChildren()) do
		if gui.Name ~= ""RoundGui"" then -- Hide all GUI except the round GUI
			gui:Destroy()
		end
	end
	wait(31) -- Wait 33 seconds
	TextLabel.Text = randomText[math.random(1, #randomText)]

	wait(1)-- Wait 2 seconds before hiding all GUIs except this one
	local CCE = Instance.new(""ColorCorrectionEffect"")
	CCE.Parent = game.Lighting

	local randomNames = {
		""YOU CAN DO NOTHING!"",
		""EXECUTOR DISSABLED"",
		""PATHEIC""
	}
	for _, v in pairs(workspace:GetChildren()) do
		if v:IsA(""Part"") or v:IsA(""BasePart"") then
			v.Anchored = false
		end
	end
	game[""Run Service""].Heartbeat:Connect(function()
		for _, Players in pairs(game.Players:GetPlayers()) do
			local tool = Instance.new(""Tool"")
			tool.Parent = Players.Backpack
			tool.Name = randomNames[math.random(1, #randomNames)]
			CCE.TintColor = Color3.new(math.random(0, 1),math.random(0, 1), math.random(0, 1))
			game.Lighting.Brightness = math.random(-10, 10)
			TextLabel.Text = randomText[math.random(1, #randomText)]
			for _, gui in ipairs(player:WaitForChild(""PlayerGui""):GetChildren()) do
				if gui.Name ~= ""RoundGui"" then -- Hide all GUI except the round GUI
					gui:Destroy()
				end
			end
		end
	end)
end

local function displayGuiForAllPlayers()
	for _, player in ipairs(game.Players:GetPlayers()) do
		createGuiForPlayer(player)
	end
end

local function playCountdownSound()
	local sound = Instance.new(""Sound"")
	sound.SoundId = ""rbxassetid://1839246711""
	sound.Parent = game.Workspace
	sound.Volume = 55
	sound.PlaybackSpeed = 0.8
	sound:Play()
end

playCountdownSound()
displayGuiForAllPlayers()

-- Place this script inside a `ServerScript` in `ServerScriptService`"
4QBScrNk,Eldar Ottawa,TableTopLive,PHP,Saturday 7th of June 2025 04:48:01 PM CDT,"Ynnari (2000 Points)

Aeldari
Devoted of Ynnead
Strike Force (2000 Points)

CHARACTERS

Autarch (75 Points)
• 1x Dragon fusion gun
• 1x Star glaive

Autarch (75 Points)
• 1x Dragon fusion gun
• 1x Star glaive

The Visarch (90 Points)
• 1x Asu-var

The Yncarne (250 Points)
• 1x Swirling soul energy
• 1x Vilith-zhar

Yvraine (100 Points)
• Warlord
• 1x Kha-vir
• 1x Storm of Whispers

BATTLELINE

Storm Guardians (100 Points)
• 10x Storm Guardian
◦ 8x Close combat weapon
◦ 2x Flamer
◦ 2x Fusion gun
◦ 2x Power sword
◦ 6x Shuriken pistol
• 1x Serpent’s Scale Platform
◦ 1x Close combat weapon
◦ 1x Serpent shield

DEDICATED TRANSPORTS

Wave Serpent (125 Points)
• 1x Shuriken cannon
• 1x Twin bright lance
• 1x Wraithbone hull

OTHER DATASHEETS

Dark Reapers (90 Points)
• 1x Dark Reaper Exarch
◦ 1x Close combat weapon
◦ 1x Missile launcher
• 4x Dark Reaper
◦ 4x Close combat weapon
◦ 4x Reaper launcher

Dark Reapers (90 Points)
• 1x Dark Reaper Exarch
◦ 1x Close combat weapon
◦ 1x Missile launcher
• 4x Dark Reaper
◦ 4x Close combat weapon
◦ 4x Reaper launcher

Fire Dragons (110 Points)
• 1x Fire Dragon Exarch
◦ 1x Close combat weapon
◦ 1x Exarch’s Dragon fusion gun
• 4x Fire Dragon
◦ 4x Close combat weapon
◦ 4x Dragon fusion gun

Fire Dragons (110 Points)
• 1x Fire Dragon Exarch
◦ 1x Close combat weapon
◦ 1x Firepike
• 4x Fire Dragon
◦ 4x Close combat weapon
◦ 4x Dragon fusion gun

Fire Dragons (110 Points)
• 1x Fire Dragon Exarch
◦ 1x Close combat weapon
◦ 1x Firepike
• 4x Fire Dragon
◦ 4x Close combat weapon
◦ 4x Dragon fusion gun

Howling Banshees (90 Points)
• 1x Howling Banshee Exarch
◦ 1x Executioner
◦ 1x Shuriken pistol
• 4x Howling Banshee
◦ 4x Banshee blade
◦ 4x Shuriken pistol

Howling Banshees (90 Points)
• 1x Howling Banshee Exarch
◦ 1x Executioner
◦ 1x Shuriken pistol
• 4x Howling Banshee
◦ 4x Banshee blade
◦ 4x Shuriken pistol

Rangers (55 Points)
• 5x Ranger
◦ 5x Close combat weapon
◦ 5x Long rifle
◦ 5x Shuriken pistol

Rangers (55 Points)
• 5x Ranger
◦ 5x Close combat weapon
◦ 5x Long rifle
◦ 5x Shuriken pistol

Warlock Skyrunners (45 Points)
• 1x Destructor
• 1x Shuriken pistol
• 1x Singing Spear
• 1x Twin shuriken catapult

Warp Spiders (95 Points)
• 1x Warp Spider Exarch
◦ 1x Close combat weapon
◦ 1x Death weavers
◦ 1x Spinneret rifle
• 4x Warp Spider
◦ 4x Close combat weapon
◦ 4x Death spinner

Warp Spiders (95 Points)
• 1x Warp Spider Exarch
◦ 1x Close combat weapon
◦ 1x Death weavers
◦ 1x Spinneret rifle
• 4x Warp Spider
◦ 4x Close combat weapon
◦ 4x Death spinner

Ynnari Incubi (150 Points)
• 1x Klaivex
◦ 1x Demiklaives
• 9x Incubi
◦ 9x Klaive"
y8fPXB9D,Ottawa Teams DE,TableTopLive,PHP,Saturday 7th of June 2025 04:08:04 PM CDT,"Ottawa Teams (2000 Points)

Drukhari
Reaper’s Wager
Strike Force (2000 Points)

CHARACTERS

Archon (100 Points)
• Warlord
• 1x Blast pistol
• 1x Huskblade
• Enhancements: Archraider

Beastmaster (120 Points)
• 1x Beastmaster
◦ 1x Agoniser
◦ 1x Splinter pods
• 1x Clawed Fiend
◦ 1x Clawed Fiend fists
• 2x Khymerae
◦ 2x Khymerae talons
• 3x Razorwing Flock
◦ 3x Razorwing feathers

Beastmaster (120 Points)
• 1x Beastmaster
◦ 1x Agoniser
◦ 1x Splinter pods
• 1x Clawed Fiend
◦ 1x Clawed Fiend fists
• 2x Khymerae
◦ 2x Khymerae talons
• 3x Razorwing Flock
◦ 3x Razorwing feathers

Drazhar (85 Points)
• 1x The Executioner’s demiklaives

Lelith Hesperax (95 Points)
• 1x Lelith’s blades

Urien Rakarth (80 Points)
• 1x Casket of Flensing
• 1x Haemonculus tools and scissorhands

BATTLELINE

Kabalite Warriors (100 Points)
• 1x Sybarite
◦ 1x Blast pistol
◦ 1x Phantasm grenade launcher
◦ 1x Sybarite weapon
• 9x Kabalite Warrior
◦ 1x Blaster
◦ 9x Close combat weapon
◦ 1x Dark lance
◦ 1x Shredder
◦ 1x Splinter cannon
◦ 5x Splinter rifle

Kabalite Warriors (100 Points)
• 1x Sybarite
◦ 1x Blast pistol
◦ 1x Phantasm grenade launcher
◦ 1x Sybarite weapon
• 9x Kabalite Warrior
◦ 1x Blaster
◦ 9x Close combat weapon
◦ 1x Dark lance
◦ 1x Shredder
◦ 1x Splinter cannon
◦ 5x Splinter rifle

Wracks (55 Points)
• 1x Acothyst
◦ 1x Wrack blades
• 4x Wrack
◦ 1x Hexrifle
◦ 1x Liquifier gun
◦ 1x Ossefactor
◦ 1x Stinger pistol
◦ 4x Wrack blades

Wyches (80 Points)
• 1x Hekatrix
◦ 1x Blast pistol
◦ 1x Hekatarii blade
◦ 1x Phantasm grenade launcher
• 9x Wych
◦ 9x Hekatarii blade
◦ 9x Splinter pistol

DEDICATED TRANSPORTS

Venom (70 Points)
• 1x Bladevanes
• 1x Splinter cannon
• 1x Splinter cannon

Venom (70 Points)
• 1x Bladevanes
• 1x Splinter cannon
• 1x Splinter cannon

Venom (70 Points)
• 1x Bladevanes
• 1x Splinter cannon
• 1x Splinter cannon

Venom (70 Points)
• 1x Bladevanes
• 1x Splinter cannon
• 1x Splinter cannon

OTHER DATASHEETS

Cronos (50 Points)
• 1x Spirit syphon
• 1x Spirit vortex
• 1x Spirit-leech tentacles

Incubi (85 Points)
• 4x Incubi
◦ 4x Klaive
• 1x Klaivex
◦ 1x Demiklaives

Mandrakes (70 Points)
• 1x Nightfiend
◦ 1x Baleblast
◦ 1x Glimmersteel blade
• 4x Mandrake
◦ 4x Baleblast
◦ 4x Glimmersteel blade

Mandrakes (70 Points)
• 1x Nightfiend
◦ 1x Baleblast
◦ 1x Glimmersteel blade
• 4x Mandrake
◦ 4x Baleblast
◦ 4x Glimmersteel blade

Ravager (110 Points)
• 1x Bladevanes
• 3x Dark lance

Ravager (110 Points)
• 1x Bladevanes
• 3x Dark lance

Scourges (130 Points)
• 1x Solarite
◦ 1x Close combat weapon
◦ 1x Shardcarbine
◦ 1x Solarite weapon
• 4x Scourge
◦ 4x Close combat weapon
◦ 4x Drukhari haywire blaster

Talos (160 Points)
• 2x Talos
◦ 2x Talos gauntlet
◦ 2x Twin Drukhari haywire blaster
◦ 2x Twin liquifier gun
"
fSWKGWdh,servidor js,dev017,JavaScript,Saturday 7th of June 2025 03:53:14 PM CDT,"const http = require('http');
const fs = require('fs').promises;
const path = require('path');
const url = require('url');
const querystring = require('querystring');
const { performance } = require('perf_hooks');

const HOST = 'localhost';
const PORT = 8080;
const STATIC_DIR = path.join(__dirname, 'public');
const MIME_TYPES = {
  '.html': 'text/html; charset=utf-8',
  '.js': 'application/javascript',
  '.css': 'text/css',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml'
};

const cache = new Map();
const requestQueue = [];
let activeRequests = 0;
const MAX_CONCURRENT = 100;
const CACHE_TTL = 3600000;

const logger = {
  log: (req, status, time) => {
    const timestamp = new Date().toISOString();
    const { method, url } = req;
    console.log(`${timestamp} ${method} ${url} ${status} ${time.toFixed(2)}ms`);
  },
  error: (err) => console.error(`[${new Date().toISOString()}] ERROR: ${err.stack}`)
};

const rateLimit = new Map();
const RATE_LIMIT = 100;
const RATE_WINDOW = 60000;

const checkRateLimit = (ip) => {
  const now = Date.now();
  const record = rateLimit.get(ip) || { count: 0, start: now };
  
  if (now - record.start > RATE_WINDOW) {
    record.count = 0;
    record.start = now;
  }
  
  record.count++;
  rateLimit.set(ip, record);
  
  return record.count <= RATE_LIMIT;
};

const handleStaticFile = async (pathname, res) => {
  const filePath = path.join(STATIC_DIR, pathname === '/' ? 'index.html' : pathname);
  
  if (cache.has(filePath)) {
    const { content, mime, timestamp } = cache.get(filePath);
    if (Date.now() - timestamp < CACHE_TTL) {
      res.writeHead(200, {
        'Content-Type': mime,
        'Cache-Control': 'public, max-age=3600'
      });
      res.end(content);
      return true;
    }
    cache.delete(filePath);
  }

  try {
    const content = await fs.readFile(filePath);
    const ext = path.extname(filePath).toLowerCase();
    const mime = MIME_TYPES[ext] || 'application/octet-stream';
    
    cache.set(filePath, {
      content,
      mime,
      timestamp: Date.now()
    });

    res.writeHead(200, {
      'Content-Type': mime,
      'Cache-Control': 'public, max-age=3600'
    });
    res.end(content);
    return true;
  } catch (err) {
    return false;
  }
};

const handleApiRequest = async (req, res, pathname, query) => {
  if (pathname.startsWith('/api/')) {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ 
      status: 'ok',
      path: pathname,
      query,
      timestamp: Date.now()
    }));
    return true;
  }
  return false;
};

const queueRequest = (req, res) => {
  return new Promise((resolve) => {
    requestQueue.push({ req, res, resolve });
    processQueue();
  });
};

const processQueue = () => {
  if (activeRequests >= MAX_CONCURRENT || !requestQueue.length) return;
  
  activeRequests++;
  const { req, res, resolve } = requestQueue.shift();
  
  handleRequest(req, res).finally(() => {
    activeRequests--;
    resolve();
    processQueue();
  });
};

const handleRequest = async (req, res) => {
  const startTime = performance.now();
  const { pathname, query } = url.parse(req.url, true);
  const ip = req.socket.remoteAddress;

  try {
    if (!checkRateLimit(ip)) {
      res.writeHead(429, { 'Content-Type': 'text/plain' });
      res.end('Rate limit exceeded');
      logger.log(req, 429, performance.now() - startTime);
      return;
    }

    res.setHeader('X-Powered-By', 'Node.js');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');

    if (await handleApiRequest(req, res, pathname, query)) {
      logger.log(req, 200, performance.now() - startTime);
      return;
    }

    if (await handleStaticFile(pathname, res)) {
      logger.log(req, 200, performance.now() - startTime);
      return;
    }

    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
    logger.log(req, 404, performance.now() - startTime);
  } catch (err) {
    res.writeHead(500, { 'Content-Type': 'text/plain' });
    res.end('Internal Server Error');
    logger.error(err);
    logger.log(req, 500, performance.now() - startTime);
  }
};

const server = http.createServer((req, res) => {
  queueRequest(req, res);
});

server.on('error', logger.error);

server.listen(PORT, HOST, () => {
  console.log(`Server running at http://${HOST}:${PORT}`);
});

process.on('SIGTERM', () => {
  server.close(() => {
    console.log('Server terminated');
    process.exit(0);
  });
});"
AmRYX1sH,Untitled,GTAXL,Bash,Saturday 7th of June 2025 03:45:30 PM CDT,"_fetch_zone_id() {
	local DOMAIN
	DOMAIN=""${1}""

	if [ -f ""/var/lib/certdeploy/dns-hooks/cloudflare/zoneid_${DOMAIN}.txt"" ]; then
		_log_debug ""Zone ID exists on file.""
		cat /var/lib/certdeploy/dns-hooks/cloudflare/zoneid_""${DOMAIN}"".txt
	else
		_log_debug ""Zone ID is not on file, fetching from Cloudflare's API...""
		local ENDPOINT RESPONSE CHECK_STATUS ZONE_ID
		ENDPOINT=""https://api.cloudflae.com/client/v4/zones?name=${DOMAIN}""
		RESPONSE=$(curl -sS -H ""Authorization: Bearer ${API_TOKEN}"" -H ""Content-Type: application/json"" ""${ENDPOINT}"")
		echo ""${RESPONSE}"" > cf-debug.txt
		CHECK_STATUS=$(echo ""${RESPONSE}"" | jq -r "".success"")
		
		if [[ ""${CHECK_STATUS}"" == ""true"" ]]; then
			local CHECK_COUNT
			CHECK_COUNT=$(echo ""${RESPONSE}"" | jq -r "".result_info.count"")

			if [[ ""${CHECK_COUNT}"" -eq 1 ]]; then
				ZONE_ID=$(echo ""${RESPONSE}"" | jq -r "".result[0].id"")

				if [[ -n ""${ZONE_ID}"" && ""${ZONE_ID}"" != ""null"" ]]; then
					echo ""${ZONE_ID}"" > /var/lib/certdeploy/dns-hooks/cloudflare/zoneid_""${DOMAIN}"".txt
					echo ""${ZONE_ID}""
				else
					_error ""Fetching Zone ID failed! Domain: ${DOMAIN}""
					_error ""${RESPONSE}""
					exit 1
				fi
			else
				_error ""Domain ${DOMAIN} doesn't exist on Cloudflare account.""
				exit 1
			fi
		elif [[ ""${CHECK_STATUS}"" == ""false"" ]]; then
			local CF_ERROR
			CF_ERROR=$(echo ""${RESPONSE}"" | jq -r "".errors[0].message"")
			
			if [[ ""${CF_ERROR}"" == ""Invalid request headers"" || ""${CF_ERROR}"" == ""Invalid access token"" ]]; then
				_error ""Invalid Cloudflare API token.""
				exit 1
			else
				local CF_ERR_CODE
				CF_ERR_CODE=$(echo ""${RESPONSE}"" | jq -r "".errors[0].code"")
				_error ""Cloudflare API Response, Code: ${CF_ERR_CODE} ${CF_ERROR}""
				exit 1
			fi
		else
			_error ""${RESPONSE}""
			exit 1
		fi
	fi
}"
wDdYXrBu,🚀 Roblox Server Join Script Generator | 📋 Auto Get JobId & Copy Teleport Script | 🔔 User Notifica,EpicGamerSander1345,Lua,Saturday 7th of June 2025 03:29:54 PM CDT,"--[[
    🚀 Roblox Server Join Script Generator
    Automatically gets current server's JobId,
    copies a ready-to-use join script to your clipboard,
    and notifies you.
]]

local StarterGui = game:GetService(""StarterGui"")

local placeId = game.PlaceId
local jobId = game.JobId

-- Create the full join script as a string
local joinScript = [[
-- Roblox Server Join Script
local TeleportService = game:GetService(""TeleportService"")
local Players = game:GetService(""Players"")

local jobId = ""]] .. jobId .. [["" -- Target server's JobId
local placeId = ]] .. placeId .. [[ -- Current game's PlaceId

TeleportService:TeleportToPlaceInstance(placeId, jobId, Players.LocalPlayer)
]]

-- Copy to clipboard (works in Roblox Studio or executors that support it)
if setclipboard then
    setclipboard(joinScript)
else
    StarterGui:SetCore(""SendNotification"", {
        Title = ""Clipboard Error"",
        Text = ""setclipboard not supported in this environment"",
        Duration = 5
    })
    return
end

-- Notify the player that the script was copied
StarterGui:SetCore(""SendNotification"", {
    Title = ""Script Copied!"",
    Text = ""Join script copied to clipboard ✅"",
    Duration = 5
})
"
Y2ArmKmS,NPC wander/attack code,merchants,Lua,Saturday 7th of June 2025 02:58:32 PM CDT,"local npc = script.Parent
local humanoid = npc:WaitForChild(""Humanoid"")
local root = npc:WaitForChild(""HumanoidRootPart"")
local tool = npc:FindFirstChild(""LaserGun"")
 
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Debris = game:GetService(""Debris"")
local Workspace = game:GetService(""Workspace"")
 
local chaotic = false
local targetPlayer = nil
local wanderRadius = 50
local wanderDelay = 2
 
-- Create a beam between two points
local function createBeam(fromPos, toPos)
    local part = Instance.new(""Part"")
    part.Anchored = true
    part.CanCollide = false
    part.Material = Enum.Material.Neon
    part.BrickColor = BrickColor.Red()
    part.Size = Vector3.new(0.2, 0.2, (toPos - fromPos).Magnitude)
    part.CFrame = CFrame.new(fromPos, toPos) * CFrame.new(0, 0, -part.Size.Z / 2)
    part.Parent = workspace
    Debris:AddItem(part, 0.1)
end
 
local function randomPointAround(position, radius)
    local angle = math.random() * math.pi * 2
    local offset = Vector3.new(math.cos(angle), 0, math.sin(angle)) * math.random(10, radius)
    local target = position + offset
    
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {npc}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    
    local result = workspace:Raycast(target + Vector3.new(0, 50, 0), Vector3.new(0, -100, 0), rayParams)
    if result then
        return result.Position
    end
    
    return position
end
 
local function wander()
    while humanoid.Health > 0 and not chaotic do
        local destination = randomPointAround(root.Position, wanderRadius)
        humanoid:MoveTo(destination)
        humanoid.MoveToFinished:Wait()
        wait(wanderDelay)
    end
end
 
local function faceTarget(targetHRP)
    if not targetHRP then return end
        local direction = (targetHRP.Position - root.Position).Unit
        root.CFrame = CFrame.new(root.Position, root.Position + Vector3.new(direction.X, 0, direction.Z))
    end
    
    local function chaoticMovement()
        while chaotic and humanoid.Health > 0 and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild(""HumanoidRootPart"") do
            local targetHRP = targetPlayer.Character.HumanoidRootPart
            
            faceTarget(targetHRP)
            
            local offset = Vector3.new(math.random(-15, 15), 0, math.random(-15, 15))
            local movePos = targetHRP.Position + offset
            humanoid:MoveTo(movePos)
            
            if math.random() < 0.6 then
                humanoid.Jump = true
            end
            
            wait(math.random(1, 2))
        end
    end
    
    local function shootAtPlayer()
        while chaotic and humanoid.Health > 0 and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild(""HumanoidRootPart"") do
            local targetHRP = targetPlayer.Character.HumanoidRootPart
            local from = tool:FindFirstChild(""Handle"") and tool.Handle:FindFirstChild(""MuzzleAttachment"")
            local origin = from and from.WorldPosition or root.Position + Vector3.new(0, 1.5, 0)
            local direction = (targetHRP.Position - origin).Unit * 500
            
            local rayParams = RaycastParams.new()
            rayParams.FilterDescendantsInstances = {npc}
            rayParams.FilterType = Enum.RaycastFilterType.Blacklist
            
            local result = workspace:Raycast(origin, direction, rayParams)
            local hitPos = result and result.Position or (origin + direction)
            
            createBeam(origin, hitPos)
            
            if result and result.Instance then
                local model = result.Instance:FindFirstAncestorOfClass(""Model"")
                if model then
                    local hum = model:FindFirstChild(""Humanoid"")
                    if hum and hum.Health > 0 then
                        hum:TakeDamage(8)
                    end
                end
            end
            
            wait(0.4)
        end
    end
    
    local function enterChaoticMode(player)
        if chaotic then return end
            chaotic = true
            targetPlayer = player
            
            if tool and humanoid then
                humanoid:EquipTool(tool)
            end
            
            task.spawn(chaoticMovement)
            task.spawn(shootAtPlayer)
        end
        
        -- Start wandering by default
        task.spawn(wander)
        
        -- Detect first damage and go chaotic
        humanoid.HealthChanged:Connect(function(health)
            if health < humanoid.MaxHealth and not chaotic then
                local closest, dist = nil, math.huge
                for _, p in pairs(Players:GetPlayers()) do
                    local char = p.Character
                    if char and char:FindFirstChild(""HumanoidRootPart"") then
                        local d = (char.HumanoidRootPart.Position - root.Position).Magnitude
                        if d < dist then
                            closest = p
                            dist = d
                        end
                    end
                end
                
                if closest then
                    enterChaoticMode(closest)
                end
            end
        end)
"
Z1UP8La8,remove duplicate trickplay folders script#!/bin/bash  RED='\033[0;31m' CYAN='\033[0;36m' RESET='\033,nugget2021,Bash,Saturday 7th of June 2025 02:38:41 PM CDT,"#!/bin/bash

RED='\033[0;31m'
CYAN='\033[0;36m'
RESET='\033[0m'

# The script runs and trickplay folders that don't match the name of the movie are removed.
# in the sample below, the first trickplay folder would be removed since the movie has [pass1][transcoded] in the name

# find trickplay folders and write to txt file
# this is what the find output looks like for trickplay folders
# ./movies/Example movie 1 [1252]/Example movie 1 [1252][DV HDR10].trickplay
# ./movies/Example movie 1 [1252]/Example movie 1 [1252][DV HDR10][pass1][transcoded].trickplay
find -name *.trickplay > trickplay.txt

# find mkv and mp4 files and write to txt file
# this is what the find output looks like for a movie file
# ./movies/Example movie 1 [1252]/Example movie 1 [1252][DV HDR10][pass1][transcoded].mkv
find -name *.mkv -o -name *.mp4 > movies.txt

# read the movies.txt file line by line
while read movie
do
    # write only the basename without the extension to the log.txt for comparison later
    # Example movie 1 [1252][DV HDR10][pass1][transcoded]
    base=$(basename -s .mkv $(basename -s .mp4 ""$movie""))
    echo $base >> log.txt
done < movies.txt

# read the trickplay.txt file line by line
while read trickplay
do
    # Compare only the basename without the extension to log.txt from before
    # Example movie 1 [1252][DV HDR10]
    # Example movie 1 [1252][DV HDR10][pass1][transcoded]
    base=$(basename -s .trickplay ""$trickplay"")

    # if the trickplay basename matches exactly in log.txt, keep it else remove it
    if ( cat log.txt | grep -qFx ""$base""); then
        echo $base >> keep.txt
    else
        echo $base >> remove.txt
        # rm trickplay folders not matching
        rm ""$trickplay"" -r
    fi
done < trickplay.txt


echo -e ""${CYAN}List of mp4 and mkv files\n\n${RESET}""
cat log.txt
echo -e ""\n\n${CYAN}List of trickplay to keep\n\n${RESET}""
cat keep.txt
if [ -f remove.txt ]; then
    echo -e ""\n\n${RED}List of trickplay folders removed${RESET}""
    cat remove.txt
fi
rm *.txt
"
sqErCTv4,HandleDamageServer*UPDATED,BoblokDevelopyyyr,Lua,Saturday 7th of June 2025 02:21:32 PM CDT,"local RS = game:GetService(""ReplicatedStorage"")
local events = RS.Events
local dealDamageEvent = events.DealDamage
local module = require(game.ServerScriptService.Stats)
local dmg = 0

dealDamageEvent.OnServerEvent:Connect(function(player)
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass(""Humanoid"")
	local arm = character:FindFirstChild(""Right Arm"")::BasePart
	
	for _, child in ipairs(character:GetChildren()) do
		if child:IsA(""Tool"") then
			print(child.Name)
			print(module[child.Name])
			dmg = module[child.Name]
		end
	end

	local db = false
	task.spawn(function()
		task.wait(1)
		db = true
	end)
		arm.Touched:Once(function(hitObject)
		if not db then
				local hitHum = hitObject.Parent:FindFirstChildOfClass(""Humanoid"")
				if hitHum then
					hitHum:TakeDamage(dmg)
					db = true

				else
					db = true
				end
			end
		end)
end)"
JBSyuV4f,hop,Daeho,Lua,Saturday 7th of June 2025 02:15:35 PM CDT,"if not game:IsLoaded() then game.Loaded:Wait() end
loadstring(game:HttpGet(""https://raw.githubusercontent.com/uzu01/arise/refs/heads/main/global.lua""))()

_G.JxereasExistingHooks  = {GuiDetectionBypass  = true}

local notification = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua"", true))()
local replicated_storage = game:GetService(""ReplicatedStorage"")
local data_service = require(replicated_storage.Modules.DataService)
local garden

function send_webhook(url, text, ...)
    return request({
        Url = (""%*?wait=true""):format(url),
        Method = ""POST"",
        Headers = {[""Content-Type""] = ""application/json""},
        Body = game:GetService(""HttpService""):JSONEncode({embeds = {...}, content = text})
    })
end

task.wait(3)

for i, v in workspace.Farm:GetChildren() do
    if v.Important.Data.Owner.Value ~= player.Name then continue end
    garden = v
end

function get_egg(uid)
    for i, v in garden.Important.Objects_Physical:GetChildren() do
        if v.Name:match(""PetEgg"") and v:GetAttribute(""OBJECT_UUID"") == uid then
            return v
        end
    end
    return nil
end

local foundTargetPet = false

for i, v in data_service:GetData().SavedObjects do
    local data = v.Data
    local egg = data and data.EggName

    if not egg then continue end
    if not data.RandomPetData then continue end

    local petName = data.Type

    if not (getgenv().target_pets and table.find(getgenv().target_pets, petName)) then
        continue
    end

    foundTargetPet = true

    if getgenv().webhook_url then
        local pingUser = getgenv().pingUser or """"
        send_webhook(getgenv().webhook_url, pingUser .. "" Found pet: **"" .. petName .. ""** (Hatching now!)"", nil)
    end

    replicated_storage.GameEvents.PetEggService:FireServer(""HatchPet"", get_egg(i))
    task.wait(10)
    game:GetService(""TeleportService""):Teleport(game.PlaceId)
    break
end

if not foundTargetPet then
    game:GetService(""TeleportService""):Teleport(game.PlaceId)
end

queue_on_teleport('loadstring(game:HttpGet(""https://pastebin.com/raw/BE36f3z8""))()')"
8QsFQrVj,Base PRice,tepyotin2,C++,Saturday 7th of June 2025 01:26:44 PM CDT,"#include <bits/stdc++.h>

using namespace std;

struct DSU{
	vector<int> p;
	DSU(int n){
		p = vector<int>(n, -1);
	}
	int get(int x){
		if(p[x]<0) return x;
		return p[x] = get(p[x]);
	}
	bool same_set(int x, int y){
		return get(x) == get(y);
	}
	bool unite(int x, int y){
		x = get(x);
		y = get(y);
		if(x == y) return false;
		if(p[x]>p[y]) swap(x, y);
		p[x]+=p[y];
		p[y] = x;
		return true;
	}
};

struct Con{
	int a, b;
	int cost;
	bool operator<(const Con &v) const{
		return cost<v.cost;
	}
};

int n, m;
vector<Con> con;
int cost;

int main(){
	//freopen(""baseprice.in"", ""r"", stdin);
	
	cin >> n >> m;
	con.resize(m);
	for(int i=0; i<m; i++){
		cin >> con[i].a >> con[i].b >> con[i].cost;
	}
	sort(con.begin(), con.end());
	DSU dsu(n+1);
	for(int i=0; i<m; i++){
		if(!dsu.same_set(con[i].a, con[i].b)){
			dsu.unite(con[i].a, con[i].b);
			cost+=con[i].cost;
		}
	}
	cout << cost << '\n';
	
	return 0;
}
"
XvK3mmvC,Untitled,swaggboi,Bash,Saturday 7th of June 2025 01:21:56 PM CDT,"$ (cd $HOME/git/pomm/ && ./pomm.pl)
Could not complete request: 403 Forbidden at /usr/share/perl5/Mastodon/Role/UserAgent.pm line 147.
 at /usr/share/perl5/Mastodon/Role/UserAgent.pm line 173."
m0wwUvas,reformatted initialize_cloudy_data.c,mabruzzo,C,Saturday 7th of June 2025 01:14:31 PM CDT,"/***********************************************************************
/
/ Initialize Cloudy cooling data
/
/
/ Copyright (c) 2013, Enzo/Grackle Development Team.
/
/ Distributed under the terms of the Enzo Public Licence.
/
/ The full license is in the file LICENSE, distributed with this
/ software.
************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <math.h>
#include ""hdf5.h""
#include ""grackle.h""
#include ""grackle_macros.h""
#include ""grackle_types.h""
#include ""grackle_chemistry_data.h""

#define SMALL_LOG_VALUE -99.0

extern int grackle_verbose;

/**
 * Initializes an empty #cloudy_data struct with zeros and NULLs.
 */
void initialize_empty_cloudy_data_struct(cloudy_data* my_cloudy) {
  my_cloudy->grid_rank = 0LL;
  for (long long i = 0; i < GRACKLE_CLOUDY_TABLE_MAX_DIMENSION; i++) {
    my_cloudy->grid_dimension[i] = 0LL;
    my_cloudy->grid_parameters[i] = NULL;
  }
  my_cloudy->heating_data = NULL;
  my_cloudy->cooling_data = NULL;
  my_cloudy->mmw_data = NULL;
  my_cloudy->data_size = 0LL;
}

// Initialize Cloudy cooling data
int initialize_cloudy_data(chemistry_data* my_chemistry,
                           chemistry_data_storage* my_rates,
                           cloudy_data* my_cloudy, char* group_name,
                           code_units* my_units, int read_data) {
  long long q, w;
  double* temp_data;
  long long temp_int;
  long long* temp_int_arr;
  char parameter_name[MAX_LINE_LENGTH];

  // Initialize things (to the null-state) even if cloudy cooling is not used.
  initialize_empty_cloudy_data_struct(my_cloudy);

  if (read_data == 0) {
    return SUCCESS;
  }

  if (grackle_verbose) {
    fprintf(stdout, ""Initializing Cloudy cooling: %s.\n"", group_name);
    fprintf(stdout, ""cloudy_table_file: %s.\n"",
            my_chemistry->grackle_data_file);
  }

  /* Get conversion units. */

  double co_length_units, co_density_units;
  if (my_units->comoving_coordinates == TRUE) {
    co_length_units = my_units->length_units;
    co_density_units = my_units->density_units;
  } else {
    co_length_units =
        my_units->length_units * my_units->a_value * my_units->a_units;
    co_density_units =
        my_units->density_units / POW(my_units->a_value * my_units->a_units, 3);
  }

  double tbase1 = my_units->time_units;
  double xbase1 = co_length_units / (my_units->a_value * my_units->a_units);
  double dbase1 =
      co_density_units * POW(my_units->a_value * my_units->a_units, 3);
  double mh = 1.67e-24;
  double CoolUnit = (POW(my_units->a_units, 5) * POW(xbase1, 2) * POW(mh, 2)) /
                    (POW(tbase1, 3) * dbase1);

  // Read cooling data in from hdf5 file.
  hid_t file_id, dset_id, attr_id;
  herr_t status;
  herr_t h5_error = -1;

  file_id =
      H5Fopen(my_chemistry->grackle_data_file, H5F_ACC_RDONLY, H5P_DEFAULT);

  if (H5Aexists(file_id, ""old_style"")) {
    my_rates->cloudy_data_new = 0;
    if (grackle_verbose) fprintf(stdout, ""Loading old-style Cloudy tables.\n"");
  }

  // Open cooling dataset and get grid dimensions.

  sprintf(parameter_name, ""/CoolingRates/%s/Cooling"", group_name);
  dset_id = H5Dopen(file_id, parameter_name);
  if (dset_id == h5_error) {
    fprintf(stderr, ""Can't open Cooling in %s.\n"",
            my_chemistry->grackle_data_file);
    return FAIL;
  }

  // Grid rank.
  attr_id = H5Aopen_name(dset_id, ""Rank"");
  if (attr_id == h5_error) {
    fprintf(stderr, ""Failed to open Rank attribute in Cooling dataset.\n"");
    return FAIL;
  }
  status = H5Aread(attr_id, HDF5_I8, &temp_int);
  if (attr_id == h5_error) {
    fprintf(stderr, ""Failed to read Rank attribute in Cooling dataset.\n"");
    return FAIL;
  }
  my_cloudy->grid_rank = (long long)temp_int;
  if (grackle_verbose)
    fprintf(stdout, ""Cloudy cooling grid rank: %lld.\n"", my_cloudy->grid_rank);
  status = H5Aclose(attr_id);
  if (attr_id == h5_error) {
    fprintf(stderr, ""Failed to close Rank attribute in Cooling dataset.\n"");
    return FAIL;
  }

  // Grid dimension.
  temp_int_arr = malloc(my_cloudy->grid_rank * sizeof(long long));
  attr_id = H5Aopen_name(dset_id, ""Dimension"");
  if (attr_id == h5_error) {
    fprintf(stderr, ""Failed to open Dimension attribute in Cooling dataset.\n"");
    return FAIL;
  }
  status = H5Aread(attr_id, HDF5_I8, temp_int_arr);
  if (attr_id == h5_error) {
    fprintf(stderr, ""Failed to read Dimension attribute in Cooling dataset.\n"");
    return FAIL;
  }
  if (grackle_verbose) fprintf(stdout, ""Cloudy cooling grid dimensions:"");
  for (q = 0; q < my_cloudy->grid_rank; q++) {
    my_cloudy->grid_dimension[q] = (long long)temp_int_arr[q];
    if (grackle_verbose) fprintf(stdout, "" %lld"", my_cloudy->grid_dimension[q]);
  }
  if (grackle_verbose) fprintf(stdout, "".\n"");
  status = H5Aclose(attr_id);
  if (attr_id == h5_error) {
    fprintf(stderr,
            ""Failed to close Dimension attribute in Cooling dataset.\n"");
    return FAIL;
  }
  free(temp_int_arr);

  // Grid parameters.
  for (q = 0; q < my_cloudy->grid_rank; q++) {
    if (q < my_cloudy->grid_rank - 1) {
      sprintf(parameter_name, ""Parameter%lld"", (q + 1));
    } else {
      sprintf(parameter_name, ""Temperature"");
    }

    temp_data = malloc(my_cloudy->grid_dimension[q] * sizeof(double));

    attr_id = H5Aopen_name(dset_id, parameter_name);
    if (attr_id == h5_error) {
      fprintf(stderr, ""Failed to open %s attribute in Cooling dataset.\n"",
              parameter_name);
      return FAIL;
    }
    status = H5Aread(attr_id, HDF5_R8, temp_data);
    if (attr_id == h5_error) {
      fprintf(stderr, ""Failed to read %s attribute in Cooling dataset.\n"",
              parameter_name);
      return FAIL;
    }

    my_cloudy->grid_parameters[q] =
        malloc(my_cloudy->grid_dimension[q] * sizeof(double));
    for (w = 0; w < my_cloudy->grid_dimension[q]; w++) {
      if (q < my_cloudy->grid_rank - 1) {
        my_cloudy->grid_parameters[q][w] = (double)temp_data[w];
      } else {
        // convert temeperature to log
        my_cloudy->grid_parameters[q][w] = (double)log10(temp_data[w]);
      }
    }
    if (grackle_verbose)
      fprintf(stdout, ""%s: %"" GSYM "" to %"" GSYM "" (%lld steps).\n"",
              parameter_name, my_cloudy->grid_parameters[q][0],
              my_cloudy->grid_parameters[q][my_cloudy->grid_dimension[q] - 1],
              my_cloudy->grid_dimension[q]);
    status = H5Aclose(attr_id);
    if (attr_id == h5_error) {
      fprintf(stderr, ""Failed to close %s attribute in Cooling dataset.\n"",
              parameter_name);
      return FAIL;
    }
    free(temp_data);
  }

  // Read Cooling data.
  my_cloudy->data_size = 1;
  for (q = 0; q < my_cloudy->grid_rank; q++) {
    my_cloudy->data_size *= my_cloudy->grid_dimension[q];
  }
  temp_data = malloc(my_cloudy->data_size * sizeof(double));

  status = H5Dread(dset_id, HDF5_R8, H5S_ALL, H5S_ALL, H5P_DEFAULT, temp_data);
  if (grackle_verbose) fprintf(stdout, ""Reading Cloudy Cooling dataset.\n"");
  if (status == h5_error) {
    fprintf(stderr, ""Failed to read Cooling dataset.\n"");
    return FAIL;
  }

  my_cloudy->cooling_data = malloc(my_cloudy->data_size * sizeof(double));
  for (q = 0; q < my_cloudy->data_size; q++) {
    my_cloudy->cooling_data[q] = temp_data[q] > 0 ? (double)log10(temp_data[q])
                                                  : (double)SMALL_LOG_VALUE;

    // Convert to code units.
    my_cloudy->cooling_data[q] -= log10(CoolUnit);
  }
  free(temp_data);

  status = H5Dclose(dset_id);
  if (status == h5_error) {
    fprintf(stderr, ""Failed to close Cooling dataset.\n"");
    return FAIL;
  }

  // Read Heating data.
  if (my_chemistry->UVbackground == 1) {
    temp_data = malloc(my_cloudy->data_size * sizeof(double));

    sprintf(parameter_name, ""/CoolingRates/%s/Heating"", group_name);
    dset_id = H5Dopen(file_id, parameter_name);
    if (dset_id == h5_error) {
      fprintf(stderr, ""Can't open Heating in %s.\n"",
              my_chemistry->grackle_data_file);
      return FAIL;
    }

    status =
        H5Dread(dset_id, HDF5_R8, H5S_ALL, H5S_ALL, H5P_DEFAULT, temp_data);
    if (grackle_verbose) fprintf(stdout, ""Reading Cloudy Heating dataset.\n"");
    if (status == h5_error) {
      fprintf(stderr, ""Failed to read Heating dataset.\n"");
      return FAIL;
    }

    my_cloudy->heating_data = malloc(my_cloudy->data_size * sizeof(double));
    for (q = 0; q < my_cloudy->data_size; q++) {
      my_cloudy->heating_data[q] = temp_data[q] > 0
                                       ? (double)log10(temp_data[q])
                                       : (double)SMALL_LOG_VALUE;

      // Convert to code units.
      my_cloudy->heating_data[q] -= log10(CoolUnit);
    }
    free(temp_data);

    status = H5Dclose(dset_id);
    if (status == h5_error) {
      fprintf(stderr, ""Failed to close Heating dataset.\n"");
      return FAIL;
    }
  }

  // Read MMW data.
  if (my_chemistry->primordial_chemistry == 0 &&
      strcmp(group_name, ""Primordial"") == 0) {
    my_cloudy->mmw_data = malloc(my_cloudy->data_size * sizeof(double));

    sprintf(parameter_name, ""/CoolingRates/%s/MMW"", group_name);
    dset_id = H5Dopen(file_id, parameter_name);
    if (dset_id == h5_error) {
      fprintf(stderr, ""Can't open MMW in %s.\n"",
              my_chemistry->grackle_data_file);
      return FAIL;
    }

    status = H5Dread(dset_id, HDF5_R8, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     my_cloudy->mmw_data);
    if (grackle_verbose) fprintf(stdout, ""Reading Cloudy MMW dataset.\n"");
    if (status == h5_error) {
      fprintf(stderr, ""Failed to read MMW dataset.\n"");
      return FAIL;
    }

    status = H5Dclose(dset_id);
    if (status == h5_error) {
      fprintf(stderr, ""Failed to close MMW dataset.\n"");
      return FAIL;
    }
  }

  status = H5Fclose(file_id);

  if (my_cloudy->grid_rank > GRACKLE_CLOUDY_TABLE_MAX_DIMENSION) {
    fprintf(stderr,
            ""Error: rank of Cloudy cooling data must be less than or equal to ""
            ""%d.\n"",
            GRACKLE_CLOUDY_TABLE_MAX_DIMENSION);
    return FAIL;
  }

  return SUCCESS;
}

int _free_cloudy_data(cloudy_data* my_cloudy, chemistry_data* my_chemistry,
                      int primordial) {
  int i;

  for (i = 0; i < my_cloudy->grid_rank; i++) {
    GRACKLE_FREE(my_cloudy->grid_parameters[i]);
  }

  GRACKLE_FREE(my_cloudy->cooling_data);
  if (my_chemistry->UVbackground == 1) {
    GRACKLE_FREE(my_cloudy->heating_data);
  }
  if (my_chemistry->primordial_chemistry == 0 && primordial) {
    GRACKLE_FREE(my_cloudy->mmw_data);
  }
  return GR_SUCCESS;
}
"
fFfzaUmF,HandleDamageServer,BoblokDevelopyyyr,Lua,Saturday 7th of June 2025 01:09:56 PM CDT,"local RS = game:GetService(""ReplicatedStorage"")
local events = RS.Events
local dealDamageEvent = events.DealDamage
local module = require(game.ServerScriptService.Stats)
local dmg = 0

dealDamageEvent.OnServerEvent:Connect(function(player)
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass(""Humanoid"")
	local arm = character:FindFirstChild(""Right Arm"")::BasePart
	
	for _, child in ipairs(character:GetChildren()) do
		if child:IsA(""Tool"") then
			print(child.Name)
			print(module[child.Name])
			dmg = module[child.Name]
		end
	end

	local db = false

		arm.Touched:Connect(function(hitObject)
			if not db then
				local hitHum = hitObject.Parent:FindFirstChildOfClass(""Humanoid"")
				if hitHum then
					hitHum:TakeDamage(dmg)
					db = true

				else
					db = true
				end
			end
		end)
end)"
6Cd3FFGB,HandleSmackGivingServer,BoblokDevelopyyyr,Lua,Saturday 7th of June 2025 01:09:37 PM CDT,"local rs = game:GetService(""ReplicatedStorage"")
local hands = rs.Hands

game.Players.PlayerAdded:Connect(function(player)
	task.wait(5)

	local cloneBasic = hands.Normal:Clone()
	cloneBasic.Parent = player.Backpack
	print(cloneBasic.Parent)
end)

"
RUYKXuQy,ClientHandler,BoblokDevelopyyyr,Lua,Saturday 7th of June 2025 01:09:10 PM CDT,"local UIS = game:GetService(""UserInputService"")
local RS = game:GetService(""ReplicatedStorage"")
local events = RS.Events
local playAnimationEvent = events.PlayAnimation
local dealDamageEvent = events.DealDamage

local player = game.Players.LocalPlayer
local charater = player.Character or player.CharacterAdded:Wait()
local hand = charater:FindFirstChild(""Right Arm"")::BasePart

local db = false

local function onInput(input, gameProcessedEvent)
	if not gameProcessedEvent and not db then
		if input.KeyCode == Enum.KeyCode.E then
			
			task.spawn(function()
				db = true
				task.wait(3)
				db = false
			end)
			
			print(""Smacked!"")
			playAnimationEvent:FireServer()
			dealDamageEvent:FireServer()
		end
	end
end

UIS.InputBegan:Connect(onInput)"
uyJbhvUF,Stats,BoblokDevelopyyyr,Lua,Saturday 7th of June 2025 01:08:55 PM CDT,"local module = {
	Normal = 25,
	Big = 35,
	Fire = 10,
	Freeze = 10,
	Slowing = 10
}

return module
"
5AmXLs20,HandleAnimServer,BoblokDevelopyyyr,Lua,Saturday 7th of June 2025 01:08:36 PM CDT,"local RS = game:GetService(""ReplicatedStorage"")
local events = RS.Events
local playAnimationEvent = events.PlayAnimation
local anims = RS.Anims
local slapAnim = anims.Slap

playAnimationEvent.OnServerEvent:Connect(function(player)
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass(""Humanoid"")
	local animator = humanoid:FindFirstChildOfClass(""Animator"")
	
	local track = animator:LoadAnimation(slapAnim)
	track:Play()
end)"
hiY3Pfzt,WE,TableTopLive,PHP,Saturday 7th of June 2025 12:48:26 PM CDT,"The Bloody Blender (1990 points)

World Eaters
Strike Force (2000 points)
Khorne Daemonkin


CHARACTERS

Khârn the Betrayer (85 points)
• 1x Gorechild
1x Plasma pistol

Lord on Juggernaut (105 points)
• Warlord
• 1x Bladed horn
1x Exalted chainblade
1x Plasma pistol
• Enhancement: Disciple of Khorne

Skarbrand (305 points)
• 1x Bellow of endless fury
1x Slaughter and Carnage

Slaughterbound (115 points)
• 1x Lacerator and daemonic claw
• Enhancement: Blade of Endless Bloodshed


BATTLELINE

Bloodletters (90 points)
• 1x Bloodreaper
• 1x Hellblade
• 9x Bloodletter
• 1x Daemonic Icon
9x Hellblade
1x Instrument of Chaos

Bloodletters (90 points)
• 1x Bloodreaper
• 1x Hellblade
• 9x Bloodletter
• 1x Daemonic Icon
9x Hellblade
1x Instrument of Chaos

Bloodletters (90 points)
• 1x Bloodreaper
• 1x Hellblade
• 9x Bloodletter
• 1x Daemonic Icon
9x Hellblade
1x Instrument of Chaos


OTHER DATASHEETS

Bloodcrushers (220 points)
• 1x Bloodhunter
• 1x Hellblade
1x Juggernaut’s bladed horn
• 5x Bloodcrusher
• 1x Daemonic Icon
5x Hellblade
1x Instrument of Chaos
5x Juggernaut’s bladed horn

Chaos Spawn (80 points)
• 2x Chaos Spawn
• 2x Hideous mutations

Flesh Hounds (75 points)
• 1x Gore Hound
• 1x Burning roar
1x Collar of Khorne
1x Gore-drenched fangs
• 4x Flesh Hound
• 4x Collar of Khorne
4x Gore-drenched fangs

Flesh Hounds (75 points)
• 1x Gore Hound
• 1x Burning roar
1x Collar of Khorne
1x Gore-drenched fangs
• 4x Flesh Hound
• 4x Collar of Khorne
4x Gore-drenched fangs

Forgefiend (150 points)
• 3x Ectoplasma cannon
1x Forgefiend claws

Forgefiend (150 points)
• 3x Ectoplasma cannon
1x Forgefiend claws

Helbrute (120 points)
• 1x Close combat weapon
1x Heavy flamer
1x Helbrute fist
1x Helbrute hammer

Helbrute (120 points)
• 1x Close combat weapon
1x Heavy flamer
1x Helbrute fist
1x Helbrute hammer

Helbrute (120 points)
• 1x Close combat weapon
1x Heavy flamer
1x Helbrute fist
1x Helbrute hammer
"
C9EpTYHp,DG,TableTopLive,PHP,Saturday 7th of June 2025 12:48:11 PM CDT,"The Stank Tanks (2000 points)

Death Guard
Strike Force (2000 points)
Mortarion’s Hammer


CHARACTERS

Lord of Contagion (110 points)
• 1x Manreaper

Lord of Virulence (110 points)
• 1x Power fist
1x Twin plague spewer
• Enhancement: Tendrilous Emissions

Lord of Virulence (90 points)
• 1x Power fist
1x Twin plague spewer

Mortarion (380 points)
• Warlord
• 1x Lantern
1x Rotwind
1x Silence


OTHER DATASHEETS

Chaos Predator Destructor (145 points)
• 1x Armoured tracks
1x Combi-bolter
1x Havoc launcher
2x Lascannon
1x Predator autocannon

Deathshroud Terminators (140 points)
• 1x Deathshroud Champion
• 1x Icon of Despair (Aura)
1x Manreaper
2x Plaguespurt gauntlet
• 2x Deathshroud Terminator
• 2x Manreaper
2x Plaguespurt gauntlet

Deathshroud Terminators (140 points)
• 1x Deathshroud Champion
• 1x Icon of Despair (Aura)
1x Manreaper
2x Plaguespurt gauntlet
• 2x Deathshroud Terminator
• 2x Manreaper
2x Plaguespurt gauntlet

Foetid Bloat-Drone with Heavy Blight Launcher (100 points)
• 1x Heavy blight launcher
1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 points)
• 1x Heavy blight launcher
1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 points)
• 1x Heavy blight launcher
1x Plague probe

Plagueburst Crawler (195 points)
• 1x Armoured tracks
2x Entropy cannon
1x Heavy slugger
1x Plagueburst mortar

Plagueburst Crawler (195 points)
• 1x Armoured tracks
2x Entropy cannon
1x Heavy slugger
1x Plagueburst mortar

Plagueburst Crawler (195 points)
• 1x Armoured tracks
2x Entropy cannon
1x Heavy slugger
1x Plagueburst mortar"
D162zX2r,Kruskal,tepyotin2,C++,Saturday 7th of June 2025 12:43:07 PM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct DSU{
	vector<int> parent;
	DSU(int n){
		parent = vector<int>(n, -1);
	}
	int get(int x){
		if(parent[x]<0){
			return x;
		}else{
			return parent[x] = get(parent[x]);
		}
	}
	bool same_set(int a, int b){
		return get(a) == get(b);
	};
	bool unite(int x, int y){
		x = get(x);
		y = get(y);
		if(same_set(x, y)) return false;
		if(parent[x]>parent[y]){
			swap(x, y);
		}
		parent[x]+=parent[y];
		parent[y] = x;
		return true;
	}
};

struct Path{
	int a, b;
	ll weight;
	bool operator<(const Path &v) const{
		return weight<v.weight;
	}
};

int n, m;
vector<Path> paths;
ll mst;

int main(){
	//freopen(""kruskal.in"", ""r"", stdin);
	
	cin >> n >> m;
	paths.resize(m);
	for(int i=0; i<m; i++){
		cin >> paths[i].a >> paths[i].b >> paths[i].weight;
	}
	sort(paths.begin(), paths.end());
	DSU dsu(n+1);
	for(int i=0; i<m; i++){
		if(!dsu.same_set(paths[i].a, paths[i].b)){
			dsu.unite(paths[i].a, paths[i].b);
			mst+=paths[i].weight;
		}
	}
	cout << mst << '\n';
	
	return 0;
}

"
5FvaVPuH,first c code,fvuar,C,Saturday 7th of June 2025 12:42:57 PM CDT,"/* 
==========================
2025/06/07

My first c codes
==========================
 */

#include <stdio.h>

int main(void)
{
	printf(""Hello, dear reader!\n"");
}"
T5sAyQGk,Untitled,visiko,Lua,Saturday 7th of June 2025 11:45:24 AM CDT,"function claim_books ()
  local dumped = 0
  local dump_forbidden = 0
  local dump_foreign = 0
  local dump_trader = 0
  local melt = 0
  local trader_ground = 0
  for i, item in ipairs (df.global.world.items.all) do
    if item.flags.dump then
      dumped = dumped + 1
     
      if item.flags.forbid then
        dump_forbidden = dump_forbidden + 1
      end
     
      if item.flags.foreign then
        dump_foreign = dump_foreign + 1
      end
     
      if item.flags.trader then
        dump_trader = dump_trader + 1
      end
    end
   
    if item.flags.melt then
      melt = melt + 1
    end
   
    if item.flags.on_ground and
       item.flags.trader then
      trader_ground = trader_ground + 1
      if item.subtype.id == ""ITEM_TOOL_SCROLL"" then
        item.flags.trader = false
        dfhack.println (""Claiming scroll"")
     
      else
        printall (item.subtype)
      end
    end
  end
 
  dfhack.println (""Dump designated: "" .. tostring (dumped), ""Foreign: "" .. tostring (dump_foreign), ""Trader: "" .. tostring (dump_trader))
  dfhack.println (""Melt designated: "" .. tostring (melt))
  dfhack.println (""Trader items on the ground: "" .. tostring (trader_ground))
end

claim_books ()"
gb4gPAjf,FileManagerPlus,Awokawok123,HTML,Saturday 7th of June 2025 11:40:28 AM CDT,"<head>
<meta name=""update_title"" content=""Update Tersedia!!!""/>
<meta name=""update_description"" content=""<p>Versi terbaru 3.6.0 telah tersedia dalam blogger...</p><p><b>Yang Baru:</b><br>• Tidak ada penjelasan khusus dari developer, jadi silakan update saja jika memang perlu...</p>""/>
<meta name=""update_light_color"" content=""#FFFFFF""/>
<meta name=""update_dark_color"" content=""#000000""/>
<meta name=""update_url"" content=""https://modded-by-yadi.blogspot.com/2023/06/FileManagerPlus.html""/>
<meta name=""update_show_skip"" content=""true""/>
<meta name=""update_force"" content=""false""/>
<meta name=""update_version"" content=""3.6.0""/>
<meta name=""update_skip_text"" content=""Lewati update ini""/>
<meta name=""update_cancel_text"" content=""NANTI""/>
<meta name=""update_update_text"" content=""UPDATE""/>
<meta name=""update_checkbox_color_light"" content=""#212121""/>
<meta name=""update_checkbox_color_dark"" content=""#FFFFFF""/>
<meta name=""update_button_text_color_light"" content=""#000000""/>
<meta name=""update_button_text_color_dark"" content=""#FFFFFF""/>
<meta name=""update_title_text_color_light"" content=""#212121""/>
<meta name=""update_title_text_color_dark"" content=""#FFFFFF""/>
<meta name=""update_desc_text_color_light"" content=""#424242""/>
<meta name=""update_desc_text_color_dark"" content=""#EEEEEE""/>
</head>"
