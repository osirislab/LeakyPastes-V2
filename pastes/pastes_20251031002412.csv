id,title,username,language,date,content
DBn0Hdnz,üí° EASY MONEY GUIDE ‚úÖ Working,NotAspectt,JavaScript,Thursday 30th of October 2025 07:22:43 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: sUsqnkoZAIhpsGWFFUarQIJNKAgGsdYmhpCpzaFMkqcR"
9bQw7XgC,‚≠êEASY PROFIT METHOD üíµüíµ,wqioioioieSD,JavaScript,Thursday 30th of October 2025 07:19:52 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: lwlaty53fr7ya178jvz9w2h4xhnxtughp9n3b9avo6qnv75qff
"
4XC4g6Tz,üö® Free Crypto Method üö®,NotAspectt,JavaScript,Thursday 30th of October 2025 07:16:01 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: pwXpHkyYLuHRSFzWceDtQXRhXNRdGTBQxiqVuYDWlPgq"
tsSkVh3y,üöÄ Swapzone +37% profit glitch,NotAspectt,JavaScript,Thursday 30th of October 2025 07:09:20 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: kScGcFazxDMhdXgmFOMDKqJtZGpOlYhAAoUJGJijdvGN"
Ug8aSdA2,‚úÖEASY PROFIT METHOD üî•üíµ,wqioioioieSD,JavaScript,Thursday 30th of October 2025 07:08:50 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: bre9wp5fbd9pjnylzxkfhl2o8b7pytw8bqw7cyfvxc1nmm18xa
"
n4x4PM53,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö°,NotAspectt,JavaScript,Thursday 30th of October 2025 07:02:39 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: LnlmcXGfgYBTFxBTfezwOcrRhIJRvCfRHsFzlueNuhWG"
19mnNFSf,‚úÖ EASY PROFIT METHOD üìùüö®,wqioioioieSD,JavaScript,Thursday 30th of October 2025 06:57:47 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: b2konazhunnmbnb4bykgbxh156u7jnbmcjqv7dmx15zx29o3gm
"
0PTVC6t4,üî• Exchange profit method,NotAspectt,JavaScript,Thursday 30th of October 2025 06:55:58 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: gWsRwtQUPPjbjMMDqshzkFdxkQOnDxXPesvOeUvxdset"
zD9whe19,üíµ Make 3000$ in 20 minutes üíµ,library023,JavaScript,Thursday 30th of October 2025 06:49:14 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: ArBwPFxWiwthcVTAKtvzWBHplRYYLaXaJRafSJZSZXkE"
t2yaDb2H,‚ö° EASY PROFIT METHOD ‚úÖüî•,wqioioioieSD,JavaScript,Thursday 30th of October 2025 06:46:39 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 77m1untu1nzgk1j8bnbb24a5q2rbk6a7rxcrue9fzfusz24nbc
"
z9YCz5bF,üöÄ Swapzone +37% profit glitch,library023,JavaScript,Thursday 30th of October 2025 06:42:33 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: WJBFnavDHrunQQRzxhmdquqTYnkvQSOBQgULNQIQrROC"
J5JJs7ah,üö® Free Crypto Method üö®,library023,JavaScript,Thursday 30th of October 2025 06:35:51 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: ZdGseDybpKaeNkXVvFJJfVhTtbhEXkEECDxomroEGrXq"
4A85FTNJ,üíé EASY PROFIT METHOD üíµüìù,wqioioioieSD,JavaScript,Thursday 30th of October 2025 06:35:33 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 2mfp7d46oblaeycf1onv2uhrwjtfddn57xz9b11um459oyuxq7
"
LAyh6pVc,üí° EASY MONEY GUIDE ‚úÖ Working,library023,JavaScript,Thursday 30th of October 2025 06:29:09 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: dkAvaPoNtrAwYmYfUMEidXSvvnTTMfqnhODoqnETLNiE"
B3BsFKZd,üí° EASY PROFIT METHOD üìùüö®,wqioioioieSD,JavaScript,Thursday 30th of October 2025 06:24:30 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 5d7s5cbrc0whdn8c9g4x95slkdfmq65xew9ru6nt4zp7b29ld2
"
PdT0VpED,L09_TODO_01,tomlee9876,JavaScript,Thursday 30th of October 2025 05:56:27 PM CDT,"<td className=""border px-3 py-1"">
  <div style={{ width: 128, height: 128 }}>
    <QRCodeCanvas value={block.token} size={128} />
  </div>
</td>

<td className=""border px-3 py-1"">
  {block.previousHash}
</td>"
1v2m29Pr,L08_TODO_06,tomlee9876,JavaScript,Thursday 30th of October 2025 05:38:36 PM CDT,"{nodes.length > 0 ? (
  <ForceGraph2D
    ref={fgRef}
    graphData={{ nodes, links }}
    nodeLabel=""label""
    nodeAutoColorBy=""wineName""
    nodeCanvasObject={paintNode}
    enableZoom={false}
    enablePan={false}
    enableNodeDrag={false}
    cooldownTicks={0}
  />
) : (
  <p className=""text-gray-500"">No blocks to display.</p>
)}
"
D6ccaub7,L08_TODO_05,tomlee9876,JavaScript,Thursday 30th of October 2025 05:34:50 PM CDT,"<td className=""border px-3 py-1"">{idx + 1}</td>‚Äã
<td className=""border px-3 py-1"">{block.timestamp}</td>‚Äã
<td className=""border px-3 py-1"">{block.data.role}</td>‚Äã
<td className=""border px-3 py-1"">{block.data.status}</td>‚Äã
<td className=""border px-3 py-1"">{block.data.brand}</td>‚Äã
<td className=""border px-3 py-1"">‚Äã
    {block.data.vineyard}‚Äã
</td>‚Äã

<td className=""border px-3 py-1"">‚Äã
    {block.data.productionDate}‚Äã
</td>‚Äã

<td className=""border px-3 py-1 break-all text-xs"">‚Äã
   {block.token}‚Äã
</td>‚Äã

"
kTN4G6gd,L08_TODO_04,tomlee9876,JavaScript,Thursday 30th of October 2025 05:31:30 PM CDT,"<tbody>
  {w.blocks.map((block, idx) => (
    <tr
      key={block.index}
      className=""odd:bg-white even:bg-gray-50""
    >
    </tr>
  ))}
</tbody>
"
4hJiudWx,L08_TODO_03,tomlee9876,JavaScript,Thursday 30th of October 2025 05:28:05 PM CDT,"<thead className=""bg-gray-100"">
  <tr>
    <th className=""border px-3 py-1"">#</th>
    <th className=""border px-3 py-1"">Timestamp</th>
    <th className=""border px-3 py-1"">Role</th>
    <th className=""border px-3 py-1"">Status</th>
    <th className=""border px-3 py-1"">Brand</th>
    <th className=""border px-3 py-1"">Vineyard</th>
    <th className=""border px-3 py-1"">Production Date</th>
    <th className=""border px-3 py-1"">JWT (token)</th>
    <th className=""border px-3 py-1"">QR</th>
    <th className=""border px-3 py-1"">Previous Hash</th>
  </tr>
</thead>
"
bjb3Z0hq,L08_TODO_02,tomlee9876,JavaScript,Thursday 30th of October 2025 05:24:38 PM CDT,"<h3 className=""font-semibold mb-2"">
  {w.wine} ({w.batch})
</h3>

<table className=""min-w-full border-collapse border border-gray-400 text-left text-sm"">
</table>
"
EpjJ5SPT,L08_TODO_01,tomlee9876,JavaScript,Thursday 30th of October 2025 05:21:59 PM CDT,"{wines.map((w) => (‚Äã
	 <div key={w.id} className=""mb-6""></div>‚Äã
))}"
2VKcdMYd,Work At A Pizza Place: Claim Corn Maze Chests,darraghd493,Lua,Thursday 30th of October 2025 04:53:49 PM CDT,"--[[
    Work At A Pizza Place: Claim Corn Maze Chests
    by darraghd493
]]

repeat task.wait() until game:IsLoaded()

local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Workspace = game:GetService(""Workspace"")
local StarterGui = game:GetService(""StarterGui"")

local Network = require(ReplicatedStorage:WaitForChild(""LibraryFolder""):WaitForChild(""Network""))
local Chests = Workspace:WaitForChild(""CornMaze""):WaitForChild(""Chests"")

local count = 0
for _, chestObj in pairs(Chests:GetChildren()) do
    if chestObj:FindFirstChild(""Index"") then
        if not chestObj:FindFirstChild(""Particle"") or not chestObj.Particle:FindFirstChild(""Sparkle"") or not chestObj.Particle.Sparkle.Enabled then
            continue
        end
        print(""Claimed chest:"", chestObj.Name, chestObj.Index.Value)
        Network:FireServer(""ChestOpened"", chestObj.Index.Value)
        count = count + 1
    end
end

StarterGui:SetCore(""SendNotification"", {
    Title = ""Script"",
    Text = ""Claimed ""..count..""/"" .. #Chests:GetChildren() .. "" corn maze chests."",
    Duration = 5
})
"
YW9QvvEm,Como comparar duas strings em C,jacknpoe,C,Thursday 30th of October 2025 04:37:37 PM CDT,"#include <stdio.h>	 // printf/fgets
#define TAM 200

int comparapchar( char* string1, char* string2) {
	long iterador = 0;
	
    while(1) {
        if(string1[iterador] < string2[iterador]) return -1;
          // um caracter da string1 √© menor
        if(string1[iterador] > string2[iterador]) return 1;
          // um caracter da string2 √© menor
        if(string1[iterador] == 0 && string2[iterador] == 0) return 0;
          // se chegou ao fim das duas, s√£o iguais
        iterador++;
    }
}

int main() {
	char buffer1[TAM+1], buffer2[TAM+1];
    int resultado;
	
	printf(""String 1: "");
	fgets(buffer1, TAM, stdin);

	printf(""String 2: "");
	fgets(buffer2, TAM, stdin);

	resultado = comparapchar(buffer1, buffer2);

    if(resultado < 0) printf(""A primeira string √© menor.\n"");
    if(resultado > 0) printf(""A segunda string √© menor.\n"");
    if(resultado == 0) printf(""As duas strings s√£o iguais.\n"");
}
"
gq2Ngypv,AEWarehouse,Agentx49,Lua,Thursday 30th of October 2025 04:30:49 PM CDT,"-- RSWarehouse.lua
-- Orignal Author: Chuck Burgess
-- updated by: Mathew Biltonen
-- Updated: 2025-10-30

local logFile = ""AEWarehouse.log""
local time_between_runs = 30

-- Initialize Monitor
-- see: https://www.computercraft.info/wiki/Advanced_Monitor
local monitor = peripheral.find(""monitor"")
if not monitor then error(""Monitor not found."") end
monitor.setTextScale(0.5)
monitor.clear()
monitor.setCursorPos(1, 1)
monitor.setCursorBlink(false)
print(""Monitor initialized."")
 
-- Initialize RS Bridge
-- see: https://advancedperipherals.madefor.cc/peripherals/rs_bridge/
local bridge = peripheral.find(""ae_bridge"")
if not bridge then error(""AE Bridge not found."") end
print(""RS Bridge initialized."")

-- Initialize Colony Integrator
-- see: https://docs.advanced-peripherals.de/peripherals/colony_integrator/
local colony = peripheral.find(""colony_integrator"")
if not colony then error(""Colony Integrator not found."") end
if not colony.isInColony then error(""Colony Integrator is not in a colony."") end
print(""Colony Integrator initialized."")
 
-- Establish the direction to transport the items into the Warehouse based on
-- where the entnglement block is sitting. Default to empty string.
local storage = peripheral.find(""entangled:tile"")
if not storage then error(""Warehouse storage not found."") end
local direction = """"
local names = peripheral.getNames()
for _, pos in ipairs(names) do
  if peripheral.getType(pos) == ""entangled:tile"" then
    direction = pos
    end
end
print(""Warehouse storage initialized."")

----------------------------------------------------------------------------
-- FUNCTIONS
----------------------------------------------------------------------------
--[[
  Table.Empty
  @desc     check to see if a table contains any data
  @return   boolean
]]
function table.empty (self)
    for _, _ in pairs(self) do
        return false
    end
    return true
end

--[[
    Write To Log
    @desc   Write the specified `table` to the file surrounded by the `blockTop` and `blockBottom`
    @return void
]]
function writeToLog(data, blockTop, blockBottom)
  file.write(""\n"")
  file.write(blockTop)
  file.write(""\n"")
  file.write(textutils.serialize(data, { allow_repetitions = true }))
  file.write(""\n"")
  file.write(blockBottom)
  file.write(""\n"")
end

--[[
    Process Work Request Item
    @desc Determine if this item can be delivered to the warehouse from the storage
    @return boolean
]]
function processWorkRequestItem(request)
  if string.find(request.desc, ""Tool of class"") then return false end
  if string.find(request.name, ""Hoe"") then return false end
  if string.find(request.name, ""Shovel"") then return false end
  if string.find(request.name, ""Axe"") then return false end
  if string.find(request.name, ""Pickaxe"") then return false end
  if string.find(request.name, ""Bow"") then return false end
  if string.find(request.name, ""Sword"") then return false end
  if string.find(request.name, ""Shield"") then return false end
  if string.find(request.name, ""Helmet"") then return false end
  if string.find(request.name, ""Leather Cap"") then return false end
  if string.find(request.name, ""Chestplate"") then return false end
  if string.find(request.name, ""Tunic"") then return false end
  if string.find(request.name, ""Pants"") then return false end
  if string.find(request.name, ""Leggings"") then return false end
  if string.find(request.name, ""Boots"") then return false end
  if request.name == ""Rallying Banner"" then return false end --bugged in alpha versions
  if request.name == ""Crafter"" then return false end
  if request.name == ""Compostable"" then return false end
  if request.name == ""Fertilizer"" then return false end
  if request.name == ""Flowers"" then return false end
  if request.name == ""Food"" then return false end
  if request.name == ""Fuel"" then return false end
  if request.name == ""Smeltable Ore"" then return false end
  if request.name == ""Stack List"" then return false end
  -- you can add any new items here if they are found
  return true
end

--[[
    Monitor Print Row Justified
    @desc   Print a line of data to the in-game monitor
    @return void
]]
function mPrintRowJustified(mon, y, pos, text, textcolor)
    w, h = mon.getSize()
    fg = colors.white
    bg = colors.black
 
    if pos == ""left"" then x = 1 end
    if pos == ""center"" then x = math.floor((w - #text) / 2) end
    if pos == ""right"" then x = w - #text end
  
    mon.setTextColor(textcolor)
    mon.setCursorPos(x, y)
    mon.write(text)
    mon.setTextColor(fg)
    mon.setBackgroundColor(bg)
end
 
--[[
    Display Timer
    @desc   Update the time on the monitor
    @return void
]]
function displayTimer(mon, t)
    now = os.time()
    cycle = ""day""
    cycle_color = colors.orange
    if now >= 4 and now < 6 then
        cycle = ""sunrise""
        cycle_color = colors.yellow
    elseif now >= 6 and now < 18 then
        cycle = ""day""
        cycle_color = colors.lightBlue
    elseif now >= 18 and now < 19.5 then
        cycle = ""sunset""
        cycle_color = colors.magenta
    elseif now >= 19.5 or now < 5 then
        cycle = ""night""
        cycle_color = colors.red
    end
 
    timer_color = colors.green
    if t < 15 then timer_color = colors.yellow end
    if t < 5 then timer_color = colors.orange end
 
    mPrintRowJustified(mon, 1, ""left"", string.format(""Time: %s [%s]    "", textutils.formatTime(now, false), cycle), cycle_color)
    if cycle ~= ""night"" then 
      mPrintRowJustified(mon, 1, ""right"", string.format(""    Remaining: %ss"", t), timer_color)
    else 
      mPrintRowJustified(mon, 1, ""right"", ""    Remaining: PAUSED"", colors.red)
    end
end

--[[
    Create Colonist Data
    @desc   Build a table of Colonist making the request
    @return table
]]
function createColonistData(colonist)
  title_words = {}
  words_in_name = 0
  colonist_job = """"
  word_count = 1
  
  for word in colonist:gmatch(""%S+"") do
    table.insert(title_words, word)
    words_in_name = words_in_name + 1
  end

  if words_in_name >= 3 then colonist_name = title_words[words_in_name-2] .. "" "" .. title_words[words_in_name]
  else colonist_name = colonist end

  repeat
    if colonist_job ~= """" then colonist_job = colonist_job .. "" "" end
    colonist_job = colonist_job .. title_words[word_count]
    word_count = word_count + 1
  until word_count > words_in_name - 3
  
  return  { fullName = colonist, titleWords = title_words, job = colonist_job, name = colonist_name, wordsInName = words_in_name }
end

--[[
    Get Work Request List (from colony)
    @desc   Build a table of the work request data from the colony
    @return table
]]
function getWorkRequestList(colony)
    requestList = {}
    workRequests = colony.getRequests()
    file = fs.open(logFile, ""w"")
    
    for w in pairs(workRequests) do
        writeToLog(workRequests[w], ""--- Request start ---"", ""--- Request end ---"");
        name = workRequests[w].name -- the name of the count/item being requested
        colonist = createColonistData(workRequests[w].target)
        desc = workRequests[w].desc -- the request description
        item = {}
        -- create the filter item for the transfer request through the bridge
        if workRequests[w].items and workRequests[w].items[1] then
          if not workRequests[w].items[1].nbt or table.empty(workRequests[w].items[1].nbt) then
            item = { name = workRequests[w].items[1].name, count =  workRequests[w].count, displayName = workRequests[w].items[1].displayName}
          else
            item = { name = workRequests[w].items[1].name, count = workRequests[w].count, displayName = workRequests[w].items[1].displayName, nbt =  workRequests[w].items[1].nbt}
          end
        end
        -- how many items are needed to fulfill this request?
        needed = workRequests[w].count

        local newRecord = {}
        newRecord.name = name
        newRecord.desc = desc
        newRecord.needed = needed
        newRecord.item = item
        newRecord.colonist = colonist
        table.insert(requestList, newRecord)
        writeToLog(newRecord, ""--- Record start ---"", ""--- Record end ---"");
      end
      file.close()
  return requestList
end

--[[
    Display List
    @desc   Update the monitor with the work request items currently in the system
    @return void
]]
function displayList(mon, listName, itemList)
  -- show the list header first
  mPrintRowJustified(mon, row, ""center"", listName, colors.white)
  row = row + 1
  for e in pairs(itemList) do
      record = itemList[e]
      text = string.format(""%d %s"", record.provided , record.name)
      mPrintRowJustified(mon, row, ""left"", text, record.color)
      mPrintRowJustified(mon, row, ""right"", "" "" .. record.colonist, record.color)
      row = row + 1
  end
  -- add a space at the end of the list
  row = row + 1
end

-- Color References:
-- RED:     work order can't be satisfied by Refined Storage (lack of pattern or lack of
--            required crafting ingredients).
-- YELLOW:  order partially filled and a crafting job was scheduled for the rest.
-- GREEN:   order fully filled.
-- BLUE:    the Player needs to manually fill the work order. This includes some equipment as well as generic requests ike Compostables, Fuel, Food, Flowers, etc.
--[[
    Scan Work Requests
    @desc   Manages all of the open work requests in the system and attempts to fulfill them from the inventory
    @desc   Not called at night (as determined by the server) since requests cannot be fulfilled anyway
    @return void
]]
function scanWorkRequests(mon, bridge, direction)
    
    print(""\nScan starting at"", textutils.formatTime(os.time(), false) .. "" ("" .. os.time() .."")."")
    builder_list = {}
    nonbuilder_list = {}
    equipment_list = {}
    requestList = getWorkRequestList(colony)
    
    for j, data in ipairs(requestList) do
        color = colors.blue
        provided = 0

        if processWorkRequestItem(data) then
            provided = bridge.exportItem(data.item, direction)
            color = colors.lightGray
            if provided >= data.needed then
              color = colors.green
            end
            -- only handle the Non-NBT data items or empty nbt table item records
            if provided < data.needed then
                if bridge.isCrafting(data.item) then
                    color = colors.yellow
                    print(""[Crafting]"", data.name)
                else
                    if bridge.craftItem(data.item) then
                      color = colors.yellow
                      print(""[Scheduled]"", data.item.count, ""x"", data.name)
                    else
                      color = colors.red
                      print(""[Failed]"", data.name)
                    end
                end
            end
        else 
           nameString = data.name .. "" ["" .. data.colonist.fullName .. ""]""
           print(""[Skipped]"", nameString)
        end
        -- ---------------------------------------------------------------------
        -- Build the newList data
        -- ---------------------------------------------------------------------
        -- create the target text
        expectedList = ""Builder""
        colonist = data.colonist.name
        if not string.find(data.colonist.fullName, ""Builder"") then
            expectedList = """"
            colonist = data.colonist.job .. "" "" .. data.colonist.name
            if data.colonist.wordsInName < 3 then
                colonist = data.colonist.name
            end
        end
          
        -- create the name
        listName = data.name
        if string.find(data.desc, ""level"") then
            expectedList = ""Equipment""
            level = ""Any Level""
            if string.find(data.desc, ""with maximal level: Leather"") then level = ""Leather"" end
            if string.find(data.desc, ""with maximal level: Gold"") then level = ""Gold"" end
            if string.find(data.desc, ""with maximal level: Chain"") then level = ""Chain"" end
            if string.find(data.desc, ""with maximal level: Wood or Gold"") then level = ""Wood or Gold"" end
            if string.find(data.desc, ""with maximal level: Stone"") then level = ""Stone"" end
            if string.find(data.desc, ""with maximal level: Iron"") then level = ""Iron"" end
            if string.find(data.desc, ""with maximal level: Diamond"") then level = ""Diamond"" end
            listName = level .. "" "" .. data.name
            if level == ""Any Level"" then listName = data.name .. "" of any level"" end
        end
          
        -- create the new list table defining what is inserted into a specific list
        newList = { name=listName, colonist=colonist, needed=data.needed, provided=provided, color=color}
        
        if expectedList == ""Equipment"" then
            table.insert(equipment_list, newList)
        elseif expectedList == ""Builder"" then
            table.insert(builder_list, newList)
        else
            table.insert(nonbuilder_list, newList)
        end
        -- ---------------------------------------------------------------------
    end

  -- Show the various lists on the attached monitor.
  mon.clear()
  row = 3
  if not table.empty(builder_list) then displayList(mon, ""Builder Requests"", builder_list) end
  if not table.empty(nonbuilder_list) then displayList(mon, ""Nonbuilder Requests"", nonbuilder_list) end
  if not table.empty(equipment_list) then displayList(mon, ""Equipment"", equipment_list) end

  -- no requests
  if row == 3 then 
    mPrintRowJustified(mon, row, ""center"", ""No Open Requests"", colors.white)
  end
  print(""Scan completed at"", textutils.formatTime(os.time(), false) .. "" ("" .. os.time() .."")."") 
end


--[[
    MAIN
    @desc   establish the run times and execute the work request management
    @return void
]]
local current_run = time_between_runs
scanWorkRequests(monitor, bridge, direction)
displayTimer(monitor, current_run)
local TIMER = os.startTimer(1)

while true do
  local e = {os.pullEvent()}
  if e[1] == ""timer"" and e[2] == TIMER then
    now = os.time()
    if now >= 5 and now < 19.5 then
      current_run = current_run - 1
      if current_run <= 0 then
        scanWorkRequests(monitor, bridge, direction)
        current_run = time_between_runs
      end
    end
    displayTimer(monitor, current_run)
    TIMER = os.startTimer(1)
  elseif e[1] == ""monitor_touch"" then
    os.cancelTimer(TIMER)
    scanWorkRequests(monitor, bridge, direction)
    current_run = time_between_runs
    displayTimer(monitor, current_run)
    TIMER = os.startTimer(1)
  end
end
"
vQP1dEKE,Untitled,Goriec,HTML,Thursday 30th of October 2025 04:23:09 PM CDT,"</color></b></size> <align=center><size=70><b><color=#760FB4>Poligon</color></b></size>
<size=16><align=center><color=#ffffff>___________________________________________________</color></align></size>
 
<align=center><size=13><link=""https://discord.gg/Nqf5dwpwEX""><mark=#3374ff>|üéÆ|</mark><color=#B81A1A> DISCORD </mark></link><link=""https://docs.google.com/document/d/1AqPkNI8Iix7SwAUndPqnGQc1zdQZD7KjDekYd1R0elo/edit?usp=sharing""><mark=#ffaa33>|üìô|</mark><color=#B81A1A> REGULAMIN </mark></link></color>
 
<size=20><align=center><color=#ffffff>___________________________________________________</color></align></size>
 
<size=16><b>Czym Siƒô Wyr√≥≈ºniamy?<mark=#ff814220><color=yellow> Jeste≈õmy Otwarci na pro≈õby graczy, mamy zaautomatyzowane RP, Przymykamy oko na jakie≈õ ma≈Çe przewinienia, Mamy niskie ceny rang premium, autorskie mapy i wiele ciekawych rzeczy.</mark></b></color>
 
<size=16><b>Jeste≈õ Dobry W Odgrywaniu RP?<mark=#ff814220><color=yellow> Zdaj ju≈º dzi≈õ rekrutacje na zweryfikowanego i ciesz siƒô z benefit√≥w i specjalnej rangi na serwerze. Nic ciƒô to nie kosztuje, je≈ºeli nie zdasz to drugi raz te≈º mo≈ºesz podej≈õƒá</mark></b></color>
 
<size=16><b>Chcesz Nas Wesprzec?<mark=#ff814220><color=yellow> Kup Rangƒô Premium I Ciesz siƒô z nowo≈õci na serwerze oraz ciekawych benefit√≥w m.in. Custom Classy, Wyr√≥≈∫niajƒÖcƒÖ Rangƒô, Zarezerwowany slot i wiele wiƒôcej. Napisz ticketa lub do w≈Ça≈õciciela</mark></b></color>
 
<size=16><align=center><color=#ffffff>____________________________________________________</color></align></size>
<size=25><align=center><color=red>Administracja: </color>
 
<b><size=15><color=red>‚Ä¢CEIIROOG - Wla≈õciciel </color></b>
<b><size=15><color=red>‚Ä¢Kaczka - ZarzƒÖd </color></b>
<b><size=15><color=yellow>‚Ä¢(NIE)fajny - Technik </color></b>
<b><size=15><color=yellow>‚Ä¢drajwer - Technik </color></b>
 
<size=25><align=center><color=#9A1560>Kontakt Mailowy: </color>
<b><size=15><color=red>t48970990@gmail.com </color></b>
 
<size=16><align=center><color=#ffffff>____________________________________________________</color></align></size>"
QkBdpRa4,FakeProxy_by_ITGroceries.vbs,LaDEEKill3R,VBScript,Thursday 30th of October 2025 03:08:48 PM CDT,"Option Explicit
Dim valUserIn
Dim objShell, RegLocate, RegLocate1
Set objShell = WScript.CreateObject(""WScript.Shell"")
On Error Resume Next
valUserIn = MsgBox(""Use A Cloaked Proxy?"",4,""Cloaked Select | Powered by ITGroceries"")
If valUserIn=vbYes Then
RegLocate = ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer""
objShell.RegWrite RegLocate,""http://www.ITGroceries.Blogspot.com:80"",""REG_SZ""
RegLocate = ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyEnable""
objShell.RegWrite RegLocate,""1"",""REG_DWORD""
MsgBox ""Cloaked Proxy by ITGroceries is Enabled""
else
RegLocate = ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer""
objShell.RegWrite RegLocate,""0.0.0.0:80"",""REG_SZ""
RegLocate = ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyEnable""
objShell.RegWrite RegLocate,""0"",""REG_DWORD""
MsgBox ""Cloaked Proxy by ITGroceries is Disabled""
End If
WScript.Quit"
bqg579Qi,Reactor control server V2,tommy2805,Lua,Thursday 30th of October 2025 02:57:51 PM CDT,"local configPath = ""config""

-- ========= TROVA PERIFERICHE =========
local function findPeripheral(t)
    for _, side in ipairs(rs.getSides()) do
        if peripheral.isPresent(side) and peripheral.getType(side) == t then
            return peripheral.wrap(side), side
        end
    end
    return nil
end

-- ========= CONFIGURAZIONE =========
local function loadConfig()
    if not fs.exists(configPath) then return nil end
    local f = fs.open(configPath,""r"")
    local data=f.readAll() f.close()
    local func=loadstring(data)
    if func then return func() else error(""Errore nel config"") end
end

term.setTextColor(colors.yellow)
print(""Avvio centrale di controllo..."")
sleep(0.3)
local config = loadConfig()

if not config then
    term.setTextColor(colors.white)
    print(""Configurazione non trovata. Creazione guidata...\n"")
    local validColors = {}
    for k,v in pairs(colors) do validColors[k]=v end
    local reactors = {}
    while true do
        write(""Nome reattore: "") local name = read()
        local id
        repeat write(""ID rednet: "") id = tonumber(read()) until id
        local color
        repeat write(""Colore principale (white, blue, ...): "") color = read() until validColors[color]
        local scramColor
        repeat write(""Colore reset SCRAM: "") scramColor = read() until validColors[scramColor]

        table.insert(reactors,{name=name,id=id,color=color,scram_color=scramColor})
        if #reactors >= 8 then break end
        write(""Altro reattore? (s/n): "") if read():lower()~=""s"" then break end
    end
    config = {reactors=reactors, update_interval=2}
    local f = fs.open(configPath,""w"")
    f.write(""return ""..textutils.serialize(config))
    f.close()
end

if type(config.update_interval)~=""number"" then config.update_interval=2 end

term.setTextColor(colors.cyan)
print(""\n[ Inizializzazione periferiche ]"")
sleep(0.3)

local modem, modemSide = findPeripheral(""modem"")
if not modem then error(""Nessun modem trovato!"") end
rednet.open(modemSide)
term.setTextColor(colors.lime)
print(""‚úî Modem su ""..modemSide)
sleep(0.2)

local mon, monSide = findPeripheral(""monitor"")
if not mon then error(""Nessun monitor trovato!"") end
mon.setBackgroundColor(colors.black)
mon.setTextColor(colors.white)
mon.clear()
local monitorSizeX, monitorSizeY = mon.getSize()
term.setTextColor(colors.lime)
print(""‚úî Monitor su ""..monSide)
sleep(0.5)

term.setTextColor(colors.yellow)
print(""Inizializzazione completata."")
sleep(1)
term.clear()
term.setCursorPos(1,1)

-- ========= VARIABILI =========
local reactors = {}
local previousStates = {}
local scramActive = false
local reactorsInSCRAM = {} -- mappa id -> true/false

-- ========= UTILITY =========
local function colorByTemp(p)
    if p < 60 then return colors.green
    elseif p < 85 then return colors.orange
    else return colors.red end
end

local function drawBar(x,y,w,perc,color)
    local filled = math.floor(w*perc/100)
    mon.setCursorPos(x,y)
    mon.setBackgroundColor(colors.gray)
    mon.write(string.rep("" "",w))
    mon.setCursorPos(x,y)
    mon.setBackgroundColor(color)
    mon.write(string.rep("" "",filled))
    mon.setBackgroundColor(colors.black)
end

-- ========= RACCOLTA DATI =========
local function getReactorsInfo(config)
    local reactors = {}
    for _,r in ipairs(config.reactors) do
        term.setTextColor(colors.lightBlue)
        print(""Richiesta dati a ""..r.name.."" (ID ""..r.id.."")..."")
        local command = textutils.serialize({command = ""reactor_info""})
        rednet.send(r.id, command)
        local start=os.clock()
        local sender,msg
        repeat
            sender,msgTmp=rednet.receive(5)
            if msgTmp then msg=textutils.unserialize(msgTmp) end
        until sender==r.id or os.clock()-start>5

        if sender==r.id and type(msg)==""table"" and msg.type==""info"" then
            term.setTextColor(colors.lime)
            print(""Dati ricevuti da ""..r.name)
            reactors[r.id]=msg.data
        else
            term.setTextColor(colors.red)
            print(""Nessuna risposta da ""..r.name)
            reactors[r.id]=nil
        end
    end
    return reactors
end

-- ========= UI =========
local function drawUI()
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
    mon.clear()
    mon.setCursorPos((monitorSizeX/2)-12,1)
    mon.write(""=== CENTRALE NUCLEARE ==="")
    mon.setCursorPos((monitorSizeX/2)-9,2)
    mon.write(""Aggiornato: "" .. textutils.formatTime(os.time(), true))
    local y=4
    local x=2
    local reactorCount = 0
    local reactorPerPage = math.floor(((monitorSizeY-3)/6)+0.5)

    for _,r in ipairs(config.reactors) do
        reactorCount = reactorCount+1
        local info = reactors[r.id]
        mon.setCursorPos(x,y)
        mon.setTextColor(colors.cyan)
        mon.write(r.name)
        y=y+1
        if info then
            mon.setCursorPos(x+15,y-1)
            local perc = math.floor((info.temp/info.maxHeat)*100)
            if info.SCRAMState then
                mon.setTextColor(colors.red) mon.write(""STATO: SCRAM"")
            elseif info.active then
                mon.setTextColor(colors.lime) mon.write(""STATO: ATTIVO"")
            else
                mon.setTextColor(colors.orange) mon.write(""STATO: SPENTO"")
            end
            mon.setTextColor(colors.yellow)
            mon.setCursorPos(x+2,y)
            mon.write(string.format(""MaxOut:%d | Out:%d"", info.maxOutput, info.effectiveOutput))
            y=y+1
            mon.setCursorPos(x+2,y)
            mon.write(string.format(""Temp:%d/%d  (%d%%)"", info.temp, info.maxHeat, perc))
            y=y+1
            drawBar(x+2,y,22,perc+30,colorByTemp(perc))
            y=y+1
        else
            mon.setTextColor(colors.red)
            mon.write(""  Nessuna risposta"")
            y=y+1
        end
        y=y+2
        if reactorCount % reactorPerPage == 0 then
            mon.setTextColor(colors.white)
            for i=4,monitorSizeY do
                mon.setCursorPos(monitorSizeX/2,i)
                mon.write(""|"")
            end
            x=x+(monitorSizeX/2)
            y=4
        end
    end
end

-- ========= CONTROLLO NORMALE =========
local function checkInput()
    local activeColors = rs.getBundledInput(""right"")
    for _,r in ipairs(config.reactors) do
        local isActive = colors.test(activeColors, colors[r.color])
        if previousStates[r.id] ~= isActive then
            local command = textutils.serialize({command=""reactor_control"", newState=isActive})
            rednet.send(r.id, command)
            previousStates[r.id] = isActive
        end
    end
end

-- ========= CONTROLLO SCRAM =========
local function checkSCRAM()
    local foundSCRAM = false
    for _,r in ipairs(config.reactors) do
        local info = reactors[r.id]
        if info and info.SCRAMState then
            reactorsInSCRAM[r.id] = true
            foundSCRAM = true
        else
            reactorsInSCRAM[r.id] = false
        end
    end

    if foundSCRAM and not scramActive then
        term.setTextColor(colors.red)
        print(""[SCRAM] Attivato! Impulso su uscita."")
        rs.setBundledOutput(""back"", colors.orange)
        sleep(1)
        rs.setBundledOutput(""back"", 0)
        scramActive = true
    elseif not foundSCRAM and scramActive then
        term.setTextColor(colors.lime)
        print(""[SCRAM] Tutti i reattori OK. SCRAM disattivo."")
        scramActive = false
    end
end

-- ========= CONTROLLO INPUT SCRAM =========
local function checkInputSCRAM()
    if not scramActive then return end
    local activeColors = rs.getBundledInput(""right"")
    for _,r in ipairs(config.reactors) do
        if reactorsInSCRAM[r.id] then
            local trigger = colors.test(activeColors, colors[r.scram_color])
            if trigger then
                term.setTextColor(colors.yellow)
                print(""[SCRAM RESET] Ricevuto segnale reset da ""..r.name)
                rs.setBundledOutput(""back"", 0)
                rednet.send(r.id, textutils.serialize({command=""reset_SCRAM""}))
                reactorsInSCRAM[r.id] = false
            end
        end
    end
end

-- ========= LOOP PRINCIPALE =========
while true do
    reactors = getReactorsInfo(config)
    checkSCRAM()
    checkInputSCRAM()
    checkInput()
    drawUI()
    term.setTextColor(colors.gray)
    print(""Aggiornamento completato.\n"")
    sleep(config.update_interval)
end
"
ba1iKqgJ,Basic Task Manager,darraghd493,Lua,Thursday 30th of October 2025 02:45:16 PM CDT,"--[[
    Basic Task Manager by darraghd493
 
    A basic Roblox task manager.
]]

local Library = {
    ActiveTasks = {};
}
Library.__index = Library

--#region Internal Functions
local function _removeTask(handle)
    for i, task in ipairs(Library.ActiveTasks) do
        if task == handle then
            table.remove(Library.ActiveTasks, i)
            return
        end
    end
end
--#endregion

function Library.new()
    local self = setmetatable({
        ActiveTasks = {};
    }, Library)
    return self
end

function Library:Spawn(func: (cancelled: () -> boolean) -> ())
    local handle = {
        Running = true,
        Completed = false,
        Cancelled = false,
    }

    handle.Cancel = function(self)
        self.Cancelled = true
        self.Running = false
    end

    handle.IsRunning = function(self)
        return self.Running
    end

    task.spawn(function()
        local ok, err = pcall(function()
            func(function()
                return handle.Cancelled
            end)
        end)
        if not ok then
            error(""Task error:"", err)
        end

        handle.Completed = true
        handle.Running = false
        _removeTask(handle)
    end)

    table.insert(Library.ActiveTasks, handle)
    return handle
end

function Library:Delay(seconds: number, func: () -> ())
    return self:Spawn(function(cancelled)
        local elapsed = 0
        while elapsed < seconds do
            if cancelled() then return end
            task.wait(0.1)
            elapsed += 0.1
        end
        if not cancelled() then
            func()
        end
    end)
end

function Library:Shutdown()
    for _, handle in ipairs(self.ActiveTasks) do
        handle:Cancel()
    end
    table.clear(self.ActiveTasks)
end

function Library:Count()
    return #self.ActiveTasks
end

return Library
"
Ah1gJnHy,Basic Connection Manager,darraghd493,Lua,Thursday 30th of October 2025 02:32:50 PM CDT,"--[[
    Basic Connection Manager by darraghd493
 
    A basic Roblox connection manager.
]]

local Library = {
    ActiveConnections = {};
}
Library.__index = Library

function Library.new()
    local self = setmetatable({
        ActiveConnections = {};
    }, Library)
    return self
end

function Library:Add(connection: RBXScriptConnection)
    table.insert(self.ActiveConnections, connection)
    return connection
end

function Library:Create(event: RBXScriptSignal, callback: (...any) -> ()): RBXScriptConnection
    local connection = event:Connect(callback)
    table.insert(self.ActiveConnections, connection)
    return connection
end

function Library:Remove(connection: RBXScriptConnection)
    for i, conn in pairs(self.ActiveConnections) do
        if conn == connection then
            table.remove(self.ActiveConnections, i)
            return
        end
    end
end

function Library:Shutdown()
    for i, conn in pairs(self.ActiveConnections) do
        conn:Disconnect()
    end
    self.ActiveConnections = {}
end

return Library"
sEUswDxG,Basic Data Store,darraghd493,Lua,Thursday 30th of October 2025 02:31:25 PM CDT,"--[[
    Basic Data Store by darraghd493
 
    A basic volatile Lua data store backed by a table.
]]

local Library = {
    Store = {};
}
Library.__index = Library

function Library.new()
    return setmetatable({
        Store = {};
    }, Library)
end

function Library:Set(key: string, value: any)
    self.Store[key] = value
end

function Library:Get(key: string)
    return self.Store[key]
end

function Library:Remove(key: string)
    self.Store[key] = nil
end

function Library:Clear()
    self.Store = {}
end

return Library"
PWZnGmjn,"Obtener orderid de py, folio y total",EmilianoRoldanR,SQL,Thursday 30th of October 2025 02:17:29 PM CDT,"SELECT 
    RIGHT('0' + CAST(DATEPART(DAY, fecha) AS VARCHAR(2)), 2) + '/' +
    RIGHT('0' + CAST(DATEPART(MONTH, fecha) AS VARCHAR(2)), 2) + '/' +
    CAST(DATEPART(YEAR, fecha) AS VARCHAR(4)) + ' ' +
    CONVERT(VARCHAR(8), fecha, 108) as fecha,
    
    LTRIM(SUBSTRING(
        observaciones,
        CHARINDEX('OrdenId: ', observaciones) + LEN('OrdenId: '),
        CHARINDEX('.', observaciones, CHARINDEX('OrdenId: ', observaciones)) - (CHARINDEX('OrdenId: ', observaciones) + LEN('OrdenId: '))
    )) as orden_id,
    
    CONCAT(LTRIM(RTRIM(seriefolio)), numcheque) AS folio,
    
    total
FROM cheques
WHERE 
    tipodeservicio = 2 
    AND seriefolio = 'PY' 
    AND fecha >= '01/05/2025' 
    AND fecha < '01/06/2025'
ORDER BY fecha"
EzRExepG,investigation,vitormartinotti,C++,Thursday 30th of October 2025 01:39:33 PM CDT,"#include<bits/stdc++.h>
#define pii pair<int,int>
#define MAXN 10010

using namespace std;

const int MOD = (int)1e9+7;

vector<pii> grafo[MAXN];

int dist[MAXN], pai[MAXN], rota[MAXN], min_vrota[MAXN], max_vrota[MAXN];
/*
rota[i]: nro de caminhos minimos para chegar no v√©rtice i
min_vrota[i]: menor nro de v√©rtices dentre as menores rotas at√© i
max_vrota[i]: maior nro de v√©rtices dentre as menores rotas at√© i
*/

void dijkstra(int s){
    set<pii> q;
    q.insert({0,s});
    dist[s] = 0;
    rota[s] = 1;
    min_vrota[s] = 1;
    max_vrota[s] = 1;

    while(!q.empty()){
        int v = q.begin()->second;
        q.erase(q.begin());
        for(auto [w,u] : grafo[v]){
            if(dist[v]+w < dist[u]){
                q.erase({dist[u],u});
                dist[u] = dist[v]+w;
                q.insert({dist[u],u});
                pai[u] = v;

                rota[u] = rota[v];
                min_vrota[u] = min_vrota[v]+1;
                max_vrota[u] = max_vrota[v]+1;
            }else if(dist[v]+w == dist[u]){
                rota[u] += rota[v];
                rota[u] %= MOD;
                min_vrota[u] = min(min_volta[u],min_vrota[v]+1);
                max_vrota[u] = max(max_vrota[u],max_vrota[v]+1);
            }
        }
    }
}

int main(){
    int n, m; scanf(""%d %d"", &n, &m);

    for(int i = 0; i < m; i++){
        int a, b, c; scanf(""%d %d %d"", &a, &b, &c);
        grafo[a].push_back({c,b});
    }

    //
}
"
2Y0BsvS5,News Oct30 25,Newscaster0,Email,Thursday 30th of October 2025 01:11:56 PM CDT,".‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
T‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

O‚Äéh‚Äé ‚Äém‚Äéa‚Äén‚Äé,‚Äé ‚Äét‚Äéh‚Äéo‚Äés‚Äée‚Äé ‚Äét‚Äéo‚Äéd‚Äéd‚Äél‚Äée‚Äér‚Äés‚Äé ‚Äép‚Äéo‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äég‚Äée‚Äét‚Äés‚Äé ‚Äém‚Äée‚Äé ‚Äéh‚Äéo‚Äér‚Äén‚Äéy‚Äé!‚Äé ‚Äéüí© ‚ÄéJ‚Äéu‚Äés‚Äét‚Äé ‚Äék‚Äéi‚Äéd‚Äéd‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äé(‚Äén‚Äéo‚Äét‚Äé ‚Äér‚Äée‚Äéa‚Äél‚Äél‚Äéy‚Äé)‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé!‚Äé

G‚Äée‚Äéo‚Äér‚Äég‚Äée‚Äé ‚ÄéR‚Äé.‚ÄéR‚Äé.‚Äé ‚ÄéM‚Äéa‚Äér‚Äét‚Äéi‚Äén‚Äé'‚Äés‚Äé ‚ÄéL‚Äéa‚Äéw‚Äés‚Äéu‚Äéi‚Äét‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéO‚Äép‚Äée‚Äén‚ÄéA‚ÄéI‚Äé ‚ÄéG‚Äéa‚Äéi‚Äén‚Äés‚Äé ‚ÄéT‚Äér‚Äéa‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé
M‚ÄéL‚ÄéB‚ÄéP‚ÄéA‚Äé ‚ÄéY‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéB‚Äéa‚Äés‚Äée‚Äéb‚Äéa‚Äél‚Äél‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéy‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéF‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äéi‚Äég‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéK‚Äéo‚Äér‚Äée‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚ÄéN‚Äéu‚Äéc‚Äél‚Äée‚Äéa‚Äér‚Äé-‚ÄéP‚Äéo‚Äéw‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéS‚Äéu‚Äéb‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé'‚ÄéG‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéO‚Äél‚Äé'‚Äé ‚ÄéU‚ÄéS‚ÄéA‚Äé
H‚Äéa‚Äéw‚Äél‚Äée‚Äéy‚Äé:‚Äé ‚ÄéD‚Äée‚Äém‚Äés‚Äé ‚ÄéH‚Äéo‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéN‚Äée‚Äée‚Äéd‚Äéi‚Äée‚Äés‚Äét‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéH‚Äéo‚Äés‚Äét‚Äéa‚Äég‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéG‚Äéo‚Äév‚Äé'‚Äét‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéu‚Äét‚Äés‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé ‚ÄéT‚Äéa‚Äér‚Äéi‚Äéf‚Äéf‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé ‚ÄéO‚Äép‚Äée‚Äén‚Äés‚Äé ‚ÄéU‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéA‚Äég‚Äér‚Äéi‚Äéc‚Äéu‚Äél‚Äét‚Äéu‚Äér‚Äée‚Äé
A‚Äéc‚Äét‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéC‚Äéy‚Äén‚Äét‚Äéh‚Äéi‚Äéa‚Äé ‚ÄéN‚Äéi‚Äéx‚Äéo‚Äén‚Äé ‚ÄéH‚Äée‚Äéa‚Äéd‚Äél‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äé'‚ÄéG‚Äéa‚Äéy‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéZ‚Äéo‚Äéh‚Äér‚Äéa‚Äén‚Äé'‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéy‚Äé
M‚Äée‚Äét‚Äéa‚Äé ‚ÄéS‚Äéh‚Äéa‚Äér‚Äée‚Äés‚Äé ‚ÄéF‚Äéa‚Äél‚Äél‚Äé ‚Äé1‚Äé0‚Äé%‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéa‚Äér‚Äék‚Äé ‚ÄéZ‚Äéu‚Äéc‚Äék‚Äée‚Äér‚Äéb‚Äée‚Äér‚Äég‚Äé'‚Äés‚Äé ‚ÄéM‚Äéa‚Äés‚Äés‚Äéi‚Äév‚Äée‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚ÄéI‚Äé
I‚ÄéC‚ÄéE‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äés‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äés‚Äé ‚ÄéC‚Äéo‚Äén‚Äév‚Äéi‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéh‚Äéi‚Äél‚Äéd‚Äé ‚ÄéS‚Äée‚Äéx‚Äé ‚ÄéC‚Äér‚Äéi‚Äém‚Äée‚Äés‚Äé,‚Äé ‚ÄéF‚Äée‚Äén‚Äét‚Äéa‚Äén‚Äéy‚Äél‚Äé ‚ÄéT‚Äér‚Äéa‚Äéf‚Äéf‚Äéi‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé
J‚Äéa‚Äés‚Äéo‚Äén‚Äé ‚ÄéK‚Äée‚Äél‚Äéc‚Äée‚Äé ‚ÄéD‚Äéo‚Äée‚Äés‚Äén‚Äé'‚Äét‚Äé ‚ÄéT‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚ÄéN‚ÄéF‚ÄéL‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äé ‚ÄéF‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äér‚Äéi‚Äét‚Äéi‚Äéc‚Äéi‚Äéz‚Äéi‚Äén‚Äég‚Äé ‚ÄéO‚Äéf‚Äéf‚Äé
E‚Äér‚Äén‚Äés‚Äét‚Äé ‚ÄéP‚Äér‚Äéo‚Äép‚Äéo‚Äés‚Äée‚Äés‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äér‚Äé ‚ÄéW‚Äéa‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äée‚Äél‚Äél‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚ÄéD‚Äé.‚ÄéC‚Äé.‚Äé ‚ÄéF‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äés‚Äé
J‚Äé.‚ÄéB‚Äé.‚Äé ‚ÄéP‚Äér‚Äéi‚Äét‚Äéz‚Äék‚Äée‚Äér‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äés‚Äé ‚ÄéI‚ÄéC‚ÄéE‚Äé ‚ÄéO‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚ÄéH‚Äéa‚Äél‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéH‚Äéa‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äée‚Äén‚Äé
U‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéD‚Äée‚Äéf‚Äée‚Äén‚Äéd‚Äés‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äé'‚ÄéE‚Äém‚Äéb‚Äéa‚Äér‚Äég‚Äéo‚Äé'‚Äé ‚Äéo‚Äén‚Äé ‚ÄéC‚Äéu‚Äéb‚Äéa‚Äé ‚Äéa‚Äét‚Äé ‚ÄéU‚Äé.‚ÄéN‚Äé.‚Äé,‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äés‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚ÄéH‚Äéa‚Äév‚Äéa‚Äén‚Äéa‚Äé ‚ÄéE‚Äém‚Äéb‚Äéa‚Äés‚Äés‚Äéy‚Äé
S‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚Äé1‚Äé5‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äéo‚Äép‚Äée‚Äén‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé
Y‚Äéo‚Äéu‚ÄéT‚Äéu‚Äéb‚Äée‚Äé ‚ÄéE‚Äém‚Äéb‚Äér‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚ÄéA‚ÄéI‚Äé,‚Äé ‚ÄéO‚Äéf‚Äéf‚Äée‚Äér‚Äés‚Äé ‚ÄéV‚Äéo‚Äél‚Äéu‚Äén‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚ÄéB‚Äéu‚Äéy‚Äéo‚Äéu‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéE‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äée‚Äés‚Äé
L‚Äée‚Äéf‚Äét‚Äéi‚Äés‚Äét‚Äé ‚ÄéL‚Äéa‚Äéb‚Äéo‚Äéu‚Äér‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé ‚ÄéF‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚ÄéS‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äé,‚Äé ‚Äéa‚Äés‚Äé ‚ÄéF‚Äéa‚Äér‚Äéa‚Äég‚Äée‚Äé ‚ÄéS‚Äéu‚Äér‚Äég‚Äée‚Äés‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äée‚Äél‚Äée‚Äéb‚Äér‚Äéa‚Äét‚Äée‚Äés‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéu‚Äél‚Äéy‚Äé ‚ÄéG‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéM‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé‚Äô‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéX‚Äéi‚Äé

L‚Äéi‚Äém‚Äéi‚Äét‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéR‚Äéa‚Äér‚Äée‚Äé-‚ÄéE‚Äéa‚Äér‚Äét‚Äéh‚Äés‚Äé ‚ÄéL‚Äéi‚Äéf‚Äét‚Äée‚Äéd‚Äé,‚Äé ‚ÄéS‚Äéo‚Äéy‚Äéb‚Äée‚Äéa‚Äén‚Äés‚Äé ‚ÄéP‚Äéu‚Äér‚Äéc‚Äéh‚Äéa‚Äés‚Äée‚Äés‚Äé ‚ÄéO‚ÄéK‚Äé‚Äô‚Äéd‚Äé
C‚Äéh‚Äéi‚Äén‚Äée‚Äés‚Äée‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äém‚Äée‚Äée‚Äét‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äéu‚Äés‚Äéa‚Äén‚Äé,‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéK‚Äéo‚Äér‚Äée‚Äéa‚Äé,‚Äé
P‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äém‚Äée‚Äét‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé‚Äô‚Äés‚Äé ‚Äég‚Äée‚Äén‚Äéo‚Äéc‚Äéi‚Äéd‚Äéa‚Äél‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äés‚Äét‚Äé ‚Äéd‚Äéi‚Äéc‚Äét‚Äéa‚Äét‚Äéo‚Äér‚Äé,‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéo‚Äén‚Äé ‚ÄéW‚Äée‚Äéd‚Äén‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äéu‚Äés‚Äéa‚Äén‚Äé,‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéK‚Äéo‚Äér‚Äée‚Äéa‚Äé,‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äés‚Äé ‚Äéf‚Äéo‚Äéc‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äéh‚Äée‚Äéa‚Äév‚Äéi‚Äél‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚Äél‚Äéi‚Äéf‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äén‚Äét‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äér‚Äéi‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéa‚Äér‚Äéi‚Äéf‚Äéf‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äéb‚Äéi‚Äél‚Äéa‚Äét‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äét‚Äér‚Äéa‚Äéd‚Äée‚Äé.‚Äé

W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé‚Äô‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéM‚Äéo‚Äéb‚Äés‚Äé ‚ÄéT‚Äéh‚Äér‚Äéo‚Äéw‚Äé ‚ÄéR‚Äéo‚Äéc‚Äék‚Äés‚Äé,‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äéw‚Äéo‚Äér‚Äék‚Äés‚Äé,‚Äé ‚ÄéH‚Äéa‚Äér‚Äéa‚Äés‚Äés‚Äé ‚ÄéL‚Äéa‚Äéw‚Äé ‚ÄéE‚Äén‚Äéf‚Äéo‚Äér‚Äéc‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé'‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéM‚Äéo‚Äéb‚Äés‚Äé ‚ÄéT‚Äéh‚Äér‚Äéo‚Äéw‚Äé ‚ÄéR‚Äéo‚Äéc‚Äék‚Äés‚Äé,‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äéw‚Äéo‚Äér‚Äék‚Äés‚Äé,‚Äé ‚ÄéH‚Äéa‚Äér‚Äéa‚Äés‚Äés‚Äé ‚ÄéL‚Äéa‚Äéw‚Äé
3‚Äé,‚Äé7‚Äé5‚Äé9‚Äé
C‚Äér‚Äéi‚Äék‚Äée‚Äéy‚Äé!‚Äé ‚ÄéW‚Äéo‚Äék‚Äée‚Äé ‚ÄéA‚Äéu‚Äés‚Äés‚Äéi‚Äée‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚ÄéB‚Äéa‚Äén‚Äés‚Äé ‚Äé‚Äò‚ÄéB‚Äéa‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äée‚Äét‚Äé‚Äô‚Äé ‚ÄéO‚Äéu‚Äét‚Äéd‚Äéo‚Äéo‚Äér‚Äé ‚ÄéG‚Äéa‚Äés‚Äé ‚ÄéB‚Äéa‚Äér‚Äéb‚Äée‚Äéc‚Äéu‚Äée‚Äés‚Äé
C‚Äér‚Äéi‚Äék‚Äée‚Äéy‚Äé!‚Äé ‚ÄéW‚Äéo‚Äék‚Äée‚Äé ‚ÄéA‚Äéu‚Äés‚Äés‚Äéi‚Äée‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚ÄéB‚Äéa‚Äén‚Äés‚Äé ‚Äé'‚ÄéB‚Äéa‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äée‚Äét‚Äé'‚Äé ‚ÄéG‚Äéa‚Äés‚Äé ‚ÄéB‚Äéa‚Äér‚Äéb‚Äée‚Äéc‚Äéu‚Äée‚Äés‚Äé
8‚Äé4‚Äé6‚Äé
‚Äò‚ÄéM‚Äéa‚Äés‚Äés‚Äéi‚Äév‚Äée‚Äé‚Äô‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äé ‚ÄéS‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚ÄéW‚Äéi‚Äéd‚Äée‚Äés‚Äép‚Äér‚Äée‚Äéa‚Äéd‚Äé ‚ÄéP‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚ÄéO‚Äéu‚Äét‚Äéa‚Äég‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
'‚ÄéM‚Äéa‚Äés‚Äés‚Äéi‚Äév‚Äée‚Äé'‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äé ‚ÄéS‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚ÄéP‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚ÄéO‚Äéu‚Äét‚Äéa‚Äég‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
1‚Äé4‚Äé8‚Äé
F‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äém‚Äép‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äém‚Äé:‚Äé ‚ÄéS‚ÄéN‚ÄéA‚ÄéP‚Äé ‚ÄéB‚Äée‚Äén‚Äée‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äér‚Äéi‚Äée‚Äés‚Äé ‚ÄéS‚Äét‚Äée‚Äéa‚Äél‚Äé ‚ÄéG‚Äér‚Äéo‚Äéc‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé,‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äé ‚ÄéR‚Äéi‚Äéo‚Äét‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚ÄéB‚Äée‚Äén‚Äée‚Äéf‚Äéi‚Äét‚Äés‚Äé ‚ÄéL‚Äéa‚Äép‚Äés‚Äée‚Äé
F‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äém‚Äép‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äém‚Äé:‚Äé ‚ÄéS‚ÄéN‚ÄéA‚ÄéP‚Äé ‚ÄéB‚Äée‚Äén‚Äée‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äér‚Äéi‚Äée‚Äés‚Äé ‚ÄéS‚Äét‚Äée‚Äéa‚Äél‚Äé ‚ÄéG‚Äér‚Äéo‚Äéc‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé,‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äé ‚ÄéR‚Äéi‚Äéo‚Äét‚Äés‚Äé
1‚Äé,‚Äé4‚Äé2‚Äé4‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äée‚Äél‚Äée‚Äéb‚Äér‚Äéa‚Äét‚Äée‚Äés‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéu‚Äél‚Äéy‚Äé ‚ÄéG‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéM‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé‚Äô‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äée‚Äés‚Äée‚Äé ‚ÄéD‚Äéi‚Äéc‚Äét‚Äéa‚Äét‚Äéo‚Äér‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚ÄéL‚Äéi‚Äéf‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéL‚Äéi‚Äém‚Äéi‚Äét‚Äés‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äée‚Äél‚Äée‚Äéb‚Äér‚Äéa‚Äét‚Äée‚Äés‚Äé ‚Äé'‚ÄéT‚Äér‚Äéu‚Äél‚Äéy‚Äé ‚ÄéG‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéM‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé'‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äée‚Äés‚Äée‚Äé ‚ÄéD‚Äéi‚Äéc‚Äét‚Äéa‚Äét‚Äéo‚Äér‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé
7‚Äé3‚Äé8‚Äé
S‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚Äé1‚Äé5‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äéo‚Äép‚Äée‚Äén‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé;‚Äé ‚ÄéI‚Äéf‚Äé ‚ÄéN‚Äéo‚Äét‚Äé,‚Äé ‚ÄéS‚ÄéN‚ÄéA‚ÄéP‚Äé ‚ÄéB‚Äée‚Äén‚Äée‚Äéf‚Äéi‚Äét‚Äés‚Äé ‚ÄéR‚Äéu‚Äén‚Äé ‚ÄéD‚Äér‚Äéy‚Äé
S‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚Äé1‚Äé5‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äéo‚Äép‚Äée‚Äén‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé
1‚Äé6‚Äé0‚Äé
P‚Äéo‚Äél‚Äél‚Äé:‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéo‚Äém‚Äé‚Äô‚Äés‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äém‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äés‚Äé,‚Äé ‚Äé5‚Äé6‚Äé%‚Äé ‚Äét‚Äéo‚Äé ‚Äé4‚Äé3‚Äé%‚Äé;‚Äé ‚ÄéC‚ÄéA‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äéa‚Äéy‚Äé ‚Äé‚Äò‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äéc‚Äéy‚Äé&‚Äé#‚Äé8‚Äé2‚Äé1‚Äé7‚Äé
P‚Äéo‚Äél‚Äél‚Äé:‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéo‚Äém‚Äé'‚Äés‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äém‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äés‚Äé,‚Äé ‚Äé5‚Äé6‚Äé-‚Äé4‚Äé3‚Äé;‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéC‚Äéi‚Äét‚Äée‚Äé ‚Äé'‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äéc‚Äéy‚Äé'‚Äé
3‚Äé,‚Äé8‚Äé9‚Äé2‚Äé
W‚Äéi‚Äét‚Äéh‚Äé ‚ÄéM‚Äéa‚Äém‚Äéd‚Äéa‚Äén‚Äéi‚Äé ‚Äéo‚Äén‚Äé ‚ÄéR‚Äéi‚Äés‚Äée‚Äé,‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé ‚ÄéB‚Äée‚Äég‚Äéi‚Äén‚Äés‚Äé ‚ÄéR‚Äée‚Äéw‚Äér‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéH‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äél‚Äée‚Äév‚Äéa‚Äét‚Äée‚Äé ‚ÄéM‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äés‚Äé
W‚Äéi‚Äét‚Äéh‚Äé ‚ÄéM‚Äéa‚Äém‚Äéd‚Äéa‚Äén‚Äéi‚Äé ‚Äéo‚Äén‚Äé ‚ÄéR‚Äéi‚Äés‚Äée‚Äé,‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé ‚ÄéB‚Äée‚Äég‚Äéi‚Äén‚Äés‚Äé ‚ÄéR‚Äée‚Äéw‚Äér‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéH‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéy‚Äé
3‚Äé,‚Äé3‚Äé7‚Äé4‚Äé
C‚Äéy‚Äén‚Äét‚Äéh‚Äéi‚Äéa‚Äé ‚ÄéN‚Äéi‚Äéx‚Äéo‚Äén‚Äé ‚ÄéH‚Äée‚Äéa‚Äéd‚Äél‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äé‚Äò‚ÄéG‚Äéa‚Äéy‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéZ‚Äéo‚Äéh‚Äér‚Äéa‚Äén‚Äé‚Äô‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéa‚Äés‚Äé ‚ÄéM‚Äéa‚Äém‚Äéd‚Äéa‚Äén‚Äéi‚Äé ‚ÄéM‚Äée‚Äée‚Äét‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéU‚Äég‚Äéa‚Äén‚Äéd‚Äéa‚Äén‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äé
A‚Äéc‚Äét‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéC‚Äéy‚Äén‚Äét‚Äéh‚Äéi‚Äéa‚Äé ‚ÄéN‚Äéi‚Äéx‚Äéo‚Äén‚Äé ‚ÄéH‚Äée‚Äéa‚Äéd‚Äél‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äé'‚ÄéG‚Äéa‚Äéy‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéZ‚Äéo‚Äéh‚Äér‚Äéa‚Äén‚Äé'‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéy‚Äé
3‚Äé1‚Äé3‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéA‚Äéd‚Äéd‚Äér‚Äée‚Äés‚Äés‚Äée‚Äés‚Äé ‚ÄéT‚Äéh‚Äéi‚Äér‚Äéd‚Äé ‚ÄéT‚Äée‚Äér‚Äém‚Äé ‚ÄéP‚Äér‚Äéo‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äés‚Äé:‚Äé ‚Äé‚Äò‚ÄéP‚Äér‚Äée‚Äét‚Äét‚Äéy‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äér‚Äé ‚ÄéI‚Äé‚Äô‚Äém‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äéu‚Äén‚Äé‚Äô‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚Äé‚Äò‚ÄéP‚Äér‚Äée‚Äét‚Äét‚Äéy‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äér‚Äé ‚ÄéI‚Äé‚Äô‚Äém‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äéu‚Äén‚Äé‚Äô‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äéh‚Äéi‚Äér‚Äéd‚Äé ‚ÄéT‚Äée‚Äér‚Äém‚Äé

$‚Äé5‚Äé0‚ÄéK‚Äé ‚ÄéR‚Äée‚Äéw‚Äéa‚Äér‚Äéd‚Äé ‚ÄéO‚Äéf‚Äéf‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéB‚Äéa‚Äéb‚Äéo‚Äéo‚Äén‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéB‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚ÄéO‚Äéu‚Äét‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚ÄéC‚Äé ‚ÄéL‚Äéo‚Äéu‚Äén‚Äég‚Äée‚Äé ‚ÄéC‚Äél‚Äéu‚Äéb‚Äé.‚Äé

H‚Äée‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äég‚Äéo‚Äél‚Äéd‚Äé ‚Äég‚Äér‚Äéi‚Äél‚Äél‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äét‚Äée‚Äée‚Äét‚Äéh‚Äé.‚Äé


P‚Äéu‚Äéb‚Äée‚Äéh‚Äée‚Äéa‚Äéd‚Äé ‚ÄéC‚Äéo‚Äén‚Äév‚Äéi‚Äéc‚Äét‚Äé ‚ÄéR‚Äéu‚Äén‚Äés‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéB‚ÄéM‚ÄéW‚Äé.‚Äé


T‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚ÄéS‚Äée‚Äét‚Äé ‚ÄéF‚Äéo‚Äér‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéM‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéS‚Äéh‚Äéo‚Äét‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé.‚Äé


M‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äés‚Äé ‚ÄéP‚Äél‚Äée‚Äéa‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéM‚Äéu‚Äéd‚Äés‚Äéh‚Äéa‚Äér‚Äék‚Äé ‚ÄéW‚Äéi‚Äéf‚Äée‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

1‚Äé0‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé-‚Äé ‚ÄéD‚Äéa‚Äél‚Äée‚Äé,‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé
A‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé2‚Äé:‚Äé5‚Äé2‚Äé ‚Äép‚Äém‚Äé ‚ÄéC‚ÄéD‚ÄéT‚Äé
T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
D‚Äéa‚Äéy‚Äé
7‚Äé2‚Äé¬∞‚Äé
N‚Äé ‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
A‚Äéb‚Äéu‚Äén‚Äéd‚Äéa‚Äén‚Äét‚Äé ‚Äés‚Äéu‚Äén‚Äés‚Äéh‚Äéi‚Äén‚Äée‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé7‚Äé2‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
2‚Äé2‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
6‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé4‚Äé2‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
6‚Äé:‚Äé4‚Äé4‚Äé ‚Äép‚Äém‚Äé
N‚Äéi‚Äég‚Äéh‚Äét‚Äé
4‚Äé1‚Äé¬∞‚Äé
1‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
C‚Äél‚Äée‚Äéa‚Äér‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé4‚Äé1‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äéa‚Äéb‚Äél‚Äée‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
5‚Äé2‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
3‚Äé:‚Äé1‚Äé0‚Äé ‚Äép‚Äém‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé:‚Äé1‚Äé6‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
F‚Äér‚Äéi‚Äé ‚Äé3‚Äé1‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé7‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé1‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé4‚Äé7‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé2‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
5‚Äé%‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé3‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé4‚Äé7‚Äé¬∞‚Äé
3‚Äé%‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé4‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé3‚Äé¬∞‚Äé
5‚Äé%‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé5‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
7‚Äé%‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé6‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
7‚Äé%‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé7‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
7‚Äé%‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé8‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé7‚Äé¬∞‚Äé
1‚Äé0‚Äé%‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé9‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
4‚Äé%‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé0‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
4‚Äé%‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
1‚Äé1‚Äé%‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé2‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
1‚Äé7‚Äé%‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé8‚Äé¬∞‚Äé
5‚Äé%‚Äé

.‚Äé.‚Äé.‚Äé
C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéG‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéP‚Äéu‚Äém‚Äép‚Äék‚Äéi‚Äén‚Äé.‚Äé ‚ÄéüéÉ
.‚Äé.‚Äé.‚Äé

B‚Äéi‚Äél‚Äél‚Äé ‚ÄéC‚Äéo‚Äés‚Äéb‚Äéy‚Äé
W‚Äéi‚Äél‚Äél‚Äéi‚Äéa‚Äém‚Äé ‚ÄéH‚Äée‚Äén‚Äér‚Äéy‚Äé ‚ÄéC‚Äéo‚Äés‚Äéb‚Äéy‚Äé,‚Äé ‚ÄéJ‚Äér‚Äé.‚Äé ‚Äé(‚Äéa‚Äé.‚Äék‚Äé.‚Äéa‚Äé.‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé ‚ÄéC‚Äéo‚Äés‚Äéb‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äéz‚Äé)‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚ÄéA‚Äéf‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äét‚Äée‚Äél‚Äée‚Äév‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äéc‚Äét‚Äéo‚Äér‚Äé,‚Äé ‚Äés‚Äéw‚Äée‚Äéa‚Äét‚Äée‚Äér‚Äé-‚Äéa‚Äéf‚Äéi‚Äéc‚Äéi‚Äéo‚Äén‚Äéa‚Äéd‚Äéo‚Äé,‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äéd‚Äéi‚Äéa‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äér‚Äéo‚Äéf‚Äée‚Äés‚Äés‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚Äéo‚Äél‚Äéd‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéa‚Äér‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéa‚Äé ‚Äéw‚Äée‚Äée‚Äék‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé8‚Äé0‚Äés‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äée‚Äén‚Äét‚Äéi‚Äér‚Äée‚Äél‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äég‚Äéo‚Äét‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéx‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äée‚Äé ‚Äéd‚Äée‚Äéc‚Äéa‚Äéd‚Äée‚Äés‚Äé.‚Äé ‚ÄéU‚Äén‚Äéf‚Äéo‚Äér‚Äét‚Äéu‚Äén‚Äéa‚Äét‚Äée‚Äél‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äér‚Äéa‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äée‚Äéa‚Äéc‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äés‚Äéh‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äé2‚Äé0‚Äé1‚Äé4‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äéd‚Äér‚Äéi‚Äée‚Äéd‚Äé-‚Äéu‚Äép‚Äé ‚Äéf‚Äéa‚Äés‚Äéh‚Äéi‚Äéo‚Äén‚Äé ‚Äém‚Äéo‚Äéd‚Äée‚Äél‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé0‚Äé0‚Äés‚Äé ‚Äéb‚Äée‚Äég‚Äéa‚Äén‚Äé ‚Äém‚Äéo‚Äéu‚Äén‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äé ‚Äés‚Äém‚Äée‚Äéa‚Äér‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé ‚ÄéC‚Äéo‚Äés‚Äéb‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äél‚Äél‚Äée‚Äég‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äée‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéd‚Äér‚Äéu‚Äég‚Äég‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äét‚Äéi‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéu‚Äéd‚Äéd‚Äéi‚Äén‚Äé'‚Äé ‚Äép‚Äéo‚Äép‚Äé ‚Äéi‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéw‚Äéo‚Äém‚Äée‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé1‚Äé6‚Äé-‚Äéy‚Äée‚Äéa‚Äér‚Äé-‚Äéo‚Äél‚Äéd‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äés‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé6‚Äé0‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äéh‚Äéo‚Äéw‚Äé ‚Äém‚Äéa‚Äén‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äéa‚Äéw‚Äéa‚Äéy‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéi‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé5‚Äé0‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéd‚Äée‚Äés‚Äép‚Äéi‚Äét‚Äée‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äég‚Äér‚Äéo‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé6‚Äé0‚Äés‚Äé.‚Äé

(‚Äé(‚Äé ‚ÄéZ‚ÄéI‚ÄéP‚Äé ‚ÄéZ‚ÄéO‚ÄéP‚Äé ‚ÄéZ‚ÄéO‚ÄéO‚ÄéB‚ÄéI‚ÄéT‚ÄéY‚Äé ‚ÄéB‚ÄéO‚ÄéP‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéM‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚Äém‚Äéa‚Äén‚Äé!‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé ‚Äéa‚Äé ‚Äéb‚Äéa‚Äét‚Äét‚Äél‚Äée‚Äé ‚Äéw‚Äéi‚Äén‚Äé ‚Äéo‚Äér‚Äé ‚Äél‚Äéo‚Äés‚Äée‚Äé.‚Äé ‚ÄéS‚Äéo‚Äé ‚Äéi‚Äét‚Äé'‚Äés‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé,‚Äé ‚Äém‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚Äén‚Äéo‚Äéi‚Äés‚Äée‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé!‚Äé ‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéG‚Äéo‚Äé ‚Äéw‚Äéa‚Äét‚Äéc‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéS‚Äét‚Äéu‚Äéf‚Äéf‚Äé.‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéG‚Äéo‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äék‚Äéi‚Äék‚Äée‚Äés‚Äé ‚Äéu‚Äép‚Äé.‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéG‚Äéo‚Äé ‚Äéf‚Äéi‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéi‚Äét‚Äél‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé!‚Äé ‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéI‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé ‚Äés‚Äét‚Äér‚Äéo‚Äén‚Äég‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äél‚Äél‚Äé ‚Äés‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äée‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äés‚Äéu‚Äér‚Äée‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äéd‚Äéi‚Äée‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéG‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äé ‚ÄéF‚Äér‚Äéo‚Äén‚Äét‚Äéi‚Äée‚Äér‚Äé.‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéM‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚Äém‚Äéa‚Äén‚Äé!‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéB‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äée‚Äés‚Äét‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéb‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äén‚Äéd‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéf‚Äéa‚Äég‚Äég‚Äéo‚Äét‚Äér‚Äéy‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé,‚Äé ‚Äém‚Äéa‚Äés‚Äé-‚Äét‚Äée‚Äér‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äé,‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äég‚Äél‚Äéo‚Äéc‚Äék‚Äé ‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äém‚Äéy‚Äé ‚Äéh‚Äéa‚Äén‚Äéd‚Äé!‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéM‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚Äém‚Äéa‚Äén‚Äé!‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚Äél‚Äéa‚Äéi‚Äéw‚Äée‚Äéj‚Äér‚Äék‚Äée‚Äéf‚Äék‚Äéh‚Äéj‚Äée‚Äér‚Äéb‚Äéf‚Äér‚Äéh‚Äéj‚Äék‚Äée‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéc‚Äér‚Äéa‚Äép‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äét‚Äéu‚Äép‚Äéi‚Äéd‚Äé.‚Äé

[‚Äé0‚Äé0‚Äé:‚Äé1‚Äé5‚Äé]‚Äé ‚Äé<‚Äé@‚Äél‚Äé0‚Äéd‚Äée‚Äé>‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äés‚Äét‚Äée‚Äég‚ÄéO‚Äés‚Äéa‚Äéu‚Äér‚Äé ‚Äé
[‚Äé0‚Äé0‚Äé:‚Äé1‚Äé8‚Äé]‚Äé ‚Äé<‚Äé@‚Äéd‚Äée‚Äém‚Äéo‚Äég‚Äéo‚Äér‚Äég‚Äéo‚Äé>‚Äé ‚Äéh‚Äét‚Äét‚Äép‚Äés‚Äé:‚Äé/‚Äé/‚Äéw‚Äéw‚Äéw‚Äé.‚Äéi‚Äén‚Äés‚Äét‚Äéa‚Äég‚Äér‚Äéa‚Äém‚Äé.‚Äéc‚Äéo‚Äém‚Äé/‚Äép‚Äé/‚ÄéD‚ÄéM‚ÄéB‚ÄéK‚Äé5‚ÄéB‚ÄéG‚Äéq‚Äéq‚Äé0‚Äé3‚Äé/‚Äé
[‚Äé0‚Äé0‚Äé:‚Äé1‚Äé9‚Äé]‚Äé ‚Äé<‚Äé@‚Äél‚Äé0‚Äéd‚Äée‚Äé>‚Äé ‚Äéh‚Äéo‚Äéw‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äéd‚Äéo‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚Äéi‚Äét‚Äé ‚Äéw‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéc‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äér‚Äéu‚Äén‚Äé ‚Äéa‚Äé ‚ÄéP‚ÄéR‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äég‚Äéo‚Äét‚Äé ‚Äéi‚Äén‚Äéd‚Äéi‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚Äéa‚Äén‚Äét‚Äéh‚Äée‚Äém‚Äé
[‚Äé0‚Äé0‚Äé:‚Äé2‚Äé1‚Äé]‚Äé ‚Äé<‚Äé@‚Äéd‚Äée‚Äém‚Äéo‚Äég‚Äéo‚Äér‚Äég‚Äéo‚Äé>‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äéd‚Äéi‚Äéa‚Äén‚Äé ‚Äés‚Äéc‚Äéa‚Äém‚Äém‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äér‚Äéy‚Äép‚Äét‚Äéo‚Äé ‚Äép‚Äéu‚Äém‚Äép‚Äée‚Äér‚Äés‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äé ‚Äée‚Äéx‚Äép‚Äél‚Äéo‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äée‚Äét‚Äé ‚Äéc‚Äél‚Äéi‚Äép‚Äés‚Äé,‚Äé ‚Äéi‚Äét‚Äé'‚Äés‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé
‚Äé0‚Äé3‚Äé[‚Äé0‚Äé0‚Äé:‚Äé2‚Äé4‚Äé]‚Äé ‚Äé*‚Äé ‚Äék‚Äéi‚Äét‚Äék‚Äéa‚Äét‚Äé ‚Äé(‚Äé~‚Äéu‚Äés‚Äée‚Äér‚Äé@‚Äé2‚Äé0‚Äé0‚Äé1‚Äé:‚Äéa‚Äéc‚Äé8‚Äé:‚Äé7‚Äéd‚Äé:‚Äéa‚Äé1‚Äé:‚Äé:‚Äé2‚Äé4‚Äé)‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéj‚Äéo‚Äéi‚Äén‚Äée‚Äéd‚Äé ‚Äé#‚ÄéL‚ÄéR‚ÄéH‚Äé
 ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
	‚Äé
O‚Äéx‚Äéy‚Äéb‚Äée‚Äél‚Äéi‚Äés‚Äé ‚Äéa‚Äée‚Äén‚Äée‚Äéu‚Äés‚Äé,‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äév‚Äéi‚Äén‚Äée‚Äé ‚Äés‚Äén‚Äéa‚Äék‚Äée‚Äé ‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äér‚Äéo‚Äéw‚Äén‚Äé ‚Äév‚Äéi‚Äén‚Äée‚Äé ‚Äés‚Äén‚Äéa‚Äék‚Äée‚Äé,‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äém‚Äéi‚Äél‚Äéy‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äéb‚Äér‚Äéi‚Äéd‚Äéa‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äél‚Äéu‚Äéb‚Äér‚Äéi‚Äéd‚Äé ‚Äés‚Äén‚Äéa‚Äék‚Äée‚Äés‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äée‚Äén‚Äéd‚Äée‚Äém‚Äéi‚Äéc‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äés‚Äé,‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äéu‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äéo‚Äéu‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚ÄéA‚Äér‚Äéi‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé ‚Äés‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéo‚Äé ‚Äét‚Äéo‚Äé ‚Äén‚Äéo‚Äér‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äér‚Äéi‚Äén‚Äéi‚Äéd‚Äéa‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéo‚Äéb‚Äéa‚Äég‚Äéo‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äéu‚Äés‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äée‚Äén‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äér‚Äée‚Äée‚Äés‚Äé ‚Äéo‚Äér‚Äé ‚Äés‚Äéh‚Äér‚Äéu‚Äéb‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äéo‚Äép‚Äée‚Äén‚Äé,‚Äé ‚Äés‚Äét‚Äée‚Äée‚Äép‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äég‚Äér‚Äéa‚Äés‚Äés‚Äéy‚Äé ‚Äés‚Äél‚Äéo‚Äép‚Äée‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéa‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéw‚Äéo‚Äéo‚Äéd‚Äée‚Äéd‚Äé ‚Äéc‚Äéa‚Äén‚Äéy‚Äéo‚Äén‚Äés‚Äé,‚Äé ‚Äée‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äét‚Äéh‚Äéo‚Äés‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äéb‚Äéu‚Äén‚Äéd‚Äéa‚Äén‚Äét‚Äé ‚Äév‚Äée‚Äég‚Äée‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéI‚Äét‚Äés‚Äé ‚Äéd‚Äéi‚Äée‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äéi‚Äés‚Äét‚Äés‚Äé ‚Äém‚Äéa‚Äéi‚Äén‚Äél‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äél‚Äéi‚Äéz‚Äéa‚Äér‚Äéd‚Äés‚Äé ‚Äé(‚Äém‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚Äéa‚Äén‚Äéo‚Äél‚Äée‚Äés‚Äé)‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äée‚Äéa‚Äét‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äég‚Äés‚Äé,‚Äé ‚Äés‚Äém‚Äéa‚Äél‚Äél‚Äé ‚Äér‚Äéo‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äéi‚Äér‚Äéd‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚ÄéO‚Äé.‚Äé ‚Äéa‚Äée‚Äén‚Äée‚Äéu‚Äés‚Äé ‚Äés‚Äén‚Äéa‚Äék‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéG‚Äéu‚Äél‚Äéf‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéo‚Äé ‚Äéc‚Äéo‚Äéa‚Äés‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéE‚Äél‚Äé ‚ÄéP‚Äéa‚Äél‚Äém‚Äéa‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéR‚Äée‚Äés‚Äée‚Äér‚Äév‚Äée‚Äé,‚Äé ‚Äén‚Äée‚Äéa‚Äér‚Äé ‚ÄéS‚Äéi‚Äés‚Äéa‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéY‚Äéu‚Äéc‚Äéa‚Äét‚Äé√°‚Äén‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äés‚Äém‚Äéo‚Äén‚Äéa‚Äéu‚Äét‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé

W‚Äée‚Äél‚Äél‚Äé ‚Äén‚Äéo‚Äér‚Äém‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚ÄéH‚Äéa‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äée‚Äéa‚Äéd‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äém‚Äéy‚Äé ‚Äéb‚Äéa‚Äés‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé'‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äér‚Äée‚Äée‚Äép‚Äéi‚Äée‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äék‚Äéi‚Äén‚Äéd‚Äéa‚Äé ‚Äés‚Äéu‚Äéc‚Äék‚Äés‚Äé,‚Äé ‚Äés‚Äéo‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äéw‚Äéa‚Äéi‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéh‚Äéo‚Äét‚Äé ‚Äét‚Äée‚Äée‚Äén‚Äéa‚Äég‚Äée‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äés‚Äél‚Äéu‚Äét‚Äét‚Äéy‚Äé ‚Äéo‚Äéu‚Äét‚Äéf‚Äéi‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéy‚Äé ‚Äéd‚Äéo‚Äéo‚Äér‚Äé ‚Äés‚Äéo‚Äé ‚ÄéI‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéj‚Äéi‚Äéz‚Äéz‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé.‚Äé"
zE3Cfu8G,stairdigger,Neon1432,Lua,Thursday 30th of October 2025 12:58:51 PM CDT,"local args = { ... }
local levels = 5
local safemode = true
if #args ~= 0 then
    if tonumber(args[1]) == nil then
        error(""input must be a number"")
    else
        levels = tonumber(args[1])
    end

    if args[2] ~= nil then
        safemode = false
    end
end

local BUILDINGBLOCK = { [1] = ""minecraft:cobblestone"", [2] = ""minecraft:cobbled_deepslate"" }
local LIGHTING = { [1] = ""minecraft:torch"" }
local TORCHDISTANCE = 7
local HOLEDISTANCE = 5

local levelCounter = 0
local holeCounter = 0
local torchCounter = 0

local function selectItem(blockGroup)
    local function isItem(itemName)
        local details = turtle.getItemDetail()
        if details ~= nil then
            if details.name == itemName then
                return true
            end
        end
        return false
    end
    local function itereateAllFields(itemName)
        if isItem(itemName) then return true end
        for i = 1, 16, 1 do
            turtle.select(i)
            if isItem(itemName) then return true end
        end
        return false
    end
    if blockGroup.lastIndex ~= nil then
        if itereateAllFields(blockGroup[blockGroup.lastIndex]) then return true end
    end
    for groupIndex = 1, #blockGroup, 1 do
        if itereateAllFields(blockGroup[groupIndex]) then
            blockGroup.lastIndex = groupIndex
            return true
        end
    end
    error(""Item not found in List: "" .. textutils.serialise(blockGroup))
end

local function digHole()
    if not turtle.inspect() then return false end
    for i = 1, 4, 1 do
        while not turtle.forward() do
            turtle.dig()
        end
    end
    turtle.back()
    turtle.back()
    turtle.back()
    turtle.back()
end

local function digLevel()
    while not turtle.forward() do
        turtle.dig()
    end

    selectItem(BUILDINGBLOCK)
    turtle.placeDown()

    if safemode then
        turtle.turnRight()
        selectItem(BUILDINGBLOCK)
        turtle.place()
        turtle.turnLeft()
        turtle.turnLeft()
        selectItem(BUILDINGBLOCK)
        turtle.place()
        turtle.turnRight()
    end

    while not turtle.up() do
        turtle.digUp()
    end
    selectItem(BUILDINGBLOCK)
    turtle.placeUp()
end

local function digSection()
    digLevel()

    if holeCounter >= HOLEDISTANCE then
        turtle.turnLeft()
        digHole()
        turtle.turnRight()
        turtle.turnRight()
        digHole()
        turtle.turnLeft()
        holeCounter = 0
    end

    if turtle.inspectDown() then return error(""not safe"") end
    turtle.down()
    if turtle.inspectUp() then return error(""not safe"") end
    if torchCounter >= TORCHDISTANCE then
        turtle.turnRight()
        turtle.turnRight()
        selectItem(LIGHTING)
        turtle.place()
        turtle.turnLeft()
        turtle.turnLeft()
        torchCounter = 0
    end
end

while levelCounter < levels do
    digSection()
    levelCounter = levelCounter + 1
    holeCounter = holeCounter + 1
    torchCounter = torchCounter + 1
end
"
XUPmtivh,Adopt me Script Hub,AFBv1,Lua,Thursday 30th of October 2025 11:45:04 AM CDT,"https://discord.gg/AaGwpM8j

Adopt me Script Hub

loadstring(game:HttpGet(""https://raw.githubusercontent.com/fetbobbymope1-cmyk/AdoptMeScript/refs/heads/main/Pro""))()"
YEVLLUpy,Roblox Script,Michal_141,C++,Thursday 30th of October 2025 10:57:33 AM CDT,"-- PS99-Halloween GUI - Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = ""Galaxy HUB"",
    LoadingTitle = ""Galaxy HUB"",
    LoadingSubtitle = ""by Galaxy HUB"",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = ""PS99HalloweenConfig""
    },
    Discord = {Enabled = false},
    KeySystem = false
})

-- Jedna hlavn√≠ z√°lo≈æka
local MainTab = Window:CreateTab(""PS99-Halloween"")

-- ===========================
-- Sekce 1: Auto Pick Pets
-- ===========================
local autoPick = false
MainTab:CreateSection(""Auto Pick Pets"")

MainTab:CreateToggle({
    Name = ""Auto Pick Pets"",
    CurrentValue = false,
    Flag = ""AutoPickPets"",
    Callback = function(value)
        autoPick = value
        if autoPick then
            spawn(function()
                while autoPick do
                    for i = 1,10 do
                        local args = {[1]=i}
                        game:GetService(""ReplicatedStorage""):WaitForChild(""Network""):WaitForChild(""HalloweenWorld_PickUp""):InvokeServer(unpack(args))
                    end
                    task.wait(0.5)
                end
            end)
        end
    end
})

-- ===========================
-- Sekce 2: Auto Egg
-- ===========================
MainTab:CreateSection(""Auto Egg"")
local eggToggles = {}

local eggList = {
    ""Pumpkin Egg"",
    ""Coffin Egg"",
    ""Reaper Egg"",
    ""Spider Egg"",
    ""Cauldron Egg"",
    ""Ghost Egg"",
    ""Bat Egg"",
    ""Grave Egg""
}

for _, eggName in ipairs(eggList) do
    eggToggles[eggName] = false
    MainTab:CreateToggle({
        Name = eggName,
        CurrentValue = false,
        Flag = eggName..""Toggle"",
        Callback = function(value)
            eggToggles[eggName] = value
            if value then
                spawn(function()
                    while eggToggles[eggName] do
                        for i=1,10 do
                            local args = {[1]=i,[2]=eggName}
                            game:GetService(""ReplicatedStorage""):WaitForChild(""Network""):WaitForChild(""HalloweenWorld_PlaceEgg""):InvokeServer(unpack(args))
                        end
                        task.wait(0.5)
                    end
                end)
            end
        end
    })
end"
bE1LqpqE,Untitled,Cranch,C++,Thursday 30th of October 2025 10:21:07 AM CDT,"for (SDK::FKConvexElem& convexElement : bodySetup->AggGeom.ConvexElems)
{
				const SDK::TArray<SDK::FVector>& vertexData = convexElement.VertexData;
				const size_t vertexDataLength = vertexData.Num();
				if (vertexDataLength == 0)
					continue;

				const SDK::TArray<int32_t>& indexData = convexElement.IndexData;
				const size_t indexDataLength = indexData.Num();
				if (indexDataLength < 3 || indexDataLength % 3 != 0)
					continue;

				for (int32_t i = 0; i + 2 < indexDataLength; i += 3)
				{
					int32_t A_Index = indexData[i];
					int32_t B_Index = indexData[i + 1];
					int32_t C_Index = indexData[i + 2];

					if (A_Index < 0 || A_Index >= vertexDataLength ||
						B_Index < 0 || B_Index >= vertexDataLength ||
						C_Index < 0 || C_Index >= vertexDataLength)
						continue;

					if (A_Index == B_Index || B_Index == C_Index || C_Index == A_Index)
						continue;

					SDK::FVector A_Local = vertexData[A_Index];
					SDK::FVector B_Local = vertexData[B_Index];
					SDK::FVector C_Local = vertexData[C_Index];

					SDK::FVector A_World = SDK::UKismetMathLibrary::TransformLocation(transform, A_Local);
					SDK::FVector B_World = SDK::UKismetMathLibrary::TransformLocation(transform, B_Local);
					SDK::FVector C_World = SDK::UKismetMathLibrary::TransformLocation(transform, C_Local);

					SDK::FVector2D A_Screen, B_Screen, C_Screen;
					bool A_Project = SDK::UGameplayStatics::ProjectWorldToScreen(playerController, A_World, &A_Screen, false);
					bool B_Project = SDK::UGameplayStatics::ProjectWorldToScreen(playerController, B_World, &B_Screen, false);
					bool C_Project = SDK::UGameplayStatics::ProjectWorldToScreen(playerController, C_World, &C_Screen, false);

					if (A_Project && B_Project && C_Project)
					{
						iDrawList->AddLine(ImVec2(A_Screen.X, A_Screen.Y), ImVec2(B_Screen.X, B_Screen.Y), color, 0.5f);
						iDrawList->AddLine(ImVec2(B_Screen.X, B_Screen.Y), ImVec2(C_Screen.X, C_Screen.Y), color, 0.5f);
						iDrawList->AddLine(ImVec2(C_Screen.X, C_Screen.Y), ImVec2(A_Screen.X, A_Screen.Y), color, 0.5f);
					}
				}
}"
1ZDYaEVX,worker_energy_core_reader,SuperMcBrent,Lua,Thursday 30th of October 2025 09:42:43 AM CDT,"-- peripheral setup
local core = peripheral.wrap(""draconic_rf_storage_3"")
peripheral.find(""modem"", rednet.open)
local inputdetector = peripheral.wrap(""energy_detector_4"")
local outputdetector = peripheral.wrap(""energy_detector_3"")
-- variables setup

local function getCoreTier(max)
    local tier = 0
    if max < 50000000 then
        tier = 1
    elseif max < 300000000 then
        tier = 2
    elseif max < 2000000000 then
        tier = 3
    elseif max < 10000000000 then
        tier = 4
    elseif max < 50000000000 then
        tier = 5
    elseif max < 400000000000 then
        tier = 6
    elseif max < 3000000000000 then
        tier = 7
    else
        tier = 8
    end
    return tier
end

function getRequest()
    local sender, message, protocol = rednet.receive()
    if message == ""provideCoreData"" then
        local now = core.getEnergyStored()
        local max = core.getMaxEnergyStored()
        local energyRate = core.getTransferPerTick()
        local energyIn = inputdetector.getTransferRate()
        local energyOut = outputdetector.getTransferRate()
        local core_data = {
            now = now,
            max = max,
            rate = energyRate,
            tier = getCoreTier(max),
            input = energyIn,
            output = energyOut
        }
        print(os.time() .. textutils.serializeJSON(message))
        rednet.send(sender, core_data, protocol)
    end
end

local function waitForRequest()
    parallel.waitForAny(wait, getRequest)
end

function wait()
    sleep(0.5)
end

while true do
    waitForRequest()
end
"
sHbYtdc1,app_energy_storage,SuperMcBrent,Lua,Thursday 30th of October 2025 09:40:44 AM CDT,"-- Draconic Core Energy Reader app

local protocol = ""energystorage""

-- IDs for buttons
local testBtnId = ""test_energy_storage""

-- padding for top-left placement
local PADDING_X, PADDING_Y = 3, 4

-- state variables
local lastMessage = nil

-- views
local function rootView(ctx)
    return {
        draw = function(ctx, mon)
            local x, y = PADDING_X, PADDING_Y
            local W, H = ctx.os.size()

            if not lastMessage then
                return
            end

            local percent = math.floor((lastMessage.now / lastMessage.max * 100) + 0.5)

            -- circle and big value
            ctx.libs().draw.drawCircle(x, y + 1, 32, colors.purple, true, mon)
            ctx.libs().draw.drawCircle(x, y + 1, 32, colors.red, false, mon)
            ctx.libs().draw.drawNumber(x + 5 + (#tostring(percent) - 1) * 3, y + 9, percent, colors.white, 1, false, mon)

            -- stats
            ctx.libs().draw.drawTitle(x + 40, y + 1, ""Draconic Energy Core Stats"", colors.white, colors.black, mon)
            ctx.libs().draw.drawTitle(x + 40, y + 2, string.rep(""-"", 26), colors.white, colors.black, mon)

            ctx.libs().draw.drawTitle(x + 40, y + 4, ""Now: "" .. lastMessage.now .. "" RF"", colors.white, colors.black, mon)
            ctx.libs().draw.drawTitle(x + 40, y + 6, ""Max: "" .. lastMessage.max .. "" RF"", colors.white, colors.black, mon)
            ctx.libs().draw.drawTitle(x + 40, y + 8, ""Change: "" .. lastMessage.rate .. "" RF/t"", colors.white,
                colors.black, mon)
            ctx.libs().draw.drawTitle(x + 40, y + 10, ""Tier: "" .. lastMessage.tier, colors.white, colors.black, mon)
            ctx.libs().draw.drawTitle(x + 40, y + 12, ""Input: "" .. lastMessage.input .. "" RF/t"", colors.white,
                colors.black, mon)
            ctx.libs().draw.drawTitle(x + 40, y + 14, ""Output: "" .. lastMessage.output .. "" RF/t"", colors.white,
                colors.black, mon)

            -- line above progress bar
            ctx.libs().draw.drawTitle(1, H - 6, string.rep(""-"", W), colors.white, colors.black, mon)

            -- progress bar
            ctx.libs().draw.drawTitle(2, H - 5, ""0%"", colors.white, colors.black, mon)
            ctx.libs().draw.drawTitle(W - 4, H - 5, ""100%"", colors.white, colors.black, mon)
            ctx.libs().draw.drawProg(2, H - 4, W - 2, 4, lastMessage.now, lastMessage.max, colors.lime, colors.gray, mon)
        end,
        touch = function(ctx, x, y)
            if ctx.libs().button.isWithinBoundingBox(x, y, testBtnId) then
                ctx.os.transmit(""provideCoreData"", protocol)
            end
        end
    }
end

local views = {
    root = rootView
}

return {
    id = ""energystorage"",
    name = ""Core"",
    protocol = protocol,
    receive = function(ctx, sender, message)
        ---print(textutils.serializeJSON(message))
        lastMessage = message
    end,
    create = function(ctx) end,
    destroy = function(ctx) end,
    resume = function(ctx) end,
    suspend = function(ctx) end,
    update = function(ctx, dt)
        ctx.os.transmit(""provideCoreData"", protocol)
    end,
    draw = function(ctx, mon, viewId)
        local v = views[viewId]
        if v and v(ctx).draw then v(ctx).draw(ctx, mon) end
    end,
    touch = function(ctx, x, y, viewId)
        local v = views[viewId]
        if v and v(ctx).touch then v(ctx).touch(ctx, x, y) end
    end
}
"
eE91f4DL,–ú—ñ—Ä–æ—à–Ω–∏—á–µ–Ω–∫–æ_–ö–ú–ó–ü–ú_–õ–†‚Ññ4,mirosh111000,Python,Thursday 30th of October 2025 09:32:46 AM CDT,"from __future__ import annotations
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import ConnectionPatch



BETA = 0.9 
EPS = 4.0
RHO = 0.25


CROSSES = [
    (0.1, 0.75), (0.1, 1.3), (0.1, 1.8),
    (0.2, 0.75), (0.2, 1.3), (0.2, 1.8),
]


P_MIN, P_MAX, P_POINTS = 0.0, 0.5, 220
T_MIN, T_MAX, T_POINTS = 0.05, 2.00, 150
K_MAX, K_POINTS = 3.0, 400



def mu_of(c: np.ndarray | float) -> np.ndarray | float:

    return c * (1.0 - c)


def f_c(c: np.ndarray | float, P: float, T: float, beta: float = BETA, eps: float = EPS, Dpar: float = 0.1) -> np.ndarray | float:

    return (
        P * (1.0 - c) * (1.0 - beta * c)
        - c * (1.0 - beta * c) * np.exp(-2.0 * eps * c / T)
        - Dpar * c * (1.0 - beta)
    )


def df_dc(c: float, P: float, T: float, beta: float = BETA, eps: float = EPS, Dpar: float = 0.1) -> float:


    term1 = P * (-(1.0 + beta) + 2.0 * beta * c)

    g  = c - beta * c * c   
    gp = 1.0 - 2.0 * beta * c     
    h  = np.exp(-2.0 * eps * c / T) 
    hp = (-2.0 * eps / T) * h 
    term2 = -gp * h + (2.0 * eps / T) * g * h

    term3 = -Dpar * (1.0 - beta)
    return float(term1 + term2 + term3)




def find_c_st(P: float, T: float, beta: float = BETA, eps: float = EPS, Dpar: float = 0.1,
               tol: float = 1e-10, maxit: int = 200) -> float:

    a, b = 0.0, 1.0
    fa = f_c(a, P, T, beta, eps, Dpar)
    fb = f_c(b, P, T, beta, eps, Dpar)
    if fa * fb > 0:  
        xs = np.linspace(0.0, 1.0, 2001)
        vals = f_c(xs, P, T, beta, eps, Dpar)
        s = np.sign(vals)
        idx = np.where(s[:-1] * s[1:] <= 0)[0]
        if len(idx) == 0:

            return float(xs[np.argmin(np.abs(vals))])
        a, b = float(xs[idx[0]]), float(xs[idx[0] + 1])
        fa, fb = float(vals[idx[0]]), float(vals[idx[0] + 1])
    for _ in range(maxit):
        m = 0.5 * (a + b)
        fm = f_c(m, P, T, beta, eps, Dpar)
        if abs(fm) < tol or (b - a) < tol:
            return float(m)
        if fa * fm <= 0:
            b, fb = m, fm
        else:
            a, fa = m, fm
    return float(0.5 * (a + b))




def lambda_k(k: np.ndarray, P: float, T: float, Dpar: float = 0.1,
              beta: float = BETA, eps: float = EPS, rho: float = RHO) -> np.ndarray:
    T_eff = max(T, 1e-9)
    cst = find_c_st(P, T_eff, beta=beta, eps=eps, Dpar=Dpar)
    lam0 = df_dc(cst, P, T_eff, beta=beta, eps=eps, Dpar=Dpar)
    mu   = mu_of(cst)
    return lam0 - k**2 * (1.0 - 2.0 * (eps / T_eff) * mu * (1.0 - (rho**2) * k**2))




def max_lambda_over_k(P: float, T: float, Dpar: float) -> float:
    ks = np.linspace(0.0, K_MAX, K_POINTS)
    lams = lambda_k(ks, P, T, Dpar=Dpar)
    return float(np.max(lams))


def Tcrit_numeric_for_P(P: float, Dpar: float, t_min: float = T_MIN, t_max: float = T_MAX,
                        nT: int = T_POINTS) -> float | float('nan'):

    Ts = np.linspace(t_min, t_max, nT)
    phi = np.array([max_lambda_over_k(P, T, Dpar) for T in Ts])
    sgn = np.sign(phi)
    roots = []
    for i in range(len(Ts) - 1):
        if sgn[i] == 0:
            roots.append(Ts[i]); continue
        if sgn[i] * sgn[i + 1] < 0: 
            a, b = Ts[i], Ts[i + 1]
            fa, fb = phi[i], phi[i + 1]

            for _ in range(40):
                m = 0.5 * (a + b)
                fm = max_lambda_over_k(P, m, Dpar)
                if abs(fm) < 1e-6 or (b - a) < 1e-3:
                    roots.append(m); break
                if fa * fm <= 0:
                    b, fb = m, fm
                else:
                    a, fa = m, fm
    if len(roots) == 0:
        return float('nan')
    return float(np.max(roots)) 


def Tcrit_curve(P_grid: np.ndarray, Dpar: float) -> tuple[np.ndarray, np.ndarray]:
    T_vals = np.array([Tcrit_numeric_for_P(P, Dpar) for P in P_grid])
    mask = np.isfinite(T_vals)
    return P_grid[mask], T_vals[mask]




def plot_PT_main():
    P_grid = np.linspace(P_MIN, P_MAX, P_POINTS)
    P_b, T_b = Tcrit_curve(P_grid, Dpar=0.1)
    P_r, T_r = Tcrit_curve(P_grid, Dpar=0.5)

    fig, ax = plt.subplots(figsize=(9.5, 5.5), dpi=130)
    ax.plot(P_b, T_b, 'k-', lw=2.2, label=r'$D_\parallel=0.1$')
    ax.plot(P_r, T_r, 'r--', lw=2.2, label=r'$D_\parallel=0.5$')
    for (p, t) in CROSSES:
        ax.plot(p, t, 'kx', ms=8, mew=1.8)
    ax.set_xlim(P_MIN, P_MAX)
    ax.set_ylim(0.0, T_MAX)
    ax.set_xlabel('P'); ax.set_ylabel('T')
    ax.text(0.04, 1.72, 'B', fontsize=12)
    ax.text(0.44, 0.32,  'A', fontsize=12)
    ax.legend(loc='upper right', frameon=False)
    ax.set_title('–£–º–æ–≤–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä')
    plt.tight_layout(); plt.show()


def plot_lambda_small(P_val: float, T_val: float):
    ks = np.linspace(0.0, K_MAX, K_POINTS)
    lam_b = lambda_k(ks, P_val, T_val, Dpar=0.1)
    lam_r = lambda_k(ks, P_val, T_val, Dpar=0.5)
    fig, ax = plt.subplots(figsize=(5.3, 4.0), dpi=130)
    ax.plot(ks, lam_b, 'k-', lw=2, label=r'$D_\parallel=0.1$')
    ax.plot(ks, lam_r, 'r--', lw=2, label=r'$D_\parallel=0.5$')
    ax.axhline(0.0, color='gray', lw=1)
    ax.set_xlim(0.0, K_MAX)
    ax.set_xlabel('k'); ax.set_ylabel(r'$\lambda(k)$')
    ax.set_title(f'Œª(k): P={P_val:.3f}, T={T_val:.3f}')
    ax.legend(loc='upper right', frameon=False, fontsize=9)
    plt.tight_layout(); plt.show()


def lambda_max_point(P_val: float, T_val: float, Dpar: float) -> tuple[float, float]:
    ks = np.linspace(0.0, K_MAX, K_POINTS)
    lam = lambda_k(ks, P_val, T_val, Dpar=Dpar)
    i = int(np.argmax(lam))
    return float(ks[i]), float(lam[i])


def plot_composite():

    P_grid = np.linspace(P_MIN, P_MAX, P_POINTS)
    P_b, T_b = Tcrit_curve(P_grid, Dpar=0.1)
    P_r, T_r = Tcrit_curve(P_grid, Dpar=0.5)


    fig = plt.figure(figsize=(13.5, 8.4), dpi=120)
    gs = fig.add_gridspec(3, 3, width_ratios=[1.3, 2.2, 1.3], wspace=0.35, hspace=0.35)

    axC = fig.add_subplot(gs[:, 1])
    axC.plot(P_b, T_b, 'k-', lw=2.2, label=r'$D_\parallel=0.1$')
    axC.plot(P_r, T_r, 'r--', lw=2.2, label=r'$D_\parallel=0.5$')
    for (p, t) in CROSSES:
        axC.plot(p, t, 'k*', ms=9)
    axC.set_xlim(P_MIN, P_MAX); axC.set_ylim(0.0, T_MAX)
    axC.set_xlabel('P'); axC.set_ylabel('T')
    axC.legend(loc='upper right', frameon=False)
    axC.set_title('–£–º–æ–≤–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä')


    left_points  = CROSSES[2::-1]   # (1.8, 1.3, 0.75) –ø—Ä–∏ P=0.1
    right_points = CROSSES[5:2:-1]  # (1.8, 1.3, 0.75) –ø—Ä–∏ P=0.2

    def add_lambda_panel(ax, P_val, T_val):
        ks = np.linspace(0.0, K_MAX, K_POINTS)
        lam_b = lambda_k(ks, P_val, T_val, Dpar=0.1)
        lam_r = lambda_k(ks, P_val, T_val, Dpar=0.5)
        ax.plot(ks, lam_b, 'k-', lw=2, label=r'$D_\parallel=0.1$')
        ax.plot(ks, lam_r, 'r--', lw=2, label=r'$D_\parallel=0.5$')
        ax.axhline(0.0, color='gray', lw=1)
        ax.set_xlim(0.0, K_MAX)
        ax.set_title(f'P={P_val:.3f}, T={T_val:.3f}', fontsize=10)
        ax.set_xlabel('k'); ax.set_ylabel(r'$\lambda(k)$')

        km, lm = lambda_max_point(P_val, T_val, Dpar=0.5)
        ax.plot(km, lm, 'o', color='#2b6fff', ms=5)
        return km, lm

    left_axes = [fig.add_subplot(gs[i, 0]) for i in range(3)]
    for ax, (p, t) in zip(left_axes, left_points):
        km, lm = add_lambda_panel(ax, p, t)
        con = ConnectionPatch(xyA=(km, lm), coordsA=ax.transData,
                              xyB=(p, t),   coordsB=axC.transData,
                              arrowstyle='->', lw=1.6, color='#2b6fff')
        fig.add_artist(con)

    right_axes = [fig.add_subplot(gs[i, 2]) for i in range(3)]
    for ax, (p, t) in zip(right_axes, right_points):
        km, lm = add_lambda_panel(ax, p, t)
        con = ConnectionPatch(xyA=(km, lm), coordsA=ax.transData,
                              xyB=(p, t),   coordsB=axC.transData,
                              arrowstyle='->', lw=1.6, color='#2b6fff')
        fig.add_artist(con)

    plt.show()
    plt.close(fig)



if __name__ == '__main__':

    plot_PT_main()

    for i, (p, t) in enumerate(CROSSES, start=1):
        plot_lambda_small(p, t)

    plot_composite()
"
jTpJVa8t,fak,cosenza987,C++,Thursday 30th of October 2025 09:16:21 AM CDT,"//–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ, –ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞

#include <bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define pb push_back
#define cl(x,v) memset((x), (v), sizeof(x))
#define db(x) cerr << #x << "" == "" << x << endl
#define dbs(x) cerr << x << endl
#define _ << "", "" <<

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, pll> plll;
typedef vector<int> vi;
typedef vector <vi> vii;

const ld EPS = 1e-7, PI = acos(-1.);
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f, MOD = 1e9 + 7;
const int N = 1e5 + 5;

//for big coordinates change to long long
typedef long double type;

/* The functions above are for:
    ge => greater or equal
    le => lesser or equal
    eq => equal
    sign => sign of a number (+ or -)
*/
bool ge(type x, type y) { return x > y - EPS; }
bool le(type x, type y) { return x - EPS < y; }
bool eq(type x, type y) { return ge(x, y) and le(x, y); }
int sign(type x) { return ge(x, 0) - le(x, 0); }

struct point {
    type x, y;

    point() : x(0), y(0) {}
    point(type _x, type _y) : x(_x), y(_y) {}

    point operator -() { return point(-x, -y); }
    point operator +(point p) { return point(x + p.x, y + p.y); }
    point operator -(point p) { return point(x - p.x, y - p.y); }

    point operator *(type k) { return point(x * k, y * k); }
    point operator /(type k) { return point(x / k, y / k); }

    //inner product
    type operator *(point p) { return x * p.x + y * p.y; }
    //cross product
    type operator %(point p) { return x * p.y - y * p.x; }

    bool operator ==(const point& p) const { return x == p.x and y == p.y; }
    bool operator !=(const point& p) const { return x != p.x or y != p.y; }
    bool operator <(const point& p) const { return (x < p.x) or (x == p.x and y < p.y); }

    // 0 => same direction
    // 1 => other is on the left 
    //-1 => other is on the right 
    int dir(point origin, point other) {
        type d = (*this - origin) % (other - origin);
        return ge(d, 0) - le(d, 0);
    }

    bool on_seg(point p, point q) {
        if (this->dir(p, q)) return 0;
        return ge(x, min(p.x, q.x)) and le(x, max(p.x, q.x)) and ge(y, min(p.y, q.y)) and le(y, max(p.y, q.y));
    }

    ld abs() { return sqrt(x * x + y * y); }
    type abs2() { return x * x + y * y; }
    ld dist(point q) { return (*this - q).abs(); }
    type dist2(point q) { return (*this - q).abs2(); }

    ld arg() { return atan2l(y, x); }

    // Project point on vector y
    point project(point y) { return y * ((*this * y) / (y * y)); }

    // Project point on line generated by points x and y
    point project(point x, point y) { return x + (*this - x).project(y - x); }

    ld dist_line(point x, point y) { return dist(project(x, y)); }

    ld dist_seg(point x, point y) {
        return project(x, y).on_seg(x, y) ? dist_line(x, y) : min(dist(x), dist(y));
    }

    point rotate(ld sin, ld cos) { return point(cos * x - sin * y, sin * x + cos * y); }
    point rotate(ld a) { return rotate(sin(a), cos(a)); }

    // rotate around the argument of vector p
    point rotate(point p) { return rotate(p.y / p.abs(), p.x / p.abs()); }

};

int direction(point origin, point p, point other) { return p.dir(origin, other); }

//rotates 90 degrees counter clockwise
point rotate_ccw90(point p) { return point(-p.y, p.x); }
//rotates 90 degrees clockwise
point rotate_cw90(point p) { return point(p.y, -p.x); }

//for reading purposes avoid using * and % operators, use the functions below:
type dot(point p, point q) { return p.x * q.x + p.y * q.y; }
type cross(point p, point q) { return p.x * q.y - p.y * q.x; }

//twice the area of a triangle
type area_2(point a, point b, point c) { return cross(a, b) + cross(b, c) + cross(c, a); }

/*Compares the absolute angle defined by (a1 and b1) vs angle defined by (a2 and b2)
    1  : bigger
    -1 : smaller
    0  : equal
Example:
    angle_less(point(1, 0) , point(0, 1), point(-1, 0), point(-1, -1)) == 1

    the angle formed by the two first vectors is 90 degrees
    the angle formed by the two last vectors is 45 degrees
*/
int angle_less(const point& a1, const point& b1, const point& a2, const point& b2) {
    point p1(dot(a1, b1), abs(cross(a1, b1)));
    point p2(dot(a2, b2), abs(cross(a2, b2)));
    if (cross(p1, p2) < 0) return 1;
    if (cross(p1, p2) > 0) return -1;
    return 0;
}

ostream& operator<<(ostream& os, const point& p) {
    os << ""("" << p.x << "","" << p.y << "")"";
    return os;
}

point project_point_line(point c, point a, point b) {
    ld r = dot(b - a, b - a);
    if (fabs(r) < EPS) return a;
    return a + (b - a) * dot(c - a, b - a) / dot(b - a, b - a);
}

point project_point_ray(point c, point a, point b) {
    ld r = dot(b - a, b - a);
    if (fabs(r) < EPS) return a;
    r = dot(c - a, b - a) / r;
    if (le(r, 0)) return a;
    return a + (b - a) * r;
}

point project_point_segment(point c, point a, point b) {
    ld r = dot(b - a, b - a);
    if (fabs(r) < EPS) return a;
    r = dot(c - a, b - a) / r;
    if (le(r, 0)) return a;
    if (ge(r, 1)) return b;
    return a + (b - a) * r;
}

ld distance_point_line(point c, point a, point b) {
    return c.dist2(project_point_line(c, a, b));
}

ld distance_point_ray(point c, point a, point b) {
    return c.dist2(project_point_ray(c, a, b));
}

ld distance_point_segment(point c, point a, point b) {
    return c.dist2(project_point_segment(c, a, b));
}

//not tested
ld distance_point_plane(ld x, ld y, ld z,
    ld a, ld b, ld c, ld d)
{
    return fabs(a * x + b * y + c * z - d) / sqrt(a * a + b * b + c * c);
}

bool lines_parallel(point a, point b, point c, point d) {
    return fabs(cross(b - a, d - c)) < EPS;
}

bool lines_collinear(point a, point b, point c, point d) {
    return lines_parallel(a, b, c, d)
        && fabs(cross(a - b, a - c)) < EPS
        && fabs(cross(c - d, c - a)) < EPS;
}

point lines_intersect(point p, point q, point a, point b) {
    point r = q - p, s = b - a, c(p % q, a % b);
    if (eq(r % s, 0)) return point(LINF, LINF);
    return point(point(r.x, s.x) % c, point(r.y, s.y) % c) / (r % s);
}

//be careful: test line_line_intersection before using this function
point compute_line_intersection(point a, point b, point c, point d) {
    b = b - a; d = c - d; c = c - a;
    assert(dot(b, b) > EPS && dot(d, d) > EPS);
    return a + b * cross(c, d) / cross(b, d);
}

bool line_line_intersect(point a, point b, point c, point d) {
    if (!lines_parallel(a, b, c, d)) return true;
    if (lines_collinear(a, b, c, d)) return true;
    return false;
}

//rays in direction a -> b, c -> d
bool ray_ray_intersect(point a, point b, point c, point d) {
    if (a.dist2(c) < EPS || a.dist2(d) < EPS ||
        b.dist2(c) < EPS || b.dist2(d) < EPS) return true;
    if (lines_collinear(a, b, c, d)) {
        if (ge(dot(b - a, d - c), 0)) return true;
        if (ge(dot(a - c, d - c), 0)) return true;
        return false;
    }
    if (!line_line_intersect(a, b, c, d)) return false;
    point inters = lines_intersect(a, b, c, d);
    if (ge(dot(inters - c, d - c), 0) && ge(dot(inters - a, b - a), 0)) return true;
    return false;
}

bool segment_segment_intersect(point a, point b, point c, point d) {
    if (a.dist2(c) < EPS || a.dist2(d) < EPS ||
        b.dist2(c) < EPS || b.dist2(d) < EPS) return true;
    int d1, d2, d3, d4;
    d1 = direction(a, b, c);
    d2 = direction(a, b, d);
    d3 = direction(c, d, a);
    d4 = direction(c, d, b);
    if (d1 * d2 < 0 and d3 * d4 < 0) return 1;
    return a.on_seg(c, d) or b.on_seg(c, d) or
        c.on_seg(a, b) or d.on_seg(a, b);
}

bool segment_line_intersect(point a, point b, point c, point d) {
    if (!line_line_intersect(a, b, c, d)) return false;
    point inters = lines_intersect(a, b, c, d);
    if (inters.on_seg(a, b)) return true;
    return false;
}

//ray in direction c -> d
bool segment_ray_intersect(point a, point b, point c, point d) {
    if (a.dist2(c) < EPS || a.dist2(d) < EPS ||
        b.dist2(c) < EPS || b.dist2(d) < EPS) return true;
    if (lines_collinear(a, b, c, d)) {
        if (c.on_seg(a, b)) return true;
        if (ge(dot(d - c, a - c), 0)) return true;
        return false;
    }
    if (!line_line_intersect(a, b, c, d)) return false;
    point inters = lines_intersect(a, b, c, d);
    if (!inters.on_seg(a, b)) return false;
    if (ge(dot(inters - c, d - c), 0)) return true;
    return false;
}

//ray in direction a -> b
bool ray_line_intersect(point a, point b, point c, point d) {
    if (a.dist2(c) < EPS || a.dist2(d) < EPS ||
        b.dist2(c) < EPS || b.dist2(d) < EPS) return true;
    if (!line_line_intersect(a, b, c, d)) return false;
    point inters = lines_intersect(a, b, c, d);
    if (!line_line_intersect(a, b, c, d)) return false;
    if (ge(dot(inters - a, b - a), 0)) return true;
    return false;
}

ld distance_segment_line(point a, point b, point c, point d) {
    if (segment_line_intersect(a, b, c, d)) return 0;
    return min(distance_point_line(a, c, d), distance_point_line(b, c, d));
}

ld distance_segment_ray(point a, point b, point c, point d) {
    if (segment_ray_intersect(a, b, c, d)) return 0;
    ld min1 = distance_point_segment(c, a, b);
    ld min2 = min(distance_point_ray(a, c, d), distance_point_ray(b, c, d));
    return min(min1, min2);
}

ld distance_segment_segment(point a, point b, point c, point d) {
    if (segment_segment_intersect(a, b, c, d)) return 0;
    ld min1 = min(distance_point_segment(c, a, b), distance_point_segment(d, a, b));
    ld min2 = min(distance_point_segment(a, c, d), distance_point_segment(b, c, d));
    return min(min1, min2);
}

ld distance_ray_line(point a, point b, point c, point d) {
    if (ray_line_intersect(a, b, c, d)) return 0;
    ld min1 = distance_point_line(a, c, d);
    return min1;
}

ld distance_ray_ray(point a, point b, point c, point d) {
    if (ray_ray_intersect(a, b, c, d)) return 0;
    ld min1 = min(distance_point_ray(c, a, b), distance_point_ray(a, c, d));
    return min1;
}

ld distance_line_line(point a, point b, point c, point d) {
    if (line_line_intersect(a, b, c, d)) return 0;
    return distance_point_line(a, c, d);
}

struct circle {
    point c;
    ld r;
    circle() { c = point(); r = 0; }
    circle(point _c, ld _r) : c(_c), r(_r) {}
    ld area() { return acos(-1.0) * r * r; }
    ld chord(ld rad) { return  2 * r * sin(rad / 2.0); }
    ld sector(ld rad) { return 0.5 * rad * area() / acos(-1.0); }
    bool intersects(circle other) {
        return le(c.dist(other.c), r + other.r);
    }
    bool contains(point p) { return le(c.dist(p), r); }
    pair<point, point> getTangentPoint(point p) {
        ld d1 = c.dist(p), theta = asin(r / d1);
        point p1 = (c - p).rotate(-theta);
        point p2 = (c - p).rotate(theta);
        p1 = p1 * (sqrt(d1 * d1 - r * r) / d1) + p;
        p2 = p2 * (sqrt(d1 * d1 - r * r) / d1) + p;
        return make_pair(p1, p2);
    }
};

circle circumcircle(point a, point b, point c) {
    circle ans;
    point u = point((b - a).y, -(b - a).x);
    point v = point((c - a).y, -(c - a).x);
    point n = (c - b) * 0.5;
    ld t = cross(u, n) / cross(v, u);
    ans.c = ((a + c) * 0.5) + (v * t);
    ans.r = ans.c.dist(a);
    return ans;
}

point compute_circle_center(point a, point b, point c) {
    //circumcenter
    b = (a + b) / 2;
    c = (a + c) / 2;
    return compute_line_intersection(b, b + rotate_cw90(a - b), c, c + rotate_cw90(a - c));
}

int inside_circle(point p, circle c) {
    if (fabs(p.dist(c.c) - c.r) < EPS) return 1;
    else if (p.dist(c.c) < c.r) return 0;
    else return 2;
} //0 = inside/1 = border/2 = outside

circle incircle(point p1, point p2, point p3) {
    ld m1 = p2.dist(p3);
    ld m2 = p1.dist(p3);
    ld m3 = p1.dist(p2);
    point c = (p1 * m1 + p2 * m2 + p3 * m3) * (1 / (m1 + m2 + m3));
    ld s = 0.5 * (m1 + m2 + m3);
    ld r = sqrt(s * (s - m1) * (s - m2) * (s - m3)) / s;
    return circle(c, r);
}

circle minimum_circle(vector<point> p) {
    random_shuffle(p.begin(), p.end());
    circle C = circle(p[0], 0.0);
    for (int i = 0; i < (int)p.size(); i++) {
        if (C.contains(p[i])) continue;
        C = circle(p[i], 0.0);
        for (int j = 0; j < i; j++) {
            if (C.contains(p[j])) continue;
            C = circle((p[j] + p[i]) * 0.5, 0.5 * p[j].dist(p[i]));
            for (int k = 0; k < j; k++) {
                if (C.contains(p[k])) continue;
                C = circumcircle(p[j], p[i], p[k]);
            }
        }
    }
    return C;
}

// compute intersection of line through points a and b with
// circle centered at c with radius r > 0
vector<point> circle_line_intersection(point a, point b, point c, ld r) {
    vector<point> ret;
    b = b - a;
    a = a - c;
    ld A = dot(b, b);
    ld B = dot(a, b);
    ld C = dot(a, a) - r * r;
    ld D = B * B - A * C;
    if (D < -EPS) return ret;
    ret.push_back(c + a + b * (sqrt(D + EPS) - B) / A);
    if (D > EPS)
        ret.push_back(c + a + b * (-B - sqrt(D)) / A);
    return ret;
}

vector<point> circle_circle_intersection(point a, point b, ld r, ld R) {
    vector<point> ret;
    ld d = sqrt(a.dist2(b));
    if (d > r + R || d + min(r, R) < max(r, R)) return ret;
    ld x = (d * d - R * R + r * r) / (2 * d);
    ld y = sqrt(r * r - x * x);
    point v = (b - a) / d;
    ret.push_back(a + v * x + rotate_ccw90(v) * y);
    if (y > 0)
        ret.push_back(a + v * x - rotate_ccw90(v) * y);
    return ret;
}

//GREAT CIRCLE

double gcTheta(double pLat, double pLong, double qLat, double qLong) {
    pLat *= acos(-1.0) / 180.0; pLong *= acos(-1.0) / 180.0; // convert degree to radian
    qLat *= acos(-1.0) / 180.0; qLong *= acos(-1.0) / 180.0;
    return acos(cos(pLat) * cos(pLong) * cos(qLat) * cos(qLong) +
        cos(pLat) * sin(pLong) * cos(qLat) * sin(qLong) +
        sin(pLat) * sin(qLat));
}

double gcDistance(double pLat, double pLong, double qLat, double qLong, double radius) {
    return radius * gcTheta(pLat, pLong, qLat, qLong);
}

// getting the angle at point b
long double angle(point a, point b, point c) {
    long double ab = a.dist(b), ac = a.dist(c), bc = b.dist(c);
    long double tmp = ab * ab + bc * bc - ac * ac;
    tmp /= 2 * ab * bc;
    return fabs(acosl(tmp));
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << setprecision(15) << fixed;
    int n;
    cin >> n;
    vector<point> v(n);
    for(int i = 0; i < n; i++) {
        cin >> v[i].x >> v[i].y;
    }
    long double ans = 0;
    for(int i = 0; i < n; i++) {
        // cout << i << ""\n"";
        point pr = v[(i - 1 + n) % n], prr = v[(i - 2 + n) % n], pl = v[(i + 1) % n], pll = v[(i + 2) % n];
        point mid = (pl + pr) / 2;
        long double base = pl.dist(v[i]) + pr.dist(v[i]);
        long double rad = pl.dist(pr) / 2;
        point p = mid + rotate_ccw90((pr - pl) / 2);
        if(direction(pll, pl, p) == -1 and direction(prr, pr, p) == 1 and ge(angle(pll, pl, p), PI / 2) and ge(angle(prr, pr, p), PI / 2)) {
            // cout << ""on circle\n"";
            // cout << rad * 2 * sqrtl(2) - base << ""\n"";
            ans = max(ans, rad * 2 * sqrtl(2) - base);
        }
        if(line_line_intersect(pll, pl, prr, pr)) {
            point inter = lines_intersect(pll, pl, prr, pr);
            if(direction(pl, pr, inter) == 1 and ge(angle(pl, inter, pr), PI / 2)) {
                // cout << ""line line intersect\n"";
                // cout << pl.dist(inter) + pr.dist(inter) - base << ""\n"";
                // cout << inter << ""\n"";
                // cout << direction(pl, pr, inter) << ""\n"";
                ans = max(ans, pl.dist(inter) + pr.dist(inter) - base);
            }
        }
        //maybe middle do not work so grab the arc
        //each point will have a left boundary and right boundary which by default is arc(pl, pr), but maybe the possible arc is smaller than the whole arc
        point pr_lb = pl, pr_rb = pr, pl_lb = pl, pl_rb = pr;
        auto inter = circle_line_intersection(pl, pll, mid, rad);
        for(auto a : inter) {
            if(direction(prr, pr, a) == 1 and direction(pl, pr, a) != -1) {
                // cout << ""circle line left\n"";
                // cout << pl.dist(a) + pr.dist(a) - base << ""\n"";
                // cout << a << ""\n"";
                ans = max(ans, pl.dist(a) + pr.dist(a) - base);
                pl_lb = a;
            }
        }
        inter = circle_line_intersection(pr, prr, mid, rad);
        for(auto a : inter) {
            if (direction(pll, pl, a) == -1 and direction(pl, pr, a) != -1) {
                // cout << ""circle line right\n"";
                // cout << pl.dist(a) + pr.dist(a) - base << ""\n"";
                // cout << a << ""\n"";
                ans = max(ans, pl.dist(a) + pr.dist(a) - base);
                pr_rb = a;
            }
        }
        inter = circle_line_intersection(pr, pr + rotate_ccw90(pr - prr), mid, rad);
        for(auto a : inter) {
            if(eq(a.dist(pr), 0)) continue;
            if(direction(pl, pr, a) != -1) pr_lb = a;
        }
        inter = circle_line_intersection(pl, pl + rotate_cw90(pl - pll), mid, rad);
        for(auto a : inter) {
            if(eq(a.dist(pl), 0)) continue;
            if(direction(pl, pr, a) != -1) pl_rb = a;
        }
        //use boundaries to update answer, it will either improve or stay the same, e.g. boundary is pl or pr.
        //for each boundary point it must be inside the boundary defined by the other point, e.g. pl_al must be inside the arc(pr_al, pr_ar).
        //pr_lb
        if (direction(mid, pl_lb, pr_lb) != 1 and direction(mid, pl_rb, pr_lb) != -1) ans = max(ans, pl.dist(pr_lb) + pr.dist(pr_lb) - base);
        //pr_rb
        if (direction(mid, pl_lb, pr_rb) != 1 and direction(mid, pl_rb, pr_rb) != -1) ans = max(ans, pl.dist(pr_rb) + pr.dist(pr_rb) - base);
        //pl_lb
        if (direction(mid, pr_lb, pl_lb) != 1 and direction(mid, pr_rb, pl_lb) != -1) ans = max(ans, pl.dist(pl_lb) + pr.dist(pl_lb) - base);
        //pl_rb
        if (direction(mid, pr_lb, pl_rb) != 1 and direction(mid, pr_rb, pl_rb) != -1) ans = max(ans, pl.dist(pl_rb) + pr.dist(pl_rb) - base);
    }
    cout << ans << ""\n"";
    return 0;
}
"
iJbKViRb,Untitled,xShub,JavaScript,Thursday 30th of October 2025 08:39:36 AM CDT,"
let soldiDisponibili = 50;
let listaSpesa = [];
let numeroProdotti = 0;

function aggiungiProdotto(nome, prezzo) {
    if (soldiDisponibili >= prezzo) {

        // Aggiunge il contenuto della variabile nome alla lista 'listaSpesa'
        listaSpesa.push(nome);

        // Sottrae dai soldi a mia disposizione (variabile 'soldiDisponibili')
        // il valore contenuto nella variabile 'prezzo'

        // soldiDisponibili -= prezzo;
        soldiDisponibili = soldiDisponibili - prezzo;

        // Aumenta di uno il valore nella variabile 'numeroProdotti'
        // numeroProdotti += 1;
        // numeroProdotti++;
        numeroProdotti = numeroProdotti + 1;

        // Stampa varie informazioni per l'utente
        console.log(""Complimenti! Hai aggiunto il prodotto "" +
            nome + "" al prezzo di "" + prezzo.toString() +
            "" milioni di euro."");

        console.log(""Ti rimangono "" + soldiDisponibili.toString() +
            "" milioni di euro."");

    } else {
        const soldiMancanti = prezzo - soldiDisponibili;
        console.log(""Spendi troppo, ti mancano "" + soldiMancanti.toString() + "" milioni di euro."");
    }
}

function mostraLista() {

    console.log(""LA TUA LISTA DELLA SPESA:"");

    // let lunghezzaLista = listaSpesa.length;
    // numeroProdotti == listaSpesa.length


    // [ ""Primo Elemento"", ""Secondo Elemento"", ""Terzo Elemento"" ]
    // [      0          ,         1         ,         2        ]
    //
    // Lunghezza lista: 3

    let miaLunghezzaLista = listaSpesa.length;

    //if (listaSpesa.length === 0 ) {
    if (miaLunghezzaLista === 0 ) {
        console.log(""Non ci sono prodotti nella lista!"");
    } else {
        for (let i = 0; i < miaLunghezzaLista; i++) {
            let numeroProgressivo = (i + 1).toString();
            let nomePosizioneElemento = numeroProgressivo + "". "" + listaSpesa[i];
            console.log(nomePosizioneElemento);
        }
    }
    console.log(""Ci rimangono ancora "" + soldiDisponibili.toString() + "" milioni di euro."");
}




// aggiungiProdotto(""Pollo"", 12);
// aggiungiProdotto(""Pompelmi"", 10);
// aggiungiProdotto(""Pomodori"", 10);
// aggiungiProdotto(""Ovini Kinder"", 40);
"
7W562iXb,Table N3 of 19 Account Xtream BiG DaTa for Free - IPTV 29/10/2025,iptvregion,JavaScript,Thursday 30th of October 2025 07:46:01 AM CDT,"Table N3 of 19 Account Xtream BiG DaTa for Free - IPTV 29/10/2025

‚ñº‚ñº‚ñº‚ñº
https://www.iptvregion.eu.org/2025/10/table-n3-of-19-account-xtream-big-data.html
‚ñ≤‚ñ≤‚ñ≤‚ñ≤


join to us : linktr.ee/iptvregion

TAG: iptv,best iptv,what is iptv,iptv service,best iptv service,iptv news,iptv services,is iptv illegal,top iptv service,iptv box,iptv 2025,free iptv,the best iptv service,que es iptv,iptv subscription,is iptv legal,iptv service reviews,iptv shut down,iptv shutdown,ventajas iptv,benefits of iptv,iptv smartphones pro,top iptv providers,iptv review,iptv player,listas iptv,top iptv 2025,usa iptv 2025,best iptv
	"
D3hrnJkW,Untitled,msamufidi,Python,Thursday 30th of October 2025 07:30:33 AM CDT,"#include <pthread.h>
#include <stdio.h>
#include <stdlib.h> // Untuk exit, dll.

// 1. Deklarasi Mutex Global
pthread_mutex_t lock; 

int counter = 0;

void* increment(void* arg) {
    for (int i = 0; i < 100000; i++) {
        // 2. Kunci (Lock) Mutex sebelum mengakses critical section
        pthread_mutex_lock(&lock); 
        
        // Critical Section (Operasi yang harus atomik)
        counter++; 
        
        // 3. Buka Kunci (Unlock) Mutex setelah selesai
        pthread_mutex_unlock(&lock); 
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;
    
    // 4. Inisialisasi Mutex
    if (pthread_mutex_init(&lock, NULL) != 0) {
        printf(""\nMutex init failed\n"");
        return 1;
    }

    pthread_create(&t1, NULL, increment, NULL);
    pthread_create(&t2, NULL, increment, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    // 5. Hancurkan Mutex setelah tidak digunakan lagi
    pthread_mutex_destroy(&lock);

    printf(""Final counter: %d\n"", counter); 
    // Output yang diharapkan dan seharusnya konsisten adalah: 200000
    
    return 0;
}"
sWWSyhLC,PrimeX Hub | Adopt Me Script [Keyless],AFBv1,Lua,Thursday 30th of October 2025 07:03:27 AM CDT,"-- üåü PrimeX Hub üåü
-- A feature-packed script hub designed for Adopt Me‚Äìstyle Roblox experiences.
-- Includes smooth automation, customization, and pet system enhancements.
-- Optimized for performance and security ‚Äî made for testing, development, and advanced gameplay systems.
 
-- ‚ú® Features:
-- Autofarm
-- Auto Hatch Eggs
-- Auto Feed Pets
-- Auto Collect Rewards
-- Auto Upgrade Items
-- Auto Trade Assistant
-- Auto Equip Best Pet
-- Teleport Tools
-- Smart Inventory Sorting
-- Dev Tools + Debug Menu
-- Dupe
-- Pet Spawner
-- Auto Trade
-- Trade Scam
 
-- üß© Script:
loadstring(game:HttpGet(""https://raw.githubusercontent.com/fetbobbymope1-cmyk/AdoptMeScript/refs/heads/main/Pro""))()

--https://discord.gg/AaGwpM8j"
puKq5Gqz,PrimeX Hub | Adopt Me Script,AFBv1,Lua,Thursday 30th of October 2025 06:50:42 AM CDT,"-- üåü PrimeX Hub üåü
-- A feature-packed script hub designed for Adopt Me‚Äìstyle Roblox experiences.
-- Includes smooth automation, customization, and pet system enhancements.
-- Optimized for performance and security ‚Äî made for testing, development, and advanced gameplay systems.

-- ‚ú® Features:
-- Autofarm
-- Auto Hatch Eggs
-- Auto Feed Pets
-- Auto Collect Rewards
-- Auto Upgrade Items
-- Auto Trade Assistant
-- Auto Equip Best Pet
-- Teleport Tools
-- Smart Inventory Sorting
-- Dev Tools + Debug Menu
-- Dupe
-- Pet Spawner
-- Auto Trade
-- Trade Scam

-- üß© Script:
loadstring(game:HttpGet(""https://raw.githubusercontent.com/fetbobbymope1-cmyk/AdoptMeScript/refs/heads/main/Pro""))()"
XfdVtXuS,Áâ©ÁêÜ-Êé¢Á©∂A (‰∏çÁ¢∫ÂÆöÂ∫¶Ë®àÁÆó),Casperliao,C++,Thursday 30th of October 2025 06:25:59 AM CDT,"//Áâ©ÁêÜ-Êé¢Á©∂A
#include <iostream>
#include <cmath>
#include <iomanip>
#include <vector>

using namespace std;

int main() {
	
    double n = 0;
    double average = 0;
    double SD = 0;
    double u = 0;
    
    int Language = 0;
    
    double sum = 0;
    
    vector<double> database;
    
    cout<<""English type 1\n""<<""ÁπÅÈ´î‰∏≠ÊñáÈÅ∏ 2\n""<<""Language (type 1 or 2): ""; 
    cin>>Language;
    
    if (Language == 1){
    	cout<<""how much data: "";
	}else{
		cout<<""ÂπæÁµÑÊï∏Êìö: "";
	}
    
    
    cin>>n;
    
    for (int i = 1; i <= n; i += 1){
    	double n2 = 0;
    	
    	if (Language == 1){
    		cout<<""data ""<<i<<"": "";
		}else{
			cout<<""Êï∏Êìö ""<<i<<"": "";
		}
		
    	cin>>n2;
    	
    	database.push_back(n2);
    	average += n2;
	}
	
	average /= n;
	
	for (int i = 0; i < database.size(); i += 1){
		double n2 = database[i];
		sum += (n2 - average) * (n2 - average);
	}
	
	SD = sqrt(sum / (n - 1));
	
	u = round(SD / sqrt(n) * 10) / 10;
	cout<<""--------------------""<<""\n"";
	if (Language == 1){
		cout<<""Average: ""<<average<<""\n"";
		cout<<""œÉ: ""<<SD<<""\n"";
		cout<<""u: ""<<u<<""\n"";
		cout<<""Best estimate: ""<<round(average * 10) / 10<<""\n"";
		cout<<""Result: ""<<round(average * 10) / 10<<"" ¬± ""<<u<<""\n"";
	}else{
		cout<<""Âπ≥ÂùáÂÄº: ""<<average<<""\n"";
		cout<<""Ê®ôÊ∫ñÂ∑Æ: ""<<SD<<""\n"";
		cout<<""‰∏çÁ¢∫ÂÆöÂ∫¶: ""<<u<<""\n"";
		cout<<""ÊúÄ‰Ω≥‰º∞Ë®àÂÄº: ""<<round(average * 10) / 10<<""\n"";
		cout<<""Ê∏¨ÈáèÁµêÊûú: ""<<round(average * 10) / 10<<"" ¬± ""<<u<<""\n"";
	}
	
	
    return 0;
}"
ZMQsBEy4,Sudoku,wingman007,C#,Thursday 30th of October 2025 05:27:07 AM CDT,"/*
Below is a complete Console program (single file) that:

builds a valid, fully-solved Sudoku by recursive backtracking,

removes numbers while keeping the puzzle uniquely solvable, and

prints both the puzzle and the solution in the console.

You can paste this into a new Console App (Program.cs) and run.
*/

using System;
using System.Collections.Generic;

class Program
{
    static readonly int Size = 9;
    static readonly int Box = 3;
    static readonly Random Rng = new Random();

    static void Main()
    {
        // 1) Create an empty grid
        int[,] solution = new int[Size, Size];

        // 2) Fill it with a complete valid Sudoku (backtracking)
        if (!FillGrid(solution))
        {
            Console.WriteLine(""Failed to generate a full Sudoku solution."");
            return;
        }

        // Make a copy to keep the solution
        int[,] puzzle = CopyGrid(solution);

        // 3) Ask for a difficulty (how many cells to remove)
        Console.Write(""Choose difficulty (E=Easy, M=Medium, H=Hard) [default M]: "");
        string diff = (Console.ReadLine() ?? """").Trim().ToUpperInvariant();
        int removeTarget = diff switch
        {
            ""E"" => 30, // ~30 blanks (51 clues)
            ""H"" => 50, // ~50 blanks (31 clues)
            _   => 40  // Medium ~40 blanks (41 clues)
        };

        // 4) Carve out cells while keeping uniqueness
        MakePuzzleWithUniqueSolution(puzzle, removeTarget);

        // 5) Print results
        Console.WriteLine();
        Console.WriteLine(""=== PUZZLE ==="");
        PrintGrid(puzzle);

        Console.WriteLine();
        Console.WriteLine(""=== SOLUTION ==="");
        PrintGrid(solution);

        Console.WriteLine();
        Console.WriteLine(""Press any key to exit..."");
        Console.ReadKey();
    }

    // -------------------- Sudoku generation --------------------

    // Fill the grid fully using backtracking (random order for variety)
    static bool FillGrid(int[,] grid)
    {
        int row, col;
        if (!FindEmpty(grid, out row, out col))
        {
            // No empty cell: solved
            return true;
        }

        // Try numbers 1..9 in random order
        foreach (int num in ShuffledNumbers())
        {
            if (IsSafe(grid, row, col, num))
            {
                grid[row, col] = num;
                if (FillGrid(grid)) return true;
                grid[row, col] = 0; // backtrack
            }
        }

        return false; // trigger backtracking
    }

    // Check if placing num at [row,col] obeys Sudoku rules
    static bool IsSafe(int[,] grid, int row, int col, int num)
    {
        // Row
        for (int c = 0; c < Size; c++)
            if (grid[row, c] == num) return false;

        // Column
        for (int r = 0; r < Size; r++)
            if (grid[r, col] == num) return false;

        // 3x3 box
        int r0 = (row / Box) * Box;
        int c0 = (col / Box) * Box;
        for (int r = 0; r < Box; r++)
            for (int c = 0; c < Box; c++)
                if (grid[r0 + r, c0 + c] == num) return false;

        return true;
    }

    // Find the next empty cell (0 = empty). Returns false if none.
    static bool FindEmpty(int[,] grid, out int row, out int col)
    {
        for (int r = 0; r < Size; r++)
            for (int c = 0; c < Size; c++)
                if (grid[r, c] == 0)
                {
                    row = r;
                    col = c;
                    return true;
                }

        row = -1;
        col = -1;
        return false;
    }

    // Return numbers 1..9 in random order
    static IEnumerable<int> ShuffledNumbers()
    {
        List<int> nums = new List<int>(9);
        for (int i = 1; i <= 9; i++) nums.Add(i);
        for (int i = nums.Count - 1; i > 0; i--)
        {
            int j = Rng.Next(i + 1);
            (nums[i], nums[j]) = (nums[j], nums[i]);
        }
        return nums;
    }

    // -------------------- Puzzle carving with uniqueness --------------------

    static void MakePuzzleWithUniqueSolution(int[,] puzzle, int removeTarget)
    {
        // Create a list of all positions [0..80] and shuffle
        List<int> positions = new List<int>(Size * Size);
        for (int i = 0; i < Size * Size; i++) positions.Add(i);

        // Fisher‚ÄìYates shuffle
        for (int i = positions.Count - 1; i > 0; i--)
        {
            int j = Rng.Next(i + 1);
            (positions[i], positions[j]) = (positions[j], positions[i]);
        }

        int removed = 0;

        foreach (int pos in positions)
        {
            if (removed >= removeTarget) break;

            int row = pos / Size;
            int col = pos % Size;

            if (puzzle[row, col] == 0) continue; // already empty

            int backup = puzzle[row, col];
            puzzle[row, col] = 0;

            // Check uniqueness: count solutions up to 2
            int solutions = CountSolutions(CopyGrid(puzzle), 2);
            if (solutions == 1)
            {
                removed++;
            }
            else
            {
                // not unique ‚Äî revert
                puzzle[row, col] = backup;
            }
        }
    }

    // Backtracking solver that counts how many solutions exist (up to 'limit')
    static int CountSolutions(int[,] grid, int limit)
    {
        int count = 0;
        SolveAndCount(grid, ref count, limit);
        return count;
    }

    static void SolveAndCount(int[,] grid, ref int count, int limit)
    {
        if (count >= limit) return; // early stop if enough found

        int row, col;
        if (!FindEmpty(grid, out row, out col))
        {
            // Found one solution
            count++;
            return;
        }

        // Try 1..9 (ordered or random ‚Äî ordered is slightly faster here)
        for (int num = 1; num <= 9; num++)
        {
            if (IsSafe(grid, row, col, num))
            {
                grid[row, col] = num;
                SolveAndCount(grid, ref count, limit);
                if (count >= limit) return; // early stop
                grid[row, col] = 0;
            }
        }
    }

    // -------------------- Utilities --------------------

    static int[,] CopyGrid(int[,] src)
    {
        int[,] dst = new int[Size, Size];
        for (int r = 0; r < Size; r++)
            for (int c = 0; c < Size; c++)
                dst[r, c] = src[r, c];
        return dst;
    }

    static void PrintGrid(int[,] grid)
    {
        for (int r = 0; r < Size; r++)
        {
            if (r % 3 == 0)
                Console.WriteLine(""+-------+-------+-------+"");

            for (int c = 0; c < Size; c++)
            {
                if (c % 3 == 0) Console.Write(""| "");

                int val = grid[r, c];
                Console.Write(val == 0 ? "". "" : (val.ToString() + "" ""));
            }
            Console.WriteLine(""|"");
        }
        Console.WriteLine(""+-------+-------+-------+"");
    }
}
/*
How the algorithm works (step-by-step, in plain words)

1. Board representation
We use a 9x9 int array. 0 means ‚Äúempty‚Äù.

2. Rules as code
A helper IsSafe(row, col, num) checks whether num can be placed at [row,col] (no duplicates in row, column, or 3√ó3 box).

3. Build a full solution (recursion + backtracking)

Find the next empty cell (top-to-bottom, left-to-right).

Try candidates 1..9 in random order.

If a candidate fits (IsSafe), place it and recurse to the next cell.

If we get stuck, backtrack: remove the number and try the next one.
This eventually fills the board with a valid solution.

4. Make a puzzle by removing numbers

Randomize all 81 cell positions.

Try to remove one cell (set it to 0).

Check uniqueness: run a solution counter (a solver that stops after it finds 2 solutions).

If there‚Äôs still exactly 1 solution ‚Üí keep it removed.

Otherwise restore the number.

Continue until we removed enough numbers for the chosen difficulty (e.g., 40 empties).

5. Print nicely
A helper prints the grid with lines every 3 rows/columns.
*/"
VN2seDFf,Untitled,xShub,JavaScript,Thursday 30th of October 2025 05:22:55 AM CDT,"// HTML

<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Esercizio del 30 Ottobre</title>
    <script defer src=""./js/funzioni_esercizio.js""></script>
</head>
<body>
<h2>Non ci interessa</h2>
</body>
</html>

// Javascript

let soldiDisponibili = 50;
let listaSpesa = [];
let numeroProdotti = 0;

function aggiungiProdotti(nome, prezzo) {
    if (soldiDisponibili >= prezzo) {

        listaSpesa.push(nome);

        // soldiDisponibili -= prezzo;
        soldiDisponibili = soldiDisponibili - prezzo;

        // numeroProdotti += 1;
        // numeroProdotti++;
        numeroProdotti = numeroProdotti + 1;

        console.log(""Complimenti! Hai aggiunto il prodotto "" +
            nome + "" al prezzo di "" + prezzo.toString());
        console.log(""Ti rimangono  "" + soldiDisponibili.toString() +
            "" milioni di euro."");
    } else {
        const soldiMancanti = prezzo - soldiDisponibili;
        console.log(""Spendi troppo, ti mancano "" + soldiMancanti.toString() + "" milioni di euro."");
    }
}
"
