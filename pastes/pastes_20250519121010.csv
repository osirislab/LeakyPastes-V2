id,title,username,language,date,content
z8BQbW0i,Untitled,LA77,C,Monday 19th of May 2025 06:58:13 AM CDT,"#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <unistd.h>
#include <stdbool.h>

struct Transfer {
    char request;
    char filename[64];
    int fileSize;
};

struct TransferResponse {
    char response;
    int fileSize;
};

int main(int argc, char** argv){
    
    char ip[16];
    int port;

    scanf(""%s %d"", ip, &port); // reading the IP and PORT

    struct sockaddr_in serverAdress;
    memset(&serverAdress, 0, sizeof(serverAdress));
    
    serverAdress.sin_family = AF_INET; // IPv4
    serverAdress.sin_port = htons(port); // convert port to network byte order
    serverAdress.sin_addr.s_addr = inet_addr(ip);

    /// Creating a TCP socket
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    int connectionResult = connect(sock, (struct sockaddr*)&serverAdress, sizeof(serverAdress));

    if(connectionResult < 0) {printf(""Connection failed :<"");}
    
    while(true) 
    {
        char b1; scanf(""%c"", &b1);
        char operation;
        scanf(""%c"", &operation);

        if(operation == 'D')
        {
            char buff;
            scanf(""%c"", &buff); // reading the space

            char filename[64];
            scanf(""%s"", filename);

            struct Transfer t;
            memset(&t, 0, sizeof(t));
            t.request = operation;
            strcpy(t.filename, filename);
            t.fileSize = 0;

            // Sending a transfer request to the server            
            send(sock, &t, sizeof(t), 0);

            struct TransferResponse r;
            recv(sock, &r, sizeof(r), 0);

            if(r.response == 'N')
            {
                printf(""File %s does not exist on server.\n"", filename);
                continue;
            }

            // receiving the file content
            char buffer[1024];
            int bytesR = 0;
            if(!(r.fileSize <= 0 || r.fileSize > 1024)) 
            {
                bytesR = recv(sock, buffer, r.fileSize, 0);
            }

            FILE *dwn = fopen(filename, ""w"");
            fwrite(buffer, sizeof(char), bytesR, dwn);
            fclose(dwn);
            buffer[bytesR] = '\0';
            printf(""File %s downloaded.\n"", filename);
            printf(""%s\n"", buffer);
        }
        if(operation == 'U')
        {
            char buff;
            scanf(""%c"", &buff); // skip space

            char filename[64];
            scanf(""%s"", filename);

            // Open file to read content
            FILE* file = fopen(filename, ""r"");
            if (!file) 
            {
                printf(""File %s not found.\n"", filename);
                continue;
            }

            // Determine file size
            fseek(file, 0, SEEK_END);
            int fileSize = ftell(file);
            rewind(file); // reset pointer to beginning

            // Read file content into buffer
            char buffer[1024];
            fread(buffer, sizeof(char), fileSize, file);
            fclose(file);

            // Prepare Transfer struct
            struct Transfer t = {0};
            t.request = 'U';
            strcpy(t.filename, filename);
            t.fileSize = fileSize;

            // Send Transfer struct
            send(sock, &t, sizeof(t), 0);

            // Receive server response
            struct TransferResponse r;
            recv(sock, &r, sizeof(r), 0);

            if (r.response == 'N') {
                printf(""File %s already exists on server.\n"", filename);
                continue;
            }

            // Send file content
            send(sock, buffer, fileSize, 0);
            printf(""File %s uploaded.\n"", filename);

        }
        if(operation == 'C')
        {
            struct Transfer t;
            memset(&t, 0, sizeof(t));
            t.request = operation;
            strcpy(t.filename, """");
            t.fileSize = 0;
            send(sock, &t, sizeof(t), 0);
            close(sock);

            break;
        }
    }
    
    return 0;
}"
CMVK12iE,Untitled,sombruxo,MIX Assembler,Monday 19th of May 2025 06:55:18 AM CDT,";Tabla ASCII:
; https://fsymbols.com/images/ascii.png


.EQU Clock = 16000000 ;processor’s clock frequency, Hz
.EQU Baud = 9600 ;desired serial port baud rate (bits per second)
.EQU UBRRvalue = Clock/(Baud*16) -1 ;calculates value to be put in UBRR0H:L

ldi r16, 0b11111111
out ddrb, r16
RCALL config_ADC ;Configurar el conversor ADC
rcall init_USART0
conv:
	LDS r17, ADCSRA	
	ORI r17, (1<< ADSC)
	STS ADCSRA, r17			;Disparo la conversion AC to Digital
	bit:
		LDS r20, ADCSRA		
		SBRC r20, ADSC		;Espero que termine la conversion.
		rjmp bit		
	LDS r21, ADCH			;Leo el valor de la conversion.
	STS UDR0, r21  ;transmits the [modified] byte
	rcall delay100ms
	if:
		cpi r21, 140
		brlo conv
	then:
		ldi r16, 0xff
		out portb, r16
		rcall delay100ms
		ldi r16, 0x00
		out portb, r16

	rcall delay1s

rjmp conv


config_ADC:
	push r16
	LDI R16, (1<<ADEN)
	;ADC Enable
	ORI R16, (0<<ADATE)
	;ADC Auto Trigger Enable
	ORI R16, (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)
	;ADPSx=3: ADC Prescaler Select Bits (ADPS2:0=111 -> 128)
	STS ADCSRA, R16
	;_> ADOSRA: The ADC Control and Status register A
	LDI R16, (0<<ADTS2) | (0<<ADTS1) | (1<<ADTS0)
	;ADTSx-1: trigger source Analog Comparator
	STS ADCSRB, R16
	;-> ADCSRB: The ADC Control and Status register B
	LDI R16, (2<<MUX0)
	;MUXx-1: input channel 1: MUX5:0-00001
	ORI R16, (0<<REFS1) | (1<<REFS0)
	;AREF-1: internal 5V reference (REF$1:0-01)
	ORI R16, (1<<ADLAR)
	;ADC 8 bits resolution
	STS ADMUX, R16
	; -> ADMUX: The ADC multiplexer Selection Register
	LDI R16, (1<<ADC1D)
	;ADC disable digital input circuitry for channel 1 (saves energy)
	STS DIDR0, R16
	; -> DIDRO: Digital Input Disable Register
	LDI R16, (0<<PRADC)
	;ADC disable the power reduction saving for the ADC circuitry (not necesary)
	STS PRR, R16
	;-> PRR: Power Reduction Register
	pop r16
RET

;------- initialize USART0 as 9600baud, asynchronous, 8 data bits, 1 stop bit, no parity -----
init_USART0:
	PUSH R16
	LDI R16, LOW(UBRRvalue)
	STS UBRR0L, R16   ;load the low byte
	LDI R16, HIGH(UBRRvalue)
	STS UBRR0H, R16   ;load the low byte
	; enable receive and transmit, enable USART0 interrupts (UDR empty, Tx finished, Rx finished)
	LDI R16, (0<<RXEN0)|(1<<TXEN0)|(0<<UDRIE0)|(0<<TXCIE0)|(0<<RXCIE0)
	STS UCSR0B, R16 ;set control register UCSR0B with the corresponding bits
	; configure USART 0 as asynchronous, set frame format: 8 data bits, 1 stop bit, no parity
	LDI R16, (0<<UMSEL00) |(1<<UCSZ01)|(1<<UCSZ00) |(0<<USBS0)|(0<<UPM01)|(0<<UPM00)
	STS UCSR0C, R16 ;set control register UCSR0C with the corresponding bits
	POP R16
	RET

delay1s:
; 1s at 16.0 MHz
	push r18
	push r19
	push r20
    ldi  r18, 82
    ldi  r19, 43
    ldi  r20, 0
L1s: dec  r20
    brne L1s
    dec  r19
    brne L1s
    dec  r18
    brne L1s
    lpm
	pop r20
	pop r19
	pop r18
    nop
ret

delay100ms:
; 1s at 16.0 MHz
	push r18
	push r19
	push r20
    ldi  r18, 9
    ldi  r19, 30
    ldi  r20, 229
L100ms: dec  r20
    brne L100ms
    dec  r19
    brne L100ms
    dec  r18
    brne L100ms
    nop
	pop r20
	pop r19
	pop r18
    nop
ret"
R3Bfuaif,Test,NathanielBumpp0,JavaScript,Monday 19th of May 2025 06:55:08 AM CDT,"import React, { useState, useEffect, useCallback } from 'react';

function Dashboard() {
  const [a, setA] = useState('');
  const [b, setB] = useState(false);
  const [c, setC] = useState([]);
  const [d, setD] = useState(null);
  const [e, setE] = useState('');
  const [f, setF] = useState(0);
  const [g, setG] = useState({});
  
  useEffect(() => {
    setB(true);
    fetch('/api/items')
      .then(res => res.json())
      .then(json => {
        setC(json.data);
        setB(false);
      })
      .catch(err => {
        console.log(err);
        setB(false);
      });
  }, []);

  useEffect(() => {
    fetch('/api/user')
      .then(res => res.json())
      .then(u => setG(u))
      .catch(console.error);
  }, []);

  const handleClick = useCallback((item) => {
    setD(item);
    setE(item.name);
  }, []);

  const handleChange = useCallback((evt) => {
    setA(evt.target.value);
    console.log('filter changed');
  }, []);

  const doSomething = () => {
    let sum = 0;
    for (let i = 0; i < c.length; i++) {
      sum += c[i].value;
    }
    setF(sum);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h1>Dashboard</h1>
      {b ? <p>loading...</p> : (
        <>
          <div style={{ marginBottom: '10px' }}>
            <input 
              value={a}
              onChange={handleChange}
              placeholder=""Фильтр по имени...""
            />
            <button onClick={doSomething}>Сумма: {f}</button>
            <button onClick={() => setC([])}>Очистить список</button>
          </div>
          <ul>
            {c.filter(item => {
              if (!item.name.toLowerCase().includes(a.toLowerCase())) return false;
              return true;
            }).map((item, idx) => (
              <li key={idx} style={{ cursor: 'pointer' }} onClick={() => handleClick(item)}>
                <strong>{item.name}</strong> - <span>{item.value}</span> - {item.active ? 'ON' : 'OFF'}
                {item.details && <div>{item.details.info}</div>}
              </li>
            ))}
          </ul>
          {d && (
            <div style={{ border: '1px solid #000', padding: '10px' }}>
              <h2>Selected Item</h2>
              <p>Name: {d.name}</p>
              <p>Description: {d.details ? d.details.desc : 'N/A'}</p>
              <p>User: {g.username}</p>
              <input 
                value={e}
                onChange={evt => setE(evt.target.value)}
              />
              <button onClick={() => console.log('saved', e)}>Save</button>
            </div>
          )}
          {c.length === 0 && <p>Нет элементов</p>}
        </>
      )}
    </div>
  );
}

export default Dashboard;"
cekDPLqY,Untitled,Justin8303,Lua,Monday 19th of May 2025 06:47:53 AM CDT,"shell.run(""clear"")
os.loadAPI(""ocs/apis/sensor"")
sen = sensor.wrap(""right"")
mon = peripheral.wrap(""top"")

function getS(s)
	for v, k  in pairs(s) do
		if k.Name == ""ME Wireless Access Point"" then
			target = v
		end
	end
	return target
end

function getItem(name)
	for v, k in pairs(s1.Items) do
		if k.Name == name then
			amount = k.Size
		end
	end
	return amount
end

state = true

while true do
	s1 = sen.getTargetDetails(getS(sen.getTargets()))
	constAdd = 1
	
	hv = getItem(""High Voltage Solar Array"")
	
	mon.clear()
	mon.setCursorPos(1,1)
	mon.write(Math.floor((hv + constAdd)/192*100)/100)
end"
MMDdYmr7,navigation screen page flutter,muhaiminurabir,Dart,Monday 19th of May 2025 06:43:04 AM CDT," //remove all screen and start from new page
Navigator.of(context).pushNamedAndRemoveUntil(
                      guestHomePage,
                      arguments: 3,
                          (Route<dynamic> route) => false,
                    );"
9a0bM6v5,Untitled,gegerge,JavaScript,Monday 19th of May 2025 06:41:47 AM CDT,Telegram: @LucasLEAK
670KqWZV,Untitled,dllbridge,C,Monday 19th of May 2025 06:27:28 AM CDT,"

/*

#include  <stdio.h>
#include   <time.h>
#include <stdlib.h>

void foo(int &);


//////////////////////////////////////////////
int  main()                                 //  
{
     
     srand(time(0));
     int array[20] = {0};

     foo(array[5]) ;
    // printf("" %d\n"", array[5]);
     
     
     for(int i = 0; i < 20; i++)
     {
             
         printf(""%d \n"", array[i]);    
     }     
}



//////////////////////////////////////////////
void foo(int &r)                            //
{
     
     int *p = &r;
     
     p = p - 5;
     
     for(int i = 0; i < 20; i++)
     {
         p[i] = rand() % 200 + 10 ;
        // printf(""%d \n"", &p);
     }
}
*/


























#include   <vector>
#include <iostream>
using namespace std;

void monitor_vector(vector<int> &r);

////////////////////////////////////////////////
int main() 
{

    setlocale(LC_ALL, ""rus""); 	
    
    
    int nArr[20] = {5, 3, 7, 4, 3, 2, 344, 3, 2, 5, 7, 8, 956, 4, 3, 54, 11};
    
    
    cout << ""sizeof nArr = "" << sizeof(nArr) << endl;
    
    vector<int> v(nArr, nArr + (sizeof(nArr) / sizeof(int)));
    
  /* for(int i = 0; i < 20; i++)
    {
            
        v.push_back(nArr[i]);    
            
    }*/
    //cout << ""Ïðèâåò - Hello !"" << endl; 
	
	v.push_back(876);
	v.push_back(  5);	
    monitor_vector(v);
	
return 0;
}



///////////////////////////////////////////////////
void monitor_vector(vector<int> &r)
{
     int n = r.size();
     
     for(int i = 0; i < n; i++)
     {
             
         cout << r[i] << "", "";    
     }
     
}



"
ZtnRCLsM,Climbing Stairs Variable Jumps,Fastrail08,C++,Monday 19th of May 2025 06:22:27 AM CDT,"#include <bits/stdc++.h>
using namespace std;

/*
QUESTION - Count all the ways to reach nth stair from 0th stair
*/

int variableJumpStairs(int stair, int &n, vector<int> &jumps, int &count, vector<int> &memo){
    //invalid case
    if(stair > n){
        return 0;
    }
    
    // base case
    if(stair == n){
        count++;
        return 1;
    }
    //memo check
    if(memo[stair] != 0){
        return memo[stair];
    }
    //level - each stair
    // options - jumps available from each stair
    int allPathsFromCurrStair = 0;
    for(int i = 1; i <= jumps[stair]; i++){
        allPathsFromCurrStair += variableJumpStairs(stair + i, n, jumps, count, memo);
    }
    return memo[stair] = allPathsFromCurrStair;
}

int variableJumpStairsDP(int &n, vector<int> &jumps){
    //1. Storage & Meaning - dp[i] = how many ways to reach nth stair from ith stair
    vector<int> dp(n + 1, 0);
    
    //2. Direction - We need to reach nth from 0th,smaller problem will be when we are standing at nth stair,
    //count the number of ways to reach nth stair when you are standing at nth stair = 1
    // largest problem = dp[0] ; smallest problem = dp[n + 1]
    dp[n] = 1;
    
    //3. Travel & Solve - Travel in the direction of small problem to large problem & return the original largest problem 
    //Here at dp[0] and not at dp[n + 1].
    for(int i = n - 1; i >= 0; i--){
        for(int j = 1; j <= jumps[i]; j++){
            if(i + j <= n + 1){
                dp[i] += dp[i + j];
            }
        }
    }
    return dp[0];
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> jumps(n);
    for(int i = 0; i < n; i++){
        cin >> jumps[i];
    }
    int count = 0;
    vector<int> memo(n + 1, 0);
    //memo call(return method)
    cout << variableJumpStairs(0, n, jumps, count, memo) << '\n';
    
    //memo call (print method) it will not work now, as we are not reaching base case everytime because of memo check
    // cout << count << '\n';
    
    //dp call
    cout << variableJumpStairsDP(n, jumps) << '\n';
}
"
8iEAt5LA,CF2109D,pb_jiang,C++,Monday 19th of May 2025 06:11:36 AM CDT,"// Problem: D. D/D/D
// Contest: Codeforces - Codeforces Round 1025 (Div. 2)
// URL: https://codeforces.com/contest/2109/problem/D
// Memory Limit: 512 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

namespace rngs = std::ranges;
using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

void solve(ll t)
{
    stringstream ts;
    ll n, m, l;
    cin >> n >> m >> l;
    ts << n << ',' << m << ',' << l;
    vl as(l);
    vl odds, evens;
    for (auto &x : as) {
        cin >> x;
        ts << '/' << x;
        (x % 2 ? odds : evens).push_back(x);
    }
    rngs::sort(odds), rngs::sort(evens);
    ts << ':';
    vector<vl> g(n + 1);
    vector<vl> dist(2, vl(n + 1, LLONG_MAX / 2));
    for (ll i = 0, u, v; i < m; ++i) {
        cin >> u >> v;
        ts << '<' << u << ',' << v << '>';
        g[u].push_back(v), g[v].push_back(u);
    }
    /*
    if (t == 73) {
        cout << ts.str() << '\n';
        return;
    }
    */
    dist[0][1] = 0;
    queue<a2l> q;
    q.push({1, 0});
    while (!q.empty()) {
        auto [u, step] = q.front();
        q.pop();
        for (auto v : g[u]) {
            if (dist[1 - step][v] > dist[step][u] + 1) {
                dist[1 - step][v] = dist[step][u] + 1;
                q.push({v, 1 - step});
            }
        }
    }

    ll ec = std::accumulate(evens.begin(), evens.end(), 0ll);
    ll oc = std::accumulate(odds.begin(), odds.end(), 0ll);
    ll even_avail = ec + (oc % 2 == 0 ? oc : oc - odds[0]);
    ll odd_avail = LLONG_MIN / 2;
    if (oc != 0)
        odd_avail = (oc % 2 == 0 ? oc - odds[0] : oc) + ec;

    dbg(dist);
    string s(n, ' ');
    for (ll i = 1; i <= n; ++i) {
        s[i - 1] = ll(dist[0][i] <= even_avail || dist[1][i] <= odd_avail) + '0';
    }
    cout << s << '\n';
}

int main(int argc, char **argv)
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    ll t;
    cin >> t;
    ll ot = t;
    while (t--)
        solve(ot - t);

    return 0;
};"
zGaBT0pP,dataNone,TestGuy1,JSON,Monday 19th of May 2025 06:02:14 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '1f3fa8f4c4cf4e6470a249a80ce4e819b7a9e918afabba14e248eaba897155f034add4045ed924e4da6017ec885357f9d28234fc2fe5c873d8b28304c7a5af095841dec1cf20991670403093b63503e142177b085ca1f57da4a3a2fa9c2165104d1ca614dfbb8d5300f40267caf2d5ead33f8caa37fb7a2c90d805b5e5ad8896',
  otherdata: [
    '19858c3a598ec105c5a0cbfe60f3a16b',
    'd836168179e918b582cb4cf01cb4b0e3',
    'ee215777737cfabbe05bc2164e7d3788',
    '1731f62cafba9f4bcca3ea6e629c474b',
    'b9fdd665482e3636cfa5f02d39f702c2',
    '616353ce3e5161d1be5790287d721944',
    '9e8700d282d062276a1d336397e72904',
    'c4ad4af7a632dd7577b95098a225b8b0'
  ]
}"
zwUKJZU7,LongBow & Arrow Wireframe Animation (Claude 3.7 (O3 AI Initial)),alien_fx_fiend,C++,Monday 19th of May 2025 05:33:51 AM CDT,"I want to draw the 'fletching' for the bottom side of the arrow as well (should be fletching on top and bottom), mirroring the top, and also make the fletching swept backward instead of front as it is presently (make it point the correct side).

Here's the modified code for the fletching section in diff-like format:

```diff
// Fletching (3 short diagonal lines)
const float fletch = 20.0f;
const float step = 5.0f;
// Top fletching
for (int i = 0; i < 3; ++i)
{
    float x = g_arrowPosX - arrowLen + i * step;
    g_pRenderTarget->DrawLine(
        D2D1::Point2F(x, arrowY),
-       D2D1::Point2F(x + fletch, arrowY - fletch * 0.4f + i * 3.0f),
+       D2D1::Point2F(x - fletch, arrowY - fletch * 0.4f + i * 3.0f),
        g_pBrush, 2.0f);
}
+ // Bottom fletching
+ for (int i = 0; i < 3; ++i)
+ {
+     float x = g_arrowPosX - arrowLen + i * step;
+     g_pRenderTarget->DrawLine(
+         D2D1::Point2F(x, arrowY),
+         D2D1::Point2F(x - fletch, arrowY + fletch * 0.4f - i * 3.0f),
+         g_pBrush, 2.0f);
+ }
```

Would you like me to explain the changes I made to the code?

######################################################################################
######################################################################################
##	endroughxfer-urldump #1#
##	<EOF><EOF>
######################################################################################
######################################################################################

New Code /w Fixes:::
//  BowAndArrow.cpp
//  Simple Win32 / Direct2D demo - ""wireframe longbow""
//  Build: cl /EHsc /DUNICODE /D_UNICODE BowAndArrow.cpp d2d1.lib user32.lib gdi32.lib

#include <windows.h>
#include <d2d1.h>
#include <chrono>
#include <cmath>
#include <algorithm>
#pragma comment(lib, ""d2d1"")

// -------------------------------------------------
// Small RAII helper to release COM objects
// -------------------------------------------------
template<class T> void SafeRelease(T** pp)
{
    if (*pp) { (*pp)->Release(); *pp = nullptr; }
}

// -------------------------------------------------
// Animation constants
// -------------------------------------------------
constexpr float  COCK_TIME = 1.0f;   // seconds
constexpr float  HOLD_TIME = 0.5f;   // seconds
constexpr float  FIRE_TIME = 1.0f;   // seconds
constexpr UINT   TIMER_ID = 1;
constexpr UINT   TIMER_MS = 16;     // ~60 FPS

enum class AnimStage { Cocking, Hold, Firing, Done };
constexpr float ARROW_REST_OFFSET = 500.0f;   // pixels in-front of bow ( > 0 )

// String pull distance (pixels) and bow X center
constexpr float STRING_MAX_PULL = 180.0f;
constexpr float CX_BOW = 220.0f;

// -------------------------------------------------
// Global state (kept simple for a demo)
// -------------------------------------------------
HWND                    g_hWnd = nullptr;
ID2D1Factory* g_pFactory = nullptr;
ID2D1HwndRenderTarget* g_pRenderTarget = nullptr;
ID2D1SolidColorBrush* g_pBrush = nullptr;

float g_windowW = 1280.0f;
float g_windowH = 720.0f;
float g_arrowPosX = CX_BOW + ARROW_REST_OFFSET;   // head starts free-floating

// Geometry helpers (depend on window height, so they are updated in WM_SIZE)
float cx = CX_BOW;
float topY = 120.0f;
float bottomY = 600.0f;   // will be overwritten in WM_SIZE
float midY = 360.0f;
float halfHeight = 240.0f;

// Animation variables
AnimStage   g_stage = AnimStage::Cocking;
float       g_timeInStage = 0.0f;        // seconds
auto        g_prevTick = std::chrono::high_resolution_clock::now();
float       g_stringOffset = 0.0f;        // 0 = relaxed, 1 = fully drawn
//float       g_arrowPosX = 0.0f;        // head position

// -------------------------------------------------
// Helpers
// -------------------------------------------------
float Lerp(float a, float b, float t) { return a + (b - a) * t; }

// Create or re-create render target
HRESULT CreateDeviceResources()
{
    if (g_pRenderTarget) return S_OK;

    RECT rc; GetClientRect(g_hWnd, &rc);

    D2D1_SIZE_U size = D2D1::SizeU(rc.right - rc.left,
        rc.bottom - rc.top);

    HRESULT hr = g_pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(g_hWnd, size),
        &g_pRenderTarget);

    if (SUCCEEDED(hr))
        hr = g_pRenderTarget->CreateSolidColorBrush(
            D2D1::ColorF(D2D1::ColorF::White), &g_pBrush);

    return hr;
}

void DiscardDeviceResources()
{
    SafeRelease(&g_pBrush);
    SafeRelease(&g_pRenderTarget);
}

// -------------------------------------------------
// Core rendering
// -------------------------------------------------
void OnRender()
{
    if (FAILED(CreateDeviceResources()))
        return;

    g_pRenderTarget->BeginDraw();
    g_pRenderTarget->Clear(D2D1::ColorF(0x202020)); // dark bg

    // -------------------------------------------------
    // 1. Draw Bow limbs (two quadratic curves)
    // -------------------------------------------------
    ID2D1PathGeometry* pGeom = nullptr;
    ID2D1GeometrySink* pSink = nullptr;
    if (SUCCEEDED(g_pFactory->CreatePathGeometry(&pGeom)))
    {
        pGeom->Open(&pSink);

        //--------------------------------------------------------------
        //  One continuous "")""-shaped limb with a slightly pointy tip.
        //  End-points stay on the string ( (cx, topY) & (cx, bottomY) )
        //--------------------------------------------------------------
        constexpr float NOSE = 35.0f;               // how far the tips stick out
        const     float BULGE = halfHeight * 0.5f;  // max belly distance (x)

        pSink->BeginFigure(D2D1::Point2F(cx, topY), D2D1_FIGURE_BEGIN_HOLLOW);

        // Draw semicircle bow with pointy tip at middle
        // First quarter - top to middle-top
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE, topY + halfHeight * 0.1f),      // slight curve at top
                D2D1::Point2F(cx + BULGE, topY + halfHeight * 0.5f),     // first quarter curve
                D2D1::Point2F(cx + BULGE + NOSE, midY - NOSE)));         // approaching tip

        // Middle part with pointy tip
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY - NOSE * 0.5f),  // curve to tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.5f, midY),               // pointy tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY + NOSE * 0.5f)));  // curve from tip

        // Last quarter - middle-bottom to bottom
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE, midY + NOSE),            // after tip
                D2D1::Point2F(cx + BULGE, bottomY - halfHeight * 0.5f),   // last quarter curve
                D2D1::Point2F(cx + NOSE, bottomY - halfHeight * 0.1f)));  // approaching bottom

        // Connect back to string
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE * 0.5f, bottomY - NOSE * 0.25f),  // curve to bottom
                D2D1::Point2F(cx, bottomY),                              // bottom endpoint
                D2D1::Point2F(cx, bottomY)));                            // dummy point (required)

        pSink->EndFigure(D2D1_FIGURE_END_OPEN);

        pSink->Close();
        g_pRenderTarget->DrawGeometry(pGeom, g_pBrush, 2.0f);

        SafeRelease(&pSink);
        SafeRelease(&pGeom);
    }

    // -------------------------------------------------
    // 2. Draw Bow string
    // -------------------------------------------------
    float pull = g_stringOffset * STRING_MAX_PULL;
    D2D1_POINT_2F p1 = D2D1::Point2F(cx, topY);
    D2D1_POINT_2F pm = D2D1::Point2F(cx - pull, midY);
    D2D1_POINT_2F p2 = D2D1::Point2F(cx, bottomY);

    g_pRenderTarget->DrawLine(p1, pm, g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(pm, p2, g_pBrush, 2.0f);

    // -------------------------------------------------
    // 3. Draw Arrow (simple shaft + head + tail)
    // -------------------------------------------------
    float arrowY = midY;
    float arrowLen = 240.0f;
    float arrowHead = 18.0f;

    // Shaft
    g_pRenderTarget->DrawLine(
        D2D1::Point2F(g_arrowPosX, arrowY),
        D2D1::Point2F(g_arrowPosX - arrowLen, arrowY),
        g_pBrush, 2.0f);

    // Arrow head (small triangle)
    D2D1_POINT_2F headPts[3] = {
        D2D1::Point2F(g_arrowPosX,                 arrowY),
        D2D1::Point2F(g_arrowPosX - arrowHead,     arrowY - arrowHead * 0.5f),
        D2D1::Point2F(g_arrowPosX - arrowHead,     arrowY + arrowHead * 0.5f)
    };
    g_pRenderTarget->DrawLine(headPts[0], headPts[1], g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(headPts[0], headPts[2], g_pBrush, 2.0f);

    // Fletching (3 short diagonal lines)
    const float fletch = 20.0f;
    const float step = 5.0f;
    // Top fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, arrowY),
            D2D1::Point2F(x - fletch, arrowY - fletch * 0.4f + i * 3.0f),
            g_pBrush, 2.0f);
    }
    // Bottom fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, arrowY),
            D2D1::Point2F(x - fletch, arrowY + fletch * 0.4f - i * 3.0f),
            g_pBrush, 2.0f);
    }

    // Present
    HRESULT hr = g_pRenderTarget->EndDraw();
    if (hr == D2DERR_RECREATE_TARGET)
        DiscardDeviceResources();
}

// -------------------------------------------------
// Animation tick (called from WM_TIMER)
// -------------------------------------------------
void UpdateAnimation()
{
    // Compute delta time
    auto  now = std::chrono::high_resolution_clock::now();
    float dt = std::chrono::duration<float>(now - g_prevTick).count();
    g_prevTick = now;
    g_timeInStage += dt;

    switch (g_stage)
    {
    case AnimStage::Cocking:
    {
        float t = min(g_timeInStage / COCK_TIME, 1.0f);
        g_stringOffset = t;                       // 0 -> 1  (string pulled left)

        float startX = cx + ARROW_REST_OFFSET;          // <<< NEW
        float cockedX = cx - STRING_MAX_PULL + 50.0f;    // same as before
        g_arrowPosX = Lerp(startX, cockedX, t);

        if (t >= 1.0f) { g_stage = AnimStage::Hold; g_timeInStage = 0.f; }
    } break;

    case AnimStage::Hold:
        if (g_timeInStage >= HOLD_TIME)
        {
            g_stage = AnimStage::Firing; g_timeInStage = 0.f;
        }
        break;

    case AnimStage::Firing:
    {
        float t = min(g_timeInStage / FIRE_TIME, 1.0f);
        g_stringOffset = 1.0f - t;             // 1 -> 0  (same)

        float startX = cx - STRING_MAX_PULL + 50.0f;  // << same value as cockedX
        float endX = g_windowW + 100.0f;            // fly off screen right
        g_arrowPosX = Lerp(startX, endX, t);

        if (t >= 1.0f)
        {
            g_stage = AnimStage::Cocking; g_timeInStage = 0.f;
        } // loop
    } break;

    case AnimStage::Done:
        // Not used anymore, but kept for completeness
        break;
    }

    // Request redraw
    InvalidateRect(g_hWnd, nullptr, FALSE);
}

// -------------------------------------------------
// Window procedure
// -------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg,
    WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
    case WM_CREATE:
        if (FAILED(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED,
            &g_pFactory)))
            return -1; // abort window creation
        SetTimer(hWnd, TIMER_ID, TIMER_MS, nullptr);
        g_prevTick = std::chrono::high_resolution_clock::now();
        return 0;

    case WM_SIZE:
    {
        g_windowW = static_cast<float>(LOWORD(lParam));
        g_windowH = static_cast<float>(HIWORD(lParam));

        // Update dependent geometry values
        topY = 120.0f;
        bottomY = g_windowH - 120.0f;
        midY = (topY + bottomY) * 0.5f;
        halfHeight = (bottomY - topY) * 0.5f;

        if (g_pRenderTarget)
            g_pRenderTarget->Resize(
                D2D1::SizeU(static_cast<UINT>(g_windowW),
                    static_cast<UINT>(g_windowH)));
    }
    return 0;

    case WM_TIMER:
        if (wParam == TIMER_ID)
            UpdateAnimation();
        return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        BeginPaint(hWnd, &ps);
        OnRender();
        EndPaint(hWnd, &ps);
    } return 0;

    case WM_DESTROY:
        KillTimer(hWnd, TIMER_ID);
        DiscardDeviceResources();
        SafeRelease(&g_pFactory);
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

// -------------------------------------------------
// WinMain - entry point
// -------------------------------------------------
int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE, PWSTR, int nCmdShow)
{
    const wchar_t CLASS_NAME[] = L""BowWindow"";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    g_hWnd = CreateWindowEx(0, CLASS_NAME, L""Direct2D - Longbow Demo"",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        static_cast<int>(g_windowW),
        static_cast<int>(g_windowH),
        nullptr, nullptr, hInst, nullptr);

    ShowWindow(g_hWnd, nCmdShow);

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return 0;
}

######################################################################################
######################################################################################
##	endroughxfer-urldump #1#
##	<EOF><EOF>
######################################################################################
######################################################################################

Original Code:::
//  BowAndArrow.cpp
//  Simple Win32 / Direct2D demo - ""wireframe longbow""
//  Build: cl /EHsc /DUNICODE /D_UNICODE BowAndArrow.cpp d2d1.lib user32.lib gdi32.lib

#include <windows.h>
#include <d2d1.h>
#include <chrono>
#include <cmath>
#include <algorithm>
#pragma comment(lib, ""d2d1"")

// -------------------------------------------------
// Small RAII helper to release COM objects
// -------------------------------------------------
template<class T> void SafeRelease(T** pp)
{
    if (*pp) { (*pp)->Release(); *pp = nullptr; }
}

// -------------------------------------------------
// Animation constants
// -------------------------------------------------
constexpr float  COCK_TIME = 1.0f;   // seconds
constexpr float  HOLD_TIME = 0.5f;   // seconds
constexpr float  FIRE_TIME = 1.0f;   // seconds
constexpr UINT   TIMER_ID = 1;
constexpr UINT   TIMER_MS = 16;     // ~60 FPS

enum class AnimStage { Cocking, Hold, Firing, Done };
constexpr float ARROW_REST_OFFSET = 500.0f;   // pixels in-front of bow ( > 0 )

// String pull distance (pixels) and bow X center
constexpr float STRING_MAX_PULL = 180.0f;
constexpr float CX_BOW = 220.0f;

// -------------------------------------------------
// Global state (kept simple for a demo)
// -------------------------------------------------
HWND                    g_hWnd = nullptr;
ID2D1Factory* g_pFactory = nullptr;
ID2D1HwndRenderTarget* g_pRenderTarget = nullptr;
ID2D1SolidColorBrush* g_pBrush = nullptr;

float g_windowW = 1280.0f;
float g_windowH = 720.0f;
float g_arrowPosX = CX_BOW + ARROW_REST_OFFSET;   // head starts free-floating

// Geometry helpers (depend on window height, so they are updated in WM_SIZE)
float cx = CX_BOW;
float topY = 120.0f;
float bottomY = 600.0f;   // will be overwritten in WM_SIZE
float midY = 360.0f;
float halfHeight = 240.0f;

// Animation variables
AnimStage   g_stage = AnimStage::Cocking;
float       g_timeInStage = 0.0f;        // seconds
auto        g_prevTick = std::chrono::high_resolution_clock::now();
float       g_stringOffset = 0.0f;        // 0 = relaxed, 1 = fully drawn
//float       g_arrowPosX = 0.0f;        // head position

// -------------------------------------------------
// Helpers
// -------------------------------------------------
float Lerp(float a, float b, float t) { return a + (b - a) * t; }

// Create or re-create render target
HRESULT CreateDeviceResources()
{
    if (g_pRenderTarget) return S_OK;

    RECT rc; GetClientRect(g_hWnd, &rc);

    D2D1_SIZE_U size = D2D1::SizeU(rc.right - rc.left,
        rc.bottom - rc.top);

    HRESULT hr = g_pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(g_hWnd, size),
        &g_pRenderTarget);

    if (SUCCEEDED(hr))
        hr = g_pRenderTarget->CreateSolidColorBrush(
            D2D1::ColorF(D2D1::ColorF::White), &g_pBrush);

    return hr;
}

void DiscardDeviceResources()
{
    SafeRelease(&g_pBrush);
    SafeRelease(&g_pRenderTarget);
}

// -------------------------------------------------
// Core rendering
// -------------------------------------------------
void OnRender()
{
    if (FAILED(CreateDeviceResources()))
        return;

    g_pRenderTarget->BeginDraw();
    g_pRenderTarget->Clear(D2D1::ColorF(0x202020)); // dark bg

    // -------------------------------------------------
    // 1. Draw Bow limbs (two quadratic curves)
    // -------------------------------------------------
    ID2D1PathGeometry* pGeom = nullptr;
    ID2D1GeometrySink* pSink = nullptr;
    if (SUCCEEDED(g_pFactory->CreatePathGeometry(&pGeom)))
    {
        pGeom->Open(&pSink);

        //--------------------------------------------------------------
        //  One continuous "")""-shaped limb with a slightly pointy tip.
        //  End-points stay on the string ( (cx, topY) & (cx, bottomY) )
        //--------------------------------------------------------------
        constexpr float NOSE = 35.0f;               // how far the tips stick out
        const     float BULGE = halfHeight * 0.5f;  // max belly distance (x)

        pSink->BeginFigure(D2D1::Point2F(cx, topY), D2D1_FIGURE_BEGIN_HOLLOW);

        // Draw semicircle bow with pointy tip at middle
        // First quarter - top to middle-top
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE, topY + halfHeight * 0.1f),      // slight curve at top
                D2D1::Point2F(cx + BULGE, topY + halfHeight * 0.5f),     // first quarter curve
                D2D1::Point2F(cx + BULGE + NOSE, midY - NOSE)));         // approaching tip

        // Middle part with pointy tip
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY - NOSE * 0.5f),  // curve to tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.5f, midY),               // pointy tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY + NOSE * 0.5f)));  // curve from tip

        // Last quarter - middle-bottom to bottom
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE, midY + NOSE),            // after tip
                D2D1::Point2F(cx + BULGE, bottomY - halfHeight * 0.5f),   // last quarter curve
                D2D1::Point2F(cx + NOSE, bottomY - halfHeight * 0.1f)));  // approaching bottom

        // Connect back to string
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE * 0.5f, bottomY - NOSE * 0.25f),  // curve to bottom
                D2D1::Point2F(cx, bottomY),                              // bottom endpoint
                D2D1::Point2F(cx, bottomY)));                            // dummy point (required)

        pSink->EndFigure(D2D1_FIGURE_END_OPEN);

        pSink->Close();
        g_pRenderTarget->DrawGeometry(pGeom, g_pBrush, 2.0f);

        SafeRelease(&pSink);
        SafeRelease(&pGeom);
    }

    // -------------------------------------------------
    // 2. Draw Bow string
    // -------------------------------------------------
    float pull = g_stringOffset * STRING_MAX_PULL;
    D2D1_POINT_2F p1 = D2D1::Point2F(cx, topY);
    D2D1_POINT_2F pm = D2D1::Point2F(cx - pull, midY);
    D2D1_POINT_2F p2 = D2D1::Point2F(cx, bottomY);

    g_pRenderTarget->DrawLine(p1, pm, g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(pm, p2, g_pBrush, 2.0f);

    // -------------------------------------------------
    // 3. Draw Arrow (simple shaft + head + tail)
    // -------------------------------------------------
    float arrowY = midY;
    float arrowLen = 240.0f;
    float arrowHead = 18.0f;

    // Shaft
    g_pRenderTarget->DrawLine(
        D2D1::Point2F(g_arrowPosX, arrowY),
        D2D1::Point2F(g_arrowPosX - arrowLen, arrowY),
        g_pBrush, 2.0f);

    // Arrow head (small triangle)
    D2D1_POINT_2F headPts[3] = {
        D2D1::Point2F(g_arrowPosX,                 arrowY),
        D2D1::Point2F(g_arrowPosX - arrowHead,     arrowY - arrowHead * 0.5f),
        D2D1::Point2F(g_arrowPosX - arrowHead,     arrowY + arrowHead * 0.5f)
    };
    g_pRenderTarget->DrawLine(headPts[0], headPts[1], g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(headPts[0], headPts[2], g_pBrush, 2.0f);

    // Fletching (3 short diagonal lines)
    const float fletch = 20.0f;
    const float step = 5.0f;
    for (int i = 0; i < 3; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, arrowY),
            D2D1::Point2F(x + fletch, arrowY - fletch * 0.4f + i * 3.0f),
            g_pBrush, 2.0f);
    }

    // Present
    HRESULT hr = g_pRenderTarget->EndDraw();
    if (hr == D2DERR_RECREATE_TARGET)
        DiscardDeviceResources();
}

// -------------------------------------------------
// Animation tick (called from WM_TIMER)
// -------------------------------------------------
void UpdateAnimation()
{
    // Compute delta time
    auto  now = std::chrono::high_resolution_clock::now();
    float dt = std::chrono::duration<float>(now - g_prevTick).count();
    g_prevTick = now;
    g_timeInStage += dt;

    switch (g_stage)
    {
    case AnimStage::Cocking:
    {
        float t = min(g_timeInStage / COCK_TIME, 1.0f);
        g_stringOffset = t;                       // 0 -> 1  (string pulled left)

        float startX = cx + ARROW_REST_OFFSET;          // <<< NEW
        float cockedX = cx - STRING_MAX_PULL + 50.0f;    // same as before
        g_arrowPosX = Lerp(startX, cockedX, t);

        if (t >= 1.0f) { g_stage = AnimStage::Hold; g_timeInStage = 0.f; }
    } break;

    case AnimStage::Hold:
        if (g_timeInStage >= HOLD_TIME)
        {
            g_stage = AnimStage::Firing; g_timeInStage = 0.f;
        }
        break;

    case AnimStage::Firing:
    {
        float t = min(g_timeInStage / FIRE_TIME, 1.0f);
        g_stringOffset = 1.0f - t;             // 1 -> 0  (same)

        float startX = cx - STRING_MAX_PULL + 50.0f;  // << same value as cockedX
        float endX = g_windowW + 100.0f;            // fly off screen right
        g_arrowPosX = Lerp(startX, endX, t);

        if (t >= 1.0f)
        {
            g_stage = AnimStage::Cocking; g_timeInStage = 0.f;
        } // loop
    } break;

    case AnimStage::Done:
        // Not used anymore, but kept for completeness
        break;
    }

    // Request redraw
    InvalidateRect(g_hWnd, nullptr, FALSE);
}

// -------------------------------------------------
// Window procedure
// -------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg,
    WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
    case WM_CREATE:
        if (FAILED(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED,
            &g_pFactory)))
            return -1; // abort window creation
        SetTimer(hWnd, TIMER_ID, TIMER_MS, nullptr);
        g_prevTick = std::chrono::high_resolution_clock::now();
        return 0;

    case WM_SIZE:
    {
        g_windowW = static_cast<float>(LOWORD(lParam));
        g_windowH = static_cast<float>(HIWORD(lParam));

        // Update dependent geometry values
        topY = 120.0f;
        bottomY = g_windowH - 120.0f;
        midY = (topY + bottomY) * 0.5f;
        halfHeight = (bottomY - topY) * 0.5f;

        if (g_pRenderTarget)
            g_pRenderTarget->Resize(
                D2D1::SizeU(static_cast<UINT>(g_windowW),
                    static_cast<UINT>(g_windowH)));
    }
    return 0;

    case WM_TIMER:
        if (wParam == TIMER_ID)
            UpdateAnimation();
        return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        BeginPaint(hWnd, &ps);
        OnRender();
        EndPaint(hWnd, &ps);
    } return 0;

    case WM_DESTROY:
        KillTimer(hWnd, TIMER_ID);
        DiscardDeviceResources();
        SafeRelease(&g_pFactory);
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

// -------------------------------------------------
// WinMain - entry point
// -------------------------------------------------
int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE, PWSTR, int nCmdShow)
{
    const wchar_t CLASS_NAME[] = L""BowWindow"";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    g_hWnd = CreateWindowEx(0, CLASS_NAME, L""Direct2D - Longbow Demo"",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        static_cast<int>(g_windowW),
        static_cast<int>(g_windowH),
        nullptr, nullptr, hInst, nullptr);

    ShowWindow(g_hWnd, nCmdShow);

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return 0;
}"
B7iQyS9w,01Knapsack,Fastrail08,C++,Monday 19th of May 2025 05:33:02 AM CDT,"#include <bits/stdc++.h>
using namespace std;

int solveKnapSack(int index, int profit, int maxW, vector<int> &items, vector<int> &weight, int &max_profit, vector<vector<int> > &memo){
    if(index >= items.size()){
        max_profit = max(max_profit, profit);
        return 0;
    }
    if(memo[index][maxW] != INT_MIN){
        return memo[index][maxW];
    }
    int itemInc = 0, itemExc = 0;
    // item in subset, only if currW + weight[index] <= w
    if(maxW - weight[index] >= 0){
        itemInc += items[index] + solveKnapSack(index + 1, profit + items[index], maxW - weight[index], items, weight, max_profit, memo);
    }
    
    // item not in subset
    itemExc = solveKnapSack(index + 1, profit, maxW, items, weight, max_profit, memo);
    return memo[index][maxW] = max(itemInc, itemExc);
}


int solveKnapSackDP(vector<int> &items, vector<int> &weight, int &maxW){
    vector<vector<int> > dp(items.size(), vector<int> (maxW + 1, -1));
    // the first column has wt = 0, so no item can be included, hence profit = 0
    for(int i = 0; i < items.size(); i++){
        dp[i][0] = 0;
    }
    
    for(int j = 1; j <= maxW; j++){
        dp[0][j] = j < weight[0] ? 0 : items[0];
    }
    
    for(int i = 1; i < items.size(); i++){
        for(int j = 1; j <= maxW; j++){
            dp[i][j] = j < weight[i] ? dp[i - 1][j] : max(dp[i - 1][j], items[i] + dp[i - 1][j - weight[i]]);
        }
    }
    return dp[items.size() - 1][maxW];
}

int main() {
	// your code goes here
    int n, maxW;
    cin >> n;
    vector<int> items(n), weight(n);
    for(int i = 0; i < n; i++){
        cin >> items[i];
    }
    for(int i = 0; i < n; i++){
        cin >> weight[i];
    }
    cin >> maxW;
    int max_profit = INT_MIN;
    vector<vector<int> > memo(n, vector<int>(maxW + 1, INT_MIN));
    
    //memo call (return method)
    //cout << max(solveKnapSack(0, 0, maxW, items, weight, max_profit, memo), 0) << '\n';
    
    //(print method)
    /* 
     print max(max_profit, 0), as the min value can be 0 when no items were included
     cout << max(max_profit, 0) << '\n';
     */
    
    //dp call
    cout << solveKnapSackDP(items, weight, maxW) << '\n';
}
"
WEMw6WSL,2025-05-19T06:25:33.035,powerampache,PHP,Monday 19th of May 2025 05:25:33 AM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:914)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loop(Looper.java:225)
	at android.app.ActivityThread.main(ActivityThread.java:7563)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:539)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:994)

getPlaylists() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[],""suppressedExceptions"":[]}"
7jzuhziW,2025-05-19T06:25:33.027,powerampache,PHP,Monday 19th of May 2025 05:25:33 AM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:914)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loop(Looper.java:225)
	at android.app.ActivityThread.main(ActivityThread.java:7563)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:539)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:994)

getGenres() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[],""suppressedExceptions"":[]}"
eAZSUs5K,2025-05-19T06:25:33.012,powerampache,PHP,Monday 19th of May 2025 05:25:33 AM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:914)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loop(Looper.java:225)
	at android.app.ActivityThread.main(ActivityThread.java:7563)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:539)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:994)

getAlbumsStats() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[],""suppressedExceptions"":[]}"
JMXb3Z0c,Untitled,Cr9Co0,Ruby,Monday 19th of May 2025 05:15:48 AM CDT,"Неделя 1 (может даже меньше)
1) По книге проходишь Главу 1
(Очень подробно почитай про переменные в Руби они обладают своей магией).

https://eagerworks.com/blog/ruby-variables - Это ты посмотришь после прочтения для понимания какого типа бывают переменные

Задача:
Напиши консольный калькулятор

Пример:
Выбор операции - 
1) сложение
2) вычитание
3) умножение
4) деление 

Введите число: 
Введите 2ое число:

Результат сложения: 

Числа могут быть с плавающей запятой т.е (1,25 + 1,25) = 2,50"
ZgKL70P1,bubblify,chayanforyou,HTML,Monday 19th of May 2025 05:08:37 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <title>Bubble Solution Calculator</title>
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <style>
    body {
      font-family: system-ui, sans-serif;
      background: #f0f7fb;
      display: flex;
      justify-content: center;
      padding: 40px 16px;
      margin: 0;
    }
    .card {
      position: relative;
      background: white;
      padding: 24px;
      border-radius: 16px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
      max-width: 600px;
      width: 100%;
      box-sizing: border-box;
    }
    .lang-toggle {
      position: absolute;
      top: 16px;
      right: 16px;
    }
    .lang-toggle button {
      padding: 6px 12px;
      font-size: 14px;
      border: 1px solid #007BFF;
      background: #fff;
      color: #007BFF;
      border-radius: 6px;
      cursor: pointer;
    }
    h2 {
      text-align: center;
      margin-bottom: 24px;
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    label {
      font-weight: 600;
      display: block;
      margin-top: 15px;
    }
    input[type=""number""] {
      width: 100%;
      padding: 10px;
      margin-top: 5px;
      font-size: 16px;
      border-radius: 6px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    .unit-button-container {
      display: flex;
      align-items: flex-end;
      justify-content: space-between;
      margin-top: 10px;
      flex-wrap: wrap;
      gap: 10px;
    }
    .unit-selection {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
    }
    .unit-selection label {
      font-weight: normal;
    }
    button {
      padding: 12px 20px;
      font-size: 16px;
      background-color: #007BFF;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      white-space: nowrap;
    }
    .divider {
      height: 1px;
      background: #ccc;
      margin: 30px 0 20px;
    }
    .result {
      background: #EAF4FE;
      padding: 20px;
      border-radius: 10px;
    }
    .result h3 {
      margin-top: 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .result ul {
      list-style: none;
      padding-left: 0;
    }
    .result ul li {
      position: relative;
      padding-left: 2em;
      margin-bottom: 6px;
    }
    .result ul li::before {
      content: '';
      position: absolute;
      left: 0.6em;
      top: 0.5em;
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }
    .result ul li:nth-child(1)::before { background-color: #6c4f2c; }
    .result ul li:nth-child(2)::before { background-color: #0056b3; }
    .result ul li:nth-child(3)::before { background-color: #00796b; }
    .result ul li:nth-child(4)::before { background-color: #6a1b9a; }

    .instructions {
      background: #FFF7E1;
      padding: 20px;
      border-left: 5px solid #F7C132;
      margin-top: 25px;
      border-radius: 10px;
    }
    .instructions h3 {
      margin-top: 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    ol {
      padding-left: 20px;
    }
    #instruction-steps {
      list-style: none;
      padding-left: 0;
    }
    #instruction-steps li {
      position: relative;
      left: 0.1em;
      padding-left: 1.2em;
    }
    .list-num {
      position: absolute;
      left: 0;
      font-weight: normal;
    }
    @media (max-width: 480px) {
      .unit-button-container {
        flex-direction: column;
        align-items: stretch;
      }
      .unit-selection {
        justify-content: space-around;
      }
      button {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class=""card"" id=""capture-area"">
    <div class=""lang-toggle"">
      <button onclick=""toggleLanguage()"" id=""lang-btn""></button>
    </div>
    <h2 id=""title""></h2>

    <label for=""amount"" id=""label-amount""></label>
    <input type=""number"" id=""amount"" value=""1"" min=""0.1"" step=""0.1"">

    <div class=""unit-button-container"">
      <div class=""unit-selection"">
        <label><input type=""radio"" name=""unit"" value=""l"" checked> <span id=""label-liter""></span></label>
        <label><input type=""radio"" name=""unit"" value=""ml""> <span id=""label-ml""></span></label>
      </div>
      <button onclick=""calculateSolution()"" id=""calc-btn""></button>
    </div>

    <div class=""divider""></div>

    <div class=""result"" id=""result""></div>

    <div class=""instructions"">
      <h3 id=""instructions-title""></h3>
      <ol id=""instruction-steps""></ol>
    </div>
  </div>

  <script>
    const translations = {
      en: {
        title: '🫧 Bubble Solution Calculator',
        amountLabel: 'Enter Total Solution Amount',
        liter: 'Liter (L)',
        ml: 'Milliliter (ml)',
        button: 'Calculate Ingredients',
        ingredientsTitle: '🧴 Required Ingredients',
        restLine: 'Let the mixture rest for at least 1 hour for best bubbles!',
        items: [
          'Warm Water',
          'Dish Soap',
          'Glycerin (or Sugar/Corn Syrup)',
          'Baking Powder (optional)'
        ],
        instructionsTitle: '🧪 Instructions',
        instructions: [
          'Pour the calculated amount of warm water into a large container.',
          'Add the measured dish soap and stir gently to avoid bubbles.',
          'Mix in the glycerin (or sugar/corn syrup).',
          'Stir in the baking powder (optional).',
          'Let the mixture rest for at least 1 hour or overnight for best results.',
          'Enjoy making big and strong bubbles!'
        ]
      },
      bn: {
        title: '🫧 বাবল সল্যুশন ক্যালকুলেটর',
        amountLabel: 'মোট বাবল সল্যুশনের পরিমাণ লিখুন',
        liter: 'লিটার (L)',
        ml: 'মিলিলিটার (ml)',
        button: 'উপাদান হিসাব করুন',
        ingredientsTitle: '🧴 প্রয়োজনীয় উপাদান',
        restLine: 'সর্বোত্তম বাবল পারফরম্যান্সের জন্য কমপক্ষে ১ ঘণ্টা বিশ্রাম দিন।',
        items: [
          'উষ্ণ পানি',
          'ডিশ সোডা',
          'গ্লিসারিন (অথবা চিনি/ভুট্টার সিরাপ)',
          'বেকিং পাউডার (ঐচ্ছিক)'
        ],
        instructionsTitle: '🧪 নির্দেশাবলী',
        instructions: [
          'উষ্ণ পানি একটি বড় পাত্রে নিন।',
          'ডিশ সোডা মিশিয়ে আস্তে নাড়ুন যাতে ফেনা না উঠে।',
          'গ্লিসারিন (অথবা চিনি/ভুট্টার সিরাপ) মেশান।',
          'বেকিং পাউডার (ঐচ্ছিক) দিয়ে মিশিয়ে নিন।',
          'কমপক্ষে ১ ঘণ্টা বা রাতভর রেখে দিন।',
          'তারপর মজার বাবল তৈরি উপভোগ করুন!'
        ]
      }
    };

    let currentLang = 'en';

    function toggleLanguage() {
      currentLang = currentLang === 'en' ? 'bn' : 'en';
      setLanguage();
      calculateSolution();
    }

    function setLanguage() {
      const t = translations[currentLang];
      document.getElementById('title').innerText = t.title;
      document.getElementById('label-amount').innerText = t.amountLabel;
      document.getElementById('label-liter').innerText = t.liter;
      document.getElementById('label-ml').innerText = t.ml;
      document.getElementById('calc-btn').innerText = t.button;
      document.getElementById('instructions-title').innerText = t.instructionsTitle;
      document.getElementById('lang-btn').innerText = currentLang === 'en' ? 'বাংলা' : 'English';

      document.getElementById('instruction-steps').innerHTML = t.instructions.map((text, index) => {
        const num = currentLang === 'bn' ? convertToBanglaNumber(index + 1) : index + 1;
        return `<li><span class=""list-num"">${num}.</span> ${text}</li>`;
      }).join('');
    }

    function convertToBanglaNumber(str) {
      const bnDigits = ['০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯'];
      return str.toString().replace(/[0-9]/g, d => bnDigits[d]);
    }

    function formatVolume(value) {
      const formatted = value >= 1000 ? `${(value / 1000).toFixed(1)} L` : `${value.toFixed(0)} mL`;
      return currentLang === 'bn' ? convertToBanglaNumber(formatted) : formatted;
    }

    function formatNumber(value) {
      return currentLang === 'bn' ? convertToBanglaNumber(value.toString()) : value.toString();
    }

    function calculateSolution() {
      const amount = parseFloat(document.getElementById('amount').value);
      const unit = document.querySelector('input[name=""unit""]:checked').value;
      const t = translations[currentLang];

      if (isNaN(amount) || amount <= 0) {
        alert(""Please enter a valid amount."");
        return;
      }

      const totalMl = unit === ""l"" ? amount * 1000 : amount;
      const baseVolume = 1900;
      const multiplier = totalMl / baseVolume;

      const water = 1900 * multiplier;
      const dishSoap = 250 * multiplier;
      const glycerinMl = 60 * multiplier;
      const glycerinTbsp = glycerinMl / 15;
      const bakingPowderGm = 10 * multiplier;
      const bakingPowderTsp = bakingPowderGm / 5;

      const result = `
        <h3>${t.ingredientsTitle}</h3>
        <ul>
          <li><strong>${t.items[0]}:</strong> ${formatVolume(water)}</li>
          <li><strong>${t.items[1]}:</strong> ${formatVolume(dishSoap)}</li>
          <li><strong>${t.items[2]}:</strong> ${formatVolume(glycerinMl)} (${formatNumber(glycerinTbsp.toFixed(1))} tbsp)</li>
          <li><strong>${t.items[3]}:</strong> ${formatNumber(bakingPowderGm.toFixed(0))} g (${formatNumber(bakingPowderTsp.toFixed(1))} tsp)</li>
        </ul>
        <p style=""margin-top: 10px;"">${t.restLine}</p>
      `;

      document.getElementById('result').innerHTML = result;
    }

    window.onload = () => {
      setLanguage();
      calculateSolution();
    };
  </script>
</body>
</html>"
A2Bi0CfF,Learn SQL: The Hands-on Guide with interactive exercises,f0f077,MySQL,Monday 19th of May 2025 04:41:25 AM CDT,"Learn SQL: The Hands-on Guide with interactive exercises
Master SQL by solving real-world problems. Learn JOINs, subselects, GROUP BYs and more. From Beginner to Pro in no time! 
What you'll learn
Master SQL Quickly: Grasp SQL efficiently with 80+ real-world exercises
Learn everything you need, in a single course: From Beginner to Pro
Apply Skills Practically: Work on real-world projects to solidify your knowledge 
for more :https://gplinks.co/TkNgs"
G8kNrHaM,Untitled,kutuzzzov,C++,Monday 19th of May 2025 04:38:40 AM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <sstream>

int countLines(const std::string& filename) {
    std::ifstream file(filename);
    int lines = 0;
    std::string line;
    while (std::getline(file, line)) {
        ++lines;
    }
    return lines;
}

int countWords(const std::string& filename) {
    std::ifstream file(filename);
    int words = 0;
    std::string word;
    while (file >> word) {
        ++words;
    }
    return words;
}

int countCharacters(const std::string& filename) {
    std::ifstream file(filename);
    int characters = 0;
    char ch;
    while (file.get(ch)) {
        ++characters;
    }
    return characters;
}

void printResults(int lines, int words, int characters) {
    std::cout << ""Lines: "" << lines << ""\n"";
    std::cout << ""Words: "" << words << ""\n"";
    std::cout << ""Characters: "" << characters << ""\n"";
}

int main() {
    std::string filename = ""example.txt"";

    int lines = countLines(filename);
    int words = countWords(filename);
    int characters = countCharacters(filename);

    printResults(lines, words, characters);

    return 0;
}"
PXb3acLG,Untitled,kutuzzzov,C++,Monday 19th of May 2025 04:37:44 AM CDT,"#include <iostream>
#include <vector>
#include <random>
#include <numeric>

std::vector<int> generateRandomNumbers(int count, int min, int max) {
    std::vector<int> numbers;
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(min, max);

    for (int i = 0; i < count; ++i) {
        numbers.push_back(dist(gen));
    }

    return numbers;
}

int sumNumbers(const std::vector<int>& numbers) {
    return std::accumulate(numbers.begin(), numbers.end(), 0);
}

void printNumbers(const std::vector<int>& numbers) {
    std::cout << ""Generated numbers: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << ""\n"";
}

int main() {
    int count = 5, min = 1, max = 10;

    auto numbers = generateRandomNumbers(count, min, max);
    printNumbers(numbers);

    int sum = sumNumbers(numbers);
    std::cout << ""Sum: "" << sum << ""\n"";

    return 0;
}"
SP9wEbZK,Untitled,kutuzzzov,C++,Monday 19th of May 2025 04:36:39 AM CDT,"#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

bool isPalindrome(const std::string& str) {
    std::string reversed = str;
    std::reverse(reversed.begin(), reversed.end());
    return str == reversed;
}

int countCharacters(const std::string& str) {
    return str.length();
}

std::string toUpperCase(const std::string& str) {
    std::string result = str;
    for (char& ch : result) {
        ch = std::toupper(ch);
    }
    return result;
}

void printResults(bool isPal, int count, const std::string& upperStr) {
    std::cout << ""Is palindrome: "" << (isPal ? ""Yes"" : ""No"") << ""\n"";
    std::cout << ""Character count: "" << count << ""\n"";
    std::cout << ""Uppercase: "" << upperStr << ""\n"";
}

int main() {
    std::string text = ""level"";

    bool isPal = isPalindrome(text);
    int count = countCharacters(text);
    std::string upperStr = toUpperCase(text);

    printResults(isPal, count, upperStr);

    return 0;
}"
DhCK5Mq6,Untitled,kutuzzzov,C++,Monday 19th of May 2025 04:34:18 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

int sum(const std::vector<int>& arr) {
    return std::accumulate(arr.begin(), arr.end(), 0);
}

double average(const std::vector<int>& arr) {
    if (arr.empty()) throw std::runtime_error(""Array is empty"");
    return static_cast<double>(sum(arr)) / arr.size();
}

int maxElement(const std::vector<int>& arr) {
    if (arr.empty()) throw std::runtime_error(""Array is empty"");
    return *std::max_element(arr.begin(), arr.end());
}

void printResults(int sum, double avg, int max) {
    std::cout << ""Sum: "" << sum << ""\nAverage: "" << avg << ""\nMax: "" << max << ""\n"";
}

int main() {
    std::vector<int> arr = {1, 2, 3, 4, 5};

    try {
        int s = sum(arr);
        double avg = average(arr);
        int m = maxElement(arr);
        printResults(s, avg, m);
    } catch (const std::exception& e) {
        std::cerr << e.what() << ""\n"";
    }

    return 0;
}"
FeLtEuNN,.SQL for Beginners: Learn SQL using MySQL and Database Design,f0f077,MySQL,Monday 19th of May 2025 04:33:05 AM CDT,"SQL for Beginners: Learn SQL using MySQL and Database Design
Understand SQL using the MySQL database. Learn Database Design and Data Analysis with Normalization and Relationships 
What you'll learn
Have a detailed knowledge and understanding of using MySQL, one of the most widely used databases in the world.
Obtained a knowledge of SQL, and MySQL, allows students to apply for jobs in the IT sector. 
for more :https://cuty.io/P1d8ZuVy"
DFbVHmx8,Untitled,kutuzzzov,C++,Monday 19th of May 2025 04:32:07 AM CDT,"#include <iostream>
#include <string>

int add(int a, int b) {
    return a + b;
}

int subtract(int a, int b) {
    return a - b;
}

int multiply(int a, int b) {
    return a * b;
}

double divide(int a, int b) {
    if (b == 0) throw std::runtime_error(""Division by zero"");
    return static_cast<double>(a) / b;
}

void printMenu() {
    std::cout << ""1. Add\n2. Subtract\n3. Multiply\n4. Divide\nChoose an option: "";
}

int main() {
    int choice, a, b;
    printMenu();
    std::cin >> choice;

    std::cout << ""Enter two numbers: "";
    std::cin >> a >> b;

    try {
        switch (choice) {
            case 1: std::cout << ""Result: "" << add(a, b) << ""\n""; break;
            case 2: std::cout << ""Result: "" << subtract(a, b) << ""\n""; break;
            case 3: std::cout << ""Result: "" << multiply(a, b) << ""\n""; break;
            case 4: std::cout << ""Result: "" << divide(a, b) << ""\n""; break;
            default: std::cout << ""Invalid option\n"";
        }
    } catch (const std::exception& e) {
        std::cerr << e.what() << ""\n"";
    }

    return 0;
}"
auFiJmj0,Untitled,ibnu7,JSON,Monday 19th of May 2025 04:21:35 AM CDT,"[
  {
    ""id"": ""4a4ee2bc6cefa60f"",
    ""key"": ""key1"",
    ""expiresAt"": ""2025-08-09"",
    ""allowOffline"": true
  },
  {
    ""id"": ""ali456"",
    ""key"": ""key2"",
    ""expiresAt"": ""2025-06-15"",
    ""allowOffline"": false
  }
]"
7dKqx1hM,Untitled,krangelov2004,C++,Monday 19th of May 2025 04:07:38 AM CDT,"//04. Printing Triangle----100ot100-----c+++ FUND
 
#include<iostream>
#include<string>
int n=0;
 
int printTriangle1( int  n)
{
    for (int row=1; row <= n; ++row)
    {
    for (int col=1; col <= row; ++col)
    {
        std::cout<< col << "" "" ;
    }
      std::cout<<std::endl;
    }
    return 0;
}
    int printTriangle2(int n)
{
    for (int row=n;row>=1;--row)
    {
    for (int col=1;col<row;++col)
    {
        std::cout<<col<< "" ""  ;
    }
     std::cout<<std::endl;
    }
    return 0;
}   
        
 
int main()
{
  int n;
  std::cin>>n;
  printTriangle1( n);
  printTriangle2( n);
  return 0;

    }

"
HqaykGvu,amd test fedora charging battery,rogersjcaleb,HTML 5,Monday 19th of May 2025 03:40:33 AM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""utf-8"">
    <title>Linux s2idle Power Report</title>
    <style>
        h1 {
            color: #00b0f0;
            font-family: sans-serif;
            font-size: 42pt;
        }

        h2 {
            font-size: 15pt;
            font-family: sans-serif;
            color: #00b0f0;
            margin-top: 2em;
            margin-bottom: 0em;
            letter-spacing: 0.08em;
        }

        h3,
        h4,
        h5 {
            font-family: sans-serif;
            margin-top: 1em;
            margin-bottom: 0em;
            letter-spacing: 0.08em;
        }

        body {

            font-family: sans-serif;
            letter-spacing: 0.02em;
            background-color: #ffffff;
            color: #000000;
            margin: 0em 5.5em 0em 5.5em;

        }

        table,
        th,
        td {
            border-width: 0;
            table-layout: fixed;
            font-family: sans-serif;
            letter-spacing: 0.02em;
            color: #000000;
            margin-bottom: 10px;
        }

        .○ {
            font-family: ""Fira Code"", monospace;
            color: #000000;
        }

        .❌ {
            color: #ff0000;
            font-family: ""Fira Code"", monospace;
        }

        .🚦 {
            color: #a4a100;
            font-family: ""Fira Code"", monospace;
        }

        .🦟 {
            color: #848484;
            font-family: ""Fira Code"", monospace;
        }

        .hidden-by-default {
            display: none;
            border: 0px;
            border-spacing: 0px;
            border-collapse: collapse;
        }

        .hide-borders {
            border: 0px;
            border-collapse: collapse;
        }

        .row-disabled {
            display: none;
            border: 0px;
            border-collapse: collapse;
        }

        .arrow::before {
            content: ""\23f5"";
        }

        .arrow-expanded::before {
            content: ""\23F7"";

        }

        .row-low {
            background-color: #ace3ac;
            text-align: center;
        }

        .row-low:hover {
            background-color: #caedca;
            text-align: center;
        }

        .row-neutral {
            background-color: #e0e0e0;
            text-align: center;
        }

        .row-neutral:hover {
            background-color: #f0f0f0;
            text-align: center;
        }

        .row-high {
            background-color: #ffb2aa;
            text-align: center;
        }

        .row-high:hover {
            background-color: #ffd5d1;
            text-align: center;
        }
    </style>
</head>

<body>
    <script>
        function select_changed(selector, row) {
            var x = document.getElementById(selector).value;
            var y;
            var rows = document.querySelectorAll(row + "" tr.row-disabled"");
            for (var i = 0; i < rows.length; i++) {
                rows[i].style.display = ""none"";
            }
            if (x != ""0"") {
                document.querySelector(row + x).style.display = ""table-row"";
                if (row == row + x)
                    document.getElementById(selector).value = 0;
            }
        }
        function cycle_data_changed() {
            select_changed(""cycles"", ""#cycledata"")
        }

        function failure_data_changed() {
            select_changed(""failures"", ""#failuredata"")
        }

        function debug_data_changed() {
            select_changed(""debug"", ""#debugdata"")
            if (document.getElementById(""debug"").value != ""0"") {
                document.getElementById(""debug_label"").style.display = """";
            } else {
                document.getElementById(""debug_label"").style.display = ""none"";
            }
        }

        function prereq_debug_data_changed() {
            var table = document.getElementById(""prereqdebugdata"");
            var arrow = document.getElementById(""prereqdata-arrow"")
            if (table.classList.contains(""hidden-by-default"")) {
                table.className = ""hide-borders"";
                arrow.className = ""arrow-expanded"";
            } else {
                table.className = ""hidden-by-default"";
                arrow.className = ""arrow""
            }
        }

        function parseTimeToSeconds(timeString) {
            var timeParts = timeString.split("":"");
            var hours = parseInt(timeParts[0]);
            var minutes = parseInt(timeParts[1]);
            var seconds = parseInt(timeParts[2]);
            return (hours * 3600) + (minutes * 60) + seconds;
        }

        function pick_data_for_cycle(num) {
            //show cycles messages for this cycle
            document.getElementById(""cycles"").selectedIndex = num + 1;
            cycle_data_changed();
            
            
            //show debug data for this cycle
            document.getElementById(""debug"").selectedIndex = num + 1;
            debug_data_changed();
            
        }

        function summary_data_changed() {
            var table = document.getElementById(""summary"");
            const start_select = document.getElementById('start_select');
            const end_select = document.getElementById('end_select');
            var start = parseInt(start_select.value);
            var end = parseInt(end_select.value);
            var min_duration = 0;

            // if duration filter activated, hide rows that don't match
            if (document.getElementById('med_duration').checked)
                min_duration = document.getElementById(""med_duration"").value;
            else if (document.getElementById('min_duration').checked)
                min_duration = document.getElementById(""min_duration"").value;

            // reset end if start was picked bigger than end
            if (start > end) {
                end_select.selectedIndex = start;
                end = start;
            }

            // show all rows between start and end
            for (var i = 1; i < table.rows.length; i++) {
                var row = table.rows[i];
                var index = parseInt(row.cells[0].textContent);
                var row_duration = parseTimeToSeconds(row.cells[2].textContent);

                if (row_duration >= min_duration &&
                    index >= start && index <= end) {
                    row.style.display = """";
                } else {
                    row.style.display = ""none"";
                }
            }

            // reset other tables if we now show more than one cycle
            if (end - start > 0) {
                // reset cycle data selector
                document.getElementById(""cycles"").selectedIndex = 0;
                cycle_data_changed();
                
                
                //reset debug data selector
                document.getElementById(""debug"").selectedIndex = 0;
                debug_data_changed();
                
            } else if (start = end)
                pick_data_for_cycle(start)
        }

        function populate_summary_selectors() {
            const table = document.getElementById('summary');
            const start_select = document.getElementById('start_select');
            const end_select = document.getElementById('end_select');

            for (let i = 0; i < table.rows.length; i++) {
                const start_option = document.createElement('option');
                const end_option = document.createElement('option');
                var columns = table.rows[i].getElementsByTagName(""td"");

                //Populate all start/end selector values
                if (i != table.rows.length - 1) {
                    start_option.text = `Cycle ${i}`;
                    start_option.value = i
                    end_option.text = `Cycle ${i}`;
                    end_option.value = i
                    start_select.add(start_option);
                    end_select.add(end_option);
                }

                //apply coloring to hardware sleep
                if (i != 0) {
                    if (parseFloat(columns[2].innerHTML) < 85)
                        table.rows[i].className = ""row-high"";
                }
            }

            // Pick the end selector for last column
            end_select.selectedIndex = table.rows.length - 2;

            // if we only have one selector then pick it
            if (start_select.selectedIndex == end_select.selectedIndex) {
                pick_summary_cycle(start_select.selectedIndex)
            }
        }

        function pick_summary_cycle(num) {
            //narrow down filter to just the selected cycle
            document.getElementById('start_select').selectedIndex = num;
            document.getElementById('end_select').selectedIndex = num;
            summary_data_changed();
            pick_data_for_cycle(num);
        }

        function reset_clicked() {
            const table = document.getElementById('summary');
            document.getElementById('start_select').selectedIndex = 0;
            console.log(table.rows.length);
            document.getElementById('end_select').selectedIndex = table.rows.length - 2;
            document.getElementById('all_time').checked = true;
            summary_data_changed();
        }

        window.addEventListener('load', populate_summary_selectors);
    </script>
    <h1>Linux s2idle Power Report</h1>
    <p>s2idle report created 2025-05-19 08:38:21.513664 using amd-s2idle 0.2.0</p>
    
    <table class=""hide-borders"">
        
        <TR>
            <TD>💻</TD>
            <TD>AMD Ryzen AI 9 HX 370 w/ Radeon 890M (family 1a model 24)</TD>
        </TR>
        
        <TR>
            <TD>💻</TD>
            <TD>Framework Laptop 13 (AMD Ryzen AI 300 Series) (Laptop)</TD>
        </TR>
        
        <TR>
            <TD>🐧</TD>
            <TD>Fedora Linux 42 (Workstation Edition)</TD>
        </TR>
        
        <TR>
            <TD>🐧</TD>
            <TD>Kernel 6.14.0-63.fc42.x86_64</TD>
        </TR>
        
        <TR>
            <TD>🔋</TD>
            <TD>Battery BAT1 (NVT FRANGWA) is operating at 92.49% of design</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>ASPM policy set to 'default'</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>GPIO driver `pinctrl_amd` available</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>PMC driver `amd_pmc` loaded (Program 11 Firmware 93.4.0)</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c1:00.4</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c3:00.0</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c3:00.3</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c3:00.4</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB4 driver `thunderbolt` bound to 0000:c3:00.5</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB4 driver `thunderbolt` bound to 0000:c3:00.6</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>System is configured for s2idle</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>GPU driver `amdgpu` bound to 0000:c1:00.0</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>AMD Ryzen AI 9 HX 370 w/ Radeon 890M (family 1a model 24)</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>PC6 and CC6 enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>PC6 and CC6 enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>SMT enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>IOMMU properly configured</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>ACPI FADT supports Low-power S0 idle</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>LPS0 _DSM enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>WLAN driver `mt7921e` bound to 0000:c0:00.0</TD>
        </TR>
        
    </table>
    
    
    <h3>
        <label id=""prereqdata-arrow"" for=""prereqdebugdata"" onclick=""prereq_debug_data_changed()""
            class=""arrow"">Prerequisites</label>
    </h3>
    <table id=""prereqdebugdata"" class=""hidden-by-default"">
        
        <TR>
            <TD>
                <pre>DMI data:
bios_date: 03/10/2025
bios_release: 3.3
bios_vendor: INSYDE Corp.
bios_version: 03.03
board_name: FRANMGCP09
board_vendor: Framework
board_version: A9
chassis_type: 10
chassis_vendor: Framework
chassis_version: A9
product_sku: FRANMGCP09
product_version: A9</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>VCE feature version: 0, firmware version: 0x00000000
UVD feature version: 0, firmware version: 0x00000000
MC feature version: 0, firmware version: 0x00000000
ME feature version: 35, firmware version: 0x0000001d
PFP feature version: 35, firmware version: 0x00000029
CE feature version: 0, firmware version: 0x00000000
RLC feature version: 1, firmware version: 0x11510542
RLC SRLC feature version: 0, firmware version: 0x00000000
RLC SRLG feature version: 0, firmware version: 0x00000000
RLC SRLS feature version: 0, firmware version: 0x00000000
RLCP feature version: 1, firmware version: 0x11510341
RLCV feature version: 0, firmware version: 0x00000000
MEC feature version: 35, firmware version: 0x0000001d
IMU feature version: 0, firmware version: 0x0b332000
SOS feature version: 0, firmware version: 0x00000000
ASD feature version: 553648364, firmware version: 0x210000ec
TA XGMI feature version: 0x00000000, firmware version: 0x00000000
TA RAS feature version: 0x00000000, firmware version: 0x00000000
TA HDCP feature version: 0x00000000, firmware version: 0x17000043
TA DTM feature version: 0x00000000, firmware version: 0x12000018
TA RAP feature version: 0x00000000, firmware version: 0x00000000
TA SECUREDISPLAY feature version: 0x00000000, firmware version: 0x00000000
SMC feature version: 0, program: 11, firmware version: 0x0b5d0400 (93.4.0)
SDMA0 feature version: 60, firmware version: 0x0000000b
VCN feature version: 0, firmware version: 0x09117009
DMCU feature version: 0, firmware version: 0x00000000
DMCUB feature version: 0, firmware version: 0x09001700
TOC feature version: 0, firmware version: 0x0000000b
MES_KIQ feature version: 6, firmware version: 0x0000006d
MES feature version: 1, firmware version: 0x00000074
VPE feature version: 60, firmware version: 0x00000036
VBIOS version: 113-STRIXEMU-001</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>PCI devices
│ 0000:00:00.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1507]
│ 0000:00:00.2 : Advanced Micro Devices, Inc. [AMD] IOMMU [1022:1508]
│ 0000:00:01.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:01.1 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150a] : \_SB_.PCI0.GPP0
│ 0000:00:01.2 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150a] : \_SB_.PCI0.GPP1
│ 0000:00:02.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:02.1 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150b] : \_SB_.PCI0.GPP3
├─ 0000:bf:00.0 : Sandisk Corp Non-Volatile memory controller [15b7:5030] : \_SB_.PCI0.GPP3.NVME
│ 0000:00:02.3 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150b] : \_SB_.PCI0.GPP5
├─ 0000:c0:00.0 : MEDIATEK Corp. Network controller [14c3:0616] : \_SB_.PCI0.GPP5.WLAN
│ 0000:00:03.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:08.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:08.1 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150c] : \_SB_.PCI0.GPPA
├─ 0000:c1:00.0 : Advanced Micro Devices, Inc. [AMD/ATI] Display controller [1002:150e] : \_SB_.PCI0.GPPA.VGA_
├─ 0000:c1:00.1 : Advanced Micro Devices, Inc. [AMD/ATI] Audio device [1002:1640] : \_SB_.PCI0.GPPA.HDAU
├─ 0000:c1:00.2 : Advanced Micro Devices, Inc. [AMD] Encryption controller [1022:17e0] : \_SB_.PCI0.GPPA.PSP_
├─ 0000:c1:00.4 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151e] : \_SB_.PCI0.GPPA.XHC1
├─ 0000:c1:00.5 : Advanced Micro Devices, Inc. [AMD] Multimedia controller [1022:15e2] : \_SB_.PCI0.GPPA.ACP_
├─ 0000:c1:00.6 : Advanced Micro Devices, Inc. [AMD] Audio device [1022:15e3] : \_SB_.PCI0.GPPA.AZAL
│ 0000:00:08.2 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150c] : \_SB_.PCI0.GPPB
├─ 0000:c2:00.0 : Advanced Micro Devices, Inc. [AMD]  [1022:150d]
├─ 0000:c2:00.1 : Advanced Micro Devices, Inc. [AMD] Signal processing controller [1022:17f0] : \_SB_.PCI0.GPPB.IPU_
│ 0000:00:08.3 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150c] : \_SB_.PCI0.GPPC
├─ 0000:c3:00.0 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151f] : \_SB_.PCI0.GPPC.XHC0
├─ 0000:c3:00.3 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151a] : \_SB_.PCI0.GPPC.XHC3
├─ 0000:c3:00.4 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151b] : \_SB_.PCI0.GPPC.XHC4
├─ 0000:c3:00.5 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151c] : \_SB_.PCI0.GPPC.NHI0
├─ 0000:c3:00.6 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151d] : \_SB_.PCI0.GPPC.NHI1
│ 0000:00:14.0 : Advanced Micro Devices, Inc. [AMD] SMBus [1022:790b] : \_SB_.PCI0.SMBS
│ 0000:00:14.3 : Advanced Micro Devices, Inc. [AMD] ISA bridge [1022:790e] : \_SB_.PCI0.LPC0
│ 0000:00:18.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16f8]
│ 0000:00:18.1 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16f9]
│ 0000:00:18.2 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fa]
│ 0000:00:18.3 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fb]
│ 0000:00:18.4 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fc]
│ 0000:00:18.5 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fd]
│ 0000:00:18.6 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fe]
└─0000:00:18.7 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16ff]</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>I2C HID devices:
| ""FRMW0004:00 32AC:0006 Wireless Radio Control"" [FRMW0004] : \_SB_.I2CB.ECKB
| ""FRMW0004:00 32AC:0006 Consumer Control"" [FRMW0004] : \_SB_.I2CB.ECKB
| ""PIXA3854:00 093A:0274 Mouse"" [PIXA3854] : \_SB_.I2CD.TPAD
└─""PIXA3854:00 093A:0274 Touchpad"" [PIXA3854] : \_SB_.I2CD.TPAD</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>Windows GPIO 0 debounce: disabled</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre><table border=""1"" class=""dataframe"" id=""gpio"">
  <thead>
    <tr style=""text-align: right;"">
      <th>gpio</th>
      <th>int</th>
      <th>active</th>
      <th>trigger</th>
      <th>S0i3</th>
      <th>S3</th>
      <th>S4/S5</th>
      <th>Z</th>
      <th>wake</th>
      <th>pull</th>
      <th>orient</th>
      <th>debounce</th>
      <th>reg</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>#0</td>
      <td>😛</td>
      <td>↑</td>
      <td>edge</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td>↑</td>
      <td>input  ↑</td>
      <td>b (🕑 046875us)</td>
      <td>0x81578e3</td>
    </tr>
    <tr>
      <td>#2</td>
      <td>😷</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>↑</td>
      <td>input  ↑</td>
      <td></td>
      <td>0x150b00</td>
    </tr>
    <tr>
      <td>#5</td>
      <td>😛</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↑</td>
      <td></td>
      <td>0x51b00</td>
    </tr>
    <tr>
      <td>#8</td>
      <td>😛</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td>↑</td>
      <td>input  ↑</td>
      <td></td>
      <td>0x8151b00</td>
    </tr>
    <tr>
      <td>#18</td>
      <td>😛</td>
      <td>↓</td>
      <td>edge</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↑</td>
      <td></td>
      <td>0x57a00</td>
    </tr>
    <tr>
      <td>#44</td>
      <td>😷</td>
      <td>↑</td>
      <td>edge</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x800</td>
    </tr>
    <tr>
      <td>#52</td>
      <td>😷</td>
      <td>↑</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x900</td>
    </tr>
    <tr>
      <td>#54</td>
      <td>😛</td>
      <td>↑</td>
      <td>edge</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x1800</td>
    </tr>
    <tr>
      <td>#58</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x8007900</td>
    </tr>
    <tr>
      <td>#59</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x8007900</td>
    </tr>
    <tr>
      <td>#61</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x7900</td>
    </tr>
    <tr>
      <td>#62</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x7900</td>
    </tr>
    <tr>
      <td>#84</td>
      <td>😛</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↑</td>
      <td></td>
      <td>0x51b00</td>
    </tr>
    <tr>
      <td>#172</td>
      <td>😷</td>
      <td>↑</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x900</td>
    </tr>
  </tbody>
</table></pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>New enough kernel to avoid HSMP check</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>New enough kernel to avoid NVME check</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>CPU core count: 8 max: 8192</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>SMT control: on</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>Found IOMMU /sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0
DMA protection:
	/sys/devices/pci0000:00/0000:00:08.3/0000:c3:00.5/domain0/iommu_dma_protection: 1
	/sys/devices/pci0000:00/0000:00:08.3/0000:c3:00.6/domain1/iommu_dma_protection: 1</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20240322 (64-bit version)
 * Copyright (c) 2000 - 2023 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of /sys/firmware/acpi/tables/SSDT26
 *
 * Original Table Header:
 *     Signature        ""SSDT""
 *     Length           0x00000A40 (2624)
 *     Revision         0x02
 *     Checksum         0x93
 *     OEM ID           ""INSYDE""
 *     OEM Table ID     ""EDK2    ""
 *     OEM Revision     0x00000001 (1)
 *     Compiler ID      ""ACPI""
 *     Compiler Version 0x00040000 (262144)
 */
DefinitionBlock ("""", ""SSDT"", 2, ""INSYDE"", ""EDK2    "", 0x00000001)
{
    External (_SB_.BTNS, DeviceObj)
    External (_SB_.CMBS, IntObj)
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP4.SDCR, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP9, DeviceObj)
    External (_SB_.PCI0.GPPA.ACP_, DeviceObj)
    External (_SB_.PCI0.GPPA.AZAL, DeviceObj)
    External (_SB_.PCI0.GPPA.MP2C, DeviceObj)
    External (_SB_.PCI0.GPPA.XHC1, DeviceObj)
    External (_SB_.PCI0.GPPC.XHC0, DeviceObj)
    External (_SB_.PWRB, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\)
    {
        Name (HPDW, 0x55)
        Name (WLD3, 0x01)
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
            })
            Name (PBTN, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (BUF1, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0012
                    }
            })
            If ((\WLD3 == One))
            {
                M460 (""  OEM-ASL-D3C ConcatenateRes BUF0 and BUF1\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                ConcatenateResTemplate (BUF0, BUF1, Local0)
            }
            Else
            {
                M460 (""  OEM-ASL-D3H Copy BUF0 to Local0\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = BUF0 /* \_SB_.GPIO._AEI.BUF0 */
            }

            If ((\_SB.CMBS == Zero))
            {
                M460 (""  OEM-ASL-Concatenate Local0 and PBTN\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                ConcatenateResTemplate (Local0, PBTN, Local1)
            }
            Else
            {
                M460 (""  OEM-ASL-Copy Local0 to Local1\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                Local1 = Local0
            }

            M460 (""  OEM-ASL-\\_SB.GPIO._AEI\n"", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Local1)
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            M460 (""  OEM-ASL-\\_SB.GPIO._EVT-Start Case %d\n"", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    M000 (0x3900)
                    M460 (""    Notify (\\_SB.PWRB, 0x80)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PWRB, 0x80) // Status Change
                }
                Case (0x12)
                {
                    M000 (0x3912)
                    If ((\WLD3 == One))
                    {
                        M460 (""    Notify (\\_SB.PCI0.GPP5, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                    }
                }
                Case (0x3A)
                {
                    M000 (0x393A)
                    M460 (""    Notify (\\_SB.PCI0.GPPC.XHC0, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPC.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    M000 (0x393B)
                    M460 (""    Notify (\\_SB.PCI0.GPPA.XHC1, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPA.XHC1, 0x02) // Device Wake
                }
                Case (0x3D)
                {
                    M000 (0x393D)
                    M460 (""    Notify (\\_SB.PCI0.GPPA.AZAL, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPA.AZAL, 0x02) // Device Wake
                }
                Case (0x3E)
                {
                    M000 (0x393E)
                    M460 (""    Notify (\\_SB.PCI0.GPPA.ACP, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPA.ACP, 0x02) // Device Wake
                }

            }

            M460 (""  OEM-ASL-\\_SB.GPIO._EVT-End Case %d\n"", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        }
    }
}</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20240322 (64-bit version)
 * Copyright (c) 2000 - 2023 Intel Corporation
 * 
 * Disassembly of /sys/firmware/acpi/tables/IVRS
 *
 * ACPI Data Table [IVRS]
 *
 * Format: [HexOffset DecimalOffset ByteLength]  FieldName : FieldValue (in hex)
 */

[000h 0000 004h]                   Signature : ""IVRS""    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001F6
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : AB
[00Ah 0010 006h]                      Oem ID : ""INSYDE""
[010h 0016 008h]                Oem Table ID : ""EDK2    ""
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : ""ACPI""
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]         Virtualization Info : 00203043
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0044
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FD200000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0003
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 48 [Device Entry: Special Device]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[060h 0096 001h]                      Handle : 00
[061h 0097 002h]       Source Used Device ID : 00A0
[063h 0099 001h]                     Variety : 02

[064h 0100 001h]               Subtable Type : 48 [Device Entry: Special Device]
[065h 0101 002h]                   Device ID : 0000
[067h 0103 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[068h 0104 001h]                      Handle : 21
[069h 0105 002h]       Source Used Device ID : 00A0
[06Bh 0107 001h]                     Variety : 01

[06Ch 0108 001h]               Subtable Type : 48 [Device Entry: Special Device]
[06Dh 0109 002h]                   Device ID : 0000
[06Fh 0111 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[070h 0112 001h]                      Handle : 22
[071h 0113 002h]       Source Used Device ID : 0001
[073h 0115 001h]                     Variety : 01

[074h 0116 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[075h 0117 001h]       Flags (decoded below) : 30
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 0
[076h 0118 002h]                      Length : 0054
[078h 0120 002h]                    DeviceId : 0002
[07Ah 0122 002h]           Capability Offset : 0040
[07Ch 0124 008h]                Base Address : 00000000FD200000
[084h 0132 002h]           PCI Segment Group : 0000
[086h 0134 002h]         Virtualization Info : 0000
[088h 0136 004h]                  Attributes : 00048000
[08Ch 0140 008h]                   EFR Image : 246577EFA2254AFA
[094h 0148 008h]                    Reserved : 0000000000000010

[09Ch 0156 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[09Dh 0157 002h]                   Device ID : 0003
[09Fh 0159 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A0h 0160 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A1h 0161 002h]                   Device ID : FFFE
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A5h 0165 002h]                   Device ID : FF00
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0A8h 0168 001h]                    Reserved : 00
[0A9h 0169 002h]       Source Used Device ID : 00A5
[0ABh 0171 001h]                    Reserved : 00

[0ACh 0172 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0ADh 0173 002h]                   Device ID : FFFF
[0AFh 0175 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B0h 0176 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B1h 0177 002h]                   Device ID : 0000
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0B4h 0180 001h]                      Handle : 00
[0B5h 0181 002h]       Source Used Device ID : 00A0
[0B7h 0183 001h]                     Variety : 02

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0BCh 0188 001h]                      Handle : 21
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 01

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0C4h 0196 001h]                      Handle : 22
[0C5h 0197 002h]       Source Used Device ID : 0001
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 21 [Memory Definition Block (IVMD)]
[0C9h 0201 001h]       Flags (decoded below) : 07
                                       Unity : 1
                                    Readable : 1
                                   Writeable : 1
                             Exclusion Range : 0
[0CAh 0202 002h]                      Length : 0020
[0CCh 0204 002h]                    DeviceId : 0060
[0CEh 0206 002h]              Auxiliary Data : 0000
[0D0h 0208 008h]                    Reserved : 0000000000000000
[0D8h 0216 008h]               Start Address : 000000007D900000
[0E0h 0224 008h]               Memory Length : 0000000000100000

[0E8h 0232 001h]               Subtable Type : 21 [Memory Definition Block (IVMD)]
[0E9h 0233 001h]       Flags (decoded below) : 08
                                       Unity : 0
                                    Readable : 0
                                   Writeable : 0
                             Exclusion Range : 1
[0EAh 0234 002h]                      Length : 0020
[0ECh 0236 002h]                    DeviceId : C107
[0EEh 0238 002h]              Auxiliary Data : 0000
[0F0h 0240 008h]                    Reserved : 0000000000000000
[0F8h 0248 008h]               Start Address : 0000000077E00000
[100h 0256 008h]               Memory Length : 0000000000020000

[108h 0264 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[109h 0265 001h]       Flags (decoded below) : 30
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 0
[10Ah 0266 002h]                      Length : 00EE
[10Ch 0268 002h]                    DeviceId : 0002
[10Eh 0270 002h]           Capability Offset : 0040
[110h 0272 008h]                Base Address : 00000000FD200000
[118h 0280 002h]           PCI Segment Group : 0000
[11Ah 0282 002h]         Virtualization Info : 0000
[11Ch 0284 004h]                  Attributes : 00048000
[120h 0288 008h]                   EFR Image : 246577EFA2254AFA
[128h 0296 008h]                    Reserved : 0000000000000010

[130h 0304 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[131h 0305 002h]                   Device ID : 0003
[133h 0307 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[134h 0308 001h]               Subtable Type : 04 [Device Entry: End of Range]
[135h 0309 002h]                   Device ID : FFFE
[137h 0311 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[138h 0312 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[139h 0313 002h]                   Device ID : FF00
[13Bh 0315 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[13Ch 0316 001h]                    Reserved : 00
[13Dh 0317 002h]       Source Used Device ID : 00A5
[13Fh 0319 001h]                    Reserved : 00

[140h 0320 001h]               Subtable Type : 04 [Device Entry: End of Range]
[141h 0321 002h]                   Device ID : FFFF
[143h 0323 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[144h 0324 001h]               Subtable Type : 48 [Device Entry: Special Device]
[145h 0325 002h]                   Device ID : 0000
[147h 0327 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[148h 0328 001h]                      Handle : 00
[149h 0329 002h]       Source Used Device ID : 00A0
[14Bh 0331 001h]                     Variety : 02

[14Ch 0332 001h]               Subtable Type : 48 [Device Entry: Special Device]
[14Dh 0333 002h]                   Device ID : 0000
[14Fh 0335 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[150h 0336 001h]                      Handle : 21
[151h 0337 002h]       Source Used Device ID : 00A0
[153h 0339 001h]                     Variety : 01

[154h 0340 001h]               Subtable Type : 48 [Device Entry: Special Device]
[155h 0341 002h]                   Device ID : 0000
[157h 0343 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[158h 0344 001h]                      Handle : 22
[159h 0345 002h]       Source Used Device ID : 0001
[15Bh 0347 001h]                     Variety : 01

[15Ch 0348 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[15Dh 0349 002h]                   Device ID : 00A5
[15Fh 0351 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[160h 0352 008h]                    ACPI HID : ""AMDI0020""
[168h 0360 008h]                    ACPI CID : 0000000000000000
[170h 0368 001h]                  UID Format : 02
[171h 0369 001h]                  UID Length : 04
[172h 0370 004h]                         UID : ""ID00""

[176h 0374 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[177h 0375 002h]                   Device ID : 00A5
[179h 0377 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[17Ah 0378 008h]                    ACPI HID : ""AMDI0020""
[182h 0386 008h]                    ACPI CID : 0000000000000000
[18Ah 0394 001h]                  UID Format : 02
[18Bh 0395 001h]                  UID Length : 04
[18Ch 0396 004h]                         UID : ""ID01""

[190h 0400 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[191h 0401 002h]                   Device ID : 00A5
[193h 0403 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[194h 0404 008h]                    ACPI HID : ""AMDI0020""
[19Ch 0412 008h]                    ACPI CID : 0000000000000000
[1A4h 0420 001h]                  UID Format : 02
[1A5h 0421 001h]                  UID Length : 04
[1A6h 0422 004h]                         UID : ""ID02""

[1AAh 0426 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1ABh 0427 002h]                   Device ID : 0099
[1ADh 0429 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1AEh 0430 008h]                    ACPI HID : ""AMDI0020""
[1B6h 0438 008h]                    ACPI CID : 0000000000000000
[1BEh 0446 001h]                  UID Format : 02
[1BFh 0447 001h]                  UID Length : 04
[1C0h 0448 004h]                         UID : ""ID03""

[1C4h 0452 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1C5h 0453 002h]                   Device ID : 0060
[1C7h 0455 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1C8h 0456 008h]                    ACPI HID : ""MSFT0201""
[1D0h 0464 008h]                    ACPI CID : 0000000000000000
[1D8h 0472 001h]                  UID Format : 01
[1D9h 0473 001h]                  UID Length : 02
[1DAh 0474 008h]                         UID : 4D41400099F00001

[1DCh 0476 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1DDh 0477 002h]                   Device ID : 0099
[1DFh 0479 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1E0h 0480 008h]                    ACPI HID : ""AMDI0020""
[1E8h 0488 008h]                    ACPI CID : 0000000000000000
[1F0h 0496 001h]                  UID Format : 02
[1F1h 0497 001h]                  UID Length : 04
[1F2h 0498 004h]                         UID : ""ID04""

Raw Table Data: Length 502 (0x1F6)

    0000: 49 56 52 53 F6 01 00 00 02 AB 49 4E 53 59 44 45  // IVRS......INSYDE
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 44 00 02 00 40 00 00 00 20 FD 00 00 00 00  // ..D...@... .....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 48 00 00 00  // C...........H...
    0060: 00 A0 00 02 48 00 00 D7 21 A0 00 01 48 00 00 00  // ....H...!...H...
    0070: 22 01 00 01 11 30 54 00 02 00 40 00 00 00 20 FD  // ""....0T...@... .
    0080: 00 00 00 00 00 00 00 00 00 80 04 00 FA 4A 25 A2  // .............J%.
    0090: EF 77 65 24 10 00 00 00 00 00 00 00 03 03 00 00  // .we$............
    00A0: 04 FE FF 00 43 00 FF 00 00 A5 00 00 04 FF FF 00  // ....C...........
    00B0: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    00C0: 48 00 00 00 22 01 00 01 21 07 20 00 60 00 00 00  // H...""...!. .`...
    00D0: 00 00 00 00 00 00 00 00 00 00 90 7D 00 00 00 00  // ...........}....
    00E0: 00 00 10 00 00 00 00 00 21 08 20 00 07 C1 00 00  // ........!. .....
    00F0: 00 00 00 00 00 00 00 00 00 00 E0 77 00 00 00 00  // ...........w....
    0100: 00 00 02 00 00 00 00 00 40 30 EE 00 02 00 40 00  // ........@0....@.
    0110: 00 00 20 FD 00 00 00 00 00 00 00 00 00 80 04 00  // .. .............
    0120: FA 4A 25 A2 EF 77 65 24 10 00 00 00 00 00 00 00  // .J%..we$........
    0130: 03 03 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    0140: 04 FF FF 00 48 00 00 00 00 A0 00 02 48 00 00 D7  // ....H.......H...
    0150: 21 A0 00 01 48 00 00 00 22 01 00 01 F0 A5 00 40  // !...H...""......@
    0160: 41 4D 44 49 30 30 32 30 00 00 00 00 00 00 00 00  // AMDI0020........
    0170: 02 04 49 44 30 30 F0 A5 00 40 41 4D 44 49 30 30  // ..ID00...@AMDI00
    0180: 32 30 00 00 00 00 00 00 00 00 02 04 49 44 30 31  // 20..........ID01
    0190: F0 A5 00 40 41 4D 44 49 30 30 32 30 00 00 00 00  // ...@AMDI0020....
    01A0: 00 00 00 00 02 04 49 44 30 32 F0 99 00 40 41 4D  // ......ID02...@AM
    01B0: 44 49 30 30 32 30 00 00 00 00 00 00 00 00 02 04  // DI0020..........
    01C0: 49 44 30 33 F0 60 00 40 4D 53 46 54 30 32 30 31  // ID03.`.@MSFT0201
    01D0: 00 00 00 00 00 00 00 00 01 02 01 00 F0 99 00 40  // ...............@
    01E0: 41 4D 44 49 30 30 32 30 00 00 00 00 00 00 00 00  // AMDI0020........
    01F0: 02 04 49 44 30 34                                // ..ID04</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>ACPI name: ACPI path [driver]
│ LNXSYSTM:00: \ [None]
│ LNXSYBUS:00: \_SB_ [None]
│ ACPI0010:00: \_SB_.PLTF [None]
│ ACPI0007:00: \_SB_.PLTF.C000 [processor]
│ ACPI0007:01: \_SB_.PLTF.C001 [processor]
│ ACPI0007:02: \_SB_.PLTF.C002 [processor]
│ ACPI0007:03: \_SB_.PLTF.C003 [processor]
│ ACPI0007:04: \_SB_.PLTF.C004 [processor]
│ ACPI0007:05: \_SB_.PLTF.C005 [processor]
│ ACPI0007:06: \_SB_.PLTF.C006 [processor]
│ ACPI0007:07: \_SB_.PLTF.C007 [processor]
│ ACPI0007:08: \_SB_.PLTF.C008 [processor]
│ ACPI0007:09: \_SB_.PLTF.C009 [processor]
│ ACPI0007:0a: \_SB_.PLTF.C00A [processor]
│ ACPI0007:0b: \_SB_.PLTF.C00B [processor]
│ ACPI0007:0c: \_SB_.PLTF.C00C [processor]
│ ACPI0007:0d: \_SB_.PLTF.C00D [processor]
│ ACPI0007:0e: \_SB_.PLTF.C00E [processor]
│ ACPI0007:0f: \_SB_.PLTF.C00F [processor]
│ ACPI0007:10: \_SB_.PLTF.C010 [processor]
│ ACPI0007:11: \_SB_.PLTF.C011 [processor]
│ ACPI0007:12: \_SB_.PLTF.C012 [processor]
│ ACPI0007:13: \_SB_.PLTF.C013 [processor]
│ ACPI0007:14: \_SB_.PLTF.C014 [processor]
│ ACPI0007:15: \_SB_.PLTF.C015 [processor]
│ ACPI0007:16: \_SB_.PLTF.C016 [processor]
│ ACPI0007:17: \_SB_.PLTF.C017 [processor]
│ AMDI000A:00: \_SB_.PEP_ [amd_pmc]
│ AMDI0010:00: \_SB_.I2CA [i2c_designware]
│ AMDI0010:01: \_SB_.I2CB [i2c_designware]
│ FRMW0004:00: \_SB_.I2CB.ECKB [i2c_hid_acpi]
│ FRMW0005:00: \_SB_.I2CB.ECSL [i2c_hid_acpi]
│ AMDI0010:03: \_SB_.I2CD [i2c_designware]
│ PIXA3854:00: \_SB_.I2CD.TPAD [i2c_hid_acpi]
│ AMDI0030:00: \_SB_.GPIO [amd_gpio]
│ AMDI0052:00: \_SB_.PPKG [None]
│ AMDI0080:00: \_SB_.VGBI [None]
│ AMDI0081:00: \_SB_.CIND [None]
│ AMDI0103:00: \_SB_.PMF_ [amd-pmf]
│ AMDI0104:00: \_SB_.MP1_ [None]
│ DRTM0001:00: \_SB_.DRTM [None]
│ FRMWC004:00: \_SB_.CREC [None]
│ LNXPOWER:11: \_SB_.FN10 [None]
│ MSFT0101:00: \_SB_.TPM2 [None]
│ MSFT0201:00: \_SB_.MHSP [None]
│ PNP0A08:00: \_SB_.PCI0 [None]
│ LNXPOWER:04: \_SB_.PCI0.GPP3.P0NV [None]
│ LNXPOWER:05: \_SB_.PCI0.GPP5.PWSR [None]
│ LNXPOWER:06: \_SB_.PCI0.GPPA.PWRS [None]
│ PNP0103:00: \_SB_.PCI0.HPET [None]
│ PNP0C14:00: \_SB_.PCI0.DWMI [acpi-wmi]
│ device:00: \_SB_.PCI0.GPP0 [pcieport]
│ LNXPOWER:01: \_SB_.PCI0.GPP0.SWUS.PWRS [None]
│ device:01: \_SB_.PCI0.GPP0.SWUS [None]
│ device:02: \_SB_.PCI0.GPP1 [pcieport]
│ LNXPOWER:03: \_SB_.PCI0.GPP1.SWUS.PWRS [None]
│ device:03: \_SB_.PCI0.GPP1.SWUS [None]
│ device:04: \_SB_.PCI0.GPP3 [pcieport]
│ device:05: \_SB_.PCI0.GPP3.NVME [nvme]
│ device:06: \_SB_.PCI0.GPP4 [None]
│ device:07: \_SB_.PCI0.GPP4.SDCR [None]
│ device:08: \_SB_.PCI0.GPP5 [pcieport]
│ device:09: \_SB_.PCI0.GPP5.WLAN [mt7921e]
│ device:0a: \_SB_.PCI0.GPP6 [None]
│ device:0b: \_SB_.PCI0.GPP6.RTL8 [None]
│ device:0c: \_SB_.PCI0.GPP6.RUSB [None]
│ device:0d: \_SB_.PCI0.GPP7 [None]
│ device:0e: \_SB_.PCI0.GPP7.WWAN [None]
│ device:0f: \_SB_.PCI0.GPP8 [None]
│ device:10: \_SB_.PCI0.GPP9 [None]
│ device:11: \_SB_.PCI0.GP10 [None]
│ device:12: \_SB_.PCI0.GP11 [None]
│ device:13: \_SB_.PCI0.GP12 [None]
│ device:14: \_SB_.PCI0.GP13 [None]
│ device:15: \_SB_.PCI0.GP14 [None]
│ device:16: \_SB_.PCI0.GPPA [pcieport]
│ LNXPOWER:07: \_SB_.PCI0.GPPA.VGA_.PWRS [None]
│ LNXVIDEO:00: \_SB_.PCI0.GPPA.VGA_ [amdgpu]
│ device:17: \_SB_.PCI0.GPPA.VGA_.LCD_ [None]
│ device:18: \_SB_.PCI0.GPPA.PSP_ [ccp]
│ device:19: \_SB_.PCI0.GPPA.ACP_ [snd_acp_pci]
│ device:1a: \_SB_.PCI0.GPPA.ACP_.HDA0 [None]
│ device:1b: \_SB_.PCI0.GPPA.ACP_.PDMC [None]
│ device:1c: \_SB_.PCI0.GPPA.ACP_.I2SC [None]
│ device:1d: \_SB_.PCI0.GPPA.ACP_.BTSC [None]
│ device:1e: \_SB_.PCI0.GPPA.ACP_.SDWC [None]
│ device:1f: \_SB_.PCI0.GPPA.ACP_.SDWS [None]
│ device:20: \_SB_.PCI0.GPPA.ACP_.USBS [None]
│ device:21: \_SB_.PCI0.GPPA.AZAL [snd_hda_intel]
│ device:22: \_SB_.PCI0.GPPA.HDAU [snd_hda_intel]
│ device:23: \_SB_.PCI0.GPPA.XHC1 [xhci_hcd]
│ device:24: \_SB_.PCI0.GPPA.XHC1.RHUB [usb]
│ device:25: \_SB_.PCI0.GPPA.XHC1.RHUB.PRT1 [None]
│ device:26: \_SB_.PCI0.GPPA.XHC1.RHUB.PRT2 [None]
│ device:27: \_SB_.PCI0.GPPA.MP2C [None]
│ device:28: \_SB_.PCI0.GPPB [pcieport]
│ device:29: \_SB_.PCI0.GPPB.IPU_ [amdxdna]
│ device:2a: \_SB_.PCI0.GPPC [pcieport]
│ LNXPOWER:0c: \_SB_.PCI0.GPPC.XHC0.PWRS [None]
│ device:2b: \_SB_.PCI0.GPPC.XHC0 [xhci_hcd]
│ device:2c: \_SB_.PCI0.GPPC.XHC0.RHUB [usb]
│ device:2d: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT1 [None]
│ device:2e: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT2 [None]
│ device:2f: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT3 [None]
│ device:30: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT3.WCAM [None]
│ device:31: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT3.CAMI [None]
│ device:32: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT4 [None]
│ device:33: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT5 [None]
│ device:34: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT6 [None]
│ device:35: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT7 [None]
│ device:36: \_SB_.PCI0.GPPC.XHC3 [xhci_hcd]
│ device:37: \_SB_.PCI0.GPPC.XHC3.RHUB [usb]
│ device:38: \_SB_.PCI0.GPPC.XHC3.RHUB.PRT1 [None]
│ device:39: \_SB_.PCI0.GPPC.XHC3.RHUB.PRT2 [None]
│ device:3a: \_SB_.PCI0.GPPC.XHC4 [xhci_hcd]
│ device:3b: \_SB_.PCI0.GPPC.XHC4.RHUB [usb]
│ device:3c: \_SB_.PCI0.GPPC.XHC4.RHUB.PRT1 [None]
│ device:3d: \_SB_.PCI0.GPPC.XHC4.RHUB.PRT2 [None]
│ device:3e: \_SB_.PCI0.GPPC.NHI0 [thunderbolt]
│ device:3f: \_SB_.PCI0.GPPC.NHI1 [thunderbolt]
│ device:40: \_SB_.PCI0.SMBS [piix4_smbus]
│ device:41: \_SB_.PCI0.LPC0 [None]
│ ACPI0003:00: \_SB_.PCI0.LPC0.ACAD [ac]
│ MSFT0001:00: \_SB_.PCI0.LPC0.KBC0 [i8042 kbd]
│ PNP0000:00: \_SB_.PCI0.LPC0.PIC_ [None]
│ PNP0100:00: \_SB_.PCI0.LPC0.TMR_ [None]
│ PNP0200:00: \_SB_.PCI0.LPC0.DMAC [None]
│ PNP0800:00: \_SB_.PCI0.LPC0.SPKR [None]
│ PNP0B00:00: \_SB_.PCI0.LPC0.RTC_ [rtc_cmos]
│ PNP0C01:00: \_SB_.PCI0.LPC0.SPIR [system]
│ PNP0C02:01: \_SB_.PCI0.LPC0.SYSR [system]
│ PNP0C04:00: \_SB_.PCI0.LPC0.COPR [None]
│ PNP0C09:00: \_SB_.PCI0.LPC0.EC0_ [None]
│ PNP0C0D:00: \_SB_.PCI0.LPC0.EC0_.LID0 [None]
│ PNP0C0A:00: \_SB_.PCI0.LPC0.BAT1 [None]
│ PNP0C02:00: \_SB_.AMDM [system]
│ PNP0C02:02: \_SB_.AWR0 [None]
│ PNP0C02:03: \_SB_.AWR0.ABR0 [None]
│ PNP0C02:04: \_SB_.AWR0.ABR1 [None]
│ PNP0C02:05: \_SB_.AWR0.ABR2 [None]
│ PNP0C02:06: \_SB_.AWR0.ABR3 [None]
│ PNP0C02:07: \_SB_.AWR0.ABR4 [None]
│ PNP0C02:08: \_SB_.AWR0.ABR5 [None]
│ PNP0C02:09: \_SB_.AWR0.ABR6 [None]
│ PNP0C02:0a: \_SB_.AWR0.ABR7 [None]
│ PNP0C02:0b: \_SB_.AWR0.ABR8 [None]
│ PNP0C02:0c: \_SB_.AWR0.ABR9 [None]
│ PNP0C02:0d: \_SB_.AWR0.ABRA [None]
│ PNP0C0B:00: \_SB_.FAN_ [acpi-fan]
│ PNP0C0C:00: \_SB_.PWRB [None]
│ USBC000:00: \_SB_.UBTC [ucsi_acpi]
│ device:42: \_SB_.UBTC.CR01 [None]
│ device:43: \_SB_.UBTC.CR02 [None]
│ device:44: \_SB_.UBTC.CR03 [None]
│ device:45: \_SB_.UBTC.CR04 [None]
│ LNXSYBUS:01: \_TZ_ [None]
│ LNXTHERM:00: \_TZ_.TZ00 [None]
│ LNXTHERM:01: \_TZ_.TZ01 [None]
│ LNXTHERM:02: \_TZ_.TZ02 [None]
│ LNXTHERM:03: \_TZ_.TZ03 [None]
└─PNP0C14:01: \AOD_ [acpi-wmi]</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>Device firmware checks unavailable without gobject introspection</pre>
            </TD>
        </TR>
        
    </table>
    
    <h2>Summary</h2>
    
    
    
    <select id=""start_select"" class=""hidden-by-default""></select>
    <select id=""end_select"" class=""hidden-by-default""></select>
    <input type=""radio"" name=""session1"" id=""all_time"" value=""all_time"" checked="""" class=""hidden-by-default"" />
    <input type=""radio"" name=""session1"" id=""med_duration"" value=""600"" class=""hidden-by-default"" />
    <input type=""radio"" name=""session1"" id=""min_duration"" value=""60"" class=""hidden-by-default"" />
    
    <table border=""1"" class=""dataframe"" id=""summary"">  <thead>    <tr style=""text-align: right;"">      <th></th>      <th>Start Time</th>      <th>Duration</th>      <th>Hardware Sleep</th>      <th>Battery Start</th>      <th>Battery Delta</th>      <th>Battery Ave Rate</th>      <th>Wake Pin</th>      <th>Wake Interrupt</th>    </tr>  </thead>  <tbody>    <tr class=""row-low"" onclick=""pick_summary_cycle(0)"">      <th>0</th>      <td>2025-05-19 08:37:19</td>      <td>0:01:02</td>      <td>92.97%</td>      <td>58.02%</td>      <td>-0.11%</td>      <td>-0.18W</td>      <td>5</td>      <td>ACPI SCI</td>    </tr>  </tbody></table>
    
    <p><label for=""cycle"" class=""hidden-by-default"">Choose a cycle:</label>
        <select id=""cycles"" onchange=""cycle_data_changed()"" class=""hidden-by-default"">
            <option value=""0"">Disabled</option>
            
            <option value=""1"">Cycle 0</option>
            
        </select>
    </p>
    <table id=""cycledata"" class=""hide-borders"">
        
        <TR class=""row-disabled"" id=""cycledata1"">
            <TD><p>💤 Hardware sleep cycle count: 1</p><p></p></TD>
        </TR>
        
    </table>
    
    
    
    <h3 id=""debug_label"" style=""display:none;"">Debugging 🦟</h3>
    <p><label for=""debug"" class=""hidden-by-default"">Choose a cycle:</label>
        <select id=""debug"" onchange=""debug_data_changed()"" class=""hidden-by-default"">
            <option value=""0"">Disabled</option>
            
            <option value=""1"">Cycle 0</option>
            
        </select>
    </p>
    <table id=""debugdata"" class=""hide-borders"">
        
        <TR class=""row-disabled"" id=""debugdata1"">
            <TD>
                
                <div class=""○"">BAT1 energy level is 2101000 µAh</div>
                
                <div class=""○"">ACPI Lid (/proc/acpi/button/lid/LID0/state): open</div>
                
                <div class=""○"">/proc/cmdline: rd.live.image</div>
                
                <div class=""○"">Possible wakeup sources:</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:001/wakeup57]: enabled</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:002/wakeup58]: enabled</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:003/wakeup59]: enabled</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:004/wakeup60]: enabled</div>
                
                <div class=""○"">│ ACPI Battery [PNP0C0A:00]: enabled</div>
                
                <div class=""○"">│ ACPI Lid Switch [PNP0C0D:00]: enabled</div>
                
                <div class=""○"">│ ACPI Power Button [PNP0C0C:00]: enabled</div>
                
                <div class=""○"">│ AT Translated Set 2 keyboard [serio0]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] ISA bridge [0000:00:14.3]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:01.1]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:01.2]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:02.1]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:02.3]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c1:00.4]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.0]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.3]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.4]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.5]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.6]: enabled</div>
                
                <div class=""○"">│ PIXA3854:00 093A:0274 Mouse [i2c-PIXA3854:00]: enabled</div>
                
                <div class=""○"">│ Plug-n-play Real Time Clock [00:01]: enabled</div>
                
                <div class=""○"">│ Real Time Clock alarm timer [rtc0]: enabled</div>
                
                <div class=""○"">│ Thunderbolt domain [domain0]: enabled</div>
                
                <div class=""○"">│ Thunderbolt domain [domain1]: enabled</div>
                
                <div class=""○"">│ USB4 host controller [0-0]: enabled</div>
                
                <div class=""○"">└─USB4 host controller [1-0]: enabled</div>
                
                <div class=""○"">gnome-shell compositor is running</div>
                
                <div class=""○"">IPS status</div>
                
                <div class=""○"">│ IPS config: 6</div>
                
                <div class=""○"">│ Idle optimization: 1</div>
                
                <div class=""○"">│ Idle workqueue - enabled: 1</div>
                
                <div class=""○"">│ Idle workqueue - running: 0</div>
                
                <div class=""○"">│ entry counts: rcg=130 ips1=1 ips2=1</div>
                
                <div class=""○"">└─exit counts: rcg=130 ips1=1 ips2=1</div>
                
                <div class=""○"">Thermal zones</div>
                
                <div class=""○"">├─ LNXTHERM:00</div>
                
                <div class=""○"">│ 	 temp: 37.8°C</div>
                
                <div class=""○"">│ 	 critical trip: 170.0°C</div>
                
                <div class=""○"">│ 	 hot trip: 160.0°C</div>
                
                <div class=""○"">├─ LNXTHERM:01</div>
                
                <div class=""○"">│ 	 temp: 41.8°C</div>
                
                <div class=""○"">│ 	 critical trip: 170.0°C</div>
                
                <div class=""○"">│ 	 hot trip: 160.0°C</div>
                
                <div class=""○"">├─ LNXTHERM:02</div>
                
                <div class=""○"">│ 	 temp: 35.8°C</div>
                
                <div class=""○"">│ 	 critical trip: 170.0°C</div>
                
                <div class=""○"">│ 	 hot trip: 160.0°C</div>
                
                <div class=""○"">└─LNXTHERM:03</div>
                
                <div class=""○"">  	 temp: 44.8°C</div>
                
                <div class=""○"">  	 critical trip: 170.0°C</div>
                
                <div class=""○"">  	 hot trip: 160.0°C</div>
                
                <div class=""○"">Suspend timer programmed for 0:01:00</div>
                
                <div class=""○"">PM: suspend entry (s2idle)</div>
                
                <div class=""○"">Filesystems sync: 0.000 seconds</div>
                
                <div class=""○"">Freezing user space processes</div>
                
                <div class=""○"">Freezing user space processes completed (elapsed 0.003 seconds)</div>
                
                <div class=""○"">OOM killer disabled.</div>
                
                <div class=""○"">Freezing remaining freezable tasks</div>
                
                <div class=""○"">Freezing remaining freezable tasks completed (elapsed 0.000 seconds)</div>
                
                <div class=""○"">printk: Suspending console(s) (use no_console_suspend to debug)</div>
                
                <div class=""○"">wlp192s0: deauthenticating from 7e:41:b1:85:0d:9b by local choice (Reason: 3=DEAUTH_LEAVING)</div>
                
                <div class=""🦟"">PM: suspend of devices complete after 1002.998 msecs</div>
                
                <div class=""🦟"">PM: start suspend of devices complete after 1005.612 msecs</div>
                
                <div class=""○"">PM: suspend devices took 1.005 seconds</div>
                
                <div class=""🦟"">Disabling GPIO #5 interrupt for suspend.</div>
                
                <div class=""🦟"">Disabling GPIO #8 interrupt for suspend.</div>
                
                <div class=""🦟"">Disabling GPIO #84 interrupt for suspend.</div>
                
                <div class=""🦟"">PM: late suspend of devices complete after 1.054 msecs</div>
                
                <div class=""○"">ACPI: EC: interrupt blocked</div>
                
                <div class=""🦟"">PM: noirq suspend of devices complete after 74.280 msecs</div>
                
                <div class=""○"">ACPI: \_SB_.PCI0.GPP0.SWUS: LPI: Constraint not met; min power state:D3hot current power state:D0</div>
                
                <div class=""○"">ACPI: \_SB_.PCI0.GPP1.SWUS: LPI: Constraint not met; min power state:D3hot current power state:D0</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state screen off</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 ms entry</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 entry</div>
                
                <div class=""🦟"">PM: suspend-to-idle</div>
                
                <div class=""🦟"">amd_pmc: SMU idlemask s0i3: 0xffff9abd</div>
                
                <div class=""🦟"">Timekeeping suspended for 58.497 seconds</div>
                
                <div class=""🦟"">PM: Triggering wakeup from IRQ 9</div>
                
                <div class=""🦟"">ACPI: PM: ACPI fixed event wakeup</div>
                
                <div class=""🦟"">PM: resume from suspend-to-idle</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 exit</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 ms exit</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state screen on</div>
                
                <div class=""○"">ACPI: EC: interrupt unblocked</div>
                
                <div class=""🦟"">PM: noirq resume of devices complete after 318.299 msecs</div>
                
                <div class=""🦟"">PM: early resume of devices complete after 2.994 msecs</div>
                
                <div class=""○"">[drm] PCIE GART of 512M enabled (table at 0x0000008001700000).</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: SMU is resuming...</div>
                
                <div class=""○"">nvme nvme0: 24/0/0 default/read/poll queues</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: SMU is resumed successfully!</div>
                
                <div class=""🦟"">GPIO 5 is active: 0x10041b00</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring gfx_0.0.0 uses VM inv eng 0 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.0.0 uses VM inv eng 1 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.1.0 uses VM inv eng 4 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.2.0 uses VM inv eng 6 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.3.0 uses VM inv eng 7 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.0.1 uses VM inv eng 8 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.1.1 uses VM inv eng 9 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.2.1 uses VM inv eng 10 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.3.1 uses VM inv eng 11 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring sdma0 uses VM inv eng 12 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring vcn_unified_0 uses VM inv eng 0 on hub 8</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring jpeg_dec_0 uses VM inv eng 1 on hub 8</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring mes_kiq_3.1.0 uses VM inv eng 13 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring vpe uses VM inv eng 4 on hub 8</div>
                
                <div class=""○"">[drm] ring gfx_32777.1.1 was added</div>
                
                <div class=""○"">[drm] ring compute_32777.2.2 was added</div>
                
                <div class=""○"">[drm] ring sdma_32777.3.3 was added</div>
                
                <div class=""○"">[drm] ring gfx_32777.1.1 ib test pass</div>
                
                <div class=""○"">[drm] ring compute_32777.2.2 ib test pass</div>
                
                <div class=""○"">[drm] ring sdma_32777.3.3 ib test pass</div>
                
                <div class=""🦟"">PM: resume of devices complete after 258.202 msecs</div>
                
                <div class=""○"">PM: resume devices took 0.262 seconds</div>
                
                <div class=""○"">OOM killer enabled.</div>
                
                <div class=""○"">Restarting tasks ... done.</div>
                
                <div class=""○"">random: crng reseeded on system resumption</div>
                
                <div class=""○"">PM: suspend exit</div>
                
                <div class=""○"">Used Microsoft uPEP GUID in LPS0 _DSM</div>
                
                <div class=""○"">Woke up from IRQ 9 (IR-IO-APIC 9-fasteoi acpi)</div>
                
                <div class=""○"">gpe0A increased from 293 to 309</div>
                
                <div class=""○"">ACPI Lid (/proc/acpi/button/lid/LID0/state): open</div>
                
                <div class=""○"">BAT1 energy level is 2097000 µAh</div>
                
                <div class=""○"">IPS status</div>
                
                <div class=""○"">│ IPS config: 6</div>
                
                <div class=""○"">│ Idle optimization: 0</div>
                
                <div class=""○"">│ Idle workqueue - enabled: 1</div>
                
                <div class=""○"">│ Idle workqueue - running: 0</div>
                
                <div class=""○"">│ entry counts: rcg=130 ips1=2 ips2=2</div>
                
                <div class=""○"">└─exit counts: rcg=130 ips1=2 ips2=2</div>
                
                <div class=""○"">Thermal zones</div>
                
                <div class=""○"">├─ LNXTHERM:00</div>
                
                <div class=""○"">│ 	 37.8°C -> 36.8°C</div>
                
                <div class=""○"">├─ LNXTHERM:01</div>
                
                <div class=""○"">│ 	 41.8°C -> 37.8°C</div>
                
                <div class=""○"">├─ LNXTHERM:02</div>
                
                <div class=""○"">│ 	 35.8°C -> 35.8°C</div>
                
                <div class=""○"">└─LNXTHERM:03</div>
                
                <div class=""○"">  	 44.8°C -> 35.8°C</div>
                
            </TD>
        </TR>
        
    </table>
    
</body>

</html>"
0haYgRFm,amd test on fedora,rogersjcaleb,HTML 5,Monday 19th of May 2025 03:35:19 AM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""utf-8"">
    <title>Linux s2idle Power Report</title>
    <style>
        h1 {
            color: #00b0f0;
            font-family: sans-serif;
            font-size: 42pt;
        }

        h2 {
            font-size: 15pt;
            font-family: sans-serif;
            color: #00b0f0;
            margin-top: 2em;
            margin-bottom: 0em;
            letter-spacing: 0.08em;
        }

        h3,
        h4,
        h5 {
            font-family: sans-serif;
            margin-top: 1em;
            margin-bottom: 0em;
            letter-spacing: 0.08em;
        }

        body {

            font-family: sans-serif;
            letter-spacing: 0.02em;
            background-color: #ffffff;
            color: #000000;
            margin: 0em 5.5em 0em 5.5em;

        }

        table,
        th,
        td {
            border-width: 0;
            table-layout: fixed;
            font-family: sans-serif;
            letter-spacing: 0.02em;
            color: #000000;
            margin-bottom: 10px;
        }

        .○ {
            font-family: ""Fira Code"", monospace;
            color: #000000;
        }

        .❌ {
            color: #ff0000;
            font-family: ""Fira Code"", monospace;
        }

        .🚦 {
            color: #a4a100;
            font-family: ""Fira Code"", monospace;
        }

        .🦟 {
            color: #848484;
            font-family: ""Fira Code"", monospace;
        }

        .hidden-by-default {
            display: none;
            border: 0px;
            border-spacing: 0px;
            border-collapse: collapse;
        }

        .hide-borders {
            border: 0px;
            border-collapse: collapse;
        }

        .row-disabled {
            display: none;
            border: 0px;
            border-collapse: collapse;
        }

        .arrow::before {
            content: ""\23f5"";
        }

        .arrow-expanded::before {
            content: ""\23F7"";

        }

        .row-low {
            background-color: #ace3ac;
            text-align: center;
        }

        .row-low:hover {
            background-color: #caedca;
            text-align: center;
        }

        .row-neutral {
            background-color: #e0e0e0;
            text-align: center;
        }

        .row-neutral:hover {
            background-color: #f0f0f0;
            text-align: center;
        }

        .row-high {
            background-color: #ffb2aa;
            text-align: center;
        }

        .row-high:hover {
            background-color: #ffd5d1;
            text-align: center;
        }
    </style>
</head>

<body>
    <script>
        function select_changed(selector, row) {
            var x = document.getElementById(selector).value;
            var y;
            var rows = document.querySelectorAll(row + "" tr.row-disabled"");
            for (var i = 0; i < rows.length; i++) {
                rows[i].style.display = ""none"";
            }
            if (x != ""0"") {
                document.querySelector(row + x).style.display = ""table-row"";
                if (row == row + x)
                    document.getElementById(selector).value = 0;
            }
        }
        function cycle_data_changed() {
            select_changed(""cycles"", ""#cycledata"")
        }

        function failure_data_changed() {
            select_changed(""failures"", ""#failuredata"")
        }

        function debug_data_changed() {
            select_changed(""debug"", ""#debugdata"")
            if (document.getElementById(""debug"").value != ""0"") {
                document.getElementById(""debug_label"").style.display = """";
            } else {
                document.getElementById(""debug_label"").style.display = ""none"";
            }
        }

        function prereq_debug_data_changed() {
            var table = document.getElementById(""prereqdebugdata"");
            var arrow = document.getElementById(""prereqdata-arrow"")
            if (table.classList.contains(""hidden-by-default"")) {
                table.className = ""hide-borders"";
                arrow.className = ""arrow-expanded"";
            } else {
                table.className = ""hidden-by-default"";
                arrow.className = ""arrow""
            }
        }

        function parseTimeToSeconds(timeString) {
            var timeParts = timeString.split("":"");
            var hours = parseInt(timeParts[0]);
            var minutes = parseInt(timeParts[1]);
            var seconds = parseInt(timeParts[2]);
            return (hours * 3600) + (minutes * 60) + seconds;
        }

        function pick_data_for_cycle(num) {
            //show cycles messages for this cycle
            document.getElementById(""cycles"").selectedIndex = num + 1;
            cycle_data_changed();
            
            
            //show debug data for this cycle
            document.getElementById(""debug"").selectedIndex = num + 1;
            debug_data_changed();
            
        }

        function summary_data_changed() {
            var table = document.getElementById(""summary"");
            const start_select = document.getElementById('start_select');
            const end_select = document.getElementById('end_select');
            var start = parseInt(start_select.value);
            var end = parseInt(end_select.value);
            var min_duration = 0;

            // if duration filter activated, hide rows that don't match
            if (document.getElementById('med_duration').checked)
                min_duration = document.getElementById(""med_duration"").value;
            else if (document.getElementById('min_duration').checked)
                min_duration = document.getElementById(""min_duration"").value;

            // reset end if start was picked bigger than end
            if (start > end) {
                end_select.selectedIndex = start;
                end = start;
            }

            // show all rows between start and end
            for (var i = 1; i < table.rows.length; i++) {
                var row = table.rows[i];
                var index = parseInt(row.cells[0].textContent);
                var row_duration = parseTimeToSeconds(row.cells[2].textContent);

                if (row_duration >= min_duration &&
                    index >= start && index <= end) {
                    row.style.display = """";
                } else {
                    row.style.display = ""none"";
                }
            }

            // reset other tables if we now show more than one cycle
            if (end - start > 0) {
                // reset cycle data selector
                document.getElementById(""cycles"").selectedIndex = 0;
                cycle_data_changed();
                
                
                //reset debug data selector
                document.getElementById(""debug"").selectedIndex = 0;
                debug_data_changed();
                
            } else if (start = end)
                pick_data_for_cycle(start)
        }

        function populate_summary_selectors() {
            const table = document.getElementById('summary');
            const start_select = document.getElementById('start_select');
            const end_select = document.getElementById('end_select');

            for (let i = 0; i < table.rows.length; i++) {
                const start_option = document.createElement('option');
                const end_option = document.createElement('option');
                var columns = table.rows[i].getElementsByTagName(""td"");

                //Populate all start/end selector values
                if (i != table.rows.length - 1) {
                    start_option.text = `Cycle ${i}`;
                    start_option.value = i
                    end_option.text = `Cycle ${i}`;
                    end_option.value = i
                    start_select.add(start_option);
                    end_select.add(end_option);
                }

                //apply coloring to hardware sleep
                if (i != 0) {
                    if (parseFloat(columns[2].innerHTML) < 85)
                        table.rows[i].className = ""row-high"";
                }
            }

            // Pick the end selector for last column
            end_select.selectedIndex = table.rows.length - 2;

            // if we only have one selector then pick it
            if (start_select.selectedIndex == end_select.selectedIndex) {
                pick_summary_cycle(start_select.selectedIndex)
            }
        }

        function pick_summary_cycle(num) {
            //narrow down filter to just the selected cycle
            document.getElementById('start_select').selectedIndex = num;
            document.getElementById('end_select').selectedIndex = num;
            summary_data_changed();
            pick_data_for_cycle(num);
        }

        function reset_clicked() {
            const table = document.getElementById('summary');
            document.getElementById('start_select').selectedIndex = 0;
            console.log(table.rows.length);
            document.getElementById('end_select').selectedIndex = table.rows.length - 2;
            document.getElementById('all_time').checked = true;
            summary_data_changed();
        }

        window.addEventListener('load', populate_summary_selectors);
    </script>
    <h1>Linux s2idle Power Report</h1>
    <p>s2idle report created 2025-05-19 08:34:12.599784 using amd-s2idle 0.2.0</p>
    
    <table class=""hide-borders"">
        
        <TR>
            <TD>💻</TD>
            <TD>AMD Ryzen AI 9 HX 370 w/ Radeon 890M (family 1a model 24)</TD>
        </TR>
        
        <TR>
            <TD>💻</TD>
            <TD>Framework Laptop 13 (AMD Ryzen AI 300 Series) (Laptop)</TD>
        </TR>
        
        <TR>
            <TD>🐧</TD>
            <TD>Fedora Linux 42 (Workstation Edition)</TD>
        </TR>
        
        <TR>
            <TD>🐧</TD>
            <TD>Kernel 6.14.0-63.fc42.x86_64</TD>
        </TR>
        
        <TR>
            <TD>🔋</TD>
            <TD>Battery BAT1 (NVT FRANGWA) is operating at 92.49% of design</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>ASPM policy set to 'default'</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>GPIO driver `pinctrl_amd` available</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>PMC driver `amd_pmc` loaded (Program 11 Firmware 93.4.0)</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c1:00.4</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c3:00.0</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c3:00.3</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB3 driver `xhci_hcd` bound to 0000:c3:00.4</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB4 driver `thunderbolt` bound to 0000:c3:00.5</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>USB4 driver `thunderbolt` bound to 0000:c3:00.6</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>System is configured for s2idle</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>GPU driver `amdgpu` bound to 0000:c1:00.0</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>AMD Ryzen AI 9 HX 370 w/ Radeon 890M (family 1a model 24)</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>PC6 and CC6 enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>PC6 and CC6 enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>SMT enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>IOMMU properly configured</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>ACPI FADT supports Low-power S0 idle</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>LPS0 _DSM enabled</TD>
        </TR>
        
        <TR>
            <TD>✅</TD>
            <TD>WLAN driver `mt7921e` bound to 0000:c0:00.0</TD>
        </TR>
        
    </table>
    
    
    <h3>
        <label id=""prereqdata-arrow"" for=""prereqdebugdata"" onclick=""prereq_debug_data_changed()""
            class=""arrow"">Prerequisites</label>
    </h3>
    <table id=""prereqdebugdata"" class=""hidden-by-default"">
        
        <TR>
            <TD>
                <pre>DMI data:
bios_date: 03/10/2025
bios_release: 3.3
bios_vendor: INSYDE Corp.
bios_version: 03.03
board_name: FRANMGCP09
board_vendor: Framework
board_version: A9
chassis_type: 10
chassis_vendor: Framework
chassis_version: A9
product_sku: FRANMGCP09
product_version: A9</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>VCE feature version: 0, firmware version: 0x00000000
UVD feature version: 0, firmware version: 0x00000000
MC feature version: 0, firmware version: 0x00000000
ME feature version: 35, firmware version: 0x0000001d
PFP feature version: 35, firmware version: 0x00000029
CE feature version: 0, firmware version: 0x00000000
RLC feature version: 1, firmware version: 0x11510542
RLC SRLC feature version: 0, firmware version: 0x00000000
RLC SRLG feature version: 0, firmware version: 0x00000000
RLC SRLS feature version: 0, firmware version: 0x00000000
RLCP feature version: 1, firmware version: 0x11510341
RLCV feature version: 0, firmware version: 0x00000000
MEC feature version: 35, firmware version: 0x0000001d
IMU feature version: 0, firmware version: 0x0b332000
SOS feature version: 0, firmware version: 0x00000000
ASD feature version: 553648364, firmware version: 0x210000ec
TA XGMI feature version: 0x00000000, firmware version: 0x00000000
TA RAS feature version: 0x00000000, firmware version: 0x00000000
TA HDCP feature version: 0x00000000, firmware version: 0x17000043
TA DTM feature version: 0x00000000, firmware version: 0x12000018
TA RAP feature version: 0x00000000, firmware version: 0x00000000
TA SECUREDISPLAY feature version: 0x00000000, firmware version: 0x00000000
SMC feature version: 0, program: 11, firmware version: 0x0b5d0400 (93.4.0)
SDMA0 feature version: 60, firmware version: 0x0000000b
VCN feature version: 0, firmware version: 0x09117009
DMCU feature version: 0, firmware version: 0x00000000
DMCUB feature version: 0, firmware version: 0x09001700
TOC feature version: 0, firmware version: 0x0000000b
MES_KIQ feature version: 6, firmware version: 0x0000006d
MES feature version: 1, firmware version: 0x00000074
VPE feature version: 60, firmware version: 0x00000036
VBIOS version: 113-STRIXEMU-001</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>PCI devices
│ 0000:00:00.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1507]
│ 0000:00:00.2 : Advanced Micro Devices, Inc. [AMD] IOMMU [1022:1508]
│ 0000:00:01.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:01.1 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150a] : \_SB_.PCI0.GPP0
│ 0000:00:01.2 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150a] : \_SB_.PCI0.GPP1
│ 0000:00:02.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:02.1 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150b] : \_SB_.PCI0.GPP3
├─ 0000:bf:00.0 : Sandisk Corp Non-Volatile memory controller [15b7:5030] : \_SB_.PCI0.GPP3.NVME
│ 0000:00:02.3 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150b] : \_SB_.PCI0.GPP5
├─ 0000:c0:00.0 : MEDIATEK Corp. Network controller [14c3:0616] : \_SB_.PCI0.GPP5.WLAN
│ 0000:00:03.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:08.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:1509]
│ 0000:00:08.1 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150c] : \_SB_.PCI0.GPPA
├─ 0000:c1:00.0 : Advanced Micro Devices, Inc. [AMD/ATI] Display controller [1002:150e] : \_SB_.PCI0.GPPA.VGA_
├─ 0000:c1:00.1 : Advanced Micro Devices, Inc. [AMD/ATI] Audio device [1002:1640] : \_SB_.PCI0.GPPA.HDAU
├─ 0000:c1:00.2 : Advanced Micro Devices, Inc. [AMD] Encryption controller [1022:17e0] : \_SB_.PCI0.GPPA.PSP_
├─ 0000:c1:00.4 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151e] : \_SB_.PCI0.GPPA.XHC1
├─ 0000:c1:00.5 : Advanced Micro Devices, Inc. [AMD] Multimedia controller [1022:15e2] : \_SB_.PCI0.GPPA.ACP_
├─ 0000:c1:00.6 : Advanced Micro Devices, Inc. [AMD] Audio device [1022:15e3] : \_SB_.PCI0.GPPA.AZAL
│ 0000:00:08.2 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150c] : \_SB_.PCI0.GPPB
├─ 0000:c2:00.0 : Advanced Micro Devices, Inc. [AMD]  [1022:150d]
├─ 0000:c2:00.1 : Advanced Micro Devices, Inc. [AMD] Signal processing controller [1022:17f0] : \_SB_.PCI0.GPPB.IPU_
│ 0000:00:08.3 : Advanced Micro Devices, Inc. [AMD] PCI bridge [1022:150c] : \_SB_.PCI0.GPPC
├─ 0000:c3:00.0 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151f] : \_SB_.PCI0.GPPC.XHC0
├─ 0000:c3:00.3 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151a] : \_SB_.PCI0.GPPC.XHC3
├─ 0000:c3:00.4 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151b] : \_SB_.PCI0.GPPC.XHC4
├─ 0000:c3:00.5 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151c] : \_SB_.PCI0.GPPC.NHI0
├─ 0000:c3:00.6 : Advanced Micro Devices, Inc. [AMD] USB controller [1022:151d] : \_SB_.PCI0.GPPC.NHI1
│ 0000:00:14.0 : Advanced Micro Devices, Inc. [AMD] SMBus [1022:790b] : \_SB_.PCI0.SMBS
│ 0000:00:14.3 : Advanced Micro Devices, Inc. [AMD] ISA bridge [1022:790e] : \_SB_.PCI0.LPC0
│ 0000:00:18.0 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16f8]
│ 0000:00:18.1 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16f9]
│ 0000:00:18.2 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fa]
│ 0000:00:18.3 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fb]
│ 0000:00:18.4 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fc]
│ 0000:00:18.5 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fd]
│ 0000:00:18.6 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16fe]
└─0000:00:18.7 : Advanced Micro Devices, Inc. [AMD] Host bridge [1022:16ff]</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>I2C HID devices:
| ""FRMW0004:00 32AC:0006 Wireless Radio Control"" [FRMW0004] : \_SB_.I2CB.ECKB
| ""FRMW0004:00 32AC:0006 Consumer Control"" [FRMW0004] : \_SB_.I2CB.ECKB
| ""PIXA3854:00 093A:0274 Mouse"" [PIXA3854] : \_SB_.I2CD.TPAD
└─""PIXA3854:00 093A:0274 Touchpad"" [PIXA3854] : \_SB_.I2CD.TPAD</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>Windows GPIO 0 debounce: disabled</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre><table border=""1"" class=""dataframe"" id=""gpio"">
  <thead>
    <tr style=""text-align: right;"">
      <th>gpio</th>
      <th>int</th>
      <th>active</th>
      <th>trigger</th>
      <th>S0i3</th>
      <th>S3</th>
      <th>S4/S5</th>
      <th>Z</th>
      <th>wake</th>
      <th>pull</th>
      <th>orient</th>
      <th>debounce</th>
      <th>reg</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>#0</td>
      <td>😛</td>
      <td>↑</td>
      <td>edge</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td>↑</td>
      <td>input  ↑</td>
      <td>b (🕑 046875us)</td>
      <td>0x81578e3</td>
    </tr>
    <tr>
      <td>#2</td>
      <td>😷</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>↑</td>
      <td>input  ↑</td>
      <td></td>
      <td>0x150b00</td>
    </tr>
    <tr>
      <td>#5</td>
      <td>😛</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↑</td>
      <td></td>
      <td>0x51b00</td>
    </tr>
    <tr>
      <td>#8</td>
      <td>😛</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td>↑</td>
      <td>input  ↑</td>
      <td></td>
      <td>0x8151b00</td>
    </tr>
    <tr>
      <td>#18</td>
      <td>😛</td>
      <td>↓</td>
      <td>edge</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↑</td>
      <td></td>
      <td>0x57a00</td>
    </tr>
    <tr>
      <td>#44</td>
      <td>😷</td>
      <td>↑</td>
      <td>edge</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x800</td>
    </tr>
    <tr>
      <td>#52</td>
      <td>😷</td>
      <td>↑</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x900</td>
    </tr>
    <tr>
      <td>#54</td>
      <td>😛</td>
      <td>↑</td>
      <td>edge</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x1800</td>
    </tr>
    <tr>
      <td>#58</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x8007900</td>
    </tr>
    <tr>
      <td>#59</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x8007900</td>
    </tr>
    <tr>
      <td>#61</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x7900</td>
    </tr>
    <tr>
      <td>#62</td>
      <td>😛</td>
      <td>↑</td>
      <td>level</td>
      <td>⏰</td>
      <td>⏰</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x7900</td>
    </tr>
    <tr>
      <td>#84</td>
      <td>😛</td>
      <td>↓</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↑</td>
      <td></td>
      <td>0x51b00</td>
    </tr>
    <tr>
      <td>#172</td>
      <td>😷</td>
      <td>↑</td>
      <td>level</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>input  ↓</td>
      <td></td>
      <td>0x900</td>
    </tr>
  </tbody>
</table></pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>New enough kernel to avoid HSMP check</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>New enough kernel to avoid NVME check</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>CPU core count: 8 max: 8192</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>SMT control: on</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>Found IOMMU /sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0
DMA protection:
	/sys/devices/pci0000:00/0000:00:08.3/0000:c3:00.5/domain0/iommu_dma_protection: 1
	/sys/devices/pci0000:00/0000:00:08.3/0000:c3:00.6/domain1/iommu_dma_protection: 1</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20240322 (64-bit version)
 * Copyright (c) 2000 - 2023 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of /sys/firmware/acpi/tables/SSDT26
 *
 * Original Table Header:
 *     Signature        ""SSDT""
 *     Length           0x00000A40 (2624)
 *     Revision         0x02
 *     Checksum         0x93
 *     OEM ID           ""INSYDE""
 *     OEM Table ID     ""EDK2    ""
 *     OEM Revision     0x00000001 (1)
 *     Compiler ID      ""ACPI""
 *     Compiler Version 0x00040000 (262144)
 */
DefinitionBlock ("""", ""SSDT"", 2, ""INSYDE"", ""EDK2    "", 0x00000001)
{
    External (_SB_.BTNS, DeviceObj)
    External (_SB_.CMBS, IntObj)
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP4.SDCR, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP9, DeviceObj)
    External (_SB_.PCI0.GPPA.ACP_, DeviceObj)
    External (_SB_.PCI0.GPPA.AZAL, DeviceObj)
    External (_SB_.PCI0.GPPA.MP2C, DeviceObj)
    External (_SB_.PCI0.GPPA.XHC1, DeviceObj)
    External (_SB_.PCI0.GPPC.XHC0, DeviceObj)
    External (_SB_.PWRB, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\)
    {
        Name (HPDW, 0x55)
        Name (WLD3, 0x01)
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
            })
            Name (PBTN, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (BUF1, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    ""\\_SB.GPIO"", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0012
                    }
            })
            If ((\WLD3 == One))
            {
                M460 (""  OEM-ASL-D3C ConcatenateRes BUF0 and BUF1\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                ConcatenateResTemplate (BUF0, BUF1, Local0)
            }
            Else
            {
                M460 (""  OEM-ASL-D3H Copy BUF0 to Local0\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = BUF0 /* \_SB_.GPIO._AEI.BUF0 */
            }

            If ((\_SB.CMBS == Zero))
            {
                M460 (""  OEM-ASL-Concatenate Local0 and PBTN\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                ConcatenateResTemplate (Local0, PBTN, Local1)
            }
            Else
            {
                M460 (""  OEM-ASL-Copy Local0 to Local1\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                Local1 = Local0
            }

            M460 (""  OEM-ASL-\\_SB.GPIO._AEI\n"", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Local1)
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            M460 (""  OEM-ASL-\\_SB.GPIO._EVT-Start Case %d\n"", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    M000 (0x3900)
                    M460 (""    Notify (\\_SB.PWRB, 0x80)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PWRB, 0x80) // Status Change
                }
                Case (0x12)
                {
                    M000 (0x3912)
                    If ((\WLD3 == One))
                    {
                        M460 (""    Notify (\\_SB.PCI0.GPP5, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                    }
                }
                Case (0x3A)
                {
                    M000 (0x393A)
                    M460 (""    Notify (\\_SB.PCI0.GPPC.XHC0, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPC.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    M000 (0x393B)
                    M460 (""    Notify (\\_SB.PCI0.GPPA.XHC1, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPA.XHC1, 0x02) // Device Wake
                }
                Case (0x3D)
                {
                    M000 (0x393D)
                    M460 (""    Notify (\\_SB.PCI0.GPPA.AZAL, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPA.AZAL, 0x02) // Device Wake
                }
                Case (0x3E)
                {
                    M000 (0x393E)
                    M460 (""    Notify (\\_SB.PCI0.GPPA.ACP, 0x02)\n"", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPPA.ACP, 0x02) // Device Wake
                }

            }

            M460 (""  OEM-ASL-\\_SB.GPIO._EVT-End Case %d\n"", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        }
    }
}</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20240322 (64-bit version)
 * Copyright (c) 2000 - 2023 Intel Corporation
 * 
 * Disassembly of /sys/firmware/acpi/tables/IVRS
 *
 * ACPI Data Table [IVRS]
 *
 * Format: [HexOffset DecimalOffset ByteLength]  FieldName : FieldValue (in hex)
 */

[000h 0000 004h]                   Signature : ""IVRS""    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001F6
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : AB
[00Ah 0010 006h]                      Oem ID : ""INSYDE""
[010h 0016 008h]                Oem Table ID : ""EDK2    ""
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : ""ACPI""
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]         Virtualization Info : 00203043
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0044
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FD200000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0003
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 48 [Device Entry: Special Device]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[060h 0096 001h]                      Handle : 00
[061h 0097 002h]       Source Used Device ID : 00A0
[063h 0099 001h]                     Variety : 02

[064h 0100 001h]               Subtable Type : 48 [Device Entry: Special Device]
[065h 0101 002h]                   Device ID : 0000
[067h 0103 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[068h 0104 001h]                      Handle : 21
[069h 0105 002h]       Source Used Device ID : 00A0
[06Bh 0107 001h]                     Variety : 01

[06Ch 0108 001h]               Subtable Type : 48 [Device Entry: Special Device]
[06Dh 0109 002h]                   Device ID : 0000
[06Fh 0111 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[070h 0112 001h]                      Handle : 22
[071h 0113 002h]       Source Used Device ID : 0001
[073h 0115 001h]                     Variety : 01

[074h 0116 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[075h 0117 001h]       Flags (decoded below) : 30
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 0
[076h 0118 002h]                      Length : 0054
[078h 0120 002h]                    DeviceId : 0002
[07Ah 0122 002h]           Capability Offset : 0040
[07Ch 0124 008h]                Base Address : 00000000FD200000
[084h 0132 002h]           PCI Segment Group : 0000
[086h 0134 002h]         Virtualization Info : 0000
[088h 0136 004h]                  Attributes : 00048000
[08Ch 0140 008h]                   EFR Image : 246577EFA2254AFA
[094h 0148 008h]                    Reserved : 0000000000000010

[09Ch 0156 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[09Dh 0157 002h]                   Device ID : 0003
[09Fh 0159 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A0h 0160 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A1h 0161 002h]                   Device ID : FFFE
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A5h 0165 002h]                   Device ID : FF00
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0A8h 0168 001h]                    Reserved : 00
[0A9h 0169 002h]       Source Used Device ID : 00A5
[0ABh 0171 001h]                    Reserved : 00

[0ACh 0172 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0ADh 0173 002h]                   Device ID : FFFF
[0AFh 0175 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B0h 0176 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B1h 0177 002h]                   Device ID : 0000
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0B4h 0180 001h]                      Handle : 00
[0B5h 0181 002h]       Source Used Device ID : 00A0
[0B7h 0183 001h]                     Variety : 02

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0BCh 0188 001h]                      Handle : 21
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 01

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0C4h 0196 001h]                      Handle : 22
[0C5h 0197 002h]       Source Used Device ID : 0001
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 21 [Memory Definition Block (IVMD)]
[0C9h 0201 001h]       Flags (decoded below) : 07
                                       Unity : 1
                                    Readable : 1
                                   Writeable : 1
                             Exclusion Range : 0
[0CAh 0202 002h]                      Length : 0020
[0CCh 0204 002h]                    DeviceId : 0060
[0CEh 0206 002h]              Auxiliary Data : 0000
[0D0h 0208 008h]                    Reserved : 0000000000000000
[0D8h 0216 008h]               Start Address : 000000007D900000
[0E0h 0224 008h]               Memory Length : 0000000000100000

[0E8h 0232 001h]               Subtable Type : 21 [Memory Definition Block (IVMD)]
[0E9h 0233 001h]       Flags (decoded below) : 08
                                       Unity : 0
                                    Readable : 0
                                   Writeable : 0
                             Exclusion Range : 1
[0EAh 0234 002h]                      Length : 0020
[0ECh 0236 002h]                    DeviceId : C107
[0EEh 0238 002h]              Auxiliary Data : 0000
[0F0h 0240 008h]                    Reserved : 0000000000000000
[0F8h 0248 008h]               Start Address : 0000000077E00000
[100h 0256 008h]               Memory Length : 0000000000020000

[108h 0264 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[109h 0265 001h]       Flags (decoded below) : 30
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 0
[10Ah 0266 002h]                      Length : 00EE
[10Ch 0268 002h]                    DeviceId : 0002
[10Eh 0270 002h]           Capability Offset : 0040
[110h 0272 008h]                Base Address : 00000000FD200000
[118h 0280 002h]           PCI Segment Group : 0000
[11Ah 0282 002h]         Virtualization Info : 0000
[11Ch 0284 004h]                  Attributes : 00048000
[120h 0288 008h]                   EFR Image : 246577EFA2254AFA
[128h 0296 008h]                    Reserved : 0000000000000010

[130h 0304 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[131h 0305 002h]                   Device ID : 0003
[133h 0307 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[134h 0308 001h]               Subtable Type : 04 [Device Entry: End of Range]
[135h 0309 002h]                   Device ID : FFFE
[137h 0311 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[138h 0312 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[139h 0313 002h]                   Device ID : FF00
[13Bh 0315 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[13Ch 0316 001h]                    Reserved : 00
[13Dh 0317 002h]       Source Used Device ID : 00A5
[13Fh 0319 001h]                    Reserved : 00

[140h 0320 001h]               Subtable Type : 04 [Device Entry: End of Range]
[141h 0321 002h]                   Device ID : FFFF
[143h 0323 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[144h 0324 001h]               Subtable Type : 48 [Device Entry: Special Device]
[145h 0325 002h]                   Device ID : 0000
[147h 0327 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[148h 0328 001h]                      Handle : 00
[149h 0329 002h]       Source Used Device ID : 00A0
[14Bh 0331 001h]                     Variety : 02

[14Ch 0332 001h]               Subtable Type : 48 [Device Entry: Special Device]
[14Dh 0333 002h]                   Device ID : 0000
[14Fh 0335 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[150h 0336 001h]                      Handle : 21
[151h 0337 002h]       Source Used Device ID : 00A0
[153h 0339 001h]                     Variety : 01

[154h 0340 001h]               Subtable Type : 48 [Device Entry: Special Device]
[155h 0341 002h]                   Device ID : 0000
[157h 0343 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[158h 0344 001h]                      Handle : 22
[159h 0345 002h]       Source Used Device ID : 0001
[15Bh 0347 001h]                     Variety : 01

[15Ch 0348 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[15Dh 0349 002h]                   Device ID : 00A5
[15Fh 0351 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[160h 0352 008h]                    ACPI HID : ""AMDI0020""
[168h 0360 008h]                    ACPI CID : 0000000000000000
[170h 0368 001h]                  UID Format : 02
[171h 0369 001h]                  UID Length : 04
[172h 0370 004h]                         UID : ""ID00""

[176h 0374 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[177h 0375 002h]                   Device ID : 00A5
[179h 0377 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[17Ah 0378 008h]                    ACPI HID : ""AMDI0020""
[182h 0386 008h]                    ACPI CID : 0000000000000000
[18Ah 0394 001h]                  UID Format : 02
[18Bh 0395 001h]                  UID Length : 04
[18Ch 0396 004h]                         UID : ""ID01""

[190h 0400 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[191h 0401 002h]                   Device ID : 00A5
[193h 0403 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[194h 0404 008h]                    ACPI HID : ""AMDI0020""
[19Ch 0412 008h]                    ACPI CID : 0000000000000000
[1A4h 0420 001h]                  UID Format : 02
[1A5h 0421 001h]                  UID Length : 04
[1A6h 0422 004h]                         UID : ""ID02""

[1AAh 0426 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1ABh 0427 002h]                   Device ID : 0099
[1ADh 0429 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1AEh 0430 008h]                    ACPI HID : ""AMDI0020""
[1B6h 0438 008h]                    ACPI CID : 0000000000000000
[1BEh 0446 001h]                  UID Format : 02
[1BFh 0447 001h]                  UID Length : 04
[1C0h 0448 004h]                         UID : ""ID03""

[1C4h 0452 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1C5h 0453 002h]                   Device ID : 0060
[1C7h 0455 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1C8h 0456 008h]                    ACPI HID : ""MSFT0201""
[1D0h 0464 008h]                    ACPI CID : 0000000000000000
[1D8h 0472 001h]                  UID Format : 01
[1D9h 0473 001h]                  UID Length : 02
[1DAh 0474 008h]                         UID : 4D41400099F00001

[1DCh 0476 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1DDh 0477 002h]                   Device ID : 0099
[1DFh 0479 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1E0h 0480 008h]                    ACPI HID : ""AMDI0020""
[1E8h 0488 008h]                    ACPI CID : 0000000000000000
[1F0h 0496 001h]                  UID Format : 02
[1F1h 0497 001h]                  UID Length : 04
[1F2h 0498 004h]                         UID : ""ID04""

Raw Table Data: Length 502 (0x1F6)

    0000: 49 56 52 53 F6 01 00 00 02 AB 49 4E 53 59 44 45  // IVRS......INSYDE
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 44 00 02 00 40 00 00 00 20 FD 00 00 00 00  // ..D...@... .....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 48 00 00 00  // C...........H...
    0060: 00 A0 00 02 48 00 00 D7 21 A0 00 01 48 00 00 00  // ....H...!...H...
    0070: 22 01 00 01 11 30 54 00 02 00 40 00 00 00 20 FD  // ""....0T...@... .
    0080: 00 00 00 00 00 00 00 00 00 80 04 00 FA 4A 25 A2  // .............J%.
    0090: EF 77 65 24 10 00 00 00 00 00 00 00 03 03 00 00  // .we$............
    00A0: 04 FE FF 00 43 00 FF 00 00 A5 00 00 04 FF FF 00  // ....C...........
    00B0: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    00C0: 48 00 00 00 22 01 00 01 21 07 20 00 60 00 00 00  // H...""...!. .`...
    00D0: 00 00 00 00 00 00 00 00 00 00 90 7D 00 00 00 00  // ...........}....
    00E0: 00 00 10 00 00 00 00 00 21 08 20 00 07 C1 00 00  // ........!. .....
    00F0: 00 00 00 00 00 00 00 00 00 00 E0 77 00 00 00 00  // ...........w....
    0100: 00 00 02 00 00 00 00 00 40 30 EE 00 02 00 40 00  // ........@0....@.
    0110: 00 00 20 FD 00 00 00 00 00 00 00 00 00 80 04 00  // .. .............
    0120: FA 4A 25 A2 EF 77 65 24 10 00 00 00 00 00 00 00  // .J%..we$........
    0130: 03 03 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    0140: 04 FF FF 00 48 00 00 00 00 A0 00 02 48 00 00 D7  // ....H.......H...
    0150: 21 A0 00 01 48 00 00 00 22 01 00 01 F0 A5 00 40  // !...H...""......@
    0160: 41 4D 44 49 30 30 32 30 00 00 00 00 00 00 00 00  // AMDI0020........
    0170: 02 04 49 44 30 30 F0 A5 00 40 41 4D 44 49 30 30  // ..ID00...@AMDI00
    0180: 32 30 00 00 00 00 00 00 00 00 02 04 49 44 30 31  // 20..........ID01
    0190: F0 A5 00 40 41 4D 44 49 30 30 32 30 00 00 00 00  // ...@AMDI0020....
    01A0: 00 00 00 00 02 04 49 44 30 32 F0 99 00 40 41 4D  // ......ID02...@AM
    01B0: 44 49 30 30 32 30 00 00 00 00 00 00 00 00 02 04  // DI0020..........
    01C0: 49 44 30 33 F0 60 00 40 4D 53 46 54 30 32 30 31  // ID03.`.@MSFT0201
    01D0: 00 00 00 00 00 00 00 00 01 02 01 00 F0 99 00 40  // ...............@
    01E0: 41 4D 44 49 30 30 32 30 00 00 00 00 00 00 00 00  // AMDI0020........
    01F0: 02 04 49 44 30 34                                // ..ID04</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>ACPI name: ACPI path [driver]
│ LNXSYSTM:00: \ [None]
│ LNXSYBUS:00: \_SB_ [None]
│ ACPI0010:00: \_SB_.PLTF [None]
│ ACPI0007:00: \_SB_.PLTF.C000 [processor]
│ ACPI0007:01: \_SB_.PLTF.C001 [processor]
│ ACPI0007:02: \_SB_.PLTF.C002 [processor]
│ ACPI0007:03: \_SB_.PLTF.C003 [processor]
│ ACPI0007:04: \_SB_.PLTF.C004 [processor]
│ ACPI0007:05: \_SB_.PLTF.C005 [processor]
│ ACPI0007:06: \_SB_.PLTF.C006 [processor]
│ ACPI0007:07: \_SB_.PLTF.C007 [processor]
│ ACPI0007:08: \_SB_.PLTF.C008 [processor]
│ ACPI0007:09: \_SB_.PLTF.C009 [processor]
│ ACPI0007:0a: \_SB_.PLTF.C00A [processor]
│ ACPI0007:0b: \_SB_.PLTF.C00B [processor]
│ ACPI0007:0c: \_SB_.PLTF.C00C [processor]
│ ACPI0007:0d: \_SB_.PLTF.C00D [processor]
│ ACPI0007:0e: \_SB_.PLTF.C00E [processor]
│ ACPI0007:0f: \_SB_.PLTF.C00F [processor]
│ ACPI0007:10: \_SB_.PLTF.C010 [processor]
│ ACPI0007:11: \_SB_.PLTF.C011 [processor]
│ ACPI0007:12: \_SB_.PLTF.C012 [processor]
│ ACPI0007:13: \_SB_.PLTF.C013 [processor]
│ ACPI0007:14: \_SB_.PLTF.C014 [processor]
│ ACPI0007:15: \_SB_.PLTF.C015 [processor]
│ ACPI0007:16: \_SB_.PLTF.C016 [processor]
│ ACPI0007:17: \_SB_.PLTF.C017 [processor]
│ AMDI000A:00: \_SB_.PEP_ [amd_pmc]
│ AMDI0010:00: \_SB_.I2CA [i2c_designware]
│ AMDI0010:01: \_SB_.I2CB [i2c_designware]
│ FRMW0004:00: \_SB_.I2CB.ECKB [i2c_hid_acpi]
│ FRMW0005:00: \_SB_.I2CB.ECSL [i2c_hid_acpi]
│ AMDI0010:03: \_SB_.I2CD [i2c_designware]
│ PIXA3854:00: \_SB_.I2CD.TPAD [i2c_hid_acpi]
│ AMDI0030:00: \_SB_.GPIO [amd_gpio]
│ AMDI0052:00: \_SB_.PPKG [None]
│ AMDI0080:00: \_SB_.VGBI [None]
│ AMDI0081:00: \_SB_.CIND [None]
│ AMDI0103:00: \_SB_.PMF_ [amd-pmf]
│ AMDI0104:00: \_SB_.MP1_ [None]
│ DRTM0001:00: \_SB_.DRTM [None]
│ FRMWC004:00: \_SB_.CREC [None]
│ LNXPOWER:11: \_SB_.FN10 [None]
│ MSFT0101:00: \_SB_.TPM2 [None]
│ MSFT0201:00: \_SB_.MHSP [None]
│ PNP0A08:00: \_SB_.PCI0 [None]
│ LNXPOWER:04: \_SB_.PCI0.GPP3.P0NV [None]
│ LNXPOWER:05: \_SB_.PCI0.GPP5.PWSR [None]
│ LNXPOWER:06: \_SB_.PCI0.GPPA.PWRS [None]
│ PNP0103:00: \_SB_.PCI0.HPET [None]
│ PNP0C14:00: \_SB_.PCI0.DWMI [acpi-wmi]
│ device:00: \_SB_.PCI0.GPP0 [pcieport]
│ LNXPOWER:01: \_SB_.PCI0.GPP0.SWUS.PWRS [None]
│ device:01: \_SB_.PCI0.GPP0.SWUS [None]
│ device:02: \_SB_.PCI0.GPP1 [pcieport]
│ LNXPOWER:03: \_SB_.PCI0.GPP1.SWUS.PWRS [None]
│ device:03: \_SB_.PCI0.GPP1.SWUS [None]
│ device:04: \_SB_.PCI0.GPP3 [pcieport]
│ device:05: \_SB_.PCI0.GPP3.NVME [nvme]
│ device:06: \_SB_.PCI0.GPP4 [None]
│ device:07: \_SB_.PCI0.GPP4.SDCR [None]
│ device:08: \_SB_.PCI0.GPP5 [pcieport]
│ device:09: \_SB_.PCI0.GPP5.WLAN [mt7921e]
│ device:0a: \_SB_.PCI0.GPP6 [None]
│ device:0b: \_SB_.PCI0.GPP6.RTL8 [None]
│ device:0c: \_SB_.PCI0.GPP6.RUSB [None]
│ device:0d: \_SB_.PCI0.GPP7 [None]
│ device:0e: \_SB_.PCI0.GPP7.WWAN [None]
│ device:0f: \_SB_.PCI0.GPP8 [None]
│ device:10: \_SB_.PCI0.GPP9 [None]
│ device:11: \_SB_.PCI0.GP10 [None]
│ device:12: \_SB_.PCI0.GP11 [None]
│ device:13: \_SB_.PCI0.GP12 [None]
│ device:14: \_SB_.PCI0.GP13 [None]
│ device:15: \_SB_.PCI0.GP14 [None]
│ device:16: \_SB_.PCI0.GPPA [pcieport]
│ LNXPOWER:07: \_SB_.PCI0.GPPA.VGA_.PWRS [None]
│ LNXVIDEO:00: \_SB_.PCI0.GPPA.VGA_ [amdgpu]
│ device:17: \_SB_.PCI0.GPPA.VGA_.LCD_ [None]
│ device:18: \_SB_.PCI0.GPPA.PSP_ [ccp]
│ device:19: \_SB_.PCI0.GPPA.ACP_ [snd_acp_pci]
│ device:1a: \_SB_.PCI0.GPPA.ACP_.HDA0 [None]
│ device:1b: \_SB_.PCI0.GPPA.ACP_.PDMC [None]
│ device:1c: \_SB_.PCI0.GPPA.ACP_.I2SC [None]
│ device:1d: \_SB_.PCI0.GPPA.ACP_.BTSC [None]
│ device:1e: \_SB_.PCI0.GPPA.ACP_.SDWC [None]
│ device:1f: \_SB_.PCI0.GPPA.ACP_.SDWS [None]
│ device:20: \_SB_.PCI0.GPPA.ACP_.USBS [None]
│ device:21: \_SB_.PCI0.GPPA.AZAL [snd_hda_intel]
│ device:22: \_SB_.PCI0.GPPA.HDAU [snd_hda_intel]
│ device:23: \_SB_.PCI0.GPPA.XHC1 [xhci_hcd]
│ device:24: \_SB_.PCI0.GPPA.XHC1.RHUB [usb]
│ device:25: \_SB_.PCI0.GPPA.XHC1.RHUB.PRT1 [None]
│ device:26: \_SB_.PCI0.GPPA.XHC1.RHUB.PRT2 [None]
│ device:27: \_SB_.PCI0.GPPA.MP2C [None]
│ device:28: \_SB_.PCI0.GPPB [pcieport]
│ device:29: \_SB_.PCI0.GPPB.IPU_ [amdxdna]
│ device:2a: \_SB_.PCI0.GPPC [pcieport]
│ LNXPOWER:0c: \_SB_.PCI0.GPPC.XHC0.PWRS [None]
│ device:2b: \_SB_.PCI0.GPPC.XHC0 [xhci_hcd]
│ device:2c: \_SB_.PCI0.GPPC.XHC0.RHUB [usb]
│ device:2d: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT1 [None]
│ device:2e: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT2 [None]
│ device:2f: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT3 [None]
│ device:30: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT3.WCAM [None]
│ device:31: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT3.CAMI [None]
│ device:32: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT4 [None]
│ device:33: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT5 [None]
│ device:34: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT6 [None]
│ device:35: \_SB_.PCI0.GPPC.XHC0.RHUB.PRT7 [None]
│ device:36: \_SB_.PCI0.GPPC.XHC3 [xhci_hcd]
│ device:37: \_SB_.PCI0.GPPC.XHC3.RHUB [usb]
│ device:38: \_SB_.PCI0.GPPC.XHC3.RHUB.PRT1 [None]
│ device:39: \_SB_.PCI0.GPPC.XHC3.RHUB.PRT2 [None]
│ device:3a: \_SB_.PCI0.GPPC.XHC4 [xhci_hcd]
│ device:3b: \_SB_.PCI0.GPPC.XHC4.RHUB [usb]
│ device:3c: \_SB_.PCI0.GPPC.XHC4.RHUB.PRT1 [None]
│ device:3d: \_SB_.PCI0.GPPC.XHC4.RHUB.PRT2 [None]
│ device:3e: \_SB_.PCI0.GPPC.NHI0 [thunderbolt]
│ device:3f: \_SB_.PCI0.GPPC.NHI1 [thunderbolt]
│ device:40: \_SB_.PCI0.SMBS [piix4_smbus]
│ device:41: \_SB_.PCI0.LPC0 [None]
│ ACPI0003:00: \_SB_.PCI0.LPC0.ACAD [ac]
│ MSFT0001:00: \_SB_.PCI0.LPC0.KBC0 [i8042 kbd]
│ PNP0000:00: \_SB_.PCI0.LPC0.PIC_ [None]
│ PNP0100:00: \_SB_.PCI0.LPC0.TMR_ [None]
│ PNP0200:00: \_SB_.PCI0.LPC0.DMAC [None]
│ PNP0800:00: \_SB_.PCI0.LPC0.SPKR [None]
│ PNP0B00:00: \_SB_.PCI0.LPC0.RTC_ [rtc_cmos]
│ PNP0C01:00: \_SB_.PCI0.LPC0.SPIR [system]
│ PNP0C02:01: \_SB_.PCI0.LPC0.SYSR [system]
│ PNP0C04:00: \_SB_.PCI0.LPC0.COPR [None]
│ PNP0C09:00: \_SB_.PCI0.LPC0.EC0_ [None]
│ PNP0C0D:00: \_SB_.PCI0.LPC0.EC0_.LID0 [None]
│ PNP0C0A:00: \_SB_.PCI0.LPC0.BAT1 [None]
│ PNP0C02:00: \_SB_.AMDM [system]
│ PNP0C02:02: \_SB_.AWR0 [None]
│ PNP0C02:03: \_SB_.AWR0.ABR0 [None]
│ PNP0C02:04: \_SB_.AWR0.ABR1 [None]
│ PNP0C02:05: \_SB_.AWR0.ABR2 [None]
│ PNP0C02:06: \_SB_.AWR0.ABR3 [None]
│ PNP0C02:07: \_SB_.AWR0.ABR4 [None]
│ PNP0C02:08: \_SB_.AWR0.ABR5 [None]
│ PNP0C02:09: \_SB_.AWR0.ABR6 [None]
│ PNP0C02:0a: \_SB_.AWR0.ABR7 [None]
│ PNP0C02:0b: \_SB_.AWR0.ABR8 [None]
│ PNP0C02:0c: \_SB_.AWR0.ABR9 [None]
│ PNP0C02:0d: \_SB_.AWR0.ABRA [None]
│ PNP0C0B:00: \_SB_.FAN_ [acpi-fan]
│ PNP0C0C:00: \_SB_.PWRB [None]
│ USBC000:00: \_SB_.UBTC [ucsi_acpi]
│ device:42: \_SB_.UBTC.CR01 [None]
│ device:43: \_SB_.UBTC.CR02 [None]
│ device:44: \_SB_.UBTC.CR03 [None]
│ device:45: \_SB_.UBTC.CR04 [None]
│ LNXSYBUS:01: \_TZ_ [None]
│ LNXTHERM:00: \_TZ_.TZ00 [None]
│ LNXTHERM:01: \_TZ_.TZ01 [None]
│ LNXTHERM:02: \_TZ_.TZ02 [None]
│ LNXTHERM:03: \_TZ_.TZ03 [None]
└─PNP0C14:01: \AOD_ [acpi-wmi]</pre>
            </TD>
        </TR>
        
        <TR>
            <TD>
                <pre>Device firmware checks unavailable without gobject introspection</pre>
            </TD>
        </TR>
        
    </table>
    
    <h2>Summary</h2>
    
    
    
    <select id=""start_select"" class=""hidden-by-default""></select>
    <select id=""end_select"" class=""hidden-by-default""></select>
    <input type=""radio"" name=""session1"" id=""all_time"" value=""all_time"" checked="""" class=""hidden-by-default"" />
    <input type=""radio"" name=""session1"" id=""med_duration"" value=""600"" class=""hidden-by-default"" />
    <input type=""radio"" name=""session1"" id=""min_duration"" value=""60"" class=""hidden-by-default"" />
    
    <table border=""1"" class=""dataframe"" id=""summary"">  <thead>    <tr style=""text-align: right;"">      <th></th>      <th>Start Time</th>      <th>Duration</th>      <th>Hardware Sleep</th>      <th>Battery Start</th>      <th>Battery Delta</th>      <th>Battery Ave Rate</th>      <th>Wake Pin</th>      <th>Wake Interrupt</th>    </tr>  </thead>  <tbody>    <tr class=""row-low"" onclick=""pick_summary_cycle(0)"">      <th>0</th>      <td>2025-05-19 08:33:09</td>      <td>0:01:03</td>      <td>93.47%</td>      <td>58.82%</td>      <td>-0.03%</td>      <td>-0.04W</td>      <td>5</td>      <td>ACPI SCI</td>    </tr>  </tbody></table>
    
    <p><label for=""cycle"" class=""hidden-by-default"">Choose a cycle:</label>
        <select id=""cycles"" onchange=""cycle_data_changed()"" class=""hidden-by-default"">
            <option value=""0"">Disabled</option>
            
            <option value=""1"">Cycle 0</option>
            
        </select>
    </p>
    <table id=""cycledata"" class=""hide-borders"">
        
        <TR class=""row-disabled"" id=""cycledata1"">
            <TD><p>💤 Hardware sleep cycle count: 1</p><p></p></TD>
        </TR>
        
    </table>
    
    
    
    <h3 id=""debug_label"" style=""display:none;"">Debugging 🦟</h3>
    <p><label for=""debug"" class=""hidden-by-default"">Choose a cycle:</label>
        <select id=""debug"" onchange=""debug_data_changed()"" class=""hidden-by-default"">
            <option value=""0"">Disabled</option>
            
            <option value=""1"">Cycle 0</option>
            
        </select>
    </p>
    <table id=""debugdata"" class=""hide-borders"">
        
        <TR class=""row-disabled"" id=""debugdata1"">
            <TD>
                
                <div class=""○"">BAT1 energy level is 2130000 µAh</div>
                
                <div class=""○"">ACPI Lid (/proc/acpi/button/lid/LID0/state): open</div>
                
                <div class=""○"">/proc/cmdline: rd.live.image</div>
                
                <div class=""○"">Possible wakeup sources:</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:001/wakeup57]: enabled</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:002/wakeup58]: enabled</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:003/wakeup59]: enabled</div>
                
                <div class=""○"">│  [/sys/devices/platform/USBC000:00/power_supply/ucsi-source-psy-USBC000:004/wakeup60]: enabled</div>
                
                <div class=""○"">│ ACPI Battery [PNP0C0A:00]: enabled</div>
                
                <div class=""○"">│ ACPI Lid Switch [PNP0C0D:00]: enabled</div>
                
                <div class=""○"">│ ACPI Power Button [PNP0C0C:00]: enabled</div>
                
                <div class=""○"">│ AT Translated Set 2 keyboard [serio0]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] ISA bridge [0000:00:14.3]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:01.1]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:01.2]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:02.1]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] PCI bridge [0000:00:02.3]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c1:00.4]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.0]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.3]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.4]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.5]: enabled</div>
                
                <div class=""○"">│ Advanced Micro Devices, Inc. [AMD] USB controller [0000:c3:00.6]: enabled</div>
                
                <div class=""○"">│ PIXA3854:00 093A:0274 Mouse [i2c-PIXA3854:00]: enabled</div>
                
                <div class=""○"">│ Plug-n-play Real Time Clock [00:01]: enabled</div>
                
                <div class=""○"">│ Real Time Clock alarm timer [rtc0]: enabled</div>
                
                <div class=""○"">│ Thunderbolt domain [domain0]: enabled</div>
                
                <div class=""○"">│ Thunderbolt domain [domain1]: enabled</div>
                
                <div class=""○"">│ USB4 host controller [0-0]: enabled</div>
                
                <div class=""○"">└─USB4 host controller [1-0]: enabled</div>
                
                <div class=""○"">gnome-shell compositor is running</div>
                
                <div class=""○"">IPS status</div>
                
                <div class=""○"">│ IPS config: 6</div>
                
                <div class=""○"">│ Idle optimization: 0</div>
                
                <div class=""○"">│ Idle workqueue - enabled: 1</div>
                
                <div class=""○"">│ Idle workqueue - running: 0</div>
                
                <div class=""○"">│ entry counts: rcg=29 ips1=0 ips2=0</div>
                
                <div class=""○"">└─exit counts: rcg=29 ips1=0 ips2=0</div>
                
                <div class=""○"">Thermal zones</div>
                
                <div class=""○"">├─ LNXTHERM:00</div>
                
                <div class=""○"">│ 	 temp: 41.8°C</div>
                
                <div class=""○"">│ 	 critical trip: 170.0°C</div>
                
                <div class=""○"">│ 	 hot trip: 160.0°C</div>
                
                <div class=""○"">├─ LNXTHERM:01</div>
                
                <div class=""○"">│ 	 temp: 47.8°C</div>
                
                <div class=""○"">│ 	 critical trip: 170.0°C</div>
                
                <div class=""○"">│ 	 hot trip: 160.0°C</div>
                
                <div class=""○"">├─ LNXTHERM:02</div>
                
                <div class=""○"">│ 	 temp: 36.8°C</div>
                
                <div class=""○"">│ 	 critical trip: 170.0°C</div>
                
                <div class=""○"">│ 	 hot trip: 160.0°C</div>
                
                <div class=""○"">└─LNXTHERM:03</div>
                
                <div class=""○"">  	 temp: 49.8°C</div>
                
                <div class=""○"">  	 critical trip: 170.0°C</div>
                
                <div class=""○"">  	 hot trip: 160.0°C</div>
                
                <div class=""○"">Suspend timer programmed for 0:01:00</div>
                
                <div class=""○"">PM: suspend entry (s2idle)</div>
                
                <div class=""○"">Filesystems sync: 0.000 seconds</div>
                
                <div class=""○"">Freezing user space processes</div>
                
                <div class=""○"">Freezing user space processes completed (elapsed 0.002 seconds)</div>
                
                <div class=""○"">OOM killer disabled.</div>
                
                <div class=""○"">Freezing remaining freezable tasks</div>
                
                <div class=""○"">Freezing remaining freezable tasks completed (elapsed 0.000 seconds)</div>
                
                <div class=""○"">printk: Suspending console(s) (use no_console_suspend to debug)</div>
                
                <div class=""○"">wlp192s0: deauthenticating from 7e:41:b1:85:0d:9b by local choice (Reason: 3=DEAUTH_LEAVING)</div>
                
                <div class=""🦟"">PM: suspend of devices complete after 501.485 msecs</div>
                
                <div class=""🦟"">PM: start suspend of devices complete after 504.389 msecs</div>
                
                <div class=""○"">PM: suspend devices took 0.504 seconds</div>
                
                <div class=""🦟"">Disabling GPIO #5 interrupt for suspend.</div>
                
                <div class=""🦟"">Disabling GPIO #8 interrupt for suspend.</div>
                
                <div class=""🦟"">Disabling GPIO #84 interrupt for suspend.</div>
                
                <div class=""🦟"">PM: late suspend of devices complete after 1.100 msecs</div>
                
                <div class=""○"">ACPI: EC: interrupt blocked</div>
                
                <div class=""🦟"">PM: noirq suspend of devices complete after 49.862 msecs</div>
                
                <div class=""○"">ACPI: \_SB_.PCI0.GPP0.SWUS: LPI: Constraint not met; min power state:D3hot current power state:D0</div>
                
                <div class=""○"">ACPI: \_SB_.PCI0.GPP1.SWUS: LPI: Constraint not met; min power state:D3hot current power state:D0</div>
                
                <div class=""○"">ACPI: \_SB_.PCI0.GPP5.WLAN: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PCI0.GPPB.IPU_: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C000: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C001: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C002: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C003: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C004: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C005: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C006: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C007: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C008: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C009: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C00A: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C00B: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C00C: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C00D: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C00E: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C00F: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C010: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C011: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C012: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C013: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C014: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C015: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C016: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PLTF.C017: LPI: Device not power manageable</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state screen off</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 ms entry</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 entry</div>
                
                <div class=""🦟"">PM: suspend-to-idle</div>
                
                <div class=""🦟"">amd_pmc: SMU idlemask s0i3: 0xffff9abd</div>
                
                <div class=""🦟"">Timekeeping suspended for 60.000 seconds</div>
                
                <div class=""🦟"">PM: Triggering wakeup from IRQ 9</div>
                
                <div class=""🦟"">ACPI: PM: ACPI fixed event wakeup</div>
                
                <div class=""🦟"">PM: resume from suspend-to-idle</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 exit</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state lps0 ms exit</div>
                
                <div class=""○"">ACPI: \_SB_.PEP_: Successfully transitioned to state screen on</div>
                
                <div class=""○"">ACPI: EC: interrupt unblocked</div>
                
                <div class=""🦟"">PM: noirq resume of devices complete after 316.749 msecs</div>
                
                <div class=""🦟"">PM: early resume of devices complete after 2.852 msecs</div>
                
                <div class=""○"">[drm] PCIE GART of 512M enabled (table at 0x0000008001700000).</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: SMU is resuming...</div>
                
                <div class=""○"">nvme nvme0: 24/0/0 default/read/poll queues</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: SMU is resumed successfully!</div>
                
                <div class=""🦟"">GPIO 5 is active: 0x10041b00</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring gfx_0.0.0 uses VM inv eng 0 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.0.0 uses VM inv eng 1 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.1.0 uses VM inv eng 4 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.2.0 uses VM inv eng 6 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.3.0 uses VM inv eng 7 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.0.1 uses VM inv eng 8 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.1.1 uses VM inv eng 9 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.2.1 uses VM inv eng 10 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring comp_1.3.1 uses VM inv eng 11 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring sdma0 uses VM inv eng 12 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring vcn_unified_0 uses VM inv eng 0 on hub 8</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring jpeg_dec_0 uses VM inv eng 1 on hub 8</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring mes_kiq_3.1.0 uses VM inv eng 13 on hub 0</div>
                
                <div class=""○"">amdgpu 0000:c1:00.0: amdgpu: ring vpe uses VM inv eng 4 on hub 8</div>
                
                <div class=""○"">[drm] ring gfx_32777.1.1 was added</div>
                
                <div class=""○"">[drm] ring compute_32777.2.2 was added</div>
                
                <div class=""○"">[drm] ring sdma_32777.3.3 was added</div>
                
                <div class=""○"">[drm] ring gfx_32777.1.1 ib test pass</div>
                
                <div class=""○"">[drm] ring compute_32777.2.2 ib test pass</div>
                
                <div class=""○"">[drm] ring sdma_32777.3.3 ib test pass</div>
                
                <div class=""🦟"">PM: resume of devices complete after 356.575 msecs</div>
                
                <div class=""○"">PM: resume devices took 0.360 seconds</div>
                
                <div class=""○"">OOM killer enabled.</div>
                
                <div class=""○"">Restarting tasks ... done.</div>
                
                <div class=""○"">random: crng reseeded on system resumption</div>
                
                <div class=""○"">PM: suspend exit</div>
                
                <div class=""○"">Used Microsoft uPEP GUID in LPS0 _DSM</div>
                
                <div class=""○"">Woke up from IRQ 9 (IR-IO-APIC 9-fasteoi acpi)</div>
                
                <div class=""○"">gpe0A increased from 167 to 179</div>
                
                <div class=""○"">ACPI Lid (/proc/acpi/button/lid/LID0/state): open</div>
                
                <div class=""○"">BAT1 energy level is 2129000 µAh</div>
                
                <div class=""○"">IPS status</div>
                
                <div class=""○"">│ IPS config: 6</div>
                
                <div class=""○"">│ Idle optimization: 0</div>
                
                <div class=""○"">│ Idle workqueue - enabled: 1</div>
                
                <div class=""○"">│ Idle workqueue - running: 0</div>
                
                <div class=""○"">│ entry counts: rcg=29 ips1=1 ips2=1</div>
                
                <div class=""○"">└─exit counts: rcg=29 ips1=1 ips2=1</div>
                
                <div class=""○"">Thermal zones</div>
                
                <div class=""○"">├─ LNXTHERM:00</div>
                
                <div class=""○"">│ 	 41.8°C -> 38.8°C</div>
                
                <div class=""○"">├─ LNXTHERM:01</div>
                
                <div class=""○"">│ 	 47.8°C -> 40.8°C</div>
                
                <div class=""○"">├─ LNXTHERM:02</div>
                
                <div class=""○"">│ 	 36.8°C -> 36.8°C</div>
                
                <div class=""○"">└─LNXTHERM:03</div>
                
                <div class=""○"">  	 49.8°C -> 39.8°C</div>
                
            </TD>
        </TR>
        
    </table>
    
</body>

</html>"
TBvXJKmJ,Climbing Stairs,Fastrail08,C++,Monday 19th of May 2025 03:30:01 AM CDT,"#include <bits/stdc++.h>
using namespace std;

//Question - Count the number of paths from nth Stair to 0th Stair


// Another way of thinking is to break it down into levels and options
// Levels - Each Stair
// Options - 3 possible jumps from each stair

// Recursive code + memo
int countStairPath(int n, vector<int> &memo){
    // base case
    if(n == 0){
        return 1;
    }
    
    //invalid case
    if(n < 0){
        return 0;
    }
    
    //memo check
    if(memo[n] != 0){
        return memo[n];
    }
    //paths from n - 1
    int pathsNm1 = countStairPath(n - 1, memo);
    //path from n - 2
    int pathsNm2 = countStairPath(n - 2, memo);
    //path from n - 3
    int pathsNm3 = countStairPath(n - 3, memo);
    
    
    return memo[n] = pathsNm1 + pathsNm2 + pathsNm3;
}


//dp code 
int getStairPath(int n){
    // dp array (as we need the answer for n, so N + 1 size required)
    vector<int> dp(n + 1);
    
    /*
    1) MEANING
    dp[n] = total number of paths from n to 0th stair
    generally each cell will answer the same question but with smaller param
    Each cell holds the answer to all the possible unique recursive states

    2) DIRECTION
    smaller problem is at dp[0]
    dp[0] - stores answer for all the paths from 0th stair to 0th stair = 1
    so direction to solve would be from smaller problem to larger problem 0 -> n
    
    3) TRAVEL & SOLVE
    loop in the direction
    */
    
    // ASSIGN VALUE TO BASE CASE as we did in memo code
    dp[0] = 1;
    for(int i = 1; i <= n; i++){
        if(i == 1){
            dp[i] = dp[i - 1];
        }
        else if(i == 2){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        // to figure out to which dp[i] is related just see the recursion tree, and watch which state is calling which states to get the answer.
        else{
            dp[i] = dp[i - 3] + dp[i - 2] + dp[i - 1];
        }
    }
    return dp[n];
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> memo(n + 1, 0);
    //cout << countStairPath(n, memo) << '\n';
    cout << getStairPath(n) << '\n';
}
"
Fnj1H36j,Paynet SEND,MChaos,HTML,Monday 19th of May 2025 03:02:16 AM CDT,"<form method=""POST"" id=""pay_form"" action=""https://paynet.md/acquiring/setecom"">
    <input type=""hidden"" name=""ExternalID"" value=""1747641623188"">
    <input type=""hidden"" name=""Services[0][Description]"" value=""kh md"">
    <input type=""hidden"" name=""Services[0][Name]"" value=""Keller Boutique"">
    <input type=""hidden"" name=""Services[0][Amount]"" value=""225000"">
    <input type=""hidden"" name=""Services[0][Products][0][LineNo]"" value=""1"">
    <input type=""hidden"" name=""Services[0][Products][0][Code]"" value=""999999999"">
    <input type=""hidden"" name=""Services[0][Products][0][BarCode]"" value=""99999999"">
    <input type=""hidden"" name=""Services[0][Products][0][Name]"" value=""KH Excursion"">
    <input type=""hidden"" name=""Services[0][Products][0][Description]"" value=""All orders Excursion"">
    <input type=""hidden"" name=""Services[0][Products][0][Quantity]"" value=""100"">
    <input type=""hidden"" name=""Services[0][Products][0][UnitPrice]"" value=""225000"">
    <input type=""hidden"" name=""Currency"" value=""498"">
    <input type=""hidden"" name=""Merchant"" value=""331913"">
    <input type=""hidden"" name=""Customer.Code"" value=""igori-melnik@mail.ru"">
    <input type=""hidden"" name=""Customer.Name"" value="""">
    <input type=""hidden"" name=""Customer.Address"" value=""www.kh.md"">
    <input type=""hidden"" name=""Payer.Email"" value=""igori-melnik@mail.ru"">
    <input type=""hidden"" name=""Payer.Name"" value="""">
    <input type=""hidden"" name=""Payer.Surname"" value="""">
    <input type=""hidden"" name=""Payer.Mobile"" value=""069153080"">
    <input type=""hidden"" name=""ExternalDate"" value=""2025-05-19T11:00:23"">
    <input type=""hidden"" name=""LinkUrlSuccess"" value=""https://kh.md/ro/checkout/success/"">
    <input type=""hidden"" name=""LinkUrlCancel"" value=""https://kh.md/ro"">
    <input type=""hidden"" name=""ExpiryDate"" value=""2025-05-19T15:00:23"">
    <input type=""hidden"" name=""Signature"" value=""NSA5rpYX9cNCQmGNkvEllQ=="">
    <input type=""hidden"" name=""Lang"" value=""ro"">
</form>"
5GAkcFcZ,2_METERS_ILI9431_ESP32C6,Tywais,C++,Monday 19th of May 2025 02:51:17 AM CDT,"//GOOD 14/05/2025

#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <SPI.h>

//For Cheap Yellow Display
//#define TFT_MISO 12
//#define TFT_MOSI 13 //15 // In some display driver board, it might be written as ""SDA"" and so on.
//#define TFT_SCLK 14 //14
//#define TFT_CS   15 //5  // Chip select control pin
//#define TFT_DC   2 //27  // Data Command control pin
//#define TFT_RST  -1 //33  // Reset pin (could connect to Arduino RESET pin)

// TFT Pins (ESP32C6 Waveshare)
#define TFT_MOSI  19
#define TFT_MISO  5
#define TFT_SCK   21
#define TFT_CS    18 //5
#define TFT_RST   1
#define TFT_DC    0

//For ESP32C3 Super mini
//#define TFT_MOSI 6 //15 // In some display driver board, it might be written as ""SDA"" and so on.
//#define TFT_SCK  4 //14
//#define TFT_CS   5 //5  // Chip select control pin
//#define TFT_DC   7 //27  // Data Command control pin
//#define TFT_RST  1 //33  // Reset pin (could connect to Arduino RESET pin)
//#define TFT_MISO  -1

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI,TFT_SCK,TFT_RST,TFT_MISO);

#include ""DHT.h""
#define DHTPIN 5 
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
// Gauge positions and settings
const int gauge1X = 75, gauge1Y = 120;
const int gauge2X = 245, gauge2Y = 120;
const int radius = 75;
const int needleLength = radius - 20;

float currentValue1 = 0;
float currentValue2 = 0;
float previousAngle1 = -60;
float previousAngle2 = -60;

void setup() {
  Serial.begin(115200);
  dht.begin();
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(ILI9341_BLACK);
  fixedLabel();

  drawGaugeBackground(gauge1X, gauge1Y, -20, 80);
  drawGaugeBackground(gauge2X, gauge2Y, 0, 100);

  drawNeedle(gauge1X, gauge1Y, currentValue1, -20, 80, previousAngle1);
  drawNeedle(gauge2X, gauge2Y, currentValue2, 0, 100, previousAngle2);
  showValue(gauge1X, gauge1Y, currentValue1);
  showValue(gauge2X, gauge2Y, currentValue2);
}

void loop() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  delay(250);

  float val1=t;
  float val2=h;
  updateNeedle(gauge1X, gauge1Y, val1, -20, 80, previousAngle1);
  updateNeedle(gauge2X, gauge2Y, val2, 0, 100, previousAngle2);

}

void drawGaugeBackground(int cx, int cy, int minVal, int maxVal) {
  for (int i = -60; i <= 240; i++) {
    float a = radians(i);
    int x = cx + cos(a) * radius;
    int y = cy - sin(a) * radius;
    tft.drawPixel(x, y, ILI9341_WHITE);
  }

  for (int i = minVal; i <= maxVal; i += 2) {
    float angle = map(i, minVal, maxVal, 240, -60); //-60,240
    float aRad = radians(angle);
    int x0 = cx + cos(aRad) * (radius - 10);
    int y0 = cy - sin(aRad) * (radius - 10);
    int x1 = cx + cos(aRad) * radius;
    int y1 = cy - sin(aRad) * radius;

    uint16_t color = (i % 10 == 0) ? ILI9341_BLUE : ILI9341_GREEN;
    tft.drawLine(x0, y0, x1, y1, color);

    if (i % 10 == 0) {
      int lx = cx + cos(aRad) * (radius - 30);
      int ly = cy - sin(aRad) * (radius - 30);
      tft.setCursor(lx - 10, ly - 7);
      tft.setTextColor(ILI9341_WHITE);
      tft.setTextSize(1);
      tft.print(i);
    }
  }
}

void drawNeedle(int cx, int cy, float value, int minVal, int maxVal, float &prevAngle) {
  float angle = map(value, minVal, maxVal, 240, -60);  //-60, 240
  float aRad = radians(angle);
  int x = cx + cos(aRad) * needleLength;
  int y = cy - sin(aRad) * needleLength;

  // Erase old needle
  float prevRad = radians(prevAngle);
  int px = cx + cos(prevRad) * needleLength;
  int py = cy - sin(prevRad) * needleLength;
  tft.drawLine(cx, cy, px, py, ILI9341_BLACK);

  // Draw new needle
  tft.drawLine(cx, cy, x, y, ILI9341_RED);
  prevAngle = angle;
}

void showValue(int cx, int cy, float value) {
  tft.fillRect(cx - 30, cy + 80, 60, 20, ILI9341_BLACK);
  tft.setCursor(cx - 25, cy + 80);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setTextSize(2);
  tft.print(value, 1);
}

void updateNeedle(int cx, int cy, float value, int minVal, int maxVal, float &prevAngle) {
  drawNeedle(cx, cy, value, minVal, maxVal, prevAngle);
  showValue(cx, cy, value);
}

void fixedLabel() {
  tft.setCursor(gauge1X-18,gauge1Y+50);
  tft.setTextColor(ILI9341_GREEN);
  tft.setTextSize(1);
  tft.print(""DEG C"");

  tft.setCursor(gauge2X-12,gauge2Y+50);
  tft.setTextColor(ILI9341_GREEN);
  tft.setTextSize(1);
  tft.print(""%RH"");

}"
prek5YeX,Untitled,kirzecy670,MySQL,Monday 19th of May 2025 02:45:22 AM CDT,"-- Пользователи ('Adult'), которые находятся в круге, по крайней мере, с 1 взрослым и 1 ребенком
eligible_users AS (
    SELECT c_adults.user_id
    FROM (
        SELECT circle_id, user_id
        FROM circles.circle_member
        WHERE user_role = 'Adult'
    ) AS c_adults
    INNER JOIN (
        SELECT DISTINCT circle_id
        FROM circles.circle_member
        WHERE user_role = 'Child'
    ) AS c_children USING(circle_id)
),"
wjJ5iSvs,Points in Segments,yeskendir_sultanov,C++,Monday 19th of May 2025 01:36:11 AM CDT,"#include <bits/stdc++.h>
using namespace std;

int testCnt;

void solve(int tc) {
    cout << ""Case "" << tc << "":"" << endl;
    int n, q;
    cin >> n >> q;
    vector<pair<pair<int, int>, int>> b;
    for (int i = 0; i < n; ++i) {
        int l, r;
        cin >> l >> r;
        b.push_back({{l, 0}, i});
        b.push_back({{r, 2}, i});
    }
    for (int i = 0; i < q; ++i) {
        int x;
        cin >> x;
        b.push_back({{x, 1}, i});
    }
    
    sort(b.begin(), b.end());
    vector<int> ans(q);
    
    int cur = 0;
    
    for (auto x : b) {
        int p = x.first.first;
        int type = x.first.second;
        int id = x.second;
        if (type == 0) {
            cur++;
        } else if (type == 1) {
            ans[id] = cur;
        } else {
            cur--;
        }
    }
    
    for (int i = 0; i < q; ++i) {
        cout << ans[i] << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cin >> testCnt;
    for (int tc = 1; tc <= testCnt; ++tc) {
        solve(tc);
    }
    return 0;
}

"
kX6Exd6L,Untitled,SheridanCoriana6,JavaScript,Monday 19th of May 2025 12:50:25 AM CDT,"javascript:(function(){let currentElement=null,undoStack=[],highlightElement=(e)=>{e.stopPropagation();e.preventDefault();if(currentElement&&currentElement!==e.target){currentElement.style.outline='none';currentElement.style.boxShadow='none';}currentElement=e.target;currentElement.style.outline='5px solid red';currentElement.style.outlineOffset='-5px';currentElement.style.boxShadow='0 0 10px yellow';},removeElement=(e)=>{e.stopPropagation();e.preventDefault();if(currentElement){let parent=currentElement.parentNode;let nextSibling=currentElement.nextSibling;undoStack.push({element:currentElement,parent:parent,nextSibling:nextSibling});currentElement.remove();currentElement=null;}},undoDelete=()=>{if(undoStack.length){let {element,parent,nextSibling}=undoStack.pop();if(nextSibling){parent.insertBefore(element,nextSibling);}else{parent.appendChild(element);}element.style.outline='none';element.style.boxShadow='none';currentElement=element;}},keyHandler=(e)=>{if(e.key==='Escape'){cleanup();}else if(e.ctrlKey&&e.key==='z'){e.preventDefault();undoDelete();}},cleanup=()=>{document.removeEventListener('mouseover',highlightElement,true);document.removeEventListener('click',removeElement,true);document.removeEventListener('keydown',keyHandler,true);if(currentElement){currentElement.style.outline='none';currentElement.style.boxShadow='none';currentElement=null;}undoStack.forEach(({element})=>{element.style.outline='none';element.style.boxShadow='none';});undoStack=[];};document.addEventListener('mouseover',highlightElement,true);document.addEventListener('click',removeElement,true);document.addEventListener('keydown',keyHandler,true);})();"
tkzArCMr,The Importance of a Well-Designed Grocery Delivery App Script,simonharris12,C,Monday 19th of May 2025 12:38:31 AM CDT,"In recent years, the grocery delivery landscape has undergone a revolutionary transformation, driven by advancements in technology and shifting consumer preferences. As more people turn to mobile applications for their shopping needs, the demand for well-designed grocery delivery apps has surged. A thoughtfully crafted app script not only enhances user experience but also streamlines operational efficiency, ultimately leading to increased customer satisfaction and loyalty. 

This article delves into the significance of a well-designed grocery delivery app script, examining key features, user experience, technological innovations, and security considerations that together create a successful platform for both consumers and businesses alike.

More link: https://app-clone.com/grocery-delivery-app/
"
baeWyLfA,"Patient-Focused Vein Care at USA Vein Clinics in Overland Park, KS",usveinclinics,HTML,Monday 19th of May 2025 12:21:57 AM CDT,"Visit USA Vein Clinics, where our experienced vein doctors offer advanced, non-surgical treatments for varicose veins and spider veins. Conveniently located near you, our Overland Park vein center provides personalized care using minimally invasive procedures like EVLT and sclerotherapy. We focus on relieving leg pain, heaviness, and swelling while restoring healthy circulation. Schedule a consultation today and take the first step toward better vein health.
https://www.usaveinclinics.com/company/locations/kansas/office/overland-park/
"
RFkR3HNp,Untitled,jcofer555,Bash,Monday 19th of May 2025 12:05:35 AM CDT,"#!/bin/bash
# A script to clear an unRAID array drive.  It first checks the drive is completely empty,
# except for a marker indicating that the user desires to clear the drive.  The marker is
# that the drive is completely empty except for a single folder named 'clear-me'.
#
# Array must be started, and drive mounted.  There's no other way to verify it's empty.
# Without knowing which file system it's formatted with, I can't mount it.
#
# Quick way to prep drive: format with ReiserFS, then add 'clear-me' folder.
#
# 1.0  first draft
# 1.1  add logging, improve comments
# 1.2  adapt for User.Scripts, extend wait to 60 seconds
# 1.3  add progress display; confirm by key (no wait) if standalone; fix logger
# 1.4  only add progress display if unRAID version >= 6.2

version=""1.4""
marker=""clear-me""
found=0
wait=60
p=${0%%$P}              # dirname of program
p=${p:0:18}
q=""/tmp/user.scripts/""

echo -e ""*** Clear an unRAID array data drive ***  v$version\n""

# Check if array is started
ls /mnt/disk[1-9]* 1>/dev/null 2>/dev/null
if [ $? -ne 0 ]
then
   echo ""ERROR:  Array must be started before using this script""
   exit
fi

# Look for array drive to clear
n=0
echo -n ""Checking all array data drives (may need to spin them up) ... ""
if [ ""$p"" == ""$q"" ] # running in User.Scripts
then
   echo -e ""\n""
   c=""<font color=blue>""
   c0=""</font>""
else #set color teal
   c=""\x1b[36;01m""
   c0=""\x1b[39;49;00m""
fi

for d in /mnt/disk[1-9]*
do
   #echo -e ""ls -A d:$d\n""
   x=`ls -A $d`
   #echo $x
   #echo -e ""d:""$d ""x:""${x:0:20}

   # the test for marker
   if [ ""$x"" == ""$marker"" ]
   then
        z=`du -s $d`
        y=${z:0:1}
        #echo -e ""d:""$d ""x:""${x:0:20} ""y:""$y ""z:""$z
        # the test for emptiness
        if [ ""$y"" == ""0"" ]
        then
            found=1
            #echo -e ""d:""$d ""is empty and has the 'clear-me' marker""
            break
        fi
   fi
   let n=n+1
done

#echo -e ""found:""$found ""d:""$d ""marker:""$marker ""z:""$z ""n:""$n

# No drives found to clear
if [ $found == ""0"" ]
then
   echo -e ""\rChecked $n drives, did not find an empty drive ready and marked for clearing!\n""
   echo ""To use this script, the drive must be completely empty first, no files""
   echo ""or folders left on it.  Then a single folder should be created on it""
   echo ""with the name 'clear-me', exactly 8 characters, 7 lowercase and 1 hyphen.""
   echo ""This script is only for clearing unRAID data drives, in preparation for""
   echo ""removing them from the array.  It does not add a Preclear signature.""
   exit
fi

# check unRAID version
v1=`cat /etc/unraid-version`
v2=""${v1:9:1}""
if [[ $v2 -ge 7 ]]
then
    v="" status=progress""
else
    v2=""${v1:9:1}${v1:11:2}""
    if [[ $v2 -ge 610 ]]
    then
       v="" status=progress""
    else
       v=""""
    fi
fi
#echo -e ""v1=$v1  v2=$v2  v=$v\n""

# First, warn about the clearing, and give them a chance to abort
echo -e ""\rFound a marked and empty drive to clear: $c Disk ${d:9} $c0 ( $d ) ""
echo -e ""* Disk ${d:9} will be unmounted first.""
echo ""* Then zeroes will be written to the entire drive.""
echo ""* Parity will be preserved throughout.""
echo ""* Clearing while updating Parity takes a VERY long time!""
echo ""* The progress of the clearing will not be visible until it's done!""
echo ""* When complete, Disk ${d:9} will be ready for removal from array.""
echo -e ""* Commands to be executed:\n***** $c umount $d $c0\n***** $c dd bs=1M if=/dev/zero of=/dev/md${d:9}p1 $v $c0\n""
if [ ""$p"" == ""$q"" ] # running in User.Scripts
then
   echo -e ""You have $wait seconds to cancel this script (click the red X, top right)\n""
   sleep $wait
else
   echo -n ""Press ! to proceed. Any other key aborts, with no changes made. ""
   ch=""""
   read -n 1 ch
   echo -e -n ""\r                                                                  \r""
   if [ ""$ch"" != ""!"" ];
   then
      exit
   fi
fi

# Perform the clearing
logger -tclear_array_drive ""Clear an unRAID array data drive  v$version""
echo -e ""\rUnmounting Disk ${d:9} ...""
logger -tclear_array_drive ""Unmounting Disk ${d:9}  (command: umount $d ) ...""
umount $d
echo -e ""Clearing   Disk ${d:9} ...""
logger -tclear_array_drive ""Clearing Disk ${d:9}  (command: dd bs=1M if=/dev/zero of=/dev/md${d:9}p1 $v ) ...""
dd bs=1M if=/dev/zero of=/dev/md${d:9}p1 $v
#logger -tclear_array_drive ""Clearing Disk ${d:9}  (command: dd bs=1M if=/dev/zero of=/dev/md${d:9}p1 status=progress count=1000 seek=1000 ) ...""
#dd bs=1M if=/dev/zero of=/dev/md${d:9}p1 status=progress count=1000 seek=1000

# Done
logger -tclear_array_drive ""Clearing Disk ${d:9} is complete""
echo -e ""\nA message saying \""error writing ... no space left\"" is expected, NOT an error.\n""
echo -e ""Unless errors appeared, the drive is now cleared!""
echo -e ""Because the drive is now unmountable, the array should be stopped,""
echo -e ""and the drive removed (or reformatted).""
exit"
tDSQ1xZh,Untitled,xConquerPS,Lua,Sunday 18th of May 2025 09:47:51 PM CDT,"local PufferODPakManager = {}
local StringUtil = require(""common.string_util"")
local PufferConst = require(""client.slua.logic.download.puffer_const"")
local ModuleManager = require(""client.module_framework.ModuleManager"")
local Client = _ENV.Client
local PufferDownloader = _ENV.PufferDownloader
local PufferQueue

function PufferODPakManager:DefineAndResetData()
  self.ODPaks = {}
  self.PakDatas = {}
  self.itemToPaks = {}
  self.itemToItems = {}
  self.itemToPaths = {}
  self.battleDownloadPaks = {}
  self.BlackListPaks = {}
  self.PauseDontAutoDownloadPaks = {}
  self.ODPaksNameToConHash = {}
  self.needRecoverBattleData = false
  self.battleDeleteFiles = {}
  self._attachmentSkinIDInited = false
  self._attachmentSkinIDMap = nil
  PufferQueue = ModuleManager.GetModule(ModuleManager.CommonModuleConfig.PufferQueue)
  local ScriptHelperEngine = import(""ScriptHelperEngine"")
  self.isLowMemoryDevice = ScriptHelperEngine.IsLowMemoryDevice()
end

function PufferODPakManager:InitODPaks(existPaks)
  local val = HDmpveRemote.HDmpveRemoteConfigGetInt(""GEnableBackpackPakCache"", 0)
  local minMemorySize = HDmpveRemote.HDmpveRemoteConfigGetInt(""GForceDisableBackpackPakCacheMem"", 0)
  local ScriptHelperClient = import(""ScriptHelperClient"")
  local curMemorySize = ScriptHelperClient.GetMemorySize()
  log(bWriteLog and ""PufferODPakManager:InitODPaks. size = "" .. tostring(curMemorySize) .. "" minMemory = "" .. tostring(minMemorySize))
  if 0 < minMemorySize and minMemorySize > curMemorySize then
    val = 0
  end
  PufferDownloader.SetEnableBackpackCache(val)
  log(""PufferODPakManager:InitODPaks start"")
  self:DefineAndResetData()
  local IsDevelopment = Client.IsDevelopment()
  self.enableSaveODPakDataToFile = HDmpveRemote.HDmpveRemoteConfigGetBool(""GSaveODPakDataToFile"", false)
  local pufferFileList = PufferDownloader.GetPufferFileListJson()
  self:MapContentHashPro(pufferFileList.conhash_list)
  if pufferFileList.ODPaks == nil or next(pufferFileList.ODPaks) == nil then
    log(""PufferODPakManager:InitODPaks PufferFileList.json error"")
    return
  end
  self:InitUGCExpiredDepends()
  local VirtualBundleCfgs = {}
  local VirtualBundlePaks = {}
  local pakInfoTableList = CDataTable.GetTable(""PakInfoTable"")
  for _, packCfg in pairs(pakInfoTableList) do
    local id = packCfg.PakID
    local strID = tostring(id)
    local fileList = {}
    local dataCfg = pufferFileList.ODPaks[strID]
    if dataCfg then
      if not packCfg.IsUGC or packCfg.IsUGC == 0 then
        fileList = dataCfg.fileList
      end
    elseif packCfg.depends ~= """" then
      local dependItems = StringUtil.split(packCfg.depends, "";"")
      for _, v in pairs(dependItems) do
        local itemID = tonumber(v)
        local Paks
        if itemID then
          if self.UGCExpiredDepends and not self.UGCExpiredDepends[itemID] then
            Paks = self:GetPakNamesByItemID(itemID)
          end
        elseif self.UGCExpiredDepends and not self.UGCExpiredDepends[v] then
          Paks = self:GetPakNamesByFeatureID(v)
        end
        if Paks and next(Paks) then
          local virtualCfg = VirtualBundleCfgs[strID]
          if not virtualCfg then
            virtualCfg = {
              paks = {}
            }
            VirtualBundleCfgs[strID] = virtualCfg
          end
          for PakName, _ in pairs(Paks) do
            if not VirtualBundlePaks[PakName] then
              VirtualBundlePaks[PakName] = 1
              virtualCfg.paks[PakName] = 1
            end
          end
        end
      end
    end
    self:InitODPack(fileList, id)
  end
  for ODPackID, v in pairs(pufferFileList.ODPaks) do
    local id = tonumber(ODPackID)
    if not self.ODPaks[id] then
      local fileList = v.fileList
      self:InitODPack(fileList, id)
    end
  end
  log(bWriteLog and ""PufferODPakManager:InitODPaks. handleInitODPack"")
  for virtualPakName, _ in pairs(VirtualBundlePaks) do
    local _, packData = self:GetPackDataByPakName(virtualPakName)
    if packData then
      local data = packData.paks[virtualPakName]
      packData.paks[virtualPakName] = nil
      packData.totalCnt = packData.totalCnt - 1
      packData.totalSize = packData.totalSize - data.tSize
      if data.state == PufferConst.ENUM_DownloadState.Done then
        packData.curCnt = packData.curCnt - 1
        packData.curSize = packData.curSize - data.cSize
      end
    end
  end
  for k, v in pairs(VirtualBundleCfgs) do
    self:InitVirtualODPack(k, v.paks)
  end
  log(bWriteLog and ""PufferODPakManager:InitODPaks. handleVirtualODPack"")
  self:DumpUGCDebugInfo()
  self:UpdatePkgCheckInfo(existPaks)
  self:UpdateExistPaks(existPaks)
  log(""PufferODPakManager:InitODPaks end"")
end

function PufferODPakManager:InitODPack(fileList, id, existPaks)
  if not next(fileList) then
    return
  end
  local data = {}
  self.ODPaks[id] = data
  data.paks = {}
  data.curCnt = 0
  data.totalCnt = #fileList
  data.curSize = 0
  data.totalSize = 0
  local ENUM_DownloadState = PufferConst.ENUM_DownloadState
  data.state = ENUM_DownloadState.Not
  for _, v1 in ipairs(fileList) do
    local TmpPakInfo = StringUtil.split(v1, ""|"")
    local TmpPakInfoNum = #TmpPakInfo
    local pakName = """"
    if 1 <= TmpPakInfoNum then
      pakName = TmpPakInfo[1]
    end
    local pakNameData = {
      tSize = 0,
      cSize = 0,
      state = ENUM_DownloadState.Not
    }
    data.paks[pakName] = pakNameData
    if self.PakDatas[pakName] then
      log(bWriteLog and ""PufferODPakManager:InitODPack. exist pakName: "" .. pakName)
    else
      self.PakDatas[pakName] = {packID = id, data = pakNameData}
    end
    local size = 0
    if 2 <= TmpPakInfoNum then
      size = tonumber(TmpPakInfo[2])
    end
    pakNameData.tSize = size / 1024
    local ConOrgHash = ""0101010101010101010101010101010101010101""
    if 3 <= TmpPakInfoNum then
      ConOrgHash = TmpPakInfo[3]
    end
    self.ODPaksNameToConHash[pakName] = ConOrgHash
    if existPaks and existPaks[pakName] then
      pakNameData.cSize = pakNameData.tSize
      pakNameData.state = ENUM_DownloadState.Done
      data.curCnt = data.curCnt + 1
    end
    data.totalSize = data.totalSize + pakNameData.tSize
  end
  if existPaks then
    self:_UpdatePackDataState(data)
  end
end

function PufferODPakManager:MapContentHashPro(conhash_list)
  local USFEnableUpdatePkgMapType = HDmpveRemote.HDmpveRemoteConfigGetInt(""USFEnableUpdatePkgMapType"", 0)
  if USFEnableUpdatePkgMapType == 0 then
    log(bWriteLog and ""PufferODPakManager:MapContentHashPro return for USFEnableUpdatePkgMapType = "" .. tostring(USFEnableUpdatePkgMapType))
    return
  end
  if conhash_list == nil then
    log(""PufferODPakManager:MapContentHashPro  return for conhash_list == nil"")
    return
  end
  log_tree(""PufferODPakManager:MapContentHashPro conhash_list = "", conhash_list)
  for PkgName, ContentHash in pairs(conhash_list) do
    self.ODPaksNameToConHash[PkgName] = ContentHash
  end
end

function PufferODPakManager:UFSSUpdatePkgMapType(filestate)
  local USFEnableUpdatePkgMapType = HDmpveRemote.HDmpveRemoteConfigGetInt(""USFEnableUpdatePkgMapType"", 0)
  if USFEnableUpdatePkgMapType == 0 then
    log(bWriteLog and ""PufferODPakManager:UFSSUpdatePkgMapType return for UFSSUpdatePkgMapType = "" .. tostring(USFEnableUpdatePkgMapType))
    return
  end
  local IsDiffPkg = false
  local pakName = filestate.filename
  if filestate.diffFilename ~= nil then
    pakName = filestate.diffFilename
    local TmpPath = Client.ProjectSavedDir() .. ""Paks/"" .. pakName
    log(bWriteLog and ""PufferODPakManager:UFSSUpdatePkgMapType TmpPath = "" .. tostring(TmpPath))
    local TmpArrayData = {}
    table.insert(TmpArrayData, TmpPath)
    Client.USFSCacheSysContextUpdatePkgBinDiff(TmpArrayData)
  else
    pakName = filestate.filename
    log(bWriteLog and ""PufferODPakManager:UFSSUpdatePkgMapType pakName = "" .. tostring(pakName))
    if not Client.IsFileExistInCSCWithCheck(pakName) then
      local TmpPath = Client.ProjectSavedDir() .. ""Paks/"" .. pakName
      log(bWriteLog and ""PufferODPakManager:UFSSUpdatePkgMapType TmpPath = "" .. tostring(TmpPath))
      local TmpArrayData = {}
      table.insert(TmpArrayData, TmpPath)
      log(bWriteLog and ""PufferODPakManager:UFSSUpdatePkgMapType TmpArrayData: "" .. tostring(#TmpArrayData))
      Client.USFSCacheSysContextUpdatePkg(TmpArrayData)
    else
      log(bWriteLog and ""PufferODPakManager:UFSSUpdatePkgMapType skip for Client.IsFileExistInCSCWithCheck pakName: "" .. tostring(pakName))
    end
  end
end

function PufferODPakManager:UpdateExistPaks(existPaks)
  existPaks = existPaks or {}
  local ArrayData = Client.GetPkgsFromDir(true, ""ODPaks"")
  log_tree(""ArrayData = "", ArrayData)
  if ArrayData then
    for i, v in ipairs(ArrayData) do
      existPaks[v] = true
    end
  end
  if PufferDownloader.EnableBackpackCache then
    local UBackpackUtils = import(""BackpackUtils"")
    local startTime = slua.getMiliseconds()
    if UBackpackUtils.SetPaKExistMap then
      UBackpackUtils.SetPaKExistMap(existPaks)
    else
      PufferDownloader.ClearPakPathMap()
      for pakName, _ in pairs(existPaks) do
        log(bWriteLog and ""PufferODPakManager:UpdateExistPaks. pakName = "" .. tostring(pakName))
        PufferDownloader.SetPakExist(pakName, true)
      end
    end
    local costTimeInSet = slua.getMiliseconds() - startTime
    log(bWriteLog and ""PufferODPakManager:UpdateExistPaks. SetPaKExistMap costTime = "" .. tostring(costTimeInSet))
  end
  for packID, data in pairs(self.ODPaks) do
    for pakName, pakNameData in pairs(data.paks) do
      if existPaks[pakName] then
        pakNameData.state = PufferConst.ENUM_DownloadState.Done
        pakNameData.cSize = pakNameData.tSize
        data.curSize = data.curSize + pakNameData.tSize
        data.curCnt = data.curCnt + 1
      end
    end
    self:_UpdatePackDataState(data)
  end
  log(bWriteLog and ""PufferODPakManager:UpdateExistPaks. End"")
end

function PufferODPakManager:InitPretechODPaks(jsonODPaks, existPaks)
  log(""PufferODPakManager:InitPretechODPaks start"")
  if not jsonODPaks then
    return
  end
  for ODPackID, v in pairs(jsonODPaks) do
    self:InitODPack(v.fileList, tonumber(ODPackID), existPaks)
  end
  log(""PufferODPakManager:InitPretechODPaks end"")
end

function PufferODPakManager:InitUGCExpiredDepends()
  log(""PufferODPakManager:InitUGCExpiredDepends start"")
  local CreativeExpiredAssetConfig = require(""GameLua.Mod.CreativeBase.Gameplay.Config.CreativeExpiredAssetConfig"")
  local ModuleManager = require(""client.module_framework.ModuleManager"")
  local PufferUGCPakManager = ModuleManager.GetModule(ModuleManager.CommonModuleConfig.puffer_ugcpak_manager)
  self.UGCExpiredDepends = {}
  for AssetID, _ in pairs(CreativeExpiredAssetConfig.CurVersionExpiredAssetSet) do
    local dependPackArray, minDepends = PufferUGCPakManager:GetDepends(AssetID)
    if next(minDepends) then
      for k, v in pairs(minDepends) do
        self.UGCExpiredDepends[v] = true
        log(""PufferODPakManager:InitUGCExpiredDepends  Expired Depend = "" .. tostring(v) .. "" AssetID = "" .. tostring(AssetID))
      end
    end
  end
end

function PufferODPakManager:InitVirtualODPack(id, paks)
  id = tonumber(id)
  local packData = {}
  self.ODPaks[id] = packData
  packData.paks = {}
  packData.curCnt = 0
  packData.totalCnt = 0
  packData.curSize = 0
  packData.totalSize = 0
  packData.state = PufferConst.ENUM_DownloadState.Not
  packData.isVirtual = true
  for pakName, _ in pairs(paks) do
    packData.totalCnt = packData.totalCnt + 1
    local pakData = self.PakDatas[pakName]
    if pakData then
      pakData.packID = id
    else
      log(bWriteLog and ""PufferODPakManager:InitVirtualODPack. pakName = "" .. tostring(pakName))
      pakData = {
        data = {
          tSize = 0,
          state = PufferConst.ENUM_DownloadState.Not,
          cSize = 0
        },
        packID = id
      }
      self.PakDatas[pakName] = pakData
    end
    packData.totalSize = packData.totalSize + pakData.data.tSize
    packData.paks[pakName] = pakData.data
  end
end

function PufferODPakManager:_UpdatePackDataState(packData)
  if not packData then
    return
  end
  if packData.curCnt == packData.totalCnt then
    packData.state = PufferConst.ENUM_DownloadState.Done
  elseif packData.curCnt > 0 then
    packData.state = PufferConst.ENUM_DownloadState.Pause
  else
    packData.state = PufferConst.ENUM_DownloadState.Not
  end
end

function PufferODPakManager:IsIllegalTimeByODPackID(ODPackID)
  local RecommendHandler = require(""client.slua.logic.download.recommend.logic_recommend_handler"")
  if not RecommendHandler.PaksDownloadTime or not next(RecommendHandler.PaksDownloadTime) then
    return true
  end
  if not self.ODPaks[ODPackID] then
    return false
  end
  local FBI = require(""client.slua.logic.fbi.logic_fbi"")
  for pakName, v in pairs(self.ODPaks[ODPackID].paks) do
    if FBI.IsIllegalTime(pakName) then
      return true
    end
  end
  return false
end

function PufferODPakManager:JumpODPack(ODPackID)
  local PufferSwitch = require(""client.slua.logic.download.puffer_switch"")
  local ui_manager = require(""client.slua_ui_framework.manager"")
  if ui_manager.IsAndroidStackEmpty() and PufferSwitch.ODPackDownloadFinishPopUpSwitch then
    local canPop = true
    if GameStatus.GetGameStatus() == GameStatus.Fighting then
      canPop = false
    end
    local ODPackCfg = CDataTable.GetTableData(""PakInfoTable"", ODPackID)
    if ODPackCfg and ODPackCfg.DownloadFinishTipsID > 0 and canPop then
      local jumpInfo = {}
      jumpInfo.texturePath = ""/Game/UMG/Texture/Lobby_NoAtlas/UnknowPass/Koi/Koi_Tips_icon_Chicken.Koi_Tips_icon_Chicken""
      
      function jumpInfo.callback()
        if ODPackID == PufferConst.EODPackID.SocialLobby then
          local logic_lobby_social_scene = require(""client.slua.logic.lobby.Left.logic_lobby_social_scene"")
          logic_lobby_social_scene.MoveToPage(ENUM_LobbyPageType.Left)
        else
          GlobalData.JumpUrl(ODPackCfg.JumpURL)
        end
      end
      
      local function cancelCallback()
        PufferSwitch.ODPackDownloadFinishPopUpSwitch = false
      end
      
      jumpInfo.cancelCallback = cancelCallback
      local content = LocUtil.LocalizeResFormat(ODPackCfg.DownloadFinishTipsID)
      local RightPopSystem = require(""client.slua.logic.lobby_popui.logic_right_popup"")
      RightPopSystem.ShowPopupTip(content, true, false, jumpInfo, 10)
    else
    end
  end
end

function PufferODPakManager:GetStateByKeyList(downloadType, keyList, bSkipDepends, bSkipVidepDepends)
  local resultState = PufferConst.ENUM_DownloadState.Done
  if Client.bEditorSkipDownload then
    return resultState
  end
  if not keyList then
    return resultState
  end
  for i, v in pairs(keyList) do
    local state = PufferConst.ENUM_DownloadState.Done
    if downloadType == PufferConst.ENUM_DownloadType.ODPAK then
      local typeV = type(v)
      if typeV == ""number"" then
        state = self:GetStateByItemID(v)
      elseif typeV == ""string"" then
        if StringUtil.starts(v, PufferConst.ODPAKS_RELATIVE_DIR) then
          state = self:GetStateByPakName(v)
        elseif self:GetPakNamesByFeatureID(v) then
          local pakName = next(self:GetPakNamesByFeatureID(v))
          state = self:GetStateByPakName(pakName)
        else
          state = self:GetStateByPath(v)
        end
      end
    elseif downloadType == PufferConst.ENUM_DownloadType.ODPACK then
      state = self:GetStateByPackID(v)
    end
    local curPriority = PufferConst.DownloadStatePriority[state]
    local prePriority = PufferConst.DownloadStatePriority[resultState]
    if curPriority and prePriority and curPriority > prePriority then
      resultState = state
    end
  end
  return resultState
end

function PufferODPakManager:GetStateByPakName(pakName, skipCache)
  if Client.bEditorSkipDownload then
    return PufferConst.ENUM_DownloadState.Done
  end
  if pakName == nil or pakName == """" then
    return PufferConst.ENUM_DownloadState.Done
  end
  if pakName == PufferConst.CE_LOCK_PAKNAME then
    return PufferConst.ENUM_DownloadState.Done
  end
  if pakName == PufferConst.LOCK_PAKNAME then
    return PufferConst.ENUM_DownloadState.Done
  end
  local state = PufferConst.ENUM_DownloadState.Done
  if not skipCache then
    local pakNameData = self:GetPakDataByPakName(pakName)
    if pakNameData then
      state = pakNameData.state
      if state == PufferConst.ENUM_DownloadState.Done then
        return PufferConst.ENUM_DownloadState.Done
      end
    end
  end
  if PufferQueue:GetDownloadingTask(pakName) then
    return PufferConst.ENUM_DownloadState.Download
  end
  if PufferQueue:GetWaitTask(pakName) then
    return PufferConst.ENUM_DownloadState.Wait
  end
  if state ~= PufferConst.ENUM_DownloadState.Done then
    return state
  end
  local isPakExist = PufferDownloader.GetPakExist(pakName, skipCache)
  if isPakExist then
    return PufferConst.ENUM_DownloadState.Done
  end
  return PufferConst.ENUM_DownloadState.Not
end

function PufferODPakManager:GetStateByPath(path)
  if Client.bEditorSkipDownload then
    return PufferConst.ENUM_DownloadState.Done
  end
  if path == nil or path == """" then
    return PufferConst.ENUM_DownloadState.Done
  end
  local PufferManager = require(""client.slua.logic.download.puffer.puffer_manager"")
  local pakName = PufferManager.GetPakName(path)
  return self:GetStateByPakName(pakName)
end

function PufferODPakManager:GetStateByItemID(itemID)
  if Client.bEditorSkipDownload then
    return PufferConst.ENUM_DownloadState.Done
  end
  itemID = tonumber(itemID)
  if not itemID or itemID <= 0 then
    return PufferConst.ENUM_DownloadState.Done
  end
  if self.itemToPaks[itemID] and self.itemToPaks[itemID].state == PufferConst.ENUM_DownloadState.Done then
    return PufferConst.ENUM_DownloadState.Done
  end
  local paks = self:GetPakNamesByItemID(itemID)
  local state = PufferConst.ENUM_DownloadState.Done
  for pakName, _ in pairs(paks) do
    local tempState = self:GetStateByPakName(pakName)
    if PufferConst.DownloadStatePriority[tempState] > PufferConst.DownloadStatePriority[state] then
      state = tempState
    end
    if state == PufferConst.ENUM_DownloadState.Download then
      break
    end
  end
  self.itemToPaks[itemID].state = state
  return state
end

function PufferODPakManager:RestStateByItemID(itemID)
  log(bWriteLog and string.format(""PufferODPakManager:RestStateByItemID. itemID=%s"", tostring(itemID)))
  if not itemID then
    return
  end
  local state = PufferConst.ENUM_DownloadState.Done
  local paks = self:GetPakNamesByItemID(itemID)
  for pakName, _ in pairs(paks) do
    local pakState = self:GetStateByPakName(pakName, true)
    if pakState ~= PufferConst.ENUM_DownloadState.Done then
      state = PufferConst.ENUM_DownloadState.Not
    end
    local pufferPakData = self:GetPakDataByPakName(pakName)
    if pufferPakData then
      pufferPakData.state = pakState
    end
  end
  log(bWriteLog and ""PufferODPakManager:RestStateByItemID. fix state = "" .. tostring(state))
  self.itemToPaks[itemID].state = state
end

function PufferODPakManager:GetStateByPackID(packID)
  if Client.bEditorSkipDownload then
    return PufferConst.ENUM_DownloadState.Done
  end
  local pack = self.ODPaks[packID]
  if not pack then
    if not PufferDownloader.PufferJsonDownloadReturn and not Client.IsEditor() then
      return PufferConst.ENUM_DownloadState.Not
    end
    return PufferConst.ENUM_DownloadState.Done
  end
  if pack.curCnt == pack.totalCnt then
    pack.state = PufferConst.ENUM_DownloadState.Done
  end
  return pack.state
end

function PufferODPakManager:GetPakNamesByItemID(itemID)
  if Client.bEditorSkipDownload then
    return {}, {}
  end
  if not itemID or itemID == 0 then
    return {}, {}
  end
  local PufferManager = require(""client.slua.logic.download.puffer.puffer_manager"")
  if self.itemToPaks[itemID] and self.itemToPaks[itemID].paks then
    return self.itemToPaks[itemID].paks
  end
  self.itemToPaks[itemID] = {}
  self.itemToPaks[itemID].paks = {}
  local list = self:GetBPPathsByItemID(itemID)
  for _, v in pairs(list) do
    local pakName = PufferManager.GetPakName(v)
    if pakName ~= """" then
      self.itemToPaks[itemID].paks[pakName] = true
    end
  end
  if CDataTable.GetTableData(""WeaponDIYList"", itemID) and self.ODPaks[PufferConst.EODPackID.DIY] then
    for i, v in pairs(self.ODPaks[PufferConst.EODPackID.DIY].paks) do
      self.itemToPaks[itemID].paks[i] = true
      log(bWriteLog and string.format(""PufferODPakManager:GetPakNamesByItemID diy pak:%s"", i))
    end
  end
  return self.itemToPaks[itemID].paks
end

function PufferODPakManager:GetPakNamesByFeatureID(featureID)
  if not featureID or featureID == """" then
    return nil
  end
  local PufferManager = require(""client.slua.logic.download.puffer.puffer_manager"")
  if self.itemToPaks[featureID] and self.itemToPaks[featureID].paks then
    return self.itemToPaks[featureID].paks
  end
  local FeatureAssetPathTable = CDataTable.GetTableData(""FeatureAssetPathTable"", featureID)
  if not FeatureAssetPathTable then
    return nil
  end
  local BPPath = FeatureAssetPathTable.Path
  if not BPPath or BPPath == """" then
    return nil
  end
  self.itemToPaks[featureID] = {}
  self.itemToPaks[featureID].paks = {}
  local pakName = """"
  local StringUtil = require(""common.string_util"")
  if StringUtil.ends(BPPath, "".mp4"") then
    pakName = PufferManager.GetPakNameByVideoPath(BPPath)
  else
    pakName = PufferManager.GetPakName(BPPath)
  end
  if pakName ~= """" then
    self.itemToPaks[featureID].paks[pakName] = true
  else
    log(bWriteLog and ""pakName is nil, BPPath = "" .. BPPath)
  end
  return self.itemToPaks[featureID].paks
end

function PufferODPakManager:GetPakNamesByODPakID(ODPackD)
  if not ODPackD or ODPackD == 0 then
    return {}
  end
  if self.ODPaks[ODPackD] and self.ODPaks[ODPackD].paks then
    return self.ODPaks[ODPackD].paks
  end
  return {}
end

function PufferODPakManager:GetIconPathsByItemID(itemID, pathList)
  pathList = pathList or {}
  if not itemID or itemID <= 0 then
    return pathList
  end
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if itemCfg then
    if itemCfg.ItemSmallIcon and itemCfg.ItemSmallIcon ~= """" then
      table.insert(pathList, itemCfg.ItemSmallIcon)
    end
    if itemCfg.ItemSubType == ENUM_ITEM_SUBTYPE.Bubble_Emote then
      local cfg = CDataTable.GetTableData(""IngameBubbleCfg"", itemID)
      if cfg and cfg.BubbleEffectIcon and cfg.BubbleEffectIcon ~= """" then
        table.insert(pathList, cfg.BubbleEffectIcon)
      end
    end
  end
  local rareCfg = CDataTable.GetTableData(""RareItemCfg"", itemID)
  if rareCfg then
    if rareCfg.Path and rareCfg.Path ~= """" then
      table.insert(pathList, rareCfg.Path)
    end
    if rareCfg.PathIcon and rareCfg.PathIcon ~= """" then
      table.insert(pathList, rareCfg.PathIcon)
    end
    if rareCfg.CornerPath and rareCfg.CornerPath ~= """" then
      table.insert(pathList, rareCfg.CornerPath)
    end
  end
  local posterCfg = CDataTable.GetTableData(""RareItemSharePosterList"", itemID)
  if posterCfg and posterCfg.Poster and posterCfg.Poster ~= """" then
    table.insert(pathList, posterCfg.Poster)
  end
  local vehicleAppliqueCfg = CDataTable.GetTableData(""VehicleAppliqueCfg"", itemID)
  if vehicleAppliqueCfg and vehicleAppliqueCfg.AppliquePath and vehicleAppliqueCfg.AppliquePath ~= """" then
    table.insert(pathList, vehicleAppliqueCfg.AppliquePath)
  end
  return pathList
end

function PufferODPakManager:GetBPPathsByItemID(itemID)
  local BPMapping = self:_GetRelatedItems(itemID)
  local list = {}
  for _, v in pairs(BPMapping) do
    local id = tonumber(v)
    local path = self:GetItemBPPathByItemID(id)
    if path and path ~= """" then
      table.insert(list, path)
    end
    local JKPath = self:GetJKItemBPPathByItemID(id)
    if JKPath and JKPath ~= """" then
      table.insert(list, JKPath)
    end
    local lobbyPath = self:_GetItemLobbyPathByBPID(id)
    if lobbyPath and lobbyPath ~= """" then
      table.insert(list, lobbyPath)
    end
    local HighPathList = self:_GetItemHighPathByBPID(id)
    if HighPathList and next(HighPathList) then
      for key, _path in pairs(HighPathList) do
        if _path and _path ~= """" then
          table.insert(list, _path)
        end
      end
    end
    local mapCfg = CDataTable.GetTableData(""BPMappingTable"", id)
    if mapCfg and mapCfg.ActorMapping and mapCfg.ActorMapping ~= """" then
      local actorIDMap = StringUtil.split(mapCfg.ActorMapping, ""|"")
      local ActorVoiceSystem = require(""client.slua.logic.actor_voice.logic_actor_voice"")
      for i, actorIDStr in pairs(actorIDMap) do
        local actorID = tonumber(actorIDStr)
        if actorID and 0 < actorID then
          local bankPath = ActorVoiceSystem.GetBankPathByActorID(actorID)
          if bankPath and bankPath ~= """" then
            table.insert(list, bankPath)
          end
        end
      end
    end
    local fxData = CDataTable.GetTableData(""AvatarWeaponHitFXData"", id)
    if fxData and fxData.EffectPath ~= """" then
      table.insert(list, fxData.EffectPath)
    end
    list = self:GetIconPathsByItemID(id, list)
  end
  local BPMappingTable = CDataTable.GetTableData(""BPMappingTable"", itemID)
  if BPMappingTable and BPMappingTable.DependPath and BPMappingTable.DependPath ~= """" then
    local StringUtil = require(""common.string_util"")
    local arrDependPaths = StringUtil.split(BPMappingTable.DependPath, ""|"")
    for _, v in pairs(arrDependPaths) do
      if v and v ~= """" then
        table.insert(list, v)
      end
    end
  end
  list = self:GetIconPathsByItemID(itemID, list)
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if itemCfg and itemCfg.ItemType == ENUM_ITEM_TYPE.Home then
    local cfg = CDataTable.GetTableData(""PlanPH_StructureItemCfg"", itemID)
    if cfg and cfg.BPPath then
      table.insert(list, cfg.BPPath)
    end
    cfg = CDataTable.GetTableData(""PlanPH_DecorateItemCfg"", itemID)
    if cfg and cfg.BPPath then
      table.insert(list, cfg.BPPath)
      if cfg.DependBPPath and cfg.DependBPPath ~= """" then
        table.insert(list, cfg.DependBPPath)
      end
    end
    cfg = CDataTable.GetTableData(""PlanPH_WallpaperItemCfg"", itemID)
    if cfg and cfg.MatPath then
      table.insert(list, cfg.MatPath)
    end
  end
  if itemCfg and itemCfg.ItemType == ENUM_ITEM_TYPE.CYCLE_Memory_Item and itemCfg.ItemSubType == ENUM_ITEM_SUBTYPE.Aid_Gift then
    local logic_send_gift = require(""client.slua.logic.gift.logic_send_gift"")
    local giftData = logic_send_gift.GetGiftDataByResID(itemID)
    if giftData then
      table.insert(list, giftData.GiftAni)
    end
  end
  return list
end

function PufferODPakManager:CheckAutoDownloadByItemID(itemID)
  itemID = tonumber(itemID)
  if not itemID or itemID <= 0 then
    return false
  end
  local paks = self:GetPakNamesByItemID(itemID)
  local isAuto = false
  for pakName, _ in pairs(paks) do
    if self:CheckAutoDownloadByPakName(pakName) then
      isAuto = true
      break
    end
  end
  return isAuto
end

function PufferODPakManager:CheckAutoDownloadByPakName(pakName)
  if pakName == """" then
    return false
  end
  if pakName == PufferConst.CE_LOCK_PAKNAME then
    return false
  end
  if pakName == PufferConst.LOCK_PAKNAME then
    return false
  end
  return PufferQueue:CheckAutoDownloadTask(pakName)
end

function PufferODPakManager:GetSizeByKeyList(downloadType, keyList, bSkipDepends)
  local curSize = 0
  local totalSize = 0
  if not keyList then
    return curSize, totalSize
  end
  if downloadType == PufferConst.ENUM_DownloadType.ODPAK and 1 < #keyList then
    local bAllItemID = true
    for i, v in pairs(keyList) do
      if type(v) ~= ""number"" then
        bAllItemID = false
        break
      end
    end
    if bAllItemID then
      return self:GetSizeByItemIDList(keyList)
    end
  end
  for i, v in pairs(keyList) do
    if downloadType == PufferConst.ENUM_DownloadType.ODPAK then
      if type(v) == ""number"" then
        local cSize, tSize = self:GetSizeByItemID(v)
        curSize = curSize + cSize
        totalSize = totalSize + tSize
      elseif StringUtil.starts(v, PufferConst.ODPAKS_RELATIVE_DIR) then
        local cSize, tSize = self:GetSizeByPakName(v)
        curSize = curSize + cSize
        totalSize = totalSize + tSize
      elseif self:GetPakNamesByFeatureID(v) then
        local pakName = next(self:GetPakNamesByFeatureID(v))
        local cSize, tSize = self:GetSizeByPakName(pakName)
        curSize = curSize + cSize
        totalSize = totalSize + tSize
      else
        local cSize, tSize = self:GetSizeByPath(v)
        curSize = curSize + cSize
        totalSize = totalSize + tSize
      end
    elseif downloadType == PufferConst.ENUM_DownloadType.ODPACK then
      local cSize, tSize = self:GetSizeByPackID(v)
      curSize = curSize + cSize
      totalSize = totalSize + tSize
    end
  end
  return curSize, totalSize
end

function PufferODPakManager:GetSizeByItemIDList(itemIDList)
  local cSize = 0
  local tSize = 0
  local allPaks = {}
  for i, v in pairs(itemIDList) do
    local paks = self:GetPakNamesByItemID(v)
    for pakName, _ in pairs(paks) do
      allPaks[pakName] = true
    end
  end
  for pakName, _ in pairs(allPaks) do
    local flag = false
    local pakData = self:GetPakDataByPakName(pakName)
    if pakData then
      flag = true
      cSize = cSize + pakData.cSize * PufferConst.MB
      tSize = tSize + pakData.tSize * PufferConst.MB
    end
    if not flag then
      tSize = tSize + PufferDownloader.GetFileSizeCompressed(GameFrontendHUD, pakName, true)
    end
  end
  return cSize, tSize
end

function PufferODPakManager:GetSizeByItemID(itemID)
  local cSize = 0
  local tSize = 0
  local paks = self:GetPakNamesByItemID(itemID)
  for pakName, _ in pairs(paks) do
    local flag = false
    local pakData = self:GetPakDataByPakName(pakName)
    if pakData then
      flag = true
      cSize = cSize + pakData.cSize * PufferConst.MB
      tSize = tSize + pakData.tSize * PufferConst.MB
    end
    if not flag then
      tSize = tSize + PufferDownloader.GetFileSizeCompressed(GameFrontendHUD, pakName, true)
    end
  end
  if self:GetStateByItemID(itemID) == PufferConst.ENUM_DownloadState.Done then
    cSize = tSize
  end
  return cSize, tSize
end

function PufferODPakManager:GetSizeByPath(path)
  local PufferManager = require(""client.slua.logic.download.puffer.puffer_manager"")
  local cSize, tSize = 0, 0
  local pakName = PufferManager.GetPakName(path)
  cSize, tSize = self:GetSizeByPakName(pakName)
  return cSize, tSize
end

function PufferODPakManager:GetSizeByPakName(pakName)
  local cSize, tSize = 0, 0
  if pakName == nil or pakName == """" then
    return 0, 0
  end
  local pakNameData = self:GetPakDataByPakName(pakName)
  if pakNameData then
    cSize = pakNameData.cSize * PufferConst.MB
    tSize = pakNameData.tSize * PufferConst.MB
  end
  if tSize == 0 then
    tSize = PufferDownloader.GetFileSizeCompressed(GameFrontendHUD, pakName, true)
    local MinSize = PufferConst.MB * 0.1
    if tSize == 0 then
      tSize = MinSize
    end
  end
  if self:GetStateByPakName(pakName) == PufferConst.ENUM_DownloadState.Done then
    cSize = tSize
  end
  return cSize, tSize
end

function PufferODPakManager:GetSizeByPackID(packID)
  local pack = self.ODPaks[packID]
  if not pack then
    return 0, 0
  end
  return pack.curSize, pack.totalSize
end

function PufferODPakManager:GetAllODPakCurSize(skipIDs)
  local curSize = 0
  local totalSize = 0
  local state = PufferConst.ENUM_DownloadState.Done
  for packID, v in pairs(self.ODPaks) do
    if not skipIDs or not skipIDs[packID] then
      curSize = curSize + v.curSize
      totalSize = totalSize + v.totalSize
      if v.curSize > v.totalSize then
        log(bWriteLog and ""PufferODPakManager:GetAllODPakCurSize. packID = "" .. tostring(packID))
      end
      local curPriority = PufferConst.DownloadStatePriority[v.state]
      local prePriority = PufferConst.DownloadStatePriority[state]
      if curPriority and prePriority and curPriority > prePriority then
        state = v.state
      end
    end
  end
  log(bWriteLog and string.format(""PufferODPakManager:GetAllODPakCurSize. curSize=%s, totalSize=%s, state=%s"", tostring(curSize), tostring(totalSize), tostring(state)))
  return curSize, totalSize, state
end

function PufferODPakManager:ResetPakData(pakName)
  local deleteSize = 0
  PufferDownloader.ClearPakCache(pakName)
  if self.needRecoverBattleData then
    self.battleDeleteFiles[pakName] = true
  else
    local ENUM_DownloadState = PufferConst.ENUM_DownloadState
    local packID, packData = self:GetPackDataByPakName(pakName)
    if packID and packData then
      local pakData = packData.paks[pakName]
      if pakData then
        if pakData.state == ENUM_DownloadState.Done then
          if 0 < packData.curCnt then
            packData.curCnt = packData.curCnt - 1
            packData.curSize = packData.curSize - pakData.tSize
            deleteSize = deleteSize + pakData.tSize
          end
          if packData.curCnt == 0 then
            packData.curSize = 0
            packData.state = ENUM_DownloadState.Not
          elseif packData.curCnt < packData.totalCnt then
            packData.state = ENUM_DownloadState.Pause
          end
          pakData.state = ENUM_DownloadState.Not
        end
        pakData.cSize = 0
        pakData.haveDeleted = true
      end
    end
  end
  return deleteSize
end

function PufferODPakManager:RemovePakData(pakName)
  log(bWriteLog and string.format(""PufferODPakManager:RemovePakData. pakName=%s"", tostring(pakName)))
  local packID, packData = self:GetPackDataByPakName(pakName)
  if packID and packData then
    local pakData = packData.paks[pakName]
    if pakData then
      local subFinishCnt = 0
      if pakData.state == PufferConst.ENUM_DownloadState.Done then
        subFinishCnt = 1
      end
      packData.curCnt = packData.curCnt - subFinishCnt
      packData.totalCnt = packData.totalCnt - 1
      packData.curSize = packData.curSize - pakData.cSize
      packData.totalSize = packData.totalSize - pakData.tSize
      log(bWriteLog and ""PufferODPakManager:RemovePakData. packData.curCnt = "" .. tostring(packData.curCnt))
      log(bWriteLog and ""PufferODPakManager:RemovePakData. packData.totalCnt = "" .. tostring(packData.totalCnt))
      if packData.curCnt == packData.totalCnt then
        packData.state = PufferConst.ENUM_DownloadState.Done
      end
      self.PakDatas[pakName] = nil
    end
  end
end

function PufferODPakManager:GetItemBPPathByItemID(itemID)
  if self.itemToPaths[itemID] and self.itemToPaths[itemID] ~= """" then
    return self.itemToPaths[itemID]
  end
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if not itemCfg then
    local ActorVoiceSystem = require(""client.slua.logic.actor_voice.logic_actor_voice"")
    local bankPath = ActorVoiceSystem.GetBankPathByActorID(itemID)
    if bankPath then
      self.itemToPaths[itemID] = bankPath
      return bankPath
    end
    return nil
  end
  local ID = itemID
  if itemCfg.BPID > 0 and itemCfg.BPID ~= itemID then
    ID = itemCfg.BPID
  end
  local bpCfg = CDataTable.GetTableData(""AvatarBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.AvatarBPPath
    return bpCfg.AvatarBPPath
  end
  bpCfg = CDataTable.GetTableData(""WeaponDIYList"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.MeshPath
    return bpCfg.MeshPath
  end
  bpCfg = CDataTable.GetTableData(""WeaponBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""PlaneBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""VehicleBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""ConsumableBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""EmoteBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""PetDressBlueprintTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""CareerBPTable"", ID)
  if bpCfg then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""GiftBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.GiftAniPath
    return bpCfg.GiftAniPath
  end
  bpCfg = CDataTable.GetTableData(""HallThemeItem"", ID)
  if bpCfg then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""EffectItemBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""PetSwitchEffectBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""3DIconBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""DecalBPTable"", ID)
  if bpCfg ~= nil then
    self.itemToPaths[itemID] = bpCfg.Path
    return bpCfg.Path
  end
  if itemCfg.ItemSubType == ENUM_ITEM_SUBTYPE.Voice_Pack or itemCfg.ItemSubType == ENUM_ITEM_SUBTYPE.Electronic_Eecord then
    local ActorVoiceSystem = require(""client.slua.logic.actor_voice.logic_actor_voice"")
    local path = ActorVoiceSystem.GetBankPath(itemID)
    self.itemToPaths[itemID] = path
    return path
  end
  return nil
end

function PufferODPakManager:GetJKItemBPPathByItemID(itemID)
  local PublishRegionMacros = require(""client.slua.config.ClientMacros.PublishRegionMacros"")
  if not PublishRegionMacros.IsJapanOrKorea() then
    return
  end
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if not itemCfg then
    return
  end
  local ID = itemCfg.JKBPID
  if ID == 0 or ID == itemCfg.BPID or ID == nil then
    return
  end
  local bpCfg = CDataTable.GetTableData(""AvatarBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.AvatarBPPath
  end
  bpCfg = CDataTable.GetTableData(""WeaponDIYList"", ID)
  if bpCfg ~= nil then
    return bpCfg.MeshPath
  end
  bpCfg = CDataTable.GetTableData(""WeaponBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""PlaneBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""VehicleBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""ConsumableBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""EmoteBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""PetDressBlueprintTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""CareerBPTable"", ID)
  if bpCfg then
    return bpCfg.Path
  end
  bpCfg = CDataTable.GetTableData(""HallThemeItem"", ID)
  if bpCfg then
    return bpCfg.Path
  end
  return nil
end

function PufferODPakManager:_InitAttachmentSkinIDListCache()
  if self._attachmentSkinIDInited then
    return
  end
  log(bWriteLog and ""PufferODPakManager:_InitAttachmentSkinIDListCache."")
  self._attachmentSkinIDMap = {}
  self._attachmentSkinIDInited = true
  local cfgs = CDataTable.GetTable(""WeaponAttrBPTable"")
  for BPID, cfg in pairs(cfgs) do
    local list = self:_GetAttachmentSkinIDListByConfig(cfg)
    self._attachmentSkinIDMap[BPID] = list
  end
end

function PufferODPakManager:_GetAttachmentSkinIDListByConfig(cfg)
  if cfg == nil then
    return nil
  end
  local idList = {}
  if cfg.AttachmentSkinIDList and cfg.AttachmentSkinIDList ~= """" then
    for i, v in pairs(StringUtil.split(cfg.AttachmentSkinIDList, ""|"")) do
      local attachmentSkinID = StringUtil.split(v, ""-"")[2]
      table.insert(idList, tonumber(attachmentSkinID))
    end
  end
  if cfg.PendantID > 0 then
    table.insert(idList, cfg.PendantID)
  end
  if cfg.DeadInventoryBoxIDs and cfg.DeadInventoryBoxIDs ~= """" then
    for i, v in pairs(StringUtil.split(cfg.DeadInventoryBoxIDs, ""|"")) do
      table.insert(idList, tonumber(v))
    end
  end
  if not next(idList) then
    idList = nil
  end
  return idList
end

function PufferODPakManager:_GetAttachmentSkinIDList(BPID)
  if self.isLowMemoryDevice then
    local cfg = CDataTable.GetTableData(""WeaponAttrBPTable"", BPID)
    return cfg and self:_GetAttachmentSkinIDListByConfig(cfg)
  else
    self:_InitAttachmentSkinIDListCache()
    return self._attachmentSkinIDMap and self._attachmentSkinIDMap[BPID]
  end
end

function PufferODPakManager:_GetRelatedItems(itemID, bNotMapping)
  if self.itemToItems[itemID] then
    return self.itemToItems[itemID]
  end
  local depend = {}
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if not itemCfg then
    if CDataTable.GetTableData(""VoiceActorCfg"", itemID) then
      self.itemToItems[itemID] = {itemID}
      return {itemID}
    end
    return depend
  end
  local ModuleManager = require(""client.module_framework.ModuleManager"")
  local ItemUpgradeMgr = ModuleManager.GetModule(ModuleManager.LobbyModuleConfig.ItemUpgradeManager)
  local upgradeCfgList = ItemUpgradeMgr:GetUpgradeGroupByItemID(itemID)
  local attachmentSkinIDList = self:_GetAttachmentSkinIDList(itemCfg.BPID)
  local BackpackMappingCfg = CDataTable.GetTableData(""BackpackMapping"", itemID)
  if BackpackMappingCfg then
    depend[BackpackMappingCfg.SkinItemIDLv1] = true
    depend[BackpackMappingCfg.SkinItemIDLv2] = true
    depend[BackpackMappingCfg.SkinItemIDLv3] = true
    depend[BackpackMappingCfg.LobbyShowItemID] = true
  elseif upgradeCfgList and next(upgradeCfgList) then
    local upgradeItemID = 0
    for _, v in pairs(upgradeCfgList) do
      if upgradeItemID == 0 then
        upgradeItemID = v.itemID
      end
      depend[v.ItemID] = true
      local list = self:_GetAttachmentSkinIDList(v.ItemID)
      if list then
        for _, vv in pairs(list) do
          depend[vv] = true
        end
      end
    end
    local groupID = ItemUpgradeMgr:GetUpgradeCfg(upgradeItemID).GroupID
    groupID = ItemUpgradeMgr:GetNormalGroupID(groupID)
    log(bWriteLog and string.format(""PufferODPakManager:_GetRelatedItems groupdId=%s"", tostring(groupID)))
    local partIDList = ItemUpgradeMgr:GetPartIDList(groupID)
    local isCanSetRefitCfg = ItemUpgradeMgr:IsCanSetRefitCfgTableInfo(groupID)
    for _, partID in pairs(partIDList) do
      if isCanSetRefitCfg then
        local diffColorPartID = ItemUpgradeMgr:PartIDSwitch(partID, true)
        if diffColorPartID ~= partID and diffColorPartID then
          depend[diffColorPartID] = true
        end
      end
      depend[partID] = true
    end
    if isCanSetRefitCfg then
      local refitCfg = ItemUpgradeMgr:GetRefitCfgData(groupID)
      if refitCfg and refitCfg.refitGroupID then
        local refitUpgradeCfgList = ItemUpgradeMgr:GetUpgradeGroupByID(refitCfg.refitGroupID)
        if refitUpgradeCfgList then
          for _, v in pairs(refitUpgradeCfgList) do
            depend[v.ItemID] = true
            local list = self:_GetAttachmentSkinIDList(v.ItemID)
            if list then
              for _, vv in pairs(list) do
                depend[vv] = true
              end
            end
          end
        end
      end
    end
  elseif attachmentSkinIDList then
    for i, v in pairs(attachmentSkinIDList) do
      depend[v] = true
    end
  end
  local cfg = CDataTable.GetTableData(""WeaponSkinMapping"", itemID)
  if cfg then
    depend[cfg.WeaponID] = true
  end
  cfg = CDataTable.GetTableData(""VehiclePlaneSkinMapping"", itemID)
  if cfg then
    depend[cfg.OrginalID] = true
  end
  cfg = CDataTable.GetTableData(""AvatarSuitsTable"", itemID)
  if cfg then
    for _, v in pairs(StringUtil.split(cfg.MaleSuits, ""|"")) do
      local id = tonumber(v)
      if id and 0 < id then
        depend[id] = true
      end
    end
    for _, v in pairs(StringUtil.split(cfg.FemaleSuits, ""|"")) do
      local id = tonumber(v)
      if id and 0 < id then
        depend[id] = true
      end
    end
  end
  local featuresItem = CDataTable.GetTableData(""FeaturesItems"", itemID)
  if featuresItem then
    local VersionUtil = require(""client.common.version_util"")
    local versionNum = VersionUtil.GetCurVersionNumber()
    local features = StringUtil.split(featuresItem.Features, "";"")
    for _, v in ipairs(features) do
      if v then
        local featureCfg = CDataTable.GetTableData(""FeaturesConfig"", tonumber(v))
        if featureCfg then
          if featureCfg.ExpressionID and 0 < featureCfg.ExpressionID then
            depend[featureCfg.ExpressionID] = true
          end
          if featureCfg.EnterExpressionID and 0 < featureCfg.EnterExpressionID and featureCfg.EnterExpressionID ~= featureCfg.ExpressionID then
            depend[featureCfg.EnterExpressionID] = true
          end
          if featureCfg.FightExpressionID and 0 < featureCfg.FightExpressionID and featureCfg.FightExpressionID ~= featureCfg.EnterExpressionID then
            depend[featureCfg.FightExpressionID] = true
          end
        end
      end
    end
  end
  cfg = CDataTable.GetTableData(""EmoteBPTable"", itemID)
  if cfg and cfg.LobbyEmoteAdapt ~= """" then
    for _, v in pairs(StringUtil.split(cfg.LobbyEmoteAdapt, ""|"")) do
      local id = tonumber(v)
      if id and 0 < id then
        depend[id] = true
      end
    end
  end
  local LogicGoldenSuit = require(""client.slua.logic.golden_suit.logic_golden_suit"")
  local period = LogicGoldenSuit.GetPeriodByItemId(itemID)
  if period then
    local goldList = LogicGoldenSuit.GetItemIDListByPeriod(period)
    for _, v in pairs(goldList) do
      depend[v] = true
    end
    local CallStatueActionIDMap = {
      [3] = 12219840,
      [4] = 12219841,
      [5] = 12219842
    }
    local actionID = CallStatueActionIDMap[period]
    if actionID then
      depend[actionID] = true
    end
  end
  local SpecialGlideID = LogicGoldenSuit.GetSpecialGlideID(itemID)
  depend[SpecialGlideID] = true
  local logic_pet = ModuleManager.GetModule(ModuleManager.CommonModuleConfig.logic_pet)
  local PetID = logic_pet:GetAssociatedPetID(itemID)
  if PetID then
    depend[PetID] = true
    local petDependRes = logic_pet:GetPetDependResource(PetID)
    if petDependRes then
      for _, v in pairs(petDependRes) do
        depend[v] = true
      end
    end
  end
  local UpVehicleModule = ModuleManager.GetModule(ModuleManager.LobbyModuleConfig.UpVehicle)
  local carItemIDS = UpVehicleModule:GetAssociatedCars(itemID)
  if carItemIDS then
    for _, v in pairs(carItemIDS) do
      depend[v] = true
    end
  end
  local ModuleManager = require(""client.module_framework.ModuleManager"")
  local LogicMultiItemModule = ModuleManager.GetModule(ModuleManager.LobbyModuleConfig.LogicMultiItemModule)
  local MultiList = LogicMultiItemModule:GetMultiListByItemID(itemID)
  for key, value in pairs(MultiList) do
    if value then
      depend[value.ItemID] = true
    end
  end
  local VehiclePlateLicenseUtil = require(""GameLua.Activity.Commercialize.GamePlay.Vehicle.VehiclePlateLicenseUtil"")
  local vehicleItems = VehiclePlateLicenseUtil.GetDownLoadList(itemID)
  if vehicleItems then
    for _, v in pairs(vehicleItems) do
      depend[v] = true
    end
  end
  local logic_emote = require(""GameLua.Mod.Library.GamePlay.Avatar.Emote.logic_emote"")
  local MileStoneDownloadList = logic_emote.GetMileStoneDownloadList(itemID)
  if MileStoneDownloadList then
    for ItemID, v in pairs(MileStoneDownloadList) do
      if ItemID and 0 < ItemID then
        depend[ItemID] = true
      end
    end
  end
  local LogicParticleEmote = ModuleManager.GetModule(ModuleManager.LobbyModuleConfig.LogicParticleEmote)
  if LogicParticleEmote:IsParticleEmote(itemID) then
    local HighLevelEmoteID = LogicParticleEmote:GetParticleEmoteID(itemID)
    depend[HighLevelEmoteID] = true
  elseif LogicParticleEmote:Is2LevelParticleEmote(itemID) then
    local BaseEmoteID = LogicParticleEmote:GetBaseID(itemID)
    depend[BaseEmoteID] = true
  end
  cfg = CDataTable.GetTableData(""VehiclePlaneSkinMapping"", itemID)
  if cfg and cfg.OrginalID then
    depend[cfg.OrginalID] = true
  end
  if not bNotMapping then
    cfg = CDataTable.GetTableData(""BPMappingTable"", itemID)
    if cfg and cfg.BPMapping and cfg.BPMapping ~= """" then
      local MapList = StringUtil.split(cfg.BPMapping, ""|"")
      for i, v in pairs(MapList) do
        local id = tonumber(v)
        if id and 0 < id then
          depend[id] = true
          local tmpList = self:_GetRelatedItems(id, true)
          for _, vTmp in pairs(tmpList) do
            local idTmp = tonumber(vTmp)
            if idTmp and 0 < idTmp then
              depend[idTmp] = true
            end
          end
        end
      end
    end
  end
  depend[itemID] = true
  local list = {}
  for i, _ in pairs(depend) do
    table.insert(list, i)
  end
  if not bNotMapping then
    self.itemToItems[itemID] = list
  end
  return list
end

function PufferODPakManager:_GetItemLobbyPathByBPID(itemID)
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if not itemCfg then
    return nil
  end
  local ID = itemID
  if itemCfg.BPID > 0 and itemCfg.BPID ~= itemID then
    ID = itemCfg.BPID
  end
  local bpCfg = CDataTable.GetTableData(""AvatarBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  bpCfg = CDataTable.GetTableData(""WeaponBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  bpCfg = CDataTable.GetTableData(""PlaneBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  bpCfg = CDataTable.GetTableData(""VehicleBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  bpCfg = CDataTable.GetTableData(""ConsumableBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  bpCfg = CDataTable.GetTableData(""EmoteBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  bpCfg = CDataTable.GetTableData(""EffectItemBPTable"", ID)
  if bpCfg ~= nil then
    return bpCfg.LobbyPath
  end
  return nil
end

function PufferODPakManager:_GetItemHighPathByBPID(itemID)
  local itemCfg = CDataTable.GetTableData(""Item"", itemID)
  if not itemCfg then
    return nil
  end
  local ID = itemID
  if itemCfg.BPID > 0 and itemCfg.BPID ~= itemID then
    ID = itemCfg.BPID
  end
  local bpCfg = CDataTable.GetTableData(""AvatarBPTable"", ID)
  if bpCfg ~= nil and 0 < bpCfg.DeviceLevel then
    local TCDeviceLevel = Client.GetTCDeviceLevel()
    if TCDeviceLevel >= bpCfg.DeviceLevel then
      local list = {}
      table.insert(list, bpCfg.AvatarBPPathHigh)
      table.insert(list, bpCfg.LobbyPathHigh)
      return list
    end
  end
  return {}
end

function PufferODPakManager:GetPakIDAndSizeByPakName(pakName)
  if pakName == nil or pakName == """" then
    return nil, 0
  end
  for k, v in pairs(self.ODPaks) do
    if v.paks[pakName] then
      return k, v.paks[pakName].tSize
    end
  end
  return nil, 0
end

function PufferODPakManager:DumpUGCDebugInfo()
  if not bWriteLog then
    return
  end
  local str = """"
  for packID, v1 in pairs(self.ODPaks) do
    if v1.isVirtual then
      str = str .. string.format(""PufferODPakManager:DumpUGCDebugInfo begin ---------------- packID:%s,curSize:%.2f,totalSize:%.2f,done:%s\n"", tostring(packID), v1.curSize, v1.totalSize, tostring(v1.state == 3))
      for pakName, v2 in pairs(v1.paks) do
        str = str .. string.format(""PufferODPakManager:DumpUGCDebugInfo packID:%s,pakName:%s,curSize:%.2f,totalSize:%.2f,done:%s\n"", tostring(packID), pakName, v2.cSize, v2.tSize, tostring(v2.state == 3))
      end
    end
  end
  log(str)
  str = """"
  for itemID, Paks in pairs(self.itemToPaks) do
    str = str .. ""UGCPAKInfo,ItemID:"" .. tostring(itemID) .. "" , Paks : {""
    for pakName, _ in pairs(Paks.paks) do
      str = str .. pakName .. "",""
    end
    str = str .. ""}\n""
  end
  log(str)
  return str
end

function PufferODPakManager:UpdateLocalPkgIntoCSC(existPaks)
  if not Client.USFSIsNewestVersion() then
    log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC return for not Client.USFSIsNewestVersion()"")
    return
  end
  local UpdateLocalPkgOnceCount = HDmpveRemote.HDmpveRemoteConfigGetInt(""UpdateLocalPkgOnceCount"", 0)
  if UpdateLocalPkgOnceCount <= 0 then
    log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC return for UpdateLocalPkgOnceCount <= 0"")
    return
  end
  log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC beg UpdateLocalPkgOnceCount: "" .. UpdateLocalPkgOnceCount)
  existPaks = existPaks or {}
  local TmpArrayData = {}
  for pakName, _ in pairs(existPaks) do
    if string.find(pakName, "".pak"") then
      local FilePath = Client.ProjectSavedDir() .. ""Paks/"" .. pakName
      if not Client.IsFileExistInCSCWithCheck(pakName) then
        log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC collect local FilePath: "" .. FilePath)
        table.insert(TmpArrayData, FilePath)
      else
        log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC existPaks pakName: "" .. pakName)
      end
      if UpdateLocalPkgOnceCount <= #TmpArrayData then
        break
      end
    end
  end
  if #TmpArrayData then
    log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC USFSCacheSysContextUpdatePkg TmpArrayData: "" .. tostring(#TmpArrayData))
    Client.USFSCacheSysContextUpdatePkg(TmpArrayData)
  end
  log(bWriteLog and ""PufferODPakManager:UpdateLocalPkgIntoCSC end"")
end

function PufferODPakManager:UpdatePkgCheckInfo(existPaks)
  local CacheSysContextStartSwitch = HDmpveRemote.HDmpveRemoteConfigGetInt(""USFSCacheSysContextStart"", 0)
  if CacheSysContextStartSwitch == 0 then
    return
  end
  log(bWriteLog and ""PufferODPakManager:UpdatePkgCheckInfo beg"")
  local PufferODPakDelList = {
    ""ODPaks/fff3aff29028cff62c90d6205d2a9882df19d569.pak"",
  }
  local USFSKickoutPkgName = HDmpveRemote.HDmpveRemoteConfigGetString(""USFSKickoutPkgName"", """")
  local tempList = StringUtil.split(USFSKickoutPkgName, "","")
  for _, KickPkgInfo in pairs(tempList) do
    local PkgName = KickPkgInfo
    if string.find(KickPkgInfo, ""/Game/"") then
      PkgName = GCPufferDownloader.GetODPakName(Puffer, KickPkgInfo)
    else
      PkgName = ""ODPaks/"" .. KickPkgInfo .. "".pak""
    end
    if self.ODPaksNameToConHash[PkgName] then
      self.ODPaksNameToConHash[PkgName] = ""0202020202020202020202020202020202020202""
      log(""PufferODPakManager:InitODPack Kickout: "" .. PkgName .. "" "" .. self.ODPaksNameToConHash[PkgName])
    end
  end
  local ScriptHelperClient = import(""ScriptHelperClient"")
  local data = ScriptHelperClient.LoadFileToArrayByFullPath(Client.ProjectDir() .. ""Config/CommCRC.ini"")
  if data then
    local StringUtil = require(""common.string_util"")
    data = StringUtil.split(data, ""\n"")
    for _, Info in pairs(data) do
      local PkgName = string.gsub(Info, ""[\n\r]"", """")
      PkgName = ""ODPaks/"" .. PkgName .. "".pak""
      if self.ODPaksNameToConHash[PkgName] then
        self.ODPaksNameToConHash[PkgName] = ""0202020202020202020202020202020202020202""
        log(""PufferODPakManager:InitODPack CommCRC.ini Kickout: "" .. PkgName .. "" "" .. self.ODPaksNameToConHash[PkgName])
      end
    end
  end
  for __, PkgName in pairs(PufferODPakDelList) do
    self.ODPaksNameToConHash[PkgName] = ""0202020202020202020202020202020202020202""
    log(""PufferODPakManager:InitODPack PufferODPakDelList Kickout: "" .. PkgName .. "" "" .. self.ODPaksNameToConHash[PkgName])
  end
  local USFSCacheSysContexInit = HDmpveRemote.HDmpveRemoteConfigGetInt(""USFSCacheSysContexInit"", 1)
  if USFSCacheSysContexInit == 1 then
    log(bWriteLog and ""PufferODPakManager:UpdatePkgCheckInfo Client.USFSCacheSysContexInit"")
    Client.USFSCacheSysContexInit(self.ODPaksNameToConHash)
  end
  self.ODPaksNameToConHash = nil
  local ArrayData = {}
  ArrayData[1] = ""ShadowTrackerExtra/Content/Paks/res_cachesyspkgdiffmini_obb.pak""
  Client.USFSCacheSysContextUpdatePkgDiff(ArrayData)
  self:UpdateLocalPkgIntoCSC(existPaks)
  log(bWriteLog and ""PufferODPakManager:UpdatePkgCheckInfo end"")
end

function PufferODPakManager:GetPakDataByPakName(pakName)
  local pakData = self.PakDatas and self.PakDatas[pakName]
  if pakData then
    return pakData.data
  end
  return nil
end

function PufferODPakManager:GetPackDataByPakName(pakName)
  if not pakName then
    return
  end
  local pakData = self.PakDatas[pakName]
  if pakData then
    return pakData.packID, self.ODPaks[pakData.packID]
  end
  return nil, nil
end

function PufferODPakManager:OnDownloadFinish(task, isSuccess, errorCode, IsUGC)
  local pakName = task.pakName
  local ODPackID, packData = self:GetPackDataByPakName(pakName)
  if ODPackID and packData then
    local pakData = packData.paks[pakName]
    if pakData then
      local PufferTlog = require(""client.slua.logic.download.report.puffer_tlog"")
      if isSuccess or errorCode == 1 and not Client.IsDevelopment() then
        pakData.cSize = pakData.tSize
        packData.curSize = packData.curSize + pakData.tSize
        packData.curCnt = packData.curCnt + 1
        pakData.state = PufferConst.ENUM_DownloadState.Done
        if pakData.tSize >= 5 then
          PufferTlog.SendTLog(task.from, PufferTlog.Enum_TLog_Optype.Finish, pakName)
        end
        if packData.curCnt >= packData.totalCnt then
          packData.curCnt = packData.totalCnt
          packData.curSize = packData.totalSize
          packData.state = PufferConst.ENUM_DownloadState.Done
          if not IsUGC then
            PufferDownloader.SetDownloadKeyRecord(ODPackID, true)
            PufferTlog.SendTLog(task.from, PufferTlog.Enum_TLog_Optype.Finish, ODPackID, nil, ODPackID == PufferConst.EODPackID.PREFETCH_ODPACKID)
            local PufferSwitch = require(""client.slua.logic.download.puffer_switch"")
            log(bWriteLog and string.format(""puffer_odpak_downloader:OnDownloadFinish pakName:%s ODPackID:%s"", pakName, ODPackID))
            local ModuleManager = require(""client.module_framework.ModuleManager"")
            local ui_navigation_manager = ModuleManager.GetModule(ModuleManager.CommonModuleConfig.ui_navigation_manager)
            local keyName = ui_navigation_manager:GetTopUIName()
            log(bWriteLog and string.format(""puffer_odpak_downloader:OnDownloadFinish keyName:%s ODPackDownloadFinishPopUpSwitch:%s"", keyName, tostring(PufferSwitch.ODPackDownloadFinishPopUpSwitch)))
            self:JumpODPack(ODPackID)
            log(bWriteLog and string.format(""puffer_odpak_downloader:OnDownloadFinish ODPack:%s"", ODPackID))
          end
        end
      else
        pakData.state = PufferConst.ENUM_DownloadState.Error
      end
    end
  end
end

function PufferODPakManager:HandleEnterFight()
  log(bWriteLog and ""PufferODPakManager:HandleEnterFight. self.enableSaveODPakDataToFile = "" .. tostring(self.enableSaveODPakDataToFile))
  if not self.enableSaveODPakDataToFile then
    return
  end
  self.needRecoverBattleData = true
  self.battleDeleteFiles = {}
  xpcall(self.SaveODPakDataToFile, function()
    log(bWriteLog and ""PufferODPakManager:HandleEnterFight. save error"")
    self.needRecoverBattleData = false
  end, self)
  if self.needRecoverBattleData then
    self:ClearBattleMemory()
  end
end

function PufferODPakManager:HandleExitFight()
  log(bWriteLog and ""PufferODPakManager:HandleExitFight. self.enableSaveODPakDataToFile = "" .. tostring(self.enableSaveODPakDataToFile))
  log(bWriteLog and ""PufferODPakManager:HandleExitFight. self.needRecoverData = "" .. tostring(self.needRecoverBattleData))
  if not self.enableSaveODPakDataToFile or not self.needRecoverBattleData then
    return
  end
  self.needRecoverBattleData = false
  local loadComplete = true
  xpcall(self.LoadODPakDataFromFile, function()
    log(bWriteLog and ""PufferODPakManager:HandleExitFight. load error"")
    loadComplete = false
  end, self)
  if loadComplete and next(self.ODPaks) then
    self:RecoverBattleMemory()
  else
    local ret = GCPufferDownloader.ReturnLocalFiles(PufferDownloader.DOWNLOAD_DIR_RELATIVE .. PufferDownloader.DOWNLOAD_ODPAKS_RELATIVE, """")
    local existPaks = {}
    for _, filename in pairs(ret) do
      existPaks[PufferDownloader.DOWNLOAD_ODPAKS_RELATIVE .. filename] = true
    end
    self:InitODPaks(existPaks)
  end
end

function PufferODPakManager:GetSaveFilePath()
  return ""ODPakData.txt""
end

function PufferODPakManager:SaveODPakDataToFile()
  log(bWriteLog and ""PufferODPakManager:SaveODPakDataToFile."")
  local json = require(""common.json_util"")
  local encode = json.encode(self.ODPaks)
  Client.SaveStringToFile(encode, self:GetSaveFilePath())
  self:ClearBattleMemory()
end

function PufferODPakManager:LoadODPakDataFromFile()
  log(bWriteLog and ""PufferODPakManager:LoadODPakDataFromFile."")
  local path = self:GetSaveFilePath()
  local dataStr = Client.LoadFileToString(path)
  local json = require(""common.json_util"")
  local data = json.decode(dataStr)
  if not data then
    log(bWriteLog and ""PufferODPakManager:LoadODPakDataFromFile. data is nil"")
    return
  end
  log_tree(""PufferODPakManager:LoadODPakDataFromFile. data = "", data)
  for k, v in pairs(data) do
    self.ODPaks[tonumber(k)] = v
  end
  Client.DeleteFile(path)
end

function PufferODPakManager:ClearBattleMemory()
  log(bWriteLog and ""PufferODPakManager:ClearBattleMemory."")
  self.ODPaks = {}
  self.PakDatas = {}
  self.itemToPaks = {}
  self.itemToItems = {}
  self.itemToPaths = {}
end

function PufferODPakManager:RecoverBattleMemory()
  log(bWriteLog and ""PufferODPakManager:RecoverBattleMemory."")
  local begintime = slua.getMiliseconds()
  self.PakDatas = {}
  for packID, v in pairs(self.ODPaks) do
    for pakName, data in pairs(v.paks) do
      self.PakDatas[pakName] = {packID = packID, data = data}
    end
  end
  local deleteFiles = self.battleDeleteFiles
  self.battleDeleteFiles = {}
  for pakName, v in pairs(deleteFiles) do
    self:ResetPakData(pakName)
  end
  local costTime = slua.getMiliseconds() - begintime
  log(bWriteLog and ""PufferODPakManager:RecoverBattleMemory. costTime = "" .. tostring(costTime))
end

function PufferODPakManager:OnPostSwitchGameStatus(pre, next)
  log(bWriteLog and string.format(""PufferODPakManager:OnPostSwitchGameStatus. pre=%s, next=%s"", tostring(pre), tostring(next)))
  if GameStatus.InActualFight() then
    self:HandleEnterFight()
  end
end

function PufferODPakManager:OnPreSwitchGameStatus(pre, next)
  log(bWriteLog and string.format(""PufferODPakManager:OnPreSwitchGameStatus. pre=%s, next=%s"", tostring(pre), tostring(next)))
  if GameStatus.InActualFight() and next ~= GameStatus.Fighting then
    self:HandleExitFight()
  end
end

local class = require(""class"")
local CModuleBase = require(""client.module_framework.ModuleBase"")
local CPufferODPakManager = class(CModuleBase, nil, PufferODPakManager)
return CPufferODPakManager
"
19rWhZr7,BinaryTree,tepyotin2,C++,Sunday 18th of May 2025 09:23:39 PM CDT,"#include <bits/stdc++.h>

using namespace std;

void func(string pre, string in, string &post){
	if(pre.size() == 1){
		post+=pre;
		return;
	}
	int pos = in.find(pre[0]);
	string left = in.substr(0, pos);
	string tl = pre.substr(1, left.size());
	string right = in.substr(pos+1);
	string tr = pre.substr(tl.size()+1);
	//cout << ""pos: "" << pos << '\n';
	//cout << left << "", "" << tl << "", "" << right << "", "" << tr << '\n';
	if(left.size()>0){
		func(tl, left, post);
	}
	if(right.size()>0){
		func(tr, right, post);
	}
	post+=pre[0];
}

int main(){
	//freopen(""binarytree.in"", ""r"", stdin);
	
	string a, b;
	while(cin >> a){
		cin >> b;
		string res = """";
		func(a, b, res);
		cout << res << '\n';
	}
	
	return 0;
}
"
sqcH8V6c,TreeDistanceI,tepyotin2,C++,Sunday 18th of May 2025 09:22:53 PM CDT,"#include <bits/stdc++.h>

using namespace std;

struct Node{
	vector<int> links;
	int depth;
};

int n;
vector<Node> tree;
vector<bool> visited;
int mxd;
int mxn;
vector<int> dist;

void findDepth(int node){
	visited[node] = true;
	//cout << node << "", "" << tree[node].depth << '\n';
	//cout << tree[node].depth << '\n';
	for(auto child: tree[node].links){
		if(!visited[child]){
			tree[child].depth = tree[node].depth+1;
			dist[child] = max(dist[child], tree[child].depth);
			if(tree[child].depth>mxd){
				mxd = tree[child].depth;
				mxn = child;
			}
			findDepth(child);
		}
	}
}

int main(){
	//freopen(""treedistances.in"", ""r"", stdin);
	
	cin >> n;
	tree.resize(n+1);
	visited.resize(n+1);
	dist.resize(n+1);
	int a, b;
	while(cin >> a){
		cin >> b;
		tree[a].links.push_back(b);
		tree[b].links.push_back(a);
	}
	findDepth(1);
	fill(visited.begin(), visited.end(), false);
	//cout << ""=========="" << '\n';
	mxd = 0;
	tree[mxn].depth = 0;
	findDepth(mxn);
	//cout << mxd << '\n';
	fill(visited.begin(), visited.end(), false);
	tree[mxn].depth = 0;
	findDepth(mxn);
	for(int i=1; i<=n; i++){
		cout << dist[i] << '\n';
	}
	 
	return 0;
}
"
kf9NWnUu,DiamterOfTree,tepyotin2,C++,Sunday 18th of May 2025 09:22:03 PM CDT,"#include <bits/stdc++.h>

using namespace std;

struct Node{
	vector<int> links;
	int depth;
};

int n;
vector<Node> tree;
vector<bool> visited;
int mxd;
int mxn;

void findDepth(int node){
	visited[node] = true;
	//cout << node << "", "" << tree[node].depth << '\n';
	//cout << tree[node].depth << '\n';
	for(auto v: tree[node].links){
		if(!visited[v]){
			tree[v].depth = tree[node].depth+1;
			if(tree[v].depth>mxd){
				mxd = tree[v].depth;
				mxn = v;
			}
			findDepth(v);
		}
	}
}

int main(){
	//freopen(""diameter.in"", ""r"", stdin);
	
	cin >> n;
	tree.resize(n+1);
	visited.resize(n+1);
	int a, b;
	while(cin >> a){
		cin >> b;
		tree[a].links.push_back(b);
		tree[b].links.push_back(a);
	}
	findDepth(1);
	fill(visited.begin(), visited.end(), false);
	//cout << ""=========="" << '\n';
	mxd = 0;
	tree[mxn].depth = 0;
	findDepth(mxn);
	cout << mxd << '\n';
	 
	return 0;
}
"
Nr42XAxY,TLW Test Mod,RandomB_oi2,Lua,Sunday 18th of May 2025 09:20:15 PM CDT,"local Rep = game:GetService(""ReplicatedStorage"")
local Framework = shared.Framework

local module = {}
module.__index = module
module.Derives = ""Component""

module.new = function(self)
	local originalColor = self.Object.Color

	self.Maid:GiveTask(task.spawn(function()
		while true do
			self.Object.Color = BrickColor.random().Color
			task.wait(1)
		end
	end))
	self.Maid:GiveTask(function()
		self.Object.Color = originalColor
	end)

	return self
end

Framework.Class.RegisterComponent(""ModdedRainbow"", module)"
4QUQrRxr,Heap,tepyotin2,C++,Sunday 18th of May 2025 09:19:44 PM CDT,"#include <bits/stdc++.h>
using namespace std;
int n;
vector<int> heap;

void print_heap(){
	for(auto i: heap){
		cout << i << "" "";
	}
	cout << '\n';
}

int getParent(int val){
	if(val%2 == 0){
		return (val-2)/2;
	}else{
		return (val-1)/2;
	}
}

void up_heap(int idx){
	if(idx == 0) return;
	int parent = getParent(idx);
	if(heap[parent]>heap[idx]){
		swap(heap[parent], heap[idx]);
		//cout << ""swap: "" << heap[parent] << "", "" << heap[idx] << '\n';
		up_heap(parent);
	}
	return;
	//if(idx%2 == 0){
		//int parent = ()
	//}
	// 8, 7 => 3, 3, 4 => 1
	// 16, 15 => 7, 1, 2 => 0
}

void down_heap(int idx){
	int l = (idx*2)+1;
	int r = (idx*2)+2;
	int mn_idx = idx;
	int size = heap.size();
	if(l<size && heap[l]<heap[mn_idx]){
		mn_idx = l;
	}
	if(r<size && heap[r]<heap[mn_idx]){
		mn_idx = r;
	}
	if(mn_idx != idx){
		swap(heap[idx], heap[mn_idx]);
		down_heap(mn_idx);
	}
}

void del(){
	swap(heap[0], heap[heap.size()-1]);
	heap.pop_back();
	down_heap(0);
}

int main(){
	//freopen(""heap.in"", ""r"", stdin);
	
	cin >> n;
	
	//cout << getParent(15);
	int a, b;
	for(int i=0; i<n; i++){
		cin >> a;
		if(a==1){
			cin >> b;
			//cout << ""b: "" << b << '\n';
			heap.push_back(b);
			up_heap(heap.size()-1);
		}else if(a==2){
			cout << heap[0] << '\n';
		}else if(a==3){
			del();
		}
	}
	//cout << heap.size() << '\n';
	//print_heap();
	//del();
	//cout << ""========"" << '\n';
	//cout << heap.size() << '\n';
	//print_heap();
	
	return 0;
}
"
jX02RsHT,Heap Sorting,tepyotin2,C++,Sunday 18th of May 2025 09:19:14 PM CDT,"#include <bits/stdc++.h>

using namespace std;

int n;
vector<int> heap;

void print_heap(){
	for(auto i: heap){
		cout << i << "" "";
	}
	cout << '\n';
}

void down_heap(int idx, int size){
	int l = (idx*2)+1;
	int r = (idx*2)+2;
	int mx_idx = idx;
	//int size = heap.size();
	if(l<size && heap[l]>heap[mx_idx]){
		//cout << ""HI"" << '\n';
		mx_idx = l;
	}
	if(r<size && heap[r]>heap[mx_idx]){
		mx_idx = r;
	}
	if(mx_idx != idx){
		swap(heap[idx], heap[mx_idx]);
		down_heap(mx_idx, size);
	}
}

int main(){
	//freopen(""heapsorting.in"", ""r"", stdin);
	
	cin >> n;
	heap.resize(n);
	for(int i=0; i<n; i++){
		cin >> heap[i];
	}
	for(int i=n/2-1; i>=0; i--){
		down_heap(i, heap.size());
		//print_heap();
		//cout << ""====="" << '\n';
	}
	for(int i=n-1; i>=0; i--){
		swap(heap[i], heap[0]);
		down_heap(0, i);
		//down_heap(0, i-1); //!!problem cause invalid data
	}
	print_heap();
	
	return 0;
}
"
hVpV4f1e,Median,tepyotin2,C++,Sunday 18th of May 2025 09:18:15 PM CDT,"#include <bits/stdc++.h>

using namespace std;

int n;
priority_queue<int, vector<int>, greater<int>> rv;
priority_queue<int> lv;
long long median;

int main(){
	//freopen(""median.in"", ""r"", stdin);
	
	cin >> n;
	cin >> median;
	cout << median << '\n';
	for(int i=2; i<=n; i++){
		int v;
		cin >> v;
		if(v>median){
			rv.push(v);
		}else{
			lv.push(v);
		}
		if(i%2==1){
			if(rv.size()==lv.size()+2){
				lv.push(median);
				median = rv.top();
				rv.pop();
				//lv.push(rv.top());
				//rv.pop();
			}else if(lv.size()==rv.size()+2){
				rv.push(median);
				median = lv.top();
				lv.pop();
				//rv.push(lv.top());
				//lv.pop();
			}
			//median = lv.top();
			cout << median << '\n';
		}
	}
	
	return 0;
}
"
xG2AzqV9,2025-05-18T21:52:55.249467,powerampache,PHP,Sunday 18th of May 2025 08:52:55 PM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 404
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.TeeDataSource.open(TeeDataSource.java:54)
	at androidx.media3.datasource.cache.CacheDataSource.openNextSource(CacheDataSource.java:802)
	at androidx.media3.datasource.cache.CacheDataSource.open(CacheDataSource.java:615)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:88)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1109)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError Invalid response code 404 - Not Found - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 404 - Not Found
 {""headerFields"":{""null"":[""HTTP/1.1 404 Not Found""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""application/json; charset\u003dUTF-8""],""Date"":[""Mon, 19 May 2025 01:52:54 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d93""],""Server"":[""Apache/2.4.62 (Debian)""],""X-Android-Received-Millis"":[""1747619575164""],""X-Android-Response-Source"":[""NETWORK 404""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1747619575113""]},""responseBody"":[],""responseCode"":404,""responseMessage"":""Not Found"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""http://star-lord.lan:8091/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d811710080ff2ba0c7a475c9e3ada10fd\u0026type\u003dsong\u0026id\u003d1237"",""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 404"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]}"
b3VbQw04,2025-05-18T21:52:52.039082,powerampache,PHP,Sunday 18th of May 2025 08:52:51 PM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 404
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.TeeDataSource.open(TeeDataSource.java:54)
	at androidx.media3.datasource.cache.CacheDataSource.openNextSource(CacheDataSource.java:802)
	at androidx.media3.datasource.cache.CacheDataSource.open(CacheDataSource.java:615)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:88)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1109)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError Invalid response code 404 - Not Found - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 404 - Not Found
 {""headerFields"":{""null"":[""HTTP/1.1 404 Not Found""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""application/json; charset\u003dUTF-8""],""Date"":[""Mon, 19 May 2025 01:52:51 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d97""],""Server"":[""Apache/2.4.62 (Debian)""],""X-Android-Received-Millis"":[""1747619572010""],""X-Android-Response-Source"":[""NETWORK 404""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1747619571922""]},""responseBody"":[],""responseCode"":404,""responseMessage"":""Not Found"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""http://star-lord.lan:8091/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d811710080ff2ba0c7a475c9e3ada10fd\u0026type\u003dsong\u0026id\u003d1237"",""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 404"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]}"
eXWRDMcL,2025-05-18T21:52:48.798487,powerampache,PHP,Sunday 18th of May 2025 08:52:48 PM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.ScrobbleException: {""errorAction"":""record_play"",""errorCode"":""4704"",""errorMessage"":""Not Found: 1237"",""errorType"":""id""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleApiCall(SongsRepositoryImpl.kt:657)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleApiCall(SongsRepositoryImpl.kt:80)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleApiCall$1.invokeSuspend(Unknown Source:15)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:991)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:232)
	at android.os.Looper.loop(Looper.java:317)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:591)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:911)

scrobble() - "
0ZJtwLEN,2025-05-18T21:52:40.465087,powerampache,PHP,Sunday 18th of May 2025 08:52:40 PM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 116"",""errorType"":""filter""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsFromAlbum$2.invokeSuspend(SongsRepositoryImpl.kt:254)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:991)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:232)
	at android.os.Looper.loop(Looper.java:317)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:591)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:911)

getSongsFromAlbum() - {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 116"",""errorType"":""filter""}"
MgXGbx5a,2025-05-18T21:52:36.027039,powerampache,PHP,Sunday 18th of May 2025 08:52:36 PM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""artist_albums"",""errorCode"":""4704"",""errorMessage"":""Not Found: 53"",""errorType"":""filter""}
	at luci.sixsixsix.powerampache2.data.AlbumsRepositoryImpl$getAlbumsFromArtist$2.invokeSuspend(AlbumsRepositoryImpl.kt:247)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:991)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:232)
	at android.os.Looper.loop(Looper.java:317)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:591)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:911)

getAlbumsFromArtist() - {""errorAction"":""artist_albums"",""errorCode"":""4704"",""errorMessage"":""Not Found: 53"",""errorType"":""filter""}"
