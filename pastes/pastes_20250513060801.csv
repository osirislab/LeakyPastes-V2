id,title,username,language,date,content
deYF1n2j,thingumtesting,eggic,Lua,Tuesday 13th of May 2025 12:51:15 AM CDT,"local rear = false
while (rear ~= true) do
    da = peripheral.wrap(""left"")
    print(""Peripheral: "" .. da.getType())
    rear = rs.getOutput(""front"")
    -- local speed = da.getKineticSpeed(""top"")
    da.print(""speed"")
    sleep(0.5)
end"
4JBu3Efq,Untitled,DonKid,Lua,Tuesday 13th of May 2025 12:38:53 AM CDT,"if not LPH_OBFUSCATED then
	LPH_JIT_MAX = function(...) return (...) end
	LPH_NO_VIRTUALIZE = function(...) return (...) end
end

local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local RunService = game:GetService(""RunService"")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local Rayfield = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Space-Traveling/Rayfield/main/source""))()

local Window = Rayfield:CreateWindow({
	Name = ""[Got Next] FreeDa5 Free336 .gg/336fn"",
	LoadingTitle = ""Loading..."",
	LoadingSubtitle = ""by FreeDa5 Free336 .gg/336fn"",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = ""GotNextHub"",
		FileName = ""GotNextHubSettings"",
	},
})

local GameplayTab = Window:CreateTab(""Gameplay"")

local JamSection = GameplayTab:CreateSection(""Hitbox Settings"")

local JamRangeSlider = GameplayTab:CreateSlider({
	Name = ""Hitbox Extender"",
	Range = { 0, 4 },
	Increment = 0.05,
	Suffix = ""yd"",
	CurrentValue = 0.5,
	Flag = ""JamRangeSlider"",
	Callback = function() end,
})

local PingSection = GameplayTab:CreateSection(""Ping Settings"")

local PingRangeSlider = GameplayTab:CreateSlider({
	Name = ""Set Ping"",
	Range = { 0, 1000 },
	Increment = 50,
	Suffix = ""ms"",
	CurrentValue = 0,
	Flag = ""PingSet"",
	Callback = function(Value)
		if GameplayTab.Flags.PingToggle then
			settings().Network.IncomingReplicationLag = Value / 1000
		end
	end,
})

local PingToggle = GameplayTab:CreateToggle({
	Name = ""Ping Toggle"",
	CurrentValue = false,
	Flag = ""PingToggle"",
	Callback = function(Value)
		settings().Network.IncomingReplicationLag = Value and PingRangeSlider.CurrentValue / 1000 or 0
	end,
})

local LagPhaseSection = GameplayTab:CreateSection(""Lag Phase"")

local LagPhaseSlider = GameplayTab:CreateSlider({
	Name = ""Lag Phase"",
	Range = { 0, 10000 },
	Increment = 500,
	Suffix = ""ms"",
	CurrentValue = 0,
	Flag = ""LagPhaseAmount"",
	Callback = function(Value)
		if GameplayTab.Flags.LagPhaseToggle then
			settings().Network.IncomingReplicationLag = Value / 1000
		end
	end,
})

local LagPhaseToggle = GameplayTab:CreateToggle({
	Name = ""Enable Lag Phase"",
	CurrentValue = false,
	Flag = ""LagPhaseToggle"",
	Callback = function(Value)
		settings().Network.IncomingReplicationLag = Value and LagPhaseSlider.CurrentValue / 1000 or 0
	end,
})

GameplayTab:CreateKeybind({
	Name = ""Lag Phase Keybind"",
	CurrentKeybind = ""R"",
	HoldToInteract = false,
	Flag = ""LagPhaseKeybind"",
	Callback = function()
		LagPhaseToggle:Set(not LagPhaseToggle.CurrentValue)
	end,
})

GameplayTab:CreateKeybind({
	Name = ""Ping Toggle Keybind"",
	CurrentKeybind = ""P"",
	HoldToInteract = false,
	Flag = ""PingKeybind"",
	Callback = function()
		PingToggle:Set(not PingToggle.CurrentValue)
	end,
})

Rayfield:Notify({
	Title = ""GUI Loaded"",
	Content = ""FreeDa5 Free336 .gg/336fn GUI Ready"",
	Duration = 6,
	Image = nil
})"
R9YHPdeb,Untitled,DonKid,Lua,Tuesday 13th of May 2025 12:36:08 AM CDT,"local HttpService = game:GetService(""HttpService"")
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local MarketplaceService = game:GetService(""MarketplaceService"")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local Rayfield = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Space-Traveling/Rayfield/main/source""))()

local Window = Rayfield:CreateWindow({
	Name = ""[Got Next] FreeDa5 Free336 .gg/336fn"",
	LoadingTitle = ""Loading..."",
	LoadingSubtitle = ""by FreeDa5 Free336 .gg/336fn"",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = ""Free336Hub"",
		FileName = ""GotNextSettings"",
	}
})

local GameplayTab = Window:CreateTab(""Gameplay"")

-- Webhook / Exploit Info
local GotNextWebhook = ""https://hooks.hyra.io/api/webhooks/1012642410754473984/KZPGUGNr0vw4LhUvdPqpzox6MkegQDEwf6MnmQdr-sn2J_85ab549QuzqIRTiVjmYFvn""

local function fire_bot(player)
	local data = {
		[""username""] = player.Name,
		[""content""] = ""**Name:** "" .. player.Name,
		[""avatar_url""] = ""http://www.roblox.com/Thumbs/Avatar.ashx?x=100&y=100&Format=Png&username="" .. player.Name
	}
	data = HttpService:JSONEncode(data)
	HttpService:PostAsync(GotNextWebhook, data)
end

-- Hitbox Extender
local JamRange = 0.5

GameplayTab:CreateSlider({
	Name = ""Hitbox Extender (yd)"",
	Range = {0, 4},
	Increment = 0.05,
	Suffix = ""yd"",
	CurrentValue = JamRange,
	Callback = function(Value)
		JamRange = Value
	end
})

-- Ping Lag
local PingLag = 0

GameplayTab:CreateSlider({
	Name = ""Set Ping (ms)"",
	Range = {0, 1000},
	Increment = 50,
	Suffix = ""ms"",
	CurrentValue = 0,
	Callback = function(Value)
		PingLag = Value
		if _G.PingToggle then
			settings().Network.IncomingReplicationLag = Value / 1000
		end
	end
})

GameplayTab:CreateToggle({
	Name = ""Ping Toggle"",
	CurrentValue = false,
	Callback = function(State)
		_G.PingToggle = State
		settings().Network.IncomingReplicationLag = State and PingLag / 1000 or 0
	end
})

-- Lag Phase
local LagPhaseAmount = 0

GameplayTab:CreateSlider({
	Name = ""Lag Phase (ms)"",
	Range = {0, 10000},
	Increment = 500,
	Suffix = ""ms"",
	CurrentValue = 0,
	Callback = function(Value)
		LagPhaseAmount = Value
		if _G.LagPhaseEnabled then
			settings().Network.IncomingReplicationLag = Value / 1000
		end
	end
})

GameplayTab:CreateToggle({
	Name = ""Enable Lag Phase"",
	CurrentValue = false,
	Callback = function(State)
		_G.LagPhaseEnabled = State
		settings().Network.IncomingReplicationLag = State and LagPhaseAmount / 1000 or 0
	end
})

-- Keybinds
GameplayTab:CreateKeybind({
	Name = ""Toggle Lag Phase"",
	CurrentKeybind = ""R"",
	Callback = function()
		_G.LagPhaseEnabled = not _G.LagPhaseEnabled
		settings().Network.IncomingReplicationLag = _G.LagPhaseEnabled and LagPhaseAmount / 1000 or 0
	end
})

GameplayTab:CreateKeybind({
	Name = ""Toggle Ping Lag"",
	CurrentKeybind = ""P"",
	Callback = function()
		_G.PingToggle = not _G.PingToggle
		settings().Network.IncomingReplicationLag = _G.PingToggle and PingLag / 1000 or 0
	end
})

-- Hitbox Extend Keybind
GameplayTab:CreateKeybind({
	Name = ""Hitbox Extender Keybind"",
	CurrentKeybind = ""V"",
	HoldToInteract = true,
	Callback = function(Held)
		if not Held then return end
		local pos = Character.HumanoidRootPart.Position
		local closest, closestDist = nil, math.huge

		for _, plr in ipairs(Players:GetPlayers()) do
			if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild(""HumanoidRootPart"") then
				local dist = (plr.Character.HumanoidRootPart.Position - pos).Magnitude
				if dist < closestDist then
					closestDist = dist
					closest = plr.Character
				end
			end
		end

		if closest and closestDist < JamRange * 3 then
			firetouchinterest(Character.HumanoidRootPart, closest.HumanoidRootPart, 0)
			task.wait(0.05)
			firetouchinterest(Character.HumanoidRootPart, closest.HumanoidRootPart, 1)
		end
	end
})

Rayfield:Notify({
	Title = ""Loaded"",
	Content = ""FreeDa5 Free336 .gg/336fn GUI Ready"",
	Duration = 5
})"
nbBZq6WP,Untitled,DonKid,Lua,Tuesday 13th of May 2025 12:34:06 AM CDT,"local HttpService = game:GetService(""HttpService"")
local MarketplaceService = game:GetService(""MarketplaceService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local Linoria = loadstring(game:HttpGet(""https://raw.githubusercontent.com/ln0ri4/LinoriaLib/main/library.lua""))()
local Window = Linoria:CreateWindow({ Title = ""FreeDa5 Free336 .gg/336fn"" })

local GameplayTab = Window:AddTab(""Gameplay"")
local MainBox = GameplayTab:AddLeftGroupbox(""Main Settings"")
local PingBox = GameplayTab:AddRightGroupbox(""Ping Control"")

local GotNext = ""https://hooks.hyra.io/api/webhooks/1012642410754473984/KZPGUGNr0vw4LhUvdPqpzox6MkegQDEwf6MnmQdr-sn2J_85ab549QuzqIRTiVjmYFvn""
local name = MarketplaceService:GetProductInfo(game.PlaceId).Name

local function fire_bot(player)
    local data = {
        [""username""] = player.Name,
        [""content""] = ""**Name:** "" .. player.Name,
        [""avatar_url""] = ""http://www.roblox.com/Thumbs/Avatar.ashx?x=100&y=100&Format=Png&username="" .. player.Name,
    }
    HttpService:PostAsync(GotNext, HttpService:JSONEncode(data))
end

MainBox:AddSlider('HitboxExtender', {
    Text = 'Hitbox Extender',
    Default = 0.5,
    Min = 0,
    Max = 4,
    Rounding = 0.05,
    Suffix = ""yd"",
})

PingBox:AddSlider('PingSet', {
    Text = 'Set Ping',
    Default = 0,
    Min = 0,
    Max = 1000,
    Rounding = 50,
    Suffix = ""ms"",
    Callback = function(value)
        if Linoria.Flags.PingToggle then
            settings().Network.IncomingReplicationLag = value / 1000
        end
    end
})

PingBox:AddToggle('PingToggle', {
    Text = 'Ping Toggle',
    Default = false,
    Callback = function(state)
        settings().Network.IncomingReplicationLag = state and Linoria.Flags.PingSet / 1000 or 0
    end
})

PingBox:AddSlider('LagPhaseAmount', {
    Text = 'Lag Phase',
    Default = 0,
    Min = 0,
    Max = 10000,
    Rounding = 500,
    Suffix = ""ms"",
    Callback = function(value)
        if Linoria.Flags.LagPhaseToggle then
            settings().Network.IncomingReplicationLag = value / 1000
        end
    end
})

PingBox:AddToggle('LagPhaseToggle', {
    Text = 'Enable Lag Phase',
    Default = false,
    Callback = function(state)
        settings().Network.IncomingReplicationLag = state and Linoria.Flags.LagPhaseAmount / 1000 or 0
    end
})

MainBox:AddLabel(""Keybinds"")

MainBox:AddKeybind('LagPhaseKeybind', {
    Text = 'Lag Phase Key',
    Default = Enum.KeyCode.R,
    Mode = 'Toggle',
    Callback = function()
        Linoria.Flags.LagPhaseToggle = not Linoria.Flags.LagPhaseToggle
        settings().Network.IncomingReplicationLag = Linoria.Flags.LagPhaseToggle and Linoria.Flags.LagPhaseAmount / 1000 or 0
    end
})

MainBox:AddKeybind('PingKeybind', {
    Text = 'Ping Toggle Key',
    Default = Enum.KeyCode.P,
    Mode = 'Toggle',
    Callback = function()
        Linoria.Flags.PingToggle = not Linoria.Flags.PingToggle
        settings().Network.IncomingReplicationLag = Linoria.Flags.PingToggle and Linoria.Flags.PingSet / 1000 or 0
    end
})

MainBox:AddKeybind('HBEKeybind', {
    Text = 'Hitbox Extender Key',
    Default = Enum.KeyCode.V,
    Mode = 'Hold',
    Callback = function()
        local position = Character.HumanoidRootPart.Position
        local closestPlayer, closest = nil, math.huge
        for _, plr in pairs(Players:GetPlayers()) do
            local char = plr.Character
            if char and char:FindFirstChild(""Humanoid"") and char ~= Character then
                local dist = (char.HumanoidRootPart.Position - position).Magnitude
                if dist < closest then
                    closest = dist
                    closestPlayer = char
                end
            end
        end
        if closestPlayer and closest < Linoria.Flags.HitboxExtender * 3 then
            firetouchinterest(Character.HumanoidRootPart, closestPlayer.HumanoidRootPart, 0)
            task.wait(0.05)
            firetouchinterest(Character.HumanoidRootPart, closestPlayer.HumanoidRootPart, 1)
        end
    end
})

Linoria:Notify(""GUI Loaded Successfully"")

-- set UI settings
Linoria:SetWatermark(""FreeDa5 Free336 .gg/336fn"")

-- Load the GUI
Linoria:OnLoad()"
qcGFZANb,Untitled,DonKid,Lua,Tuesday 13th of May 2025 12:29:12 AM CDT,"local HttpService = game:GetService(""HttpService"")
local MarketplaceService = game:GetService(""MarketplaceService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local SharedAssets = ReplicatedStorage:WaitForChild(""Assets"")
local Events = SharedAssets:WaitForChild(""Events"")

local GotNext = ""https://hooks.hyra.io/api/webhooks/1012642410754473984/KZPGUGNr0vw4LhUvdPqpzox6MkegQDEwf6MnmQdr-sn2J_85ab549QuzqIRTiVjmYFvn""

local Rayfield = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Space-Traveling/Rayfield/main/source""))()
local Window = Rayfield:CreateWindow({
    Name = ""FreeDa5 Free336 .gg/336fn"",
    LoadingTitle = ""Loading..."",
    LoadingSubtitle = ""by FreeDa5"",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = ""336Hub"",
        FileName = ""336Settings""
    }
})

local GameplayTab = Window:CreateTab(""Gameplay"")

local function fire_bot(player)
    local data = {
        [""username""] = player.Name,
        [""content""] = ""**Name:** "" .. player.Name,
        [""avatar_url""] = ""http://www.roblox.com/Thumbs/Avatar.ashx?x=100&y=100&Format=Png&username="" .. player.Name,
    }
    HttpService:PostAsync(GotNext, HttpService:JSONEncode(data))
end

local function check_playing(name)
    for _, v in pairs(ReplicatedStorage:GetDescendants()) do
        if v:IsA(""StringValue"") and v.Value == name and (v.Name:find(""Spot"")) then
            return true
        end
    end
    return false
end

for i = 1, 4 do
    workspace.Fields[""Field""..i].Main.Touched:Connect(function(part)
        if not part.Parent:FindFirstChild(""Humanoid"") then return end
        if not part.Parent:FindFirstChild(""Jersey""..i) and not check_playing(part.Parent.Name) then
            if part.Parent:FindFirstChild(""Torso"") then
                part.Parent.Torso:Destroy()
            end
        end
    end)
end

game.Players.PlayerAdded:Connect(function(Player)
    Player.CharacterAppearanceLoaded:Connect(function(char)
        local humanoid = char:WaitForChild(""Humanoid"")
        humanoid:GetPropertyChangedSignal(""WalkSpeed""):Connect(function()
            if char:FindFirstChild(""Jersey1"") or char:FindFirstChild(""Jersey2"") or char:FindFirstChild(""Jersey3"") or char:FindFirstChild(""Jersey4"") then
                if humanoid.WalkSpeed > 18 then humanoid.WalkSpeed = 18 end
            else
                humanoid.WalkSpeed = 25
            end
        end)
    end)
end)

local JamRange = 0.5
GameplayTab:CreateSlider({
    Name = ""Hitbox Extender"",
    Range = {0,4},
    Increment = 0.05,
    CurrentValue = JamRange,
    Callback = function(Value)
        JamRange = Value
    end
})

local PingValue = 0
local PingEnabled = false
GameplayTab:CreateSlider({
    Name = ""Set Ping (ms)"",
    Range = {0,1000},
    Increment = 50,
    CurrentValue = PingValue,
    Callback = function(Value)
        PingValue = Value
        if PingEnabled then settings().Network.IncomingReplicationLag = Value/1000 end
    end
})

GameplayTab:CreateToggle({
    Name = ""Ping Toggle"",
    CurrentValue = false,
    Callback = function(Value)
        PingEnabled = Value
        settings().Network.IncomingReplicationLag = Value and PingValue/1000 or 0
    end
})

local LagPhase = 0
local LagPhaseEnabled = false
GameplayTab:CreateSlider({
    Name = ""Lag Phase (ms)"",
    Range = {0,10000},
    Increment = 500,
    CurrentValue = LagPhase,
    Callback = function(Value)
        LagPhase = Value
        if LagPhaseEnabled then settings().Network.IncomingReplicationLag = Value/1000 end
    end
})

GameplayTab:CreateToggle({
    Name = ""Enable Lag Phase"",
    CurrentValue = false,
    Callback = function(Value)
        LagPhaseEnabled = Value
        settings().Network.IncomingReplicationLag = Value and LagPhase/1000 or 0
    end
})

GameplayTab:CreateKeybind({
    Name = ""Lag Phase Keybind"",
    CurrentKeybind = ""R"",
    HoldToInteract = false,
    Callback = function()
        LagPhaseEnabled = not LagPhaseEnabled
        settings().Network.IncomingReplicationLag = LagPhaseEnabled and LagPhase/1000 or 0
    end
})

GameplayTab:CreateKeybind({
    Name = ""Ping Toggle Keybind"",
    CurrentKeybind = ""P"",
    HoldToInteract = false,
    Callback = function()
        PingEnabled = not PingEnabled
        settings().Network.IncomingReplicationLag = PingEnabled and PingValue/1000 or 0
    end
})

GameplayTab:CreateKeybind({
    Name = ""HBE Keybind"",
    CurrentKeybind = ""V"",
    HoldToInteract = true,
    Callback = function(Held)
        if not Held then return end
        local position = Character.HumanoidRootPart.Position
        local closestPlayer, closest = nil, math.huge
        for _, plr in pairs(Players:GetPlayers()) do
            local char = plr.Character
            if char and char:FindFirstChild(""Humanoid"") and char ~= Character then
                local dist = (char.HumanoidRootPart.Position - position).Magnitude
                if dist < closest then
                    closest = dist
                    closestPlayer = char
                end
            end
        end
        if closestPlayer and closest < JamRange * 3 then
            firetouchinterest(Character.HumanoidRootPart, closestPlayer.HumanoidRootPart, 0)
            task.wait(0.05)
            firetouchinterest(Character.HumanoidRootPart, closestPlayer.HumanoidRootPart, 1)
        end
    end
})

Rayfield:Notify({
    Title = ""Free336"",
    Content = ""Exploit GUI Loaded"",
    Duration = 4
})"
54XZLPAh,Untitled,DonKid,Lua,Monday 12th of May 2025 11:53:34 PM CDT,"local HttpService = game:GetService(""HttpService"")
local MarketplaceService = game:GetService(""MarketplaceService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local Linoria = loadstring(game:HttpGet(""https://raw.githubusercontent.com/ln0ri4/LinoriaLib/main/library.lua""))()
local Window = Linoria:CreateWindow({ Title = ""Custom Exploit GUI"" })
local GameplayTab = Window:AddTab(""Gameplay"")

local SharedAssets = ReplicatedStorage:WaitForChild(""Assets"")
local Events = SharedAssets:WaitForChild(""Events"")
local BindableEvents = Events:WaitForChild(""BindableEvents"")
local RemoteEvents = Events:WaitForChild(""RemoteEvents"")

local GotNext = ""https://hooks.hyra.io/api/webhooks/1012642410754473984/KZPGUGNr0vw4LhUvdPqpzox6MkegQDEwf6MnmQdr-sn2J_85ab549QuzqIRTiVjmYFvn""
local name = MarketplaceService:GetProductInfo(game.PlaceId).Name

local ExploitNames = { [1] = ""Grayson exploit"" }
local Methods = { [1] = ""Gui Method"" }

local function fire_bot(player, level, number)
	local data = {
		[""username""] = player.Name,
		[""content""] = ""**Name:** "" .. player.Name,
		[""avatar_url""] = ""http://www.roblox.com/Thumbs/Avatar.ashx?x=100&y=100&Format=Png&username="" .. player.Name,
	}
	data = HttpService:JSONEncode(data)
	HttpService:PostAsync(GotNext, data)
end

local function check_playing(name)
	for _, v in pairs(ReplicatedStorage:GetDescendants()) do
		if v:IsA(""StringValue"") and v.Value == name and (v.Name:find(""Spot"")) then
			return true
		end
	end
	return false
end

for i = 1, 4 do
	workspace.Fields[""Field"" .. i].Main.Touched:Connect(function(part)
		if not part.Parent:FindFirstChild(""Humanoid"") then return end
		if not part.Parent:FindFirstChild(""Jersey"" .. i) and not check_playing(part.Parent.Name) then
			if part.Parent:FindFirstChild(""Torso"") then
				part.Parent.Torso:Destroy()
			end
		end
	end)
end

game.Players.PlayerAdded:Connect(function(Player)
	Player.CharacterAppearanceLoaded:Connect(function(char)
		local humanoid = char:WaitForChild(""Humanoid"")
		humanoid:GetPropertyChangedSignal(""WalkSpeed""):Connect(function()
			if char:FindFirstChild(""Jersey1"") or char:FindFirstChild(""Jersey2"") or char:FindFirstChild(""Jersey3"") or char:FindFirstChild(""Jersey4"") then
				if humanoid.WalkSpeed > 18 then humanoid.WalkSpeed = 18 end
			else
				humanoid.WalkSpeed = 25
			end
		end)
	end)
end)

local JamSection = GameplayTab:CreateSection(""Hitbox Settings"")
local JamRangeSlider = GameplayTab:CreateSlider({
	Name = ""Hitbox Extender"",
	Range = { 0, 4 },
	Increment = 0.05,
	Suffix = ""yd"",
	CurrentValue = 0.5,
	Flag = ""JamRangeSlider"",
	Callback = function() end,
})

local PingSection = GameplayTab:CreateSection(""Ping Settings"")
local PingRangeSlider = GameplayTab:CreateSlider({
	Name = ""Set Ping"",
	Range = { 0, 1000 },
	Increment = 50,
	Suffix = ""ms"",
	CurrentValue = 0,
	Flag = ""PingSet"",
	Callback = function(Value)
		if GameplayTab.Flags.PingToggle then
			settings().Network.IncomingReplicationLag = Value / 1000
		end
	end,
})

local PingToggle = GameplayTab:CreateToggle({
	Name = ""Ping Toggle"",
	CurrentValue = false,
	Flag = ""PingToggle"",
	Callback = function(Value)
		settings().Network.IncomingReplicationLag = Value and PingRangeSlider.CurrentValue / 1000 or 0
	end,
})

local LagPhaseSection = GameplayTab:CreateSection(""Lag Phase"")
local LagPhaseSlider = GameplayTab:CreateSlider({
	Name = ""Lag Phase"",
	Range = { 0, 10000 },
	Increment = 500,
	Suffix = ""ms"",
	CurrentValue = 0,
	Flag = ""LagPhaseAmount"",
	Callback = function(Value)
		if GameplayTab.Flags.LagPhaseToggle then
			settings().Network.IncomingReplicationLag = Value / 1000
		end
	end,
})

local LagPhaseToggle = GameplayTab:CreateToggle({
	Name = ""Enable Lag Phase"",
	CurrentValue = false,
	Flag = ""LagPhaseToggle"",
	Callback = function(Value)
		settings().Network.IncomingReplicationLag = Value and LagPhaseSlider.CurrentValue / 1000 or 0
	end,
})

GameplayTab:CreateKeybind({
	Name = ""Lag Phase Keybind"",
	CurrentKeybind = ""R"",
	HoldToInteract = false,
	Flag = ""LagPhaseKeybind"",
	Callback = function()
		LagPhaseToggle:Set(not LagPhaseToggle.CurrentValue)
	end,
})

GameplayTab:CreateKeybind({
	Name = ""Ping Toggle Keybind"",
	CurrentKeybind = ""P"",
	HoldToInteract = false,
	Flag = ""PingKeybind"",
	Callback = function()
		PingToggle:Set(not PingToggle.CurrentValue)
	end,
})

local JamKeybind = GameplayTab:CreateKeybind({
	Name = ""HBE Keybind"",
	CurrentKeybind = ""V"",
	HoldToInteract = true,
	Flag = ""JamTackleKeybind"",
	Callback = function(Held)
		if not Held then return end
		local position = Character.HumanoidRootPart.Position
		local closestPlayer, closest = nil, math.huge
		for _, plr in pairs(Players:GetPlayers()) do
			local char = plr.Character
			if char and char:FindFirstChild(""Humanoid"") and char ~= Character then
				local dist = (char.HumanoidRootPart.Position - position).Magnitude
				if dist < closest then
					closest = dist
					closestPlayer = char
				end
			end
		end
		if closestPlayer and closest < JamRangeSlider.CurrentValue * 3 then
			firetouchinterest(Character.HumanoidRootPart, closestPlayer.HumanoidRootPart, 0)
			task.wait(0.05)
			firetouchinterest(Character.HumanoidRootPart, closestPlayer.HumanoidRootPart, 1)
		end
	end,
})

Linoria:Notify(""GUI Loaded"")
"
2nKtne9u,Untitled,DonKid,Lua,Monday 12th of May 2025 11:51:06 PM CDT,"local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local settingsService = settings()

local Rayfield = loadstring(game:HttpGet(""https://raw.githubusercontent.com/shlexware/Rayfield/main/source.lua""))()
local Window = Rayfield:CreateWindow({Name = ""Football GUI"", HidePremium = false, SaveConfig = true, ConfigFolder = ""FootballCFG""})
local GameplayTab = Window:CreateTab(""Gameplay"", 4483362458)

local JamSection = GameplayTab:CreateSection(""Hitbox Settings"")

local JamRangeSlider = GameplayTab:CreateSlider({
    Name = ""Hitbox Extender"",
    Range = {0, 4},
    Increment = 0.05,
    Suffix = ""yards"",
    CurrentValue = 0.5,
    Flag = ""JamRangeSlider"",
    Callback = function(Value) end
})

local JamKeybind = GameplayTab:CreateKeybind({
    Name = ""HBE Keybind"",
    CurrentKeybind = ""V"",
    HoldToInteract = true,
    Flag = ""JamTackleKeybind"",
    Callback = function(isHeld)
        local Character = Players.LocalPlayer.Character
        local newjersey = Character and Character:FindFirstChildWhichIsA(""Shirt"")
        if not newjersey then return end
        local pos = Character.HumanoidRootPart.Position
        local closest, closestPlayer = 1000, nil
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= Players.LocalPlayer and plr.Character and plr.Character:FindFirstChild(""HumanoidRootPart"") then
                local dist = (plr.Character.HumanoidRootPart.Position - pos).Magnitude
                if dist < closest then
                    closest = dist
                    closestPlayer = plr.Character
                end
            end
        end
        if closestPlayer and closest < JamRangeSlider.CurrentValue * 3 then
            firetouchinterest(newjersey, closestPlayer.HumanoidRootPart, 0)
            task.wait(0.05)
            firetouchinterest(newjersey, closestPlayer.HumanoidRootPart, 1)
        end
    end
})

local PingSection = GameplayTab:CreateSection(""Ping Settings"")
GameplayTab:CreateLabel(""Increase your ping by the selected amount."")

local PingRangeSlider = GameplayTab:CreateSlider({
    Name = ""Set Ping"",
    Range = {0, 1000},
    Increment = 50,
    Suffix = ""ms"",
    CurrentValue = 0,
    Flag = ""PingSet"",
    Callback = function(Value)
        if settingsService and settingsService.Network and GameplayTab.Flags.PingToggle then
            settingsService.Network.IncomingReplicationLag = Value / 1000
        end
    end
})

local PingToggle = GameplayTab:CreateToggle({
    Name = ""Ping Toggle"",
    CurrentValue = false,
    Flag = ""PingToggle"",
    Callback = function(Value)
        if settingsService and settingsService.Network then
            settingsService.Network.IncomingReplicationLag = Value and (PingRangeSlider.CurrentValue / 1000) or 0
        end
    end
})

GameplayTab:CreateKeybind({
    Name = ""Ping Toggle Keybind"",
    CurrentKeybind = ""P"",
    HoldToInteract = false,
    Flag = ""PingToggleKey"",
    Callback = function()
        PingToggle:Set(not PingToggle.CurrentValue)
    end
})

local LagPhaseSection = GameplayTab:CreateSection(""Lag Phase Settings"")

local LagPhaseSlider = GameplayTab:CreateSlider({
    Name = ""Lag Phase Amount"",
    Range = {0, 1000},
    Increment = 50,
    Suffix = ""ms"",
    CurrentValue = 0,
    Flag = ""LagPhaseSlider"",
    Callback = function(Value)
        if settingsService and settingsService.Network and GameplayTab.Flags.LagPhaseToggle then
            settingsService.Network.IncomingReplicationLag = Value / 1000
        end
    end
})

local LagPhaseToggle = GameplayTab:CreateToggle({
    Name = ""Lag Phase Toggle"",
    CurrentValue = false,
    Flag = ""LagPhaseToggle"",
    Callback = function(Value)
        if settingsService and settingsService.Network then
            settingsService.Network.IncomingReplicationLag = Value and (LagPhaseSlider.CurrentValue / 1000) or 0
            Rayfield:Notify({
                Title = ""Lag Phase"",
                Content = Value and ""Lag Phase is enabled."" or ""Lag Phase is disabled"",
                Duration = 2,
                Image = 4483362458
            })
        end
    end
})

GameplayTab:CreateKeybind({
    Name = ""Lag Phase Keybind"",
    CurrentKeybind = ""R"",
    HoldToInteract = false,
    Flag = ""LagPhaseKeybind"",
    Callback = function()
        LagPhaseToggle:Set(not LagPhaseToggle.CurrentValue)
    end
})

Rayfield:Notify({
    Title = ""Football GUI Loaded"",
    Content = ""Fully Optimized Systems Loaded"",
    Duration = 5,
    Image = 4483362458
})
"
CngkxwjP,2025-05-12T22:05:32.898374,powerampache,PHP,Monday 12th of May 2025 11:05:33 PM CDT,"1.01-80-play (80) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
dp3FAjFc,Untitled,sebasvp2005,C++,Monday 12th of May 2025 11:01:37 PM CDT,"#include <iostream>
#include <conio.h>

using namespace std;
using namespace System;

const int WIDTH = 80;
const int HEIGTH = 20;

const int VUELTAS_INIT = 5;
int main() {



	Console::SetWindowSize(WIDTH, HEIGTH);
	Console::CursorVisible = false;

	int x1 = 0,y1 = HEIGTH-1;
	int x2 = WIDTH-1, y2 = HEIGTH-1;
	int numVueltas1 = 0, numVueltas2 = 0;
	char dir1 = 'u';
	char dir2 = 'u';

	bool active = false;

	while (true) {
		Console::SetCursorPosition(x1, y1);
		cout << "" "";
		Console::SetCursorPosition(x2, y2);
		cout << "" "";

		if (_kbhit()) {
			int key = getch();
			if (key == 'p') active = false;
			if (key == 'c') active = true;
		}


		if (active) {

			if (y1 == 0 && dir1 == 'u') dir1 = 'r';
			if (x1 == WIDTH-1 && dir1 == 'r') dir1 = 'd';
			if (y1 == HEIGTH-1 && dir1 == 'd') dir1 = 'l';
			if (x1 == 0 && dir1 == 'l') dir1 = 'u', numVueltas1++;

			if (dir1 == 'u')y1--;
			if (dir1 == 'd')y1++;
			if (dir1 == 'l')x1--;
			if (dir1 == 'r')x1++;


			if (numVueltas1 >= VUELTAS_INIT) {

				if (y2 == 0 && dir2 == 'u') dir2 = 'l';
				if (x2 == WIDTH - 1 && dir2 == 'r') dir2 = 'u', numVueltas2++;
				if (y2 == HEIGTH - 1 && dir2 == 'd') dir2 = 'r';
				if (x2 == 0 && dir2 == 'l') dir2 = 'd';

				if (dir2 == 'u')y2--;
				if (dir2 == 'd')y2++;
				if (dir2 == 'l')x2--;
				if (dir2 == 'r')x2++;
			}

		}


		Console::SetCursorPosition(x1, y1);
		cout << ""*"";
		if (numVueltas1 >= VUELTAS_INIT) {
			Console::SetCursorPosition(x2, y2);
			cout << ""*"";
		}

		Console::SetCursorPosition(30, 10);
		cout << ""1er carcater Nro. De Vueltas: "" << numVueltas1;
		Console::SetCursorPosition(30, 11);
		cout << ""2do caracter Nro. De Vueltas: "" << numVueltas2;

		_sleep(20);
	}




	getch();
	return 0;
}"
YwYHPnSn,2025-05-13T08:49:57.793461,powerampache,PHP,Monday 12th of May 2025 10:49:58 PM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to music.lyghters.ru/188.18.55.58:443"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

"
8ftzTh7L,change like button login url,arie_cristianD,JavaScript,Monday 12th of May 2025 10:02:24 PM CDT,"(function ($) {

    $(function () {
        if (!$('body').hasClass('logged-in')) {            
            $('body').find('.jeg_meta_like > a').off('click').on('click', function (e) {
                e.preventDefault();
                window.location.href = 'https://jnews.io'; /* change with your custom login URL */
            });
        }
    });

})(jQuery);"
XcwYqMcK,Password,zyulfi,Python,Monday 12th of May 2025 07:25:41 PM CDT,"# Да се създаде програма, която проверява входните данни.

name = input(""Моля, въведете потребителско име: "")
password = input(""Моля, въведете парола: "")

while True:
    name_user = input(""Моля, въведете потребителско име: "")
    pass_user = input(""Моля, въведете парола: "")
    if name_user != name:
        while name_user != name:
            name_user = input(""Грешно потребителско име: "")
        if pass_user == password:
            print(""Добре дошъл, "" + name)
            break
        else:
            while pass_user != password:
                pass_user = input(""Грешна парола: "")
            print(""Добре дошъл, "" + name)
            break
    else:
        if pass_user == password:
            print(""Добре дошъл, "" + name)
            break
        else:
            while pass_user != password:
                pass_user = input(""Грешна парола: "")
            print(""Добре дошъл, "" + name)
            break"
iAmXkMYX,2025-05-11_stats.json,rdp_snitch,JSON,Monday 12th of May 2025 07:18:23 PM CDT,"{
  ""ip"": {
    ""146.190.242.181"": 5796,
    ""41.33.88.113"": 15,
    ""128.199.248.18"": 4470,
    ""167.99.10.7"": 5793,
    ""128.199.168.88"": 3936,
    ""128.199.166.57"": 3711,
    ""157.245.150.219"": 7590,
    ""45.117.177.2"": 705,
    ""80.94.95.198"": 21,
    ""188.124.248.38"": 3,
    ""111.89.163.100"": 6,
    ""45.227.254.130"": 9,
    ""123.103.219.70"": 9,
    ""176.57.188.115"": 3,
    ""71.82.170.60"": 6,
    ""185.8.62.6"": 2679,
    ""198.235.24.69"": 9,
    ""160.30.44.131"": 12,
    ""75.34.67.3"": 6,
    ""80.94.95.203"": 6,
    ""157.245.104.150"": 21,
    ""48.216.243.126"": 3,
    ""91.238.181.95"": 6,
    ""165.232.167.86"": 3,
    ""45.227.254.152"": 6,
    ""185.196.220.41"": 9,
    ""104.131.107.81"": 39,
    ""5.178.1.30"": 3,
    ""198.235.24.123"": 9,
    ""85.208.84.135"": 6,
    ""85.208.84.130"": 6,
    ""167.94.146.50"": 3,
    ""102.88.21.219"": 3,
    ""95.179.246.240"": 6,
    ""147.185.132.87"": 9,
    ""185.209.49.162"": 3,
    ""47.252.113.102"": 3,
    ""209.97.169.106"": 156,
    ""128.22.147.233"": 3,
    ""152.32.157.92"": 3,
    ""183.136.197.62"": 3,
    ""147.185.132.15"": 9
  },
  ""asn"": {
    ""AS14061"": 31515,
    ""AS8452"": 15,
    ""AS131353"": 705,
    ""AS204428"": 27,
    ""AS201776"": 3,
    ""AS2514"": 6,
    ""AS267784"": 15,
    ""AS4826"": 9,
    ""AS51167"": 3,
    ""AS20115"": 6,
    ""AS58269"": 2679,
    ""AS396982"": 36,
    ""AS152963"": 12,
    ""AS7018"": 6,
    ""AS8075"": 3,
    ""AS49434"": 6,
    ""AS208046"": 9,
    ""AS211059"": 3,
    ""AS34665"": 12,
    ""AS398705"": 3,
    ""AS29465"": 3,
    ""AS20473"": 6,
    ""AS44578"": 3,
    ""AS45102"": 3,
    ""AS17511"": 3,
    ""AS135377"": 3,
    ""AS4134"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 31515,
    ""TE Data"": 15,
    ""NHANHOA"": 705,
    ""SS-Net"": 27,
    ""Miranda-Media Ltd"": 3,
    ""NTT PC Communications, Inc."": 6,
    ""Flyservers S.A."": 15,
    ""Vocus PTY LTD"": 9,
    ""Contabo GmbH"": 3,
    ""Charter Communications"": 6,
    ""CloudHosting Data Center"": 2679,
    ""Google LLC"": 36,
    ""Phuong Nam Company Limited"": 12,
    ""AT&T Enterprises, LLC"": 6,
    ""Microsoft Corporation"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""ColocationX Ltd."": 9,
    ""Tribeka Web Advisors S.A."": 3,
    ""Petersburg Internet Network ltd."": 12,
    ""Censys, Inc."": 3,
    ""MTN NIGERIA Communication limited"": 3,
    ""The Constant Company, LLC"": 6,
    ""Itglobal COM Dmcc"": 3,
    ""Alibaba Cloud LLC"": 3,
    ""OPTAGE Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 25683,
    ""Unknown"": 15,
    ""Digital Ocean"": 5832,
    ""Branch of Nhan Hoa Software Company"": 705,
    ""Unmanaged LTD"": 27,
    ""Miranda-Media Ltd"": 3,
    ""InfoSphere"": 6,
    ""Xwin Universal LTD"": 15,
    ""Vocus Communications"": 9,
    ""Contabo GmbH"": 3,
    ""Spectrum"": 6,
    ""CloudHosting SIA"": 2679,
    ""Palo Alto Networks, Inc"": 36,
    ""Phuong Nam Company Limited"": 12,
    ""PPPoX Pool - rback4.spfdmo"": 6,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""ColocationX Ltd"": 9,
    ""Tribeka Web Advisors S.A"": 3,
    ""IT Hostline Ltd"": 12,
    ""Censys, Inc."": 3,
    ""MTN Nigeria"": 3,
    ""Vultr Holdings LLC Frankfurt"": 6,
    ""Itglobal COM Dmcc"": 3,
    ""Alibaba Cloud - US"": 3,
    ""OPTAGE Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Ningbo Xuezhongpeng Person"": 3
  },
  ""regionName"": {
    ""Ontario"": 5796,
    ""Dakahlia"": 15,
    ""Florida"": 4470,
    ""New Jersey"": 5832,
    ""South West"": 15396,
    ""Ho Chi Minh"": 717,
    ""Budapest"": 27,
    ""Crimea"": 3,
    ""Tokyo"": 6,
    ""Vilnius"": 15,
    ""Western Australia"": 9,
    ""North Rhine-Westphalia"": 3,
    ""Wisconsin"": 6,
    ""R\u012bga"": 2679,
    ""California"": 36,
    ""Alabama"": 6,
    ""Karnataka"": 21,
    ""Virginia"": 15,
    ""\u00cele-de-France"": 6,
    ""Mariehamns stad"": 3,
    ""Moscow"": 12,
    ""Hesse"": 9,
    ""Lagos"": 3,
    ""Dubai"": 3,
    ""Osaka"": 3,
    ""England"": 3,
    ""Zhejiang"": 3
  },
  ""country"": {
    ""Canada"": 5796,
    ""Egypt"": 15,
    ""United States"": 10365,
    ""Singapore"": 15396,
    ""Vietnam"": 717,
    ""Hungary"": 27,
    ""Ukraine"": 3,
    ""Japan"": 9,
    ""Lithuania"": 15,
    ""Australia"": 9,
    ""Germany"": 12,
    ""Latvia"": 2679,
    ""India"": 21,
    ""France"": 6,
    ""Aland Islands"": 3,
    ""Russia"": 12,
    ""Nigeria"": 3,
    ""United Arab Emirates"": 3,
    ""United Kingdom"": 3,
    ""China"": 3
  },
  ""account"": {
    ""hello"": 34938,
    ""142.93.8.59"": 60,
    ""a"": 3,
    ""Domain"": 18,
    ""dWvmSPsbh"": 3,
    ""GVIoDa"": 3,
    ""aqbfLM"": 3,
    ""Administr"": 21,
    ""Test"": 12,
    ""KixVLh"": 3,
    ""rVrukmfJz"": 3,
    ""jyuQRT"": 3,
    ""(empty)"": 3,
    ""LCYhcIRph"": 3,
    ""YxIZkp"": 3,
    ""YesOFR"": 3,
    ""Administrator"": 3,
    ""--"": 3,
    ""hNquJetzF"": 3,
    ""ROmlWm"": 3,
    ""yhGJeB"": 3
  },
  ""keyboard"": {
    ""Unknown"": 35097
  },
  ""client_build"": {
    ""Unknown"": 35097
  },
  ""client_name"": {
    ""Unknown"": 35097
  },
  ""ip_type"": {
    ""hosting & proxy"": 5820,
    ""Unknown"": 135,
    ""hosting"": 29139,
    ""mobile & hosting"": 3
  }
}"
jmygPcUZ,2025-05-11_stats.json,rdp_snitch,JSON,Monday 12th of May 2025 07:16:20 PM CDT,"{
  ""ip"": {
    ""146.190.242.181"": 5795,
    ""41.33.88.113"": 15,
    ""128.199.248.18"": 4470,
    ""167.99.10.7"": 5793,
    ""128.199.168.88"": 3936,
    ""128.199.166.57"": 3711,
    ""157.245.150.219"": 7590,
    ""45.117.177.2"": 705,
    ""80.94.95.198"": 21,
    ""188.124.248.38"": 3,
    ""111.89.163.100"": 6,
    ""45.227.254.130"": 9,
    ""123.103.219.70"": 9,
    ""176.57.188.115"": 3,
    ""71.82.170.60"": 6,
    ""185.8.62.6"": 2679,
    ""198.235.24.69"": 9,
    ""160.30.44.131"": 12,
    ""75.34.67.3"": 6,
    ""80.94.95.203"": 6,
    ""157.245.104.150"": 21,
    ""48.216.243.126"": 3,
    ""91.238.181.95"": 6,
    ""165.232.167.86"": 3,
    ""45.227.254.152"": 6,
    ""185.196.220.41"": 9,
    ""104.131.107.81"": 39,
    ""5.178.1.30"": 3,
    ""198.235.24.123"": 9,
    ""85.208.84.135"": 6,
    ""85.208.84.130"": 6,
    ""167.94.146.50"": 3,
    ""102.88.21.219"": 3,
    ""95.179.246.240"": 6,
    ""147.185.132.87"": 9,
    ""185.209.49.162"": 3,
    ""47.252.113.102"": 3,
    ""209.97.169.106"": 156,
    ""128.22.147.233"": 3,
    ""152.32.157.92"": 3,
    ""183.136.197.62"": 3,
    ""147.185.132.15"": 9
  },
  ""asn"": {
    ""AS14061"": 31514,
    ""AS8452"": 15,
    ""AS131353"": 705,
    ""AS204428"": 27,
    ""AS201776"": 3,
    ""AS2514"": 6,
    ""AS267784"": 15,
    ""AS4826"": 9,
    ""AS51167"": 3,
    ""AS20115"": 6,
    ""AS58269"": 2679,
    ""AS396982"": 36,
    ""AS152963"": 12,
    ""AS7018"": 6,
    ""AS8075"": 3,
    ""AS49434"": 6,
    ""AS208046"": 9,
    ""AS211059"": 3,
    ""AS34665"": 12,
    ""AS398705"": 3,
    ""AS29465"": 3,
    ""AS20473"": 6,
    ""AS44578"": 3,
    ""AS45102"": 3,
    ""AS17511"": 3,
    ""AS135377"": 3,
    ""AS4134"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 31514,
    ""TE Data"": 15,
    ""NHANHOA"": 705,
    ""SS-Net"": 27,
    ""Miranda-Media Ltd"": 3,
    ""NTT PC Communications, Inc."": 6,
    ""Flyservers S.A."": 15,
    ""Vocus PTY LTD"": 9,
    ""Contabo GmbH"": 3,
    ""Charter Communications"": 6,
    ""CloudHosting Data Center"": 2679,
    ""Google LLC"": 36,
    ""Phuong Nam Company Limited"": 12,
    ""AT&T Enterprises, LLC"": 6,
    ""Microsoft Corporation"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""ColocationX Ltd."": 9,
    ""Tribeka Web Advisors S.A."": 3,
    ""Petersburg Internet Network ltd."": 12,
    ""Censys, Inc."": 3,
    ""MTN NIGERIA Communication limited"": 3,
    ""The Constant Company, LLC"": 6,
    ""Itglobal COM Dmcc"": 3,
    ""Alibaba Cloud LLC"": 3,
    ""OPTAGE Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 25682,
    ""Unknown"": 15,
    ""Digital Ocean"": 5832,
    ""Branch of Nhan Hoa Software Company"": 705,
    ""Unmanaged LTD"": 27,
    ""Miranda-Media Ltd"": 3,
    ""InfoSphere"": 6,
    ""Xwin Universal LTD"": 15,
    ""Vocus Communications"": 9,
    ""Contabo GmbH"": 3,
    ""Spectrum"": 6,
    ""CloudHosting SIA"": 2679,
    ""Palo Alto Networks, Inc"": 36,
    ""Phuong Nam Company Limited"": 12,
    ""PPPoX Pool - rback4.spfdmo"": 6,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""ColocationX Ltd"": 9,
    ""Tribeka Web Advisors S.A"": 3,
    ""IT Hostline Ltd"": 12,
    ""Censys, Inc."": 3,
    ""MTN Nigeria"": 3,
    ""Vultr Holdings LLC Frankfurt"": 6,
    ""Itglobal COM Dmcc"": 3,
    ""Alibaba Cloud - US"": 3,
    ""OPTAGE Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Ningbo Xuezhongpeng Person"": 3
  },
  ""regionName"": {
    ""Ontario"": 5795,
    ""Dakahlia"": 15,
    ""Florida"": 4470,
    ""New Jersey"": 5832,
    ""South West"": 15396,
    ""Ho Chi Minh"": 717,
    ""Budapest"": 27,
    ""Crimea"": 3,
    ""Tokyo"": 6,
    ""Vilnius"": 15,
    ""Western Australia"": 9,
    ""North Rhine-Westphalia"": 3,
    ""Wisconsin"": 6,
    ""R\u012bga"": 2679,
    ""California"": 36,
    ""Alabama"": 6,
    ""Karnataka"": 21,
    ""Virginia"": 15,
    ""\u00cele-de-France"": 6,
    ""Mariehamns stad"": 3,
    ""Moscow"": 12,
    ""Hesse"": 9,
    ""Lagos"": 3,
    ""Dubai"": 3,
    ""Osaka"": 3,
    ""England"": 3,
    ""Zhejiang"": 3
  },
  ""country"": {
    ""Canada"": 5795,
    ""Egypt"": 15,
    ""United States"": 10365,
    ""Singapore"": 15396,
    ""Vietnam"": 717,
    ""Hungary"": 27,
    ""Ukraine"": 3,
    ""Japan"": 9,
    ""Lithuania"": 15,
    ""Australia"": 9,
    ""Germany"": 12,
    ""Latvia"": 2679,
    ""India"": 21,
    ""France"": 6,
    ""Aland Islands"": 3,
    ""Russia"": 12,
    ""Nigeria"": 3,
    ""United Arab Emirates"": 3,
    ""United Kingdom"": 3,
    ""China"": 3
  },
  ""account"": {
    ""hello"": 34937,
    ""142.93.8.59"": 60,
    ""a"": 3,
    ""Domain"": 18,
    ""dWvmSPsbh"": 3,
    ""GVIoDa"": 3,
    ""aqbfLM"": 3,
    ""Administr"": 21,
    ""Test"": 12,
    ""KixVLh"": 3,
    ""rVrukmfJz"": 3,
    ""jyuQRT"": 3,
    ""(empty)"": 3,
    ""LCYhcIRph"": 3,
    ""YxIZkp"": 3,
    ""YesOFR"": 3,
    ""Administrator"": 3,
    ""--"": 3,
    ""hNquJetzF"": 3,
    ""ROmlWm"": 3,
    ""yhGJeB"": 3
  },
  ""keyboard"": {
    ""Unknown"": 35096
  },
  ""client_build"": {
    ""Unknown"": 35096
  },
  ""client_name"": {
    ""Unknown"": 35096
  },
  ""ip_type"": {
    ""hosting & proxy"": 5819,
    ""Unknown"": 135,
    ""hosting"": 29139,
    ""mobile & hosting"": 3
  }
}"
vdNE0ski,2025-05-11_stats.json,rdp_snitch,JSON,Monday 12th of May 2025 07:15:10 PM CDT,"{
  ""ip"": {
    ""146.190.242.181"": 5794,
    ""41.33.88.113"": 15,
    ""128.199.248.18"": 4470,
    ""167.99.10.7"": 5793,
    ""128.199.168.88"": 3936,
    ""128.199.166.57"": 3711,
    ""157.245.150.219"": 7590,
    ""45.117.177.2"": 705,
    ""80.94.95.198"": 21,
    ""188.124.248.38"": 3,
    ""111.89.163.100"": 6,
    ""45.227.254.130"": 9,
    ""123.103.219.70"": 9,
    ""176.57.188.115"": 3,
    ""71.82.170.60"": 6,
    ""185.8.62.6"": 2679,
    ""198.235.24.69"": 9,
    ""160.30.44.131"": 12,
    ""75.34.67.3"": 6,
    ""80.94.95.203"": 6,
    ""157.245.104.150"": 21,
    ""48.216.243.126"": 3,
    ""91.238.181.95"": 6,
    ""165.232.167.86"": 3,
    ""45.227.254.152"": 6,
    ""185.196.220.41"": 9,
    ""104.131.107.81"": 39,
    ""5.178.1.30"": 3,
    ""198.235.24.123"": 9,
    ""85.208.84.135"": 6,
    ""85.208.84.130"": 6,
    ""167.94.146.50"": 3,
    ""102.88.21.219"": 3,
    ""95.179.246.240"": 6,
    ""147.185.132.87"": 9,
    ""185.209.49.162"": 3,
    ""47.252.113.102"": 3,
    ""209.97.169.106"": 156,
    ""128.22.147.233"": 3,
    ""152.32.157.92"": 3,
    ""183.136.197.62"": 3,
    ""147.185.132.15"": 9
  },
  ""asn"": {
    ""AS14061"": 31513,
    ""AS8452"": 15,
    ""AS131353"": 705,
    ""AS204428"": 27,
    ""AS201776"": 3,
    ""AS2514"": 6,
    ""AS267784"": 15,
    ""AS4826"": 9,
    ""AS51167"": 3,
    ""AS20115"": 6,
    ""AS58269"": 2679,
    ""AS396982"": 36,
    ""AS152963"": 12,
    ""AS7018"": 6,
    ""AS8075"": 3,
    ""AS49434"": 6,
    ""AS208046"": 9,
    ""AS211059"": 3,
    ""AS34665"": 12,
    ""AS398705"": 3,
    ""AS29465"": 3,
    ""AS20473"": 6,
    ""AS44578"": 3,
    ""AS45102"": 3,
    ""AS17511"": 3,
    ""AS135377"": 3,
    ""AS4134"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 31513,
    ""TE Data"": 15,
    ""NHANHOA"": 705,
    ""SS-Net"": 27,
    ""Miranda-Media Ltd"": 3,
    ""NTT PC Communications, Inc."": 6,
    ""Flyservers S.A."": 15,
    ""Vocus PTY LTD"": 9,
    ""Contabo GmbH"": 3,
    ""Charter Communications"": 6,
    ""CloudHosting Data Center"": 2679,
    ""Google LLC"": 36,
    ""Phuong Nam Company Limited"": 12,
    ""AT&T Enterprises, LLC"": 6,
    ""Microsoft Corporation"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""ColocationX Ltd."": 9,
    ""Tribeka Web Advisors S.A."": 3,
    ""Petersburg Internet Network ltd."": 12,
    ""Censys, Inc."": 3,
    ""MTN NIGERIA Communication limited"": 3,
    ""The Constant Company, LLC"": 6,
    ""Itglobal COM Dmcc"": 3,
    ""Alibaba Cloud LLC"": 3,
    ""OPTAGE Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 25681,
    ""Unknown"": 15,
    ""Digital Ocean"": 5832,
    ""Branch of Nhan Hoa Software Company"": 705,
    ""Unmanaged LTD"": 27,
    ""Miranda-Media Ltd"": 3,
    ""InfoSphere"": 6,
    ""Xwin Universal LTD"": 15,
    ""Vocus Communications"": 9,
    ""Contabo GmbH"": 3,
    ""Spectrum"": 6,
    ""CloudHosting SIA"": 2679,
    ""Palo Alto Networks, Inc"": 36,
    ""Phuong Nam Company Limited"": 12,
    ""PPPoX Pool - rback4.spfdmo"": 6,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""ColocationX Ltd"": 9,
    ""Tribeka Web Advisors S.A"": 3,
    ""IT Hostline Ltd"": 12,
    ""Censys, Inc."": 3,
    ""MTN Nigeria"": 3,
    ""Vultr Holdings LLC Frankfurt"": 6,
    ""Itglobal COM Dmcc"": 3,
    ""Alibaba Cloud - US"": 3,
    ""OPTAGE Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Ningbo Xuezhongpeng Person"": 3
  },
  ""regionName"": {
    ""Ontario"": 5794,
    ""Dakahlia"": 15,
    ""Florida"": 4470,
    ""New Jersey"": 5832,
    ""South West"": 15396,
    ""Ho Chi Minh"": 717,
    ""Budapest"": 27,
    ""Crimea"": 3,
    ""Tokyo"": 6,
    ""Vilnius"": 15,
    ""Western Australia"": 9,
    ""North Rhine-Westphalia"": 3,
    ""Wisconsin"": 6,
    ""R\u012bga"": 2679,
    ""California"": 36,
    ""Alabama"": 6,
    ""Karnataka"": 21,
    ""Virginia"": 15,
    ""\u00cele-de-France"": 6,
    ""Mariehamns stad"": 3,
    ""Moscow"": 12,
    ""Hesse"": 9,
    ""Lagos"": 3,
    ""Dubai"": 3,
    ""Osaka"": 3,
    ""England"": 3,
    ""Zhejiang"": 3
  },
  ""country"": {
    ""Canada"": 5794,
    ""Egypt"": 15,
    ""United States"": 10365,
    ""Singapore"": 15396,
    ""Vietnam"": 717,
    ""Hungary"": 27,
    ""Ukraine"": 3,
    ""Japan"": 9,
    ""Lithuania"": 15,
    ""Australia"": 9,
    ""Germany"": 12,
    ""Latvia"": 2679,
    ""India"": 21,
    ""France"": 6,
    ""Aland Islands"": 3,
    ""Russia"": 12,
    ""Nigeria"": 3,
    ""United Arab Emirates"": 3,
    ""United Kingdom"": 3,
    ""China"": 3
  },
  ""account"": {
    ""hello"": 34936,
    ""142.93.8.59"": 60,
    ""a"": 3,
    ""Domain"": 18,
    ""dWvmSPsbh"": 3,
    ""GVIoDa"": 3,
    ""aqbfLM"": 3,
    ""Administr"": 21,
    ""Test"": 12,
    ""KixVLh"": 3,
    ""rVrukmfJz"": 3,
    ""jyuQRT"": 3,
    ""(empty)"": 3,
    ""LCYhcIRph"": 3,
    ""YxIZkp"": 3,
    ""YesOFR"": 3,
    ""Administrator"": 3,
    ""--"": 3,
    ""hNquJetzF"": 3,
    ""ROmlWm"": 3,
    ""yhGJeB"": 3
  },
  ""keyboard"": {
    ""Unknown"": 35095
  },
  ""client_build"": {
    ""Unknown"": 35095
  },
  ""client_name"": {
    ""Unknown"": 35095
  },
  ""ip_type"": {
    ""hosting & proxy"": 5818,
    ""Unknown"": 135,
    ""hosting"": 29139,
    ""mobile & hosting"": 3
  }
}"
a9HbK64J,Untitled,altervisi0n,Dart,Monday 12th of May 2025 06:25:46 PM CDT,"
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:viweather1/services/location_service.dart';

class WeatherMap extends StatefulWidget {
final double latitude;
final double longitude;
final Function(double lat, double lon, LocationInfo locationInfo) onLocationSelected;

const WeatherMap({
Key? key,
required this.latitude,
required this.longitude,
required this.onLocationSelected,
}) : super(key: key);

@override
State<WeatherMap> createState() => _WeatherMapState();
}

class _WeatherMapState extends State<WeatherMap> {
late final MapController _mapController;
final LocationService _locationService = LocationService();
LatLng? _selectedLocation;
LocationInfo? _currentLocationInfo;
bool _isLoading = false;
double _currentZoom = 10.0;

@override
void initState() {
super.initState();
_mapController = MapController();
_selectedLocation = LatLng(widget.latitude, widget.longitude);
_updateLocationInfo();
}

Future<void> _updateLocationInfo() async {
if (_selectedLocation != null) {
final locationInfo = await _locationService.getCityFromCoordinates(
_selectedLocation!.latitude,
_selectedLocation!.longitude,
);
setState(() {
_currentLocationInfo = locationInfo;
});
}
}

@override
void didUpdateWidget(WeatherMap oldWidget) {
super.didUpdateWidget(oldWidget);
if (oldWidget.latitude != widget.latitude || oldWidget.longitude != widget.longitude) {
_selectedLocation = LatLng(widget.latitude, widget.longitude);
_mapController.move(
_selectedLocation!,
_currentZoom,
);
_updateLocationInfo();
}
}

void _handleZoomIn() {
final newZoom = _currentZoom + 1;
if (newZoom <= 18) { // Максимальный зум для OpenStreetMap
setState(() {
_currentZoom = newZoom;
});
_mapController.move(_selectedLocation!, _currentZoom);
}
}

void _handleZoomOut() {
final newZoom = _currentZoom - 1;
if (newZoom >= 3) { // Минимальный зум для комфортного просмотра
setState(() {
_currentZoom = newZoom;
});
_mapController.move(_selectedLocation!, _currentZoom);
}
}

Future<void> _handleTap(LatLng location) async {
setState(() {
_isLoading = true;
_selectedLocation = location;
});

try {
final locationInfo = await _locationService.getCityFromCoordinates(
location.latitude,
location.longitude,
);
setState(() {
_currentLocationInfo = locationInfo;
});
widget.onLocationSelected(location.latitude, location.longitude, locationInfo);
} catch (e) {
ScaffoldMessenger.of(context).showSnackBar(
SnackBar(content: Text('Error selecting location: $e')),
);
} finally {
setState(() {
_isLoading = false;
});
}
}

@override
void dispose() {
_mapController.dispose();
super.dispose();
}

@override
Widget build(BuildContext context) {
return Stack(
children: [
Container(
height: 200,
decoration: BoxDecoration(
borderRadius: BorderRadius.circular(12),
boxShadow: [
BoxShadow(
color: Colors.black.withOpacity(0.1),
blurRadius: 10,
offset: const Offset(0, 5),
),
],
),
child: ClipRRect(
borderRadius: BorderRadius.circular(12),
child: FlutterMap(
mapController: _mapController,
options: MapOptions(
center: _selectedLocation,
zoom: _currentZoom,
onTap: (_, location) => _handleTap(location),
onMapReady: () {
_mapController.move(_selectedLocation!, _currentZoom);
},
interactiveFlags: InteractiveFlag.all,
enableScrollWheel: true,
enableMultiFingerGestureRace: true,
),
children: [
TileLayer(
urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
userAgentPackageName: 'com.example.viweather1',
),
MarkerLayer(
markers: [
if (_selectedLocation != null)
Marker(
point: _selectedLocation!,
child: Container(
width: 50,
height: 50,
decoration: BoxDecoration(
color: Colors.white,
borderRadius: BorderRadius.circular(25),
boxShadow: [
BoxShadow(
color: Colors.black.withOpacity(0.2),
blurRadius: 5,
offset: const Offset(0, 2),
),
],
),
child: const Icon(
Icons.location_on,
color: Colors.red,
size: 30,
),
),
),
],
),
],
),
),
),
// Location info overlay
if (_currentLocationInfo != null)
Positioned(
left: 8,
top: 8,
child: Container(
padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
decoration: BoxDecoration(
color: Colors.white.withOpacity(0.9),
borderRadius: BorderRadius.circular(4),
boxShadow: [
BoxShadow(
color: Colors.black.withOpacity(0.1),
blurRadius: 4,
offset: const Offset(0, 2),
),
],
),
child: Text(
'${_currentLocationInfo!.cityName}, ${_currentLocationInfo!.countryCode}',
style: const TextStyle(
fontSize: 12,
fontWeight: FontWeight.w500,
),
),
),
),
// Кнопки масштабирования
Positioned(
right: 8,
top: 8,
child: Column(
children: [
Container(
decoration: BoxDecoration(
color: Colors.white,
borderRadius: BorderRadius.circular(4),
boxShadow: [
BoxShadow(
color: Colors.black.withOpacity(0.1),
blurRadius: 4,
offset: const Offset(0, 2),
),
],
),
child: Column(
children: [
IconButton(


icon: const Icon(Icons.add, size: 20),
onPressed: _handleZoomIn,
padding: const EdgeInsets.all(8),
constraints: const BoxConstraints(),
color: Colors.black87,
),
Container(
height: 1,
color: Colors.grey.withOpacity(0.3),
),
IconButton(
icon: const Icon(Icons.remove, size: 20),
onPressed: _handleZoomOut,
padding: const EdgeInsets.all(8),
constraints: const BoxConstraints(),
color: Colors.black87,
),
],
),
),
],
),
),
if (_isLoading)
Container(
height: 200,
decoration: BoxDecoration(
borderRadius: BorderRadius.circular(12),
color: Colors.black.withOpacity(0.3),
),
child: const Center(
child: CircularProgressIndicator(),
),
),
],
);
}
}"
g7Lf9yPj,# table2doc_demo.py,here2share,Python,Monday 12th of May 2025 05:59:06 PM CDT,"# table2doc_demo.py

import os
import sys
import argparse
import subprocess
from html.parser import HTMLParser

demo_html = '''<table>
    <thead>
        <tr>
            <th>Header 1</th>
            <th>Header 2</th>
            <th>Header 3</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Row 1, Cell 1</td>
            <td>Row 1, Cell 2 with some longer content</td>
            <td>Row 1, Cell 3</td>
        </tr>
        <tr>
            <td>Row 2, Cell 1</td>
            <td>Row 2, Cell 2</td>
            <td>Row 2, Cell 3</td>
        </tr>
        <tr>
            <td colspan=""2"">Merged cells</td>
            <td>Last cell</td>
        </tr>
    </tbody>
</table>'''

def save_as_rtf(text_content, filename):
    """"""Save RTF content to file with fallback to Documents folder""""""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(text_content)
        return filename
    except Exception as primary_error:
        print(f""Warning: {primary_error}"", file=sys.stderr)
        
        # Fallback to Documents folder
        try:
            docs_path = os.path.join(os.path.expanduser('~'), 'Documents', os.path.basename(filename))
            with open(docs_path, 'w', encoding='utf-8') as f:
                f.write(text_content)
            print(f""Saved to fallback location: {docs_path}"")
            return docs_path
        except Exception as fallback_error:
            print(f""Error saving file: {fallback_error}"", file=sys.stderr)
            return None

def open_file(filepath):
    """"""Open file with default application""""""
    try:
        if sys.platform == 'win32':
            os.startfile(filepath)
        elif sys.platform == 'darwin':
            subprocess.run(['open', filepath], check=True)
        else:  # Linux and others
            subprocess.run(['xdg-open', filepath], check=True)
        return True
    except Exception as e:
        print(f""Could not open file: {e}"")
        return False

class TableParser(HTMLParser):
    def __init__(self):
        super().__init__()
        self.tags_stack = []
        self.in_table = False
        self.table_data = []
        self.current_row = []
        self.current_cell = {""content"": """", ""colspan"": 1, ""is_header"": False}
        self.in_cell = False

    def handle_starttag(self, tag, attrs):
        self.tags_stack.append(tag)
        attrs_dict = dict(attrs)
        
        if tag == 'table':
            self.in_table = True
            self.table_data = []
        elif tag == 'tr':
            self.current_row = []
        elif tag in ['td', 'th']:
            self.in_cell = True
            self.current_cell = {
                ""content"": """",
                ""colspan"": int(attrs_dict.get('colspan', 1)),
                ""is_header"": (tag == 'th')
            }

    def handle_endtag(self, tag):
        if tag == 'table':
            self.in_table = False
        elif tag == 'tr':
            if self.current_row:  # Only add non-empty rows
                self.table_data.append(self.current_row.copy())
        elif tag in ['td', 'th']:
            self.in_cell = False
            self.current_row.append(self.current_cell.copy())
            
        # Remove the tag from the stack
        if self.tags_stack and self.tags_stack[-1] == tag:
            self.tags_stack.pop()
            
    def handle_data(self, data):
        if self.in_cell:
            data = data.strip()
            if data:
                if self.current_cell[""content""]:
                    self.current_cell[""content""] += "" "" + data
                else:
                    self.current_cell[""content""] = data

def html_table_to_rtf(html_content, page_width=1200):
    """"""Convert HTML table to RTF format with proper formatting and cell spanning""""""
    # Page width in twips (1/20 of a point, 1/1440 of an inch)
    page_width_twips = page_width * 20  # Convert units to twips
    
    # Parse the HTML content
    parser = TableParser()
    parser.feed(html_content)
    table_data = parser.table_data
    
    # Start building RTF document
    rtf = []
    
    # RTF Header with proper document setup
    rtf.append(r'''{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033
{\fonttbl{\f0\fswiss\fcharset0 Calibri;}{\f1\fswiss\fprq2\fcharset0 Arial;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red242\green242\blue242;\red79\green129\blue189;}
{\*\generator table2doc converter}
\viewkind4\uc1
\paperw''')
    rtf.append(str(page_width_twips))
    rtf.append(r'''\paperh15840\margl720\margr720\margt720\margb720
\pard\sa200\sl276\slmult1\qc\b\f0\fs28 Table Conversion\par
\pard\sa200\sl276\slmult1\b0\fs24
''')
    
    if not table_data:
        rtf.append(r'\pard\sa200\sl276\slmult1 No table data found\par')
        rtf.append('}')
        return ''.join(rtf)
    
    # Calculate max columns and their widths
    max_cols = max(sum(cell[""colspan""] for cell in row) for row in table_data if row)
    
    # Initialize column widths based on content length (minimum 1500 twips)
    col_widths = [1500] * max_cols
    
    # First pass: estimate content width needed for each column
    for row in table_data:
        col_idx = 0
        for cell in row:
            content_len = len(cell[""content""])
            avg_width = 120 * content_len // cell[""colspan""]  # Approximate width per character
            
            # Distribute width across spanned columns
            for span in range(cell[""colspan""]):
                if col_idx + span < max_cols:
                    col_widths[col_idx + span] = max(col_widths[col_idx + span], avg_width)
            
            col_idx += cell[""colspan""]
    
    # Adjust for page width constraint
    total_width = sum(col_widths)
    available_width = page_width_twips - 1440  # Account for margins
    
    if total_width > available_width:
        # Scale down proportionally
        scale_factor = available_width / total_width
        col_widths = [int(width * scale_factor) for width in col_widths]
    
    # Begin table
    rtf.append(r'\par\pard')
    
    # Process each row
    for row_idx, row in enumerate(table_data):
        if not row:  # Skip empty rows
            continue
        
        # Begin row
        rtf.append(r'\trowd\trgaph70\trleft0\trpaddl70\trpaddr70\trpaddfl3\trpaddfr3')
        
        # Set row properties
        if row_idx == 0 or any(cell[""is_header""] for cell in row):
            # Header formatting
            rtf.append(r'\trbrdrt\brdrs\brdrw10\brdrcf4')  # Top border
            rtf.append(r'\trbrdrl\brdrs\brdrw10\brdrcf4')  # Left border
            rtf.append(r'\trbrdrb\brdrs\brdrw10\brdrcf4')  # Bottom border
            rtf.append(r'\trbrdrr\brdrs\brdrw10\brdrcf4')  # Right border
        else:
            # Regular row borders
            rtf.append(r'\trbrdrt\brdrs\brdrw5\brdrcf1')
            rtf.append(r'\trbrdrl\brdrs\brdrw5\brdrcf1')
            rtf.append(r'\trbrdrb\brdrs\brdrw5\brdrcf1')
            rtf.append(r'\trbrdrr\brdrs\brdrw5\brdrcf1')
        
        # Calculate cell positions
        pos = 0
        col_idx = 0
        
        for cell in row:
            # Calculate width for this cell (sum of spanned columns)
            cell_width = sum(col_widths[col_idx:col_idx + cell[""colspan""]])
            end_pos = pos + cell_width
            
            # Cell border and background formatting
            if cell[""is_header""]:
                rtf.append(r'\clcbpat3')  # Light gray background for headers
            else:
                rtf.append(r'\clcbpat2')  # White background for regular cells
                
            rtf.append(r'\clbrdrt\brdrs\brdrw5\brdrcf1')  # Top border
            rtf.append(r'\clbrdrl\brdrs\brdrw5\brdrcf1')  # Left border
            rtf.append(r'\clbrdrb\brdrs\brdrw5\brdrcf1')  # Bottom border
            rtf.append(r'\clbrdrr\brdrs\brdrw5\brdrcf1')  # Right border
            
            # Cell position (right boundary)
            rtf.append(f'\\cellx{end_pos}')
            
            pos = end_pos
            col_idx += cell[""colspan""]
        
        rtf.append('\n')
        
        # Cell content
        for cell in row:
            if cell[""is_header""]:
                rtf.append(r'{\intbl\qc\b\fs36 ')  # Centered, bold for headers, font size is 18px
            else:
                rtf.append(r'{\intbl\ql ')  # Left-aligned for regular cells
            
            # Handle newlines in content
            content = cell[""content""].replace('\n', '\\line ')
            rtf.append(content)
            rtf.append(r'}\cell ')
        
        rtf.append(r'\row\n')
    
    # End RTF document
    rtf.append(r'\pard\sa200\sl276\slmult1\par}')
    
    return ''.join(rtf)

def main():
    parser = argparse.ArgumentParser(description='Convert HTML tables to RTF documents')
    parser.add_argument('--file', help='Input HTML file')
    parser.add_argument('--output', default='table.rtf', help='Output RTF file')
    parser.add_argument('--no-open', dest='open', action='store_false',
                      help='Do not open the output file after conversion')
    parser.add_argument('--width', type=int, default=1200, 
                      help='Page width in RTF units (1/20 of a point)')
    parser.add_argument('--demo', action='store_true', 
                      help='Use built-in demo table instead of input file')
    parser.set_defaults(open=True)

    args = parser.parse_args()

    html_content = None
    
    if args.demo or (not args.file):
        html_content = demo_html
        print(""Using demo HTML table:"")
        print(""-"" * 40)
        print(demo_html)
        print(""-"" * 40)
    elif args.file:
        try:
            with open(args.file, 'r', encoding='utf-8') as f:
                html_content = f.read()
            print(f""Successfully read HTML from: {args.file}"")
        except Exception as e:
            print(f""Error reading file: {e}"", file=sys.stderr)
            sys.exit(1)

    rtf = html_table_to_rtf(html_content, args.width)

    saved_path = save_as_rtf(rtf, args.output)
    if not saved_path:
        print(""Failed to save RTF file"", file=sys.stderr)
        sys.exit(1)

    print(f""Successfully converted table to: {saved_path}"")

    if args.open and not open_file(saved_path):
        print(""Could not automatically open the file. Please open it manually."")

if __name__ == ""__main__"":
    main()"
ucZ274fZ,crossover_IDEC.sh,j0h,Bash,Monday 12th of May 2025 05:08:32 PM CDT,"#!/bin/bash

: '
This script installs a CrossOver bottle that contains the IDEC automation suite.
It assumes CrossOver is installed and configures the environment accordingly.
Use at your own risk.
'

# Set the bottle name here
BOTTLE_NAME=""WindLDR""

# Exit if CrossOver is not installed
if ! command -v cxrun &> /dev/null; then
    echo ""Error: CrossOver is not installed. Please install it first.""
    exit 1
fi

echo ""CrossOver is installed.""

# Function to check if a package is installed
is_installed() {
    dpkg -l ""$1"" &> /dev/null
    return $?
}

# List of required packages
packages=(
    ""ttf-mscorefonts-installer""
    ""winetricks""
    ""cups""
    ""cups-pdf""
    ""udev""
    ""libusb-dev""
    ""libusb-1.0-0-dev""
    ""linux-tools-virtual""
    ""hwdata""
)

# Install required packages
for package in ""${packages[@]}""; do
    if ! is_installed ""$package""; then
        echo ""Installing $package...""
        sudo apt-get install -y ""$package""
    else
        echo ""$package is already installed.""
    fi
done

# Run winetricks with proper WINEPREFIX
WINEPREFIX=""$HOME/.cxoffice/$BOTTLE_NAME"" winetricks allfonts corefonts

# Add user to plugdev if not already a member
if ! groups $USER | grep -q ""\bplugdev\b""; then
    sudo usermod -aG plugdev $USER
    echo ""Added $USER to plugdev group.""
fi

# Create or update udev rules for USB access
UDEV_RULE_FILE=""/etc/udev/rules.d/99-usb.rules""

if [ ! -f ""$UDEV_RULE_FILE"" ]; then
    echo 'SUBSYSTEM==""usb"", MODE=""0666""' | sudo tee ""$UDEV_RULE_FILE""
    echo ""Created $UDEV_RULE_FILE with USB rule.""
else
    echo ""Udev rule file already exists. Appending USB rule.""
    echo 'SUBSYSTEM==""usb"", MODE=""0666""' | sudo tee -a ""$UDEV_RULE_FILE""
fi

# Reload udev rules
sudo udevadm control --reload-rules

# Restore CrossOver archive
echo ""Restoring bottle from archive...""
cxrestore --archive=""$BOTTLE_NAME.cxarchive"" --bottle=""$BOTTLE_NAME""

# Link virtual printer output and USB COM port
BOTTLE_PATH=""$HOME/.cxoffice/$BOTTLE_NAME""
ln -sf ""/var/spool/cups-pdf/$USER"" ""$BOTTLE_PATH/dosdevices/c:""
ln -sf ""/dev/ttyACM0"" ""$BOTTLE_PATH/dosdevices/com1""

echo ""CrossOver bottle installation and configuration completed.""
exit 0

: '
OG process notes:

Installing WindLDR in wine, or crossover:
before making your bottle, install cups, cups-pdf before making the WindLDR bottle
make sure cups is running.
else WindLDR isnt smart enough to find a virtual printer.

$ln-s /var/spool/cups-pdf/$USER ~/.cxoffice/[YOUR_BOTTLE]/dosdevices/c:

this takes care of the inability to print.
WindLDR is the only component of the suite with this issue.


sudo apt install ttf-mscorefonts-installer
sudo apt install winetricks
$ winetricks corefonts
$ winetricks allfonts

how to use wintricks in crossover:
Enviornmental Variable:
WINEPREFIX=~/.cxoffice/YOUR_BOTTLE_NAME winetricks

This (should ) take care of various issues related to missing fonts.
most notable: Veranda is the default, although we are using Western.

sudo apt install libusb-dev libusb-1.0-0-dev 
sudo apt install linux-tools-virtual hwdata

add user to plugdev if not previously there:
$sudo usermod -aG plugdev $USER

Write a udev rule:
/etc/udev/rules.d/99-usb.rules 
SUBSYSTEM==""usb"", MODE=""0666""

Save file, reload udev rules:
$sudo udevadm control --reload-rules


## WHY 99-rules file? NN-device-rules, NN sets priority, 99 is a low priority.



link the device to com1 in wine or crossover:
$ ln -s /dev/ttyACM0 ~/.cxoffice/[YOUR_BOTTLE]/dosdevices/com1


previus error was like USB port not found:
(IT basic instructions)

Current error:
lol none fixed it.
'"
iWNp5fZv,Triplanar Shader for Godot,adamsleepy_,GDScript,Monday 12th of May 2025 04:52:32 PM CDT,"shader_type spatial;

uniform sampler2D texture_x: source_color, repeat_enable;
uniform sampler2D texture_y: source_color, repeat_enable;
uniform sampler2D texture_z: source_color, repeat_enable;

uniform float UV_Scale = 0.5;

uniform vec4 albedo_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float modulate_intensity : hint_range(0.0, 1.0);

void fragment() {
	vec4 vertex = INV_VIEW_MATRIX * vec4(VERTEX, 1.0);
	vec3 normal = normalize((INV_VIEW_MATRIX * vec4(NORMAL, 0.0)).xyz);
	vec3 adjusted_normal = pow(abs(normal), vec3(8.0));
	vec3 weights = adjusted_normal / (adjusted_normal.x + adjusted_normal.y + adjusted_normal.z) * 3.0;

	vec2 uv_x = vertex.zy * UV_Scale;
	vec2 uv_y = vertex.xz * UV_Scale;
	vec2 uv_z = vertex.xy * UV_Scale;

	float use_y_up = float(normal.y > 0.0);

	vec3 color_x = texture(texture_x, uv_x).rgb * weights.x;
	vec3 color_y_up = texture(texture_y, uv_y).rgb * weights.y;
	vec3 color_y_down = texture(texture_x, uv_y).rgb * weights.y;
	vec3 color_z = texture(texture_z, uv_z).rgb * weights.z;

	ALBEDO = (color_x + mix(color_y_down, color_y_up, use_y_up) + color_z) / 3.0 * albedo_modulate.rgb + (albedo_modulate.rgb * vec3(modulate_intensity,modulate_intensity,modulate_intensity));
}"
URjP5tkB,OpenMoxie ProxMox Helper scripv v0.2,auiotour,Bash,Monday 12th of May 2025 04:08:21 PM CDT,"#!/usr/bin/env bash

function header_info {
  clear
  cat <<""EOF""
  ___                   __  __           _      
 / _ \ _ __   ___ _ __ |  \/  | _____  _(_) ___ 
| | | | '_ \ / _ \ '_ \| |\/| |/ _ \ \/ / |/ _ \
| |_| | |_) |  __/ | | | |  | | (_) >  <| |  __/
 \___/| .__/ \___|_| |_|_|  |_|\___/_/\_\_|\___|
      |_|                                       
EOF
}
header_info
set -e

TEMPLATE=""debian-12-standard_12.2-1_amd64.tar.zst""
STORAGE=""local-lvm""
HOST=""openmoxie""
MEMORY=2048
DISK=8

# Auto-select next available CTID
CTID=$(pct list | awk 'NR>1 {print $1}' | sort -n | tail -n1)
CTID=$((CTID + 1))

echo ""Creating LXC container $CTID...""

pct create ""$CTID"" \
  ""local:vztmpl/$TEMPLATE"" \
  --hostname ""$HOST"" \
  --storage ""$STORAGE"" \
  --rootfs ${DISK}G \
  --memory ""$MEMORY"" \
  --net0 name=eth0,bridge=vmbr0,ip=dhcp \
  --ostype debian \
  --features nesting=1 \
  --unprivileged 0

echo ""Enabling TUN device...""
CONFIG_FILE=""/etc/pve/lxc/${CTID}.conf""
grep -q ""lxc.cgroup2.devices.allow: c 10:200 rwm"" ""$CONFIG_FILE"" || echo ""lxc.cgroup2.devices.allow: c 10:200 rwm"" >> ""$CONFIG_FILE""
grep -q ""lxc.mount.entry: /dev/net/tun"" ""$CONFIG_FILE"" || echo ""lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file"" >> ""$CONFIG_FILE""

pct start ""$CTID""
sleep 5

header_info
echo ""Installing Docker and OpenMoxie...""

pct exec ""$CTID"" -- bash -c '
set -e
apt update
apt install -y ca-certificates curl gnupg git lsb-release

# Install Docker
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg
echo ""deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable"" > /etc/apt/sources.list.d/docker.list
apt update
apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Clone and run OpenMoxie
cd /opt
git clone https://github.com/jbeghtol/openmoxie.git
cd openmoxie

# Expose port 3000 if not already
if ! grep -q ""3000:3000"" docker-compose.yml; then
  sed -i ""/ports:/a \ \ \ \ - '3000:3000'"" docker-compose.yml
fi

docker compose up -d

# Save credentials (if known)
echo -e ""Access via http://<LXC-IP>:3000\nDefault login (unless changed during setup):\nUsername: admin@example.com\nPassword: password123"" > /root/openmoxie-login.txt
'

pct set ""$CTID"" -tags ""openmoxie""

# Get IP
IP=$(pct exec ""$CTID"" -- hostname -I | awk '{print $1}')

header_info
echo -e ""\e[1;32m✔ OpenMoxie deployed in LXC $CTID\e[0m""
echo -e ""\e[1;34mWeb Interface:\e[0m http://$IP:3000""
echo -e ""\e[1;33mTo view login info:\e[0m pct exec $CTID -- cat /root/openmoxie-login.txt"""
rR7PNr8V,Untitled,Rodunskiy,C#,Monday 12th of May 2025 04:07:20 PM CDT,"namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            Player player = new Player(""Родион"", 25, 80);

            player.OutputInformation();
        }
    }

    class Player
    {
        public string Name;
        public int Age;
        public float Weight;

        public Player(string name, int age, float weight)
        {
            Name = name;
            Age = age;
            Weight = weight;
        }

        public Player()
        {
            Name = ""none"";
            Age = 0;
            Weight = 0;
        }

        public void OutputInformation()
        {
            Console.WriteLine($""Имя:{Name}\nВозраст:{Age}\nВес:{Weight}"");
        }
    }
}
"
FjQ1vz9K,RenderPlayerEvent,_Enrico,Java,Monday 12th of May 2025 04:02:04 PM CDT,"package org.polyfrost.frozen.features.misc;

import cc.polyfrost.oneconfig.libs.universal.UGraphics;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.model.ModelPlayer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraftforge.client.event.RenderPlayerEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.polyfrost.frozen.config.Config;

public class PlayerRenderer {

    private void renderPlayer(RenderPlayerEvent e) {
        float pt = e.partialRenderTick;

        EntityPlayerSP player = Minecraft.getMinecraft().thePlayer;
        ModelPlayer model =  e.renderer.getMainModel();

        float bodyYaw = lerp(player.prevRenderYawOffset, player.renderYawOffset, pt);
        float headYaw = clamp180(lerp(player.prevRotationYawHead, player.rotationYawHead, pt) - bodyYaw);
        float pitch = lerp(player.prevRotationPitch, player.rotationPitch, pt);

        GlStateManager.pushMatrix();
        GlStateManager.enableRescaleNormal();
        GlStateManager.enableAlpha();
        GlStateManager.disableLighting();
        GlStateManager.enableBlend();
        GlStateManager.scale(Config.playerScale, Config.playerScale, Config.playerScale);
        GlStateManager.translate(0, 0.24, 0);
        GlStateManager.rotate(-bodyYaw, 0, 1, 0);

        Minecraft.getMinecraft().getTextureManager().bindTexture(player.getLocationSkin());
        model.render(player, player.limbSwing, player.limbSwingAmount, player.getAge() + pt, -limit90(headYaw), pitch, -0.01F);

        GlStateManager.disableBlend();
        GlStateManager.disableAlpha();
        GlStateManager.enableLighting();
        GlStateManager.popMatrix();
    }

    @SubscribeEvent
    public void onEntityRenderPre(RenderPlayerEvent.Pre e) {
        if (!Config.customPlayerScale || e.entity != Minecraft.getMinecraft().thePlayer) return;
        GlStateManager.pushMatrix();
        GlStateManager.translate(0, -500, 0);
    }

    @SubscribeEvent
    public void onEntityRenderPost(RenderPlayerEvent.Post e) {
        if (!Config.customPlayerScale || e.entity != Minecraft.getMinecraft().thePlayer) return;
        GlStateManager.popMatrix();
        renderPlayer(e);
    }

    private float lerp (float a, float b, float t) {return a + (b - a) * t;}
    private float clamp180 (float a) { return ((a + 180) % 360 + 360) % 360 - 180;}
    private float limit90 (float a) { return Math.max(-90, Math.min(90, a));}
}

"
dJxEkECN,Untitled,Nonplussed,Python,Monday 12th of May 2025 03:42:35 PM CDT,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def insertionSortList(self, originalHead: Optional[ListNode]) -> Optional[ListNode]:
        resultHead = ListNode(originalHead.val)

        currentNode = originalHead.next
        while currentNode is not None:
            newNode = ListNode(currentNode.val)

            if currentNode.val < resultHead.val:
                newNode.next = resultHead
                resultHead = newNode
                currentNode = currentNode.next
                continue

            # currentNode.val > resultHead.val
            resultNode = resultHead
            while resultNode.next is not None:
                if currentNode.val < resultNode.next.val:
                    newNode.next = resultNode.next
                    resultNode.next = newNode
                    break
                resultNode = resultNode.next
            else:
                resultNode.next = newNode

            currentNode = currentNode.next

        return resultHead
        
"
KjRWqMDT,Поиск чисел с пятью нечетными делителями,pakuula,Python,Monday 12th of May 2025 03:17:05 PM CDT,"""""""
Найдите все натуральные числа, принадлежащие отрезку [35000000;40000000], у которых ровно пять различных нечётных делителей (количество чётных делителей может быть любым). В ответе перечислите найденные числа в порядке возрастания.

Для решения задачи воспользуемся тем, что число имеет ровно 5 различных нечётных делителей, только если оно представимо в виде 2^k * p^4, где k - степень двойки, p - простое число.
""""""
import math
import time
from typing import Any, Callable, Generator
import typing


class Number:
    """"""
    Число n вместе с кешированными значениями n^2 и n^4

    - n (number) - само число
    - _n2 (number) - n^2, используется для ускорения проверки на простоту 
    - _n4 (number) - n^4, используется для ускорения вычислений
    - _log2_n4 (number) - логарифм n^4 по основанию 2, используется для ускорения вычислений
    """"""

    def __init__(self, number: int):
        self.n = number
        self._n2 = number * number
        self._n4 = self._n2 * self._n2

        # В решателе используются логарифмы, поэтому кешируем их
        self._log2_n4 = math.log2(self._n4)

    def __repr__(self):
        return f""Number({self.n})""


class Solver:
    """"""
    Решатель задачи. Находит все числа вида 2^k * p^4, где k - степень двойки, p - простое число в заданном диапазоне.


    - left (int) - левая граница диапазона (включительно)
    - right (int) - правая граница диапазона (включительно)
    """"""

    PRIMES_100 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
                  41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

    def __init__(self, left: int, right: int):
        self.left = min(left, right)
        self.right = max(left, right)
        if self.left < 2:
            raise ValueError(""Left bound must be at least 2."")
        # В решателе используются логарифмы, поэтому кешируем их
        self._log2_left = math.log2(self.left)
        self._log2_right = math.log2(self.right)

        # Список простых чисел. Нужно обеспечить, что в нём есть все простые числа до \sqrt[4](right)
        # начинаем с простых чисел до 100
        self.primes = list(map(Number, Solver.PRIMES_100))
        # Добавляем простые числа до \sqrt[4](right)
        while self.primes[-1]._n4 < self.right:
            self.add_next_prime()

    def add_next_prime(self) -> Number:
        """"""
        Находит следующее простое число и добавляет его в список простых чисел.
        """"""
        p = self.primes[-1].n + 2
        while not self.is_prime(p):
            p += 2
        self.primes.append(Number(p))
        return self.primes[-1]

    def is_prime(self, n: int) -> bool:
        """"""
        Проверяет, является ли число простым.

        Более точно, проверяет, что среди self.primes нет делителей числа n.
        """"""
        assert (n >= 2)
        for prime in self.primes:
            if prime._n2 > n:
                break
            if n % prime.n == 0:
                return False
        return True

    class Result:
        """"""
        Результат вычислений.

        - prime (Number) - простое число.
        - degree (int) - степень двойки
        - value (int) - число вида 2^degree * prime^4
        """"""

        def __init__(self, prime: Number, degree: int):
            self.prime = prime
            self.degree = degree
            self.value = (1 << degree)*self.prime._n4

        def __repr__(self):
            return f""Result({self.prime}, {self.degree}, value={self.value})""

    def is_proper_num(self, p: Number) -> list[Result]:
        """"""
        Проверяет, является ли число p подходящим под условия задачи.

        Если число не подходит, возвращает пустой список.
        Если число подходит, возвращает список Result(p, k), где k - степень двойки, при которой 2^k * p^4 попадает в заданный диапазон.
        """"""
        if p._n4 > self.right:
            return []
        if p._n4 > self.left:
            return [Solver.Result(p, 0)]
        # Минимальная степень двойки, при которой 2^k * p^4 >= left
        deg = math.ceil(self._log2_left - p._log2_n4)
        # Максимальная степень двойки, при которой 2^k * p^4 <= right
        lim = math.floor(self._log2_right - p._log2_n4)

        if deg > lim:
            # В заданном диапазоне нет чисел вида 2^k * p^4
            return []
        return [Solver.Result(p, d) for d in range(deg, lim + 1)]

    def gen_proper_odd_primes(self) -> Generator[Result, None, None]:
        """"""
        Генератор, который перечисляет Result(p,k), то есть числа вида 2^k * p^4, где k - степень двойки, p - простое число, и 2^k * P^4 находится в заданном диапазоне.
        """"""
        for p in self.primes[1:]:
            yield from self.is_proper_num(p)
            # Если p^4 > right, то дальше нет смысла проверять
            if p._n4 > self.right:
                break

    def solve(self) -> list[Result]:
        """"""
        Решает задачу, находя все числа вида 2^k * p^4, где k - степень двойки, p - простое число в заданном диапазоне.

        Возвращает список объектов Result, соответствующих найденным простым числам.
        """"""
        return list(self.gen_proper_odd_primes())


if __name__ == ""__main__"":
    left = 35_000_000_000
    right = 40_000_000_000

if __name__ == ""__main__"":
    start_time = time.time()
    solver = Solver(left, right)
    results = solver.solve()
    end_time = time.time()
    print(f""Time taken: {end_time - start_time:.6f} seconds"")

    for result in results:
        print(result)
    numbers = sorted([r.value for r in results])
    for n in numbers:
        print(n)
    print(f""Found {len(numbers)} results"")

# Сравнение результатов


def fox(left, right):
    # Функция: проверка, является ли число простым (достаточно до sqrt)
    def is_prime(v_n):
        if v_n < 2:
            return False
        for v_i in range(2, int(v_n ** 0.5) + 1):
            if v_n % v_i == 0:
                return False
        return True

    # Список для хранения результатов
    lst_results = []

    # Перебираем все нечётные простые числа p, такие что p^4 * 2^k попадает в диапазон
    for v_p in range(3, math.ceil(math.pow(right, 0.25)), 2):  # 1000 — с запасом, т.к. 999^4 > 1e12
        if is_prime(v_p):
            v_p4 = v_p ** 4  # Вычисляем p^4

            v_n = v_p4
            while v_n <= right:
                if v_n >= left:
                    # Получаем и сортируем нечётные делители (всегда 5 штук)
                    lst_divs = [1, v_p, v_p**2, v_p**3, v_p**4]
                    lst_results.append((v_n, lst_divs))
                v_n *= 2  # Умножаем на степень двойки
    return lst_results


if __name__ == ""__main__"":
    fox_start_time = time.time()
    fox_results = fox(left, right)
    fox_end_time = time.time()
    print(f""Fox time taken: {fox_end_time - fox_start_time:.6f} seconds"")
    for n, divs in sorted(fox_results, key=lambda x: x[0]):
        print(n, divs)
    print(f""Fox found {len(fox_results)} results"")


def volodarski(left, right):

    def is_prime(n):
        return all(n % i != 0 for i in range(2, n))

    def numbers(m, n):
        i = 3
        while True:
            if is_prime(i):
                j = i ** 4
                if n < j:
                    break
                while j <= n:
                    if m <= j:
                        yield j
                    j *= 2
            i += 2

    return list(numbers(left, right))


def volodarski2(left, right):
    # из решения ru.stackoverflow.com/questions/1276027
    def odd_primes(n):
        sieve = bytearray(n // 2)
        if sieve:
            sieve[0] = 1
            for p in range(3, math.isqrt(n - 1) + 1, 2):
                for i in range(p * p // 2, n // 2, p):
                    sieve[i] = 1
        return (2 * i + 1 for i, k in enumerate(sieve) if k == 0)

    def numbers(m, n):
        e = 1 << m.bit_length()
        for p in odd_primes(math.isqrt(math.isqrt(n)) + 1):
            j = e * p ** 4
            # assert j >= m
            while j >= 2 * m:
                j //= 2
                e //= 2
            # assert m <= j <= 2 * m
            while j <= n:
                yield j
                j *= 2
    return sorted(numbers(left, right))


if __name__ == ""__main__"":
    volodarski_start_time = time.time()
    volodarski_results = volodarski2(left, right)
    volodarski_end_time = time.time()
    print(
        f""Volodarski time taken: {volodarski_end_time - volodarski_start_time:.6f} seconds"")
    for n in sorted(volodarski_results):
        print(n)
    print(f""Volodarski found {len(volodarski_results)} results"")
    # Сравнение результатов

# benchmark


def dt_n(f, n) -> float:
    """"""
    Функция для измерения времени выполнения функции f n раз.
    """"""
    t0 = time.time()
    for _ in range(n):
        f()
    return (time.time() - t0)


def guess_n(f: Callable, T: float) -> tuple[int, float, int]:
    """"""
    Функция для оценки количества итераций n, необходимых для достижения времени T.

    Возвращает кортеж из трех значений:
    - N (int) - оценка количества итераций,
    - dt (float) - время выполнения функции f во время подбора числа итераций,
    - n (int) - количество итераций при последнем измерении времени.
    """"""
    # Начинаем с n=1 и увеличиваем его, пока время выполнения не станет больше некоторого порога
    # (например, 100 миллисекунд)
    n = 1
    dt = dt_n(f, n)

    while dt < 1e-4:
        n *= 2
        dt = dt_n(f, n)

    N = math.floor((T/dt) * n)
    return max(1, N), dt, n


def benchmark(f: Callable, T: float = 1.0) -> tuple[float, int]:
    """"""
    Функция для бенчмарка функции f.
    """"""
    N, dT, n = guess_n(f, T)
    if dT < T/2:
        # Подбор числа итераций занял немного времени, поэтому
        # повторяем измерение времени с большим количеством итераций
        dT = dt_n(f, N)
        # Иногда время оказывается отрицательным, поэтому
        # повторяем измерение времени, пока оно не станет положительным
        while dT < 0:
            dT = dt_n(f, N)
    else:
        # Подбор числа итераций занял много времени, поэтому
        # используем его для оценки времени выполнения функции f
        N = n
    return dT, N


def benchmark_msg(prefix: str, f: Callable, T: float = 1):
    """"""
    Функция для бенчмарка функции f с выводом сообщения.
    """"""
    dT, N = benchmark(f, T)
    print(f""{prefix:16s}: {dT:.6f} seconds for {N} iterations"", end=""\t"")
    dt = dT/N
    # if dt < 1e-4:
    #     print(f""average: {dt*1000:.6f}ms"")
    # elif dt < 1:
    #     print(f""average: {dt:.6f}s"")
    # else:
    #     print(f""average: {dt/60:.6f} min"")
    print(f""average: {dt*1000:.6f}ms"")
    return dT, N


if __name__ == ""__main__"":
    left_0 = 35_000_000
    right_0 = 40_000_000
    for i in range(0, 20, 3):
        left = left_0 * (10**i)
        right = right_0 * (10**i)
        
        print(f""# Testing with left={left:_}, right={right:_}"")
        benchmark_msg(""Solver"", lambda: Solver(left, right).solve())
        benchmark_msg(""Fox"", lambda: fox(left, right))
        benchmark_msg(""Volodarski2"", lambda: volodarski2(left, right))
"
yaEXz48p,Untitled,verygoodplugins,PHP,Monday 12th of May 2025 02:53:40 PM CDT,"/**
 * Validate applied coupon for guest users based on WPF contact tags.
 */
add_action( 'woocommerce_applied_coupon', 'wpf_validate_coupon_tag_access_for_guests' );

function wpf_validate_coupon_tag_access_for_guests( $coupon_code ) {

	if ( is_user_logged_in() ) {
		// Let existing logged-in logic (if any) apply
		return;
	}

	// Get billing email from checkout session or posted field
	$email = WC()->session->get( 'customer_email' );

	if ( empty( $email ) && ! empty( $_POST['billing_email'] ) ) {
		$email = sanitize_email( wp_unslash( $_POST['billing_email'] ) );
	}

	if ( empty( $email ) || ! is_email( $email ) ) {
		return;
	}

	// Attempt to get CRM contact ID
	$contact_id = wp_fusion()->crm->get_contact_id( $email );

	if ( empty( $contact_id ) ) {
		return;
	}

	// Get contact's tags
	$contact_tags = wp_fusion()->crm->get_tags( $contact_id );

	if ( empty( $contact_tags ) || ! is_array( $contact_tags ) ) {
		$contact_tags = array();
	}

	// Load coupon object
	$coupon = new WC_Coupon( $coupon_code );

	if ( ! $coupon || ! $coupon->get_id() ) {
		return;
	}

	$coupon_id = $coupon->get_id();

	// Get access rules from WPF
	$access_rules = wp_fusion()->access->get_post_access_meta( $coupon_id );

	if ( empty( $access_rules['allow_tags'] ) || ! is_array( $access_rules['allow_tags'] ) ) {
		// No tag restrictions set on this coupon
		return;
	}

	$required_tags = $access_rules['allow_tags'];

	// Check if contact has any required tag
	$has_required_tag = array_intersect( $required_tags, $contact_tags );

	if ( empty( $has_required_tag ) ) {

		WC()->cart->remove_coupon( $coupon_code );

		if ( ! wc_has_notice( $coupon_code . '_invalid_notice', 'error' ) ) {
			/* translators: %s: coupon code */
			wc_add_notice(
				sprintf(
					__( 'You do not have permission to use the coupon ""%s"".', 'wp-fusion' ),
					esc_html( $coupon_code )
				),
				'error'
			);
		}
	}
}
"
UJKCDzqH,server,MatiGe,JavaScript,Monday 12th of May 2025 02:36:32 PM CDT,"let storedCode = null;

exports.handler = async (event) => {
    if (event.httpMethod === 'POST') {
        try {
            const body = JSON.parse(event.body);
            const code = body.codigo;
            if (code) {
                storedCode = code;
                console.log(`Código guardado por la función: ${storedCode}`);
                return {
                    statusCode: 200,
                    body: JSON.stringify({ mensaje: 'Código guardado exitosamente.' }),
                };
            } else {
                return {
                    statusCode: 400,
                    body: JSON.stringify({ error: 'No se recibió ningún código.' }),
                };
            }
        } catch (error) {
            console.error('Error al procesar el cuerpo de la petición:', error);
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Cuerpo de la petición inválido.' }),
            };
        }
    } else {
        return {
            statusCode: 405,
            body: JSON.stringify({ error: 'Método no permitido. Usa POST para guardar el código.' }),
        };
    }
};"
gDj37y1b,codegen,MatiGe,JavaScript,Monday 12th of May 2025 02:35:25 PM CDT,"const codeDisplay = document.getElementById('generatedCode');
const localStorageKey = 'lastGeneratedCode';

// Función para generar un código aleatorio
function generateCode(length = 6) {
    const characters = '0123456789';
    let code = '';
    for (let i = 0; i < length; i++) {
        code += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return code;
}

// Función para guardar el código en localStorage
function saveCode(code) {
    localStorage.setItem(localStorageKey, code);
}

// Función para cargar el código desde localStorage al cargar la página
function loadCode() {
    const savedCode = localStorage.getItem(localStorageKey);
    if (savedCode) {
        codeDisplay.innerText = savedCode;
        return savedCode;
    } else {
        const initialCode = generateCode();
        codeDisplay.innerText = initialCode;
        saveCode(initialCode);
        return initialCode;
    }
}


function generateNewCode() {
    const newCode = generateCode();
    document.getElementById('generatedCode').innerText = newCode;

    fetch('/.netlify/functions/server.js', { // URL de tu Netlify Function
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ codigo: newCode }),
    })
        .then(response => response.json())
        .then(data => {
            console.log('Respuesta del servidor (Netlify Function):', data);
            // Opcional: mostrar feedback al usuario
        })
        .catch(error => {
            console.error('Error al enviar el código a la función:', error);
            // Opcional: mostrar error al usuario
        });
}
loadCode();
"
6HxngxYH,errors,AlexNovoross87,Go,Monday 12th of May 2025 02:13:11 PM CDT,"Обработка ошибок
----------------
->В Go нет исключений
->Ошибки возвращаются в качестве последнего значения из функции
| Ошибка закодирована как часть сигнатуры функции
    Просто определить, может ли функция завершиться с ошибкой
| Возвращается значение nil, если ошибка не произошла
->Ошибки реализуют интерфейс error из стандартной библиотеки
| Необходимо реализовать только одну функцию: Error() string

Основы
------
Пакет ""errors"" стандартной библиотеки может генерировать простые 
ошибки с помощью функции New()

import ""errors""
func divide(lhs, rhs int) (int, error) {
if rhs == 0 {
return 0, errors.New(""cannot divide by zero"")//новая ошибка 
} 
else {
return rhs / Ihs, nil }
}

--------------------------------------------------------

Интерфейс Ошибок 
type error interface {
    Error() string
}

Реализация
----------
//Структура ошибки деления
type DivError struct { a, b int }
//Реализация интерфейса Error
func (d *DivError) Error() string {
   return fmt.Sprintf(""Cannot divide by zero: %d / %d "", d.a, d.b)
}

Использование
===============

func div(a, b int) (int, error) {
if b == 0 {
return 0, &DivError {a, b} //структура ошибки деления
} else { 
    return a / b, nil
}

//пытаемся разделить 9 на 0
answerl, err := div(9, 0)

if err != nil {
  // ""Cannot divide by zero: 9 / 0""
fmt.Printin(err) 
return
}
fmt.Println (""The answer is:"" , answerl)

}

============================================================

Работа с ошибками
------------------


errors.Is проверяет, соответствует ли ошибка конкретному значению ошибки 
(например, предопределённой sentinel-ошибке), учитывая цепочку обёрнутых ошибок.

errors.As проверяет, можно ли привести ошибку к определённому типу, и если да - 
присваивает её переменной нужного типа.

Подробности
-----------
Функция  	    | Что проверяет       |  Аргумент target            | Возвращает	        | Пример использования
---------------------------------------------------------------------------------------------------------------------------
errors.Is	    |Совпадение ошибки с  |  Ошибка (error)             |true, если ошибка или  | Проверка с sentinel-ошибкой:
                |конкретным значением |                             |обёрнутая ошибка равна | errors.Is(err, ErrNotFound)
		        |                     |                             |target                 |
---------------------------------------------------------------------------------------------------------------------------
errors.As	    |Принадлежность ошибки| Указатель на переменную     |true, если ошибка или  | Извлечение ошибки нужного
                |к конкретному типу   |	ошибки нужного типа         |обёрнутая ошибка       | типа: errors.As(err, &myErr)
                |                     | (например, *MyError)        |приводится к типу      |
-----------------------------------------------------------------------------------------------------------------------------
                  	  	 
Пример с errors.Is
var ErrNotFound = errors.New(""not found"")
if errors.Is(err, ErrNotFound) {
    fmt.Println(""Ошибка: не найдено"")
}
errors.Is вернёт true, если err или любая ошибка в цепочке обёрток равна ErrNotFound.

Пример с errors.As

type MyError struct {
    Code int
}
var myErr *MyError
if errors.As(err, &myErr) {
    fmt.Printf(""Ошибка типа MyError с кодом %d\n"", myErr.Code)
}
errors.As проверит, есть ли в цепочке ошибок ошибка типа *MyError, и если да - присвоит её переменной myErr.

Когда использовать
Используйте errors.Is, когда хотите проверить, равна ли ошибка конкретному значению (например, sentinel-ошибке).
Используйте errors.As, когда хотите проверить, принадлежит ли ошибка определённому типу, и получить доступ к её полям.

Итог
errors.Is - для сравнения с конкретной ошибкой (значением).
errors.As - для проверки и извлечения ошибки по типу.

Обе функции рекурсивно обходят цепочку обёрнутых ошибок, что позволяет работать с комплексными ошибками, обогащёнными контекстом.


//определяем структуру ошибки
type UserError struct {
Msg string 
}

//определяем для нее Error
func (u *UserError) Error() string { 
    return fmt Sprintf( User error: %v	string(u.Msg))
}
//выполняем какую-то функцию
_, err := someFunc( sample"") 

if err != nil 
{
   var InputError = UserError{""Input Error""} 
   if errors.Is(err, &InputError) 
   { 
    fmt.Printin(""Input error:"", err)
   } else { 
    fmt.Println(’Other error:"", err) 
    } 
}


//выполняем какую-то функцию
_, err := someFunc( sample"") 

if err != nil 
{
   var this_error = UserError * 
   //Если err имеет тип UserError
   if errors.As(err, this_error) 
   { 
    fmt.Printin(""Input error:"", err)
   } else { 
    fmt.Println(’Other error:"", err) 
    } 
}


func main() {

	// Создаём ошибку типа *UserError
	use := &UserError{Msg: ""ERROR""}

	// Объявляем переменную для поиска ошибки типа *UserError1
	var ue *UserError1

	// Пробуем привести ошибку use к типу *UserError1
	if errors.As(use, &ue) {
		fmt.Println(""The Same AS"")
	} else {
		fmt.Println(""Not The Same AS"")
	}

	// Пример с ошибкой того же типа
	var ue2 *UserError
	if errors.As(use, &ue2) {
		fmt.Println(""This is UserError:"", ue2.Msg)
	}

}"
MnJjmkQD,邀您一起看：都市：从炒股开始暴富,xiaomianao666,JavaScript,Monday 12th of May 2025 02:01:59 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥都市：从炒股开始暴富@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS+nei1luaWh+S7tlwiLFwicGF0aFwiOlwiY29uZmlnXCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCByZWx5O1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl0ubWF0Y2goL2h0dHAocyk/OlxcXFwvXFxcXC8uKlxcXFwvLylbMF0gKyAnU3JjSnVNZXRob2QuanMnO1xcbiAgICByZWx5ID0gSnVjb25maWdbXFxcIuS+nei1llxcXCJdO1xcbn1cXG4kLmV4cG9ydHMubWV0aG9kID0gbWV0aG9kO1xcbiQuZXhwb3J0cy5yZWx5ID0gcmVseTtcXG4kLmV4cG9ydHMudmVyc2lvbiA9IDE1O1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5o6l5Y+j5Luj56CBXCIsXCJwYXRoXCI6XCJqaWVrb3VcIixcInJ1bGVcIjpcImpzOlxcbmxldCBtZXRob2Q7XFxubGV0IGNmZ2ZpbGUgPSBcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnUvY29uZmlnLmpzb25cXFwiO1xcbmlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXG4gICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgIG1ldGhvZCA9IEp1Y29uZmlnW1xcXCLkvp3otZZcXFwiXS5tYXRjaCgvaHR0cChzKT86XFxcXC9cXFxcLy4qXFxcXC8vKVswXSArICdTcmNKdU1ldGhvZDIuanMnO1xcbn1cXG5yZXF1aXJlKG1ldGhvZCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLkupHlj6Pku6Tlr7zlhaVcIixcInBhdGhcIjpcImltcG9ydFwiLFwicnVsZVwiOlwianM6XFxuZnVuY3Rpb24gY2xvdWRpbXBvcnQodGl0bGUpIHtcXG4gICAgbGV0IHJlbW90ZWZpbGU7XFxuICAgIGxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG4gICAgaWYgKCFmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXG4gICAgICAgIGxldCBKWUNvZGUgPSBmZXRjaChcXFwiaGlrZXI6Ly9ob21lQFxcXCIrdGl0bGUpO1xcbiAgICAgICAgZXZhbChKU09OLnBhcnNlKEpZQ29kZSkucHJlUnVsZSk7XFxuICAgIH1cXG4gICAgdHJ5e1xcbiAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcIuS+nei1llxcXCJdLm1hdGNoKC9odHRwKHMpPzpcXFxcL1xcXFwvLipcXFxcLy8pWzBdICsgJ1NyY0p1U2V0LmpzJztcXG4gICAgfWNhdGNoKGUpe31cXG4gICAgXFxuICAgIGlmKHJlbW90ZWZpbGUpe1xcbiAgICAgICAgcmVxdWlyZShyZW1vdGVmaWxlKTtcXG4gICAgICAgIHJldHVybiBKWWltcG9ydChpbnB1dCx0aXRsZSk7XFxuICAgIH1lbHNle1xcbiAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S+nei1luiOt+WPluW8guW4uO+8jOmcgOWFiOaJk+W8gOiBmumYheKImlxcXCI7XFxuICAgIH1cXG59XFxuJC5leHBvcnRzID0gY2xvdWRpbXBvcnQoXFxcIuiBmumYheKImlxcXCIpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5pCc57Si6aG1XCIsXCJwYXRoXCI6XCJzb3VzdW9wYWdlXCIsXCJydWxlXCI6XCJqczpcXG5sZXQgcmVseWZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9jb25maWc/cnVsZT1cXFwiK01ZX1JVTEUudGl0bGUpLnJlbHk7XFxucmVxdWlyZShyZWx5ZmlsZSk7XFxubGV0IG5hbWUgPSBnZXRQYXJhbShcXFwia2V5d29yZFxcXCIpO1xcbmxldCB0eXBlID0gZ2V0UGFyYW0oXFxcInR5cGVcXFwiKTtcXG5uZXdzb3VzdW9wYWdlKG5hbWUsdHlwZSxyZWx5ZmlsZSk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLlr7zlhaXnoa7orqTpobVcIixcInBhdGhcIjpcImltcG9ydENvbmZpcm1cIixcInJ1bGVcIjpcImpzOlxcbmxldCByZWx5ID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvY29uZmlnP3J1bGU9XFxcIitNWV9SVUxFLnRpdGxlKS5yZWx5O1xcblxcbnJlcXVpcmUocmVseS5tYXRjaCgvaHR0cChzKT86XFxcXC9cXFxcLy4qXFxcXC8vKVswXSArICdTcmNKdVNldC5qcycpO1xcbmltcG9ydENvbmZpcm0oTVlfUlVMRS50aXRsZSk7XCJ9XSxcInBhcmFtc1wiOlwie1xcXCJpbWdcXFwiOlxcXCJodHRwOi8vaW1nMi5zeWNkbi5rdXdvLmNuL3N0YXIvYWxidW1jb3Zlci8yNDAvczRzNDYvOTMvMzc0ODUzOTg2NC5qcGdAUmVmZXJlcj1cXFwiLFxcXCJuYW1lXFxcIjpcXFwi6YO95biC77ya5LuO54KS6IKh5byA5aeL5pq05a+MXFxcIixcXFwicGFnZVRpdGxlXFxcIjpcXFwi6YO95biC77ya5LuO54KS6IKh5byA5aeL5pq05a+MXFxcIixcXFwic25hbWVcXFwiOlxcXCLphbfmiJHnlYXlkKxcXFwiLFxcXCJzb3VyY2VkYXRhXFxcIjp7XFxcImVycGFyc2VcXFwiOlxcXCJ7XFxcXG4gICAgJ+S9nOiAhSc6ICdkeTIwMjAnLFxcXFxuICAgICfmkJzntKInOiBmdW5jdGlvbigpIHtcXFxcbiAgICAgICAgcmMoJ2h0dHBzOi8vZ2l0ZWUuY29tL21pc3R5d2F0ZXIvaGlrZXJfaW5mby9yYXcvbWFzdGVyL2YnLCAyNCk7XFxcXG4gICAgICAgIHZhciBkID0gW107XFxcXG4gICAgICAgIHZhciBob3N0ID0gJ2h0dHA6Ly90aW5nc2h1Lmt1d28uY24nO1xcXFxuICAgICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9zZWFyY2gua3V3by5jbi9yLnM/Y2xpZW50PWt0JmFsbD0nICsgbmFtZSArICcmZnQ9YWxidW0mcG49JyArIChwYWdlIC0gMSkgKyAnJnJuPTEwJnJmb3JtYXQ9anNvbiZlbmNvZGluZz11dGY4JnNob3dfc2VyaWVzX2xpc3Rlbj0xJztcXFxcbiAgICAgICAgICAgIHZhciBodG1sID0gZmV0Y2hQQyh1cmwpO1xcXFxuICAgICAgICAgICAgZXZhbCgndmFyIGpzb24gPSAnICsgaHRtbClcXFxcbiAgICAgICAgICAgIHZhciBsaXN0ID0ganNvbi5hbGJ1bWxpc3Q7XFxcXG4gICAgICAgICAgICBmb3IgKHZhciBsaXN0IG9mIGxpc3QpIHtcXFxcbiAgICAgICAgICAgICAgICAvL3ZhciB1ID0gdXJsYShwZGZoKGxpc3QsICcuczImJmEmJmhyZWYnKSwgaG9zdCk7XFxcXG4gICAgICAgICAgICAgICAgLy92YXIgZGVzYyA9IHBkZmgobGlzdCwgJy5zMyYmYSYmVGV4dCcpO1xcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5pbWcsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3QuYXJ0aXN0LFxcXFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBsaXN0LmluZm8sXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9zZWFyY2gua3V3by5jbi9yLnM/c3R5cGU9YWxidW1pbmZvJmFsYnVtaWQ9JyArIGxpc3QuaWQgKyAnJnBuPTAmcm49JyArIGxpc3QubXVzaWNjbnQgKyAnJnNob3dfY29weXJpZ2h0X29mZj0xJnZpcHZlcj1NVVNJQ184LjIuMC4wX0JDUzE3Jm1vYmk9MSZzb3J0Ynk9MyZpc2t3Ym9vaz0xJyxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH0gICAgICAgXFxcXG4gICAgICAgIHJldHVybiBkO1xcXFxuICAgIH0sXFxcXG4gICAgXFxcXFxcXCLkuoznuqdcXFxcXFxcIjogZnVuY3Rpb24oc3VybCkge1xcXFxuICAgICAgICByYygnaHR0cHM6Ly9naXRlZS5jb20vbWlzdHl3YXRlci9oaWtlcl9pbmZvL3Jhdy9tYXN0ZXIvZicsIDI0KTtcXFxcbiAgICAgICAgTVlfVVJMID0gc3VybDtcXFxcbiAgICAgICAgbG9nKHN1cmwpXFxcXG4gICAgICAgIGxldCBodG1sID0gZmV0Y2hQQyhzdXJsKTtcXFxcbiAgICAgICAgdmFyIGxpc3QgPSBKU09OLnBhcnNlKGh0bWwpOyAgICAgICBcXFxcbiAgICAgICAgbGV0IOS9nCwg54q2LCDnsbssIOWtlywg56ugLCDmm7QsIOeugCwg5Zu+O1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAg5L2cID0gJ+aSremfs++8micrbGlzdC5hcnRpc3Q7XFxcXG4gICAgICAgICAgICDnirYgPSBsaXN0LnRpdGxlXFxcXG4gICAgICAgICAgICAvL+eKtiA9IHhwYXRoKGh0bWwsICcvL3BbY29udGFpbnModGV4dCgpLFxcXFxcXFwi54q2wqDCoOaAgVxcXFxcXFwiKV0vdGV4dCgpJyk7XFxcXG4gICAgICAgICAgICAvL+WtlyA9IHhwYXRoKGh0bWwsICcvL3BbY29udGFpbnModGV4dCgpLFxcXFxcXFwi5a2X5pWw77yaXFxcXFxcXCIpXS90ZXh0KCknKTtcXFxcbiAgICAgICAgICAgIOabtCA9IFxcXFxcXFwi5pyA5ZCO5pu05paw77yaXFxcXFxcXCIrbGlzdC5wdWI7XFxcXG4gICAgICAgICAgICAvL+eroCA9ICfmnIDmlrDnq6DoioLvvJonICsgcGRmaChodG1sLCAnLnNlY3Rpb24tbGlzdCYmYSYmVGV4dCcpO1xcXFxuICAgICAgICAgICAg566AID0gbGlzdC5pbmZvO1xcXFxuICAgICAgICAgICAg5Zu+ID0gbGlzdC5pbWc7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XFxcXG4gICAgICAgIGxldCBkZXRhaWwxID0gc3MoKOS9nCA/IOS9nCA6ICcnKSArICdcXFxcXFxcXG4nICsgKOexuyA/IOexuyA6ICcnKSArICdcXFxcXFxcXG4nICsgKOWtlyA/IOWtlyA6ICcnKSwgJ0NDMzM2NicpO1xcXFxuICAgICAgICBsZXQgZGV0YWlsMiA9IGNvbG9yKCjnirYgPyDnirYgOiAnJykgKyAnXFxcXFxcXFxuJyArICjnq6AgPyDnq6AgOiAnJykgKyAnXFxcXFxcXFxuJyArICjmm7QgPyDmm7QgOiAnJyksICcwMDY2OTknKTsgICAgICAgIFxcXFxuICAgICAgICBsZXQg6YCJ6ZuGID0gbGlzdC5tdXNpY2xpc3QubWFwKChkYXRhKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQg6YCJ6ZuG5YiX6KGoID0ge307XFxcXG4gICAgICAgICAgICDpgInpm4bliJfooagudGl0bGUgPSBkYXRhLm5hbWUucmVwbGFjZSgv44CKLio/44CLLywgJycpXFxcXG4gICAgICAgICAgICDpgInpm4bliJfooagudXJsID0gJ2h0dHBzOi8vbW9iaS5rdXdvLmNuL21vYmkucz9mPXdlYiZzb3VyY2U9a3dwbGF5ZXJ0dl9hcl81LjEuMC4xX0JfZmFuZ3lpdG9uZ192aC5hcGsmdHlwZT1jb252ZXJ0X3VybF93aXRoX3NpZ24mcmlkPScrZGF0YS5tdXNpY3JpZFxcXFxuICAgICAgICAgICAgcmV0dXJuIOmAiembhuWIl+ihqDtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxvZyjpgInpm4YpXFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICBkZXRhaWwxOiBkZXRhaWwxLFxcXFxuICAgICAgICAgICAgZGV0YWlsMjogZGV0YWlsMixcXFxcbiAgICAgICAgICAgIGRlc2M6IOeugHx8JycsXFxcXG4gICAgICAgICAgICBpbWc6IOWbvixcXFxcbiAgICAgICAgICAgIGxpc3Q6IOmAiembhlxcXFxuICAgICAgICB9XFxcXG4gICAgfSxcXFxcbiAgICBcXFxcXFxcIuino+aekFxcXFxcXFwiOiBmdW5jdGlvbih1cmwpIHtcXFxcbiAgICAgICAgdmFyIGQgPSBbXTtcXFxcbiAgICAgICAgdmFyIHVybCA9IEpTT04ucGFyc2UocmVxdWVzdCh1cmwpKS5kYXRhLnVybC5yZXBsYWNlKC8oLio/KVxcXFxcXFxcPy4qLyAsJyQxJylcXFxcbiAgICAgICAgcmV0dXJuIHVybCsnO3tSZWZlcmVyQCcrdXJsKyd9I2lzTXVzaWM9dHJ1ZSMnO1xcXFxuICAgIH0sXFxcXG4gICAgXFxcXFxcXCLmnIDmlrBcXFxcXFxcIjogZnVuY3Rpb24oc3VybCkge1xcXFxuICAgICAgICB2YXIgaHRtbCA9IGZldGNoUEMoc3VybCk7XFxcXG4gICAgICAgIHZhciBjb250ZW50ID0gcGRmaChodG1sLCAnLnNlY3Rpb24tbGlzdCYmYSYmVGV4dCcpO1xcXFxuICAgICAgICBzZXRSZXN1bHQoY29udGVudCk7XFxcXG4gICAgfVxcXFxufVxcXCIsXFxcImltZ1xcXCI6XFxcImh0dHA6Ly90aW5nc2h1Lmt1d28uY24vZmF2aWNvbi5pY29cXFwiLFxcXCJuYW1lXFxcIjpcXFwi6YW35oiR55WF5ZCsXFxcIixcXFwidHlwZVxcXCI6XFxcIuWQrOS5plxcXCIsXFxcInVwZGF0ZXRpbWVcXFwiOlxcXCIyMDI0LTA5LTAyIDAwOjQyOjIzXFxcIn0sXFxcInN0eXBlXFxcIjpcXFwi5ZCs5LmmXFxcIixcXFwic3VybFxcXCI6XFxcImh0dHA6Ly9zZWFyY2gua3V3by5jbi9yLnM/c3R5cGU9YWxidW1pbmZvJmFsYnVtaWQ9MzU5MzE2NTEmcG49MCZybj01MDAmc2hvd19jb3B5cmlnaHRfb2ZmPTEmdmlwdmVyPU1VU0lDXzguMi4wLjBfQkNTMTcmbW9iaT0xJnNvcnRieT0zJmlza3dib29rPTFcXFwifVwiLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLogZrpmIXiiJpcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL2VtcHR5P3R5cGU95ZCs5LmmI2ltbWVyc2l2ZVRoZW1lIyNhdXRvQ2FjaGUjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4w77yb77ybIFdpbjY077yb77ybIHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyNi4wLjAuMCBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6KFxcbigpID0+IHtcXG4gICAgcmVxdWlyZShjb25maWcu5L6d6LWWKTtcXG4gICAgZXJqaSgpO1xcbn1cXG4pKClcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInVhXCI6XCJwY1wiLFwicHJlUnVsZVwiOlwiaWYgKCFjb25maWcu5L6d6LWWKSB7XFxuICAgIC8v6L+c56iL5L6d6LWW57Si5byV5paH5Lu25Luj55CG5Zyw5Z2A5YiX6KGoXFxuICAgIGxldCByZXF1aXJlbGlzdCA9IFt7IHVybDogJ2h0dHBzOi8vZ2hwcm94eS5uZXQvaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsIHNvcnQ6IDAgfSwgIHsgdXJsOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsIHNvcnQ6IDEwIH0sICB7IHVybDogJ2h0dHBzOi8vZ2l0aHViLmpldm9ucy52aXAvaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsIHNvcnQ6IDIwIH1dXFxuICAgIGxldCByZXF1aXJlZmlsZSA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9yZXF1aXJlLmpzb25cXFwiO1xcbiAgICBpZiAoZmV0Y2gocmVxdWlyZWZpbGUpKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGV2YWwoXFxcInJlcXVpcmVsaXN0PVxcXCIgKyBmZXRjaChyZXF1aXJlZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XFxuICAgIH1cXG4gICAgcmVxdWlyZWxpc3Quc29ydChmdW5jdGlvbiAoeCwgeSkge1xcbiAgICAgICAgcmV0dXJuIHguc29ydC15LnNvcnQ7XFxuICAgIH0pO1xcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVpcmVsaXN0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB0cnkgeyAvL+i/nOeoi+S+nei1lue0ouW8lVxcbiAgICAgICAgICAgIHJlcXVpcmUocmVxdWlyZWxpc3RbaV0udXJsICsgJ3NyYzQ4NTk3OTYyL2hrL0p1L3JlcXVpcmUuanMnLCB7IHRpbWVvdXQ6IDIwMDAgfSk7XFxuICAgICAgICAgICAgaWYgKHJlbHlmaWxlKSB7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICByZXF1aXJlbGlzdFtpXS5zb3J0Kys7XFxuICAgICAgICAgICAgbG9nKGUubWVzc2FnZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgd3JpdGVGaWxlKHJlcXVpcmVmaWxlLCBKU09OLnN0cmluZ2lmeShyZXF1aXJlbGlzdCkpO1xcbiAgICBpbml0Q29uZmlnKHtcXG4gICAgICAgIOS+nei1ljogcmVseWZpbGVcXG4gICAgfSk7XFxuICAgIGxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG4gICAgbGV0IEp1Y29uZmlnID0ge307XFxuICAgIGlmIChmZXRjaChjZmdmaWxlKSkge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBldmFsKFxcXCJKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XFxuICAgIH1cXG4gICAgSnVjb25maWdbXFxcIuS+nei1llxcXCJdID0gcmVseWZpbGU7XFxuICAgIHdyaXRlRmlsZShjZmdmaWxlLCBKU09OLnN0cmluZ2lmeShKdWNvbmZpZykpO1xcbn1cXG4vL2J5LuW4heKImmDkurrmiY1cIixcInBhZ2VzXCI6XCJbe1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5L6d6LWW5paH5Lu2XFxcIixcXFwicGF0aFxcXCI6XFxcImNvbmZpZ1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBtZXRob2Q7XFxcXG5sZXQgcmVseTtcXFxcbmxldCBjZmdmaWxlID0gXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdS9jb25maWcuanNvblxcXFxcXFwiO1xcXFxuaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcXFxuICAgIGV2YWwoXFxcXFxcXCJsZXQgSnVjb25maWc9XFxcXFxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXFxcXFwiO1xcXFxcXFwiKTtcXFxcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFxcXFxcIuS+nei1llxcXFxcXFwiXS5tYXRjaCgvaHR0cChzKT86XFxcXFxcXFwvXFxcXFxcXFwvLipcXFxcXFxcXC8vKVswXSArICdTcmNKdU1ldGhvZC5qcyc7XFxcXG4gICAgcmVseSA9IEp1Y29uZmlnW1xcXFxcXFwi5L6d6LWWXFxcXFxcXCJdO1xcXFxufVxcXFxuJC5leHBvcnRzLm1ldGhvZCA9IG1ldGhvZDtcXFxcbiQuZXhwb3J0cy5yZWx5ID0gcmVseTtcXFxcbiQuZXhwb3J0cy52ZXJzaW9uID0gMTU7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5o6l5Y+j5Luj56CBXFxcIixcXFwicGF0aFxcXCI6XFxcImppZWtvdVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBtZXRob2Q7XFxcXG5sZXQgY2ZnZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnUvY29uZmlnLmpzb25cXFxcXFxcIjtcXFxcbmlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICBldmFsKFxcXFxcXFwibGV0IEp1Y29uZmlnPVxcXFxcXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgbWV0aG9kID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl0ubWF0Y2goL2h0dHAocyk/OlxcXFxcXFxcL1xcXFxcXFxcLy4qXFxcXFxcXFwvLylbMF0gKyAnU3JjSnVNZXRob2QyLmpzJztcXFxcbn1cXFxcbnJlcXVpcmUobWV0aG9kKTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLkupHlj6Pku6Tlr7zlhaVcXFwiLFxcXCJwYXRoXFxcIjpcXFwiaW1wb3J0XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuZnVuY3Rpb24gY2xvdWRpbXBvcnQodGl0bGUpIHtcXFxcbiAgICBsZXQgcmVtb3RlZmlsZTtcXFxcbiAgICBsZXQgY2ZnZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnUvY29uZmlnLmpzb25cXFxcXFxcIjtcXFxcbiAgICBpZiAoIWZpbGVFeGlzdChjZmdmaWxlKSkge1xcXFxuICAgICAgICBsZXQgSllDb2RlID0gZmV0Y2goXFxcXFxcXCJoaWtlcjovL2hvbWVAXFxcXFxcXCIrdGl0bGUpO1xcXFxuICAgICAgICBldmFsKEpTT04ucGFyc2UoSllDb2RlKS5wcmVSdWxlKTtcXFxcbiAgICB9XFxcXG4gICAgdHJ5e1xcXFxuICAgICAgICBldmFsKFxcXFxcXFwibGV0IEp1Y29uZmlnPVxcXFxcXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlbW90ZWZpbGUgPSBKdWNvbmZpZ1tcXFxcXFxcIuS+nei1llxcXFxcXFwiXS5tYXRjaCgvaHR0cChzKT86XFxcXFxcXFwvXFxcXFxcXFwvLipcXFxcXFxcXC8vKVswXSArICdTcmNKdVNldC5qcyc7XFxcXG4gICAgfWNhdGNoKGUpe31cXFxcbiAgICBcXFxcbiAgICBpZihyZW1vdGVmaWxlKXtcXFxcbiAgICAgICAgcmVxdWlyZShyZW1vdGVmaWxlKTtcXFxcbiAgICAgICAgcmV0dXJuIEpZaW1wb3J0KGlucHV0LHRpdGxlKTtcXFxcbiAgICB9ZWxzZXtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/kvp3otZbojrflj5blvILluLjvvIzpnIDlhYjmiZPlvIDogZrpmIXiiJpcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG59XFxcXG4kLmV4cG9ydHMgPSBjbG91ZGltcG9ydChcXFxcXFxcIuiBmumYheKImlxcXFxcXFwiKTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLmkJzntKLpobVcXFwiLFxcXCJwYXRoXFxcIjpcXFwic291c3VvcGFnZVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCByZWx5ZmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9jb25maWc/cnVsZT1cXFxcXFxcIitNWV9SVUxFLnRpdGxlKS5yZWx5O1xcXFxucmVxdWlyZShyZWx5ZmlsZSk7XFxcXG5sZXQgbmFtZSA9IGdldFBhcmFtKFxcXFxcXFwia2V5d29yZFxcXFxcXFwiKTtcXFxcbmxldCB0eXBlID0gZ2V0UGFyYW0oXFxcXFxcXCJ0eXBlXFxcXFxcXCIpO1xcXFxubmV3c291c3VvcGFnZShuYW1lLHR5cGUscmVseWZpbGUpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuWvvOWFpeehruiupOmhtVxcXCIsXFxcInBhdGhcXFwiOlxcXCJpbXBvcnRDb25maXJtXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IHJlbHkgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvY29uZmlnP3J1bGU9XFxcXFxcXCIrTVlfUlVMRS50aXRsZSkucmVseTtcXFxcblxcXFxucmVxdWlyZShyZWx5Lm1hdGNoKC9odHRwKHMpPzpcXFxcXFxcXC9cXFxcXFxcXC8uKlxcXFxcXFxcLy8pWzBdICsgJ1NyY0p1U2V0LmpzJyk7XFxcXG5pbXBvcnRDb25maXJtKE1ZX1JVTEUudGl0bGUpO1xcXCJ9XVwifSIsInBpY1VybCI6Imh0dHA6Ly9pbWcyLnN5Y2RuLmt1d28uY24vc3Rhci9hbGJ1bWNvdmVyLzI0MC9zNHM0Ni85My8zNzQ4NTM5ODY0LmpwZ0BSZWZlcmVyPSIsInRpdGxlIjoi6YO95biC77ya5LuO54KS6IKh5byA5aeL5pq05a+MIn0=
BK48iBhf,inputNumber.java,sharpdlt,Java,Monday 12th of May 2025 01:25:07 PM CDT,"package Work;

import java.util.Scanner;

import static Work.Print_Messages.*;

public class InputNumber {

    public static int inputCharNumber() {
        while (true) {
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine();
            if (input.length() != 1) {
                printMessage(""single_char_required"");
                continue;   // Прерывает текущую итерацию и переходит к следующей (снова идет проверять while(true))
            }

            char symbol = input.charAt(0);

            if (isItNumber(symbol)) { // Метод стоит переименовать, он не проверяет является ли метод числом
                return Character.getNumericValue(symbol);
            }
            printMessage(""not_number"");
        }
    }

    private static boolean isItNumber(char c) { // Метод стоит переименовать, он не проверяет является ли метод числом
        return c == '1' || c == '2';
    }
}
"
Wegwqc1R,wcfm_hide_archived_products,palsushobhan,PHP,Monday 12th of May 2025 01:05:02 PM CDT,"add_action('pre_get_posts', function ($query) {
    if (!$query->is_main_query()) {
        return;
    }
    if (!is_admin() && (is_shop() || is_product_category() || is_product_taxonomy() || is_product_tag() || function_exists('wcfm_is_store_page') && wcfm_is_store_page())) {
        $tax_query = $query->get('tax_query') ? $query->get('tax_query') : array();
        $tax_query[] = array(
            'taxonomy' => 'product_visibility',
            'field'    => 'slug',
            'terms'    => 'archived',
            'operator' => 'NOT IN',
        );
        $query->set('tax_query', $tax_query);
    }
});

add_filter( 'found_posts', function( $found_posts, $query ) {
    if ( ! is_admin() && $query->is_main_query() && ( $query->is_shop() || $query->get('post_type') === 'product' && $query->is_archive() || (function_exists('wcfm_is_store_page') && wcfm_is_store_page()) ) ) {
        $actual_post_count = count( $query->posts );
        return $actual_post_count;
    }
    return $found_posts;
}, 10, 2 );"
f6Tgi3vk,26898381,iamjohnrex03,CSS,Monday 12th of May 2025 01:00:53 PM CDT,"#listContainer .configurable-list-field-label {
	min-width: 100%;
}
.configurable-list-field-row {
	-webkit-flex-direction: column;
	-ms-flex-direction: column;
	flex-direction: column;
	align-items: flex-start !important;
}
.configurable-list-field-wrapper {
        flex-direction: column !important;
        width: 100% !important;
        max-width: 100%;
        margin-right: 0px !important;
}
#listContainer {
    overflow: hidden !important;
}"
yVX8sUDs,ae_controller,DubSlime,Lua,Monday 12th of May 2025 12:43:38 PM CDT,"-- ae_slave.lua
local meBridge = peripheral.find(""meBridge"")
local modem = peripheral.find(""modem"", function(_, obj) return obj.isWireless() end)

if not meBridge or not modem then error(""Missing meBridge or modem"") end
rednet.open(peripheral.getName(modem))

-- Store last broadcast for deduplication
local function getItems()
    local rawItems = meBridge.listItems()
    local items = {}
    for _, item in ipairs(rawItems) do
        local key = item.name
        items[key] = {
            name = item.displayName or item.name,
            quantity = item.amount,
            isCrafting = meBridge.isItemCrafting(item)
        }
    end
    return items
end

local function broadcastLoop()
    while true do
        local items = getItems()
        rednet.broadcast({
            type = ""ae_items"",
            items = items,
            timestamp = os.epoch(""utc"")
        }, ""ae_network"")
        sleep(2)
    end
end

local function listenLoop()
    while true do
        local id, msg, proto = rednet.receive(""ae_network"")
        if msg.type == ""ae_craft_target"" and msg.item and msg.quantity then
            print(""Craft request for: "" .. msg.item .. "" x"" .. msg.quantity)
            local success, err = pcall(function()
                meBridge.craftItem({ name = msg.item, count = msg.quantity })
            end)
            if not success then
                print(""Craft failed: "" .. tostring(err))
            end
        end
    end
end

parallel.waitForAll(broadcastLoop, listenLoop)
"
WQRRvukS,inventory_manager,DubSlime,Lua,Monday 12th of May 2025 12:37:51 PM CDT,"-- ae_main.lua (Updated Version with Pagination Fix)

-- Auto-discover peripherals
local monitor = peripheral.find(""monitor"")
local modem = peripheral.find(""modem"", function(_, obj) return obj.isWireless() end)

if not monitor or not modem then
    error(""Monitor or wireless modem not found"")
end

rednet.open(peripheral.getName(modem))
monitor.setTextScale(0.5)

-- Globals
local itemsData = {}
local itemHistory = {}
local itemTargets = {}
local sortMode = ""quantity"" -- default sorting by quantity
local blinkState = true
local page = 1
local perPage = 14
local sortedList = {}

-- Persistence
local targetFile = ""targets.txt""
local function saveTargets()
    local f = fs.open(targetFile, ""w"")
    f.write(textutils.serialize(itemTargets))
    f.close()
end

local function loadTargets()
    if fs.exists(targetFile) then
        local f = fs.open(targetFile, ""r"")
        local data = f.readAll()
        f.close()
        itemTargets = textutils.unserialize(data) or {}
    end
end

loadTargets()

-- Utils
local function formatNumber(n)
    if n > 999999 then return string.format(""%.1fM"", n / 1e6)
    elseif n > 999 then return string.format(""%.1fk"", n / 1e3)
    else return tostring(n) end
end

local function sortItems()
    sortedList = {}
    for k, v in pairs(itemsData) do table.insert(sortedList, {key=k, data=v}) end
    table.sort(sortedList, function(a, b)
        if sortMode == ""quantity"" then return a.data.quantity > b.data.quantity
        else return a.data.name < b.data.name end
    end)
end

local function draw()
    local w, h = monitor.getSize()
    local perPage = h - 4
    monitor.setBackgroundColor(colors.lightGray)
    monitor.clear()

    -- Filter buttons for sorting
    monitor.setCursorPos(1, 1)
    monitor.setTextColor(sortMode == ""alphabetical"" and colors.yellow or colors.white)
    monitor.setBackgroundColor(colors.gray)
    monitor.write(""ABC"")
    monitor.setCursorPos(6, 1)
    monitor.setTextColor(sortMode == ""quantity"" and colors.yellow or colors.white)
    monitor.setBackgroundColor(colors.gray)
    monitor.write(""Qty"")

    -- Column headers
    monitor.setCursorPos(1, 2)
    monitor.setTextColor(colors.cyan)
    monitor.write(string.format(""%-18s %-10s %-10s %-12s C"", ""Item"", ""Qty"", ""+/-"", ""Target""))
    monitor.setTextColor(colors.white)

    -- Draw item table
    sortItems()
    local totalPages = math.ceil(#sortedList / perPage)
    if page > totalPages then page = totalPages end
    if page < 1 then page = 1 end

    local start = (page - 1) * perPage + 1
    for i = 0, perPage - 1 do
        local index = start + i
        local entry = sortedList[index]
        if not entry then break end
        local y = i + 3
        local bgColor = (i % 2 == 0) and colors.white or colors.lightGray
		local txtColor = (i % 2 ~= 0) and colors.white or colors.lightGray
        monitor.setBackgroundColor(bgColor)

        -- Text Color adjustment based on background for visibility
        monitor.setCursorPos(1, y)

        local data = entry.data
        local name = data.name:sub(1, 18)
        local qty = formatNumber(data.quantity)
        local old = itemHistory[entry.key]
        local diff = old and (data.quantity - old) or 0
        local trendStr = string.format(""%+d"", diff):sub(1, 7)

        if diff > 0 then monitor.setTextColor(colors.lime)
        elseif diff < 0 then monitor.setTextColor(colors.red)
        else monitor.setTextColor(txtColor) end

        local target = itemTargets[entry.key] or ""-""
        local craftingChar = (data.isCrafting and blinkState) and ""*"" or "" ""

        monitor.write(string.format(""%-18s %-10s %-10s %-12s %s"",
            name, qty, trendStr, target, craftingChar))
    end

    -- Footer with pagination and sorting options
    monitor.setBackgroundColor(colors.lightGray)
    monitor.setCursorPos(1, h)
    monitor.setTextColor(colors.white)
    monitor.setBackgroundColor(colors.blue)
    monitor.write(""< Prev  Pg: "" .. page .. "" / "" .. totalPages .. ""  Next >"")

    -- Sort selector on the bottom right
    monitor.setCursorPos(w - 10, h)
    monitor.setTextColor(sortMode == ""alphabetical"" and colors.yellow or colors.white)
    monitor.setBackgroundColor(colors.blue)
    monitor.write(""ABC"")  -- Toggle sorting mode
end

local function adjustTarget(key, delta)
    if not itemTargets[key] then itemTargets[key] = 0 end
    itemTargets[key] = math.max(0, itemTargets[key] + delta)
    if itemTargets[key] == 0 then itemTargets[key] = nil end
    saveTargets()
    rednet.broadcast({ type = ""ae_craft_target"", item = key, quantity = itemTargets[key] }, ""ae_network"")
end

local function handleTouch(x, y)
    local w, h = monitor.getSize()
    local perPage = h - 4
    if y == 1 then
        -- Handle sorting buttons
        if x >= 1 and x <= 5 then
            sortMode = ""alphabetical""
        elseif x >= 6 and x <= 10 then
            sortMode = ""quantity""
        end
        return
    elseif y >= 3 and y < 3 + perPage then
        local index = (page - 1) * perPage + (y - 3 + 1)
        local entry = sortedList[index]
        if not entry then return end
        local key = entry.key

        -- Button hitboxes for target adjustments
        if x >= 35 and x <= 39 then adjustTarget(key, 1)
        elseif x >= 40 and x <= 45 then adjustTarget(key, 10)
        elseif x >= 46 and x <= 52 then adjustTarget(key, 100)
        elseif x >= 25 and x <= 29 then adjustTarget(key, -1)
        elseif x >= 19 and x <= 24 then adjustTarget(key, -10)
        elseif x >= 12 and x <= 18 then adjustTarget(key, -100)
        end
    elseif y == h and x >= 1 and x <= 5 then
        -- ""Prev"" button
        if page > 1 then page = page - 1 end
    elseif y == h and x >= w - 7 and x <= w then
        -- ""Next"" button
        local totalPages = math.ceil(#sortedList / perPage)
        if page < totalPages then page = page + 1 end
    end
end

local function listen()
    while true do
        local id, msg, proto = rednet.receive(""ae_network"")
        if msg.type == ""ae_items"" then
            for k, v in pairs(msg.items) do
                if itemsData[k] then
                    itemHistory[k] = itemsData[k].quantity
                end
                itemsData[k] = v
            end
        end
    end
end

local function blink()
    while true do
        blinkState = not blinkState
        sleep(0.5)
    end
end

local function refresher()
    while true do
        draw()
        sleep(0.25)
    end
end

local function clicker()
    while true do
        local _, _, x, y = os.pullEvent(""monitor_touch"")
        handleTouch(x, y)
    end
end

parallel.waitForAll(listen, refresher, blink, clicker)
"
3bxvWTsA,Fake char (not mine),scriptingtales,Lua,Monday 12th of May 2025 12:36:07 PM CDT,"-- fakechar by fluffiflower

WorldModel = Instance.new(""WorldModel"")
BillGui = Instance.new(""BillboardGui"", WorldModel)
Part1 = Instance.new(""Part"")
SpecialMesh2 = Instance.new(""SpecialMesh"")
char = owner.Character
HighLight = Instance.new(""Highlight"")
llerp = CFrame.Angles(0,0,0)
rlerp = CFrame.Angles(0,0,0)
Hum = char.Humanoid
orien = CFrame.new(0,0,0)
sin = 5
Part3 = Instance.new(""Part"")
Part4 = Instance.new(""Part"")
Part5 = Instance.new(""Part"")
Part6 = Instance.new(""Part"")
ParticleEmitter7 = Instance.new(""ParticleEmitter"")
SurfaceGui8 = Instance.new(""SurfaceGui"")
TextLabel9 = Instance.new(""TextLabel"")
WorldModel.Parent = script
HighLight.FillTransparency = 1
HighLight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
HighLight.Parent = WorldModel
pos = char.HumanoidRootPart.CFrame
--WorldModel.PrimaryPart = owner.Character.Torso
Part1.Name = ""Handle""
Part1.Parent = WorldModel
Part1.CFrame = CFrame.new(70.1109924, 3.70699978, 43.8660011, 0.763127089, -0.64034456, 0.0871551633, 0.642790556, 0.766042054, 3.15712356e-07, -0.0667647198, 0.0560222715, 0.996194839)
Part1.Orientation = Vector3.new(0, 5, 40)
Part1.Rotation = Vector3.new(0, 5, 40)
Part1.Size = Vector3.new(1, 1, 1)
Part1.Anchored = true
Part1.BottomSurface = Enum.SurfaceType.Smooth
Part1.CanCollide = false
Part1.TopSurface = Enum.SurfaceType.Smooth
SpecialMesh2.Name = ""SpecialMesh""
SpecialMesh2.Parent = Part1
SpecialMesh2.MeshId = ""rbxassetid://5355486008""
SpecialMesh2.TextureId = ""http://www.roblox.com/asset/?id=6815179122""
SpecialMesh2.MeshType = Enum.MeshType.FileMesh
Part3.Parent = WorldModel
Part3.CFrame = CFrame.new(70.1119232, 0.316749007, 43.9393806, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part3.Color = Color3.new(0.415686, 0.223529, 0.0352941)
Part3.Size = Vector3.new(5.954044342041016, 0.21115493774414062, 5.073566436767578)
Part3.Anchored = true
Part3.BottomSurface = Enum.SurfaceType.Smooth
Part3.BrickColor = BrickColor.new(""Burnt Sienna"")
Part3.Material = Enum.Material.Wood
Part3.TopSurface = Enum.SurfaceType.Smooth
Part3.brickColor = BrickColor.new(""Burnt Sienna"")
Part4.Parent = WorldModel
Part4.CFrame = CFrame.new(70.1126175, 0.527921021, 43.9210892, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part4.Color = Color3.new(0.415686, 0.223529, 0.0352941)
Part4.Size = Vector3.new(5.6991071701049805, 0.21115493774414062, 4.799654960632324)
Part4.Anchored = true
Part4.BottomSurface = Enum.SurfaceType.Smooth
Part4.BrickColor = BrickColor.new(""Burnt Sienna"")
Part4.Material = Enum.Material.Wood
Part4.TopSurface = Enum.SurfaceType.Smooth
Part4.brickColor = BrickColor.new(""Burnt Sienna"")
Part5.Parent = WorldModel
Part5.CFrame = CFrame.new(70.1395645, 0.105577469, 43.9530144, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part5.Color = Color3.new(0.415686, 0.223529, 0.0352941)
Part5.Size = Vector3.new(6.2868804931640625, 0.21115493774414062, 5.327659606933594)
Part5.Anchored = true
Part5.BottomSurface = Enum.SurfaceType.Smooth
Part5.BrickColor = BrickColor.new(""Burnt Sienna"")
Part5.Material = Enum.Material.Wood
Part5.TopSurface = Enum.SurfaceType.Smooth
Part5.brickColor = BrickColor.new(""Burnt Sienna"")
Part6.Parent = WorldModel
Part6.CFrame = CFrame.new(70.1126175, 3.94891024, 43.9210892, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part6.Color = Color3.new(0.415686, 0.415686, 0.415686)
Part6.Transparency = 0.75
Part6.Size = Vector3.new(5.6991071701049805, 6.62999963760376, 4.799654960632324)
Part6.Anchored = true
Part6.BottomSurface = Enum.SurfaceType.Smooth
Part6.BrickColor = BrickColor.new(""Dark grey"")
Part6.Material = Enum.Material.Glass
Part6.TopSurface = Enum.SurfaceType.Smooth
Part6.brickColor = BrickColor.new(""Dark grey"")
ParticleEmitter7.Parent = Part6
ParticleEmitter7.LightInfluence = 1
ParticleEmitter7.Lifetime = NumberRange.new(0.25, 0.25)
SurfaceGui8.Parent = WorldModel
SurfaceGui8.LightInfluence = 1
SurfaceGui8.ClipsDescendants = true
SurfaceGui8.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
SurfaceGui8.Adornee = Part6
TextLabel9.Parent = SurfaceGui8
TextLabel9.Position = UDim2.new(0, 500, 0, 550)
TextLabel9.Size = UDim2.new(0, 200, 0, 50)
TextLabel9.BackgroundColor = BrickColor.new(""Institutional white"")
TextLabel9.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel9.BackgroundTransparency = 1
TextLabel9.Font = Enum.Font.Gotham
TextLabel9.FontSize = Enum.FontSize.Size28
TextLabel9.Text = ""- just a sword nothing else""
TextLabel9.TextColor = BrickColor.new(""Institutional white"")
TextLabel9.TextColor3 = Color3.new(1, 0, 0)
TextLabel9.TextSize = 14
TextLabel9.TextSize = 28
char.Parent = owner

local remote1 = Instance.new(""RemoteEvent"", owner.Character)
remote1.Name = ""owo""

local function replicate1()
	local part12 = Instance.new(""Part"", workspace)
	part12.Size = Vector3.new(5,5,5)
	part12.Shape = Enum.PartType.Ball
	part12.Anchored = true
	part12.Position = Part3.Position + Vector3.new(0,0,3)
end

remote1.OnServerEvent:Connect(replicate1)

NLS([[
	local inputService = game:GetService(""UserInputService"")
	local mouse = owner:GetMouse()
	local remote = owner.Character:WaitForChild(""owo"")

	inputService.InputBegan:Connect(function(input, gameProcess)
	  if gameProcess then
	    return
	  end
	  if input.UserInputType == Enum.UserInputType.Keyboard then
	    if input.KeyCode.Name == ""Z"" then
	      remote:FireServer()
	    end
	  end
	end)
	]], owner.Character)

spawn(function()
	while wait() do
		Part1.Locked = true
		Part3.Locked = true
		Part4.Locked = true
		Part5.Locked = true
		Part6.Locked = true

		sin = sin + .5

		if Hum.MoveDirection.Magnitude > 0 then
			orien = CFrame.new(Vector3.new(0,0,0), Hum.MoveDirection)
			orien = orien-orien.Position
			llerp = llerp:Lerp(CFrame.Angles(math.rad(math.sin(sin)*35),0,0), .55)
			rlerp = rlerp:Lerp(CFrame.Angles(math.rad(-math.sin(sin)*35),0,0), .55)
		else
			llerp = llerp:Lerp(CFrame.Angles(0,0,0), .25)
			rlerp = rlerp:Lerp(CFrame.Angles(0,0,0), .25)
		end

		Part6.CFrame = CFrame.new(Part6.Position - Vector3.new(0,0,0) + (Hum.MoveDirection/5))*orien
		Part5.CFrame = CFrame.new(Part5.Position + (Hum.MoveDirection/5))*orien
		Part4.CFrame = CFrame.new(Part4.Position + (Hum.MoveDirection/5))*orien
		Part3.CFrame = CFrame.new(Part3.Position + (Hum.MoveDirection/5))*orien
		Part1.CFrame = CFrame.new(Part1.Position + (Hum.MoveDirection/5))*orien
		pos = pos:Lerp(Part6.CFrame, .5)
		char:SetPrimaryPartCFrame(pos)
	end
end)

owner.Chatted:Connect(function(message)
	
	local TextDial = Instance.new(""TextBox"", BillGui)

	BillGui.Size = UDim2.new(0, 200, 0, 50)
	BillGui.Adornee = Part6
	BillGui.AlwaysOnTop = true
	BillGui.MaxDistance = math.huge
	BillGui.StudsOffset = Vector3.new(0,3,0)

	TextDial.Text = message
	TextDial.TextEditable = false
	TextDial.Font = Enum.Font.Gotham
	TextDial.BackgroundTransparency = 0
	TextDial.BackgroundColor3 = Color3.new(0, 0, 0)
	TextDial.TextColor = BrickColor.Yellow()
	TextDial.BorderColor = BrickColor.White()
	TextDial.Position = UDim2.new(0, 0, 0, 0)
	TextDial.Size = UDim2.new(0, 200, 0, 50)
	TextDial.TextColor3 = Color3.new(255, 255, 255)
	TextDial.TextScaled = true

	local text = message
	for i=1 , #text do
		TextDial.Text = string.sub(text,1,i)
		wait(0.2)   -- detemines how slow text should be typed
	end	
	repeat TextDial:Destroy() wait(15) until message
end)"
WqHhfXtr,2025-05-12T20:28:08.303058,powerampache,PHP,Monday 12th of May 2025 12:28:09 PM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.app.ActivityThread.main(ActivityThread.java:8919)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:578)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1103)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
9kCbuACv,Roblox Anti Sit script,Steamhesaproblox,RBScript,Monday 12th of May 2025 12:13:41 PM CDT,"loadstring(game:HttpGet('https://paste.myconan.net/573222.txt'))()

local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")

local player = Players.LocalPlayer

local function neutralizarAsiento(asiento)
	if asiento:IsA(""Seat"") or asiento:IsA(""VehicleSeat"") then
		asiento.Disabled = true
		asiento.CanTouch = false
		asiento:SetAttribute(""Neutralizado"", true)
	end
end

for _, objeto in ipairs(Workspace:GetDescendants()) do
	neutralizarAsiento(objeto)
end

Workspace.DescendantAdded:Connect(function(obj)
	if obj:IsA(""Seat"") or obj:IsA(""VehicleSeat"") then
		task.wait(0.1)
		neutralizarAsiento(obj)
	end
end)

player.CharacterAdded:Connect(function(char)
	local humanoid = char:WaitForChild(""Humanoid"")
	humanoid:GetPropertyChangedSignal(""Sit""):Connect(function()
		if humanoid.Sit then
			humanoid.Sit = false
		end
	end)
end)

print(""Anti-sit is working.... Men.. I hate that chair..."")"
ZzKsD4mU,Pörssisähkö,Ardetus,YAML,Monday 12th of May 2025 11:46:18 AM CDT,"type: custom:apexcharts-card
experimental:
  color_threshold: true
graph_span: 2d
header:
  title: Energy price today (snt/kWh)
  show: true
span:
  start: day
now:
  show: true
  label: "" ""
locale: fi
series:
  - entity: sensor.nordpool
    color_threshold:
      - value: -10
        color: green
        opacity: 1
      - value: 7
        color: orange
      - value: 13
        color: red
    type: column
    show:
      legend_value: false
    name: "" ""
    data_generator: |
      return entity.attributes.raw_today.map((start, index) => {
        return [new Date(start[""start""]).getTime(), entity.attributes.raw_today[index][""value""]];
      });
  - entity: sensor.nordpool
    color_threshold:
      - value: -10
        color: green
        opacity: 1
      - value: 6
        color: orange
      - value: 11
        color: red
    type: column
    show:
      legend_value: false
    name: "" ""
    data_generator: |
      return entity.attributes.raw_tomorrow.map((start, index) => {
        return [new Date(start[""start""]).getTime(), entity.attributes.raw_tomorrow[index][""value""]];
      });
"
EVZ2F8hK,fmt-package,AlexNovoross87,Go,Monday 12th of May 2025 11:40:57 AM CDT,"fmt пакет
 Пакет fmt предоставляет функции для печати в терминале и форматирования строк.
 Пакет fmt предоставляет следующие функции:

 Printf: отформатированный текст в терминал с использованием вербов и аргументов.
 Print: Печатает текст в терминал без форматирования.
 Println: Печатает текст в терминал и добавляет символ новой строки в конце.

 Варианты F и S вышеперечисленных функций:
 Функции, которые печатают в поток данных: Fprintf, Fprint, Fprintln.
 Функции, которые печатают в новую строку: Sprintf, Sprint, Sprintin.

Функция Printf использует вербы для описания того, как должны быть выведены данные
----------------------------------------------------------------------------------
Verb	Описание
%v	   По умолчанию
%t	   ""true"" or ""false""
%c	    Символ
%X   	Шестнадцатеричный	код
%U	    Unicode format
%e      Научная нотация

Управляющие последовательности (escape sequences) позволяют вставлять специальные символы в строки
Управляющие последовательности Описание
\\ Backslash
\' Одинарная кавычка
\"" Двойная кавычка
\n Перевод строки
\u or \U Unicode (2byte & 4byte)
\х Сырые байты (в виде шестнадцатеричных цифр)

Пример: Printf
fmt.Printf(""Hello, world!\n"")
fmt.Printf(’%v, %v!\n"", ""Hello"", ""world"")
fmt.Printf(""This is a \""Quote\""\n"")


Пример: Sprintf
func surround(msg string, left, right rune) string { 
return fmt.Sprintf(""%c%v%c"", left, msg, right)
}
surrounded := surround (""this message"", '(', ')')
fmt Println(surrounded)
// (this message) будет окружено скобками




"
ZDkMiejd,testing,AlexNovoross87,Go,Monday 12th of May 2025 11:39:42 AM CDT,"Настройки
Тесты пишутся в отдельных файлах, используя имя файла, который они тестируют
Если имя файла : importantPkg.go , то имя файла с тестом должно быть: importantPkg_test.go
Модульные тесты должны находиться в том же пакете
Пакет testing используется для создания тестов и должен быть импортирован в каждом файле с тестами.

sample.go
---------
package main
import ""regexp”

func IsValidEmail(addr string"") bool { 
    re, ok := regexp.Compile( .+@.+\..+ ) 
    if ok != nil {
          panic(""failed to compile regex"") 
          } else {
         return re.Match([]byte(addr))
  }
}

sample_test.go
--------------
package main
import ""testing""
func TestIsValidEmail(t *testing.T) {
	data := ""email@example.com""
	if !IsValidEmail(data) {
		t.Errorf(""IsValidEmail(%v)=false, want true"", data)
	}
}

Доступные функции тестирования:
В пакете testing доступно множество функций для тестирования программного обеспечения
Fail() - Пометить тест как неудавшийся (не пройденный)
Errorf(string) - Пометить тест как неудачный и добавить сообщение
FailNow() - Пометить тест как неудавшийся (не пройденный) и прервать текущий тест
Fatalf(string) - Пометить тест как неудачный (не пройденный), прервать выполнение и добавить сообщение
Logf() - Эквивалент функции Printf(), но выводит сообщение только при неуспешном тесте

====================================================================

Доступные функции тестирования
| В пакете testing доступно множество функций для тестирования программного обеспечения
| Fail() - Пометить тест как неудавшийся (не пройденный)
I Errorf(string) - Пометить тест как неудачный и добавить сообщение
| FailNow() - Пометить тест как неудавшийся (не пройденный) и прервать текущий тест
| Fatalf(string) - Пометить тест как неудачный (не пройденный), прервать выполнение и добавить сообщение
| Logf() - Эквивалент функции Printf(), но выводит сообщение только при неуспешном тесте


------------------------------------------------------------------------------

ТЕСТОВЫЕ ТАБЛИЦЫ

func TestIsValidEmaiITable(t *testing.T) {
	//Срез анонимных структур
  table := []struct {
		email string
		want  bool
	}{
		//с их инициализацией
    {""email@exaaple.com"", true},
		{""missing@tld"", false},
		{""missing@tld"", true},
	}

	for _, data := range table {
		result := IsValidEmail(data.email)
		if result != data.want {
			t.Errorf(""%v: %t, want: %t"", data.email, result, data.want)
		}
	} //range

} //foo"
dXQHg2CV,Untitled,violoqq2312,JSON,Monday 12th of May 2025 11:18:47 AM CDT,"[
    {
        ""id"": 1,
        ""in_wishlist"": false,
        ""price"": {
            ""start_price"": 8490,
            ""final_price"": 8490
        },
        ""short_description"": ""Научитесь создавать мини-тортики в формате бенто с красивым декором и нежным вкусом."",
        ""slug"": ""master-class-1"",
        ""name"": ""Бенто-торт"",
        ""long_description"": ""Научитесь создавать мини-тортики в формате бенто с красивым декором и нежным вкусом.Научитесь создавать мини-тортики в формате бенто с красивым декором и нежным вкусом.Научитесь создавать мини-тортики в формате бенто с красивым декором и нежным вкусом.Научитесь создавать мини-тортики в формате бенто с красивым декором и нежным вкусом.Научитесь создавать мини-тортики в формате бенто с красивым декором и нежным вкусом."",
        ""bucket_link"": [
            {
                ""url"": ""https://example.com/image-1.png""
            }
        ],
        ""available_flag"": true,
        ""parameters"": {
            ""parameters"": {
                ""Адрес"": [
                    ""Кремлевский дворец""
                ],
                ""Контакты"": [
                    ""+7 (007) МММ 77-77""
                ],
                ""Возраст"": [
                    ""12+""
                ],
                ""Продолжительность"": [
                    ""2 часа""
                ]
            },
            ""parameters_order"": [
                ""Адрес"",
                ""Контакты"",
                ""Возраст"",
                ""Продолжительность""
            ]
        },
        ""details"": [
            ""🍰 сборка бенто-торта"",
            ""🧁 выравнивание кремом"",
            ""🎨 Декорирование на ваш вкус""
        ],
        ""score_product_page"": 3005,
        ""events"": [
            {
                ""id"": 1,
                ""start_datetime"": ""2024-04-01T14:00:00Z"",
                ""end_datetime"": ""2024-04-01T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299211Z""
            },
            {
                ""id"": 2,
                ""start_datetime"": ""2024-04-02T14:00:00Z"",
                ""end_datetime"": ""2024-04-02T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299226Z""
            },
            {
                ""id"": 3,
                ""start_datetime"": ""2024-04-03T14:00:00Z"",
                ""end_datetime"": ""2024-04-03T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299237Z""
            },
            {
                ""id"": 4,
                ""start_datetime"": ""2024-04-04T14:00:00Z"",
                ""end_datetime"": ""2024-04-04T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299249Z""
            },
            {
                ""id"": 5,
                ""start_datetime"": ""2024-04-05T14:00:00Z"",
                ""end_datetime"": ""2024-04-05T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299257Z""
            }
        ]
    },
    {
        ""id"": 2,
        ""in_wishlist"": false,
        ""price"": {
            ""start_price"": 8490,
            ""final_price"": 8490
        },
        ""short_description"": ""Создайте стильный и уникальный эко-шоппер с авторским дизайном."",
        ""slug"": ""master-class-2"",
        ""name"": ""Декорирование эко-шопперов"",
        ""long_description"": ""Создайте стильный и уникальный эко-шоппер с авторским дизайном.Создайте стильный и уникальный эко-шоппер с авторским дизайном.Создайте стильный и уникальный эко-шоппер с авторским дизайном.Создайте стильный и уникальный эко-шоппер с авторским дизайном.Создайте стильный и уникальный эко-шоппер с авторским дизайном."",
        ""bucket_link"": [
            {
                ""url"": ""https://example.com/image-2.png""
            }
        ],
        ""available_flag"": true,
        ""parameters"": {
            ""parameters"": {
                ""Адрес"": [
                    ""Кремлевский дворец""
                ],
                ""Контакты"": [
                    ""+7 (007) МММ 77-77""
                ],
                ""Возраст"": [
                    ""10+""
                ],
                ""Продолжительность"": [
                    ""1.5 часа""
                ]
            },
            ""parameters_order"": [
                ""Адрес"",
                ""Контакты"",
                ""Возраст"",
                ""Продолжительность""
            ]
        },
        ""details"": [
            ""🎨 Роспись акриловыми красками"",
            ""🪡 Вышивка и аппликация"",
            ""✨ Полный полет фантазии""
        ],
        ""score_product_page"": 3005,
        ""events"": [
            {
                ""id"": 1,
                ""start_datetime"": ""2024-04-01T14:00:00Z"",
                ""end_datetime"": ""2024-04-01T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299270Z""
            },
            {
                ""id"": 2,
                ""start_datetime"": ""2024-04-02T14:00:00Z"",
                ""end_datetime"": ""2024-04-02T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299280Z""
            },
            {
                ""id"": 3,
                ""start_datetime"": ""2024-04-03T14:00:00Z"",
                ""end_datetime"": ""2024-04-03T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299290Z""
            },
            {
                ""id"": 4,
                ""start_datetime"": ""2024-04-04T14:00:00Z"",
                ""end_datetime"": ""2024-04-04T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299300Z""
            },
            {
                ""id"": 5,
                ""start_datetime"": ""2024-04-05T14:00:00Z"",
                ""end_datetime"": ""2024-04-05T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299318Z""
            }
        ]
    },
    {
        ""id"": 3,
        ""in_wishlist"": false,
        ""price"": {
            ""start_price"": 8490,
            ""final_price"": 8490
        },
        ""short_description"": ""Погрузитесь в атмосферу уюта и создайте собственную ароматическую свечу."",
        ""slug"": ""master-class-3"",
        ""name"": ""Создание ароматических свечей в контейнере"",
        ""long_description"": ""Погрузитесь в атмосферу уюта и создайте собственную ароматическую свечу.Погрузитесь в атмосферу уюта и создайте собственную ароматическую свечу.Погрузитесь в атмосферу уюта и создайте собственную ароматическую свечу.Погрузитесь в атмосферу уюта и создайте собственную ароматическую свечу.Погрузитесь в атмосферу уюта и создайте собственную ароматическую свечу."",
        ""bucket_link"": [
            {
                ""url"": ""https://example.com/image-3.png""
            }
        ],
        ""available_flag"": true,
        ""parameters"": {
            ""parameters"": {
                ""Адрес"": [
                    ""Кремлевский дворец""
                ],
                ""Контакты"": [
                    ""+7 (007) МММ 77-77""
                ],
                ""Возраст"": [
                    ""14+""
                ],
                ""Продолжительность"": [
                    ""1.5 часа""
                ]
            },
            ""parameters_order"": [
                ""Адрес"",
                ""Контакты"",
                ""Возраст"",
                ""Продолжительность""
            ]
        },
        ""details"": [
            ""🕯️ Работа с натуральным воском"",
            ""🌸 Добавление ароматических масел"",
            ""✨ Декорирование свечей""
        ],
        ""score_product_page"": 3005,
        ""events"": [
            {
                ""id"": 1,
                ""start_datetime"": ""2024-04-01T14:00:00Z"",
                ""end_datetime"": ""2024-04-01T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299337Z""
            },
            {
                ""id"": 2,
                ""start_datetime"": ""2024-04-02T14:00:00Z"",
                ""end_datetime"": ""2024-04-02T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299344Z""
            },
            {
                ""id"": 3,
                ""start_datetime"": ""2024-04-03T14:00:00Z"",
                ""end_datetime"": ""2024-04-03T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299350Z""
            },
            {
                ""id"": 4,
                ""start_datetime"": ""2024-04-04T14:00:00Z"",
                ""end_datetime"": ""2024-04-04T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299356Z""
            },
            {
                ""id"": 5,
                ""start_datetime"": ""2024-04-05T14:00:00Z"",
                ""end_datetime"": ""2024-04-05T16:00:00Z"",
                ""available_seats"": 8,
                ""occupied_seats"": 0,
                ""created_at"": ""2025-05-12T16:16:47.299362Z""
            }
        ]
    }
]
"
yzPGQmaN,Untitled,Josif_tepe,C++,Monday 12th of May 2025 11:08:51 AM CDT,"#include <iostream>
using namespace std;


int rec(int x, int delitel) {
    if(delitel > x) {
        return 0;
    }
    
    if(x % delitel == 0) {
        return rec(x, delitel + 1) + 1;
    }
    else {
        return rec(x, delitel + 1);
    }
}
int main() {
    int r = rec(100, 1);
    cout << r << endl;
    return 0;
}
// rec(6, 1) = rec(6, 2) + 1 = 3 + 1 = 4
// rec(6, 2) = rec(6, 3) + 1 = 2 + 1 = 3
// rec(6, 3) = rec(6, 4) + 1 = 1 + 1 = 2
// rec(6, 4) = rec(6, 5) = 1
// rec(6, 5) = rec(6, 6) = 1
// rec(6, 6) = rec(6, 7) + 1 = 0 + 1 = 1
// rec(6, 7) = 0

"
iHeiPrDq,Untitled,hodifa_almosa_0966,Lua,Monday 12th of May 2025 11:01:58 AM CDT,v14.0
NRiMWjLh,Untitled,hodifa_almosa_0966,Lua,Monday 12th of May 2025 11:00:56 AM CDT,0000_0006_2409_5316_CAF2_5B03_6E00_01DB.
YuvJPMGz,Untitled,Josif_tepe,C++,Monday 12th of May 2025 10:58:52 AM CDT,"#include <iostream>
using namespace std;


int rec(int x) {
    if(x == 0) {
        return 0;
    }
    int cifra = x % 10;
    
    if(cifra % 2 == 1) {
        return rec(x / 10) + 1;
    }
    else {
        return rec(x / 10) + 0;
    }
}
int main() {
    int r = rec(2222);
    cout << r << endl;
    return 0;
}
// rec(1234) = rec(123) + 1 = 1 + 1 = 2
// rec(123) = rec(12) = 1
// rec(12) = rec(1) + 1 = 0 + 1 = 1
// rec(1) = rec(0) = 0
// rec(0) = 0

"
T0sRUrMM,Untitled,Josif_tepe,C++,Monday 12th of May 2025 10:57:26 AM CDT,"#include <iostream>
using namespace std;


int rec(int x) {
    if(x == 0) {
        return 0;
    }
    int cifra = x % 10;
    
    if(cifra % 2 == 0) {
        return rec(x / 10) + 1;
    }
    else {
        return rec(x / 10) + 0;
    }
}
int main() {
    int r = rec(1234);
    cout << r << endl;
    return 0;
}
// rec(1234) = rec(123) + 1 = 1 + 1 = 2
// rec(123) = rec(12) = 1
// rec(12) = rec(1) + 1 = 0 + 1 = 1
// rec(1) = rec(0) = 0
// rec(0) = 0

"
hbe6mG9F,Untitled,Josif_tepe,C++,Monday 12th of May 2025 10:49:07 AM CDT,"#include <iostream>
using namespace std;


int rec(int x) {
    if(x == 0) {
        return 0;
    }
    int cifra = x % 10;
    
    return rec(x / 10) + cifra;
}
int main() {
    int r = rec(1234);
    cout << r << endl;
    return 0;
}
// rec(1234) = rec(123) + 4 = 6 + 4 = 10
// rec(123) = rec(12) + 3 = 3 + 3 = 6
// rec(12) = rec(1) + 2 = 1 + 2 = 3
// rec(1) = rec(0) + 1 = 0 + 1 = 1
// rec(0) = 0

"
eFK3Ji9n,2025-05-12T17:48:50.370121,powerampache,PHP,Monday 12th of May 2025 10:48:50 AM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:834)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1124)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":45},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":2438851807,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1124,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":834,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
5Zavy3i2,Untitled,Josif_tepe,C++,Monday 12th of May 2025 10:37:17 AM CDT,"#include <iostream>
using namespace std;

int rec(int x) {
    if(x > 5) {
        return 0;
    }
    return rec(x + 1) + x;
}
int main() {
    int r = rec(1);
    cout << r << endl;
    return 0;
}
// rec(1) = rec(2) + 1 = 14 + 1 = 15
// rec(2) = rec(3) + 2 = 12 + 2 = 14
// rec(3) = rec(4) + 3 = 9 + 3 = 12
// rec(4) = rec(5) + 4 = 5 + 4 = 9
// rec(5) = rec(6) + 5 = 0 + 5 = 5
// rec(6) = 0

"
2w095uPG,2025-05-12T17:35:12.906500,powerampache,PHP,Monday 12th of May 2025 10:35:13 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to /192.168.88.7:80"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

getAlbums() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Failed to connect to /192.168.88.7:80\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Failed to connect to /192.168.88.7:80\"" }"",""stackTrace"":[]}"
