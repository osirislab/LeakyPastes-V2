id,title,username,language,date,content
nDP2qXY9,Untitled,martintokio,Lua,Sunday 22nd of June 2025 01:06:21 PM CDT,"local NPC_type = 2 -- type 1 = regular NPC | type 2 = hireling NPC
local delay = 500
local thousand_supplies = true
local ignore_capacity = false

local items = {
    knight = {
        {name = ""Supreme Health Potion"", id = 23375, Amount = 200, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Ultimate Health Potion"", id = 7643, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Health Potion"", id = 239, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Strong Mana Potion"", id = 237, Amount = 400, category = ""trade"", categoryHouse = ""potions""},
    },
    paladin = {
        {name = ""Diamond Arrows"", id = 35901, Amount = 5800, category = ""trade"", categoryHouse = ""distance""},
        {name = ""Spectral Bolt"", id = 35902, Amount = 1800, category = ""trade"", categoryHouse = ""distance""},
        {name = ""Great Mana Potion"", id = 238, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Ultimate Spirit Potion"", id = 23374, Amount = 1200, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Spirit Potion"", id = 7642, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Fireball Rune"", id = 3191, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Avalanche Rune"", id = 3161, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Thunderstorm Rune"", id = 3202, Amount = 5600, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Stone Shower Rune"", id = 3175, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Sudden Death Rune"", id = 3155, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
    },
    monk = {
        {name = ""Great Mana Potion"", id = 238, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Ultimate Spirit Potion"", id = 23374, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Spirit Potion"", id = 7642, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Fireball Rune"", id = 3191, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Avalanche Rune"", id = 3161, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Thunderstorm Rune"", id = 3202, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Stone Shower Rune"", id = 3175, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Sudden Death Rune"", id = 3155, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
    },
    mage = {
        {name = ""Ultimate Mana Potion"", id = 23373, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Mana Potion"", id = 238, Amount = 0, category = ""trade"", categoryHouse = ""potions""},
        {name = ""Great Fireball Rune"", id = 3191, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Avalanche Rune"", id = 3161, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Thunderstorm Rune"", id = 3202, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Stone Shower Rune"", id = 3175, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
        {name = ""Sudden Death Rune"", id = 3155, Amount = 0, category = ""trade"", categoryHouse = ""runes""},
    }
  }

function getItemsByVocation()
  local vocation = verifyPlayerVocation()
  if not vocation then return nil end
  
  if vocation == 1 then
    return items.knight
  elseif vocation == 2 then
    return items.paladin
  elseif vocation == 3 or vocation == 4 then
    return items.mage
  elseif vocation == 5 then
    return items.monk
  else
    return nil
  end
end

function verifyPlayerVocation()
  local playerId = Player:getId()
  if not playerId then return nil end
  local playerCreature = Creature(playerId)
  if not playerCreature then return nil end
  return playerCreature:getVocation()
end

function refillSupplies()
  local itemsToRefill = getItemsByVocation()
  if not itemsToRefill then
    isRefilling = false
    return
  end
  
  isRefilling = true
  
  for _, item in ipairs(itemsToRefill) do
    refillItemsAndOpenTrade(item)
  end
  
  isRefilling = false
end

function refillItemsAndOpenTrade(item)
  if item.Amount <= 0 then
    return
  end
  
  if NPC_type == 1 then
    Game.talk(""Hi"", 12)
    wait(delay)
    Game.talk(item.category, 12)
    wait(delay)
  elseif NPC_type == 2 then
    Game.talk(""Hi"", 12)
    wait(delay)
    Game.talk(""Goods"", 12)
    wait(delay)
    Game.talk(item.categoryHouse, 12)
    wait(delay)
  end
  
  local currentCount = Game.getItemCount(item.id)
  local toBuy = item.Amount - currentCount
  
  if toBuy > 0 then
    if thousand_supplies and toBuy > 1000 then
      local remaining = toBuy
      while remaining > 0 do
        local buyAmount = math.min(1000, remaining)
        local bought = Npc.buy(item.id, buyAmount, ignore_capacity, false)
        wait(delay)
        local newCount = Game.getItemCount(item.id)
        local diff = newCount - currentCount
        if diff > 0 then
          currentCount = newCount
          remaining = remaining - diff
          print(""[Refiller] Bought "" .. item.name .. "" "" .. diff)
        else
          print(""[Refiller] Couldn't purchase "" .. item.name .. ""!"")
          break
        end
      end
    else
      local boughtAmount = 0
      local lastCount = Game.getItemCount(item.id)
      while boughtAmount < toBuy do
        local buySuccess = Npc.buy(item.id, toBuy - boughtAmount, ignore_capacity, false)
        wait(delay)
        local newCount = Game.getItemCount(item.id)
        local diff = newCount - lastCount
        if diff > 0 then
          boughtAmount = boughtAmount + diff
          lastCount = newCount
        else
          break
        end
      end
      
      if boughtAmount > 0 then
        print(""[Refiller] Bought x"" .. boughtAmount .. "" "" .. item.name)
      else
        print(""[Refiller] Couldn't purchase "" .. item.name .. ""!"")
      end
    end
  else
    print(""[Refiller] Enough "" .. item.name)
  end
end

refillSupplies()"
8UjzH1aa,✅ MAKE $1200 IN 15 MIN,XR_Banane_,JavaScript,Sunday 22nd of June 2025 01:04:14 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 01172"
jxCjke6f,MAKE $500 INSTANTLY,adrian52,JavaScript,Sunday 22nd of June 2025 12:59:07 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 91011"
STupLphs,✅ PayPal Hits,adrian52,JavaScript,Sunday 22nd of June 2025 12:54:05 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 81894"
m5wU4MCW,CC Advanced Peripherals Totem Supplier,ecco7777,Lua,Sunday 22nd of June 2025 12:49:48 PM CDT,"-- Export Totems of Undying from slot 40 (hotbar last slot) into the chest on top

-- Locate the inventory manager peripheral
local manager = peripheral.find(""inventoryManager"")
if not manager then
  error(""No inventoryManager peripheral found"")
end

-- Specify constants
local CHEST_DIR = ""up""               -- chest is on top
local TARGET_SLOT = 40               -- player inventory slot to check
local TOTEM_NAME = ""minecraft:totem_of_undying""

-- Function to check and move a Totem from slot 40
local function exportTotem()
  -- Get current item in slot 40
  local items = manager.getItems()
  -- Scan for slot 40
  for _, item in pairs(items) do
    if item.slot == TARGET_SLOT and item.name == TOTEM_NAME then
      -- Remove up to the full stack from player slot 40 to chest
      local moved = manager.removeItemFromPlayer(CHEST_DIR, {
        name = TOTEM_NAME,
        fromSlot = TARGET_SLOT,
        toSlot = nil,    -- chest will pick free slot automatically
        count = item.count
      })
      print(""Moved "" .. moved .. "" Totem(s) from slot "" .. TARGET_SLOT)
      return
    end
  end
  print(""No Totem in slot "" .. TARGET_SLOT)
end

-- Run once (or wrap in a loop / event handler as needed)
exportTotem()
"
u000bUQz,✅ MAKE $1200 IN 15 MIN,adrian52,JavaScript,Sunday 22nd of June 2025 12:49:03 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 54330"
rHrAzs24,Make $1200 in 15 minutes,adrian52,JavaScript,Sunday 22nd of June 2025 12:44:01 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 76224"
4Fxwt9wT,✅ Account Leaks,adrian52,JavaScript,Sunday 22nd of June 2025 12:38:58 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 01022"
saRBDacP,roblox passive size shanger (testing),Dragos2K11,Lua,Sunday 22nd of June 2025 12:38:25 PM CDT,"
local player = game.Players.LocalPlayer
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""SizeBooster""
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild(""PlayerGui"")

local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 250, 0, 100)
frame.Position = UDim2.new(0.5, -125, 0.5, -50)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Parent = screenGui

local button = Instance.new(""TextButton"")
button.Size = UDim2.new(1, -20, 1, -20)
button.Position = UDim2.new(0, 10, 0, 10)
button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.SourceSans
button.TextSize = 18
button.Text = ""Start Growth""
button.Parent = frame

local growing = false

local function growCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild(""Humanoid"")

    if humanoid.RigType ~= Enum.HumanoidRigType.R15 then
        warn(""[SizeBooster] This character is R6 and can't be scaled."")
        return
    end

    local bodyHeight = character:WaitForChild(""BodyHeightScale"", 5)
    local bodyWidth = character:WaitForChild(""BodyWidthScale"", 5)
    local bodyDepth = character:WaitForChild(""BodyDepthScale"", 5)
    local headScale = character:WaitForChild(""HeadScale"", 5)

    if not (bodyHeight and bodyWidth and bodyDepth and headScale) then
        warn(""[SizeBooster] Could not locate one or more scale instances."")
        return
    end

    while growing do
        bodyHeight.Value = bodyHeight.Value * 1.005
        bodyWidth.Value = bodyWidth.Value * 1.005
        bodyDepth.Value = bodyDepth.Value * 1.005
        headScale.Value = headScale.Value * 1.005
        wait(0.7)
    end
end

button.MouseButton1Click:Connect(function()
    if growing then
        growing = false
        button.Text = ""Start Growth""
    else
        growing = true
        button.Text = ""Stop Growth""
        task.spawn(growCharacter)
    end
end)

print(""[SizeBooster] Loaded! Press the button to start or stop growing."")"
1T3hZnEa,FREE BTC GUIDE,adrian52,JavaScript,Sunday 22nd of June 2025 12:33:55 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 39738"
x1fNf2BC,Netflix Premium UHD Hits,adrian52,JavaScript,Sunday 22nd of June 2025 12:28:53 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 97991"
XftNJ3KZ,✅ Crypto Accounts,adrian52,JavaScript,Sunday 22nd of June 2025 12:23:52 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 56161"
bny7TmCb,GMAIL Logs (2FA disabled),adrian52,JavaScript,Sunday 22nd of June 2025 12:18:50 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 92314"
gt7CxXLK,✅ PayPal Hits,nieldavid,JavaScript,Sunday 22nd of June 2025 12:08:33 PM CDT,"We just posted new leaks.

Join the channel: https://t.me/luc4saccounts

Accounts: 03466"
MLuf4j7C,Game JavaScript Code,nrzmalik,JavaScript,Sunday 22nd of June 2025 12:03:37 PM CDT,"//Game Class - Reusable for Multiple Slides
class Game {
    constructor(playerObjectId, enemy1ObjectId, enemy2ObjectId, overlayObjectId) {
        // Get object references
        this.question_Bot = object(playerObjectId);
        this.enemy_1 = object(enemy1ObjectId);
        this.enemy_2 = object(enemy2ObjectId);
        this.overlay = object(overlayObjectId); // Movement boundary overlay
        
        // Game settings
        this.MOVE_SPEED = 8; // pixels per frame
        this.COLLISION_THRESHOLD = 35; // collision detection distance (reduced for better precision)
        
        // Track key states (only left and right)
        this.keys = {
            left: false,
            right: false
        };
        
        // Track collision states to prevent multiple triggers
        this.collisionStates = {
            enemy_1: false,
            enemy_2: false
        };
        
        // Game state
        this.gameComplete = false;
        this.gameStarted = false;
        this.initializationComplete = false;
        
        // Store object IDs for variable names
        this.enemy1ObjectId = enemy1ObjectId;
        this.enemy2ObjectId = enemy2ObjectId;
        
        // Track initial positions to prevent startup collisions
        this.initialPositions = {
            player: null,
            enemy_1: null,
            enemy_2: null
        };
    }
    
    // Calculate distance between two objects (with fallback for dimensions)
    getDistance(obj1, obj2) {
        // Use fallback dimensions if width/height not available
        const obj1Width = obj1.width || 50;
        const obj1Height = obj1.height || 50;
        const obj2Width = obj2.width || 50;
        const obj2Height = obj2.height || 50;
        
        const dx = (obj1.x + obj1Width / 2) - (obj2.x + obj2Width / 2);
        const dy = (obj1.y + obj1Height / 2) - (obj2.y + obj2Height / 2);
        return Math.sqrt(dx * dx + dy * dy);
    }
    
    // More precise collision detection using smaller collision boxes
    checkBoundingBoxCollision(obj1, obj2) {
        const obj1Width = obj1.width || 50;
        const obj1Height = obj1.height || 50;
        const obj2Width = obj2.width || 50;
        const obj2Height = obj2.height || 50;
        
        // Use smaller collision boxes (80% of actual size) for more precise detection
        const collisionMargin = 0.2; // 20% margin
        const obj1CollisionWidth = obj1Width * (1 - collisionMargin);
        const obj1CollisionHeight = obj1Height * (1 - collisionMargin);
        const obj2CollisionWidth = obj2Width * (1 - collisionMargin);
        const obj2CollisionHeight = obj2Height * (1 - collisionMargin);
        
        // Center the collision boxes
        const obj1CollisionX = obj1.x + (obj1Width - obj1CollisionWidth) / 2;
        const obj1CollisionY = obj1.y + (obj1Height - obj1CollisionHeight) / 2;
        const obj2CollisionX = obj2.x + (obj2Width - obj2CollisionWidth) / 2;
        const obj2CollisionY = obj2.y + (obj2Height - obj2CollisionHeight) / 2;
        
        return obj1CollisionX < obj2CollisionX + obj2CollisionWidth &&
               obj1CollisionX + obj1CollisionWidth > obj2CollisionX &&
               obj1CollisionY < obj2CollisionY + obj2CollisionHeight &&
               obj1CollisionY + obj1CollisionHeight > obj2CollisionY;
    }
    
    // Animate and hide enemy when hit
    animateAndHideEnemy(enemy, enemyName, variableName) {
        
        // Add hit animation using Storyline's animate function
       /* addToTimeline(
            enemy.animate(
                [
                    { transform: 'scale(1) rotate(0deg)', opacity: '1' },
                    { transform: 'scale(1.5) rotate(180deg)', opacity: '0.5' },
                    { transform: 'scale(0.1) rotate(360deg)', opacity: '0' }
                ],
                {
                    duration: 800, // Animation duration in milliseconds
                    easing: 'ease-in-out',
                    fill: 'forwards' // Keep the final state after animation
                }
            )
        );*/
        
        // Set variable after animation completes
        setTimeout(() => {
            // Set the Storyline variable to true after animation
            setVar(variableName, true);
        }, 100);
    }
    
    // Hide all remaining enemies
    hideAllEnemies() {
        const enemies = [
            { obj: this.enemy_1, name: 'enemy_1' },
            { obj: this.enemy_2, name: 'enemy_2' }
        ];
        
        enemies.forEach(enemy => {
            // Add fade out animation for remaining enemies
            addToTimeline(
                enemy.obj.animate(
                    [
                        { opacity: '1' },
                        { opacity: '0' }
                    ],
                    {
                        duration: 10,
                        easing: 'ease-out',
                        fill: 'forwards'
                    }
                )
            );
            
            // Animation complete - objects can be manually hidden via Storyline
            // No automatic hiding - let Storyline handle visibility
        });
        
        console.log(""Game Complete! All enemies eliminated!"");
    }
    
    // Store initial positions and check for overlaps
    storeInitialPositions() {
        this.initialPositions.player = { x: this.question_Bot.x, y: this.question_Bot.y };
        this.initialPositions.enemy_1 = { x: this.enemy_1.x, y: this.enemy_1.y };
        this.initialPositions.enemy_2 = { x: this.enemy_2.x, y: this.enemy_2.y };
        
        // Check if any objects are overlapping at start
        const startupCollision1 = this.getDistance(this.question_Bot, this.enemy_1) < this.COLLISION_THRESHOLD;
        const startupCollision2 = this.getDistance(this.question_Bot, this.enemy_2) < this.COLLISION_THRESHOLD;
        
        if (startupCollision1 || startupCollision2) {
            console.warn(""Warning: Objects are overlapping at startup! Consider repositioning them."");
            console.log(""Player position:"", this.question_Bot.x, this.question_Bot.y);
            console.log(""Enemy positions:"", 
                       ""E1:"", this.enemy_1.x, this.enemy_1.y,
                       ""E2:"", this.enemy_2.x, this.enemy_2.y);
        }
    }
    
    // Check if player has moved significantly from start position
    hasPlayerMoved() {
        if (!this.initialPositions.player) return false;
        
        const moveThreshold = 10; // pixels
        const dx = Math.abs(this.question_Bot.x - this.initialPositions.player.x);
        const dy = Math.abs(this.question_Bot.y - this.initialPositions.player.y);
        
        return (dx > moveThreshold || dy > moveThreshold);
    }
    
    // Check collision between question_Bot and enemies
    checkCollisions() {
        // Skip collision detection if game is complete or not started
        if (this.gameComplete || !this.gameStarted) return;
        
        // Only enable collision detection after player has moved or after a delay
        if (!this.initializationComplete && !this.hasPlayerMoved()) return;
        
        // Check collision with enemy_1 using both methods
        const distance1 = this.getDistance(this.question_Bot, this.enemy_1);
        const boxCollision1 = this.checkBoundingBoxCollision(this.question_Bot, this.enemy_1);
        
        if (distance1 < this.COLLISION_THRESHOLD || boxCollision1) {
            if (!this.collisionStates.enemy_1) {
                this.collisionStates.enemy_1 = true;
                console.log(""Collision with enemy_1! Distance:"", distance1, ""Box collision:"", boxCollision1);
                
                // Animate and hide the hit enemy, set variable after animation
                this.animateAndHideEnemy(this.enemy_1, ""enemy_1"", ""enemy_1"");
                
                // Set game complete - no automatic hiding of other enemies
                this.gameComplete = true;
            }
        } else {
            this.collisionStates.enemy_1 = false;
        }
        
        // Check collision with enemy_2 using both methods
        const distance2 = this.getDistance(this.question_Bot, this.enemy_2);
        const boxCollision2 = this.checkBoundingBoxCollision(this.question_Bot, this.enemy_2);
        
        if (distance2 < this.COLLISION_THRESHOLD || boxCollision2) {
            if (!this.collisionStates.enemy_2) {
                this.collisionStates.enemy_2 = true;
                console.log(""Collision with enemy_2! Distance:"", distance2, ""Box collision:"", boxCollision2);
                
                // Animate and hide the hit enemy, set variable after animation
                this.animateAndHideEnemy(this.enemy_2, ""enemy_2"", ""enemy_2"");
                
                // Set game complete - no automatic hiding of other enemies
                this.gameComplete = true;
            }
        } else {
            this.collisionStates.enemy_2 = false;
        }
    }
    
    // Update player position based on key states (only left and right movement)
    updatePlayerMovement() {
        // Stop movement if game is complete
        if (this.gameComplete) return;
        
        let newX = this.question_Bot.x;
        
        // Calculate new position based on key states (only horizontal movement)
        if (this.keys.left) {
            newX -= this.MOVE_SPEED;
        }
        if (this.keys.right) {
            newX += this.MOVE_SPEED;
        }
        
        // Constrain movement within overlay boundaries
        const antWidth = this.question_Bot.width || 50;
        const overlayLeft = this.overlay.x;
        const overlayRight = this.overlay.x + (this.overlay.width || 400);
        const minX = overlayLeft;
        const maxX = overlayRight - antWidth;
        
        // Apply constraints
        newX = Math.max(minX, Math.min(maxX, newX));
        
        // Update position (only X coordinate changes)
        this.question_Bot.x = newX;
    }
    
    // Keyboard event handlers (only left and right keys)
    handleKeyDown(event) {
        switch(event.code) {
            case 'ArrowLeft':
                this.keys.left = true;
                event.preventDefault();
                break;
            case 'ArrowRight':
                this.keys.right = true;
                event.preventDefault();
                break;
        }
    }
    
    handleKeyUp(event) {
        switch(event.code) {
            case 'ArrowLeft':
                this.keys.left = false;
                event.preventDefault();
                break;
            case 'ArrowRight':
                this.keys.right = false;
                event.preventDefault();
                break;
        }
    }
    
    // Touch Screen Button Functions (only left and right)
    keyLeftStart() {
        if (this.gameComplete) return;
        
        let newX = this.question_Bot.x - this.MOVE_SPEED;
        const antWidth = this.question_Bot.width || 50;
        const overlayLeft = this.overlay.x;
        const minX = overlayLeft;
        
        // Apply boundary constraint
        newX = Math.max(minX, newX);
        this.question_Bot.x = newX;
        
        console.log(""Moved left a little"");
    }
    
    keyRightStart() {
        if (this.gameComplete) return;
        
        let newX = this.question_Bot.x + this.MOVE_SPEED;
        const antWidth = this.question_Bot.width || 50;
        const overlayRight = this.overlay.x + (this.overlay.width || 400);
        const maxX = overlayRight - antWidth;
        
        // Apply boundary constraint
        newX = Math.min(maxX, newX);
        this.question_Bot.x = newX;
        
        console.log(""Moved right a little"");
    }
    
    // Initialize the game
    initializeGame() {
        // Initialize collision variables to false
        setVar(""enemy_1"", false);
        setVar(""enemy_2"", false);
        
        // Store initial positions and check for overlaps
        this.storeInitialPositions();
        
        // Add keyboard event listeners with bound context
        document.addEventListener('keydown', (event) => this.handleKeyDown(event));
        document.addEventListener('keyup', (event) => this.handleKeyUp(event));
        
        // Start the game with a small delay to ensure proper initialization
        setTimeout(() => {
            this.gameStarted = true;
            console.log(""Game collision detection enabled!"");
        }, 500); // Half second delay
        
        // Enable collision detection after 2 seconds regardless of movement
        setTimeout(() => {
            this.initializationComplete = true;
            console.log(""Initialization period complete - full collision detection active!"");
        }, 2000);
        
        // Start the game loop
        update(() => {
            this.updatePlayerMovement();
            this.checkCollisions();
        });
        
        console.log(""Game initialized! Use left/right arrow keys to move the player within the overlay."");
        console.log(""Collision detection will start after player moves or 2-second delay."");
        return this; // Return instance for method chaining
    }
}

// Global game instance reference
let currentGame = null;

// Global functions for touch buttons (call these from Storyline)
// These work with the currently active game instance (only left and right)
function keyLeftStart() { 
    if (currentGame) {
        currentGame.keyLeftStart(); 
    } else {
        console.warn(""No game instance active. Please initialize a game first."");
    }
}

function keyRightStart() { 
    if (currentGame) {
        currentGame.keyRightStart(); 
    } else {
        console.warn(""No game instance active. Please initialize a game first."");
    }
}


/* How to initialize Game in Storyline
currentGame = new Game('playerObjectId', 'enemy1ObjectId', 'enemy2ObjectId', 'overlayObjectId')
currentGame.initializeGame();

*/"
63WPxqKg,Checking tunnel status Openvpn client with bridge v2,skybetik,Bash,Sunday 22nd of June 2025 11:04:09 AM CDT,"#!/bin/sh

# === Список IP-адрес з описом (IP|Опис) ===
IP_LIST=$(cat <<EOF
172.31.0.2|Zhu
172.31.0.3|Yaho
172.31.0.4|Yaho
172.31.0.5|Yaho
EOF
)

BRIDGE=""bridge0""
TAP=""tap0""
OPENVPN_SERVICE=""/usr/local/etc/rc.d/openvpn""
LOG_FILE=""/var/log/openvpn_monitor.log""
MONITOR_LOG=""/var/log/openvpn_monitor_status.log""

# === Telegram Bot ===
TELEGRAM_BOT_TOKEN=""""
TELEGRAM_CHAT_IDS=""123457 9104477""

# === Поведінка ===
RESTART_OPENVPN=""off""   # on/off
REATTACH_TAP=""off""      # on/off

# === Логування з часом ===
log_with_time() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') $1"" | tee -a ""$LOG_FILE""
}

# === Відправка повідомлення в Telegram ===
send_telegram_message() {
    local message=$1
    for chat_id in $TELEGRAM_CHAT_IDS; do
        curl -s -X POST ""https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"" \
            -d chat_id=""$chat_id"" \
            -d text=""$message"" > /dev/null
    done
}

# === Відновлення VPN-з'єднання ===
restore_connection() {
    log_with_time ""[INFO] Виконується відновлення зв’язку...""

    if [ ""$REATTACH_TAP"" = ""on"" ]; then
        ifconfig ""$BRIDGE"" deletem ""$TAP"" 2>/dev/null && \
        log_with_time ""[INFO] $TAP видалено з $BRIDGE."" || \
        log_with_time ""[WARNING] $TAP не знайдено або вже видалено.""
    fi

    if [ ""$RESTART_OPENVPN"" = ""on"" ]; then
        log_with_time ""[INFO] Перезапуск OpenVPN...""
        service openvpn restart
    fi

    if [ ""$REATTACH_TAP"" = ""on"" ]; then
        log_with_time ""[INFO] Додаємо $TAP назад у $BRIDGE...""
        retry=0
        while ! ifconfig ""$BRIDGE"" addm ""$TAP"" 2>/dev/null; do
            retry=$((retry + 1))
            log_with_time ""[ERROR] Не вдалося додати $TAP (спроба $retry)...""
            [ ""$retry"" -ge 3 ] && log_with_time ""[CRITICAL] Перевищено кількість спроб додавання."" && break
            sleep 2
        done
        if ifconfig ""$BRIDGE"" | grep -q ""$TAP""; then
            log_with_time ""[INFO] $TAP успішно додано у $BRIDGE.""
        else
            log_with_time ""[ERROR] $TAP не додано у $BRIDGE після відновлення.""
        fi
    fi
}

# === Додати IP у лог недоступних ===
log_ip_down() {
    local ip=$1
    grep -q ""$ip"" ""$MONITOR_LOG"" || echo ""$ip"" >> ""$MONITOR_LOG""
}

# === Видалити IP з логу, якщо знову доступний ===
remove_ip_from_log() {
    local ip=$1
    sed -i '' ""/$ip/d"" ""$MONITOR_LOG""
}

# === Перевірка доступності IP ===
check_ping() {
    local ip=$1
    local desc=$2
    if ping -c 1 -t 2 ""$ip"" > /dev/null 2>&1; then
        if grep -q ""$ip"" ""$MONITOR_LOG""; then
            remove_ip_from_log ""$ip""
            log_with_time ""[INFO] $ip ($desc) знову доступний.""
            send_telegram_message ""✅ $desc ($ip) знову доступний.""
        fi
    else
        if ! grep -q ""$ip"" ""$MONITOR_LOG""; then
            log_ip_down ""$ip""
            log_with_time ""[ERROR] Немає відповіді від $ip ($desc).""
            send_telegram_message ""⚠️ $desc ($ip) недоступний!""
            restore_connection
        fi
    fi
}

# === Повторна перевірка IP з лог-файлу ===
check_ips_from_log() {
    [ -f ""$MONITOR_LOG"" ] || return
    while IFS='|' read -r ip desc; do
        grep -q ""$ip"" ""$MONITOR_LOG"" || continue
        [ -z ""$desc"" ] && desc=""Невідомий пристрій""
        log_with_time ""[INFO] Перевірка з логу: $ip ($desc)""
        check_ping ""$ip"" ""$desc""
    done <<EOF
$IP_LIST
EOF
}

# === Ініціалізація лог-файлу ===
check_log_file() {
    [ -f ""$MONITOR_LOG"" ] || { touch ""$MONITOR_LOG""; chmod 666 ""$MONITOR_LOG""; }
}

# === Головний запуск ===

check_log_file

# Основна перевірка IP
while IFS='|' read -r ip desc; do
    check_ping ""$ip"" ""$desc""
done <<EOF
$IP_LIST
EOF

# Перевірка раніше недоступних
check_ips_from_log

exit 0
"
XXMZYRRt,Untitled,GigaOrts,Lua,Sunday 22nd of June 2025 10:49:24 AM CDT,"local Players = game:GetService(""Players"")
local function leaderboardSetup(player)
	game.Workspace.Data.Player.Value = player
	local leaderstats = Instance.new(""Folder"")
	leaderstats.Name = ""leaderstats""
	leaderstats.Parent = player
	local gold = Instance.new(""IntValue"")
	gold.Name = ""Money""
	gold.Value = 100
	gold.Parent = leaderstats
end
Players.PlayerAdded:Connect(leaderboardSetup)









script.Parent.Humanoid.Died:Connect(function()
	--новые команды
	local coin = game.ServerStorage.Coin:Clone()
	coin.Parent = game.Workspace.Coins
	coin.Position = script.Parent.PrimaryPart.Position + Vector3.new(-2, 1, -2)
	coin.Anchored = true
	coin.CanCollide = false



	local s = script.Collect
	s:Clone().Parent = coin
	coin.Collect.Disabled = false




	--это старые команды
	print(""NPC уничтожен"")
	wait(3)
	script.Parent:Destroy()
	
end)







script.Parent.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild(""Humanoid"") then
		local money = game.Workspace.Data.Player.Value.leaderstats.Money
		money.Value += 10
		script.Parent:Destroy()
	end
end)









local ServerStorage = game:GetService(""ServerStorage"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local GiveWeaponEvent = ReplicatedStorage:WaitForChild(""GiveWeapon"")


weapons = {
	Gun1 = 100,
	Gun2 = 200,
	Gun3 = 300,
	Gun4 = 400
}

function onEvent1(player, gunName)
	
	if player.leaderstats.Money.Value >= weapons[gunName] then
		local backpack = player:WaitForChild(""Backpack"")
		local Gun = ServerStorage:FindFirstChild(""Weapons""):FindFirstChild(gunName)
		local clone = Gun:Clone()
		clone.Parent = backpack
		player.leaderstats.Money.Value -= weapons[gunName]
	else
		print(""No money"")
	end
end
GiveWeaponEvent.OnServerEvent:Connect(onEvent1)
"
pJgRUisv,2025-06-22T11:33:08.827546,powerampache,PHP,Sunday 22nd of June 2025 10:33:10 AM CDT,"1.00-64 (64) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
c1SpkVet,Roblox Aimbot Script,Steamhesaproblox,RBScript,Sunday 22nd of June 2025 09:33:07 AM CDT,"local ContextActionService = game:GetService(""ContextActionService"")
local cameraToggle = false
local cameraTarget = nil

local function findClosestPlayerToScreenCenter()
    local playerList = game.Players:GetPlayers()
    local center = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
    local closestPlayer = nil
    local minDistance = math.huge
    local localPlayer = game.Players.LocalPlayer

    for _, player in pairs(playerList) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local distance = (center - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distance < minDistance then
                    minDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

local function aimCameraAtPlayer(player)
    if player and player.Character and player.Character:FindFirstChild(""Head"") then
        local camera = workspace.CurrentCamera
        local targetPosition = player.Character.Head.Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, targetPosition)
    end
end

local function toggleCameraAim()
    cameraToggle = not cameraToggle
    if cameraToggle then
        cameraTarget = findClosestPlayerToScreenCenter()
        game.StarterGui:SetCore(""ChatMakeSystemMessage"", {
            Text = ""Aimbot Açıldı"",
            Color = Color3.new(0, 1, 0),
            FontSize = Enum.FontSize.Size24,
        })
    else
        cameraTarget = nil
        game.StarterGui:SetCore(""ChatMakeSystemMessage"", {
            Text = ""Aimbot Kapandı"",
            Color = Color3.new(1, 0, 0),
            FontSize = Enum.FontSize.Size24,
        })
    end
end


ContextActionService:BindAction(""ToggleAimbot"", function(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin then
        toggleCameraAim()
    end
end, false, Enum.KeyCode.T)


game:GetService(""RunService"").RenderStepped:Connect(function()
    if cameraToggle and cameraTarget then
        aimCameraAtPlayer(cameraTarget)
    end
end)
"
BkHWfZEJ,Roblox inf Yield adonis Bypass,Steamhesaproblox,RBScript,Sunday 22nd of June 2025 09:28:42 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Pixeluted/adoniscries/refs/heads/main/Source.lua""))()
loadstring(game:HttpGet(""https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source""))()"
8bmnZh28,Roblox Esp script,Steamhesaproblox,RBScript,Sunday 22nd of June 2025 09:27:10 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"", true))()
loadstring(game:HttpGet(""https://raw.githubusercontent.com/Nosssa/NossLock/main/UniversalGuiDetectionBypass""))()

local players = game:GetService(""Players"")
local localPlayer = players.LocalPlayer
local uis = game:GetService(""UserInputService"")
local runService = game:GetService(""RunService"")
local cam = workspace.CurrentCamera

local espEnabled = false
local espObjects = {}

local function clearESP()
    for _, data in pairs(espObjects) do
        if data.Text then data.Text:Destroy() end
        if data.Cham then data.Cham:Destroy() end
    end
    table.clear(espObjects)
end

local function refreshESP()
    clearESP()
    if not espEnabled then return end

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(""Head"") and player.Character:FindFirstChildOfClass(""Humanoid"") then
            local char = player.Character

            local billboard = Instance.new(""BillboardGui"")
            billboard.Adornee = char.Head
            billboard.Size = UDim2.new(0, 100, 0, 20)
            billboard.AlwaysOnTop = true
            billboard.StudsOffset = Vector3.new(0, 2.5, 0)
            billboard.Parent = char.Head

            local label = Instance.new(""TextLabel"")
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextStrokeTransparency = 0.4
            label.Font = Enum.Font.Gotham
            label.TextScaled = false
            label.TextSize = 15
            label.Text = player.Name
            label.Parent = billboard

            local cham = Instance.new(""Highlight"")
            cham.FillTransparency = 0.75
            cham.OutlineTransparency = 1
            cham.FillColor = player.Team and player.Team.TeamColor.Color or Color3.fromRGB(255, 0, 0)
            cham.Parent = char

            table.insert(espObjects, {Text = billboard, Cham = cham, Player = player})
        end
    end
end

local function espHeartbeatUpdate()
    if not espEnabled then return end
    for i = #espObjects, 1, -1 do
        local data = espObjects[i]
        if data.Player and data.Player.Character and data.Player.Character:FindFirstChild(""Head"") and data.Player.Character:FindFirstChildOfClass(""Humanoid"") then
            local dist = (localPlayer.Character and localPlayer.Character:FindFirstChild(""Head"") and (localPlayer.Character.Head.Position - data.Player.Character.Head.Position).Magnitude) or 0
            local hp = math.floor(data.Player.Character:FindFirstChildOfClass(""Humanoid"").Health)
            data.Text.TextLabel.Text = string.format(""%s | %dm | %d HP"", data.Player.Name, dist, hp)

            if dist > 500 then
                data.Cham.Enabled = false
            else
                data.Cham.Enabled = true
            end
        else
            if data.Text then data.Text:Destroy() end
            if data.Cham then data.Cham:Destroy() end
            table.remove(espObjects, i)
        end
    end
end

local function toggleESP(state)
    espEnabled = state
    if espEnabled then
        refreshESP()
    else
        clearESP()
    end
end

local function attachLight()
    local function createLight()
        local char = localPlayer.Character
        if not char then return end
        local hrp = char:FindFirstChild(""HumanoidRootPart"")
        if not hrp then return end

        if hrp:FindFirstChild(""CustomPointLight"") then return end

        local light = Instance.new(""PointLight"")
        light.Name = ""CustomPointLight""
        light.Parent = hrp
        light.Color = Color3.fromRGB(255, 255, 255)
        light.Brightness = 10
        light.Range = 7
        light.Shadows = true

        task.spawn(function()
            while light and light.Parent do
                for i = 8, 12, 0.5 do
                    light.Brightness = i
                    task.wait(0.05)
                end
                for i = 12, 8, -0.5 do
                    light.Brightness = i
                    task.wait(0.05)
                end
            end
        end)
    end

    createLight()

    localPlayer.CharacterAdded:Connect(function()
        wait(0.5)
        createLight()
        if espEnabled then refreshESP() end
    end)
end

attachLight()

uis.InputBegan:Connect(function(input, processed)
    if processed or uis:GetFocusedTextBox() then return end

    if input.KeyCode == Enum.KeyCode.Y then
        toggleESP(not espEnabled)
    elseif input.KeyCode.Name == ""Print"" or input.KeyCode == Enum.KeyCode.F8 then
        toggleESP(false)
    end
end)

players.PlayerAdded:Connect(function(p)
    p.CharacterAdded:Connect(function()
        wait(0.5)
        if espEnabled then refreshESP() end
    end)
end)

runService.Heartbeat:Connect(espHeartbeatUpdate)
"
md8mZFC4,wayfire-plugins-extra with PR #277,bluebyt,INI file,Sunday 22nd of June 2025 09:21:56 AM CDT,"$ PKG_CONFIG_PATH=/opt/wayfire/lib/pkgconfig meson setup build --prefix=/opt/wayfire

The Meson build system
Version: 1.8.2                                                 Source dir: /home/bluebyt/Downloads/wayfire-plugins-extra
Build dir: /home/bluebyt/Downloads/wayfire-plugins-extra/build
Build type: native build
Project name: wayfire-plugins-extra
Project version: 0.10.0
C compiler for the host machine: cc (gcc 15.1.1 ""cc (GCC) 15.1.1 20250425"")                                                   C linker for the host machine: cc ld.bfd 2.44.0
C++ compiler for the host machine: c++ (gcc 15.1.1 ""c++ (GCC) 15.1.1 20250425"")
C++ linker for the host machine: c++ ld.bfd 2.44.0
Host machine cpu family: x86_64
Host machine cpu: x86_64
Found pkg-config: YES (/usr/bin/pkg-config) 2.4.3
Run-time dependency wayfire found: YES 0.10.0                  Run-time dependency giomm-2.4 found: YES 2.66.8
Run-time dependency wayland-protocols found: YES 1.45
Run-time dependency wayland-server found: YES 1.23.1
Run-time dependency libevdev found: YES 1.13.4                 Run-time dependency yyjson found: YES 0.11.1
Program wayland-scanner found: YES (/usr/bin/wayland-scanner)
Run-time dependency Boost found: YES 1.88.0 (/usr)
Message:
----------------
wayfire-plugins-extra 0.10.0
----------------
Build targets in project: 24
NOTICE: Future-deprecated features used:
 * 1.1.0: {'""boolean option"" keyword argument ""value"" of type str'}

wayfire-plugins-extra 0.10.0

  User defined options
    prefix: /opt/wayfire

Found ninja-1.12.1 at /usr/bin/ninja
********************************************************************************************************************

$ ninja -C build
ninja: Entering directory `build'
[4/50] Compiling C++ object sr...-iio.so.p/autorotate-iio.cpp.
FAILED: src/libautorotate-iio.so.p/autorotate-iio.cpp.o
c++ -Isrc/libautorotate-iio.so.p -Isrc -I../src -I/opt/wayfire/include -I/usr/include/pango-1.0 -I/usr/include/cairo -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/sysprof-6 -I/opt/wayfire/include/wlroots-0.18 -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/libevdev-1.0 -I/usr/include/libxml2 -I/usr/include/giomm-2.4 -I/usr/lib/giomm-2.4/include -I/usr/include/glibmm-2.4 -I/usr/lib/glibmm-2.4/include -I/usr/include/sigc++-2.0 -I/usr/lib/sigc++-2.0/include -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -std=c++17 -O0 -g -DWLR_USE_UNSTABLE -DWAYFIRE_PLUGIN -Wno-unused-parameter -fPIC -pthread -MD -MQ src/libautorotate-iio.so.p/autorotate-iio.cpp.o -MF src/libautorotate-iio.so.p/autorotate-iio.cpp.o.d -o src/libautorotate-iio.so.p/autorotate-iio.cpp.o -c ../src/autorotate-iio.cpp                                                       In file included from ../src/autorotate-iio.cpp:3:
/opt/wayfire/include/wayfire/render-manager.hpp:143:5: error: wlr_color_transform’ does not name a type
  143 |     wlr_color_transform *get_color_transform();
      |     ^~~~~~~~~~~~~~~~~~~
[5/50] Compiling C++ object src/libbench.so.p/bench.cpp.o
FAILED: src/libbench.so.p/bench.cpp.o
c++ -Isrc/libbench.so.p -Isrc -I../src -I/opt/wayfire/include -I/usr/include/pango-1.0 -I/usr/include/cairo -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/sysprof-6 -I/opt/wayfire/include/wlroots-0.18 -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/libevdev-1.0 -I/usr/include/libxml2 -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -std=c++17 -O0 -g -DWLR_USE_UNSTABLE -DWAYFIRE_PLUGIN -Wno-unused-parameter -fPIC -pthread -MD -MQ src/libbench.so.p/bench.cpp.o -MF src/libbench.so.p/bench.cpp.o.d -o src/libbench.so.p/bench.cpp.o -c ../src/bench.cpp
In file included from ../src/bench.cpp:31:
/opt/wayfire/include/wayfire/render-manager.hpp:143:5: error: wlr_color_transform’ does not name a type
  143 |     wlr_color_transform *get_color_transform();
      |     ^~~~~~~~~~~~~~~~~~~
[6/50] Compiling C++ object sr...crosshair.so.p/crosshair.cpp.
FAILED: src/libcrosshair.so.p/crosshair.cpp.o
c++ -Isrc/libcrosshair.so.p -Isrc -I../src -I/opt/wayfire/include -I/usr/include/pango-1.0 -I/usr/include/cairo -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/sysprof-6 -I/opt/wayfire/include/wlroots-0.18 -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/libevdev-1.0 -I/usr/include/libxml2 -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -std=c++17 -O0 -g -DWLR_USE_UNSTABLE -DWAYFIRE_PLUGIN -Wno-unused-parameter -fPIC -pthread -MD -MQ src/libcrosshair.so.p/crosshair.cpp.o -MF src/libcrosshair.so.p/crosshair.cpp.o.d -o src/libcrosshair.so.p/crosshair.cpp.o -c ../src/crosshair.cpp
In file included from ../src/crosshair.cpp:29:
/opt/wayfire/include/wayfire/render-manager.hpp:143:5: error: wlr_color_transform’ does not name a type
  143 |     wlr_color_transform *get_color_transform();
      |     ^~~~~~~~~~~~~~~~~~~
[7/50] Compiling C++ object src/libannotate.so.p/annotate.cpp.
FAILED: src/libannotate.so.p/annotate.cpp.o
c++ -Isrc/libannotate.so.p -Isrc -I../src -I/opt/wayfire/include -I/usr/include/pango-1.0 -I/usr/include/cairo -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/sysprof-6 -I/opt/wayfire/include/wlroots-0.18 -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/libevdev-1.0 -I/usr/include/libxml2 -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -std=c++17 -O0 -g -DWLR_USE_UNSTABLE -DWAYFIRE_PLUGIN -Wno-unused-parameter -fPIC -pthread -MD -MQ src/libannotate.so.p/annotate.cpp.o -MF src/libannotate.so.p/annotate.cpp.o.d -o src/libannotate.so.p/annotate.cpp.o -c ../src/annotate.cpp
In file included from ../src/annotate.cpp:39:
/opt/wayfire/include/wayfire/render-manager.hpp:143:5: error: wlr_color_transform’ does not name a type
  143 |     wlr_color_transform *get_color_transform();
      |     ^~~~~~~~~~~~~~~~~~~
../src/annotate.cpp: In member function ‘virtual void wf::scene::annotate::wayfire_annotate_screen::handle_pointer_button(const wlr_pointer_button_event&)’:
../src/annotate.cpp:259:54: warning: comparison between ‘const enum wlr_button_state’ and ‘enum wl_pointer_button_state’ [-Wenum-compare]
  259 |         if ((event.button == button) && (event.state == WL_POINTER_BUTTON_STATE_RELEASED))
      |                                          ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[8/50] Compiling C++ object sr...en.so.p/force-fullscreen.cpp.
FAILED: src/libforce-fullscreen.so.p/force-fullscreen.cpp.o
c++ -Isrc/libforce-fullscreen.so.p -Isrc -I../src -I/opt/wayfire/include -I/usr/include/pango-1.0 -I/usr/include/cairo -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/sysprof-6 -I/opt/wayfire/include/wlroots-0.18 -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/libevdev-1.0 -I/usr/include/libxml2 -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -std=c++17 -O0 -g -DWLR_USE_UNSTABLE -DWAYFIRE_PLUGIN -Wno-unused-parameter -fPIC -pthread -MD -MQ src/libforce-fullscreen.so.p/force-fullscreen.cpp.o -MF src/libforce-fullscreen.so.p/force-fullscreen.cpp.o.d -o src/libforce-fullscreen.so.p/force-fullscreen.cpp.o -c ../src/force-fullscreen.cpp
In file included from ../src/force-fullscreen.cpp:37:
/opt/wayfire/include/wayfire/render-manager.hpp:143:5: error: wlr_color_transform’ does not name a type
  143 |     wlr_color_transform *get_color_transform();
      |     ^~~~~~~~~~~~~~~~~~~
[11/50] Compiling C++ object s...so.p/focus-steal-prevent.cpp.
../src/focus-steal-prevent.cpp: In lambda function:
../src/focus-steal-prevent.cpp:205:31: warning: comparison between ‘enum wlr_button_state’ and ‘enum wl_pointer_button_state’ [-Wenum-compare]
  205 |         if ((ev->event->state == WL_POINTER_BUTTON_STATE_RELEASED) || !prevent_focus_steal)
      |              ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../src/focus-steal-prevent.cpp:212:31: warning: comparison between ‘enum wlr_button_state’ and ‘enum wl_pointer_button_state’ [-Wenum-compare]
  212 |             (ev->event->state == WL_POINTER_BUTTON_STATE_PRESSED) && prevent_focus_steal)
      |              ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ninja: build stopped: subcommand failed.
"
yraeRUbL,luckybubbleblast,yocky12k,JSON,Sunday 22nd of June 2025 09:01:17 AM CDT,"[
{""lisensi"":""67d2b31398f5699734f9b27cbb261b3d""}
]"
5kuGqQy1,TROLL UI🤑 V2,Nuggetthe1,Lua,Sunday 22nd of June 2025 09:00:02 AM CDT,"--// GUI Setup
local player = game.Players.LocalPlayer
local starterGui = player:WaitForChild(""PlayerGui"")
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""SS SK1PPERS""
screenGui.ResetOnSpawn = false -- Prevents deletion on death
screenGui.Parent = starterGui

local frame = Instance.new(""Frame"", screenGui)
frame.Size = UDim2.new(0, 250, 1, 330)
frame.Position = UDim2.new(0.05, 0, 0.3, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true -- Makes it draggable

--// Close/Open Button
local toggleBtn = Instance.new(""TextButton"", screenGui)
toggleBtn.Size = UDim2.new(0, 100, 0, 30)
toggleBtn.Position = UDim2.new(0.05, 0, 0.22, 0)
toggleBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Text = ""Close Tab""

local guiVisible = true

toggleBtn.MouseButton1Click:Connect(function()
	guiVisible = not guiVisible
	frame.Visible = guiVisible
	toggleBtn.Text = guiVisible and ""Close Tab"" or ""Open Tab""
end)

--// Smooth Color Change
local tweenService = game:GetService(""TweenService"")
task.spawn(function()
	local colors = {
		Color3.fromRGB(0, 255, 0),
		Color3.fromRGB(0, 150, 255),
		Color3.fromRGB(255, 105, 180),
	}
	local i = 1
	while true do
		local tween = tweenService:Create(frame, TweenInfo.new(2, Enum.EasingStyle.Linear), { BackgroundColor3 = colors[i] })
		tween:Play()
		tween.Completed:Wait()
		i = i % #colors + 1
	end
end)

--// Notifications
game.StarterGui:SetCore(""SendNotification"", {
	Title = ""Notice"";
	Text = ""TIME TO SKID THIS BITCH"";
	Duration = 5;
})
task.wait(1)
game.StarterGui:SetCore(""SendNotification"", {
	Title = ""Credit"";
	Text = ""Created by 7S_Vantus and Skidrider7S"";
	Duration = 5;
})

--// Auto Button Position Tracker
local currentY = 10
local function makeButton(text)
	local btn = Instance.new(""TextButton"", frame)
	btn.Size = UDim2.new(1, -20, 0, 50)
	btn.Position = UDim2.new(0, 10, 0, currentY)
	btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.Text = text
	currentY = currentY + 60
	return btn
end

--// Create Buttons
local toggleButton = makeButton(""Loop Explode All"")
local gauntletButton = makeButton(""Thanos Gauntlet"")
local banHammerButton = makeButton(""Ban Hammer"")
local blazeKillButton = makeButton(""Blaze Kill"")
local lagServerButton = makeButton(""Lag Server (Toggle)"")
local fakePermButton = makeButton(""Fake Perm"")
local zaWarudoBtn = makeButton(""Za Warudo"")
local blindToggle = makeButton(""Cmd Blind All"")
local blurCrazyBtn = makeButton(""Loop Blur Crazy"")
local billboardBtn = makeButton(""Billboard All"")

--// Target TextBox
local targetBox = Instance.new(""TextBox"", frame)
targetBox.Size = UDim2.new(1, -20, 0, 40)
targetBox.Position = UDim2.new(0, 10, 0, currentY)
targetBox.PlaceholderText = ""Target💥""
targetBox.Text = """"
targetBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
targetBox.TextColor3 = Color3.new(1, 1, 1)
targetBox.ClearTextOnFocus = false

--// Variables
local looping = false
local lagging = false
local loopConnection = nil
local lagConnection = nil
local teleportPosition = Vector3.new(-179, 7, -8)

--// Loop Explode All
toggleButton.MouseButton1Click:Connect(function()
	looping = not looping
	toggleButton.BackgroundColor3 = looping and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(50, 50, 50)
	toggleButton.Text = looping and ""STOP Explode All"" or ""Loop Explode All""

	if looping then
		local character = player.Character or player.CharacterAdded:Wait()
		if character and character:FindFirstChild(""HumanoidRootPart"") then
			character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
		end
		loopConnection = task.spawn(function()
			while looping do
				game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";explode all"")
				task.wait(0.65)
			end
		end)
	else
		if loopConnection then task.cancel(loopConnection) end
	end
end)

--// Tool Hit Handler
local function handleTool(tool, talkMsg, effectFunc)
	if not tool:IsA(""Tool"") then return end
	tool.Activated:Connect(function()
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";talk me "" .. talkMsg)
		local myChar = player.Character
		if not myChar or not myChar:FindFirstChild(""HumanoidRootPart"") then return end
		local myPos = myChar.HumanoidRootPart.Position
		local closest, dist = nil, math.huge
		for _, other in pairs(game.Players:GetPlayers()) do
			if other ~= player and other.Character and other.Character:FindFirstChild(""HumanoidRootPart"") then
				local d = (myPos - other.Character.HumanoidRootPart.Position).Magnitude
				if d < 15 and d < dist then
					closest = other
					dist = d
				end
			end
		end
		if closest then effectFunc(closest) end
	end)
end

--// Thanos Gauntlet
gauntletButton.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";gear me 243790334"")
	local function fling(t) game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";fling "" .. t.Name) end
	for _, tool in pairs(player.Backpack:GetChildren()) do
		handleTool(tool, ""THAT MY HEDGE😡😡🔪"", fling)
	end
	player.Backpack.ChildAdded:Connect(function(tool)
		handleTool(tool, ""THAT MY HEDGE😡😡🔪"", fling)
	end)
end)

--// Ban Hammer
banHammerButton.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";gear me 10468797"")
	local function punish(t) game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";punish "" .. t.Name) end
	for _, tool in pairs(player.Backpack:GetChildren()) do
		handleTool(tool, ""This stupid script always making me work😡😡🔪"", punish)
	end
	player.Backpack.ChildAdded:Connect(function(tool)
		handleTool(tool, ""This stupid script always making me work😡😡🔪"", punish)
	end)
end)

--// Blaze Kill
blazeKillButton.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";gear me 105351545"")
	local function blazeKillTarget(t)
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";fire "" .. t.Name)
		task.wait(2)
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";kill "" .. t.Name)
	end
	local function fireAndKill(t)
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";talk me 🔥🔥💥"")
		blazeKillTarget(t)
	end
	for _, tool in pairs(player.Backpack:GetChildren()) do
		handleTool(tool, ""EHEHEAHW🫱🫱🔪"", fireAndKill)
	end
	player.Backpack.ChildAdded:Connect(function(tool)
		handleTool(tool, ""EHEHEAHW🫱🫱🔪"", fireAndKill)
	end)
end)

--// Lag Server Toggle
lagServerButton.MouseButton1Click:Connect(function()
	lagging = not lagging
	lagServerButton.BackgroundColor3 = lagging and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(50, 50, 50)
	lagServerButton.Text = lagging and ""STOP Lag Server"" or ""Lag Server (Toggle)""
	if lagging then
		lagConnection = task.spawn(function()
			while lagging do
				for _, cmd in ipairs({ "";loadmap"", "";bring all"", "";re all"" }) do
					game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(cmd)
					task.wait(0.01)
				end
			end
		end)
	else
		if lagConnection then task.cancel(lagConnection) end
	end
end)

--// Fake Perm Button
fakePermButton.MouseButton1Click:Connect(function()
	loadstring(game:HttpGet(""https://rawscripts.net/raw/Obby-For-Actual-Owner-Admin!-HeadAdmin-Script-19151""))()
end)

--// Za Warudo
zaWarudoBtn.MouseButton1Click:Connect(function()
	local cmds = {
		"";music 1571597070"",
		"";warp all"",
		"";disco"",
	}
	for _, cmd in ipairs(cmds) do
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(cmd)
	end
	task.wait(3)
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";undisco"")
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";speed me 34"")
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";freeze all"")
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";music 0"")
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";speed all 0"")
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";talk others 😮?"")
	task.wait(3.4)
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";unfreeze all"")
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";speed all 16"")
end)

--// Cmd Blind All
local blindLooping = false
local blindLoop = nil

blindToggle.MouseButton1Click:Connect(function()
	blindLooping = not blindLooping
	blindToggle.BackgroundColor3 = blindLooping and Color3.fromRGB(170, 0, 170) or Color3.fromRGB(50, 50, 50)
	blindToggle.Text = blindLooping and ""STOP Blind All"" or ""Cmd Blind All""
	if blindLooping then
		blindLoop = task.spawn(function()
			while blindLooping do
				game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";m ."")
				task.wait(0.001)
			end
		end)
	else
		if blindLoop then task.cancel(blindLoop) end
	end
end)

--// Loop Blur Crazy
local blurCrazyLooping = false
local blurLoop = nil

blurCrazyBtn.MouseButton1Click:Connect(function()
	blurCrazyLooping = not blurCrazyLooping
	blurCrazyBtn.BackgroundColor3 = blurCrazyLooping and Color3.fromRGB(255, 140, 0) or Color3.fromRGB(50, 50, 50)
	blurCrazyBtn.Text = blurCrazyLooping and ""STOP Blur Crazy"" or ""Loop Blur Crazy""
	if blurCrazyLooping then
		blurLoop = task.spawn(function()
			while blurCrazyLooping do
				game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";blur all"")
				game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";kill all"")
				task.wait(0.03)
			end
		end)
	else
		if blurLoop then task.cancel(blurLoop) end
	end
end)

--// Billboard All
local billboardLooping = false
local billboardLoop = nil

billboardBtn.MouseButton1Click:Connect(function()
	billboardLooping = not billboardLooping
	billboardBtn.BackgroundColor3 = billboardLooping and Color3.fromRGB(0, 255, 255) or Color3.fromRGB(50, 50, 50)
	billboardBtn.Text = billboardLooping and ""STOP Billboard"" or ""Billboard All""

	if billboardLooping then
		billboardLoop = task.spawn(function()
			while billboardLooping do
				local cmds = {
					"";titler all SERVER"",
					"";titleo all HACKED"",
					"";titley all BY"",
					"";titleb all SK1PPERS"",
				}
				for _, cmd in ipairs(cmds) do
					game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(cmd)
					task.wait(0.7)
				end
			end
		end)
	else
		if billboardLoop then task.cancel(billboardLoop) end
	end
end)
local trollAllBtn = makeButton(""troll all"", 710)
local trollAllLooping = false
local trollLoop = nil

trollAllBtn.MouseButton1Click:Connect(function()
	trollAllLooping = not trollAllLooping
	trollAllBtn.BackgroundColor3 = trollAllLooping and Color3.fromRGB(255, 85, 0) or Color3.fromRGB(50, 50, 50)
	trollAllBtn.Text = trollAllLooping and ""STOP troll all"" or ""troll all""
	if trollAllLooping then
		trollLoop = task.spawn(function()
			while trollAllLooping do
				local cmds = {
					"";fly all nan"",
					"";warp all 9999"",
					"";hidegui all"",
					"";blur all 999999"",
					"";hidguis all""
				}
				for _, cmd in ipairs(cmds) do
					game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(cmd)
				end
				task.wait(0.03)
			end
		end)
	else
		if trollLoop then task.cancel(trollLoop) end
	end
end)
--// Load 🍆💦 Club Button
local loadClubBtn = makeButton(""load 🍆💦 club"", 610)
loadClubBtn.MouseButton1Click:Connect(function()
	local cmds = {
		"";re all"",
		"";loadmap"",
		"";titlep all OH YESS💦🍆🍆🔞"",
		"";talk all UYES SEMPAI💦💦💧🥵 KEEP IT COMMING"",
		"";talk all I LOVE §ĖX̌""
	}
	for _, cmd in ipairs(cmds) do
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(cmd)
		task.wait(0.7)
	end
end)
local banDirectBtn = makeButton(""ban direct"", 650)
local banDirectLooping = false
local banLoop = nil

banDirectBtn.MouseButton1Click:Connect(function()
	banDirectLooping = not banDirectLooping
	banDirectBtn.BackgroundColor3 = banDirectLooping and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(50, 50, 50)
	banDirectBtn.Text = banDirectLooping and ""STOP ban direct"" or ""ban direct""
	if banDirectLooping then
		banLoop = task.spawn(function()
			while banDirectLooping do
				local targetName = targetBox.Text
				for _, p in ipairs(game.Players:GetPlayers()) do
					if p ~= player and string.lower(p.Name):sub(1, #targetName) == string.lower(targetName) then
						game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";punish "" .. p.Name)
					end
				end
				task.wait(0.05)
			end
		end)
	else
		if banLoop then task.cancel(banLoop) end
	end
end)
--// Target TextBox
local targetBox = Instance.new(""TextBox"", frame)
targetBox.Size = UDim2.new(1, -20, 0, 40)
targetBox.Position = UDim2.new(0, 10, 0, 610)
targetBox.PlaceholderText = ""Target💥""
targetBox.Text = """"
targetBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
targetBox.TextColor3 = Color3.new(1, 1, 1)

--// Direct Loop Explode
local explodeToggleBtn = makeButton(""Direct Loop Explode"", 660)
local explodeLooping = false
local explodeLoopConn = nil

explodeToggleBtn.MouseButton1Click:Connect(function()
	explodeLooping = not explodeLooping
	explodeToggleBtn.BackgroundColor3 = explodeLooping and Color3.fromRGB(255, 80, 80) or Color3.fromRGB(50, 50, 50)
	explodeToggleBtn.Text = explodeLooping and ""STOP Direct Explode"" or ""Direct Loop Explode""

	if explodeLooping then
		explodeLoopConn = task.spawn(function()
			while explodeLooping do
				local name = targetBox.Text
				if name ~= """" then
					for _, plr in ipairs(game.Players:GetPlayers()) do
						if plr.Name:lower():sub(1, #name) == name:lower() then
							game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";explode "" .. plr.Name)
							break
						end
					end
				end
				task.wait(0.6)
			end
		end)
	else
		if explodeLoopConn then task.cancel(explodeLoopConn) end
	end
end)

--// Give Gauntlet Button
local giveGauntletBtn = makeButton(""Give Gauntlet"", 720)
giveGauntletBtn.MouseButton1Click:Connect(function()
	local name = targetBox.Text
	if name == """" then return end
	for _, plr in ipairs(game.Players:GetPlayers()) do
		if plr.Name:lower():sub(1, #name) == name:lower() then
			local fullName = plr.Name
			game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";gear "" .. fullName .. "" 243790334"")

			local gauntletListener
			gauntletListener = plr.Backpack.ChildAdded:Connect(function(tool)
				if tool:IsA(""Tool"") then
					tool.Activated:Connect(function()
						local char = plr.Character
						if char and char:FindFirstChild(""HumanoidRootPart"") then
							local hitTarget = nil
							local pos = char.HumanoidRootPart.Position
							local closest, dist = nil, math.huge
							for _, other in ipairs(game.Players:GetPlayers()) do
								if other ~= plr and other.Character and other.Character:FindFirstChild(""HumanoidRootPart"") then
									local d = (pos - other.Character.HumanoidRootPart.Position).Magnitude
									if d < 15 and d < dist then
										closest = other
										dist = d
									end
								end
							end
							if closest then
								game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";fling "" .. closest.Name)
								game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";talk "" .. fullName .. "" THATS MY HEDGE😡😡🔪"")
							end
						end
					end)
				end
			end)

			break
		end
	end
end)
--// Poison Bomb
local poisonBombButton = makeButton(""Poison Bomb"")
poisonBombButton.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";gear me 29100543"")
	
	local function poisonEffect(target)
		local name = target.Name
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";smoke "" .. name)
		game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";talk "" .. name .. "" Ouchie!!"")
		task.delay(2.4, function()
			game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";talk "" .. name .. "" AAAAAAAHHHH"")
			game.ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer("";kill "" .. name)
		end)
	end

	for _, tool in pairs(player.Backpack:GetChildren()) do
		handleTool(tool, ""Eat this balloon💣🎈"", poisonEffect)
	end

	player.Backpack.ChildAdded:Connect(function(tool)
		handleTool(tool, ""Eat this balloon💣🎈"", poisonEffect)
	end)
end)
"
qcr4Y06y,Untitled,kirzecy670,PostgreSQL,Sunday 22nd of June 2025 08:58:53 AM CDT,"WITH
reinstall AS (
    SELECT DISTINCT uid
    FROM stat.funnelTrack
    WHERE dt >= '2025-01-01'
      AND FMKIsAndroidParent(deviceType, appVersion)
      AND (
          (action IN ('bind_user', 'rebind_user')
           AND visitParamExtractString(addJson, 'reason') IN (
               'email', 'loginByEmailAndCode', 'restoreByAdId',
               'adid', 'moveGlobalToRu', 'migration'
           ))
          OR action = 'reinstall_detected'
      )
),

circle_owners AS (
    SELECT user_id,
           argMin(permission_role, id) AS role
    FROM circles.circle_member
    GROUP BY user_id
    HAVING role = 'Owner'
),

first_open_users AS (
    SELECT 
        uid,
        full_reg_datetime::date AS cohort_date,
        IF(uid IN (SELECT uid FROM reinstall), 'rebind', 'not_rebind') AS rebind_group,
        IF(children_quantity >= 1, 'has_child', 'no_child') AS child_group
    FROM analytics.parent_properties_v pp
    JOIN circle_owners co ON co.user_id = pp.id
    WHERE full_reg_datetime >= '2025-05-01'
      AND platform = 'Android'
      AND region = 'ru'
),

cohort_sizes AS (
    SELECT
        cohort_date,
        concat(rebind_group, ' / ', child_group) AS user_group,
        uniqExact(uid) AS cohort_size
    FROM first_open_users
    GROUP BY cohort_date, user_group
)

SELECT
    cohort_date,
    user_group,
    cohort_size
FROM cohort_sizes
ORDER BY cohort_date, user_group;
"
kBC5DpXH,wow 5.4.8 c++,siewdass,C++,Sunday 22nd of June 2025 08:33:25 AM CDT,"// Player.cpp 

// in ""Item* Player::EquipItem(""
// before ""return pItem;""

if (pItem && pItem->GetEntry()) 
{
    ItemTemplate const* itemTemplate = pItem->GetTemplate();
    
    if (itemTemplate && itemTemplate->Class == ITEM_CLASS_WEAPON)
    {
        removeSpell(75, false, false);
        removeSpell(5019, false, false);
        removeSpell(6603, false, false);

        learnSpell(5009, false);
        
        if (itemTemplate->SubClass == ITEM_SUBCLASS_WEAPON_WAND)
            learnSpell(5019, false);
        else if (itemTemplate->SubClass == ITEM_SUBCLASS_WEAPON_BOW)
            learnSpell(75, false);
        else 
            learnSpell(6603, false);
    }
}

// in ""bool Player::LoadFromDB(""
// before ""return true;""

m_WeaponProficiency = 0xFFFFFFFF;
m_ArmorProficiency = 0xFFFFFFFF;
SendProficiency(ITEM_CLASS_WEAPON, 0xFFFFFFFF);
SendProficiency(ITEM_CLASS_ARMOR, 0xFFFFFFFF);

// in ""void Player::AddSpellAndCategoryCooldowns(""
// replace ""if (rec <= 0 && catrec <= 0 && (cat == 76 || (spellInfo->IsAutoRepeatRangedSpell() && spellInfo->Id != 75)))

if (rec <= 0 && catrec <= 0 && (cat == 76 || (spellInfo->IsAutoRepeatRangedSpell() && (spellInfo->Id != 75 || spellInfo->Id != 5019))))

/********************************************************************************************/

// Unit.cpp

"
ZwSTSTM3,roblox speed script,Dragos2K11,Lua,Sunday 22nd of June 2025 08:18:00 AM CDT,"local player = game.Players.LocalPlayer
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""WalkSpeedBooster""
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild(""PlayerGui"")

local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 250, 0, 100)
frame.Position = UDim2.new(0.5, -125, 0.5, -50)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Parent = screenGui

local button = Instance.new(""TextButton"")
button.Size = UDim2.new(1, -20, 1, -20)
button.Position = UDim2.new(0, 10, 0, 10)
button.BackgroundColor3 = Color3.fromRGB(150, 80, 80)
button.TextColor3 = Color3.fromRGB(255, 69, 69)
button.Font = Enum.Font.SourceSans
button.TextSize = 18
button.Text = ""Start Speed Boost""
button.Parent = frame

local boosting = false

local function boostSpeed()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild(""Humanoid"")
    while boosting do
        humanoid.WalkSpeed = humanoid.WalkSpeed * 1.05
        wait(0.5)
    end
end

button.MouseButton1Click:Connect(function()
    if boosting then
        boosting = false
        button.Text = ""Start Speed Boost""
    else
        boosting = true
        button.Text = ""Stop Speed Boost""
        task.spawn(boostSpeed)
    end
end)

print(""[WalkSpeedBooster] Loaded! Click the button to start/stop boosting."")

local dragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1
       or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

game:GetService(""UserInputService"").InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        updateDrag(input)
    end
end)"
WHZMRWC2,Projects CSES,Fastrail08,C++,Sunday 22nd of June 2025 08:05:47 AM CDT,"#include <bits/stdc++.h>
using namespace std;

class triplet{
    public:
    int si, ei;
    long long pi;
    
    triplet(int si, int ei, long long pi){
        this-> si = si;
        this-> ei = ei;
        this-> pi = pi;
    }
    
};

bool compare(const triplet &t1, const triplet &t2){
    if(t1.si == t2.si){
        return t1.ei <= t2.ei ? true : false;
    }
    return t1.si < t2.si ? true : false;
}

void getMaxProfitByAttendingMeetings(int level, int si, int ei, long long currProfit, long long &maxProfit, vector<triplet> &projects){
    if(level >= projects.size()){
       maxProfit = max(maxProfit, currProfit);
       return;
    }
    //attend
    if(projects[level].ei < si || projects[level].si > ei){
        getMaxProfitByAttendingMeetings(level + 1, min(projects[level].si, si), max(projects[level].ei, ei), currProfit + projects[level].pi, maxProfit, projects);
    }
    
    //don't attend
    getMaxProfitByAttendingMeetings(level + 1, si, ei, currProfit, maxProfit, projects);
}

int findNextMeetingThatCanBeAttendedIfIthMeetingAttended(int endTime, int level, vector<triplet> &projects){
    int l = level + 1, r = projects.size() - 1, idx = -1;
    while(l <= r){
        int mid = (r - l) / 2 + l;
        if(projects[mid].si > endTime){
            idx = mid;
            r = mid - 1;
        }
        else{
            l = mid + 1;
        }
    }
    return idx;
}

long long getMaxProfitByAttendingMeetingsMemo(int level, vector<triplet> &projects, vector<long long> &memo){
    if(level >= projects.size()){
        return 0;
    }

    if(memo[level] != -1){
        return memo[level];
    }
    long long attendedProfit = 0, notAttendedProfit = 0;
    
    /*
    If we are going to attend ith meeting, or the meeting at current level, what is the JUST next meeting that can be attended. Also we can say WHAT LEVEL we GO next if we choose to attend meeting at current level
    
    Generally we jump level + 1 in every case (we take decision of at current level, and the move to next level to take decision of that)
    Here we are also doing the same thing.
    
    If we don't attend the meeting at index 'level' we are not changing the the si or ei, and we can surely attend the next meeting at level + 1, because we didn't attend the meeting at index 'level', as the array is sorted based on start times, the meeting at level + 1 has a start time > meeting at level start time.
    
    If we attend the meeting at index 'level', we are changing the si & ei. We are going to attend this meeting which might BLOCK the meeting at level + 1, level + 2...upto some level + i..
    BLOCK as in if the meeting at index 'level' ends at some duration ei, then all the meetings at next level(upto some level + i) whose start time <= ei are BLOCKED, simply because these meetings will overlap with our ongoing meeting at index 'level'. The meetings that are blocked START at some time during which our current meeting is going on and hence we can't attend those.
    
    So the problem is we can't do level + 1, level + 2(if we attend the meeting)
    Unlike the case where we don't attend the current meeting(where we simply do level + 1), because the meeting[level + 1] is automatically a valid option. 
    But If we explore the option to attend current meeting[level] - SO WHAT IS THE FIRST CLOSEST MEETING WHICH START AFTER OUR CURRENT MEETING ENDS or WHAT IS THE FIRST MEETING THAT STARTS JUST AFTER OUR CURRENT MEETING ENDS, essentially making it the first valid meeting that can be attended if we choose to attend the meeting[level]. 
    
    SO WHAT IS THE FIRST/minimum 'i'/'level + i' where we can jump after we explore the option to attend, first meaning the meeting that has the smallest start time that is atleast larger than the end time of current meeting.  
    
    meeting[level].ei < meeting[level + i].si
    
    [level, level + 1, level + 2, level + 3, level + 4 ....... level + i......] (sorted based on start times)
    
    We explored an option (attend), which means we move to the next level. Here the question is, which level to move to next? As moving to (level + 1) is not going to cut it everytime, as if in case the meeting attended at level might go on even after the meeting[level + 1] starts...or meeting[level + 2]  starts.....making those meetings blocked and impossible to attend to as you can only attend 1 meeting at a time. 
    
    We need to move to some level + i, where meeting[level + i].si > meeting[level].ei, i.e. the meeting[level + i] only starts after the meeting[level] ends.
    
    As the array is sorted we can use Binary Search to figure out 'i',as we need to find the meeting whose start time is just larger than the end time of meeting[level]. So whatever 'i' is returned, we move to that level, by calling (level + i).
    
    
    
    */
    
    int nextValidMeetingIdx = findNextMeetingThatCanBeAttendedIfIthMeetingAttended(projects[level].ei, level, projects);

    //attend
        attendedProfit = projects[level].pi + getMaxProfitByAttendingMeetingsMemo(nextValidMeetingIdx, projects, memo);
        
    //don't attend
        notAttendedProfit = getMaxProfitByAttendingMeetingsMemo(level + 1, projects, memo);
    
    return memo[level] = max(attendedProfit, notAttendedProfit);
}


int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<triplet> projects;
    int si, ei;
    long long pi;
    for(int i = 0; i < n; i++){
        cin >> si >> ei >> pi;
        triplet t(si, ei, pi);
        projects.emplace_back(t);
    }
    /*
    Recursive Call
    long long maxProfit = 0;
    getMaxProfitByAttendingMeetings(0, 0, 0, 0, maxProfit, projects);
    cout << maxProfit << '\n';
    */
    
    /*
    Memo Call
    */
    sort(projects.begin(), projects.end(), compare);
    vector<long long> memo(n, -1);
    cout << getMaxProfitByAttendingMeetingsMemo(0, projects, memo) << '\n';
}
"
NpWLnV5m,Fibonacci with memoization,BojidarDosev,Java,Sunday 22nd of June 2025 06:30:18 AM CDT,"	public static List<Integer> list = new ArrayList<>();

    public static int s(int n){
        while (list.size() <= n) {
            list.add(-1); // initialize with a dummy value
        }

        if(n<=2){
            list.set(n,1);
            return 1;
        }

        if(list.get(n) != -1){
            return list.get(n);
        }

        int result = s(n-1)+s(n-2);
        list.set(n,result);
        return result;
    }"
Lq51iamR,wikimedia.org/v2/stream/recentchange niquests with asyncio,DeaD_EyE,Python,Sunday 22nd of June 2025 06:19:09 AM CDT,"import asyncio
import json

import niquests


async def get() -> dict:
    async with niquests.AsyncSession() as session:
        response = await session.get(
            ""https://stream.wikimedia.org/v2/stream/recentchange"", stream=True
        )
        async for chunk in await response.iter_content():
            try:
                data = chunk.decode()
            except UnicodeDecodeError:
                continue

            if data.startswith(""data:""):
                try:
                    # it may fail here
                    result = json.loads(data.removeprefix(""data:""))
                    # if it fails, it does not return
                    # instead iterate
                    return result
                except json.JSONDecodeError:
                    # error
                    pass


async def main():
    try:
        return await asyncio.wait_for(get(), 60)
    except asyncio.TimeoutError:
        print(""Got a timeout"")


asyncio.run(main())"
b5n1WgtF,dataNone,TestGuy1,JSON,Sunday 22nd of June 2025 06:00:14 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '70fc6edbef1390b4a39b460de6d334b0f31825e738f831736c6890d7065ce0816718013ac6cb7da20ece109465d2c5137c51a8308cb374417cade9d324e4c7fc3b4a183655260042eb0dc03b503a936fb97fe0c54f89c25f6016078c3ecb97d07d086faefa2d9f401605df7724e2dfd62648871f9799eb4ecf478b34d23caa95',
  otherdata: [
    '2ba6faa5271457c844f34c07c2361005',
    '113ee6db6b3cab6943d443be00b8ec9a',
    '943bc1487616790d3a0431b86fac5dbc',
    'c78f3e1dd1da04c2a3e282bb5a241c62',
    '3efd437ed9ec8c2a0b3526439fa45ea5',
    '8b49feae579d742d0094e70013000ad2',
    '7591394875434f665f00e019e835dc14',
    'f51a3b679ebd4a7e2c4d2f883135b4f1'
  ]
}"
rBrYNTd1,Tasks For,Hasli4,Python,Sunday 22nd of June 2025 05:25:45 AM CDT,"# 1. Сумма чисел от 1 до n
n = int(input(""Введите n: ""))
total = 0
for i in range(1, n + 1):
    total += i
print(""Сумма от 1 до"", n, ""="", total)


# 2. Таблица умножения
m = int(input(""Введите число для таблицы умножения: ""))
for i in range(1, 11):
    print(f""{m} × {i} = {m * i}"")


# 3. Вывод чётных чисел
n = int(input(""Введите n: ""))
for i in range(0, n + 1, 1):
    if i % 2 == 0:
        print(i)


# 4. Обратный отсчёт
n = int(input(""Введите стартовое число: ""))
for i in range(n, -1, -1):
    print(i)
print(""Пуск!"")


# 5. Перебор символов строки
s = input(""Введите строку: "")
pos = 1
for ch in s:
    print(""Символ"", pos, "":"", ch)
    pos += 1


# 6. Подсчёт буквы в тексте
text = input(""Введите текст: "")
letter = input(""Какую букву посчитать? "")
count = 0
for ch in text:
    if ch == letter:
        count += 1
print(""Буква"", letter, ""встретилась"", count, ""раз"")


# 7. Список квадратов
k = int(input(""Введите k: ""))
squares = []
for i in range(1, k + 1):
    squares.append(i * i)
print(""Квадраты от 1 до"", k, "":"", squares)


# 8. Поиск минимума
nums_str = input(""Введите числа через пробел: "").split()
nums = [int(x) for x in nums_str]
min_val = nums[0]
for x in nums[1:]:
    if x < min_val:
        min_val = x
print(""Минимум равен"", min_val)


# 9. Замена пробелов на подчёркивания
original = input(""Введите строку: "")
result = """"
for ch in original:
    if ch == "" "":
        result += ""_""
    else:
        result += ch
print(result)


# 10. Сумма цифр числа
x = input(""Введите натуральное число: "")
digit_sum = 0
for ch in x:
    digit_sum += int(ch)
print(""Сумма цифр ="", digit_sum)
"
WKhb1Z1R,Untitled,Irvannandika,HTML,Sunday 22nd of June 2025 05:15:10 AM CDT,"{
  ""name"": ""hafi-portrait-web"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""homepage"": ""https://khzmh.github.io/pic/"",
  ""dependencies"": {
    ""@testing-library/jest-dom"": ""^5.17.0"",
    ""@testing-library/react"": ""^13.4.0"",
    ""@testing-library/user-event"": ""^13.5.0"",
    ""react"": ""^18.3.1"",
    ""react-dom"": ""^18.3.1"",
    ""react-scripts"": ""5.0.1"",
    ""web-vitals"": ""^2.1.4""
  },
  ""devDependencies"": {
    ""autoprefixer"": ""^10.4.19"",
    ""gh-pages"": ""^6.1.1"",
    ""postcss"": ""^8.4.38"",
    ""tailwindcss"": ""^3.4.4""
  },
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test"",
    ""eject"": ""react-scripts eject"",
    ""predeploy"": ""npm run build"",
    ""deploy"": ""gh-pages -d build""
  },
  ""eslintConfig"": {
    ""extends"": [
      ""react-app"",
      ""react-app/jest""
    ]
  },
  ""browserslist"": {
    ""production"": [
      "">0.2%"",
      ""not dead"",
      ""not op_mini all""
    ],
    ""development"": [
      ""last 1 chrome version"",
      ""last 1 firefox version"",
      ""last 1 safari version""
    ]
  },
  ""author"": ""Hafi Portrait"",
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https://github.com/khzmh/pic.git""
  }
}"
chdRugd7,Untitled,r9odt,INI file,Sunday 22nd of June 2025 03:23:22 AM CDT,"#jinja2: lstrip_blocks: True
{{ ansible_managed | comment('plain') }}

concurrent = {{ gitlab_runner_config_concurrent }}
check_interval = 0
listen_address = ""0.0.0.0:9252""

[session_server]
  session_timeout = {{ gitlab_runner_config_session_timeout }}

{# {% set _runners_state = ansible_facts['ansible_local']['gitlab-runner-state'] | default({}) %} #}
{% if gitlab_runner_dind_container | bool %}
{% set _runner_volumes = (gitlab_runner_runner.volumes | default(gitlab_runner_config_volumes)) + [gitlab_runner_dind_run_dir + "":/var/run"", gitlab_runner_dind_cert_dir + "":/certs/client""] %}
{% else %}
{% set _runner_volumes = gitlab_runner_runner.volumes | default(gitlab_runner_config_volumes) + [""/certs/client"", gitlab_runner_config_dir + '/' + gitlab_runner_runner.name + '/dind-service:/var/lib/docker'] %}
{% endif %}
[[runners]]
  name = ""{{ gitlab_runner_runner.name }}""
  url = ""{{ gitlab_runner_config_url }}""
  {# token = ""{{ _runners_state[gitlab_runner_runner.name]['token'] }}"" #}
  token = ""{{ gitlab_runner_tokens[gitlab_runner_runner.name] }}""
  executor = ""docker""
  [runners.custom_build_dir]
  [runners.docker]
    tls_verify = false
    image = ""{{ gitlab_runner_runner.image | default(gitlab_runner_config_docker_image) }}""
    memory = ""{{ gitlab_runner_runner.memory | default(gitlab_runner_config_memory) }}""
    {% if gitlab_runner_runner.memory_swap is defined %}
    memory_swap = ""{{ gitlab_runner_runner.memory_swap }}""
    {% endif %}
    {% if gitlab_runner_runner.cpus is defined %}
    cpus = ""{{ gitlab_runner_runner.cpus }}""
    {% endif %}
    privileged = {{ gitlab_runner_runner.privileged | default(gitlab_runner_config_privileged) }}
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = {{ _runner_volumes | to_json }}
    shm_size = 0
"
BVckupSV,paperless-ngx stack with local AI containers,kiwijunglist,YAML,Sunday 22nd of June 2025 03:21:06 AM CDT,"#
# DOCKER COMPOSE STACK FOR DOCKER COMPOSE MANAGER PLUGIN FOR UNRAID
#
#
# 1 EDIT THIS COMPOSE FILE AND CHANGE THE DEFAULT PASSWORD FOR THE DATABASE (optional)
#
# Replace the 3 instances of ""password123""
#
#
# 2 CREATE THE EXPECTED DIRECTORIES IN APPDATA BEFORE CREATING THE CONTAINERS
#
# sudo mkdir -p /mnt/user/appdata/paperless/{consume,export,redis,mariadb,paperless-ai,ollama}
# sudo mkdir -p /mnt/user/appdata/paperless/paperless/{data,media}
# sudo mkdir -p /mnt/user/appdata/paperless/paperless-gpt/{prompts,hocr,pdf}
# sudo chown 999:999 /mnt/user/appdata/paperless/mariadb
#
#
# 3 YOU CAN CHECK THE PERMISSIONS FOR APPDATA ARE CORRECT WITH THE ls -l COMMAND
#
# ls -l /mnt/user/appdata/paperless
#
# drwxr-xr-x 1 root root    6 Jun 22 17:00 consume/
# drwxr-xr-x 1 root root    6 Jun 22 17:00 export/
# drwxr-xr-x 1  999  999 4096 Jun 22 17:01 mariadb/
# drwxr-xr-x 1 root root   60 Jun 22 17:01 ollama/
# drwxr-xr-x 1 root root   31 Jun 22 17:00 paperless/
# drwxr-xr-x 1 root root  12      7 Jun 22 17:26 paperless-ai/
# drwxr-xr-x 1 root root   44 Jun 22 17:00 paperless-gpt/
# drwxr-xr-x 1 root root   22 Jun 22 18:26 redis/
#
#
# 4. YOU CAN NOW CLICK DOCKER-COMPOSE UP AND START UP ALL THE COTNTAINERS
#
#
# 5. AFTER RUNNING OLLAMA CONTAINER YOU NEED TO PULL THE AI MODELS
#
# docker exec -it paperless-ollama ollama pull llama3
# docker exec -it paperless-ollama ollama pull minicpm-v
#
#
# 6. PAPERLESS-NGX SETUP (WEB GUI)
#
# you need to generate an API key in paperless-ngx
# Point your web-browser to paperless-ngx http://xxx.xxx.xxx.xxx:8000
# Do the basic setup and then click edit my profile in top right had corner to generate a token
#
#
# 7. PAPERLESS-AI SETUP (WEB GUI)
#
# Point your web-browser to paperless-ai http://xxx.xxx.xxx.xxx:3000
# API Token = the token generated by paperless-ngx in step 6.
# Ollama API URL = http://paperless-ollama:11434
# Ollama model = llama3
#
# 8. PAPERLESS-GPT SETUP (EDIT docker-compose file)
#
# Edit this compose file and insert the API token you generated in step 6.
#
# Example:
#
#   paperless-gpt:
#     container_name: paperless-gpt
#     image: icereed/paperless-gpt:latest
#     restart: unless-stopped
#     environment:
#       PAPERLESS_BASE_URL: ""http://paperless:8000""
#       PAPERLESS_API_TOKEN: e3087dd8e058aebfc522fb91426d48d8b4a53a72
#
#
# EXTERNAL PORTS OPENED BY THIS DOCKER STACK
#
# 8000 = paperless-ngx
# 3000 = paperless-ai
# 8082 = paperless-gpt
#


services:

  paperless:
    container_name: paperless
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - paperless-mariadb
      - paperless-redis
      - paperless-gotenberg
      - paperless-tika
    ports:
      - ""8000:8000""
    volumes:
      - /mnt/user/appdata/paperless/paperless/data:/usr/src/paperless/data
      - /mnt/user/appdata/paperless/paperless/media:/usr/src/paperless/media
      # - /mnt/user/appdata/paperless/consume:/usr/src/paperless/consume
      # - /mnt/user/appdata/paperless/export:/usr/src/paperless/export
    environment:
      USERMAP_UID: 99
      USERMAP_GID: 100
      PAPERLESS_REDIS: redis://paperless-redis:6379
      PAPERLESS_DBENGINE: mariadb
      PAPERLESS_DBHOST: paperless-mariadb
      PAPERLESS_DBPORT: 3306
      PAPERLESS_DBUSER: paperless
      PAPERLESS_DBPASS: password123 # Password here
      PAPERLESS_TIME_ZONE: Pacific/Auckland
      PAPERLESS_OCR_LANGUAGE: eng
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_ENDPOINT: http://paperless-tika:9998
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg:3000
      PAPERLESS_TASK_WORKERS: 6
      PAPERLESS_ENABLE_WEBSERVER: true
      PAPERLESS_PRE_CONSUME_SCRIPT: """"
      PAPERLESS_POST_CONSUME_SCRIPT: """"
    labels:
      net.unraid.docker.icon: ""https://libs.websoft9.com/Websoft9/logo/product/paperlessngx-websoft9.png""
      net.unraid.docker.webui: ""http://[IP]:8000""
    networks:
      - paperless-net


  paperless-redis:
    container_name: paperless-redis
    image: docker.io/library/redis:8
    restart: unless-stopped
    volumes:
      - /mnt/user/appdata/paperless/redis:/data
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    networks:
      - paperless-net

  
  paperless-mariadb:
    container_name: paperless-mariadb
    image: docker.io/library/mariadb:11
    restart: unless-stopped
    volumes:
      - /mnt/user/appdata/paperless/mariadb:/var/lib/mysql
    environment:
      MARIADB_HOST: paperless
      MARIADB_DATABASE: paperless
      MARIADB_USER: paperless
      MARIADB_PASSWORD: password123 # Password here
      MARIADB_ROOT_PASSWORD: password123 # Password here
    networks:
      - paperless-net

  
  paperless-gotenberg:
    container_name: paperless-gotenberg
    image: docker.io/gotenberg/gotenberg:8.20
    restart: unless-stopped
    command:
      - ""gotenberg""
      - ""--chromium-disable-javascript=true""
      - ""--chromium-allow-list=file:///tmp/.*""
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    networks:
      - paperless-net

  
  paperless-tika:
    container_name: paperless-tika
    image: docker.io/apache/tika:latest
    restart: unless-stopped
    cap_drop:
      - ALL
    networks:
      - paperless-net

  
  paperless-ai:
    container_name: paperless-ai
    image: clusterzx/paperless-ai
    restart: unless-stopped
    environment:
      - PAPERLESS_AI_PORT=3000
      - RAG_SERVICE_URL=http://paperless:8000
      - RAG_SERVICE_ENABLED=true
    ports:
      - ""3000:3000""
    volumes:
      - /mnt/user/appdata/paperless/paperless-ai:/app/data
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    labels:
      net.unraid.docker.webui: ""http://[IP]:3000""
    networks:
      - paperless-net

  
  paperless-gpt:
    container_name: paperless-gpt
    image: icereed/paperless-gpt:latest
    restart: unless-stopped
    environment:
      PAPERLESS_BASE_URL: ""http://paperless:8000""
      PAPERLESS_API_TOKEN: e3087dd8e058aebfc522fb91426d48d8b4a53a72 # API TOKEN FROM PAPERLESS-NGX GOES HERE
      LLM_PROVIDER: ""ollama""
      LLM_MODEL: ""llama3""
      OLLAMA_HOST: ""http://paperless-ollama:11434""
      TOKEN_LIMIT: 1000
      OCR_PROVIDER: ""llm""
      VISION_LLM_PROVIDER: ""ollama""
      VISION_LLM_MODEL: ""minicpm-v""
      OCR_PROCESS_MODE: ""image""
      PDF_SKIP_EXISTING_OCR: ""false""
      CREATE_LOCAL_HOCR: ""false""
      LOCAL_HOCR_PATH: ""/app/hocr""
      CREATE_LOCAL_PDF: ""false""
      LOCAL_PDF_PATH: ""/app/pdf""
      PDF_UPLOAD: ""false""
      PDF_REPLACE: ""false""
      PDF_COPY_METADATA: ""true""
      PDF_OCR_TAGGING: ""true""
      OCR_LIMIT_PAGES: ""0""
      LOG_LEVEL: ""info""
      MANUAL_TAG: ""paperless-gpt""
      AUTO_TAG: ""paperless-gpt-auto""
      AUTO_OCR_TAG: ""paperless-gpt-ocr-auto""
      PDF_OCR_COMPLETE_TAG: ""paperless-gpt-ocr-complete""
      AUTO_GENERATE_TAGS: ""true""
      AUTO_GENERATE_TITLE: ""true""
    volumes:
      - /mnt/user/appdata/paperless/paperless-gpt/prompts:/app/prompts
      - /mnt/user/appdata/paperless/paperless-gpt/hocr:/app/hocr
      - /mnt/user/appdata/paperless/paperless-gpt/pdf:/app/pdf
      # - ${HOME}/.config/gcloud/application_default_credentials.json:/app/credentials.json
    ports:
      - ""8082:8080""
    depends_on:
      - paperless
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    labels:
      net.unraid.docker.webui: ""http://[IP]:8082""
    networks:
      - paperless-net


  paperless-ollama:
    container_name: paperless-ollama
    image: ollama/ollama
    restart: unless-stopped
    volumes:
      - /mnt/user/appdata/paperless/ollama:/root/.ollama      
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    networks:
      - paperless-net

networks:
  paperless-net:
    driver: bridge
"
5Gwiww6u,Untitled,thewitchking,C++,Sunday 22nd of June 2025 02:55:33 AM CDT,"std::vector<std::string> splitString(const std::string& input) {
    std::vector<std::string> result;
    std::stringstream ss(input);
    std::string token;

    while (std::getline(ss, token, ' ')) { // split by space
        std::stringstream commaStream(token);
        std::string subToken;
        while (std::getline(commaStream, subToken, ',')) { // split by comma
            if (!subToken.empty()) {
                result.push_back(subToken);
            }
        }
    }

    return result;
}"
srzZ5CBn,Untitled,thewitchking,C++,Sunday 22nd of June 2025 02:50:08 AM CDT,"int maxSubArray(vector<int>& nums) {
        int maxSum = INT_MIN;
        int currentSum = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            currentSum += nums[i];
            
            if (currentSum > maxSum) {
                maxSum = currentSum;
            }
            
            if (currentSum < 0) {
                currentSum = 0;
            }
        }
        
        return maxSum;
    }"
d393r453,Untitled,thewitchking,C++,Sunday 22nd of June 2025 02:37:56 AM CDT,"class Solution {
public:
    int firstUniqChar(string s) {
       unordered_map<char, int> mp;

        for (auto a : s) mp[a]++;
        for (int i = 0; i < s.size(); i++)if(mp[s[i]] == 1)return i;

        return -1;
    }
}; "
BCq59PJJ,Joc Grigore Moisil 2014,Hezov,C++,Sunday 22nd of June 2025 01:55:59 AM CDT,"#include <fstream>
#include <algorithm>
#include <array>
#include <queue>
#include <vector>
using namespace std;
ifstream cin(""joc.in"");
ofstream cout(""joc.out"");
typedef long long ll;
const ll mxN = 5e4, INF = 1e16;
priority_queue<array<ll,2>> pq;
vector<int> adj[mxN+10], sol;
bool visited[mxN+10];
ll nivel[mxN+10], d[mxN+10], parent[mxN+10];
int main()
{
    int cerinta;
    cin >> cerinta;
    int n , s, f;
    cin >> n >> s >> f;
    for(int i = 1;i<=n;i++)
        cin >> nivel[i];
    for(int from = 1;from <= n;from++)
    {
        int k; cin >> k;
        for(int it = 1;it<=k;it++)
        {
            int to; cin >> to;
            adj[from].push_back(to);
        }
    }
    for(int i = 1;i<=n;i++)
        d[i] = INF;
    d[s] = 0;
    pq.push({0,s});
    while(!pq.empty())
    {
        int from = pq.top()[1];
        pq.pop();
        if(visited[from])
            continue;
        visited[from] = true;
        for(auto it : adj[from])
        {
            int to = it;
            int nivelA = nivel[from];
            int nivelB = nivel[to];
            if(nivelA < nivelB) swap(nivelA,nivelB);
            ll cost = nivelA / nivelB;
            if(d[from] + cost < d[to])
            {
                parent[to] = from;
                d[to] = d[from] + cost;
                pq.push({-d[to],to});
            }
        }
    }
    if(cerinta == 1)
        cout << d[f] << '\n';
    else
    {
        for(int p = f;p!=0;p = parent[p])
            sol.push_back(p);
        reverse(sol.begin(),sol.end());
        cout << sol.size() << '\n';
        for(auto it : sol)
            cout << it << ' ';

    }
    return 0;
}
"
uiPT6qnL,что тут не так???,kay1mov,Lua,Sunday 22nd of June 2025 01:08:03 AM CDT,"script = {}

--Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"", ""Auto Use"")

update_list_queue = {}
menu = Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"")
if menu then
    switch = menu:Switch('Sun Strike for low HP teleport', false)
    switch:Icon(""\u{f0e7}"")
    input = menu:Input(""Max no-vision time"", ""25"")
    input:Icon(""\u{f017}"")
end

function contains(tbl, val)
    for i = 1, #tbl do
        if tbl[i] == val then
            return true
        end
    end
    return false
end

local handled_positions = {}
local particle_name_map = {}
local particle_data = {}

local actionQueue = {}
local nextActionTime = 0
local heroes = {}

function AddAction(delay, callback)
    table.insert(actionQueue, {time = GameRules.GetGameTime() + delay, action = callback})
end

local function add_divider()
    return
end


function script.OnUpdate()
    local now = GameRules.GetGameTime()

    if #actionQueue > 0 then
        local first = actionQueue[1]
        if now >= first.time then
            table.remove(actionQueue, 1)
            if first.action then
                first.action()
            end
        end
    end


    local allheroes = Heroes.GetAll()
    local localhero = Heroes.GetLocal()
    
    for i, hero in pairs(allheroes) do
        if hero and localhero and not Entity.IsSameTeam(hero, localhero) and not NPC.IsIllusion(hero) and Entity.IsAlive(hero) then
            local idx = Entity.GetIndex(hero)
            local isVisible = NPC.IsVisible(hero)
            --print(string.format(""Hero: %s | Index: %d | IsVisible: %s"", Entity.GetUnitName(hero), idx, tostring(isVisible)))
            
            if isVisible then
                heroes[idx] = os.time()
                --print(""Seen update: "" .. heroes[idx])
            end
        end
    end


    EMPCalc()
    icewallrender()
--    autosunstrike()

end

function script.OnParticleCreate(prt)
---@diagnostic disable-next-line: undefined-field
    prt = table.copy(prt)

    local particle_info = {}

    if prt.entity and Entity.IsNPC(prt.entity) then
        local unit_name = NPC.GetUnitName(prt.entity)
        local health = Entity.GetHealth(prt.entity)
        particle_info.unit_name = unit_name
        particle_info.health = health
        particle_info.unit = prt.entity
        prt[""[m]entity_name""] = unit_name
    end

    if prt.entityForModifiers and Entity.IsNPC(prt.entityForModifiers) then
        local unit_name = NPC.GetUnitName(prt.entityForModifiers)
        local health = Entity.GetHealth(prt.entityForModifiers)
        -- ⚠️ Важно: сохраняем `entityForModifiers`, а не `prt.entity`, как было у тебя
        particle_info.unit_name = unit_name
        particle_info.health = health
        particle_info.unit = prt.entityForModifiers
        prt[""[m]entityForModifiers_name""] = unit_name

    end

    if next(particle_info) ~= nil then
        particle_data[prt.index] = particle_info
    end

    particle_name_map[prt.index] = prt.name
    add_divider()
end


function script.OnParticleUpdate(prt)
    if prt.controlPoint == 2 and prt.position == Vector(1.0, 1.0, 1.0) then
        return
    end

    local _localhero = Heroes.GetLocal()
    if not _localhero then return end  -- тоже важно
    
    prt = table.copy(prt)

    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end

    if prt[""[m]name""] == ""teleport_start"" then
        local data = particle_data[prt.index]
        if not data then
            print(""No entity data for this particle"")
            return
        end

        if Entity.IsSameTeam(_localhero, data.unit) then
            print(""Same team"")
            return
        end    
        local pos_key = tostring(math.floor(prt.position.x)) .. ""_"" .. tostring(math.floor(prt.position.y))
        if handled_positions[pos_key] then
            print(""Already handled teleport at: "" .. pos_key)
            return
        end
        handled_positions[pos_key] = true
        if Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"", ""Sun Strike for low HP teleport""):Get() == false then
            print(""Sun strike for low HP disabled"")
            return
        end

        if Entity.GetUnitName(_localhero) ~= ""npc_dota_hero_invoker"" then return end
        

        local sunstrike = NPC.GetAbility(_localhero, ""invoker_sun_strike"")
        local exort = NPC.GetAbility(_localhero, ""invoker_exort"")
        local invoke = NPC.GetAbility(_localhero, ""invoker_invoke"")
        if not sunstrike or not exort then return end
        
        local enemy = data.unit
        local exort_level = Ability.GetLevel(exort)
        local damage = 125 + (50 * exort_level)
        local player = Players.GetLocal()
        if Ability.IsReady(sunstrike) then
            print(""Sunstrike is ready"")
            if data.health + 5 <= damage then
                print(""Damage critical!"")
                if enemy then
                    local enemyid = Entity.GetIndex(enemy)

                    if heroes[enemyid] then
                        print(data.unit_name .. "" last seen at "" .. heroes[enemyid])

                        local now = os.time()
                        local seconds_passed = now - heroes[enemyid]

                        print(""After "" .. seconds_passed .. "" seconds"")
                        
                        local maxsleep = tonumber(Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"", ""Max no-vision time""):Get())
                        print(""Max no-vision time "" .. maxsleep .. "" sec."")
                        if seconds_passed > maxsleep then
                            print(""Прошло более "" .. maxsleep .. "" секунд."")
                            return
                        end
                    else
                        print(""Нет информации о последнем появлении для enemyid: "" .. tostring(enemyid))
                    end
                else
                    print(""data.unit is nil!"")
                end

                if not Ability.IsHidden(sunstrike) then
                    Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_POSITION, nil, prt.position, sunstrike, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)
                    Engine.LookAt(prt.position.x, prt.position.y)
                    return
                end
                for i = 1, 3 do
                    AddAction(0.01, function()
                        Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_NO_TARGET, nil, Vector(), exort, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)                    
                        print(""prepare #"" .. i .. "" for exort"")
                    end)
                end

                if invoke and Ability.IsReady(invoke) then
                    print(""invoke is ready and cast it"")
                    print(""Начало "" .. os.time())
                    AddAction(0.25, function()
                        Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_NO_TARGET, nil, Vector(), invoke, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)
                        print(""Конец "".. os.time())
                    end)
                    
                end

                AddAction(0.15, function()
                    print(""Casting sunstrike"")
                    Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_POSITION, nil, prt.position, sunstrike, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)
--                    Engine.ExecuteCommand(""say Sunstrike casted at position: "" .. tostring(prt.position) .. "" for "" .. data.unit_name)
                    Engine.LookAt(prt.position.x, prt.position.y)
                end)
            end
        end
    end
    add_divider()
end


function script.OnParticleUpdateEntity(prt)
    MiniMap.SendLine(prt.position, false, false)
    prt = table.copy(prt)
    if (prt.entity and Entity.IsNPC(prt.entity)) then
        local unit_name = NPC.GetUnitName(prt.entity)
        prt[""[m]entity_name""] = unit_name
    end

    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end
    
    add_divider()
end

function script.OnParticleUpdateFallback(prt)

    prt = table.copy(prt)
    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end
    
    add_divider()
end

function script.OnParticleDestroy(prt)
    prt = table.copy(prt)

    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end

    particle_name_map[prt.index] = nil
    particle_data[prt.index] = nil

    
    add_divider()
end


--#endregion



return script"
20WPT4Pk,rawshell,goldfiction,Lua,Sunday 22nd of June 2025 12:52:14 AM CDT,"-- MIT License
--
-- Copyright (c) 2021 JackMacWindows
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the ""Software""), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

local rawterm = require ""rawterm"" -- https://gist.github.com/MCJack123/50b211c55ceca4376e51d33435026006
local hasECC, ecc                 -- https://pastebin.com/ZGJGBJdg (comment out `os.pullEvent`s)
local hasRedrun, redrun           -- https://gist.github.com/MCJack123/473475f07b980d57dd2bd818026c97e8

local localEvents = {key = true, key_up = true, char = true, mouse_click = true, mouse_up = true, mouse_drag = true, mouse_scroll = true, mouse_move = true, term_resize = true, paste = true}
local serverRunning = false
local width, height = term.getSize()

local function randomString()
    local str = """"
    for i = 1, 16 do str = str .. string.char(math.random(32, 127)) end
    return str
end

local function singleserver(delegate, func, ...)
    local server = rawterm.server(delegate, width, height, 0, ""Remote Shell"")
    delegate.server = server
    local coro = coroutine.create(func)
    local oldterm = term.redirect(server)
    local ok, filter = coroutine.resume(coro, ...)
    term.redirect(oldterm)
    server.setVisible(false)
    local lastRender = os.epoch ""utc""
    while ok and coroutine.status(coro) == ""suspended"" and not delegate.closed do
        local ev = table.pack(server.pullEvent(filter, true))
        oldterm = term.redirect(server)
        ok, filter = coroutine.resume(coro, table.unpack(ev, 1, ev.n))
        term.redirect(oldterm)
        if os.epoch ""utc"" - lastRender >= 50 then
            server.setVisible(true)
            server.setVisible(false)
            lastRender = os.epoch ""utc""
        end
    end
    if not ok then printError(filter) end
    server.close()
    if coroutine.status(coro) == ""suspended"" then
        oldterm = term.redirect(server)
        filter = coroutine.resume(coro, ""terminate"")
        term.redirect(oldterm)
    end
end

local delegate_mt = {}
delegate_mt.__index = delegate_mt
function delegate_mt:send(data)
    if self.closed then return end
    if self.key then data = string.char(table.unpack(ecc.encrypt(randomString() .. data, self.key))) end
    self.modem.transmit(self.port, self.port, {id = os.computerID(), data = data})
end
function delegate_mt:receive()
    if self.closed then return nil end
    while true do
        local ev, side, channel, reply, message = os.pullEventRaw(""modem_message"")
        if ev == ""modem_message"" and channel == self.port and type(message) == ""table"" and message.id == self.id then
            message = message.data
            if self.key then
                message = string.char(table.unpack(ecc.decrypt(message, self.key)))
                --[[ argh, decrypt yields and that will break this, so we have to run it in a coroutine!
                local coro = coroutine.create(ecc.decrypt)
                local ok, a
                while coroutine.status(coro) == ""suspended"" do ok, a = coroutine.resume(coro, message, self.key) end
                if not ok then printError(message) return end
                message = string.char(table.unpack(a))
                ]]
                if #message > 16 and not self.nonces[message:sub(1, 16)] then
                    self.nonces[message:sub(1, 16)] = true
                    self.port = reply
                    return message:sub(17)
                end
            else
                self.port = reply
                return message
            end
        end
    end
end
function delegate_mt:close()
    if self.closed then return end
    if not self.silent then print(""> Closed connection on port "" .. self.port) end
    self.modem.close(self.port)
    self.key = nil
    self.nonces = nil
    self.closed = true
end

local function makeDelegate(modem, port, key, id, silent)
    modem.open(port)
    return setmetatable({
        modem = modem,
        port = port,
        key = key,
        id = id,
        silent = silent,
        closed = false,
        nonces = key and {}
    }, delegate_mt)
end

local function serve(password, secure, modem, program, url, background)
    if secure and not hasECC then error(""Secure mode requires the ECC library to function."", 2)
    elseif password and not secure then
        term.setTextColor(colors.yellow)
        print(""Warning: A password was set, but secure mode is disabled. Password will be sent in plaintext."")
        term.setTextColor(colors.white)
    end
    modem = modem or peripheral.find(""modem"")
    if not modem then error(""Please attach a modem."", 2) end
    modem.open(5731)
    local priv, pub
    if secure then
        priv, pub = ecc.keypair(ecc.random.random())
        if password then password = ecc.sha256.digest(password):toHex() end
    end
    print(""Server is now listening for connections."")
    local threads = {}
    local usedChallenges = {}
    serverRunning = true
    while serverRunning do
        local ev = table.pack(coroutine.yield())
        if ev[1] == ""modem_message"" and ev[3] == 5731 and type(ev[5]) == ""table"" and ev[5].server == os.computerID() then
            if not ev[5].id then
                modem.transmit(5731, 5731, {server = os.computerID(), status = ""Missing ID""})
            elseif secure and (not ev[5].key or not ev[5].challenge) then
                modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Secure connection required"", key = pub, challenge = randomString()})
            elseif secure and (not ev[5].response or string.char(table.unpack(ecc.decrypt(ev[5].response, ecc.exchange(priv, ev[5].key)) or {})) ~= ev[5].challenge) then
                modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Challenge failed"", key = pub, challenge = randomString()})
            elseif password and not ev[5].password then
                modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Password required""})
            else
                local ok = true
                local key
                if secure then key = ecc.exchange(priv, ev[5].key) end
                if password then
                    if secure then ok = not usedChallenges[ev[5].challenge] and string.char(table.unpack(ecc.decrypt(ev[5].password, key))) == password .. ev[5].challenge
                    else ok = ev[5].password == password end
                end
                if ok then
                    if secure then usedChallenges[ev[5].challenge] = true end
                    local port = math.random(1000, 65500)
                    while modem.isOpen(port) do port = math.random(1000, 65500) end
                    if not background then print(""> New connection from ID "" .. ev[5].id .. "" on port "" .. port) end
                    modem.transmit(5731, port, {server = os.computerID(), id = ev[5].id, status = ""Opening connection""})
                    local coro = coroutine.create(singleserver)
                    local delegate = makeDelegate(modem, port, key, ev[5].id, background)
                    local ok, filter
                    if background then
                        if program then program = program:gsub(""^%S+"", shell.resolveProgram) end
                        ok, filter = coroutine.resume(coro, delegate, os.run, setmetatable({}, {__index = _G}), program or ""rom/programs/shell.lua"")
                    else ok, filter = coroutine.resume(coro, delegate, shell.run, program or ""shell"") end
                    if ok then threads[#threads+1] = {delegate = delegate, coro = coro, filter = filter}
                    else printError(filter) end
                else
                    modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Password incorrect""})
                end
            end
        elseif ev[1] == ""terminate"" then serverRunning = false
        else
            local ok
            local delete = {}
            for i,v in pairs(threads) do
                if (v.filter == nil or v.filter == ev[1]) and not localEvents[ev[1]] then
                    ok, v.filter = coroutine.resume(v.coro, table.unpack(ev, 1, ev.n))
                    if not ok or coroutine.status(v.coro) ~= ""suspended"" then
                        if not ok then printError(v.filter) end
                        delete[#delete+1] = i
                    end
                end
            end
            for _,v in ipairs(delete) do threads[v] = nil end
        end
    end
    for _,v in pairs(threads) do
        if coroutine.status(v.coro) == ""suspended"" then coroutine.resume(v.coro, ""terminate"") end
        v.delegate.server.close()
    end
    print(""Server closed."")
end

local function recv(id)
    local tm = os.startTimer(5)
    while true do
        local ev = table.pack(os.pullEvent())
        if ev[1] == ""modem_message"" and ev[3] == 5731 and type(ev[5]) == ""table"" and ev[5].server == id then return ev[5], ev[4]
        elseif ev[1] == ""timer"" and ev[2] == tm then return nil end
    end
end

local function connect(id, modem, win)
    if not tonumber(id) then
        if not http.checkURL(id:gsub(""wss?://"", ""http://"")) then error(""ID argument must be a number or URL"", 2) end
        local delegate = rawterm.wsDelegate(id)
        return rawterm.client(delegate, 0, win), delegate
    end
    id = tonumber(id)
    modem = modem or peripheral.find(""modem"")
    if not modem then error(""Please attach a modem."", 2) end
    modem.open(5731)
    local req = {server = id, id = os.computerID()}
    local key, res, port
    while true do
        modem.transmit(5731, 5731, req)
        res, port = recv(id)
        if not res then error(""Connection failed: Timeout"") end
        if res.status == ""Secure connection required"" then
            if not hasECC then hasECC, ecc = pcall(require, ""ecc"") end
            if not hasECC then error(""Connection failed: Server requires secure connection, but ECC library is not installed."", 2) end
            local priv, pub = ecc.keypair(ecc.random.random())
            key = ecc.exchange(priv, res.key)
            req.key = pub
            req.challenge = res.challenge
            req.response = string.char(table.unpack(ecc.encrypt(res.challenge, key)))
        elseif res.status == ""Password required"" then
            if not key then print(""Warning: This connection is not secure. Your password will be sent unencrypted."") end
            write(""Password: "")
            req.password = read(""\7"")
            if key then req.password = string.char(table.unpack(ecc.encrypt(ecc.sha256.digest(req.password):toHex() .. req.challenge, key))) end
        elseif res.status == ""Opening connection"" then break
        else error(""Connection failed: "" .. res.status, 2) end
    end
    local delegate = makeDelegate(modem, port, key, id, true)
    return rawterm.client(delegate, 0, win), delegate
end

local args = {...}

if args[1] == ""serve"" or args[1] == ""host"" then
    local background = false
    local program = nil
    local modem = nil
    local password = nil
    local secure = false
    local url = nil
    local nextarg = nil
    for _, arg in ipairs(args) do
        if nextarg then
            if nextarg == 1 then program = arg
            elseif nextarg == 2 then modem = arg
            elseif nextarg == 3 then password = arg
            elseif nextarg == 4 then url = arg
            elseif nextarg == 5 then
                local w, h = arg:match(""^(%d+)x(%d+)$"")
                if not w then error(""Invalid argument for -r"") end
                width, height = tonumber(w), tonumber(h)
            end
            nextarg = nil
        elseif arg == ""-b"" then
            hasRedrun, redrun = pcall(require, ""redrun"")
            background = true
        elseif arg == ""-s"" then
            hasECC, ecc = pcall(require, ""ecc"")
            secure = true
        elseif arg == ""-c"" then nextarg = 1
        elseif arg == ""-m"" then nextarg = 2
        elseif arg == ""-p"" then nextarg = 3
        elseif arg == ""-r"" then nextarg = 5
        elseif arg == ""-w"" then nextarg = 4 end
    end

    if modem then
        if peripheral.getType(modem) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(modem)
    end
    if background then
        if not hasRedrun then error(""Background task running requires the RedRun library."") end
        if url then
            redrun.start(function() return singleserver(rawterm.wsDelegate(url, {[""X-Rawterm-Is-Server""] = ""Yes""}), os.run, setmetatable({}, {__index = _G}), program or ""rom/programs/shell.lua"") end, ""rawshell_server"")
        else
            redrun.start(function() return serve(password, secure, modem, program, url, true) end, ""rawshell_server"")
            while not serverRunning do coroutine.yield() end
        end
    elseif url then singleserver(rawterm.wsDelegate(url, {[""X-Rawterm-Is-Server""] = ""Yes""}), shell.run, program or ""shell"")
    else serve(password, secure, modem, program, url, false) end
elseif args[1] == ""connect"" and args[2] then
    local modem
    if args[3] then
        if peripheral.getType(args[3]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[3])
    end
    local handle = connect(args[2], modem, term.current())
    local ok, err = pcall(handle.run)
    if term.current().setVisible then term.current().setVisible(true) end
    handle.close()
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
    term.setCursorBlink(true)
    if not ok then error(err, 2) end
elseif args[1] == ""get"" and args[2] and args[3] then
    local modem
    if args[5] then
        if peripheral.getType(args[5]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[5])
    end
    local handle, delegate = connect(args[2], modem, nil)
    parallel.waitForAny(
        function() while not handle.fs do handle.update(delegate:receive()) end end,
        function() sleep(2) end)
    if not handle.fs then error(""Connection failed: Server does not support filesystem transfers"") end
    local infile, err = handle.fs.open(args[3], ""rb"")
    if not infile then error(""Could not open remote file: "" .. (err or ""Unknown error"")) end
    local outfile, err = fs.open(args[4] or shell.resolve(fs.getName(args[3])), ""wb"")
    if not outfile then
        infile.close()
        error(""Could not open local file: "" .. (err or ""Unknown error""))
    end
    outfile.write(infile.readAll())
    infile.close()
    outfile.close()
    handle.close()
    print(""Downloaded file as "" .. (args[4] or shell.resolve(fs.getName(args[3]))))
elseif args[1] == ""put"" and args[2] and args[3] and args[4] then
    local modem
    if args[5] then
        if peripheral.getType(args[5]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[5])
    end
    local handle, delegate = connect(args[2], modem, nil)
    parallel.waitForAny(
        function() while not handle.fs do handle.update(delegate:receive()) end end,
        function() sleep(2) end)
    if not handle.fs then error(""Connection failed: Server does not support filesystem transfers"") end
    local infile, err = fs.open(args[3], ""rb"")
    if not infile then error(""Could not open remote file: "" .. (err or ""Unknown error"")) end
    local outfile, err = handle.fs.open(args[4] or shell.resolve(fs.getName(args[3])), ""wb"")
    if not outfile then
        infile.close()
        error(""Could not open local file: "" .. (err or ""Unknown error""))
    end
    outfile.write(infile.readAll())
    infile.close()
    outfile.close()
    handle.close()
    print(""Uploaded file as "" .. (args[4] or shell.resolve(fs.getName(args[3]))))
elseif (args[1] == ""ls"" or args[1] == ""list"") and args[2] then
    local modem
    if args[4] then
        if peripheral.getType(args[5]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[5])
    end
    local handle, delegate = connect(args[2], modem, nil)
    parallel.waitForAny(
        function() while not handle.fs do handle.update(delegate:receive()) end end,
        function() sleep(2) end)
    if not handle.fs then error(""Connection failed: Server does not support filesystem transfers"") end
    local files = handle.fs.list(args[3] or ""/"")
    local fileList, dirList = {}, {}
    local showHidden = settings.get(""list.show_hidden"")
    for _, v in pairs(files) do
        if showHidden or v:sub(1, 1) ~= ""."" then
            local path = fs.combine(args[3] or ""/"", v)
            if handle.fs.isDir(path) then dirList[#dirList+1] = v
            else fileList[#fileList+1] = v end
        end
    end
    handle.close()
    table.sort(dirList)
    table.sort(fileList)
    if term.isColor() then textutils.pagedTabulate(colors.green, dirList, colors.white, fileList)
    else textutils.pagedTabulate(colors.lightGray, dirList, colors.white, fileList) end
elseif args[1] == ""status"" then
    hasRedrun, redrun = pcall(require, ""redrun"")
    if hasRedrun then
        local id = redrun.getid(""rawshell_server"")
        if not id then print(""Status: Server is not running."")
        else print(""Status: Server is running as ID "" .. id .. ""."") end
    else error(""Background task running requires the RedRun library."") end
elseif args[1] == ""stop"" then
    hasRedrun, redrun = pcall(require, ""redrun"")
    if hasRedrun then
        local id = redrun.getid(""rawshell_server"")
        if not id then error(""Server is not running."") end
        redrun.terminate(id)
    else error(""Background task running requires the RedRun library."") end
else
    term.setTextColor(colors.red)
    textutils.pagedPrint[[
Usage:
    rawshell connect <id> [side]
    rawshell get <id> <remote path> [local path] [side]
    rawshell put <id> <local path> <remote path> [side]
    raswhell ls <id> [remote path]
    rawshell serve [-c <program>] [-m <side>] [-p <password>] [-w <url>] [-b] [-s]
    rawshell status
    rawshell stop
Arguments:
    <id>                The ID of the server to connect to, or a WebSocket URL
    -b                  Run in background (requires RedRun)
    -c <program>        Program to run on connection (defaults to ""shell"")
    -m <side> / [side]  Use modem attached to the selected side
    -p <password>       Require password to log in
    -r <width>x<height> Set the resolution of the virtual screen
    -s                  Use secure connection (requires ECC)
    -w <url>            Serve to a WebSocket URL instead of over a modem]]
    term.setTextColor(colors.white)
end"
brvk9iL2,Runnables_task,Arhons,Python,Sunday 22nd of June 2025 12:28:56 AM CDT,"from langchain_core.runnables import RunnableLambda, RunnableParallel
import grandalf


equation_data = {""a"": 1, ""b"": 2, ""c"": 5}

D = RunnableLambda(lambda data: data[""b""]**2 - 4 * data[""a""] * data[""c""])

x = RunnableLambda(lambda data: -data[""b""]/(2 * data[""a""]))
x1 = RunnableLambda(lambda data: (-data[""b""] + D.invoke(data)**0.5)/(2 * data[""a""]))
x2 = RunnableLambda(lambda data: (-data[""b""] - D.invoke(data)**0.5)/(2 * data[""a""]))

roots = RunnableParallel({""Корень 1:"": x1, ""Корень 2:"": x2})

chain = RunnableLambda(lambda data: x.invoke(data) if D.invoke(data) == 0 else(""Корней нет"" if D.invoke(data) < 0 else roots.invoke(data)))

chain.get_graph().print_ascii()

result = chain.invoke(equation_data)
print(result)




"
ikpe1WBZ,Lab 4 V2,CrhisDLM,C++,Saturday 21st of June 2025 11:50:35 PM CDT,"//Codigo Arduino
//lAB 3
//Crhistian David Lucumi
//Usc
//Version 2.0
int valor = 0;

#define MAX 9
int led[MAX] = {
  2, 3, 4, 5, 6, 7, 8, 9, 10
};
int t_off = 500;
int t_on = 100;


void setup() {
  Serial.begin(9600);
  for (int pin = 0; pin <= MAX; pin++) {
    pinMode(led[pin], OUTPUT);
  }
}


void loop() {
  for (int pin = 0; pin <= MAX; pin++) {
    prender(led[pin], t_on);
    apagar(led[pin], t_off);
    leerSerial();
  }
  for (int pin = MAX; pin >= 0; pin--) {
    prender(led[pin], t_on);
    apagar(led[pin], t_off);
    leerSerial();
  }
}

void prender(int le, int tem) {
  digitalWrite(le, HIGH);
  delay(tem);
}
void apagar(int le, int tem) {
  digitalWrite(le, LOW);
  delay(tem);
}
void leerSerial() {
  if (Serial.available() > 0) {
    valor = Serial.read();
    if (valor == 'O') {
      t_on = Serial.parseInt();
    }
    if (valor == 'F') {
      t_off = Serial.parseInt();
    }
  }
}"
fdndgqvv,img2scad,j0h,Python,Saturday 21st of June 2025 10:49:58 PM CDT,"#!/usr/bin/env python3

from PIL import Image
import numpy as np

# === CONFIG ===
INPUT_IMAGE = ""t.png""
OUTPUT_SCAD = ""output.scad""
PIXEL_SIZE = 1       # mm per pixel (X and Y)
MAX_HEIGHT = 10.0    # max Z height in mm
DOWNSCALE = 3        # Skip every N pixels for speed (set to 1 for full res)
		     # Full res will result in very long openscad load times

# === LOAD AND PROCESS IMAGE ===
img = Image.open(INPUT_IMAGE).convert(""L"")
data = np.array(img)

# Optionally downscale to speed up output
data = data[::DOWNSCALE, ::DOWNSCALE]

# Normalize grayscale to height
zscale = MAX_HEIGHT / 255.0
heights = data * zscale

rows, cols = heights.shape

# === WRITE SCAD FILE ===
with open(OUTPUT_SCAD, ""w"") as f:
    f.write(""// Generated by img2scad.py\n"")
    f.write(""union() {\n"")

    for y in range(rows):
        for x in range(cols):
            h = heights[y, x]
            if h > 0:
                # OpenSCAD coordinate system: [x, y, z]
                f.write(f""  translate([{x * PIXEL_SIZE}, {y * PIXEL_SIZE}, 0])\n"")
                f.write(f""    cube([{PIXEL_SIZE}, {PIXEL_SIZE}, {h:.2f}]);\n"")

    f.write(""}\n"")

print(f""Done. Output written to: {OUTPUT_SCAD}"")

'''
Notes:
openSCAD will take forever to load a prebuilt complex openscad file IF you load that object from the start.
(even if you have manifold selected in the rendering options of developer mode)
(becuase init still uses CSG regardless)
The work around is to load a blank output file, then generate the data using this script.
then, provided you have manifold selected, reloading the data will be much faster.

2. This is true, to 200K objects. at over 200K objects, openscad will default to CSG modeling, which is the same
as being broken.

3. background subtraction concept forgoing complex image processing:
 for h < some min_hight
 render no objects.
 this may help keep object count low, where you can continue to reap the benifits of manifold rendering.
 
 h < 3
 but Im pretty tired finding other ppls bugs. Ima go sleep.


'''"
Ykspme9H,A tree that is able to be cut down,Cat_in_the_hat,Lua,Saturday 21st of June 2025 09:22:33 PM CDT,"local spacing = 12
local treeSpots = {}
local placedTrees = {}
local requiredHits = 6
local spreadat = ItemType.GRASS

local function isFarEnough(pos)
	for _, placedPos in pairs(placedTrees) do
		if (placedPos - pos).Magnitude < spacing then
			return false
		end
	end
	return true
end

for _, block in pairs(BlockService.getAllBlocks({ spreadat })) do
	local basePos = block.position
	if isFarEnough(basePos) then
		table.insert(treeSpots, basePos)
		table.insert(placedTrees, basePos)
	end
end

for _, basePos in pairs(treeSpots) do
	local trunk = {}
	local leaves = {}
	local allParts = {}
	local partData = {}
	local hits = 0

	for i = 1, 6 do
		local part = PartService.createPart(ItemType.WOOL_BROWN, basePos + Vector3.new(0, i * 3, 0))
		part:setSize(Vector3.new(3, 3, 3))
		part:setAnchored(true)
		part:setCollidable(true)
		table.insert(trunk, part)
	end

	local center = basePos + Vector3.new(0, 21, 0)
	for x = -2, 2 do
		for y = -2, 2 do
			for z = -2, 2 do
				local offset = Vector3.new(x, y, z)
				if offset.Magnitude <= 2.5 then
					local pos = center + offset * 3
					local part = PartService.createPart(ItemType.WOOL_GREEN, pos)
					part:setSize(Vector3.new(3, 3, 3))
					part:setAnchored(true)
					part:setCollidable(true)
					table.insert(leaves, part)
				end
			end
		end
	end

	for _, part in pairs(trunk) do table.insert(allParts, part) end
	for _, part in pairs(leaves) do table.insert(allParts, part) end
	for _, part in pairs(allParts) do
		table.insert(partData, {
			part = part,
			offset = part:getPosition() - basePos
		})
	end

	Events.WeaponSwing(function(event)
		local entity = event.player:getEntity()
		if not entity then return end
		if (entity:getPosition() - basePos - Vector3.new(0, 3, 0)).Magnitude > 7 then return end

		hits += 1
		if hits == requiredHits then
			local direction = entity:getCFrame().LookVector
			local fallAxis = Vector3.new(0, 1, 0):Cross(direction).Unit

			task.spawn(function()
				for i = 1, 20 do
					task.wait(0.005)
					local progress = i / 20
					local rotation = CFrame.fromAxisAngle(fallAxis, math.rad(70) * progress)
					for _, data in pairs(partData) do
						local rotated = rotation:vectorToWorldSpace(data.offset)
						data.part:setCFrame(CFrame.new(basePos + rotated) * rotation)
					end
				end

				for _, data in pairs(partData) do
					data.part:setAnchored(false)
					data.part:setCollidable(true)
				end

				task.delay(7, function()
					local index = 1
					local batchSize = 1
					while index <= #partData do
						for i = index, math.min(index + batchSize - 1, #partData) do
							partData[i].part:setCollidable(false)
						end
						task.wait(0.2)
						index += batchSize
						if batchSize < 4 then
							batchSize += 1
						end
					end
				end)
			end)
		end
	end)
end"
WHprZrQc,cursor blink and extra keys,RebelRose,Bash,Saturday 21st of June 2025 09:02:29 PM CDT,"terminal-cursor-blink-rate=500


extra-keys = [ \
 ['ESC','/','-','HOME','UP','END','PGUP','BKSP'], \
 ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','ENTER'] \
]"
haJdva4d,Roblox Scripts/Exploits (NEW),Robloxian_1732,Lua,Saturday 21st of June 2025 08:25:52 PM CDT,"--GROW A GARDEN-GROW A GARDEN-GROW A GARDEN-↓
loadstring(game:HttpGet(""https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua"", true))()
--GROW A GARDEN-GROW A GARDEN-GROW A GARDEN-↑

--DEAD RAILS-DEAD RAILS-DEAD RAILS-DEAD RAILS-↓
getgenv().auto_bond=true
getgenv().auto_win=true
loadstring(game:HttpGet('https://raw.githubusercontent.com/m00ndiety/Dead-rails/refs/heads/main/Auto-Win-With-Bonds'))()
--DEAD RAILS-DEAD RAILS-DEAD RAILS-DEAD RAILS-↑"
9BPfNKAX,RFTools Control - Yrdeen AE2 Autocraft,toastonrye,JSON,Saturday 21st of June 2025 07:42:48 PM CDT,"[
  {
    ""pos"": {
      ""x"": 0,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_comment"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Proof of concept""
          }
        },
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Designed to work with AE2""
          }
        },
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""toastonrye""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 0,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""eval_rs"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""side"",
          ""value"": {
            ""side"": ""west""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 0,
      ""y"": 2
    },
    ""opcode"": {
      ""id"": ""ev_timer"",
      ""primary"": ""U"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 40
          }
        },
        {
          ""type"": ""boolean"",
          ""value"": {
            ""null"": true
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 9,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""250 Crystalline""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 9,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_fetchliquid"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""up""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 250
          }
        },
        {
          ""type"": ""fluid"",
          ""value"": {
            ""fluid"": ""crystalline"",
            ""amount"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 2
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 7,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""1000 Concrete""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 7,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_fetchliquid"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""up""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1000
          }
        },
        {
          ""type"": ""fluid"",
          ""value"": {
            ""fluid"": ""concrete"",
            ""amount"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 9,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_pushliquid"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""north"",
            ""node"": ""tinker""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 250
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 2
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 5,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""144 Nitronite""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 5,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_fetchliquid"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""up""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 144
          }
        },
        {
          ""type"": ""fluid"",
          ""value"": {
            ""fluid"": ""nitronite_fluid"",
            ""amount"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 0
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 7,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_releaselock"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""latch""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 3,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 3,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_set"",
      ""primary"": ""U"",
      ""secondary"": ""r"",
      ""parameters"": [
        {
          ""type"": ""boolean"",
          ""value"": {
            ""fun"": ""last_bool""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 5,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_stop"",
      ""parameters"": []
    }
  },
  {
    ""pos"": {
      ""x"": 1,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_set"",
      ""primary"": ""R"",
      ""secondary"": ""d"",
      ""parameters"": [
        {
          ""type"": ""boolean"",
          ""value"": {
            ""fun"": ""last_bool""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 1,
      ""y"": 2
    },
    ""opcode"": {
      ""id"": ""do_stop"",
      ""parameters"": []
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_eq_number"",
      ""primary"": ""D"",
      ""secondary"": ""u"",
      ""parameters"": [
        {
          ""type"": ""number"",
          ""value"": {
            ""fun"": ""last_number""
          }
        },
        {
          ""type"": ""number"",
          ""value"": {
            ""v"": 250
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 8,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 2
    },
    ""opcode"": {
      ""id"": ""do_pushliquid"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""north"",
            ""node"": ""tinker""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 144
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 0
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 8,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_eq_number"",
      ""primary"": ""R"",
      ""secondary"": ""u"",
      ""parameters"": [
        {
          ""type"": ""number"",
          ""value"": {
            ""fun"": ""last_number""
          }
        },
        {
          ""type"": ""number"",
          ""value"": {
            ""v"": 1000
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_pushliquid"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""north"",
            ""node"": ""tinker""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 6,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 6,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_eq_number"",
      ""primary"": ""R"",
      ""secondary"": ""u"",
      ""parameters"": [
        {
          ""type"": ""number"",
          ""value"": {
            ""fun"": ""last_number""
          }
        },
        {
          ""type"": ""number"",
          ""value"": {
            ""v"": 144
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 8,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 20
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 4,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_lock"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""latch""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 6,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Done""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 2,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Locked""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 2,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""eval_lock"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""latch""
          }
        }
      ]
    }
  }
]"
jdVFPH4b,2025-06-21_stats.json,rdp_snitch,JSON,Saturday 21st of June 2025 07:18:37 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 27738,
    ""14.225.202.191"": 12240,
    ""157.230.248.35"": 2610,
    ""167.172.222.218"": 12,
    ""96.126.114.48"": 3,
    ""162.216.150.136"": 12,
    ""151.41.176.50"": 3,
    ""198.235.24.180"": 9,
    ""185.196.220.41"": 9,
    ""185.156.73.154"": 6,
    ""92.63.197.23"": 27,
    ""198.235.24.228"": 9,
    ""165.232.160.65"": 3,
    ""223.27.82.162"": 45,
    ""111.170.152.113"": 9,
    ""68.183.179.179"": 3,
    ""198.235.24.109"": 9,
    ""45.146.130.128"": 6,
    ""193.24.211.25"": 9,
    ""91.238.181.91"": 6,
    ""88.214.25.124"": 6,
    ""191.252.2.116"": 12,
    ""205.210.31.96"": 9,
    ""45.55.52.60"": 3,
    ""23.148.144.149"": 3
  },
  ""asn"": {
    ""AS11427"": 27738,
    ""AS135905"": 12240,
    ""AS14061"": 2631,
    ""AS63949"": 3,
    ""AS396982"": 48,
    ""AS1267"": 3,
    ""AS213438"": 9,
    ""AS210848"": 33,
    ""AS38071"": 45,
    ""AS151185"": 9,
    ""AS213790"": 6,
    ""AS215929"": 9,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS27715"": 12,
    ""AS46664"": 3
  },
  ""isp"": {
    ""Charter Communications Inc"": 27738,
    ""Vietnam Posts and Telecommunications Group"": 12240,
    ""DigitalOcean, LLC"": 2631,
    ""Akamai Technologies, Inc."": 3,
    ""Google LLC"": 48,
    ""INFOSTRADA"": 3,
    ""ColocaTel Inc."": 9,
    ""OOO SibirInvest"": 6,
    ""Telkom Internet LTD"": 27,
    ""Aftab IT Limited"": 45,
    ""China Telecom"": 9,
    ""Limited Network LTD"": 6,
    ""Data Campus Limited"": 9,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Locaweb Servi\u00e7os de Internet S/A"": 12,
    ""VolumeDrive"": 3
  },
  ""org"": {
    ""Spectrum"": 27738,
    ""VNPT"": 12240,
    ""DigitalOcean, LLC"": 2628,
    ""Linode"": 3,
    ""Google Cloud (us-east1)"": 12,
    ""Unknown"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Colocatel Inc"": 9,
    ""IP Kiktev Nikolay Vladimirovich"": 6,
    ""Korotkij Denis Aleksandrovich"": 27,
    ""Aftab IT Limited"": 45,
    ""Chinanet HB"": 9,
    ""Limited Network LTD"": 6,
    ""Data Campus Limited"": 9,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Locaweb Servi\u00e7os de Internet S/A"": 12,
    ""Digital Ocean"": 3,
    ""Quick Server Hosting LLC"": 3
  },
  ""regionName"": {
    ""Texas"": 27741,
    ""Hanoi"": 12240,
    ""South West"": 2616,
    ""California"": 48,
    ""South Carolina"": 12,
    ""Emilia-Romagna"": 3,
    ""Virginia"": 9,
    ""North Holland"": 33,
    ""Dhaka Division"": 45,
    ""Hubei"": 9,
    ""Federal District"": 6,
    ""Central and Western District"": 9,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""S\u00e3o Paulo"": 12,
    ""New Jersey"": 3,
    ""Pennsylvania"": 3
  },
  ""country"": {
    ""United States"": 27816,
    ""Vietnam"": 12240,
    ""Singapore"": 2616,
    ""Italy"": 3,
    ""The Netherlands"": 33,
    ""Bangladesh"": 45,
    ""China"": 9,
    ""Brazil"": 18,
    ""Hong Kong"": 15,
    ""France"": 6
  },
  ""account"": {
    ""hello"": 42618,
    ""w11d1hlb"": 12,
    ""beio"": 3,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""a"": 3,
    ""VNqVxJteH"": 3,
    ""Pumpge"": 3,
    ""QWllyX"": 3,
    ""Domain"": 9,
    ""Administr"": 42,
    ""YtylTKlqH"": 3,
    ""UmZkNe"": 3,
    ""YFGXYc"": 3,
    ""(empty)"": 3,
    ""Administrator"": 15,
    ""Admin"": 15,
    ""User"": 15,
    ""sPjlVZCVq"": 3,
    ""IearQT"": 3,
    ""efQuBI"": 3,
    ""Test"": 18,
    ""AITPbfbpX"": 3,
    ""cLgSmB"": 3,
    ""bQqZsw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 42801
  },
  ""client_build"": {
    ""Unknown"": 42801
  },
  ""client_name"": {
    ""Unknown"": 42801
  },
  ""ip_type"": {
    ""Unknown"": 40092,
    ""hosting"": 2703,
    ""proxy"": 6
  }
}"
DrbKmz8F,2025-06-21_stats.json,rdp_snitch,JSON,Saturday 21st of June 2025 07:16:23 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 18492,
    ""14.225.202.191"": 8160,
    ""157.230.248.35"": 1740,
    ""167.172.222.218"": 8,
    ""96.126.114.48"": 2,
    ""162.216.150.136"": 8,
    ""151.41.176.50"": 2,
    ""198.235.24.180"": 6,
    ""185.196.220.41"": 6,
    ""185.156.73.154"": 4,
    ""92.63.197.23"": 18,
    ""198.235.24.228"": 6,
    ""165.232.160.65"": 2,
    ""223.27.82.162"": 30,
    ""111.170.152.113"": 6,
    ""68.183.179.179"": 2,
    ""198.235.24.109"": 6,
    ""45.146.130.128"": 4,
    ""193.24.211.25"": 6,
    ""91.238.181.91"": 4,
    ""88.214.25.124"": 4,
    ""191.252.2.116"": 8,
    ""205.210.31.96"": 6,
    ""45.55.52.60"": 2,
    ""23.148.144.149"": 2
  },
  ""asn"": {
    ""AS11427"": 18492,
    ""AS135905"": 8160,
    ""AS14061"": 1754,
    ""AS63949"": 2,
    ""AS396982"": 32,
    ""AS1267"": 2,
    ""AS213438"": 6,
    ""AS210848"": 22,
    ""AS38071"": 30,
    ""AS151185"": 6,
    ""AS213790"": 4,
    ""AS215929"": 6,
    ""AS49434"": 4,
    ""AS35042"": 4,
    ""AS27715"": 8,
    ""AS46664"": 2
  },
  ""isp"": {
    ""Charter Communications Inc"": 18492,
    ""Vietnam Posts and Telecommunications Group"": 8160,
    ""DigitalOcean, LLC"": 1754,
    ""Akamai Technologies, Inc."": 2,
    ""Google LLC"": 32,
    ""INFOSTRADA"": 2,
    ""ColocaTel Inc."": 6,
    ""OOO SibirInvest"": 4,
    ""Telkom Internet LTD"": 18,
    ""Aftab IT Limited"": 30,
    ""China Telecom"": 6,
    ""Limited Network LTD"": 4,
    ""Data Campus Limited"": 6,
    ""Datacenter location PAR1 France"": 4,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Locaweb Servi\u00e7os de Internet S/A"": 8,
    ""VolumeDrive"": 2
  },
  ""org"": {
    ""Spectrum"": 18492,
    ""VNPT"": 8160,
    ""DigitalOcean, LLC"": 1752,
    ""Linode"": 2,
    ""Google Cloud (us-east1)"": 8,
    ""Unknown"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Colocatel Inc"": 6,
    ""IP Kiktev Nikolay Vladimirovich"": 4,
    ""Korotkij Denis Aleksandrovich"": 18,
    ""Aftab IT Limited"": 30,
    ""Chinanet HB"": 6,
    ""Limited Network LTD"": 4,
    ""Data Campus Limited"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Locaweb Servi\u00e7os de Internet S/A"": 8,
    ""Digital Ocean"": 2,
    ""Quick Server Hosting LLC"": 2
  },
  ""regionName"": {
    ""Texas"": 18494,
    ""Hanoi"": 8160,
    ""South West"": 1744,
    ""California"": 32,
    ""South Carolina"": 8,
    ""Emilia-Romagna"": 2,
    ""Virginia"": 6,
    ""North Holland"": 22,
    ""Dhaka Division"": 30,
    ""Hubei"": 6,
    ""Federal District"": 4,
    ""Central and Western District"": 6,
    ""\u00cele-de-France"": 4,
    ""Kowloon City"": 4,
    ""S\u00e3o Paulo"": 8,
    ""New Jersey"": 2,
    ""Pennsylvania"": 2
  },
  ""country"": {
    ""United States"": 18544,
    ""Vietnam"": 8160,
    ""Singapore"": 1744,
    ""Italy"": 2,
    ""The Netherlands"": 22,
    ""Bangladesh"": 30,
    ""China"": 6,
    ""Brazil"": 12,
    ""Hong Kong"": 10,
    ""France"": 4
  },
  ""account"": {
    ""hello"": 28412,
    ""w11d1hlb"": 8,
    ""beio"": 2,
    ""yhDxyQONx"": 4,
    ""nmap"": 2,
    ""naap"": 2,
    ""a"": 2,
    ""VNqVxJteH"": 2,
    ""Pumpge"": 2,
    ""QWllyX"": 2,
    ""Domain"": 6,
    ""Administr"": 28,
    ""YtylTKlqH"": 2,
    ""UmZkNe"": 2,
    ""YFGXYc"": 2,
    ""(empty)"": 2,
    ""Administrator"": 10,
    ""Admin"": 10,
    ""User"": 10,
    ""sPjlVZCVq"": 2,
    ""IearQT"": 2,
    ""efQuBI"": 2,
    ""Test"": 12,
    ""AITPbfbpX"": 2,
    ""cLgSmB"": 2,
    ""bQqZsw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 28534
  },
  ""client_build"": {
    ""Unknown"": 28534
  },
  ""client_name"": {
    ""Unknown"": 28534
  },
  ""ip_type"": {
    ""Unknown"": 26728,
    ""hosting"": 1802,
    ""proxy"": 4
  }
}"
