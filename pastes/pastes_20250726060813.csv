id,title,username,language,date,content
PM3GgUEd,IS ES Kod,AleksaLjujic,Java,Saturday 26th of July 2025 12:27:35 AM CDT,"//Drools file

package com.sample;

import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

/**
 * This is a sample class to launch a rule.
 */
public class DroolsTest {

    public static final void main(String[] args) {
        try {
            // load up the knowledge base
	        KieServices ks = KieServices.Factory.get();
    	    KieContainer kContainer = ks.getKieClasspathContainer();
        	KieSession kSession = kContainer.newKieSession(""ksession-rules"");

            // Kreiranje novog objekta i unos cinjenica
        	KlimaUredjaj k = new KlimaUredjaj();
        	k.setKvadratura(62);
        	k.setBrojProstorija(""vise"");
        	k.setRadNaNiskimTemperaturama(true);
            k.setMogucaUgradnjaNaZid(false);
        	
        	//Unosenje objekta u ES
            kSession.insert(k);
            
            //Pokretanje ES
            kSession.fireAllRules();
            
            //Ispis resenja
            System.out.println(k);
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

}

_________________________________________________________________________________________________________________________

//Klasa koja se pravi u skladu sa zadatkom

package com.sample;

public class KlimaUredjaj {
	
	//Pravila 9 i 10 navode da je preporuceni tip ""zidna"" klima, osim u 
	//nekim slucajevima pa se to postavlja za pocetnu vrednost atributa tip
	private String tip = ""zidna"";
	private int snaga;
	private boolean imaInverter;
	
	private int kvadratura;
	private String brojProstorija;
	private boolean mogucaUgradnjaNaZid;
	private boolean podjednakoZaGrejanje;
	private boolean radNaNiskimTemperaturama;
	
	public String getTip() {
		return tip;
	}
	
	public void setTip(String tip) {
		this.tip = tip;
	}
	
	public int getSnaga() {
		return snaga;
	}
	
	public void setSnaga(int snaga) {
		this.snaga = snaga;
	}
	
	public boolean isImaInverter() {
		return imaInverter;
	}
	
	public void setImaInverter(boolean imaInverter) {
		this.imaInverter = imaInverter;
	}
	
	public int getKvadratura() {
		return kvadratura;
	}
	
	public void setKvadratura(int kvadratura) {
		this.kvadratura = kvadratura;
	}
	
	public String getBrojProstorija() {
		return brojProstorija;
	}
	
	public void setBrojProstorija(String brojProstorija) {
		this.brojProstorija = brojProstorija;
	}
	
	public boolean isMogucaUgradnjaNaZid() {
		return mogucaUgradnjaNaZid;
	}
	
	public void setMogucaUgradnjaNaZid(boolean mogucaUgradnjaNaZid) {
		this.mogucaUgradnjaNaZid = mogucaUgradnjaNaZid;
	}
	
	public boolean isPodjednakoZaGrejanje() {
		return podjednakoZaGrejanje;
	}
	
	public void setPodjednakoZaGrejanje(boolean podjednakoZaGrejanje) {
		this.podjednakoZaGrejanje = podjednakoZaGrejanje;
	}
	
	public boolean isRadNaNiskimTemperaturama() {
		return radNaNiskimTemperaturama;
	}
	
	public void setRadNaNiskimTemperaturama(boolean radNaNiskimTemperaturama) {
		this.radNaNiskimTemperaturama = radNaNiskimTemperaturama;
	}

	//Trazi se samo ispis resenja a ne i ulaznih cinjenica, tako da toString vraca
	//tip, snagu i da li ima inverter
	@Override
	public String toString() {
		return ""KlimaUredjaj [tip="" + tip + "", snaga="" + snaga + "", imaInverter="" + imaInverter + ""]"";
	}
	
	

}

__________________________________________________________________________________________________________\

//RULES

package com.sample
 
import com.sample.KlimaUredjaj;
 
rule ""Pravilo 4""
    when
        k : KlimaUredjaj( kvadratura <= 50 && brojProstorija == ""jedna"" && snaga == 0 )
    then
    	k.setSnaga(9000);
        update( k );
end

rule ""Pravilo 5""
    when
        k : KlimaUredjaj( kvadratura <= 50 && brojProstorija == ""vise"" && snaga == 0 )
    then
    	k.setSnaga(12000);
        update( k );
end

rule ""Pravilo 6""
    when
        k : KlimaUredjaj( kvadratura > 50 && kvadratura < 75 && brojProstorija == ""jedna"" && snaga == 0 )
    then
    	k.setSnaga(12000);
        update( k );
end

rule ""Pravilo 7""
    when
        k : KlimaUredjaj( kvadratura > 50 && kvadratura < 75 && brojProstorija == ""vise"" && snaga == 0 )
    then
    	k.setSnaga(18000);
        update( k );
end

rule ""Pravilo 8""
    when
        k : KlimaUredjaj( kvadratura >= 75 && snaga == 0 )
    then
    	k.setSnaga(18000);
        update( k );
end

rule ""Pravilo 9""
    when
        k : KlimaUredjaj( brojProstorija == ""vise"" && mogucaUgradnjaNaZid == false && tip == ""zidna"" )
    then
    	k.setTip(""pokretna"");
        update( k );
end

rule ""Pravilo 10""
    when
        k : KlimaUredjaj( brojProstorija == ""jedna"" && mogucaUgradnjaNaZid == false && tip == ""zidna"" )
    then
    	k.setTip(""prozorska"");
        update( k );
end

rule ""Pravilo 11""
    when
        k : KlimaUredjaj( podjednakoZaGrejanje == true && imaInverter == false )
    then
    	k.setImaInverter(true);
        update( k );
end

rule ""Pravilo 12""
    when
        k : KlimaUredjaj( radNaNiskimTemperaturama == true && imaInverter == false )
    then
    	k.setImaInverter(true);
        update( k );
end"
YfsnNPHM,IS NN Kod,AleksaLjujic,Java,Saturday 26th of July 2025 12:24:17 AM CDT," * GLAVNI NN KOD
 */
public class NNVezba implements LearningEventListener{
    int inputCount = 13;
    int outputCount = 3;
    double[] lr = {0.2, 0.4, 0.6};
    ArrayList<Training> trainings = new ArrayList<>();
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        (new NNVezba()).run();
    }

    @Override
    public void handleLearningEvent(LearningEvent event) {
        BackPropagation bp = (BackPropagation) event.getSource();
        System.out.println(""iteration: "" +bp.getCurrentIteration()+"" ""
                           + ""Total network error: "" +bp.getTotalNetworkError());
    }

    private void run() {
        String filePath = ""wines.csv"";
        DataSet dataSet = DataSet.createFromFile(filePath, inputCount, outputCount, "","");
        
        Normalizer norm = new MaxNormalizer(dataSet);
        norm.normalize(dataSet);
        dataSet.shuffle();
        
        DataSet[] trainTest = dataSet.split(0.7, 0.3);
        DataSet trainSet = trainTest[0];
        DataSet testSet = trainTest[1];
        
        int numOfIterations = 0;
        int numOfTrainings = 0;
        
        for (double l : lr) {
            MultiLayerPerceptron nn = new MultiLayerPerceptron(inputCount, 22, outputCount);
            
            BackPropagation learningRule = nn.getLearningRule();
            
            learningRule.addListener(this);
            
            learningRule.setMaxError(0.02);
            learningRule.setLearningRate(l);
            learningRule.setMaxIterations(1000);
            
            nn.learn(trainSet);
                    
            numOfTrainings++;
            numOfIterations += learningRule.getCurrentIteration();
            
            double accuracy = evaluateAccuracy(nn, testSet);
            Training t = new Training(nn, accuracy);
            trainings.add(t);
        }
        System.out.println(""Srednja vrednosti broja iteracija :"" +numOfTrainings/numOfIterations);
        SaveNetWithMaxAccuracy();
        
    }

    private double evaluateAccuracy(MultiLayerPerceptron nn, DataSet testSet) {
        ConfMatrix cmatrix = new ConfMatrix(outputCount);
        double accuracy = 0;
        
        for (DataSetRow dataSetRow : testSet) {
            nn.setInput(dataSetRow.getInput());
            nn.calculate();
            
            int actual = getMaxIndex(dataSetRow.getDesiredOutput());
            int predicted = getMaxIndex(nn.getOutput());
            
            cmatrix.incrementElement(actual, predicted);
                
        }
        
        for (int i = 0; i < outputCount; i++) {
            accuracy += (double) (cmatrix.getTruePositive(i) + cmatrix.getTrueNegative(i)) / cmatrix.total;
        }
        
        cmatrix.print();
        
        System.out.println(""accuracy : ""+(double) accuracy/outputCount);
        
        return (double) accuracy / outputCount;
    }

    private void SaveNetWithMaxAccuracy() {
        Training maxTr = trainings.get(0);
        for (Training t : trainings) {
            if(t.getAccuracy() > maxTr.getAccuracy()){
                 maxTr = t;
            }  
        }
        maxTr.getNn().save(""nn.nnet"");
    }

    private int getMaxIndex(double[] output) {
        int maxIndex = 0;
        
        for (int i = 0; i < output.length; i++) {
            if(output[maxIndex] < output[i]){
                maxIndex = i;
            }
        }
        
        return maxIndex;
   }
    
}

________________________________________________________________________________________________________________

/**
 *
 * Training klasa
 */
    
package nn.vezba;

import org.neuroph.core.NeuralNetwork;

public class Training {
    private NeuralNetwork nn;
    private double accuracy; 

    public Training(NeuralNetwork nn, double accuracy) {
        this.nn = nn;
        this.accuracy = accuracy;
    }

    public double getAccuracy() {
        return accuracy;
    }

    public void setAccuracy(double accuracy) {
        this.accuracy = accuracy;
    }

    public NeuralNetwork getNn() {
        return nn;
    }

    public void setNn(NeuralNetwork nn) {
        this.nn = nn;
    }
    
}

________________________________________________________________________________________________________________

/**
 *
 * ConfMatrix klasa  (vecinom se kopira iz ConfusionMatrix klase)
 */

public class ConfMatrix {
    int[][] matrix;    
    int classCount;
    int total = 0;

    public ConfMatrix(int classCount) {
        this.matrix = new int[classCount][classCount];
        this.classCount = classCount;
    }
    
    public void incrementElement(int actual, int predicted) {
        matrix[actual][predicted]++;
        total++;
    }
    
     public int getTruePositive(int cl) {
        return (int)matrix[cl][cl];
    }
    
    public int getTrueNegative(int cl) {
        int trueNegative = 0;
        
        for(int i = 0; i < classCount; i++) {
            if (i == cl) continue; 
            for(int j = 0; j < classCount; j++) {
                if (j == cl) continue; 
                trueNegative += matrix[i][j];
            }
        }
        
        return trueNegative;
    }    

    public int getFalsePositive(int cl) {
        int falsePositive = 0;
        
        for(int i=0; i<classCount; i++) {
            if (i == cl) continue; 
            falsePositive += matrix[i][cl];
        }
        
        return falsePositive;
    }

    public int getFalseNegative(int cl) {
        int falseNegative = 0;
        
        for(int i=0; i<classCount; i++) {
            if (i == cl) continue; 
            falseNegative += matrix[cl][i];
        }
        
        return falseNegative;
    }
    public void print(){
        for (int i = 0; i < matrix.length; i++) {  
            for (int j = 0; j < matrix.length; j++) {
                System.out.print(matrix[i][j] + "" "");
            }
            System.out.println();
        }
    }
}"
8ZJMEuRs,portable_dragonfly_furnace,mioOOOOO,Lua,Friday 25th of July 2025 11:13:36 PM CDT,"local function onworkfinished(inst)
    if inst.components.lootdropper then
     inst.components.lootdropper:DropLoot()
    end
    local fx = SpawnPrefab(""collapse_big"")
    fx.Transform:SetPosition(inst.Transform:GetWorldPosition())
    fx:SetMaterial(""metal"")
    inst:Remove()
end

local function onworked(inst)
    if inst._task2 ~= nil then
        inst._task2:Cancel()
        inst._task2 = nil

		if not inst:IsAsleep() then
			inst.SoundEmitter:PlaySound(""dontstarve/common/together/dragonfly_furnace/fire_LP"", ""loop"")
		end

        if inst._task1 ~= nil then
            inst._task1:Cancel()
            inst._task1 = nil
        end
    end
    --inst.AnimState:PlayAnimation(""hi_hit"")
    --inst.AnimState:PushAnimation(""hi"")

    if inst.components.container ~= nil then
        inst.components.container:DropEverything()
        inst.components.container:Close()
    end
end
local function _CanBeOpened(inst)
    inst.components.container.canbeopened = true
end

local function OnIncinerateItems(inst)
    --inst.AnimState:PlayAnimation(""incinerate"")
    --inst.AnimState:PushAnimation(""hi"", true)

    inst.SoundEmitter:PlaySound(""qol1/dragonfly_furnace/incinerate"")

    inst.components.container:Close()
    inst.components.container.canbeopened = false

    local time = inst.AnimState:GetCurrentAnimationLength() - inst.AnimState:GetCurrentAnimationTime() + FRAMES

    inst:DoTaskInTime(time, _CanBeOpened)
end

local function ShouldIncinerateItem(inst, item)
    local incinerate = true

    print(""[🔥检查摧毁] 当前物品:"", item.prefab or tostring(item))

    -- 打印所有标签
    --[[
    if item.tags then
        print(""[标签] "" .. item.prefab .. "":"")
        for tag, _ in pairs(item.tags) do
            print(""  - "" .. tag)
        end
    else
        print(""[标签] 无标签"")
    end
    ]]
    if item:HasTag(""epicloot"") then
        --print(""[✅] "" .. item.prefab .. "" 有 epicloot 标签，跳过焚烧"")
        incinerate = false
    elseif item:HasTag(""irreplaceable"") then
        --print(""[✅] "" .. item.prefab .. "" 是不可替代物品，跳过焚烧"")
        incinerate = false
    elseif item.components.container ~= nil and not item.components.container:IsEmpty() then
        --print(""[✅] "" .. item.prefab .. "" 是容器且不为空，跳过焚烧"")
        incinerate = false
    else
        --print(""[⚠️] "" .. item.prefab .. "" 会被焚烧！"")
    end

    return incinerate
end

-- 便携火炉
AddPrefabPostInit('portable_dragonfly_furnace',function (inst)

    inst.entity:AddSoundEmitter()

    --cooker (from cooker component) added to pristine state for optimization
    inst:AddTag(""cooker"")

    --HASHEATER (from heater component) added to pristine state for optimization
    inst:AddTag(""HASHEATER"")

    if not TheWorld.ismastersim then
        return inst
    end

    if inst.components.edible then
        inst:RemoveComponent(""edible"")
    end
    if inst.components.stackable then
        inst:RemoveComponent(""stackable"")
    end

    ----------------------------------
    if inst.components.workable == nil then
        inst:AddComponent(""workable"")
        inst.components.workable:SetWorkAction(ACTIONS.HAMMER)
        inst.components.workable:SetWorkLeft(6)
        inst.components.workable:SetOnFinishCallback(onworkfinished)
        inst.components.workable:SetOnWorkCallback(onworked)
    end
    if inst.components.lootdropper == nil then
        inst:AddComponent(""lootdropper"")
        inst.components.lootdropper:SetLoot({ ""redgem"", ""charcoal"", ""dragon_scales"" })
        inst.components.lootdropper:AddChanceLoot(""dragon_scales"", .01)
        inst.components.lootdropper:AddChanceLoot(""ash"", .5)
        inst.components.lootdropper:AddChanceLoot(""ash"", .1)
    end

    ----------------------------------
    if inst.components.cooker == nil then
        inst:AddComponent(""cooker"")
        --inst:AddTag(""cooker"")
    end

    if inst.components.heater == nil then
        inst:AddComponent(""heater"")
        --inst:AddTag(""HASHEATER"")
		inst.components.heater.carriedheat = 70
        inst.components.heater.heat = 90
        --inst.components.heater:SetThermics(true, false)
    end

    -----------------------
    inst:AddComponent(""container"")
    inst.components.container:WidgetSetup(""dragonflyfurnace"")

    -----------------------
    inst:AddComponent(""incinerator"")
    inst.components.incinerator:SetOnIncinerateFn(OnIncinerateItems)
    inst.components.incinerator:SetShouldIncinerateItemFn(ShouldIncinerateItem)

    -----------------------
    -- 创建灯光实体
    inst._light = SpawnPrefab(""furnacelight"")

    -- 监听位置变化，移动 light 位置（也可跟随角色）
    local function OnOwnerChange(inst)
        local owner = inst.components.inventoryitem and inst.components.inventoryitem.owner
        if owner ~= nil then
            inst._light.entity:SetParent(owner.entity)
            inst._light:ReturnToScene()
        else
            inst._light.entity:SetParent(inst.entity)
            --inst._light:RemoveFromScene()
        end
    end

    inst._onownerchange = function() OnOwnerChange(inst) end
    inst:ListenForEvent(""onputininventory"", inst._onownerchange)
    inst:ListenForEvent(""ondropped"", inst._onownerchange)

    -- 清理灯光实体函数
    local function KillLight(inst)
        if inst._light ~= nil then
            inst._light:Remove()
            inst._light = nil
        end
    end

    -- 监听物品被移除（被吃掉、摧毁等情况）
    inst:ListenForEvent(""onremove"", KillLight)
    -- 控制亮度（你可以自己控制发光条件）
    --inst._light.Light:SetIntensity(0.5) -- 或者动态调节
    inst._light.Light:Enable(true)
    
end)"
VrsczszU,Elements.h,Kienan,C,Friday 25th of July 2025 09:36:47 PM CDT,"#ifndef ELEMENTS_H
#define ELEMENTS_H

#define TRUE 1
#define FALSE 0

#define MAX_ELEMENTS_COUNT 128
#define MAX_OPERATOR_SYMBOLS_COUNT 8

typedef enum { // TODO: если нельзя использовать енамы, то тип ExpressionElementType нужно заменить на int, а конкретные варианты прописать через дефайны
    ELEMENT_TYPE_NUMBER,
    ELEMENT_TYPE_OPERATOR,
    ELEMENT_TYPE_FUNCTION,
    ELEMENT_TYPE_VARIABLE,
    ELEMENT_TYPE_LEFT_BRACE,
    ELEMENT_TYPE_RIGHT_BRACE
} ExpressionElementType;

typedef struct {
    ExpressionElementType type;
    char operator_symbol[MAX_OPERATOR_SYMBOLS_COUNT];
    double value;
} ExpressionElement;


typedef struct {
    ExpressionElement elements[MAX_ELEMENTS_COUNT];
    int count;
} ExpressionElementsArray;

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
int is_array_empty(const ExpressionElementsArray *stack) {
    return stack->count == 0;
}

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
void add_element_to_array(ExpressionElementsArray *stack, const ExpressionElement element) {
    if (stack->count < MAX_ELEMENTS_COUNT) {
        stack->elements[stack->count] = element;
        stack->count++;
    }
}

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
ExpressionElement pop_element_from_array(ExpressionElementsArray *stack) {
    if (!is_array_empty(stack)) {
        const ExpressionElement popElement = stack->elements[stack->count - 1];
        stack->count--;
        return popElement;
    }
    const ExpressionElement empty_element = {0};
    return empty_element;
}

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
ExpressionElement get_last_array_element(const ExpressionElementsArray *stack) {
    if (!is_array_empty(stack)) {
        return stack->elements[stack->count - 1];
    }
    const ExpressionElement empty_element = {0};
    return empty_element;
}

int get_operator_priority(const char operatorSymbol) {
    switch (operatorSymbol) {
        case '+':
        case '-': return 1;
        case '*':
        case '/': return 2;
        default: return 0;
    }
}

#endif
"
7SwRf788,expression_calculations.h,Kienan,C,Friday 25th of July 2025 09:36:13 PM CDT,"#ifndef EXPRESSION_CALCULATIONS_H
#define EXPRESSION_CALCULATIONS_H

#include <math.h>
#include ""Elements.h""

int try_calculate_number(double value_stack[MAX_ELEMENTS_COUNT], int *stack_top_index, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_NUMBER) {
        value_stack[++*stack_top_index] = current_element.value;
        return TRUE;
    }
    return FALSE;
}

int try_calculate_var(const double x_value, double value_stack[MAX_ELEMENTS_COUNT], int *stack_top_index,
                      const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_VARIABLE) {
        double value_to_add = x_value;
        if (current_element.operator_symbol[0] == '-')
            value_to_add *= -1;

        value_stack[++*stack_top_index] = value_to_add;
        return TRUE;
    }
    return FALSE;
}

int try_calculate_operator(double value_stack[MAX_ELEMENTS_COUNT], int *stack_top_index, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_OPERATOR) {
        double right_operand = value_stack[(*stack_top_index)--];
        double left_operand = value_stack[(*stack_top_index)--];

        switch (current_element.operator_symbol[0]) {
            case '+': value_stack[++*stack_top_index] = left_operand + right_operand;
                break;
            case '-': value_stack[++*stack_top_index] = left_operand - right_operand;
                break;
            case '*': value_stack[++*stack_top_index] = left_operand * right_operand;
                break;
            case '/': value_stack[++*stack_top_index] = left_operand / right_operand;
                break;
        }
        return TRUE;
    }
    return FALSE;
}

int try_calculate_function(double value_stack[MAX_ELEMENTS_COUNT], int *stack_top_index, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_FUNCTION) {
        const double argument = value_stack[(*stack_top_index)--];

        if (strcmp(current_element.operator_symbol, ""sin"") == 0) value_stack[++*stack_top_index] = sin(argument);
        else if (strcmp(current_element.operator_symbol, ""cos"") == 0)
            value_stack[++*stack_top_index] = cos(argument);
        else if (strcmp(current_element.operator_symbol, ""tan"") == 0)
            value_stack[++*stack_top_index] = tan(argument);
        else if (strcmp(current_element.operator_symbol, ""ctg"") == 0)
            value_stack[++*stack_top_index] = 1.0 / tan(argument);
        else if (strcmp(current_element.operator_symbol, ""sqrt"") == 0)
            value_stack[++*stack_top_index] = sqrt(argument);
        else if (strcmp(current_element.operator_symbol, ""ln"") == 0)
            value_stack[++*stack_top_index] = log(argument);
        return TRUE;
    }
    return FALSE;
}

double calculate_reverse_polish_notation(const ExpressionElementsArray *reverse_polish_notation_elements, const double x_value) {
    double value_stack[MAX_ELEMENTS_COUNT];
    int stack_top_index = -1;

    for (int element_index = 0; element_index < reverse_polish_notation_elements->count; element_index++) {
        const ExpressionElement current_element = reverse_polish_notation_elements->elements[element_index];

        if (try_calculate_number(value_stack, &stack_top_index, current_element))
            continue;

        if (try_calculate_var(x_value, value_stack, &stack_top_index, current_element))
            continue;

        if (try_calculate_operator(value_stack, &stack_top_index, current_element))
            continue;

        try_calculate_function(value_stack, &stack_top_index, current_element);
    }

    return value_stack[stack_top_index];
}

#endif
"
yxzSNkaB,expression_converting.h,Kienan,C,Friday 25th of July 2025 09:35:58 PM CDT,"#ifndef EXPRESSION_CALCULATION_H
#define EXPRESSION_CALCULATION_H

#include ""Elements.h""

int try_convert_numbers_and_vars(ExpressionElementsArray *output_elements, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_NUMBER || current_element.type == ELEMENT_TYPE_VARIABLE) {
        output_elements->elements[output_elements->count++] = current_element;
        return TRUE;
    }
    return FALSE;
}

int try_convert_functions(ExpressionElementsArray *operator_stack, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_FUNCTION) {
        add_element_to_array(operator_stack, current_element);
        return TRUE;
    }
    return FALSE;
}

int try_convert_operators(ExpressionElementsArray *output_elements, ExpressionElementsArray *operator_stack, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_OPERATOR) {
        // TODO: Это проблемный цикл, т.к в его условии происходит обращение не к своей ячейке памяти. Судя по всему на момент обращения operator_symbol не имеет ячеек, надо это пофиксить
        while (!is_array_empty(operator_stack) &&
               get_last_array_element(operator_stack).type == ELEMENT_TYPE_OPERATOR &&
               get_operator_priority(get_last_array_element(operator_stack).operator_symbol[0]) >=
               get_operator_priority(current_element.operator_symbol[0])) {
            output_elements->elements[output_elements->count++] = pop_element_from_array(operator_stack);
        }
        add_element_to_array(operator_stack, current_element);
        return TRUE;
    }
    return FALSE;
}

int try_convert_left_brace(ExpressionElementsArray *operator_stack, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_LEFT_BRACE) {
        add_element_to_array(operator_stack, current_element);
        return TRUE;
    }
    return FALSE;
}

int try_convert_right_brace(ExpressionElementsArray *output_elements, ExpressionElementsArray *operator_stack, const ExpressionElement current_element) {
    if (current_element.type == ELEMENT_TYPE_RIGHT_BRACE) {
        while (!is_array_empty(operator_stack) &&
               get_last_array_element(operator_stack).type != ELEMENT_TYPE_LEFT_BRACE) {
            output_elements->elements[output_elements->count++] = pop_element_from_array(operator_stack);
        }
        pop_element_from_array(operator_stack);
        if (!is_array_empty(operator_stack) &&
            get_last_array_element(operator_stack).type == ELEMENT_TYPE_FUNCTION) {
            output_elements->elements[output_elements->count++] = pop_element_from_array(operator_stack);
        }
        return TRUE;
    }
    return FALSE;
}

void convert_to_reverse_polish_notation(const ExpressionElementsArray *input_elements, ExpressionElementsArray *output_elements) {
    ExpressionElementsArray operator_stack;
    output_elements->count = 0;

    for (int element_index = 0; element_index < input_elements->count; element_index++) {
        const ExpressionElement current_element = input_elements->elements[element_index];

        if (try_convert_numbers_and_vars(output_elements, current_element))
            continue;

        if (try_convert_functions(&operator_stack, current_element))
            continue;

        if (try_convert_operators(output_elements, &operator_stack, current_element))
            continue;

        if (try_convert_left_brace(&operator_stack, current_element))
            continue;

        try_convert_right_brace(output_elements, &operator_stack, current_element);
    }

    while (!is_array_empty(&operator_stack)) {
        output_elements->elements[output_elements->count++] = pop_element_from_array(&operator_stack);
    }
}

#endif
"
WBsJUDEK,expression_parse.h,Kienan,C,Friday 25th of July 2025 09:35:39 PM CDT,"#ifndef EXPRESSION_OPERATIONS_H
#define EXPRESSION_OPERATIONS_H

#include <math.h>
#include ""Elements.h""

#define MAX_FUNCTION_NAME_LENGTH 7
#define MAX_NUMBER_STRING_LENGTH 31

const char OPERATOR_SYMBOLS[] = ""+-*/"";
const char *FUNCTION_NAMES[] = {""sin"", ""cos"", ""tan"", ""ctg"", ""sqrt"", ""ln"", NULL};

int is_function_name(const char *name) {
    for (int i = 0; FUNCTION_NAMES[i] != NULL; i++) {
        if (strcmp(name, FUNCTION_NAMES[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

int is_digit_character(const char character) {
    return character >= '0' && character <= '9';
}

int is_alphabetic_character(const char character) {
    return (character >= 'a' && character <= 'z') || (character >= 'A' && character <= 'Z');
}

void apply_unary_minus_if_exist(ExpressionElementsArray *element_array) {
    if (element_array->count <= 2)
        return;

    // Если прошлый знак минус
    const ExpressionElement previous_element_type = element_array->elements[element_array->count - 2];
    const int is_previous_element_minus = previous_element_type.type == ELEMENT_TYPE_OPERATOR ||
                                          previous_element_type.operator_symbol[0] == '-';

    if (!is_previous_element_minus)
        return;

    if (element_array->count >= 3) {
        const ExpressionElement pre_previous_element_type = element_array->elements[element_array->count - 3];

        // Если с позапрошлым элементом минус может стать бинарным
        const int is_minus_binary = pre_previous_element_type.type == ELEMENT_TYPE_RIGHT_BRACE ||
                                    pre_previous_element_type.type == ELEMENT_TYPE_VARIABLE ||
                                    pre_previous_element_type.type == ELEMENT_TYPE_NUMBER;
        if (is_minus_binary)
            return;
    }

    const ExpressionElement current_element_type = element_array->elements[element_array->count - 1];
    if (current_element_type.type == ELEMENT_TYPE_NUMBER) {
        element_array->elements[element_array->count - 2].type = ELEMENT_TYPE_NUMBER;
        element_array->elements[element_array->count - 2].value = -1 * current_element_type.value;
        element_array->count--;
    } else if (current_element_type.type == ELEMENT_TYPE_VARIABLE) {
        element_array->elements[element_array->count - 2].type = ELEMENT_TYPE_VARIABLE;
        element_array->elements[element_array->count - 2].operator_symbol[0] = '-';
        element_array->count--;
    }
}

int try_parse_void(const char **current_character) {
    if (**current_character == ' ') {
        (*current_character)++;
        return TRUE;
    }
    return FALSE;
}

int try_parce_left_braces(ExpressionElementsArray *element_array, const char **current_character) {
    if (**current_character == '(') {
        element_array->elements[element_array->count].type = ELEMENT_TYPE_LEFT_BRACE;
        element_array->count++;
        (*current_character)++;
        return TRUE;
    }
    return FALSE;
}

int try_parce_right_braces(ExpressionElementsArray *element_array, const char **current_character) {
    if (**current_character == ')') {
        element_array->elements[element_array->count].type = ELEMENT_TYPE_RIGHT_BRACE;
        element_array->count++;
        (*current_character)++;
        return TRUE;
    }
    return FALSE;
}

int try_parce_operator(ExpressionElementsArray *element_array, const char **current_character) {
    if (strchr(OPERATOR_SYMBOLS, **current_character)) {
        element_array->elements[element_array->count].type = ELEMENT_TYPE_OPERATOR;
        element_array->elements[element_array->count].operator_symbol[0] = **current_character;
        element_array->elements[element_array->count].operator_symbol[1] = '\0';
        element_array->count++;
        (*current_character)++;
        return TRUE;
    }
    return FALSE;
}

int try_parce_alphobet_cahracters(ExpressionElementsArray *element_array, const char **current_character) {
    if (is_alphabetic_character(**current_character)) {
        char function_name_buffer[MAX_FUNCTION_NAME_LENGTH + 1] = {0};
        int character_index = 0;
        while (is_alphabetic_character(**current_character) && character_index < MAX_FUNCTION_NAME_LENGTH) {
            function_name_buffer[character_index++] = *(*current_character)++;
        }

        if (is_function_name(function_name_buffer)) {
            element_array->elements[element_array->count].type = ELEMENT_TYPE_FUNCTION;
            strcpy(element_array->elements[element_array->count].operator_symbol, function_name_buffer);
            element_array->count++;
        } else if (strcmp(function_name_buffer, ""x"") == 0) {
            element_array->elements[element_array->count].type = ELEMENT_TYPE_VARIABLE;
            element_array->count++;
            apply_unary_minus_if_exist(element_array);
        }
        return TRUE;
    }
    return FALSE;
}

int try_parce_digit(ExpressionElementsArray *element_array, const char **current_character) {
    if (is_digit_character(**current_character) || **current_character == '.') {
        char number_string[MAX_NUMBER_STRING_LENGTH + 1];
        int character_index = 0;
        while ((is_digit_character(**current_character) || **current_character == '.') && character_index <
               MAX_NUMBER_STRING_LENGTH) {
            number_string[character_index++] = *(*current_character)++;
        }
        number_string[character_index] = '\0';

        element_array->elements[element_array->count].type = ELEMENT_TYPE_NUMBER;
        element_array->elements[element_array->count].value = atof(number_string);
        element_array->count++;

        apply_unary_minus_if_exist(element_array);

        return TRUE;
    }

    return FALSE;
}

void parse_expression_string(const char *expression_string, ExpressionElementsArray *element_array) {
    element_array->count = 0;
    const char *current_character = expression_string;

    while (*current_character != '\0') {
        if (try_parse_void(&current_character))
            continue;

        if (try_parce_left_braces(element_array, &current_character))
            continue;

        if (try_parce_right_braces(element_array, &current_character))
            continue;

        if (try_parce_operator(element_array, &current_character))
            continue;

        if (try_parce_alphobet_cahracters(element_array, &current_character))
            continue;

        if (try_parce_digit(element_array, &current_character))
            continue;

        current_character++;
    }
}

#endif
"
kn4RH8dK,main,Kienan,C,Friday 25th of July 2025 09:35:17 PM CDT,"#include <string.h>
#include <stdio.h>

#include ""expression_parse.h""
#include ""expression_calculations.h""
#include ""expression_converting.h""

#define GRAPH_WIDTH 80
#define GRAPH_HEIGHT 40

// TODO: Лучше тоже вынести в отдельный файл
void plot_function_graph(const ExpressionElementsArray *reverse_polish_notation_elements, const double min_x, const double max_x,
                         const double min_y, const double max_y) {
    char graph_grid[GRAPH_HEIGHT][GRAPH_WIDTH + 1];

    for (int row = 0; row < GRAPH_HEIGHT; row++) {
        memset(graph_grid[row], '.', GRAPH_WIDTH);
        graph_grid[row][GRAPH_WIDTH] = '\0';
    }

    // TODO: Не очень нравится логика расчета шагов, мб ее стоит улучшить или переписать
    const double step_x = (max_x - min_x) / GRAPH_WIDTH;
    const double step_y = (max_y - min_y) / GRAPH_HEIGHT;

    for (int column = 0; column < GRAPH_WIDTH; column++) {
        const double current_x = min_x + column * step_x;
        const double current_y = calculate_reverse_polish_notation(reverse_polish_notation_elements, current_x);

        if (current_y >= min_y && current_y <= max_y) {
            const int graph_row = GRAPH_HEIGHT - 1 - (int) ((current_y - min_y) / step_y);
            if (graph_row >= 0 && graph_row < GRAPH_HEIGHT) {
                graph_grid[graph_row][column] = '*';
            }
        }
    }

    for (int row = 0; row < GRAPH_HEIGHT; row++) {
        printf(""%s\n"", graph_grid[row]);
    }
}

// TODO: нужно для отладки, удалить в конце
void print_expression_elements_array(const ExpressionElementsArray* array) {
    printf(""Expression elements array (%d elements):\n"", array->count);
    for (int i = 0; i < array->count; i++) {
        const ExpressionElement* element = &array->elements[i];

        switch (element->type) {
            case ELEMENT_TYPE_NUMBER:
                printf(""%d"", (int)element->value);
                break;

            case ELEMENT_TYPE_OPERATOR:
                printf(""%s"", element->operator_symbol);
                break;

            case ELEMENT_TYPE_FUNCTION:
                printf(""%s"", element->operator_symbol);
                break;

            case ELEMENT_TYPE_VARIABLE:
                if (element->operator_symbol[0] == '-')
                    printf(""-"");

                printf(""x"");
                break;

            case ELEMENT_TYPE_LEFT_BRACE:
                printf(""("");
                break;

            case ELEMENT_TYPE_RIGHT_BRACE:
                printf("")"");
                break;

            default:
                printf(""?"");
                break;
        }
        printf("" "");
    }
    printf(""\n\n"");
}

int main() {
    const char *math_expression = ""1 + -x*x + (sin(-x) + 51) * (-44 + 4 * 11)"";
    ExpressionElementsArray input_elements, reverse_polish_notation_elements;

    parse_expression_string(math_expression, &input_elements);
    print_expression_elements_array(&input_elements);

    convert_to_reverse_polish_notation(&input_elements, &reverse_polish_notation_elements);
    print_expression_elements_array(&reverse_polish_notation_elements);

    printf(""Graph for expression: %s\n"", math_expression);
    plot_function_graph(&reverse_polish_notation_elements, -10.0, 10.0, -2.0, 2.0);

    return 0;
}
"
9hUc9YfD,c00lgui remake (c00lkidd) Require script,arseni231422,Lua,Friday 25th of July 2025 09:20:56 PM CDT,"--c00l.
require(125136140453912)(""YOUR USERNAME"")"
ht0Z5zZk,Untitled,Archov,JavaScript,Friday 25th of July 2025 09:09:15 PM CDT,"// ==UserScript==
// @name         Kemono.su Gallery Viewer (Mobile)
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  Mobile-optimized gallery viewer for Kemono.su post pages
// @author       You
// @match        https://kemono.su/*/post/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // ========== USER SETTINGS ==========
    // Edit these values to customize the gallery defaults
    const DEFAULT_COLUMNS = 3;          // Initial number of columns (1-6) - fewer for mobile
    const DEFAULT_ZOOM = 110;            // Initial hover zoom percentage (100-150) - less zoom for mobile
    const ZOOM_HOVER_TIME = 500;         // Hover time before zoom triggers (in milliseconds) - faster for touch
    const IMAGE_GAP = 0;                 // Gap between images in pixels (0-10)
    // ===================================

    // Create the gallery button
    function createGalleryButton() {
        const button = document.createElement('button');
        button.textContent = '🖼️ Gallery';
        Object.assign(button.style, {
            position: 'fixed',
            bottom: '20px',
            right: '20px',
            zIndex: '9998',
            padding: '15px 20px',
            fontSize: '18px',
            background: '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '50px',
            cursor: 'pointer',
            fontFamily: 'Arial, sans-serif',
            boxShadow: '0 4px 15px rgba(0,0,0,0.3)',
            minWidth: '60px',
            minHeight: '60px',
            touchAction: 'manipulation'
        });

        button.addEventListener('touchstart', () => {
            button.style.background = '#45a049';
        });

        button.addEventListener('touchend', () => {
            button.style.background = '#4CAF50';
        });

        button.onclick = openGallery;
        document.body.appendChild(button);
    }

    // Force load all lazy-loaded images
    function forceLoadAll() {
        const images = document.querySelectorAll('img[data-src]');
        images.forEach(img => {
            if (img.dataset.src && !img.src.includes(img.dataset.src)) {
                img.src = img.dataset.src;
            }
        });

        const observer = new IntersectionObserver(entries => {});
        document.querySelectorAll('img[loading=""lazy""]').forEach(img => observer.observe(img));
        
        window.scrollTo(0, document.body.scrollHeight);
        setTimeout(() => window.scrollTo(0, 0), 500);
    }

    // Main gallery function
    function openGallery() {
        forceLoadAll();
        
        setTimeout(() => {
            let imageData = [...document.images]
                .filter(img => {
                    const w = img.naturalWidth;
                    const h = img.naturalHeight;
                    const src = img.src.toLowerCase();
                    return w >= 200 && h >= 200 && !src.endsWith('.svg') && !src.includes('.svg');
                })
                .map(img => {
                    let fullSrc = img.src;
                    let originalElement = img;
                    if (img.src.includes('//img.kemono.su/thumbnail/')) {
                        const parentLink = img.closest('a.fileThumb');
                        if (parentLink && parentLink.href) {
                            fullSrc = parentLink.href;
                        }
                    }
                    return { src: fullSrc, original: originalElement };
                });

            if (!imageData.length) return alert('No qualifying images found.');

            // Create gallery container
            let gallery = document.createElement('div');
            Object.assign(gallery.style, {
                display: 'grid',
                gridTemplateColumns: `repeat(${DEFAULT_COLUMNS}, 1fr)`,
                gap: IMAGE_GAP + 'px',
                padding: '70px 8px 8px',
                background: '#1a1a1a',
                zIndex: '9999',
                position: 'fixed',
                top: '0',
                left: '0',
                right: '0',
                bottom: '0',
                overflowY: 'scroll',
                WebkitOverflowScrolling: 'touch'
            });

            // Create control bar
            let controlBar = document.createElement('div');
            Object.assign(controlBar.style, {
                position: 'fixed',
                top: '0',
                left: '0',
                right: '0',
                height: '60px',
                background: '#2d2d2d',
                zIndex: '10001',
                display: 'flex',
                alignItems: 'center',
                padding: '8px 12px',
                borderBottom: '1px solid #444',
                flexWrap: 'wrap',
                gap: '8px'
            });

            // Column controls
            let columnLabel = document.createElement('span');
            columnLabel.textContent = 'Cols:';
            Object.assign(columnLabel.style, {
                color: '#e0e0e0',
                fontSize: '14px',
                minWidth: 'auto'
            });

            let columnSlider = document.createElement('input');
            Object.assign(columnSlider, {
                type: 'range',
                min: '1',
                max: '6',
                value: DEFAULT_COLUMNS.toString()
            });
            Object.assign(columnSlider.style, {
                width: '60px',
                touchAction: 'manipulation'
            });

            let columnValue = document.createElement('span');
            columnValue.textContent = DEFAULT_COLUMNS.toString();
            Object.assign(columnValue.style, {
                color: '#e0e0e0',
                fontSize: '14px',
                minWidth: '8px'
            });

            // Download button
            let downloadBtn = document.createElement('button');
            downloadBtn.innerText = '📦';
            Object.assign(downloadBtn.style, {
                fontSize: '18px',
                background: '#4CAF50',
                color: 'white',
                border: 'none',
                padding: '8px 12px',
                borderRadius: '6px',
                cursor: 'pointer',
                touchAction: 'manipulation',
                minWidth: '44px',
                minHeight: '44px'
            });

            downloadBtn.onclick = async () => {
                downloadBtn.disabled = true;
                downloadBtn.innerText = '⏳';
                try {
                    // Import JSZip
                    const script = document.createElement('script');
                    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
                    document.head.appendChild(script);
                    
                    await new Promise(resolve => script.onload = resolve);
                    
                    const zip = new JSZip();
                    const promises = imageData.map(async (data, index) => {
                        try {
                            const response = await fetch(data.src);
                            if (!response.ok) throw new Error(`HTTP ${response.status}`);
                            const blob = await response.blob();
                            const ext = data.src.split('.').pop().split('?')[0] || 'jpg';
                            zip.file(`image_${String(index + 1).padStart(3, '0')}.${ext}`, blob);
                        } catch (err) {
                            console.warn(`Failed to download image ${index + 1}:`, err);
                        }
                    });
                    
                    await Promise.all(promises);
                    const zipBlob = await zip.generateAsync({ type: 'blob' });
                    const url = URL.createObjectURL(zipBlob);
                    const a = document.createElement('a');
                    a.href = url;
                    const tabName = document.title.replace(/[<>:""/\\|?*]/g, '_').substring(0, 100) || 'gallery_images';
                    a.download = tabName + '.zip';
                    a.click();
                    URL.revokeObjectURL(url);
                } catch (err) {
                    alert('Download failed: ' + err.message);
                } finally {
                    downloadBtn.disabled = false;
                    downloadBtn.innerText = '📦';
                }
            };

            // Close button
            let close = document.createElement('button');
            close.innerText = '✕';
            Object.assign(close.style, {
                marginLeft: 'auto',
                fontSize: '18px',
                background: '#ff4444',
                color: 'white',
                border: 'none',
                padding: '8px 12px',
                borderRadius: '6px',
                cursor: 'pointer',
                touchAction: 'manipulation',
                minWidth: '44px',
                minHeight: '44px'
            });

            close.onclick = () => {
                document.body.removeChild(gallery);
                document.body.removeChild(controlBar);
                // Remove popstate listener
                window.removeEventListener('popstate', galleryPopstateHandler);
            };

            // Handle browser back button for gallery
            function galleryPopstateHandler(e) {
                if (document.body.contains(gallery)) {
                    // Prevent actual navigation by immediately pushing state back
                    history.pushState({gallery: true}, '', location.href);
                    close.onclick();
                }
            }

            // Event handlers
            columnSlider.oninput = () => {
                gallery.style.gridTemplateColumns = `repeat(${columnSlider.value}, 1fr)`;
                columnValue.textContent = columnSlider.value;
            };

            // Add controls to control bar
            controlBar.appendChild(columnLabel);
            controlBar.appendChild(columnSlider);
            controlBar.appendChild(columnValue);
            controlBar.appendChild(downloadBtn);
            controlBar.appendChild(close);

            // Create image elements
            imageData.forEach((data, index) => {
                let img = document.createElement('img');
                img.src = data.src;
                Object.assign(img.style, {
                    width: '100%',
                    height: 'auto',
                    cursor: 'pointer',
                    borderRadius: '2px',
                    border: '1px solid #333',
                    touchAction: 'manipulation'
                });
                img.loading = 'lazy';

                // Touch-optimized interaction - less sensitive
                let touchStartTime = 0;
                let touchStartY = 0;
                let hasMoved = false;
                
                img.addEventListener('touchstart', (e) => {
                    touchStartTime = Date.now();
                    touchStartY = e.touches[0].clientY;
                    hasMoved = false;
                    // Visual feedback
                    img.style.opacity = '0.7';
                });

                img.addEventListener('touchmove', (e) => {
                    const deltaY = Math.abs(e.touches[0].clientY - touchStartY);
                    if (deltaY > 10) { // If moved more than 10px, it's a scroll
                        hasMoved = true;
                        img.style.opacity = '1';
                    }
                });

                img.addEventListener('touchend', (e) => {
                    img.style.opacity = '1';
                    const touchDuration = Date.now() - touchStartTime;
                    // Only open fullscreen if it's a quick tap AND user didn't scroll
                    if (touchDuration < 200 && !hasMoved) {
                        e.preventDefault();
                        openFullscreen(index);
                    }
                });

                img.addEventListener('touchcancel', () => {
                    img.style.opacity = '1';
                    hasMoved = true;
                });

                // Fallback click for non-touch devices
                img.onclick = () => openFullscreen(index);

                gallery.appendChild(img);
            });

            // Fullscreen viewer
            function openFullscreen(startIndex) {
                let currentIndex = startIndex;
                
                // Create fullscreen overlay
                let fullscreenOverlay = document.createElement('div');
                Object.assign(fullscreenOverlay.style, {
                    position: 'fixed',
                    top: '0',
                    left: '0',
                    right: '0',
                    bottom: '0',
                    background: '#000',
                    zIndex: '10020',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    opacity: '0',
                    transition: 'opacity 0.3s ease',
                    touchAction: 'manipulation'
                });

                // Fade out gallery
                gallery.style.opacity = '0.3';
                controlBar.style.opacity = '0.3';

                // Create image container
                let imageContainer = document.createElement('div');
                Object.assign(imageContainer.style, {
                    width: '100vw',
                    height: '100vh',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    position: 'relative'
                });

                // Create main image
                let fullscreenImg = document.createElement('img');
                Object.assign(fullscreenImg.style, {
                    width: '100vw',
                    height: '100vh',
                    objectFit: 'contain',
                    background: '#000',
                    touchAction: 'manipulation'
                });

                // Create invisible tap zones for navigation (avoiding close button area)
                let leftTapZone = document.createElement('div');
                Object.assign(leftTapZone.style, {
                    position: 'absolute',
                    left: '0',
                    top: '0',
                    width: '30%',
                    height: '100%',
                    zIndex: '10021',
                    cursor: 'pointer'
                });

                let rightTapZone = document.createElement('div');
                Object.assign(rightTapZone.style, {
                    position: 'absolute',
                    right: '0',
                    top: '80px', // Start below the close button
                    width: '30%',
                    height: 'calc(100% - 80px)', // Don't cover top area with close button
                    zIndex: '10021',
                    cursor: 'pointer'
                });

                // Create mobile-optimized navigation (smaller, less intrusive)
                let navContainer = document.createElement('div');
                Object.assign(navContainer.style, {
                    position: 'absolute',
                    bottom: '20px',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    display: 'flex',
                    alignItems: 'center',
                    background: 'rgba(0,0,0,0.7)',
                    padding: '8px 16px',
                    borderRadius: '20px'
                });

                // Image counter (no navigation buttons)
                let counter = document.createElement('div');
                Object.assign(counter.style, {
                    color: 'white',
                    fontSize: '16px',
                    fontWeight: 'bold',
                    textAlign: 'center'
                });

                // Update image function
                function updateImage() {
                    fullscreenImg.src = imageData[currentIndex].src;
                    counter.textContent = `${currentIndex + 1} / ${imageData.length}`;
                }

                // Navigation functions
                function showPrevious() {
                    if (currentIndex > 0) {
                        currentIndex--;
                        updateImage();
                    }
                }

                function showNext() {
                    if (currentIndex < imageData.length - 1) {
                        currentIndex++;
                        updateImage();
                    }
                }

                function closeFullscreen() {
                    fullscreenOverlay.style.opacity = '0';
                    gallery.style.opacity = '1';
                    controlBar.style.opacity = '1';
                    
                    // Remove fullscreen popstate listener and restore gallery listener
                    window.removeEventListener('popstate', fullscreenPopstateHandler);
                    window.addEventListener('popstate', galleryPopstateHandler);
                    
                    setTimeout(() => {
                        if (document.body.contains(fullscreenOverlay)) {
                            document.body.removeChild(fullscreenOverlay);
                        }
                    }, 300);
                }

                // Handle back button for fullscreen
                function fullscreenPopstateHandler(e) {
                    if (document.body.contains(fullscreenOverlay)) {
                        // Prevent actual navigation by immediately pushing state back
                        history.pushState({fullscreen: true}, '', location.href);
                        closeFullscreen();
                    }
                }

                // Touch events for swipe navigation
                let touchStartX = 0;
                let touchStartY = 0;
                let swipeThreshold = 50;

                fullscreenImg.addEventListener('touchstart', (e) => {
                    touchStartX = e.touches[0].clientX;
                    touchStartY = e.touches[0].clientY;
                });

                fullscreenImg.addEventListener('touchend', (e) => {
                    const touchEndX = e.changedTouches[0].clientX;
                    const touchEndY = e.changedTouches[0].clientY;
                    const deltaX = touchEndX - touchStartX;
                    const deltaY = touchEndY - touchStartY;

                    // Only register swipe if horizontal movement is greater than vertical
                    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > swipeThreshold) {
                        if (deltaX > 0) {
                            showPrevious(); // Swipe right = previous
                        } else {
                            showNext(); // Swipe left = next
                        }
                    }
                });

                // Tap zone event handlers
                leftTapZone.onclick = showPrevious;
                rightTapZone.onclick = showNext;

                // Close button
                let fullscreenClose = document.createElement('button');
                fullscreenClose.innerHTML = '✕';
                Object.assign(fullscreenClose.style, {
                    position: 'absolute',
                    top: '20px',
                    right: '20px',
                    width: '44px',
                    height: '44px',
                    borderRadius: '50%',
                    background: 'rgba(255,255,255,0.2)',
                    color: 'white',
                    border: 'none',
                    fontSize: '18px',
                    cursor: 'pointer',
                    touchAction: 'manipulation',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    zIndex: '10022' // Higher than tap zones
                });

                // Event handlers
                fullscreenClose.onclick = closeFullscreen;

                // Replace gallery listener with fullscreen listener
                window.removeEventListener('popstate', galleryPopstateHandler);
                history.pushState({fullscreen: true}, '', location.href);
                window.addEventListener('popstate', fullscreenPopstateHandler);

                // Assemble navigation (just counter now)
                navContainer.appendChild(counter);

                // Assemble fullscreen viewer
                imageContainer.appendChild(fullscreenImg);
                imageContainer.appendChild(leftTapZone);
                imageContainer.appendChild(rightTapZone);
                fullscreenOverlay.appendChild(imageContainer);
                fullscreenOverlay.appendChild(fullscreenClose);
                fullscreenOverlay.appendChild(navContainer);

                document.body.appendChild(fullscreenOverlay);

                // Initialize and show
                updateImage();
                setTimeout(() => {
                    fullscreenOverlay.style.opacity = '1';
                }, 10);
            }

            // Add history entry and listener
            history.pushState({gallery: true}, '', location.href);
            window.addEventListener('popstate', galleryPopstateHandler);

            document.body.appendChild(controlBar);
            document.body.appendChild(gallery);
        }, 1000);
    }

    // Initialize when page loads
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', createGalleryButton);
    } else {
        createGalleryButton();
    }
})();"
TzTht5qe,Mr. Ware Require Script,arseni231422,Lua,Friday 25th of July 2025 09:06:13 PM CDT,"require(74444736936643)(""arseni231423"", ""Mr Ware"")"
j3gAdeyG,Untitled,zamoth,Lua,Friday 25th of July 2025 07:23:40 PM CDT,"-- wrap your peripherals
local ctrl   = peripheral.wrap(""left"")
local stress = peripheral.wrap(""top"")

-- parameters
local maxSpeed  = 256     -- absolute RPM limit
local minSpeed  = 1       -- keep it turning
local loopDelay = 0.5     -- seconds between adjustments

-- initialize targetSpeed
local targetSpeed = math.max(minSpeed, math.min(maxSpeed, ctrl.getTargetSpeed() or minSpeed))
ctrl.setTargetSpeed(targetSpeed)

-- control loop
while true do
  -- read current values
  local currentStress = stress.getStress()
  local cap           = stress.getStressCapacity()
  -- get what the controller currently has set
  local currentSpeed  = ctrl.getTargetSpeed() or targetSpeed

  -- compute stress per RPM directly
  local stressPerRPM = currentStress / currentSpeed

  -- compute the RPM that would put us right at capacity
  local idealSpeed = math.floor(cap / stressPerRPM)

  -- clamp to min/max
  idealSpeed = math.max(minSpeed, math.min(maxSpeed, idealSpeed))

  -- only update if it actually changes
  if idealSpeed ~= currentSpeed then
    targetSpeed = idealSpeed
    ctrl.setTargetSpeed(targetSpeed)
        
        -- print status
    print(string.format(
      ""Stress: %d/%d (%.1f%%) | %.4f stress/RPM | Speed: %d RPM"",
      currentStress, cap, (currentStress/cap)*100, stressPerRPM, targetSpeed
    ))
  end

  os.sleep(loopDelay)
end
"
BJZGW6TF,Untitled,wagnux,Bash,Friday 25th of July 2025 07:04:20 PM CDT,"## Alias 'atualizar' em 25/07/2025

alias atualizar='echo Atualizando lista de repositório, sistema, snaps, flatpaks e demais pacotes... ; sudo systemctl daemon-reload ; topgrade && echo Efetuando limpeza... ; sleep 3 ; sudo nala autoremove -y ; sudo nala autopurge -y ; sudo apt autoclean ; cd ~ ; echo Limpando snaps antigos... ; sleep 3 ; sudo ./snapclean.sh ; sleep 3 ; echo Verificando a existência de pacotes residuais... ; sudo aptitude full-upgrade ; echo Otimizando... ; sudo fstrim -v / ; sleep 3 ; sudo prelink -amRv ; echo Todo o sistema e pacotes atualizados.'"
Mj4sV1Aj,MainScript Styled SungExetior13RBLX (UPDATE),Sungmingamerpro13,CSS,Friday 25th of July 2025 06:50:12 PM CDT,"--- Sungmingamerpro13

-- Services
TweenService = game:GetService('TweenService')

MessageValue = game.ReplicatedStorage.Message
ImageValue = game.ReplicatedStorage.Message.SpeakerImage
SpeakerValue = game.ReplicatedStorage.Message.SpeakerName

-- randomPlayer or NPC

local randomPlayer

-- Functions

function BroadCastMessage(Text)
	MessageValue.Value = Text
end

function SetMessageSpeaker(Name, Model)
	if Name == ""Random"" then
		randomPlayer = game.Players:GetChildren()[math.random(1,#game.Players:GetChildren())]
		Name = randomPlayer.Name
	end
	ImageValue.Value = Name or Model
	SpeakerValue.Value = Name
end

function ChangeTime(ToTime, TweenDuration)
	local Lightning = game.Lighting
	local TI = TweenInfo.new(TweenDuration,Enum.EasingStyle.Linear)
	local Tween = TweenService:Create(Lightning, TI, {ClockTime = ToTime})
	Tween:Play()
end

function ChangeFogend(ChangeTo, TweenDuration,ColourOrNone)
	if ColourOrNone ~= 'None' then
		game.Lighting.FogColor = ColourOrNone
	end
	local FogendValue = Instance.new('IntValue')
	FogendValue.Value = game.Lighting.FogEnd
	FogendValue:GetPropertyChangedSignal('Value'):Connect(function()
		game.Lighting.FogEnd = FogendValue.Value
	end)
	local TI = TweenInfo.new(TweenDuration,Enum.EasingStyle.Linear)
	local Tween = TweenService:Create(FogendValue, TI, {Value = ChangeTo})
	Tween:Play()
	spawn(function()
		Tween.Completed:Connect(function()
			FogendValue:Destroy()
		end)
	end)
end

function teleportPlayers(partCFrame)
	local players = game.Players:getPlayers()
	for _,player in pairs(players) do
		if player.Character then
			if player.Character.HumanoidRootPart.Anchored == false then
				player.Character.Humanoid.Jump = true
			end
		end
	end
	wait(.5)
	for _,player in pairs(players) do
		if player.Character then
			if player.Character.HumanoidRootPart.Anchored == false then
				player.Character:SetPrimaryPartCFrame(partCFrame)
			end
		end
	end
end

function TransitionScreen()
	for _, player in pairs(game.Players:GetPlayers()) do
		spawn(function()
			local NewGui = game.ServerStorage.Assets.TransitionScreen:Clone()
			NewGui.Parent = player.PlayerGui
		end)
	end
end

--- MainScript ---"
M2z9KJCV,Temperature Indicator rev_01,pleasedontcode,Arduino,Friday 25th of July 2025 06:45:29 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Temperature Indicator
	- Source Code NOT compiled for: Arduino Nano
	- Source Code created on: 2025-07-25 23:45:21

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Integrate the DS18B20 library for temperature */
	/* sensing and ensure the code reads temperature data */
	/* from the connected sensor. Use PWM outputs to */
	/* control the RGB LED color fading based on */
	/* temperature thresholds at 30°C (blue) and 60°C */
	/* (orange). */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
// Include the DallasTemperature library for DS18B20
#include <OneWire.h>
#include <DallasTemperature.h>

// Define pins
const int oneWireBusPin = 2; // Pin where DS18B20 data line is connected
const int redLEDPin = 9;     // PWM pin for Red LED
const int greenLEDPin = 10;  // PWM pin for Green LED
const int blueLEDPin = 11;   // PWM pin for Blue LED

// Create instances for OneWire and DallasTemperature
OneWire oneWire(oneWireBusPin);
DallasTemperature sensors(&oneWire);

// Variables to store temperature
float temperatureC = 0.0;

// Function prototypes
void setup(void);
void loop(void);

/****** FUNCTION IMPLEMENTATION *****/

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  
  // Initialize the temperature sensor
  sensors.begin();
  
  // Set LED pins as outputs
  pinMode(redLEDPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(blueLEDPin, OUTPUT);
}

void loop(void)
{
  // Request temperature measurement
  sensors.requestTemperatures();
  // Read temperature in Celsius
  temperatureC = sensors.getTempCByIndex(0);
  
  // Debug: print temperature
  Serial.print(""Temperature: "");
  Serial.print(temperatureC);
  Serial.println("" °C"");
  
  // Map temperature to RGB color
  // Below 30°C: Blue
  // Between 30°C and 60°C: Fade from Blue to Orange
  // Above 60°C: Orange
  
  if (temperatureC <= 30)
  {
    // Fully blue
    analogWrite(redLEDPin, 0);
    analogWrite(greenLEDPin, 0);
    analogWrite(blueLEDPin, 255);
  }
  else if (temperatureC >= 60)
  {
    // Fully orange (Red + Green)
    analogWrite(redLEDPin, 255);
    analogWrite(greenLEDPin, 165); // Approximate orange
    analogWrite(blueLEDPin, 0);
  }
  else
  {
    // Fade between blue and orange
    // Calculate the interpolation factor
    float factor = (temperatureC - 30) / (60 - 30);
    // Blue decreases from 255 to 0
    int blueValue = (int)(255 * (1 - factor));
    // Red increases from 0 to 255
    int redValue = (int)(255 * factor);
    // Green increases from 0 to 165
    int greenValue = (int)(165 * factor);
    
    analogWrite(redLEDPin, redValue);
    analogWrite(greenLEDPin, greenValue);
    analogWrite(blueLEDPin, blueValue);
  }
  
  delay(1000); // Wait for 1 second before next reading
}
"
gy2cttCC,test_window.lua,AKCEJIb,Lua,Friday 25th of July 2025 06:40:47 PM CDT,"wApi = require(""api.window"")

local monitor = peripheral.find(""monitor"")
monitor.setTextScale(0.5)
term.redirect(monitor)
term.setBackgroundColor(colors.black)
term.setTextColor(colors.white)
term.setCursorPos(1, 1)
term.clear()
monitor.setPaletteColor(colors.orange, 0x222222)
monitor.setPaletteColor(colors.white, 0xffffff)

win_test = wApi.WindowWithLabel(2, 2, 20, 10, ""Test window"")
win_test:draw()

win_test2 = wApi.WindowWithLabel(12, 12, 20, 10, ""Test window2"", monitor)
win_test2:draw()


local init_x = 0
local init_y = 0
local is_drag = false

Z_BUFFER = {
    [1] = win_test,
    [2] = win_test2
}

local function drawThings()
    while true do
        term.redirect(monitor)
        term.setBackgroundColor(colors.black)
        term.setTextColor(colors.white)
        term.setCursorPos(1, 1)
        term.clear()
        term.write(init_x, init_y)
        for i = #Z_BUFFER, 1, -1 do
            Z_BUFFER[i]:draw()
        end
        sleep(0)
    end
end

local function inrange(num, min, max)
    if num >= min and num <= max then
        return true
    else
        return false
    end
end

local current_window_index = 1
local function changeWindow()
    while true do
        event, button, x, y = os.pullEvent(""monitor_touch"")
        for i = #Z_BUFFER, 1, -1 do
            if inrange(x, Z_BUFFER[i].x, Z_BUFFER[i].x + Z_BUFFER[i].width) and inrange(y, Z_BUFFER[i].y, Z_BUFFER[i].y + Z_BUFFER[i].height) then
                current_window_index = i
            end
        end
    end
end

local function dragStart()
    while true do
        event, button, x, y = os.pullEvent()
        if event == ""monitor_touch"" then
            Z_BUFFER[current_window_index].x = x
            Z_BUFFER[current_window_index].y = y
        end
    end
end

local function moveWindow()
    while true do
        event, button, x, y = os.pullEvent(""mouse_drag"")


        win_test.x = win_test.x + (x - init_x)
        win_test.y = win_test.y + (y - init_y)

        init_x = x
        init_y = y
    end
end


parallel.waitForAll(drawThings, moveWindow, changeWindow, dragStart)
"
dvYdTnJJ,api/ui/control.lua,AKCEJIb,Lua,Friday 25th of July 2025 06:19:57 PM CDT,"require(""api.class"")

---@class Control
local Control = class()

function Control:init(x, y, width, height, parent)
    self.parent = parent or nil
    self.x = x
    self.y = y
    self.width = width
    self.height = height
end

function Control:draw()

end
"
db2Tm8xW,api/button.lua,AKCEJIb,Lua,Friday 25th of July 2025 06:19:30 PM CDT,"require(""api.class"")
---@class Button
local Button = class()
---@param id number the id of the button
---@param x number the x position of the button
---@param y number the y position of the button
---@param add_width number the additional width of the button
---@param height number the height of the button
---@param text string the text of the button
---@param colorTEXT number the text color of the button
---@param colorBGTEXT number the background text color of the button
function Button:init(id, x, y, add_width, height, text, colorTEXT, colorBGTEXT)
    self.id = id
    self.x = x
    self.y = y
    self.add_width = add_width
    self.height = height
    self.text = text
    self.colorTEXT = colorTEXT
    self.colorBGTEXT = colorBGTEXT
end

---@param num number the number to check
---@param xm number the x position of the mouse
---@param ym number the y position of the mouse
local function inrange(num, min, max)
    if num >= min and num <= max then
        return true
    else
        return false
    end
end

---@param xmouse number the x position of the mouse
---@param ymouse number the y position of the mouse
---@param event string the type of event
---@return boolean if the button was clicked
function Button:wasClicked(xmouse, ymouse, event)
    if event == ""mouse_click"" or event == ""monitor_touch"" then
        local xB, yB, mxB, myB = self:getPosition()
        local xIn = inrange(xmouse, xB, mxB)
        local yIn = inrange(ymouse, yB, myB)
        if (xIn and yIn) then
            return true
        else
            return false
        end
    end
end

---@return number x position of the button
---@return number y position of the button
---@return number max_x position of the button
---@return number max_y position of the button
function Button:getPosition()
    return self.x, self.y, self.x + #self.text + self.add_width - 1, self.y + self.height - 1
end

---@return string the text of the button
function Button:getButtonText()
    return self.text
end

---@return number the id of the button
function Button:getID()
    return self.id
end

---@type table<Button>
local button_list = {}

---@param id number the id of the button
---@return Button the button with the given id
function getButton(id)
    return button_list[id]
end

---@param id string the id of the button
---@param x number the x position of the button
---@param y number the y position of the button
---@param add_width number the additional width of the button
---@param height number the height of the button
---@param text string the text of the button
---@param colorTEXT number the text color of the button
---@param colorBGTEXT number the background text color of the button
---@return Button button the created button
function createButton(id, x, y, add_width, height, text, colorTEXT, colorBGTEXT)
    local button = Button(id, x, y, add_width, height, text, colorTEXT, colorBGTEXT)
    button_list[""btn_"" .. id] = button

    -- draw the button
    paintutils.drawFilledBox(button.x, button.y, button.x + #button.text + button.add_width - 1,
        button.y + button.height - 1, button.colorBGTEXT)
    term.setBackgroundColor(button.colorBGTEXT)
    term.setTextColor(button.colorTEXT)
    term.setCursorPos(button.x, button.y)
    term.write(button.text)

    return button
end

return {
    Button = Button,
    getButton = getButton,
    createButton = createButton,
}
"
Xw5FQZq2,api/window.lua,AKCEJIb,Lua,Friday 25th of July 2025 06:19:09 PM CDT,"require(""api.class"")
require(""api.button"")

---@class Window
local Window = class()
---Constructor
---@param x number the x position of the window
---@param y number the y position of the window
---@param width number the width of the window
---@param height number height of the window
---@param title string the title of the window
---@param parent[term] table the terminal to draw the window on
function Window:init(x, y, width, height, title, parent)
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.title = title
    self.parent = parent
    self.term = parent or term.current()
    if self.term and self.term._instance ~= nil then
        self.term = self.term._instance
    end

    self._instance = window.create(self.term, x, y, width, height)
end

function Window:__drawHeader()
    paintutils.drawLine(1, 1, self.width, 1, colors.gray)
    paintutils.drawLine(2, self.height, self.width, self.height, colors.orange)
    paintutils.drawLine(1, 2, 1, self.height, colors.orange)
end

---Draws the window
function Window:draw()
    term.redirect(self._instance)
    self._instance.reposition(self.x, self.y, self.width, self.height)
    self._instance.setBackgroundColor(colors.lightGray)
    self._instance.setTextColor(colors.white)
    self._instance.clear()
    self._instance.setCursorPos(1, 1)
    self:__drawHeader()
    term.setCursorPos(1, 1)
    term.setBackgroundColor(colors.gray)
    term.setTextColor(colors.white)
    term.write(self.title)
end

---@class Label
---@field text string the text of the label
---@field x number the x position of the label
---@field y number the y position of the label
---@field width number the width of the label
---@field height number the height of the label
local Label = class()
---@param text string the text of the label
---@param x number the x position of the label
---@param y number the y position of the label
---@param width number the width of the label
---@param height number the height of the label
function Label:init(text, x, y, width, height, parent)
    self.text = text
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.term = parent or term.current()
    if self.term and self.term._instance ~= nil then
        self.term = self.term._instance
    end

    self._instance = window.create(self.term, x, y, width, height)
end

function Label:draw()
    paintutils.drawFilledBox(self.x, self.y, self.x + self.width - 1, self.y + self.height - 1, colors.gray)
    term.setCursorPos(self.x, self.y)
    term.write(self.text)
end

---@class WindowWithLabel
local WindowWithLabel = class(Window)

function WindowWithLabel:init(x, y, width, height, title, parent)
    Window.init(self, x, y, width, height, title, parent)

    self.label = Label(""test label"", self.x + 1, self.y + 1, 10, 1, self)
end

function WindowWithLabel:draw()
    Window.draw(self)
    self.label:draw()
end

return {
    Window = Window,
    Label = Label,
    WindowWithLabel = WindowWithLabel
}
"
WNSWHEps,api/class.lua,AKCEJIb,Lua,Friday 25th of July 2025 06:18:51 PM CDT,"function class(base, init)
    local c = {} -- a new class instance
    if not init and type(base) == 'function' then
        init = base
        base = nil
    elseif type(base) == 'table' then
        for i, v in pairs(base) do c[i] = v end
        c._base = base
    end

    -- the class will be the metatable for all its objects,
    -- and they will look up their methods in it.
    c.__index = c

    -- expose a constructor which can be called by <classname>(<args>)
    local mt = {}
    mt.__call = function(class_tbl, ...)
        local obj = {}
        setmetatable(obj, c)
        if class_tbl.init then
            class_tbl.init(obj, ...)
        else
            -- make sure we have _base's constructor called
            if class_tbl._base and class_tbl._base.init then
                class_tbl._base.init(obj, ...)
            end
        end
        return obj
    end

    c.is_a = function(self, klass)
        local m = getmetatable(self)
        while m do
            if m == klass then return true end
            m = m._base
        end
        return false
    end

    setmetatable(c, mt)
    return c
end

--[[

Example:

MyClass = class()
function MyClass:init()
    self.x = 10
end

function MyClass:foo()
    print(self.x)
end

MySubClass = class(MyClass)
function MySubClass:init()
    MyClass.init(self)
    self.y = 20
end

function MySubClass:bar()
    print(self.y)
end

obj = MySubClass()
obj:foo() -- 10
obj:bar() -- 20
]]
"
m8yisqvT,temp,generic_toaster,Lua,Friday 25th of July 2025 05:55:13 PM CDT,"charO = script.Parent
hum = charO.Humanoid
chasing = false
enraged = false
docileWS = 8
chaseWS = 17
enragedWS = 28
HRP = charO:WaitForChild(""HumanoidRootPart"")
PFS = game:GetService(""PathfindingService"")
local path = PFS:CreatePath({AgentRadius = 2,
							AgentHeight = 8,
							AgentCanJump = false,
							AgentCanClimb = false,
							WaypointSpacing = 17,
})

local waypoints = {}
local reachedConnection
local blockedConnection
local wpIndex
local chasetokens
task.wait(2)
function Move(targetPos)
	path:ComputeAsync(charO.HumanoidRootPart.Position, targetPos)
	if path.Status == Enum.PathStatus.Success then
		waypoints = path:GetWaypoints()
		--for i = 1, #waypoints do
			--hum:MoveTo(waypoints[i].Position)
			--local part = Instance.new(""Part"", workspace)
			--part.Anchored = true
			--part.CanCollide = false
			--part.Size = Vector3.new(1,1,1)
			--part.Position = wp.Position
			--part.Transparency = 0.5
		--end
		wpIndex = 2
		
		if not blockedConnection then
			blockedConnection = path.Blocked:Connect(function(blockedIndex)
				if blockedIndex >= wpIndex then
					blockedConnection:Disconnect()
					blockedConnection = nil
					Move(targetPos)
				end
			end)
		end
		if not reachedConnection then
			reachedConnection = hum.MoveToFinished:Connect(function(reached)
				--print(wpIndex)
				--print(reached)
				if reached and wpIndex < #waypoints then
					wpIndex += 1
					hum:MoveTo(waypoints[wpIndex].Position)
				else
					return
				end
			end)
		end
		wpIndex = 2
		hum:MoveTo(waypoints[wpIndex].Position)
	end
end





local function getNearestPlayer()
	--print(""check players"")
	local nearestPlayer = nil
	local nearestDistance = 100
	local monsterPosition = HRP.Position

	for _, player in pairs(game.Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
			local playerPosition = player.Character.HumanoidRootPart.Position
			local distance = (monsterPosition - playerPosition).Magnitude
			nearestDistance = distance
			nearestPlayer = player
		end
	end
	if nearestPlayer.Character then
		return nearestPlayer.Character
	end
end

task.wait(10)
char = getNearestPlayer()
animload = hum:LoadAnimation(charO.WalkAnim)
animload.Priority = Enum.AnimationPriority.Movement
animload.Looped = true
animload:Play()
idleload = hum:LoadAnimation(charO.IdleAnim)
idleload.Priority = Enum.AnimationPriority.Movement
idleload.Looped = true
runload = hum:LoadAnimation(charO.RunAnim)
runload.Priority = Enum.AnimationPriority.Movement
runload.Looped = true
screamload = hum:LoadAnimation(charO.ScreamAnim)
screamload.Priority = Enum.AnimationPriority.Action
screamload.Looped = false


charO.StunEvent.Event:Connect(function()
	if enraged == false then
		charO.hitbox.CanTouch = false
		HRP.Anchored = true
		animload:Stop()
		runload:Stop()
		idleload:Play()
		enraged = true
		task.wait(5)
		charO.hitbox.CanTouch = true
		idleload:Stop()
		runload:Play()
		HRP.Anchored = false
		hum.WalkSpeed = enragedWS
		charO.Head.stunned:Play()
		task.wait(3)
		enraged = false
		if chasing then
			hum.WalkSpeed = chaseWS
		else
			hum.WalkSpeed = docileWS
			runload:Stop()
			animload:Play()
		end
	end
end)


charO.hitbox.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChildOfClass(""Humanoid"") then
		if game:GetService(""Players""):FindFirstChild(hit.Parent.Name) then
			if charO.hitbox.CanTouch == true then
				charO.hitbox.CanTouch = false
				local touchedPlr = game:GetService(""Players""):FindFirstChild(hit.Parent.Name)
				touchedPlr.PlayerGui:FindFirstChild(""Jumpscare"").Enabled = true
				game.SoundService.jumpscared:Play()
				game.SoundService.bruteChase:Stop()
				hit.Parent:FindFirstChild(""HumanoidRootPart"").Anchored = true
				task.wait(10)
				touchedPlr:Kick(""SEE YOU NEXT TIME"")
			end
		end
	end
end)

--game:GetService(""RunService"").Stepped:Connect(function()
while true do
	local distance = (char.HumanoidRootPart.Position - HRP.Position).Magnitude
	local sight = RaycastParams.new()
	sight.FilterType = Enum.RaycastFilterType.Exclude
	sight.FilterDescendantsInstances = {charO}
	sightbrick = Instance.new(""Part"")
	sightbrick.Parent = workspace
	sightbrick.Anchored = true
	sightbrick.CanCollide = false
	sightbrick.CanQuery = false
	sightbrick.CanTouch = false
	sightbrick.Size = Vector3.new(1,1,1)
	sightbrick.CFrame = CFrame.new(HRP.Position, char.HumanoidRootPart.Position)
	sightbrick.Transparency = 1
	game:GetService(""Debris""):AddItem(sightbrick,1)
	local ray = workspace:Raycast(sightbrick.Position, sightbrick.CFrame.LookVector*90, sight)
	--print(HRP.Position)
	if ray then
		--local visualizationlaser = Instance.new(""Part"", workspace)
		--visualizationlaser.Anchored = true
		--visualizationlaser.CanCollide = false
		--visualizationlaser.Size = Vector3.new(0.1, 0.1, ray.Distance)
		--visualizationlaser.BrickColor = BrickColor.new(""Persimmon"")
		--visualizationlaser.CFrame = CFrame.new(HRP.Position, char.HumanoidRootPart.Position)
		--visualizationlaser.CFrame = visualizationlaser.CFrame * CFrame.new(0, 0, -ray.Distance/2)
		--game:GetService(""Debris""):AddItem(visualizationlaser,0.01)
		if ray.Instance.Parent == char or ray.Instance.Parent.Parent == char then
			if chasing == false then
				chasing = true
				charO.chasing.Value = true
				hum.WalkSpeed = 0
				game.SoundService.OBSESSION2.Volume = 0
				HRP.triggered:Play()
				screamload:Play()
				knockbackBV = Instance.new(""BodyVelocity"")
				knockbackBV.Parent = char:FindFirstChild(""HumanoidRootPart"")
				knockbackBV.Velocity = sightbrick.CFrame.LookVector * 5.5
				knockbackBV.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				knockbackBV.P = 100
				game:GetService(""Debris""):AddItem(knockbackBV,1.1)
				chasetokens = 225
				--game.SoundService.bruteChase.TimePosition = 83.1
				game.SoundService.bruteChase:Play()
				game.SoundService.bruteChase.Looped = true
				game.ReplicatedStorage.chocSighted:FireAllClients()
				animload:Stop()
				runload:Play()
				task.wait(1.6)
				WStween = game.TweenService:Create(hum, TweenInfo.new(4.4, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {WalkSpeed = chaseWS}):Play()
			end
		else
			if chasing then
				if chasetokens > 1 then
					chasetokens -= 1
				else
					chasing = false
					charO.chasing.Value = false
					hum.WalkSpeed = docileWS
					runload:Stop()
					animload:Play()
					game.SoundService.bruteChase.Looped = false
					game.SoundService.OBSESSION2.Volume = 0.1
					game.SoundService.OBSESSION2:Play()
				end
			end
		end
	end
	if char then
		Move(char.HumanoidRootPart.Position)
	end
	task.wait(0.01)
end"
pSBn0JH4,My New Leaderstats (Lobby),Sungmingamerpro13,CSS,Friday 25th of July 2025 04:58:14 PM CDT,"local TeleportService = game:GetService(""TeleportService"")
local WinsDataStore = game:GetService(""DataStoreService""):GetDataStore(""Wins"")
local RoundsDataStore = game:GetService(""DataStoreService""):GetDataStore(""Rounds"")

game.Players.PlayerAdded:Connect(function(player)
	
	local leaderstats = Instance.new(""Folder"", player)
	leaderstats.Name = ""leaderstats""
	
	local WinsValue = Instance.new(""IntValue"", leaderstats)
	WinsValue.Name = ""Wins""
	
	local RoundsValue = Instance.new(""IntValue"", leaderstats)
	RoundsValue.Name = ""Rounds""
	
	local Data = WinsDataStore:GetAsync(player.UserId)
	
	local Data2 = RoundsDataStore:GetAsync(player.UserId)
	
	if Data then
		for name, value in pairs(Data.leaderstats) do
			leaderstats[name].Value = value
		end
	end
	
	if Data2 then
		for name, value in pairs(Data2.leaderstats) do
			leaderstats[name].Value = value
		end
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	
	local SaveData = {leaderstats = {}}
	local SaveData2 = {leaderstats = {}}
	
	for _, stat in pairs(player.leaderstats:GetChildren()) do
		SaveData.leaderstats[stat.Name] = stat.Value
	end
	
	for _, stat in pairs(player.leaderstats:GetChildren()) do
		SaveData2.leaderstats[stat.Name] = stat.Value
	end
	
	WinsDataStore:SetAsync(player.UserId, SaveData)
	
	RoundsDataStore:SetAsync(player.UserId, SaveData2)
	
end)

game:BindToClose(function()
	for _, player in pairs(game.Players:GetPlayers()) do
		local SaveData = {leaderstats = {}}

		local SaveData2 = {leaderstats = {}}

		for _,stat in pairs(player.leaderstats:GetChildren()) do
			SaveData.leaderstats[stat.Name] = stat.Value
		end

		for _, stat in pairs(player.leaderstats:GetChildren()) do
			SaveData2.leaderstats[stat.Name] = stat.Value
		end


		WinsDataStore:SetAsync(player.UserId,SaveData)

		RoundsDataStore:SetAsync(player.UserId, SaveData2)
	end

	wait(2)
end)

local AddWinsDataStore = game:GetService(""DataStoreService""):GetDataStore(""AddWins"")

game.Players.PlayerAdded:Connect(function(player)
	local previousData = AddWinsDataStore:GetAsync(player.UserId) -- Returns a number value.

	local AddWins

	if previousData ~= nil then
		AddWins = previousData
	else
		AddWins = 0
		AddWinsDataStore:SetAsync(player.UserId, 0)
	end

	local coinsValue = Instance.new(""IntValue"", player)
	coinsValue.Name = ""AddWins""
	coinsValue.Value = AddWins
end)

game:BindToClose(function() -- Runs whenver the server is about to shut down/stop.
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.AddWins.Value
		AddWinsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.AddWins.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		AddWinsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

local AddRoundsDataStore = game:GetService(""DataStoreService""):GetDataStore(""AddRounds"")

game.Players.PlayerAdded:Connect(function(player)
	local previousData = AddRoundsDataStore:GetAsync(player.UserId) -- Returns a number value.

	local AddRounds

	if previousData ~= nil then
		AddRounds = previousData
	else
		AddRounds = 0
		AddRoundsDataStore:SetAsync(player.UserId, 0)
	end

	local coinsValue = Instance.new(""IntValue"", player)
	coinsValue.Name = ""AddRounds""
	coinsValue.Value = AddRounds
end)

game:BindToClose(function() -- Runs whenver the server is about to shut down/stop.
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.AddRounds.Value
		AddRoundsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.AddRounds.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		AddRoundsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)
"
sCbcpmW6,My New Leaderstats (Main Game),Sungmingamerpro13,CSS,Friday 25th of July 2025 04:56:02 PM CDT,"local TeleportService = game:GetService(""TeleportService"")
local AddWinsDataStore = game:GetService(""DataStoreService""):GetDataStore(""AddWins"")

game.Players.PlayerAdded:Connect(function(player)
	local previousData = AddWinsDataStore:GetAsync(player.UserId) -- Returns a number value.

	local AddWins

	if previousData ~= nil then
		AddWins = previousData
	else
		AddWins = 0
		AddWinsDataStore:SetAsync(player.UserId, 0)
	end

	local coinsValue = Instance.new(""IntValue"", player)
	coinsValue.Name = ""AddWins""
	coinsValue.Value = AddWins
end)

game:BindToClose(function() -- Runs whenver the server is about to shut down/stop.
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.AddWins.Value
		AddWinsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.AddWins.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		AddWinsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

local AddRoundsDataStore = game:GetService(""DataStoreService""):GetDataStore(""AddRounds"")
local RoundsDataStore = game:GetService(""DataStoreService""):GetOrderedDataStore(""Rounds"")

game.Players.PlayerAdded:Connect(function(player)
	local previousData = AddRoundsDataStore:GetAsync(player.UserId) -- Returns a number value.

	local AddRounds

	if previousData ~= nil then
		AddRounds = previousData
	else
		AddRounds = 0
		AddRoundsDataStore:SetAsync(player.UserId, 0)
	end

	local coinsValue = Instance.new(""IntValue"", player)
	coinsValue.Name = ""AddRounds""
	coinsValue.Value = AddRounds
end)

game:BindToClose(function() -- Runs whenver the server is about to shut down/stop.
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.AddRounds.Value
		AddRoundsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.AddRounds.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		AddRoundsDataStore:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

game.Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function(Character)
		Character.Died:Connect(function()
			RoundsDataStore:IncrementAsync(player.UserId, 1)
			AddRoundsDataStore:SetAsync(player.UserId, player.AddRounds.Value)
			player.AddRounds.Value = player.AddRounds.Value + 1
		end)
	end)
end)
"
81BR5vpY,#lg-dist,FRIB20YT,HTML,Friday 25th of July 2025 04:51:47 PM CDT,"<div class=""LiquidGlass"">
  

  <div class=""glass-container"">
    <div class=""glass-filter""></div>
    <div class=""glass-overlay""></div>
    <div class=""glass-specular""></div>
    

    <!-- SVG FILTER DEFINITION -->
    <svg style=""display: none"">
      <filter id=""lg-dist"" x=""0%"" y=""0%"" width=""100%"" height=""100%"">
        <feTurbulence type=""fractalNoise"" baseFrequency=""0.008 0.008"" numOctaves=""2"" seed=""92"" result=""noise"" />
        <feGaussianBlur in=""noise"" stdDeviation=""2"" result=""blurred"" />
        <feDisplacementMap in=""SourceGraphic"" in2=""blurred"" scale=""70"" xChannelSelector=""R"" yChannelSelector=""G"" />
      </filter>
    </svg>
  </div>
</div>"
irQ1e11F,Reviews Page Fake (20 Line),PECH_WEB,GetText,Friday 25th of July 2025 03:26:22 PM CDT,"Fake news, intentionally cause cruel violence between nations
so bad new don't believe it
page is fake newe bad newe dont thai to me 🦶💩🇹🇭
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
I am going to reports this page because they used a lot of hurting words and scamming people with AI nonfiction and also violent crime.
ខ្ញុំកំពុងរាយការណ៍អំពីការបង្ហោះនេះ ពីព្រោះវាផ្សព្វផ្សាយព័ត៌មានមិនពិត និងគ្រោះថ្នាក់ ដែលកើតឡើងហេតុការណ៍មិនពិតពាក់ព័ន្ធនឹងកម្ពុជា និងថៃ។ ការប្រកាសអះអាង
All posts of this page are fake news"
r7nY7pT0,Reviews Page Fake (50 Line),PECH_WEB,GetText,Friday 25th of July 2025 03:25:16 PM CDT,"Fake news, intentionally cause cruel violence between nations
so bad new don't believe it
page is fake newe bad newe dont thai to me 🦶💩🇹🇭
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
I am going to reports this page because they used a lot of hurting words and scamming people with AI nonfiction and also violent crime.
ខ្ញុំកំពុងរាយការណ៍អំពីការបង្ហោះនេះ ពីព្រោះវាផ្សព្វផ្សាយព័ត៌មានមិនពិត និងគ្រោះថ្នាក់ ដែលកើតឡើងហេតុការណ៍មិនពិតពាក់ព័ន្ធនឹងកម្ពុជា និងថៃ។ ការប្រកាសអះអាង
All posts of this page are fake news
this page posted bully Cambodia and attacked Cambodia first. fake Thailand 💩💩🤮
this page posted bully Cambodia and attacked Cambodia first. fake Thailand 💩💩🤮
Fake page all post in page not real. fake all
Fake page all post in page not real. fake all🤮👎👎👎👎👎
This page is very very bad
Thailand only wants Cambodian territory.
ข่าวปลอมในเมืองไทยถึงคนไทย...
ข่าวหน้าเพจนี้แย่มากและเป็นเท็จ ไม่เป็นธรรม 
This page not good shared Fake news.
This page is not good, always post the fake news and the fake information. Fake and always fake
This page is fake news!!!😠
This page is not good, always post the fake news and the fake information.
Fake news false information
This page is fake news not good
This page is fake news!!!
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
Fake new manipulation hate and violence 👎🏻"
jSts8eTR,Reviews Page Fake (100 Line),PECH_WEB,GetText,Friday 25th of July 2025 03:18:13 PM CDT,"Fake news, intentionally cause cruel violence between nations
so bad new don't believe it
page is fake newe bad newe dont thai to me 🦶💩🇹🇭
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
I am going to reports this page because they used a lot of hurting words and scamming people with AI nonfiction and also violent crime.
ខ្ញុំកំពុងរាយការណ៍អំពីការបង្ហោះនេះ ពីព្រោះវាផ្សព្វផ្សាយព័ត៌មានមិនពិត និងគ្រោះថ្នាក់ ដែលកើតឡើងហេតុការណ៍មិនពិតពាក់ព័ន្ធនឹងកម្ពុជា និងថៃ។ ការប្រកាសអះអាង
All posts of this page are fake news
this page posted bully Cambodia and attacked Cambodia first. fake Thailand 💩💩🤮
this page posted bully Cambodia and attacked Cambodia first. fake Thailand 💩💩🤮
Fake page all post in page not real. fake all
Fake page all post in page not real. fake all🤮👎👎👎👎👎
This page is very very bad
Thailand only wants Cambodian territory.
ข่าวปลอมในเมืองไทยถึงคนไทย...
ข่าวหน้าเพจนี้แย่มากและเป็นเท็จ ไม่เป็นธรรม 
This page not good shared Fake news.
This page is not good, always post the fake news and the fake information. Fake and always fake
This page is fake news!!!😠
This page is not good, always post the fake news and the fake information.
Fake news false information
This page is fake news not good
This page is fake news!!!
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
Fake new manipulation hate and violence 👎🏻
This page is fake news!!!
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
this page is so bad because it's only telling the things that not truth to the world 🌍😭.
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news
This page not good shared Fake news.
This page always share the fake News
This page is not good 🖕🏼👎🏼👎🏼
This news very bad And post fake stories
This page just create and post about fake news please delete this page
This page is so bad that make people died
This page is so bad that make people died
This page sharing fake news
សុំរាយការណ៍ព័ត៌មានរបស់អ្នកមិនពិតទេ
Thailand attacked first, The Cambodian need a real peace, but the Thailand alway don’t need a peace, this this page not good please say real news
This page is fake news!!!
Bangkok post always post the fake new and lies to the world, this page is not good.
This page is fake news!!!
This page is promoting hate
Fake news which bias to Siem as being innocent in evert situations. however, they play a victim, hurting innocent Cambodian civilians then put blame on Cambodia.
This page gives fake news.
This page is not good because they share fake news"
NDSNuJw2,t1,gismatthew,Bash,Friday 25th of July 2025 02:20:13 PM CDT,"#!/bin/bash

# Path to Kerio mail store (default, change if different)
MAIL_STORE=""/Volumes/kerio_store/mailserver/store/mail/westernheritage.ca/""

# Spam folder names can vary: ""Spam"", ""Junk E-mail"", etc.
FOLDER_NAMES=(""Spam"" ""Junk E-mail"" ""Junk"")

# Days threshold
DAYS=14

# Loop through all user mail folders
find ""$MAIL_STORE"" -type d | while read -r userdir; do
  for folder in ""${FOLDER_NAMES[@]}""; do
    spam_path=""$userdir/$folder""

    if [ -d ""$spam_path"" ]; then
      echo ""Cleaning $spam_path ...""
      files=$(find ""$spam_path"" -type f -name ""*.eml"" -mtime +$DAYS)
      count=$(echo ""$files"" | grep -v '^[[:space:]]*$' | wc -l)
      if [ ""$count"" -gt 0 ]; then
        echo ""Total files detected: $count"" 
        echo ""Mail titles:""
        while IFS= read -r ""file""; do
          subject=$(grep -m1 ""^Subject:"" ""$file"" | sed 's/^Subject: //')
	  date=$(grep -m1 ""^Date:"" ""$file"" | sed -E 's/^Date:[[:space:]]*//' | tr -d '\r')
          echo ""[$date] $subject""
        done <<< ""$files""
      fi
      # find ""$spam_path"" -type f -name ""*.eml"" -mtime +$DAYS -delete
    fi
  done
done
"
tzS1iysb,matplotlib,nitestryker,Python,Friday 25th of July 2025 02:03:04 PM CDT,"import matplotlib.pyplot as plt
from matplotlib.patches import Circle, Ellipse, Arc
import matplotlib.animation as animation

fig, ax = plt.subplots()
head = Circle((0, 0), 1, facecolor='peachpuff', edgecolor='black', lw=2)
right_eye = Circle((0.35, 0.35), 0.15, facecolor='white', edgecolor='black', lw=2)
right_pupil = Circle((0.35, 0.35), 0.07, facecolor='black')
left_eye = Ellipse((-0.35, 0.35), 0.3, 0.3, facecolor='white', edgecolor='black', lw=2)
left_pupil = Circle((-0.35, 0.35), 0.07, facecolor='black')
nose = Ellipse((0, 0.1), 0.2, 0.1, facecolor='sandybrown', edgecolor='black', lw=2)
mouth = Arc((0, -0.2), 0.5, 0.3, angle=0, theta1=20, theta2=160, edgecolor='red', lw=2)
left_eyebrow = Arc((-0.35, 0.55), 0.4, 0.2, angle=0, theta1=0, theta2=180, edgecolor='black', lw=2)
right_eyebrow = Arc((0.35, 0.55), 0.4, 0.2, angle=0, theta1=0, theta2=180, edgecolor='black', lw=2)

ax.add_patch(head)
ax.add_patch(right_eye)
ax.add_patch(right_pupil)
ax.add_patch(left_eye)
ax.add_patch(left_pupil)
ax.add_patch(nose)
ax.add_patch(mouth)
ax.add_patch(left_eyebrow)
ax.add_patch(right_eyebrow)

ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')

def wink_scale(frame, period=30):
    t = (frame % period) / period
    if t < 0.2:
        return 1.0
    elif t < 0.3:
        return 1.0 - (t - 0.2) / 0.1
    elif t < 0.7:
        return 0.0
    elif t < 0.8:
        return (t - 0.7) / 0.1
    else:
        return 1.0

def update(frame):
    scale = wink_scale(frame)
    new_height = 0.3 * scale if scale > 0 else 0.01
    left_eye.set_height(new_height)
    left_pupil.set_visible(scale > 0.5)
    return [left_eye, left_pupil]

ani = animation.FuncAnimation(fig, update, frames=200, interval=50, blit=True)
plt.show()
"
mWWN5jdp,Assignment,April_The_Sergal,Java,Friday 25th of July 2025 01:58:03 PM CDT,"import java.util.List;
import java.util.Scanner;
import java.util.function.Function;
import java.util.function.Predicate;

public class ProductionGoal {
    //Conversion and Comparison constants
    private final static int CURRENT_MONTHLY_PRODUCTION = 1000;
    private final static double GROWTH_RATE = 0.06;
    private final static int STARTING_MONTH = 0;
    private final static double ZERO = 0.0;
    private final static int ONE = 1;

    //Message Constants
    private final static String GOAL_MESSAGE = ""The goal will be met in %s month%s."";
    private final static String INTRO_MESSAGE = ""Please enter the desired production goal:"";
    private final static String REQUEST_MESSAGE = ""Please enter a valid production goal:"";

    private final Scanner SCANNER;

    //Validation used to test input from user based on predefined rule, if violated, will throw ValidationException
    private static final List<ValidationRule> VALIDATION_RULES = List.of(
            new ValidationRule(
                    goal -> goal < ZERO,
                    goal -> new ValidationException(ValidationException.ErrorType.NEGATIVE_VALUE, goal)
            ),
            new ValidationRule(
                    goal -> goal < CURRENT_MONTHLY_PRODUCTION,
                    goal -> new ValidationException(ValidationException.ErrorType.BELOW_CURRENT_PRODUCTION, goal)
            ),
            new ValidationRule(
                    goal -> Double.compare(goal, CURRENT_MONTHLY_PRODUCTION) == ZERO,
                    goal -> new ValidationException(ValidationException.ErrorType.MET_CURRENT_PRODUCTION, goal)
            )
    );

    public ProductionGoal() {
        this.SCANNER = new Scanner(System.in);
    }

    /**
     * Calculates the number of months needed to reach a production goal based on the current production,
     * growth rate, and starting month.
     *
     * @param currentMonth The current month in the calculation.
     * @param currentProduction The current production amount.
     * @param rate The growth rate at which production increases each month.
     * @param goal The target production goal to be achieved.
     * @return The month number when the production goal is achieved.
     */
    private static int calculateMonths(int currentMonth, double currentProduction, double rate, double goal) {
        if(currentProduction >= goal) {
            return currentMonth;
        } else {
            return calculateMonths(currentMonth + 1, currentProduction * (1 + rate), rate, goal);
        }
    }

    /**
     * Validates and parses user input into a double value representing a production goal.
     *
     * @param input The input string to be validated and parsed.
     * @return The parsed double value representing the validated production goal.
     * @throws ValidationException If the input is in an invalid format or violates any validation rule.
     */
    private static double validateAndParseInput(String input) throws ValidationException {
        double goal;
        try {
            goal = Double.parseDouble(input);
        } catch (NumberFormatException e) {
            throw new ValidationException(ValidationException.ErrorType.INVALID_FORMAT);
        }

        for (ValidationRule rule : VALIDATION_RULES) {
            rule.validate(goal);
        }

        return goal;
    }

    /**
     * Prompts the user to input a production goal, validates the input, and returns the valid goal value.
     *
     * @return The valid production goal entered by the user as a double. If the production goal
     *         has already been met, the default value of 0.0 is returned.
     */
    private double fetchUserInput() {
        System.out.println(INTRO_MESSAGE);
        String input = SCANNER.nextLine();
        double goal = ZERO;
        MainLoop:
        while (true) {
            try {
                goal = validateAndParseInput(input);
                break;
            } catch (ValidationException e) {
                switch (e.getErrorType()) {
                    case INVALID_FORMAT, NEGATIVE_VALUE, BELOW_CURRENT_PRODUCTION:
                        System.out.println(e.getMessage());
                        System.out.println(REQUEST_MESSAGE);
                        input = SCANNER.nextLine();
                        break;
                    case MET_CURRENT_PRODUCTION:
                        System.out.println(e.getMessage());
                        break MainLoop;
                }
            }
        }
        return goal;
    }

    private void cleanup() {
        SCANNER.close();
    }

    private void run() {
        double goal = fetchUserInput();
        int monthsNeeded = calculateMonths(STARTING_MONTH, CURRENT_MONTHLY_PRODUCTION, GROWTH_RATE, goal);
        if (monthsNeeded > ZERO) {
            System.out.printf(GOAL_MESSAGE, monthsNeeded, (monthsNeeded == ONE) ? """" : ""s"");
        }
        cleanup();
    }

    public static void main(String[] args) {
        ProductionGoal app = new ProductionGoal();
        app.run();
    }

    /**
     * Represents a validation rule used to validate input values against a specific condition.
     * If the condition is met, a {@link ValidationException} is thrown.
     *
     * @param condition A predicate representing the condition to validate the input against.
     *                   If the condition evaluates to true, the input is considered invalid.
     * @param exceptionFactory A function that generates a {@link ValidationException}
     *                         when the condition is violated. The input value is passed
     *                         to this function to customize the exception details.
     */
    private record ValidationRule(Predicate<Double> condition, Function<Double, ValidationException> exceptionFactory) {

        public void validate(double value) throws ValidationException {
                if (condition.test(value)) {
                    throw exceptionFactory.apply(value);
                }
            }
        }

    /**
     * A custom exception that represents validation errors encountered during input validation.
     * This exception is associated with specific error types and optionally includes the erroneous value.
     */
    private static class ValidationException extends Exception {
        public enum ErrorType {
            NEGATIVE_VALUE(""Value cannot be negative. Did you mean to enter: %.2f""),
            BELOW_CURRENT_PRODUCTION(""Value must be greater than "" + CURRENT_MONTHLY_PRODUCTION + "".""),
            MET_CURRENT_PRODUCTION(""Production goal has already been met.""),
            INVALID_FORMAT(""Invalid number format. Please enter a valid number."");

            private final String message;

            ErrorType(String message) {
                this.message = message;
            }

            public String getErrorTypeMessage() {
                return message;
            }
        }

        private final ValidationException.ErrorType errorType;
        private final double value;

        public ValidationException(ValidationException.ErrorType type, double value) {
            super(type.message);
            this.errorType = type;
            this.value = value;
        }

        public ValidationException(ValidationException.ErrorType type) {
            super(type.message);
            this.errorType = type;
            this.value = Double.NaN;
        }

        public ValidationException.ErrorType getErrorType() {
            return errorType;
        }

        @Override
        public String getMessage() {
            if (errorType == ValidationException.ErrorType.NEGATIVE_VALUE) {
                double absoluteValue = Math.abs(value);
                return String.format(errorType.getErrorTypeMessage(), absoluteValue);
            } else {
                return errorType.getErrorTypeMessage();
            }
        }
    }
}"
uyETY2Nz,maximum average,bero_0401,C++,Friday 25th of July 2025 01:49:25 PM CDT,"#include ""bits/stdc++.h""
using namespace std;
#define ll long long
int n, d;
vector<int> a;
int leftAns, rightAns;

bool good(double x) {
    double p[n];
    vector<pair<double, double>>mini(n);
    mini[0].first = a[0]-x; mini[0].second = 0;
    p[0] = a[0]-x;
    bool flag = 0;
    double cur_sum = p[0];
    for(int i=1; i<n; i++) {
        cur_sum += (a[i]-x);
        p[i] = cur_sum;
        if(p[i] <= mini[i-1].first) {
            mini[i].first = cur_sum;
            mini[i].second = i;
        } else {
            mini[i].first = mini[i-1].first;
            mini[i].second = mini[i-1].second;
        }
    }
    for(int i=n-1; i+1-d >= 0; i--) {
        if(i+1-d >= 0 && p[i]>=0) {
            leftAns = 0;
            rightAns = i;
            flag = 1;
            break;
        }
        if(mini[i-d].first <= p[i]) {

            leftAns = mini[i-d].second+1;
            rightAns = i;
            flag = 1;
            break;
        }
    }
    return flag;
}
int main() {
    cin >> n >> d;
    a.resize(n);
    for(int i=0; i<n; i++) {
        cin >> a[i];
    }
    double l = 0, r = 110;
    for(int i=0; i<110; i++) {
        double mid = (l+r)/2;
        if(good(mid)) {
            l = mid;
        } else {
            r = mid;
        }
    }

    cout << leftAns+1 << "" "" << rightAns+1 << endl;
}"
g3Q5tTpy,Grapple and Climb TRY 3 (if ts ain't enough comments u js torturing me atp 😭),arminhello,Lua,Friday 25th of July 2025 01:44:01 PM CDT,"-- grab core services
local Players = game:GetService(""Players"") -- need this to get the player
local RunService = game:GetService(""RunService"") -- need this for smooth movement every frame
local UserInputService = game:GetService(""UserInputService"") -- need this to detect mouse clicks
local TweenService = game:GetService(""TweenService"") -- need this for smooth cooldown animation
local StarterGui = game:GetService(""StarterGui"") -- need this to control core gui
local ContextActionService = game:GetService(""ContextActionService"") -- got this but not using it

-- get basic refs
local player = Players.LocalPlayer -- the person playing the game
local camera = workspace.CurrentCamera -- need camera to shoot rays from mouse position

-- wait till we got a char
local character = player.Character or player.CharacterAdded:Wait() -- might not have spawned yet so wait
local humanoid = character:WaitForChild(""Humanoid"") -- controls player movement and health
local rootPart = character:WaitForChild(""HumanoidRootPart"") -- the main part we move around

-- simple state thing to track what we're doing
local state = {} -- using a table to track if player can do actions
state.__index = state -- makes the table work like an object
state.current = ""Idle"" -- start in idle so player can do stuff

function state:set(newState) -- changes what the player is doing
	self.current = newState -- updates the state
end -- done with function

function state:is(val) -- checks if we're in a certain state
	return self.current == val -- returns true or false
end -- done with function

-- basic config stuff
local GRAPPLE_SPEED = 120 -- studs per second for grapple movement
local CLIMB_SPEED = 1 -- studs per frame for climbing up walls
local CLIMB_DURATION = 1.5 -- seconds to climb before stopping
local WALL_CHECK_DISTANCE = 5 -- studs to check if wall is close enough
local COOLDOWN_TIME = 1.2 -- seconds before player can use abilities again

-- visuals and state flags
local grapplePoint = nil -- where the player is grappling to
local isGrappling = false -- prevents multiple grapples at once
local isClimbing = false -- prevents multiple climbs at once
local beam = nil -- the rope visual effect
local attachments = {} -- holds the beam connection points

-- ui setup for cooldown bar
local ui = Instance.new(""ScreenGui"") -- container for all ui elements
ui.Name = ""GrappleUI"" -- name it so we can find it later
ui.ResetOnSpawn = false -- keep ui when player dies
ui.Parent = player:WaitForChild(""PlayerGui"") -- put it where player can see it

local cooldownBar = Instance.new(""Frame"") -- background of cooldown timer
cooldownBar.Size = UDim2.new(0, 100, 0, 6) -- small horizontal bar
cooldownBar.Position = UDim2.new(0.5, -50, 0.95, 0) -- bottom center of screen
cooldownBar.BackgroundColor3 = Color3.fromRGB(60, 180, 255) -- blue color
cooldownBar.BorderSizePixel = 0 -- no ugly border
cooldownBar.Visible = false -- hide until cooldown starts
cooldownBar.Parent = ui -- add to screen

local cooldownFill = Instance.new(""Frame"") -- white part that shrinks
cooldownFill.Size = UDim2.new(1, 0, 1, 0) -- fills whole bar at start
cooldownFill.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- white color
cooldownFill.BorderSizePixel = 0 -- no border
cooldownFill.Parent = cooldownBar -- put inside cooldown bar

-- buttons for mobile users
if UserInputService.TouchEnabled then -- only make buttons on phones/tablets
	local grappleButton = Instance.new(""TextButton"") -- button to grapple
	grappleButton.Size = UDim2.new(0, 100, 0, 40) -- decent size for fingers
	grappleButton.Position = UDim2.new(1, -110, 1, -100) -- bottom right corner
	grappleButton.Text = ""Grapple"" -- what it says
	grappleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 255) -- blue like grapple
	grappleButton.TextColor3 = Color3.new(1, 1, 1) -- white text
	grappleButton.Font = Enum.Font.SourceSansBold -- readable font
	grappleButton.TextSize = 20 -- big enough to read
	grappleButton.Parent = ui -- add to screen

	local climbButton = Instance.new(""TextButton"") -- button to climb
	climbButton.Size = UDim2.new(0, 100, 0, 40) -- same size as grapple
	climbButton.Position = UDim2.new(1, -110, 1, -150) -- above grapple button
	climbButton.Text = ""Climb"" -- what it says
	climbButton.BackgroundColor3 = Color3.fromRGB(70, 255, 70) -- green for climb
	climbButton.TextColor3 = Color3.new(1, 1, 1) -- white text
	climbButton.Font = Enum.Font.SourceSansBold -- same font
	climbButton.TextSize = 20 -- same size
	climbButton.Parent = ui -- add to screen

	-- hook up buttons to actions
	grappleButton.MouseButton1Click:Connect(function() -- when button pressed
		fireGrapple() -- do the grapple
	end) -- done connecting

	climbButton.MouseButton1Click:Connect(function() -- when button pressed
		startClimbing() -- do the climb
	end) -- done connecting
end -- done with mobile buttons

-- does the cooldown bar anim
local function showCooldown(duration) -- shows timer after ability use
	cooldownBar.Visible = true -- show the bar
	cooldownFill.Size = UDim2.new(1, 0, 1, 0) -- reset to full size

	local tween = TweenService:Create(cooldownFill, TweenInfo.new(duration), { -- animate shrinking
		Size = UDim2.new(0, 0, 1, 0) -- shrink to nothing
	}) -- tween setup done
	tween:Play() -- start animation
	tween.Completed:Wait() -- wait until done

	cooldownBar.Visible = false -- hide when cooldown over
end -- done with function

-- draws the beam from player to point
local function setupGrappleVisual() -- creates the rope effect
	local a1 = Instance.new(""Attachment"") -- point on player
	a1.Name = ""GrappleStart"" -- name for debugging
	a1.Position = Vector3.zero -- center of player part
	a1.Parent = rootPart -- attach to player

	local a2 = Instance.new(""Attachment"") -- point at target
	a2.Name = ""GrappleEnd"" -- name for debugging
	a2.Parent = workspace.Terrain -- put in world

	local b = Instance.new(""Beam"") -- the rope visual
	b.Attachment0 = a1 -- connect from player
	b.Attachment1 = a2 -- connect to target
	b.Width0 = 0.1 -- thin rope
	b.Width1 = 0.1 -- same width whole way
	b.Color = ColorSequence.new(Color3.fromRGB(200, 200, 255)) -- light blue rope
	b.LightEmission = 1 -- make it glow
	b.FaceCamera = true -- always face player view
	b.Parent = a1 -- attach to start point

	attachments.start = a1 -- save for later
	attachments.end_ = a2 -- save for later
	beam = b -- save beam reference
end -- done with function

-- kills the visual
local function removeGrappleVisual() -- cleans up rope when done
	if beam then beam:Destroy() end -- remove rope if exists
	if attachments.start then attachments.start:Destroy() end -- remove start point if exists
	if attachments.end_ then attachments.end_:Destroy() end -- remove end point if exists
	attachments = {} -- clear saved references
	beam = nil -- clear beam reference
end -- done with function

-- checks if there's a wall in front
local function isNearWall() -- sees if player can climb
	local rayOrigin = rootPart.Position -- start from player center
	local rayDirection = rootPart.CFrame.LookVector * WALL_CHECK_DISTANCE -- check forward direction

	local raycastParams = RaycastParams.new() -- setup ray settings
	raycastParams.FilterDescendantsInstances = {character} -- dont hit yourself
	raycastParams.FilterType = Enum.RaycastFilterType.Exclude -- ignore listed stuff

	local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams) -- shoot the ray
	if result and result.Instance and not result.Instance:IsDescendantOf(character) then -- hit something that isnt player
		return true, result.Position -- yes theres a wall and heres where
	end -- done checking
	return false -- no wall found
end -- done with function

-- handles grapple move step
local function moveTo(position) -- moves player to grapple point
	local direction = (position - rootPart.Position) -- vector from player to target
	local distance = direction.Magnitude -- how far to travel
	local duration = distance / GRAPPLE_SPEED -- time it should take
	local t0 = tick() -- remember start time

	state:set(""Grappling"") -- player is busy grappling
	isGrappling = true -- flag to prevent other actions

	RunService:BindToRenderStep(""GrappleStep"", Enum.RenderPriority.Character.Value + 1, function() -- run every frame
		local dt = tick() - t0 -- how long since start
		if dt >= duration or not grapplePoint then -- reached target or cancelled
			RunService:UnbindFromRenderStep(""GrappleStep"") -- stop moving
			isGrappling = false -- not grappling anymore
			state:set(""Cooldown"") -- start cooldown period
			task.delay(COOLDOWN_TIME, function() -- after cooldown time
				if not isClimbing then -- unless climbing started
					state:set(""Idle"") -- go back to idle
				end -- done checking
			end) -- done with delay
			showCooldown(COOLDOWN_TIME) -- show cooldown visual
			removeGrappleVisual() -- remove rope
			return -- exit this frame
		end -- done checking if finished

		local step = rootPart.CFrame.Position:Lerp(grapplePoint, math.clamp(dt / duration, 0, 1)) -- smooth position between start and end
		local look = (grapplePoint - rootPart.Position).Unit -- direction to look
		rootPart.CFrame = CFrame.new(step, step + look) -- move and rotate player

		if attachments.end_ then -- if rope end exists
			attachments.end_.WorldPosition = grapplePoint -- keep rope connected to target
		end -- done updating rope
	end) -- done with frame function
end -- done with function

-- shoot ray from mouse, see what we hit
function fireGrapple() -- main grapple function
	if isGrappling or isClimbing or state.current ~= ""Idle"" then return end -- cant grapple if busy

	local mousePos = UserInputService:GetMouseLocation() -- where mouse is on screen
	local unitRay = camera:ViewportPointToRay(mousePos.X, mousePos.Y) -- ray from camera through mouse
	local rayOrigin = unitRay.Origin -- where ray starts
	local rayDirection = unitRay.Direction * 1000 -- ray direction times big number for range

	local raycastParams = RaycastParams.new() -- setup ray settings
	raycastParams.FilterDescendantsInstances = {character} -- dont hit yourself
	raycastParams.FilterType = Enum.RaycastFilterType.Exclude -- ignore listed stuff

	local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams) -- shoot ray into world
	if not result or not result.Instance then return end -- didnt hit anything so stop

	grapplePoint = result.Position -- save where we hit
	setupGrappleVisual() -- make the rope
	moveTo(result.Position) -- start moving there
end -- done with function

-- starts climbing if near wall
function startClimbing() -- main climb function
	if isClimbing or isGrappling or state.current ~= ""Idle"" then return end -- cant climb if busy
	local nearWall, wallPos = isNearWall() -- check if wall nearby
	if not nearWall then return end -- no wall so stop

	state:set(""Climbing"") -- player is busy climbing
	isClimbing = true -- flag to prevent other actions
	local climbStart = tick() -- remember when started

	humanoid.PlatformStand = true -- stops normal physics so we control movement
	rootPart.Velocity = Vector3.new(0, 0, 0) -- stop any existing movement

	RunService:BindToRenderStep(""ClimbStep"", Enum.RenderPriority.Character.Value + 2, function() -- run every frame
		local dt = tick() - climbStart -- how long climbing
		if dt > CLIMB_DURATION then -- climbed long enough
			RunService:UnbindFromRenderStep(""ClimbStep"") -- stop climbing movement
			humanoid.PlatformStand = false -- return to normal physics
			isClimbing = false -- not climbing anymore
			state:set(""Cooldown"") -- start cooldown period
			task.delay(COOLDOWN_TIME, function() -- after cooldown time
				if not isGrappling then -- unless grappling started
					state:set(""Idle"") -- go back to idle
				end -- done checking
			end) -- done with delay
			showCooldown(COOLDOWN_TIME) -- show cooldown visual
			return -- exit this frame
		end -- done checking if finished

		local climbSpeed = CLIMB_SPEED * dt -- how much to move up based on time
		local newPos = rootPart.Position + Vector3.new(0, climbSpeed, 0) -- add upward movement
		rootPart.CFrame = CFrame.new(newPos, newPos + rootPart.CFrame.LookVector) -- move up and keep facing same way
	end) -- done with frame function
end -- done with function

-- right click = grapple, left = climb
UserInputService.InputBegan:Connect(function(input, processed) -- when any input happens
	if processed then return end -- game already handled it so ignore
	if input.UserInputType == Enum.UserInputType.MouseButton2 then -- right mouse button
		fireGrapple() -- do grapple
	elseif input.UserInputType == Enum.UserInputType.MouseButton1 then -- left mouse button
		startClimbing() -- do climb
	end -- done checking input
end) -- done connecting input

-- reset stuff on death
humanoid.Died:Connect(function() -- when player dies
	state:set(""Idle"") -- reset state so respawn works right
	isClimbing = false -- clear climb flag
	isGrappling = false -- clear grapple flag
	removeGrappleVisual() -- clean up any rope
end) -- done connecting death

-- rebind stuff when respawn
player.CharacterAdded:Connect(function(char) -- when player respawns
	character = char -- update character reference
	humanoid = char:WaitForChild(""Humanoid"") -- get new humanoid
	rootPart = char:WaitForChild(""HumanoidRootPart"") -- get new root part
	state:set(""Idle"") -- start in idle state
end) -- done connecting respawn

-- keep backpack gui on
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true) -- makes sure inventory stays visible"
0aAdNCbb,hardware-configuration.nix,justin_hanekom,C++,Friday 25th of July 2025 01:09:16 PM CDT,"# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + ""/installer/scan/not-detected.nix"")
    ];

  boot.initrd.availableKernelModules = [ ""xhci_pci"" ""ahci"" ""nvme"" ""usb_storage"" ""sd_mod"" ""sdhci_pci"" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ""kvm-intel"" ];
  boot.extraModulePackages = [ ];

  fileSystems.""/"" =
    { device = ""/dev/disk/by-uuid/f9334361-fe73-4d0d-b6e1-8889db4ad1cf"";
      fsType = ""ext4"";
    };

  fileSystems.""/boot"" =
    { device = ""/dev/disk/by-uuid/0AB1-7782"";
      fsType = ""vfat"";
      options = [ ""fmask=0077"" ""dmask=0077"" ];
    };

  swapDevices =
    [ { device = ""/dev/disk/by-uuid/c4c12eaa-5fc1-4676-8761-84a8474f78de""; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault ""x86_64-linux"";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
"
QrhVAbia,queue,_rashed,C++,Friday 25th of July 2025 01:00:24 PM CDT,"#include <iostream>
#define queue_size 5

using namespace std;

struct queue {
    int rear = -1;
    int front = -1;
    int items[queue_size];
};

void enqueue(struct queue *q, int value) {
    if(q->rear==queue_size-1) {
        cout << ""Queue overflow."";
    }
    else {
        q->rear = q->rear+1;
        q->items[q->rear] = value;
    }
}

int dequeue(struct queue *q) {
    if(q->front == q->rear) {
        cout << ""Queue underflow."";
        return -1;
    }
    else {
        q->front++;
        int value = q->items[q->front];
        return value;
    }
}

int main()
{
    queue myQueue;

    enqueue(&myQueue, 3);
    enqueue(&myQueue, 5);
    enqueue(&myQueue, 9);
    enqueue(&myQueue, 2);

    cout << dequeue(&myQueue) << ""\n"";
    cout << dequeue(&myQueue) << ""\n"";
    cout << dequeue(&myQueue) << ""\n"";
    cout << dequeue(&myQueue) << ""\n"";

    return 0;
}
"
QynFbXsh,Implementacao iMendes,wesdrum,HTML,Friday 25th of July 2025 12:58:08 PM CDT,"<div style=""max-height:720px"">
<div id=""output"" class=""content markdown-body""><h2>Implementação iMendes</h2>
<h3>Cenário</h3>
<p>Produtos quem <b>podem</b> ser isentos, auditados como tributado integralmente.</p>
<h3>Explicação iMendes</h3>
<p>De acordo com o Pedro Rossato, a iMendes utiliza o amparo legal que diz que os produtos questionados são tributados integralmente <code>""ampLegal"": ""''BASE LEGAL: ARTIGO 95, INCISO I, ALINEA \""A\"", DO RICMS/MT.''""</code>.
Entretanto, eles reconhecem que determinados produtos em determinados cenários, podem se valer de um benefício fiscal (por exemplo, a banana produzida internamente), mas para que eles possam retornar uma tributação mais específica ao invés de uma tributação de amparo legal mais ampla, o <code>Regime Especial</code> precisa ser informado. 
<br><em>Infelizmente ele enviou áudio ao invés de texto, mas quem desejar pode me pedir o encaminhamento da mensagem.</em>
<br>
É necessário a ação manual do usuário, pois não há da parte da iMendes, saber se o produto foi adquirido dentro do estado ou não, pois o mesmo produto em uma ocasião pode ser <code>Isento</code> e em outra <code>Tributado Integral</code>.</p>
<blockquote>
<p>E o que é Regime Especial?
<br> Regime Especial, é um identificador criado pela própria iMendes para destacar a necessidade de uma validação específica para o item que será tributado.</p>
</blockquote>
<h3>Implementação Técnica</h3>
<ul>
<li>Foi necessário informar o parametro <code>RegimeEspecial</code> nas requisições.</li>
<li>Foi necessário alterar a forma de envio de produtos, que antes era em lote, e agora passou a ser individual, pois apesar do <code>Regime Especial</code> ser um identificador do produto, eles tratam na API como se fosse um identificador da Empresa. Então quando o <code>Regime Especial</code> é informado no cabeçalho da requisição, <strong>todos</strong> os produtos serão tratados com o Regime informado.</li>
</ul>
<p>Obs: Não foi necessário implementar uma integração com nenhum endpoint novo. A API 2.0 é suficiente para cobrir o cenário (conforme explicado pelo Pedro Rossato ontem)</p>
<h3>Implementação Funcional</h3>
<ul>
<li>Foi necessário adicionar um campo no <code>Cadastro de Produtos</code>, na aba <code>Tributação</code>, no grupo <code>Auditoria</code>, para que o cliente informe os produtos que podem receber algum tipo de benefício fiscal. Neste campo listamos a lista de todos os <code>Regimes Especiais</code> que o Pedro me enviou <a href=""https://hetosoftsistemas-my.sharepoint.com/:x:/g/personal/gestaodesenvolvimento_hetosoft_com_br/EfixLbLCVrJBt7vtYWSYOnYBn0fCwk4BUKEOsxtXyKBseQ?e=3Kx7Ne"">via planilha disponível neste link</a></li>
</ul>
<img src=""https://img001.prntscr.com/file/img001/CCINqQT7TBWrOmejqXwEcA.png"" alt=""Image"" height=""500"" width=""1703"">

<br>
<br>
<br>

<blockquote>
<p>Podemos gravar o identificar automaticamente nos produtos, validando a UF do fornecedor ao dar a entrada de notas?
<br><b>NÃO.</b> Mesmo que façamos tal validação, ainda precisaremos saber qual <code>Regime Especial</code> marcar e em quais produtos marcar, pois a iMendes não valida se o produto realmente é elegível ou não para se valer do benefício fiscal. Sendo assim, se ao fazer uma entrada de notas, marcarmos que os produtos tem um <code>Regime Especial</code> de <code>Produto Interno</code>, por exemplo, por ter sido adquirido internamente, <b>todos</b> os produtos seram auditados como <code>isentos</code>. O que não pode ser feito, pois são produtos específicos que gozam do direito de isenção.
<br>Ainda seria necessário a ação manual do usuário para pelo menos marcar qual produto poderíamos ou não marcar um <code>Regime Especial</code>, e ainda assim, faltaria a informação de <b>QUAL</b> <code>Regime Especial</code> se aplicaria a cada produto</p>
</blockquote>
</div>
</div>"
SaduUh8t,JS,fianyx,JavaScript,Friday 25th of July 2025 12:27:51 PM CDT,"function hasil(kalimat) {
  return Math.max(
    ...kalimat.map(k => k.replace(/[.,]/g, '').split(' ').length)
  );
}

const kalimat = [
  'Mauris ultricies sed sapien eget malesuada. Suspendisse et aliquet odio, id ultrices erat. Praesent vehicula adalah nulla. Aliquam sebuah lorem urna. Selesai.',
  'Duis di tellus et ex bibendum pellentesque sed in nibh. Sed aliquet, diam id mollis facilisis, massa metus accumsan elit, dan mattis magna.',
  'Sed non nibh quam. Pellentesque eget ultrices diam. Aliquam diam justo, consectetur ac dui lobortis, vestibulum bibendum lorem. Hanya porta pulvinar.',
];

console.log(hasil(kalimat)); // Output: 23
"
BpjWWZ0t,min max,bero_0401,C++,Friday 25th of July 2025 12:25:26 PM CDT,"#include ""bits/stdc++.h""
using namespace std;
#define ll long long

int n;
vector<double> x, v;

bool good(double time) {
    double maxf = INT_MIN, mine = INT_MAX;
    for(int i=0; i<n; i++) {
        double left = x[i] - v[i]*time;
        double right = x[i] + v[i]*time;
        maxf = max(maxf, left);
        mine = min(mine, right);
    }
    return mine-maxf >= 0;
}

int main() {

    cin >> n;
    x.resize(n); v.resize(n);
    for(int i=0; i<n; i++) {
        cin >> x[i] >> v[i];
    }
    double l = 0, r = 2 * 1e9;
    for(int i=0; i<100; i++){
        double mid = (l+r)/2;
        if(good(mid)) {
            r = mid;
        } else {
            l = mid;
        }
    }

    cout << setprecision(15) << r << ""\n"";
    return 0;

}"
2dT5xXCR,New Plank System for Story Games,Sungmingamerpro13,CSS,Friday 25th of July 2025 12:04:04 PM CDT,"local plankNumber = script.Parent.PlankNumber
local PlanksModel = script.Parent
local PutPart = PlanksModel.PutPart

local MaxNumber = 10

PutPart.BillboardGui.countLabel.Text = plankNumber.Value..""/""..MaxNumber

PutPart.ProximityPrompt.Triggered:Connect(function(player)

    local plank = player.Character:FindFirstChild(""Plank"") or player.Backpack:FindFirstChild(""Plank"")

    plank.stacks.Value -= 1
    plankNumber.Value += 1
    script.plankSound:Play()

    PutPart.BillboardGui.countLabel.Text = plankNumber.Value..""/""..MaxNumber

    if plankNumber.Value >= 1 then
        PlanksModel.Plank.Transparency = 0
    end

    if plankNumber.Value >= 2 then
        PlanksModel.Plank1.Transparency = 0
    end

    if plankNumber.Value >= 3 then
        PlanksModel.Plank2.Transparency = 0
    end

    if plankNumber.Value >= 4 then
        PlanksModel.Plank3.Transparency = 0
    end

    if plankNumber.Value >= 5 then
        PlanksModel.Plank4.Transparency = 0
    end

    if plankNumber.Value >= 6 then
        PlanksModel.Plank5.Transparency = 0
    end

    if plankNumber.Value >= 7 then
        PlanksModel.Plank6.Transparency = 0
    end

    if plankNumber.Value >= 8 then
        PlanksModel.Plank7.Transparency = 0
    end

    if plankNumber.Value >= 9 then
        PlanksModel.Plank8.Transparency = 0
    end

    if plankNumber.Value >= MaxNumber then
        PlanksModel.Plank9.Transparency = 0
        PutPart.ProximityPrompt.MaxActivationDistance = 0
    end

end)"
mQ1NZ8iU,Obby,MysteriaFool,Lua,Friday 25th of July 2025 11:56:09 AM CDT,"-- Services.
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local Workspace = game:GetService(""Workspace"")
local CollectionService = game:GetService(""CollectionService"")
local RunService = game:GetService(""RunService"")
local TweenService = game:GetService(""TweenService"")

local Obby = {}

function Obby.Leaderstats(player: Player) 
	local leaderstats = Instance.new(""Folder"") 
	leaderstats.Name = ""leaderstats"" 
	leaderstats.Parent = player

	local stage = Instance.new(""NumberValue"") 
	stage.Name = ""Stage"" 
	stage.Value = 1 
	stage.Parent = leaderstats 

	local deaths = Instance.new(""NumberValue"") 
	deaths.Name = ""Deaths"" 
	deaths.Value = 0 
	deaths.Parent = leaderstats 
   
    -- creates a ""folder"" and then names the ""folder > leaderstats""; then assigns it to the “player”; it creates a ""Numbervalue"" in the “leaderstatsfolder”; it names the ""Numbervalue > Stage"" and sets ""value > 1.”
end

function Obby.Respawn(player: Player) 
    local leaderstats = player:FindFirstChild(""leaderstats"") -- if “leaderstats,” then
    if not leaderstats then return end -- end if no ""leaderstats.""

    local Stages = leaderstats:FindFirstChild(""Stage"") -- if “Stages,” then
    if not Stages then return end -- end if no ""Stages.""

    local stage = Stages.Value

    for _, spawn in ipairs(CollectionService:GetTagged(""CheckpointSpawn"")) do 
        if spawn:IsA(""SpawnLocation"") and spawn:GetAttribute(""Stage"") == stage then 

            local character = player.Character -- get ""character.""
            if character then -- if “character,” then
                character:PivotTo(spawn.CFrame) 
            end

            break
        end
    end
	-- this script gets the player’s current “stage”; loops through all the ""spawnlocations"" tagged as ""CheckpointSpawn"" with ""Collectionservice""; if the spawn location's ""stage"" matches the player’s current “stage“; it teleports the player to that “spawnlocation.”
end

function Obby.Death(player: Player, character: Model)  
	local deathMessages = { -- This is the list of ""messages"" that can ""appear"" when the player ""dies.""
	""You Died."",
	""Better luck next time."",
	""That's unlucky."",
	""Oops!"",
	""Try again!"",
	""Not like this..."",
	""Close one!"",
	""One more time!"",
   }

    local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- if “humanoid,” then
    if not humanoid then return end -- end if no ""humanoid.""

    humanoid.Died:Connect(function()
        local leaderstats = player:FindFirstChild(""leaderstats"") -- if “leaderstats,” then
        if not leaderstats then return end -- end if no ""leaderstats.""
        
        local deaths = leaderstats:FindFirstChild(""Deaths"") -- if “deaths,” then
		if not deaths then return end -- end if no ""deaths.""

        if deaths then -- if “leaderstats,” then
            deaths.Value += 1 -- then increase the deaths by ""1.""
        end

		Obby.ShowUIMessage(player, ""DeathUI"", deathMessages) -- Shows a ""random"" UI Message when the player ""dies.""
    end)
	-- when a player dies the ""humanoid.died"" event is called; it increases the value of the player's ""deaths""; it also shows a ""UI"" message.
end

function Obby.Portal(portal: BasePart, destination: BasePart) 
	portal.Touched:Connect(function(other)
		local char = other.Parent -- if “character,” then
		if not char:FindFirstChildOfClass(""Humanoid"") then return end -- end if no “humanoid.”

		local root = char:FindFirstChild(""HumanoidRootPart"") -- get “HumanoidRootPart.”
		if root then -- if “root,” then.
			root.CFrame = destination * CFrame.new(0, 3, 0) -- Teleports the player to the desired “destination.”
		end
	end)
	-- adds a ""touched.event"" to the “portal” when the player touches the “portal”; it teleports the player to the “destination.”
end

function Obby.Checkpoints() 
	local spawns = CollectionService:GetTagged(""CheckpointSpawn"") -- Get all parts tagged with ""CheckpointSpawn"" using “CollectionService.”

	for _, spawn in ipairs(spawns) do -- Loop through each “checkpoint.”
		spawn.Touched:Connect(function(otherPart: BasePart) 
			local character = otherPart.Parent -- if “character,” then
			if not character or not character:IsA(""Model"") then return end -- end if no ""character.""

			local player = Players:GetPlayerFromCharacter(character) -- if “player,” then
			if not player then return end -- end if no ""player.""

			local spawnTime = character:GetAttribute(""SpawnTime"") -- “debounce.”
			if spawnTime and tick() - spawnTime < 2 then return end 

			local leaderstats = player:FindFirstChild(""leaderstats"") -- if “leaderstats,” then
			if not leaderstats then return end -- end if no ""leaderstats.""

			local stageValue = leaderstats:FindFirstChild(""Stage"") -- if “stagevalue,” then
			if not stageValue then return end -- end if no ""stagevalue"".

			local newStage = tonumber(spawn:GetAttribute(""Stage"")) 
			if newStage and newStage > stageValue.Value then 
				stageValue.Value = newStage
				Obby.ShowUIMessage(player, ""CheckpointUI"")
			end
		end)
	end
	-- when a player touches a “checkpoint""; it checks if the player is ahead of the current “stage”; it updates the player’s stage and displays a ”UI"" message.
end

function Obby.KillParts()  
    local killParts = CollectionService:GetTagged(""Kill"") -- get all parts tagged with ""Kill"" using “CollectionService.”
    
    for _, part in ipairs(killParts) do -- loop through each tagged as “Kill.”

        part.Touched:Connect(function(otherPart: BasePart)
            local character = otherPart.Parent -- if “character,” then
			if not character then return end -- end if no “character.”
            if character and character:IsA(""Model"") then 
                local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- if “humanoid,” then
                if humanoid and humanoid.Health > 0 then -- if ""humanoid"" and “alive,” then
                    humanoid:TakeDamage(100)
                end
            end
        end)
    end
	-- gets all the parts that have the tag “Kill” using ""CollectionService""; then it loops through each part that has the tag “Kill”; then it adds a ""touched.event"" to every part that has the tag “Kill”; if a player touches a part that has the tag “Kill""; it does damage to the player's “humanoid.”
end

function Obby.FakePlatforms() 
	local fakePlatforms = CollectionService:GetTagged(""FakePlatform"") -- get all parts tagged with ""FakePlatform"" using “CollectionService”.

	for _, part in ipairs(fakePlatforms) do -- loop through each “fakePlatform.”

			part.Touched:Connect(function(otherPart)

				if part:GetAttribute(""IsFalling"") then return end -- ""debounce""

				local character = otherPart.Parent -- get ”character.”
				if not character or not character:IsA(""Model"") then return end -- end if no ""character.""

				local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- get ”humanoid.”
				if not humanoid or humanoid.Health <= 0 then return end -- end if no ""humanoid.""

				part:SetAttribute(""IsFalling"", true) -- ""debounce""

				part.Transparency = 1 
				part.CanCollide = false

				local resetTime = part:GetAttribute(""ResetTime"") or 3
				task.wait(resetTime) 

				part.Transparency = 0.35 
				part.CanCollide = true 

				part:SetAttribute(""IsFalling"", false)
			end)
		end
		-- gets all the parts that have the tag ""FakePlatform"" using ""CollectionService""; it loops through each part that has the tag “FakePlatform”; it adds a ""touched.event"" to every part that has the tag “FakePlatform”; if a player touches the part that has the tag “FakePlatform”; it makes the part invisible and non-collidable for a certain amount of time; then it resets the part to its original state.
end

function Obby.MovingPlatform()
	local movingPlatforms = CollectionService:GetTagged(""MovingPlatform"") -- get all parts tagged with ""MovingPlatform"" using “CollectionService.”

	for _, platform in ipairs(movingPlatforms) do -- loop through each ”movingPlatforms.”

		local targetPosition = platform:GetAttribute(""TargetPosition"") -- get ”TargetPosition.”
		if not targetPosition then return end -- end if no ""targetPosition.""

		local moveTime = platform:GetAttribute(""MoveTime"") or 3

		local endPos = Vector3.new(targetPosition.X, targetPosition.Y, targetPosition.Z) 
		local tweenInfo = TweenInfo.new(moveTime, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true) 
		local tween = TweenService:Create(platform, tweenInfo, {Position = endPos})
		tween:Play()
	end
	-- gets all the parts that have the tag ""MovingPlatform"" using ""CollectionService""; it loops through each part that has the tag “MovingPlatform”; it gets the target position and move time from the part's attributes; it creates a tween to move the platform to the target position and plays it in a loop. 
end

function Obby.ColorChangingPlatform()
    local ColorChangingPlatforms = CollectionService:GetTagged(""ColorChanging"") -- get all parts tagged with ""ColorChanging"" using “CollectionService.”

    for _, platform in ipairs(ColorChangingPlatforms) do -- loop through each ""ColorChangingPlatform.""
        local originalColor = platform.Color

        local redDuration = platform:GetAttribute(""RedDuration"") or 2 
        local originalDuration = platform:GetAttribute(""OriginalDuration"") or 2 
        
        local function ChangeColor() 
            while true do
                platform.Color = Color3.fromRGB(255, 0, 0) 
                task.wait(redDuration) 
                
                platform.Color = originalColor 
                task.wait(originalDuration) 
            end
        end

        task.spawn(ChangeColor) 

        platform.Touched:Connect(function(otherPart) 
            local character = otherPart.Parent -- if “character,” then
            if not character or not character:IsA(""Model"") then return end -- end if no ""character.""

            local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- if “humanoid,” then
            if not humanoid or humanoid.Health <= 0 then return end -- end if no ""humanoid.""

            if platform.Color == Color3.fromRGB(255, 0, 0) then
                humanoid:TakeDamage(100) 
            end
        end)
    end
	-- gets all the parts that have the tag ""ColorChanging"" using ""CollectionService""; it loops through each part that has the tag “ColorChanging”; it changes the color of the platform to red for a certain duration and then back to its original color; it also adds a ""touched.event"" to the platform that damages the player if they touch it while it's red.
end

function Obby.ShowUIMessage(player, guiName, messages)
	local playerGui = player:FindFirstChildOfClass(""PlayerGui"") -- if “playerGui,” then
	if not playerGui then return end -- end if no ""playerGui.""

	local ui = playerGui:FindFirstChild(guiName) or (ReplicatedStorage:FindFirstChild(guiName) and ReplicatedStorage[guiName]:Clone()) -- if “ui,” then
	if not ui then return end -- end if no ""ui.""

	ui.Parent = playerGui 

	local label = ui:FindFirstChildOfClass(""TextLabel"") -- if “label,” then
	if not label then return end -- end if no ""label.""

	if messages and #messages > 0 then -- if “messages,” then
		label.Text = messages[math.random(1, #messages)] 
	end

	label.Visible = true 
	label.TextTransparency = 1 
	for i = 0, 1, 0.1 do 
		label.TextTransparency = 1 - i
		task.wait(0.03)
	end

	task.wait(1.5) 

	for i = 0, 1, 0.1 do 
		label.TextTransparency = i
		task.wait(0.03)
	end

	label.Visible = false

	-- gets the player's ""PlayerGui""; if the player doesn't have a ""PlayerGui,"" it returns; it checks if the UI exists in the player's ""PlayerGui"" or clones it from ""ReplicatedStorage""; it sets the UI's parent to the player's ""PlayerGui""; it finds a ""TextLabel"" in the UI; if it doesn't find a ""TextLabel,"" it returns; it sets the text of the label to a random message from the provided messages; it fades in the label, waits for 1.5 seconds, and then fades it out.
end

return Obby"
r25LYJXZ,Lua Webhook Sender DISCORD,Dirsks,Lua,Friday 25th of July 2025 11:08:08 AM CDT,"_G.web = {
    Webhook = """"
    Message = """"
    Embed = {
    [""title""] = """",
    [""description""] = """",
    [""color""] = 65280,
    [""fields""] = {
        {
            [""name""] = """",
            [""value""] = """"
        },
        {
            [""name""] = """",
            [""value""] = """"
        }
    },
    [""footer""] = {
        [""text""] = """"
    }
}
}

loadstring(game:HttpGet(""https://pastebin.com/raw/WZA5v4nf""))()"
WZA5v4nf,webhook sender test.,Dirsks,Lua,Friday 25th of July 2025 11:05:24 AM CDT,"local Players = game:GetService(""Players"")
local StarterGui = game:GetService(""StarterGui"")
local HttpService = game:GetService(""HttpService"")

_G.web = _G.web or {
	Webhook = """",
	Message = """",
	embed = {
		[""title""] = """",
		[""description""] = """",
		[""color""] = 65280,
		[""fields""] = {
			{ [""name""] = """", [""value""] = """" },
			{ [""name""] = """", [""value""] = """" }
		},
		[""footer""] = {
			[""text""] = """"
		}
	}
}

local uid = Players:GetUserIdFromNameAsync(""kavao"")
local thumbType = Enum.ThumbnailType.HeadShot
local thumbSize = Enum.ThumbnailSize.Size420x420
local content, isReady = Players:GetUserThumbnailAsync(uid, thumbType, thumbSize)

function SendMessage()
	local headers = {
		[""Content-Type""] = ""application/json""
	}
	local data = {
		[""content""] = _G.web.Message
	}
	local body = HttpService:JSONEncode(data)
	local response = request({
		Url = _G.web.Webhook,
		Method = ""POST"",
		Headers = headers,
		Body = body
	})
	StarterGui:SetCore(""SendNotification"", {
		Title = response,
		Icon = content,
		Duration = 5
	})
end

function SendMessageEMBED()
	local headers = {
		[""Content-Type""] = ""application/json""
	}
	local data = {
		[""embeds""] = {
			{
				[""title""] = _G.web.embed.title,
				[""description""] = _G.web.embed.description,
				[""color""] = _G.web.embed.color,
				[""fields""] = _G.web.embed.fields,
				[""footer""] = {
					[""text""] = _G.web.embed.footer.text
				}
			}
		}
	}
	local body = HttpService:JSONEncode(data)
	local response = request({
		Url = _G.web.Webhook,
		Method = ""POST"",
		Headers = headers,
		Body = body
	})
	StarterGui:SetCore(""SendNotification"", {
		Title = response,
		Icon = content,
		Duration = 5
	})
end

if _G.web.Webhook == nil or _G.web.Webhook == """" then
	StarterGui:SetCore(""SendNotification"", {
		Title = ""500 - HTTP Error"",
		Text = ""Discord Webhook not set. Change it on _G.web.Webhook!"",
		Icon = content,
		Duration = 5
	})
	return
end

if _G.web.Message ~= """" then
	SendMessage()
end

if _G.web.Embed and type(_G.web.Embed) == ""table"" then
	SendMessageEMBED()
end"
fJi3xdHQ,tdhj,Wood_Chair,JavaScript,Friday 25th of July 2025 09:29:39 AM CDT,"G.AddData({
name:'coolgoodepic mod',
author:'Me',
desc:'A Mod',
engineVersion:1,
manifest:'modManifest.js',
requires:['Default dataset*'],
sheets:{'spicyShet':'https://orteil.dashnet.org/legacy/img/spicyModIconSheet.png'}
func:function()
{
	new G.Tech({
		name:'tent making',
		desc:'@unlocks to make them.<>The late-game housing solution of your dreams!',
		icon:[0,1,'spicyShet'],
		cost:{'insight':10},
		req:{'sedentism':true},
		effects:[
		],
	});
}
});"
hMVwXC88,"BinaryNinja 5.1.8005 (Jul 25, 2025)",Timmon,JSON,Friday 25th of July 2025 09:19:06 AM CDT,"{
  ""version"": ""5.1.8005"",
  ""hashes"": {
    ""binaryninja_macosx_stable_commercial.dmg"": ""47c7249172fda7fd7417c475ff7203f8a77e047690df3a86cb0f55569ef6b509"",
    ""binaryninja_macosx_stable_ultimate.dmg"": ""d8ac398c353f9d0aa4a08e3df1dfd94d5f250bfbbacd15d6e29fc6c367d953bb"",
    ""binaryninja_linux_stable_personal.zip"": ""f2e4b2e6977c895a2285c89ca666c9e19349630ca8960bfddd5c466ff199ea2f"",
    ""binaryninja_linux-arm_stable_commercial.zip"": ""0394ba13aaa07f8bee4516d84910f2b167fffddd478dce3fb831e2599057e355"",
    ""binaryninja_linux-arm_stable_ultimate.zip"": ""351c8aca85e8622670f8e2a1ccc5d115bc5226cdf7a3bd50ac4545c2c0ec5904"",
    ""binaryninja_free_win64.exe"": ""d79efccf275ed819c53ad1d8527f6aa2dc47aea4f3db0c47af0f65aaeb7eebfa"",
    ""binaryninja_free_linux.zip"": ""bd74744d7710c04a18cf5aa218edd361a8d4b7e411f707d5d1eb3ac9366f60bb"",
    ""binaryninja_linux_stable_headless.zip"": ""bbbe5f9496d13f801513ffc03497601705ca079fda1734f4e1ab67fee5889493"",
    ""binaryninja_win64_stable_ultimate.exe"": ""db023cf80e36878c8e8c5aa55384c1ef5c456838704bec20eaccad13458ffdc5"",
    ""binaryninja_free_macosx.dmg"": ""eda1b6b087a7ce0331fa5574395afdcc157d1cebac3f336e0cbd34dd522d7716"",
    ""binaryninja_win64_stable_commercial.exe"": ""166aac852f1acc691b2455f2389cbae4eb1fdd30be6da330bbc4fb8261221ff3"",
    ""binaryninja_macosx_stable_personal.dmg"": ""408beaac34294973421ec75ae6fc24ffcd237a7a64ff2afbf7b5f22c40816dba"",
    ""binaryninja_linux_stable_commercial.zip"": ""e4aceb8d06512fa6b9a19d2b3a0d1f9d9bdd36042231a010519e9a7764ff6aef"",
    ""binaryninja_linux_stable_ultimate.zip"": ""6026486d33c4e7a9cba4a55115e974306ecc4625a5eb89e458217510efea8e20"",
    ""binaryninja_linux-arm_stable_personal.zip"": ""53b335ae07d6de76a0f796038136508bc7d334eed25f2134124fdcc45e48216e"",
    ""binaryninja_win64_stable_personal.exe"": ""5f4c10ab04474192764fd39b6309bcdb74bf31ad3f1fb488c0e14463ba975be4"",
    ""binaryninja_free_linux-arm.zip"": ""6201fb3e4287444be9faff8bafba6d1a8010bc2917bf28f83f583a227c647799""
  }
}"
NgaaKTg4,Homework46,JohnJuly,C#,Friday 25th of July 2025 09:10:03 AM CDT,"using System;
using System.Collections.Generic;

namespace Homework46
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Supermarket supermarket = new Supermarket();
            supermarket.Run();
        }
    }

    class Supermarket
    {
        private Queue<Customer> _queue;
        private List<Product> _products; 

        public Supermarket()
        {
            _products = new List<Product>() 
            {
                new Product(""Молоко"", 50),
                new Product(""Кефир"", 60),
                new Product(""Колбаса"", 300),
                new Product(""Сосиски"", 200),
                new Product(""Сыр"", 400),
                new Product(""Пиво"", 100),
                new Product(""Сок"", 80),
                new Product(""Газировка"", 70),
                new Product(""Печенье"", 150),
                new Product(""Хлеб"", 40),
                new Product(""Йогурт"", 75),
                new Product(""Сметана"", 90),
                new Product(""Пельмени"", 250)
            };

            int minimalQueueSize = 10;
            int maximalQueueSize = 50;

            Money = 0;
            _queue = new Queue<Customer>();

            int queueSize = Utility.GetRandomNumber(maximalQueueSize, minimalQueueSize);

            for (int i = 0; i < queueSize; i++)
            {
                _queue.Enqueue(new Customer(_products)); 
            }
        }

        public int Money { get; private set; }
        public int QueueSize => _queue.Count;  

        public void Run()
        {
            const string CommandServeClient = ""serve"";
            const string CommandAddClientInQueue = ""add"";
            const string CommandShowMoney = ""money"";
            const string CommandExit = ""exit"";

            bool continueAdministering = true;

            while (continueAdministering)
            {
                Console.Clear();
                Console.WriteLine(""=== Панель управления супермаркетом ==="");
                Console.WriteLine($""1.Введите `{CommandServeClient}` чтобы обслужить следующего клиента (в очереди {QueueSize} человек)"");
                Console.WriteLine($""2.Введите `{CommandAddClientInQueue}` чтобы добавить нового клиента в очередь"");
                Console.WriteLine($""3.Введите `{CommandShowMoney}` чтобы показать состояние кассы (в кассе {Money} рублей)"");
                Console.WriteLine($""4.Введите `{CommandExit}` чтобы выйти из программы"");

                Console.Write(""Выберите действие: "");

                string choice = Console.ReadLine();

                switch (choice)
                {
                    case CommandServeClient:
                        HandleServeClient();
                        break;

                    case CommandAddClientInQueue:
                        HandleAddClient();
                        break;

                    case CommandShowMoney:
                        HandleShowMoney();
                        break;

                    case CommandExit:
                        Console.WriteLine(""Завершение работы..."");
                        continueAdministering = false;
                        break;

                    default:
                        HandleInvalidInput();
                        break;
                }
            }
        }

        private void HandleServeClient()
        {
            if (QueueSize > 0)
            {
                Customer nextCustomer = GetNextCustomer();

                if (nextCustomer != null)
                {
                    Console.WriteLine($""Обслуживается клиент номер {nextCustomer.Number}, у него {nextCustomer.Money} рублей."");
                    ServeCustomer(nextCustomer);
                }
                else
                {
                    Console.WriteLine(""Произошла ошибка при получении следующего клиента."");
                }
            }
            else
            {
                Console.WriteLine(""Очередь пуста!"");
            }

            Utility.PressAnyKeyToContinue();
        }

        private void HandleAddClient()
        {
            AddCustomer(new Customer(_products));
            Console.WriteLine(""Новый клиент добавлен в очередь."");
            Utility.PressAnyKeyToContinue();
        }

        private void HandleShowMoney()
        {
            Console.WriteLine($""В кассе {Money} рублей."");
            Utility.PressAnyKeyToContinue();
        } 

        private void HandleInvalidInput()
        {
            Console.WriteLine(""Некорректный ввод. Попробуйте еще раз."");
            Utility.PressAnyKeyToContinue();
        }

        private void ServeCustomer(Customer customer)
        {
            if (customer == null)
                return;

            Console.WriteLine($""Клиент номер {customer.Number}, у него {customer.Money} рублей."");
            Console.WriteLine(""Корзина клиента:"");

            foreach (var product in customer.Cart) 
            {
                Console.WriteLine($""  - {product.Name}, Цена: {product.Price} рублей"");
            }

            int totalSum = customer.CalculateCartTotal();
            Console.WriteLine($""Итоговая сумма: {totalSum} рублей"");

            if (customer.TryBuy(out int amountToPay))
            {
                Money += amountToPay; 
                Console.WriteLine($""Клиент успешно оплатил покупки."");
            }
            else
            {
                Console.WriteLine($""Клиент не смог оплатить все товары."");
            }

            Console.WriteLine($""Клиент купил:"");

            foreach (var product in customer.ShoppingBag) 
            {
                Console.WriteLine($""  - {product.Name}, Цена: {product.Price} рублей"");
            }

            Console.WriteLine($""У клиента осталось {customer.Money} рублей."");
        }

        private Customer GetNextCustomer()
        {
            if (_queue.Count == 0)
            {
                return null;
            }

            return _queue.Dequeue();
        }

        private void AddCustomer(Customer customer)
        {
            _queue.Enqueue(customer);
        }
    }

    class Customer
    {
        private static int s_number = 0; 
        private List<Product> _cart;
        private List<Product> _shoppingBag;

        public Customer(List<Product> availableProducts) 
        {
            int minimalMoney = 200;
            int maximalMoney = 6000;

            Money = Utility.GetRandomNumber(maximalMoney, minimalMoney);
            Number = ++s_number;
            _cart = new List<Product>();
            _shoppingBag = new List<Product>();

            FillCart(availableProducts);
        }

        public int Money { get; private set; }
        public int Number { get; private set; }

        public List<Product> Cart => new List<Product>(_cart);
        public List<Product> ShoppingBag => new List<Product>(_shoppingBag);

        public int CalculateCartTotal()
        {
            int total = 0;

            foreach (Product product in _cart)
            {
                total += product.Price;
            }

            return total;
        }

        public bool TryBuy(out int amountToPay)
        {
            amountToPay = 0;
            int sum = CalculateCartTotal();

            if (!CanPurchase(sum))
            {
                return false;
            }

            amountToPay = sum;
            PayForProducts(sum);

            return true;
        }

        private bool CanPurchase(int sum)
        {
            if (Money < sum)
            {
                List<Product> productsToRemove = new List<Product>();

                while (Money < sum && _cart.Count > 0)
                {
                    int deletedProductIndex = Utility.GetRandomNumber(_cart.Count - 1, 0);
                    Product productToRemove = _cart[deletedProductIndex];
                    Console.WriteLine($""У клиента недостаточно средств."" +
                        $"" Он откладывает {productToRemove.Name} по цене {productToRemove.Price} рублей."");

                    sum -= productToRemove.Price;
                    productsToRemove.Add(productToRemove);
                }

                foreach (Product product in productsToRemove)
                {
                    _cart.Remove(product);
                }

                if (Money < sum)
                {
                    Console.WriteLine(""Клиент ушел, ничего не купив."");
                    _cart.Clear();

                    return false;
                }
            }

            return true;
        }

        private void PayForProducts(int sum)
        {
            Money -= sum;
            Console.WriteLine($""Клиент отдает {sum} рублей под рассчет и складывает купленные продукты в пакет."");

            foreach (var product in _cart)
            {
                _shoppingBag.Add(product);
            }

            _cart.Clear();
        }

        private void FillCart(List<Product> availableProducts)
        {
            int minimalProductNumber = 2;
            int maximalProductNumber = 19;
            int productNumber = Utility.GetRandomNumber(maximalProductNumber, minimalProductNumber);

            for (int i = 0; i < productNumber; i++)
            {
                _cart.Add(availableProducts[Utility.GetRandomNumber(availableProducts.Count - 1, 0)]);
            }
        }
    }

    class Product
    {
        public Product(string name, int price)  
        {
            Name = name;
            Price = price;
        }

        public int Price { get; private set; }
        public string Name { get; private set; }
    }

    public static class Utility
    {
        private static Random _random = new Random();

        public static int GetRandomNumber(int maximalNumber, int minimalNumber = 0)
        {
            if (minimalNumber > maximalNumber)
            {
                throw new ArgumentException(""Минимальное число должно быть меньше максимального."");
            }

            return _random.Next(minimalNumber, maximalNumber + 1);
        }

        public static void PressAnyKeyToContinue()
        {
            Console.WriteLine(""\nНажмите любую кнопку чтобы продолжить."");
            Console.ReadKey(true);
        }
    }
}"
FWXWEsYj,считывание вектора,nq1s788,C++,Friday 25th of July 2025 09:07:45 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <deque>
#include <map>
#include <cmath>

#define se second
#define fi first
#define mp make_pair
#define pb push_back

typedef long long ll;
typedef long double ld;

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> a;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        a.push_back(x);
    }

    int m;
    cin >> m;
    vector<int> b(m);
    for (int i = 0; i < m; i++) {
        cin >> b[i];
    }

    int k;
    cin >> k;
    vector<int> c(k);
    for (auto& e : c) cin >> e;
    return 0;
}

"
K3usvMzp,проверка на двудольность,nq1s788,C++,Friday 25th of July 2025 09:07:05 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <deque>
#include <map>
#include <cmath>

#define se second
#define fi first
#define mp make_pair
#define pb push_back

typedef long long ll;
typedef long double ld;

using namespace std;

vector<vector<int>> g;
vector<bool> used;
vector<int> col;
vector<int> answ;

bool dfs(int h, int next_col) {
    used[h] = true;
    col[h] = next_col;
    if (next_col == 0) answ.push_back(h + 1);
    for (auto e : g[h]) {
        if (col[e] == next_col) return false;
        if (!used[e]) dfs(e, next_col ^ 1);
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    //vector<vector<int>> g(n, vector<int>(n, 0)); если бы объявляли локально
    g.assign(n, vector<int>(n, 0));
    used.assign(n, false);
    while (m--) {
        int a, b;
        cin >> a >> b;
        a--, b--;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    col.assign(n, -1);
    dfs(0, 0);
    cout << (int)answ.size() << '\n';
    for (auto e : answ) cout << e << ' ';
    return 0;
}

"
EHCQ4BqD,mtk-update,Juniordss,XML,Friday 25th of July 2025 09:04:58 AM CDT,"<https://htmlpreview.github.io/?https://pastebin.com/raw/EHCQ4BqD>
<!DOCTYPE html>
<html lang=""pt-br"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Atualização de Firmware Mediatek no FydeOS</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f3f9f7;
            color: #333;
        }
        header {
            background-color: #3e8e41;
            color: white;
            padding: 10px;
            text-align: center;
        }
        .container {
            padding: 20px;
            max-width: 900px;
            margin: auto;
        }
        .button-container {
            text-align: center;
            margin-bottom: 20px;
        }
        .button-container button {
            background-color: #3e8e41;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 4px;
            margin: 0 5px;
        }
        .button-container button:hover {
            background-color: #45a049;
        }
        h2 {
            font-size: 1.5rem;
            color: #444;
        }
        .step {
            margin-bottom: 20px;
        }
        .code-block {
            position: relative;
            margin: 10px 0;
        }
        pre {
            background-color: #eee;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: monospace;
        }
        .copy-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: #3e8e41;
            color: white;
            border: none;
            padding: 5px 10px;
            font-size: 0.8rem;
            border-radius: 4px;
            cursor: pointer;
        }
        .copy-btn:hover {
            background: #45a049;
        }
        a.download-link {
            color: #3e8e41;
            text-decoration: none;
            font-weight: bold;
        }
        a.download-link:hover {
            text-decoration: underline;
        }
        footer {
            background-color: #3e8e41;
            color: white;
            text-align: center;
            padding: 10px;
            position: fixed;
            width: 100%;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        footer img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 2px solid white;
        }
        img {
            width: 100%;
            max-width: 600px;
            border: 1px solid #ccc;
            margin: 10px 0;
        }
        .alert {
            background-color: #ffe9b3;
            padding: 10px;
            border-left: 5px solid #ffa500;
            margin-bottom: 20px;
            border-radius: 5px;
        }
    </style>
</head>
<body>

<header>
    <h1>Atualização de Firmware Mediatek no FydeOS</h1>
</header>

<div class=""container"">
    <div class=""button-container"">
        <button onclick=""changeLanguage('pt')"">Português</button>
        <button onclick=""changeLanguage('en')"">English</button>
    </div>

    <!-- Português -->
    <div id=""pt"">
        <div class=""alert"">
            <b>Resumo:</b> Se o Wi-Fi não aparece no FydeOS, é provável que a placa <b>Mediatek MT7921</b> não tenha drivers instalados. Este guia mostra como adicionar o firmware correto.
        </div>
        <img src=""https://i.postimg.cc/L8H2zpB8/wifi-list.png"" alt=""Exemplo de lista de redes Wi-Fi não aparecendo no FydeOS"">
        <h2>Passos para Atualizar o Firmware</h2>
        <div class=""step"">
            <h3>1. Ativar o Modo Desenvolvedor</h3>
            <p>Para começar, ative o modo desenvolvedor e reinicie o sistema.</p>
            <img src=""https://i.postimg.cc/zf7NdP7F/fydeos-settings.png"" alt=""Ativar modo desenvolvedor no FydeOS"">
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>Ctrl + Alt + T -> Abrir o terminal</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>shell</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo -i</pre></div>
        </div>
        <div class=""step"">
            <h3>2. Desabilitar a Verificação de Sistema</h3>
            <p>Desabilite a verificação do sistema para permitir modificações no firmware:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>/usr/sbin/crossystem_mode-switch.sh disable-rootfs-verification</pre></div>
        </div>
        <div class=""step"">
            <h3>3. Remontar o Sistema de Arquivos</h3>
            <p>Remonte o sistema de arquivos com permissão de leitura e escrita:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo mount -o remount,rw /</pre></div>
        </div>
        <div class=""step"">
            <h3>4. Baixar e Copiar os Arquivos de Firmware</h3>
            <p>Baixe os arquivos de firmware Mediatek no repositório oficial:</p>
            <p><a href=""https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/mediatek"" class=""download-link"" target=""_blank"">Acessar repositório de firmware Mediatek</a></p>
            <p>Exemplo de arquivos:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>WIFI_MT7961_patch_mcu_1_2_hdr.bin</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>WIFI_RAM_CODE_MT7961_1.bin</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>BT_RAM_CODE_MT7961_1_2_hdr.bin</pre></div>
            <p>Entre na pasta onde estão os arquivos baixados:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>cd /home/chronos/user/MyFiles/Downloads</pre></div>
            <p>Copie os arquivos para o diretório <code>/lib/firmware/mediatek</code>:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo cp WIFI_MT7961_patch_mcu_1_2_hdr.bin /lib/firmware/mediatek</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo cp WIFI_RAM_CODE_MT7961_1.bin /lib/firmware/mediatek</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo cp BT_RAM_CODE_MT7961_1_2_hdr.bin /lib/firmware/mediatek</pre></div>
            <img src=""https://i.postimg.cc/JnRn0k6P/files-folder.png"" alt=""Arquivos na pasta Downloads"">
        </div>
        <div class=""step"">
            <h3>5. Ajustar Permissões</h3>
            <p>Ajuste as permissões dos arquivos para garantir o acesso correto:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo chown root:root /lib/firmware/mediatek/*</pre></div>
        </div>
        <div class=""step"">
            <h3>6. Reiniciar o Sistema</h3>
            <p>Reinicie o sistema para aplicar as alterações:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copiar</button><pre>sudo reboot</pre></div>
            <img src=""https://i.postimg.cc/fLHwbg0R/ethernet-connected.png"" alt=""Rede conectada"">
        </div>
    </div>

    <!-- English -->
    <div id=""en"" style=""display:none;"">
        <div class=""alert"">
            <b>Summary:</b> If Wi-Fi is not detected in FydeOS, your <b>Mediatek MT7921</b> wireless card likely has no drivers installed. This guide shows how to install the proper firmware.
        </div>
        <img src=""https://i.postimg.cc/L8H2zpB8/wifi-list.png"" alt=""Wi-Fi networks not showing on FydeOS"">
        <h2>Steps to Update the Firmware</h2>
        <div class=""step"">
            <h3>1. Enable Developer Mode</h3>
            <p>To begin, enable developer mode and restart the system.</p>
            <img src=""https://i.postimg.cc/zf7NdP7F/fydeos-settings.png"" alt=""Enable developer mode on FydeOS"">
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>Ctrl + Alt + T -> Open the terminal</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>shell</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo -i</pre></div>
        </div>
        <div class=""step"">
            <h3>2. Disable System Verification</h3>
            <p>Disable system verification to allow modifications to the firmware:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>/usr/sbin/crossystem_mode-switch.sh disable-rootfs-verification</pre></div>
        </div>
        <div class=""step"">
            <h3>3. Remount the File System</h3>
            <p>Remount the file system with read and write permissions:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo mount -o remount,rw /</pre></div>
        </div>
        <div class=""step"">
            <h3>4. Download and Copy the Firmware Files</h3>
            <p>Download Mediatek firmware files from the official repository:</p>
            <p><a href=""https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/mediatek"" class=""download-link"" target=""_blank"">Access Mediatek firmware repository</a></p>
            <p>Example files:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>WIFI_MT7961_patch_mcu_1_2_hdr.bin</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>WIFI_RAM_CODE_MT7961_1.bin</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>BT_RAM_CODE_MT7961_1_2_hdr.bin</pre></div>
            <p>Navigate to the folder where the files were downloaded:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>cd /home/chronos/user/MyFiles/Downloads</pre></div>
            <p>Copy the files to the <code>/lib/firmware/mediatek</code> directory:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo cp WIFI_MT7961_patch_mcu_1_2_hdr.bin /lib/firmware/mediatek</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo cp WIFI_RAM_CODE_MT7961_1.bin /lib/firmware/mediatek</pre></div>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo cp BT_RAM_CODE_MT7961_1_2_hdr.bin /lib/firmware/mediatek</pre></div>
            <img src=""https://i.postimg.cc/JnRn0k6P/files-folder.png"" alt=""Firmware files in the Downloads folder"">
        </div>
        <div class=""step"">
            <h3>5. Adjust Permissions</h3>
            <p>Adjust the file permissions to ensure proper access:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo chown root:root /lib/firmware/mediatek/*</pre></div>
        </div>
        <div class=""step"">
            <h3>6. Restart the System</h3>
            <p>Restart the system to apply the changes:</p>
            <div class=""code-block""><button class=""copy-btn"" onclick=""copyCode(this)"">Copy</button><pre>sudo reboot</pre></div>
            <img src=""https://i.postimg.cc/fLHwbg0R/ethernet-connected.png"" alt=""Network connected"">
        </div>
    </div>
</div>

<footer>
    <a href=""https://pastebin.com/u/Juniordss"" target=""_blank"">
        <img src=""https://pastebin.com/cache/img/25/2/20/8453956.jpg"" alt=""Juniordss's profile on Pastebin"">
    </a>
    <p><a href=""https://pastebin.com/u/Juniordss"" target=""_blank"" style=""color: white; text-decoration: none;"">Juniordss's profile on Pastebin</a></p>
</footer>

<script>
    function changeLanguage(lang) {
        document.getElementById('pt').style.display = lang === 'pt' ? 'block' : 'none';
        document.getElementById('en').style.display = lang === 'en' ? 'block' : 'none';
    }

    function copyCode(button) {
        const code = button.nextElementSibling.innerText;
        navigator.clipboard.writeText(code);
        button.innerText = langText(button.innerText);
        setTimeout(() => button.innerText = resetText(), 2000);
    }

    function langText(current) {
        return (document.getElementById('pt').style.display === 'block') ? ""Copiado!"" : ""Copied!"";
    }

    function resetText() {
        return (document.getElementById('pt').style.display === 'block') ? ""Copiar"" : ""Copy"";
    }
</script>

</body>
</html>
"
Hq2iiXGd,Untitled,gadzislaw007,JSON,Friday 25th of July 2025 09:02:02 AM CDT,"{
  ""elements"": [
    {
      ""frame"": 0,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 42,
            ""y"": 135
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 40,
            ""y"": 185.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -1.199
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 107.6,
            ""y"": 141.25
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 84,
            ""y"": 254.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 141,
            ""y"": 253.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 64,
            ""y"": 322.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 172,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 185.35,
            ""y"": 184.15
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 166,
            ""y"": 127
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 1,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 46.75,
            ""y"": 126.95
          },
          ""rotation"": 2.492439068456169,
          ""transformMatrix"": {
            ""a"": 0.999053955078125,
            ""b"": 0.043487548828125,
            ""c"": -0.043487548828125,
            ""d"": 0.999053955078125
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 42.5,
            ""y"": 177.75
          },
          ""rotation"": 2.492439068456169,
          ""transformMatrix"": {
            ""a"": 0.999053955078125,
            ""b"": 0.043487548828125,
            ""c"": -0.043487548828125,
            ""d"": 0.999053955078125
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -2.799
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 107.6,
            ""y"": 138.05
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1.0106658935546875
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 84,
            ""y"": 254.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 141,
            ""y"": 253.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 64,
            ""y"": 322.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 172,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 184.6,
            ""y"": 185.1
          },
          ""rotation"": -1.2258119750313596,
          ""transformMatrix"": {
            ""a"": 0.9997711181640625,
            ""b"": -0.021392822265625,
            ""c"": 0.021392822265625,
            ""d"": 0.9997711181640625
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 164,
            ""y"": 128.35
          },
          ""rotation"": -1.2258119750313596,
          ""transformMatrix"": {
            ""a"": 0.9997711181640625,
            ""b"": -0.021392822265625,
            ""c"": 0.021392822265625,
            ""d"": 0.9997711181640625
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 2,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 50.95,
            ""y"": 116.65
          },
          ""rotation"": 4.707954751783562,
          ""transformMatrix"": {
            ""a"": 0.9966278076171875,
            ""b"": 0.0820770263671875,
            ""c"": -0.0820770263671875,
            ""d"": 0.9966278076171875
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 44.75,
            ""y"": 167.25
          },
          ""rotation"": 4.707954751783562,
          ""transformMatrix"": {
            ""a"": 0.9966278076171875,
            ""b"": 0.0820770263671875,
            ""c"": -0.0820770263671875,
            ""d"": 0.9966278076171875
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -5.199
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 106.05,
            ""y"": 132.45
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.01031494140625,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1.0372772216796875
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 84,
            ""y"": 254.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 141,
            ""y"": 253.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 64,
            ""y"": 322.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 172,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 182.15,
            ""y"": 185.8
          },
          ""rotation"": -3.226870780095569,
          ""transformMatrix"": {
            ""a"": 0.9984130859375,
            ""b"": -0.0562896728515625,
            ""c"": 0.0562896728515625,
            ""d"": 0.9984130859375
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 159.6,
            ""y"": 129.75
          },
          ""rotation"": -3.226870780095569,
          ""transformMatrix"": {
            ""a"": 0.9984130859375,
            ""b"": -0.0562896728515625,
            ""c"": 0.0562896728515625,
            ""d"": 0.9984130859375
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 3,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 54.5,
            ""y"": 110.6
          },
          ""rotation"": 6.191317708190589,
          ""transformMatrix"": {
            ""a"": 0.994171142578125,
            ""b"": 0.10784912109375,
            ""c"": -0.10784912109375,
            ""d"": 0.994171142578125
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 47,
            ""y"": 161.05
          },
          ""rotation"": 6.191317708190589,
          ""transformMatrix"": {
            ""a"": 0.994171142578125,
            ""b"": 0.10784912109375,
            ""c"": -0.10784912109375,
            ""d"": 0.994171142578125
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -6.799
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 103.7,
            ""y"": 130.1
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.0261688232421875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1.047637939453125
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 84,
            ""y"": 254.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 141,
            ""y"": 253.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 64,
            ""y"": 322.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 172,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 178.4,
            ""y"": 187.45
          },
          ""rotation"": -5.177490186737457,
          ""transformMatrix"": {
            ""a"": 0.99591064453125,
            ""b"": -0.090240478515625,
            ""c"": 0.090240478515625,
            ""d"": 0.99591064453125
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 153.95,
            ""y"": 132.15
          },
          ""rotation"": -5.177490186737457,
          ""transformMatrix"": {
            ""a"": 0.99591064453125,
            ""b"": -0.090240478515625,
            ""c"": 0.090240478515625,
            ""d"": 0.99591064453125
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 4,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 22.1,
            ""y"": 166.4
          },
          ""rotation"": -11.940393969654629,
          ""transformMatrix"": {
            ""a"": 0.978363037109375,
            ""b"": -0.2068939208984375,
            ""c"": 0.2068939208984375,
            ""d"": 0.978363037109375
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 30.65,
            ""y"": 216.65
          },
          ""rotation"": -11.940393969654629,
          ""transformMatrix"": {
            ""a"": 0.978363037109375,
            ""b"": -0.2068939208984375,
            ""c"": 0.2068939208984375,
            ""d"": 0.978363037109375
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -7.599
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 107.6,
            ""y"": 134.85
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 92.95,
            ""y"": 238.25
          },
          ""rotation"": 4.46589250508557,
          ""transformMatrix"": {
            ""a"": 0.9969635009765625,
            ""b"": 0.0778656005859375,
            ""c"": -0.0778656005859375,
            ""d"": 0.9969635009765625
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 1,
          ""position"": {
            ""x"": 172,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 70.55,
            ""y"": 305.4
          },
          ""rotation"": 4.46589250508557,
          ""transformMatrix"": {
            ""a"": 0.9969635009765625,
            ""b"": 0.0778656005859375,
            ""c"": -0.0778656005859375,
            ""d"": 0.9969635009765625
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 131.9,
            ""y"": 272.25
          },
          ""rotation"": -7.988658445958428,
          ""transformMatrix"": {
            ""a"": 0.99029541015625,
            ""b"": -0.13897705078125,
            ""c"": 0.13897705078125,
            ""d"": 0.99029541015625
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 190.8,
            ""y"": 160.1
          },
          ""rotation"": 9.902283008246817,
          ""transformMatrix"": {
            ""a"": 0.9850921630859375,
            ""b"": 0.171966552734375,
            ""c"": -0.171966552734375,
            ""d"": 0.9850921630859375
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 181.6,
            ""y"": 100.5
          },
          ""rotation"": 9.902283008246817,
          ""transformMatrix"": {
            ""a"": 0.9850921630859375,
            ""b"": 0.171966552734375,
            ""c"": -0.171966552734375,
            ""d"": 0.9850921630859375
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 5,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 37.45,
            ""y"": 143.15
          },
          ""rotation"": -3.4580482413079023,
          ""transformMatrix"": {
            ""a"": 0.9981842041015625,
            ""b"": -0.0603179931640625,
            ""c"": 0.0603179931640625,
            ""d"": 0.9981842041015625
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 38.5,
            ""y"": 194.1
          },
          ""rotation"": -3.4580482413079023,
          ""transformMatrix"": {
            ""a"": 0.9981842041015625,
            ""b"": -0.0603179931640625,
            ""c"": 0.0603179931640625,
            ""d"": 0.9981842041015625
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -2.799
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 107.6,
            ""y"": 139.65
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 72.95,
            ""y"": 278.1
          },
          ""rotation"": -8.769958480669413,
          ""transformMatrix"": {
            ""a"": 0.9882965087890625,
            ""b"": -0.1524658203125,
            ""c"": 0.1524658203125,
            ""d"": 0.9882965087890625
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 143.7,
            ""y"": 250
          },
          ""rotation"": 1.7225700848636816,
          ""transformMatrix"": {
            ""a"": 0.999542236328125,
            ""b"": 0.030059814453125,
            ""c"": -0.030059814453125,
            ""d"": 0.999542236328125
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 106.35,
            ""y"": 317.35
          },
          ""rotation"": 4.46589250508557,
          ""transformMatrix"": {
            ""a"": 0.9969635009765625,
            ""b"": 0.0778656005859375,
            ""c"": -0.0778656005859375,
            ""d"": 0.9969635009765625
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 172,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 184.5,
            ""y"": 170.75
          },
          ""rotation"": 5.6666614028846976,
          ""transformMatrix"": {
            ""a"": 0.9951019287109375,
            ""b"": 0.0987396240234375,
            ""c"": -0.0987396240234375,
            ""d"": 0.9951019287109375
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 170.9,
            ""y"": 112.05
          },
          ""rotation"": 5.6666614028846976,
          ""transformMatrix"": {
            ""a"": 0.9951019287109375,
            ""b"": 0.0987396240234375,
            ""c"": -0.0987396240234375,
            ""d"": 0.9951019287109375
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 6,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 48.8,
            ""y"": 125.75
          },
          ""rotation"": 2.778624271294824,
          ""transformMatrix"": {
            ""a"": 0.9988250732421875,
            ""b"": 0.0484771728515625,
            ""c"": -0.0484771728515625,
            ""d"": 0.9988250732421875
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 44.25,
            ""y"": 176.55
          },
          ""rotation"": 2.778624271294824,
          ""transformMatrix"": {
            ""a"": 0.9988250732421875,
            ""b"": 0.0484771728515625,
            ""c"": -0.0484771728515625,
            ""d"": 0.9988250732421875
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -4.399
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 107.6,
            ""y"": 140.45
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 72.95,
            ""y"": 278.1
          },
          ""rotation"": -8.769958480669413,
          ""transformMatrix"": {
            ""a"": 0.9882965087890625,
            ""b"": -0.1524658203125,
            ""c"": 0.1524658203125,
            ""d"": 0.9882965087890625
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 161.65,
            ""y"": 250.55
          },
          ""rotation"": 1.7225700848636816,
          ""transformMatrix"": {
            ""a"": 0.999542236328125,
            ""b"": 0.030059814453125,
            ""c"": -0.1878204345703125,
            ""d"": 0.9947967529296875
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 105,
            ""y"": 340.85
          },
          ""rotation"": -4.239720876177177,
          ""transformMatrix"": {
            ""a"": 0.99725341796875,
            ""b"": -0.0739288330078125,
            ""c"": 0.0739288330078125,
            ""d"": 0.99725341796875
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 144.15,
            ""y"": 334.75
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 0.9734954833984375,
            ""b"": 0,
            ""c"": 0,
            ""d"": 0.9734954833984375
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 168.55,
            ""y"": 188.95
          },
          ""rotation"": -3.5378319380683485,
          ""transformMatrix"": {
            ""a"": 0.998077392578125,
            ""b"": -0.06170654296875,
            ""c"": 0.06170654296875,
            ""d"": 0.998077392578125
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 145.75,
            ""y"": 133.15
          },
          ""rotation"": -3.5378319380683485,
          ""transformMatrix"": {
            ""a"": 0.998077392578125,
            ""b"": -0.06170654296875,
            ""c"": 0.06170654296875,
            ""d"": 0.998077392578125
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 7,
      ""elements"": [
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 69.65,
            ""y"": 92.6
          },
          ""rotation"": 11.001824482118822,
          ""transformMatrix"": {
            ""a"": 0.98162841796875,
            ""b"": 0.1908416748046875,
            ""c"": -0.1908416748046875,
            ""d"": 0.98162841796875
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 57.9,
            ""y"": 142.25
          },
          ""rotation"": 11.001824482118822,
          ""transformMatrix"": {
            ""a"": 0.98162841796875,
            ""b"": 0.1908416748046875,
            ""c"": -0.1908416748046875,
            ""d"": 0.98162841796875
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 0,
          ""position"": {
            ""x"": 101.35,
            ""y"": -15.549
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 107.6,
            ""y"": 129.3
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 2,
          ""position"": {
            ""x"": 72.95,
            ""y"": 278.1
          },
          ""rotation"": -8.769958480669413,
          ""transformMatrix"": {
            ""a"": 0.9882965087890625,
            ""b"": -0.1524658203125,
            ""c"": 0.1524658203125,
            ""d"": 0.9882965087890625
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 2,
          ""position"": {
            ""x"": 140.35,
            ""y"": 321.35
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 193.9,
            ""y"": 213.95
          },
          ""rotation"": 20.73895488738747,
          ""transformMatrix"": {
            ""a"": 0.936492919921875,
            ""b"": 0.3545989990234375,
            ""c"": -0.452880859375,
            ""d"": 0.8259124755859375
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 154.05,
            ""y"": 283.3
          },
          ""rotation"": 19.132933653575908,
          ""transformMatrix"": {
            ""a"": 0.9202117919921875,
            ""b"": 0.319244384765625,
            ""c"": -0.2694549560546875,
            ""d"": 0.8685150146484375
          }
        },
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 160.1,
            ""y"": 194.4
          },
          ""rotation"": -10.74565033074329,
          ""transformMatrix"": {
            ""a"": 0.982452392578125,
            ""b"": -0.1864471435546875,
            ""c"": 0.1864471435546875,
            ""d"": 0.982452392578125
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 130.5,
            ""y"": 141.9
          },
          ""rotation"": -10.74565033074329,
          ""transformMatrix"": {
            ""a"": 0.982452392578125,
            ""b"": -0.1864471435546875,
            ""c"": 0.1864471435546875,
            ""d"": 0.982452392578125
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 8,
      ""elements"": [
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 1,
          ""position"": {
            ""x"": 222.95,
            ""y"": 28.7
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 96.35,
            ""y"": 136.05
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 59.35,
            ""y"": 135.75
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 1,
          ""position"": {
            ""x"": 112.2,
            ""y"": 3.15
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 132.9,
            ""y"": 141.25
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": -0.1194000244140625,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 3,
          ""position"": {
            ""x"": 84,
            ""y"": 254.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 141,
            ""y"": 253.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0.0934906005859375,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 3,
          ""position"": {
            ""x"": 37.25,
            ""y"": 314.25
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 195.85,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 1,
          ""position"": {
            ""x"": 181.2,
            ""y"": 101.7
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    },
    {
      ""frame"": 9,
      ""elements"": [
        {
          ""symbolName"": ""#parts/forearm_L"",
          ""frame"": 1,
          ""position"": {
            ""x"": 201.4,
            ""y"": 101.6
          },
          ""rotation"": -5.971573174157817,
          ""transformMatrix"": {
            ""a"": 0.99456787109375,
            ""b"": -0.104034423828125,
            ""c"": 0.104034423828125,
            ""d"": 0.99456787109375
          }
        },
        {
          ""symbolName"": ""#parts/forearm_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 128.75,
            ""y"": 109.8
          },
          ""rotation"": 13.966269492822079,
          ""transformMatrix"": {
            ""a"": 0.970428466796875,
            ""b"": 0.2413482666015625,
            ""c"": -0.2413482666015625,
            ""d"": 0.970428466796875
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_R"",
          ""frame"": 0,
          ""position"": {
            ""x"": 98,
            ""y"": 92.95
          },
          ""rotation"": 14.980918875761608,
          ""transformMatrix"": {
            ""a"": 0.9660186767578125,
            ""b"": 0.2584991455078125,
            ""c"": -0.2584991455078125,
            ""d"": 0.9660186767578125
          }
        },
        {
          ""symbolName"": ""#parts/heads"",
          ""frame"": 1,
          ""position"": {
            ""x"": 155.9,
            ""y"": -16.999
          },
          ""rotation"": 9.722039104518995,
          ""transformMatrix"": {
            ""a"": 0.9856414794921875,
            ""b"": 0.1688690185546875,
            ""c"": -0.1688690185546875,
            ""d"": 0.9856414794921875
          }
        },
        {
          ""symbolName"": ""#parts/torso"",
          ""frame"": 0,
          ""position"": {
            ""x"": 145.6,
            ""y"": 119.3
          },
          ""rotation"": 11.679597446648462,
          ""transformMatrix"": {
            ""a"": 0.9792938232421875,
            ""b"": 0.2024383544921875,
            ""c"": -0.2024383544921875,
            ""d"": 0.9792938232421875
          }
        },
        {
          ""symbolName"": ""#parts/leg_R"",
          ""frame"": 3,
          ""position"": {
            ""x"": 72.45,
            ""y"": 254.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/leg_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 129.45,
            ""y"": 253.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": 0.0488128662109375,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_R"",
          ""frame"": 1,
          ""position"": {
            ""x"": 32.2,
            ""y"": 307.05
          },
          ""rotation"": 3.4996921218016213,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0.0611572265625,
            ""c"": 0,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/boot_L"",
          ""frame"": 0,
          ""position"": {
            ""x"": 181.1,
            ""y"": 325.95
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1,
            ""b"": 0,
            ""c"": -0.044677734375,
            ""d"": 1
          }
        },
        {
          ""symbolName"": ""#parts/shoulder_L"",
          ""frame"": 1,
          ""position"": {
            ""x"": 288.05,
            ""y"": 67.5
          },
          ""rotation"": 34.76422693294954,
          ""transformMatrix"": {
            ""a"": 0.8226776123046875,
            ""b"": 0.571014404296875,
            ""c"": -0.52532958984375,
            ""d"": 0.85089111328125
          }
        },
        {
          ""symbolName"": ""Davis_Base"",
          ""frame"": 0,
          ""position"": {
            ""x"": 0,
            ""y"": 0
          },
          ""rotation"": 0,
          ""transformMatrix"": {
            ""a"": 1.9989013671875,
            ""b"": 0,
            ""c"": 0,
            ""d"": 2
          }
        }
      ]
    }
  ]
}
"
zcNFQ6Ja,Green Hell VR  Large Planter Box,substatica,XML,Friday 25th of July 2025 07:57:45 AM CDT,"<item>
  <type>CONSTRUCTION_PLANTER_LARGE</type>
  <isFullUnlocked>false</isFullUnlocked>
  <wasReminder>false</wasReminder>
</item>"
vzxh6b1i,Untitled,Josif_tepe,C++,Friday 25th of July 2025 07:13:32 AM CDT,"#include <iostream>
#include <deque>
using namespace std;

int main() {
    
    deque<int> dq;
    
    dq.push_back(1);
    dq.push_back(2);
    dq.push_back(3);
    
    dq[0] = 10;
    
    for(int i = 0; i < dq.size(); i++){
        cout << dq[i] << "" "" ;
    }
    return 0;
}
"
