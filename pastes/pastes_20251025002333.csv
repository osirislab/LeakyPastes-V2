id,title,username,language,date,content
TfyiayZ1,üî• Exchange profit method üìùüö®,biggu_ribousuki,JavaScript,Friday 24th of October 2025 07:21:13 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 7k23q88zavs7rnolynhs7z3vaxmhqstt0d8rog016thk424roj
"
fPfQZASF,üíµ Make 3000$ in 20 minutes üíµ,mesamuni,JavaScript,Friday 24th of October 2025 07:16:59 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/17UjnylIW0RrPxWJRy1DQ7BhN8EdvaeDmBMgKpCr63mI

Post hash: WCKacTvshvvoYatmcCFXbtPgKKNVcthYWnxQIpjETYxL"
MdsRJN2W,44qYaVHpLreEb3cisNpNsPEZWqzMxqVz4SNRF1hnAGYDZ8TdMsBTZQVZ6yhThqG2EREbHKrLuRs2i4pULuoBbXDR5tPEERZ KEKS,KekSec420,C,Friday 24th of October 2025 07:09:21 PM CDT,"Donate to KEKSEC 44qYaVHpLreEb3cisNpNsPEZWqzMxqVz4SNRF1hnAGYDZ8TdMsBTZQVZ6yhThqG2EREbHKrLuRs2i4pULuoBbXDR5tPEERZ

Y'all want peer to peer while here you go out üòú with me"
US70X20G,Untitled,Cipher404,Python,Friday 24th of October 2025 07:04:41 PM CDT,"import kagglehub
from kagglehub import KaggleDatasetAdapter
import pandas as pd
import json
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from sklearn.metrics import f1_score
import numpy as np
from datasets import Dataset

# Set random seed for reproducibility
torch.manual_seed(42)
np.random.seed(42)

# 1. Load Datasets
train_file_path = ""train.jsonl""  # Update if different (e.g., for Subtask A)
test_file_path = ""test.jsonl""    # Update if different
label_map_file = ""label_to_id.json""  # Update if different

# Load training and test data
train_df = kagglehub.load_dataset(
    KaggleDatasetAdapter.PANDAS,
    ""daniilor/semeval-2026-task13"",
    train_file_path
)
test_df = kagglehub.load_dataset(
    KaggleDatasetAdapter.PANDAS,
    ""daniilor/semeval-2026-task13"",
    test_file_path
)

# Load label mappings
label_to_id_path = kagglehub.dataset_download(""daniilor/semeval-2026-task13"", label_map_file)
with open(label_to_id_path, 'r', encoding='utf-8') as f:
    label_to_id = json.load(f)
id_to_label = {v: k for k, v in label_to_id.items()}

# Verify data
print(""Training Data (first 5 records):"")
print(train_df.head())
print(""\nTest Data (first 5 records):"")
print(test_df.head())
print(""\nLabel Mappings:"", label_to_id)

# 2. Preprocess Data
# Initialize GraphCodeBERT tokenizer
tokenizer = AutoTokenizer.from_pretrained(""microsoft/graphcodebert-base"")

def tokenize_function(examples):
    return tokenizer(examples['code'], padding=""max_length"", truncation=True, max_length=512)

# Convert to Hugging Face Dataset
train_dataset = Dataset.from_pandas(train_df[['code', 'label']])
test_dataset = Dataset.from_pandas(test_df[['id', 'code']])

# Tokenize datasets
train_dataset = train_dataset.map(tokenize_function, batched=True)
test_dataset = test_dataset.map(tokenize_function, batched=True)

# Set format for PyTorch
train_dataset.set_format('torch', columns=['input_ids', 'attention_mask', 'label'])
test_dataset.set_format('torch', columns=['input_ids', 'attention_mask', 'id'])

# Split training data for validation
train_dataset, val_dataset = train_dataset.train_test_split(test_size=0.1, seed=42).values()

# 3. Define Model
model = AutoModelForSequenceClassification.from_pretrained(
    ""microsoft/graphcodebert-base"",
    num_labels=2  # Binary classification for Subtask A
)

# 4. Define Metrics
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    macro_f1 = f1_score(labels, preds, average='macro')
    return {""macro_f1"": macro_f1}

# 5. Set Training Arguments
training_args = TrainingArguments(
    output_dir=""./graphcodebert_finetuned"",
    evaluation_strategy=""epoch"",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    weight_decay=0.01,
    save_strategy=""epoch"",
    load_best_model_at_end=True,
    metric_for_best_model=""macro_f1"",
    seed=42
)

# 6. Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    compute_metrics=compute_metrics
)

# 7. Train Model
trainer.train()

# 8. Generate Predictions
predictions = trainer.predict(test_dataset)
pred_labels = np.argmax(predictions.predictions, axis=1)

# 9. Prepare Submission File
submission_df = pd.DataFrame({
    'id': test_dataset['id'],
    'label': pred_labels
})
submission_df.to_csv('submission_graphcodebert.csv', index=False)
print(""Submission file saved as 'submission_graphcodebert.csv'"")"
ik7NZmeP,üî• Exchange profit method,mesamuni,JavaScript,Friday 24th of October 2025 06:54:32 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/17UjnylIW0RrPxWJRy1DQ7BhN8EdvaeDmBMgKpCr63mI

Post hash: ufIvlpsHUHQPBADkJDUMScmKffKFVZZirNbqLAAnwcZN"
xMThy80h,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö° üî•üìù,biggu_ribousuki,JavaScript,Friday 24th of October 2025 06:47:49 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: oa4q0vqrn7kj93y1zblw2edqzzbwdeoebh6g0aseu8xnfgdckg
"
dkBkn93E,üìù MAKE $2500 IN 15 MIN ‚úÖ Working,mesamuni,JavaScript,Friday 24th of October 2025 06:32:05 PM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/17UjnylIW0RrPxWJRy1DQ7BhN8EdvaeDmBMgKpCr63mI

Post hash: VoYHbVcwMAOQqgJvSJtmUcNfIqUuvxwVJtBJAPwDOSRK"
S5WTF2k7,üíé ChangeNOW Exploit üî•üî•,biggu_ribousuki,JavaScript,Friday 24th of October 2025 06:14:26 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: r4btsb63ganpyyljnv406nqxhy6qa2bfnl4sa5bebq7nna9dvm
"
rmuADqN3,‚≠êMake $15OO in 2O minutes‚≠ê üö®üö®,biggu_ribousuki,JavaScript,Friday 24th of October 2025 05:41:03 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: ng8861uvcubmngkgqdn96lbnvv5n6y1pz70jwfzened3t0hwxr
"
5wQ37sc8,L06_TODO_5,tomlee9876,JavaScript,Friday 24th of October 2025 05:08:09 PM CDT,"<div>
  <span>Batch Number : </span>

  <input
    type=""text""
    placeholder=""Batch Number""
    value={form.batch}
    onChange={(e) => setForm({ ...form, batch: e.target.value })}
    className=""p-2 border rounded""
    required
  />
</div>
"
efUzh4DX,‚≠êProfit Method‚≠ê üìùüíµ,biggu_ribousuki,JavaScript,Friday 24th of October 2025 05:07:02 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 3anunk1m9b87pnbxnn3fa6g18ffznvkaobhk94823k9xv7p1nh
"
iHpPHPD2,L06_TODO_4,tomlee9876,JavaScript,Friday 24th of October 2025 05:05:54 PM CDT,"<div>
  <span>Date : </span>

  <input
    type=""date""
    value={form.productionDate}
    onChange={(e) =>
      setForm({ ...form, productionDate: e.target.value })
    }
    className=""p-2 border rounded col-span-2""
    required
  />
</div>
"
bck54Cd9,L06_TODO_3,tomlee9876,JavaScript,Friday 24th of October 2025 05:04:19 PM CDT,"<div>
  <span>Factory : </span>

  <select
    value={form.factory}
    onChange={(e) => setForm({ ...form, factory: e.target.value })}
    className=""p-2 border rounded""
    required
  >
    <option value="""">Select Manufacture Factory</option>

    {factories.map((n) => (
      <option key={n}>{n}</option>
    ))}
  </select>
</div>
"
PDieHhJP,L06_TODO_2,tomlee9876,JavaScript,Friday 24th of October 2025 05:00:25 PM CDT,"<div>
  <span>Brand Name : </span>

  <select
    value={form.brand}
    onChange={(e) => setForm({ ...form, brand: e.target.value })}
    className=""p-2 border rounded""
    required
  >
    <option value="""">Select brand</option>

    {brands.map((n) => (
      <option key={n}>{n}</option>
    ))}
  </select>
</div>
"
y8ujwaVn,L06_TODO_1,tomlee9876,JavaScript,Friday 24th of October 2025 04:57:05 PM CDT,"<div>
  <span>Medicine Name : </span>

  <select
    value={form.name}
    onChange={(e) => setForm({ ...form, name: e.target.value })}
    className=""p-2 border rounded""
    required
  >
    <option value="""">Select Medicine Name</option>

    {medicineNames.map((n) => (
      <option key={n}>{n}</option>
    ))}
  </select>
</div>
"
1v0J8QXQ,OV Menu Inferior Acorde√≥n - OV DIVI,oscarviedma,HTML,Friday 24th of October 2025 04:53:19 PM CDT,"<audio id=""ov-mia-snd-open"" src=""/menu-playin.mp3""></audio>
<audio id=""ov-mia-snd-close"" src=""/menu-playout.mp3""></audio>
<audio id=""ov-mia-snd-hover"" src=""/hover-short.mp3""></audio>

<script>
const ovMiaMenu         = document.getElementById('ov-mia-bottomMenu');
const ovMiaHeaderBar    = document.getElementById('ov-mia-headerClick');
const ovMiaSndOpen      = document.getElementById('ov-mia-snd-open');
const ovMiaSndClose     = document.getElementById('ov-mia-snd-close');
const ovMiaSndHover     = document.getElementById('ov-mia-snd-hover');
const ovMiaToggleButton = document.getElementById('ov-mia-toggleButton');
const ovMiaIcon         = ovMiaToggleButton ? ovMiaToggleButton.querySelector('.et-pb-icon') : null;
let ovMiaOriginalIcon   = ovMiaIcon ? ovMiaIcon.innerHTML : '';

function ovMiaPlay(snd){
  if (snd) {
    snd.currentTime = 0;
    snd.play().catch(()=>{});
  }
}

function ovMiaCloseMenu() {
  if (ovMiaMenu.classList.contains('ov-mia-open')) {
    ovMiaPlay(ovMiaSndClose);
    ovMiaMenu.classList.remove('ov-mia-open');
    if (ovMiaIcon) {
      ovMiaIcon.innerHTML = ovMiaOriginalIcon;
    }
  }
}

function ovMiaToggleMenu() {
  const opened = ovMiaMenu.classList.contains('ov-mia-open');
  if (opened) {
    ovMiaCloseMenu();
  } else {
    ovMiaPlay(ovMiaSndOpen);
    ovMiaMenu.classList.add('ov-mia-open');
    if (ovMiaIcon) {
      ovMiaIcon.textContent = '‚úï';
    }
  }
}

ovMiaHeaderBar.addEventListener('click', ovMiaToggleMenu);

document.addEventListener('click', e => {
  if (e.target.closest('.ov-close-menu')) {
    ovMiaCloseMenu();
  }
});

document.addEventListener('keydown', e => {
  if (e.key === ""Escape"" && ovMiaMenu.classList.contains('ov-mia-open')) {
    ovMiaCloseMenu();
  }
});

document.querySelectorAll('.ov-mia-blurb').forEach(blurb => {
  blurb.addEventListener('mouseenter', () => {
    ovMiaPlay(ovMiaSndHover);
  });
});
</script>"
KueXiDRj,EnanReactorAutoConfig_ForEEPROM,Umaler,Lua,Friday 24th of October 2025 04:36:18 PM CDT,"local function proxy(name)
    return component.proxy(component.list(""gpu"")())
end

local gpu = proxy(""gpu"")
local w, h = gpu.getResolution()

local TARGET_INSTABILITY = 2
local STABILIZER_ENERGY  = 10000
local OUTPUT_RATE        = 60000

local SLEEP_TIME = 3.0
local ERROR_SLEEP_TIME = 8.0

local CORE_TYPE = ""warpdriveEnanReactorCore""

local function pairsByKeys(t, f)
    local a = {}
    for n in pairs(t) do table.insert(a, n) end
    table.sort(a, f)
    local i = 0
    local iter = function ()
        i = i + 1
        if a[i] == nil then return nil
            else return a[i], t[a[i]]
        end
    end
    return iter
end

local function configureRelease(core)
    local energy, capacity = core.energy()
    local pct = energy / capacity
    if pct > 0.9 then
        core.releaseRate(OUTPUT_RATE)
    else
        core.release(false)
    end
end

local function initialConfig(core)
    core.stabilizerEnergy(STABILIZER_ENERGY)
    core.instabilityTarget(100 - TARGET_INSTABILITY)
    configureRelease(core)
    core.enable(true)
end

local cursorY = 1
local function print(...)
    local resStr = """"
    for _, v in ipairs({...}) do
        resStr = resStr .. tostring(v) .. ""    ""
    end
    if gpu.set(1, cursorY, resStr) then
        cursorY = cursorY + 1
    end
end

local function clear()
    gpu.fill(1, 1, w, h, ' ')
    cursorY = 1
end

local function drawState(cores)
    clear()
    print(""–°–æ—Å—Ç–æ—è–Ω–∏–µ —è–¥–µ—Ä:"")

    for addr, core in pairsByKeys(cores) do
        pcall(function()
            local instabil = {core.instability()}
            instabil = 100.0 - (instabil[1] + instabil[2] + instabil[3] + instabil[4]) / 4.0
            local rmode = core.releaseRate()
            if rmode == ""at_rate"" then rmode = ""rate"" else rmode = ""hold"" end
            print(addr, ""Energy: "" .. tostring(core.energy()), ""Stability: "" .. tostring(instabil), ""Release mode: "" .. rmode)
        end)
    end
end

local function main()
    local cores = {}
    for addr, _ in pairs(component.list(CORE_TYPE)) do
        cores[addr] = component.proxy(addr)
        initialConfig(cores[addr])
    end

    drawState(cores)

    local lastDrawedTime = computer.uptime()
    while true do
        -- Get event
        e = {computer.pullSignal(SLEEP_TIME)}

        if e[1] == ""component_added"" then
            local addr, ctype = e[2], e[3]
            if ctype == CORE_TYPE then
                cores[addr] = component.proxy(addr)
                initialConfig(cores[addr])
            end
        elseif e[1] == ""component_removed"" then
            local addr, ctype = e[2], e[3]
            if ctype == CORE_TYPE then
                cores[addr] = nil
            end
        end

        local currentTime = computer.uptime()
        if currentTime > (lastDrawedTime + SLEEP_TIME) then
            for _, core in pairs(cores) do
                pcall(configureRelease, core)
            end
            drawState(cores)
            lastDrawedTime = currentTime
        end
    end
end

local s, e = xpcall(main(), function(err) return err .. ""\n"" .. debug.traceback(); end)

if not s then
    clear()
    gpu.setForeground(0xFF0000)
    print(e)
    gpu.setForeground(0xFFFFFF)

    local startTime = computer.uptime()
    repeat
        computer.pullSignal(ERROR_SLEEP_TIME)
    until computer.uptime() > (startTime + ERROR_SLEEP_TIME)
end
"
WV9NpVfy,üî• Exchange profit method üìùüö®,biggu_ribousuki,JavaScript,Friday 24th of October 2025 04:33:38 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 0o1hgo6vtbbe5wxts8mxf4c3y3br8y4ulwn1xm3mbyxzwcgmux
"
T1WqC7M5,Android-mirroring-Link-Generator,Sam_ALi0,C++,Friday 24th of October 2025 04:05:09 PM CDT,https://github.com/crypt0hole/Android-mirroring-Link-Generator-for-educational-purposes-
LhFaqMYz,windows info for bug report,vulcan_,Batch,Friday 24th of October 2025 04:03:15 PM CDT,"OpenSCAD Version: 2025.10.21 (git d05aec3ed)
System information: Microsoft Windows 11 (10.0.26120) x86_64 32 CPUs 31.77 GB RAM
User Agent: OpenSCAD/2025.10.21 (git d05aec3ed) (Microsoft Windows 11 (10.0.26120) x86_64)
Compiler: GCC ""14.3.0"" 64bit
MinGW build: MingW64
Debug build: No
Boost version: 1_85
Eigen version: 3.4.0
CGAL version, kernels: 6.0.1, Cartesian<Gmpq>, Extended_cartesian<Gmpq>
OpenCSG version: OpenCSG 1.5.0
Clipper2 version: 1.5.2
Manifold version: 3.2.1
Qt version: 5.15.17
QScintilla version: 2.11.2
InputDrivers: 
GLib version: 2.85.3
lodepng version: 20230410
libzip version: 1.5.2
fontconfig version: 2.16.0
freetype version: 2.13.3
harfbuzz version: 11.4.1
cairo version: 1.18.4
lib3mf version: 1.8.1
Features: roof*, input-driver-dbus, lazy-union, vertex-object-renderers-indexing, textmetrics*, import-function*, object-function*, predictible-output
Application Path: C:/Program Files/OpenSCAD (Nightly)
Documents Path: C:\Users\Jeff\Documents
User Documents Path: C:\Users\Jeff\Documents
Resource Path: C:/Program Files/OpenSCAD (Nightly)
User Library Path: C:/Users/Jeff/Documents/OpenSCAD/libraries
User Examples Path: C:/Users/Jeff/Documents/OpenSCAD/examples
User Config Path: C:\Users\Jeff\AppData\Local/OpenSCAD
Backup Path: C:/Users/Jeff/Documents/OpenSCAD/backups
OPENSCADPATH: <not set>
OpenSCAD library path:
C:/Users/Jeff/Documents/OpenSCAD/libraries
C:/Program Files/OpenSCAD (Nightly)\libraries

OPENSCAD_FONT_PATH: <not set>
OpenSCAD font path:
C:/WINDOWS/fonts
C:/Users/Jeff/AppData/Local/Microsoft/Windows/Fonts
C:/Users/Jeff/AppData/Roaming/fonts
C:/usr/local/share/fonts
C:/usr/share/fonts
C:/usr/X11/lib/X11/fonts
C:/System/Library/Fonts
C:/Library/Fonts
C:/Users/Jeff/Library/Fonts
GLEW version: 2.1.0
OpenGL Version: 4.6.0 NVIDIA 581.29
GL Renderer: NVIDIA GeForce RTX 4080/PCIe/SSE2
GL Vendor: NVIDIA Corporation
RGBA(8888), depth(24), stencil(8)
GL_ARB_framebuffer_object: yes
GL_EXT_framebuffer_object: yes
GL_EXT_packed_depth_stencil: yes

Qt graphics widget: QOpenGLWidget
QSurfaceFormat: RGBA(8888), depth(24), stencil(8)

GL Extensions:
GL_AMD_multi_draw_indirect
GL_AMD_seamless_cubemap_per_texture
GL_AMD_vertex_shader_layer
GL_AMD_vertex_shader_viewport_index
GL_ARB_ES2_compatibility
GL_ARB_ES3_1_compatibility
GL_ARB_ES3_2_compatibility
GL_ARB_ES3_compatibility
GL_ARB_arrays_of_arrays
GL_ARB_base_instance
GL_ARB_bindless_texture
GL_ARB_blend_func_extended
GL_ARB_buffer_storage
GL_ARB_clear_buffer_object
GL_ARB_clear_texture
GL_ARB_clip_control
GL_ARB_color_buffer_float
GL_ARB_compatibility
GL_ARB_compressed_texture_pixel_storage
GL_ARB_compute_shader
GL_ARB_compute_variable_group_size
GL_ARB_conditional_render_inverted
GL_ARB_conservative_depth
GL_ARB_copy_buffer
GL_ARB_copy_image
GL_ARB_cull_distance
GL_ARB_debug_output
GL_ARB_depth_buffer_float
GL_ARB_depth_clamp
GL_ARB_depth_texture
GL_ARB_derivative_control
GL_ARB_direct_state_access
GL_ARB_draw_buffers
GL_ARB_draw_buffers_blend
GL_ARB_draw_elements_base_vertex
GL_ARB_draw_indirect
GL_ARB_draw_instanced
GL_ARB_enhanced_layouts
GL_ARB_explicit_attrib_location
GL_ARB_explicit_uniform_location
GL_ARB_fragment_coord_conventions
GL_ARB_fragment_layer_viewport
GL_ARB_fragment_program
GL_ARB_fragment_program_shadow
GL_ARB_fragment_shader
GL_ARB_fragment_shader_interlock
GL_ARB_framebuffer_no_attachments
GL_ARB_framebuffer_object
GL_ARB_framebuffer_sRGB
GL_ARB_geometry_shader4
GL_ARB_get_program_binary
GL_ARB_get_texture_sub_image
GL_ARB_gl_spirv
GL_ARB_gpu_shader5
GL_ARB_gpu_shader_fp64
GL_ARB_gpu_shader_int64
GL_ARB_half_float_pixel
GL_ARB_half_float_vertex
GL_ARB_imaging
GL_ARB_indirect_parameters
GL_ARB_instanced_arrays
GL_ARB_internalformat_query
GL_ARB_internalformat_query2
GL_ARB_invalidate_subdata
GL_ARB_map_buffer_alignment
GL_ARB_map_buffer_range
GL_ARB_multi_bind
GL_ARB_multi_draw_indirect
GL_ARB_multisample
GL_ARB_multitexture
GL_ARB_occlusion_query
GL_ARB_occlusion_query2
GL_ARB_parallel_shader_compile
GL_ARB_pipeline_statistics_query
GL_ARB_pixel_buffer_object
GL_ARB_point_parameters
GL_ARB_point_sprite
GL_ARB_polygon_offset_clamp
GL_ARB_post_depth_coverage
GL_ARB_program_interface_query
GL_ARB_provoking_vertex
GL_ARB_query_buffer_object
GL_ARB_robust_buffer_access_behavior
GL_ARB_robustness
GL_ARB_sample_locations
GL_ARB_sample_shading
GL_ARB_sampler_objects
GL_ARB_seamless_cube_map
GL_ARB_seamless_cubemap_per_texture
GL_ARB_separate_shader_objects
GL_ARB_shader_atomic_counter_ops
GL_ARB_shader_atomic_counters
GL_ARB_shader_ballot
GL_ARB_shader_bit_encoding
GL_ARB_shader_clock
GL_ARB_shader_draw_parameters
GL_ARB_shader_group_vote
GL_ARB_shader_image_load_store
GL_ARB_shader_image_size
GL_ARB_shader_objects
GL_ARB_shader_precision
GL_ARB_shader_storage_buffer_object
GL_ARB_shader_subroutine
GL_ARB_shader_texture_image_samples
GL_ARB_shader_texture_lod
GL_ARB_shader_viewport_layer_array
GL_ARB_shading_language_100
GL_ARB_shading_language_420pack
GL_ARB_shading_language_include
GL_ARB_shading_language_packing
GL_ARB_shadow
GL_ARB_sparse_buffer
GL_ARB_sparse_texture
GL_ARB_sparse_texture2
GL_ARB_sparse_texture_clamp
GL_ARB_spirv_extensions
GL_ARB_stencil_texturing
GL_ARB_sync
GL_ARB_tessellation_shader
GL_ARB_texture_barrier
GL_ARB_texture_border_clamp
GL_ARB_texture_buffer_object
GL_ARB_texture_buffer_object_rgb32
GL_ARB_texture_buffer_range
GL_ARB_texture_compression
GL_ARB_texture_compression_bptc
GL_ARB_texture_compression_rgtc
GL_ARB_texture_cube_map
GL_ARB_texture_cube_map_array
GL_ARB_texture_env_add
GL_ARB_texture_env_combine
GL_ARB_texture_env_crossbar
GL_ARB_texture_env_dot3
GL_ARB_texture_filter_anisotropic
GL_ARB_texture_filter_minmax
GL_ARB_texture_float
GL_ARB_texture_gather
GL_ARB_texture_mirror_clamp_to_edge
GL_ARB_texture_mirrored_repeat
GL_ARB_texture_multisample
GL_ARB_texture_non_power_of_two
GL_ARB_texture_query_levels
GL_ARB_texture_query_lod
GL_ARB_texture_rectangle
GL_ARB_texture_rg
GL_ARB_texture_rgb10_a2ui
GL_ARB_texture_stencil8
GL_ARB_texture_storage
GL_ARB_texture_storage_multisample
GL_ARB_texture_swizzle
GL_ARB_texture_view
GL_ARB_timer_query
GL_ARB_transform_feedback2
GL_ARB_transform_feedback3
GL_ARB_transform_feedback_instanced
GL_ARB_transform_feedback_overflow_query
GL_ARB_transpose_matrix
GL_ARB_uniform_buffer_object
GL_ARB_vertex_array_bgra
GL_ARB_vertex_array_object
GL_ARB_vertex_attrib_64bit
GL_ARB_vertex_attrib_binding
GL_ARB_vertex_buffer_object
GL_ARB_vertex_program
GL_ARB_vertex_shader
GL_ARB_vertex_type_10f_11f_11f_rev
GL_ARB_vertex_type_2_10_10_10_rev
GL_ARB_viewport_array
GL_ARB_window_pos
GL_ATI_draw_buffers
GL_ATI_texture_float
GL_ATI_texture_mirror_once
GL_EXTX_framebuffer_mixed_formats
GL_EXT_Cg_shader
GL_EXT_abgr
GL_EXT_bgra
GL_EXT_bindable_uniform
GL_EXT_blend_color
GL_EXT_blend_equation_separate
GL_EXT_blend_func_separate
GL_EXT_blend_minmax
GL_EXT_blend_subtract
GL_EXT_compiled_vertex_array
GL_EXT_depth_bounds_test
GL_EXT_direct_state_access
GL_EXT_draw_buffers2
GL_EXT_draw_instanced
GL_EXT_draw_range_elements
GL_EXT_fog_coord
GL_EXT_framebuffer_blit
GL_EXT_framebuffer_multisample
GL_EXT_framebuffer_multisample_blit_scaled
GL_EXT_framebuffer_object
GL_EXT_framebuffer_sRGB
GL_EXT_geometry_shader4
GL_EXT_gpu_program_parameters
GL_EXT_gpu_shader4
GL_EXT_import_sync_object
GL_EXT_memory_object
GL_EXT_memory_object_win32
GL_EXT_multi_draw_arrays
GL_EXT_multiview_texture_multisample
GL_EXT_multiview_timer_query
GL_EXT_packed_depth_stencil
GL_EXT_packed_float
GL_EXT_packed_pixels
GL_EXT_pixel_buffer_object
GL_EXT_point_parameters
GL_EXT_polygon_offset_clamp
GL_EXT_post_depth_coverage
GL_EXT_provoking_vertex
GL_EXT_raster_multisample
GL_EXT_rescale_normal
GL_EXT_secondary_color
GL_EXT_semaphore
GL_EXT_semaphore_win32
GL_EXT_separate_shader_objects
GL_EXT_separate_specular_color
GL_EXT_shader_image_load_formatted
GL_EXT_shader_image_load_store
GL_EXT_shader_integer_mix
GL_EXT_shadow_funcs
GL_EXT_sparse_texture2
GL_EXT_stencil_two_side
GL_EXT_stencil_wrap
GL_EXT_texture3D
GL_EXT_texture_array
GL_EXT_texture_buffer_object
GL_EXT_texture_compression_dxt1
GL_EXT_texture_compression_latc
GL_EXT_texture_compression_rgtc
GL_EXT_texture_compression_s3tc
GL_EXT_texture_cube_map
GL_EXT_texture_edge_clamp
GL_EXT_texture_env_add
GL_EXT_texture_env_combine
GL_EXT_texture_env_dot3
GL_EXT_texture_filter_anisotropic
GL_EXT_texture_filter_minmax
GL_EXT_texture_integer
GL_EXT_texture_lod
GL_EXT_texture_lod_bias
GL_EXT_texture_mirror_clamp
GL_EXT_texture_object
GL_EXT_texture_sRGB
GL_EXT_texture_sRGB_R8
GL_EXT_texture_sRGB_decode
GL_EXT_texture_shadow_lod
GL_EXT_texture_shared_exponent
GL_EXT_texture_storage
GL_EXT_texture_swizzle
GL_EXT_timer_query
GL_EXT_transform_feedback2
GL_EXT_vertex_array
GL_EXT_vertex_array_bgra
GL_EXT_vertex_attrib_64bit
GL_EXT_win32_keyed_mutex
GL_EXT_window_rectangles
GL_IBM_rasterpos_clip
GL_IBM_texture_mirrored_repeat
GL_KHR_blend_equation_advanced
GL_KHR_blend_equation_advanced_coherent
GL_KHR_context_flush_control
GL_KHR_debug
GL_KHR_no_error
GL_KHR_parallel_shader_compile
GL_KHR_robust_buffer_access_behavior
GL_KHR_robustness
GL_KHR_shader_subgroup
GL_KTX_buffer_region
GL_NVX_blend_equation_advanced_multi_draw_buffers
GL_NVX_conditional_render
GL_NVX_gpu_memory_info
GL_NVX_gpu_multicast2
GL_NVX_linked_gpu_multicast
GL_NVX_multigpu_info
GL_NVX_nvenc_interop
GL_NVX_progress_fence
GL_NV_ES1_1_compatibility
GL_NV_ES3_1_compatibility
GL_NV_alpha_to_coverage_dither_control
GL_NV_bindless_multi_draw_indirect
GL_NV_bindless_multi_draw_indirect_count
GL_NV_bindless_texture
GL_NV_blend_equation_advanced
GL_NV_blend_equation_advanced_coherent
GL_NV_blend_minmax_factor
GL_NV_blend_square
GL_NV_clip_space_w_scaling
GL_NV_command_list
GL_NV_compute_program5
GL_NV_compute_shader_derivatives
GL_NV_conditional_render
GL_NV_conservative_raster
GL_NV_conservative_raster_dilate
GL_NV_conservative_raster_pre_snap
GL_NV_conservative_raster_pre_snap_triangles
GL_NV_conservative_raster_underestimation
GL_NV_copy_depth_to_color
GL_NV_copy_image
GL_NV_depth_buffer_float
GL_NV_depth_clamp
GL_NV_draw_texture
GL_NV_draw_vulkan_image
GL_NV_explicit_multisample
GL_NV_feature_query
GL_NV_fence
GL_NV_fill_rectangle
GL_NV_float_buffer
GL_NV_fog_distance
GL_NV_fragment_coverage_to_color
GL_NV_fragment_program
GL_NV_fragment_program2
GL_NV_fragment_program_option
GL_NV_fragment_shader_barycentric
GL_NV_fragment_shader_interlock
GL_NV_framebuffer_mixed_samples
GL_NV_framebuffer_multisample_coverage
GL_NV_geometry_shader4
GL_NV_geometry_shader_passthrough
GL_NV_gpu_multicast
GL_NV_gpu_program4
GL_NV_gpu_program4_1
GL_NV_gpu_program5
GL_NV_gpu_program5_mem_extended
GL_NV_gpu_program_fp64
GL_NV_gpu_program_multiview
GL_NV_gpu_shader5
GL_NV_half_float
GL_NV_internalformat_sample_query
GL_NV_light_max_exponent
GL_NV_memory_attachment
GL_NV_memory_object_sparse
GL_NV_mesh_shader
GL_NV_multisample_coverage
GL_NV_multisample_filter_hint
GL_NV_occlusion_query
GL_NV_packed_depth_stencil
GL_NV_parameter_buffer_object
GL_NV_parameter_buffer_object2
GL_NV_path_rendering
GL_NV_path_rendering_shared_edge
GL_NV_pixel_data_range
GL_NV_point_sprite
GL_NV_primitive_restart
GL_NV_primitive_shading_rate
GL_NV_query_resource
GL_NV_query_resource_tag
GL_NV_register_combiners
GL_NV_register_combiners2
GL_NV_representative_fragment_test
GL_NV_sample_locations
GL_NV_sample_mask_override_coverage
GL_NV_scissor_exclusive
GL_NV_shader_atomic_counters
GL_NV_shader_atomic_float
GL_NV_shader_atomic_float64
GL_NV_shader_atomic_fp16_vector
GL_NV_shader_atomic_int64
GL_NV_shader_buffer_load
GL_NV_shader_storage_buffer_object
GL_NV_shader_subgroup_partitioned
GL_NV_shader_texture_footprint
GL_NV_shader_thread_group
GL_NV_shader_thread_shuffle
GL_NV_shading_rate_image
GL_NV_stereo_view_rendering
GL_NV_texgen_reflection
GL_NV_texture_barrier
GL_NV_texture_compression_vtc
GL_NV_texture_dirty_tile_map
GL_NV_texture_env_combine4
GL_NV_texture_multisample
GL_NV_texture_rectangle
GL_NV_texture_rectangle_compressed
GL_NV_texture_shader
GL_NV_texture_shader2
GL_NV_texture_shader3
GL_NV_timeline_semaphore
GL_NV_transform_feedback
GL_NV_transform_feedback2
GL_NV_uniform_buffer_std430_layout
GL_NV_uniform_buffer_unified_memory
GL_NV_vertex_array_range
GL_NV_vertex_array_range2
GL_NV_vertex_attrib_integer_64bit
GL_NV_vertex_buffer_unified_memory
GL_NV_vertex_program
GL_NV_vertex_program1_1
GL_NV_vertex_program2
GL_NV_vertex_program2_option
GL_NV_vertex_program3
GL_NV_viewport_array2
GL_NV_viewport_swizzle
GL_OVR_multiview
GL_OVR_multiview2
GL_S3_s3tc
GL_SGIS_generate_mipmap
GL_SGIS_texture_lod
GL_SGIX_depth_texture
GL_SGIX_shadow
GL_SUN_slice_accum
GL_WIN_swap_hint
WGL_EXT_swap_control
"
Z5nepbY8,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö° üî•üìù,biggu_ribousuki,JavaScript,Friday 24th of October 2025 04:00:15 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: rlfm4b8maj6nn8xnb2zctx1qln7zdgh9fs2ca65wbp4v290ewb
"
bnPK4W9U,Remove Russian Songs,vasylmartyniv,Python,Friday 24th of October 2025 03:51:54 PM CDT,"""""""
Move 'Russian' songs from your Liked Songs into a separate playlist.
Detection heuristics:
  1) Cyrillic characters in track name or any artist name.
  2) Artist genres contain keywords like 'russian', 'russia', 'cccp', 'cis', 'soviet', '—Ä—É—Å', '—Ä—É', etc.

No likes are removed. If you want to also unlike after moving, set REMOVE_FROM_LIKED=True.
""""""

import json
import re
import time
import unicodedata
from pathlib import Path
from typing import List, Dict, Iterable

from dotenv import load_dotenv
from spotipy import Spotify
from spotipy.exceptions import SpotifyException
from spotipy.oauth2 import SpotifyOAuth

# Load environment variables from .env file
load_dotenv()

# -------------------- CONFIG --------------------
PLAYLIST_NAME = ""Russian Songs (from Liked)""
PLAYLIST_PUBLIC = False
REMOVE_FROM_LIKED = False  # set True if you want to unlike after moving
BATCH_SIZE = 100  # Spotify allows 100 per add/remove call
CACHE_FILE = Path("".spotify_cache.json"")

# Keywords to flag in artist genres (lowercased)
GENRE_KEYWORDS = {
    ""russian"", ""russia"", ""ru"", ""—Ä—É—Å"", ""—Ä—É"", ""soviet"", ""—Ä—É—Å—Å–∫–∏–π"", ""cccp"", ""russkiy"", ""russky"",
    ""russian hip hop"", ""russian rap"", ""russian pop"", ""russian rock""
}

# Optional: add specific artist IDs you want to always treat as Russian (override)
ALWAYS_RUSSIAN_ARTIST_IDS = set()  # e.g., {""0Xb4bTQ9C7k2rgnAru8v9A""}

# Optional: add specific artist IDs you want to exclude (never Russian)
NEVER_RUSSIAN_ARTIST_IDS = set()

# ------------------------------------------------

def has_cyrillic(text: str) -> bool:
    if not text:
        return False
    for ch in text:
        if ""CYRILLIC"" in unicodedata.name(ch, """"):
            return True
    return False

def chunked(iterable: Iterable, n: int) -> Iterable[List]:
    buf = []
    for item in iterable:
        buf.append(item)
        if len(buf) == n:
            yield buf
            buf = []
    if buf:
        yield buf

def safe_call(fn, *args, **kwargs):
    """"""Retry on rate limits (HTTP 429).""""""
    while True:
        try:
            return fn(*args, **kwargs)
        except SpotifyException as e:
            if e.http_status == 429:
                retry_after = int(e.headers.get(""Retry-After"", ""2""))
                time.sleep(retry_after + 1)
                continue
            raise

def get_or_create_playlist(sp: Spotify, user_id: str, name: str, public: bool) -> str:
    # Try to find existing playlist by exact name (first page or two is enough for most users)
    results = safe_call(sp.current_user_playlists, limit=50)
    while results:
        for pl in results[""items""]:
            if pl[""name""] == name and pl[""owner""][""id""] == user_id:
                return pl[""id""]
        if results.get(""next""):
            results = safe_call(sp.next, results)
        else:
            break
    # Create if not found
    created = safe_call(sp.user_playlist_create, user=user_id, name=name, public=public, description=""Auto-collected Russian songs from Liked"")
    return created[""id""]

def classify_track(sp: Spotify, track_obj: Dict, artist_cache: Dict[str, Dict]) -> tuple[bool, str]:
    """"""
    Returns (True, reason) if the track is considered 'Russian' by heuristics.
    Returns (False, """") otherwise.
    """"""
    track_name = (track_obj.get(""name"") or """").strip()

    # Heuristic 1: Cyrillic in track title
    if has_cyrillic(track_name):
        return True, f""Cyrillic in track title: '{track_name}'""

    artists = track_obj.get(""artists"") or []
    artist_ids = [a[""id""] for a in artists if a.get(""id"")]
    artist_names = [a.get(""name"") or """" for a in artists]

    # Heuristic 2: Cyrillic in any artist name
    for artist_name in artist_names:
        if has_cyrillic(artist_name):
            return True, f""Cyrillic in artist name: '{artist_name}'""

    # Respect explicit overrides
    if any(aid in ALWAYS_RUSSIAN_ARTIST_IDS for aid in artist_ids):
        return True, ""Artist in ALWAYS_RUSSIAN_ARTIST_IDS""
    if any(aid in NEVER_RUSSIAN_ARTIST_IDS for aid in artist_ids):
        return False, """"

    # Heuristic 3: genre-based
    # Fetch artist details (cached)
    to_fetch = [aid for aid in artist_ids if aid and aid not in artist_cache]
    for chunk in chunked(to_fetch, 50):
        if chunk:
            arts = safe_call(sp.artists, chunk)
            for a in arts[""artists""]:
                artist_cache[a[""id""]] = a

    for aid in artist_ids:
        a = artist_cache.get(aid)
        if not a:
            continue
        artist_name = a.get(""name"", ""Unknown"")
        genres = [g.lower() for g in (a.get(""genres"") or [])]
        for genre in genres:
            for keyword in GENRE_KEYWORDS:
                # Use word boundary matching to avoid false positives
                # e.g., ""ru"" shouldn't match ""ruby"" or ""grunge""
                if re.search(r'\b' + re.escape(keyword) + r'\b', genre):
                    return True, f""Genre match: '{genre}' (artist: {artist_name}, keyword: '{keyword}')""

    return False, """"

def load_cache() -> Dict:
    if not CACHE_FILE.is_file():
        return {}
    with CACHE_FILE.open(""r"", encoding=""utf-8"") as f:
        return json.load(f)

def save_cache(data: Dict):
    with CACHE_FILE.open(""w"", encoding=""utf-8"") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_playlist_tracks(sp: Spotify, playlist_id: str) -> set:
    """"""Get all track URIs currently in the playlist to avoid duplicates.""""""
    track_uris = set()
    results = safe_call(sp.playlist_items, playlist_id, limit=100)
    while results:
        for item in results.get(""items"", []):
            track = item.get(""track"")
            if track and track.get(""uri""):
                track_uris.add(track[""uri""])
        if results.get(""next""):
            results = safe_call(sp.next, results)
        else:
            break
    return track_uris

def main():
    # Auth
    scope = ""user-library-read playlist-modify-private playlist-modify-public user-library-modify""
    sp = Spotify(auth_manager=SpotifyOAuth(scope=scope))
    me = safe_call(sp.current_user)
    user_id = me[""id""]

    # Load cached artist data
    cache_data = load_cache()
    artist_cache = cache_data.get(""artists"", {})

    playlist_id = get_or_create_playlist(sp, user_id, PLAYLIST_NAME, PLAYLIST_PUBLIC)

    print(f""Collecting Russian tracks from Liked Songs into playlist: {PLAYLIST_NAME}"")
    print(f""Playlist ID: {playlist_id}"")

    # Get existing playlist tracks to avoid duplicates
    print(""Checking existing playlist contents..."")
    existing_tracks = get_playlist_tracks(sp, playlist_id)
    print(f""Found {len(existing_tracks)} tracks already in playlist"")

    # Iterate through liked tracks
    russian_track_uris = []
    results = safe_call(sp.current_user_saved_tracks, limit=50)
    total = results.get(""total"", 0)
    processed = 0

    while True:
        items = results.get(""items"", [])
        for item in items:
            track = item.get(""track"")
            if not track:
                continue
            processed += 1

            uri = track.get(""uri"")

            # Skip if already in playlist
            if uri in existing_tracks:
                continue

            try:
                is_russian, reason = classify_track(sp, track, artist_cache)
                if is_russian:
                    track_name = track.get(""name"", ""Unknown"")
                    artists_str = "", "".join([a.get(""name"", """") for a in track.get(""artists"", [])])
                    print(f""‚úì [{track_name}] by [{artists_str}] - {reason}"")
                    if uri:
                        russian_track_uris.append(uri)
            except Exception as e:
                # Log and keep going
                tname = (track.get(""name"") or ""Unknown"").encode(""utf-8"", ""ignore"")
                print(f""[WARN] Failed to classify track: {tname} | {e}"")

        if processed % 100 == 0:
            print(f""Processed {processed}/{total} liked tracks..."")
            time.sleep(0.5)  # Small delay every 100 tracks to avoid rate limits

        if results.get(""next""):
            results = safe_call(sp.next, results)
        else:
            break

    print(f""Processed {processed}/{total} liked tracks total"")

    # Add to playlist in batches
    if russian_track_uris:
        print(f""Found {len(russian_track_uris)} new Russian tracks to add"")
        added = 0
        for chunk in chunked(russian_track_uris, BATCH_SIZE):
            safe_call(sp.playlist_add_items, playlist_id, chunk)
            added += len(chunk)
            print(f""Added {added}/{len(russian_track_uris)} to playlist"")
            time.sleep(0.3)  # Small delay between batches

        # Optional: unlike after moving
        if REMOVE_FROM_LIKED:
            removed = 0
            # Convert URIs to IDs
            ids = [uri.split("":"")[-1] for uri in russian_track_uris]
            for chunk in chunked(ids, BATCH_SIZE):
                safe_call(sp.current_user_saved_tracks_delete, chunk)
                removed += len(chunk)
                print(f""Removed {removed}/{len(ids)} from Liked Songs"")
                time.sleep(0.3)  # Small delay between batches

        print(f""Done. Moved {len(russian_track_uris)} new tracks to '{PLAYLIST_NAME}'."")
    else:
        print(""No new Russian tracks to add."")

    # Save updated cache
    save_cache({""artists"": artist_cache})

if __name__ == ""__main__"":
    main()
"
yh1PmUAv,Ethan's Item Caching Things,emd22,C++,Friday 24th of October 2025 03:30:45 PM CDT,"#pragma once

#include <Core/FxBitset.hpp>
#include <Core/FxHash.hpp>
#include <Core/FxSizedArray.hpp>
#include <map>

/**
 * @brief Cache section that can hold any number of items.
 */
template <typename TItemType>
struct FxItemCacheSection_MultiItem
{
    FxBitset ItemsInUse;
    FxSizedArray<TItemType> Items;

public:
    void Create(uint32 max_items)
    {
        Items.Create(max_items);
        ItemsInUse.InitZero(max_items);
    }

    TItemType* RequestNewItem()
    {
        int index = ItemsInUse.FindNextFreeBit();

        if (index == FxBitset::scNoFreeBits) {
            return nullptr;
        }

        ItemsInUse.Set(index);

        return &Items[index];
    }

    void ReleaseItem(TItemType* item)
    {
        auto item_index = Items.GetItemIndex(item);

        // If the item was found, clear the bit
        if (item_index != FxSizedArray<TItemType>::scItemNotFound) {
            ItemsInUse.Unset(item_index);
        }
    }
};


/**
 * @brief Cache section that holds a single item.
 */
template <typename TItemType>
struct FxItemCacheSection_SingleItem
{
    using ItemType = TItemType;

    TItemType* pItem = nullptr;
    bool bInUse : 1 = 0;

public:
    void Create(uint32 max_items) { pItem = FxMemPool::Alloc<TItemType>(sizeof(TItemType)); }

    TItemType* RequestNewItem()
    {
        if (bInUse) {
            return nullptr;
        }

        bInUse = true;

        return pItem;
    }

    void ReleaseItem(TItemType* item)
    {
        if (pItem != item) {
            return;
        }

        bInUse = false;
    }
};

template <typename T, typename TItemType>
concept C_IsItemCacheSection =
    C_IsAnyBaseOf<T, FxItemCacheSection_MultiItem<TItemType>, FxItemCacheSection_SingleItem<TItemType>>;

template <typename TKeyType, typename TItemType, typename TCacheSectionType>
    requires C_IsItemCacheSection<TCacheSectionType, TItemType>
class FxItemCache
{
public:
    using KeyType = TKeyType;

public:
    FxItemCache() = default;

    void Create(uint32 max_items_per_section) { mItemsPerSection = max_items_per_section; }


    bool IsItemInCache(TKeyType key)
    {
        auto section_it = mCache.find(key);

        return (section_it == mCache.end());
    }

    TItemType* RequestGenericItem(TKeyType key)
    {
        auto section_it = mCache.find(key);

        if (section_it == mCache.end()) {
            CreateCacheSection(key, mItemsPerSection);
            auto section_it = mCache.find(key);

            FxAssert(section_it != mCache.end());
        }

        TCacheSectionType& section = section_it->second;

        return section.RequestNewItem();
    }

    void ReleaseGenericItem(TKeyType key, TItemType* item)
    {
        auto section_it = mCache.find(key);

        if (section_it == mCache.end()) {
            FxLogError(""Could not find cache section to free from!"");
            return;
        }

        TCacheSectionType& section = section_it->second;

        auto item_index = section.Items.GetItemIndex(item);

        // If the item was found, clear the bit
        if (item_index != FxSizedArray<TItemType>::scItemNotFound) {
            section.ItemsInUse.Unset(item_index);
        }
    }

    void Destroy();

    virtual ~FxItemCache() { Destroy(); }

protected:
    TCacheSectionType& CreateCacheSection(TKeyType key, uint32 number_of_items)
    {
        TCacheSectionType cache_section {};

        cache_section.Items.InitCapacity(number_of_items);
        cache_section.ItemsInUse.InitZero(number_of_items);

        auto iter = mCache.insert({ key, std::move(cache_section) });

        return iter.first->second;
    }

public:
    std::unordered_map<TKeyType, TCacheSectionType> mCache;

protected:
    uint32 mItemsPerSection = 0;
};

/**
 * @brief A temporary handle that is available only for the current scope.
 */
template <typename TKeyType, typename TItemType, typename TCacheType>
struct FxItemCacheHandle
{
    using CacheType = TCacheType;
    using KeyType = TKeyType;

public:
    FxItemCacheHandle(TCacheType* cache, TItemType* item, TKeyType key) : Item(item), Key(key), mCache(cache) {}
    FxItemCacheHandle(const FxItemCacheHandle& other) = delete;
    FxItemCacheHandle(FxItemCacheHandle&& other)
    {
        Item = other.Item;
        Key = other.Key;

        mCache = other.mCache;

        other.Item = nullptr;
    }

    /**
     * @brief Releases the handle before the destructor is called.
     */
    FX_FORCE_INLINE void Release()
    {
        if (Item == nullptr) {
            return;
        }

        mCache->ReleaseGenericItem(Key, Item);
    }

    ~FxItemCacheHandle() { Release(); }

    TItemType* operator->() { return Item; }
    TItemType& operator*() { return *Item; }

public:
    TItemType* Item = nullptr;
    TKeyType Key;

private:
    CacheType* mCache;
};
"
ECY6i9v5,üíé ChangeNOW Exploit üî•üî•,biggu_ribousuki,JavaScript,Friday 24th of October 2025 03:26:52 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 40eq08qvrznan7krshbggn3s7300xl4af6mtcdjn06b8eflj4x
"
unBUksiL,Donate XMR TO FREAK,KekSec420,C,Friday 24th of October 2025 03:06:23 PM CDT,"44qYaVHpLreEb3cisNpNsPEZWqzMxqVz4SNRF1hnAGYDZ8TdMsBTZQVZ6yhThqG2EREbHKrLuRs2i4pULuoBbXDR5tPEERZ

Donate XMRz to Freak so he can get freaky!!!"
dr27rcdR,‚≠ê‚≠ê‚≠êGMAIL Logs (2FA disabled)‚≠ê‚≠ê,Luca34621,Java,Friday 24th of October 2025 02:58:13 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

b4i1159K
"
tGQMsRCv,‚≠ê‚≠ê‚≠êMAKE $900 INSTANTLY‚≠ê‚≠ê,Luca34621,Java,Friday 24th of October 2025 02:58:02 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

Y3O8wRfX
"
yMwV8CLt,‚≠ê‚≠ê‚≠êMAKE $900 INSTANTLY‚≠ê‚≠ê,Luca34621,Java,Friday 24th of October 2025 02:57:51 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

ORgTECQf
"
G4z6pHJY,‚≠ê‚≠ê‚≠êCrypto Accounts‚≠ê‚≠ê,Luca34621,Java,Friday 24th of October 2025 02:57:39 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

o84laxHF
"
qmK0Audq,‚≠êMake $15OO in 2O minutes‚≠ê üö®üö®,biggu_ribousuki,JavaScript,Friday 24th of October 2025 02:53:29 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: tghcn6wxbzhphabgcrowh3obg6108mbz8d2pwcuenbtgt4es0z
"
3QSGZG7S,Checkpoint System,MysteriaFool,Lua,Friday 24th of October 2025 02:44:52 PM CDT,"
local CaptureDistance = 40
local UpdateRate = 0.5 
local MAIN_MENU_PLACE_ID = 118884121023860
local TELEPORT_DELAY_AFTER_SOUND = 3


local PLAYER_WEIGHT = 1
local DEFENDER_NPC_WEIGHT = 0.6
local ATTACKER_NPC_WEIGHT = 0.6

local TweenService = game:GetService(""TweenService"")
local Players = game:GetService(""Players"")
local TeamsService = game:GetService(""Teams"")
local RunService = game:GetService(""RunService"")
local TeleportService = game:GetService(""TeleportService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
 
local PointChangedEvent = ReplicatedStorage:FindFirstChild(""PointChanged"")
if not PointChangedEvent then
	PointChangedEvent = Instance.new(""BindableEvent"")
	PointChangedEvent.Name = ""PointChanged""
	PointChangedEvent.Parent = ReplicatedStorage
end

local CaptureValues = {}
local PartIndex = {}
local Locked = {}
local RobotsDefender = {}
local RobotsAttacker = {}

local parts = {}
for _, child in ipairs(script.Parent:GetChildren()) do
	if child:IsA(""BasePart"") or child:IsA(""Part"") then
		table.insert(parts, child)
	end
end
table.sort(parts, function(a,b) return a.Name < b.Name end)

local function Tween(Obj, Prop, New, Time)
	Time = Time or 0.1
	local Tweened = TweenService:Create(Obj, TweenInfo.new(Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {[Prop] = New})
	Tweened:Play()
	return {Stop = function() Tweened:Cancel() end}
end

local function UpdateRobotList()
	RobotsDefender = {}
	RobotsAttacker = {}
	for _, v in ipairs(workspace:GetDescendants()) do
		if v:IsA(""Model"") and v:FindFirstChildOfClass(""Humanoid"") and v:FindFirstChild(""HumanoidRootPart"") then
			local name = v.Name or """"
			if name:find(""Arctic Wolf"") then
				table.insert(RobotsDefender, v)
			elseif name:find(""SonsOfHorus"") then
				table.insert(RobotsAttacker, v)
			elseif name:find(""CT-"") then
				table.insert(RobotsDefender, v)
			elseif name:find(""B1-"") or name:find(""B2-"") then
				table.insert(RobotsAttacker, v)
			end
		end
	end
end
UpdateRobotList()
 
Players.PlayerAdded:Connect(function(plr)
	plr.CharacterAdded:Connect(function()
		task.delay(2, UpdateRobotList)
	end)
end)

local function GetPlayersNear(Pos)
	local DefenderCount = 0
	local AttackerCount = 0
	
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") and player.Character:FindFirstChildOfClass(""Humanoid"") then
			if (player.Character.HumanoidRootPart.Position - Pos).Magnitude <= CaptureDistance then
				if player.Team then
					if player.Team.Name == ""Emperor"" then
						DefenderCount = DefenderCount + PLAYER_WEIGHT
					elseif player.Team.Name == ""Horus"" then
						AttackerCount = AttackerCount + PLAYER_WEIGHT
					end
				end
			end
		end
	end
	
	return DefenderCount, AttackerCount
end
 
local function GetDefenderNPCsNear(Pos)
	local Near = 0
	for _, ally in ipairs(RobotsDefender) do
		if ally and ally.Parent and ally:FindFirstChild(""HumanoidRootPart"") and ally:FindFirstChildOfClass(""Humanoid"") then
			if (ally.HumanoidRootPart.Position - Pos).Magnitude <= CaptureDistance then
				Near = Near + DEFENDER_NPC_WEIGHT
			end
		end
	end
	return Near
end
 
local function GetAttackerNPCsNear(Pos)
	local Near = 0
	for _, enemy in ipairs(RobotsAttacker) do
		if enemy and enemy.Parent and enemy:FindFirstChild(""HumanoidRootPart"") and enemy:FindFirstChildOfClass(""Humanoid"") then
			if (enemy.HumanoidRootPart.Position - Pos).Magnitude <= CaptureDistance then
				Near = Near + ATTACKER_NPC_WEIGHT
			end
		end
	end
	return Near
end

for index, part in ipairs(parts) do
	local capVal = part:FindFirstChild(""Captured"")
	local isRep = part:FindFirstChild(""IsRepublic"")
	local hudBar = nil
	if part:FindFirstChild(""HUD"") and part.HUD:FindFirstChild(""Capturing"") then
		hudBar = part.HUD.Capturing
	end
 
	if capVal and isRep and hudBar then
		capVal.Value = 100
		isRep.Value = true
		Locked[part] = false
		table.insert(CaptureValues, {Part = part, Captured = capVal, IsRepublic = isRep, HUD = hudBar})
		PartIndex[part] = #CaptureValues
	else
		warn(""Capture part missing children:"", part:GetFullName())
	end
end
 
local function PreviousIsCapturedByAttackers(index)
	if index <= 1 then return true end
	local prev = CaptureValues[index - 1]
	if prev then
		return (prev.Captured.Value >= 100) and (prev.IsRepublic.Value == false)
	end
	return false
end

local function ShowFallback(fallbackName)
	print(""Showing fallback:"", fallbackName)
	
	for _, player in ipairs(Players:GetPlayers()) do
		if player:FindFirstChild(""PlayerGui"") and player.PlayerGui:FindFirstChild(""CaptureSystem"") then
			local gui = player.PlayerGui.CaptureSystem
			if gui:FindFirstChild(fallbackName) then
				gui[fallbackName].Visible = true
				task.delay(4, function()
					if gui:FindFirstChild(fallbackName) then
						gui[fallbackName].Visible = false
					end
				end)
			end
		end
	end

	local fbSound = script.Parent:FindFirstChild(""FallbackSound"")
	if fbSound and fbSound:IsA(""Sound"") then
		fbSound:Play()
	end
end

local function Connection(entry)
	local Part = entry.Part
	local CapturedValue = entry.Captured
	local IsRepublic = entry.IsRepublic
	local HUDBar = entry.HUD
	local idx = PartIndex[Part]
 
	task.spawn(function()
		local LastCaptureValue = CapturedValue.Value
		while Part and Part.Parent do
			task.wait(0.1)
			if HUDBar and CapturedValue then
				if LastCaptureValue ~= CapturedValue.Value then
					local size = math.clamp(CapturedValue.Value / 100, 0, 1)
					Tween(HUDBar, ""Size"", UDim2.new(1, 0, size, 0), 0.12)
					LastCaptureValue = CapturedValue.Value
				end
			else
				break
			end
		end
	end)
 
	while Part and Part.Parent do
		task.wait(UpdateRate)
		if math.random(1, 12) == 1 then
			UpdateRobotList()
		end

		local playerDefenders, playerAttackers = GetPlayersNear(Part.Position)
		local defendersNearby = playerDefenders + GetDefenderNPCsNear(Part.Position)
		local attackersNearby = playerAttackers + GetAttackerNPCsNear(Part.Position)
 
		if CapturedValue.Value > 100 then CapturedValue.Value = 100 end
		if CapturedValue.Value < 0 then CapturedValue.Value = 0 end
 
		if CapturedValue.Value < 1 and not Locked[Part] then
			if defendersNearby > attackersNearby then
				IsRepublic.Value = true
			elseif attackersNearby > defendersNearby then
				IsRepublic.Value = false
			end
		end
 
		if IsRepublic.Value then
			HUDBar.BackgroundColor3 = Color3.fromRGB(131, 255, 251)
		else
			HUDBar.BackgroundColor3 = BrickColor.new(""Earth green"").Color
		end
 
		local attackersAllowedToProgress = PreviousIsCapturedByAttackers(idx)
		local isLocked = Locked[Part]
 
		if CapturedValue.Value < 100 then
			if IsRepublic.Value and defendersNearby > 0 and not isLocked then
				CapturedValue.Value = math.min(100, CapturedValue.Value + defendersNearby)
			elseif (not IsRepublic.Value) and attackersNearby > 0 then
				if attackersAllowedToProgress then
					CapturedValue.Value = math.min(100, CapturedValue.Value + attackersNearby)
				end
			elseif defendersNearby == 0 and attackersNearby == 0 and CapturedValue.Value > 0 and not isLocked then
				CapturedValue.Value = math.max(0, CapturedValue.Value - 0.5)
			end
		end
 
		if not isLocked then
			if IsRepublic.Value and attackersNearby > defendersNearby and CapturedValue.Value > 0 then
				CapturedValue.Value = math.max(0, CapturedValue.Value - attackersNearby)
			elseif (not IsRepublic.Value) and defendersNearby > attackersNearby and CapturedValue.Value > 0 then
				CapturedValue.Value = math.max(0, CapturedValue.Value - defendersNearby)
			end
		else
			if not IsRepublic.Value and attackersNearby > 0 and CapturedValue.Value < 100 and attackersAllowedToProgress then
				CapturedValue.Value = math.min(100, CapturedValue.Value + attackersNearby)
			end
		end
 
		if CapturedValue.Value >= 100 and IsRepublic.Value == false and not Locked[Part] then
			Locked[Part] = true
			IsRepublic.Value = false
			print((""Point %s locked to attackers""):format(Part.Name))

			local nextPoint = nil
			if Part.Name == ""A"" then
				nextPoint = ""B""
				ShowFallback(""Fallback1"")
			elseif Part.Name == ""B"" then
				nextPoint = ""C""
				ShowFallback(""Fallback2"")
			elseif Part.Name == ""C"" then
				nextPoint = nil
			end

			if nextPoint then
				local success, err = pcall(function()
					PointChangedEvent:Fire(nextPoint)
				end)
				if not success then
					warn(""Failed firing PointChangedEvent:"", err)
				end
			end
		end
	end
end
 
for _, entry in ipairs(CaptureValues) do
	task.spawn(function()
		Connection(entry)
	end)
end

while task.wait(1) do
	local allCapturedByAttackers = true
	for _, entry in ipairs(CaptureValues) do
		if not (entry.Captured.Value >= 100 and entry.IsRepublic.Value == false) then
			allCapturedByAttackers = false
			break
		end
	end
 
	if allCapturedByAttackers then
		for _, player in ipairs(Players:GetPlayers()) do
			if player:FindFirstChild(""PlayerGui"") and player.PlayerGui:FindFirstChild(""CaptureSystem"") then
				local gui = player.PlayerGui.CaptureSystem
				
				if player.Team and player.Team.Name == ""Emperor"" then
					if gui:FindFirstChild(""Lost"") then
						gui.Lost.Visible = true
					end
				elseif player.Team and player.Team.Name == ""Horus"" then
					if gui:FindFirstChild(""Won"") then
						gui.Won.Visible = true
					end
				end
			end
		end
 
		local soundObj = script.Parent:FindFirstChild(""VictorySound"")
		if soundObj and soundObj.Play then
			soundObj:Play()
		end
 
		task.wait(TELEPORT_DELAY_AFTER_SOUND)
		for _, player in ipairs(Players:GetPlayers()) do
			if player and player.Parent then
				local success, err = pcall(function()
					TeleportService:Teleport(MAIN_MENU_PLACE_ID, player)
				end)
				if not success then
					warn(""Teleport failed for"", player.Name, err)
				end
				task.wait(0.2)
			end
		end
		while true do task.wait(1) end
	end
end"
MbS8XRUd,useSupabaseAuth,ashkanahmadi,TypeScript,Friday 24th of October 2025 02:33:56 PM CDT,"import { supabase } from '@/utils/supabase/supabase'
import { AppState, AppStateStatus } from 'react-native'

import type { Session, User } from '@supabase/supabase-js'
import { createContext, useContext, useEffect, useMemo, useState } from 'react'

// Tells Supabase Auth to continuously refresh the session automatically if
// the app is in the foreground. When this is added, you will continue to receive
// `onAuthStateChange` events with the `TOKEN_REFRESHED` or `SIGNED_OUT` event
// if the user's session is terminated. This should only be registered once.
// AppState.addEventListener('change', state => {
//   if (state === 'active') {
//     supabase.auth.startAutoRefresh()
//   } else {
//     supabase.auth.stopAutoRefresh()
//   }
// })

type AuthContextValue = {
  isAuthLoading: boolean
  isAuthenticated: boolean
  session: Session | null
  user: User | null
  signInWithEmailAndPassword: (email: string, password: string) => Promise<{ data: { user: User | null; session: Session | null } | null; error: any }>
  signOut: () => Promise<{ error: any }>
}

const SupabaseAuthContext = createContext<AuthContextValue | null>(null)

export default function SupabaseAuthProvider({ children }: { children: React.ReactNode }) {
  const [isAuthLoading, setIsAuthLoading] = useState(false)
  const [session, setSession] = useState<null | Session>(null)
  const [user, setUser] = useState<null | User>(null)
  const isAuthenticated = !!(session && user)

  // 1) Initial load + auth change subscription
  useEffect(() => {
    let mounted = true

    ;(async () => {
      const { data, error } = await supabase.auth.getSession()
      if (!mounted) return
      if (!error) {
        setSession(data.session ?? null)
        setUser(data.session?.user ?? null)
      }
      setIsAuthLoading(false)
    })()

    const { data: sub } = supabase.auth.onAuthStateChange((_event, newSession) => {
      setSession(newSession)
      setUser(newSession?.user ?? null)
    })

    return () => {
      mounted = false
      sub?.subscription?.unsubscribe?.()
    }
  }, [])

  // 2) Auto refresh while app is active (with cleanup)
  useEffect(() => {
    const handleAppState = (state: AppStateStatus) => {
      if (state === 'active') {
        supabase.auth.startAutoRefresh()
      } else {
        supabase.auth.stopAutoRefresh()
      }
    }

    const sub = AppState.addEventListener('change', handleAppState)
    // start immediately if already active
    handleAppState(AppState.currentState)

    return () => {
      supabase.auth.stopAutoRefresh()
      sub.remove()
    }
  }, [])

  async function signInWithEmailAndPassword(email: string, password: string) {
    // setIsAuthLoading(true)

    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (data || !error) {
      setSession(data.session)
      setUser(data.user)
    }
    // setIsAuthLoading(false)

    return { data, error }
  }

  async function signOut() {
    // setIsAuthLoading(true)

    const { error } = await supabase.auth.signOut()

    if (!error) {
      setSession(null)
      setUser(null)
    }

    return { error }
  }

  const value = useMemo<AuthContextValue>(
    () => ({
      isAuthLoading,
      isAuthenticated,
      session,
      user,
      signInWithEmailAndPassword,
      signOut,
    }),
    [isAuthLoading, isAuthenticated, session, user]
  )

  return <SupabaseAuthContext.Provider value={value}>{children}</SupabaseAuthContext.Provider>
}

export const useSupabaseAuth = () => {
  const context = useContext(SupabaseAuthContext)

  if (!context) throw new Error('useSupabaseAuth must be used within SupabaseAuthProvider')

  return context
}
"
S4aGd1TF,Untitled,Josif_tepe,C++,Friday 24th of October 2025 02:32:32 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>
#include <map>
using namespace std;
    int prefs[1000][1000];
 
    int query(int row, int i, int j) {
            if(i == 0) {
                return prefs[row][j];
            }
            return prefs[row][j] - prefs[row][i - 1];
    }
 
int main()
{
    int n,q;
    cin>>n>>q;
    char x[n][n];
    int y[n][n];
    for(int i =0;i<n;i++){
        for(int j = 0;j<n;j++){
            cin>>x[i][j];
        }
    }
 
    for(int i =0;i<n;i++){
        for(int j = 0;j<n;j++){
            if(x[i][j]=='*'){
                y[i][j]=1;
            }else if(x[i][j]=='.'){
                y[i][j]=0;
            }
        }
    }
 
    int sum=0;
 
    for(int i =0;i<n;i++){
        sum=0;
        for(int j = 0;j<n;j++){
           sum+=y[i][j];
           prefs[i][j]=sum;
        }
    }
    int x1,y1,x2,y2;
    for(int i=0;i<q;i++){
        int sum=0;
        cin>>x1>>y1>>x2>>y2;
        x1--;
        x2--;
        y1--;
        y2--;
        for(int j =x1;j<=x2;j++){
            int x=query(j,y1,y2);
            sum+=x;
        }
        cout<<sum<<endl;
    }
 
 
 
    return 0;
}
"
7LdMbpjF,‚≠ê‚≠ê‚≠êMake $15OO in 2O minutesV E‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:29:39 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

M3DwaBkQ
"
W9pQaCvL,‚≠ê‚≠ê‚≠êExploit 500$ in 15 Minutes‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:29:29 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

nOnvp1DT
"
1ANJ1fp4,‚≠ê‚≠ê‚≠êFree Giftcards Method‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:29:18 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

T4CKSNm6
"
aLE8YgpW,‚≠ê‚≠ê‚≠êGMAIL Logs (2FA disabled)‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:29:07 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

khZbVkjU
"
kYC75Zs7,‚≠ê‚≠ê‚≠êCrypto Accounts‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:28:56 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

YWx8DwFk
"
y1yM7f2m,‚≠ê‚≠ê‚≠êExchange Exploit T I‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:28:45 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

7JIIJMWo
"
Jwskg1qW,‚≠ê‚≠ê‚≠êInstant Profit Method‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:28:35 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

1byyDMBO
"
8MxwnGcc,‚≠ê‚≠ê‚≠êCrypto Accounts‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:28:24 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

S8vNALud
"
TfpFLXGF,‚≠ê‚≠ê‚≠êExploit 500$ in 15 Minutes‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:28:13 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

mOUd2olr
"
tEVpDUUL,‚≠ê‚≠ê‚≠êMAKE $1000 INSTANTLY‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:28:03 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

oc0ISiA3
"
UAYrSZZV,‚≠ê‚≠ê‚≠êMake $1500 in 20 minutes‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:27:52 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

pNDjNHch
"
mfGktK40,‚≠ê‚≠ê‚≠êMAKE $500 IN 15 MIN‚≠ê‚≠ê,JerosGamer89,Java,Friday 24th of October 2025 02:27:41 PM CDT,"


JOIN USING THE LINK BELOW


t.me/ad8185

x6IZc5dp
"
dVH8m0PJ,‚≠êProfit Method‚≠ê üìùüíµ,biggu_ribousuki,JavaScript,Friday 24th of October 2025 02:20:06 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 1vwvhnjgnl8t8q6enu7x3gdbpbuq4e3xwxaw1fwqbt5gngzxvu
"
ZEqteU3Q,Untitled,BobMilli,PowerShell,Friday 24th of October 2025 02:12:21 PM CDT,"
  shlink:
    image: shlinkio/shlink:latest
    container_name: shlink
    restart: unless-stopped
    ports:
      - ""8082:8080""
    environment:
      - DEFAULT_DOMAIN=shrt.xxxx.fr
      - IS_HTTPS_ENABLED=true
      - DB_DRIVER=postgres
      - DB_NAME=shlink
      - DB_USER=shlink
      - DB_PASSWORD=shlinkpass
      - DB_HOST=postgres
      - DB_PORT=5432
      - GEOLITE_LICENSE_KEY=xxxxxxxxxxxxxxxxxxxxxxx
    networks:
      - caddy-webnet

  shlink-web-client:
    image: shlinkio/shlink-web-client:latest
    container_name: shlink_web_client
    restart: unless-stopped
    environment:
      - SHLINK_SERVER_URL=http://shlink:8082
      - SHLINK_SERVER_API_KEY=1xxxxxxxxxxxxxxxxx
    ports:
      - ""3200:80""
    networks:
      - caddy-webnet
    depends_on:
      - shlink"
WuepFBFK,üî• Exchange profit method üìùüö®,biggu_ribousuki,JavaScript,Friday 24th of October 2025 01:46:40 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: bvkan6oeb95ajslkjxw0kgaqpxkqwbe2sthwj7g1nypje56vz1
"
qsFHuk3W,Two layers,RTS_Dmitriy,Lua,Friday 24th of October 2025 01:33:31 PM CDT,"-- 1 - obsidian
-- 2 - quartz

shrek1={
           {},
           {},
           {1,1,1,1,1,1},
           {2,0,0,0,0,1},
           {2},
           {2,0,0,0,0,1},
           {1,1,1,1,1,1},
       }

shrek2={
           {},
           {},
           {2,3,3,3,3,1},
           {1,0,0,0,0,3},
           {1},
           {1,0,0,0,0,3},
           {2,3,3,3,3,1},
       }

shrek3={
           {1,0,0,0,0,1},
           {4,0,0,0,0,1},
           {1,3,3,3,3,1},
           {5,0,0,0,0,3},
           {1,0,0,0,0,3},
           {5,0,0,0,0,3},
           {1,3,3,3,3,1},
           {4,0,0,0,0,1},
           {1,0,0,0,0,1},
       }

shrek4={
    	   {},
           {1,0,0,0,0,1},
           {1,1,1,1,1,1},
           {5,0,0,0,0,1},
           {1,0,0,0,0,1},
           {5,0,0,0,0,1},
           {1,1,1,1,1,1},
           {1,0,0,0,0,1},
       }

shrek5={
           {},
           {},
           {2,2,2,2,2,2},
           {2,2,2,2,2,2},
           {2,2,2,2,2,2},
           {2,2,2,2,2,2},
           {2,2,2,2,2,2},
       }

 shrek6={
            {},
            {},
            {},
            {6,6,6,6,6,6},
            {6,6,6,6,6,6},
            {6,6,6,6,6,6},
        }
 
shrek7={
           {},
           {},
           {},
           {},
           {6,6,6,6,6,6}
       }
       
function buildLine (colors)
	for i = 1,#colors do
		slot = colors[i]
        if slot~=0 then
 		  turtle.select(slot)
   	 	  turtle.placeDown()
        end
 		turtle.forward()
	end
	turtle.turnRight()
	turtle.forward()
	turtle.turnLeft()
	for e = 1,#colors do
		turtle.back()
	end
end

function buildLayer(image)
    for i=1,#image do
         line=image[i]
         buildLine(line)
    end
  turtle.turnLeft()
 for i=1,#image do
    turtle.forward()
  end
  turtle.turnRight()
  turtle.up()
end


buildLayer(shrek1)
buildLayer(shrek2)
buildLayer(shrek3)
buildLayer(shrek4)
buildLayer(shrek5)
buildLayer(shrek6)
buildLayer(shrek7)"
ZVqyQkNh,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö° üî•üìù,biggu_ribousuki,JavaScript,Friday 24th of October 2025 01:13:16 PM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: dplgmwtop9kl1heb7zrff6w9dz2fn6qq6ydvew27ykn90vekrf
"
