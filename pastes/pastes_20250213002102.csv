id,title,username,language,date,content
Ud4TChku,⭐ giftcards for free,yoboigoku,JavaScript,Wednesday 12th of February 2025 06:19:21 PM CDT,"https://g2afree.info <--- free giftcards guide #675213
"
asmpgM6d,⭐ FREE giftcards method,lcarrico,JavaScript,Wednesday 12th of February 2025 06:19:05 PM CDT,"https://g2afree.info <--- free giftcards guide #449464
"
dEqQjiCE,⭐ giftcards for free,x180,JavaScript,Wednesday 12th of February 2025 06:19:01 PM CDT,"https://g2afree.info <--- free giftcards guide #900519
"
4QcX77D4,⭐ GET 5OO$ GIFT CARD T1,thysf,JavaScript,Wednesday 12th of February 2025 06:18:46 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #N449FPPt3E

"
kRPFBMYy,⭐ [NOOB] Make $800-$2400 DAY⭐ YU,thysf,JavaScript,Wednesday 12th of February 2025 06:18:40 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #SULOPsq7zl

"
xqrcNBge,⭐️ EASY to Make $800 in 10 Minutes S6,thysf,JavaScript,Wednesday 12th of February 2025 06:18:32 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #sz5YLU3heD

"
gZSBrS0i,2025-02-12_stats.json,rdp_snitch,JSON,Wednesday 12th of February 2025 06:18:22 PM CDT,"{
  ""ip"": {
    ""185.42.12.74"": 12,
    ""58.218.199.219"": 15,
    ""194.180.48.19"": 45,
    ""198.235.24.241"": 9,
    ""5.201.128.208"": 18,
    ""194.165.16.37"": 6,
    ""64.23.144.101"": 18,
    ""152.32.183.13"": 3,
    ""23.26.201.222"": 2847,
    ""50.116.4.217"": 12,
    ""50.116.58.172"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""198.235.24.53"": 9,
    ""194.180.49.123"": 3,
    ""92.255.57.11"": 6,
    ""147.185.132.19"": 9,
    ""45.137.201.195"": 3,
    ""45.145.43.234"": 6,
    ""173.0.109.156"": 252,
    ""206.168.34.41"": 3,
    ""198.235.24.48"": 9
  },
  ""asn"": {
    ""AS59425"": 12,
    ""AS4134"": 15,
    ""AS201814"": 48,
    ""AS396982"": 36,
    ""AS50810"": 18,
    ""AS48721"": 6,
    ""AS14061"": 18,
    ""AS135377"": 3,
    ""AS23470"": 2847,
    ""AS63949"": 15,
    ""AS208046"": 18,
    ""AS207566"": 6,
    ""AS49581"": 3,
    ""AS58212"": 6,
    ""AS14315"": 252,
    ""AS398324"": 3
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 18,
    ""Chinanet"": 15,
    ""MEVSPACE sp. z o.o."": 48,
    ""Google LLC"": 36,
    ""Mobin Net Communication Company (Private Joint Stock)"": 18,
    ""Flyservers S.A."": 6,
    ""DigitalOcean, LLC"": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Internet Utilities NA LLC"": 3099,
    ""Akamai Technologies, Inc."": 15,
    ""ColocationX Ltd."": 18,
    ""Ferdinand Zink trading as Tube-Hosting"": 3,
    ""dataforest GmbH"": 6,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Horizon LLC"": 12,
    ""Chinanet JS"": 15,
    ""HostSlick"": 48,
    ""Palo Alto Networks, Inc"": 36,
    ""Mobin Net Communication Company"": 18,
    ""Flyservers S.A"": 6,
    ""DigitalOcean, LLC"": 18,
    ""Ucloud Information Technology"": 3,
    ""HOSTING-SOLUTIONS"": 2847,
    ""Linode"": 15,
    ""ColocationX Ltd"": 18,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Taurus"": 3,
    ""dataforest GmbH"": 6,
    ""Unknown"": 252,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""Moscow"": 18,
    ""Jiangsu"": 15,
    ""Bavaria"": 48,
    ""California"": 2913,
    ""Tehran"": 18,
    ""Kaunas"": 6,
    ""Virginia"": 264,
    ""New Jersey"": 3,
    ""North Holland"": 9,
    ""Lombardy"": 3,
    ""Hesse"": 6,
    ""Illinois"": 3
  },
  ""country"": {
    ""Russia"": 18,
    ""China"": 15,
    ""Germany"": 54,
    ""United States"": 3183,
    ""Iran"": 18,
    ""Lithuania"": 6,
    ""The Netherlands"": 9,
    ""Italy"": 3
  },
  ""account"": {
    ""Test"": 24,
    ""hello"": 3201,
    ""xSCAmbvgz"": 3,
    ""GEDZgd"": 3,
    ""uiNtxs"": 3,
    ""Administrator"": 3,
    ""ow7gl315"": 12,
    ""beio"": 3,
    ""Domain"": 18,
    ""EDLlgFJgk"": 3,
    ""KfxgQr"": 3,
    ""FDDcIf"": 3,
    ""Administr"": 6,
    ""VsjJIdKqk"": 3,
    ""DidDHS"": 3,
    ""IEMJDf"": 3,
    ""(empty)"": 3,
    ""pKQMtRksH"": 3,
    ""jGhKXR"": 3,
    ""ZQbezo"": 3
  },
  ""keyboard"": {
    ""Unknown"": 3306
  },
  ""client_build"": {
    ""Unknown"": 3306
  },
  ""client_name"": {
    ""Unknown"": 3306
  },
  ""ip_type"": {
    ""proxy"": 78,
    ""hosting"": 3168,
    ""mobile"": 18,
    ""Unknown"": 39,
    ""hosting & proxy"": 3
  }
}"
xtbx2091,⭐ GET 5OO$ GIFT CARD T1,thysf,JavaScript,Wednesday 12th of February 2025 06:18:21 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #toKPKRAXMh

"
reSRQsUe,⭐ [NOOB] Make $800-$2400 DAY⭐ YU,thysf,JavaScript,Wednesday 12th of February 2025 06:18:13 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #OhyQZ6TdUq

"
5CLb0ZZm,⭐️ EASY to Make $800 in 10 Minutes S6,thysf,JavaScript,Wednesday 12th of February 2025 06:18:07 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #u8I6C6yTj7

"
WjqA3EhH,⭐ [PAID METHOD] $9000 IN 20 DAYS⭐ 55,thysf,JavaScript,Wednesday 12th of February 2025 06:18:03 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #ZdjDHJhClh

"
kMVBFjug,⭐ GET 5OO$ GIFT CARD T1,thysf,JavaScript,Wednesday 12th of February 2025 06:17:56 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #8JTnPnLx1Z

"
1djWsZPh,⭐ [NOOB] Make $800-$2400 DAY⭐ YU,thysf,JavaScript,Wednesday 12th of February 2025 06:17:51 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #EzIEbarU7B

"
F06GFaRn,⭐️ EASY to Make $800 in 10 Minutes S6,thysf,JavaScript,Wednesday 12th of February 2025 06:17:44 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #8iAQY2Rx22

"
CWm3PRfX,Miner2.lua,z1haze,Lua,Wednesday 12th of February 2025 06:16:51 PM CDT,"if not turtle then
    error(""Turtle required!"")
end

local Miner2 = {}

Miner2.__index = Miner2

function Miner2.new(aware)
    local self = setmetatable({}, Miner2)
    local utils = require(""utils"")

    self.aware = aware

    self.fuelValues = {
        [""minecraft:coal""] = 80,
        [""minecraft:charcoal""] = 80,
        [""minecraft:lava_bucket""] = 1000,
        [""minecraft_coal_block""] = 800,
        [""minecraft_charcoal_block""] = 800
    }

    self.keepItems = {
        [""minecraft:torch""] = true,
        [""computercraft:wireless_modem_advanced""] = true
    }

    self.resourceMessages = {
        action = {
            [""branching""] = ""Branch Mining"",
            [""trunk""] = ""Trunk Mining"",
            [""descend""] = ""Descending"",
            [""home""] = ""Heading Home"",
            [""pitstop""] = ""Pitstop"",
            [""checkpoint""] = ""Checkpoint"",
            [""done""] = ""Finished""
        }
    }

    self.fuelReserve = 1000

    -- blocks to throw out when out of space
    self.trash = utils.minerTrash

    -- blocks to ignore when vein mining
    self.ignore = utils.minerIgnore

    -- table containing valid storage block n
    self.validStorage = utils.minerStorage

    if not self.aware.state.blocksTraveled then
        self.aware.state.blocksTraveled = 0
    end

    if not self.aware.state.collected then
        self.aware.state.collected = 0
    end

    self.aware:saveState(self.aware.state)

    return self
end

function Miner2:attack(d)
    if not d or d == ""forward"" then
        return turtle.attack()
    elseif d == ""up"" then
        return turtle.attackUp()
    elseif d == ""down"" then
        return turtle.attackDown()
    end

    return false
end

function Miner2:detect(d)
    if not d or d == ""forward"" then
        return turtle.detect()
    elseif d == ""up"" then
        return turtle.detectUp()
    elseif d == ""down"" then
        return turtle.detectDown()
    end

    return false
end

function Miner2:inspect(d)
    if not d or d == ""forward"" then
        return turtle.inspect()
    elseif d == ""up"" then
        return turtle.inspectUp()
    elseif d == ""down"" then
        return turtle.inspectDown()
    end

    return false
end

function Miner2:dig(d)
    if not d or d == ""forward"" then
        return turtle.dig()
    elseif d == ""up"" then
        return turtle.digUp()
    elseif d == ""down"" then
        return turtle.digDown()
    end

    return false
end

function Miner2:turn(d)
    if d == ""left"" then
        return self.aware:turnLeft()
    elseif d == ""right"" then
        return self.aware:turnRight()
    end

    return false
end

function Miner2:turnTo(n, c)
    return self.aware:turnTo(n, c)
end

function Miner2:_m(d)
    if not d then
        d = ""forward""
    end

    return self.aware[d](self.aware, 1, true)
end

function Miner2:move(d, invert)
    if not d then
        d = ""forward""
    end

    if invert then
        d = self.invert[d]
    end

    local moved = false

    while true do
        -- attempt to move the turtle
        moved = self:_m(d)

        -- if the turtle moved, return true
        if moved then
            break
        end

        -- if the turtle didnt move because of fuel, return false
        if turtle.getFuelLevel() == 0 then
            return false
        end

        -- if the turtle didnt move because of a block, return false
        local detectResult = self:detect(d == ""back"" and ""forward"" or d)

        -- if there is a block in front, that's why it didnt move, return false this is normal
        if detectResult then
            return false
        end

        -- finally, if the turtle didnt move, but he has fuel, and there is no block in his way, some entity is blocking him, so we must smash it
        while true do
            local attackResult = self:attack(d)

            if not attackResult then
                break
            else
                print(""attacked"")
            end
        end
    end

    return moved
end

function Miner2:getEmptySlots()
    local t = {}

    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            table.insert(t, i)
        end
    end

    return t
end

function Miner2:dropTrash()
    local slot = turtle.getSelectedSlot()

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)

        if item and self.trash[item.name] then
            if not turtle.select(i) then
                return false
            end
            if not self:drop(""forward"", item.count) then
                return false
            end
        end
    end

    return turtle.select(slot)
end

function Miner2:useFuel(targetFuelLevel)
    -- cache the currently selected slot, so we can put it back when we're done
    local slot = turtle.getSelectedSlot()

    -- loop through the entire inventory
    for i = 1, 16 do
        if not turtle.select(i) then
            return false
        end

        -- if we've reached our fuel target, we can quit
        if turtle.getFuelLevel() >= targetFuelLevel then
            break
        end

        local itemDetail = turtle.getItemDetail(i)

        -- if the item is able to be used as fuel and is not at torch (we want to keep those)
        if turtle.refuel(0) and itemDetail.name ~= ""minecraft:torch"" then
            local fuelPer

            -- try to get a better estimate on what the fuel is
            if self.fuelValues[itemDetail.name] then
                fuelPer = self.fuelValues[itemDetail.name]
            else
                fuelPer = 80
            end

            -- get the number of items we can eat for fuel
            local count = turtle.getItemCount()

            -- reduce the number of items to consume until we are at or below the target fuel level
            while (turtle.getFuelLevel() + (count * fuelPer)) > targetFuelLevel and count > 1 do
                count = count - 1
            end

            -- burn that shit
            turtle.refuel(count)
        end
    end

    return turtle.select(slot)
end

function Miner2:unload(d)
    if not d then
        d = ""forward""
    end

    -- if there is no block in the direction we are unloading, error out
    if not self:detect(d) then
        error(""I have nowhere to put these items!"")
    end

    -- get the details of the block we are supposed to unload into
    local _, details = self:inspect(d)

    -- if the item i'm supposed to be unloading into is not a storage item, wtf are you even doing
    if not self:isStorageItem(details) and not details.tags[""forge:chests""] then
        error(""Cannot deposit items into "" .. details.name)
    end

    -- cache the slot we already have selected
    local slot = turtle.getSelectedSlot()

    -- an aggregate total of fuel that we choose to keep in the turtle inventory as a fuel reserve
    -- this is needed so once we accumulate enough to meet the fuel reserve, we can dump the rest
    local fuelKept = 0

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)

        if item and not self.keepItems[item.name] then
            local amountToDrop

            -- if the item can be used as fuel, we need to do some extra processing
            -- because we want to keep _some_ fuel in the inventory as a reserve
            if self.fuelValues[item.name] then
                local amountToKeep = 0

                for j = 1, item.count do
                    -- if we've already kept enough fuel we
                    if fuelKept >= self.fuelReserve then
                        break
                    end

                    amountToKeep = j
                    fuelKept = fuelKept + self.fuelValues[item.name]
                end

                amountToDrop = item.count - amountToKeep
            else
                amountToDrop = item.count
            end

            turtle.select(i)

            if not self:drop(d, amountToDrop) then
                return false
            end
        end
    end

    return turtle.select(slot)
end

function Miner2:goHome(order)
    return self.aware:moveTo(self.aware.state.home, true, order)
end

--- Determine if an item details is a valid storage item
function Miner2:isStorageItem(item)
    if not item then
        return false
    end

    -- iterate through the keys and values of the table, which are block names, and block tags
    for k, v in pairs(self.validStorage) do
        -- iterate over the keys and values of each table which are number,string or string,boolean
        for kk, _ in pairs(v) do
            -- check against valid names
            if k == ""name"" and item.name == v[kk] then
                return true
            end

            -- check against valid tags
            if k == ""tags"" and item.tags[kk] then
                return true
            end
        end
    end

    return false
end

function Miner2:goTo(pos, dig, order)
    return self.aware:moveTo(pos, dig, order)
end

function Miner2:compact()
    local incompleteStacks = {}

    -- compact stacks
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)

        if item then
            local name = item.name
            local existingSlot = incompleteStacks[name]

            if existingSlot then
                turtle.select(i)
                turtle.transferTo(existingSlot)

                if turtle.getItemCount() > 0 then
                    incompleteStacks[name] = i
                end
            else
                incompleteStacks[name] = i
            end
        end
    end

end

function Miner2:check(d)
    if self:detect(d) then
        local result, block = self:inspect(d)

        if result and not self.ignore[block.name] then
            return true
        end
    end

    return false
end

function Miner2:branchMine(data)
    local f = data.f -- facing direction
    local l = data.l -- length
    local b = data.b -- block number

    self:setCurrentAction(""branching"")

    if self.aware.state.pos.f ~= f then
        self:turnTo(f)
    end

    for i = b, l do
        self:setCurrentBlock(i)

        -- check the block above
        if self:check(""up"") then
            self:dig(""up"")
            self.aware.state.collected = self.aware.state.collected + 1
        end

        -- check the block below
        if self:check(""down"") then
            self:dig(""down"")
            self.aware.state.collected = self.aware.state.collected + 1
        end

        -- check the block to the left
        self:turn(""left"")
        if self:check() then
            self:dig()
            self.aware.state.collected = self.aware.state.collected + 1
        end

        -- check the block to the right
        self:turn(""right"")
        self:turn(""right"")
        if self:check() then
            self:dig()
            self.aware.state.collected = self.aware.state.collected + 1
        end
        self:turn(""left"")

        self:dig()
        self:move()
    end
end

--- ===============================================================
--- STATE MANAGEMENT METHODS
--- ===============================================================

function Miner2:setCurrentAction(a)
    self.aware.state.currentAction = a

    self.aware:saveState(self.aware.state)
end

function Miner2:setCurrentBranch(n)
    self.aware.state.currentBranch = n

    self.aware:saveState(self.aware.state)
end

function Miner2:setCurrentBlock(n)
    self.aware.state.currentBlock = n

    self.aware:saveState(self.aware.state)
end

--- ===============================================================
--- GUI METHODS
--- ===============================================================

function Miner2:clearLine()
    local x, y = term.getCursorPos()

    term.setCursorPos(1, y)
    write(""|                                     |"")
    term.setCursorPos(x, y)
end

function Miner2:guiStats()
    local action = self.aware.state.currentAction
    local actionResourceMsg = action and self.resourceMessages.action[action] or ""Awaiting Work""
    local actionMessage

    -- write the current action line
    term.setCursorPos(3, 2)
    self:clearLine()
    write(""Current Action: "" .. actionResourceMsg .. ""..."")

    if action == ""descend"" then
        actionMessage = ""Descending to Y-Level "" .. self.aware.state.yLevel
    elseif action == ""branching"" then
        actionMessage = ""On Branch "" .. self.aware.state.currentBranch .. ""/"" .. self.aware.state.branchCount

        if self.aware.state.currentBlock then
            actionMessage = actionMessage .. "", Block "" .. self.aware.state.currentBlock .. ""/"" .. self.aware.state.branchLength
        end
    elseif action == ""pitstop"" then
        actionMessage = ""Shitter's full, gotta dump""
    elseif action == ""checkpoint"" then
        actionMessage = ""Moving to saved checkpoint""
    elseif action == ""home"" then
        actionMessage = ""Finishing mining, heading home""
    elseif action == ""done"" then
        actionMessage = ""Operation Complete. Mined "" .. self.aware.state.branchCount .. ""B "" .. self.aware.state.branchLength .. ""L""
    end

    if actionMessage then
        term.setCursorPos(3, 4)
        self:clearLine()
        write(actionMessage)
    end

    -- total blocks traveled
    term.setCursorPos(3, 6)
    self:clearLine()
    write(""Distance Traveled : "" .. self.aware.state.blocksTraveled)

    -- total ores mined
    term.setCursorPos(3, 7)
    self:clearLine()
    write(""Ores Mined        : "" .. self.aware.state.oresMined)

    -- current fuel level
    term.setCursorPos(3, 8)
    self:clearLine()
    write(""Fuel Level        : "" .. turtle.getFuelLevel())

    -- target y level
    term.setCursorPos(3, 9)
    self:clearLine()
    write(""Target Y-Level    : "" .. self.aware.state.yLevel)
end

function Miner2:guiFrame()
    term.clear()

    -- side borders
    for i = 1, 13 do
        term.setCursorPos(1, i)
        write(""|"")
        term.setCursorPos(39, i)
        write(""|"")
    end

    -- top border
    term.setCursorPos(1, 1)
    write(""O-------------------------------------O"")

    -- middle line
    term.setCursorPos(1, 5)
    write(""O-------------------------------------O"")

    -- bottom border
    term.setCursorPos(1, 13)
    write(""O-------------------------------------O"")
end

return Miner2"
TEshFY1F,Aware2.lua,z1haze,Lua,Wednesday 12th of February 2025 06:16:29 PM CDT,"if not turtle then
    error(""Turtle required!"")
end

local utils = require(""utils"")
local programName = shell.getRunningProgram()
local Aware2 = {}

Aware2.__index = Aware2

function Aware2.new()
    local self = setmetatable({}, Aware2)

    -- the file path where the state is written
    self.dbPath = fs.combine(""database"", programName, ""state"")

    -- load any existing state
    self.state = self:getState()

    -- allows us to always refer to 1 as forward, 2 as right, 3 as back, and 4 as left, even when using absolute positioning from GPS
    self.directionMap = {
        { 1, 2, 3, 4 },
        { 2, 3, 4, 1 },
        { 3, 4, 1, 2 },
        { 4, 1, 2, 3 }
    }

    -- default state
    if not self.state then
        self.state = {
            pos = {
                x = 0,
                y = 0,
                z = 0,
                f = 1
            }
        }
    end

    -- tells us if this turtle can use gps or not, depending on if he has a modem, and can fetch his coordinates from a GPS host
    self.state.hasGPS = self:hasGPS()

    -- override the position if we have GPS
    if self.state.hasGPS then
        self.state.pos = self:locate()
    end

    -- set home if we don't have one
    if not self.state.home then
        self.state.home = utils.deepCopy(self.state.pos)
    end

    -- write the current state back to file
    self:saveState(self.state)

    return self
end

--- ===============================================================
--- DATABASE METHODS
--- ===============================================================

function Aware2:getState()
    if fs.exists(self.dbPath) then
        local file = fs.open(self.dbPath, ""r"")
        local state = textutils.unserialize(file.readAll())

        file.close()

        return state
    end

    return nil
end

function Aware2:saveState(state)
    local file = fs.open(self.dbPath, ""w"")

    file.write(textutils.serialize(state))
    file.close()

    os.queueEvent(""stateSaved"")
end

function Aware2:deleteState()
    return fs.delete(fs.combine(""database"", programName))
end

--- ===============================================================
--- ROTATION METHODS
--- ===============================================================

function Aware2:turnLeft()
    turtle.turnLeft()
    self.state.pos.f = self.state.pos.f == 1 and 4 or self.state.pos.f - 1
    self:saveState(self.state)

    return true
end

function Aware2:turnRight()
    turtle.turnRight()
    self.state.pos.f = self.state.pos.f == 4 and 1 or self.state.pos.f + 1
    self:saveState(self.state)

    return true
end

function Aware2:turnTo(n, c)
    -- for both relative and cardinal directions, these axis always map to correct values
    if type(n) == ""string"" then
        if n == ""x"" then
            n = 2
        elseif n == ""-x"" then
            n = 4
        elseif n == ""-z"" then
            n = 1
        elseif n == ""z"" then
            n = 3
        end
    else
        if not c then
            -- update n to be the correct relative value based on the home facing direction
            -- if home f is 3 and n is 2, we update n to 4
            n = self.directionMap[self.state.home.f][n]
        end
    end

    local diff = self.state.pos.f - n

    while n ~= self.state.pos.f do
        if diff == 1 or diff == -3 then
            self:turnLeft()
        else
            self:turnRight()
        end
    end

    return true
end

function Aware2:turnAround()
    for _ = 1, 2 do
        self:turnLeft()
    end

    return true
end

--- ===============================================================
--- LOCATION UPDATE METHODS
--- ===============================================================

function Aware2:updateXZ(back)
    if self.state.pos.f == 1 then
        self.state.pos.z = back and self.state.pos.z + 1 or self.state.pos.z - 1
    elseif self.state.pos.f == 2 then
        self.state.pos.x = back and self.state.pos.x - 1 or self.state.pos.x + 1
    elseif self.state.pos.f == 3 then
        self.state.pos.z = back and self.state.pos.z - 1 or self.state.pos.z + 1
    elseif self.state.pos.f == 4 then
        self.state.pos.x = back and self.state.pos.x + 1 or self.state.pos.x - 1
    end

    self:saveState(self.state)

    return self.state.pos
end

function Aware2:updateY(down)
    self.state.pos.y = down and self.state.pos.y - 1 or self.state.pos.y + 1
    self:saveState(self.state)

    return self.state.pos
end

function Aware2:setCheckpoint()
    self.state.checkpoint = utils.deepCopy(self.state.pos)

    self:saveState(self.state)
end

--- ===============================================================
--- MOVEMENT METHODS
--- ===============================================================

function Aware2:move(dir, dist, canDig)
    -- default direction
    if not dir then
        dir = ""forward""
    end

    -- default distance of 1
    if not dist then
        dist = 1
    end

    -- ensure valid direction
    if dir ~= ""forward"" and dir ~= ""back"" and dir ~= ""up"" and dir ~= ""down"" then
        error(""invalid direction"")
    end

    -- for each distance
    for _ = 1, dist do
        -- attempt to move turtle in direction
        while not turtle[dir]() do
            if turtle.getFuelLevel() == 0 then
                return false
            end

            local detectMethod = ""detect""
            local digMethod = ""dig""
            local attackMethod = ""attack""
            local fail = false

            -- if direction is back we need to turn around and face that block
            if dir == ""back"" then
                self:turnAround()
            end

            -- update methods if up or down
            if dir == ""up"" or dir == ""down"" then
                detectMethod = detectMethod .. string.upper(string.sub(dir, 1, 1)) .. string.sub(dir, 2)
                digMethod = digMethod .. string.upper(string.sub(dir, 1, 1)) .. string.sub(dir, 2)
                attackMethod = attackMethod .. string.upper(string.sub(dir, 1, 1)) .. string.sub(dir, 2)
            end

            -- detect a block
            if turtle[detectMethod]() then
                if canDig then
                    -- dig the detected block
                    if not turtle[digMethod]() then
                        fail = true
                    end
                else
                    -- fail because we dont have permission to dig the block
                    error(""I need to dig, but I'm not allowed"")
                end
            else
                -- since we didnt move, and we didnt detect a block, and we're not out of fuel, must be some entity in the way, attack it!
                turtle[attackMethod]()
            end

            if dir == ""back"" then
                self:turnAround()
            end

            if fail then
                return false
            end
        end

        -- increment the number of blocks moved
        self.state.blocksTraveled = self.state.blocksTraveled + 1

        -- update stored position
        if dir == ""up"" or dir == ""down"" then
            self:updateY(dir == ""down"")
        elseif dir == ""forward"" or dir == ""back"" then
            self:updateXZ(dir == ""back"")
        end
    end

    return true
end

function Aware2:forward(dist, dig)
    return self:move(""forward"", dist, dig)
end

function Aware2:back(dist, dig)
    return self:move(""back"", dist, dig)
end

function Aware2:up(dist, dig)
    return self:move(""up"", dist, dig)
end

function Aware2:down(dist, dig)
    return self:move(""down"", dist, dig)
end

function Aware2:moveTo(pos, dig, order)
    if not order then
        -- default order is y, x, z
        if not self:moveToY(pos.y, dig) then
            return false
        end

        if not self:moveToX(pos.x, dig) then
            return false
        end

        if not self:moveToZ(pos.z, dig) then
            return false
        end

        return self:turnTo(pos.f)
    end

    if string.len(order) ~= 3 then
        error(""invalid order length"")
    end

    for i = 1, #order do
        local char = order:sub(i, i)
        if not self[""moveTo"" .. string.upper(char)](self, pos[char], dig) then
            return false
        end
    end

    return self:turnTo(pos.f)
end

function Aware2:moveToX(coord, dig)
    if self.state.pos.x == coord then
        return true
    end

    if self.state.pos.x < coord then
        self:turnTo(""x"")

        return self:forward(coord - self.state.pos.x, dig)
    elseif self.state.pos.x > coord then
        self:turnTo(""-x"")

        return self:forward(self.state.pos.x - coord, dig)
    end

    return false
end

function Aware2:moveToZ(coord, dig)
    if self.state.pos.z == coord then
        return true
    end

    if self.state.pos.z < coord then
        self:turnTo(""z"")

        return self:forward(coord - self.state.pos.z, dig)
    elseif self.state.pos.z > coord then
        self:turnTo(""-z"")

        return self:forward(self.state.pos.z - coord, dig)
    end

    return false
end

function Aware2:moveToY(coord, dig)
    if self.state.pos.y == coord then
        return true
    end

    if self.state.pos.y < coord then
        return self:up(coord - self.state.pos.y, dig)
    elseif self.state.pos.y > coord then
        return self:down(self.state.pos.y - coord, dig)
    end

    return false
end

--- ===============================================================
--- UTILITY METHODS
--- ===============================================================

function Aware2:hasGPS()
    local x = gps.locate(5)

    -- if x returns a value, we know that gps is working
    if x then
        return true
    end

    local equipResult, slotNumber = self:equip(""computercraft:wireless_modem_advanced"", ""right"")

    if equipResult then
        x = gps.locate(5)

        -- re-equip the previously equipped item
        turtle.select(slotNumber)
        turtle.equipRight()

        if x then
            return true
        end
    end

    return false
end

function Aware2:equip(name, side)
    -- check for item in turtle inventory that we can equip
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)

        if item and item.name == name then
            turtle.select(i)

            -- return the result of the item equip and the slot number that was equipped
            return turtle[""equip"" .. string.upper(string.sub(side, 1, 1)) .. string.sub(side, 2)](), i
        end
    end

    -- if we didnt find the item in the inventory, we need to see if the item is already equipped
    -- we can do this, but we first need to find an empty inventory slot to unequip the item to check what it is
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)

        -- find empty slot to swap out with equipped item
        if not item then
            -- select the empty slot
            turtle.select(i)

            -- attempt to unequip item into selected slot
            turtle[""equip"" .. string.upper(string.sub(side, 1, 1)) .. string.sub(side, 2)]()

            -- check if item is now in selected slot
            item = turtle.getItemDetail(i)

            -- put whatever it was back
            turtle[""equip"" .. string.upper(string.sub(side, 1, 1)) .. string.sub(side, 2)]()

            if item and item.name == name then
                return true, i
            end

            return false
        end
    end

    printError(""Unable to find item to equip: "" .. name)

    return false
end

function Aware2:getDirection(x, z)
    local equipSuccess, slot

    -- move 1 block forward so we can get an updated position
    while not self:move(""forward"", 1, true) do
        equipSuccess, slot = self:equip(""minecraft:diamond_pickaxe"", ""right"")
    end

    if equipSuccess then
        turtle.select(slot)
        turtle.equipRight()
    end

    -- get updated gps location
    local nx, _, nz = gps.locate(5)

    -- reset position after getting update
    self:move(""back"", 1, true)

    -- determine face
    if z > nz then
        return 1
    elseif x < nx then
        return 2
    elseif z < nz then
        return 3
    elseif x > nx then
        return 4
    end

    error(""Unknown direction"")
end

function Aware2:locate()
    if not self.state.hasGPS then
        error(""GPS is not enabled on this turtle"")
    end

    local x, y, z = gps.locate(5)

    local pos

    if x then
        pos = {
            x = x,
            y = y,
            z = z,
            f = self:getDirection(x, z)
        }
    else
        local _, slotNumber = self:equip(""computercraft:wireless_modem_advanced"", ""right"")

        x, y, z = gps.locate(5)

        -- we got a gps result
        if x then
            pos = {
                x = x,
                y = y,
                z = z,
                f = self:getDirection(x, z)
            }
        end

        -- put the previous item back
        turtle.select(slotNumber)
        turtle.equipRight()

        if not x then
            error(""I am equipped with GPS, but there appears not to be a GPS host"")
        end
    end

    return pos
end

return Aware2"
Eu3TDKgQ,2025-02-12_stats.json,rdp_snitch,JSON,Wednesday 12th of February 2025 06:16:10 PM CDT,"{
  ""ip"": {
    ""185.42.12.74"": 8,
    ""58.218.199.219"": 10,
    ""194.180.48.19"": 30,
    ""198.235.24.241"": 6,
    ""5.201.128.208"": 12,
    ""194.165.16.37"": 4,
    ""64.23.144.101"": 12,
    ""152.32.183.13"": 2,
    ""23.26.201.222"": 1898,
    ""50.116.4.217"": 8,
    ""50.116.58.172"": 2,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""198.235.24.53"": 6,
    ""194.180.49.123"": 2,
    ""92.255.57.11"": 4,
    ""147.185.132.19"": 6,
    ""45.137.201.195"": 2,
    ""45.145.43.234"": 4,
    ""173.0.109.156"": 168,
    ""206.168.34.41"": 2,
    ""198.235.24.48"": 6
  },
  ""asn"": {
    ""AS59425"": 8,
    ""AS4134"": 10,
    ""AS201814"": 32,
    ""AS396982"": 24,
    ""AS50810"": 12,
    ""AS48721"": 4,
    ""AS14061"": 12,
    ""AS135377"": 2,
    ""AS23470"": 1898,
    ""AS63949"": 10,
    ""AS208046"": 12,
    ""AS207566"": 4,
    ""AS49581"": 2,
    ""AS58212"": 4,
    ""AS14315"": 168,
    ""AS398324"": 2
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 12,
    ""Chinanet"": 10,
    ""MEVSPACE sp. z o.o."": 32,
    ""Google LLC"": 24,
    ""Mobin Net Communication Company (Private Joint Stock)"": 12,
    ""Flyservers S.A."": 4,
    ""DigitalOcean, LLC"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Internet Utilities NA LLC"": 2066,
    ""Akamai Technologies, Inc."": 10,
    ""ColocationX Ltd."": 12,
    ""Ferdinand Zink trading as Tube-Hosting"": 2,
    ""dataforest GmbH"": 4,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""Horizon LLC"": 8,
    ""Chinanet JS"": 10,
    ""HostSlick"": 32,
    ""Palo Alto Networks, Inc"": 24,
    ""Mobin Net Communication Company"": 12,
    ""Flyservers S.A"": 4,
    ""DigitalOcean, LLC"": 12,
    ""Ucloud Information Technology"": 2,
    ""HOSTING-SOLUTIONS"": 1898,
    ""Linode"": 10,
    ""ColocationX Ltd"": 12,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Taurus"": 2,
    ""dataforest GmbH"": 4,
    ""Unknown"": 168,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""Moscow"": 12,
    ""Jiangsu"": 10,
    ""Bavaria"": 32,
    ""California"": 1942,
    ""Tehran"": 12,
    ""Kaunas"": 4,
    ""Virginia"": 176,
    ""New Jersey"": 2,
    ""North Holland"": 6,
    ""Lombardy"": 2,
    ""Hesse"": 4,
    ""Illinois"": 2
  },
  ""country"": {
    ""Russia"": 12,
    ""China"": 10,
    ""Germany"": 36,
    ""United States"": 2122,
    ""Iran"": 12,
    ""Lithuania"": 4,
    ""The Netherlands"": 6,
    ""Italy"": 2
  },
  ""account"": {
    ""Test"": 16,
    ""hello"": 2134,
    ""xSCAmbvgz"": 2,
    ""GEDZgd"": 2,
    ""uiNtxs"": 2,
    ""Administrator"": 2,
    ""ow7gl315"": 8,
    ""beio"": 2,
    ""Domain"": 12,
    ""EDLlgFJgk"": 2,
    ""KfxgQr"": 2,
    ""FDDcIf"": 2,
    ""Administr"": 4,
    ""VsjJIdKqk"": 2,
    ""DidDHS"": 2,
    ""IEMJDf"": 2,
    ""(empty)"": 2,
    ""pKQMtRksH"": 2,
    ""jGhKXR"": 2,
    ""ZQbezo"": 2
  },
  ""keyboard"": {
    ""Unknown"": 2204
  },
  ""client_build"": {
    ""Unknown"": 2204
  },
  ""client_name"": {
    ""Unknown"": 2204
  },
  ""ip_type"": {
    ""proxy"": 52,
    ""hosting"": 2112,
    ""mobile"": 12,
    ""Unknown"": 26,
    ""hosting & proxy"": 2
  }
}"
KnFQe0es,mine2.lua,z1haze,Lua,Wednesday 12th of February 2025 06:16:10 PM CDT,"if not turtle then
    error(""Turtle required!"")
end

write(""Miner initializing"")
textutils.slowPrint(""..."", 5)

local DEBUG = true

local resume = not DEBUG and fs.exists(fs.combine(""database"", shell.getRunningProgram(), ""state""))
local running = false

local Aware2 = require(""Aware2"")
local aware = Aware2.new()

local Miner2 = require(""Miner2"")
local miner = Miner2.new(aware)

function setup()
    local branchCount, branchLength, branchGap, startX, startY, startZ, facing, minY, maxY

    if DEBUG then
        branchCount = 6
        branchLength = 16
        branchGap = 2
        startX = 500
        startY = 120
        startZ = 120
        facing = 1
        minY = -52
        maxY = 16
    else
        while branchCount == nil do
            print("""");
            print(""How many branches should be mined?"")

            local input = read();
            branchCount = tonumber(input)

            if branchCount == nil then
                print(""'"" .. input .. ""' should be a number"")
            end
        end

        while branchLength == nil do
            print("""");
            print(""How long should each branch be?"")

            local input = read();
            branchLength = tonumber(input)

            if branchLength == nil then
                print(""'"" .. input .. ""' should be a number"")
            end
        end

        if branchCount > 1 then
            while branchGap == nil do
                print("""");
                print(""How many block gap should there be between branches?"")

                local input = read();
                branchGap = tonumber(input)

                if branchGap == nil then
                    print(""'"" .. input .. ""' should be a number"")
                end
            end
        end

        if not miner.aware.state.hasGPS then
            while startX == nil do
                print("""");
                print(""What is the startX of the turtle?"")

                local input = read();
                startX = tonumber(input)

                if startX == nil then
                    print(""'"" .. input .. ""' should be a number"")
                end
            end

            while startY == nil do
                print("""");
                print(""What is the startY of the turtle?"")

                local input = read();
                startY = tonumber(input)

                if startY == nil then
                    print(""'"" .. input .. ""' should be a number"")
                end
            end

            while startZ == nil do
                print("""");
                print(""What is the startZ of the turtle?"")

                local input = read();
                startZ = tonumber(input)

                if startZ == nil then
                    print(""'"" .. input .. ""' should be a number"")
                end
            end
        end

        while facing == nil do
            print("""");
            print(""What is the facing? 1=north, 2=east, 3=south, 4=west"")

            local input = read();
            facing = tonumber(input)

            if facing == nil then
                print(""'"" .. input .. ""' should be a number"")
            end
        end

        while minY == nil do
            print("""");
            print(""What is the minY?"")

            local input = read();
            minY = tonumber(input)

            if minY == nil then
                print(""'"" .. input .. ""' should be a number"")
            end
        end

        while maxY == nil do
            print("""");
            print(""What is the maxY?"")

            local input = read();
            maxY = tonumber(input)

            if maxY == nil then
                print(""'"" .. input .. ""' should be a number"")
            end
        end
    end

    miner.aware.state.pos.x = startX
    miner.aware.state.pos.y = startY
    miner.aware.state.pos.z = startZ
    miner.aware.state.pos.f = facing
    miner.aware.state.home = utils.deepCopy(miner.aware.state.pos)
    miner.aware.state.branchCount = branchCount
    miner.aware.state.branchLength = branchLength
    miner.aware.state.branchGap = branchGap
    miner.aware.state.minY = minY
    miner.aware.state.maxY = maxY

    -- set initial target y level
    miner.aware.state.yLevel = minY

    -- setup the GUI frame
    miner:guiFrame()

    running = true

    miner.aware:saveState(miner.aware.state)
end

function main()
    if not resume then
        setup()
    end

    running = true

    miner:useFuel(1000)

    if not miner.aware:equip(""minecraft:diamond_pickaxe"", ""right"") then
        error()
    end

    miner:setCurrentAction(""descend"")

    -- descend to target y level
    miner.aware:moveToY(miner.aware.state.yLevel, true)

    -- as long as we're at or below the max y level, we branch mine
    while miner.aware.state.pos.y <= miner.aware.state.maxY do
        -- execute each branch mine for the current y level
        for i = (miner.aware.state.currentBranch or 1), miner.aware.state.branchCount do
            local isEvenBranch = i % 2 == 0

            miner:setCurrentBranch(i)

            miner:branchMine({
                f = isEvenBranch and 4 or 2, -- face right for odd branches, face left for even ones, because we're coming back the other direction
                l = miner.aware.state.branchLength,
                b = 1
            })

            -- get in position for the next branch
            if i < miner.aware.state.branchCount then
                miner:turnTo(1)

                for _ = 1, miner.aware.state.branchGap + 1 do
                    miner:dig()
                    miner:move()
                end
            end
        end

        -- go back to the vertical shaft
        miner:goTo(
                {
                    x = miner.aware.state.home.x,
                    y = miner.aware.state.pos.y,
                    z = miner.aware.state.home.z,
                    f = miner.aware.state.home.f
                },
                false,
                (miner.aware.state.home.f == 1 or miner.aware.state.home.f == 3) and ""xzy"" or ""zxy""
        )

        -- move up the shaft to the next level to branch mine
        if (miner.aware.state.pos.y + 3) <= miner.aware.state.maxY then
            miner.aware.state.yLevel = miner.aware.state.pos.y + 3
            miner.aware:saveState(miner.aware.state)
            miner.aware:moveToY(miner.aware.state.yLevel)
        end
    end

    miner:setCurrentAction(""home"")
    miner:goHome((miner.aware.state.home.f == 1 or miner.aware.state.home.f == 3) and ""xzy"" or ""zxy"")
    miner:unload(""up"")
    miner:setCurrentAction(""done"")
    miner.aware:deleteState()
end

function listen()
    while true do
        local event = os.pullEvent()

        if event == ""stateSaved"" and running then
            miner:guiStats()
        end
    end
end

parallel.waitForAny(main, listen)"
1sZ8Eu1Q,utils2.lua,z1haze,Lua,Wednesday 12th of February 2025 06:15:46 PM CDT,"local utils = {}

function utils.deepCopy(t)
    local clone = {}

    for k, v in pairs(t) do
        -- for all keys...
        if type(v) == ""table"" then
            -- if value is a table
            clone[k] = deepCopy(v) -- recursively copy that too
        else
            clone[k] = v -- just copy the value.
        end
    end

    return clone
end

utils.minerTrash = {
    [""minecraft:stone""] = true,
    [""minecraft:cobblestone""] = true,
    [""minecraft:deepslate""] = true,
    [""minecraft:cobbled_deepslate""] = true
}

utils.minerIgnore = utils.deepCopy(utils.minerTrash)
utils.minerIgnore[""minecraft:bedrock""] = true
utils.minerIgnore[""minecraft:torch""] = true

utils.minerStorage = {
    name = {
        ""immersiveengineering:crate""
    },

    tags = {
        [""minecraft:shulker_boxes""] = true
    }
}

return utils"
QFJRrV4d,⭐ giftcards for free,JustAnOrdinaryHacker,JavaScript,Wednesday 12th of February 2025 06:15:40 PM CDT,"https://g2afree.info <--- free giftcards guide #719236
"
2BjYhU3n,⭐ FREE giftcards method,Bufayez,JavaScript,Wednesday 12th of February 2025 06:15:35 PM CDT,"https://g2afree.info <--- free giftcards guide #80054
"
ZTZbNBcH,2025-02-12_stats.json,rdp_snitch,JSON,Wednesday 12th of February 2025 06:15:09 PM CDT,"{
  ""ip"": {
    ""185.42.12.74"": 4,
    ""58.218.199.219"": 5,
    ""194.180.48.19"": 15,
    ""198.235.24.241"": 3,
    ""5.201.128.208"": 6,
    ""194.165.16.37"": 2,
    ""64.23.144.101"": 6,
    ""152.32.183.13"": 1,
    ""23.26.201.222"": 949,
    ""50.116.4.217"": 4,
    ""50.116.58.172"": 1,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""198.235.24.53"": 3,
    ""194.180.49.123"": 1,
    ""92.255.57.11"": 2,
    ""147.185.132.19"": 3,
    ""45.137.201.195"": 1,
    ""45.145.43.234"": 2,
    ""173.0.109.156"": 84,
    ""206.168.34.41"": 1,
    ""198.235.24.48"": 3
  },
  ""asn"": {
    ""AS59425"": 4,
    ""AS4134"": 5,
    ""AS201814"": 16,
    ""AS396982"": 12,
    ""AS50810"": 6,
    ""AS48721"": 2,
    ""AS14061"": 6,
    ""AS135377"": 1,
    ""AS23470"": 949,
    ""AS63949"": 5,
    ""AS208046"": 6,
    ""AS207566"": 2,
    ""AS49581"": 1,
    ""AS58212"": 2,
    ""AS14315"": 84,
    ""AS398324"": 1
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 6,
    ""Chinanet"": 5,
    ""MEVSPACE sp. z o.o."": 16,
    ""Google LLC"": 12,
    ""Mobin Net Communication Company (Private Joint Stock)"": 6,
    ""Flyservers S.A."": 2,
    ""DigitalOcean, LLC"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Internet Utilities NA LLC"": 1033,
    ""Akamai Technologies, Inc."": 5,
    ""ColocationX Ltd."": 6,
    ""Ferdinand Zink trading as Tube-Hosting"": 1,
    ""dataforest GmbH"": 2,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""Horizon LLC"": 4,
    ""Chinanet JS"": 5,
    ""HostSlick"": 16,
    ""Palo Alto Networks, Inc"": 12,
    ""Mobin Net Communication Company"": 6,
    ""Flyservers S.A"": 2,
    ""DigitalOcean, LLC"": 6,
    ""Ucloud Information Technology"": 1,
    ""HOSTING-SOLUTIONS"": 949,
    ""Linode"": 5,
    ""ColocationX Ltd"": 6,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Taurus"": 1,
    ""dataforest GmbH"": 2,
    ""Unknown"": 84,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""Moscow"": 6,
    ""Jiangsu"": 5,
    ""Bavaria"": 16,
    ""California"": 971,
    ""Tehran"": 6,
    ""Kaunas"": 2,
    ""Virginia"": 88,
    ""New Jersey"": 1,
    ""North Holland"": 3,
    ""Lombardy"": 1,
    ""Hesse"": 2,
    ""Illinois"": 1
  },
  ""country"": {
    ""Russia"": 6,
    ""China"": 5,
    ""Germany"": 18,
    ""United States"": 1061,
    ""Iran"": 6,
    ""Lithuania"": 2,
    ""The Netherlands"": 3,
    ""Italy"": 1
  },
  ""account"": {
    ""Test"": 8,
    ""hello"": 1067,
    ""xSCAmbvgz"": 1,
    ""GEDZgd"": 1,
    ""uiNtxs"": 1,
    ""Administrator"": 1,
    ""ow7gl315"": 4,
    ""beio"": 1,
    ""Domain"": 6,
    ""EDLlgFJgk"": 1,
    ""KfxgQr"": 1,
    ""FDDcIf"": 1,
    ""Administr"": 2,
    ""VsjJIdKqk"": 1,
    ""DidDHS"": 1,
    ""IEMJDf"": 1,
    ""(empty)"": 1,
    ""pKQMtRksH"": 1,
    ""jGhKXR"": 1,
    ""ZQbezo"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1102
  },
  ""client_build"": {
    ""Unknown"": 1102
  },
  ""client_name"": {
    ""Unknown"": 1102
  },
  ""ip_type"": {
    ""proxy"": 26,
    ""hosting"": 1056,
    ""mobile"": 6,
    ""Unknown"": 13,
    ""hosting & proxy"": 1
  }
}"
yBbZpUfc,⭐ FREE giftcards method,krunkerlegendsyt,JavaScript,Wednesday 12th of February 2025 06:14:27 PM CDT,"https://g2afree.info <--- free giftcards guide #282952
"
xXRX0i7L,file_reader.sh,sergio_educacionit,Bash,Wednesday 12th of February 2025 06:12:59 PM CDT,"#!/bin/bash

archivo=""/ruta/al/fichero/de/suaurios""

while IFS= read -r linea; do

        uid=$(echo $linea | cut -d "":"" -f 3)

        if [ $uid -le 999 ]; then

                continue

        fi
        echo $linea

done < ""$archivo""

"
ZDG2tt10,⭐ get any gift card for FREE,ivloody,JavaScript,Wednesday 12th of February 2025 06:12:26 PM CDT,"https://g2afree.info <--- free giftcards guide #651915
"
k61utaL0,⭐ giftcards for free,Cot6525v2,JavaScript,Wednesday 12th of February 2025 06:11:37 PM CDT,"https://g2afree.info <--- free giftcards guide #99090
"
rmj3gciS,RTC for Timekeeping,pleasedontcode,Arduino,Wednesday 12th of February 2025 06:11:32 PM CDT,"#include ""time.h""

const char* ntpServer = ""pool.ntp.org"";
const long  gmtOffset_sec = 3600;  // Adjust according to timezone
const int   daylightOffset_sec = 3600;

void setup() {
    Serial.begin(115200);

    // Configure and start NTP for time synchronization
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

    struct tm timeinfo;
    if (getLocalTime(&timeinfo)) {
        Serial.println(""Current time:"");
        Serial.printf(""%02d:%02d:%02d\n"", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
    } else {
        Serial.println(""Failed to obtain time"");
    }
}

void loop() {
    delay(1000);
}
"
mywfh62b,⭐ giftcards for free,oenaikinou,JavaScript,Wednesday 12th of February 2025 06:11:31 PM CDT,"https://g2afree.info <--- free giftcards guide #96559
"
wMQerXKv,Deep Sleep Mode,pleasedontcode,Arduino,Wednesday 12th of February 2025 06:10:49 PM CDT,"#include ""esp_sleep.h""
#include ""driver/rtc_io.h""

#define uS_TO_S_FACTOR 1000000  // Conversion factor for micro seconds to seconds
#define TIME_TO_SLEEP 10        // Time ESP32 will sleep (in seconds)

void setup() {
    Serial.begin(115200);
    delay(1000); 

    Serial.println(""Going to sleep now..."");
    esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
    esp_deep_sleep_start();
}

void loop() {
    // This will never be reached
}
"
tvPMkYtM,⭐ get any gift card for FREE,Oliks123345,JavaScript,Wednesday 12th of February 2025 06:10:40 PM CDT,"https://g2afree.info <--- free giftcards guide #779624
"
U9synthP,⭐ giftcards for free,lysy69,JavaScript,Wednesday 12th of February 2025 06:10:30 PM CDT,"https://g2afree.info <--- free giftcards guide #499942
"
zUJs626H,⭐ giftcards for free,TH3L3G3NDM3,JavaScript,Wednesday 12th of February 2025 06:09:40 PM CDT,"https://g2afree.info <--- free giftcards guide #361964
"
9iR4HV1C,⭐ giftcards for free,israg001,JavaScript,Wednesday 12th of February 2025 06:09:30 PM CDT,"https://g2afree.info <--- free giftcards guide #991420
"
KE5tD978,⭐ giftcards for free,uibhib775adadad7rf,JavaScript,Wednesday 12th of February 2025 06:09:28 PM CDT,"https://g2afree.info <--- free giftcards guide #398518
"
XtYVhSU6,⭐ [NOOB] Make $800-$2400 DAY⭐ 1Z,sectista1,JavaScript,Wednesday 12th of February 2025 06:09:11 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #BXmkcY331T

"
WESje6jw,⭐ GET 5OO$ GIFT CARD 4Q,sectista1,JavaScript,Wednesday 12th of February 2025 06:08:53 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #zgoMl5ujlU

"
HadP3E1u,⭐ [NOOB] Make $800-$2400 DAY⭐ 1Z,sectista1,JavaScript,Wednesday 12th of February 2025 06:08:36 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #NzgEyjBUYy

"
JwX6Eeuq,⭐️ EASY to Make $800 in 10 Minutes 65,sectista1,JavaScript,Wednesday 12th of February 2025 06:08:27 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #SidWMef3jK

"
Sm0UwCUR,⭐ [PAID METHOD] $9000 IN 20 DAYS⭐ 5R,sectista1,JavaScript,Wednesday 12th of February 2025 06:08:16 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #nzuH9c459H

"
BpUtjfdt,⭐ GET 5OO$ GIFT CARD 4Q,sectista1,JavaScript,Wednesday 12th of February 2025 06:08:06 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #oN1374yf8M

"
ZEcAvVEj,⭐️ EASY to Make $800 in 10 Minutes 65,sectista1,JavaScript,Wednesday 12th of February 2025 06:07:51 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #dGlKt0dV32

"
w9jxmP42,⭐ GET 5OO$ GIFT CARD 4Q,sectista1,JavaScript,Wednesday 12th of February 2025 06:07:34 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #ivxr0C2br9

"
VTrzMFbx,⭐ [NOOB] Make $800-$2400 DAY⭐ 1Z,sectista1,JavaScript,Wednesday 12th of February 2025 06:07:25 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #cwpdyKgR75

"
rH3SBBk2,⭐️ EASY to Make $800 in 10 Minutes 65,sectista1,JavaScript,Wednesday 12th of February 2025 06:07:14 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #QR6QrLNzWv

"
CpAttceu,⭐ [NOOB] Make $800-$2400 DAY⭐ TN,tjp30,JavaScript,Wednesday 12th of February 2025 06:07:02 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #XRqZ7i6OS4

"
6BMKAjHf,⭐ GET 5OO$ GIFT CARD 4Q,sectista1,JavaScript,Wednesday 12th of February 2025 06:06:53 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #F4Ym2GVB7k

"
EKRuF53Y,⭐️ EASY to Make $800 in 10 Minutes 8I,tjp30,JavaScript,Wednesday 12th of February 2025 06:06:47 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #CIGFqsbf1A

"
JkApBvfp,⭐ [NOOB] Make $800-$2400 DAY⭐ 1Z,sectista1,JavaScript,Wednesday 12th of February 2025 06:06:40 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #LjwtnB0A0L

"
txREctb1,⭐️ EASY to Make $800 in 10 Minutes 65,sectista1,JavaScript,Wednesday 12th of February 2025 06:06:30 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #FSJ5iJIzPH

"
GtR3zUsG,⭐ GET 5OO$ GIFT CARD CT,tjp30,JavaScript,Wednesday 12th of February 2025 06:06:29 PM CDT,"
Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/4a153faf   If you are asked for password when opening the method, use this: #6a2Jlb6VId

"
