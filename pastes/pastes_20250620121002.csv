id,title,username,language,date,content
eLWdsqQ2,vqMod example,daymobrew,XML,Friday 20th of June 2025 07:06:05 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
	<modification
                xmlns=""https://github.com/vqmod/vqmod""
                xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
                xsi:schemaLocation=""https://github.com/vqmod/vqmod https://raw.githubusercontent.com/vqmod/vqmod/master/vqmod.xsd"">
                >
		<id>Temporarily close shop</id>
		<version>1.0</version>
		<vqmver>2.X</vqmver>
		<author>Damien Carbery</author>
<!-- See: https://github.com/vqmod/vqmod/wiki/Examples -->
		<file name=""catalog/view/theme/luxury/template/common/header.twig"">
			<operation info=""Summer closure notice."">
				<search position=""after""><![CDATA[
<header>
				]]></search>
				<add><![CDATA[
<style>#summer-notice { background-color: var(--background); border: 2px solid var(--main-colour); color: var(--text-colour); margin: 0 auto; padding: 5px; text-align: center; max-width: 200px; }
@media (min-width: 769px) { #summer-notice { font-size: 200%; max-width: 700px; } }
#summer-notice p { margin-bottom: 0; }
</style>
<div id=""summer-notice"" class=""notice""><p>SUMMER CLOSURE: No orders can be taken until the end of August.</p></div>
<!--<div id=""summer-notice"" class=""notice""><p>Until Tuesday 20 August only <a href=""/personalised-chocolate"">40g personalised chocolate bar</a> orders can be taken. For all other orders please contact <a href=""tel:+353860649222"">086-064-9222</a> or email <a href=""mailto:info@bbbonbon.ie"">info@bbbonbon.ie</p></div>-->
				]]></add>
			</operation>
		</file>
	</modification>
"
mVsP58Vj,RechargeFuelFast,Vodka51200,Lua,Friday 20th of June 2025 06:39:33 AM CDT,"function rechargeTurtle()
  local carburants = {
    [""minecraft:coal""] = true,
    [""minecraft:charcoal""] = true,
    [""thermalfoundation:material""] = true -- exemple: coal coke (à adapter selon damage)
  }

  local fuelAvant = turtle.getFuelLevel()
  local carburantTrouve = false

  for slot = 1, 16 do
    turtle.select(slot)
    local item = turtle.getItemDetail()

    if item then
      -- Vérifie si l'item est un carburant utilisable
      if turtle.refuel(0) then
        turtle.refuel()
        print(""Rechargement avec : "" .. item.name)
        carburantTrouve = true
      end
    end
  end

  local fuelApres = turtle.getFuelLevel()
  turtle.select(1) -- revenir au slot 1

  if carburantTrouve then
    print(""Carburant avant : "" .. fuelAvant)
    print(""Carburant après : "" .. fuelApres)
    print(""Quantité rechargée : "" .. (fuelApres - fuelAvant))
  else
    print(""Aucun carburant valide trouvé dans l'inventaire."")
  end
end

-- Exécution
rechargeTurtle()
"
vJMSDxaY,Untitled,Sort6666,C#,Friday 20th of June 2025 06:12:06 AM CDT,"#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies.TradeSaberStrategies
{
	public class OrderEntryButtons : Strategy
	{	
		#region Position
		
		private double myDbl;
		
		private int positionSizeLong;
		private int positionSizeShort;
		
		private bool autoPositionSize;
		private bool customPositionSize;
		
		private double riskSize; // Got deleted. Shorts only, may need later. may delete later
		private double riskOffset;
		
		//RR Mode
		private double LongValues; 
		private double ShortValues;
			
		private double LongValuesOffset;
		private double ShortValuesOffset;
		
		//Tick Mode
		private double LongValuesOffsetTickMode;
		private double ShortValuesOffsetTickMode;
		
		private double LongValuesTickMode;
		private double ShortValuesTickMode;
		
		
		private int firstTargetPositionLong;
		private int secondTargetPositionLong;
		
		private int firstTargetPositionShort;
		private int secondTargetPositionShort;
		
		
		
		#endregion
		
		#region Custom Entries
		
		private bool activateMarket;
		private bool armMarket;
		private bool armMarketLong;
		private bool armMarketShort;
		
		private int  armMarketCount = 0;
		
		
		private bool enterClosePrice;
		
		//private bool enterBodyLongHL; May use Later
		//private bool enterBodyShortHL; May use Later
		
		#endregion
		
		#region Entry Offset
		
		private double entryAreaLong;
		private double entryAreaShort;
		
		private double entryAreaClose;
		
		private double percentageCalcEntry;
		private double priceCalcEntry;
		private double tickCalcEntry;
		private double candleBarOffsetEntry;
				
		private double enterLong;
		private double enterShort;
		
		private double enterCloseLong;
		private double enterCloseShort;
		
		#endregion
		
		#region Limit Entry Offset
	
		private double percentageCalcLimitLong;
		private double percentageCalcLimitShort;
		private double priceCalcLimit;
		private double tickCalcLimit;
		private double candleBarOffsetLimit;
				
		private double limitOffsetLong;
		private double limitOffsetShort;
		
		private double limitPriceSetLong;
		private double limitPriceSetShort;
		
		#endregion
		
		#region Stop Offset
		
		private double stopAreaLong;
		private double stopAreaShort;
		
		private double percentageCalcStop;
		private double priceCalcStop;
		private double tickCalcStop;
		private double candleBarOffsetStop;
				
		private double stopLong;
		private double stopShort;
		
		private double setStopLong;
		private double setStopShort;
		
		#endregion
		
		#region Initial Profit Targets
		
		private double setFirstTargetLong;
		private double setFinalTargetLong;
		
		private double setFirstTargetShort;
		private double setFinalTargetShort;
		#endregion
		
		#region Breakeven Offset
		
		private double breakevenAreaLong;
		private double breakevenAreaShort;
		
		private double percentageCalcBreakeven;
		private double priceCalcBreakeven;
		private double tickCalcBreakeven;
		private double candleBarOffsetBreakeven;
				
		private double breakevenLong;
		private double breakevenShort;
		
		private double setBreakevenLong;
		private double setBreakevenShort;
		
		#endregion
		
		#region Trail Offset
		
		private double trailAreaLong;
		private double trailAreaShort;
		
		private double percentageCalcTrail;
		private double priceCalcTrail;
		private double tickCalcTrail;
		private double candleBarOffsetTrail;
		
		private bool activeTrail;
		
		#endregion
		
		#region Management
		
		private bool myFreeTrade;//Regular Trade Profit/Sop
		private bool myFreeLimit;//Limit Orders
		
		//BE Area
		private bool breakevenAreaSetButton;
		private bool breakevenAreaSetAuto;
		private bool myFreeBEArea;
		private double breakevenAreaTrigger;
		private double breakevenAreaStopSet;
		
		//BE Actual
		private bool breakevenActualSetButton;
		private bool breakevenActualSetAuto;
		private bool myFreeBEActual;
		private double breakevenActualTrigger;
		private double breakevenActualStopSet;
		
		//Custom Stop
		private bool myFreeCustomStop;
		private double customStopTrigger;
		
		//Trail
		//private bool candleTrailSetButton;
		//private bool candleTrailSetAuto;
		private double candleTrailTrigger;
		
		private double candleTrailStopSetLong;
		private double candleTrailStopSetShort;
		
		private bool myFreeCandleTrail;
		private bool trailTriggeredCandle;
		//private bool myFreeCustomTrail;//Custom Trail
		
		//private bool myFreeCandleTrail;//Candle Trail
		
		#endregion
		
		#region Fib 
		
		private bool isFib;
		private int fibCount = 1;
		
		#endregion
	
		private bool countOnce;
		
		private bool myFillCheck;
		
		private int myPosition;
		
		private OrderManagement	managementType = OrderManagement.RR_Mode;
		
		public enum OrderManagement
		{
			RR_Mode,
			Tick_Mode,
		}
		
		private bool rrMode;
		private bool tickMode;
		
		private bool AddOffset = true;
		
		#region Button Clicked
		
		private bool longButtonHLClicked; 	//1
		private bool shortButtonHLClicked; 	//2 
			
		private bool longButtonMarketClicked;		//3
		private bool shortButtonMarketClicked;		//4
		
		private bool customLongClicked;				//5
		private bool customShortClicked;			//6
		
		
		private bool breakevenButtonClicked;		//8
		private bool trailButtonClicked;			//9
		
		private bool lineButtonClicked;				//10
		private bool longLineButtonClicked;
		private bool shortLineButtonClicked;
		
		private bool unlockButtonClicked;			//11
		
		private bool displayButtonClicked;			//16
		
		private bool fibButtonClicked;				//17
		
		#endregion
		
		#region Chart Trader Buttons
		
		private System.Windows.Controls.RowDefinition	addedRow;
		private Gui.Chart.ChartTab						chartTab;
		private Gui.Chart.Chart							chartWindow;
		private System.Windows.Controls.Grid			chartTraderGrid, chartTraderButtonsGrid, lowerButtonsGrid;
		private System.Windows.Controls.Button			longButtonHL, shortButtonHL, longButtonMarket, shortButtonMarket, customLong, customShort, myButton7, breakevenButton, trailButton, lineButton, unlockButton, myButton12, myButton13, myButton14, myButton15, displayButton, fibButton;
		private bool									panelActive;
		private System.Windows.Controls.TabItem			tabItem;
		
		#endregion
		
		#region TradeSaber Social
		
		private string author 								= ""TradeSaber(Dre)"";
		private string version 								= ""Version 5.0.2 // December 2022"";
		
		private string youtube								= ""https://youtu.be/WvO8Gwx3Fh0""; 
		private string discord								= ""https://discord.gg/2YU9GDme8j"";
		private string tradeSaber							= ""https://tradesaber.com/"";
		
		private bool showSocials;
		
		private bool youtubeButtonClicked;
		private bool discordButtonClicked;
		private bool tradeSaberButtonClicked;
		
		private System.Windows.Controls.Button youtubeButton;
		private System.Windows.Controls.Button discordButton;
		private System.Windows.Controls.Button tradeSaberButton;
		
		
		private System.Windows.Controls.Grid myGrid29;
		
		#endregion
		
		protected override void OnStateChange()
		{
			/// 5.0.2 Bug Fixes
			/// Issue with certain Futures instruments needing more than 2 decimals. Not setting proper targets.
			/// Issue with the Close Position button not closing dual targets
			/// Issue with Breakeven, Trail Not working after hitting first target (On filled Position) ....>Partial fill management has been disabled due to issue with position size
			
			if (State == State.SetDefaults)
			{
				Description									= @""Enter the description for your new custom Strategy here."";
				Name										= ""OrderEntryButtons"";
				Calculate									= Calculate.OnEachTick;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.UniqueEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
				
				#region Default Parameters
				
				//Position Size
				autoPositionSize							= true;
				MaxLossPerTrade								= 1000;
				customPositionSize							= false;
				CustomPositionAmount						= 5;
				
				//Custom Button
				armMarket									= false;
				enterClosePrice		 						= true;
				
				//Entry Offset
				PriceOffsetEntry							= 0;
				PercentageOffsetEntry						= 0;
				TickOffsetEntry								= 0;
				
				//Limit Order Offset (Offsets from Entry)
				PriceOffsetLimit							= 0;
				PercentageOffsetLimit						= 0;
				TickOffsetLimit								= 0;
				myFreeLimit									= true;
				useLimit									= false;
				
				//Dual Target Options
				dualTarget									= false;
				splitPercent								= 0.25;
				
				//Stop Offset
				stopLoss									= true;
				PriceOffsetStop								= 0;
				PercentageOffsetStop						= 0;
				TickOffsetStop								= 0;
				
				//Profit
				profitTarget								= true;
				FirstTargetRR								= 1;
				FinalTargetRR								= 5;
				
				
				//Management
				PriceOffsetBreakeven						= 0;
				PercentageOffsetBreakeven					= 0;
				TickOffsetBreakeven							= 0;
				
				breakevenAreaSetButton						= false;
				breakevenAreaSetAuto						= false;
				breakevenAreaTarget							= 1.0;
				
				breakevenActualSetButton					= true;
				breakevenActualSetAuto						= false;
				breakevenActualTarget						= 1.5;	
				
				///Custom Move - Later Use
				//customMoveStopSet							= false;
				//customMoveStopTarget						= 2.0;
				
				///customTrailSet							= false;
				///customTrailTarget						= 2.5;
				
				//TrailStop
				PriceOffsetTrail							= 0;
				PercentageOffsetTrail						= 0;
				TickOffsetTrail								= 0;
				
				
				candleTrailSetButton						= true;
				candleTrailSetAuto							= false;
				candleTrailTarget							= 1.0;							
							
				
				//Entry And Stop Line look back
				CandleLookBackEntry							= 1;
				CandleLookBackStop							= 1;
				
				CandleRange									= true;
				//AddOffset									= true;
				
		
				countOnce 									= true;
				

				DisplayText									= true; 
				
				showSocials 								= true;
				
				//Prints
				SystemPrint									= true;
				EntryPrints									= false;
				LimitPrints									= false;
				StopPrints									= false;
				PositionSizePrints							= false;
				ProfitTatgetPrints							= false;
				BreakevenPrints								= false;
				TrailPrints									= false;
				
				#endregion
			}
			else if (State == State.Configure)
			{
			}
			
			else if (State == State.DataLoaded)
			{				
				ClearOutputWindow();
				
				myDbl = Instrument.MasterInstrument.PointValue * Instrument.MasterInstrument.TickSize;
				
				
				switch (managementType)
				{
					case OrderManagement.RR_Mode:
					{
						rrMode 		= true;
						tickMode 	= false;
					}
					break;
					
					case OrderManagement.Tick_Mode:
					{
						rrMode 		= false;
						tickMode 	= true;
					}
					break;
				}
				
			}

			else if (State == State.Historical)
			{
				#region Chart Trader Buttons Load
				
				if (ChartControl != null)
				{
					ChartControl.Dispatcher.InvokeAsync(() =>
					{
						CreateWPFControls();
					});
				}
				
				#endregion
				
				#region Range/Unlock Buttons Load
				/* Removed -> Moved to chart trader
				
				if (UserControlCollection.Contains(myGrid))
					return;
				
				Dispatcher.InvokeAsync((() =>
				{
					myGrid = new System.Windows.Controls.Grid
					{
						Name = ""MyCustomGrid"", HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Top
					};
				
					System.Windows.Controls.ColumnDefinition column1 = new System.Windows.Controls.ColumnDefinition();
					System.Windows.Controls.ColumnDefinition column2 = new System.Windows.Controls.ColumnDefinition();
					
					myGrid.ColumnDefinitions.Add(column1);
					myGrid.ColumnDefinitions.Add(column2);
					
					lineButton = new System.Windows.Controls.Button
					{
						Name = ""longLineButton"", Content = ""LongRange"", Foreground = Brushes.Black, Background = Brushes.Green
					};
					
					unlockButton = new System.Windows.Controls.Button
					{
						Name = ""unlockButton"", Content = ""Unlocked"", Foreground = Brushes.Black, Background = Brushes.White
					};
				
					lineButton.Click += OnButtonClick;
					unlockButton.Click += OnButtonClick;
					
					System.Windows.Controls.Grid.SetColumn(lineButton, 0);
					System.Windows.Controls.Grid.SetColumn(unlockButton, 1);
					
					myGrid.Children.Add(lineButton);
					myGrid.Children.Add(unlockButton);
					
					UserControlCollection.Add(myGrid);
					
					longLineButtonClicked 	= true;
					unlockButtonClicked		= true;
					
				}));
				*/
				#endregion
				
				#region TradeSaber Socials
			
			if (showSocials)
			{
				if (UserControlCollection.Contains(myGrid29))
					return;
				
				Dispatcher.InvokeAsync((() =>
				{
					myGrid29 = new System.Windows.Controls.Grid
					{
						Name = ""MyCustomGrid"", HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Bottom
					};
					
					System.Windows.Controls.ColumnDefinition column1 = new System.Windows.Controls.ColumnDefinition();
					System.Windows.Controls.ColumnDefinition column2 = new System.Windows.Controls.ColumnDefinition();
					System.Windows.Controls.ColumnDefinition column3 = new System.Windows.Controls.ColumnDefinition();
					
					myGrid29.ColumnDefinitions.Add(column1);
					myGrid29.ColumnDefinitions.Add(column2);
					myGrid29.ColumnDefinitions.Add(column3);
					
					youtubeButton = new System.Windows.Controls.Button
					{
						Name = ""YoutubeButton"", Content = ""Youtube"", Foreground = Brushes.White, Background = Brushes.Red
					};
					
					discordButton = new System.Windows.Controls.Button
					{
						Name = ""DiscordButton"", Content = ""Discord"", Foreground = Brushes.White, Background = Brushes.RoyalBlue
					};
					
					tradeSaberButton = new System.Windows.Controls.Button
					{
						Name = ""TradeSaberButton"", Content = ""TradeSaber"", Foreground = Brushes.White, Background = Brushes.DarkOrange
					};
					
					youtubeButton.Click += OnButtonClick;
					discordButton.Click += OnButtonClick;
					tradeSaberButton.Click += OnButtonClick;
					
					System.Windows.Controls.Grid.SetColumn(youtubeButton, 0);
					System.Windows.Controls.Grid.SetColumn(discordButton, 1);
					System.Windows.Controls.Grid.SetColumn(tradeSaberButton, 2);
					
					myGrid29.Children.Add(youtubeButton);
					myGrid29.Children.Add(discordButton);
					myGrid29.Children.Add(tradeSaberButton);
					
					UserControlCollection.Add(myGrid29);
				}));
			}
		#endregion
			}
			
			else if (State == State.Terminated)
			{
				#region Chart Trader Termninate
				
				if (ChartControl != null)
				{
					ChartControl.Dispatcher.InvokeAsync(() =>
					{
						DisposeWPFControls();
					});
				}
				
				#endregion
				
				#region Terminate Range/Unlock Buttons
				/* Removed -> Moved to chart trader
				
				Dispatcher.InvokeAsync((() =>
				{
					if (myGrid != null)
					{
						if (lineButton != null)
						{
							myGrid.Children.Remove(lineButton);
							lineButton.Click -= OnButtonClick;
							lineButton = null;
						}
						
						if (unlockButton != null)
						{
							myGrid.Children.Remove(unlockButton);
							unlockButton.Click -= OnButtonClick;
							unlockButton = null;
						}
						
					}
				}));
					*/
				#endregion
				
				#region Terminate TradeSaber Socials
			
			if (showSocials)
			{
				Dispatcher.InvokeAsync((() =>
				{
					if (myGrid29 != null)
					{
						if (youtubeButton != null)
						{
							myGrid29.Children.Remove(youtubeButton);
							youtubeButton.Click -= OnButtonClick;
							youtubeButton = null;
						}
						
						if (discordButton != null)
						{
							myGrid29.Children.Remove(discordButton);
							discordButton.Click -= OnButtonClick;
							discordButton = null;
						}
						
						if (tradeSaberButton != null)
						{
							myGrid29.Children.Remove(tradeSaberButton);
							tradeSaberButton.Click -= OnButtonClick;
							tradeSaberButton = null;
						}		
					}
				}));
			}
		#endregion
			}
				
		}
		
		#region Button Click Events
	
		#region Buy High Button 1
		
		protected void Button1Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if(longButtonHL.Content == ""BUY HIGH"" && Position.MarketPosition == MarketPosition.Flat && customLongClicked == false)
			{
				if (unlockButtonClicked == false)
				{
					countOnce = true;
				}
				
				longButtonHL.Content = ""Live"";
				
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
				Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
				
				longButtonHLClicked = true;

				return;
			}
			
			if (longButtonHL.Content == ""Live"")
			{
				ForceRefresh();
				longButtonHL.Content = ""BUY HIGH"";
				longButtonHLClicked = false;
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				return;
			}
		}
		
		#endregion
		
		#region Sell Low Button 2

		protected void Button2Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if(shortButtonHL.Content == ""SELL LOW"" && Position.MarketPosition == MarketPosition.Flat && customShortClicked == false)
			{
				if (unlockButtonClicked == false)
				{
					countOnce = true;
				}
				
				shortButtonHL.Content = ""Live"";
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
				Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
				
				shortButtonHLClicked = true;

				return;
			}
			
			if (shortButtonHL.Content == ""Live"")
			{
				ForceRefresh();
				shortButtonHL.Content = ""SELL LOW"";
				shortButtonHLClicked = false;
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				return;
			}
		}
		
		#endregion
		
		#region Buy Market Button 3
		
		protected void Button3Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				countOnce = true;
				longButtonMarketClicked = true;
			}		
			return;
		}
		
		#endregion
		
		#region Sell Market Button 4
		
		protected void Button4Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				countOnce = true;
				shortButtonMarketClicked = true;
			}		
			return;
		}		
		
		#endregion
		
		#region Custom Long Button 5
		
		protected void Button5Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			#region Arm Market
			
			if (armMarket)
			{
				if (customLong.Content == ""Custom Long"" && Position.MarketPosition == MarketPosition.Flat && longButtonHLClicked == false )
				{
					if (unlockButtonClicked == false)
					{
						countOnce = true;
						Print(""unlockButtfalse "" + activateMarket);
					}
					
					if (unlockButtonClicked == true)
					{
						armMarket = true;
						
						Print(""unlockButtTrue "" + activateMarket);
					}
					customLong.Content = ""MarketArmed"";
					customLong.Background	= Brushes.Orange;
					customLongClicked = true;
					
					Print(customLongClicked);
					return;
				}	
				
				if (customLong.Content == ""MarketArmed"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customLong.Content = ""Custom Long"";
					customLong.Background	= Brushes.MediumSeaGreen; 
					customLongClicked = false;
					armMarketCount = 0;
					Print(customLongClicked);
					
					return;
				}	
			}
			
			
			#endregion
			
			#region Close Price
			
			if (enterClosePrice)
			{
				if (customLong.Content == ""Custom Long"" && Position.MarketPosition == MarketPosition.Flat && longButtonHLClicked == false)
				{
					if (unlockButtonClicked == false)
					{
						countOnce = true;
					}
					
					customLong.Content = ""Previous Close L"";
					customLong.Background	= Brushes.Orange;
					customLongClicked = true;
					
					Print(customLongClicked);
					return;
				}	
				
				if (customLong.Content == ""Previous Close L"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customLong.Content = ""Custom Long"";
					customLong.Background	= Brushes.MediumSeaGreen; 
					customLongClicked = false;
					
					Print(customLongClicked);
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					return;
				}	
			}
			
			
			#endregion
		}
		
		#endregion
		
		#region Custom Short Button 6
		
		protected void Button6Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			#region Arm Market
			if (armMarket)
			{
				if (customShort.Content == ""Custom Short"" && Position.MarketPosition == MarketPosition.Flat && shortButtonHLClicked == false)
				{
					if (unlockButtonClicked == false)
					{
						countOnce = true;
						Print(""unlockButtfalse "" + activateMarket);
					}
					
					if (unlockButtonClicked == true)
					{
						armMarket = true;
						
						Print(""unlockButtTrue "" + activateMarket);
					}
					customShort.Content = ""MarketArmed"";
					customShort.Background	= Brushes.Orange;
					customShortClicked = true;
					Print(customShortClicked);
					return;
				}	
				
				if (customShort.Content == ""MarketArmed"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customShort.Content = ""Custom Short"";
					customShort.Background	= Brushes.IndianRed; 
					customShortClicked = false;
					armMarketCount = 0;
					Print(customShortClicked);
					
					return;
				}	
			}
			
			
			#endregion
			
			#region Close Price
			
			if (enterClosePrice)
			{
				if (customShort.Content == ""Custom Short"" && Position.MarketPosition == MarketPosition.Flat && shortButtonHLClicked == false)
				{
					if (unlockButtonClicked == false)
				{
					countOnce = true;
				}
					customShort.Content = ""Previous Close S"";
					customShort.Background	= Brushes.Orange;
					customShortClicked = true;
				
					Print(customShortClicked);
					return;
				}	
				
				if (customShort.Content == ""Previous Close S"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customShort.Content = ""Custom Short"";
					customShort.Background	= Brushes.IndianRed; 
					customShortClicked = false;
					Print(customShortClicked);
					
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					return;
				}	
			}
			#endregion
										
		}		
		
		#endregion
		
		#region Close Position Button 7
		
		protected void Button7Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();

			ExitLong(Position.Quantity);
			ExitShort(Position.Quantity);						
		}		
		
		#endregion //Swapped Position after
		
		#region Breakeven Button 8
		
		protected void Button8Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if (Position.MarketPosition == MarketPosition.Long && Close[0] > Position.AveragePrice)
			{
				breakevenButtonClicked = true;
				
				if (breakevenAreaSetButton)
				{
					myFreeBEArea = true;
				}
				
				if (breakevenActualSetButton)
				{
					myFreeBEActual = true;
				}	
			}
			
				if (Position.MarketPosition == MarketPosition.Short && Close[0] < Position.AveragePrice)
			{
				breakevenButtonClicked = true;
				
				if (breakevenAreaSetButton)
				{
					myFreeBEArea = true;
				}
				
				if (breakevenActualSetButton)
				{
					myFreeBEActual = true;
				}	
			}
			return;							
		}		
		
		#endregion
		
		#region Trail Button 9 // Needs custom added
		
		protected void Button9Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (candleTrailSetButton)
			{
				if (trailButton.Content == ""Trail Stop"" && Position.MarketPosition != MarketPosition.Flat)
				{
					trailButton.Content = ""Trail Active!"";
					trailButton.Background	= Brushes.Goldenrod; 
					
					myFreeCandleTrail 	= true;
					trailButtonClicked 	= true;
					activeTrail 		= true;
					
					Print(""trailButtonClicked "" + trailButtonClicked);
					return;
					
				}
				
				if (trailButton.Content == ""Trail Active!"" && Position.MarketPosition != MarketPosition.Flat)
				{
					trailButton.Content = ""Trail Stop"";
					trailButton.Background	= Brushes.LightGray; 
					
					trailButtonClicked = false;
					activeTrail = false;
					
					return;
				}
			}
			
				
				if (candleTrailSetButton)
				{
					myFreeCandleTrail = true;
				}
			
			return;							
		}		
		
		#endregion
		
		#region Range Line Button 10
		
		protected void Button10Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			#region Hide -> Long
			
			if (lineButton.Content == ""HideRange"")
			{
				lineButton.Content = ""LongRange"";
				lineButton.Foreground = Brushes.Black; 
				lineButton.Background = Brushes.Green;
				
				longLineButtonClicked = true;
				shortLineButtonClicked = false;
				countOnce = true;
				
				if (AddOffset)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
					}
					
					else if (AddOffset == false)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopAreaLong, Brushes.Red);
					}
			
					return;
			}
			
			#endregion
			
			#region Long -> Short
			
			if (lineButton.Content == ""LongRange"") 
			{
				lineButton.Content = ""ShortRange"";
				lineButton.Foreground = Brushes.White; 
				lineButton.Background = Brushes.Red;
				
				longLineButtonClicked = false;
				shortLineButtonClicked = true;
				countOnce = true;
				
				
					if (AddOffset)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
					}
					
					else if (AddOffset == false)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopAreaShort, Brushes.Red);
					}
					
				return;
			}
			
			#endregion
			
			#region Short -> Hide
			
			if (lineButton.Content == ""ShortRange"")
			{
				lineButton.Content = ""HideRange"";
				lineButton.Foreground = Brushes.White; 
				lineButton.Background = Brushes.Black;
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				
				longLineButtonClicked = false;
				shortLineButtonClicked = false;
				countOnce = true;
				
				return;
			}
			
			#endregion
			
		}		
		
		#endregion
		
		#region Unlocked Button 11
		
		protected void Button11Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (unlockButton.Content == ""Unlocked"")
			{
				unlockButton.Content = ""Locked"";
				unlockButton.Foreground = Brushes.White; 
				unlockButton.Background = Brushes.Black;
				
				unlockButtonClicked = true;

				return;
			}
			
			if (unlockButton.Content == ""Locked"")	
			{
				unlockButton.Content = ""Unlocked"";
				unlockButton.Foreground = Brushes.Black; 
				unlockButton.Background = Brushes.White;
				
				unlockButtonClicked = false;
				countOnce = true;

				return;
			}
		}		
		
		#endregion
		
		#region EntryLine ++ Button 12
		
		protected void Button12Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			CandleLookBackEntry ++;
			armMarketCount --;
			
			countOnce = true;
			Print(""CandleLookBackEntry "" + CandleLookBackEntry);
			return;
		}		
		
		#endregion
		
		#region EntryLine -- Button 13
		
		protected void Button13Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (CandleLookBackEntry > 1)
			{
				CandleLookBackEntry --;
				armMarketCount --;
			
				countOnce = true;
				Print(""CandleLookBackEntry "" + CandleLookBackEntry);
				return;
			}								
		}		
		
		#endregion
		
		#region StopLine ++ Button 14
		
		protected void Button14Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (rrMode)
			{
				CandleLookBackStop ++;
				armMarketCount --;
			
				countOnce = true;
				Print(""CandleLookBackStop "" + CandleLookBackStop);
				return;
			}
			
			if (tickMode)
			{
				TickOffsetStop ++;
				
				countOnce = true;
				Print(""Stop From Entry (Ticks) "" + TickOffsetStop);
				return;
			}
			
		}		
		
		#endregion
		
		#region StopLine -- Button 15
		
		protected void Button15Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (rrMode)
			{
				if (CandleLookBackStop > 1)
				{
					CandleLookBackStop --;
					armMarketCount --;
			
					countOnce = true;
					Print(""CandleLookBackStop "" + CandleLookBackStop);
					return;
				}							
			}
			
			if (tickMode)
			{
				if ((TickOffsetStop) > 1)
				{
					TickOffsetStop --;
					
					countOnce = true;
					Print(""Stop From Entry (Ticks) "" + TickOffsetStop);
					return;
				}
			}
							
		}		
		
		#endregion
		
		#region Display Button 16
		
		protected void Button16Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (displayButton.Content == ""Show Display"" && DisplayText == true)
			{
				displayButton.Content = ""Hide Display"";
				displayButton.Foreground = Brushes.White; 
				displayButton.Background = Brushes.Black;
				
				DisplayText = false;
				Print(DisplayText);
				RemoveDrawObject(""TextBox"");
				
				//countOnce = true;
				return;
			}
			
			if (displayButton.Content == ""Hide Display"" && DisplayText == false)
			{
				displayButton.Content = ""Show Display"";
				displayButton.Foreground = Brushes.Black; 
				displayButton.Background = Brushes.White;
				
				DisplayText = true;
				Print(DisplayText);
				
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true || Position.MarketPosition == MarketPosition.Long)
				{
					#region Draw Lines / Text Long Offset
		
						#region RR mode
						
					if (rrMode)
					{
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 2) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(stopLong, 2) + (""(""+CandleLookBackStop+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + LongValuesOffset
							+ ""\nRange(Ticks): "" + LongValuesOffset / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
						
						#endregion 
					
						#region Tick Mode
					
					if (tickMode)
					{
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 2) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(enterLong - candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + candleBarOffsetStop
							+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
				
					#endregion
					
					#endregion
				}
				
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true || Position.MarketPosition == MarketPosition.Short)
				{
					#region Draw Lines / Text Short Offset
				
						#region RR Mode
						
				if (rrMode)
				{
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopShort, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValuesOffset
						+ ""\nRange(Ticks): "" + ShortValuesOffset / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
						#region Tick Mode
						
				if (tickMode)
				{					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(enterShort + candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
				#endregion
				}
				
				//countOnce = true;
				return;
			}
												
		}		
		
		#endregion
		
		#region Fib Button 17
		
		protected void Button17Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (fibButton.Content == ""HideFib"")
			{
				fibButton.Content = ""ShowFib"";
				fibButton.Foreground = Brushes.Black; 
				fibButton.Background = Brushes.White;
				
				fibButtonClicked = true;
				
				if (fibButtonClicked && Position.MarketPosition == MarketPosition.Long)
				{
					if (rrMode)
					{
						Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, setStopLong, fibCount, enterLong);
					}
				
					if (tickMode)
					{
						Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, Position.AveragePrice - candleBarOffsetStop, fibCount, Position.AveragePrice);
					}
				}
			
			if (fibButtonClicked && Position.MarketPosition == MarketPosition.Short)
			{
				if (rrMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, setStopShort, fibCount, enterShort);
				}
				
				if (tickMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, Position.AveragePrice + candleBarOffsetStop, fibCount, Position.AveragePrice);
				}
			}
					
				return;
			}
			
			if (fibButton.Content == ""ShowFib"")
			{
				fibButton.Content = ""HideFib"";
				fibButton.Foreground = Brushes.White; 
				fibButton.Background = Brushes.Black;
				
				fibButtonClicked = false;
				
				if ((!fibButtonClicked) || (Position.MarketPosition == MarketPosition.Flat))
				
				{
					RemoveDrawObject(""FibLong"");
					RemoveDrawObject(""FibShort"");
				}
				
				return;
			}
		}		
		
		#endregion
		
		#endregion
		
		#region Button Controls
		
		protected void CreateWPFControls()
		{
			#region Create WPF Controls
			
				#region Button Grid
			
			chartWindow				= Window.GetWindow(ChartControl.Parent) as Gui.Chart.Chart;

			// if not added to a chart, do nothing
			if (chartWindow == null)
				return;

			// this is the entire chart trader area grid
			chartTraderGrid			= (chartWindow.FindFirst(""ChartWindowChartTraderControl"") as Gui.Chart.ChartTrader).Content as System.Windows.Controls.Grid;

			// this grid contains the existing chart trader buttons
			chartTraderButtonsGrid	= chartTraderGrid.Children[0] as System.Windows.Controls.Grid;

			// this grid is to organize stuff below
			lowerButtonsGrid = new System.Windows.Controls.Grid();

			//Makes 2 Columns
			lowerButtonsGrid.ColumnDefinitions.Add(new System.Windows.Controls.ColumnDefinition());			
			lowerButtonsGrid.ColumnDefinitions.Add(new System.Windows.Controls.ColumnDefinition());		
			
			//Makes Rows
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Buy High / Sell Low
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Market
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Custom
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Close Position
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Management
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //EntryLines 
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //EntryLine +-
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //StopLine +-
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Display / Fib
			
			addedRow	= new System.Windows.Controls.RowDefinition() { Height = new GridLength(240) };
				

			// this style (provided by NinjaTrader_MichaelM) gives the correct default minwidth (and colors) to make buttons appear like chart trader buttons
			Style basicButtonStyle	= Application.Current.FindResource(""BasicEntryButton"") as Style;
			
			#endregion

				#region Button Content
			
				longButtonHL = new System.Windows.Controls.Button()//1
				{		
					Name			= ""longButtonHL"",
					Content			= ""BUY HIGH"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
						
				};				

				shortButtonHL = new System.Windows.Controls.Button()//2
				{		
					Name			= ""shortButtonHL"",
					Content			= ""SELL LOW"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				longButtonMarket = new System.Windows.Controls.Button()//3
				{		
					
					Content			= string.Format(""Buy Market""),
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				shortButtonMarket = new System.Windows.Controls.Button()//4
				{		
					
					Content			= string.Format(""Short Market""),
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				customLong = new System.Windows.Controls.Button()//5
				{		
					
					Content			= ""Custom Long"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				customShort = new System.Windows.Controls.Button()//6
				{		
					
					Content			= ""Custom Short"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton7 = new System.Windows.Controls.Button()//7
				{		
					
					Content			= string.Format(""Close Position""),
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				breakevenButton = new System.Windows.Controls.Button()//8
				{		
					
					Content			= string.Format(""BreakEven""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				trailButton = new System.Windows.Controls.Button()//9
				{		
					
					Content			= ""Trail Stop"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				lineButton = new System.Windows.Controls.Button()//10
				{		
					
					Content			= ""HideRange"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				unlockButton = new System.Windows.Controls.Button()//11
				{		
					
					Content			= ""Unlocked"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
			
				myButton12 = new System.Windows.Controls.Button()//12
				{		
					
					Content			= string.Format(""EntryLine ++""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton13 = new System.Windows.Controls.Button()//13
				{		
					
					Content			= string.Format(""EntryLine --""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton14 = new System.Windows.Controls.Button()//14
				{		
					
					Content			= string.Format(""StopLine ++""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton15 = new System.Windows.Controls.Button()//15
				{		
					
					Content			= string.Format(""StopLine --""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				
				
				if (DisplayText)
				{
					displayButton = new System.Windows.Controls.Button()//16
					{		
						
						Content			= ""Show Display"",
						Height			= 25, 
						Margin			= new Thickness(5,0,5,0),
						Padding			= new Thickness(0,0,0,0),
						Style			= basicButtonStyle
					};		
				}
				
				if (DisplayText == false)
				{
					displayButton = new System.Windows.Controls.Button()//16 (2)
					{		
						
						Content			= ""Hide Display"",
						Height			= 25, 
						Margin			= new Thickness(5,0,5,0),
						Padding			= new Thickness(0,0,0,0),
						Style			= basicButtonStyle
					};		
				}
				
				
				
				fibButton = new System.Windows.Controls.Button()//17
				{		
					
					Content			= ""HideFib"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				#endregion
				
				#region Button Colors
					
				//1. Buy High
					longButtonHL.Background	= Brushes.ForestGreen;
					longButtonHL.BorderBrush	= Brushes.Black;
					longButtonHL.Foreground    = Brushes.Black;	
					longButtonHL.BorderThickness = new Thickness(2.0);
					longButtonHL.IsEnabled = true;

				//2. Sell Low
					shortButtonHL.Background	= Brushes.Firebrick;
					shortButtonHL.BorderBrush	= Brushes.Black;	
					shortButtonHL.Foreground    = Brushes.White;	
					shortButtonHL.BorderThickness = new Thickness(2.0);			
				
				//3. Long Market
					longButtonMarket.Background	= Brushes.MediumSeaGreen;
					longButtonMarket.BorderBrush	= Brushes.Black;	
					longButtonMarket.Foreground    = Brushes.Black;	
					longButtonMarket.BorderThickness = new Thickness(2.0);				
				
				//.4 Short Market
					shortButtonMarket.Background	= Brushes.IndianRed;
					shortButtonMarket.BorderBrush	= Brushes.Black;	
					shortButtonMarket.Foreground    = Brushes.White;	
					shortButtonMarket.BorderThickness = new Thickness(2.0);		
				
				//5. Custom Long
					customLong.Background	= Brushes.MediumSeaGreen;
					customLong.BorderBrush	= Brushes.Black;	
					customLong.Foreground    = Brushes.Black;	
					customLong.BorderThickness = new Thickness(2.0);	
				
				//6. Custom Short
					customShort.Background	= Brushes.IndianRed;
					customShort.BorderBrush	= Brushes.Black;	
					customShort.Foreground    = Brushes.White;	
					customShort.BorderThickness = new Thickness(2.0);	
				
				//7. Close Position - Swithced Position after
					myButton7.Background	= Brushes.DarkOrange;
					myButton7.BorderBrush	= Brushes.Black;	
					myButton7.Foreground    = Brushes.Black;	
					myButton7.BorderThickness = new Thickness(2.0);
				
				//8. Breakeven
					breakevenButton.Background	= Brushes.LightGray;
					breakevenButton.BorderBrush	= Brushes.Black;	
					breakevenButton.Foreground    = Brushes.DarkGreen;	
					breakevenButton.BorderThickness = new Thickness(2.0);
				
				//9. Trail
					trailButton.Background	= Brushes.LightGray;
					trailButton.BorderBrush	= Brushes.Black;	
					trailButton.Foreground    = Brushes.DarkGreen;	
					trailButton.BorderThickness = new Thickness(2.0);
				
				//10. Line
					lineButton.Background	= Brushes.Black;
					lineButton.BorderBrush	= Brushes.Black;	
					lineButton.Foreground    = Brushes.White;	
					lineButton.BorderThickness = new Thickness(2.0);
				
				//11. Unlocked
					unlockButton.Background	= Brushes.White;
					unlockButton.BorderBrush	= Brushes.Black;	
					unlockButton.Foreground    = Brushes.Black;	
					unlockButton.BorderThickness = new Thickness(2.0);
				
				//12. EntryLine ++
					myButton12.Background	= Brushes.PaleGreen;
					myButton12.BorderBrush	= Brushes.Black;	
					myButton12.Foreground    = Brushes.DarkGreen;	
					myButton12.BorderThickness = new Thickness(2.0);
				
				//13. EntryLine --
					myButton13.Background	= Brushes.PaleGreen;
					myButton13.BorderBrush	= Brushes.Black;	
					myButton13.Foreground    = Brushes.Firebrick;	
					myButton13.BorderThickness = new Thickness(2.0);
				
				//14. StopLine ++
					myButton14.Background	= Brushes.LightSalmon;
					myButton14.BorderBrush	= Brushes.Black;	
					myButton14.Foreground    = Brushes.DarkGreen;	
					myButton14.BorderThickness = new Thickness(2.0);
				
				//15. StopLine --
					myButton15.Background	= Brushes.LightSalmon;
					myButton15.BorderBrush	= Brushes.Black;	
					myButton15.Foreground    = Brushes.Firebrick;	
					myButton15.BorderThickness = new Thickness(2.0);
				
				//16.
				if (DisplayText)
				{
					displayButton.Background	= Brushes.White;
					displayButton.BorderBrush	= Brushes.Black;	
					displayButton.Foreground    = Brushes.Black;	
					displayButton.BorderThickness = new Thickness(2.0);
				}
				
				if (DisplayText == false)
				{
					displayButton.Background	= Brushes.Black;
					displayButton.BorderBrush	= Brushes.Black;	
					displayButton.Foreground    = Brushes.White;	
					displayButton.BorderThickness = new Thickness(2.0);
				}
					
				
				//17.
					fibButton.Background	= Brushes.Black;
					fibButton.BorderBrush	= Brushes.Black;	
					fibButton.Foreground    = Brushes.White;	
					fibButton.BorderThickness = new Thickness(2.0);
				
			
			#endregion	
				
				#region Button Click
				
					longButtonHL.Click +=  Button1Click;
					shortButtonHL.Click +=  Button2Click;
					
					longButtonMarket.Click +=  Button3Click;
					shortButtonMarket.Click +=  Button4Click;	
				
			
					customLong.Click +=  Button5Click;
					customShort.Click +=  Button6Click;
				
					myButton7.Click +=  Button7Click;
				
					breakevenButton.Click +=  Button8Click;
					trailButton.Click +=  Button9Click;
				
					lineButton.Click +=  Button10Click;
					unlockButton.Click +=  Button11Click;
				
					myButton12.Click +=  Button12Click;
				
					myButton13.Click +=  Button13Click;
				
					myButton14.Click +=  Button14Click;
					myButton15.Click +=  Button15Click;
				
					displayButton.Click +=  Button16Click;
					fibButton.Click +=  Button17Click;
				
				#endregion
				
				#region Button Location
				
					//High Low				
					System.Windows.Controls.Grid.SetColumn(longButtonHL, 0);				
					System.Windows.Controls.Grid.SetColumn(shortButtonHL, 1);
					
					//Market
					System.Windows.Controls.Grid.SetColumn(longButtonMarket, 0);				
					System.Windows.Controls.Grid.SetRow(longButtonMarket, 1);					
							
					System.Windows.Controls.Grid.SetColumn(shortButtonMarket, 1);				
					System.Windows.Controls.Grid.SetRow(shortButtonMarket, 1);						
				
					//Custom
					System.Windows.Controls.Grid.SetColumn(customLong, 0);				
					System.Windows.Controls.Grid.SetRow(customLong, 2);
				
					System.Windows.Controls.Grid.SetColumn(customShort, 1);				
					System.Windows.Controls.Grid.SetRow(customShort, 2);
				
					//Breakeven
					System.Windows.Controls.Grid.SetColumn(breakevenButton, 0);				
					System.Windows.Controls.Grid.SetRow(breakevenButton, 3);
				
					//Trail
					System.Windows.Controls.Grid.SetColumn(trailButton, 1);				
					System.Windows.Controls.Grid.SetRow(trailButton, 3);
				
					//Close
					System.Windows.Controls.Grid.SetColumn(myButton7, 1);				
					System.Windows.Controls.Grid.SetRow(myButton7, 4);
				
					//Range
					System.Windows.Controls.Grid.SetColumn(lineButton, 0);				
					System.Windows.Controls.Grid.SetRow(lineButton, 5);
				
					//Unlocked
					System.Windows.Controls.Grid.SetColumn(unlockButton, 1);				
					System.Windows.Controls.Grid.SetRow(unlockButton, 5);
				
					//EntryLine ++
					System.Windows.Controls.Grid.SetColumn(myButton12, 0);				
					System.Windows.Controls.Grid.SetRow(myButton12, 6);
					
					//EntryLine --
					System.Windows.Controls.Grid.SetColumn(myButton13, 1);				
					System.Windows.Controls.Grid.SetRow(myButton13, 6);
				
					//StopLine ++
					System.Windows.Controls.Grid.SetColumn(myButton14, 0);				
					System.Windows.Controls.Grid.SetRow(myButton14, 7);
				
					//StopLine --
					System.Windows.Controls.Grid.SetColumn(myButton15, 1);				
					System.Windows.Controls.Grid.SetRow(myButton15, 7);
				
					//Display
					System.Windows.Controls.Grid.SetColumn(displayButton, 0);				
					System.Windows.Controls.Grid.SetRow(displayButton, 8);
				
					//Fib
					System.Windows.Controls.Grid.SetColumn(fibButton, 1);				
					System.Windows.Controls.Grid.SetRow(fibButton, 8);
				
				#endregion
				
				#region Add Buttons
				
					lowerButtonsGrid.Children.Add(longButtonHL);							
					lowerButtonsGrid.Children.Add(shortButtonHL);
				
				
					lowerButtonsGrid.Children.Add(longButtonMarket);
					lowerButtonsGrid.Children.Add(shortButtonMarket);				
				
					lowerButtonsGrid.Children.Add(customLong);
					lowerButtonsGrid.Children.Add(customShort);	
				
					lowerButtonsGrid.Children.Add(myButton7);
				
					lowerButtonsGrid.Children.Add(breakevenButton);
				
					lowerButtonsGrid.Children.Add(trailButton);
				
					lowerButtonsGrid.Children.Add(lineButton);
					lowerButtonsGrid.Children.Add(unlockButton);
				
					lowerButtonsGrid.Children.Add(myButton12);
					lowerButtonsGrid.Children.Add(myButton13);
				
					lowerButtonsGrid.Children.Add(myButton14);
					lowerButtonsGrid.Children.Add(myButton15);
				
					lowerButtonsGrid.Children.Add(displayButton);
					lowerButtonsGrid.Children.Add(fibButton);
				
				#endregion
				
			if (TabSelected())
				InsertWPFControls();

			chartWindow.MainTabControl.SelectionChanged += TabChangedHandler;
			
			#endregion
		}
	
		public void DisposeWPFControls() 
		{
			#region Dispose
			
			if (chartWindow != null)
				chartWindow.MainTabControl.SelectionChanged -= TabChangedHandler;

			if (longButtonHL != null)
				longButtonHL.Click -= Button1Click;

			if (shortButtonHL != null)
				shortButtonHL.Click -= Button2Click;
			
			if (longButtonMarket != null)
				longButtonMarket.Click -= Button3Click;
			
			if (shortButtonMarket != null)
				shortButtonMarket.Click -= Button4Click;
			
			if (customLong != null)
				customLong.Click -= Button5Click;
			
			if (customShort != null)
				customShort.Click -= Button6Click;
			
			if (myButton7 != null)
				myButton7.Click -= Button7Click;
			
			if (breakevenButton != null)
				breakevenButton.Click -= Button8Click;
				
			if (trailButton != null)
				trailButton.Click -= Button9Click;	
			
			if (lineButton != null)
				lineButton.Click -= Button10Click;
			
			if (unlockButton != null)
				unlockButton.Click -= Button11Click;
			
			if (myButton12 != null)
				myButton12.Click -= Button12Click;
			
			if (myButton13 != null)
				myButton13.Click -= Button13Click;
			
			if (myButton14 != null)
				myButton14.Click -= Button14Click;
			
			if (myButton15 != null)
				myButton15.Click -= Button15Click;
			
			if (displayButton != null)
				displayButton.Click -= Button16Click;
			
			if (fibButton != null)
				fibButton.Click -= Button17Click;

			RemoveWPFControls();
			
			#endregion
		}
		
		public void InsertWPFControls()
		{
			#region Insert WPF
			
			if (panelActive)
				return;
			
			// add a new row (addedRow) for our lowerButtonsGrid below the ask and bid prices and pnl display			
			chartTraderGrid.RowDefinitions.Add(addedRow);
			System.Windows.Controls.Grid.SetRow(lowerButtonsGrid, (chartTraderGrid.RowDefinitions.Count - 1));
			chartTraderGrid.Children.Add(lowerButtonsGrid);

			panelActive = true;
			
			#endregion
		}
		
		#endregion
		
	
		protected override void OnBarUpdate()
		{
			if (State != State.Realtime ) 
				return;
			
			if (countOnce && Position.MarketPosition == MarketPosition.Flat && unlockButtonClicked == false)
			{
				
				if (CandleRange == false)
				{
					#region Entry Offset
					
			if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || (customLongClicked == true && enterClosePrice == false)
				|| shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || (customShortClicked == true && enterClosePrice == false)
				)				
			{
				//HL
				entryAreaLong		= High[CandleLookBackEntry];
				entryAreaShort		= Low[CandleLookBackEntry];	
			}
				
			if ((customLongClicked || customShortClicked) && enterClosePrice == true)
			{
				//Previous Close Price	
				entryAreaLong	= Close[CandleLookBackEntry];
				entryAreaShort	= Close[CandleLookBackEntry];	
			}
				
					
			//Adds offset to your entry area. Gives user customization.
			percentageCalcEntry 	= ((High[CandleLookBackEntry] - Low[CandleLookBackEntry]) * PercentageOffsetEntry);
			priceCalcEntry 			= PriceOffsetEntry;
			tickCalcEntry			= TickOffsetEntry * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetEntry = Math.Max(percentageCalcEntry, Math.Max(priceCalcEntry, tickCalcEntry));
			
			//Add both of them together to define final entry point
			enterLong = entryAreaLong + candleBarOffsetEntry;
			enterShort = entryAreaShort - candleBarOffsetEntry;
			
			
			#region Entry Prints
			
			if (SystemPrint)
			{
				if (EntryPrints)
				{
					Print(""percentageCalcEntry "" + percentageCalcEntry + "" "" + Time[CandleLookBackEntry]);
					Print(""priceCalcEntry "" + priceCalcEntry + "" "" + Time[CandleLookBackEntry]);
					Print(""tickCalcEntry "" + tickCalcEntry + "" "" + Time[CandleLookBackEntry]);
					
					Print(""candleBarOffsetEntry "" + candleBarOffsetEntry + "" "" + Time[CandleLookBackEntry]);
					
					Print(""enterLong "" + enterLong + "" "" + Time[CandleLookBackEntry]);
					Print(""enterShort "" + enterShort + "" "" + Time[CandleLookBackEntry]);
				}
			}
			#endregion
			
			#endregion
			
					#region Stop Offset
			
			//Define what area you will set a stop (If it is based on the chart)
			stopAreaLong		= Low[CandleLookBackStop];
			stopAreaShort		= High[CandleLookBackStop];
			
			//Adds offset to your stop area. Gives user customization.
			percentageCalcStop 		= ((High[CandleLookBackStop] - Low[CandleLookBackStop]) * PercentageOffsetStop);
			priceCalcStop 			= PriceOffsetStop;
			tickCalcStop			= TickOffsetStop * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetStop = Math.Max(percentageCalcStop, Math.Max(priceCalcStop, tickCalcStop));
			
			//Add both of them together to define final stop point
			stopLong = stopAreaLong - candleBarOffsetStop;
			stopShort = stopAreaShort + candleBarOffsetStop;
			
			#region StopPrints
			
			if (SystemPrint)
			{
				if (StopPrints)
				{
					Print(""percentageCalcStop "" + percentageCalcStop + "" "" + Time[CandleLookBackStop]);
					Print(""priceCalcStop "" + priceCalcStop + "" "" + Time[CandleLookBackStop]);
					Print(""tickCalcStop "" + tickCalcStop + "" "" + Time[CandleLookBackStop]);
				
					Print(""candleBarOffsetStop "" + candleBarOffsetStop + "" "" + Time[CandleLookBackStop]);
					
					Print(""stopLong "" + stopLong + "" "" + Time[CandleLookBackStop]);
					Print(""stopShort "" + stopShort + "" "" + Time[CandleLookBackStop]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Breakeven Offset
			
			//Define what area you will set a breakeven (If it is based on the chart)
			breakevenAreaLong		= entryAreaLong;
			breakevenAreaShort		= entryAreaShort;
			
			//Adds offset to your breakeven area. Gives user customization.
			percentageCalcBreakeven 	= ((entryAreaLong - stopAreaLong) * PercentageOffsetBreakeven);
			priceCalcBreakeven 			= PriceOffsetBreakeven;
			tickCalcBreakeven			= TickOffsetBreakeven * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetBreakeven = Math.Max(percentageCalcBreakeven, Math.Max(priceCalcBreakeven, tickCalcBreakeven));
			
			//Add both of them together to define final breakeven point
			//breakevenLong = breakevenAreaLong - candleBarOffsetBreakeven;
			//breakevenShort = breakevenAreaShort + candleBarOffsetBreakeven;
			
			#region BreakevenPrints
			
			if (SystemPrint)
			{
				if (BreakevenPrints)
				{
					Print(""percentageCalcBreakeven "" + percentageCalcBreakeven + "" "" + Time[1]);
					Print(""priceCalcBreakeven "" + priceCalcBreakeven + "" "" + Time[1]);
					Print(""tickCalcBreakeven "" + tickCalcBreakeven + "" "" + Time[1]);
				
					Print(""candleBarOffsetBreakeven "" + candleBarOffsetBreakeven + "" "" + Time[1]);
					
					Print(""breakevenLong "" + breakevenLong + "" "" + Time[1]);
					Print(""breakevenShort "" + breakevenShort + "" "" + Time[1]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Range Values
			
			LongValuesOffset 	= Math.Round(enterLong - stopLong, 4);
			ShortValuesOffset	= Math.Round(stopShort - enterShort, 4);
			
			LongValues 			= Math.Round(entryAreaLong - stopAreaLong, 4);
			ShortValues			= Math.Round(stopAreaShort - entryAreaShort, 4);
			
			#endregion
			
					#region Limit Entry Offset
			
			if (useLimit)
			{
				percentageCalcLimitLong		= LongValuesOffset * PercentageOffsetLimit;
				percentageCalcLimitShort	= ShortValuesOffset * PercentageOffsetLimit;
				priceCalcLimit				= PriceOffsetLimit;
				tickCalcLimit				= TickOffsetLimit * TickSize;
				
				limitOffsetLong				= Math.Max(percentageCalcLimitLong, Math.Max(priceCalcLimit, tickCalcLimit));	
				limitOffsetShort			= Math.Max(percentageCalcLimitShort, Math.Max(priceCalcLimit, tickCalcLimit));
				
				if (AddOffset)
				{
					limitPriceSetLong			= enterLong + limitOffsetLong;
					limitPriceSetShort			= enterShort - limitOffsetShort;
				}
				
				else if (AddOffset == false)
				{
					limitPriceSetLong			= entryAreaLong + limitOffsetLong;
					limitPriceSetShort			= entryAreaShort - limitOffsetShort;
				}
				
				#region Limit Prints
			
			if (SystemPrint)
			{
				if (LimitPrints)
				{
					Print(""percentageCalcLimitLong "" + percentageCalcLimitLong + "" "" + Time[0]);
					Print(""percentageCalcLimitShort "" + percentageCalcLimitShort + "" "" + Time[0]);
					Print(""priceCalcLimit "" + priceCalcLimit + "" "" + Time[0]);
					Print(""tickCalcLimit "" + tickCalcLimit + "" "" + Time[0]);
					
					Print(""limitOffsetLong "" + limitOffsetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
					
					Print(""limitPriceSetLong "" + limitPriceSetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
				}
			}
			#endregion
			}
			
			
			#endregion
			
			
					#region Offset Added Logic
			
			if (AddOffset) ///Update Prints
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
						
					#region Position Size Long
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (LongValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeLong = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeLong = (Convert.ToInt32(riskOffset));
						
						if (positionSizeLong < 1)
						{
							positionSizeLong = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionLong = (Convert.ToInt32(positionSizeLong * splitPercent));
						
						if (firstTargetPositionLong < 1)
						{
							firstTargetPositionLong = 1;
						}
				
					secondTargetPositionLong = positionSizeLong - firstTargetPositionLong; 
						
						if(secondTargetPositionLong < 1)
						{
							secondTargetPositionLong = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeLong ""+ positionSizeLong + "" "" + Time[0]);
								Print(""firstTargetPositionLong ""+ firstTargetPositionLong + "" "" + Time[0]);
								Print(""secondTargetPositionLong ""+ secondTargetPositionLong + "" "" + Time[0]);
							}
						}
						
						#endregion
							
					#endregion
			
					#region Set Stop/Profit Long
				
				if (Low[0] > stopLong)
				{
					setStopLong = stopLong;
					
					setFirstTargetLong = enterLong + (LongValuesOffset * FirstTargetRR);
					setFinalTargetLong = enterLong + (LongValuesOffset * FinalTargetRR);
				}
				
				else if (Low[0] <= stopLong)
				{
					setStopLong = Low[0] - candleBarOffsetStop;
					
					setFirstTargetLong = enterLong + ((enterLong - setStopLong) * FirstTargetRR);
					setFinalTargetLong = enterLong + ((enterLong - setStopLong) * FinalTargetRR);
				}
				
				#region Profit Target Long Prints
				
				if (SystemPrint)
				{
					if (ProfitTatgetPrints)
					{
						Print(""setStopLong ""+ setStopLong + "" "" + Time[0]);
						Print(""setFirstTargetLong ""+ setFirstTargetLong + "" "" + Time[0]);
						Print(""setFinalTargetLong ""+ setFinalTargetLong + "" "" + Time[0]);		
					}
				}
				
				#endregion
				
				
				#endregion
				
					#region Draw Lines / Text Long Offset
		
						#region RR mode
						
					if (rrMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(stopLong, 4) + (""(""+CandleLookBackStop+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + LongValuesOffset
							+ ""\nRange(Ticks): "" + LongValuesOffset / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
						
						#endregion 
					
						#region Tick Mode
					
					if (tickMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", enterLong - candleBarOffsetStop, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(enterLong - candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + candleBarOffsetStop
							+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
				
					#endregion
					
					#endregion
										
				}
				
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (ShortValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeShort = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeShort = (Convert.ToInt32(riskOffset));
						
						if (positionSizeShort < 1)
						{
							positionSizeShort = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionShort = (Convert.ToInt32(positionSizeShort * splitPercent));
						
						if (firstTargetPositionShort < 1)
						{
							firstTargetPositionShort = 1;
						}
				
					secondTargetPositionShort = positionSizeShort - firstTargetPositionShort; 
						
						if(secondTargetPositionShort < 1)
						{
							secondTargetPositionShort = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeShort ""+ positionSizeShort + "" "" + Time[0]);
								Print(""firstTargetPositionShort ""+ firstTargetPositionShort + "" "" + Time[0]);
								Print(""secondTargetPositionShort ""+ secondTargetPositionShort + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
				
					#region Set Stop/Profit Short
				
				if (High[0] < stopShort)
				{
					setStopShort = stopShort;
					
					setFirstTargetShort = enterShort - (ShortValuesOffset * FirstTargetRR);
					setFinalTargetShort = enterShort - (ShortValuesOffset * FinalTargetRR);
				}
				
				else if (High[0] >= stopShort)
				{
					setStopShort = High[0] + candleBarOffsetStop;
					
					setFirstTargetShort = enterShort - ((setStopShort - enterShort) * FirstTargetRR);
					setFinalTargetShort = enterShort - ((setStopShort - enterShort) * FinalTargetRR);
				}
				
				
				#region Profit Target Prints
						
						if (SystemPrint)
						{
							if (ProfitTatgetPrints)
							{
								Print(""setStopShort ""+ setStopShort + "" "" + Time[0]);
								Print(""setFirstTargetShort ""+ setFirstTargetShort + "" "" + Time[0]);
								Print(""setFinalTargetShort ""+ setFinalTargetShort + "" "" + Time[0]);
							}
						}
						
						#endregion
				
				#endregion
					
					#region Draw Lines / Text Short Offset
				
						#region RR Mode
						
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopShort, 4) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValuesOffset
						+ ""\nRange(Ticks): "" + ShortValuesOffset / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
						#region Tick Mode
						
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", enterShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(enterShort + candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
				#endregion
				
				}
			}
			
			#endregion	
			
					#region W/O Offset 
			/* Removed for simplicity of use
			
			if (AddOffset == false)
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
				
					#region Position Size Long
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (LongValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					
				
					#endregion
					
					#region Set Stop/Profit Long		
					
				if (Low[0] > stopAreaLong)
				{
					setStopLong = stopAreaLong;
				}
				
				else if (Low[0] <= stopAreaLong)
				{
					setStopLong = Low[0];
				}
				
				setFirstTarget = entryAreaLong + (LongValues * FirstTargetRR);
				setFinalTarget = entryAreaLong + (LongValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Long W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaLong, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaLong, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + LongValues	
						+ ""\nRange(Ticks): "" + LongValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaLong - candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(entryAreaLong - candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
					
					#endregion
				
				}
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (ShortValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
					
					#region Set Stop/Profit Short		
					
				if (High[0] < stopAreaShort)
				{
					setStopShort = stopAreaShort;
				}
				
				else if (High[0] >= stopAreaShort)
				{
					setStopShort = High[0];
				}
				
				setFirstTarget = entryAreaShort - (ShortValues * FirstTargetRR);
				setFinalTarget = entryAreaShort - (ShortValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Short W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaShort, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValues	
						+ ""\nRange(Ticks): "" + ShortValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round( entryAreaShort + candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#endregion
				
				}
				
			}
			*/
			#endregion //Removed for now
			
				}
			
				if (CandleRange)
				{
					#region Entry Offset
	
			if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || (customLongClicked == true && enterClosePrice == false)
				|| shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || (customShortClicked == true && enterClosePrice == false)
				)		
			{	
				//HL
				entryAreaLong		= MAX(High, CandleLookBackEntry)[1];
				entryAreaShort		= MIN(Low, CandleLookBackEntry)[1];
			}	
			
			if ((customLongClicked || customShortClicked) && enterClosePrice == true)
			{
				//Previous Close Price	
				entryAreaLong		= MAX(Close, CandleLookBackEntry)[1];
				entryAreaShort		= MAX(Close, CandleLookBackEntry)[1];
			}
			
			//Adds offset to your entry area. Gives user customization.
			percentageCalcEntry 	= ((entryAreaLong - entryAreaShort) * PercentageOffsetEntry);
			priceCalcEntry 			= PriceOffsetEntry;
			tickCalcEntry			= TickOffsetEntry * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetEntry = Math.Max(percentageCalcEntry, Math.Max(priceCalcEntry, tickCalcEntry));
			
			//Add both of them together to define final entry point
			enterLong = entryAreaLong + candleBarOffsetEntry;
			enterShort = entryAreaShort - candleBarOffsetEntry;
							
			
			#region Entry Prints
			
			if (SystemPrint)
			{
				if (EntryPrints)
				{
					Print(""entryAreaLong "" + entryAreaLong + "" "" + Time[1]);
					Print(""entryAreaShort "" + entryAreaShort + "" "" + Time[1]);
					
					Print(""percentageCalcEntry Range "" + percentageCalcEntry + "" "" + Time[1]);
					Print(""priceCalcEntry Range  "" + priceCalcEntry + "" "" + Time[1]);
					Print(""tickCalcEntry Range  "" + tickCalcEntry + "" "" + Time[1]);
					
					Print(""candleBarOffsetEntry Range "" + candleBarOffsetEntry + "" "" + Time[1]);
					
					Print(""enterLong  "" + enterLong + "" "" + Time[1]);
					Print(""enterShort ""  + enterShort + "" "" + Time[1]);
				}
			}
			#endregion
			
			#endregion
			
					#region Stop Offset
			
			//Define what area you will set a stop (If it is based on the chart)
			stopAreaLong		= MIN(Low, CandleLookBackStop)[1];
			stopAreaShort		= MAX(High, CandleLookBackStop)[1];
			
			//Adds offset to your stop area. Gives user customization.
			percentageCalcStop 		= ((stopAreaShort - stopAreaLong) * PercentageOffsetStop);
			priceCalcStop 			= PriceOffsetStop;
			tickCalcStop			= TickOffsetStop * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetStop = Math.Max(percentageCalcStop, Math.Max(priceCalcStop, tickCalcStop));
			
			//Add both of them together to define final stop point
			stopLong = stopAreaLong - candleBarOffsetStop;
			stopShort = stopAreaShort + candleBarOffsetStop;
			
			#region StopPrints
			
			if (SystemPrint)
			{
				if (StopPrints)
				{
					Print(""percentageCalcStop Range "" + percentageCalcStop + "" "" + Time[1]);
					Print(""priceCalcStop Range "" + priceCalcStop + "" "" + Time[1]);
					Print(""tickCalcStop Range "" + tickCalcStop + "" "" + Time[1]);
				
					Print(""candleBarOffsetStop Range "" + candleBarOffsetStop + "" "" + Time[1]);
					
					Print(""stopLong Range "" + stopLong + "" "" + Time[1]);
					Print(""stopShort Range "" + stopShort + "" "" + Time[1]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Breakeven Offset
			
			//Define what area you will set a breakeven (If it is based on the chart - Different from 'Actual Breakeven')
			breakevenAreaLong		= entryAreaLong;
			breakevenAreaShort		= entryAreaShort;
			
			//Adds offset to your breakeven area. Gives user customization.
			percentageCalcBreakeven 	= ((entryAreaLong - stopAreaLong) * PercentageOffsetBreakeven);
			priceCalcBreakeven 			= PriceOffsetBreakeven;
			tickCalcBreakeven			= TickOffsetBreakeven * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetBreakeven = Math.Max(percentageCalcBreakeven, Math.Max(priceCalcBreakeven, tickCalcBreakeven));
			
			#region BreakevenPrints
			
			if (SystemPrint)
			{
				if (BreakevenPrints)
				{
					Print(""percentageCalcBreakeven Range "" + percentageCalcBreakeven + "" "" + Time[1]);
					Print(""priceCalcBreakeven Range "" + priceCalcBreakeven + "" "" + Time[1]);
					Print(""tickCalcBreakeven Range "" + tickCalcBreakeven + "" "" + Time[1]);
				
					Print(""candleBarOffsetBreakeven Range "" + candleBarOffsetBreakeven + "" "" + Time[1]);
					
					Print(""breakevenLong Range "" + breakevenLong + "" "" + Time[1]);
					Print(""breakevenShort Range "" + breakevenShort + "" "" + Time[1]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Range Values
			
			LongValuesOffset 	= Math.Round(enterLong - stopLong, 4);
			ShortValuesOffset	= Math.Round(stopShort - enterShort, 4);
			
			LongValues 			= Math.Round(entryAreaLong - stopAreaLong, 4);
			ShortValues			= Math.Round(stopAreaShort - entryAreaShort, 4);
			/*
			LongValuesOffset 	= Math.Round(enterLong - stopLong, 2);
			ShortValuesOffset	= Math.Round(stopShort - enterShort, 2);
			
			LongValues 			= Math.Round(entryAreaLong - stopAreaLong, 2);
			ShortValues			= Math.Round(stopAreaShort - entryAreaShort, 2);
			
			///////////////////////////////////////////////////////
			LongValuesOffsetTickMode	= Math.Round(enterLong - (enterLong - candleBarOffsetStop), 2);
			ShortValuesOffsetTickMode	= Math.Round((enterShort + candleBarOffsetStop) - enterShort, 2);
			
			LongValuesTickMode			= Math.Round(entryAreaLong - (entryAreaLong - candleBarOffsetStop), 2);
			ShortValuesTickMode			= Math.Round((entryAreaShort + candleBarOffsetStop) - entryAreaShort, 2);
			
			
			Print(""LongValuesOffsetTickMode "" + LongValuesOffsetTickMode);		
			Print(""ShortValuesOffsetTickMode "" + ShortValuesOffsetTickMode);
			
			Print(""LongValuesTickMode "" + LongValuesTickMode);
			Print(""ShortValuesTickMode "" + ShortValuesTickMode);
		*/	
			#endregion
					
					#region Limit Entry Offset
			
			if (useLimit)
			{
				percentageCalcLimitLong		= LongValuesOffset * PercentageOffsetLimit;
				percentageCalcLimitShort	= ShortValuesOffset * PercentageOffsetLimit;
				priceCalcLimit				= PriceOffsetLimit;
				tickCalcLimit				= TickOffsetLimit * TickSize;
				
				limitOffsetLong				= Math.Max(percentageCalcLimitLong, Math.Max(priceCalcLimit, tickCalcLimit));	
				limitOffsetShort			= Math.Max(percentageCalcLimitShort, Math.Max(priceCalcLimit, tickCalcLimit));
				
				if (AddOffset)
				{
					limitPriceSetLong			= enterLong + limitOffsetLong;
					limitPriceSetShort			= enterShort - limitOffsetShort;
				}
				
				else if (AddOffset == false)
				{
					limitPriceSetLong			= entryAreaLong + limitOffsetLong;
					limitPriceSetShort			= entryAreaShort - limitOffsetShort;
				}
				
				#region Limit Prints
			
			if (SystemPrint)
			{
				if (LimitPrints)
				{
					Print(""percentageCalcLimitLong "" + percentageCalcLimitLong + "" "" + Time[0]);
					Print(""percentageCalcLimitShort "" + percentageCalcLimitShort + "" "" + Time[0]);
					Print(""priceCalcLimit "" + priceCalcLimit + "" "" + Time[0]);
					Print(""tickCalcLimit "" + tickCalcLimit + "" "" + Time[0]);
					
					Print(""limitOffsetLong "" + limitOffsetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
					
					Print(""limitPriceSetLong "" + limitPriceSetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
				}
			}
			#endregion
			}
				#endregion
			
					
					#region Offset Added Logic
			
			if (AddOffset) ///Update Prints
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
						
					#region Position Size Long
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (LongValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeLong = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeLong = (Convert.ToInt32(riskOffset));
						
						if (positionSizeLong < 1)
						{
							positionSizeLong = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionLong = (Convert.ToInt32(positionSizeLong * splitPercent));
						
						if (firstTargetPositionLong < 1)
						{
							firstTargetPositionLong = 1;
						}
				
					secondTargetPositionLong = positionSizeLong - firstTargetPositionLong; 
						
						if(secondTargetPositionLong < 1)
						{
							secondTargetPositionLong = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeLong ""+ positionSizeLong + "" "" + Time[0]);
								Print(""firstTargetPositionLong ""+ firstTargetPositionLong + "" "" + Time[0]);
								Print(""secondTargetPositionLong ""+ secondTargetPositionLong + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
				
					#region Set Stop/Profit Long
				
				if (Low[0] > stopLong)
				{
					setStopLong = stopLong;
					
					setFirstTargetLong = enterLong + (LongValuesOffset * FirstTargetRR);
					setFinalTargetLong = enterLong + (LongValuesOffset * FinalTargetRR);
				}
				
				else if (Low[0] <= stopLong)
				{
					setStopLong = Low[0] - candleBarOffsetStop;
					
					setFirstTargetLong = enterLong + ((enterLong - setStopLong) * FirstTargetRR);
					setFinalTargetLong = enterLong + ((enterLong - setStopLong) * FinalTargetRR);
				}
				
	
				#region Profit Target Long Prints
				
				if (SystemPrint)
				{
					if (ProfitTatgetPrints)
					{
						Print(""setStopLong ""+ setStopLong + "" "" + Time[0]);
						Print(""setFirstTargetLong ""+ setFirstTargetLong + "" "" + Time[0]);
						Print(""setFinalTargetLong ""+ setFinalTargetLong + "" "" + Time[0]);		
					}
				}
				
				#endregion
				
				#endregion
				
					#region Draw Lines / Text Long Offset
		
						#region RR mode
						
					if (rrMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(stopLong, 4) + (""(""+CandleLookBackStop+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + LongValuesOffset
							+ ""\nRange(Ticks): "" + LongValuesOffset / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
						
						#endregion 
					
						#region Tick Mode
					
					if (tickMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", enterLong - candleBarOffsetStop, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(enterLong - candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + candleBarOffsetStop
							+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
				
					#endregion
					
					#endregion
										
				}
				
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (ShortValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeShort = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeShort = (Convert.ToInt32(riskOffset));
						
						if (positionSizeShort < 1)
						{
							positionSizeShort = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionShort = (Convert.ToInt32(positionSizeShort * splitPercent));
						
						if (firstTargetPositionShort < 1)
						{
							firstTargetPositionShort = 1;
						}
				
					secondTargetPositionShort = positionSizeShort - firstTargetPositionShort; 
						
						if(secondTargetPositionShort < 1)
						{
							secondTargetPositionShort = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeShort ""+ positionSizeShort + "" "" + Time[0]);
								Print(""firstTargetPositionShort ""+ firstTargetPositionShort + "" "" + Time[0]);
								Print(""secondTargetPositionShort ""+ secondTargetPositionShort + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
				
					#region Set Stop/Profit Short
				
				if (High[0] < stopShort)
				{
					setStopShort = stopShort;
				
					setFirstTargetShort = enterShort - (ShortValuesOffset * FirstTargetRR);
					setFinalTargetShort = enterShort - (ShortValuesOffset * FinalTargetRR);
				}
				
				else if (High[0] >= stopShort)
				{
					setStopShort = High[0] + candleBarOffsetStop;
					
					setFirstTargetShort = enterShort - ((setStopShort - enterShort) * FirstTargetRR);
					setFinalTargetShort = enterShort - ((setStopShort - enterShort) * FinalTargetRR);
				}
				
				
				#region Profit Target Prints
						
						if (SystemPrint)
						{
							if (ProfitTatgetPrints)
							{
								Print(""setStopShort ""+ setStopLong + "" "" + Time[0]);
								Print(""setFirstTargetShort ""+ setFirstTargetShort + "" "" + Time[0]);
								Print(""setFinalTargetShort ""+ setFinalTargetShort + "" "" + Time[0]);
							}
						}
						
						#endregion
				
				#endregion
					
					#region Draw Lines / Text Short Offset
				
						#region RR Mode
						
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopShort, 4) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValuesOffset
						+ ""\nRange(Ticks): "" + ShortValuesOffset / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
						#region Tick Mode
						
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", enterShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(enterShort + candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
				#endregion
				
				}
			}
			
			#endregion	
			
					#region W/O Offset 
			/* Removed for simplicity of use
			if (AddOffset == false)
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
				
					#region Position Size Long
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (LongValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					
				
					#endregion
					
					#region Set Stop/Profit Long		
					
				if (Low[0] > stopAreaLong)
				{
					setStopLong = stopAreaLong;
				}
				
				else if (Low[0] <= stopAreaLong)
				{
					setStopLong = Low[0];
				}
				
				setFirstTarget = entryAreaLong + (LongValues * FirstTargetRR);
				setFinalTarget = entryAreaLong + (LongValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Long W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaLong, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaLong, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + LongValues	
						+ ""\nRange(Ticks): "" + LongValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaLong - candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(entryAreaLong - candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
					
					#endregion
				
				}
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (ShortValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
					
					#region Set Stop/Profit Short		
					
				if (High[0] < stopAreaShort)
				{
					setStopShort = stopAreaShort;
				}
				
				else if (High[0] >= stopAreaShort)
				{
					setStopShort = High[0];
				}
				
				setFirstTarget = entryAreaShort - (ShortValues * FirstTargetRR);
				setFinalTarget = entryAreaShort - (ShortValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Short W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaShort, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValues	
						+ ""\nRange(Ticks): "" + ShortValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round( entryAreaShort + candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#endregion
				
				}
				
			}
			*/
			#endregion //Removed for now
			
				}
			
				//ChartControl.Dispatcher.InvokeAsync((Action)(() =>
					//{
						//NinjaTrader.Gui.Tools.QuantityUpDown quantitySelector = (Window.GetWindow(ChartControl.Parent).FindFirst(""ChartTraderControlQuantitySelector"") as NinjaTrader.Gui.Tools.QuantityUpDown);

						//quantitySelector.Value = positionSize;
					//}));
				
				#region Arm Market Order (Unlocked Lines) //Ensures Stop and Position size are calculated before triggering
				
				if ((customLongClicked || customShortClicked) && armMarket == true && enterClosePrice == false)
					{
						armMarketCount ++;
						Print(armMarketCount);
					}
					
				if ((customLongClicked || customShortClicked)  && enterClosePrice == false && armMarketCount > 1) //&& armMarket == true)	
					{
						activateMarket = true;
						Print(""activateMarket Calcs "" + activateMarket);
						Print(armMarketCount);
					}
					
				if ((customLongClicked || customShortClicked) && armMarket == true && enterClosePrice == false && armMarketCount < 1) 
				{
					armMarketCount = 1;
				}

				#endregion
						
				countOnce = false;
			}
			
				#region Arm Market Order (Locked Lines) //Stop and Position Size are already calculated
			
			if (IsFirstTickOfBar)
			{	
				if (unlockButtonClicked && (customLongClicked || customShortClicked) && enterClosePrice == false)//armMarket == true && )
				{
					activateMarket = true;
					Print(""activateMarket Calcs Locked "" + activateMarket);
				}
			}
			
			#endregion
			
			if (unlockButtonClicked == false)
			{
				if (IsFirstTickOfBar)
				{
					countOnce = true;
				}
			}
			
			if (IsFirstTickOfBar || (trailButtonClicked && IsFirstTickOfBar))
			{
				#region Trail Stop new bar Update
				
				//If the strategy is in a position. This allows the trail stop to keep making calculations and continue moving every new candle
				if (Position.MarketPosition != MarketPosition.Flat)
				{
					myFreeCandleTrail = true;
					
					if (SystemPrint)
					{
						if (TrailPrints)
						{
							Print(""myFree Trail First Tick "" + myFreeCandleTrail + "" "" + Time[1]);
						}
					}
				}

				#endregion
			}
			
			if ((IsFirstTickOfBar) && (isFib == true))
			{
				fibCount ++;
			}
			
			
			/// Entries
		
			#region H/L Long
			
			if (
				(longButtonHLClicked == true)
					&& (customLongClicked == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] >= enterLong)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterLongLimit(positionSizeLong, limitPriceSetLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLongLimit(firstTargetPositionLong, limitPriceSetLong, ""MyEntryLong"");
						
						EnterLongLimit(secondTargetPositionLong, limitPriceSetLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade			 	= true;
				longButtonHLClicked 	= false;
			}
			
			#endregion
			
			#region H/L Short
			
			if (
				(shortButtonHLClicked == true)
					&& (customLongClicked == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] <= enterShort)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterShortLimit(positionSizeShort, limitPriceSetShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShortLimit(firstTargetPositionShort, limitPriceSetShort, ""MyEntryShort"");
						
						EnterShortLimit(secondTargetPositionShort, limitPriceSetShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade 			= true;
				shortButtonHLClicked	= false;
			}
			
			#endregion
			
			
			#region Market Long
			
			if (
				(longButtonMarketClicked == true)
					&& (Position.MarketPosition == MarketPosition.Flat)
				)
			{
				#region Market Long Entry
				
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
					
				#endregion
					
				isFib 					= true;	
				myFreeTrade 			= true;
				longButtonMarketClicked = false;
					
			}
			
			#endregion
			
			#region Market Short
			
			if (
				(shortButtonMarketClicked == true)
					&& (Position.MarketPosition == MarketPosition.Flat)
				)
			{
				#region Market Short Entry
				
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
					
				#endregion
				
				isFib 						= true;	
				myFreeTrade 				= true;
				shortButtonMarketClicked	= false;		
			}
			
			#endregion
			
			
			#region Close Long
			
			if (
				(customLongClicked == true)
					&& (armMarket == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] >= enterLong)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterLongLimit(positionSizeLong, limitPriceSetLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLongLimit(firstTargetPositionLong, limitPriceSetLong, ""MyEntryLong"");
						
						EnterLongLimit(secondTargetPositionLong, limitPriceSetLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade 			= true;
				customLongClicked 		= false;
			}
			
			#endregion
			
			#region Close Short
			
			if (
				(customShortClicked == true)
					&& (armMarket == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] <= enterShort)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterShortLimit(positionSizeShort, limitPriceSetShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShortLimit(firstTargetPositionShort, limitPriceSetShort, ""MyEntryShort"");
						
						EnterShortLimit(secondTargetPositionShort, limitPriceSetShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade 			= true;
				customShortClicked 		= false;
			}
			
			#endregion
			
			
			if (activateMarket == true)
			{
			
			#region Arm Market Long
			
			if (
				(customLongClicked == true)
					&& (armMarket)
				)
			{
				#region Arm Market Long Entry
				
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
					
				#endregion
				
				isFib 					= true;	
				myFreeTrade 			= true;
				customLongClicked 		= false;
						
			}
			
			#endregion
			
			#region Arm Market Short
			
			if (
				(customShortClicked == true)
					&& (armMarket)
				)
			{
				#region Arm Market Short Entry
				
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
				
				#endregion
					
				isFib 					= true;	
				myFreeTrade 			= true;
				customShortClicked 		= false;
	
			}
			
			#endregion
			
			}
			
			
			///Set Stop/Profit/ Management Targets
			if (rrMode)
			{
				//Long
				#region Filled Long Position	
			
				#region Stop/Profits			
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong"");
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, setFirstTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterLong + (enterLong - stopLong) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterLong + (enterLong - stopLong) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterLong + (enterLong - stopLong) * candleTrailTarget;
				//candleTrailStopSet = Low[1]; We set the stop later for new candle.
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Long Position
			
				#region Stop/Profits
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity < positionSizeLong && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong""); 
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, setFirstTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterLong + (enterLong - stopLong) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterLong + (enterLong - stopLong) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterLong + (enterLong - stopLong) * candleTrailTarget;
				//candleTrailStopSet = Low[1]; We set the stop later for new candle.
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakevenAreaTrigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakevenAreaStopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBEArea "" + myFreeBEArea + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			

				//Short 
				#region Filled Short Position	
			
				#region Stop/Profits
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort"");
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort2"", ""MyEntryShort2"");
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, setFirstTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort2"", ""MyEntryShort2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterShort - (stopShort - enterShort) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterShort - (stopShort - enterShort) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterShort - (stopShort - enterShort) * candleTrailTarget;
				
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
				#region Stop/Profits
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity < positionSizeShort && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort""); 
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{
					//positionSizeShort = myPosition;
					
					if(stopLoss)
					{		
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort2"", ""MyEntryShort2"");
						
						Print(""after Fill: "" + Position.Quantity);
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, setFirstTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort2"", ""MyEntryShort2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterShort - (stopShort - enterShort) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterShort - (stopShort - enterShort) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterShort - (stopShort - enterShort) * candleTrailTarget;
				//candleTrailStopSet = Low[1]; We set the stop later for new candle.
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			
			}
			
			if (tickMode)
			{
				//Long
				#region Filled Long Position	
			
				#region Stop/Profits			
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong"");
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FirstTargetRR * TickSize),  ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice + (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice + (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice + (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Long Position
			
				#region Stop/Profit
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity < positionSizeLong && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong""); 
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FirstTargetRR * TickSize), ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice + (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice + (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice + (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakevenAreaTrigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakevenAreaStopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBEArea "" + myFreeBEArea + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			

				//Short 
				#region Filled Short Position	
			
				#region Stop/Profits
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{				
			
					if(stopLoss)
					{
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort2"", ""MyEntryShort2"");
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FirstTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort2"", ""MyEntryShort2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice - (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice - (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice - (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
				#region Stop/Profits
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity < positionSizeShort && IsFirstTickOfBar)
			{
				
				
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{

					
					if(stopLoss)
					{
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort2"", ""MyEntryShort2"");
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FirstTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort2"", ""MyEntryShort2"");
					}	
					
					
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice - (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice - (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice - (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			
			}
			
			
			///Management Logic - Breakeven/Trail Stop
		
			#region Breakeven Area
			
				#region Long
			
			if (
				(Position.MarketPosition == MarketPosition.Long)
					&& ((Close[0] >= breakevenAreaTrigger) || (breakevenButtonClicked))
						&& (myFreeBEArea == true)
				)
			{
				#region Filled Long Position	
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeBEArea == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
				
					if (dualTarget)
					{
						ExitLongStopMarket(0, true, firstTargetPositionLong, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, secondTargetPositionLong, breakevenAreaStopSet, ""MyStopLong2"", ""MyEntryLong2"");	
					}
				
				breakevenButtonClicked = false;
				myFreeBEArea = false;
			}
				
			#endregion
				
				#region Partial Fill Long Position
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeBEArea == true && Position.Quantity < positionSizeLong)// && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
					ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong2"", ""MyEntryLong2"");
				}
			
				breakevenButtonClicked = false;
				myFreeBEArea = false;;
			}
			
			#endregion
			}
			
				#endregion
			
				#region Short
			
			if (
				(Position.MarketPosition == MarketPosition.Short)
					&& ((Close[0] <= breakevenAreaTrigger) || (breakevenButtonClicked))
						&& (myFreeBEArea == true)
				)
			{
				#region Filled Short Position	
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeBEArea == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
					}
				
				if (dualTarget)
				{
						ExitShortStopMarket(0, true, firstTargetPositionShort, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, secondTargetPositionShort, breakevenAreaStopSet, ""MyStopShort2"", ""MyEntryShort2"");	
				}
				
				breakevenButtonClicked = false;
				myFreeBEArea = false;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeBEArea == true && Position.Quantity < positionSizeShort)
			{
				if (dualTarget == false)
				{
					ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
				}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
					ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort2"", ""MyEntryShort2"");
				}
			
				breakevenButtonClicked = false;
				myFreeBEArea = false;;
			}
			
			#endregion
			}
			
				#endregion
			
			#endregion
			
			#region Breakeven Actual
			
				#region Long
			
			if (
				(Position.MarketPosition == MarketPosition.Long)
					&& ((Close[0] >= breakevenActualTrigger) || (breakevenButtonClicked))
						&& (myFreeBEActual == true)
				)
			{
				#region Filled Long Position	
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeBEActual == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
				
				if (dualTarget)
				{
						ExitLongStopMarket(0, true, firstTargetPositionLong, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, secondTargetPositionLong, breakevenActualStopSet, ""MyStopLong2"", ""MyEntryLong2"");	
				}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
				
			#endregion
				
				#region Partial Fill Long Position
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeBEActual == true && Position.Quantity < positionSizeLong)// && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
					ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong2"", ""MyEntryLong2"");
				}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
			
			#endregion
			}
			
				#endregion
			
				#region Short
			
			if (
				(Position.MarketPosition == MarketPosition.Short)
					&& ((Close[0] <= breakevenActualTrigger) || (breakevenButtonClicked))
						&& (myFreeBEActual == true) 
				)
			{
				#region Filled Short Position	
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeBEActual == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
					}
				
					if (dualTarget)
					{
						ExitShortStopMarket(0, true, firstTargetPositionShort, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, secondTargetPositionShort, breakevenActualStopSet, ""MyStopShort2"", ""MyEntryShort2"");	
					}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeBEActual == true && Position.Quantity < positionSizeShort) //&& IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
					}
				
				if (dualTarget == true && myFillCheck == true)
				{
					ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
					ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort2"", ""MyEntryShort2"");
					
					Print(""At Breakeven: "" + Position.Quantity);
				}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
			
			#endregion
			}
			
				#endregion
				
			#endregion
			
			#region Custom Stop Move
			///Will add this at a later date
			#endregion
			
			#region Trail Stop
			
			if (
				(myFreeCandleTrail == true && activeTrail)
					
				&& ((Position.MarketPosition == MarketPosition.Long && (Close[0] >= candleTrailTrigger || trailButtonClicked))
					
					|| (Position.MarketPosition == MarketPosition.Short && (Close[0] <= candleTrailTrigger || trailButtonClicked)))
				)
			
				{
				
					#region Trail Offset
			
					//Define the area where stop will be set			
					trailAreaLong		= Low[1];
					trailAreaShort		= High[1];
					
					//Adds offset to your trail stop area. Gives user customization.		
					percentageCalcTrail 		= ((High[2] - Low[2]) * PercentageOffsetTrail);
					priceCalcTrail 			= PriceOffsetTrail;
					tickCalcTrail			= TickOffsetTrail * TickSize;
					
					//Picks the highest of the 3 numbers			
					candleBarOffsetTrail = Math.Max(percentageCalcTrail, Math.Max(priceCalcTrail, tickCalcTrail));
					
					//Add both of them together to define final entry point			
					candleTrailStopSetLong = trailAreaLong - candleBarOffsetTrail;
					candleTrailStopSetShort = trailAreaShort + candleBarOffsetTrail;
					
					#region Prints
					
					if (SystemPrint)
					{
						if (TrailPrints)
						{
							Print(""Current Trail Price Offset is :  "" + priceCalcTrail + "" "" + Time[1]);
							Print(""Current Trail Percent Offset is :  "" + percentageCalcTrail + "" "" + Time[1]);
							Print(""Current Trail Tick Offset is :  "" + tickCalcTrail + "" "" + Time[1]);
							
							Print(""Current Trail Highest Offset Selected is :  "" + candleBarOffsetTrail + "" "" + Time[1]);
							
							Print(""candleTrailStopSetLong is :  "" + candleTrailStopSetLong + "" "" + Time[1]);	
							Print(""candleTrailStopSetShort is :  "" + candleTrailStopSetShort + "" "" + Time[1]);	
						
							Print(""myFree Trail Offset "" + myFreeCandleTrail + "" "" + Time[1]);
						}
						
					}
					#endregion
			
			
					#endregion 	
					
					trailTriggeredCandle = true; //Allows condition to move stop freely. 
					myFreeCandleTrail = false; //Sets bool back to false. Needs to wait another candle for calculations to happen again	
				}	
		
				#region Long Trail
				
				#region Filled Long Position	
			
				if (Position.MarketPosition == MarketPosition.Long && trailTriggeredCandle == true && Position.Quantity == positionSizeLong && (Low[1] > Low[2]) && Open[0] > Low[1])
				{
					Print(""Open[0] "" + Open[0]);
					Print(""High[1]"" + High[1]);
					if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong , ""MyStopLong"", ""MyEntryLong"");
					}
				
					if (dualTarget)
					{
						ExitLongStopMarket(0, true, firstTargetPositionLong, candleTrailStopSetLong, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, secondTargetPositionLong, candleTrailStopSetLong, ""MyStopLong2"", ""MyEntryLong2"");	
					}
				
				//trailButtonClicked 		= false;
				trailTriggeredCandle 	= false;
			}
				
			#endregion
				
				#region Partial Fill Long Position
				
			if (Position.MarketPosition == MarketPosition.Long && trailTriggeredCandle == true && Position.Quantity < positionSizeLong && (Low[1] > Low[2]) && Open[0] > Low[1])
			{
				if (dualTarget == false)
				{
					ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong, ""MyStopLong"", ""MyEntryLong"");
				}
				
				if (dualTarget == true && myFillCheck == true)
				{
					ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong, ""MyStopLong"", ""MyEntryLong"");
					ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong, ""MyStopLong2"", ""MyEntryLong2"");
				}
				
				trailTriggeredCandle 	= false;
			}
			
			#endregion
			
				#endregion
			
				#region Short Trail
				
				#region Filled Short Position	
			
				if (Position.MarketPosition == MarketPosition.Short && trailTriggeredCandle == true && Position.Quantity == positionSizeShort && (High[1] < High[2]) && Open[0] < High[1])
				{
					if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort , ""MyStopShort"", ""MyEntryShort"");
					}
				
				if (dualTarget)
				{
						ExitShortStopMarket(0, true, firstTargetPositionShort, candleTrailStopSetShort, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, secondTargetPositionShort, candleTrailStopSetShort, ""MyStopShort2"", ""MyEntryShort2"");	
				}
				
				//trailButtonClicked 		= false;
				trailTriggeredCandle 	= false;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
			if (Position.MarketPosition == MarketPosition.Short && trailTriggeredCandle == true && Position.Quantity < positionSizeShort && (High[1] < High[2]) && Open[0] < High[1])
			{
				if (dualTarget == false)
				{
					ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort, ""MyStopShort"", ""MyEntryShort"");
				}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort, ""MyStopShort"", ""MyEntryShort"");
					ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort, ""MyStopShort2"", ""MyEntryShort2"");
				}
				
				trailTriggeredCandle 	= false;

			}
			
			#endregion
			
				#endregion
				
			#endregion
			
		}
		
	
		protected override void OnPositionUpdate(Position position, double averagePrice, int quantity, MarketPosition marketPosition)
		{
			//myPosition = Position.Quantity;
			
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				countOnce 		= true;
				activateMarket 	= false;
				myFillCheck 	= false;
			}
			
			if (Position.MarketPosition != MarketPosition.Flat)
			{
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
			}
			
			#region Trail Stop Cancel
			
			if (Position.MarketPosition == MarketPosition.Flat) 
			{
				myFreeCandleTrail = false;
				
				if (SystemPrint)
				{
					if (TrailPrints)
					{
						Print(""myFree Trail ON Position "" + myFreeCandleTrail + "" "" + Time[1]);
					}
				}
				
			}
			
			#endregion
			
			#region Fib Levels Updates
			
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				fibCount 	= 1;
				isFib 		= false;;
				
				RemoveDrawObject(""FibLong"");
				RemoveDrawObject(""FibShort"");
			}
			
			if (fibButtonClicked && Position.MarketPosition == MarketPosition.Long)
			{
				if (rrMode)
				{
					Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, setStopLong, fibCount, enterLong);
				}
				
				if (tickMode)
				{
					Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, Position.AveragePrice - candleBarOffsetStop, fibCount, Position.AveragePrice);
				}
				
			}
			
			if (fibButtonClicked && Position.MarketPosition == MarketPosition.Short)
			{
				if (rrMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, setStopShort, fibCount, enterShort);
				}
				
				if (tickMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, Position.AveragePrice + candleBarOffsetStop, fibCount, Position.AveragePrice);
				}
			}
			
			#endregion
			
			
		}
		
			
		protected override void OnExecutionUpdate(Execution execution, string executionId, double price, int quantity, MarketPosition marketPosition, string orderId, DateTime time)
		{
			#region Button Event Updates
			
			//Buy High
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            longButtonHL.Content = ""BUY HIGH"";
				longButtonHLClicked = false;
	        }));
					
				}
			
			//Sell Low
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            shortButtonHL.Content = ""SELL LOW"";
				shortButtonHLClicked = false;
	        }));
					
				}
				
			//Custom Long	
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            customLong.Content = ""Custom Long"";
				customLong.Background	= Brushes.MediumSeaGreen; 
				armMarketCount = 0;
				customLongClicked = false;
	        }));
					
				}
				
			//Custom Short	
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            customShort.Content = ""Custom Short"";
				customShort.Background	= Brushes.IndianRed; 
				armMarketCount = 0; 
				customShortClicked = false;
	        }));
		
				}	
				
				
			if (Position.MarketPosition == MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            trailButton.Content = ""Trail Stop"";
				trailButton.Background	= Brushes.LightGray; 
				trailButtonClicked = false;
	        }));
		
				}		
				
				#endregion
		}
			
		protected void RemoveWPFControls()
		{
			#region Remove WPF
			
			if (!panelActive)
				return;
			
			if (chartTraderButtonsGrid != null || lowerButtonsGrid != null)
			{
				chartTraderGrid.Children.Remove(lowerButtonsGrid);
				chartTraderGrid.RowDefinitions.Remove(addedRow);
			}

			panelActive = false;
			
			#endregion
		}
		
		private bool TabSelected()
		{
			#region TabSelcected 
			
			bool tabSelected = false;

			// loop through each tab and see if the tab this indicator is added to is the selected item
			foreach (System.Windows.Controls.TabItem tab in chartWindow.MainTabControl.Items)
				if ((tab.Content as Gui.Chart.ChartTab).ChartControl == ChartControl && tab == chartWindow.MainTabControl.SelectedItem)
					tabSelected = true;

			return tabSelected;
				
			#endregion
		}
		
		private void TabChangedHandler(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
		{
			#region TabHandler
			
			if (e.AddedItems.Count <= 0)
				return;

			tabItem = e.AddedItems[0] as System.Windows.Controls.TabItem;
			if (tabItem == null)
				return;

			chartTab = tabItem.Content as Gui.Chart.ChartTab;
			if (chartTab == null)
				return;

			if (TabSelected())
				InsertWPFControls();
			else
				RemoveWPFControls();
			
			#endregion
		}
		
		
		#region Button Click Events
		
		private void OnButtonClick(object sender, RoutedEventArgs rea)
		{
			System.Windows.Controls.Button button = sender as System.Windows.Controls.Button;
			
			#region TradeSaber Socials
			
			if (showSocials)
			{
				if (button == youtubeButton && button.Name == ""YoutubeButton"" && button.Content == ""Youtube"")
				{
					System.Diagnostics.Process.Start(youtube);
					return;
				}
				
				if (button == discordButton && button.Name == ""DiscordButton"" && button.Content == ""Discord"")
				{	
					System.Diagnostics.Process.Start(discord);
					return;
				}
				
				if (button == tradeSaberButton && button.Name == ""TradeSaberButton"" && button.Content == ""TradeSaber"")
				{	
					System.Diagnostics.Process.Start(tradeSaber);
					return;
				}
			}
			
			#endregion
		}
		
		#endregion
		
		
		#region Properties
			
		#region 01. Position Size
		
		[Display(Name = ""Order Management Method"", GroupName = ""01. Position Size"", Description="""", Order = 0)]
		public OrderManagement	ManagementType
		{
			get { return managementType; }
			set { managementType = value; }
		}	
		
		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Auto Position Size"", Order = 1, GroupName = ""01. Position Size"")]
		public bool AutoPositionSize
		{
		    get
		   {
		      return autoPositionSize;
		   }
		   set
		   {
		      if (value == true)
		      {
		         CustomPositionSize = false;
		      }
		      autoPositionSize = value;
		    }
		}

		[NinjaScriptProperty]
		[Range(1, double.MaxValue)]
		[Display(Name=""Risk Size($)"", Order=2, GroupName=""01. Position Size"")]
		public double MaxLossPerTrade
		{ get; set; }
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Custom Position Size"", Order = 3, GroupName = ""01. Position Size"")]
		public bool CustomPositionSize
		{
		   get
		   {
		      return customPositionSize;
		   }
		   set
		   {
		      if (value == true)
		      {
		         AutoPositionSize = false;
		      }
		      customPositionSize = value;
		   }
		}
		
		[Range(1, int.MaxValue)]
		[NinjaScriptProperty]
		[Display(Name=""Custom Position Amount"", Order=4, GroupName=""01. Position Size"")]
		public int CustomPositionAmount
		{ get; set; }
		
		
		[NinjaScriptProperty]
		[Display(Name=""Use Candle Range"", Order=5, GroupName=""01. Position Size"")]
		public bool CandleRange
		{ get; set; }
		
		#endregion
	
		#region 02. Entry / Limit
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name=""Entry Candle Used"", Order=0, GroupName=""02. Entry"")]
		public int CandleLookBackEntry
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Entry"", Order=1, GroupName=""02. Entry"")]
		public double PriceOffsetEntry
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Entry"", Order=2, GroupName=""02. Entry"")]
		public double PercentageOffsetEntry
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Entry"", Order=3, GroupName=""02. Entry"")]
		public int TickOffsetEntry
		{ get; set; }

		
		//Limit Orders
		[NinjaScriptProperty]
		[Display(Name=""Limit Order Entry"", Order=4, GroupName=""02A. Limit Order"")]
		public bool useLimit
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Limit"", Order=5, GroupName=""02A. Limit Order"")]
		public double PriceOffsetLimit
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Limit"", Order=6, GroupName=""02A. Limit Order"")]
		public double PercentageOffsetLimit
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Limit"", Order=7, GroupName=""02A. Limit Order"")]
		public int TickOffsetLimit
		{ get; set; }
		
		#endregion
	
		#region 03. Stop
		
		[NinjaScriptProperty]
		[Display(Name=""Set Stop Loss"", Order=0, GroupName=""03. Stop"")]
		public bool stopLoss
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name=""Stop Candle Used"", Order=1, GroupName=""03. Stop"")]
		public int CandleLookBackStop
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Stop"", Order=2, GroupName=""03. Stop"")]
		public double PriceOffsetStop
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Stop"", Order=3, GroupName=""03. Stop"")]
		public double PercentageOffsetStop
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Stop"", Order=4, GroupName=""03. Stop"")]
		public int TickOffsetStop
		{ get; set; }

		#endregion
	
		#region 04. Profit Targets
		
		[NinjaScriptProperty]
		[Display(Name=""Set Profit Target"", Order=0, GroupName=""04. Target"")]
		public bool profitTarget
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Final Target"", Order=2, GroupName=""04. Target"")]
		public double FinalTargetRR
		{ get; set; }
		
		#endregion
		
		#region 04A. Dual Target
		
		[NinjaScriptProperty]
		[Display(Name=""DualTarget"", Order=1, GroupName=""04A. Dual Target"")]
		public bool dualTarget
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Dual Entry Split Percent"", Order=2, GroupName=""04A. Dual Target"")]
		public double splitPercent
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""First Target"", Order=3, GroupName=""04A. Dual Target"")]
		public double FirstTargetRR
		{ get; set; }
		
		#endregion
		
		#region 05. Custom Button 
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""'Close' Price"", Order = 2, GroupName = ""05. Custom Button"")]
		public bool EnterClosePrice
		{
		    get
		   {
		      return enterClosePrice;
		   }
		   set
		   {
		      if (value == true)
		      {
		         ArmMarket = false;
		      }
		      enterClosePrice = value;
		    }
		}

		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Arm Market (New Candle)"", Order = 3, GroupName = ""05. Custom Button"")]
		public bool ArmMarket
		{
		   get
		   {
		      return armMarket;
		   }
		   set
		   {
		      if (value == true)
		      {
		         EnterClosePrice = false;
		      }
		      armMarket = value;
		   }
		}
		
		///
		
		/*
		[NinjaScriptProperty]
		[Display(Name=""Add Offset"", Order=3, GroupName=""01. Risk Parameters"")]
		public bool AddOffset
		{ get; set; }
		*/
		#endregion
		
		#region 06. Breakeven Offset
		
		//Breakeven Offset
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Breakeven"", Order=1, GroupName=""06. Breakeven Offset"")]
		public double PriceOffsetBreakeven
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Breakeven"", Order=2, GroupName=""06. Breakeven Offset"")]
		public double PercentageOffsetBreakeven
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Breakeven"", Order=3, GroupName=""06. Breakeven Offset"")]
		public int TickOffsetBreakeven
		{ get; set; }
		
		#endregion
		
		#region 06A. Breakeven Area
		
		//Breakeven Area
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Area) Button"", Order=4, GroupName=""06A. Breakeven Area"")]
		public bool BreakevenAreaSetButton
		{
		    get
		   {
		      return breakevenAreaSetButton;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenActualSetButton = false;
		      }
		      breakevenAreaSetButton = value;
		    }
		}
		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Area) Set Auto"", Order=5, GroupName=""06A. Breakeven Area"")]
		public bool BreakevenAreaSetAuto
		{
		    get
		   {
		      return breakevenAreaSetAuto;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenActualSetAuto = false;
		      }
		      breakevenAreaSetAuto = value;
		    }
		}
		
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Area) Target"", Order=6, GroupName=""06A. Breakeven Area"")]
		public double breakevenAreaTarget	
		{ get; set; }
		
		#endregion
		
		#region 06B. Breakeven Actual
		
		//Breakeven Actual
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name="" Breakeven (Actual) Button"", Order=7, GroupName=""06B. Breakeven Actual"")]	
		public bool BreakevenActualSetButton
		{
		   get
		   {
		      return  breakevenActualSetButton;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenAreaSetButton = false;
		      }
		       breakevenActualSetButton = value;
		   }
		}
		
		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Actual) Set Auto"", Order=8, GroupName=""06B. Breakeven Actual"")]	
		public bool BreakevenActualSetAuto
		{
		   get
		   {
		      return breakevenActualSetAuto;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenAreaSetAuto = false;
		      }
		      breakevenActualSetAuto = value;
		   }
		}
		
		
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Actual) Target"", Order=9, GroupName=""06B. Breakeven Actual"")]
		public double breakevenActualTarget	
		{ get; set; }
		
		#endregion
		
		#region 07. Trail Stop Offset

		//Trail Offset
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Trail"", Order=1, GroupName=""07. Trail Stop Offset"")]
		public double PriceOffsetTrail
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Trail"", Order=2, GroupName=""07. Trail Stop Offset"")]
		public double PercentageOffsetTrail
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Trail"", Order=3, GroupName=""07. Trail Stop Offset"")]
		public int TickOffsetTrail
		{ get; set; }
		
		#endregion
		
		#region 07A. Candle Trail
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Candle Trail (Button)"", Order = 1, GroupName = ""07A. Trail Stop"")]
		public bool candleTrailSetButton
		{ get; set; }
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Candle Trail (Auto)"", Order = 2, GroupName = ""07A. Trail Stop"")]
		public bool candleTrailSetAuto
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Candle Trail Target"", Order=3, GroupName=""07A. Trail Stop"")]
		public double candleTrailTarget	
		{ get; set; }
		
		#endregion

		#region 9 Display Text Box
		
		[NinjaScriptProperty]
		[Display(Name=""Display Text"", Order=1, GroupName=""9 Display Text Box"")]
		public bool DisplayText
		{ get; set; }
		
		#endregion
		
		#region For Later Use
		/*
		//custom Move Stop
		[NinjaScriptProperty]
		[Display(Name=""customMoveStopSet"", Order=15, GroupName=""10. Management"")]
		public bool customMoveStopSet
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""customeMoveStopTarget"", Order=16, GroupName=""10. Management"")]
		public double customeMoveStopTarget	
		{ get; set; }
		
		//Custom Trail
		[NinjaScriptProperty]
		[Display(Name=""customTrailSet"", Order=7, GroupName=""10. Trail Stop2"")]
		public bool customTrailSet
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""customTrailTarget"", Order=8, GroupName=""10. Trail Stop2"")]
		public double customTrailTarget	
		{ get; set; }
		*/
		#endregion
		
		#region 29. TradeSaber Socials
		
		[NinjaScriptProperty]
		[Display(Name = ""Show Social Media Buttons"", Description = """", Order = 0, GroupName = ""29. TradeSaber Socials"")]
		public bool ShowSocials 
		{
		 	get{return showSocials;} 
			set{showSocials = (value);} 
		}
		
		[NinjaScriptProperty]
		[Display(Name=""Explanation Video"", Order=1, GroupName=""29. TradeSaber Socials"")]
		public  string Youtube
		{
		 	get{return youtube;} 
			set{youtube = (value);} 
		}
		
		[NinjaScriptProperty]
		[Display(Name=""Discord Link"", Order=2, GroupName=""29. TradeSaber Socials"")]
		public  string Discord
		{
		 	get{return discord;} 
			set{discord = (value);} 
		}
		
		[NinjaScriptProperty]
		[Display(Name=""TradeSaber Link"", Order=3, GroupName=""29. TradeSaber Socials"")]
		public  string TradeSaber
		{
		 	get{return tradeSaber;} 
			set{tradeSaber = (value);} 
		}
		
		[NinjaScriptProperty]
		[ReadOnly(true)]
		[Display(Name = ""Author"", GroupName = ""29. TradeSaber Socials"", Order = 4)]
		public string Author
		{
		 	get{return author;} 
			set{author = (value);} 
		}
		
		[NinjaScriptProperty]
		[ReadOnly(true)]
		[Display(Name = ""Version"", GroupName = ""29. TradeSaber Socials"", Order = 5)]
		public string Version
		{
		 	get{return version;} 
			set{version = (value);} 
		}
		
		#endregion
		
		#region 99. Prints
		
		[NinjaScriptProperty]
		[Display(Name=""SystemPrint"", Order=1, GroupName=""99. Prints"")]
		public bool SystemPrint
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""EntryPrints"", Order=3, GroupName=""99. Prints"")]
		public bool EntryPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""LimitPrints"", Order=4, GroupName=""99. Prints"")]
		public bool LimitPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""StopPrints"", Order=5, GroupName=""99. Prints"")]
		public bool StopPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""PositionSizePrints"", Order=5, GroupName=""99. Prints"")]
		public bool PositionSizePrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""ProfitTatgetPrintss"", Order=6, GroupName=""99. Prints"")]
		public bool ProfitTatgetPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""BreakevenPrints"", Order=7, GroupName=""99. Prints"")]
		public bool BreakevenPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""TrailPrints"", Order=8, GroupName=""99. Prints"")]
		public bool TrailPrints
		{ get; set; }
		//ProfitTatgetPrints
		#endregion
		
		#endregion
		
	}
}

"
aHZ2kEC9,Chat,horozov86,Python,Friday 20th of June 2025 06:10:19 AM CDT,"1. Модел за съобщения
python
Copy
Edit
# models.py
from django.db import models
from django.contrib.auth.models import User

class ChatMessage(models.Model):
    sender = models.ForeignKey(User, on_delete=models.CASCADE)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
🧩 2. URLs
python
Copy
Edit
# urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('chat/send/', views.send_message, name='send_message'),
    path('chat/messages/', views.get_messages, name='get_messages'),
]
🧠 3. Views (обработващи AJAX)
python
Copy
Edit
# views.py
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from .models import ChatMessage

@login_required
def send_message(request):
    if request.method == 'POST':
        msg = request.POST.get('message')
        if msg:
            ChatMessage.objects.create(sender=request.user, message=msg)
        return JsonResponse({'status': 'ok'})

@login_required
def get_messages(request):
    messages = ChatMessage.objects.all().order_by('-created_at')[:20]
    data = [
        {'sender': m.sender.username, 'message': m.message, 'time': m.created_at.strftime('%H:%M:%S')}
        for m in reversed(messages)
    ]
    return JsonResponse(data, safe=False)
💬 4. HTML + JavaScript (в base.html или footer.html)
html
Copy
Edit
<div id=""simple-chat"" style=""position:fixed;bottom:0;right:20px;width:300px;background:#eee;padding:10px;border:1px solid #ccc;"">
  <div id=""chat-messages"" style=""height:200px;overflow-y:auto;background:#fff;padding:5px;border:1px solid #aaa;""></div>
  <form id=""chat-form"">
    <input type=""text"" id=""chat-input"" placeholder=""Напиши съобщение..."" style=""width:70%"">
    <button type=""submit"">Изпрати</button>
  </form>
</div>

<script>
function loadMessages() {
  fetch('/chat/messages/')
    .then(res => res.json())
    .then(data => {
      const box = document.getElementById('chat-messages');
      box.innerHTML = '';
      data.forEach(msg => {
        box.innerHTML += `<p><strong>${msg.sender}</strong>: ${msg.message}</p>`;
      });
      box.scrollTop = box.scrollHeight;
    });
}

document.getElementById('chat-form').addEventListener('submit', function(e) {
  e.preventDefault();
  const input = document.getElementById('chat-input');
  const message = input.value;
  if (message.trim() === '') return;

  fetch('/chat/send/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-CSRFToken': '{{ csrf_token }}'
    },
    body: 'message=' + encodeURIComponent(message)
  }).then(() => {
    input.value = '';
    loadMessages();
  });
});

setInterval(loadMessages, 5000); // Обновява съобщенията на всеки 5 секунди
loadMessages(); // Зарежда при отваряне
</script>
"
8JWwDpBV,Best Time to Buy & Sell Stocks with Cooldown,Fastrail08,C++,Friday 20th of June 2025 06:05:18 AM CDT,"#include <bits/stdc++.h>
using namespace std;

void getMaximumProfitWithCooldown(int level, int transactionState, int currProfit, int &maxProfit, vector<int> &prices){
    if(level >= prices.size()){
        maxProfit = max(maxProfit, currProfit);
        return;
    }
    
    //buy 
    if(transactionState == 0){
        getMaximumProfitWithCooldown(level + 1, 1, currProfit - prices[level], maxProfit, prices);
    }
    //sell
    if(transactionState == 1){
        getMaximumProfitWithCooldown(level + 1, 2, currProfit + prices[level], maxProfit, prices);
    }
    //cooldown
    if(transactionState == 2){
        getMaximumProfitWithCooldown(level + 1, 0, currProfit, maxProfit, prices);
    }
    //don't do anything
    if(transactionState == 0 || transactionState == 1){
        getMaximumProfitWithCooldown(level + 1, transactionState, currProfit, maxProfit, prices);
    }
}

int getMaximumProfitWithCooldownMemo(int level, int transactionState, vector<int> &prices, vector<vector<int> > &memo){
    if(level >= prices.size()){
        return 0;
    }
    
    //level - stock price on each day
    /*
    options - 
    transactionState = 0; transaction closed (buy)
    transactionState = 1; transaction opened (sell)
    transactionState = 2; transaction in cooldown (can't buy or sell)
    don't do anything on that day
    */
    if(memo[level][transactionState] != -1){
        return memo[level][transactionState];
    }
    int bought = 0, sold = 0, cooldown = 0, na = 0;
    //can only buy when transactionState is closed
    if(transactionState == 0){
        bought = getMaximumProfitWithCooldownMemo(level + 1, 1, prices, memo) - prices[level];
    }
    //can only sell when transactionState is opened
    if(transactionState == 1){
        sold = getMaximumProfitWithCooldownMemo(level + 1, 2, prices, memo) + prices[level];
    }
    //can only cooldown if transactionState is in cooldown
    if(transactionState == 2){
        cooldown = getMaximumProfitWithCooldownMemo(level + 1, 0, prices, memo);
    }
    //can only do nothing when transactionState is either opened or closed.
    //As we are already doing nothing during cooldown, so call will just get repeated if called during cooldown
    //If on a level when on cooldown, doing nothing that day, will change the transactionState = 0, as we passed the cooldown period, but in Doing Nothing call to the next level we maintain the transactionState = transactionState, which won't make sense if on cooldown, as cooldown will end no matter what after the day/level has passed.
    // we can't have a call like (index, 2) -> (index + 1, 2)..as the transactionState would automatically change from 2 to 0 as the day passes.
    if(transactionState == 0 || transactionState == 1){
        na = getMaximumProfitWithCooldownMemo(level + 1, transactionState, prices, memo);
    }
    return memo[level][transactionState] = max(na, max(cooldown, max(sold, bought)));
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> prices(n);
    for(int i = 0; i < n; i++){
        cin >> prices[i];
    }
    /*
    Recursive call
    */
    int maxProfit = 0;
    getMaximumProfitWithCooldown(0, 0, 0, maxProfit, prices);
    cout << maxProfit << '\n';
    
    /*
    Memo call
    */
    vector<vector<int> > memo(prices.size(), vector<int>(3, -1));
    cout << getMaximumProfitWithCooldownMemo(0, 0, prices, memo) << '\n';
}
"
vrrSz4u9,code for the 2nd music driver prototype as of 2025-06-20,Kitomas,6502 TASM/64TASS,Friday 20th of June 2025 06:02:20 AM CDT,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;""2nd_music_driver_2025-06-20\main.p8"":
%zeropage basicsafe

%import music





song_data {
  %option ignore_unused

  const ubyte PULSE    = %00000000
  const ubyte SAWTOOTH = %01000000
  const ubyte TRIANGLE = %10000000
  const ubyte NOISE    = %11000000
  
  const ubyte SILENT   = %00000000
  const ubyte LEFT     = %01000000
  const ubyte RIGHT    = %10000000
  const ubyte STEREO   = %11000000
  
  ; 6 bytes per instrument
  const ubyte INSTRUMENTS_LEN = sizeof(instruments)/6
  
  ; +1 for tick speed
  const ubyte ORDERS_LEN = sizeof(orders)/(CHANNELS+1)
  
  ; 2 bytes per pattern pointer
  const ubyte PATTERNS_LEN = sizeof(patterns)/2
  
  ; This is what you pass to music.play()
  ; Note: mkword's first arg is the high byte, not the low byte!
  uword[] @nosplit info = [mkword(INSTRUMENTS_LEN, CHANNELS),
                           mkword(PATTERNS_LEN, ORDERS_LEN),
                           mkword(0, 0), ; (Reserved)
                           &instruments, &orders, &patterns]



  const uword INS_NULL      =  0
  const uword INS_SAWLONG   =  1
  const uword INS_PLSSHRT   =  2
  const uword INS_PLSLONG   =  3
  const uword INS_NOISHRT_L =  4
  const uword INS_NOISHRT_R =  5
  const uword INS_NOILONG_L =  6
  const uword INS_NOILONG_R =  7
  const uword INS_NOISHRT   =  8
  const uword INS_NOILONG   =  9
  const uword INS_CHIRP     = 10

  ; WAVEFORM|WIDTH, EAR_CHANLS|VOL, MAXVOL_6b, ATTACK_8b, SUSTAIN_8b, RELEASE_8b
  ;
  ; From psg.envelope()'s remarks:
  ;   maxvolume = 0-63
  ;   attack, sustain, release = 0-255 that determine the speed of the A/D/R:
  ;   attack  time:   MAXVOL/15/attack sec.   higher value = faster attack.
  ;   sustain time:   sustain/60 sec.         higher value = longer sustain.
  ;   release time:   MAXVOL/15/release sec.  higher vaule = faster release.
  ;
  ; (A max volume of 0 is interpreted as 'no note', which can be used for
  ;  envelopes longer than the row it resides in, as that current envelope
  ;  will continue until the next row with an instrument without a maxvol of 0.)
  ubyte[] instruments = [       0,        0,   0,  255,  0, 255, ;  0 NULL
                         SAWTOOTH, STEREO|0,  30,  208,  0,   5, ;  1 SAWLONG
                         PULSE|48, STEREO|0,  33,  170,  5,  44, ;  2 PLSSHRT
                         PULSE|38, STEREO|0,  33,  170, 13,  44, ;  3 PLSLONG
                         NOISE   ,   LEFT|0,  19,   58,  0,  16, ;  4 NOISHRT_L
                         NOISE   ,  RIGHT|0,  19,   58,  0,  16, ;  5 NOISHRT_R
                         NOISE   ,   LEFT|0,  19,   58,  0,   8, ;  6 NOILONG_L
                         NOISE   ,  RIGHT|0,  19,   58,  0,   8, ;  7 NOILONG_R
                         NOISE   , STEREO|0,  14,   58,  0,  16, ;  8 NOISHRT
                         NOISE   , STEREO|0,  14,   58,  0,   8, ;  9 NOILONG
                         PULSE| 9, STEREO|0,  21,  208,  0,   6] ; 10 CHIRP
                        
  
  
  ; Accepts values 1-6 (ORDERS_LEN = sizeof(orders)/CHANNELS)
  const ubyte CHANNELS = 5
  
  ; Contains indices into the patterns array, where the actual
  ; index equals i-1, and a value of 0 means no pattern at all
  ;
  ; The first byte of an order entry however, is the tick speed (frames per row)
  ubyte[] orders = [
                     8,  1, 2, 3, 4, 5,
                    ]
  
  
  
  ; This is an array of pointers
  ;
  ; In each pattern, the first byte correlates to its length mask.
  ; For example, a pattern with a length of 64 would have a mask of 63
  ; (Pattern length must be a power of 2!)
  ;
  ; If the 2nd byte is nonzero, that pattern's array lacks the @nosplit tag.
  ;
  ; The words after are the pattern's rows:
  ;   Bits 0-6 are: The note index; piano key starting from C0 (0-119)
  ;                 (A note index of 0 indicates a silent note)
  ;   Bits 7-F are: The instrument index (0-511)
  uword[] @nosplit patterns = [pattern_hatLR,
                               pattern_hatST,
                               pattern_saw,
                               pattern_pulse,
                               pattern_chirp]
  
  
  
  ; 1
  uword[] @nosplit pattern_hatLR = [mkword(0,7), ; Mask of 7, for 8 notes total
                                    INS_NOISHRT_L<<7 | piano.KEY_C9,
                                    INS_NOISHRT_R<<7 | piano.KEY_C9,
                                    INS_NOILONG_L<<7 | piano.KEY_D9S,
                                    INS_NULL     <<7 |            0,
                                    INS_NOISHRT_R<<7 | piano.KEY_C9,
                                    INS_NOISHRT_L<<7 | piano.KEY_C9,
                                    INS_NOILONG_R<<7 | piano.KEY_D9S,
                                    INS_NULL     <<7 |            0]
  
  
  
  ; 2
  uword[] @nosplit pattern_hatST = [mkword(0,7), ; Mask of 7, for 8 notes total
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOILONG<<7 | piano.KEY_D9S,
                                    INS_NULL   <<7 |            0,
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOILONG<<7 | piano.KEY_D9S,
                                    INS_NULL   <<7 |            0]

  

  ; 3
  uword[] @nosplit pattern_saw = [mkword(0,63), ; 64 notes total
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_C3,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_A2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_F2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_F2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_F2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_D2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0]



  uword[] @nosplit pattern_pulse = [mkword(0,63), ; 64 notes total
                           ; 0 -> 7:
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           ; 8 -> 15:
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           ; 16 -> 23:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           ; 24 -> 31:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSSHRT<<7 | piano.KEY_D4S,
                           INS_PLSSHRT<<7 | piano.KEY_C4S,
                           ; 32 -> 39:
                           INS_PLSSHRT<<7 | piano.KEY_C3S,
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_C4,
                           INS_NULL   <<7 | 0,
                           ; 40 -> 47:
                           INS_PLSSHRT<<7 | piano.KEY_C3S,
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_C4,
                           INS_NULL   <<7 | 0,
                           ; 48 -> 55:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_F4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_C4S,
                           INS_NULL   <<7 | 0,
                           ; 56 -> 63:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_F4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSSHRT<<7 | piano.KEY_C4S,
                           INS_PLSSHRT<<7 | piano.KEY_C4]



  const byte OCTAVE = 12
  const byte CHIRPMOD = OCTAVE * 0

  uword[] @nosplit pattern_chirp = [mkword(0,15), ; 16 notes total
                                    INS_NULL <<7 | 0,
                                    INS_NULL <<7 | 0,
                                    INS_NULL <<7 | 0,
                                    INS_NULL <<7 | 0,
                                    INS_CHIRP<<7 | (piano.KEY_G4  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_A4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_C5  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_A4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_C5  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_A4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_C5  + CHIRPMOD)]

}





main {
  sub start() {
    cx16.screen_set_charset(3+2, 0) ; +2 for upper/lower charset's thin variant
    
    txt.clear_screen()
    
    music.init()
    music.play(song_data.info)
    
    music_debug.print_info()
    
    uword frame = 0
    
    repeat {
      if (frame%music.STATE_ticksPerRow) == 0 {
        ;txt.print(""whichOrder = "")
        ;printn.uw_dec(music.STATE_whichOrder)
        ;txt.print("", whichRow = "")
        txt.print(""whichRow = "")
        printn.ub_dec(music.STATE_whichRow)
        txt.nl()
      }
    
      sys.waitvsync()
      frame++
      
    }
    
  }
  
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;""2nd_music_driver_2025-06-20\music.p8"":
; - PUBLIC ROUTINES -
; music.init() (only needs to be called once!)
; music.play(ptr_info)
; music.stop()
; music.stop_forced()

%import piano





; - EXAMPLE SONG -
; CAN BE PLAYED WITH THESE 2 LINES:
;music.init()
;music.play(song_example.info)

song_example {
  %option ignore_unused

  const ubyte PULSE    = %00000000
  const ubyte SAWTOOTH = %01000000
  const ubyte TRIANGLE = %10000000
  const ubyte NOISE    = %11000000
  
  const ubyte SILENT   = %00000000
  const ubyte LEFT     = %01000000
  const ubyte RIGHT    = %10000000
  const ubyte STEREO   = %11000000
  
  ; 6 bytes per instrument
  const ubyte INSTRUMENTS_LEN = sizeof(instruments)/6
  
  ; +1 for tick speed
  const ubyte ORDERS_LEN = sizeof(orders)/(CHANNELS+1)
  
  const ubyte PATTERNS_LEN = sizeof(patterns)/2
  
  ; This is what you pass to music.play()
  ; Note: mkword's first arg is the high byte, not the low byte!
  uword[] @nosplit info = [mkword(INSTRUMENTS_LEN, CHANNELS),
                           mkword(PATTERNS_LEN, ORDERS_LEN),
                           mkword(0, 0), ; (Reserved)
                           &instruments, &orders, &patterns]



  ; WAVEFORM|WIDTH, EAR_CHANLS|VOL, MAXVOL_6b, ATTACK_8b, SUSTAIN_8b, RELEASE_8b
  ;
  ; From psg.envelope()'s remarks:
  ;   maxvolume = 0-63
  ;   attack, sustain, release = 0-255 that determine the speed of the A/D/R:
  ;   attack  time:   MAXVOL/15/attack sec.   higher value = faster attack.
  ;   sustain time:   sustain/60 sec.         higher value = longer sustain.
  ;   release time:   MAXVOL/15/release sec.  higher vaule = faster release.
  ;
  ; (A max volume of 0 is interpreted as 'no note', which can be used for
  ;  envelopes longer than the row it resides in, as that current envelope
  ;  will continue until the next row with an instrument without a maxvol of 0.)
  ubyte[] instruments = [PULSE|63, STEREO|63,  63,  255, 10, 128,
                         TRIANGLE, STEREO|48,  63,    4, 60,   4]
  
  
  
  ; Accepts values 1-6 (ORDERS_LEN = sizeof(orders)/CHANNELS)
  const ubyte CHANNELS = 6
  
  ; Contains indices into the patterns array, where the actual
  ; index equals i-1, and a value of 0 means no pattern at all
  ;
  ; The first byte of an order entry however, is the tick speed (frames per row)
  ubyte[] orders = [12,  1, 2, 0, 0, 0, 0]
  
  
  
  ; This is an array of pointers
  ;
  ; In each pattern, the first byte correlates to its length mask.
  ; For example, a pattern with a length of 64 would have a mask of 63
  ; (Pattern length must be a power of 2!)
  ;
  ; If the 2nd byte is nonzero, that pattern's array lacks the @nosplit tag.
  ;
  ; The words after are the pattern's rows:
  ;   Bits 0-6 are: The note index; piano key starting from C0# (1-119)
  ;                 (A note index of 0 indicates a silent note)
  ;   Bits 7-F are: The instrument index (0-511)
  uword[] @nosplit patterns = [pattern_1, pattern_2]
  
  
  
  uword[] @nosplit pattern_1 = [mkword(0,3), ; Mask of 3, for a total of 4 notes
                                0<<7 | piano.KEY_C4,
                                0<<7 | piano.KEY_G4,
                                0<<7 | piano.KEY_C5,
                                0<<7 | piano.KEY_G4]
                                
  uword[] @nosplit pattern_2 = [mkword(0,0), ; Mask of 0, for a total of 1 note
                                1<<7 | piano.KEY_C4]

}





; Uses (at most) the upper 12 PSG channels
music {
  %option ignore_unused
  
  const uword NULL = 0 ; To make null pointer comparisons a bit more readable

  ; Byte indexes within song header
  const ubyte INDEX_CHANNELS        =  0 ; LSB of uword 0
  const ubyte INDEX_INSTRUMENTS_LEN =  1 ; MSB of uword 0
  const ubyte INDEX_ORDERS_LEN      =  2 ; LSB of uword 1
  const ubyte INDEX_PATTERNS_LEN    =  3 ; MSB of uword 1
 ;const ubyte INDEX_?               =  4 ; LSB of uword 2
 ;const ubyte INDEX_?               =  5 ; MSB of uword 2
  const ubyte INDEX_INSTRUMENTS     =  6
  const ubyte INDEX_ORDERS          =  8
  const ubyte INDEX_PATTERNS        = 10



  ; - SONG DATA (AKA CONTENTS OF SONG INFO) -
  ubyte SONG_channels
  ubyte SONG_instruments_len
  ubyte SONG_orders_len
  ubyte SONG_patterns_len
  ubyte SONG_order_size ; = channels+1 (used for alignment, mostly)
  
  uword SONG_ptr_info
  uword SONG_ptr_instruments
  uword SONG_ptr_orders
  uword SONG_ptr_patterns



  ; - STATE VARIABLES -
  bool STATE_isInit
  bool STATE_isPlaying
  
  uword STATE_whichOrder ; Remember, this is a uword, not a ubyte!
  ubyte STATE_whichRow
  ubyte STATE_whichTick ; Actually decrements, loading a new row at 0
  ubyte STATE_ticksPerRow
  ubyte STATE_highestMask
  
  ; For every note, switch to an alternate channel
  ; so that envelopes aren't cut off prematurely
  ; (This is never reinitialized on purpose, as it's redundant!)
  ;
  ; (Also, this is of type ubyte[] instead of bool[],
  ;  so I'm able to apply an XOR to easily flip the boolean)
  ubyte[6] STATE_altChannel
  
  ; Determines the length of each pattern
  ubyte[6] STATE_rowMasks
  
  ; Pointers to the currently loaded patterns
  uword[6] STATE_ptrs_curOrder


  
  
  
  sub init() {
    if STATE_isInit return
  
    psg.init()
    
    cx16.enable_irq_handlers(false)
    cx16.set_vsync_irq_handler(&music.irq_routine)
    
    STATE_isInit = true

  }
  
  
  
  
  
  asmsub get_voice_num(ubyte channel @Y) clobbers(A) -> ubyte @Y {
    ; Calculates the raw voice index, based on a channel index of 0 -> 5
    ; returns: (4 + Y<<1 + alt_channel[Y])
    ; (I might've been able to save some bytes by storing the boolean in X,
    ;  but that would clobber another register, which is probably worse)
    %asm {{
      lda p8v_STATE_altChannel, y
      beq _dont_increment ; If boolean is false, don't increment result
;_increment:
      tya
      asl    ; Y<<1
      clc
      adc #4 ; +4
      tay   
      iny    ; +alt_channel[Y]
      rts
_dont_increment:
      tya
      asl    ; Y<<1
      clc
      adc #4 ; +4
      tay
      rts
    }}
    
  }
  
  
  
  
  
  ; Like peekw, but for split arrays
  ; (I don't have time to make this an asmsub right now unfortunately)
  ; TODO: This doesn't work in the context in which it's used; why?
  sub get_split_uword(uword arr, ubyte arr_len, ubyte index) -> uword {
    uword result
    setlsb(result, arr[index])
    arr += (arr_len as uword)
    setmsb(result, arr[index])
    return result
  
  }





  sub apply_key(ubyte whichVoice, ubyte whichKey) { 
    void piano.key(whichVoice, whichKey&%01111111) 
    
  }





  ; Applies both voice and envelope
  sub apply_instrument(ubyte whichVoice, uword whichInstrument) { 
    whichInstrument *= 6 ; Instrument index to byte offset (each are 6 bytes)
    whichInstrument += SONG_ptr_instruments ; Byte offset to pointer
    
    ubyte wf_pw = whichInstrument[0] ; waveform | pulse_width
    ubyte ec_sv = whichInstrument[1] ; ear_channels | start_vol
    
    ubyte maxvol  = whichInstrument[2]
    ubyte attack  = whichInstrument[3]
    ubyte sustain = whichInstrument[4]
    ubyte release = whichInstrument[5]
    
    if maxvol == 0 {  return  }
    
    psg.voice(whichVoice, ec_sv&%11000000, ec_sv&%00111111,
                          wf_pw&%11000000, wf_pw&%00111111)
                         
    psg.envelope(whichVoice, maxvol, attack, sustain, release) 
  
  }




  
  sub load_order(uword whichOrder) {
   ;STATE_whichOrder = whichOrder  ; (This line should be redundant)
    whichOrder *= SONG_order_size ; Order index to byte offset
    whichOrder += SONG_ptr_orders ; Byte offset to pointer
  
    STATE_whichRow    = 0
    STATE_ticksPerRow = whichOrder[0]
    STATE_highestMask = %00000001 ; A mask of 1 bit by default
    
    whichOrder++ ; whichOrder = &whichOrder[1] (skips the order's tick rate)
    
    &ubyte loop_i = &cx16.r4L ; Effectively an alias for cx16.r4L
    ubyte loop_max = SONG_channels-1
    
     
    
    ; For each pattern ptr in current order
    for loop_i in 0 to loop_max {
      ubyte patternID = whichOrder[loop_i]
      
      &uword ptr_pattern = &cx16.r5 ; Alias for r5

      if patternID != 0 {
        ptr_pattern = peekw( SONG_ptr_patterns + (((patternID-1) as uword)<<1) )
      } else { ; A pattern ID of 0 indicates 'no pattern used'
        ptr_pattern = NULL
      }
      
      STATE_ptrs_curOrder[loop_i] = ptr_pattern
      
      
      
      if patternID != 0 {
        ; First byte of pattern is the mask
        ubyte rowMask = ptr_pattern[0]
        
        STATE_rowMasks[loop_i] = rowMask
        
        ; For finding the largest mask in all of the currently loaded patterns,
        ; which is used to determine when an order is supposed to end
        if STATE_highestMask < rowMask {  STATE_highestMask = rowMask  }
        
      }
    
    }
    
  }
  
  
  
  
  
  ; (Assumes order is already loaded)
  sub load_row(ubyte whichRow) {
    STATE_whichTick = STATE_ticksPerRow ; Decrements instead of incrementing
  
    &ubyte loop_i = &cx16.r4L ; Effectively an alias for cx16.r4L
    ubyte loop_max = SONG_channels-1
    
    
    
    ; For each pattern ptr in current order
    for loop_i in 0 to loop_max {
      uword ptr_curPattern = STATE_ptrs_curOrder[loop_i]
      
      if ptr_curPattern == NULL {  continue  }
      ubyte patternIsSplit = ptr_curPattern[1]
      ptr_curPattern += 2 ; Skip the pattern's mask and split value
      
      ubyte patternMask = STATE_rowMasks[loop_i]
      ubyte whichRowMasked  =  whichRow & patternMask
      
      
      
      uword rowValue
      
      if patternIsSplit != 0 {
        ; TODO: Figure out why this doesn't work
        ;rowValue = get_split_uword(ptr_curPattern, patternMask, whichRowMasked)
      } else {
        rowValue = peekw( ptr_curPattern + ((whichRowMasked as uword)<<1) )
      }
      
      
      ubyte whichKey        = lsb(rowValue) ;&%01111111 (this AND is redundant)
      ubyte whichInstrument = (rowValue>>7) as ubyte
      ubyte whichVoice      = get_voice_num(loop_i)
      
      if whichKey == 0 {  continue  }
      
      apply_key(whichVoice, whichKey) ; (Automatically unsets MSb of whichKey)
      apply_instrument(whichVoice, whichInstrument)
      
      STATE_altChannel[loop_i] ^= 1 ; Flip the relevant bit
    
    }
  
  }
  
  
  
  
  
  ; Just 1 instruction (a 65C02-specific instruction :D)
  ; Assuming that STATE_isPlaying is zeropage, 1 byte per call is actually saved
  ; by inlining this lol (otherwise, the byte count is the same; 3 per call)
  inline asmsub stop() clobbers() { %asm {{  stz p8v_STATE_isPlaying  }} }
  
  sub stop_forced() { stop() } ; TODO: Set all of the channels to mute here





  sub play(uword ptr_info) {
    if ptr_info == NULL {  return  }
    
    SONG_channels        = ptr_info[INDEX_CHANNELS]
    SONG_instruments_len = ptr_info[INDEX_INSTRUMENTS_LEN]
    SONG_orders_len      = ptr_info[INDEX_ORDERS_LEN]
    SONG_patterns_len    = ptr_info[INDEX_PATTERNS_LEN]
    SONG_order_size      = SONG_channels+1
    
    SONG_ptr_info        = ptr_info
    SONG_ptr_instruments = peekw(ptr_info + INDEX_INSTRUMENTS)
    SONG_ptr_orders      = peekw(ptr_info + INDEX_ORDERS)
    SONG_ptr_patterns    = peekw(ptr_info + INDEX_PATTERNS)
    
    STATE_whichOrder = 0
    STATE_whichRow = 0 ; So that order 0 is immediately loaded next irq
    STATE_whichTick = 0
    STATE_highestMask = 255 ; Full mask by default, until order 0 is loaded
    
    STATE_isPlaying = true
    
  }
  



  
  sub irq_routine() -> bool {
    
    if not STATE_isPlaying {  goto lbl_songStopped  }
    
    ubyte whichRowMasked  =  STATE_whichRow & STATE_highestMask 
    
    if whichRowMasked == 0 {
      ; TODO: Looping is broken. Fix it.
      load_order(STATE_whichOrder)
      STATE_whichOrder++
      ; Should be faster than a normal modulo
      if STATE_whichOrder >= SONG_orders_len {
        STATE_whichOrder -= SONG_orders_len
      }
    }
    
    if STATE_whichTick == 0 {
      load_row(whichRowMasked)
      STATE_whichRow++
    }
    
    STATE_whichTick--
    
    lbl_songStopped:

    return psg.envelopes_irq()
    
  }

}





;------------------------------------------------------------------------------;





%import textio
%import conv

; txt.clear_screen()
; txt.nl()

printn {
  %option ignore_unused

  sub ub_dec(ubyte v) { txt.print(conv.str_ub(v)) }
  sub  b_dec(byte  v) { txt.print(conv.str_b(v)) }
  sub uw_dec(uword v) { txt.print(conv.str_uw(v)) }
  sub  w_dec(word  v) { txt.print(conv.str_w(v)) }
  
  sub ub_bin(ubyte v) { txt.print(conv.str_ubbin(v)) }
  
  sub ub_hex(ubyte v) { txt.print(conv.str_ubhex(v)) }
  sub uw_hex(uword v) { txt.print(conv.str_uwhex(v)) }

}

music_debug {
  %option ignore_unused

  sub print_info() {
    txt.print(""channels        = "")
    printn.ub_dec(music.SONG_channels)
    txt.print(""\ninstruments_len = "")
    printn.ub_dec(music.SONG_instruments_len)
    txt.print(""\norders_len      = "")
    printn.ub_dec(music.SONG_orders_len)
    txt.print(""\npatterns_len    = "")
    printn.ub_dec(music.SONG_patterns_len)
    txt.print(""\norder_size      = "")
    printn.ub_dec(music.SONG_order_size)
    
    txt.print(""\nptr_instruments = $"")
    printn.uw_hex(music.SONG_ptr_instruments)
    txt.print(""\nptr_orders      = $"")
    printn.uw_hex(music.SONG_ptr_orders)
    txt.print(""\nptr_patterns    = $"")
    printn.uw_hex(music.SONG_ptr_patterns)
    txt.nl()
    
  }
  
  sub print_state() {
    txt.print(""isInit      = "")
    printn.ub_dec(music.STATE_isInit as ubyte)
    txt.print(""\nisPlaying   = "")
    printn.ub_dec(music.STATE_isPlaying as ubyte)
    
    txt.print(""\nwhichOrder  = "")
    printn.uw_dec(music.STATE_whichOrder) ; uword, not ubyte
    txt.print(""\nwhichRow    = "")
    printn.ub_dec(music.STATE_whichRow)
    txt.print(""\nwhichTick   = "")
    printn.ub_dec(music.STATE_whichTick)
    txt.print(""\nticksPerRow = "")
    printn.ub_dec(music.STATE_ticksPerRow)
    txt.print(""\nhighestMask = "")
    printn.ub_dec(music.STATE_highestMask)
    
    &ubyte loop_i = &cx16.r6L
    
    txt.print(""\naltChannel = ["")
    for loop_i in 0 to 5 {
      printn.ub_dec(music.STATE_altChannel[cx16.r4L])
      txt.print("", "")
    }
    txt.print(""]\n"")
    
    txt.print(""rowMasks = ["")
    for loop_i in 0 to 5 {
      printn.ub_dec(music.STATE_rowMasks[cx16.r4L])
      txt.print("", "")
    }
    txt.print(""]\n"")
    
    txt.print(""curOrder = ["")
    for loop_i in 0 to 5 {
      txt.chrout('$')
      printn.uw_hex(music.STATE_ptrs_curOrder[cx16.r4L])
      txt.print("", "")
    }
    txt.print(""]\n"")
  
  }
  
  sub print_arr_ub(str prefix, uword ptr, ubyte index) {
    txt.print(prefix)
    txt.print("" = $"")
    printn.ub_hex(ptr[index])
    txt.nl()
  
  }
  
  sub print_arr_uw(str prefix, uword ptr, ubyte index) {
    txt.print(prefix)
    txt.print("" = $"")
    printn.uw_hex(peekw( ptr + ((index as uword)<<1) ))
    txt.nl()
    
  }

}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;""2nd_music_driver_2025-06-20\piano.p8"":
%import psg

piano {
  ;%option no_symbol_prefixing, ignore_unused
  %option ignore_unused

  ; Referring to the index in the lookup table,
  ; not the actual frequency value, of course.
  const ubyte KEY_C0   =   0  ;   16.35Hz
  const ubyte KEY_C0S  =   1  ;   17.32Hz
  const ubyte KEY_D0   =   2  ;   18.35Hz
  const ubyte KEY_D0S  =   3  ;   19.44Hz
  const ubyte KEY_E0   =   4  ;   20.60Hz
  const ubyte KEY_F0   =   5  ;   21.82Hz
  const ubyte KEY_F0S  =   6  ;   23.12Hz
  const ubyte KEY_G0   =   7  ;   24.49Hz
  const ubyte KEY_G0S  =   8  ;   25.95Hz
  const ubyte KEY_A0   =   9  ;   27.50Hz
  const ubyte KEY_A0S  =  10  ;   29.13Hz
  const ubyte KEY_B0   =  11  ;   30.86Hz
  const ubyte KEY_C1   =  12  ;   32.70Hz
  const ubyte KEY_C1S  =  13  ;   34.64Hz
  const ubyte KEY_D1   =  14  ;   36.70Hz
  const ubyte KEY_D1S  =  15  ;   38.89Hz
  const ubyte KEY_E1   =  16  ;   41.20Hz
  const ubyte KEY_F1   =  17  ;   43.65Hz
  const ubyte KEY_F1S  =  18  ;   46.24Hz
  const ubyte KEY_G1   =  19  ;   48.99Hz
  const ubyte KEY_G1S  =  20  ;   51.91Hz
  const ubyte KEY_A1   =  21  ;   55.00Hz
  const ubyte KEY_A1S  =  22  ;   58.27Hz
  const ubyte KEY_B1   =  23  ;   61.73Hz
  const ubyte KEY_C2   =  24  ;   65.40Hz
  const ubyte KEY_C2S  =  25  ;   69.29Hz
  const ubyte KEY_D2   =  26  ;   73.41Hz
  const ubyte KEY_D2S  =  27  ;   77.78Hz
  const ubyte KEY_E2   =  28  ;   82.40Hz
  const ubyte KEY_F2   =  29  ;   87.30Hz
  const ubyte KEY_F2S  =  30  ;   92.49Hz
  const ubyte KEY_G2   =  31  ;   97.99Hz
  const ubyte KEY_G2S  =  32  ;  103.82Hz
  const ubyte KEY_A2   =  33  ;  110.00Hz
  const ubyte KEY_A2S  =  34  ;  116.54Hz
  const ubyte KEY_B2   =  35  ;  123.47Hz
  const ubyte KEY_C3   =  36  ;  130.81Hz
  const ubyte KEY_C3S  =  37  ;  138.59Hz
  const ubyte KEY_D3   =  38  ;  146.83Hz
  const ubyte KEY_D3S  =  39  ;  155.56Hz
  const ubyte KEY_E3   =  40  ;  164.81Hz
  const ubyte KEY_F3   =  41  ;  174.61Hz
  const ubyte KEY_F3S  =  42  ;  184.99Hz
  const ubyte KEY_G3   =  43  ;  195.99Hz
  const ubyte KEY_G3S  =  44  ;  207.65Hz
  const ubyte KEY_A3   =  45  ;  220.00Hz
  const ubyte KEY_A3S  =  46  ;  233.08Hz
  const ubyte KEY_B3   =  47  ;  246.94Hz
  const ubyte KEY_C4   =  48  ;  261.62Hz
  const ubyte KEY_C4S  =  49  ;  277.18Hz
  const ubyte KEY_D4   =  50  ;  293.66Hz
  const ubyte KEY_D4S  =  51  ;  311.12Hz
  const ubyte KEY_E4   =  52  ;  329.62Hz
  const ubyte KEY_F4   =  53  ;  349.22Hz
  const ubyte KEY_F4S  =  54  ;  369.99Hz
  const ubyte KEY_G4   =  55  ;  391.99Hz
  const ubyte KEY_G4S  =  56  ;  415.30Hz
  const ubyte KEY_A4   =  57  ;  440.00Hz
  const ubyte KEY_A4S  =  58  ;  466.16Hz
  const ubyte KEY_B4   =  59  ;  493.88Hz
  const ubyte KEY_C5   =  60  ;  523.25Hz
  const ubyte KEY_C5S  =  61  ;  554.36Hz
  const ubyte KEY_D5   =  62  ;  587.32Hz
  const ubyte KEY_D5S  =  63  ;  622.25Hz
  const ubyte KEY_E5   =  64  ;  659.25Hz
  const ubyte KEY_F5   =  65  ;  698.45Hz
  const ubyte KEY_F5S  =  66  ;  739.98Hz
  const ubyte KEY_G5   =  67  ;  783.99Hz
  const ubyte KEY_G5S  =  68  ;  830.60Hz
  const ubyte KEY_A5   =  69  ;  880.00Hz
  const ubyte KEY_A5S  =  70  ;  932.32Hz
  const ubyte KEY_B5   =  71  ;  987.76Hz
  const ubyte KEY_C6   =  72  ; 1046.50Hz
  const ubyte KEY_C6S  =  73  ; 1108.73Hz
  const ubyte KEY_D6   =  74  ; 1174.65Hz
  const ubyte KEY_D6S  =  75  ; 1244.50Hz
  const ubyte KEY_E6   =  76  ; 1318.51Hz
  const ubyte KEY_F6   =  77  ; 1396.91Hz
  const ubyte KEY_F6S  =  78  ; 1479.97Hz
  const ubyte KEY_G6   =  79  ; 1567.98Hz
  const ubyte KEY_G6S  =  80  ; 1661.21Hz
  const ubyte KEY_A6   =  81  ; 1760.00Hz
  const ubyte KEY_A6S  =  82  ; 1864.65Hz
  const ubyte KEY_B6   =  83  ; 1975.53Hz
  const ubyte KEY_C7   =  84  ; 2093.00Hz
  const ubyte KEY_C7S  =  85  ; 2217.46Hz
  const ubyte KEY_D7   =  86  ; 2349.31Hz
  const ubyte KEY_D7S  =  87  ; 2489.01Hz
  const ubyte KEY_E7   =  88  ; 2637.02Hz
  const ubyte KEY_F7   =  89  ; 2793.82Hz
  const ubyte KEY_F7S  =  90  ; 2959.95Hz
  const ubyte KEY_G7   =  91  ; 3135.96Hz
  const ubyte KEY_G7S  =  92  ; 3322.43Hz
  const ubyte KEY_A7   =  93  ; 3520.00Hz
  const ubyte KEY_A7S  =  94  ; 3729.31Hz
  const ubyte KEY_B7   =  95  ; 3951.06Hz
  const ubyte KEY_C8   =  96  ; 4186.00Hz
  const ubyte KEY_C8S  =  97  ; 4434.92Hz
  const ubyte KEY_D8   =  98  ; 4698.63Hz
  const ubyte KEY_D8S  =  99  ; 4978.03Hz
  const ubyte KEY_E8   = 100  ; 5274.04Hz
  const ubyte KEY_F8   = 101  ; 5587.65Hz
  const ubyte KEY_F8S  = 102  ; 5919.91Hz
  const ubyte KEY_G8   = 103  ; 6271.92Hz
  const ubyte KEY_G8S  = 104  ; 6644.87Hz
  const ubyte KEY_A8   = 105  ; 7040.00Hz
  const ubyte KEY_A8S  = 106  ; 7458.62Hz
  const ubyte KEY_B8   = 107  ; 7902.13Hz
  const ubyte KEY_C9   = 108  ; 8372.01Hz
  const ubyte KEY_C9S  = 109  ; 8869.84Hz
  const ubyte KEY_D9   = 110  ; 9397.27Hz
  const ubyte KEY_D9S  = 111  ; 9956.06Hz
  const ubyte KEY_E9   = 112  ;10548.08Hz
  const ubyte KEY_F9   = 113  ;11175.30Hz
  const ubyte KEY_F9S  = 114  ;11839.82Hz
  const ubyte KEY_G9   = 115  ;12543.85Hz
  const ubyte KEY_G9S  = 116  ;13289.75Hz
  const ubyte KEY_A9   = 117  ;14080.00Hz
  const ubyte KEY_A9S  = 118  ;14917.24Hz
  const ubyte KEY_B9   = 119  ;15804.26Hz
  
  
  
  ; PSG frequency lookup table (used by key(); private)
  ubyte[120] priv_freqs_lo = [44, 47, 49, 52, 55, 59, 62, 66, 70, 74, 78, 83, 88, 93, 99,104,111,117,124,132,139,148,156,166,176,186,197,209,221,234,248,  7, 23, 39, 57, 75, 95,116,138,162,186,213,241, 14, 45, 79,114,151,190,232, 20, 67,117,169,225, 28, 91,157,227, 46,125,208, 41,134,234, 83,194, 57,182, 58,199, 92,249,160, 81, 13,211,166,133,113,107,116,141,183,242, 64,162, 25,167, 76, 10,226,215,233, 27,110,229,129, 69, 51, 77,151, 19,196,173,210, 54,220,201,  2,138,102,155, 46, 38,136, 90,164,107,184]
  ubyte[120] priv_freqs_hi = [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 36, 39, 41, 43, 46, 49, 52, 55, 58, 62, 65, 69, 73, 78, 82, 87, 93, 98,104,110,117,124,131,139,147,156,165]
  
  ; voice_num: 0-15, which: 0-119
  ; returns: the resulting raw frequency value
  sub key(ubyte voice_num, ubyte which) -> uword {
    uword freq_full = mkword(priv_freqs_hi[which], priv_freqs_lo[which])
    psg.freq(voice_num, freq_full)
    return freq_full 
    
  }

}"
rxC8PerH,dataNone,TestGuy1,JSON,Friday 20th of June 2025 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '017bf2345077268355225eee9445e14b0f9dfd592749dae75f2a63ca3138f16468ecc47058ccb2a0391b24ec21ce02de4d471b0ab4a0279f6c7deb6ef638977f8ad50a61a3c9ef8c1302f8b8d6f4bcdc89e3c0739bfcc8587654eb2a988589be34710658c8d8059c1e6a9897da6a6e6abdac3a482d2eda9a6da00b23b211863d',
  otherdata: [
    '48b92116fbfc294b2db714d7c40d00e5',
    '30748e0b2313e79e37212589c6af1bb1',
    'c1720d2d2a819813f456ee1f4618f9ba',
    'c9046a4fe87362c001d3e34cec14f863',
    'a59cfc560e71656fc2514653922d9bb9',
    '0fd1c3ca6836f26c766142078a3a39c8',
    '8b0f9b37967553de25c276a620e10ef0',
    '69187230da5d8ece033a36b7e73f9c71'
  ]
}"
n9VYf2iH,obj.js,eqeqwan21,JavaScript,Friday 20th of June 2025 04:39:56 AM CDT,"//v13_14 альтернатиная мнемосхема_маскировка команд
//v11++фото заголовки со ссылками																			  
""use strict"";
let hulla = new hullabaloo();
let box = null;
let circuit = null;
let stlog = null;
let dayly = null;
let lastip = null;
let lastmeter = null;
//Антон: отображение команд с учетом маски
let deviceObj = null;

let dt = null, mdt = null;
let liveMode = true;
let renewTimer = null;
let dtdt = null;
let commands = null;
var gallery_ro = true;
let waitingForAnswer = false;
let cmdSentMark = 0;
let get = parseQuery(window.location.search);
moment.locale(environment.language || window.navigator.userLanguage || window.navigator.language);


$(async function () {
  $(""#btnLive"").prop(""disabled"", true);
  let result;
  let userTown;
  if (environment.login_name.indexOf(""_"") !== -1) {
    userTown = '&town=' + environment.login_name.split('_')[0].toLowerCase()
  } else {
    userTown = ''
  }
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + get['id'] + userTown,
      type: 'GET',
      dataType: ""json""
    });
//Антон: отображение команд с учетом маски
    deviceObj = result;
  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Device was not loaded</h2>"");
    return;
  }


  if (result.rows.length > 0)
    box = result.rows.slice(0)[0];
  else {
    $(""#content"").html(""<h2>Device not found</h2>"");
    return;
  }

  if (box.DimProfile_id !== null) {
    try {
      dayly = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=dimdetail&now&id=' + box.DimProfile_id,
        type: 'GET',
        dataType: ""json""
      });
    } catch (error) {
      console.error(error);
    }
  }

  if (box.Type == 2)
    $(""#strongState"").text(i18next.t(""Brightness""));

  drawBoxInfo();
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=circuit&id=' + get['id'],
      type: 'GET',
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Pattern was not loaded</h2>"");
    return;
  }

  if (result.rows.length > 0)
    circuit = result.rows[0];
  else
    console.log(""Pattern not found"");

  let svg = """";
  if (circuit !== null) {
    let qs = circuit.qs;
    if (environment.language !== ""en"") {
      qs = qs.replace(/S/gi, ""K"");
    }

    try {
      svg = await $.ajax({
        url: environment.base_url + `/images/galbox.svg?v=${config.version}&noxml&cnf=` + qs,
        type: 'GET',
        processData: false
      });
      $(""#circuit"").html(`${svg}`);
      if (box.Name?.startsWith(""TL"") || box.Name?.startsWith(""G"")) await attachBackground();
    } catch (error) {
      console.error(error);
    }
  }

  stdatatable();
  meterdatatable();

  setTimeout(renew, 1);
  setTimeout(iprenew, 10);

  $(""#circuit svg"").addClass(""col-12"");
  $(""#circuit svg"").addClass(""p-0"");
  //Ссылки в зоголовках ""статистика"" и ""журнал состояния"" в форме Объект
  $(""#statlink"").attr(""href"", `${environment.base_url}/inlog?device=${get['id']}`);
  $(""#stlink"").attr(""href"", `${environment.base_url}/stlog?device=${get['id']}`);
  if (box.Smart) {
    try {
      result = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=ServerCommand&type=1,3&DeviceType=' + box.Type,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    commands = result.rows;
    $(""#cmd"").find('option').remove();

    for (let key in commands) {
      if (commands[key].Letter == ""F"")
        continue;
      $(""#cmd"").append($(""<option></option>"")
          .attr(""value"", commands[key].id)
          .text(i18next.t(commands[key].Name)));
    }
  } else {
    $(""#manualDiv"").hide();
  }
//добавление картинки светильника из галлереи с проверкой её наличия, иначе - по умолчанию
  if (box.Type !== 1) {
    $.ajax({
      url: `${environment.base_url}/?do=api&fn=picture_list&Devices_id=${get['id']}&order=ASC&limit=1`,
      type: 'GET',
      dataType: ""json"",
      success: function (result) {
        if (result['list'].length > 0) {
          $(""#circuit"").html('<img class=""img-fluid"" src=""' + result['list'][0].src + '"">');
        } else {
          $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`)
        }
      }
    });
    // $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`);
  }

  $("".picture"").click(() => {
    galleryOpen(get['id'])
  });
  /*
  let pl = await getPictureList(get['id'], 'desc', 100);
  if(pl.length == 0) {
    $("".picture"").click( ()=>{galleryOpen(get['id'])});
  } else {
    let html="""";
    let i=0;
    pl.forEach(el => {
      let title = """";
      let opt = {month: ""long"", day:""numeric"", year:""numeric""};
      let separ="", "";
      let opt2= {hour:""numeric"", minute:""numeric""};
      let disp="""";

      if(el.Exiftime!==null) {
        let dda = el.Exiftime.split("" "");
        if(dda.length==2) {
          let dds = dda[0].replaceAll("":"",""-"") + "" "" + dda[1]+""Z"";
          let dd = new Date(dds);

          if(!(dd===NaN) && !dd!=""Invalid Date"") {
            disp = ""<i class='fa fa-camera'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
            dd.toLocaleTimeString(environment.language, opt2);
          }
        }
      }

      let dd = new Date(el.Loaded+""Z"");
      if(!(dd===NaN) && !dd!=""Invalid Date"") {
        if(disp!="""")
          disp+=""<br>"";
        disp += ""<i class='fa fa-upload'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
        dd.toLocaleTimeString(environment.language, opt2);
      }

      title = `data-container=""body"" data-html=""true"" data-placement=""top"" data-toggle=""tooltip"" title=""${disp}""`;

      html += `<div ${title}><img onclick=""galleryOpen(${get['id']}, ${i})"" class=""border border-primary rounded imgpic"" width=""60px"" height=""60px"" src=""${el.src}&thumb""></div>`;
      i++;
    });
    $(""#pg"").html(html);
    $('[data-toggle=""tooltip""]').tooltip({
      boundary:""viewport"",
      html: true
    });
  }
  */

});

async function runCmd() {
  $(""#btnCmd"").prop(""disabled"", true);
  setTimeout(() => $(""#btnCmd"").prop(""disabled"", false), 1500);
  let srvcmd = {};
  $(""#circuit"").addClass(""waiting"");
  waitingForAnswer = true;
  cmdSentMark = Date.now();
  srvcmd.cmd = parseInt($(""#cmd"").val());
  let selcmd = commands.find(x => x.id == srvcmd.cmd);
  let cmdtext = i18next.t(selcmd.Name);

  srvcmd.devs = [box.id];

  let result = null;
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=makecalls',
      data: JSON.stringify(srvcmd),
      type: 'PUT',
      contentType: ""application/json; charset=utf-8"",
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    hulla.send(i18next.t(""Device control error""));
    return false;
  }

  if (result.success) {
    switch (result.queued) {
      case 0:
        hulla.send(i18next.t(""Command not queued""));
        break;
      case 1:
        hulla.send(`${i18next.t(""Command"")} ""${cmdtext}"" ${i18next.t(""queued"")}`, ""success"");
        break;
      default:
        hulla.send(`${cmdtext} - ${i18next.t(""Command queued for multiple devices"")} (${result.queued})`, ""success"");
        break;
    }
  } else {
    hulla.send(i18next.t(""An error occurred while adding commands to the queue""));
    console.log(result);
  }

  return false;
}

let pbox = null, plines = null;

async function drawBoxInfo() {
  $(""#Phone"").html(number10html(box.Phone));
//Добавление строки ""Серийный номер""	
  for (let fld of [""CustomNum"", ""Name"", ""sn"", ""DimProfile_Name"", ""Station"", ""ControlTime""]) {
    let val = box[fld];
    if (val !== null) {
      if (fld == ""ControlTime"")
        $(""#"" + fld).text(val.substr(0, 5));
      else
        $(""#"" + fld).text(val);
    }
  }
  if (box.Station == null && box.Lines_id) {
    //let pbox =null, plines = null;
    try {
      pbox = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    try {
      plines = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=lines&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }

    if (pbox && plines) {
      let ln = plines.rows.find(x => x.id == box.Lines_id)
      let txt = ln.Num.toString().padStart(2, ""0"") + "". "" + i18next.t(appdata.LinesType.find(x => x.id == ln.Type).Name);

      if (ln.Switch > 0)
        txt += "" "" + i18next.t(appdata.Switches.find(x => x.id == ln.Switch).Name);
      if (ln.Phase > 0)
        txt += "", "" + i18next.t(""Phase"") + "" "" + appdata.Phases.find(x => x.id == ln.Phase).Name;

      $(""#Station"").html(`<a target=""obj${box.Box_id}"" href=""${environment.base_url}/obj?id=${box.Box_id}"" id=""aStation""></a>, ${txt}`);
      $(""#aStation"").text(`${i18next.t(""Box"")} № ${pbox.rows[0].CustomNum}`);
    }
  }
  $(""#Mode"").text(i18next.t(appdata.AutoModes.find(x => x.id == box.Mode).Name));
  $(""#Location"").text(makeAddress(box));

  $(""#shiftdiv"").hide();

  daylyTable();
}


function daylyTable() {
  if (dayly == null)
    return;

  let drw = dayly.rows;
  let aShift = null;
  if (box.PardShift)
    aShift = box.PardShift.split("","");

  let str1 = ""<tr>"", str2 = ""<tr>"", str3 = ""<tr>"";
  for (let i = 0; i < config.pard_maxvalue; i++) {
    let time = '', val = '';
    if (!(drw[i] === undefined)) {

      time = drw[i].Time.substr(0, 5);
      if (box.Type == 2) //lamp
        val = """" + drw[i].DimValue + ""%"";
      else
        val = SwitchStateForMask(drw[i].DimValue);//Антон: отображение команд с учетом маски
    }
    if (aShift) {
      let tt = '';
      if (aShift[i]) {
        let tti = parseInt(aShift[i]);
        let sign = """";
        if (tti < 0)
          sign = ""-"";
        if (tti > 0)
          sign = ""+"";
        tti = Math.abs(tti);
        let min = tti % 60;
        let hr = (tti - min) / 60;

        tt = `${sign}${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(hr)}:${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(min)}`;
      }
      str3 += `<td class=""text-center"">${tt}</td>`;
    }


    str1 += `<td class=""text-center"">${time}</td>`;
    str2 += `<td class=""text-center"">${val}</td>`;
  }
  str1 += ""</tr>"";
  str2 += ""</tr>"";
  $(""#dimDetail"").append(str1);

  if (aShift) {
    str3 += ""</tr>"";
    $(""#dimDetail"").append(str3);
  }
  $(""#dimDetail"").append(str2);
}

let loadfail = 0;

async function dataload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=stlog&limit=64&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
      cache: false
    });
  } catch (error) {
    console.log(""Error: "", error);

    if (error.status == 401) //unautorized
      window.location = environment.base_url + ""/"" + ""?do=login&b="" + encodeURIComponent(window.location);

    loadfail++;
    if (stlog === null)
      $(""#content"").html(""<h2>Log was not loaded</h2>"");
    else if (loadfail > 1) {
      hulla.send(i18next.t(`No connection to the server (${error.statusText})`));
      loadfail = 0;
    }
    return ret;
  }
  loadfail = 0;
  if (stlog == null || stlog.timestamp != result.timestamp) {
    stlog = result;
    ret = true;
  }

  return ret;
}


async function ipload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastip&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastip == null || lastip.timestamp != result.timestamp) {
    lastip = result;
    ret = true;
  }

  return ret;
}

async function meterload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastmeter&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastmeter == null || result.timestamp != lastmeter.timestamp) {
    lastmeter = result;
    ret = true;
  }

  return ret;
}


async function renew() {
  // let nextt = 1000;
  // let isnew = await dataload();
  // if (isnew) {
  //   onlogchane();
  //   nextt = 2000;
  // }
  // setTimeout(renew, nextt);
  if (!liveMode) return;
  let nextt = 1000;
  const isnew = await dataload();
  if (isnew) {
    onlogchane();
    nextt = 2000;
  }
  renewTimer = setTimeout(renew, nextt);
}

async function iprenew() {

  let nextt = 1000;
  let isnew = await ipload();

  if (isnew) {
    if (lastip !== null && lastip.rowCount > 0) {
      let li = lastip.rows[0];
      let m = moment(li.unixtime * 1000);
      $(""#iptime"").text(m.format(""L LT""));
      $(""#ipdata"").text(li.Msg);
      $(""#divstat"").show();
    } else
      $(""#divstat"").hide();

    let isnewmeter = await meterload();
    if (isnewmeter) {
      if (lastmeter !== null && lastmeter.rowCount > 0) {
        let lm = lastmeter.rows[0];

        let dd = new Date(lm.Timestamp + ""Z"");
        let disp = dd.toLocaleDateString(environment.language) + "" "" +
            dd.toLocaleTimeString(environment.language, {hour: ""numeric"", minute: ""numeric""});
        $(""#metertime"").text(disp);
        $(""#meterlink"").attr(""href"", `${environment.base_url}/meterlog?device=${get['id']}`);
//Открытие новой вкладки для ""Показания учета""
        //$(""#meterlink"").attr(""target"", `meterlog${get['id']}`);
        mdt.ajax.reload();
        $(""#meterstat"").show();
      } else
        $(""#meterstat"").hide();
    }

    nextt = 5000;
  }
  setTimeout(iprenew, nextt);
}


async function onlogchane() {
  if (dt != null) {
    dt.ajax.reload();
    $('[data-toggle=""tooltip""]').tooltip('dispose');
    $("".tooltip"").remove();
    $('[data-toggle=""tooltip""]').tooltip();
  }
  let result = null;

  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + ""?do=api&fn=states&Devices_id="" + get['id'],
      type: 'GET',
      dataType: ""json""
    });
  } catch (error) {
    console.error(error);
  }

  if (result !== null && result.rows.length > 0) {
    let state = result.rows[0];
    setSvgstate(state);
    setTextstate(state);
    if (waitingForAnswer) {
      const lastEventTime = stlog?.rows?.[0]?.unixtime
          ? stlog.rows[0].unixtime * 1000
          : state.unixtime * 1000;

      if (lastEventTime > cmdSentMark) {
        $(""#circuit"").removeClass(""waiting"");
        waitingForAnswer = false;
      }
    }
  }
}

function setTextstate(state) {
  let m = moment(state.unixtime * 1000);
  $(""#StateTime"").text(m.format(""LT, L""));
  if (box.Type == 2)
    $(""#SwState"").text("""" + state.State + ""%"");
  else
    $(""#SwState"").text(SwitchStateForMask(state.State));//Антон: отображение команд с учетом маски
  let mode = state.Mode == 4 ? ""Manual"" : ""Auto"";
  mode = i18next.t(mode);
  if (state.Mode == 1)
    mode += "", "" + box.DimProfile_Name;
  $(""#CurrentMode"").text(mode);

  let door = i18next.t(""Closed"");
  if (!state.Door)
    door = '<span class=""text-danger"">' + i18next.t(""Open"") + ""</span>"";
  $(""#DoorStatus"").html(door);


  let sync = i18next.t(""Synced"");
  if (state.Ous)
    sync = '<span class=""text-danger"">' + i18next.t(""Out of sync"") + ""</span>"";
  $(""#SyncStatus"").html(sync);

}

function setSvgstate(state) {

  let onoff = SwitchState(state.State);

  const ruge = ""#ecabab"";
  const salat = ""#abecab"";

  const errorColor = state.Trouble == STATE_ERROR_UNKNOWN ? ruge : ""red"";
  const greenColor = state.Trouble == STATE_ERROR_UNKNOWN ? salat : ""green"";

  //const phasecolor = state.Power?""green"":ruge;
  let aphst = [];
  for (let i = 0; i < 3; i++) {
    let plet = String.fromCharCode(""A"".charCodeAt() + i);
    let phst = state.Power & (1 << i);
    aphst[i] = phst;
    let phasecolor = phst ? greenColor : errorColor;
    $(`#phase_${plet}`).css(""stroke"", phasecolor);
//V11
    $(""#Volt"" + i).text(plet);
    if (state.PhaseV) {
      let aVolt = JSON.parse(state.PhaseV);
      if (aVolt[i] !== null && aVolt[i] > 1)
        $(""#Volt"" + i).text(aVolt[i]);
    }
  }
  //$("".phase"").css(""stroke"",phasecolor);


// КОНТАКТОРЫ
  for (let i = 1; i <= 4; i++) {
    let swtrouble = state.Trouble & (1 << (i - 1)); 	//аварийность контактора
    let altsw = state.Trouble & (1 << (i + 27)); 		//альтернативное включение контактора
    let on = (onoff[i - 1] !== '0'); 					// значение управления on/off && aphst[0]; 20.07.21 - remove Phase A falsification
    // Команда на включение ON
    if (on) {
      $(`.S${i}_on`).attr(""visibility"", ""visible"");		//видимость состояния on
      $(`.S${i}_off`).attr(""visibility"", ""hidden"");		//скрыть состояние off
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      let swc = ""green"";
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник (голубой)
      $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""зеленый""
      $(`#S${i}_tilda`).css(""stroke"", swc);				//цвет контура синусоиды ""зеленый""
      $(`#S${i}_tilda`).css(""fill"", swc);				//цвет заполнения синусоиды ""зеленый""
      $(`.fuse_S${i}`).css(""fill"", swc);					//предохранители под напряжением ""зеленые""
      //Отсутствие фазы «А»
      if (!aphst[0]) {
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость контактора, как ON
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	//видимость состояния onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        swc = salat;
        $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник ""голубой""
        $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
        if (altsw) {											//если альтернативно-включенный контактор
          $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//не видимость состояния onoff
          $(`.S${i}_offon`).attr(""visibility"", ""visible"");	//видимость состояния offon
          $(`#S${i}_rect2`).css(""fill"", ""red"");				// правый прямоугольник
          $(`.fuse_S${i}`).css(""fill"", ""green"");				//предохранители под напряжением ""зеленые""_07_09
        }
      }
      //аварийность контактора
      if (swtrouble) {
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	// видимость контактора, как onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость включенного контактора
        $(`#S${i}_rect1`).css(""fill"", errorColor);			// левый прямоугольник ""красный""
        $(`#S${i}_rect2`).css(""fill"", salat);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
      }
    }
    // Команда на выключение OFF
    else {
      $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//скрыть состояние ON
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      $(`.S${i}_off`).attr(""visibility"", ""visible"");		//показать состояние OFF
      $(`#S${i}_rect2`).css(""fill"", ""white"");			// правый прямоугольник ""белый""
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник голубой
      $(`#S${i}_tilda`).css(""stroke"", ""green"");			//цвет контура синусоиды
      $(`#S${i}_tilda`).css(""fill"", ""green"");			//цвет заполнения синусоиды
      $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители
      // Отсутствие фазы А
      if (!aphst[0]) {
        $(`#S${i}_tilda`).css(""stroke"", ""white"");	//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }	//белый синус
      // Авария контактора
      if (swtrouble) {
        $(`#S${i}_rect1`).css(""fill"", errorColor);		// левый прямоугольник красный
        $(`#S${i}_tilda`).css(""stroke"", ""white"");		//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }		//белый синус
      // Альтернативное включение
      if (altsw) {										//если есть альтернативно-включенный контактор
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");
        $(`.S${i}_offon`).attr(""visibility"", ""visible"");
        $(`#S${i}_rect2`).css(""fill"", ""red"");			// правый прямоугольник красный
        $(`.fuse_S${i}`).css(""green"");				//предохранители под напряжением ""зеленые""_07_09
      }
    }
  }

//ПРЕДОХРАНИТЕЛИ	
  for (let i = 0; i < 3; i++)
    if (!aphst[i])
      $(`.fuse_P${i}`).css(""fill"", ""none"");

//V10__Отображение значений напряжения на линиях/предохранителях	
  let volt = null;
  try {
    volt = JSON.parse(state.Voltage);
  } catch (e) {

  }
//V11	
  $('[id^=""fuse_""]').find(""title"").remove();
  for (let i = 1; i <= 24; i++) {
    let ftrouble = state.Trouble & (1 << (i + 3));
    $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	//V14 	Не видимость знака стрелок
    if (volt) {
      let fVolt = volt[i - 1];
      if (fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""green"");
        let titlestr = fVolt > 1 ? fVolt + ""V"" : ""⚡"";
        let title = document.createElementNS(""http://www.w3.org/2000/svg"", ""title"");
        title.textContent = titlestr;
//V11				
        $(`#fuse_${i}`).append(title);
      } else
        $(`#fuse_${i}_rect`).css(""fill"", ""white"");

//V14 окраска встречки градиентом ""зеленого"" и символ ""стрелки"" 
      if (ftrouble && fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""visible""); 	// видимость знака стрелок
      }

//V14  окраска пониженного напряжения градиентом2 ""зеленого"" 
      if (fVolt < 180 && fVolt > 30) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient2)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	// не видимость знака стрелок
      }

      if (ftrouble && !fVolt)
        $(`#fuse_${i}_rect`).css(""fill"", errorColor);

    }

    //else {
    //if(ftrouble)
    //$(`#fuse_${ i }_rect`).css(""fill"",errorColor);}

  }
}

function SwitchState(num) {
  if (num === null)
    return ""-"";

  num = Math.min(num, 0b1111);

  return num.toString(2).padStart(""4"", ""0""); //For robot
}

//Антон: отображение команд с учетом маски
function SwitchStateForMask(num) {
  if (num === null)
    return ""-"";
  let maskCommand = box ? box.Mask_Command : ''
  if (!maskCommand) {
    num = Math.min(num, 0b1111);

    return num.toString(2).padStart(""4"", ""0"");
  }
  let len = maskCommand ? maskCommand.length : 4;

  let binStr = num.toString(2).padStart(len, ""0"");

  let result = """";
  for (let i = 0; i < len; i++) {
    if (maskCommand[i] === ""1"") {
      result += binStr[i];
    }
  }
  return result;
}

function meterdatatable() {
  mdt = $('#meterlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      let dt = [];
      if (lastmeter !== null)
        dt = lastmeter.rows;
      callback({data: dt});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""columns"": [
      {
        ""data"": ""Tag"",
        render: function (data, type, row) {
          return i18next.t(""msg_meter_"" + data);
        }
      },
      {
        ""data"": ""Value"", className: 'text-right',
        render: function (data, type, row) {
          let tag = appdata.Meter[row.Tag];
          if (tag.type == ""decimal"") {
            let num = parseFloat(data);
            if (type == ""export"")
              return num;
            return Intl.NumberFormat(environment.language, {minimumFractionDigits: 3}).format(num);
          }
          return data;
        }
      },
    ],
  });

  mdt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });

  mdt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
}

function stdatatable() {

  dt = $('#stlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      if (stlog !== null)
        callback({data: stlog.rows});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""scrollY"": ""27rem"",
    ""scrollCollapse"": true,
    ""deferRender"": true,

    ""columns"": [
      {""data"": ""id"", visible: false},
      {
        ""data"": ""Timestamp"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let m = moment(row.unixtime * 1000);
            let td = moment();
            let fs = ""L LT"";
            if (td.isSame(m, 'd'))
              fs = ""LT"";
            let tz = row.tz.charAt(0) == ""-"" ? """" : ""+"" + row.tz;
            let stime = data + "" "" + tz;
            return `<span data-toggle=""tooltip"" title=""${stime}"">${m.format(fs)}</span>`;
          }
          return data;
        }
      },

      {
        ""data"": ""Mode"",
        render: function (data, type, row) {
          let strm = i18next.t(""Unmanaged"");
          if (row.Smart)
            strm = i18next.t(appdata.AutoModes.find(x => x.id == data).Name);

          return strm;
        }
      },

      {
        ""data"": ""State"",
        ""className"": ""text-center"",  //Антон: центровка отображения команд с учетом маски
        render: function (data, type, row) {
          let str = data + ""%"";
          if (row.Type == 1) {//Box
            str = SwitchStateForMask(data);//Антон: отображение команд с учетом маски
          }
          return str;
        }

      },
      {
        ""data"": ""Sip"",
        ""className"": ""text-center text-nowrap"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let ret = """";
            if (row.Power >= 7 || (row.Power && box.Type == 2))
              ret = `<span class=""fa fa-plug text-success"" data-toggle=""tooltip"" title=""${i18next.t('Power Ok')}""></span>&nbsp;`;
            else {
              let title = i18next.t('Power Fail');
              title += "" ("" + reverseString(row.Power.toString(2).padStart(3, ""0"")) + "")"";

              ret = `<span class=""fa fa-plug text-danger"" data-toggle=""tooltip"" title=""${title}""></span>&nbsp;`;
            }

            if (!row.Trouble)
              ret += `<span class=""fa fa-check-circle text-success"" data-toggle=""tooltip"" title=""${i18next.t('Facility is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-exclamation-triangle text-danger"" data-html=""true"" data-toggle=""tooltip"" title=""${errDecode(row.Trouble, box.Type)}""></span>&nbsp;`;


            if (data)
              ret += `<span class=""fa fa-phone-square text-success"" data-toggle=""tooltip"" title=""${i18next.t('SIP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-phone-square text-danger"" data-toggle=""tooltip"" title=""${i18next.t('SIP fault')}""></span>&nbsp;`;

            if (row.Ip)
              ret += `<span class=""fa fa-wifi text-success"" data-toggle=""tooltip"" title=""${i18next.t('IP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-wifi text-danger"" data-toggle=""tooltip"" title=""${i18next.t('IP fault')}""></span>&nbsp;`;

            if (!row.Timeallert)
              ret += `<span class=""fa fa-clock-o text-success"" data-toggle=""tooltip"" title=""${i18next.t('Clock is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-clock-o text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Clock error')}""></span>&nbsp`;

            if (row.Controller)
              ret += `<span class=""fa fa-microchip text-success"" data-toggle=""tooltip"" title=""${i18next.t('Controller is OK')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-microchip text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Controller error')}""></span>&nbsp`;

            if (row.Door)
              ret += `<span class=""fa fa-lock text-success"" data-toggle=""tooltip"" title=""${i18next.t('Case closed')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-unlock text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Case open')}""></span>&nbsp`;

            if (row.Ous)
              ret += `<span class=""fa fa-refresh text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Out of sync')}""></span>`;
            else
              ret += `<span class=""fa fa-refresh text-success"" data-toggle=""tooltip"" title=""${i18next.t('Synced')}""></span>`;

            return ret;

          }
          return data;
        }
      },


      {
        ""data"": ""DimProfileName"",
        ""className"": ""text-nowrap"",
        render: function (data, type, row) {
          let strd = """";
          let title = """"
          if (row.Smart) {

            if (!(row.IncomingLog_id === null)) {
              title = i18next.t(""Notification"");
              if (!(row.Status_name === null))
                strd = escapeQuote(i18next.t(row.Status_Name)) + "" "";
              if (!(row.RemoteIP === null)) {
                strd = i18next.t(""Statistics"") + "" "";
                title = ""IP: "" + row.RemoteIP;
              }
              strd += ""(&lArr;)"";

              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"">${strd}</span>`;
            }
            if (!(row.OutgoingLog_id === null)) {
              strd = ""&rArr;"";
              strd = escapeQuote(i18next.t(row.Command_Name)) + "" ("" + strd + "")"";
              if (row.IP_Name)
                strd = escapeQuote(i18next.t(row.IP_Name)) + "", "" + strd;
              title = i18next.t(""Command"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"" class=""text-${row.Hangupcause == 17 ? 'success' : 'danger'}"">${strd}</span>`;

            }
            if (!(row.DimProfile_id === null)) {
              strd = data;
              title = i18next.t(""Shedule"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}""}"">${strd}</span>`;
            }
          }
          return strd;
        }
      }

    ]

  });

  dt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();

  });

  dt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
  $('#stlog tbody').on('click', 'tr', function () {

    const rowData = dt.row(this).data();
    if (!rowData) return;
    liveMode = false;
    clearTimeout(renewTimer);
    $(""#btnLive"").prop(""disabled"", false);
    setSvgstate(rowData);
    setTextstate(rowData);

    $(this).addClass('table-primary').siblings().removeClass('table-primary');
  });
  $('#btnLive').on('click', () => {
    if (stlog?.rows?.length) {
      if (liveMode) return;
      liveMode = true;
      $(""#btnLive"").prop(""disabled"", true);
      $('#stlog tbody tr').removeClass('table-primary');

      onlogchane();
      renew();
    }
  });

}

async function attachBackground() {
  const $svg = $(""#circuit"").children(""svg"");
  if (!$svg.length || $(""#schemaWrapper"").length) return;

  let typeCode = null;
  if (box.Name?.startsWith(""TL"")) typeCode = ""TL"";
  else if (box.Name?.startsWith(""G"")) typeCode = ""G"";

  let bgSrc = `${environment.base_url}/images/types/${typeCode || ""default""}.png`;

  // картинка ""заказного"" фона мнемосхемы объекта
  $svg.wrap(
      '<div id=""schemaWrapper"" ' +
      '     style=""position:relative; display: flex;\n' +
      '    align-items: flex-end;\n' +
      '    justify-content: center;\n' +
      '    padding-bottom: 75px;margin-top: 5px;"">' +
      ""</div>""
  );
  $(""#schemaWrapper"").prepend(
      `<img id=""schemaBg"" ` +
      `     src=""${bgSrc}"" ` +
      `     style=""position:absolute;top:-10px; bottom: 0;left:-3px;width:100%;` +
      `            height:100%; object-fit: contain;object-position: left;z-index:1;pointer-events:none;"" />`
  );
  $svg.css({position: ""relative"", zIndex: 2, maxWidth: '60%', marginRight: '30%', marginBottom: '-70px'});
}"
9nDgUq1D,Untitled,MastroPino,HTML,Friday 20th of June 2025 04:02:11 AM CDT,"<div class=""fds-alert fds-alert-success"" role=""alert"">
                    <i class=""fa-sharp fa-regular fa-circle-check""></i>
                    <div class=""fds-d-flex fds-flex-column"">
                      <p class=""fds-fwmedium"">Congratulazioni</p>
                      <p>
                        <small
                          >Hai completato l'acquisto del dominio e dei
                          servizi.</small
                        >
                      </p>
                    </div>
                  </div>
                  <div class=""fds-d-flex fds-flex-column fds-gap-3"">
                    <h5>Riepilogo acquisto</h5>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Tipologia</span
                        >
                        <p class=""fds-fs-4"">Flazio Versione Pro</p>
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Dominio</span
                        >
                        <p class=""fds-fs-4"">andreacalabro.it</p>
                      </div>
                    </div>
                    <div class=""fds-d-flex fds-flex-column"">
                      <span
                        class=""fds-text-uppercase fds-text-body-secondary fds-small""
                        >Servizi speciali</span
                      >
                      <p class=""fds-fs-4"">GDPR & Privacy</p>
                    </div>
                    <hr class=""fds"" />
                    <h5>Informazioni di pagamento</h5>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Tipologia</span
                        >
                        <p class=""fds-fs-4"">Abbonamento annuale</p>
                        <span class=""fds-fs-xs fds-text-body-secondary""
                          >12 mesi in un’unica soluzione</span
                        >
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Metodo di pagamento</span
                        >
                        <p class=""fds-fs-4"">Carta di credito</p>
                        <span class=""fds-fs-xs fds-text-body-secondary""
                          >4563*******5698</span
                        >
                      </div>
                    </div>
                    <hr class=""fds"" />
                    <h5>Dettagli di fatturazione</h5>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Nome</span
                        >
                        <p class=""fds-fs-4"">Leonardo</p>
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Cognome</span
                        >
                        <p class=""fds-fs-4"">Da Vinci</p>
                      </div>
                    </div>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Telefono</span
                        >
                        <p class=""fds-fs-4"">+39 000 1234567</p>
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Email</span
                        >
                        <p class=""fds-fs-4"">l.davinci@flazio.it</p>
                      </div>
                    </div>
                    <div class=""fds-d-flex fds-flex-column"">
                      <span
                        class=""fds-text-uppercase fds-text-body-secondary fds-small""
                        >Codice fiscale</span
                      >
                      <p class=""fds-fs-4"">DVNLRD85E05H501G</p>
                    </div>
                    <div id=""summaryDescription"">
                      <div class=""fds-d-flex fds-flex-column fds-gap-3"">
                        <div class=""fds-row"">
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >Città</span
                            >
                            <p class=""fds-fs-4"">Roma</p>
                          </div>
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >CAP</span
                            >
                            <p class=""fds-fs-4"">00100</p>
                          </div>
                        </div>
                        <div class=""fds-row"">
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >Paese</span
                            >
                            <p class=""fds-fs-4"">Italia</p>
                          </div>
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >Provincia</span
                            >
                            <p class=""fds-fs-4"">Roma</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <a class=""fds-link fsd-link-sm"" id=""toggleSummarySection"">
                      Scopri di più
                    </a>
                  </div>"
7vzxeXax,Signal Monitor rev_02,pleasedontcode,Arduino,Friday 20th of June 2025 03:54:00 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Signal Monitor
	- Source Code compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:52:10

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a system that reads digital inputs from */
	/* the PCF8575 I/O expander and analog signals from */
	/* the ADS1115 ADC, then processes and displays the */
	/* data on the Arduino Nano 33 BLE. */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <PCF8575.h>
#include <DFRobot_ADS1115.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t ioexpander_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t ioexpander_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t ioexpander_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/****** LIBRARY CLASS INSTANCES *****/
PCF8575 pcf8575(ioexpander_PCF8575_I2C_SLAVE_ADDRESS, &Wire);
DFRobot_ADS1115 ads(&Wire);

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial);

  // Initialize I2C communication
  Wire.begin();

  // Initialize PCF8575 I/O expander
  if (pcf8575.begin()) {
    Serial.println(""PCF8575 initialized successfully"");
  } else {
    Serial.println(""PCF8575 initialization failed"");
  }

  // Initialize ADS1115 ADC
  ads.setAddr_ADS1115(adc_ADS1115_I2C_SLAVE_ADDRESS);
  ads.init();

  if (ads.checkADS1115()) {
    Serial.println(""ADS1115 initialized successfully"");
  } else {
    Serial.println(""ADS1115 initialization failed"");
  }
}

void loop(void)
{
  // Read digital inputs from PCF8575
  uint16_t digitalInputs = pcf8575.read16();

  // Read analog voltage from ADS1115 channel 0
  uint16_t adcValue = ads.readVoltage(0);
  float voltage = adcValue * 0.1875 / 1000; // Convert to millivolts

  // Display the digital inputs
  Serial.print(""Digital Inputs (PCF8575): 0x"");
  Serial.println(digitalInputs, HEX);

  // Display the analog voltage
  Serial.print(""Analog Voltage (ADS1115 CH0): "");
  Serial.print(voltage, 3);
  Serial.println("" V"");

  delay(1000); // Wait for 1 second before next reading
}

/* END CODE */"
rgisfKST,Two Words rev_01,pleasedontcode,Arduino,Friday 20th of June 2025 03:51:40 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Two Words
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:50:20

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a system that reads digital inputs from */
	/* the PCF8575 I/O expander and analog signals from */
	/* the ADS1115 ADC, then processes and displays the */
	/* data on the Arduino Nano 33 BLE. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <PCF8575.h>
#include <DFRobot_ADS1115.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t ioexpander_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t ioexpander_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t ioexpander_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/****** LIBRARY CLASS INSTANCES *****/
PCF8575 pcf8575(ioexpander_PCF8575_I2C_SLAVE_ADDRESS, &Wire);
DFRobot_ADS1115 ads(&Wire);

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial);

  // Initialize I2C communication
  Wire.begin();

  // Initialize PCF8575 I/O expander
  if (pcf8575.begin()) {
    Serial.println(""PCF8575 initialized successfully"");
  } else {
    Serial.println(""PCF8575 initialization failed"");
  }

  // Initialize ADS1115 ADC
  ads.setAddr_ADS1115(adc_ADS1115_I2C_SLAVE_ADDRESS);
  ads.init();

  if (ads.checkADS1115()) {
    Serial.println(""ADS1115 initialized successfully"");
  } else {
    Serial.println(""ADS1115 initialization failed"");
  }
}

void loop(void)
{
  // Read digital inputs from PCF8575
  uint16_t digitalInputs = pcf8575.read16();

  // Read analog voltage from ADS1115 channel 0
  uint16_t adcValue = ads.readVoltage(0);
  float voltage = adcValue * 0.1875 / 1000; // Convert to millivolts

  // Display the digital inputs
  Serial.print(""Digital Inputs (PCF8575): 0x"");
  Serial.println(digitalInputs, HEX);

  // Display the analog voltage
  Serial.print(""Analog Voltage (ADS1115 CH0): "");
  Serial.print(voltage, 3);
  Serial.println("" V"");

  delay(1000); // Wait for 1 second before next reading
}

/* END CODE */"
ncNJy5KY,Synthetic Humans,subink,JSON,Friday 20th of June 2025 03:43:13 AM CDT,"{
    ""last_node_id"": 146,
    ""last_link_id"": 240,
    ""nodes"": [
        {
            ""id"": 131,
            ""type"": ""BasicGuider"",
            ""pos"": [
                2178.33447265625,
                -101.94921875
            ],
            ""size"": [
                260,
                60
            ],
            ""flags"": {
                ""collapsed"": false
            },
            ""order"": 0,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""conditioning"",
                    ""label"": ""conditioning"",
                    ""type"": ""CONDITIONING"",
                    ""link"": null,
                    ""slot_index"": 1
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""GUIDER"",
                    ""label"": ""GUIDER"",
                    ""type"": ""GUIDER"",
                    ""shape"": 3,
                    ""links"": [
                        202
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicGuider""
            }
        },
        {
            ""id"": 25,
            ""type"": ""RandomNoise"",
            ""pos"": [
                -159,
                429
            ],
            ""size"": [
                260,
                82
            ],
            ""flags"": {},
            ""order"": 1,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""NOISE"",
                    ""label"": ""NOISE"",
                    ""type"": ""NOISE"",
                    ""shape"": 3,
                    ""links"": [
                        214
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""RandomNoise""
            },
            ""widgets_values"": [
                41861050613349,
                ""randomize""
            ]
        },
        {
            ""id"": 140,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                -137.78257751464844,
                570.9679565429688
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 14,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""VAE"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#FF6E6E"",
                    ""link"": 215
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 10,
            ""type"": ""VAELoader"",
            ""pos"": [
                -129,
                638
            ],
            ""size"": [
                230,
                60
            ],
            ""flags"": {},
            ""order"": 2,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""VAE"",
                    ""label"": ""VAE"",
                    ""type"": ""VAE"",
                    ""shape"": 3,
                    ""links"": [
                        215
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""VAELoader""
            },
            ""widgets_values"": [
                ""ae.sft""
            ]
        },
        {
            ""id"": 8,
            ""type"": ""VAEDecode"",
            ""pos"": [
                1710,
                180
            ],
            ""size"": [
                140,
                50
            ],
            ""flags"": {},
            ""order"": 24,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""samples"",
                    ""label"": ""samples"",
                    ""type"": ""LATENT"",
                    ""link"": 24
                },
                {
                    ""name"": ""vae"",
                    ""label"": ""vae"",
                    ""type"": ""VAE"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""IMAGE"",
                    ""label"": ""IMAGE"",
                    ""type"": ""IMAGE"",
                    ""links"": [
                        170
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""VAEDecode""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 139,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                -142.78257751464844,
                360.96795654296875
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 13,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""NOISE"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#B0B0B0"",
                    ""link"": 214
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 90,
            ""type"": ""EmptyLatentImage"",
            ""pos"": [
                1300.4976806640625,
                305.75604248046875
            ],
            ""size"": [
                265.3262939453125,
                107.69342041015625
            ],
            ""flags"": {},
            ""order"": 3,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""LATENT"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": [
                        126
                    ]
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""EmptyLatentImage""
            },
            ""widgets_values"": [
                1024,
                1024,
                1
            ]
        },
        {
            ""id"": 13,
            ""type"": ""SamplerCustomAdvanced"",
            ""pos"": [
                1610,
                270
            ],
            ""size"": [
                240,
                120
            ],
            ""flags"": {},
            ""order"": 22,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""noise"",
                    ""label"": ""noise"",
                    ""type"": ""NOISE"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""guider"",
                    ""label"": ""guider"",
                    ""type"": ""GUIDER"",
                    ""link"": 30,
                    ""slot_index"": 1
                },
                {
                    ""name"": ""sampler"",
                    ""label"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 173,
                    ""slot_index"": 2
                },
                {
                    ""name"": ""sigmas"",
                    ""label"": ""sigmas"",
                    ""type"": ""SIGMAS"",
                    ""link"": 20,
                    ""slot_index"": 3
                },
                {
                    ""name"": ""latent_image"",
                    ""label"": ""latent_image"",
                    ""type"": ""LATENT"",
                    ""link"": 126,
                    ""slot_index"": 4
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""output"",
                    ""label"": ""output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": [
                        24,
                        219
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""denoised_output"",
                    ""label"": ""denoised_output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": null
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""SamplerCustomAdvanced""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 112,
            ""type"": ""PreviewImage"",
            ""pos"": [
                1984.4234619140625,
                357.3873291015625
            ],
            ""size"": [
                592.130126953125,
                687.773193359375
            ],
            ""flags"": {},
            ""order"": 26,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""images"",
                    ""type"": ""IMAGE"",
                    ""link"": 170
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""PreviewImage""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 136,
            ""type"": ""PreviewImage"",
            ""pos"": [
                2597.8125,
                364.5653381347656
            ],
            ""size"": [
                592.130126953125,
                687.773193359375
            ],
            ""flags"": {},
            ""order"": 29,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""images"",
                    ""type"": ""IMAGE"",
                    ""link"": 211
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""PreviewImage""
            }
        },
        {
            ""id"": 137,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                249.0714569091797,
                26.00542640686035
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 20,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#B39DDB"",
                    ""link"": 223
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 138,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                253.12149047851562,
                -41.9245719909668
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 21,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""CLIP"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#FFD500"",
                    ""link"": 224
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 12,
            ""type"": ""UNETLoader"",
            ""pos"": [
                -222.4615020751953,
                60.45845413208008
            ],
            ""size"": [
                320,
                82
            ],
            ""flags"": {},
            ""order"": 4,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""label"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""shape"": 3,
                    ""links"": [
                        221
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""UNETLoader""
            },
            ""widgets_values"": [
                ""flux1-dev.sft"",
                ""default""
            ]
        },
        {
            ""id"": 11,
            ""type"": ""DualCLIPLoader"",
            ""pos"": [
                -221.47630310058594,
                186.23361206054688
            ],
            ""size"": [
                320,
                122
            ],
            ""flags"": {},
            ""order"": 5,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""CLIP"",
                    ""label"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""shape"": 3,
                    ""links"": [
                        222
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""DualCLIPLoader""
            },
            ""widgets_values"": [
                ""t5xxl_fp8_e4m3fn.safetensors"",
                ""clip_l.safetensors"",
                ""flux"",
                ""default""
            ]
        },
        {
            ""id"": 101,
            ""type"": ""Power Lora Loader (rgthree)"",
            ""pos"": [
                148.77658081054688,
                96.30711364746094
            ],
            ""size"": [
                340.20001220703125,
                262
            ],
            ""flags"": {},
            ""order"": 15,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""type"": ""MODEL"",
                    ""dir"": 3,
                    ""link"": 221
                },
                {
                    ""name"": ""clip"",
                    ""type"": ""CLIP"",
                    ""dir"": 3,
                    ""link"": 222
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""dir"": 4,
                    ""shape"": 3,
                    ""links"": [
                        223
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""dir"": 4,
                    ""shape"": 3,
                    ""links"": [
                        224
                    ],
                    ""slot_index"": 1
                }
            ],
            ""properties"": {
                ""cnr_id"": ""rgthree-comfy"",
                ""ver"": ""32142fe476878a354dda6e2d4b5ea98960de3ced"",
                ""Show Strengths"": ""Single Strength""
            },
            ""widgets_values"": [
                null,
                {
                    ""type"": ""PowerLoraLoaderHeaderWidget""
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/R3alism.safetensors"",
                    ""strength"": 0.8,
                    ""strengthTwo"": null
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/Bonafida.safetensors"",
                    ""strength"": 0.8,
                    ""strengthTwo"": null
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/metal.safetensors"",
                    ""strength"": 0.65,
                    ""strengthTwo"": null
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/kodak.safetensors"",
                    ""strength"": 0.7,
                    ""strengthTwo"": null
                },
                null,
                """"
            ]
        },
        {
            ""id"": 17,
            ""type"": ""BasicScheduler"",
            ""pos"": [
                1310.4976806640625,
                612.7559204101562
            ],
            ""size"": [
                260,
                110
            ],
            ""flags"": {},
            ""order"": 6,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SIGMAS"",
                    ""label"": ""SIGMAS"",
                    ""type"": ""SIGMAS"",
                    ""shape"": 3,
                    ""links"": [
                        20
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicScheduler""
            },
            ""widgets_values"": [
                ""linear_quadratic"",
                35,
                1
            ]
        },
        {
            ""id"": 16,
            ""type"": ""KSamplerSelect"",
            ""pos"": [
                1303.7501220703125,
                75.37157440185547
            ],
            ""size"": [
                260,
                60
            ],
            ""flags"": {},
            ""order"": 7,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""label"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""shape"": 3,
                    ""links"": [
                        216
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""KSamplerSelect""
            },
            ""widgets_values"": [
                ""res_multistep""
            ]
        },
        {
            ""id"": 114,
            ""type"": ""DetailDaemonSamplerNode"",
            ""pos"": [
                1616.2132568359375,
                432.0816345214844
            ],
            ""size"": [
                315,
                274
            ],
            ""flags"": {},
            ""order"": 17,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 172
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        173
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""DetailDaemonSamplerNode""
            },
            ""widgets_values"": [
                0.04,
                0.25,
                1,
                0.75,
                1,
                0,
                0,
                0,
                true,
                0
            ]
        },
        {
            ""id"": 113,
            ""type"": ""LyingSigmaSampler"",
            ""pos"": [
                1256.05810546875,
                464.379150390625
            ],
            ""size"": [
                315,
                106
            ],
            ""flags"": {},
            ""order"": 8,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        172
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""LyingSigmaSampler""
            },
            ""widgets_values"": [
                -0.05,
                0.2,
                0.8
            ]
        },
        {
            ""id"": 144,
            ""type"": ""DetailDaemonSamplerNode"",
            ""pos"": [
                2491.17333984375,
                -208.72837829589844
            ],
            ""size"": [
                315,
                274
            ],
            ""flags"": {},
            ""order"": 19,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 225
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        226
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""DetailDaemonSamplerNode""
            },
            ""widgets_values"": [
                0.01,
                0.25,
                0.5,
                0.5,
                1,
                0,
                0,
                0,
                true,
                0
            ]
        },
        {
            ""id"": 6,
            ""type"": ""CLIPTextEncode"",
            ""pos"": [
                582.4439697265625,
                340.8319396972656
            ],
            ""size"": [
                490,
                250
            ],
            ""flags"": {
                ""collapsed"": false
            },
            ""order"": 9,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""clip"",
                    ""label"": ""clip"",
                    ""type"": ""CLIP"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""label"": ""CONDITIONING"",
                    ""type"": ""CONDITIONING"",
                    ""links"": [
                        86
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""CLIPTextEncode""
            },
            ""widgets_values"": [
                ""studio portrait photograph of a woman, she is wearing a white tech jacket with black detailing and japanese lettering, she is wearing large glasses with translucent white frame and iridescent tinted glasses, she has dark afro hair with golden beads in her hair, around her neck is a chrome metallic snake with shiny scales twisted around her with its head looking into the camera from her side, the snake has emerald eyes, grainy film photography style against a light background, kodak, high quality, intricate details\n""
            ],
            ""color"": ""#232"",
            ""bgcolor"": ""#353""
        },
        {
            ""id"": 141,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                1320.967529296875,
                4.339563369750977
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 16,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#ECB4B4"",
                    ""link"": 216
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 146,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                822.7891235351562,
                167.58108520507812
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 23,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#FFA931"",
                    ""link"": 227
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 60,
            ""type"": ""FluxGuidance"",
            ""pos"": [
                852.4888305664062,
                238.14451599121094
            ],
            ""size"": [
                211.60000610351562,
                60
            ],
            ""flags"": {},
            ""order"": 18,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""conditioning"",
                    ""label"": ""conditioning"",
                    ""type"": ""CONDITIONING"",
                    ""link"": 86
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""label"": ""CONDITIONING"",
                    ""type"": ""CONDITIONING"",
                    ""shape"": 3,
                    ""links"": [
                        227
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""FluxGuidance""
            },
            ""widgets_values"": [
                4.5
            ],
            ""color"": ""#323"",
            ""bgcolor"": ""#535""
        },
        {
            ""id"": 22,
            ""type"": ""BasicGuider"",
            ""pos"": [
                1305,
                200
            ],
            ""size"": [
                260,
                60
            ],
            ""flags"": {
                ""collapsed"": false
            },
            ""order"": 10,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""conditioning"",
                    ""label"": ""conditioning"",
                    ""type"": ""CONDITIONING"",
                    ""link"": null,
                    ""slot_index"": 1
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""GUIDER"",
                    ""label"": ""GUIDER"",
                    ""type"": ""GUIDER"",
                    ""shape"": 3,
                    ""links"": [
                        30
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicGuider""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 133,
            ""type"": ""BasicScheduler"",
            ""pos"": [
                2181.153564453125,
                2.0044729709625244
            ],
            ""size"": [
                260,
                110
            ],
            ""flags"": {},
            ""order"": 11,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SIGMAS"",
                    ""label"": ""SIGMAS"",
                    ""type"": ""SIGMAS"",
                    ""shape"": 3,
                    ""links"": [
                        203
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicScheduler""
            },
            ""widgets_values"": [
                ""linear_quadratic"",
                35,
                1
            ]
        },
        {
            ""id"": 135,
            ""type"": ""VAEDecode"",
            ""pos"": [
                2600.99462890625,
                271.2347106933594
            ],
            ""size"": [
                140,
                50
            ],
            ""flags"": {},
            ""order"": 28,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""samples"",
                    ""label"": ""samples"",
                    ""type"": ""LATENT"",
                    ""link"": 205
                },
                {
                    ""name"": ""vae"",
                    ""label"": ""vae"",
                    ""type"": ""VAE"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""IMAGE"",
                    ""label"": ""IMAGE"",
                    ""type"": ""IMAGE"",
                    ""links"": [
                        211
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""VAEDecode""
            }
        },
        {
            ""id"": 129,
            ""type"": ""SamplerCustomAdvanced"",
            ""pos"": [
                2498.668212890625,
                108.24175262451172
            ],
            ""size"": [
                240,
                120
            ],
            ""flags"": {},
            ""order"": 27,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""noise"",
                    ""label"": ""noise"",
                    ""type"": ""NOISE"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""guider"",
                    ""label"": ""guider"",
                    ""type"": ""GUIDER"",
                    ""link"": 202,
                    ""slot_index"": 1
                },
                {
                    ""name"": ""sampler"",
                    ""label"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 226,
                    ""slot_index"": 2
                },
                {
                    ""name"": ""sigmas"",
                    ""label"": ""sigmas"",
                    ""type"": ""SIGMAS"",
                    ""link"": 203,
                    ""slot_index"": 3
                },
                {
                    ""name"": ""latent_image"",
                    ""label"": ""latent_image"",
                    ""type"": ""LATENT"",
                    ""link"": 220,
                    ""slot_index"": 4
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""output"",
                    ""label"": ""output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": [
                        205
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""denoised_output"",
                    ""label"": ""denoised_output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": null
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""SamplerCustomAdvanced""
            }
        },
        {
            ""id"": 145,
            ""type"": ""LyingSigmaSampler"",
            ""pos"": [
                2121.567626953125,
                -252.78195190429688
            ],
            ""size"": [
                315,
                106
            ],
            ""flags"": {},
            ""order"": 12,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        225
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""LyingSigmaSampler""
            },
            ""widgets_values"": [
                -0.05,
                0.2,
                0.8
            ]
        },
        {
            ""id"": 143,
            ""type"": ""InjectLatentNoise+"",
            ""pos"": [
                2129.62255859375,
                157.9127197265625
            ],
            ""size"": [
                315,
                150
            ],
            ""flags"": {},
            ""order"": 25,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""latent"",
                    ""type"": ""LATENT"",
                    ""link"": 219
                },
                {
                    ""name"": ""mask"",
                    ""type"": ""MASK"",
                    ""shape"": 7,
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""LATENT"",
                    ""type"": ""LATENT"",
                    ""links"": [
                        220
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui_essentials"",
                ""ver"": ""33ff89fd354d8ec3ab6affb605a79a931b445d99"",
                ""Node name for S&R"": ""InjectLatentNoise+""
            },
            ""widgets_values"": [
                789954861134535,
                ""randomize"",
                1.05,
                ""false""
            ]
        }
    ],
    ""links"": [
        [
            20,
            17,
            0,
            13,
            3,
            ""SIGMAS""
        ],
        [
            24,
            13,
            0,
            8,
            0,
            ""LATENT""
        ],
        [
            30,
            22,
            0,
            13,
            1,
            ""GUIDER""
        ],
        [
            86,
            6,
            0,
            60,
            0,
            ""CONDITIONING""
        ],
        [
            126,
            90,
            0,
            13,
            4,
            ""LATENT""
        ],
        [
            170,
            8,
            0,
            112,
            0,
            ""IMAGE""
        ],
        [
            172,
            113,
            0,
            114,
            0,
            ""SAMPLER""
        ],
        [
            173,
            114,
            0,
            13,
            2,
            ""SAMPLER""
        ],
        [
            202,
            131,
            0,
            129,
            1,
            ""GUIDER""
        ],
        [
            203,
            133,
            0,
            129,
            3,
            ""SIGMAS""
        ],
        [
            205,
            129,
            0,
            135,
            0,
            ""LATENT""
        ],
        [
            211,
            135,
            0,
            136,
            0,
            ""IMAGE""
        ],
        [
            214,
            25,
            0,
            139,
            0,
            ""NOISE""
        ],
        [
            215,
            10,
            0,
            140,
            0,
            ""VAE""
        ],
        [
            216,
            16,
            0,
            141,
            0,
            ""SAMPLER""
        ],
        [
            219,
            13,
            0,
            143,
            0,
            ""LATENT""
        ],
        [
            220,
            143,
            0,
            129,
            4,
            ""LATENT""
        ],
        [
            221,
            12,
            0,
            101,
            0,
            ""MODEL""
        ],
        [
            222,
            11,
            0,
            101,
            1,
            ""CLIP""
        ],
        [
            223,
            101,
            0,
            137,
            0,
            ""MODEL""
        ],
        [
            224,
            101,
            1,
            138,
            0,
            ""CLIP""
        ],
        [
            225,
            145,
            0,
            144,
            0,
            ""SAMPLER""
        ],
        [
            226,
            144,
            0,
            129,
            2,
            ""SAMPLER""
        ],
        [
            227,
            60,
            0,
            146,
            0,
            ""CONDITIONING""
        ],
        [
            228,
            101,
            0,
            131,
            0,
            ""MODEL""
        ],
        [
            229,
            60,
            0,
            131,
            1,
            ""CONDITIONING""
        ],
        [
            230,
            10,
            0,
            8,
            1,
            ""VAE""
        ],
        [
            231,
            25,
            0,
            13,
            0,
            ""NOISE""
        ],
        [
            232,
            101,
            0,
            17,
            0,
            ""MODEL""
        ],
        [
            233,
            16,
            0,
            113,
            0,
            ""SAMPLER""
        ],
        [
            234,
            101,
            1,
            6,
            0,
            ""CLIP""
        ],
        [
            235,
            101,
            0,
            22,
            0,
            ""MODEL""
        ],
        [
            236,
            60,
            0,
            22,
            1,
            ""CONDITIONING""
        ],
        [
            237,
            101,
            0,
            133,
            0,
            ""MODEL""
        ],
        [
            238,
            10,
            0,
            135,
            1,
            ""VAE""
        ],
        [
            239,
            25,
            0,
            129,
            0,
            ""NOISE""
        ],
        [
            240,
            16,
            0,
            145,
            0,
            ""SAMPLER""
        ]
    ],
    ""groups"": [],
    ""config"": {},
    ""extra"": {
        ""ds"": {
            ""scale"": 1.1,
            ""offset"": [
                -1215.7113771019087,
                -242.48489677749086
            ]
        },
        ""ue_links"": [
            {
                ""downstream"": 131,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 131,
                ""downstream_slot"": 1,
                ""upstream"": ""60"",
                ""upstream_slot"": 0,
                ""controller"": 146,
                ""type"": ""CONDITIONING""
            },
            {
                ""downstream"": 8,
                ""downstream_slot"": 1,
                ""upstream"": ""10"",
                ""upstream_slot"": 0,
                ""controller"": 140,
                ""type"": ""VAE""
            },
            {
                ""downstream"": 13,
                ""downstream_slot"": 0,
                ""upstream"": ""25"",
                ""upstream_slot"": 0,
                ""controller"": 139,
                ""type"": ""NOISE""
            },
            {
                ""downstream"": 17,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 113,
                ""downstream_slot"": 0,
                ""upstream"": ""16"",
                ""upstream_slot"": 0,
                ""controller"": 141,
                ""type"": ""SAMPLER""
            },
            {
                ""downstream"": 6,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 1,
                ""controller"": 138,
                ""type"": ""CLIP""
            },
            {
                ""downstream"": 22,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 22,
                ""downstream_slot"": 1,
                ""upstream"": ""60"",
                ""upstream_slot"": 0,
                ""controller"": 146,
                ""type"": ""CONDITIONING""
            },
            {
                ""downstream"": 133,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 135,
                ""downstream_slot"": 1,
                ""upstream"": ""10"",
                ""upstream_slot"": 0,
                ""controller"": 140,
                ""type"": ""VAE""
            },
            {
                ""downstream"": 129,
                ""downstream_slot"": 0,
                ""upstream"": ""25"",
                ""upstream_slot"": 0,
                ""controller"": 139,
                ""type"": ""NOISE""
            },
            {
                ""downstream"": 145,
                ""downstream_slot"": 0,
                ""upstream"": ""16"",
                ""upstream_slot"": 0,
                ""controller"": 141,
                ""type"": ""SAMPLER""
            }
        ],
        ""VHS_latentpreview"": false,
        ""VHS_latentpreviewrate"": 0,
        ""VHS_MetadataImage"": true,
        ""VHS_KeepIntermediate"": true
    },
    ""version"": 0.4,
    ""seed_widgets"": {
        ""25"": 0,
        ""143"": 0
    }
}"
WLfzEYna,Periodic Ethernet Initialization and ADC Reading rev_06,pleasedontcode,Arduino,Friday 20th of June 2025 03:10:27 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Periodic Ethernet Initialization and ADC Reading
	- Source Code compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:03:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Monitor and read all channels connected via the */
	/* PCF8575 I2C expander periodically, ensuring real- */
	/* time data acquisition from the digital inputs. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Wire.h>
#include <Ethernet2.h>    //https://github.com/adafruit/Ethernet2
#include <PCF8575.h>      //https://github.com/RobTillaart/PCF8575.git
#include <DFRobot_ADS1115.h> //https://github.com/DFRobot/DFRobot_ADS1115

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void initializeEthernet();
void readAllChannels();

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t pdf_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t pdf_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t pdf_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** LIBRARY CLASS INSTANCES *****/
// Instantiate ADS1115 with Wire reference
DFRobot_ADS1115 ads1115(&Wire); // ADS1115 ADC

// Instantiate Ethernet object
// Note: Do NOT instantiate Ethernet object here, as it is provided by the Ethernet2 library

// Instantiate PCF8575 expander
PCF8575 pcf8575(pdf_PCF8575_I2C_SLAVE_ADDRESS); // PCF8575 expander

unsigned long previousMillis = 0;
const long interval = 1000; // 1 second interval for periodic reading

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  
  // Initialize Ethernet
  initializeEthernet();

  // Initialize pins
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  // start the SPI library:
  SPI.begin();

  // Initialize I2C
  Wire.begin();

  // Initialize PCF8575
  pcf8575.begin();

  // Initialize ADS1115
  ads1115.init(); // Initialize ADS1115 with default settings
}

void loop(void)
{
  // Maintain Ethernet connection
  Ethernet.maintain();

  // Periodically read all channels
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    readAllChannels();
  }

  // Update outputs
  updateOutputs();
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

void initializeEthernet()
{
  // Use MAC address for Ethernet.begin()
  uint8_t mac[6] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
  int result = Ethernet.begin(mac);
  if (result == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    // fallback or error handling
  } else {
    Serial.print(""Ethernet IP Address: "");
    Serial.println(Ethernet.localIP());
  }
}

void readAllChannels()
{
  // Read all digital inputs from PCF8575
  uint16_t inputStates = pcf8575.read16();
  Serial.print(""PCF8575 Inputs: "");
  Serial.println(inputStates, BIN);
}
"
xV663a7Y,Network Operations rev_05,pleasedontcode,Arduino,Friday 20th of June 2025 03:03:17 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Operations
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:02:48

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Monitor and read all channels connected via the */
	/* PCF8575 I2C expander periodically, ensuring real- */
	/* time data acquisition from the digital inputs. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Wire.h>
#include <Ethernet2.h>    //https://github.com/adafruit/Ethernet2
#include <PCF8575.h>      //https://github.com/RobTillaart/PCF8575.git
#include <DFRobot_ADS1115.h> //https://github.com/DFRobot/DFRobot_ADS1115

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void initializeEthernet();
void readAllChannels();

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t pdf_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t pdf_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t pdf_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** LIBRARY CLASS INSTANCES *****/
EthernetClass Ethernet; // Ethernet object
PCF8575 pcf8575(pdf_PCF8575_I2C_SLAVE_ADDRESS); // PCF8575 expander
// Add ADS1115 object if needed
DFRobot_ADS1115 ads1115; // ADS1115 ADC

unsigned long previousMillis = 0;
const long interval = 1000; // 1 second interval for periodic reading

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  
  // Initialize Ethernet
  initializeEthernet();

  // Initialize pins
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  // start the SPI library:
  SPI.begin();

  // Initialize I2C
  Wire.begin();

  // Initialize PCF8575
  pcf8575.begin();

  // Initialize ADS1115 if needed
  // ads1115.initialize(); // Uncomment if ADS1115 is used

}

void loop(void)
{
  // Maintain Ethernet connection
  Ethernet.maintain();

  // Periodically read all channels
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    readAllChannels();
  }

  // Update outputs
  updateOutputs();
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

void initializeEthernet()
{
  // Use DHCP to get IP address
  int result = Ethernet.begin();
  if (result == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    // fallback or error handling
  } else {
    Serial.print(""Ethernet IP Address: "");
    Serial.println(Ethernet.localIP());
  }
}

void readAllChannels()
{
  // Read all digital inputs from PCF8575
  uint16_t inputStates = pcf8575.read16();
  Serial.print(""PCF8575 Inputs: "");
  Serial.println(inputStates, BIN);
}
"
zDMcSVBm,Network Communication rev_04,pleasedontcode,Arduino,Friday 20th of June 2025 03:00:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Communication
	- Source Code compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 07:57:53

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Ethernet2.h> //https://github.com/adafruit/Ethernet2

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** Ethernet connection variables *****/
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // MAC address
IPAddress ip(192, 168, 0, 177); // Static IP address
const char* server = ""www.google.com""; // Server to connect
EthernetClient client;

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // Initialize the Ethernet reset pin
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  digitalWrite(ethernet_W5500_RST_PIN_D2, HIGH); // Keep W5500 out of reset

  // Initialize SPI pins
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  SPI.begin();

  // Detect and initialize Ethernet connection
  Serial.println(""Initializing Ethernet..."");
  if (Ethernet.begin(mac) == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    Serial.println(""Trying static IP..."");
    Ethernet.begin(mac, ip);
  }
  delay(1000); // Allow Ethernet hardware to initialize

  // Retrieve and display the assigned IP address
  IPAddress localIP = Ethernet.localIP();
  Serial.print(""Ethernet IP Address: "");
  Serial.println(localIP);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs();

  // Optional: Add code to check connection or send data
  // For demonstration, attempt to connect to server periodically
  static unsigned long lastAttempt = 0;
  if (millis() - lastAttempt > 10000) { // every 10 seconds
    lastAttempt = millis();
    Serial.println(""Connecting to server..."");
    if (client.connect(server, 80)) {
      Serial.println(""Connected to server"");
      client.println(""GET / HTTP/1.1"");
      client.println(""Host: www.google.com"");
      client.println(""Connection: close"");
      client.println();
    } else {
      Serial.println(""Connection to server failed"");
    }
  }

  // Read server response
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
  }

  // Check if server disconnected
  if (!client.connected()) {
    Serial.println();
    Serial.println(""Disconnecting."");
    client.stop();
  }
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

/* END CODE */"
aS12xZ1p,Network Communication rev_03,pleasedontcode,Arduino,Friday 20th of June 2025 02:50:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Communication
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 07:50:07

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Ethernet2.h> //https://github.com/adafruit/Ethernet2

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EthernetClass Ethernet;

/****** Ethernet connection variables *****/
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // MAC address
IPAddress ip(192, 168, 0, 177); // Static IP address
const char* server = ""www.google.com""; // Server to connect
EthernetClient client;

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // Initialize the Ethernet reset pin
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  digitalWrite(ethernet_W5500_RST_PIN_D2, HIGH); // Keep W5500 out of reset

  // Initialize SPI pins
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  SPI.begin();

  // Detect and initialize Ethernet connection
  Serial.println(""Initializing Ethernet..."");
  if (Ethernet.begin(mac) == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    Serial.println(""Trying static IP..."");
    Ethernet.begin(mac, ip);
  }
  delay(1000); // Allow Ethernet hardware to initialize

  // Retrieve and display the assigned IP address
  IPAddress localIP = Ethernet.localIP();
  Serial.print(""Ethernet IP Address: "");
  Serial.println(localIP);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs();

  // Optional: Add code to check connection or send data
  // For demonstration, attempt to connect to server periodically
  static unsigned long lastAttempt = 0;
  if (millis() - lastAttempt > 10000) { // every 10 seconds
    lastAttempt = millis();
    Serial.println(""Connecting to server..."");
    if (client.connect(server, 80)) {
      Serial.println(""Connected to server"");
      client.println(""GET / HTTP/1.1"");
      client.println(""Host: www.google.com"");
      client.println(""Connection: close"");
      client.println();
    } else {
      Serial.println(""Connection to server failed"");
    }
  }

  // Read server response
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
  }

  // Check if server disconnected
  if (!client.connected()) {
    Serial.println();
    Serial.println(""Disconnecting."");
    client.stop();
  }
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

/* END CODE */"
iWdTfVJB,Network Connection rev_01,pleasedontcode,Arduino,Friday 20th of June 2025 02:02:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Connection
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 07:02:05

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Ethernet2.h> //https://github.com/adafruit/Ethernet2

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** LIBRARY OBJECT INSTANCES *****/
// Instantiate Ethernet object
EthernetClass Ethernet;

/****** NETWORK CONFIGURATION *****/
// Define static IP address (modify as needed)
IPAddress localIp(192, 168, 1, 177); // Example IP address
IPAddress dnsServer(8, 8, 8, 8);    // Example DNS server (Google DNS)

/****** SETUP FUNCTION *****/
void setup(void)
{
  // Initialize Ethernet connection
  Ethernet.init(ethernet_W5500_SPI_PIN_CS_D10); // Set CS pin
  int result = Ethernet.begin( /*mac address*/ NULL, localIp, dnsServer);
  if (result == 0)
  {
    Serial.begin(9600);
    Serial.println(""Ethernet initialization failed"");
  }
  else
  {
    Serial.begin(9600);
    Serial.print(""Ethernet IP address: "");
    Serial.println(Ethernet.localIP());
  }

  // put your setup code here, to run once:
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  // start the SPI library:
  SPI.begin();
}

/***** LOOP FUNCTION *****/
void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs(); // Refresh output data
}

/***** UPDATE OUTPUTS FUNCTION *****/
void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

/* END CODE */"
gv2EvZ27,qz,samiroexpikachu,JavaScript,Friday 20th of June 2025 01:14:20 AM CDT,"const fs = require(""fs-extra"");
const path = require(""path"");

// Path to store the quiz session data
const dbPath = path.join(process.cwd(), ""cache"", ""quiz_sessions.json"");

// Helper function to read the database.
function getQuizData() {
    try {
        if (!fs.existsSync(dbPath)) {
            fs.ensureFileSync(dbPath);
            fs.writeFileSync(dbPath, ""{}"");
            return {};
        }
        return fs.readJsonSync(dbPath);
    } catch (e) {
        console.error(""Error reading quiz session database:"", e);
        return {}; // Return empty object on failure
    }
}

// Helper function to write to the database.
function saveQuizData(data) {
    try {
        fs.writeJsonSync(dbPath, data, { spaces: 2 });
    } catch (e) {
        console.error(""Error writing to quiz session database:"", e);
    }
}

module.exports = {
    config: {
        name: ""quiz"",
        version: ""2.0"",
        author: ""Samuel"", // As requested
        countDown: 5,
        role: 0,
        description: ""An interactive quiz game where a quiz master awards points."",
        category: ""game"",
        guide: {
            en: ""• !quiz start : Start a new quiz session and become the quiz master.\n"" +
                ""• !quiz show : Display the current leaderboard.\n"" +
                ""• !quiz end : End the current quiz session (only by the quiz master).\n\n"" +
                ""How to play:\n1. The quiz master asks a question.\n2. Players answer.\n3. The quiz master replies to a correct answer with '✅' to award 10 points.""
        }
    },

    onLoad: function() {
        global.quizSessions = getQuizData();
        console.log(""Quiz module loaded and sessions initialized."");
    },

    // onStart will handle explicit commands like !quiz start, !quiz show, !quiz end
    onStart: async function({ api, event, args, usersData }) {
        const { threadID, messageID, senderID } = event;
        const command = (args[0] || """").toLowerCase();
        
        // Ensure the thread is initialized in our global session data
        if (!global.quizSessions[threadID]) {
            global.quizSessions[threadID] = { isActive: false, quizMasterID: null, scores: {} };
        }

        switch (command) {
            case 'start': {
                if (global.quizSessions[threadID].isActive) {
                    const masterName = await usersData.getName(global.quizSessions[threadID].quizMasterID);
                    return api.sendMessage(`A quiz is already in progress, managed by ${masterName}.`, threadID, messageID);
                }
                
                global.quizSessions[threadID] = {
                    isActive: true,
                    quizMasterID: senderID,
                    scores: {} // Reset scores for the new session
                };
                saveQuizData(global.quizSessions);

                const masterName = await usersData.getName(senderID);
                api.sendMessage(`✅ | Quiz session started!\n\n👑 Quiz Master: ${masterName}\n\nYou can now ask questions. Reply with '✅' to a correct answer to award 10 points.`, threadID, messageID);
                break;
            }
            
            case 'show': {
                const session = global.quizSessions[threadID];
                if (!session.isActive || Object.keys(session.scores).length === 0) {
                    return api.sendMessage(""There are no scores to show yet. A quiz must be active and points awarded."", threadID, messageID);
                }

                const sortedUsers = Object.entries(session.scores).sort(([, a], [, b]) => b - a);
                let leaderboardMsg = ""🏆 **Quiz Leaderboard** 🏆\n\n"";
                let rank = 1;

                for (const [userID, score] of sortedUsers) {
                    const userName = await usersData.getName(userID);
                    const rankEmoji = rank === 1 ? '🥇' : rank === 2 ? '🥈' : rank === 3 ? '🥉' : `${rank}.`;
                    leaderboardMsg += `${rankEmoji} ${userName}: ${score} points\n`;
                    rank++;
                }

                api.sendMessage(leaderboardMsg, threadID, messageID);
                break;
            }

            case 'end': {
                const session = global.quizSessions[threadID];
                if (!session.isActive) {
                    return api.sendMessage(""There is no active quiz to end."", threadID, messageID);
                }
                if (session.quizMasterID !== senderID) {
                    return api.sendMessage(""⚠️ | Only the quiz master can end the session."", threadID, messageID);
                }
                
                session.isActive = false;
                // We keep quizMasterID and scores for a final review, but the session is inactive
                saveQuizData(global.quizSessions);

                api.sendMessage(""🏁 | The quiz session has been ended by the quiz master."", threadID, messageID);
                break;
            }
            
            default: {
                const { guide, name } = this.config;
                const prefix = (global.config.PREFIX || ""!"");
                api.sendMessage(`Invalid command. Please use:\n\n${guide.en.replace(/• !/g, `• ${prefix}`)}`, threadID, messageID);
                break;
            }
        }
    },

    // onChat will listen for the quiz master's '✅' reply
    onChat: async function({ api, event, usersData }) {
        const { threadID, messageID, senderID, body, messageReply } = event;

        // Ignore messages without content or from the bot itself
        if (!body || senderID === api.getCurrentUserID()) return;

        const session = global.quizSessions[threadID];
        
        // --- Core Quiz Logic ---
        // Check if all conditions for awarding points are met:
        // 1. A quiz is active in the thread.
        // 2. The message is exactly '✅'.
        // 3. The sender is the current quiz master.
        // 4. The message is a reply to someone else.
        if (
            session && session.isActive &&
            body.trim() === '✅' &&
            senderID === session.quizMasterID &&
            messageReply &&
            messageReply.senderID !== senderID
        ) {
            const targetUserID = messageReply.senderID;

            // Initialize score if user is new
            if (!session.scores[targetUserID]) {
                session.scores[targetUserID] = 0;
            }

          
            session.scores[targetUserID] += 10;
            saveQuizData(global.quizSessions); 

            const targetUserName = await usersData.getName(targetUserID);
            
            // Send a confirmation message and react
            api.sendMessage(`🎉 +10 points for ${targetUserName}!\nTotal points: ${session.scores[targetUserID]}`, threadID);
            api.setMessageReaction(""👍"", messageID, (err) => {}, true);
        }
    }
};"
AR9fRfXR,Untitled,Swiftkill,C++,Friday 20th of June 2025 01:02:35 AM CDT,"struct Foo {
    using pzdc = std::__1::unordered_map<z_hash_t, std::__1::shared_ptr<std::__1::vector<double>>>::iterator;

    int    bar1;
    float  bar2;
    double armpit_of_universe_bar {};
    pzdc   bar3_address;

};
"
x36hqtT9,SigilDERG Student Model V6 Proposed,3th1ca14aX0r,Python,Thursday 19th of June 2025 11:43:32 PM CDT,"#!/usr/bin/env python
""""""
unified_sigil_trainer_v6.py

Trains and exports an ONNX student model with enhanced relational reasoning
and teacher–student distillation support. This version is built to handle
rich, multi-dimensional data—such as that gathered by integrating rust-crate-pipeline
with Crawl4AI.

Key features:
  - Dynamic feature selection via a --feature_cols argument.
  - Two architecture variants: a simple “flat” MLP and a relational variant that processes
    feature-by-feature tokens through a lightweight Transformer encoder.
  - Optional teacher–student distillation: if a teacher_logits file is provided, a KD loss is applied.
  - Manifest generation and optional GPG signing for deployment.

Usage examples:
  python unified_sigil_trainer_v6.py --mode trust --csv enriched_data.csv --onnx trust_model.onnx \
       --feature_cols x0,x1,x2,x3,x4,x5,x6,x7
  python unified_sigil_trainer_v6.py --mode classify --csv enriched_classify.csv --onnx classify_model.onnx \
       --feature_cols f1,f2,f3,f4,f5,f6,f7,f8,f9 --relational --teacher_logits teacher_logits.npy --kd_weight 0.5 --sign
""""""

import argparse, csv, hashlib, json, pathlib, subprocess
from datetime import datetime

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.utils.data as td
from tqdm import tqdm

# ----------------- Global Hyperparameters -----------------
HIDDEN_DIM = 32         # Increase hidden dimensions if richer data permits
NUM_CLASSES = 3         # For classification mode (otherwise regression/trust)
EPOCHS = 25
BATCH = 128
LEARNING_RT = 1e-3
VERSION = ""v6-unified""

# ----------------- Model Definitions -----------------

# Flat MLP architecture that uses dynamic input dimensions.
class UnifiedSigilNet(nn.Module):
    def __init__(self, input_dim, mode=""trust""):
        super().__init__()
        self.mode = mode
        self.input_dim = input_dim
        self.norm = nn.LayerNorm(input_dim)
        self.fc1 = nn.Linear(input_dim, HIDDEN_DIM)
        self.fc2 = nn.Linear(HIDDEN_DIM, HIDDEN_DIM if mode == ""classify"" else 1)
        self.out = nn.Linear(HIDDEN_DIM, NUM_CLASSES) if mode == ""classify"" else nn.Identity()

    def forward(self, x):
        x = self.norm(x)
        x = F.gelu(self.fc1(x))
        x = F.dropout(x, p=0.10, training=self.training)
        x = F.gelu(self.fc2(x))
        if self.mode == ""trust"":
            score = torch.sigmoid(x)
            # A simple proxy for confidence
            confidence = (score - 0.5).abs() * 2
            return score, confidence
        else:
            return self.out(x)

# Relational variant that treats each input feature as a token.
class RelationalSigilNet(nn.Module):
    def __init__(self, input_dim, mode=""trust""):
        super().__init__()
        self.mode = mode
        self.input_dim = input_dim
        # Each feature is projected into a token embedding of size HIDDEN_DIM.
        self.token_embed_dim = HIDDEN_DIM
        self.feature_proj = nn.Linear(1, self.token_embed_dim)
        # Learnable positional embeddings (one per input feature)
        self.positional = nn.Parameter(torch.zeros(input_dim, self.token_embed_dim))
        # Single-layer Transformer encoder with 1 attention head.
        self.transformer = nn.TransformerEncoderLayer(
            d_model=self.token_embed_dim, nhead=1, batch_first=True
        )
        # Pool across tokens and process the aggregated representation.
        self.fc = nn.Sequential(
            nn.LayerNorm(self.token_embed_dim),
            nn.Linear(self.token_embed_dim, HIDDEN_DIM),
            nn.GELU(),
            nn.Dropout(0.10),
            nn.Linear(HIDDEN_DIM, HIDDEN_DIM if mode == ""classify"" else 1)
        )
        self.out = nn.Linear(HIDDEN_DIM, NUM_CLASSES) if mode == ""classify"" else nn.Identity()

    def forward(self, x):
        # x shape: (batch, input_dim)
        x = x.unsqueeze(-1)  # Now shape: (batch, input_dim, 1)
        x = self.feature_proj(x)  # Shape: (batch, input_dim, token_embed_dim)
        x = x + self.positional  # Apply positional bias
        x = self.transformer(x)  # Process relationally across features
        x = x.mean(dim=1)       # Pool features (mean pooling)
        x = self.fc(x)
        if self.mode == ""trust"":
            score = torch.sigmoid(x)
            confidence = (score - 0.5).abs() * 2
            return score, confidence
        else:
            return self.out(x)

# ----------------- Data Loading -----------------

def load_csv(path, feature_cols, mode, teacher_logits_file=None):
    """"""
    Load a CSV file and only use the columns specified in feature_cols.
    The CSV should also have a target column ""y"" for training.
    If teacher_logits_file is provided, it is assumed to be an npy file where the
    i-th row corresponds to the enriched target from the teacher.
    """"""
    xs, ys, teacher_targets = [], [], []
    teacher_all = None
    if teacher_logits_file:
        teacher_all = np.load(teacher_logits_file)
    with open(path, newline='') as fh:
        rdr = csv.DictReader(fh)
        for i, row in enumerate(rdr):
            try:
                # Dynamically gather features from the specified columns.
                vec = [float(row[col]) for col in feature_cols if col in row]
            except Exception as ex:
                continue
            # Skip rows with missing data.
            if any(np.isnan(vec)):
                continue
            xs.append(vec)
            # The target must be in the ""y"" column.
            ys.append(float(row[""y""]) if mode == ""trust"" else int(row[""y""]))
            if teacher_all is not None:
                teacher_targets.append(teacher_all[i])
    xs = np.array(xs, dtype=np.float32)
    # Normalize features columnwise.
    xs_min = xs.min(axis=0)
    xs_max = xs.max(axis=0)
    xs_norm = (xs - xs_min) / (xs_max - xs_min + 1e-8)
    x = torch.tensor(xs_norm, dtype=torch.float32)
    if mode == ""trust"":
        y = torch.tensor(ys, dtype=torch.float32)
    else:
        y = torch.tensor(ys, dtype=torch.long)
    if teacher_all is not None:
        teacher_tensor = torch.tensor(np.array(teacher_targets), dtype=torch.float32)
        return td.TensorDataset(x, y, teacher_tensor)
    else:
        return td.TensorDataset(x, y)

# ----------------- Training Loop -----------------

def train(model, loader, mode, kd_weight=0.0):
    """"""
    Training loop with support for teacher–student distillation.
    If kd_weight > 0, expect the loader to return (x, y, teacher_target).
    """"""
    base_loss_fn = nn.BCELoss() if mode == ""trust"" else nn.CrossEntropyLoss()
    kd_loss_fn = nn.MSELoss() if mode == ""trust"" else nn.KLDivLoss(reduction=""batchmean"")
    
    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RT)
    for epoch in range(EPOCHS):
        model.train()
        running_loss = 0.0
        pbar = tqdm(loader, desc=f""Epoch {epoch+1}/{EPOCHS}"")
        for batch in pbar:
            optimizer.zero_grad()
            if len(batch) == 3:
                xb, yb, teacher_target = batch
            else:
                xb, yb = batch
                teacher_target = None
            out = model(xb)
            if mode == ""trust"":
                # For trust mode, use the predicted score.
                pred = out[0].squeeze(1)
            else:
                pred = out
            loss = base_loss_fn(pred, yb)
            if teacher_target is not None and kd_weight > 0:
                if mode == ""trust"":
                    kd_loss = kd_loss_fn(pred, teacher_target)
                else:
                    kd_loss = kd_loss_fn(F.log_softmax(pred, dim=-1), F.softmax(teacher_target, dim=-1))
                loss = (1 - kd_weight) * loss + kd_weight * kd_loss
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
            pbar.set_postfix({""loss"": running_loss / (pbar.n + 1)})
    return model

# ----------------- ONNX Export -----------------

def export_onnx(model, path, mode):
    model.eval()
    dummy = torch.randn(1, model.input_dim)
    if mode == ""trust"":
        output_names = [""score"", ""confidence""]
    else:
        output_names = [""logits""]
    torch.onnx.export(
        model,
        dummy,
        path,
        input_names=[""x""],
        output_names=output_names,
        dynamic_axes={""x"": {0: ""batch_size""}},
        opset_version=17,
    )

# ----------------- Manifest + Signing -----------------

def hash_file(path):
    with open(path, ""rb"") as f:
        return hashlib.sha256(f.read()).hexdigest()

def write_manifest(path, sha, mode, input_dim, hidden_dim, classes, version):
    manifest = {
        pathlib.Path(path).name: sha,
        ""version"": version,
        ""mode"": mode,
        ""input_dim"": input_dim,
        ""hidden_dim"": hidden_dim,
        ""classes"": classes,
        ""timestamp"": datetime.now().isoformat(),
    }
    manifest_path = pathlib.Path(path).with_name(""model_manifest.json"")
    with open(manifest_path, ""w"") as f:
        json.dump(manifest, f, indent=2)

def sign_model(path):
    try:
        subprocess.run([""gpg"", ""--detach-sign"", ""--armor"", path], check=True)
        print(""GPG signature created."")
    except Exception as e:
        print(""GPG signing failed:"", e)

# ----------------- Main -----------------

if __name__ == ""__main__"":
    ap = argparse.ArgumentParser()
    ap.add_argument(""--mode"", choices=[""trust"", ""classify""], required=True, help=""Operation mode"")
    ap.add_argument(""--csv"", required=True, help=""CSV file with enriched training data"")
    ap.add_argument(""--onnx"", required=True, help=""Output ONNX model file"")
    ap.add_argument(""--feature_cols"", required=False, default="""", help=""Comma-separated feature column names (e.g., x0,x1,x2)"")
    ap.add_argument(""--sign"", action=""store_true"", help=""GPG-sign the exported ONNX model"")
    ap.add_argument(""--relational"", action=""store_true"", help=""Use the relational transformer variant"")
    ap.add_argument(""--teacher_logits"", default=None, help=""Optional teacher logits file (npy)"")
    ap.add_argument(""--kd_weight"", type=float, default=0.0, help=""Weight for KD loss (0 disables distillation)"")
    args = ap.parse_args()

    # Determine features: either use provided list or (as a fallback) default to a small set.
    if args.feature_cols:
        feature_cols = [col.strip() for col in args.feature_cols.split("","")]
    else:
        # Defaults – adjust as needed if enrichment adds more columns.
        feature_cols = [""x0"", ""x1"", ""x2"", ""x3"", ""x4"", ""x5"", ""x6"", ""x7""]
    
    input_dim = len(feature_cols)
    
    # Choose the student model architecture.
    if args.relational:
        model = RelationalSigilNet(input_dim=input_dim, mode=args.mode)
    else:
        model = UnifiedSigilNet(input_dim=input_dim, mode=args.mode)
    
    # Load the dataset (with teacher logits if provided).
    dataset = load_csv(args.csv, feature_cols, args.mode, teacher_logits_file=args.teacher_logits)
    loader = td.DataLoader(dataset, batch_size=BATCH, shuffle=True)
    
    # Train the model.
    model = train(model, loader, args.mode, kd_weight=args.kd_weight)
    
    # Export the trained model to ONNX.
    export_onnx(model, args.onnx, args.mode)
    sha = hash_file(args.onnx)
    classes = NUM_CLASSES if args.mode == ""classify"" else 1
    write_manifest(args.onnx, sha, args.mode, input_dim, HIDDEN_DIM, classes, VERSION)
    if args.sign:
        sign_model(args.onnx)
    print(f""Model and manifest ready for mode: {args.mode}, using features: {feature_cols}"")
"
7ikWnzm9,BFS Algorithm,Nevtr4l,C++,Thursday 19th of June 2025 11:16:53 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
  // n: núm. de nodos - m: núm. de aristas
  int n, m; cin >> n >> m;
  vector<vector<int>> adj(n+1);
  while (m--) {
    int u, v; cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<bool> vis(n+1);
  queue<int> q;
  function<void(int)> bfs = [&](int start) {
    vis[start] = true;
    q.push(start);

    while (!q.empty()) {
      int u = q.front();
      q.pop();
      cout << u << ' ';

      for (int& v : adj[u]) {
        if (vis[v]) continue;
        vis[v] = true;
        q.push(v);
      }
    }
  };

  for (int u = 1; u <= n; u++) {
    if (vis[u]) continue;
    bfs(u);
  }

  return 0;
}"
2e7xW9ZQ,DFS Algorithm,Nevtr4l,C++,Thursday 19th of June 2025 10:54:44 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
  // n: núm. de nodos - m: núm. de aristas
  int n, m; cin >> n >> m;
  vector<vector<int>> adj(n+1);
  while (m--) {
    int u, v; cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<bool> vis(n+1);
  function<void(int)> dfs = [&](int u) {
    vis[u] = true;
    cout << u << ' ';
    for (int& v : adj[u]) {
      if (vis[v]) continue;
      dfs(v);
    }
  };

  for (int u = 1; u <= n; u++) {
    if (vis[u]) continue;
    dfs(u);
  }

  return 0;
}"
ewaSreEx,3x3improved,CBredlow,Lua,Thursday 19th of June 2025 10:52:46 PM CDT,"if not turtle then
    printError(""Requires a Turtle"")
    return
end

local tArgs = { ... }
if #tArgs ~= 1 then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    print(""Usage: "" .. programName .. "" <length>"")
    return
end

local length = tonumber(tArgs[1])
if length < 1 then
    print(""Tunnel length must be positive"")
    return
end

local collected = 0

local function collect()
    collected = collected + 1
    if math.fmod(collected, 25) == 0 then
        print(""Mined "" .. collected .. "" items."")
    end
end

local function tryDig()
    while turtle.detect() do
        if turtle.dig() then
            collect()
            sleep(0.5)
        else
            return false
        end
    end
    return true
end

local function tryDigUp()
    while turtle.detectUp() do
        if turtle.digUp() then
            collect()
            sleep(0.5)
        else
            return false
        end
    end
    return true
end

local function tryDigDown()
    while turtle.detectDown() do
        if turtle.digDown() then
            collect()
            sleep(0.5)
        else
            return false
        end
    end
    return true
end

local function refuel()
    local fuelLevel = turtle.getFuelLevel()
    if fuelLevel == ""unlimited"" or fuelLevel > 0 then
        return
    end

    local function tryRefuel()
        for n = 1, 16 do
            if turtle.getItemCount(n) > 0 then
                turtle.select(n)
                if turtle.refuel(1) then
                    turtle.select(1)
                    return true
                end
            end
        end
        turtle.select(1)
        return false
    end

    if not tryRefuel() then
        print(""Add more fuel to continue."")
        while not tryRefuel() do
            os.pullEvent(""turtle_inventory"")
        end
        print(""Resuming Tunnel."")
    end
end

local function tryMove(moveFunc, digFunc, attackFunc)
    refuel()
    while not moveFunc() do
        if turtle.detect() then
            if not digFunc() then
                return false
            end
        elseif attackFunc and attackFunc() then
            collect()
        else
            sleep(0.5)
        end
    end
    return true
end

local function digLayer()
    -- Dig the 3x3 layer
    tryDigUp() -- Top center
    tryDigDown() -- Bottom center
    turtle.turnLeft()
    tryDig() -- Left center
    tryMove(turtle.up, tryDig, turtle.attack) -- Top left
    tryDig()
    turtle.turnRight()
    turtle.turnRight()
    tryDig() -- Top right
    tryMove(turtle.down, tryDig, turtle.attack)
    tryDig() -- Bottom right
    tryMove(turtle.down, tryDig, turtle.attack)
    tryDig() -- Bottom left
    turtle.turnLeft()
    turtle.turnLeft()
    tryDig() -- Left bottom
    turtle.turnRight()
    tryMove(turtle.up, tryDig, turtle.attack) -- Return to center
end

print(""Tunnelling..."")

for n = 1, length do
    digLayer()
    if n < length then
        if not tryMove(turtle.forward, tryDig, turtle.attack) then
            print(""Aborting Tunnel."")
            break
        end
    else
        print(""Tunnel complete."")
    end
end

-- Return to start
local depth = length
turtle.turnLeft()
turtle.turnLeft()
while depth > 0 do
    if not tryMove(turtle.forward, tryDig, turtle.attack) then
        print(""Unable to return to start."")
        break
    end
    depth = depth - 1
end
turtle.turnRight()
turtle.turnRight()

print(""Tunnel complete."")
print(""Mined "" .. collected .. "" items total."")"
fJGsYbkU,"show-pagemap , (c) s.kazak",Fen1848,C,Thursday 19th of June 2025 10:42:27 PM CDT,"// By Sergey Kazak

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <getopt.h>
#include <sysexits.h>

static uint64_t     const PAGE_SIZE = 4096;

static uint64_t read_pagecount( uint64_t pfn );
static uint64_t read_pagecgroup( uint64_t pfn );

static int o_show_details = 0, o_show_cgroup = 0, o_print_refs = 0, o_print_map_name = 0;

struct summary_t {
    uint64_t total_pages;
    uint64_t total_active_pages;
    uint64_t total_shared_pages;

} g_summary;


/*  since we cannot use here C++ std::unordered_map 
    we shall use just huge arrays for calculation
*/


typedef struct var_array_t {
    uint64_t *ptr;
    uint64_t size;
} var_array_t;

static var_array_t a_per_cgroup_stats;

void init_array( var_array_t *a )
{
    a->ptr = NULL;
    a->size = 0;
}

void free_array( var_array_t *a )
{
    if( a->ptr )
        free(a->ptr);

    a->size = 0;
}

void put_or_append( var_array_t *a, uint64_t idx, uint64_t value )
{
    if( a->size < idx )
    {
        // realloc
        uint64_t new_size = idx * 1.5;
        a->ptr = realloc(a->ptr, new_size * sizeof(uint64_t));
        if( NULL == a->ptr )
            perror(""failed to allocate buffer"");
        // fill tail with zeroes
        memset(a->ptr + a->size, 0, (new_size - a->size) * sizeof(uint64_t));
        a->size = new_size;
    }
    a->ptr[idx] += value;
}


static void usage()
{
    fprintf( stderr, ""Usage: show-pagemap [options] <PID>\n"" );
    fprintf( stderr, ""options are following:\n"" );
    fprintf( stderr, ""\t-d|--details:                  show per page details.\n"" );
    fprintf( stderr, ""\t-g|--cgroup:                   show cgroup refs from /proc/kpagecgroup.\n"" );
    fprintf( stderr, ""\t-r|--refs:                     show sharing refs from /proc/kpagecount.\n"" );
    fprintf( stderr, ""\t-n|--names:                    show map name if found.\n"" );
}

static void dump_page(uint64_t address, uint64_t data, const char *map_name) 
{
    uint64_t pfn = data & 0x7fffffffffffff;
    uint64_t cnt = o_print_refs ? (pfn ? read_pagecount(pfn) : 0) : 0;

    uint64_t page_is_present = (data >> 63) & 1;

    int64_t cgroup_id = o_show_cgroup ? read_pagecgroup(pfn) : -1;

    if( o_show_details )
    {
        printf(""0x%-16lx : PFN %-16lx refs: %ld soft-dirty %ld ex-map: %ld shared %ld ""
            ""swapped %ld present %ld"", address, pfn, cnt,
            (data >> 55) & 1,
            (data >> 56) & 1,
            (data >> 61) & 1,
            (data >> 62) & 1,
            page_is_present);

        if( cgroup_id != -1 )
            printf("" cgroup: %ld"", cgroup_id);

        if( map_name )
            printf("" name: %s"", map_name);
        
        printf(""\n"");
    }

    g_summary.total_pages += 1;
    g_summary.total_active_pages += page_is_present ? 1 : 0;
    g_summary.total_shared_pages += cnt > 1 ? 1 : 0;

    if( o_show_cgroup && cgroup_id > 0 && page_is_present )
    {
        put_or_append(&a_per_cgroup_stats, cgroup_id, 1);
    }
}

void print_summary()
{
    printf(""Summary:\n"");
    printf(""total pages:       %16ld = %ld Kb\n"", g_summary.total_pages, g_summary.total_pages * 4);
    printf(""total active(RSS): %16ld = %ld Kb\n"", g_summary.total_active_pages, g_summary.total_active_pages * 4);
    printf(""total shared:      %16ld = %ld Kb\n"", g_summary.total_shared_pages, g_summary.total_shared_pages * 4);

    if( o_show_cgroup && a_per_cgroup_stats.size )
    {
        printf(""cgroup active pages:\n"");
        for( uint64_t i = 0; i < a_per_cgroup_stats.size; ++i )
        {
            if( a_per_cgroup_stats.ptr[i] )
                printf(""cgroup-id:       %8ld %8ld = %ld Kb\n"", i, a_per_cgroup_stats.ptr[i], a_per_cgroup_stats.ptr[i] * 4);
        }
    }
}

void read_vma(int fd, uint64_t start, uint64_t end, const char *map_name) 
{
    for(uint64_t i, val; start < end; start += PAGE_SIZE) 
    {
        i = (start / PAGE_SIZE) * sizeof(uint64_t);
        if(pread(fd, &val, sizeof(uint64_t), i) != sizeof(uint64_t)) 
        {
            if(errno) perror(""vma pread"");
            break;
        }
        dump_page(i, val, map_name);
    }
}

void parse_maps( const char *maps_file, const char *pagemap_file ) 
{
    int maps = open(maps_file, O_RDONLY);
    if(maps < 0)
        perror(""open /proc/maps failed"");

    int pagemap = open(pagemap_file, O_RDONLY);
    if(pagemap < 0) {
        close(maps);
        perror(""open /proc/pagemap failed"");
        return;
    }

    char buffer[BUFSIZ];
    int offset = 0;
    size_t y;

    for(;;) {
        ssize_t length = read(maps, buffer + offset, sizeof buffer - offset);
        if(length <= 0) break;

        length += offset;

        for(size_t i = offset; i < (size_t)length; i ++) 
        {
            uint64_t low = 0, high = 0;
            if(buffer[i] == '\n' && i) 
            {
                size_t x = i - 1;
                while(x && buffer[x] != '\n') x --;
                if(buffer[x] == '\n') x ++;
                size_t beginning = x;

                while(buffer[x] != '-' && x+1 < sizeof buffer) {
                    char c = buffer[x ++];
                    low *= 16;
                    if(c >= '0' && c <= '9') {
                        low += c - '0';
                    }
                    else if(c >= 'a' && c <= 'f') {
                        low += c - 'a' + 10;
                    }
                    else break;
                }

                while(buffer[x] != '-' && x+1 < sizeof buffer) x ++;
                if(buffer[x] == '-') x ++;

                while(buffer[x] != ' ' && x+1 < sizeof buffer) 
                {
                    char c = buffer[x ++];
                    high *= 16;
                    if(c >= '0' && c <= '9') {
                        high += c - '0';
                    }
                    else if(c >= 'a' && c <= 'f') {
                        high += c - 'a' + 10;
                    }
                    else break;
                }

                const char *lib_name = 0;
                if( o_print_map_name )
                {
                    for(int field = 0; field < 4; field ++) {
                        x ++;  // skip space
                        while(buffer[x] != ' ' && x+1 < sizeof buffer) x ++;
                    }
                    while(buffer[x] == ' ' && x+1 < sizeof buffer) x ++;

                    y = x;
                    while(buffer[y] != '\n' && y+1 < sizeof buffer) y ++;
                    buffer[y] = 0;

                    lib_name = buffer + x;
                }

                read_vma(pagemap, low, high, lib_name);

                if( o_print_map_name )
                    buffer[y] = '\n';
            }
        }
    }

    close(maps);
    close(pagemap);

    print_summary();
}

int main( int argc, char *argv[] ) 
{
    while( 1 )
    {

        static struct option long_options[] = {
            { ""details"",              no_argument,    NULL, 'd' },
            { ""cgroup"",               no_argument,    NULL, 'g' },
            { ""refs"",                 no_argument,    NULL, 'r' },
            { ""names"",                no_argument,    NULL, 'n' },
            { NULL,                             0,    NULL, 0   }
        };

        int op_c = getopt_long( argc, argv, ""dgrn"", long_options, NULL );
        if( op_c == -1 )
            break;

        switch( op_c )
        {
            case 'd':
                o_show_details = 1;
                break;
            case 'g':
                o_show_cgroup = 1;
                break;
            case 'r':
                o_print_refs = 1;
                break;
            case 'n':
                o_print_map_name = 1;
                break;
            default:
                fprintf( stderr, ""invalid argument\n"");
                exit( EXIT_FAILURE );
        }
    }

    argc -= optind;
    argv += optind;

    if( argc < 1 )
    {
        usage();
        exit( EX_USAGE );
    }

    errno = 0;
    int pid = (int)strtol(*argv, NULL, 0);
    if( errno ) 
    {
        perror(""failed to parse PID"");
        return 1;
    }

    init_array(&a_per_cgroup_stats);
    
    char maps_file[BUFSIZ];
    char pagemap_file[BUFSIZ];
    snprintf(maps_file, sizeof(maps_file), ""/proc/%lu/maps"", (uint64_t)pid);
    snprintf(pagemap_file, sizeof(pagemap_file), ""/proc/%lu/pagemap"", (uint64_t)pid);

    parse_maps(maps_file, pagemap_file);

    free_array(&a_per_cgroup_stats);

    return 0;
}

static int fd_pagecount = -1;

uint64_t read_pagecount( uint64_t pfn ) 
{
   /* This file contains a 64-bit count of the number of
   times each page is mapped, indexed by PFN.
   */
   if( -1 == fd_pagecount )
   {
      fd_pagecount = open(""/proc/kpagecount"", O_RDONLY);
      if( fd_pagecount < 0 ) 
      {
         perror(""open kpagecount"");
         return 0;
      }
   }

   uint64_t data, index = pfn * sizeof(uint64_t);

   if(pread(fd_pagecount, &data, sizeof(data), index) != sizeof(data)) {
      perror(""pread kpagecount"");
      return 0;
   }

   return data;
}

static int fd_pagecgroup = -1;

uint64_t read_pagecgroup( uint64_t pfn )
{
    /* This file contains a 64-bit inode number of the memory
              cgroup each page is charged to, indexed by page frame
              number (see the discussion of /proc/pid/pagemap).
   */

   if( -1 == fd_pagecgroup )
   {
      fd_pagecgroup = open(""/proc/kpagecgroup"", O_RDONLY);
      if( fd_pagecgroup < 0 ) 
      {
         perror(""open kpagecgroup"");
         return 0;
      }
   }

   uint64_t data, index = pfn * sizeof(uint64_t);

   if(pread(fd_pagecgroup, &data, sizeof(data), index) != sizeof(data)) {
      perror(""pread kpagecgroup"");
      return 0;
   }

   return data;
}

"
BWiwH2dH,show-pagemap,Fen1848,C,Thursday 19th of June 2025 10:41:46 PM CDT,"#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <getopt.h>
#include <sysexits.h>

static uint64_t     const PAGE_SIZE = 4096;

static uint64_t read_pagecount( uint64_t pfn );
static uint64_t read_pagecgroup( uint64_t pfn );

static int o_show_details = 0, o_show_cgroup = 0, o_print_refs = 0, o_print_map_name = 0;

struct summary_t {
    uint64_t total_pages;
    uint64_t total_active_pages;
    uint64_t total_shared_pages;

} g_summary;


/*  since we cannot use here C++ std::unordered_map 
    we shall use just huge arrays for calculation
*/


typedef struct var_array_t {
    uint64_t *ptr;
    uint64_t size;
} var_array_t;

static var_array_t a_per_cgroup_stats;

void init_array( var_array_t *a )
{
    a->ptr = NULL;
    a->size = 0;
}

void free_array( var_array_t *a )
{
    if( a->ptr )
        free(a->ptr);

    a->size = 0;
}

void put_or_append( var_array_t *a, uint64_t idx, uint64_t value )
{
    if( a->size < idx )
    {
        // realloc
        uint64_t new_size = idx * 1.5;
        a->ptr = realloc(a->ptr, new_size * sizeof(uint64_t));
        if( NULL == a->ptr )
            perror(""failed to allocate buffer"");
        // fill tail with zeroes
        memset(a->ptr + a->size, 0, (new_size - a->size) * sizeof(uint64_t));
        a->size = new_size;
    }
    a->ptr[idx] += value;
}


static void usage()
{
    fprintf( stderr, ""Usage: show-pagemap [options] <PID>\n"" );
    fprintf( stderr, ""options are following:\n"" );
    fprintf( stderr, ""\t-d|--details:                  show per page details.\n"" );
    fprintf( stderr, ""\t-g|--cgroup:                   show cgroup refs from /proc/kpagecgroup.\n"" );
    fprintf( stderr, ""\t-r|--refs:                     show sharing refs from /proc/kpagecount.\n"" );
    fprintf( stderr, ""\t-n|--names:                    show map name if found.\n"" );
}

static void dump_page(uint64_t address, uint64_t data, const char *map_name) 
{
    uint64_t pfn = data & 0x7fffffffffffff;
    uint64_t cnt = o_print_refs ? (pfn ? read_pagecount(pfn) : 0) : 0;

    uint64_t page_is_present = (data >> 63) & 1;

    int64_t cgroup_id = o_show_cgroup ? read_pagecgroup(pfn) : -1;

    if( o_show_details )
    {
        printf(""0x%-16lx : PFN %-16lx refs: %ld soft-dirty %ld ex-map: %ld shared %ld ""
            ""swapped %ld present %ld"", address, pfn, cnt,
            (data >> 55) & 1,
            (data >> 56) & 1,
            (data >> 61) & 1,
            (data >> 62) & 1,
            page_is_present);

        if( cgroup_id != -1 )
            printf("" cgroup: %ld"", cgroup_id);

        if( map_name )
            printf("" name: %s"", map_name);
        
        printf(""\n"");
    }

    g_summary.total_pages += 1;
    g_summary.total_active_pages += page_is_present ? 1 : 0;
    g_summary.total_shared_pages += cnt > 1 ? 1 : 0;

    if( o_show_cgroup && cgroup_id > 0 && page_is_present )
    {
        put_or_append(&a_per_cgroup_stats, cgroup_id, 1);
    }
}

void print_summary()
{
    printf(""Summary:\n"");
    printf(""total pages:       %16ld = %ld Kb\n"", g_summary.total_pages, g_summary.total_pages * 4);
    printf(""total active(RSS): %16ld = %ld Kb\n"", g_summary.total_active_pages, g_summary.total_active_pages * 4);
    printf(""total shared:      %16ld = %ld Kb\n"", g_summary.total_shared_pages, g_summary.total_shared_pages * 4);

    if( o_show_cgroup && a_per_cgroup_stats.size )
    {
        printf(""cgroup active pages:\n"");
        for( uint64_t i = 0; i < a_per_cgroup_stats.size; ++i )
        {
            if( a_per_cgroup_stats.ptr[i] )
                printf(""cgroup-id:       %8ld %8ld = %ld Kb\n"", i, a_per_cgroup_stats.ptr[i], a_per_cgroup_stats.ptr[i] * 4);
        }
    }
}

void read_vma(int fd, uint64_t start, uint64_t end, const char *map_name) 
{
    for(uint64_t i, val; start < end; start += PAGE_SIZE) 
    {
        i = (start / PAGE_SIZE) * sizeof(uint64_t);
        if(pread(fd, &val, sizeof(uint64_t), i) != sizeof(uint64_t)) 
        {
            if(errno) perror(""vma pread"");
            break;
        }
        dump_page(i, val, map_name);
    }
}

void parse_maps( const char *maps_file, const char *pagemap_file ) 
{
    int maps = open(maps_file, O_RDONLY);
    if(maps < 0)
        perror(""open /proc/maps failed"");

    int pagemap = open(pagemap_file, O_RDONLY);
    if(pagemap < 0) {
        close(maps);
        perror(""open /proc/pagemap failed"");
        return;
    }

    char buffer[BUFSIZ];
    int offset = 0;
    size_t y;

    for(;;) {
        ssize_t length = read(maps, buffer + offset, sizeof buffer - offset);
        if(length <= 0) break;

        length += offset;

        for(size_t i = offset; i < (size_t)length; i ++) 
        {
            uint64_t low = 0, high = 0;
            if(buffer[i] == '\n' && i) 
            {
                size_t x = i - 1;
                while(x && buffer[x] != '\n') x --;
                if(buffer[x] == '\n') x ++;
                size_t beginning = x;

                while(buffer[x] != '-' && x+1 < sizeof buffer) {
                    char c = buffer[x ++];
                    low *= 16;
                    if(c >= '0' && c <= '9') {
                        low += c - '0';
                    }
                    else if(c >= 'a' && c <= 'f') {
                        low += c - 'a' + 10;
                    }
                    else break;
                }

                while(buffer[x] != '-' && x+1 < sizeof buffer) x ++;
                if(buffer[x] == '-') x ++;

                while(buffer[x] != ' ' && x+1 < sizeof buffer) 
                {
                    char c = buffer[x ++];
                    high *= 16;
                    if(c >= '0' && c <= '9') {
                        high += c - '0';
                    }
                    else if(c >= 'a' && c <= 'f') {
                        high += c - 'a' + 10;
                    }
                    else break;
                }

                const char *lib_name = 0;
                if( o_print_map_name )
                {
                    for(int field = 0; field < 4; field ++) {
                        x ++;  // skip space
                        while(buffer[x] != ' ' && x+1 < sizeof buffer) x ++;
                    }
                    while(buffer[x] == ' ' && x+1 < sizeof buffer) x ++;

                    y = x;
                    while(buffer[y] != '\n' && y+1 < sizeof buffer) y ++;
                    buffer[y] = 0;

                    lib_name = buffer + x;
                }

                read_vma(pagemap, low, high, lib_name);

                if( o_print_map_name )
                    buffer[y] = '\n';
            }
        }
    }

    close(maps);
    close(pagemap);

    print_summary();
}

int main( int argc, char *argv[] ) 
{
    while( 1 )
    {

        static struct option long_options[] = {
            { ""details"",              no_argument,    NULL, 'd' },
            { ""cgroup"",               no_argument,    NULL, 'g' },
            { ""refs"",                 no_argument,    NULL, 'r' },
            { ""names"",                no_argument,    NULL, 'n' },
            { NULL,                             0,    NULL, 0   }
        };

        int op_c = getopt_long( argc, argv, ""dgrn"", long_options, NULL );
        if( op_c == -1 )
            break;

        switch( op_c )
        {
            case 'd':
                o_show_details = 1;
                break;
            case 'g':
                o_show_cgroup = 1;
                break;
            case 'r':
                o_print_refs = 1;
                break;
            case 'n':
                o_print_map_name = 1;
                break;
            default:
                fprintf( stderr, ""invalid argument\n"");
                exit( EXIT_FAILURE );
        }
    }

    argc -= optind;
    argv += optind;

    if( argc < 1 )
    {
        usage();
        exit( EX_USAGE );
    }

    errno = 0;
    int pid = (int)strtol(*argv, NULL, 0);
    if( errno ) 
    {
        perror(""failed to parse PID"");
        return 1;
    }

    init_array(&a_per_cgroup_stats);
    
    char maps_file[BUFSIZ];
    char pagemap_file[BUFSIZ];
    snprintf(maps_file, sizeof(maps_file), ""/proc/%lu/maps"", (uint64_t)pid);
    snprintf(pagemap_file, sizeof(pagemap_file), ""/proc/%lu/pagemap"", (uint64_t)pid);

    parse_maps(maps_file, pagemap_file);

    free_array(&a_per_cgroup_stats);

    return 0;
}

static int fd_pagecount = -1;

uint64_t read_pagecount( uint64_t pfn ) 
{
   /* This file contains a 64-bit count of the number of
   times each page is mapped, indexed by PFN.
   */
   if( -1 == fd_pagecount )
   {
      fd_pagecount = open(""/proc/kpagecount"", O_RDONLY);
      if( fd_pagecount < 0 ) 
      {
         perror(""open kpagecount"");
         return 0;
      }
   }

   uint64_t data, index = pfn * sizeof(uint64_t);

   if(pread(fd_pagecount, &data, sizeof(data), index) != sizeof(data)) {
      perror(""pread kpagecount"");
      return 0;
   }

   return data;
}

static int fd_pagecgroup = -1;

uint64_t read_pagecgroup( uint64_t pfn )
{
    /* This file contains a 64-bit inode number of the memory
              cgroup each page is charged to, indexed by page frame
              number (see the discussion of /proc/pid/pagemap).
   */

   if( -1 == fd_pagecgroup )
   {
      fd_pagecgroup = open(""/proc/kpagecgroup"", O_RDONLY);
      if( fd_pagecgroup < 0 ) 
      {
         perror(""open kpagecgroup"");
         return 0;
      }
   }

   uint64_t data, index = pfn * sizeof(uint64_t);

   if(pread(fd_pagecgroup, &data, sizeof(data), index) != sizeof(data)) {
      perror(""pread kpagecgroup"");
      return 0;
   }

   return data;
}

"
0i5vw0s9,2025-06-19T22:34:01.856144,powerampache,PHP,Thursday 19th of June 2025 10:34:02 PM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to tomobobo.ddns.net/97.121.165.32 (port 443) from /192.168.1.15 (port 33658) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
wX5VuGJy,app.py,doenz17,Python,Thursday 19th of June 2025 10:12:34 PM CDT,"import cv2
import numpy as np
import os
import pandas as pd
from io import BytesIO
import mysql.connector
import time
import io
from datetime import datetime, timedelta
from flask import Flask, render_template, request, redirect, url_for, session, Response, send_from_directory, jsonify, send_file
from db_config import get_db_connection
from openpyxl import Workbook
from ultralytics import YOLO
from tracker import CentroidTracker
import threading

# Ganti source ke webcam (0) atau RTSP string
CAMERA_SOURCE = 0  # atau ""rtsp://user:pass@ip:554/...""
SNAPSHOT_DIR = 'static/snapshots'
os.makedirs(SNAPSHOT_DIR, exist_ok=True)
app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Untuk anti double counting
recent_faces = []
TIMEOUT_SEC = 30
DIST_THRESHOLD = 50

# Load model
age_net = cv2.dnn.readNet('models/age_googlenet.onnx')
gender_net = cv2.dnn.readNet('models/gender_googlenet.onnx')
face_model = YOLO(""models/best2.pt"")
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + ""haarcascade_frontalface_default.xml"")
AGE_LIST = ['(0-2)', '(4-6)', '(8-12)', '(15-20)', '(25-32)', '(38-43)', '(48-53)', '(60-100)']
GENDER_LIST = ['Male', 'Female']

# --- Tracker ---
tracker = CentroidTracker(max_disappeared=30, dist_threshold=50)
recent_ids = {}
RECENT_ID_TIMEOUT = 30  # detik, cache ID agar tidak double insert

def insert_detection_async(*args):
    # Insert ke DB jalan di thread baru
    threading.Thread(target=insert_detection, args=args, daemon=True).start()

def insert_detection(name, gender, age_predict, timestamp, snapshot_path):
    conn = get_db_connection()
    cursor = conn.cursor()
    sql = """"""
        INSERT INTO detections (name, gender, age_predict, timestamp, snapshots)
        VALUES (%s, %s, %s, %s, %s)
    """"""
    cursor.execute(sql, (name, gender, age_predict, timestamp, snapshot_path))
    conn.commit()
    cursor.close()
    conn.close()

def gen_frames():
    cap = cv2.VideoCapture(CAMERA_SOURCE)
    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
    if not cap.isOpened():
        print(""Gagal membuka kamera/video."")
        return

    frame_count = 0
    FRAME_SKIP = 3
    recent_ids = {}  # object_id: last_saved_time

    while True:
        ret, frame = cap.read()
        if not ret:
            print(""Frame tidak terbaca!"")
            break
        frame_count += 1
        if frame_count % FRAME_SKIP != 0:
            continue

        now = datetime.now()
        ts = now.strftime('%Y-%m-%d %H:%M:%S')
        now_ts = time.time()

        # YOLO detection
        results = face_model(frame, verbose=False)
        boxes = []
        for r in results:
            for box, conf, cls in zip(r.boxes.xyxy.cpu().numpy(), r.boxes.conf.cpu().numpy(), r.boxes.cls.cpu().numpy()):
                if int(cls) == 0 and conf >= 0.45:
                    x1, y1, x2, y2 = map(int, box)
                    boxes.append((x1, y1, x2, y2))

        # Tracking!
        objects = tracker.update(boxes)

        for object_id, centroid in objects.items():
            # Get corresponding bbox for this ID (find the nearest one)
            bbox = None
            min_dist = float(""inf"")
            for (x1, y1, x2, y2) in boxes:
                cx, cy = (x1 + x2) // 2, (y1 + y2) // 2
                dist = np.linalg.norm(np.array([cx, cy]) - np.array(centroid))
                if dist < min_dist:
                    min_dist = dist
                    bbox = (x1, y1, x2, y2)
            if bbox is None:
                continue

            x1, y1, x2, y2 = bbox
            face_img = frame[y1:y2, x1:x2]
            if face_img.size == 0 or (x2-x1)<40 or (y2-y1)<40:
                continue

            # Anti double insert for object_id
            last_time = recent_ids.get(object_id, 0)
            if now_ts - last_time > TIMEOUT_SEC:
                # Predict gender/age
                blob = cv2.dnn.blobFromImage(face_img, 1.0, (224, 224), (104, 117, 123), swapRB=True)
                gender_net.setInput(blob)
                gender_preds = gender_net.forward()
                gender = GENDER_LIST[gender_preds[0].argmax()]
                age_net.setInput(blob)
                age_preds = age_net.forward()
                age_predict = AGE_LIST[age_preds[0].argmax()]
                # Save snapshot
                snap_name = f'snap_{now.strftime(""%Y%m%d%H%M%S%f"")}.jpg'
                snap_path = os.path.join(SNAPSHOT_DIR, snap_name)
                cv2.imwrite(snap_path, face_img)
                insert_detection_async(""Unknown"", gender, age_predict, ts, snap_name)
                recent_ids[object_id] = now_ts

            # Draw box & id
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, f'ID:{object_id}', (x1, y1-20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,255,0), 2)

        # Remove expired IDs from cache
        for oid in list(recent_ids):
            if oid not in objects:
                if now_ts - recent_ids[oid] > TIMEOUT_SEC:
                    del recent_ids[oid]

        # Streaming to browser
        ret, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

        continue


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute(""SELECT * FROM users WHERE username=%s AND password=%s"", (username, password))
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        if user:
            session['logged_in'] = True
            session['username'] = username
            return redirect(url_for('dashboard'))
        else:
            return render_template('login.html', error=""Invalid credentials"")
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/export-hourly-gender')
def export_hourly_gender():
    # --- Dapatkan data yang sama persis dengan halaman hourly-gender ---
    conn = mysql.connector.connect(
        host='localhost', user='root', password='', database='bec_counting')
    cursor = conn.cursor(dictionary=True)
    cursor.execute(""""""
        SELECT 
            HOUR(timestamp) AS hour,
            gender,
            COUNT(*) AS total
        FROM detections
        WHERE DATE(timestamp) = CURDATE()
        GROUP BY hour, gender
    """""")
    results = cursor.fetchall()
    conn.close()

    # Siapkan data: urut jam 0-23, selalu ada (meski kosong)
    hours = {h: {'Male': 0, 'Female': 0} for h in range(24)}
    for row in results:
        h = row['hour']
        g = row['gender']
        if g in ('Male', 'Female'):
            hours[h][g] = row['total']

    table = []
    for h in range(24):
        label = datetime.strptime(f""{h:02d}:00"", ""%H:%M"").strftime(""%I:00 %p"")
        table.append({
            'hour': label,
            'male': hours[h]['Male'],
            'female': hours[h]['Female']
        })

    # --- Buat file XLSX dengan openpyxl ---
    output = io.BytesIO()
    wb = Workbook()
    ws = wb.active
    ws.title = ""People Counting per Hour""
    ws.append([""Date/Time"", ""Male"", ""Female""])
    for row in table:
        ws.append([row['hour'], row['male'], row['female']])
    # Formatting lebar kolom
    for col in ws.columns:
        max_length = 0
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        col_letter = col[0].column_letter
        ws.column_dimensions[col_letter].width = max_length + 2
    for cell in ws[1]:
        cell.font = cell.font.copy(bold=True)
    wb.save(output)
    output.seek(0)
    today = datetime.now().strftime(""%Y-%m-%d"")
    return send_file(output,
        download_name=f""people_counting_hourly_{today}.xlsx"",
        as_attachment=True,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

@app.route('/hourly-gender')
def hourly_gender():
    conn = mysql.connector.connect(
        host='localhost', user='root', password='', database='bec_counting')
    cursor = conn.cursor(dictionary=True)
    cursor.execute(""""""
        SELECT 
            HOUR(timestamp) AS hour,
            gender,
            COUNT(*) AS total
        FROM detections
        WHERE DATE(timestamp) = CURDATE()
        GROUP BY hour, gender
        ORDER BY hour DESC
    """""")
    results = cursor.fetchall()
    conn.close()

    # Siapkan dict kosong: {hour: {Male: n, Female: m}}
    hours = {}
    for row in results:
        h = row['hour']
        g = row['gender']
        if h not in hours:
            hours[h] = {'Male': 0, 'Female': 0}
        hours[h][g] = row['total']

    # Konversi ke list untuk tabel, urut dari jam 23 ke 0
    table = []
    for h in reversed(range(24)):
        male = hours.get(h, {}).get('Male', 0)
        female = hours.get(h, {}).get('Female', 0)
        table.append({
            'hour': f""{h:02d}:00"",
            'male': male,
            'female': female
        })
    date_str = datetime.now().strftime('%d %B %Y')
    return render_template('hourly_gender.html', table=table)

@app.route('/chartdata')
def chartdata():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    # Donut: Gender hari ini
    cursor.execute(""""""
        SELECT gender, COUNT(*) as count
        FROM detections
        WHERE DATE(timestamp) = CURDATE()
        GROUP BY gender
    """""")
    donut = cursor.fetchall()

    # Bar: Per jam hari ini (Male)
    cursor.execute(""""""
        SELECT HOUR(timestamp) AS hour, COUNT(*) as count
        FROM detections
        WHERE DATE(timestamp) = CURDATE() AND gender='Male'
        GROUP BY hour
    """""")
    hourly_male = cursor.fetchall()

    # Bar: Per jam hari ini (Female)
    cursor.execute(""""""
        SELECT HOUR(timestamp) AS hour, COUNT(*) as count
        FROM detections
        WHERE DATE(timestamp) = CURDATE() AND gender='Female'
        GROUP BY hour
    """""")
    hourly_female = cursor.fetchall()

    # Bar: Per hari (mingguan, 7 hari terakhir)
    cursor.execute(""""""
        SELECT DATE(timestamp) AS date,
        SUM(gender='Male') as male,
        SUM(gender='Female') as female
        FROM detections
        WHERE timestamp >= CURDATE() - INTERVAL 6 DAY
        GROUP BY date
        ORDER BY date
    """""")
    weekly = cursor.fetchall()

    # Bar: Per hari di bulan berjalan
    cursor.execute(""""""
        SELECT DAY(timestamp) AS day,
        SUM(gender='Male') as male,
        SUM(gender='Female') as female
        FROM detections
        WHERE MONTH(timestamp) = MONTH(CURDATE()) AND YEAR(timestamp) = YEAR(CURDATE())
        GROUP BY day
        ORDER BY day
    """""")
    monthly = cursor.fetchall()

    cursor.close()
    conn.close()
    return jsonify({
        ""donut"": donut,
        ""hourly_male"": hourly_male,
        ""hourly_female"": hourly_female,
        ""weekly"": weekly,
        ""monthly"": monthly
    })

@app.route('/')
def dashboard():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute(""SELECT COUNT(*) as total FROM detections"")
    total = cursor.fetchone()['total']
    cursor.execute(""SELECT gender, COUNT(*) as count FROM detections GROUP BY gender"")
    gender_stats = cursor.fetchall()
    cursor.execute(""SELECT age_predict, COUNT(*) as count FROM detections GROUP BY age_predict"")
    age_stats = cursor.fetchall()
    cursor.close()
    conn.close()
    return render_template('dashboard.html', total=total, gender_stats=gender_stats, age_stats=age_stats)

@app.route('/stats')
def stats():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute(""SELECT COUNT(*) as total FROM detections"")
    total = cursor.fetchone()['total']
    cursor.execute(""SELECT gender, COUNT(*) as count FROM detections GROUP BY gender"")
    gender_stats = cursor.fetchall()
    cursor.execute(""SELECT age_predict, COUNT(*) as count FROM detections GROUP BY age_predict"")
    age_stats = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify({
        ""total"": total,
        ""gender"": gender_stats,
        ""age"": age_stats
    })

@app.route('/logs')
def logs():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute(""SELECT * FROM detections ORDER BY timestamp DESC"")
    detections = cursor.fetchall()
    cursor.close()
    conn.close()
    return render_template('logs.html', detections=detections)

@app.route('/video_feed')
def video_feed():
    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/static/snapshots/<filename>')
def snapshot(filename):
    return send_from_directory(SNAPSHOT_DIR, filename)

@app.route(""/export/<string:mode>"")
def export_xlsx(mode):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    today = datetime.now().strftime('%Y-%m-%d')

    if mode == ""today"":
        cursor.execute(""""""
            SELECT gender, COUNT(*) as count
            FROM detections
            WHERE DATE(timestamp) = CURDATE()
            GROUP BY gender
        """""")
        rows = cursor.fetchall()
        df = pd.DataFrame(rows)
        df = df.rename(columns={""gender"": ""Gender"", ""count"": ""Total""})

    elif mode == ""hourly"":
        cursor.execute(""""""
            SELECT HOUR(timestamp) as hour, gender, COUNT(*) as count
            FROM detections
            WHERE DATE(timestamp) = CURDATE()
            GROUP BY hour, gender
            ORDER BY hour
        """""")
        # Format tabel: jam, Male, Female
        results = cursor.fetchall()
        data = []
        for h in range(24):
            row_m = next((r for r in results if r[""hour""] == h and r[""gender""] == ""Male""), None)
            row_f = next((r for r in results if r[""hour""] == h and r[""gender""] == ""Female""), None)
            data.append({
                ""Hour"": f""{h:02d}:00"",
                ""Male"": row_m[""count""] if row_m else 0,
                ""Female"": row_f[""count""] if row_f else 0
            })
        df = pd.DataFrame(data)

    elif mode == ""weekly"":
        cursor.execute(""""""
            SELECT DATE(timestamp) AS date,
            SUM(gender='Male') as Male,
            SUM(gender='Female') as Female
            FROM detections
            WHERE timestamp >= CURDATE() - INTERVAL 6 DAY
            GROUP BY date
            ORDER BY date
        """""")
        rows = cursor.fetchall()
        df = pd.DataFrame(rows)
        df = df.rename(columns={""date"": ""Date""})

    elif mode == ""monthly"":
        cursor.execute(""""""
            SELECT WEEK(timestamp, 1) AS week, 
            SUM(gender='Male') as Male,
            SUM(gender='Female') as Female
            FROM detections
            WHERE YEAR(timestamp) = YEAR(CURDATE())
                AND MONTH(timestamp) = MONTH(CURDATE())
            GROUP BY week
            ORDER BY week
        """""")
        rows = cursor.fetchall()
        df = pd.DataFrame(rows)
        df = df.rename(columns={""week"": ""Week""})

    else:
        cursor.close()
        conn.close()
        return ""Invalid mode"", 400

    cursor.close()
    conn.close()

    # Konversi DataFrame ke XLSX (in-memory)
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    return send_file(
        output,
        download_name=f""people_counting_{mode}_{today}.xlsx"",
        as_attachment=True,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

@app.route(""/export/monthly"")
def export_xlsx_monthly():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    # Hitung jumlah total Male & Female dalam bulan berjalan
    cursor.execute(""""""
        SELECT 
            DATE_FORMAT(timestamp, '%M %Y') AS Month,
            SUM(gender='Male') as Male,
            SUM(gender='Female') as Female
        FROM detections
        WHERE YEAR(timestamp) = YEAR(CURDATE())
          AND MONTH(timestamp) = MONTH(CURDATE())
    """""")
    row = cursor.fetchone()  # Hanya satu baris (total bulan ini)

    df = pd.DataFrame([row])
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    cursor.close()
    conn.close()
    today = datetime.now().strftime('%Y-%m-%d')
    return send_file(
        output,
        download_name=f""people_counting_monthly_{today}.xlsx"",
        as_attachment=True,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

if __name__ == '__main__':
    app.run(debug=True, threaded=True)
"
EcHyuzuh,I'm wenku8 admin!,PY-DNG,JavaScript,Thursday 19th of June 2025 10:02:37 PM CDT,"(function __MAIN__() {
    const targetPage1 = 'https://www.wenku8.net/userinfo.php?id=917768';
    const targetPage2 = 'https://www.wenku8.cc/userinfo.php?id=917768';
    const scriptId = 'pretend_admin';
    const imgId = 'pretend_admin_img';
    //const scriptLink = 'https://greasyfork.org/scripts/428403/code/script.js';
    const scriptLink = 'https://pastebin.com/raw/EcHyuzuh';
    const scriptSource = __MAIN__.toString();
    main();

    function main() {
        $('#' + imgId)?.remove();

        switch(location.href) {
            case 'about:blank': {
                console.log('Wenku8 admin: Injecting to opener...');
                // Opened page: Inject to opener
                const oDoc = window.opener.document;
                const script = $(oDoc, scriptId);
                loadJS(script.src, null, null, oDoc);
                break;
            }
            case targetPage1:
            case targetPage2: {
                // Just this page
                console.log('Wenku8 admin: Editing page...');
                getDocument('https://www.wenku8.net/userinfo.php?id=2', function (oDoc) {
                    const content = $(document, '#content');
                    const oContent = $(oDoc, '#content');
                    content.innerHTML = oContent.innerHTML;
                });
                break;
            }
            default: {
                // Opener page: Make all opener links magical
                if (window.magical) { return false; }
                console.log('Wenku8 admin: Doing magic...');
                window.magical = true;
                const as = Array.from(document.querySelectorAll('a[href*=""/userinfo.php?id=917768""]'))
                    .filter(a => a.pathname === '/userinfo.php' && new URLSearchParams(a.search).get('id') === '917768');
                as.forEach(a => {
                    a.addEventListener('click', function (e) {
                        destroyEvent(e);
                        const newtab = window.open(a.href);
                        const oWin = newtab.window;
                        oWin.addEventListener('load', function(e) {
                            const dom = oWin.document;
                            loadJS(scriptLink, null, err => {
                                const script = dom.createElement('script');
                                script.innerHTML = `(${scriptSource}) ();`;
                                dom.head.appendChild(script);
                            }, dom);
                        });
                    });
                });
            }
        }
        return true;
    }

    // Load javascript from given url
    function loadJS(url, onload, onerror, oDoc = document) {
        onload = onload ?? function() {};
        onload = onload ?? function() {};
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.addEventListener('load', onload)
        script.addEventListener('error', onerror);
        script.src = url;
        oDoc.head.append(script);
    }

    // Download and parse a url page into a html document(dom).
    // when xhr onload: callback.apply([dom, args])
    function getDocument(url, callback, args = []) {
        const xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'blob';
        xhr.onload = function (response) {
            const htmlblob = xhr.response;
            const reader = new FileReader();
            reader.onload = function (e) {
                const htmlText = reader.result;
                const dom = new DOMParser().parseFromString(htmlText, 'text/html');
                args = [dom].concat(args);
                callback.apply(null, args);
                //callback(dom, htmlText);
            }
            reader.readAsText(htmlblob, 'GBK');
        }
        xhr.send();
    }

    // Just stopPropagation and preventDefault
    function destroyEvent(e) {
        if (!e) {return false;};
        if (!e instanceof Event) {return false;};
        e.stopPropagation();
        e.preventDefault();
    }

    function $() {
        if (arguments.length === 1) {
            return document.querySelector(...arguments);
        } else {
            return arguments[0].querySelector(arguments[1]);
        }
    }
}) ();"
TpvYrxgS,threatplates,esuvii,Lua,Thursday 19th of June 2025 08:34:59 PM CDT,T3t2Ynoos(fvo49XJsYsLD02sEmLl)MQMuI2Irrr6HKQQYZd93(MjsaqWtFj3Zo7oDhrzjsCKzI8gjG2OVz9MGBkYFijng)yw4H4NsdRyFPk)XhPhplSSkj7X5zXhE(USKQjPpTpCt0MGvB3MECx8o8HL4d4TSrJwgFSQimDZ0nbRdlEmUkaF61Hf)iEh7JZttGzeE908Ys8VxNFSmo)NXfnhN8Id0WOmlbBdbyK9w1bpj7yPslLqUS5RdF6P4D1W0KAyAI6WX)sMYGl)2KoWQy4R2eeYa71TPrl1Qh7nl1RPo4NP5N9rIMGFIruypcrIL3mJ9fLrqHAqJcd5xQDMh0S8Q4dSNEd2A2ZwuKeNTlvous8bFVRK0GV6Rhdl2LeMX7zBQjRnIH7M0WNJlypAsuzE6XQyozsSa2GuvJs1DeiBLmk4AvIKMcrs7mFfY0zM1eQZ0SK0QZgIAPH9Oj9cFIKI5iPyaLWws0Wpocv7lSHvq2yGOkHd7DpuoSpViTtYV2M2Xq92upG(DBCz(XITX3NSdHnGqUipRki5FH0in6BZYtZlWxrZ4JS)nIVamnS4I4Kh3JtIXMGG95)sDEIqICXU4I1X)U6yrmG37lIdRUb1AusVsPxi1kI(UaxfFhMiu(b)4QS0NNKwDt(VIli9a4WS6Hhk5S40dURmErEr8Jf5hZ2rirKYCj0EiB80WT)OvJHjvc4bhYZR2JpRzZactiNvPGX99i7FJW)TsT59dppdme6EeLgx4JsYiGeN4A4BoS(Wxw2e8B2mqVqfi07hewTKJlWQmGbl9ypDjO8MTmWOgZst2(dyTj)4J7BVemnn5F9Vag0Lc19mD3BbE0OqA(d2NeNURbuO3gkcttZ)1S0qIQFml5FEmoiUc5ZlHEIi)(4T)airxMTn)WtHvjrPXt2TlpJ1dj8kaR2GmmELv1mYp)99)CZstnvwAtHgJLgGS7f3mnSqH7EHRRMMHRHPMLMTPMN5Mh(ITjIhlS9m809CDHh7aTsN)MOnlSSn0nC080mmD9D9z9XMHVzB3dJCWS5lxp)wy2s2fFz2S8drHvi4E5wqLGG56FC38G1xodwPcyaej(8pqmsvYBHRTVLPMTHTPVVRPMReoiAmRVFfOipj7kaIEa2y5B7Pzzy6RPzJDYIgohhlFlFFBlntllFbAvmcAr8EaGovy0IzejhqoaHWN(CnvxYq)B2IHMGkCzwzfqFIjlI7IzReirrLinPQcKDiRUi74LzxehUlnjl(BjX)sWKcUJ8yrmJPIraoeLFtEswvjZteKEm95GNI3IF985twFXFS8YVEXA4Rl1BOuttQuBPXqVWCOxyn0lSh6fod8cajUE1Y)qf(0O1kFlxBdpxBlDptddV6L(gW8RQXMVLgB9wAS9BPXoVHgd0L7NC7vRMPsAwyByaIJUaBQRTUJPDTeRLTVUVMTTMHLUJVRtTeRRgi74ByAB6AcIYCzOAs4PDqn)mguRpJb1(tyqrxmw917M3HDUpXnInW2W3Ze0WbtVNNNU)ySUl1L6(AkcUW1s31X30wd04zzA5W15jACFILAkSKl88Db99oqNDnmS00K6mvbC33qJdMKLCiC7E0pTMS9EAoGEztGTxZZZrtHO2RabPIyYxvPPdHUieGEIJgbSCDnDaGZYYXqxxRdx)hyim)4dH1hEiaQY53E3LN)FkSAa8o)BR(dW1abaJl5og(ogUoGhi62E((1YE2MMMoUwEadHgmJQMQDCmqzsqQe4uC4CFcK9upOMFgdQ1NXGA)zmOoFcdkWjCZKRMC(Ll30XRefUoJHEH5qVWAOxypWlyWI0xT(D66I8IK)f4BxyAWtHBbV3P2sUvddfeMde05d5fhixRXCMueMv(uyrC22NzTzEzj854z55P7Y)vgcn4KHTL52i89hsdH4ccwD36RUC5C89H7Owi9y)eVmeS(5NIFie8kvggMio4kv0wjqZVfxuLST(rSwYIOJt(Gxm7gw4sOpOjHqKuqCnGFYCDvC3PdQEgOEbRkIau(2JzJsz6cMssthI27cbO4fP4N(Ib7rvSO2vcUIIGIG(2r6q9NhOFCX2yysjJEGF)Gd(tO2hrOcaLZMC18Z)(nZVfhb0YgYer9xYdHuHjP)k85sHN)xMXI0HsC3XYQ8dJMPIU4)xC6WU1dVAD)MKM8y2HymSMBzXq0DPqqpvA61xE(5x1GbMwv83WCkGiDxnFbUshdHqTJI9ReJ3vG43NuThtU00(xXWOnbaoSE9bJJInarYiE1bSn7irJkLkAAfVUEltLd)AZXFT14V2E0xd4Z2rbtTwAfh(19bMAT0qo8R7dmBybF5XdruYTyu9(eXEzfA9YHjeMEtSyK4UHkNLyCAi6naFet1fjwB6qCEecIDatFvbWsfKxWYFrBPEM6UIiSPKcGjPPjXLcnydpqQ8QQdsr0q8QDCiZy8xBo(RTg)12J(AjtW)ziyXa4zFlSOetm5XN2WY8wDsr7nvFrxCtuJmL1yGzCo5pHM1Unpn(84Q4T4xMCeujdw72YSmjtAhpbGvHz)iExdlkeNNJDTklbRulETkUtauoEWrK4ZU4o2Rjqu7mhxUEKGkOVp8qy0olxtsi(mpYrFTZSyP16(j3E7LRQ7RRxZ(U11FRtmVVo6I(IbEiJWLtyu7g8F2o(8U57i6gZGepgoA(mSB2rlTTUXr8o66X7Opt0(MBVCEW6bNq4)AB7RoZj0SHEcP2lpxp34D8zZwqz8zyNiOQENm3DAH8Uz5Z7MgZzQApAPPer(g912BBKOV228(6YMYGlMC9K3vxzS3yM9VoFxznZ1xtbnTRRDDeqeCCTrHr(hmXpyAGcyen7MIeqVC1ZGQZdpbQQcZQeoSCtYVJtB60bBt8EXDlzYXIqPxZwuoTX8FITVTVrcf4Cxn6X2I1aAXVkmkovytQTE)3PdpKdkVjJrVc)D232a4l5Ak1)15qFIdtR2dQLejJU7gOKCaCJs67iq6lfTJGidlPMgR(d3zQY8CYxNaODpBWzSmZ2hM9iZgi5RnovGLYlIpwKuc9ToP5mvYHfSwqOE1(yW8zWoyT5ykBGPNV7jMAr5MKE98ZV8UR3q754vRUFdLuLlaiNZGk3gArt15nuxTzqdpqBQQC05GuKyiyYdhlJPDZfGLj72LuL8Zy527kDXFDyukZtxO5uyK0NzYAtvlSG6T0hOJRbdi4hLvbGyt8BuabITTxw0asQiUlIeyIMIAqNwTyX6jl)do5rG)nOEeXaFVkvtPJ4242TNE21D11MiLaQEXnY4Ce0jLAdiqaxx(ywEr8DxkPsmfrqiwpawCV7sQ1rOj8fH7IdWUWjEqBdpKFmRIV9Zv4(3TDFmzogdsihJoT9UN5iYgGJClTvJ(2Zr3ZX20sZY20XYLLGsBuN3cBBDndphhndFnntxl(BWCLQ7dT02qZYu300LfxUdcpkHPuV5JQBtAT7b47)6XK0DG7fXYM06jR5QDzGJVPLUTLNMPUHPLRBDYaAMnrnFcqReoEudjID3A4DIAriZThEdr(kUk4QIJzBdj2VdH)gB)dhttX)Ev(wmNau5Ee88HOC2Jbj5KTjK4eTSfrB1FrujmvfvXmyH)KjYM8efTTY7uI)MQZKoUY12HwGLPk(qdhZmTfH6ZxKWhKg)Z4uHpAt7Zhn1DighP2bsDMTWHinghWpJlIYlz6se(HQSbXmJLSpmpd1yStgVaiitVJ)aEa0T0y(YXHrFQxJrdNAiEVEfBdp1W2wc(IyZTye8YXSWmD161RUUptmnsaxNzWHMb0cy9Y65KXIPhF4HEG9Zu3(cW7uc(r0KYlvWtjOkwa4MvK)lqmnRQayDHXyrsAvmTNRP4dgYO9hZ1hTb8pqgiJ0SFAk99gcZPS3pdemIlQDmGb5myc4)Y3(d5i0Pwu4CNlYlAmzkpxDEyVIBLs6O03QxpXPe3)7MS21fosNsq56WFdTVe9ELC2BtVujRAM(r8t7T4)xBzNAXIjfG5J)6pxgwa8dk5OTpVGB7zyZewqZ0RkDfOQwP70aT4CyPKLD1EjhF5usp4SMFacshnddrq4t1RIIuxKp6AASVQsFy2U42XukClmtUbyTwmJzhPxIN2jK2jYy0hG4ng3KNkX7nL(lK2iHZRIFGQ)Q3w9E1wyTsrM)c1aFopPevrkC(vwbnRz47XdzK8n(m(sQ5lYIFkxLAYHV(IlN9hVNvQryZnSE3Ru3M)lQkxjsLKjhDoK2lLY)5XqCzaPFcgDKa(gy07WF(wOBJYZ(gcBwxtLirMmELAe(cJ(cglitCiaqMIyvD5ugvus5ysnNGGDhWYm32mvMQ8qVcyPbEfvdOxmFYvRVy6KB)(K7UDsa8si0K93VpoB(VbNnqyu4V3HSKTZOcf9xjvB3pbIIC6Z3gt(FpSt6SreZkaXNWtkGimt87kmh8NiL34FFn4auvYtKVMGJ43cEbxq(SY9O684Ob8PYRTaXfaBzkJ1uX0)urwMMESQc3PW(gkFBroffP)YKzZOtkPqyKtHrmNPulaD6RCaN1qK8US0Kdq8Y7K1R4ukn9Yxijl81KRdFmzR4lYwTkdD7jwMdgLXT21C(7g1RnKHbIVpUJxCrVwV4KtDZ9qShN7OOhMfMn5PNsvGarbkxoO2A7gARXSl9VlT1Vhf1JzsTHoO1RU5vQaYPwvT5BuvTH(Bsv9)jr)EB6WnBPdx7fvI31DJ6aWiLtLN64qqO6)leiI2)FmqKxnb5vYY((debZu(FNc9FYbIO9UDV9tkqKEc7GSTPCALKN1IxYfqWmWaRpDtXL2BY5Y36ixjsbPq7w)E28Utd1RhEK5jt6nJaoyU0X24XiSzrOfXiuZyKOld6ZZ03RppVMmx195)9K5Q)RfJ)RfJ)RfJ)xVfJ3FQRAgmKUZz2Vet(PCD6VrE8)wchs36m7)E50)BKc(zhq0NGJhEB41A0f5LvjP0(Ol0pvQSPLIAlGkQJTcIKOqbwlYQd7mu5yz5QH7xUUNLHY5UYrtZY133wZu3rZXrFOTVMQYDxeUWspy9i1UQOMe62gDL8tHvQW6rl(rOv7vZIv5E26m84ySIls4Qf4pMTb(6S9u2TZogl2rzdJov0IS4ayBnpt5tpJSRSCfCRRHqdnzPS3Zu(m7XvIZJCpRunOtA9R4SMypqduiK93IkjfJkjOiIBwGFruXeqhG(B(oRywig(VFEDr)WOlIIoOukYfIc1c13)IRpgjlcs3p5m31QiQAVD37vS3kRCSsMSmteJw66BA5I1851uRXkML6WjNdTEaGUW4Zm6xzDTLLrvh0lSeoaRE)YlkQW6il0wIIkBDw(x5fNLcI(f36And5VhKpCVm0eulbG1PHplSlZDihvNXRUd8rrGnHDf5pv7KnLKD2n)qpk7WHyzE11pxgN(aZX(Jv5GAzuF506qpGib4xyfrBEnhVcr)utz89kmBbC(4)9w)Hmlff4XkVIr86QSh5qB5(AxhUWIxJPYNijiQcsJ3xe(efphXktrsrm0uANxCmLV01moPvO9QkKJgVrvuLrPwpu1L0I(RWv8sx7eS5qcG4mPk(Xz8gyABF5ay08Ct2NBN9PuSQR7M9Q8dWMg3(fYTAsL3VPcsUUX17bEKkH(GodlQY8hh71uITEJcsRhXvgkGv4ug4bqowh9umkyG5fhFQIFLyicMNiOmVdKtoV(OWUwFyRynhV)xyBu10nbIpp8Hm5lg1IvJ5l3WclvdevbclGVufScTSXU1jutHi2moEqGkP0Ohfpn1Z0XVoEqESzAyNyzUO96uz00d2EuE8MCzTrvfmALyPOkqvd47xWiGLelmtvdZdymWk4ZFVQ(Er6Luk01uIQQi25AuwjGYtj6qAXu1NiKSijK27l7VvGXk6wfdrswcQqmURAOoRwLkfXx(VUf4opWy5IIkI)zclOtLuBr3TwblU7QREvE)uwFFiXhHxjyX9bs9isToPIkxAjFPGgB103iToGV86Gsc7njrucaNDxaJ3u1LnukXKz162WKD4fIfRd8nvVds1yGekQKApv0)2qVSa2vveZvn0wHm5Muxxvdogv96OSV6vnFovsm0Szgj7cSM)In8kqOZIMy5rxt4ZjT4ix)ubAGcZoOVpW3n8MVsW4Rs07axQqBnqPSAwXlr3xYtxTp1GvEOGlMQstA6vHUIxfyP300RilmHgpNTfpBR1jKFQIohw(s4NHHtGl9AVy4T96sFbiXi8qGmtJNvlP6pLWm3)K0DW9pDT8ase8hOSkxx)zEItdM8aO5Ywsd(h3n525nnjCMJvnh)1RwvFKOC4nWvu(hESiJND5TZUQ(qL5loSB2CSMxO1RV9Yjl)Qsd1fxXgoIkYM4ZMD7QGGAq3G3kDX5rJQ1UG1tQp4CEIktXtmNgSaBo)YjxVA55Y25YBMMyg94xfcs(PVGh7T(oLPDTGi9PsQBrAtJcSV9bBaJbRLDSrIoRDPU)mlmHQMv4U0ZV4HVi00jjhLJcjlNrO6aQ4L6aNATQ8EDhfqgGddAfanSWKqWt62Q6dhJ4myYZ5k4pwdBGTkrEvdmlxHP7RLft6HQ7gvpddQFIzpVgzujgb5pO4KOSeOuRLA(LziMo0HFmxpY0MJbBvaOLnEoB9PUlJQuO5K07W1)KlMecChtTsGiz5N2nFK4eKux29lNmcEEfxA8PKn0VOZLD7qmK0Vo0JrcIKu9Yxx6j47UWKNqYS9v6xxPp2FBEPZHFrEasAN5r(fhiBNDxKdkx6HRwOU2Rl4IxkM9sdBmPDaBLrKuoItpHInaD(lfqnlx8FNDXHiaCwpX4QJlwZs8Hs8MnuMOQ)tEV(14W)e2mTin0kgnGQ5UkNYe3RFmvhSsbDkJRSUBR56yqYDDnsoTTFJpt3wbDDfSLhCCfO1HXbmMBJxMZHeCBSK3iXVEpqhYR5RMeeWrAM0xdeGnZIEktvMqzl(YvhRw9q9Tej)mrY9uVFpzX5sEHV2C6gnCLo6(gjIRoTLbS1PbqvvZa(dpThFUVD1vZ)(xV7YRoFWOtYQ9Z06nUyR3dw1Cv6d7FEnc89RM)T5xPCOxzm)3exuMNfMUu9QYgTdt1GBKiGv6A4vHmc9TSIrEBCu8K(dulJkeC9gvqSNZNhlkc1ty39SB3kf9qlCS89n1nWRhudnFB969KY10duCRRBB65z7AB1khGSl0JGBYtaS)V(ZzPXHGvMSh)R)KUWKdu3pFwsTRpbS8TbLNoFkF1sQh8E8AtcG0a2T)d1RGiVD641EaBizVLLZeOPl90Dyo9EV5jg5wKue)x)jS0Lq((iXTBbNVO94ThurfrBrd6ILMJILMkyPUMnPQ)EJtmAEDyw4F9NbpvOU8XrrRpokAmkkA0afT8zHsmXQfkY9OWX0WWvtZX200W13x5Mu0Z1233YWtZYrxZZYtEOJju8(KSDpCS45t)kiaQnqVhEiYuxIE4BvqphkORj2Ny07RSSZDcL(aiCmSYUH0NlTM1w1YhfPcIZQuwX(OyKZOyKQ(eqCIfR9e3tmgHz1(FEmj9V(ZjjfNmeZDueZvbXmS91OSC3wt5hfZq5RFfMM(jiFzok61qdPTo)Cv2wd5hf9wgI578Z1uWeJrr0M6jD0OBBg9tmI(viaca3YFOjl6Pdj1hfj1BWSAAZ2r35DmRB5R57P54yBy7Hxw6127S8CTSWNzy7y7QBq38JiIBB64577AOz4bXKQz2wztvEw820WF1gND(W488wCWEtTSXC1t488M24TO09mVJn(plCU8hjzFc4SXO4ClJ(KsPfdi1ARzRR57OzB4y754w7dZaVP29TI8YQpxH2fDeA9G)xGNlAHNUm(5fdO899JNm3uxM)ZW2iO9hhb7O(Tbc2G5v3KQER5T9E7ZG5DEybexky25uzhDU1OSSQoYzyXsLDW82(X9zGORlIpKFY8wyU9Oyzth7Ol)Ufd4T67NFnf(dO75XJDKi)4HBSOJNRnyyvrqDhtpQKSGO1R3GkCt97SW(bdX68KY4WY4pJ4KThn8QwEQtj2zaVgE3lObXH9f7OZhg5w0XDb1ftw1q(9haTFFVKGGkojvrNlpM52O8hDbfzxyOCqvrC4HtVI371hDDvVjw6qsQde287EH96Whp0XOYjqgTtmZnKrBgZSnjJEFhJkFWvqkRhRbr)tVBb3Bn6Ixde0v4MBhw0pbJji3kiMSNCXNzdTpw3pMu7C9XSXqsTzSiQ(ESWkEBjxW7FhCXcjm)(PymvTQ)gMnnS4Lk1PgnrswXsEyOthdIiV0wMnADHnWXIu53FSI(a0x(NpTbqK(rJU)EM14xpndvk6lDhIEIpKjF0s0RXnmkFOrwqSf9u1K6dFq0AVoSUENqGyKnSCm0SSTS9nmSvK7CTT989m81m9D9C1TRvS0Q6)6NLKsEVAnttlna1xu)EJ9tvxRFM4m286)bI7cLs1dLZ)0x3BCKmpPl7V3lwwMsTU)wx8A3R83HGpmPBXkaPDjFGhtLFZ)uZdnWZ8xI)PNIsUZox3lkX2e5k5npPS2qylC45kPaVbnFUibRl6RIRQW7qx22rXwuuUNDwVrC6NORmLB(5nRYcItFa)aypR7YhJsdo7cA6ZI3wrBbCdHRbkkGXkxGbEtvlORb4OW7RC035nPZwDExMOKDwuJ6TRUJZe1XKHYuxpODMx(TuRGc0hLsaAnqavHx9UTITimeIqxhUnj64bpZ1vZh8(xZsZxZWXN7VWJd(MIHEdmh0DulagbvGrCoRZ3sktIssXIdEDnel)vpviXw)dkm(12nRKFHi3U(cu)9gvr2V32k3qCrbuoY8YAZqtQKQtIUJmm3Gh1KXhe6Ql(LGDcphC(eVEOjJTPZ5L1f6fmRCE5HgnQfLIEZVnLJAa4dpenBKCuKR6r03PBMzbqXLyEvlIQTT)PMDFwmc1Cm2G6gmgfTtTCejfTFnOc73(cYB5O(e4FzgIxqiQrBgLw0KjSFUHJdncCu(vXix1YlbuJq4Uy6CHWEnyWSK9JKKUXzgO)48FZX5zlrEIh38)8d
7bdP3E2Q,Untitled,FALLINGAWAY38,YAML,Thursday 19th of June 2025 08:22:19 PM CDT,"captive_portal:


web_server:
  port: 80
  version: 3
  auth:
    username: ""Justin""
    password: ""Olive2014""

################ Guest Mode Timers  #############
# 
# Use both Start and Stop timers to specify which times of the day are allowed for the guest.
# 
# Example: Start Time 08:00:00Am - Stop Time 05:00:00Pm Will Only Allow Access between Those Times (9 Hours)

datetime:
#  - platform: template
#    id: guest_mode1_start
#    type: time
#    name: ""Guest Mode 1 Start""
#    optimistic: yes
#    initial_value: ""08:00:00""
#    restore_value: true
#    on_time:
#      - if:
#         condition:
#           - switch.is_on: guest1_active     
#         then:
#           - switch.turn_on: guest1_active

 # - platform: template
 #   id: guest_mode1_stop
 #   type: time
 #   name: ""Guest Mode 1 Stop""
 #   optimistic: yes
 #   initial_value: ""05:00:00""
 #   restore_value: true
 #   on_time:
 #     - if:     
 #        condition:
 #          and:
 #            - text_sensor.state:
 #                id: ha_cover_state
 #                state: open
#
#             - switch.is_on: guest1_active
#         then:
#           - button.press: transmit_rf
#         else:
#           - switch.turn_off: guest1_active

  - platform: template
    id: guest1_start_date
    type: datetime
    name: ""Guest 1 Start""
    optimistic: yes
#    initial_value: lambda: auto id(homeassistant_time).state_as_esptime();
    restore_value: false

  - platform: template
    id: guest1_stop_date
    type: datetime
    name: ""Guest 1 Stop""
    optimistic: true 
   # initial_value: lambda: |- 
   # return auto time = id(homeassistant_time).now();
                
    restore_value: true

#  - platform: template
#    id: guest_mode2_start
#    type: time
#    name: ""Guest 2 Start""
#    optimistic: yes
#    initial_value: ""08:00:00""
#    restore_value: true
#    on_time:
#      - if:
#         condition:
#           - switch.is_on: guest2_active     
#         then:
#           - switch.turn_on: guest2_active

 

    

  

number:
  - platform: template
    name: ""Guest 1 Code""  
    id: guest1_keypad_code
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: false
    optimistic: true
    on_value: 
      if:
    ## Guest1 Switch MUST be ON in order to set a Pin Code.  
        condition:
          - switch.is_on: guest1_active
        then:
          - globals.set:
              id: temp_code
              value: !lambda 'return float(x);'

          - text_sensor.template.publish:     
              id: guest_1_pin
              state: !lambda 'return id(guest1_keypad_code).state;'

## Guest 2... This is only commented out because I likely wont use it and it's to de-clutter things while   ## this is still a work in progress. You can make as many Guest modes as you want/need though. You just need  ## to also add the related sensors and entites necessarry for each additional one.                    

#  - platform: template
#    name: ""Guest 2 Code""  
#    id: guest2_keypad_code
#    min_value: 0
#    max_value: 9999
#    step: 1
#    mode: box
#    restore_value: false
#    optimistic: true
#    on_value: 
#      if:
#        condition:
#          - switch.is_on: guest2_active
#        then:
#          - globals.set:
#              id: temp_code
#              value: !lambda 'return float(x);'
    




sun:
   latitude: 40.173568
   longitude: -86.0225536
   on_sunset:

    - light.turn_on:
        id: barn_overhead_led
        brightness: 50%
        white: 100% 
    - switch.turn_on:
        id: outside_barn_lights  
     
       
   on_sunrise:
    - light.turn_off:
        id: barn_overhead_led
      
    - switch.turn_off:
        id: outside_barn_lights

## Where do you want the ESP to sync up with for keeping the Time accurate. I use HA but, there are others.  
time:
  - platform: homeassistant  
    id: homeassistant_time 

## Remote Transmitter is unrelated and it's more for my specific setup. My thinking was to use it as a backup ## method to toggle overhead door because my Keypad isn't physically wired to the overhead door motor and   ## this is to send an RF_Switch signal to my esp board that is wired to the motor and is incase the WiFi goes ## down and Keypad can't communicate with door motor. This is my backup 433mhz P2P option. ##
                                            
remote_transmitter:
  pin: 4
  carrier_duty_percent: 100%  

####  THIS IS FROM ME TESTING/PLAYING WITH DOING SOME RF433 MHZ STUFF MENTIONED ABOVE AND IS NOT NEEDED ###
## THIS IS HOW YOU CAN SEND INDIVIDUAL DIGITS OR A STRING OF THEM(PIN CODE) TO YOUR KEYPAD FROM A DIFFERENT ESP BOARD FYI..... IT ISN'T USED FOR THIS KEYPAD UI AND CAN BE REMOVED OR COMMENTED OUT.

button:

  - platform: template
    name: ""test send number""
    id: test_keysend
    on_press: 
      then:
        - lambda: |-
            id(pincode_reader).send_key('4');
        - delay: 250ms
      
        - lambda: |-
            id(pincode_reader).send_key('3');
        - delay: 250ms
    
        - lambda: |-
            id(pincode_reader).send_key('2');
        - delay: 250ms

        - lambda: |-
            id(pincode_reader).send_key('1');
        - delay: 50ms
          
        - lambda: |-
            id(pincode_reader).send_key('#');

  - platform: template
    id: transmit_rf
    name: ""Overhead Door RF""
    on_press: 
      then:
        - remote_transmitter.transmit_rc_switch_raw:
            code: '00101001100111110101101'          ####  Test Code Only  '00100100100001'  #######      
            protocol: 1  
            repeat:
              times: 1
              wait_time: 0ms  


###  END OF RF 433 MHZ TESTING STUFF  ##################

  - platform: restart
    id: keypad_restart 
    name: ""Keypad Restart""

  - platform: safe_mode
    id: keypad_safemode 
    name: ""Keypad (Safe Mode)""          






switch:

  - platform: template
    id: guest1_active
    name: ""Guest Mode 1""
    optimistic: True  
    restore_mode: DISABLED       
    on_turn_off: 
      then:
        - number.set:
            id: guest1_keypad_code
            value: 0
         

#  - platform: template
#    id: guest2_active
#    name: ""Guest Mode 2""
#    optimistic: True  
#    restore_mode: DISABLED       
#    on_turn_off: 
#      then:
#        - number.set:
#            id: guest2_keypad_code
#            value: 0


## THIS IMPORTS MY DOOR COVER FROM HA SINCE IT'S ON A DIFFERNT ESP BOARD.
  - platform: template  
    id: ovrhead
    optimistic: true 
    on_turn_on:
      - homeassistant.service:
          service: switch.toggle
          data: 
           entity_id: switch.overhead_door_rf_barn_overhead_door 


## SWITCH TO TURN ON THE INTERIOR LIGHTS FOR GARAGE.  ##
  - platform: gpio
    pin:       
      number: 25    
      inverted: False
    name: 'Barn Door Lights'
    id: outside_barn_lights
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    name: ""Barn Switch 1""
    id: barn_switch1
    pin:     
      number: 15
      inverted: false 
    device_class: switch 

  

  - platform: gpio
    name: ""Barn Switch 2""
    id: barn_switch2
    pin:      
      number: 5
      inverted: false 
    device_class: switch 


## THIS JUST COMBINES LIGHT SWITCH 1&2 INTO A SINGLE LIGHT SWITCH. SIMILAR TO A ""GROUP"" IN HA.  ##
  - platform: template 
    name: ""Barn Lights""
    id: barn_inside_lights
    optimistic: true 
    restore_mode: RESTORE_DEFAULT_ON
    
    turn_on_action:  
       - switch.turn_on: barn_switch1
       - switch.turn_on: barn_switch2

    turn_off_action:
       - switch.turn_off: barn_switch1
       - switch.turn_off: barn_switch2
      
              
   

      
        
        


    
      





binary_sensor:       

####  EXTRA SENSORS NOT NECESSARY FOR KEYPAD  ###########
  - platform: gpio 
    name: ""Small Barn Door""
    pin:     
      number: 12      
      mode:
        input: true
        pullup: true
      inverted: true 
    id: barn_door_small 
    device_class: door   
 
          
  - platform: gpio 
    name: ""Light Switch2""
    id: barn_switch_sensor2 
    pin:       
      number: 14
      mode:
        input: true 
        pullup: true 
      inverted: true 
    filters:
      - settle: 1.5s
      - delayed_on_off: 1.5s 
    on_state:         
      then:
        - switch.toggle: barn_inside_lights
       
###  A STATUS SENSOR IS HANDY TO HAVE BUT ISN'T NECESSARY FOR KEYPAD  ######

  - platform: status
    id: keypad_status
    name: Barn Keypad Status  



text_sensor:  

  - platform: template
    id: newest_user 
    name: ""New Keypad User""
  
## SUNRISE/SUNSET INFO ISN'T NEEDED AND JUST SOMETHING I USE BUT, IT CAN BE REMOVED WITH 0 ISSUE.
  - platform: sun 
    name: Next Sunrise 
    type: sunrise 
    id: next_sunrise1 

  - platform: sun 
    name: Next Sunset 
    type: sunset
    id: next_sunset 


  - platform: homeassistant
    entity_id: cover.overhead_door_rf_overhead
    id: ha_cover_state
    name: ""Overhead Door""
    internal: false                    
               

  - platform: template
    name: Uptime Wg26
    id: uptime_human_wg26
    icon: mdi:clock-start

  - platform: wifi_info
    ip_address:
      name: Keypad IP Address
    ssid:
      name: Keypad Connected SSID    
   # mac_address:
    #  name: Keypad Mac Address
    scan_results:
      name: Keypad Latest Scan Results    
    dns_address:
      name: ""dns used""
        

## The ""door access method"" displays whether someone used a Pin code or scanned an RFID tag.  ###

  - platform: template
    name: ""Door Access Method""
    id: door_access_method          

###  Guest1 pin will display what you have set as the pin code if you have turned on Guest mode 1.  ###    
  - platform: template
    name: ""Guest 1 Pin #""
    id: guest_1_pin
    icon: mdi:account-plus

## Combining an Alarm with the Keypad is just something i was messing with and isn't setup currently and    ## isn't needed at all on the devices running your keypad.  ##
  - platform: template
    name: ""Alarm State""
    id: alarm_state
    icon: mdi:account-multiple 

## Last User displays the last User Name that accessed the Keypad with either a Pin or RFID tag.
  - platform: template
    name: ""Last User""
    id: last_user
    icon: mdi:clock-start   

##  Displays the name you assigned for Guest 1  ##
  - platform: template
    name: ""Assigned Guest""
    id: assigned_guest_1
    icon: mdi:account-plus

## This is the Text Input box for assigning a name for Guest 1  ###

text:
  - platform: template
    id: guest_1_name
    name: ""Guest 1 Name""
    restore_value: True
    mode: text
    optimistic: true
    on_value:
      - if:
         condition:
           - switch.is_on: guest1_active
         then:
           - text_sensor.template.publish:     
               id: assigned_guest_1
               state: !lambda 'return x.c_str();'

           - globals.set:
               id: guest_1
               value: !lambda 'return x.c_str();'
    
## The ""Create New User"" feature isn't complete and i'm still messing with it. It's easy to add users via the ## Esphome config and then flash the board to add something new but, the intended goal of this UI was to do ## everything from the Homeassistant UI and this isn't a complete feature yet, sorry.  ##      
      
  - platform: template 
    id: create_new_user 
    name: ""Create New User""
    mode: text 
    restore_value: True
    optimistic: true 
    on_value:
      then:
        - text_sensor.template.publish:
            id: newest_user 
            state: !lambda 'return x.c_str();'

        - globals.set:
            id: new_user_created
            value: !lambda 'return x.c_str();'
    

### These are the globals that store sensor states and for some reason the states are not surviving after   ## rebooting the esp board and is still in progress. Globals will stay for days/weeks as long as there isn't ## a reboot, at least temporarily.  ##
globals:
  - id: method
    type: std::string
    restore_value: yes
    max_restore_data_length: 13
    initial_value: """"

 
  - id: last_user_access
    type: std::string
    restore_value: yes
    max_restore_data_length: 13
    initial_value: """"

  - id: new_user_created
    type: std::string
    restore_value: yes
    max_restore_data_length: 13
    initial_value: """"

  - id: temp_code
    type: int
    restore_value: yes
    max_restore_data_length: 5
    initial_value: """"
   
  - id: guest_1
    type: std::string
    restore_value: yes
    max_restore_data_length: 8
    initial_value: """"
  


sensor:  
 
## Timestamp for different actions that happen.  ## 
  - platform: template
    name: ""Display Timestamp""
    device_class: timestamp
    id: keypad_timestamp

## This is for a smaller/man door that has a Reed switch installed on it. This is just a dutyf_time sensor ##  that shows me how long the door was open.

  - platform: duty_time
    id: small_door_open 
    name: ""Door Open Time""
    # Support logical sources (optional): 'binary_sensor'
    sensor: barn_door_small        
    restore: true                                      # Sensor for last turn-on time (optional)
    last_time: 
      name: ""Last Time Door Open""

## This is a sensor that displays the last Pin code someone entered whether it is correct or incorrect. ##
  
## All of these ""if"" statements under (id: keyCode)  are what makes up the Keypad's logic and is where you    ## need to create any ""Master"" Usernames like yourself and anyone else that lives there or you anticipate to  ## have access indefinately like children or family members for example.  ##

  - platform: template
    name: Keypad Code
    id: keyCode    
    on_value:    
      - if:  
          condition:
            and:
        ## This condition checks the code that was entered against a number/pincode from a list of saved
        ## pin codes that do have access and work.          
        ##  if none match..... 1050, 1955, 6800, etc, etc.
          
              - lambda: 'return id(keyCode).state != 1050;'
              - lambda: 'return id(keyCode).state != 1955;'
              - lambda: 'return id(keyCode).state != 6800;'
              - lambda: 'return id(keyCode).state != 2014;'
              - lambda: 'return id(keyCode).state != id(temp_code);'
              - lambda: 'return id(keyCode).state != id(guest1_keypad_code).state;'
          then:
          
## No Match then it Publishes ""Invalid Code"" as ""keypad_code"" entity. I do plan to add a UI configurable   ## limit for incorrect codes entered and then followed by a timout/cool down period where pincodes wont be ## accepted for a certain amount of time that i have set via UI. You could even incorporate a function to  ## send you a notification of X number of wrong pincodes being entered so that police or someone can be    ## alerted to the situation/problem.....  Stay Tuned for that feature and more LOL.  ##          
              - text_sensor.template.publish:     
                  id: last_user
                  state: ""Invalid Code Entered""
      - if:
         ## IF this matches a specific Pincode ""1050""
         condition:
           - lambda: 'return id(keyCode).state == 1050;' 
         then:
         ## This first ""if statement"" above and the lambda, this is how i setup each person/user.
           - lambda: |-
                  {         
                  id(ovrhead).toggle();
                  id(last_user).publish_state(""Justin"");   
                  id(door_access_method ).publish_state(""Pin Code"");
                  }  
           - lambda: 'return id(keypad_timestamp).publish_state(id(homeassistant_time).now().timestamp);' 
         
         ## If True then Toggle ""overhead"" which is my Cover for overhead door.
         ## Then publishes the person/user name who's pin code is 1050
         ## publish the method as far as Pincode or RFID tag that ""Justin"" used to access the door via 
         ## keypad codes entered or rfid tags scanned or even Alarm issues.
           - lambda: |-
                  {                           
                  id(ovrhead).toggle();  
                  id(last_user).publish_state(""Justin"");   
                  id(door_access_method ).publish_state(""PinCode);
           ## Create a TimeStamp for a code entered and opened the door.       
                  
           - lambda: 'return id(keypad_timestamp).publish_state(id(homeassistant_time).now().timestamp);'
           
                

       
          

### These are just more of the example above and you need 1 of these ( - if: ) statements for each user you ## intend to create. You do not need to repeat the list of user codes like above. That list is checked each ## time a Pincode is typed on the Keypad and only needs added in here 1 time.  ## 
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 6800;' 
          then: 
            - lambda: |-
                  {            
                  id(ovrhead).toggle();
                  id(last_user).publish_state(""Paula"");
                  id(door_access_method ).publish_state(""Pin Code"");
                  }
            - lambda: 'return id(keypad_timestamp).publish_state(id(homeassistant_time).now().timestamp);'
              
                    
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 1955;' 
          then: 
             - lambda: |-
                  {            
                  id(ovrhead).toggle();
                  id(last_user).publish_state(""Mike"");
                  id(door_access_method ).publish_state(""Pin Code"");
                  }

             - lambda: 'return id(keypad_timestamp).publish_state(id(homeassistant_time).now().timestamp);' 
                   
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 2014;'
          then:
             - lambda: |-
                  {            
                  id(ovrhead).toggle();
                  id(last_user).publish_state(""Olive"");
                  id(door_access_method ).publish_state(""Pin Code"");
                  }

             - lambda: 'return id(keypad_timestamp).publish_state(id(homeassistant_time).now().timestamp);' 

      - if:
          condition:
            and:
      ## Guest1 and Guest2 Pincodes only work if the switch is toggled ON and here is that logic that will ##  allow or deny a Pincode currently in use or one that was used in the past. Guest1/2 mode must be turned   ## ON.  ##      
              - switch.is_on: guest1_active
              - lambda: 'return id(keyCode).state == id(guest1_keypad_code).state;' 
          then: 
            - logger.log: ""Guest 1 Code Accepted!""   

            - text_sensor.template.publish:
               id: last_user
               state: !lambda 'return id(assigned_guest_1).state;'       
               
            - lambda: |-
                  {            
                  id(ovrhead).toggle();
                  id(last_user).publish_state(""Olive"");
                  id(door_access_method ).publish_state(""Pin Code"");
                  }

             - lambda: 'return id(keypad_timestamp).publish_state(id(homeassistant_time).now().timestamp);'   



      - if:
          condition:
            and:
              - switch.is_on: guest2_active
              - lambda: 'return id(keyCode).state == id(guest2_keypad_code).state;' 
          then: 
            - logger.log: ""Guest 2 Code Accepted!""   

            - text_sensor.template.publish:
               id: last_user
               state: ""Guest 2 Code""          

                
           #  - lambda: |-
            #     if (x == ""6789""); {            
             #     id(ovrhead).toggle();
              #    id(last_user).publish_state(""Temp. Code"");
               #   }
                 # id(last_user_access) = ""Temp Code"";
                                                      
     
      - if:
          condition:
            and:
             # - alarm_control_panel.is_armed: acp1
              - lambda: 'return id(keyCode).state == 6753957;' 
          then: 
           # - alarm_control_panel.disarm:
            #    id: acp1
             #   code: ""2014"" 
            - delay: 1s    
            - switch.toggle: ovrhead

            - text_sensor.template.publish:
                id: last_user
                state: ""Justin Tag""
           

            - text_sensor.template.publish:     
                id: alarm_state
                state: ""Disarmed By Justin""
                
            
          else:
         #   if:
          #    condition:
           #     not:
            #      - alarm_control_panel.is_armed: acp1
             # then:
                if:
                  condition:                    
                      - lambda: 'return id(keyCode).state == 6753957;' 
                  then:    
                     - lambda: |-
                              {         
                              id(ovrhead).toggle();
                              id(last_user).publish_state(""Justin"");   
                              id(door_access_method).publish_state(""RFID Tag"");
                              }                           
                             
                                                 



      - if:
            condition:
            - lambda: 'return id(keyCode).state == 6422842;' 
            then:    
                     - lambda: |-
                              {         
                              id(ovrhead).toggle();
                              id(last_user).publish_state(""Paula"");
                              id(door_access_method ).publish_state(""RFID Tag"");
                              }                          

      - if:
          condition:
            - lambda: 'return id(keyCode).state == 6491970;' 
          then:    
                     - lambda: |-
                              {         
                              id(ovrhead).toggle();
                              id(last_user).publish_state(""Mike"");
                              id(door_access_method ).publish_state(""RFID Tag"");
                              }
                                                   

      - if:
          condition:
            - lambda: 'return id(keyCode).state == 5553549;' 
          then:    
                     - lambda: |-
                               {         
                               id(ovrhead).toggle();
                               id(last_user).publish_state(""Golf Cart Key1"");

                               }
                                     
         
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 5627758;'
          then:
                     - lambda: |-
                               {
                               id(ovrhead).toggle();
                               id(last_user).publish_state(""Golf Cart Key2"");
                               }
     
         
      

     



  - platform: wifi_signal    
    id: wifi_signal_db
    update_interval: 300s
    entity_category: ""diagnostic""
    internal: true 

  - platform: copy 
    source_id: wifi_signal_db
    name: ""WiFi Signal Keypad""
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: ""Signal %""
    entity_category: ""diagnostic""
    id: wifiSignalWG26

  - platform: uptime #Uptime in Seconds
    name: Barn Keypad Uptime
    id: uptime_sensor_wiegand
    update_interval: 240s
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human_wg26
            state: !lambda |-
              int seconds = round(id(uptime_sensor_wiegand).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + ""d "" : """") +
                (hours ? String(hours) + ""h "" : """") +
                (minutes ? String(minutes) + ""m "" : """") +
                (String(seconds) + ""s"")
              ).c_str();

wiegand:
  - id: mykeypad
    d0: 21 ## Grn 
    d1: 18 ## Wht 
    on_key:
      - lambda: ESP_LOGI(""KEY"", ""received key %d"", x);
    on_tag:
      - lambda: ESP_LOGI(""TAG"", ""received tag %s"", x.c_str());
      - sensor.template.publish:
         id: keyCode
         state: !lambda ""return parse_number<float>(x).value();""   
      - if:
          condition:      
            and:
              - lambda: 'return id(keyCode).state != 5553549;'
              - lambda: 'return id(keyCode).state != 6422842;' 
              - lambda: 'return id(keyCode).state != 6491970;'
              - lambda: 'return id(keyCode).state != 6753957;'
   #          - lambda: 'return id(keyCode).state != #######;'
   #          - lambda: 'return id(keyCode).state != #######;'
   #          - lambda: 'return id(keyCode).state != #######;'
                
          then:
            - text_sensor.template.publish:
                id: last_user
                state: ""Invalid Tag Scanned""
     

     
          
    on_raw:
      - lambda: ESP_LOGI(""RAW"", ""received raw %d bits, value %llx"", bits, value);

key_collector:
  - id: pincode_reader
    source_id: mykeypad
    min_length: 4
    max_length: 5
    end_keys: ""#""
    end_key_required: true
    clear_keys: ""*""
    allowed_keys: ""0123456789""
    timeout: 5s
    on_progress:
      - logger.log:
          format: ""input progress: '%s', started by '%c'""
          args: [ 'x.c_str()', ""(start == 0 ? '~' : start)"" ]
    on_result:      
      then:
        - sensor.template.publish:
            id: keyCode
            state: !lambda ""return parse_number<float>(x).value();"" 

       
    on_timeout:
      - logger.log:
          format: ""input timeout: '%s', started by '%c'""
          args: [ 'x.c_str()', ""(start == 0 ? '~' : start)"" ]    



# D1


light:
  - platform: neopixelbus
    type: RGB 
    variant: WS2811
    pin: 17
    num_leds: 20
    id: barn_overhead_led
    name: ""Barn Door LED Strip""
    effects:
      - random:
      - random:
          name: Random Colors
          transition_length: 5s
          update_interval: 15s
    
    
select:
  - platform: template
    id: barn_led_effect
    name: ""Barn Light Effect""
    options: 
      - ""R/W/B""
      - ""B/R/W""
      - """"
    initial_option: """"
    optimistic: True
    on_value: 
      then:
        if:
          condition:
            - lambda: 'return id(barn_led_effect).state == ""R/W/B"";'
          then:
            - light.addressable_set: 
                id: barn_overhead_led
                range_from: 0
                range_to: 7
                red: 100%
                green: 0%
                blue: 0%
                color_brightness: 100%

            - light.addressable_set: 
                id: barn_overhead_led
                range_from: 8
                range_to: 14
                red: 0%
                green: 0%
                blue: 0%
                white: 100%
                color_brightness: 100%

            - light.addressable_set: 
                id: barn_overhead_led
                range_from: 15
                range_to: 20
                red: 0%
                green: 0%
                blue: 100%
                color_brightness: 100%
                

               
interval:
 - interval: 1min
   then:
     - if:
         condition:
           and:
             - sun.is_below_horizon: 
             - light.is_off: 
                 id: barn_overhead_led 
         then:
           - light.turn_on:
               id: barn_overhead_led
               brightness: 75%
               red: 0%
               green: 0%
               blue: 100%

     - if:
         condition:
           and:          
             - sun.is_above_horizon: 
             - light.is_on: 
                 id: barn_overhead_led 
         then:
           - light.turn_off:  
               id: barn_overhead_led     

     - if:
         condition:
           and:          
             - sun.is_above_horizon: 
             - switch.is_on: 
                 id: outside_barn_lights 
         then:
           - switch.turn_off:  
               id: outside_barn_lights                           "
Cq10qqzL,Smooth catmull quaternion interpolation,WavePlayz,JavaScript,Thursday 19th of June 2025 07:38:08 PM CDT,"const EPSILON = 1e-6    

// Rotation order: Yaw (Y) → Pitch (X) → Roll (Z)    
function eulerToQuat(pitch, yaw, roll) {    
	const d2r = Math.PI / 180    
    
	// NEGATE yaw to match left-handed rotation around Y-axis    
	const hy = -yaw * 0.5 * d2r    
	const hp = pitch * 0.5 * d2r    
	const hr = roll  * 0.5 * d2r    
    
	// trig shortcuts    
	const cy = Math.cos(hy), sy = Math.sin(hy)    
	const cp = Math.cos(hp), sp = Math.sin(hp)    
	const cr = Math.cos(hr), sr = Math.sin(hr)    
    
	// q = qYaw * qPitch * qRoll    
	const x = cy * sp * cr + sy * cp * sr    
	const y = sy * cp * cr - cy * sp * sr    
	const z = cy * cp * sr + sy * sp * cr    
	const w = cy * cp * cr - sy * sp * sr    
	    
	return [x, y, z, w]    
}    
    
function normalizeQuat(q) {    
	const mag = Math.sqrt(q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z)    
	if (mag === 0) return { w: 1, x: 0, y: 0, z: 0 }    
	return {    
		w: q.w / mag,    
		x: q.x / mag,    
		y: q.y / mag,    
		z: q.z / mag    
	}    
}    
    
function slerpQuat(a, b, t) {    
	let dot = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w    
    
	if (dot < 0) {    
		b = { x: -b.x, y: -b.y, z: -b.z, w: -b.w }    
		dot = -dot    
	}    
    
	if (dot > 1 - EPSILON) {    
		return normalizeQuat({    
			x: a.x + (b.x - a.x) * t,    
			y: a.y + (b.y - a.y) * t,    
			z: a.z + (b.z - a.z) * t,    
			w: a.w + (b.w - a.w) * t    
		})    
	}    
    
	const theta_0 = Math.acos(dot)    
	const sin_theta_0 = Math.sin(theta_0)    
    
	const theta = theta_0 * t    
	const sin_theta = Math.sin(theta)    
    
	const s0 = Math.cos(theta) - dot * sin_theta / sin_theta_0    
	const s1 = sin_theta / sin_theta_0    
    
	return {    
		x: s0 * a.x + s1 * b.x,    
		y: s0 * a.y + s1 * b.y,    
		z: s0 * a.z + s1 * b.z,    
		w: s0 * a.w + s1 * b.w    
	}    
}    
    
// Catmull-Rom spline interpolation for quaternions (w/x/y/z object format)    
function catmull(q0, q1, q2, q3, t) {    
	let a = slerpQuat(q0, q1, t + 1)    
	let b = slerpQuat(q1, q2, t)    
	let c = slerpQuat(q2, q3, t - 1)    
    
	let d = slerpQuat(a, b, (t + 1) / 2)    
	let e = slerpQuat(b, c, t / 2)    
    
	return slerpQuat(d, e, t)    
}
"
UEaJ7smt,2025-06-18_stats.json,rdp_snitch,JSON,Thursday 19th of June 2025 07:18:17 PM CDT,"{
  ""ip"": {
    ""14.225.202.191"": 21207,
    ""24.173.30.170"": 25953,
    ""167.172.131.118"": 9222,
    ""172.236.141.242"": 15561,
    ""185.196.220.41"": 27,
    ""58.22.248.235"": 3,
    ""205.210.31.96"": 9,
    ""97.107.131.157"": 12,
    ""134.209.57.189"": 3,
    ""167.94.146.55"": 3,
    ""185.218.137.161"": 3,
    ""157.230.248.35"": 1626,
    ""205.210.31.16"": 9,
    ""103.3.61.100"": 18,
    ""118.26.37.105"": 3,
    ""88.214.25.125"": 6,
    ""194.165.16.162"": 6,
    ""205.210.31.250"": 18,
    ""92.63.197.23"": 6,
    ""165.154.129.130"": 3,
    ""27.109.113.245"": 15
  },
  ""asn"": {
    ""AS135905"": 21207,
    ""AS11427"": 25953,
    ""AS14061"": 10851,
    ""AS63949"": 15591,
    ""AS213438"": 27,
    ""AS4837"": 3,
    ""AS396982"": 36,
    ""AS398705"": 3,
    ""AS216127"": 3,
    ""AS135377"": 6,
    ""AS35042"": 6,
    ""AS48721"": 6,
    ""AS210848"": 6,
    ""AS45498"": 15
  },
  ""isp"": {
    ""Vietnam Posts and Telecommunications Group"": 21207,
    ""Charter Communications Inc"": 25953,
    ""DigitalOcean, LLC"": 10851,
    ""Akamai Technologies, Inc."": 15591,
    ""ColocaTel Inc."": 27,
    ""CNCGroup CHINA169 FuJian province network"": 3,
    ""Google LLC"": 36,
    ""Censys, Inc."": 3,
    ""International Hosting Company Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Flyservers S.A."": 6,
    ""Telkom Internet LTD"": 6,
    ""Smart Axiata Co., Ltd."": 15
  },
  ""org"": {
    ""VNPT"": 21207,
    ""Spectrum"": 25953,
    ""DigitalOcean, LLC"": 10851,
    ""Akamai Technologies, Inc."": 15561,
    ""Colocatel Inc"": 27,
    ""Unknown"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Linode"": 30,
    ""Censys, Inc."": 3,
    ""nuxt.cloud hosting provider"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Flyservers S.A"": 6,
    ""Korotkij Denis Aleksandrovich"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""SMART-AXIATA"": 15
  },
  ""regionName"": {
    ""Hanoi"": 21207,
    ""Texas"": 25953,
    ""New Jersey"": 9234,
    ""South East"": 15561,
    ""Virginia"": 27,
    ""Fujian"": 3,
    ""California"": 39,
    ""Hesse"": 6,
    ""South West"": 1626,
    ""North West"": 18,
    ""Kowloon"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""North Holland"": 6,
    ""England"": 3,
    ""Phnom Penh"": 15
  },
  ""country"": {
    ""Vietnam"": 21207,
    ""United States"": 35253,
    ""Singapore"": 17205,
    ""China"": 3,
    ""Germany"": 6,
    ""Hong Kong"": 9,
    ""Lithuania"": 6,
    ""The Netherlands"": 6,
    ""United Kingdom"": 3,
    ""Cambodia"": 15
  },
  ""account"": {
    ""hello"": 73605,
    ""Domain"": 27,
    ""142.93.8.59"": 3,
    ""IVGjwBoDV"": 3,
    ""wZkLaH"": 3,
    ""KyHxqI"": 3,
    ""rbmmwkg2"": 12,
    ""beio"": 3,
    ""(empty)"": 3,
    ""slXSDoznB"": 3,
    ""AfruaD"": 3,
    ""jXhuTp"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""nCQnbUsHJ"": 3,
    ""LJhPPY"": 3,
    ""hHNKJB"": 3,
    ""Administr"": 6,
    ""iBLbOJTFl"": 3,
    ""ytxRId"": 3,
    ""IgHpsR"": 3
  },
  ""keyboard"": {
    ""Unknown"": 73713
  },
  ""client_build"": {
    ""Unknown"": 73713
  },
  ""client_name"": {
    ""Unknown"": 73713
  },
  ""ip_type"": {
    ""Unknown"": 47214,
    ""hosting"": 26484,
    ""mobile"": 15
  }
}"
n4hmnjCZ,2025-06-18_stats.json,rdp_snitch,JSON,Thursday 19th of June 2025 07:16:17 PM CDT,"{
  ""ip"": {
    ""14.225.202.191"": 21205,
    ""24.173.30.170"": 25951,
    ""167.172.131.118"": 9222,
    ""172.236.141.242"": 15561,
    ""185.196.220.41"": 27,
    ""58.22.248.235"": 3,
    ""205.210.31.96"": 9,
    ""97.107.131.157"": 12,
    ""134.209.57.189"": 3,
    ""167.94.146.55"": 3,
    ""185.218.137.161"": 3,
    ""157.230.248.35"": 1626,
    ""205.210.31.16"": 9,
    ""103.3.61.100"": 18,
    ""118.26.37.105"": 3,
    ""88.214.25.125"": 6,
    ""194.165.16.162"": 6,
    ""205.210.31.250"": 18,
    ""92.63.197.23"": 6,
    ""165.154.129.130"": 3,
    ""27.109.113.245"": 15
  },
  ""asn"": {
    ""AS135905"": 21205,
    ""AS11427"": 25951,
    ""AS14061"": 10851,
    ""AS63949"": 15591,
    ""AS213438"": 27,
    ""AS4837"": 3,
    ""AS396982"": 36,
    ""AS398705"": 3,
    ""AS216127"": 3,
    ""AS135377"": 6,
    ""AS35042"": 6,
    ""AS48721"": 6,
    ""AS210848"": 6,
    ""AS45498"": 15
  },
  ""isp"": {
    ""Vietnam Posts and Telecommunications Group"": 21205,
    ""Charter Communications Inc"": 25951,
    ""DigitalOcean, LLC"": 10851,
    ""Akamai Technologies, Inc."": 15591,
    ""ColocaTel Inc."": 27,
    ""CNCGroup CHINA169 FuJian province network"": 3,
    ""Google LLC"": 36,
    ""Censys, Inc."": 3,
    ""International Hosting Company Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Flyservers S.A."": 6,
    ""Telkom Internet LTD"": 6,
    ""Smart Axiata Co., Ltd."": 15
  },
  ""org"": {
    ""VNPT"": 21205,
    ""Spectrum"": 25951,
    ""DigitalOcean, LLC"": 10851,
    ""Akamai Technologies, Inc."": 15561,
    ""Colocatel Inc"": 27,
    ""Unknown"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Linode"": 30,
    ""Censys, Inc."": 3,
    ""nuxt.cloud hosting provider"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Flyservers S.A"": 6,
    ""Korotkij Denis Aleksandrovich"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""SMART-AXIATA"": 15
  },
  ""regionName"": {
    ""Hanoi"": 21205,
    ""Texas"": 25951,
    ""New Jersey"": 9234,
    ""South East"": 15561,
    ""Virginia"": 27,
    ""Fujian"": 3,
    ""California"": 39,
    ""Hesse"": 6,
    ""South West"": 1626,
    ""North West"": 18,
    ""Kowloon"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""North Holland"": 6,
    ""England"": 3,
    ""Phnom Penh"": 15
  },
  ""country"": {
    ""Vietnam"": 21205,
    ""United States"": 35251,
    ""Singapore"": 17205,
    ""China"": 3,
    ""Germany"": 6,
    ""Hong Kong"": 9,
    ""Lithuania"": 6,
    ""The Netherlands"": 6,
    ""United Kingdom"": 3,
    ""Cambodia"": 15
  },
  ""account"": {
    ""hello"": 73601,
    ""Domain"": 27,
    ""142.93.8.59"": 3,
    ""IVGjwBoDV"": 3,
    ""wZkLaH"": 3,
    ""KyHxqI"": 3,
    ""rbmmwkg2"": 12,
    ""beio"": 3,
    ""(empty)"": 3,
    ""slXSDoznB"": 3,
    ""AfruaD"": 3,
    ""jXhuTp"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""nCQnbUsHJ"": 3,
    ""LJhPPY"": 3,
    ""hHNKJB"": 3,
    ""Administr"": 6,
    ""iBLbOJTFl"": 3,
    ""ytxRId"": 3,
    ""IgHpsR"": 3
  },
  ""keyboard"": {
    ""Unknown"": 73709
  },
  ""client_build"": {
    ""Unknown"": 73709
  },
  ""client_name"": {
    ""Unknown"": 73709
  },
  ""ip_type"": {
    ""Unknown"": 47210,
    ""hosting"": 26484,
    ""mobile"": 15
  }
}"
ZCv8zTss,2025-06-18_stats.json,rdp_snitch,JSON,Thursday 19th of June 2025 07:15:14 PM CDT,"{
  ""ip"": {
    ""14.225.202.191"": 21203,
    ""24.173.30.170"": 25949,
    ""167.172.131.118"": 9222,
    ""172.236.141.242"": 15561,
    ""185.196.220.41"": 27,
    ""58.22.248.235"": 3,
    ""205.210.31.96"": 9,
    ""97.107.131.157"": 12,
    ""134.209.57.189"": 3,
    ""167.94.146.55"": 3,
    ""185.218.137.161"": 3,
    ""157.230.248.35"": 1626,
    ""205.210.31.16"": 9,
    ""103.3.61.100"": 18,
    ""118.26.37.105"": 3,
    ""88.214.25.125"": 6,
    ""194.165.16.162"": 6,
    ""205.210.31.250"": 18,
    ""92.63.197.23"": 6,
    ""165.154.129.130"": 3,
    ""27.109.113.245"": 15
  },
  ""asn"": {
    ""AS135905"": 21203,
    ""AS11427"": 25949,
    ""AS14061"": 10851,
    ""AS63949"": 15591,
    ""AS213438"": 27,
    ""AS4837"": 3,
    ""AS396982"": 36,
    ""AS398705"": 3,
    ""AS216127"": 3,
    ""AS135377"": 6,
    ""AS35042"": 6,
    ""AS48721"": 6,
    ""AS210848"": 6,
    ""AS45498"": 15
  },
  ""isp"": {
    ""Vietnam Posts and Telecommunications Group"": 21203,
    ""Charter Communications Inc"": 25949,
    ""DigitalOcean, LLC"": 10851,
    ""Akamai Technologies, Inc."": 15591,
    ""ColocaTel Inc."": 27,
    ""CNCGroup CHINA169 FuJian province network"": 3,
    ""Google LLC"": 36,
    ""Censys, Inc."": 3,
    ""International Hosting Company Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Flyservers S.A."": 6,
    ""Telkom Internet LTD"": 6,
    ""Smart Axiata Co., Ltd."": 15
  },
  ""org"": {
    ""VNPT"": 21203,
    ""Spectrum"": 25949,
    ""DigitalOcean, LLC"": 10851,
    ""Akamai Technologies, Inc."": 15561,
    ""Colocatel Inc"": 27,
    ""Unknown"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Linode"": 30,
    ""Censys, Inc."": 3,
    ""nuxt.cloud hosting provider"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Flyservers S.A"": 6,
    ""Korotkij Denis Aleksandrovich"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""SMART-AXIATA"": 15
  },
  ""regionName"": {
    ""Hanoi"": 21203,
    ""Texas"": 25949,
    ""New Jersey"": 9234,
    ""South East"": 15561,
    ""Virginia"": 27,
    ""Fujian"": 3,
    ""California"": 39,
    ""Hesse"": 6,
    ""South West"": 1626,
    ""North West"": 18,
    ""Kowloon"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""North Holland"": 6,
    ""England"": 3,
    ""Phnom Penh"": 15
  },
  ""country"": {
    ""Vietnam"": 21203,
    ""United States"": 35249,
    ""Singapore"": 17205,
    ""China"": 3,
    ""Germany"": 6,
    ""Hong Kong"": 9,
    ""Lithuania"": 6,
    ""The Netherlands"": 6,
    ""United Kingdom"": 3,
    ""Cambodia"": 15
  },
  ""account"": {
    ""hello"": 73597,
    ""Domain"": 27,
    ""142.93.8.59"": 3,
    ""IVGjwBoDV"": 3,
    ""wZkLaH"": 3,
    ""KyHxqI"": 3,
    ""rbmmwkg2"": 12,
    ""beio"": 3,
    ""(empty)"": 3,
    ""slXSDoznB"": 3,
    ""AfruaD"": 3,
    ""jXhuTp"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""nCQnbUsHJ"": 3,
    ""LJhPPY"": 3,
    ""hHNKJB"": 3,
    ""Administr"": 6,
    ""iBLbOJTFl"": 3,
    ""ytxRId"": 3,
    ""IgHpsR"": 3
  },
  ""keyboard"": {
    ""Unknown"": 73705
  },
  ""client_build"": {
    ""Unknown"": 73705
  },
  ""client_name"": {
    ""Unknown"": 73705
  },
  ""ip_type"": {
    ""Unknown"": 47206,
    ""hosting"": 26484,
    ""mobile"": 15
  }
}"
07m8B1X2,docker_deployer.sh,Sergio_Istea,Bash,Thursday 19th of June 2025 05:48:02 PM CDT,"#!/bin/bash

hostnamectl set-hostname docker-backend

apt update && apt upgrade -y && apt install docker.io -y

gpasswd -a ubuntu docker

docker run -d -p 8000:80 --name test.cloudapp.mooo.com ubuntu/apache2

reboot"
Xk6C6A5B,Untitled,geminilabs,PHP,Thursday 19th of June 2025 03:19:27 PM CDT,"add_filter('site-reviews/custom/value/source', function ($value, $tag) {
	if ('freetour' === $value) {
		return '<svg xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 32 32""><path d=""M0 16C0 7.163 7.163 0 16 0s16 7.163 16 16-7.163 16-16 16S0 24.837 0 16z"" fill=""#fff""/><path d=""M16 0c8.837 0 16 7.163 16 16 0 6.538-3.922 12.161-9.542 14.643l-.022-.03-4.981-7.635 4.799-3.007c.043-.028.082-.06.118-.094l.585.909 1.306-6.039-6.038-1.307.616.956a.86.86 0 0 0-.165.083l-4.769 2.988.486.729c.04.06-.012.138-.083.124l-3.396-.679c-.118-.024-.195-.138-.171-.257l.678-3.397c.014-.07.106-.089.146-.029l.628.941 9.067-5.873c.4-.261.513-.796.252-1.197l-3.22-4.943c-.26-.4-.796-.513-1.195-.252L4.106 11.063a.87.87 0 0 1-.173.15L.261 13.627l-.095.053C1.292 5.942 7.952 0 16 0z"" fill=""#fc9739""/></svg>';
	}
	return $value;
}, 10, 2);"
rQN2QeqP,Youtube Shorts to Watch?v= for TamperMonkey,freddyncalm,JavaScript,Thursday 19th of June 2025 02:53:18 PM CDT,"// ==UserScript==
// @name         Redirigir YouTube Shorts a Watch (con soporte SPA)
// @namespace    https://www.youtube.com/
// @version      1.1
// @description  Redirige automáticamente Shorts a formato Watch, incluso sin recarga (SPA)
// @match        https://www.youtube.com/*
// @run-at       document-start
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    function redirectIfShorts(url) {
        const match = url.match(/^https:\/\/www\.youtube\.com\/shorts\/([^/?#]+)/);
        if (match) {
            const videoId = match[1];
            const newUrl = `https://www.youtube.com/watch?v=${videoId}`;
            if (location.href !== newUrl) {
                window.location.replace(newUrl);
            }
        }
    }

    // Detecta carga inicial
    redirectIfShorts(window.location.href);

    // Observa cambios en la URL sin recarga (SPA)
    let lastUrl = location.href;
    new MutationObserver(() => {
        const currentUrl = location.href;
        if (currentUrl !== lastUrl) {
            lastUrl = currentUrl;
            redirectIfShorts(currentUrl);
        }
    }).observe(document, {subtree: true, childList: true});
})();
"
HnVJv5qe,REPORTES,YAMILDIAZ,Java,Thursday 19th of June 2025 02:38:48 PM CDT,"<%@ page language=""java"" contentType=""text/html; charset=UTF-8""
    pageEncoding=""UTF-8""%>
<!DOCTYPE html>
<html>
<head>
<meta charset=""UTF-8"">
<title>Reportes</title>
</head>
<body>
	<jsp:include page=""Nav.html""/>
	
	<div class=""container mt-4"">
	    <!-- Tarjetas con información -->
	    <section class=""row"">
	    	<article class=""col-12 text-center mb-4"">
				<h1>
					Reportes
				</h1>
			</article>
	    	
	        <article class=""col-md-4"">
	            <div class=""card text-bg-primary mb-3"">
	                <div class=""card-header"">Usuarios</div>
	                <div class=""card-body"">
	                    <h5 class=""card-title"">1,200</h5>
	                    <p class=""card-text"">Usuarios registrados.</p>
	                </div>
	            </div>
	        </article>
	        <article class=""col-md-4"">
	            <div class=""card text-bg-success mb-3"">
	                <div class=""card-header"">Total de $ Prestamos</div>
	                <div class=""card-body"">
	                    <h5 class=""card-title"">25,000,000</h5>
	                    <p class=""card-text"">Total dinero prestado.</p>
	                </div>
	            </div>
	        </article>
	        <article class=""col-md-4"">
	            <div class=""card text-bg-warning mb-3"">
	                <div class=""card-header"">Cantidad de prestamos</div>
	                <div class=""card-body"">
	                    <h5 class=""card-title"">350</h5>
	                    <p class=""card-text"">Total prestamos.</p>
	                </div>
	            </div>
	        </article>
	    </section>
	
	    <!-- Gráficos -->
	    <div class=""row"">
	        <div class=""col-12"">
	            <div class=""card"">
	                <div class=""card-header"">Prestamos por mes ($)</div>
	                <div class=""card-body"">
	                    <canvas id=""barChart""></canvas>
	                </div>
	            </div>
	        </div>
	        <div class=""col-md-6 mt-3 mb-3"">
	            <div class=""card"">
	                <div class=""card-header"">Resumen del mes</div>
	                <div class=""card-body"">
	                    <canvas id=""pieChart""></canvas>
	                </div>
	            </div>
	        </div>
	        <div class=""col-md-6 mt-3 mb-3"">
	            <div class=""card"">
	                <div class=""card-header"">Resumen del mes</div>
	                <div class=""card-body"">
	                    <canvas id=""pieChart2""></canvas>
	                </div>
	            </div>
	        </div>
	    </div>
	</div>

<!-- Script para gráficos con Chart.js -->
<script src=""https://cdn.jsdelivr.net/npm/chart.js""></script>
<script>
    // Gráfico de Barras
    var ctxBar = document.getElementById('barChart').getContext('2d');
    var barChart = new Chart(ctxBar, {
        type: 'bar',
        data: {
            labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Nobiembre', 'Diciembre'],
            datasets: [{
                label: 'Prestamos por mes ($)',
                data: [3456, 7890, 14567, 2345, 19876, 5678, 12345, 9876, 15000, 2001, 17500, 3000],
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Gráfico de Torta
    var ctxPie = document.getElementById('pieChart').getContext('2d');
    var pieChart = new Chart(ctxPie, {
        type: 'pie',
        data: {
            labels: ['Prestamos aprobados', 'Prestamos rechazados'],
            datasets: [{
                data: [30, 70],
                backgroundColor: ['#FFCE56', '#4BC0C0']
            }]
        },
        options: {
            responsive: true
        }
    });
    
    var ctxPie = document.getElementById('pieChart2').getContext('2d');
    var pieChart = new Chart(ctxPie, {
        type: 'pie',
        data: {
            labels: ['Alta de cliente', 'Baja de cliente'],
            datasets: [{
                data: [85, 15],
                backgroundColor: ['#FF6384', '#36A2EB']
            }]
        },
        options: {
            responsive: true
        }
    });
</script>
	
</body>
</html>"
g0rFuKNT,doufu live,saidwe1,JSON,Thursday 19th of June 2025 02:36:08 PM CDT,"{
  ""streams"": [
    {
      ""url"": ""https://streameastapp.to/""
    }
  ]
}"
5fq9eVdf,Выдачи достижений за 1й сезон БГ,Sansuall,MySQL,Thursday 19th of June 2025 02:35:53 PM CDT,"-- FUN 3.3.5
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4389062, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3804900, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4286969, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3868657, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1721973, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1335540, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4290233, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3793600, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2348285, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8348, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3154488, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4013133, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3539396, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4419398, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3151320, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2563103, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (600177, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2102022, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (356099, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3981330, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3852076, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4429405, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4329873, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2530334, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4432609, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4445628, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4415346, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3651185, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3830181, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4331247, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2824699, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3143983, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1014989, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4191721, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4438910, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1943854, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4421153, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4316508, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3829243, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4461580, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2218058, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1479242, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3426764, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1748, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (318440, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1506011, 442, 1743465601);


-- x1 3.3.5
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1792445, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (588420, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (134417, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1873848, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (229736, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1656839, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (673394, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (940510, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1569767, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (649430, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (102102, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (192163, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1565993, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (777586, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1768393, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (384732, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (145333, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (883336, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (50922, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (380685, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (523212, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1918940, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1895521, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1647194, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1196617, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1516720, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1290, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1198182, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (843060, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (448698, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1946291, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (957629, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (402621, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1274332, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1517440, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1517612, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1990735, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1966916, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (292782, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2022839, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (897869, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (549252, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (174986, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (230258, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2016215, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1798720, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1984927, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1912506, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1304386, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1687871, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (486053, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (199700, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1912476, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2060481, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (541448, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1264552, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1709601, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (75300, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2009487, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1919826, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1530445, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (103541, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1393993, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (701610, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (899945, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2003663, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1856619, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1043775, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1249995, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1301646, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2001083, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (89244, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1798594, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2027156, 442, 1743465601);


-- x100 3.3.5
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25588276, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28324403, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4150215, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25641385, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26696589, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24166396, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24609572, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25820768, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22261538, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21568684, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22875334, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24646166, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5887492, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13817724, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2580263, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14327386, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24461463, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5910153, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27094948, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29348661, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3833352, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28796518, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19361527, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25462910, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19769825, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6126710, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1329368, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22885502, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22745758, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2832557, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13695195, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24374860, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27641630, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21924699, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22893455, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7638162, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3203921, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6840861, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27544211, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21255026, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3662590, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7850132, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28924366, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26330477, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20039155, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3079332, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2535598, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22475016, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24591494, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1538214, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7172370, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4342195, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3508694, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19243458, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13757037, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1786719, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29215600, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5390071, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22821171, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5950508, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22614742, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5953779, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4308239, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20643965, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19554801, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3755509, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27993251, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26667872, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18512014, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22786411, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21465626, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13983846, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5764963, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26834698, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25830474, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7220968, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19386498, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6107173, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27911201, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27700641, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22823070, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19758769, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3647706, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1761047, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27361854, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20339940, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6865295, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22771861, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19933719, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27633187, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19280957, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (472077, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2988793, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3579828, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13908701, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3109705, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22745132, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (505015, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19135711, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22828748, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7254571, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14353503, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7074435, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6478355, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1204570, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19728941, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20767022, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3694078, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2076766, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28066468, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28328642, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22914817, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13738483, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4121798, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4213893, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23734682, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1279251, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4705387, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20285080, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3136062, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7474805, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4080894, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26279471, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19703882, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23348618, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22136114, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13721687, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7520886, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18485375, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3036799, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24069978, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3572988, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21514079, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28099506, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2648831, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5388142, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6054242, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22774249, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13700280, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24000963, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26753970, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6435153, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22614526, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13854511, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8226592, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22742969, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22473580, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3353198, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23929638, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24517576, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18543300, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24557258, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27796761, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14853516, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24569518, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3570595, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7148324, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24453019, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23016823, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29280829, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22809503, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22881841, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14804709, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29194978, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26157598, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24899210, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6026374, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21444420, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28455812, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25595869, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24463038, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19101463, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23627366, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29092408, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21678217, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26153031, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22746934, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28567306, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25628563, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25169715, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7735587, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22780676, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8155539, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24469478, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24318310, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25858863, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8588015, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24190856, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28920990, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2167825, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19804642, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14169329, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8225315, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4815965, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20492056, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22499376, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27858182, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29180438, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14701443, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18763339, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26170632, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3577940, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24714092, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22212208, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13958212, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24454273, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19714259, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21052655, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8419176, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6100640, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25655384, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3428537, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21463627, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6224143, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26367991, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19494901, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28460424, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28261894, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23567124, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2630136, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21450796, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1722536, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (23222327, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29250394, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22854714, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1435688, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18914013, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5961746, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22781724, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20034166, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27751524, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (29111208, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25953337, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28445281, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8053647, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20519767, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2455353, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2547, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2275084, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18912512, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22799808, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27956874, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27973975, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8221136, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8480683, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3805784, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5986400, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3214651, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (18982686, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27928691, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6568876, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14341053, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21227173, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13704749, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21043895, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13700085, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22771860, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26842827, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19790088, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1269720, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8166673, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6425308, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22546591, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7023682, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20077565, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22822472, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2552607, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20516866, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4051107, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28928269, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28379315, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19220124, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6212829, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24952404, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1913072, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (20025286, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24164989, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3600597, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24662250, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26553534, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28812987, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28383555, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (127223, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3337457, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (25092109, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27699439, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14233147, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (28324830, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (24470720, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1411662, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (22195832, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26200339, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7323822, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13732329, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (27253422, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13697838, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (19414748, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (21918192, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (13713390, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (26957083, 442, 1743465601);


-- x5 3.3.5 
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1021311, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7731592, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2082691, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2382922, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9334870, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2819368, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2222243, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2918643, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (620220, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7946302, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (762212, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1736345, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1792064, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8910467, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1342675, 433, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3399402, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1062232, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2978941, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8333158, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2382887, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (80080, 434, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2666393, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7635570, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5423075, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5651142, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4769138, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1180550, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (512141, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8475406, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7945552, 473, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4888127, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2899893, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (465492, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4253891, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7943863, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7133853, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1756355, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1951630, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1699863, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (252061, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6312248, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1440538, 435, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7755974, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2354556, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4336702, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1598879, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3710416, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1189454, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4790808, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5100697, 436, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (803006, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7074458, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2175121, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1130543, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7177970, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4796414, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6955481, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2434722, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5021782, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9206820, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (929821, 437, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6080108, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5896449, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5916202, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4674637, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7934218, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2346173, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7976848, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3372114, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8399716, 438, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4935747, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6742420, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (178560, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9144751, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8865692, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9262421, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8796392, 472, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (298437, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7976386, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6160073, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3871712, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5069758, 439, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1046658, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2633088, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6511869, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (85168, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4531687, 440, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7907987, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4455654, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2560254, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4412512, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (432796, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8492297, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2787452, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5250948, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4418857, 441, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2054578, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2710737, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1456585, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9299700, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1093110, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7943341, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (14359, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3758240, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5886310, 471, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (942946, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6765693, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4254001, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3065368, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6543823, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6692699, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (874420, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8791178, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6211922, 470, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5527555, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8057436, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2158169, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6970068, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6468932, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9299774, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9300571, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7984985, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9200320, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5881371, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9408067, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8913298, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4355526, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8774425, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9302755, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3823167, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5583080, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (888721, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4780236, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5532552, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9404666, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2862392, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7731222, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (814946, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6899133, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3440844, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1652334, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7203796, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6923600, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7556546, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (5576208, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (7065274, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6756520, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9207705, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1344171, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2577069, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3933184, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (6039119, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (328052, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (4442331, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (3304775, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1021975, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2733062, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8185051, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2542783, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (459155, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (2590548, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8019656, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (1319101, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (9401131, 442, 1743465601);
INSERT IGNORE INTO character_achievement (guid, achievement, DATE) VALUES (8687714, 442, 1743465601);"
R1f9S0CZ,auto select all photos blogger,ghiwar,JavaScript,Thursday 19th of June 2025 01:59:44 PM CDT,"// Ambil semua elemen foto yang belum dipilih
const photoContainers = document.querySelectorAll('div[data-source=""3""][data-item-type=""1""]');

let delay = 0;

photoContainers.forEach(container => {
    setTimeout(() => {
        // Cari parent div yang punya jsaction sebagai target klik
        const parentOption = container.closest('[jsaction][role=""option""]');
        if (parentOption) {
            parentOption.click();
            console.log(""Foto diklik:"", parentOption);
        } else {
            console.warn(""Tidak ditemukan elemen klikable untuk:"", container);
        }
    }, delay);
    delay += 500; // Delay 500ms antara setiap klik
});"
SQJbSD5q,Untitled,geminilabs,PHP,Thursday 19th of June 2025 01:53:42 PM CDT,"function glsr_wp_travel_engine_header_hook () {
    echo do_shortcode('[site_reviews_summary hide=""bars,summary"" assigned_posts=""post_id""]');
}
add_action('wp_travel_engine_header_hook', 'glsr_wp_travel_engine_header_hook');"
QdBeBVAz,Untitled,Glenpl,C++,Thursday 19th of June 2025 01:47:30 PM CDT,"
pon
[LOW] jaruga projekt???
[LOW] Ochrona danych i prywatności w Internecie | 9:45 - 11:15 

[PRIO] [DRUGA KONIECZNIE] Bezpieczeństwo systemów bazodanowych i pracy w chmurze 11:30 - 13:00 | 13:15 - 14:45

[LOW] Przetwarzanie języka naturalnego i sztuczna inteligencja 13:15 - 14:45 | 15:00 - 16:30
[LOW] [WYK] Wprowadzenie do bezpieczeństwa IoT 16:45 - 18:15

wt

sr
[LOW] [KON] [DRUGA] Web 2.0 i media społecznościowe 8:00 - 9:30
[LOW] [KON] Nowoczesne trendy zarządzania przedsiębiorstwem 9:45 - 11:15
[[mider stare 9:45 - 11:15 i 11:30 - 13:00]] -- bierz grupę drugą 
[PRIO] Bezpieczeństwo systemów 11:30 - 14:45 | 15:00 - 18:15 

czw

pt

"
MSgGF4aa,Untitled,natanfechete,Java,Thursday 19th of June 2025 01:40:56 PM CDT,"%% IMPLEMENTACION EN EL MAIN %%

case 10: // implementacion de una query adicional, crear artistas y anadirlos en la lista y al programa
                        boolean caso = true; // esto es pra el while que te obliga a seguir hasta que pongas uno que no existe

                        try (FileWriter escribir = new FileWriter(""Artistas.txt"", true);
                             BufferedWriter buffer = new BufferedWriter(escribir);
                             PrintWriter salida = new PrintWriter(buffer)) { // todo el porro de meter archivos de texto

                            System.out.println(""Registering new artist. Please enter the name"");
                            while (caso) {
                                artistName = scanner.next();
                                if (festival.doesArtisExist(artistName)) { // espero que tengas este metodo o algo similar
                                    System.out.println(""This artist exists!"");
                                } else {
                                    caso = false; // para que el while loop no siga
                                    // variables predeterminadas porque no puedes pasar un metodo que le falte parametros
                                    boolean mainArtist;
                                    int ticketPrice;
                                    int duration;
                                    int capacity;
                                    boolean assisting;
                                    int numMembers = 0;
                                    boolean sellMerch = false;
                                    boolean needsDressingRoom = false; // estas variables las inicializo porq no puedes pasar params vacios a un metodo. De todas formas, el metodo de crear artistas
                                    int managerPhone = 0;              // es listo y no va a meter valores equivocados por lo q no pasa nada si pasas por ej 0 en un tipo grupo

                                    System.out.println(""Group or solo? please write 'g' or 's'"");
                                    String type = scanner.next();

                                    if (!type.equals(""g"") && !type.equals(""s"")) {
                                        throw new InputMismatchException(""invalid input""); // cosa opcional que no estaria feo que pongas
                                    }

                                    System.out.println(""Genre?"");
                                    String genre = scanner.next();
                                    System.out.println(""Is main artist?"");
                                    mainArtist = scanner.nextBoolean();
                                    System.out.println(""Ticket Price?"");
                                    ticketPrice = scanner.nextInt();
                                    System.out.println(""Duration?"");
                                    duration = scanner.nextInt();
                                    System.out.println(""Capacity? (in thousands, write the number compacted)"");
                                    capacity = scanner.nextInt();
                                    System.out.println(""Is assisting?"");
                                    assisting = scanner.nextBoolean();

                                    salida.println();
                                    salida.print(type + "" "");
                                    salida.print(artistName + "" "");
                                    salida.print(genre + "" "");
                                    salida.print(mainArtist + "" "");
                                    salida.print(ticketPrice + "" "");
                                    salida.print(duration + "" "");
                                    salida.print(capacity + "" "");
                                    salida.print(assisting + "" "");

                                    if (type.equals(""g"")) {
                                        System.out.println(""Number of members?"");
                                        numMembers = scanner.nextInt();
                                        salida.print(numMembers + "" "");

                                        System.out.println(""Sells merch?"");
                                        sellMerch = scanner.nextBoolean();
                                        salida.print(sellMerch + "" "");
                                    }

                                    if (type.equals(""s"")) {
                                        System.out.println(""needs dressing room?"");
                                        needsDressingRoom = scanner.nextBoolean();
                                        salida.print(needsDressingRoom + "" "");

                                        System.out.println(""Enter manager phone number (only numbers!)"");
                                        managerPhone = scanner.nextInt();
                                        salida.print(managerPhone + "" "");
                                        System.out.println(""finished!"");
                                    }

                                    System.out.println(""Creating artist..."");
                                    festival.artistMaker(type, artistName, genre, mainArtist, ticketPrice, duration, capacity, assisting, numMembers, sellMerch, needsDressingRoom, managerPhone);
                                }
                            }
                        }
                        break;


%% IMPLEMENTACION DEL METODO DENTRO DE LA CLASE FESTIVAL %%

public void artistMaker(String type, String artistName, String genre, boolean mainArtist, int ticketPrice, int duration,int capacity, boolean assisting, int numMembers, boolean sellMerch, boolean needsDressRoom, int mngrPhone) {
        for (int i = 0; i < artistList.length; i++) {
            if (artistList[i] == null) {
                if (type.equalsIgnoreCase(""g"")) {
                    Artist newGroup = new Group(type, artistName, genre, mainArtist, ticketPrice, duration, capacity, assisting, numMembers, sellMerch);
                    artistList[i] = newGroup;
                }
                else {
                    Artist newSolo = new Solo(type, artistName, genre, mainArtist, ticketPrice, duration, capacity, assisting, needsDressRoom, mngrPhone);
                    artistList[i] = newSolo;
                }
                return;
            }
        }
    }"
uwMEsYJF,ListaPersona,YAMILDIAZ,Java,Thursday 19th of June 2025 01:09:32 PM CDT,"<%@ page language=""java"" contentType=""text/html; charset=UTF-8""
    pageEncoding=""UTF-8""%>
<!DOCTYPE html>
<html>
<head>
<meta charset=""UTF-8"">
<title>Lista Usuarios</title>

<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>

<link rel=""stylesheet"" href=""https://cdn.datatables.net/2.3.2/css/dataTables.dataTables.css"" />
  
<script src=""https://cdn.datatables.net/2.3.2/js/dataTables.js""></script>

<script type=""text/javascript"">
	$(document).ready(function() {
		$('#table_id').DataTable();
	});
</script>

</head>
<body>
	<jsp:include page=""Nav.html""/>
	
	<div class=""container mb-4 mt-4"">
		<section class=""row justify-content-center"">
			
			<article class=""col-12 text-center mb-4"">
				<h1>
					Lista de Usuarios
				</h1>
			</article>
			
			<article>
				Agregar usuario:
				<button class=""btn btn-primary rounded-circle fs-5"">
					<i class=""bi bi-person-fill-add"">
					</i>
				</button>
			</article>
			
			<article class=""col-12"">
				<table border=""1"" id=""table_id"">
	
				<thead>	<tr>
						<td><b>USERNAME</b></td>
						<td><b>CANTIDAD DE CUENTAS</b></td>
						<td><b>CANTIDAD DE PRESTAMOS</b></td>
						<td><b>ESTADO</b></td>
					</tr>
				</thead>
				
				</table>
			</article>
			
			<article class=""d-flex justify-content-end"">
				<button class=""btn btn-primary"">
					Ver detalle
				</button>
			</article>
			
		</section>
	</div>
	
</body>
</html>"
ADnHhxvi,wrl s2 teams playoffs,matp93,JSON,Thursday 19th of June 2025 12:27:30 PM CDT,"[
  {
    ""Id"": ""Shorkies"",
    ""Name"": ""Shorkies"",
    ""ShortName"": ""SHRK"",
    ""LogoUrl"": ""https://i.ibb.co/PGQjNPYz/Shorkies.png"",
    ""Players"": [
      {
        ""Name"": ""Vingummi101"",
        ""AccountId"": ""7efb8fcc-b664-44ec-a3c8-02b5e377539c""
      },
      {
        ""Name"": ""SF-lnko"",
        ""AccountId"": ""d9f06d37-3300-4468-97b2-5de8404e0e92"",
        ""PhotoUrl"": ""https://i.ibb.co/V0wB61J0/lnko.png""
      },
      {
        ""Name"": ""Aluji"",
        ""AccountId"": ""725b7e1a-dec8-4a04-b302-51e17a89a602""
      }
    ]
  },
  {
    ""Id"": ""Apex Predators"",
    ""Name"": ""Apex Predators"",
    ""ShortName"": ""APEX"",
    ""LogoUrl"": ""https://i.ibb.co/LBF7T3L/Apex-Predators.png"",
    ""Players"": [
      {
        ""Name"": ""Liz.TM"",
        ""AccountId"": ""b49ae4fe-75e9-4a5c-a4b6-ce0d06c5c772"",
        ""PhotoUrl"": ""https://i.ibb.co/pvxQVHZq/Liz.png""
      },
      {
        ""Name"": ""CatBagasm"",
        ""AccountId"": ""b89e8368-945b-457e-ab88-d9250f75eabd""
      }
    ]
  },
  {
    ""Id"": ""Lunaena"",
    ""Name"": ""Lunaena"",
    ""ShortName"": ""LUA"",
    ""Players"": [
      {
        ""Name"": ""deluluna_"",
        ""AccountId"": ""d3557ada-6d0c-40be-9208-8587d9293dff""
      },
      {
        ""Name"": ""Seliaste"",
        ""AccountId"": ""5dafce24-de74-4d58-bdf8-68d9c6c65387""
      },
      {
        ""AccountId"": ""1f2e8ca1-9d2d-48eb-a873-945cb6d7e9c5""
      }
    ]
  },
  {
    ""Id"": ""Holy Dynasty"",
    ""Name"": ""Holy Dynasty"",
    ""ShortName"": ""HD"",
    ""LogoUrl"": ""https://i.ibb.co/TDBym1pS/HD-allmode.png"",
    ""Players"": [
      {
        ""Name"": ""Neoranto"",
        ""AccountId"": ""ff66a79d-53d8-4cfa-8c0f-779463b5acf7"",
        ""PhotoUrl"": ""https://i.ibb.co/7djXWLTT/Neoranto.png""
      },
      {
        ""Name"": ""prowe.ss"",
        ""AccountId"": ""4ff4f9e1-7360-4000-bf88-aef578b05ffe""
      },
      {
        ""Name"": ""chloe.iwnl"",
        ""AccountId"": ""8542c707-6300-4b4c-ae78-58406469e064""
      }
    ]
  },
  {
    ""Id"": ""Molotov Gaming"",
    ""Name"": ""Molotov Gaming"",
    ""ShortName"": ""MLTV"",
    ""LogoUrl"": ""https://i.ibb.co/PZXTC2KB/Molotov-Gaming.png"",
    ""Players"": [
      {
        ""Name"": ""Anderin_tm"",
        ""AccountId"": ""db7e8268-b434-4f51-9038-4dd15202550f"",
        ""PhotoUrl"": ""https://i.ibb.co/ndxRPS1/Anderin_tm.png""
      },
      {
        ""Name"": ""cozzer04"",
        ""AccountId"": ""1683525a-bcfb-41ee-9aba-f6cafca4a27f""
      },
      {
        ""Name"": ""xephyr.chris"",
        ""AccountId"": ""cdd5c408-0602-4ba5-b010-5e754e25cbe4""
      }
    ]
  },
  {
    ""Id"": ""AFAB"",
    ""Name"": ""Assigned Fast At Birth"",
    ""ShortName"": ""AFAB"",
    ""LogoUrl"": ""https://i.ibb.co/0RbN2mr0/Assigned-Fast-At-Birth.png"",
    ""Players"": [
      {
        ""Name"": ""Laina_."",
        ""AccountId"": ""fd6ca975-d21b-43db-a416-cd36a1be75fc"",
        ""PhotoUrl"": ""https://i.ibb.co/pjTvXznC/laina.png""
      },
      {
        ""Name"": ""Stelaa.nyan"",
        ""AccountId"": ""98d2e8b1-16a5-4edb-9a64-41c5ebe4860c""
      },
      {
        ""Name"": ""Mariina"",
        ""AccountId"": ""711036bf-d90b-4fa4-9be5-964eb3912256"",
        ""PhotoUrl"": ""https://i.ibb.co/LDPCKbs4/Marie.png""
      },
      {
        ""Name"": ""zayshaa"",
        ""AccountId"": ""90dc7c06-3fad-42ad-b92e-a230efb8f088""
      }
    ]
  },
  {
    ""Id"": ""MEOW_"",
    ""Name"": ""MEOW_"",
    ""ShortName"": ""MEOW"",
    ""LogoUrl"": ""https://i.ibb.co/wNQYSMmJ/mewo.png"",
    ""Players"": [
      {
        ""Name"": ""ya"",
        ""AccountId"": ""2aae8132-2f40-40f3-9808-55bd9a3e56bf"",
        ""PhotoUrl"": ""https://i.ibb.co/kgRDszwM/ya.png""
      },
      {
        ""Name"": ""ZaraStocher"",
        ""AccountId"": ""7789c1c5-75b6-484e-bbee-11f914865247"",
        ""PhotoUrl"": ""https://i.ibb.co/xRz5wBW/Zara.png""
      },
      {
        ""Name"": ""Lina_Kitty"",
        ""AccountId"": ""497403f2-4b50-4424-89a9-b81dcb34a6c0""
      }
    ]
  },
  {
    ""Id"": ""Big Bonkers"",
    ""Name"": ""Big Bonkers"",
    ""ShortName"": ""BONK"",
    ""LogoUrl"": ""https://i.ibb.co/YFBNCQ7T/BIGBONKERSLOGO.png"",
    ""Players"": [
      {
        ""Name"": ""SneakyAnnie"",
        ""AccountId"": ""ce414ab7-2193-4613-a85d-317dbcbe480c""
      },
      {
        ""Name"": ""Majijej"",
        ""AccountId"": ""bfcf62ff-0f9e-40aa-b924-11b9c70b8a09"",
        ""PhotoUrl"": ""https://i.ibb.co/mVZnGvg5/Maji.png""
      },
      {
        ""Name"": ""leabdd"",
        ""AccountId"": ""34050419-362c-41a7-afcd-f8e2b9e753f3"",
        ""PhotoUrl"": ""https://i.ibb.co/209D43k2/Lea.png""
      }
    ]
  },
  {
    ""Id"": ""EQNX"",
    ""Name"": ""EQNX"",
    ""ShortName"": ""EQNX"",
    ""LogoUrl"": ""https://i.ibb.co/HTh9d53F/EQNX.png"",
    ""Players"": [
      {
        ""Name"": ""Shorty_GrayTM"",
        ""AccountId"": ""c210e96e-35be-4cb6-9224-0f73cab9dab5"",
        ""PhotoUrl"": ""https://i.ibb.co/FP7Kct2/Shorty.png""
      },
      {
        ""Name"": ""ieva."",
        ""AccountId"": ""43a1db59-380c-4d2f-8a72-9fbfbe52c749"",
        ""PhotoUrl"": ""https://i.ibb.co/sdMgczTG/Ieva.png""
      }
    ]
  }
]"
vAjf48zt,MultiTF_CandleOverlayEA,cjmt2,C++,Thursday 19th of June 2025 12:08:52 PM CDT,"//+-------------------------------------------------------------------------------------+
//|                                                         MultiTF_CandleOverlayEA.mq5 |
//|                        Expert pentru multiple timeframe overlay și trade management |
//+-------------------------------------------------------------------------------------+
#property copyright ""ChatGPT""
#property version   ""1.00""
#property strict
#define ColorAqua clrAqua
#define ColorRed clrRed

input double Lots       = 0.1;
input double SL_Points  = 100;    // stop loss in points
input double TP_Points  = 200;    // take profit in points
input double TrailStart = 50;     // trailing start in points
input double TrailStep  = 20;     // trailing step in points

//--- simbolul curent
string symbol;

//--- handle-uri pentru timeframe-uri
ENUM_TIMEFRAMES tfH1 = PERIOD_H1;
ENUM_TIMEFRAMES tfH4 = PERIOD_H4;
ENUM_TIMEFRAMES tfD1 = PERIOD_D1;
ENUM_TIMEFRAMES tfW1 = PERIOD_W1;

//--- nume obiecte grafice
string objNameH1 = ""Candle_H1"";
string objNameH4 = ""Candle_H4"";
string objNameD1 = ""Candle_D1"";
string objNameW1 = ""Candle_W1"";

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   symbol = _Symbol;
   //ChartSetInteger(0, CHART_SHOW_PERIOD_SEPARATORS, false); // ascunde liniile perioadelor pentru claritate

   // curata obiecte vechi
   ObjectDelete(0,objNameH1);
   ObjectDelete(0,objNameH4);
   ObjectDelete(0,objNameD1);
   ObjectDelete(0,objNameW1);

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Functie pentru obtinerea valorilor OHLC pentru o anumita TF      |
//+------------------------------------------------------------------+
bool GetOHLC(ENUM_TIMEFRAMES tf, datetime &time_open, double &open, double &high, double &low, double &close)
  {
   MqlRates rates[];
   if(CopyRates(symbol, tf, 0, 1, rates) != 1)
     return(false);

   time_open = rates[0].time;
   open  = rates[0].open;
   high  = rates[0].high;
   low   = rates[0].low;
   close = rates[0].close;
   return(true);
  }

//+------------------------------------------------------------------+
//| Functie desenare candela suprapusa pe M1                         |
//+------------------------------------------------------------------+
void DrawCandleOverlay(string name, datetime time_open, double open, double high, double low, double close, color col)
  {
   // Șterge obiectul vechi daca exista
   ObjectDelete(0,name);

   // Creaza un obiect rectangle pe grafic cu următoarele coordonate:
   // pe orizontala, de la time_open pana la timpul curent (acum)
   // pe verticala, intre low si high

   datetime time_now = TimeCurrent();

   // creeaza rectangle
   if(!ObjectCreate(0, name, OBJ_RECTANGLE, 0, time_open, high, time_now, low))
     {
      Print(""Eroare la crearea obiectului "", name);
      return;
     }

   // setari vizuale
   ObjectSetInteger(0, name, OBJPROP_COLOR, col);
   ObjectSetInteger(0, name, OBJPROP_BACK, true);      // sa fie in spate
   ObjectSetInteger(0, name, OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, name, OBJPROP_WIDTH, 2);

   // Opacitate in functie de close > open
   if(close > open)
      ObjectSetInteger(0, name, OBJPROP_BGCOLOR, ColorToARGB(ColorAqua, 60));
   else
      ObjectSetInteger(0, name, OBJPROP_BGCOLOR, ColorToARGB(ColorRed, 60));
  }

//+------------------------------------------------------------------+
//| Functie pentru conversia culorii cu opacitate                   |
//+------------------------------------------------------------------+
ulong ColorToARGBAlpha(color c, uchar alpha)
  {
   return(((ulong)alpha << 24) | ((ulong)c & 0xFFFFFF));
  }

//+------------------------------------------------------------------+
//| Verifica regula simpla de intrare                                 |
//+------------------------------------------------------------------+
int CheckTradeSignal()
  {
   datetime t_open;
   double open, high, low, close;

   // Preluam OHLC pentru fiecare timeframe
   if(!GetOHLC(tfH1, t_open, open, high, low, close)) return 0;
   bool h1Buy  = (close > open);
   bool h1Sell = (close < open);

   if(!GetOHLC(tfH4, t_open, open, high, low, close)) return 0;
   bool h4Buy  = (close > open);
   bool h4Sell = (close < open);

   if(!GetOHLC(tfD1, t_open, open, high, low, close)) return 0;
   bool d1Buy  = (close > open);
   bool d1Sell = (close < open);

   if(!GetOHLC(tfW1, t_open, open, high, low, close)) return 0;
   bool w1Buy  = (close > open);
   bool w1Sell = (close < open);

   // Conditii pentru BUY: toate in sus
   if(h1Buy && h4Buy && d1Buy && w1Buy) return 1;

   // Conditii pentru SELL: toate in jos
   if(h1Sell && h4Sell && d1Sell && w1Sell) return -1;

   return 0; // fara semnal clar
  }

//+------------------------------------------------------------------+
//| Functie executie ordine BUY                                       |
//+------------------------------------------------------------------+
bool OpenBuy()
  {
   double price = SymbolInfoDouble(symbol, SYMBOL_ASK);
   double sl    = price - SL_Points * _Point;
   double tp    = price + TP_Points * _Point;

   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action   = TRADE_ACTION_DEAL;
   request.symbol   = symbol;
   request.volume   = Lots;
   request.type     = ORDER_TYPE_BUY;
   request.price    = price;
   request.sl       = sl;
   request.tp       = tp;
   request.deviation= 10;
   request.magic    = 123456;
   request.comment  = ""MultiTF_Buy"";

   if(!OrderSend(request, result))
     {
      Print(""Eroare la deschiderea BUY: "", GetLastError());
      return false;
     }
   Print(""Buy deschis la "", price);
   return true;
  }

//+------------------------------------------------------------------+
//| Functie executie ordine SELL                                      |
//+------------------------------------------------------------------+
bool OpenSell()
  {
   double price = SymbolInfoDouble(symbol, SYMBOL_BID);
   double sl    = price + SL_Points * _Point;
   double tp    = price - TP_Points * _Point;

   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action   = TRADE_ACTION_DEAL;
   request.symbol   = symbol;
   request.volume   = Lots;
   request.type     = ORDER_TYPE_SELL;
   request.price    = price;
   request.sl       = sl;
   request.tp       = tp;
   request.deviation= 10;
   request.magic    = 123456;
   request.comment  = ""MultiTF_Sell"";

   if(!OrderSend(request, result))
     {
      Print(""Eroare la deschiderea SELL: "", GetLastError());
      return false;
     }
   Print(""Sell deschis la "", price);
   return true;
  }

//+------------------------------------------------------------------+
//| Functie de gestionare a trailing stop                            |
//+------------------------------------------------------------------+
void ManageTrailingStop()
  {
   ulong magic = 123456;
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionGetInteger(POSITION_MAGIC) != magic) continue;
      if(PositionGetString(POSITION_SYMBOL) != symbol) continue;

      double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
      double current_price = SymbolInfoDouble(symbol, (PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY) ? SYMBOL_BID : SYMBOL_ASK);
      double sl = PositionGetDouble(POSITION_SL);
      ENUM_POSITION_TYPE pos_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

      // Calculate profit in points
      double profit_points = (pos_type==POSITION_TYPE_BUY) ? (current_price - open_price)/_Point : (open_price - current_price)/_Point;

      if(profit_points > TrailStart)
        {
         double new_sl;
         if(pos_type==POSITION_TYPE_BUY)
           {
            new_sl = current_price - TrailStep * _Point;
            if(new_sl > sl)
              {
               // modifica SL in trailing
               ModifyPositionSL(ticket, new_sl);
              }
           }
         else
           {
            new_sl = current_price + TrailStep * _Point;
            if(new_sl < sl || sl==0)
              {
               ModifyPositionSL(ticket, new_sl);
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| Modificare SL pozitie                                            |
//+------------------------------------------------------------------+
void ModifyPositionSL(ulong ticket, double new_sl)
  {
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action   = TRADE_ACTION_SLTP;
   request.position = ticket;
   request.sl       = new_sl;
   request.tp       = PositionGetDouble(POSITION_TP);

   if(!OrderSend(request, result))
     {
      Print(""Eroare la modificarea SL: "", GetLastError());
     }
   else
      Print(""SL modificat la "", DoubleToString(new_sl, _Digits));
  }

//+------------------------------------------------------------------+
//| Functia principala OnTick                                        |
//+------------------------------------------------------------------+
void OnTick()
  {
   // 1. Afisare candela suprapusa pe fiecare timeframe
   datetime t_open; double open, high, low, close;
   if(GetOHLC(tfH1, t_open, open, high, low, close))
      DrawCandleOverlay(objNameH1, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   if(GetOHLC(tfH4, t_open, open, high, low, close))
      DrawCandleOverlay(objNameH4, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   if(GetOHLC(tfD1, t_open, open, high, low, close))
      DrawCandleOverlay(objNameD1, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   if(GetOHLC(tfW1, t_open, open, high, low, close))
      DrawCandleOverlay(objNameW1, t_open, open, high, low, close, (close>open) ? clrAqua : clrRed);

   // 2. Verificam semnalul
   int signal = CheckTradeSignal();

   // 3. Managementul pozitiei
   ulong magic = 123456;
   bool hasPosition = false;
   ENUM_POSITION_TYPE pos_type = POSITION_TYPE_BUY;

   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetInteger(POSITION_MAGIC) != magic) continue;
      if(PositionGetString(POSITION_SYMBOL) != symbol) continue;

      hasPosition = true;
      pos_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
      break;
     }

   // 4. Executie ordine conform semnalului si pozitiei existente
   if(signal == 1)  // BUY
     {
      if(!hasPosition || pos_type == POSITION_TYPE_SELL)
        {
         // inchidem sell daca exista
         if(hasPosition && pos_type == POSITION_TYPE_SELL)
           ClosePosition(symbol, POSITION_TYPE_SELL);

         // deschidem BUY
         OpenBuy();
        }
     }
   else if(signal == -1) // SELL
     {
      if(!hasPosition || pos_type == POSITION_TYPE_BUY)
        {
         // inchidem buy daca exista
         if(hasPosition && pos_type == POSITION_TYPE_BUY)
           ClosePosition(symbol, POSITION_TYPE_BUY);

         // deschidem SELL
         OpenSell();
        }
     }
   else
     {
      // fara semnal inchidem toate pozitiile noastre
      if(hasPosition)
        CloseAllPositions(symbol, magic);
     }

   // 5. Management trailing stop
   ManageTrailingStop();
  }

//+------------------------------------------------------------------+
//| Inchide pozitie dupa tip                                          |
//+------------------------------------------------------------------+
void ClosePosition(string symb, ENUM_POSITION_TYPE type)
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetInteger(POSITION_MAGIC) != 123456) continue;
      if(PositionGetString(POSITION_SYMBOL) != symb) continue;
      if(PositionGetInteger(POSITION_TYPE) != type) continue;

      ulong ticket = PositionGetTicket(i);
      ClosePositionByTicket(ticket);
     }
  }

//+------------------------------------------------------------------+
//| Inchide toate pozitiile pentru simbol si magic                   |
//+------------------------------------------------------------------+
void CloseAllPositions(string symb, ulong magic)
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetInteger(POSITION_MAGIC) != magic) continue;
      if(PositionGetString(POSITION_SYMBOL) != symb) continue;

      ulong ticket = PositionGetTicket(i);
      ClosePositionByTicket(ticket);
     }
  }

//+------------------------------------------------------------------+
//| Inchide pozitia dupa ticket                                       |
//+------------------------------------------------------------------+
void ClosePositionByTicket(ulong ticket)
  {
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_CLOSE_BY;
   request.position = ticket;

   if(!OrderSend(request,result))
     Print(""Eroare inchidere pozitie: "", GetLastError());
   else
     Print(""Pozitie inchisa, ticket: "", ticket);
  }
//+------------------------------------------------------------------+
"
XdEMnm0V,2025-06-19T18:44:55.853,powerampache,PHP,Thursday 19th of June 2025 11:44:55 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":93},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448069266,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
ttZtPyyw,2025-06-19T18:44:55.456,powerampache,PHP,Thursday 19th of June 2025 11:44:55 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":93},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448068830,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
byZK6NKq,2025-06-19T18:44:54.893,powerampache,PHP,Thursday 19th of June 2025 11:44:54 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":93},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":3448068158,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
