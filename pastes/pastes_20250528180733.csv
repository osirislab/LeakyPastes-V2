id,title,username,language,date,content
CW70Wzee,Basic script,Thesxctriper23214,Lua,Wednesday 28th of May 2025 12:50:35 PM CDT,"--[[
Sprint Script
Features:
• Smooth acceleration/deceleration for walk ↔ sprint transitions
• Stamina management with depletion and regeneration
• Subtle camera roll (tilt) on sprint using local forward‐axis rotation
• Configurable parameters for speed, rates, and tilt
]]

local Players          = game:GetService(""Players"")
local RunService       = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")

local player    = Players.LocalPlayer
local camera    = workspace.CurrentCamera
local character, humanoid, rootPart

-- Configuration
local walkSpeed    = 16
local sprintSpeed  = 32
local accelRate    = 50       -- studs/s²
local decelRate    = 70       -- studs/s²
local maxStamina   = 5        -- seconds
local staminaDrain = 1        -- per second
local staminaRegen = 0.5      -- per second
local tiltAngle    = 5        -- degrees of roll
local tiltSpeed    = 10       -- interpolation speed

-- State
local currentSpeed = walkSpeed
local isSprinting  = false
local stamina      = maxStamina
local currentRoll  = 0        -- radians

-- Handle respawns
local function onCharacterAdded(char)
    character = char
    humanoid   = char:WaitForChild(""Humanoid"")
    rootPart   = char:WaitForChild(""HumanoidRootPart"")
    
    -- reset state
    currentSpeed = walkSpeed
    isSprinting  = false
    stamina      = maxStamina
    currentRoll  = 0
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end

-- Detect sprint input
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.LeftShift then
        isSprinting = true
    end
end)

UserInputService.InputEnded:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.LeftShift then
        isSprinting = false
    end
end)

-- Main update loop
RunService.RenderStepped:Connect(function(dt)
    if not humanoid then return end

    local moving = humanoid.MoveDirection.Magnitude > 0

    -- Determine target speed
    local targetSpeed = (isSprinting and moving and stamina > 0)
        and sprintSpeed
        or walkSpeed

    -- Smooth acceleration/deceleration
    if currentSpeed < targetSpeed then
        currentSpeed = math.min(currentSpeed + accelRate * dt, targetSpeed)
    elseif currentSpeed > targetSpeed then
        currentSpeed = math.max(currentSpeed - decelRate * dt, targetSpeed)
    end
    humanoid.WalkSpeed = currentSpeed

    -- Stamina logic
    if isSprinting and moving and stamina > 0 then
        stamina = math.max(stamina - staminaDrain * dt, 0)
        if stamina == 0 then
            isSprinting = false
        end
    else
        stamina = math.min(stamina + staminaRegen * dt, maxStamina)
    end

    -- Improved camera roll tilt
    local targetRoll = (currentSpeed > walkSpeed + 0.1)
        and math.rad(tiltAngle)
        or 0
    local alpha     = math.clamp(tiltSpeed * dt, 0, 1)
    local deltaRoll = (targetRoll - currentRoll) * alpha

    if math.abs(deltaRoll) > 1e-4 then
        -- Rotate camera around its local forward axis
        camera.CFrame = camera.CFrame * CFrame.Angles(0, 0, deltaRoll)
        currentRoll = currentRoll + deltaRoll
    end
end)
"
mFLFK0wF,04. Search,Andonoff,Python,Wednesday 28th of May 2025 12:38:50 PM CDT,"n = int(input())
word = input()

data_list = []

for _ in range(n):
    data_list.append(input())

print(data_list)

for element in data_list:
    if word not in element: # <- махаме елемента, в който думата я няма.
        data_list.remove(element)
        
print(data_list)"
MGKKFrE2,Untitled,Andonoff,Python,Wednesday 28th of May 2025 12:36:45 PM CDT,"n = int(input())
word = input()

data_list = []

for _ in range(n):
    data_list.append(input())

print(data_list)

for element in data_list:
    if word not in element:
        data_list.remove(element)
    print(element)
print(data_list)"
YkNySMaz,DosBox - Win95 image,caffeine314,Batch,Wednesday 28th of May 2025 12:22:02 PM CDT,"@echo off

set ""DOSBOX_EXE=D:\Program Files\DOSBox-X\dosbox-x.exe""
set ""DOGDAY_DIR=E:\Gaming\DosBox\DogDay""
set ""WIN_ISO=WIN950~1.ISO""

:: A larger disk image (e.g., 500MB–2GB) that emulates a hard drive.  Acts as a
:: virtual C: drive where Win 95 will actually be installed and run.  Created with:
::    imgmake win95.img -t hd -chs 512,16,63 -size 500
set ""WIN_IMG=hdd.img""

:: A 1.44MB floppy image that emulates a bootable DOS disk.  Used to boot into DOS
:: so you can partition and format the hard drive and start the Win 95 installer
set ""BOOT_IMG=win95b.img""



cd /d ""%DOGDAY_DIR%""

""%DOSBOX_EXE%"" ^
  -c ""mount y ."" ^
  -c ""imgmount 2 y:\%WIN_IMG% -t hdd -fs none -ide 1"" ^
  -c ""imgmount 3 y:\%WIN_ISO% -t cdrom -ide 2m"" ^
  -c ""boot y:\%BOOT_IMG%""

"
4kjaS7jN,FinalProject,slavi146,Python,Wednesday 28th of May 2025 11:58:30 AM CDT,"def word_counter(text):
    word_count = {}
    textwords = text.lower().split()
    for word in textwords:
        word = """".join(char for char in word if char.isalpha())
        if word.isalpha():
            if word in word_count:
                word_count[word] += 1
            else:
                word_count[word] = 1
        else:
            try:
                raise ValueError(""Input must be only string!"")
            except ValueError:
                print(""Everything is fine."")
    return word_count
text = input()

dict = word_counter(text)
for i, j in dict.items():
    print(f'{i}:{j}')

with open('rechnik s dumi i tehniq broi', 'w') as f:
    for i, j in dict.items():
        f.write(f'{i}:{j}\n')

setwithvalues = set(dict.values())
print(setwithvalues)


list_words = list(dict.keys())
print(list_words)


"
zhDKutzK,jablko.py,black_duck11,Python,Wednesday 28th of May 2025 11:22:11 AM CDT,"import random
import pygame
class Jablko(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.obraz=pygame.image.load('images/apple.png')
        self.rect=pygame.Rect(random.randint(0,24)*32,random.randint(0,18)*32,32,32)

"
e3d5jwDt,kati,boyan1324,Python,Wednesday 28th of May 2025 11:18:47 AM CDT,"import random

# Думи за игра
words = [""компютър"", ""училище"", ""игра"", ""часовник"", ""кола"", ""пъзел""]

# Избиране на дума
chosen_word = random.choice(words)
hidden_letters = [""_"" for _ in chosen_word]
guessed_letters = []
tries = 9

# Статистика (речник)
stats = {
    ""опити"": tries,
    ""грешки"": 0,
    ""познати_букви"": 0
}

print(""=== Игра на Бесеница ==="")

while ""_"" in hidden_letters and tries > 0:
    print(""\nДума: "", "" "".join(hidden_letters))
    print(""Оставащи опити:"", tries)
    print(""Познати букви:"", "", "".join(guessed_letters))

    try:
        letter = input(""Въведи буква: "").strip().lower()

        if not letter.isalpha() or len(letter) != 1:
            raise ValueError(""Моля, въведи само една буква."")

        if letter in guessed_letters:
            print(""Вече си пробвал тази буква."")
            continue

        guessed_letters.append(letter)

        if letter in chosen_word:
            for i in range(len(chosen_word)):
                if chosen_word[i] == letter:
                    hidden_letters[i] = letter
                    stats[""познати_букви""] += 1
            print(""Позна!"")
        else:
            tries -= 1
            stats[""грешки""] += 1
            print(""Грешка!"")

    except ValueError as ve:
        print(""Грешка:"", ve)
    except Exception as e:
        print(""Възникна неочаквана грешка:"", e)

# Резултат (tuple)
result = (""Поздравления!"" if ""_"" not in hidden_letters else ""Не успя."",
          chosen_word,
          stats[""познати_букви""],
          stats[""грешки""])

print(""\n=== Край на играта ==="")
print(result[0])
print(f""Думата беше: {result[1]}"")
print(f""Познати букви: {result[2]}, Грешки: {result[3]}"")

# Запис във файл (file handling)
try:
    with open(""hangman_results.txt"", ""a"", encoding=""utf-8"") as file:
        file.write(f""Резултат: {result[0]}, Дума: {result[1]}, Познати: {result[2]}, Грешки: {result[3]}\n"")
    print(""Резултатът е записан във файл hangman_results.txt"")
except Exception:
    print(""Грешка при запис във файл."")
"
1y5JZ4dk,Segment.py,black_duck11,Python,Wednesday 28th of May 2025 11:13:08 AM CDT,"import pygame
import copy
class Segment(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.obraz=pygame.image.load('images/segment.png')
        
        self.pozycja=pygame.Rect(-32,-32,32,32)
        self.ostatnia_pozycja=None
    def przesun(self,nowa_pozycja):
        self.ostatnia_pozycja=copy.deepcopy(self.pozycja)
        self.pozycja=copy.deepcopy(nowa_pozycja)
       

"
eDNsazPj,backpackloot.lua,Ubidibity,Lua,Wednesday 28th of May 2025 10:57:18 AM CDT,"-- Mobs drop backpacks now.  great.  This is my first attempt at repurposing this program to go through a backpack and empty it out

-- Rough draft!!

local chest=peripheral.wrap(""back"")
local chest2=peripheral.wrap(""right"")

local backpack=peripheral.wrap(""front"")
local size=backpack.size()

print(backpack.name.."", ""..backpack.size)

for x=1,chest.size() do
  turtle.dig()
  turtle.  -- this is incomplete, I'll come back to it but have RL stuff to do right now.
  for i=1,size do
    local slot = backpack.getItemDetail(i)
    if backpack.getItemDetail(i)~=nil then
      print(""slot ""..i..""contains ""..slot.name) -- find relevant property to check max_dmg=""..slot.max_dmg.."", dmg=""..slot.dmg)
      backpack.pushItem(""UP"",1)
    end
  end
"
xca9emyp,Dataset Download,Infinity99HD,Python,Wednesday 28th of May 2025 10:46:32 AM CDT,"# Dataset download

def download_dataset(
        url=""https://proai-datasets.s3.eu-west-3.amazonaws.com/progetto-finale-flowes.tar.gz"", 
        tar_name=""progetto-finale-flowes.tar.gz"", 
        extracted_file_name=""progetto-finale-flowes""
                     ):
    """"""
    Downloads and extracts the dataset if it does not already exist.
    """"""

    if not os.path.exists(""progetto-finale-flowes.tar.gz""):
        print(""Downloading dataset..."")
        file = requests.get(url)

        if file.status_code == 200:
            with open(tar_name, ""wb"") as f:
                f.write(file.content)
                print(""Download complete!"")

            if not os.path.exists(extracted_file_name):
                print(""Extracting dataset..."")
                with tarfile.open(tar_name, ""r:gz"") as f:
                    f.extractall(path=extracted_file_name)
                    print(""Extraction complete!"")

                    # Change directory to the extracted folder
                    os.rename(""progetto-finale-flowes/progetto-finale-flowes"", ""dataset"")
        else:
            print(""Failed to download dataset. Status code:"", file.status_code)"
RAnyV25g,Kierunek.py,black_duck11,Python,Wednesday 28th of May 2025 10:10:33 AM CDT,"from enum import Enum
class Kierunek(Enum):
    GORA = 0
    PRAWO = 1
    DOL = 2
    LEWO = 3"
aa7k6rW5,Waz.py,black_duck11,Python,Wednesday 28th of May 2025 10:09:12 AM CDT,"import pygame
import copy
from Kierunek import Kierunek
from Segment import Segment
class Waz(pygame.sprite.Sprite):
    def __init__(self):
    #oryginalny obraz głowy
        
        self.oryginalny_obraz = pygame.image.load(""images/head.png"")
    
        self.obraz = pygame.transform.rotate(self.oryginalny_obraz, 0)
    #współrzędne głowy
        self.rect = self.obraz.get_rect(center=(12*32+16, 9*32+16))#aktualna pozycja
        self.kierunek = Kierunek.GORA
        self.nowy_kierunek = Kierunek.GORA
        self.ostatnia_pozycja=self.rect
        self.dodaj_segment=False
        self.segmenty=[]#lista ze wszystkimi segmentami


        
    def zmien_kierunek(self, kierunek):
        zmiana_mozliwa = True
        if kierunek == Kierunek.GORA and self.kierunek == Kierunek.DOL:
            zmiana_mozliwa = False
        if kierunek == Kierunek.DOL and self.kierunek == Kierunek.GORA:
            zmiana_mozliwa=False
        if kierunek == Kierunek.LEWO and self.kierunek == Kierunek.PRAWO:
            zmiana_mozliwa = False
        if kierunek == Kierunek.PRAWO and self.kierunek == Kierunek.LEWO:
            zmiana_mozliwa = False
        if zmiana_mozliwa:
            self.nowy_kierunek = kierunek
            
    def aktualizuj(self):
        self.kierunek = self.nowy_kierunek
        self.obraz = pygame.transform.rotate(self.oryginalny_obraz,(self.kierunek.value*-90))
        self.ostatnia_pozycja=copy.deepcopy(self.rect)
        if self.kierunek == Kierunek.GORA:
            self.rect.move_ip(0, -32)
        if self.kierunek == Kierunek.PRAWO:
            self.rect.move_ip(32, 0)
        if self.kierunek == Kierunek.LEWO:
            self.rect.move_ip(-32, 0)
        if self.kierunek == Kierunek.DOL:
            self.rect.move_ip(0, 32)
        for segment in range(len(self.segmenty)):
            #dla pierwszego segmenty
            if segment==0:
                #przesunięcie pierwszego segmentu do ostatniej pozycji głowy
                self.segmenty[segment].przesun(self.ostatnia_pozycja)
            else:
                self.segmenty[segment].przesun(self.segmenty[segment-1].ostatnia_pozycja)
        if self.dodaj_segment:
            nowy_segment=Segment()
            nowa_pozycja=None
            if len(self.segmenty)>0:
                nowa_pozycja =copy.deepcopy(self.segmenty[-1].pozycja)
            else:
                nowa_pozycja=copy.deepcopy(self.ostatnia_pozycja)
            nowy_segment.pozycja=nowa_pozycja
            self.segmenty.append(nowy_segment)
            self.dodaj_segment=False
            
    def rysuj_segment(self,ekran):
        for segment in self.segmenty:
            ekran.blit(segment.obraz,segment.pozycja)
    def jedz_jablko(self):
        self.dodaj_segment=True
    





        



        "
piq3dpgy,4wheelscontroller.py,DrAungWinHtut,Python,Wednesday 28th of May 2025 10:00:56 AM CDT,"from controller import Robot

if __name__=='__main__':
    robot = Robot()
    
    timestep = 64
    max_speed = 6.28
    
    left_front_motor = robot.getDevice('motor_left_front')
    right_front_motor = robot.getDevice('motor_right_front')
    left_back_motor = robot.getDevice('motor_left_back')
    right_back_motor = robot.getDevice('motor_right_back')
    #left_motor.setPosition(float('inf'))
    left_front_motor.setPosition(float('inf'))
    right_front_motor.setPosition(float('inf'))
    left_back_motor.setPosition(float('inf'))
    right_back_motor.setPosition(float('inf'))
    left_front_motor.setVelocity(10);
    right_front_motor.setVelocity(10);
    left_back_motor.setVelocity(10);
    right_back_motor.setVelocity(10);
    "
VNe1xMh0,4wheels1.wbt,DrAungWinHtut,JSON,Wednesday 28th of May 2025 09:59:53 AM CDT,"#VRML_SIM R2025a utf8

EXTERNPROTO ""https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/backgrounds/protos/TexturedBackground.proto""
EXTERNPROTO ""https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto""
EXTERNPROTO ""https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/floors/protos/RectangleArena.proto""

WorldInfo {
}
Viewpoint {
  orientation 0.07987357375373524 -0.10424624051044758 -0.9913389599704254 4.967162579952054
  position -0.1355848939873358 -0.7054274144021473 0.2015211425405409
}
TexturedBackground {
}
TexturedBackgroundLight {
}
RectangleArena {
  floorSize 2 2
}
Solid {
  translation 0.21 0 0
  children [
    Shape {
      appearance PBRAppearance {
        baseColor 0 0 0
        roughness 1
        metalness 0
      }
      geometry Box {
        size 0.05 0.05 0.05
      }
    }
  ]
}
DEF Robot Robot {
  translation -6.009278448241306e-05 0.02005605151113183 0.020634987421419324
  rotation 0.13121761188466757 -0.0005927504440141294 -0.9913534117448712 3.873043426496412e-05
  children [
    DEF SolidBody Solid {
      translation -2.855527945213741e-14 6.938893903907228e-18 -0.0007249040012106758
      rotation 0 0 -1 6.408428074369474e-07
      children [
        DEF Left_Back_Joint HingeJoint {
          jointParameters DEF Left_Back_Joint HingeJointParameters {
            position -2.3871655094803524e-08
            axis 0 1 0
            anchor -0.05 0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_left_back""
            }
          ]
          endPoint Solid {
            translation -0.05000000000000002 0.05 6.063894724883258e-10
            rotation 0.9999999999999196 -3.3863989185341237e-07 2.1511559365139866e-07 1.570000003442234
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2(3)""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Right_Back_Joint HingeJoint {
          jointParameters DEF Right_Back_Joint HingeJointParameters {
            position -1.3708306093926636e-08
            axis 0 1 0
            anchor -0.05 -0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_right_back""
            }
          ]
          endPoint Solid {
            translation -0.05 -0.05 -1.0989830969372583e-10
            rotation 0.9999999999999224 -3.3355418454286464e-07 2.1003393776393883e-07 1.5699999964904536
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2(2)""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Right_Front_Joint HingeJoint {
          jointParameters DEF Right_Front_Joint HingeJointParameters {
            position -2.4635991639223045e-08
            axis 0 1 0
            anchor 0.05 0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_right_front""
            }
          ]
          endPoint Solid {
            translation 0.04999999999999999 0.05 6.16379873032281e-10
            rotation 0.9999999999999527 1.46934204554187e-07 -2.700719703756882e-07 1.5699999991142959
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2(1)""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Left_Front_Joint HingeJoint {
          jointParameters DEF Left_Front_Joint HingeJointParameters {
            axis 0 1 0
            anchor 0.05 -0.05 0
          }
          device [
            RotationalMotor {
              name ""motor_left_front""
            }
          ]
          endPoint Solid {
            translation 0.05 -0.05 6.163806434157709e-10
            rotation 0.9999999999999473 1.5926197332664142e-07 -2.823899364351547e-07 1.5700000008854709
            children [
              DEF wheel Shape {
                appearance PBRAppearance {
                  baseColor 1 0 0
                  roughness 1
                  metalness 0
                }
                geometry Cylinder {
                  height 0.01
                  radius 0.02
                }
              }
            ]
            name ""solid2""
            boundingObject DEF wheel Shape {
              appearance PBRAppearance {
                baseColor 1 0 0
                roughness 1
                metalness 0
              }
              geometry Cylinder {
                height 0.01
                radius 0.02
              }
            }
            physics Physics {
            }
          }
        }
        DEF Body Shape {
          appearance PBRAppearance {
            baseColor 0.145098 0.145098 0.145098
            roughness 1
            metalness 0
          }
          geometry Box {
            size 0.2 0.1 0.01
          }
        }
      ]
      name ""Body""
      boundingObject USE Body
      physics Physics {
      }
    }
  ]
  boundingObject USE Body
  physics Physics {
  }
  controller ""4wheel1controller""
}
"
58mm4WTW,Indications,MARSHAL327,JSON,Wednesday 28th of May 2025 09:59:00 AM CDT,"{
    ""t01"": [
        {
            ""date"": ""2025-02-17 15:15:02"",
            ""value"": 19.47
        },
        {
            ""date"": ""2025-02-21 16:20:02"",
            ""value"": 19.42
        },
        {
            ""date"": ""2025-02-21 16:25:02"",
            ""value"": 19.41
        },
        {
            ""date"": ""2025-02-24 13:20:03"",
            ""value"": 19.5
        },
        {
            ""date"": ""2025-02-24 13:25:02"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 13:40:03"",
            ""value"": 19.41
        },
        {
            ""date"": ""2025-02-24 10:40:00"",
            ""value"": 19.42
        },
        {
            ""date"": ""2025-02-24 10:45:00"",
            ""value"": 19.52
        },
        {
            ""date"": ""2025-02-24 10:50:00"",
            ""value"": 19.59
        },
        {
            ""date"": ""2025-02-24 10:55:00"",
            ""value"": 19.68
        },
        {
            ""date"": ""2025-02-24 11:00:00"",
            ""value"": 19.72
        },
        {
            ""date"": ""2025-02-24 11:05:00"",
            ""value"": 19.77
        },
        {
            ""date"": ""2025-02-24 11:10:00"",
            ""value"": 19.82
        },
        {
            ""date"": ""2025-02-24 11:15:00"",
            ""value"": 19.86
        },
        {
            ""date"": ""2025-02-24 11:20:00"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-02-24 11:26:00"",
            ""value"": 19.95
        },
        {
            ""date"": ""2025-02-24 11:31:00"",
            ""value"": 19.96
        },
        {
            ""date"": ""2025-02-24 11:35:00"",
            ""value"": 19.59
        },
        {
            ""date"": ""2025-02-24 12:00:00"",
            ""value"": 19.28
        },
        {
            ""date"": ""2025-02-24 16:00:02"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-02-24 16:05:03"",
            ""value"": 19.87
        },
        {
            ""date"": ""2025-02-24 16:10:04"",
            ""value"": 19.83
        },
        {
            ""date"": ""2025-02-24 16:15:02"",
            ""value"": 19.81
        },
        {
            ""date"": ""2025-02-24 16:20:03"",
            ""value"": 19.77
        },
        {
            ""date"": ""2025-03-07 11:30:03"",
            ""value"": 19.03
        },
        {
            ""date"": ""2025-03-07 08:45:00"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-03-12 14:50:03"",
            ""value"": 19.86
        },
        {
            ""date"": ""2025-03-13 17:50:02"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-13 18:00:03"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-03-13 18:05:02"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-03-18 19:10:02"",
            ""value"": 22.7
        },
        {
            ""date"": ""2025-03-18 16:15:00"",
            ""value"": 22.71
        },
        {
            ""date"": ""2025-03-18 16:20:00"",
            ""value"": 22.74
        },
        {
            ""date"": ""2025-03-18 19:25:02"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-18 16:27:00"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-18 16:32:00"",
            ""value"": 22.77
        },
        {
            ""date"": ""2025-03-18 16:37:00"",
            ""value"": 22.78
        },
        {
            ""date"": ""2025-03-18 16:42:00"",
            ""value"": 22.78
        },
        {
            ""date"": ""2025-03-18 16:47:00"",
            ""value"": 22.81
        },
        {
            ""date"": ""2025-03-18 16:52:00"",
            ""value"": 22.82
        },
        {
            ""date"": ""2025-03-18 16:57:00"",
            ""value"": 22.83
        },
        {
            ""date"": ""2025-03-18 17:02:00"",
            ""value"": 22.84
        },
        {
            ""date"": ""2025-03-18 17:08:00"",
            ""value"": 22.84
        },
        {
            ""date"": ""2025-03-20 10:25:02"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-20 07:25:00"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-20 10:30:02"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-20 07:31:00"",
            ""value"": 21.06
        },
        {
            ""date"": ""2025-03-20 07:36:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-20 07:41:00"",
            ""value"": 21.14
        },
        {
            ""date"": ""2025-03-20 10:50:03"",
            ""value"": 21.16
        },
        {
            ""date"": ""2025-03-20 10:55:01"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-20 10:55:02"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-20 07:56:00"",
            ""value"": 21.25
        },
        {
            ""date"": ""2025-03-20 08:01:00"",
            ""value"": 21.28
        },
        {
            ""date"": ""2025-03-20 11:07:54"",
            ""value"": 21.33
        },
        {
            ""date"": ""2025-03-20 11:10:02"",
            ""value"": 21.33
        },
        {
            ""date"": ""2025-03-20 08:09:00"",
            ""value"": 21.35
        },
        {
            ""date"": ""2025-03-20 08:14:00"",
            ""value"": 21.42
        },
        {
            ""date"": ""2025-03-20 08:19:00"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-03-20 08:24:00"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-20 08:29:00"",
            ""value"": 21.55
        },
        {
            ""date"": ""2025-03-20 08:34:00"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-20 08:39:00"",
            ""value"": 21.65
        },
        {
            ""date"": ""2025-03-20 08:44:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-20 08:49:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-20 08:54:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-20 08:59:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-20 09:03:00"",
            ""value"": 21.64
        },
        {
            ""date"": ""2025-03-20 10:00:00"",
            ""value"": 21.25
        },
        {
            ""date"": ""2025-03-20 11:00:00"",
            ""value"": 21.45
        },
        {
            ""date"": ""2025-03-20 17:07:32"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 17:10:02"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:13:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:18:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:23:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:28:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:33:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:38:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:43:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:48:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:53:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:58:00"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-20 15:03:00"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-20 15:07:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:45:03"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-21 11:53:42"",
            ""value"": 21.85
        },
        {
            ""date"": ""2025-03-21 11:55:02"",
            ""value"": 21.85
        },
        {
            ""date"": ""2025-03-21 08:54:00"",
            ""value"": 21.88
        },
        {
            ""date"": ""2025-03-21 08:59:00"",
            ""value"": 21.9
        },
        {
            ""date"": ""2025-03-21 12:04:36"",
            ""value"": 21.91
        },
        {
            ""date"": ""2025-03-21 12:05:10"",
            ""value"": 21.91
        },
        {
            ""date"": ""2025-03-21 09:05:00"",
            ""value"": 21.92
        },
        {
            ""date"": ""2025-03-21 09:10:00"",
            ""value"": 21.93
        },
        {
            ""date"": ""2025-03-21 09:15:00"",
            ""value"": 21.95
        },
        {
            ""date"": ""2025-03-21 09:20:00"",
            ""value"": 21.96
        },
        {
            ""date"": ""2025-03-21 09:25:00"",
            ""value"": 21.99
        },
        {
            ""date"": ""2025-03-21 09:31:00"",
            ""value"": 22.02
        },
        {
            ""date"": ""2025-03-21 09:36:00"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-21 14:18:56"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 14:20:02"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 11:20:00"",
            ""value"": 22.19
        },
        {
            ""date"": ""2025-03-21 11:25:00"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 11:30:00"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-21 11:35:00"",
            ""value"": 22.21
        },
        {
            ""date"": ""2025-03-21 11:40:00"",
            ""value"": 22.24
        },
        {
            ""date"": ""2025-03-21 11:44:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 12:00:00"",
            ""value"": 22.26
        },
        {
            ""date"": ""2025-03-21 13:00:00"",
            ""value"": 21.56
        },
        {
            ""date"": ""2025-03-21 16:18:18"",
            ""value"": 21.4
        },
        {
            ""date"": ""2025-03-21 16:20:02"",
            ""value"": 21.4
        },
        {
            ""date"": ""2025-03-21 13:19:00"",
            ""value"": 21.37
        },
        {
            ""date"": ""2025-03-21 13:24:00"",
            ""value"": 21.37
        },
        {
            ""date"": ""2025-03-21 17:02:16"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-21 14:03:00"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-21 17:05:02"",
            ""value"": 21.22
        },
        {
            ""date"": ""2025-03-21 14:08:00"",
            ""value"": 21.2
        },
        {
            ""date"": ""2025-03-21 14:13:00"",
            ""value"": 21.19
        },
        {
            ""date"": ""2025-03-21 14:18:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-21 14:23:00"",
            ""value"": 21.16
        },
        {
            ""date"": ""2025-03-21 14:28:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-21 14:33:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-21 14:38:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:43:00"",
            ""value"": 21.09
        },
        {
            ""date"": ""2025-03-21 14:48:00"",
            ""value"": 21.09
        },
        {
            ""date"": ""2025-03-21 14:53:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:57:00"",
            ""value"": 21.14
        },
        {
            ""date"": ""2025-03-21 16:00:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 19:52:31"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 19:55:02"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 16:58:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 17:03:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 17:08:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-21 17:13:00"",
            ""value"": 20.92
        },
        {
            ""date"": ""2025-03-21 17:18:00"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-21 17:23:00"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-21 17:28:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-21 17:33:00"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-21 17:38:00"",
            ""value"": 21.05
        },
        {
            ""date"": ""2025-03-21 17:43:00"",
            ""value"": 21.06
        },
        {
            ""date"": ""2025-03-21 17:48:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 17:52:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 18:00:00"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-21 19:00:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-21 20:00:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-21 21:00:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-03-21 22:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-03-22 03:00:00"",
            ""value"": 20.45
        },
        {
            ""date"": ""2025-03-22 04:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-03-22 05:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-03-22 06:00:00"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-03-22 07:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-03-22 08:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-22 09:00:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-22 10:00:00"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-22 11:00:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-22 12:00:00"",
            ""value"": 20.97
        },
        {
            ""date"": ""2025-03-22 13:00:00"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-22 14:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-22 15:00:00"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-22 16:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-22 17:00:00"",
            ""value"": 20.73
        },
        {
            ""date"": ""2025-03-22 18:00:00"",
            ""value"": 20.63
        },
        {
            ""date"": ""2025-03-22 19:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-03-22 20:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-03-22 21:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-03-22 22:00:00"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-03-23 03:00:00"",
            ""value"": 19.78
        },
        {
            ""date"": ""2025-03-23 04:00:00"",
            ""value"": 19.69
        },
        {
            ""date"": ""2025-03-23 05:00:00"",
            ""value"": 19.7
        },
        {
            ""date"": ""2025-03-23 06:00:00"",
            ""value"": 19.97
        },
        {
            ""date"": ""2025-03-23 07:00:00"",
            ""value"": 20.25
        },
        {
            ""date"": ""2025-03-23 08:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-23 09:00:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-23 10:00:00"",
            ""value"": 20.98
        },
        {
            ""date"": ""2025-03-23 11:00:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-23 12:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-23 13:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-23 14:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-23 15:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-03-23 16:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-03-23 17:00:00"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-03-23 18:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-03-23 19:00:00"",
            ""value"": 20.31
        },
        {
            ""date"": ""2025-03-23 20:00:00"",
            ""value"": 20.23
        },
        {
            ""date"": ""2025-03-23 21:00:00"",
            ""value"": 20.18
        },
        {
            ""date"": ""2025-03-23 22:00:00"",
            ""value"": 20.13
        },
        {
            ""date"": ""2025-03-24 03:00:00"",
            ""value"": 19.95
        },
        {
            ""date"": ""2025-03-24 04:00:00"",
            ""value"": 19.9
        },
        {
            ""date"": ""2025-03-24 05:00:00"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-03-24 06:00:00"",
            ""value"": 20.13
        },
        {
            ""date"": ""2025-03-24 07:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-03-24 08:00:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-24 09:00:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-24 10:00:00"",
            ""value"": 21.64
        },
        {
            ""date"": ""2025-03-24 11:00:00"",
            ""value"": 21.58
        },
        {
            ""date"": ""2025-03-24 12:00:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-24 13:00:00"",
            ""value"": 21.6
        },
        {
            ""date"": ""2025-03-24 16:14:02"",
            ""value"": 21.54
        },
        {
            ""date"": ""2025-03-24 16:15:03"",
            ""value"": 21.54
        },
        {
            ""date"": ""2025-03-24 16:20:02"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-24 16:25:02"",
            ""value"": 21.54
        },
        {
            ""date"": ""2025-03-24 17:10:02"",
            ""value"": 21.81
        },
        {
            ""date"": ""2025-03-24 17:15:03"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-24 17:20:02"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-25 13:45:02"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-25 13:50:03"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-03-25 14:00:02"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-25 14:05:15"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-25 14:10:03"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-25 14:30:02"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-25 14:45:02"",
            ""value"": 20.97
        },
        {
            ""date"": ""2025-03-25 14:50:02"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-25 14:55:02"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-25 15:15:07"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-27 14:10:03"",
            ""value"": 22.28
        },
        {
            ""date"": ""2025-03-27 14:12:19"",
            ""value"": 22.08
        },
        {
            ""date"": ""2025-03-27 14:15:03"",
            ""value"": 22.11
        },
        {
            ""date"": ""2025-03-27 14:21:15"",
            ""value"": 21.87
        },
        {
            ""date"": ""2025-03-27 14:22:54"",
            ""value"": 21.85
        },
        {
            ""date"": ""2025-03-27 14:25:03"",
            ""value"": 21.87
        },
        {
            ""date"": ""2025-03-27 14:30:03"",
            ""value"": 21.77
        },
        {
            ""date"": ""2025-03-28 15:33:06"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-28 15:35:03"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-28 12:34:00"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-04-04 10:30:02"",
            ""value"": 13.49
        },
        {
            ""date"": ""2025-04-04 07:43:00"",
            ""value"": 13.98
        },
        {
            ""date"": ""2025-04-04 11:20:02"",
            ""value"": 15.09
        },
        {
            ""date"": ""2025-04-04 18:40:03"",
            ""value"": 20.14
        },
        {
            ""date"": ""2025-04-04 18:55:02"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-04 19:20:02"",
            ""value"": 19.78
        },
        {
            ""date"": ""2025-04-04 19:25:03"",
            ""value"": 19.64
        },
        {
            ""date"": ""2025-04-04 19:30:03"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-04-04 16:40:00"",
            ""value"": 19.17
        },
        {
            ""date"": ""2025-04-04 16:50:00"",
            ""value"": 18.85
        },
        {
            ""date"": ""2025-04-04 17:41:00"",
            ""value"": 19.63
        },
        {
            ""date"": ""2025-04-04 18:11:00"",
            ""value"": 20.09
        },
        {
            ""date"": ""2025-04-04 18:20:00"",
            ""value"": 20.21
        },
        {
            ""date"": ""2025-04-04 19:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-04 20:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-04 21:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-04 22:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-04 23:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-05 00:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-05 01:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-05 02:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 03:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 04:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-04-05 05:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 06:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 08:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 09:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 10:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-05 11:00:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-04-05 12:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-04-05 13:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-04-05 14:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-04-05 15:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 16:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-05 17:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-05 18:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-05 19:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-05 20:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-05 21:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-04-05 22:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-05 23:00:00"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-04-06 00:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-06 01:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-06 02:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-06 03:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-04-06 04:00:00"",
            ""value"": 20.34
        },
        {
            ""date"": ""2025-04-06 05:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-04-06 06:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-04-06 07:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-06 08:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-06 09:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-06 10:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-06 11:00:00"",
            ""value"": 20.77
        },
        {
            ""date"": ""2025-04-06 12:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-06 13:00:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-04-06 14:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-04-06 15:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-06 16:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-06 17:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-06 18:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-06 19:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-06 20:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-04-06 21:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-06 22:00:00"",
            ""value"": 20.59
        },
        {
            ""date"": ""2025-04-06 23:00:00"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-04-07 00:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-04-07 01:00:00"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-04-07 02:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-07 03:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-07 04:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-07 05:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-07 06:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-04-07 07:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-07 08:00:00"",
            ""value"": 18.17
        },
        {
            ""date"": ""2025-04-07 09:00:00"",
            ""value"": 15.26
        },
        {
            ""date"": ""2025-04-07 12:23:10"",
            ""value"": 16.17
        },
        {
            ""date"": ""2025-04-07 12:25:02"",
            ""value"": 16.17
        },
        {
            ""date"": ""2025-04-07 09:28:00"",
            ""value"": 16.38
        },
        {
            ""date"": ""2025-04-07 09:38:00"",
            ""value"": 16.82
        },
        {
            ""date"": ""2025-04-07 13:25:02"",
            ""value"": 19.41
        },
        {
            ""date"": ""2025-04-07 13:30:03"",
            ""value"": 20.0
        }
    ],
    ""t02"": [
        {
            ""date"": ""2025-02-17 15:15:02"",
            ""value"": 19.37
        },
        {
            ""date"": ""2025-02-21 16:20:02"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-02-21 16:25:02"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-02-24 13:20:03"",
            ""value"": 19.53
        },
        {
            ""date"": ""2025-02-24 13:25:02"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 13:40:03"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-02-24 10:40:00"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-02-24 10:45:00"",
            ""value"": 19.49
        },
        {
            ""date"": ""2025-02-24 10:50:00"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 10:55:00"",
            ""value"": 19.6
        },
        {
            ""date"": ""2025-02-24 11:00:00"",
            ""value"": 19.65
        },
        {
            ""date"": ""2025-02-24 11:05:00"",
            ""value"": 19.7
        },
        {
            ""date"": ""2025-02-24 11:10:00"",
            ""value"": 19.74
        },
        {
            ""date"": ""2025-02-24 11:15:00"",
            ""value"": 19.79
        },
        {
            ""date"": ""2025-02-24 11:20:00"",
            ""value"": 19.82
        },
        {
            ""date"": ""2025-02-24 11:26:00"",
            ""value"": 19.87
        },
        {
            ""date"": ""2025-02-24 11:31:00"",
            ""value"": 19.91
        },
        {
            ""date"": ""2025-02-24 11:35:00"",
            ""value"": 19.81
        },
        {
            ""date"": ""2025-02-24 12:00:00"",
            ""value"": 19.4
        },
        {
            ""date"": ""2025-02-24 16:00:02"",
            ""value"": 19.92
        },
        {
            ""date"": ""2025-02-24 16:05:03"",
            ""value"": 19.92
        },
        {
            ""date"": ""2025-02-24 16:10:04"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-02-24 16:15:02"",
            ""value"": 19.87
        },
        {
            ""date"": ""2025-02-24 16:20:03"",
            ""value"": 19.82
        },
        {
            ""date"": ""2025-03-07 11:30:03"",
            ""value"": 18.84
        },
        {
            ""date"": ""2025-03-07 08:45:00"",
            ""value"": 19.19
        },
        {
            ""date"": ""2025-03-12 14:50:03"",
            ""value"": 19.71
        },
        {
            ""date"": ""2025-03-13 17:50:02"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-03-13 18:00:03"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-03-13 18:05:02"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-03-18 19:10:02"",
            ""value"": 22.58
        },
        {
            ""date"": ""2025-03-18 16:15:00"",
            ""value"": 22.58
        },
        {
            ""date"": ""2025-03-18 16:20:00"",
            ""value"": 22.59
        },
        {
            ""date"": ""2025-03-18 19:25:02"",
            ""value"": 22.6
        },
        {
            ""date"": ""2025-03-18 16:27:00"",
            ""value"": 22.6
        },
        {
            ""date"": ""2025-03-18 16:32:00"",
            ""value"": 22.62
        },
        {
            ""date"": ""2025-03-18 16:37:00"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:42:00"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:47:00"",
            ""value"": 22.65
        },
        {
            ""date"": ""2025-03-18 16:52:00"",
            ""value"": 22.66
        },
        {
            ""date"": ""2025-03-18 16:57:00"",
            ""value"": 22.67
        },
        {
            ""date"": ""2025-03-18 17:02:00"",
            ""value"": 22.68
        },
        {
            ""date"": ""2025-03-18 17:08:00"",
            ""value"": 22.68
        },
        {
            ""date"": ""2025-03-20 10:25:02"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-20 07:25:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-03-20 10:30:02"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-20 07:31:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-03-20 07:36:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-20 07:41:00"",
            ""value"": 20.92
        },
        {
            ""date"": ""2025-03-20 10:50:03"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-20 10:55:01"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-20 10:55:02"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-20 07:56:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-20 08:01:00"",
            ""value"": 21.07
        },
        {
            ""date"": ""2025-03-20 11:07:54"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-20 11:10:02"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-20 08:09:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-20 08:14:00"",
            ""value"": 21.18
        },
        {
            ""date"": ""2025-03-20 08:19:00"",
            ""value"": 21.23
        },
        {
            ""date"": ""2025-03-20 08:24:00"",
            ""value"": 21.28
        },
        {
            ""date"": ""2025-03-20 08:29:00"",
            ""value"": 21.32
        },
        {
            ""date"": ""2025-03-20 08:34:00"",
            ""value"": 21.36
        },
        {
            ""date"": ""2025-03-20 08:39:00"",
            ""value"": 21.41
        },
        {
            ""date"": ""2025-03-20 08:44:00"",
            ""value"": 21.45
        },
        {
            ""date"": ""2025-03-20 08:49:00"",
            ""value"": 21.49
        },
        {
            ""date"": ""2025-03-20 08:54:00"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-20 08:59:00"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-20 09:03:00"",
            ""value"": 21.51
        },
        {
            ""date"": ""2025-03-20 10:00:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-20 11:00:00"",
            ""value"": 21.26
        },
        {
            ""date"": ""2025-03-20 17:07:32"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-20 17:10:02"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-20 14:13:00"",
            ""value"": 22.03
        },
        {
            ""date"": ""2025-03-20 14:18:00"",
            ""value"": 22.04
        },
        {
            ""date"": ""2025-03-20 14:23:00"",
            ""value"": 22.04
        },
        {
            ""date"": ""2025-03-20 14:28:00"",
            ""value"": 22.04
        },
        {
            ""date"": ""2025-03-20 14:33:00"",
            ""value"": 22.05
        },
        {
            ""date"": ""2025-03-20 14:38:00"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-20 14:43:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-20 14:48:00"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-20 14:53:00"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-20 14:58:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-20 15:03:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-20 15:07:00"",
            ""value"": 22.07
        },
        {
            ""date"": ""2025-03-21 11:45:03"",
            ""value"": 21.55
        },
        {
            ""date"": ""2025-03-21 11:53:42"",
            ""value"": 21.67
        },
        {
            ""date"": ""2025-03-21 11:55:02"",
            ""value"": 21.67
        },
        {
            ""date"": ""2025-03-21 08:54:00"",
            ""value"": 21.68
        },
        {
            ""date"": ""2025-03-21 08:59:00"",
            ""value"": 21.73
        },
        {
            ""date"": ""2025-03-21 12:04:36"",
            ""value"": 21.74
        },
        {
            ""date"": ""2025-03-21 12:05:10"",
            ""value"": 21.74
        },
        {
            ""date"": ""2025-03-21 09:05:00"",
            ""value"": 21.77
        },
        {
            ""date"": ""2025-03-21 09:10:00"",
            ""value"": 21.79
        },
        {
            ""date"": ""2025-03-21 09:15:00"",
            ""value"": 21.81
        },
        {
            ""date"": ""2025-03-21 09:20:00"",
            ""value"": 21.84
        },
        {
            ""date"": ""2025-03-21 09:25:00"",
            ""value"": 21.86
        },
        {
            ""date"": ""2025-03-21 09:31:00"",
            ""value"": 21.9
        },
        {
            ""date"": ""2025-03-21 09:36:00"",
            ""value"": 21.93
        },
        {
            ""date"": ""2025-03-21 14:18:56"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-21 14:20:02"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-21 11:20:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:25:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-21 11:30:00"",
            ""value"": 22.16
        },
        {
            ""date"": ""2025-03-21 11:35:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:40:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:44:00"",
            ""value"": 22.18
        },
        {
            ""date"": ""2025-03-21 12:00:00"",
            ""value"": 22.21
        },
        {
            ""date"": ""2025-03-21 13:00:00"",
            ""value"": 21.59
        },
        {
            ""date"": ""2025-03-21 16:18:18"",
            ""value"": 21.43
        },
        {
            ""date"": ""2025-03-21 16:20:02"",
            ""value"": 21.43
        },
        {
            ""date"": ""2025-03-21 13:19:00"",
            ""value"": 21.37
        },
        {
            ""date"": ""2025-03-21 13:24:00"",
            ""value"": 21.34
        },
        {
            ""date"": ""2025-03-21 17:02:16"",
            ""value"": 21.2
        },
        {
            ""date"": ""2025-03-21 14:03:00"",
            ""value"": 21.18
        },
        {
            ""date"": ""2025-03-21 17:05:02"",
            ""value"": 21.2
        },
        {
            ""date"": ""2025-03-21 14:08:00"",
            ""value"": 21.15
        },
        {
            ""date"": ""2025-03-21 14:13:00"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-21 14:18:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:23:00"",
            ""value"": 21.09
        },
        {
            ""date"": ""2025-03-21 14:28:00"",
            ""value"": 21.06
        },
        {
            ""date"": ""2025-03-21 14:33:00"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-21 14:38:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-21 14:43:00"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-21 14:48:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 14:53:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 14:57:00"",
            ""value"": 21.01
        },
        {
            ""date"": ""2025-03-21 16:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-21 19:52:31"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 19:55:02"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 16:58:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 17:03:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 17:08:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-21 17:13:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-21 17:18:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-21 17:23:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-03-21 17:28:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-03-21 17:33:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-21 17:38:00"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-21 17:43:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-21 17:48:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-21 17:52:00"",
            ""value"": 20.93
        },
        {
            ""date"": ""2025-03-21 18:00:00"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-21 19:00:00"",
            ""value"": 20.98
        },
        {
            ""date"": ""2025-03-21 20:00:00"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 21:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-03-21 22:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-03-22 03:00:00"",
            ""value"": 20.31
        },
        {
            ""date"": ""2025-03-22 04:00:00"",
            ""value"": 20.25
        },
        {
            ""date"": ""2025-03-22 05:00:00"",
            ""value"": 20.15
        },
        {
            ""date"": ""2025-03-22 06:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-03-22 07:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-22 08:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-03-22 09:00:00"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-22 10:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-22 11:00:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-22 12:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-03-22 13:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-03-22 14:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-03-22 15:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-03-22 16:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-03-22 17:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-03-22 18:00:00"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-03-22 19:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-03-22 20:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-03-22 21:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-03-22 22:00:00"",
            ""value"": 20.07
        },
        {
            ""date"": ""2025-03-23 03:00:00"",
            ""value"": 19.65
        },
        {
            ""date"": ""2025-03-23 04:00:00"",
            ""value"": 19.56
        },
        {
            ""date"": ""2025-03-23 05:00:00"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-03-23 06:00:00"",
            ""value"": 19.78
        },
        {
            ""date"": ""2025-03-23 07:00:00"",
            ""value"": 20.07
        },
        {
            ""date"": ""2025-03-23 08:00:00"",
            ""value"": 20.52
        },
        {
            ""date"": ""2025-03-23 09:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-23 10:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-23 11:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-03-23 12:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-03-23 13:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-03-23 14:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-03-23 15:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-03-23 16:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-23 17:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-03-23 18:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-03-23 19:00:00"",
            ""value"": 20.17
        },
        {
            ""date"": ""2025-03-23 20:00:00"",
            ""value"": 20.06
        },
        {
            ""date"": ""2025-03-23 21:00:00"",
            ""value"": 20.02
        },
        {
            ""date"": ""2025-03-23 22:00:00"",
            ""value"": 19.96
        },
        {
            ""date"": ""2025-03-24 03:00:00"",
            ""value"": 19.79
        },
        {
            ""date"": ""2025-03-24 04:00:00"",
            ""value"": 19.74
        },
        {
            ""date"": ""2025-03-24 05:00:00"",
            ""value"": 19.72
        },
        {
            ""date"": ""2025-03-24 06:00:00"",
            ""value"": 19.9
        },
        {
            ""date"": ""2025-03-24 07:00:00"",
            ""value"": 20.37
        },
        {
            ""date"": ""2025-03-24 08:00:00"",
            ""value"": 21.04
        },
        {
            ""date"": ""2025-03-24 09:00:00"",
            ""value"": 21.67
        },
        {
            ""date"": ""2025-03-24 10:00:00"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-24 11:00:00"",
            ""value"": 21.6
        },
        {
            ""date"": ""2025-03-24 12:00:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-24 13:00:00"",
            ""value"": 21.56
        },
        {
            ""date"": ""2025-03-24 16:14:02"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 16:15:03"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 16:20:02"",
            ""value"": 21.51
        },
        {
            ""date"": ""2025-03-24 16:25:02"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 17:10:02"",
            ""value"": 21.65
        },
        {
            ""date"": ""2025-03-24 17:15:03"",
            ""value"": 21.62
        },
        {
            ""date"": ""2025-03-24 17:20:02"",
            ""value"": 21.57
        },
        {
            ""date"": ""2025-03-25 13:45:02"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-03-25 13:50:03"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-03-25 14:00:02"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-25 14:05:15"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-25 14:10:03"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-03-25 14:30:02"",
            ""value"": 20.48
        },
        {
            ""date"": ""2025-03-25 14:45:02"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-03-25 14:50:02"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-03-25 14:55:02"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-03-25 15:15:07"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-03-27 14:10:03"",
            ""value"": 22.21
        },
        {
            ""date"": ""2025-03-27 14:12:19"",
            ""value"": 22.19
        },
        {
            ""date"": ""2025-03-27 14:15:03"",
            ""value"": 22.2
        },
        {
            ""date"": ""2025-03-27 14:21:15"",
            ""value"": 22.08
        },
        {
            ""date"": ""2025-03-27 14:22:54"",
            ""value"": 22.06
        },
        {
            ""date"": ""2025-03-27 14:25:03"",
            ""value"": 22.08
        },
        {
            ""date"": ""2025-03-27 14:30:03"",
            ""value"": 21.96
        },
        {
            ""date"": ""2025-03-28 15:33:06"",
            ""value"": 21.24
        },
        {
            ""date"": ""2025-03-28 15:35:03"",
            ""value"": 21.24
        },
        {
            ""date"": ""2025-03-28 12:34:00"",
            ""value"": 21.25
        },
        {
            ""date"": ""2025-04-04 10:30:02"",
            ""value"": 13.71
        },
        {
            ""date"": ""2025-04-04 07:43:00"",
            ""value"": 13.94
        },
        {
            ""date"": ""2025-04-04 11:20:02"",
            ""value"": 14.95
        },
        {
            ""date"": ""2025-04-04 18:40:03"",
            ""value"": 19.7
        },
        {
            ""date"": ""2025-04-04 18:55:02"",
            ""value"": 20.05
        },
        {
            ""date"": ""2025-04-04 19:20:02"",
            ""value"": 19.8
        },
        {
            ""date"": ""2025-04-04 19:25:03"",
            ""value"": 19.68
        },
        {
            ""date"": ""2025-04-04 19:30:03"",
            ""value"": 19.53
        },
        {
            ""date"": ""2025-04-04 16:40:00"",
            ""value"": 19.24
        },
        {
            ""date"": ""2025-04-04 16:50:00"",
            ""value"": 18.96
        },
        {
            ""date"": ""2025-04-04 17:41:00"",
            ""value"": 19.35
        },
        {
            ""date"": ""2025-04-04 18:11:00"",
            ""value"": 19.85
        },
        {
            ""date"": ""2025-04-04 18:20:00"",
            ""value"": 20.0
        },
        {
            ""date"": ""2025-04-04 19:00:00"",
            ""value"": 20.34
        },
        {
            ""date"": ""2025-04-04 20:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-04 21:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-04 22:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-04 23:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-05 00:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-05 01:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-04-05 02:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-05 03:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-04-05 04:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-04-05 05:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-05 06:00:00"",
            ""value"": 20.63
        },
        {
            ""date"": ""2025-04-05 08:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-05 09:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-05 10:00:00"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-04-05 11:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-05 12:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 13:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 14:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-05 15:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-04-05 16:00:00"",
            ""value"": 20.63
        },
        {
            ""date"": ""2025-04-05 17:00:00"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-04-05 18:00:00"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-04-05 19:00:00"",
            ""value"": 20.46
        },
        {
            ""date"": ""2025-04-05 20:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-05 21:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-05 22:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-05 23:00:00"",
            ""value"": 20.32
        },
        {
            ""date"": ""2025-04-06 00:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-04-06 01:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-04-06 02:00:00"",
            ""value"": 20.25
        },
        {
            ""date"": ""2025-04-06 03:00:00"",
            ""value"": 20.23
        },
        {
            ""date"": ""2025-04-06 04:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-04-06 05:00:00"",
            ""value"": 20.18
        },
        {
            ""date"": ""2025-04-06 06:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-04-06 07:00:00"",
            ""value"": 20.24
        },
        {
            ""date"": ""2025-04-06 08:00:00"",
            ""value"": 20.29
        },
        {
            ""date"": ""2025-04-06 09:00:00"",
            ""value"": 20.46
        },
        {
            ""date"": ""2025-04-06 10:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-04-06 11:00:00"",
            ""value"": 20.65
        },
        {
            ""date"": ""2025-04-06 12:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-04-06 13:00:00"",
            ""value"": 20.73
        },
        {
            ""date"": ""2025-04-06 14:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-06 15:00:00"",
            ""value"": 20.69
        },
        {
            ""date"": ""2025-04-06 16:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-04-06 17:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-04-06 18:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-06 19:00:00"",
            ""value"": 20.54
        },
        {
            ""date"": ""2025-04-06 20:00:00"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-04-06 21:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-06 22:00:00"",
            ""value"": 20.45
        },
        {
            ""date"": ""2025-04-06 23:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-04-07 00:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-07 01:00:00"",
            ""value"": 20.37
        },
        {
            ""date"": ""2025-04-07 02:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-07 03:00:00"",
            ""value"": 20.32
        },
        {
            ""date"": ""2025-04-07 04:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-04-07 05:00:00"",
            ""value"": 20.27
        },
        {
            ""date"": ""2025-04-07 06:00:00"",
            ""value"": 20.23
        },
        {
            ""date"": ""2025-04-07 07:00:00"",
            ""value"": 20.2
        },
        {
            ""date"": ""2025-04-07 08:00:00"",
            ""value"": 18.49
        },
        {
            ""date"": ""2025-04-07 09:00:00"",
            ""value"": 15.03
        },
        {
            ""date"": ""2025-04-07 12:23:10"",
            ""value"": 15.64
        },
        {
            ""date"": ""2025-04-07 12:25:02"",
            ""value"": 15.64
        },
        {
            ""date"": ""2025-04-07 09:28:00"",
            ""value"": 15.86
        },
        {
            ""date"": ""2025-04-07 09:38:00"",
            ""value"": 16.31
        },
        {
            ""date"": ""2025-04-07 13:25:02"",
            ""value"": 18.94
        },
        {
            ""date"": ""2025-04-07 13:30:03"",
            ""value"": 19.34
        }
    ],
    ""t03"": [
        {
            ""date"": ""2025-02-17 15:15:02"",
            ""value"": 19.4
        },
        {
            ""date"": ""2025-02-21 16:20:02"",
            ""value"": 19.39
        },
        {
            ""date"": ""2025-02-21 16:25:02"",
            ""value"": 19.38
        },
        {
            ""date"": ""2025-02-24 13:20:03"",
            ""value"": 19.24
        },
        {
            ""date"": ""2025-02-24 13:25:02"",
            ""value"": 19.28
        },
        {
            ""date"": ""2025-02-24 13:40:03"",
            ""value"": 19.13
        },
        {
            ""date"": ""2025-02-24 10:40:00"",
            ""value"": 19.15
        },
        {
            ""date"": ""2025-02-24 10:45:00"",
            ""value"": 19.2
        },
        {
            ""date"": ""2025-02-24 10:50:00"",
            ""value"": 19.25
        },
        {
            ""date"": ""2025-02-24 10:55:00"",
            ""value"": 19.29
        },
        {
            ""date"": ""2025-02-24 11:00:00"",
            ""value"": 19.33
        },
        {
            ""date"": ""2025-02-24 11:05:00"",
            ""value"": 19.36
        },
        {
            ""date"": ""2025-02-24 11:10:00"",
            ""value"": 19.39
        },
        {
            ""date"": ""2025-02-24 11:15:00"",
            ""value"": 19.44
        },
        {
            ""date"": ""2025-02-24 11:20:00"",
            ""value"": 19.47
        },
        {
            ""date"": ""2025-02-24 11:26:00"",
            ""value"": 19.5
        },
        {
            ""date"": ""2025-02-24 11:31:00"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 11:35:00"",
            ""value"": 19.27
        },
        {
            ""date"": ""2025-02-24 12:00:00"",
            ""value"": 18.93
        },
        {
            ""date"": ""2025-02-24 16:00:02"",
            ""value"": 19.54
        },
        {
            ""date"": ""2025-02-24 16:05:03"",
            ""value"": 19.53
        },
        {
            ""date"": ""2025-02-24 16:10:04"",
            ""value"": 19.5
        },
        {
            ""date"": ""2025-02-24 16:15:02"",
            ""value"": 19.48
        },
        {
            ""date"": ""2025-02-24 16:20:03"",
            ""value"": 19.44
        },
        {
            ""date"": ""2025-03-07 11:30:03"",
            ""value"": 18.84
        },
        {
            ""date"": ""2025-03-07 08:45:00"",
            ""value"": 19.16
        },
        {
            ""date"": ""2025-03-12 14:50:03"",
            ""value"": 19.73
        },
        {
            ""date"": ""2025-03-13 17:50:02"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-03-13 18:00:03"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-03-13 18:05:02"",
            ""value"": 20.58
        },
        {
            ""date"": ""2025-03-18 19:10:02"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:15:00"",
            ""value"": 22.63
        },
        {
            ""date"": ""2025-03-18 16:20:00"",
            ""value"": 22.64
        },
        {
            ""date"": ""2025-03-18 19:25:02"",
            ""value"": 22.66
        },
        {
            ""date"": ""2025-03-18 16:27:00"",
            ""value"": 22.66
        },
        {
            ""date"": ""2025-03-18 16:32:00"",
            ""value"": 22.67
        },
        {
            ""date"": ""2025-03-18 16:37:00"",
            ""value"": 22.68
        },
        {
            ""date"": ""2025-03-18 16:42:00"",
            ""value"": 22.69
        },
        {
            ""date"": ""2025-03-18 16:47:00"",
            ""value"": 22.71
        },
        {
            ""date"": ""2025-03-18 16:52:00"",
            ""value"": 22.73
        },
        {
            ""date"": ""2025-03-18 16:57:00"",
            ""value"": 22.74
        },
        {
            ""date"": ""2025-03-18 17:02:00"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-18 17:08:00"",
            ""value"": 22.75
        },
        {
            ""date"": ""2025-03-20 10:25:02"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-20 07:25:00"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-20 10:30:02"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-20 07:31:00"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-20 07:36:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-20 07:41:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-20 10:50:03"",
            ""value"": 21.05
        },
        {
            ""date"": ""2025-03-20 10:55:01"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-20 10:55:02"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-20 07:56:00"",
            ""value"": 21.13
        },
        {
            ""date"": ""2025-03-20 08:01:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-20 11:07:54"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-20 11:10:02"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-20 08:09:00"",
            ""value"": 21.23
        },
        {
            ""date"": ""2025-03-20 08:14:00"",
            ""value"": 21.28
        },
        {
            ""date"": ""2025-03-20 08:19:00"",
            ""value"": 21.33
        },
        {
            ""date"": ""2025-03-20 08:24:00"",
            ""value"": 21.35
        },
        {
            ""date"": ""2025-03-20 08:29:00"",
            ""value"": 21.39
        },
        {
            ""date"": ""2025-03-20 08:34:00"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-20 08:39:00"",
            ""value"": 21.49
        },
        {
            ""date"": ""2025-03-20 08:44:00"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-20 08:49:00"",
            ""value"": 21.57
        },
        {
            ""date"": ""2025-03-20 08:54:00"",
            ""value"": 21.59
        },
        {
            ""date"": ""2025-03-20 08:59:00"",
            ""value"": 21.6
        },
        {
            ""date"": ""2025-03-20 09:03:00"",
            ""value"": 21.57
        },
        {
            ""date"": ""2025-03-20 10:00:00"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-20 11:00:00"",
            ""value"": 21.32
        },
        {
            ""date"": ""2025-03-20 17:07:32"",
            ""value"": 22.11
        },
        {
            ""date"": ""2025-03-20 17:10:02"",
            ""value"": 22.11
        },
        {
            ""date"": ""2025-03-20 14:13:00"",
            ""value"": 22.12
        },
        {
            ""date"": ""2025-03-20 14:18:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:23:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:28:00"",
            ""value"": 22.13
        },
        {
            ""date"": ""2025-03-20 14:33:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:38:00"",
            ""value"": 22.14
        },
        {
            ""date"": ""2025-03-20 14:43:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:48:00"",
            ""value"": 22.15
        },
        {
            ""date"": ""2025-03-20 14:53:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-20 14:58:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-20 15:03:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-20 15:07:00"",
            ""value"": 22.17
        },
        {
            ""date"": ""2025-03-21 11:45:03"",
            ""value"": 21.64
        },
        {
            ""date"": ""2025-03-21 11:53:42"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-21 11:55:02"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-21 08:54:00"",
            ""value"": 21.78
        },
        {
            ""date"": ""2025-03-21 08:59:00"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-21 12:04:36"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-21 12:05:10"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-21 09:05:00"",
            ""value"": 21.86
        },
        {
            ""date"": ""2025-03-21 09:10:00"",
            ""value"": 21.87
        },
        {
            ""date"": ""2025-03-21 09:15:00"",
            ""value"": 21.89
        },
        {
            ""date"": ""2025-03-21 09:20:00"",
            ""value"": 21.91
        },
        {
            ""date"": ""2025-03-21 09:25:00"",
            ""value"": 21.94
        },
        {
            ""date"": ""2025-03-21 09:31:00"",
            ""value"": 21.97
        },
        {
            ""date"": ""2025-03-21 09:36:00"",
            ""value"": 22.0
        },
        {
            ""date"": ""2025-03-21 14:18:56"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 14:20:02"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:20:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:25:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:30:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:35:00"",
            ""value"": 22.25
        },
        {
            ""date"": ""2025-03-21 11:40:00"",
            ""value"": 22.26
        },
        {
            ""date"": ""2025-03-21 11:44:00"",
            ""value"": 22.28
        },
        {
            ""date"": ""2025-03-21 12:00:00"",
            ""value"": 22.3
        },
        {
            ""date"": ""2025-03-21 13:00:00"",
            ""value"": 21.69
        },
        {
            ""date"": ""2025-03-21 16:18:18"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-21 16:20:02"",
            ""value"": 21.53
        },
        {
            ""date"": ""2025-03-21 13:19:00"",
            ""value"": 21.47
        },
        {
            ""date"": ""2025-03-21 13:24:00"",
            ""value"": 21.44
        },
        {
            ""date"": ""2025-03-21 17:02:16"",
            ""value"": 21.27
        },
        {
            ""date"": ""2025-03-21 14:03:00"",
            ""value"": 21.26
        },
        {
            ""date"": ""2025-03-21 17:05:02"",
            ""value"": 21.27
        },
        {
            ""date"": ""2025-03-21 14:08:00"",
            ""value"": 21.24
        },
        {
            ""date"": ""2025-03-21 14:13:00"",
            ""value"": 21.21
        },
        {
            ""date"": ""2025-03-21 14:18:00"",
            ""value"": 21.19
        },
        {
            ""date"": ""2025-03-21 14:23:00"",
            ""value"": 21.17
        },
        {
            ""date"": ""2025-03-21 14:28:00"",
            ""value"": 21.14
        },
        {
            ""date"": ""2025-03-21 14:33:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-21 14:38:00"",
            ""value"": 21.1
        },
        {
            ""date"": ""2025-03-21 14:43:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 14:48:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 14:53:00"",
            ""value"": 21.07
        },
        {
            ""date"": ""2025-03-21 14:57:00"",
            ""value"": 21.08
        },
        {
            ""date"": ""2025-03-21 16:00:00"",
            ""value"": 20.97
        },
        {
            ""date"": ""2025-03-21 19:52:31"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 19:55:02"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 16:58:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-21 17:03:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-21 17:08:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-03-21 17:13:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-21 17:18:00"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-03-21 17:23:00"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-21 17:28:00"",
            ""value"": 20.93
        },
        {
            ""date"": ""2025-03-21 17:33:00"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-21 17:38:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-21 17:43:00"",
            ""value"": 21.0
        },
        {
            ""date"": ""2025-03-21 17:48:00"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-21 17:52:00"",
            ""value"": 21.05
        },
        {
            ""date"": ""2025-03-21 18:00:00"",
            ""value"": 21.07
        },
        {
            ""date"": ""2025-03-21 19:00:00"",
            ""value"": 21.11
        },
        {
            ""date"": ""2025-03-21 20:00:00"",
            ""value"": 21.03
        },
        {
            ""date"": ""2025-03-21 21:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-03-21 22:00:00"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-03-22 03:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-22 04:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-03-22 05:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-03-22 06:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-03-22 07:00:00"",
            ""value"": 20.6
        },
        {
            ""date"": ""2025-03-22 08:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-03-22 09:00:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-22 10:00:00"",
            ""value"": 20.99
        },
        {
            ""date"": ""2025-03-22 11:00:00"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-22 12:00:00"",
            ""value"": 20.94
        },
        {
            ""date"": ""2025-03-22 13:00:00"",
            ""value"": 20.9
        },
        {
            ""date"": ""2025-03-22 14:00:00"",
            ""value"": 20.87
        },
        {
            ""date"": ""2025-03-22 15:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-22 16:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-22 17:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-03-22 18:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-03-22 19:00:00"",
            ""value"": 20.55
        },
        {
            ""date"": ""2025-03-22 20:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-03-22 21:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-03-22 22:00:00"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-03-23 03:00:00"",
            ""value"": 19.75
        },
        {
            ""date"": ""2025-03-23 04:00:00"",
            ""value"": 19.66
        },
        {
            ""date"": ""2025-03-23 05:00:00"",
            ""value"": 19.65
        },
        {
            ""date"": ""2025-03-23 06:00:00"",
            ""value"": 19.9
        },
        {
            ""date"": ""2025-03-23 07:00:00"",
            ""value"": 20.17
        },
        {
            ""date"": ""2025-03-23 08:00:00"",
            ""value"": 20.55
        },
        {
            ""date"": ""2025-03-23 09:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-03-23 10:00:00"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-23 11:00:00"",
            ""value"": 20.84
        },
        {
            ""date"": ""2025-03-23 12:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-23 13:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-03-23 14:00:00"",
            ""value"": 20.71
        },
        {
            ""date"": ""2025-03-23 15:00:00"",
            ""value"": 20.66
        },
        {
            ""date"": ""2025-03-23 16:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-03-23 17:00:00"",
            ""value"": 20.51
        },
        {
            ""date"": ""2025-03-23 18:00:00"",
            ""value"": 20.43
        },
        {
            ""date"": ""2025-03-23 19:00:00"",
            ""value"": 20.31
        },
        {
            ""date"": ""2025-03-23 20:00:00"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-03-23 21:00:00"",
            ""value"": 20.19
        },
        {
            ""date"": ""2025-03-23 22:00:00"",
            ""value"": 20.14
        },
        {
            ""date"": ""2025-03-24 03:00:00"",
            ""value"": 19.97
        },
        {
            ""date"": ""2025-03-24 04:00:00"",
            ""value"": 19.93
        },
        {
            ""date"": ""2025-03-24 05:00:00"",
            ""value"": 19.89
        },
        {
            ""date"": ""2025-03-24 06:00:00"",
            ""value"": 20.05
        },
        {
            ""date"": ""2025-03-24 07:00:00"",
            ""value"": 20.62
        },
        {
            ""date"": ""2025-03-24 08:00:00"",
            ""value"": 21.18
        },
        {
            ""date"": ""2025-03-24 09:00:00"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-24 10:00:00"",
            ""value"": 21.75
        },
        {
            ""date"": ""2025-03-24 11:00:00"",
            ""value"": 21.7
        },
        {
            ""date"": ""2025-03-24 12:00:00"",
            ""value"": 21.83
        },
        {
            ""date"": ""2025-03-24 13:00:00"",
            ""value"": 21.61
        },
        {
            ""date"": ""2025-03-24 16:14:02"",
            ""value"": 21.58
        },
        {
            ""date"": ""2025-03-24 16:15:03"",
            ""value"": 21.58
        },
        {
            ""date"": ""2025-03-24 16:20:02"",
            ""value"": 21.56
        },
        {
            ""date"": ""2025-03-24 16:25:02"",
            ""value"": 21.52
        },
        {
            ""date"": ""2025-03-24 17:10:02"",
            ""value"": 21.88
        },
        {
            ""date"": ""2025-03-24 17:15:03"",
            ""value"": 21.86
        },
        {
            ""date"": ""2025-03-24 17:20:02"",
            ""value"": 21.77
        },
        {
            ""date"": ""2025-03-25 13:45:02"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-03-25 13:50:03"",
            ""value"": 20.89
        },
        {
            ""date"": ""2025-03-25 14:00:02"",
            ""value"": 21.12
        },
        {
            ""date"": ""2025-03-25 14:05:15"",
            ""value"": 20.98
        },
        {
            ""date"": ""2025-03-25 14:10:03"",
            ""value"": 20.91
        },
        {
            ""date"": ""2025-03-25 14:30:02"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-03-25 14:45:02"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-25 14:50:02"",
            ""value"": 20.95
        },
        {
            ""date"": ""2025-03-25 14:55:02"",
            ""value"": 20.96
        },
        {
            ""date"": ""2025-03-25 15:15:07"",
            ""value"": 21.02
        },
        {
            ""date"": ""2025-03-27 14:10:03"",
            ""value"": 22.36
        },
        {
            ""date"": ""2025-03-27 14:12:19"",
            ""value"": 22.28
        },
        {
            ""date"": ""2025-03-27 14:15:03"",
            ""value"": 22.3
        },
        {
            ""date"": ""2025-03-27 14:21:15"",
            ""value"": 22.12
        },
        {
            ""date"": ""2025-03-27 14:22:54"",
            ""value"": 22.1
        },
        {
            ""date"": ""2025-03-27 14:25:03"",
            ""value"": 22.12
        },
        {
            ""date"": ""2025-03-27 14:30:03"",
            ""value"": 22.0
        },
        {
            ""date"": ""2025-03-28 15:33:06"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-03-28 15:35:03"",
            ""value"": 21.46
        },
        {
            ""date"": ""2025-03-28 12:34:00"",
            ""value"": 21.47
        },
        {
            ""date"": ""2025-04-04 10:30:02"",
            ""value"": 13.99
        },
        {
            ""date"": ""2025-04-04 07:43:00"",
            ""value"": 14.47
        },
        {
            ""date"": ""2025-04-04 11:20:02"",
            ""value"": 15.85
        },
        {
            ""date"": ""2025-04-04 18:40:03"",
            ""value"": 20.22
        },
        {
            ""date"": ""2025-04-04 18:55:02"",
            ""value"": 20.41
        },
        {
            ""date"": ""2025-04-04 19:20:02"",
            ""value"": 19.72
        },
        {
            ""date"": ""2025-04-04 19:25:03"",
            ""value"": 19.57
        },
        {
            ""date"": ""2025-04-04 19:30:03"",
            ""value"": 19.43
        },
        {
            ""date"": ""2025-04-04 16:40:00"",
            ""value"": 19.11
        },
        {
            ""date"": ""2025-04-04 16:50:00"",
            ""value"": 18.81
        },
        {
            ""date"": ""2025-04-04 17:41:00"",
            ""value"": 19.66
        },
        {
            ""date"": ""2025-04-04 18:11:00"",
            ""value"": 20.11
        },
        {
            ""date"": ""2025-04-04 18:20:00"",
            ""value"": 20.24
        },
        {
            ""date"": ""2025-04-04 19:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-04-04 20:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-04 21:00:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-04-04 22:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-04 23:00:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-04-05 00:00:00"",
            ""value"": 20.82
        },
        {
            ""date"": ""2025-04-05 01:00:00"",
            ""value"": 20.81
        },
        {
            ""date"": ""2025-04-05 02:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 03:00:00"",
            ""value"": 20.77
        },
        {
            ""date"": ""2025-04-05 04:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-05 05:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-04-05 06:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-05 08:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-05 09:00:00"",
            ""value"": 20.75
        },
        {
            ""date"": ""2025-04-05 10:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-04-05 11:00:00"",
            ""value"": 20.85
        },
        {
            ""date"": ""2025-04-05 12:00:00"",
            ""value"": 20.86
        },
        {
            ""date"": ""2025-04-05 13:00:00"",
            ""value"": 20.88
        },
        {
            ""date"": ""2025-04-05 14:00:00"",
            ""value"": 20.83
        },
        {
            ""date"": ""2025-04-05 15:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-05 16:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-05 17:00:00"",
            ""value"": 20.67
        },
        {
            ""date"": ""2025-04-05 18:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-05 19:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-05 20:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-04-05 21:00:00"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-04-05 22:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-05 23:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-06 00:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-06 01:00:00"",
            ""value"": 20.39
        },
        {
            ""date"": ""2025-04-06 02:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-04-06 03:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-04-06 04:00:00"",
            ""value"": 20.3
        },
        {
            ""date"": ""2025-04-06 05:00:00"",
            ""value"": 20.29
        },
        {
            ""date"": ""2025-04-06 06:00:00"",
            ""value"": 20.32
        },
        {
            ""date"": ""2025-04-06 07:00:00"",
            ""value"": 20.35
        },
        {
            ""date"": ""2025-04-06 08:00:00"",
            ""value"": 20.4
        },
        {
            ""date"": ""2025-04-06 09:00:00"",
            ""value"": 20.57
        },
        {
            ""date"": ""2025-04-06 10:00:00"",
            ""value"": 20.7
        },
        {
            ""date"": ""2025-04-06 11:00:00"",
            ""value"": 20.74
        },
        {
            ""date"": ""2025-04-06 12:00:00"",
            ""value"": 20.78
        },
        {
            ""date"": ""2025-04-06 13:00:00"",
            ""value"": 20.8
        },
        {
            ""date"": ""2025-04-06 14:00:00"",
            ""value"": 20.79
        },
        {
            ""date"": ""2025-04-06 15:00:00"",
            ""value"": 20.76
        },
        {
            ""date"": ""2025-04-06 16:00:00"",
            ""value"": 20.72
        },
        {
            ""date"": ""2025-04-06 17:00:00"",
            ""value"": 20.68
        },
        {
            ""date"": ""2025-04-06 18:00:00"",
            ""value"": 20.64
        },
        {
            ""date"": ""2025-04-06 19:00:00"",
            ""value"": 20.61
        },
        {
            ""date"": ""2025-04-06 20:00:00"",
            ""value"": 20.58
        },
        {
            ""date"": ""2025-04-06 21:00:00"",
            ""value"": 20.56
        },
        {
            ""date"": ""2025-04-06 22:00:00"",
            ""value"": 20.53
        },
        {
            ""date"": ""2025-04-06 23:00:00"",
            ""value"": 20.5
        },
        {
            ""date"": ""2025-04-07 00:00:00"",
            ""value"": 20.49
        },
        {
            ""date"": ""2025-04-07 01:00:00"",
            ""value"": 20.47
        },
        {
            ""date"": ""2025-04-07 02:00:00"",
            ""value"": 20.44
        },
        {
            ""date"": ""2025-04-07 03:00:00"",
            ""value"": 20.42
        },
        {
            ""date"": ""2025-04-07 04:00:00"",
            ""value"": 20.38
        },
        {
            ""date"": ""2025-04-07 05:00:00"",
            ""value"": 20.36
        },
        {
            ""date"": ""2025-04-07 06:00:00"",
            ""value"": 20.33
        },
        {
            ""date"": ""2025-04-07 07:00:00"",
            ""value"": 20.28
        },
        {
            ""date"": ""2025-04-07 08:00:00"",
            ""value"": 17.78
        },
        {
            ""date"": ""2025-04-07 09:00:00"",
            ""value"": 14.9
        },
        {
            ""date"": ""2025-04-07 12:23:10"",
            ""value"": 16.04
        },
        {
            ""date"": ""2025-04-07 12:25:02"",
            ""value"": 16.04
        },
        {
            ""date"": ""2025-04-07 09:28:00"",
            ""value"": 16.29
        },
        {
            ""date"": ""2025-04-07 09:38:00"",
            ""value"": 16.77
        },
        {
            ""date"": ""2025-04-07 13:25:02"",
            ""value"": 19.36
        },
        {
            ""date"": ""2025-04-07 13:30:03"",
            ""value"": 19.73
        }
    ]
}"
vp9YMsTj,gra.py,black_duck11,Python,Wednesday 28th of May 2025 09:53:02 AM CDT,"import pygame
from Kierunek import Kierunek
from Waz import Waz
from jablko import Jablko
pygame.init()#inicjalizacja modułu

SZEROKOSC=800
WYSOKOSC=608
#tworzenie ekranu o określonych wymiarach
ekran=pygame.display.set_mode((SZEROKOSC,WYSOKOSC))
tlo=pygame.Surface((SZEROKOSC,WYSOKOSC))
waz=Waz()
jablko=Jablko()
jablka=pygame.sprite.Group()
jablka.add(jablko)
PORUSZ_WEZEM=pygame.USEREVENT+1
pygame.time.set_timer(PORUSZ_WEZEM,200)

#nadanie oknu nazwy
pygame.display.set_caption('Pierwsza gra')

clock=pygame.time.Clock()
for i in range(25):
    for j in range(19):
        obraz=pygame.image.load('images/background.png')
        tlo.blit(obraz,(i*32,j*32))

def load_image(sciezka_do_pliku, pozycja):
    #surface-powierzchnia dla grafiki
    image=pygame.image.load(sciezka_do_pliku)
    surface=image.convert()
    #pozycja wyświetlania obiektu jest zapisana w rect
    rect=surface.get_rect(center=pozycja)
    return [surface,rect]





status_gry=True
while status_gry:
    #pobieranie wszystkich zarejestrowanych zdarzeń
    zdarzenia=pygame.event.get()
    for zdarzenie in zdarzenia:
        #sprawdzenie czy kliknięto na X
        if zdarzenie.type==pygame.QUIT:
            status_gry=False
        elif zdarzenie.type==pygame.KEYDOWN:
            if zdarzenie.key==pygame.K_ESCAPE:
                status_gry=False
            if zdarzenie.key == pygame.K_w:
                waz.zmien_kierunek(Kierunek.GORA)
            if zdarzenie.key == pygame.K_s:
                waz.zmien_kierunek(Kierunek.DOL)
            if zdarzenie.key == pygame.K_a:
                waz.zmien_kierunek(Kierunek.LEWO)
            if zdarzenie.key == pygame.K_d:
                waz.zmien_kierunek(Kierunek.PRAWO)
        elif zdarzenie.type==PORUSZ_WEZEM:
            waz.aktualizuj()
  
    ekran.blit(tlo, (0, 0))
    for jablko in jablka:
        ekran.blit(jablko.obraz,jablko.rect)
    ekran.blit(waz.obraz,waz.rect)
    #odświeżenie okna
    pygame.display.update()
    

    clock.tick(60)



    
        
"
DRXGa09b,Packet Lag Switch,peachyontop,Python,Wednesday 28th of May 2025 09:52:47 AM CDT,"import pydivert
import time

DELAY_MS = 200
DELAY_SECONDS = DELAY_MS / 1000
LIMIT = 20
FILTER = ""outbound and udp and udp.DstPort == 27015""

queue = []

with pydivert.WinDivert(FILTER) as w:
    print(f""[*] Fake lag active ({DELAY_SECONDS:.3f} sec) with packet limit {LIMIT}..."")

    while True:
        try:
            packet = w.recv()
            send_time = time.time() + DELAY_SECONDS
            queue.append((send_time, packet))
        except Exception as e:
            print(f""Recv error: {e}"")

        now = time.time()
        ready_packets = [p for p in queue if p[0] <= now]
        queue = [p for p in queue if p[0] > now]

        for _, pkt in ready_packets:
            try:
                w.send(pkt)
            except Exception as e:
                print(f""Send error: {e}"")

        if len(queue) >= LIMIT:
            _, pkt = queue.pop()
            try:
                w.send(pkt)
            except Exception as e:
                print(f""Send error: {e}"")

        time.sleep(0.001)"
VLz85xBg,Peachy WebHook Auth,peachyontop,Julia,Wednesday 28th of May 2025 09:49:41 AM CDT,"[ Peachy webhook ] Started with params: ' + value);     var result = {             'tags': {                 'endpoint': 'peachy'             }         },         params = JSON.parse(value),         req = new HttpRequest(),         fields = {},         resp;     if (params.HTTPProxy) {         req.setProxy(params.HTTPProxy);

"
sAx7kA3T,C++ Web Scraper [ More Efficient ],peachyontop,C++,Wednesday 28th of May 2025 09:44:58 AM CDT,"#include <iostream>
#include <string>
#include <curl/curl.h>
#include <gumbo.h>

// Callback function for libcurl
size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* output) {
    size_t totalSize = size * nmemb;
    output->append((char*)contents, totalSize);
    return totalSize;
}

// Function to fetch webpage content
std::string fetchHTML(const std::string& url) {
    CURL* curl = curl_easy_init();
    std::string htmlContent;

    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &htmlContent);
        curl_easy_perform(curl);
        curl_easy_cleanup(curl);
    }

    return htmlContent;
}

// Function to parse HTML and extract `<title>` tag
void extractTitle(const std::string& html) {
    GumboOutput* output = gumbo_parse(html.c_str());
    GumboNode* root = output->root;

    if (root->type == GUMBO_NODE_ELEMENT) {
        GumboVector children = root->v.element.children;

        for (size_t i = 0; i < children.length; ++i) {
            GumboNode* child = (GumboNode*)children.data[i];
            if (child->type == GUMBO_NODE_ELEMENT && child->v.element.tag == GUMBO_TAG_TITLE) {
                std::cout << ""Page Title: "" << child->v.element.children.data[0] << std::endl;
                break;
            }
        }
    }

    gumbo_destroy_output(&kGumboDefaultOptions, output);
}

int main() {
    std::string url = ""https://example.com"";
    std::string html = fetchHTML(url);
    
    if (!html.empty()) {
        extractTitle(html);
    } else {
        std::cout << ""Failed to fetch the webpage!"" << std::endl;
    }

    return 0;
}"
5QP7FwBh,Fractal Tree,peachyontop,C#,Wednesday 28th of May 2025 09:44:00 AM CDT,"using System;
using System.Drawing;
using System.Windows.Forms;

public class FractalTreeForm : Form
{
    private Bitmap canvas;

    public FractalTreeForm()
    {
        this.Width = 800;
        this.Height = 600;
        canvas = new Bitmap(this.Width, this.Height);
        this.Paint += new PaintEventHandler(DrawTree);
    }

    private void DrawTree(object sender, PaintEventArgs e)
    {
        using (Graphics g = Graphics.FromImage(canvas))
        {
            g.Clear(Color.White);
            DrawBranch(g, this.Width / 2, this.Height - 50, -90, 100, 10);
        }
        e.Graphics.DrawImage(canvas, 0, 0);
    }

    private void DrawBranch(Graphics g, float x, float y, float angle, float length, int depth)
    {
        if (depth == 0) return;

        float x2 = x + (float)(length * Math.Cos(angle * Math.PI / 180));
        float y2 = y + (float)(length * Math.Sin(angle * Math.PI / 180));

        g.DrawLine(Pens.Black, x, y, x2, y2);

        DrawBranch(g, x2, y2, angle - 30, length * 0.7f, depth - 1);
        DrawBranch(g, x2, y2, angle + 30, length * 0.7f, depth - 1);
    }

    [STAThread]
    static void Main()
    {
        Application.Run(new FractalTreeForm());
    }
}"
mKtJLwvM,Python Web Scrape,peachyontop,Python,Wednesday 28th of May 2025 09:39:30 AM CDT,"import requests
from bs4 import BeautifulSoup

url = ""https://ADDURL""

response = requests.get(url)

if response.status_code == 200:
    # Parse the HTML content
    soup = BeautifulSoup(response.text, ""html.parser"")

    paragraphs = soup.find_all(""p"")
    for p in paragraphs:
        print(p.text)
else:
    print(f""Failed to retrieve the webpage. Status code: {response.status_code}"")


[Required]
pip install beautifulsoup4 requests"
4tX7wjVp,INSTALL CARBONIO ON UBUNTU22,Templario_7777,Bash,Wednesday 28th of May 2025 09:30:06 AM CDT,"INSTALACIÓN DE CARBONIO/ZIMBRA UBUNTU 22.04

"
vL7fVxCD,Untitled,kirzecy670,MySQL,Wednesday 28th of May 2025 09:03:16 AM CDT,"CASE
    WHEN dateDiff('day', full_reg_datetime, date_of_action) = 0 THEN 'A. 0 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) = 1 THEN 'B. 1 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 7 THEN 'C. 2-7 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 30 THEN 'D. 8-30 Day'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 89 THEN 'E. 2-3 month'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 179 THEN 'F. 4-6 month'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 364 THEN 'G. 7-12 month'
    WHEN dateDiff('day', full_reg_datetime, date_of_action) <= 729 THEN 'H. 1-2 years'
    ELSE 'I. > 2 years'
END AS registration_age_group"
P5uirn1i,tunel,DmDepression,Lua,Wednesday 28th of May 2025 08:52:53 AM CDT,"-- tunnel2x1_return.lua

-- Parâmetros
local length       = tonumber(arg[1]) or 256      -- comprimento em blocos
local fuelSlot     = 1                           -- slot com combustível
local minFuel      = 100                         -- nível mínimo de fuel antes de refuel
-- ===============================================

-- Estado de posição/orientação
local x, y, z = 0, 0, 0      -- coordenadas relativas (começando em 0,0,0)
local dir = 0               -- 0 = norte, 1 = leste, 2 = sul, 3 = oeste

local directions = { ""Norte"", ""Leste"", ""Sul"", ""Oeste"" }

-- Refuel se precisar
local function refuelIfNeeded()
  turtle.select(fuelSlot)
  if turtle.getFuelLevel() < minFuel then
    if not turtle.refuel() then
      error(""❌ Sem combustível no slot ""..fuelSlot.."", abortando."")
    else
      print(""🔋 Reabastecido. Fuel agora:"", turtle.getFuelLevel())
    end
  end
end

-- Move para frente com dig e atualiza x/z
local function forwardSafe()
  refuelIfNeeded()
  while not turtle.forward() do
    turtle.dig()
    os.sleep(0.5)
  end
  -- atualiza coords
  if dir == 0 then z = z - 1
  elseif dir == 1 then x = x + 1
  elseif dir == 2 then z = z + 1
  elseif dir == 3 then x = x - 1
  end
end

-- Sobe um bloco e atualiza y
local function upSafe()
  refuelIfNeeded()
  while not turtle.up() do
    turtle.digUp()
    os.sleep(0.5)
  end
  y = y + 1
end

-- Desce um bloco e atualiza y
local function downSafe()
  refuelIfNeeded()
  while not turtle.down() do
    turtle.digDown()
    os.sleep(0.5)
  end
  y = y - 1
end

-- Gira à direita
local function turnRight()
  turtle.turnRight()
  dir = (dir + 1) % 4
end

-- Gira à esquerda
local function turnLeft()
  turtle.turnLeft()
  dir = (dir + 3) % 4
end

-- Executa o túnel 2x1: camada de altura 2, largura 1
local function digTunnel2x1()
  -- bloco de baixo
  turtle.dig()
  forwardSafe()
  -- bloco de cima
  turtle.digUp()
  upSafe()
  downSafe()
end

-- Retorna ao início seguindo os passos inversos
local function returnToStart()
  print(""🔄 Retornando ao ponto inicial..."")
  -- faz um caminho em Z e X
  -- primeiro ajusta Z
  if z ~= 0 then
    -- se precisar ir para norte/sul
    local targetDir = (z < 0) and 0 or 2
    while dir ~= targetDir do turnRight() end
    for i = 1, math.abs(z) do forwardSafe() end
  end
  -- depois X
  if x ~= 0 then
    local targetDir = (x > 0) and 1 or 3
    while dir ~= targetDir do turnRight() end
    for i = 1, math.abs(x) do forwardSafe() end
  end
  -- e por fim ajusta Y
  while y > 0 do downSafe() end
  while y < 0 do upSafe() end

  print(string.format(""🏁 Chegou! Coordenadas: (0,0,0), direção inicial: %s"", directions[1 + tonumber(arg[2] or 0)]))
end

-- --- Início da execução ---
-- O usuário deve SE POSICIONAR onde quer que seja o ponto 0,0,0
-- e VIRAR para a direção que deseja minerar.
local initialDir = dir
print(string.format(""▶ Iniciando túnel 2×1 de %d blocos"", length))
print(string.format(""📍 Ponto inicial registrado em (0,0,0), direção: %s"", directions[1 + dir]))

-- Faz o túnel
for i = 1, length do
  digTunnel2x1()
end

-- Retorna
returnToStart()
"
X2GaJvPZ,2025-05-28T15:28:42.656844,powerampache,PHP,Wednesday 28th of May 2025 08:28:43 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to localhost/127.0.0.1:80"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

authorize() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Failed to connect to localhost/127.0.0.1:80\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Failed to connect to localhost/127.0.0.1:80\"" }"",""stackTrace"":[]}"
AZT2T3aj,vector_todo.cpp,DrAungWinHtut,C++,Wednesday 28th of May 2025 08:27:48 AM CDT,"
#include <iostream>
#include <fstream>
#include <string>
#include<stdlib.h>
#include<vector>

std::vector<std::string> notes; // Vector to store notes
int noteCount = 0;

// Add new note
void addNote() {
    std::string note;
    std::cout << ""Enter new note: "";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    getline(std::cin, note);
	if (note.empty()) {
		std::cout << ""Note cannot be empty.\n"";
		return;
	}	
    notes.push_back(note); // Store the note in the vector
    noteCount++;
    std::cout << ""Note added.\n"";
}


// Review all notes
void reviewNotes() {
    if (noteCount == 0) {
        std::cout << ""No notes to show.\n"";
        return;
    }
    for (int i = 0; i < notes.size(); i++) {
        std::cout << i + 1 << "". "" << notes[i] << ""\n"";
    }
}


// Edit a note
void editNote() {
    reviewNotes();
    std::cout << ""Enter note number to edit: "";
    int index;
    std::cin >> index;
    if (index < 1 || index > noteCount) {
        std::cout << ""Invalid note number.\n"";
        return;
    }
    std::cout << ""Enter new content: "";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    getline(std::cin, notes[index - 1]);
    std::cout << ""Note updated.\n"";
}


// Delete a note
void deleteNote() {
    if (noteCount == 0) {
        std::cout << ""No notes to delete.\n"";
        return;
    }
    reviewNotes();
    std::cout << ""Enter note number to delete: "";

    int index;
    std::cin >> index;

    if ( index < 1 || index > noteCount) {
		std::cout << ""Invalid note number.\n"";
        return;
    }
	notes.erase(notes.begin() + index - 1); // Remove the note from the vector
    noteCount = noteCount - 1;
    std::cout << ""Note deleted.\n"";

}



// Main menu
int main() {
    int choice;
    do {
		system(""cls""); // Clear the console
		std::cout << ""--- NOTE TAKING APP ---\n"";
        std::cout << ""1. New Note\n"";
        std::cout << ""2. Review Notes\n"";
        std::cout << ""3. Edit Note\n"";
        std::cout << ""4. Delete Note\n"";
        std::cout << ""0. Exit\n"";
        std::cout << ""Choose an option: "";
        std::cin >> choice;

        system(""cls""); // Clear the console
        switch (choice) {
        case 1: addNote(); break;
        case 2: reviewNotes(); break;
        case 3: editNote(); break;
        case 4: deleteNote(); break;
        case 0: std::cout << ""Goodbye!\n""; break;
        default: std::cout << ""Invalid choice.\n""; break;
        }
		system(""pause""); // Pause the console to see the output
    } while (choice != 0);
    return 0;
}"
mJGg95Us,Marquee-JS,dugalcedo,JavaScript,Wednesday 28th of May 2025 07:34:23 AM CDT,"
function createInfiniteImageMarquee(selector, options = {}) {
    // Find parent element
    const parentElement = document.querySelector(selector)

    // default options
    const {
        height = ""200px"",
        gap = 0,
        speed = 2000
    } = options

    // parent styles
    parentElement.style.maxWidth = '100%'
    parentElement.style.overflowX = 'hidden'
    parentElement.style.minHeight = height
    parentElement.style.position = 'relative'

    // get image elements and urls
    const images = [...parentElement.querySelectorAll(':scope > img')]
    const urls = images.map(img => img.src)

    const length = images.length
    const imgWidth = 100/(length-1)

    // delete contents
    parentElement.innerHTML = """"

    const createImg = (i, start = i) => {
        // Define element and attributes
        const img = document.createElement('img')
        img.classList.add('marquee-img')
        const url = urls[i]
        img.src = url

        // Styles
        img.style.height = height
        img.style.width = imgWidth + ""%""
        img.style.objectFit = ""cover""
        img.style.position = 'absolute'
        img.style.top = '0px'
        const leftMargin = gap * start
        img.style.left = `calc(${(imgWidth*start) + '%'} + ${leftMargin}px)`
        const transition = speed * (start+1)
        img.style.transition = transition + 'ms linear'
    
        // append to parent
        parentElement.append(img)

        // move
        requestAnimationFrame(() => {
            // Simply accessing this property forces the browser to re-register the image's position?
            // I'm not sure why
            img.offsetWidth

            img.style.left = (-imgWidth) + '%'
            setTimeout(() => {
                createImg(i, length-1)
                img.remove()
            }, transition);
        })
    }

    // start
    for (let i = 0; i < length; i++) {
        createImg(i)
    }
}


// TEST
createInfiniteImageMarquee('.image-marquee', {
    height: '300px',
    gap: 20
})"
7y2f0W0Y,Marquee-HTML,dugalcedo,HTML,Wednesday 28th of May 2025 07:33:20 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <script src=""./script.js"" defer></script>
    <style>
        .marquee-img {
            border-radius: 15px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
        }
    </style>
</head>
<body>
    <div class=""image-marquee"">
        <img src=""https://picsum.photos/seed/i0/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i1/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i2/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i3/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i4/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i5/500/500"" alt=""random image"">
        <img src=""https://picsum.photos/seed/i6/500/500"" alt=""random image"">
    </div>
</body>
</html>"
SxJWFUhd,dataNone,TestGuy1,JSON,Wednesday 28th of May 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a4c53c265baac866754d72c125fd9f3826fc48aba8dda01f98e37cabf3434024f8d5d7696190f7c8454645d20639eb3fc498fae719547701e72217d3a6138e8d98702a71c87d3144cd0471086fd73593f1820869a24bd7a850c8fd0e2f2c4b8ea96272d3dbb934c96bfb5d9427e78e1bf9d6b419d78ae41abb79d19d222a26cd',
  otherdata: [
    '1d910cd517546cba9209d95d23640e44',
    '0a8663c51450ab41611beb69f60c3a0f',
    'ff036f3d39d2026ebd7997a207117385',
    'a6cd32ee8b081c4a5b02116c16e147cc',
    '21d781c71e80238fa3680b359d3e14fe',
    'b84fb525158a86032787b6a9f53de99b',
    '03b89c2128bed6f04f1f380e8d9754fc',
    '343bb65572668e10a1dfb27daaa422a5'
  ]
}"
KKD2Y3eG,Untitled,eqeqwan21,JavaScript,Wednesday 28th of May 2025 05:25:19 AM CDT,"//v13_14 альтернатиная мнемосхема_маскировка команд
//v11++фото заголовки со ссылками																			  
""use strict"";
let hulla = new hullabaloo();
let box = null;
let circuit = null;
let stlog = null;
let dayly = null;
let lastip = null;
let lastmeter = null;
//Антон: отображение команд с учетом маски
let deviceObj = null;

let dt = null, mdt = null;
let liveMode = true;
let renewTimer = null;
let dtdt = null;
let commands = null;
var gallery_ro = true;

let get = parseQuery(window.location.search);
moment.locale(environment.language || window.navigator.userLanguage || window.navigator.language);


$(async function () {
  $(""#btnLive"").prop(""disabled"", true);
  let result;
  let userTown;
  if (environment.login_name.indexOf(""_"") !== -1) {
    userTown = '&town=' + environment.login_name.split('_')[0].toLowerCase()
  } else {
    userTown = ''
  }
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + get['id'] + userTown,
      type: 'GET',
      dataType: ""json""
    });
//Антон: отображение команд с учетом маски
    deviceObj = result;
  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Device was not loaded</h2>"");
    return;
  }


  if (result.rows.length > 0)
    box = result.rows.slice(0)[0];
  else {
    $(""#content"").html(""<h2>Device not found</h2>"");
    return;
  }

  if (box.DimProfile_id !== null) {
    try {
      dayly = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=dimdetail&now&id=' + box.DimProfile_id,
        type: 'GET',
        dataType: ""json""
      });
    } catch (error) {
      console.error(error);
    }
  }

  if (box.Type == 2)
    $(""#strongState"").text(i18next.t(""Brightness""));

  drawBoxInfo();
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=circuit&id=' + get['id'],
      type: 'GET',
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Pattern was not loaded</h2>"");
    return;
  }

  if (result.rows.length > 0)
    circuit = result.rows[0];
  else
    console.log(""Pattern not found"");

  let svg = """";
  if (circuit !== null) {
    let qs = circuit.qs;
    if (environment.language !== ""en"") {
      qs = qs.replace(/S/gi, ""K"");
    }

    try {
      svg = await $.ajax({
        url: environment.base_url + `/images/galbox.svg?v=${config.version}&noxml&cnf=` + qs,
        type: 'GET',
        processData: false
      });
      $(""#circuit"").html(`${svg}`);
      if (box.Name?.startsWith(""TL"")) await attachBackground();
    } catch (error) {
      console.error(error);
    }
  }

  stdatatable();
  meterdatatable();

  setTimeout(renew, 1);
  setTimeout(iprenew, 10);

  $(""#circuit svg"").addClass(""col-12"");
  $(""#circuit svg"").addClass(""p-0"");
  //Ссылки в зоголовках ""статистика"" и ""журнал состояния"" в форме Объект
  $(""#statlink"").attr(""href"", `${environment.base_url}/inlog?device=${get['id']}`);
  $(""#stlink"").attr(""href"", `${environment.base_url}/stlog?device=${get['id']}`);
  if (box.Smart) {
    try {
      result = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=ServerCommand&type=1,3&DeviceType=' + box.Type,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    commands = result.rows;
    $(""#cmd"").find('option').remove();

    for (let key in commands) {
      if (commands[key].Letter == ""F"")
        continue;
      $(""#cmd"").append($(""<option></option>"")
          .attr(""value"", commands[key].id)
          .text(i18next.t(commands[key].Name)));
    }
  } else {
    $(""#manualDiv"").hide();
  }
//добавление картинки светильника из галлереи с проверкой её наличия, иначе - по умолчанию
  if (box.Type !== 1) {
    $.ajax({
      url: `${environment.base_url}/?do=api&fn=picture_list&Devices_id=${get['id']}&order=ASC&limit=1`,
      type: 'GET',
      dataType: ""json"",
      success: function (result) {
        if (result['list'].length > 0) {
          $(""#circuit"").html('<img class=""img-fluid"" src=""' + result['list'][0].src + '"">');
        } else {
          $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`)
        }
      }
    });
    // $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`);
  }

  $("".picture"").click(() => {
    galleryOpen(get['id'])
  });
  /*
  let pl = await getPictureList(get['id'], 'desc', 100);
  if(pl.length == 0) {
    $("".picture"").click( ()=>{galleryOpen(get['id'])});
  } else {
    let html="""";
    let i=0;
    pl.forEach(el => {
      let title = """";
      let opt = {month: ""long"", day:""numeric"", year:""numeric""};
      let separ="", "";
      let opt2= {hour:""numeric"", minute:""numeric""};
      let disp="""";

      if(el.Exiftime!==null) {
        let dda = el.Exiftime.split("" "");
        if(dda.length==2) {
          let dds = dda[0].replaceAll("":"",""-"") + "" "" + dda[1]+""Z"";
          let dd = new Date(dds);

          if(!(dd===NaN) && !dd!=""Invalid Date"") {
            disp = ""<i class='fa fa-camera'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
            dd.toLocaleTimeString(environment.language, opt2);
          }
        }
      }

      let dd = new Date(el.Loaded+""Z"");
      if(!(dd===NaN) && !dd!=""Invalid Date"") {
        if(disp!="""")
          disp+=""<br>"";
        disp += ""<i class='fa fa-upload'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
        dd.toLocaleTimeString(environment.language, opt2);
      }

      title = `data-container=""body"" data-html=""true"" data-placement=""top"" data-toggle=""tooltip"" title=""${disp}""`;

      html += `<div ${title}><img onclick=""galleryOpen(${get['id']}, ${i})"" class=""border border-primary rounded imgpic"" width=""60px"" height=""60px"" src=""${el.src}&thumb""></div>`;
      i++;
    });
    $(""#pg"").html(html);
    $('[data-toggle=""tooltip""]').tooltip({
      boundary:""viewport"",
      html: true
    });
  }
  */

});

async function runCmd() {
  $(""#btnCmd"").prop(""disabled"", true);
  setTimeout(() => $(""#btnCmd"").prop(""disabled"", false), 1500);
  let srvcmd = {};

  srvcmd.cmd = parseInt($(""#cmd"").val());
  let selcmd = commands.find(x => x.id == srvcmd.cmd);
  let cmdtext = i18next.t(selcmd.Name);

  srvcmd.devs = [box.id];

  let result = null;
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=makecalls',
      data: JSON.stringify(srvcmd),
      type: 'PUT',
      contentType: ""application/json; charset=utf-8"",
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    hulla.send(i18next.t(""Device control error""));
    return false;
  }

  if (result.success) {
    switch (result.queued) {
      case 0:
        hulla.send(i18next.t(""Command not queued""));
        break;
      case 1:
        hulla.send(`${i18next.t(""Command"")} ""${cmdtext}"" ${i18next.t(""queued"")}`, ""success"");
        break;
      default:
        hulla.send(`${cmdtext} - ${i18next.t(""Command queued for multiple devices"")} (${result.queued})`, ""success"");
        break;
    }
  } else {
    hulla.send(i18next.t(""An error occurred while adding commands to the queue""));
    console.log(result);
  }

  return false;
}

let pbox = null, plines = null;

async function drawBoxInfo() {
  $(""#Phone"").html(number10html(box.Phone));
//Добавление строки ""Серийный номер""	
  for (let fld of [""CustomNum"", ""Name"", ""sn"", ""DimProfile_Name"", ""Station"", ""ControlTime""]) {
    let val = box[fld];
    if (val !== null) {
      if (fld == ""ControlTime"")
        $(""#"" + fld).text(val.substr(0, 5));
      else
        $(""#"" + fld).text(val);
    }
  }
  if (box.Station == null && box.Lines_id) {
    //let pbox =null, plines = null;
    try {
      pbox = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    try {
      plines = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=lines&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }

    if (pbox && plines) {
      let ln = plines.rows.find(x => x.id == box.Lines_id)
      let txt = ln.Num.toString().padStart(2, ""0"") + "". "" + i18next.t(appdata.LinesType.find(x => x.id == ln.Type).Name);

      if (ln.Switch > 0)
        txt += "" "" + i18next.t(appdata.Switches.find(x => x.id == ln.Switch).Name);
      if (ln.Phase > 0)
        txt += "", "" + i18next.t(""Phase"") + "" "" + appdata.Phases.find(x => x.id == ln.Phase).Name;

      $(""#Station"").html(`<a target=""obj${box.Box_id}"" href=""${environment.base_url}/obj?id=${box.Box_id}"" id=""aStation""></a>, ${txt}`);
      $(""#aStation"").text(`${i18next.t(""Box"")} № ${pbox.rows[0].CustomNum}`);
    }
  }
  $(""#Mode"").text(i18next.t(appdata.AutoModes.find(x => x.id == box.Mode).Name));
  $(""#Location"").text(makeAddress(box));

  $(""#shiftdiv"").hide();

  daylyTable();
}


function daylyTable() {
  if (dayly == null)
    return;

  let drw = dayly.rows;
  let aShift = null;
  if (box.PardShift)
    aShift = box.PardShift.split("","");

  let str1 = ""<tr>"", str2 = ""<tr>"", str3 = ""<tr>"";
  for (let i = 0; i < config.pard_maxvalue; i++) {
    let time = '', val = '';
    if (!(drw[i] === undefined)) {

      time = drw[i].Time.substr(0, 5);
      if (box.Type == 2) //lamp
        val = """" + drw[i].DimValue + ""%"";
      else
        val = SwitchStateForMask(drw[i].DimValue);//Антон: отображение команд с учетом маски
    }
    if (aShift) {
      let tt = '';
      if (aShift[i]) {
        let tti = parseInt(aShift[i]);
        let sign = """";
        if (tti < 0)
          sign = ""-"";
        if (tti > 0)
          sign = ""+"";
        tti = Math.abs(tti);
        let min = tti % 60;
        let hr = (tti - min) / 60;

        tt = `${sign}${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(hr)}:${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(min)}`;
      }
      str3 += `<td class=""text-center"">${tt}</td>`;
    }


    str1 += `<td class=""text-center"">${time}</td>`;
    str2 += `<td class=""text-center"">${val}</td>`;
  }
  str1 += ""</tr>"";
  str2 += ""</tr>"";
  $(""#dimDetail"").append(str1);

  if (aShift) {
    str3 += ""</tr>"";
    $(""#dimDetail"").append(str3);
  }
  $(""#dimDetail"").append(str2);
}

let loadfail = 0;

async function dataload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=stlog&limit=64&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
      cache: false
    });
  } catch (error) {
    console.log(""Error: "", error);

    if (error.status == 401) //unautorized
      window.location = environment.base_url + ""/"" + ""?do=login&b="" + encodeURIComponent(window.location);

    loadfail++;
    if (stlog === null)
      $(""#content"").html(""<h2>Log was not loaded</h2>"");
    else if (loadfail > 1) {
      hulla.send(i18next.t(`No connection to the server (${error.statusText})`));
      loadfail = 0;
    }
    return ret;
  }
  loadfail = 0;
  if (stlog == null || stlog.timestamp != result.timestamp) {
    stlog = result;
    ret = true;
  }

  return ret;
}


async function ipload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastip&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastip == null || lastip.timestamp != result.timestamp) {
    lastip = result;
    ret = true;
  }

  return ret;
}

async function meterload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastmeter&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastmeter == null || result.timestamp != lastmeter.timestamp) {
    lastmeter = result;
    ret = true;
  }

  return ret;
}


async function renew() {
  // let nextt = 1000;
  // let isnew = await dataload();
  // if (isnew) {
  //   onlogchane();
  //   nextt = 2000;
  // }
  // setTimeout(renew, nextt);
  if (!liveMode) return;
  let nextt = 1000;
  const isnew = await dataload();
  if (isnew) {
    onlogchane();
    nextt = 2000;
  }
  renewTimer = setTimeout(renew, nextt);
}

async function iprenew() {

  let nextt = 1000;
  let isnew = await ipload();

  if (isnew) {
    if (lastip !== null && lastip.rowCount > 0) {
      let li = lastip.rows[0];
      let m = moment(li.unixtime * 1000);
      $(""#iptime"").text(m.format(""L LT""));
      $(""#ipdata"").text(li.Msg);
      $(""#divstat"").show();
    } else
      $(""#divstat"").hide();

    let isnewmeter = await meterload();
    if (isnewmeter) {
      if (lastmeter !== null && lastmeter.rowCount > 0) {
        let lm = lastmeter.rows[0];

        let dd = new Date(lm.Timestamp + ""Z"");
        let disp = dd.toLocaleDateString(environment.language) + "" "" +
            dd.toLocaleTimeString(environment.language, {hour: ""numeric"", minute: ""numeric""});
        $(""#metertime"").text(disp);
        $(""#meterlink"").attr(""href"", `${environment.base_url}/meterlog?device=${get['id']}`);
//Открытие новой вкладки для ""Показания учета""
        //$(""#meterlink"").attr(""target"", `meterlog${get['id']}`);
        mdt.ajax.reload();
        $(""#meterstat"").show();
      } else
        $(""#meterstat"").hide();
    }

    nextt = 5000;
  }
  setTimeout(iprenew, nextt);
}


async function onlogchane() {
  if (dt != null) {
    dt.ajax.reload();
    $('[data-toggle=""tooltip""]').tooltip('dispose');
    $("".tooltip"").remove();
    $('[data-toggle=""tooltip""]').tooltip();
  }
  let result = null;

  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + ""?do=api&fn=states&Devices_id="" + get['id'],
      type: 'GET',
      dataType: ""json""
    });
  } catch (error) {
    console.error(error);
  }

  if (result !== null && result.rows.length > 0) {
    let state = result.rows[0];
    setSvgstate(state);
    setTextstate(state);
  }
}

function setTextstate(state) {
  let m = moment(state.unixtime * 1000);
  $(""#StateTime"").text(m.format(""LT, L""));
  if (box.Type == 2)
    $(""#SwState"").text("""" + state.State + ""%"");
  else
    $(""#SwState"").text(SwitchStateForMask(state.State));//Антон: отображение команд с учетом маски
  let mode = state.Mode == 4 ? ""Manual"" : ""Auto"";
  mode = i18next.t(mode);
  if (state.Mode == 1)
    mode += "", "" + box.DimProfile_Name;
  $(""#CurrentMode"").text(mode);

  let door = i18next.t(""Closed"");
  if (!state.Door)
    door = '<span class=""text-danger"">' + i18next.t(""Open"") + ""</span>"";
  $(""#DoorStatus"").html(door);


  let sync = i18next.t(""Synced"");
  if (state.Ous)
    sync = '<span class=""text-danger"">' + i18next.t(""Out of sync"") + ""</span>"";
  $(""#SyncStatus"").html(sync);

}

function setSvgstate(state) {

  let onoff = SwitchState(state.State);

  const ruge = ""#ecabab"";
  const salat = ""#abecab"";

  const errorColor = state.Trouble == STATE_ERROR_UNKNOWN ? ruge : ""red"";
  const greenColor = state.Trouble == STATE_ERROR_UNKNOWN ? salat : ""green"";

  //const phasecolor = state.Power?""green"":ruge;
  let aphst = [];
  for (let i = 0; i < 3; i++) {
    let plet = String.fromCharCode(""A"".charCodeAt() + i);
    let phst = state.Power & (1 << i);
    aphst[i] = phst;
    let phasecolor = phst ? greenColor : errorColor;
    $(`#phase_${plet}`).css(""stroke"", phasecolor);
//V11
    $(""#Volt"" + i).text(plet);
    if (state.PhaseV) {
      let aVolt = JSON.parse(state.PhaseV);
      if (aVolt[i] !== null && aVolt[i] > 1)
        $(""#Volt"" + i).text(aVolt[i]);
    }
  }
  //$("".phase"").css(""stroke"",phasecolor);


// КОНТАКТОРЫ
  for (let i = 1; i <= 4; i++) {
    let swtrouble = state.Trouble & (1 << (i - 1)); 	//аварийность контактора
    let altsw = state.Trouble & (1 << (i + 27)); 		//альтернативное включение контактора
    let on = (onoff[i - 1] !== '0'); 					// значение управления on/off && aphst[0]; 20.07.21 - remove Phase A falsification
    // Команда на включение ON
    if (on) {
      $(`.S${i}_on`).attr(""visibility"", ""visible"");		//видимость состояния on
      $(`.S${i}_off`).attr(""visibility"", ""hidden"");		//скрыть состояние off
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      let swc = ""green"";
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник (голубой)
      $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""зеленый""
      $(`#S${i}_tilda`).css(""stroke"", swc);				//цвет контура синусоиды ""зеленый""
      $(`#S${i}_tilda`).css(""fill"", swc);				//цвет заполнения синусоиды ""зеленый""
      $(`.fuse_S${i}`).css(""fill"", swc);					//предохранители под напряжением ""зеленые""
      //Отсутствие фазы «А»
      if (!aphst[0]) {
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость контактора, как ON
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	//видимость состояния onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        swc = salat;
        $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник ""голубой""
        $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
        if (altsw) {											//если альтернативно-включенный контактор
          $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//не видимость состояния onoff
          $(`.S${i}_offon`).attr(""visibility"", ""visible"");	//видимость состояния offon
          $(`#S${i}_rect2`).css(""fill"", ""red"");				// правый прямоугольник
          $(`.fuse_S${i}`).css(""fill"", ""green"");				//предохранители под напряжением ""зеленые""_07_09
        }
      }
      //аварийность контактора
      if (swtrouble) {
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	// видимость контактора, как onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость включенного контактора
        $(`#S${i}_rect1`).css(""fill"", errorColor);			// левый прямоугольник ""красный""
        $(`#S${i}_rect2`).css(""fill"", salat);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
      }
    }
    // Команда на выключение OFF
    else {
      $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//скрыть состояние ON
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      $(`.S${i}_off`).attr(""visibility"", ""visible"");		//показать состояние OFF
      $(`#S${i}_rect2`).css(""fill"", ""white"");			// правый прямоугольник ""белый""
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник голубой
      $(`#S${i}_tilda`).css(""stroke"", ""green"");			//цвет контура синусоиды
      $(`#S${i}_tilda`).css(""fill"", ""green"");			//цвет заполнения синусоиды
      $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители
      // Отсутствие фазы А
      if (!aphst[0]) {
        $(`#S${i}_tilda`).css(""stroke"", ""white"");	//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }	//белый синус
      // Авария контактора
      if (swtrouble) {
        $(`#S${i}_rect1`).css(""fill"", errorColor);		// левый прямоугольник красный
        $(`#S${i}_tilda`).css(""stroke"", ""white"");		//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }		//белый синус
      // Альтернативное включение
      if (altsw) {										//если есть альтернативно-включенный контактор
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");
        $(`.S${i}_offon`).attr(""visibility"", ""visible"");
        $(`#S${i}_rect2`).css(""fill"", ""red"");			// правый прямоугольник красный
        $(`.fuse_S${i}`).css(""green"");				//предохранители под напряжением ""зеленые""_07_09
      }
    }
  }

//ПРЕДОХРАНИТЕЛИ	
  for (let i = 0; i < 3; i++)
    if (!aphst[i])
      $(`.fuse_P${i}`).css(""fill"", ""none"");

//V10__Отображение значений напряжения на линиях/предохранителях	
  let volt = null;
  try {
    volt = JSON.parse(state.Voltage);
  } catch (e) {

  }
//V11	
  $('[id^=""fuse_""]').find(""title"").remove();
  for (let i = 1; i <= 24; i++) {
    let ftrouble = state.Trouble & (1 << (i + 3));
    $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	//V14 	Не видимость знака стрелок
    if (volt) {
      let fVolt = volt[i - 1];
      if (fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""green"");
        let titlestr = fVolt > 1 ? fVolt + ""V"" : ""⚡"";
        let title = document.createElementNS(""http://www.w3.org/2000/svg"", ""title"");
        title.textContent = titlestr;
//V11				
        $(`#fuse_${i}`).append(title);
      } else
        $(`#fuse_${i}_rect`).css(""fill"", ""white"");

//V14 окраска встречки градиентом ""зеленого"" и символ ""стрелки"" 
      if (ftrouble && fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""visible""); 	// видимость знака стрелок
      }

//V14  окраска пониженного напряжения градиентом2 ""зеленого"" 
      if (fVolt < 180 && fVolt > 30) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient2)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	// не видимость знака стрелок
      }

      if (ftrouble && !fVolt)
        $(`#fuse_${i}_rect`).css(""fill"", errorColor);

    }

    //else {
    //if(ftrouble)
    //$(`#fuse_${ i }_rect`).css(""fill"",errorColor);}

  }
}

function SwitchState(num) {
  if (num === null)
    return ""-"";

  num = Math.min(num, 0b1111);

  return num.toString(2).padStart(""4"", ""0""); //For robot
}

//Антон: отображение команд с учетом маски
function SwitchStateForMask(num) {
  if (num === null)
    return ""-"";
  let maskCommand = box ? box.Mask_Command : ''
  if (!maskCommand) {
    num = Math.min(num, 0b1111);

    return num.toString(2).padStart(""4"", ""0"");
  }
  let len = maskCommand ? maskCommand.length : 4;

  let binStr = num.toString(2).padStart(len, ""0"");

  let result = """";
  for (let i = 0; i < len; i++) {
    if (maskCommand[i] === ""1"") {
      result += binStr[i];
    }
  }
  return result;
}

function meterdatatable() {
  mdt = $('#meterlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      let dt = [];
      if (lastmeter !== null)
        dt = lastmeter.rows;
      callback({data: dt});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""columns"": [
      {
        ""data"": ""Tag"",
        render: function (data, type, row) {
          return i18next.t(""msg_meter_"" + data);
        }
      },
      {
        ""data"": ""Value"", className: 'text-right',
        render: function (data, type, row) {
          let tag = appdata.Meter[row.Tag];
          if (tag.type == ""decimal"") {
            let num = parseFloat(data);
            if (type == ""export"")
              return num;
            return Intl.NumberFormat(environment.language, {minimumFractionDigits: 3}).format(num);
          }
          return data;
        }
      },
    ],
  });

  mdt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });

  mdt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
}

function stdatatable() {

  dt = $('#stlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      if (stlog !== null)
        callback({data: stlog.rows});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""scrollY"": ""27rem"",
    ""scrollCollapse"": true,
    ""deferRender"": true,

    ""columns"": [
      {""data"": ""id"", visible: false},
      {
        ""data"": ""Timestamp"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let m = moment(row.unixtime * 1000);
            let td = moment();
            let fs = ""L LT"";
            if (td.isSame(m, 'd'))
              fs = ""LT"";
            let tz = row.tz.charAt(0) == ""-"" ? """" : ""+"" + row.tz;
            let stime = data + "" "" + tz;
            return `<span data-toggle=""tooltip"" title=""${stime}"">${m.format(fs)}</span>`;
          }
          return data;
        }
      },

      {
        ""data"": ""Mode"",
        render: function (data, type, row) {
          let strm = i18next.t(""Unmanaged"");
          if (row.Smart)
            strm = i18next.t(appdata.AutoModes.find(x => x.id == data).Name);

          return strm;
        }
      },

      {
        ""data"": ""State"",
        ""className"": ""text-center"",  //Антон: центровка отображения команд с учетом маски
        render: function (data, type, row) {
          let str = data + ""%"";
          if (row.Type == 1) {//Box
            str = SwitchStateForMask(data);//Антон: отображение команд с учетом маски
          }
          return str;
        }

      },
      {
        ""data"": ""Sip"",
        ""className"": ""text-center text-nowrap"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let ret = """";
            if (row.Power >= 7 || (row.Power && box.Type == 2))
              ret = `<span class=""fa fa-plug text-success"" data-toggle=""tooltip"" title=""${i18next.t('Power Ok')}""></span>&nbsp;`;
            else {
              let title = i18next.t('Power Fail');
              title += "" ("" + reverseString(row.Power.toString(2).padStart(3, ""0"")) + "")"";

              ret = `<span class=""fa fa-plug text-danger"" data-toggle=""tooltip"" title=""${title}""></span>&nbsp;`;
            }

            if (!row.Trouble)
              ret += `<span class=""fa fa-check-circle text-success"" data-toggle=""tooltip"" title=""${i18next.t('Facility is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-exclamation-triangle text-danger"" data-html=""true"" data-toggle=""tooltip"" title=""${errDecode(row.Trouble, box.Type)}""></span>&nbsp;`;


            if (data)
              ret += `<span class=""fa fa-phone-square text-success"" data-toggle=""tooltip"" title=""${i18next.t('SIP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-phone-square text-danger"" data-toggle=""tooltip"" title=""${i18next.t('SIP fault')}""></span>&nbsp;`;

            if (row.Ip)
              ret += `<span class=""fa fa-wifi text-success"" data-toggle=""tooltip"" title=""${i18next.t('IP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-wifi text-danger"" data-toggle=""tooltip"" title=""${i18next.t('IP fault')}""></span>&nbsp;`;

            if (!row.Timeallert)
              ret += `<span class=""fa fa-clock-o text-success"" data-toggle=""tooltip"" title=""${i18next.t('Clock is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-clock-o text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Clock error')}""></span>&nbsp`;

            if (row.Controller)
              ret += `<span class=""fa fa-microchip text-success"" data-toggle=""tooltip"" title=""${i18next.t('Controller is OK')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-microchip text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Controller error')}""></span>&nbsp`;

            if (row.Door)
              ret += `<span class=""fa fa-lock text-success"" data-toggle=""tooltip"" title=""${i18next.t('Case closed')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-unlock text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Case open')}""></span>&nbsp`;

            if (row.Ous)
              ret += `<span class=""fa fa-refresh text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Out of sync')}""></span>`;
            else
              ret += `<span class=""fa fa-refresh text-success"" data-toggle=""tooltip"" title=""${i18next.t('Synced')}""></span>`;

            return ret;

          }
          return data;
        }
      },


      {
        ""data"": ""DimProfileName"",
        ""className"": ""text-nowrap"",
        render: function (data, type, row) {
          let strd = """";
          let title = """"
          if (row.Smart) {

            if (!(row.IncomingLog_id === null)) {
              title = i18next.t(""Notification"");
              if (!(row.Status_name === null))
                strd = escapeQuote(i18next.t(row.Status_Name)) + "" "";
              if (!(row.RemoteIP === null)) {
                strd = i18next.t(""Statistics"") + "" "";
                title = ""IP: "" + row.RemoteIP;
              }
              strd += ""(&lArr;)"";

              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"">${strd}</span>`;
            }
            if (!(row.OutgoingLog_id === null)) {
              strd = ""&rArr;"";
              strd = escapeQuote(i18next.t(row.Command_Name)) + "" ("" + strd + "")"";
              if (row.IP_Name)
                strd = escapeQuote(i18next.t(row.IP_Name)) + "", "" + strd;
              title = i18next.t(""Command"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"" class=""text-${row.Hangupcause == 17 ? 'success' : 'danger'}"">${strd}</span>`;

            }
            if (!(row.DimProfile_id === null)) {
              strd = data;
              title = i18next.t(""Shedule"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}""}"">${strd}</span>`;
            }
          }
          return strd;
        }
      }

    ]

  });

  dt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();

  });

  dt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
  $('#stlog tbody').on('click', 'tr', function () {

    const rowData = dt.row(this).data();
    if (!rowData) return;
    liveMode = false;
    clearTimeout(renewTimer);
    $(""#btnLive"").prop(""disabled"", false);
    setSvgstate(rowData);
    setTextstate(rowData);

    $(this).addClass('table-primary').siblings().removeClass('table-primary');
  });
  $('#btnLive').on('click', () => {
    if (stlog?.rows?.length) {
      if (liveMode) return;
      liveMode = true;
      $(""#btnLive"").prop(""disabled"", true);
      $('#stlog tbody tr').removeClass('table-primary');

      onlogchane();
      renew();
    }
  });

}

async function attachBackground() {
  const $svg = $(""#circuit"").children(""svg"");
  if (!$svg.length || $(""#schemaWrapper"").length) return;

  let bgSrc = null;
  try {
    const res = await $.ajax({
      url: `${environment.base_url}/?do=api&fn=picture_list` +
          `&Devices_id=${get[""id""]}&order=ASC&limit=1&tag=bg`,
      type: ""GET"",
      dataType: ""json""
    });
    if (res.list?.length) bgSrc = res.list[0].src;
  } catch (e) {
    console.error(""BG fetch error:"", e);
  }

  if (!bgSrc) bgSrc = `${environment.base_url}/images/tl_default_bg.png`;

  $svg.wrap(
      '<div id=""schemaWrapper"" ' +
      '     style=""position:relative; display: flex;\n' +
      '    align-items: flex-end;\n' +
      '    justify-content: center;\n' +
      '    padding-bottom: 75px;margin-top: 5px;"">' +
      ""</div>""
  );
  $(""#schemaWrapper"").prepend(
      `<img id=""schemaBg"" ` +
      `     src=""${bgSrc}"" ` +
      `     style=""position:absolute;top:-10px; bottom: 0;left:-3px;width:100%;` +
      `            height:100%; object-fit: contain;object-position: left;z-index:1;pointer-events:none;"" />`
  );
  $svg.css({position: ""relative"", zIndex: 2, maxWidth: '60%', marginRight: '30%', marginBottom: '-70px'});
}"
rAvhYJMr,Untitled,eqeqwan21,HTML,Wednesday 28th of May 2025 05:23:25 AM CDT,"{% extends 'apppage.html' %}

{% block scripts %}
{{ parent() }}
<script src=""{{ base_uri }}/js/datatables.min.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/datatableslocale.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/moment-with-locales.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/photoswipe/photoswipe.min.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/photoswipe/photoswipe-ui-default.min.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/photo.js?v={{ version }}""></script>
<script src=""{{ base_uri }}/js/obj.js?v={{ version }}""></script>

{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href=""{{ base_uri }}/css/datatables.min.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
<link href=""{{ base_uri }}/js/photoswipe/photoswipe.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
<link href=""{{ base_uri }}/js/photoswipe/aster-skin/default-skin.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
<link href=""{{ base_uri }}/css/obj.css?v={{ version }}"" type=""text/css"" rel=""stylesheet"">
{% endblock %}

{% block content %}

<div class=""col-12 p-0"" id=""content"">

    <div class=""row pt-2"">

        <div class=""col-12 col-md-6"">

            <div class=""col-12 d-flex overflow-auto flex-nowrap mb-1"" id=""pg"">
                <button title=""{% trans"" Photo gallery
                "" %}"" data-toggle=""tooltip"" data-boundary=""viewport"" data-container=""body"" data-placement=""auto""
                class=""btn btn-primary btn-sm picture"" type=""submit""><i class=""fa fa-camera"" aria-hidden=""true""></i>
                </button>
            </div>

            <div id=""circuit"" style=""user-select: none;"" class=""col-12 p-0"">
            </div>
            <div class=""col-12 p-0"">
                <button id=""btnLive"" class=""btn btn-sm btn-outline-primary mb-2"">
                    🔄 Live
                </button>
            </div>

            <!добавление заголовка к журналу состояния с открытием полного журнала в новой вкладке>
            <strong><a id=""stlink"" target=""_blank"">{% trans ""State Log"" %}</a> </strong>
            <table id=""stlog"" class=""table table-hover table-sm"" data-order=""[]"">
                <thead>
                <tr>
                    <th></th>
                    <th>{% trans ""Time"" %}</th>
                    <th>{% trans ""Mode"" %}</th>
                    <th>{% trans ""St"" %}</th>
                    <th>{% trans ""Status"" %}</th>
                    <th>{% trans ""Event"" %}</th>
                </tr>
                </thead>
            </table>

        </div>

        <div class=""col-12 col-md-6"">
            <div class=""pl-1"">
                <strong>{% trans ""Serial number"" %}:</strong> <span id=""CustomNum""></span><br>
                <strong>{% trans ""Name"" %}:</strong> <span id=""Name""></span><br>
                <strong>{% trans ""SN"" %}:</strong> <span id=""sn""></span><br>
                <strong>{% trans ""Phone number"" %}:</strong> <span id=""Phone""></span><br>
                <strong>{% trans ""Default mode"" %}:</strong> <span id=""Mode""></span><br>
                <strong>{% trans ""Shedule profile"" %}:</strong> <span id=""DimProfile_Name""></span><br>
                <strong>{% trans ""Notification time"" %}:</strong> <span id=""ControlTime""></span><br>
                <strong>{% trans ""Place"" %}:</strong> <span id=""Location""></span><br>
                <strong>{% trans ""Station"" %}:</strong> <span id=""Station""></span><br>
            </div>

            <div class=""pl-1 mt-2"">
                <strong>{% trans ""State determination time"" %}:</strong> <span id=""StateTime""></span><br>
                <strong id=""strongState"">{% trans ""Switch State"" %}:</strong> <span id=""SwState""></span><br>
                <strong>{% trans ""Current Mode"" %}:</strong> <span id=""CurrentMode""></span><br>
                <strong>{% trans ""Daily schedule"" %}:</strong> <br>
            </div>

            <table id=""dimDetail"" class=""table table-sm table-responsive table-hover"">
                <thead>
                <tr class=""text-center"">
                    {% for i in 1..dim_width %}
                    <th scope=""col"">
                        <div class=""badge badge-light"">{% trans ""Step"" %} {{ i }}</div>
                    </th>
                    {% endfor %}
                </tr>
                </thead>
                <tbody>
            </table>
            <div class=""pl-1 mb-3"" id=""shiftdiv"">
                <strong>{% trans ""Shedule Shift"" %}:</strong> <span id=""shiftstr""></span>
            </div>
            <div class=""pl-1 mb-3"">
                <strong>{% trans ""Door status"" %}:</strong> <span id=""DoorStatus""></span><br>
                <strong>{% trans ""Profile sync"" %}:</strong> <span id=""SyncStatus""></span><br>
            </div>


            <div class=""col-12 pl-1"" id=""manualDiv"">
                <strong>{% trans ""Manual control"" %}:</strong>
                <form class=""form-inline"">
                    <div class=""input-group mb-1 col-12 p-0"">

                        <select id=""cmd"" class=""form-control"" onchange="""">
                        </select>

                        <div class=""input-group-append"">
                            <button id=""btnCmd"" class=""btn btn-primary"" type=""button"" onclick=""runCmd();"">{% trans
                                ""Send"" %}</i></button>
                        </div>

                    </div>
                </form>
            </div>

            <div id=""meterstat"">
                <div class=""col-12 text-center mt-2"">
                    <!открытие новой вкладки для журнала учёта>
                    <strong><a id=""meterlink"" target=""_blank"">{% trans ""Meter readings""%}</a> {% trans ""as of"" %}:
                    </strong><span id=""metertime""></span>
                </div>

                <table id=""meterlog"" class=""table table-hover table-sm"" data-order=""[]"" style=""min-width:100%"">
                    <thead>
                    <tr>
                        <th>{% trans ""Counter parameter"" %}</th>
                        <th>{% trans ""Value"" %}</th>
                    </tr>
                    </thead>
                </table>

            </div>

            <div id=""divstat"" class=""mb-1"">
                <div class=""col-12 text-center mt-2"">
                    <!открытие новой вкладки для журнала сигнализации>
                    <strong><a id=""statlink"" target=""_blank"">{% trans ""Received"" %}:</a> </strong><span
                        id=""iptime""></span>
                </div>
                <div id=""ipdata"" class=""text-monospace col-12 border border-gray rounded text-break"">
                </div>
            </div>

        </div>

    </div>


</div>

<div class=""d-none d-md-block"" id=""descktop-visible""></div>


{% endblock %}"
5t1TSPkZ,Health Bar BO2,xDuranceModz,C++,Wednesday 28th of May 2025 05:12:51 AM CDT,"void Healthbar()
{
drawShader(1000, 100, ((char*)((*(int*)0xE22F1 + 0x2CB)) 2, 20, Red);
}"
iqZ8L9T2,SPRX Printf() Function,xDuranceModz,C++,Wednesday 28th of May 2025 04:57:59 AM CDT,"void printf(int n,...)
{
    void* lol;
    va_list a;
    va_start(a,n);
    lol = va_arg(a,void*);
        uint32_t len;
        system_call_4(403, 0, (uint64_t)lol, 32, (uint64_t) &len); 
    va_end(a);
}
/*use like:
*printf:
*usage: print values to the console
*parameters: 
  *first: number of values to be printed
   *values to be printed(__VA_ARGS__)
*/
printf(3,""ayy lmao"",""( ͡° ͜ʖ ͡°)"",4);"
xJ2dseEm,video-2small-FFMPEG,muc-izhnet,Batch,Wednesday 28th of May 2025 04:40:05 AM CDT,"@echo off
:: Froz 25.05.2025 + ИИ Qwen
:: Заготовка, требует тестирования !!!

:: === Блок: Настройки кодирования ===

:: Масштабирование видео (scale):
::    1280:720 - масштабировать до конкретного разрешения
::    1280:-1   - сохранить пропорции, ширина=1280, высота автоматическая.
::        Также можно и для высоты: -1:720.
::    если указанный здесь совпадёт с исходным, 
::    или если не задано - размер остаётся без изменений
set ""SCALE=1280:720""

:: Поворот видео (Rotation tag).
:: ВАЖНО: Аппаратные кодеки hevc_qsv и hevc_d3d12va НЕ подддерживают поворот - будет ошибка.
:: Кодек hevc_amf может иметь ошибки с поворотом
:: Возможные значения:
::    90 - поворот по часовой стрелке на 90 градусов
::    180 - поворот на 180 градусов
::    270 - поворот против часовой стрелки на 90 градусов
::    если не задано - поворот берётся из файла (rotation tag)
set ""ROTATION=""

:: Аудио-настройки - по умолчанию копирование аудиодорожки
:: Можно использовать ""-c:a libopus -b:a 128k"" для уменьшения размера
set ""AUDIO_ARGS=-c:a copy""

:: CRF (уровень качества).
:: Рекомендуемые значения по убыванию качества и размера файла:
::    Для HEVC:  24-28
::    Для H.264: 20-23
:: Если не задано - выбирает кодек.
set ""CRF=""

:: Кодек и параметры кодирования:
:: HEVC (H.265) кодеки:
::    hevc_nvenc   - NVIDIA GPU (рекомендуемый)
::    hevc_amf     - AMD GPU
::    hevc_qsv     - Intel Quick Sync Video
::    hevc_d3d12va - Windows Direct 12 (DXVA2), аппаратная поддержка
::    libx265      - software кодирование HEVC (очень медленно)
:: H.264 кодеки:
::    h264_nvenc   - NVIDIA GPU (рекомендуемый)
::    h264_amf     - AMD GPU
::    h264_qsv     - Intel Quick Sync Video
::    libx264      - software кодирование H.264 (медленный)
set ""CODEC=hevc_nvenc""

:: Профиль кодирования.
::    для HEVC: main10 - 10 bit, main - 8 bit.
::    для H.264: автоматически выбирается high, независимо от указанного здесь.
:: Если не задано - выбирает кодек.
:: main10 поддерживают: hevc_nvenc, hevc_amf, libx265
:: main10 может не воспроизводиться в старых проигрывателях и устройствах!
set ""PROFILE=main10""

:: Preset для hevc_nvenc (скорость/качество). Возможные значения: p1-p7 (скорость-качество).
:: Если не задано - выбирает кодек (hevc_nvenc обычно p4/p5)
set ""PRESET=""

:: Допустимые значения: .mkv (универсальнее) или .mp4.
:: Для аппаратных кодеков H.264 - лучше выбрать .mp4.
set ""OUTPUT_EXT=.mkv""

:: Приставка к выходному имени файла (можно изменять или оставить пустой)
set ""NAME_APPEND=_sm""

:: === Окончание блока настроек ===





:: === Блок: Проверки ===
:: Проверка архитектуры ОС
:: Если переменная ProgramFiles(x86) не определена - система 32-битная (не поддерживается)
if ""%ProgramFiles(x86)%""=="""" (
    echo Windows 32-bit не поддерживается.
    echo.
    pause
    exit /b
)


:: Проверка наличия входных файлов
if ""%~1"" == """" (
    echo.
    echo Использование: перетяните иил вставьте видеофайлы на этот файл.
    echo.
    pause
    exit /b
)


:: Переход в папку со скриптом, это важно для корректного вызова bin\ffmpeg.exe и bin\ffprobe.exe
pushd ""%~dp0""
:: ВАЖНО - если будет enabledelayedexpansion - она должна быть после PUSHD
:: иначе некорректно обработаются пути с ""!"".
:: ВАЖНО - не используем комментарии с :: внутри if for else - там пишем rem Текст

:: Проверка наличия необходимых утилит
:: ffmpeg - для конвертации видео
:: ffprobe - для извлечения информации о видеофайле
if not exist ""bin\ffmpeg.exe"" (
    echo bin\ffmpeg.exe не найден, выходим.
    exit /b
)
if not exist ""bin\ffprobe.exe"" (
    echo bin\ffprobe.exe не найден, выходим.
    exit /b
)




:: === Начинаем обработку файлов ===
:FILE_LOOP
if ""%~1"" == """" goto :FILE_LOOP_END


::  === Блок: Подготовка ===
:: Подготовка путей
:: Формируем имя выходного файла и путь к логу
:: Проверяем, существует ли уже обработанный файл - если да, пропускаем
:: Жёстко задаём формат видеоконтейнера MKV, как наиболее беспроблемный в сочетаниях видов видео-аудио дорожек
set ""OUTPUT_DIR=%~dp1""
set ""OUTPUT_NAME=%~n1%NAME_APPEND%""
set ""OUTPUT=%OUTPUT_DIR%OUTPUT_NAME%%OUTPUT_EXT%""
set ""OUTPUT=%OUTPUT_DIR%%OUTPUT_NAME%%OUTPUT_EXT%""
set ""LOG_DIR=%OUTPUT_DIR%logs\""
set ""FFMPEG_LOG=%LOG_DIR%%~n1%NAME_APPEND%_log.txt""

:: Проверяем что конечный файл уже может существовать
if exist ""%OUTPUT%"" (
    echo Файл %OUTPUT% уже существует, пропускаем.
    shift
    goto :FILE_LOOP
)

:: Создаём папку для логов, если не существует
if not exist ""%LOG_DIR%"" mkdir ""%LOG_DIR%"" 2>nul
if not exist ""%LOG_DIR%"" (
    echo Не удалось создать папку для логов: %LOG_DIR%. Выходим.
    pause
    exit /b 1
)

:: Теперь можно выводить сообщения и в консоль и в лог
type nul > ""%FFMPEG_LOG%"" 2>nul
call :log ---------------------------------------------------------------------
call :log [LOG START: %DATE% %TIME%]
call :log [FILE] Начата обработка файла ""%~nx1""...

:: Проверяем что исходный файл существует
if not exist ""%~1"" (
    call :log [ERROR] Файл ""%~1"" не найден.
    shift
    goto :FILE_LOOP
)




:: === Блок: COLOR_RANGE и PIX_FMT ===

:: Получаем pix_fmt через ffprobe
set ""PIX_FMT=""
set ""TMP_FILE=%TEMP%\ffprobe_pix_fmt.tmp""
""bin\ffprobe.exe"" -v error -select_streams v:0 -show_entries stream=pix_fmt -of default=nw=1 ""%~1"" > ""%TMP_FILE%"" 2>nul
if exist ""%TMP_FILE%"" (
    set /p PIX_FMT= < ""%TMP_FILE%""
    del ""%TMP_FILE%""
) else (
    set ""PIX_FMT=""
)

:: Определение цветового пространства (color_range)
set ""COLOR_RANGE=""

:: Если pix_fmt = yuvj420p - это full-range JPEG, устанавливаем color_range=jpeg
if ""%PIX_FMT%"" == ""yuvj420p"" (
    set ""COLOR_RANGE=-color_range jpeg""
    call :log [INFO] Найден формат пикселей: %PIX_FMT% - будет использован %COLOR_RANGE%.
    goto :SKIP_COLORRANGE
)
:: Если pix_fmt определён, но не yuvj420p - на случай связки yuv420p + color_range jpeg
:: пытаемся получить color_range из metadata
set ""TMP_FILE=%TEMP%\ffprobe_color_range.tmp""
""bin\ffprobe.exe"" -v error -select_streams v:0 -show_entries stream=color_range -of default=nw=1 ""%~1"" > ""%TMP_FILE%"" 2>nul
if exist ""%TMP_FILE%"" (
    set /p COLOR_RANGE_RAW= < ""%TMP_FILE%""
    del ""%TMP_FILE%""
    if /i ""%COLOR_RANGE_RAW%"" == ""jpeg"" (
        call :log [INFO] В metadata найден цветовой диапазон jpeg - будет учтён при кодировании.
    )
    set ""COLOR_RANGE=-color_range %COLOR_RANGE_RAW%""
)
:: === Отключаем color_range для несовместимых кодеков ===
set ""USE_COLOR_RANGE=%COLOR_RANGE%""
set ""NO_COLOR_RANGE_CODECS=hevc_qsv hevc_d3d12va h264_qsv h264_d3d12va""
echo.%NO_COLOR_RANGE_CODECS% | findstr /i /c:""%CODEC%"" >nul && goto :DISABLE_COLOR_RANGE
:: Если мы здесь - кодек поддерживает color_range
goto :SKIP_COLORRANGE
:DISABLE_COLOR_RANGE
set ""USE_COLOR_RANGE=""
:SKIP_COLORRANGE






:: === Блок: ROTATION ===
:: Определение поворота из метаданных и формирование фильтра transpose
set ""ROTATION_FILTER=""

:: Проверяем, задан ли ROTATION вручную
if defined ROTATION goto :APPLY_ROTATION_MANUAL

:: Если нет - пытаемся получить тег rotate из metadata
set ""TMP_FILE=%TEMP%\ffprobe_rotation.tmp""
""bin\ffprobe.exe"" -v error -show_entries stream_tags=rotate -of default=nw=1 ""%~1"" > ""%TMP_FILE%"" 2>nul

if not exist ""%TMP_FILE%"" goto :NO_ROTATION_TAG
set /p ROTATION_TAG= < ""%TMP_FILE%""
del ""%TMP_FILE%""

if not defined ROTATION_TAG goto :NO_ROTATION_TAG
set ""ROTATION=%ROTATION_TAG%""

:CHECK_ROTATION_SUPPORT
set ""UNSUPPORTED_ROTATION_CODECS=hevc_qsv hevc_d3d12va h264_qsv h264_d3d12va""
echo.%UNSUPPORTED_ROTATION_CODECS% | find /i "" %CODEC% "" >nul && (
    call :log [INFO] Кодек ""%CODEC%"" НЕ поддерживает поворот - значение игнорируется.
    set ""ROTATION=""
    set ""ROTATION_TAG=""
    set ""ROTATION_FILTER=""
    goto :SKIP_ROTATION
)

:: Формируем фильтр поворота
if ""%ROTATION%"" == ""90"" (
    call :log [INFO] В metadata найден поворот на 90 гр. по часовой стрелке - будет учтён кодером.
    set ""ROTATION_FILTER=transpose=1""
    goto :ROTATION_APPLIED
)
if ""%ROTATION%"" == ""180"" (
    call :log [INFO] В metadata найден поворот на 180 гр. - будет учтён кодером.
    set ""ROTATION_FILTER=transpose=2,transpose=2""
    goto :ROTATION_APPLIED
)
if ""%ROTATION%"" == ""270"" (
    call :log [INFO] В metadata найден поворот на 90 гр. против часовой стрелки - будет учтён кодером.
    set ""ROTATION_FILTER=transpose=2""
    goto :ROTATION_APPLIED
)

:NO_ROTATION_TAG
call :log [INFO] В metadata не найден тег rotate или он пуст.
set ""ROTATION=""

:ROTATION_APPLIED
:SKIP_ROTATION





:: === Блок: SCALE ===
:: Обработка масштабирования видео (scale)
set ""SCALE_EXPR=""
set ""TARGET_W=""
set ""TARGET_H=""
:: Если SCALE не задан пользователем - пропускаем обработку
if not defined SCALE goto :SKIP_SCALE
:: Проверяем SCALE на формат число:число или -1:число
echo.%SCALE% | findstr /r ""^[0-9\-]*:[0-9\-]*$"" >nul || (
    call :log [INFO] Неверный формат SCALE: ""%SCALE%"" - должен быть например 1280:720 или 1280:-1
    goto :SKIP_SCALE
)
:: Разбираем TARGET_W и TARGET_H из SCALE
for /f ""tokens=1,2 delims=:"" %%w in (""%SCALE%"") do (
    set ""TARGET_W=%%w""
    set ""TARGET_H=%%h""
)
:: Проверяем TARGET_W и TARGET_H на числа или -1
echo.%TARGET_W% | findstr /r ""^[0-9\-][0-9]*$"" >nul || (
    call :log [ERROR] TARGET_W некорректен: %TARGET_W%
    goto :SKIP_SCALE
)
echo.%TARGET_H% | findstr /r ""^[0-9\-][0-9]*$"" >nul || (
    call :log [ERROR] TARGET_H некорректен: %TARGET_H%
    goto :SKIP_SCALE
)
:: Если есть поворот на 90 или 270 - меняем местами TARGET_W и TARGET_H
if ""%ROTATION%"" == ""90"" (
    set ""TMP=%TARGET_W%""
    set ""TARGET_W=%TARGET_H%""
    set ""TARGET_H=%TMP%""
    goto :AFTER_ROTATION_SWAP
)
if ""%ROTATION%"" == ""270"" (
    set ""TMP=%TARGET_W%""
    set ""TARGET_W=%TARGET_H%""
    set ""TARGET_H=%TMP%""
    goto :AFTER_ROTATION_SWAP
)
:AFTER_ROTATION_SWAP

:: Пытаемся получить текущее разрешение через ffprobe (до поворота)
:: Используем временный файл, так как здесь вывод ffprobe может содержать:
::     - пробелы (например, ""1920 1080"")
::     - специальные символы (например, escape-символы, двоеточия)
::     - пустые строки или ошибки
:: Примеры, которые сломают цикл for /f:
::     - ""1920 1080"" > при нормализации становится ""19201080"" (неверно)
::     - ""error"" > будет считаться как ширина/высота
:: Поэтому безопаснее читать через set /p < file
set ""CURRENT_DIM=""
set ""TMP_FILE=%TEMP%\video_info.tmp""
""bin\ffprobe.exe"" -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0 ""%~1"" > ""%TMP_FILE%"" 2>nul
if not exist ""%TMP_FILE%"" (
    call :log [ERROR] Не удалось получить информацию о размере видео.
    goto :SKIP_SCALE
)
set /p CURRENT_DIM= < ""%TMP_FILE%""
del ""%TMP_FILE%""
:: Проверяем формат вывода width,height
echo.%CURRENT_DIM% | findstr /r /c:""^[0-9][0-9]*,[0-9][0-9]*$"" >nul || (
    call :log [ERROR] Неверный формат вывода ширины/высоты от ffprobe, пропускаем: ""%CURRENT_DIM%""
    goto :SKIP_SCALE
)
:: Разбираем значения ширины и высоты из файла
for /f ""tokens=1,2 delims=,"" %%a in (""%CURRENT_DIM%"") do (
    set ""CURRENT_W=%%a""
    set ""CURRENT_H=%%b""
)
:: Если целевой размер совпадает с исходным - не масштабируем
if ""%CURRENT_W%"" == ""%TARGET_W%"" if ""%CURRENT_H%"" == ""%TARGET_H%"" (
    call :log [INFO] Размер совпадает с целевым. Масштабирование отключено.
    goto :SKIP_SCALE
)
:: Формируем scale по условию
if ""%TARGET_H%"" == ""-1"" (
    set ""SCALE_EXPR=scale=%TARGET_W%:-2""
    call :log [INFO] Делаем масштабирование по ширине: %SCALE_EXPR%
    goto :SCALE_DONE
)
if ""%TARGET_W%"" == ""-1"" (
    set ""SCALE_EXPR=scale=-2:%TARGET_H%""
    call :log [INFO] Делаем масштабирование по высоте: %SCALE_EXPR%
    goto :SCALE_DONE
)
:: Если указано точное разрешение - используем force_original_aspect_ratio + pad
set ""SCALE_EXPR=scale=%TARGET_W%:%TARGET_H%:force_original_aspect_ratio=decrease,pad=%TARGET_W%:%TARGET_H%:(ow-iw)/2:(oh-ih)/2""
call :log [INFO] Делаем масштабирование с сохранением пропорций: %SCALE_EXPR%
:SCALE_DONE
:SKIP_SCALE





:: === Блок: FPS ===
:: Получение частоты кадров (r_frame_rate) через ffprobe
set ""RAW_FPS=""
set ""FPS=""
set ""TMP_FILE=%TEMP%\ffprobe_fps.tmp""
""bin\ffprobe.exe"" -v error -select_streams v:0 -show_entries stream=r_frame_rate -of default=nw=1 ""%~1"" > ""%TMP_FILE%"" 2>nul
if not exist ""%TMP_FILE%"" (
    call :log [INFO] Не удалось получить r_frame_rate из файла.
    goto :SKIP_FPS
)
set /p RAW_FPS= < ""%TMP_FILE%""
del ""%TMP_FILE%""


:: Проверяем формат вывода FPS на N/A, 0/0, .../0, 0/...
echo.%RAW_FPS% | findstr /r ""^[0-9]\+/[0-9]\+$"" >nul || (
    call :log [INFO] Неверный формат FPS: %RAW_FPS% - значение игнорируется.
    goto :SKIP_FPS
)
for /f ""tokens=1,2 delims=/"" %%a in (""%RAW_FPS%"") do (
    if ""%%a"" == ""0"" (
        call :log [INFO] Числитель FPS равен 0 - значение игнорируется.
        goto :SKIP_FPS
    )
    if ""%%b"" == ""0"" (
        call :log [INFO] Знаменатель FPS равен 0 - значение игнорируется.
        goto :SKIP_FPS
    )
)
:: Если всё верно - применяем
set ""FPS=fps=%RAW_FPS%,""
call :log [INFO] Найден FPS: %RAW_FPS%.
:SKIP_FPS





:: === Блок: Сборка видефильтра (-vf) ===
:: Объединяем rotate, scale, fps
set ""FILTER_LIST=""
if defined ROTATION_FILTER set ""FILTER_LIST=%FILTER_LIST%%ROTATION_FILTER%,""
if defined SCALE_EXPR set ""FILTER_LIST=%FILTER_LIST%%SCALE_EXPR%,""
if defined FPS set ""FILTER_LIST=%FILTER_LIST%%FPS%""
:: Убираем завершающую запятую
:: иначе строка -vf будет некорректна (например: ""scale=1280:720,fps=30,)""
if not ""%FILTER_LIST%"" == """" (
    if ""%FILTER_LIST:~-1%"" == "","" set ""FILTER_LIST=%FILTER_LIST:~0,-1%""
)
if defined FILTER_LIST set ""VF=-vf %FILTER_LIST%""





:: === Блок: Формат пикселей (pix_fmt) ===
set ""PIX_FMT_ARGS=""
:: Эти кодеки поддерживают p010le
if /i ""%CODEC%"" == ""hevc_nvenc"" (
    set ""PIX_FMT_ARGS=-pix_fmt p010le""
    goto :PIX_FMT_DONE
)
if /i ""%CODEC%"" == ""libx265"" (
    set ""PIX_FMT_ARGS=-pix_fmt yuv420p10le""
    goto :PIX_FMT_DONE
)
if /i ""%CODEC%"" == ""libx264"" (
    set ""PIX_FMT_ARGS=-pix_fmt yuv420p""
    goto :PIX_FMT_DONE
)
:: Эти кодеки НЕ поддерживают p010le
if /i ""%CODEC%"" == ""hevc_qsv"" goto :PIX_FMT_DONE
if /i ""%CODEC%"" == ""hevc_d3d12va"" goto :PIX_FMT_DONE
if /i ""%CODEC%"" == ""h264_qsv"" goto :PIX_FMT_DONE
if /i ""%CODEC%"" == ""h264_d3d12va"" goto :PIX_FMT_DONE
:: По умолчанию используем yuv420p для H.264
if /i ""%CODEC:~0,5%"" == ""h264_"" (
    set ""PIX_FMT_ARGS=-pix_fmt yuv420p""
)
:PIX_FMT_DONE




:: === Блок: Профиль кодирования (profile:v) ===
set ""USE_PROFILE=main""
if /i ""%CODEC%"" == ""hevc_qsv"" goto :PROFILE_DONE
if /i ""%CODEC%"" == ""hevc_d3d12va"" goto :PROFILE_DONE
set ""USE_PROFILE=high""
if /i ""%CODEC%"" == ""h264_nvenc"" goto :PROFILE_DONE
if /i ""%CODEC%"" == ""h264_amf"" goto :PROFILE_DONE
if /i ""%CODEC%"" == ""h264_qsv"" goto :PROFILE_DONE
if /i ""%CODEC%"" == ""libx264"" goto :PROFILE_DONE
set ""USE_PROFILE=main10""
if /i ""%PROFILE%"" == ""main"" set ""USE_PROFILE=main""
:PROFILE_DONE




:: === Блок: Формирование команды ffmpeg ===
set ""FINAL_KEYS=-hide_banner -c:v %CODEC% -profile:v %USE_PROFILE% %VF% %PIX_FMT_ARGS% %USE_COLOR_RANGE% %AUDIO_ARGS% -c:s copy""
:: --- CRF и аналоги по кодекам ---
if not defined CRF goto :SKIP_CRF
if /i ""%CODEC%"" == ""libx265"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -crf %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""hevc_nvenc"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -cq %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""hevc_amf"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -quality %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""hevc_qsv"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -global_quality %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""libx264"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -crf %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""h264_nvenc"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -cq %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""h264_amf"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -quality %CRF%""
    goto :SKIP_CRF
)
if /i ""%CODEC%"" == ""h264_qsv"" (
    set ""FINAL_KEYS=%FINAL_KEYS% -global_quality %CRF%""
    goto :SKIP_CRF
)
:SKIP_CRF




: === Блок: Preset и hwaccel ===
:: Для HEVC и H.264
if /i ""%CODEC%"" == ""hevc_nvenc"" if defined PRESET set ""FINAL_KEYS=%FINAL_KEYS% -preset %PRESET%""
if /i ""%CODEC%"" == ""h264_nvenc"" if defined PRESET set ""FINAL_KEYS=%FINAL_KEYS% -preset %PRESET%""
if /i ""%CODEC%"" == ""hevc_amf"" if defined PRESET set ""FINAL_KEYS=%FINAL_KEYS% -quality %PRESET%""
if /i ""%CODEC%"" == ""h264_amf"" if defined PRESET set ""FINAL_KEYS=%FINAL_KEYS% -quality %PRESET%""
if /i ""%CODEC%"" == ""hevc_qsv"" if defined PRESET set ""FINAL_KEYS=%FINAL_KEYS% -preset %PRESET%""
if /i ""%CODEC%"" == ""h264_qsv"" if defined PRESET set ""FINAL_KEYS=%FINAL_KEYS% -preset %PRESET%""
:: HWACCEL для некоторых кодеков
if /i ""%CODEC%"" == ""hevc_d3d12va"" set ""FINAL_KEYS=-hwaccel d3d12va %FINAL_KEYS%""
if /i ""%CODEC%"" == ""hevc_qsv"" set ""FINAL_KEYS=-hwaccel qsv %FINAL_KEYS%""
if /i ""%CODEC%"" == ""h264_d3d12va"" set ""FINAL_KEYS=-hwaccel d3d12va %FINAL_KEYS%""
if /i ""%CODEC%"" == ""h264_qsv"" set ""FINAL_KEYS=-hwaccel qsv %FINAL_KEYS%""
:: Level и Tune (для H.264)
if /i ""%CODEC%"" == ""libx264"" set ""FINAL_KEYS=%FINAL_KEYS% -tune film""
if /i ""%CODEC:~0,5%"" == ""h264_"" set ""FINAL_KEYS=%FINAL_KEYS% -level 4.0""




:: === Блок: Запуск ffmpeg ===
call :log [INFO] Кодек: %CODEC%, Профиль: %USE_PROFILE%, CRF: %CRF%, Preset: %PRESET%
call :log [CMD] %FINAL_KEYS% ""%OUTPUT%""
set ""CMD_LINE=bin\ffmpeg.exe -i ""%~1"" %FINAL_KEYS% ""%OUTPUT%""""
call :log [CMD] %CMD_LINE%
call :log  --------------------------------------------------
""%~dp0%bin\ffmpeg.exe"" -i ""%~1"" %FINAL_KEYS% ""%OUTPUT%"" 2>> ""%FFMPEG_LOG%""
set ""FFMPEG_EXIT_CODE=%errorlevel%""
:: Анализ результата выполнения
if %FFMPEG_EXIT_CODE% equ 0 goto :FFMPEG_SUCCESS
    echo [ERROR] FFmpeg завершился с кодом ошибки %FFMPEG_EXIT_CODE% >> ""%FFMPEG_LOG%""
    goto :FFMPEG_DONE
:FFMPEG_SUCCESS
    echo [SUCCESS] Обработка успешно завершена >> ""%FFMPEG_LOG%""
:FFMPEG_DONE
    echo [LOG END: %DATE% %TIME%] >> ""%FFMPEG_LOG%""
:: Переход к следующему файлу
shift
goto :FILE_LOOP
:: Завершение работы
:FILE_LOOP_END
    echo Информация: Все файлы обработаны. Результаты и ошибки см. в логах.
    popd
    exit /b 0




:: ---------------------
:: Подпрограммы для CALL
:: ---------------------
:: Логирование в консоль и в файл
:log
echo:%~1
if exist ""%FFMPEG_LOG%"" echo:%~1 >> ""%FFMPEG_LOG%""
exit /b"
6qevSvKH,"LIS Memo (Intuitive memo(index, msf))",Fastrail08,C++,Wednesday 28th of May 2025 04:31:30 AM CDT,"#include <bits/stdc++.h>
using namespace std;

//Used for creating hashing key for pair
// struct pair_hash {
//     template <class T1, class T2>
//     size_t operator()(const pair<T1, T2>& p) const {
//         return hash<T1>()(p.first) ^ (hash<T2>()(p.second) << 1);
//     }
// };

// Better Hashing algo than XOR pair hash above 
// Used in CP/online judges to avoid TLE
// Better spread out hash keys, so less chaining
struct pair_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(pair<int, int> p) const {
        uint64_t hash1 = splitmix64(p.first);
        uint64_t hash2 = splitmix64(p.second);
        return hash1 ^ (hash2 << 1);
    }
};


// Recursive Code for LIS
int getLIS2(int level, int msf, string psf, vector<int> &v){
    if(level >= v.size()){
        // as we only created the valid subsequences by checking before a call, we can directly take the maximum length of subsequence generated.
        cout << psf << '\n';
        return 0;
    }
    //only include when v[level] > msf (A condition needed to always have increasing subsequence, we can only include those v[level] which are greater than those which are already in the current subsequence, or greater than maximum so far of the current subsequence)
    int sizeOfSubInc = 0, sizeOfSubExc = 0;
    if(v[level] > msf){
        sizeOfSubInc = 1 + getLIS2(level + 1, v[level], psf + to_string(v[level]) + "" "", v);
    }
    
    //exclude (exclusion does not affect our validity of subsequence; it should always increase, as no new item was included)
    sizeOfSubExc = getLIS2(level + 1, msf, psf, v);
    return max(sizeOfSubExc, sizeOfSubInc);
}

// MEMO CODE using HASH Table
int getLIS2Memo(int level, int msf, vector<int> &v, unordered_map<pair<int, int>, int, pair_hash> &memo){
    if(level >= v.size()){
        // as we only created the valid subsequences by checking before a call, we can directly take the maximum length of subsequence generated.
        return 0;
    }
    //memo check
    if(memo.count(make_pair(level, msf)) > 0){
        return memo[make_pair(level, msf)];
    }
        
    //only include when v[level] > msf (A condition needed to always have increasing subsequence, we can only include those v[level] which are greater than those which are already in the current subsequence, or greater than maximum so far of the current subsequence)
    int sizeOfSubInc = 0, sizeOfSubExc = 0;
    if(v[level] > msf){
        sizeOfSubInc = 1 + getLIS2Memo(level + 1, v[level], v, memo);
    }
    
    //exclude (exclusion does not affect our validity of subsequence; it should always increase, as no new item was included)
    sizeOfSubExc = getLIS2Memo(level + 1, msf, v, memo);
    return memo[make_pair(level, msf)] = max(sizeOfSubExc, sizeOfSubInc);
}


int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> v(n);
    for(int i = 0; i < n; i++){
        cin >> v[i];
    }
    // cout << getLIS2(0, INT_MIN, """", v) << '\n';
    
    //Memo call
    //As our subproblem is uniquely identified with memo(level, msf), we need to create a hash with 
    //key = {level, msf} and int to store the LIS for that subproblem
    unordered_map<pair<int, int>, int, pair_hash> memo;
    // reserve space before execution so that less rehashing is required.
    // 1 << 19 = 524288, reserve a bucket of this size (~ 5 lakh unique entries possible, to avoid rehashing with small bucket)
    memo.reserve(1 << 19);
    cout << getLIS2Memo(0, INT_MIN, v, memo) << '\n';
}
"
RvBZ5ApB,Fake Lag CS 1.6,kay1mov,Python,Wednesday 28th of May 2025 04:18:18 AM CDT,"import pydivert
import time
DELAY_SECONDS = 200 # DELAY MS
DELAY_SECONDS /= 1000 # CONVERT TO SECONDS

LIMIT = 20 # MAX PACKETS TO DELAY

filter_str = ""outbound and udp and udp.DstPort == 27015"" # PORT MUST BE THE SAME AS THE SERVER

queue = [] # WE PUT ALL PACKETS HERE

with pydivert.WinDivert(filter_str) as w: # START LISTENING

    print(f""[*] Fake lag is active ({DELAY_SECONDS} sec and with packet limit {LIMIT})..."")

    while True:
        try:
            packet = w.recv() # DELAYING PACKET
            send_time = time.time() + DELAY_SECONDS #CALCULATE SEND TIME (CURRENT_TIME + DELAY)
            queue.append((send_time, packet)) # APPENDING FOR QUEUE LIST
        except Exception as e:
            print(f""recv error: {e}"")

        now = time.time() # CURRENT TIME
        ready = [p for p in queue if p[0] <= now] #READY PACKETS, IF (CURRENT_TIME <= SEND TIME)
        queue = [p for p in queue if p[0] > now] #ELSE

        for _, pkt in ready:
            try:
                w.send(pkt) #SEND ALL PACKETS IN READY LIST
            except Exception as e:
                print(f""send error: {e}"")

        if len(queue) >= LIMIT: #CHECKING SIZE OF QUEUE, IF THERE MORE THAN LIMIT, WE SEND LAST PACKET
            _, pkt = queue[-1]
            w.send(pkt)

        time.sleep(0.001) # DONT KILL YOUR CPU :)
"
nLHZvAcj,CF ROUND 1027G AC,pb_jiang,C++,Wednesday 28th of May 2025 04:10:33 AM CDT,"// Problem: G. Build an Array
// Contest: Codeforces - Codeforces Round  1027 (Div. 3)
// URL: https://codeforces.com/contest/2114/problem/G
// Memory Limit: 512 MB
// Time Limit: 1000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

namespace rngs = std::ranges;
using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

void solve()
{
    ll n, k;
    cin >> n >> k;
    vl a(n);
    for (auto &x : a)
        cin >> x;
    auto lowbit = [](ll x) { return x & -x; };

    vl pref(n), suff(n);
    // ll minv = n, maxv = lowbit(a.back());

    for (ll round = 0; round < 2; ++round) {
        auto &acc = round == 0 ? pref : suff;

        for (ll i = 0; i < n; ++i) {
            ll base = 0, delta = 0;
            if (i > 0) {
                base = acc[i - 1] - lowbit(a[i - 1]);
                ll x = a[i - 1], y = a[i];
                if (x % y == 0 && lowbit(x / y) == x / y) {
                    // delta = max(1ll, x / y / 2);
                    // delta = max(1ll, x / y - 1);
                    delta = max(1ll, lowbit(x) - lowbit(y * 2) + 1);
                } else {
                    delta = lowbit(x);
                }
            }

            // acc[i] = base + delta;
            acc[i] = base + lowbit(a[i]) + delta;
        }

        reverse(a.begin(), a.end());
    }
    rngs::reverse(suff);

    if (k < n) {
        cout << ""NO\n"";
        return;
    }
    dbg(pref, suff);

    for (ll i = 0; i < n; ++i) {
        ll val = pref[i] + suff[i] - lowbit(a[i]);
        dbg(val);
        if (val >= k) {
            cout << ""YES\n"";
            return;
        }
    }
    cout << ""NO\n"";
}

int main(int argc, char **argv)
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    ll t;
    cin >> t;
    while (t--)
        solve();

    return 0;
};
"
Z7TGxjwb,kadenae HD Application,Kadeinwales9,Lua,Wednesday 28th of May 2025 04:00:44 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local MarketplaceService = game:GetService(""MarketplaceService"")

_G.originalPrint = print
_G.originalWarn = warn
function print(...) _G.originalPrint(""frixion | Queuing System -"", ...) end
function warn(...) _G.originalWarn(""frixion | Queuing System -"", ...) end

local successConfig, QueuesConfig = pcall(function() return require(script.Config) end)
if not successConfig then error(""Failed to load queue config."") end

local function getOrCreateRemote(name, class)
	local obj = ReplicatedStorage:FindFirstChild(name)
	if not obj then
		obj = Instance.new(class)
		obj.Name = name
		obj.Parent = ReplicatedStorage
	end
	return obj
end

local queueRemote = getOrCreateRemote(""QueueRemote"", ""RemoteEvent"")
local queueBindable = getOrCreateRemote(""QueueBindable"", ""BindableEvent"")
local queueBindableFunction = getOrCreateRemote(""QueueBindableFunction"", ""BindableFunction"")

local playerQueueMap = {}
local queues = {}
local skipQueueOwners = {}
local processingPlayers = {}

local function freezePlayer(player, freeze)
	local success, err = pcall(function()
		local humanoid = player.Character and player.Character:FindFirstChildOfClass(""Humanoid"")
		local hrp = player.Character and player.Character:FindFirstChild(""HumanoidRootPart"")
		if humanoid and hrp then
			humanoid.WalkSpeed = freeze and 0 or 16
			humanoid.JumpPower = freeze and 0 or 50
			hrp.Anchored = freeze
		end
	end)
	if not success then warn(""[WARN] Error freezing player:"", err) end
end

local function updateQueuePositions(queueData)
	local success, err = pcall(function()
		local basePos, dir, spacing = queueData.BasePos, queueData.Direction, queueData.Spacing
		for i, player in ipairs(queueData.Queue) do
			if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
				local pos = basePos + dir * (-spacing * (i - 1)) + Vector3.new(0, 3, 0)
				player.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
			end
		end
	end)
	if not success then warn(""[WARN] Failed to update queue positions:"", err) end
end

local function sendQueueUpdates(queueData)
	local count = #queueData.Queue
	for i, player in ipairs(queueData.Queue) do
		if player.Parent then
			queueRemote:FireClient(player, {action = ""UpdatePosition"", position = i, total = count})
		end
	end
end

local function removePlayerFromQueue(player)
	local queueData = playerQueueMap[player]
	if not queueData then return end
	for i = 1, #queueData.Queue do
		if queueData.Queue[i] == player then
			table.remove(queueData.Queue, i)
			freezePlayer(player, false)
			queueRemote:FireClient(player, {action = ""Hide""})
			playerQueueMap[player] = nil
			break
		end
	end
	updateQueuePositions(queueData)
	sendQueueUpdates(queueData)
end

local function addPlayerToQueue(player, queueName)
	local queueData = queues[queueName]
	if not queueData then return end
	if playerQueueMap[player] == queueData then return end
	if playerQueueMap[player] then removePlayerFromQueue(player) end

	local skipSet = skipQueueOwners[queueName] or {}
	local insertAtFront = skipSet[player.UserId]

	if insertAtFront then
		table.insert(queueData.Queue, 1, player)
		skipSet[player.UserId] = nil
	else
		table.insert(queueData.Queue, player)
	end

	playerQueueMap[player] = queueData
	freezePlayer(player, true)
	queueRemote:FireClient(player, {action = ""Show""})
	updateQueuePositions(queueData)
	sendQueueUpdates(queueData)
end

local function processQueue(queueData)
	local queue = queueData.Queue
	if #queue == 0 then return end

	local front = queue[1]
	if front and front.Parent and not processingPlayers[front] then
		processingPlayers[front] = true
		task.spawn(function()
			task.wait(queueData.MoveTime or 5)
			if queue[1] == front then
				removePlayerFromQueue(front)
				if queueData.OnQueueEnd then
					local ok, err = pcall(queueData.OnQueueEnd, front)
					if not ok then warn(""[WARN] Queue '%s' OnQueueEnd error: %s"", queueData.Name, err) end
				end
			end
			processingPlayers[front] = nil
		end)
	elseif not front or not front.Parent then
		table.remove(queue, 1)
		updateQueuePositions(queueData)
		sendQueueUpdates(queueData)
	end
end

queueBindable.Event:Connect(function(action, player, param)
	if action == ""JoinQueue"" then
		addPlayerToQueue(player, param)
	elseif action == ""LeaveQueue"" then
		removePlayerFromQueue(player)
	end
end)

queueBindableFunction.OnInvoke = function(action, player, param)
	if action == ""CheckInQueue"" and player and param then
		local queueData = queues[param]
		for _, p in ipairs(queueData and queueData.Queue or {}) do
			if p == player then return true end
		end
		return false
	elseif action == ""IsInQueue"" and player then
		return playerQueueMap[player] ~= nil
	elseif action == ""GetQueuePosition"" and player then
		local queueData = playerQueueMap[player]
		if queueData then
			for i, p in ipairs(queueData.Queue) do
				if p == player then return i end
			end
		end
		return nil
	end
end

local function initialize()
	for _, config in ipairs(QueuesConfig) do
		local queuePart = workspace:WaitForChild(config.QueuePartName)
		local promptPart = workspace:WaitForChild(config.PromptPartName)

		queues[config.Name] = {
			Name = config.Name,
			QueuePart = queuePart,
			MoveTime = config.MoveTime,
			Spacing = config.Spacing or 3,
			Queue = {},
			Direction = queuePart.CFrame.LookVector,
			BasePos = queuePart.Position,
			OnQueueEnd = config.OnQueueEnd,
			SkipQueueDeveloperProductId = config.SkipQueueDeveloperProductId,
		}

		skipQueueOwners[config.Name] = {}

		local prompt = promptPart:FindFirstChildOfClass(""ProximityPrompt"") or Instance.new(""ProximityPrompt"")
		prompt.ActionText = ""Join Queue""
		prompt.ObjectText = config.Name or ""Queue""
		prompt.RequiresLineOfSight = false
		prompt.MaxActivationDistance = 10
		prompt.Parent = promptPart

		prompt.Triggered:Connect(function(player)
			addPlayerToQueue(player, config.Name)
		end)
	end
end

initialize()

while true do
	for _, queueData in pairs(queues) do
		processQueue(queueData)
	end
	task.wait(1)
end

queueRemote.OnServerEvent:Connect(function(player, data)
	if typeof(data) == ""table"" and data.action == ""LeaveQueue"" then
		removePlayerFromQueue(player)
	end
end)

Players.PlayerRemoving:Connect(function(player)
	removePlayerFromQueue(player)
end)

MarketplaceService.ProcessReceipt = function(receiptInfo)
	local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
	if not player then return Enum.ProductPurchaseDecision.NotProcessedYet end

	for _, queueData in pairs(queues) do
		if queueData.SkipQueueDeveloperProductId == receiptInfo.ProductId then
			skipQueueOwners[queueData.Name][player.UserId] = true
			break
		end
	end

	return Enum.ProductPurchaseDecision.PurchaseGranted
end"
D9Tuidyx,Untitled,Voltanet,JSON,Wednesday 28th of May 2025 03:12:32 AM CDT,"""productFlowPoints"": [
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""b2885a17-5dcf-4a97-9d56-252e00e96ce4"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""850c6c09-78a2-4de2-bd5e-7b24eb0ac728"",
                            ""productFlowId"": ""8cb282e7-dbe3-4905-a34b-8a41c87f5df6"",
                            ""quantity"": ""4500""
                        }
                    ],
                    ""date"": ""2025-06-06T08:36:47Z"",
                    ""quantity"": ""4500""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""378a7469-f44a-4302-85d1-c76e174af4a9"",
                            ""productFlowId"": ""9d9b0d11-bc28-4fec-8fde-952d19a40833"",
                            ""quantity"": ""-4500""
                        }
                    ],
                    ""date"": ""2025-06-06T08:36:48Z"",
                    ""quantity"": ""0""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""0""
                }
            ],
            ""min"": ""0"",
            ""max"": ""4500""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""c3d70ade-2f46-46bb-bcdb-6a49d96b687e"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""0eae9e93-cc4d-43de-b544-16cfb520894c"",
                            ""productFlowId"": ""4b4cb3b8-f807-4e94-899e-f611e858bbdc"",
                            ""quantity"": ""1350""
                        }
                    ],
                    ""date"": ""2025-05-27T19:26:47Z"",
                    ""quantity"": ""1350""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""599e2c7e-41a5-4633-987b-121681c25bc2"",
                            ""productFlowId"": ""fe216a66-a047-4522-9c21-73a74f17ea40"",
                            ""quantity"": ""-1350""
                        }
                    ],
                    ""date"": ""2025-05-28T10:01:48Z"",
                    ""quantity"": ""0""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""0""
                }
            ],
            ""min"": ""0"",
            ""max"": ""1350""
        },
        {
            ""whId"": ""2df48322-df80-416a-aec9-58ffd34bc484"",
            ""productId"": ""5f37c32e-bc42-4d9f-92ff-b21563f0af96"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""801c389a-9975-4bf0-8287-a976aa4b1c4c"",
                            ""productFlowId"": ""092087f7-f55f-4ea4-94c3-f0194664dbdd"",
                            ""quantity"": ""1200""
                        }
                    ],
                    ""date"": ""2025-05-28T14:22:47Z"",
                    ""quantity"": ""1200""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""1200""
                }
            ],
            ""min"": ""1200"",
            ""max"": ""1200""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""b2af54e8-8370-48ad-8ea3-dfee90e57e4d"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-29T23:48:47Z"",
                    ""to"": ""2025-05-31T17:11:47Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""6164121c-5ce6-46c0-9678-1b5cf7298ad6"",
                            ""productFlowId"": ""89dea8fd-469b-4a5a-9eb3-86214f4e9bee"",
                            ""quantity"": ""-1500""
                        }
                    ],
                    ""date"": ""2025-05-29T23:48:47Z"",
                    ""quantity"": ""-1500""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""f4f05ca4-70dc-4d31-a03b-b1ea98a5c5c3"",
                            ""productFlowId"": ""dbeb8c13-3b0b-482e-b56e-36b60b5f6cd7"",
                            ""quantity"": ""3000""
                        }
                    ],
                    ""date"": ""2025-05-31T17:11:47Z"",
                    ""quantity"": ""1500""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""1500""
                }
            ],
            ""min"": ""-1500"",
            ""max"": ""1500""
        },
        {
            ""whId"": ""2df48322-df80-416a-aec9-58ffd34bc484"",
            ""productId"": ""870d7526-b1e1-4293-bdc7-b4fb8623020c"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""276f55d9-d253-42e0-94a5-6cfc7a681829"",
                            ""productFlowId"": ""6d7ea070-3b67-45b1-bade-ac0a3af13978"",
                            ""quantity"": ""250""
                        }
                    ],
                    ""date"": ""2025-05-27T13:19:47Z"",
                    ""quantity"": ""250""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""250""
                }
            ],
            ""min"": ""250"",
            ""max"": ""250""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""a2cb3e33-ffa6-4595-8c8b-dd5fb1214bdd"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-26T08:01:47Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""6532d41f-053a-4e01-bac5-830f9a510a5d"",
                            ""productFlowId"": ""e403e6e1-b24b-48c4-9d7f-ffb12017f368"",
                            ""quantity"": ""-202""
                        }
                    ],
                    ""date"": ""2025-05-26T08:01:47Z"",
                    ""quantity"": ""-202""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-202""
                }
            ],
            ""min"": ""-202"",
            ""max"": ""-202""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""12d3be20-ffae-4f72-b050-a73828a86944"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-27T00:41:48Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""9ac76574-ca3c-4d32-bdab-3d8fa57546b4"",
                            ""productFlowId"": ""2efa76fc-0d6d-425f-83fb-45ef37b1b09b"",
                            ""quantity"": ""200""
                        }
                    ],
                    ""date"": ""2025-05-27T00:41:47Z"",
                    ""quantity"": ""200""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""931dedf7-3ef5-4e77-a090-9711ba4d9000"",
                            ""productFlowId"": ""1b0ab952-a188-4de5-9a25-f0ad254b8f30"",
                            ""quantity"": ""-800""
                        }
                    ],
                    ""date"": ""2025-05-27T00:41:48Z"",
                    ""quantity"": ""-600""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-600""
                }
            ],
            ""min"": ""-600"",
            ""max"": ""200""
        },
        {
            ""whId"": ""759a8765-9e74-48e6-b37a-ee4ee1541616"",
            ""productId"": ""48433af5-1998-4406-8471-e48862f20c63"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""371845e9-6a6a-4764-b37f-9254fd0b9ae3"",
                            ""productFlowId"": ""dde4ba6f-46b5-4eb7-a458-e7f67c6d68e7"",
                            ""quantity"": ""300""
                        }
                    ],
                    ""date"": ""2025-06-10T12:36:49Z"",
                    ""quantity"": ""300""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""300""
                }
            ],
            ""min"": ""300"",
            ""max"": ""300""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""802940ef-5ccd-4381-a106-642bc9a85d66"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-28T14:25:47Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""56ec66ac-11fd-4788-80d8-44534c674a75"",
                            ""productFlowId"": ""a7a72dde-38b8-485f-8cd2-ded1b70cf0c4"",
                            ""quantity"": ""-1600""
                        }
                    ],
                    ""date"": ""2025-05-28T14:25:47Z"",
                    ""quantity"": ""-1600""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""af5cba15-b7d6-40e0-921d-ef880db97d60"",
                            ""productFlowId"": ""874a54ae-7558-43ea-b1ef-9c710646d895"",
                            ""quantity"": ""400""
                        }
                    ],
                    ""date"": ""2025-05-29T23:31:47Z"",
                    ""quantity"": ""-1200""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-1200""
                }
            ],
            ""min"": ""-1600"",
            ""max"": ""-1200""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""a4e261e2-6f0b-4536-a6aa-a4e9e97745a7"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""8391bc5b-6187-40dc-a048-266894d35a4e"",
                            ""productFlowId"": ""348c459e-1c79-452a-b03e-ba97359d7c15"",
                            ""quantity"": ""2400""
                        }
                    ],
                    ""date"": ""2025-06-14T16:36:47Z"",
                    ""quantity"": ""2400""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""70a52010-ba86-40fb-84e7-227e4ac66739"",
                            ""productFlowId"": ""aa412c52-41ed-4ed1-a314-dd69fb798626"",
                            ""quantity"": ""-2400""
                        }
                    ],
                    ""date"": ""2025-06-14T16:36:48Z"",
                    ""quantity"": ""0""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""0""
                }
            ],
            ""min"": ""0"",
            ""max"": ""2400""
        },
        {
            ""whId"": ""759a8765-9e74-48e6-b37a-ee4ee1541616"",
            ""productId"": ""bb0b07ac-704d-4c3c-93ed-8c12f830231c"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""f79259c8-57fe-49d2-a4d3-43bf500fdd59"",
                            ""productFlowId"": ""11b9e523-b76b-4b68-89cf-25bfbfe188e7"",
                            ""quantity"": ""250""
                        }
                    ],
                    ""date"": ""2025-06-01T14:01:49Z"",
                    ""quantity"": ""250""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""250""
                }
            ],
            ""min"": ""250"",
            ""max"": ""250""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""985c7d77-9a2b-4b57-90ec-52cc49ae520a"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-29T23:31:48Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""eb458b41-af71-4632-b2a2-b11ff969c6db"",
                            ""productFlowId"": ""7e2c3636-a8e8-48cd-b367-b261ad2faf8a"",
                            ""quantity"": ""500""
                        }
                    ],
                    ""date"": ""2025-05-29T13:06:47Z"",
                    ""quantity"": ""500""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""0f7e0f5e-429b-403b-90e0-ade9671c0833"",
                            ""productFlowId"": ""220b7d7b-3a08-445a-bf4e-d340495a8834"",
                            ""quantity"": ""-1500""
                        }
                    ],
                    ""date"": ""2025-05-29T23:31:48Z"",
                    ""quantity"": ""-1000""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-1000""
                }
            ],
            ""min"": ""-1000"",
            ""max"": ""500""
        },
        {
            ""whId"": ""ea0194f6-45d3-451e-9d08-867bf60abde0"",
            ""productId"": ""83590c94-47aa-4cc1-a37a-6ca89f313084"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-26T16:21:47Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""bb87ca12-940d-4300-86bc-a808b3f90c40"",
                            ""productFlowId"": ""29c5b768-13e0-4968-8381-053b331d7453"",
                            ""quantity"": ""-1250""
                        }
                    ],
                    ""date"": ""2025-05-26T16:21:47Z"",
                    ""quantity"": ""-1250""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""5e32c619-6146-401e-9744-087b7c744b44"",
                            ""productFlowId"": ""abcd9baa-5517-4dd1-b981-76366f889037"",
                            ""quantity"": ""-600""
                        }
                    ],
                    ""date"": ""2025-05-27T13:11:47Z"",
                    ""quantity"": ""-1850""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""af5cba15-b7d6-40e0-921d-ef880db97d60"",
                            ""productFlowId"": ""3602c600-5259-4123-902e-d41548f72967"",
                            ""quantity"": ""-1200""
                        }
                    ],
                    ""date"": ""2025-05-28T14:11:47Z"",
                    ""quantity"": ""-3050""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""f4f05ca4-70dc-4d31-a03b-b1ea98a5c5c3"",
                            ""productFlowId"": ""2c3843e3-cfa9-4e3d-af40-d1e4a65a1f44"",
                            ""quantity"": ""-500""
                        }
                    ],
                    ""date"": ""2025-05-29T23:31:47Z"",
                    ""quantity"": ""-3550""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-3550""
                }
            ],
            ""min"": ""-3550"",
            ""max"": ""-1250""
        },
        {
            ""whId"": ""2df48322-df80-416a-aec9-58ffd34bc484"",
            ""productId"": ""5989e7f9-84d6-421b-8cbd-336f17708130"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""6164121c-5ce6-46c0-9678-1b5cf7298ad6"",
                            ""productFlowId"": ""d7605a61-acf0-420c-a7b1-032f2a7fc542"",
                            ""quantity"": ""3000""
                        }
                    ],
                    ""date"": ""2025-05-31T17:28:47Z"",
                    ""quantity"": ""3000""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""3000""
                }
            ],
            ""min"": ""3000"",
            ""max"": ""3000""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""3436fe9e-c07b-4f78-aa43-c650454daa2d"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""599e2c7e-41a5-4633-987b-121681c25bc2"",
                            ""productFlowId"": ""efdf1dd8-f054-4646-b2d3-a95db846a02c"",
                            ""quantity"": ""2700""
                        }
                    ],
                    ""date"": ""2025-05-29T23:31:48Z"",
                    ""quantity"": ""2700""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""3829c23f-d316-4ede-814a-306d6b04d60d"",
                            ""productFlowId"": ""c480eeb4-1f1d-4da7-8947-a21f78d0b86d"",
                            ""quantity"": ""-450""
                        }
                    ],
                    ""date"": ""2025-05-29T23:31:49Z"",
                    ""quantity"": ""2250""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""2250""
                }
            ],
            ""min"": ""2250"",
            ""max"": ""2700""
        },
        {
            ""whId"": ""11b7647f-3689-44e6-bb05-c5de39f12633"",
            ""productId"": ""3955e08b-d515-49a9-b6bb-b3f71a190762"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-26T08:01:47Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""9ac76574-ca3c-4d32-bdab-3d8fa57546b4"",
                            ""productFlowId"": ""fec6a00e-4373-4e0d-935f-f45d9f9d994e"",
                            ""quantity"": ""-400""
                        },
                        {
                            ""stepId"": ""e63ea724-9263-4841-b42c-3325e8bd684d"",
                            ""productFlowId"": ""0432e5ee-b4d5-43f9-a274-fc7e26c2166c"",
                            ""quantity"": ""-200""
                        }
                    ],
                    ""date"": ""2025-05-26T08:01:47Z"",
                    ""quantity"": ""-600""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""0eae9e93-cc4d-43de-b544-16cfb520894c"",
                            ""productFlowId"": ""167d5226-bf0e-498f-bade-a8abaa5491be"",
                            ""quantity"": ""-225""
                        }
                    ],
                    ""date"": ""2025-05-27T00:41:47Z"",
                    ""quantity"": ""-825""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""eb458b41-af71-4632-b2a2-b11ff969c6db"",
                            ""productFlowId"": ""f2446c14-e36d-4f82-960a-c9ea201e3370"",
                            ""quantity"": ""-1500""
                        }
                    ],
                    ""date"": ""2025-05-27T19:26:47Z"",
                    ""quantity"": ""-2325""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""850c6c09-78a2-4de2-bd5e-7b24eb0ac728"",
                            ""productFlowId"": ""95c14ef1-1e24-41dc-97eb-368b1c5397cf"",
                            ""quantity"": ""-11250""
                        }
                    ],
                    ""date"": ""2025-05-29T13:06:47Z"",
                    ""quantity"": ""-13575""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""8391bc5b-6187-40dc-a048-266894d35a4e"",
                            ""productFlowId"": ""944663cf-428f-43fc-8110-7f74e7db2f3d"",
                            ""quantity"": ""-7200""
                        }
                    ],
                    ""date"": ""2025-06-06T08:36:47Z"",
                    ""quantity"": ""-20775""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-20775""
                }
            ],
            ""min"": ""-20775"",
            ""max"": ""-600""
        },
        {
            ""whId"": ""2df48322-df80-416a-aec9-58ffd34bc484"",
            ""productId"": ""7e6414ee-ee9a-403c-9025-e29f4c9c5723"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""56ec66ac-11fd-4788-80d8-44534c674a75"",
                            ""productFlowId"": ""5431a949-045f-4637-a10e-105e4c2364ec"",
                            ""quantity"": ""400""
                        }
                    ],
                    ""date"": ""2025-05-29T23:45:47Z"",
                    ""quantity"": ""400""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""400""
                }
            ],
            ""min"": ""400"",
            ""max"": ""400""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""cd6197ed-bd27-4a21-b9ce-adbda551c276"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""378a7469-f44a-4302-85d1-c76e174af4a9"",
                            ""productFlowId"": ""db65bbbb-3098-4b8c-8c4c-084dcd0e05ac"",
                            ""quantity"": ""1800""
                        }
                    ],
                    ""date"": ""2025-06-09T11:36:48Z"",
                    ""quantity"": ""1800""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""371845e9-6a6a-4764-b37f-9254fd0b9ae3"",
                            ""productFlowId"": ""3bb34412-9dbd-41da-8c9b-f32719385f4a"",
                            ""quantity"": ""-900""
                        }
                    ],
                    ""date"": ""2025-06-09T11:36:49Z"",
                    ""quantity"": ""900""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""900""
                }
            ],
            ""min"": ""900"",
            ""max"": ""1800""
        },
        {
            ""whId"": ""759a8765-9e74-48e6-b37a-ee4ee1541616"",
            ""productId"": ""b5fe314d-75ce-47bc-9491-ddb22ed6addf"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""7634e5d8-3b1c-4325-a6d7-2cbffb1fa746"",
                            ""productFlowId"": ""69d7dc45-591e-4195-ad38-e18bbe15cb76"",
                            ""quantity"": ""200""
                        }
                    ],
                    ""date"": ""2025-05-29T02:41:49Z"",
                    ""quantity"": ""200""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""200""
                }
            ],
            ""min"": ""200"",
            ""max"": ""200""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""c97b5f95-da71-44e2-9479-205dc2c6bb5d"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""70a52010-ba86-40fb-84e7-227e4ac66739"",
                            ""productFlowId"": ""7f0871a1-11d6-4f76-8d66-9f84e0150b9d"",
                            ""quantity"": ""800""
                        }
                    ],
                    ""date"": ""2025-06-17T11:16:48Z"",
                    ""quantity"": ""800""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""3c7f8ff4-b87d-4991-9edd-a76bdfba950c"",
                            ""productFlowId"": ""13ad68ee-f7ee-46ea-ad73-555542b4a3d9"",
                            ""quantity"": ""-800""
                        }
                    ],
                    ""date"": ""2025-06-17T11:16:49Z"",
                    ""quantity"": ""0""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""0""
                }
            ],
            ""min"": ""0"",
            ""max"": ""800""
        },
        {
            ""whId"": ""2df48322-df80-416a-aec9-58ffd34bc484"",
            ""productId"": ""3ccb1295-0d4c-4e26-b541-f64f30775c78"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""6532d41f-053a-4e01-bac5-830f9a510a5d"",
                            ""productFlowId"": ""d56c6e63-a091-4c4e-b51f-cb552b86dd45"",
                            ""quantity"": ""101""
                        }
                    ],
                    ""date"": ""2025-05-26T16:26:47Z"",
                    ""quantity"": ""101""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""101""
                }
            ],
            ""min"": ""101"",
            ""max"": ""101""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""cd2bd602-818e-45ee-b86f-f29b1c3d4904"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-26T16:29:47Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""e63ea724-9263-4841-b42c-3325e8bd684d"",
                            ""productFlowId"": ""60ace2ee-289f-44f1-905a-f87b4c65a432"",
                            ""quantity"": ""100""
                        }
                    ],
                    ""date"": ""2025-05-26T16:21:47Z"",
                    ""quantity"": ""100""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""276f55d9-d253-42e0-94a5-6cfc7a681829"",
                            ""productFlowId"": ""2e36a120-3da9-4f6e-a034-e311c23a0892"",
                            ""quantity"": ""-750""
                        }
                    ],
                    ""date"": ""2025-05-26T16:29:47Z"",
                    ""quantity"": ""-650""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""bb87ca12-940d-4300-86bc-a808b3f90c40"",
                            ""productFlowId"": ""adb8daf6-a8e5-4897-a089-d1d6e3e1d379"",
                            ""quantity"": ""500""
                        }
                    ],
                    ""date"": ""2025-05-27T13:11:47Z"",
                    ""quantity"": ""-150""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-150""
                }
            ],
            ""min"": ""-650"",
            ""max"": ""100""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""da790c9e-24a4-4033-913a-1bc6d24dee84"",
            ""belowZeroIntervals"": [
                {
                    ""from"": ""2025-05-27T13:22:47Z"",
                    ""to"": ""2025-07-27T00:00:00Z""
                }
            ],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""801c389a-9975-4bf0-8287-a976aa4b1c4c"",
                            ""productFlowId"": ""db5e09d4-a967-4de6-b219-28387b28e1d8"",
                            ""quantity"": ""-600""
                        }
                    ],
                    ""date"": ""2025-05-27T13:22:47Z"",
                    ""quantity"": ""-600""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""5e32c619-6146-401e-9744-087b7c744b44"",
                            ""productFlowId"": ""f3fe0e9f-9dde-4fb8-9c46-03bb1222274e"",
                            ""quantity"": ""300""
                        }
                    ],
                    ""date"": ""2025-05-28T14:11:47Z"",
                    ""quantity"": ""-300""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""-300""
                }
            ],
            ""min"": ""-600"",
            ""max"": ""-300""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""3910a1f4-f15a-4f30-8438-e830f2278daf"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""931dedf7-3ef5-4e77-a090-9711ba4d9000"",
                            ""productFlowId"": ""3ab16948-8e76-42fb-a744-642d64784749"",
                            ""quantity"": ""1600""
                        }
                    ],
                    ""date"": ""2025-05-28T10:01:48Z"",
                    ""quantity"": ""1600""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""7634e5d8-3b1c-4325-a6d7-2cbffb1fa746"",
                            ""productFlowId"": ""8bfd4316-8a95-4c05-9b95-7842b8d69d4d"",
                            ""quantity"": ""-400""
                        }
                    ],
                    ""date"": ""2025-05-28T10:01:49Z"",
                    ""quantity"": ""1200""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""1200""
                }
            ],
            ""min"": ""1200"",
            ""max"": ""1600""
        },
        {
            ""whId"": ""759a8765-9e74-48e6-b37a-ee4ee1541616"",
            ""productId"": ""3ad02774-c381-4edd-877c-2a062a678482"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""3c7f8ff4-b87d-4991-9edd-a76bdfba950c"",
                            ""productFlowId"": ""4e65320e-1e03-4773-8f6f-798ef1ec9775"",
                            ""quantity"": ""200""
                        }
                    ],
                    ""date"": ""2025-06-18T03:56:49Z"",
                    ""quantity"": ""200""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""200""
                }
            ],
            ""min"": ""200"",
            ""max"": ""200""
        },
        {
            ""whId"": ""c8b653a2-b065-4b77-932d-b5d71fd246dc"",
            ""productId"": ""43224998-9e50-450b-8edb-e91157d7c0b0"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""0f7e0f5e-429b-403b-90e0-ade9671c0833"",
                            ""productFlowId"": ""02f37196-70a4-44b1-9a24-4fe1d61e0f0b"",
                            ""quantity"": ""1500""
                        }
                    ],
                    ""date"": ""2025-05-31T17:11:48Z"",
                    ""quantity"": ""1500""
                },
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""f79259c8-57fe-49d2-a4d3-43bf500fdd59"",
                            ""productFlowId"": ""053257f5-86d9-4d8b-b639-53c24c909365"",
                            ""quantity"": ""-500""
                        }
                    ],
                    ""date"": ""2025-05-31T17:11:49Z"",
                    ""quantity"": ""1000""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""1000""
                }
            ],
            ""min"": ""1000"",
            ""max"": ""1500""
        },
        {
            ""whId"": ""759a8765-9e74-48e6-b37a-ee4ee1541616"",
            ""productId"": ""363573ba-7c54-45ce-9b4c-4c8345daf5a4"",
            ""belowZeroIntervals"": [],
            ""points"": [
                {
                    ""contributionEntities"": [
                        {
                            ""stepId"": ""3829c23f-d316-4ede-814a-306d6b04d60d"",
                            ""productFlowId"": ""7de22ef2-270a-4396-aa12-baf8bffe92b4"",
                            ""quantity"": ""150""
                        }
                    ],
                    ""date"": ""2025-05-30T12:01:49Z"",
                    ""quantity"": ""150""
                },
                {
                    ""contributionEntities"": [],
                    ""date"": ""2025-07-27T00:00:00Z"",
                    ""quantity"": ""150""
                }
            ],
            ""min"": ""150"",
            ""max"": ""150""
        }
    ]"
4j9emwQz,福瑞信号导航 startup,jaklsfjlsak,Lua,Wednesday 28th of May 2025 02:59:56 AM CDT,"-- startup
-- Bootloader for AutoNav

-- Print a startup message
print(""Starting AutoNav..."")

-- Launch the auto-navigation script
shell.run(""autonav.lua"")
"
g15WYtWa,福瑞信号导航 autonav.lua,jaklsfjlsak,Lua,Wednesday 28th of May 2025 02:59:26 AM CDT,"-- autonav.lua
-- Place this as /startup (or make sure it's run on boot).

local ship = peripheral.find(""warpdriveShipCore"")
assert(ship, ""No warpdriveShipCore found!"")

local navfile    = "".navdata""
local backupfile = "".navbackup""

-- load / save helpers
local function loadNav()
  if fs.exists(navfile) then
    local f = fs.open(navfile, ""r"")
    local t = textutils.unserialize(f.readAll())
    f.close()
    return t
  end
end

local function saveNav(t)
  local f = fs.open(navfile, ""w"")
  f.write(textutils.serialize(t))
  f.close()
end

local function backupNav()
  if fs.exists(navfile) then
    if fs.exists(backupfile) then fs.delete(backupfile) end
    fs.copy(navfile, backupfile)
  end
end

local function clearNav()
  if fs.exists(navfile) then fs.delete(navfile) end
end

-- execute just one hop then reboot
local function runOneHop(nav)
  local move = table.remove(nav, 1)
  if #nav > 0 then
    saveNav(nav)
  else
    clearNav()
  end
  backupNav()

  -- fire the jump
  ship.command(""MANUAL"", false)
  ship.movement(move[1], 0, move[2])  -- [1]=forward/back, [2]=left/right
  ship.rotationSteps(0)
  ship.command(""MANUAL"", true)

  print(string.format(
    ""→ Executed hop. Remaining: %d"", #nav
  ))
  sleep(5)
  os.reboot()
end

-- if there’s a pending nav list, resume it
local pending = loadNav()
if pending then
  print(""Resuming auto-nav, hops left:"", #pending)
  runOneHop(pending)
end

-- otherwise wait for a broadcast
for _, side in ipairs(peripheral.getNames()) do
  if peripheral.getType(side) == ""modem"" then
    rednet.open(side)
  end
end
print(""Waiting for ONJMcoordBroadcast…"")
local _, msg = rednet.receive(""ONJMcoordBroadcast"")

assert(type(msg)==""table"" and msg.x and msg.z,
       ""Invalid broadcast payload"")

local tx, tz = tonumber(msg.x), tonumber(msg.z)
print((""Target received → X:%d  Z:%d""):format(tx, tz))

-- fetch dims & orientation
local front, right = ship.dim_positive()
local back,  left  = ship.dim_negative()
local rx,_,rz    = ship.getOrientation()
local mx,_,mz    = ship.getLocalPosition()

-- world deltas
local dx, dz = tx-mx, tz-mz

-- convert into ship-local axes
local fb, lr = 0,0
if     rx== 1 then fb, lr = dx,  dz
elseif rx==-1 then fb, lr = -dx, -dz
elseif rz== 1 then fb, lr = dz,  -dx
elseif rz==-1 then fb, lr = -dz,  dx
end

-- clearance + max jump
local minFB = front+back
local minLR = right+left
local ok, maxJ = ship.getMaxJumpDistance()
if not ok or maxJ<=0 then
  error(""Could not get max jump distance"")
end

-- one-axis “computeMove” from your main.lua
local function computeMove(mindist, rem, unconstrained)
  if rem==0 then return 0 end
  local s = rem<0 and -1 or 1
  if math.abs(rem)<mindist and not unconstrained then
    return -s*mindist
  end
  return s * math.min(math.abs(rem), maxJ)
end

-- build the full list of (forward/back, left/right) hops
local nav = {}
repeat
  local m_fb = computeMove(minFB+1, fb, false)
  fb = fb - m_fb
  local m_lr = computeMove(minLR+1, lr, math.abs(m_fb)>minFB)
  lr = lr - m_lr
  table.insert(nav, { m_fb, m_lr })
until fb==0 and lr==0

assert(#nav>0, ""Computed zero hops?"")

-- save & run first hop
saveNav(nav)
print(""Computed ""..#nav.."" hops; starting…"")
runOneHop(nav)
"
PawJutvB,important,Piotr_Laskowski,Python,Wednesday 28th of May 2025 02:20:02 AM CDT,"import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

# Convert Potability into category
#data['Potability'] = data['Potability'].astype('category')



# Handle missing values with median
for column in data.columns:
    if data[column].isnull().any():
        data[column].fillna(data[column].median(), inplace=True)

# Separate features and target
X = data.drop('Potability', axis=1)
y = data['Potability']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train a Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_scaled, y)

# Get feature importance
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': rf_model.feature_importances_
}).sort_values('Importance', ascending=False)

print(""Feature Importance for Predicting Water Potability:"")
print(feature_importance)

# Calculate and print model accuracy
from sklearn.metrics import accuracy_score, classification_report

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train the model on training data
rf_model.fit(X_train, y_train)

# Make predictions on test data
y_pred = rf_model.predict(X_test)

print(""\nModel Performance:"")
print(""\nAccuracy Score:"", accuracy_score(y_test, y_pred))
print(""\nDetailed Classification Report:"")
print(classification_report(y_test, y_pred))

# Create feature importance plot
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance)
plt.title('Feature Importance for Water Potability Prediction')
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.tight_layout()
plt.show()"
gLHd2jqX,Untitled,stigzler,C#,Wednesday 28th of May 2025 01:58:21 AM CDT,"    internal class GenericCollectionEditor : UITypeEditor
    {
        public override UITypeEditorEditStyle GetEditStyle(System.ComponentModel.ITypeDescriptorContext context)
        {
            if (context == null && context.Instance == null) return base.GetEditStyle(context);
            return UITypeEditorEditStyle.Modal;
        }

        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
        {
            if (context == null || provider == null || context.Instance == null) return value;

            IWindowsFormsEditorService editorService = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));

            Type type = value.GetType().GetGenericArguments().SingleOrDefault() ?? typeof(object);

            Type genericClass = typeof(GenericCollectionEditorForm<>);
            Type constructedClass = genericClass.MakeGenericType(type);
            dynamic form = Activator.CreateInstance(constructedClass);

            switch (type)
            {
                case Type t when t == typeof(SupportApplications):
                    List<SupportApplications> list = new List<SupportApplications>();
                    foreach (var item in (List<SupportApplications>)value) list.Add(item);
                    form.Objects = list;
                    break;
                default:
                    form.Text = $""Edit {type.Name} Collection"";
                    break;
            }

            form.Text = $""Edit {type.Name} Collection"";

            if (editorService.ShowDialog((Form)form) == System.Windows.Forms.DialogResult.OK)
            {
                switch (type)
                {
                    case Type t when t == typeof(SupportApplications):
                        return new List<SupportApplications>(form.Objects);
                    default:
                        throw new NotSupportedException($""Type {type.Name} is not supported in GenericCollectionEditor."");
                }
            }

            return base.EditValue(context, provider, value);

        }

// =============================

    public partial class GenericCollectionEditorForm<T> : FormViewBase
    {
        private List<T> objects = new List<T>();

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public List<T> Objects
        {
            get { return objects; }
            set
            {
                objects = value;
                objectsBindingSource.DataSource = Objects;
                RefreshObjectListDataBindings();
            }
        }

        private Type type = null;

        private BindingSource objectsBindingSource = new BindingSource();


        public GenericCollectionEditorForm()
        {
            InitializeComponent();
            MainLB.DataSource = objectsBindingSource;
        }

        private void AddBT_Click(object sender, EventArgs e)
        {
            Objects.Add((T)Activator.CreateInstance(typeof(T)));
            RefreshObjectListDataBindings();
        }

        private void MainLB_SelectedValueChanged(object sender, EventArgs e)
        {
            MainPG.SelectedObject = MainLB.SelectedItem;
        }

        private void RefreshObjectListDataBindings()
        {
            MainLB.DataSource = null;
            MainLB.DataSource = objectsBindingSource;
        }

        private void MainPG_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
        {
            Debug.WriteLine(e.ChangedItem.DisplayName());
            int selectedIndex = MainLB.SelectedIndex;
            RefreshObjectListDataBindings();
            MainLB.SelectedIndex = selectedIndex;
        }

        private void DeleteBT_Click(object sender, EventArgs e)
        {
            if (MainLB.SelectedItems.Count == 0) return;
            Objects.Remove((T)objectsBindingSource.Current);
            RefreshObjectListDataBindings();
        }

        private void UpBT_Click(object sender, EventArgs e)
        {
            int newIndex = Math.Max(MainLB.SelectedIndex - 1, 0);
            Objects.Move(MainLB.SelectedIndex, newIndex);
            RefreshObjectListDataBindings();
            MainLB.SelectedIndex = newIndex;
        }

        private void DownBT_Click(object sender, EventArgs e)
        {
            int newIndex = Math.Min(MainLB.SelectedIndex + 1, MainLB.Items.Count - 1);
            Objects.Move(MainLB.SelectedIndex, newIndex);
            RefreshObjectListDataBindings();
            MainLB.SelectedIndex = newIndex;
        }

    }
"
mf13Yk81,核心跳船信号接收 福瑞导航,jaklsfjlsak,Lua,Wednesday 28th of May 2025 01:56:33 AM CDT,"-- autonav.lua
-- Put this in /startup (or run it directly).  Assumes single warpdriveShipCore.

local ship = peripheral.find(""warpdriveShipCore"")
assert(ship, ""No warpdriveShipCore found!"")

local lever       = ""front""
local navfile     = "".navdata""
local backupfile  = "".navbackup""

-- read/write helpers
local function loadNav()
  if fs.exists(navfile) then
    local f = fs.open(navfile,""r"")
    local t = textutils.unserialize(f.readAll())
    f.close()
    return t
  end
end

local function saveNav(t)
  local f = fs.open(navfile,""w"")
  f.write(textutils.serialize(t))
  f.close()
end

local function backupNav()
  if fs.exists(navfile) then
    if fs.exists(backupfile) then fs.delete(backupfile) end
    fs.copy(navfile,backupfile)
  end
end

local function clearNav()
  if fs.exists(navfile) then fs.delete(navfile) end
end

-- execute one hop and reboot
local function runOneHop(nav)
  local move = nav[1]
  -- remove first, persist rest (or delete if none)
  if #nav > 1 then
    table.remove(nav,1)
    saveNav(nav)
  else
    clearNav()
  end
  backupNav()

  -- fire the jump
  ship.command(""MANUAL"", false)
  ship.movement(move[1], move[2], move[3])
  ship.rotationSteps(0)
  ship.command(""MANUAL"", true)

  print((""→ Executed hop %d/%d   FB:%d  UD:%d  LR:%d"")
        :format(1, #nav+1, move[1], move[2], move[3]))
  sleep(5)        -- give warpdrive time
  os.reboot()     -- next boot will pick up the next hop
end

-- if there's a pending nav list, resume it
local pending = loadNav()
if pending then
  print(""Resuming auto-nav with ""..#pending.."" hops remaining…"")
  runOneHop(pending)
end

-- otherwise, listen for a broadcast
for _,side in ipairs(peripheral.getNames()) do
  if peripheral.getType(side)==""modem"" then rednet.open(side) end
end
print(""Awaiting ONJMcoordBroadcast (lever '""..lever..""’ HIGH)…"")

while true do
  if redstone.getInput(lever) then
    local sender,msg = rednet.receive(""ONJMcoordBroadcast"", 0.5)
    if sender and type(msg)==""table"" and msg.x and msg.y and msg.z then
      local tx,ty,tz = tonumber(msg.x), tonumber(msg.y), tonumber(msg.z)
      print((""Received target from %d → X=%d Y=%d Z=%d"")
            :format(sender,tx,ty,tz))

      -- fetch dims & orientation
      local front, right, up    = ship.dim_positive()
      local back,  left,  down  = ship.dim_negative()
      local orix,_,oriz          = ship.getOrientation()
      local mx,my,mz            = ship.getLocalPosition()

      -- world deltas
      local dx, dy, dz = tx-mx, ty-my, tz-mz
      -- ship-local axes
      local shipdeltafront, shipdeltaright
      if     orix== 1 then shipdeltafront, shipdeltaright = dx,   dz
      elseif orix==-1 then shipdeltafront, shipdeltaright = -dx, -dz
      elseif oriz== 1 then shipdeltafront, shipdeltaright = dz,  -dx
      elseif oriz==-1 then shipdeltafront, shipdeltaright = -dz,  dx
      else shipdeltafront, shipdeltaright = 0,0 end
      local shipdeltaup = dy

      -- minimal clearance
      local minFB = front+back
      local minUD = up+down
      local minLR = right+left

      -- how far we can jump
      local ok, maxJ = ship.getMaxJumpDistance()
      if not ok or maxJ<=0 then
        maxJ = math.sqrt(shipdeltafront^2 + shipdeltaup^2 + shipdeltaright^2)
      end

      -- compute one-axis move, like main.lua’s computeMove()
      local function computeMove(mindist, rem, unconstrained)
        if rem == 0 then return 0 end
        local s = rem<0 and -1 or 1
        if math.abs(rem)<mindist and not unconstrained then
          return -s * mindist
        end
        return s * math.min(math.abs(rem), maxJ)
      end

      -- build the full navdata
      local nav = {}
      repeat
        local m = {}
        -- Y first
        m[2] = computeMove(minUD+1, shipdeltaup, true)
        shipdeltaup = shipdeltaup - m[2]
        -- X (forward/back)
        m[1] = computeMove(minFB+1, shipdeltafront,
                   math.abs(m[2])>minUD)
        if not (math.abs(m[2])>minUD)
           and shipdeltafront==0 and shipdeltaup~=0 and shipdeltaright==0
           and m[1]==0
        then
          m[1] = minFB+1
        end
        shipdeltafront = shipdeltafront - m[1]
        -- Z (left/right)
        m[3] = computeMove(minLR+1, shipdeltaright,
                   math.abs(m[2])>minUD or math.abs(m[1])>minFB)
        shipdeltaright = shipdeltaright - m[3]

        table.insert(nav, m)
      until shipdeltafront==0 and shipdeltaup==0 and shipdeltaright==0

      -- persist and run first hop
      saveNav(nav)
      print(""Computed ""..#nav.."" hop(s); starting…"")
      runOneHop(nav)
    end
  else
    sleep(0.1)
  end
end
"
cLz47cAR,Задачи на 28 мая,kutuzzzov,C++,Wednesday 28th of May 2025 01:34:46 AM CDT,"/*Задача 1: Оценка уровня хаоса в комнате
Условие: Ученик хочет оценить уровень хаоса в своей комнате. Для каждого предмета он присваивает баллы (от 1 до 10):

""Clothes on the floor"": 8,
""Books on the bed"": 6,
""Dishes in the sink"": 9,
""Posters falling off the wall"": 7.
Вычислите общий уровень хаоса.*/

int main() {
std::map<std::string, int> chaosLevels = {
        {""Clothes on the floor"", 8},
        {""Books on the bed"", 6},
        {""Dishes in the sink"", 9},
        {""Posters falling off the wall"", 7}
    };
    int totalChaos = 0;
    // допишите недостающий код ниже
}

/*Задача 2: Поиск самых популярных игрушек
Условие: Ученик записал названия игрушек и их популярность (в процентах):

""Lego"": 80%,
""Barbie"": 60%,
""Action Figures"": 70%,
""Board Games"": 50%.
Найдите игрушки с популярностью выше 65%.*/

int main() {
	std::vector<std::pair<std::string, int>> toys = {{""Lego"", 80}, {""Barbie"", 60}, {""Action Figures"", 70}, {""Board Games"", 50}};
    std::vector<std::string> popularToys;
    // допишите недостающий код ниже
}

/*Задача 3: Подсчет времени на соцсети
Условие: Ученик записал время, проведенное в социальных сетях за неделю (в минутах): 30, 45, 60, 20, 50, 100, 90. Найдите среднее время и максимальное время.*/

int main() {
	std::vector<int> timeSpent = {30, 45, 60, 20, 50, 100, 90};
    double average = 0.0;
    int maxTime = 0;
    // допишите недостающий код ниже
}

/*Задача 4: Поиск любимой песни
Условие: Ученик записал свои любимые песни:

""Bohemian Rhapsody"",
""Imagine"",
""Hotel California"",
""Stairway to Heaven"".
Проверьте, есть ли в списке песня ""Imagine"". Если да, выведите сообщение: ""This is my favorite song!"".
*/

int main() {
	std::vector<std::string> songs = {""Bohemian Rhapsody"", ""Imagine"", ""Hotel California"", ""Stairway to Heaven""};
    // допишите недостающий код ниже
}

/*Задача 5: Сортировка друзей по дружбе
Условие: Ученик записал своих друзей и уровень их дружбы (от 1 до 10):

""Alice"": 8,
""Bob"": 6,
""Charlie"": 9,
""Diana"": 7.
Отсортируйте друзей по уровню дружбы (от самого близкого к менее близкому).*/

int main() {
	std::vector<std::pair<std::string, int>> friends = {{""Alice"", 8}, {""Bob"", 6}, {""Charlie"", 9}, {""Diana"", 7}};
    // допишите недостающий код ниже
}

/*Задача 6: Проверка домашних заданий
Условие: Учитель дал список домашних заданий:

""Math Homework"",
""Physics Project"",
""Chemistry Lab"",
""History Essay"".
Ученик выполнил только ""Math Homework"" и ""Physics Project"". Напишите программу, которая проверяет, какие задания остались невыполненными.*/

int main() {
	std::vector<std::string> allTasks = {""Math Homework"", ""Physics Project"", ""Chemistry Lab"", ""History Essay""};
    std::vector<std::string> completedTasks = {""Math Homework"", ""Physics Project""};
    std::vector<std::string> incompleteTasks;
    // допишите недостающий код ниже
}

/*Задача 7: Распределение карманных денег
Условие: Ученик получил 1000 рублей карманных денег. Он хочет потратить их на:

""Candy"": 50 рублей,
""Ice Cream"": 100 рублей,
""Toys"": 300 рублей,
""Books"": 200 рублей.
Напишите программу, которая проверяет, хватит ли денег, и если нет, то сколько еще нужно.*/

int main() {
	std::vector<int> expenses = {50, 100, 300, 200};
    int pocketMoney = 1000;
    int totalExpenses = 0;
    // допишите недостающий код ниже
}

/*Задача 8: Подсчет калорий
Условие: Ученик решил следить за своим питанием. Вот список съеденных продуктов и их калорийность:

""Pizza"": 300 ккал,
""Burger"": 250 ккал,
""Salad"": 50 ккал,
""Soda"": 150 ккал.
Напишите программу, которая подсчитывает общее количество калорий.*/

int main() {
	std::map<std::string, int> food = {{""Pizza"", 300}, {""Burger"", 250}, {""Salad"", 50}, {""Soda"", 150}};
    int totalCalories = 0;
    // допишите недостающий код ниже
}

/*Задача 9: Расчет средней оценки
Условие: Ученик получил следующие оценки за четверть: 4, 5, 3, 4, 5.
Напишите программу, которая вычисляет среднюю оценку.*/

int main() {
	std::vector<int> grades = {4, 5, 3, 4, 5};
    double average = 0.0;
    // допишите недостающий код ниже
}

/*Задача 10: Подсчет уникальных предметов
Условие: Ученик записал названия предметов, которые он изучает: ""Math"", ""Physics"", ""Math"", ""Chemistry"", ""Physics"".
Найдите количество уникальных предметов.*/

int main() {
	std::vector<std::string> subjects = {""Math"", ""Physics"", ""Math"", ""Chemistry"", ""Physics""};
    // допишите недостающий код ниже
}

/*Задача 11: Поиск минимального времени выполнения задания
Условие: Ученику нужно выполнить несколько заданий, каждое из которых занимает определенное время (в минутах): 30, 15, 45, 10, 20. Найдите задание, которое выполняется быстрее всего.*/

int main() {
	std::vector<int> times = {30, 15, 45, 10, 20};
    // допишите недостающий код ниже
}

/*Задача 12: Фильтрация чисел
Условие: Ученик записал числа: 1, 2, 3, 4, 5, 6, 9. 
Оставьте только те, которые делятся на 3.*/

int main() {
	std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 9};
    std::vector<int> result;
    // допишите недостающий код ниже
}

/*Задача 13: Генерация таблицы умножения
Условие: Создайте таблицу умножения для числа 7 (от 1 до 10).*/

int main() {
	int n = 7;
    std::vector<int> table;
    // допишите недостающий код ниже
}

/*Задача 14: Подсчет количества букв в тексте
Условие: Подсчитайте, сколько раз каждая буква встречается в тексте: ""Hello, World!"".*/

int main() {
	std::string text = ""Hello, World!"";
    std::map<char, int> frequency;
    // допишите недостающий код ниже
}"
3ERBXmD5,Win11 EN,RRdabbyholla3,JSON,Wednesday 28th of May 2025 12:39:49 AM CDT,"{
    ""YourPasswordText"": ""Your Password""
}"
LdRV6y1S,Win11 NL,RRdabbyholla3,JSON,Wednesday 28th of May 2025 12:38:56 AM CDT,"{
    ""YourPasswordText"": ""Uw Wachtwoord""
}"
LUseKC5W,fslab,Vikhyath_11,HTML,Tuesday 27th of May 2025 09:46:17 PM CDT,"EXTRA QUESTIONS:
(table creation using img)
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Invoice</title>
<style>
table {
width: 100%;
border-collapse: collapse;
font-family: Arial, sans-serif;
}
th, .heading-cell {
font-weight: bold;
background-color: #f2f2f2;
}
td, th {
padding: 8px;
border: 1px solid #ddd;
text-align: left;
}
.right-align {
text-align: right;
}
</style>
</head>
<body>
<table>
<tr>
<td class=""heading-cell"" colspan=""2"">Invoice #123456789</td>
<td class=""heading-cell"" colspan=""2"">14 January 2025</td>
</tr>
<tr>
<td class=""heading-cell"" colspan=""2"">Pay to:</td>
<td class=""heading-cell"" colspan=""2"">Customer:</td>
</tr>
<tr>
<td colspan=""2"">Acme Billing Co.<br>123 Main St.<br>Cityville, NA 12345</td>
<td colspan=""2"">John Smith<br>321 Willow Way<br>Southeast Northwesternshire,
MA 54321</td>
</tr>
<tr>
<th>Name / Description</th>
<th>Qty.</th>
<th>@</th>
<th>Cost</th>
</tr>
<tr>
<td>Paper clips</td>
<td>1000</td>
<td>0.01</td>
<td>10.00</td>
</tr>
<tr>
<td>Staples (box)</td>
<td>100</td>
<td>1.00</td>
<td>100.00</td>
</tr>
<tr>
<td class=""heading-cell"" colspan=""3"">Subtotal</td>
<td>110.00</td>
</tr>
<tr>
<td class=""heading-cell"" colspan=""3"">Tax</td>
<td>8.80</td>
</tr>
<tr>
<td class=""heading-cell"" colspan=""3"">Grand Total</td>
<td>$ 118.80</td>
</tr>
</table>
</body>
</html>
```



(upper and lower case)
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=<device-width>, initial-scale=1.0"">
    <title>Document</title>
</head>
<body>
    <input type=""text"" id=""inputString"">
    <button onclick=""changeCase()"">submit</button>
    <p id=""output""></p>
    <script>
        function changeCase(){
            const inputString=document.getElementById(""inputString"").value;
            let result='';
            for(let i=0;i<inputString.length;i++){
                const char=inputString[i];
                if(char===char.toUpperCase()){
                    result+=char.toLowerCase();
                }
                else if(char===char.toLowerCase()){
                    result+=char.toUpperCase();
                }
                else{
                    result+=char;
                }
            }
            document.getElementById('output').textContent=result;
        }
    </script>
</body>
</html>




(new 2 cells adding)
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>
    body {
        font-family: Arial, sans-serif;
        padding: 20px;
    }

    table {
        border-collapse: collapse;
        width: 50%;
        margin-bottom: 20px;
    }

    td {
        border: 1px solid #333;
        padding: 10px;
        text-align: center;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

    button {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

    button:hover {
        background-color: #45a049;
    }

    #display {
        margin-top: 20px;
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }
    </style>
</head>
<body>
    <table>
        <tr id=""table1"">
            <td>Column1</td>
            <td>Column2</td>
        </tr>
    </table>
    <button id=""btn1"">Add Row</button>
    <div id=""display""></div>
    <script>
        document.getElementById('btn1').addEventListener('click', function() {
            const table = document.querySelector('table');
            const newRow = table.insertRow();

            for (let i = 0; i < 2; i++) {
                const cell = newRow.insertCell();
                const randomNum = Math.floor(Math.random() * 200) + 1;
                cell.textContent = randomNum;

                cell.addEventListener('mouseover', function () {
                    const value = parseInt(this.textContent);
                    this.style.backgroundColor = (value % 2 === 0) ? ""blue"" : ""pink"";
                });

                cell.addEventListener('mouseout', function () {
                    this.style.backgroundColor = """";
                });

                cell.addEventListener('click', function () {
                    document.getElementById('display').textContent = this.textContent;
                });
            }
        });
    </script>
</body>
</html>




<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Academic Table</title>
<style>
table {
border-collapse: collapse;
width: 100%;
font-family: Arial, sans-serif;
margin: 20px 0;
}
th {
color: red;
font-weight: bold;
border: 1px solid #ddd;
padding: 8px;
text-align: left;
}
td {
color: blue;
border: 1px solid #ddd;
padding: 8px;
}
tr:hover td {
background-color: #f5f5f5;
}
/* Special styling for merged cells */
.merged-row {
border-top: none;
}
</style>
</head>
<body>
<table>
<thead>
<tr>
<th>Sno</th>
<th>Course</th>
<th>Subject</th>
<th colspan=""2"">Marks</th>
<th>Category</th>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<th>Internal</th>
<th>External</th>
<td></td>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>BTech(CSE)</td>
<td>Fun with Game Design</td>
<td>30</td>
<td>70</td>
<td rowspan=""2""></td>
</tr>
<tr class=""merged-row"">
<td></td>
<td></td>
<td>Fun with Programming</td>
<td>30</td>
<td></td>
</tr>
</tbody>
</table>
</body>
</html>



<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"" />
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/>
  <title>Simple Registration</title>
  <style>
    .error {
      color: red;
      font-size: 0.9em;
    }
  </style>
</head>
<body>
  <form id=""form"">
    <input id=""username"" placeholder=""Username"">
    <div id=""usernameError"" class=""error""></div><br>

    <input id=""password"" type=""password"" placeholder=""Password"">
    <div id=""passwordError"" class=""error""></div><br>

    <input id=""confirmPassword"" type=""password"" placeholder=""Confirm Password"">
    <div id=""confirmPasswordError"" class=""error""></div><br>

    <input id=""email"" type=""email"" placeholder=""Email"">
    <div id=""emailError"" class=""error""></div><br>

    <!-- Button type is ""button"" to prevent form from auto-submitting -->
    <button type=""button"" onclick=""validate()"">Register</button>
  </form>

  <script>
    function validate() {
      // Get input values from the form
      const u = username.value.trim();               // Trim spaces from username
      const p = password.value;                      // Password value
      const cp = confirmPassword.value;              // Confirm password value
      const em = email.value;                        // Email value

      let valid = true; // This tracks if all fields are valid

      // Username must not be empty
      if (!u) {
        usernameError.textContent = 'Username is required';
        valid = false;
      }

      // Password must be at least 6 characters
      if (p.length < 6) {
        passwordError.textContent = 'Password must be at least 6 chars';
        valid = false;
      }

      // Password and confirm password must match
      if (p !== cp) {
        confirmPasswordError.textContent = 'Passwords do not match';
        valid = false;
      }

      // Email must include ""@"" and "".""
      if (!em.includes('@') || !em.includes('.')) {
        emailError.textContent = 'Invalid email';
        valid = false;
      }

      // If all checks passed
      if (valid) {
        alert('Registration successful!');
        // Optionally submit the form here
        // document.getElementById('form').submit();
      }
    }
  </script>
</body>
</html>


1st part:
function bizzFizz() {
const result = [];
for (let i = 1; i <= 100; i++) {
if (i % 3 === 0 && i % 5 === 0) {
result.push(""BizzFizz"");
} else if (i % 3 === 0) {
result.push(""Bizz"");
} else if (i % 5 === 0) {
result.push(""Fizz"");
} else {
result.push(i);
}
}
return result;
}
// Usage:
const bizzFizzArray = bizzFizz();
console.log(bizzFizzArray);

2nd part:
<!DOCTYPE html>
<html>
    <style>
        #output{
            margin: 20%;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: x-large;
            border: 1px solid;
            height: 150px;
            width: 250px;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }
    </style>
<body>
  <h2>Grade Ranges</h2>
  <div id=""output""></div>

  <script>
    const students = [
      { grade: 45 }, { grade: 36 }, { grade: 42 },
      { grade: 35 }, { grade: 25 }, { grade: 22 }, { grade: 20 }
    ];

    const count = { '0-20': 0, '21-30': 0, '31-40': 0, '41-50': 0 };

    students.forEach(s => {
      if (s.grade <= 20) count['0-20']++;
      else if (s.grade <= 30) count['21-30']++;
      else if (s.grade <= 40) count['31-40']++;
      else count['41-50']++;
    });

    document.getElementById(""output"").innerHTML =
      Object.entries(count).map(([range, num]) => ${range}: ${num}).join(""<br>"");
  </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <title>Attendance</title>
  <style>
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #000; padding: 6px; text-align: center; }
    .low { background: #f88; }
    .medium { background: #acf; }
    .high { background: #afa; }
  </style>
</head>
<body>

<h2>Attendance Report</h2>
<table>
  <tr><th>Name</th><th>Attended</th><th>%</th></tr>
  <tbody id=""data""></tbody>
</table>

<script>
  const students = [
    { name: ""John"", attended: 25 },
    { name: ""Jane"", attended: 32 },
    { name: ""Mike"", attended: 30 },
    { name: ""Sarah"", attended: 28 },
    { name: ""David"", attended: 35 }
  ];
  const total = 40;
  const table = document.getElementById('data');

  students.forEach(s => {
    let p = Math.round((s.attended / total) * 100);
    let cls = p < 75 ? 'low' : p <= 85 ? 'medium' : 'high';
    table.innerHTML += <tr class=""${cls}""><td>${s.name}</td><td>${s.attended}</td><td>${p}%</td></tr>;
  });
</script>

</body>
</html>




import React, { useState, useEffect } from 'react';
function TimeBasedGreeting() {
const [greeting, setGreeting] = useState('');
useEffect(() => {
const updateGreeting = () => {
const now = new Date();
const hours = now.getHours();
if (hours >= 0 && hours < 12) {
setGreeting('Good Morning');
} else if (hours >= 12 && hours < 17) {
setGreeting('Good Afternoon');
} else if (hours >= 17 && hours < 21) {
setGreeting('Good Evening');
} else {
setGreeting('Good Night');
}
};
// Update greeting immediately
updateGreeting();
// Update greeting every minute to handle day changes
const interval = setInterval(updateGreeting, 60000);
return () => clearInterval(interval);
}, []);
return (
<div className=""greeting-app"">
<h1>{greeting}</h1>
<p>Current time: {new Date().toLocaleTimeString()}</p>
</div>
);
}
export default TimeBasedGreeting;





import React from 'react';
import './App.css';
function IssueTracker() {
// Static issue data
const issues = [
{
id: 1,
title: 'Error in Login screen',
description: 'On entry of correct password it displays incorrect password unable to login',
status: 'Closed'
},
{
id: 2,
title: 'Server Message 200 On Error',
description: 'Instead of 204 No content error message Message 200 Success is
displayed',
status: 'Open'
},
{
id: 3,
title: 'Mobile Responsiveness Issue',
description: 'Layout breaks on mobile devices below 400px width',
status: 'Open'
}
];
return (
<div className=""issue-tracker"">
<h1>Issue Tracker</h1>
<div className=""issues-container"">
{issues.map(issue => (
<div key={issue.id} className={issue-card ${issue.status.toLowerCase()}}>
<h3>{issue.title}</h3>
<p className=""description"">{issue.description}</p>
<div className=""status"">
Status: <span className={`status-badge
${issue.status.toLowerCase()}`}>{issue.status}</span>
</div>
</div>
))}
</div>
</div>
);
}
export default IssueTracker;




<!DOCTYPE html>
<html>
<head>
  <title>Attendance</title>
  <style>
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #000; padding: 6px; text-align: center; }
    .low { background: #f88; }
    .medium { background: #acf; }
    .high { background: #afa; }
  </style>
</head>
<body>

<h2>Attendance Report</h2>
<table>
  <tr><th>Name</th><th>Attended</th><th>%</th></tr>
  <tbody id=""data""></tbody>
</table>

<script>
  const students = [
    { name: ""John"", attended: 25 },
    { name: ""Jane"", attended: 32 },
    { name: ""Mike"", attended: 30 },
    { name: ""Sarah"", attended: 28 },
    { name: ""David"", attended: 35 }
  ];
  const total = 40;
  const table = document.getElementById('data');

  students.forEach(s => {
    let p = Math.round((s.attended / total) * 100);
    let cls = p < 75 ? 'low' : p <= 85 ? 'medium' : 'high';
    table.innerHTML += <tr class=""${cls}""><td>${s.name}</td><td>${s.attended}</td><td>${p}%</td></tr>;
  });
</script>

</body>
</html>




<!DOCTYPE html>
<html>
<body>
  <input id=""input"" placeholder=""Enter text"">
  <button onclick=""check()"">Check</button>
  <p id=""result""></p>

  <script>
  function check() {
    // Get the input value from the text box
    let inputValue = document.getElementById('input').value;

    // Convert the input to lowercase and remove all non-alphanumeric characters
    // This makes the check case-insensitive and ignores spaces, punctuation, etc.
    let cleaned = inputValue.toLowerCase().replace(/[^a-z0-9]/g, '');

    // Reverse the cleaned string
    let reversed = cleaned.split('').reverse().join('');

    // Compare the cleaned string with its reversed version
    if (cleaned === reversed) {
      // If they match, it's a palindrome
      document.getElementById('result').textContent = 'Palindrome';
    } else {
      // If not, it's not a palindrome
      document.getElementById('result').textContent = 'Not a palindrome';
    }
  }
</script>

</body>
</html>




import React, { useState } from 'react';
function WelcomeMessage() {
const [message, setMessage] = useState(""Welcome to Dayananda Sagar"");
const handleClick = () => {
setMessage(""The best place to enjoy without time"");
};
return (
<div style={{ textAlign: 'center', marginTop: '50px' }}>
<h1>{message}</h1>
<button
onClick={handleClick}
style={{
padding: '10px 20px',
fontSize: '16px',
backgroundColor: '#4CAF50',
color: 'white',
border: 'none',
borderRadius: '5px',
cursor: 'pointer'
}}
>
Change Message
</button>
</div>
);
}
export default WelcomeMessage;

. Express.js Server (Mount Event Function)
const express = require('express');
const app = express();
// Mount event middleware
app.use((req, res, next) => {
console.log(""Teacher taught --- First Message"");
next();
console.log(""Student did not listen --- Second Message"");
});
// Basic route
app.get('/', (req, res) => {
res.send('Server is running');
});
// Start server
const PORT = 3000;
app.listen(PORT, () => {
console.log(Server listening on PORT ${PORT});
});





<!DOCTYPE html>
<html>
<head>
  <title>Poem Screenshot</title>
  <script src=""https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js""></script>
  <style>
    body { font-family: Georgia; text-align: center; background: #f9f9f9; padding: 20px; }
    h1, h2 { text-decoration: underline; }
    .poet { font-style: italic; margin-top: 20px; }
    button { margin-top: 30px; padding: 10px 20px; background: #4a6fa5; color: #fff; border: none; border-radius: 4px; }
  </style>
</head>
<body id=""poem"">
  <h1>Poem by Sir Walter Scott</h1>
  <h2>My Native Land</h2>
  <p><u>Breathes</u> there the man, with soul so dead,<br>
     Who never to himself hath said,<br>
     This is my own, my native land!</p>
  <div class=""poet"">- Sir Walter Scott</div>

  <button onclick=""takeScreenshot()"">Take Screenshot</button>

  <script>
    function takeScreenshot() {
      html2canvas(document.body).then(canvas => {
        let link = document.createElement('a');
        link.download = 'poem-screenshot.png';
        link.href = canvas.toDataURL();
        link.click();
      });
    }
  </script>
</body>
</html>




LAB PROGRAMS:

<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>
    td {
      padding: 5px;
      font-size: larger;
      font-family: 'Courier New', Courier, monospace;
    }
    table{
        background-origin: padding-box;
        border: 1px outset;
        box-shadow: 20px , 30 px;
    }
  </style>
</head>
<body>

<header style=""display: flex; align-items: center; justify-content: center;"">
  <img src=""download.jpg"" style=""width: 80px; height: 100px;"">
  <div style=""margin-left: 10px; text-align: center;"">
    <h1>Dayananda Sagar College Of Engineering</h1>
    <h2>Affiliated to VTU</h2>
    <h3>Dept of Information Science and Engineering</h3>
  </div>
</header>
<hr>
<br><br>

<center>
<h1>Course Registation </h1>
<form action=""#"">
    <table >
        <tr>
            <td>Std Name:</td>
            <td><input type=""text"" required></td>
        </tr>
                <tr>
            <td>Std USN:</td>
            <td><input type=""text"" required></td>
        </tr>
        <tr>
            <td>Std P.Num:</td>
            <td><input type=""number"" required></td>
        </tr>
        <tr>
            <td>Std Email:</td>
            <td><input type=""email"" required></td>
        </tr>
        <tr>
            <td>Std Sem:</td>
            <td><input type=""text"" required></td>
        </tr>
        <tr>
            <td>Std Section:</td>
            <td><select style=""width: 178px;"">
                <option value="""" disabled selected>Select your section</option>
                <option value=""A"">A</option>
                <option value=""B"">B</option>
                <option value=""C"">C</option>
            </select>
            </td>
        </tr>
        <tr>
            <td>Std Subject:</td>
            <td><select size=3 style=""width: 178px;"">
                <option value=""A"">A</option>
                <option value=""B"">B</option>
                <option value=""C"">C</option>
            </select>
            </td>
        </tr>
        <tr>
            <td>
                <label>Fee Paid</label>
            </td>
            <td>
                <input type=""radio"" name=""yes"" id=""fee"">Yes
                <input type=""radio"" name=""yes"" id=""fee"">No
            </td>
        </tr>
    </table>
    <br>
   
    <input type=""submit"" style=""width: 100px;"">
    <input type=""reset"" style=""width: 100px;"">
    </div>

</form>
</center>


</body>
</html>




<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"" />
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
  <title>Profile Card</title>
  <style>
    body {
      margin: 0;
      font-family: Arial;
      display: flex;
      justify-content: center;
      align-items: center;
      /* min-height: 100vh; */
      background: #f0f0f0;
    }
    .card {
      width: 80%;
      /* max-width: 800px; */
      background-color: antiquewhite;
      padding: 40px;
      box-shadow: 0 0 10px #aaa;
    }
    .card img {
      width: 100px;
      height: auto;
    }
    .card .p {
      text-align: center;
    }
    .personal {
      background-color: aqua;
      margin-top: 20px;
      padding: 10px;
    }
  </style>
</head>
<body>
  <div class=""card"">
    <div class=""p"">
      <img src=""download.jpg"" alt=""Profile Picture"" />
      <h1>Shravya S Shetty</h1>
      <h4>Student at DSCE</h4>
    </div>

    <div class=""personal"">
      <h1>Education</h1>
      <hr />
      <p>Bachelor of Eng at ISE<br />DSCE<br />2022-2026</p>
    </div>

    <div class=""personal"">
      <h1>Education</h1>
      <hr />
      <p>Bachelor of Eng at ISE<br />DSCE<br />2022-2026</p>
    </div>

    <div class=""personal"">
      <h1>Education</h1>
      <hr />
      <p>Bachelor of Eng at ISE<br />DSCE<br />2022-2026</p>
    </div>

    <div class=""personal"">
      <h1>Education</h1>
      <hr />
      <p>Bachelor of Eng at ISE<br />DSCE<br />2022-2026</p>
    </div>
  </div>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <title>Parent Teacher Meet</title>
  <style>
    body {
      font-family: Arial;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      background: #f0f0f0;
    }
    .card {
      max-width: 400px;
      background: white;
      padding: 20px;
      box-shadow: 0 0 10px #ccc;
      text-align: center;
    }
    .card img {
      height: 50px;
      margin: 5px;
    }
    .title {
      font-weight: bold;
      color: white;
      background-color: #0047ab;
    }
    .meeting {
      background: #0047ab;
      color: white;
      padding: 10px;
      margin: 15px 0;
    }
    .footer {
      font-size: 12px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class=""card"">
    <div class=""title"">DAYANANDA SAGAR COLLEGE OF ENGINEERING
    <p> Affiliated to VTU</p>
    <p>Dept ISE</p>
    </div>
    <div>
      <img src=""download.jpg"" alt="""">
      <img src=""iiclogo.jpg"" alt="""">
      <img src=""images.jpg"" alt="""">
    </div>
    <div class=""meeting"">1st Year ISE <br> Parent Teachers Meeting</div>
    <img src=""ptm.webp"" alt=""Meeting"" style=""width:350px; height: 250px;"">
    <p><b>April 12, 2025 | 02:00 PM</b><br>Venue: ISE-308</p>
    <div class=""footer"">
      Dr. Madhura J ||  Prof. Bharath B C <br>
      Dr. Annapurna P Patil || HOD<br>
      Dr. B G Prasad || Princpial
    </div>
  </div>
</body>
</html>




<!DOCTYPE html>
<html>
<head><title>Prime Factor Calculator</title></head>
<body>
  <h2>Prime Factor Calculator</h2>
  <input id=""n"" type=""number"" placeholder=""Enter number"">
  <button onclick=""f()"">Calculate</button>
  <p id=""r""></p>

  <script>
    function f() {
      let n =document.getElementById(""n"").value, r = [], d = 2;
      while (n > 1) {
        if (n % d === 0) {
             r.push(d);
             n /= d; }
        else d++;
      }
      document.getElementById(""r"").textContent = r.length ? Prime factors: ${r.join("" , "")} : ""Invalid input"";
    }
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head><title>Alphanumerical Sort</title></head>
<body>
  <h2>Alpha Numerical Sorting</h2>
  <p>Original: <span id=""original""></span></p>
  <p>Sorted: <span id=""sorted""></span></p>

  <script>
    const arr = [""mango"", ""TuttyFruity"", ""Bell"", ""1DS22IS108"", ""Peanuts"", ""HoD"", ""Z"", ""dob"", ""3300"", ""hod"", ""Jack""];
    document.getElementById(""original"").textContent = arr.join("", "");
    document.getElementById(""sorted"").textContent = arr.sort((a, b) => a.localeCompare(b)).join("", "");
  </script>
</body>
</html>



import React, { useState } from ""react"";

export default function App() {
  const [votes, setVotes] = useState({ Akash: 0, Dhanush: 0, Srusthi: 0 });
  const [showVotes, setShowVotes] = useState(false);

  const vote = (name) => {
    setVotes({ ...votes, [name]: votes[name] + 1 });
    setShowVotes(false);
  };

  const total = Object.values(votes).reduce((a, b) => a + b, 0);

  return (
    <div style={{ textAlign: ""center"", fontFamily: ""Arial"" }}>
      <h1>Voting App</h1>
      {Object.keys(votes).map((name) => (
        <div key={name} style={{ border: ""1px solid #ccc"", margin: 10, padding: 10 }}>
          <h2>{name}</h2>
          <p>Votes: {showVotes ? votes[name] : ""-""}</p>
          <button onClick={() => vote(name)}>Vote</button>
        </div>
      ))}
      <button onClick={() => setShowVotes(true)} style={{ marginTop: 20 }}>
        View Votes
      </button>
      {showVotes && <p>Total Votes: {total}</p>}
    </div>
  );
}




LoginForm.js
import React, { useState } from 'react';

const LoginForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [msg, setMsg] = useState('');

  const isValid = (pwd) =>
    /^(?=.[a-z])(?=.[A-Z])(?=.\d)(?=.[@$!%*?&]).{8,}$/.test(pwd);

  const handleSubmit = (e) => {
    e.preventDefault();
    setMsg(
      isValid(password)
        ? 'Login successful (dummy validation).'
        : 'Password must be 8+ characters with uppercase, lowercase, number, and special character.'
    );
  };

  return (
    <div style={{ maxWidth: 300, margin: '50px auto', fontFamily: 'Arial' }}>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <input
          type=""email""
          placeholder=""Email""
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          style={{ width: '100%', marginBottom: 10 }}
        />
        <input
          type=""password""
          placeholder=""Password""
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
          style={{ width: '100%', marginBottom: 10 }}
        />
        <button type=""submit"">Login</button>
      </form>
      <p style={{ color: 'red', marginTop: 10 }}>{msg}</p>
    </div>
  );
};

export default LoginForm;

App.js
import React from 'react';
import LoginForm from './LoginForm';

function App() {
  return (
    <div>
      <LoginForm />
    </div>
  );
}

export default App;





ListDir.js 
const fs = require('fs'); 
const path = require('path'); 
 
function listDirectoryContents(dirPath) { 
  try { 
    const items = fs.readdirSync(dirPath); 
    const result = items.map(item => { 
      const fullPath = path.join(dirPath, item); 
      const isDirectory = fs.statSync(fullPath).isDirectory(); 
      return { 
        name: item, 
        type: isDirectory ? 'directory' : 'file', 
        path: fullPath 
      }; 
    }); 
 
    console.log(JSON.stringify(result, null, 2)); 
  } catch (err) { 
    console.error('Error reading directory:', err.message); 
  } 
} 
 
const inputPath = process.argv[2] || '.'; 
listDirectoryContents(inputPath);

#node ListDir.js ""C:\Users\YourName\Documents""(output)"
FyJMRsR3,Grupo 3 | Projeto 4,Ultizin,C++,Tuesday 27th of May 2025 08:22:01 PM CDT,"/* Programa: Utilizando Joystick Shield com LED e Buzzer */

/* Define os pinos dos botões */
int Botao_A = 2;
int Botao_B = 3;
int Botao_C = 4;
int Botao_D = 5;
int Botao_E = 6;
int Botao_F = 7;
int Botao_K = 8;

/* Define o pino do LED (conectado à porta D12) */
int LED = 12;

/* Define o pino do buzzer passivo (conectado à porta D13) */
int Buzzer = 13;

void setup() {
  /* Configura os botões como entrada com resistor pull-up */
  for (int i = 2; i <= 8; i++) {
    pinMode(i, INPUT_PULLUP);
  }

  /* Configura LED e buzzer como saída */
  pinMode(LED, OUTPUT);
  pinMode(Buzzer, OUTPUT);
}

void loop() {
  /* Se qualquer botão de A a F for pressionado, liga o LED */
  if (!digitalRead(Botao_A) || !digitalRead(Botao_B) || !digitalRead(Botao_C) ||
      !digitalRead(Botao_D) || !digitalRead(Botao_E) || !digitalRead(Botao_F)) {
    digitalWrite(LED, HIGH);
  } else {
    digitalWrite(LED, LOW);
  }

  /* Se o botão K for pressionado, emite som com o buzzer */
  if (!digitalRead(Botao_K)) {
    tone(Buzzer, 800);  // Frequência do som (800 Hz)
  } else {
    noTone(Buzzer);
  }
}
"
LAxGTZsA,EfectoSimetricoControlado,hidromotic,C,Tuesday 27th of May 2025 08:00:03 PM CDT,"#define PIN_BOTON_INC 10
#define CONFIG_BOTON_INC      pinMode(PIN_BOTON_INC, INPUT_PULLUP)
#define BOTON_INC_PRESIONADO  digitalRead(PIN_BOTON_INC)

#define PIN_BOTON_DEC 11
#define CONFIG_BOTON_DEC      pinMode(PIN_BOTON_DEC, INPUT_PULLUP)
#define BOTON_DEC_PRESIONADO  digitalRead(PIN_BOTON_DEC)

#define PIN_BLINK 13
#define CONFIG_BLINK    pinMode(PIN_BLINK, OUTPUT)
#define ENCENDER_BLINK  digitalWrite(PIN_BLINK, HIGH)
#define APAGAR_BLINK    digitalWrite(PIN_BLINK, LOW)
#define MS_ESPERA_BLINK 250

#define PIN_LED1 2
#define PIN_LED2 3
#define PIN_LED3 4
#define PIN_LED4 5
#define PIN_LED5 6
#define PIN_LED6 7
#define PIN_LED7 8
#define PIN_LED8 9
#define CANT_LED 8

const int pin_led[]={PIN_LED1, PIN_LED2,PIN_LED3,PIN_LED4,PIN_LED5,PIN_LED6,PIN_LED7,PIN_LED8};

#define CONFIG_LED(X)           pinMode(pin_led[X], OUTPUT)
#define ENCENDER_LED(X)         digitalWrite(pin_led[X], HIGH)
#define APAGAR_LED(X)           digitalWrite(pin_led[X], LOW)
#define AJUSTAR_LED(X, estado)  digitalWrite(pin_led[X], estado)

#define CANT_PASOS 4
char paso=0;

void setup() {
  unsigned char i;
  
  CONFIG_BLINK;
  CONFIG_BOTON_INC;
  CONFIG_BOTON_DEC;

  for(i=0; i<CANT_LED; i++) CONFIG_LED(i);

  Serial.begin(9600);
  Serial.print(""Efecto Simetrico Controlado con Comandos"");
  }

void loop()
  {
  Blink();
  EfectoSimetricoControlado();
  CtrlBotones();
  RecepcionSerie();
  }

void RecepcionSerie(void)
  {
  char dato;
  
  if(!Serial.available()) return;
  dato=Serial.read();
  Serial.print(dato);

          //0 y 4
  if(dato>='0' && dato<= ('0'+CANT_PASOS-1))
    {
    paso=dato-'0';
    return;
    }

  switch(dato)
    {
    case '+': if(paso<(CANT_PASOS-1)) paso++;  break;
    case '-': if(paso>0)              paso--;  break;
    case '*': paso=0;                           break;
    //case '0': paso=0; break;
    //case '1': paso=1; break;
    //case '2': paso=2; break;
    //case '3': paso=3; break;
    //case '4': paso=4; break;
    }

    
  }
void CtrlBotones(void)
  {
  static bool boton_inc_presionado_ant=0;
  static bool boton_dec_presionado_ant=0;
  
  if(BOTON_INC_PRESIONADO != boton_inc_presionado_ant)
    {
    boton_inc_presionado_ant=BOTON_INC_PRESIONADO;

    if(BOTON_INC_PRESIONADO) 
      {
      if(paso< (CANT_PASOS-1)) paso++; //0,1,2,3,4
      else paso=0;
      }
    }
  if(BOTON_DEC_PRESIONADO != boton_dec_presionado_ant)
    {
    boton_dec_presionado_ant=BOTON_DEC_PRESIONADO;

    if(BOTON_DEC_PRESIONADO) 
      {
      if(paso>0) paso--; //1,2,3,4
      else paso=CANT_PASOS-1;
      }
    }

  }

void EfectoSimetricoControlado(void)
  {
  static unsigned char paso_ant=0;
  
  if(paso==paso_ant) return;
  if(paso>4) paso=0;
  
  //Apagar led de acuerdo a paso_ant
  APAGAR_LED(paso_ant);
  APAGAR_LED(CANT_LED - paso_ant -1);
    
  paso_ant=paso;

  if(paso==4) return; //Estado en que están todos apagados
  
  //Encender los led que correspondan
  ENCENDER_LED(paso);
  ENCENDER_LED(CANT_LED - paso -1);
  
  }

void EfectoBarra(void)
  {
  static unsigned long millis_ant=0;
  static unsigned char led=0, i;
  
  if(millis() - millis_ant < 100) return;
  millis_ant=millis();

  if(led==CANT_LED)
    {
    for(i=0; i<CANT_LED; i++) APAGAR_LED(i);
    led=0;
    return;
    }
    
  ENCENDER_LED(led);
  led++;
  
  }

void Blink(void)
  {
  static unsigned long millis_ini=0;
  static bool estado_led=0; //Se podría declarar bool
  
  //ESPERA POR EL EVENTO
  if( (millis() - millis_ini) < MS_ESPERA_BLINK ) return; //Sale
  millis_ini=millis();

  //ACCIÓN
  estado_led = !estado_led;
  if(estado_led) ENCENDER_BLINK;
  else           APAGAR_BLINK;
  }"
